; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  4efc              LDR      r6,|L1.1016|
;;;308    	{
;;;309    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960022          LDRB     r0,[r6,#0x22]         ;307  ; spc_stat
00000c  2802              CMP      r0,#2                 ;307
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;310    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;311    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;312    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f8dfa3e0          LDR      r10,|L1.1020|
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8dfb3e0          LDR      r11,|L1.1024|
000020  f8df83e0          LDR      r8,|L1.1028|
000024  f8ba0000          LDRH     r0,[r10,#0]           ;315  ; snmp_bat_status
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93dc          LDR      r9,|L1.1032|
00002c  4cf7              LDR      r4,|L1.1036|
00002e  4df8              LDR      r5,|L1.1040|
000030  b148              CBZ      r0,|L1.70|
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  8027              STRH     r7,[r4,#0]
;;;551    	snmp_bat_flag_puts[0]=0;
000034  802f              STRH     r7,[r5,#0]
                  |L1.54|
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8ba0002          LDRH     r0,[r10,#2]  ; snmp_bat_status
00003a  2800              CMP      r0,#0
00003c  d07d              BEQ      |L1.314|
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  8067              STRH     r7,[r4,#2]
;;;790    	snmp_bat_flag_puts[1]=0;
000040  806f              STRH     r7,[r5,#2]
                  |L1.66|
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.70|
000046  f9bb0000          LDRSH    r0,[r11,#0]           ;317  ; USIGN
00004a  f9b82002          LDRSH    r2,[r8,#2]            ;317  ; bat
00004e  eb000380          ADD      r3,r0,r0,LSL #2       ;317
000052  48ee              LDR      r0,|L1.1036|
000054  ebb20f43          CMP      r2,r3,LSL #1          ;317
000058  f9b01000          LDRSH    r1,[r0,#0]            ;319
00005c  48ec              LDR      r0,|L1.1040|
00005e  f9b00000          LDRSH    r0,[r0,#0]            ;320
000062  da0f              BGE      |L1.132|
000064  f0410101          ORR      r1,r1,#1              ;319
000068  8021              STRH     r1,[r4,#0]            ;319
00006a  07c0              LSLS     r0,r0,#31             ;320
00006c  d119              BNE      |L1.162|
00006e  2300              MOVS     r3,#0                 ;322
000070  2208              MOVS     r2,#8                 ;322
000072  2105              MOVS     r1,#5                 ;322
000074  a0e7              ADR      r0,|L1.1044|
000076  f7fffffe          BL       snmp_trap_send
00007a  8828              LDRH     r0,[r5,#0]            ;323  ; snmp_bat_flag_puts
00007c  f0400001          ORR      r0,r0,#1              ;323
000080  8028              STRH     r0,[r5,#0]            ;323
000082  e00e              B        |L1.162|
                  |L1.132|
000084  f0210101          BIC      r1,r1,#1              ;328
000088  8021              STRH     r1,[r4,#0]            ;328
00008a  07c0              LSLS     r0,r0,#31             ;329
00008c  d009              BEQ      |L1.162|
00008e  2301              MOVS     r3,#1                 ;331
000090  2208              MOVS     r2,#8                 ;331
000092  2105              MOVS     r1,#5                 ;331
000094  a0e7              ADR      r0,|L1.1076|
000096  f7fffffe          BL       snmp_trap_send
00009a  8828              LDRH     r0,[r5,#0]            ;332  ; snmp_bat_flag_puts
00009c  f0200001          BIC      r0,r0,#1              ;332
0000a0  8028              STRH     r0,[r5,#0]            ;332
                  |L1.162|
0000a2  f898003f          LDRB     r0,[r8,#0x3f]         ;336  ; bat
0000a6  07c0              LSLS     r0,r0,#31             ;336
0000a8  d011              BEQ      |L1.206|
0000aa  8820              LDRH     r0,[r4,#0]            ;338  ; snmp_bat_flag
0000ac  f0400002          ORR      r0,r0,#2              ;338
0000b0  8020              STRH     r0,[r4,#0]            ;338
0000b2  8828              LDRH     r0,[r5,#0]            ;339  ; snmp_bat_flag_puts
0000b4  0780              LSLS     r0,r0,#30             ;339
0000b6  d41b              BMI      |L1.240|
0000b8  2302              MOVS     r3,#2                 ;341
0000ba  2208              MOVS     r2,#8                 ;341
0000bc  2105              MOVS     r1,#5                 ;341
0000be  a0e7              ADR      r0,|L1.1116|
0000c0  f7fffffe          BL       snmp_trap_send
0000c4  8828              LDRH     r0,[r5,#0]            ;342  ; snmp_bat_flag_puts
0000c6  f0400002          ORR      r0,r0,#2              ;342
0000ca  8028              STRH     r0,[r5,#0]            ;342
0000cc  e010              B        |L1.240|
                  |L1.206|
0000ce  8820              LDRH     r0,[r4,#0]            ;347  ; snmp_bat_flag
0000d0  f0200002          BIC      r0,r0,#2              ;347
0000d4  8020              STRH     r0,[r4,#0]            ;347
0000d6  8828              LDRH     r0,[r5,#0]            ;348  ; snmp_bat_flag_puts
0000d8  0780              LSLS     r0,r0,#30             ;348
0000da  d509              BPL      |L1.240|
0000dc  2303              MOVS     r3,#3                 ;350
0000de  2208              MOVS     r2,#8                 ;350
0000e0  2105              MOVS     r1,#5                 ;350
0000e2  a0e9              ADR      r0,|L1.1160|
0000e4  f7fffffe          BL       snmp_trap_send
0000e8  8828              LDRH     r0,[r5,#0]            ;351  ; snmp_bat_flag_puts
0000ea  f0200002          BIC      r0,r0,#2              ;351
0000ee  8028              STRH     r0,[r5,#0]            ;351
                  |L1.240|
0000f0  f898003f          LDRB     r0,[r8,#0x3f]         ;355  ; bat
0000f4  0780              LSLS     r0,r0,#30             ;355
0000f6  d511              BPL      |L1.284|
0000f8  8820              LDRH     r0,[r4,#0]            ;357  ; snmp_bat_flag
0000fa  f0400004          ORR      r0,r0,#4              ;357
0000fe  8020              STRH     r0,[r4,#0]            ;357
000100  8828              LDRH     r0,[r5,#0]            ;358  ; snmp_bat_flag_puts
000102  0740              LSLS     r0,r0,#29             ;358
000104  d41d              BMI      |L1.322|
000106  2304              MOVS     r3,#4                 ;360
000108  2208              MOVS     r2,#8                 ;360
00010a  2105              MOVS     r1,#5                 ;360
00010c  a0eb              ADR      r0,|L1.1212|
00010e  f7fffffe          BL       snmp_trap_send
000112  8828              LDRH     r0,[r5,#0]            ;361  ; snmp_bat_flag_puts
000114  f0400004          ORR      r0,r0,#4              ;361
000118  8028              STRH     r0,[r5,#0]            ;361
00011a  e012              B        |L1.322|
                  |L1.284|
00011c  8820              LDRH     r0,[r4,#0]            ;366  ; snmp_bat_flag
00011e  f0200004          BIC      r0,r0,#4              ;366
000122  8020              STRH     r0,[r4,#0]            ;366
000124  8828              LDRH     r0,[r5,#0]            ;367  ; snmp_bat_flag_puts
000126  0740              LSLS     r0,r0,#29             ;367
000128  d50b              BPL      |L1.322|
00012a  2305              MOVS     r3,#5                 ;369
00012c  2208              MOVS     r2,#8                 ;369
00012e  4619              MOV      r1,r3                 ;369
000130  a0ec              ADR      r0,|L1.1252|
000132  f7fffffe          BL       snmp_trap_send
000136  8828              LDRH     r0,[r5,#0]            ;370  ; snmp_bat_flag_puts
000138  e000              B        |L1.316|
                  |L1.314|
00013a  e322              B        |L1.1922|
                  |L1.316|
00013c  f0200004          BIC      r0,r0,#4              ;370
000140  8028              STRH     r0,[r5,#0]            ;370
                  |L1.322|
000142  f9b91000          LDRSH    r1,[r9,#0]            ;374  ; IKB
000146  f9b80008          LDRSH    r0,[r8,#8]            ;374  ; bat
00014a  424a              RSBS     r2,r1,#0              ;374
00014c  4290              CMP      r0,r2                 ;374
00014e  da04              BGE      |L1.346|
000150  8820              LDRH     r0,[r4,#0]            ;374  ; snmp_bat_flag
000152  f0400008          ORR      r0,r0,#8              ;374
000156  8020              STRH     r0,[r4,#0]            ;374
000158  e005              B        |L1.358|
                  |L1.346|
00015a  4288              CMP      r0,r1                 ;375
00015c  dd03              BLE      |L1.358|
00015e  8820              LDRH     r0,[r4,#0]            ;375  ; snmp_bat_flag
000160  f0200008          BIC      r0,r0,#8              ;375
000164  8020              STRH     r0,[r4,#0]            ;375
                  |L1.358|
000166  f8960022          LDRB     r0,[r6,#0x22]         ;377  ; spc_stat
00016a  2801              CMP      r0,#1                 ;377
00016c  d103              BNE      |L1.374|
00016e  f8960023          LDRB     r0,[r6,#0x23]         ;377  ; spc_bat
000172  2800              CMP      r0,#0                 ;377
000174  d03a              BEQ      |L1.492|
                  |L1.374|
000176  8820              LDRH     r0,[r4,#0]            ;388  ; snmp_bat_flag
000178  f0200010          BIC      r0,r0,#0x10           ;388
00017c  8020              STRH     r0,[r4,#0]            ;388
00017e  8828              LDRH     r0,[r5,#0]            ;389  ; snmp_bat_flag_puts
000180  06c0              LSLS     r0,r0,#27             ;389
000182  d509              BPL      |L1.408|
000184  2307              MOVS     r3,#7                 ;391
000186  2208              MOVS     r2,#8                 ;391
000188  2105              MOVS     r1,#5                 ;391
00018a  a0e3              ADR      r0,|L1.1304|
00018c  f7fffffe          BL       snmp_trap_send
000190  8828              LDRH     r0,[r5,#0]            ;392  ; snmp_bat_flag_puts
000192  f0200010          BIC      r0,r0,#0x10           ;392
000196  8028              STRH     r0,[r5,#0]            ;392
                  |L1.408|
000198  f8960022          LDRB     r0,[r6,#0x22]         ;396  ; spc_stat
00019c  2802              CMP      r0,#2                 ;396
00019e  d037              BEQ      |L1.528|
0001a0  8820              LDRH     r0,[r4,#0]            ;407  ; snmp_bat_flag
0001a2  f0200020          BIC      r0,r0,#0x20           ;407
0001a6  8020              STRH     r0,[r4,#0]            ;407
0001a8  8828              LDRH     r0,[r5,#0]            ;408  ; snmp_bat_flag_puts
0001aa  0680              LSLS     r0,r0,#26             ;408
0001ac  d509              BPL      |L1.450|
0001ae  2309              MOVS     r3,#9                 ;410
0001b0  2208              MOVS     r2,#8                 ;410
0001b2  2105              MOVS     r1,#5                 ;410
0001b4  a0e0              ADR      r0,|L1.1336|
0001b6  f7fffffe          BL       snmp_trap_send
0001ba  8828              LDRH     r0,[r5,#0]            ;411  ; snmp_bat_flag_puts
0001bc  f0200020          BIC      r0,r0,#0x20           ;411
0001c0  8028              STRH     r0,[r5,#0]            ;411
                  |L1.450|
0001c2  7870              LDRB     r0,[r6,#1]            ;415  ; vz_error
0001c4  2800              CMP      r0,#0                 ;415
0001c6  d035              BEQ      |L1.564|
0001c8  8820              LDRH     r0,[r4,#0]            ;417  ; snmp_bat_flag
0001ca  f0400040          ORR      r0,r0,#0x40           ;417
0001ce  8020              STRH     r0,[r4,#0]            ;417
0001d0  8828              LDRH     r0,[r5,#0]            ;418  ; snmp_bat_flag_puts
0001d2  0640              LSLS     r0,r0,#25             ;418
0001d4  d43f              BMI      |L1.598|
0001d6  230a              MOVS     r3,#0xa               ;420
0001d8  2208              MOVS     r2,#8                 ;420
0001da  2105              MOVS     r1,#5                 ;420
0001dc  a0df              ADR      r0,|L1.1372|
0001de  f7fffffe          BL       snmp_trap_send
0001e2  8828              LDRH     r0,[r5,#0]            ;421  ; snmp_bat_flag_puts
0001e4  f0400040          ORR      r0,r0,#0x40           ;421
0001e8  8028              STRH     r0,[r5,#0]            ;421
0001ea  e034              B        |L1.598|
                  |L1.492|
0001ec  8820              LDRH     r0,[r4,#0]            ;379  ; snmp_bat_flag
0001ee  f0400010          ORR      r0,r0,#0x10           ;379
0001f2  8020              STRH     r0,[r4,#0]            ;379
0001f4  8828              LDRH     r0,[r5,#0]            ;380  ; snmp_bat_flag_puts
0001f6  06c0              LSLS     r0,r0,#27             ;380
0001f8  d4ce              BMI      |L1.408|
0001fa  2306              MOVS     r3,#6                 ;382
0001fc  2208              MOVS     r2,#8                 ;382
0001fe  2105              MOVS     r1,#5                 ;382
000200  a0df              ADR      r0,|L1.1408|
000202  f7fffffe          BL       snmp_trap_send
000206  8828              LDRH     r0,[r5,#0]            ;383  ; snmp_bat_flag_puts
000208  f0400010          ORR      r0,r0,#0x10           ;383
00020c  8028              STRH     r0,[r5,#0]            ;383
00020e  e7c3              B        |L1.408|
                  |L1.528|
000210  8820              LDRH     r0,[r4,#0]            ;398  ; snmp_bat_flag
000212  f0400020          ORR      r0,r0,#0x20           ;398
000216  8020              STRH     r0,[r4,#0]            ;398
000218  8828              LDRH     r0,[r5,#0]            ;399  ; snmp_bat_flag_puts
00021a  0680              LSLS     r0,r0,#26             ;399
00021c  d4d1              BMI      |L1.450|
00021e  2308              MOVS     r3,#8                 ;401
000220  461a              MOV      r2,r3                 ;401
000222  2105              MOVS     r1,#5                 ;401
000224  a0de              ADR      r0,|L1.1440|
000226  f7fffffe          BL       snmp_trap_send
00022a  8828              LDRH     r0,[r5,#0]            ;402  ; snmp_bat_flag_puts
00022c  f0400020          ORR      r0,r0,#0x20           ;402
000230  8028              STRH     r0,[r5,#0]            ;402
000232  e7c6              B        |L1.450|
                  |L1.564|
000234  8820              LDRH     r0,[r4,#0]            ;426  ; snmp_bat_flag
000236  f0200040          BIC      r0,r0,#0x40           ;426
00023a  8020              STRH     r0,[r4,#0]            ;426
00023c  8828              LDRH     r0,[r5,#0]            ;427  ; snmp_bat_flag_puts
00023e  0640              LSLS     r0,r0,#25             ;427
000240  d509              BPL      |L1.598|
000242  230b              MOVS     r3,#0xb               ;429
000244  2208              MOVS     r2,#8                 ;429
000246  2105              MOVS     r1,#5                 ;429
000248  a0de              ADR      r0,|L1.1476|
00024a  f7fffffe          BL       snmp_trap_send
00024e  8828              LDRH     r0,[r5,#0]            ;430  ; snmp_bat_flag_puts
000250  f0200040          BIC      r0,r0,#0x40           ;430
000254  8028              STRH     r0,[r5,#0]            ;430
                  |L1.598|
000256  48e4              LDR      r0,|L1.1512|
000258  7800              LDRB     r0,[r0,#0]            ;434  ; sp_ch_stat
00025a  2802              CMP      r0,#2                 ;434
00025c  d024              BEQ      |L1.680|
00025e  8820              LDRH     r0,[r4,#0]            ;445  ; snmp_bat_flag
000260  f0200080          BIC      r0,r0,#0x80           ;445
000264  8020              STRH     r0,[r4,#0]            ;445
000266  8828              LDRH     r0,[r5,#0]            ;446  ; snmp_bat_flag_puts
000268  0600              LSLS     r0,r0,#24             ;446
00026a  d509              BPL      |L1.640|
00026c  230b              MOVS     r3,#0xb               ;448
00026e  2208              MOVS     r2,#8                 ;448
000270  2105              MOVS     r1,#5                 ;448
000272  a0de              ADR      r0,|L1.1516|
000274  f7fffffe          BL       snmp_trap_send
000278  8828              LDRH     r0,[r5,#0]            ;449  ; snmp_bat_flag_puts
00027a  f0200080          BIC      r0,r0,#0x80           ;449
00027e  8028              STRH     r0,[r5,#0]            ;449
                  |L1.640|
000280  78b0              LDRB     r0,[r6,#2]            ;453  ; sp_ch_error
000282  b318              CBZ      r0,|L1.716|
000284  8820              LDRH     r0,[r4,#0]            ;455  ; snmp_bat_flag
000286  f4407080          ORR      r0,r0,#0x100          ;455
00028a  8020              STRH     r0,[r4,#0]            ;455
00028c  8828              LDRH     r0,[r5,#0]            ;456  ; snmp_bat_flag_puts
00028e  05c0              LSLS     r0,r0,#23             ;456
000290  d42d              BMI      |L1.750|
000292  230c              MOVS     r3,#0xc               ;458
000294  2208              MOVS     r2,#8                 ;458
000296  2105              MOVS     r1,#5                 ;458
000298  a0dc              ADR      r0,|L1.1548|
00029a  f7fffffe          BL       snmp_trap_send
00029e  8828              LDRH     r0,[r5,#0]            ;459  ; snmp_bat_flag_puts
0002a0  f4407080          ORR      r0,r0,#0x100          ;459
0002a4  8028              STRH     r0,[r5,#0]            ;459
0002a6  e022              B        |L1.750|
                  |L1.680|
0002a8  8820              LDRH     r0,[r4,#0]            ;436  ; snmp_bat_flag
0002aa  f0400080          ORR      r0,r0,#0x80           ;436
0002ae  8020              STRH     r0,[r4,#0]            ;436
0002b0  8828              LDRH     r0,[r5,#0]            ;437  ; snmp_bat_flag_puts
0002b2  0600              LSLS     r0,r0,#24             ;437
0002b4  d4e4              BMI      |L1.640|
0002b6  230a              MOVS     r3,#0xa               ;439
0002b8  2208              MOVS     r2,#8                 ;439
0002ba  2105              MOVS     r1,#5                 ;439
0002bc  a0db              ADR      r0,|L1.1580|
0002be  f7fffffe          BL       snmp_trap_send
0002c2  8828              LDRH     r0,[r5,#0]            ;440  ; snmp_bat_flag_puts
0002c4  f0400080          ORR      r0,r0,#0x80           ;440
0002c8  8028              STRH     r0,[r5,#0]            ;440
0002ca  e7d9              B        |L1.640|
                  |L1.716|
0002cc  8820              LDRH     r0,[r4,#0]            ;464  ; snmp_bat_flag
0002ce  f4207080          BIC      r0,r0,#0x100          ;464
0002d2  8020              STRH     r0,[r4,#0]            ;464
0002d4  8828              LDRH     r0,[r5,#0]            ;465  ; snmp_bat_flag_puts
0002d6  05c0              LSLS     r0,r0,#23             ;465
0002d8  d509              BPL      |L1.750|
0002da  230d              MOVS     r3,#0xd               ;467
0002dc  2208              MOVS     r2,#8                 ;467
0002de  2105              MOVS     r1,#5                 ;467
0002e0  a0da              ADR      r0,|L1.1612|
0002e2  f7fffffe          BL       snmp_trap_send
0002e6  8828              LDRH     r0,[r5,#0]            ;468  ; snmp_bat_flag_puts
0002e8  f4207080          BIC      r0,r0,#0x100          ;468
0002ec  8028              STRH     r0,[r5,#0]            ;468
                  |L1.750|
0002ee  7970              LDRB     r0,[r6,#5]            ;472  ; vz1_stat
0002f0  b188              CBZ      r0,|L1.790|
0002f2  8820              LDRH     r0,[r4,#0]            ;474  ; snmp_bat_flag
0002f4  f4407000          ORR      r0,r0,#0x200          ;474
0002f8  8020              STRH     r0,[r4,#0]            ;474
0002fa  8828              LDRH     r0,[r5,#0]            ;475  ; snmp_bat_flag_puts
0002fc  0580              LSLS     r0,r0,#22             ;475
0002fe  d41b              BMI      |L1.824|
000300  230e              MOVS     r3,#0xe               ;477
000302  2208              MOVS     r2,#8                 ;477
000304  2105              MOVS     r1,#5                 ;477
000306  a0da              ADR      r0,|L1.1648|
000308  f7fffffe          BL       snmp_trap_send
00030c  8828              LDRH     r0,[r5,#0]            ;478  ; snmp_bat_flag_puts
00030e  f4407000          ORR      r0,r0,#0x200          ;478
000312  8028              STRH     r0,[r5,#0]            ;478
000314  e010              B        |L1.824|
                  |L1.790|
000316  8820              LDRH     r0,[r4,#0]            ;483  ; snmp_bat_flag
000318  f4207000          BIC      r0,r0,#0x200          ;483
00031c  8020              STRH     r0,[r4,#0]            ;483
00031e  8828              LDRH     r0,[r5,#0]            ;484  ; snmp_bat_flag_puts
000320  0580              LSLS     r0,r0,#22             ;484
000322  d509              BPL      |L1.824|
000324  230f              MOVS     r3,#0xf               ;486
000326  2208              MOVS     r2,#8                 ;486
000328  2105              MOVS     r1,#5                 ;486
00032a  a0d9              ADR      r0,|L1.1680|
00032c  f7fffffe          BL       snmp_trap_send
000330  8828              LDRH     r0,[r5,#0]            ;487  ; snmp_bat_flag_puts
000332  f4207000          BIC      r0,r0,#0x200          ;487
000336  8028              STRH     r0,[r5,#0]            ;487
                  |L1.824|
000338  78f0              LDRB     r0,[r6,#3]            ;491  ; vz1_error
00033a  b188              CBZ      r0,|L1.864|
00033c  8820              LDRH     r0,[r4,#0]            ;493  ; snmp_bat_flag
00033e  f4406080          ORR      r0,r0,#0x400          ;493
000342  8020              STRH     r0,[r4,#0]            ;493
000344  8828              LDRH     r0,[r5,#0]            ;494  ; snmp_bat_flag_puts
000346  0540              LSLS     r0,r0,#21             ;494
000348  d41b              BMI      |L1.898|
00034a  2310              MOVS     r3,#0x10              ;496
00034c  2208              MOVS     r2,#8                 ;496
00034e  2105              MOVS     r1,#5                 ;496
000350  a0d7              ADR      r0,|L1.1712|
000352  f7fffffe          BL       snmp_trap_send
000356  8828              LDRH     r0,[r5,#0]            ;497  ; snmp_bat_flag_puts
000358  f4406080          ORR      r0,r0,#0x400          ;497
00035c  8028              STRH     r0,[r5,#0]            ;497
00035e  e010              B        |L1.898|
                  |L1.864|
000360  8820              LDRH     r0,[r4,#0]            ;502  ; snmp_bat_flag
000362  f4206080          BIC      r0,r0,#0x400          ;502
000366  8020              STRH     r0,[r4,#0]            ;502
000368  8828              LDRH     r0,[r5,#0]            ;503  ; snmp_bat_flag_puts
00036a  0540              LSLS     r0,r0,#21             ;503
00036c  d509              BPL      |L1.898|
00036e  2311              MOVS     r3,#0x11              ;505
000370  2208              MOVS     r2,#8                 ;505
000372  2105              MOVS     r1,#5                 ;505
000374  a0d7              ADR      r0,|L1.1748|
000376  f7fffffe          BL       snmp_trap_send
00037a  8828              LDRH     r0,[r5,#0]            ;506  ; snmp_bat_flag_puts
00037c  f4206080          BIC      r0,r0,#0x400          ;506
000380  8028              STRH     r0,[r5,#0]            ;506
                  |L1.898|
000382  79f0              LDRB     r0,[r6,#7]            ;510  ; vz2_stat
000384  b188              CBZ      r0,|L1.938|
000386  8820              LDRH     r0,[r4,#0]            ;512  ; snmp_bat_flag
000388  f4406000          ORR      r0,r0,#0x800          ;512
00038c  8020              STRH     r0,[r4,#0]            ;512
00038e  8828              LDRH     r0,[r5,#0]            ;513  ; snmp_bat_flag_puts
000390  0500              LSLS     r0,r0,#20             ;513
000392  d41b              BMI      |L1.972|
000394  2312              MOVS     r3,#0x12              ;515
000396  2208              MOVS     r2,#8                 ;515
000398  2105              MOVS     r1,#5                 ;515
00039a  a0d8              ADR      r0,|L1.1788|
00039c  f7fffffe          BL       snmp_trap_send
0003a0  8828              LDRH     r0,[r5,#0]            ;516  ; snmp_bat_flag_puts
0003a2  f4406000          ORR      r0,r0,#0x800          ;516
0003a6  8028              STRH     r0,[r5,#0]            ;516
0003a8  e010              B        |L1.972|
                  |L1.938|
0003aa  8820              LDRH     r0,[r4,#0]            ;521  ; snmp_bat_flag
0003ac  f4206000          BIC      r0,r0,#0x800          ;521
0003b0  8020              STRH     r0,[r4,#0]            ;521
0003b2  8828              LDRH     r0,[r5,#0]            ;522  ; snmp_bat_flag_puts
0003b4  0500              LSLS     r0,r0,#20             ;522
0003b6  d509              BPL      |L1.972|
0003b8  2313              MOVS     r3,#0x13              ;524
0003ba  2208              MOVS     r2,#8                 ;524
0003bc  2105              MOVS     r1,#5                 ;524
0003be  a0d6              ADR      r0,|L1.1816|
0003c0  f7fffffe          BL       snmp_trap_send
0003c4  8828              LDRH     r0,[r5,#0]            ;525  ; snmp_bat_flag_puts
0003c6  f4206000          BIC      r0,r0,#0x800          ;525
0003ca  8028              STRH     r0,[r5,#0]            ;525
                  |L1.972|
0003cc  7930              LDRB     r0,[r6,#4]            ;529  ; vz2_error
0003ce  b190              CBZ      r0,|L1.1014|
0003d0  8820              LDRH     r0,[r4,#0]            ;531  ; snmp_bat_flag
0003d2  f4405080          ORR      r0,r0,#0x1000         ;531
0003d6  8020              STRH     r0,[r4,#0]            ;531
0003d8  8828              LDRH     r0,[r5,#0]            ;532  ; snmp_bat_flag_puts
0003da  04c0              LSLS     r0,r0,#19             ;532
0003dc  f53fae2b          BMI      |L1.54|
0003e0  2314              MOVS     r3,#0x14              ;534
0003e2  2208              MOVS     r2,#8                 ;534
0003e4  2105              MOVS     r1,#5                 ;534
0003e6  a0d4              ADR      r0,|L1.1848|
0003e8  f7fffffe          BL       snmp_trap_send
0003ec  8828              LDRH     r0,[r5,#0]            ;535  ; snmp_bat_flag_puts
0003ee  f4405080          ORR      r0,r0,#0x1000         ;535
0003f2  8028              STRH     r0,[r5,#0]            ;535
                  |L1.1012|
0003f4  e61f              B        |L1.54|
                  |L1.1014|
0003f6  e1b1              B        |L1.1884|
                  |L1.1016|
                          DCD      ||area_number.25||
                  |L1.1020|
                          DCD      snmp_bat_status
                  |L1.1024|
                          DCD      USIGN
                  |L1.1028|
                          DCD      bat
                  |L1.1032|
                          DCD      IKB
                  |L1.1036|
                          DCD      snmp_bat_flag
                  |L1.1040|
                          DCD      snmp_bat_flag_puts
                  |L1.1044|
000414  42415420          DCB      "BAT #1 Alarm, battery is low",0
000418  23312041
00041c  6c61726d
000420  2c206261
000424  74746572
000428  79206973
00042c  206c6f77
000430  00      
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000438  23312041
00043c  6c61726d
000440  20636c65
000444  61722c20
000448  62617474
00044c  65727920
000450  6973206e
000454  6f74206c
000458  6f7700  
00045b  00                DCB      0
                  |L1.1116|
00045c  42415420          DCB      "BAT #1 Warning, high battery temperature",0
000460  23312057
000464  61726e69
000468  6e672c20
00046c  68696768
000470  20626174
000474  74657279
000478  2074656d
00047c  70657261
000480  74757265
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  42415420          DCB      "BAT #1 Warning clear, battery temperature is normal",0
00048c  23312057
000490  61726e69
000494  6e672063
000498  6c656172
00049c  2c206261
0004a0  74746572
0004a4  79207465
0004a8  6d706572
0004ac  61747572
0004b0  65206973
0004b4  206e6f72
0004b8  6d616c00
                  |L1.1212|
0004bc  42415420          DCB      "BAT #1 Alarm, high battery temperature",0
0004c0  23312041
0004c4  6c61726d
0004c8  2c206869
0004cc  67682062
0004d0  61747465
0004d4  72792074
0004d8  656d7065
0004dc  72617475
0004e0  726500  
0004e3  00                DCB      0
                  |L1.1252|
0004e4  42415420          DCB      "BAT #1 Alarm clear, battery temperature is normal",0
0004e8  23312041
0004ec  6c61726d
0004f0  20636c65
0004f4  61722c20
0004f8  62617474
0004fc  65727920
000500  74656d70
000504  65726174
000508  75726520
00050c  6973206e
000510  6f726d61
000514  6c00    
000516  00                DCB      0
000517  00                DCB      0
                  |L1.1304|
000518  42415420          DCB      "BAT #1, capacity test stopped",0
00051c  23312c20
000520  63617061
000524  63697479
000528  20746573
00052c  74207374
000530  6f707065
000534  6400    
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  42415420          DCB      "BAT #1,leveling charge is stopped",0
00053c  23312c6c
000540  6576656c
000544  696e6720
000548  63686172
00054c  67652069
000550  73207374
000554  6f707065
000558  6400    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L1.1372|
00055c  42415420          DCB      "BAT #1,leveling charge is blocked",0
000560  23312c6c
000564  6576656c
000568  696e6720
00056c  63686172
000570  67652069
000574  7320626c
000578  6f636b65
00057c  6400    
00057e  00                DCB      0
00057f  00                DCB      0
                  |L1.1408|
000580  42415420          DCB      "BAT #1, capacity test started",0
000584  23312c20
000588  63617061
00058c  63697479
000590  20746573
000594  74207374
000598  61727465
00059c  6400    
00059e  00                DCB      0
00059f  00                DCB      0
                  |L1.1440|
0005a0  42415420          DCB      "BAT #1,leveling charge is started",0
0005a4  23312c6c
0005a8  6576656c
0005ac  696e6720
0005b0  63686172
0005b4  67652069
0005b8  73207374
0005bc  61727465
0005c0  6400    
0005c2  00                DCB      0
0005c3  00                DCB      0
                  |L1.1476|
0005c4  42415420          DCB      "BAT #1,leveling charge is unblocked",0
0005c8  23312c6c
0005cc  6576656c
0005d0  696e6720
0005d4  63686172
0005d8  67652069
0005dc  7320756e
0005e0  626c6f63
0005e4  6b656400
                  |L1.1512|
                          DCD      sp_ch_stat
                  |L1.1516|
0005ec  42415420          DCB      "BAT #1,speed charge is stopped",0
0005f0  23312c73
0005f4  70656564
0005f8  20636861
0005fc  72676520
000600  69732073
000604  746f7070
000608  656400  
00060b  00                DCB      0
                  |L1.1548|
00060c  42415420          DCB      "BAT #1,speed charge is blocked",0
000610  23312c73
000614  70656564
000618  20636861
00061c  72676520
000620  69732062
000624  6c6f636b
000628  656400  
00062b  00                DCB      0
                  |L1.1580|
00062c  42415420          DCB      "BAT #1,speed charge is started",0
000630  23312c73
000634  70656564
000638  20636861
00063c  72676520
000640  69732073
000644  74617274
000648  656400  
00064b  00                DCB      0
                  |L1.1612|
00064c  42415420          DCB      "BAT #1,speed charge is unblocked",0
000650  23312c73
000654  70656564
000658  20636861
00065c  72676520
000660  69732075
000664  6e626c6f
000668  636b6564
00066c  00      
00066d  00                DCB      0
00066e  00                DCB      0
00066f  00                DCB      0
                  |L1.1648|
000670  42415420          DCB      "BAT #1,equalising charge is on",0
000674  23312c65
000678  7175616c
00067c  6973696e
000680  67206368
000684  61726765
000688  20697320
00068c  6f6e00  
00068f  00                DCB      0
                  |L1.1680|
000690  42415420          DCB      "BAT #1,equalising charge is off",0
000694  23312c65
000698  7175616c
00069c  6973696e
0006a0  67206368
0006a4  61726765
0006a8  20697320
0006ac  6f666600
                  |L1.1712|
0006b0  42415420          DCB      "BAT #1,equalising charge is blocked",0
0006b4  23312c65
0006b8  7175616c
0006bc  6973696e
0006c0  67206368
0006c4  61726765
0006c8  20697320
0006cc  626c6f63
0006d0  6b656400
                  |L1.1748|
0006d4  42415420          DCB      "BAT #1,equalising charge is unblocked",0
0006d8  23312c65
0006dc  7175616c
0006e0  6973696e
0006e4  67206368
0006e8  61726765
0006ec  20697320
0006f0  756e626c
0006f4  6f636b65
0006f8  6400    
0006fa  00                DCB      0
0006fb  00                DCB      0
                  |L1.1788|
0006fc  42415420          DCB      "BAT #1,molding charge is on",0
000700  23312c6d
000704  6f6c6469
000708  6e672063
00070c  68617267
000710  65206973
000714  206f6e00
                  |L1.1816|
000718  42415420          DCB      "BAT #1,molding charge is off",0
00071c  23312c6d
000720  6f6c6469
000724  6e672063
000728  68617267
00072c  65206973
000730  206f6666
000734  00      
000735  00                DCB      0
000736  00                DCB      0
000737  00                DCB      0
                  |L1.1848|
000738  42415420          DCB      "BAT #1,molding charge is blocked",0
00073c  23312c6d
000740  6f6c6469
000744  6e672063
000748  68617267
00074c  65206973
000750  20626c6f
000754  636b6564
000758  00      
000759  00                DCB      0
00075a  00                DCB      0
00075b  00                DCB      0
                  |L1.1884|
00075c  8820              LDRH     r0,[r4,#0]            ;540  ; snmp_bat_flag
00075e  f4205080          BIC      r0,r0,#0x1000         ;540
000762  8020              STRH     r0,[r4,#0]            ;540
000764  8828              LDRH     r0,[r5,#0]            ;541  ; snmp_bat_flag_puts
000766  04c0              LSLS     r0,r0,#19             ;541
000768  f57fae44          BPL      |L1.1012|
00076c  2315              MOVS     r3,#0x15              ;543
00076e  2208              MOVS     r2,#8                 ;543
000770  2105              MOVS     r1,#5                 ;543
000772  a0fa              ADR      r0,|L1.2908|
000774  f7fffffe          BL       snmp_trap_send
000778  8828              LDRH     r0,[r5,#0]            ;544  ; snmp_bat_flag_puts
00077a  f4205080          BIC      r0,r0,#0x1000         ;544
00077e  8028              STRH     r0,[r5,#0]            ;544
000780  e459              B        |L1.54|
                  |L1.1922|
000782  f9bb0000          LDRSH    r0,[r11,#0]           ;556  ; USIGN
000786  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;556  ; bat
00078a  eb000080          ADD      r0,r0,r0,LSL #2       ;556
00078e  ebb10f40          CMP      r1,r0,LSL #1          ;556
000792  da12              BGE      |L1.1978|
000794  8860              LDRH     r0,[r4,#2]            ;558  ; snmp_bat_flag
000796  f0400001          ORR      r0,r0,#1              ;558
00079a  8060              STRH     r0,[r4,#2]            ;558
00079c  8868              LDRH     r0,[r5,#2]            ;559  ; snmp_bat_flag_puts
00079e  07c0              LSLS     r0,r0,#31             ;559
0007a0  d11d              BNE      |L1.2014|
0007a2  2316              MOVS     r3,#0x16              ;561
0007a4  2208              MOVS     r2,#8                 ;561
0007a6  2105              MOVS     r1,#5                 ;561
0007a8  f2af3098          ADR      r0,|L1.1044|
0007ac  f7fffffe          BL       snmp_trap_send
0007b0  8868              LDRH     r0,[r5,#2]            ;562  ; snmp_bat_flag_puts
0007b2  f0400001          ORR      r0,r0,#1              ;562
0007b6  8068              STRH     r0,[r5,#2]            ;562
0007b8  e011              B        |L1.2014|
                  |L1.1978|
0007ba  8860              LDRH     r0,[r4,#2]            ;567  ; snmp_bat_flag
0007bc  f0200001          BIC      r0,r0,#1              ;567
0007c0  8060              STRH     r0,[r4,#2]            ;567
0007c2  8868              LDRH     r0,[r5,#2]            ;568  ; snmp_bat_flag_puts
0007c4  07c0              LSLS     r0,r0,#31             ;568
0007c6  d00a              BEQ      |L1.2014|
0007c8  2317              MOVS     r3,#0x17              ;570
0007ca  2208              MOVS     r2,#8                 ;570
0007cc  2105              MOVS     r1,#5                 ;570
0007ce  f2af309c          ADR      r0,|L1.1076|
0007d2  f7fffffe          BL       snmp_trap_send
0007d6  8868              LDRH     r0,[r5,#2]            ;571  ; snmp_bat_flag_puts
0007d8  f0200001          BIC      r0,r0,#1              ;571
0007dc  8068              STRH     r0,[r5,#2]            ;571
                  |L1.2014|
0007de  f898008b          LDRB     r0,[r8,#0x8b]         ;575  ; bat
0007e2  07c0              LSLS     r0,r0,#31             ;575
0007e4  d012              BEQ      |L1.2060|
0007e6  8860              LDRH     r0,[r4,#2]            ;577  ; snmp_bat_flag
0007e8  f0400002          ORR      r0,r0,#2              ;577
0007ec  8060              STRH     r0,[r4,#2]            ;577
0007ee  8828              LDRH     r0,[r5,#0]            ;578  ; snmp_bat_flag_puts
0007f0  0780              LSLS     r0,r0,#30             ;578
0007f2  d41d              BMI      |L1.2096|
0007f4  2318              MOVS     r3,#0x18              ;580
0007f6  2208              MOVS     r2,#8                 ;580
0007f8  2105              MOVS     r1,#5                 ;580
0007fa  f2af30a0          ADR      r0,|L1.1116|
0007fe  f7fffffe          BL       snmp_trap_send
000802  8868              LDRH     r0,[r5,#2]            ;581  ; snmp_bat_flag_puts
000804  f0400002          ORR      r0,r0,#2              ;581
000808  8068              STRH     r0,[r5,#2]            ;581
00080a  e011              B        |L1.2096|
                  |L1.2060|
00080c  8860              LDRH     r0,[r4,#2]            ;586  ; snmp_bat_flag
00080e  f0200002          BIC      r0,r0,#2              ;586
000812  8060              STRH     r0,[r4,#2]            ;586
000814  8868              LDRH     r0,[r5,#2]            ;587  ; snmp_bat_flag_puts
000816  0780              LSLS     r0,r0,#30             ;587
000818  d50a              BPL      |L1.2096|
00081a  2319              MOVS     r3,#0x19              ;589
00081c  2208              MOVS     r2,#8                 ;589
00081e  2105              MOVS     r1,#5                 ;589
000820  f2af309c          ADR      r0,|L1.1160|
000824  f7fffffe          BL       snmp_trap_send
000828  8868              LDRH     r0,[r5,#2]            ;590  ; snmp_bat_flag_puts
00082a  f0200002          BIC      r0,r0,#2              ;590
00082e  8068              STRH     r0,[r5,#2]            ;590
                  |L1.2096|
000830  f898008b          LDRB     r0,[r8,#0x8b]         ;594  ; bat
000834  0780              LSLS     r0,r0,#30             ;594
000836  d512              BPL      |L1.2142|
000838  8860              LDRH     r0,[r4,#2]            ;596  ; snmp_bat_flag
00083a  f0400004          ORR      r0,r0,#4              ;596
00083e  8060              STRH     r0,[r4,#2]            ;596
000840  8868              LDRH     r0,[r5,#2]            ;597  ; snmp_bat_flag_puts
000842  0740              LSLS     r0,r0,#29             ;597
000844  d41d              BMI      |L1.2178|
000846  231a              MOVS     r3,#0x1a              ;599
000848  2208              MOVS     r2,#8                 ;599
00084a  2105              MOVS     r1,#5                 ;599
00084c  f2af3094          ADR      r0,|L1.1212|
000850  f7fffffe          BL       snmp_trap_send
000854  8868              LDRH     r0,[r5,#2]            ;600  ; snmp_bat_flag_puts
000856  f0400004          ORR      r0,r0,#4              ;600
00085a  8068              STRH     r0,[r5,#2]            ;600
00085c  e011              B        |L1.2178|
                  |L1.2142|
00085e  8860              LDRH     r0,[r4,#2]            ;605  ; snmp_bat_flag
000860  f0200004          BIC      r0,r0,#4              ;605
000864  8060              STRH     r0,[r4,#2]            ;605
000866  8868              LDRH     r0,[r5,#2]            ;606  ; snmp_bat_flag_puts
000868  0740              LSLS     r0,r0,#29             ;606
00086a  d50a              BPL      |L1.2178|
00086c  231b              MOVS     r3,#0x1b              ;608
00086e  2208              MOVS     r2,#8                 ;608
000870  2105              MOVS     r1,#5                 ;608
000872  f2af3090          ADR      r0,|L1.1252|
000876  f7fffffe          BL       snmp_trap_send
00087a  8868              LDRH     r0,[r5,#2]            ;609  ; snmp_bat_flag_puts
00087c  f0200004          BIC      r0,r0,#4              ;609
000880  8068              STRH     r0,[r5,#2]            ;609
                  |L1.2178|
000882  f9b91000          LDRSH    r1,[r9,#0]            ;613  ; IKB
000886  f9b80054          LDRSH    r0,[r8,#0x54]         ;613  ; bat
00088a  424a              RSBS     r2,r1,#0              ;613
00088c  4290              CMP      r0,r2                 ;613
00088e  da04              BGE      |L1.2202|
000890  8860              LDRH     r0,[r4,#2]            ;613  ; snmp_bat_flag
000892  f0400008          ORR      r0,r0,#8              ;613
000896  8060              STRH     r0,[r4,#2]            ;613
000898  e005              B        |L1.2214|
                  |L1.2202|
00089a  4288              CMP      r0,r1                 ;614
00089c  dd03              BLE      |L1.2214|
00089e  8860              LDRH     r0,[r4,#2]            ;614  ; snmp_bat_flag
0008a0  f0200008          BIC      r0,r0,#8              ;614
0008a4  8060              STRH     r0,[r4,#2]            ;614
                  |L1.2214|
0008a6  f8960022          LDRB     r0,[r6,#0x22]         ;616  ; spc_stat
0008aa  2801              CMP      r0,#1                 ;616
0008ac  d102              BNE      |L1.2228|
0008ae  f8960023          LDRB     r0,[r6,#0x23]         ;616  ; spc_bat
0008b2  b3e0              CBZ      r0,|L1.2350|
                  |L1.2228|
0008b4  8860              LDRH     r0,[r4,#2]            ;627  ; snmp_bat_flag
0008b6  f0200010          BIC      r0,r0,#0x10           ;627
0008ba  8060              STRH     r0,[r4,#2]            ;627
0008bc  8868              LDRH     r0,[r5,#2]            ;628  ; snmp_bat_flag_puts
0008be  06c0              LSLS     r0,r0,#27             ;628
0008c0  d50a              BPL      |L1.2264|
0008c2  231d              MOVS     r3,#0x1d              ;630
0008c4  2208              MOVS     r2,#8                 ;630
0008c6  2105              MOVS     r1,#5                 ;630
0008c8  f2af30b4          ADR      r0,|L1.1304|
0008cc  f7fffffe          BL       snmp_trap_send
0008d0  8868              LDRH     r0,[r5,#2]            ;631  ; snmp_bat_flag_puts
0008d2  f0200010          BIC      r0,r0,#0x10           ;631
0008d6  8068              STRH     r0,[r5,#2]            ;631
                  |L1.2264|
0008d8  f8960022          LDRB     r0,[r6,#0x22]         ;635  ; spc_stat
0008dc  2802              CMP      r0,#2                 ;635
0008de  d03a              BEQ      |L1.2390|
0008e0  8860              LDRH     r0,[r4,#2]            ;646  ; snmp_bat_flag
0008e2  f0200020          BIC      r0,r0,#0x20           ;646
0008e6  8060              STRH     r0,[r4,#2]            ;646
0008e8  8868              LDRH     r0,[r5,#2]            ;647  ; snmp_bat_flag_puts
0008ea  0680              LSLS     r0,r0,#26             ;647
0008ec  d50a              BPL      |L1.2308|
0008ee  231f              MOVS     r3,#0x1f              ;649
0008f0  2208              MOVS     r2,#8                 ;649
0008f2  2105              MOVS     r1,#5                 ;649
0008f4  f2af30c0          ADR      r0,|L1.1336|
0008f8  f7fffffe          BL       snmp_trap_send
0008fc  8868              LDRH     r0,[r5,#2]            ;650  ; snmp_bat_flag_puts
0008fe  f0200020          BIC      r0,r0,#0x20           ;650
000902  8068              STRH     r0,[r5,#2]            ;650
                  |L1.2308|
000904  7870              LDRB     r0,[r6,#1]            ;654  ; vz_error
000906  b3c8              CBZ      r0,|L1.2428|
000908  8860              LDRH     r0,[r4,#2]            ;656  ; snmp_bat_flag
00090a  f0400040          ORR      r0,r0,#0x40           ;656
00090e  8060              STRH     r0,[r4,#2]            ;656
000910  8868              LDRH     r0,[r5,#2]            ;657  ; snmp_bat_flag_puts
000912  0640              LSLS     r0,r0,#25             ;657
000914  d445              BMI      |L1.2466|
000916  2320              MOVS     r3,#0x20              ;659
000918  2208              MOVS     r2,#8                 ;659
00091a  2105              MOVS     r1,#5                 ;659
00091c  f2af30c4          ADR      r0,|L1.1372|
000920  f7fffffe          BL       snmp_trap_send
000924  8868              LDRH     r0,[r5,#2]            ;660  ; snmp_bat_flag_puts
000926  f0400040          ORR      r0,r0,#0x40           ;660
00092a  8068              STRH     r0,[r5,#2]            ;660
00092c  e039              B        |L1.2466|
                  |L1.2350|
00092e  e7ff              B        |L1.2352|
                  |L1.2352|
000930  8860              LDRH     r0,[r4,#2]            ;618  ; snmp_bat_flag
000932  f0400010          ORR      r0,r0,#0x10           ;618
000936  8060              STRH     r0,[r4,#2]            ;618
000938  8868              LDRH     r0,[r5,#2]            ;619  ; snmp_bat_flag_puts
00093a  06c0              LSLS     r0,r0,#27             ;619
00093c  d4cc              BMI      |L1.2264|
00093e  231c              MOVS     r3,#0x1c              ;621
000940  2208              MOVS     r2,#8                 ;621
000942  2105              MOVS     r1,#5                 ;621
000944  f2af30c8          ADR      r0,|L1.1408|
000948  f7fffffe          BL       snmp_trap_send
00094c  8868              LDRH     r0,[r5,#2]            ;622  ; snmp_bat_flag_puts
00094e  f0400010          ORR      r0,r0,#0x10           ;622
000952  8068              STRH     r0,[r5,#2]            ;622
000954  e7c0              B        |L1.2264|
                  |L1.2390|
000956  8860              LDRH     r0,[r4,#2]            ;637  ; snmp_bat_flag
000958  f0400020          ORR      r0,r0,#0x20           ;637
00095c  8060              STRH     r0,[r4,#2]            ;637
00095e  8868              LDRH     r0,[r5,#2]            ;638  ; snmp_bat_flag_puts
000960  0680              LSLS     r0,r0,#26             ;638
000962  d4cf              BMI      |L1.2308|
000964  231e              MOVS     r3,#0x1e              ;640
000966  2208              MOVS     r2,#8                 ;640
000968  2105              MOVS     r1,#5                 ;640
00096a  f2af30cc          ADR      r0,|L1.1440|
00096e  f7fffffe          BL       snmp_trap_send
000972  8868              LDRH     r0,[r5,#2]            ;641  ; snmp_bat_flag_puts
000974  f0400020          ORR      r0,r0,#0x20           ;641
000978  8068              STRH     r0,[r5,#2]            ;641
00097a  e7c3              B        |L1.2308|
                  |L1.2428|
00097c  e7ff              B        |L1.2430|
                  |L1.2430|
00097e  8860              LDRH     r0,[r4,#2]            ;665  ; snmp_bat_flag
000980  f0200040          BIC      r0,r0,#0x40           ;665
000984  8060              STRH     r0,[r4,#2]            ;665
000986  8868              LDRH     r0,[r5,#2]            ;666  ; snmp_bat_flag_puts
000988  0640              LSLS     r0,r0,#25             ;666
00098a  d50a              BPL      |L1.2466|
00098c  2321              MOVS     r3,#0x21              ;668
00098e  2208              MOVS     r2,#8                 ;668
000990  2105              MOVS     r1,#5                 ;668
000992  f2af30d0          ADR      r0,|L1.1476|
000996  f7fffffe          BL       snmp_trap_send
00099a  8868              LDRH     r0,[r5,#2]            ;669  ; snmp_bat_flag_puts
00099c  f0200040          BIC      r0,r0,#0x40           ;669
0009a0  8068              STRH     r0,[r5,#2]            ;669
                  |L1.2466|
0009a2  4877              LDR      r0,|L1.2944|
0009a4  7800              LDRB     r0,[r0,#0]            ;673  ; sp_ch_stat
0009a6  2802              CMP      r0,#2                 ;673
0009a8  d026              BEQ      |L1.2552|
0009aa  8860              LDRH     r0,[r4,#2]            ;684  ; snmp_bat_flag
0009ac  f0200080          BIC      r0,r0,#0x80           ;684
0009b0  8060              STRH     r0,[r4,#2]            ;684
0009b2  8868              LDRH     r0,[r5,#2]            ;685  ; snmp_bat_flag_puts
0009b4  0600              LSLS     r0,r0,#24             ;685
0009b6  d50a              BPL      |L1.2510|
0009b8  2323              MOVS     r3,#0x23              ;687
0009ba  2208              MOVS     r2,#8                 ;687
0009bc  2105              MOVS     r1,#5                 ;687
0009be  f2af30d4          ADR      r0,|L1.1516|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;688  ; snmp_bat_flag_puts
0009c8  f0200080          BIC      r0,r0,#0x80           ;688
0009cc  8068              STRH     r0,[r5,#2]            ;688
                  |L1.2510|
0009ce  78b0              LDRB     r0,[r6,#2]            ;692  ; sp_ch_error
0009d0  b328              CBZ      r0,|L1.2590|
0009d2  8860              LDRH     r0,[r4,#2]            ;694  ; snmp_bat_flag
0009d4  f4407080          ORR      r0,r0,#0x100          ;694
0009d8  8060              STRH     r0,[r4,#2]            ;694
0009da  8868              LDRH     r0,[r5,#2]            ;695  ; snmp_bat_flag_puts
0009dc  05c0              LSLS     r0,r0,#23             ;695
0009de  d430              BMI      |L1.2626|
0009e0  2324              MOVS     r3,#0x24              ;697
0009e2  2208              MOVS     r2,#8                 ;697
0009e4  2105              MOVS     r1,#5                 ;697
0009e6  f2af30dc          ADR      r0,|L1.1548|
0009ea  f7fffffe          BL       snmp_trap_send
0009ee  8868              LDRH     r0,[r5,#2]            ;698  ; snmp_bat_flag_puts
0009f0  f4407080          ORR      r0,r0,#0x100          ;698
0009f4  8068              STRH     r0,[r5,#2]            ;698
0009f6  e024              B        |L1.2626|
                  |L1.2552|
0009f8  8860              LDRH     r0,[r4,#2]            ;675  ; snmp_bat_flag
0009fa  f0400080          ORR      r0,r0,#0x80           ;675
0009fe  8060              STRH     r0,[r4,#2]            ;675
000a00  8868              LDRH     r0,[r5,#2]            ;676  ; snmp_bat_flag_puts
000a02  0600              LSLS     r0,r0,#24             ;676
000a04  d4e3              BMI      |L1.2510|
000a06  2322              MOVS     r3,#0x22              ;678
000a08  2208              MOVS     r2,#8                 ;678
000a0a  2105              MOVS     r1,#5                 ;678
000a0c  f2af30e4          ADR      r0,|L1.1580|
000a10  f7fffffe          BL       snmp_trap_send
000a14  8868              LDRH     r0,[r5,#2]            ;679  ; snmp_bat_flag_puts
000a16  f0400080          ORR      r0,r0,#0x80           ;679
000a1a  8068              STRH     r0,[r5,#2]            ;679
000a1c  e7d7              B        |L1.2510|
                  |L1.2590|
000a1e  8860              LDRH     r0,[r4,#2]            ;703  ; snmp_bat_flag
000a20  f4207080          BIC      r0,r0,#0x100          ;703
000a24  8060              STRH     r0,[r4,#2]            ;703
000a26  8868              LDRH     r0,[r5,#2]            ;704  ; snmp_bat_flag_puts
000a28  05c0              LSLS     r0,r0,#23             ;704
000a2a  d50a              BPL      |L1.2626|
000a2c  2325              MOVS     r3,#0x25              ;706
000a2e  2208              MOVS     r2,#8                 ;706
000a30  2105              MOVS     r1,#5                 ;706
000a32  f2af30e8          ADR      r0,|L1.1612|
000a36  f7fffffe          BL       snmp_trap_send
000a3a  8868              LDRH     r0,[r5,#2]            ;707  ; snmp_bat_flag_puts
000a3c  f4207080          BIC      r0,r0,#0x100          ;707
000a40  8068              STRH     r0,[r5,#2]            ;707
                  |L1.2626|
000a42  7970              LDRB     r0,[r6,#5]            ;711  ; vz1_stat
000a44  b190              CBZ      r0,|L1.2668|
000a46  8860              LDRH     r0,[r4,#2]            ;713  ; snmp_bat_flag
000a48  f4407000          ORR      r0,r0,#0x200          ;713
000a4c  8060              STRH     r0,[r4,#2]            ;713
000a4e  8868              LDRH     r0,[r5,#2]            ;714  ; snmp_bat_flag_puts
000a50  0580              LSLS     r0,r0,#22             ;714
000a52  d41d              BMI      |L1.2704|
000a54  2326              MOVS     r3,#0x26              ;716
000a56  2208              MOVS     r2,#8                 ;716
000a58  2105              MOVS     r1,#5                 ;716
000a5a  f2af30ec          ADR      r0,|L1.1648|
000a5e  f7fffffe          BL       snmp_trap_send
000a62  8868              LDRH     r0,[r5,#2]            ;717  ; snmp_bat_flag_puts
000a64  f4407000          ORR      r0,r0,#0x200          ;717
000a68  8068              STRH     r0,[r5,#2]            ;717
000a6a  e011              B        |L1.2704|
                  |L1.2668|
000a6c  8860              LDRH     r0,[r4,#2]            ;722  ; snmp_bat_flag
000a6e  f4207000          BIC      r0,r0,#0x200          ;722
000a72  8060              STRH     r0,[r4,#2]            ;722
000a74  8868              LDRH     r0,[r5,#2]            ;723  ; snmp_bat_flag_puts
000a76  0580              LSLS     r0,r0,#22             ;723
000a78  d50a              BPL      |L1.2704|
000a7a  2327              MOVS     r3,#0x27              ;725
000a7c  2208              MOVS     r2,#8                 ;725
000a7e  2105              MOVS     r1,#5                 ;725
000a80  f2af30f4          ADR      r0,|L1.1680|
000a84  f7fffffe          BL       snmp_trap_send
000a88  8868              LDRH     r0,[r5,#2]            ;726  ; snmp_bat_flag_puts
000a8a  f4207000          BIC      r0,r0,#0x200          ;726
000a8e  8068              STRH     r0,[r5,#2]            ;726
                  |L1.2704|
000a90  78f0              LDRB     r0,[r6,#3]            ;730  ; vz1_error
000a92  b190              CBZ      r0,|L1.2746|
000a94  8860              LDRH     r0,[r4,#2]            ;732  ; snmp_bat_flag
000a96  f4406080          ORR      r0,r0,#0x400          ;732
000a9a  8060              STRH     r0,[r4,#2]            ;732
000a9c  8868              LDRH     r0,[r5,#2]            ;733  ; snmp_bat_flag_puts
000a9e  0540              LSLS     r0,r0,#21             ;733
000aa0  d41d              BMI      |L1.2782|
000aa2  2328              MOVS     r3,#0x28              ;735
000aa4  2208              MOVS     r2,#8                 ;735
000aa6  2105              MOVS     r1,#5                 ;735
000aa8  f2af30fc          ADR      r0,|L1.1712|
000aac  f7fffffe          BL       snmp_trap_send
000ab0  8868              LDRH     r0,[r5,#2]            ;736  ; snmp_bat_flag_puts
000ab2  f4406080          ORR      r0,r0,#0x400          ;736
000ab6  8068              STRH     r0,[r5,#2]            ;736
000ab8  e011              B        |L1.2782|
                  |L1.2746|
000aba  8860              LDRH     r0,[r4,#2]            ;741  ; snmp_bat_flag
000abc  f4206080          BIC      r0,r0,#0x400          ;741
000ac0  8060              STRH     r0,[r4,#2]            ;741
000ac2  8868              LDRH     r0,[r5,#2]            ;742  ; snmp_bat_flag_puts
000ac4  0540              LSLS     r0,r0,#21             ;742
000ac6  d50a              BPL      |L1.2782|
000ac8  2329              MOVS     r3,#0x29              ;744
000aca  2208              MOVS     r2,#8                 ;744
000acc  2105              MOVS     r1,#5                 ;744
000ace  f2af30fc          ADR      r0,|L1.1748|
000ad2  f7fffffe          BL       snmp_trap_send
000ad6  8868              LDRH     r0,[r5,#2]            ;745  ; snmp_bat_flag_puts
000ad8  f4206080          BIC      r0,r0,#0x400          ;745
000adc  8068              STRH     r0,[r5,#2]            ;745
                  |L1.2782|
000ade  79f0              LDRB     r0,[r6,#7]            ;749  ; vz2_stat
000ae0  b190              CBZ      r0,|L1.2824|
000ae2  8860              LDRH     r0,[r4,#2]            ;751  ; snmp_bat_flag
000ae4  f4406000          ORR      r0,r0,#0x800          ;751
000ae8  8060              STRH     r0,[r4,#2]            ;751
000aea  8868              LDRH     r0,[r5,#2]            ;752  ; snmp_bat_flag_puts
000aec  0500              LSLS     r0,r0,#20             ;752
000aee  d41d              BMI      |L1.2860|
000af0  232a              MOVS     r3,#0x2a              ;754
000af2  2208              MOVS     r2,#8                 ;754
000af4  2105              MOVS     r1,#5                 ;754
000af6  f2af30fc          ADR      r0,|L1.1788|
000afa  f7fffffe          BL       snmp_trap_send
000afe  8868              LDRH     r0,[r5,#2]            ;755  ; snmp_bat_flag_puts
000b00  f4406000          ORR      r0,r0,#0x800          ;755
000b04  8068              STRH     r0,[r5,#2]            ;755
000b06  e011              B        |L1.2860|
                  |L1.2824|
000b08  8860              LDRH     r0,[r4,#2]            ;760  ; snmp_bat_flag
000b0a  f4206000          BIC      r0,r0,#0x800          ;760
000b0e  8060              STRH     r0,[r4,#2]            ;760
000b10  8868              LDRH     r0,[r5,#2]            ;761  ; snmp_bat_flag_puts
000b12  0500              LSLS     r0,r0,#20             ;761
000b14  d50a              BPL      |L1.2860|
000b16  232b              MOVS     r3,#0x2b              ;763
000b18  2208              MOVS     r2,#8                 ;763
000b1a  2105              MOVS     r1,#5                 ;763
000b1c  f2af4008          ADR      r0,|L1.1816|
000b20  f7fffffe          BL       snmp_trap_send
000b24  8868              LDRH     r0,[r5,#2]            ;764  ; snmp_bat_flag_puts
000b26  f4206000          BIC      r0,r0,#0x800          ;764
000b2a  8068              STRH     r0,[r5,#2]            ;764
                  |L1.2860|
000b2c  7930              LDRB     r0,[r6,#4]            ;768  ; vz2_error
000b2e  b1a0              CBZ      r0,|L1.2906|
000b30  8860              LDRH     r0,[r4,#2]            ;770  ; snmp_bat_flag
000b32  f4405080          ORR      r0,r0,#0x1000         ;770
000b36  8060              STRH     r0,[r4,#2]            ;770
000b38  8868              LDRH     r0,[r5,#2]            ;771  ; snmp_bat_flag_puts
000b3a  04c0              LSLS     r0,r0,#19             ;771
000b3c  f53faa81          BMI      |L1.66|
000b40  232c              MOVS     r3,#0x2c              ;773
000b42  2208              MOVS     r2,#8                 ;773
000b44  2105              MOVS     r1,#5                 ;773
000b46  f2af4010          ADR      r0,|L1.1848|
000b4a  f7fffffe          BL       snmp_trap_send
000b4e  8868              LDRH     r0,[r5,#2]            ;774  ; snmp_bat_flag_puts
000b50  f4405080          ORR      r0,r0,#0x1000         ;774
000b54  8068              STRH     r0,[r5,#2]            ;774
                  |L1.2902|
000b56  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2906|
000b5a  e013              B        |L1.2948|
                  |L1.2908|
000b5c  42415420          DCB      "BAT #1,molding charge is unblocked",0
000b60  23312c6d
000b64  6f6c6469
000b68  6e672063
000b6c  68617267
000b70  65206973
000b74  20756e62
000b78  6c6f636b
000b7c  656400  
000b7f  00                DCB      0
                  |L1.2944|
                          DCD      sp_ch_stat
                  |L1.2948|
000b84  8860              LDRH     r0,[r4,#2]            ;779  ; snmp_bat_flag
000b86  f4205080          BIC      r0,r0,#0x1000         ;779
000b8a  8060              STRH     r0,[r4,#2]            ;779
000b8c  8868              LDRH     r0,[r5,#2]            ;780  ; snmp_bat_flag_puts
000b8e  04c0              LSLS     r0,r0,#19             ;780
000b90  d5e1              BPL      |L1.2902|
000b92  232d              MOVS     r3,#0x2d              ;782
000b94  2208              MOVS     r2,#8                 ;782
000b96  2105              MOVS     r1,#5                 ;782
000b98  f2af0040          ADR      r0,|L1.2908|
000b9c  f7fffffe          BL       snmp_trap_send
000ba0  8868              LDRH     r0,[r5,#2]            ;783  ; snmp_bat_flag_puts
000ba2  f4205080          BIC      r0,r0,#0x1000         ;783
000ba6  8068              STRH     r0,[r5,#2]            ;783
000ba8  e7d5              B        |L1.2902|
;;;916    
                          ENDP

                  ke_start PROC
;;;919    //-----------------------------------------------
;;;920    void ke_start(char in)
000baa  e92d41fc          PUSH     {r2-r8,lr}
;;;921    {          
000bae  4606              MOV      r6,r0
;;;922    ke_start_stat=(enum_ke_start_stat)0;		 
000bb0  f04f0400          MOV      r4,#0
000bb4  4dff              LDR      r5,|L1.4020|
;;;923    /*
;;;924    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;925    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;926    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;927    #endif
;;;928    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;929    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;930    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;931    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;932    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;933    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;934    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;935    else */
;;;936    	{
;;;937    
;;;938    	ke_start_stat=kssYES;
000bb6  f04f0064          MOV      r0,#0x64
000bba  f105050a          ADD      r5,r5,#0xa
000bbe  7728              STRB     r0,[r5,#0x1c]
;;;939    
;;;940    	spc_stat=spcKE;
000bc0  f04f0701          MOV      r7,#1
000bc4  762f              STRB     r7,[r5,#0x18]
;;;941    	__ee_spc_stat=spcKE;
000bc6  f8a57062          STRH     r7,[r5,#0x62]
;;;942    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000bca  4639              MOV      r1,r7
000bcc  f240209a          MOV      r0,#0x29a
000bd0  f7fffffe          BL       lc640_write_int
;;;943    	
;;;944    	spc_bat=0;
000bd4  766c              STRB     r4,[r5,#0x19]
;;;945    	__ee_spc_bat=0;
000bd6  f8a54064          STRH     r4,[r5,#0x64]
;;;946    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000bda  4621              MOV      r1,r4
000bdc  f240209e          MOV      r0,#0x29e
000be0  f7fffffe          BL       lc640_write_int
;;;947    
;;;948    	bat[0]._zar_cnt_ke=0;
000be4  f8df83d0          LDR      r8,|L1.4024|
000be8  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;949    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000bec  48f3              LDR      r0,|L1.4028|
000bee  2100              MOVS     r1,#0
000bf0  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000bf4  f7fffffe          BL       lc640_write_int
;;;950    
;;;951    	bat[0]._time_min_cnt_ke=0;
000bf8  f8a8404a          STRH     r4,[r8,#0x4a]
;;;952    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000bfc  2100              MOVS     r1,#0
000bfe  f44f70e3          MOV      r0,#0x1c6
000c02  f7fffffe          BL       lc640_write_int
;;;953    
;;;954    	
;;;955    	spc_phase=0;
000c06  76ac              STRB     r4,[r5,#0x1a]
;;;956    	__ee_spc_phase=0;
000c08  f8a54066          STRH     r4,[r5,#0x66]
;;;957    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000c0c  4621              MOV      r1,r4
000c0e  f44f7028          MOV      r0,#0x2a0
000c12  f7fffffe          BL       lc640_write_int
;;;958    
;;;959    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;960    
;;;961    		{					
;;;962    		signed short temp_temp;
;;;963    		signed char temp;
;;;964    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000c16  eb060046          ADD      r0,r6,r6,LSL #1
000c1a  eb001006          ADD      r0,r0,r6,LSL #4
000c1e  eb080180          ADD      r1,r8,r0,LSL #2
000c22  48e7              LDR      r0,|L1.4032|
000c24  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000c26  f1000001          ADD      r0,r0,#1
000c2a  f0000007          AND      r0,r0,#7
000c2e  eb010040          ADD      r0,r1,r0,LSL #1
000c32  8c00              LDRH     r0,[r0,#0x20]
000c34  9001              STR      r0,[sp,#4]
;;;965    		    
;;;966    		temp=LPC_RTC->YEAR;
000c36  4ee3              LDR      r6,|L1.4036|
000c38  8bb0              LDRH     r0,[r6,#0x1c]
000c3a  9000              STR      r0,[sp,#0]
;;;967    		gran_char(&temp,1,99);
000c3c  f04f0263          MOV      r2,#0x63
000c40  f04f0101          MOV      r1,#1
000c44  4668              MOV      r0,sp
000c46  f7fffffe          BL       gran_char
;;;968    		*((char*)(&(ke_date[0])))=temp;
000c4a  4cda              LDR      r4,|L1.4020|
000c4c  f89d0000          LDRB     r0,[sp,#0]
000c50  34fc              ADDS     r4,r4,#0xfc
000c52  7020              STRB     r0,[r4,#0]
;;;969    			
;;;970    		temp=LPC_RTC->MONTH;
000c54  7e30              LDRB     r0,[r6,#0x18]
000c56  9000              STR      r0,[sp,#0]
;;;971    		gran_char(&temp,1,12);
000c58  220c              MOVS     r2,#0xc
000c5a  2101              MOVS     r1,#1
000c5c  4668              MOV      r0,sp
000c5e  f7fffffe          BL       gran_char
;;;972    		*(((char*)(&(ke_date[0])))+1)=temp;
000c62  f89d0000          LDRB     r0,[sp,#0]
000c66  7060              STRB     r0,[r4,#1]
;;;973    		
;;;974    		temp=LPC_RTC->DOM;
000c68  7b30              LDRB     r0,[r6,#0xc]
000c6a  9000              STR      r0,[sp,#0]
;;;975    		gran_char(&temp,1,31);
000c6c  221f              MOVS     r2,#0x1f
000c6e  2101              MOVS     r1,#1
000c70  4668              MOV      r0,sp
000c72  f7fffffe          BL       gran_char
;;;976    		*(((char*)(&(ke_date[0])))+2)=temp;			
000c76  f89d0000          LDRB     r0,[sp,#0]
000c7a  70a0              STRB     r0,[r4,#2]
;;;977    				
;;;978    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000c7c  f89d0004          LDRB     r0,[sp,#4]
000c80  70e0              STRB     r0,[r4,#3]
;;;979    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000c82  f24020a2          MOV      r0,#0x2a2
000c86  6821              LDR      r1,[r4,#0]  ; ke_date
000c88  f7fffffe          BL       lc640_write_long
;;;980    
;;;981    		temp=LPC_RTC->HOUR;
000c8c  7a30              LDRB     r0,[r6,#8]
000c8e  9000              STR      r0,[sp,#0]
;;;982    		gran_char(&temp,0,23);
000c90  2217              MOVS     r2,#0x17
000c92  2100              MOVS     r1,#0
000c94  4668              MOV      r0,sp
000c96  f7fffffe          BL       gran_char
;;;983    		*((char*)(&(ke_date[1])))=temp;
000c9a  f89d0000          LDRB     r0,[sp,#0]
000c9e  7120              STRB     r0,[r4,#4]
;;;984                   
;;;985    		temp=LPC_RTC->MIN;
000ca0  7930              LDRB     r0,[r6,#4]
000ca2  9000              STR      r0,[sp,#0]
;;;986    		gran_char(&temp,0,59);
000ca4  223b              MOVS     r2,#0x3b
000ca6  2100              MOVS     r1,#0
000ca8  4668              MOV      r0,sp
000caa  f7fffffe          BL       gran_char
;;;987    		*(((char*)(&(ke_date[1])))+1)=temp;
000cae  f89d0000          LDRB     r0,[sp,#0]
000cb2  7160              STRB     r0,[r4,#5]
;;;988    	          
;;;989    		temp=LPC_RTC->SEC;
000cb4  7830              LDRB     r0,[r6,#0]
000cb6  9000              STR      r0,[sp,#0]
;;;990    		gran_char(&temp,0,59);
000cb8  223b              MOVS     r2,#0x3b
000cba  2100              MOVS     r1,#0
000cbc  4668              MOV      r0,sp
000cbe  f7fffffe          BL       gran_char
;;;991    		*(((char*)(&(ke_date[1])))+2)=temp;
000cc2  f89d0000          LDRB     r0,[sp,#0]
000cc6  71a0              STRB     r0,[r4,#6]
;;;992    			
;;;993    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000cc8  f89d0005          LDRB     r0,[sp,#5]
000ccc  71e0              STRB     r0,[r4,#7]
;;;994    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000cce  f24020a6          MOV      r0,#0x2a6
000cd2  6861              LDR      r1,[r4,#4]  ; ke_date
000cd4  f7fffffe          BL       lc640_write_long
;;;995    		}
;;;996    	bat_hndl_zvu_ke_init=1;
000cd8  702f              STRB     r7,[r5,#0]
;;;997    	}
;;;998    }
000cda  e8bd81fc          POP      {r2-r8,pc}
;;;999    #endif
                          ENDP

                  ke_drv PROC
;;;1081   //-----------------------------------------------
;;;1082   void ke_drv(void)
000cde  e92d47f0          PUSH     {r4-r10,lr}
;;;1083   {
000ce2  b088              SUB      sp,sp,#0x20
;;;1084   static char ke_drv_cnt_10s;
;;;1085   static short i_bat_buff[6];
;;;1086   static char i_bat_buff_cnt;
;;;1087   short ke_drv_i_temp;
;;;1088   short ke_drv_i_avg;
;;;1089   char i;
;;;1090   short ke_drv_i_temp_temp;
;;;1091   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000ce4  f04f021c          MOV      r2,#0x1c
000ce8  49b7              LDR      r1,|L1.4040|
000cea  a801              ADD      r0,sp,#4
000cec  f7fffffe          BL       __aeabi_memcpy4
;;;1092   
;;;1093   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000cf0  4eb0              LDR      r6,|L1.4020|
;;;1094   	{
;;;1095   	
;;;1096   	i_bat_buff[0]=0;
000cf2  4bb6              LDR      r3,|L1.4044|
000cf4  2500              MOVS     r5,#0
000cf6  7ab0              LDRB     r0,[r6,#0xa]          ;1093  ; bat_hndl_zvu_ke_init
000cf8  2801              CMP      r0,#1                 ;1093
000cfa  d102              BNE      |L1.3330|
000cfc  801d              STRH     r5,[r3,#0]
;;;1097   	i_bat_buff[0]=0;
;;;1098   	i_bat_buff[0]=0;
;;;1099   	i_bat_buff[0]=0;
;;;1100   	i_bat_buff[0]=0;
;;;1101   	i_bat_buff[0]=0;
;;;1102   	i_bat_buff_cnt=0;
000cfe  73b5              STRB     r5,[r6,#0xe]
;;;1103   
;;;1104   	bat_hndl_zvu_ke_init=0;
000d00  72b5              STRB     r5,[r6,#0xa]
                  |L1.3330|
;;;1105   	}
;;;1106   
;;;1107   
;;;1108   
;;;1109   
;;;1110   if(spc_stat==spcKE)
000d02  f8960022          LDRB     r0,[r6,#0x22]  ; spc_stat
000d06  2801              CMP      r0,#1
000d08  d17e              BNE      |L1.3592|
;;;1111   	{
;;;1112   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000d0a  48b1              LDR      r0,|L1.4048|
000d0c  f04f070a          MOV      r7,#0xa
000d10  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000d14  f1c00000          RSB      r0,r0,#0
000d18  fb90f0f7          SDIV     r0,r0,r7
000d1c  b200              SXTH     r0,r0
;;;1113   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000d1e  2800              CMP      r0,#0
000d20  da01              BGE      |L1.3366|
000d22  f04f0000          MOV      r0,#0
                  |L1.3366|
;;;1114   
;;;1115   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000d26  4aab              LDR      r2,|L1.4052|
000d28  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000d2a  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1116   	if(++ke_drv_cnt_10s>10)
000d2c  1c49              ADDS     r1,r1,#1
;;;1117   		{
;;;1118   		ke_drv_cnt_10s=0;
;;;1119   
;;;1120   		i_bat_buff_cnt++;
;;;1121   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1122   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1123   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1124   		ke_drv_i_temp_temp=0;
;;;1125   		for(i=0;i<6;i++)
;;;1126   			{
;;;1127   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1128   			}
;;;1129   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1130   
;;;1131   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1132   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1133   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1134   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1135   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1136   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1137   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1138   		
;;;1139   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1140   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1141   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1142   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1143   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1144   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1145   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1146   
;;;1147   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1148   		bat_hndl_i_temp=ke_drv_i_avg;
000d2e  4ca1              LDR      r4,|L1.4020|
000d30  b2c9              UXTB     r1,r1                 ;1116
000d32  3480              ADDS     r4,r4,#0x80
000d34  7371              STRB     r1,[r6,#0xd]          ;1116
000d36  290a              CMP      r1,#0xa               ;1116
000d38  d967              BLS      |L1.3594|
000d3a  7375              STRB     r5,[r6,#0xd]          ;1118
000d3c  7bb1              LDRB     r1,[r6,#0xe]          ;1120  ; i_bat_buff_cnt
000d3e  f1010101          ADD      r1,r1,#1              ;1120
000d42  b2c9              UXTB     r1,r1                 ;1120
000d44  73b1              STRB     r1,[r6,#0xe]          ;1120
000d46  2906              CMP      r1,#6                 ;1121
000d48  d300              BCC      |L1.3404|
000d4a  73b5              STRB     r5,[r6,#0xe]          ;1121
                  |L1.3404|
000d4c  7bb1              LDRB     r1,[r6,#0xe]          ;1122  ; i_bat_buff_cnt
000d4e  6091              STR      r1,[r2,#8]            ;1122  ; bat_hndl_plazma
000d50  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1123
000d54  f04f0100          MOV      r1,#0                 ;1124
000d58  4608              MOV      r0,r1                 ;1125
                  |L1.3418|
000d5a  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1127
000d5e  4461              ADD      r1,r1,r12             ;1127
000d60  b209              SXTH     r1,r1                 ;1127
000d62  f1000001          ADD      r0,r0,#1              ;1125
000d66  b2c0              UXTB     r0,r0                 ;1125
000d68  2806              CMP      r0,#6                 ;1125
000d6a  d3f6              BCC      |L1.3418|
000d6c  f04f0006          MOV      r0,#6                 ;1129
000d70  fb91f0f0          SDIV     r0,r1,r0              ;1129
000d74  b201              SXTH     r1,r0                 ;1129
000d76  4898              LDR      r0,|L1.4056|
000d78  f8df8258          LDR      r8,|L1.4052|
000d7c  8800              LDRH     r0,[r0,#0]            ;1131  ; BAT_C_POINT_1_6
000d7e  f1a8081c          SUB      r8,r8,#0x1c           ;1131
000d82  eb000040          ADD      r0,r0,r0,LSL #1       ;1131
000d86  ea4f0040          LSL      r0,r0,#1              ;1131
000d8a  f8a80000          STRH     r0,[r8,#0]            ;1131
000d8e  4893              LDR      r0,|L1.4060|
000d90  8800              LDRH     r0,[r0,#0]            ;1132  ; BAT_C_POINT_1_2
000d92  ea4f0040          LSL      r0,r0,#1              ;1132
000d96  f8a80002          STRH     r0,[r8,#2]            ;1132
000d9a  4891              LDR      r0,|L1.4064|
000d9c  8800              LDRH     r0,[r0,#0]            ;1133  ; BAT_C_POINT_1
000d9e  f8a80004          STRH     r0,[r8,#4]            ;1133
000da2  4890              LDR      r0,|L1.4068|
000da4  f04f0303          MOV      r3,#3                 ;1134
000da8  f9b00000          LDRSH    r0,[r0,#0]            ;1134  ; BAT_C_POINT_3
000dac  fb90f0f3          SDIV     r0,r0,r3              ;1134
000db0  f8a80006          STRH     r0,[r8,#6]            ;1134
000db4  488c              LDR      r0,|L1.4072|
000db6  f04f0305          MOV      r3,#5                 ;1135
000dba  f9b00000          LDRSH    r0,[r0,#0]            ;1135  ; BAT_C_POINT_5
000dbe  fb90f0f3          SDIV     r0,r0,r3              ;1135
000dc2  f8a80008          STRH     r0,[r8,#8]            ;1135
000dc6  4889              LDR      r0,|L1.4076|
000dc8  f9b00000          LDRSH    r0,[r0,#0]            ;1136  ; BAT_C_POINT_10
000dcc  fb90f0f7          SDIV     r0,r0,r7              ;1136
000dd0  f8a8000a          STRH     r0,[r8,#0xa]          ;1136
000dd4  4886              LDR      r0,|L1.4080|
000dd6  f04f0314          MOV      r3,#0x14              ;1137
000dda  f9b00000          LDRSH    r0,[r0,#0]            ;1137  ; BAT_C_POINT_20
000dde  fb90f0f3          SDIV     r0,r0,r3              ;1137
000de2  f8a8000c          STRH     r0,[r8,#0xc]          ;1137
000de6  4883              LDR      r0,|L1.4084|
000de8  f108090e          ADD      r9,r8,#0xe            ;1139
000dec  f9b07000          LDRSH    r7,[r0,#0]            ;1139  ; BAT_U_END_1_6
000df0  f8a97000          STRH     r7,[r9,#0]            ;1139
000df4  4880              LDR      r0,|L1.4088|
000df6  8800              LDRH     r0,[r0,#0]            ;1140  ; BAT_U_END_1_2
000df8  f8a90002          STRH     r0,[r9,#2]            ;1140
000dfc  487f              LDR      r0,|L1.4092|
000dfe  8800              LDRH     r0,[r0,#0]            ;1141  ; BAT_U_END_1
000e00  f8a90004          STRH     r0,[r9,#4]            ;1141
000e04  487e              LDR      r0,|L1.4096|
000e06  e001              B        |L1.3596|
                  |L1.3592|
000e08  e11e              B        |L1.4168|
                  |L1.3594|
000e0a  e061              B        |L1.3792|
                  |L1.3596|
000e0c  8800              LDRH     r0,[r0,#0]            ;1142  ; BAT_U_END_3
000e0e  f8a90006          STRH     r0,[r9,#6]            ;1142
000e12  487c              LDR      r0,|L1.4100|
000e14  8800              LDRH     r0,[r0,#0]            ;1143  ; BAT_U_END_5
000e16  f8a90008          STRH     r0,[r9,#8]            ;1143
000e1a  487b              LDR      r0,|L1.4104|
000e1c  8800              LDRH     r0,[r0,#0]            ;1144  ; BAT_U_END_10
000e1e  f8a9000a          STRH     r0,[r9,#0xa]          ;1144
000e22  487a              LDR      r0,|L1.4108|
000e24  f9b0c000          LDRSH    r12,[r0,#0]           ;1145  ; BAT_U_END_20
000e28  f8a9c00c          STRH     r12,[r9,#0xc]         ;1145
000e2c  6051              STR      r1,[r2,#4]            ;1147  ; bat_hndl_plazma
000e2e  8161              STRH     r1,[r4,#0xa]
;;;1149   		
;;;1150   		for(i=0;i<7;i++)
000e30  f04f0000          MOV      r0,#0
                  |L1.3636|
;;;1151   			{
;;;1152   			if(bat_hndl_i_temp>=I_from_t_table[i])
000e34  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000e38  428b              CMP      r3,r1
000e3a  dd04              BLE      |L1.3654|
000e3c  f1000001          ADD      r0,r0,#1              ;1150
000e40  b2c0              UXTB     r0,r0                 ;1150
000e42  2807              CMP      r0,#7                 ;1150
000e44  d3f6              BCC      |L1.3636|
                  |L1.3654|
;;;1153   				{
;;;1154   				break;
;;;1155   				}
;;;1156   			}
;;;1157   
;;;1158   		bat_hndl_plazma[0]=i;
000e46  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000e48  f10d0a04          ADD      r10,sp,#4             ;1091
;;;1159   
;;;1160   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000e4c  b1c8              CBZ      r0,|L1.3714|
;;;1161   		 else if((i>=1)&&(i<7))
000e4e  1e42              SUBS     r2,r0,#1
000e50  2a06              CMP      r2,#6
000e52  d219              BCS      |L1.3720|
;;;1162   		 	{
;;;1163   			short i1,i2;
;;;1164   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000e54  f8383012          LDRH     r3,[r8,r2,LSL #1]
000e58  eba30101          SUB      r1,r3,r1
000e5c  b209              SXTH     r1,r1
;;;1165   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000e5e  f8388010          LDRH     r8,[r8,r0,LSL #1]
000e62  eba30308          SUB      r3,r3,r8
000e66  b21b              SXTH     r3,r3
;;;1166   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000e68  f85a8020          LDR      r8,[r10,r0,LSL #2]
000e6c  f85a2022          LDR      r2,[r10,r2,LSL #2]
000e70  eba80802          SUB      r8,r8,r2
;;;1167   			bat_hndl_t_razr_ke*=(long)i1;
000e74  fb08f801          MUL      r8,r8,r1
;;;1168   			bat_hndl_t_razr_ke/=(long)i2;
000e78  fb98f1f3          SDIV     r1,r8,r3
;;;1169   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000e7c  4411              ADD      r1,r1,r2
000e7e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
;;;1170   			}
000e80  e006              B        |L1.3728|
                  |L1.3714|
000e82  9901              LDR      r1,[sp,#4]            ;1160
000e84  6521              STR      r1,[r4,#0x50]         ;1160  ; bat_hndl_t_razr_ke
000e86  e003              B        |L1.3728|
                  |L1.3720|
;;;1171   		else if(i>=7)
000e88  2807              CMP      r0,#7
000e8a  d301              BCC      |L1.3728|
;;;1172   			{
;;;1173   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
000e8c  9907              LDR      r1,[sp,#0x1c]
000e8e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
                  |L1.3728|
;;;1174   			}
;;;1175   
;;;1176   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
000e90  b1c0              CBZ      r0,|L1.3780|
;;;1177   		 else if((i>=1)&&(i<7))
000e92  1e41              SUBS     r1,r0,#1
000e94  2906              CMP      r1,#6
000e96  d217              BCS      |L1.3784|
;;;1178   		 	{
;;;1179   			long u1,tempL;
;;;1180   
;;;1181   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
000e98  f9393010          LDRSH    r3,[r9,r0,LSL #1]
000e9c  f9392011          LDRSH    r2,[r9,r1,LSL #1]
000ea0  eba30302          SUB      r3,r3,r2
;;;1182   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
000ea4  f85a1021          LDR      r1,[r10,r1,LSL #2]
000ea8  6d27              LDR      r7,[r4,#0x50]  ; bat_hndl_t_razr_ke
000eaa  eba70701          SUB      r7,r7,r1
;;;1183   			tempL*=u1;
000eae  fb03f307          MUL      r3,r3,r7
;;;1184   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000eb2  f85a0020          LDR      r0,[r10,r0,LSL #2]
000eb6  eba00001          SUB      r0,r0,r1
;;;1185   			tempL/=u1;
000eba  fb93f0f0          SDIV     r0,r3,r0
;;;1186   			tempL+=(long)U_end_from_i_table[i-1];
000ebe  4410              ADD      r0,r0,r2
;;;1187   			bat_hndl_u_end=(short)tempL;
000ec0  81a0              STRH     r0,[r4,#0xc]
;;;1188   			}
000ec2  e005              B        |L1.3792|
                  |L1.3780|
000ec4  81a7              STRH     r7,[r4,#0xc]          ;1176
000ec6  e003              B        |L1.3792|
                  |L1.3784|
;;;1189   		else if(i>=7)
000ec8  2807              CMP      r0,#7
000eca  d301              BCC      |L1.3792|
;;;1190   			{
;;;1191   			bat_hndl_u_end=U_end_from_i_table[6];
000ecc  f8a4c00c          STRH     r12,[r4,#0xc]
                  |L1.3792|
;;;1192   			}
;;;1193   
;;;1194   		}
;;;1195   
;;;1196   
;;;1197   
;;;1198   	if(spc_phase==0)
000ed0  f8960024          LDRB     r0,[r6,#0x24]  ; spc_phase
;;;1199   		{
;;;1200   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1201   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1202   
;;;1203   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1204   	    	
;;;1205   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1206   			{
;;;1207   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1208   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000ed4  4f39              LDR      r7,|L1.4028|
;;;1209   			}
;;;1210   
;;;1211   		bat[0]._time_min_cnt_ke++;
;;;1212   		if(bat[0]._time_min_cnt_ke>=60)
;;;1213   			{
;;;1214   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
000ed6  f44f78e3          MOV      r8,#0x1c6
000eda  bbe8              CBNZ     r0,|L1.3928|
000edc  2314              MOVS     r3,#0x14              ;1201
000ede  f04f32ff          MOV      r2,#0xffffffff        ;1201
000ee2  21ce              MOVS     r1,#0xce              ;1201
000ee4  20cd              MOVS     r0,#0xcd              ;1201
000ee6  f7fffffe          BL       mess_send
000eea  f8961023          LDRB     r1,[r6,#0x23]         ;1203  ; spc_bat
000eee  f8df90c8          LDR      r9,|L1.4024|
000ef2  eb010041          ADD      r0,r1,r1,LSL #1       ;1203
000ef6  eb001001          ADD      r0,r0,r1,LSL #4       ;1203
000efa  eb090080          ADD      r0,r9,r0,LSL #2       ;1203
000efe  f9b00008          LDRSH    r0,[r0,#8]            ;1203
000f02  f7fffffe          BL       abs
000f06  f8d91018          LDR      r1,[r9,#0x18]         ;1203  ; bat
000f0a  4401              ADD      r1,r1,r0              ;1203
000f0c  f8c91018          STR      r1,[r9,#0x18]         ;1203  ; bat
000f10  f64840a0          MOV      r0,#0x8ca0            ;1205
000f14  4281              CMP      r1,r0                 ;1205
000f16  db0c              BLT      |L1.3890|
000f18  eba10100          SUB      r1,r1,r0              ;1207
000f1c  f8c91018          STR      r1,[r9,#0x18]         ;1207  ; bat
000f20  8838              LDRH     r0,[r7,#0]            ;1208  ; ADR_EE_BAT_ZAR_CNT_KE
000f22  f7fffffe          BL       lc640_read_int
000f26  1c40              ADDS     r0,r0,#1              ;1208
000f28  b201              SXTH     r1,r0                 ;1208
000f2a  f9b70000          LDRSH    r0,[r7,#0]            ;1208  ; ADR_EE_BAT_ZAR_CNT_KE
000f2e  f7fffffe          BL       lc640_write_int
                  |L1.3890|
000f32  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1211  ; bat
000f36  f1000001          ADD      r0,r0,#1              ;1211
000f3a  b281              UXTH     r1,r0                 ;1211
000f3c  f8a9104a          STRH     r1,[r9,#0x4a]         ;1211
000f40  293c              CMP      r1,#0x3c              ;1212
000f42  d309              BCC      |L1.3928|
000f44  4640              MOV      r0,r8
000f46  f7fffffe          BL       lc640_read_int
000f4a  1c40              ADDS     r0,r0,#1
000f4c  b201              SXTH     r1,r0
000f4e  4640              MOV      r0,r8
000f50  f7fffffe          BL       lc640_write_int
;;;1215   			bat[0]._time_min_cnt_ke=0;
000f54  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.3928|
;;;1216   			}
;;;1217   		}
;;;1218   
;;;1219   	else if(spc_phase==1)
;;;1220   		{
;;;1221   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1222   		}
;;;1223   
;;;1224   	if(out_U<bat_hndl_u_end)
000f58  482d              LDR      r0,|L1.4112|
000f5a  f9b4100c          LDRSH    r1,[r4,#0xc]  ; bat_hndl_u_end
000f5e  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
000f62  4288              CMP      r0,r1
000f64  da6e              BGE      |L1.4164|
;;;1225   		{
;;;1226   		cnt_end_ke++;
000f66  f8b60068          LDRH     r0,[r6,#0x68]  ; cnt_end_ke
000f6a  f1000001          ADD      r0,r0,#1
000f6e  b200              SXTH     r0,r0
000f70  f8a60068          STRH     r0,[r6,#0x68]
;;;1227   		if(cnt_end_ke>=30)
000f74  281e              CMP      r0,#0x1e
000f76  db67              BLT      |L1.4168|
;;;1228   			{
;;;1229   			
;;;1230   			if((spc_stat==spcKE)&&(spc_phase==0))
000f78  f8960022          LDRB     r0,[r6,#0x22]  ; spc_stat
000f7c  2801              CMP      r0,#1
000f7e  d155              BNE      |L1.4140|
000f80  f8960024          LDRB     r0,[r6,#0x24]  ; spc_phase
000f84  b9a8              CBNZ     r0,|L1.4018|
;;;1231   				{
;;;1232   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
000f86  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000f88  f7fffffe          BL       lc640_read_int
000f8c  b201              SXTH     r1,r0
000f8e  4821              LDR      r0,|L1.4116|
000f90  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
000f94  f7fffffe          BL       lc640_write_int
;;;1233   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
000f98  4640              MOV      r0,r8
000f9a  f7fffffe          BL       lc640_read_int
000f9e  b284              UXTH     r4,r0
000fa0  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000fa2  f7fffffe          BL       lc640_read_int
000fa6  b281              UXTH     r1,r0
000fa8  4622              MOV      r2,r4
000faa  2000              MOVS     r0,#0
000fac  f7fffffe          BL       ke_zvu_mem_hndl
;;;1234   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
000fb0  e032              B        |L1.4120|
                  |L1.4018|
000fb2  e03b              B        |L1.4140|
                  |L1.4020|
                          DCD      ||area_number.25||
                  |L1.4024|
                          DCD      bat
                  |L1.4028|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4032|
                          DCD      bat_u_old_cnt
                  |L1.4036|
                          DCD      0x40024020
                  |L1.4040|
                          DCD      ||area_number.19||+0x4
                  |L1.4044|
                          DCD      ||.bss||
                  |L1.4048|
                          DCD      Ib_ips_termokompensat
                  |L1.4052|
                          DCD      ||.bss||+0x468
                  |L1.4056|
                          DCD      BAT_C_POINT_1_6
                  |L1.4060|
                          DCD      BAT_C_POINT_1_2
                  |L1.4064|
                          DCD      BAT_C_POINT_1
                  |L1.4068|
                          DCD      BAT_C_POINT_3
                  |L1.4072|
                          DCD      BAT_C_POINT_5
                  |L1.4076|
                          DCD      BAT_C_POINT_10
                  |L1.4080|
                          DCD      BAT_C_POINT_20
                  |L1.4084|
                          DCD      BAT_U_END_1_6
                  |L1.4088|
                          DCD      BAT_U_END_1_2
                  |L1.4092|
                          DCD      BAT_U_END_1
                  |L1.4096|
                          DCD      BAT_U_END_3
                  |L1.4100|
                          DCD      BAT_U_END_5
                  |L1.4104|
                          DCD      BAT_U_END_10
                  |L1.4108|
                          DCD      BAT_U_END_20
                  |L1.4112|
                          DCD      out_U
                  |L1.4116|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4120|
001018  48ff              LDR      r0,|L1.5144|
00101a  2100              MOVS     r1,#0
00101c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001020  f7fffffe          BL       lc640_write_int
;;;1235   				cntrl_stat=50;
001024  f04f0032          MOV      r0,#0x32
001028  8630              STRH     r0,[r6,#0x30]
;;;1236   				cntrl_stat_old=50;
00102a  8670              STRH     r0,[r6,#0x32]
                  |L1.4140|
;;;1237   				}
;;;1238   
;;;1239   			spc_stat=spcOFF;
00102c  f8865022          STRB     r5,[r6,#0x22]
;;;1240   			__ee_spc_stat=spcOFF;
001030  f8a6506c          STRH     r5,[r6,#0x6c]
;;;1241   			lc640_write_int(EE_SPC_STAT,spcOFF);
001034  b008              ADD      sp,sp,#0x20
001036  2100              MOVS     r1,#0
001038  e8bd47f0          POP      {r4-r10,lr}
00103c  f240209a          MOV      r0,#0x29a
001040  f7ffbffe          B.W      lc640_write_int
                  |L1.4164|
;;;1242   
;;;1243   			}
;;;1244   		}
;;;1245   	else cnt_end_ke=0;
001044  f8a65068          STRH     r5,[r6,#0x68]
                  |L1.4168|
;;;1246   
;;;1247   	}
;;;1248   			
;;;1249   }
001048  b008              ADD      sp,sp,#0x20
00104a  e8bd87f0          POP      {r4-r10,pc}
;;;1250   #endif
                          ENDP

                  vz_start PROC
;;;1320   //-----------------------------------------------
;;;1321   char vz_start(char hour)
00104e  b570              PUSH     {r4-r6,lr}
;;;1322   {          
001050  4605              MOV      r5,r0
;;;1323   char out;
;;;1324   out=0;
001052  f04f0600          MOV      r6,#0
;;;1325   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
001056  4cf1              LDR      r4,|L1.5148|
001058  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
00105c  bba0              CBNZ     r0,|L1.4296|
00105e  48f0              LDR      r0,|L1.5152|
001060  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001062  2801              CMP      r0,#1
001064  d030              BEQ      |L1.4296|
;;;1326   	{
;;;1327   	spc_stat=spcVZ;
001066  f104042e          ADD      r4,r4,#0x2e
00106a  f04f0102          MOV      r1,#2
00106e  f8041c0c          STRB     r1,[r4,#-0xc]
;;;1328   	__ee_spc_stat=spcVZ; 
001072  87e1              STRH     r1,[r4,#0x3e]
;;;1329   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001074  f240209a          MOV      r0,#0x29a
001078  f7fffffe          BL       lc640_write_int
;;;1330   	vz_cnt_h=hour;
00107c  86e5              STRH     r5,[r4,#0x36]
;;;1331   	__ee_vz_cnt=hour*60;
00107e  ebc51005          RSB      r0,r5,r5,LSL #4
001082  ea4f0080          LSL      r0,r0,#2
001086  87a0              STRH     r0,[r4,#0x3c]
001088  f1a4042e          SUB      r4,r4,#0x2e
;;;1332   	if(hour==0)__ee_vz_cnt=30;
00108c  b91d              CBNZ     r5,|L1.4246|
00108e  f04f001e          MOV      r0,#0x1e
001092  f8a4006a          STRH     r0,[r4,#0x6a]
                  |L1.4246|
;;;1333   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001096  f1040460          ADD      r4,r4,#0x60
00109a  f44f7027          MOV      r0,#0x29c
00109e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010a2  f7fffffe          BL       lc640_write_int
;;;1334   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0010a6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010aa  f44f702a          MOV      r0,#0x2a8
0010ae  f7fffffe          BL       lc640_write_int
;;;1335   	vz_cnt_h_=0;
0010b2  f04f0000          MOV      r0,#0
0010b6  80e0              STRH     r0,[r4,#6]
;;;1336   	vz_cnt_s=0;
0010b8  8020              STRH     r0,[r4,#0]
;;;1337   	vz_cnt_s_=0;
0010ba  8060              STRH     r0,[r4,#2]
;;;1338   	out=1;
0010bc  f04f0601          MOV      r6,#1
;;;1339   	vz_mem_hndl(1);
0010c0  f04f0001          MOV      r0,#1
0010c4  f7fffffe          BL       vz_mem_hndl
                  |L1.4296|
;;;1340   	}
;;;1341   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1342   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1343   //plazma=out;	
;;;1344   return out;
0010c8  4630              MOV      r0,r6
;;;1345   }
0010ca  bd70              POP      {r4-r6,pc}
;;;1346   
                          ENDP

                  vz_stop PROC
;;;1347   //-----------------------------------------------
;;;1348   void vz_stop(void)
0010cc  b510              PUSH     {r4,lr}
;;;1349   {
;;;1350   if(spc_stat==spcVZ)
0010ce  4cd3              LDR      r4,|L1.5148|
0010d0  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
0010d4  2802              CMP      r0,#2
0010d6  d113              BNE      |L1.4352|
;;;1351        {
;;;1352   vz_mem_hndl(vz_cnt_h);          
0010d8  f104042e          ADD      r4,r4,#0x2e
0010dc  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
0010de  f7fffffe          BL       vz_mem_hndl
;;;1353   vz_cnt_s=0;
0010e2  f04f0000          MOV      r0,#0
0010e6  8660              STRH     r0,[r4,#0x32]
;;;1354   vz_cnt_h=0;
0010e8  86e0              STRH     r0,[r4,#0x36]
;;;1355   vz_cnt_h_=0;
0010ea  8720              STRH     r0,[r4,#0x38]
;;;1356   spc_stat=spcOFF;
0010ec  f8040c0c          STRB     r0,[r4,#-0xc]
;;;1357   
;;;1358   		__ee_spc_stat=spcOFF;
0010f0  87e0              STRH     r0,[r4,#0x3e]
;;;1359   		lc640_write_int(EE_SPC_STAT,spcOFF);
0010f2  4601              MOV      r1,r0
0010f4  e8bd4010          POP      {r4,lr}
0010f8  f240209a          MOV      r0,#0x29a
0010fc  f7ffbffe          B.W      lc640_write_int
                  |L1.4352|
;;;1360        }
;;;1361   
;;;1362   }
001100  bd10              POP      {r4,pc}
;;;1363   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1365   //-----------------------------------------------
;;;1366   void amper_chas_cnt_drv(void)
001102  b510              PUSH     {r4,lr}
;;;1367   {
;;;1368   
;;;1369   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
001104  4ac5              LDR      r2,|L1.5148|
001106  49c7              LDR      r1,|L1.5156|
001108  3280              ADDS     r2,r2,#0x80
00110a  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00110e  6e10              LDR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
001110  4401              ADD      r1,r1,r0
001112  6611              STR      r1,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1370   
;;;1371   if(amper_chas_cnt_drv_summ>=36000L)
001114  f64843a0          MOV      r3,#0x8ca0
;;;1372   	{
;;;1373   	amper_chas_cnt_drv_summ-=36000L;
;;;1374   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001118  f44f74e4          MOV      r4,#0x1c8
00111c  4299              CMP      r1,r3                 ;1371
00111e  db0c              BLT      |L1.4410|
001120  eba10103          SUB      r1,r1,r3              ;1373
001124  6611              STR      r1,[r2,#0x60]         ;1373  ; amper_chas_cnt_drv_summ
001126  4620              MOV      r0,r4
001128  f7fffffe          BL       lc640_read_int
00112c  1c40              ADDS     r0,r0,#1
00112e  b201              SXTH     r1,r0
001130  4620              MOV      r0,r4
001132  e8bd4010          POP      {r4,lr}
001136  f7ffbffe          B.W      lc640_write_int
                  |L1.4410|
;;;1375   	}
;;;1376   else if(amper_chas_cnt_drv_summ<=-36000L)
00113a  48bb              LDR      r0,|L1.5160|
00113c  4281              CMP      r1,r0
00113e  dc0c              BGT      |L1.4442|
;;;1377   	{
;;;1378   	amper_chas_cnt_drv_summ+=36000L;
001140  eb010003          ADD      r0,r1,r3
001144  6610              STR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1379   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
001146  4620              MOV      r0,r4
001148  f7fffffe          BL       lc640_read_int
00114c  1e40              SUBS     r0,r0,#1
00114e  b201              SXTH     r1,r0
001150  4620              MOV      r0,r4
001152  e8bd4010          POP      {r4,lr}
001156  f7ffbffe          B.W      lc640_write_int
                  |L1.4442|
;;;1380   	}
;;;1381   }
00115a  bd10              POP      {r4,pc}
;;;1382   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1384   //-----------------------------------------------
;;;1385   void avz_next_date_hndl(void)
00115c  b570              PUSH     {r4-r6,lr}
;;;1386   {
;;;1387   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
00115e  4cb3              LDR      r4,|L1.5164|
001160  f8940038          LDRB     r0,[r4,#0x38]
001164  4db2              LDR      r5,|L1.5168|
001166  7829              LDRB     r1,[r5,#0]  ; AVZ
001168  4408              ADD      r0,r0,r1
00116a  280c              CMP      r0,#0xc
00116c  d906              BLS      |L1.4476|
00116e  8fa0              LDRH     r0,[r4,#0x3c]
001170  1c40              ADDS     r0,r0,#1
001172  b201              SXTH     r1,r0
001174  20b8              MOVS     r0,#0xb8
001176  f7fffffe          BL       lc640_write_int
00117a  e004              B        |L1.4486|
                  |L1.4476|
;;;1388   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
00117c  f9b4103c          LDRSH    r1,[r4,#0x3c]
001180  20b8              MOVS     r0,#0xb8
001182  f7fffffe          BL       lc640_write_int
                  |L1.4486|
;;;1389   
;;;1390   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1391   
;;;1392   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
001186  f8941038          LDRB     r1,[r4,#0x38]
00118a  7828              LDRB     r0,[r5,#0]  ; AVZ
00118c  4401              ADD      r1,r1,r0
00118e  290c              CMP      r1,#0xc
001190  d907              BLS      |L1.4514|
001192  f8941038          LDRB     r1,[r4,#0x38]
001196  380c              SUBS     r0,r0,#0xc
001198  4401              ADD      r1,r1,r0
00119a  20b6              MOVS     r0,#0xb6
00119c  f7fffffe          BL       lc640_write_int
0011a0  e005              B        |L1.4526|
                  |L1.4514|
;;;1393   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0011a2  f8941038          LDRB     r1,[r4,#0x38]
0011a6  4401              ADD      r1,r1,r0
0011a8  20b6              MOVS     r0,#0xb6
0011aa  f7fffffe          BL       lc640_write_int
                  |L1.4526|
;;;1394   
;;;1395   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1396   
;;;1397   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0011ae  f894002c          LDRB     r0,[r4,#0x2c]
0011b2  281c              CMP      r0,#0x1c
0011b4  d904              BLS      |L1.4544|
0011b6  211c              MOVS     r1,#0x1c
0011b8  20b4              MOVS     r0,#0xb4
0011ba  f7fffffe          BL       lc640_write_int
0011be  e004              B        |L1.4554|
                  |L1.4544|
;;;1398   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
0011c0  f894102c          LDRB     r1,[r4,#0x2c]
0011c4  20b4              MOVS     r0,#0xb4
0011c6  f7fffffe          BL       lc640_write_int
                  |L1.4554|
;;;1399   
;;;1400   //lc640_write_int(EE_DATE_AVZ,4);
;;;1401   
;;;1402   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
0011ca  f1040420          ADD      r4,r4,#0x20
0011ce  7a21              LDRB     r1,[r4,#8]
0011d0  f04f00ae          MOV      r0,#0xae
0011d4  f7fffffe          BL       lc640_write_int
;;;1403   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
0011d8  7921              LDRB     r1,[r4,#4]
0011da  20b0              MOVS     r0,#0xb0
0011dc  f7fffffe          BL       lc640_write_int
;;;1404   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
0011e0  7821              LDRB     r1,[r4,#0]
0011e2  e8bd4070          POP      {r4-r6,lr}
0011e6  20b2              MOVS     r0,#0xb2
0011e8  f7ffbffe          B.W      lc640_write_int
;;;1405   
;;;1406   }
;;;1407   
                          ENDP

                  avz_drv PROC
;;;1408   //-----------------------------------------------
;;;1409   void avz_drv(void)                               
0011ec  b510              PUSH     {r4,lr}
;;;1410   {                
;;;1411   if(AVZ!=AVZ_OFF)
0011ee  4890              LDR      r0,|L1.5168|
;;;1412   	{
;;;1413   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1414   		{
;;;1415   		bAVZ=1;
0011f0  4c8a              LDR      r4,|L1.5148|
0011f2  7800              LDRB     r0,[r0,#0]            ;1411  ; AVZ
0011f4  b338              CBZ      r0,|L1.4678|
0011f6  488d              LDR      r0,|L1.5164|
0011f8  8f82              LDRH     r2,[r0,#0x3c]         ;1413
0011fa  498e              LDR      r1,|L1.5172|
0011fc  8809              LDRH     r1,[r1,#0]            ;1413  ; YEAR_AVZ
0011fe  428a              CMP      r2,r1                 ;1413
001200  d121              BNE      |L1.4678|
001202  f8902038          LDRB     r2,[r0,#0x38]         ;1413
001206  498c              LDR      r1,|L1.5176|
001208  8809              LDRH     r1,[r1,#0]            ;1413  ; MONTH_AVZ
00120a  428a              CMP      r2,r1                 ;1413
00120c  d11b              BNE      |L1.4678|
00120e  f890102c          LDRB     r1,[r0,#0x2c]         ;1413
001212  4a8a              LDR      r2,|L1.5180|
001214  8812              LDRH     r2,[r2,#0]            ;1413  ; DATE_AVZ
001216  4291              CMP      r1,r2                 ;1413
001218  d115              BNE      |L1.4678|
00121a  f8901028          LDRB     r1,[r0,#0x28]         ;1413
00121e  4a88              LDR      r2,|L1.5184|
001220  8812              LDRH     r2,[r2,#0]            ;1413  ; HOUR_AVZ
001222  4291              CMP      r1,r2                 ;1413
001224  d10f              BNE      |L1.4678|
001226  f8901024          LDRB     r1,[r0,#0x24]         ;1413
00122a  4a86              LDR      r2,|L1.5188|
00122c  8812              LDRH     r2,[r2,#0]            ;1413  ; MIN_AVZ
00122e  4291              CMP      r1,r2                 ;1413
001230  d109              BNE      |L1.4678|
001232  f8900020          LDRB     r0,[r0,#0x20]         ;1413
001236  4984              LDR      r1,|L1.5192|
001238  8809              LDRH     r1,[r1,#0]            ;1413  ; SEC_AVZ
00123a  4288              CMP      r0,r1                 ;1413
00123c  d103              BNE      |L1.4678|
00123e  f04f0001          MOV      r0,#1
001242  f8840025          STRB     r0,[r4,#0x25]
                  |L1.4678|
;;;1416   		}
;;;1417   	}
;;;1418   if(bAVZ)
001246  f8940025          LDRB     r0,[r4,#0x25]  ; bAVZ
00124a  2800              CMP      r0,#0
00124c  d00d              BEQ      |L1.4714|
;;;1419   	{
;;;1420   	if(vz_start(AVZ_TIME))
00124e  487f              LDR      r0,|L1.5196|
001250  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
001252  b2c0              UXTB     r0,r0
001254  f7fffffe          BL       vz_start
001258  2800              CMP      r0,#0
00125a  d006              BEQ      |L1.4714|
;;;1421   		{
;;;1422   		bAVZ=0;
00125c  f04f0000          MOV      r0,#0
001260  f8840025          STRB     r0,[r4,#0x25]
;;;1423   		avz_next_date_hndl();
001264  e8bd4010          POP      {r4,lr}
001268  e7fe              B        avz_next_date_hndl
                  |L1.4714|
;;;1424   		}
;;;1425   	}	
;;;1426   
;;;1427   }
00126a  bd10              POP      {r4,pc}
;;;1428   
                          ENDP

                  vz_drv PROC
;;;1429   //-----------------------------------------------
;;;1430   void vz_drv(void)
00126c  b538              PUSH     {r3-r5,lr}
;;;1431   { 
;;;1432   if(spc_stat==spcVZ)
00126e  4c6b              LDR      r4,|L1.5148|
001270  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
001274  2802              CMP      r0,#2
001276  d11d              BNE      |L1.4788|
;;;1433   	{
;;;1434   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001278  4875              LDR      r0,|L1.5200|
00127a  7800              LDRB     r0,[r0,#0]  ; sk_stat
00127c  2801              CMP      r0,#1
00127e  d01a              BEQ      |L1.4790|
001280  4874              LDR      r0,|L1.5204|
001282  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
001284  2800              CMP      r0,#0
001286  d016              BEQ      |L1.4790|
;;;1435   		{
;;;1436   
;;;1437   	if(vz_cnt_s_<3600)
;;;1438   		{
;;;1439   		vz_cnt_s_++;
;;;1440   		if(vz_cnt_s_>=3600)
;;;1441   			{
;;;1442   			vz_cnt_s_=0;
;;;1443   			if(vz_cnt_h)
;;;1444   				{
;;;1445   				vz_cnt_h--;
;;;1446   				vz_cnt_h_++;
;;;1447   				}
;;;1448   			}
;;;1449   		}
;;;1450   
;;;1451   
;;;1452   	if(vz_cnt_s<60)
;;;1453   		{
;;;1454   		vz_cnt_s++;
;;;1455   		if(vz_cnt_s>=60)
;;;1456   			{
;;;1457   			vz_cnt_s=0;
;;;1458   			
;;;1459   			__ee_vz_cnt--;
;;;1460   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1461   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1462   				{
;;;1463   				spc_stat=spcOFF;
;;;1464   						__ee_spc_stat=spcOFF;
;;;1465   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1466   
;;;1467   //				hv_vz_stat=hvsOFF;
;;;1468   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1469   				vz_mem_hndl(0);
;;;1470   				}
;;;1471   			}
;;;1472   		}
;;;1473   		vz_error=0; 
;;;1474   		}
;;;1475   	else 
;;;1476   		{
;;;1477   		vz_error=1; 
001288  f04f0001          MOV      r0,#1
00128c  7060              STRB     r0,[r4,#1]
;;;1478   		if(((LPC_RTC->SEC)%10)==0)
00128e  4872              LDR      r0,|L1.5208|
001290  7800              LDRB     r0,[r0,#0]
001292  f04f010a          MOV      r1,#0xa
001296  fbb0f2f1          UDIV     r2,r0,r1
00129a  fb010012          MLS      r0,r1,r2,r0
00129e  2800              CMP      r0,#0
0012a0  d108              BNE      |L1.4788|
;;;1479   			{
;;;1480   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0012a2  f2413088          MOV      r0,#0x1388
0012a6  9000              STR      r0,[sp,#0]
0012a8  a36c              ADR      r3,|L1.5212|
0012aa  a272              ADR      r2,|L1.5236|
0012ac  a177              ADR      r1,|L1.5260|
0012ae  a07d              ADR      r0,|L1.5284|
0012b0  f7fffffe          BL       show_mess
                  |L1.4788|
;;;1481   						"    ЗАБЛОКИРОВАН    ",
;;;1482   						"     НЕИСПРАВНА     ",
;;;1483   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1484   						5000);			
;;;1485   			}
;;;1486   		}
;;;1487   /*	if(vz_cnt_s_>=3)
;;;1488   		{
;;;1489   		if(sk_stat[0]==0)
;;;1490   		} */
;;;1491   
;;;1492   	}
;;;1493   
;;;1494   
;;;1495   } 
0012b4  bd38              POP      {r3-r5,pc}
                  |L1.4790|
0012b6  f8b40062          LDRH     r0,[r4,#0x62]         ;1437  ; vz_cnt_s_
0012ba  f44f6161          MOV      r1,#0xe10             ;1437
0012be  2500              MOVS     r5,#0                 ;1434
0012c0  4288              CMP      r0,r1                 ;1437
0012c2  d215              BCS      |L1.4848|
0012c4  f1000001          ADD      r0,r0,#1              ;1439
0012c8  b280              UXTH     r0,r0                 ;1439
0012ca  f8a40062          STRH     r0,[r4,#0x62]         ;1439
0012ce  4288              CMP      r0,r1                 ;1440
0012d0  d30e              BCC      |L1.4848|
0012d2  f8a45062          STRH     r5,[r4,#0x62]         ;1442
0012d6  f8b40064          LDRH     r0,[r4,#0x64]         ;1443  ; vz_cnt_h
0012da  b148              CBZ      r0,|L1.4848|
0012dc  f1a00001          SUB      r0,r0,#1              ;1445
0012e0  f8240f64          STRH     r0,[r4,#0x64]!        ;1445
0012e4  8860              LDRH     r0,[r4,#2]            ;1446  ; vz_cnt_h_
0012e6  f1000001          ADD      r0,r0,#1              ;1446
0012ea  8060              STRH     r0,[r4,#2]            ;1446
0012ec  f1a40464          SUB      r4,r4,#0x64           ;1446
                  |L1.4848|
0012f0  f8b40060          LDRH     r0,[r4,#0x60]         ;1452  ; vz_cnt_s
0012f4  283c              CMP      r0,#0x3c              ;1452
0012f6  d225              BCS      |L1.4932|
0012f8  f1000001          ADD      r0,r0,#1              ;1454
0012fc  b280              UXTH     r0,r0                 ;1454
0012fe  f8a40060          STRH     r0,[r4,#0x60]         ;1454
001302  283c              CMP      r0,#0x3c              ;1455
001304  d31e              BCC      |L1.4932|
001306  f8245f60          STRH     r5,[r4,#0x60]!        ;1457
00130a  8960              LDRH     r0,[r4,#0xa]          ;1459  ; __ee_vz_cnt
00130c  f1a00001          SUB      r0,r0,#1              ;1459
001310  b201              SXTH     r1,r0                 ;1459
001312  8161              STRH     r1,[r4,#0xa]          ;1459
001314  f44f7027          MOV      r0,#0x29c             ;1460
001318  f7fffffe          BL       lc640_write_int
00131c  8960              LDRH     r0,[r4,#0xa]          ;1461  ; __ee_vz_cnt
00131e  f1a40460          SUB      r4,r4,#0x60           ;1461
001322  b118              CBZ      r0,|L1.4908|
001324  483e              LDR      r0,|L1.5152|
001326  8800              LDRH     r0,[r0,#0]            ;1461  ; speedChrgBlckStat
001328  2801              CMP      r0,#1                 ;1461
00132a  d10b              BNE      |L1.4932|
                  |L1.4908|
00132c  f8845022          STRB     r5,[r4,#0x22]         ;1463
001330  f8a4506c          STRH     r5,[r4,#0x6c]         ;1464
001334  2100              MOVS     r1,#0                 ;1465
001336  f240209a          MOV      r0,#0x29a             ;1465
00133a  f7fffffe          BL       lc640_write_int
00133e  2000              MOVS     r0,#0                 ;1469
001340  f7fffffe          BL       vz_mem_hndl
                  |L1.4932|
001344  7065              STRB     r5,[r4,#1]            ;1473
001346  bd38              POP      {r3-r5,pc}
;;;1496   
                          ENDP

                  vz1_drv PROC
;;;1498   //драйвер уравнительного заряда
;;;1499   void vz1_drv(void)
001348  e92d4ff8          PUSH     {r3-r11,lr}
;;;1500   {
;;;1501   if(volt_region_cnt)volt_region_cnt--;
00134c  f8df80cc          LDR      r8,|L1.5148|
001350  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; volt_region_cnt
001354  b118              CBZ      r0,|L1.4958|
001356  f1a00001          SUB      r0,r0,#1
00135a  f8a8007a          STRH     r0,[r8,#0x7a]
                  |L1.4958|
;;;1502   if(vz1_stat==vz1sOFF)
00135e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001362  b928              CBNZ     r0,|L1.4976|
;;;1503   	{
;;;1504   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001364  2314              MOVS     r3,#0x14
001366  2200              MOVS     r2,#0
001368  2164              MOVS     r1,#0x64
00136a  20d2              MOVS     r0,#0xd2
00136c  f7fffffe          BL       mess_send
                  |L1.4976|
;;;1505   	}
;;;1506   if(vz1_stat==vz1sSTEP1)
001370  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1507   	{
;;;1508   	if(vz1_stat_old!=vz1_stat)
;;;1509   		{
;;;1510   		vz1_stat_cnt=5;
;;;1511   		}
;;;1512   	if(vz1_stat_cnt)
;;;1513   		{
;;;1514   		vz1_stat_cnt--;
;;;1515   		if(vz1_stat_cnt==0)
;;;1516   			{
;;;1517   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1518   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1519   			}
;;;1520   		}
;;;1521   	if(sk_stat[0]==1)
001374  4d36              LDR      r5,|L1.5200|
001376  f44f7bc9          MOV      r11,#0x192            ;1518
00137a  2801              CMP      r0,#1                 ;1506
00137c  d139              BNE      |L1.5106|
00137e  f8980006          LDRB     r0,[r8,#6]            ;1508  ; vz1_stat_old
001382  2801              CMP      r0,#1                 ;1508
001384  d003              BEQ      |L1.5006|
001386  f04f0005          MOV      r0,#5                 ;1510
00138a  f8a80078          STRH     r0,[r8,#0x78]         ;1510
                  |L1.5006|
00138e  f9b80078          LDRSH    r0,[r8,#0x78]         ;1512  ; vz1_stat_cnt
001392  b168              CBZ      r0,|L1.5040|
001394  f1a00001          SUB      r0,r0,#1              ;1514
001398  b200              SXTH     r0,r0                 ;1514
00139a  f8a80078          STRH     r0,[r8,#0x78]         ;1514
00139e  b938              CBNZ     r0,|L1.5040|
0013a0  f04f000b          MOV      r0,#0xb               ;1517
0013a4  f8880005          STRB     r0,[r8,#5]            ;1517
0013a8  4601              MOV      r1,r0                 ;1518
0013aa  4658              MOV      r0,r11                ;1518
0013ac  f7fffffe          BL       lc640_write
                  |L1.5040|
0013b0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0013b2  2801              CMP      r0,#1
0013b4  d117              BNE      |L1.5094|
;;;1522   		{
;;;1523   		vz1_stat=vz1sSTEP2;
0013b6  f04f0002          MOV      r0,#2
0013ba  f8880005          STRB     r0,[r8,#5]
;;;1524   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0013be  4601              MOV      r1,r0
0013c0  4658              MOV      r0,r11
0013c2  f7fffffe          BL       lc640_write
;;;1525   		tree_up(iVZ1_STEP2_2,1,0,0);
0013c6  2300              MOVS     r3,#0
0013c8  461a              MOV      r2,r3
0013ca  2101              MOVS     r1,#1
0013cc  20de              MOVS     r0,#0xde
0013ce  f7fffffe          BL       tree_up
;;;1526   		tree_up(iVZ1_STEP2_1,0,0,0);
0013d2  2300              MOVS     r3,#0
0013d4  461a              MOV      r2,r3
0013d6  4619              MOV      r1,r3
0013d8  20dd              MOVS     r0,#0xdd
0013da  f7fffffe          BL       tree_up
;;;1527   		ret(1200);
0013de  f44f6096          MOV      r0,#0x4b0
0013e2  f7fffffe          BL       ||ret||
                  |L1.5094|
;;;1528   		}
;;;1529   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013e6  2314              MOVS     r3,#0x14
0013e8  2200              MOVS     r2,#0
0013ea  2164              MOVS     r1,#0x64
0013ec  20d2              MOVS     r0,#0xd2
0013ee  f7fffffe          BL       mess_send
                  |L1.5106|
;;;1530   	}
;;;1531   
;;;1532   if(vz1_stat==vz1sSTEP2)
0013f2  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1533   	{
;;;1534   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1535   		{
;;;1536   		vz1_stat_cnt=15;
0013f6  f04f090f          MOV      r9,#0xf
0013fa  2802              CMP      r0,#2                 ;1532
0013fc  d16c              BNE      |L1.5336|
0013fe  f8980006          LDRB     r0,[r8,#6]            ;1534  ; vz1_stat_old
001402  2802              CMP      r0,#2                 ;1534
001404  d102              BNE      |L1.5132|
001406  f8b80078          LDRH     r0,[r8,#0x78]         ;1534  ; vz1_stat_cnt
00140a  b908              CBNZ     r0,|L1.5136|
                  |L1.5132|
00140c  f8a89078          STRH     r9,[r8,#0x78]
                  |L1.5136|
;;;1537   		}
;;;1538   	vz1_stat_cnt--;
001410  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001414  e052              B        |L1.5308|
001416  0000              DCW      0x0000
                  |L1.5144|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.5148|
                          DCD      ||area_number.25||
                  |L1.5152|
                          DCD      speedChrgBlckStat
                  |L1.5156|
                          DCD      Ib_ips_termokompensat
                  |L1.5160|
                          DCD      0xffff7360
                  |L1.5164|
                          DCD      0x40024000
                  |L1.5168|
                          DCD      AVZ
                  |L1.5172|
                          DCD      YEAR_AVZ
                  |L1.5176|
                          DCD      MONTH_AVZ
                  |L1.5180|
                          DCD      DATE_AVZ
                  |L1.5184|
                          DCD      HOUR_AVZ
                  |L1.5188|
                          DCD      MIN_AVZ
                  |L1.5192|
                          DCD      SEC_AVZ
                  |L1.5196|
                          DCD      AVZ_TIME
                  |L1.5200|
                          DCD      sk_stat
                  |L1.5204|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5208|
                          DCD      0x40024020
                  |L1.5212|
00145c  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001460  c2c5cdd2
001464  c8cbdfd6
001468  c8df2121
00146c  21202020
001470  00      
001471  00                DCB      0
001472  00                DCB      0
001473  00                DCB      0
                  |L1.5236|
001474  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
001478  20cdc5c8
00147c  d1cfd0c0
001480  c2cdc020
001484  20202020
001488  00      
001489  00                DCB      0
00148a  00                DCB      0
00148b  00                DCB      0
                  |L1.5260|
00148c  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
001490  c7c0c1cb
001494  cecac8d0
001498  cec2c0cd
00149c  20      
00149d  20202000          DCB      "   ",0
0014a1  00                DCB      0
0014a2  00                DCB      0
0014a3  00                DCB      0
                  |L1.5284|
0014a4  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0014a8  c2cdc8c2
0014ac  c0ded9c8
0014b0  c920c7  
0014b3  c0d0dfc4          DCB      192,208,223,196," ",0
0014b7  2000    
0014b9  00                DCB      0
0014ba  00                DCB      0
0014bb  00                DCB      0
                  |L1.5308|
0014bc  f1a00001          SUB      r0,r0,#1
0014c0  f8a80078          STRH     r0,[r8,#0x78]
;;;1539   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014c4  f04f0314          MOV      r3,#0x14
0014c8  f04f0200          MOV      r2,#0
0014cc  f04f0164          MOV      r1,#0x64
0014d0  f04f00d2          MOV      r0,#0xd2
0014d4  f7fffffe          BL       mess_send
                  |L1.5336|
;;;1540   	}
;;;1541   
;;;1542   if(vz1_stat==vz1sSTEP3)
0014d8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1543   	{
;;;1544   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1545   		{
;;;1546   		vz1_stat_cnt=10;
0014dc  240a              MOVS     r4,#0xa
0014de  2600              MOVS     r6,#0                 ;1501
0014e0  f04f0a01          MOV      r10,#1                ;1502
;;;1547   
;;;1548   		}
;;;1549   	vz1_stat_cnt--;
;;;1550   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1551   		{
;;;1552   		show_mess(	"     ВКЛЮЧИТЕ       ",
0014e4  f2413788          MOV      r7,#0x1388
0014e8  2803              CMP      r0,#3                 ;1542
0014ea  d131              BNE      |L1.5456|
0014ec  f8980006          LDRB     r0,[r8,#6]            ;1544  ; vz1_stat_old
0014f0  2803              CMP      r0,#3                 ;1544
0014f2  d102              BNE      |L1.5370|
0014f4  f8b80078          LDRH     r0,[r8,#0x78]         ;1544  ; vz1_stat_cnt
0014f8  b908              CBNZ     r0,|L1.5374|
                  |L1.5370|
0014fa  f8a84078          STRH     r4,[r8,#0x78]         ;1546
                  |L1.5374|
0014fe  f8b80078          LDRH     r0,[r8,#0x78]         ;1549  ; vz1_stat_cnt
001502  f1a00001          SUB      r0,r0,#1              ;1549
001506  b200              SXTH     r0,r0                 ;1549
001508  f8a80078          STRH     r0,[r8,#0x78]         ;1549
00150c  280a              CMP      r0,#0xa               ;1550
00150e  d001              BEQ      |L1.5396|
001510  2809              CMP      r0,#9                 ;1550
001512  d106              BNE      |L1.5410|
                  |L1.5396|
001514  a3e7              ADR      r3,|L1.6324|
001516  a2ed              ADR      r2,|L1.6348|
001518  a1f2              ADR      r1,|L1.6372|
00151a  a0f8              ADR      r0,|L1.6396|
00151c  9700              STR      r7,[sp,#0]
00151e  f7fffffe          BL       show_mess
                  |L1.5410|
;;;1553   					"      ТУМБЛЕР       ",
;;;1554   					"     ВЫСОКОГО       ",
;;;1555   					"    НАПРЯЖЕНИЯ      ",
;;;1556   					5000);
;;;1557   		}
;;;1558   	if(sk_stat[1]==1)
001522  7868              LDRB     r0,[r5,#1]  ; sk_stat
001524  2801              CMP      r0,#1
001526  d10d              BNE      |L1.5444|
;;;1559   		{
;;;1560   		vz1_stat=vz1sWRK;
001528  f8884005          STRB     r4,[r8,#5]
;;;1561   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00152c  210a              MOVS     r1,#0xa
00152e  4658              MOV      r0,r11
001530  f7fffffe          BL       lc640_write
;;;1562   		volt_region=1;
001534  f888a02e          STRB     r10,[r8,#0x2e]
;;;1563   		cntrl_stat=0;
001538  f8a86030          STRH     r6,[r8,#0x30]
;;;1564   		cntrl_stat_new=0;
00153c  f8a86046          STRH     r6,[r8,#0x46]
;;;1565   		cntrl_stat_old=0;
001540  f8a86032          STRH     r6,[r8,#0x32]
                  |L1.5444|
;;;1566   		}
;;;1567   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001544  2314              MOVS     r3,#0x14
001546  2200              MOVS     r2,#0
001548  2164              MOVS     r1,#0x64
00154a  20d2              MOVS     r0,#0xd2
00154c  f7fffffe          BL       mess_send
                  |L1.5456|
;;;1568   	}
;;;1569   
;;;1570   if(vz1_stat==vz1sWRK)
001550  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001554  280a              CMP      r0,#0xa
001556  d17d              BNE      |L1.5716|
;;;1571   	{
;;;1572   	if(vz1_stat_old!=vz1_stat)
001558  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
;;;1573   		{
;;;1574   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00155c  49ed              LDR      r1,|L1.6420|
00155e  280a              CMP      r0,#0xa               ;1572
001560  d008              BEQ      |L1.5492|
001562  48ed              LDR      r0,|L1.6424|
001564  f44f6261          MOV      r2,#0xe10
001568  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00156c  fb00f002          MUL      r0,r0,r2
001570  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1575   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1576   		vz1_up_cnt=0L;
001572  640e              STR      r6,[r1,#0x40]  ; vz1_up_cnt
                  |L1.5492|
;;;1577   
;;;1578   		}
;;;1579   	vz1_wrk_cnt--;
001574  6bc8              LDR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
001576  f1a00001          SUB      r0,r0,#1
00157a  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1580   	vz1_up_cnt++;
00157c  6c0a              LDR      r2,[r1,#0x40]  ; vz1_up_cnt
00157e  f1020201          ADD      r2,r2,#1
001582  640a              STR      r2,[r1,#0x40]  ; vz1_up_cnt
;;;1581   
;;;1582   	if(vz1_wrk_cnt==0)
001584  b940              CBNZ     r0,|L1.5528|
;;;1583   		{
;;;1584   		vz1_stat=vz1sFINE;
001586  f8889005          STRB     r9,[r8,#5]
;;;1585   		lc640_write(EE_VZ1_STAT,vz1sFINE);
00158a  210f              MOVS     r1,#0xf
00158c  4658              MOV      r0,r11
00158e  f7fffffe          BL       lc640_write
;;;1586   		uz_mem_hndl(0);
001592  2000              MOVS     r0,#0
001594  f7fffffe          BL       uz_mem_hndl
                  |L1.5528|
;;;1587   		}
;;;1588   	if(sk_stat[0]==0)
001598  7828              LDRB     r0,[r5,#0]  ; sk_stat
00159a  b938              CBNZ     r0,|L1.5548|
;;;1589   		{
;;;1590   		vz1_stat=vz1sERR2;
00159c  f04f000c          MOV      r0,#0xc
0015a0  f8880005          STRB     r0,[r8,#5]
;;;1591   		lc640_write(EE_VZ1_STAT,vz1sERR2);
0015a4  4601              MOV      r1,r0
0015a6  4658              MOV      r0,r11
0015a8  f7fffffe          BL       lc640_write
                  |L1.5548|
;;;1592   		}
;;;1593   	if(sk_stat[1]==0)
0015ac  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015ae  b938              CBNZ     r0,|L1.5568|
;;;1594   		{
;;;1595   		vz1_stat=vz1sERR3;
0015b0  f04f000d          MOV      r0,#0xd
0015b4  f8880005          STRB     r0,[r8,#5]
;;;1596   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0015b8  4601              MOV      r1,r0
0015ba  4658              MOV      r0,r11
0015bc  f7fffffe          BL       lc640_write
                  |L1.5568|
;;;1597   		}
;;;1598   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0015c0  f9b80048          LDRSH    r0,[r8,#0x48]  ; Ibmax
0015c4  f8b8104a          LDRH     r1,[r8,#0x4a]  ; IZMAX_
0015c8  fb90f0f4          SDIV     r0,r0,r4
;;;1599   		{
;;;1600   		volt_region=0;
;;;1601   		cntrl_stat=1000;
0015cc  f44f727a          MOV      r2,#0x3e8
0015d0  4288              CMP      r0,r1                 ;1598
0015d2  dd16              BLE      |L1.5634|
0015d4  f9b83030          LDRSH    r3,[r8,#0x30]         ;1598  ; cntrl_stat
0015d8  2b14              CMP      r3,#0x14              ;1598
0015da  dc12              BGT      |L1.5634|
0015dc  f898302e          LDRB     r3,[r8,#0x2e]         ;1598  ; volt_region
0015e0  2b01              CMP      r3,#1                 ;1598
0015e2  d10e              BNE      |L1.5634|
0015e4  f8b8307a          LDRH     r3,[r8,#0x7a]         ;1598  ; volt_region_cnt
0015e8  b95b              CBNZ     r3,|L1.5634|
0015ea  f888602e          STRB     r6,[r8,#0x2e]         ;1600
0015ee  f8a82030          STRH     r2,[r8,#0x30]
;;;1602   		cntrl_stat_new=1000;
0015f2  f8a82046          STRH     r2,[r8,#0x46]
;;;1603   		cntrl_stat_old=1000;
0015f6  f8a82032          STRH     r2,[r8,#0x32]
;;;1604   		volt_region_cnt=110;
0015fa  f04f036e          MOV      r3,#0x6e
0015fe  f8a8307a          STRH     r3,[r8,#0x7a]
                  |L1.5634|
;;;1605   		}
;;;1606   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001602  4288              CMP      r0,r1
001604  da13              BGE      |L1.5678|
001606  f9b80030          LDRSH    r0,[r8,#0x30]  ; cntrl_stat
00160a  4290              CMP      r0,r2
00160c  db0f              BLT      |L1.5678|
00160e  f898002e          LDRB     r0,[r8,#0x2e]  ; volt_region
001612  b960              CBNZ     r0,|L1.5678|
001614  f8b8007a          LDRH     r0,[r8,#0x7a]  ; volt_region_cnt
001618  b948              CBNZ     r0,|L1.5678|
;;;1607   		{
;;;1608   		volt_region=1;
00161a  f888a02e          STRB     r10,[r8,#0x2e]
;;;1609   		cntrl_stat=10;
00161e  f8a84030          STRH     r4,[r8,#0x30]
;;;1610   		cntrl_stat_new=10;
001622  f8a84046          STRH     r4,[r8,#0x46]
;;;1611   		cntrl_stat_old=10;
001626  f8a84032          STRH     r4,[r8,#0x32]
;;;1612   		volt_region_cnt=10;
00162a  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5678|
;;;1613   		}
;;;1614   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00162e  f898002e          LDRB     r0,[r8,#0x2e]  ; volt_region
001632  b110              CBZ      r0,|L1.5690|
;;;1615   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001634  2801              CMP      r0,#1
001636  d007              BEQ      |L1.5704|
001638  e00c              B        |L1.5716|
                  |L1.5690|
00163a  2314              MOVS     r3,#0x14              ;1614
00163c  2200              MOVS     r2,#0                 ;1614
00163e  2164              MOVS     r1,#0x64              ;1614
001640  20d2              MOVS     r0,#0xd2              ;1614
001642  f7fffffe          BL       mess_send
001646  e005              B        |L1.5716|
                  |L1.5704|
001648  2314              MOVS     r3,#0x14
00164a  2201              MOVS     r2,#1
00164c  2164              MOVS     r1,#0x64
00164e  20d2              MOVS     r0,#0xd2
001650  f7fffffe          BL       mess_send
                  |L1.5716|
;;;1616   	}
;;;1617   
;;;1618   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001654  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001658  280b              CMP      r0,#0xb
00165a  d120              BNE      |L1.5790|
;;;1619   	{
;;;1620   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00165c  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001660  280b              CMP      r0,#0xb
001662  d102              BNE      |L1.5738|
001664  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001668  b908              CBNZ     r0,|L1.5742|
                  |L1.5738|
;;;1621   		{
;;;1622   		vz1_stat_cnt=10;
00166a  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.5742|
;;;1623   		}
;;;1624   	vz1_stat_cnt--;
00166e  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001672  f1a00001          SUB      r0,r0,#1
001676  b200              SXTH     r0,r0
001678  f8a80078          STRH     r0,[r8,#0x78]
;;;1625   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00167c  280a              CMP      r0,#0xa
00167e  d001              BEQ      |L1.5764|
001680  2809              CMP      r0,#9
001682  d106              BNE      |L1.5778|
                  |L1.5764|
;;;1626   		{
;;;1627   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001684  a3a5              ADR      r3,|L1.6428|
001686  a2ab              ADR      r2,|L1.6452|
001688  a1b0              ADR      r1,|L1.6476|
00168a  a0b6              ADR      r0,|L1.6500|
00168c  9700              STR      r7,[sp,#0]
00168e  f7fffffe          BL       show_mess
                  |L1.5778|
;;;1628   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1629   					"      ВКЛЮЧЕН       ",
;;;1630   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1631   					5000);
;;;1632   		}
;;;1633   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001692  2314              MOVS     r3,#0x14
001694  2200              MOVS     r2,#0
001696  2164              MOVS     r1,#0x64
001698  20d2              MOVS     r0,#0xd2
00169a  f7fffffe          BL       mess_send
                  |L1.5790|
;;;1634   	}
;;;1635   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00169e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0016a2  280c              CMP      r0,#0xc
0016a4  d12c              BNE      |L1.5888|
;;;1636   	{
;;;1637   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0016a6  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0016aa  280c              CMP      r0,#0xc
0016ac  d102              BNE      |L1.5812|
0016ae  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
0016b2  b908              CBNZ     r0,|L1.5816|
                  |L1.5812|
;;;1638   		{
;;;1639   		vz1_stat_cnt=10;
0016b4  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.5816|
;;;1640   		}
;;;1641   	vz1_stat_cnt--;
0016b8  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
0016bc  f1a00001          SUB      r0,r0,#1
0016c0  b200              SXTH     r0,r0
0016c2  f8a80078          STRH     r0,[r8,#0x78]
;;;1642   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0016c6  280a              CMP      r0,#0xa
0016c8  d001              BEQ      |L1.5838|
0016ca  2809              CMP      r0,#9
0016cc  d109              BNE      |L1.5858|
                  |L1.5838|
;;;1643   		{
;;;1644   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0016ce  f2af2374          ADR      r3,|L1.5212|
0016d2  f2af2260          ADR      r2,|L1.5236|
0016d6  f2af214c          ADR      r1,|L1.5260|
0016da  a0a2              ADR      r0,|L1.6500|
0016dc  9700              STR      r7,[sp,#0]
0016de  f7fffffe          BL       show_mess
                  |L1.5858|
;;;1645   					"    ЗАБЛОКИРОВАН    ",
;;;1646   					"     НЕИСПРАВНА     ",
;;;1647   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1648   					5000);
;;;1649   		}
;;;1650   	if(sk_stat[0]==1)
0016e2  7828              LDRB     r0,[r5,#0]  ; sk_stat
0016e4  2801              CMP      r0,#1
0016e6  d105              BNE      |L1.5876|
;;;1651   		{
;;;1652   		vz1_stat=vz1sWRK;
0016e8  f8884005          STRB     r4,[r8,#5]
;;;1653   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0016ec  210a              MOVS     r1,#0xa
0016ee  4658              MOV      r0,r11
0016f0  f7fffffe          BL       lc640_write
                  |L1.5876|
;;;1654   		}
;;;1655   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0016f4  2314              MOVS     r3,#0x14
0016f6  2200              MOVS     r2,#0
0016f8  2164              MOVS     r1,#0x64
0016fa  20d2              MOVS     r0,#0xd2
0016fc  f7fffffe          BL       mess_send
                  |L1.5888|
;;;1656   	}
;;;1657   
;;;1658   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
001700  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001704  280d              CMP      r0,#0xd
001706  d129              BNE      |L1.5980|
;;;1659   	{
;;;1660   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001708  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00170c  280d              CMP      r0,#0xd
00170e  d102              BNE      |L1.5910|
001710  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001714  b908              CBNZ     r0,|L1.5914|
                  |L1.5910|
;;;1661   		{
;;;1662   		vz1_stat_cnt=10;
001716  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.5914|
;;;1663   		}
;;;1664   	vz1_stat_cnt--;
00171a  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
00171e  f1a00001          SUB      r0,r0,#1
001722  b200              SXTH     r0,r0
001724  f8a80078          STRH     r0,[r8,#0x78]
;;;1665   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001728  280a              CMP      r0,#0xa
00172a  d001              BEQ      |L1.5936|
00172c  2809              CMP      r0,#9
00172e  d106              BNE      |L1.5950|
                  |L1.5936|
;;;1666   		{
;;;1667   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001730  a392              ADR      r3,|L1.6524|
001732  a298              ADR      r2,|L1.6548|
001734  a19d              ADR      r1,|L1.6572|
001736  a08b              ADR      r0,|L1.6500|
001738  9700              STR      r7,[sp,#0]
00173a  f7fffffe          BL       show_mess
                  |L1.5950|
;;;1668   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1669   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1670   					"*   ТУМБЛЕРА!!!     ",
;;;1671   					5000);
;;;1672   		}
;;;1673   	if(sk_stat[1]==1)
00173e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001740  2801              CMP      r0,#1
001742  d105              BNE      |L1.5968|
;;;1674   		{
;;;1675   		vz1_stat=vz1sWRK;
001744  f8884005          STRB     r4,[r8,#5]
;;;1676   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001748  210a              MOVS     r1,#0xa
00174a  4658              MOV      r0,r11
00174c  f7fffffe          BL       lc640_write
                  |L1.5968|
;;;1677   		}
;;;1678   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001750  2314              MOVS     r3,#0x14
001752  2200              MOVS     r2,#0
001754  2164              MOVS     r1,#0x64
001756  20d2              MOVS     r0,#0xd2
001758  f7fffffe          BL       mess_send
                  |L1.5980|
;;;1679   	}
;;;1680   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
00175c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001760  280e              CMP      r0,#0xe
001762  d12a              BNE      |L1.6074|
;;;1681   	{
;;;1682   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001764  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001768  280e              CMP      r0,#0xe
00176a  d102              BNE      |L1.6002|
00176c  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001770  b908              CBNZ     r0,|L1.6006|
                  |L1.6002|
;;;1683   		{
;;;1684   		vz1_stat_cnt=10;
001772  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6006|
;;;1685   		}
;;;1686   	vz1_stat_cnt--;
001776  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
00177a  f1a00001          SUB      r0,r0,#1
00177e  b200              SXTH     r0,r0
001780  f8a80078          STRH     r0,[r8,#0x78]
;;;1687   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001784  280a              CMP      r0,#0xa
001786  d001              BEQ      |L1.6028|
001788  2809              CMP      r0,#9
00178a  d106              BNE      |L1.6042|
                  |L1.6028|
;;;1688   		{
;;;1689   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
00178c  a349              ADR      r3,|L1.6324|
00178e  a24f              ADR      r2,|L1.6348|
001790  a154              ADR      r1,|L1.6372|
001792  a08c              ADR      r0,|L1.6596|
001794  9700              STR      r7,[sp,#0]
001796  f7fffffe          BL       show_mess
                  |L1.6042|
;;;1690   					"      ТУМБЛЕР       ",
;;;1691   					"     ВЫСОКОГО       ",
;;;1692   					"    НАПРЯЖЕНИЯ      ",
;;;1693   					5000);
;;;1694   		}
;;;1695   	if(sk_stat[1]==0)
00179a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179c  b938              CBNZ     r0,|L1.6062|
;;;1696   		{
;;;1697   		vz1_stat=vz1sOFF;
00179e  f8886005          STRB     r6,[r8,#5]
;;;1698   		lc640_write(EE_VZ1_STAT,vz1sOFF);
0017a2  2100              MOVS     r1,#0
0017a4  4658              MOV      r0,r11
0017a6  f7fffffe          BL       lc640_write
;;;1699   		vz_stop();
0017aa  f7fffffe          BL       vz_stop
                  |L1.6062|
;;;1700   
;;;1701   		}
;;;1702   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0017ae  2314              MOVS     r3,#0x14
0017b0  2201              MOVS     r2,#1
0017b2  2164              MOVS     r1,#0x64
0017b4  20d2              MOVS     r0,#0xd2
0017b6  f7fffffe          BL       mess_send
                  |L1.6074|
;;;1703   	}
;;;1704   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0017ba  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1705   	{
;;;1706   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1707   		{
;;;1708   		vz1_stat_cnt=10;
;;;1709   		}
;;;1710   	vz1_stat_cnt--;
;;;1711   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1712   		{
;;;1713   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0017be  f64037b8          MOV      r7,#0xbb8
0017c2  280f              CMP      r0,#0xf               ;1704
0017c4  d135              BNE      |L1.6194|
0017c6  f8980006          LDRB     r0,[r8,#6]            ;1706  ; vz1_stat_old
0017ca  280f              CMP      r0,#0xf               ;1706
0017cc  d102              BNE      |L1.6100|
0017ce  f8b80078          LDRH     r0,[r8,#0x78]         ;1706  ; vz1_stat_cnt
0017d2  b908              CBNZ     r0,|L1.6104|
                  |L1.6100|
0017d4  f8a84078          STRH     r4,[r8,#0x78]         ;1708
                  |L1.6104|
0017d8  f8b80078          LDRH     r0,[r8,#0x78]         ;1710  ; vz1_stat_cnt
0017dc  f1a00001          SUB      r0,r0,#1              ;1710
0017e0  b200              SXTH     r0,r0                 ;1710
0017e2  f8a80078          STRH     r0,[r8,#0x78]         ;1710
0017e6  280a              CMP      r0,#0xa               ;1711
0017e8  d001              BEQ      |L1.6126|
0017ea  2809              CMP      r0,#9                 ;1711
0017ec  d106              BNE      |L1.6140|
                  |L1.6126|
0017ee  a37b              ADR      r3,|L1.6620|
0017f0  a280              ADR      r2,|L1.6644|
0017f2  a186              ADR      r1,|L1.6668|
0017f4  a08b              ADR      r0,|L1.6692|
0017f6  9700              STR      r7,[sp,#0]
0017f8  f7fffffe          BL       show_mess
                  |L1.6140|
;;;1714   					"       ЗАРЯД        ",
;;;1715   					"      УСПЕШНО       ",
;;;1716   					"     ЗАВЕРШЕН       ",
;;;1717   					3000);
;;;1718   		}
;;;1719   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0017fc  f9b80078          LDRSH    r0,[r8,#0x78]  ; vz1_stat_cnt
001800  2806              CMP      r0,#6
001802  d001              BEQ      |L1.6152|
001804  2805              CMP      r0,#5
001806  d106              BNE      |L1.6166|
                  |L1.6152|
;;;1720   		{
;;;1721   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001808  a32a              ADR      r3,|L1.6324|
00180a  a230              ADR      r2,|L1.6348|
00180c  a135              ADR      r1,|L1.6372|
00180e  a08b              ADR      r0,|L1.6716|
001810  9700              STR      r7,[sp,#0]
001812  f7fffffe          BL       show_mess
                  |L1.6166|
;;;1722   					"      ТУМБЛЕР       ",
;;;1723   					"     ВЫСОКОГО       ",
;;;1724   					"    НАПРЯЖЕНИЯ      ",
;;;1725   					3000);
;;;1726   		}
;;;1727   	if(sk_stat[1]==0)
001816  7868              LDRB     r0,[r5,#1]  ; sk_stat
001818  b928              CBNZ     r0,|L1.6182|
;;;1728   		{
;;;1729   		vz1_stat=vz1sOFF;
00181a  f8886005          STRB     r6,[r8,#5]
;;;1730   		lc640_write(EE_VZ1_STAT,vz1sOFF);
00181e  2100              MOVS     r1,#0
001820  4658              MOV      r0,r11
001822  f7fffffe          BL       lc640_write
                  |L1.6182|
;;;1731   		}
;;;1732   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001826  2314              MOVS     r3,#0x14
001828  2200              MOVS     r2,#0
00182a  2164              MOVS     r1,#0x64
00182c  20d2              MOVS     r0,#0xd2
00182e  f7fffffe          BL       mess_send
                  |L1.6194|
;;;1733   	}
;;;1734   
;;;1735   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001832  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001836  2810              CMP      r0,#0x10
001838  d135              BNE      |L1.6310|
;;;1736   	{
;;;1737   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00183a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00183e  2810              CMP      r0,#0x10
001840  d102              BNE      |L1.6216|
001842  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001846  b908              CBNZ     r0,|L1.6220|
                  |L1.6216|
;;;1738   		{
;;;1739   		vz1_stat_cnt=10;
001848  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6220|
;;;1740   		}
;;;1741   	vz1_stat_cnt--;
00184c  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001850  f1a00001          SUB      r0,r0,#1
001854  b200              SXTH     r0,r0
001856  f8a80078          STRH     r0,[r8,#0x78]
;;;1742   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00185a  280a              CMP      r0,#0xa
00185c  d001              BEQ      |L1.6242|
00185e  2809              CMP      r0,#9
001860  d106              BNE      |L1.6256|
                  |L1.6242|
;;;1743   		{
;;;1744   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001862  a37c              ADR      r3,|L1.6740|
001864  a281              ADR      r2,|L1.6764|
001866  a169              ADR      r1,|L1.6668|
001868  a06e              ADR      r0,|L1.6692|
00186a  9700              STR      r7,[sp,#0]
00186c  f7fffffe          BL       show_mess
                  |L1.6256|
;;;1745   					"       ЗАРЯД        ",
;;;1746   					"     ПРЕКРАЩЕН      ",
;;;1747   					"                    ",
;;;1748   					3000);
;;;1749   		}
;;;1750   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001870  f9b80078          LDRSH    r0,[r8,#0x78]  ; vz1_stat_cnt
001874  2806              CMP      r0,#6
001876  d001              BEQ      |L1.6268|
001878  2805              CMP      r0,#5
00187a  d106              BNE      |L1.6282|
                  |L1.6268|
;;;1751   		{
;;;1752   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00187c  a30d              ADR      r3,|L1.6324|
00187e  a213              ADR      r2,|L1.6348|
001880  a118              ADR      r1,|L1.6372|
001882  a06e              ADR      r0,|L1.6716|
001884  9700              STR      r7,[sp,#0]
001886  f7fffffe          BL       show_mess
                  |L1.6282|
;;;1753   					"      ТУМБЛЕР       ",
;;;1754   					"     ВЫСОКОГО       ",
;;;1755   					"    НАПРЯЖЕНИЯ      ",
;;;1756   					3000);
;;;1757   		}
;;;1758   	if(sk_stat[1]==0)
00188a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00188c  b928              CBNZ     r0,|L1.6298|
;;;1759   		{
;;;1760   		vz1_stat=vz1sOFF;
00188e  f8886005          STRB     r6,[r8,#5]
;;;1761   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001892  2100              MOVS     r1,#0
001894  4658              MOV      r0,r11
001896  f7fffffe          BL       lc640_write
                  |L1.6298|
;;;1762   		}
;;;1763   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00189a  2314              MOVS     r3,#0x14
00189c  2200              MOVS     r2,#0
00189e  2164              MOVS     r1,#0x64
0018a0  20d2              MOVS     r0,#0xd2
0018a2  f7fffffe          BL       mess_send
                  |L1.6310|
;;;1764   	}
;;;1765   
;;;1766   vz1_stat_old=vz1_stat;
0018a6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018aa  f8880006          STRB     r0,[r8,#6]
;;;1767   
;;;1768   
;;;1769   
;;;1770   }
0018ae  e8bd8ff8          POP      {r3-r11,pc}
0018b2  0000              DCW      0x0000
                  |L1.6324|
0018b4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0018b8  cdc0cfd0
0018bc  dfc6c5cd
0018c0  c8df2020
0018c4  20202020
0018c8  00      
0018c9  00                DCB      0
0018ca  00                DCB      0
0018cb  00                DCB      0
                  |L1.6348|
0018cc  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
0018d0  20c2dbd1
0018d4  cecacec3
0018d8  ce202020
0018dc  20202020
0018e0  00      
0018e1  00                DCB      0
0018e2  00                DCB      0
0018e3  00                DCB      0
                  |L1.6372|
0018e4  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
0018e8  2020d2d3
0018ec  ccc1cbc5
0018f0  d0202020
0018f4  20202020
0018f8  00      
0018f9  00                DCB      0
0018fa  00                DCB      0
0018fb  00                DCB      0
                  |L1.6396|
0018fc  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001900  20c2cacb
001904  ded7c8d2
001908  c5202020
00190c  20202020
001910  00      
001911  00                DCB      0
001912  00                DCB      0
001913  00                DCB      0
                  |L1.6420|
                          DCD      ||area_number.25||+0x80
                  |L1.6424|
                          DCD      UZ_T
                  |L1.6428|
00191c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001920  c720c2c5
001924  cdd2c8cb
001928  dfd6c8  
00192b  c8212120          DCB      200,"!!  ",0
00192f  2000    
001931  00                DCB      0
001932  00                DCB      0
001933  00                DCB      0
                  |L1.6452|
001934  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001938  2020c2ca
00193c  cbded7c5
001940  cd202020
001944  20202020
001948  00      
001949  00                DCB      0
00194a  00                DCB      0
00194b  00                DCB      0
                  |L1.6476|
00194c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001950  c520ccce
001954  c6c5d220
001958  c1dbd2dc
00195c  20202020          DCB      "    ",0
001960  00      
001961  00                DCB      0
001962  00                DCB      0
001963  00                DCB      0
                  |L1.6500|
001964  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001968  cdc8d2c5
00196c  cbdccddb
001970  c920c7  
001973  c0d0dfc4          DCB      192,208,223,196," ",0
001977  2000    
001979  00                DCB      0
00197a  00                DCB      0
00197b  00                DCB      0
                  |L1.6524|
00197c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001980  d2d3ccc1
001984  cbc5d0c0
001988  21212120
00198c  20202020
001990  00      
001991  00                DCB      0
001992  00                DCB      0
001993  00                DCB      0
                  |L1.6548|
001994  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001998  d1cbc520
00199c  c2cacbde
0019a0  d7c5cd  
0019a3  c8df2020          DCB      200,223,"   ",0
0019a7  2000    
0019a9  00                DCB      0
0019aa  00                DCB      0
0019ab  00                DCB      0
                  |L1.6572|
0019ac  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
0019b0  c4c5d220
0019b4  cfd0cec4
0019b8  cecbc6  
0019bb  c5cd2020          DCB      197,205,"   ",0
0019bf  2000    
0019c1  00                DCB      0
0019c2  00                DCB      0
0019c3  00                DCB      0
                  |L1.6596|
0019c4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
0019c8  20c2dbca
0019cc  cbded7c8
0019d0  d2c52020
0019d4  20202020
0019d8  00      
0019d9  00                DCB      0
0019da  00                DCB      0
0019db  00                DCB      0
                  |L1.6620|
0019dc  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
0019e0  20c7c0c2
0019e4  c5d0d8c5
0019e8  cd202020
0019ec  20202020
0019f0  00      
0019f1  00                DCB      0
0019f2  00                DCB      0
0019f3  00                DCB      0
                  |L1.6644|
0019f4  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
0019f8  2020d3d1
0019fc  cfc5d8cd
001a00  ce202020
001a04  20202020
001a08  00      
001a09  00                DCB      0
001a0a  00                DCB      0
001a0b  00                DCB      0
                  |L1.6668|
001a0c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001a10  202020c7
001a14  c0d0dfc4
001a18  20202020
001a1c  20202020
001a20  00      
001a21  00                DCB      0
001a22  00                DCB      0
001a23  00                DCB      0
                  |L1.6692|
001a24  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001a28  d0c0c2cd
001a2c  c8d2c5cb
001a30  dccddbc9
001a34  20202020          DCB      "    ",0
001a38  00      
001a39  00                DCB      0
001a3a  00                DCB      0
001a3b  00                DCB      0
                  |L1.6716|
001a3c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001a40  20c2dbca
001a44  cbded7c8
001a48  d2c52020
001a4c  20202020
001a50  00      
001a51  00                DCB      0
001a52  00                DCB      0
001a53  00                DCB      0
                  |L1.6740|
001a54  20202020          DCB      "                    ",0
001a58  20202020
001a5c  20202020
001a60  20202020
001a64  20202020
001a68  00      
001a69  00                DCB      0
001a6a  00                DCB      0
001a6b  00                DCB      0
                  |L1.6764|
001a6c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001a70  20cfd0c5
001a74  cad0c0d9
001a78  c5cd2020
001a7c  20202020
001a80  00      
001a81  00                DCB      0
001a82  00                DCB      0
001a83  00                DCB      0
                          ENDP

                  vz1_start PROC
;;;1773   //старт уравнительног заряда
;;;1774   char vz1_start(char hour)
001a84  b510              PUSH     {r4,lr}
;;;1775   {          
;;;1776   char out;
;;;1777   out=0;
001a86  f04f0000          MOV      r0,#0
;;;1778   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001a8a  49f8              LDR      r1,|L1.7788|
001a8c  f8912022          LDRB     r2,[r1,#0x22]  ; spc_stat
001a90  2a00              CMP      r2,#0
001a92  d110              BNE      |L1.6838|
001a94  4af6              LDR      r2,|L1.7792|
001a96  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001a98  2a01              CMP      r2,#1
001a9a  d00c              BEQ      |L1.6838|
001a9c  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001a9e  2a00              CMP      r2,#0
001aa0  d109              BNE      |L1.6838|
;;;1779   	{
;;;1780   	if(vz1_stat==vz1sOFF)
;;;1781   		{
;;;1782   		vz1_stat=vz1sSTEP1;
001aa2  f04f0001          MOV      r0,#1
001aa6  7148              STRB     r0,[r1,#5]
;;;1783   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001aa8  4601              MOV      r1,r0
001aaa  f44f70c9          MOV      r0,#0x192
001aae  f7fffffe          BL       lc640_write
;;;1784   		out=1;
001ab2  f04f0001          MOV      r0,#1
                  |L1.6838|
;;;1785   		
;;;1786   		}
;;;1787   /*	spc_stat=spcVZ;
;;;1788   	__ee_spc_stat=spcVZ; 
;;;1789   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1790   	vz_cnt_h=hour;
;;;1791   	__ee_vz_cnt=hour*60;
;;;1792   	if(hour==0)__ee_vz_cnt=30;
;;;1793   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1794   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1795   	vz_cnt_h_=0;
;;;1796   	vz_cnt_s=0;
;;;1797   	vz_cnt_s_=0;
;;;1798   	
;;;1799   		*/
;;;1800   	}
;;;1801   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1802   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1803   //plazma=out;	
;;;1804   return out;
;;;1805   }
001ab6  bd10              POP      {r4,pc}
;;;1806   
                          ENDP

                  vz1_stop PROC
;;;1808   //стоп уравнительног заряда
;;;1809   void vz1_stop(void)
001ab8  48ec              LDR      r0,|L1.7788|
;;;1810   {
;;;1811   if(vz1_stat!=vz1sOFF)
001aba  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001abc  2900              CMP      r1,#0
001abe  d006              BEQ      |L1.6862|
;;;1812   	{
;;;1813   	vz1_stat=vz1sSTOP;
001ac0  f04f0110          MOV      r1,#0x10
001ac4  7141              STRB     r1,[r0,#5]
;;;1814   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001ac6  f44f70c9          MOV      r0,#0x192
001aca  f7ffbffe          B.W      lc640_write
                  |L1.6862|
;;;1815   	}
;;;1816   }
001ace  4770              BX       lr
;;;1817   
                          ENDP

                  vz2_drv PROC
;;;1819   //драйвер формовочного заряда
;;;1820   void vz2_drv(void)
001ad0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1821   {
;;;1822   
;;;1823   if(vz2_stat==vz2sSTEP1)
001ad4  4ee5              LDR      r6,|L1.7788|
;;;1824   	{
;;;1825   	if(vz2_stat_old!=vz2_stat)
;;;1826   		{
;;;1827   		vz2_stat_cnt=5;
;;;1828   		}
;;;1829   	if(vz2_stat_cnt)
;;;1830   		{
;;;1831   		vz2_stat_cnt--;
;;;1832   		if(vz2_stat_cnt==0)
;;;1833   			{
;;;1834   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1835   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1836   			}
;;;1837   		}
;;;1838   	if(sk_stat[0]==1)
001ad6  4de7              LDR      r5,|L1.7796|
001ad8  79f0              LDRB     r0,[r6,#7]            ;1823  ; vz2_stat
001ada  2801              CMP      r0,#1                 ;1823
001adc  d138              BNE      |L1.6992|
001ade  7a30              LDRB     r0,[r6,#8]            ;1825  ; vz2_stat_old
001ae0  2801              CMP      r0,#1                 ;1825
001ae2  d003              BEQ      |L1.6892|
001ae4  f04f0005          MOV      r0,#5                 ;1827
001ae8  f8a6007c          STRH     r0,[r6,#0x7c]         ;1827
                  |L1.6892|
001aec  f9b6007c          LDRSH    r0,[r6,#0x7c]         ;1829  ; vz2_stat_cnt
001af0  b168              CBZ      r0,|L1.6926|
001af2  f1a00001          SUB      r0,r0,#1              ;1831
001af6  b200              SXTH     r0,r0                 ;1831
001af8  f8a6007c          STRH     r0,[r6,#0x7c]         ;1831
001afc  b938              CBNZ     r0,|L1.6926|
001afe  f04f000c          MOV      r0,#0xc               ;1834
001b02  71f0              STRB     r0,[r6,#7]            ;1834
001b04  4601              MOV      r1,r0                 ;1835
001b06  f44f70ca          MOV      r0,#0x194             ;1835
001b0a  f7fffffe          BL       lc640_write
                  |L1.6926|
001b0e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b10  2801              CMP      r0,#1
001b12  d117              BNE      |L1.6980|
;;;1839   		{
;;;1840   		vz2_stat=vz2sSTEP2;
001b14  f04f0002          MOV      r0,#2
001b18  71f0              STRB     r0,[r6,#7]
;;;1841   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b1a  4601              MOV      r1,r0
001b1c  f44f70ca          MOV      r0,#0x194
001b20  f7fffffe          BL       lc640_write
;;;1842   		tree_up(iVZ2_STEP2_2,1,0,0);
001b24  2300              MOVS     r3,#0
001b26  461a              MOV      r2,r3
001b28  2101              MOVS     r1,#1
001b2a  20e0              MOVS     r0,#0xe0
001b2c  f7fffffe          BL       tree_up
;;;1843   		tree_up(iVZ2_STEP2_1,0,0,0);
001b30  2300              MOVS     r3,#0
001b32  461a              MOV      r2,r3
001b34  4619              MOV      r1,r3
001b36  20df              MOVS     r0,#0xdf
001b38  f7fffffe          BL       tree_up
;;;1844   		ret(1200);
001b3c  f44f6096          MOV      r0,#0x4b0
001b40  f7fffffe          BL       ||ret||
                  |L1.6980|
;;;1845   		}
;;;1846   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b44  2314              MOVS     r3,#0x14
001b46  2200              MOVS     r2,#0
001b48  2164              MOVS     r1,#0x64
001b4a  20d2              MOVS     r0,#0xd2
001b4c  f7fffffe          BL       mess_send
                  |L1.6992|
;;;1847   	}
;;;1848   
;;;1849   if(vz2_stat==vz2sSTEP2)
001b50  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001b52  2802              CMP      r0,#2
001b54  d119              BNE      |L1.7050|
;;;1850   	{
;;;1851   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b56  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001b58  2802              CMP      r0,#2
001b5a  d102              BNE      |L1.7010|
001b5c  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001b60  b918              CBNZ     r0,|L1.7018|
                  |L1.7010|
;;;1852   		{
;;;1853   		vz2_stat_cnt=15;
001b62  f04f000f          MOV      r0,#0xf
001b66  f8a6007c          STRH     r0,[r6,#0x7c]
                  |L1.7018|
;;;1854   		}
;;;1855   	vz2_stat_cnt--;
001b6a  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001b6e  f1a00001          SUB      r0,r0,#1
001b72  f8a6007c          STRH     r0,[r6,#0x7c]
;;;1856   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b76  f04f0314          MOV      r3,#0x14
001b7a  f04f0200          MOV      r2,#0
001b7e  f04f0164          MOV      r1,#0x64
001b82  f04f00d2          MOV      r0,#0xd2
001b86  f7fffffe          BL       mess_send
                  |L1.7050|
;;;1857   	}
;;;1858   
;;;1859   if(vz2_stat==vz2sSTEP3)
001b8a  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1860   	{
;;;1861   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1862   		{
;;;1863   		vz2_stat_cnt=10;
001b8c  240a              MOVS     r4,#0xa
001b8e  2700              MOVS     r7,#0
;;;1864   		cntrl_stat=0;
;;;1865   		cntrl_stat_new=0;
;;;1866   		cntrl_stat_old=0;
;;;1867   		}
;;;1868   	vz2_stat_cnt--;
;;;1869   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1870   		{
;;;1871   		show_mess(	"     ВКЛЮЧИТЕ       ",
001b90  f2413888          MOV      r8,#0x1388
001b94  2803              CMP      r0,#3                 ;1859
001b96  d139              BNE      |L1.7180|
001b98  7a30              LDRB     r0,[r6,#8]            ;1861  ; vz2_stat_old
001b9a  2803              CMP      r0,#3                 ;1861
001b9c  d102              BNE      |L1.7076|
001b9e  f8b6007c          LDRH     r0,[r6,#0x7c]         ;1861  ; vz2_stat_cnt
001ba2  b928              CBNZ     r0,|L1.7088|
                  |L1.7076|
001ba4  f8a6407c          STRH     r4,[r6,#0x7c]         ;1863
001ba8  8637              STRH     r7,[r6,#0x30]         ;1864
001baa  f8a67046          STRH     r7,[r6,#0x46]         ;1865
001bae  8677              STRH     r7,[r6,#0x32]         ;1866
                  |L1.7088|
001bb0  f8b6007c          LDRH     r0,[r6,#0x7c]         ;1868  ; vz2_stat_cnt
001bb4  f1a00001          SUB      r0,r0,#1              ;1868
001bb8  b200              SXTH     r0,r0                 ;1868
001bba  f8a6007c          STRH     r0,[r6,#0x7c]         ;1868
001bbe  280a              CMP      r0,#0xa               ;1869
001bc0  d001              BEQ      |L1.7110|
001bc2  2809              CMP      r0,#9                 ;1869
001bc4  d10b              BNE      |L1.7134|
                  |L1.7110|
001bc6  f2af3314          ADR      r3,|L1.6324|
001bca  f2af3200          ADR      r2,|L1.6348|
001bce  f2af21ec          ADR      r1,|L1.6372|
001bd2  f2af20d8          ADR      r0,|L1.6396|
001bd6  f8cd8000          STR      r8,[sp,#0]
001bda  f7fffffe          BL       show_mess
                  |L1.7134|
;;;1872   					"      ТУМБЛЕР       ",
;;;1873   					"     ВЫСОКОГО       ",
;;;1874   					"    НАПРЯЖЕНИЯ      ",
;;;1875   					5000);
;;;1876   		}
;;;1877   	if(sk_stat[1]==1)
001bde  7868              LDRB     r0,[r5,#1]  ; sk_stat
001be0  2801              CMP      r0,#1
001be2  d10d              BNE      |L1.7168|
;;;1878   		{
;;;1879   		vz2_stat=vz2sWRK1;
001be4  71f4              STRB     r4,[r6,#7]
;;;1880   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001be6  210a              MOVS     r1,#0xa
001be8  f44f70ca          MOV      r0,#0x194
001bec  f7fffffe          BL       lc640_write
;;;1881   		volt_region=1;
001bf0  f04f0001          MOV      r0,#1
001bf4  f886002e          STRB     r0,[r6,#0x2e]
;;;1882   		cntrl_stat=0;
001bf8  8637              STRH     r7,[r6,#0x30]
;;;1883   		cntrl_stat_new=0;
001bfa  f8a67046          STRH     r7,[r6,#0x46]
;;;1884   		cntrl_stat_old=0;
001bfe  8677              STRH     r7,[r6,#0x32]
                  |L1.7168|
;;;1885   		}
;;;1886   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001c00  2314              MOVS     r3,#0x14
001c02  2200              MOVS     r2,#0
001c04  2164              MOVS     r1,#0x64
001c06  20d2              MOVS     r0,#0xd2
001c08  f7fffffe          BL       mess_send
                  |L1.7180|
;;;1887   	}
;;;1888   
;;;1889   if(vz2_stat==vz2sWRK1)
001c0c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1890   	{
;;;1891   
;;;1892   	if(vz2_stat_old!=vz2_stat)
;;;1893   		{
;;;1894   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001c0e  f8df925c          LDR      r9,|L1.7788|
;;;1895   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1896   		vz2_up_cnt=0L;
;;;1897   
;;;1898   		}
;;;1899   	vz2_wrk_cnt--;
;;;1900   	vz2_up_cnt++;
;;;1901   
;;;1902   	if(vz2_wrk_cnt==0)
;;;1903   		{
;;;1904   		vz2_stat=vz2sWRK2;
;;;1905   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1906   		}
;;;1907   	if(sk_stat[0]==0)
;;;1908   		{
;;;1909   		vz2_stat=vz2sERR2;
;;;1910   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1911   		}
;;;1912   	if(sk_stat[1]==0)
;;;1913   		{
;;;1914   		vz2_stat=vz2sERR3;
;;;1915   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1916   		}
;;;1917   	//if(abs(out_U-FZ_U1)<10)
;;;1918   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1919   		{
;;;1920   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1921   			{
;;;1922   			if(vz2_stat_ph2_cnt)
;;;1923   				{
;;;1924   				vz2_stat_ph2_cnt--;
;;;1925   				if(vz2_stat_ph2_cnt==0)
;;;1926   					{
;;;1927   					vz2_stat=vz2sWRK2;
;;;1928   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1929   					}
;;;1930   				}
;;;1931   			}
;;;1932   		else
;;;1933   			{
;;;1934   			vz2_stat_ph2_cnt=60;
;;;1935   			}
;;;1936   		}
;;;1937   	else
;;;1938   		{
;;;1939   		vz2_stat_ph2_cnt=60;
;;;1940   		}
;;;1941   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1942   		{
;;;1943   		volt_region=0;
;;;1944   		cntrl_stat=1000;
001c12  f44f7b7a          MOV      r11,#0x3e8
001c16  f1090980          ADD      r9,r9,#0x80           ;1894
001c1a  f04f0a0b          MOV      r10,#0xb              ;1904
001c1e  280a              CMP      r0,#0xa               ;1889
001c20  d17d              BNE      |L1.7454|
001c22  7a30              LDRB     r0,[r6,#8]            ;1892  ; vz2_stat_old
001c24  280a              CMP      r0,#0xa               ;1892
001c26  d00a              BEQ      |L1.7230|
001c28  4893              LDR      r0,|L1.7800|
001c2a  f44f6161          MOV      r1,#0xe10             ;1894
001c2e  f9b00000          LDRSH    r0,[r0,#0]            ;1894  ; FZ_T1
001c32  fb00f001          MUL      r0,r0,r1              ;1894
001c36  f8c90044          STR      r0,[r9,#0x44]         ;1894  ; vz2_wrk_cnt
001c3a  f8c97048          STR      r7,[r9,#0x48]         ;1896  ; vz2_up_cnt
                  |L1.7230|
001c3e  f8d90044          LDR      r0,[r9,#0x44]         ;1899  ; vz2_wrk_cnt
001c42  f1a00001          SUB      r0,r0,#1              ;1899
001c46  f8c90044          STR      r0,[r9,#0x44]         ;1899  ; vz2_wrk_cnt
001c4a  f8d91048          LDR      r1,[r9,#0x48]         ;1900  ; vz2_up_cnt
001c4e  f1010101          ADD      r1,r1,#1              ;1900
001c52  f8c91048          STR      r1,[r9,#0x48]         ;1900  ; vz2_up_cnt
001c56  b930              CBNZ     r0,|L1.7270|
001c58  f886a007          STRB     r10,[r6,#7]           ;1904
001c5c  210b              MOVS     r1,#0xb               ;1905
001c5e  f44f70ca          MOV      r0,#0x194             ;1905
001c62  f7fffffe          BL       lc640_write
                  |L1.7270|
001c66  7828              LDRB     r0,[r5,#0]            ;1907  ; sk_stat
001c68  b938              CBNZ     r0,|L1.7290|
001c6a  f04f000d          MOV      r0,#0xd               ;1909
001c6e  71f0              STRB     r0,[r6,#7]            ;1909
001c70  4601              MOV      r1,r0                 ;1910
001c72  f44f70ca          MOV      r0,#0x194             ;1910
001c76  f7fffffe          BL       lc640_write
                  |L1.7290|
001c7a  7868              LDRB     r0,[r5,#1]            ;1912  ; sk_stat
001c7c  b938              CBNZ     r0,|L1.7310|
001c7e  f04f000e          MOV      r0,#0xe               ;1914
001c82  71f0              STRB     r0,[r6,#7]            ;1914
001c84  4601              MOV      r1,r0                 ;1915
001c86  f44f70ca          MOV      r0,#0x194             ;1915
001c8a  f7fffffe          BL       lc640_write
                  |L1.7310|
001c8e  487b              LDR      r0,|L1.7804|
001c90  223c              MOVS     r2,#0x3c              ;1934
001c92  f9b01000          LDRSH    r1,[r0,#0]            ;1918  ; out_U
001c96  487a              LDR      r0,|L1.7808|
001c98  f9b00000          LDRSH    r0,[r0,#0]            ;1918  ; FZ_U1
001c9c  f100031e          ADD      r3,r0,#0x1e           ;1918
001ca0  4299              CMP      r1,r3                 ;1918
001ca2  da20              BGE      |L1.7398|
001ca4  380a              SUBS     r0,r0,#0xa            ;1918
001ca6  4281              CMP      r1,r0                 ;1918
001ca8  dd1d              BLE      |L1.7398|
001caa  4876              LDR      r0,|L1.7812|
001cac  4976              LDR      r1,|L1.7816|
001cae  f9b00000          LDRSH    r0,[r0,#0]            ;1920  ; Ib_ips_termokompensat
001cb2  f9b11000          LDRSH    r1,[r1,#0]            ;1920  ; FZ_ISW12
001cb6  fb90f0f4          SDIV     r0,r0,r4              ;1920
001cba  4288              CMP      r0,r1                 ;1920
001cbc  da10              BGE      |L1.7392|
001cbe  f9b6007e          LDRSH    r0,[r6,#0x7e]         ;1922  ; vz2_stat_ph2_cnt
001cc2  b190              CBZ      r0,|L1.7402|
001cc4  f1a00001          SUB      r0,r0,#1              ;1924
001cc8  b200              SXTH     r0,r0                 ;1924
001cca  f8a6007e          STRH     r0,[r6,#0x7e]         ;1924
001cce  b960              CBNZ     r0,|L1.7402|
001cd0  f886a007          STRB     r10,[r6,#7]           ;1927
001cd4  210b              MOVS     r1,#0xb               ;1928
001cd6  f44f70ca          MOV      r0,#0x194             ;1928
001cda  f7fffffe          BL       lc640_write
001cde  e004              B        |L1.7402|
                  |L1.7392|
001ce0  f8a6207e          STRH     r2,[r6,#0x7e]         ;1934
001ce4  e001              B        |L1.7402|
                  |L1.7398|
001ce6  f8a6207e          STRH     r2,[r6,#0x7e]         ;1939
                  |L1.7402|
001cea  f9b60048          LDRSH    r0,[r6,#0x48]         ;1941  ; Ibmax
001cee  f8b6104a          LDRH     r1,[r6,#0x4a]         ;1941  ; IZMAX_
001cf2  fb90f0f4          SDIV     r0,r0,r4              ;1941
001cf6  4288              CMP      r0,r1                 ;1941
001cf8  dd18              BLE      |L1.7468|
001cfa  f9b62030          LDRSH    r2,[r6,#0x30]         ;1941  ; cntrl_stat
001cfe  2a14              CMP      r2,#0x14              ;1941
001d00  dc14              BGT      |L1.7468|
001d02  f896202e          LDRB     r2,[r6,#0x2e]         ;1941  ; volt_region
001d06  2a01              CMP      r2,#1                 ;1941
001d08  d110              BNE      |L1.7468|
001d0a  f8b6207a          LDRH     r2,[r6,#0x7a]         ;1941  ; volt_region_cnt
001d0e  b96a              CBNZ     r2,|L1.7468|
001d10  f886702e          STRB     r7,[r6,#0x2e]         ;1943
001d14  f8a6b030          STRH     r11,[r6,#0x30]
;;;1945   		cntrl_stat_new=1000;
001d18  f8a6b046          STRH     r11,[r6,#0x46]
;;;1946   		cntrl_stat_old=1000;
001d1c  e000              B        |L1.7456|
                  |L1.7454|
001d1e  e02e              B        |L1.7550|
                  |L1.7456|
001d20  f8a6b032          STRH     r11,[r6,#0x32]
;;;1947   		volt_region_cnt=110;
001d24  f04f026e          MOV      r2,#0x6e
001d28  f8a6207a          STRH     r2,[r6,#0x7a]
                  |L1.7468|
;;;1948   		}
;;;1949   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001d2c  4288              CMP      r0,r1
001d2e  da13              BGE      |L1.7512|
001d30  f9b60030          LDRSH    r0,[r6,#0x30]  ; cntrl_stat
001d34  4558              CMP      r0,r11
001d36  db0f              BLT      |L1.7512|
001d38  f896002e          LDRB     r0,[r6,#0x2e]  ; volt_region
001d3c  b960              CBNZ     r0,|L1.7512|
001d3e  f8b6007a          LDRH     r0,[r6,#0x7a]  ; volt_region_cnt
001d42  b948              CBNZ     r0,|L1.7512|
;;;1950   		{
;;;1951   		volt_region=1;
001d44  f04f0001          MOV      r0,#1
001d48  f886002e          STRB     r0,[r6,#0x2e]
;;;1952   		cntrl_stat=10;
001d4c  8634              STRH     r4,[r6,#0x30]
;;;1953   		cntrl_stat_new=10;
001d4e  f8a64046          STRH     r4,[r6,#0x46]
;;;1954   		cntrl_stat_old=10;
001d52  8674              STRH     r4,[r6,#0x32]
;;;1955   		volt_region_cnt=10;
001d54  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.7512|
;;;1956   		}
;;;1957   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d58  f896002e          LDRB     r0,[r6,#0x2e]  ; volt_region
001d5c  b110              CBZ      r0,|L1.7524|
;;;1958   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001d5e  2801              CMP      r0,#1
001d60  d007              BEQ      |L1.7538|
001d62  e00c              B        |L1.7550|
                  |L1.7524|
001d64  2314              MOVS     r3,#0x14              ;1957
001d66  2200              MOVS     r2,#0                 ;1957
001d68  2164              MOVS     r1,#0x64              ;1957
001d6a  20d2              MOVS     r0,#0xd2              ;1957
001d6c  f7fffffe          BL       mess_send
001d70  e005              B        |L1.7550|
                  |L1.7538|
001d72  2314              MOVS     r3,#0x14
001d74  2201              MOVS     r2,#1
001d76  2164              MOVS     r1,#0x64
001d78  20d2              MOVS     r0,#0xd2
001d7a  f7fffffe          BL       mess_send
                  |L1.7550|
;;;1959   	}
;;;1960   
;;;1961   if(vz2_stat==vz2sWRK2)
001d7e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001d80  280b              CMP      r0,#0xb
001d82  d171              BNE      |L1.7784|
;;;1962   	{
;;;1963   	if(vz2_stat_old!=vz2_stat)
001d84  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001d86  280b              CMP      r0,#0xb
001d88  d008              BEQ      |L1.7580|
;;;1964   		{
;;;1965   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001d8a  4840              LDR      r0,|L1.7820|
001d8c  f44f6161          MOV      r1,#0xe10
001d90  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001d94  fb00f001          MUL      r0,r0,r1
001d98  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
                  |L1.7580|
;;;1966   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1967   		//vz2_up_cnt=0L;
;;;1968   		}
;;;1969   	vz2_wrk_cnt--;
001d9c  f8d90044          LDR      r0,[r9,#0x44]  ; vz2_wrk_cnt
001da0  f1a00001          SUB      r0,r0,#1
001da4  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
;;;1970   	vz2_up_cnt++;
001da8  f8d91048          LDR      r1,[r9,#0x48]  ; vz2_up_cnt
001dac  f1010101          ADD      r1,r1,#1
001db0  f8c91048          STR      r1,[r9,#0x48]  ; vz2_up_cnt
;;;1971   
;;;1972   	if(vz2_wrk_cnt==0)
001db4  b950              CBNZ     r0,|L1.7628|
;;;1973   		{
;;;1974   		vz2_stat=vz2sFINE;
001db6  f04f0012          MOV      r0,#0x12
001dba  71f0              STRB     r0,[r6,#7]
;;;1975   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001dbc  4601              MOV      r1,r0
001dbe  f44f70ca          MOV      r0,#0x194
001dc2  f7fffffe          BL       lc640_write
;;;1976   		fz_mem_hndl(0);
001dc6  2000              MOVS     r0,#0
001dc8  f7fffffe          BL       fz_mem_hndl
                  |L1.7628|
;;;1977   		}
;;;1978   	if(sk_stat[0]==0)
001dcc  7828              LDRB     r0,[r5,#0]  ; sk_stat
001dce  b938              CBNZ     r0,|L1.7648|
;;;1979   		{
;;;1980   		vz2_stat=vz2sERR5;
001dd0  f04f0010          MOV      r0,#0x10
001dd4  71f0              STRB     r0,[r6,#7]
;;;1981   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001dd6  4601              MOV      r1,r0
001dd8  f44f70ca          MOV      r0,#0x194
001ddc  f7fffffe          BL       lc640_write
                  |L1.7648|
;;;1982   		}
;;;1983   	if(sk_stat[1]==0)
001de0  7868              LDRB     r0,[r5,#1]  ; sk_stat
001de2  b938              CBNZ     r0,|L1.7668|
;;;1984   		{
;;;1985   		vz2_stat=vz2sERR6;
001de4  f04f0011          MOV      r0,#0x11
001de8  71f0              STRB     r0,[r6,#7]
;;;1986   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001dea  4601              MOV      r1,r0
001dec  f44f70ca          MOV      r0,#0x194
001df0  f7fffffe          BL       lc640_write
                  |L1.7668|
;;;1987   		}
;;;1988   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001df4  f9b60048          LDRSH    r0,[r6,#0x48]  ; Ibmax
001df8  f8b6104a          LDRH     r1,[r6,#0x4a]  ; IZMAX_
001dfc  fb90f0f4          SDIV     r0,r0,r4
001e00  4288              CMP      r0,r1
001e02  dd16              BLE      |L1.7730|
001e04  f9b62030          LDRSH    r2,[r6,#0x30]  ; cntrl_stat
001e08  2a14              CMP      r2,#0x14
001e0a  dc12              BGT      |L1.7730|
001e0c  f896202e          LDRB     r2,[r6,#0x2e]  ; volt_region
001e10  2a01              CMP      r2,#1
001e12  d10e              BNE      |L1.7730|
001e14  f8b6207a          LDRH     r2,[r6,#0x7a]  ; volt_region_cnt
001e18  b95a              CBNZ     r2,|L1.7730|
;;;1989   		{
;;;1990   		volt_region=0;
001e1a  f886702e          STRB     r7,[r6,#0x2e]
;;;1991   		cntrl_stat=1000;
001e1e  f8a6b030          STRH     r11,[r6,#0x30]
;;;1992   		cntrl_stat_new=1000;
001e22  f8a6b046          STRH     r11,[r6,#0x46]
;;;1993   		cntrl_stat_old=1000;
001e26  f8a6b032          STRH     r11,[r6,#0x32]
;;;1994   		volt_region_cnt=110;
001e2a  f04f026e          MOV      r2,#0x6e
001e2e  f8a6207a          STRH     r2,[r6,#0x7a]
                  |L1.7730|
;;;1995   		}
;;;1996   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001e32  4288              CMP      r0,r1
001e34  da13              BGE      |L1.7774|
001e36  f9b60030          LDRSH    r0,[r6,#0x30]  ; cntrl_stat
001e3a  4558              CMP      r0,r11
001e3c  db0f              BLT      |L1.7774|
001e3e  f896002e          LDRB     r0,[r6,#0x2e]  ; volt_region
001e42  b960              CBNZ     r0,|L1.7774|
001e44  f8b6007a          LDRH     r0,[r6,#0x7a]  ; volt_region_cnt
001e48  b948              CBNZ     r0,|L1.7774|
;;;1997   		{
;;;1998   		volt_region=1;
001e4a  f04f0001          MOV      r0,#1
001e4e  f886002e          STRB     r0,[r6,#0x2e]
;;;1999   		cntrl_stat=10;
001e52  8634              STRH     r4,[r6,#0x30]
;;;2000   		cntrl_stat_new=10;
001e54  f8a64046          STRH     r4,[r6,#0x46]
;;;2001   		cntrl_stat_old=10;
001e58  8674              STRH     r4,[r6,#0x32]
;;;2002   		volt_region_cnt=10;
001e5a  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.7774|
;;;2003   		}
;;;2004   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001e5e  f896002e          LDRB     r0,[r6,#0x2e]  ; volt_region
001e62  b1a8              CBZ      r0,|L1.7824|
;;;2005   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001e64  2801              CMP      r0,#1
001e66  d01a              BEQ      |L1.7838|
                  |L1.7784|
001e68  e01f              B        |L1.7850|
001e6a  0000              DCW      0x0000
                  |L1.7788|
                          DCD      ||area_number.25||
                  |L1.7792|
                          DCD      speedChrgBlckStat
                  |L1.7796|
                          DCD      sk_stat
                  |L1.7800|
                          DCD      FZ_T1
                  |L1.7804|
                          DCD      out_U
                  |L1.7808|
                          DCD      FZ_U1
                  |L1.7812|
                          DCD      Ib_ips_termokompensat
                  |L1.7816|
                          DCD      FZ_ISW12
                  |L1.7820|
                          DCD      FZ_T2
                  |L1.7824|
001e90  2314              MOVS     r3,#0x14              ;2004
001e92  2200              MOVS     r2,#0                 ;2004
001e94  2164              MOVS     r1,#0x64              ;2004
001e96  20d2              MOVS     r0,#0xd2              ;2004
001e98  f7fffffe          BL       mess_send
001e9c  e005              B        |L1.7850|
                  |L1.7838|
001e9e  2314              MOVS     r3,#0x14
001ea0  2201              MOVS     r2,#1
001ea2  2164              MOVS     r1,#0x64
001ea4  20d2              MOVS     r0,#0xd2
001ea6  f7fffffe          BL       mess_send
                  |L1.7850|
;;;2006   	}
;;;2007   
;;;2008   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
001eaa  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001eac  280c              CMP      r0,#0xc
001eae  d123              BNE      |L1.7928|
;;;2009   	{
;;;2010   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001eb0  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001eb2  280c              CMP      r0,#0xc
001eb4  d102              BNE      |L1.7868|
001eb6  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001eba  b908              CBNZ     r0,|L1.7872|
                  |L1.7868|
;;;2011   		{
;;;2012   		vz2_stat_cnt=10;
001ebc  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.7872|
;;;2013   		}
;;;2014   	vz2_stat_cnt--;
001ec0  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001ec4  f1a00001          SUB      r0,r0,#1
001ec8  b200              SXTH     r0,r0
001eca  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2015   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001ece  280a              CMP      r0,#0xa
001ed0  d001              BEQ      |L1.7894|
001ed2  2809              CMP      r0,#9
001ed4  d10a              BNE      |L1.7916|
                  |L1.7894|
;;;2016   		{
;;;2017   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001ed6  f2af53bc          ADR      r3,|L1.6428|
001eda  f2af52a8          ADR      r2,|L1.6452|
001ede  f2af5194          ADR      r1,|L1.6476|
001ee2  a0ff              ADR      r0,|L1.8928|
001ee4  f8cd8000          STR      r8,[sp,#0]
001ee8  f7fffffe          BL       show_mess
                  |L1.7916|
;;;2018   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2019   					"      ВКЛЮЧЕН       ",
;;;2020   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2021   					5000);
;;;2022   		}
;;;2023   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001eec  2314              MOVS     r3,#0x14
001eee  2200              MOVS     r2,#0
001ef0  2164              MOVS     r1,#0x64
001ef2  20d2              MOVS     r0,#0xd2
001ef4  f7fffffe          BL       mess_send
                  |L1.7928|
;;;2024   	}
;;;2025   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
001ef8  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001efa  280d              CMP      r0,#0xd
001efc  d12c              BNE      |L1.8024|
;;;2026   	{
;;;2027   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001efe  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f00  280d              CMP      r0,#0xd
001f02  d102              BNE      |L1.7946|
001f04  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001f08  b908              CBNZ     r0,|L1.7950|
                  |L1.7946|
;;;2028   		{
;;;2029   		vz2_stat_cnt=10;
001f0a  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.7950|
;;;2030   		}
;;;2031   	vz2_stat_cnt--;
001f0e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001f12  f1a00001          SUB      r0,r0,#1
001f16  b200              SXTH     r0,r0
001f18  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2032   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f1c  280a              CMP      r0,#0xa
001f1e  d001              BEQ      |L1.7972|
001f20  2809              CMP      r0,#9
001f22  d10a              BNE      |L1.7994|
                  |L1.7972|
;;;2033   		{
;;;2034   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f24  f6af23cc          ADR      r3,|L1.5212|
001f28  f6af22b8          ADR      r2,|L1.5236|
001f2c  f6af21a4          ADR      r1,|L1.5260|
001f30  a0eb              ADR      r0,|L1.8928|
001f32  f8cd8000          STR      r8,[sp,#0]
001f36  f7fffffe          BL       show_mess
                  |L1.7994|
;;;2035   					"    ЗАБЛОКИРОВАН    ",
;;;2036   					"     НЕИСПРАВНА     ",
;;;2037   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2038   					5000);
;;;2039   		}
;;;2040   	if(sk_stat[0]==1)
001f3a  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f3c  2801              CMP      r0,#1
001f3e  d105              BNE      |L1.8012|
;;;2041   		{
;;;2042   		vz2_stat=vz2sWRK1;
001f40  71f4              STRB     r4,[r6,#7]
;;;2043   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001f42  210a              MOVS     r1,#0xa
001f44  f44f70ca          MOV      r0,#0x194
001f48  f7fffffe          BL       lc640_write
                  |L1.8012|
;;;2044   		}
;;;2045   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f4c  2314              MOVS     r3,#0x14
001f4e  2200              MOVS     r2,#0
001f50  2164              MOVS     r1,#0x64
001f52  20d2              MOVS     r0,#0xd2
001f54  f7fffffe          BL       mess_send
                  |L1.8024|
;;;2046   	}
;;;2047   
;;;2048   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
001f58  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001f5a  280e              CMP      r0,#0xe
001f5c  d12b              BNE      |L1.8118|
;;;2049   	{
;;;2050   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001f5e  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f60  280e              CMP      r0,#0xe
001f62  d102              BNE      |L1.8042|
001f64  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001f68  b908              CBNZ     r0,|L1.8046|
                  |L1.8042|
;;;2051   		{
;;;2052   		vz2_stat_cnt=10;
001f6a  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8046|
;;;2053   		}
;;;2054   	vz2_stat_cnt--;
001f6e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001f72  f1a00001          SUB      r0,r0,#1
001f76  b200              SXTH     r0,r0
001f78  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2055   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f7c  280a              CMP      r0,#0xa
001f7e  d001              BEQ      |L1.8068|
001f80  2809              CMP      r0,#9
001f82  d109              BNE      |L1.8088|
                  |L1.8068|
;;;2056   		{
;;;2057   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f84  a3dc              ADR      r3,|L1.8952|
001f86  f2af52f4          ADR      r2,|L1.6548|
001f8a  f2af51e0          ADR      r1,|L1.6572|
001f8e  a0d4              ADR      r0,|L1.8928|
001f90  f8cd8000          STR      r8,[sp,#0]
001f94  f7fffffe          BL       show_mess
                  |L1.8088|
;;;2058   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2059   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2060   					"    ТУМБЛЕРА!!!     ",
;;;2061   					5000);
;;;2062   		}
;;;2063   	if(sk_stat[1]==1)
001f98  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f9a  2801              CMP      r0,#1
001f9c  d105              BNE      |L1.8106|
;;;2064   		{
;;;2065   		vz2_stat=vz2sWRK1;
001f9e  71f4              STRB     r4,[r6,#7]
;;;2066   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001fa0  210a              MOVS     r1,#0xa
001fa2  f44f70ca          MOV      r0,#0x194
001fa6  f7fffffe          BL       lc640_write
                  |L1.8106|
;;;2067   		}
;;;2068   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001faa  2314              MOVS     r3,#0x14
001fac  2200              MOVS     r2,#0
001fae  2164              MOVS     r1,#0x64
001fb0  20d2              MOVS     r0,#0xd2
001fb2  f7fffffe          BL       mess_send
                  |L1.8118|
;;;2069   	}
;;;2070   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
001fb6  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001fb8  2810              CMP      r0,#0x10
001fba  d12d              BNE      |L1.8216|
;;;2071   	{
;;;2072   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001fbc  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001fbe  2810              CMP      r0,#0x10
001fc0  d102              BNE      |L1.8136|
001fc2  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001fc6  b908              CBNZ     r0,|L1.8140|
                  |L1.8136|
;;;2073   		{
;;;2074   		vz2_stat_cnt=10;
001fc8  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8140|
;;;2075   		}
;;;2076   	vz2_stat_cnt--;
001fcc  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001fd0  f1a00001          SUB      r0,r0,#1
001fd4  b200              SXTH     r0,r0
001fd6  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2077   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001fda  280a              CMP      r0,#0xa
001fdc  d001              BEQ      |L1.8162|
001fde  2809              CMP      r0,#9
001fe0  d10a              BNE      |L1.8184|
                  |L1.8162|
;;;2078   		{
;;;2079   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001fe2  f6af3388          ADR      r3,|L1.5212|
001fe6  f6af3274          ADR      r2,|L1.5236|
001fea  f6af3160          ADR      r1,|L1.5260|
001fee  a0bc              ADR      r0,|L1.8928|
001ff0  f8cd8000          STR      r8,[sp,#0]
001ff4  f7fffffe          BL       show_mess
                  |L1.8184|
;;;2080   					"    ЗАБЛОКИРОВАН    ",
;;;2081   					"     НЕИСПРАВНА     ",
;;;2082   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2083   					5000);
;;;2084   		}
;;;2085   	if(sk_stat[0]==1)
001ff8  7828              LDRB     r0,[r5,#0]  ; sk_stat
001ffa  2801              CMP      r0,#1
001ffc  d106              BNE      |L1.8204|
;;;2086   		{
;;;2087   		vz2_stat=vz2sWRK2;
001ffe  f886a007          STRB     r10,[r6,#7]
;;;2088   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002002  210b              MOVS     r1,#0xb
002004  f44f70ca          MOV      r0,#0x194
002008  f7fffffe          BL       lc640_write
                  |L1.8204|
;;;2089   		}
;;;2090   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00200c  2314              MOVS     r3,#0x14
00200e  2200              MOVS     r2,#0
002010  2164              MOVS     r1,#0x64
002012  20d2              MOVS     r0,#0xd2
002014  f7fffffe          BL       mess_send
                  |L1.8216|
;;;2091   	}
;;;2092   
;;;2093   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
002018  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00201a  2811              CMP      r0,#0x11
00201c  d12c              BNE      |L1.8312|
;;;2094   	{
;;;2095   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00201e  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002020  2811              CMP      r0,#0x11
002022  d102              BNE      |L1.8234|
002024  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002028  b908              CBNZ     r0,|L1.8238|
                  |L1.8234|
;;;2096   		{
;;;2097   		vz2_stat_cnt=10;
00202a  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8238|
;;;2098   		}
;;;2099   	vz2_stat_cnt--;
00202e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002032  f1a00001          SUB      r0,r0,#1
002036  b200              SXTH     r0,r0
002038  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2100   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00203c  280a              CMP      r0,#0xa
00203e  d001              BEQ      |L1.8260|
002040  2809              CMP      r0,#9
002042  d109              BNE      |L1.8280|
                  |L1.8260|
;;;2101   		{
;;;2102   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002044  a3ac              ADR      r3,|L1.8952|
002046  f2af62b4          ADR      r2,|L1.6548|
00204a  f2af61a0          ADR      r1,|L1.6572|
00204e  a0a4              ADR      r0,|L1.8928|
002050  f8cd8000          STR      r8,[sp,#0]
002054  f7fffffe          BL       show_mess
                  |L1.8280|
;;;2103   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2104   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2105   					"    ТУМБЛЕРА!!!     ",
;;;2106   					5000);
;;;2107   		}
;;;2108   	if(sk_stat[1]==1)
002058  7868              LDRB     r0,[r5,#1]  ; sk_stat
00205a  2801              CMP      r0,#1
00205c  d106              BNE      |L1.8300|
;;;2109   		{
;;;2110   		vz2_stat=vz2sWRK2;
00205e  f886a007          STRB     r10,[r6,#7]
;;;2111   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002062  210b              MOVS     r1,#0xb
002064  f44f70ca          MOV      r0,#0x194
002068  f7fffffe          BL       lc640_write
                  |L1.8300|
;;;2112   		}
;;;2113   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00206c  2314              MOVS     r3,#0x14
00206e  2200              MOVS     r2,#0
002070  2164              MOVS     r1,#0x64
002072  20d2              MOVS     r0,#0xd2
002074  f7fffffe          BL       mess_send
                  |L1.8312|
;;;2114   	}
;;;2115   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
002078  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00207a  280f              CMP      r0,#0xf
00207c  d12e              BNE      |L1.8412|
;;;2116   	{
;;;2117   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00207e  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002080  280f              CMP      r0,#0xf
002082  d102              BNE      |L1.8330|
002084  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002088  b908              CBNZ     r0,|L1.8334|
                  |L1.8330|
;;;2118   		{
;;;2119   		vz2_stat_cnt=10;
00208a  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8334|
;;;2120   		}
;;;2121   	vz2_stat_cnt--;
00208e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002092  f1a00001          SUB      r0,r0,#1
002096  b200              SXTH     r0,r0
002098  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2122   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00209c  280a              CMP      r0,#0xa
00209e  d001              BEQ      |L1.8356|
0020a0  2809              CMP      r0,#9
0020a2  d10b              BNE      |L1.8380|
                  |L1.8356|
;;;2123   		{
;;;2124   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0020a4  f2af73f4          ADR      r3,|L1.6324|
0020a8  f2af72e0          ADR      r2,|L1.6348|
0020ac  f2af71cc          ADR      r1,|L1.6372|
0020b0  f2af6078          ADR      r0,|L1.6716|
0020b4  f8cd8000          STR      r8,[sp,#0]
0020b8  f7fffffe          BL       show_mess
                  |L1.8380|
;;;2125   					"      ТУМБЛЕР       ",
;;;2126   					"     ВЫСОКОГО       ",
;;;2127   					"    НАПРЯЖЕНИЯ      ",
;;;2128   					5000);
;;;2129   		}
;;;2130   	if(sk_stat[1]==0)
0020bc  7868              LDRB     r0,[r5,#1]  ; sk_stat
0020be  b938              CBNZ     r0,|L1.8400|
;;;2131   		{
;;;2132   		vz2_stat=vz2sOFF;
0020c0  71f7              STRB     r7,[r6,#7]
;;;2133   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0020c2  2100              MOVS     r1,#0
0020c4  f44f70ca          MOV      r0,#0x194
0020c8  f7fffffe          BL       lc640_write
;;;2134   		vz_stop();
0020cc  f7fffffe          BL       vz_stop
                  |L1.8400|
;;;2135   
;;;2136   		}
;;;2137   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020d0  2314              MOVS     r3,#0x14
0020d2  2200              MOVS     r2,#0
0020d4  2164              MOVS     r1,#0x64
0020d6  20d2              MOVS     r0,#0xd2
0020d8  f7fffffe          BL       mess_send
                  |L1.8412|
;;;2138   	}
;;;2139   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
0020dc  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;2140   	{
;;;2141   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2142   		{
;;;2143   		vz2_stat_cnt=10;
;;;2144   		}
;;;2145   	vz2_stat_cnt--;
;;;2146   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2147   		{
;;;2148   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0020de  f64038b8          MOV      r8,#0xbb8
0020e2  2812              CMP      r0,#0x12              ;2139
0020e4  d13d              BNE      |L1.8546|
0020e6  7a30              LDRB     r0,[r6,#8]            ;2141  ; vz2_stat_old
0020e8  2812              CMP      r0,#0x12              ;2141
0020ea  d102              BNE      |L1.8434|
0020ec  f8b6007c          LDRH     r0,[r6,#0x7c]         ;2141  ; vz2_stat_cnt
0020f0  b908              CBNZ     r0,|L1.8438|
                  |L1.8434|
0020f2  f8a6407c          STRH     r4,[r6,#0x7c]         ;2143
                  |L1.8438|
0020f6  f8b6007c          LDRH     r0,[r6,#0x7c]         ;2145  ; vz2_stat_cnt
0020fa  f1a00001          SUB      r0,r0,#1              ;2145
0020fe  b200              SXTH     r0,r0                 ;2145
002100  f8a6007c          STRH     r0,[r6,#0x7c]         ;2145
002104  280a              CMP      r0,#0xa               ;2146
002106  d001              BEQ      |L1.8460|
002108  2809              CMP      r0,#9                 ;2146
00210a  d10a              BNE      |L1.8482|
                  |L1.8460|
00210c  f2af7334          ADR      r3,|L1.6620|
002110  f2af7220          ADR      r2,|L1.6644|
002114  f2af710c          ADR      r1,|L1.6668|
002118  a07d              ADR      r0,|L1.8976|
00211a  f8cd8000          STR      r8,[sp,#0]
00211e  f7fffffe          BL       show_mess
                  |L1.8482|
;;;2149   					"       ЗАРЯД        ",
;;;2150   					"      УСПЕШНО       ",
;;;2151   					"     ЗАВЕРШЕН       ",
;;;2152   					3000);
;;;2153   		}
;;;2154   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002122  f9b6007c          LDRSH    r0,[r6,#0x7c]  ; vz2_stat_cnt
002126  2806              CMP      r0,#6
002128  d001              BEQ      |L1.8494|
00212a  2805              CMP      r0,#5
00212c  d10b              BNE      |L1.8518|
                  |L1.8494|
;;;2155   		{
;;;2156   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00212e  f6af037c          ADR      r3,|L1.6324|
002132  f6af0268          ADR      r2,|L1.6348|
002136  f6af0154          ADR      r1,|L1.6372|
00213a  f2af7000          ADR      r0,|L1.6716|
00213e  f8cd8000          STR      r8,[sp,#0]
002142  f7fffffe          BL       show_mess
                  |L1.8518|
;;;2157   					"      ТУМБЛЕР       ",
;;;2158   					"     ВЫСОКОГО       ",
;;;2159   					"    НАПРЯЖЕНИЯ      ",
;;;2160   					3000);
;;;2161   		}
;;;2162   	if(sk_stat[1]==0)
002146  7868              LDRB     r0,[r5,#1]  ; sk_stat
002148  b928              CBNZ     r0,|L1.8534|
;;;2163   		{
;;;2164   		vz2_stat=vz2sOFF;
00214a  71f7              STRB     r7,[r6,#7]
;;;2165   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00214c  2100              MOVS     r1,#0
00214e  f44f70ca          MOV      r0,#0x194
002152  f7fffffe          BL       lc640_write
                  |L1.8534|
;;;2166   		}
;;;2167   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002156  2314              MOVS     r3,#0x14
002158  2200              MOVS     r2,#0
00215a  2164              MOVS     r1,#0x64
00215c  20d2              MOVS     r0,#0xd2
00215e  f7fffffe          BL       mess_send
                  |L1.8546|
;;;2168   	}
;;;2169   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
002162  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002164  2813              CMP      r0,#0x13
002166  d13d              BNE      |L1.8676|
;;;2170   	{
;;;2171   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002168  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00216a  2813              CMP      r0,#0x13
00216c  d102              BNE      |L1.8564|
00216e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002172  b908              CBNZ     r0,|L1.8568|
                  |L1.8564|
;;;2172   		{
;;;2173   		vz2_stat_cnt=10;
002174  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8568|
;;;2174   		}
;;;2175   	vz2_stat_cnt--;
002178  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
00217c  f1a00001          SUB      r0,r0,#1
002180  b200              SXTH     r0,r0
002182  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2176   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002186  280a              CMP      r0,#0xa
002188  d001              BEQ      |L1.8590|
00218a  2809              CMP      r0,#9
00218c  d10a              BNE      |L1.8612|
                  |L1.8590|
;;;2177   		{
;;;2178   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
00218e  f2af733c          ADR      r3,|L1.6740|
002192  f2af7228          ADR      r2,|L1.6764|
002196  f2af718c          ADR      r1,|L1.6668|
00219a  a05d              ADR      r0,|L1.8976|
00219c  f8cd8000          STR      r8,[sp,#0]
0021a0  f7fffffe          BL       show_mess
                  |L1.8612|
;;;2179   					"       ЗАРЯД        ",
;;;2180   					"     ПРЕКРАЩЕН      ",
;;;2181   					"                    ",
;;;2182   					3000);
;;;2183   		}
;;;2184   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0021a4  f9b6007c          LDRSH    r0,[r6,#0x7c]  ; vz2_stat_cnt
0021a8  2806              CMP      r0,#6
0021aa  d001              BEQ      |L1.8624|
0021ac  2805              CMP      r0,#5
0021ae  d10b              BNE      |L1.8648|
                  |L1.8624|
;;;2185   		{
;;;2186   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0021b0  f6af1300          ADR      r3,|L1.6324|
0021b4  f6af02ec          ADR      r2,|L1.6348|
0021b8  f6af01d8          ADR      r1,|L1.6372|
0021bc  f2af7084          ADR      r0,|L1.6716|
0021c0  f8cd8000          STR      r8,[sp,#0]
0021c4  f7fffffe          BL       show_mess
                  |L1.8648|
;;;2187   					"      ТУМБЛЕР       ",
;;;2188   					"     ВЫСОКОГО       ",
;;;2189   					"    НАПРЯЖЕНИЯ      ",
;;;2190   					3000);
;;;2191   		}
;;;2192   	if(sk_stat[1]==0)
0021c8  7868              LDRB     r0,[r5,#1]  ; sk_stat
0021ca  b928              CBNZ     r0,|L1.8664|
;;;2193   		{
;;;2194   		vz2_stat=vz2sOFF;
0021cc  71f7              STRB     r7,[r6,#7]
;;;2195   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0021ce  2100              MOVS     r1,#0
0021d0  f44f70ca          MOV      r0,#0x194
0021d4  f7fffffe          BL       lc640_write
                  |L1.8664|
;;;2196   		}
;;;2197   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0021d8  2314              MOVS     r3,#0x14
0021da  2200              MOVS     r2,#0
0021dc  2164              MOVS     r1,#0x64
0021de  20d2              MOVS     r0,#0xd2
0021e0  f7fffffe          BL       mess_send
                  |L1.8676|
;;;2198   	}
;;;2199   vz2_stat_old=vz2_stat;
0021e4  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0021e6  7230              STRB     r0,[r6,#8]
;;;2200   
;;;2201   }
0021e8  e8bd8ff8          POP      {r3-r11,pc}
;;;2202   
                          ENDP

                  vz2_start PROC
;;;2204   //старт уравнительног заряда
;;;2205   char vz2_start(char hour)
0021ec  b510              PUSH     {r4,lr}
;;;2206   {          
;;;2207   char out;
;;;2208   out=0;
0021ee  f04f0000          MOV      r0,#0
;;;2209   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0021f2  494d              LDR      r1,|L1.9000|
0021f4  f8912022          LDRB     r2,[r1,#0x22]  ; spc_stat
0021f8  2a00              CMP      r2,#0
0021fa  d110              BNE      |L1.8734|
0021fc  4a4b              LDR      r2,|L1.9004|
0021fe  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
002200  2a01              CMP      r2,#1
002202  d00c              BEQ      |L1.8734|
002204  794a              LDRB     r2,[r1,#5]  ; vz1_stat
002206  2a00              CMP      r2,#0
002208  d109              BNE      |L1.8734|
;;;2210   	{
;;;2211   	if(vz1_stat==vz1sOFF)
;;;2212   		{
;;;2213   		vz2_stat=vz2sSTEP1;
00220a  f04f0001          MOV      r0,#1
00220e  71c8              STRB     r0,[r1,#7]
;;;2214   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
002210  4601              MOV      r1,r0
002212  f44f70ca          MOV      r0,#0x194
002216  f7fffffe          BL       lc640_write
;;;2215   		out=1;
00221a  f04f0001          MOV      r0,#1
                  |L1.8734|
;;;2216   		
;;;2217   		}
;;;2218   /*	spc_stat=spcVZ;
;;;2219   	__ee_spc_stat=spcVZ; 
;;;2220   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2221   	vz_cnt_h=hour;
;;;2222   	__ee_vz_cnt=hour*60;
;;;2223   	if(hour==0)__ee_vz_cnt=30;
;;;2224   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2225   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2226   	vz_cnt_h_=0;
;;;2227   	vz_cnt_s=0;
;;;2228   	vz_cnt_s_=0;
;;;2229   	
;;;2230   		*/
;;;2231   	}
;;;2232   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2233   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2234   //plazma=out;	
;;;2235   return out;
;;;2236   }
00221e  bd10              POP      {r4,pc}
;;;2237   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2238   //стоп формовочного заряда
;;;2239   void vz2_stop(void)
002220  4841              LDR      r0,|L1.9000|
;;;2240   {
;;;2241   if(vz2_stat!=vz2sOFF)
002222  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
002224  2900              CMP      r1,#0
002226  d006              BEQ      |L1.8758|
;;;2242   	{
;;;2243   	vz2_stat=vz2sSTOP;
002228  f04f0113          MOV      r1,#0x13
00222c  71c1              STRB     r1,[r0,#7]
;;;2244   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
00222e  f44f70ca          MOV      r0,#0x194
002232  f7ffbffe          B.W      lc640_write
                  |L1.8758|
;;;2245   	}
;;;2246   }
002236  4770              BX       lr
;;;2247   
                          ENDP

                  kb_init PROC
;;;2248   //-----------------------------------------------
;;;2249   void kb_init(void)
002238  483d              LDR      r0,|L1.9008|
;;;2250   {
;;;2251   main_kb_cnt=(TBAT*60)-60/*120*/;
00223a  f06f013b          MVN      r1,#0x3b
00223e  8800              LDRH     r0,[r0,#0]  ; TBAT
002240  ebc01000          RSB      r0,r0,r0,LSL #4
002244  eb010080          ADD      r0,r1,r0,LSL #2
002248  4937              LDR      r1,|L1.9000|
00224a  f8a10050          STRH     r0,[r1,#0x50]
;;;2252   }
00224e  4770              BX       lr
;;;2253   
                          ENDP

                  kb_hndl PROC
;;;2254   //-----------------------------------------------
;;;2255   void kb_hndl(void)
002250  e92d5ff0          PUSH     {r4-r12,lr}
;;;2256   {
;;;2257   
;;;2258   static signed short ibat[2],ibat_[2];
;;;2259   #ifdef UKU_TELECORE2015
;;;2260   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2261   #else 
;;;2262   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
002254  f8df80d0          LDR      r8,|L1.9000|
;;;2263   #endif
;;;2264   	{
;;;2265   	main_kb_cnt=0;
;;;2266   	
;;;2267   	kb_start[0]=0;
;;;2268   	kb_start[1]=0;
;;;2269   	kb_start_ips=0;
;;;2270   
;;;2271   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2272   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2273   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2274   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
002258  f8dfa0d8          LDR      r10,|L1.9012|
00225c  2500              MOVS     r5,#0                 ;2262
00225e  f8b80050          LDRH     r0,[r8,#0x50]         ;2262  ; main_kb_cnt
002262  4e35              LDR      r6,|L1.9016|
002264  1c40              ADDS     r0,r0,#1              ;2262
002266  b201              SXTH     r1,r0                 ;2262
002268  4831              LDR      r0,|L1.9008|
00226a  f8a81050          STRH     r1,[r8,#0x50]         ;2262
00226e  f8df90cc          LDR      r9,|L1.9020|
002272  f9b00000          LDRSH    r0,[r0,#0]            ;2262  ; TBAT
;;;2275   #endif	
;;;2276   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2277   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2278   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2279   #endif
;;;2280   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2281    
;;;2282   		{
;;;2283   		kb_start[0]=0;
;;;2284   		kb_start[1]=0;
;;;2285   		kb_start_ips=0;
;;;2286   		}
;;;2287   
;;;2288   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2289   		{
;;;2290   		kb_cnt_1lev=10;
002276  270a              MOVS     r7,#0xa
002278  ebc01200          RSB      r2,r0,r0,LSL #4       ;2262
00227c  f04f0b01          MOV      r11,#1                ;2271
002280  f1080456          ADD      r4,r8,#0x56           ;2267
002284  ebb10f82          CMP      r1,r2,LSL #2          ;2262
002288  db7e              BLT      |L1.9096|
00228a  2800              CMP      r0,#0                 ;2262
00228c  d07c              BEQ      |L1.9096|
00228e  f8a85050          STRH     r5,[r8,#0x50]         ;2265
002292  7025              STRB     r5,[r4,#0]            ;2267
002294  7065              STRB     r5,[r4,#1]            ;2268
002296  f888501c          STRB     r5,[r8,#0x1c]         ;2269
00229a  4829              LDR      r0,|L1.9024|
00229c  7800              LDRB     r0,[r0,#0]            ;2271  ; BAT_IS_ON
00229e  2855              CMP      r0,#0x55              ;2271
0022a0  d111              BNE      |L1.8902|
0022a2  f9b60002          LDRSH    r0,[r6,#2]            ;2271  ; bat
0022a6  2850              CMP      r0,#0x50              ;2271
0022a8  dd0d              BLE      |L1.8902|
0022aa  f9b60008          LDRSH    r0,[r6,#8]            ;2271  ; bat
0022ae  f7fffffe          BL       abs
0022b2  f9b91000          LDRSH    r1,[r9,#0]            ;2271  ; IKB
0022b6  4288              CMP      r0,r1                 ;2271
0022b8  db03              BLT      |L1.8898|
0022ba  f896003d          LDRB     r0,[r6,#0x3d]         ;2271  ; bat
0022be  07c0              LSLS     r0,r0,#31             ;2271
0022c0  d001              BEQ      |L1.8902|
                  |L1.8898|
0022c2  f884b000          STRB     r11,[r4,#0]           ;2271
                  |L1.8902|
0022c6  481e              LDR      r0,|L1.9024|
0022c8  7840              LDRB     r0,[r0,#1]            ;2272  ; BAT_IS_ON
0022ca  2855              CMP      r0,#0x55              ;2272
0022cc  d144              BNE      |L1.9048|
0022ce  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2272  ; bat
0022d2  2850              CMP      r0,#0x50              ;2272
0022d4  dd40              BLE      |L1.9048|
0022d6  f9b60054          LDRSH    r0,[r6,#0x54]         ;2272  ; bat
0022da  f7fffffe          BL       abs
0022de  e031              B        |L1.9028|
                  |L1.8928|
0022e0  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0022e4  cccec2ce
0022e8  d7cddbc9
0022ec  20c7c0  
0022ef  d0dfc420          DCB      208,223,196,"  ",0
0022f3  2000    
0022f5  00                DCB      0
0022f6  00                DCB      0
0022f7  00                DCB      0
                  |L1.8952|
0022f8  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
0022fc  d2d3ccc1
002300  cbc5d0c0
002304  21212120
002308  20202020
00230c  00      
00230d  00                DCB      0
00230e  00                DCB      0
00230f  00                DCB      0
                  |L1.8976|
002310  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
002314  d4ced0cc
002318  cec2ced7
00231c  cddbc920
002320  202020  
002323  2000              DCB      " ",0
002325  00                DCB      0
002326  00                DCB      0
002327  00                DCB      0
                  |L1.9000|
                          DCD      ||area_number.25||
                  |L1.9004|
                          DCD      speedChrgBlckStat
                  |L1.9008|
                          DCD      TBAT
                  |L1.9012|
                          DCD      Ib_ips_termokompensat
                  |L1.9016|
                          DCD      bat
                  |L1.9020|
                          DCD      IKB
                  |L1.9024|
                          DCD      BAT_IS_ON
                  |L1.9028|
002344  f9b91000          LDRSH    r1,[r9,#0]            ;2272  ; IKB
002348  4288              CMP      r0,r1                 ;2272
00234a  db03              BLT      |L1.9044|
00234c  f8960089          LDRB     r0,[r6,#0x89]         ;2272  ; bat
002350  07c0              LSLS     r0,r0,#31             ;2272
002352  d001              BEQ      |L1.9048|
                  |L1.9044|
002354  f884b001          STRB     r11,[r4,#1]           ;2272
                  |L1.9048|
002358  48ff              LDR      r0,|L1.10072|
00235a  7800              LDRB     r0,[r0,#0]            ;2274  ; ips_bat_av_vzvod
00235c  b970              CBNZ     r0,|L1.9084|
00235e  f9ba0000          LDRSH    r0,[r10,#0]           ;2274  ; Ib_ips_termokompensat
002362  f7fffffe          BL       abs
002366  f9b91000          LDRSH    r1,[r9,#0]            ;2274  ; IKB
00236a  4288              CMP      r0,r1                 ;2274
00236c  db04              BLT      |L1.9080|
00236e  48fb              LDR      r0,|L1.10076|
002370  f890003d          LDRB     r0,[r0,#0x3d]         ;2274  ; bat_ips
002374  07c0              LSLS     r0,r0,#31             ;2274
002376  d001              BEQ      |L1.9084|
                  |L1.9080|
002378  f888b01c          STRB     r11,[r8,#0x1c]        ;2274
                  |L1.9084|
00237c  48f8              LDR      r0,|L1.10080|
00237e  7800              LDRB     r0,[r0,#0]            ;2276  ; net_av
002380  b9a8              CBNZ     r0,|L1.9134|
002382  f898001d          LDRB     r0,[r8,#0x1d]         ;2276  ; num_of_wrks_bps
002386  e000              B        |L1.9098|
                  |L1.9096|
002388  e021              B        |L1.9166|
                  |L1.9098|
00238a  b180              CBZ      r0,|L1.9134|
00238c  f8980022          LDRB     r0,[r8,#0x22]         ;2276  ; spc_stat
002390  b108              CBZ      r0,|L1.9110|
002392  2802              CMP      r0,#2                 ;2276
002394  d10b              BNE      |L1.9134|
                  |L1.9110|
002396  f8980005          LDRB     r0,[r8,#5]            ;2278  ; vz1_stat
00239a  f8981007          LDRB     r1,[r8,#7]            ;2278  ; vz2_stat
00239e  4308              ORRS     r0,r0,r1              ;2278
0023a0  d002              BEQ      |L1.9128|
0023a2  48f0              LDR      r0,|L1.10084|
0023a4  8800              LDRH     r0,[r0,#0]            ;2278  ; SMART_SPC
0023a6  b910              CBNZ     r0,|L1.9134|
                  |L1.9128|
0023a8  48ef              LDR      r0,|L1.10088|
0023aa  7800              LDRB     r0,[r0,#0]            ;2280  ; sp_ch_stat
0023ac  b118              CBZ      r0,|L1.9142|
                  |L1.9134|
0023ae  7025              STRB     r5,[r4,#0]            ;2283
0023b0  7065              STRB     r5,[r4,#1]            ;2284
0023b2  f888501c          STRB     r5,[r8,#0x1c]         ;2285
                  |L1.9142|
0023b6  7820              LDRB     r0,[r4,#0]            ;2288  ; kb_start
0023b8  2801              CMP      r0,#1                 ;2288
0023ba  d01e              BEQ      |L1.9210|
0023bc  7860              LDRB     r0,[r4,#1]            ;2288  ; kb_start
0023be  2801              CMP      r0,#1                 ;2288
0023c0  d01b              BEQ      |L1.9210|
0023c2  f898001c          LDRB     r0,[r8,#0x1c]         ;2288  ; kb_start_ips
0023c6  2801              CMP      r0,#1                 ;2288
0023c8  d017              BEQ      |L1.9210|
;;;2291   		}
;;;2292   	else kb_cnt_1lev=0;
0023ca  f8a85052          STRH     r5,[r8,#0x52]
                  |L1.9166|
;;;2293   	}
;;;2294   
;;;2295   if(kb_cnt_1lev)
0023ce  4641              MOV      r1,r8
0023d0  f9b80052          LDRSH    r0,[r8,#0x52]  ; kb_cnt_1lev
;;;2296   	{
;;;2297   	kb_cnt_1lev--;
;;;2298   
;;;2299   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2300   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2301   
;;;2302   
;;;2303   	if(kb_cnt_1lev==5)
;;;2304   		{
;;;2305   		ibat[0]=abs(bat[0]._Ib);
0023d4  f8df8394          LDR      r8,|L1.10092|
0023d8  2800              CMP      r0,#0                 ;2295
0023da  d07e              BEQ      |L1.9434|
0023dc  f1a00001          SUB      r0,r0,#1              ;2297
0023e0  b200              SXTH     r0,r0                 ;2297
0023e2  468b              MOV      r11,r1                ;2297
0023e4  f8a10052          STRH     r0,[r1,#0x52]         ;2297
0023e8  2805              CMP      r0,#5                 ;2299
0023ea  dd09              BLE      |L1.9216|
0023ec  230f              MOVS     r3,#0xf               ;2299
0023ee  221e              MOVS     r2,#0x1e              ;2299
0023f0  2164              MOVS     r1,#0x64              ;2299
0023f2  20e1              MOVS     r0,#0xe1              ;2299
0023f4  f7fffffe          BL       mess_send
0023f8  e00a              B        |L1.9232|
                  |L1.9210|
0023fa  f8a87052          STRH     r7,[r8,#0x52]         ;2290
0023fe  e7e6              B        |L1.9166|
                  |L1.9216|
002400  2800              CMP      r0,#0                 ;2300
002402  dd05              BLE      |L1.9232|
002404  230f              MOVS     r3,#0xf               ;2300
002406  221e              MOVS     r2,#0x1e              ;2300
002408  2169              MOVS     r1,#0x69              ;2300
00240a  20e1              MOVS     r0,#0xe1              ;2300
00240c  f7fffffe          BL       mess_send
                  |L1.9232|
002410  f8bb0052          LDRH     r0,[r11,#0x52]        ;2303  ; kb_cnt_1lev
002414  2805              CMP      r0,#5                 ;2303
002416  d111              BNE      |L1.9276|
002418  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00241c  f7fffffe          BL       abs
002420  f8a80000          STRH     r0,[r8,#0]
;;;2306   		ibat[1]=abs(bat[1]._Ib);
002424  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
002428  f7fffffe          BL       abs
00242c  f8a80002          STRH     r0,[r8,#2]
;;;2307   		ibat_ips=abs(Ib_ips_termokompensat);
002430  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
002434  f7fffffe          BL       abs
002438  f8ab0058          STRH     r0,[r11,#0x58]
                  |L1.9276|
;;;2308   		}
;;;2309   	
;;;2310   	if(kb_cnt_1lev==0)
00243c  48cb              LDR      r0,|L1.10092|
00243e  3894              SUBS     r0,r0,#0x94
002440  f8b00052          LDRH     r0,[r0,#0x52]  ; kb_cnt_1lev
002444  2800              CMP      r0,#0
002446  d158              BNE      |L1.9466|
;;;2311   		{
;;;2312   		ibat_[0]=abs(bat[0]._Ib);
002448  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00244c  f7fffffe          BL       abs
002450  f8dfb318          LDR      r11,|L1.10092|
002454  f10b0b04          ADD      r11,r11,#4
002458  f8ab0000          STRH     r0,[r11,#0]
;;;2313   		ibat_[1]=abs(bat[1]._Ib);
00245c  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
002460  f7fffffe          BL       abs
002464  f8ab0002          STRH     r0,[r11,#2]
;;;2314   		ibat_ips_=abs(Ib_ips_termokompensat);
002468  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00246c  f7fffffe          BL       abs
002470  f1ab0a98          SUB      r10,r11,#0x98
002474  f8aa005a          STRH     r0,[r10,#0x5a]
;;;2315   
;;;2316   		kb_cnt_2lev=0;
002478  f8aa5054          STRH     r5,[r10,#0x54]
;;;2317   
;;;2318   
;;;2319   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
00247c  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
002480  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
002484  4408              ADD      r0,r0,r1
002486  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
00248a  4288              CMP      r0,r1
00248c  da02              BGE      |L1.9364|
00248e  7820              LDRB     r0,[r4,#0]  ; kb_start
002490  2801              CMP      r0,#1
002492  d034              BEQ      |L1.9470|
                  |L1.9364|
;;;2320   			{
;;;2321   			kb_cnt_2lev=10;  
;;;2322   			}
;;;2323   		else if(bat[0]._Ub>200)
002494  f9b60002          LDRSH    r0,[r6,#2]  ; bat
002498  28c8              CMP      r0,#0xc8
00249a  dd04              BLE      |L1.9382|
;;;2324   			{
;;;2325   			kb_start[0]=0;
00249c  7025              STRB     r5,[r4,#0]
;;;2326   			avar_bat_hndl(0,0);
00249e  2100              MOVS     r1,#0
0024a0  4608              MOV      r0,r1
0024a2  f7fffffe          BL       avar_bat_hndl
                  |L1.9382|
;;;2327   			}
;;;2328   		
;;;2329   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0024a6  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0024aa  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0024ae  4408              ADD      r0,r0,r1
0024b0  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0024b4  4288              CMP      r0,r1
0024b6  da02              BGE      |L1.9406|
0024b8  7860              LDRB     r0,[r4,#1]  ; kb_start
0024ba  2801              CMP      r0,#1
0024bc  d022              BEQ      |L1.9476|
                  |L1.9406|
;;;2330   			{
;;;2331   			kb_cnt_2lev=10;     
;;;2332   			}
;;;2333   		else  if(bat[1]._Ub>200)
0024be  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
0024c2  28c8              CMP      r0,#0xc8
0024c4  dd04              BLE      |L1.9424|
;;;2334   			{
;;;2335   			kb_start[1]=0;
0024c6  7065              STRB     r5,[r4,#1]
;;;2336   			avar_bat_hndl(1,0);
0024c8  2100              MOVS     r1,#0
0024ca  2001              MOVS     r0,#1
0024cc  f7fffffe          BL       avar_bat_hndl
                  |L1.9424|
;;;2337   			}
;;;2338   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2339   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
0024d0  f9ba0058          LDRSH    r0,[r10,#0x58]  ; ibat_ips
0024d4  f9ba105a          LDRSH    r1,[r10,#0x5a]  ; ibat_ips_
0024d8  e000              B        |L1.9436|
                  |L1.9434|
0024da  e01c              B        |L1.9494|
                  |L1.9436|
0024dc  4408              ADD      r0,r0,r1
0024de  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0024e2  4288              CMP      r0,r1
0024e4  da09              BGE      |L1.9466|
0024e6  f89a001c          LDRB     r0,[r10,#0x1c]  ; kb_start_ips
0024ea  2801              CMP      r0,#1
0024ec  d105              BNE      |L1.9466|
;;;2340   			{
;;;2341   			if(KB_ALGORITM==1)
0024ee  48a0              LDR      r0,|L1.10096|
0024f0  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
0024f2  2801              CMP      r0,#1
0024f4  d009              BEQ      |L1.9482|
;;;2342   				{
;;;2343   				avar_bat_ips_hndl(1);
;;;2344   				kb_start_ips=0;
;;;2345   				}
;;;2346   			else
;;;2347   				{
;;;2348   				kb_cnt_2lev=10;     
0024f6  f8aa7054          STRH     r7,[r10,#0x54]
                  |L1.9466|
;;;2349   				}
;;;2350   			}
;;;2351   #endif
;;;2352   		}	
;;;2353   
;;;2354   
;;;2355   	}
;;;2356   else if(kb_cnt_2lev)
;;;2357   	{
;;;2358   	kb_cnt_2lev--;
;;;2359   
;;;2360   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2361   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2362   
;;;2363   
;;;2364   	if(kb_cnt_2lev==5)
;;;2365   		{
;;;2366   		ibat[0]=abs(bat[0]._Ib);
;;;2367   		ibat[1]=abs(bat[1]._Ib);
;;;2368   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2369   		}
;;;2370   	
;;;2371   	if(kb_cnt_2lev==0)
;;;2372   		{
;;;2373   		ibat_[0]=abs(bat[0]._Ib);
;;;2374   		ibat_[1]=abs(bat[1]._Ib);
;;;2375   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2376   
;;;2377   		kb_full_ver=0;
;;;2378   
;;;2379   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2380   			{
;;;2381   			kb_full_ver=1;  
;;;2382   			}
;;;2383   		else if(bat[0]._Ub>200)			
;;;2384   			{
;;;2385   			kb_start[0]=0;
;;;2386   			avar_bat_hndl(0,0);
;;;2387   			}
;;;2388   
;;;2389   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2390   			{
;;;2391   			kb_full_ver=1;     
;;;2392   			}
;;;2393   		else	if(bat[1]._Ub>200)		
;;;2394   			{
;;;2395   			kb_start[1]=0;
;;;2396   			avar_bat_hndl(1,0);
;;;2397   			}
;;;2398   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2399   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2400   			{
;;;2401   			if(KB_ALGORITM==2)
;;;2402   				{
;;;2403   				avar_bat_ips_hndl(1);
;;;2404   				kb_start_ips=0;
;;;2405   				}
;;;2406   			else
;;;2407   				{
;;;2408   				kb_full_ver=1;     
;;;2409   				}
;;;2410   			}
;;;2411   #endif
;;;2412   		}	
;;;2413   	}
;;;2414   
;;;2415   else if(kb_full_ver)
;;;2416   	{
;;;2417   	
;;;2418   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2419   
;;;2420   	if( abs(bat[0]._Ib) > IKB ) 
;;;2421   		{
;;;2422   		if(kb_start[0]==1)
;;;2423   			{
;;;2424   			kb_start[0]=0;
;;;2425   			avar_bat_hndl(0,0);
;;;2426   			}
;;;2427   		}
;;;2428   
;;;2429   	if( abs(bat[1]._Ib) > IKB ) 
;;;2430   		{
;;;2431   		if(kb_start[1]==1)
;;;2432   			{
;;;2433   			kb_start[1]=0;
;;;2434   			avar_bat_hndl(1,0);
;;;2435   			}
;;;2436   		}
;;;2437   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2438   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2439   		{
;;;2440   		if(kb_start_ips==1)
;;;2441   			{
;;;2442   			kb_start_ips=0;
;;;2443   			avar_bat_ips_hndl(0);
;;;2444   			}
;;;2445   		}
;;;2446   #endif
;;;2447   
;;;2448   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2449   		{
;;;2450   		kb_full_ver=0;
;;;2451   		}
;;;2452   
;;;2453   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2454   		{
;;;2455   		kb_full_ver=0;
;;;2456   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2457   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2458   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2459   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2460   #endif
;;;2461   		}
;;;2462   	}
;;;2463   
;;;2464   }
0024fa  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9470|
0024fe  f8aa7054          STRH     r7,[r10,#0x54]        ;2321
002502  e7d0              B        |L1.9382|
                  |L1.9476|
002504  f8aa7054          STRH     r7,[r10,#0x54]        ;2331
002508  e7e2              B        |L1.9424|
                  |L1.9482|
00250a  2001              MOVS     r0,#1                 ;2343
00250c  f7fffffe          BL       avar_bat_ips_hndl
002510  f88a501c          STRB     r5,[r10,#0x1c]        ;2344
                  |L1.9492|
002514  e7f1              B        |L1.9466|
                  |L1.9494|
002516  f9b10054          LDRSH    r0,[r1,#0x54]         ;2356  ; kb_cnt_2lev
00251a  b3f0              CBZ      r0,|L1.9626|
00251c  f1a00001          SUB      r0,r0,#1              ;2358
002520  b200              SXTH     r0,r0                 ;2358
002522  460f              MOV      r7,r1                 ;2358
002524  f8a10054          STRH     r0,[r1,#0x54]         ;2358
002528  2805              CMP      r0,#5                 ;2360
00252a  dd06              BLE      |L1.9530|
00252c  230f              MOVS     r3,#0xf               ;2360
00252e  22c8              MOVS     r2,#0xc8              ;2360
002530  2164              MOVS     r1,#0x64              ;2360
002532  20e1              MOVS     r0,#0xe1              ;2360
002534  f7fffffe          BL       mess_send
002538  e007              B        |L1.9546|
                  |L1.9530|
00253a  2800              CMP      r0,#0                 ;2361
00253c  dd05              BLE      |L1.9546|
00253e  230f              MOVS     r3,#0xf               ;2361
002540  22c8              MOVS     r2,#0xc8              ;2361
002542  2169              MOVS     r1,#0x69              ;2361
002544  20e1              MOVS     r0,#0xe1              ;2361
002546  f7fffffe          BL       mess_send
                  |L1.9546|
00254a  f8b70054          LDRH     r0,[r7,#0x54]         ;2364  ; kb_cnt_2lev
00254e  2805              CMP      r0,#5                 ;2364
002550  d111              BNE      |L1.9590|
002552  f9b60008          LDRSH    r0,[r6,#8]            ;2366  ; bat
002556  f7fffffe          BL       abs
00255a  f8a80000          STRH     r0,[r8,#0]            ;2366
00255e  f9b60054          LDRSH    r0,[r6,#0x54]         ;2367  ; bat
002562  f7fffffe          BL       abs
002566  f8a80002          STRH     r0,[r8,#2]            ;2367
00256a  f9ba0000          LDRSH    r0,[r10,#0]           ;2368  ; Ib_ips_termokompensat
00256e  f7fffffe          BL       abs
002572  f8a70058          STRH     r0,[r7,#0x58]         ;2368
                  |L1.9590|
002576  487d              LDR      r0,|L1.10092|
002578  3894              SUBS     r0,r0,#0x94           ;2371
00257a  f8b00054          LDRH     r0,[r0,#0x54]         ;2371  ; kb_cnt_2lev
00257e  2800              CMP      r0,#0                 ;2371
                  |L1.9600|
002580  d1bb              BNE      |L1.9466|
002582  f9b60008          LDRSH    r0,[r6,#8]            ;2373  ; bat
002586  f7fffffe          BL       abs
00258a  4f78              LDR      r7,|L1.10092|
00258c  1d3f              ADDS     r7,r7,#4              ;2373
00258e  8038              STRH     r0,[r7,#0]            ;2373
002590  f9b60054          LDRSH    r0,[r6,#0x54]         ;2374  ; bat
002594  f7fffffe          BL       abs
002598  e000              B        |L1.9628|
                  |L1.9626|
00259a  e055              B        |L1.9800|
                  |L1.9628|
00259c  8078              STRH     r0,[r7,#2]            ;2374
00259e  f9ba0000          LDRSH    r0,[r10,#0]           ;2375  ; Ib_ips_termokompensat
0025a2  f7fffffe          BL       abs
0025a6  f1a70a98          SUB      r10,r7,#0x98          ;2375
0025aa  f8aa005a          STRH     r0,[r10,#0x5a]        ;2375
0025ae  f88a501b          STRB     r5,[r10,#0x1b]        ;2377
0025b2  f9b80000          LDRSH    r0,[r8,#0]            ;2379  ; ibat
0025b6  f9b71000          LDRSH    r1,[r7,#0]            ;2379  ; ibat_
0025ba  4408              ADD      r0,r0,r1              ;2379
0025bc  f9b91000          LDRSH    r1,[r9,#0]            ;2379  ; IKB
0025c0  4288              CMP      r0,r1                 ;2379
0025c2  da02              BGE      |L1.9674|
0025c4  7820              LDRB     r0,[r4,#0]            ;2379  ; kb_start
0025c6  2801              CMP      r0,#1                 ;2379
0025c8  d032              BEQ      |L1.9776|
                  |L1.9674|
0025ca  f9b60002          LDRSH    r0,[r6,#2]            ;2383  ; bat
0025ce  28c8              CMP      r0,#0xc8              ;2383
0025d0  dd04              BLE      |L1.9692|
0025d2  7025              STRB     r5,[r4,#0]            ;2385
0025d4  2100              MOVS     r1,#0                 ;2386
0025d6  4608              MOV      r0,r1                 ;2386
0025d8  f7fffffe          BL       avar_bat_hndl
                  |L1.9692|
0025dc  f9b80002          LDRSH    r0,[r8,#2]            ;2389  ; ibat
0025e0  f9b71002          LDRSH    r1,[r7,#2]            ;2389  ; ibat_
0025e4  4408              ADD      r0,r0,r1              ;2389
0025e6  f9b91000          LDRSH    r1,[r9,#0]            ;2389  ; IKB
0025ea  4288              CMP      r0,r1                 ;2389
0025ec  da02              BGE      |L1.9716|
0025ee  7860              LDRB     r0,[r4,#1]            ;2389  ; kb_start
0025f0  2801              CMP      r0,#1                 ;2389
0025f2  d020              BEQ      |L1.9782|
                  |L1.9716|
0025f4  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2393  ; bat
0025f8  28c8              CMP      r0,#0xc8              ;2393
0025fa  dd04              BLE      |L1.9734|
0025fc  7065              STRB     r5,[r4,#1]            ;2395
0025fe  2100              MOVS     r1,#0                 ;2396
002600  2001              MOVS     r0,#1                 ;2396
002602  f7fffffe          BL       avar_bat_hndl
                  |L1.9734|
002606  f9ba0058          LDRSH    r0,[r10,#0x58]        ;2399  ; ibat_ips
00260a  f9ba105a          LDRSH    r1,[r10,#0x5a]        ;2399  ; ibat_ips_
00260e  4408              ADD      r0,r0,r1              ;2399
002610  f9b91000          LDRSH    r1,[r9,#0]            ;2399  ; IKB
002614  4288              CMP      r0,r1                 ;2399
002616  f6bfaf7d          BGE      |L1.9492|
00261a  f89a001c          LDRB     r0,[r10,#0x1c]        ;2399  ; kb_start_ips
00261e  2801              CMP      r0,#1                 ;2399
002620  d1ae              BNE      |L1.9600|
002622  4853              LDR      r0,|L1.10096|
002624  8800              LDRH     r0,[r0,#0]            ;2401  ; KB_ALGORITM
002626  2802              CMP      r0,#2                 ;2401
002628  d008              BEQ      |L1.9788|
00262a  f88ab01b          STRB     r11,[r10,#0x1b]       ;2408
                  |L1.9774|
00262e  e764              B        |L1.9466|
                  |L1.9776|
002630  f88ab01b          STRB     r11,[r10,#0x1b]       ;2381
002634  e7d2              B        |L1.9692|
                  |L1.9782|
002636  f88ab01b          STRB     r11,[r10,#0x1b]       ;2391
00263a  e7e4              B        |L1.9734|
                  |L1.9788|
00263c  2001              MOVS     r0,#1                 ;2403
00263e  f7fffffe          BL       avar_bat_ips_hndl
002642  f88a501c          STRB     r5,[r10,#0x1c]        ;2404
002646  e758              B        |L1.9466|
                  |L1.9800|
002648  7ec8              LDRB     r0,[r1,#0x1b]         ;2415  ; kb_full_ver
00264a  4688              MOV      r8,r1                 ;2415
00264c  2800              CMP      r0,#0                 ;2415
00264e  d0ee              BEQ      |L1.9774|
002650  230f              MOVS     r3,#0xf               ;2418
002652  2200              MOVS     r2,#0                 ;2418
002654  216e              MOVS     r1,#0x6e              ;2418
002656  20e1              MOVS     r0,#0xe1              ;2418
002658  f7fffffe          BL       mess_send
00265c  f9b60008          LDRSH    r0,[r6,#8]            ;2420  ; bat
002660  f7fffffe          BL       abs
002664  f9b91000          LDRSH    r1,[r9,#0]            ;2420  ; IKB
002668  4288              CMP      r0,r1                 ;2420
00266a  dd07              BLE      |L1.9852|
00266c  7820              LDRB     r0,[r4,#0]            ;2422  ; kb_start
00266e  2801              CMP      r0,#1                 ;2422
002670  d104              BNE      |L1.9852|
002672  7025              STRB     r5,[r4,#0]            ;2424
002674  2100              MOVS     r1,#0                 ;2425
002676  4608              MOV      r0,r1                 ;2425
002678  f7fffffe          BL       avar_bat_hndl
                  |L1.9852|
00267c  f9b60054          LDRSH    r0,[r6,#0x54]         ;2429  ; bat
002680  f7fffffe          BL       abs
002684  f9b91000          LDRSH    r1,[r9,#0]            ;2429  ; IKB
002688  4288              CMP      r0,r1                 ;2429
00268a  dd06              BLE      |L1.9882|
00268c  7860              LDRB     r0,[r4,#1]            ;2431  ; kb_start
00268e  2801              CMP      r0,#1                 ;2431
002690  d103              BNE      |L1.9882|
002692  7065              STRB     r5,[r4,#1]            ;2433
002694  2100              MOVS     r1,#0                 ;2434
002696  f7fffffe          BL       avar_bat_hndl
                  |L1.9882|
00269a  f9ba0000          LDRSH    r0,[r10,#0]           ;2438  ; Ib_ips_termokompensat
00269e  f7fffffe          BL       abs
0026a2  f9b91000          LDRSH    r1,[r9,#0]            ;2438  ; IKB
0026a6  4288              CMP      r0,r1                 ;2438
0026a8  dd08              BLE      |L1.9916|
0026aa  f898001c          LDRB     r0,[r8,#0x1c]         ;2440  ; kb_start_ips
0026ae  2801              CMP      r0,#1                 ;2440
0026b0  d104              BNE      |L1.9916|
0026b2  f888501c          STRB     r5,[r8,#0x1c]         ;2442
0026b6  2000              MOVS     r0,#0                 ;2443
0026b8  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.9916|
0026bc  7820              LDRB     r0,[r4,#0]            ;2448  ; kb_start
0026be  b930              CBNZ     r0,|L1.9934|
0026c0  7860              LDRB     r0,[r4,#1]            ;2448  ; kb_start
0026c2  b920              CBNZ     r0,|L1.9934|
0026c4  f898001c          LDRB     r0,[r8,#0x1c]         ;2448  ; kb_start_ips
0026c8  b908              CBNZ     r0,|L1.9934|
0026ca  f888501b          STRB     r5,[r8,#0x1b]         ;2450
                  |L1.9934|
0026ce  20e6              MOVS     r0,#0xe6              ;2453
0026d0  f7fffffe          BL       mess_find
0026d4  b118              CBZ      r0,|L1.9950|
0026d6  4827              LDR      r0,|L1.10100|
0026d8  6800              LDR      r0,[r0,#0]            ;2453  ; mess_data
0026da  28e7              CMP      r0,#0xe7              ;2453
0026dc  d00a              BEQ      |L1.9972|
                  |L1.9950|
0026de  4826              LDR      r0,|L1.10104|
0026e0  4926              LDR      r1,|L1.10108|
0026e2  f9b00000          LDRSH    r0,[r0,#0]            ;2453  ; USIGN
0026e6  f9b11000          LDRSH    r1,[r1,#0]            ;2453  ; load_U
0026ea  eb000080          ADD      r0,r0,r0,LSL #2       ;2453
0026ee  ebb10f40          CMP      r1,r0,LSL #1          ;2453
                  |L1.9970|
0026f2  da9c              BGE      |L1.9774|
                  |L1.9972|
0026f4  f888501b          STRB     r5,[r8,#0x1b]         ;2455
0026f8  7820              LDRB     r0,[r4,#0]            ;2456  ; kb_start
0026fa  4d21              LDR      r5,|L1.10112|
0026fc  2801              CMP      r0,#1                 ;2456
0026fe  d10f              BNE      |L1.10016|
002700  f9b90000          LDRSH    r0,[r9,#0]            ;2456  ; IKB
002704  f9b51000          LDRSH    r1,[r5,#0]            ;2456  ; load_I
002708  0040              LSLS     r0,r0,#1              ;2456
00270a  fb90f0f7          SDIV     r0,r0,r7              ;2456
00270e  4288              CMP      r0,r1                 ;2456
002710  da06              BGE      |L1.10016|
002712  f896003d          LDRB     r0,[r6,#0x3d]         ;2456  ; bat
002716  07c0              LSLS     r0,r0,#31             ;2456
002718  d102              BNE      |L1.10016|
00271a  2101              MOVS     r1,#1                 ;2456
00271c  f7fffffe          BL       avar_bat_hndl
                  |L1.10016|
002720  7860              LDRB     r0,[r4,#1]            ;2457  ; kb_start
002722  2801              CMP      r0,#1                 ;2457
002724  d110              BNE      |L1.10056|
002726  f9b90000          LDRSH    r0,[r9,#0]            ;2457  ; IKB
00272a  f9b51000          LDRSH    r1,[r5,#0]            ;2457  ; load_I
00272e  0040              LSLS     r0,r0,#1              ;2457
002730  fb90f0f7          SDIV     r0,r0,r7              ;2457
002734  4288              CMP      r0,r1                 ;2457
002736  da07              BGE      |L1.10056|
002738  f8960089          LDRB     r0,[r6,#0x89]         ;2457  ; bat
00273c  07c0              LSLS     r0,r0,#31             ;2457
00273e  d103              BNE      |L1.10056|
002740  2101              MOVS     r1,#1                 ;2457
002742  4608              MOV      r0,r1                 ;2457
002744  f7fffffe          BL       avar_bat_hndl
                  |L1.10056|
002748  f898001c          LDRB     r0,[r8,#0x1c]         ;2459  ; kb_start_ips
00274c  2801              CMP      r0,#1                 ;2459
                  |L1.10062|
00274e  f47faee1          BNE      |L1.9492|
002752  f9b90000          LDRSH    r0,[r9,#0]            ;2459  ; IKB
002756  e015              B        |L1.10116|
                  |L1.10072|
                          DCD      ips_bat_av_vzvod
                  |L1.10076|
                          DCD      bat_ips
                  |L1.10080|
                          DCD      net_av
                  |L1.10084|
                          DCD      SMART_SPC
                  |L1.10088|
                          DCD      sp_ch_stat
                  |L1.10092|
                          DCD      ||area_number.25||+0x94
                  |L1.10096|
                          DCD      KB_ALGORITM
                  |L1.10100|
                          DCD      mess_data
                  |L1.10104|
                          DCD      USIGN
                  |L1.10108|
                          DCD      load_U
                  |L1.10112|
                          DCD      load_I
                  |L1.10116|
002784  0040              LSLS     r0,r0,#1              ;2459
002786  fb90f0f7          SDIV     r0,r0,r7              ;2459
00278a  f9b51000          LDRSH    r1,[r5,#0]            ;2459  ; load_I
00278e  4288              CMP      r0,r1                 ;2459
002790  daaf              BGE      |L1.9970|
002792  48ff              LDR      r0,|L1.11152|
002794  f890003d          LDRB     r0,[r0,#0x3d]         ;2459  ; bat_ips
002798  07c0              LSLS     r0,r0,#31             ;2459
00279a  d1d8              BNE      |L1.10062|
00279c  e8bd5ff0          POP      {r4-r12,lr}           ;2459
0027a0  2001              MOVS     r0,#1                 ;2459
0027a2  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2465   
                          ENDP

                  samokalibr_hndl PROC
;;;2474   //-----------------------------------------------
;;;2475   void samokalibr_hndl(void)
0027a6  4770              BX       lr
;;;2476   {
;;;2477   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2478   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2479   
;;;2480   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2481   	{
;;;2482   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2483   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2484   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2485   	} 
;;;2486   
;;;2487   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2488   	{
;;;2489   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2490   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2491   	
;;;2492   	}
;;;2493   #endif	 	
;;;2494   }
;;;2495   
                          ENDP

                  ubat_old_drv PROC
;;;2498   //-----------------------------------------------
;;;2499   void ubat_old_drv(void)
0027a8  b510              PUSH     {r4,lr}
;;;2500   {        
;;;2501   bat_u_old_cnt++;
0027aa  4cfa              LDR      r4,|L1.11156|
0027ac  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
0027ae  f1000001          ADD      r0,r0,#1
0027b2  8020              STRH     r0,[r4,#0]
;;;2502   gran_ring(&bat_u_old_cnt,0,8);
0027b4  f04f0208          MOV      r2,#8
0027b8  f04f0100          MOV      r1,#0
0027bc  4620              MOV      r0,r4
0027be  f7fffffe          BL       gran_ring
;;;2503   
;;;2504   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
0027c2  49f5              LDR      r1,|L1.11160|
0027c4  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
0027c8  eb010040          ADD      r0,r1,r0,LSL #1
0027cc  884a              LDRH     r2,[r1,#2]  ; bat
0027ce  8402              STRH     r2,[r0,#0x20]
;;;2505   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
0027d0  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
0027d4  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2506   }
0027d8  bd10              POP      {r4,pc}
;;;2507   
                          ENDP

                  unet_drv PROC
;;;2508   //-----------------------------------------------
;;;2509   void unet_drv(void)
0027da  b570              PUSH     {r4-r6,lr}
;;;2510   {
;;;2511   if(net_U<UMN)
0027dc  4def              LDR      r5,|L1.11164|
0027de  48f0              LDR      r0,|L1.11168|
;;;2512   	{
;;;2513   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
0027e0  4af0              LDR      r2,|L1.11172|
0027e2  f9b51000          LDRSH    r1,[r5,#0]            ;2511  ; net_U
0027e6  f9b03000          LDRSH    r3,[r0,#0]            ;2511  ; UMN
0027ea  f9920000          LDRSB    r0,[r2,#0]
0027ee  4299              CMP      r1,r3                 ;2511
0027f0  da1f              BGE      |L1.10290|
;;;2514   		{
;;;2515   		unet_drv_cnt++;
;;;2516   		if(unet_drv_cnt>=10)
;;;2517   			{
;;;2518   			net_Ustore=net_U;
0027f2  4ced              LDR      r4,|L1.11176|
0027f4  280a              CMP      r0,#0xa               ;2513
0027f6  da0f              BGE      |L1.10264|
0027f8  4bec              LDR      r3,|L1.11180|
0027fa  f9b33000          LDRSH    r3,[r3,#0]            ;2513  ; main_1Hz_cnt
0027fe  2b0f              CMP      r3,#0xf               ;2513
002800  dd0a              BLE      |L1.10264|
002802  f1000001          ADD      r0,r0,#1              ;2515
002806  b240              SXTB     r0,r0                 ;2515
002808  7010              STRB     r0,[r2,#0]            ;2515
00280a  280a              CMP      r0,#0xa               ;2516
00280c  db09              BLT      |L1.10274|
00280e  8021              STRH     r1,[r4,#0]
;;;2519   		 	avar_unet_hndl(1);
002810  2001              MOVS     r0,#1
002812  f7fffffe          BL       avar_unet_hndl
002816  e004              B        |L1.10274|
                  |L1.10264|
;;;2520   			
;;;2521   			}
;;;2522   		}
;;;2523   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
002818  280a              CMP      r0,#0xa
00281a  db02              BLT      |L1.10274|
00281c  f04f000a          MOV      r0,#0xa
002820  7010              STRB     r0,[r2,#0]
                  |L1.10274|
;;;2524   
;;;2525   	if(net_U<net_Ustore) net_Ustore=net_U;	
002822  f9b50000          LDRSH    r0,[r5,#0]  ; net_U
002826  f9b41000          LDRSH    r1,[r4,#0]  ; net_Ustore
00282a  4288              CMP      r0,r1
00282c  da00              BGE      |L1.10288|
00282e  8020              STRH     r0,[r4,#0]
                  |L1.10288|
;;;2526   	}
;;;2527   
;;;2528   else if(net_U>UMN)
;;;2529   	{                 
;;;2530   	if(unet_drv_cnt)
;;;2531   		{
;;;2532   		unet_drv_cnt--;
;;;2533   		if(unet_drv_cnt<=0)
;;;2534   			{
;;;2535   			avar_unet_hndl(0);
;;;2536   			}
;;;2537   		}
;;;2538   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2539   	
;;;2540   	}
;;;2541   
;;;2542   }
002830  bd70              POP      {r4-r6,pc}
                  |L1.10290|
002832  ddfd              BLE      |L1.10288|
002834  2800              CMP      r0,#0                 ;2530
002836  d0fb              BEQ      |L1.10288|
002838  f1a00001          SUB      r0,r0,#1              ;2532
00283c  b240              SXTB     r0,r0                 ;2532
00283e  7010              STRB     r0,[r2,#0]            ;2532
002840  2800              CMP      r0,#0                 ;2533
002842  dcf5              BGT      |L1.10288|
002844  e8bd4070          POP      {r4-r6,lr}            ;2535
002848  2000              MOVS     r0,#0                 ;2535
00284a  f7ffbffe          B.W      avar_unet_hndl
;;;2543   
                          ENDP

                  matemat PROC
;;;2545   //-----------------------------------------------
;;;2546   void matemat(void)
00284e  e92d4ff0          PUSH     {r4-r11,lr}
;;;2547   {
002852  b087              SUB      sp,sp,#0x1c
;;;2548   //signed short temp_SS;
;;;2549   signed long temp_SL/*,temp_SL_*/;
;;;2550   char /*temp,*/i;
;;;2551   //signed short temp_SS;
;;;2552   
;;;2553   #ifdef UKU_MGTS
;;;2554   //напряжение сети
;;;2555   temp_SL=(signed long)net_buff_;
;;;2556   temp_SL*=Kunet;
;;;2557   temp_SL/=110000L;
;;;2558   net_U=(signed short)temp_SL;
;;;2559   #endif
;;;2560   
;;;2561   #ifdef UKU_RSTKM
;;;2562   //напряжение сети
;;;2563   temp_SL=(signed long)net_buff_;
;;;2564   temp_SL*=Kunet;
;;;2565   temp_SL/=110000L;
;;;2566   net_U=(signed short)temp_SL;
;;;2567   #endif
;;;2568   
;;;2569   #ifdef UKU_3U
;;;2570   //напряжение сети
;;;2571   temp_SL=(signed long)net_buff_;
;;;2572   temp_SL*=Kunet;
;;;2573   temp_SL/=36000L;
;;;2574   net_U=(signed short)temp_SL;
;;;2575   #endif
;;;2576   
;;;2577   #ifdef UKU_6U
;;;2578   //напряжение сети
;;;2579   
;;;2580   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2581   	{
;;;2582   
;;;2583   	if(bps[11]._device==dNET_METR)
;;;2584   		{
;;;2585   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2586   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2587   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2588   
;;;2589   		temp_SL=(signed long)net_metr_buff_[0];
;;;2590   		temp_SL*=KunetA;
;;;2591   		temp_SL/=6000L;
;;;2592   		net_Ua=(signed short)temp_SL;
;;;2593   	
;;;2594   		temp_SL=(signed long)net_metr_buff_[1];
;;;2595   		temp_SL*=KunetB;
;;;2596   		temp_SL/=6000L;
;;;2597   		net_Ub=(signed short)temp_SL;
;;;2598   	
;;;2599   		temp_SL=(signed long)net_metr_buff_[2];
;;;2600   		temp_SL*=KunetC;
;;;2601   		temp_SL/=6000L;
;;;2602   		net_Uc=(signed short)temp_SL;
;;;2603   		}
;;;2604   	else
;;;2605   		{
;;;2606   		temp_SL=(signed long)net_buff_;
;;;2607   		temp_SL*=KunetA;
;;;2608   		temp_SL/=110000L;
;;;2609   		net_Ua=(signed short)temp_SL;
;;;2610   	
;;;2611   		temp_SL=(signed long)adc_buff_[3];
;;;2612   		temp_SL*=KunetB;
;;;2613   		temp_SL/=6000L;
;;;2614   		net_Ub=(signed short)temp_SL;
;;;2615   	
;;;2616   		temp_SL=(signed long)adc_buff_[10];
;;;2617   		temp_SL*=KunetC;
;;;2618   		temp_SL/=6000L;
;;;2619   		net_Uc=(signed short)temp_SL;
;;;2620   		}
;;;2621   
;;;2622   	net_U=net_Ua;
;;;2623   	if(net_Ub<net_U)net_U=net_Ub;
;;;2624   	if(net_Uc<net_U)net_U=net_Uc;
;;;2625   	}
;;;2626   else 
;;;2627   	{
;;;2628   	temp_SL=(signed long)net_buff_;
;;;2629   	temp_SL*=Kunet;
;;;2630   	temp_SL/=110000L;
;;;2631   	net_U=(signed short)temp_SL;
;;;2632   	}
;;;2633   
;;;2634   
;;;2635   
;;;2636   
;;;2637   #endif
;;;2638   
;;;2639   #ifdef UKU_GLONASS
;;;2640   //напряжение сети
;;;2641   temp_SL=(signed long)net_buff_;
;;;2642   temp_SL*=Kunet;
;;;2643   temp_SL/=110000L;
;;;2644   net_U=(signed short)temp_SL;
;;;2645   #endif
;;;2646   
;;;2647   #ifdef UKU_KONTUR
;;;2648   //напряжение сети
;;;2649   temp_SL=(signed long)net_buff_;
;;;2650   temp_SL*=Kunet;
;;;2651   temp_SL/=110000L;
;;;2652   net_U=(signed short)temp_SL;
;;;2653   #endif
;;;2654   
;;;2655   #ifdef IPS_SGEP_GAZPROM
;;;2656   //напряжение сети
;;;2657   temp_SL=(signed long)net_buff_;
;;;2658   temp_SL*=Kunet;
;;;2659   temp_SL/=110000L;
;;;2660   net_U=(signed short)temp_SL;
;;;2661   #endif
;;;2662   
;;;2663   #ifdef UKU_220_V2
;;;2664   //напряжение сети
;;;2665   
;;;2666   if(AUSW_MAIN==22033)
;;;2667   	{
;;;2668   	temp_SL=(signed long)net_buff_;
;;;2669   	temp_SL*=KunetA;
;;;2670   	temp_SL/=6000L;
;;;2671   	net_Ua=(signed short)temp_SL;
;;;2672   
;;;2673   	temp_SL=(signed long)adc_buff_[3];
;;;2674   	temp_SL*=KunetB;
;;;2675   	temp_SL/=6000L;
;;;2676   	net_Ub=(signed short)temp_SL;
;;;2677   
;;;2678   	temp_SL=(signed long)adc_buff_[10];
;;;2679   	temp_SL*=KunetC;
;;;2680   	temp_SL/=6000L;
;;;2681   	net_Uc=(signed short)temp_SL;
;;;2682   
;;;2683   	net_U=net_Ua;
;;;2684   	if(net_Ub<net_U)net_U=net_Ub;
;;;2685   	if(net_Uc<net_U)net_U=net_Uc;
;;;2686   	}
;;;2687   else
;;;2688   	{
;;;2689   	temp_SL=(signed long)net_buff_;
;;;2690   	temp_SL*=Kunet;
;;;2691   	temp_SL/=5000L;
;;;2692   	net_U=(signed short)temp_SL;
;;;2693   	}
;;;2694   #endif
;;;2695   
;;;2696   
;;;2697   #ifdef UKU_220
;;;2698   //напряжение сети
;;;2699   
;;;2700   if(AUSW_MAIN==22035)
;;;2701   	{
;;;2702   	temp_SL=(signed long)net_buff_;
;;;2703   	temp_SL*=KunetA;
;;;2704   	temp_SL/=6000L;
;;;2705   	net_Ua=(signed short)temp_SL;
;;;2706   
;;;2707   	temp_SL=(signed long)adc_buff_[3];
;;;2708   	temp_SL*=KunetB;
;;;2709   	temp_SL/=6000L;
;;;2710   	net_Ub=(signed short)temp_SL;
;;;2711   
;;;2712   	temp_SL=(signed long)adc_buff_[10];
;;;2713   	temp_SL*=KunetC;
;;;2714   	temp_SL/=6000L;
;;;2715   	net_Uc=(signed short)temp_SL;
;;;2716   
;;;2717   	net_U=net_Ua;
;;;2718   	if(net_Ub<net_U)net_U=net_Ub;
;;;2719   	if(net_Uc<net_U)net_U=net_Uc;
;;;2720   	}
;;;2721   else
;;;2722   	{
;;;2723   	temp_SL=(signed long)net_buff_;
;;;2724   	temp_SL*=Kunet;
;;;2725   	#ifdef _ACDC_
;;;2726   	temp_SL/=500L;
;;;2727   	#else
;;;2728   	temp_SL/=5000L;
;;;2729   	#endif
;;;2730   	net_U=(signed short)temp_SL;
;;;2731   	
;;;2732   	}
;;;2733   #endif
;;;2734   
;;;2735   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2736   //напряжение сети
;;;2737   
;;;2738   
;;;2739   	if(bps[11]._device==dNET_METR)
002854  48d6              LDR      r0,|L1.11184|
;;;2740   		{
;;;2741   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2742   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2743   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2744   
;;;2745   		temp_SL=(signed long)net_metr_buff_[2];
;;;2746   		temp_SL*=KunetA;
002856  4bd7              LDR      r3,|L1.11188|
;;;2747   		temp_SL/=6000L;
;;;2748   		net_Ua=(signed short)temp_SL;
;;;2749   	
;;;2750   		temp_SL=(signed long)net_metr_buff_[1];
;;;2751   		temp_SL*=KunetB;
002858  49d8              LDR      r1,|L1.11196|
00285a  f89003f4          LDRB     r0,[r0,#0x3f4]        ;2739  ; bps
;;;2752   		temp_SL/=6000L;
;;;2753   		net_Ub=(signed short)temp_SL;
;;;2754   	
;;;2755   		temp_SL=(signed long)net_metr_buff_[0];
;;;2756   		temp_SL*=KunetC;
00285e  4ad8              LDR      r2,|L1.11200|
002860  9006              STR      r0,[sp,#0x18]         ;2746
002862  f8dfc354          LDR      r12,|L1.11192|
002866  f9b39000          LDRSH    r9,[r3,#0]            ;2746
00286a  f9b1b000          LDRSH    r11,[r1,#0]           ;2751
00286e  f9b2a000          LDRSH    r10,[r2,#0]
002872  4fd4              LDR      r7,|L1.11204|
;;;2757   		temp_SL/=6000L;
;;;2758   		net_Uc=(signed short)temp_SL;
002874  4cd4              LDR      r4,|L1.11208|
;;;2759   
;;;2760   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2761   
;;;2762   		net_U=net_Ua;
;;;2763   		if(net_Ub<net_U)net_U=net_Ub;
;;;2764   		if(net_Uc<net_U)net_U=net_Uc;
;;;2765   		}
;;;2766   	  else if(AUSW_MAIN==22033)
;;;2767   	{
;;;2768   	temp_SL=(signed long)net_buff_;
002876  4ed5              LDR      r6,|L1.11212|
002878  f2456511          MOV      r5,#0x5611            ;2766
00287c  2807              CMP      r0,#7                 ;2739
00287e  d036              BEQ      |L1.10478|
002880  4631              MOV      r1,r6
002882  f8df8338          LDR      r8,|L1.11196|
002886  8f0a              LDRH     r2,[r1,#0x38]
002888  4619              MOV      r1,r3                 ;2746
;;;2769   	temp_SL*=KunetA;
;;;2770   	temp_SL/=4000L;
;;;2771   	net_Ua=(signed short)temp_SL;
;;;2772   
;;;2773   	temp_SL=(signed long)adc_buff_[3];
00288a  4bd2              LDR      r3,|L1.11220|
00288c  f9b11000          LDRSH    r1,[r1,#0]            ;2746
002890  f9b88000          LDRSH    r8,[r8,#0]            ;2751
002894  434a              MULS     r2,r1,r2              ;2769
002896  f9b31006          LDRSH    r1,[r3,#6]
00289a  f8df9324          LDR      r9,|L1.11200|
;;;2774   	temp_SL*=KunetB;
00289e  fb01f108          MUL      r1,r1,r8
0028a2  f2417870          MOV      r8,#0x1770            ;2747
;;;2775   	temp_SL/=6000L;
;;;2776   	net_Ub=(signed short)temp_SL;
;;;2777   
;;;2778   	temp_SL=(signed long)adc_buff_[10];
0028a6  f9b33014          LDRSH    r3,[r3,#0x14]
0028aa  f9b99000          LDRSH    r9,[r9,#0]            ;2756
0028ae  fb91f1f8          SDIV     r1,r1,r8              ;2775
;;;2779   	temp_SL*=KunetC;
0028b2  fb03f309          MUL      r3,r3,r9
;;;2780   	temp_SL/=6000L;
0028b6  fb93f3f8          SDIV     r3,r3,r8
0028ba  48c5              LDR      r0,|L1.11216|
0028bc  b209              SXTH     r1,r1                 ;2776
;;;2781   	net_Uc=(signed short)temp_SL;
0028be  b21b              SXTH     r3,r3
0028c0  8800              LDRH     r0,[r0,#0]            ;2766  ; AUSW_MAIN
0028c2  42a8              CMP      r0,r5                 ;2766
0028c4  d154              BNE      |L1.10608|
0028c6  f44f607a          MOV      r0,#0xfa0             ;2770
0028ca  fb92f0f0          SDIV     r0,r2,r0              ;2770
0028ce  b200              SXTH     r0,r0                 ;2771
0028d0  f8ac0000          STRH     r0,[r12,#0]           ;2771
0028d4  8039              STRH     r1,[r7,#0]            ;2776
0028d6  8023              STRH     r3,[r4,#0]
;;;2782   
;;;2783   	net_U=net_Ua;
0028d8  4ab0              LDR      r2,|L1.11164|
0028da  8010              STRH     r0,[r2,#0]
;;;2784   	if(net_Ub<net_U)net_U=net_Ub;
0028dc  4281              CMP      r1,r0
0028de  da00              BGE      |L1.10466|
0028e0  8011              STRH     r1,[r2,#0]
                  |L1.10466|
;;;2785   	if(net_Uc<net_U)net_U=net_Uc;
0028e2  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
0028e6  4283              CMP      r3,r0
0028e8  da00              BGE      |L1.10476|
0028ea  8013              STRH     r3,[r2,#0]
                  |L1.10476|
0028ec  e07e              B        |L1.10732|
                  |L1.10478|
0028ee  48ba              LDR      r0,|L1.11224|
0028f0  4bb6              LDR      r3,|L1.11212|
0028f2  7801              LDRB     r1,[r0,#0]            ;2741  ; bps
0028f4  7842              LDRB     r2,[r0,#1]            ;2741  ; bps
0028f6  f10303e8          ADD      r3,r3,#0xe8           ;2741
0028fa  eb012102          ADD      r1,r1,r2,LSL #8       ;2741
0028fe  fa1ff881          UXTH     r8,r1                 ;2741
002902  f8a38000          STRH     r8,[r3,#0]            ;2741
002906  7881              LDRB     r1,[r0,#2]            ;2742  ; bps
002908  78c2              LDRB     r2,[r0,#3]            ;2742  ; bps
00290a  eb012102          ADD      r1,r1,r2,LSL #8       ;2742
00290e  b289              UXTH     r1,r1                 ;2742
002910  8059              STRH     r1,[r3,#2]            ;2742
002912  7902              LDRB     r2,[r0,#4]            ;2743  ; bps
002914  f890e005          LDRB     lr,[r0,#5]            ;2743  ; bps
002918  eb02220e          ADD      r2,r2,lr,LSL #8       ;2743
00291c  b292              UXTH     r2,r2                 ;2743
00291e  809a              STRH     r2,[r3,#4]            ;2743
002920  fb02f209          MUL      r2,r2,r9              ;2746
002924  f2417370          MOV      r3,#0x1770            ;2747
002928  fb92f2f3          SDIV     r2,r2,r3              ;2747
00292c  fa0ff982          SXTH     r9,r2                 ;2748
002930  f8ac9000          STRH     r9,[r12,#0]           ;2748
002934  fb01f10b          MUL      r1,r1,r11             ;2751
002938  fb91f1f3          SDIV     r1,r1,r3              ;2752
00293c  b209              SXTH     r1,r1                 ;2753
00293e  8039              STRH     r1,[r7,#0]            ;2753
002940  fb08f80a          MUL      r8,r8,r10             ;2756
002944  fb98f2f3          SDIV     r2,r8,r3              ;2757
002948  b212              SXTH     r2,r2                 ;2758
00294a  8022              STRH     r2,[r4,#0]            ;2758
00294c  7983              LDRB     r3,[r0,#6]            ;2760  ; bps
00294e  79c0              LDRB     r0,[r0,#7]            ;2760  ; bps
002950  eb032000          ADD      r0,r3,r0,LSL #8       ;2760
002954  4ba1              LDR      r3,|L1.11228|
002956  8018              STRH     r0,[r3,#0]            ;2760
002958  4890              LDR      r0,|L1.11164|
00295a  f8a09000          STRH     r9,[r0,#0]            ;2762
00295e  4549              CMP      r1,r9                 ;2763
002960  da00              BGE      |L1.10596|
002962  8001              STRH     r1,[r0,#0]            ;2763
                  |L1.10596|
002964  f9b01000          LDRSH    r1,[r0,#0]            ;2764  ; net_U
002968  428a              CMP      r2,r1                 ;2764
00296a  da3f              BGE      |L1.10732|
00296c  8002              STRH     r2,[r0,#0]            ;2764
00296e  e03d              B        |L1.10732|
                  |L1.10608|
;;;2786   	}
;;;2787   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002970  f5a048ac          SUB      r8,r0,#0x5600
002974  f1b8082f          SUBS     r8,r8,#0x2f
002978  d00b              BEQ      |L1.10642|
00297a  f1180828          ADDS     r8,r8,#0x28
00297e  d008              BEQ      |L1.10642|
002980  f1b80814          SUBS     r8,r8,#0x14
002984  d005              BEQ      |L1.10642|
002986  f1b80801          SUBS     r8,r8,#1
00298a  d002              BEQ      |L1.10642|
00298c  f118081a          ADDS     r8,r8,#0x1a
002990  d113              BNE      |L1.10682|
                  |L1.10642|
;;;2788   	{
;;;2789   	temp_SL=(signed long)net_buff_;
;;;2790   	temp_SL*=KunetA;
;;;2791   	temp_SL/=40000L;
002992  f6494040          MOV      r0,#0x9c40
002996  fb92f0f0          SDIV     r0,r2,r0
;;;2792   	net_Ua=(signed short)temp_SL;
00299a  b200              SXTH     r0,r0
00299c  f8ac0000          STRH     r0,[r12,#0]
;;;2793   
;;;2794   	temp_SL=(signed long)adc_buff_[3];
;;;2795   	temp_SL*=KunetB;
;;;2796   	temp_SL/=6000L;
;;;2797   	net_Ub=(signed short)temp_SL;
0029a0  8039              STRH     r1,[r7,#0]
;;;2798   
;;;2799   	temp_SL=(signed long)adc_buff_[10];
;;;2800   	temp_SL*=KunetC;
;;;2801   	temp_SL/=6000L;
;;;2802   	net_Uc=(signed short)temp_SL;
0029a2  8023              STRH     r3,[r4,#0]
;;;2803   
;;;2804   	net_U=net_Ua;
0029a4  4a7d              LDR      r2,|L1.11164|
0029a6  8010              STRH     r0,[r2,#0]
;;;2805   	if(net_Ub<net_U)net_U=net_Ub;
0029a8  4281              CMP      r1,r0
0029aa  da00              BGE      |L1.10670|
0029ac  8011              STRH     r1,[r2,#0]
                  |L1.10670|
;;;2806   	if(net_Uc<net_U)net_U=net_Uc;
0029ae  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
0029b2  4283              CMP      r3,r0
0029b4  da1a              BGE      |L1.10732|
0029b6  8013              STRH     r3,[r2,#0]
0029b8  e018              B        |L1.10732|
                  |L1.10682|
;;;2807   	}
;;;2808   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2809   	{
;;;2810   	temp_SL=(signed long)net_buff_;
;;;2811   	temp_SL*=Kunet;
0029ba  4989              LDR      r1,|L1.11232|
0029bc  f5a043aa          SUB      r3,r0,#0x5500         ;2808
0029c0  f9b12000          LDRSH    r2,[r1,#0]
0029c4  4981              LDR      r1,|L1.11212|
0029c6  8f09              LDRH     r1,[r1,#0x38]         ;2768
0029c8  4351              MULS     r1,r2,r1
0029ca  3bfa              SUBS     r3,r3,#0xfa           ;2808
0029cc  d001              BEQ      |L1.10706|
0029ce  1e5a              SUBS     r2,r3,#1              ;2808
0029d0  d106              BNE      |L1.10720|
                  |L1.10706|
;;;2812   	temp_SL/=35000L;
0029d2  f64800b8          MOV      r0,#0x88b8
0029d6  fb91f0f0          SDIV     r0,r1,r0
;;;2813   	net_U=(signed short)temp_SL;
0029da  4970              LDR      r1,|L1.11164|
0029dc  8008              STRH     r0,[r1,#0]
0029de  e005              B        |L1.10732|
                  |L1.10720|
;;;2814   	
;;;2815   	}
;;;2816   else
;;;2817   	{
;;;2818   	temp_SL=(signed long)net_buff_;
;;;2819   	temp_SL*=Kunet;
;;;2820   	#ifdef _ACDC_
;;;2821   	temp_SL/=500L;
0029e0  f44f70fa          MOV      r0,#0x1f4
0029e4  fb91f0f0          SDIV     r0,r1,r0
;;;2822   	#else
;;;2823   	temp_SL/=5000L;
;;;2824   	#endif
;;;2825   	net_U=(signed short)temp_SL;
0029e8  496c              LDR      r1,|L1.11164|
0029ea  8008              STRH     r0,[r1,#0]
                  |L1.10732|
;;;2826   	
;;;2827   	}
;;;2828   if(bps[11]._device!=dNET_METR) net_F3=net_F;
0029ec  9806              LDR      r0,[sp,#0x18]
0029ee  2807              CMP      r0,#7
0029f0  d003              BEQ      |L1.10746|
0029f2  487c              LDR      r0,|L1.11236|
0029f4  8801              LDRH     r1,[r0,#0]  ; net_F
0029f6  4879              LDR      r0,|L1.11228|
0029f8  8001              STRH     r1,[r0,#0]
                  |L1.10746|
;;;2829   #endif
;;;2830   
;;;2831   #ifdef UKU_TELECORE2015
;;;2832   //напряжение сети
;;;2833   temp_SL=(signed long)net_buff_;
;;;2834   temp_SL*=Kunet;
;;;2835   temp_SL/=110000L;
;;;2836   net_U=(signed short)temp_SL;
;;;2837   #endif
;;;2838   
;;;2839   #ifdef UKU_TELECORE2017
;;;2840   //напряжение сети
;;;2841   temp_SL=(signed long)net_buff_;
;;;2842   temp_SL*=Kunet;
;;;2843   temp_SL/=110000L;
;;;2844   net_U=(signed short)temp_SL;
;;;2845   #endif
;;;2846   
;;;2847   //Напряжения батарей
;;;2848   temp_SL=(signed long)adc_buff_[0];
0029fa  4f76              LDR      r7,|L1.11220|
0029fc  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2849   temp_SL*=Kubat[0];
002a00  4979              LDR      r1,|L1.11240|
002a02  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
002a06  4350              MULS     r0,r2,r0
;;;2850   temp_SL/=2000L;
002a08  f44f68fa          MOV      r8,#0x7d0
002a0c  fb90f0f8          SDIV     r0,r0,r8
;;;2851   bat[0]._Ub=(signed short)temp_SL;
002a10  4c61              LDR      r4,|L1.11160|
002a12  8060              STRH     r0,[r4,#2]
;;;2852   
;;;2853   #ifdef UKU_220
;;;2854   //Напряжения батарей
;;;2855   temp_SL=(signed long)adc_buff_[0];
;;;2856   temp_SL*=Kubat[0];
;;;2857   temp_SL/=400L;
;;;2858   bat[0]._Ub=(signed short)temp_SL;
;;;2859   #endif
;;;2860   
;;;2861   #ifdef UKU_220_V2
;;;2862   //Напряжения батарей
;;;2863   temp_SL=(signed long)adc_buff_[0];
;;;2864   temp_SL*=Kubat[0];
;;;2865   temp_SL/=400L;
;;;2866   bat[0]._Ub=(signed short)temp_SL;
;;;2867   #endif
;;;2868   
;;;2869   //adc_buff_[4]=300;
;;;2870   
;;;2871   temp_SL=(signed long)adc_buff_[4];
002a14  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2872   temp_SL*=Kubatm[0];
002a18  4a74              LDR      r2,|L1.11244|
002a1a  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
002a1e  fb00f003          MUL      r0,r0,r3
;;;2873   temp_SL/=700L;
002a22  f44f732f          MOV      r3,#0x2bc
002a26  fb90f0f3          SDIV     r0,r0,r3
;;;2874   bat[0]._Ubm=(signed short)temp_SL;
002a2a  80a0              STRH     r0,[r4,#4]
;;;2875   
;;;2876   #ifdef UKU_KONTUR
;;;2877   temp_SL=(signed long)adc_buff_[4];
;;;2878   temp_SL*=Kubatm[0];
;;;2879   temp_SL/=2000L;
;;;2880   bat[0]._Ubm=(signed short)temp_SL;
;;;2881   #endif
;;;2882   
;;;2883   #ifdef UKU_6U
;;;2884   temp_SL=(signed long)adc_buff_[4];
;;;2885   temp_SL*=Kubatm[0];
;;;2886   temp_SL/=2000L;
;;;2887   bat[0]._Ubm=(signed short)temp_SL;
;;;2888   #endif
;;;2889   
;;;2890   temp_SL=(signed long)adc_buff_[12];
002a2c  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2891   temp_SL*=Kubat[1];
002a30  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002a34  fb01f100          MUL      r1,r1,r0
;;;2892   temp_SL/=2000L;
002a38  fb91f0f8          SDIV     r0,r1,r8
;;;2893   bat[1]._Ub=(signed short)temp_SL;
002a3c  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2894   
;;;2895   #ifdef UKU_220
;;;2896   temp_SL=(signed long)adc_buff_[12];
;;;2897   temp_SL*=Kubat[1];
;;;2898   temp_SL/=400L;
;;;2899   bat[1]._Ub=(signed short)temp_SL;
;;;2900   #endif
;;;2901   
;;;2902   #ifdef UKU_220_V2
;;;2903   temp_SL=(signed long)adc_buff_[12];
;;;2904   temp_SL*=Kubat[1];
;;;2905   temp_SL/=400L;
;;;2906   bat[1]._Ub=(signed short)temp_SL;
;;;2907   #endif
;;;2908   
;;;2909   //adc_buff_[1]=300;
;;;2910   
;;;2911   temp_SL=(signed long)adc_buff_[1];
002a40  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2912   temp_SL*=Kubatm[1];
002a44  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002a48  fb00f001          MUL      r0,r0,r1
;;;2913   temp_SL/=700L;
002a4c  fb90f0f3          SDIV     r0,r0,r3
;;;2914   bat[1]._Ubm=(signed short)temp_SL;
002a50  f8a40050          STRH     r0,[r4,#0x50]
;;;2915   #ifdef UKU_KONTUR
;;;2916   temp_SL=(signed long)adc_buff_[1];
;;;2917   temp_SL*=Kubatm[1];
;;;2918   temp_SL/=2000L;
;;;2919   bat[1]._Ubm=(signed short)temp_SL;
;;;2920   #endif
;;;2921   #ifdef UKU_6U
;;;2922   temp_SL=(signed long)adc_buff_[1];
;;;2923   temp_SL*=Kubatm[1];
;;;2924   temp_SL/=2000L;
;;;2925   bat[1]._Ubm=(signed short)temp_SL;
;;;2926   #endif
;;;2927   
;;;2928   #ifdef UKU_TELECORE2015
;;;2929   temp_SL=(signed long)adc_buff_[2];
;;;2930   temp_SL*=Kubat[0];
;;;2931   temp_SL/=2000L;
;;;2932   bat[0]._Ub=(signed short)temp_SL;
;;;2933   #endif
;;;2934   
;;;2935   /*
;;;2936   //Токи батарей
;;;2937   if(!mess_find_unvol(MESS2MATEMAT))
;;;2938   	{
;;;2939   	temp_SL=(signed long)ad7705_buff_[0];
;;;2940   	temp_SL-=(signed long)Kibat0[0];
;;;2941   	temp_SL*=(signed long)Kibat1[0];
;;;2942   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2943   	else temp_SL/=1000L;
;;;2944   	bat[0]._Ib=(signed short)temp_SL;
;;;2945   
;;;2946   	temp_SL=(signed long)ad7705_buff_[1];
;;;2947   	temp_SL-=(signed long)Kibat0[1];
;;;2948   	temp_SL*=(signed long)Kibat1[1];
;;;2949   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2950   	else temp_SL/=1000L;
;;;2951   	bat[1]._Ib=(signed short)temp_SL;
;;;2952   	}
;;;2953   */
;;;2954   
;;;2955   
;;;2956   //Токи батарей
;;;2957   if(!mess_find_unvol(MESS2MATEMAT))
002a54  f04f00dc          MOV      r0,#0xdc
002a58  f7fffffe          BL       mess_find_unvol
;;;2958   	{
;;;2959   	temp_SL=(signed long)ad7705_buff_[0];
;;;2960   	temp_SL-=(signed long)Kibat0[0];
;;;2961   	temp_SL*=(signed long)Kibat1[0];
;;;2962   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2963   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002a5c  f2456c13          MOV      r12,#0x5613
002a60  bbe8              CBNZ     r0,|L1.10974|
002a62  f8dfa18c          LDR      r10,|L1.11248|
002a66  f8ba0000          LDRH     r0,[r10,#0]           ;2959  ; ad7705_buff_
002a6a  f8dfb188          LDR      r11,|L1.11252|
002a6e  f8bb1000          LDRH     r1,[r11,#0]           ;2960  ; Kibat0
002a72  eba00001          SUB      r0,r0,r1              ;2960
002a76  4a60              LDR      r2,|L1.11256|
002a78  f9b21000          LDRSH    r1,[r2,#0]            ;2961  ; Kibat1
002a7c  fb01f100          MUL      r1,r1,r0              ;2961
002a80  4853              LDR      r0,|L1.11216|
002a82  f6456338          MOV      r3,#0x5e38            ;2962
002a86  f6456992          MOV      r9,#0x5e92            ;2962
002a8a  8800              LDRH     r0,[r0,#0]            ;2962  ; AUSW_MAIN
002a8c  4298              CMP      r0,r3                 ;2962
002a8e  d001              BEQ      |L1.10900|
002a90  4548              CMP      r0,r9                 ;2962
002a92  d104              BNE      |L1.10910|
                  |L1.10900|
002a94  f44f7e96          MOV      lr,#0x12c             ;2962
002a98  fb91f1fe          SDIV     r1,r1,lr              ;2962
002a9c  e00f              B        |L1.10942|
                  |L1.10910|
002a9e  f5a04ea8          SUB      lr,r0,#0x5400
002aa2  f5be7efd          SUBS     lr,lr,#0x1fa
002aa6  d003              BEQ      |L1.10928|
002aa8  4560              CMP      r0,r12
002aaa  d001              BEQ      |L1.10928|
002aac  42a8              CMP      r0,r5
002aae  d102              BNE      |L1.10934|
                  |L1.10928|
002ab0  fb91f1f8          SDIV     r1,r1,r8
002ab4  e003              B        |L1.10942|
                  |L1.10934|
;;;2964   	else temp_SL/=1000L;
002ab6  f44f7e7a          MOV      lr,#0x3e8
002aba  fb91f1fe          SDIV     r1,r1,lr
                  |L1.10942|
;;;2965   	#ifdef UKU_TELECORE2015
;;;2966   	temp_SL/=2L;
;;;2967   	//temp_SL=-temp_SL;
;;;2968   	#endif
;;;2969   	//#ifdef UKU_TELECORE2017
;;;2970   	//temp_SL/=-2L;
;;;2971   	//temp_SL=-temp_SL;
;;;2972   	//#endif
;;;2973   	bat[0]._Ib=(signed short)temp_SL;
002abe  8121              STRH     r1,[r4,#8]
;;;2974   
;;;2975   	temp_SL=(signed long)ad7705_buff_[1];
002ac0  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;2976   	temp_SL-=(signed long)Kibat0[1];
002ac4  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002ac8  eba10a0a          SUB      r10,r1,r10
;;;2977   	temp_SL*=(signed long)Kibat1[1];
002acc  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002ad0  fb01f10a          MUL      r1,r1,r10
;;;2978   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002ad4  4298              CMP      r0,r3
002ad6  d001              BEQ      |L1.10972|
002ad8  4548              CMP      r0,r9
002ada  d106              BNE      |L1.10986|
                  |L1.10972|
002adc  e000              B        |L1.10976|
                  |L1.10974|
002ade  e015              B        |L1.11020|
                  |L1.10976|
002ae0  f44f7096          MOV      r0,#0x12c
002ae4  fb91f0f0          SDIV     r0,r1,r0
002ae8  e00e              B        |L1.11016|
                  |L1.10986|
;;;2979   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002aea  f5a042aa          SUB      r2,r0,#0x5500
002aee  3afa              SUBS     r2,r2,#0xfa
002af0  d003              BEQ      |L1.11002|
002af2  4560              CMP      r0,r12
002af4  d001              BEQ      |L1.11002|
002af6  42a8              CMP      r0,r5
002af8  d102              BNE      |L1.11008|
                  |L1.11002|
002afa  fb91f0f8          SDIV     r0,r1,r8
002afe  e003              B        |L1.11016|
                  |L1.11008|
;;;2980   	else temp_SL/=1000L;
002b00  f44f707a          MOV      r0,#0x3e8
002b04  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11016|
;;;2981   	bat[1]._Ib=(signed short)temp_SL;
002b08  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.11020|
;;;2982   	}
;;;2983   
;;;2984   
;;;2985   
;;;2986   
;;;2987   
;;;2988   //Температуры батарей
;;;2989   
;;;2990   #ifdef UKU_KONTUR
;;;2991   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;2992   else bat[0]._nd=1;
;;;2993   temp_SL=(signed long)adc_buff_[6];
;;;2994   temp_SL*=Ktbat[0];
;;;2995   temp_SL/=20000L;
;;;2996   temp_SL-=273L;
;;;2997   bat[0]._Tb=(signed short)temp_SL;
;;;2998   #else
;;;2999   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002b0c  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
002b10  f6403ab7          MOV      r10,#0xbb7
002b14  4681              MOV      r9,r0
002b16  f2a03021          SUB      r0,r0,#0x321
;;;3000   else bat[0]._nd=1;
002b1a  2201              MOVS     r2,#1
002b1c  2300              MOVS     r3,#0                 ;2999
002b1e  9005              STR      r0,[sp,#0x14]         ;2999
002b20  4550              CMP      r0,r10                ;2999
002b22  d201              BCS      |L1.11048|
002b24  7323              STRB     r3,[r4,#0xc]          ;2999
002b26  e000              B        |L1.11050|
                  |L1.11048|
002b28  7322              STRB     r2,[r4,#0xc]
                  |L1.11050|
;;;3001   temp_SL=(signed long)adc_buff_[6];
;;;3002   temp_SL*=Ktbat[0];
002b2a  4934              LDR      r1,|L1.11260|
002b2c  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
002b30  fb00f009          MUL      r0,r0,r9
;;;3003   temp_SL/=20000L;
002b34  f6446e20          MOV      lr,#0x4e20
002b38  fb90f0fe          SDIV     r0,r0,lr
;;;3004   temp_SL-=273L;
002b3c  f2a01011          SUB      r0,r0,#0x111
;;;3005   bat[0]._Tb=(signed short)temp_SL;
002b40  8160              STRH     r0,[r4,#0xa]
;;;3006   #endif
;;;3007   
;;;3008   #ifdef UKU_KONTUR
;;;3009   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3010   else bat[1]._nd=1;
;;;3011   temp_SL=(signed long)adc_buff_[7];
;;;3012   temp_SL*=Ktbat[1];
;;;3013   temp_SL/=20000L;
;;;3014   temp_SL-=273L;
;;;3015   bat[1]._Tb=(signed short)temp_SL;
;;;3016   #else
;;;3017   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002b42  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
002b46  f2a03b21          SUB      r11,r0,#0x321
002b4a  45d3              CMP      r11,r10
002b4c  d202              BCS      |L1.11092|
002b4e  f8843058          STRB     r3,[r4,#0x58]
002b52  e001              B        |L1.11096|
                  |L1.11092|
;;;3018   else bat[1]._nd=1;
002b54  f8842058          STRB     r2,[r4,#0x58]
                  |L1.11096|
;;;3019   temp_SL=(signed long)adc_buff_[7];
;;;3020   temp_SL*=Ktbat[1];
002b58  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
002b5c  4341              MULS     r1,r0,r1
;;;3021   temp_SL/=20000L;
002b5e  f6446020          MOV      r0,#0x4e20
002b62  fb91f0f0          SDIV     r0,r1,r0
;;;3022   temp_SL-=273L;
002b66  f2a01011          SUB      r0,r0,#0x111
;;;3023   bat[1]._Tb=(signed short)temp_SL;
002b6a  490b              LDR      r1,|L1.11160|
002b6c  f8a10056          STRH     r0,[r1,#0x56]
;;;3024   #endif
;;;3025   
;;;3026   #ifdef UKU_6U
;;;3027   
;;;3028   if(NUMMAKB==2)
;;;3029   	{
;;;3030   	if(makb[0]._cnt<5)
;;;3031   		{
;;;3032   		if(makb[0]._T_nd[0]==0)
;;;3033   			{
;;;3034   			bat[0]._Tb=makb[0]._T[0];
;;;3035   			bat[0]._nd=0;
;;;3036   			}
;;;3037   		}
;;;3038   
;;;3039   	if(makb[1]._cnt<5)
;;;3040   		{
;;;3041   		if(makb[1]._T_nd[0]==0)
;;;3042   			{
;;;3043   			bat[1]._Tb=makb[1]._T[0];
;;;3044   			bat[1]._nd=0;
;;;3045   			}
;;;3046   		}
;;;3047   
;;;3048   	}
;;;3049   else if(NUMMAKB==4)
;;;3050   	{
;;;3051   	signed short temp_t;
;;;3052   	temp_t=-20;
;;;3053   	if(makb[0]._cnt<5)
;;;3054   		{
;;;3055   		if(makb[0]._T_nd[0]==0)
;;;3056   			{
;;;3057   			temp_t=makb[0]._T[0];
;;;3058   			bat[0]._nd=0;
;;;3059   			}
;;;3060   		}
;;;3061   	if(makb[1]._cnt<5)
;;;3062   		{
;;;3063   		if(makb[1]._T_nd[0]==0)
;;;3064   			{
;;;3065   			if(temp_t<makb[1]._T[0])
;;;3066   				{
;;;3067   				bat[0]._nd=0;
;;;3068   				temp_t=makb[1]._T[0];
;;;3069   				}
;;;3070   			}
;;;3071   		}
;;;3072   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3073   
;;;3074    	temp_t=-20;
;;;3075   	if(makb[2]._cnt<5)
;;;3076   		{
;;;3077   		if(makb[2]._T_nd[0]==0)
;;;3078   			{
;;;3079   			temp_t=makb[2]._T[0];
;;;3080   			bat[1]._nd=0;
;;;3081   			}
;;;3082   		}
;;;3083   	if(makb[3]._cnt<5)
;;;3084   		{
;;;3085   		if(makb[3]._T_nd[0]==0)
;;;3086   			{
;;;3087   			if(temp_t<makb[3]._T[0])
;;;3088   				{
;;;3089   				bat[1]._nd=0;
;;;3090   				temp_t=makb[3]._T[0];
;;;3091   				}
;;;3092   			}
;;;3093   		}
;;;3094   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3095   	}
;;;3096   
;;;3097   #endif
;;;3098   
;;;3099   
;;;3100   //Напряжение нагрузки
;;;3101   temp_SL=(signed long)adc_buff_[2];
002b70  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;3102   temp_SL*=Kuload;
002b74  4822              LDR      r0,|L1.11264|
002b76  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002b7a  fb01f000          MUL      r0,r1,r0
;;;3103   temp_SL/=2000L;
002b7e  f44f64fa          MOV      r4,#0x7d0
002b82  fb90f0f4          SDIV     r0,r0,r4
;;;3104   load_U=(signed short)temp_SL;
002b86  4c1f              LDR      r4,|L1.11268|
002b88  8020              STRH     r0,[r4,#0]
;;;3105   
;;;3106   #ifdef UKU_220 
;;;3107   //Напряжение нагрузки
;;;3108   temp_SL=(signed long)adc_buff_[2];
;;;3109   temp_SL*=Kuload;
;;;3110   temp_SL/=350L;
;;;3111   load_U=(signed short)temp_SL;
;;;3112   #endif
;;;3113   
;;;3114   #ifdef UKU_220_V2 
;;;3115   //Напряжение нагрузки
;;;3116   temp_SL=(signed long)adc_buff_[2];
;;;3117   temp_SL*=Kuload;
;;;3118   temp_SL/=350L;
;;;3119   load_U=(signed short)temp_SL;
;;;3120   #endif
;;;3121   
;;;3122   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3123   //Напряжение шины
;;;3124   temp_SL=(signed long)adc_buff_[1];
002b8a  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;3125   temp_SL*=Kuout;
002b8e  e03b              B        |L1.11272|
                  |L1.11152|
                          DCD      bat_ips
                  |L1.11156|
                          DCD      bat_u_old_cnt
                  |L1.11160|
                          DCD      bat
                  |L1.11164|
                          DCD      net_U
                  |L1.11168|
                          DCD      UMN
                  |L1.11172|
                          DCD      unet_drv_cnt
                  |L1.11176|
                          DCD      net_Ustore
                  |L1.11180|
                          DCD      main_1Hz_cnt
                  |L1.11184|
                          DCD      bps
                  |L1.11188|
                          DCD      KunetA
                  |L1.11192|
                          DCD      net_Ua
                  |L1.11196|
                          DCD      KunetB
                  |L1.11200|
                          DCD      KunetC
                  |L1.11204|
                          DCD      net_Ub
                  |L1.11208|
                          DCD      net_Uc
                  |L1.11212|
                          DCD      ||area_number.25||
                  |L1.11216|
                          DCD      AUSW_MAIN
                  |L1.11220|
                          DCD      ||.bss||+0x40c
                  |L1.11224|
                          DCD      bps+0x3fa
                  |L1.11228|
                          DCD      net_F3
                  |L1.11232|
                          DCD      Kunet
                  |L1.11236|
                          DCD      net_F
                  |L1.11240|
                          DCD      Kubat
                  |L1.11244|
                          DCD      Kubatm
                  |L1.11248|
                          DCD      ad7705_buff_
                  |L1.11252|
                          DCD      Kibat0
                  |L1.11256|
                          DCD      Kibat1
                  |L1.11260|
                          DCD      Ktbat
                  |L1.11264|
                          DCD      Kuload
                  |L1.11268|
                          DCD      load_U
                  |L1.11272|
002c08  48fc              LDR      r0,|L1.12284|
002c0a  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002c0e  fb08f800          MUL      r8,r8,r0
;;;3126   if(AUSW_MAIN==22010)temp_SL/=400L;
002c12  48fb              LDR      r0,|L1.12288|
002c14  f24554fa          MOV      r4,#0x55fa
002c18  f44f7bc8          MOV      r11,#0x190
002c1c  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002c1e  42a0              CMP      r0,r4
002c20  d102              BNE      |L1.11304|
002c22  fb98f8fb          SDIV     r8,r8,r11
002c26  e003              B        |L1.11312|
                  |L1.11304|
;;;3127   else temp_SL/=500L;
002c28  f44f7efa          MOV      lr,#0x1f4
002c2c  fb98f8fe          SDIV     r8,r8,lr
                  |L1.11312|
;;;3128   out_U=(signed short)temp_SL;
002c30  f8dfe3d0          LDR      lr,|L1.12292|
002c34  fa0ff888          SXTH     r8,r8
002c38  f8ae8000          STRH     r8,[lr,#0]
;;;3129   load_U=out_U;
002c3c  f8dfe3c8          LDR      lr,|L1.12296|
002c40  f8ae8000          STRH     r8,[lr,#0]
;;;3130   
;;;3131   //Напряжение выпрямителей
;;;3132   temp_SL=(signed long)adc_buff_[2];
;;;3133   temp_SL*=Kubps;
002c44  4ff1              LDR      r7,|L1.12300|
002c46  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002c4a  fb01f107          MUL      r1,r1,r7
;;;3134   if(AUSW_MAIN==22010)temp_SL/=400L;
002c4e  d102              BNE      |L1.11350|
002c50  fb91f1fb          SDIV     r1,r1,r11
002c54  e003              B        |L1.11358|
                  |L1.11350|
;;;3135   else temp_SL/=500L;
002c56  f44f74fa          MOV      r4,#0x1f4
002c5a  fb91f1f4          SDIV     r1,r1,r4
                  |L1.11358|
;;;3136   bps_U=(signed short)temp_SL;
002c5e  4cec              LDR      r4,|L1.12304|
002c60  b209              SXTH     r1,r1
002c62  8021              STRH     r1,[r4,#0]
;;;3137   
;;;3138   if(bps_U<100)
002c64  2964              CMP      r1,#0x64
002c66  da19              BGE      |L1.11420|
;;;3139   	{
;;;3140   	char i;
;;;3141   	for(i=0;i<NUMIST;i++)
002c68  f04f0100          MOV      r1,#0
002c6c  46a6              MOV      lr,r4                 ;3136
002c6e  4ce9              LDR      r4,|L1.12308|
002c70  f9b4b000          LDRSH    r11,[r4,#0]
002c74  e010              B        |L1.11416|
                  |L1.11382|
;;;3142   		{
;;;3143   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002c76  ebc104c1          RSB      r4,r1,r1,LSL #3
002c7a  eb041701          ADD      r7,r4,r1,LSL #4
002c7e  4ce6              LDR      r4,|L1.12312|
002c80  eb040487          ADD      r4,r4,r7,LSL #2
002c84  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
002c88  6a24              LDR      r4,[r4,#0x20]
002c8a  42bc              CMP      r4,r7
002c8c  dd01              BLE      |L1.11410|
002c8e  f8ae4000          STRH     r4,[lr,#0]
                  |L1.11410|
002c92  f1010101          ADD      r1,r1,#1              ;3141
002c96  b2c9              UXTB     r1,r1                 ;3141
                  |L1.11416|
002c98  4559              CMP      r1,r11                ;3141
002c9a  dbec              BLT      |L1.11382|
                  |L1.11420|
;;;3144   		}
;;;3145   	}
;;;3146   
;;;3147   //Суммарный ток выпрямителей
;;;3148   temp_SL=0;
002c9c  f04f0b00          MOV      r11,#0
;;;3149   for (i=0;i<NUMIST;i++)
002ca0  4659              MOV      r1,r11
002ca2  4cdc              LDR      r4,|L1.12308|
002ca4  f9b47000          LDRSH    r7,[r4,#0]            ;3141
002ca8  4cdb              LDR      r4,|L1.12312|
002caa  e00b              B        |L1.11460|
                  |L1.11436|
;;;3150   	{
;;;3151   	temp_SL+=((signed long)bps[i]._Ii);
002cac  ebc10ec1          RSB      lr,r1,r1,LSL #3
002cb0  eb0e1e01          ADD      lr,lr,r1,LSL #4
002cb4  eb040e8e          ADD      lr,r4,lr,LSL #2
002cb8  f8dee024          LDR      lr,[lr,#0x24]
002cbc  44f3              ADD      r11,r11,lr
002cbe  f1010101          ADD      r1,r1,#1              ;3149
002cc2  b2c9              UXTB     r1,r1                 ;3149
                  |L1.11460|
002cc4  42b9              CMP      r1,r7                 ;3149
002cc6  dbf1              BLT      |L1.11436|
;;;3152   	}
;;;3153   bps_I=(signed short)temp_SL;
002cc8  49d4              LDR      r1,|L1.12316|
002cca  f8a1b000          STRH     r11,[r1,#0]
;;;3154   
;;;3155   
;;;3156   #endif
;;;3157   
;;;3158   
;;;3159   #ifdef UKU_KONTUR
;;;3160   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3161   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3162   else ND_EXT[0]=1;
;;;3163   temp_SL=(signed long)adc_buff_[5];
;;;3164   temp_SL*=Ktext[0];
;;;3165   temp_SL/=20000L;
;;;3166   temp_SL-=273L;
;;;3167   t_ext[0]=(signed short)temp_SL;
;;;3168   #else 
;;;3169   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3170   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002cce  49d4              LDR      r1,|L1.12320|
002cd0  f6403ab7          MOV      r10,#0xbb7
002cd4  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
002cd8  49d2              LDR      r1,|L1.12324|
002cda  f2ab3e21          SUB      lr,r11,#0x321
002cde  f8cde010          STR      lr,[sp,#0x10]
002ce2  45d6              CMP      lr,r10
002ce4  d201              BCS      |L1.11498|
002ce6  700b              STRB     r3,[r1,#0]
002ce8  e000              B        |L1.11500|
                  |L1.11498|
;;;3171   else ND_EXT[0]=1;
002cea  700a              STRB     r2,[r1,#0]
                  |L1.11500|
;;;3172   temp_SL=(signed long)adc_buff_[5];
;;;3173   temp_SL*=Ktext[0];
002cec  f8dfa338          LDR      r10,|L1.12328|
002cf0  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
002cf4  f8cda00c          STR      r10,[sp,#0xc]
002cf8  fb0afa0b          MUL      r10,r10,r11
;;;3174   temp_SL/=20000L;
002cfc  f6446e20          MOV      lr,#0x4e20
002d00  fb9afafe          SDIV     r10,r10,lr
;;;3175   temp_SL-=273L;
002d04  f2aa1a11          SUB      r10,r10,#0x111
;;;3176   t_ext[0]=(signed short)temp_SL;
002d08  f8dfe320          LDR      lr,|L1.12332|
002d0c  f8aea000          STRH     r10,[lr,#0]
;;;3177   /*
;;;3178   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3179   else ND_EXT[1]=1;
;;;3180   temp_SL=(signed long)adc_buff_[6];
;;;3181   temp_SL*=Ktext[1];
;;;3182   temp_SL/=20000L;
;;;3183   temp_SL-=273L;
;;;3184   t_ext[1]=(signed short)temp_SL;	*/
;;;3185   #endif
;;;3186   
;;;3187   #ifdef UKU_220
;;;3188   
;;;3189   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3190   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3191   else ND_EXT[1]=1;
;;;3192   temp_SL=(signed long)adc_buff_[3];
;;;3193   temp_SL*=Ktext[1];
;;;3194   temp_SL/=20000L;
;;;3195   temp_SL-=273L;
;;;3196   t_ext[1]=(signed short)temp_SL;
;;;3197   
;;;3198   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3199   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3200   else ND_EXT[2]=1;
;;;3201   temp_SL=(signed long)adc_buff_[10];
;;;3202   temp_SL*=Ktext[2];
;;;3203   temp_SL/=20000L;
;;;3204   temp_SL-=273L;
;;;3205   t_ext[2]=(signed short)temp_SL;
;;;3206   
;;;3207   #else
;;;3208   
;;;3209   
;;;3210   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3211   
;;;3212   //Внешний датчик температуры 
;;;3213   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002d10  f8dda014          LDR      r10,[sp,#0x14]
002d14  f6403eb7          MOV      lr,#0xbb7
002d18  45f2              CMP      r10,lr
002d1a  d201              BCS      |L1.11552|
002d1c  700b              STRB     r3,[r1,#0]
002d1e  e000              B        |L1.11554|
                  |L1.11552|
;;;3214   else ND_EXT[0]=1;
002d20  700a              STRB     r2,[r1,#0]
                  |L1.11554|
;;;3215   temp_SL=(signed long)adc_buff_[6];
;;;3216   temp_SL*=Ktext[0];
002d22  f8dda00c          LDR      r10,[sp,#0xc]
002d26  fb0afa09          MUL      r10,r10,r9
;;;3217   temp_SL/=20000L;
002d2a  f6446920          MOV      r9,#0x4e20
002d2e  fb9af9f9          SDIV     r9,r10,r9
;;;3218   temp_SL-=273L;
002d32  f2a91911          SUB      r9,r9,#0x111
;;;3219   t_ext[0]=(signed short)temp_SL;
002d36  f8dfe2f4          LDR      lr,|L1.12332|
002d3a  f8ae9000          STRH     r9,[lr,#0]
;;;3220   
;;;3221   //Внешний датчик температуры №2
;;;3222   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002d3e  f8dd9010          LDR      r9,[sp,#0x10]
002d42  f6403ab7          MOV      r10,#0xbb7
002d46  45d1              CMP      r9,r10
002d48  d201              BCS      |L1.11598|
002d4a  704b              STRB     r3,[r1,#1]
002d4c  e000              B        |L1.11600|
                  |L1.11598|
;;;3223   else ND_EXT[1]=1;
002d4e  704a              STRB     r2,[r1,#1]
                  |L1.11600|
;;;3224   temp_SL=(signed long)adc_buff_[5];
;;;3225   temp_SL*=Ktext[1];
002d50  4ab5              LDR      r2,|L1.12328|
002d52  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
002d56  fb02f20b          MUL      r2,r2,r11
;;;3226   temp_SL/=20000L;
002d5a  f6446920          MOV      r9,#0x4e20
002d5e  fb92f2f9          SDIV     r2,r2,r9
;;;3227   temp_SL-=273L;
002d62  f2a21211          SUB      r2,r2,#0x111
;;;3228   t_ext[1]=(signed short)temp_SL;
002d66  fa0ffa82          SXTH     r10,r2
002d6a  4ab0              LDR      r2,|L1.12332|
002d6c  f8a2a002          STRH     r10,[r2,#2]
;;;3229   #else
;;;3230   
;;;3231   
;;;3232   
;;;3233   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3234   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3235   else ND_EXT[1]=1;
;;;3236   temp_SL=(signed long)adc_buff_[6];
;;;3237   temp_SL*=Ktext[1];
;;;3238   temp_SL/=20000L;
;;;3239   temp_SL-=273L;
;;;3240   t_ext[1]=(signed short)temp_SL;
;;;3241   
;;;3242   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3243   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3244   else ND_EXT[2]=1;
;;;3245   temp_SL=(signed long)adc_buff_[3];
;;;3246   temp_SL*=Ktext[2];
;;;3247   temp_SL/=20000L;
;;;3248   temp_SL-=273L;
;;;3249   t_ext[2]=(signed short)temp_SL;
;;;3250   
;;;3251   #endif
;;;3252   #endif
;;;3253   
;;;3254   #ifdef UKU_220_V2
;;;3255   
;;;3256   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3257   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3258   else ND_EXT[1]=1;
;;;3259   temp_SL=(signed long)adc_buff_[3];
;;;3260   temp_SL*=Ktext[1];
;;;3261   temp_SL/=20000L;
;;;3262   temp_SL-=273L;
;;;3263   t_ext[1]=(signed short)temp_SL;
;;;3264   
;;;3265   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3266   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3267   else ND_EXT[2]=1;
;;;3268   temp_SL=(signed long)adc_buff_[10];
;;;3269   temp_SL*=Ktext[2];
;;;3270   temp_SL/=20000L;
;;;3271   temp_SL-=273L;
;;;3272   t_ext[2]=(signed short)temp_SL;
;;;3273   
;;;3274   #else
;;;3275   
;;;3276   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3277   //Ток батареи
;;;3278   if(bps[8]._device==dIBAT_METR)
002d70  f89422e0          LDRB     r2,[r4,#0x2e0]  ; bps
;;;3279   	{
;;;3280   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3281   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3282   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3283   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3284   	if(!bIBAT_SMKLBR)
;;;3285   		{
;;;3286   		signed long temp_SL;
;;;3287   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3288   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3289   		temp_SL*=(signed long)Kibat1[0];
;;;3290   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3291   	
;;;3292   		Ib_ips_termokompensat =(signed short)temp_SL;
002d74  f8df92b8          LDR      r9,|L1.12336|
002d78  2a09              CMP      r2,#9                 ;3278
002d7a  d15f              BNE      |L1.11836|
002d7c  f89422e6          LDRB     r2,[r4,#0x2e6]        ;3280  ; bps
002d80  f894b2e7          LDRB     r11,[r4,#0x2e7]       ;3280  ; bps
002d84  f8dfe2ac          LDR      lr,|L1.12340|
002d88  eb02220b          ADD      r2,r2,r11,LSL #8      ;3280
002d8c  f8ce2000          STR      r2,[lr,#0]            ;3280  ; ibat_metr_buff_
002d90  9202              STR      r2,[sp,#8]            ;3280
002d92  f89422e8          LDRB     r2,[r4,#0x2e8]        ;3281  ; bps
002d96  f894b2e9          LDRB     r11,[r4,#0x2e9]       ;3281  ; bps
002d9a  eb02220b          ADD      r2,r2,r11,LSL #8      ;3281
002d9e  f8ce2004          STR      r2,[lr,#4]            ;3281  ; ibat_metr_buff_
002da2  f894b2ea          LDRB     r11,[r4,#0x2ea]       ;3282  ; bps
002da6  f894e2eb          LDRB     lr,[r4,#0x2eb]        ;3282  ; bps
002daa  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;3282
002dae  f8dfe288          LDR      lr,|L1.12344|
002db2  fa0ffb8b          SXTH     r11,r11               ;3282
002db6  f8aeb000          STRH     r11,[lr,#0]           ;3282
002dba  f1bb0f00          CMP      r11,#0                ;3283
002dbe  d005              BEQ      |L1.11724|
002dc0  f8dfb278          LDR      r11,|L1.12348|
002dc4  f04f0e32          MOV      lr,#0x32              ;3283
002dc8  f8abe000          STRH     lr,[r11,#0]           ;3283
                  |L1.11724|
002dcc  d136              BNE      |L1.11836|
002dce  f8ddb008          LDR      r11,[sp,#8]           ;3287
002dd2  ebab0b02          SUB      r11,r11,r2            ;3288
002dd6  4a9a              LDR      r2,|L1.12352|
002dd8  f9b22000          LDRSH    r2,[r2,#0]            ;3289  ; Kibat1
002ddc  fb02f20b          MUL      r2,r2,r11             ;3289
002de0  f5a04ba8          SUB      r11,r0,#0x5400        ;3290
002de4  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3290
002de8  d00f              BEQ      |L1.11786|
002dea  f1bb0b01          SUBS     r11,r11,#1            ;3290
002dee  d00c              BEQ      |L1.11786|
002df0  4560              CMP      r0,r12                ;3290
002df2  d00a              BEQ      |L1.11786|
002df4  42a8              CMP      r0,r5                 ;3290
002df6  d008              BEQ      |L1.11786|
002df8  f1bb0534          SUBS     r5,r11,#0x34          ;3290
002dfc  d005              BEQ      |L1.11786|
002dfe  3528              ADDS     r5,r5,#0x28           ;3290
002e00  d003              BEQ      |L1.11786|
002e02  3d14              SUBS     r5,r5,#0x14           ;3290
002e04  d001              BEQ      |L1.11786|
002e06  1e6d              SUBS     r5,r5,#1              ;3290
002e08  d103              BNE      |L1.11794|
                  |L1.11786|
002e0a  f44f65fa          MOV      r5,#0x7d0             ;3290
002e0e  fb92f2f5          SDIV     r2,r2,r5              ;3290
                  |L1.11794|
002e12  b215              SXTH     r5,r2
002e14  f8a95000          STRH     r5,[r9,#0]
;;;3293   		if(bIBAT_SMKLBR_cnt)
002e18  f8dfc220          LDR      r12,|L1.12348|
;;;3294   			{
;;;3295   			bIBAT_SMKLBR_cnt--;
;;;3296   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
002e1c  f8dfb224          LDR      r11,|L1.12356|
002e20  f9bc2000          LDRSH    r2,[r12,#0]           ;3293  ; bIBAT_SMKLBR_cnt
002e24  b142              CBZ      r2,|L1.11832|
002e26  f1a20201          SUB      r2,r2,#1              ;3295
002e2a  f8ac2000          STRH     r2,[r12,#0]           ;3295
002e2e  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
002e32  f8a92000          STRH     r2,[r9,#0]
002e36  e001              B        |L1.11836|
                  |L1.11832|
;;;3297   			}
;;;3298   		else 
;;;3299   			{
;;;3300   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
002e38  f8ab5000          STRH     r5,[r11,#0]
                  |L1.11836|
;;;3301   			}
;;;3302   		}
;;;3303   	}
;;;3304   
;;;3305   bat[0]._Ub=load_U;
002e3c  4a82              LDR      r2,|L1.12360|
002e3e  f8a28002          STRH     r8,[r2,#2]
002e42  f8cd8004          STR      r8,[sp,#4]
;;;3306   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
002e46  f5a045ac          SUB      r5,r0,#0x5600
002e4a  3d02              SUBS     r5,#2
002e4c  d103              BNE      |L1.11862|
002e4e  8910              LDRH     r0,[r2,#8]  ; bat
002e50  f8a90000          STRH     r0,[r9,#0]
002e54  e002              B        |L1.11868|
                  |L1.11862|
;;;3307   else bat[0]._Ib=Ib_ips_termokompensat;
002e56  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002e5a  8110              STRH     r0,[r2,#8]
                  |L1.11868|
;;;3308   
;;;3309   #endif
;;;3310   #endif
;;;3311   
;;;3312   
;;;3313   #ifdef UKU_TELECORE2015
;;;3314   
;;;3315   //Внешний датчик температуры №1
;;;3316   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3317   else ND_EXT[0]=1;
;;;3318   temp_SL=(signed long)adc_buff_[7];
;;;3319   temp_SL*=Ktext[0];
;;;3320   temp_SL/=20000L;
;;;3321   temp_SL-=273L;
;;;3322   t_ext[0]=(signed short)temp_SL;
;;;3323   
;;;3324   
;;;3325   //Внешний датчик температуры №2
;;;3326   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3327   else ND_EXT[1]=1;
;;;3328   temp_SL=(signed long)adc_buff_[6];
;;;3329   temp_SL*=Ktext[1];
;;;3330   temp_SL/=20000L;
;;;3331   temp_SL-=273L;
;;;3332   t_ext[1]=(signed short)temp_SL;
;;;3333   
;;;3334   #endif
;;;3335   
;;;3336   #ifdef UKU_TELECORE2017
;;;3337   
;;;3338   //Внешний датчик температуры №1
;;;3339   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3340   else ND_EXT[0]=1;
;;;3341   temp_SL=(signed long)adc_buff_[7];
;;;3342   temp_SL*=Ktext[0];
;;;3343   temp_SL/=20000L;
;;;3344   temp_SL-=273L;
;;;3345   t_ext[0]=(signed short)temp_SL;
;;;3346   
;;;3347   
;;;3348   //Внешний датчик температуры №2
;;;3349   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3350   else ND_EXT[1]=1;
;;;3351   temp_SL=(signed long)adc_buff_[6];
;;;3352   temp_SL*=Ktext[1];
;;;3353   temp_SL/=20000L;
;;;3354   temp_SL-=273L;
;;;3355   t_ext[1]=(signed short)temp_SL;
;;;3356   
;;;3357   #endif
;;;3358   
;;;3359   //напряжение ввода
;;;3360   temp_SL=(signed long)adc_buff_ext_[0];
002e5c  f8dfc1ec          LDR      r12,|L1.12364|
002e60  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;3361   temp_SL*=Kunet_ext[0];
002e64  f8df81e8          LDR      r8,|L1.12368|
002e68  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
002e6c  4368              MULS     r0,r5,r0
;;;3362   temp_SL/=4000L;
002e6e  f44f6b7a          MOV      r11,#0xfa0
002e72  fb90f0fb          SDIV     r0,r0,r11
;;;3363   Uvv[0]=(signed short)temp_SL;
002e76  4d77              LDR      r5,|L1.12372|
002e78  b280              UXTH     r0,r0
002e7a  8028              STRH     r0,[r5,#0]
;;;3364   if(Uvv[0]<100) Uvv0=Uvv[0];
002e7c  f8dfe1d8          LDR      lr,|L1.12376|
002e80  2864              CMP      r0,#0x64
002e82  d202              BCS      |L1.11914|
002e84  f8ae0000          STRH     r0,[lr,#0]
002e88  e003              B        |L1.11922|
                  |L1.11914|
;;;3365   else Uvv0=net_U;
002e8a  4874              LDR      r0,|L1.12380|
002e8c  8800              LDRH     r0,[r0,#0]  ; net_U
002e8e  f8ae0000          STRH     r0,[lr,#0]
                  |L1.11922|
;;;3366   
;;;3367   //напряжение пэс
;;;3368   temp_SL=(signed long)adc_buff_ext_[1];
002e92  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;3369   temp_SL*=Kunet_ext[1];
002e96  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
002e9a  fb00f00c          MUL      r0,r0,r12
;;;3370   temp_SL/=4000L;
002e9e  fb90f0fb          SDIV     r0,r0,r11
;;;3371   Uvv[1]=(signed short)temp_SL;
002ea2  8068              STRH     r0,[r5,#2]
;;;3372   
;;;3373   
;;;3374   //напряжение ввода трехфазное
;;;3375   temp_SL=(signed long)eb2_data_short[0];
002ea4  4d6e              LDR      r5,|L1.12384|
002ea6  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;3376   temp_SL*=Kvv_eb2[0];
002eaa  f8dfc1b8          LDR      r12,|L1.12388|
002eae  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
002eb2  fb08f800          MUL      r8,r8,r0
;;;3377   temp_SL/=6000L;
002eb6  f2417070          MOV      r0,#0x1770
002eba  fb98fbf0          SDIV     r11,r8,r0
;;;3378   Uvv_eb2[0]=(signed short)temp_SL;
002ebe  f8df81a8          LDR      r8,|L1.12392|
002ec2  f8a8b000          STRH     r11,[r8,#0]
;;;3379   
;;;3380   temp_SL=(signed long)eb2_data_short[1];
002ec6  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;3381   temp_SL*=Kvv_eb2[1];
002eca  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
002ece  fb0efe0b          MUL      lr,lr,r11
;;;3382   temp_SL/=6000L;
002ed2  fb9efbf0          SDIV     r11,lr,r0
;;;3383   Uvv_eb2[1]=(signed short)temp_SL;
002ed6  f8a8b002          STRH     r11,[r8,#2]
;;;3384   
;;;3385   temp_SL=(signed long)eb2_data_short[2];
002eda  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;3386   temp_SL*=Kvv_eb2[2];
002ede  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
002ee2  fb0cfc0b          MUL      r12,r12,r11
;;;3387   temp_SL/=6000L;
002ee6  fb9cfcf0          SDIV     r12,r12,r0
;;;3388   Uvv_eb2[2]=(signed short)temp_SL;
002eea  f8a8c004          STRH     r12,[r8,#4]
;;;3389   
;;;3390   //напряжение пэс трехфазное
;;;3391   temp_SL=(signed long)eb2_data_short[3];
002eee  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;3392   temp_SL*=Kpes_eb2[0];
002ef2  f8dfc178          LDR      r12,|L1.12396|
002ef6  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
002efa  fb08f80b          MUL      r8,r8,r11
;;;3393   temp_SL/=6000L;
002efe  fb98fbf0          SDIV     r11,r8,r0
;;;3394   Upes_eb2[0]=(signed short)temp_SL;
002f02  f8df816c          LDR      r8,|L1.12400|
002f06  f8a8b000          STRH     r11,[r8,#0]
;;;3395   
;;;3396   temp_SL=(signed long)eb2_data_short[4];
002f0a  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;3397   temp_SL*=Kpes_eb2[1];
002f0e  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
002f12  fb0efe0b          MUL      lr,lr,r11
;;;3398   temp_SL/=6000L;
002f16  fb9efbf0          SDIV     r11,lr,r0
;;;3399   Upes_eb2[1]=(signed short)temp_SL;
002f1a  f8a8b002          STRH     r11,[r8,#2]
;;;3400   
;;;3401   temp_SL=(signed long)eb2_data_short[5];
002f1e  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;3402   temp_SL*=Kpes_eb2[2];
002f22  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
002f26  fb05f50b          MUL      r5,r5,r11
;;;3403   temp_SL/=6000L;
002f2a  fb95f0f0          SDIV     r0,r5,r0
;;;3404   Upes_eb2[2]=(signed short)temp_SL;
002f2e  f8a80004          STRH     r0,[r8,#4]
;;;3405   
;;;3406   //Вычисление температуры шкафа
;;;3407   
;;;3408   ibt._T[0]=t_ext[1]+273;
002f32  f20a1a11          ADD      r10,r10,#0x111
002f36  fa0ffc8a          SXTH     r12,r10
002f3a  f8dfa138          LDR      r10,|L1.12404|
002f3e  483b              LDR      r0,|L1.12332|
002f40  f8aac000          STRH     r12,[r10,#0]
;;;3409   ibt._T[1]=t_ext[2]+273;
002f44  8880              LDRH     r0,[r0,#4]  ; t_ext
002f46  f2001011          ADD      r0,r0,#0x111
002f4a  fa0ff880          SXTH     r8,r0
002f4e  f8aa8002          STRH     r8,[r10,#2]
;;;3410   
;;;3411   ibt._nd[0]=ND_EXT[1];
002f52  784d              LDRB     r5,[r1,#1]  ; ND_EXT
002f54  f88a5008          STRB     r5,[r10,#8]
;;;3412   ibt._nd[1]=ND_EXT[2];
002f58  7888              LDRB     r0,[r1,#2]  ; ND_EXT
002f5a  f88a0009          STRB     r0,[r10,#9]
;;;3413   
;;;3414   #ifndef UKU_TELECORE2015
;;;3415   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3416   	{
;;;3417   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
002f5e  4946              LDR      r1,|L1.12408|
002f60  b905              CBNZ     r5,|L1.12132|
002f62  b110              CBZ      r0,|L1.12138|
                  |L1.12132|
;;;3418   	}
;;;3419   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
002f64  2d01              CMP      r5,#1
002f66  d00a              BEQ      |L1.12158|
002f68  e00a              B        |L1.12160|
                  |L1.12138|
002f6a  eb0c0008          ADD      r0,r12,r8             ;3417
002f6e  eb0075d0          ADD      r5,r0,r0,LSR #31      ;3417
002f72  f46f7088          MVN      r0,#0x110             ;3417
002f76  eb000065          ADD      r0,r0,r5,ASR #1       ;3417
002f7a  8008              STRH     r0,[r1,#0]            ;3417
002f7c  e01e              B        |L1.12220|
                  |L1.12158|
002f7e  b108              CBZ      r0,|L1.12164|
                  |L1.12160|
;;;3420   	{
;;;3421   	t_box=ibt._T[1]-273;
;;;3422   	}
;;;3423   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
002f80  b12d              CBZ      r5,|L1.12174|
002f82  e006              B        |L1.12178|
                  |L1.12164|
002f84  f2a81811          SUB      r8,r8,#0x111          ;3421
002f88  f8a18000          STRH     r8,[r1,#0]            ;3421
002f8c  e016              B        |L1.12220|
                  |L1.12174|
002f8e  2801              CMP      r0,#1
002f90  d002              BEQ      |L1.12184|
                  |L1.12178|
;;;3424   	{
;;;3425   	t_box=ibt._T[0]-273;
;;;3426   	}
;;;3427   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
002f92  2d01              CMP      r5,#1
002f94  d005              BEQ      |L1.12194|
002f96  e011              B        |L1.12220|
                  |L1.12184|
002f98  f2ac1c11          SUB      r12,r12,#0x111        ;3425
002f9c  f8a1c000          STRH     r12,[r1,#0]           ;3425
002fa0  e00c              B        |L1.12220|
                  |L1.12194|
002fa2  2801              CMP      r0,#1
002fa4  d10a              BNE      |L1.12220|
;;;3428   	{
;;;3429   	if(t_ext_can_nd<5)t_box= t_ext_can;
002fa6  4835              LDR      r0,|L1.12412|
002fa8  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
002faa  2805              CMP      r0,#5
002fac  d203              BCS      |L1.12214|
002fae  4834              LDR      r0,|L1.12416|
002fb0  8800              LDRH     r0,[r0,#0]  ; t_ext_can
002fb2  8008              STRH     r0,[r1,#0]
002fb4  e002              B        |L1.12220|
                  |L1.12214|
;;;3430   	else t_box=20;
002fb6  f04f0014          MOV      r0,#0x14
002fba  8008              STRH     r0,[r1,#0]
                  |L1.12220|
;;;3431   	}
;;;3432   #endif
;;;3433   /*
;;;3434   //Вычисление температуры шкафа
;;;3435   
;;;3436   ibt._T[0]=bat[0]._Tb+273;
;;;3437   ibt._T[1]=bat[1]._Tb+273;
;;;3438   ibt._T[2]=t_ext[1]+273;
;;;3439   ibt._T[3]=t_ext[2]+273;
;;;3440   
;;;3441   ibt._nd[0]=bat[0]._nd;
;;;3442   ibt._nd[1]=bat[1]._nd;
;;;3443   ibt._nd[2]=ND_EXT[1];
;;;3444   ibt._nd[3]=ND_EXT[2];
;;;3445   
;;;3446   ibt._avg1=0;
;;;3447   ibt._avg_cnt=4;
;;;3448   
;;;3449   if(ibt._nd[0]==0)
;;;3450   	{
;;;3451   	ibt._avg1+=ibt._T[0];
;;;3452   	}
;;;3453   else 
;;;3454   	{
;;;3455   	ibt._avg_cnt--;
;;;3456   	}
;;;3457   
;;;3458   if(ibt._nd[1]==0)
;;;3459   	{
;;;3460   	ibt._avg1+=ibt._T[1];
;;;3461   	}
;;;3462   else 
;;;3463   	{
;;;3464   	ibt._avg_cnt--;
;;;3465   	}
;;;3466   
;;;3467   if(ibt._nd[2]==0)
;;;3468   	{
;;;3469   	ibt._avg1+=ibt._T[2];
;;;3470   	}
;;;3471   else 
;;;3472   	{
;;;3473   	ibt._avg_cnt--;
;;;3474   	}
;;;3475   
;;;3476   if(ibt._nd[3]==0)
;;;3477   	{
;;;3478   	ibt._avg1+=ibt._T[3];
;;;3479   	}
;;;3480   else 
;;;3481   	{
;;;3482   	ibt._avg_cnt--;
;;;3483   	}
;;;3484   
;;;3485   if(ibt._avg_cnt==0)
;;;3486   	{
;;;3487   	}
;;;3488   else
;;;3489   	{
;;;3490   	ibt._avg1/=ibt._avg_cnt;
;;;3491   	}
;;;3492   
;;;3493   
;;;3494   if(ibt._nd[0]!=0)
;;;3495   	{
;;;3496   	ibt._T_dispers[0]=0;
;;;3497   	}
;;;3498   else 
;;;3499   	{
;;;3500   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3501   	}
;;;3502   
;;;3503   if(ibt._nd[1]!=0)
;;;3504   	{
;;;3505   	ibt._T_dispers[1]=0;
;;;3506   	}
;;;3507   else 
;;;3508   	{
;;;3509   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3510   	}
;;;3511   
;;;3512   if(ibt._nd[2]!=0)
;;;3513   	{
;;;3514   	ibt._T_dispers[2]=0;
;;;3515   	}
;;;3516   else 
;;;3517   	{
;;;3518   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3519   	}
;;;3520   
;;;3521   if(ibt._nd[3]!=0)
;;;3522   	{
;;;3523   	ibt._T_dispers[3]=0;
;;;3524   	}
;;;3525   else 
;;;3526   	{
;;;3527   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3528   	}
;;;3529   
;;;3530   if(	ibt._nd[0]&&
;;;3531   	ibt._nd[1]&&
;;;3532   	ibt._nd[2]&&
;;;3533   	ibt._nd[3]
;;;3534   	)
;;;3535   	{
;;;3536   	t_box=(bps[0]._Ti);
;;;3537   	}
;;;3538   
;;;3539   else if(	ibt._nd[0]||
;;;3540   	ibt._nd[1]||
;;;3541   	ibt._nd[2]||
;;;3542   	ibt._nd[3]
;;;3543   	)
;;;3544   	{
;;;3545   	t_box=(ibt._avg1-273);
;;;3546   	}
;;;3547   else 
;;;3548   	{
;;;3549   	ibt._max_dispers_num=0;
;;;3550   	ibt._max_dispers=ibt._T_dispers[0];
;;;3551   
;;;3552   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3553   		{
;;;3554   		ibt._max_dispers_num=1;
;;;3555   		ibt._max_dispers=ibt._T_dispers[1];
;;;3556   		}
;;;3557   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3558   		{
;;;3559   		ibt._max_dispers_num=2;
;;;3560   		ibt._max_dispers=ibt._T_dispers[2];
;;;3561   		}
;;;3562   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3563   		{
;;;3564   		ibt._max_dispers_num=3;
;;;3565   		ibt._max_dispers=ibt._T_dispers[3];
;;;3566   		}
;;;3567   
;;;3568   	ibt._avg2=0;
;;;3569   
;;;3570   	if(ibt._max_dispers_num!=0)
;;;3571   		{
;;;3572   		ibt._avg2+=ibt._T[0];
;;;3573   		}
;;;3574   	if(ibt._max_dispers_num!=1)
;;;3575   		{
;;;3576   		ibt._avg2+=ibt._T[1];
;;;3577   		}
;;;3578   	if(ibt._max_dispers_num!=2)
;;;3579   		{
;;;3580   		ibt._avg2+=ibt._T[2];
;;;3581   		}
;;;3582   	if(ibt._max_dispers_num!=3)
;;;3583   		{
;;;3584   		ibt._avg2+=ibt._T[3];
;;;3585   		}
;;;3586   
;;;3587   	t_box=(ibt._avg2/3)-273;
;;;3588   
;;;3589   	}*/
;;;3590   
;;;3591   
;;;3592   //*********************************************
;;;3593   
;;;3594   #ifndef TELECORE
;;;3595   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
002fbc  4931              LDR      r1,|L1.12420|
002fbe  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
002fc0  2855              CMP      r0,#0x55
002fc2  d105              BNE      |L1.12240|
002fc4  9801              LDR      r0,[sp,#4]
002fc6  28c8              CMP      r0,#0xc8
002fc8  dd02              BLE      |L1.12240|
002fca  8910              LDRH     r0,[r2,#8]  ; bat
002fcc  f8a60048          STRH     r0,[r6,#0x48]
                  |L1.12240|
;;;3596   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
002fd0  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
002fd2  2855              CMP      r0,#0x55
002fd4  d10b              BNE      |L1.12270|
002fd6  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
002fda  28c8              CMP      r0,#0xc8
002fdc  dd07              BLE      |L1.12270|
002fde  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
002fe2  f9b21008          LDRSH    r1,[r2,#8]  ; bat
002fe6  4288              CMP      r0,r1
002fe8  dd01              BLE      |L1.12270|
002fea  f8a60048          STRH     r0,[r6,#0x48]
                  |L1.12270|
;;;3597   #endif
;;;3598   
;;;3599   #ifdef TELECORE
;;;3600   Ibmax=0;
;;;3601   /*
;;;3602   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3603   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3604   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3605   */
;;;3606   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3607   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3608   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3609   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3610   #endif
;;;3611   //Ibmax=bat[0]._Ib;
;;;3612   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3613   
;;;3614   #ifdef UKU_TELECORE2017
;;;3615   Ibmax=0;
;;;3616   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3617   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3618   #endif
;;;3619   
;;;3620   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3621   Ibmax=Ib_ips_termokompensat;
002fee  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002ff2  f8a60048          STRH     r0,[r6,#0x48]
;;;3622   #endif
;;;3623   for(i=0;i<NUMIST;i++)
002ff6  f04f0100          MOV      r1,#0
002ffa  e075              B        |L1.12520|
                  |L1.12284|
                          DCD      Kuout
                  |L1.12288|
                          DCD      AUSW_MAIN
                  |L1.12292|
                          DCD      out_U
                  |L1.12296|
                          DCD      load_U
                  |L1.12300|
                          DCD      Kubps
                  |L1.12304|
                          DCD      bps_U
                  |L1.12308|
                          DCD      NUMIST
                  |L1.12312|
                          DCD      bps
                  |L1.12316|
                          DCD      bps_I
                  |L1.12320|
                          DCD      ||.bss||+0x40c
                  |L1.12324|
                          DCD      ND_EXT
                  |L1.12328|
                          DCD      Ktext
                  |L1.12332|
                          DCD      t_ext
                  |L1.12336|
                          DCD      Ib_ips_termokompensat
                  |L1.12340|
                          DCD      ibat_metr_buff_
                  |L1.12344|
                          DCD      bIBAT_SMKLBR
                  |L1.12348|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12352|
                          DCD      Kibat1
                  |L1.12356|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.12360|
                          DCD      bat
                  |L1.12364|
                          DCD      adc_buff_ext_
                  |L1.12368|
                          DCD      Kunet_ext
                  |L1.12372|
                          DCD      Uvv
                  |L1.12376|
                          DCD      Uvv0
                  |L1.12380|
                          DCD      net_U
                  |L1.12384|
                          DCD      eb2_data_short
                  |L1.12388|
                          DCD      Kvv_eb2
                  |L1.12392|
                          DCD      Uvv_eb2
                  |L1.12396|
                          DCD      Kpes_eb2
                  |L1.12400|
                          DCD      Upes_eb2
                  |L1.12404|
                          DCD      ibt
                  |L1.12408|
                          DCD      t_box
                  |L1.12412|
                          DCD      t_ext_can_nd
                  |L1.12416|
                          DCD      t_ext_can
                  |L1.12420|
                          DCD      BAT_IS_ON
                  |L1.12424|
;;;3624   	{
;;;3625   	if(bps[i]._cnt<25)
003088  ebc100c1          RSB      r0,r1,r1,LSL #3
00308c  eb001001          ADD      r0,r0,r1,LSL #4
003090  eb040080          ADD      r0,r4,r0,LSL #2
003094  78c5              LDRB     r5,[r0,#3]
003096  2d19              CMP      r5,#0x19
003098  d21c              BCS      |L1.12500|
;;;3626        	{
;;;3627        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
00309a  7985              LDRB     r5,[r0,#6]
00309c  79c6              LDRB     r6,[r0,#7]
00309e  eb052506          ADD      r5,r5,r6,LSL #8
0030a2  6245              STR      r5,[r0,#0x24]
;;;3628        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0030a4  7a05              LDRB     r5,[r0,#8]
0030a6  7a46              LDRB     r6,[r0,#9]
0030a8  eb052506          ADD      r5,r5,r6,LSL #8
0030ac  6205              STR      r5,[r0,#0x20]
;;;3629        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0030ae  7a85              LDRB     r5,[r0,#0xa]
0030b0  7ac6              LDRB     r6,[r0,#0xb]
0030b2  eb052506          ADD      r5,r5,r6,LSL #8
0030b6  61c5              STR      r5,[r0,#0x1c]
;;;3630        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0030b8  7b05              LDRB     r5,[r0,#0xc]
0030ba  6285              STR      r5,[r0,#0x28]
;;;3631        	bps[i]._adr_ee=bps[i]._buff[7];
0030bc  7b45              LDRB     r5,[r0,#0xd]
0030be  f8805052          STRB     r5,[r0,#0x52]
;;;3632        	bps[i]._flags_tm=bps[i]._buff[8];
0030c2  7b85              LDRB     r5,[r0,#0xe]
0030c4  f8805042          STRB     r5,[r0,#0x42]
;;;3633   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
0030c8  7c05              LDRB     r5,[r0,#0x10]
0030ca  7c46              LDRB     r6,[r0,#0x11]
0030cc  eb052506          ADD      r5,r5,r6,LSL #8
0030d0  64c5              STR      r5,[r0,#0x4c]
0030d2  e006              B        |L1.12514|
                  |L1.12500|
;;;3634        	} 
;;;3635   	else 
;;;3636        	{
;;;3637        	bps[i]._Uii=0; 
0030d4  61c3              STR      r3,[r0,#0x1c]
;;;3638        	bps[i]._Ii=0;
0030d6  6243              STR      r3,[r0,#0x24]
;;;3639        	bps[i]._Uin=0;
0030d8  6203              STR      r3,[r0,#0x20]
;;;3640        	bps[i]._Ti=0;
0030da  6283              STR      r3,[r0,#0x28]
;;;3641        	bps[i]._flags_tm=0; 
0030dc  f8803042          STRB     r3,[r0,#0x42]
;;;3642   	     bps[i]._rotor=0;    
0030e0  64c3              STR      r3,[r0,#0x4c]
                  |L1.12514|
0030e2  f1010101          ADD      r1,r1,#1              ;3623
0030e6  b2c9              UXTB     r1,r1                 ;3623
                  |L1.12520|
0030e8  42b9              CMP      r1,r7                 ;3623
0030ea  dbcd              BLT      |L1.12424|
;;;3643        	}
;;;3644        
;;;3645        }
;;;3646   
;;;3647   load_I=0;
0030ec  4dfb              LDR      r5,|L1.13532|
;;;3648   #ifdef TELECORE
;;;3649   
;;;3650   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3651   	{
;;;3652   	load_I-=lakb[i]._ch_curr/10;
;;;3653   	}*/
;;;3654   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3655   #elif UKU_TELECORE2017
;;;3656   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3657   #else
;;;3658   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
0030ee  f9b21008          LDRSH    r1,[r2,#8]  ; bat
0030f2  f04f000a          MOV      r0,#0xa
0030f6  fb91f1f0          SDIV     r1,r1,r0
0030fa  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
0030fe  fb92f0f0          SDIV     r0,r2,r0
003102  4408              ADD      r0,r0,r1
003104  f1c00000          RSB      r0,r0,#0
003108  b206              SXTH     r6,r0
00310a  802e              STRH     r6,[r5,#0]
;;;3659   #endif
;;;3660   Isumm=0;
00310c  4af4              LDR      r2,|L1.13536|
00310e  8013              STRH     r3,[r2,#0]
;;;3661   
;;;3662   for(i=0;i<NUMIST;i++)
003110  f04f0000          MOV      r0,#0
003114  e012              B        |L1.12604|
                  |L1.12566|
;;;3663        {
;;;3664        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003116  ebc001c0          RSB      r1,r0,r0,LSL #3
00311a  eb011100          ADD      r1,r1,r0,LSL #4
00311e  eb040181          ADD      r1,r4,r1,LSL #2
003122  f891c003          LDRB     r12,[r1,#3]
003126  f1bc0f05          CMP      r12,#5
00312a  d204              BCS      |L1.12598|
00312c  6a49              LDR      r1,[r1,#0x24]
00312e  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
003132  4461              ADD      r1,r1,r12
003134  8011              STRH     r1,[r2,#0]
                  |L1.12598|
003136  f1000001          ADD      r0,r0,#1              ;3662
00313a  b2c0              UXTB     r0,r0                 ;3662
                  |L1.12604|
00313c  42b8              CMP      r0,r7                 ;3662
00313e  dbea              BLT      |L1.12566|
;;;3665        }  
;;;3666        
;;;3667   load_I=load_I+Isumm;
003140  8810              LDRH     r0,[r2,#0]  ; Isumm
003142  4430              ADD      r0,r0,r6
003144  b200              SXTH     r0,r0
003146  8028              STRH     r0,[r5,#0]
;;;3668   if(load_I<0)load_I=0;
003148  2800              CMP      r0,#0
00314a  da00              BGE      |L1.12622|
00314c  802b              STRH     r3,[r5,#0]
                  |L1.12622|
;;;3669   
;;;3670   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3671   load_I=0;
00314e  802b              STRH     r3,[r5,#0]
;;;3672   
;;;3673   Isumm=0;
003150  8013              STRH     r3,[r2,#0]
;;;3674   
;;;3675   for(i=0;i<NUMIST;i++)
003152  f04f0000          MOV      r0,#0
003156  e00f              B        |L1.12664|
                  |L1.12632|
;;;3676        {
;;;3677        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003158  ebc001c0          RSB      r1,r0,r0,LSL #3
00315c  eb011100          ADD      r1,r1,r0,LSL #4
003160  eb040181          ADD      r1,r4,r1,LSL #2
003164  78ce              LDRB     r6,[r1,#3]
003166  2e05              CMP      r6,#5
003168  d203              BCS      |L1.12658|
00316a  6a49              LDR      r1,[r1,#0x24]
00316c  8816              LDRH     r6,[r2,#0]  ; Isumm
00316e  4431              ADD      r1,r1,r6
003170  8011              STRH     r1,[r2,#0]
                  |L1.12658|
003172  f1000001          ADD      r0,r0,#1              ;3675
003176  b2c0              UXTB     r0,r0                 ;3675
                  |L1.12664|
003178  42b8              CMP      r0,r7                 ;3675
00317a  dbed              BLT      |L1.12632|
;;;3678        }  
;;;3679        
;;;3680   load_I=load_I+Isumm;
00317c  8811              LDRH     r1,[r2,#0]  ; Isumm
00317e  eb030001          ADD      r0,r3,r1
003182  b200              SXTH     r0,r0
003184  8028              STRH     r0,[r5,#0]
;;;3681   if(load_I<0)load_I=0;
003186  2800              CMP      r0,#0
003188  da00              BGE      |L1.12684|
00318a  802b              STRH     r3,[r5,#0]
                  |L1.12684|
;;;3682   
;;;3683   #endif
;;;3684   #ifdef IPS_SGEP_GAZPROM
;;;3685   load_I=Isumm;
;;;3686   #endif
;;;3687   
;;;3688   
;;;3689   #ifdef UKU_GLONASS
;;;3690   inv[0]._Uio=6;
;;;3691   if (NUMINV)
;;;3692   	{
;;;3693   	for(i=0;i<NUMINV;i++)
;;;3694   		{
;;;3695   		if(bps[i+first_inv_slot]._cnt<25)
;;;3696        		{
;;;3697        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3698        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3699        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3700        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3701        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3702   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3703   			inv[i]._cnt=0;    
;;;3704        		} 
;;;3705   		else 
;;;3706        		{
;;;3707        		inv[i]._Uio=0; 
;;;3708        		inv[i]._Ii=0;
;;;3709        		inv[i]._Uin=0;
;;;3710        		inv[i]._Ti=0;
;;;3711        		inv[i]._flags_tm=0; 
;;;3712   //	     	inv[i]._rotor0;
;;;3713   			inv[i]._cnt=25;    
;;;3714        		}
;;;3715        	}
;;;3716      	}
;;;3717   #endif
;;;3718   
;;;3719   #ifndef UKU_GLONASS
;;;3720   if (NUMINV)
00318c  48d5              LDR      r0,|L1.13540|
00318e  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
003192  2d00              CMP      r5,#0
003194  d066              BEQ      |L1.12900|
;;;3721   	{
;;;3722   	for(i=0;i<NUMINV;i++)
003196  f04f0200          MOV      r2,#0
;;;3723   		{
;;;3724   		if(bps[i+20]._cnt<25)
;;;3725        		{
;;;3726        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
00319a  4ed3              LDR      r6,|L1.13544|
00319c  e060              B        |L1.12896|
                  |L1.12702|
00319e  f1020014          ADD      r0,r2,#0x14           ;3724
0031a2  ebc001c0          RSB      r1,r0,r0,LSL #3       ;3724
0031a6  eb011000          ADD      r0,r1,r0,LSL #4       ;3724
0031aa  eb040080          ADD      r0,r4,r0,LSL #2       ;3724
0031ae  78c1              LDRB     r1,[r0,#3]            ;3724
0031b0  2919              CMP      r1,#0x19              ;3724
0031b2  d239              BCS      |L1.12840|
0031b4  7981              LDRB     r1,[r0,#6]
0031b6  79c7              LDRB     r7,[r0,#7]
0031b8  eb012707          ADD      r7,r1,r7,LSL #8
0031bc  eb020142          ADD      r1,r2,r2,LSL #1
0031c0  eb061141          ADD      r1,r6,r1,LSL #5
0031c4  61cf              STR      r7,[r1,#0x1c]
;;;3727        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0031c6  7a07              LDRB     r7,[r0,#8]
0031c8  f890c009          LDRB     r12,[r0,#9]
0031cc  eb07270c          ADD      r7,r7,r12,LSL #8
0031d0  62cf              STR      r7,[r1,#0x2c]
;;;3728        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
0031d2  7a87              LDRB     r7,[r0,#0xa]
0031d4  f890c00b          LDRB     r12,[r0,#0xb]
0031d8  eb07270c          ADD      r7,r7,r12,LSL #8
0031dc  618f              STR      r7,[r1,#0x18]
;;;3729        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
0031de  7b07              LDRB     r7,[r0,#0xc]
0031e0  620f              STR      r7,[r1,#0x20]
;;;3730        		inv[i]._flags_tm=bps[i+20]._buff[7];
0031e2  7b47              LDRB     r7,[r0,#0xd]
0031e4  f8817046          STRB     r7,[r1,#0x46]
;;;3731        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
0031e8  7b87              LDRB     r7,[r0,#0xe]
0031ea  f890c00f          LDRB     r12,[r0,#0xf]
0031ee  eb07270c          ADD      r7,r7,r12,LSL #8
0031f2  628f              STR      r7,[r1,#0x28]
;;;3732        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
0031f4  7c07              LDRB     r7,[r0,#0x10]
0031f6  f890c011          LDRB     r12,[r0,#0x11]
0031fa  eb07270c          ADD      r7,r7,r12,LSL #8
0031fe  624f              STR      r7,[r1,#0x24]
;;;3733   			inv[i]._cnt=0;
003200  708b              STRB     r3,[r1,#2]
;;;3734   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
003202  7c87              LDRB     r7,[r0,#0x12]
003204  f8817059          STRB     r7,[r1,#0x59]
;;;3735   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
003208  7cc7              LDRB     r7,[r0,#0x13]
00320a  f881705a          STRB     r7,[r1,#0x5a]
;;;3736   			inv[i]._Pnom=bps[i+20]._buff[14]; 
00320e  7d07              LDRB     r7,[r0,#0x14]
003210  f8817058          STRB     r7,[r1,#0x58]
;;;3737   			inv[i]._net_contr_en=bps[i+20]._buff[15];
003214  7d47              LDRB     r7,[r0,#0x15]
003216  f881705b          STRB     r7,[r1,#0x5b]
;;;3738   			inv[i]._pwm_en=bps[i+20]._buff[16];  
00321a  7d87              LDRB     r7,[r0,#0x16]
00321c  f881705c          STRB     r7,[r1,#0x5c]
;;;3739   			inv[i]._phase_mode=bps[i+20]._buff[17];  
003220  7dc0              LDRB     r0,[r0,#0x17]
003222  f881005d          STRB     r0,[r1,#0x5d]
003226  e018              B        |L1.12890|
                  |L1.12840|
;;;3740        		} 
;;;3741   		else 
;;;3742        		{
;;;3743         		inv[i]._Ii=0;
003228  eb020042          ADD      r0,r2,r2,LSL #1
00322c  eb061040          ADD      r0,r6,r0,LSL #5
003230  61c3              STR      r3,[r0,#0x1c]
;;;3744   			inv[i]._Pio=0;
003232  62c3              STR      r3,[r0,#0x2c]
;;;3745   			inv[i]._Uio=0;
003234  6183              STR      r3,[r0,#0x18]
;;;3746        		inv[i]._Ti=0;
003236  6203              STR      r3,[r0,#0x20]
;;;3747        		inv[i]._flags_tm=0; 
003238  f8803046          STRB     r3,[r0,#0x46]
;;;3748        		inv[i]._Uil=0;
00323c  6243              STR      r3,[r0,#0x24]
;;;3749        		inv[i]._Uin=0;
00323e  6283              STR      r3,[r0,#0x28]
;;;3750   			inv[i]._cnt=25; 
003240  f04f0119          MOV      r1,#0x19
003244  7081              STRB     r1,[r0,#2]
;;;3751   			inv[i]._Uoutmin=0; 
003246  f8803059          STRB     r3,[r0,#0x59]
;;;3752   			inv[i]._Uoutmax=0; 
00324a  f880305a          STRB     r3,[r0,#0x5a]
;;;3753   			inv[i]._Pnom=0; 
00324e  f8803058          STRB     r3,[r0,#0x58]
;;;3754   			inv[i]._net_contr_en=0;
003252  f880305b          STRB     r3,[r0,#0x5b]
;;;3755   			inv[i]._pwm_en=0;   
003256  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.12890|
00325a  f1020201          ADD      r2,r2,#1              ;3722
00325e  b2d2              UXTB     r2,r2                 ;3722
                  |L1.12896|
003260  42aa              CMP      r2,r5                 ;3722
003262  db9c              BLT      |L1.12702|
                  |L1.12900|
;;;3756   			   
;;;3757        		}
;;;3758        	}
;;;3759      	}
;;;3760   #endif
;;;3761   
;;;3762   #ifdef GLADKOV
;;;3763   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3764   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3765   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3766   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3767   inv[0]._flags_tm=bps[4]._buff[7];
;;;3768   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3769   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3770   inv[0]._cnt=0;    
;;;3771   
;;;3772   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3773   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3774   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3775   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3776   inv[1]._flags_tm=bps[21]._buff[7];
;;;3777   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3778   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3779   inv[1]._cnt=0;    
;;;3780   #endif
;;;3781   
;;;3782   /*
;;;3783   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3784   	{
;;;3785   	lakb[0]._battCommState=0;
;;;3786   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3787   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3788   	
;;;3789   	if(lakb[0]._battCommState==0)
;;;3790   		{	
;;;3791   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3792   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3793   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3794   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3795   		}
;;;3796   	}
;;;3797   */
;;;3798   
;;;3799   #ifdef UKU_TELECORE2015
;;;3800   
;;;3801   	if(BAT_TYPE==2)
;;;3802   		{
;;;3803   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3804   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3805   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3806   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3807   		
;;;3808   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3809   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3810   	
;;;3811   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3812   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3813   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3814   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3815   	
;;;3816   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3817   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3818   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3819   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3820   	
;;;3821   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3822   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3823   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3824   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3825   	
;;;3826   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3827   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3828   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3829   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3830   	
;;;3831   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3832   	
;;;3833   	
;;;3834   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3835   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3836   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3837   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3838   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3839   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3840   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3841   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3842   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3843   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3844   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3845   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3846   	
;;;3847   		if(lakb[i]._rat_cap==0)
;;;3848   			{
;;;3849   			if(lakb[i]._isOnCnt)
;;;3850   				{
;;;3851   				lakb[i]._isOnCnt--;
;;;3852   				if(lakb[i]._isOnCnt==0)
;;;3853   					{
;;;3854   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3855   					}
;;;3856   				}
;;;3857   			}
;;;3858   		else 
;;;3859   			{
;;;3860   			if(lakb[i]._isOnCnt<50)
;;;3861   				{
;;;3862   				lakb[i]._isOnCnt++;
;;;3863   				if(lakb[i]._isOnCnt==50)
;;;3864   					{
;;;3865   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3866   					}
;;;3867   				}
;;;3868   			}
;;;3869   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3870   		}
;;;3871   	else if(BAT_TYPE==3)
;;;3872   		{
;;;3873   		//short numOfPacks;
;;;3874   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3875   		
;;;3876   		#ifndef UKU_TELECORE2016
;;;3877   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3878   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3879   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3880   		if(numOfPacks)numOfPacks-=1;
;;;3881   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3882   		plazma_numOfCells=numOfCells;
;;;3883   		plazma_numOfTemperCells=numOfTemperCells;
;;;3884   		plazma_numOfPacks=numOfPacks;
;;;3885   
;;;3886   
;;;3887   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3888   
;;;3889   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3890   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3891   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3892   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3893   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3894   							);	  
;;;3895   
;;;3896   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3897   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3898   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3899   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3900   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3901   							)/10;
;;;3902   
;;;3903   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3904   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3905   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3906   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3907   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3908   							)-2730;
;;;3909   
;;;3910   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3911   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3912   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3913   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3914   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3915   							)/10;
;;;3916   
;;;3917   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3918   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3919   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3920   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3921   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3922   							)/10;
;;;3923   		#endif
;;;3924   		
;;;3925   		#ifdef UKU_TELECORE2016
;;;3926   		{
;;;3927   		char i;
;;;3928   		
;;;3929   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3930   			{
;;;3931   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3932   			}
;;;3933   		}
;;;3934   		#endif
;;;3935   		
;;;3936   										  
;;;3937   		}
;;;3938   	
;;;3939   if(sacredSunSilentCnt<3) 
;;;3940   	{
;;;3941       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3942       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3943      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3944   	}
;;;3945   else 
;;;3946   	{
;;;3947       	//bat[0]._Ub=0;
;;;3948       	//bat[0]._Tb=0;
;;;3949      	//bat[0]._Ib=0;
;;;3950   	}
;;;3951   
;;;3952   if(BAT_TYPE==1)
;;;3953   	{
;;;3954   	char i;
;;;3955   	for(i=0;i<1;i++)
;;;3956   		{
;;;3957   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3958   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3959   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3960   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3961   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;3962   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3963   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;3964   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3965   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;3966   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;3967   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3968   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;3969   		lakb[i]._flags1= lakb_damp[i][34];
;;;3970   		lakb[i]._flags2= lakb_damp[i][35];
;;;3971   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;3972   
;;;3973   /*		if(lakb[i]._rat_cap==0)
;;;3974   			{
;;;3975   			if(lakb[i]._isOnCnt)
;;;3976   				{
;;;3977   				lakb[i]._isOnCnt--;
;;;3978   				if(lakb[i]._isOnCnt==0)
;;;3979   					{
;;;3980   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3981   					}
;;;3982   				}
;;;3983   			}
;;;3984   		else 
;;;3985   			{
;;;3986   			if(lakb[i]._isOnCnt<50)
;;;3987   				{
;;;3988   				lakb[i]._isOnCnt++;
;;;3989   				if(lakb[i]._isOnCnt==50)
;;;3990   					{
;;;3991   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3992   					}
;;;3993   				}
;;;3994   			} */
;;;3995   		gran(&lakb[i]._isOnCnt,0,50);
;;;3996   	 	}
;;;3997   
;;;3998   	if(lakb_damp[0][41]==100)
;;;3999   		{
;;;4000   		li_bat._485Error=1;
;;;4001   		}
;;;4002   	if(lakb_damp[0][41]==0)
;;;4003   		{
;;;4004   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4005   		li_bat._485Error=0;
;;;4006   		}
;;;4007   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4008   
;;;4009   
;;;4010   	}
;;;4011   
;;;4012   
;;;4013   #endif
;;;4014   
;;;4015   		#ifdef UKU_TELECORE2017
;;;4016   		{
;;;4017   		char i;
;;;4018   		
;;;4019   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4020   			{
;;;4021   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4022   			}
;;;4023   		}
;;;4024   		#endif
;;;4025   #ifdef UKU_TELECORE2015
;;;4026   //вычисление параметров работы батареи
;;;4027   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4028   li_bat._batStat=bsOK;
;;;4029   if(BAT_TYPE==1) //COSLIGHT
;;;4030   	{
;;;4031   	if(li_bat._batStat==bsOK)
;;;4032   		{
;;;4033   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4034   
;;;4035   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4036   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4037   	
;;;4038   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4039   		li_bat._soc=lakb[0]._s_o_c;
;;;4040   		li_bat._soh=lakb[0]._s_o_h;
;;;4041   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4042   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4043   		li_bat._rbt=lakb[0]._r_b_t;
;;;4044   		}
;;;4045   	else 
;;;4046   		{
;;;4047   		li_bat._Ub=bat[0]._Ub;
;;;4048   		li_bat._Ib=bat[0]._Ib/10;
;;;4049   		li_bat._Tb=bat[0]._Tb;
;;;4050   		}
;;;4051   
;;;4052   	if((li_bat._485Error)||(li_bat._canError))
;;;4053   		{
;;;4054   		li_bat._batStat=bsOFF;
;;;4055   		}
;;;4056   	else li_bat._batStat=bsOK;
;;;4057   	}
;;;4058   else if(BAT_TYPE==2) //SACRED SUN
;;;4059   	{
;;;4060   	}
;;;4061   else if(BAT_TYPE==3) //ZTT
;;;4062   	{
;;;4063   	if(li_bat._batStat==bsOK)
;;;4064   		{
;;;4065   
;;;4066   		}
;;;4067   	}
;;;4068   #endif
;;;4069   
;;;4070   
;;;4071   /*
;;;4072   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4073   	{
;;;4074   
;;;4075   
;;;4076   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4077   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4078   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4079   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4080   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4081   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4082   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4083   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4084   
;;;4085   	tempSS=0;
;;;4086   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4087   
;;;4088   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4089   
;;;4090   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4091   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4092   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4093   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4094   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4095   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4096   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4097   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4098   
;;;4099   	tempSS=0;
;;;4100   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4101   
;;;4102   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4103   
;;;4104   
;;;4105   	}*/
;;;4106   }
003264  b007              ADD      sp,sp,#0x1c
003266  e8bd8ff0          POP      {r4-r11,pc}
;;;4107   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4167   //-----------------------------------------------
;;;4168   void mnemo_hndl(void)
00326a  4aa0              LDR      r2,|L1.13548|
;;;4169   {
;;;4170   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4171   	{
;;;4172   	if(mnemo_cnt)mnemo_cnt--;
00326c  49a0              LDR      r1,|L1.13552|
00326e  7810              LDRB     r0,[r2,#0]            ;4170  ; a_ind
003270  2804              CMP      r0,#4                 ;4170
003272  d001              BEQ      |L1.12920|
003274  2801              CMP      r0,#1                 ;4170
003276  d105              BNE      |L1.12932|
                  |L1.12920|
003278  7850              LDRB     r0,[r2,#1]            ;4170  ; a_ind
00327a  b918              CBNZ     r0,|L1.12932|
00327c  489d              LDR      r0,|L1.13556|
00327e  7800              LDRB     r0,[r0,#0]            ;4170  ; MNEMO_ON
003280  2855              CMP      r0,#0x55              ;4170
003282  d003              BEQ      |L1.12940|
                  |L1.12932|
;;;4173   	}
;;;4174   else mnemo_cnt=MNEMO_TIME;
003284  489c              LDR      r0,|L1.13560|
003286  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
003288  7008              STRB     r0,[r1,#0]
                  |L1.12938|
;;;4175   }
00328a  4770              BX       lr
                  |L1.12940|
00328c  7808              LDRB     r0,[r1,#0]            ;4172  ; mnemo_cnt
00328e  2800              CMP      r0,#0                 ;4172
003290  d0fb              BEQ      |L1.12938|
003292  f1a00001          SUB      r0,r0,#1              ;4172
003296  7008              STRB     r0,[r1,#0]            ;4172
003298  4770              BX       lr
;;;4176   
                          ENDP

                  adc_init PROC
;;;4177   //-----------------------------------------------
;;;4178   void adc_init(void)
00329a  4898              LDR      r0,|L1.13564|
;;;4179   {
;;;4180   
;;;4181   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
00329c  6841              LDR      r1,[r0,#4]
00329e  f4212140          BIC      r1,r1,#0xc0000
0032a2  f4412180          ORR      r1,r1,#0x40000
0032a6  6041              STR      r1,[r0,#4]
;;;4182   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
0032a8  6841              LDR      r1,[r0,#4]
0032aa  f4213140          BIC      r1,r1,#0x30000
0032ae  f4413180          ORR      r1,r1,#0x10000
0032b2  6041              STR      r1,[r0,#4]
;;;4183   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0032b4  6841              LDR      r1,[r0,#4]
0032b6  f4214140          BIC      r1,r1,#0xc000
0032ba  f4414180          ORR      r1,r1,#0x4000
0032be  6041              STR      r1,[r0,#4]
;;;4184   
;;;4185   
;;;4186   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0032c0  6c41              LDR      r1,[r0,#0x44]
0032c2  f4212140          BIC      r1,r1,#0xc0000
0032c6  f4412100          ORR      r1,r1,#0x80000
0032ca  6441              STR      r1,[r0,#0x44]
;;;4187   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0032cc  6c41              LDR      r1,[r0,#0x44]
0032ce  f4213140          BIC      r1,r1,#0x30000
0032d2  f4413100          ORR      r1,r1,#0x20000
0032d6  6441              STR      r1,[r0,#0x44]
;;;4188   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0032d8  6c41              LDR      r1,[r0,#0x44]
0032da  f4214140          BIC      r1,r1,#0xc000
0032de  f4414100          ORR      r1,r1,#0x8000
0032e2  6441              STR      r1,[r0,#0x44]
;;;4189   
;;;4190   SET_REG(LPC_ADC->ADCR,0,24,3);
0032e4  4886              LDR      r0,|L1.13568|
0032e6  6801              LDR      r1,[r0,#0]
0032e8  f02161e0          BIC      r1,r1,#0x7000000
0032ec  6001              STR      r1,[r0,#0]
;;;4191   
;;;4192   SET_REG(LPC_ADC->ADCR,1,21,1);
0032ee  6801              LDR      r1,[r0,#0]
0032f0  f4411100          ORR      r1,r1,#0x200000
0032f4  6001              STR      r1,[r0,#0]
;;;4193   SET_REG(LPC_ADC->ADCR,0,16,1);
0032f6  6801              LDR      r1,[r0,#0]
0032f8  f4213180          BIC      r1,r1,#0x10000
0032fc  6001              STR      r1,[r0,#0]
;;;4194   SET_REG(LPC_ADC->ADCR,1,8,8);
0032fe  6801              LDR      r1,[r0,#0]
003300  f421417f          BIC      r1,r1,#0xff00
003304  f4417180          ORR      r1,r1,#0x100
003308  6001              STR      r1,[r0,#0]
;;;4195   
;;;4196   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4197   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4198   	
;;;4199   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4200        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4201        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4202   
;;;4203   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
00330a  f44f7180          MOV      r1,#0x100
00330e  60c1              STR      r1,[r0,#0xc]
003310  487c              LDR      r0,|L1.13572|
003312  f44f0180          MOV      r1,#0x400000
003316  6001              STR      r1,[r0,#0]
;;;4204   
;;;4205   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4206   
;;;4207   
;;;4208   }
003318  4770              BX       lr
;;;4209   
                          ENDP

                  adc_drv7 PROC
;;;4210   //-----------------------------------------------
;;;4211   void adc_drv7(void) //(Uсети - постоянка)
00331a  e92d41f0          PUSH     {r4-r8,lr}
;;;4212   {
;;;4213   //int temp_S;
;;;4214   //char i;
;;;4215   //signed short temp_SS;
;;;4216   
;;;4217   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00331e  4c7a              LDR      r4,|L1.13576|
003320  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003322  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003324  1a40              SUBS     r0,r0,r1
003326  b200              SXTH     r0,r0
003328  f7fffffe          BL       abs_pal
00332c  1da6              ADDS     r6,r4,#6
00332e  8030              STRH     r0,[r6,#0]
;;;4218   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003330  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003332  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
003334  1a40              SUBS     r0,r0,r1
003336  b200              SXTH     r0,r0
003338  f7fffffe          BL       abs_pal
00333c  8070              STRH     r0,[r6,#2]
;;;4219   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00333e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003340  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003342  1a40              SUBS     r0,r0,r1
003344  b200              SXTH     r0,r0
003346  f7fffffe          BL       abs_pal
00334a  80b0              STRH     r0,[r6,#4]
;;;4220   
;;;4221   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4222   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4223   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4224   
;;;4225   
;;;4226   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
00334c  f44f7196          MOV      r1,#0x12c
;;;4227   	{
;;;4228   	adc_result=adc_self_ch_buff[2];
003350  f1a405ee          SUB      r5,r4,#0xee
003354  4288              CMP      r0,r1                 ;4226
003356  da02              BGE      |L1.13150|
003358  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00335a  8768              STRH     r0,[r5,#0x3a]
00335c  e00c              B        |L1.13176|
                  |L1.13150|
;;;4229   	} 
;;;4230   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
00335e  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
003362  4288              CMP      r0,r1
003364  da02              BGE      |L1.13164|
;;;4231   	{
;;;4232   	adc_result=adc_self_ch_buff[1];
003366  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003368  8768              STRH     r0,[r5,#0x3a]
00336a  e005              B        |L1.13176|
                  |L1.13164|
;;;4233   	}
;;;4234   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
00336c  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
003370  4288              CMP      r0,r1
003372  da01              BGE      |L1.13176|
;;;4235   	{
;;;4236   	adc_result=adc_self_ch_buff[0];
003374  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
003376  8768              STRH     r0,[r5,#0x3a]
                  |L1.13176|
;;;4237   	}
;;;4238       //adc_result=92;
;;;4239   
;;;4240   if(adc_ch_net)
003378  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
00337a  2600              MOVS     r6,#0
00337c  b347              CBZ      r7,|L1.13264|
;;;4241   	{
;;;4242   
;;;4243   	main_power_buffer[0]+=(long)(adc_result);
00337e  4863              LDR      r0,|L1.13580|
003380  f9b5103a          LDRSH    r1,[r5,#0x3a]  ; adc_result
003384  6802              LDR      r2,[r0,#0]  ; main_power_buffer
003386  440a              ADD      r2,r2,r1
003388  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4244   	main_power_buffer[1]+=(long)(adc_result);
00338a  6842              LDR      r2,[r0,#4]  ; main_power_buffer
00338c  440a              ADD      r2,r2,r1
00338e  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4245   	main_power_buffer[2]+=(long)(adc_result);
003390  6882              LDR      r2,[r0,#8]  ; main_power_buffer
003392  440a              ADD      r2,r2,r1
003394  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4246   	main_power_buffer[3]+=(long)(adc_result);
003396  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
003398  4411              ADD      r1,r1,r2
00339a  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4247   
;;;4248   	adc_net_buff_cnt++;
00339c  f8b51042          LDRH     r1,[r5,#0x42]  ; adc_net_buff_cnt
0033a0  f1010101          ADD      r1,r1,#1
0033a4  b209              SXTH     r1,r1
0033a6  f8a51042          STRH     r1,[r5,#0x42]
;;;4249   	if(adc_net_buff_cnt>=0x1000)
0033aa  f5b15f80          CMP      r1,#0x1000
0033ae  db01              BLT      |L1.13236|
;;;4250   		{
;;;4251   		adc_net_buff_cnt=0;
0033b0  f8a56042          STRH     r6,[r5,#0x42]
                  |L1.13236|
;;;4252   		}
;;;4253   	if((adc_net_buff_cnt&0x03ff)==0)
0033b4  f9b51042          LDRSH    r1,[r5,#0x42]  ; adc_net_buff_cnt
0033b8  058a              LSLS     r2,r1,#22
0033ba  d131              BNE      |L1.13344|
;;;4254   		{
;;;4255   		#ifdef UKU_220
;;;4256   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4257   		#else
;;;4258   		#ifdef UKU_220_V2
;;;4259   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4260   		#else
;;;4261   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0033bc  ea4f21a1          ASR      r1,r1,#10
0033c0  f8502021          LDR      r2,[r0,r1,LSL #2]
0033c4  ea4f2222          ASR      r2,r2,#8
0033c8  872a              STRH     r2,[r5,#0x38]
;;;4262   		#endif
;;;4263   		#endif
;;;4264   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0033ca  f8406021          STR      r6,[r0,r1,LSL #2]
0033ce  e027              B        |L1.13344|
                  |L1.13264|
;;;4265   		}
;;;4266   
;;;4267   
;;;4268   	} 
;;;4269   else if(!adc_ch_net)
;;;4270   	{
;;;4271   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0033d0  484f              LDR      r0,|L1.13584|
0033d2  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
0033d4  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
0033d6  eb001384          ADD      r3,r0,r4,LSL #6
0033da  f9b5103a          LDRSH    r1,[r5,#0x3a]  ; adc_result
0033de  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4272   	
;;;4273   	if((adc_ch_cnt&0x03)==0)
0033e2  0790              LSLS     r0,r2,#30
0033e4  d10f              BNE      |L1.13318|
;;;4274   		{
;;;4275   		long temp_L;
;;;4276   		char i;
;;;4277   		temp_L=0;
0033e6  4601              MOV      r1,r0
                  |L1.13288|
;;;4278   		for(i=0;i<16;i++)
;;;4279   			{
;;;4280   			temp_L+=adc_buff[adc_ch][i];
0033e8  f853c020          LDR      r12,[r3,r0,LSL #2]
0033ec  4461              ADD      r1,r1,r12
0033ee  f1000001          ADD      r0,r0,#1              ;4278
0033f2  b2c0              UXTB     r0,r0                 ;4278
0033f4  2810              CMP      r0,#0x10              ;4278
0033f6  d3f7              BCC      |L1.13288|
;;;4281   			}
;;;4282   		adc_buff_[adc_ch]= (short)(temp_L>>4);
0033f8  ea4f1021          ASR      r0,r1,#4
0033fc  4943              LDR      r1,|L1.13580|
0033fe  f1a10120          SUB      r1,r1,#0x20
003402  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.13318|
;;;4283   
;;;4284   		//adc_buff_[3]=346;
;;;4285   		}
;;;4286   	if(++adc_ch>=16) 
003406  1c64              ADDS     r4,r4,#1
003408  b2e0              UXTB     r0,r4
00340a  74a8              STRB     r0,[r5,#0x12]
00340c  2810              CMP      r0,#0x10
00340e  d307              BCC      |L1.13344|
;;;4287   		{
;;;4288   		adc_ch=0;
003410  74ae              STRB     r6,[r5,#0x12]
;;;4289   		adc_ch_cnt++;
003412  f1020201          ADD      r2,r2,#1
003416  b2d0              UXTB     r0,r2
003418  74e8              STRB     r0,[r5,#0x13]
;;;4290   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
00341a  2810              CMP      r0,#0x10
00341c  d300              BCC      |L1.13344|
00341e  74ee              STRB     r6,[r5,#0x13]
                  |L1.13344|
;;;4291   		}
;;;4292   	}
;;;4293   
;;;4294   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4295   
;;;4296   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4297   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4298   /*
;;;4299   	{
;;;4300   	if((adc_cnt1&0x03)==0)
;;;4301   		{
;;;4302   		temp_S=0;
;;;4303   		for(i=0;i<16;i++)
;;;4304   			{
;;;4305   			temp_S+=adc_buff[adc_ch][i];
;;;4306   			} 
;;;4307            	adc_buff_[adc_ch]=temp_S>>4;
;;;4308             }
;;;4309   	}*/
;;;4310   
;;;4311   
;;;4312   		  
;;;4313   
;;;4314   adc_self_ch_cnt=0;
003420  742e              STRB     r6,[r5,#0x10]
;;;4315   
;;;4316   adc_ch_net++;
003422  f1070701          ADD      r7,r7,#1
;;;4317   adc_ch_net&=1;
003426  f0070001          AND      r0,r7,#1
00342a  7468              STRB     r0,[r5,#0x11]
;;;4318   
;;;4319   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4320   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4321   
;;;4322   if(adc_ch_net)
;;;4323   	{
;;;4324   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4325   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4326   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
00342c  4a34              LDR      r2,|L1.13568|
00342e  b130              CBZ      r0,|L1.13374|
003430  6810              LDR      r0,[r2,#0]
003432  f02000ff          BIC      r0,r0,#0xff
003436  f1000004          ADD      r0,r0,#4
00343a  6010              STR      r0,[r2,#0]
00343c  e03d              B        |L1.13498|
                  |L1.13374|
;;;4327   	}
;;;4328   else
;;;4329   	{
;;;4330   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4331   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4332   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
00343e  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
003440  0708              LSLS     r0,r1,#28
003442  d406              BMI      |L1.13394|
003444  6810              LDR      r0,[r2,#0]
003446  f02000ff          BIC      r0,r0,#0xff
00344a  f1000001          ADD      r0,r0,#1
00344e  6010              STR      r0,[r2,#0]
003450  e005              B        |L1.13406|
                  |L1.13394|
;;;4333   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
003452  6810              LDR      r0,[r2,#0]
003454  f02000ff          BIC      r0,r0,#0xff
003458  f1000002          ADD      r0,r0,#2
00345c  6010              STR      r0,[r2,#0]
                  |L1.13406|
;;;4334   
;;;4335   
;;;4336   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
00345e  482d              LDR      r0,|L1.13588|
003460  6803              LDR      r3,[r0,#0]
003462  f0435380          ORR      r3,r3,#0x10000000
003466  6003              STR      r3,[r0,#0]
;;;4337   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
003468  6a03              LDR      r3,[r0,#0x20]
00346a  f0434380          ORR      r3,r3,#0x40000000
00346e  6203              STR      r3,[r0,#0x20]
;;;4338   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
003470  6e03              LDR      r3,[r0,#0x60]
003472  f0436380          ORR      r3,r3,#0x4000000
003476  6603              STR      r3,[r0,#0x60]
;;;4339   
;;;4340   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
003478  07cb              LSLS     r3,r1,#31
00347a  d00a              BEQ      |L1.13458|
;;;4341   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
00347c  6943              LDR      r3,[r0,#0x14]
00347e  f0435380          ORR      r3,r3,#0x10000000
003482  6143              STR      r3,[r0,#0x14]
                  |L1.13444|
;;;4342   
;;;4343   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
003484  078b              LSLS     r3,r1,#30
003486  d409              BMI      |L1.13468|
003488  6b43              LDR      r3,[r0,#0x34]
00348a  f0234380          BIC      r3,r3,#0x40000000
00348e  6343              STR      r3,[r0,#0x34]
003490  e008              B        |L1.13476|
                  |L1.13458|
003492  6943              LDR      r3,[r0,#0x14]         ;4340
003494  f0235380          BIC      r3,r3,#0x10000000     ;4340
003498  6143              STR      r3,[r0,#0x14]         ;4340
00349a  e7f3              B        |L1.13444|
                  |L1.13468|
;;;4344   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
00349c  6b43              LDR      r3,[r0,#0x34]
00349e  f0434380          ORR      r3,r3,#0x40000000
0034a2  6343              STR      r3,[r0,#0x34]
                  |L1.13476|
;;;4345   
;;;4346   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
0034a4  0749              LSLS     r1,r1,#29
0034a6  d404              BMI      |L1.13490|
0034a8  6f41              LDR      r1,[r0,#0x74]
0034aa  f0216180          BIC      r1,r1,#0x4000000
0034ae  6741              STR      r1,[r0,#0x74]
0034b0  e003              B        |L1.13498|
                  |L1.13490|
;;;4347   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0034b2  6f41              LDR      r1,[r0,#0x74]
0034b4  f0416180          ORR      r1,r1,#0x4000000
0034b8  6741              STR      r1,[r0,#0x74]
                  |L1.13498|
;;;4348   	}
;;;4349   	
;;;4350   
;;;4351   
;;;4352   
;;;4353   LPC_ADC->ADCR |=  (1<<24);
0034ba  6810              LDR      r0,[r2,#0]
0034bc  f0407080          ORR      r0,r0,#0x1000000
0034c0  6010              STR      r0,[r2,#0]
;;;4354   
;;;4355   }
0034c2  e8bd81f0          POP      {r4-r8,pc}
;;;4356   
                          ENDP

                  avg_hndl PROC
;;;4613   //-----------------------------------------------
;;;4614   void avg_hndl(void)
0034c6  b5f0              PUSH     {r4-r7,lr}
;;;4615   { 
;;;4616   char i;
;;;4617   
;;;4618   //#define AVGCNTMAX	5
;;;4619   if(avg_main_cnt)
0034c8  4d0f              LDR      r5,|L1.13576|
0034ca  3dee              SUBS     r5,r5,#0xee
0034cc  f9b50034          LDRSH    r0,[r5,#0x34]  ; avg_main_cnt
0034d0  b118              CBZ      r0,|L1.13530|
;;;4620   	{
;;;4621   	avg_main_cnt--;
0034d2  f1a00001          SUB      r0,r0,#1
0034d6  86a8              STRH     r0,[r5,#0x34]
;;;4622   	goto avg_hndl_end;
0034d8  e0b3              B        |L1.13890|
                  |L1.13530|
0034da  e01d              B        |L1.13592|
                  |L1.13532|
                          DCD      load_I
                  |L1.13536|
                          DCD      Isumm
                  |L1.13540|
                          DCD      NUMINV
                  |L1.13544|
                          DCD      inv
                  |L1.13548|
                          DCD      a_ind
                  |L1.13552|
                          DCD      mnemo_cnt
                  |L1.13556|
                          DCD      MNEMO_ON
                  |L1.13560|
                          DCD      MNEMO_TIME
                  |L1.13564|
                          DCD      0x4002c000
                  |L1.13568|
                          DCD      0x40034000
                  |L1.13572|
                          DCD      0xe000e100
                  |L1.13576|
                          DCD      ||area_number.25||+0xee
                  |L1.13580|
                          DCD      ||.bss||+0x42c
                  |L1.13584|
                          DCD      ||.bss||+0xc
                  |L1.13588|
                          DCD      0x2009c000
                  |L1.13592|
;;;4623   	}                 
;;;4624   
;;;4625   avg_num=0;
003518  f04f0600          MOV      r6,#0
00351c  76ae              STRB     r6,[r5,#0x1a]
;;;4626   
;;;4627   for(i=0;i<NUMIST;i++)
00351e  4630              MOV      r0,r6
003520  49ff              LDR      r1,|L1.14624|
;;;4628   	{
;;;4629   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
003522  4bfe              LDR      r3,|L1.14620|
003524  f9b12000          LDRSH    r2,[r1,#0]            ;4627
003528  e012              B        |L1.13648|
                  |L1.13610|
00352a  ebc001c0          RSB      r1,r0,r0,LSL #3
00352e  eb011100          ADD      r1,r1,r0,LSL #4
003532  eb030181          ADD      r1,r3,r1,LSL #2
003536  788c              LDRB     r4,[r1,#2]
003538  2c01              CMP      r4,#1
00353a  d106              BNE      |L1.13642|
00353c  78c9              LDRB     r1,[r1,#3]
00353e  2914              CMP      r1,#0x14
003540  d203              BCS      |L1.13642|
003542  7ea9              LDRB     r1,[r5,#0x1a]  ; avg_num
003544  f1010101          ADD      r1,r1,#1
003548  76a9              STRB     r1,[r5,#0x1a]
                  |L1.13642|
00354a  f1000001          ADD      r0,r0,#1              ;4627
00354e  b2c0              UXTB     r0,r0                 ;4627
                  |L1.13648|
003550  4290              CMP      r0,r2                 ;4627
003552  dbea              BLT      |L1.13610|
;;;4630   	}
;;;4631   
;;;4632   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4633   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4634   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4635   
;;;4636   	
;;;4637   if(avg_num<2)
003554  7eaf              LDRB     r7,[r5,#0x1a]  ; avg_num
003556  2f02              CMP      r7,#2
003558  d373              BCC      |L1.13890|
;;;4638   	{
;;;4639   	goto avg_hndl_end;
;;;4640   	}
;;;4641   	
;;;4642   else
;;;4643   	{
;;;4644   	i_avg_min=5000;
00355a  4cf2              LDR      r4,|L1.14628|
00355c  f2413088          MOV      r0,#0x1388
003560  6220              STR      r0,[r4,#0x20]  ; i_avg_min
;;;4645   	i_avg_max=0;
003562  61e6              STR      r6,[r4,#0x1c]  ; i_avg_max
;;;4646   	i_avg_summ=0;
003564  6266              STR      r6,[r4,#0x24]  ; i_avg_summ
;;;4647   	for(i=0;i<NUMIST;i++)
003566  f04f0100          MOV      r1,#0
00356a  e01c              B        |L1.13734|
                  |L1.13676|
;;;4648   		{
;;;4649   		if(bps[i]._state==bsWRK)
00356c  ebc100c1          RSB      r0,r1,r1,LSL #3
003570  eb001001          ADD      r0,r0,r1,LSL #4
003574  eb030080          ADD      r0,r3,r0,LSL #2
003578  f890c002          LDRB     r12,[r0,#2]
00357c  f1bc0f01          CMP      r12,#1
003580  d10e              BNE      |L1.13728|
;;;4650   			{
;;;4651   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
003582  6a40              LDR      r0,[r0,#0x24]
003584  f8d4c01c          LDR      r12,[r4,#0x1c]  ; i_avg_max
003588  4560              CMP      r0,r12
00358a  dd00              BLE      |L1.13710|
00358c  61e0              STR      r0,[r4,#0x1c]  ; i_avg_max
                  |L1.13710|
;;;4652   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
00358e  f8d4c020          LDR      r12,[r4,#0x20]  ; i_avg_min
003592  4560              CMP      r0,r12
003594  da00              BGE      |L1.13720|
003596  6220              STR      r0,[r4,#0x20]  ; i_avg_min
                  |L1.13720|
;;;4653   			
;;;4654   			i_avg_summ+=bps[i]._Ii;
003598  f8d4c024          LDR      r12,[r4,#0x24]  ; i_avg_summ
00359c  4460              ADD      r0,r0,r12
00359e  6260              STR      r0,[r4,#0x24]  ; i_avg_summ
                  |L1.13728|
0035a0  f1010101          ADD      r1,r1,#1              ;4647
0035a4  b2c9              UXTB     r1,r1                 ;4647
                  |L1.13734|
0035a6  4291              CMP      r1,r2                 ;4647
0035a8  dbe0              BLT      |L1.13676|
;;;4655   			}
;;;4656   		}
;;;4657   	i_avg=i_avg_summ/avg_num;	
0035aa  6a60              LDR      r0,[r4,#0x24]  ; i_avg_summ
0035ac  fb90f7f7          SDIV     r7,r0,r7
0035b0  62a7              STR      r7,[r4,#0x28]  ; i_avg
;;;4658   	
;;;4659   	if(i_avg_min==0)i_avg_min=1;
0035b2  6a20              LDR      r0,[r4,#0x20]  ; i_avg_min
0035b4  2101              MOVS     r1,#1                 ;4629
0035b6  b900              CBNZ     r0,|L1.13754|
0035b8  6221              STR      r1,[r4,#0x20]  ; i_avg_min
                  |L1.13754|
;;;4660   
;;;4661   	avg=i_avg_max;
0035ba  69e0              LDR      r0,[r4,#0x1c]  ; i_avg_max
;;;4662   	avg*=100;
0035bc  f04f0c64          MOV      r12,#0x64
0035c0  fb00f00c          MUL      r0,r0,r12
;;;4663   	avg/=i_avg_min;
0035c4  f8d4c020          LDR      r12,[r4,#0x20]  ; i_avg_min
0035c8  fb90f0fc          SDIV     r0,r0,r12
0035cc  62e0              STR      r0,[r4,#0x2c]  ; avg
;;;4664   
;;;4665   	if(avg>160) bAVG=1;
0035ce  28a0              CMP      r0,#0xa0
0035d0  dd00              BLE      |L1.13780|
0035d2  7669              STRB     r1,[r5,#0x19]
                  |L1.13780|
;;;4666   	if(avg<120) bAVG=0;
0035d4  2878              CMP      r0,#0x78
0035d6  da00              BGE      |L1.13786|
0035d8  766e              STRB     r6,[r5,#0x19]
                  |L1.13786|
;;;4667   
;;;4668   	if(bAVG==1)
0035da  7e68              LDRB     r0,[r5,#0x19]  ; bAVG
0035dc  2801              CMP      r0,#1
0035de  d130              BNE      |L1.13890|
;;;4669   		{
;;;4670   		for(i=0;i<NUMIST;i++)
0035e0  f04f0100          MOV      r1,#0
;;;4671   			{
;;;4672   			if(bps[i]._state==bsWRK)
;;;4673   				{
;;;4674   				if(bps[i]._Ii>i_avg)bps[i]._x_--;
;;;4675   				if(bps[i]._Ii<i_avg)bps[i]._x_++;
;;;4676   			
;;;4677   				if(bps[i]._x_<-50)bps[i]._x_=-50;
0035e4  f06f0431          MVN      r4,#0x31
0035e8  e029              B        |L1.13886|
                  |L1.13802|
0035ea  ebc100c1          RSB      r0,r1,r1,LSL #3       ;4672
0035ee  eb001001          ADD      r0,r0,r1,LSL #4       ;4672
0035f2  eb030080          ADD      r0,r3,r0,LSL #2       ;4672
0035f6  7885              LDRB     r5,[r0,#2]            ;4672
0035f8  2d01              CMP      r5,#1                 ;4672
0035fa  d11d              BNE      |L1.13880|
0035fc  6a45              LDR      r5,[r0,#0x24]         ;4674
0035fe  42bd              CMP      r5,r7                 ;4674
003600  dd05              BLE      |L1.13838|
003602  f8b05050          LDRH     r5,[r0,#0x50]         ;4674
003606  f1a50501          SUB      r5,r5,#1              ;4674
00360a  f8a05050          STRH     r5,[r0,#0x50]         ;4674
                  |L1.13838|
00360e  da05              BGE      |L1.13852|
003610  f8b05050          LDRH     r5,[r0,#0x50]         ;4675
003614  f1050501          ADD      r5,r5,#1              ;4675
003618  f8a05050          STRH     r5,[r0,#0x50]         ;4675
                  |L1.13852|
00361c  f9b05050          LDRSH    r5,[r0,#0x50]
003620  42a5              CMP      r5,r4
003622  da01              BGE      |L1.13864|
003624  f8a04050          STRH     r4,[r0,#0x50]
                  |L1.13864|
;;;4678   				if(bps[i]._x_>50)bps[i]._x_=50;	
003628  f9b05050          LDRSH    r5,[r0,#0x50]
00362c  2d32              CMP      r5,#0x32
00362e  dd03              BLE      |L1.13880|
003630  f04f0532          MOV      r5,#0x32
003634  f8a05050          STRH     r5,[r0,#0x50]
                  |L1.13880|
003638  f1010101          ADD      r1,r1,#1              ;4670
00363c  b2c9              UXTB     r1,r1                 ;4670
                  |L1.13886|
00363e  4291              CMP      r1,r2                 ;4670
003640  dbd3              BLT      |L1.13802|
                  |L1.13890|
;;;4679   				}
;;;4680   			}		
;;;4681   		}			
;;;4682   	}   	 
;;;4683   
;;;4684   
;;;4685   avg_hndl_end:
;;;4686   __nop();  
003642  bf00              NOP      
;;;4687   }
003644  bdf0              POP      {r4-r7,pc}
;;;4688   
                          ENDP

                  rele_hndl PROC
;;;4701   //*************-----------------------------------------------
;;;4702   void rele_hndl(void)
003646  e92d5ff0          PUSH     {r4-r12,lr}
;;;4703   {
;;;4704   //static char cnt_rel_sam;
;;;4705   //char temp;
;;;4706   
;;;4707   //temp=0;
;;;4708   
;;;4709   
;;;4710   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
00364a  48b7              LDR      r0,|L1.14632|
00364c  6801              LDR      r1,[r0,#0]
00364e  4ab7              LDR      r2,|L1.14636|
003650  ea010102          AND      r1,r1,r2
003654  6001              STR      r1,[r0,#0]
;;;4711   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003656  4cb6              LDR      r4,|L1.14640|
003658  6821              LDR      r1,[r4,#0]
00365a  f441717c          ORR      r1,r1,#0x3f0
00365e  6021              STR      r1,[r4,#0]
;;;4712   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003660  69c1              LDR      r1,[r0,#0x1c]
003662  f4212140          BIC      r1,r1,#0xc0000
003666  61c1              STR      r1,[r0,#0x1c]
;;;4713   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003668  6e21              LDR      r1,[r4,#0x60]
00366a  f0417100          ORR      r1,r1,#0x2000000
00366e  6621              STR      r1,[r4,#0x60]
;;;4714   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003670  6841              LDR      r1,[r0,#4]
003672  f0216140          BIC      r1,r1,#0xc000000
003676  6041              STR      r1,[r0,#4]
;;;4715   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003678  6820              LDR      r0,[r4,#0]
00367a  f0405000          ORR      r0,r0,#0x20000000
00367e  6020              STR      r0,[r4,#0]
;;;4716   
;;;4717   
;;;4718   
;;;4719   
;;;4720   
;;;4721   
;;;4722   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003680  48ad              LDR      r0,|L1.14648|
003682  4dac              LDR      r5,|L1.14644|
003684  49ae              LDR      r1,|L1.14656|
003686  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003688  48ac              LDR      r0,|L1.14652|
00368a  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
00368e  f9b11000          LDRSH    r1,[r1,#0]
003692  7800              LDRB     r0,[r0,#0]
003694  4313              ORRS     r3,r3,r2
003696  d007              BEQ      |L1.13992|
003698  b130              CBZ      r0,|L1.13992|
00369a  2905              CMP      r1,#5
00369c  dd04              BLE      |L1.13992|
;;;4723   	{
;;;4724   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
00369e  69a3              LDR      r3,[r4,#0x18]
0036a0  f4437380          ORR      r3,r3,#0x100
0036a4  61a3              STR      r3,[r4,#0x18]
0036a6  e003              B        |L1.14000|
                  |L1.13992|
;;;4725   	}
;;;4726   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
0036a8  69e3              LDR      r3,[r4,#0x1c]
0036aa  f4437380          ORR      r3,r3,#0x100
0036ae  61e3              STR      r3,[r4,#0x1c]
                  |L1.14000|
;;;4727   
;;;4728   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
0036b0  f8953088          LDRB     r3,[r5,#0x88]  ; bat
0036b4  4313              ORRS     r3,r3,r2
0036b6  d007              BEQ      |L1.14024|
0036b8  b130              CBZ      r0,|L1.14024|
0036ba  2905              CMP      r1,#5
0036bc  dd04              BLE      |L1.14024|
;;;4729   	{
;;;4730   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
0036be  69a0              LDR      r0,[r4,#0x18]
0036c0  f0400040          ORR      r0,r0,#0x40
0036c4  61a0              STR      r0,[r4,#0x18]
0036c6  e003              B        |L1.14032|
                  |L1.14024|
;;;4731   	}
;;;4732   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
0036c8  69e0              LDR      r0,[r4,#0x1c]
0036ca  f0400040          ORR      r0,r0,#0x40
0036ce  61e0              STR      r0,[r4,#0x1c]
                  |L1.14032|
;;;4733   
;;;4734   
;;;4735   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
0036d0  20d2              MOVS     r0,#0xd2
0036d2  f7fffffe          BL       mess_find_unvol
0036d6  4d9b              LDR      r5,|L1.14660|
0036d8  b110              CBZ      r0,|L1.14048|
0036da  6828              LDR      r0,[r5,#0]  ; mess_data
0036dc  2864              CMP      r0,#0x64
0036de  d048              BEQ      |L1.14194|
                  |L1.14048|
;;;4736   	{
;;;4737   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4738   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4739   	}
;;;4740   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
0036e0  69e0              LDR      r0,[r4,#0x1c]
0036e2  f0405000          ORR      r0,r0,#0x20000000
0036e6  61e0              STR      r0,[r4,#0x1c]
                  |L1.14056|
;;;4741   
;;;4742   
;;;4743   #ifndef UKU2071x
;;;4744   //Реле аварии сети
;;;4745   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4746   	{
;;;4747   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4748   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4749   	}
;;;4750   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4751   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4752   #endif
;;;4753   #ifdef UKU2071x
;;;4754   //Реле аварии сети
;;;4755   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
0036e8  20d2              MOVS     r0,#0xd2
0036ea  f7fffffe          BL       mess_find_unvol
;;;4756   	{
;;;4757   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4758   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4759   	}
;;;4760   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
0036ee  4e96              LDR      r6,|L1.14664|
0036f0  b110              CBZ      r0,|L1.14072|
0036f2  6828              LDR      r0,[r5,#0]            ;4755  ; mess_data
0036f4  2866              CMP      r0,#0x66              ;4755
0036f6  d04b              BEQ      |L1.14224|
                  |L1.14072|
0036f8  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0036fa  07c0              LSLS     r0,r0,#31
0036fc  d054              BEQ      |L1.14248|
;;;4761   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
0036fe  6fa0              LDR      r0,[r4,#0x78]
003700  f0407000          ORR      r0,r0,#0x2000000
003704  67a0              STR      r0,[r4,#0x78]
                  |L1.14086|
;;;4762   #endif
;;;4763   
;;;4764   #ifdef UKU_3U
;;;4765   //Реле аварий батарей
;;;4766   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4767   	{
;;;4768   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4769   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4770        }
;;;4771   else 
;;;4772   	{
;;;4773   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4774        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4775   	} 
;;;4776   
;;;4777   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4778   	{
;;;4779   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4780   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4781        }
;;;4782   else 
;;;4783   	{
;;;4784   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4785        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4786   	} 
;;;4787   
;;;4788   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4789   	{
;;;4790   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4791   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4792        }
;;;4793   else 
;;;4794   	{
;;;4795   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4796        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4797   	} 
;;;4798   
;;;4799   #endif
;;;4800   
;;;4801   
;;;4802   #ifdef UKU_GLONASS
;;;4803   //Реле аварий батарей
;;;4804   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4805   	{
;;;4806   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4807   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4808        }
;;;4809   else 
;;;4810   	{
;;;4811   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4812        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4813   	} 
;;;4814   
;;;4815   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4816   	{
;;;4817   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4818   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4819        }
;;;4820   else 
;;;4821   	{
;;;4822   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4823        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4824   	} 
;;;4825   
;;;4826   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4827   	{
;;;4828   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4829   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4830        }
;;;4831   else 
;;;4832   	{
;;;4833   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4834        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4835   	} 
;;;4836   
;;;4837   #endif
;;;4838   
;;;4839   #ifdef U 
;;;4840   
;;;4841   #endif
;;;4842   
;;;4843   #ifdef UKU_RSTKM
;;;4844   
;;;4845   //Реле общей аварии
;;;4846   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4847   	{
;;;4848   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4849   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4850   	}
;;;4851   else 
;;;4852   	{
;;;4853        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;4854             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4855             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4856             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;4857             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4858        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4859   	}
;;;4860   	
;;;4861   
;;;4862   //Реле освещения
;;;4863   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4864   	{
;;;4865   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4866   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4867        }
;;;4868   else 
;;;4869   	{
;;;4870   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4871        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4872   	}
;;;4873   
;;;4874   
;;;4875   //Реле выключения нагрузки
;;;4876   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4877   	{
;;;4878   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4879   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4880        }
;;;4881   else if(tloaddisable_cmnd==0)
;;;4882   	{
;;;4883   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4884   	}
;;;4885   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4886   	{
;;;4887   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4888   	}
;;;4889   
;;;4890   else 
;;;4891   	{
;;;4892   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4893        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4894   	} 
;;;4895   
;;;4896   //Реле осевого вентилятора
;;;4897   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4898   	{
;;;4899   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4900   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4901   	}
;;;4902   else 
;;;4903   	{
;;;4904   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4905        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4906   	} 
;;;4907   
;;;4908   #endif
;;;4909   
;;;4910   #ifdef UKU_KONTUR
;;;4911   
;;;4912   //Реле общей аварии
;;;4913   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4914   	{
;;;4915   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4916   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4917   	}
;;;4918   else 
;;;4919   	{
;;;4920        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4921             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4922             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4923             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4924             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4925        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4926   	}
;;;4927   
;;;4928   	
;;;4929   //rel_warm_plazma=0;
;;;4930   //Реле освещения   
;;;4931   /*
;;;4932   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4933   	{
;;;4934   	if(mess_data[1]==0)
;;;4935   		{
;;;4936   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4937   		rel_warm_plazma=1;
;;;4938   		}
;;;4939   	else if(mess_data[1]==1) 
;;;4940   		{
;;;4941   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4942   		rel_warm_plazma=2;
;;;4943   		}
;;;4944        }
;;;4945   else 
;;;4946   	{
;;;4947   	if(warm_stat_k==wsOFF) 
;;;4948   		{
;;;4949   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4950   		rel_warm_plazma=3;
;;;4951   		}
;;;4952        else 
;;;4953   		{
;;;4954   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4955   		rel_warm_plazma=4;
;;;4956   		}
;;;4957   	}
;;;4958   */
;;;4959   //Реле освещения
;;;4960   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4961   	{
;;;4962   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4963   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4964        }
;;;4965   else 
;;;4966   	{
;;;4967   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4968        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4969   	}
;;;4970   
;;;4971   
;;;4972   
;;;4973   //Реле выключения нагрузки
;;;4974   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4975   	{
;;;4976   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4977   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4978        }
;;;4979   else if(tloaddisable_cmnd==0)
;;;4980   	{
;;;4981   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4982   	}
;;;4983   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4984   	{
;;;4985   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4986   	}
;;;4987   
;;;4988   else 
;;;4989   	{
;;;4990   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4991        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4992   	} 
;;;4993   
;;;4994   //Реле осевого вентилятора или отопителя
;;;4995   if(RELE_LOG)
;;;4996   	{
;;;4997   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4998   		{
;;;4999   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5000   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5001   		}
;;;5002   	else 
;;;5003   		{
;;;5004   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5005   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5006   		} 
;;;5007   
;;;5008   	}
;;;5009   else 
;;;5010   	{
;;;5011   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5012   		{
;;;5013   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5014   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5015   		}
;;;5016   	else 
;;;5017   		{
;;;5018   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5019   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5020   		} 
;;;5021   	}
;;;5022   #endif
;;;5023   
;;;5024   #ifdef UKU_6U
;;;5025   //Реле аварий батарей
;;;5026   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5027   	{
;;;5028   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5029   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5030        }
;;;5031   else 
;;;5032   	{
;;;5033   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5034        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5035   	} 
;;;5036   
;;;5037   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5038   	{
;;;5039   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5040   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5041       }
;;;5042   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5043   	{
;;;5044   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5045   		{
;;;5046   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5047   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5048        	}
;;;5049   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5050   	}
;;;5051   else 
;;;5052   	{
;;;5053   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5054       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5055   	} 
;;;5056   
;;;5057   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5058   	{
;;;5059   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5060   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5061        }
;;;5062   else 
;;;5063   	{
;;;5064   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5065        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5066   	} 
;;;5067   
;;;5068   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5069   	{
;;;5070   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5071   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5072   	}
;;;5073   else if((NPN_OUT==npnoRELEVENT))
;;;5074   	{
;;;5075   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5076   		{
;;;5077   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5078   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5079       	}
;;;5080   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5081   	}
;;;5082   else 
;;;5083   	{
;;;5084   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5085   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5086   	}
;;;5087   
;;;5088   #endif
;;;5089   
;;;5090   #ifdef UKU_220
;;;5091   //Реле аварий батарей
;;;5092   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5093   	{
;;;5094   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5095   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5096        }
;;;5097   else 
;;;5098   	{
;;;5099   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5100        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5101   	} 
;;;5102   
;;;5103   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5104   	{
;;;5105   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5106   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5107        }
;;;5108   else 
;;;5109   	{
;;;5110   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5111        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5112   	} 
;;;5113   
;;;5114   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5115   	{
;;;5116   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5117   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5118   	}
;;;5119   else 
;;;5120   	{
;;;5121   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5122   		{
;;;5123   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5124   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5125   		}
;;;5126   	else 
;;;5127   		{
;;;5128   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5129        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5130   		}
;;;5131   	}
;;;5132   
;;;5133   #endif
;;;5134   
;;;5135   #ifdef UKU_220_V2
;;;5136   //Реле аварий батарей
;;;5137   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5138   	{
;;;5139   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5140   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5141        }
;;;5142   else 
;;;5143   	{
;;;5144   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5145        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5146   	} 
;;;5147   
;;;5148   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5149   	{
;;;5150   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5151   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5152        }
;;;5153   else 
;;;5154   	{
;;;5155   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5156        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5157   	} 
;;;5158   
;;;5159   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5160   	{
;;;5161   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5162   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5163   	}
;;;5164   else 
;;;5165   	{
;;;5166   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5167   		{
;;;5168   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5169   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5170   		}
;;;5171   	else 
;;;5172   		{
;;;5173   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5174        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5175   		}
;;;5176   	}
;;;5177   
;;;5178   #endif
;;;5179   
;;;5180   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5181   
;;;5182   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003706  4891              LDR      r0,|L1.14668|
;;;5183   	{
;;;5184   	#ifndef UKU2071x
;;;5185   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5186   		{
;;;5187   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5188   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5189   		}
;;;5190   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5191   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5192   	#endif
;;;5193   
;;;5194   	#ifdef UKU2071x
;;;5195   		#ifndef APSENERGIA
;;;5196   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5197   			{
;;;5198   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5199   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5200   			}
;;;5201   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5202   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5203   		#endif
;;;5204   
;;;5205   		#ifdef APSENERGIA
;;;5206   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5207   			{
;;;5208   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5209   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5210   			}
;;;5211   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5212   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5213   		#endif
;;;5214   
;;;5215   	#endif
;;;5216   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5217   		{
;;;5218   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5219   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5220   	     }
;;;5221   	else 
;;;5222   		{
;;;5223   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5224   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5225   		} 
;;;5226   
;;;5227   	//Реле аварий батарей
;;;5228   	#ifndef APSENERGIA
;;;5229   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5230   		{
;;;5231   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5232   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5233        	}
;;;5234   	else 
;;;5235   		{
;;;5236   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003708  f8df8244          LDR      r8,|L1.14672|
00370c  4f91              LDR      r7,|L1.14676|
00370e  8800              LDRH     r0,[r0,#0]            ;5182  ; AUSW_MAIN
003710  f5a041aa          SUB      r1,r0,#0x5500         ;5182
003714  39fa              SUBS     r1,r1,#0xfa           ;5182
003716  d001              BEQ      |L1.14108|
003718  1e49              SUBS     r1,r1,#1              ;5182
00371a  d16f              BNE      |L1.14332|
                  |L1.14108|
00371c  20d2              MOVS     r0,#0xd2              ;5196
00371e  f7fffffe          BL       mess_find_unvol
003722  b110              CBZ      r0,|L1.14122|
003724  6828              LDR      r0,[r5,#0]            ;5196  ; mess_data
003726  2866              CMP      r0,#0x66              ;5196
003728  d043              BEQ      |L1.14258|
                  |L1.14122|
00372a  6830              LDR      r0,[r6,#0]            ;5201  ; avar_ind_stat
00372c  07c0              LSLS     r0,r0,#31             ;5201
00372e  d04d              BEQ      |L1.14284|
003730  6fa0              LDR      r0,[r4,#0x78]         ;5202
003732  f0407000          ORR      r0,r0,#0x2000000      ;5202
003736  67a0              STR      r0,[r4,#0x78]         ;5202
                  |L1.14136|
003738  20d2              MOVS     r0,#0xd2              ;5216
00373a  f7fffffe          BL       mess_find_unvol
00373e  b110              CBZ      r0,|L1.14150|
003740  6828              LDR      r0,[r5,#0]            ;5216  ; mess_data
003742  286a              CMP      r0,#0x6a              ;5216
003744  d047              BEQ      |L1.14294|
                  |L1.14150|
003746  6830              LDR      r0,[r6,#0]            ;5223  ; avar_ind_stat
003748  4238              TST      r0,r7                 ;5223
00374a  d052              BEQ      |L1.14322|
00374c  69a0              LDR      r0,[r4,#0x18]         ;5224
00374e  f0400080          ORR      r0,r0,#0x80           ;5224
003752  61a0              STR      r0,[r4,#0x18]         ;5224
                  |L1.14164|
003754  20d2              MOVS     r0,#0xd2              ;5229
003756  f7fffffe          BL       mess_find_unvol
00375a  b110              CBZ      r0,|L1.14178|
00375c  6828              LDR      r0,[r5,#0]            ;5229  ; mess_data
00375e  2867              CMP      r0,#0x67              ;5229
003760  d04d              BEQ      |L1.14334|
                  |L1.14178|
003762  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003766  b380              CBZ      r0,|L1.14282|
;;;5237        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003768  69a0              LDR      r0,[r4,#0x18]
00376a  f0400010          ORR      r0,r0,#0x10
00376e  61a0              STR      r0,[r4,#0x18]
003770  e1f2              B        |L1.15192|
                  |L1.14194|
003772  6868              LDR      r0,[r5,#4]            ;4737  ; mess_data
003774  2801              CMP      r0,#1                 ;4737
003776  d006              BEQ      |L1.14214|
003778  2800              CMP      r0,#0                 ;4738
00377a  d1b5              BNE      |L1.14056|
00377c  69e0              LDR      r0,[r4,#0x1c]         ;4738
00377e  f0405000          ORR      r0,r0,#0x20000000     ;4738
003782  61e0              STR      r0,[r4,#0x1c]         ;4738
003784  e7b0              B        |L1.14056|
                  |L1.14214|
003786  69a0              LDR      r0,[r4,#0x18]         ;4737
003788  f0405000          ORR      r0,r0,#0x20000000     ;4737
00378c  61a0              STR      r0,[r4,#0x18]         ;4737
00378e  e7ab              B        |L1.14056|
                  |L1.14224|
003790  6868              LDR      r0,[r5,#4]            ;4757  ; mess_data
003792  b120              CBZ      r0,|L1.14238|
003794  6fa0              LDR      r0,[r4,#0x78]         ;4758
003796  f0407000          ORR      r0,r0,#0x2000000      ;4758
00379a  67a0              STR      r0,[r4,#0x78]         ;4758
00379c  e7b3              B        |L1.14086|
                  |L1.14238|
00379e  6fe0              LDR      r0,[r4,#0x7c]         ;4757
0037a0  f0407000          ORR      r0,r0,#0x2000000      ;4757
0037a4  67e0              STR      r0,[r4,#0x7c]         ;4757
0037a6  e7ae              B        |L1.14086|
                  |L1.14248|
0037a8  6fe0              LDR      r0,[r4,#0x7c]         ;4760
0037aa  f0407000          ORR      r0,r0,#0x2000000      ;4760
0037ae  67e0              STR      r0,[r4,#0x7c]         ;4760
0037b0  e7a9              B        |L1.14086|
                  |L1.14258|
0037b2  6868              LDR      r0,[r5,#4]            ;5198  ; mess_data
0037b4  b120              CBZ      r0,|L1.14272|
0037b6  6fa0              LDR      r0,[r4,#0x78]         ;5199
0037b8  f0407000          ORR      r0,r0,#0x2000000      ;5199
0037bc  67a0              STR      r0,[r4,#0x78]         ;5199
0037be  e7bb              B        |L1.14136|
                  |L1.14272|
0037c0  6fe0              LDR      r0,[r4,#0x7c]         ;5198
0037c2  f0407000          ORR      r0,r0,#0x2000000      ;5198
0037c6  67e0              STR      r0,[r4,#0x7c]         ;5198
0037c8  e7b6              B        |L1.14136|
                  |L1.14282|
0037ca  e027              B        |L1.14364|
                  |L1.14284|
0037cc  6fe0              LDR      r0,[r4,#0x7c]         ;5201
0037ce  f0407000          ORR      r0,r0,#0x2000000      ;5201
0037d2  67e0              STR      r0,[r4,#0x7c]         ;5201
0037d4  e7b0              B        |L1.14136|
                  |L1.14294|
0037d6  6868              LDR      r0,[r5,#4]            ;5218  ; mess_data
0037d8  b130              CBZ      r0,|L1.14312|
0037da  2801              CMP      r0,#1                 ;5219
0037dc  d1ba              BNE      |L1.14164|
0037de  69a0              LDR      r0,[r4,#0x18]         ;5219
0037e0  f0400080          ORR      r0,r0,#0x80           ;5219
0037e4  61a0              STR      r0,[r4,#0x18]         ;5219
0037e6  e7b5              B        |L1.14164|
                  |L1.14312|
0037e8  69e0              LDR      r0,[r4,#0x1c]         ;5218
0037ea  f0400080          ORR      r0,r0,#0x80           ;5218
0037ee  61e0              STR      r0,[r4,#0x1c]         ;5218
0037f0  e7b0              B        |L1.14164|
                  |L1.14322|
0037f2  69e0              LDR      r0,[r4,#0x1c]         ;5223
0037f4  f0400080          ORR      r0,r0,#0x80           ;5223
0037f8  61e0              STR      r0,[r4,#0x1c]         ;5223
0037fa  e7ab              B        |L1.14164|
                  |L1.14332|
0037fc  e013              B        |L1.14374|
                  |L1.14334|
0037fe  6868              LDR      r0,[r5,#4]            ;5231  ; mess_data
003800  b110              CBZ      r0,|L1.14344|
003802  2801              CMP      r0,#1                 ;5232
003804  d005              BEQ      |L1.14354|
003806  e1a7              B        |L1.15192|
                  |L1.14344|
003808  69e0              LDR      r0,[r4,#0x1c]         ;5231
00380a  f0400010          ORR      r0,r0,#0x10           ;5231
00380e  61e0              STR      r0,[r4,#0x1c]         ;5231
003810  e1a2              B        |L1.15192|
                  |L1.14354|
003812  69a0              LDR      r0,[r4,#0x18]         ;5232
003814  f0400010          ORR      r0,r0,#0x10           ;5232
003818  61a0              STR      r0,[r4,#0x18]         ;5232
00381a  e19d              B        |L1.15192|
                  |L1.14364|
00381c  69e0              LDR      r0,[r4,#0x1c]         ;5236
00381e  f0400010          ORR      r0,r0,#0x10           ;5236
003822  61e0              STR      r0,[r4,#0x1c]         ;5236
003824  e198              B        |L1.15192|
                  |L1.14374|
;;;5238   		}
;;;5239   	#endif
;;;5240   	#ifdef APSENERGIA
;;;5241   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5242   		{
;;;5243   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5244   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5245        	}
;;;5246   	else 
;;;5247   		{
;;;5248   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5249   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5250   		}
;;;5251   	#endif
;;;5252   	}
;;;5253   
;;;5254   else	if(AUSW_MAIN==22023)
003826  f5a041ac          SUB      r1,r0,#0x5600
00382a  3907              SUBS     r1,#7
00382c  d162              BNE      |L1.14580|
;;;5255   	{
;;;5256   
;;;5257   	//Реле аварий батарей
;;;5258   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
00382e  20d2              MOVS     r0,#0xd2
003830  f7fffffe          BL       mess_find_unvol
003834  b110              CBZ      r0,|L1.14396|
003836  6828              LDR      r0,[r5,#0]  ; mess_data
003838  2867              CMP      r0,#0x67
00383a  d023              BEQ      |L1.14468|
                  |L1.14396|
;;;5259   		{
;;;5260   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5261   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5262        	}
;;;5263   	else 
;;;5264   		{
;;;5265   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
00383c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003840  b370              CBZ      r0,|L1.14496|
;;;5266        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003842  69a0              LDR      r0,[r4,#0x18]
003844  f0400010          ORR      r0,r0,#0x10
003848  61a0              STR      r0,[r4,#0x18]
                  |L1.14410|
;;;5267   		} 
;;;5268   
;;;5269   
;;;5270   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5271   	#ifndef UKU2071x
;;;5272   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5273   		{
;;;5274   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5275   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5276   		}
;;;5277   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5278   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5279   	#endif
;;;5280   	#ifdef UKU2071x
;;;5281   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
00384a  20d2              MOVS     r0,#0xd2
00384c  f7fffffe          BL       mess_find_unvol
003850  b110              CBZ      r0,|L1.14424|
003852  6828              LDR      r0,[r5,#0]  ; mess_data
003854  2866              CMP      r0,#0x66
003856  d028              BEQ      |L1.14506|
                  |L1.14424|
;;;5282   		{
;;;5283   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5284   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5285   		}
;;;5286   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003858  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00385a  07c0              LSLS     r0,r0,#31
00385c  d031              BEQ      |L1.14530|
;;;5287   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
00385e  6fa0              LDR      r0,[r4,#0x78]
003860  f0407000          ORR      r0,r0,#0x2000000
003864  67a0              STR      r0,[r4,#0x78]
                  |L1.14438|
;;;5288   	#endif
;;;5289   
;;;5290   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003866  20d2              MOVS     r0,#0xd2
003868  f7fffffe          BL       mess_find_unvol
00386c  b110              CBZ      r0,|L1.14452|
00386e  6828              LDR      r0,[r5,#0]  ; mess_data
003870  286a              CMP      r0,#0x6a
003872  d02b              BEQ      |L1.14540|
                  |L1.14452|
;;;5291   		{
;;;5292   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5293   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5294   	     }
;;;5295   	else 
;;;5296   		{
;;;5297   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003874  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003876  4238              TST      r0,r7
003878  d037              BEQ      |L1.14570|
;;;5298   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
00387a  69a0              LDR      r0,[r4,#0x18]
00387c  f0400080          ORR      r0,r0,#0x80
003880  61a0              STR      r0,[r4,#0x18]
003882  e169              B        |L1.15192|
                  |L1.14468|
003884  6868              LDR      r0,[r5,#4]            ;5260  ; mess_data
003886  b130              CBZ      r0,|L1.14486|
003888  2801              CMP      r0,#1                 ;5261
00388a  d1de              BNE      |L1.14410|
00388c  69a0              LDR      r0,[r4,#0x18]         ;5261
00388e  f0400010          ORR      r0,r0,#0x10           ;5261
003892  61a0              STR      r0,[r4,#0x18]         ;5261
003894  e7d9              B        |L1.14410|
                  |L1.14486|
003896  69e0              LDR      r0,[r4,#0x1c]         ;5260
003898  f0400010          ORR      r0,r0,#0x10           ;5260
00389c  61e0              STR      r0,[r4,#0x1c]         ;5260
00389e  e7d4              B        |L1.14410|
                  |L1.14496|
0038a0  69e0              LDR      r0,[r4,#0x1c]         ;5265
0038a2  f0400010          ORR      r0,r0,#0x10           ;5265
0038a6  61e0              STR      r0,[r4,#0x1c]         ;5265
0038a8  e7cf              B        |L1.14410|
                  |L1.14506|
0038aa  6868              LDR      r0,[r5,#4]            ;5283  ; mess_data
0038ac  b120              CBZ      r0,|L1.14520|
0038ae  69e0              LDR      r0,[r4,#0x1c]         ;5284
0038b0  f0407000          ORR      r0,r0,#0x2000000      ;5284
0038b4  61e0              STR      r0,[r4,#0x1c]         ;5284
0038b6  e7d6              B        |L1.14438|
                  |L1.14520|
0038b8  69a0              LDR      r0,[r4,#0x18]         ;5283
0038ba  f0407000          ORR      r0,r0,#0x2000000      ;5283
0038be  61a0              STR      r0,[r4,#0x18]         ;5283
0038c0  e7d1              B        |L1.14438|
                  |L1.14530|
0038c2  6ba0              LDR      r0,[r4,#0x38]         ;5286
0038c4  f0407000          ORR      r0,r0,#0x2000000      ;5286
0038c8  63a0              STR      r0,[r4,#0x38]         ;5286
0038ca  e7cc              B        |L1.14438|
                  |L1.14540|
0038cc  6868              LDR      r0,[r5,#4]            ;5292  ; mess_data
0038ce  b110              CBZ      r0,|L1.14550|
0038d0  2801              CMP      r0,#1                 ;5293
0038d2  d005              BEQ      |L1.14560|
0038d4  e140              B        |L1.15192|
                  |L1.14550|
0038d6  69e0              LDR      r0,[r4,#0x1c]         ;5292
0038d8  f0400080          ORR      r0,r0,#0x80           ;5292
0038dc  61e0              STR      r0,[r4,#0x1c]         ;5292
0038de  e13b              B        |L1.15192|
                  |L1.14560|
0038e0  69a0              LDR      r0,[r4,#0x18]         ;5293
0038e2  f0400080          ORR      r0,r0,#0x80           ;5293
0038e6  61a0              STR      r0,[r4,#0x18]         ;5293
0038e8  e136              B        |L1.15192|
                  |L1.14570|
0038ea  69e0              LDR      r0,[r4,#0x1c]         ;5297
0038ec  f0400080          ORR      r0,r0,#0x80           ;5297
0038f0  61e0              STR      r0,[r4,#0x1c]         ;5297
0038f2  e131              B        |L1.15192|
                  |L1.14580|
;;;5299   		} 
;;;5300   	}
;;;5301   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
0038f4  f5a041ac          SUB      r1,r0,#0x5600
0038f8  391b              SUBS     r1,r1,#0x1b
0038fa  d001              BEQ      |L1.14592|
0038fc  1e49              SUBS     r1,r1,#1
0038fe  d173              BNE      |L1.14824|
                  |L1.14592|
;;;5302   	{
;;;5303   	//Реле аварий батарей
;;;5304   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003900  20d2              MOVS     r0,#0xd2
003902  f7fffffe          BL       mess_find_unvol
003906  b110              CBZ      r0,|L1.14606|
003908  6828              LDR      r0,[r5,#0]  ; mess_data
00390a  2867              CMP      r0,#0x67
00390c  d052              BEQ      |L1.14772|
                  |L1.14606|
;;;5305   		{
;;;5306   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5307   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5308        	}
;;;5309   	else 
;;;5310   		{
;;;5311   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
00390e  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003912  b3f0              CBZ      r0,|L1.14738|
;;;5312        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003914  69a0              LDR      r0,[r4,#0x18]
003916  f0400010          ORR      r0,r0,#0x10
00391a  e01d              B        |L1.14680|
                  |L1.14620|
                          DCD      bps
                  |L1.14624|
                          DCD      NUMIST
                  |L1.14628|
                          DCD      ||area_number.25||+0x80
                  |L1.14632|
                          DCD      0x4002c000
                  |L1.14636|
                          DCD      0xfff000ff
                  |L1.14640|
                          DCD      0x2009c000
                  |L1.14644|
                          DCD      bat
                  |L1.14648|
                          DCD      tbatdisable_stat
                  |L1.14652|
                          DCD      tbatdisable_cmnd
                  |L1.14656|
                          DCD      main_1Hz_cnt
                  |L1.14660|
                          DCD      mess_data
                  |L1.14664|
                          DCD      avar_ind_stat
                  |L1.14668|
                          DCD      AUSW_MAIN
                  |L1.14672|
                          DCD      ips_bat_av_stat
                  |L1.14676|
                          DCD      0x100007f8
                  |L1.14680|
003958  61a0              STR      r0,[r4,#0x18]
                  |L1.14682|
;;;5313   		} 
;;;5314   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5315   	#ifndef UKU2071x 
;;;5316   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5317   		{
;;;5318   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5319   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5320   		}
;;;5321   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5322   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5323   	#endif
;;;5324   	#ifdef UKU2071x 
;;;5325   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
00395a  20d2              MOVS     r0,#0xd2
00395c  f7fffffe          BL       mess_find_unvol
003960  b110              CBZ      r0,|L1.14696|
003962  6828              LDR      r0,[r5,#0]  ; mess_data
003964  2866              CMP      r0,#0x66
003966  d038              BEQ      |L1.14810|
                  |L1.14696|
;;;5326   		{
;;;5327   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5328   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5329   		}
;;;5330   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003968  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00396a  07c0              LSLS     r0,r0,#31
00396c  d042              BEQ      |L1.14836|
;;;5331   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
00396e  6fa0              LDR      r0,[r4,#0x78]
003970  f0407000          ORR      r0,r0,#0x2000000
003974  67a0              STR      r0,[r4,#0x78]
                  |L1.14710|
;;;5332   	#endif
;;;5333   
;;;5334   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003976  20d2              MOVS     r0,#0xd2
003978  f7fffffe          BL       mess_find_unvol
00397c  b110              CBZ      r0,|L1.14724|
00397e  6828              LDR      r0,[r5,#0]  ; mess_data
003980  286a              CMP      r0,#0x6a
003982  d03c              BEQ      |L1.14846|
                  |L1.14724|
;;;5335   		{
;;;5336   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5337   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5338   	     }
;;;5339   	else 
;;;5340   		{
;;;5341   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003984  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003986  4238              TST      r0,r7
003988  d047              BEQ      |L1.14874|
;;;5342   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
00398a  69a0              LDR      r0,[r4,#0x18]
00398c  f0400080          ORR      r0,r0,#0x80
003990  e000              B        |L1.14740|
                  |L1.14738|
003992  e01d              B        |L1.14800|
                  |L1.14740|
003994  61a0              STR      r0,[r4,#0x18]
                  |L1.14742|
;;;5343   		}
;;;5344   	//Реле аварии БПС
;;;5345   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003996  20d2              MOVS     r0,#0xd2
003998  f7fffffe          BL       mess_find_unvol
00399c  b110              CBZ      r0,|L1.14756|
00399e  6828              LDR      r0,[r5,#0]  ; mess_data
0039a0  286a              CMP      r0,#0x6a
0039a2  d03f              BEQ      |L1.14884|
                  |L1.14756|
;;;5346   		{
;;;5347   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5348   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5349        	}
;;;5350   	else 
;;;5351   		{
;;;5352   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
0039a4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0039a6  4238              TST      r0,r7
0039a8  d04b              BEQ      |L1.14914|
;;;5353        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
0039aa  69a0              LDR      r0,[r4,#0x18]
0039ac  f0400020          ORR      r0,r0,#0x20
0039b0  61a0              STR      r0,[r4,#0x18]
0039b2  e0d1              B        |L1.15192|
                  |L1.14772|
0039b4  6868              LDR      r0,[r5,#4]            ;5306  ; mess_data
0039b6  b130              CBZ      r0,|L1.14790|
0039b8  2801              CMP      r0,#1                 ;5307
0039ba  d1ce              BNE      |L1.14682|
0039bc  69a0              LDR      r0,[r4,#0x18]         ;5307
0039be  f0400010          ORR      r0,r0,#0x10           ;5307
0039c2  61a0              STR      r0,[r4,#0x18]         ;5307
0039c4  e7c9              B        |L1.14682|
                  |L1.14790|
0039c6  69e0              LDR      r0,[r4,#0x1c]         ;5306
0039c8  f0400010          ORR      r0,r0,#0x10           ;5306
0039cc  61e0              STR      r0,[r4,#0x1c]         ;5306
0039ce  e7c4              B        |L1.14682|
                  |L1.14800|
0039d0  69e0              LDR      r0,[r4,#0x1c]         ;5311
0039d2  f0400010          ORR      r0,r0,#0x10           ;5311
0039d6  61e0              STR      r0,[r4,#0x1c]         ;5311
0039d8  e7bf              B        |L1.14682|
                  |L1.14810|
0039da  6868              LDR      r0,[r5,#4]            ;5327  ; mess_data
0039dc  b128              CBZ      r0,|L1.14826|
0039de  69e0              LDR      r0,[r4,#0x1c]         ;5328
0039e0  f0407000          ORR      r0,r0,#0x2000000      ;5328
0039e4  61e0              STR      r0,[r4,#0x1c]         ;5328
0039e6  e7c6              B        |L1.14710|
                  |L1.14824|
0039e8  e030              B        |L1.14924|
                  |L1.14826|
0039ea  69a0              LDR      r0,[r4,#0x18]         ;5327
0039ec  f0407000          ORR      r0,r0,#0x2000000      ;5327
0039f0  61a0              STR      r0,[r4,#0x18]         ;5327
0039f2  e7c0              B        |L1.14710|
                  |L1.14836|
0039f4  6ba0              LDR      r0,[r4,#0x38]         ;5330
0039f6  f0407000          ORR      r0,r0,#0x2000000      ;5330
0039fa  63a0              STR      r0,[r4,#0x38]         ;5330
0039fc  e7bb              B        |L1.14710|
                  |L1.14846|
0039fe  6868              LDR      r0,[r5,#4]            ;5336  ; mess_data
003a00  b130              CBZ      r0,|L1.14864|
003a02  2801              CMP      r0,#1                 ;5337
003a04  d1c7              BNE      |L1.14742|
003a06  69a0              LDR      r0,[r4,#0x18]         ;5337
003a08  f0400080          ORR      r0,r0,#0x80           ;5337
003a0c  61a0              STR      r0,[r4,#0x18]         ;5337
003a0e  e7c2              B        |L1.14742|
                  |L1.14864|
003a10  69e0              LDR      r0,[r4,#0x1c]         ;5336
003a12  f0400080          ORR      r0,r0,#0x80           ;5336
003a16  61e0              STR      r0,[r4,#0x1c]         ;5336
003a18  e7bd              B        |L1.14742|
                  |L1.14874|
003a1a  69e0              LDR      r0,[r4,#0x1c]         ;5341
003a1c  f0400080          ORR      r0,r0,#0x80           ;5341
003a20  61e0              STR      r0,[r4,#0x1c]         ;5341
003a22  e7b8              B        |L1.14742|
                  |L1.14884|
003a24  6868              LDR      r0,[r5,#4]            ;5347  ; mess_data
003a26  b110              CBZ      r0,|L1.14894|
003a28  2801              CMP      r0,#1                 ;5348
003a2a  d005              BEQ      |L1.14904|
003a2c  e094              B        |L1.15192|
                  |L1.14894|
003a2e  69e0              LDR      r0,[r4,#0x1c]         ;5347
003a30  f0400020          ORR      r0,r0,#0x20           ;5347
003a34  61e0              STR      r0,[r4,#0x1c]         ;5347
003a36  e08f              B        |L1.15192|
                  |L1.14904|
003a38  69a0              LDR      r0,[r4,#0x18]         ;5348
003a3a  f0400020          ORR      r0,r0,#0x20           ;5348
003a3e  61a0              STR      r0,[r4,#0x18]         ;5348
003a40  e08a              B        |L1.15192|
                  |L1.14914|
003a42  69e0              LDR      r0,[r4,#0x1c]         ;5352
003a44  f0400020          ORR      r0,r0,#0x20           ;5352
003a48  61e0              STR      r0,[r4,#0x1c]         ;5352
003a4a  e085              B        |L1.15192|
                  |L1.14924|
;;;5354   		} 
;;;5355   	}
;;;5356   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003a4c  f5a041ac          SUB      r1,r0,#0x5600
003a50  3911              SUBS     r1,r1,#0x11
003a52  d001              BEQ      |L1.14936|
003a54  310f              ADDS     r1,r1,#0xf
003a56  d163              BNE      |L1.15136|
                  |L1.14936|
;;;5357   	{
;;;5358   	#ifndef UKU2071x 
;;;5359   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5360   		{
;;;5361   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5362   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5363   		}
;;;5364   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5365   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5366   	#endif
;;;5367   	#ifdef UKU2071x 
;;;5368   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003a58  20d2              MOVS     r0,#0xd2
003a5a  f7fffffe          BL       mess_find_unvol
003a5e  b110              CBZ      r0,|L1.14950|
003a60  6828              LDR      r0,[r5,#0]  ; mess_data
003a62  2866              CMP      r0,#0x66
003a64  d023              BEQ      |L1.15022|
                  |L1.14950|
;;;5369   		{
;;;5370   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5371   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5372   		}
;;;5373   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003a66  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003a68  07c0              LSLS     r0,r0,#31
003a6a  d02c              BEQ      |L1.15046|
;;;5374   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003a6c  6fa0              LDR      r0,[r4,#0x78]
003a6e  f0407000          ORR      r0,r0,#0x2000000
003a72  67a0              STR      r0,[r4,#0x78]
                  |L1.14964|
;;;5375   	#endif
;;;5376   	
;;;5377   	
;;;5378   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003a74  20d2              MOVS     r0,#0xd2
003a76  f7fffffe          BL       mess_find_unvol
003a7a  b110              CBZ      r0,|L1.14978|
003a7c  6828              LDR      r0,[r5,#0]  ; mess_data
003a7e  286a              CMP      r0,#0x6a
003a80  d026              BEQ      |L1.15056|
                  |L1.14978|
;;;5379   		{
;;;5380   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5381   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5382   	     }
;;;5383   	else 
;;;5384   		{
;;;5385   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003a82  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003a84  4238              TST      r0,r7
003a86  d031              BEQ      |L1.15084|
;;;5386   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003a88  69a0              LDR      r0,[r4,#0x18]
003a8a  f0400080          ORR      r0,r0,#0x80
003a8e  61a0              STR      r0,[r4,#0x18]
                  |L1.14992|
;;;5387   		} 
;;;5388   
;;;5389   	//Реле аварий батарей
;;;5390   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003a90  20d2              MOVS     r0,#0xd2
003a92  f7fffffe          BL       mess_find_unvol
003a96  b110              CBZ      r0,|L1.15006|
003a98  6828              LDR      r0,[r5,#0]  ; mess_data
003a9a  2867              CMP      r0,#0x67
003a9c  d02b              BEQ      |L1.15094|
                  |L1.15006|
;;;5391   		{
;;;5392   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5393   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5394        	}
;;;5395   	else 
;;;5396   		{
;;;5397   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003a9e  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003aa2  b390              CBZ      r0,|L1.15114|
;;;5398        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003aa4  69a0              LDR      r0,[r4,#0x18]
003aa6  f0400010          ORR      r0,r0,#0x10
003aaa  61a0              STR      r0,[r4,#0x18]
003aac  e054              B        |L1.15192|
                  |L1.15022|
003aae  6868              LDR      r0,[r5,#4]            ;5370  ; mess_data
003ab0  b120              CBZ      r0,|L1.15036|
003ab2  6fa0              LDR      r0,[r4,#0x78]         ;5371
003ab4  f0407000          ORR      r0,r0,#0x2000000      ;5371
003ab8  67a0              STR      r0,[r4,#0x78]         ;5371
003aba  e7db              B        |L1.14964|
                  |L1.15036|
003abc  6fe0              LDR      r0,[r4,#0x7c]         ;5370
003abe  f0407000          ORR      r0,r0,#0x2000000      ;5370
003ac2  67e0              STR      r0,[r4,#0x7c]         ;5370
003ac4  e7d6              B        |L1.14964|
                  |L1.15046|
003ac6  6fe0              LDR      r0,[r4,#0x7c]         ;5373
003ac8  f0407000          ORR      r0,r0,#0x2000000      ;5373
003acc  67e0              STR      r0,[r4,#0x7c]         ;5373
003ace  e7d1              B        |L1.14964|
                  |L1.15056|
003ad0  6868              LDR      r0,[r5,#4]            ;5380  ; mess_data
003ad2  b130              CBZ      r0,|L1.15074|
003ad4  2801              CMP      r0,#1                 ;5381
003ad6  d1db              BNE      |L1.14992|
003ad8  69a0              LDR      r0,[r4,#0x18]         ;5381
003ada  f0400080          ORR      r0,r0,#0x80           ;5381
003ade  61a0              STR      r0,[r4,#0x18]         ;5381
003ae0  e7d6              B        |L1.14992|
                  |L1.15074|
003ae2  69e0              LDR      r0,[r4,#0x1c]         ;5380
003ae4  f0400080          ORR      r0,r0,#0x80           ;5380
003ae8  61e0              STR      r0,[r4,#0x1c]         ;5380
003aea  e7d1              B        |L1.14992|
                  |L1.15084|
003aec  69e0              LDR      r0,[r4,#0x1c]         ;5385
003aee  f0400080          ORR      r0,r0,#0x80           ;5385
003af2  61e0              STR      r0,[r4,#0x1c]         ;5385
003af4  e7cc              B        |L1.14992|
                  |L1.15094|
003af6  6868              LDR      r0,[r5,#4]            ;5392  ; mess_data
003af8  b110              CBZ      r0,|L1.15104|
003afa  2801              CMP      r0,#1                 ;5393
003afc  d006              BEQ      |L1.15116|
003afe  e02b              B        |L1.15192|
                  |L1.15104|
003b00  69e0              LDR      r0,[r4,#0x1c]         ;5392
003b02  f0400010          ORR      r0,r0,#0x10           ;5392
003b06  61e0              STR      r0,[r4,#0x1c]         ;5392
003b08  e026              B        |L1.15192|
                  |L1.15114|
003b0a  e004              B        |L1.15126|
                  |L1.15116|
003b0c  69a0              LDR      r0,[r4,#0x18]         ;5393
003b0e  f0400010          ORR      r0,r0,#0x10           ;5393
003b12  61a0              STR      r0,[r4,#0x18]         ;5393
003b14  e020              B        |L1.15192|
                  |L1.15126|
003b16  69e0              LDR      r0,[r4,#0x1c]         ;5397
003b18  f0400010          ORR      r0,r0,#0x10           ;5397
003b1c  61e0              STR      r0,[r4,#0x1c]         ;5397
003b1e  e01b              B        |L1.15192|
                  |L1.15136|
;;;5399   		} 
;;;5400   	} 	 
;;;5401   else	
;;;5402   	{
;;;5403   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5404   	#ifndef UKU2071x 
;;;5405   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5406   		{
;;;5407   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5408   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5409   		}
;;;5410   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5411   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5412   	#endif
;;;5413   	#ifdef UKU2071x 
;;;5414   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003b20  20d2              MOVS     r0,#0xd2
003b22  f7fffffe          BL       mess_find_unvol
003b26  b110              CBZ      r0,|L1.15150|
003b28  6828              LDR      r0,[r5,#0]  ; mess_data
003b2a  2866              CMP      r0,#0x66
003b2c  d026              BEQ      |L1.15228|
                  |L1.15150|
;;;5415   		{
;;;5416   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5417   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5418   		}
;;;5419   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003b2e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003b30  07c0              LSLS     r0,r0,#31
003b32  d02f              BEQ      |L1.15252|
;;;5420   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003b34  6fa0              LDR      r0,[r4,#0x78]
003b36  f0407000          ORR      r0,r0,#0x2000000
003b3a  67a0              STR      r0,[r4,#0x78]
                  |L1.15164|
;;;5421   	#endif
;;;5422   
;;;5423   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003b3c  20d2              MOVS     r0,#0xd2
003b3e  f7fffffe          BL       mess_find_unvol
003b42  b110              CBZ      r0,|L1.15178|
003b44  6828              LDR      r0,[r5,#0]  ; mess_data
003b46  286a              CMP      r0,#0x6a
003b48  d029              BEQ      |L1.15262|
                  |L1.15178|
;;;5424   		{
;;;5425   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5426   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5427        	}
;;;5428   	else 
;;;5429   		{
;;;5430   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003b4a  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003b4c  4238              TST      r0,r7
003b4e  d034              BEQ      |L1.15290|
;;;5431        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003b50  69a0              LDR      r0,[r4,#0x18]
003b52  f0400020          ORR      r0,r0,#0x20
003b56  61a0              STR      r0,[r4,#0x18]
                  |L1.15192|
;;;5432   		}
;;;5433   	}
;;;5434   //Дополнительное реле УКУ 
;;;5435   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003b58  20d2              MOVS     r0,#0xd2
003b5a  f7fffffe          BL       mess_find_unvol
;;;5436   	{
;;;5437   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5438   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5439   	}
;;;5440   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5441   	{
;;;5442   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003b5e  f8df83fc          LDR      r8,|L1.16220|
003b62  4fff              LDR      r7,|L1.16224|
003b64  4eff              LDR      r6,|L1.16228|
003b66  b110              CBZ      r0,|L1.15214|
003b68  6828              LDR      r0,[r5,#0]            ;5435  ; mess_data
003b6a  2871              CMP      r0,#0x71              ;5435
003b6c  d02a              BEQ      |L1.15300|
                  |L1.15214|
003b6e  48fe              LDR      r0,|L1.16232|
003b70  f9b00000          LDRSH    r0,[r0,#0]            ;5440  ; DOP_RELE_FUNC
003b74  b380              CBZ      r0,|L1.15320|
;;;5443   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5444   	}
;;;5445   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003b76  2801              CMP      r0,#1
003b78  d066              BEQ      |L1.15432|
003b7a  e070              B        |L1.15454|
                  |L1.15228|
003b7c  6868              LDR      r0,[r5,#4]            ;5416  ; mess_data
003b7e  b120              CBZ      r0,|L1.15242|
003b80  69e0              LDR      r0,[r4,#0x1c]         ;5417
003b82  f0407000          ORR      r0,r0,#0x2000000      ;5417
003b86  61e0              STR      r0,[r4,#0x1c]         ;5417
003b88  e7d8              B        |L1.15164|
                  |L1.15242|
003b8a  69a0              LDR      r0,[r4,#0x18]         ;5416
003b8c  f0407000          ORR      r0,r0,#0x2000000      ;5416
003b90  61a0              STR      r0,[r4,#0x18]         ;5416
003b92  e7d3              B        |L1.15164|
                  |L1.15252|
003b94  6ba0              LDR      r0,[r4,#0x38]         ;5419
003b96  f0407000          ORR      r0,r0,#0x2000000      ;5419
003b9a  63a0              STR      r0,[r4,#0x38]         ;5419
003b9c  e7ce              B        |L1.15164|
                  |L1.15262|
003b9e  6868              LDR      r0,[r5,#4]            ;5425  ; mess_data
003ba0  b130              CBZ      r0,|L1.15280|
003ba2  2801              CMP      r0,#1                 ;5426
003ba4  d1d8              BNE      |L1.15192|
003ba6  69a0              LDR      r0,[r4,#0x18]         ;5426
003ba8  f0400020          ORR      r0,r0,#0x20           ;5426
003bac  61a0              STR      r0,[r4,#0x18]         ;5426
003bae  e7d3              B        |L1.15192|
                  |L1.15280|
003bb0  69e0              LDR      r0,[r4,#0x1c]         ;5425
003bb2  f0400020          ORR      r0,r0,#0x20           ;5425
003bb6  61e0              STR      r0,[r4,#0x1c]         ;5425
003bb8  e7ce              B        |L1.15192|
                  |L1.15290|
003bba  69e0              LDR      r0,[r4,#0x1c]         ;5430
003bbc  f0400020          ORR      r0,r0,#0x20           ;5430
003bc0  61e0              STR      r0,[r4,#0x1c]         ;5430
003bc2  e7c9              B        |L1.15192|
                  |L1.15300|
003bc4  6868              LDR      r0,[r5,#4]            ;5437  ; mess_data
003bc6  b110              CBZ      r0,|L1.15310|
003bc8  2801              CMP      r0,#1                 ;5438
003bca  d006              BEQ      |L1.15322|
003bcc  e047              B        |L1.15454|
                  |L1.15310|
003bce  69e0              LDR      r0,[r4,#0x1c]         ;5437
003bd0  f4407000          ORR      r0,r0,#0x200          ;5437
003bd4  61e0              STR      r0,[r4,#0x1c]         ;5437
003bd6  e042              B        |L1.15454|
                  |L1.15320|
003bd8  e004              B        |L1.15332|
                  |L1.15322|
003bda  69a0              LDR      r0,[r4,#0x18]         ;5438
003bdc  f4407000          ORR      r0,r0,#0x200          ;5438
003be0  61a0              STR      r0,[r4,#0x18]         ;5438
003be2  e03c              B        |L1.15454|
                  |L1.15332|
003be4  48e1              LDR      r0,|L1.16236|
003be6  49e2              LDR      r1,|L1.16240|
003be8  f9b00000          LDRSH    r0,[r0,#0]            ;5442  ; speedChIsOn
003bec  b9d0              CBNZ     r0,|L1.15396|
003bee  f8962022          LDRB     r2,[r6,#0x22]         ;5442  ; spc_stat
003bf2  2a02              CMP      r2,#2                 ;5442
003bf4  d016              BEQ      |L1.15396|
003bf6  780a              LDRB     r2,[r1,#0]            ;5442  ; hv_vz_stat
003bf8  b9a2              CBNZ     r2,|L1.15396|
003bfa  783a              LDRB     r2,[r7,#0]            ;5442  ; sp_ch_stat
003bfc  b992              CBNZ     r2,|L1.15396|
003bfe  7972              LDRB     r2,[r6,#5]            ;5442  ; vz1_stat
003c00  b982              CBNZ     r2,|L1.15396|
003c02  79f2              LDRB     r2,[r6,#7]            ;5442  ; vz2_stat
003c04  b972              CBNZ     r2,|L1.15396|
003c06  f9b82000          LDRSH    r2,[r8,#0]            ;5442  ; load_U
003c0a  230a              MOVS     r3,#0xa               ;5442
003c0c  fb92f2f3          SDIV     r2,r2,r3              ;5442
003c10  4bd8              LDR      r3,|L1.16244|
003c12  f9b33000          LDRSH    r3,[r3,#0]            ;5442  ; UVENTOFF
003c16  429a              CMP      r2,r3                 ;5442
003c18  da04              BGE      |L1.15396|
003c1a  69e0              LDR      r0,[r4,#0x1c]         ;5442
003c1c  f4407000          ORR      r0,r0,#0x200          ;5442
003c20  61e0              STR      r0,[r4,#0x1c]         ;5442
003c22  e01c              B        |L1.15454|
                  |L1.15396|
003c24  b958              CBNZ     r0,|L1.15422|
003c26  f8960022          LDRB     r0,[r6,#0x22]         ;5443  ; spc_stat
003c2a  2802              CMP      r0,#2                 ;5443
003c2c  d007              BEQ      |L1.15422|
003c2e  7808              LDRB     r0,[r1,#0]            ;5443  ; hv_vz_stat
003c30  b928              CBNZ     r0,|L1.15422|
003c32  7838              LDRB     r0,[r7,#0]            ;5443  ; sp_ch_stat
003c34  b918              CBNZ     r0,|L1.15422|
003c36  7970              LDRB     r0,[r6,#5]            ;5443  ; vz1_stat
003c38  b908              CBNZ     r0,|L1.15422|
003c3a  79f0              LDRB     r0,[r6,#7]            ;5443  ; vz2_stat
003c3c  b178              CBZ      r0,|L1.15454|
                  |L1.15422|
003c3e  69a0              LDR      r0,[r4,#0x18]         ;5443
003c40  f4407000          ORR      r0,r0,#0x200          ;5443
003c44  61a0              STR      r0,[r4,#0x18]         ;5443
003c46  e00a              B        |L1.15454|
                  |L1.15432|
;;;5446   	{
;;;5447   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003c48  20d2              MOVS     r0,#0xd2
003c4a  f7fffffe          BL       mess_find_unvol
003c4e  b110              CBZ      r0,|L1.15446|
003c50  6828              LDR      r0,[r5,#0]  ; mess_data
003c52  2872              CMP      r0,#0x72
003c54  d017              BEQ      |L1.15494|
                  |L1.15446|
;;;5448   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
003c56  69a0              LDR      r0,[r4,#0x18]
003c58  f4407000          ORR      r0,r0,#0x200
003c5c  61a0              STR      r0,[r4,#0x18]
                  |L1.15454|
;;;5449   	}
;;;5450   	
;;;5451   //Блок выносной реле
;;;5452   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
003c5e  20d2              MOVS     r0,#0xd2
003c60  f7fffffe          BL       mess_find_unvol
;;;5453   	{
;;;5454   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
003c64  f8df9310          LDR      r9,|L1.16248|
;;;5455   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5456   	}
;;;5457   else 
;;;5458   	{
;;;5459   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
003c68  4cc4              LDR      r4,|L1.16252|
003c6a  b110              CBZ      r0,|L1.15474|
003c6c  6828              LDR      r0,[r5,#0]            ;5452  ; mess_data
003c6e  2875              CMP      r0,#0x75              ;5452
003c70  d00e              BEQ      |L1.15504|
                  |L1.15474|
003c72  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003c74  07c0              LSLS     r0,r0,#31
003c76  d01e              BEQ      |L1.15542|
003c78  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003c7c  f0400001          ORR      r0,r0,#1
003c80  f8890000          STRB     r0,[r9,#0]
003c84  e01d              B        |L1.15554|
                  |L1.15494|
003c86  69e0              LDR      r0,[r4,#0x1c]         ;5447
003c88  f4407000          ORR      r0,r0,#0x200          ;5447
003c8c  61e0              STR      r0,[r4,#0x1c]         ;5447
003c8e  e7e6              B        |L1.15454|
                  |L1.15504|
003c90  6868              LDR      r0,[r5,#4]            ;5454  ; mess_data
003c92  b110              CBZ      r0,|L1.15514|
003c94  2801              CMP      r0,#1                 ;5455
003c96  d007              BEQ      |L1.15528|
003c98  e013              B        |L1.15554|
                  |L1.15514|
003c9a  f8990000          LDRB     r0,[r9,#0]            ;5454  ; bdr_transmit_stat
003c9e  f00000fe          AND      r0,r0,#0xfe           ;5454
003ca2  f8890000          STRB     r0,[r9,#0]            ;5454
003ca6  e00c              B        |L1.15554|
                  |L1.15528|
003ca8  f8990000          LDRB     r0,[r9,#0]            ;5455  ; bdr_transmit_stat
003cac  f0400001          ORR      r0,r0,#1              ;5455
003cb0  f8890000          STRB     r0,[r9,#0]            ;5455
003cb4  e005              B        |L1.15554|
                  |L1.15542|
;;;5460   	else 						bdr_transmit_stat&=0xfe;
003cb6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003cba  f00000fe          AND      r0,r0,#0xfe
003cbe  f8890000          STRB     r0,[r9,#0]
                  |L1.15554|
;;;5461   	}	
;;;5462   
;;;5463   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
003cc2  20d2              MOVS     r0,#0xd2
003cc4  f7fffffe          BL       mess_find_unvol
003cc8  b110              CBZ      r0,|L1.15568|
003cca  6828              LDR      r0,[r5,#0]  ; mess_data
003ccc  2876              CMP      r0,#0x76
003cce  d009              BEQ      |L1.15588|
                  |L1.15568|
;;;5464   	{
;;;5465   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5466   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5467   	}
;;;5468   else 
;;;5469   	{
;;;5470   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
003cd0  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003cd2  07c0              LSLS     r0,r0,#31
003cd4  d019              BEQ      |L1.15626|
003cd6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003cda  f0400002          ORR      r0,r0,#2
003cde  f8890000          STRB     r0,[r9,#0]
003ce2  e018              B        |L1.15638|
                  |L1.15588|
003ce4  6868              LDR      r0,[r5,#4]            ;5465  ; mess_data
003ce6  b110              CBZ      r0,|L1.15598|
003ce8  2801              CMP      r0,#1                 ;5466
003cea  d007              BEQ      |L1.15612|
003cec  e013              B        |L1.15638|
                  |L1.15598|
003cee  f8990000          LDRB     r0,[r9,#0]            ;5465  ; bdr_transmit_stat
003cf2  f00000fd          AND      r0,r0,#0xfd           ;5465
003cf6  f8890000          STRB     r0,[r9,#0]            ;5465
003cfa  e00c              B        |L1.15638|
                  |L1.15612|
003cfc  f8990000          LDRB     r0,[r9,#0]            ;5466  ; bdr_transmit_stat
003d00  f0400002          ORR      r0,r0,#2              ;5466
003d04  f8890000          STRB     r0,[r9,#0]            ;5466
003d08  e005              B        |L1.15638|
                  |L1.15626|
;;;5471   	else 						bdr_transmit_stat&=0xfd;
003d0a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d0e  f00000fd          AND      r0,r0,#0xfd
003d12  f8890000          STRB     r0,[r9,#0]
                  |L1.15638|
;;;5472   	}	
;;;5473   	
;;;5474   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
003d16  20d2              MOVS     r0,#0xd2
003d18  f7fffffe          BL       mess_find_unvol
003d1c  b110              CBZ      r0,|L1.15652|
003d1e  6828              LDR      r0,[r5,#0]  ; mess_data
003d20  2877              CMP      r0,#0x77
003d22  d009              BEQ      |L1.15672|
                  |L1.15652|
;;;5475   	{
;;;5476   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5477   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5478   	}
;;;5479   else 
;;;5480   	{
;;;5481   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
003d24  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003d26  07c0              LSLS     r0,r0,#31
003d28  d019              BEQ      |L1.15710|
003d2a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d2e  f0400004          ORR      r0,r0,#4
003d32  f8890000          STRB     r0,[r9,#0]
003d36  e018              B        |L1.15722|
                  |L1.15672|
003d38  6868              LDR      r0,[r5,#4]            ;5476  ; mess_data
003d3a  b110              CBZ      r0,|L1.15682|
003d3c  2801              CMP      r0,#1                 ;5477
003d3e  d007              BEQ      |L1.15696|
003d40  e013              B        |L1.15722|
                  |L1.15682|
003d42  f8990000          LDRB     r0,[r9,#0]            ;5476  ; bdr_transmit_stat
003d46  f00000fb          AND      r0,r0,#0xfb           ;5476
003d4a  f8890000          STRB     r0,[r9,#0]            ;5476
003d4e  e00c              B        |L1.15722|
                  |L1.15696|
003d50  f8990000          LDRB     r0,[r9,#0]            ;5477  ; bdr_transmit_stat
003d54  f0400004          ORR      r0,r0,#4              ;5477
003d58  f8890000          STRB     r0,[r9,#0]            ;5477
003d5c  e005              B        |L1.15722|
                  |L1.15710|
;;;5482   	else 						bdr_transmit_stat&=0xfb;
003d5e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d62  f00000fb          AND      r0,r0,#0xfb
003d66  f8890000          STRB     r0,[r9,#0]
                  |L1.15722|
;;;5483   	}	
;;;5484   	
;;;5485   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
003d6a  20d2              MOVS     r0,#0xd2
003d6c  f7fffffe          BL       mess_find_unvol
003d70  b110              CBZ      r0,|L1.15736|
003d72  6828              LDR      r0,[r5,#0]  ; mess_data
003d74  2878              CMP      r0,#0x78
003d76  d009              BEQ      |L1.15756|
                  |L1.15736|
;;;5486   	{
;;;5487   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5488   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5489   	}
;;;5490   else 
;;;5491   	{
;;;5492   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
003d78  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003d7a  07c0              LSLS     r0,r0,#31
003d7c  d019              BEQ      |L1.15794|
003d7e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d82  f0400008          ORR      r0,r0,#8
003d86  f8890000          STRB     r0,[r9,#0]
003d8a  e018              B        |L1.15806|
                  |L1.15756|
003d8c  6868              LDR      r0,[r5,#4]            ;5487  ; mess_data
003d8e  b110              CBZ      r0,|L1.15766|
003d90  2801              CMP      r0,#1                 ;5488
003d92  d007              BEQ      |L1.15780|
003d94  e013              B        |L1.15806|
                  |L1.15766|
003d96  f8990000          LDRB     r0,[r9,#0]            ;5487  ; bdr_transmit_stat
003d9a  f00000f7          AND      r0,r0,#0xf7           ;5487
003d9e  f8890000          STRB     r0,[r9,#0]            ;5487
003da2  e00c              B        |L1.15806|
                  |L1.15780|
003da4  f8990000          LDRB     r0,[r9,#0]            ;5488  ; bdr_transmit_stat
003da8  f0400008          ORR      r0,r0,#8              ;5488
003dac  f8890000          STRB     r0,[r9,#0]            ;5488
003db0  e005              B        |L1.15806|
                  |L1.15794|
;;;5493   	else 						bdr_transmit_stat&=0xf7;
003db2  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003db6  f00000f7          AND      r0,r0,#0xf7
003dba  f8890000          STRB     r0,[r9,#0]
                  |L1.15806|
;;;5494   	}	
;;;5495   					 	
;;;5496   #endif
;;;5497   
;;;5498   #ifdef UKU_KONTUR
;;;5499   
;;;5500   //Реле общей аварии
;;;5501   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5502   	{
;;;5503   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5504   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5505   	}
;;;5506   else 
;;;5507   	{
;;;5508        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5509             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5510             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5511             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5512             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5513        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5514   	}
;;;5515   
;;;5516   	
;;;5517   //rel_warm_plazma=0;
;;;5518   //Реле освещения   
;;;5519   /*
;;;5520   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5521   	{
;;;5522   	if(mess_data[1]==0)
;;;5523   		{
;;;5524   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5525   		rel_warm_plazma=1;
;;;5526   		}
;;;5527   	else if(mess_data[1]==1) 
;;;5528   		{
;;;5529   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5530   		rel_warm_plazma=2;
;;;5531   		}
;;;5532        }
;;;5533   else 
;;;5534   	{
;;;5535   	if(warm_stat_k==wsOFF) 
;;;5536   		{
;;;5537   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5538   		rel_warm_plazma=3;
;;;5539   		}
;;;5540        else 
;;;5541   		{
;;;5542   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5543   		rel_warm_plazma=4;
;;;5544   		}
;;;5545   	}
;;;5546   */
;;;5547   //Реле освещения
;;;5548   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5549   	{
;;;5550   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5551   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5552        }
;;;5553   else 
;;;5554   	{
;;;5555   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5556        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5557   	}
;;;5558   
;;;5559   
;;;5560   
;;;5561   //Реле выключения нагрузки
;;;5562   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5563   	{
;;;5564   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5565   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5566        }
;;;5567   else if(tloaddisable_cmnd==0)
;;;5568   	{
;;;5569   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5570   	}
;;;5571   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5572   	{
;;;5573   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5574   	}
;;;5575   
;;;5576   else 
;;;5577   	{
;;;5578   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5579        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5580   	} 
;;;5581   
;;;5582   //Реле осевого вентилятора или отопителя
;;;5583   if(RELE_LOG)
;;;5584   	{
;;;5585   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5586   		{
;;;5587   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5588   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5589   		}
;;;5590   	else 
;;;5591   		{
;;;5592   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5593   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5594   		} 
;;;5595   
;;;5596   	}
;;;5597   else 
;;;5598   	{
;;;5599   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5600   		{
;;;5601   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5602   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5603   		}
;;;5604   	else 
;;;5605   		{
;;;5606   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5607   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5608   		} 
;;;5609   	}
;;;5610   #endif
;;;5611   
;;;5612   
;;;5613   #ifdef UKU_TELECORE2015
;;;5614   //Реле аварии сети
;;;5615   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5616   	{
;;;5617   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5618   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5619   	}
;;;5620   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5621   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5622   
;;;5623   
;;;5624   //Реле освещения
;;;5625   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5626   	{
;;;5627   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5628   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5629        }
;;;5630   else 
;;;5631   	{
;;;5632   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5633        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5634   	}
;;;5635   
;;;5636   //Реле отопителя
;;;5637   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5638   	{
;;;5639   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5640   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5641   	}
;;;5642   else 
;;;5643   	{
;;;5644   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5645        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5646   	} 
;;;5647   //Реле вентилятора
;;;5648   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5649   	{
;;;5650   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5651   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5652   	}
;;;5653   else 
;;;5654   	{
;;;5655   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5656        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5657   	} 
;;;5658   
;;;5659   //Реле внутреннего вентилятора
;;;5660   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5661   	{
;;;5662   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5663   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5664   	}
;;;5665   else 
;;;5666   	{
;;;5667   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5668        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5669   	} 
;;;5670   
;;;5671   #endif
;;;5672   
;;;5673   #ifdef UKU_TELECORE2017
;;;5674   //Реле аварии сети
;;;5675   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5676   	{
;;;5677   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5678   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5679   	}
;;;5680   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5681   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5682   
;;;5683   
;;;5684   //Реле освещения
;;;5685   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5686   	{
;;;5687   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5688   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5689        }
;;;5690   else 
;;;5691   	{
;;;5692   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5693        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5694   	}
;;;5695   
;;;5696   //Реле отопителя
;;;5697   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5698   	{
;;;5699   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5700   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5701   	}
;;;5702   else 
;;;5703   	{
;;;5704   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5705        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5706   	} 
;;;5707   //Реле вентилятора
;;;5708   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5709   	{
;;;5710   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5711   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5712   	}
;;;5713   else 
;;;5714   	{
;;;5715   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5716        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5717   	} 
;;;5718   
;;;5719   //Реле внутреннего вентилятора
;;;5720   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5721   	{
;;;5722   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5723   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5724   	}
;;;5725   else 
;;;5726   	{
;;;5727   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5728        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5729   	} 
;;;5730   
;;;5731   //Реле выключения нагрузки
;;;5732   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5733   	{
;;;5734   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5735   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5736        }
;;;5737   else if(tloaddisable_cmnd==0)
;;;5738   	{
;;;5739   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5740   	}
;;;5741   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5742   	{
;;;5743   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5744   	}
;;;5745   
;;;5746   else 
;;;5747   	{
;;;5748   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5749        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5750   	} 
;;;5751   
;;;5752   
;;;5753   #endif
;;;5754   
;;;5755   #ifdef IPS_SGEP_GAZPROM
;;;5756   rele_hndl_plazma[0]++;
;;;5757   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5758   	{
;;;5759   	rele_hndl_plazma[1]++;
;;;5760   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5761   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5762        }
;;;5763   else 
;;;5764   	{
;;;5765   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5766        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5767   	} 
;;;5768   
;;;5769   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5770   	{
;;;5771   	rele_hndl_plazma[2]++;
;;;5772   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5773   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5774   	}
;;;5775   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5776   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5777   #endif
;;;5778   
;;;5779   if(NUMBDR==1)
003dbe  4870              LDR      r0,|L1.16256|
003dc0  8800              LDRH     r0,[r0,#0]  ; NUMBDR
003dc2  2801              CMP      r0,#1
003dc4  d17e              BNE      |L1.16068|
;;;5780   	{
;;;5781   	char ii_;
;;;5782   	char bdr_avar_stat_temp=0;
003dc6  f04f0000          MOV      r0,#0
;;;5783   	for	(ii_=0;ii_<4;ii_++)
003dca  4601              MOV      r1,r0
;;;5784   		{
;;;5785   		//АБ разряжена
;;;5786   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5787   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5788   		//Ускоренный заряд
;;;5789   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5790   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5791   		//Выравнивающий заряд
;;;5792   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5793   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5794   		//Общая авария ЗВУ
;;;5795   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5796   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5797   		//Uвых завышено
;;;5798   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5799   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
003dcc  f8dfa1b4          LDR      r10,|L1.16260|
;;;5800   		//Uвых занижено
;;;5801   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5802   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5803   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5804   			(
;;;5805   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
003dd0  f8df91b4          LDR      r9,|L1.16264|
003dd4  4d6d              LDR      r5,|L1.16268|
003dd6  f8dfb1b8          LDR      r11,|L1.16272|
003dda  f04f0301          MOV      r3,#1                 ;4737
                  |L1.15838|
003dde  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5786
003de2  ea5f7cc2          LSLS     r12,r2,#31            ;5786
003de6  d010              BEQ      |L1.15882|
003de8  f8dfc1a8          LDR      r12,|L1.16276|
003dec  f9b8e000          LDRSH    lr,[r8,#0]            ;5787  ; load_U
003df0  f9bcc000          LDRSH    r12,[r12,#0]          ;5787  ; USIGN
003df4  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5787
003df8  ebbe0f4c          CMP      lr,r12,LSL #1         ;5787
003dfc  da05              BGE      |L1.15882|
003dfe  fa03fc01          LSL      r12,r3,r1             ;5787
003e02  ea4c0c00          ORR      r12,r12,r0            ;5787
003e06  f00c00ff          AND      r0,r12,#0xff          ;5787
                  |L1.15882|
003e0a  ea5f7c82          LSLS     r12,r2,#30            ;5789
003e0e  d50a              BPL      |L1.15910|
003e10  f897c000          LDRB     r12,[r7,#0]           ;5790  ; sp_ch_stat
003e14  f1bc0f02          CMP      r12,#2                ;5790
003e18  d105              BNE      |L1.15910|
003e1a  fa03fc01          LSL      r12,r3,r1             ;5790
003e1e  ea4c0c00          ORR      r12,r12,r0            ;5790
003e22  f00c00ff          AND      r0,r12,#0xff          ;5790
                  |L1.15910|
003e26  ea5f7c42          LSLS     r12,r2,#29            ;5792
003e2a  d50a              BPL      |L1.15938|
003e2c  f896c022          LDRB     r12,[r6,#0x22]        ;5793  ; spc_stat
003e30  f1bc0f02          CMP      r12,#2                ;5793
003e34  d105              BNE      |L1.15938|
003e36  fa03fc01          LSL      r12,r3,r1             ;5793
003e3a  ea4c0c00          ORR      r12,r12,r0            ;5793
003e3e  f00c00ff          AND      r0,r12,#0xff          ;5793
                  |L1.15938|
003e42  ea5f7c02          LSLS     r12,r2,#28            ;5795
003e46  d50c              BPL      |L1.15970|
003e48  f8dfc14c          LDR      r12,|L1.16280|
003e4c  f8dcc000          LDR      r12,[r12,#0]          ;5796  ; avar_stat
003e50  f1bc0f00          CMP      r12,#0                ;5796
003e54  d005              BEQ      |L1.15970|
003e56  fa03fc01          LSL      r12,r3,r1             ;5796
003e5a  ea4c0c00          ORR      r12,r12,r0            ;5796
003e5e  f00c00ff          AND      r0,r12,#0xff          ;5796
                  |L1.15970|
003e62  ea5f6cc2          LSLS     r12,r2,#27            ;5798
003e66  d50a              BPL      |L1.15998|
003e68  f89ac000          LDRB     r12,[r10,#0]          ;5799  ; uout_av
003e6c  f1bc0f01          CMP      r12,#1                ;5799
003e70  d105              BNE      |L1.15998|
003e72  fa03fc01          LSL      r12,r3,r1             ;5799
003e76  ea4c0c00          ORR      r12,r12,r0            ;5799
003e7a  f00c00ff          AND      r0,r12,#0xff          ;5799
                  |L1.15998|
003e7e  ea5f6c82          LSLS     r12,r2,#26            ;5801
003e82  d50a              BPL      |L1.16026|
003e84  f89ac000          LDRB     r12,[r10,#0]          ;5802  ; uout_av
003e88  f1bc0f02          CMP      r12,#2                ;5802
003e8c  d105              BNE      |L1.16026|
003e8e  fa03fc01          LSL      r12,r3,r1             ;5802
003e92  ea4c0c00          ORR      r12,r12,r0            ;5802
003e96  f00c00ff          AND      r0,r12,#0xff          ;5802
                  |L1.16026|
003e9a  ea5f6c42          LSLS     r12,r2,#25            ;5803
003e9e  d525              BPL      |L1.16108|
003ea0  f899c001          LDRB     r12,[r9,#1]  ; bps
003ea4  ea5f6ccc          LSLS     r12,r12,#27
003ea8  d504              BPL      |L1.16052|
003eaa  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003eae  f1bc0f01          CMP      r12,#1
003eb2  da15              BGE      |L1.16096|
                  |L1.16052|
;;;5806   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
003eb4  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003eb8  ea5f6ccc          LSLS     r12,r12,#27
003ebc  d506              BPL      |L1.16076|
003ebe  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003ec2  e000              B        |L1.16070|
                  |L1.16068|
003ec4  e047              B        |L1.16214|
                  |L1.16070|
003ec6  f1bc0f02          CMP      r12,#2
003eca  da09              BGE      |L1.16096|
                  |L1.16076|
;;;5807   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
003ecc  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003ed0  ea5f6ccc          LSLS     r12,r12,#27
003ed4  d50a              BPL      |L1.16108|
003ed6  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003eda  f1bc0f03          CMP      r12,#3
003ede  db05              BLT      |L1.16108|
                  |L1.16096|
;;;5808   			))bdr_avar_stat_temp|=(1<<ii_);
003ee0  fa03fc01          LSL      r12,r3,r1
003ee4  ea4c0c00          ORR      r12,r12,r0
003ee8  f00c00ff          AND      r0,r12,#0xff
                  |L1.16108|
;;;5809   		if((RELE_SET_MASK[ii_]&0x80)&&
003eec  ea5f6c02          LSLS     r12,r2,#24
003ef0  d523              BPL      |L1.16186|
;;;5810   			(
;;;5811   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
003ef2  f899c001          LDRB     r12,[r9,#1]  ; bps
003ef6  ea5f7c0c          LSLS     r12,r12,#28
003efa  d004              BEQ      |L1.16134|
003efc  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f00  f1bc0f01          CMP      r12,#1
003f04  da13              BGE      |L1.16174|
                  |L1.16134|
;;;5812   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
003f06  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003f0a  ea5f7c0c          LSLS     r12,r12,#28
003f0e  d004              BEQ      |L1.16154|
003f10  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f14  f1bc0f02          CMP      r12,#2
003f18  da09              BGE      |L1.16174|
                  |L1.16154|
;;;5813   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
003f1a  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003f1e  ea5f7c0c          LSLS     r12,r12,#28
003f22  d00a              BEQ      |L1.16186|
003f24  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f28  f1bc0f03          CMP      r12,#3
003f2c  db05              BLT      |L1.16186|
                  |L1.16174|
;;;5814   			))bdr_avar_stat_temp|=(1<<ii_);
003f2e  fa03fc01          LSL      r12,r3,r1
003f32  ea4c0c00          ORR      r12,r12,r0
003f36  f00c00ff          AND      r0,r12,#0xff
                  |L1.16186|
;;;5815   
;;;5816   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
003f3a  0412              LSLS     r2,r2,#16
003f3c  d404              BMI      |L1.16200|
003f3e  fa03f201          LSL      r2,r3,r1
003f42  ea820200          EOR      r2,r2,r0
003f46  b2d0              UXTB     r0,r2
                  |L1.16200|
003f48  f1010101          ADD      r1,r1,#1              ;5783
003f4c  b2c9              UXTB     r1,r1                 ;5783
003f4e  2904              CMP      r1,#4                 ;5783
003f50  f4ffaf45          BCC      |L1.15838|
;;;5817   		}
;;;5818   	bdr_avar_stat=bdr_avar_stat_temp;
003f54  7020              STRB     r0,[r4,#0]
                  |L1.16214|
;;;5819   	}
;;;5820   }
003f56  e8bd9ff0          POP      {r4-r12,pc}
003f5a  0000              DCW      0x0000
                  |L1.16220|
                          DCD      load_U
                  |L1.16224|
                          DCD      sp_ch_stat
                  |L1.16228|
                          DCD      ||area_number.25||
                  |L1.16232|
                          DCD      DOP_RELE_FUNC
                  |L1.16236|
                          DCD      speedChIsOn
                  |L1.16240|
                          DCD      hv_vz_stat
                  |L1.16244|
                          DCD      UVENTOFF
                  |L1.16248|
                          DCD      bdr_transmit_stat
                  |L1.16252|
                          DCD      bdr_avar_stat
                  |L1.16256|
                          DCD      NUMBDR
                  |L1.16260|
                          DCD      uout_av
                  |L1.16264|
                          DCD      bps
                  |L1.16268|
                          DCD      NUMIST
                  |L1.16272|
                          DCD      RELE_SET_MASK
                  |L1.16276|
                          DCD      USIGN
                  |L1.16280|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;5823   //-----------------------------------------------
;;;5824   void bps_hndl(void)
003f9c  e92d5ff0          PUSH     {r4-r12,lr}
;;;5825   {
;;;5826   char ptr__,i;
;;;5827   unsigned short tempUS;
;;;5828   
;;;5829   if(sh_cnt0<10)
003fa0  4eff              LDR      r6,|L1.17312|
;;;5830   	{
;;;5831   	sh_cnt0++;
;;;5832   	if(sh_cnt0>=10)
;;;5833   		{
;;;5834   		sh_cnt0=0;
003fa2  2700              MOVS     r7,#0
;;;5835   		b1Hz_sh=1;
003fa4  f04f0a01          MOV      r10,#1
003fa8  f8960020          LDRB     r0,[r6,#0x20]         ;5829  ; sh_cnt0
003fac  280a              CMP      r0,#0xa               ;5829
003fae  d20a              BCS      |L1.16326|
003fb0  f1000001          ADD      r0,r0,#1              ;5831
003fb4  b2c0              UXTB     r0,r0                 ;5831
003fb6  f8860020          STRB     r0,[r6,#0x20]         ;5831
003fba  280a              CMP      r0,#0xa               ;5832
003fbc  d303              BCC      |L1.16326|
003fbe  f8867020          STRB     r7,[r6,#0x20]         ;5834
003fc2  f886a021          STRB     r10,[r6,#0x21]
                  |L1.16326|
;;;5836   		}
;;;5837   	}
;;;5838   
;;;5839   /*if(sh_cnt1<5)
;;;5840   	{
;;;5841   	sh_cnt1++;
;;;5842   	if(sh_cnt1==5)
;;;5843   		{
;;;5844   		sh_cnt1=0;
;;;5845   		b2Hz_sh=1;
;;;5846   		}
;;;5847   	} */
;;;5848   
;;;5849   
;;;5850   /*
;;;5851   if(mess_find(MESS_SRC_ON_OFF))
;;;5852   	{
;;;5853   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;5854   		{
;;;5855   		char i;
;;;5856   		for(i=0;i<NUMIST;i++)
;;;5857   			{
;;;5858   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;5859   			}
;;;5860   		
;;;5861   		}
;;;5862   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;5863   		{
;;;5864   		char i;
;;;5865   		for(i=0;i<NUMIST;i++)
;;;5866   			{
;;;5867   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;5868   			}
;;;5869   		
;;;5870   		}
;;;5871   	}
;;;5872   	
;;;5873   else if(mess_find(_MESS_SRC_MASK_ON))
;;;5874   	{				
;;;5875   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;5876   		{
;;;5877   		char i;
;;;5878   		for(i=0;i<NUMIST;i++)
;;;5879   			{
;;;5880   			if(mess_data[1]&(1<<i))
;;;5881   				{
;;;5882   				src[i]._ist_blok_cnt=0;
;;;5883   				src[i]._flags_tu=2;
;;;5884   				}
;;;5885   			}
;;;5886   		
;;;5887   		}				
;;;5888   	}*/
;;;5889   
;;;5890   
;;;5891   
;;;5892   /*else*/ 
;;;5893   bps_on_mask=0;
003fc6  f8a6705c          STRH     r7,[r6,#0x5c]
;;;5894   bps_off_mask=0;
003fca  f8a6705e          STRH     r7,[r6,#0x5e]
;;;5895   
;;;5896   if(mess_find_unvol(MESS2BPS_HNDL))
003fce  20cd              MOVS     r0,#0xcd
003fd0  f7fffffe          BL       mess_find_unvol
;;;5897   	{
;;;5898   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;5899   		{
;;;5900   		bps_off_mask=0xffff;
;;;5901   		}
;;;5902   
;;;5903   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;5904   		{
;;;5905   		bps_off_mask=mess_data[1];
;;;5906   		}
;;;5907   
;;;5908   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5909   		{
;;;5910   		bps_on_mask=mess_data[1];
;;;5911   		}
;;;5912   
;;;5913   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;5914   		{
;;;5915   		bps_on_mask=0xffff;
;;;5916   		}
;;;5917   
;;;5918   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;5919   		{
;;;5920   		bps_on_mask=mess_data[1];
;;;5921   		bps_off_mask=~(mess_data[1]);
;;;5922   		}
;;;5923   
;;;5924   
;;;5925   	for(i=0;i<=NUMIST;i++)
;;;5926   		{
;;;5927   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
003fd4  f8df83cc          LDR      r8,|L1.17316|
003fd8  f8dfb3cc          LDR      r11,|L1.17320|
003fdc  b3a0              CBZ      r0,|L1.16456|
003fde  4af3              LDR      r2,|L1.17324|
003fe0  f64f73ff          MOV      r3,#0xffff            ;5900
003fe4  6810              LDR      r0,[r2,#0]            ;5898  ; mess_data
003fe6  28ce              CMP      r0,#0xce              ;5898
003fe8  d101              BNE      |L1.16366|
003fea  f8a6305e          STRH     r3,[r6,#0x5e]         ;5900
                  |L1.16366|
003fee  28cf              CMP      r0,#0xcf              ;5903
003ff0  d102              BNE      |L1.16376|
003ff2  6851              LDR      r1,[r2,#4]            ;5905  ; mess_data
003ff4  f8a6105e          STRH     r1,[r6,#0x5e]         ;5905
                  |L1.16376|
003ff8  28d1              CMP      r0,#0xd1              ;5908
003ffa  d102              BNE      |L1.16386|
003ffc  6851              LDR      r1,[r2,#4]            ;5910  ; mess_data
003ffe  f8a6105c          STRH     r1,[r6,#0x5c]         ;5910
                  |L1.16386|
004002  28d2              CMP      r0,#0xd2              ;5913
004004  d101              BNE      |L1.16394|
004006  f8a6305c          STRH     r3,[r6,#0x5c]         ;5915
                  |L1.16394|
00400a  28d0              CMP      r0,#0xd0              ;5918
00400c  d106              BNE      |L1.16412|
00400e  6850              LDR      r0,[r2,#4]            ;5920  ; mess_data
004010  f8a6005c          STRH     r0,[r6,#0x5c]         ;5920
004014  ea6f0000          MVN      r0,r0                 ;5921
004018  f8a6005e          STRH     r0,[r6,#0x5e]         ;5921
                  |L1.16412|
00401c  f04f0400          MOV      r4,#0                 ;5925
004020  e037              B        |L1.16530|
                  |L1.16418|
004022  f8b6005e          LDRH     r0,[r6,#0x5e]  ; bps_off_mask
004026  fa0af904          LSL      r9,r10,r4
00402a  ea190f00          TST      r9,r0
00402e  d00c              BEQ      |L1.16458|
004030  ebc400c4          RSB      r0,r4,r4,LSL #3
004034  eb001004          ADD      r0,r0,r4,LSL #4
004038  eb080080          ADD      r0,r8,r0,LSL #2
00403c  f8301f40          LDRH     r1,[r0,#0x40]!
004040  f1010101          ADD      r1,r1,#1
004044  8001              STRH     r1,[r0,#0]
004046  e008              B        |L1.16474|
                  |L1.16456|
004048  e028              B        |L1.16540|
                  |L1.16458|
;;;5928   		else bps[i]._blok_cnt=0;
00404a  ebc400c4          RSB      r0,r4,r4,LSL #3
00404e  eb001004          ADD      r0,r0,r4,LSL #4
004052  eb080080          ADD      r0,r8,r0,LSL #2
004056  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.16474|
;;;5929   		gran(&bps[i]._blok_cnt,0,50);
00405a  ebc400c4          RSB      r0,r4,r4,LSL #3
00405e  eb001004          ADD      r0,r0,r4,LSL #4
004062  eb080580          ADD      r5,r8,r0,LSL #2
004066  f1050040          ADD      r0,r5,#0x40
00406a  2232              MOVS     r2,#0x32
00406c  2100              MOVS     r1,#0
00406e  f7fffffe          BL       gran
;;;5930   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
004072  f9b50040          LDRSH    r0,[r5,#0x40]
004076  2814              CMP      r0,#0x14
004078  dd01              BLE      |L1.16510|
00407a  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.16510|
;;;5931   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
00407e  f8b6005c          LDRH     r0,[r6,#0x5c]  ; bps_on_mask
004082  ea190f00          TST      r9,r0
004086  d001              BEQ      |L1.16524|
004088  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.16524|
00408c  f1040401          ADD      r4,r4,#1              ;5925
004090  b2e4              UXTB     r4,r4                 ;5925
                  |L1.16530|
004092  f9bb0000          LDRSH    r0,[r11,#0]           ;5925  ; NUMIST
004096  4284              CMP      r4,r0                 ;5925
004098  ddc3              BLE      |L1.16418|
00409a  e08d              B        |L1.16824|
                  |L1.16540|
;;;5932   	     }
;;;5933   
;;;5934   	
;;;5935   /*
;;;5936   
;;;5937   	if(bps_all_off_cnt>20)
;;;5938   		{
;;;5939   		for(i=0;i<=NUMIST;i++)
;;;5940   			{
;;;5941   	     	bps[i]._flags_tu=1;
;;;5942   	     	}
;;;5943   		}
;;;5944   	else if(bps_mask_off_cnt>20)
;;;5945   		{
;;;5946   		for(i=0;i<=NUMIST;i++)
;;;5947   			{
;;;5948   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5949   	     	}
;;;5950   		}	
;;;5951   		
;;;5952   	else if(bps_mask_on_off_cnt>20)
;;;5953   		{
;;;5954   		for(i=0;i<=NUMIST;i++)
;;;5955   			{
;;;5956   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5957   			else bps[i]._flags_tu=0;
;;;5958   	     	}
;;;5959   		}
;;;5960   		
;;;5961   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5962   		{
;;;5963   		for(i=0;i<=NUMIST;i++)
;;;5964   			{
;;;5965   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;5966   	     	}
;;;5967   		}
;;;5968   */										
;;;5969   	}
;;;5970   
;;;5971   
;;;5972   else if(b1Hz_sh)
00409c  f8960021          LDRB     r0,[r6,#0x21]  ; b1Hz_sh
0040a0  b3e8              CBZ      r0,|L1.16670|
;;;5973   	{
;;;5974   	ptr__=0;
0040a2  f04f0400          MOV      r4,#0
;;;5975        for(i=0;i<=NUMIST;i++)
0040a6  4621              MOV      r1,r4
0040a8  f9bb0000          LDRSH    r0,[r11,#0]           ;5925
0040ac  e00a              B        |L1.16580|
                  |L1.16558|
;;;5976   		{
;;;5977   	     bps[i]._flags_tu=1;
0040ae  ebc102c1          RSB      r2,r1,r1,LSL #3
0040b2  eb021201          ADD      r2,r2,r1,LSL #4
0040b6  eb080282          ADD      r2,r8,r2,LSL #2
0040ba  f882a02c          STRB     r10,[r2,#0x2c]
0040be  f1010101          ADD      r1,r1,#1              ;5975
0040c2  b2c9              UXTB     r1,r1                 ;5975
                  |L1.16580|
0040c4  4281              CMP      r1,r0                 ;5975
0040c6  ddf2              BLE      |L1.16558|
;;;5978   	     }	
;;;5979     	     
;;;5980     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
0040c8  f04f0100          MOV      r1,#0
0040cc  e023              B        |L1.16662|
                  |L1.16590|
;;;5981     		{
;;;5982   		char ii,iii;
;;;5983   
;;;5984   		ii=(char)NUMIST;
0040ce  b2c2              UXTB     r2,r0
;;;5985   		//if(ii<0)ii=0;
;;;5986   		if(ii>32)ii=32;
0040d0  2a20              CMP      r2,#0x20
0040d2  d901              BLS      |L1.16600|
0040d4  f04f0220          MOV      r2,#0x20
                  |L1.16600|
;;;5987   		iii=numOfForvardBps;
0040d8  f8963027          LDRB     r3,[r6,#0x27]  ; numOfForvardBps
;;;5988   		//if(iii<0)iii=0;
;;;5989   		if(iii>=NUMIST)iii=0;
0040dc  4283              CMP      r3,r0
0040de  db01              BLT      |L1.16612|
0040e0  f04f0300          MOV      r3,#0
                  |L1.16612|
;;;5990   		iii+=i;
0040e4  440b              ADD      r3,r3,r1
0040e6  b2db              UXTB     r3,r3
;;;5991   		iii=iii%ii;
0040e8  fbb3f5f2          UDIV     r5,r3,r2
0040ec  fb023215          MLS      r2,r2,r5,r3
;;;5992   		
;;;5993     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
0040f0  ebc203c2          RSB      r3,r2,r2,LSL #3
0040f4  eb031202          ADD      r2,r3,r2,LSL #4
0040f8  eb080282          ADD      r2,r8,r2,LSL #2
0040fc  7893              LDRB     r3,[r2,#2]
0040fe  2b02              CMP      r3,#2
004100  d001              BEQ      |L1.16646|
004102  2b01              CMP      r3,#1
004104  d104              BNE      |L1.16656|
                  |L1.16646|
;;;5994     	         	{
;;;5995     	         	bps[iii]._flags_tu=0;
004106  f882702c          STRB     r7,[r2,#0x2c]
;;;5996     	         	ptr__++;
00410a  f1040401          ADD      r4,r4,#1
00410e  b2e4              UXTB     r4,r4
                  |L1.16656|
004110  f1010101          ADD      r1,r1,#1              ;5980
004114  b2c9              UXTB     r1,r1                 ;5980
                  |L1.16662|
004116  4281              CMP      r1,r0                 ;5980
004118  da06              BGE      |L1.16680|
00411a  4aa5              LDR      r2,|L1.17328|
00411c  e000              B        |L1.16672|
                  |L1.16670|
00411e  e04b              B        |L1.16824|
                  |L1.16672|
004120  f9b22000          LDRSH    r2,[r2,#0]            ;5980  ; num_necc
004124  4294              CMP      r4,r2                 ;5980
004126  dbd2              BLT      |L1.16590|
                  |L1.16680|
;;;5997     	         	}
;;;5998   			
;;;5999     	     }
;;;6000   	bps[numOfForvardBps_old]._flags_tu=0;
004128  f8961028          LDRB     r1,[r6,#0x28]  ; numOfForvardBps_old
00412c  ebc102c1          RSB      r2,r1,r1,LSL #3
004130  eb021101          ADD      r1,r2,r1,LSL #4
004134  eb080181          ADD      r1,r8,r1,LSL #2
004138  f881702c          STRB     r7,[r1,#0x2c]
;;;6001   
;;;6002   	if(main_1Hz_cnt<60)
00413c  499d              LDR      r1,|L1.17332|
00413e  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
004142  293c              CMP      r1,#0x3c
004144  da0f              BGE      |L1.16742|
;;;6003   		{
;;;6004        	for(i=0;i<=NUMIST;i++)
004146  f04f0100          MOV      r1,#0
00414a  e00a              B        |L1.16738|
                  |L1.16716|
;;;6005   			{
;;;6006   	     	bps[i]._flags_tu=0;
00414c  ebc102c1          RSB      r2,r1,r1,LSL #3
004150  eb021201          ADD      r2,r2,r1,LSL #4
004154  eb080282          ADD      r2,r8,r2,LSL #2
004158  f882702c          STRB     r7,[r2,#0x2c]
00415c  f1010101          ADD      r1,r1,#1              ;6004
004160  b2c9              UXTB     r1,r1                 ;6004
                  |L1.16738|
004162  4281              CMP      r1,r0                 ;6004
004164  ddf2              BLE      |L1.16716|
                  |L1.16742|
;;;6007   	     	}	
;;;6008   		}
;;;6009   	if(ipsBlckStat)
004166  4994              LDR      r1,|L1.17336|
004168  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
00416a  b179              CBZ      r1,|L1.16780|
;;;6010   		{
;;;6011        	for(i=0;i<=NUMIST;i++)
00416c  f04f0100          MOV      r1,#0
004170  e00a              B        |L1.16776|
                  |L1.16754|
;;;6012   			{
;;;6013   	     	bps[i]._flags_tu=1;
004172  ebc102c1          RSB      r2,r1,r1,LSL #3
004176  eb021201          ADD      r2,r2,r1,LSL #4
00417a  eb080282          ADD      r2,r8,r2,LSL #2
00417e  f882a02c          STRB     r10,[r2,#0x2c]
004182  f1010101          ADD      r1,r1,#1              ;6011
004186  b2c9              UXTB     r1,r1                 ;6011
                  |L1.16776|
004188  4281              CMP      r1,r0                 ;6011
00418a  ddf2              BLE      |L1.16754|
                  |L1.16780|
;;;6014   	     	}
;;;6015   		}
;;;6016   
;;;6017        for(i=0;i<=NUMIST;i++)
00418c  f04f0100          MOV      r1,#0
;;;6018   		{
;;;6019   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
004190  f06f0331          MVN      r3,#0x31
004194  e00e              B        |L1.16820|
                  |L1.16790|
004196  ebc102c1          RSB      r2,r1,r1,LSL #3
00419a  eb021201          ADD      r2,r2,r1,LSL #4
00419e  eb080282          ADD      r2,r8,r2,LSL #2
0041a2  f892402c          LDRB     r4,[r2,#0x2c]
0041a6  2c01              CMP      r4,#1
0041a8  d101              BNE      |L1.16814|
0041aa  f8a23050          STRH     r3,[r2,#0x50]
                  |L1.16814|
0041ae  f1010101          ADD      r1,r1,#1              ;6017
0041b2  b2c9              UXTB     r1,r1                 ;6017
                  |L1.16820|
0041b4  4281              CMP      r1,r0                 ;6017
0041b6  ddee              BLE      |L1.16790|
                  |L1.16824|
;;;6020   	   	}	
;;;6021   		 
;;;6022     	}
;;;6023   
;;;6024   
;;;6025   for(i=0;i<NUMIST;i++)
0041b8  f04f0000          MOV      r0,#0
;;;6026        {
;;;6027        if(bps[i]._ist_blok_host_cnt!=0)
;;;6028             {
;;;6029             bps[i]._flags_tu=99;
0041bc  f04f0463          MOV      r4,#0x63
0041c0  f9bb1000          LDRSH    r1,[r11,#0]           ;5925
0041c4  e00f              B        |L1.16870|
                  |L1.16838|
0041c6  ebc002c0          RSB      r2,r0,r0,LSL #3       ;6027
0041ca  eb021200          ADD      r2,r2,r0,LSL #4       ;6027
0041ce  eb080282          ADD      r2,r8,r2,LSL #2       ;6027
0041d2  6bd3              LDR      r3,[r2,#0x3c]         ;6027
0041d4  b123              CBZ      r3,|L1.16864|
0041d6  f882402c          STRB     r4,[r2,#0x2c]
;;;6030   	     bps[i]._ist_blok_host_cnt--;
0041da  f1a30301          SUB      r3,r3,#1
0041de  63d3              STR      r3,[r2,#0x3c]
                  |L1.16864|
0041e0  f1000001          ADD      r0,r0,#1              ;6025
0041e4  b2c0              UXTB     r0,r0                 ;6025
                  |L1.16870|
0041e6  4288              CMP      r0,r1                 ;6025
0041e8  dbed              BLT      |L1.16838|
;;;6031             }
;;;6032        }
;;;6033   
;;;6034   
;;;6035   
;;;6036   
;;;6037   b1Hz_sh=0;
0041ea  f8867021          STRB     r7,[r6,#0x21]
;;;6038   
;;;6039   
;;;6040   num_of_wrks_bps=0;
0041ee  7777              STRB     r7,[r6,#0x1d]
;;;6041   tempUS=0;
0041f0  f04f0200          MOV      r2,#0
;;;6042   for(i=0;i<NUMIST;i++)
0041f4  4610              MOV      r0,r2
0041f6  e013              B        |L1.16928|
                  |L1.16888|
;;;6043   	{
;;;6044   	if(bps[i]._state==bsWRK)
0041f8  ebc003c0          RSB      r3,r0,r0,LSL #3
0041fc  eb031300          ADD      r3,r3,r0,LSL #4
004200  eb080383          ADD      r3,r8,r3,LSL #2
004204  789c              LDRB     r4,[r3,#2]
004206  2c01              CMP      r4,#1
004208  d107              BNE      |L1.16922|
;;;6045   		{
;;;6046   		num_of_wrks_bps++;
00420a  7f74              LDRB     r4,[r6,#0x1d]  ; num_of_wrks_bps
00420c  f1040401          ADD      r4,r4,#1
004210  7774              STRB     r4,[r6,#0x1d]
;;;6047   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
004212  69db              LDR      r3,[r3,#0x1c]
004214  4293              CMP      r3,r2
004216  dd00              BLE      |L1.16922|
004218  b29a              UXTH     r2,r3
                  |L1.16922|
00421a  f1000001          ADD      r0,r0,#1              ;6042
00421e  b2c0              UXTB     r0,r0                 ;6042
                  |L1.16928|
004220  4288              CMP      r0,r1                 ;6042
004222  dbe9              BLT      |L1.16888|
;;;6048   		}
;;;6049   	}
;;;6050   Ubpsmax=tempUS;
004224  f8a6204c          STRH     r2,[r6,#0x4c]
;;;6051   
;;;6052   bPARALLEL_ENOUG=0;
004228  f886702b          STRB     r7,[r6,#0x2b]
;;;6053   bPARALLEL_NOT_ENOUG=1;
00422c  f886a02a          STRB     r10,[r6,#0x2a]
;;;6054   
;;;6055   for(i=0;i<NUMIST;i++)
004230  f04f0000          MOV      r0,#0
;;;6056   	{
;;;6057   	if(bps[i]._Ti>=TSIGN)
004234  4a61              LDR      r2,|L1.17340|
004236  f9b23000          LDRSH    r3,[r2,#0]
;;;6058   		{
;;;6059   		bPARALLEL_ENOUG=1;
;;;6060   		}
;;;6061   	if(bps[i]._Ti>=(TSIGN-5))
00423a  f1a30405          SUB      r4,r3,#5
00423e  e011              B        |L1.16996|
                  |L1.16960|
004240  ebc002c0          RSB      r2,r0,r0,LSL #3       ;6057
004244  eb021200          ADD      r2,r2,r0,LSL #4       ;6057
004248  eb080282          ADD      r2,r8,r2,LSL #2       ;6057
00424c  6a92              LDR      r2,[r2,#0x28]         ;6057
00424e  429a              CMP      r2,r3                 ;6057
004250  db01              BLT      |L1.16982|
004252  f886a02b          STRB     r10,[r6,#0x2b]        ;6059
                  |L1.16982|
004256  42a2              CMP      r2,r4
004258  db01              BLT      |L1.16990|
;;;6062   		{
;;;6063   		bPARALLEL_NOT_ENOUG=0;
00425a  f886702a          STRB     r7,[r6,#0x2a]
                  |L1.16990|
00425e  f1000001          ADD      r0,r0,#1              ;6055
004262  b2c0              UXTB     r0,r0                 ;6055
                  |L1.16996|
004264  4288              CMP      r0,r1                 ;6055
004266  dbeb              BLT      |L1.16960|
;;;6064   		}
;;;6065   	}
;;;6066   
;;;6067   if(bPARALLEL_ENOUG==1)
004268  f896002b          LDRB     r0,[r6,#0x2b]  ; bPARALLEL_ENOUG
00426c  2801              CMP      r0,#1
00426e  d00a              BEQ      |L1.17030|
;;;6068   	{
;;;6069   	bPARALLEL=1;
;;;6070   	}
;;;6071   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
004270  f896002c          LDRB     r0,[r6,#0x2c]  ; bPARALLEL
004274  2800              CMP      r0,#0
004276  d005              BEQ      |L1.17028|
004278  f896002a          LDRB     r0,[r6,#0x2a]  ; bPARALLEL_NOT_ENOUG
00427c  2800              CMP      r0,#0
00427e  d001              BEQ      |L1.17028|
;;;6072   	{
;;;6073   	bPARALLEL=0;
004280  f886702c          STRB     r7,[r6,#0x2c]
                  |L1.17028|
;;;6074   	}
;;;6075   }
004284  e667              B        |L1.16214|
                  |L1.17030|
004286  f886a02c          STRB     r10,[r6,#0x2c]        ;6069
00428a  e664              B        |L1.16214|
;;;6076   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6083   //-----------------------------------------------
;;;6084   void powerAntiAliasingHndl(void)
00428c  b570              PUSH     {r4-r6,lr}
;;;6085   {
;;;6086   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
00428e  230a              MOVS     r3,#0xa
004290  4c4c              LDR      r4,|L1.17348|
004292  484b              LDR      r0,|L1.17344|
;;;6087   	{
;;;6088   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6089   	if(powerSummaryCnt>=10)
;;;6090   		{
;;;6091   		power_summary=power_summary_tempo;
;;;6092   		}
;;;6093   	}
;;;6094   else powerSummaryCnt=0;
004294  2500              MOVS     r5,#0
004296  6822              LDR      r2,[r4,#0]            ;6086  ; power_summary_tempo_old
004298  6800              LDR      r0,[r0,#0]            ;6086  ; power_summary_tempo
00429a  fbb2f6f3          UDIV     r6,r2,r3              ;6086
00429e  fbb0f1f3          UDIV     r1,r0,r3              ;6086
0042a2  4a49              LDR      r2,|L1.17352|
0042a4  42b1              CMP      r1,r6                 ;6086
0042a6  d10b              BNE      |L1.17088|
0042a8  7811              LDRB     r1,[r2,#0]            ;6088  ; powerSummaryCnt
0042aa  290f              CMP      r1,#0xf               ;6088
0042ac  d202              BCS      |L1.17076|
0042ae  f1010101          ADD      r1,r1,#1              ;6088
0042b2  7011              STRB     r1,[r2,#0]            ;6088
                  |L1.17076|
0042b4  7811              LDRB     r1,[r2,#0]            ;6089  ; powerSummaryCnt
0042b6  290a              CMP      r1,#0xa               ;6089
0042b8  d303              BCC      |L1.17090|
0042ba  4944              LDR      r1,|L1.17356|
0042bc  6008              STR      r0,[r1,#0]            ;6091  ; power_summary
0042be  e000              B        |L1.17090|
                  |L1.17088|
0042c0  7015              STRB     r5,[r2,#0]
                  |L1.17090|
;;;6095   power_summary_tempo_old=power_summary_tempo;
0042c2  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6096   
;;;6097   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0042c4  4842              LDR      r0,|L1.17360|
0042c6  4c43              LDR      r4,|L1.17364|
0042c8  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
0042cc  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
0042d0  fbb0f1f3          UDIV     r1,r0,r3
0042d4  fbb2f3f3          UDIV     r3,r2,r3
;;;6098   	{
;;;6099   	if(powerCurrentCnt<15)powerCurrentCnt++;
0042d8  4a3f              LDR      r2,|L1.17368|
0042da  4299              CMP      r1,r3                 ;6097
0042dc  d10b              BNE      |L1.17142|
0042de  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0042e0  290f              CMP      r1,#0xf
0042e2  d202              BCS      |L1.17130|
0042e4  f1010101          ADD      r1,r1,#1
0042e8  7011              STRB     r1,[r2,#0]
                  |L1.17130|
;;;6100   	if(powerCurrentCnt>=10)
0042ea  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0042ec  290a              CMP      r1,#0xa
0042ee  d303              BCC      |L1.17144|
;;;6101   		{
;;;6102   		power_current=power_current_tempo;
0042f0  493a              LDR      r1,|L1.17372|
0042f2  8008              STRH     r0,[r1,#0]
0042f4  e000              B        |L1.17144|
                  |L1.17142|
;;;6103   		}
;;;6104   	}
;;;6105   else powerCurrentCnt=0;
0042f6  7015              STRB     r5,[r2,#0]
                  |L1.17144|
;;;6106   power_current_tempo_old=power_current_tempo;
0042f8  8020              STRH     r0,[r4,#0]
;;;6107   }
0042fa  bd70              POP      {r4-r6,pc}
;;;6108   
                          ENDP

                  energometr_hndl PROC
;;;6218   //-----------------------------------------------
;;;6219   void energometr_hndl(void)
0042fc  4770              BX       lr
;;;6220   {
;;;6221   //2F 3F 21 0D 0A 
;;;6222   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6223   //2F 3F 21 0D 0A 
;;;6224   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6225   //06 30 35 31 0D 0A 
;;;6226   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6227   
;;;6228   #ifdef CE102M_ENABLED
;;;6229   /*if
;;;6230   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6231   
;;;6232   if(read_power_cnt_main_cnt)
;;;6233   	{
;;;6234   	read_power_cnt_main_cnt--;
;;;6235   	if(read_power_cnt_main_cnt==0)
;;;6236   		{
;;;6237   		rx_read_power_cnt_phase=0;
;;;6238   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6239   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6240   		else bENERGOMETR_UIP=0;
;;;6241   		//bENERGOMETR_UIP=2;
;;;6242   		}
;;;6243   	}
;;;6244   
;;;6245   if (rx_read_power_cnt_phase==0)
;;;6246   	{
;;;6247   	char command_with_crc[20];
;;;6248   	
;;;6249      	command_with_crc[0]=0xaf;  // /
;;;6250   	command_with_crc[1]=0x3f;  // ?
;;;6251   	command_with_crc[2]=0x21;  // !
;;;6252   	command_with_crc[3]=0x8d;  // CR
;;;6253   	command_with_crc[4]=0x0a;  // LF
;;;6254   
;;;6255   	uart_out__adr1(command_with_crc,5);
;;;6256   
;;;6257   	rx_wr_index1=0;
;;;6258   	rx_read_power_cnt_phase=1;
;;;6259   
;;;6260   	read_power_cnt_main_cnt=50;
;;;6261   	}
;;;6262   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6263   	{
;;;6264   	char command_with_crc[20];
;;;6265   	
;;;6266   	command_with_crc[0]=0x06;  //  
;;;6267   	command_with_crc[1]=0x30;  // 0
;;;6268   	command_with_crc[2]=0x35;  // 5
;;;6269   	command_with_crc[3]=0xb1;  // 1
;;;6270   	command_with_crc[4]=0x8d;  // CR
;;;6271   	command_with_crc[5]=0x0a;  // LF
;;;6272   	
;;;6273   	uart_out__adr1(command_with_crc,6);
;;;6274   	
;;;6275   	rx_wr_index1=0;
;;;6276   	rx_read_power_cnt_phase=3;
;;;6277   
;;;6278   	read_power_cnt_main_cnt=50;
;;;6279   	}  
;;;6280   
;;;6281   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6282   	{
;;;6283   	char command_with_crc[20];
;;;6284   	
;;;6285   	command_with_crc[0]=0x81;  //  
;;;6286   	command_with_crc[1]=0xd2;  // 0
;;;6287   	command_with_crc[2]=0xb1;  // 5
;;;6288   	command_with_crc[3]=0x82;  // 1
;;;6289   	command_with_crc[4]=0x56;  // CR
;;;6290   	command_with_crc[5]=0xcf;  // LF
;;;6291   	command_with_crc[6]=0xcc;  // 1
;;;6292   	command_with_crc[7]=0xd4;  // CR
;;;6293   	command_with_crc[8]=0x41;  // LF
;;;6294   	command_with_crc[9]=0x28;  // 1
;;;6295   	command_with_crc[10]=0xa9;  // CR
;;;6296   	command_with_crc[11]=0x03;  // LF
;;;6297   	command_with_crc[12]=0x5f;  // LF
;;;6298   		
;;;6299   	uart_out__adr1(command_with_crc,13);
;;;6300   	
;;;6301   	rx_wr_index1=0;
;;;6302   	rx_read_power_cnt_phase=5;
;;;6303   
;;;6304   	read_power_cnt_main_cnt=50;
;;;6305   	}  
;;;6306   
;;;6307   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6308   	{
;;;6309   	char command_with_crc[20];
;;;6310   	
;;;6311   	command_with_crc[0]=0x81;  //  
;;;6312   	command_with_crc[1]=0xd2;  // 0
;;;6313   	command_with_crc[2]=0xb1;  // 5
;;;6314   	command_with_crc[3]=0x82;  // 1
;;;6315   	command_with_crc[4]=0xc3;  // CR
;;;6316   	command_with_crc[5]=0x55;  // LF
;;;6317   	command_with_crc[6]=0xd2;  // 1
;;;6318   	command_with_crc[7]=0xd2;  // CR
;;;6319   	command_with_crc[8]=0xc5;  // LF
;;;6320   	command_with_crc[9]=0x28;  // 1
;;;6321   	command_with_crc[10]=0xa9;  // CR
;;;6322   	command_with_crc[11]=0x03;  // LF
;;;6323   	command_with_crc[12]=0x5a;  // LF
;;;6324   		
;;;6325   	uart_out__adr1(command_with_crc,13);
;;;6326   	
;;;6327   	rx_wr_index1=0;
;;;6328   	rx_read_power_cnt_phase=9;
;;;6329   
;;;6330   	read_power_cnt_main_cnt=50;
;;;6331   	}  
;;;6332   
;;;6333   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6334   	{
;;;6335   	char command_with_crc[20];
;;;6336   	
;;;6337   	command_with_crc[0]=0x81;  //  		01
;;;6338   	command_with_crc[1]=0xd2;  // R		52
;;;6339   	command_with_crc[2]=0xb1;  // 1		31
;;;6340   	command_with_crc[3]=0x82;  // 		02
;;;6341   	command_with_crc[4]=0x50;  // P		50
;;;6342   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6343   	command_with_crc[6]=0xd7;  // W		57
;;;6344   	command_with_crc[7]=0xc5;  // E		45
;;;6345   	command_with_crc[8]=0x50;  // P		50
;;;6346   	command_with_crc[9]=0x28;  // (		28
;;;6347   	command_with_crc[10]=0xa9;  // )	29
;;;6348   	command_with_crc[11]=0x03;  // 		03
;;;6349   	command_with_crc[12]=0xe4;  // d	64
;;;6350   		
;;;6351   	uart_out__adr1(command_with_crc,13);
;;;6352   	
;;;6353   	rx_wr_index1=0;
;;;6354   	rx_read_power_cnt_phase=21;
;;;6355   
;;;6356   	read_power_cnt_main_cnt=50;
;;;6357   	}  
;;;6358   
;;;6359   
;;;6360   #endif
;;;6361   }
;;;6362   
                          ENDP

                  ips_current_average_hndl PROC
;;;6363   //-----------------------------------------------
;;;6364   void ips_current_average_hndl(void)
0042fe  e92d4ff0          PUSH     {r4-r11,lr}
;;;6365   {
004302  b089              SUB      sp,sp,#0x24
;;;6366   
;;;6367   if(++ica_timer_cnt>=10) 
004304  4e36              LDR      r6,|L1.17376|
;;;6368   	{
;;;6369   	ica_timer_cnt=0;
004306  2400              MOVS     r4,#0
004308  7830              LDRB     r0,[r6,#0]            ;6367  ; ica_timer_cnt
00430a  1c40              ADDS     r0,r0,#1              ;6367
00430c  b2c0              UXTB     r0,r0                 ;6367
00430e  7030              STRB     r0,[r6,#0]            ;6367
004310  280a              CMP      r0,#0xa               ;6367
004312  d300              BCC      |L1.17174|
004314  7034              STRB     r4,[r6,#0]
                  |L1.17174|
;;;6370   	}
;;;6371   
;;;6372   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004316  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004318  4f32              LDR      r7,|L1.17380|
;;;6373   	{
;;;6374   	
;;;6375   	ica_plazma[0]++;
;;;6376   
;;;6377   	ica_my_current=bps_I;
;;;6378   
;;;6379   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00431a  f8dfb0cc          LDR      r11,|L1.17384|
00431e  4d20              LDR      r5,|L1.17312|
004320  bbe8              CBNZ     r0,|L1.17310|
004322  7f68              LDRB     r0,[r5,#0x1d]         ;6372  ; num_of_wrks_bps
004324  b3d8              CBZ      r0,|L1.17310|
004326  f8950022          LDRB     r0,[r5,#0x22]         ;6372  ; spc_stat
00432a  7969              LDRB     r1,[r5,#5]            ;6372  ; vz1_stat
00432c  4308              ORRS     r0,r0,r1              ;6372
00432e  79e9              LDRB     r1,[r5,#7]            ;6372  ; vz2_stat
004330  4308              ORRS     r0,r0,r1              ;6372
004332  7839              LDRB     r1,[r7,#0]            ;6372  ; sp_ch_stat
004334  4308              ORRS     r0,r0,r1              ;6372
004336  d17e              BNE      |L1.17462|
004338  f8df90b0          LDR      r9,|L1.17388|
00433c  f8990000          LDRB     r0,[r9,#0]            ;6375  ; ica_plazma
004340  f1000001          ADD      r0,r0,#1              ;6375
004344  f8890000          STRB     r0,[r9,#0]            ;6375
004348  4829              LDR      r0,|L1.17392|
00434a  f9b01000          LDRSH    r1,[r0,#0]            ;6377  ; bps_I
00434e  4829              LDR      r0,|L1.17396|
004350  8001              STRH     r1,[r0,#0]            ;6377
004352  4829              LDR      r0,|L1.17400|
;;;6380   		{
;;;6381   		ica_plazma[1]++;
;;;6382   		ica_u_necc--;
004354  f8dfa0a4          LDR      r10,|L1.17404|
004358  f9b02000          LDRSH    r2,[r0,#0]            ;6379  ; ica_your_current
00435c  4648              MOV      r0,r9                 ;6375
00435e  f9bac000          LDRSH    r12,[r10,#0]
004362  7843              LDRB     r3,[r0,#1]            ;6381
004364  4826              LDR      r0,|L1.17408|
004366  4291              CMP      r1,r2                 ;6379
004368  f9b08000          LDRSH    r8,[r0,#0]            ;6379
00436c  4658              MOV      r0,r11                ;6379
00436e  f9b00000          LDRSH    r0,[r0,#0]            ;6379
004372  dd47              BLE      |L1.17412|
004374  eba10e02          SUB      lr,r1,r2              ;6379
004378  f1be0f05          CMP      lr,#5                 ;6379
00437c  db42              BLT      |L1.17412|
00437e  2801              CMP      r0,#1                 ;6379
004380  d004              BEQ      |L1.17292|
004382  2802              CMP      r0,#2                 ;6379
004384  d13e              BNE      |L1.17412|
004386  f1b80f05          CMP      r8,#5                 ;6379
00438a  dd3b              BLE      |L1.17412|
                  |L1.17292|
00438c  f1030301          ADD      r3,r3,#1              ;6381
004390  f8893001          STRB     r3,[r9,#1]            ;6381
004394  f1ac0c01          SUB      r12,r12,#1
004398  f8aac000          STRH     r12,[r10,#0]
00439c  e046              B        |L1.17452|
                  |L1.17310|
00439e  e04a              B        |L1.17462|
                  |L1.17312|
                          DCD      ||area_number.25||
                  |L1.17316|
                          DCD      bps
                  |L1.17320|
                          DCD      NUMIST
                  |L1.17324|
                          DCD      mess_data
                  |L1.17328|
                          DCD      num_necc
                  |L1.17332|
                          DCD      main_1Hz_cnt
                  |L1.17336|
                          DCD      ipsBlckStat
                  |L1.17340|
                          DCD      TSIGN
                  |L1.17344|
                          DCD      power_summary_tempo
                  |L1.17348|
                          DCD      power_summary_tempo_old
                  |L1.17352|
                          DCD      powerSummaryCnt
                  |L1.17356|
                          DCD      power_summary
                  |L1.17360|
                          DCD      power_current_tempo
                  |L1.17364|
                          DCD      power_current_tempo_old
                  |L1.17368|
                          DCD      powerCurrentCnt
                  |L1.17372|
                          DCD      power_current
                  |L1.17376|
                          DCD      ica_timer_cnt
                  |L1.17380|
                          DCD      sp_ch_stat
                  |L1.17384|
                          DCD      ICA_EN
                  |L1.17388|
                          DCD      ica_plazma
                  |L1.17392|
                          DCD      bps_I
                  |L1.17396|
                          DCD      ica_my_current
                  |L1.17400|
                          DCD      ica_your_current
                  |L1.17404|
                          DCD      ica_u_necc
                  |L1.17408|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.17412|
;;;6383   		}
;;;6384   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004404  4291              CMP      r1,r2
004406  da11              BGE      |L1.17452|
004408  1a51              SUBS     r1,r2,r1
00440a  2905              CMP      r1,#5
00440c  db0e              BLT      |L1.17452|
00440e  2801              CMP      r0,#1
004410  d004              BEQ      |L1.17436|
004412  2802              CMP      r0,#2
004414  d10a              BNE      |L1.17452|
004416  f1b80f05          CMP      r8,#5
00441a  dd07              BLE      |L1.17452|
                  |L1.17436|
;;;6385   		{
;;;6386   		ica_plazma[1]--;
00441c  f1a30301          SUB      r3,r3,#1
004420  f8893001          STRB     r3,[r9,#1]
;;;6387   		ica_u_necc++;
004424  f10c0c01          ADD      r12,r12,#1
004428  f8aac000          STRH     r12,[r10,#0]
                  |L1.17452|
;;;6388   		}
;;;6389   	gran(&ica_u_necc,-100,100);
00442c  2264              MOVS     r2,#0x64
00442e  4251              RSBS     r1,r2,#0
004430  48ff              LDR      r0,|L1.18480|
004432  f7fffffe          BL       gran
                  |L1.17462|
;;;6390   	}
;;;6391   
;;;6392   
;;;6393   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) /*&& (num_of_wrks_bps)*/)
004436  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
00443a  2801              CMP      r0,#1
00443c  d166              BNE      |L1.17676|
00443e  f8950022          LDRB     r0,[r5,#0x22]  ; spc_stat
004442  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004444  4308              ORRS     r0,r0,r1
004446  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
004448  4308              ORRS     r0,r0,r1
00444a  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
00444c  4308              ORRS     r0,r0,r1
00444e  d15d              BNE      |L1.17676|
;;;6394   	{
;;;6395   	
;;;6396   	if(ica_timer_cnt==8)
004450  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6397   		{
;;;6398   		char modbus_buff[20],i;
;;;6399   		short crc_temp;
;;;6400   	
;;;6401   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004452  4bf8              LDR      r3,|L1.18484|
;;;6402   		modbus_buff[1] = 4;
;;;6403   		modbus_buff[2] = 0;
;;;6404   		modbus_buff[3] = 2;
;;;6405   		modbus_buff[4] = 0;	
;;;6406   		modbus_buff[5] = 1;
;;;6407   	
;;;6408   		crc_temp= CRC16_2(modbus_buff,6);
;;;6409   	
;;;6410   		modbus_buff[6]= (char)crc_temp;
;;;6411   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6412   	
;;;6413   		if(ICA_CH==0)
004454  4ff8              LDR      r7,|L1.18488|
004456  2808              CMP      r0,#8                 ;6396
004458  d05b              BEQ      |L1.17682|
;;;6414   			{
;;;6415   			for (i=0;i<8;i++)
;;;6416   				{
;;;6417   				putchar_sc16is700(modbus_buff[i]);
;;;6418   				}
;;;6419   			}
;;;6420   		else if(ICA_CH==2)
;;;6421   			{
;;;6422   			uart_out1 (5,4,0,2,0,1,0);
;;;6423   			}
;;;6424   		}
;;;6425   	else
;;;6426   		{
;;;6427   		char modbus_buff[20],i;
;;;6428   		short crc_temp, tempSSSS;
;;;6429   
;;;6430   		tempSSSS=cntrl_stat_old;
00445a  f9b56032          LDRSH    r6,[r5,#0x32]  ; cntrl_stat_old
;;;6431   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
00445e  48f7              LDR      r0,|L1.18492|
004460  f06f0214          MVN      r2,#0x14
004464  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
004468  ebc01100          RSB      r1,r0,r0,LSL #4
00446c  eb020c81          ADD      r12,r2,r1,LSL #2
004470  f9b52050          LDRSH    r2,[r5,#0x50]  ; main_kb_cnt
004474  4594              CMP      r12,r2
004476  d00b              BEQ      |L1.17552|
004478  f06f0513          MVN      r5,#0x13
00447c  eb050581          ADD      r5,r5,r1,LSL #2
004480  4295              CMP      r5,r2
004482  d005              BEQ      |L1.17552|
004484  f06f0512          MVN      r5,#0x12
004488  eb050181          ADD      r1,r5,r1,LSL #2
00448c  4291              CMP      r1,r2
00448e  d101              BNE      |L1.17556|
                  |L1.17552|
004490  f4404680          ORR      r6,r0,#0x4000
                  |L1.17556|
;;;6432   
;;;6433   
;;;6434   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004494  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
004496  f88d0010          STRB     r0,[sp,#0x10]
;;;6435   		modbus_buff[1] = 6;
00449a  f04f0006          MOV      r0,#6
00449e  f88d0011          STRB     r0,[sp,#0x11]
;;;6436   		modbus_buff[2] = 0;
0044a2  f88d4012          STRB     r4,[sp,#0x12]
;;;6437   		modbus_buff[3] = 100;
0044a6  f04f0064          MOV      r0,#0x64
0044aa  f88d0013          STRB     r0,[sp,#0x13]
;;;6438   		modbus_buff[4] = (char)(tempSSSS/256);	
0044ae  ea4f70e6          ASR      r0,r6,#31
0044b2  eb066010          ADD      r0,r6,r0,LSR #24
0044b6  ea4f2120          ASR      r1,r0,#8
0044ba  f88d1014          STRB     r1,[sp,#0x14]
;;;6439   		modbus_buff[5] = (char)(tempSSSS%256);
0044be  4630              MOV      r0,r6
0044c0  f88d0015          STRB     r0,[sp,#0x15]
;;;6440   	
;;;6441   		crc_temp= CRC16_2(modbus_buff,6);
0044c4  f04f0106          MOV      r1,#6
0044c8  a804              ADD      r0,sp,#0x10
0044ca  f7fffffe          BL       CRC16_2
;;;6442   	
;;;6443   		modbus_buff[6]= (char)crc_temp;
0044ce  f88d0016          STRB     r0,[sp,#0x16]
;;;6444   		modbus_buff[7]= (char)(crc_temp>>8);
0044d2  ea4f2020          ASR      r0,r0,#8
0044d6  f88d0017          STRB     r0,[sp,#0x17]
;;;6445   	
;;;6446   		crc_temp= CRC16_2(modbus_buff,6);
0044da  f04f0106          MOV      r1,#6
0044de  a804              ADD      r0,sp,#0x10
0044e0  f7fffffe          BL       CRC16_2
;;;6447   	
;;;6448   		plazma_ica1=tempSSSS;
0044e4  48d6              LDR      r0,|L1.18496|
0044e6  8006              STRH     r6,[r0,#0]
;;;6449   		if(ICA_CH==0)
0044e8  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
0044ec  b3f0              CBZ      r0,|L1.17772|
;;;6450   			{
;;;6451   			for (i=0;i<8;i++)
;;;6452   				{
;;;6453   				putchar_sc16is700(modbus_buff[i]);
;;;6454   				}
;;;6455   			}
;;;6456   		else if(ICA_CH==2)
0044ee  2802              CMP      r0,#2
0044f0  d10c              BNE      |L1.17676|
;;;6457   			{
;;;6458   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
0044f2  f89d0015          LDRB     r0,[sp,#0x15]
0044f6  f89d1014          LDRB     r1,[sp,#0x14]
0044fa  e9cd0401          STRD     r0,r4,[sp,#4]
0044fe  9100              STR      r1,[sp,#0]
004500  2364              MOVS     r3,#0x64
004502  2200              MOVS     r2,#0
004504  2106              MOVS     r1,#6
004506  2005              MOVS     r0,#5
004508  f7fffffe          BL       uart_out1
                  |L1.17676|
;;;6459   			}
;;;6460   		}
;;;6461   	}
;;;6462   }
00450c  b009              ADD      sp,sp,#0x24
00450e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.17682|
004512  8818              LDRH     r0,[r3,#0]            ;6401  ; ICA_MODBUS_ADDRESS
004514  f88d0010          STRB     r0,[sp,#0x10]         ;6401
004518  f04f0004          MOV      r0,#4                 ;6402
00451c  f88d0011          STRB     r0,[sp,#0x11]         ;6402
004520  f88d4012          STRB     r4,[sp,#0x12]         ;6403
004524  f04f0002          MOV      r0,#2                 ;6404
004528  f88d0013          STRB     r0,[sp,#0x13]         ;6404
00452c  f88d4014          STRB     r4,[sp,#0x14]         ;6405
004530  f04f0501          MOV      r5,#1                 ;6406
004534  f88d5015          STRB     r5,[sp,#0x15]         ;6406
004538  f04f0106          MOV      r1,#6                 ;6408
00453c  a804              ADD      r0,sp,#0x10           ;6408
00453e  f7fffffe          BL       CRC16_2
004542  f88d0016          STRB     r0,[sp,#0x16]         ;6410
004546  ea4f2020          ASR      r0,r0,#8              ;6411
00454a  f88d0017          STRB     r0,[sp,#0x17]         ;6411
00454e  f9b70000          LDRSH    r0,[r7,#0]            ;6413  ; ICA_CH
004552  b160              CBZ      r0,|L1.17774|
004554  2802              CMP      r0,#2                 ;6420
004556  d1d9              BNE      |L1.17676|
004558  e9cd4500          STRD     r4,r5,[sp,#0]         ;6422
00455c  2302              MOVS     r3,#2                 ;6422
00455e  2200              MOVS     r2,#0                 ;6422
004560  2104              MOVS     r1,#4                 ;6422
004562  2005              MOVS     r0,#5                 ;6422
004564  9402              STR      r4,[sp,#8]            ;6422
004566  f7fffffe          BL       uart_out1
00456a  e7cf              B        |L1.17676|
                  |L1.17772|
00456c  e00b              B        |L1.17798|
                  |L1.17774|
00456e  f04f0400          MOV      r4,#0                 ;6415
004572  ad04              ADD      r5,sp,#0x10           ;6398
                  |L1.17780|
004574  5d28              LDRB     r0,[r5,r4]            ;6417
004576  f7fffffe          BL       putchar_sc16is700
00457a  f1040401          ADD      r4,r4,#1              ;6415
00457e  b2e4              UXTB     r4,r4                 ;6415
004580  2c08              CMP      r4,#8                 ;6415
004582  d3f7              BCC      |L1.17780|
004584  e7c2              B        |L1.17676|
                  |L1.17798|
004586  f04f0400          MOV      r4,#0                 ;6451
00458a  ad04              ADD      r5,sp,#0x10           ;6427
                  |L1.17804|
00458c  5d28              LDRB     r0,[r5,r4]            ;6453
00458e  f7fffffe          BL       putchar_sc16is700
004592  f1040401          ADD      r4,r4,#1              ;6451
004596  b2e4              UXTB     r4,r4                 ;6451
004598  2c08              CMP      r4,#8                 ;6451
00459a  d3f7              BCC      |L1.17804|
00459c  e7b6              B        |L1.17676|
;;;6463   
                          ENDP

                  ipsBlckHndl PROC
;;;6546   //-----------------------------------------------
;;;6547   void ipsBlckHndl(char in)
00459e  b510              PUSH     {r4,lr}
;;;6548   {
;;;6549   
;;;6550   ipsBlckStat=0;
0045a0  4ba8              LDR      r3,|L1.18500|
0045a2  f04f0000          MOV      r0,#0
0045a6  8018              STRH     r0,[r3,#0]
;;;6551   if(ipsBlckSrc==1)
0045a8  48a7              LDR      r0,|L1.18504|
0045aa  f04f0401          MOV      r4,#1
;;;6552   	{
;;;6553   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
0045ae  f44f62fa          MOV      r2,#0x7d0
0045b2  f9b01000          LDRSH    r1,[r0,#0]            ;6551  ; ipsBlckSrc
0045b6  48a5              LDR      r0,|L1.18508|
0045b8  2901              CMP      r1,#1                 ;6551
0045ba  f9b00000          LDRSH    r0,[r0,#0]
0045be  d006              BEQ      |L1.17870|
;;;6554   	}
;;;6555   else if(ipsBlckSrc==2)
0045c0  2902              CMP      r1,#2
0045c2  d10f              BNE      |L1.17892|
0045c4  49a2              LDR      r1,|L1.18512|
;;;6556   	{
;;;6557   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
0045c6  f9b1101a          LDRSH    r1,[r1,#0x1a]
0045ca  b160              CBZ      r0,|L1.17894|
0045cc  e00d              B        |L1.17898|
                  |L1.17870|
0045ce  49a0              LDR      r1,|L1.18512|
0045d0  f9b11016          LDRSH    r1,[r1,#0x16]         ;6553
0045d4  b908              CBNZ     r0,|L1.17882|
0045d6  4291              CMP      r1,r2                 ;6553
0045d8  dc03              BGT      |L1.17890|
                  |L1.17882|
0045da  2801              CMP      r0,#1                 ;6553
0045dc  d102              BNE      |L1.17892|
0045de  4291              CMP      r1,r2                 ;6553
0045e0  da00              BGE      |L1.17892|
                  |L1.17890|
0045e2  801c              STRH     r4,[r3,#0]            ;6553
                  |L1.17892|
;;;6558   	}
;;;6559   }
0045e4  bd10              POP      {r4,pc}
                  |L1.17894|
0045e6  4291              CMP      r1,r2                 ;6557
0045e8  dc03              BGT      |L1.17906|
                  |L1.17898|
0045ea  2801              CMP      r0,#1                 ;6557
0045ec  d1fa              BNE      |L1.17892|
0045ee  4291              CMP      r1,r2                 ;6557
0045f0  daf8              BGE      |L1.17892|
                  |L1.17906|
0045f2  801c              STRH     r4,[r3,#0]            ;6557
0045f4  bd10              POP      {r4,pc}
;;;6560   
                          ENDP

                  bps_drv PROC
;;;6561   //-----------------------------------------------
;;;6562   void bps_drv(char in)
0045f6  e92d41f0          PUSH     {r4-r8,lr}
;;;6563   {
0045fa  4606              MOV      r6,r0
;;;6564   char temp;
;;;6565   
;;;6566   if (bps[in]._device!=dSRC) return;
0045fc  ebc600c6          RSB      r0,r6,r6,LSL #3
004600  4994              LDR      r1,|L1.18516|
004602  eb001006          ADD      r0,r0,r6,LSL #4
004606  f8112020          LDRB     r2,[r1,r0,LSL #2]
00460a  2a03              CMP      r2,#3
00460c  d177              BNE      |L1.18174|
;;;6567   temp=bps[in]._flags_tm;
00460e  eb010480          ADD      r4,r1,r0,LSL #2
004612  f8945042          LDRB     r5,[r4,#0x42]
;;;6568   if(temp&(1<<AV_T))
004616  07a8              LSLS     r0,r5,#30
004618  d517              BPL      |L1.17994|
;;;6569   	{
;;;6570   	if(bps[in]._temp_av_cnt<1200) 
00461a  f9b41046          LDRSH    r1,[r4,#0x46]
00461e  f44f6096          MOV      r0,#0x4b0
004622  4281              CMP      r1,r0
004624  da22              BGE      |L1.18028|
;;;6571   		{
;;;6572   		bps[in]._temp_av_cnt++;
004626  f1010101          ADD      r1,r1,#1
00462a  b209              SXTH     r1,r1
00462c  f8a41046          STRH     r1,[r4,#0x46]
;;;6573   		if(bps[in]._temp_av_cnt>=1200)
004630  4281              CMP      r1,r0
004632  db1b              BLT      |L1.18028|
;;;6574   			{
;;;6575   			bps[in]._temp_av_cnt=1200;
004634  f8a40046          STRH     r0,[r4,#0x46]
;;;6576   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
004638  7860              LDRB     r0,[r4,#1]
00463a  07c0              LSLS     r0,r0,#31
00463c  d116              BNE      |L1.18028|
00463e  2201              MOVS     r2,#1
004640  2100              MOVS     r1,#0
004642  4630              MOV      r0,r6
004644  f7fffffe          BL       avar_bps_hndl
004648  e010              B        |L1.18028|
                  |L1.17994|
;;;6577   			}
;;;6578   		}
;;;6579   	}
;;;6580   
;;;6581   else if(!(temp&(1<<AV_T)))
;;;6582   	{
;;;6583   	if(bps[in]._temp_av_cnt) 
00464a  f9b41046          LDRSH    r1,[r4,#0x46]
00464e  b169              CBZ      r1,|L1.18028|
;;;6584   		{
;;;6585   		bps[in]._temp_av_cnt--;
004650  f1a10101          SUB      r1,r1,#1
004654  b208              SXTH     r0,r1
004656  f8a40046          STRH     r0,[r4,#0x46]
;;;6586   		if(!bps[in]._temp_av_cnt)
00465a  b938              CBNZ     r0,|L1.18028|
;;;6587   			{
;;;6588   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
00465c  7860              LDRB     r0,[r4,#1]
00465e  07c0              LSLS     r0,r0,#31
004660  d004              BEQ      |L1.18028|
004662  2200              MOVS     r2,#0
004664  4611              MOV      r1,r2
004666  4630              MOV      r0,r6
004668  f7fffffe          BL       avar_bps_hndl
                  |L1.18028|
;;;6589   			}
;;;6590   		} 	
;;;6591   
;;;6592   	}
;;;6593   
;;;6594   if((temp&(1<<AVUMAX)))
00466c  0729              LSLS     r1,r5,#28
;;;6595   	{
;;;6596   	if(bps[in]._umax_av_cnt<10) 
;;;6597   		{
;;;6598   		bps[in]._umax_av_cnt++;
;;;6599   		if(bps[in]._umax_av_cnt>=10)
;;;6600   			{ 
;;;6601   			bps[in]._umax_av_cnt=10;
00466e  f04f070a          MOV      r7,#0xa
004672  f04f0000          MOV      r0,#0                 ;6576
004676  d515              BPL      |L1.18084|
004678  f9b40048          LDRSH    r0,[r4,#0x48]         ;6596
00467c  280a              CMP      r0,#0xa               ;6596
00467e  da26              BGE      |L1.18126|
004680  f1000001          ADD      r0,r0,#1              ;6598
004684  b200              SXTH     r0,r0                 ;6598
004686  f8a40048          STRH     r0,[r4,#0x48]         ;6598
00468a  280a              CMP      r0,#0xa               ;6599
00468c  db1f              BLT      |L1.18126|
00468e  f8a47048          STRH     r7,[r4,#0x48]
;;;6602   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004692  7860              LDRB     r0,[r4,#1]
004694  0780              LSLS     r0,r0,#30
004696  d41a              BMI      |L1.18126|
004698  2201              MOVS     r2,#1
00469a  4611              MOV      r1,r2
00469c  4630              MOV      r0,r6
00469e  f7fffffe          BL       avar_bps_hndl
0046a2  e014              B        |L1.18126|
                  |L1.18084|
;;;6603   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6604   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6605   				{
;;;6606   				apv_cnt[in,0]=APV_INIT;
;;;6607   				apv_cnt[in,1]=APV_INIT;
;;;6608   				apv_cnt[in,2]=APV_INIT;
;;;6609   				apv_flags[in]=afOFF;
;;;6610   				}				*/
;;;6611   						
;;;6612   			}
;;;6613   		} 
;;;6614   	}		
;;;6615   else if(!(temp&(1<<AVUMAX)))
;;;6616   	{
;;;6617   	if(bps[in]._umax_av_cnt>0) 
0046a4  f9b41048          LDRSH    r1,[r4,#0x48]
0046a8  2900              CMP      r1,#0
0046aa  dd0d              BLE      |L1.18120|
;;;6618   		{
;;;6619   		bps[in]._umax_av_cnt--;
0046ac  f1a10101          SUB      r1,r1,#1
0046b0  b208              SXTH     r0,r1
0046b2  f8a40048          STRH     r0,[r4,#0x48]
;;;6620   		if(bps[in]._umax_av_cnt==0)
0046b6  b950              CBNZ     r0,|L1.18126|
;;;6621   			{
;;;6622   			bps[in]._umax_av_cnt=0;
;;;6623   			avar_bps_hndl(in,1,0);
0046b8  f04f0200          MOV      r2,#0
0046bc  f04f0101          MOV      r1,#1
0046c0  4630              MOV      r0,r6
0046c2  f7fffffe          BL       avar_bps_hndl
0046c6  e002              B        |L1.18126|
                  |L1.18120|
;;;6624   	 //		apv_cnt[in,0]=0;
;;;6625   	//		apv_cnt[in,1]=0;
;;;6626   	 //		apv_cnt[in,2]=0;			
;;;6627   			}
;;;6628   		}
;;;6629   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
0046c8  da01              BGE      |L1.18126|
0046ca  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.18126|
;;;6630   	}
;;;6631   
;;;6632   if(temp&(1<<AVUMIN))
0046ce  06e8              LSLS     r0,r5,#27
0046d0  d516              BPL      |L1.18176|
;;;6633   	{
;;;6634   	if(bps[in]._umin_av_cnt<10) 
0046d2  f9b4004a          LDRSH    r0,[r4,#0x4a]
0046d6  280a              CMP      r0,#0xa
0046d8  da20              BGE      |L1.18204|
;;;6635   		{
;;;6636   		bps[in]._umin_av_cnt++;
0046da  f1000001          ADD      r0,r0,#1
0046de  b200              SXTH     r0,r0
0046e0  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6637   		if(bps[in]._umin_av_cnt>=10)
0046e4  280a              CMP      r0,#0xa
0046e6  db19              BLT      |L1.18204|
;;;6638   			{ 
;;;6639   			bps[in]._umin_av_cnt=10;
0046e8  f8a4704a          STRH     r7,[r4,#0x4a]
;;;6640   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
0046ec  7860              LDRB     r0,[r4,#1]
0046ee  0740              LSLS     r0,r0,#29
0046f0  d414              BMI      |L1.18204|
0046f2  2201              MOVS     r2,#1
0046f4  2102              MOVS     r1,#2
0046f6  4630              MOV      r0,r6
0046f8  f7fffffe          BL       avar_bps_hndl
0046fc  e00e              B        |L1.18204|
                  |L1.18174|
0046fe  e047              B        |L1.18320|
                  |L1.18176|
;;;6641   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6642   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6643   				{
;;;6644   				apv_cnt[in,0]=APV_INIT;
;;;6645   				apv_cnt[in,1]=APV_INIT;
;;;6646   				apv_cnt[in,2]=APV_INIT;
;;;6647   				apv_flags[in]=afOFF;
;;;6648   				}*/				
;;;6649   			}
;;;6650   		} 
;;;6651   	}	
;;;6652   	
;;;6653   else if(!(temp&(1<<AVUMIN)))
;;;6654   	{
;;;6655   	if(bps[in]._umin_av_cnt) 
004700  f9b4004a          LDRSH    r0,[r4,#0x4a]
004704  b150              CBZ      r0,|L1.18204|
;;;6656   		{
;;;6657   		bps[in]._umin_av_cnt--;
004706  f1a00001          SUB      r0,r0,#1
00470a  b201              SXTH     r1,r0
00470c  f8a4104a          STRH     r1,[r4,#0x4a]
;;;6658   		if(bps[in]._umin_av_cnt==0)
004710  b921              CBNZ     r1,|L1.18204|
;;;6659   			{
;;;6660   			bps[in]._umin_av_cnt=0;
;;;6661   			avar_bps_hndl(in,2,0);
004712  2200              MOVS     r2,#0
004714  2102              MOVS     r1,#2
004716  4630              MOV      r0,r6
004718  f7fffffe          BL       avar_bps_hndl
                  |L1.18204|
;;;6662   		//	apv_cnt[in,0]=0;
;;;6663   		//	apv_cnt[in,1]=0;
;;;6664   		//	apv_cnt[in,2]=0;
;;;6665   			}
;;;6666   		}
;;;6667   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6668   	}
;;;6669   
;;;6670   //bps[in]._state=bsOFF;
;;;6671   
;;;6672   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
00471c  7860              LDRB     r0,[r4,#1]
00471e  0700              LSLS     r0,r0,#28
004720  d003              BEQ      |L1.18218|
004722  f04f0004          MOV      r0,#4
004726  70a0              STRB     r0,[r4,#2]
004728  e017              B        |L1.18266|
                  |L1.18218|
;;;6673   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
00472a  484b              LDR      r0,|L1.18520|
00472c  7800              LDRB     r0,[r0,#0]  ; net_av
00472e  b130              CBZ      r0,|L1.18238|
004730  78e0              LDRB     r0,[r4,#3]
004732  2814              CMP      r0,#0x14
004734  d903              BLS      |L1.18238|
;;;6674   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004736  f04f0005          MOV      r0,#5
00473a  70a0              STRB     r0,[r4,#2]
00473c  e00d              B        |L1.18266|
                  |L1.18238|
;;;6675   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
00473e  f8940042          LDRB     r0,[r4,#0x42]
004742  0680              LSLS     r0,r0,#26
004744  d503              BPL      |L1.18254|
004746  f04f0002          MOV      r0,#2
00474a  70a0              STRB     r0,[r4,#2]
00474c  e005              B        |L1.18266|
                  |L1.18254|
;;;6676   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
00474e  78e0              LDRB     r0,[r4,#3]
004750  2814              CMP      r0,#0x14
004752  d202              BCS      |L1.18266|
004754  f04f0001          MOV      r0,#1
004758  70a0              STRB     r0,[r4,#2]
                  |L1.18266|
;;;6677   
;;;6678   
;;;6679   
;;;6680   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6681   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6682   //else bps[0]._state=ssNOT;
;;;6683   
;;;6684   //bps[in]._is_ready=0;
;;;6685   //bps[in]._is_wrk=0;
;;;6686   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6687   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6688   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6689   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6690   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6691   //	{
;;;6692   //	bps[in]._flags_bp='B';// заблокирован
;;;6693   //	bps[in]._is_ready=1;
;;;6694   //	}
;;;6695   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6696   //     {
;;;6697   //     bps[in]._flags_bp='W';// работает
;;;6698   //     bps[in]._is_ready=1;
;;;6699   //     bps[in]._is_wrk=1;
;;;6700        
;;;6701   //     }
;;;6702   //else bps[in]._is_ready=1;     
;;;6703   
;;;6704   
;;;6705   
;;;6706   
;;;6707   
;;;6708   /*
;;;6709   bps[in]._flags_tu&=BIN8(11111110);
;;;6710   if(bps[in]._ist_blok_cnt)
;;;6711   	{
;;;6712   	bps[in]._ist_blok_cnt--;
;;;6713   	bps[in]._flags_tu|=BIN8(1);
;;;6714   	}
;;;6715   
;;;6716   	   */ 
;;;6717   
;;;6718   //Пересброс БПСа при потере связи
;;;6719   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
00475a  78e0              LDRB     r0,[r4,#3]
00475c  280a              CMP      r0,#0xa
00475e  d306              BCC      |L1.18286|
004760  f894002c          LDRB     r0,[r4,#0x2c]
004764  f0400080          ORR      r0,r0,#0x80
004768  f884002c          STRB     r0,[r4,#0x2c]
00476c  e005              B        |L1.18298|
                  |L1.18286|
;;;6720   else bps[in]._flags_tu&=BIN8(1111111);
00476e  f894002c          LDRB     r0,[r4,#0x2c]
004772  f000007f          AND      r0,r0,#0x7f
004776  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.18298|
;;;6721   	
;;;6722   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
00477a  4931              LDR      r1,|L1.18496|
00477c  f9b40050          LDRSH    r0,[r4,#0x50]
004780  3980              SUBS     r1,r1,#0x80
004782  f9b11030          LDRSH    r1,[r1,#0x30]  ; cntrl_stat
004786  4408              ADD      r0,r0,r1
004788  6320              STR      r0,[r4,#0x30]
;;;6723   bps[in]._vol_i=1000; 
00478a  f44f707a          MOV      r0,#0x3e8
00478e  6360              STR      r0,[r4,#0x34]
                  |L1.18320|
;;;6724   }
004790  e8bd81f0          POP      {r4-r8,pc}
;;;6725   
                          ENDP

                  avt_hndl PROC
;;;6726   //-----------------------------------------------
;;;6727   void avt_hndl(void)
004794  b570              PUSH     {r4-r6,lr}
;;;6728   {
;;;6729   char i;
;;;6730   for(i=0;i<12;i++)
004796  f04f0000          MOV      r0,#0
;;;6731   	{
;;;6732   	if(eb2_data_short[6]&(1<<i))
00479a  4930              LDR      r1,|L1.18524|
;;;6733   		{
;;;6734   		avt_stat[i]=avtON;
00479c  4d30              LDR      r5,|L1.18528|
00479e  f04f0401          MOV      r4,#1                 ;6732
0047a2  f9b1200c          LDRSH    r2,[r1,#0xc]          ;6732
0047a6  4603              MOV      r3,r0                 ;6730
                  |L1.18344|
0047a8  fa04f100          LSL      r1,r4,r0              ;6732
0047ac  420a              TST      r2,r1                 ;6732
0047ae  d001              BEQ      |L1.18356|
0047b0  542c              STRB     r4,[r5,r0]
0047b2  e000              B        |L1.18358|
                  |L1.18356|
;;;6735   		}
;;;6736   	else avt_stat[i]=avtOFF;
0047b4  542b              STRB     r3,[r5,r0]
                  |L1.18358|
0047b6  f1000001          ADD      r0,r0,#1              ;6730
0047ba  b2c0              UXTB     r0,r0                 ;6730
0047bc  280c              CMP      r0,#0xc               ;6730
0047be  d3f3              BCC      |L1.18344|
;;;6737   	}
;;;6738   
;;;6739   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
0047c0  4e28              LDR      r6,|L1.18532|
0047c2  7828              LDRB     r0,[r5,#0]  ; avt_stat
0047c4  4c28              LDR      r4,|L1.18536|
0047c6  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
0047c8  4281              CMP      r1,r0
0047ca  d00b              BEQ      |L1.18404|
0047cc  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0047d0  2901              CMP      r1,#1
0047d2  db07              BLT      |L1.18404|
;;;6740   	{
;;;6741   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
0047d4  2801              CMP      r0,#1
0047d6  d02a              BEQ      |L1.18478|
;;;6742   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
0047d8  2300              MOVS     r3,#0
0047da  2201              MOVS     r2,#1
0047dc  210b              MOVS     r1,#0xb
0047de  a023              ADR      r0,|L1.18540|
0047e0  f7fffffe          BL       snmp_trap_send
                  |L1.18404|
;;;6743   	}
;;;6744   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
0047e4  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
0047e6  7868              LDRB     r0,[r5,#1]  ; avt_stat
0047e8  4281              CMP      r1,r0
0047ea  d00b              BEQ      |L1.18436|
0047ec  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0047f0  2902              CMP      r1,#2
0047f2  db07              BLT      |L1.18436|
;;;6745   	{
;;;6746   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
0047f4  2801              CMP      r0,#1
0047f6  d07e              BEQ      |L1.18678|
;;;6747   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
0047f8  2300              MOVS     r3,#0
0047fa  2202              MOVS     r2,#2
0047fc  210b              MOVS     r1,#0xb
0047fe  a020              ADR      r0,|L1.18560|
004800  f7fffffe          BL       snmp_trap_send
                  |L1.18436|
;;;6748   	}
;;;6749   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004804  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004806  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004808  4281              CMP      r1,r0
00480a  d00b              BEQ      |L1.18468|
00480c  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004810  2903              CMP      r1,#3
004812  db07              BLT      |L1.18468|
;;;6750   	{
;;;6751   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004814  2801              CMP      r0,#1
004816  d06f              BEQ      |L1.18680|
;;;6752   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004818  2300              MOVS     r3,#0
00481a  2203              MOVS     r2,#3
00481c  210b              MOVS     r1,#0xb
00481e  a01d              ADR      r0,|L1.18580|
004820  f7fffffe          BL       snmp_trap_send
                  |L1.18468|
;;;6753   	}
;;;6754   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004824  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004826  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004828  4281              CMP      r1,r0
00482a  d049              BEQ      |L1.18624|
00482c  e03c              B        |L1.18600|
                  |L1.18478|
00482e  e0a4              B        |L1.18810|
                  |L1.18480|
                          DCD      ica_u_necc
                  |L1.18484|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.18488|
                          DCD      ICA_CH
                  |L1.18492|
                          DCD      TBAT
                  |L1.18496|
                          DCD      ||area_number.25||+0x80
                  |L1.18500|
                          DCD      ipsBlckStat
                  |L1.18504|
                          DCD      ipsBlckSrc
                  |L1.18508|
                          DCD      ipsBlckLog
                  |L1.18512|
                          DCD      ||.bss||+0x40c
                  |L1.18516|
                          DCD      bps
                  |L1.18520|
                          DCD      net_av
                  |L1.18524|
                          DCD      eb2_data_short
                  |L1.18528|
                          DCD      avt_stat
                  |L1.18532|
                          DCD      avt_stat_old
                  |L1.18536|
                          DCD      NUMAVT
                  |L1.18540|
00486c  4176746f          DCB      "Avtomat #1 is OFF",0
004870  6d617420
004874  23312069
004878  73204f46
00487c  4600    
00487e  00                DCB      0
00487f  00                DCB      0
                  |L1.18560|
004880  4176746f          DCB      "Avtomat #2 is OFF",0
004884  6d617420
004888  23322069
00488c  73204f46
004890  4600    
004892  00                DCB      0
004893  00                DCB      0
                  |L1.18580|
004894  4176746f          DCB      "Avtomat #3 is OFF",0
004898  6d617420
00489c  23332069
0048a0  73204f46
0048a4  4600    
0048a6  00                DCB      0
0048a7  00                DCB      0
                  |L1.18600|
0048a8  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0048ac  2904              CMP      r1,#4
0048ae  db07              BLT      |L1.18624|
;;;6755   	{
;;;6756   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
0048b0  2801              CMP      r0,#1
0048b2  d078              BEQ      |L1.18854|
;;;6757   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
0048b4  2300              MOVS     r3,#0
0048b6  2204              MOVS     r2,#4
0048b8  210b              MOVS     r1,#0xb
0048ba  a0ff              ADR      r0,|L1.19640|
0048bc  f7fffffe          BL       snmp_trap_send
                  |L1.18624|
;;;6758   	}
;;;6759   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
0048c0  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
0048c2  7928              LDRB     r0,[r5,#4]  ; avt_stat
0048c4  4281              CMP      r1,r0
0048c6  d00b              BEQ      |L1.18656|
0048c8  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0048cc  2905              CMP      r1,#5
0048ce  db07              BLT      |L1.18656|
;;;6760   	{
;;;6761   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
0048d0  2801              CMP      r0,#1
0048d2  d070              BEQ      |L1.18870|
;;;6762   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
0048d4  2300              MOVS     r3,#0
0048d6  2205              MOVS     r2,#5
0048d8  210b              MOVS     r1,#0xb
0048da  a0fc              ADR      r0,|L1.19660|
0048dc  f7fffffe          BL       snmp_trap_send
                  |L1.18656|
;;;6763   	}
;;;6764   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
0048e0  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
0048e2  7968              LDRB     r0,[r5,#5]  ; avt_stat
0048e4  4281              CMP      r1,r0
0048e6  d00e              BEQ      |L1.18694|
0048e8  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0048ec  2906              CMP      r1,#6
0048ee  db0a              BLT      |L1.18694|
;;;6765   	{
;;;6766   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
0048f0  2801              CMP      r0,#1
0048f2  d067              BEQ      |L1.18884|
;;;6767   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
0048f4  e001              B        |L1.18682|
                  |L1.18678|
0048f6  e047              B        |L1.18824|
                  |L1.18680|
0048f8  e04e              B        |L1.18840|
                  |L1.18682|
0048fa  2300              MOVS     r3,#0
0048fc  2206              MOVS     r2,#6
0048fe  210b              MOVS     r1,#0xb
004900  a0f7              ADR      r0,|L1.19680|
004902  f7fffffe          BL       snmp_trap_send
                  |L1.18694|
;;;6768   	}
;;;6769   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004906  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004908  79a8              LDRB     r0,[r5,#6]  ; avt_stat
00490a  4281              CMP      r1,r0
00490c  d00b              BEQ      |L1.18726|
00490e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004912  2907              CMP      r1,#7
004914  db07              BLT      |L1.18726|
;;;6770   	{
;;;6771   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004916  2801              CMP      r0,#1
004918  d05b              BEQ      |L1.18898|
;;;6772   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
00491a  2300              MOVS     r3,#0
00491c  2207              MOVS     r2,#7
00491e  210b              MOVS     r1,#0xb
004920  a0f4              ADR      r0,|L1.19700|
004922  f7fffffe          BL       snmp_trap_send
                  |L1.18726|
;;;6773   	}
;;;6774   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004926  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004928  79e8              LDRB     r0,[r5,#7]  ; avt_stat
00492a  4281              CMP      r1,r0
00492c  d00b              BEQ      |L1.18758|
00492e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004932  2908              CMP      r1,#8
004934  db07              BLT      |L1.18758|
;;;6775   	{
;;;6776   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004936  2801              CMP      r0,#1
004938  d052              BEQ      |L1.18912|
;;;6777   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
00493a  2300              MOVS     r3,#0
00493c  2208              MOVS     r2,#8
00493e  210b              MOVS     r1,#0xb
004940  a0f1              ADR      r0,|L1.19720|
004942  f7fffffe          BL       snmp_trap_send
                  |L1.18758|
;;;6778   	}
;;;6779   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004946  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004948  7a28              LDRB     r0,[r5,#8]  ; avt_stat
00494a  4281              CMP      r1,r0
00494c  d00b              BEQ      |L1.18790|
00494e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004952  2909              CMP      r1,#9
004954  db07              BLT      |L1.18790|
;;;6780   	{
;;;6781   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004956  2801              CMP      r0,#1
004958  d049              BEQ      |L1.18926|
;;;6782   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
00495a  2300              MOVS     r3,#0
00495c  2209              MOVS     r2,#9
00495e  210b              MOVS     r1,#0xb
004960  a0ee              ADR      r0,|L1.19740|
004962  f7fffffe          BL       snmp_trap_send
                  |L1.18790|
;;;6783   	}
;;;6784   
;;;6785   for(i=0;i<12;i++)
004966  f04f0000          MOV      r0,#0
                  |L1.18794|
;;;6786   	{
;;;6787   	avt_stat_old[i]=avt_stat[i];
00496a  5c29              LDRB     r1,[r5,r0]
00496c  5431              STRB     r1,[r6,r0]
00496e  f1000001          ADD      r0,r0,#1              ;6785
004972  b2c0              UXTB     r0,r0                 ;6785
004974  280c              CMP      r0,#0xc               ;6785
004976  d3f8              BCC      |L1.18794|
;;;6788   	}
;;;6789   }
004978  bd70              POP      {r4-r6,pc}
                  |L1.18810|
00497a  2301              MOVS     r3,#1                 ;6741
00497c  461a              MOV      r2,r3                 ;6741
00497e  210b              MOVS     r1,#0xb               ;6741
004980  a0eb              ADR      r0,|L1.19760|
004982  f7fffffe          BL       snmp_trap_send
004986  e72d              B        |L1.18404|
                  |L1.18824|
004988  2301              MOVS     r3,#1                 ;6746
00498a  2202              MOVS     r2,#2                 ;6746
00498c  210b              MOVS     r1,#0xb               ;6746
00498e  a0ed              ADR      r0,|L1.19780|
004990  f7fffffe          BL       snmp_trap_send
004994  e736              B        |L1.18436|
004996  e006              B        |L1.18854|
                  |L1.18840|
004998  2301              MOVS     r3,#1                 ;6751
00499a  2203              MOVS     r2,#3                 ;6751
00499c  210b              MOVS     r1,#0xb               ;6751
00499e  a0ee              ADR      r0,|L1.19800|
0049a0  f7fffffe          BL       snmp_trap_send
0049a4  e73e              B        |L1.18468|
                  |L1.18854|
0049a6  2301              MOVS     r3,#1                 ;6756
0049a8  2204              MOVS     r2,#4                 ;6756
0049aa  210b              MOVS     r1,#0xb               ;6756
0049ac  a0ef              ADR      r0,|L1.19820|
0049ae  f7fffffe          BL       snmp_trap_send
0049b2  e785              B        |L1.18624|
0049b4  e7ff              B        |L1.18870|
                  |L1.18870|
0049b6  2301              MOVS     r3,#1                 ;6761
0049b8  2205              MOVS     r2,#5                 ;6761
0049ba  210b              MOVS     r1,#0xb               ;6761
0049bc  a0f0              ADR      r0,|L1.19840|
0049be  f7fffffe          BL       snmp_trap_send
0049c2  e78d              B        |L1.18656|
                  |L1.18884|
0049c4  2301              MOVS     r3,#1                 ;6766
0049c6  2206              MOVS     r2,#6                 ;6766
0049c8  210b              MOVS     r1,#0xb               ;6766
0049ca  a0f2              ADR      r0,|L1.19860|
0049cc  f7fffffe          BL       snmp_trap_send
0049d0  e799              B        |L1.18694|
                  |L1.18898|
0049d2  2301              MOVS     r3,#1                 ;6771
0049d4  2207              MOVS     r2,#7                 ;6771
0049d6  210b              MOVS     r1,#0xb               ;6771
0049d8  a0f3              ADR      r0,|L1.19880|
0049da  f7fffffe          BL       snmp_trap_send
0049de  e7a2              B        |L1.18726|
                  |L1.18912|
0049e0  2301              MOVS     r3,#1                 ;6776
0049e2  2208              MOVS     r2,#8                 ;6776
0049e4  210b              MOVS     r1,#0xb               ;6776
0049e6  a0f5              ADR      r0,|L1.19900|
0049e8  f7fffffe          BL       snmp_trap_send
0049ec  e7ab              B        |L1.18758|
                  |L1.18926|
0049ee  2301              MOVS     r3,#1                 ;6781
0049f0  2209              MOVS     r2,#9                 ;6781
0049f2  210b              MOVS     r1,#0xb               ;6781
0049f4  a0f6              ADR      r0,|L1.19920|
0049f6  f7fffffe          BL       snmp_trap_send
0049fa  e7b4              B        |L1.18790|
;;;6790   
                          ENDP

                  bat_hndl PROC
;;;6791   //-----------------------------------------------
;;;6792   void bat_hndl(void)
0049fc  b570              PUSH     {r4-r6,lr}
;;;6793   {
;;;6794   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;6795   	{
;;;6796   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;6797   		{
;;;6798   		char i;
;;;6799   		for(i=0;i<2;i++)
;;;6800   			{
;;;6801   			if(mess_data[1]&(1<<i))
;;;6802   				{
;;;6803   				bat[i]._cnt_to_block=0;
;;;6804        			bat[i]._rel_stat=0;
;;;6805        			}
;;;6806   			}
;;;6807   		}
;;;6808   	}
;;;6809   if(mess_find(_MESS_BAT_MASK_OFF))
;;;6810   	{		
;;;6811   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;6812   		{
;;;6813   		char i;
;;;6814   		for(i=0;i<2;i++)
;;;6815   			{
;;;6816   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;6817   				{
;;;6818   				bat[i]._cnt_to_block=20;
;;;6819   				bat[i]._rel_stat=1;
;;;6820        			}
;;;6821   			}
;;;6822   		
;;;6823   		}		
;;;6824   	}*/
;;;6825   
;;;6826   if(mess_find_unvol(MESS2BAT_HNDL))
0049fe  20c8              MOVS     r0,#0xc8
004a00  f7fffffe          BL       mess_find_unvol
;;;6827   	{ 
;;;6828   	char i;
;;;6829   	
;;;6830   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;6831   		{
;;;6832   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6833   			{
;;;6834   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004a04  49f7              LDR      r1,|L1.19940|
004a06  2200              MOVS     r2,#0                 ;6832
004a08  b3a8              CBZ      r0,|L1.19062|
004a0a  4bf7              LDR      r3,|L1.19944|
;;;6835   			}
;;;6836   		}
;;;6837   
;;;6838   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;6839   		{
;;;6840   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6841   			{
;;;6842   			if(mess_data[1]&(1<<i))
004a0c  2401              MOVS     r4,#1
004a0e  6818              LDR      r0,[r3,#0]            ;6830  ; mess_data
004a10  28c9              CMP      r0,#0xc9              ;6830
004a12  d01c              BEQ      |L1.19022|
004a14  28ca              CMP      r0,#0xca              ;6838
004a16  d02f              BEQ      |L1.19064|
;;;6843   				{
;;;6844   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;6845   				}
;;;6846   			else bat[i]._cnt_to_block=0;
;;;6847   			}
;;;6848   		}
;;;6849   	else 
;;;6850   	 	{
;;;6851   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004a18  4610              MOV      r0,r2
                  |L1.18970|
;;;6852   			{
;;;6853   			bat[i]._cnt_to_block=0;
004a1a  eb000340          ADD      r3,r0,r0,LSL #1
004a1e  eb031300          ADD      r3,r3,r0,LSL #4
004a22  f8012023          STRB     r2,[r1,r3,LSL #2]
004a26  f1000001          ADD      r0,r0,#1              ;6851
004a2a  b2c0              UXTB     r0,r0                 ;6851
004a2c  2802              CMP      r0,#2                 ;6851
004a2e  d3f4              BCC      |L1.18970|
                  |L1.18992|
;;;6854   			}
;;;6855   
;;;6856   		}
;;;6857   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004a30  f04f0000          MOV      r0,#0
                  |L1.18996|
;;;6858   		{
;;;6859   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004a34  eb000340          ADD      r3,r0,r0,LSL #1
004a38  eb031300          ADD      r3,r3,r0,LSL #4
004a3c  f8115023          LDRB     r5,[r1,r3,LSL #2]
004a40  2d14              CMP      r5,#0x14
004a42  d939              BLS      |L1.19128|
004a44  eb010383          ADD      r3,r1,r3,LSL #2
004a48  f883403c          STRB     r4,[r3,#0x3c]
004a4c  e038              B        |L1.19136|
                  |L1.19022|
004a4e  f04f0000          MOV      r0,#0                 ;6832
                  |L1.19026|
004a52  eb000340          ADD      r3,r0,r0,LSL #1       ;6834
004a56  eb031500          ADD      r5,r3,r0,LSL #4       ;6834
004a5a  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6834
004a5e  2b32              CMP      r3,#0x32              ;6834
004a60  d203              BCS      |L1.19050|
004a62  f1030301          ADD      r3,r3,#1              ;6834
004a66  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6834
                  |L1.19050|
004a6a  f1000001          ADD      r0,r0,#1              ;6832
004a6e  b2c0              UXTB     r0,r0                 ;6832
004a70  2802              CMP      r0,#2                 ;6832
004a72  d3ee              BCC      |L1.19026|
004a74  e7dc              B        |L1.18992|
                  |L1.19062|
004a76  e029              B        |L1.19148|
                  |L1.19064|
004a78  f04f0000          MOV      r0,#0                 ;6840
004a7c  685e              LDR      r6,[r3,#4]            ;6842
                  |L1.19070|
004a7e  fa04f300          LSL      r3,r4,r0              ;6842
004a82  421e              TST      r6,r3                 ;6842
004a84  d00c              BEQ      |L1.19104|
004a86  eb000340          ADD      r3,r0,r0,LSL #1       ;6844
004a8a  eb031500          ADD      r5,r3,r0,LSL #4       ;6844
004a8e  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6844
004a92  2b32              CMP      r3,#0x32              ;6844
004a94  d20a              BCS      |L1.19116|
004a96  f1030301          ADD      r3,r3,#1              ;6844
004a9a  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6844
004a9e  e005              B        |L1.19116|
                  |L1.19104|
004aa0  eb000340          ADD      r3,r0,r0,LSL #1       ;6846
004aa4  eb031300          ADD      r3,r3,r0,LSL #4       ;6846
004aa8  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6846
                  |L1.19116|
004aac  f1000001          ADD      r0,r0,#1              ;6840
004ab0  b2c0              UXTB     r0,r0                 ;6840
004ab2  2802              CMP      r0,#2                 ;6840
004ab4  d3e3              BCC      |L1.19070|
004ab6  e7bb              B        |L1.18992|
                  |L1.19128|
;;;6860   		else bat[i]._rel_stat=0;
004ab8  eb010383          ADD      r3,r1,r3,LSL #2
004abc  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.19136|
004ac0  f1000001          ADD      r0,r0,#1              ;6857
004ac4  b2c0              UXTB     r0,r0                 ;6857
004ac6  2802              CMP      r0,#2                 ;6857
004ac8  d3b4              BCC      |L1.18996|
;;;6861   		}
;;;6862   
;;;6863   	}
;;;6864   
;;;6865   else 
;;;6866   	{
;;;6867   	char i;
;;;6868   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6869   		{
;;;6870   		bat[i]._cnt_to_block=0;
;;;6871   		bat[i]._rel_stat=0;
;;;6872   		}
;;;6873   
;;;6874   	}
;;;6875   
;;;6876   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;6877   	{
;;;6878   	if(PARAM_BAT_ON)
;;;6879   		{
;;;6880   		char i;
;;;6881   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6882   			{
;;;6883   			if(mess_data[1]&(1<<i))
;;;6884   				{
;;;6885   				bat[i]._cnt_to_block=0;
;;;6886   				bat[i]._rel_stat=0;
;;;6887   				}
;;;6888   			}
;;;6889   		}
;;;6890   	} */
;;;6891   }
004aca  bd70              POP      {r4-r6,pc}
                  |L1.19148|
004acc  f04f0000          MOV      r0,#0                 ;6868
                  |L1.19152|
004ad0  eb000340          ADD      r3,r0,r0,LSL #1       ;6870
004ad4  eb031300          ADD      r3,r3,r0,LSL #4       ;6870
004ad8  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6870
004adc  eb010383          ADD      r3,r1,r3,LSL #2       ;6871
004ae0  f883203c          STRB     r2,[r3,#0x3c]         ;6871
004ae4  f1000001          ADD      r0,r0,#1              ;6868
004ae8  b2c0              UXTB     r0,r0                 ;6868
004aea  2802              CMP      r0,#2                 ;6868
004aec  d3f0              BCC      |L1.19152|
004aee  bd70              POP      {r4-r6,pc}
;;;6892   
                          ENDP

                  bat_drv PROC
;;;7530   //-----------------------------------------------
;;;7531   void bat_drv(char in)
004af0  e92d4ffe          PUSH     {r1-r11,lr}
;;;7532   {
004af4  4605              MOV      r5,r0
;;;7533   unsigned short /*tempUS,*/tempUS_;
;;;7534   unsigned long tempUL,tempUL_;
;;;7535   unsigned short b_zar;
;;;7536   //static unsigned short time_cnt[2];
;;;7537   
;;;7538   
;;;7539   
;;;7540   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004af6  49bd              LDR      r1,|L1.19948|
004af8  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004afc  b118              CBZ      r0,|L1.19206|
004afe  f1a00001          SUB      r0,r0,#1
004b02  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.19206|
;;;7541   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004b06  4ab9              LDR      r2,|L1.19948|
004b08  1d12              ADDS     r2,r2,#4
004b0a  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004b0e  b118              CBZ      r0,|L1.19224|
004b10  f1a00001          SUB      r0,r0,#1
004b14  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.19224|
;;;7542   
;;;7543   
;;;7544   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004b18  eb050045          ADD      r0,r5,r5,LSL #1
004b1c  4bb1              LDR      r3,|L1.19940|
004b1e  eb001005          ADD      r0,r0,r5,LSL #4
004b22  eb030480          ADD      r4,r3,r0,LSL #2
004b26  4bb2              LDR      r3,|L1.19952|
004b28  9002              STR      r0,[sp,#8]
004b2a  f9b40008          LDRSH    r0,[r4,#8]
004b2e  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004b32  2364              MOVS     r3,#0x64
004b34  42b0              CMP      r0,r6
004b36  dd01              BLE      |L1.19260|
004b38  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.19260|
;;;7545   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004b3c  2800              CMP      r0,#0
004b3e  da01              BGE      |L1.19268|
004b40  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.19268|
;;;7546   
;;;7547   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7548        {
;;;7549        if(!cntrl_stat_blok_cnt_)
004b44  48a9              LDR      r0,|L1.19948|
004b46  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7547
004b4a  38b0              SUBS     r0,r0,#0xb0
004b4c  2700              MOVS     r7,#0
004b4e  b14b              CBZ      r3,|L1.19300|
004b50  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7547
004b54  b133              CBZ      r3,|L1.19300|
004b56  f8b03074          LDRH     r3,[r0,#0x74]  ; cntrl_stat_blok_cnt_
004b5a  b1a3              CBZ      r3,|L1.19334|
;;;7550             {
;;;7551             cntrl_stat_blok_cnt_=600; 
;;;7552             cntrl_stat_blok_cnt_plus[in]=0;
;;;7553             cntrl_stat_blok_cnt_minus[in]=0;
;;;7554             }
;;;7555        else cntrl_stat_blok_cnt=3000;
004b5c  f64031b8          MOV      r1,#0xbb8
004b60  f8a01072          STRH     r1,[r0,#0x72]
                  |L1.19300|
;;;7556        }
;;;7557   cntrl_stat_blok_cnt=0;
004b64  f8a07072          STRH     r7,[r0,#0x72]
;;;7558   
;;;7559   if(++(bat[in]._time_cnt)>=10)
004b68  f894003e          LDRB     r0,[r4,#0x3e]
004b6c  1c40              ADDS     r0,r0,#1
004b6e  b2c0              UXTB     r0,r0
004b70  f884003e          STRB     r0,[r4,#0x3e]
004b74  280a              CMP      r0,#0xa
004b76  d301              BCC      |L1.19324|
;;;7560   	{
;;;7561   	bat[in]._time_cnt=0;
004b78  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.19324|
;;;7562   	//bat[in]._zar_cnt++;
;;;7563   	}
;;;7564   
;;;7565   if(main_10Hz_cnt==50)
004b7c  4e9d              LDR      r6,|L1.19956|
004b7e  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
004b80  2832              CMP      r0,#0x32
004b82  d009              BEQ      |L1.19352|
004b84  e017              B        |L1.19382|
                  |L1.19334|
004b86  f44f7316          MOV      r3,#0x258             ;7551
004b8a  f8a03074          STRH     r3,[r0,#0x74]         ;7551
004b8e  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7552
004b92  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7553
004b96  e7e5              B        |L1.19300|
                  |L1.19352|
;;;7566   	{
;;;7567   	if(!bat[in]._rel_stat)
004b98  f894003c          LDRB     r0,[r4,#0x3c]
004b9c  b958              CBNZ     r0,|L1.19382|
;;;7568   		{
;;;7569   		
;;;7570   		if(bat[in]._Ub<80) 
004b9e  f9b40002          LDRSH    r0,[r4,#2]
004ba2  2850              CMP      r0,#0x50
004ba4  da07              BGE      |L1.19382|
;;;7571   			{
;;;7572   			
;;;7573   			if(!(bat[in]._av&1))
004ba6  f894003d          LDRB     r0,[r4,#0x3d]
004baa  07c0              LSLS     r0,r0,#31
004bac  d103              BNE      |L1.19382|
;;;7574   				{
;;;7575   				avar_bat_hndl(in,1);
004bae  2101              MOVS     r1,#1
004bb0  4628              MOV      r0,r5
004bb2  f7fffffe          BL       avar_bat_hndl
                  |L1.19382|
;;;7576   				//if(in==0)plazma_bat++;
;;;7577   				}
;;;7578   			}				
;;;7579   
;;;7580   		}
;;;7581   	}
;;;7582   
;;;7583   if(main_10Hz_cnt>200)
004bb6  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7584   	{
;;;7585   	if(abs(bat[in]._Ib)>IKB) 
004bba  4e8f              LDR      r6,|L1.19960|
004bbc  28c8              CMP      r0,#0xc8              ;7583
004bbe  dd0f              BLE      |L1.19424|
004bc0  f9b40008          LDRSH    r0,[r4,#8]
004bc4  f7fffffe          BL       abs
004bc8  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004bcc  4288              CMP      r0,r1
004bce  dd07              BLE      |L1.19424|
;;;7586   		{
;;;7587   		if((bat[in]._av&1))avar_bat_hndl(in,0);
004bd0  f894003d          LDRB     r0,[r4,#0x3d]
004bd4  07c0              LSLS     r0,r0,#31
004bd6  d003              BEQ      |L1.19424|
004bd8  2100              MOVS     r1,#0
004bda  4628              MOV      r0,r5
004bdc  f7fffffe          BL       avar_bat_hndl
                  |L1.19424|
;;;7588   		}
;;;7589   	}
;;;7590   
;;;7591   #ifdef APSENERGIA
;;;7592   //if(bat[in]._Ib>(-IKB))
;;;7593   
;;;7594   
;;;7595   #endif
;;;7596   
;;;7597   if(bat[in]._Ib>(-IKB))
004be0  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004be4  f9b40008          LDRSH    r0,[r4,#8]
004be8  4249              RSBS     r1,r1,#0
004bea  4288              CMP      r0,r1
004bec  dd14              BLE      |L1.19480|
;;;7598   	{
;;;7599   	if(bat[in]._cnt_wrk<10)
004bee  7b60              LDRB     r0,[r4,#0xd]
004bf0  280a              CMP      r0,#0xa
004bf2  d20d              BCS      |L1.19472|
;;;7600   		{
;;;7601   		bat[in]._cnt_wrk++;
004bf4  f1000001          ADD      r0,r0,#1
004bf8  b2c0              UXTB     r0,r0
004bfa  7360              STRB     r0,[r4,#0xd]
;;;7602   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004bfc  280a              CMP      r0,#0xa
004bfe  d306              BCC      |L1.19470|
004c00  7ba0              LDRB     r0,[r4,#0xe]
004c02  2800              CMP      r0,#0
004c04  d003              BEQ      |L1.19470|
;;;7603   			{
;;;7604   			bat[in]._wrk=0;
004c06  73a7              STRB     r7,[r4,#0xe]
;;;7605   			//beep_init(0x7L,'O');
;;;7606   			//wrk_mem_hndl(0);
;;;7607   			wrk_mem_hndl(in);
004c08  4628              MOV      r0,r5
004c0a  f7fffffe          BL       wrk_mem_hndl
                  |L1.19470|
004c0e  e110              B        |L1.20018|
                  |L1.19472|
;;;7608   			//plazma++;
;;;7609   			}
;;;7610   		}
;;;7611   	else bat[in]._cnt_wrk=10;	
004c10  f04f000a          MOV      r0,#0xa
004c14  7360              STRB     r0,[r4,#0xd]
004c16  e10c              B        |L1.20018|
                  |L1.19480|
;;;7612   	}	
;;;7613   
;;;7614   else if(bat[in]._Ib<(-IKB))
004c18  da40              BGE      |L1.19612|
;;;7615   	{
;;;7616   	if(bat[in]._cnt_wrk)
004c1a  7b60              LDRB     r0,[r4,#0xd]
004c1c  b3f0              CBZ      r0,|L1.19612|
;;;7617   		{
;;;7618   		bat[in]._cnt_wrk--;
004c1e  f1a00001          SUB      r0,r0,#1
004c22  b2c0              UXTB     r0,r0
004c24  7360              STRB     r0,[r4,#0xd]
;;;7619   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
004c26  bbc8              CBNZ     r0,|L1.19612|
004c28  7ba0              LDRB     r0,[r4,#0xe]
004c2a  bbb8              CBNZ     r0,|L1.19612|
;;;7620   			{
;;;7621   			bat[in]._wrk=1;
004c2c  f04f0001          MOV      r0,#1
004c30  73a0              STRB     r0,[r4,#0xe]
;;;7622   
;;;7623   				{
;;;7624   				char temp;
;;;7625   				signed short temp_temp;
;;;7626   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
004c32  4872              LDR      r0,|L1.19964|
004c34  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
004c36  f1000001          ADD      r0,r0,#1
004c3a  f0000007          AND      r0,r0,#7
004c3e  eb040040          ADD      r0,r4,r0,LSL #1
004c42  8c00              LDRH     r0,[r0,#0x20]
004c44  9000              STR      r0,[sp,#0]
;;;7627   			 
;;;7628   				temp=LPC_RTC->YEAR;
004c46  4e6e              LDR      r6,|L1.19968|
004c48  8bb0              LDRH     r0,[r6,#0x1c]
004c4a  9001              STR      r0,[sp,#4]
;;;7629   				gran_char((signed char*)&temp,1,99);
004c4c  f04f0263          MOV      r2,#0x63
004c50  f04f0101          MOV      r1,#1
004c54  a801              ADD      r0,sp,#4
004c56  f7fffffe          BL       gran_char
;;;7630   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
004c5a  f104041c          ADD      r4,r4,#0x1c
004c5e  f89d0004          LDRB     r0,[sp,#4]
004c62  7620              STRB     r0,[r4,#0x18]
;;;7631   			
;;;7632   				temp=LPC_RTC->MONTH;
004c64  7e30              LDRB     r0,[r6,#0x18]
004c66  9001              STR      r0,[sp,#4]
;;;7633   				gran_char((signed char*)&temp,1,12);
004c68  f04f020c          MOV      r2,#0xc
004c6c  f04f0101          MOV      r1,#1
004c70  a801              ADD      r0,sp,#4
004c72  f7fffffe          BL       gran_char
;;;7634   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
004c76  f89d0004          LDRB     r0,[sp,#4]
004c7a  7660              STRB     r0,[r4,#0x19]
;;;7635   			
;;;7636   				temp=LPC_RTC->DOM;
004c7c  7b30              LDRB     r0,[r6,#0xc]
004c7e  9001              STR      r0,[sp,#4]
;;;7637   				gran_char((signed char*)&temp,1,31);
004c80  221f              MOVS     r2,#0x1f
004c82  2101              MOVS     r1,#1
004c84  a801              ADD      r0,sp,#4
004c86  f7fffffe          BL       gran_char
;;;7638   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
004c8a  f89d0004          LDRB     r0,[sp,#4]
004c8e  76a0              STRB     r0,[r4,#0x1a]
;;;7639   				
;;;7640   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
004c90  f89d0000          LDRB     r0,[sp,#0]
004c94  76e0              STRB     r0,[r4,#0x1b]
;;;7641   
;;;7642   				temp=LPC_RTC->HOUR;
004c96  7a30              LDRB     r0,[r6,#8]
004c98  9001              STR      r0,[sp,#4]
;;;7643   				gran_char((signed char*)&temp,0,23);
004c9a  e000              B        |L1.19614|
                  |L1.19612|
004c9c  e0c9              B        |L1.20018|
                  |L1.19614|
004c9e  2217              MOVS     r2,#0x17
004ca0  2100              MOVS     r1,#0
004ca2  a801              ADD      r0,sp,#4
004ca4  f7fffffe          BL       gran_char
;;;7644   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
004ca8  f89d0004          LDRB     r0,[sp,#4]
004cac  7720              STRB     r0,[r4,#0x1c]
;;;7645                  	
;;;7646   				temp=LPC_RTC->MIN;
004cae  7930              LDRB     r0,[r6,#4]
004cb0  9001              STR      r0,[sp,#4]
;;;7647   				gran_char((signed char*)&temp,0,59);
004cb2  223b              MOVS     r2,#0x3b
004cb4  2100              MOVS     r1,#0
004cb6  e0a5              B        |L1.19972|
                  |L1.19640|
004cb8  4176746f          DCB      "Avtomat #4 is OFF",0
004cbc  6d617420
004cc0  23342069
004cc4  73204f46
004cc8  4600    
004cca  00                DCB      0
004ccb  00                DCB      0
                  |L1.19660|
004ccc  4176746f          DCB      "Avtomat #5 is OFF",0
004cd0  6d617420
004cd4  23352069
004cd8  73204f46
004cdc  4600    
004cde  00                DCB      0
004cdf  00                DCB      0
                  |L1.19680|
004ce0  4176746f          DCB      "Avtomat #6 is OFF",0
004ce4  6d617420
004ce8  23362069
004cec  73204f46
004cf0  4600    
004cf2  00                DCB      0
004cf3  00                DCB      0
                  |L1.19700|
004cf4  4176746f          DCB      "Avtomat #7 is OFF",0
004cf8  6d617420
004cfc  23372069
004d00  73204f46
004d04  4600    
004d06  00                DCB      0
004d07  00                DCB      0
                  |L1.19720|
004d08  4176746f          DCB      "Avtomat #8 is OFF",0
004d0c  6d617420
004d10  23382069
004d14  73204f46
004d18  4600    
004d1a  00                DCB      0
004d1b  00                DCB      0
                  |L1.19740|
004d1c  4176746f          DCB      "Avtomat #9 is OFF",0
004d20  6d617420
004d24  23392069
004d28  73204f46
004d2c  4600    
004d2e  00                DCB      0
004d2f  00                DCB      0
                  |L1.19760|
004d30  4176746f          DCB      "Avtomat #1 is ON ",0
004d34  6d617420
004d38  23312069
004d3c  73204f4e
004d40  2000    
004d42  00                DCB      0
004d43  00                DCB      0
                  |L1.19780|
004d44  4176746f          DCB      "Avtomat #2 is ON ",0
004d48  6d617420
004d4c  23322069
004d50  73204f4e
004d54  2000    
004d56  00                DCB      0
004d57  00                DCB      0
                  |L1.19800|
004d58  4176746f          DCB      "Avtomat #3 is ON ",0
004d5c  6d617420
004d60  23332069
004d64  73204f4e
004d68  2000    
004d6a  00                DCB      0
004d6b  00                DCB      0
                  |L1.19820|
004d6c  4176746f          DCB      "Avtomat #4 is ON ",0
004d70  6d617420
004d74  23342069
004d78  73204f4e
004d7c  2000    
004d7e  00                DCB      0
004d7f  00                DCB      0
                  |L1.19840|
004d80  4176746f          DCB      "Avtomat #5 is ON ",0
004d84  6d617420
004d88  23352069
004d8c  73204f4e
004d90  2000    
004d92  00                DCB      0
004d93  00                DCB      0
                  |L1.19860|
004d94  4176746f          DCB      "Avtomat #6 is ON ",0
004d98  6d617420
004d9c  23362069
004da0  73204f4e
004da4  2000    
004da6  00                DCB      0
004da7  00                DCB      0
                  |L1.19880|
004da8  4176746f          DCB      "Avtomat #7 is ON ",0
004dac  6d617420
004db0  23372069
004db4  73204f4e
004db8  2000    
004dba  00                DCB      0
004dbb  00                DCB      0
                  |L1.19900|
004dbc  4176746f          DCB      "Avtomat #8 is ON ",0
004dc0  6d617420
004dc4  23382069
004dc8  73204f4e
004dcc  2000    
004dce  00                DCB      0
004dcf  00                DCB      0
                  |L1.19920|
004dd0  4176746f          DCB      "Avtomat #9 is ON ",0
004dd4  6d617420
004dd8  23392069
004ddc  73204f4e
004de0  2000    
004de2  00                DCB      0
004de3  00                DCB      0
                  |L1.19940|
                          DCD      bat
                  |L1.19944|
                          DCD      mess_data
                  |L1.19948|
                          DCD      ||area_number.25||+0xb0
                  |L1.19952|
                          DCD      IZMAX
                  |L1.19956|
                          DCD      main_10Hz_cnt
                  |L1.19960|
                          DCD      IKB
                  |L1.19964|
                          DCD      bat_u_old_cnt
                  |L1.19968|
                          DCD      0x40024020
                  |L1.19972|
004e04  a801              ADD      r0,sp,#4
004e06  f7fffffe          BL       gran_char
;;;7648   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
004e0a  f89d0004          LDRB     r0,[sp,#4]
004e0e  7760              STRB     r0,[r4,#0x1d]
;;;7649   	          
;;;7650   				temp=LPC_RTC->SEC;
004e10  7830              LDRB     r0,[r6,#0]
004e12  9001              STR      r0,[sp,#4]
;;;7651   				gran_char((signed char*)&temp,0,59);
004e14  223b              MOVS     r2,#0x3b
004e16  2100              MOVS     r1,#0
004e18  a801              ADD      r0,sp,#4
004e1a  f7fffffe          BL       gran_char
;;;7652   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
004e1e  f89d0004          LDRB     r0,[sp,#4]
004e22  77a0              STRB     r0,[r4,#0x1e]
;;;7653   			
;;;7654   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
004e24  f89d0001          LDRB     r0,[sp,#1]
004e28  77e0              STRB     r0,[r4,#0x1f]
;;;7655   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004e2a  8027              STRH     r7,[r4,#0]
;;;7656   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
004e2c  8067              STRH     r7,[r4,#2]
004e2e  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.20018|
;;;7657   				}
;;;7658   	
;;;7659   			}
;;;7660   
;;;7661   		}
;;;7662   	else bat[in]._cnt_wrk=0;	 
;;;7663   	
;;;7664   	}					
;;;7665   
;;;7666   /*
;;;7667   if(Ibat>=(-IKB))
;;;7668   	{
;;;7669   	if(cnt_wrk<10)
;;;7670   		{
;;;7671   		cnt_wrk++;
;;;7672   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7673   			{
;;;7674   			wrk=wrkOFF;
;;;7675   			//beep_init(0x7L,'O');
;;;7676   			wrk_mem_hndl(ibat_integr);
;;;7677   			}
;;;7678   		}
;;;7679   	else cnt_wrk=10;	
;;;7680   	}	
;;;7681   
;;;7682   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;7683   	{
;;;7684   	if(cnt_wrk)
;;;7685   		{
;;;7686   		cnt_wrk--;
;;;7687   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7688   			{
;;;7689   			char temp;
;;;7690   			signed short temp_temp;
;;;7691   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7692   			 
;;;7693   			wrk=wrkON;
;;;7694   			
;;;7695   			temp=_year;
;;;7696   			gran_char(&temp,1,99);
;;;7697   			*((char*)(&(wrk_date[0])))=temp;
;;;7698   			
;;;7699   			temp=_month;
;;;7700   			gran_char(&temp,1,12);
;;;7701   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7702   			
;;;7703   			temp=_date;
;;;7704   			gran_char(&temp,1,31);
;;;7705   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7706   				
;;;7707   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7708   
;;;7709   			temp=_hour;
;;;7710   			gran_char(&temp,0,23);
;;;7711   			*((char*)(&(wrk_date[1])))=temp;
;;;7712                  
;;;7713   			temp=_min;
;;;7714   			gran_char(&temp,0,59);
;;;7715   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7716   	          
;;;7717   			temp=_sec;
;;;7718   			gran_char(&temp,0,59);
;;;7719   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7720   			
;;;7721   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7722   
;;;7723   			
;;;7724   			//beep_init(0xFL,'O'); 
;;;7725   			ibat_integr=0;
;;;7726   			ibat_integr_=0;
;;;7727   			}
;;;7728   		}
;;;7729   	else cnt_wrk=0;	 
;;;7730   	
;;;7731   	}
;;;7732   if(wrk==wrkON)
;;;7733   	{
;;;7734   	ibat_integr_+=-Ibat;
;;;7735   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7736   		{
;;;7737   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7738   		ibat_integr++;
;;;7739   		}
;;;7740   	}
;;;7741   
;;;7742   */
;;;7743   
;;;7744   
;;;7745   /*if(bat[in]._cnt_to_block)
;;;7746   	{
;;;7747   	bat[in]._cnt_to_block--;
;;;7748   	if(!(bat[in]._cnt_to_block))
;;;7749   		{
;;;7750   		//bat[in]._rel_stat=1;
;;;7751   		}
;;;7752   	}
;;;7753   */
;;;7754   
;;;7755   
;;;7756   
;;;7757   
;;;7758   //unsigned int tempUI,tempUI_;
;;;7759   //unsigned int b_zar; 
;;;7760   //char i;
;;;7761   //Ibat[0]=5000;                     
;;;7762   
;;;7763   
;;;7764                               
;;;7765   if(bat[in]._time_cnt==0)
;;;7766   	{
;;;7767   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;7768   	
;;;7769   	if(bat[in]._zar_cnt>=AH_CONSTANT)
004e32  f64848a0          MOV      r8,#0x8ca0
004e36  f894003e          LDRB     r0,[r4,#0x3e]         ;7765
004e3a  bba8              CBNZ     r0,|L1.20136|
004e3c  f9b41008          LDRSH    r1,[r4,#8]            ;7767
004e40  6960              LDR      r0,[r4,#0x14]         ;7767
004e42  4408              ADD      r0,r0,r1              ;7767
004e44  6160              STR      r0,[r4,#0x14]         ;7767
;;;7770   		{
;;;7771   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;7772   		else tempUS_=BAT_C_REAL[in];
;;;7773   		
;;;7774   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004e46  f8df940c          LDR      r9,|L1.21076|
004e4a  f8dfa40c          LDR      r10,|L1.21080|
004e4e  f2455b55          MOV      r11,#0x5555           ;7771
004e52  4540              CMP      r0,r8                 ;7769
004e54  db29              BLT      |L1.20138|
004e56  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;7771
004e5a  4558              CMP      r0,r11                ;7771
004e5c  d103              BNE      |L1.20070|
004e5e  48ff              LDR      r0,|L1.21084|
004e60  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;7771
004e64  e001              B        |L1.20074|
                  |L1.20070|
004e66  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;7772
                  |L1.20074|
004e6a  f8390015          LDRH     r0,[r9,r5,LSL #1]
004e6e  f7fffffe          BL       lc640_read_int
004e72  b280              UXTH     r0,r0
;;;7775   
;;;7776   		if(b_zar<(tempUS_/**10*/))
004e74  42b0              CMP      r0,r6
004e76  d20e              BCS      |L1.20118|
;;;7777   			{
;;;7778   			bat[in]._zar_cnt-=AH_CONSTANT;
004e78  6961              LDR      r1,[r4,#0x14]
004e7a  f5a14100          SUB      r1,r1,#0x8000
004e7e  f5a1614a          SUB      r1,r1,#0xca0
004e82  6161              STR      r1,[r4,#0x14]
;;;7779   
;;;7780   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
004e84  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004e88  f1000001          ADD      r0,r0,#1
004e8c  b201              SXTH     r1,r0
004e8e  4610              MOV      r0,r2
004e90  f7fffffe          BL       lc640_write_int
004e94  e032              B        |L1.20220|
                  |L1.20118|
;;;7781   			}
;;;7782   		else if(b_zar>(tempUS_/**10*/))  
004e96  d931              BLS      |L1.20220|
;;;7783   			{
;;;7784   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004e98  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004e9c  b231              SXTH     r1,r6
004e9e  f7fffffe          BL       lc640_write_int
;;;7785   			bat[in]._zar_cnt=AH_CONSTANT;
004ea2  f8c48014          STR      r8,[r4,#0x14]
004ea6  e029              B        |L1.20220|
                  |L1.20136|
004ea8  e054              B        |L1.20308|
                  |L1.20138|
;;;7786   
;;;7787   			}
;;;7788   
;;;7789   		}
;;;7790   
;;;7791   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
004eaa  49ed              LDR      r1,|L1.21088|
004eac  4288              CMP      r0,r1
004eae  dc25              BGT      |L1.20220|
;;;7792   		{
;;;7793   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
004eb0  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
004eb4  4558              CMP      r0,r11
004eb6  d103              BNE      |L1.20160|
004eb8  48e8              LDR      r0,|L1.21084|
004eba  f8306015          LDRH     r6,[r0,r5,LSL #1]
004ebe  e001              B        |L1.20164|
                  |L1.20160|
;;;7794   		else tempUS_=BAT_C_REAL[in];
004ec0  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.20164|
;;;7795   		
;;;7796   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004ec4  f8390015          LDRH     r0,[r9,r5,LSL #1]
004ec8  f7fffffe          BL       lc640_read_int
004ecc  b280              UXTH     r0,r0
;;;7797   
;;;7798   		if(b_zar>tempUS_)
004ece  42b0              CMP      r0,r6
004ed0  d905              BLS      |L1.20190|
;;;7799   			{
;;;7800   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004ed2  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004ed6  b231              SXTH     r1,r6
004ed8  f7fffffe          BL       lc640_write_int
;;;7801   			b_zar=tempUS_;
004edc  4630              MOV      r0,r6
                  |L1.20190|
;;;7802   			}
;;;7803   		if(b_zar)
004ede  b158              CBZ      r0,|L1.20216|
;;;7804   			{
;;;7805   			bat[in]._zar_cnt+=AH_CONSTANT;
004ee0  6961              LDR      r1,[r4,#0x14]
004ee2  4441              ADD      r1,r1,r8
004ee4  6161              STR      r1,[r4,#0x14]
;;;7806   
;;;7807   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
004ee6  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004eea  f1a00001          SUB      r0,r0,#1
004eee  b201              SXTH     r1,r0
004ef0  4610              MOV      r0,r2
004ef2  f7fffffe          BL       lc640_write_int
004ef6  e001              B        |L1.20220|
                  |L1.20216|
;;;7808   			}
;;;7809   		else 
;;;7810   			{
;;;7811   			bat[in]._zar_cnt=-AH_CONSTANT;
004ef8  48d9              LDR      r0,|L1.21088|
004efa  6160              STR      r0,[r4,#0x14]
                  |L1.20220|
;;;7812   			}
;;;7813   
;;;7814   		}
;;;7815   
;;;7816   			
;;;7817   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004efc  f8390015          LDRH     r0,[r9,r5,LSL #1]
004f00  f7fffffe          BL       lc640_read_int
004f04  4601              MOV      r1,r0
;;;7818   	
;;;7819   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
004f06  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
004f0a  4558              CMP      r0,r11
004f0c  d102              BNE      |L1.20244|
004f0e  48d3              LDR      r0,|L1.21084|
004f10  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.20244|
;;;7820   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;7821   		           	
;;;7822   	tempUL*=1000L;
004f14  f44f727a          MOV      r2,#0x3e8
004f18  fb01f102          MUL      r1,r1,r2
;;;7823   
;;;7824   
;;;7825   	if(tempUL_==0) tempUL=0;
004f1c  b158              CBZ      r0,|L1.20278|
;;;7826   	else tempUL/=tempUL_;
004f1e  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.20258|
;;;7827   
;;;7828   	tempUL/=10L;
004f22  f04f010a          MOV      r1,#0xa
004f26  fbb0f0f1          UDIV     r0,r0,r1
;;;7829   
;;;7830   	bat[in]._zar=(unsigned short)tempUL;
004f2a  8220              STRH     r0,[r4,#0x10]
;;;7831   
;;;7832   	if(BAT_TYPE==1)
004f2c  48cd              LDR      r0,|L1.21092|
004f2e  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
004f30  2801              CMP      r0,#1
004f32  d003              BEQ      |L1.20284|
004f34  e008              B        |L1.20296|
                  |L1.20278|
004f36  f04f0000          MOV      r0,#0                 ;7825
004f3a  e7f2              B        |L1.20258|
                  |L1.20284|
;;;7833   		{
;;;7834   		bat[in]._zar=lakb[in]._s_o_c;
004f3c  49ca              LDR      r1,|L1.21096|
004f3e  9802              LDR      r0,[sp,#8]
004f40  eb010080          ADD      r0,r1,r0,LSL #2
004f44  8a40              LDRH     r0,[r0,#0x12]
004f46  8220              STRH     r0,[r4,#0x10]
                  |L1.20296|
;;;7835   		}
;;;7836   	
;;;7837   	gran((signed short*)&bat[in]._zar,0,100);
004f48  f1040010          ADD      r0,r4,#0x10
004f4c  2264              MOVS     r2,#0x64
004f4e  2100              MOVS     r1,#0
004f50  f7fffffe          BL       gran
                  |L1.20308|
;;;7838        }
;;;7839   
;;;7840   
;;;7841   //Подсчет тока разряда батареи      
;;;7842   if(bat[in]._wrk==1)
004f54  7ba0              LDRB     r0,[r4,#0xe]
004f56  2801              CMP      r0,#1
004f58  d113              BNE      |L1.20354|
;;;7843   	{
;;;7844   	if(bat[in]._Iintegr<36000)
004f5a  8ba0              LDRH     r0,[r4,#0x1c]
004f5c  4540              CMP      r0,r8
004f5e  d20f              BCS      |L1.20352|
;;;7845   		{          
;;;7846   		bat[in]._Iintegr+=abs(bat[in]._Ib);
004f60  f9b40008          LDRSH    r0,[r4,#8]
004f64  f7fffffe          BL       abs
004f68  8ba1              LDRH     r1,[r4,#0x1c]
004f6a  4408              ADD      r0,r0,r1
004f6c  b280              UXTH     r0,r0
004f6e  83a0              STRH     r0,[r4,#0x1c]
;;;7847   		if(bat[in]._Iintegr>=36000)
004f70  4540              CMP      r0,r8
004f72  d306              BCC      |L1.20354|
;;;7848   			{
;;;7849   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004f74  83a7              STRH     r7,[r4,#0x1c]
;;;7850   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
004f76  8be0              LDRH     r0,[r4,#0x1e]
004f78  f1000001          ADD      r0,r0,#1
004f7c  83e0              STRH     r0,[r4,#0x1e]
004f7e  e000              B        |L1.20354|
                  |L1.20352|
;;;7851   			}
;;;7852   		}
;;;7853   	else 
;;;7854   		{
;;;7855   		bat[in]._Iintegr=0;
004f80  83a7              STRH     r7,[r4,#0x1c]
                  |L1.20354|
;;;7856   		}	
;;;7857   	} 
;;;7858   	    
;;;7859   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7860   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
004f82  4eba              LDR      r6,|L1.21100|
004f84  49ba              LDR      r1,|L1.21104|
004f86  f8df92ec          LDR      r9,|L1.21108|
004f8a  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
004f8e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
004f92  4288              CMP      r0,r1
004f94  dd02              BLE      |L1.20380|
004f96  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
004f9a  b3f0              CBZ      r0,|L1.20506|
                  |L1.20380|
;;;7861   	{
;;;7862   	bat[in]._sign_temper_cnt++;
;;;7863   	}
;;;7864   else 
;;;7865   	{
;;;7866   	bat[in]._sign_temper_cnt--;
004f9c  f8b40040          LDRH     r0,[r4,#0x40]
004fa0  f1a00001          SUB      r0,r0,#1
004fa4  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.20392|
;;;7867   	}
;;;7868   #else
;;;7869   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;7870   	{
;;;7871   	bat[in]._sign_temper_cnt++;
;;;7872   	}
;;;7873   else 
;;;7874   	{
;;;7875   	bat[in]._sign_temper_cnt--;
;;;7876   	}
;;;7877   #endif
;;;7878   gran(&bat[in]._sign_temper_cnt,0,600);
004fa8  f44f7b16          MOV      r11,#0x258
004fac  f1040040          ADD      r0,r4,#0x40
004fb0  465a              MOV      r2,r11
004fb2  2100              MOVS     r1,#0
004fb4  f7fffffe          BL       gran
;;;7879   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
004fb8  f9b40040          LDRSH    r0,[r4,#0x40]
004fbc  f2402a4e          MOV      r10,#0x24e
004fc0  4550              CMP      r0,r10
004fc2  db05              BLT      |L1.20432|
004fc4  f894103f          LDRB     r1,[r4,#0x3f]
004fc8  f0410101          ORR      r1,r1,#1
004fcc  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.20432|
;;;7880   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
004fd0  280a              CMP      r0,#0xa
004fd2  dc05              BGT      |L1.20448|
004fd4  f894003f          LDRB     r0,[r4,#0x3f]
004fd8  f0200001          BIC      r0,r0,#1
004fdc  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20448|
;;;7881   
;;;7882   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7883   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
004fe0  49a5              LDR      r1,|L1.21112|
004fe2  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
004fe6  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
004fea  4288              CMP      r0,r1
004fec  dd02              BLE      |L1.20468|
004fee  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
004ff2  b3e8              CBZ      r0,|L1.20592|
                  |L1.20468|
;;;7884   	{
;;;7885   	bat[in]._max_temper_cnt++;
;;;7886   	}
;;;7887   else 
;;;7888   	{
;;;7889   	bat[in]._max_temper_cnt--;
004ff4  f8b40042          LDRH     r0,[r4,#0x42]
004ff8  f1a00001          SUB      r0,r0,#1
004ffc  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.20480|
;;;7890   	}
;;;7891   #else
;;;7892   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;7893   	{
;;;7894   	bat[in]._max_temper_cnt++;
;;;7895   	}
;;;7896   else 
;;;7897   	{
;;;7898   	bat[in]._max_temper_cnt--;
;;;7899   	}
;;;7900   #endif
;;;7901   
;;;7902   gran(&bat[in]._max_temper_cnt,0,600);
005000  f1040042          ADD      r0,r4,#0x42
005004  465a              MOV      r2,r11
005006  2100              MOVS     r1,#0
005008  f7fffffe          BL       gran
;;;7903   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
00500c  f9b40042          LDRSH    r0,[r4,#0x42]
005010  4550              CMP      r0,r10
005012  db07              BLT      |L1.20516|
005014  f894103f          LDRB     r1,[r4,#0x3f]
005018  e000              B        |L1.20508|
                  |L1.20506|
00501a  e022              B        |L1.20578|
                  |L1.20508|
00501c  f0410102          ORR      r1,r1,#2
005020  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.20516|
;;;7904   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
005024  280a              CMP      r0,#0xa
005026  dc05              BGT      |L1.20532|
005028  f894003f          LDRB     r0,[r4,#0x3f]
00502c  f0200002          BIC      r0,r0,#2
005030  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20532|
;;;7905   
;;;7906   
;;;7907   
;;;7908   //Подсчет наработки батареи
;;;7909   if(bat[in]._resurs_cnt<36000)
005034  6c60              LDR      r0,[r4,#0x44]
005036  4540              CMP      r0,r8
005038  da22              BGE      |L1.20608|
;;;7910   	{               
;;;7911   	bat[in]._resurs_cnt++;
00503a  f1000001          ADD      r0,r0,#1
00503e  6460              STR      r0,[r4,#0x44]
;;;7912   	if(bat[in]._resurs_cnt>=36000)
005040  4540              CMP      r0,r8
005042  db1e              BLT      |L1.20610|
;;;7913   		{
;;;7914   		bat[in]._resurs_cnt=0;
005044  6467              STR      r7,[r4,#0x44]
;;;7915   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
005046  4c8d              LDR      r4,|L1.21116|
005048  f8340015          LDRH     r0,[r4,r5,LSL #1]
00504c  f7fffffe          BL       lc640_read_int
005050  1c40              ADDS     r0,r0,#1
005052  b201              SXTH     r1,r0
005054  f9340015          LDRSH    r0,[r4,r5,LSL #1]
005058  b003              ADD      sp,sp,#0xc
00505a  e8bd4ff0          POP      {r4-r11,lr}
00505e  f7ffbffe          B.W      lc640_write_int
                  |L1.20578|
005062  f8b40040          LDRH     r0,[r4,#0x40]         ;7862
005066  f1000001          ADD      r0,r0,#1              ;7862
00506a  f8a40040          STRH     r0,[r4,#0x40]         ;7862
00506e  e79b              B        |L1.20392|
                  |L1.20592|
005070  e7ff              B        |L1.20594|
                  |L1.20594|
005072  f8b40042          LDRH     r0,[r4,#0x42]         ;7885
005076  f1000001          ADD      r0,r0,#1              ;7885
00507a  f8a40042          STRH     r0,[r4,#0x42]         ;7885
00507e  e7bf              B        |L1.20480|
                  |L1.20608|
;;;7916   		}
;;;7917   	}
;;;7918   else bat[in]._resurs_cnt=0;
005080  6467              STR      r7,[r4,#0x44]
                  |L1.20610|
;;;7919   
;;;7920   
;;;7921   #ifndef UKU_220_V2
;;;7922   #ifndef UKU_GLONASS
;;;7923   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;7924   //#ifndef UKU_6U
;;;7925   //#ifndef UKU_220
;;;7926   if(UBM_AV)
;;;7927        {
;;;7928        signed short temp_SS;
;;;7929   #ifdef UKU_220
;;;7930   temp_SS=bat[in]._Ub/2;
;;;7931   #else
;;;7932        if(U0B<600)
;;;7933             {
;;;7934   
;;;7935             temp_SS=bat[in]._Ub/4;
;;;7936             }
;;;7937        else temp_SS=bat[in]._Ub/5;
;;;7938   	
;;;7939   	temp_SS+=temp_SS;     
;;;7940   #endif
;;;7941        temp_SS-=(bat[in]._Ubm);
;;;7942   
;;;7943        temp_SS=abs(temp_SS);
;;;7944   
;;;7945        temp_SS*=10;
;;;7946   
;;;7947        temp_SS/=12;
;;;7948   
;;;7949        bat[in]._dUbm=temp_SS;
;;;7950   
;;;7951   
;;;7952        if(	(bat[in]._dUbm>UBM_AV) &&
;;;7953   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;7954   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;7955   		(!(bat[in]._av & 2))  )
;;;7956   		{
;;;7957   		bat[in]._cnt_as++;
;;;7958   		if(bat[in]._cnt_as==3000)
;;;7959   			{
;;;7960   			avar_bat_as_hndl(in,1);
;;;7961   			}
;;;7962   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;7963   		}
;;;7964   	else 
;;;7965   		{
;;;7966   		if(bat[in]._cnt_as)
;;;7967   			{
;;;7968   			bat[in]._cnt_as--;
;;;7969   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;7970   			}
;;;7971   		}
;;;7972        
;;;7973        }
;;;7974   //#endif 
;;;7975   #endif 
;;;7976   #endif
;;;7977   #endif
;;;7978   
;;;7979   }
005082  e8bd8ffe          POP      {r1-r11,pc}
;;;7980   
                          ENDP

                  bat_hndl_zvu PROC
;;;7982   //-----------------------------------------------
;;;7983   void bat_hndl_zvu(void)
005086  e92d4ff0          PUSH     {r4-r11,lr}
;;;7984   {
00508a  b089              SUB      sp,sp,#0x24
;;;7985   char i;
;;;7986   short bat_hndl_i_temp;
;;;7987   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
00508c  f04f021c          MOV      r2,#0x1c
005090  497b              LDR      r1,|L1.21120|
005092  4668              MOV      r0,sp
005094  f7fffffe          BL       __aeabi_memcpy4
;;;7988   
;;;7989   //Ib_ips_termokompensat=-17000;
;;;7990    
;;;7991   if(bat_hndl_zvu_init==0)
005098  4c7a              LDR      r4,|L1.21124|
;;;7992   	{
;;;7993   	//Инициализация при включении системы
;;;7994   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;7995   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
00509a  2564              MOVS     r5,#0x64
;;;7996   	bat_hndl_zvu_Q*=10000L;
;;;7997   
;;;7998   	bat_hndl_zvu_init=1;
;;;7999   	}
;;;8000   else 
;;;8001   	{
;;;8002   	if(Ib_ips_termokompensat<-IKB)
;;;8003   		{
;;;8004   		bat_hndl_i_vector=0;
;;;8005   		bat_hndl_i_zar_price=0L;
;;;8006   			
;;;8007   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8008   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8009   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8010   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8011   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8012   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8013   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8014   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8015   		
;;;8016   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8017   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8018   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8019   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8020   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8021   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8022   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8023   
;;;8024   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8025   		for(i=0;i<7;i++)
;;;8026   			{
;;;8027   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8028   				{
;;;8029   				break;
;;;8030   				}
;;;8031   			}
;;;8032   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8033   		 else if((i>=1)&&(i<7))
;;;8034   		 	{
;;;8035   			short i1,i2;
;;;8036   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8037   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8038   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8039   			bat_hndl_t_razr*=(long)i1;
;;;8040   			bat_hndl_t_razr/=(long)i2;
;;;8041   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8042   			}
;;;8043   		else if(i>=7)
;;;8044   			{
;;;8045   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8046   			}
;;;8047   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
00509c  f8df81e8          LDR      r8,|L1.21128|
0050a0  7a60              LDRB     r0,[r4,#9]            ;7991  ; bat_hndl_zvu_init
0050a2  2700              MOVS     r7,#0                 ;7991
0050a4  f04f0901          MOV      r9,#1                 ;7998
0050a8  f1040680          ADD      r6,r4,#0x80           ;7994
0050ac  2800              CMP      r0,#0                 ;7991
0050ae  d07e              BEQ      |L1.20910|
0050b0  4977              LDR      r1,|L1.21136|
0050b2  4876              LDR      r0,|L1.21132|
0050b4  f9b12000          LDRSH    r2,[r1,#0]            ;8002  ; IKB
0050b8  4631              MOV      r1,r6                 ;7994
0050ba  f9b00000          LDRSH    r0,[r0,#0]            ;8002  ; Ib_ips_termokompensat
0050be  4253              RSBS     r3,r2,#0              ;8002
0050c0  6d49              LDR      r1,[r1,#0x54]         ;7994
0050c2  4298              CMP      r0,r3                 ;8002
0050c4  da74              BGE      |L1.20912|
0050c6  72e7              STRB     r7,[r4,#0xb]          ;8004
0050c8  6137              STR      r7,[r6,#0x10]         ;8005  ; bat_hndl_i_zar_price
0050ca  f1c00000          RSB      r0,r0,#0              ;8007
0050ce  b200              SXTH     r0,r0                 ;8007
0050d0  8070              STRH     r0,[r6,#2]            ;8007
0050d2  9008              STR      r0,[sp,#0x20]         ;8007
0050d4  486f              LDR      r0,|L1.21140|
0050d6  4a70              LDR      r2,|L1.21144|
0050d8  8800              LDRH     r0,[r0,#0]            ;8008  ; BAT_C_POINT_1_6
0050da  eb000040          ADD      r0,r0,r0,LSL #1       ;8008
0050de  ea4f0040          LSL      r0,r0,#1              ;8008
0050e2  fa0ffb80          SXTH     r11,r0                ;8008
0050e6  486d              LDR      r0,|L1.21148|
0050e8  8800              LDRH     r0,[r0,#0]            ;8009  ; BAT_C_POINT_1_2
0050ea  ea4f0040          LSL      r0,r0,#1              ;8009
0050ee  b203              SXTH     r3,r0                 ;8009
0050f0  486b              LDR      r0,|L1.21152|
0050f2  f9b0c000          LDRSH    r12,[r0,#0]           ;8010  ; BAT_C_POINT_1
0050f6  486b              LDR      r0,|L1.21156|
0050f8  f04f0903          MOV      r9,#3                 ;8011
0050fc  f9b00000          LDRSH    r0,[r0,#0]            ;8011  ; BAT_C_POINT_3
005100  fb90f0f9          SDIV     r0,r0,r9              ;8011
005104  b200              SXTH     r0,r0                 ;8011
005106  9007              STR      r0,[sp,#0x1c]         ;8011
005108  4867              LDR      r0,|L1.21160|
00510a  f04f0905          MOV      r9,#5                 ;8012
00510e  f9b00000          LDRSH    r0,[r0,#0]            ;8012  ; BAT_C_POINT_5
005112  fb90f0f9          SDIV     r0,r0,r9              ;8012
005116  fa0ff980          SXTH     r9,r0                 ;8012
00511a  4864              LDR      r0,|L1.21164|
00511c  f9b0a000          LDRSH    r10,[r0,#0]           ;8013  ; BAT_C_POINT_10
005120  f04f000a          MOV      r0,#0xa               ;8013
005124  fb9af0f0          SDIV     r0,r10,r0             ;8013
005128  fa0ffe80          SXTH     lr,r0                 ;8013
00512c  4860              LDR      r0,|L1.21168|
00512e  f04f0a14          MOV      r10,#0x14             ;8014
005132  f9b00000          LDRSH    r0,[r0,#0]            ;8014  ; BAT_C_POINT_20
005136  fb90f0fa          SDIV     r0,r0,r10             ;8014
00513a  fa0ffa80          SXTH     r10,r0                ;8014
00513e  485d              LDR      r0,|L1.21172|
005140  f9b00000          LDRSH    r0,[r0,#0]            ;8016  ; BAT_K_OLD
005144  fb0bfb00          MUL      r11,r11,r0            ;8016
005148  fb9bfbf5          SDIV     r11,r11,r5            ;8016
00514c  f8a2b000          STRH     r11,[r2,#0]           ;8016
005150  fb03f300          MUL      r3,r3,r0              ;8017
005154  fb93f3f5          SDIV     r3,r3,r5              ;8017
005158  8053              STRH     r3,[r2,#2]            ;8017
00515a  fb0cfc00          MUL      r12,r12,r0            ;8018
00515e  fb9cf3f5          SDIV     r3,r12,r5             ;8018
005162  8093              STRH     r3,[r2,#4]            ;8018
005164  9b07              LDR      r3,[sp,#0x1c]         ;8019
005166  fb03f300          MUL      r3,r3,r0              ;8019
00516a  fb93f3f5          SDIV     r3,r3,r5              ;8019
00516e  80d3              STRH     r3,[r2,#6]            ;8019
005170  fb09f900          MUL      r9,r9,r0              ;8020
005174  fb99f3f5          SDIV     r3,r9,r5              ;8020
005178  8113              STRH     r3,[r2,#8]            ;8020
00517a  fb0efe00          MUL      lr,lr,r0              ;8021
00517e  fb9ef3f5          SDIV     r3,lr,r5              ;8021
005182  8153              STRH     r3,[r2,#0xa]          ;8021
005184  fb0afa00          MUL      r10,r10,r0            ;8022
005188  fb9af0f5          SDIV     r0,r10,r5             ;8022
00518c  8190              STRH     r0,[r2,#0xc]          ;8022
00518e  9808              LDR      r0,[sp,#0x20]         ;8024
005190  f04f030a          MOV      r3,#0xa               ;8024
005194  fb90f0f3          SDIV     r0,r0,r3              ;8024
005198  b203              SXTH     r3,r0                 ;8024
00519a  f04f0000          MOV      r0,#0                 ;8025
                  |L1.20894|
00519e  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8027
0051a2  429d              CMP      r5,r3                 ;8027
0051a4  dd07              BLE      |L1.20918|
0051a6  f1000001          ADD      r0,r0,#1              ;8025
0051aa  b2c0              UXTB     r0,r0                 ;8025
0051ac  e001              B        |L1.20914|
                  |L1.20910|
0051ae  e01e              B        |L1.20974|
                  |L1.20912|
0051b0  e086              B        |L1.21184|
                  |L1.20914|
0051b2  2807              CMP      r0,#7                 ;8025
0051b4  d3f3              BCC      |L1.20894|
                  |L1.20918|
0051b6  b358              CBZ      r0,|L1.21008|
0051b8  1e45              SUBS     r5,r0,#1              ;8033
0051ba  2d06              CMP      r5,#6                 ;8033
0051bc  d22b              BCS      |L1.21014|
0051be  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8036
0051c2  ebac0303          SUB      r3,r12,r3             ;8036
0051c6  b21b              SXTH     r3,r3                 ;8036
0051c8  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8037
0051cc  ebac0202          SUB      r2,r12,r2             ;8037
0051d0  fa0ffc82          SXTH     r12,r2                ;8037
0051d4  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8038
0051d8  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8038
0051dc  eba90200          SUB      r2,r9,r0              ;8038
0051e0  fb02f203          MUL      r2,r2,r3              ;8039
0051e4  fb92f2fc          SDIV     r2,r2,r12             ;8040
0051e8  4410              ADD      r0,r0,r2              ;8041
0051ea  64f0              STR      r0,[r6,#0x4c]         ;8041  ; bat_hndl_t_razr
0051ec  e017              B        |L1.21022|
                  |L1.20974|
0051ee  f44f70ef          MOV      r0,#0x1de             ;7994
0051f2  f7fffffe          BL       lc640_read_int
0051f6  6570              STR      r0,[r6,#0x54]         ;7994  ; bat_hndl_zvu_Q
0051f8  2865              CMP      r0,#0x65              ;7995
0051fa  d300              BCC      |L1.20990|
0051fc  6575              STR      r5,[r6,#0x54]         ;7995  ; bat_hndl_zvu_Q
                  |L1.20990|
0051fe  6d70              LDR      r0,[r6,#0x54]         ;7996  ; bat_hndl_zvu_Q
005200  f2427110          MOV      r1,#0x2710            ;7996
005204  fb00f001          MUL      r0,r0,r1              ;7996
005208  6570              STR      r0,[r6,#0x54]         ;7996  ; bat_hndl_zvu_Q
00520a  f8849009          STRB     r9,[r4,#9]            ;7998
00520e  e09a              B        |L1.21318|
                  |L1.21008|
005210  9800              LDR      r0,[sp,#0]            ;8032
005212  64f0              STR      r0,[r6,#0x4c]         ;8032  ; bat_hndl_t_razr
005214  e003              B        |L1.21022|
                  |L1.21014|
005216  2807              CMP      r0,#7                 ;8043
005218  d301              BCC      |L1.21022|
00521a  9806              LDR      r0,[sp,#0x18]         ;8045
00521c  64f0              STR      r0,[r6,#0x4c]         ;8045  ; bat_hndl_t_razr
                  |L1.21022|
00521e  6cf0              LDR      r0,[r6,#0x4c]  ; bat_hndl_t_razr
005220  fb98f0f0          SDIV     r0,r8,r0
005224  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_proc_razr
;;;8048   
;;;8049   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
005226  4281              CMP      r1,r0
005228  dd03              BLE      |L1.21042|
00522a  eba10000          SUB      r0,r1,r0
00522e  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005230  e000              B        |L1.21044|
                  |L1.21042|
;;;8050   		else bat_hndl_zvu_Q=0L;
005232  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21044|
;;;8051   
;;;8052   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
005234  6df1              LDR      r1,[r6,#0x5c]  ; bat_hndl_remain_time
005236  f44f6061          MOV      r0,#0xe10
00523a  fb91f0f0          SDIV     r0,r1,r0
00523e  80b0              STRH     r0,[r6,#4]
;;;8053   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005240  f04f003c          MOV      r0,#0x3c
005244  fb91f1f0          SDIV     r1,r1,r0
005248  b209              SXTH     r1,r1
00524a  80f1              STRH     r1,[r6,#6]
;;;8054   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
00524c  fb91f2f0          SDIV     r2,r1,r0
005250  e032              B        |L1.21176|
005252  0000              DCW      0x0000
                  |L1.21076|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.21080|
                          DCD      BAT_C_REAL
                  |L1.21084|
                          DCD      BAT_C_NOM
                  |L1.21088|
                          DCD      0xffff7360
                  |L1.21092|
                          DCD      BAT_TYPE
                  |L1.21096|
                          DCD      lakb
                  |L1.21100|
                          DCD      t_ext
                  |L1.21104|
                          DCD      TBATSIGN
                  |L1.21108|
                          DCD      ND_EXT
                  |L1.21112|
                          DCD      TBATMAX
                  |L1.21116|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.21120|
                          DCD      ||area_number.19||+0x20
                  |L1.21124|
                          DCD      ||area_number.25||
                  |L1.21128|
                          DCD      0x000f4240
                  |L1.21132|
                          DCD      Ib_ips_termokompensat
                  |L1.21136|
                          DCD      IKB
                  |L1.21140|
                          DCD      BAT_C_POINT_1_6
                  |L1.21144|
                          DCD      ||.bss||+0x44c
                  |L1.21148|
                          DCD      BAT_C_POINT_1_2
                  |L1.21152|
                          DCD      BAT_C_POINT_1
                  |L1.21156|
                          DCD      BAT_C_POINT_3
                  |L1.21160|
                          DCD      BAT_C_POINT_5
                  |L1.21164|
                          DCD      BAT_C_POINT_10
                  |L1.21168|
                          DCD      BAT_C_POINT_20
                  |L1.21172|
                          DCD      BAT_K_OLD
                  |L1.21176|
0052b8  fb001012          MLS      r0,r0,r2,r1
0052bc  8130              STRH     r0,[r6,#8]
0052be  e016              B        |L1.21230|
                  |L1.21184|
;;;8055   
;;;8056   		}
;;;8057   	else if(Ib_ips_termokompensat>IKB)
0052c0  4290              CMP      r0,r2
0052c2  dd14              BLE      |L1.21230|
;;;8058   		{
;;;8059   		bat_hndl_i_vector=1;
0052c4  f884900b          STRB     r9,[r4,#0xb]
;;;8060   
;;;8061   		bat_hndl_i=Ib_ips_termokompensat;
0052c8  8070              STRH     r0,[r6,#2]
;;;8062   		bat_hndl_i_summ+=(long)bat_hndl_i;
0052ca  6e72              LDR      r2,[r6,#0x64]  ; bat_hndl_i_summ
0052cc  4410              ADD      r0,r0,r2
0052ce  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8063   		if(bat_hndl_i_summ>=36000L)
0052d0  f64842a0          MOV      r2,#0x8ca0
0052d4  4290              CMP      r0,r2
0052d6  db0a              BLT      |L1.21230|
;;;8064   
;;;8065   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8066   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8067   			{
;;;8068   			bat_hndl_i_summ-=36000L;
0052d8  eba00002          SUB      r0,r0,r2
0052dc  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8069   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
0052de  4541              CMP      r1,r8
0052e0  da03              BGE      |L1.21226|
0052e2  6930              LDR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
0052e4  4408              ADD      r0,r0,r1
0052e6  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0052e8  e001              B        |L1.21230|
                  |L1.21226|
;;;8070   			else bat_hndl_zvu_Q=1000000L; 
0052ea  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21230|
;;;8071   			}
;;;8072   		}
;;;8073   
;;;8074   
;;;8075   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
0052ee  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0052f0  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
0052f2  4288              CMP      r0,r1
0052f4  d00d              BEQ      |L1.21266|
;;;8076   		{
;;;8077   		if(bat_hndl_i_vector==1)
0052f6  2801              CMP      r0,#1
0052f8  d10b              BNE      |L1.21266|
;;;8078   			{
;;;8079   			signed short tempSS;
;;;8080   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0052fa  f44f70e4          MOV      r0,#0x1c8
0052fe  f7fffffe          BL       lc640_read_int
005302  b200              SXTH     r0,r0
;;;8081   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
005304  4aff              LDR      r2,|L1.22276|
005306  6d71              LDR      r1,[r6,#0x54]  ; bat_hndl_zvu_Q
005308  4411              ADD      r1,r1,r2
00530a  fb91f0f0          SDIV     r0,r1,r0
00530e  6130              STR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
;;;8082   			bat_hndl_i_summ=0;
005310  6677              STR      r7,[r6,#0x64]  ; bat_hndl_i_summ
                  |L1.21266|
;;;8083   			}
;;;8084   		}
;;;8085   	bat_hndl_i_vector_old=bat_hndl_i_vector;
005312  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005314  7320              STRB     r0,[r4,#0xc]
;;;8086   
;;;8087   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
005316  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005318  f2427a10          MOV      r10,#0x2710
00531c  fb90f5fa          SDIV     r5,r0,r10
005320  f44f79ef          MOV      r9,#0x1de
005324  4648              MOV      r0,r9
005326  f7fffffe          BL       lc640_read_int
00532a  4285              CMP      r5,r0
00532c  d006              BEQ      |L1.21308|
00532e  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005330  fb90f0fa          SDIV     r0,r0,r10
005334  b201              SXTH     r1,r0
005336  4648              MOV      r0,r9
005338  f7fffffe          BL       lc640_write_int
                  |L1.21308|
;;;8088   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
00533c  e9d60115          LDRD     r0,r1,[r6,#0x54]
005340  fb90f0f1          SDIV     r0,r0,r1
005344  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_remain_time
                  |L1.21318|
;;;8089   	}
;;;8090   
;;;8091   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
005346  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005348  4540              CMP      r0,r8
00534a  dd02              BLE      |L1.21330|
00534c  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
005350  e002              B        |L1.21336|
                  |L1.21330|
;;;8092   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
005352  2800              CMP      r0,#0
005354  da00              BGE      |L1.21336|
005356  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21336|
;;;8093   
;;;8094   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
005358  48eb              LDR      r0,|L1.22280|
00535a  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
00535e  200a              MOVS     r0,#0xa
005360  fb91f0f0          SDIV     r0,r1,r0
005364  49e9              LDR      r1,|L1.22284|
005366  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00536a  ebb00f41          CMP      r0,r1,LSL #1
00536e  da30              BGE      |L1.21458|
005370  4249              RSBS     r1,r1,#0
005372  ebb00f41          CMP      r0,r1,LSL #1
005376  dd2c              BLE      |L1.21458|
005378  48e5              LDR      r0,|L1.22288|
00537a  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
00537e  07c0              LSLS     r0,r0,#31
005380  d127              BNE      |L1.21458|
005382  48e4              LDR      r0,|L1.22292|
005384  49e4              LDR      r1,|L1.22296|
005386  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
00538a  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
00538e  4288              CMP      r0,r1
005390  dc1f              BGT      |L1.21458|
005392  49e2              LDR      r1,|L1.22300|
005394  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
005398  4288              CMP      r0,r1
00539a  dd1a              BLE      |L1.21458|
00539c  f9b40050          LDRSH    r0,[r4,#0x50]  ; main_kb_cnt
0053a0  280a              CMP      r0,#0xa
0053a2  db16              BLT      |L1.21458|
0053a4  28c8              CMP      r0,#0xc8
0053a6  dc14              BGT      |L1.21458|
;;;8095   	{
;;;8096   	if(bat_hndl_zvu_Q_cnt<60)
0053a8  f894002f          LDRB     r0,[r4,#0x2f]  ; bat_hndl_zvu_Q_cnt
0053ac  283c              CMP      r0,#0x3c
0053ae  d20d              BCS      |L1.21452|
;;;8097   		{
;;;8098   		bat_hndl_zvu_Q_cnt++;
0053b0  f1000001          ADD      r0,r0,#1
0053b4  b2c0              UXTB     r0,r0
0053b6  f884002f          STRB     r0,[r4,#0x2f]
;;;8099   		if(bat_hndl_zvu_Q_cnt>=60)
0053ba  283c              CMP      r0,#0x3c
0053bc  d306              BCC      |L1.21452|
;;;8100   			{
;;;8101   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
0053be  2164              MOVS     r1,#0x64
0053c0  f44f70ef          MOV      r0,#0x1de
0053c4  f7fffffe          BL       lc640_write_int
;;;8102   			bat_hndl_zvu_Q=1000000L;
0053c8  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21452|
;;;8103   
;;;8104   
;;;8105   			}
;;;8106   		}
;;;8107   	}
;;;8108   else 
;;;8109   	{
;;;8110   	bat_hndl_zvu_Q_cnt=0;
;;;8111   	}
;;;8112   
;;;8113   
;;;8114   
;;;8115   };
0053cc  b009              ADD      sp,sp,#0x24
0053ce  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.21458|
0053d2  f884702f          STRB     r7,[r4,#0x2f]         ;8110
0053d6  e7f9              B        |L1.21452|
;;;8116   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8120   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8121   void u_avt_set_hndl(void)
0053d8  e92d5fff          PUSH     {r0-r12,lr}
;;;8122   {
;;;8123   if(uavt_set_stat==uassSTEP1)
0053dc  4dd0              LDR      r5,|L1.22304|
;;;8124   	{
;;;8125   	char i,find_succes;
;;;8126   
;;;8127   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8128   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8129   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8130   		{
;;;8131   		uavt_set_error_cnt=60;
0053de  4ed1              LDR      r6,|L1.22308|
0053e0  f8df8344          LDR      r8,|L1.22312|
0053e4  7828              LDRB     r0,[r5,#0]            ;8123  ; uavt_set_stat
;;;8132   		}
;;;8133   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8134   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8135   	find_succes=0;
;;;8136   /*	for(i=0;i<NUMIST;i++)
;;;8137   		{
;;;8138   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8139   		else
;;;8140   			{
;;;8141   			find_succes=0;
;;;8142   			break;
;;;8143   			}
;;;8144   		}*/
;;;8145   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
0053e6  f8dfa344          LDR      r10,|L1.22316|
0053ea  2400              MOVS     r4,#0                 ;8134
;;;8146   
;;;8147   	if(find_succes==1)
;;;8148   		{
;;;8149   		uavt_set_stat=uassSTEP2;
0053ec  f04f0902          MOV      r9,#2
;;;8150   		}
;;;8151   	if(uavt_set_error_cnt)
;;;8152   		{
;;;8153   		uavt_set_error_cnt--;
;;;8154   		if(!uavt_set_error_cnt)
;;;8155   			{
;;;8156   			uavt_set_stat=uassOFF;
;;;8157   			uavt_set_result_stat=uasrsERR;
;;;8158   			avt_error_bps=100;
0053f0  f04f0b64          MOV      r11,#0x64
0053f4  2801              CMP      r0,#1                 ;8123
0053f6  d12e              BNE      |L1.21590|
0053f8  f8980000          LDRB     r0,[r8,#0]            ;8129  ; uavt_set_stat_old
0053fc  2801              CMP      r0,#1                 ;8129
0053fe  d002              BEQ      |L1.21510|
005400  f04f003c          MOV      r0,#0x3c              ;8131
005404  7030              STRB     r0,[r6,#0]            ;8131
                  |L1.21510|
005406  230a              MOVS     r3,#0xa               ;8134
005408  2200              MOVS     r2,#0                 ;8134
00540a  21e6              MOVS     r1,#0xe6              ;8134
00540c  20e1              MOVS     r0,#0xe1              ;8134
00540e  f7fffffe          BL       mess_send
005412  f04f0000          MOV      r0,#0                 ;8135
005416  49c6              LDR      r1,|L1.22320|
005418  f9b12000          LDRSH    r2,[r1,#0]            ;8145  ; bps_U
00541c  f9ba1000          LDRSH    r1,[r10,#0]           ;8145  ; U_AVT
005420  f1a10301          SUB      r3,r1,#1              ;8145
005424  429a              CMP      r2,r3                 ;8145
005426  db04              BLT      |L1.21554|
005428  1c49              ADDS     r1,r1,#1              ;8145
00542a  428a              CMP      r2,r1                 ;8145
00542c  dc01              BGT      |L1.21554|
00542e  f04f0001          MOV      r0,#1                 ;8145
                  |L1.21554|
005432  2801              CMP      r0,#1                 ;8147
005434  d101              BNE      |L1.21562|
005436  f8859000          STRB     r9,[r5,#0]            ;8149
                  |L1.21562|
00543a  7830              LDRB     r0,[r6,#0]            ;8151  ; uavt_set_error_cnt
00543c  b158              CBZ      r0,|L1.21590|
00543e  f1a00001          SUB      r0,r0,#1              ;8153
005442  b2c0              UXTB     r0,r0                 ;8153
005444  7030              STRB     r0,[r6,#0]            ;8153
005446  b930              CBNZ     r0,|L1.21590|
005448  702c              STRB     r4,[r5,#0]            ;8156
00544a  48ba              LDR      r0,|L1.22324|
00544c  f8809000          STRB     r9,[r0,#0]            ;8157
005450  48b9              LDR      r0,|L1.22328|
005452  f880b000          STRB     r11,[r0,#0]
                  |L1.21590|
;;;8159   			}
;;;8160   		}
;;;8161   	}
;;;8162   if(uavt_set_stat==uassSTEP2)
005456  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8163   	{
;;;8164   	char i,find_succes;
;;;8165   
;;;8166   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005458  49b8              LDR      r1,|L1.22332|
;;;8167   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
00545a  48b9              LDR      r0,|L1.22336|
;;;8168   
;;;8169   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8170   		{
;;;8171   		uavt_set_error_cnt=60;
;;;8172   		}
;;;8173   
;;;8174   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8175   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8176   	find_succes=1;
;;;8177   
;;;8178   	for(i=0;i<NUMIST;i++)
;;;8179   		{
;;;8180   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8181   		else
;;;8182   			{
;;;8183   			find_succes=0;
;;;8184   			avt_error_bps=i+1;
;;;8185   			break;
;;;8186   			}
;;;8187   		}
;;;8188   
;;;8189   	if(find_succes==1)
;;;8190   		{
;;;8191   		uavt_set_stat=uassSTEP3;
;;;8192   		uavt_bps_pntr=0;
00545c  4fb9              LDR      r7,|L1.22340|
00545e  2a02              CMP      r2,#2                 ;8162
005460  d002              BEQ      |L1.21608|
;;;8193   		avt_plazma=0;
;;;8194   		}
;;;8195   
;;;8196   	if(uavt_set_error_cnt)
;;;8197   		{
;;;8198   		uavt_set_error_cnt--;
;;;8199   		if(!uavt_set_error_cnt)
;;;8200   			{
;;;8201   			uavt_set_stat=uassOFF;
;;;8202   			uavt_set_result_stat=uasrsERR;
;;;8203   			}
;;;8204   		}
;;;8205   	}
;;;8206   else if(uavt_set_stat==uassSTEP3)
005462  2a03              CMP      r2,#3
005464  d05e              BEQ      |L1.21796|
005466  e0ca              B        |L1.22014|
                  |L1.21608|
005468  f9ba2000          LDRSH    r2,[r10,#0]           ;8166  ; U_AVT
00546c  f04f0365          MOV      r3,#0x65              ;8166
005470  fb02f303          MUL      r3,r2,r3              ;8166
005474  fbb3f3fb          UDIV     r3,r3,r11             ;8166
005478  468a              MOV      r10,r1                ;8166
00547a  800b              STRH     r3,[r1,#0]            ;8166
00547c  eb021142          ADD      r1,r2,r2,LSL #5       ;8167
005480  eb010141          ADD      r1,r1,r1,LSL #1       ;8167
005484  fbb1f1fb          UDIV     r1,r1,r11             ;8167
005488  4683              MOV      r11,r0                ;8167
00548a  8001              STRH     r1,[r0,#0]            ;8167
00548c  f8980000          LDRB     r0,[r8,#0]            ;8169  ; uavt_set_stat_old
005490  2802              CMP      r0,#2                 ;8169
005492  d002              BEQ      |L1.21658|
005494  f04f003c          MOV      r0,#0x3c              ;8171
005498  7030              STRB     r0,[r6,#0]            ;8171
                  |L1.21658|
00549a  230a              MOVS     r3,#0xa               ;8174
00549c  21bf              MOVS     r1,#0xbf              ;8174
00549e  20be              MOVS     r0,#0xbe              ;8174
0054a0  f7fffffe          BL       mess_send
0054a4  230a              MOVS     r3,#0xa               ;8175
0054a6  2200              MOVS     r2,#0                 ;8175
0054a8  21e6              MOVS     r1,#0xe6              ;8175
0054aa  20e1              MOVS     r0,#0xe1              ;8175
0054ac  f7fffffe          BL       mess_send
0054b0  f04f0201          MOV      r2,#1                 ;8176
0054b4  f04f0000          MOV      r0,#0                 ;8178
0054b8  49a4              LDR      r1,|L1.22348|
0054ba  f9ba3000          LDRSH    r3,[r10,#0]           ;8178
0054be  f8dfe288          LDR      lr,|L1.22344|
0054c2  f9bbc000          LDRSH    r12,[r11,#0]          ;8180
0054c6  f9b1a000          LDRSH    r10,[r1,#0]           ;8178
0054ca  e00d              B        |L1.21736|
                  |L1.21708|
0054cc  ebc001c0          RSB      r1,r0,r0,LSL #3       ;8180
0054d0  eb011100          ADD      r1,r1,r0,LSL #4       ;8180
0054d4  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8180
0054d8  69c9              LDR      r1,[r1,#0x1c]         ;8180
0054da  4299              CMP      r1,r3                 ;8180
0054dc  da09              BGE      |L1.21746|
0054de  4561              CMP      r1,r12                ;8180
0054e0  dd07              BLE      |L1.21746|
0054e2  f1000001          ADD      r0,r0,#1              ;8178
0054e6  b2c0              UXTB     r0,r0                 ;8178
                  |L1.21736|
0054e8  4550              CMP      r0,r10                ;8178
0054ea  dbef              BLT      |L1.21708|
                  |L1.21740|
0054ec  2a01              CMP      r2,#1                 ;8189
0054ee  d007              BEQ      |L1.21760|
0054f0  e00c              B        |L1.21772|
                  |L1.21746|
0054f2  f04f0200          MOV      r2,#0                 ;8183
0054f6  4990              LDR      r1,|L1.22328|
0054f8  f1000001          ADD      r0,r0,#1              ;8184
0054fc  7008              STRB     r0,[r1,#0]            ;8184
0054fe  e7f5              B        |L1.21740|
                  |L1.21760|
005500  f04f0003          MOV      r0,#3                 ;8191
005504  7028              STRB     r0,[r5,#0]            ;8191
005506  703c              STRB     r4,[r7,#0]            ;8192
005508  4891              LDR      r0,|L1.22352|
00550a  7004              STRB     r4,[r0,#0]            ;8193
                  |L1.21772|
00550c  7830              LDRB     r0,[r6,#0]            ;8196  ; uavt_set_error_cnt
00550e  b3d0              CBZ      r0,|L1.21894|
005510  f1a00001          SUB      r0,r0,#1              ;8198
005514  b2c0              UXTB     r0,r0                 ;8198
005516  7030              STRB     r0,[r6,#0]            ;8198
005518  bba8              CBNZ     r0,|L1.21894|
00551a  702c              STRB     r4,[r5,#0]            ;8201
00551c  4885              LDR      r0,|L1.22324|
00551e  f8809000          STRB     r9,[r0,#0]            ;8202
005522  e06c              B        |L1.22014|
                  |L1.21796|
;;;8207   	{
;;;8208   	char i,find_succes;
;;;8209   
;;;8210   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005524  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005528  f04f0365          MOV      r3,#0x65
00552c  fb02f303          MUL      r3,r2,r3
005530  fbb3f3fb          UDIV     r3,r3,r11
005534  468a              MOV      r10,r1
005536  800b              STRH     r3,[r1,#0]
;;;8211   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005538  eb021142          ADD      r1,r2,r2,LSL #5
00553c  eb010141          ADD      r1,r1,r1,LSL #1
005540  fbb1f1fb          UDIV     r1,r1,r11
005544  4683              MOV      r11,r0
005546  8001              STRH     r1,[r0,#0]
;;;8212   	
;;;8213   	if(uavt_set_stat_old!=uavt_set_stat)
005548  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
00554c  2803              CMP      r0,#3
00554e  d000              BEQ      |L1.21842|
;;;8214   		{
;;;8215   		uavt_bps_pntr=0;
005550  703c              STRB     r4,[r7,#0]
                  |L1.21842|
;;;8216   		}
;;;8217   
;;;8218   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005552  230a              MOVS     r3,#0xa
005554  21bf              MOVS     r1,#0xbf
005556  20be              MOVS     r0,#0xbe
005558  f7fffffe          BL       mess_send
;;;8219   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
00555c  230a              MOVS     r3,#0xa
00555e  2200              MOVS     r2,#0
005560  21e6              MOVS     r1,#0xe6
005562  20e1              MOVS     r0,#0xe1
005564  f7fffffe          BL       mess_send
;;;8220   
;;;8221   	find_succes=1;
005568  f04f0601          MOV      r6,#1
;;;8222   	for(i=0;i<NUMIST;i++)
00556c  f04f0000          MOV      r0,#0
005570  f8df91d8          LDR      r9,|L1.22348|
005574  f9ba2000          LDRSH    r2,[r10,#0]
005578  f8dfc1cc          LDR      r12,|L1.22344|
00557c  f9bb3000          LDRSH    r3,[r11,#0]           ;8180
005580  f9b9a000          LDRSH    r10,[r9,#0]           ;8178
005584  e00e              B        |L1.21924|
                  |L1.21894|
005586  e03a              B        |L1.22014|
                  |L1.21896|
;;;8223   		{
;;;8224   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005588  ebc001c0          RSB      r1,r0,r0,LSL #3
00558c  eb011100          ADD      r1,r1,r0,LSL #4
005590  eb0c0181          ADD      r1,r12,r1,LSL #2
005594  69c9              LDR      r1,[r1,#0x1c]
005596  4291              CMP      r1,r2
005598  da0f              BGE      |L1.21946|
00559a  4299              CMP      r1,r3
00559c  dd0d              BLE      |L1.21946|
00559e  f1000001          ADD      r0,r0,#1              ;8222
0055a2  b2c0              UXTB     r0,r0                 ;8222
                  |L1.21924|
0055a4  4550              CMP      r0,r10                ;8222
0055a6  dbef              BLT      |L1.21896|
                  |L1.21928|
;;;8225   		else
;;;8226   			{
;;;8227   			find_succes=0;
;;;8228   			break;
;;;8229   			}
;;;8230   		}
;;;8231   
;;;8232   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
0055a8  20d7              MOVS     r0,#0xd7
0055aa  f7fffffe          BL       mess_find
0055ae  b1a0              CBZ      r0,|L1.21978|
0055b0  4868              LDR      r0,|L1.22356|
0055b2  6800              LDR      r0,[r0,#0]  ; mess_data
0055b4  28d9              CMP      r0,#0xd9
0055b6  d003              BEQ      |L1.21952|
0055b8  e00f              B        |L1.21978|
                  |L1.21946|
0055ba  f04f0600          MOV      r6,#0                 ;8227
0055be  e7f3              B        |L1.21928|
                  |L1.21952|
;;;8233   		{
;;;8234   		if(++uavt_bps_pntr>=NUMIST)
0055c0  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
0055c2  1c40              ADDS     r0,r0,#1
0055c4  b2c0              UXTB     r0,r0
0055c6  7038              STRB     r0,[r7,#0]
0055c8  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
0055cc  4288              CMP      r0,r1
0055ce  db04              BLT      |L1.21978|
;;;8235   			{
;;;8236   			uavt_set_stat=uassOFF;
0055d0  702c              STRB     r4,[r5,#0]
;;;8237   			uavt_set_result_stat=uasrsSUCCESS;
0055d2  4958              LDR      r1,|L1.22324|
0055d4  f04f0003          MOV      r0,#3
0055d8  7008              STRB     r0,[r1,#0]
                  |L1.21978|
;;;8238   			}
;;;8239   		//uavt_bps_pntr++;
;;;8240   		//if()
;;;8241   		}
;;;8242   	if(find_succes==1)
0055da  2e01              CMP      r6,#1
0055dc  d10f              BNE      |L1.22014|
;;;8243   		{
;;;8244   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
0055de  20ee              MOVS     r0,#0xee
0055e0  e9cd0400          STRD     r0,r4,[sp,#0]
0055e4  9402              STR      r4,[sp,#8]
0055e6  9403              STR      r4,[sp,#0xc]
0055e8  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
0055ea  4603              MOV      r3,r0
0055ec  2216              MOVS     r2,#0x16
0055ee  4608              MOV      r0,r1
0055f0  f7fffffe          BL       mcp2515_transmit
;;;8245   		avt_plazma++;
0055f4  4856              LDR      r0,|L1.22352|
0055f6  7801              LDRB     r1,[r0,#0]  ; avt_plazma
0055f8  f1010101          ADD      r1,r1,#1
0055fc  7001              STRB     r1,[r0,#0]
                  |L1.22014|
;;;8246   		}
;;;8247   	}
;;;8248   
;;;8249   
;;;8250   
;;;8251   uavt_set_stat_old=uavt_set_stat;
0055fe  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005600  f8880000          STRB     r0,[r8,#0]
;;;8252   
;;;8253   }
005604  e8bd9fff          POP      {r0-r12,pc}
;;;8254   
                          ENDP

                  u_necc_hndl PROC
;;;8329   //-----------------------------------------------
;;;8330   void u_necc_hndl(void)
005608  b5f8              PUSH     {r3-r7,lr}
;;;8331   {
;;;8332   signed long temp_L;
;;;8333   signed long temp_SL;
;;;8334   //signed short temp_SS;
;;;8335   
;;;8336   //char i;
;;;8337   
;;;8338   //temp_SS=0;
;;;8339   signed short t[2];
;;;8340   
;;;8341   
;;;8342   
;;;8343   
;;;8344   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8345   
;;;8346   if(!TERMOKOMPENS)
00560a  4853              LDR      r0,|L1.22360|
;;;8347   	{
;;;8348   	//u_necc=U0B;
;;;8349   	u_necc=UB20;
;;;8350   	}
;;;8351   else
;;;8352   	{
;;;8353   	if(ND_EXT[0])t[0]=20;
;;;8354   	else t[0]=t_ext[0];
;;;8355   
;;;8356   	mat_temper=t[0];
;;;8357   			
;;;8358   	if(mat_temper<0)temp_SL=UB0; 
;;;8359   	else 
;;;8360   		{
;;;8361   		if(mat_temper>40)mat_temper=40; 
;;;8362   		temp_SL=(UB20-UB0)*10;
;;;8363   		temp_SL*=mat_temper;
;;;8364   		temp_SL/=200;
;;;8365   		temp_SL+=UB0;
;;;8366   		}
;;;8367   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
00560c  4d55              LDR      r5,|L1.22372|
00560e  4c56              LDR      r4,|L1.22376|
005610  8801              LDRH     r1,[r0,#0]            ;8346  ; TERMOKOMPENS
005612  4852              LDR      r0,|L1.22364|
005614  f9b03000          LDRSH    r3,[r0,#0]            ;8349
;;;8368   		{
;;;8369   		temp_SL=UVZ;
005618  4851              LDR      r0,|L1.22368|
00561a  f9b02000          LDRSH    r2,[r0,#0]
00561e  b139              CBZ      r1,|L1.22064|
005620  4852              LDR      r0,|L1.22380|
005622  7800              LDRB     r0,[r0,#0]            ;8353  ; ND_EXT
005624  b130              CBZ      r0,|L1.22068|
005626  f04f0014          MOV      r0,#0x14              ;8353
00562a  f8ad0000          STRH     r0,[sp,#0]            ;8353
00562e  e005              B        |L1.22076|
                  |L1.22064|
005630  8023              STRH     r3,[r4,#0]            ;8349
005632  e02c              B        |L1.22158|
                  |L1.22068|
005634  484e              LDR      r0,|L1.22384|
005636  8800              LDRH     r0,[r0,#0]            ;8354  ; t_ext
005638  f8ad0000          STRH     r0,[sp,#0]            ;8354
                  |L1.22076|
00563c  4e4d              LDR      r6,|L1.22388|
00563e  f9bd1000          LDRSH    r1,[sp,#0]            ;8356
005642  6031              STR      r1,[r6,#0]            ;8356  ; mat_temper
005644  484c              LDR      r0,|L1.22392|
005646  2900              CMP      r1,#0                 ;8358
005648  f9b00000          LDRSH    r0,[r0,#0]            ;8358
00564c  db12              BLT      |L1.22132|
00564e  2928              CMP      r1,#0x28              ;8361
005650  dd02              BLE      |L1.22104|
005652  f04f0128          MOV      r1,#0x28              ;8361
005656  6031              STR      r1,[r6,#0]            ;8361  ; mat_temper
                  |L1.22104|
005658  eba30100          SUB      r1,r3,r0              ;8362
00565c  eb010181          ADD      r1,r1,r1,LSL #2       ;8362
005660  ea4f0141          LSL      r1,r1,#1              ;8362
005664  6833              LDR      r3,[r6,#0]            ;8363  ; mat_temper
005666  fb01f103          MUL      r1,r1,r3              ;8363
00566a  f04f03c8          MOV      r3,#0xc8              ;8364
00566e  fb91f1f3          SDIV     r1,r1,r3              ;8364
005672  4408              ADD      r0,r0,r1              ;8365
                  |L1.22132|
005674  f8951022          LDRB     r1,[r5,#0x22]         ;8367  ; spc_stat
005678  2902              CMP      r1,#2                 ;8367
00567a  d107              BNE      |L1.22156|
00567c  493f              LDR      r1,|L1.22396|
00567e  7809              LDRB     r1,[r1,#0]            ;8367  ; sk_stat
005680  2901              CMP      r1,#1                 ;8367
005682  d002              BEQ      |L1.22154|
005684  493e              LDR      r1,|L1.22400|
005686  8809              LDRH     r1,[r1,#0]            ;8367  ; VZ_CH_VENT_BLOK
005688  b901              CBNZ     r1,|L1.22156|
                  |L1.22154|
00568a  4610              MOV      r0,r2
                  |L1.22156|
;;;8370   		}
;;;8371   	u_necc=(unsigned int)temp_SL;
00568c  8020              STRH     r0,[r4,#0]
                  |L1.22158|
;;;8372   	///u_necc=3456;
;;;8373   	}  
;;;8374   
;;;8375   //u_necc=2355;
;;;8376   
;;;8377   if((speedChIsOn)||(sp_ch_stat==scsWRK))
00568e  483d              LDR      r0,|L1.22404|
005690  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005692  b918              CBNZ     r0,|L1.22172|
005694  483c              LDR      r0,|L1.22408|
005696  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005698  2802              CMP      r0,#2
00569a  d102              BNE      |L1.22178|
                  |L1.22172|
;;;8378   	{
;;;8379   	u_necc=speedChrgVolt;
00569c  483b              LDR      r0,|L1.22412|
00569e  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
0056a0  8020              STRH     r0,[r4,#0]
                  |L1.22178|
;;;8380   	}
;;;8381   if(hv_vz_stat==hvsWRK)
0056a2  483b              LDR      r0,|L1.22416|
0056a4  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
0056a6  2805              CMP      r0,#5
0056a8  d100              BNE      |L1.22188|
;;;8382   	{
;;;8383   	u_necc=UVZ;
0056aa  8022              STRH     r2,[r4,#0]
                  |L1.22188|
;;;8384   	}
;;;8385   if(vz1_stat==vz1sWRK)
0056ac  7968              LDRB     r0,[r5,#5]  ; vz1_stat
0056ae  280a              CMP      r0,#0xa
0056b0  d102              BNE      |L1.22200|
;;;8386   	{
;;;8387   	u_necc=UZ_U;
0056b2  4838              LDR      r0,|L1.22420|
0056b4  8800              LDRH     r0,[r0,#0]  ; UZ_U
0056b6  8020              STRH     r0,[r4,#0]
                  |L1.22200|
;;;8388   	}
;;;8389   if(vz2_stat==vz2sWRK1)
0056b8  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
0056ba  280a              CMP      r0,#0xa
0056bc  d102              BNE      |L1.22212|
;;;8390   	{
;;;8391   	u_necc=FZ_U1;
0056be  4936              LDR      r1,|L1.22424|
0056c0  8809              LDRH     r1,[r1,#0]  ; FZ_U1
0056c2  8021              STRH     r1,[r4,#0]
                  |L1.22212|
;;;8392   	}
;;;8393   if(vz2_stat==vz2sWRK2)
0056c4  280b              CMP      r0,#0xb
0056c6  d102              BNE      |L1.22222|
;;;8394   	{
;;;8395   	u_necc=FZ_U2;
0056c8  4834              LDR      r0,|L1.22428|
0056ca  8800              LDRH     r0,[r0,#0]  ; FZ_U2
0056cc  8020              STRH     r0,[r4,#0]
                  |L1.22222|
;;;8396   	}
;;;8397   
;;;8398   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
0056ce  4814              LDR      r0,|L1.22304|
0056d0  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
0056d2  2801              CMP      r0,#1
0056d4  d001              BEQ      |L1.22234|
0056d6  2802              CMP      r0,#2
0056d8  d102              BNE      |L1.22240|
                  |L1.22234|
;;;8399   	{
;;;8400   	u_necc=U_AVT;
0056da  4814              LDR      r0,|L1.22316|
0056dc  8800              LDRH     r0,[r0,#0]  ; U_AVT
0056de  8020              STRH     r0,[r4,#0]
                  |L1.22240|
;;;8401   	}
;;;8402   
;;;8403   if(mess_find_unvol(MESS2UNECC_HNDL))
0056e0  20be              MOVS     r0,#0xbe
0056e2  f7fffffe          BL       mess_find_unvol
0056e6  b128              CBZ      r0,|L1.22260|
;;;8404   	{		
;;;8405   	if(mess_data[0]==PARAM_UNECC_SET)
0056e8  481a              LDR      r0,|L1.22356|
0056ea  6801              LDR      r1,[r0,#0]  ; mess_data
0056ec  29bf              CMP      r1,#0xbf
0056ee  d101              BNE      |L1.22260|
;;;8406   		{
;;;8407   		u_necc=mess_data[1];
0056f0  6840              LDR      r0,[r0,#4]  ; mess_data
0056f2  8020              STRH     r0,[r4,#0]
                  |L1.22260|
;;;8408   		}		
;;;8409   	} 
;;;8410   
;;;8411   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8412   #endif
;;;8413   
;;;8414   
;;;8415   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8416   
;;;8417   #ifndef UKU_TELECORE2015
;;;8418   #ifndef UKU_TELECORE2017
;;;8419   if(unh_cnt0<10)
;;;8420   	{
;;;8421   	unh_cnt0++;
;;;8422   	if(unh_cnt0>=10)
;;;8423   		{
;;;8424   		unh_cnt0=0;
;;;8425   		b1Hz_unh=1;
;;;8426   		}
;;;8427   	}
;;;8428   
;;;8429   if(unh_cnt1<5)
;;;8430   	{
;;;8431   	unh_cnt1++;
;;;8432   	if(unh_cnt1==5)
;;;8433   		{
;;;8434   		unh_cnt1=0;
;;;8435   //		b2Hz_unh=1;
;;;8436   		}
;;;8437   	} 
;;;8438   
;;;8439   
;;;8440   
;;;8441   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8442   	{		
;;;8443   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8444   		{
;;;8445   		u_necc=mess_data[1];
;;;8446   		}		
;;;8447   	}
;;;8448   
;;;8449   
;;;8450   else if(b1Hz_unh)
;;;8451   	{
;;;8452   	
;;;8453   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8454   		{
;;;8455   		
;;;8456   		u_necc=U0B;
;;;8457   		#ifdef IPS_SGEP_GAZPROM
;;;8458   		u_necc=UB0;
;;;8459   		#endif
;;;8460   		}
;;;8461   	else 
;;;8462   		{
;;;8463   		if(BAT_TYPE==0) //если батарея обычная
;;;8464   			{
;;;8465   			for(i=0;i<2;i++)
;;;8466   				{
;;;8467   				if(BAT_IS_ON[i]==bisON)
;;;8468   					{
;;;8469   					if(bat[i]._nd)t[i]=20;
;;;8470   					else t[i]=bat[i]._Tb;
;;;8471   					}
;;;8472   				else
;;;8473   					{
;;;8474   					t[i]=-20;
;;;8475   					}
;;;8476   				}
;;;8477   			if(t[0]>t[1])mat_temper=t[0];
;;;8478   			else mat_temper=t[1];
;;;8479   			
;;;8480   		
;;;8481   			if(mat_temper<0)temp_SL=UB0; 
;;;8482   			else 
;;;8483   				{
;;;8484   				if(mat_temper>40)mat_temper=40; 
;;;8485   				temp_SL=(UB20-UB0)*10;
;;;8486   				temp_SL*=mat_temper;
;;;8487   				temp_SL/=200;
;;;8488   				temp_SL+=UB0;
;;;8489   				}
;;;8490   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8491   				{
;;;8492   				temp_SL=UVZ;
;;;8493   				}
;;;8494   			u_necc=(unsigned int)temp_SL;
;;;8495   			}
;;;8496   		else if(BAT_TYPE==1) //если батарея китайская
;;;8497   			{
;;;8498   			u_necc=U0B;
;;;8499   					
;;;8500   			u_necc=bat[0]._Ub+10;
;;;8501   
;;;8502   			
;;;8503   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8504   				{
;;;8505   				u_necc=UVZ;
;;;8506   				}
;;;8507   			if(u_necc>=UB0) u_necc=UB0;
;;;8508   			if(u_necc>=UB20) u_necc=UB20;
;;;8509   			}
;;;8510   		}  
;;;8511   	}
;;;8512   #endif
;;;8513   #endif
;;;8514   
;;;8515   #ifdef UKU_TELECORE2015
;;;8516   
;;;8517   if(unh_cnt0<10)
;;;8518   	{
;;;8519   	unh_cnt0++;
;;;8520   	if(unh_cnt0>=10)
;;;8521   		{
;;;8522   		unh_cnt0=0;
;;;8523   		b1Hz_unh=1;
;;;8524   		}
;;;8525   	}
;;;8526   
;;;8527   if(unh_cnt1<5)
;;;8528   	{
;;;8529   	unh_cnt1++;
;;;8530   	if(unh_cnt1==5)
;;;8531   		{
;;;8532   		unh_cnt1=0;
;;;8533   //		b2Hz_unh=1;
;;;8534   		}
;;;8535   	} 
;;;8536   
;;;8537   
;;;8538   
;;;8539   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8540   	{		
;;;8541   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8542   		{
;;;8543   		u_necc=mess_data[1];
;;;8544   		}		
;;;8545   	}
;;;8546   
;;;8547   
;;;8548   else if(b1Hz_unh)
;;;8549   	{
;;;8550   	b1Hz_unh=0;
;;;8551   
;;;8552   	if(BAT_TYPE==0)
;;;8553   		{
;;;8554   		if(bat[0]._nd)mat_temper=20;
;;;8555   		else mat_temper=bat[0]._Tb;
;;;8556   
;;;8557   			
;;;8558   		if(mat_temper<0)temp_SL=UB0; 
;;;8559   		else 
;;;8560   			{
;;;8561   			if(mat_temper>40)mat_temper=40; 
;;;8562   			temp_SL=(UB20-UB0)*10;
;;;8563   			temp_SL*=mat_temper;
;;;8564   			temp_SL/=200;
;;;8565   			temp_SL+=UB0;
;;;8566   			}
;;;8567   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8568   			{
;;;8569   			temp_SL=UVZ;
;;;8570   			}
;;;8571   		u_necc=(unsigned int)temp_SL;
;;;8572   	///u_necc=3456;
;;;8573   		}
;;;8574   	else if(BAT_TYPE==1)
;;;8575   		{
;;;8576   		
;;;8577   		gran(&DU_LI_BAT,1,30);
;;;8578   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8579   		gran(&u_necc,0,UB0);
;;;8580   		gran(&u_necc,0,UB20);
;;;8581   		gran(&u_necc,0,540);		
;;;8582   
;;;8583   
;;;8584   		if(li_bat._batStat!=bsOK)
;;;8585   			{
;;;8586   			u_necc=U0B;
;;;8587   			}
;;;8588   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8589   			{
;;;8590   			u_necc=UVZ;
;;;8591   			}
;;;8592   		/* 
;;;8593   		u_necc=U0B;
;;;8594   		
;;;8595   
;;;8596   	
;;;8597   		u_necc=UB0;
;;;8598   		u_necc=li_bat._Ub+10;
;;;8599   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8600   			{
;;;8601   			lakb_error_cnt++;
;;;8602   			if(lakb_error_cnt>=30)
;;;8603   				{
;;;8604   				lakb_error_cnt=30;
;;;8605   				u_necc=U0B;
;;;8606   				}
;;;8607   			}
;;;8608   		else lakb_error_cnt=0;*/
;;;8609   		}
;;;8610   	else if(BAT_TYPE==2)
;;;8611   		{
;;;8612   		u_necc=U0B;
;;;8613   		
;;;8614   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8615   			{
;;;8616   			u_necc=UVZ;
;;;8617   			}
;;;8618   	
;;;8619   		u_necc=UB0;
;;;8620   		}
;;;8621   
;;;8622   	else if(BAT_TYPE==3)
;;;8623   		{
;;;8624   		u_necc=U0B;
;;;8625   		
;;;8626   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8627   			{
;;;8628   			u_necc=UVZ;
;;;8629   			}
;;;8630   
;;;8631   		gran(&DU_LI_BAT,1,30);
;;;8632   
;;;8633   
;;;8634   		if(lakbNotErrorNum==0)
;;;8635   			{
;;;8636   			u_necc=U0B;
;;;8637   			}
;;;8638   		else 
;;;8639   			{
;;;8640   			signed short i;
;;;8641   			//signed short u_necc_max;
;;;8642   			//u_necc_max=0;
;;;8643   			char soc_flag=0;
;;;8644   
;;;8645   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8646   				{
;;;8647   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8648   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8649   				}
;;;8650   
;;;8651   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8652   			}
;;;8653   		gran(&u_necc,0,UB0);
;;;8654   		//gran(&u_necc,0,UB20);
;;;8655   		gran(&u_necc,0,540);
;;;8656   		}
;;;8657   	}
;;;8658   
;;;8659   #endif 
;;;8660   
;;;8661   #ifdef UKU_TELECORE2017
;;;8662   
;;;8663   if(unh_cnt0<10)
;;;8664   	{
;;;8665   	unh_cnt0++;
;;;8666   	if(unh_cnt0>=10)
;;;8667   		{
;;;8668   		unh_cnt0=0;
;;;8669   		b1Hz_unh=1;
;;;8670   		}
;;;8671   	}
;;;8672   
;;;8673   if(unh_cnt1<5)
;;;8674   	{
;;;8675   	unh_cnt1++;
;;;8676   	if(unh_cnt1==5)
;;;8677   		{
;;;8678   		unh_cnt1=0;
;;;8679   //		b2Hz_unh=1;
;;;8680   		}
;;;8681   	} 
;;;8682   
;;;8683   
;;;8684   
;;;8685   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8686   	{		
;;;8687   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8688   		{
;;;8689   		u_necc=mess_data[1];
;;;8690   		}		
;;;8691   	}
;;;8692   
;;;8693   
;;;8694   else if(b1Hz_unh)
;;;8695   	{
;;;8696   	b1Hz_unh=0;
;;;8697   
;;;8698   	if(BAT_TYPE==0)
;;;8699   		{
;;;8700   		if(bat[0]._nd)mat_temper=20;
;;;8701   		else mat_temper=bat[0]._Tb;
;;;8702   
;;;8703   			
;;;8704   		if(mat_temper<0)temp_SL=UB0; 
;;;8705   		else 
;;;8706   			{
;;;8707   			if(mat_temper>40)mat_temper=40; 
;;;8708   			temp_SL=(UB20-UB0)*10;
;;;8709   			temp_SL*=mat_temper;
;;;8710   			temp_SL/=200;
;;;8711   			temp_SL+=UB0;
;;;8712   			}
;;;8713   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8714   			{
;;;8715   			temp_SL=UVZ;
;;;8716   			}
;;;8717   		u_necc=(unsigned int)temp_SL;
;;;8718   	///u_necc=3456;
;;;8719   		}
;;;8720   	else if(BAT_TYPE==1)
;;;8721   		{
;;;8722   		
;;;8723   		gran(&DU_LI_BAT,1,30);
;;;8724   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8725   		gran(&u_necc,0,UB0);
;;;8726   		gran(&u_necc,0,UB20);
;;;8727   		gran(&u_necc,0,540);		
;;;8728   
;;;8729   
;;;8730   		if(li_bat._batStat!=bsOK)
;;;8731   			{
;;;8732   			u_necc=U0B;
;;;8733   			}
;;;8734   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8735   			{
;;;8736   			u_necc=UVZ;
;;;8737   			}
;;;8738   		}
;;;8739   	else if(BAT_TYPE==2)
;;;8740   		{
;;;8741   		u_necc=U0B;
;;;8742   		
;;;8743   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8744   			{
;;;8745   			u_necc=UVZ;
;;;8746   			}
;;;8747   	
;;;8748   		u_necc=UB0;
;;;8749   		}
;;;8750   
;;;8751   	else if(BAT_TYPE==3)
;;;8752   		{
;;;8753   		u_necc=U0B;
;;;8754   		
;;;8755   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8756   			{
;;;8757   			u_necc=UVZ;
;;;8758   			}
;;;8759   
;;;8760   		gran(&DU_LI_BAT,1,30);
;;;8761   
;;;8762   
;;;8763   		if(lakbNotErrorNum==0)
;;;8764   			{
;;;8765   			u_necc=U0B;
;;;8766   			}
;;;8767   		else 
;;;8768   			{
;;;8769   			signed short i;
;;;8770   			//signed short u_necc_max;
;;;8771   			//u_necc_max=0;
;;;8772   			char soc_flag=0;
;;;8773   
;;;8774   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8775   				{
;;;8776   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8777   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8778   				}
;;;8779   
;;;8780   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8781   			}
;;;8782   		gran(&u_necc,0,UB0);
;;;8783   		//gran(&u_necc,0,UB20);
;;;8784   		gran(&u_necc,0,540);
;;;8785   		}
;;;8786   	}
;;;8787   
;;;8788   #endif 
;;;8789   //u_necc=2356;
;;;8790   
;;;8791   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;8792   	{
;;;8793   	u_necc=speedChrgVolt;
;;;8794   	}
;;;8795   #endif//gran(&u_necc,400,UMAX);
;;;8796   
;;;8797   
;;;8798   
;;;8799   temp_L=(signed long) u_necc;
0056f4  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;8800   temp_L*=98L;
0056f8  f04f0162          MOV      r1,#0x62
0056fc  fb00f101          MUL      r1,r0,r1
;;;8801   temp_L/=100L;
005700  e04e              B        |L1.22432|
005702  0000              DCW      0x0000
                  |L1.22276|
                          DCD      0xfff0bdc0
                  |L1.22280|
                          DCD      Ib_ips_termokompensat
                  |L1.22284|
                          DCD      IKB
                  |L1.22288|
                          DCD      bat
                  |L1.22292|
                          DCD      out_U
                  |L1.22296|
                          DCD      u_necc_up
                  |L1.22300|
                          DCD      u_necc_dn
                  |L1.22304|
                          DCD      uavt_set_stat
                  |L1.22308|
                          DCD      uavt_set_error_cnt
                  |L1.22312|
                          DCD      uavt_set_stat_old
                  |L1.22316|
                          DCD      U_AVT
                  |L1.22320|
                          DCD      bps_U
                  |L1.22324|
                          DCD      uavt_set_result_stat
                  |L1.22328|
                          DCD      avt_error_bps
                  |L1.22332|
                          DCD      u_max_temp
                  |L1.22336|
                          DCD      u_min_temp
                  |L1.22340|
                          DCD      uavt_bps_pntr
                  |L1.22344|
                          DCD      bps
                  |L1.22348|
                          DCD      NUMIST
                  |L1.22352|
                          DCD      avt_plazma
                  |L1.22356|
                          DCD      mess_data
                  |L1.22360|
                          DCD      TERMOKOMPENS
                  |L1.22364|
                          DCD      UB20
                  |L1.22368|
                          DCD      UVZ
                  |L1.22372|
                          DCD      ||area_number.25||
                  |L1.22376|
                          DCD      u_necc
                  |L1.22380|
                          DCD      ND_EXT
                  |L1.22384|
                          DCD      t_ext
                  |L1.22388|
                          DCD      mat_temper
                  |L1.22392|
                          DCD      UB0
                  |L1.22396|
                          DCD      sk_stat
                  |L1.22400|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.22404|
                          DCD      speedChIsOn
                  |L1.22408|
                          DCD      sp_ch_stat
                  |L1.22412|
                          DCD      speedChrgVolt
                  |L1.22416|
                          DCD      hv_vz_stat
                  |L1.22420|
                          DCD      UZ_U
                  |L1.22424|
                          DCD      FZ_U1
                  |L1.22428|
                          DCD      FZ_U2
                  |L1.22432|
0057a0  f04f0264          MOV      r2,#0x64
0057a4  fb91f1f2          SDIV     r1,r1,r2
;;;8802   u_necc_dn=(signed short)temp_L;
0057a8  4bfb              LDR      r3,|L1.23448|
0057aa  8019              STRH     r1,[r3,#0]
;;;8803   
;;;8804   temp_L=(signed long) u_necc;
;;;8805   temp_L*=102L;
0057ac  f04f0166          MOV      r1,#0x66
0057b0  fb00f001          MUL      r0,r0,r1
;;;8806   temp_L/=100L;
0057b4  fb90f0f2          SDIV     r0,r0,r2
;;;8807   u_necc_up=(signed short)temp_L;
0057b8  49f8              LDR      r1,|L1.23452|
0057ba  8008              STRH     r0,[r1,#0]
;;;8808   /*
;;;8809   #ifdef IPS_SGEP_GAZPROM
;;;8810   u_necc=248;
;;;8811   #endif */
;;;8812   }
0057bc  bdf8              POP      {r3-r7,pc}
;;;8813   
                          ENDP

                  num_necc_hndl PROC
;;;8815   //-----------------------------------------------
;;;8816   void num_necc_hndl(void)
0057be  e92d41f0          PUSH     {r4-r8,lr}
;;;8817   {
;;;8818   
;;;8819   static short num_necc_block_cnt;
;;;8820   if(num_necc_block_cnt) num_necc_block_cnt--;
0057c2  4cf7              LDR      r4,|L1.23456|
0057c4  f9b40036          LDRSH    r0,[r4,#0x36]  ; num_necc_block_cnt
0057c8  b110              CBZ      r0,|L1.22480|
0057ca  f1a00001          SUB      r0,r0,#1
0057ce  86e0              STRH     r0,[r4,#0x36]
                  |L1.22480|
;;;8821   
;;;8822   Isumm_=Isumm;
0057d0  48f4              LDR      r0,|L1.23460|
0057d2  4df5              LDR      r5,|L1.23464|
0057d4  8800              LDRH     r0,[r0,#0]  ; Isumm
0057d6  8028              STRH     r0,[r5,#0]
;;;8823   
;;;8824   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
0057d8  4ef4              LDR      r6,|L1.23468|
0057da  270a              MOVS     r7,#0xa
0057dc  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0057e0  2800              CMP      r0,#0
0057e2  da06              BGE      |L1.22514|
0057e4  f7fffffe          BL       abs
0057e8  fb90f0f7          SDIV     r0,r0,r7
0057ec  8829              LDRH     r1,[r5,#0]  ; Isumm_
0057ee  4408              ADD      r0,r0,r1
0057f0  8028              STRH     r0,[r5,#0]
                  |L1.22514|
;;;8825   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
0057f2  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0057f6  2800              CMP      r0,#0
0057f8  da06              BGE      |L1.22536|
0057fa  f7fffffe          BL       abs
0057fe  fb90f0f7          SDIV     r0,r0,r7
005802  8829              LDRH     r1,[r5,#0]  ; Isumm_
005804  4408              ADD      r0,r0,r1
005806  8028              STRH     r0,[r5,#0]
                  |L1.22536|
;;;8826   
;;;8827   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005808  49e9              LDR      r1,|L1.23472|
00580a  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
00580e  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005812  fb90f1f1          SDIV     r1,r0,r1
005816  f1010101          ADD      r1,r1,#1
00581a  b2c9              UXTB     r1,r1
00581c  77a1              STRB     r1,[r4,#0x1e]
;;;8828   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;8829   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;8830   
;;;8831   num_necc_down=(Isumm_/((signed short)IMIN))+1;
00581e  4ae5              LDR      r2,|L1.23476|
005820  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005824  fb90f0f2          SDIV     r0,r0,r2
005828  f1000001          ADD      r0,r0,#1
00582c  b2c2              UXTB     r2,r0
00582e  77e2              STRB     r2,[r4,#0x1f]
;;;8832   
;;;8833   if(num_necc_up>num_necc)
005830  48e1              LDR      r0,|L1.23480|
;;;8834   	{
;;;8835   	num_necc=num_necc_up;
;;;8836   	num_necc_block_cnt=60;
005832  f04f053c          MOV      r5,#0x3c
005836  f9b03000          LDRSH    r3,[r0,#0]            ;8833  ; num_necc
00583a  4299              CMP      r1,r3                 ;8833
00583c  dd02              BLE      |L1.22596|
00583e  8001              STRH     r1,[r0,#0]            ;8835
005840  86e5              STRH     r5,[r4,#0x36]
005842  e005              B        |L1.22608|
                  |L1.22596|
;;;8837   	}
;;;8838   else if(num_necc_down<num_necc)
005844  429a              CMP      r2,r3
005846  da03              BGE      |L1.22608|
;;;8839   	{
;;;8840   	if(!num_necc_block_cnt)
005848  8ee1              LDRH     r1,[r4,#0x36]  ; num_necc_block_cnt
00584a  b909              CBNZ     r1,|L1.22608|
;;;8841   		{
;;;8842   		num_necc=num_necc_down;
00584c  8002              STRH     r2,[r0,#0]
;;;8843   		num_necc_block_cnt=60;
00584e  86e5              STRH     r5,[r4,#0x36]
                  |L1.22608|
;;;8844   		}
;;;8845   	}
;;;8846   
;;;8847   if(PAR) num_necc=NUMIST;
005850  49da              LDR      r1,|L1.23484|
005852  880a              LDRH     r2,[r1,#0]  ; PAR
005854  49da              LDR      r1,|L1.23488|
005856  b10a              CBZ      r2,|L1.22620|
005858  880a              LDRH     r2,[r1,#0]  ; NUMIST
00585a  8002              STRH     r2,[r0,#0]
                  |L1.22620|
;;;8848   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8849   if(bPARALLEL) num_necc=NUMIST;
00585c  f894202c          LDRB     r2,[r4,#0x2c]  ; bPARALLEL
005860  b10a              CBZ      r2,|L1.22630|
005862  880a              LDRH     r2,[r1,#0]  ; NUMIST
005864  8002              STRH     r2,[r0,#0]
                  |L1.22630|
;;;8850   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005866  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005868  2a0a              CMP      r2,#0xa
00586a  d101              BNE      |L1.22640|
00586c  880a              LDRH     r2,[r1,#0]  ; NUMIST
00586e  8002              STRH     r2,[r0,#0]
                  |L1.22640|
;;;8851   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005870  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005872  2a0a              CMP      r2,#0xa
005874  d001              BEQ      |L1.22650|
005876  2a0b              CMP      r2,#0xb
005878  d101              BNE      |L1.22654|
                  |L1.22650|
00587a  880a              LDRH     r2,[r1,#0]  ; NUMIST
00587c  8002              STRH     r2,[r0,#0]
                  |L1.22654|
;;;8852   #endif
;;;8853   
;;;8854   gran(&num_necc,1,NUMIST);
00587e  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005882  e8bd41f0          POP      {r4-r8,lr}
005886  2101              MOVS     r1,#1
005888  48cb              LDR      r0,|L1.23480|
00588a  f7ffbffe          B.W      gran
;;;8855   
;;;8856   }
;;;8857   
                          ENDP

                  cntrl_hndl PROC
;;;8860   //-----------------------------------------------
;;;8861   void cntrl_hndl(void)
00588e  e92d5ff0          PUSH     {r4-r12,lr}
;;;8862   {
;;;8863   
;;;8864   
;;;8865   
;;;8866   IZMAX_=IZMAX;
005892  48cc              LDR      r0,|L1.23492|
005894  4cc2              LDR      r4,|L1.23456|
005896  8800              LDRH     r0,[r0,#0]  ; IZMAX
005898  f8a4004a          STRH     r0,[r4,#0x4a]
;;;8867   
;;;8868   //cntrl_hndl_plazma=10;
;;;8869   
;;;8870   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
00589c  48ca              LDR      r0,|L1.23496|
00589e  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
0058a0  b918              CBNZ     r0,|L1.22698|
0058a2  48ca              LDR      r0,|L1.23500|
0058a4  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
0058a6  2802              CMP      r0,#2
0058a8  d103              BNE      |L1.22706|
                  |L1.22698|
0058aa  48c9              LDR      r0,|L1.23504|
0058ac  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
0058ae  f8a4004a          STRH     r0,[r4,#0x4a]
                  |L1.22706|
;;;8871   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
0058b2  7960              LDRB     r0,[r4,#5]  ; vz1_stat
0058b4  280a              CMP      r0,#0xa
0058b6  d103              BNE      |L1.22720|
0058b8  48c6              LDR      r0,|L1.23508|
0058ba  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
0058bc  f8a4004a          STRH     r0,[r4,#0x4a]
                  |L1.22720|
;;;8872   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
0058c0  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
0058c2  280a              CMP      r0,#0xa
0058c4  d103              BNE      |L1.22734|
0058c6  49c4              LDR      r1,|L1.23512|
0058c8  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
0058ca  f8a4104a          STRH     r1,[r4,#0x4a]
                  |L1.22734|
;;;8873   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
0058ce  280b              CMP      r0,#0xb
0058d0  d103              BNE      |L1.22746|
0058d2  48c2              LDR      r0,|L1.23516|
0058d4  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
0058d6  f8a4004a          STRH     r0,[r4,#0x4a]
                  |L1.22746|
;;;8874   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;8875   
;;;8876   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
0058da  f9b40072          LDRSH    r0,[r4,#0x72]  ; cntrl_stat_blok_cnt
0058de  b118              CBZ      r0,|L1.22760|
0058e0  f1a00001          SUB      r0,r0,#1
0058e4  f8a40072          STRH     r0,[r4,#0x72]
                  |L1.22760|
;;;8877   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
0058e8  f9b40074          LDRSH    r0,[r4,#0x74]  ; cntrl_stat_blok_cnt_
0058ec  b118              CBZ      r0,|L1.22774|
0058ee  f1a00001          SUB      r0,r0,#1
0058f2  f8a40074          STRH     r0,[r4,#0x74]
                  |L1.22774|
;;;8878   
;;;8879   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
0058f6  48ad              LDR      r0,|L1.23468|
0058f8  f04f080a          MOV      r8,#0xa               ;8871
0058fc  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005900  0789              LSLS     r1,r1,#30
005902  d103              BNE      |L1.22796|
005904  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005908  0780              LSLS     r0,r0,#30
00590a  d005              BEQ      |L1.22808|
                  |L1.22796|
00590c  f8b4004a          LDRH     r0,[r4,#0x4a]  ; IZMAX_
005910  fbb0f0f8          UDIV     r0,r0,r8
005914  f8a4004a          STRH     r0,[r4,#0x4a]
                  |L1.22808|
;;;8880   
;;;8881   
;;;8882   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8883   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005918  48b1              LDR      r0,|L1.23520|
00591a  2601              MOVS     r6,#1
00591c  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005920  1e49              SUBS     r1,r1,#1
005922  2905              CMP      r1,#5
005924  d300              BCC      |L1.22824|
005926  8006              STRH     r6,[r0,#0]
                  |L1.22824|
;;;8884   if(ch_cnt0<(10*REG_SPEED))
005928  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
00592c  7d61              LDRB     r1,[r4,#0x15]  ; ch_cnt0
00592e  eb000080          ADD      r0,r0,r0,LSL #2
005932  2500              MOVS     r5,#0                 ;8870
005934  ebb10f40          CMP      r1,r0,LSL #1
005938  da08              BGE      |L1.22860|
;;;8885   	{
;;;8886   	ch_cnt0++;
00593a  f1010101          ADD      r1,r1,#1
00593e  b2c9              UXTB     r1,r1
005940  7561              STRB     r1,[r4,#0x15]
;;;8887   	if(ch_cnt0>=10*REG_SPEED)
005942  ebb10f40          CMP      r1,r0,LSL #1
005946  db01              BLT      |L1.22860|
;;;8888   		{
;;;8889   		ch_cnt0=0;
005948  7565              STRB     r5,[r4,#0x15]
;;;8890   		b1Hz_ch=1;
00594a  75a6              STRB     r6,[r4,#0x16]
                  |L1.22860|
;;;8891   		}
;;;8892   	}
;;;8893   #endif
;;;8894   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8895   if(ch_cnt0<10)
;;;8896   	{
;;;8897   	ch_cnt0++;
;;;8898   	if(ch_cnt0>=10)
;;;8899   		{
;;;8900   		ch_cnt0=0;
;;;8901   		b1Hz_ch=1;
;;;8902   		}
;;;8903   	}
;;;8904   #endif
;;;8905   
;;;8906   
;;;8907   if(mess_find_unvol(MESS2CNTRL_HNDL))
00594c  20e1              MOVS     r0,#0xe1
00594e  f7fffffe          BL       mess_find_unvol
;;;8908   	{
;;;8909   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;8910   		{
;;;8911   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;8912   		}
;;;8913   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;8914   		{
;;;8915   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;8916   		}
;;;8917   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;8918   		{
;;;8919   		static char cntrlStatIsDownCnt;
;;;8920   		cntrl_stat--;
;;;8921   
;;;8922   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;8923   			{
;;;8924   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;8925   			}
;;;8926   		else 
;;;8927   			{
;;;8928   			cntrlStatIsDownCnt=0;
;;;8929   			}
;;;8930   
;;;8931   		}
;;;8932   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;8933   		{
;;;8934   		cntrl_stat/*_new*/=mess_data[1];
;;;8935   		}
;;;8936   
;;;8937   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;8938   		{
;;;8939   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8940   		if(bps_U>u_necc)
005952  f8dfc290          LDR      r12,|L1.23524|
005956  4aa4              LDR      r2,|L1.23528|
;;;8941   			{
;;;8942   			cntrl_hndl_plazma=11;
;;;8943   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8944   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8945   			}
;;;8946   		else if(bps_U<u_necc)
;;;8947   			{
;;;8948   			cntrl_hndl_plazma=12;	
;;;8949   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8950   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8951   			}
;;;8952   		#elif defined(UKU_220)
;;;8953   		if(load_U>u_necc)
;;;8954   			{
;;;8955   			cntrl_hndl_plazma=13;
;;;8956   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8957   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8958   			}
;;;8959   		else if(load_U<u_necc)
;;;8960   			{
;;;8961   			cntrl_hndl_plazma=14;	
;;;8962   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8963   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8964   			}
;;;8965   		#elif defined(UKU_220_V2)
;;;8966   		if(load_U>u_necc)
;;;8967   			{
;;;8968   			cntrl_hndl_plazma=15;
;;;8969   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8970   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8971   			}
;;;8972   		else if(load_U<u_necc)
;;;8973   			{
;;;8974   			cntrl_hndl_plazma=16;	
;;;8975   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8976   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8977   			}
;;;8978   		#else
;;;8979   
;;;8980   		if(load_U>u_necc)
;;;8981   			{
;;;8982   			cntrl_hndl_plazma=17;
;;;8983   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8984   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8985   			}
;;;8986   		else if(load_U<u_necc)
;;;8987   			{
;;;8988   			cntrl_hndl_plazma=18;	
;;;8989   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8990   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8991   			}
;;;8992   		#endif	
;;;8993   	 	}
;;;8994   
;;;8995   	/*gran(&cntrl_stat_new,10,1010);			
;;;8996   	cntrl_stat_old=cntrl_stat_new;
;;;8997   	cntrl_stat=cntrl_stat_new;*/
;;;8998   	}
;;;8999   
;;;9000   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9001   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005958  f8df9290          LDR      r9,|L1.23532|
;;;9002   	{
;;;9003   	cntrl_stat_new=cntrl_stat_old;
;;;9004   	cntrl_hndl_plazma=19;
;;;9005   	if((Ibmax/10)>(2*IZMAX_))
;;;9006   		{
;;;9007   		cntrl_hndl_plazma=20;
;;;9008             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9009   		else	cntrl_stat_new-=10;
;;;9010   		}		
;;;9011   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9012   		{
;;;9013   		cntrl_hndl_plazma=21;
;;;9014             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9015             else	cntrl_stat_new-=3;
;;;9016   		}   
;;;9017   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9018   		{
;;;9019   		cntrl_hndl_plazma=22;
;;;9020   		cntrl_stat_new--;
;;;9021   		}
;;;9022   		
;;;9023   	else if(bps_U<u_necc)
;;;9024   		{
;;;9025   		cntrl_hndl_plazma=23;
;;;9026   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9027   			{
;;;9028   			cntrl_hndl_plazma=24;
;;;9029   			if(Ibmax<0)
;;;9030   				{
;;;9031   				cntrl_hndl_plazma=25;
;;;9032                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9033   				else cntrl_stat_new+=10;
;;;9034   				}
;;;9035   			else if(Ibmax<(IZMAX_*5))
;;;9036   				{
;;;9037   				cntrl_hndl_plazma=26;
;;;9038                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9039   				else	cntrl_stat_new+=2;
;;;9040   				}
;;;9041   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9042   				{
;;;9043   				cntrl_hndl_plazma=27;
;;;9044   				cntrl_stat_new++;
;;;9045   				}					
;;;9046   			}
;;;9047   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9048   			{
;;;9049   			cntrl_hndl_plazma=28;
;;;9050   			if(Ibmax<(IZMAX_*5))
;;;9051   				{
;;;9052   				cntrl_hndl_plazma=29;
;;;9053                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9054   				else	cntrl_stat_new+=2;
;;;9055   				}
;;;9056   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9057   				{
;;;9058   				cntrl_hndl_plazma=30;
;;;9059   				cntrl_stat_new++;
;;;9060   				}					
;;;9061   			}	
;;;9062   		else if(bps_U<(u_necc-1))
;;;9063   			{
;;;9064   			cntrl_hndl_plazma=31;
;;;9065   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9066   				{
;;;9067   				cntrl_hndl_plazma=32;
;;;9068   				cntrl_stat_new++;
;;;9069   				}					
;;;9070   			}					
;;;9071   		}	
;;;9072   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9073   		{ 	
;;;9074   		cntrl_hndl_plazma=33;
;;;9075   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9076   			{
;;;9077   			cntrl_hndl_plazma=34;
;;;9078                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9079   			else	cntrl_stat_new-=10;
;;;9080   			}
;;;9081   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9082   			{
;;;9083   			cntrl_hndl_plazma=35;
;;;9084                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9085   			else cntrl_stat_new-=2;
;;;9086   			}	
;;;9087   		else if(bps_U>(u_necc+1))
;;;9088   			{
;;;9089   			cntrl_hndl_plazma=36;
;;;9090   			cntrl_stat_new--;
;;;9091   			}					
;;;9092   		}
;;;9093   
;;;9094   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9095   		{
;;;9096   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9097   		}
;;;9098   
;;;9099   	gran(&cntrl_stat_new,10,1010);			
;;;9100   	cntrl_stat_old=cntrl_stat_new;
;;;9101   	cntrl_stat=cntrl_stat_new;
;;;9102   	
;;;9103   	if(ICA_EN==0)
;;;9104   		{
;;;9105   		if(ica_cntrl_hndl_cnt)
00595c  4fa4              LDR      r7,|L1.23536|
00595e  b398              CBZ      r0,|L1.22984|
005960  49a4              LDR      r1,|L1.23540|
005962  6808              LDR      r0,[r1,#0]            ;8909  ; mess_data
005964  2864              CMP      r0,#0x64              ;8909
005966  d008              BEQ      |L1.22906|
005968  2869              CMP      r0,#0x69              ;8913
00596a  d00b              BEQ      |L1.22916|
00596c  286e              CMP      r0,#0x6e              ;8917
00596e  d00f              BEQ      |L1.22928|
005970  28e5              CMP      r0,#0xe5              ;8932
005972  d02c              BEQ      |L1.22990|
005974  28e6              CMP      r0,#0xe6              ;8937
005976  d02d              BEQ      |L1.22996|
                  |L1.22904|
005978  e205              B        |L1.23942|
                  |L1.22906|
00597a  6848              LDR      r0,[r1,#4]            ;8911  ; mess_data
00597c  8e61              LDRH     r1,[r4,#0x32]         ;8911  ; cntrl_stat_old
00597e  4408              ADD      r0,r0,r1              ;8911
005980  8620              STRH     r0,[r4,#0x30]         ;8911
005982  e200              B        |L1.23942|
                  |L1.22916|
005984  6848              LDR      r0,[r1,#4]            ;8915  ; mess_data
005986  8e61              LDRH     r1,[r4,#0x32]         ;8915  ; cntrl_stat_old
005988  eba10000          SUB      r0,r1,r0              ;8915
00598c  8620              STRH     r0,[r4,#0x30]         ;8915
00598e  e1fa              B        |L1.23942|
                  |L1.22928|
005990  8e20              LDRH     r0,[r4,#0x30]         ;8920  ; cntrl_stat
005992  f1a00001          SUB      r0,r0,#1              ;8920
005996  b200              SXTH     r0,r0                 ;8920
005998  8620              STRH     r0,[r4,#0x30]         ;8920
00599a  281e              CMP      r0,#0x1e              ;8922
00599c  dd07              BLE      |L1.22958|
00599e  4896              LDR      r0,|L1.23544|
0059a0  4996              LDR      r1,|L1.23548|
0059a2  f9b00000          LDRSH    r0,[r0,#0]            ;8922  ; load_U
0059a6  f9b11000          LDRSH    r1,[r1,#0]            ;8922  ; USIGN
0059aa  4288              CMP      r0,r1                 ;8922
0059ac  da0d              BGE      |L1.22986|
                  |L1.22958|
0059ae  7be0              LDRB     r0,[r4,#0xf]          ;8924  ; cntrlStatIsDownCnt
0059b0  1c40              ADDS     r0,r0,#1              ;8924
0059b2  b2c0              UXTB     r0,r0                 ;8924
0059b4  73e0              STRB     r0,[r4,#0xf]          ;8924
0059b6  28fa              CMP      r0,#0xfa              ;8924
0059b8  d1de              BNE      |L1.22904|
0059ba  230a              MOVS     r3,#0xa               ;8924
0059bc  2200              MOVS     r2,#0                 ;8924
0059be  21e7              MOVS     r1,#0xe7              ;8924
0059c0  20e6              MOVS     r0,#0xe6              ;8924
0059c2  f7fffffe          BL       mess_send
0059c6  e1de              B        |L1.23942|
                  |L1.22984|
0059c8  e044              B        |L1.23124|
                  |L1.22986|
0059ca  73e5              STRB     r5,[r4,#0xf]          ;8928
0059cc  e1db              B        |L1.23942|
                  |L1.22990|
0059ce  6848              LDR      r0,[r1,#4]            ;8934  ; mess_data
0059d0  8620              STRH     r0,[r4,#0x30]         ;8934
0059d2  e1d8              B        |L1.23942|
                  |L1.22996|
0059d4  f9bc0000          LDRSH    r0,[r12,#0]           ;8940  ; bps_U
0059d8  f9b21000          LDRSH    r1,[r2,#0]            ;8940  ; u_necc
0059dc  4288              CMP      r0,r1                 ;8940
0059de  dd1a              BLE      |L1.23062|
0059e0  f04f020b          MOV      r2,#0xb               ;8942
0059e4  f884202d          STRB     r2,[r4,#0x2d]         ;8942
0059e8  eba00001          SUB      r0,r0,r1              ;8943
0059ec  2828              CMP      r0,#0x28              ;8943
0059ee  dd07              BLE      |L1.23040|
0059f0  f9b40030          LDRSH    r0,[r4,#0x30]         ;8943  ; cntrl_stat
0059f4  2800              CMP      r0,#0                 ;8943
0059f6  dd03              BLE      |L1.23040|
0059f8  f1a00005          SUB      r0,r0,#5              ;8943
0059fc  8620              STRH     r0,[r4,#0x30]         ;8943
0059fe  e1c2              B        |L1.23942|
                  |L1.23040|
005a00  f9b40030          LDRSH    r0,[r4,#0x30]         ;8944  ; cntrl_stat
005a04  2800              CMP      r0,#0                 ;8944
005a06  d0b7              BEQ      |L1.22904|
005a08  7da1              LDRB     r1,[r4,#0x16]         ;8944  ; b1Hz_ch
005a0a  2900              CMP      r1,#0                 ;8944
005a0c  d0b4              BEQ      |L1.22904|
005a0e  f1a00001          SUB      r0,r0,#1              ;8944
005a12  8620              STRH     r0,[r4,#0x30]         ;8944
005a14  e1b7              B        |L1.23942|
                  |L1.23062|
005a16  daaf              BGE      |L1.22904|
005a18  f04f020c          MOV      r2,#0xc               ;8948
005a1c  f884202d          STRB     r2,[r4,#0x2d]         ;8948
005a20  eba10000          SUB      r0,r1,r0              ;8949
005a24  2828              CMP      r0,#0x28              ;8949
005a26  dd09              BLE      |L1.23100|
005a28  f9b40030          LDRSH    r0,[r4,#0x30]         ;8949  ; cntrl_stat
005a2c  f24031f7          MOV      r1,#0x3f7             ;8949
005a30  4288              CMP      r0,r1                 ;8949
005a32  da03              BGE      |L1.23100|
005a34  f1000005          ADD      r0,r0,#5              ;8949
005a38  8620              STRH     r0,[r4,#0x30]         ;8949
005a3a  e1a4              B        |L1.23942|
                  |L1.23100|
005a3c  f9b40030          LDRSH    r0,[r4,#0x30]         ;8950  ; cntrl_stat
005a40  f5b07f7f          CMP      r0,#0x3fc             ;8950
005a44  da98              BGE      |L1.22904|
005a46  7da1              LDRB     r1,[r4,#0x16]         ;8950  ; b1Hz_ch
005a48  2900              CMP      r1,#0                 ;8950
005a4a  d095              BEQ      |L1.22904|
005a4c  f1000001          ADD      r0,r0,#1              ;8950
005a50  8620              STRH     r0,[r4,#0x30]         ;8950
005a52  e198              B        |L1.23942|
                  |L1.23124|
005a54  7da0              LDRB     r0,[r4,#0x16]         ;9001  ; b1Hz_ch
005a56  2800              CMP      r0,#0                 ;9001
005a58  d08e              BEQ      |L1.22904|
005a5a  4869              LDR      r0,|L1.23552|
005a5c  8800              LDRH     r0,[r0,#0]            ;9001  ; bIBAT_SMKLBR
005a5e  b118              CBZ      r0,|L1.23144|
005a60  f89902e3          LDRB     r0,[r9,#0x2e3]        ;9001  ; bps
005a64  2828              CMP      r0,#0x28              ;9001
005a66  d987              BLS      |L1.22904|
                  |L1.23144|
005a68  f104042c          ADD      r4,r4,#0x2c           ;9003
005a6c  f9b40006          LDRSH    r0,[r4,#6]            ;9003  ; cntrl_stat_old
005a70  8360              STRH     r0,[r4,#0x1a]         ;9003
005a72  f04f0113          MOV      r1,#0x13              ;9004
005a76  7061              STRB     r1,[r4,#1]            ;9004
005a78  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9005  ; Ibmax
005a7c  8be3              LDRH     r3,[r4,#0x1e]         ;9005  ; IZMAX_
005a7e  fb91f8f8          SDIV     r8,r1,r8              ;9005
005a82  f1a4042c          SUB      r4,r4,#0x2c           ;9005
005a86  ebb80f43          CMP      r8,r3,LSL #1          ;9005
005a8a  dd10              BLE      |L1.23214|
005a8c  f04f0114          MOV      r1,#0x14              ;9007
005a90  f884102d          STRB     r1,[r4,#0x2d]         ;9007
005a94  f8b41072          LDRH     r1,[r4,#0x72]         ;9008  ; cntrl_stat_blok_cnt
005a98  b121              CBZ      r1,|L1.23204|
005a9a  f1a00001          SUB      r0,r0,#1              ;9008
005a9e  f8a40046          STRH     r0,[r4,#0x46]         ;9008
005aa2  e13a              B        |L1.23834|
                  |L1.23204|
005aa4  f1a0000a          SUB      r0,r0,#0xa            ;9009
005aa8  f8a40046          STRH     r0,[r4,#0x46]         ;9009
005aac  e135              B        |L1.23834|
                  |L1.23214|
005aae  da14              BGE      |L1.23258|
005ab0  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9011
005ab4  458a              CMP      r10,r1                ;9011
005ab6  da10              BGE      |L1.23258|
005ab8  f04f0115          MOV      r1,#0x15              ;9013
005abc  f884102d          STRB     r1,[r4,#0x2d]         ;9013
005ac0  f8b41072          LDRH     r1,[r4,#0x72]         ;9014  ; cntrl_stat_blok_cnt
005ac4  b121              CBZ      r1,|L1.23248|
005ac6  f1a00001          SUB      r0,r0,#1              ;9014
005aca  f8a40046          STRH     r0,[r4,#0x46]         ;9014
005ace  e124              B        |L1.23834|
                  |L1.23248|
005ad0  f1a00003          SUB      r0,r0,#3              ;9015
005ad4  f8a40046          STRH     r0,[r4,#0x46]         ;9015
005ad8  e11f              B        |L1.23834|
                  |L1.23258|
005ada  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9017
005ade  458a              CMP      r10,r1                ;9017
005ae0  dd0a              BLE      |L1.23288|
005ae2  4598              CMP      r8,r3                 ;9017
005ae4  dd08              BLE      |L1.23288|
005ae6  f04f0116          MOV      r1,#0x16              ;9019
005aea  f884102d          STRB     r1,[r4,#0x2d]         ;9019
005aee  f1a00001          SUB      r0,r0,#1              ;9020
005af2  f8a40046          STRH     r0,[r4,#0x46]         ;9020
005af6  e110              B        |L1.23834|
                  |L1.23288|
005af8  f9bcc000          LDRSH    r12,[r12,#0]          ;9023  ; bps_U
005afc  f9b22000          LDRSH    r2,[r2,#0]            ;9023  ; u_necc
005b00  f8df8100          LDR      r8,|L1.23556|
005b04  f8dfb100          LDR      r11,|L1.23560|
005b08  4594              CMP      r12,r2                ;9023
005b0a  da7f              BGE      |L1.23564|
005b0c  f04f0a17          MOV      r10,#0x17             ;9025
005b10  f884a02d          STRB     r10,[r4,#0x2d]        ;9025
005b14  f9b88000          LDRSH    r8,[r8,#0]            ;9026  ; UB0
005b18  f9bba000          LDRSH    r10,[r11,#0]          ;9026  ; UB20
005b1c  eba8080a          SUB      r8,r8,r10             ;9026
005b20  eba20a08          SUB      r10,r2,r8             ;9026
005b24  45e2              CMP      r10,r12               ;9026
005b26  dd73              BLE      |L1.23568|
005b28  f04f0218          MOV      r2,#0x18              ;9028
005b2c  f884202d          STRB     r2,[r4,#0x2d]         ;9028
005b30  2900              CMP      r1,#0                 ;9029
005b32  da10              BGE      |L1.23382|
005b34  f04f0119          MOV      r1,#0x19              ;9031
005b38  f884102d          STRB     r1,[r4,#0x2d]         ;9031
005b3c  f8b41072          LDRH     r1,[r4,#0x72]         ;9032  ; cntrl_stat_blok_cnt
005b40  b121              CBZ      r1,|L1.23372|
005b42  f1000001          ADD      r0,r0,#1              ;9032
005b46  f8a40046          STRH     r0,[r4,#0x46]         ;9032
005b4a  e0e6              B        |L1.23834|
                  |L1.23372|
005b4c  f100000a          ADD      r0,r0,#0xa            ;9033
005b50  f8a40046          STRH     r0,[r4,#0x46]         ;9033
005b54  e0e1              B        |L1.23834|
                  |L1.23382|
005b56  eb030283          ADD      r2,r3,r3,LSL #2       ;9035
005b5a  428a              CMP      r2,r1                 ;9035
005b5c  dd10              BLE      |L1.23424|
005b5e  f04f011a          MOV      r1,#0x1a              ;9037
005b62  f884102d          STRB     r1,[r4,#0x2d]         ;9037
005b66  f8b41072          LDRH     r1,[r4,#0x72]         ;9038  ; cntrl_stat_blok_cnt
005b6a  b121              CBZ      r1,|L1.23414|
005b6c  f1000001          ADD      r0,r0,#1              ;9038
005b70  f8a40046          STRH     r0,[r4,#0x46]         ;9038
005b74  e0d1              B        |L1.23834|
                  |L1.23414|
005b76  f1000002          ADD      r0,r0,#2              ;9039
005b7a  f8a40046          STRH     r0,[r4,#0x46]         ;9039
005b7e  e0cc              B        |L1.23834|
                  |L1.23424|
005b80  ebb10f42          CMP      r1,r2,LSL #1          ;9041
005b84  da07              BGE      |L1.23446|
005b86  f04f011b          MOV      r1,#0x1b              ;9043
005b8a  f884102d          STRB     r1,[r4,#0x2d]         ;9043
005b8e  f1000001          ADD      r0,r0,#1              ;9044
005b92  f8a40046          STRH     r0,[r4,#0x46]         ;9044
                  |L1.23446|
005b96  e0c0              B        |L1.23834|
                  |L1.23448|
                          DCD      u_necc_dn
                  |L1.23452|
                          DCD      u_necc_up
                  |L1.23456|
                          DCD      ||area_number.25||
                  |L1.23460|
                          DCD      Isumm
                  |L1.23464|
                          DCD      Isumm_
                  |L1.23468|
                          DCD      bat
                  |L1.23472|
                          DCD      IMAX
                  |L1.23476|
                          DCD      IMIN
                  |L1.23480|
                          DCD      num_necc
                  |L1.23484|
                          DCD      PAR
                  |L1.23488|
                          DCD      NUMIST
                  |L1.23492|
                          DCD      IZMAX
                  |L1.23496|
                          DCD      speedChIsOn
                  |L1.23500|
                          DCD      sp_ch_stat
                  |L1.23504|
                          DCD      speedChrgCurr
                  |L1.23508|
                          DCD      UZ_IMAX
                  |L1.23512|
                          DCD      FZ_IMAX1
                  |L1.23516|
                          DCD      FZ_IMAX2
                  |L1.23520|
                          DCD      REG_SPEED
                  |L1.23524|
                          DCD      bps_U
                  |L1.23528|
                          DCD      u_necc
                  |L1.23532|
                          DCD      bps
                  |L1.23536|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.23540|
                          DCD      mess_data
                  |L1.23544|
                          DCD      load_U
                  |L1.23548|
                          DCD      USIGN
                  |L1.23552|
                          DCD      bIBAT_SMKLBR
                  |L1.23556|
                          DCD      UB0
                  |L1.23560|
                          DCD      UB20
                  |L1.23564|
005c0c  e042              B        |L1.23700|
005c0e  e7ff              B        |L1.23568|
                  |L1.23568|
005c10  ea4f7ae8          ASR      r10,r8,#31            ;9047
005c14  eb08789a          ADD      r8,r8,r10,LSR #30     ;9047
005c18  eba208a8          SUB      r8,r2,r8,ASR #2       ;9047
005c1c  45e0              CMP      r8,r12                ;9047
005c1e  dd24              BLE      |L1.23658|
005c20  f04f021c          MOV      r2,#0x1c              ;9049
005c24  f884202d          STRB     r2,[r4,#0x2d]         ;9049
005c28  eb030283          ADD      r2,r3,r3,LSL #2       ;9050
005c2c  428a              CMP      r2,r1                 ;9050
005c2e  dd10              BLE      |L1.23634|
005c30  f04f011d          MOV      r1,#0x1d              ;9052
005c34  f884102d          STRB     r1,[r4,#0x2d]         ;9052
005c38  f8b41072          LDRH     r1,[r4,#0x72]         ;9053  ; cntrl_stat_blok_cnt
005c3c  b121              CBZ      r1,|L1.23624|
005c3e  f1000001          ADD      r0,r0,#1              ;9053
005c42  f8a40046          STRH     r0,[r4,#0x46]         ;9053
005c46  e068              B        |L1.23834|
                  |L1.23624|
005c48  f1000002          ADD      r0,r0,#2              ;9054
005c4c  f8a40046          STRH     r0,[r4,#0x46]         ;9054
005c50  e063              B        |L1.23834|
                  |L1.23634|
005c52  ebb10f42          CMP      r1,r2,LSL #1          ;9056
005c56  da60              BGE      |L1.23834|
005c58  f04f011e          MOV      r1,#0x1e              ;9058
005c5c  f884102d          STRB     r1,[r4,#0x2d]         ;9058
005c60  f1000001          ADD      r0,r0,#1              ;9059
005c64  f8a40046          STRH     r0,[r4,#0x46]         ;9059
005c68  e057              B        |L1.23834|
                  |L1.23658|
005c6a  1e52              SUBS     r2,r2,#1              ;9062
005c6c  4594              CMP      r12,r2                ;9062
005c6e  da54              BGE      |L1.23834|
005c70  f04f021f          MOV      r2,#0x1f              ;9064
005c74  f884202d          STRB     r2,[r4,#0x2d]         ;9064
005c78  eb030283          ADD      r2,r3,r3,LSL #2       ;9065
005c7c  ebb10f42          CMP      r1,r2,LSL #1          ;9065
005c80  da4b              BGE      |L1.23834|
005c82  f04f0120          MOV      r1,#0x20              ;9067
005c86  f884102d          STRB     r1,[r4,#0x2d]         ;9067
005c8a  f1000001          ADD      r0,r0,#1              ;9068
005c8e  f8a40046          STRH     r0,[r4,#0x46]         ;9068
005c92  e042              B        |L1.23834|
                  |L1.23700|
005c94  dd41              BLE      |L1.23834|
005c96  f04f0121          MOV      r1,#0x21              ;9074
005c9a  f884102d          STRB     r1,[r4,#0x2d]         ;9074
005c9e  f9b81000          LDRSH    r1,[r8,#0]            ;9075  ; UB0
005ca2  f9bb3000          LDRSH    r3,[r11,#0]           ;9075  ; UB20
005ca6  eba10103          SUB      r1,r1,r3              ;9075
005caa  eb010302          ADD      r3,r1,r2              ;9075
005cae  4563              CMP      r3,r12                ;9075
005cb0  da10              BGE      |L1.23764|
005cb2  f04f0122          MOV      r1,#0x22              ;9077
005cb6  f884102d          STRB     r1,[r4,#0x2d]         ;9077
005cba  f8b41072          LDRH     r1,[r4,#0x72]         ;9078  ; cntrl_stat_blok_cnt
005cbe  b121              CBZ      r1,|L1.23754|
005cc0  f1a00001          SUB      r0,r0,#1              ;9078
005cc4  f8a40046          STRH     r0,[r4,#0x46]         ;9078
005cc8  e027              B        |L1.23834|
                  |L1.23754|
005cca  f1a0000a          SUB      r0,r0,#0xa            ;9079
005cce  f8a40046          STRH     r0,[r4,#0x46]         ;9079
005cd2  e022              B        |L1.23834|
                  |L1.23764|
005cd4  17cb              ASRS     r3,r1,#31             ;9081
005cd6  eb017193          ADD      r1,r1,r3,LSR #30      ;9081
005cda  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9081
005cde  4561              CMP      r1,r12                ;9081
005ce0  da10              BGE      |L1.23812|
005ce2  f04f0123          MOV      r1,#0x23              ;9083
005ce6  f884102d          STRB     r1,[r4,#0x2d]         ;9083
005cea  f8b41072          LDRH     r1,[r4,#0x72]         ;9084  ; cntrl_stat_blok_cnt
005cee  b121              CBZ      r1,|L1.23802|
005cf0  f1a00001          SUB      r0,r0,#1              ;9084
005cf4  f8a40046          STRH     r0,[r4,#0x46]         ;9084
005cf8  e00f              B        |L1.23834|
                  |L1.23802|
005cfa  f1a00002          SUB      r0,r0,#2              ;9085
005cfe  f8a40046          STRH     r0,[r4,#0x46]         ;9085
005d02  e00a              B        |L1.23834|
                  |L1.23812|
005d04  1c52              ADDS     r2,r2,#1              ;9087
005d06  4594              CMP      r12,r2                ;9087
005d08  dd07              BLE      |L1.23834|
005d0a  f04f0124          MOV      r1,#0x24              ;9089
005d0e  f884102d          STRB     r1,[r4,#0x2d]         ;9089
005d12  f1a00001          SUB      r0,r0,#1              ;9090
005d16  f8a40046          STRH     r0,[r4,#0x46]         ;9090
                  |L1.23834|
005d1a  48ff              LDR      r0,|L1.24856|
005d1c  7961              LDRB     r1,[r4,#5]            ;9094  ; vz1_stat
005d1e  7800              LDRB     r0,[r0,#0]            ;9094  ; hv_vz_stat
005d20  4308              ORRS     r0,r0,r1              ;9094
005d22  79e1              LDRB     r1,[r4,#7]            ;9094  ; vz2_stat
005d24  4308              ORRS     r0,r0,r1              ;9094
005d26  d10e              BNE      |L1.23878|
005d28  48fc              LDR      r0,|L1.24860|
005d2a  7840              LDRB     r0,[r0,#1]            ;9096  ; sk_stat
005d2c  2801              CMP      r0,#1                 ;9096
005d2e  d10a              BNE      |L1.23878|
005d30  48fb              LDR      r0,|L1.24864|
005d32  7840              LDRB     r0,[r0,#1]            ;9096  ; sk_stat_old
005d34  b938              CBNZ     r0,|L1.23878|
005d36  48fb              LDR      r0,|L1.24868|
005d38  8800              LDRH     r0,[r0,#0]            ;9096  ; VZ_KIND
005d3a  2801              CMP      r0,#1                 ;9096
005d3c  d103              BNE      |L1.23878|
005d3e  f04f0032          MOV      r0,#0x32              ;9096
005d42  f8a40046          STRH     r0,[r4,#0x46]         ;9096
                  |L1.23878|
005d46  f24032f2          MOV      r2,#0x3f2             ;9099
005d4a  210a              MOVS     r1,#0xa               ;9099
005d4c  48f6              LDR      r0,|L1.24872|
005d4e  f7fffffe          BL       gran
005d52  f8b40046          LDRH     r0,[r4,#0x46]         ;9100  ; cntrl_stat_new
005d56  8660              STRH     r0,[r4,#0x32]         ;9100
005d58  8620              STRH     r0,[r4,#0x30]         ;9101
005d5a  48f4              LDR      r0,|L1.24876|
005d5c  f9b00000          LDRSH    r0,[r0,#0]            ;9103  ; ICA_EN
005d60  b938              CBNZ     r0,|L1.23922|
005d62  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
005d64  b129              CBZ      r1,|L1.23922|
;;;9106   			{
;;;9107   			cntrl_stat = ica_cntrl_hndl;
005d66  49f2              LDR      r1,|L1.24880|
005d68  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
005d6a  8621              STRH     r1,[r4,#0x30]
;;;9108   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
005d6c  f8a41046          STRH     r1,[r4,#0x46]
;;;9109   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
005d70  8661              STRH     r1,[r4,#0x32]
                  |L1.23922|
;;;9110   			}
;;;9111   		}
;;;9112   	
;;;9113   	if((ICA_EN==1)||(ICA_EN==2))
005d72  2801              CMP      r0,#1
005d74  d001              BEQ      |L1.23930|
005d76  2802              CMP      r0,#2
005d78  d105              BNE      |L1.23942|
                  |L1.23930|
;;;9114   		{
;;;9115   		cntrl_stat=cntrl_stat_new+ica_u_necc;
005d7a  49ee              LDR      r1,|L1.24884|
005d7c  f8b40046          LDRH     r0,[r4,#0x46]  ; cntrl_stat_new
005d80  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
005d82  4408              ADD      r0,r0,r1
005d84  8620              STRH     r0,[r4,#0x30]
                  |L1.23942|
;;;9116   		}			
;;;9117   	}
;;;9118   #else
;;;9119   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9120   	{
;;;9121   	cntrl_hndl_plazma=37;
;;;9122   	cntrl_stat_new=cntrl_stat_old;
;;;9123   	
;;;9124   	if((Ibmax/10)>(2*IZMAX_))
;;;9125   		{
;;;9126   		cntrl_hndl_plazma=38;
;;;9127             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9128   		else	cntrl_stat_new-=10;
;;;9129   		}		
;;;9130   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9131   		{
;;;9132   		cntrl_hndl_plazma=39;
;;;9133             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9134             else	cntrl_stat_new-=3;
;;;9135   		}   
;;;9136   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9137   		{
;;;9138   		cntrl_hndl_plazma=40;
;;;9139   		cntrl_stat_new--;
;;;9140   		}
;;;9141   		
;;;9142   	else if(load_U<u_necc)
;;;9143   		{
;;;9144   		cntrl_hndl_plazma=41;
;;;9145   		if(load_U<(u_necc-(UB0-UB20)))
;;;9146   			{
;;;9147   			cntrl_hndl_plazma=42;
;;;9148   			if(Ibmax<0)
;;;9149   				{
;;;9150   				cntrl_hndl_plazma=43;
;;;9151                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9152   				else cntrl_stat_new+=10;
;;;9153   				}
;;;9154   			else if(Ibmax<(IZMAX_*5))
;;;9155   				{
;;;9156   				cntrl_hndl_plazma=44;
;;;9157                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9158   				else	cntrl_stat_new+=2;
;;;9159   				}
;;;9160   			else if(Ibmax<((IZMAX_*95)/10))
;;;9161   				{
;;;9162   				cntrl_hndl_plazma=45;
;;;9163   				cntrl_stat_new++;
;;;9164   				}					
;;;9165   			}
;;;9166   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9167   			{
;;;9168   			cntrl_hndl_plazma=46;
;;;9169   			if(Ibmax<(IZMAX_*5))
;;;9170   				{
;;;9171   				cntrl_hndl_plazma=47;
;;;9172                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9173   				else	cntrl_stat_new+=2;
;;;9174   				}
;;;9175   			else if(Ibmax<((IZMAX_*95)/10))
;;;9176   				{
;;;9177   				cntrl_hndl_plazma=48;
;;;9178   				cntrl_stat_new++;
;;;9179   				}					
;;;9180   			}	
;;;9181   		else if(load_U<(u_necc-1))
;;;9182   			{
;;;9183   			cntrl_hndl_plazma=49;
;;;9184   			if(Ibmax<((IZMAX_*95)/10))
;;;9185   				{
;;;9186   				cntrl_hndl_plazma=50;
;;;9187   				cntrl_stat_new++;
;;;9188   				}					
;;;9189   			}					
;;;9190   		}	
;;;9191   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9192   		{
;;;9193   		cntrl_hndl_plazma=51;
;;;9194   		if(load_U>(u_necc+(UB0-UB20)))
;;;9195   			{
;;;9196   			cntrl_hndl_plazma=52;
;;;9197                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9198   			else	cntrl_stat_new-=10;
;;;9199   			}
;;;9200   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9201   			{
;;;9202   			cntrl_hndl_plazma=53;
;;;9203                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9204   			else cntrl_stat_new-=2;
;;;9205   			}	
;;;9206   		else if(load_U>(u_necc+1))
;;;9207   			{
;;;9208   			cntrl_hndl_plazma=54;
;;;9209   			cntrl_stat_new--;
;;;9210   			}					
;;;9211   		}
;;;9212   
;;;9213   	gran(&cntrl_stat_new,10,1010);			
;;;9214   	cntrl_stat_old=cntrl_stat_new;
;;;9215   	cntrl_stat=cntrl_stat_new;	
;;;9216   	}
;;;9217   #endif
;;;9218   
;;;9219   iiii=0;
005d86  7625              STRB     r5,[r4,#0x18]
;;;9220   for(i=0;i<NUMIST;i++)
005d88  75e5              STRB     r5,[r4,#0x17]
005d8a  48eb              LDR      r0,|L1.24888|
005d8c  f9b01000          LDRSH    r1,[r0,#0]
005d90  e00c              B        |L1.23980|
                  |L1.23954|
;;;9221        {
;;;9222        if(bps[i]._cnt<30)iiii=1;
005d92  ebc002c0          RSB      r2,r0,r0,LSL #3
005d96  eb021200          ADD      r2,r2,r0,LSL #4
005d9a  eb090282          ADD      r2,r9,r2,LSL #2
005d9e  78d2              LDRB     r2,[r2,#3]
005da0  2a1e              CMP      r2,#0x1e
005da2  d200              BCS      |L1.23974|
005da4  7626              STRB     r6,[r4,#0x18]
                  |L1.23974|
005da6  f1000001          ADD      r0,r0,#1              ;9220
005daa  75e0              STRB     r0,[r4,#0x17]         ;9220
                  |L1.23980|
005dac  7de0              LDRB     r0,[r4,#0x17]         ;9220  ; i
005dae  4288              CMP      r0,r1                 ;9220
005db0  dbef              BLT      |L1.23954|
;;;9223        }
;;;9224   
;;;9225   if(iiii==0)
005db2  7e20              LDRB     r0,[r4,#0x18]  ; iiii
005db4  b948              CBNZ     r0,|L1.24010|
;;;9226   	{
;;;9227   	cntrl_stat=600;	
;;;9228   	cntrl_stat_old=600;
;;;9229   	cntrl_stat_new=600;
;;;9230   	cntrl_stat=10*PWM_START;
005db6  48e1              LDR      r0,|L1.24892|
005db8  8800              LDRH     r0,[r0,#0]  ; PWM_START
005dba  eb000080          ADD      r0,r0,r0,LSL #2
005dbe  ea4f0040          LSL      r0,r0,#1
005dc2  8620              STRH     r0,[r4,#0x30]
;;;9231   	cntrl_stat_old=10*PWM_START;
005dc4  8660              STRH     r0,[r4,#0x32]
;;;9232   	cntrl_stat_new=10*PWM_START;
005dc6  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.24010|
;;;9233   	}
;;;9234   
;;;9235   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9236   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
005dca  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
005dce  b110              CBZ      r0,|L1.24022|
005dd0  f1a00001          SUB      r0,r0,#1
005dd4  8038              STRH     r0,[r7,#0]
                  |L1.24022|
;;;9237   
;;;9238   
;;;9239   
;;;9240   #endif
;;;9241   
;;;9242   
;;;9243   gran(&cntrl_stat,10,1010); 
005dd6  48d4              LDR      r0,|L1.24872|
005dd8  f24032f2          MOV      r2,#0x3f2
005ddc  210a              MOVS     r1,#0xa
005dde  3816              SUBS     r0,r0,#0x16
005de0  f7fffffe          BL       gran
;;;9244   b1Hz_ch=0;
005de4  75a5              STRB     r5,[r4,#0x16]
                  |L1.24038|
;;;9245   }
005de6  e8bd9ff0          POP      {r4-r12,pc}
;;;9246   #endif
                          ENDP

                  ext_drv PROC
;;;9735   //-----------------------------------------------
;;;9736   void ext_drv(void)
005dea  e92d5ff0          PUSH     {r4-r12,lr}
;;;9737   {
;;;9738   char i;
;;;9739   
;;;9740   
;;;9741   for(i=0;i<NUMSK;i++)
005dee  f04f0000          MOV      r0,#0
005df2  4ad4              LDR      r2,|L1.24900|
;;;9742   	{
;;;9743   	#ifdef UKU_MGTS
;;;9744   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9745   	#endif
;;;9746   	#ifdef UKU_RSTKM
;;;9747   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9748   	#endif
;;;9749   	#ifdef UKU_3U
;;;9750   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;9751   	#endif
;;;9752   	#ifdef UKU_GLONASS
;;;9753   	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;9754   	#endif
;;;9755   	#ifdef UKU_KONTUR
;;;9756   	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;9757   	#endif
;;;9758   	#ifdef UKU_6U
;;;9759   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9760   	#endif
;;;9761   	#ifdef UKU_220
;;;9762   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9763   	#endif
;;;9764   	#ifdef UKU_220_V2
;;;9765   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9766   	#endif
;;;9767   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9768   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9769   	#endif
;;;9770   	#ifdef UKU_TELECORE2015	
;;;9771   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9772   	#endif
;;;9773   	#ifdef UKU_TELECORE2017
;;;9774   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9775   	#endif
;;;9776   	#ifdef IPS_SGEP_GAZPROM
;;;9777   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9778   	#endif		
;;;9779   		{
;;;9780   		if(sk_cnt[i]<10)
005df4  4bd2              LDR      r3,|L1.24896|
;;;9781   			{
;;;9782   			sk_cnt[i]++;
;;;9783   			if(sk_cnt[i]>=10)
;;;9784   				{
;;;9785   				sk_stat[i]=ssON;
005df6  4dc9              LDR      r5,|L1.24860|
005df8  f04f0a01          MOV      r10,#1
;;;9786   				}
;;;9787   			}
;;;9788   		else 
;;;9789   			{
;;;9790   			sk_cnt[i]=10;
005dfc  f04f0b0a          MOV      r11,#0xa
005e00  4606              MOV      r6,r0                 ;9741
005e02  f9b24000          LDRSH    r4,[r2,#0]            ;9741
005e06  e025              B        |L1.24148|
                  |L1.24072|
005e08  49cf              LDR      r1,|L1.24904|
005e0a  4fd0              LDR      r7,|L1.24908|
005e0c  5c09              LDRB     r1,[r1,r0]            ;9768
005e0e  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;9768
005e12  f5b16ffa          CMP      r1,#0x7d0             ;9768
005e16  da0e              BGE      |L1.24118|
005e18  5619              LDRSB    r1,[r3,r0]            ;9780
005e1a  290a              CMP      r1,#0xa               ;9780
005e1c  da08              BGE      |L1.24112|
005e1e  f1010101          ADD      r1,r1,#1              ;9782
005e22  b249              SXTB     r1,r1                 ;9782
005e24  5419              STRB     r1,[r3,r0]            ;9782
005e26  290a              CMP      r1,#0xa               ;9783
005e28  db11              BLT      |L1.24142|
005e2a  f805a000          STRB     r10,[r5,r0]           ;9785
005e2e  e00e              B        |L1.24142|
                  |L1.24112|
005e30  f803b000          STRB     r11,[r3,r0]
005e34  e00b              B        |L1.24142|
                  |L1.24118|
;;;9791   			}
;;;9792                  
;;;9793   		}
;;;9794   	else
;;;9795   		{
;;;9796   		if(sk_cnt[i]>0)
005e36  5619              LDRSB    r1,[r3,r0]
005e38  2900              CMP      r1,#0
005e3a  dd07              BLE      |L1.24140|
;;;9797   			{
;;;9798   			sk_cnt[i]--;
005e3c  f1a10101          SUB      r1,r1,#1
005e40  b249              SXTB     r1,r1
005e42  5419              STRB     r1,[r3,r0]
;;;9799   			if(sk_cnt[i]<=0)
005e44  2900              CMP      r1,#0
005e46  dc02              BGT      |L1.24142|
;;;9800   				{
;;;9801   				sk_stat[i]=ssOFF;
005e48  542e              STRB     r6,[r5,r0]
005e4a  e000              B        |L1.24142|
                  |L1.24140|
;;;9802   				}
;;;9803   			}
;;;9804   		else 
;;;9805   			{
;;;9806   			sk_cnt[i]=0;
005e4c  541e              STRB     r6,[r3,r0]
                  |L1.24142|
005e4e  f1000001          ADD      r0,r0,#1              ;9741
005e52  b2c0              UXTB     r0,r0                 ;9741
                  |L1.24148|
005e54  42a0              CMP      r0,r4                 ;9741
005e56  dbd7              BLT      |L1.24072|
;;;9807   			}
;;;9808   		}
;;;9809   	}
;;;9810   
;;;9811   for(i=0;i<NUMSK;i++)
005e58  f04f0400          MOV      r4,#0
;;;9812   	{
;;;9813   	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;9814   		{
;;;9815   		if(sk_av_cnt[i]<10)
005e5c  f8df92f0          LDR      r9,|L1.24912|
;;;9816   			{
;;;9817   			sk_av_cnt[i]++;
;;;9818   			if(sk_av_cnt[i]>=10)
;;;9819   				{
;;;9820   				sk_av_stat[i]=sasON;
005e60  4fbc              LDR      r7,|L1.24916|
;;;9821   				}
;;;9822   			}
;;;9823   		else 
;;;9824   			{
;;;9825   			sk_av_cnt[i]=10;
;;;9826   			}
;;;9827   		}
;;;9828   	else
;;;9829   		{
;;;9830   		if(sk_av_cnt[i]>=0)
;;;9831   			{
;;;9832   			sk_av_cnt[i]--;
;;;9833   			if(sk_av_cnt[i]<=0)
;;;9834   				{
;;;9835   				sk_av_stat[i]=sasOFF;
;;;9836   				}
;;;9837   			}
;;;9838   		else 
;;;9839   			{
;;;9840   			sk_av_cnt[i]=0;
;;;9841   			}
;;;9842   		}
;;;9843   
;;;9844   #ifndef UKU_KONTUR
;;;9845   	if(sk_av_stat_old[i]!=sk_av_stat[i])
005e62  f8df82f4          LDR      r8,|L1.24920|
005e66  e083              B        |L1.24432|
                  |L1.24168|
005e68  48bc              LDR      r0,|L1.24924|
005e6a  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;9813
005e6e  b910              CBNZ     r0,|L1.24182|
005e70  5d29              LDRB     r1,[r5,r4]            ;9813
005e72  2901              CMP      r1,#1                 ;9813
005e74  d00f              BEQ      |L1.24214|
                  |L1.24182|
005e76  b108              CBZ      r0,|L1.24188|
005e78  5d28              LDRB     r0,[r5,r4]            ;9813
005e7a  b160              CBZ      r0,|L1.24214|
                  |L1.24188|
005e7c  f9190004          LDRSB    r0,[r9,r4]            ;9830
005e80  2800              CMP      r0,#0                 ;9830
005e82  db19              BLT      |L1.24248|
005e84  f1a00001          SUB      r0,r0,#1              ;9832
005e88  b240              SXTB     r0,r0                 ;9832
005e8a  f8090004          STRB     r0,[r9,r4]            ;9832
005e8e  2800              CMP      r0,#0                 ;9833
005e90  dc14              BGT      |L1.24252|
005e92  553e              STRB     r6,[r7,r4]            ;9835
005e94  e012              B        |L1.24252|
                  |L1.24214|
005e96  f9190004          LDRSB    r0,[r9,r4]            ;9815
005e9a  280a              CMP      r0,#0xa               ;9815
005e9c  da09              BGE      |L1.24242|
005e9e  f1000001          ADD      r0,r0,#1              ;9817
005ea2  b240              SXTB     r0,r0                 ;9817
005ea4  f8090004          STRB     r0,[r9,r4]            ;9817
005ea8  280a              CMP      r0,#0xa               ;9818
005eaa  db07              BLT      |L1.24252|
005eac  f807a004          STRB     r10,[r7,r4]           ;9820
005eb0  e004              B        |L1.24252|
                  |L1.24242|
005eb2  f809b004          STRB     r11,[r9,r4]           ;9825
005eb6  e001              B        |L1.24252|
                  |L1.24248|
005eb8  f8096004          STRB     r6,[r9,r4]            ;9840
                  |L1.24252|
005ebc  f8181004          LDRB     r1,[r8,r4]
005ec0  5d38              LDRB     r0,[r7,r4]
005ec2  4281              CMP      r1,r0
005ec4  d04e              BEQ      |L1.24420|
;;;9846   		{
;;;9847   		plazma_sk++;
005ec6  4a98              LDR      r2,|L1.24872|
005ec8  1e92              SUBS     r2,r2,#2
005eca  8811              LDRH     r1,[r2,#0]  ; plazma_sk
005ecc  f1010101          ADD      r1,r1,#1
005ed0  8011              STRH     r1,[r2,#0]
;;;9848   		if(sk_av_stat[i]==sasON)
005ed2  2801              CMP      r0,#1
005ed4  d007              BEQ      |L1.24294|
;;;9849   			{
;;;9850   			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;9851   			else if(i==1)
;;;9852   				{
;;;9853   				#ifndef UKU_TELEKORE2017
;;;9854   				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;9855   				#endif
;;;9856   				#ifdef UKU_TELEKORE2017
;;;9857   				snmp_trap_send("Door open",15,2,1);
;;;9858   				#endif
;;;9859   				}
;;;9860   			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;9861   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9862   			}
;;;9863   		else 
;;;9864   			{
;;;9865   			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
005ed6  b354              CBZ      r4,|L1.24366|
;;;9866   			else if(i==1)
005ed8  2c01              CMP      r4,#1
005eda  d02f              BEQ      |L1.24380|
;;;9867   				{
;;;9868   				#ifndef UKU_TELEKORE2017
;;;9869   				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;9870   				#endif
;;;9871   				#ifdef UKU_TELEKORE2017
;;;9872   				snmp_trap_send("Door open clear",15,2,0);
;;;9873   				#endif
;;;9874   				}
;;;9875   			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
005edc  2c02              CMP      r4,#2
005ede  d034              BEQ      |L1.24394|
;;;9876   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
005ee0  2c03              CMP      r4,#3
005ee2  d039              BEQ      |L1.24408|
005ee4  e03e              B        |L1.24420|
                  |L1.24294|
005ee6  b134              CBZ      r4,|L1.24310|
005ee8  2c01              CMP      r4,#1                 ;9851
005eea  d00b              BEQ      |L1.24324|
005eec  2c02              CMP      r4,#2                 ;9860
005eee  d010              BEQ      |L1.24338|
005ef0  2c03              CMP      r4,#3                 ;9861
005ef2  d015              BEQ      |L1.24352|
005ef4  e036              B        |L1.24420|
                  |L1.24310|
005ef6  2301              MOVS     r3,#1                 ;9850
005ef8  461a              MOV      r2,r3                 ;9850
005efa  210f              MOVS     r1,#0xf               ;9850
005efc  a098              ADR      r0,|L1.24928|
005efe  f7fffffe          BL       snmp_trap_send
005f02  e02f              B        |L1.24420|
                  |L1.24324|
005f04  2301              MOVS     r3,#1                 ;9854
005f06  2202              MOVS     r2,#2                 ;9854
005f08  210f              MOVS     r1,#0xf               ;9854
005f0a  a098              ADR      r0,|L1.24940|
005f0c  f7fffffe          BL       snmp_trap_send
005f10  e028              B        |L1.24420|
                  |L1.24338|
005f12  2301              MOVS     r3,#1                 ;9860
005f14  2203              MOVS     r2,#3                 ;9860
005f16  210f              MOVS     r1,#0xf               ;9860
005f18  a097              ADR      r0,|L1.24952|
005f1a  f7fffffe          BL       snmp_trap_send
005f1e  e021              B        |L1.24420|
                  |L1.24352|
005f20  2301              MOVS     r3,#1                 ;9861
005f22  2204              MOVS     r2,#4                 ;9861
005f24  210f              MOVS     r1,#0xf               ;9861
005f26  a097              ADR      r0,|L1.24964|
005f28  f7fffffe          BL       snmp_trap_send
005f2c  e01a              B        |L1.24420|
                  |L1.24366|
005f2e  2300              MOVS     r3,#0                 ;9865
005f30  2201              MOVS     r2,#1                 ;9865
005f32  210f              MOVS     r1,#0xf               ;9865
005f34  a096              ADR      r0,|L1.24976|
005f36  f7fffffe          BL       snmp_trap_send
005f3a  e013              B        |L1.24420|
                  |L1.24380|
005f3c  2300              MOVS     r3,#0                 ;9869
005f3e  2202              MOVS     r2,#2                 ;9869
005f40  210f              MOVS     r1,#0xf               ;9869
005f42  a098              ADR      r0,|L1.24996|
005f44  f7fffffe          BL       snmp_trap_send
005f48  e00c              B        |L1.24420|
                  |L1.24394|
005f4a  2300              MOVS     r3,#0                 ;9875
005f4c  2203              MOVS     r2,#3                 ;9875
005f4e  210f              MOVS     r1,#0xf               ;9875
005f50  a099              ADR      r0,|L1.25016|
005f52  f7fffffe          BL       snmp_trap_send
005f56  e005              B        |L1.24420|
                  |L1.24408|
005f58  2300              MOVS     r3,#0
005f5a  2204              MOVS     r2,#4
005f5c  210f              MOVS     r1,#0xf
005f5e  a09b              ADR      r0,|L1.25036|
005f60  f7fffffe          BL       snmp_trap_send
                  |L1.24420|
;;;9877   			}
;;;9878   	 	}
;;;9879   #endif
;;;9880   
;;;9881   #ifdef UKU_KONTUR
;;;9882   	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;9883   		{
;;;9884   		plazma_sk++;
;;;9885   		if(sk_av_stat[i]==sasON)
;;;9886   			{
;;;9887   			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;9888   			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;9889   			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;9890   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9891   			}
;;;9892   		else 
;;;9893   			{
;;;9894   			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;9895   			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;9896   			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;9897   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;9898   			}
;;;9899   	 	}
;;;9900   #endif
;;;9901   	sk_av_stat_old[i]=sk_av_stat[i];
005f64  5d38              LDRB     r0,[r7,r4]
005f66  f8080004          STRB     r0,[r8,r4]
005f6a  f1040401          ADD      r4,r4,#1              ;9811
005f6e  b2e4              UXTB     r4,r4                 ;9811
                  |L1.24432|
005f70  4874              LDR      r0,|L1.24900|
005f72  f9b00000          LDRSH    r0,[r0,#0]            ;9811  ; NUMSK
005f76  4284              CMP      r4,r0                 ;9811
005f78  f6ffaf76          BLT      |L1.24168|
;;;9902   	}
;;;9903   }
005f7c  e733              B        |L1.24038|
;;;9904   
                          ENDP

                  zar_superviser_start PROC
;;;9941   //-----------------------------------------------
;;;9942   void zar_superviser_start(void)
005f7e  4a98              LDR      r2,|L1.25056|
;;;9943   {
;;;9944   sign_U[0]=1;
005f80  f04f0001          MOV      r0,#1
005f84  7010              STRB     r0,[r2,#0]
;;;9945   sign_I[0]=1;
005f86  4997              LDR      r1,|L1.25060|
005f88  7008              STRB     r0,[r1,#0]
;;;9946   sign_U[1]=1;
005f8a  7050              STRB     r0,[r2,#1]
;;;9947   sign_I[1]=1;
005f8c  7048              STRB     r0,[r1,#1]
;;;9948   
;;;9949   }
005f8e  4770              BX       lr
;;;9950   
                          ENDP

                  zar_superviser_drv PROC
;;;9906   //-----------------------------------------------
;;;9907   void zar_superviser_drv(void)
005f90  e92d5ff0          PUSH     {r4-r12,lr}
;;;9908   {
;;;9909   
;;;9910   if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
005f94  4895              LDR      r0,|L1.25068|
005f96  f8df9258          LDR      r9,|L1.25072|
005f9a  f8df824c          LDR      r8,|L1.25064|
005f9e  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
005fa2  f9b90000          LDRSH    r0,[r9,#0]
005fa6  4c60              LDR      r4,|L1.24872|
005fa8  ebc01100          RSB      r1,r0,r0,LSL #4
005fac  3c46              SUBS     r4,r4,#0x46
005fae  f9b87002          LDRSH    r7,[r8,#2]  ; bat
005fb2  f06f0a1d          MVN      r10,#0x1d
005fb6  f06f0b95          MVN      r11,#0x95
005fba  2500              MOVS     r5,#0
005fbc  4e88              LDR      r6,|L1.25056|
005fbe  f9b40050          LDRSH    r0,[r4,#0x50]
005fc2  eb0a0281          ADD      r2,r10,r1,LSL #2
005fc6  eb0b0381          ADD      r3,r11,r1,LSL #2
005fca  4567              CMP      r7,r12
005fcc  dc05              BGT      |L1.24538|
005fce  f8dfc224          LDR      r12,|L1.25076|
005fd2  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
005fd6  4567              CMP      r7,r12
005fd8  da04              BGE      |L1.24548|
                  |L1.24538|
005fda  4282              CMP      r2,r0
005fdc  dd02              BLE      |L1.24548|
005fde  4283              CMP      r3,r0
005fe0  da00              BGE      |L1.24548|
005fe2  7035              STRB     r5,[r6,#0]
                  |L1.24548|
;;;9911   
;;;9912   if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
005fe4  4f84              LDR      r7,|L1.25080|
005fe6  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
005fea  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
005fee  4f7d              LDR      r7,|L1.25060|
005ff0  ebbc0f4e          CMP      r12,lr,LSL #1
005ff4  dc04              BGT      |L1.24576|
005ff6  f1ce0e00          RSB      lr,lr,#0
005ffa  ebbc0f4e          CMP      r12,lr,LSL #1
005ffe  da04              BGE      |L1.24586|
                  |L1.24576|
006000  4282              CMP      r2,r0
006002  dd02              BLE      |L1.24586|
006004  4283              CMP      r3,r0
006006  da00              BGE      |L1.24586|
006008  703d              STRB     r5,[r7,#0]
                  |L1.24586|
;;;9913   																 
;;;9914   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00600a  f06f0209          MVN      r2,#9
00600e  eb020181          ADD      r1,r2,r1,LSL #2
006012  4281              CMP      r1,r0
006014  d121              BNE      |L1.24666|
006016  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
00601a  b9f0              CBNZ     r0,|L1.24666|
;;;9915   	{
;;;9916   	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
00601c  7830              LDRB     r0,[r6,#0]  ; sign_U
00601e  2801              CMP      r0,#1
006020  d11b              BNE      |L1.24666|
006022  7838              LDRB     r0,[r7,#0]  ; sign_I
006024  2801              CMP      r0,#1
006026  d118              BNE      |L1.24666|
006028  f44f70ef          MOV      r0,#0x1de
00602c  f7fffffe          BL       lc640_read_int
006030  4972              LDR      r1,|L1.25084|
006032  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
006036  4288              CMP      r0,r1
006038  d00f              BEQ      |L1.24666|
00603a  4871              LDR      r0,|L1.25088|
00603c  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00603e  b160              CBZ      r0,|L1.24666|
006040  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006044  07c0              LSLS     r0,r0,#31
006046  d108              BNE      |L1.24666|
;;;9917   		{
;;;9918   		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
006048  f44f70ef          MOV      r0,#0x1de
00604c  f7fffffe          BL       lc640_write_int
;;;9919   		superviser_cnt++;
006050  486c              LDR      r0,|L1.25092|
006052  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006054  f1010101          ADD      r1,r1,#1
006058  7001              STRB     r1,[r0,#0]
                  |L1.24666|
;;;9920   		}
;;;9921   	
;;;9922   	}
;;;9923   
;;;9924   if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00605a  4864              LDR      r0,|L1.25068|
00605c  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006060  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006064  4281              CMP      r1,r0
006066  dc06              BGT      |L1.24694|
006068  4862              LDR      r0,|L1.25076|
00606a  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
00606e  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006072  4281              CMP      r1,r0
006074  da0e              BGE      |L1.24724|
                  |L1.24694|
006076  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00607a  f9b41050          LDRSH    r1,[r4,#0x50]  ; main_kb_cnt
00607e  ebc01000          RSB      r0,r0,r0,LSL #4
006082  eb0a0280          ADD      r2,r10,r0,LSL #2
006086  428a              CMP      r2,r1
006088  dd04              BLE      |L1.24724|
00608a  eb0b0080          ADD      r0,r11,r0,LSL #2
00608e  4288              CMP      r0,r1
006090  da00              BGE      |L1.24724|
006092  7075              STRB     r5,[r6,#1]
                  |L1.24724|
;;;9925   
;;;9926   if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006094  4958              LDR      r1,|L1.25080|
006096  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00609a  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00609e  ebb00f41          CMP      r0,r1,LSL #1
0060a2  dc03              BGT      |L1.24748|
0060a4  4249              RSBS     r1,r1,#0
0060a6  ebb00f41          CMP      r0,r1,LSL #1
0060aa  da0e              BGE      |L1.24778|
                  |L1.24748|
0060ac  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0060b0  f9b41050          LDRSH    r1,[r4,#0x50]  ; main_kb_cnt
0060b4  ebc01000          RSB      r0,r0,r0,LSL #4
0060b8  eb0a0280          ADD      r2,r10,r0,LSL #2
0060bc  428a              CMP      r2,r1
0060be  dd04              BLE      |L1.24778|
0060c0  eb0b0080          ADD      r0,r11,r0,LSL #2
0060c4  4288              CMP      r0,r1
0060c6  da00              BGE      |L1.24778|
0060c8  707d              STRB     r5,[r7,#1]
                  |L1.24778|
;;;9927   																 
;;;9928   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0060ca  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0060ce  ebc01100          RSB      r1,r0,r0,LSL #4
0060d2  f06f0009          MVN      r0,#9
0060d6  eb000081          ADD      r0,r0,r1,LSL #2
0060da  f9b41050          LDRSH    r1,[r4,#0x50]  ; main_kb_cnt
0060de  4288              CMP      r0,r1
0060e0  d119              BNE      |L1.24854|
0060e2  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
0060e6  b9b0              CBNZ     r0,|L1.24854|
;;;9929   	{
;;;9930   	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0060e8  7870              LDRB     r0,[r6,#1]  ; sign_U
0060ea  2801              CMP      r0,#1
0060ec  d113              BNE      |L1.24854|
0060ee  7878              LDRB     r0,[r7,#1]  ; sign_I
0060f0  2801              CMP      r0,#1
0060f2  d110              BNE      |L1.24854|
0060f4  f44f75fe          MOV      r5,#0x1fc
0060f8  4628              MOV      r0,r5
0060fa  f7fffffe          BL       lc640_read_int
0060fe  493f              LDR      r1,|L1.25084|
006100  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
006104  4288              CMP      r0,r1
006106  d006              BEQ      |L1.24854|
006108  483d              LDR      r0,|L1.25088|
00610a  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00610c  2802              CMP      r0,#2
00610e  d102              BNE      |L1.24854|
006110  f8980089          LDRB     r0,[r8,#0x89]  ; bat
006114  e078              B        |L1.25096|
                  |L1.24854|
006116  e081              B        |L1.25116|
                  |L1.24856|
                          DCD      hv_vz_stat
                  |L1.24860|
                          DCD      sk_stat
                  |L1.24864|
                          DCD      sk_stat_old
                  |L1.24868|
                          DCD      VZ_KIND
                  |L1.24872|
                          DCD      ||area_number.25||+0x46
                  |L1.24876|
                          DCD      ICA_EN
                  |L1.24880|
                          DCD      ica_cntrl_hndl
                  |L1.24884|
                          DCD      ica_u_necc
                  |L1.24888|
                          DCD      NUMIST
                  |L1.24892|
                          DCD      PWM_START
                  |L1.24896|
                          DCD      sk_cnt
                  |L1.24900|
                          DCD      NUMSK
                  |L1.24904|
                          DCD      ||area_number.19||
                  |L1.24908|
                          DCD      ||.bss||+0x40c
                  |L1.24912|
                          DCD      sk_av_cnt
                  |L1.24916|
                          DCD      sk_av_stat
                  |L1.24920|
                          DCD      sk_av_stat_old
                  |L1.24924|
                          DCD      SK_SIGN
                  |L1.24928|
006160  534b2023          DCB      "SK #1 Alarm",0
006164  3120416c
006168  61726d00
                  |L1.24940|
00616c  534b2023          DCB      "SK #2 Alarm",0
006170  3220416c
006174  61726d00
                  |L1.24952|
006178  534b2023          DCB      "SK #3 Alarm",0
00617c  3320416c
006180  61726d00
                  |L1.24964|
006184  534b2023          DCB      "SK #4 Alarm",0
006188  3420416c
00618c  61726d00
                  |L1.24976|
006190  534b2023          DCB      "SK #1 Alarm is off",0
006194  3120416c
006198  61726d20
00619c  6973206f
0061a0  666600  
0061a3  00                DCB      0
                  |L1.24996|
0061a4  534b2023          DCB      "SK #2 Alarm is off",0
0061a8  3220416c
0061ac  61726d20
0061b0  6973206f
0061b4  666600  
0061b7  00                DCB      0
                  |L1.25016|
0061b8  534b2023          DCB      "SK #3 Alarm is off",0
0061bc  3320416c
0061c0  61726d20
0061c4  6973206f
0061c8  666600  
0061cb  00                DCB      0
                  |L1.25036|
0061cc  534b2023          DCB      "SK #4 Alarm is off",0
0061d0  3420416c
0061d4  61726d20
0061d8  6973206f
0061dc  666600  
0061df  00                DCB      0
                  |L1.25056|
                          DCD      sign_U
                  |L1.25060|
                          DCD      sign_I
                  |L1.25064|
                          DCD      bat
                  |L1.25068|
                          DCD      u_necc_up
                  |L1.25072|
                          DCD      TBAT
                  |L1.25076|
                          DCD      u_necc_dn
                  |L1.25080|
                          DCD      IKB
                  |L1.25084|
                          DCD      BAT_C_REAL
                  |L1.25088|
                          DCD      NUMBAT
                  |L1.25092|
                          DCD      superviser_cnt
                  |L1.25096|
006208  07c0              LSLS     r0,r0,#31
00620a  d107              BNE      |L1.25116|
;;;9931   		{
;;;9932   		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
00620c  4628              MOV      r0,r5
00620e  f7fffffe          BL       lc640_write_int
;;;9933   		superviser_cnt++;
006212  48ff              LDR      r0,|L1.26128|
006214  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006216  f1010101          ADD      r1,r1,#1
00621a  7001              STRB     r1,[r0,#0]
                  |L1.25116|
;;;9934   		}
;;;9935   	
;;;9936   	}
;;;9937   
;;;9938   if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
00621c  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006220  f06f0101          MVN      r1,#1
006224  ebc01000          RSB      r0,r0,r0,LSL #4
006228  eb010080          ADD      r0,r1,r0,LSL #2
00622c  f9b41050          LDRSH    r1,[r4,#0x50]  ; main_kb_cnt
006230  4288              CMP      r0,r1
006232  d102              BNE      |L1.25146|
006234  e8bd5ff0          POP      {r4-r12,lr}
006238  e7fe              B        zar_superviser_start
                  |L1.25146|
;;;9939   }
00623a  e5d4              B        |L1.24038|
;;;9940   
                          ENDP

                  npn_hndl PROC
;;;9951   //-----------------------------------------------
;;;9952   void npn_hndl(void)
00623c  e92d03f0          PUSH     {r4-r9}
;;;9953   {
;;;9954   if(NPN_OUT!=npnoOFF)
006240  48f4              LDR      r0,|L1.26132|
;;;9955   	{
;;;9956   /*	if(NPN_SIGN==npnsAVNET)
;;;9957   		{
;;;9958   		if(net_av==1)
;;;9959   			{
;;;9960   			if(npn_tz_cnt<TZNPN)
;;;9961   				{
;;;9962   				npn_tz_cnt++;
;;;9963   				if(npn_tz_cnt==TZNPN)
;;;9964   					{
;;;9965   					npn_stat=npnsOFF;
;;;9966   					}
;;;9967   				}
;;;9968   			}
;;;9969   		else
;;;9970   			{
;;;9971   			if(npn_tz_cnt)
;;;9972   				{
;;;9973   				npn_tz_cnt--;
;;;9974   				if(npn_tz_cnt==0)
;;;9975   					{
;;;9976   					npn_stat=npnsON;
;;;9977   					}
;;;9978   				}
;;;9979   			}
;;;9980   		}*/
;;;9981   /*	if(NPN_SIGN==npnsULOAD)
;;;9982   		{
;;;9983   		if(load_U<UONPN)
;;;9984   			{
;;;9985   			if(npn_tz_cnt<TZNPN)
;;;9986   				{
;;;9987   				npn_tz_cnt++;
;;;9988   				if(npn_tz_cnt==TZNPN)
;;;9989   					{
;;;9990   					npn_stat=npnsOFF;
;;;9991   					}
;;;9992   				}
;;;9993   			}
;;;9994   		else if(load_U>UVNPN)
;;;9995   			{
;;;9996   			if(npn_tz_cnt)
;;;9997   				{
;;;9998   				npn_tz_cnt--;
;;;9999   				if(npn_tz_cnt==0)
;;;10000  					{
;;;10001  					npn_stat=npnsON;
;;;10002  					}
;;;10003  				}
;;;10004  			}
;;;10005  		}*/
;;;10006  
;;;10007  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10008  		{
;;;10009  		if(npn_tz_cnt<TZNPN)
006242  4ff5              LDR      r7,|L1.26136|
;;;10010  			{
;;;10011  			npn_tz_cnt++;
;;;10012  			if(npn_tz_cnt==TZNPN)
;;;10013  				{
;;;10014  				npn_stat=npnsOFF;
006244  4ef5              LDR      r6,|L1.26140|
006246  7800              LDRB     r0,[r0,#0]            ;9954  ; NPN_OUT
006248  f04f0c00          MOV      r12,#0                ;9954
;;;10015  				}
;;;10016  			}
;;;10017  		}
;;;10018  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10019  		{
;;;10020  		if(npn_tz_cnt)
;;;10021  			{
;;;10022  			npn_tz_cnt--;
;;;10023  			if(npn_tz_cnt==0)
;;;10024  				{
;;;10025  				npn_stat=npnsON;
00624c  f04f0801          MOV      r8,#1
006250  b3e8              CBZ      r0,|L1.25294|
006252  48f3              LDR      r0,|L1.26144|
006254  4639              MOV      r1,r7                 ;10009
006256  f9b05000          LDRSH    r5,[r0,#0]            ;10007  ; load_U
00625a  48f2              LDR      r0,|L1.26148|
00625c  f9b11000          LDRSH    r1,[r1,#0]            ;10009
006260  f9b09000          LDRSH    r9,[r0,#0]            ;10007  ; UONPN
006264  48f0              LDR      r0,|L1.26152|
006266  454d              CMP      r5,r9                 ;10007
006268  f9b02000          LDRSH    r2,[r0,#0]            ;10007
00626c  48ef              LDR      r0,|L1.26156|
00626e  f9b03000          LDRSH    r3,[r0,#0]            ;10007
006272  48ef              LDR      r0,|L1.26160|
006274  f9b04000          LDRSH    r4,[r0,#0]            ;10007
006278  48ee              LDR      r0,|L1.26164|
00627a  f9b00000          LDRSH    r0,[r0,#0]            ;10007
00627e  da13              BGE      |L1.25256|
006280  4282              CMP      r2,r0                 ;10007
006282  db03              BLT      |L1.25228|
006284  4283              CMP      r3,r0                 ;10007
006286  db01              BLT      |L1.25228|
006288  4284              CMP      r4,r0                 ;10007
00628a  da0d              BGE      |L1.25256|
                  |L1.25228|
00628c  48ea              LDR      r0,|L1.26168|
00628e  f9b02000          LDRSH    r2,[r0,#0]            ;10009  ; TZNPN
006292  4291              CMP      r1,r2                 ;10009
006294  da23              BGE      |L1.25310|
006296  f1010101          ADD      r1,r1,#1              ;10011
00629a  b208              SXTH     r0,r1                 ;10011
00629c  8038              STRH     r0,[r7,#0]            ;10011
00629e  4290              CMP      r0,r2                 ;10012
0062a0  d11d              BNE      |L1.25310|
0062a2  f886c000          STRB     r12,[r6,#0]           ;10014
0062a6  e01a              B        |L1.25310|
                  |L1.25256|
0062a8  f8dfc390          LDR      r12,|L1.26172|
0062ac  f9bcc000          LDRSH    r12,[r12,#0]          ;10018  ; UVNPN
0062b0  4565              CMP      r5,r12                ;10018
0062b2  dd14              BLE      |L1.25310|
0062b4  4282              CMP      r2,r0                 ;10018
0062b6  dd12              BLE      |L1.25310|
0062b8  4283              CMP      r3,r0                 ;10018
0062ba  dd10              BLE      |L1.25310|
0062bc  4284              CMP      r4,r0                 ;10018
0062be  dd0e              BLE      |L1.25310|
0062c0  b169              CBZ      r1,|L1.25310|
0062c2  f1a10101          SUB      r1,r1,#1              ;10022
0062c6  b208              SXTH     r0,r1                 ;10022
0062c8  8038              STRH     r0,[r7,#0]            ;10022
0062ca  b940              CBNZ     r0,|L1.25310|
0062cc  e000              B        |L1.25296|
                  |L1.25294|
0062ce  e002              B        |L1.25302|
                  |L1.25296|
0062d0  f8868000          STRB     r8,[r6,#0]
0062d4  e003              B        |L1.25310|
                  |L1.25302|
;;;10026  				}
;;;10027  			}
;;;10028  		}
;;;10029  	}
;;;10030  else
;;;10031  	{
;;;10032  	npn_tz_cnt=0;
0062d6  f8a7c000          STRH     r12,[r7,#0]
;;;10033  	npn_stat=npnsON;
0062da  f8868000          STRB     r8,[r6,#0]
                  |L1.25310|
;;;10034  	}
;;;10035  
;;;10036  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0062de  7830              LDRB     r0,[r6,#0]  ; npn_stat
0062e0  2800              CMP      r0,#0
0062e2  d107              BNE      |L1.25332|
0062e4  e8bd03f0          POP      {r4-r9}
0062e8  230f              MOVS     r3,#0xf
0062ea  2201              MOVS     r2,#1
0062ec  216e              MOVS     r1,#0x6e
0062ee  20d2              MOVS     r0,#0xd2
0062f0  f7ffbffe          B.W      mess_send
                  |L1.25332|
;;;10037  
;;;10038  
;;;10039  }
0062f4  e8bd03f0          POP      {r4-r9}
0062f8  4770              BX       lr
;;;10040  
                          ENDP

                  loadoff_hndl PROC
;;;10042  //-----------------------------------------------
;;;10043  void loadoff_hndl(void)
0062fa  b5f0              PUSH     {r4-r7,lr}
;;;10044  {
;;;10045  if((load_U>UONPN)||(load_U<UVNPN))
0062fc  48c8              LDR      r0,|L1.26144|
;;;10046  	{
;;;10047  	if(load_off_cnt<TZNPN)
0062fe  4dd0              LDR      r5,|L1.26176|
;;;10048  		{
;;;10049  		load_off_cnt++;
;;;10050  		if(load_off_cnt>=TZNPN)
;;;10051  			{
;;;10052  			load_off_stat=npnsOFF;
006300  2700              MOVS     r7,#0
006302  f9b01000          LDRSH    r1,[r0,#0]            ;10045  ; load_U
006306  48c7              LDR      r0,|L1.26148|
006308  4ece              LDR      r6,|L1.26180|
00630a  f9b02000          LDRSH    r2,[r0,#0]            ;10045  ; UONPN
00630e  f9b50000          LDRSH    r0,[r5,#0]            ;10047
006312  4291              CMP      r1,r2                 ;10045
006314  dc04              BGT      |L1.25376|
006316  4bc9              LDR      r3,|L1.26172|
006318  f9b33000          LDRSH    r3,[r3,#0]            ;10045  ; UVNPN
00631c  4299              CMP      r1,r3                 ;10045
00631e  da0d              BGE      |L1.25404|
                  |L1.25376|
006320  49c5              LDR      r1,|L1.26168|
006322  f9b11000          LDRSH    r1,[r1,#0]            ;10047  ; TZNPN
006326  4288              CMP      r0,r1                 ;10047
006328  da1c              BGE      |L1.25444|
00632a  f1000001          ADD      r0,r0,#1              ;10049
00632e  b200              SXTH     r0,r0                 ;10049
006330  8028              STRH     r0,[r5,#0]            ;10049
006332  4288              CMP      r0,r1                 ;10050
006334  db16              BLT      |L1.25444|
006336  7037              STRB     r7,[r6,#0]
;;;10053  			load_off_cnt=TZNPN;
006338  8029              STRH     r1,[r5,#0]
00633a  e013              B        |L1.25444|
                  |L1.25404|
;;;10054  			}
;;;10055  		}
;;;10056  	}
;;;10057  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
00633c  4cc2              LDR      r4,|L1.26184|
00633e  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
006342  4423              ADD      r3,r3,r4
006344  428b              CMP      r3,r1
006346  da0d              BGE      |L1.25444|
006348  1b12              SUBS     r2,r2,r4
00634a  428a              CMP      r2,r1
00634c  dd0a              BLE      |L1.25444|
;;;10058  	{
;;;10059  	if(load_off_cnt)
00634e  b148              CBZ      r0,|L1.25444|
;;;10060  		{
;;;10061  		load_off_cnt--;
006350  f1a00001          SUB      r0,r0,#1
006354  b200              SXTH     r0,r0
006356  8028              STRH     r0,[r5,#0]
;;;10062  		if(load_off_cnt<=0)
006358  2800              CMP      r0,#0
00635a  dc03              BGT      |L1.25444|
;;;10063  			{
;;;10064  			load_off_stat=npnsON;
00635c  f04f0001          MOV      r0,#1
006360  7030              STRB     r0,[r6,#0]
;;;10065  			load_off_cnt=0;
006362  802f              STRH     r7,[r5,#0]
                  |L1.25444|
;;;10066  			}
;;;10067  		}
;;;10068  	}
;;;10069  
;;;10070  
;;;10071  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006364  7830              LDRB     r0,[r6,#0]  ; load_off_stat
006366  2800              CMP      r0,#0
006368  d103              BNE      |L1.25458|
00636a  49b8              LDR      r1,|L1.26188|
00636c  f04f000a          MOV      r0,#0xa
006370  7008              STRB     r0,[r1,#0]
                  |L1.25458|
;;;10072  
;;;10073  
;;;10074  }
006372  bdf0              POP      {r4-r7,pc}
;;;10075  
                          ENDP

                  speedChargeStartStop PROC
;;;10263  //-----------------------------------------------
;;;10264  void speedChargeStartStop(void)
006374  b538              PUSH     {r3-r5,lr}
;;;10265  {
;;;10266  spch_plazma[1]++;
006376  4cb6              LDR      r4,|L1.26192|
006378  7860              LDRB     r0,[r4,#1]  ; spch_plazma
00637a  f1000001          ADD      r0,r0,#1
00637e  7060              STRB     r0,[r4,#1]
;;;10267  /*if(speedChIsOn)
;;;10268  	{
;;;10269  	speedChIsOn=0;
;;;10270  	}
;;;10271  
;;;10272  else
;;;10273  	{
;;;10274  	if(speedChrgBlckStat==0)
;;;10275  		{
;;;10276  		speedChIsOn=1;
;;;10277  		speedChTimeCnt=0;
;;;10278  		}
;;;10279  	else
;;;10280  		{
;;;10281  		show_mess(	"     Ускоренный     ",
;;;10282  	          		"       заряд        ",
;;;10283  	          		"    заблокирован!   ",
;;;10284  	          		"                    ",2000);	 
;;;10285  		}
;;;10286  	}*/
;;;10287  
;;;10288  if(sp_ch_stat!=scsOFF)
006380  48b4              LDR      r0,|L1.26196|
006382  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006384  b151              CBZ      r1,|L1.25500|
;;;10289  	{
;;;10290  	sp_ch_stat=scsOFF;
006386  f04f0100          MOV      r1,#0
00638a  7001              STRB     r1,[r0,#0]
;;;10291  	speedz_mem_hndl(10);
00638c  f04f000a          MOV      r0,#0xa
006390  f7fffffe          BL       speedz_mem_hndl
;;;10292  	spch_plazma[1]=10;
006394  f04f000a          MOV      r0,#0xa
006398  7060              STRB     r0,[r4,#1]
;;;10293  	}
;;;10294  
;;;10295  else
;;;10296  	{
;;;10297  	spch_plazma[1]=20;
;;;10298  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10299  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10300  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10301  		#endif
;;;10302  		)
;;;10303  		{
;;;10304  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10305  		sp_ch_stat=scsSTEP1;
;;;10306  		#else
;;;10307  		sp_ch_stat=scsWRK;
;;;10308  		#endif
;;;10309  		speedz_mem_hndl(1);
;;;10310  		}
;;;10311  	else 
;;;10312  		{
;;;10313  		show_mess(	"     Ускоренный     ",
;;;10314  	          		"       заряд        ",
;;;10315  	          		"    заблокирован!   ",
;;;10316  	          		"                    ",2000);
;;;10317  		}
;;;10318  	}
;;;10319  }
00639a  bd38              POP      {r3-r5,pc}
                  |L1.25500|
00639c  f04f0114          MOV      r1,#0x14              ;10297
0063a0  7061              STRB     r1,[r4,#1]            ;10297
0063a2  49ad              LDR      r1,|L1.26200|
0063a4  f9b12000          LDRSH    r2,[r1,#0]            ;10298  ; speedChrgBlckStat
0063a8  49ac              LDR      r1,|L1.26204|
0063aa  f8913022          LDRB     r3,[r1,#0x22]         ;10298  ; spc_stat
0063ae  ea420203          ORR      r2,r2,r3              ;10298
0063b2  794b              LDRB     r3,[r1,#5]            ;10298  ; vz1_stat
0063b4  79c9              LDRB     r1,[r1,#7]            ;10298  ; vz2_stat
0063b6  ea420203          ORR      r2,r2,r3              ;10298
0063ba  430a              ORRS     r2,r2,r1              ;10298
0063bc  d009              BEQ      |L1.25554|
0063be  f44f60fa          MOV      r0,#0x7d0             ;10313
0063c2  9000              STR      r0,[sp,#0]            ;10313
0063c4  4ba6              LDR      r3,|L1.26208|
0063c6  a2a7              ADR      r2,|L1.26212|
0063c8  a1ac              ADR      r1,|L1.26236|
0063ca  a0b2              ADR      r0,|L1.26260|
0063cc  f7fffffe          BL       show_mess
0063d0  bd38              POP      {r3-r5,pc}
                  |L1.25554|
0063d2  f04f0101          MOV      r1,#1                 ;10305
0063d6  7001              STRB     r1,[r0,#0]            ;10305
0063d8  e8bd4038          POP      {r3-r5,lr}            ;10309
0063dc  4608              MOV      r0,r1                 ;10309
0063de  f7ffbffe          B.W      speedz_mem_hndl
;;;10320  
                          ENDP

                  speedChargeHndl PROC
;;;10076  //-----------------------------------------------
;;;10077  void speedChargeHndl(void)
0063e2  e92d4ff8          PUSH     {r3-r11,lr}
;;;10078  {
;;;10079  /*
;;;10080  if(sp_ch_stat==scsOFF)
;;;10081  	{
;;;10082  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10083  	}*/
;;;10084  	 
;;;10085  if(sp_ch_stat==scsSTEP1)
0063e6  4f9b              LDR      r7,|L1.26196|
;;;10086  	{
;;;10087  	if(sp_ch_stat_old!=sp_ch_stat)
0063e8  4eb2              LDR      r6,|L1.26292|
;;;10088  		{
;;;10089  		sp_ch_stat_cnt=5;
;;;10090  		if(SP_CH_VENT_BLOK==0)
0063ea  f8dfa2c0          LDR      r10,|L1.26284|
0063ee  7839              LDRB     r1,[r7,#0]            ;10085  ; sp_ch_stat
;;;10091  			{
;;;10092  			sp_ch_stat_cnt=0;
;;;10093  			sp_ch_stat=scsWRK;
;;;10094  			}
;;;10095  		}
;;;10096  	if(sp_ch_stat_cnt)
;;;10097  		{
;;;10098  		sp_ch_stat_cnt--;
;;;10099  		if(sp_ch_stat_cnt==0)
;;;10100  			{
;;;10101  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10102  
;;;10103  			}
;;;10104  		}
;;;10105  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0063f0  f8df92bc          LDR      r9,|L1.26288|
0063f4  7830              LDRB     r0,[r6,#0]            ;10087
0063f6  4cb0              LDR      r4,|L1.26296|
0063f8  2500              MOVS     r5,#0                 ;10090
0063fa  f04f0802          MOV      r8,#2                 ;10093
0063fe  2901              CMP      r1,#1                 ;10085
006400  d11b              BNE      |L1.25658|
006402  2801              CMP      r0,#1                 ;10087
006404  d008              BEQ      |L1.25624|
006406  f04f0105          MOV      r1,#5                 ;10089
00640a  8021              STRH     r1,[r4,#0]            ;10089
00640c  f8ba1000          LDRH     r1,[r10,#0]           ;10090  ; SP_CH_VENT_BLOK
006410  b911              CBNZ     r1,|L1.25624|
006412  8025              STRH     r5,[r4,#0]            ;10092
006414  f8878000          STRB     r8,[r7,#0]            ;10093
                  |L1.25624|
006418  f9b41000          LDRSH    r1,[r4,#0]            ;10096  ; sp_ch_stat_cnt
00641c  b139              CBZ      r1,|L1.25646|
00641e  f1a10101          SUB      r1,r1,#1              ;10098
006422  b209              SXTH     r1,r1                 ;10098
006424  8021              STRH     r1,[r4,#0]            ;10098
006426  b911              CBNZ     r1,|L1.25646|
006428  f04f0103          MOV      r1,#3                 ;10101
00642c  7039              STRB     r1,[r7,#0]            ;10101
                  |L1.25646|
00642e  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
006432  2901              CMP      r1,#1
006434  d101              BNE      |L1.25658|
006436  f8878000          STRB     r8,[r7,#0]
                  |L1.25658|
;;;10106  	}
;;;10107  
;;;10108  if(sp_ch_stat==scsWRK)
00643a  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
00643c  2902              CMP      r1,#2
00643e  d123              BNE      |L1.25736|
;;;10109  	{
;;;10110  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10111  		{
;;;10112  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006440  4a9e              LDR      r2,|L1.26300|
;;;10113  		hv_vz_up_cnt=0;
006442  499f              LDR      r1,|L1.26304|
006444  2802              CMP      r0,#2                 ;10110
006446  d008              BEQ      |L1.25690|
006448  489e              LDR      r0,|L1.26308|
00644a  f44f6361          MOV      r3,#0xe10             ;10112
00644e  f9b00000          LDRSH    r0,[r0,#0]            ;10112  ; speedChrgTimeInHour
006452  fb00f003          MUL      r0,r0,r3              ;10112
006456  6010              STR      r0,[r2,#0]            ;10112  ; sp_ch_wrk_cnt
006458  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.25690|
;;;10114  		}
;;;10115  	sp_ch_wrk_cnt--;
00645a  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
00645c  f1a00001          SUB      r0,r0,#1
006460  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10116  	hv_vz_up_cnt++;
006462  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006464  f1020201          ADD      r2,r2,#1
006468  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10117  	if(sp_ch_wrk_cnt==0)
00646a  b918              CBNZ     r0,|L1.25716|
;;;10118  		{
;;;10119  		sp_ch_stat=scsOFF;
00646c  703d              STRB     r5,[r7,#0]
;;;10120  		speedz_mem_hndl(0);
00646e  2000              MOVS     r0,#0
006470  f7fffffe          BL       speedz_mem_hndl
                  |L1.25716|
;;;10121  		}
;;;10122  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10123  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006474  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006478  b930              CBNZ     r0,|L1.25736|
00647a  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
00647e  2801              CMP      r0,#1
006480  d102              BNE      |L1.25736|
006482  f04f0004          MOV      r0,#4
006486  7038              STRB     r0,[r7,#0]
                  |L1.25736|
;;;10124  	#endif
;;;10125  	}
;;;10126  
;;;10127  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006488  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10128  	{
;;;10129  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10130  		{
;;;10131  		sp_ch_stat_cnt=10;
;;;10132  		}
;;;10133  	sp_ch_stat_cnt--;
;;;10134  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10135  		{
;;;10136  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
00648a  f2413b88          MOV      r11,#0x1388
00648e  f04f0a0a          MOV      r10,#0xa              ;10131
006492  2803              CMP      r0,#3                 ;10127
006494  d119              BNE      |L1.25802|
006496  7830              LDRB     r0,[r6,#0]            ;10129  ; sp_ch_stat_old
006498  2803              CMP      r0,#3                 ;10129
00649a  d101              BNE      |L1.25760|
00649c  8820              LDRH     r0,[r4,#0]            ;10129  ; sp_ch_stat_cnt
00649e  b908              CBNZ     r0,|L1.25764|
                  |L1.25760|
0064a0  f8a4a000          STRH     r10,[r4,#0]           ;10131
                  |L1.25764|
0064a4  8820              LDRH     r0,[r4,#0]            ;10133  ; sp_ch_stat_cnt
0064a6  f1a00001          SUB      r0,r0,#1              ;10133
0064aa  b200              SXTH     r0,r0                 ;10133
0064ac  8020              STRH     r0,[r4,#0]            ;10133
0064ae  280a              CMP      r0,#0xa               ;10134
0064b0  d001              BEQ      |L1.25782|
0064b2  2809              CMP      r0,#9                 ;10134
0064b4  d109              BNE      |L1.25802|
                  |L1.25782|
0064b6  4b84              LDR      r3,|L1.26312|
0064b8  a084              ADR      r0,|L1.26316|
0064ba  f1030218          ADD      r2,r3,#0x18
0064be  f1020118          ADD      r1,r2,#0x18
0064c2  f8cdb000          STR      r11,[sp,#0]
0064c6  f7fffffe          BL       show_mess
                  |L1.25802|
;;;10137  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10138  					"      ВКЛЮЧЕН       ",
;;;10139  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10140  					5000);
;;;10141  		}
;;;10142  	}
;;;10143  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
0064ca  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0064cc  2804              CMP      r0,#4
0064ce  d11f              BNE      |L1.25872|
;;;10144  	{
;;;10145  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
0064d0  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
0064d2  2804              CMP      r0,#4
0064d4  d101              BNE      |L1.25818|
0064d6  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0064d8  b908              CBNZ     r0,|L1.25822|
                  |L1.25818|
;;;10146  		{
;;;10147  		sp_ch_stat_cnt=10;
0064da  f8a4a000          STRH     r10,[r4,#0]
                  |L1.25822|
;;;10148  		}
;;;10149  	sp_ch_stat_cnt--;
0064de  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0064e0  f1a00001          SUB      r0,r0,#1
0064e4  b200              SXTH     r0,r0
0064e6  8020              STRH     r0,[r4,#0]
;;;10150  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
0064e8  280a              CMP      r0,#0xa
0064ea  d001              BEQ      |L1.25840|
0064ec  2809              CMP      r0,#9
0064ee  d109              BNE      |L1.25860|
                  |L1.25840|
;;;10151  		{
;;;10152  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0064f0  4b7c              LDR      r3,|L1.26340|
0064f2  a076              ADR      r0,|L1.26316|
0064f4  f1030218          ADD      r2,r3,#0x18
0064f8  f1020118          ADD      r1,r2,#0x18
0064fc  f8cdb000          STR      r11,[sp,#0]
006500  f7fffffe          BL       show_mess
                  |L1.25860|
;;;10153  					"    ЗАБЛОКИРОВАН    ",
;;;10154  					"     НЕИСПРАВНА     ",
;;;10155  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10156  					5000);
;;;10157  		}
;;;10158  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006504  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006508  2801              CMP      r0,#1
00650a  d101              BNE      |L1.25872|
00650c  f8878000          STRB     r8,[r7,#0]
                  |L1.25872|
;;;10159  	}
;;;10160  
;;;10161  
;;;10162  sp_ch_stat_old=sp_ch_stat;
006510  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006512  7030              STRB     r0,[r6,#0]
;;;10163  
;;;10164  
;;;10165  
;;;10166  if(speedChrgAvtEn==1)
006514  4974              LDR      r1,|L1.26344|
;;;10167  	{
;;;10168  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10169  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10170  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10171  		#endif
;;;10172  		)
;;;10173  		{
;;;10174  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10175  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10176  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10177  		#endif
;;;10178  		#ifdef UKU_220_V2
;;;10179  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10180  		#endif
;;;10181  		&&(!speedChrgBlckStat))
006516  4c50              LDR      r4,|L1.26200|
006518  8809              LDRH     r1,[r1,#0]            ;10166  ; speedChrgAvtEn
00651a  2901              CMP      r1,#1                 ;10166
00651c  d10a              BNE      |L1.25908|
00651e  494f              LDR      r1,|L1.26204|
;;;10182  			{
;;;10183  			speedChargeStartCnt++;
006520  4e72              LDR      r6,|L1.26348|
006522  f8912022          LDRB     r2,[r1,#0x22]         ;10168  ; spc_stat
006526  4310              ORRS     r0,r0,r2              ;10168
006528  794a              LDRB     r2,[r1,#5]            ;10168  ; vz1_stat
00652a  79c9              LDRB     r1,[r1,#7]            ;10168  ; vz2_stat
00652c  4310              ORRS     r0,r0,r2              ;10168
00652e  4308              ORRS     r0,r0,r1              ;10168
006530  d007              BEQ      |L1.25922|
;;;10184  			if(speedChargeStartCnt>=60)
;;;10185  				{
;;;10186  				speedChargeStartStop();
;;;10187  				speedz_mem_hndl(5);
;;;10188  				}
;;;10189  			}
;;;10190  		else speedChargeStartCnt=0;
;;;10191  		}
;;;10192  	else speedChargeStartCnt=0;
006532  7035              STRB     r5,[r6,#0]
                  |L1.25908|
;;;10193  	}
;;;10194  
;;;10195  
;;;10196  
;;;10197  /*
;;;10198  if(speedChIsOn)
;;;10199  	{
;;;10200  	speedChTimeCnt++;
;;;10201  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10202  		{
;;;10203  		speedChIsOn=0;
;;;10204  		}
;;;10205  	if(speedChrgBlckStat)
;;;10206  		{
;;;10207  		speedChIsOn=0;
;;;10208  		speedChTimeCnt=0;
;;;10209  		}
;;;10210  	}
;;;10211  
;;;10212  
;;;10213  
;;;10214  if(speedChrgAvtEn)
;;;10215  	{
;;;10216  	if(!speedChIsOn)
;;;10217  		{
;;;10218  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10219  			{
;;;10220  			speedChIsOn=1;
;;;10221  			}
;;;10222  		}
;;;10223  	}
;;;10224  
;;;10225  
;;;10226  */
;;;10227  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006534  486e              LDR      r0,|L1.26352|
006536  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006538  2802              CMP      r0,#2
00653a  d02e              BEQ      |L1.26010|
00653c  8025              STRH     r5,[r4,#0]
                  |L1.25918|
;;;10228  else
;;;10229  	{
;;;10230  	speedChrgBlckStat=0;
;;;10231  	if(speedChrgBlckSrc==1)
;;;10232  		{
;;;10233  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10234  		}
;;;10235  	else if(speedChrgBlckSrc==2)
;;;10236  		{
;;;10237  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10238  		}
;;;10239  	}
;;;10240  
;;;10241  /*
;;;10242  if(speedChrgBlckStat==1)
;;;10243  	{
;;;10244  
;;;10245  	//speedChargeStartStop();
;;;10246  
;;;10247  	speedChrgShowCnt++;
;;;10248  	if(speedChrgShowCnt>=30)	
;;;10249  		{
;;;10250  		speedChrgShowCnt=0;
;;;10251  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10252  					"       ЗАРЯД        ",
;;;10253  					"     ЗАПРЕЩЕН!!!    ",
;;;10254  					"                    ",
;;;10255  					5000);
;;;10256  		}
;;;10257  	} 
;;;10258  else speedChrgShowCnt=0;  */
;;;10259  
;;;10260  
;;;10261  }
00653e  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.25922|
006542  4837              LDR      r0,|L1.26144|
006544  496b              LDR      r1,|L1.26356|
006546  f9b00000          LDRSH    r0,[r0,#0]            ;10174  ; load_U
00654a  f9b11000          LDRSH    r1,[r1,#0]            ;10174  ; u_necc
00654e  4288              CMP      r0,r1                 ;10174
006550  da14              BGE      |L1.25980|
006552  1a08              SUBS     r0,r1,r0              ;10174
006554  4968              LDR      r1,|L1.26360|
006556  f9b11000          LDRSH    r1,[r1,#0]            ;10174  ; speedChrgDU
00655a  4288              CMP      r0,r1                 ;10174
00655c  dd0e              BLE      |L1.25980|
00655e  4867              LDR      r0,|L1.26364|
006560  4967              LDR      r1,|L1.26368|
006562  f9b00000          LDRSH    r0,[r0,#0]            ;10176  ; Ib_ips_termokompensat
006566  8809              LDRH     r1,[r1,#0]            ;10176  ; IZMAX
006568  fb90f0fa          SDIV     r0,r0,r10             ;10176
00656c  1a40              SUBS     r0,r0,r1              ;10176
00656e  b200              SXTH     r0,r0                 ;10176
006570  f7fffffe          BL       abs
006574  2805              CMP      r0,#5                 ;10176
006576  da01              BGE      |L1.25980|
006578  8820              LDRH     r0,[r4,#0]            ;10181  ; speedChrgBlckStat
00657a  b108              CBZ      r0,|L1.25984|
                  |L1.25980|
00657c  7035              STRB     r5,[r6,#0]            ;10190
00657e  e7d9              B        |L1.25908|
                  |L1.25984|
006580  7830              LDRB     r0,[r6,#0]            ;10183  ; speedChargeStartCnt
006582  f1000001          ADD      r0,r0,#1              ;10183
006586  b2c0              UXTB     r0,r0                 ;10183
006588  7030              STRB     r0,[r6,#0]            ;10183
00658a  283c              CMP      r0,#0x3c              ;10184
00658c  d3d2              BCC      |L1.25908|
00658e  f7fffffe          BL       speedChargeStartStop
006592  2005              MOVS     r0,#5                 ;10187
006594  f7fffffe          BL       speedz_mem_hndl
006598  e7cc              B        |L1.25908|
                  |L1.26010|
00659a  8025              STRH     r5,[r4,#0]            ;10230
00659c  4859              LDR      r0,|L1.26372|
00659e  495a              LDR      r1,|L1.26376|
0065a0  f44f63fa          MOV      r3,#0x7d0             ;10233
0065a4  f9b00000          LDRSH    r0,[r0,#0]            ;10237  ; speedChrgBlckLog
0065a8  b918              CBNZ     r0,|L1.26034|
0065aa  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10237  ; adc_buff_
0065ae  429a              CMP      r2,r3                 ;10237
0065b0  dc05              BGT      |L1.26046|
                  |L1.26034|
0065b2  2801              CMP      r0,#1                 ;10237
0065b4  d1c3              BNE      |L1.25918|
0065b6  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10237  ; adc_buff_
0065ba  4298              CMP      r0,r3                 ;10237
0065bc  dabf              BGE      |L1.25918|
                  |L1.26046|
0065be  f04f0001          MOV      r0,#1                 ;10237
0065c2  8020              STRH     r0,[r4,#0]            ;10237
0065c4  e7bb              B        |L1.25918|
;;;10262  
                          ENDP

                  averageChargeHndl PROC
;;;10321  //-----------------------------------------------
;;;10322  void averageChargeHndl(void)
0065c6  e92d4ff8          PUSH     {r3-r11,lr}
;;;10323  {
;;;10324  /*
;;;10325  if(hv_vz_stat==hvsOFF)
;;;10326  	{
;;;10327  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10328  	} */
;;;10329  if(hv_vz_stat!=hvsOFF)
0065ca  f8dfa140          LDR      r10,|L1.26380|
0065ce  f04f0b00          MOV      r11,#0
0065d2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0065d6  b130              CBZ      r0,|L1.26086|
;;;10330  	{
;;;10331  	hv_vz_stat=hvsOFF; 	
0065d8  f88ab000          STRB     r11,[r10,#0]
;;;10332  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
0065dc  2100              MOVS     r1,#0
0065de  f44f70b4          MOV      r0,#0x168
0065e2  f7fffffe          BL       lc640_write
                  |L1.26086|
;;;10333  	}
;;;10334  
;;;10335  if(hv_vz_stat==hvsSTEP1)
0065e6  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10336  	{
;;;10337  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10338  		{
;;;10339  		hv_vz_stat_cnt=5;
;;;10340  		}
;;;10341  	if(hv_vz_stat_cnt)
;;;10342  		{
;;;10343  		hv_vz_stat_cnt--;
;;;10344  		if(hv_vz_stat_cnt==0)
;;;10345  			{
;;;10346  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10347  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10348  			}
;;;10349  		}
;;;10350  	if(sk_stat[0]==1)
0065ea  4e31              LDR      r6,|L1.26288|
0065ec  4d48              LDR      r5,|L1.26384|
0065ee  4c49              LDR      r4,|L1.26388|
0065f0  f04f0905          MOV      r9,#5                 ;10339
0065f4  2801              CMP      r0,#1                 ;10335
0065f6  d109              BNE      |L1.26124|
0065f8  7828              LDRB     r0,[r5,#0]            ;10337  ; hv_vz_stat_old
0065fa  2801              CMP      r0,#1                 ;10337
0065fc  d001              BEQ      |L1.26114|
0065fe  f8a49000          STRH     r9,[r4,#0]            ;10339
                  |L1.26114|
006602  f9b40000          LDRSH    r0,[r4,#0]            ;10341  ; hv_vz_stat_cnt
006606  b100              CBZ      r0,|L1.26122|
006608  e086              B        |L1.26392|
                  |L1.26122|
00660a  e093              B        |L1.26420|
                  |L1.26124|
00660c  e0ae              B        |L1.26476|
00660e  0000              DCW      0x0000
                  |L1.26128|
                          DCD      superviser_cnt
                  |L1.26132|
                          DCD      NPN_OUT
                  |L1.26136|
                          DCD      npn_tz_cnt
                  |L1.26140|
                          DCD      npn_stat
                  |L1.26144|
                          DCD      load_U
                  |L1.26148|
                          DCD      UONPN
                  |L1.26152|
                          DCD      net_Ua
                  |L1.26156|
                          DCD      net_Ub
                  |L1.26160|
                          DCD      net_Uc
                  |L1.26164|
                          DCD      UMN
                  |L1.26168|
                          DCD      TZNPN
                  |L1.26172|
                          DCD      UVNPN
                  |L1.26176|
                          DCD      load_off_cnt
                  |L1.26180|
                          DCD      load_off_stat
                  |L1.26184|
                          DCD      dUNPN
                  |L1.26188|
                          DCD      tloaddisable_cmnd
                  |L1.26192|
                          DCD      spch_plazma
                  |L1.26196|
                          DCD      sp_ch_stat
                  |L1.26200|
                          DCD      speedChrgBlckStat
                  |L1.26204|
                          DCD      ||area_number.25||
                  |L1.26208|
                          DCD      ||.text||+0x1a54
                  |L1.26212|
006664  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006668  e7e0e1eb
00666c  eeeae8f0
006670  eee2e0ed
006674  21      
006675  20202000          DCB      "   ",0
006679  00                DCB      0
00667a  00                DCB      0
00667b  00                DCB      0
                  |L1.26236|
00667c  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006680  202020e7
006684  e0f0ffe4
006688  20202020
00668c  20202020
006690  00      
006691  00                DCB      0
006692  00                DCB      0
006693  00                DCB      0
                  |L1.26260|
006694  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006698  20d3f1ea
00669c  eef0e5ed
0066a0  edfbe920
0066a4  20202020
0066a8  00      
0066a9  00                DCB      0
0066aa  00                DCB      0
0066ab  00                DCB      0
                  |L1.26284|
                          DCD      SP_CH_VENT_BLOK
                  |L1.26288|
                          DCD      sk_stat
                  |L1.26292|
                          DCD      sp_ch_stat_old
                  |L1.26296|
                          DCD      sp_ch_stat_cnt
                  |L1.26300|
                          DCD      sp_ch_wrk_cnt
                  |L1.26304|
                          DCD      hv_vz_up_cnt
                  |L1.26308|
                          DCD      speedChrgTimeInHour
                  |L1.26312|
                          DCD      ||.text||+0x191c
                  |L1.26316|
0066cc  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
0066d0  caced0c5
0066d4  cdcddbc9
0066d8  20c7c0  
0066db  d0dfc420          DCB      208,223,196,"  ",0
0066df  2000    
0066e1  00                DCB      0
0066e2  00                DCB      0
0066e3  00                DCB      0
                  |L1.26340|
                          DCD      ||.text||+0x145c
                  |L1.26344|
                          DCD      speedChrgAvtEn
                  |L1.26348|
                          DCD      speedChargeStartCnt
                  |L1.26352|
                          DCD      speedChrgBlckSrc
                  |L1.26356|
                          DCD      u_necc
                  |L1.26360|
                          DCD      speedChrgDU
                  |L1.26364|
                          DCD      Ib_ips_termokompensat
                  |L1.26368|
                          DCD      IZMAX
                  |L1.26372|
                          DCD      speedChrgBlckLog
                  |L1.26376|
                          DCD      ||.bss||+0x40c
                  |L1.26380|
                          DCD      hv_vz_stat
                  |L1.26384|
                          DCD      hv_vz_stat_old
                  |L1.26388|
                          DCD      hv_vz_stat_cnt
                  |L1.26392|
006718  f1a00001          SUB      r0,r0,#1              ;10343
00671c  b200              SXTH     r0,r0                 ;10343
00671e  8020              STRH     r0,[r4,#0]            ;10343
006720  b940              CBNZ     r0,|L1.26420|
006722  f04f0006          MOV      r0,#6                 ;10346
006726  f88a0000          STRB     r0,[r10,#0]           ;10346
00672a  4601              MOV      r1,r0                 ;10347
00672c  f44f70b4          MOV      r0,#0x168             ;10347
006730  f7fffffe          BL       lc640_write
                  |L1.26420|
006734  7830              LDRB     r0,[r6,#0]  ; sk_stat
006736  2801              CMP      r0,#1
006738  d118              BNE      |L1.26476|
;;;10351  		{
;;;10352  		hv_vz_stat=hvsSTEP2;
00673a  f04f0002          MOV      r0,#2
00673e  f88a0000          STRB     r0,[r10,#0]
;;;10353  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006742  4601              MOV      r1,r0
006744  f44f70b4          MOV      r0,#0x168
006748  f7fffffe          BL       lc640_write
;;;10354  		tree_up(iHV_STEP2_2,1,0,0);
00674c  2300              MOVS     r3,#0
00674e  461a              MOV      r2,r3
006750  2101              MOVS     r1,#1
006752  20dc              MOVS     r0,#0xdc
006754  f7fffffe          BL       tree_up
;;;10355  		tree_up(iHV_STEP2_1,0,0,0);
006758  2300              MOVS     r3,#0
00675a  461a              MOV      r2,r3
00675c  4619              MOV      r1,r3
00675e  20db              MOVS     r0,#0xdb
006760  f7fffffe          BL       tree_up
;;;10356  		ret(1200);
006764  f44f6096          MOV      r0,#0x4b0
006768  f7fffffe          BL       ||ret||
                  |L1.26476|
;;;10357  		}
;;;10358  	}
;;;10359  
;;;10360  if(hv_vz_stat==hvsSTEP2)
00676c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006770  2802              CMP      r0,#2
006772  d10b              BNE      |L1.26508|
;;;10361  	{
;;;10362  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006774  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006776  2902              CMP      r1,#2
006778  d101              BNE      |L1.26494|
00677a  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
00677c  b911              CBNZ     r1,|L1.26500|
                  |L1.26494|
;;;10363  		{
;;;10364  		hv_vz_stat_cnt=15;
00677e  f04f010f          MOV      r1,#0xf
006782  8021              STRH     r1,[r4,#0]
                  |L1.26500|
;;;10365  		}
;;;10366  	hv_vz_stat_cnt--;
006784  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006786  f1a10101          SUB      r1,r1,#1
00678a  8021              STRH     r1,[r4,#0]
                  |L1.26508|
;;;10367  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10368  	//	{
;;;10369  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10370  	//				"  Напряжение будет  ",
;;;10371  	//				" увеличено до     @В",
;;;10372  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10373  	//				4800,UVZ,1);
;;;10374  	//	}
;;;10375  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10376  	//	{
;;;10377  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10378  	//				"     НАЖАТИЕМ       ",
;;;10379  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10380  	//				"      КНОПКИ        ",
;;;10381  	//				4800);
;;;10382  	//	} 
;;;10383  /*	if(sk_stat[1]==1)
;;;10384  		{
;;;10385  		hv_vz_stat=hvsWRK;
;;;10386  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10387  		}*/
;;;10388  	}
;;;10389  
;;;10390  if(hv_vz_stat==hvsSTEP3)
;;;10391  	{
;;;10392  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10393  		{
;;;10394  		hv_vz_stat_cnt=10;
00678c  270a              MOVS     r7,#0xa
;;;10395  		}
;;;10396  	hv_vz_stat_cnt--;
;;;10397  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10398  		{
;;;10399  		show_mess(	"     ВКЛЮЧИТЕ       ",
00678e  f2413888          MOV      r8,#0x1388
006792  2803              CMP      r0,#3                 ;10390
006794  d122              BNE      |L1.26588|
006796  7828              LDRB     r0,[r5,#0]            ;10392  ; hv_vz_stat_old
006798  2803              CMP      r0,#3                 ;10392
00679a  d101              BNE      |L1.26528|
00679c  8820              LDRH     r0,[r4,#0]            ;10392  ; hv_vz_stat_cnt
00679e  b900              CBNZ     r0,|L1.26530|
                  |L1.26528|
0067a0  8027              STRH     r7,[r4,#0]            ;10394
                  |L1.26530|
0067a2  8820              LDRH     r0,[r4,#0]            ;10396  ; hv_vz_stat_cnt
0067a4  f1a00001          SUB      r0,r0,#1              ;10396
0067a8  b200              SXTH     r0,r0                 ;10396
0067aa  8020              STRH     r0,[r4,#0]            ;10396
0067ac  280a              CMP      r0,#0xa               ;10397
0067ae  d001              BEQ      |L1.26548|
0067b0  2809              CMP      r0,#9                 ;10397
0067b2  d109              BNE      |L1.26568|
                  |L1.26548|
0067b4  4bfe              LDR      r3,|L1.27568|
0067b6  a2ff              ADR      r2,|L1.27572|
0067b8  f5a37194          SUB      r1,r3,#0x128
0067bc  f1010018          ADD      r0,r1,#0x18
0067c0  f8cd8000          STR      r8,[sp,#0]
0067c4  f7fffffe          BL       show_mess
                  |L1.26568|
;;;10400  					"      ТУМБЛЕР       ",
;;;10401  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10402  					"       ЗАРЯД        ",
;;;10403  					5000);
;;;10404  		}
;;;10405  	if(sk_stat[1]==1)
0067c8  7870              LDRB     r0,[r6,#1]  ; sk_stat
0067ca  2801              CMP      r0,#1
0067cc  d106              BNE      |L1.26588|
;;;10406  		{
;;;10407  		hv_vz_stat=hvsWRK;
0067ce  f88a9000          STRB     r9,[r10,#0]
;;;10408  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0067d2  2105              MOVS     r1,#5
0067d4  f44f70b4          MOV      r0,#0x168
0067d8  f7fffffe          BL       lc640_write
                  |L1.26588|
;;;10409  		}
;;;10410  	}
;;;10411  
;;;10412  if(hv_vz_stat==hvsWRK)
0067dc  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0067e0  2805              CMP      r0,#5
0067e2  d13a              BNE      |L1.26714|
;;;10413  	{
;;;10414  	if(hv_vz_stat_old!=hv_vz_stat)
0067e4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10415  		{
;;;10416  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
0067e6  4af9              LDR      r2,|L1.27596|
;;;10417  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10418  		hv_vz_up_cnt=0L;
0067e8  49f9              LDR      r1,|L1.27600|
0067ea  2805              CMP      r0,#5                 ;10414
0067ec  d00d              BEQ      |L1.26634|
0067ee  48f9              LDR      r0,|L1.27604|
0067f0  f44f6361          MOV      r3,#0xe10             ;10416
0067f4  f9b00000          LDRSH    r0,[r0,#0]            ;10416  ; VZ_HR
0067f8  fb00f303          MUL      r3,r0,r3              ;10416
0067fc  6013              STR      r3,[r2,#0]            ;10416  ; hv_vz_wrk_cnt
0067fe  b910              CBNZ     r0,|L1.26630|
006800  f44f60e1          MOV      r0,#0x708             ;10417
006804  6010              STR      r0,[r2,#0]            ;10417  ; hv_vz_wrk_cnt
                  |L1.26630|
006806  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.26634|
;;;10419  		}
;;;10420  	hv_vz_wrk_cnt--;
00680a  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
00680c  f1a00001          SUB      r0,r0,#1
006810  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10421  	hv_vz_up_cnt++;
006812  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006814  f1020201          ADD      r2,r2,#1
006818  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10422  
;;;10423  	if(hv_vz_wrk_cnt==0)
00681a  b940              CBNZ     r0,|L1.26670|
;;;10424  		{
;;;10425  		hv_vz_stat=hvsERR4;
00681c  f04f0009          MOV      r0,#9
006820  f88a0000          STRB     r0,[r10,#0]
;;;10426  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006824  4601              MOV      r1,r0
006826  f44f70b4          MOV      r0,#0x168
00682a  f7fffffe          BL       lc640_write
                  |L1.26670|
;;;10427  		}
;;;10428  	if(sk_stat[0]==0)
00682e  7830              LDRB     r0,[r6,#0]  ; sk_stat
006830  b940              CBNZ     r0,|L1.26692|
;;;10429  		{
;;;10430  		hv_vz_stat=hvsERR2;
006832  f04f0007          MOV      r0,#7
006836  f88a0000          STRB     r0,[r10,#0]
;;;10431  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
00683a  4601              MOV      r1,r0
00683c  f44f70b4          MOV      r0,#0x168
006840  f7fffffe          BL       lc640_write
                  |L1.26692|
;;;10432  		}
;;;10433  	if(sk_stat[1]==0)
006844  7870              LDRB     r0,[r6,#1]  ; sk_stat
006846  b940              CBNZ     r0,|L1.26714|
;;;10434  		{
;;;10435  		hv_vz_stat=hvsERR3;
006848  f04f0008          MOV      r0,#8
00684c  f88a0000          STRB     r0,[r10,#0]
;;;10436  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006850  4601              MOV      r1,r0
006852  f44f70b4          MOV      r0,#0x168
006856  f7fffffe          BL       lc640_write
                  |L1.26714|
;;;10437  		}
;;;10438  	}
;;;10439  
;;;10440  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
00685a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00685e  2806              CMP      r0,#6
006860  d11a              BNE      |L1.26776|
;;;10441  	{
;;;10442  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006862  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006864  2806              CMP      r0,#6
006866  d101              BNE      |L1.26732|
006868  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00686a  b900              CBNZ     r0,|L1.26734|
                  |L1.26732|
;;;10443  		{
;;;10444  		hv_vz_stat_cnt=10;
00686c  8027              STRH     r7,[r4,#0]
                  |L1.26734|
;;;10445  		}
;;;10446  	hv_vz_stat_cnt--;
00686e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006870  f1a00001          SUB      r0,r0,#1
006874  b200              SXTH     r0,r0
006876  8020              STRH     r0,[r4,#0]
;;;10447  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006878  280a              CMP      r0,#0xa
00687a  d001              BEQ      |L1.26752|
00687c  2809              CMP      r0,#9
00687e  d10b              BNE      |L1.26776|
                  |L1.26752|
;;;10448  		{
;;;10449  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006880  4bcb              LDR      r3,|L1.27568|
006882  f8cd8000          STR      r8,[sp,#0]
006886  3bf0              SUBS     r3,r3,#0xf0
006888  f1030218          ADD      r2,r3,#0x18
00688c  f1020118          ADD      r1,r2,#0x18
006890  f5a16095          SUB      r0,r1,#0x4a8
006894  f7fffffe          BL       show_mess
                  |L1.26776|
;;;10450  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10451  					"      ВКЛЮЧЕН       ",
;;;10452  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10453  					5000);
;;;10454  		}
;;;10455  	}
;;;10456  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006898  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00689c  2807              CMP      r0,#7
00689e  d123              BNE      |L1.26856|
;;;10457  	{
;;;10458  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
0068a0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
0068a2  2807              CMP      r0,#7
0068a4  d101              BNE      |L1.26794|
0068a6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068a8  b900              CBNZ     r0,|L1.26796|
                  |L1.26794|
;;;10459  		{
;;;10460  		hv_vz_stat_cnt=10;
0068aa  8027              STRH     r7,[r4,#0]
                  |L1.26796|
;;;10461  		}
;;;10462  	hv_vz_stat_cnt--;
0068ac  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068ae  f1a00001          SUB      r0,r0,#1
0068b2  b200              SXTH     r0,r0
0068b4  8020              STRH     r0,[r4,#0]
;;;10463  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
0068b6  280a              CMP      r0,#0xa
0068b8  d001              BEQ      |L1.26814|
0068ba  2809              CMP      r0,#9
0068bc  d10a              BNE      |L1.26836|
                  |L1.26814|
;;;10464  		{
;;;10465  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0068be  4bc6              LDR      r3,|L1.27608|
0068c0  f8cd8000          STR      r8,[sp,#0]
0068c4  f1030218          ADD      r2,r3,#0x18
0068c8  f1020118          ADD      r1,r2,#0x18
0068cc  f1010018          ADD      r0,r1,#0x18
0068d0  f7fffffe          BL       show_mess
                  |L1.26836|
;;;10466  					"    ЗАБЛОКИРОВАН    ",
;;;10467  					"     НЕИСПРАВНА     ",
;;;10468  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10469  					5000);
;;;10470  		}
;;;10471  	if(sk_stat[0]==1)
0068d4  7830              LDRB     r0,[r6,#0]  ; sk_stat
0068d6  2801              CMP      r0,#1
0068d8  d106              BNE      |L1.26856|
;;;10472  		{
;;;10473  		hv_vz_stat=hvsWRK;
0068da  f88a9000          STRB     r9,[r10,#0]
;;;10474  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0068de  2105              MOVS     r1,#5
0068e0  f44f70b4          MOV      r0,#0x168
0068e4  f7fffffe          BL       lc640_write
                  |L1.26856|
;;;10475  		}
;;;10476  	}
;;;10477  
;;;10478  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
0068e8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0068ec  2808              CMP      r0,#8
0068ee  d123              BNE      |L1.26936|
;;;10479  	{
;;;10480  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
0068f0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
0068f2  2808              CMP      r0,#8
0068f4  d101              BNE      |L1.26874|
0068f6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068f8  b900              CBNZ     r0,|L1.26876|
                  |L1.26874|
;;;10481  		{
;;;10482  		hv_vz_stat_cnt=10;
0068fa  8027              STRH     r7,[r4,#0]
                  |L1.26876|
;;;10483  		}
;;;10484  	hv_vz_stat_cnt--;
0068fc  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068fe  f1a00001          SUB      r0,r0,#1
006902  b200              SXTH     r0,r0
006904  8020              STRH     r0,[r4,#0]
;;;10485  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006906  280a              CMP      r0,#0xa
006908  d001              BEQ      |L1.26894|
00690a  2809              CMP      r0,#9
00690c  d10a              BNE      |L1.26916|
                  |L1.26894|
;;;10486  		{
;;;10487  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00690e  4bb3              LDR      r3,|L1.27612|
006910  f8cd8000          STR      r8,[sp,#0]
006914  f6a31264          SUB      r2,r3,#0x964
006918  f1020118          ADD      r1,r2,#0x18
00691c  f5a160a1          SUB      r0,r1,#0x508
006920  f7fffffe          BL       show_mess
                  |L1.26916|
;;;10488  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10489  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10490  					"    ТУМБЛЕРА!!!     ",
;;;10491  					5000);
;;;10492  		}
;;;10493  	if(sk_stat[1]==1)
006924  7870              LDRB     r0,[r6,#1]  ; sk_stat
006926  2801              CMP      r0,#1
006928  d106              BNE      |L1.26936|
;;;10494  		{
;;;10495  		hv_vz_stat=hvsWRK;
00692a  f88a9000          STRB     r9,[r10,#0]
;;;10496  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
00692e  2105              MOVS     r1,#5
006930  f44f70b4          MOV      r0,#0x168
006934  f7fffffe          BL       lc640_write
                  |L1.26936|
;;;10497  		}
;;;10498  	}
;;;10499  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006938  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00693c  2809              CMP      r0,#9
00693e  d123              BNE      |L1.27016|
;;;10500  	{
;;;10501  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006940  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006942  2809              CMP      r0,#9
006944  d101              BNE      |L1.26954|
006946  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006948  b900              CBNZ     r0,|L1.26956|
                  |L1.26954|
;;;10502  		{
;;;10503  		hv_vz_stat_cnt=10;
00694a  8027              STRH     r7,[r4,#0]
                  |L1.26956|
;;;10504  		}
;;;10505  	hv_vz_stat_cnt--;
00694c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00694e  f1a00001          SUB      r0,r0,#1
006952  b200              SXTH     r0,r0
006954  8020              STRH     r0,[r4,#0]
;;;10506  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006956  280a              CMP      r0,#0xa
006958  d001              BEQ      |L1.26974|
00695a  2809              CMP      r0,#9
00695c  d109              BNE      |L1.26994|
                  |L1.26974|
;;;10507  		{
;;;10508  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00695e  4b94              LDR      r3,|L1.27568|
006960  a294              ADR      r2,|L1.27572|
006962  f5a37194          SUB      r1,r3,#0x128
006966  f50170ac          ADD      r0,r1,#0x158
00696a  f8cd8000          STR      r8,[sp,#0]
00696e  f7fffffe          BL       show_mess
                  |L1.26994|
;;;10509  					"      ТУМБЛЕР       ",
;;;10510  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10511  					"       ЗАРЯД        ",
;;;10512  					5000);
;;;10513  		}
;;;10514  	if(sk_stat[1]==0)
006972  7870              LDRB     r0,[r6,#1]  ; sk_stat
006974  b940              CBNZ     r0,|L1.27016|
;;;10515  		{
;;;10516  		hv_vz_stat=hvsOFF;
006976  f88ab000          STRB     r11,[r10,#0]
;;;10517  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
00697a  2100              MOVS     r1,#0
00697c  f44f70b4          MOV      r0,#0x168
006980  f7fffffe          BL       lc640_write
;;;10518  		vz_stop();
006984  f7fffffe          BL       vz_stop
                  |L1.27016|
;;;10519  
;;;10520  		}
;;;10521  	}
;;;10522  hv_vz_stat_old=hv_vz_stat;
006988  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00698c  7028              STRB     r0,[r5,#0]
;;;10523  /*
;;;10524  if(speedChIsOn)
;;;10525  	{
;;;10526  	speedChTimeCnt++;
;;;10527  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10528  		{
;;;10529  		speedChIsOn=0;
;;;10530  		}
;;;10531  	if(speedChrgBlckStat)
;;;10532  		{
;;;10533  		speedChIsOn=0;
;;;10534  		speedChTimeCnt=0;
;;;10535  		}
;;;10536  	}
;;;10537  
;;;10538  
;;;10539  
;;;10540  if(speedChrgAvtEn)
;;;10541  	{
;;;10542  	if(!speedChIsOn)
;;;10543  		{
;;;10544  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10545  			{
;;;10546  			speedChIsOn=1;
;;;10547  			}
;;;10548  		}
;;;10549  	}
;;;10550  
;;;10551  
;;;10552  
;;;10553  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10554  else
;;;10555  	{
;;;10556  	speedChrgBlckStat=0;
;;;10557  	if(speedChrgBlckSrc==1)
;;;10558  		{
;;;10559  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10560  		}
;;;10561  	else if(speedChrgBlckSrc==2)
;;;10562  		{
;;;10563  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10564  		}
;;;10565  	}
;;;10566  
;;;10567  
;;;10568  if(speedChrgBlckStat==1)
;;;10569  	{
;;;10570  
;;;10571  	//speedChargeStartStop();
;;;10572  
;;;10573  	speedChrgShowCnt++;
;;;10574  	if(speedChrgShowCnt>=30)	
;;;10575  		{
;;;10576  		speedChrgShowCnt=0;
;;;10577  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10578  					"       ЗАРЯД        ",
;;;10579  					"     ЗАПРЕЩЕН!!!    ",
;;;10580  					"                    ",
;;;10581  					5000);
;;;10582  		}
;;;10583  	}
;;;10584  else speedChrgShowCnt=0;
;;;10585  
;;;10586  */
;;;10587  }
00698e  e5d6              B        |L1.25918|
;;;10588  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10605  //-----------------------------------------------
;;;10606  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006990  e92d41f0          PUSH     {r4-r8,lr}
;;;10607  {
;;;10608  
;;;10609  numOfForvardBps_old=numOfForvardBps;
006994  4c92              LDR      r4,|L1.27616|
006996  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006998  7060              STRB     r0,[r4,#1]
;;;10610  
;;;10611  numOfForvardBps=0;
00699a  f04f0500          MOV      r5,#0
00699e  f8045927          STRB     r5,[r4],#-0x27
;;;10612  
;;;10613  //FORVARDBPSCHHOUR=10;
;;;10614  
;;;10615  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
0069a2  4e90              LDR      r6,|L1.27620|
0069a4  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
0069a8  2800              CMP      r0,#0
0069aa  dd02              BLE      |L1.27058|
0069ac  f5b07ffa          CMP      r0,#0x1f4
0069b0  dd02              BLE      |L1.27064|
                  |L1.27058|
;;;10616  	{
;;;10617  	FORVARDBPSCHHOUR=0;
0069b2  8035              STRH     r5,[r6,#0]
                  |L1.27060|
;;;10618  	return;
;;;10619  	}
;;;10620  
;;;10621  numOfForvardBps_minCnt++;
;;;10622  
;;;10623  
;;;10624  if(numOfForvardBps_minCnt>=60)
;;;10625  	{
;;;10626  	numOfForvardBps_minCnt=0;
;;;10627  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10628  	numOfForvardBps_hourCnt++;
;;;10629  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10630  		{
;;;10631  		numOfForvardBps_hourCnt=0;
;;;10632  		}
;;;10633  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10634  	}
;;;10635  
;;;10636  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10637  
;;;10638  //if(numOfForvardBps)
;;;10639  //numOfForvardBps_old=numOfForvardBps; 
;;;10640  }
0069b4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.27064|
0069b8  f8940029          LDRB     r0,[r4,#0x29]         ;10621  ; numOfForvardBps_minCnt
0069bc  f1000001          ADD      r0,r0,#1              ;10621
0069c0  b2c0              UXTB     r0,r0                 ;10621
0069c2  f8840029          STRB     r0,[r4,#0x29]         ;10621
0069c6  283c              CMP      r0,#0x3c              ;10624
0069c8  d31b              BCC      |L1.27138|
0069ca  f8845029          STRB     r5,[r4,#0x29]         ;10626
0069ce  f44f7794          MOV      r7,#0x128             ;10627
0069d2  4638              MOV      r0,r7                 ;10627
0069d4  f7fffffe          BL       lc640_read_int
0069d8  f1000001          ADD      r0,r0,#1              ;10628
0069dc  b200              SXTH     r0,r0                 ;10628
0069de  f8a40076          STRH     r0,[r4,#0x76]         ;10628
0069e2  4a81              LDR      r2,|L1.27624|
0069e4  f9b61000          LDRSH    r1,[r6,#0]            ;10629  ; FORVARDBPSCHHOUR
0069e8  f9b22000          LDRSH    r2,[r2,#0]            ;10629  ; NUMIST
0069ec  fb01f102          MUL      r1,r1,r2              ;10629
0069f0  4281              CMP      r1,r0                 ;10629
0069f2  dc01              BGT      |L1.27128|
0069f4  f8a45076          STRH     r5,[r4,#0x76]         ;10631
                  |L1.27128|
0069f8  f9b41076          LDRSH    r1,[r4,#0x76]         ;10633  ; numOfForvardBps_hourCnt
0069fc  4638              MOV      r0,r7                 ;10633
0069fe  f7fffffe          BL       lc640_write_int
                  |L1.27138|
006a02  f9b40076          LDRSH    r0,[r4,#0x76]         ;10636  ; numOfForvardBps_hourCnt
006a06  f9b61000          LDRSH    r1,[r6,#0]            ;10636  ; FORVARDBPSCHHOUR
006a0a  fb90f0f1          SDIV     r0,r0,r1              ;10636
006a0e  f8840027          STRB     r0,[r4,#0x27]         ;10636
006a12  e7cf              B        |L1.27060|
;;;10641  
                          ENDP

                  numOfForvardBps_init PROC
;;;10642  //-----------------------------------------------
;;;10643  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006a14  b510              PUSH     {r4,lr}
;;;10644  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10645  lc640_write_int(EE_FORVBPSHOURCNT,0);
006a16  2100              MOVS     r1,#0
006a18  f44f7094          MOV      r0,#0x128
006a1c  f7fffffe          BL       lc640_write_int
;;;10646  numOfForvardBps_minCnt=58;
006a20  496f              LDR      r1,|L1.27616|
006a22  f04f003a          MOV      r0,#0x3a
006a26  f1a10127          SUB      r1,r1,#0x27
006a2a  f8810029          STRB     r0,[r1,#0x29]
;;;10647  }
006a2e  bd10              POP      {r4,pc}
;;;10648  
                          ENDP

                  outVoltContrHndl PROC
;;;10649  //-----------------------------------------------
;;;10650  void outVoltContrHndl(void)
006a30  b570              PUSH     {r4-r6,lr}
;;;10651  { 
;;;10652  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006a32  4c6e              LDR      r4,|L1.27628|
006a34  486e              LDR      r0,|L1.27632|
;;;10653  	{
;;;10654  	outVoltContrHndlCnt_=0;
;;;10655  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006a36  4a6f              LDR      r2,|L1.27636|
006a38  f9b41000          LDRSH    r1,[r4,#0]            ;10652  ; load_U
006a3c  f9b06000          LDRSH    r6,[r0,#0]            ;10652  ; U_OUT_KONTR_MAX
006a40  2500              MOVS     r5,#0                 ;10654
006a42  f9b20000          LDRSH    r0,[r2,#0]
006a46  4b6c              LDR      r3,|L1.27640|
006a48  42b1              CMP      r1,r6                 ;10652
006a4a  dc04              BGT      |L1.27222|
006a4c  4e6b              LDR      r6,|L1.27644|
006a4e  f9b66000          LDRSH    r6,[r6,#0]            ;10652  ; U_OUT_KONTR_MIN
006a52  42b1              CMP      r1,r6                 ;10652
006a54  da0f              BGE      |L1.27254|
                  |L1.27222|
006a56  801d              STRH     r5,[r3,#0]            ;10654
006a58  4969              LDR      r1,|L1.27648|
006a5a  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006a5e  4288              CMP      r0,r1
006a60  da1b              BGE      |L1.27290|
;;;10656  		{
;;;10657  		outVoltContrHndlCnt++;
006a62  f1000001          ADD      r0,r0,#1
006a66  b200              SXTH     r0,r0
006a68  8010              STRH     r0,[r2,#0]
;;;10658  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006a6a  4288              CMP      r0,r1
006a6c  d115              BNE      |L1.27290|
;;;10659  			{
;;;10660  			avar_uout_hndl(1);
006a6e  2001              MOVS     r0,#1
006a70  f7fffffe          BL       avar_uout_hndl
006a74  e011              B        |L1.27290|
                  |L1.27254|
;;;10661  			}
;;;10662  		}
;;;10663  	}
;;;10664  else
;;;10665  	{
;;;10666  	if(outVoltContrHndlCnt)
006a76  b180              CBZ      r0,|L1.27290|
;;;10667  		{
;;;10668  		if(outVoltContrHndlCnt_<5)
006a78  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006a7c  2805              CMP      r0,#5
006a7e  da0c              BGE      |L1.27290|
;;;10669  			{
;;;10670  			outVoltContrHndlCnt_++;
006a80  f1000001          ADD      r0,r0,#1
006a84  b200              SXTH     r0,r0
006a86  8018              STRH     r0,[r3,#0]
;;;10671  			if(outVoltContrHndlCnt_>=5)
006a88  2805              CMP      r0,#5
006a8a  db06              BLT      |L1.27290|
;;;10672  				{
;;;10673  				outVoltContrHndlCnt=0;
006a8c  8015              STRH     r5,[r2,#0]
;;;10674  				if(uout_av)avar_uout_hndl(0);
006a8e  485d              LDR      r0,|L1.27652|
006a90  7800              LDRB     r0,[r0,#0]  ; uout_av
006a92  b110              CBZ      r0,|L1.27290|
006a94  2000              MOVS     r0,#0
006a96  f7fffffe          BL       avar_uout_hndl
                  |L1.27290|
;;;10675  				}
;;;10676  			}
;;;10677  		}
;;;10678  	}
;;;10679  
;;;10680  if (load_U<(USIGN*10)) 
006a9a  485b              LDR      r0,|L1.27656|
006a9c  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006aa0  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006aa4  eb000080          ADD      r0,r0,r0,LSL #2
006aa8  ebb10f40          CMP      r1,r0,LSL #1
006aac  da0b              BGE      |L1.27334|
;;;10681  	{
;;;10682  	if(!bSILENT)
006aae  4857              LDR      r0,|L1.27660|
006ab0  6800              LDR      r0,[r0,#0]  ; bSILENT
006ab2  2800              CMP      r0,#0
006ab4  d107              BNE      |L1.27334|
;;;10683  		{
;;;10684  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006ab6  e8bd4070          POP      {r4-r6,lr}
006aba  2314              MOVS     r3,#0x14
006abc  2201              MOVS     r2,#1
006abe  2172              MOVS     r1,#0x72
006ac0  20d2              MOVS     r0,#0xd2
006ac2  f7ffbffe          B.W      mess_send
                  |L1.27334|
;;;10685  		}
;;;10686  
;;;10687  	//bU_BAT2REL_AV_BAT=1;
;;;10688  	}
;;;10689  
;;;10690  
;;;10691  }
006ac6  bd70              POP      {r4-r6,pc}
;;;10692  
                          ENDP

                  vent_resurs_hndl PROC
;;;10693  //-----------------------------------------------
;;;10694  void vent_resurs_hndl(void)
006ac8  e92d47f0          PUSH     {r4-r10,lr}
;;;10695  {
;;;10696  char i;
;;;10697  char crc_in,crc_eval;
;;;10698  
;;;10699  for(i=0;i<NUMIST;i++)
006acc  f04f0200          MOV      r2,#0
;;;10700  	{
;;;10701  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10702  		{
;;;10703  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10704  		}
;;;10705  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10706  		{
;;;10707  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10708  		}
;;;10709  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10710  		{
;;;10711  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10712  		}
;;;10713  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10714  		{
;;;10715  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10716  		}
;;;10717  	crc_in=0;
;;;10718  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10719  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10720  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10721  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10722  
;;;10723  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10724  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10725  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10726  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10727  
;;;10728  	if(crc_eval==crc_in)
;;;10729  		{
;;;10730  		unsigned short temp_US;
;;;10731  		temp_US=0;
;;;10732  
;;;10733  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10734  		temp_US<<=4;
;;;10735  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10736  		temp_US<<=4;
;;;10737  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10738  		temp_US<<=4;
;;;10739  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10740  
;;;10741  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10742  		}
;;;10743  
;;;10744  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006ad0  484f              LDR      r0,|L1.27664|
006ad2  f8dfc140          LDR      r12,|L1.27668|
006ad6  f9b06000          LDRSH    r6,[r0,#0]
006ada  4843              LDR      r0,|L1.27624|
006adc  f9b07000          LDRSH    r7,[r0,#0]            ;10699
006ae0  e0a3              B        |L1.27690|
                  |L1.27362|
006ae2  ebc200c2          RSB      r0,r2,r2,LSL #3       ;10701
006ae6  eb001002          ADD      r0,r0,r2,LSL #4       ;10701
006aea  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10701
006aee  7b41              LDRB     r1,[r0,#0xd]          ;10701
006af0  098b              LSRS     r3,r1,#6              ;10701
006af2  d006              BEQ      |L1.27394|
006af4  2301              MOVS     r3,#1                 ;10705
006af6  ebb31f91          CMP      r3,r1,LSR #6          ;10705
006afa  d105              BNE      |L1.27400|
006afc  f8801055          STRB     r1,[r0,#0x55]         ;10707
006b00  e00f              B        |L1.27426|
                  |L1.27394|
006b02  f8801054          STRB     r1,[r0,#0x54]         ;10703
006b06  e00c              B        |L1.27426|
                  |L1.27400|
006b08  2302              MOVS     r3,#2                 ;10709
006b0a  ebb31f91          CMP      r3,r1,LSR #6          ;10709
006b0e  d102              BNE      |L1.27414|
006b10  f8801056          STRB     r1,[r0,#0x56]         ;10711
006b14  e005              B        |L1.27426|
                  |L1.27414|
006b16  2303              MOVS     r3,#3                 ;10713
006b18  ebb31f91          CMP      r3,r1,LSR #6          ;10713
006b1c  d101              BNE      |L1.27426|
006b1e  f8801057          STRB     r1,[r0,#0x57]         ;10715
                  |L1.27426|
006b22  f8101f54          LDRB     r1,[r0,#0x54]!        ;10718
006b26  f3c11401          UBFX     r4,r1,#4,#2           ;10718
006b2a  7843              LDRB     r3,[r0,#1]            ;10719
006b2c  f0030530          AND      r5,r3,#0x30           ;10719
006b30  ea440495          ORR      r4,r4,r5,LSR #2       ;10719
006b34  f8909002          LDRB     r9,[r0,#2]            ;10720
006b38  f0090830          AND      r8,r9,#0x30           ;10720
006b3c  ea480804          ORR      r8,r8,r4              ;10720
006b40  78c5              LDRB     r5,[r0,#3]            ;10721
006b42  f1a00054          SUB      r0,r0,#0x54           ;10721
006b46  f0050430          AND      r4,r5,#0x30           ;10721
006b4a  ea480884          ORR      r8,r8,r4,LSL #2       ;10721
006b4e  f001010f          AND      r1,r1,#0xf            ;10723
006b52  f003040f          AND      r4,r3,#0xf            ;10724
006b56  ea840a01          EOR      r10,r4,r1             ;10724
006b5a  f009030f          AND      r3,r9,#0xf            ;10725
006b5e  ea83090a          EOR      r9,r3,r10             ;10725
006b62  f005050f          AND      r5,r5,#0xf            ;10726
006b66  ea850909          EOR      r9,r5,r9              ;10726
006b6a  45c1              CMP      r9,r8                 ;10728
006b6c  d113              BNE      |L1.27542|
006b6e  ea4f1505          LSL      r5,r5,#4              ;10734
006b72  ea430305          ORR      r3,r3,r5              ;10735
006b76  ea4f1303          LSL      r3,r3,#4              ;10736
006b7a  ea440403          ORR      r4,r4,r3              ;10737
006b7e  ea4f5304          LSL      r3,r4,#20             ;10738
006b82  ea4f4313          LSR      r3,r3,#16             ;10738
006b86  ea410103          ORR      r1,r1,r3              ;10739
006b8a  f8b03058          LDRH     r3,[r0,#0x58]         ;10741
006b8e  428b              CMP      r3,r1                 ;10741
006b90  d001              BEQ      |L1.27542|
006b92  f8a01058          STRH     r1,[r0,#0x58]         ;10741
                  |L1.27542|
006b96  f8b01058          LDRH     r1,[r0,#0x58]
006b9a  eb060386          ADD      r3,r6,r6,LSL #2
006b9e  ebb10f43          CMP      r1,r3,LSL #1
006ba2  dd3b              BLE      |L1.27676|
006ba4  2e00              CMP      r6,#0
006ba6  dd39              BLE      |L1.27676|
;;;10745  		{
;;;10746  		bps[i]._av|=(1<<4);
006ba8  7841              LDRB     r1,[r0,#1]
006baa  f0410110          ORR      r1,r1,#0x10
006bae  e033              B        |L1.27672|
                  |L1.27568|
                          DCD      ||.text||+0x1a0c
                  |L1.27572|
006bb4  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006bb8  dbd0c0c2
006bbc  cdc8c2c0
006bc0  ded9c8c9
006bc4  20202020          DCB      "    ",0
006bc8  00      
006bc9  00                DCB      0
006bca  00                DCB      0
006bcb  00                DCB      0
                  |L1.27596|
                          DCD      hv_vz_wrk_cnt
                  |L1.27600|
                          DCD      hv_vz_up_cnt
                  |L1.27604|
                          DCD      VZ_HR
                  |L1.27608|
                          DCD      ||.text||+0x145c
                  |L1.27612|
                          DCD      ||.text||+0x22f8
                  |L1.27616|
                          DCD      ||area_number.25||+0x27
                  |L1.27620|
                          DCD      FORVARDBPSCHHOUR
                  |L1.27624|
                          DCD      NUMIST
                  |L1.27628|
                          DCD      load_U
                  |L1.27632|
                          DCD      U_OUT_KONTR_MAX
                  |L1.27636|
                          DCD      outVoltContrHndlCnt
                  |L1.27640|
                          DCD      outVoltContrHndlCnt_
                  |L1.27644|
                          DCD      U_OUT_KONTR_MIN
                  |L1.27648|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.27652|
                          DCD      uout_av
                  |L1.27656|
                          DCD      USIGN
                  |L1.27660|
                          DCD      bSILENT
                  |L1.27664|
                          DCD      TVENTMAX
                  |L1.27668|
                          DCD      bps
                  |L1.27672|
006c18  7041              STRB     r1,[r0,#1]
006c1a  e003              B        |L1.27684|
                  |L1.27676|
;;;10747  		}
;;;10748  	else bps[i]._av&=~(1<<4);
006c1c  7841              LDRB     r1,[r0,#1]
006c1e  f0210110          BIC      r1,r1,#0x10
006c22  7041              STRB     r1,[r0,#1]
                  |L1.27684|
006c24  f1020201          ADD      r2,r2,#1              ;10699
006c28  b2d2              UXTB     r2,r2                 ;10699
                  |L1.27690|
006c2a  42ba              CMP      r2,r7                 ;10699
006c2c  f6ffaf59          BLT      |L1.27362|
;;;10749  	}
;;;10750  }
006c30  e8bd87f0          POP      {r4-r10,pc}
;;;10751  
                          ENDP

                  vent_hndl PROC
;;;10752  //-----------------------------------------------
;;;10753  void vent_hndl(void)
006c34  e92d4ff0          PUSH     {r4-r11,lr}
;;;10754  {
006c38  b087              SUB      sp,sp,#0x1c
;;;10755  if(RELEVENTSIGN==rvsAKB)
006c3a  48ab              LDR      r0,|L1.28392|
;;;10756  	{
;;;10757  	if(vent_stat==0)
006c3c  4cab              LDR      r4,|L1.28396|
;;;10758  		{
;;;10759  		if	(
;;;10760  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
006c3e  49ac              LDR      r1,|L1.28400|
;;;10761  			||
;;;10762  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;10763  			)
;;;10764  			{
;;;10765  			vent_stat=1;
;;;10766  			}
;;;10767  		}
;;;10768  	else if(vent_stat==1)
;;;10769  		{
;;;10770  		if	(
;;;10771  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006c40  4aac              LDR      r2,|L1.28404|
006c42  7800              LDRB     r0,[r0,#0]            ;10755  ; RELEVENTSIGN
006c44  f9943000          LDRSB    r3,[r4,#0]            ;10757
006c48  f9b11000          LDRSH    r1,[r1,#0]            ;10760
006c4c  f9b22000          LDRSH    r2,[r2,#0]
006c50  b148              CBZ      r0,|L1.27750|
;;;10772  			&&
;;;10773  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;10774  			)
;;;10775  			{
;;;10776  			vent_stat=0;
;;;10777  			}
;;;10778  		}
;;;10779  	}
;;;10780  else if(RELEVENTSIGN==rvsBPS)
006c52  2802              CMP      r0,#2
006c54  d03c              BEQ      |L1.27856|
;;;10781  	{
;;;10782  /*	if	(
;;;10783  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;10784  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;10785  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;10786  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;10787  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;10788  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;10789  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;10790  		)
;;;10791  		{
;;;10792  		vent_stat=1;
;;;10793  		}
;;;10794  	else vent_stat=0;
;;;10795  	*/
;;;10796  
;;;10797  	if	(
;;;10798  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;10799  		||
;;;10800  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;10801  		||
;;;10802  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;10803  		||
;;;10804  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;10805  		||
;;;10806  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;10807  		||
;;;10808  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;10809  		||
;;;10810  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;10811  		||
;;;10812  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;10813  		)
;;;10814  		{
;;;10815  		vent_stat=1;
;;;10816  		}
;;;10817  	else if(vent_stat==1)
;;;10818  		{
;;;10819  		if	(
;;;10820  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;10821  			&&
;;;10822  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;10823  			&&
;;;10824  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;10825  			&&
;;;10826  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;10827  			&&
;;;10828  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;10829  			&&
;;;10830  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;10831  			&&
;;;10832  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;10833  			&&
;;;10834  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;10835  			)
;;;10836  			{
;;;10837  			vent_stat=0;
;;;10838  			}
;;;10839  		}
;;;10840  	}
;;;10841  else if(RELEVENTSIGN==rvsEXT)
006c56  2801              CMP      r0,#1
006c58  d07e              BEQ      |L1.27992|
;;;10842  	{
;;;10843  	if	(
;;;10844  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;10845  		||
;;;10846  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;10847  		||
;;;10848  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;10849  		)
;;;10850  		{
;;;10851  		vent_stat=1;
;;;10852  		}
;;;10853  	else if(vent_stat==1)
;;;10854  		{
;;;10855  		if	(
;;;10856  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;10857  			&&
;;;10858  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;10859  			&&
;;;10860  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;10861  			)
;;;10862  			{
;;;10863  			vent_stat=0;
;;;10864  			}
;;;10865  		}
;;;10866  	}
;;;10867  else vent_stat=1;
006c5a  f04f0001          MOV      r0,#1
006c5e  7020              STRB     r0,[r4,#0]
                  |L1.27744|
;;;10868  }
006c60  b007              ADD      sp,sp,#0x1c
006c62  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.27750|
006c66  4fa4              LDR      r7,|L1.28408|
006c68  f8df8290          LDR      r8,|L1.28412|
006c6c  f9b7000a          LDRSH    r0,[r7,#0xa]          ;10760
006c70  7b3d              LDRB     r5,[r7,#0xc]          ;10760
006c72  f9b76056          LDRSH    r6,[r7,#0x56]         ;10762
006c76  f898c000          LDRB     r12,[r8,#0]           ;10759
006c7a  f8977058          LDRB     r7,[r7,#0x58]         ;10762
006c7e  f8988001          LDRB     r8,[r8,#1]            ;10762
006c82  b12b              CBZ      r3,|L1.27792|
006c84  2b01              CMP      r3,#1                 ;10768
006c86  d1eb              BNE      |L1.27744|
006c88  f1bc0f55          CMP      r12,#0x55             ;10770
006c8c  d115              BNE      |L1.27834|
006c8e  e010              B        |L1.27826|
                  |L1.27792|
006c90  f1bc0f55          CMP      r12,#0x55             ;10759
006c94  d102              BNE      |L1.27804|
006c96  4288              CMP      r0,r1                 ;10760
006c98  dc07              BGT      |L1.27818|
006c9a  b935              CBNZ     r5,|L1.27818|
                  |L1.27804|
006c9c  f1b80f55          CMP      r8,#0x55              ;10762
006ca0  d1de              BNE      |L1.27744|
006ca2  428e              CMP      r6,r1                 ;10762
006ca4  dc01              BGT      |L1.27818|
006ca6  2f00              CMP      r7,#0                 ;10762
006ca8  d0da              BEQ      |L1.27744|
                  |L1.27818|
006caa  f04f0001          MOV      r0,#1                 ;10765
006cae  7020              STRB     r0,[r4,#0]            ;10765
006cb0  e7d6              B        |L1.27744|
                  |L1.27826|
006cb2  4290              CMP      r0,r2                 ;10771
006cb4  dad4              BGE      |L1.27744|
006cb6  2d00              CMP      r5,#0                 ;10771
006cb8  d1d2              BNE      |L1.27744|
                  |L1.27834|
006cba  f1b80f55          CMP      r8,#0x55              ;10773
006cbe  d103              BNE      |L1.27848|
006cc0  4296              CMP      r6,r2                 ;10773
006cc2  dacd              BGE      |L1.27744|
006cc4  2f00              CMP      r7,#0                 ;10773
006cc6  d1cb              BNE      |L1.27744|
                  |L1.27848|
006cc8  f04f0000          MOV      r0,#0                 ;10776
006ccc  7020              STRB     r0,[r4,#0]            ;10776
006cce  e7c7              B        |L1.27744|
                  |L1.27856|
006cd0  4e8c              LDR      r6,|L1.28420|
006cd2  488b              LDR      r0,|L1.28416|
006cd4  6ab5              LDR      r5,[r6,#0x28]         ;10798
006cd6  f9b00000          LDRSH    r0,[r0,#0]            ;10797  ; NUMIST
006cda  78f6              LDRB     r6,[r6,#3]            ;10798
006cdc  b118              CBZ      r0,|L1.27878|
006cde  428d              CMP      r5,r1                 ;10798
006ce0  dc7a              BGT      |L1.28120|
006ce2  2e1e              CMP      r6,#0x1e              ;10798
006ce4  d278              BCS      |L1.28120|
                  |L1.27878|
006ce6  f8dfc21c          LDR      r12,|L1.28420|
006cea  2801              CMP      r0,#1                 ;10800
006cec  f8dc7084          LDR      r7,[r12,#0x84]        ;10800
006cf0  f89cc05f          LDRB     r12,[r12,#0x5f]       ;10800
006cf4  f8cdc018          STR      r12,[sp,#0x18]        ;10800
006cf8  dd06              BLE      |L1.27912|
006cfa  428f              CMP      r7,r1                 ;10800
006cfc  dc6c              BGT      |L1.28120|
006cfe  f8ddc018          LDR      r12,[sp,#0x18]        ;10800
006d02  f1bc0f1e          CMP      r12,#0x1e             ;10800
006d06  d267              BCS      |L1.28120|
                  |L1.27912|
006d08  f8dfc1f8          LDR      r12,|L1.28420|
006d0c  2802              CMP      r0,#2                 ;10802
006d0e  f8dc80e0          LDR      r8,[r12,#0xe0]        ;10802
006d12  f8cd8014          STR      r8,[sp,#0x14]         ;10802
006d16  f89cc0bb          LDRB     r12,[r12,#0xbb]       ;10802
006d1a  f8cdc010          STR      r12,[sp,#0x10]        ;10802
006d1e  dd08              BLE      |L1.27954|
006d20  f8ddc014          LDR      r12,[sp,#0x14]        ;10802
006d24  458c              CMP      r12,r1                ;10802
006d26  dc57              BGT      |L1.28120|
006d28  f8ddc010          LDR      r12,[sp,#0x10]        ;10802
006d2c  f1bc0f1e          CMP      r12,#0x1e             ;10802
006d30  d252              BCS      |L1.28120|
                  |L1.27954|
006d32  f8dfc1d0          LDR      r12,|L1.28420|
006d36  2803              CMP      r0,#3                 ;10804
006d38  f8dc813c          LDR      r8,[r12,#0x13c]       ;10804
006d3c  f8cd800c          STR      r8,[sp,#0xc]          ;10804
006d40  f89cc117          LDRB     r12,[r12,#0x117]      ;10804
006d44  f8cdc008          STR      r12,[sp,#8]           ;10804
006d48  dd0a              BLE      |L1.28000|
006d4a  f8ddc00c          LDR      r12,[sp,#0xc]         ;10804
006d4e  458c              CMP      r12,r1                ;10804
006d50  dc42              BGT      |L1.28120|
006d52  f8ddc008          LDR      r12,[sp,#8]           ;10804
006d56  e000              B        |L1.27994|
                  |L1.27992|
006d58  e080              B        |L1.28252|
                  |L1.27994|
006d5a  f1bc0f1e          CMP      r12,#0x1e             ;10804
006d5e  d23b              BCS      |L1.28120|
                  |L1.28000|
006d60  f8df81a0          LDR      r8,|L1.28420|
006d64  2804              CMP      r0,#4                 ;10806
006d66  f8d8c198          LDR      r12,[r8,#0x198]       ;10806
006d6a  f8988173          LDRB     r8,[r8,#0x173]        ;10806
006d6e  f8cd8004          STR      r8,[sp,#4]            ;10806
006d72  dd06              BLE      |L1.28034|
006d74  458c              CMP      r12,r1                ;10806
006d76  dc2f              BGT      |L1.28120|
006d78  f8dd8004          LDR      r8,[sp,#4]            ;10806
006d7c  f1b80f1e          CMP      r8,#0x1e              ;10806
006d80  d22a              BCS      |L1.28120|
                  |L1.28034|
006d82  f8df9180          LDR      r9,|L1.28420|
006d86  2805              CMP      r0,#5                 ;10808
006d88  f8d981f4          LDR      r8,[r9,#0x1f4]        ;10808
006d8c  f89991cf          LDRB     r9,[r9,#0x1cf]        ;10808
006d90  f8cd9000          STR      r9,[sp,#0]            ;10808
006d94  dd06              BLE      |L1.28068|
006d96  4588              CMP      r8,r1                 ;10808
006d98  dc1e              BGT      |L1.28120|
006d9a  f8dd9000          LDR      r9,[sp,#0]            ;10808
006d9e  f1b90f1e          CMP      r9,#0x1e              ;10808
006da2  d219              BCS      |L1.28120|
                  |L1.28068|
006da4  f8dfa15c          LDR      r10,|L1.28420|
006da8  2806              CMP      r0,#6                 ;10810
006daa  f89ae22b          LDRB     lr,[r10,#0x22b]       ;10810
006dae  f8da9250          LDR      r9,[r10,#0x250]       ;10810
006db2  dd04              BLE      |L1.28094|
006db4  4589              CMP      r9,r1                 ;10810
006db6  dc0f              BGT      |L1.28120|
006db8  f1be0f1e          CMP      lr,#0x1e              ;10810
006dbc  d20c              BCS      |L1.28120|
                  |L1.28094|
006dbe  f8dfb144          LDR      r11,|L1.28420|
006dc2  2807              CMP      r0,#7                 ;10812
006dc4  f8dba2ac          LDR      r10,[r11,#0x2ac]      ;10812
006dc8  f89bb287          LDRB     r11,[r11,#0x287]      ;10812
006dcc  dd08              BLE      |L1.28128|
006dce  458a              CMP      r10,r1                ;10812
006dd0  dc02              BGT      |L1.28120|
006dd2  f1bb0f1e          CMP      r11,#0x1e             ;10812
006dd6  d303              BCC      |L1.28128|
                  |L1.28120|
006dd8  f04f0001          MOV      r0,#1                 ;10815
006ddc  7020              STRB     r0,[r4,#0]            ;10815
                  |L1.28126|
006dde  e73f              B        |L1.27744|
                  |L1.28128|
006de0  2b01              CMP      r3,#1                 ;10817
006de2  d1fc              BNE      |L1.28126|
006de4  b118              CBZ      r0,|L1.28142|
006de6  4295              CMP      r5,r2                 ;10820
006de8  daf9              BGE      |L1.28126|
006dea  2e0a              CMP      r6,#0xa               ;10820
006dec  d2f7              BCS      |L1.28126|
                  |L1.28142|
006dee  2802              CMP      r0,#2                 ;10822
006df0  db04              BLT      |L1.28156|
006df2  4297              CMP      r7,r2                 ;10822
006df4  daf3              BGE      |L1.28126|
006df6  9906              LDR      r1,[sp,#0x18]         ;10822
006df8  290a              CMP      r1,#0xa               ;10822
006dfa  d2f0              BCS      |L1.28126|
                  |L1.28156|
006dfc  2803              CMP      r0,#3                 ;10824
006dfe  db05              BLT      |L1.28172|
006e00  9905              LDR      r1,[sp,#0x14]         ;10824
006e02  4291              CMP      r1,r2                 ;10824
006e04  daeb              BGE      |L1.28126|
006e06  9904              LDR      r1,[sp,#0x10]         ;10824
006e08  290a              CMP      r1,#0xa               ;10824
006e0a  d2e8              BCS      |L1.28126|
                  |L1.28172|
006e0c  2804              CMP      r0,#4                 ;10826
006e0e  db05              BLT      |L1.28188|
006e10  9903              LDR      r1,[sp,#0xc]          ;10826
006e12  4291              CMP      r1,r2                 ;10826
006e14  dae3              BGE      |L1.28126|
006e16  9902              LDR      r1,[sp,#8]            ;10826
006e18  290a              CMP      r1,#0xa               ;10826
006e1a  d2e0              BCS      |L1.28126|
                  |L1.28188|
006e1c  2805              CMP      r0,#5                 ;10828
006e1e  db04              BLT      |L1.28202|
006e20  4594              CMP      r12,r2                ;10828
006e22  dadc              BGE      |L1.28126|
006e24  9901              LDR      r1,[sp,#4]            ;10828
006e26  290a              CMP      r1,#0xa               ;10828
006e28  d2d9              BCS      |L1.28126|
                  |L1.28202|
006e2a  2806              CMP      r0,#6                 ;10830
006e2c  db04              BLT      |L1.28216|
006e2e  4590              CMP      r8,r2                 ;10830
006e30  dad5              BGE      |L1.28126|
006e32  9900              LDR      r1,[sp,#0]            ;10830
006e34  290a              CMP      r1,#0xa               ;10830
006e36  d2d2              BCS      |L1.28126|
                  |L1.28216|
006e38  2807              CMP      r0,#7                 ;10832
006e3a  db04              BLT      |L1.28230|
006e3c  4591              CMP      r9,r2                 ;10832
006e3e  dace              BGE      |L1.28126|
006e40  f1be0f0a          CMP      lr,#0xa               ;10832
006e44  d2cb              BCS      |L1.28126|
                  |L1.28230|
006e46  2808              CMP      r0,#8                 ;10834
006e48  db04              BLT      |L1.28244|
006e4a  4592              CMP      r10,r2                ;10834
006e4c  dac7              BGE      |L1.28126|
006e4e  f1bb0f0a          CMP      r11,#0xa              ;10834
006e52  d2c4              BCS      |L1.28126|
                  |L1.28244|
006e54  f04f0000          MOV      r0,#0                 ;10837
006e58  7020              STRB     r0,[r4,#0]            ;10837
                  |L1.28250|
006e5a  e701              B        |L1.27744|
                  |L1.28252|
006e5c  482a              LDR      r0,|L1.28424|
006e5e  4d2b              LDR      r5,|L1.28428|
006e60  4e2b              LDR      r6,|L1.28432|
006e62  f9b00000          LDRSH    r0,[r0,#0]            ;10843  ; NUMDT
006e66  f9b55000          LDRSH    r5,[r5,#0]            ;10844
006e6a  7836              LDRB     r6,[r6,#0]            ;10844
006e6c  b110              CBZ      r0,|L1.28276|
006e6e  428d              CMP      r5,r1                 ;10844
006e70  dc1d              BGT      |L1.28334|
006e72  b9e6              CBNZ     r6,|L1.28334|
                  |L1.28276|
006e74  4f25              LDR      r7,|L1.28428|
006e76  f8dfc098          LDR      r12,|L1.28432|
006e7a  2801              CMP      r0,#1                 ;10846
006e7c  f9b77002          LDRSH    r7,[r7,#2]            ;10846
006e80  f89cc001          LDRB     r12,[r12,#1]          ;10846
006e84  dd04              BLE      |L1.28304|
006e86  428f              CMP      r7,r1                 ;10846
006e88  dc11              BGT      |L1.28334|
006e8a  f1bc0f00          CMP      r12,#0                ;10846
006e8e  d10e              BNE      |L1.28334|
                  |L1.28304|
006e90  f8df8078          LDR      r8,|L1.28428|
006e94  f8df9078          LDR      r9,|L1.28432|
006e98  2802              CMP      r0,#2                 ;10848
006e9a  f9b88004          LDRSH    r8,[r8,#4]            ;10848
006e9e  f8999002          LDRB     r9,[r9,#2]            ;10848
006ea2  dd08              BLE      |L1.28342|
006ea4  4588              CMP      r8,r1                 ;10848
006ea6  dc02              BGT      |L1.28334|
006ea8  f1b90f00          CMP      r9,#0                 ;10848
006eac  d003              BEQ      |L1.28342|
                  |L1.28334|
006eae  f04f0001          MOV      r0,#1                 ;10851
006eb2  7020              STRB     r0,[r4,#0]            ;10851
006eb4  e6d4              B        |L1.27744|
                  |L1.28342|
006eb6  2b01              CMP      r3,#1                 ;10853
006eb8  d191              BNE      |L1.28126|
006eba  b118              CBZ      r0,|L1.28356|
006ebc  4295              CMP      r5,r2                 ;10856
006ebe  da8e              BGE      |L1.28126|
006ec0  2e00              CMP      r6,#0                 ;10856
006ec2  d18c              BNE      |L1.28126|
                  |L1.28356|
006ec4  2802              CMP      r0,#2                 ;10858
006ec6  db04              BLT      |L1.28370|
006ec8  4297              CMP      r7,r2                 ;10858
006eca  da88              BGE      |L1.28126|
006ecc  f1bc0f00          CMP      r12,#0                ;10858
006ed0  d185              BNE      |L1.28126|
                  |L1.28370|
006ed2  2803              CMP      r0,#3                 ;10860
006ed4  db04              BLT      |L1.28384|
006ed6  4590              CMP      r8,r2                 ;10860
006ed8  dabf              BGE      |L1.28250|
006eda  f1b90f00          CMP      r9,#0                 ;10860
006ede  d1bc              BNE      |L1.28250|
                  |L1.28384|
006ee0  f04f0000          MOV      r0,#0                 ;10863
006ee4  7020              STRB     r0,[r4,#0]            ;10863
006ee6  e6bb              B        |L1.27744|
;;;10869  
                          ENDP

                  |L1.28392|
                          DCD      RELEVENTSIGN
                  |L1.28396|
                          DCD      ||area_number.25||
                  |L1.28400|
                          DCD      TVENTON
                  |L1.28404|
                          DCD      TVENTOFF
                  |L1.28408|
                          DCD      bat
                  |L1.28412|
                          DCD      BAT_IS_ON
                  |L1.28416|
                          DCD      NUMIST
                  |L1.28420|
                          DCD      bps
                  |L1.28424|
                          DCD      NUMDT
                  |L1.28428|
                          DCD      t_ext
                  |L1.28432|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;306    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;307    if(spc_stat!=spcVZ) 
;;;308    	{
;;;309    	vz_error=0;
000006  f8a1004e          STRH     r0,[r1,#0x4e]
00000a  4770              BX       lr                    ;307
;;;310    	sp_ch_error=0;
;;;311    	vz1_error=0;
;;;312    	vz2_error=0;
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
;;;551    	snmp_bat_flag_puts[0]=0;
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
;;;790    	snmp_bat_flag_puts[1]=0;
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
;;;916    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  4c80              LDR      r4,|L3.520|
;;;308    	{
;;;309    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;307  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;307
00000c  b200              SXTH     r0,r0                 ;307
00000e  f7fffffe          BL       abs_pal
;;;310    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;311    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;312    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;315  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;315  ; adc_self_ch_buff
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;315
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  f44f7196          MOV      r1,#0x12c
;;;551    	snmp_bat_flag_puts[0]=0;
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f1a406ee          SUB      r6,r4,#0xee
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;790    	snmp_bat_flag_puts[1]=0;
000040  8770              STRH     r0,[r6,#0x3a]
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;317
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;317  ; adc_self_ch_buff
00004e  8770              STRH     r0,[r6,#0x3a]         ;317
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;319  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;317
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;319  ; adc_self_ch_buff
00005c  8770              STRH     r0,[r6,#0x3a]         ;320
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;320  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;320
000062  b3f7              CBZ      r7,|L3.226|
000064  7d33              LDRB     r3,[r6,#0x14]         ;319  ; adc_window_flag
000066  4869              LDR      r0,|L3.524|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103a          LDRSH    r1,[r6,#0x3a]         ;320  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;322  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;322
000074  6004              STR      r4,[r0,#0]            ;322  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;322  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;322
00007c  6044              STR      r4,[r0,#4]            ;323  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;323  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;323
000084  6084              STR      r4,[r0,#8]            ;328  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;328  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;328
00008c  60c1              STR      r1,[r0,#0xc]          ;329  ; main_power_buffer
                  |L3.142|
00008e  f9b6103a          LDRSH    r1,[r6,#0x3a]         ;331  ; adc_result
000092  2964              CMP      r1,#0x64              ;331
000094  da04              BGE      |L3.160|
000096  8ff1              LDRH     r1,[r6,#0x3e]         ;331  ; adc_zero_cnt
000098  f1010101          ADD      r1,r1,#1              ;331
00009c  87f1              STRH     r1,[r6,#0x3e]         ;332
00009e  e000              B        |L3.162|
                  |L3.160|
0000a0  87f2              STRH     r2,[r6,#0x3e]         ;332
                  |L3.162|
0000a2  f9b6403e          LDRSH    r4,[r6,#0x3e]         ;336  ; adc_zero_cnt
0000a6  f44f61fa          MOV      r1,#0x7d0             ;336
0000aa  428c              CMP      r4,r1                 ;338
0000ac  db05              BLT      |L3.186|
0000ae  87f1              STRH     r1,[r6,#0x3e]         ;338
0000b0  6002              STR      r2,[r0,#0]            ;338  ; main_power_buffer
0000b2  6042              STR      r2,[r0,#4]            ;339  ; main_power_buffer
0000b4  6082              STR      r2,[r0,#8]            ;339  ; main_power_buffer
0000b6  60c2              STR      r2,[r0,#0xc]          ;339  ; main_power_buffer
0000b8  8732              STRH     r2,[r6,#0x38]         ;341
                  |L3.186|
0000ba  8ff1              LDRH     r1,[r6,#0x3e]         ;341  ; adc_zero_cnt
0000bc  2905              CMP      r1,#5                 ;341
0000be  d14f              BNE      |L3.352|
0000c0  b1bb              CBZ      r3,|L3.242|
0000c2  8fb1              LDRH     r1,[r6,#0x3c]         ;341  ; adc_gorb_cnt
0000c4  f1010101          ADD      r1,r1,#1              ;342
0000c8  b209              SXTH     r1,r1                 ;342
0000ca  87b1              STRH     r1,[r6,#0x3c]         ;342
0000cc  f5b17f00          CMP      r1,#0x200             ;342
0000d0  db00              BLT      |L3.212|
0000d2  87b2              STRH     r2,[r6,#0x3c]         ;347
                  |L3.212|
0000d4  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;347  ; adc_gorb_cnt
0000d8  064c              LSLS     r4,r1,#25             ;348
0000da  d10a              BNE      |L3.242|
0000dc  ea4f11e1          ASR      r1,r1,#7              ;350
0000e0  e000              B        |L3.228|
                  |L3.226|
0000e2  e015              B        |L3.272|
                  |L3.228|
0000e4  f8504021          LDR      r4,[r0,r1,LSL #2]     ;350
0000e8  ea4f2424          ASR      r4,r4,#8              ;351
0000ec  8734              STRH     r4,[r6,#0x38]         ;351
0000ee  f8402021          STR      r2,[r0,r1,LSL #2]     ;351
                  |L3.242|
0000f2  f9b60040          LDRSH    r0,[r6,#0x40]         ;355  ; adc_window_cnt
0000f6  2896              CMP      r0,#0x96              ;355
0000f8  dd01              BLE      |L3.254|
0000fa  b103              CBZ      r3,|L3.254|
0000fc  7532              STRB     r2,[r6,#0x14]         ;357
                  |L3.254|
0000fe  381f              SUBS     r0,r0,#0x1f           ;357
000100  2827              CMP      r0,#0x27              ;358
000102  d22d              BCS      |L3.352|
000104  7d30              LDRB     r0,[r6,#0x14]         ;358  ; adc_window_flag
000106  bb58              CBNZ     r0,|L3.352|
000108  f04f0001          MOV      r0,#1                 ;360
00010c  7530              STRB     r0,[r6,#0x14]         ;360
00010e  e027              B        |L3.352|
                  |L3.272|
000110  483f              LDR      r0,|L3.528|
000112  7cb5              LDRB     r5,[r6,#0x12]         ;361  ; adc_ch
000114  7cf3              LDRB     r3,[r6,#0x13]         ;361  ; adc_ch_cnt
000116  eb001485          ADD      r4,r0,r5,LSL #6       ;361
00011a  f9b6103a          LDRSH    r1,[r6,#0x3a]         ;361  ; adc_result
00011e  f8441023          STR      r1,[r4,r3,LSL #2]     ;366
000122  0798              LSLS     r0,r3,#30             ;366
000124  d10f              BNE      |L3.326|
000126  4601              MOV      r1,r0                 ;367
                  |L3.296|
000128  f854c020          LDR      r12,[r4,r0,LSL #2]    ;367
00012c  4461              ADD      r1,r1,r12             ;369
00012e  f1000001          ADD      r0,r0,#1              ;369
000132  b2c0              UXTB     r0,r0                 ;369
000134  2810              CMP      r0,#0x10              ;369
000136  d3f7              BCC      |L3.296|
000138  ea4f1021          ASR      r0,r1,#4              ;370
00013c  4933              LDR      r1,|L3.524|
00013e  f1a10120          SUB      r1,r1,#0x20           ;370
000142  f8210015          STRH     r0,[r1,r5,LSL #1]     ;374
                  |L3.326|
000146  1c6d              ADDS     r5,r5,#1              ;374
000148  b2e8              UXTB     r0,r5                 ;374
00014a  74b0              STRB     r0,[r6,#0x12]         ;374
00014c  2810              CMP      r0,#0x10              ;374
00014e  d307              BCC      |L3.352|
000150  74b2              STRB     r2,[r6,#0x12]         ;374
000152  f1030301          ADD      r3,r3,#1              ;374
000156  b2d8              UXTB     r0,r3                 ;374
000158  74f0              STRB     r0,[r6,#0x13]         ;374
00015a  2810              CMP      r0,#0x10              ;375
00015c  d300              BCC      |L3.352|
00015e  74f2              STRB     r2,[r6,#0x13]         ;375
                  |L3.352|
000160  7432              STRB     r2,[r6,#0x10]         ;375
000162  f1070701          ADD      r7,r7,#1              ;375
000166  f0070001          AND      r0,r7,#1              ;377
00016a  7470              STRB     r0,[r6,#0x11]         ;377
00016c  4a29              LDR      r2,|L3.532|
00016e  b130              CBZ      r0,|L3.382|
000170  6810              LDR      r0,[r2,#0]            ;377
000172  f02000ff          BIC      r0,r0,#0xff           ;377
000176  f1000004          ADD      r0,r0,#4              ;388
00017a  6010              STR      r0,[r2,#0]            ;388
00017c  e03d              B        |L3.506|
                  |L3.382|
00017e  7cb1              LDRB     r1,[r6,#0x12]         ;389  ; adc_ch
000180  0708              LSLS     r0,r1,#28             ;389
000182  d406              BMI      |L3.402|
000184  6810              LDR      r0,[r2,#0]            ;391
000186  f02000ff          BIC      r0,r0,#0xff           ;391
00018a  f1000001          ADD      r0,r0,#1              ;391
00018e  6010              STR      r0,[r2,#0]            ;391
000190  e005              B        |L3.414|
                  |L3.402|
000192  6810              LDR      r0,[r2,#0]            ;392
000194  f02000ff          BIC      r0,r0,#0xff           ;392
000198  f1000002          ADD      r0,r0,#2              ;396
00019c  6010              STR      r0,[r2,#0]            ;396
                  |L3.414|
00019e  481e              LDR      r0,|L3.536|
0001a0  6803              LDR      r3,[r0,#0]            ;407
0001a2  f0435380          ORR      r3,r3,#0x10000000     ;407
0001a6  6003              STR      r3,[r0,#0]            ;407
0001a8  6a03              LDR      r3,[r0,#0x20]         ;408
0001aa  f0434380          ORR      r3,r3,#0x40000000     ;408
0001ae  6203              STR      r3,[r0,#0x20]         ;410
0001b0  6e03              LDR      r3,[r0,#0x60]         ;410
0001b2  f0436380          ORR      r3,r3,#0x4000000      ;410
0001b6  6603              STR      r3,[r0,#0x60]         ;410
0001b8  07cb              LSLS     r3,r1,#31             ;410
0001ba  d00a              BEQ      |L3.466|
0001bc  6943              LDR      r3,[r0,#0x14]         ;411
0001be  f0435380          ORR      r3,r3,#0x10000000     ;411
0001c2  6143              STR      r3,[r0,#0x14]         ;415
                  |L3.452|
0001c4  078b              LSLS     r3,r1,#30             ;415
0001c6  d409              BMI      |L3.476|
0001c8  6b43              LDR      r3,[r0,#0x34]         ;417
0001ca  f0234380          BIC      r3,r3,#0x40000000     ;417
0001ce  6343              STR      r3,[r0,#0x34]         ;417
0001d0  e008              B        |L3.484|
                  |L3.466|
0001d2  6943              LDR      r3,[r0,#0x14]         ;418
0001d4  f0235380          BIC      r3,r3,#0x10000000     ;418
0001d8  6143              STR      r3,[r0,#0x14]         ;420
0001da  e7f3              B        |L3.452|
                  |L3.476|
0001dc  6b43              LDR      r3,[r0,#0x34]         ;420
0001de  f0434380          ORR      r3,r3,#0x40000000     ;420
0001e2  6343              STR      r3,[r0,#0x34]         ;421
                  |L3.484|
0001e4  0749              LSLS     r1,r1,#29             ;421
0001e6  d404              BMI      |L3.498|
0001e8  6f41              LDR      r1,[r0,#0x74]         ;421
0001ea  f0216180          BIC      r1,r1,#0x4000000      ;421
0001ee  6741              STR      r1,[r0,#0x74]         ;379
0001f0  e003              B        |L3.506|
                  |L3.498|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;379
0001f4  f0416180          ORR      r1,r1,#0x4000000      ;380
0001f8  6741              STR      r1,[r0,#0x74]         ;380
                  |L3.506|
0001fa  6810              LDR      r0,[r2,#0]            ;382
0001fc  f0407080          ORR      r0,r0,#0x1000000      ;382
000200  6010              STR      r0,[r2,#0]            ;382
000202  e8bd81f0          POP      {r4-r8,pc}            ;382
;;;916    
                          ENDP

000206  0000              DCW      0x0000
                  |L3.520|
                          DCD      ||area_number.25||+0xee
                  |L3.524|
                          DCD      ||.bss||+0x42c
                  |L3.528|
                          DCD      ||.bss||+0xc
                  |L3.532|
                          DCD      0x40034000
                  |L3.536|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;308    	{
;;;309    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;307
00000c  7820              LDRB     r0,[r4,#0]            ;307  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;307
000010  b2c0              UXTB     r0,r0
;;;310    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;311    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;312    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;315
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;320  ; bps_I
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  8008              STRH     r0,[r1,#0]
;;;551    	snmp_bat_flag_puts[0]=0;
000034  495d              LDR      r1,|L4.428|
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;790    	snmp_bat_flag_puts[1]=0;
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]            ;317
00004c  4288              CMP      r0,r1                 ;317
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;317
000054  f1b90f0a          CMP      r9,#0xa               ;317
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;319
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;320
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;317
000064  280a              CMP      r0,#0xa               ;319
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;319
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;322
000072  f88c2001          STRB     r2,[r12,#1]           ;322
000076  f1a30301          SUB      r3,r3,#1              ;322
00007a  f8a83000          STRH     r3,[r8,#0]            ;323
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;323
000084  f88c2001          STRB     r2,[r12,#1]           ;328
000088  f1030301          ADD      r3,r3,#1              ;328
00008c  f8a83000          STRH     r3,[r8,#0]            ;329
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;331
000092  4251              RSBS     r1,r2,#0              ;331
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;332  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;336
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;336  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;336
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;338  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;338
0000b4  f04f0004          MOV      r0,#4                 ;339
0000b8  f88d0001          STRB     r0,[sp,#1]            ;341
0000bc  f88d5002          STRB     r5,[sp,#2]            ;341
0000c0  f04f0002          MOV      r0,#2                 ;341
0000c4  f88d0003          STRB     r0,[sp,#3]            ;342
0000c8  f88d5004          STRB     r5,[sp,#4]            ;342
0000cc  f04f0001          MOV      r0,#1                 ;342
0000d0  f88d0005          STRB     r0,[sp,#5]            ;347
0000d4  f04f0106          MOV      r1,#6                 ;347
0000d8  4668              MOV      r0,sp                 ;348
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;350
0000e2  ea4f2020          ASR      r0,r0,#8              ;350
0000e6  f88d0007          STRB     r0,[sp,#7]            ;350
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;351  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;355
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;355
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;357  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;357
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;358
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22050          LDRSH    r2,[r2,#0x50]         ;360  ; main_kb_cnt
00010a  4291              CMP      r1,r2                 ;360
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]            ;360  ; ICA_EN
000110  2901              CMP      r1,#1                 ;360
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]            ;361  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]            ;361
00011c  f04f0106          MOV      r1,#6                 ;366
000120  f88d1001          STRB     r1,[sp,#1]            ;366
000124  f88d5002          STRB     r5,[sp,#2]            ;367
000128  f04f011e          MOV      r1,#0x1e              ;367
00012c  f88d1003          STRB     r1,[sp,#3]            ;369
000130  ea4f71e0          ASR      r1,r0,#31             ;369
000134  eb006111          ADD      r1,r0,r1,LSR #24      ;369
000138  ea4f2221          ASR      r2,r1,#8              ;370
00013c  f88d2004          STRB     r2,[sp,#4]            ;370
000140  f88d0005          STRB     r0,[sp,#5]            ;370
000144  f04f0106          MOV      r1,#6                 ;374
000148  4668              MOV      r0,sp                 ;374
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]            ;374
000152  ea4f2020          ASR      r0,r0,#8              ;374
000156  f88d0007          STRB     r0,[sp,#7]            ;374
00015a  8838              LDRH     r0,[r7,#0]            ;375  ; ICA_CH
00015c  2800              CMP      r0,#0                 ;375
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0                 ;375
000162  466d              MOV      r5,sp                 ;375
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]            ;375
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1              ;377
000172  b2e4              UXTB     r4,r4                 ;377
000174  2c08              CMP      r4,#8                 ;377
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14           ;388
00017a  e8bd83f0          POP      {r4-r9,pc}            ;388
                  |L4.382|
00017e  f04f0400          MOV      r4,#0                 ;389
000182  46e9              MOV      r9,sp                 ;389
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]            ;391
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1              ;391
000190  b2e4              UXTB     r4,r4                 ;392
000192  2c08              CMP      r4,#8                 ;392
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;916    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;306    {  
000002  4604              MOV      r4,r0
;;;307    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;308    	{
;;;309    	vz_error=0;
;;;310    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;311    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;312    	vz2_error=0;
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;315
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;319
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;320
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  b101              CBZ      r1,|L5.54|
;;;551    	snmp_bat_flag_puts[0]=0;
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;790    	snmp_bat_flag_puts[1]=0;
000040  f1000001          ADD      r0,r0,#1
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;317
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;317
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;317
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;317
000058  461a              MOV      r2,r3                 ;319
00005a  210e              MOVS     r1,#0xe               ;319
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;319
000066  2202              MOVS     r2,#2                 ;319
000068  210e              MOVS     r1,#0xe               ;319
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;322
000074  2203              MOVS     r2,#3                 ;322
000076  210e              MOVS     r1,#0xe               ;322
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;323
000082  2204              MOVS     r2,#4                 ;323
000084  210e              MOVS     r1,#0xe               ;328
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;331
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;331
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;331  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;331
00009c  70d0              STRB     r0,[r2,#3]            ;332
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;332
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;336
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;336
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;338
0000b0  2201              MOVS     r2,#1                 ;338
0000b2  210e              MOVS     r1,#0xe               ;339
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;341
0000be  461a              MOV      r2,r3                 ;341
0000c0  210e              MOVS     r1,#0xe               ;341
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;342
0000cc  2203              MOVS     r2,#3                 ;342
0000ce  210e              MOVS     r1,#0xe               ;347
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;348
0000da  2204              MOVS     r2,#4                 ;348
0000dc  210e              MOVS     r1,#0xe               ;350
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;350
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;351
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;351  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;355
0000f4  70d0              STRB     r0,[r2,#3]            ;355
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;357
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;357
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;358
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3                 ;360
000108  2201              MOVS     r2,#1                 ;360
00010a  210e              MOVS     r1,#0xe               ;360
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3                 ;361
000116  2202              MOVS     r2,#2                 ;361
000118  210e              MOVS     r1,#0xe               ;361
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3                 ;366
000124  461a              MOV      r2,r3                 ;367
000126  210e              MOVS     r1,#0xe               ;367
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3                 ;369
000132  2204              MOVS     r2,#4                 ;369
000134  210e              MOVS     r1,#0xe               ;369
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28             ;370
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28             ;374
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]            ;374  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1              ;374
00014c  70d0              STRB     r0,[r2,#3]            ;374
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1                 ;374
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2                 ;374
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3                 ;374
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4                 ;375
000160  2201              MOVS     r2,#1                 ;375
000162  210e              MOVS     r1,#0xe               ;375
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4                 ;377
00016e  2202              MOVS     r2,#2                 ;377
000170  210e              MOVS     r1,#0xe               ;377
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4                 ;388
00017c  2203              MOVS     r2,#3                 ;388
00017e  210e              MOVS     r1,#0xe               ;389
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4                 ;391
00018a  461a              MOV      r2,r3                 ;391
00018c  210e              MOVS     r1,#0xe               ;391
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27             ;392
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27             ;396
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]            ;396  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1              ;407
0001a4  70d0              STRB     r0,[r2,#3]            ;407
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1                 ;408
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2                 ;408
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;410
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;410
0001b8  2201              MOVS     r2,#1                 ;410
0001ba  210e              MOVS     r1,#0xe               ;411
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;415
0001c6  2202              MOVS     r2,#2                 ;415
0001c8  210e              MOVS     r1,#0xe               ;417
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;418
0001d4  2203              MOVS     r2,#3                 ;418
0001d6  210e              MOVS     r1,#0xe               ;420
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;420
0001e2  2204              MOVS     r2,#4                 ;421
0001e4  210e              MOVS     r1,#0xe               ;421
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;379
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;379
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;380  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1              ;380
0001fc  70d0              STRB     r0,[r2,#3]            ;382
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1                 ;382
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2                 ;382
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3                 ;383
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6                 ;383
000210  2201              MOVS     r2,#1                 ;398
000212  210e              MOVS     r1,#0xe               ;398
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6                 ;399
00021e  2202              MOVS     r2,#2                 ;401
000220  210e              MOVS     r1,#0xe               ;401
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6                 ;402
00022c  2203              MOVS     r2,#3                 ;402
00022e  210e              MOVS     r1,#0xe               ;402
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6                 ;426
00023a  2204              MOVS     r2,#4                 ;426
00023c  210e              MOVS     r1,#0xe               ;427
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]            ;429  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1              ;429
000250  70d0              STRB     r0,[r2,#3]            ;430
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1                 ;430
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2                 ;434
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3                 ;434
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0                 ;445
000264  2201              MOVS     r2,#1                 ;445
000266  210e              MOVS     r1,#0xe               ;446
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;448
000272  2202              MOVS     r2,#2                 ;448
000274  210e              MOVS     r1,#0xe               ;448
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;449
000280  2203              MOVS     r2,#3                 ;453
000282  210e              MOVS     r1,#0xe               ;453
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;456
00028e  2204              MOVS     r2,#4                 ;456
000290  210e              MOVS     r1,#0xe               ;456
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!        ;458
00029c  7068              STRB     r0,[r5,#1]            ;458
00029e  bd70              POP      {r4-r6,pc}            ;459
;;;916    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb8
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;308    	{
;;;309    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;307  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;307  ; TBOXMAX
;;;310    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;311    	vz1_error=0;
;;;312    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;315
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;319
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
;;;551    	snmp_bat_flag_puts[0]=0;
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  dd00              BLE      |L6.66|
;;;790    	snmp_bat_flag_puts[1]=0;
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;317
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;317  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;319  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;319
00005a  4298              CMP      r0,r3                 ;319
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;320  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;317
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;319
00006a  b249              SXTB     r1,r1                 ;320
00006c  7011              STRB     r1,[r2,#0]            ;320
00006e  291e              CMP      r1,#0x1e              ;322
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;322  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;322
000078  8039              STRH     r1,[r7,#0]            ;322
00007a  7014              STRB     r4,[r2,#0]            ;323
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;323
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;323  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;328
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;329
00008e  b249              SXTB     r1,r1                 ;331
000090  7011              STRB     r1,[r2,#0]            ;331
000092  291e              CMP      r1,#0x1e              ;331
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;331  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;331
00009c  8039              STRH     r1,[r7,#0]            ;332
00009e  7014              STRB     r4,[r2,#0]            ;332
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;336
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;336  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;338
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;338
0000b0  2100              MOVS     r1,#0                 ;338
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;341
0000be  8800              LDRH     r0,[r0,#0]            ;341  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;341
0000c2  b202              SXTH     r2,r0                 ;341
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;342
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;347  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;348
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;348  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;350
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;350  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;350
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;351
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;351
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;355  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;357
0000fc  2928              CMP      r1,#0x28              ;357
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;358  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0                 ;360
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]            ;360  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1              ;360
000110  8038              STRH     r0,[r7,#0]            ;360
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]            ;361  ; TBATENABLE
000118  4281              CMP      r1,r0                 ;361
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]            ;366  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1              ;366
000122  8038              STRH     r0,[r7,#0]            ;366
                  |L6.292|
000124  2206              MOVS     r2,#6                 ;367
000126  2100              MOVS     r1,#0                 ;367
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]            ;369  ; tbatdisable_cnt
000132  2805              CMP      r0,#5                 ;369
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]            ;370
                  |L6.314|
00013a  2801              CMP      r0,#1                 ;370
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]            ;370
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]            ;374
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]            ;374  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32           ;374
000154  291e              CMP      r1,#0x1e              ;374
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]            ;374  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0                 ;375
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]            ;375  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1              ;375
000168  8028              STRH     r0,[r5,#0]            ;377
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]            ;377  ; TLOADENABLE
000170  4281              CMP      r1,r0                 ;377
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]            ;377  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1              ;388
00017a  8028              STRH     r0,[r5,#0]            ;388
                  |L6.380|
00017c  2206              MOVS     r2,#6                 ;388
00017e  2100              MOVS     r1,#0                 ;389
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]            ;391  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5                 ;391
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]            ;391
                  |L6.400|
000190  2801              CMP      r0,#1                 ;392
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]            ;392
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}            ;392
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]            ;396
00019c  e7fb              B        |L6.406|
;;;916    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;308    	{
;;;309    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;307
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;307
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;310    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;311    	vz1_error=0;
;;;312    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;315
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;319
000030  4e45              LDR      r6,|L7.328|
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  4f46              LDR      r7,|L7.332|
;;;551    	snmp_bat_flag_puts[0]=0;
000034  f8df8118          LDR      r8,|L7.336|
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
;;;790    	snmp_bat_flag_puts[1]=0;
000040  2500              MOVS     r5,#0
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;317
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;317
00004e  f8a81000          STRH     r1,[r8,#0]            ;317
000052  2801              CMP      r0,#1                 ;319
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;317
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;319
00005a  2200              MOVS     r2,#0                 ;319
00005c  21e6              MOVS     r1,#0xe6              ;320
00005e  20e1              MOVS     r0,#0xe1              ;320
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;319
000068  f04f0000          MOV      r0,#0                 ;319
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;320
000070  f9b85000          LDRSH    r5,[r8,#0]            ;322
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;322
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  ebc001c0          RSB      r1,r0,r0,LSL #3       ;323
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;323
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;323
000086  69c9              LDR      r1,[r1,#0x1c]         ;328
000088  4299              CMP      r1,r3                 ;328
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;329
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;331
000094  b2c0              UXTB     r0,r0                 ;331
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;331
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;332
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;332
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;336
0000aa  7020              STRB     r0,[r4,#0]            ;338
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;338
0000b0  f8a81000          STRH     r1,[r8,#0]            ;338
0000b4  2802              CMP      r0,#2                 ;339
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;341
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;341
0000bc  2200              MOVS     r2,#0                 ;341
0000be  21e6              MOVS     r1,#0xe6              ;341
0000c0  20e1              MOVS     r0,#0xe1              ;341
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;342
0000ca  f04f0000          MOV      r0,#0                 ;342
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;347
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;347
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;348
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  ebc001c0          RSB      r1,r0,r0,LSL #3       ;350
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;350
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;350
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;351
0000ea  4299              CMP      r1,r3                 ;351
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;351
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;355
0000f6  b2c0              UXTB     r0,r0                 ;355
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;357
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;357
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;358
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee              ;360
00010a  e9cd0500          STRD     r0,r5,[sp,#0]         ;360
00010e  9502              STR      r5,[sp,#8]            ;360
000110  9503              STR      r5,[sp,#0xc]          ;360
000112  7831              LDRB     r1,[r6,#0]            ;361  ; uavt_bps_pntr
000114  4603              MOV      r3,r0                 ;361
000116  2216              MOVS     r2,#0x16              ;361
000118  4608              MOV      r0,r1                 ;361
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]            ;366  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1              ;366
000122  b2c0              UXTB     r0,r0                 ;366
000124  7030              STRB     r0,[r6,#0]            ;367
000126  f9ba1000          LDRSH    r1,[r10,#0]           ;367  ; NUMIST
00012a  4288              CMP      r0,r1                 ;369
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]            ;369
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]            ;369  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]           ;369
000136  e8bd9fff          POP      {r0-r12,pc}           ;370
;;;916    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;306    {  
000002  f44f70b4          MOV      r0,#0x168
;;;307    if(spc_stat!=spcVZ) 
;;;308    	{
;;;309    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;307
00000e  700a              STRB     r2,[r1,#0]            ;307
000010  f04f0100          MOV      r1,#0
;;;310    	sp_ch_error=0;
;;;311    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;312    	vz2_error=0;
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
;;;551    	snmp_bat_flag_puts[0]=0;
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
;;;790    	snmp_bat_flag_puts[1]=0;
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
;;;916    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  kb_full_ver
00001b  00                DCB      0x00
                  kb_start_ips
00001c  00                DCB      0x00
                  num_of_wrks_bps
00001d  00                DCB      0x00
                  num_necc_up
00001e  00                DCB      0x00
                  num_necc_down
00001f  00                DCB      0x00
                  sh_cnt0
000020  00                DCB      0x00
                  b1Hz_sh
000021  00                DCB      0x00
                  spc_stat
000022  00                DCB      0x00
                  spc_bat
000023  00                DCB      0x00
                  spc_phase
000024  00                DCB      0x00
                  bAVZ
000025  00                DCB      0x00
                  ke_start_stat
000026  00                DCB      0x00
                  numOfForvardBps
000027  00                DCB      0x00
                  numOfForvardBps_old
000028  00                DCB      0x00
                  numOfForvardBps_minCnt
000029  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002a  00                DCB      0x00
                  bPARALLEL_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL
00002c  00                DCB      0x00
                  cntrl_hndl_plazma
00002d  00                DCB      0x00
                  volt_region
00002e  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
00002f  00                DCB      0x00
                  cntrl_stat
000030  0258              DCW      0x0258
                  cntrl_stat_old
000032  0258              DCW      0x0258
                  avg_main_cnt
000034  0014              DCW      0x0014
                  num_necc_block_cnt
000036  0000              DCB      0x00,0x00
                  net_buff_
000038  0000              DCB      0x00,0x00
                  adc_result
00003a  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003c  0000              DCB      0x00,0x00
                  adc_zero_cnt
00003e  0000              DCB      0x00,0x00
                  adc_window_cnt
000040  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000042  0000              DCB      0x00,0x00
                  plazma_sk
000044  0000              DCB      0x00,0x00
                  cntrl_stat_new
000046  0000              DCB      0x00,0x00
                  Ibmax
000048  0000              DCB      0x00,0x00
                  IZMAX_
00004a  0000              DCB      0x00,0x00
                  Ubpsmax
00004c  0000              DCB      0x00,0x00
                  samokalibr_cnt
00004e  0000              DCB      0x00,0x00
                  main_kb_cnt
000050  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000052  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000054  0000              DCB      0x00,0x00
                  kb_start
000056  0000              DCB      0x00,0x00
                  ibat_ips
000058  0000              DCB      0x00,0x00
                  ibat_ips_
00005a  0000              DCB      0x00,0x00
                  bps_on_mask
00005c  0000              DCB      0x00,0x00
                  bps_off_mask
00005e  0000              DCB      0x00,0x00
                  vz_cnt_s
000060  0000              DCB      0x00,0x00
                  vz_cnt_s_
000062  0000              DCB      0x00,0x00
                  vz_cnt_h
000064  0000              DCB      0x00,0x00
                  vz_cnt_h_
000066  0000              DCB      0x00,0x00
                  cnt_end_ke
000068  0000              DCB      0x00,0x00
                  __ee_vz_cnt
00006a  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006c  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006e  0000              DCB      0x00,0x00
                  __ee_spc_phase
000070  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000072  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000074  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000076  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000078  0000              DCB      0x00,0x00
                  volt_region_cnt
00007a  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007c  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007e  0000              DCB      0x00,0x00
                  plazma_ica1
000080  0000              DCB      0x00,0x00
                  bat_hndl_i
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000086  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000088  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
00008a  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008c  00000000          DCB      0x00,0x00,0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000ec  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ee  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
