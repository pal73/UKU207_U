; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4efd              LDR      r6,|L1.1020|
;;;330    	{
;;;331    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;329  ; spc_stat
00000c  2802              CMP      r0,#2                 ;329
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;332    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;333    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;334    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f8dfb3e4          LDR      r11,|L1.1024|
00001c  f8dfa3e4          LDR      r10,|L1.1028|
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8df83e4          LDR      r8,|L1.1032|
000024  f9bb0000          LDRSH    r0,[r11,#0]           ;337  ; snmp_bat_status
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93e0          LDR      r9,|L1.1036|
00002c  4cf8              LDR      r4,|L1.1040|
00002e  4df9              LDR      r5,|L1.1044|
000030  b108              CBZ      r0,|L1.54|
000032  2802              CMP      r0,#2                 ;337
000034  d172              BNE      |L1.284|
                  |L1.54|
000036  f9ba0000          LDRSH    r0,[r10,#0]           ;337  ; NUMBAT
00003a  2800              CMP      r0,#0                 ;337
00003c  dd6e              BLE      |L1.284|
00003e  48f6              LDR      r0,|L1.1048|
000040  f9b82002          LDRSH    r2,[r8,#2]            ;339  ; bat
000044  f9b00000          LDRSH    r0,[r0,#0]            ;339  ; USIGN
000048  eb000380          ADD      r3,r0,r0,LSL #2       ;339
00004c  48f0              LDR      r0,|L1.1040|
00004e  ebb20f43          CMP      r2,r3,LSL #1          ;339
000052  f9b01000          LDRSH    r1,[r0,#0]            ;341
000056  48ef              LDR      r0,|L1.1044|
000058  f9b00000          LDRSH    r0,[r0,#0]            ;342
00005c  da0f              BGE      |L1.126|
00005e  f0410101          ORR      r1,r1,#1              ;341
000062  8021              STRH     r1,[r4,#0]            ;341
000064  07c0              LSLS     r0,r0,#31             ;342
000066  d119              BNE      |L1.156|
000068  2300              MOVS     r3,#0                 ;344
00006a  2208              MOVS     r2,#8                 ;344
00006c  2105              MOVS     r1,#5                 ;344
00006e  a0eb              ADR      r0,|L1.1052|
000070  f7fffffe          BL       snmp_trap_send
000074  8828              LDRH     r0,[r5,#0]            ;345  ; snmp_bat_flag_puts
000076  f0400001          ORR      r0,r0,#1              ;345
00007a  8028              STRH     r0,[r5,#0]            ;345
00007c  e00e              B        |L1.156|
                  |L1.126|
00007e  f0210101          BIC      r1,r1,#1              ;350
000082  8021              STRH     r1,[r4,#0]            ;350
000084  07c0              LSLS     r0,r0,#31             ;351
000086  d009              BEQ      |L1.156|
000088  2301              MOVS     r3,#1                 ;353
00008a  2208              MOVS     r2,#8                 ;353
00008c  2105              MOVS     r1,#5                 ;353
00008e  a0eb              ADR      r0,|L1.1084|
000090  f7fffffe          BL       snmp_trap_send
000094  8828              LDRH     r0,[r5,#0]            ;354  ; snmp_bat_flag_puts
000096  f0200001          BIC      r0,r0,#1              ;354
00009a  8028              STRH     r0,[r5,#0]            ;354
                  |L1.156|
00009c  f898003f          LDRB     r0,[r8,#0x3f]         ;358  ; bat
0000a0  07c1              LSLS     r1,r0,#31             ;358
0000a2  d00b              BEQ      |L1.188|
0000a4  8821              LDRH     r1,[r4,#0]            ;360  ; snmp_bat_flag
0000a6  f0410102          ORR      r1,r1,#2              ;360
0000aa  8021              STRH     r1,[r4,#0]            ;360
0000ac  f9b51000          LDRSH    r1,[r5,#0]            ;361  ; snmp_bat_flag_puts
0000b0  078a              LSLS     r2,r1,#30             ;361
0000b2  d40e              BMI      |L1.210|
0000b4  f0410102          ORR      r1,r1,#2              ;364
0000b8  8029              STRH     r1,[r5,#0]            ;364
0000ba  e00a              B        |L1.210|
                  |L1.188|
0000bc  8821              LDRH     r1,[r4,#0]            ;369  ; snmp_bat_flag
0000be  f0210102          BIC      r1,r1,#2              ;369
0000c2  8021              STRH     r1,[r4,#0]            ;369
0000c4  f9b51000          LDRSH    r1,[r5,#0]            ;370  ; snmp_bat_flag_puts
0000c8  078a              LSLS     r2,r1,#30             ;370
0000ca  d502              BPL      |L1.210|
0000cc  f0210102          BIC      r1,r1,#2              ;373
0000d0  8029              STRH     r1,[r5,#0]            ;373
                  |L1.210|
0000d2  0780              LSLS     r0,r0,#30             ;377
0000d4  d50b              BPL      |L1.238|
0000d6  8820              LDRH     r0,[r4,#0]            ;379  ; snmp_bat_flag
0000d8  f0400004          ORR      r0,r0,#4              ;379
0000dc  8020              STRH     r0,[r4,#0]            ;379
0000de  f9b50000          LDRSH    r0,[r5,#0]            ;380  ; snmp_bat_flag_puts
0000e2  0741              LSLS     r1,r0,#29             ;380
0000e4  d40e              BMI      |L1.260|
0000e6  f0400004          ORR      r0,r0,#4              ;383
0000ea  8028              STRH     r0,[r5,#0]            ;383
0000ec  e00a              B        |L1.260|
                  |L1.238|
0000ee  8820              LDRH     r0,[r4,#0]            ;388  ; snmp_bat_flag
0000f0  f0200004          BIC      r0,r0,#4              ;388
0000f4  8020              STRH     r0,[r4,#0]            ;388
0000f6  f9b50000          LDRSH    r0,[r5,#0]            ;389  ; snmp_bat_flag_puts
0000fa  0741              LSLS     r1,r0,#29             ;389
0000fc  d502              BPL      |L1.260|
0000fe  f0200004          BIC      r0,r0,#4              ;392
000102  8028              STRH     r0,[r5,#0]            ;392
                  |L1.260|
000104  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
000108  f9b80008          LDRSH    r0,[r8,#8]  ; bat
00010c  424a              RSBS     r2,r1,#0
00010e  4290              CMP      r0,r2
000110  da05              BGE      |L1.286|
000112  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000114  f0400008          ORR      r0,r0,#8
000118  8020              STRH     r0,[r4,#0]
00011a  e006              B        |L1.298|
                  |L1.284|
00011c  e15e              B        |L1.988|
                  |L1.286|
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  4288              CMP      r0,r1
000120  dd03              BLE      |L1.298|
000122  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000124  f0200008          BIC      r0,r0,#8
000128  8020              STRH     r0,[r4,#0]
                  |L1.298|
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
00012e  2801              CMP      r0,#1
000130  d103              BNE      |L1.314|
000132  f8960024          LDRB     r0,[r6,#0x24]  ; spc_bat
000136  2800              CMP      r0,#0
000138  d03a              BEQ      |L1.432|
                  |L1.314|
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00013c  f0200010          BIC      r0,r0,#0x10
000140  8020              STRH     r0,[r4,#0]
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000144  06c0              LSLS     r0,r0,#27
000146  d509              BPL      |L1.348|
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  2307              MOVS     r3,#7
00014a  2208              MOVS     r2,#8
00014c  2105              MOVS     r1,#5
00014e  a0c5              ADR      r0,|L1.1124|
000150  f7fffffe          BL       snmp_trap_send
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000156  f0200010          BIC      r0,r0,#0x10
00015a  8028              STRH     r0,[r5,#0]
                  |L1.348|
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000160  2802              CMP      r0,#2
000162  d037              BEQ      |L1.468|
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000166  f0200020          BIC      r0,r0,#0x20
00016a  8020              STRH     r0,[r4,#0]
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00016e  0680              LSLS     r0,r0,#26
000170  d509              BPL      |L1.390|
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  2309              MOVS     r3,#9
000174  2208              MOVS     r2,#8
000176  2105              MOVS     r1,#5
000178  a0c2              ADR      r0,|L1.1156|
00017a  f7fffffe          BL       snmp_trap_send
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000180  f0200020          BIC      r0,r0,#0x20
000184  8028              STRH     r0,[r5,#0]
                  |L1.390|
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  7870              LDRB     r0,[r6,#1]  ; vz_error
000188  2800              CMP      r0,#0
00018a  d035              BEQ      |L1.504|
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00018e  f0400040          ORR      r0,r0,#0x40
000192  8020              STRH     r0,[r4,#0]
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000196  0640              LSLS     r0,r0,#25
000198  d43f              BMI      |L1.538|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  230a              MOVS     r3,#0xa
00019c  2208              MOVS     r2,#8
00019e  2105              MOVS     r1,#5
0001a0  a0c1              ADR      r0,|L1.1192|
0001a2  f7fffffe          BL       snmp_trap_send
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0001a8  f0400040          ORR      r0,r0,#0x40
0001ac  8028              STRH     r0,[r5,#0]
0001ae  e034              B        |L1.538|
                  |L1.432|
0001b0  8820              LDRH     r0,[r4,#0]            ;401  ; snmp_bat_flag
0001b2  f0400010          ORR      r0,r0,#0x10           ;401
0001b6  8020              STRH     r0,[r4,#0]            ;401
0001b8  8828              LDRH     r0,[r5,#0]            ;402  ; snmp_bat_flag_puts
0001ba  06c0              LSLS     r0,r0,#27             ;402
0001bc  d4ce              BMI      |L1.348|
0001be  2306              MOVS     r3,#6                 ;404
0001c0  2208              MOVS     r2,#8                 ;404
0001c2  2105              MOVS     r1,#5                 ;404
0001c4  a0c1              ADR      r0,|L1.1228|
0001c6  f7fffffe          BL       snmp_trap_send
0001ca  8828              LDRH     r0,[r5,#0]            ;405  ; snmp_bat_flag_puts
0001cc  f0400010          ORR      r0,r0,#0x10           ;405
0001d0  8028              STRH     r0,[r5,#0]            ;405
0001d2  e7c3              B        |L1.348|
                  |L1.468|
0001d4  8820              LDRH     r0,[r4,#0]            ;420  ; snmp_bat_flag
0001d6  f0400020          ORR      r0,r0,#0x20           ;420
0001da  8020              STRH     r0,[r4,#0]            ;420
0001dc  8828              LDRH     r0,[r5,#0]            ;421  ; snmp_bat_flag_puts
0001de  0680              LSLS     r0,r0,#26             ;421
0001e0  d4d1              BMI      |L1.390|
0001e2  2308              MOVS     r3,#8                 ;423
0001e4  461a              MOV      r2,r3                 ;423
0001e6  2105              MOVS     r1,#5                 ;423
0001e8  a0c0              ADR      r0,|L1.1260|
0001ea  f7fffffe          BL       snmp_trap_send
0001ee  8828              LDRH     r0,[r5,#0]            ;424  ; snmp_bat_flag_puts
0001f0  f0400020          ORR      r0,r0,#0x20           ;424
0001f4  8028              STRH     r0,[r5,#0]            ;424
0001f6  e7c6              B        |L1.390|
                  |L1.504|
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
0001f8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0001fa  f0200040          BIC      r0,r0,#0x40
0001fe  8020              STRH     r0,[r4,#0]
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000202  0640              LSLS     r0,r0,#25
000204  d509              BPL      |L1.538|
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  230b              MOVS     r3,#0xb
000208  2208              MOVS     r2,#8
00020a  2105              MOVS     r1,#5
00020c  a0c0              ADR      r0,|L1.1296|
00020e  f7fffffe          BL       snmp_trap_send
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
000212  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000214  f0200040          BIC      r0,r0,#0x40
000218  8028              STRH     r0,[r5,#0]
                  |L1.538|
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  48c6              LDR      r0,|L1.1332|
00021c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
00021e  2802              CMP      r0,#2
000220  d024              BEQ      |L1.620|
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
000222  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000224  f0200080          BIC      r0,r0,#0x80
000228  8020              STRH     r0,[r4,#0]
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00022c  0600              LSLS     r0,r0,#24
00022e  d509              BPL      |L1.580|
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  230b              MOVS     r3,#0xb
000232  2208              MOVS     r2,#8
000234  2105              MOVS     r1,#5
000236  a0c0              ADR      r0,|L1.1336|
000238  f7fffffe          BL       snmp_trap_send
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00023e  f0200080          BIC      r0,r0,#0x80
000242  8028              STRH     r0,[r5,#0]
                  |L1.580|
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  78b0              LDRB     r0,[r6,#2]  ; sp_ch_error
000246  b318              CBZ      r0,|L1.656|
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
000248  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00024a  f4407080          ORR      r0,r0,#0x100
00024e  8020              STRH     r0,[r4,#0]
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000252  05c0              LSLS     r0,r0,#23
000254  d42d              BMI      |L1.690|
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  230c              MOVS     r3,#0xc
000258  2208              MOVS     r2,#8
00025a  2105              MOVS     r1,#5
00025c  a0be              ADR      r0,|L1.1368|
00025e  f7fffffe          BL       snmp_trap_send
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
000262  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000264  f4407080          ORR      r0,r0,#0x100
000268  8028              STRH     r0,[r5,#0]
00026a  e022              B        |L1.690|
                  |L1.620|
00026c  8820              LDRH     r0,[r4,#0]            ;458  ; snmp_bat_flag
00026e  f0400080          ORR      r0,r0,#0x80           ;458
000272  8020              STRH     r0,[r4,#0]            ;458
000274  8828              LDRH     r0,[r5,#0]            ;459  ; snmp_bat_flag_puts
000276  0600              LSLS     r0,r0,#24             ;459
000278  d4e4              BMI      |L1.580|
00027a  230a              MOVS     r3,#0xa               ;461
00027c  2208              MOVS     r2,#8                 ;461
00027e  2105              MOVS     r1,#5                 ;461
000280  a0bd              ADR      r0,|L1.1400|
000282  f7fffffe          BL       snmp_trap_send
000286  8828              LDRH     r0,[r5,#0]            ;462  ; snmp_bat_flag_puts
000288  f0400080          ORR      r0,r0,#0x80           ;462
00028c  8028              STRH     r0,[r5,#0]            ;462
00028e  e7d9              B        |L1.580|
                  |L1.656|
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
000290  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000292  f4207080          BIC      r0,r0,#0x100
000296  8020              STRH     r0,[r4,#0]
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00029a  05c0              LSLS     r0,r0,#23
00029c  d509              BPL      |L1.690|
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  230d              MOVS     r3,#0xd
0002a0  2208              MOVS     r2,#8
0002a2  2105              MOVS     r1,#5
0002a4  a0bc              ADR      r0,|L1.1432|
0002a6  f7fffffe          BL       snmp_trap_send
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
0002aa  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002ac  f4207080          BIC      r0,r0,#0x100
0002b0  8028              STRH     r0,[r5,#0]
                  |L1.690|
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
0002b2  7970              LDRB     r0,[r6,#5]  ; vz1_stat
0002b4  b188              CBZ      r0,|L1.730|
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
0002b6  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002b8  f4407000          ORR      r0,r0,#0x200
0002bc  8020              STRH     r0,[r4,#0]
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
0002be  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002c0  0580              LSLS     r0,r0,#22
0002c2  d41b              BMI      |L1.764|
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
0002c4  230e              MOVS     r3,#0xe
0002c6  2208              MOVS     r2,#8
0002c8  2105              MOVS     r1,#5
0002ca  a0bc              ADR      r0,|L1.1468|
0002cc  f7fffffe          BL       snmp_trap_send
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
0002d0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002d2  f4407000          ORR      r0,r0,#0x200
0002d6  8028              STRH     r0,[r5,#0]
0002d8  e010              B        |L1.764|
                  |L1.730|
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
0002da  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0002dc  f4207000          BIC      r0,r0,#0x200
0002e0  8020              STRH     r0,[r4,#0]
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
0002e2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002e4  0580              LSLS     r0,r0,#22
0002e6  d509              BPL      |L1.764|
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
0002e8  230f              MOVS     r3,#0xf
0002ea  2208              MOVS     r2,#8
0002ec  2105              MOVS     r1,#5
0002ee  a0bb              ADR      r0,|L1.1500|
0002f0  f7fffffe          BL       snmp_trap_send
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
0002f4  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0002f6  f4207000          BIC      r0,r0,#0x200
0002fa  8028              STRH     r0,[r5,#0]
                  |L1.764|
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
0002fc  78f0              LDRB     r0,[r6,#3]  ; vz1_error
0002fe  b188              CBZ      r0,|L1.804|
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
000300  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000302  f4406080          ORR      r0,r0,#0x400
000306  8020              STRH     r0,[r4,#0]
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
000308  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00030a  0540              LSLS     r0,r0,#21
00030c  d41b              BMI      |L1.838|
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
00030e  2310              MOVS     r3,#0x10
000310  2208              MOVS     r2,#8
000312  2105              MOVS     r1,#5
000314  a0b9              ADR      r0,|L1.1532|
000316  f7fffffe          BL       snmp_trap_send
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
00031a  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00031c  f4406080          ORR      r0,r0,#0x400
000320  8028              STRH     r0,[r5,#0]
000322  e010              B        |L1.838|
                  |L1.804|
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
000324  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000326  f4206080          BIC      r0,r0,#0x400
00032a  8020              STRH     r0,[r4,#0]
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
00032c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00032e  0540              LSLS     r0,r0,#21
000330  d509              BPL      |L1.838|
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
000332  2311              MOVS     r3,#0x11
000334  2208              MOVS     r2,#8
000336  2105              MOVS     r1,#5
000338  a0b9              ADR      r0,|L1.1568|
00033a  f7fffffe          BL       snmp_trap_send
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
00033e  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000340  f4206080          BIC      r0,r0,#0x400
000344  8028              STRH     r0,[r5,#0]
                  |L1.838|
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
000346  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
000348  b188              CBZ      r0,|L1.878|
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
00034a  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
00034c  f4406000          ORR      r0,r0,#0x800
000350  8020              STRH     r0,[r4,#0]
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
000352  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000354  0500              LSLS     r0,r0,#20
000356  d41b              BMI      |L1.912|
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
000358  2312              MOVS     r3,#0x12
00035a  2208              MOVS     r2,#8
00035c  2105              MOVS     r1,#5
00035e  a0ba              ADR      r0,|L1.1608|
000360  f7fffffe          BL       snmp_trap_send
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
000364  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000366  f4406000          ORR      r0,r0,#0x800
00036a  8028              STRH     r0,[r5,#0]
00036c  e010              B        |L1.912|
                  |L1.878|
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
00036e  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000370  f4206000          BIC      r0,r0,#0x800
000374  8020              STRH     r0,[r4,#0]
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
000376  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
000378  0500              LSLS     r0,r0,#20
00037a  d509              BPL      |L1.912|
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
00037c  2313              MOVS     r3,#0x13
00037e  2208              MOVS     r2,#8
000380  2105              MOVS     r1,#5
000382  a0b8              ADR      r0,|L1.1636|
000384  f7fffffe          BL       snmp_trap_send
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
000388  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00038a  f4206000          BIC      r0,r0,#0x800
00038e  8028              STRH     r0,[r5,#0]
                  |L1.912|
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
000390  7930              LDRB     r0,[r6,#4]  ; vz2_error
000392  b188              CBZ      r0,|L1.952|
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
000394  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
000396  f4405080          ORR      r0,r0,#0x1000
00039a  8020              STRH     r0,[r4,#0]
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
00039c  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
00039e  04c0              LSLS     r0,r0,#19
0003a0  d41e              BMI      |L1.992|
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
0003a2  2314              MOVS     r3,#0x14
0003a4  2208              MOVS     r2,#8
0003a6  2105              MOVS     r1,#5
0003a8  a0b6              ADR      r0,|L1.1668|
0003aa  f7fffffe          BL       snmp_trap_send
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
0003ae  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003b0  f4405080          ORR      r0,r0,#0x1000
0003b4  8028              STRH     r0,[r5,#0]
0003b6  e013              B        |L1.992|
                  |L1.952|
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
0003b8  8820              LDRH     r0,[r4,#0]  ; snmp_bat_flag
0003ba  f4205080          BIC      r0,r0,#0x1000
0003be  8020              STRH     r0,[r4,#0]
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
0003c0  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003c2  04c0              LSLS     r0,r0,#19
0003c4  d50c              BPL      |L1.992|
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
0003c6  2315              MOVS     r3,#0x15
0003c8  2208              MOVS     r2,#8
0003ca  2105              MOVS     r1,#5
0003cc  a0b6              ADR      r0,|L1.1704|
0003ce  f7fffffe          BL       snmp_trap_send
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
0003d2  8828              LDRH     r0,[r5,#0]  ; snmp_bat_flag_puts
0003d4  f4205080          BIC      r0,r0,#0x1000
0003d8  8028              STRH     r0,[r5,#0]
0003da  e001              B        |L1.992|
                  |L1.988|
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
0003dc  8027              STRH     r7,[r4,#0]
;;;573    	snmp_bat_flag_puts[0]=0;
0003de  802f              STRH     r7,[r5,#0]
                  |L1.992|
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
0003e0  f9bb0002          LDRSH    r0,[r11,#2]  ; snmp_bat_status
0003e4  b108              CBZ      r0,|L1.1002|
0003e6  2802              CMP      r0,#2
0003e8  d103              BNE      |L1.1010|
                  |L1.1002|
0003ea  f8ba0000          LDRH     r0,[r10,#0]  ; NUMBAT
0003ee  2802              CMP      r0,#2
0003f0  d003              BEQ      |L1.1018|
                  |L1.1010|
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
0003f2  8067              STRH     r7,[r4,#2]
;;;812    	snmp_bat_flag_puts[1]=0;
0003f4  806f              STRH     r7,[r5,#2]
                  |L1.1014|
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
0003f6  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.1018|
0003fa  e167              B        |L1.1740|
                  |L1.1020|
                          DCD      ||area_number.25||
                  |L1.1024|
                          DCD      snmp_bat_status
                  |L1.1028|
                          DCD      NUMBAT
                  |L1.1032|
                          DCD      bat
                  |L1.1036|
                          DCD      IKB
                  |L1.1040|
                          DCD      snmp_bat_flag
                  |L1.1044|
                          DCD      snmp_bat_flag_puts
                  |L1.1048|
                          DCD      USIGN
                  |L1.1052|
00041c  42415420          DCB      "BAT #1 Alarm, battery is low",0
000420  23312041
000424  6c61726d
000428  2c206261
00042c  74746572
000430  79206973
000434  206c6f77
000438  00      
000439  00                DCB      0
00043a  00                DCB      0
00043b  00                DCB      0
                  |L1.1084|
00043c  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000440  23312041
000444  6c61726d
000448  20636c65
00044c  61722c20
000450  62617474
000454  65727920
000458  6973206e
00045c  6f74206c
000460  6f7700  
000463  00                DCB      0
                  |L1.1124|
000464  42415420          DCB      "BAT #1, capacity test stopped",0
000468  23312c20
00046c  63617061
000470  63697479
000474  20746573
000478  74207374
00047c  6f707065
000480  6400    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  42415420          DCB      "BAT #1,leveling charge is stopped",0
000488  23312c6c
00048c  6576656c
000490  696e6720
000494  63686172
000498  67652069
00049c  73207374
0004a0  6f707065
0004a4  6400    
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  42415420          DCB      "BAT #1,leveling charge is blocked",0
0004ac  23312c6c
0004b0  6576656c
0004b4  696e6720
0004b8  63686172
0004bc  67652069
0004c0  7320626c
0004c4  6f636b65
0004c8  6400    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
0004cc  42415420          DCB      "BAT #1, capacity test started",0
0004d0  23312c20
0004d4  63617061
0004d8  63697479
0004dc  20746573
0004e0  74207374
0004e4  61727465
0004e8  6400    
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
0004ec  42415420          DCB      "BAT #1,leveling charge is started",0
0004f0  23312c6c
0004f4  6576656c
0004f8  696e6720
0004fc  63686172
000500  67652069
000504  73207374
000508  61727465
00050c  6400    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L1.1296|
000510  42415420          DCB      "BAT #1,leveling charge is unblocked",0
000514  23312c6c
000518  6576656c
00051c  696e6720
000520  63686172
000524  67652069
000528  7320756e
00052c  626c6f63
000530  6b656400
                  |L1.1332|
                          DCD      sp_ch_stat
                  |L1.1336|
000538  42415420          DCB      "BAT #1,speed charge is stopped",0
00053c  23312c73
000540  70656564
000544  20636861
000548  72676520
00054c  69732073
000550  746f7070
000554  656400  
000557  00                DCB      0
                  |L1.1368|
000558  42415420          DCB      "BAT #1,speed charge is blocked",0
00055c  23312c73
000560  70656564
000564  20636861
000568  72676520
00056c  69732062
000570  6c6f636b
000574  656400  
000577  00                DCB      0
                  |L1.1400|
000578  42415420          DCB      "BAT #1,speed charge is started",0
00057c  23312c73
000580  70656564
000584  20636861
000588  72676520
00058c  69732073
000590  74617274
000594  656400  
000597  00                DCB      0
                  |L1.1432|
000598  42415420          DCB      "BAT #1,speed charge is unblocked",0
00059c  23312c73
0005a0  70656564
0005a4  20636861
0005a8  72676520
0005ac  69732075
0005b0  6e626c6f
0005b4  636b6564
0005b8  00      
0005b9  00                DCB      0
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
0005bc  42415420          DCB      "BAT #1,equalising charge is on",0
0005c0  23312c65
0005c4  7175616c
0005c8  6973696e
0005cc  67206368
0005d0  61726765
0005d4  20697320
0005d8  6f6e00  
0005db  00                DCB      0
                  |L1.1500|
0005dc  42415420          DCB      "BAT #1,equalising charge is off",0
0005e0  23312c65
0005e4  7175616c
0005e8  6973696e
0005ec  67206368
0005f0  61726765
0005f4  20697320
0005f8  6f666600
                  |L1.1532|
0005fc  42415420          DCB      "BAT #1,equalising charge is blocked",0
000600  23312c65
000604  7175616c
000608  6973696e
00060c  67206368
000610  61726765
000614  20697320
000618  626c6f63
00061c  6b656400
                  |L1.1568|
000620  42415420          DCB      "BAT #1,equalising charge is unblocked",0
000624  23312c65
000628  7175616c
00062c  6973696e
000630  67206368
000634  61726765
000638  20697320
00063c  756e626c
000640  6f636b65
000644  6400    
000646  00                DCB      0
000647  00                DCB      0
                  |L1.1608|
000648  42415420          DCB      "BAT #1,molding charge is on",0
00064c  23312c6d
000650  6f6c6469
000654  6e672063
000658  68617267
00065c  65206973
000660  206f6e00
                  |L1.1636|
000664  42415420          DCB      "BAT #1,molding charge is off",0
000668  23312c6d
00066c  6f6c6469
000670  6e672063
000674  68617267
000678  65206973
00067c  206f6666
000680  00      
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L1.1668|
000684  42415420          DCB      "BAT #1,molding charge is blocked",0
000688  23312c6d
00068c  6f6c6469
000690  6e672063
000694  68617267
000698  65206973
00069c  20626c6f
0006a0  636b6564
0006a4  00      
0006a5  00                DCB      0
0006a6  00                DCB      0
0006a7  00                DCB      0
                  |L1.1704|
0006a8  42415420          DCB      "BAT #1,molding charge is unblocked",0
0006ac  23312c6d
0006b0  6f6c6469
0006b4  6e672063
0006b8  68617267
0006bc  65206973
0006c0  20756e62
0006c4  6c6f636b
0006c8  656400  
0006cb  00                DCB      0
                  |L1.1740|
0006cc  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;578  ; bat
0006d0  48ff              LDR      r0,|L1.2768|
0006d2  f9b00000          LDRSH    r0,[r0,#0]            ;578  ; USIGN
0006d6  eb000080          ADD      r0,r0,r0,LSL #2       ;578
0006da  ebb10f40          CMP      r1,r0,LSL #1          ;578
0006de  da11              BGE      |L1.1796|
0006e0  8860              LDRH     r0,[r4,#2]            ;580  ; snmp_bat_flag
0006e2  f0400001          ORR      r0,r0,#1              ;580
0006e6  8060              STRH     r0,[r4,#2]            ;580
0006e8  8868              LDRH     r0,[r5,#2]            ;581  ; snmp_bat_flag_puts
0006ea  07c0              LSLS     r0,r0,#31             ;581
0006ec  d11b              BNE      |L1.1830|
0006ee  2316              MOVS     r3,#0x16              ;583
0006f0  2208              MOVS     r2,#8                 ;583
0006f2  2105              MOVS     r1,#5                 ;583
0006f4  a0f7              ADR      r0,|L1.2772|
0006f6  f7fffffe          BL       snmp_trap_send
0006fa  8868              LDRH     r0,[r5,#2]            ;584  ; snmp_bat_flag_puts
0006fc  f0400001          ORR      r0,r0,#1              ;584
000700  8068              STRH     r0,[r5,#2]            ;584
000702  e010              B        |L1.1830|
                  |L1.1796|
000704  8860              LDRH     r0,[r4,#2]            ;589  ; snmp_bat_flag
000706  f0200001          BIC      r0,r0,#1              ;589
00070a  8060              STRH     r0,[r4,#2]            ;589
00070c  8868              LDRH     r0,[r5,#2]            ;590  ; snmp_bat_flag_puts
00070e  07c0              LSLS     r0,r0,#31             ;590
000710  d009              BEQ      |L1.1830|
000712  2317              MOVS     r3,#0x17              ;592
000714  2208              MOVS     r2,#8                 ;592
000716  2105              MOVS     r1,#5                 ;592
000718  a0f6              ADR      r0,|L1.2804|
00071a  f7fffffe          BL       snmp_trap_send
00071e  8868              LDRH     r0,[r5,#2]            ;593  ; snmp_bat_flag_puts
000720  f0200001          BIC      r0,r0,#1              ;593
000724  8068              STRH     r0,[r5,#2]            ;593
                  |L1.1830|
000726  f898008b          LDRB     r0,[r8,#0x8b]         ;597  ; bat
00072a  07c1              LSLS     r1,r0,#31             ;597
00072c  d00b              BEQ      |L1.1862|
00072e  8861              LDRH     r1,[r4,#2]            ;599  ; snmp_bat_flag
000730  f0410102          ORR      r1,r1,#2              ;599
000734  8061              STRH     r1,[r4,#2]            ;599
000736  8829              LDRH     r1,[r5,#0]            ;600  ; snmp_bat_flag_puts
000738  0789              LSLS     r1,r1,#30             ;600
00073a  d40f              BMI      |L1.1884|
00073c  8869              LDRH     r1,[r5,#2]            ;603  ; snmp_bat_flag_puts
00073e  f0410102          ORR      r1,r1,#2              ;603
000742  8069              STRH     r1,[r5,#2]            ;603
000744  e00a              B        |L1.1884|
                  |L1.1862|
000746  8861              LDRH     r1,[r4,#2]            ;608  ; snmp_bat_flag
000748  f0210102          BIC      r1,r1,#2              ;608
00074c  8061              STRH     r1,[r4,#2]            ;608
00074e  f9b51002          LDRSH    r1,[r5,#2]            ;609  ; snmp_bat_flag_puts
000752  078a              LSLS     r2,r1,#30             ;609
000754  d502              BPL      |L1.1884|
000756  f0210102          BIC      r1,r1,#2              ;612
00075a  8069              STRH     r1,[r5,#2]            ;612
                  |L1.1884|
00075c  0780              LSLS     r0,r0,#30             ;616
00075e  d50b              BPL      |L1.1912|
000760  8860              LDRH     r0,[r4,#2]            ;618  ; snmp_bat_flag
000762  f0400004          ORR      r0,r0,#4              ;618
000766  8060              STRH     r0,[r4,#2]            ;618
000768  f9b50002          LDRSH    r0,[r5,#2]            ;619  ; snmp_bat_flag_puts
00076c  0741              LSLS     r1,r0,#29             ;619
00076e  d40e              BMI      |L1.1934|
000770  f0400004          ORR      r0,r0,#4              ;622
000774  8068              STRH     r0,[r5,#2]            ;622
000776  e00a              B        |L1.1934|
                  |L1.1912|
000778  8860              LDRH     r0,[r4,#2]            ;627  ; snmp_bat_flag
00077a  f0200004          BIC      r0,r0,#4              ;627
00077e  8060              STRH     r0,[r4,#2]            ;627
000780  f9b50002          LDRSH    r0,[r5,#2]            ;628  ; snmp_bat_flag_puts
000784  0741              LSLS     r1,r0,#29             ;628
000786  d502              BPL      |L1.1934|
000788  f0200004          BIC      r0,r0,#4              ;631
00078c  8068              STRH     r0,[r5,#2]            ;631
                  |L1.1934|
00078e  f9b91000          LDRSH    r1,[r9,#0]            ;635  ; IKB
000792  f9b80054          LDRSH    r0,[r8,#0x54]         ;635  ; bat
000796  424a              RSBS     r2,r1,#0              ;635
000798  4290              CMP      r0,r2                 ;635
00079a  da04              BGE      |L1.1958|
00079c  8860              LDRH     r0,[r4,#2]            ;635  ; snmp_bat_flag
00079e  f0400008          ORR      r0,r0,#8              ;635
0007a2  8060              STRH     r0,[r4,#2]            ;635
0007a4  e005              B        |L1.1970|
                  |L1.1958|
0007a6  4288              CMP      r0,r1                 ;636
0007a8  dd03              BLE      |L1.1970|
0007aa  8860              LDRH     r0,[r4,#2]            ;636  ; snmp_bat_flag
0007ac  f0200008          BIC      r0,r0,#8              ;636
0007b0  8060              STRH     r0,[r4,#2]            ;636
                  |L1.1970|
0007b2  f8960023          LDRB     r0,[r6,#0x23]         ;638  ; spc_stat
0007b6  2801              CMP      r0,#1                 ;638
0007b8  d102              BNE      |L1.1984|
0007ba  f8960024          LDRB     r0,[r6,#0x24]         ;638  ; spc_bat
0007be  b3c8              CBZ      r0,|L1.2100|
                  |L1.1984|
0007c0  8860              LDRH     r0,[r4,#2]            ;649  ; snmp_bat_flag
0007c2  f0200010          BIC      r0,r0,#0x10           ;649
0007c6  8060              STRH     r0,[r4,#2]            ;649
0007c8  8868              LDRH     r0,[r5,#2]            ;650  ; snmp_bat_flag_puts
0007ca  06c0              LSLS     r0,r0,#27             ;650
0007cc  d509              BPL      |L1.2018|
0007ce  231d              MOVS     r3,#0x1d              ;652
0007d0  2208              MOVS     r2,#8                 ;652
0007d2  2105              MOVS     r1,#5                 ;652
0007d4  a0d1              ADR      r0,|L1.2844|
0007d6  f7fffffe          BL       snmp_trap_send
0007da  8868              LDRH     r0,[r5,#2]            ;653  ; snmp_bat_flag_puts
0007dc  f0200010          BIC      r0,r0,#0x10           ;653
0007e0  8068              STRH     r0,[r5,#2]            ;653
                  |L1.2018|
0007e2  f8960023          LDRB     r0,[r6,#0x23]         ;657  ; spc_stat
0007e6  2802              CMP      r0,#2                 ;657
0007e8  d037              BEQ      |L1.2138|
0007ea  8860              LDRH     r0,[r4,#2]            ;668  ; snmp_bat_flag
0007ec  f0200020          BIC      r0,r0,#0x20           ;668
0007f0  8060              STRH     r0,[r4,#2]            ;668
0007f2  8868              LDRH     r0,[r5,#2]            ;669  ; snmp_bat_flag_puts
0007f4  0680              LSLS     r0,r0,#26             ;669
0007f6  d509              BPL      |L1.2060|
0007f8  231f              MOVS     r3,#0x1f              ;671
0007fa  2208              MOVS     r2,#8                 ;671
0007fc  2105              MOVS     r1,#5                 ;671
0007fe  a0cf              ADR      r0,|L1.2876|
000800  f7fffffe          BL       snmp_trap_send
000804  8868              LDRH     r0,[r5,#2]            ;672  ; snmp_bat_flag_puts
000806  f0200020          BIC      r0,r0,#0x20           ;672
00080a  8068              STRH     r0,[r5,#2]            ;672
                  |L1.2060|
00080c  7870              LDRB     r0,[r6,#1]            ;676  ; vz_error
00080e  b3b0              CBZ      r0,|L1.2174|
000810  8860              LDRH     r0,[r4,#2]            ;678  ; snmp_bat_flag
000812  f0400040          ORR      r0,r0,#0x40           ;678
000816  8060              STRH     r0,[r4,#2]            ;678
000818  8868              LDRH     r0,[r5,#2]            ;679  ; snmp_bat_flag_puts
00081a  0640              LSLS     r0,r0,#25             ;679
00081c  d441              BMI      |L1.2210|
00081e  2320              MOVS     r3,#0x20              ;681
000820  2208              MOVS     r2,#8                 ;681
000822  2105              MOVS     r1,#5                 ;681
000824  a0ce              ADR      r0,|L1.2912|
000826  f7fffffe          BL       snmp_trap_send
00082a  8868              LDRH     r0,[r5,#2]            ;682  ; snmp_bat_flag_puts
00082c  f0400040          ORR      r0,r0,#0x40           ;682
000830  8068              STRH     r0,[r5,#2]            ;682
000832  e036              B        |L1.2210|
                  |L1.2100|
000834  e7ff              B        |L1.2102|
                  |L1.2102|
000836  8860              LDRH     r0,[r4,#2]            ;640  ; snmp_bat_flag
000838  f0400010          ORR      r0,r0,#0x10           ;640
00083c  8060              STRH     r0,[r4,#2]            ;640
00083e  8868              LDRH     r0,[r5,#2]            ;641  ; snmp_bat_flag_puts
000840  06c0              LSLS     r0,r0,#27             ;641
000842  d4ce              BMI      |L1.2018|
000844  231c              MOVS     r3,#0x1c              ;643
000846  2208              MOVS     r2,#8                 ;643
000848  2105              MOVS     r1,#5                 ;643
00084a  a0ce              ADR      r0,|L1.2948|
00084c  f7fffffe          BL       snmp_trap_send
000850  8868              LDRH     r0,[r5,#2]            ;644  ; snmp_bat_flag_puts
000852  f0400010          ORR      r0,r0,#0x10           ;644
000856  8068              STRH     r0,[r5,#2]            ;644
000858  e7c3              B        |L1.2018|
                  |L1.2138|
00085a  8860              LDRH     r0,[r4,#2]            ;659  ; snmp_bat_flag
00085c  f0400020          ORR      r0,r0,#0x20           ;659
000860  8060              STRH     r0,[r4,#2]            ;659
000862  8868              LDRH     r0,[r5,#2]            ;660  ; snmp_bat_flag_puts
000864  0680              LSLS     r0,r0,#26             ;660
000866  d4d1              BMI      |L1.2060|
000868  231e              MOVS     r3,#0x1e              ;662
00086a  2208              MOVS     r2,#8                 ;662
00086c  2105              MOVS     r1,#5                 ;662
00086e  a0cd              ADR      r0,|L1.2980|
000870  f7fffffe          BL       snmp_trap_send
000874  8868              LDRH     r0,[r5,#2]            ;663  ; snmp_bat_flag_puts
000876  f0400020          ORR      r0,r0,#0x20           ;663
00087a  8068              STRH     r0,[r5,#2]            ;663
00087c  e7c6              B        |L1.2060|
                  |L1.2174|
00087e  e7ff              B        |L1.2176|
                  |L1.2176|
000880  8860              LDRH     r0,[r4,#2]            ;687  ; snmp_bat_flag
000882  f0200040          BIC      r0,r0,#0x40           ;687
000886  8060              STRH     r0,[r4,#2]            ;687
000888  8868              LDRH     r0,[r5,#2]            ;688  ; snmp_bat_flag_puts
00088a  0640              LSLS     r0,r0,#25             ;688
00088c  d509              BPL      |L1.2210|
00088e  2321              MOVS     r3,#0x21              ;690
000890  2208              MOVS     r2,#8                 ;690
000892  2105              MOVS     r1,#5                 ;690
000894  a0cc              ADR      r0,|L1.3016|
000896  f7fffffe          BL       snmp_trap_send
00089a  8868              LDRH     r0,[r5,#2]            ;691  ; snmp_bat_flag_puts
00089c  f0200040          BIC      r0,r0,#0x40           ;691
0008a0  8068              STRH     r0,[r5,#2]            ;691
                  |L1.2210|
0008a2  48d2              LDR      r0,|L1.3052|
0008a4  7800              LDRB     r0,[r0,#0]            ;695  ; sp_ch_stat
0008a6  2802              CMP      r0,#2                 ;695
0008a8  d024              BEQ      |L1.2292|
0008aa  8860              LDRH     r0,[r4,#2]            ;706  ; snmp_bat_flag
0008ac  f0200080          BIC      r0,r0,#0x80           ;706
0008b0  8060              STRH     r0,[r4,#2]            ;706
0008b2  8868              LDRH     r0,[r5,#2]            ;707  ; snmp_bat_flag_puts
0008b4  0600              LSLS     r0,r0,#24             ;707
0008b6  d509              BPL      |L1.2252|
0008b8  2323              MOVS     r3,#0x23              ;709
0008ba  2208              MOVS     r2,#8                 ;709
0008bc  2105              MOVS     r1,#5                 ;709
0008be  a0cc              ADR      r0,|L1.3056|
0008c0  f7fffffe          BL       snmp_trap_send
0008c4  8868              LDRH     r0,[r5,#2]            ;710  ; snmp_bat_flag_puts
0008c6  f0200080          BIC      r0,r0,#0x80           ;710
0008ca  8068              STRH     r0,[r5,#2]            ;710
                  |L1.2252|
0008cc  78b0              LDRB     r0,[r6,#2]            ;714  ; sp_ch_error
0008ce  b318              CBZ      r0,|L1.2328|
0008d0  8860              LDRH     r0,[r4,#2]            ;716  ; snmp_bat_flag
0008d2  f4407080          ORR      r0,r0,#0x100          ;716
0008d6  8060              STRH     r0,[r4,#2]            ;716
0008d8  8868              LDRH     r0,[r5,#2]            ;717  ; snmp_bat_flag_puts
0008da  05c0              LSLS     r0,r0,#23             ;717
0008dc  d42d              BMI      |L1.2362|
0008de  2324              MOVS     r3,#0x24              ;719
0008e0  2208              MOVS     r2,#8                 ;719
0008e2  2105              MOVS     r1,#5                 ;719
0008e4  a0ca              ADR      r0,|L1.3088|
0008e6  f7fffffe          BL       snmp_trap_send
0008ea  8868              LDRH     r0,[r5,#2]            ;720  ; snmp_bat_flag_puts
0008ec  f4407080          ORR      r0,r0,#0x100          ;720
0008f0  8068              STRH     r0,[r5,#2]            ;720
0008f2  e022              B        |L1.2362|
                  |L1.2292|
0008f4  8860              LDRH     r0,[r4,#2]            ;697  ; snmp_bat_flag
0008f6  f0400080          ORR      r0,r0,#0x80           ;697
0008fa  8060              STRH     r0,[r4,#2]            ;697
0008fc  8868              LDRH     r0,[r5,#2]            ;698  ; snmp_bat_flag_puts
0008fe  0600              LSLS     r0,r0,#24             ;698
000900  d4e4              BMI      |L1.2252|
000902  2322              MOVS     r3,#0x22              ;700
000904  2208              MOVS     r2,#8                 ;700
000906  2105              MOVS     r1,#5                 ;700
000908  a0c9              ADR      r0,|L1.3120|
00090a  f7fffffe          BL       snmp_trap_send
00090e  8868              LDRH     r0,[r5,#2]            ;701  ; snmp_bat_flag_puts
000910  f0400080          ORR      r0,r0,#0x80           ;701
000914  8068              STRH     r0,[r5,#2]            ;701
000916  e7d9              B        |L1.2252|
                  |L1.2328|
000918  8860              LDRH     r0,[r4,#2]            ;725  ; snmp_bat_flag
00091a  f4207080          BIC      r0,r0,#0x100          ;725
00091e  8060              STRH     r0,[r4,#2]            ;725
000920  8868              LDRH     r0,[r5,#2]            ;726  ; snmp_bat_flag_puts
000922  05c0              LSLS     r0,r0,#23             ;726
000924  d509              BPL      |L1.2362|
000926  2325              MOVS     r3,#0x25              ;728
000928  2208              MOVS     r2,#8                 ;728
00092a  2105              MOVS     r1,#5                 ;728
00092c  a0c8              ADR      r0,|L1.3152|
00092e  f7fffffe          BL       snmp_trap_send
000932  8868              LDRH     r0,[r5,#2]            ;729  ; snmp_bat_flag_puts
000934  f4207080          BIC      r0,r0,#0x100          ;729
000938  8068              STRH     r0,[r5,#2]            ;729
                  |L1.2362|
00093a  7970              LDRB     r0,[r6,#5]            ;733  ; vz1_stat
00093c  b188              CBZ      r0,|L1.2402|
00093e  8860              LDRH     r0,[r4,#2]            ;735  ; snmp_bat_flag
000940  f4407000          ORR      r0,r0,#0x200          ;735
000944  8060              STRH     r0,[r4,#2]            ;735
000946  8868              LDRH     r0,[r5,#2]            ;736  ; snmp_bat_flag_puts
000948  0580              LSLS     r0,r0,#22             ;736
00094a  d41b              BMI      |L1.2436|
00094c  2326              MOVS     r3,#0x26              ;738
00094e  2208              MOVS     r2,#8                 ;738
000950  2105              MOVS     r1,#5                 ;738
000952  a0c8              ADR      r0,|L1.3188|
000954  f7fffffe          BL       snmp_trap_send
000958  8868              LDRH     r0,[r5,#2]            ;739  ; snmp_bat_flag_puts
00095a  f4407000          ORR      r0,r0,#0x200          ;739
00095e  8068              STRH     r0,[r5,#2]            ;739
000960  e010              B        |L1.2436|
                  |L1.2402|
000962  8860              LDRH     r0,[r4,#2]            ;744  ; snmp_bat_flag
000964  f4207000          BIC      r0,r0,#0x200          ;744
000968  8060              STRH     r0,[r4,#2]            ;744
00096a  8868              LDRH     r0,[r5,#2]            ;745  ; snmp_bat_flag_puts
00096c  0580              LSLS     r0,r0,#22             ;745
00096e  d509              BPL      |L1.2436|
000970  2327              MOVS     r3,#0x27              ;747
000972  2208              MOVS     r2,#8                 ;747
000974  2105              MOVS     r1,#5                 ;747
000976  a0c7              ADR      r0,|L1.3220|
000978  f7fffffe          BL       snmp_trap_send
00097c  8868              LDRH     r0,[r5,#2]            ;748  ; snmp_bat_flag_puts
00097e  f4207000          BIC      r0,r0,#0x200          ;748
000982  8068              STRH     r0,[r5,#2]            ;748
                  |L1.2436|
000984  78f0              LDRB     r0,[r6,#3]            ;752  ; vz1_error
000986  b188              CBZ      r0,|L1.2476|
000988  8860              LDRH     r0,[r4,#2]            ;754  ; snmp_bat_flag
00098a  f4406080          ORR      r0,r0,#0x400          ;754
00098e  8060              STRH     r0,[r4,#2]            ;754
000990  8868              LDRH     r0,[r5,#2]            ;755  ; snmp_bat_flag_puts
000992  0540              LSLS     r0,r0,#21             ;755
000994  d41b              BMI      |L1.2510|
000996  2328              MOVS     r3,#0x28              ;757
000998  2208              MOVS     r2,#8                 ;757
00099a  2105              MOVS     r1,#5                 ;757
00099c  a0c5              ADR      r0,|L1.3252|
00099e  f7fffffe          BL       snmp_trap_send
0009a2  8868              LDRH     r0,[r5,#2]            ;758  ; snmp_bat_flag_puts
0009a4  f4406080          ORR      r0,r0,#0x400          ;758
0009a8  8068              STRH     r0,[r5,#2]            ;758
0009aa  e010              B        |L1.2510|
                  |L1.2476|
0009ac  8860              LDRH     r0,[r4,#2]            ;763  ; snmp_bat_flag
0009ae  f4206080          BIC      r0,r0,#0x400          ;763
0009b2  8060              STRH     r0,[r4,#2]            ;763
0009b4  8868              LDRH     r0,[r5,#2]            ;764  ; snmp_bat_flag_puts
0009b6  0540              LSLS     r0,r0,#21             ;764
0009b8  d509              BPL      |L1.2510|
0009ba  2329              MOVS     r3,#0x29              ;766
0009bc  2208              MOVS     r2,#8                 ;766
0009be  2105              MOVS     r1,#5                 ;766
0009c0  a0c5              ADR      r0,|L1.3288|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;767  ; snmp_bat_flag_puts
0009c8  f4206080          BIC      r0,r0,#0x400          ;767
0009cc  8068              STRH     r0,[r5,#2]            ;767
                  |L1.2510|
0009ce  79f0              LDRB     r0,[r6,#7]            ;771  ; vz2_stat
0009d0  b188              CBZ      r0,|L1.2550|
0009d2  8860              LDRH     r0,[r4,#2]            ;773  ; snmp_bat_flag
0009d4  f4406000          ORR      r0,r0,#0x800          ;773
0009d8  8060              STRH     r0,[r4,#2]            ;773
0009da  8868              LDRH     r0,[r5,#2]            ;774  ; snmp_bat_flag_puts
0009dc  0500              LSLS     r0,r0,#20             ;774
0009de  d41b              BMI      |L1.2584|
0009e0  232a              MOVS     r3,#0x2a              ;776
0009e2  2208              MOVS     r2,#8                 ;776
0009e4  2105              MOVS     r1,#5                 ;776
0009e6  a0c6              ADR      r0,|L1.3328|
0009e8  f7fffffe          BL       snmp_trap_send
0009ec  8868              LDRH     r0,[r5,#2]            ;777  ; snmp_bat_flag_puts
0009ee  f4406000          ORR      r0,r0,#0x800          ;777
0009f2  8068              STRH     r0,[r5,#2]            ;777
0009f4  e010              B        |L1.2584|
                  |L1.2550|
0009f6  8860              LDRH     r0,[r4,#2]            ;782  ; snmp_bat_flag
0009f8  f4206000          BIC      r0,r0,#0x800          ;782
0009fc  8060              STRH     r0,[r4,#2]            ;782
0009fe  8868              LDRH     r0,[r5,#2]            ;783  ; snmp_bat_flag_puts
000a00  0500              LSLS     r0,r0,#20             ;783
000a02  d509              BPL      |L1.2584|
000a04  232b              MOVS     r3,#0x2b              ;785
000a06  2208              MOVS     r2,#8                 ;785
000a08  2105              MOVS     r1,#5                 ;785
000a0a  a0c4              ADR      r0,|L1.3356|
000a0c  f7fffffe          BL       snmp_trap_send
000a10  8868              LDRH     r0,[r5,#2]            ;786  ; snmp_bat_flag_puts
000a12  f4206000          BIC      r0,r0,#0x800          ;786
000a16  8068              STRH     r0,[r5,#2]            ;786
                  |L1.2584|
000a18  7930              LDRB     r0,[r6,#4]            ;790  ; vz2_error
000a1a  b190              CBZ      r0,|L1.2626|
000a1c  8860              LDRH     r0,[r4,#2]            ;792  ; snmp_bat_flag
000a1e  f4405080          ORR      r0,r0,#0x1000         ;792
000a22  8060              STRH     r0,[r4,#2]            ;792
000a24  8868              LDRH     r0,[r5,#2]            ;793  ; snmp_bat_flag_puts
000a26  04c0              LSLS     r0,r0,#19             ;793
000a28  f53face5          BMI      |L1.1014|
000a2c  232c              MOVS     r3,#0x2c              ;795
000a2e  2208              MOVS     r2,#8                 ;795
000a30  2105              MOVS     r1,#5                 ;795
000a32  a0c2              ADR      r0,|L1.3388|
000a34  f7fffffe          BL       snmp_trap_send
000a38  8868              LDRH     r0,[r5,#2]            ;796  ; snmp_bat_flag_puts
000a3a  f4405080          ORR      r0,r0,#0x1000         ;796
000a3e  8068              STRH     r0,[r5,#2]            ;796
                  |L1.2624|
000a40  e4d9              B        |L1.1014|
                  |L1.2626|
000a42  8860              LDRH     r0,[r4,#2]            ;801  ; snmp_bat_flag
000a44  f4205080          BIC      r0,r0,#0x1000         ;801
000a48  8060              STRH     r0,[r4,#2]            ;801
000a4a  8868              LDRH     r0,[r5,#2]            ;802  ; snmp_bat_flag_puts
000a4c  04c0              LSLS     r0,r0,#19             ;802
000a4e  d5f7              BPL      |L1.2624|
000a50  232d              MOVS     r3,#0x2d              ;804
000a52  2208              MOVS     r2,#8                 ;804
000a54  2105              MOVS     r1,#5                 ;804
000a56  a0c2              ADR      r0,|L1.3424|
000a58  f7fffffe          BL       snmp_trap_send
000a5c  8868              LDRH     r0,[r5,#2]            ;805  ; snmp_bat_flag_puts
000a5e  f4205080          BIC      r0,r0,#0x1000         ;805
000a62  8068              STRH     r0,[r5,#2]            ;805
000a64  e4c7              B        |L1.1014|
;;;938    
                          ENDP

                  ke_start PROC
;;;941    //-----------------------------------------------
;;;942    void ke_start(char in)
000a66  e92d41fc          PUSH     {r2-r8,lr}
;;;943    {          
000a6a  4606              MOV      r6,r0
;;;944    ke_start_stat=(enum_ke_start_stat)0;		 
000a6c  4dc5              LDR      r5,|L1.3460|
000a6e  f04f0400          MOV      r4,#0
;;;945    /*
;;;946    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;947    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;948    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;949    #endif
;;;950    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;951    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;952    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;953    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;954    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;955    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;956    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;957    else */
;;;958    	{
;;;959    
;;;960    	ke_start_stat=kssYES;
000a72  f105050a          ADD      r5,r5,#0xa
000a76  f04f0064          MOV      r0,#0x64
000a7a  7768              STRB     r0,[r5,#0x1d]
;;;961    
;;;962    	spc_stat=spcKE;
000a7c  f04f0701          MOV      r7,#1
000a80  766f              STRB     r7,[r5,#0x19]
;;;963    	__ee_spc_stat=spcKE;
000a82  f8a57060          STRH     r7,[r5,#0x60]
;;;964    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000a86  4639              MOV      r1,r7
000a88  f240209a          MOV      r0,#0x29a
000a8c  f7fffffe          BL       lc640_write_int
;;;965    	
;;;966    	spc_bat=0;
000a90  76ac              STRB     r4,[r5,#0x1a]
;;;967    	__ee_spc_bat=0;
000a92  f8a54062          STRH     r4,[r5,#0x62]
;;;968    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000a96  4621              MOV      r1,r4
000a98  f240209e          MOV      r0,#0x29e
000a9c  f7fffffe          BL       lc640_write_int
;;;969    
;;;970    	bat[0]._zar_cnt_ke=0;
000aa0  f8df82e4          LDR      r8,|L1.3464|
000aa4  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;971    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000aa8  48b8              LDR      r0,|L1.3468|
000aaa  2100              MOVS     r1,#0
000aac  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000ab0  f7fffffe          BL       lc640_write_int
;;;972    
;;;973    	bat[0]._time_min_cnt_ke=0;
000ab4  f8a8404a          STRH     r4,[r8,#0x4a]
;;;974    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000ab8  2100              MOVS     r1,#0
000aba  f44f70e3          MOV      r0,#0x1c6
000abe  f7fffffe          BL       lc640_write_int
;;;975    
;;;976    	
;;;977    	spc_phase=0;
000ac2  76ec              STRB     r4,[r5,#0x1b]
;;;978    	__ee_spc_phase=0;
000ac4  f8a54064          STRH     r4,[r5,#0x64]
;;;979    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000ac8  4621              MOV      r1,r4
000aca  f44f7028          MOV      r0,#0x2a0
000ace  e15f              B        |L1.3472|
                  |L1.2768|
                          DCD      USIGN
                  |L1.2772|
000ad4  42415420          DCB      "BAT #2 Alarm, battery is low",0
000ad8  23322041
000adc  6c61726d
000ae0  2c206261
000ae4  74746572
000ae8  79206973
000aec  206c6f77
000af0  00      
000af1  00                DCB      0
000af2  00                DCB      0
000af3  00                DCB      0
                  |L1.2804|
000af4  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000af8  23322041
000afc  6c61726d
000b00  20636c65
000b04  61722c20
000b08  62617474
000b0c  65727920
000b10  6973206e
000b14  6f74206c
000b18  6f7700  
000b1b  00                DCB      0
                  |L1.2844|
000b1c  42415420          DCB      "BAT #2, capacity test stopped",0
000b20  23322c20
000b24  63617061
000b28  63697479
000b2c  20746573
000b30  74207374
000b34  6f707065
000b38  6400    
000b3a  00                DCB      0
000b3b  00                DCB      0
                  |L1.2876|
000b3c  42415420          DCB      "BAT #2,leveling charge is stopped",0
000b40  23322c6c
000b44  6576656c
000b48  696e6720
000b4c  63686172
000b50  67652069
000b54  73207374
000b58  6f707065
000b5c  6400    
000b5e  00                DCB      0
000b5f  00                DCB      0
                  |L1.2912|
000b60  42415420          DCB      "BAT #2,leveling charge is blocked",0
000b64  23322c6c
000b68  6576656c
000b6c  696e6720
000b70  63686172
000b74  67652069
000b78  7320626c
000b7c  6f636b65
000b80  6400    
000b82  00                DCB      0
000b83  00                DCB      0
                  |L1.2948|
000b84  42415420          DCB      "BAT #2, capacity test started",0
000b88  23322c20
000b8c  63617061
000b90  63697479
000b94  20746573
000b98  74207374
000b9c  61727465
000ba0  6400    
000ba2  00                DCB      0
000ba3  00                DCB      0
                  |L1.2980|
000ba4  42415420          DCB      "BAT #2,leveling charge is started",0
000ba8  23322c6c
000bac  6576656c
000bb0  696e6720
000bb4  63686172
000bb8  67652069
000bbc  73207374
000bc0  61727465
000bc4  6400    
000bc6  00                DCB      0
000bc7  00                DCB      0
                  |L1.3016|
000bc8  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000bcc  23322c6c
000bd0  6576656c
000bd4  696e6720
000bd8  63686172
000bdc  67652069
000be0  7320756e
000be4  626c6f63
000be8  6b656400
                  |L1.3052|
                          DCD      sp_ch_stat
                  |L1.3056|
000bf0  42415420          DCB      "BAT #2,speed charge is stopped",0
000bf4  23322c73
000bf8  70656564
000bfc  20636861
000c00  72676520
000c04  69732073
000c08  746f7070
000c0c  656400  
000c0f  00                DCB      0
                  |L1.3088|
000c10  42415420          DCB      "BAT #2,speed charge is blocked",0
000c14  23322c73
000c18  70656564
000c1c  20636861
000c20  72676520
000c24  69732062
000c28  6c6f636b
000c2c  656400  
000c2f  00                DCB      0
                  |L1.3120|
000c30  42415420          DCB      "BAT #2,speed charge is started",0
000c34  23322c73
000c38  70656564
000c3c  20636861
000c40  72676520
000c44  69732073
000c48  74617274
000c4c  656400  
000c4f  00                DCB      0
                  |L1.3152|
000c50  42415420          DCB      "BAT #2,speed charge is unblocked",0
000c54  23322c73
000c58  70656564
000c5c  20636861
000c60  72676520
000c64  69732075
000c68  6e626c6f
000c6c  636b6564
000c70  00      
000c71  00                DCB      0
000c72  00                DCB      0
000c73  00                DCB      0
                  |L1.3188|
000c74  42415420          DCB      "BAT #2,equalising charge is on",0
000c78  23322c65
000c7c  7175616c
000c80  6973696e
000c84  67206368
000c88  61726765
000c8c  20697320
000c90  6f6e00  
000c93  00                DCB      0
                  |L1.3220|
000c94  42415420          DCB      "BAT #2,equalising charge is off",0
000c98  23322c65
000c9c  7175616c
000ca0  6973696e
000ca4  67206368
000ca8  61726765
000cac  20697320
000cb0  6f666600
                  |L1.3252|
000cb4  42415420          DCB      "BAT #2,equalising charge is blocked",0
000cb8  23322c65
000cbc  7175616c
000cc0  6973696e
000cc4  67206368
000cc8  61726765
000ccc  20697320
000cd0  626c6f63
000cd4  6b656400
                  |L1.3288|
000cd8  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000cdc  23322c65
000ce0  7175616c
000ce4  6973696e
000ce8  67206368
000cec  61726765
000cf0  20697320
000cf4  756e626c
000cf8  6f636b65
000cfc  6400    
000cfe  00                DCB      0
000cff  00                DCB      0
                  |L1.3328|
000d00  42415420          DCB      "BAT #2,molding charge is on",0
000d04  23322c6d
000d08  6f6c6469
000d0c  6e672063
000d10  68617267
000d14  65206973
000d18  206f6e00
                  |L1.3356|
000d1c  42415420          DCB      "BAT #2,molding charge is off",0
000d20  23322c6d
000d24  6f6c6469
000d28  6e672063
000d2c  68617267
000d30  65206973
000d34  206f6666
000d38  00      
000d39  00                DCB      0
000d3a  00                DCB      0
000d3b  00                DCB      0
                  |L1.3388|
000d3c  42415420          DCB      "BAT #2,molding charge is blocked",0
000d40  23322c6d
000d44  6f6c6469
000d48  6e672063
000d4c  68617267
000d50  65206973
000d54  20626c6f
000d58  636b6564
000d5c  00      
000d5d  00                DCB      0
000d5e  00                DCB      0
000d5f  00                DCB      0
                  |L1.3424|
000d60  42415420          DCB      "BAT #2,molding charge is unblocked",0
000d64  23322c6d
000d68  6f6c6469
000d6c  6e672063
000d70  68617267
000d74  65206973
000d78  20756e62
000d7c  6c6f636b
000d80  656400  
000d83  00                DCB      0
                  |L1.3460|
                          DCD      ||area_number.25||
                  |L1.3464|
                          DCD      bat
                  |L1.3468|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.3472|
000d90  f7fffffe          BL       lc640_write_int
;;;980    
;;;981    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;982    
;;;983    		{					
;;;984    		signed short temp_temp;
;;;985    		signed char temp;
;;;986    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000d94  eb060046          ADD      r0,r6,r6,LSL #1
000d98  eb001006          ADD      r0,r0,r6,LSL #4
000d9c  eb080180          ADD      r1,r8,r0,LSL #2
000da0  48ff              LDR      r0,|L1.4512|
000da2  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000da4  f1000001          ADD      r0,r0,#1
000da8  f0000007          AND      r0,r0,#7
000dac  eb010040          ADD      r0,r1,r0,LSL #1
000db0  8c00              LDRH     r0,[r0,#0x20]
000db2  9001              STR      r0,[sp,#4]
;;;987    		    
;;;988    		temp=LPC_RTC->YEAR;
000db4  4efb              LDR      r6,|L1.4516|
000db6  8bb0              LDRH     r0,[r6,#0x1c]
000db8  9000              STR      r0,[sp,#0]
;;;989    		gran_char(&temp,1,99);
000dba  f04f0263          MOV      r2,#0x63
000dbe  f04f0101          MOV      r1,#1
000dc2  4668              MOV      r0,sp
000dc4  f7fffffe          BL       gran_char
;;;990    		*((char*)(&(ke_date[0])))=temp;
000dc8  4cf7              LDR      r4,|L1.4520|
000dca  f89d0000          LDRB     r0,[sp,#0]
000dce  7020              STRB     r0,[r4,#0]
;;;991    			
;;;992    		temp=LPC_RTC->MONTH;
000dd0  7e30              LDRB     r0,[r6,#0x18]
000dd2  9000              STR      r0,[sp,#0]
;;;993    		gran_char(&temp,1,12);
000dd4  220c              MOVS     r2,#0xc
000dd6  2101              MOVS     r1,#1
000dd8  4668              MOV      r0,sp
000dda  f7fffffe          BL       gran_char
;;;994    		*(((char*)(&(ke_date[0])))+1)=temp;
000dde  f89d0000          LDRB     r0,[sp,#0]
000de2  7060              STRB     r0,[r4,#1]
;;;995    		
;;;996    		temp=LPC_RTC->DOM;
000de4  7b30              LDRB     r0,[r6,#0xc]
000de6  9000              STR      r0,[sp,#0]
;;;997    		gran_char(&temp,1,31);
000de8  221f              MOVS     r2,#0x1f
000dea  2101              MOVS     r1,#1
000dec  4668              MOV      r0,sp
000dee  f7fffffe          BL       gran_char
;;;998    		*(((char*)(&(ke_date[0])))+2)=temp;			
000df2  f89d0000          LDRB     r0,[sp,#0]
000df6  70a0              STRB     r0,[r4,#2]
;;;999    				
;;;1000   		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000df8  f89d0004          LDRB     r0,[sp,#4]
000dfc  70e0              STRB     r0,[r4,#3]
;;;1001   		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000dfe  f24020a2          MOV      r0,#0x2a2
000e02  6821              LDR      r1,[r4,#0]  ; ke_date
000e04  f7fffffe          BL       lc640_write_long
;;;1002   
;;;1003   		temp=LPC_RTC->HOUR;
000e08  7a30              LDRB     r0,[r6,#8]
000e0a  9000              STR      r0,[sp,#0]
;;;1004   		gran_char(&temp,0,23);
000e0c  2217              MOVS     r2,#0x17
000e0e  2100              MOVS     r1,#0
000e10  4668              MOV      r0,sp
000e12  f7fffffe          BL       gran_char
;;;1005   		*((char*)(&(ke_date[1])))=temp;
000e16  f89d0000          LDRB     r0,[sp,#0]
000e1a  7120              STRB     r0,[r4,#4]
;;;1006                  
;;;1007   		temp=LPC_RTC->MIN;
000e1c  7930              LDRB     r0,[r6,#4]
000e1e  9000              STR      r0,[sp,#0]
;;;1008   		gran_char(&temp,0,59);
000e20  223b              MOVS     r2,#0x3b
000e22  2100              MOVS     r1,#0
000e24  4668              MOV      r0,sp
000e26  f7fffffe          BL       gran_char
;;;1009   		*(((char*)(&(ke_date[1])))+1)=temp;
000e2a  f89d0000          LDRB     r0,[sp,#0]
000e2e  7160              STRB     r0,[r4,#5]
;;;1010   	          
;;;1011   		temp=LPC_RTC->SEC;
000e30  7830              LDRB     r0,[r6,#0]
000e32  9000              STR      r0,[sp,#0]
;;;1012   		gran_char(&temp,0,59);
000e34  223b              MOVS     r2,#0x3b
000e36  2100              MOVS     r1,#0
000e38  4668              MOV      r0,sp
000e3a  f7fffffe          BL       gran_char
;;;1013   		*(((char*)(&(ke_date[1])))+2)=temp;
000e3e  f89d0000          LDRB     r0,[sp,#0]
000e42  71a0              STRB     r0,[r4,#6]
;;;1014   			
;;;1015   		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000e44  f89d0005          LDRB     r0,[sp,#5]
000e48  71e0              STRB     r0,[r4,#7]
;;;1016   		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000e4a  f24020a6          MOV      r0,#0x2a6
000e4e  6861              LDR      r1,[r4,#4]  ; ke_date
000e50  f7fffffe          BL       lc640_write_long
;;;1017   		}
;;;1018   	bat_hndl_zvu_ke_init=1;
000e54  702f              STRB     r7,[r5,#0]
;;;1019   	}
;;;1020   }
000e56  e8bd81fc          POP      {r2-r8,pc}
;;;1021   #endif
                          ENDP

                  ke_drv PROC
;;;1103   //-----------------------------------------------
;;;1104   void ke_drv(void)
000e5a  e92d47f0          PUSH     {r4-r10,lr}
;;;1105   {
000e5e  b088              SUB      sp,sp,#0x20
;;;1106   static char ke_drv_cnt_10s;
;;;1107   static short i_bat_buff[6];
;;;1108   static char i_bat_buff_cnt;
;;;1109   short ke_drv_i_temp;
;;;1110   short ke_drv_i_avg;
;;;1111   char i;
;;;1112   short ke_drv_i_temp_temp;
;;;1113   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000e60  f04f021c          MOV      r2,#0x1c
000e64  49d1              LDR      r1,|L1.4524|
000e66  a801              ADD      r0,sp,#4
000e68  f7fffffe          BL       __aeabi_memcpy4
;;;1114   
;;;1115   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000e6c  4ed0              LDR      r6,|L1.4528|
;;;1116   	{
;;;1117   	
;;;1118   	i_bat_buff[0]=0;
000e6e  4bd1              LDR      r3,|L1.4532|
000e70  2500              MOVS     r5,#0
000e72  7ab0              LDRB     r0,[r6,#0xa]          ;1115  ; bat_hndl_zvu_ke_init
000e74  2801              CMP      r0,#1                 ;1115
000e76  d102              BNE      |L1.3710|
000e78  801d              STRH     r5,[r3,#0]
;;;1119   	i_bat_buff[0]=0;
;;;1120   	i_bat_buff[0]=0;
;;;1121   	i_bat_buff[0]=0;
;;;1122   	i_bat_buff[0]=0;
;;;1123   	i_bat_buff[0]=0;
;;;1124   	i_bat_buff_cnt=0;
000e7a  73b5              STRB     r5,[r6,#0xe]
;;;1125   
;;;1126   	bat_hndl_zvu_ke_init=0;
000e7c  72b5              STRB     r5,[r6,#0xa]
                  |L1.3710|
;;;1127   	}
;;;1128   
;;;1129   
;;;1130   
;;;1131   
;;;1132   if(spc_stat==spcKE)
000e7e  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000e82  2801              CMP      r0,#1
000e84  d17e              BNE      |L1.3972|
;;;1133   	{
;;;1134   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000e86  48cc              LDR      r0,|L1.4536|
000e88  f04f070a          MOV      r7,#0xa
000e8c  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000e90  f1c00000          RSB      r0,r0,#0
000e94  fb90f0f7          SDIV     r0,r0,r7
000e98  b200              SXTH     r0,r0
;;;1135   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000e9a  2800              CMP      r0,#0
000e9c  da01              BGE      |L1.3746|
000e9e  f04f0000          MOV      r0,#0
                  |L1.3746|
;;;1136   
;;;1137   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000ea2  4ac6              LDR      r2,|L1.4540|
000ea4  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000ea6  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1138   	if(++ke_drv_cnt_10s>10)
000ea8  1c49              ADDS     r1,r1,#1
;;;1139   		{
;;;1140   		ke_drv_cnt_10s=0;
;;;1141   
;;;1142   		i_bat_buff_cnt++;
;;;1143   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1144   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1145   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1146   		ke_drv_i_temp_temp=0;
;;;1147   		for(i=0;i<6;i++)
;;;1148   			{
;;;1149   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1150   			}
;;;1151   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1152   
;;;1153   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1154   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1155   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1156   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1157   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1158   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1159   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1160   		
;;;1161   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1162   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1163   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1164   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1165   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1166   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1167   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1168   
;;;1169   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1170   		bat_hndl_i_temp=ke_drv_i_avg;
000eaa  4cbf              LDR      r4,|L1.4520|
000eac  b2c9              UXTB     r1,r1                 ;1138
000eae  3c80              SUBS     r4,r4,#0x80
000eb0  7371              STRB     r1,[r6,#0xd]          ;1138
000eb2  290a              CMP      r1,#0xa               ;1138
000eb4  d967              BLS      |L1.3974|
000eb6  7375              STRB     r5,[r6,#0xd]          ;1140
000eb8  7bb1              LDRB     r1,[r6,#0xe]          ;1142  ; i_bat_buff_cnt
000eba  f1010101          ADD      r1,r1,#1              ;1142
000ebe  b2c9              UXTB     r1,r1                 ;1142
000ec0  73b1              STRB     r1,[r6,#0xe]          ;1142
000ec2  2906              CMP      r1,#6                 ;1143
000ec4  d300              BCC      |L1.3784|
000ec6  73b5              STRB     r5,[r6,#0xe]          ;1143
                  |L1.3784|
000ec8  7bb1              LDRB     r1,[r6,#0xe]          ;1144  ; i_bat_buff_cnt
000eca  6091              STR      r1,[r2,#8]            ;1144  ; bat_hndl_plazma
000ecc  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1145
000ed0  f04f0100          MOV      r1,#0                 ;1146
000ed4  4608              MOV      r0,r1                 ;1147
                  |L1.3798|
000ed6  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1149
000eda  4461              ADD      r1,r1,r12             ;1149
000edc  b209              SXTH     r1,r1                 ;1149
000ede  f1000001          ADD      r0,r0,#1              ;1147
000ee2  b2c0              UXTB     r0,r0                 ;1147
000ee4  2806              CMP      r0,#6                 ;1147
000ee6  d3f6              BCC      |L1.3798|
000ee8  f04f0006          MOV      r0,#6                 ;1151
000eec  fb91f0f0          SDIV     r0,r1,r0              ;1151
000ef0  b201              SXTH     r1,r0                 ;1151
000ef2  48b3              LDR      r0,|L1.4544|
000ef4  f8df82c4          LDR      r8,|L1.4540|
000ef8  8800              LDRH     r0,[r0,#0]            ;1153  ; BAT_C_POINT_1_6
000efa  f1a8081c          SUB      r8,r8,#0x1c           ;1153
000efe  eb000040          ADD      r0,r0,r0,LSL #1       ;1153
000f02  ea4f0040          LSL      r0,r0,#1              ;1153
000f06  f8a80000          STRH     r0,[r8,#0]            ;1153
000f0a  48ae              LDR      r0,|L1.4548|
000f0c  8800              LDRH     r0,[r0,#0]            ;1154  ; BAT_C_POINT_1_2
000f0e  ea4f0040          LSL      r0,r0,#1              ;1154
000f12  f8a80002          STRH     r0,[r8,#2]            ;1154
000f16  48ac              LDR      r0,|L1.4552|
000f18  8800              LDRH     r0,[r0,#0]            ;1155  ; BAT_C_POINT_1
000f1a  f8a80004          STRH     r0,[r8,#4]            ;1155
000f1e  48ab              LDR      r0,|L1.4556|
000f20  f04f0303          MOV      r3,#3                 ;1156
000f24  f9b00000          LDRSH    r0,[r0,#0]            ;1156  ; BAT_C_POINT_3
000f28  fb90f0f3          SDIV     r0,r0,r3              ;1156
000f2c  f8a80006          STRH     r0,[r8,#6]            ;1156
000f30  48a7              LDR      r0,|L1.4560|
000f32  f04f0305          MOV      r3,#5                 ;1157
000f36  f9b00000          LDRSH    r0,[r0,#0]            ;1157  ; BAT_C_POINT_5
000f3a  fb90f0f3          SDIV     r0,r0,r3              ;1157
000f3e  f8a80008          STRH     r0,[r8,#8]            ;1157
000f42  48a4              LDR      r0,|L1.4564|
000f44  f9b00000          LDRSH    r0,[r0,#0]            ;1158  ; BAT_C_POINT_10
000f48  fb90f0f7          SDIV     r0,r0,r7              ;1158
000f4c  f8a8000a          STRH     r0,[r8,#0xa]          ;1158
000f50  48a1              LDR      r0,|L1.4568|
000f52  f04f0314          MOV      r3,#0x14              ;1159
000f56  f9b00000          LDRSH    r0,[r0,#0]            ;1159  ; BAT_C_POINT_20
000f5a  fb90f0f3          SDIV     r0,r0,r3              ;1159
000f5e  f8a8000c          STRH     r0,[r8,#0xc]          ;1159
000f62  489e              LDR      r0,|L1.4572|
000f64  f108090e          ADD      r9,r8,#0xe            ;1161
000f68  f9b07000          LDRSH    r7,[r0,#0]            ;1161  ; BAT_U_END_1_6
000f6c  f8a97000          STRH     r7,[r9,#0]            ;1161
000f70  489b              LDR      r0,|L1.4576|
000f72  8800              LDRH     r0,[r0,#0]            ;1162  ; BAT_U_END_1_2
000f74  f8a90002          STRH     r0,[r9,#2]            ;1162
000f78  489a              LDR      r0,|L1.4580|
000f7a  8800              LDRH     r0,[r0,#0]            ;1163  ; BAT_U_END_1
000f7c  f8a90004          STRH     r0,[r9,#4]            ;1163
000f80  4899              LDR      r0,|L1.4584|
000f82  e001              B        |L1.3976|
                  |L1.3972|
000f84  e0ea              B        |L1.4444|
                  |L1.3974|
000f86  e061              B        |L1.4172|
                  |L1.3976|
000f88  8800              LDRH     r0,[r0,#0]            ;1164  ; BAT_U_END_3
000f8a  f8a90006          STRH     r0,[r9,#6]            ;1164
000f8e  4897              LDR      r0,|L1.4588|
000f90  8800              LDRH     r0,[r0,#0]            ;1165  ; BAT_U_END_5
000f92  f8a90008          STRH     r0,[r9,#8]            ;1165
000f96  4896              LDR      r0,|L1.4592|
000f98  8800              LDRH     r0,[r0,#0]            ;1166  ; BAT_U_END_10
000f9a  f8a9000a          STRH     r0,[r9,#0xa]          ;1166
000f9e  4895              LDR      r0,|L1.4596|
000fa0  f9b0c000          LDRSH    r12,[r0,#0]           ;1167  ; BAT_U_END_20
000fa4  f8a9c00c          STRH     r12,[r9,#0xc]         ;1167
000fa8  6051              STR      r1,[r2,#4]            ;1169  ; bat_hndl_plazma
000faa  8121              STRH     r1,[r4,#8]
;;;1171   		
;;;1172   		for(i=0;i<7;i++)
000fac  f04f0000          MOV      r0,#0
                  |L1.4016|
;;;1173   			{
;;;1174   			if(bat_hndl_i_temp>=I_from_t_table[i])
000fb0  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000fb4  428b              CMP      r3,r1
000fb6  dd04              BLE      |L1.4034|
000fb8  f1000001          ADD      r0,r0,#1              ;1172
000fbc  b2c0              UXTB     r0,r0                 ;1172
000fbe  2807              CMP      r0,#7                 ;1172
000fc0  d3f6              BCC      |L1.4016|
                  |L1.4034|
;;;1175   				{
;;;1176   				break;
;;;1177   				}
;;;1178   			}
;;;1179   
;;;1180   		bat_hndl_plazma[0]=i;
000fc2  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000fc4  f10d0a04          ADD      r10,sp,#4             ;1113
;;;1181   
;;;1182   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000fc8  b1c8              CBZ      r0,|L1.4094|
;;;1183   		 else if((i>=1)&&(i<7))
000fca  1e42              SUBS     r2,r0,#1
000fcc  2a06              CMP      r2,#6
000fce  d219              BCS      |L1.4100|
;;;1184   		 	{
;;;1185   			short i1,i2;
;;;1186   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000fd0  f8383012          LDRH     r3,[r8,r2,LSL #1]
000fd4  eba30101          SUB      r1,r3,r1
000fd8  b209              SXTH     r1,r1
;;;1187   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000fda  f8388010          LDRH     r8,[r8,r0,LSL #1]
000fde  eba30308          SUB      r3,r3,r8
000fe2  b21b              SXTH     r3,r3
;;;1188   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000fe4  f85a8020          LDR      r8,[r10,r0,LSL #2]
000fe8  f85a2022          LDR      r2,[r10,r2,LSL #2]
000fec  eba80802          SUB      r8,r8,r2
;;;1189   			bat_hndl_t_razr_ke*=(long)i1;
000ff0  fb08f801          MUL      r8,r8,r1
;;;1190   			bat_hndl_t_razr_ke/=(long)i2;
000ff4  fb98f1f3          SDIV     r1,r8,r3
;;;1191   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000ff8  4411              ADD      r1,r1,r2
000ffa  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
;;;1192   			}
000ffc  e006              B        |L1.4108|
                  |L1.4094|
000ffe  9901              LDR      r1,[sp,#4]            ;1182
001000  6561              STR      r1,[r4,#0x54]         ;1182  ; bat_hndl_t_razr_ke
001002  e003              B        |L1.4108|
                  |L1.4100|
;;;1193   		else if(i>=7)
001004  2807              CMP      r0,#7
001006  d301              BCC      |L1.4108|
;;;1194   			{
;;;1195   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
001008  9907              LDR      r1,[sp,#0x1c]
00100a  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
                  |L1.4108|
;;;1196   			}
;;;1197   
;;;1198   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
00100c  b1c0              CBZ      r0,|L1.4160|
;;;1199   		 else if((i>=1)&&(i<7))
00100e  1e41              SUBS     r1,r0,#1
001010  2906              CMP      r1,#6
001012  d217              BCS      |L1.4164|
;;;1200   		 	{
;;;1201   			long u1,tempL;
;;;1202   
;;;1203   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
001014  f9393010          LDRSH    r3,[r9,r0,LSL #1]
001018  f9392011          LDRSH    r2,[r9,r1,LSL #1]
00101c  eba30302          SUB      r3,r3,r2
;;;1204   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
001020  f85a1021          LDR      r1,[r10,r1,LSL #2]
001024  6d67              LDR      r7,[r4,#0x54]  ; bat_hndl_t_razr_ke
001026  eba70701          SUB      r7,r7,r1
;;;1205   			tempL*=u1;
00102a  fb03f307          MUL      r3,r3,r7
;;;1206   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
00102e  f85a0020          LDR      r0,[r10,r0,LSL #2]
001032  eba00001          SUB      r0,r0,r1
;;;1207   			tempL/=u1;
001036  fb93f0f0          SDIV     r0,r3,r0
;;;1208   			tempL+=(long)U_end_from_i_table[i-1];
00103a  4410              ADD      r0,r0,r2
;;;1209   			bat_hndl_u_end=(short)tempL;
00103c  8160              STRH     r0,[r4,#0xa]
;;;1210   			}
00103e  e005              B        |L1.4172|
                  |L1.4160|
001040  8167              STRH     r7,[r4,#0xa]          ;1198
001042  e003              B        |L1.4172|
                  |L1.4164|
;;;1211   		else if(i>=7)
001044  2807              CMP      r0,#7
001046  d301              BCC      |L1.4172|
;;;1212   			{
;;;1213   			bat_hndl_u_end=U_end_from_i_table[6];
001048  f8a4c00a          STRH     r12,[r4,#0xa]
                  |L1.4172|
;;;1214   			}
;;;1215   
;;;1216   		}
;;;1217   
;;;1218   
;;;1219   
;;;1220   	if(spc_phase==0)
00104c  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1221   		{
;;;1222   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1223   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1224   
;;;1225   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1226   	    	
;;;1227   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1228   			{
;;;1229   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1230   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
001050  4f69              LDR      r7,|L1.4600|
;;;1231   			}
;;;1232   
;;;1233   		bat[0]._time_min_cnt_ke++;
;;;1234   		if(bat[0]._time_min_cnt_ke>=60)
;;;1235   			{
;;;1236   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
001052  f44f78e3          MOV      r8,#0x1c6
001056  bbe8              CBNZ     r0,|L1.4308|
001058  2314              MOVS     r3,#0x14              ;1223
00105a  f04f32ff          MOV      r2,#0xffffffff        ;1223
00105e  21ce              MOVS     r1,#0xce              ;1223
001060  20cd              MOVS     r0,#0xcd              ;1223
001062  f7fffffe          BL       mess_send
001066  f8961024          LDRB     r1,[r6,#0x24]         ;1225  ; spc_bat
00106a  f8df9190          LDR      r9,|L1.4604|
00106e  eb010041          ADD      r0,r1,r1,LSL #1       ;1225
001072  eb001001          ADD      r0,r0,r1,LSL #4       ;1225
001076  eb090080          ADD      r0,r9,r0,LSL #2       ;1225
00107a  f9b00008          LDRSH    r0,[r0,#8]            ;1225
00107e  f7fffffe          BL       abs
001082  f8d91018          LDR      r1,[r9,#0x18]         ;1225  ; bat
001086  4401              ADD      r1,r1,r0              ;1225
001088  f8c91018          STR      r1,[r9,#0x18]         ;1225  ; bat
00108c  f64840a0          MOV      r0,#0x8ca0            ;1227
001090  4281              CMP      r1,r0                 ;1227
001092  db0c              BLT      |L1.4270|
001094  eba10100          SUB      r1,r1,r0              ;1229
001098  f8c91018          STR      r1,[r9,#0x18]         ;1229  ; bat
00109c  8838              LDRH     r0,[r7,#0]            ;1230  ; ADR_EE_BAT_ZAR_CNT_KE
00109e  f7fffffe          BL       lc640_read_int
0010a2  1c40              ADDS     r0,r0,#1              ;1230
0010a4  b201              SXTH     r1,r0                 ;1230
0010a6  f9b70000          LDRSH    r0,[r7,#0]            ;1230  ; ADR_EE_BAT_ZAR_CNT_KE
0010aa  f7fffffe          BL       lc640_write_int
                  |L1.4270|
0010ae  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1233  ; bat
0010b2  f1000001          ADD      r0,r0,#1              ;1233
0010b6  b281              UXTH     r1,r0                 ;1233
0010b8  f8a9104a          STRH     r1,[r9,#0x4a]         ;1233
0010bc  293c              CMP      r1,#0x3c              ;1234
0010be  d309              BCC      |L1.4308|
0010c0  4640              MOV      r0,r8
0010c2  f7fffffe          BL       lc640_read_int
0010c6  1c40              ADDS     r0,r0,#1
0010c8  b201              SXTH     r1,r0
0010ca  4640              MOV      r0,r8
0010cc  f7fffffe          BL       lc640_write_int
;;;1237   			bat[0]._time_min_cnt_ke=0;
0010d0  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.4308|
;;;1238   			}
;;;1239   		}
;;;1240   
;;;1241   	else if(spc_phase==1)
;;;1242   		{
;;;1243   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1244   		}
;;;1245   
;;;1246   	if(out_U<bat_hndl_u_end)
0010d4  484a              LDR      r0,|L1.4608|
0010d6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; bat_hndl_u_end
0010da  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0010de  4288              CMP      r0,r1
0010e0  da3a              BGE      |L1.4440|
;;;1247   		{
;;;1248   		cnt_end_ke++;
0010e2  f8b60066          LDRH     r0,[r6,#0x66]  ; cnt_end_ke
0010e6  f1000001          ADD      r0,r0,#1
0010ea  b200              SXTH     r0,r0
0010ec  f8a60066          STRH     r0,[r6,#0x66]
;;;1249   		if(cnt_end_ke>=30)
0010f0  281e              CMP      r0,#0x1e
0010f2  db33              BLT      |L1.4444|
;;;1250   			{
;;;1251   			
;;;1252   			if((spc_stat==spcKE)&&(spc_phase==0))
0010f4  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
0010f8  2801              CMP      r0,#1
0010fa  d121              BNE      |L1.4416|
0010fc  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
001100  b9f0              CBNZ     r0,|L1.4416|
;;;1253   				{
;;;1254   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
001102  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001104  f7fffffe          BL       lc640_read_int
001108  b201              SXTH     r1,r0
00110a  483e              LDR      r0,|L1.4612|
00110c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
001110  f7fffffe          BL       lc640_write_int
;;;1255   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
001114  4640              MOV      r0,r8
001116  f7fffffe          BL       lc640_read_int
00111a  b284              UXTH     r4,r0
00111c  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
00111e  f7fffffe          BL       lc640_read_int
001122  b281              UXTH     r1,r0
001124  4622              MOV      r2,r4
001126  2000              MOVS     r0,#0
001128  f7fffffe          BL       ke_zvu_mem_hndl
;;;1256   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
00112c  4836              LDR      r0,|L1.4616|
00112e  2100              MOVS     r1,#0
001130  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001134  f7fffffe          BL       lc640_write_int
;;;1257   				cntrl_stat=50;
001138  f04f0032          MOV      r0,#0x32
00113c  8670              STRH     r0,[r6,#0x32]
;;;1258   				cntrl_stat_old=50;
00113e  86b0              STRH     r0,[r6,#0x34]
                  |L1.4416|
;;;1259   				}
;;;1260   
;;;1261   			spc_stat=spcOFF;
001140  f8865023          STRB     r5,[r6,#0x23]
;;;1262   			__ee_spc_stat=spcOFF;
001144  f8a6506a          STRH     r5,[r6,#0x6a]
;;;1263   			lc640_write_int(EE_SPC_STAT,spcOFF);
001148  b008              ADD      sp,sp,#0x20
00114a  2100              MOVS     r1,#0
00114c  e8bd47f0          POP      {r4-r10,lr}
001150  f240209a          MOV      r0,#0x29a
001154  f7ffbffe          B.W      lc640_write_int
                  |L1.4440|
;;;1264   
;;;1265   			}
;;;1266   		}
;;;1267   	else cnt_end_ke=0;
001158  f8a65066          STRH     r5,[r6,#0x66]
                  |L1.4444|
;;;1268   
;;;1269   	}
;;;1270   			
;;;1271   }
00115c  b008              ADD      sp,sp,#0x20
00115e  e8bd87f0          POP      {r4-r10,pc}
;;;1272   #endif
                          ENDP

                  vz_start PROC
;;;1342   //-----------------------------------------------
;;;1343   char vz_start(char hour)
001162  b570              PUSH     {r4-r6,lr}
;;;1344   {          
001164  4605              MOV      r5,r0
;;;1345   char out;
;;;1346   out=0;
001166  f04f0600          MOV      r6,#0
;;;1347   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
00116a  4c11              LDR      r4,|L1.4528|
00116c  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001170  b9a8              CBNZ     r0,|L1.4510|
001172  4826              LDR      r0,|L1.4620|
001174  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001176  2801              CMP      r0,#1
001178  d06a              BEQ      |L1.4688|
;;;1348   	{
;;;1349   	spc_stat=spcVZ;
00117a  f104042c          ADD      r4,r4,#0x2c
00117e  f04f0102          MOV      r1,#2
001182  f8041c09          STRB     r1,[r4,#-9]
;;;1350   	__ee_spc_stat=spcVZ; 
001186  87e1              STRH     r1,[r4,#0x3e]
;;;1351   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001188  f240209a          MOV      r0,#0x29a
00118c  f7fffffe          BL       lc640_write_int
;;;1352   	vz_cnt_h=hour;
001190  86e5              STRH     r5,[r4,#0x36]
;;;1353   	__ee_vz_cnt=hour*60;
001192  ebc51005          RSB      r0,r5,r5,LSL #4
001196  ea4f0080          LSL      r0,r0,#2
00119a  87a0              STRH     r0,[r4,#0x3c]
00119c  e038              B        |L1.4624|
                  |L1.4510|
00119e  e057              B        |L1.4688|
                  |L1.4512|
                          DCD      bat_u_old_cnt
                  |L1.4516|
                          DCD      0x40024020
                  |L1.4520|
                          DCD      ||area_number.25||+0x100
                  |L1.4524|
                          DCD      ||area_number.19||+0x4
                  |L1.4528|
                          DCD      ||area_number.25||
                  |L1.4532|
                          DCD      ||.bss||
                  |L1.4536|
                          DCD      Ib_ips_termokompensat
                  |L1.4540|
                          DCD      ||.bss||+0x468
                  |L1.4544|
                          DCD      BAT_C_POINT_1_6
                  |L1.4548|
                          DCD      BAT_C_POINT_1_2
                  |L1.4552|
                          DCD      BAT_C_POINT_1
                  |L1.4556|
                          DCD      BAT_C_POINT_3
                  |L1.4560|
                          DCD      BAT_C_POINT_5
                  |L1.4564|
                          DCD      BAT_C_POINT_10
                  |L1.4568|
                          DCD      BAT_C_POINT_20
                  |L1.4572|
                          DCD      BAT_U_END_1_6
                  |L1.4576|
                          DCD      BAT_U_END_1_2
                  |L1.4580|
                          DCD      BAT_U_END_1
                  |L1.4584|
                          DCD      BAT_U_END_3
                  |L1.4588|
                          DCD      BAT_U_END_5
                  |L1.4592|
                          DCD      BAT_U_END_10
                  |L1.4596|
                          DCD      BAT_U_END_20
                  |L1.4600|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4604|
                          DCD      bat
                  |L1.4608|
                          DCD      out_U
                  |L1.4612|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4616|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.4620|
                          DCD      speedChrgBlckStat
                  |L1.4624|
001210  f1a4042c          SUB      r4,r4,#0x2c
;;;1354   	if(hour==0)__ee_vz_cnt=30;
001214  b91d              CBNZ     r5,|L1.4638|
001216  f04f001e          MOV      r0,#0x1e
00121a  f8a40068          STRH     r0,[r4,#0x68]
                  |L1.4638|
;;;1355   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
00121e  f104045e          ADD      r4,r4,#0x5e
001222  f44f7027          MOV      r0,#0x29c
001226  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
00122a  f7fffffe          BL       lc640_write_int
;;;1356   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
00122e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001232  f44f702a          MOV      r0,#0x2a8
001236  f7fffffe          BL       lc640_write_int
;;;1357   	vz_cnt_h_=0;
00123a  f04f0000          MOV      r0,#0
00123e  80e0              STRH     r0,[r4,#6]
;;;1358   	vz_cnt_s=0;
001240  8020              STRH     r0,[r4,#0]
;;;1359   	vz_cnt_s_=0;
001242  8060              STRH     r0,[r4,#2]
;;;1360   	out=1;
001244  f04f0601          MOV      r6,#1
;;;1361   	vz_mem_hndl(1);
001248  f04f0001          MOV      r0,#1
00124c  f7fffffe          BL       vz_mem_hndl
                  |L1.4688|
;;;1362   	}
;;;1363   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1364   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1365   //plazma=out;	
;;;1366   return out;
001250  4630              MOV      r0,r6
;;;1367   }
001252  bd70              POP      {r4-r6,pc}
;;;1368   
                          ENDP

                  vz_stop PROC
;;;1369   //-----------------------------------------------
;;;1370   void vz_stop(void)
001254  b510              PUSH     {r4,lr}
;;;1371   {
;;;1372   if(spc_stat==spcVZ)
001256  4cff              LDR      r4,|L1.5716|
001258  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00125c  2802              CMP      r0,#2
00125e  d113              BNE      |L1.4744|
;;;1373        {
;;;1374   vz_mem_hndl(vz_cnt_h);          
001260  f104042c          ADD      r4,r4,#0x2c
001264  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
001266  f7fffffe          BL       vz_mem_hndl
;;;1375   vz_cnt_s=0;
00126a  f04f0000          MOV      r0,#0
00126e  8660              STRH     r0,[r4,#0x32]
;;;1376   vz_cnt_h=0;
001270  86e0              STRH     r0,[r4,#0x36]
;;;1377   vz_cnt_h_=0;
001272  8720              STRH     r0,[r4,#0x38]
;;;1378   spc_stat=spcOFF;
001274  f8040c09          STRB     r0,[r4,#-9]
;;;1379   
;;;1380   		__ee_spc_stat=spcOFF;
001278  87e0              STRH     r0,[r4,#0x3e]
;;;1381   		lc640_write_int(EE_SPC_STAT,spcOFF);
00127a  4601              MOV      r1,r0
00127c  e8bd4010          POP      {r4,lr}
001280  f240209a          MOV      r0,#0x29a
001284  f7ffbffe          B.W      lc640_write_int
                  |L1.4744|
;;;1382        }
;;;1383   
;;;1384   }
001288  bd10              POP      {r4,pc}
;;;1385   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1387   //-----------------------------------------------
;;;1388   void amper_chas_cnt_drv(void)
00128a  b510              PUSH     {r4,lr}
;;;1389   {
;;;1390   
;;;1391   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
00128c  4af1              LDR      r2,|L1.5716|
00128e  49f2              LDR      r1,|L1.5720|
001290  3280              ADDS     r2,r2,#0x80
001292  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
001296  6e50              LDR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
001298  4401              ADD      r1,r1,r0
00129a  6651              STR      r1,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1392   
;;;1393   if(amper_chas_cnt_drv_summ>=36000L)
00129c  f64843a0          MOV      r3,#0x8ca0
;;;1394   	{
;;;1395   	amper_chas_cnt_drv_summ-=36000L;
;;;1396   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
0012a0  f44f74e4          MOV      r4,#0x1c8
0012a4  4299              CMP      r1,r3                 ;1393
0012a6  db0c              BLT      |L1.4802|
0012a8  eba10103          SUB      r1,r1,r3              ;1395
0012ac  6651              STR      r1,[r2,#0x64]         ;1395  ; amper_chas_cnt_drv_summ
0012ae  4620              MOV      r0,r4
0012b0  f7fffffe          BL       lc640_read_int
0012b4  1c40              ADDS     r0,r0,#1
0012b6  b201              SXTH     r1,r0
0012b8  4620              MOV      r0,r4
0012ba  e8bd4010          POP      {r4,lr}
0012be  f7ffbffe          B.W      lc640_write_int
                  |L1.4802|
;;;1397   	}
;;;1398   else if(amper_chas_cnt_drv_summ<=-36000L)
0012c2  48e6              LDR      r0,|L1.5724|
0012c4  4281              CMP      r1,r0
0012c6  dc0c              BGT      |L1.4834|
;;;1399   	{
;;;1400   	amper_chas_cnt_drv_summ+=36000L;
0012c8  eb010003          ADD      r0,r1,r3
0012cc  6650              STR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1401   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
0012ce  4620              MOV      r0,r4
0012d0  f7fffffe          BL       lc640_read_int
0012d4  1e40              SUBS     r0,r0,#1
0012d6  b201              SXTH     r1,r0
0012d8  4620              MOV      r0,r4
0012da  e8bd4010          POP      {r4,lr}
0012de  f7ffbffe          B.W      lc640_write_int
                  |L1.4834|
;;;1402   	}
;;;1403   }
0012e2  bd10              POP      {r4,pc}
;;;1404   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1406   //-----------------------------------------------
;;;1407   void avz_next_date_hndl(void)
0012e4  b570              PUSH     {r4-r6,lr}
;;;1408   {
;;;1409   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0012e6  4cde              LDR      r4,|L1.5728|
0012e8  f8940038          LDRB     r0,[r4,#0x38]
0012ec  4ddd              LDR      r5,|L1.5732|
0012ee  7829              LDRB     r1,[r5,#0]  ; AVZ
0012f0  4408              ADD      r0,r0,r1
0012f2  280c              CMP      r0,#0xc
0012f4  d906              BLS      |L1.4868|
0012f6  8fa0              LDRH     r0,[r4,#0x3c]
0012f8  1c40              ADDS     r0,r0,#1
0012fa  b201              SXTH     r1,r0
0012fc  20b8              MOVS     r0,#0xb8
0012fe  f7fffffe          BL       lc640_write_int
001302  e004              B        |L1.4878|
                  |L1.4868|
;;;1410   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
001304  f9b4103c          LDRSH    r1,[r4,#0x3c]
001308  20b8              MOVS     r0,#0xb8
00130a  f7fffffe          BL       lc640_write_int
                  |L1.4878|
;;;1411   
;;;1412   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1413   
;;;1414   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
00130e  f8941038          LDRB     r1,[r4,#0x38]
001312  7828              LDRB     r0,[r5,#0]  ; AVZ
001314  4401              ADD      r1,r1,r0
001316  290c              CMP      r1,#0xc
001318  d907              BLS      |L1.4906|
00131a  f8941038          LDRB     r1,[r4,#0x38]
00131e  380c              SUBS     r0,r0,#0xc
001320  4401              ADD      r1,r1,r0
001322  20b6              MOVS     r0,#0xb6
001324  f7fffffe          BL       lc640_write_int
001328  e005              B        |L1.4918|
                  |L1.4906|
;;;1415   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
00132a  f8941038          LDRB     r1,[r4,#0x38]
00132e  4401              ADD      r1,r1,r0
001330  20b6              MOVS     r0,#0xb6
001332  f7fffffe          BL       lc640_write_int
                  |L1.4918|
;;;1416   
;;;1417   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1418   
;;;1419   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
001336  f894002c          LDRB     r0,[r4,#0x2c]
00133a  281c              CMP      r0,#0x1c
00133c  d904              BLS      |L1.4936|
00133e  211c              MOVS     r1,#0x1c
001340  20b4              MOVS     r0,#0xb4
001342  f7fffffe          BL       lc640_write_int
001346  e004              B        |L1.4946|
                  |L1.4936|
;;;1420   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
001348  f894102c          LDRB     r1,[r4,#0x2c]
00134c  20b4              MOVS     r0,#0xb4
00134e  f7fffffe          BL       lc640_write_int
                  |L1.4946|
;;;1421   
;;;1422   //lc640_write_int(EE_DATE_AVZ,4);
;;;1423   
;;;1424   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
001352  f1040420          ADD      r4,r4,#0x20
001356  7a21              LDRB     r1,[r4,#8]
001358  f04f00ae          MOV      r0,#0xae
00135c  f7fffffe          BL       lc640_write_int
;;;1425   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
001360  7921              LDRB     r1,[r4,#4]
001362  20b0              MOVS     r0,#0xb0
001364  f7fffffe          BL       lc640_write_int
;;;1426   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
001368  7821              LDRB     r1,[r4,#0]
00136a  e8bd4070          POP      {r4-r6,lr}
00136e  20b2              MOVS     r0,#0xb2
001370  f7ffbffe          B.W      lc640_write_int
;;;1427   
;;;1428   }
;;;1429   
                          ENDP

                  avz_drv PROC
;;;1430   //-----------------------------------------------
;;;1431   void avz_drv(void)                               
001374  b510              PUSH     {r4,lr}
;;;1432   {                
;;;1433   if(AVZ!=AVZ_OFF)
001376  48bb              LDR      r0,|L1.5732|
;;;1434   	{
;;;1435   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1436   		{
;;;1437   		bAVZ=1;
001378  4cb6              LDR      r4,|L1.5716|
00137a  7800              LDRB     r0,[r0,#0]            ;1433  ; AVZ
00137c  b338              CBZ      r0,|L1.5070|
00137e  48b8              LDR      r0,|L1.5728|
001380  8f82              LDRH     r2,[r0,#0x3c]         ;1435
001382  49b9              LDR      r1,|L1.5736|
001384  8809              LDRH     r1,[r1,#0]            ;1435  ; YEAR_AVZ
001386  428a              CMP      r2,r1                 ;1435
001388  d121              BNE      |L1.5070|
00138a  f8902038          LDRB     r2,[r0,#0x38]         ;1435
00138e  49b7              LDR      r1,|L1.5740|
001390  8809              LDRH     r1,[r1,#0]            ;1435  ; MONTH_AVZ
001392  428a              CMP      r2,r1                 ;1435
001394  d11b              BNE      |L1.5070|
001396  f890102c          LDRB     r1,[r0,#0x2c]         ;1435
00139a  4ab5              LDR      r2,|L1.5744|
00139c  8812              LDRH     r2,[r2,#0]            ;1435  ; DATE_AVZ
00139e  4291              CMP      r1,r2                 ;1435
0013a0  d115              BNE      |L1.5070|
0013a2  f8901028          LDRB     r1,[r0,#0x28]         ;1435
0013a6  4ab3              LDR      r2,|L1.5748|
0013a8  8812              LDRH     r2,[r2,#0]            ;1435  ; HOUR_AVZ
0013aa  4291              CMP      r1,r2                 ;1435
0013ac  d10f              BNE      |L1.5070|
0013ae  f8901024          LDRB     r1,[r0,#0x24]         ;1435
0013b2  4ab1              LDR      r2,|L1.5752|
0013b4  8812              LDRH     r2,[r2,#0]            ;1435  ; MIN_AVZ
0013b6  4291              CMP      r1,r2                 ;1435
0013b8  d109              BNE      |L1.5070|
0013ba  f8900020          LDRB     r0,[r0,#0x20]         ;1435
0013be  49af              LDR      r1,|L1.5756|
0013c0  8809              LDRH     r1,[r1,#0]            ;1435  ; SEC_AVZ
0013c2  4288              CMP      r0,r1                 ;1435
0013c4  d103              BNE      |L1.5070|
0013c6  f04f0001          MOV      r0,#1
0013ca  f8840026          STRB     r0,[r4,#0x26]
                  |L1.5070|
;;;1438   		}
;;;1439   	}
;;;1440   if(bAVZ)
0013ce  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
0013d2  2800              CMP      r0,#0
0013d4  d00d              BEQ      |L1.5106|
;;;1441   	{
;;;1442   	if(vz_start(AVZ_TIME))
0013d6  48aa              LDR      r0,|L1.5760|
0013d8  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
0013da  b2c0              UXTB     r0,r0
0013dc  f7fffffe          BL       vz_start
0013e0  2800              CMP      r0,#0
0013e2  d006              BEQ      |L1.5106|
;;;1443   		{
;;;1444   		bAVZ=0;
0013e4  f04f0000          MOV      r0,#0
0013e8  f8840026          STRB     r0,[r4,#0x26]
;;;1445   		avz_next_date_hndl();
0013ec  e8bd4010          POP      {r4,lr}
0013f0  e7fe              B        avz_next_date_hndl
                  |L1.5106|
;;;1446   		}
;;;1447   	}	
;;;1448   
;;;1449   }
0013f2  bd10              POP      {r4,pc}
;;;1450   
                          ENDP

                  vz_drv PROC
;;;1451   //-----------------------------------------------
;;;1452   void vz_drv(void)
0013f4  b538              PUSH     {r3-r5,lr}
;;;1453   { 
;;;1454   if(spc_stat==spcVZ)
0013f6  4c97              LDR      r4,|L1.5716|
0013f8  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0013fc  2802              CMP      r0,#2
0013fe  d11d              BNE      |L1.5180|
;;;1455   	{
;;;1456   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001400  48a0              LDR      r0,|L1.5764|
001402  7800              LDRB     r0,[r0,#0]  ; sk_stat
001404  2801              CMP      r0,#1
001406  d01a              BEQ      |L1.5182|
001408  489f              LDR      r0,|L1.5768|
00140a  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
00140c  2800              CMP      r0,#0
00140e  d016              BEQ      |L1.5182|
;;;1457   		{
;;;1458   
;;;1459   	if(vz_cnt_s_<3600)
;;;1460   		{
;;;1461   		vz_cnt_s_++;
;;;1462   		if(vz_cnt_s_>=3600)
;;;1463   			{
;;;1464   			vz_cnt_s_=0;
;;;1465   			if(vz_cnt_h)
;;;1466   				{
;;;1467   				vz_cnt_h--;
;;;1468   				vz_cnt_h_++;
;;;1469   				}
;;;1470   			}
;;;1471   		}
;;;1472   
;;;1473   
;;;1474   	if(vz_cnt_s<60)
;;;1475   		{
;;;1476   		vz_cnt_s++;
;;;1477   		if(vz_cnt_s>=60)
;;;1478   			{
;;;1479   			vz_cnt_s=0;
;;;1480   			
;;;1481   			__ee_vz_cnt--;
;;;1482   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1483   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1484   				{
;;;1485   				spc_stat=spcOFF;
;;;1486   						__ee_spc_stat=spcOFF;
;;;1487   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1488   
;;;1489   //				hv_vz_stat=hvsOFF;
;;;1490   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1491   				vz_mem_hndl(0);
;;;1492   				}
;;;1493   			}
;;;1494   		}
;;;1495   		vz_error=0; 
;;;1496   		}
;;;1497   	else 
;;;1498   		{
;;;1499   		vz_error=1; 
001410  f04f0001          MOV      r0,#1
001414  7060              STRB     r0,[r4,#1]
;;;1500   		if(((LPC_RTC->SEC)%10)==0)
001416  489d              LDR      r0,|L1.5772|
001418  7800              LDRB     r0,[r0,#0]
00141a  f04f010a          MOV      r1,#0xa
00141e  fbb0f2f1          UDIV     r2,r0,r1
001422  fb010012          MLS      r0,r1,r2,r0
001426  2800              CMP      r0,#0
001428  d108              BNE      |L1.5180|
;;;1501   			{
;;;1502   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00142a  f2413088          MOV      r0,#0x1388
00142e  9000              STR      r0,[sp,#0]
001430  a397              ADR      r3,|L1.5776|
001432  a29d              ADR      r2,|L1.5800|
001434  a1a2              ADR      r1,|L1.5824|
001436  a0a8              ADR      r0,|L1.5848|
001438  f7fffffe          BL       show_mess
                  |L1.5180|
;;;1503   						"    ЗАБЛОКИРОВАН    ",
;;;1504   						"     НЕИСПРАВНА     ",
;;;1505   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1506   						5000);			
;;;1507   			}
;;;1508   		}
;;;1509   /*	if(vz_cnt_s_>=3)
;;;1510   		{
;;;1511   		if(sk_stat[0]==0)
;;;1512   		} */
;;;1513   
;;;1514   	}
;;;1515   
;;;1516   
;;;1517   } 
00143c  bd38              POP      {r3-r5,pc}
                  |L1.5182|
00143e  f8b40060          LDRH     r0,[r4,#0x60]         ;1459  ; vz_cnt_s_
001442  f44f6161          MOV      r1,#0xe10             ;1459
001446  2500              MOVS     r5,#0                 ;1456
001448  4288              CMP      r0,r1                 ;1459
00144a  d215              BCS      |L1.5240|
00144c  f1000001          ADD      r0,r0,#1              ;1461
001450  b280              UXTH     r0,r0                 ;1461
001452  f8a40060          STRH     r0,[r4,#0x60]         ;1461
001456  4288              CMP      r0,r1                 ;1462
001458  d30e              BCC      |L1.5240|
00145a  f8a45060          STRH     r5,[r4,#0x60]         ;1464
00145e  f8b40062          LDRH     r0,[r4,#0x62]         ;1465  ; vz_cnt_h
001462  b148              CBZ      r0,|L1.5240|
001464  f1a00001          SUB      r0,r0,#1              ;1467
001468  f8240f62          STRH     r0,[r4,#0x62]!        ;1467
00146c  8860              LDRH     r0,[r4,#2]            ;1468  ; vz_cnt_h_
00146e  f1000001          ADD      r0,r0,#1              ;1468
001472  8060              STRH     r0,[r4,#2]            ;1468
001474  f1a40462          SUB      r4,r4,#0x62           ;1468
                  |L1.5240|
001478  f8b4005e          LDRH     r0,[r4,#0x5e]         ;1474  ; vz_cnt_s
00147c  283c              CMP      r0,#0x3c              ;1474
00147e  d225              BCS      |L1.5324|
001480  f1000001          ADD      r0,r0,#1              ;1476
001484  b280              UXTH     r0,r0                 ;1476
001486  f8a4005e          STRH     r0,[r4,#0x5e]         ;1476
00148a  283c              CMP      r0,#0x3c              ;1477
00148c  d31e              BCC      |L1.5324|
00148e  f8245f5e          STRH     r5,[r4,#0x5e]!        ;1479
001492  8960              LDRH     r0,[r4,#0xa]          ;1481  ; __ee_vz_cnt
001494  f1a00001          SUB      r0,r0,#1              ;1481
001498  b201              SXTH     r1,r0                 ;1481
00149a  8161              STRH     r1,[r4,#0xa]          ;1481
00149c  f44f7027          MOV      r0,#0x29c             ;1482
0014a0  f7fffffe          BL       lc640_write_int
0014a4  8960              LDRH     r0,[r4,#0xa]          ;1483  ; __ee_vz_cnt
0014a6  f1a4045e          SUB      r4,r4,#0x5e           ;1483
0014aa  b118              CBZ      r0,|L1.5300|
0014ac  4890              LDR      r0,|L1.5872|
0014ae  8800              LDRH     r0,[r0,#0]            ;1483  ; speedChrgBlckStat
0014b0  2801              CMP      r0,#1                 ;1483
0014b2  d10b              BNE      |L1.5324|
                  |L1.5300|
0014b4  f8845023          STRB     r5,[r4,#0x23]         ;1485
0014b8  f8a4506a          STRH     r5,[r4,#0x6a]         ;1486
0014bc  2100              MOVS     r1,#0                 ;1487
0014be  f240209a          MOV      r0,#0x29a             ;1487
0014c2  f7fffffe          BL       lc640_write_int
0014c6  2000              MOVS     r0,#0                 ;1491
0014c8  f7fffffe          BL       vz_mem_hndl
                  |L1.5324|
0014cc  7065              STRB     r5,[r4,#1]            ;1495
0014ce  bd38              POP      {r3-r5,pc}
;;;1518   
                          ENDP

                  vz1_drv PROC
;;;1520   //драйвер уравнительного заряда
;;;1521   void vz1_drv(void)
0014d0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1522   {
;;;1523   if(volt_region_cnt)volt_region_cnt--;
0014d4  f8df817c          LDR      r8,|L1.5716|
0014d8  f9b80078          LDRSH    r0,[r8,#0x78]  ; volt_region_cnt
0014dc  b118              CBZ      r0,|L1.5350|
0014de  f1a00001          SUB      r0,r0,#1
0014e2  f8a80078          STRH     r0,[r8,#0x78]
                  |L1.5350|
;;;1524   if(vz1_stat==vz1sOFF)
0014e6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0014ea  b928              CBNZ     r0,|L1.5368|
;;;1525   	{
;;;1526   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014ec  2314              MOVS     r3,#0x14
0014ee  2200              MOVS     r2,#0
0014f0  2164              MOVS     r1,#0x64
0014f2  20d2              MOVS     r0,#0xd2
0014f4  f7fffffe          BL       mess_send
                  |L1.5368|
;;;1527   	}
;;;1528   if(vz1_stat==vz1sSTEP1)
0014f8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1529   	{
;;;1530   	if(vz1_stat_old!=vz1_stat)
;;;1531   		{
;;;1532   		vz1_stat_cnt=5;
;;;1533   		}
;;;1534   	if(vz1_stat_cnt)
;;;1535   		{
;;;1536   		vz1_stat_cnt--;
;;;1537   		if(vz1_stat_cnt==0)
;;;1538   			{
;;;1539   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1540   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1541   			}
;;;1542   		}
;;;1543   	if(sk_stat[0]==1)
0014fc  4d61              LDR      r5,|L1.5764|
0014fe  f44f7bc9          MOV      r11,#0x192            ;1540
001502  2801              CMP      r0,#1                 ;1528
001504  d139              BNE      |L1.5498|
001506  f8980006          LDRB     r0,[r8,#6]            ;1530  ; vz1_stat_old
00150a  2801              CMP      r0,#1                 ;1530
00150c  d003              BEQ      |L1.5398|
00150e  f04f0005          MOV      r0,#5                 ;1532
001512  f8a80076          STRH     r0,[r8,#0x76]         ;1532
                  |L1.5398|
001516  f9b80076          LDRSH    r0,[r8,#0x76]         ;1534  ; vz1_stat_cnt
00151a  b168              CBZ      r0,|L1.5432|
00151c  f1a00001          SUB      r0,r0,#1              ;1536
001520  b200              SXTH     r0,r0                 ;1536
001522  f8a80076          STRH     r0,[r8,#0x76]         ;1536
001526  b938              CBNZ     r0,|L1.5432|
001528  f04f000b          MOV      r0,#0xb               ;1539
00152c  f8880005          STRB     r0,[r8,#5]            ;1539
001530  4601              MOV      r1,r0                 ;1540
001532  4658              MOV      r0,r11                ;1540
001534  f7fffffe          BL       lc640_write
                  |L1.5432|
001538  7828              LDRB     r0,[r5,#0]  ; sk_stat
00153a  2801              CMP      r0,#1
00153c  d117              BNE      |L1.5486|
;;;1544   		{
;;;1545   		vz1_stat=vz1sSTEP2;
00153e  f04f0002          MOV      r0,#2
001542  f8880005          STRB     r0,[r8,#5]
;;;1546   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
001546  4601              MOV      r1,r0
001548  4658              MOV      r0,r11
00154a  f7fffffe          BL       lc640_write
;;;1547   		tree_up(iVZ1_STEP2_2,1,0,0);
00154e  2300              MOVS     r3,#0
001550  461a              MOV      r2,r3
001552  2101              MOVS     r1,#1
001554  20e1              MOVS     r0,#0xe1
001556  f7fffffe          BL       tree_up
;;;1548   		tree_up(iVZ1_STEP2_1,0,0,0);
00155a  2300              MOVS     r3,#0
00155c  461a              MOV      r2,r3
00155e  4619              MOV      r1,r3
001560  20e0              MOVS     r0,#0xe0
001562  f7fffffe          BL       tree_up
;;;1549   		ret(1200);
001566  f44f6096          MOV      r0,#0x4b0
00156a  f7fffffe          BL       ||ret||
                  |L1.5486|
;;;1550   		}
;;;1551   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00156e  2314              MOVS     r3,#0x14
001570  2200              MOVS     r2,#0
001572  2164              MOVS     r1,#0x64
001574  20d2              MOVS     r0,#0xd2
001576  f7fffffe          BL       mess_send
                  |L1.5498|
;;;1552   	}
;;;1553   
;;;1554   if(vz1_stat==vz1sSTEP2)
00157a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1555   	{
;;;1556   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1557   		{
;;;1558   		vz1_stat_cnt=15;
00157e  f04f090f          MOV      r9,#0xf
001582  2802              CMP      r0,#2                 ;1554
001584  d118              BNE      |L1.5560|
001586  f8980006          LDRB     r0,[r8,#6]            ;1556  ; vz1_stat_old
00158a  2802              CMP      r0,#2                 ;1556
00158c  d102              BNE      |L1.5524|
00158e  f8b80076          LDRH     r0,[r8,#0x76]         ;1556  ; vz1_stat_cnt
001592  b908              CBNZ     r0,|L1.5528|
                  |L1.5524|
001594  f8a89076          STRH     r9,[r8,#0x76]
                  |L1.5528|
;;;1559   		}
;;;1560   	vz1_stat_cnt--;
001598  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00159c  f1a00001          SUB      r0,r0,#1
0015a0  f8a80076          STRH     r0,[r8,#0x76]
;;;1561   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0015a4  f04f0314          MOV      r3,#0x14
0015a8  f04f0200          MOV      r2,#0
0015ac  f04f0164          MOV      r1,#0x64
0015b0  f04f00d2          MOV      r0,#0xd2
0015b4  f7fffffe          BL       mess_send
                  |L1.5560|
;;;1562   	}
;;;1563   
;;;1564   if(vz1_stat==vz1sSTEP3)
0015b8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1565   	{
;;;1566   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1567   		{
;;;1568   		vz1_stat_cnt=10;
0015bc  240a              MOVS     r4,#0xa
0015be  2600              MOVS     r6,#0                 ;1523
0015c0  f04f0a01          MOV      r10,#1                ;1524
;;;1569   
;;;1570   		}
;;;1571   	vz1_stat_cnt--;
;;;1572   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1573   		{
;;;1574   		show_mess(	"     ВКЛЮЧИТЕ       ",
0015c4  f2413788          MOV      r7,#0x1388
0015c8  2803              CMP      r0,#3                 ;1564
0015ca  d131              BNE      |L1.5680|
0015cc  f8980006          LDRB     r0,[r8,#6]            ;1566  ; vz1_stat_old
0015d0  2803              CMP      r0,#3                 ;1566
0015d2  d102              BNE      |L1.5594|
0015d4  f8b80076          LDRH     r0,[r8,#0x76]         ;1566  ; vz1_stat_cnt
0015d8  b908              CBNZ     r0,|L1.5598|
                  |L1.5594|
0015da  f8a84076          STRH     r4,[r8,#0x76]         ;1568
                  |L1.5598|
0015de  f8b80076          LDRH     r0,[r8,#0x76]         ;1571  ; vz1_stat_cnt
0015e2  f1a00001          SUB      r0,r0,#1              ;1571
0015e6  b200              SXTH     r0,r0                 ;1571
0015e8  f8a80076          STRH     r0,[r8,#0x76]         ;1571
0015ec  280a              CMP      r0,#0xa               ;1572
0015ee  d001              BEQ      |L1.5620|
0015f0  2809              CMP      r0,#9                 ;1572
0015f2  d106              BNE      |L1.5634|
                  |L1.5620|
0015f4  a33f              ADR      r3,|L1.5876|
0015f6  a245              ADR      r2,|L1.5900|
0015f8  a14a              ADR      r1,|L1.5924|
0015fa  a050              ADR      r0,|L1.5948|
0015fc  9700              STR      r7,[sp,#0]
0015fe  f7fffffe          BL       show_mess
                  |L1.5634|
;;;1575   					"      ТУМБЛЕР       ",
;;;1576   					"     ВЫСОКОГО       ",
;;;1577   					"    НАПРЯЖЕНИЯ      ",
;;;1578   					5000);
;;;1579   		}
;;;1580   	if(sk_stat[1]==1)
001602  7868              LDRB     r0,[r5,#1]  ; sk_stat
001604  2801              CMP      r0,#1
001606  d10d              BNE      |L1.5668|
;;;1581   		{
;;;1582   		vz1_stat=vz1sWRK;
001608  f8884005          STRB     r4,[r8,#5]
;;;1583   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00160c  210a              MOVS     r1,#0xa
00160e  4658              MOV      r0,r11
001610  f7fffffe          BL       lc640_write
;;;1584   		volt_region=1;
001614  f888a02f          STRB     r10,[r8,#0x2f]
;;;1585   		cntrl_stat=0;
001618  f8a86032          STRH     r6,[r8,#0x32]
;;;1586   		cntrl_stat_new=0;
00161c  f8a86048          STRH     r6,[r8,#0x48]
;;;1587   		cntrl_stat_old=0;
001620  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5668|
;;;1588   		}
;;;1589   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001624  2314              MOVS     r3,#0x14
001626  2200              MOVS     r2,#0
001628  2164              MOVS     r1,#0x64
00162a  20d2              MOVS     r0,#0xd2
00162c  f7fffffe          BL       mess_send
                  |L1.5680|
;;;1590   	}
;;;1591   
;;;1592   if(vz1_stat==vz1sWRK)
001630  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001634  280a              CMP      r0,#0xa
001636  d10b              BNE      |L1.5712|
;;;1593   	{
;;;1594   	if(vz1_stat_old!=vz1_stat)
;;;1595   		{
;;;1596   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
001638  4906              LDR      r1,|L1.5716|
00163a  f8980006          LDRB     r0,[r8,#6]            ;1594  ; vz1_stat_old
00163e  3180              ADDS     r1,r1,#0x80
001640  280a              CMP      r0,#0xa               ;1594
001642  d006              BEQ      |L1.5714|
001644  4843              LDR      r0,|L1.5972|
001646  f44f6261          MOV      r2,#0xe10
00164a  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00164e  e083              B        |L1.5976|
                  |L1.5712|
001650  e0f6              B        |L1.6208|
                  |L1.5714|
001652  e085              B        |L1.5984|
                  |L1.5716|
                          DCD      ||area_number.25||
                  |L1.5720|
                          DCD      Ib_ips_termokompensat
                  |L1.5724|
                          DCD      0xffff7360
                  |L1.5728|
                          DCD      0x40024000
                  |L1.5732|
                          DCD      AVZ
                  |L1.5736|
                          DCD      YEAR_AVZ
                  |L1.5740|
                          DCD      MONTH_AVZ
                  |L1.5744|
                          DCD      DATE_AVZ
                  |L1.5748|
                          DCD      HOUR_AVZ
                  |L1.5752|
                          DCD      MIN_AVZ
                  |L1.5756|
                          DCD      SEC_AVZ
                  |L1.5760|
                          DCD      AVZ_TIME
                  |L1.5764|
                          DCD      sk_stat
                  |L1.5768|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5772|
                          DCD      0x40024020
                  |L1.5776|
001690  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001694  c2c5cdd2
001698  c8cbdfd6
00169c  c8df2121
0016a0  21202020
0016a4  00      
0016a5  00                DCB      0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0016ac  20cdc5c8
0016b0  d1cfd0c0
0016b4  c2cdc020
0016b8  20202020
0016bc  00      
0016bd  00                DCB      0
0016be  00                DCB      0
0016bf  00                DCB      0
                  |L1.5824|
0016c0  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0016c4  c7c0c1cb
0016c8  cecac8d0
0016cc  cec2c0cd
0016d0  20      
0016d1  20202000          DCB      "   ",0
0016d5  00                DCB      0
0016d6  00                DCB      0
0016d7  00                DCB      0
                  |L1.5848|
0016d8  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0016dc  c2cdc8c2
0016e0  c0ded9c8
0016e4  c920c7  
0016e7  c0d0dfc4          DCB      192,208,223,196," ",0
0016eb  2000    
0016ed  00                DCB      0
0016ee  00                DCB      0
0016ef  00                DCB      0
                  |L1.5872|
                          DCD      speedChrgBlckStat
                  |L1.5876|
0016f4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0016f8  cdc0cfd0
0016fc  dfc6c5cd
001700  c8df2020
001704  20202020
001708  00      
001709  00                DCB      0
00170a  00                DCB      0
00170b  00                DCB      0
                  |L1.5900|
00170c  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
001710  20c2dbd1
001714  cecacec3
001718  ce202020
00171c  20202020
001720  00      
001721  00                DCB      0
001722  00                DCB      0
001723  00                DCB      0
                  |L1.5924|
001724  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001728  2020d2d3
00172c  ccc1cbc5
001730  d0202020
001734  20202020
001738  00      
001739  00                DCB      0
00173a  00                DCB      0
00173b  00                DCB      0
                  |L1.5948|
00173c  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001740  20c2cacb
001744  ded7c8d2
001748  c5202020
00174c  20202020
001750  00      
001751  00                DCB      0
001752  00                DCB      0
001753  00                DCB      0
                  |L1.5972|
                          DCD      UZ_T
                  |L1.5976|
001758  fb00f002          MUL      r0,r0,r2
00175c  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1597   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1598   		vz1_up_cnt=0L;
00175e  644e              STR      r6,[r1,#0x44]  ; vz1_up_cnt
                  |L1.5984|
;;;1599   
;;;1600   		}
;;;1601   	vz1_wrk_cnt--;
001760  6c08              LDR      r0,[r1,#0x40]  ; vz1_wrk_cnt
001762  f1a00001          SUB      r0,r0,#1
001766  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1602   	vz1_up_cnt++;
001768  6c4a              LDR      r2,[r1,#0x44]  ; vz1_up_cnt
00176a  f1020201          ADD      r2,r2,#1
00176e  644a              STR      r2,[r1,#0x44]  ; vz1_up_cnt
;;;1603   
;;;1604   	if(vz1_wrk_cnt==0)
001770  b940              CBNZ     r0,|L1.6020|
;;;1605   		{
;;;1606   		vz1_stat=vz1sFINE;
001772  f8889005          STRB     r9,[r8,#5]
;;;1607   		lc640_write(EE_VZ1_STAT,vz1sFINE);
001776  210f              MOVS     r1,#0xf
001778  4658              MOV      r0,r11
00177a  f7fffffe          BL       lc640_write
;;;1608   		uz_mem_hndl(0);
00177e  2000              MOVS     r0,#0
001780  f7fffffe          BL       uz_mem_hndl
                  |L1.6020|
;;;1609   		}
;;;1610   	if(sk_stat[0]==0)
001784  7828              LDRB     r0,[r5,#0]  ; sk_stat
001786  b938              CBNZ     r0,|L1.6040|
;;;1611   		{
;;;1612   		vz1_stat=vz1sERR2;
001788  f04f000c          MOV      r0,#0xc
00178c  f8880005          STRB     r0,[r8,#5]
;;;1613   		lc640_write(EE_VZ1_STAT,vz1sERR2);
001790  4601              MOV      r1,r0
001792  4658              MOV      r0,r11
001794  f7fffffe          BL       lc640_write
                  |L1.6040|
;;;1614   		}
;;;1615   	if(sk_stat[1]==0)
001798  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179a  b938              CBNZ     r0,|L1.6060|
;;;1616   		{
;;;1617   		vz1_stat=vz1sERR3;
00179c  f04f000d          MOV      r0,#0xd
0017a0  f8880005          STRB     r0,[r8,#5]
;;;1618   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0017a4  4601              MOV      r1,r0
0017a6  4658              MOV      r0,r11
0017a8  f7fffffe          BL       lc640_write
                  |L1.6060|
;;;1619   		}
;;;1620   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0017ac  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0017b0  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
0017b4  fb90f0f4          SDIV     r0,r0,r4
;;;1621   		{
;;;1622   		volt_region=0;
;;;1623   		cntrl_stat=1000;
0017b8  f44f727a          MOV      r2,#0x3e8
0017bc  4288              CMP      r0,r1                 ;1620
0017be  dd16              BLE      |L1.6126|
0017c0  f9b83032          LDRSH    r3,[r8,#0x32]         ;1620  ; cntrl_stat
0017c4  2b14              CMP      r3,#0x14              ;1620
0017c6  dc12              BGT      |L1.6126|
0017c8  f898302f          LDRB     r3,[r8,#0x2f]         ;1620  ; volt_region
0017cc  2b01              CMP      r3,#1                 ;1620
0017ce  d10e              BNE      |L1.6126|
0017d0  f8b83078          LDRH     r3,[r8,#0x78]         ;1620  ; volt_region_cnt
0017d4  b95b              CBNZ     r3,|L1.6126|
0017d6  f888602f          STRB     r6,[r8,#0x2f]         ;1622
0017da  f8a82032          STRH     r2,[r8,#0x32]
;;;1624   		cntrl_stat_new=1000;
0017de  f8a82048          STRH     r2,[r8,#0x48]
;;;1625   		cntrl_stat_old=1000;
0017e2  f8a82034          STRH     r2,[r8,#0x34]
;;;1626   		volt_region_cnt=110;
0017e6  f04f036e          MOV      r3,#0x6e
0017ea  f8a83078          STRH     r3,[r8,#0x78]
                  |L1.6126|
;;;1627   		}
;;;1628   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
0017ee  4288              CMP      r0,r1
0017f0  da13              BGE      |L1.6170|
0017f2  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
0017f6  4290              CMP      r0,r2
0017f8  db0f              BLT      |L1.6170|
0017fa  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0017fe  b960              CBNZ     r0,|L1.6170|
001800  f8b80078          LDRH     r0,[r8,#0x78]  ; volt_region_cnt
001804  b948              CBNZ     r0,|L1.6170|
;;;1629   		{
;;;1630   		volt_region=1;
001806  f888a02f          STRB     r10,[r8,#0x2f]
;;;1631   		cntrl_stat=10;
00180a  f8a84032          STRH     r4,[r8,#0x32]
;;;1632   		cntrl_stat_new=10;
00180e  f8a84048          STRH     r4,[r8,#0x48]
;;;1633   		cntrl_stat_old=10;
001812  f8a84034          STRH     r4,[r8,#0x34]
;;;1634   		volt_region_cnt=10;
001816  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6170|
;;;1635   		}
;;;1636   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00181a  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
00181e  b110              CBZ      r0,|L1.6182|
;;;1637   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001820  2801              CMP      r0,#1
001822  d007              BEQ      |L1.6196|
001824  e00c              B        |L1.6208|
                  |L1.6182|
001826  2314              MOVS     r3,#0x14              ;1636
001828  2200              MOVS     r2,#0                 ;1636
00182a  2164              MOVS     r1,#0x64              ;1636
00182c  20d2              MOVS     r0,#0xd2              ;1636
00182e  f7fffffe          BL       mess_send
001832  e005              B        |L1.6208|
                  |L1.6196|
001834  2314              MOVS     r3,#0x14
001836  2201              MOVS     r2,#1
001838  2164              MOVS     r1,#0x64
00183a  20d2              MOVS     r0,#0xd2
00183c  f7fffffe          BL       mess_send
                  |L1.6208|
;;;1638   	}
;;;1639   
;;;1640   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001840  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001844  280b              CMP      r0,#0xb
001846  d120              BNE      |L1.6282|
;;;1641   	{
;;;1642   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001848  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00184c  280b              CMP      r0,#0xb
00184e  d102              BNE      |L1.6230|
001850  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001854  b908              CBNZ     r0,|L1.6234|
                  |L1.6230|
;;;1643   		{
;;;1644   		vz1_stat_cnt=10;
001856  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6234|
;;;1645   		}
;;;1646   	vz1_stat_cnt--;
00185a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00185e  f1a00001          SUB      r0,r0,#1
001862  b200              SXTH     r0,r0
001864  f8a80076          STRH     r0,[r8,#0x76]
;;;1647   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001868  280a              CMP      r0,#0xa
00186a  d001              BEQ      |L1.6256|
00186c  2809              CMP      r0,#9
00186e  d106              BNE      |L1.6270|
                  |L1.6256|
;;;1648   		{
;;;1649   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001870  a3ee              ADR      r3,|L1.7212|
001872  a2f4              ADR      r2,|L1.7236|
001874  a1f9              ADR      r1,|L1.7260|
001876  a0ff              ADR      r0,|L1.7284|
001878  9700              STR      r7,[sp,#0]
00187a  f7fffffe          BL       show_mess
                  |L1.6270|
;;;1650   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1651   					"      ВКЛЮЧЕН       ",
;;;1652   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1653   					5000);
;;;1654   		}
;;;1655   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00187e  2314              MOVS     r3,#0x14
001880  2200              MOVS     r2,#0
001882  2164              MOVS     r1,#0x64
001884  20d2              MOVS     r0,#0xd2
001886  f7fffffe          BL       mess_send
                  |L1.6282|
;;;1656   	}
;;;1657   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00188a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00188e  280c              CMP      r0,#0xc
001890  d12c              BNE      |L1.6380|
;;;1658   	{
;;;1659   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001892  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001896  280c              CMP      r0,#0xc
001898  d102              BNE      |L1.6304|
00189a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00189e  b908              CBNZ     r0,|L1.6308|
                  |L1.6304|
;;;1660   		{
;;;1661   		vz1_stat_cnt=10;
0018a0  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6308|
;;;1662   		}
;;;1663   	vz1_stat_cnt--;
0018a4  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
0018a8  f1a00001          SUB      r0,r0,#1
0018ac  b200              SXTH     r0,r0
0018ae  f8a80076          STRH     r0,[r8,#0x76]
;;;1664   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018b2  280a              CMP      r0,#0xa
0018b4  d001              BEQ      |L1.6330|
0018b6  2809              CMP      r0,#9
0018b8  d109              BNE      |L1.6350|
                  |L1.6330|
;;;1665   		{
;;;1666   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018ba  f2af232c          ADR      r3,|L1.5776|
0018be  f2af2218          ADR      r2,|L1.5800|
0018c2  f2af2104          ADR      r1,|L1.5824|
0018c6  a0eb              ADR      r0,|L1.7284|
0018c8  9700              STR      r7,[sp,#0]
0018ca  f7fffffe          BL       show_mess
                  |L1.6350|
;;;1667   					"    ЗАБЛОКИРОВАН    ",
;;;1668   					"     НЕИСПРАВНА     ",
;;;1669   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1670   					5000);
;;;1671   		}
;;;1672   	if(sk_stat[0]==1)
0018ce  7828              LDRB     r0,[r5,#0]  ; sk_stat
0018d0  2801              CMP      r0,#1
0018d2  d105              BNE      |L1.6368|
;;;1673   		{
;;;1674   		vz1_stat=vz1sWRK;
0018d4  f8884005          STRB     r4,[r8,#5]
;;;1675   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0018d8  210a              MOVS     r1,#0xa
0018da  4658              MOV      r0,r11
0018dc  f7fffffe          BL       lc640_write
                  |L1.6368|
;;;1676   		}
;;;1677   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0018e0  2314              MOVS     r3,#0x14
0018e2  2200              MOVS     r2,#0
0018e4  2164              MOVS     r1,#0x64
0018e6  20d2              MOVS     r0,#0xd2
0018e8  f7fffffe          BL       mess_send
                  |L1.6380|
;;;1678   	}
;;;1679   
;;;1680   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
0018ec  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018f0  280d              CMP      r0,#0xd
0018f2  d129              BNE      |L1.6472|
;;;1681   	{
;;;1682   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0018f4  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0018f8  280d              CMP      r0,#0xd
0018fa  d102              BNE      |L1.6402|
0018fc  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001900  b908              CBNZ     r0,|L1.6406|
                  |L1.6402|
;;;1683   		{
;;;1684   		vz1_stat_cnt=10;
001902  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6406|
;;;1685   		}
;;;1686   	vz1_stat_cnt--;
001906  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00190a  f1a00001          SUB      r0,r0,#1
00190e  b200              SXTH     r0,r0
001910  f8a80076          STRH     r0,[r8,#0x76]
;;;1687   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001914  280a              CMP      r0,#0xa
001916  d001              BEQ      |L1.6428|
001918  2809              CMP      r0,#9
00191a  d106              BNE      |L1.6442|
                  |L1.6428|
;;;1688   		{
;;;1689   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
00191c  a3db              ADR      r3,|L1.7308|
00191e  a2e1              ADR      r2,|L1.7332|
001920  a1e6              ADR      r1,|L1.7356|
001922  a0d4              ADR      r0,|L1.7284|
001924  9700              STR      r7,[sp,#0]
001926  f7fffffe          BL       show_mess
                  |L1.6442|
;;;1690   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1691   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1692   					"*   ТУМБЛЕРА!!!     ",
;;;1693   					5000);
;;;1694   		}
;;;1695   	if(sk_stat[1]==1)
00192a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00192c  2801              CMP      r0,#1
00192e  d105              BNE      |L1.6460|
;;;1696   		{
;;;1697   		vz1_stat=vz1sWRK;
001930  f8884005          STRB     r4,[r8,#5]
;;;1698   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001934  210a              MOVS     r1,#0xa
001936  4658              MOV      r0,r11
001938  f7fffffe          BL       lc640_write
                  |L1.6460|
;;;1699   		}
;;;1700   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00193c  2314              MOVS     r3,#0x14
00193e  2200              MOVS     r2,#0
001940  2164              MOVS     r1,#0x64
001942  20d2              MOVS     r0,#0xd2
001944  f7fffffe          BL       mess_send
                  |L1.6472|
;;;1701   	}
;;;1702   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001948  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00194c  280e              CMP      r0,#0xe
00194e  d12d              BNE      |L1.6572|
;;;1703   	{
;;;1704   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001950  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001954  280e              CMP      r0,#0xe
001956  d102              BNE      |L1.6494|
001958  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00195c  b908              CBNZ     r0,|L1.6498|
                  |L1.6494|
;;;1705   		{
;;;1706   		vz1_stat_cnt=10;
00195e  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6498|
;;;1707   		}
;;;1708   	vz1_stat_cnt--;
001962  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001966  f1a00001          SUB      r0,r0,#1
00196a  b200              SXTH     r0,r0
00196c  f8a80076          STRH     r0,[r8,#0x76]
;;;1709   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001970  280a              CMP      r0,#0xa
001972  d001              BEQ      |L1.6520|
001974  2809              CMP      r0,#9
001976  d109              BNE      |L1.6540|
                  |L1.6520|
;;;1710   		{
;;;1711   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
001978  f2af2388          ADR      r3,|L1.5876|
00197c  f2af2274          ADR      r2,|L1.5900|
001980  f2af2160          ADR      r1,|L1.5924|
001984  a0d3              ADR      r0,|L1.7380|
001986  9700              STR      r7,[sp,#0]
001988  f7fffffe          BL       show_mess
                  |L1.6540|
;;;1712   					"      ТУМБЛЕР       ",
;;;1713   					"     ВЫСОКОГО       ",
;;;1714   					"    НАПРЯЖЕНИЯ      ",
;;;1715   					5000);
;;;1716   		}
;;;1717   	if(sk_stat[1]==0)
00198c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00198e  b938              CBNZ     r0,|L1.6560|
;;;1718   		{
;;;1719   		vz1_stat=vz1sOFF;
001990  f8886005          STRB     r6,[r8,#5]
;;;1720   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001994  2100              MOVS     r1,#0
001996  4658              MOV      r0,r11
001998  f7fffffe          BL       lc640_write
;;;1721   		vz_stop();
00199c  f7fffffe          BL       vz_stop
                  |L1.6560|
;;;1722   
;;;1723   		}
;;;1724   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0019a0  2314              MOVS     r3,#0x14
0019a2  2201              MOVS     r2,#1
0019a4  2164              MOVS     r1,#0x64
0019a6  20d2              MOVS     r0,#0xd2
0019a8  f7fffffe          BL       mess_send
                  |L1.6572|
;;;1725   	}
;;;1726   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0019ac  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1727   	{
;;;1728   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1729   		{
;;;1730   		vz1_stat_cnt=10;
;;;1731   		}
;;;1732   	vz1_stat_cnt--;
;;;1733   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1734   		{
;;;1735   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0019b0  f64037b8          MOV      r7,#0xbb8
0019b4  280f              CMP      r0,#0xf               ;1726
0019b6  d138              BNE      |L1.6698|
0019b8  f8980006          LDRB     r0,[r8,#6]            ;1728  ; vz1_stat_old
0019bc  280f              CMP      r0,#0xf               ;1728
0019be  d102              BNE      |L1.6598|
0019c0  f8b80076          LDRH     r0,[r8,#0x76]         ;1728  ; vz1_stat_cnt
0019c4  b908              CBNZ     r0,|L1.6602|
                  |L1.6598|
0019c6  f8a84076          STRH     r4,[r8,#0x76]         ;1730
                  |L1.6602|
0019ca  f8b80076          LDRH     r0,[r8,#0x76]         ;1732  ; vz1_stat_cnt
0019ce  f1a00001          SUB      r0,r0,#1              ;1732
0019d2  b200              SXTH     r0,r0                 ;1732
0019d4  f8a80076          STRH     r0,[r8,#0x76]         ;1732
0019d8  280a              CMP      r0,#0xa               ;1733
0019da  d001              BEQ      |L1.6624|
0019dc  2809              CMP      r0,#9                 ;1733
0019de  d106              BNE      |L1.6638|
                  |L1.6624|
0019e0  a3c2              ADR      r3,|L1.7404|
0019e2  a2c8              ADR      r2,|L1.7428|
0019e4  a1cd              ADR      r1,|L1.7452|
0019e6  a0d3              ADR      r0,|L1.7476|
0019e8  9700              STR      r7,[sp,#0]
0019ea  f7fffffe          BL       show_mess
                  |L1.6638|
;;;1736   					"       ЗАРЯД        ",
;;;1737   					"      УСПЕШНО       ",
;;;1738   					"     ЗАВЕРШЕН       ",
;;;1739   					3000);
;;;1740   		}
;;;1741   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0019ee  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
0019f2  2806              CMP      r0,#6
0019f4  d001              BEQ      |L1.6650|
0019f6  2805              CMP      r0,#5
0019f8  d109              BNE      |L1.6670|
                  |L1.6650|
;;;1742   		{
;;;1743   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0019fa  f2af3308          ADR      r3,|L1.5876|
0019fe  f2af22f4          ADR      r2,|L1.5900|
001a02  f2af21e0          ADR      r1,|L1.5924|
001a06  a0d1              ADR      r0,|L1.7500|
001a08  9700              STR      r7,[sp,#0]
001a0a  f7fffffe          BL       show_mess
                  |L1.6670|
;;;1744   					"      ТУМБЛЕР       ",
;;;1745   					"     ВЫСОКОГО       ",
;;;1746   					"    НАПРЯЖЕНИЯ      ",
;;;1747   					3000);
;;;1748   		}
;;;1749   	if(sk_stat[1]==0)
001a0e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a10  b928              CBNZ     r0,|L1.6686|
;;;1750   		{
;;;1751   		vz1_stat=vz1sOFF;
001a12  f8886005          STRB     r6,[r8,#5]
;;;1752   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a16  2100              MOVS     r1,#0
001a18  4658              MOV      r0,r11
001a1a  f7fffffe          BL       lc640_write
                  |L1.6686|
;;;1753   		}
;;;1754   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a1e  2314              MOVS     r3,#0x14
001a20  2200              MOVS     r2,#0
001a22  2164              MOVS     r1,#0x64
001a24  20d2              MOVS     r0,#0xd2
001a26  f7fffffe          BL       mess_send
                  |L1.6698|
;;;1755   	}
;;;1756   
;;;1757   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001a2a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a2e  2810              CMP      r0,#0x10
001a30  d138              BNE      |L1.6820|
;;;1758   	{
;;;1759   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a32  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a36  2810              CMP      r0,#0x10
001a38  d102              BNE      |L1.6720|
001a3a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a3e  b908              CBNZ     r0,|L1.6724|
                  |L1.6720|
;;;1760   		{
;;;1761   		vz1_stat_cnt=10;
001a40  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6724|
;;;1762   		}
;;;1763   	vz1_stat_cnt--;
001a44  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a48  f1a00001          SUB      r0,r0,#1
001a4c  b200              SXTH     r0,r0
001a4e  f8a80076          STRH     r0,[r8,#0x76]
;;;1764   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a52  280a              CMP      r0,#0xa
001a54  d001              BEQ      |L1.6746|
001a56  2809              CMP      r0,#9
001a58  d106              BNE      |L1.6760|
                  |L1.6746|
;;;1765   		{
;;;1766   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001a5a  a3c2              ADR      r3,|L1.7524|
001a5c  a2c7              ADR      r2,|L1.7548|
001a5e  a1af              ADR      r1,|L1.7452|
001a60  a0b4              ADR      r0,|L1.7476|
001a62  9700              STR      r7,[sp,#0]
001a64  f7fffffe          BL       show_mess
                  |L1.6760|
;;;1767   					"       ЗАРЯД        ",
;;;1768   					"     ПРЕКРАЩЕН      ",
;;;1769   					"                    ",
;;;1770   					3000);
;;;1771   		}
;;;1772   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001a68  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
001a6c  2806              CMP      r0,#6
001a6e  d001              BEQ      |L1.6772|
001a70  2805              CMP      r0,#5
001a72  d109              BNE      |L1.6792|
                  |L1.6772|
;;;1773   		{
;;;1774   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001a74  f2af3384          ADR      r3,|L1.5876|
001a78  f2af3270          ADR      r2,|L1.5900|
001a7c  f2af315c          ADR      r1,|L1.5924|
001a80  a0b2              ADR      r0,|L1.7500|
001a82  9700              STR      r7,[sp,#0]
001a84  f7fffffe          BL       show_mess
                  |L1.6792|
;;;1775   					"      ТУМБЛЕР       ",
;;;1776   					"     ВЫСОКОГО       ",
;;;1777   					"    НАПРЯЖЕНИЯ      ",
;;;1778   					3000);
;;;1779   		}
;;;1780   	if(sk_stat[1]==0)
001a88  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a8a  b928              CBNZ     r0,|L1.6808|
;;;1781   		{
;;;1782   		vz1_stat=vz1sOFF;
001a8c  f8886005          STRB     r6,[r8,#5]
;;;1783   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a90  2100              MOVS     r1,#0
001a92  4658              MOV      r0,r11
001a94  f7fffffe          BL       lc640_write
                  |L1.6808|
;;;1784   		}
;;;1785   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a98  2314              MOVS     r3,#0x14
001a9a  2200              MOVS     r2,#0
001a9c  2164              MOVS     r1,#0x64
001a9e  20d2              MOVS     r0,#0xd2
001aa0  f7fffffe          BL       mess_send
                  |L1.6820|
;;;1786   	}
;;;1787   
;;;1788   vz1_stat_old=vz1_stat;
001aa4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001aa8  f8880006          STRB     r0,[r8,#6]
;;;1789   
;;;1790   
;;;1791   
;;;1792   }
001aac  e8bd8ff8          POP      {r3-r11,pc}
;;;1793   
                          ENDP

                  vz1_start PROC
;;;1795   //старт уравнительног заряда
;;;1796   char vz1_start(char hour)
001ab0  b510              PUSH     {r4,lr}
;;;1797   {          
;;;1798   char out;
;;;1799   out=0;
001ab2  f04f0000          MOV      r0,#0
;;;1800   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001ab6  49b7              LDR      r1,|L1.7572|
001ab8  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001abc  2a00              CMP      r2,#0
001abe  d110              BNE      |L1.6882|
001ac0  4ab5              LDR      r2,|L1.7576|
001ac2  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001ac4  2a01              CMP      r2,#1
001ac6  d00c              BEQ      |L1.6882|
001ac8  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001aca  2a00              CMP      r2,#0
001acc  d109              BNE      |L1.6882|
;;;1801   	{
;;;1802   	if(vz1_stat==vz1sOFF)
;;;1803   		{
;;;1804   		vz1_stat=vz1sSTEP1;
001ace  f04f0001          MOV      r0,#1
001ad2  7148              STRB     r0,[r1,#5]
;;;1805   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001ad4  4601              MOV      r1,r0
001ad6  f44f70c9          MOV      r0,#0x192
001ada  f7fffffe          BL       lc640_write
;;;1806   		out=1;
001ade  f04f0001          MOV      r0,#1
                  |L1.6882|
;;;1807   		
;;;1808   		}
;;;1809   /*	spc_stat=spcVZ;
;;;1810   	__ee_spc_stat=spcVZ; 
;;;1811   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1812   	vz_cnt_h=hour;
;;;1813   	__ee_vz_cnt=hour*60;
;;;1814   	if(hour==0)__ee_vz_cnt=30;
;;;1815   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1816   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1817   	vz_cnt_h_=0;
;;;1818   	vz_cnt_s=0;
;;;1819   	vz_cnt_s_=0;
;;;1820   	
;;;1821   		*/
;;;1822   	}
;;;1823   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1824   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1825   //plazma=out;	
;;;1826   return out;
;;;1827   }
001ae2  bd10              POP      {r4,pc}
;;;1828   
                          ENDP

                  vz1_stop PROC
;;;1830   //стоп уравнительног заряда
;;;1831   void vz1_stop(void)
001ae4  48ab              LDR      r0,|L1.7572|
;;;1832   {
;;;1833   if(vz1_stat!=vz1sOFF)
001ae6  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001ae8  2900              CMP      r1,#0
001aea  d006              BEQ      |L1.6906|
;;;1834   	{
;;;1835   	vz1_stat=vz1sSTOP;
001aec  f04f0110          MOV      r1,#0x10
001af0  7141              STRB     r1,[r0,#5]
;;;1836   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001af2  f44f70c9          MOV      r0,#0x192
001af6  f7ffbffe          B.W      lc640_write
                  |L1.6906|
;;;1837   	}
;;;1838   }
001afa  4770              BX       lr
;;;1839   
                          ENDP

                  vz2_drv PROC
;;;1841   //драйвер формовочного заряда
;;;1842   void vz2_drv(void)
001afc  e92d4ff8          PUSH     {r3-r11,lr}
;;;1843   {
;;;1844   
;;;1845   if(vz2_stat==vz2sSTEP1)
001b00  4ea4              LDR      r6,|L1.7572|
;;;1846   	{
;;;1847   	if(vz2_stat_old!=vz2_stat)
;;;1848   		{
;;;1849   		vz2_stat_cnt=5;
;;;1850   		}
;;;1851   	if(vz2_stat_cnt)
;;;1852   		{
;;;1853   		vz2_stat_cnt--;
;;;1854   		if(vz2_stat_cnt==0)
;;;1855   			{
;;;1856   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1857   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1858   			}
;;;1859   		}
;;;1860   	if(sk_stat[0]==1)
001b02  4da6              LDR      r5,|L1.7580|
001b04  79f0              LDRB     r0,[r6,#7]            ;1845  ; vz2_stat
001b06  2801              CMP      r0,#1                 ;1845
001b08  d138              BNE      |L1.7036|
001b0a  7a30              LDRB     r0,[r6,#8]            ;1847  ; vz2_stat_old
001b0c  2801              CMP      r0,#1                 ;1847
001b0e  d003              BEQ      |L1.6936|
001b10  f04f0005          MOV      r0,#5                 ;1849
001b14  f8a6007a          STRH     r0,[r6,#0x7a]         ;1849
                  |L1.6936|
001b18  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1851  ; vz2_stat_cnt
001b1c  b168              CBZ      r0,|L1.6970|
001b1e  f1a00001          SUB      r0,r0,#1              ;1853
001b22  b200              SXTH     r0,r0                 ;1853
001b24  f8a6007a          STRH     r0,[r6,#0x7a]         ;1853
001b28  b938              CBNZ     r0,|L1.6970|
001b2a  f04f000c          MOV      r0,#0xc               ;1856
001b2e  71f0              STRB     r0,[r6,#7]            ;1856
001b30  4601              MOV      r1,r0                 ;1857
001b32  f44f70ca          MOV      r0,#0x194             ;1857
001b36  f7fffffe          BL       lc640_write
                  |L1.6970|
001b3a  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b3c  2801              CMP      r0,#1
001b3e  d117              BNE      |L1.7024|
;;;1861   		{
;;;1862   		vz2_stat=vz2sSTEP2;
001b40  f04f0002          MOV      r0,#2
001b44  71f0              STRB     r0,[r6,#7]
;;;1863   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b46  4601              MOV      r1,r0
001b48  f44f70ca          MOV      r0,#0x194
001b4c  f7fffffe          BL       lc640_write
;;;1864   		tree_up(iVZ2_STEP2_2,1,0,0);
001b50  2300              MOVS     r3,#0
001b52  461a              MOV      r2,r3
001b54  2101              MOVS     r1,#1
001b56  20e3              MOVS     r0,#0xe3
001b58  f7fffffe          BL       tree_up
;;;1865   		tree_up(iVZ2_STEP2_1,0,0,0);
001b5c  2300              MOVS     r3,#0
001b5e  461a              MOV      r2,r3
001b60  4619              MOV      r1,r3
001b62  20e2              MOVS     r0,#0xe2
001b64  f7fffffe          BL       tree_up
;;;1866   		ret(1200);
001b68  f44f6096          MOV      r0,#0x4b0
001b6c  f7fffffe          BL       ||ret||
                  |L1.7024|
;;;1867   		}
;;;1868   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b70  2314              MOVS     r3,#0x14
001b72  2200              MOVS     r2,#0
001b74  2164              MOVS     r1,#0x64
001b76  20d2              MOVS     r0,#0xd2
001b78  f7fffffe          BL       mess_send
                  |L1.7036|
;;;1869   	}
;;;1870   
;;;1871   if(vz2_stat==vz2sSTEP2)
001b7c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001b7e  2802              CMP      r0,#2
001b80  d119              BNE      |L1.7094|
;;;1872   	{
;;;1873   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b82  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001b84  2802              CMP      r0,#2
001b86  d102              BNE      |L1.7054|
001b88  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b8c  b918              CBNZ     r0,|L1.7062|
                  |L1.7054|
;;;1874   		{
;;;1875   		vz2_stat_cnt=15;
001b8e  f04f000f          MOV      r0,#0xf
001b92  f8a6007a          STRH     r0,[r6,#0x7a]
                  |L1.7062|
;;;1876   		}
;;;1877   	vz2_stat_cnt--;
001b96  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b9a  f1a00001          SUB      r0,r0,#1
001b9e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;1878   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ba2  f04f0314          MOV      r3,#0x14
001ba6  f04f0200          MOV      r2,#0
001baa  f04f0164          MOV      r1,#0x64
001bae  f04f00d2          MOV      r0,#0xd2
001bb2  f7fffffe          BL       mess_send
                  |L1.7094|
;;;1879   	}
;;;1880   
;;;1881   if(vz2_stat==vz2sSTEP3)
001bb6  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1882   	{
;;;1883   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1884   		{
;;;1885   		vz2_stat_cnt=10;
001bb8  240a              MOVS     r4,#0xa
001bba  2700              MOVS     r7,#0
;;;1886   		cntrl_stat=0;
;;;1887   		cntrl_stat_new=0;
;;;1888   		cntrl_stat_old=0;
;;;1889   		}
;;;1890   	vz2_stat_cnt--;
;;;1891   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1892   		{
;;;1893   		show_mess(	"     ВКЛЮЧИТЕ       ",
001bbc  f2413888          MOV      r8,#0x1388
001bc0  2803              CMP      r0,#3                 ;1881
001bc2  d131              BNE      |L1.7208|
001bc4  7a30              LDRB     r0,[r6,#8]            ;1883  ; vz2_stat_old
001bc6  2803              CMP      r0,#3                 ;1883
001bc8  d102              BNE      |L1.7120|
001bca  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1883  ; vz2_stat_cnt
001bce  b928              CBNZ     r0,|L1.7132|
                  |L1.7120|
001bd0  f8a6407a          STRH     r4,[r6,#0x7a]         ;1885
001bd4  8677              STRH     r7,[r6,#0x32]         ;1886
001bd6  f8a67048          STRH     r7,[r6,#0x48]         ;1887
001bda  86b7              STRH     r7,[r6,#0x34]         ;1888
                  |L1.7132|
001bdc  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1890  ; vz2_stat_cnt
001be0  f1a00001          SUB      r0,r0,#1              ;1890
001be4  b200              SXTH     r0,r0                 ;1890
001be6  f8a6007a          STRH     r0,[r6,#0x7a]         ;1890
001bea  280a              CMP      r0,#0xa               ;1891
001bec  d001              BEQ      |L1.7154|
001bee  2809              CMP      r0,#9                 ;1891
001bf0  d10b              BNE      |L1.7178|
                  |L1.7154|
001bf2  f2af5300          ADR      r3,|L1.5876|
001bf6  f2af42ec          ADR      r2,|L1.5900|
001bfa  f2af41d8          ADR      r1,|L1.5924|
001bfe  f2af40c4          ADR      r0,|L1.5948|
001c02  f8cd8000          STR      r8,[sp,#0]
001c06  f7fffffe          BL       show_mess
                  |L1.7178|
;;;1894   					"      ТУМБЛЕР       ",
;;;1895   					"     ВЫСОКОГО       ",
;;;1896   					"    НАПРЯЖЕНИЯ      ",
;;;1897   					5000);
;;;1898   		}
;;;1899   	if(sk_stat[1]==1)
001c0a  7868              LDRB     r0,[r5,#1]  ; sk_stat
001c0c  2801              CMP      r0,#1
001c0e  d10c              BNE      |L1.7210|
;;;1900   		{
;;;1901   		vz2_stat=vz2sWRK1;
001c10  71f4              STRB     r4,[r6,#7]
;;;1902   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001c12  210a              MOVS     r1,#0xa
001c14  f44f70ca          MOV      r0,#0x194
001c18  f7fffffe          BL       lc640_write
;;;1903   		volt_region=1;
001c1c  f04f0001          MOV      r0,#1
001c20  f886002f          STRB     r0,[r6,#0x2f]
;;;1904   		cntrl_stat=0;
001c24  8677              STRH     r7,[r6,#0x32]
;;;1905   		cntrl_stat_new=0;
001c26  e0bb              B        |L1.7584|
                  |L1.7208|
001c28  e0c3              B        |L1.7602|
                  |L1.7210|
001c2a  e0bc              B        |L1.7590|
                  |L1.7212|
001c2c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001c30  c720c2c5
001c34  cdd2c8cb
001c38  dfd6c8  
001c3b  c8212120          DCB      200,"!!  ",0
001c3f  2000    
001c41  00                DCB      0
001c42  00                DCB      0
001c43  00                DCB      0
                  |L1.7236|
001c44  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001c48  2020c2ca
001c4c  cbded7c5
001c50  cd202020
001c54  20202020
001c58  00      
001c59  00                DCB      0
001c5a  00                DCB      0
001c5b  00                DCB      0
                  |L1.7260|
001c5c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001c60  c520ccce
001c64  c6c5d220
001c68  c1dbd2dc
001c6c  20202020          DCB      "    ",0
001c70  00      
001c71  00                DCB      0
001c72  00                DCB      0
001c73  00                DCB      0
                  |L1.7284|
001c74  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001c78  cdc8d2c5
001c7c  cbdccddb
001c80  c920c7  
001c83  c0d0dfc4          DCB      192,208,223,196," ",0
001c87  2000    
001c89  00                DCB      0
001c8a  00                DCB      0
001c8b  00                DCB      0
                  |L1.7308|
001c8c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001c90  d2d3ccc1
001c94  cbc5d0c0
001c98  21212120
001c9c  20202020
001ca0  00      
001ca1  00                DCB      0
001ca2  00                DCB      0
001ca3  00                DCB      0
                  |L1.7332|
001ca4  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001ca8  d1cbc520
001cac  c2cacbde
001cb0  d7c5cd  
001cb3  c8df2020          DCB      200,223,"   ",0
001cb7  2000    
001cb9  00                DCB      0
001cba  00                DCB      0
001cbb  00                DCB      0
                  |L1.7356|
001cbc  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001cc0  c4c5d220
001cc4  cfd0cec4
001cc8  cecbc6  
001ccb  c5cd2020          DCB      197,205,"   ",0
001ccf  2000    
001cd1  00                DCB      0
001cd2  00                DCB      0
001cd3  00                DCB      0
                  |L1.7380|
001cd4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001cd8  20c2dbca
001cdc  cbded7c8
001ce0  d2c52020
001ce4  20202020
001ce8  00      
001ce9  00                DCB      0
001cea  00                DCB      0
001ceb  00                DCB      0
                  |L1.7404|
001cec  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001cf0  20c7c0c2
001cf4  c5d0d8c5
001cf8  cd202020
001cfc  20202020
001d00  00      
001d01  00                DCB      0
001d02  00                DCB      0
001d03  00                DCB      0
                  |L1.7428|
001d04  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001d08  2020d3d1
001d0c  cfc5d8cd
001d10  ce202020
001d14  20202020
001d18  00      
001d19  00                DCB      0
001d1a  00                DCB      0
001d1b  00                DCB      0
                  |L1.7452|
001d1c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001d20  202020c7
001d24  c0d0dfc4
001d28  20202020
001d2c  20202020
001d30  00      
001d31  00                DCB      0
001d32  00                DCB      0
001d33  00                DCB      0
                  |L1.7476|
001d34  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001d38  d0c0c2cd
001d3c  c8d2c5cb
001d40  dccddbc9
001d44  20202020          DCB      "    ",0
001d48  00      
001d49  00                DCB      0
001d4a  00                DCB      0
001d4b  00                DCB      0
                  |L1.7500|
001d4c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001d50  20c2dbca
001d54  cbded7c8
001d58  d2c52020
001d5c  20202020
001d60  00      
001d61  00                DCB      0
001d62  00                DCB      0
001d63  00                DCB      0
                  |L1.7524|
001d64  20202020          DCB      "                    ",0
001d68  20202020
001d6c  20202020
001d70  20202020
001d74  20202020
001d78  00      
001d79  00                DCB      0
001d7a  00                DCB      0
001d7b  00                DCB      0
                  |L1.7548|
001d7c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001d80  20cfd0c5
001d84  cad0c0d9
001d88  c5cd2020
001d8c  20202020
001d90  00      
001d91  00                DCB      0
001d92  00                DCB      0
001d93  00                DCB      0
                  |L1.7572|
                          DCD      ||area_number.25||
                  |L1.7576|
                          DCD      speedChrgBlckStat
                  |L1.7580|
                          DCD      sk_stat
                  |L1.7584|
001da0  f8a67048          STRH     r7,[r6,#0x48]
;;;1906   		cntrl_stat_old=0;
001da4  86b7              STRH     r7,[r6,#0x34]
                  |L1.7590|
;;;1907   		}
;;;1908   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001da6  2314              MOVS     r3,#0x14
001da8  2200              MOVS     r2,#0
001daa  2164              MOVS     r1,#0x64
001dac  20d2              MOVS     r0,#0xd2
001dae  f7fffffe          BL       mess_send
                  |L1.7602|
;;;1909   	}
;;;1910   
;;;1911   if(vz2_stat==vz2sWRK1)
001db2  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1912   	{
;;;1913   
;;;1914   	if(vz2_stat_old!=vz2_stat)
;;;1915   		{
;;;1916   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001db4  f8df940c          LDR      r9,|L1.8644|
;;;1917   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1918   		vz2_up_cnt=0L;
;;;1919   
;;;1920   		}
;;;1921   	vz2_wrk_cnt--;
;;;1922   	vz2_up_cnt++;
;;;1923   
;;;1924   	if(vz2_wrk_cnt==0)
;;;1925   		{
;;;1926   		vz2_stat=vz2sWRK2;
;;;1927   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1928   		}
;;;1929   	if(sk_stat[0]==0)
;;;1930   		{
;;;1931   		vz2_stat=vz2sERR2;
;;;1932   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1933   		}
;;;1934   	if(sk_stat[1]==0)
;;;1935   		{
;;;1936   		vz2_stat=vz2sERR3;
;;;1937   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1938   		}
;;;1939   	//if(abs(out_U-FZ_U1)<10)
;;;1940   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1941   		{
;;;1942   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1943   			{
;;;1944   			if(vz2_stat_ph2_cnt)
;;;1945   				{
;;;1946   				vz2_stat_ph2_cnt--;
;;;1947   				if(vz2_stat_ph2_cnt==0)
;;;1948   					{
;;;1949   					vz2_stat=vz2sWRK2;
;;;1950   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1951   					}
;;;1952   				}
;;;1953   			}
;;;1954   		else
;;;1955   			{
;;;1956   			vz2_stat_ph2_cnt=60;
;;;1957   			}
;;;1958   		}
;;;1959   	else
;;;1960   		{
;;;1961   		vz2_stat_ph2_cnt=60;
;;;1962   		}
;;;1963   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1964   		{
;;;1965   		volt_region=0;
;;;1966   		cntrl_stat=1000;
001db8  f44f7b7a          MOV      r11,#0x3e8
001dbc  f04f0a0b          MOV      r10,#0xb              ;1926
001dc0  280a              CMP      r0,#0xa               ;1911
001dc2  d17d              BNE      |L1.7872|
001dc4  7a30              LDRB     r0,[r6,#8]            ;1914  ; vz2_stat_old
001dc6  280a              CMP      r0,#0xa               ;1914
001dc8  d00a              BEQ      |L1.7648|
001dca  48ff              LDR      r0,|L1.8648|
001dcc  f44f6161          MOV      r1,#0xe10             ;1916
001dd0  f9b00000          LDRSH    r0,[r0,#0]            ;1916  ; FZ_T1
001dd4  fb00f001          MUL      r0,r0,r1              ;1916
001dd8  f8c90048          STR      r0,[r9,#0x48]         ;1916  ; vz2_wrk_cnt
001ddc  f8c9704c          STR      r7,[r9,#0x4c]         ;1918  ; vz2_up_cnt
                  |L1.7648|
001de0  f8d90048          LDR      r0,[r9,#0x48]         ;1921  ; vz2_wrk_cnt
001de4  f1a00001          SUB      r0,r0,#1              ;1921
001de8  f8c90048          STR      r0,[r9,#0x48]         ;1921  ; vz2_wrk_cnt
001dec  f8d9104c          LDR      r1,[r9,#0x4c]         ;1922  ; vz2_up_cnt
001df0  f1010101          ADD      r1,r1,#1              ;1922
001df4  f8c9104c          STR      r1,[r9,#0x4c]         ;1922  ; vz2_up_cnt
001df8  b930              CBNZ     r0,|L1.7688|
001dfa  f886a007          STRB     r10,[r6,#7]           ;1926
001dfe  210b              MOVS     r1,#0xb               ;1927
001e00  f44f70ca          MOV      r0,#0x194             ;1927
001e04  f7fffffe          BL       lc640_write
                  |L1.7688|
001e08  7828              LDRB     r0,[r5,#0]            ;1929  ; sk_stat
001e0a  b938              CBNZ     r0,|L1.7708|
001e0c  f04f000d          MOV      r0,#0xd               ;1931
001e10  71f0              STRB     r0,[r6,#7]            ;1931
001e12  4601              MOV      r1,r0                 ;1932
001e14  f44f70ca          MOV      r0,#0x194             ;1932
001e18  f7fffffe          BL       lc640_write
                  |L1.7708|
001e1c  7868              LDRB     r0,[r5,#1]            ;1934  ; sk_stat
001e1e  b938              CBNZ     r0,|L1.7728|
001e20  f04f000e          MOV      r0,#0xe               ;1936
001e24  71f0              STRB     r0,[r6,#7]            ;1936
001e26  4601              MOV      r1,r0                 ;1937
001e28  f44f70ca          MOV      r0,#0x194             ;1937
001e2c  f7fffffe          BL       lc640_write
                  |L1.7728|
001e30  48e6              LDR      r0,|L1.8652|
001e32  223c              MOVS     r2,#0x3c              ;1956
001e34  f9b01000          LDRSH    r1,[r0,#0]            ;1940  ; out_U
001e38  48e5              LDR      r0,|L1.8656|
001e3a  f9b00000          LDRSH    r0,[r0,#0]            ;1940  ; FZ_U1
001e3e  f100031e          ADD      r3,r0,#0x1e           ;1940
001e42  4299              CMP      r1,r3                 ;1940
001e44  da20              BGE      |L1.7816|
001e46  380a              SUBS     r0,r0,#0xa            ;1940
001e48  4281              CMP      r1,r0                 ;1940
001e4a  dd1d              BLE      |L1.7816|
001e4c  48e1              LDR      r0,|L1.8660|
001e4e  49e2              LDR      r1,|L1.8664|
001e50  f9b00000          LDRSH    r0,[r0,#0]            ;1942  ; Ib_ips_termokompensat
001e54  f9b11000          LDRSH    r1,[r1,#0]            ;1942  ; FZ_ISW12
001e58  fb90f0f4          SDIV     r0,r0,r4              ;1942
001e5c  4288              CMP      r0,r1                 ;1942
001e5e  da10              BGE      |L1.7810|
001e60  f9b6007c          LDRSH    r0,[r6,#0x7c]         ;1944  ; vz2_stat_ph2_cnt
001e64  b190              CBZ      r0,|L1.7820|
001e66  f1a00001          SUB      r0,r0,#1              ;1946
001e6a  b200              SXTH     r0,r0                 ;1946
001e6c  f8a6007c          STRH     r0,[r6,#0x7c]         ;1946
001e70  b960              CBNZ     r0,|L1.7820|
001e72  f886a007          STRB     r10,[r6,#7]           ;1949
001e76  210b              MOVS     r1,#0xb               ;1950
001e78  f44f70ca          MOV      r0,#0x194             ;1950
001e7c  f7fffffe          BL       lc640_write
001e80  e004              B        |L1.7820|
                  |L1.7810|
001e82  f8a6207c          STRH     r2,[r6,#0x7c]         ;1956
001e86  e001              B        |L1.7820|
                  |L1.7816|
001e88  f8a6207c          STRH     r2,[r6,#0x7c]         ;1961
                  |L1.7820|
001e8c  f9b6004a          LDRSH    r0,[r6,#0x4a]         ;1963  ; Ibmax
001e90  f8b6104c          LDRH     r1,[r6,#0x4c]         ;1963  ; IZMAX_
001e94  fb90f0f4          SDIV     r0,r0,r4              ;1963
001e98  4288              CMP      r0,r1                 ;1963
001e9a  dd18              BLE      |L1.7886|
001e9c  f9b62032          LDRSH    r2,[r6,#0x32]         ;1963  ; cntrl_stat
001ea0  2a14              CMP      r2,#0x14              ;1963
001ea2  dc14              BGT      |L1.7886|
001ea4  f896202f          LDRB     r2,[r6,#0x2f]         ;1963  ; volt_region
001ea8  2a01              CMP      r2,#1                 ;1963
001eaa  d110              BNE      |L1.7886|
001eac  f8b62078          LDRH     r2,[r6,#0x78]         ;1963  ; volt_region_cnt
001eb0  b96a              CBNZ     r2,|L1.7886|
001eb2  f886702f          STRB     r7,[r6,#0x2f]         ;1965
001eb6  f8a6b032          STRH     r11,[r6,#0x32]
;;;1967   		cntrl_stat_new=1000;
001eba  f8a6b048          STRH     r11,[r6,#0x48]
;;;1968   		cntrl_stat_old=1000;
001ebe  e000              B        |L1.7874|
                  |L1.7872|
001ec0  e02e              B        |L1.7968|
                  |L1.7874|
001ec2  f8a6b034          STRH     r11,[r6,#0x34]
;;;1969   		volt_region_cnt=110;
001ec6  f04f026e          MOV      r2,#0x6e
001eca  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.7886|
;;;1970   		}
;;;1971   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001ece  4288              CMP      r0,r1
001ed0  da13              BGE      |L1.7930|
001ed2  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001ed6  4558              CMP      r0,r11
001ed8  db0f              BLT      |L1.7930|
001eda  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ede  b960              CBNZ     r0,|L1.7930|
001ee0  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001ee4  b948              CBNZ     r0,|L1.7930|
;;;1972   		{
;;;1973   		volt_region=1;
001ee6  f04f0001          MOV      r0,#1
001eea  f886002f          STRB     r0,[r6,#0x2f]
;;;1974   		cntrl_stat=10;
001eee  8674              STRH     r4,[r6,#0x32]
;;;1975   		cntrl_stat_new=10;
001ef0  f8a64048          STRH     r4,[r6,#0x48]
;;;1976   		cntrl_stat_old=10;
001ef4  86b4              STRH     r4,[r6,#0x34]
;;;1977   		volt_region_cnt=10;
001ef6  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.7930|
;;;1978   		}
;;;1979   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001efa  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001efe  b110              CBZ      r0,|L1.7942|
;;;1980   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001f00  2801              CMP      r0,#1
001f02  d007              BEQ      |L1.7956|
001f04  e00c              B        |L1.7968|
                  |L1.7942|
001f06  2314              MOVS     r3,#0x14              ;1979
001f08  2200              MOVS     r2,#0                 ;1979
001f0a  2164              MOVS     r1,#0x64              ;1979
001f0c  20d2              MOVS     r0,#0xd2              ;1979
001f0e  f7fffffe          BL       mess_send
001f12  e005              B        |L1.7968|
                  |L1.7956|
001f14  2314              MOVS     r3,#0x14
001f16  2201              MOVS     r2,#1
001f18  2164              MOVS     r1,#0x64
001f1a  20d2              MOVS     r0,#0xd2
001f1c  f7fffffe          BL       mess_send
                  |L1.7968|
;;;1981   	}
;;;1982   
;;;1983   if(vz2_stat==vz2sWRK2)
001f20  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001f22  280b              CMP      r0,#0xb
001f24  d17f              BNE      |L1.8230|
;;;1984   	{
;;;1985   	if(vz2_stat_old!=vz2_stat)
001f26  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f28  280b              CMP      r0,#0xb
001f2a  d008              BEQ      |L1.7998|
;;;1986   		{
;;;1987   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001f2c  48ab              LDR      r0,|L1.8668|
001f2e  f44f6161          MOV      r1,#0xe10
001f32  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001f36  fb00f001          MUL      r0,r0,r1
001f3a  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
                  |L1.7998|
;;;1988   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1989   		//vz2_up_cnt=0L;
;;;1990   		}
;;;1991   	vz2_wrk_cnt--;
001f3e  f8d90048          LDR      r0,[r9,#0x48]  ; vz2_wrk_cnt
001f42  f1a00001          SUB      r0,r0,#1
001f46  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
;;;1992   	vz2_up_cnt++;
001f4a  f8d9104c          LDR      r1,[r9,#0x4c]  ; vz2_up_cnt
001f4e  f1010101          ADD      r1,r1,#1
001f52  f8c9104c          STR      r1,[r9,#0x4c]  ; vz2_up_cnt
;;;1993   
;;;1994   	if(vz2_wrk_cnt==0)
001f56  b950              CBNZ     r0,|L1.8046|
;;;1995   		{
;;;1996   		vz2_stat=vz2sFINE;
001f58  f04f0012          MOV      r0,#0x12
001f5c  71f0              STRB     r0,[r6,#7]
;;;1997   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001f5e  4601              MOV      r1,r0
001f60  f44f70ca          MOV      r0,#0x194
001f64  f7fffffe          BL       lc640_write
;;;1998   		fz_mem_hndl(0);
001f68  2000              MOVS     r0,#0
001f6a  f7fffffe          BL       fz_mem_hndl
                  |L1.8046|
;;;1999   		}
;;;2000   	if(sk_stat[0]==0)
001f6e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f70  b938              CBNZ     r0,|L1.8066|
;;;2001   		{
;;;2002   		vz2_stat=vz2sERR5;
001f72  f04f0010          MOV      r0,#0x10
001f76  71f0              STRB     r0,[r6,#7]
;;;2003   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001f78  4601              MOV      r1,r0
001f7a  f44f70ca          MOV      r0,#0x194
001f7e  f7fffffe          BL       lc640_write
                  |L1.8066|
;;;2004   		}
;;;2005   	if(sk_stat[1]==0)
001f82  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f84  b938              CBNZ     r0,|L1.8086|
;;;2006   		{
;;;2007   		vz2_stat=vz2sERR6;
001f86  f04f0011          MOV      r0,#0x11
001f8a  71f0              STRB     r0,[r6,#7]
;;;2008   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001f8c  4601              MOV      r1,r0
001f8e  f44f70ca          MOV      r0,#0x194
001f92  f7fffffe          BL       lc640_write
                  |L1.8086|
;;;2009   		}
;;;2010   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001f96  f9b6004a          LDRSH    r0,[r6,#0x4a]  ; Ibmax
001f9a  f8b6104c          LDRH     r1,[r6,#0x4c]  ; IZMAX_
001f9e  fb90f0f4          SDIV     r0,r0,r4
001fa2  4288              CMP      r0,r1
001fa4  dd16              BLE      |L1.8148|
001fa6  f9b62032          LDRSH    r2,[r6,#0x32]  ; cntrl_stat
001faa  2a14              CMP      r2,#0x14
001fac  dc12              BGT      |L1.8148|
001fae  f896202f          LDRB     r2,[r6,#0x2f]  ; volt_region
001fb2  2a01              CMP      r2,#1
001fb4  d10e              BNE      |L1.8148|
001fb6  f8b62078          LDRH     r2,[r6,#0x78]  ; volt_region_cnt
001fba  b95a              CBNZ     r2,|L1.8148|
;;;2011   		{
;;;2012   		volt_region=0;
001fbc  f886702f          STRB     r7,[r6,#0x2f]
;;;2013   		cntrl_stat=1000;
001fc0  f8a6b032          STRH     r11,[r6,#0x32]
;;;2014   		cntrl_stat_new=1000;
001fc4  f8a6b048          STRH     r11,[r6,#0x48]
;;;2015   		cntrl_stat_old=1000;
001fc8  f8a6b034          STRH     r11,[r6,#0x34]
;;;2016   		volt_region_cnt=110;
001fcc  f04f026e          MOV      r2,#0x6e
001fd0  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.8148|
;;;2017   		}
;;;2018   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001fd4  4288              CMP      r0,r1
001fd6  da13              BGE      |L1.8192|
001fd8  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001fdc  4558              CMP      r0,r11
001fde  db0f              BLT      |L1.8192|
001fe0  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001fe4  b960              CBNZ     r0,|L1.8192|
001fe6  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001fea  b948              CBNZ     r0,|L1.8192|
;;;2019   		{
;;;2020   		volt_region=1;
001fec  f04f0001          MOV      r0,#1
001ff0  f886002f          STRB     r0,[r6,#0x2f]
;;;2021   		cntrl_stat=10;
001ff4  8674              STRH     r4,[r6,#0x32]
;;;2022   		cntrl_stat_new=10;
001ff6  f8a64048          STRH     r4,[r6,#0x48]
;;;2023   		cntrl_stat_old=10;
001ffa  86b4              STRH     r4,[r6,#0x34]
;;;2024   		volt_region_cnt=10;
001ffc  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.8192|
;;;2025   		}
;;;2026   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002000  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
002004  b110              CBZ      r0,|L1.8204|
;;;2027   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
002006  2801              CMP      r0,#1
002008  d007              BEQ      |L1.8218|
00200a  e00c              B        |L1.8230|
                  |L1.8204|
00200c  2314              MOVS     r3,#0x14              ;2026
00200e  2200              MOVS     r2,#0                 ;2026
002010  2164              MOVS     r1,#0x64              ;2026
002012  20d2              MOVS     r0,#0xd2              ;2026
002014  f7fffffe          BL       mess_send
002018  e005              B        |L1.8230|
                  |L1.8218|
00201a  2314              MOVS     r3,#0x14
00201c  2201              MOVS     r2,#1
00201e  2164              MOVS     r1,#0x64
002020  20d2              MOVS     r0,#0xd2
002022  f7fffffe          BL       mess_send
                  |L1.8230|
;;;2028   	}
;;;2029   
;;;2030   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
002026  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002028  280c              CMP      r0,#0xc
00202a  d123              BNE      |L1.8308|
;;;2031   	{
;;;2032   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00202c  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00202e  280c              CMP      r0,#0xc
002030  d102              BNE      |L1.8248|
002032  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002036  b908              CBNZ     r0,|L1.8252|
                  |L1.8248|
;;;2033   		{
;;;2034   		vz2_stat_cnt=10;
002038  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8252|
;;;2035   		}
;;;2036   	vz2_stat_cnt--;
00203c  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002040  f1a00001          SUB      r0,r0,#1
002044  b200              SXTH     r0,r0
002046  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2037   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00204a  280a              CMP      r0,#0xa
00204c  d001              BEQ      |L1.8274|
00204e  2809              CMP      r0,#9
002050  d10a              BNE      |L1.8296|
                  |L1.8274|
;;;2038   		{
;;;2039   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002052  f2af4328          ADR      r3,|L1.7212|
002056  f2af4214          ADR      r2,|L1.7236|
00205a  f2af4100          ADR      r1,|L1.7260|
00205e  a060              ADR      r0,|L1.8672|
002060  f8cd8000          STR      r8,[sp,#0]
002064  f7fffffe          BL       show_mess
                  |L1.8296|
;;;2040   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2041   					"      ВКЛЮЧЕН       ",
;;;2042   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2043   					5000);
;;;2044   		}
;;;2045   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002068  2314              MOVS     r3,#0x14
00206a  2200              MOVS     r2,#0
00206c  2164              MOVS     r1,#0x64
00206e  20d2              MOVS     r0,#0xd2
002070  f7fffffe          BL       mess_send
                  |L1.8308|
;;;2046   	}
;;;2047   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
002074  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002076  280d              CMP      r0,#0xd
002078  d12c              BNE      |L1.8404|
;;;2048   	{
;;;2049   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00207a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00207c  280d              CMP      r0,#0xd
00207e  d102              BNE      |L1.8326|
002080  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002084  b908              CBNZ     r0,|L1.8330|
                  |L1.8326|
;;;2050   		{
;;;2051   		vz2_stat_cnt=10;
002086  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8330|
;;;2052   		}
;;;2053   	vz2_stat_cnt--;
00208a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00208e  f1a00001          SUB      r0,r0,#1
002092  b200              SXTH     r0,r0
002094  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2054   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002098  280a              CMP      r0,#0xa
00209a  d001              BEQ      |L1.8352|
00209c  2809              CMP      r0,#9
00209e  d10a              BNE      |L1.8374|
                  |L1.8352|
;;;2055   		{
;;;2056   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0020a0  f6af2314          ADR      r3,|L1.5776|
0020a4  f6af2200          ADR      r2,|L1.5800|
0020a8  f6af11ec          ADR      r1,|L1.5824|
0020ac  a04c              ADR      r0,|L1.8672|
0020ae  f8cd8000          STR      r8,[sp,#0]
0020b2  f7fffffe          BL       show_mess
                  |L1.8374|
;;;2057   					"    ЗАБЛОКИРОВАН    ",
;;;2058   					"     НЕИСПРАВНА     ",
;;;2059   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2060   					5000);
;;;2061   		}
;;;2062   	if(sk_stat[0]==1)
0020b6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0020b8  2801              CMP      r0,#1
0020ba  d105              BNE      |L1.8392|
;;;2063   		{
;;;2064   		vz2_stat=vz2sWRK1;
0020bc  71f4              STRB     r4,[r6,#7]
;;;2065   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0020be  210a              MOVS     r1,#0xa
0020c0  f44f70ca          MOV      r0,#0x194
0020c4  f7fffffe          BL       lc640_write
                  |L1.8392|
;;;2066   		}
;;;2067   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020c8  2314              MOVS     r3,#0x14
0020ca  2200              MOVS     r2,#0
0020cc  2164              MOVS     r1,#0x64
0020ce  20d2              MOVS     r0,#0xd2
0020d0  f7fffffe          BL       mess_send
                  |L1.8404|
;;;2068   	}
;;;2069   
;;;2070   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0020d4  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0020d6  280e              CMP      r0,#0xe
0020d8  d12b              BNE      |L1.8498|
;;;2071   	{
;;;2072   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020da  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
0020dc  280e              CMP      r0,#0xe
0020de  d102              BNE      |L1.8422|
0020e0  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020e4  b908              CBNZ     r0,|L1.8426|
                  |L1.8422|
;;;2073   		{
;;;2074   		vz2_stat_cnt=10;
0020e6  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8426|
;;;2075   		}
;;;2076   	vz2_stat_cnt--;
0020ea  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020ee  f1a00001          SUB      r0,r0,#1
0020f2  b200              SXTH     r0,r0
0020f4  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2077   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020f8  280a              CMP      r0,#0xa
0020fa  d001              BEQ      |L1.8448|
0020fc  2809              CMP      r0,#9
0020fe  d109              BNE      |L1.8468|
                  |L1.8448|
;;;2078   		{
;;;2079   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002100  a33d              ADR      r3,|L1.8696|
002102  f2af4260          ADR      r2,|L1.7332|
002106  f2af414c          ADR      r1,|L1.7356|
00210a  a035              ADR      r0,|L1.8672|
00210c  f8cd8000          STR      r8,[sp,#0]
002110  f7fffffe          BL       show_mess
                  |L1.8468|
;;;2080   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2081   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2082   					"    ТУМБЛЕРА!!!     ",
;;;2083   					5000);
;;;2084   		}
;;;2085   	if(sk_stat[1]==1)
002114  7868              LDRB     r0,[r5,#1]  ; sk_stat
002116  2801              CMP      r0,#1
002118  d105              BNE      |L1.8486|
;;;2086   		{
;;;2087   		vz2_stat=vz2sWRK1;
00211a  71f4              STRB     r4,[r6,#7]
;;;2088   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
00211c  210a              MOVS     r1,#0xa
00211e  f44f70ca          MOV      r0,#0x194
002122  f7fffffe          BL       lc640_write
                  |L1.8486|
;;;2089   		}
;;;2090   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002126  2314              MOVS     r3,#0x14
002128  2200              MOVS     r2,#0
00212a  2164              MOVS     r1,#0x64
00212c  20d2              MOVS     r0,#0xd2
00212e  f7fffffe          BL       mess_send
                  |L1.8498|
;;;2091   	}
;;;2092   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
002132  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002134  2810              CMP      r0,#0x10
002136  d12d              BNE      |L1.8596|
;;;2093   	{
;;;2094   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002138  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00213a  2810              CMP      r0,#0x10
00213c  d102              BNE      |L1.8516|
00213e  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002142  b908              CBNZ     r0,|L1.8520|
                  |L1.8516|
;;;2095   		{
;;;2096   		vz2_stat_cnt=10;
002144  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8520|
;;;2097   		}
;;;2098   	vz2_stat_cnt--;
002148  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00214c  f1a00001          SUB      r0,r0,#1
002150  b200              SXTH     r0,r0
002152  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2099   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002156  280a              CMP      r0,#0xa
002158  d001              BEQ      |L1.8542|
00215a  2809              CMP      r0,#9
00215c  d10a              BNE      |L1.8564|
                  |L1.8542|
;;;2100   		{
;;;2101   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00215e  f6af23d0          ADR      r3,|L1.5776|
002162  f6af22bc          ADR      r2,|L1.5800|
002166  f6af21a8          ADR      r1,|L1.5824|
00216a  a01d              ADR      r0,|L1.8672|
00216c  f8cd8000          STR      r8,[sp,#0]
002170  f7fffffe          BL       show_mess
                  |L1.8564|
;;;2102   					"    ЗАБЛОКИРОВАН    ",
;;;2103   					"     НЕИСПРАВНА     ",
;;;2104   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2105   					5000);
;;;2106   		}
;;;2107   	if(sk_stat[0]==1)
002174  7828              LDRB     r0,[r5,#0]  ; sk_stat
002176  2801              CMP      r0,#1
002178  d106              BNE      |L1.8584|
;;;2108   		{
;;;2109   		vz2_stat=vz2sWRK2;
00217a  f886a007          STRB     r10,[r6,#7]
;;;2110   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00217e  210b              MOVS     r1,#0xb
002180  f44f70ca          MOV      r0,#0x194
002184  f7fffffe          BL       lc640_write
                  |L1.8584|
;;;2111   		}
;;;2112   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002188  2314              MOVS     r3,#0x14
00218a  2200              MOVS     r2,#0
00218c  2164              MOVS     r1,#0x64
00218e  20d2              MOVS     r0,#0xd2
002190  f7fffffe          BL       mess_send
                  |L1.8596|
;;;2113   	}
;;;2114   
;;;2115   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
002194  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002196  2811              CMP      r0,#0x11
002198  d154              BNE      |L1.8772|
;;;2116   	{
;;;2117   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00219a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00219c  2811              CMP      r0,#0x11
00219e  d102              BNE      |L1.8614|
0021a0  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021a4  b908              CBNZ     r0,|L1.8618|
                  |L1.8614|
;;;2118   		{
;;;2119   		vz2_stat_cnt=10;
0021a6  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8618|
;;;2120   		}
;;;2121   	vz2_stat_cnt--;
0021aa  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0021ae  f1a00001          SUB      r0,r0,#1
0021b2  b200              SXTH     r0,r0
0021b4  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2122   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021b8  280a              CMP      r0,#0xa
0021ba  d001              BEQ      |L1.8640|
0021bc  2809              CMP      r0,#9
0021be  d131              BNE      |L1.8740|
                  |L1.8640|
;;;2123   		{
;;;2124   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0021c0  a30d              ADR      r3,|L1.8696|
0021c2  e025              B        |L1.8720|
                  |L1.8644|
                          DCD      ||area_number.25||+0x80
                  |L1.8648|
                          DCD      FZ_T1
                  |L1.8652|
                          DCD      out_U
                  |L1.8656|
                          DCD      FZ_U1
                  |L1.8660|
                          DCD      Ib_ips_termokompensat
                  |L1.8664|
                          DCD      FZ_ISW12
                  |L1.8668|
                          DCD      FZ_T2
                  |L1.8672|
0021e0  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0021e4  cccec2ce
0021e8  d7cddbc9
0021ec  20c7c0  
0021ef  d0dfc420          DCB      208,223,196,"  ",0
0021f3  2000    
0021f5  00                DCB      0
0021f6  00                DCB      0
0021f7  00                DCB      0
                  |L1.8696|
0021f8  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
0021fc  d2d3ccc1
002200  cbc5d0c0
002204  21212120
002208  20202020
00220c  00      
00220d  00                DCB      0
00220e  00                DCB      0
00220f  00                DCB      0
                  |L1.8720|
002210  f2af5270          ADR      r2,|L1.7332|
002214  f2af515c          ADR      r1,|L1.7356|
002218  f2af003c          ADR      r0,|L1.8672|
00221c  f8cd8000          STR      r8,[sp,#0]
002220  f7fffffe          BL       show_mess
                  |L1.8740|
;;;2125   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2126   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2127   					"    ТУМБЛЕРА!!!     ",
;;;2128   					5000);
;;;2129   		}
;;;2130   	if(sk_stat[1]==1)
002224  7868              LDRB     r0,[r5,#1]  ; sk_stat
002226  2801              CMP      r0,#1
002228  d106              BNE      |L1.8760|
;;;2131   		{
;;;2132   		vz2_stat=vz2sWRK2;
00222a  f886a007          STRB     r10,[r6,#7]
;;;2133   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00222e  210b              MOVS     r1,#0xb
002230  f44f70ca          MOV      r0,#0x194
002234  f7fffffe          BL       lc640_write
                  |L1.8760|
;;;2134   		}
;;;2135   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002238  2314              MOVS     r3,#0x14
00223a  2200              MOVS     r2,#0
00223c  2164              MOVS     r1,#0x64
00223e  20d2              MOVS     r0,#0xd2
002240  f7fffffe          BL       mess_send
                  |L1.8772|
;;;2136   	}
;;;2137   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
002244  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002246  280f              CMP      r0,#0xf
002248  d12e              BNE      |L1.8872|
;;;2138   	{
;;;2139   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00224a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00224c  280f              CMP      r0,#0xf
00224e  d102              BNE      |L1.8790|
002250  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002254  b908              CBNZ     r0,|L1.8794|
                  |L1.8790|
;;;2140   		{
;;;2141   		vz2_stat_cnt=10;
002256  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8794|
;;;2142   		}
;;;2143   	vz2_stat_cnt--;
00225a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00225e  f1a00001          SUB      r0,r0,#1
002262  b200              SXTH     r0,r0
002264  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2144   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002268  280a              CMP      r0,#0xa
00226a  d001              BEQ      |L1.8816|
00226c  2809              CMP      r0,#9
00226e  d10b              BNE      |L1.8840|
                  |L1.8816|
;;;2145   		{
;;;2146   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002270  f6af3380          ADR      r3,|L1.5876|
002274  f6af326c          ADR      r2,|L1.5900|
002278  f6af3158          ADR      r1,|L1.5924|
00227c  f2af5034          ADR      r0,|L1.7500|
002280  f8cd8000          STR      r8,[sp,#0]
002284  f7fffffe          BL       show_mess
                  |L1.8840|
;;;2147   					"      ТУМБЛЕР       ",
;;;2148   					"     ВЫСОКОГО       ",
;;;2149   					"    НАПРЯЖЕНИЯ      ",
;;;2150   					5000);
;;;2151   		}
;;;2152   	if(sk_stat[1]==0)
002288  7868              LDRB     r0,[r5,#1]  ; sk_stat
00228a  b938              CBNZ     r0,|L1.8860|
;;;2153   		{
;;;2154   		vz2_stat=vz2sOFF;
00228c  71f7              STRB     r7,[r6,#7]
;;;2155   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00228e  2100              MOVS     r1,#0
002290  f44f70ca          MOV      r0,#0x194
002294  f7fffffe          BL       lc640_write
;;;2156   		vz_stop();
002298  f7fffffe          BL       vz_stop
                  |L1.8860|
;;;2157   
;;;2158   		}
;;;2159   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00229c  2314              MOVS     r3,#0x14
00229e  2200              MOVS     r2,#0
0022a0  2164              MOVS     r1,#0x64
0022a2  20d2              MOVS     r0,#0xd2
0022a4  f7fffffe          BL       mess_send
                  |L1.8872|
;;;2160   	}
;;;2161   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
0022a8  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;2162   	{
;;;2163   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2164   		{
;;;2165   		vz2_stat_cnt=10;
;;;2166   		}
;;;2167   	vz2_stat_cnt--;
;;;2168   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2169   		{
;;;2170   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0022aa  f64038b8          MOV      r8,#0xbb8
0022ae  2812              CMP      r0,#0x12              ;2161
0022b0  d13d              BNE      |L1.9006|
0022b2  7a30              LDRB     r0,[r6,#8]            ;2163  ; vz2_stat_old
0022b4  2812              CMP      r0,#0x12              ;2163
0022b6  d102              BNE      |L1.8894|
0022b8  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2163  ; vz2_stat_cnt
0022bc  b908              CBNZ     r0,|L1.8898|
                  |L1.8894|
0022be  f8a6407a          STRH     r4,[r6,#0x7a]         ;2165
                  |L1.8898|
0022c2  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2167  ; vz2_stat_cnt
0022c6  f1a00001          SUB      r0,r0,#1              ;2167
0022ca  b200              SXTH     r0,r0                 ;2167
0022cc  f8a6007a          STRH     r0,[r6,#0x7a]         ;2167
0022d0  280a              CMP      r0,#0xa               ;2168
0022d2  d001              BEQ      |L1.8920|
0022d4  2809              CMP      r0,#9                 ;2168
0022d6  d10a              BNE      |L1.8942|
                  |L1.8920|
0022d8  f2af53f0          ADR      r3,|L1.7404|
0022dc  f2af52dc          ADR      r2,|L1.7428|
0022e0  f2af51c8          ADR      r1,|L1.7452|
0022e4  a0ff              ADR      r0,|L1.9956|
0022e6  f8cd8000          STR      r8,[sp,#0]
0022ea  f7fffffe          BL       show_mess
                  |L1.8942|
;;;2171   					"       ЗАРЯД        ",
;;;2172   					"      УСПЕШНО       ",
;;;2173   					"     ЗАВЕРШЕН       ",
;;;2174   					3000);
;;;2175   		}
;;;2176   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0022ee  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
0022f2  2806              CMP      r0,#6
0022f4  d001              BEQ      |L1.8954|
0022f6  2805              CMP      r0,#5
0022f8  d10b              BNE      |L1.8978|
                  |L1.8954|
;;;2177   		{
;;;2178   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0022fa  f6af4308          ADR      r3,|L1.5876|
0022fe  f6af32f4          ADR      r2,|L1.5900|
002302  f6af31e0          ADR      r1,|L1.5924|
002306  f2af50bc          ADR      r0,|L1.7500|
00230a  f8cd8000          STR      r8,[sp,#0]
00230e  f7fffffe          BL       show_mess
                  |L1.8978|
;;;2179   					"      ТУМБЛЕР       ",
;;;2180   					"     ВЫСОКОГО       ",
;;;2181   					"    НАПРЯЖЕНИЯ      ",
;;;2182   					3000);
;;;2183   		}
;;;2184   	if(sk_stat[1]==0)
002312  7868              LDRB     r0,[r5,#1]  ; sk_stat
002314  b928              CBNZ     r0,|L1.8994|
;;;2185   		{
;;;2186   		vz2_stat=vz2sOFF;
002316  71f7              STRB     r7,[r6,#7]
;;;2187   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002318  2100              MOVS     r1,#0
00231a  f44f70ca          MOV      r0,#0x194
00231e  f7fffffe          BL       lc640_write
                  |L1.8994|
;;;2188   		}
;;;2189   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002322  2314              MOVS     r3,#0x14
002324  2200              MOVS     r2,#0
002326  2164              MOVS     r1,#0x64
002328  20d2              MOVS     r0,#0xd2
00232a  f7fffffe          BL       mess_send
                  |L1.9006|
;;;2190   	}
;;;2191   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
00232e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002330  2813              CMP      r0,#0x13
002332  d13d              BNE      |L1.9136|
;;;2192   	{
;;;2193   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002334  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002336  2813              CMP      r0,#0x13
002338  d102              BNE      |L1.9024|
00233a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00233e  b908              CBNZ     r0,|L1.9028|
                  |L1.9024|
;;;2194   		{
;;;2195   		vz2_stat_cnt=10;
002340  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.9028|
;;;2196   		}
;;;2197   	vz2_stat_cnt--;
002344  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002348  f1a00001          SUB      r0,r0,#1
00234c  b200              SXTH     r0,r0
00234e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2198   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002352  280a              CMP      r0,#0xa
002354  d001              BEQ      |L1.9050|
002356  2809              CMP      r0,#9
002358  d10a              BNE      |L1.9072|
                  |L1.9050|
;;;2199   		{
;;;2200   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
00235a  f2af53f8          ADR      r3,|L1.7524|
00235e  f2af52e4          ADR      r2,|L1.7548|
002362  f2af6148          ADR      r1,|L1.7452|
002366  a0df              ADR      r0,|L1.9956|
002368  f8cd8000          STR      r8,[sp,#0]
00236c  f7fffffe          BL       show_mess
                  |L1.9072|
;;;2201   					"       ЗАРЯД        ",
;;;2202   					"     ПРЕКРАЩЕН      ",
;;;2203   					"                    ",
;;;2204   					3000);
;;;2205   		}
;;;2206   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002370  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
002374  2806              CMP      r0,#6
002376  d001              BEQ      |L1.9084|
002378  2805              CMP      r0,#5
00237a  d10b              BNE      |L1.9108|
                  |L1.9084|
;;;2207   		{
;;;2208   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00237c  f6af438c          ADR      r3,|L1.5876|
002380  f6af4278          ADR      r2,|L1.5900|
002384  f6af4164          ADR      r1,|L1.5924|
002388  f2af6040          ADR      r0,|L1.7500|
00238c  f8cd8000          STR      r8,[sp,#0]
002390  f7fffffe          BL       show_mess
                  |L1.9108|
;;;2209   					"      ТУМБЛЕР       ",
;;;2210   					"     ВЫСОКОГО       ",
;;;2211   					"    НАПРЯЖЕНИЯ      ",
;;;2212   					3000);
;;;2213   		}
;;;2214   	if(sk_stat[1]==0)
002394  7868              LDRB     r0,[r5,#1]  ; sk_stat
002396  b928              CBNZ     r0,|L1.9124|
;;;2215   		{
;;;2216   		vz2_stat=vz2sOFF;
002398  71f7              STRB     r7,[r6,#7]
;;;2217   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00239a  2100              MOVS     r1,#0
00239c  f44f70ca          MOV      r0,#0x194
0023a0  f7fffffe          BL       lc640_write
                  |L1.9124|
;;;2218   		}
;;;2219   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0023a4  2314              MOVS     r3,#0x14
0023a6  2200              MOVS     r2,#0
0023a8  2164              MOVS     r1,#0x64
0023aa  20d2              MOVS     r0,#0xd2
0023ac  f7fffffe          BL       mess_send
                  |L1.9136|
;;;2220   	}
;;;2221   vz2_stat_old=vz2_stat;
0023b0  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0023b2  7230              STRB     r0,[r6,#8]
;;;2222   
;;;2223   }
0023b4  e8bd8ff8          POP      {r3-r11,pc}
;;;2224   
                          ENDP

                  vz2_start PROC
;;;2226   //старт уравнительног заряда
;;;2227   char vz2_start(char hour)
0023b8  b510              PUSH     {r4,lr}
;;;2228   {          
;;;2229   char out;
;;;2230   out=0;
0023ba  f04f0000          MOV      r0,#0
;;;2231   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0023be  49cf              LDR      r1,|L1.9980|
0023c0  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
0023c4  2a00              CMP      r2,#0
0023c6  d110              BNE      |L1.9194|
0023c8  4acd              LDR      r2,|L1.9984|
0023ca  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
0023cc  2a01              CMP      r2,#1
0023ce  d00c              BEQ      |L1.9194|
0023d0  794a              LDRB     r2,[r1,#5]  ; vz1_stat
0023d2  2a00              CMP      r2,#0
0023d4  d109              BNE      |L1.9194|
;;;2232   	{
;;;2233   	if(vz1_stat==vz1sOFF)
;;;2234   		{
;;;2235   		vz2_stat=vz2sSTEP1;
0023d6  f04f0001          MOV      r0,#1
0023da  71c8              STRB     r0,[r1,#7]
;;;2236   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
0023dc  4601              MOV      r1,r0
0023de  f44f70ca          MOV      r0,#0x194
0023e2  f7fffffe          BL       lc640_write
;;;2237   		out=1;
0023e6  f04f0001          MOV      r0,#1
                  |L1.9194|
;;;2238   		
;;;2239   		}
;;;2240   /*	spc_stat=spcVZ;
;;;2241   	__ee_spc_stat=spcVZ; 
;;;2242   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2243   	vz_cnt_h=hour;
;;;2244   	__ee_vz_cnt=hour*60;
;;;2245   	if(hour==0)__ee_vz_cnt=30;
;;;2246   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2247   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2248   	vz_cnt_h_=0;
;;;2249   	vz_cnt_s=0;
;;;2250   	vz_cnt_s_=0;
;;;2251   	
;;;2252   		*/
;;;2253   	}
;;;2254   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2255   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2256   //plazma=out;	
;;;2257   return out;
;;;2258   }
0023ea  bd10              POP      {r4,pc}
;;;2259   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2260   //стоп формовочного заряда
;;;2261   void vz2_stop(void)
0023ec  48c3              LDR      r0,|L1.9980|
;;;2262   {
;;;2263   if(vz2_stat!=vz2sOFF)
0023ee  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
0023f0  2900              CMP      r1,#0
0023f2  d006              BEQ      |L1.9218|
;;;2264   	{
;;;2265   	vz2_stat=vz2sSTOP;
0023f4  f04f0113          MOV      r1,#0x13
0023f8  71c1              STRB     r1,[r0,#7]
;;;2266   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
0023fa  f44f70ca          MOV      r0,#0x194
0023fe  f7ffbffe          B.W      lc640_write
                  |L1.9218|
;;;2267   	}
;;;2268   }
002402  4770              BX       lr
;;;2269   
                          ENDP

                  kb_init PROC
;;;2270   //-----------------------------------------------
;;;2271   void kb_init(void)
002404  48bf              LDR      r0,|L1.9988|
;;;2272   {
;;;2273   main_kb_cnt=(TBAT*60)-60/*120*/;
002406  f06f013b          MVN      r1,#0x3b
00240a  8800              LDRH     r0,[r0,#0]  ; TBAT
00240c  ebc01000          RSB      r0,r0,r0,LSL #4
002410  eb010080          ADD      r0,r1,r0,LSL #2
002414  49b9              LDR      r1,|L1.9980|
002416  f8a10052          STRH     r0,[r1,#0x52]
;;;2274   }
00241a  4770              BX       lr
;;;2275   
                          ENDP

                  kb_hndl PROC
;;;2276   //-----------------------------------------------
;;;2277   void kb_hndl(void)
00241c  e92d5ff0          PUSH     {r4-r12,lr}
;;;2278   {
;;;2279   
;;;2280   static signed short ibat[2],ibat_[2];
;;;2281   #ifdef UKU_TELECORE2015
;;;2282   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2283   #else 
;;;2284   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
002420  f8df82d8          LDR      r8,|L1.9980|
;;;2285   #endif
;;;2286   	{
;;;2287   	main_kb_cnt=0;
;;;2288   	
;;;2289   	kb_start[0]=0;
;;;2290   	kb_start[1]=0;
;;;2291   	kb_start_ips=0;
;;;2292   
;;;2293   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2294   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2295   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2296   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
002424  f8dfa2e0          LDR      r10,|L1.9992|
002428  2500              MOVS     r5,#0                 ;2284
00242a  f8b80052          LDRH     r0,[r8,#0x52]         ;2284  ; main_kb_cnt
00242e  4eb7              LDR      r6,|L1.9996|
002430  1c40              ADDS     r0,r0,#1              ;2284
002432  b201              SXTH     r1,r0                 ;2284
002434  48b3              LDR      r0,|L1.9988|
002436  f8a81052          STRH     r1,[r8,#0x52]         ;2284
00243a  f8df92d4          LDR      r9,|L1.10000|
00243e  f9b00000          LDRSH    r0,[r0,#0]            ;2284  ; TBAT
;;;2297   #endif	
;;;2298   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2299   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2300   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2301   #endif
;;;2302   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2303    
;;;2304   		{
;;;2305   		kb_start[0]=0;
;;;2306   		kb_start[1]=0;
;;;2307   		kb_start_ips=0;
;;;2308   		}
;;;2309   
;;;2310   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2311   		{
;;;2312   		kb_cnt_1lev=10;
002442  270a              MOVS     r7,#0xa
002444  ebc01200          RSB      r2,r0,r0,LSL #4       ;2284
002448  f04f0b01          MOV      r11,#1                ;2293
00244c  f1080458          ADD      r4,r8,#0x58           ;2289
002450  ebb10f82          CMP      r1,r2,LSL #2          ;2284
002454  db6c              BLT      |L1.9520|
002456  2800              CMP      r0,#0                 ;2284
002458  d06a              BEQ      |L1.9520|
00245a  f8a85052          STRH     r5,[r8,#0x52]         ;2287
00245e  7025              STRB     r5,[r4,#0]            ;2289
002460  7065              STRB     r5,[r4,#1]            ;2290
002462  f888501d          STRB     r5,[r8,#0x1d]         ;2291
002466  48ab              LDR      r0,|L1.10004|
002468  7800              LDRB     r0,[r0,#0]            ;2293  ; BAT_IS_ON
00246a  2855              CMP      r0,#0x55              ;2293
00246c  d111              BNE      |L1.9362|
00246e  f9b60002          LDRSH    r0,[r6,#2]            ;2293  ; bat
002472  2850              CMP      r0,#0x50              ;2293
002474  dd0d              BLE      |L1.9362|
002476  f9b60008          LDRSH    r0,[r6,#8]            ;2293  ; bat
00247a  f7fffffe          BL       abs
00247e  f9b91000          LDRSH    r1,[r9,#0]            ;2293  ; IKB
002482  4288              CMP      r0,r1                 ;2293
002484  db03              BLT      |L1.9358|
002486  f896003d          LDRB     r0,[r6,#0x3d]         ;2293  ; bat
00248a  07c0              LSLS     r0,r0,#31             ;2293
00248c  d001              BEQ      |L1.9362|
                  |L1.9358|
00248e  f884b000          STRB     r11,[r4,#0]           ;2293
                  |L1.9362|
002492  48a0              LDR      r0,|L1.10004|
002494  7840              LDRB     r0,[r0,#1]            ;2294  ; BAT_IS_ON
002496  2855              CMP      r0,#0x55              ;2294
002498  d111              BNE      |L1.9406|
00249a  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2294  ; bat
00249e  2850              CMP      r0,#0x50              ;2294
0024a0  dd0d              BLE      |L1.9406|
0024a2  f9b60054          LDRSH    r0,[r6,#0x54]         ;2294  ; bat
0024a6  f7fffffe          BL       abs
0024aa  f9b91000          LDRSH    r1,[r9,#0]            ;2294  ; IKB
0024ae  4288              CMP      r0,r1                 ;2294
0024b0  db03              BLT      |L1.9402|
0024b2  f8960089          LDRB     r0,[r6,#0x89]         ;2294  ; bat
0024b6  07c0              LSLS     r0,r0,#31             ;2294
0024b8  d001              BEQ      |L1.9406|
                  |L1.9402|
0024ba  f884b001          STRB     r11,[r4,#1]           ;2294
                  |L1.9406|
0024be  4896              LDR      r0,|L1.10008|
0024c0  7800              LDRB     r0,[r0,#0]            ;2296  ; ips_bat_av_vzvod
0024c2  b970              CBNZ     r0,|L1.9442|
0024c4  f9ba0000          LDRSH    r0,[r10,#0]           ;2296  ; Ib_ips_termokompensat
0024c8  f7fffffe          BL       abs
0024cc  f9b91000          LDRSH    r1,[r9,#0]            ;2296  ; IKB
0024d0  4288              CMP      r0,r1                 ;2296
0024d2  db04              BLT      |L1.9438|
0024d4  4891              LDR      r0,|L1.10012|
0024d6  f890003d          LDRB     r0,[r0,#0x3d]         ;2296  ; bat_ips
0024da  07c0              LSLS     r0,r0,#31             ;2296
0024dc  d001              BEQ      |L1.9442|
                  |L1.9438|
0024de  f888b01d          STRB     r11,[r8,#0x1d]        ;2296
                  |L1.9442|
0024e2  488f              LDR      r0,|L1.10016|
0024e4  7800              LDRB     r0,[r0,#0]            ;2298  ; net_av
0024e6  b998              CBNZ     r0,|L1.9488|
0024e8  f898001e          LDRB     r0,[r8,#0x1e]         ;2298  ; num_of_wrks_bps
0024ec  b180              CBZ      r0,|L1.9488|
0024ee  f8980023          LDRB     r0,[r8,#0x23]         ;2298  ; spc_stat
0024f2  b108              CBZ      r0,|L1.9464|
0024f4  2802              CMP      r0,#2                 ;2298
0024f6  d10b              BNE      |L1.9488|
                  |L1.9464|
0024f8  f8980005          LDRB     r0,[r8,#5]            ;2300  ; vz1_stat
0024fc  f8981007          LDRB     r1,[r8,#7]            ;2300  ; vz2_stat
002500  4308              ORRS     r0,r0,r1              ;2300
002502  d002              BEQ      |L1.9482|
002504  4887              LDR      r0,|L1.10020|
002506  8800              LDRH     r0,[r0,#0]            ;2300  ; SMART_SPC
002508  b910              CBNZ     r0,|L1.9488|
                  |L1.9482|
00250a  4887              LDR      r0,|L1.10024|
00250c  7800              LDRB     r0,[r0,#0]            ;2302  ; sp_ch_stat
00250e  b118              CBZ      r0,|L1.9496|
                  |L1.9488|
002510  7025              STRB     r5,[r4,#0]            ;2305
002512  7065              STRB     r5,[r4,#1]            ;2306
002514  f888501d          STRB     r5,[r8,#0x1d]         ;2307
                  |L1.9496|
002518  7820              LDRB     r0,[r4,#0]            ;2310  ; kb_start
00251a  2801              CMP      r0,#1                 ;2310
00251c  d020              BEQ      |L1.9568|
00251e  7860              LDRB     r0,[r4,#1]            ;2310  ; kb_start
002520  2801              CMP      r0,#1                 ;2310
002522  d01d              BEQ      |L1.9568|
002524  f898001d          LDRB     r0,[r8,#0x1d]         ;2310  ; kb_start_ips
002528  2801              CMP      r0,#1                 ;2310
00252a  d019              BEQ      |L1.9568|
;;;2313   		}
;;;2314   	else kb_cnt_1lev=0;
00252c  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9520|
;;;2315   	}
;;;2316   
;;;2317   if(kb_cnt_1lev)
002530  4641              MOV      r1,r8
002532  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2318   	{
;;;2319   	kb_cnt_1lev--;
;;;2320   
;;;2321   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2322   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2323   
;;;2324   
;;;2325   	if(kb_cnt_1lev==5)
;;;2326   		{
;;;2327   		ibat[0]=abs(bat[0]._Ib);
002536  f8df81c4          LDR      r8,|L1.9980|
00253a  2800              CMP      r0,#0                 ;2317
00253c  f1080890          ADD      r8,r8,#0x90
002540  d07e              BEQ      |L1.9792|
002542  f1a00001          SUB      r0,r0,#1              ;2319
002546  b200              SXTH     r0,r0                 ;2319
002548  468b              MOV      r11,r1                ;2319
00254a  f8a10054          STRH     r0,[r1,#0x54]         ;2319
00254e  2805              CMP      r0,#5                 ;2321
002550  dd09              BLE      |L1.9574|
002552  230f              MOVS     r3,#0xf               ;2321
002554  221e              MOVS     r2,#0x1e              ;2321
002556  2164              MOVS     r1,#0x64              ;2321
002558  20e1              MOVS     r0,#0xe1              ;2321
00255a  f7fffffe          BL       mess_send
00255e  e00a              B        |L1.9590|
                  |L1.9568|
002560  f8a87054          STRH     r7,[r8,#0x54]         ;2312
002564  e7e4              B        |L1.9520|
                  |L1.9574|
002566  2800              CMP      r0,#0                 ;2322
002568  dd05              BLE      |L1.9590|
00256a  230f              MOVS     r3,#0xf               ;2322
00256c  221e              MOVS     r2,#0x1e              ;2322
00256e  2169              MOVS     r1,#0x69              ;2322
002570  20e1              MOVS     r0,#0xe1              ;2322
002572  f7fffffe          BL       mess_send
                  |L1.9590|
002576  f8bb0054          LDRH     r0,[r11,#0x54]        ;2325  ; kb_cnt_1lev
00257a  2805              CMP      r0,#5                 ;2325
00257c  d111              BNE      |L1.9634|
00257e  f9b60008          LDRSH    r0,[r6,#8]  ; bat
002582  f7fffffe          BL       abs
002586  f8a80000          STRH     r0,[r8,#0]
;;;2328   		ibat[1]=abs(bat[1]._Ib);
00258a  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
00258e  f7fffffe          BL       abs
002592  f8a80002          STRH     r0,[r8,#2]
;;;2329   		ibat_ips=abs(Ib_ips_termokompensat);
002596  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00259a  f7fffffe          BL       abs
00259e  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9634|
;;;2330   		}
;;;2331   	
;;;2332   	if(kb_cnt_1lev==0)
0025a2  4856              LDR      r0,|L1.9980|
0025a4  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
0025a8  2800              CMP      r0,#0
0025aa  d158              BNE      |L1.9822|
;;;2333   		{
;;;2334   		ibat_[0]=abs(bat[0]._Ib);
0025ac  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0025b0  f7fffffe          BL       abs
0025b4  f8dfb144          LDR      r11,|L1.9980|
0025b8  f10b0b94          ADD      r11,r11,#0x94
0025bc  f8ab0000          STRH     r0,[r11,#0]
;;;2335   		ibat_[1]=abs(bat[1]._Ib);
0025c0  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0025c4  f7fffffe          BL       abs
0025c8  f8ab0002          STRH     r0,[r11,#2]
;;;2336   		ibat_ips_=abs(Ib_ips_termokompensat);
0025cc  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0025d0  f7fffffe          BL       abs
0025d4  f8dfa124          LDR      r10,|L1.9980|
0025d8  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2337   
;;;2338   		kb_cnt_2lev=0;
0025dc  f8aa5056          STRH     r5,[r10,#0x56]
;;;2339   
;;;2340   
;;;2341   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0025e0  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0025e4  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0025e8  4408              ADD      r0,r0,r1
0025ea  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0025ee  4288              CMP      r0,r1
0025f0  da02              BGE      |L1.9720|
0025f2  7820              LDRB     r0,[r4,#0]  ; kb_start
0025f4  2801              CMP      r0,#1
0025f6  d034              BEQ      |L1.9826|
                  |L1.9720|
;;;2342   			{
;;;2343   			kb_cnt_2lev=10;  
;;;2344   			}
;;;2345   		else if(bat[0]._Ub>200)
0025f8  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0025fc  28c8              CMP      r0,#0xc8
0025fe  dd04              BLE      |L1.9738|
;;;2346   			{
;;;2347   			kb_start[0]=0;
002600  7025              STRB     r5,[r4,#0]
;;;2348   			avar_bat_hndl(0,0);
002602  2100              MOVS     r1,#0
002604  4608              MOV      r0,r1
002606  f7fffffe          BL       avar_bat_hndl
                  |L1.9738|
;;;2349   			}
;;;2350   		
;;;2351   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
00260a  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
00260e  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
002612  4408              ADD      r0,r0,r1
002614  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002618  4288              CMP      r0,r1
00261a  da02              BGE      |L1.9762|
00261c  7860              LDRB     r0,[r4,#1]  ; kb_start
00261e  2801              CMP      r0,#1
002620  d022              BEQ      |L1.9832|
                  |L1.9762|
;;;2352   			{
;;;2353   			kb_cnt_2lev=10;     
;;;2354   			}
;;;2355   		else  if(bat[1]._Ub>200)
002622  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
002626  28c8              CMP      r0,#0xc8
002628  dd04              BLE      |L1.9780|
;;;2356   			{
;;;2357   			kb_start[1]=0;
00262a  7065              STRB     r5,[r4,#1]
;;;2358   			avar_bat_hndl(1,0);
00262c  2100              MOVS     r1,#0
00262e  2001              MOVS     r0,#1
002630  f7fffffe          BL       avar_bat_hndl
                  |L1.9780|
;;;2359   			}
;;;2360   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2361   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
002634  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002638  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
00263c  4408              ADD      r0,r0,r1
00263e  e000              B        |L1.9794|
                  |L1.9792|
002640  e01b              B        |L1.9850|
                  |L1.9794|
002642  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002646  4288              CMP      r0,r1
002648  da09              BGE      |L1.9822|
00264a  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
00264e  2801              CMP      r0,#1
002650  d105              BNE      |L1.9822|
;;;2362   			{
;;;2363   			if(KB_ALGORITM==1)
002652  4836              LDR      r0,|L1.10028|
002654  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
002656  2801              CMP      r0,#1
002658  d009              BEQ      |L1.9838|
;;;2364   				{
;;;2365   				avar_bat_ips_hndl(1);
;;;2366   				kb_start_ips=0;
;;;2367   				}
;;;2368   			else
;;;2369   				{
;;;2370   				kb_cnt_2lev=10;     
00265a  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9822|
;;;2371   				}
;;;2372   			}
;;;2373   #endif
;;;2374   		}	
;;;2375   
;;;2376   
;;;2377   	}
;;;2378   else if(kb_cnt_2lev)
;;;2379   	{
;;;2380   	kb_cnt_2lev--;
;;;2381   
;;;2382   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2383   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2384   
;;;2385   
;;;2386   	if(kb_cnt_2lev==5)
;;;2387   		{
;;;2388   		ibat[0]=abs(bat[0]._Ib);
;;;2389   		ibat[1]=abs(bat[1]._Ib);
;;;2390   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2391   		}
;;;2392   	
;;;2393   	if(kb_cnt_2lev==0)
;;;2394   		{
;;;2395   		ibat_[0]=abs(bat[0]._Ib);
;;;2396   		ibat_[1]=abs(bat[1]._Ib);
;;;2397   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2398   
;;;2399   		kb_full_ver=0;
;;;2400   
;;;2401   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2402   			{
;;;2403   			kb_full_ver=1;  
;;;2404   			}
;;;2405   		else if(bat[0]._Ub>200)			
;;;2406   			{
;;;2407   			kb_start[0]=0;
;;;2408   			avar_bat_hndl(0,0);
;;;2409   			}
;;;2410   
;;;2411   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2412   			{
;;;2413   			kb_full_ver=1;     
;;;2414   			}
;;;2415   		else	if(bat[1]._Ub>200)		
;;;2416   			{
;;;2417   			kb_start[1]=0;
;;;2418   			avar_bat_hndl(1,0);
;;;2419   			}
;;;2420   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2421   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2422   			{
;;;2423   			if(KB_ALGORITM==2)
;;;2424   				{
;;;2425   				avar_bat_ips_hndl(1);
;;;2426   				kb_start_ips=0;
;;;2427   				}
;;;2428   			else
;;;2429   				{
;;;2430   				kb_full_ver=1;     
;;;2431   				}
;;;2432   			}
;;;2433   #endif
;;;2434   		}	
;;;2435   	}
;;;2436   
;;;2437   else if(kb_full_ver)
;;;2438   	{
;;;2439   	
;;;2440   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2441   
;;;2442   	if( abs(bat[0]._Ib) > IKB ) 
;;;2443   		{
;;;2444   		if(kb_start[0]==1)
;;;2445   			{
;;;2446   			kb_start[0]=0;
;;;2447   			avar_bat_hndl(0,0);
;;;2448   			}
;;;2449   		}
;;;2450   
;;;2451   	if( abs(bat[1]._Ib) > IKB ) 
;;;2452   		{
;;;2453   		if(kb_start[1]==1)
;;;2454   			{
;;;2455   			kb_start[1]=0;
;;;2456   			avar_bat_hndl(1,0);
;;;2457   			}
;;;2458   		}
;;;2459   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2460   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2461   		{
;;;2462   		if(kb_start_ips==1)
;;;2463   			{
;;;2464   			kb_start_ips=0;
;;;2465   			avar_bat_ips_hndl(0);
;;;2466   			}
;;;2467   		}
;;;2468   #endif
;;;2469   
;;;2470   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2471   		{
;;;2472   		kb_full_ver=0;
;;;2473   		}
;;;2474   
;;;2475   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2476   		{
;;;2477   		kb_full_ver=0;
;;;2478   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2479   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2480   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2481   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2482   #endif
;;;2483   		}
;;;2484   	}
;;;2485   
;;;2486   }
00265e  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9826|
002662  f8aa7056          STRH     r7,[r10,#0x56]        ;2343
002666  e7d0              B        |L1.9738|
                  |L1.9832|
002668  f8aa7056          STRH     r7,[r10,#0x56]        ;2353
00266c  e7e2              B        |L1.9780|
                  |L1.9838|
00266e  2001              MOVS     r0,#1                 ;2365
002670  f7fffffe          BL       avar_bat_ips_hndl
002674  f88a501d          STRB     r5,[r10,#0x1d]        ;2366
                  |L1.9848|
002678  e7f1              B        |L1.9822|
                  |L1.9850|
00267a  f9b10056          LDRSH    r0,[r1,#0x56]         ;2378  ; kb_cnt_2lev
00267e  b380              CBZ      r0,|L1.9954|
002680  f1a00001          SUB      r0,r0,#1              ;2380
002684  b200              SXTH     r0,r0                 ;2380
002686  460f              MOV      r7,r1                 ;2380
002688  f8a10056          STRH     r0,[r1,#0x56]         ;2380
00268c  2805              CMP      r0,#5                 ;2382
00268e  dd06              BLE      |L1.9886|
002690  230f              MOVS     r3,#0xf               ;2382
002692  22c8              MOVS     r2,#0xc8              ;2382
002694  2164              MOVS     r1,#0x64              ;2382
002696  20e1              MOVS     r0,#0xe1              ;2382
002698  f7fffffe          BL       mess_send
00269c  e007              B        |L1.9902|
                  |L1.9886|
00269e  2800              CMP      r0,#0                 ;2383
0026a0  dd05              BLE      |L1.9902|
0026a2  230f              MOVS     r3,#0xf               ;2383
0026a4  22c8              MOVS     r2,#0xc8              ;2383
0026a6  2169              MOVS     r1,#0x69              ;2383
0026a8  20e1              MOVS     r0,#0xe1              ;2383
0026aa  f7fffffe          BL       mess_send
                  |L1.9902|
0026ae  f8b70056          LDRH     r0,[r7,#0x56]         ;2386  ; kb_cnt_2lev
0026b2  2805              CMP      r0,#5                 ;2386
0026b4  d111              BNE      |L1.9946|
0026b6  f9b60008          LDRSH    r0,[r6,#8]            ;2388  ; bat
0026ba  f7fffffe          BL       abs
0026be  f8a80000          STRH     r0,[r8,#0]            ;2388
0026c2  f9b60054          LDRSH    r0,[r6,#0x54]         ;2389  ; bat
0026c6  f7fffffe          BL       abs
0026ca  f8a80002          STRH     r0,[r8,#2]            ;2389
0026ce  f9ba0000          LDRSH    r0,[r10,#0]           ;2390  ; Ib_ips_termokompensat
0026d2  f7fffffe          BL       abs
0026d6  f8a7005a          STRH     r0,[r7,#0x5a]         ;2390
                  |L1.9946|
0026da  4808              LDR      r0,|L1.9980|
0026dc  f8b00056          LDRH     r0,[r0,#0x56]         ;2393  ; kb_cnt_2lev
0026e0  e026              B        |L1.10032|
                  |L1.9954|
0026e2  e087              B        |L1.10228|
                  |L1.9956|
0026e4  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
0026e8  d4ced0cc
0026ec  cec2ced7
0026f0  cddbc920
0026f4  202020  
0026f7  2000              DCB      " ",0
0026f9  00                DCB      0
0026fa  00                DCB      0
0026fb  00                DCB      0
                  |L1.9980|
                          DCD      ||area_number.25||
                  |L1.9984|
                          DCD      speedChrgBlckStat
                  |L1.9988|
                          DCD      TBAT
                  |L1.9992|
                          DCD      Ib_ips_termokompensat
                  |L1.9996|
                          DCD      bat
                  |L1.10000|
                          DCD      IKB
                  |L1.10004|
                          DCD      BAT_IS_ON
                  |L1.10008|
                          DCD      ips_bat_av_vzvod
                  |L1.10012|
                          DCD      bat_ips
                  |L1.10016|
                          DCD      net_av
                  |L1.10020|
                          DCD      SMART_SPC
                  |L1.10024|
                          DCD      sp_ch_stat
                  |L1.10028|
                          DCD      KB_ALGORITM
                  |L1.10032|
002730  2800              CMP      r0,#0                 ;2393
                  |L1.10034|
002732  d194              BNE      |L1.9822|
002734  f9b60008          LDRSH    r0,[r6,#8]            ;2395  ; bat
002738  f7fffffe          BL       abs
00273c  4fff              LDR      r7,|L1.11068|
00273e  8038              STRH     r0,[r7,#0]            ;2395
002740  f9b60054          LDRSH    r0,[r6,#0x54]         ;2396  ; bat
002744  f7fffffe          BL       abs
002748  8078              STRH     r0,[r7,#2]            ;2396
00274a  f9ba0000          LDRSH    r0,[r10,#0]           ;2397  ; Ib_ips_termokompensat
00274e  f7fffffe          BL       abs
002752  f1a70a94          SUB      r10,r7,#0x94          ;2397
002756  f8aa005c          STRH     r0,[r10,#0x5c]        ;2397
00275a  f88a501c          STRB     r5,[r10,#0x1c]        ;2399
00275e  f9b80000          LDRSH    r0,[r8,#0]            ;2401  ; ibat
002762  f9b71000          LDRSH    r1,[r7,#0]            ;2401  ; ibat_
002766  4408              ADD      r0,r0,r1              ;2401
002768  f9b91000          LDRSH    r1,[r9,#0]            ;2401  ; IKB
00276c  4288              CMP      r0,r1                 ;2401
00276e  da02              BGE      |L1.10102|
002770  7820              LDRB     r0,[r4,#0]            ;2401  ; kb_start
002772  2801              CMP      r0,#1                 ;2401
002774  d032              BEQ      |L1.10204|
                  |L1.10102|
002776  f9b60002          LDRSH    r0,[r6,#2]            ;2405  ; bat
00277a  28c8              CMP      r0,#0xc8              ;2405
00277c  dd04              BLE      |L1.10120|
00277e  7025              STRB     r5,[r4,#0]            ;2407
002780  2100              MOVS     r1,#0                 ;2408
002782  4608              MOV      r0,r1                 ;2408
002784  f7fffffe          BL       avar_bat_hndl
                  |L1.10120|
002788  f9b80002          LDRSH    r0,[r8,#2]            ;2411  ; ibat
00278c  f9b71002          LDRSH    r1,[r7,#2]            ;2411  ; ibat_
002790  4408              ADD      r0,r0,r1              ;2411
002792  f9b91000          LDRSH    r1,[r9,#0]            ;2411  ; IKB
002796  4288              CMP      r0,r1                 ;2411
002798  da02              BGE      |L1.10144|
00279a  7860              LDRB     r0,[r4,#1]            ;2411  ; kb_start
00279c  2801              CMP      r0,#1                 ;2411
00279e  d020              BEQ      |L1.10210|
                  |L1.10144|
0027a0  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2415  ; bat
0027a4  28c8              CMP      r0,#0xc8              ;2415
0027a6  dd04              BLE      |L1.10162|
0027a8  7065              STRB     r5,[r4,#1]            ;2417
0027aa  2100              MOVS     r1,#0                 ;2418
0027ac  2001              MOVS     r0,#1                 ;2418
0027ae  f7fffffe          BL       avar_bat_hndl
                  |L1.10162|
0027b2  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2421  ; ibat_ips
0027b6  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2421  ; ibat_ips_
0027ba  4408              ADD      r0,r0,r1              ;2421
0027bc  f9b91000          LDRSH    r1,[r9,#0]            ;2421  ; IKB
0027c0  4288              CMP      r0,r1                 ;2421
0027c2  f6bfaf59          BGE      |L1.9848|
0027c6  f89a001d          LDRB     r0,[r10,#0x1d]        ;2421  ; kb_start_ips
0027ca  2801              CMP      r0,#1                 ;2421
0027cc  d1b1              BNE      |L1.10034|
0027ce  48dc              LDR      r0,|L1.11072|
0027d0  8800              LDRH     r0,[r0,#0]            ;2423  ; KB_ALGORITM
0027d2  2802              CMP      r0,#2                 ;2423
0027d4  d008              BEQ      |L1.10216|
0027d6  f88ab01c          STRB     r11,[r10,#0x1c]       ;2430
                  |L1.10202|
0027da  e740              B        |L1.9822|
                  |L1.10204|
0027dc  f88ab01c          STRB     r11,[r10,#0x1c]       ;2403
0027e0  e7d2              B        |L1.10120|
                  |L1.10210|
0027e2  f88ab01c          STRB     r11,[r10,#0x1c]       ;2413
0027e6  e7e4              B        |L1.10162|
                  |L1.10216|
0027e8  2001              MOVS     r0,#1                 ;2425
0027ea  f7fffffe          BL       avar_bat_ips_hndl
0027ee  f88a501d          STRB     r5,[r10,#0x1d]        ;2426
0027f2  e734              B        |L1.9822|
                  |L1.10228|
0027f4  7f08              LDRB     r0,[r1,#0x1c]         ;2437  ; kb_full_ver
0027f6  4688              MOV      r8,r1                 ;2437
0027f8  2800              CMP      r0,#0                 ;2437
0027fa  d0ee              BEQ      |L1.10202|
0027fc  230f              MOVS     r3,#0xf               ;2440
0027fe  2200              MOVS     r2,#0                 ;2440
002800  216e              MOVS     r1,#0x6e              ;2440
002802  20e1              MOVS     r0,#0xe1              ;2440
002804  f7fffffe          BL       mess_send
002808  f9b60008          LDRSH    r0,[r6,#8]            ;2442  ; bat
00280c  f7fffffe          BL       abs
002810  f9b91000          LDRSH    r1,[r9,#0]            ;2442  ; IKB
002814  4288              CMP      r0,r1                 ;2442
002816  dd07              BLE      |L1.10280|
002818  7820              LDRB     r0,[r4,#0]            ;2444  ; kb_start
00281a  2801              CMP      r0,#1                 ;2444
00281c  d104              BNE      |L1.10280|
00281e  7025              STRB     r5,[r4,#0]            ;2446
002820  2100              MOVS     r1,#0                 ;2447
002822  4608              MOV      r0,r1                 ;2447
002824  f7fffffe          BL       avar_bat_hndl
                  |L1.10280|
002828  f9b60054          LDRSH    r0,[r6,#0x54]         ;2451  ; bat
00282c  f7fffffe          BL       abs
002830  f9b91000          LDRSH    r1,[r9,#0]            ;2451  ; IKB
002834  4288              CMP      r0,r1                 ;2451
002836  dd06              BLE      |L1.10310|
002838  7860              LDRB     r0,[r4,#1]            ;2453  ; kb_start
00283a  2801              CMP      r0,#1                 ;2453
00283c  d103              BNE      |L1.10310|
00283e  7065              STRB     r5,[r4,#1]            ;2455
002840  2100              MOVS     r1,#0                 ;2456
002842  f7fffffe          BL       avar_bat_hndl
                  |L1.10310|
002846  f9ba0000          LDRSH    r0,[r10,#0]           ;2460  ; Ib_ips_termokompensat
00284a  f7fffffe          BL       abs
00284e  f9b91000          LDRSH    r1,[r9,#0]            ;2460  ; IKB
002852  4288              CMP      r0,r1                 ;2460
002854  dd08              BLE      |L1.10344|
002856  f898001d          LDRB     r0,[r8,#0x1d]         ;2462  ; kb_start_ips
00285a  2801              CMP      r0,#1                 ;2462
00285c  d104              BNE      |L1.10344|
00285e  f888501d          STRB     r5,[r8,#0x1d]         ;2464
002862  2000              MOVS     r0,#0                 ;2465
002864  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10344|
002868  7820              LDRB     r0,[r4,#0]            ;2470  ; kb_start
00286a  b930              CBNZ     r0,|L1.10362|
00286c  7860              LDRB     r0,[r4,#1]            ;2470  ; kb_start
00286e  b920              CBNZ     r0,|L1.10362|
002870  f898001d          LDRB     r0,[r8,#0x1d]         ;2470  ; kb_start_ips
002874  b908              CBNZ     r0,|L1.10362|
002876  f888501c          STRB     r5,[r8,#0x1c]         ;2472
                  |L1.10362|
00287a  20e6              MOVS     r0,#0xe6              ;2475
00287c  f7fffffe          BL       mess_find
002880  b118              CBZ      r0,|L1.10378|
002882  48b0              LDR      r0,|L1.11076|
002884  6800              LDR      r0,[r0,#0]            ;2475  ; mess_data
002886  28e7              CMP      r0,#0xe7              ;2475
002888  d00a              BEQ      |L1.10400|
                  |L1.10378|
00288a  48af              LDR      r0,|L1.11080|
00288c  49af              LDR      r1,|L1.11084|
00288e  f9b00000          LDRSH    r0,[r0,#0]            ;2475  ; USIGN
002892  f9b11000          LDRSH    r1,[r1,#0]            ;2475  ; load_U
002896  eb000080          ADD      r0,r0,r0,LSL #2       ;2475
00289a  ebb10f40          CMP      r1,r0,LSL #1          ;2475
                  |L1.10398|
00289e  da9c              BGE      |L1.10202|
                  |L1.10400|
0028a0  f888501c          STRB     r5,[r8,#0x1c]         ;2477
0028a4  7820              LDRB     r0,[r4,#0]            ;2478  ; kb_start
0028a6  4daa              LDR      r5,|L1.11088|
0028a8  2801              CMP      r0,#1                 ;2478
0028aa  d10f              BNE      |L1.10444|
0028ac  f9b90000          LDRSH    r0,[r9,#0]            ;2478  ; IKB
0028b0  f9b51000          LDRSH    r1,[r5,#0]            ;2478  ; load_I
0028b4  0040              LSLS     r0,r0,#1              ;2478
0028b6  fb90f0f7          SDIV     r0,r0,r7              ;2478
0028ba  4288              CMP      r0,r1                 ;2478
0028bc  da06              BGE      |L1.10444|
0028be  f896003d          LDRB     r0,[r6,#0x3d]         ;2478  ; bat
0028c2  07c0              LSLS     r0,r0,#31             ;2478
0028c4  d102              BNE      |L1.10444|
0028c6  2101              MOVS     r1,#1                 ;2478
0028c8  f7fffffe          BL       avar_bat_hndl
                  |L1.10444|
0028cc  7860              LDRB     r0,[r4,#1]            ;2479  ; kb_start
0028ce  2801              CMP      r0,#1                 ;2479
0028d0  d110              BNE      |L1.10484|
0028d2  f9b90000          LDRSH    r0,[r9,#0]            ;2479  ; IKB
0028d6  f9b51000          LDRSH    r1,[r5,#0]            ;2479  ; load_I
0028da  0040              LSLS     r0,r0,#1              ;2479
0028dc  fb90f0f7          SDIV     r0,r0,r7              ;2479
0028e0  4288              CMP      r0,r1                 ;2479
0028e2  da07              BGE      |L1.10484|
0028e4  f8960089          LDRB     r0,[r6,#0x89]         ;2479  ; bat
0028e8  07c0              LSLS     r0,r0,#31             ;2479
0028ea  d103              BNE      |L1.10484|
0028ec  2101              MOVS     r1,#1                 ;2479
0028ee  4608              MOV      r0,r1                 ;2479
0028f0  f7fffffe          BL       avar_bat_hndl
                  |L1.10484|
0028f4  f898001d          LDRB     r0,[r8,#0x1d]         ;2481  ; kb_start_ips
0028f8  2801              CMP      r0,#1                 ;2481
                  |L1.10490|
0028fa  f47faebd          BNE      |L1.9848|
0028fe  f9b90000          LDRSH    r0,[r9,#0]            ;2481  ; IKB
002902  f9b51000          LDRSH    r1,[r5,#0]            ;2481  ; load_I
002906  0040              LSLS     r0,r0,#1              ;2481
002908  fb90f0f7          SDIV     r0,r0,r7              ;2481
00290c  4288              CMP      r0,r1                 ;2481
00290e  dac6              BGE      |L1.10398|
002910  4890              LDR      r0,|L1.11092|
002912  f890003d          LDRB     r0,[r0,#0x3d]         ;2481  ; bat_ips
002916  07c0              LSLS     r0,r0,#31             ;2481
002918  d1ef              BNE      |L1.10490|
00291a  e8bd5ff0          POP      {r4-r12,lr}           ;2481
00291e  2001              MOVS     r0,#1                 ;2481
002920  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2487   
                          ENDP

                  samokalibr_hndl PROC
;;;2496   //-----------------------------------------------
;;;2497   void samokalibr_hndl(void)
002924  4770              BX       lr
;;;2498   {
;;;2499   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2500   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2501   
;;;2502   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2503   	{
;;;2504   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2505   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2506   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2507   	} 
;;;2508   
;;;2509   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2510   	{
;;;2511   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2512   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2513   	
;;;2514   	}
;;;2515   #endif	 	
;;;2516   }
;;;2517   
                          ENDP

                  ubat_old_drv PROC
;;;2520   //-----------------------------------------------
;;;2521   void ubat_old_drv(void)
002926  b510              PUSH     {r4,lr}
;;;2522   {        
;;;2523   bat_u_old_cnt++;
002928  4c8b              LDR      r4,|L1.11096|
00292a  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
00292c  f1000001          ADD      r0,r0,#1
002930  8020              STRH     r0,[r4,#0]
;;;2524   gran_ring(&bat_u_old_cnt,0,8);
002932  f04f0208          MOV      r2,#8
002936  f04f0100          MOV      r1,#0
00293a  4620              MOV      r0,r4
00293c  f7fffffe          BL       gran_ring
;;;2525   
;;;2526   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002940  4986              LDR      r1,|L1.11100|
002942  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002946  eb010040          ADD      r0,r1,r0,LSL #1
00294a  884a              LDRH     r2,[r1,#2]  ; bat
00294c  8402              STRH     r2,[r0,#0x20]
;;;2527   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
00294e  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
002952  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2528   }
002956  bd10              POP      {r4,pc}
;;;2529   
                          ENDP

                  unet_drv PROC
;;;2530   //-----------------------------------------------
;;;2531   void unet_drv(void)
002958  e92d41f0          PUSH     {r4-r8,lr}
;;;2532   {
;;;2533   if(net_av_2min_timer)net_av_2min_timer--;
00295c  4980              LDR      r1,|L1.11104|
00295e  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
002962  b110              CBZ      r0,|L1.10602|
002964  f1a00001          SUB      r0,r0,#1
002968  8008              STRH     r0,[r1,#0]
                  |L1.10602|
;;;2534   
;;;2535   if(net_U<UMN)
00296a  4f7e              LDR      r7,|L1.11108|
00296c  487e              LDR      r0,|L1.11112|
;;;2536   	{
;;;2537   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
00296e  4a80              LDR      r2,|L1.11120|
;;;2538   		{
;;;2539   		unet_drv_cnt++;
;;;2540   		if(unet_drv_cnt>=10)
;;;2541   			{
;;;2542   			net_Ustore=net_U;
;;;2543   		 	avar_unet_hndl(1);
;;;2544   			
;;;2545   			}
;;;2546   		}
;;;2547   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
;;;2548   
;;;2549   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2550   	}
;;;2551   
;;;2552   else if(net_U>UMN)
;;;2553   	{                 
;;;2554   	if(unet_drv_cnt)
;;;2555   		{
;;;2556   		unet_drv_cnt--;
;;;2557   		if(unet_drv_cnt<=0)
;;;2558   			{
;;;2559   			avar_unet_hndl(0);
;;;2560   			avar_bps_reset_cnt=10;
002970  4e72              LDR      r6,|L1.11068|
002972  f9b71000          LDRSH    r1,[r7,#0]            ;2535  ; net_U
002976  f9b03000          LDRSH    r3,[r0,#0]            ;2535  ; UMN
00297a  f8df81f0          LDR      r8,|L1.11116|
00297e  f9920000          LDRSB    r0,[r2,#0]            ;2537
002982  250a              MOVS     r5,#0xa               ;2547
002984  4c7b              LDR      r4,|L1.11124|
002986  3e94              SUBS     r6,r6,#0x94
002988  4299              CMP      r1,r3                 ;2535
00298a  da1b              BGE      |L1.10692|
00298c  280a              CMP      r0,#0xa               ;2537
00298e  da0e              BGE      |L1.10670|
002990  f9b83000          LDRSH    r3,[r8,#0]            ;2537  ; main_1Hz_cnt
002994  2b0f              CMP      r3,#0xf               ;2537
002996  dd0a              BLE      |L1.10670|
002998  f1000001          ADD      r0,r0,#1              ;2539
00299c  b240              SXTB     r0,r0                 ;2539
00299e  7010              STRB     r0,[r2,#0]            ;2539
0029a0  280a              CMP      r0,#0xa               ;2540
0029a2  db07              BLT      |L1.10676|
0029a4  8021              STRH     r1,[r4,#0]            ;2542
0029a6  2001              MOVS     r0,#1                 ;2543
0029a8  f7fffffe          BL       avar_unet_hndl
0029ac  e002              B        |L1.10676|
                  |L1.10670|
0029ae  280a              CMP      r0,#0xa               ;2547
0029b0  db00              BLT      |L1.10676|
0029b2  7015              STRB     r5,[r2,#0]            ;2547
                  |L1.10676|
0029b4  f9b70000          LDRSH    r0,[r7,#0]            ;2549  ; net_U
0029b8  f9b41000          LDRSH    r1,[r4,#0]            ;2549  ; net_Ustore
0029bc  4288              CMP      r0,r1                 ;2549
0029be  da0e              BGE      |L1.10718|
0029c0  8020              STRH     r0,[r4,#0]            ;2549
0029c2  e00c              B        |L1.10718|
                  |L1.10692|
0029c4  dd0b              BLE      |L1.10718|
0029c6  b150              CBZ      r0,|L1.10718|
0029c8  f1a00001          SUB      r0,r0,#1              ;2556
0029cc  b240              SXTB     r0,r0                 ;2556
0029ce  7010              STRB     r0,[r2,#0]            ;2556
0029d0  2800              CMP      r0,#0                 ;2557
0029d2  dc04              BGT      |L1.10718|
0029d4  2000              MOVS     r0,#0                 ;2559
0029d6  f7fffffe          BL       avar_unet_hndl
0029da  f8865031          STRB     r5,[r6,#0x31]
                  |L1.10718|
;;;2561   			}
;;;2562   		}
;;;2563   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2564   	
;;;2565   	}
;;;2566   //#ifdef UKU_6U || UKU_ZVU
;;;2567   #if defined UKU_6U || defined UKU_ZVU  //o_10
;;;2568   if(net_U>UMAXN)
0029de  4866              LDR      r0,|L1.11128|
0029e0  f9b71000          LDRSH    r1,[r7,#0]  ; net_U
;;;2569   	{
;;;2570   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
0029e4  4a65              LDR      r2,|L1.11132|
0029e6  f9b00000          LDRSH    r0,[r0,#0]            ;2568  ; UMAXN
0029ea  4281              CMP      r1,r0                 ;2568
0029ec  dd1d              BLE      |L1.10794|
0029ee  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
0029f2  280a              CMP      r0,#0xa
0029f4  da0e              BGE      |L1.10772|
0029f6  f9b83000          LDRSH    r3,[r8,#0]  ; main_1Hz_cnt
0029fa  2b0f              CMP      r3,#0xf
0029fc  dd0a              BLE      |L1.10772|
;;;2571   		{
;;;2572   		unet_max_drv_cnt++;
0029fe  f1000001          ADD      r0,r0,#1
002a02  b240              SXTB     r0,r0
002a04  7010              STRB     r0,[r2,#0]
;;;2573   		if(unet_max_drv_cnt>=10)
002a06  280a              CMP      r0,#0xa
002a08  db07              BLT      |L1.10778|
;;;2574   			{
;;;2575   			net_Ustore=net_U;
002a0a  8021              STRH     r1,[r4,#0]
;;;2576   		 	avar_unet_hndl(2);
002a0c  2002              MOVS     r0,#2
002a0e  f7fffffe          BL       avar_unet_hndl
002a12  e002              B        |L1.10778|
                  |L1.10772|
;;;2577   			
;;;2578   			}
;;;2579   		}
;;;2580   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
002a14  280a              CMP      r0,#0xa
002a16  db00              BLT      |L1.10778|
002a18  7015              STRB     r5,[r2,#0]
                  |L1.10778|
;;;2581   
;;;2582   	if(net_U>net_Ustore) net_Ustore=net_U;	
002a1a  f9b70000          LDRSH    r0,[r7,#0]  ; net_U
002a1e  f9b41000          LDRSH    r1,[r4,#0]  ; net_Ustore
002a22  4288              CMP      r0,r1
002a24  dd10              BLE      |L1.10824|
002a26  8020              STRH     r0,[r4,#0]
002a28  e00e              B        |L1.10824|
                  |L1.10794|
;;;2583   	}
;;;2584   
;;;2585   else if(net_U<UMAXN)
002a2a  da0d              BGE      |L1.10824|
;;;2586   	{                 
;;;2587   	if(unet_max_drv_cnt)
002a2c  f9920000          LDRSB    r0,[r2,#0]  ; unet_max_drv_cnt
002a30  b150              CBZ      r0,|L1.10824|
;;;2588   		{
;;;2589   		unet_max_drv_cnt--;
002a32  f1a00001          SUB      r0,r0,#1
002a36  b240              SXTB     r0,r0
002a38  7010              STRB     r0,[r2,#0]
;;;2590   		if(unet_max_drv_cnt<=0)
002a3a  2800              CMP      r0,#0
002a3c  dc04              BGT      |L1.10824|
;;;2591   			{
;;;2592   			avar_unet_hndl(0);
002a3e  2000              MOVS     r0,#0
002a40  f7fffffe          BL       avar_unet_hndl
;;;2593   			avar_bps_reset_cnt=10;
002a44  f8865031          STRB     r5,[r6,#0x31]
                  |L1.10824|
;;;2594   			}
;;;2595   		}
;;;2596   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2597   	
;;;2598   	}
;;;2599   #endif /*UKU_6U*/
;;;2600   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
002a48  f8960031          LDRB     r0,[r6,#0x31]  ; avar_bps_reset_cnt
002a4c  2800              CMP      r0,#0
002a4e  d003              BEQ      |L1.10840|
002a50  f1a00001          SUB      r0,r0,#1
002a54  f8860031          STRB     r0,[r6,#0x31]
                  |L1.10840|
;;;2601   }
002a58  e8bd81f0          POP      {r4-r8,pc}
;;;2602   
                          ENDP

                  matemat PROC
;;;2604   //-----------------------------------------------
;;;2605   void matemat(void)
002a5c  e92d5fff          PUSH     {r0-r12,lr}
;;;2606   {
;;;2607   //signed short temp_SS;
;;;2608   signed long temp_SL/*,temp_SL_*/;
;;;2609   char /*temp,*/i;
;;;2610   //signed short temp_SS;
;;;2611   
;;;2612   #ifdef UKU_MGTS
;;;2613   //напряжение сети
;;;2614   temp_SL=(signed long)net_buff_;
;;;2615   temp_SL*=Kunet;
;;;2616   temp_SL/=110000L;
;;;2617   net_U=(signed short)temp_SL;
;;;2618   #endif
;;;2619   
;;;2620   #ifdef UKU_RSTKM
;;;2621   //напряжение сети
;;;2622   temp_SL=(signed long)net_buff_;
;;;2623   temp_SL*=Kunet;
;;;2624   temp_SL/=110000L;
;;;2625   net_U=(signed short)temp_SL;
;;;2626   #endif
;;;2627   
;;;2628   #ifdef UKU_3U
;;;2629   //напряжение сети
;;;2630   temp_SL=(signed long)net_buff_;
;;;2631   temp_SL*=Kunet;
;;;2632   temp_SL/=36000L;
;;;2633   net_U=(signed short)temp_SL;
;;;2634   #endif
;;;2635   
;;;2636   #ifdef UKU_6U
;;;2637   //напряжение сети
;;;2638   
;;;2639   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2640   	{
;;;2641   
;;;2642   	if(bps[11]._device==dNET_METR)
;;;2643   		{
;;;2644   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2645   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2646   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2647   
;;;2648   		temp_SL=(signed long)net_metr_buff_[0];
;;;2649   		temp_SL*=KunetA;
;;;2650   		temp_SL/=6000L;
;;;2651   		net_Ua=(signed short)temp_SL;
;;;2652   	
;;;2653   		temp_SL=(signed long)net_metr_buff_[1];
;;;2654   		temp_SL*=KunetB;
;;;2655   		temp_SL/=6000L;
;;;2656   		net_Ub=(signed short)temp_SL;
;;;2657   	
;;;2658   		temp_SL=(signed long)net_metr_buff_[2];
;;;2659   		temp_SL*=KunetC;
;;;2660   		temp_SL/=6000L;
;;;2661   		net_Uc=(signed short)temp_SL;
;;;2662   		}
;;;2663   	else
;;;2664   		{
;;;2665   		temp_SL=(signed long)net_buff_;
;;;2666   		temp_SL*=KunetA;
;;;2667   		temp_SL/=110000L;
;;;2668   		net_Ua=(signed short)temp_SL;
;;;2669   	
;;;2670   		temp_SL=(signed long)adc_buff_[3];
;;;2671   		temp_SL*=KunetB;
;;;2672   		temp_SL/=6000L;
;;;2673   		net_Ub=(signed short)temp_SL;
;;;2674   	
;;;2675   		temp_SL=(signed long)adc_buff_[10];
;;;2676   		temp_SL*=KunetC;
;;;2677   		temp_SL/=6000L;
;;;2678   		net_Uc=(signed short)temp_SL;
;;;2679   		}
;;;2680   
;;;2681   	net_U=net_Ua;
;;;2682   	if(net_Ub<net_U)net_U=net_Ub;
;;;2683   	if(net_Uc<net_U)net_U=net_Uc;
;;;2684   	//o_10_s
;;;2685   	net_Umax=net_Ua;
;;;2686   	if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2687   	if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2688   	//o_10_e
;;;2689   	}
;;;2690   else 
;;;2691   	{
;;;2692   	temp_SL=(signed long)net_buff_;
;;;2693   	temp_SL*=Kunet;
;;;2694   	temp_SL/=110000L;
;;;2695   	net_U=(signed short)temp_SL;
;;;2696   	net_Umax=(signed short)temp_SL;	  //o_10
;;;2697   	}
;;;2698   
;;;2699   
;;;2700   
;;;2701   
;;;2702   #endif
;;;2703   
;;;2704   #ifdef UKU_GLONASS
;;;2705   //напряжение сети
;;;2706   temp_SL=(signed long)net_buff_;
;;;2707   temp_SL*=Kunet;
;;;2708   temp_SL/=110000L;
;;;2709   net_U=(signed short)temp_SL;
;;;2710   #endif
;;;2711   
;;;2712   #ifdef UKU_KONTUR
;;;2713   //напряжение сети
;;;2714   temp_SL=(signed long)net_buff_;
;;;2715   temp_SL*=Kunet;
;;;2716   temp_SL/=110000L;
;;;2717   net_U=(signed short)temp_SL;
;;;2718   #endif
;;;2719   
;;;2720   #ifdef IPS_SGEP_GAZPROM
;;;2721   //напряжение сети
;;;2722   temp_SL=(signed long)net_buff_;
;;;2723   temp_SL*=Kunet;
;;;2724   temp_SL/=110000L;
;;;2725   net_U=(signed short)temp_SL;
;;;2726   #endif
;;;2727   
;;;2728   #ifdef UKU_220_V2
;;;2729   //напряжение сети
;;;2730   
;;;2731   if(AUSW_MAIN==22033)
;;;2732   	{
;;;2733   	temp_SL=(signed long)net_buff_;
;;;2734   	temp_SL*=KunetA;
;;;2735   	temp_SL/=6000L;
;;;2736   	net_Ua=(signed short)temp_SL;
;;;2737   
;;;2738   	temp_SL=(signed long)adc_buff_[3];
;;;2739   	temp_SL*=KunetB;
;;;2740   	temp_SL/=6000L;
;;;2741   	net_Ub=(signed short)temp_SL;
;;;2742   
;;;2743   	temp_SL=(signed long)adc_buff_[10];
;;;2744   	temp_SL*=KunetC;
;;;2745   	temp_SL/=6000L;
;;;2746   	net_Uc=(signed short)temp_SL;
;;;2747   
;;;2748   	net_U=net_Ua;
;;;2749   	if(net_Ub<net_U)net_U=net_Ub;
;;;2750   	if(net_Uc<net_U)net_U=net_Uc;
;;;2751   	}
;;;2752   else
;;;2753   	{
;;;2754   	temp_SL=(signed long)net_buff_;
;;;2755   	temp_SL*=Kunet;
;;;2756   	temp_SL/=5000L;
;;;2757   	net_U=(signed short)temp_SL;
;;;2758   	}
;;;2759   #endif
;;;2760   
;;;2761   
;;;2762   #ifdef UKU_220
;;;2763   //напряжение сети
;;;2764   
;;;2765   if(AUSW_MAIN==22035)
;;;2766   	{
;;;2767   	temp_SL=(signed long)net_buff_;
;;;2768   	temp_SL*=KunetA;
;;;2769   	temp_SL/=6000L;
;;;2770   	net_Ua=(signed short)temp_SL;
;;;2771   
;;;2772   	temp_SL=(signed long)adc_buff_[3];
;;;2773   	temp_SL*=KunetB;
;;;2774   	temp_SL/=6000L;
;;;2775   	net_Ub=(signed short)temp_SL;
;;;2776   
;;;2777   	temp_SL=(signed long)adc_buff_[10];
;;;2778   	temp_SL*=KunetC;
;;;2779   	temp_SL/=6000L;
;;;2780   	net_Uc=(signed short)temp_SL;
;;;2781   
;;;2782   	net_U=net_Ua;
;;;2783   	if(net_Ub<net_U)net_U=net_Ub;
;;;2784   	if(net_Uc<net_U)net_U=net_Uc;
;;;2785   	}
;;;2786   else
;;;2787   	{
;;;2788   	temp_SL=(signed long)net_buff_;
;;;2789   	temp_SL*=Kunet;
;;;2790   	#ifdef _ACDC_
;;;2791   	temp_SL/=500L;
;;;2792   	#else
;;;2793   	temp_SL/=5000L;
;;;2794   	#endif
;;;2795   	net_U=(signed short)temp_SL;
;;;2796   	
;;;2797   	}
;;;2798   #endif
;;;2799   
;;;2800   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2801   //напряжение сети
;;;2802   
;;;2803   
;;;2804   	if(bps[11]._device==dNET_METR)
002a60  4847              LDR      r0,|L1.11136|
;;;2805   		{
;;;2806   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2807   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2808   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2809   
;;;2810   		temp_SL=(signed long)net_metr_buff_[2];
;;;2811   		temp_SL*=KunetA;
002a62  4a48              LDR      r2,|L1.11140|
;;;2812   		temp_SL/=6000L;
;;;2813   		net_Ua=(signed short)temp_SL;
;;;2814   	
;;;2815   		temp_SL=(signed long)net_metr_buff_[1];
;;;2816   		temp_SL*=KunetB;
;;;2817   		temp_SL/=6000L;
;;;2818   		net_Ub=(signed short)temp_SL;
;;;2819   	
;;;2820   		temp_SL=(signed long)net_metr_buff_[0];
;;;2821   		temp_SL*=KunetC;
002a64  4b49              LDR      r3,|L1.11148|
002a66  f890044c          LDRB     r0,[r0,#0x44c]        ;2804  ; bps
002a6a  9003              STR      r0,[sp,#0xc]          ;2811
002a6c  4946              LDR      r1,|L1.11144|
;;;2822   		temp_SL/=6000L;
;;;2823   		net_Uc=(signed short)temp_SL;
;;;2824   
;;;2825   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2826   
;;;2827   		net_U=net_Ua;
;;;2828   		if(net_Ub<net_U)net_U=net_Ub;
;;;2829   		if(net_Uc<net_U)net_U=net_Uc;
;;;2830   		//o_10_s
;;;2831   		net_Umax=net_Ua;
;;;2832   		if(net_Ub>net_Umax)net_Umax=net_Ub;
;;;2833   		if(net_Uc>net_Umax)net_Umax=net_Uc;
;;;2834   		//o_10_e
;;;2835   		}
;;;2836   	  else if(AUSW_MAIN==22033)
;;;2837   	{
;;;2838   	temp_SL=(signed long)net_buff_;
002a6e  4e33              LDR      r6,|L1.11068|
002a70  f9b28000          LDRSH    r8,[r2,#0]            ;2811
002a74  f9b39000          LDRSH    r9,[r3,#0]            ;2821
002a78  f9b12000          LDRSH    r2,[r1,#0]            ;2816
002a7c  f8dfc110          LDR      r12,|L1.11152|
002a80  4d44              LDR      r5,|L1.11156|
002a82  4c45              LDR      r4,|L1.11160|
002a84  4b45              LDR      r3,|L1.11164|
002a86  3e94              SUBS     r6,r6,#0x94
002a88  2807              CMP      r0,#7                 ;2804
002a8a  d040              BEQ      |L1.11022|
002a8c  4631              MOV      r1,r6
;;;2839   	temp_SL*=KunetA;
;;;2840   	temp_SL/=4000L;
;;;2841   	net_Ua=(signed short)temp_SL;
;;;2842   
;;;2843   	temp_SL=(signed long)adc_buff_[3];
002a8e  f8dfa114          LDR      r10,|L1.11172|
002a92  8f4f              LDRH     r7,[r1,#0x3a]         ;2838
002a94  493b              LDR      r1,|L1.11140|
002a96  4a3c              LDR      r2,|L1.11144|
002a98  f2417970          MOV      r9,#0x1770            ;2812
002a9c  f9b11000          LDRSH    r1,[r1,#0]            ;2811
002aa0  f9b22000          LDRSH    r2,[r2,#0]            ;2816
002aa4  434f              MULS     r7,r1,r7              ;2839
002aa6  f9ba1006          LDRSH    r1,[r10,#6]
002aaa  483d              LDR      r0,|L1.11168|
;;;2844   	temp_SL*=KunetB;
002aac  4351              MULS     r1,r2,r1
;;;2845   	temp_SL/=6000L;
002aae  fb91f1f9          SDIV     r1,r1,r9
;;;2846   	net_Ub=(signed short)temp_SL;
002ab2  b20a              SXTH     r2,r1
;;;2847   
;;;2848   	temp_SL=(signed long)adc_buff_[10];
002ab4  f9ba1014          LDRSH    r1,[r10,#0x14]
002ab8  f8dfa0d0          LDR      r10,|L1.11148|
002abc  8800              LDRH     r0,[r0,#0]            ;2836  ; AUSW_MAIN
002abe  f2456811          MOV      r8,#0x5611            ;2836
002ac2  f9baa000          LDRSH    r10,[r10,#0]          ;2821
002ac6  4540              CMP      r0,r8                 ;2836
;;;2849   	temp_SL*=KunetC;
002ac8  fb01f10a          MUL      r1,r1,r10
;;;2850   	temp_SL/=6000L;
002acc  fb91f1f9          SDIV     r1,r1,r9
;;;2851   	net_Uc=(signed short)temp_SL;
002ad0  b209              SXTH     r1,r1
002ad2  d16b              BNE      |L1.11180|
002ad4  f44f607a          MOV      r0,#0xfa0             ;2840
002ad8  fb97f0f0          SDIV     r0,r7,r0              ;2840
002adc  b200              SXTH     r0,r0                 ;2841
002ade  f8ac0000          STRH     r0,[r12,#0]           ;2841
002ae2  802a              STRH     r2,[r5,#0]            ;2846
002ae4  8021              STRH     r1,[r4,#0]
;;;2852   
;;;2853   	net_U=net_Ua;
002ae6  4c1f              LDR      r4,|L1.11108|
002ae8  8020              STRH     r0,[r4,#0]
;;;2854   	if(net_Ub<net_U)net_U=net_Ub;
002aea  4282              CMP      r2,r0
002aec  da00              BGE      |L1.10992|
002aee  8022              STRH     r2,[r4,#0]
                  |L1.10992|
;;;2855   	if(net_Uc<net_U)net_U=net_Uc;
002af0  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002af4  42a9              CMP      r1,r5
002af6  da00              BGE      |L1.11002|
002af8  8021              STRH     r1,[r4,#0]
                  |L1.11002|
;;;2856   	//o_10_s
;;;2857   	net_Umax=net_Ua;
002afa  8018              STRH     r0,[r3,#0]
;;;2858   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002afc  4282              CMP      r2,r0
002afe  dd00              BLE      |L1.11010|
002b00  801a              STRH     r2,[r3,#0]
                  |L1.11010|
;;;2859   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002b02  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002b06  4281              CMP      r1,r0
002b08  dd00              BLE      |L1.11020|
002b0a  8019              STRH     r1,[r3,#0]
                  |L1.11020|
002b0c  e0cf              B        |L1.11438|
                  |L1.11022|
002b0e  4926              LDR      r1,|L1.11176|
002b10  7808              LDRB     r0,[r1,#0]            ;2806  ; bps
002b12  784f              LDRB     r7,[r1,#1]            ;2806  ; bps
002b14  eb002007          ADD      r0,r0,r7,LSL #8       ;2806
002b18  4f08              LDR      r7,|L1.11068|
002b1a  b280              UXTH     r0,r0                 ;2806
002b1c  f1070758          ADD      r7,r7,#0x58           ;2806
002b20  8038              STRH     r0,[r7,#0]            ;2806
002b22  f891a002          LDRB     r10,[r1,#2]           ;2807  ; bps
002b26  f891b003          LDRB     r11,[r1,#3]           ;2807  ; bps
002b2a  eb0a2a0b          ADD      r10,r10,r11,LSL #8    ;2807
002b2e  fa1ffa8a          UXTH     r10,r10               ;2807
002b32  f8a7a002          STRH     r10,[r7,#2]           ;2807
002b36  f891b004          LDRB     r11,[r1,#4]           ;2808  ; bps
002b3a  e038              B        |L1.11182|
                  |L1.11068|
                          DCD      ||area_number.25||+0x94
                  |L1.11072|
                          DCD      KB_ALGORITM
                  |L1.11076|
                          DCD      mess_data
                  |L1.11080|
                          DCD      USIGN
                  |L1.11084|
                          DCD      load_U
                  |L1.11088|
                          DCD      load_I
                  |L1.11092|
                          DCD      bat_ips
                  |L1.11096|
                          DCD      bat_u_old_cnt
                  |L1.11100|
                          DCD      bat
                  |L1.11104|
                          DCD      net_av_2min_timer
                  |L1.11108|
                          DCD      net_U
                  |L1.11112|
                          DCD      UMN
                  |L1.11116|
                          DCD      main_1Hz_cnt
                  |L1.11120|
                          DCD      unet_drv_cnt
                  |L1.11124|
                          DCD      net_Ustore
                  |L1.11128|
                          DCD      UMAXN
                  |L1.11132|
                          DCD      unet_max_drv_cnt
                  |L1.11136|
                          DCD      bps
                  |L1.11140|
                          DCD      KunetA
                  |L1.11144|
                          DCD      KunetB
                  |L1.11148|
                          DCD      KunetC
                  |L1.11152|
                          DCD      net_Ua
                  |L1.11156|
                          DCD      net_Ub
                  |L1.11160|
                          DCD      net_Uc
                  |L1.11164|
                          DCD      net_Umax
                  |L1.11168|
                          DCD      AUSW_MAIN
                  |L1.11172|
                          DCD      ||.bss||+0x40c
                  |L1.11176|
                          DCD      bps+0x452
                  |L1.11180|
002bac  e036              B        |L1.11292|
                  |L1.11182|
002bae  f891e005          LDRB     lr,[r1,#5]            ;2808  ; bps
002bb2  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2808
002bb6  fa1ffb8b          UXTH     r11,r11               ;2808
002bba  f8a7b004          STRH     r11,[r7,#4]           ;2808
002bbe  fb0bfb08          MUL      r11,r11,r8            ;2811
002bc2  f2417870          MOV      r8,#0x1770            ;2812
002bc6  fb9bf7f8          SDIV     r7,r11,r8             ;2812
002bca  b23f              SXTH     r7,r7                 ;2813
002bcc  f8ac7000          STRH     r7,[r12,#0]           ;2813
002bd0  fb0afa02          MUL      r10,r10,r2            ;2816
002bd4  fb9af2f8          SDIV     r2,r10,r8             ;2817
002bd8  b212              SXTH     r2,r2                 ;2818
002bda  802a              STRH     r2,[r5,#0]            ;2818
002bdc  fb00f009          MUL      r0,r0,r9              ;2821
002be0  fb90f0f8          SDIV     r0,r0,r8              ;2822
002be4  b200              SXTH     r0,r0                 ;2823
002be6  8020              STRH     r0,[r4,#0]            ;2823
002be8  798c              LDRB     r4,[r1,#6]            ;2825  ; bps
002bea  79c9              LDRB     r1,[r1,#7]            ;2825  ; bps
002bec  eb042401          ADD      r4,r4,r1,LSL #8       ;2825
002bf0  49ff              LDR      r1,|L1.12272|
002bf2  800c              STRH     r4,[r1,#0]            ;2825
002bf4  49ff              LDR      r1,|L1.12276|
002bf6  800f              STRH     r7,[r1,#0]            ;2827
002bf8  42ba              CMP      r2,r7                 ;2828
002bfa  da00              BGE      |L1.11262|
002bfc  800a              STRH     r2,[r1,#0]            ;2828
                  |L1.11262|
002bfe  f9b14000          LDRSH    r4,[r1,#0]            ;2829  ; net_U
002c02  42a0              CMP      r0,r4                 ;2829
002c04  da00              BGE      |L1.11272|
002c06  8008              STRH     r0,[r1,#0]            ;2829
                  |L1.11272|
002c08  801f              STRH     r7,[r3,#0]            ;2831
002c0a  42ba              CMP      r2,r7                 ;2832
002c0c  dd00              BLE      |L1.11280|
002c0e  801a              STRH     r2,[r3,#0]            ;2832
                  |L1.11280|
002c10  f9b31000          LDRSH    r1,[r3,#0]            ;2833  ; net_Umax
002c14  4288              CMP      r0,r1                 ;2833
002c16  dd4a              BLE      |L1.11438|
002c18  8018              STRH     r0,[r3,#0]            ;2833
002c1a  e048              B        |L1.11438|
                  |L1.11292|
;;;2860   	//o_10_e
;;;2861   	}
;;;2862   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002c1c  f5a048ac          SUB      r8,r0,#0x5600
002c20  f1b8082f          SUBS     r8,r8,#0x2f
002c24  d00b              BEQ      |L1.11326|
002c26  f1180828          ADDS     r8,r8,#0x28
002c2a  d008              BEQ      |L1.11326|
002c2c  f1b80814          SUBS     r8,r8,#0x14
002c30  d005              BEQ      |L1.11326|
002c32  f1b80801          SUBS     r8,r8,#1
002c36  d002              BEQ      |L1.11326|
002c38  f118081a          ADDS     r8,r8,#0x1a
002c3c  d11c              BNE      |L1.11384|
                  |L1.11326|
;;;2863   	{
;;;2864   	temp_SL=(signed long)net_buff_;
;;;2865   	temp_SL*=KunetA;
;;;2866   	temp_SL/=40000L;
002c3e  f6494040          MOV      r0,#0x9c40
002c42  fb97f0f0          SDIV     r0,r7,r0
;;;2867   	net_Ua=(signed short)temp_SL;
002c46  b200              SXTH     r0,r0
002c48  f8ac0000          STRH     r0,[r12,#0]
;;;2868   
;;;2869   	temp_SL=(signed long)adc_buff_[3];
;;;2870   	temp_SL*=KunetB;
;;;2871   	temp_SL/=6000L;
;;;2872   	net_Ub=(signed short)temp_SL;
002c4c  802a              STRH     r2,[r5,#0]
;;;2873   
;;;2874   	temp_SL=(signed long)adc_buff_[10];
;;;2875   	temp_SL*=KunetC;
;;;2876   	temp_SL/=6000L;
;;;2877   	net_Uc=(signed short)temp_SL;
002c4e  8021              STRH     r1,[r4,#0]
;;;2878   
;;;2879   	net_U=net_Ua;
002c50  4ce8              LDR      r4,|L1.12276|
002c52  8020              STRH     r0,[r4,#0]
;;;2880   	if(net_Ub<net_U)net_U=net_Ub;
002c54  4282              CMP      r2,r0
002c56  da00              BGE      |L1.11354|
002c58  8022              STRH     r2,[r4,#0]
                  |L1.11354|
;;;2881   	if(net_Uc<net_U)net_U=net_Uc;
002c5a  f9b45000          LDRSH    r5,[r4,#0]  ; net_U
002c5e  42a9              CMP      r1,r5
002c60  da00              BGE      |L1.11364|
002c62  8021              STRH     r1,[r4,#0]
                  |L1.11364|
;;;2882   	//o_10_s
;;;2883   	net_Umax=net_Ua;
002c64  8018              STRH     r0,[r3,#0]
;;;2884   	if(net_Ub>net_Umax)net_Umax=net_Ub;
002c66  4282              CMP      r2,r0
002c68  dd00              BLE      |L1.11372|
002c6a  801a              STRH     r2,[r3,#0]
                  |L1.11372|
;;;2885   	if(net_Uc>net_Umax)net_Umax=net_Uc;
002c6c  f9b30000          LDRSH    r0,[r3,#0]  ; net_Umax
002c70  4281              CMP      r1,r0
002c72  dd1c              BLE      |L1.11438|
002c74  8019              STRH     r1,[r3,#0]
002c76  e01a              B        |L1.11438|
                  |L1.11384|
;;;2886   	//o_10_e
;;;2887   	}
;;;2888   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2889   	{
;;;2890   	temp_SL=(signed long)net_buff_;
;;;2891   	temp_SL*=Kunet;
002c78  49df              LDR      r1,|L1.12280|
002c7a  f5a044aa          SUB      r4,r0,#0x5500         ;2888
002c7e  f9b12000          LDRSH    r2,[r1,#0]
002c82  49de              LDR      r1,|L1.12284|
002c84  8f49              LDRH     r1,[r1,#0x3a]         ;2838
002c86  4351              MULS     r1,r2,r1
002c88  3cfa              SUBS     r4,r4,#0xfa           ;2888
002c8a  d001              BEQ      |L1.11408|
002c8c  1e62              SUBS     r2,r4,#1              ;2888
002c8e  d107              BNE      |L1.11424|
                  |L1.11408|
;;;2892   	temp_SL/=35000L;
002c90  f64800b8          MOV      r0,#0x88b8
002c94  fb91f0f0          SDIV     r0,r1,r0
;;;2893   	net_U=(signed short)temp_SL;
002c98  49d6              LDR      r1,|L1.12276|
002c9a  8008              STRH     r0,[r1,#0]
;;;2894   	net_Umax=net_U; //o_10
002c9c  8018              STRH     r0,[r3,#0]
002c9e  e006              B        |L1.11438|
                  |L1.11424|
;;;2895   	}
;;;2896   else
;;;2897   	{
;;;2898   	temp_SL=(signed long)net_buff_;
;;;2899   	temp_SL*=Kunet;
;;;2900   	#ifdef _ACDC_
;;;2901   	temp_SL/=500L;
002ca0  f44f70fa          MOV      r0,#0x1f4
002ca4  fb91f0f0          SDIV     r0,r1,r0
;;;2902   	#else
;;;2903   	temp_SL/=5000L;
;;;2904   	#endif
;;;2905   	net_U=(signed short)temp_SL;
002ca8  49d2              LDR      r1,|L1.12276|
002caa  8008              STRH     r0,[r1,#0]
;;;2906   	net_Umax=net_U; //o_10
002cac  8018              STRH     r0,[r3,#0]
                  |L1.11438|
;;;2907   	
;;;2908   	}
;;;2909   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002cae  9803              LDR      r0,[sp,#0xc]
002cb0  2807              CMP      r0,#7
002cb2  d003              BEQ      |L1.11452|
002cb4  48d2              LDR      r0,|L1.12288|
002cb6  8801              LDRH     r1,[r0,#0]  ; net_F
002cb8  48cd              LDR      r0,|L1.12272|
002cba  8001              STRH     r1,[r0,#0]
                  |L1.11452|
;;;2910   #endif
;;;2911   
;;;2912   #ifdef UKU_TELECORE2015
;;;2913   //напряжение сети
;;;2914   temp_SL=(signed long)net_buff_;
;;;2915   temp_SL*=Kunet;
;;;2916   temp_SL/=110000L;
;;;2917   net_U=(signed short)temp_SL;
;;;2918   #endif
;;;2919   
;;;2920   #ifdef UKU_TELECORE2017
;;;2921   //напряжение сети
;;;2922   temp_SL=(signed long)net_buff_;
;;;2923   temp_SL*=Kunet;
;;;2924   temp_SL/=110000L;
;;;2925   net_U=(signed short)temp_SL;
;;;2926   #endif
;;;2927   
;;;2928   //Напряжения батарей
;;;2929   temp_SL=(signed long)adc_buff_[0];
002cbc  4cd1              LDR      r4,|L1.12292|
002cbe  f9b41000          LDRSH    r1,[r4,#0]  ; adc_buff_
;;;2930   temp_SL*=Kubat[0];
002cc2  4ad1              LDR      r2,|L1.12296|
002cc4  f9b20000          LDRSH    r0,[r2,#0]  ; Kubat
002cc8  4348              MULS     r0,r1,r0
;;;2931   temp_SL/=2000L;
002cca  f44f68fa          MOV      r8,#0x7d0
002cce  fb90f0f8          SDIV     r0,r0,r8
;;;2932   bat[0]._Ub=(signed short)temp_SL;
002cd2  4dce              LDR      r5,|L1.12300|
002cd4  8068              STRH     r0,[r5,#2]
;;;2933   
;;;2934   #ifdef UKU_220
;;;2935   //Напряжения батарей
;;;2936   temp_SL=(signed long)adc_buff_[0];
;;;2937   temp_SL*=Kubat[0];
;;;2938   temp_SL/=400L;
;;;2939   bat[0]._Ub=(signed short)temp_SL;
;;;2940   #endif
;;;2941   
;;;2942   #ifdef UKU_220_V2
;;;2943   //Напряжения батарей
;;;2944   temp_SL=(signed long)adc_buff_[0];
;;;2945   temp_SL*=Kubat[0];
;;;2946   temp_SL/=400L;
;;;2947   bat[0]._Ub=(signed short)temp_SL;
;;;2948   #endif
;;;2949   
;;;2950   //adc_buff_[4]=300;
;;;2951   
;;;2952   temp_SL=(signed long)adc_buff_[4];
002cd6  f9b40008          LDRSH    r0,[r4,#8]  ; adc_buff_
;;;2953   temp_SL*=Kubatm[0];
002cda  4bcd              LDR      r3,|L1.12304|
002cdc  f9b31000          LDRSH    r1,[r3,#0]  ; Kubatm
002ce0  fb01f100          MUL      r1,r1,r0
;;;2954   temp_SL/=700L;
002ce4  f44f772f          MOV      r7,#0x2bc
002ce8  fb91f0f7          SDIV     r0,r1,r7
;;;2955   bat[0]._Ubm=(signed short)temp_SL;
002cec  80a8              STRH     r0,[r5,#4]
;;;2956   
;;;2957   #ifdef UKU_KONTUR
;;;2958   temp_SL=(signed long)adc_buff_[4];
;;;2959   temp_SL*=Kubatm[0];
;;;2960   temp_SL/=2000L;
;;;2961   bat[0]._Ubm=(signed short)temp_SL;
;;;2962   #endif
;;;2963   
;;;2964   #ifdef UKU_6U
;;;2965   temp_SL=(signed long)adc_buff_[4];
;;;2966   temp_SL*=Kubatm[0];
;;;2967   temp_SL/=2000L;
;;;2968   bat[0]._Ubm=(signed short)temp_SL;
;;;2969   #endif
;;;2970   
;;;2971   temp_SL=(signed long)adc_buff_[12];
002cee  f9b40018          LDRSH    r0,[r4,#0x18]  ; adc_buff_
;;;2972   temp_SL*=Kubat[1];
002cf2  f9b21002          LDRSH    r1,[r2,#2]  ; Kubat
002cf6  fb01f100          MUL      r1,r1,r0
;;;2973   temp_SL/=2000L;
002cfa  fb91f0f8          SDIV     r0,r1,r8
;;;2974   bat[1]._Ub=(signed short)temp_SL;
002cfe  f8a5004e          STRH     r0,[r5,#0x4e]
;;;2975   
;;;2976   #ifdef UKU_220
;;;2977   temp_SL=(signed long)adc_buff_[12];
;;;2978   temp_SL*=Kubat[1];
;;;2979   temp_SL/=400L;
;;;2980   bat[1]._Ub=(signed short)temp_SL;
;;;2981   #endif
;;;2982   
;;;2983   #ifdef UKU_220_V2
;;;2984   temp_SL=(signed long)adc_buff_[12];
;;;2985   temp_SL*=Kubat[1];
;;;2986   temp_SL/=400L;
;;;2987   bat[1]._Ub=(signed short)temp_SL;
;;;2988   #endif
;;;2989   
;;;2990   //adc_buff_[1]=300;
;;;2991   
;;;2992   temp_SL=(signed long)adc_buff_[1];
002d02  f9b41002          LDRSH    r1,[r4,#2]  ; adc_buff_
;;;2993   temp_SL*=Kubatm[1];
002d06  f9b30002          LDRSH    r0,[r3,#2]  ; Kubatm
002d0a  fb00f001          MUL      r0,r0,r1
;;;2994   temp_SL/=700L;
002d0e  fb90f0f7          SDIV     r0,r0,r7
;;;2995   bat[1]._Ubm=(signed short)temp_SL;
002d12  f8a50050          STRH     r0,[r5,#0x50]
;;;2996   #ifdef UKU_KONTUR
;;;2997   temp_SL=(signed long)adc_buff_[1];
;;;2998   temp_SL*=Kubatm[1];
;;;2999   temp_SL/=2000L;
;;;3000   bat[1]._Ubm=(signed short)temp_SL;
;;;3001   #endif
;;;3002   #ifdef UKU_6U
;;;3003   temp_SL=(signed long)adc_buff_[1];
;;;3004   temp_SL*=Kubatm[1];
;;;3005   temp_SL/=2000L;
;;;3006   bat[1]._Ubm=(signed short)temp_SL;
;;;3007   #endif
;;;3008   
;;;3009   #ifdef UKU_TELECORE2015
;;;3010   temp_SL=(signed long)adc_buff_[2];
;;;3011   temp_SL*=Kubat[0];
;;;3012   temp_SL/=2000L;
;;;3013   bat[0]._Ub=(signed short)temp_SL;
;;;3014   #endif
;;;3015   
;;;3016   /*
;;;3017   //Токи батарей
;;;3018   if(!mess_find_unvol(MESS2MATEMAT))
;;;3019   	{
;;;3020   	temp_SL=(signed long)ad7705_buff_[0];
;;;3021   	temp_SL-=(signed long)Kibat0[0];
;;;3022   	temp_SL*=(signed long)Kibat1[0];
;;;3023   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3024   	else temp_SL/=1000L;
;;;3025   	bat[0]._Ib=(signed short)temp_SL;
;;;3026   
;;;3027   	temp_SL=(signed long)ad7705_buff_[1];
;;;3028   	temp_SL-=(signed long)Kibat0[1];
;;;3029   	temp_SL*=(signed long)Kibat1[1];
;;;3030   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3031   	else temp_SL/=1000L;
;;;3032   	bat[1]._Ib=(signed short)temp_SL;
;;;3033   	}
;;;3034   */
;;;3035   
;;;3036   
;;;3037   //Токи батарей
;;;3038   if(!mess_find_unvol(MESS2MATEMAT))
002d16  f04f00dc          MOV      r0,#0xdc
002d1a  f7fffffe          BL       mess_find_unvol
;;;3039   	{
;;;3040   	temp_SL=(signed long)ad7705_buff_[0];
;;;3041   	temp_SL-=(signed long)Kibat0[0];
;;;3042   	temp_SL*=(signed long)Kibat1[0];
;;;3043   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3044   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002d1e  f2456913          MOV      r9,#0x5613
002d22  bbf0              CBNZ     r0,|L1.11682|
002d24  f8dfa2ec          LDR      r10,|L1.12308|
002d28  f8ba0000          LDRH     r0,[r10,#0]           ;3040  ; ad7705_buff_
002d2c  f8dfb2e8          LDR      r11,|L1.12312|
002d30  f8bb1000          LDRH     r1,[r11,#0]           ;3041  ; Kibat0
002d34  eba00001          SUB      r0,r0,r1              ;3041
002d38  4ab8              LDR      r2,|L1.12316|
002d3a  f9b21000          LDRSH    r1,[r2,#0]            ;3042  ; Kibat1
002d3e  fb01f100          MUL      r1,r1,r0              ;3042
002d42  48b7              LDR      r0,|L1.12320|
002d44  f6456338          MOV      r3,#0x5e38            ;3043
002d48  f6456792          MOV      r7,#0x5e92            ;3043
002d4c  8800              LDRH     r0,[r0,#0]            ;3043  ; AUSW_MAIN
002d4e  f44f7c96          MOV      r12,#0x12c            ;3043
002d52  4298              CMP      r0,r3                 ;3043
002d54  d001              BEQ      |L1.11610|
002d56  42b8              CMP      r0,r7                 ;3043
002d58  d102              BNE      |L1.11616|
                  |L1.11610|
002d5a  fb91f1fc          SDIV     r1,r1,r12             ;3043
002d5e  e010              B        |L1.11650|
                  |L1.11616|
002d60  f5a04ea8          SUB      lr,r0,#0x5400
002d64  f5be7efd          SUBS     lr,lr,#0x1fa
002d68  d004              BEQ      |L1.11636|
002d6a  4548              CMP      r0,r9
002d6c  d002              BEQ      |L1.11636|
002d6e  f1be0e17          SUBS     lr,lr,#0x17
002d72  d102              BNE      |L1.11642|
                  |L1.11636|
002d74  fb91f1f8          SDIV     r1,r1,r8
002d78  e003              B        |L1.11650|
                  |L1.11642|
;;;3045   	else temp_SL/=1000L;
002d7a  f44f7e7a          MOV      lr,#0x3e8
002d7e  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11650|
;;;3046   	#ifdef UKU_TELECORE2015
;;;3047   	temp_SL/=2L;
;;;3048   	//temp_SL=-temp_SL;
;;;3049   	#endif
;;;3050   	//#ifdef UKU_TELECORE2017
;;;3051   	//temp_SL/=-2L;
;;;3052   	//temp_SL=-temp_SL;
;;;3053   	//#endif
;;;3054   	bat[0]._Ib=(signed short)temp_SL;
002d82  8129              STRH     r1,[r5,#8]
;;;3055   
;;;3056   	temp_SL=(signed long)ad7705_buff_[1];
002d84  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3057   	temp_SL-=(signed long)Kibat0[1];
002d88  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002d8c  eba10a0a          SUB      r10,r1,r10
;;;3058   	temp_SL*=(signed long)Kibat1[1];
002d90  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002d94  fb01f10a          MUL      r1,r1,r10
;;;3059   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002d98  4298              CMP      r0,r3
002d9a  d001              BEQ      |L1.11680|
002d9c  42b8              CMP      r0,r7
002d9e  d104              BNE      |L1.11690|
                  |L1.11680|
002da0  e000              B        |L1.11684|
                  |L1.11682|
002da2  e013              B        |L1.11724|
                  |L1.11684|
002da4  fb91f0fc          SDIV     r0,r1,r12
002da8  e00e              B        |L1.11720|
                  |L1.11690|
;;;3060   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002daa  f5a042aa          SUB      r2,r0,#0x5500
002dae  3afa              SUBS     r2,r2,#0xfa
002db0  d003              BEQ      |L1.11706|
002db2  4548              CMP      r0,r9
002db4  d001              BEQ      |L1.11706|
002db6  3a17              SUBS     r2,r2,#0x17
002db8  d102              BNE      |L1.11712|
                  |L1.11706|
002dba  fb91f0f8          SDIV     r0,r1,r8
002dbe  e003              B        |L1.11720|
                  |L1.11712|
;;;3061   	else temp_SL/=1000L;
002dc0  f44f707a          MOV      r0,#0x3e8
002dc4  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11720|
;;;3062   	bat[1]._Ib=(signed short)temp_SL;
002dc8  f8a50054          STRH     r0,[r5,#0x54]
                  |L1.11724|
;;;3063   	}
;;;3064   
;;;3065   
;;;3066   
;;;3067   
;;;3068   
;;;3069   //Температуры батарей
;;;3070   
;;;3071   #ifdef UKU_KONTUR
;;;3072   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3073   else bat[0]._nd=1;
;;;3074   temp_SL=(signed long)adc_buff_[6];
;;;3075   temp_SL*=Ktbat[0];
;;;3076   temp_SL/=20000L;
;;;3077   temp_SL-=273L;
;;;3078   bat[0]._Tb=(signed short)temp_SL;
;;;3079   #else
;;;3080   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002dcc  f9b4000c          LDRSH    r0,[r4,#0xc]  ; adc_buff_
002dd0  f64031b7          MOV      r1,#0xbb7
002dd4  4684              MOV      r12,r0
002dd6  f2a03021          SUB      r0,r0,#0x321
;;;3081   else bat[0]._nd=1;
002dda  2701              MOVS     r7,#1
002ddc  2300              MOVS     r3,#0                 ;3080
002dde  9002              STR      r0,[sp,#8]            ;3080
002de0  4288              CMP      r0,r1                 ;3080
002de2  d201              BCS      |L1.11752|
002de4  732b              STRB     r3,[r5,#0xc]          ;3080
002de6  e000              B        |L1.11754|
                  |L1.11752|
002de8  732f              STRB     r7,[r5,#0xc]
                  |L1.11754|
;;;3082   temp_SL=(signed long)adc_buff_[6];
;;;3083   temp_SL*=Ktbat[0];
002dea  4a8e              LDR      r2,|L1.12324|
002dec  f9b20000          LDRSH    r0,[r2,#0]  ; Ktbat
002df0  fb00f00c          MUL      r0,r0,r12
;;;3084   temp_SL/=20000L;
002df4  f6446a20          MOV      r10,#0x4e20
002df8  fb90f0fa          SDIV     r0,r0,r10
;;;3085   temp_SL-=273L;
002dfc  f2a01011          SUB      r0,r0,#0x111
;;;3086   bat[0]._Tb=(signed short)temp_SL;
002e00  8168              STRH     r0,[r5,#0xa]
;;;3087   #endif
;;;3088   
;;;3089   #ifdef UKU_KONTUR
;;;3090   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3091   else bat[1]._nd=1;
;;;3092   temp_SL=(signed long)adc_buff_[7];
;;;3093   temp_SL*=Ktbat[1];
;;;3094   temp_SL/=20000L;
;;;3095   temp_SL-=273L;
;;;3096   bat[1]._Tb=(signed short)temp_SL;
;;;3097   #else
;;;3098   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002e02  f9b4000e          LDRSH    r0,[r4,#0xe]  ; adc_buff_
002e06  f64031b7          MOV      r1,#0xbb7
002e0a  f2a03b21          SUB      r11,r0,#0x321
002e0e  458b              CMP      r11,r1
002e10  d202              BCS      |L1.11800|
002e12  f8853058          STRB     r3,[r5,#0x58]
002e16  e001              B        |L1.11804|
                  |L1.11800|
;;;3099   else bat[1]._nd=1;
002e18  f8857058          STRB     r7,[r5,#0x58]
                  |L1.11804|
;;;3100   temp_SL=(signed long)adc_buff_[7];
;;;3101   temp_SL*=Ktbat[1];
002e1c  f9b21002          LDRSH    r1,[r2,#2]  ; Ktbat
002e20  4341              MULS     r1,r0,r1
;;;3102   temp_SL/=20000L;
002e22  f6446020          MOV      r0,#0x4e20
002e26  fb91f0f0          SDIV     r0,r1,r0
;;;3103   temp_SL-=273L;
002e2a  f2a01011          SUB      r0,r0,#0x111
;;;3104   bat[1]._Tb=(signed short)temp_SL;
002e2e  4977              LDR      r1,|L1.12300|
002e30  f8a10056          STRH     r0,[r1,#0x56]
;;;3105   #endif
;;;3106   
;;;3107   #ifdef UKU_6U
;;;3108   
;;;3109   if(NUMMAKB==2)
;;;3110   	{
;;;3111   	if(makb[0]._cnt<5)
;;;3112   		{
;;;3113   		if(makb[0]._T_nd[0]==0)
;;;3114   			{
;;;3115   			bat[0]._Tb=makb[0]._T[0];
;;;3116   			bat[0]._nd=0;
;;;3117   			}
;;;3118   		}
;;;3119   
;;;3120   	if(makb[1]._cnt<5)
;;;3121   		{
;;;3122   		if(makb[1]._T_nd[0]==0)
;;;3123   			{
;;;3124   			bat[1]._Tb=makb[1]._T[0];
;;;3125   			bat[1]._nd=0;
;;;3126   			}
;;;3127   		}
;;;3128   
;;;3129   	}
;;;3130   else if(NUMMAKB==4)
;;;3131   	{
;;;3132   	signed short temp_t;
;;;3133   	temp_t=-20;
;;;3134   	if(makb[0]._cnt<5)
;;;3135   		{
;;;3136   		if(makb[0]._T_nd[0]==0)
;;;3137   			{
;;;3138   			temp_t=makb[0]._T[0];
;;;3139   			bat[0]._nd=0;
;;;3140   			}
;;;3141   		}
;;;3142   	if(makb[1]._cnt<5)
;;;3143   		{
;;;3144   		if(makb[1]._T_nd[0]==0)
;;;3145   			{
;;;3146   			if(temp_t<makb[1]._T[0])
;;;3147   				{
;;;3148   				bat[0]._nd=0;
;;;3149   				temp_t=makb[1]._T[0];
;;;3150   				}
;;;3151   			}
;;;3152   		}
;;;3153   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3154   
;;;3155    	temp_t=-20;
;;;3156   	if(makb[2]._cnt<5)
;;;3157   		{
;;;3158   		if(makb[2]._T_nd[0]==0)
;;;3159   			{
;;;3160   			temp_t=makb[2]._T[0];
;;;3161   			bat[1]._nd=0;
;;;3162   			}
;;;3163   		}
;;;3164   	if(makb[3]._cnt<5)
;;;3165   		{
;;;3166   		if(makb[3]._T_nd[0]==0)
;;;3167   			{
;;;3168   			if(temp_t<makb[3]._T[0])
;;;3169   				{
;;;3170   				bat[1]._nd=0;
;;;3171   				temp_t=makb[3]._T[0];
;;;3172   				}
;;;3173   			}
;;;3174   		}
;;;3175   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3176   	}
;;;3177   
;;;3178   #endif
;;;3179   
;;;3180   
;;;3181   //Напряжение нагрузки
;;;3182   temp_SL=(signed long)adc_buff_[2];
002e34  f9b41004          LDRSH    r1,[r4,#4]  ; adc_buff_
;;;3183   temp_SL*=Kuload;
002e38  487b              LDR      r0,|L1.12328|
002e3a  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002e3e  fb01f000          MUL      r0,r1,r0
;;;3184   temp_SL/=2000L;
002e42  f44f62fa          MOV      r2,#0x7d0
002e46  fb90f0f2          SDIV     r0,r0,r2
;;;3185   load_U=(signed short)temp_SL;
002e4a  f8dfb1e0          LDR      r11,|L1.12332|
002e4e  f8ab0000          STRH     r0,[r11,#0]
;;;3186   
;;;3187   #ifdef UKU_220 
;;;3188   //Напряжение нагрузки
;;;3189   temp_SL=(signed long)adc_buff_[2];
;;;3190   temp_SL*=Kuload;
;;;3191   temp_SL/=350L;
;;;3192   load_U=(signed short)temp_SL;
;;;3193   #endif
;;;3194   
;;;3195   #ifdef UKU_220_V2 
;;;3196   //Напряжение нагрузки
;;;3197   temp_SL=(signed long)adc_buff_[2];
;;;3198   temp_SL*=Kuload;
;;;3199   temp_SL/=350L;
;;;3200   load_U=(signed short)temp_SL;
;;;3201   #endif
;;;3202   
;;;3203   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3204   //Напряжение шины
;;;3205   temp_SL=(signed long)adc_buff_[1];
002e52  f9b42002          LDRSH    r2,[r4,#2]  ; adc_buff_
;;;3206   temp_SL*=Kuout;
002e56  4876              LDR      r0,|L1.12336|
002e58  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002e5c  fb02f200          MUL      r2,r2,r0
;;;3207   if(AUSW_MAIN==22010)temp_SL/=400L;
002e60  486f              LDR      r0,|L1.12320|
002e62  f24555fa          MOV      r5,#0x55fa
002e66  f44f78c8          MOV      r8,#0x190
002e6a  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002e6c  42a8              CMP      r0,r5
002e6e  d102              BNE      |L1.11894|
002e70  fb92f2f8          SDIV     r2,r2,r8
002e74  e003              B        |L1.11902|
                  |L1.11894|
;;;3208   else temp_SL/=500L;
002e76  f44f7afa          MOV      r10,#0x1f4
002e7a  fb92f2fa          SDIV     r2,r2,r10
                  |L1.11902|
;;;3209   out_U=(signed short)temp_SL;
002e7e  fa0ffa82          SXTH     r10,r2
002e82  4a6c              LDR      r2,|L1.12340|
002e84  f8a2a000          STRH     r10,[r2,#0]
;;;3210   load_U=out_U;
002e88  f8aba000          STRH     r10,[r11,#0]
;;;3211   
;;;3212   //Напряжение выпрямителей
;;;3213   temp_SL=(signed long)adc_buff_[2];
;;;3214   temp_SL*=Kubps;
002e8c  4a6a              LDR      r2,|L1.12344|
002e8e  f9b22000          LDRSH    r2,[r2,#0]  ; Kubps
002e92  fb01f102          MUL      r1,r1,r2
;;;3215   if(AUSW_MAIN==22010)temp_SL/=400L;
002e96  d102              BNE      |L1.11934|
002e98  fb91f1f8          SDIV     r1,r1,r8
002e9c  e003              B        |L1.11942|
                  |L1.11934|
;;;3216   else temp_SL/=500L;
002e9e  f44f72fa          MOV      r2,#0x1f4
002ea2  fb91f1f2          SDIV     r1,r1,r2
                  |L1.11942|
;;;3217   bps_U=(signed short)temp_SL;
002ea6  4d65              LDR      r5,|L1.12348|
002ea8  b209              SXTH     r1,r1
002eaa  8029              STRH     r1,[r5,#0]
;;;3218   
;;;3219   if(bps_U<100)
;;;3220   	{
;;;3221   	char i;
;;;3222   	for(i=0;i<NUMIST;i++)
002eac  f8dfe190          LDR      lr,|L1.12352|
002eb0  2964              CMP      r1,#0x64              ;3219
002eb2  da17              BGE      |L1.12004|
002eb4  f04f0100          MOV      r1,#0
002eb8  f9be8000          LDRSH    r8,[lr,#0]
002ebc  f8dfb184          LDR      r11,|L1.12356|
002ec0  e00e              B        |L1.12000|
                  |L1.11970|
;;;3223   		{
;;;3224   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002ec2  eb0102c1          ADD      r2,r1,r1,LSL #3
002ec6  eb021201          ADD      r2,r2,r1,LSL #4
002eca  eb0b0282          ADD      r2,r11,r2,LSL #2
002ece  f9b54000          LDRSH    r4,[r5,#0]  ; bps_U
002ed2  6a12              LDR      r2,[r2,#0x20]
002ed4  42a2              CMP      r2,r4
002ed6  dd00              BLE      |L1.11994|
002ed8  802a              STRH     r2,[r5,#0]
                  |L1.11994|
002eda  f1010101          ADD      r1,r1,#1              ;3222
002ede  b2c9              UXTB     r1,r1                 ;3222
                  |L1.12000|
002ee0  4541              CMP      r1,r8                 ;3222
002ee2  dbee              BLT      |L1.11970|
                  |L1.12004|
;;;3225   		}
;;;3226   	}
;;;3227   
;;;3228   //Суммарный ток выпрямителей
;;;3229   temp_SL=0;
002ee4  f04f0500          MOV      r5,#0
;;;3230   for (i=0;i<NUMIST;i++)
002ee8  4629              MOV      r1,r5
002eea  f9be2000          LDRSH    r2,[lr,#0]            ;3222
002eee  4c55              LDR      r4,|L1.12356|
002ef0  e00b              B        |L1.12042|
                  |L1.12018|
;;;3231   	{
;;;3232   	temp_SL+=((signed long)bps[i]._Ii);
002ef2  eb0108c1          ADD      r8,r1,r1,LSL #3
002ef6  eb081801          ADD      r8,r8,r1,LSL #4
002efa  eb040888          ADD      r8,r4,r8,LSL #2
002efe  f8d88024          LDR      r8,[r8,#0x24]
002f02  4445              ADD      r5,r5,r8
002f04  f1010101          ADD      r1,r1,#1              ;3230
002f08  b2c9              UXTB     r1,r1                 ;3230
                  |L1.12042|
002f0a  4291              CMP      r1,r2                 ;3230
002f0c  dbf1              BLT      |L1.12018|
;;;3233   	}
;;;3234   bps_I=(signed short)temp_SL;
002f0e  494e              LDR      r1,|L1.12360|
002f10  800d              STRH     r5,[r1,#0]
;;;3235   
;;;3236   
;;;3237   #endif
;;;3238   
;;;3239   
;;;3240   #ifdef UKU_KONTUR
;;;3241   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3242   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3243   else ND_EXT[0]=1;
;;;3244   temp_SL=(signed long)adc_buff_[5];
;;;3245   temp_SL*=Ktext[0];
;;;3246   temp_SL/=20000L;
;;;3247   temp_SL-=273L;
;;;3248   t_ext[0]=(signed short)temp_SL;
;;;3249   #else 
;;;3250   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3251   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002f12  493c              LDR      r1,|L1.12292|
002f14  f6403bb7          MOV      r11,#0xbb7
002f18  f9b1500a          LDRSH    r5,[r1,#0xa]  ; adc_buff_
002f1c  494b              LDR      r1,|L1.12364|
002f1e  f2a53821          SUB      r8,r5,#0x321
002f22  f8cd8004          STR      r8,[sp,#4]
002f26  45d8              CMP      r8,r11
002f28  d201              BCS      |L1.12078|
002f2a  700b              STRB     r3,[r1,#0]
002f2c  e000              B        |L1.12080|
                  |L1.12078|
;;;3252   else ND_EXT[0]=1;
002f2e  700f              STRB     r7,[r1,#0]
                  |L1.12080|
;;;3253   temp_SL=(signed long)adc_buff_[5];
;;;3254   temp_SL*=Ktext[0];
002f30  f8df811c          LDR      r8,|L1.12368|
002f34  f9b88000          LDRSH    r8,[r8,#0]  ; Ktext
002f38  fb08fb05          MUL      r11,r8,r5
;;;3255   temp_SL/=20000L;
002f3c  f6446e20          MOV      lr,#0x4e20
002f40  fb9bfbfe          SDIV     r11,r11,lr
;;;3256   temp_SL-=273L;
002f44  f2ab1b11          SUB      r11,r11,#0x111
;;;3257   t_ext[0]=(signed short)temp_SL;
002f48  f8dfe108          LDR      lr,|L1.12372|
002f4c  f8aeb000          STRH     r11,[lr,#0]
;;;3258   /*
;;;3259   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3260   else ND_EXT[1]=1;
;;;3261   temp_SL=(signed long)adc_buff_[6];
;;;3262   temp_SL*=Ktext[1];
;;;3263   temp_SL/=20000L;
;;;3264   temp_SL-=273L;
;;;3265   t_ext[1]=(signed short)temp_SL;	*/
;;;3266   #endif
;;;3267   
;;;3268   #ifdef UKU_220
;;;3269   
;;;3270   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3271   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3272   else ND_EXT[1]=1;
;;;3273   temp_SL=(signed long)adc_buff_[3];
;;;3274   temp_SL*=Ktext[1];
;;;3275   temp_SL/=20000L;
;;;3276   temp_SL-=273L;
;;;3277   t_ext[1]=(signed short)temp_SL;
;;;3278   
;;;3279   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3280   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3281   else ND_EXT[2]=1;
;;;3282   temp_SL=(signed long)adc_buff_[10];
;;;3283   temp_SL*=Ktext[2];
;;;3284   temp_SL/=20000L;
;;;3285   temp_SL-=273L;
;;;3286   t_ext[2]=(signed short)temp_SL;
;;;3287   
;;;3288   #else
;;;3289   
;;;3290   
;;;3291   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3292   
;;;3293   //Внешний датчик температуры 
;;;3294   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002f50  f8dde008          LDR      lr,[sp,#8]
002f54  f6403bb7          MOV      r11,#0xbb7
002f58  45de              CMP      lr,r11
002f5a  d201              BCS      |L1.12128|
002f5c  700b              STRB     r3,[r1,#0]
002f5e  e000              B        |L1.12130|
                  |L1.12128|
;;;3295   else ND_EXT[0]=1;
002f60  700f              STRB     r7,[r1,#0]
                  |L1.12130|
;;;3296   temp_SL=(signed long)adc_buff_[6];
;;;3297   temp_SL*=Ktext[0];
002f62  fb08f80c          MUL      r8,r8,r12
;;;3298   temp_SL/=20000L;
002f66  f6446e20          MOV      lr,#0x4e20
002f6a  fb98f8fe          SDIV     r8,r8,lr
;;;3299   temp_SL-=273L;
002f6e  f2a81811          SUB      r8,r8,#0x111
;;;3300   t_ext[0]=(signed short)temp_SL;
002f72  f8dfc0e0          LDR      r12,|L1.12372|
002f76  f8ac8000          STRH     r8,[r12,#0]
;;;3301   
;;;3302   //Внешний датчик температуры №2
;;;3303   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002f7a  f8dd8004          LDR      r8,[sp,#4]
002f7e  45d8              CMP      r8,r11
002f80  d201              BCS      |L1.12166|
002f82  704b              STRB     r3,[r1,#1]
002f84  e000              B        |L1.12168|
                  |L1.12166|
;;;3304   else ND_EXT[1]=1;
002f86  704f              STRB     r7,[r1,#1]
                  |L1.12168|
;;;3305   temp_SL=(signed long)adc_buff_[5];
;;;3306   temp_SL*=Ktext[1];
002f88  4f31              LDR      r7,|L1.12368|
002f8a  f9b77002          LDRSH    r7,[r7,#2]  ; Ktext
002f8e  436f              MULS     r7,r5,r7
;;;3307   temp_SL/=20000L;
002f90  fb97f5fe          SDIV     r5,r7,lr
;;;3308   temp_SL-=273L;
002f94  f2a51511          SUB      r5,r5,#0x111
;;;3309   t_ext[1]=(signed short)temp_SL;
002f98  4f2e              LDR      r7,|L1.12372|
002f9a  b22d              SXTH     r5,r5
002f9c  807d              STRH     r5,[r7,#2]
002f9e  9500              STR      r5,[sp,#0]
;;;3310   #else
;;;3311   
;;;3312   
;;;3313   
;;;3314   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3315   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3316   else ND_EXT[1]=1;
;;;3317   temp_SL=(signed long)adc_buff_[6];
;;;3318   temp_SL*=Ktext[1];
;;;3319   temp_SL/=20000L;
;;;3320   temp_SL-=273L;
;;;3321   t_ext[1]=(signed short)temp_SL;
;;;3322   
;;;3323   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3324   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3325   else ND_EXT[2]=1;
;;;3326   temp_SL=(signed long)adc_buff_[3];
;;;3327   temp_SL*=Ktext[2];
;;;3328   temp_SL/=20000L;
;;;3329   temp_SL-=273L;
;;;3330   t_ext[2]=(signed short)temp_SL;
;;;3331   
;;;3332   #endif
;;;3333   #endif
;;;3334   
;;;3335   #ifdef UKU_220_V2
;;;3336   
;;;3337   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3338   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3339   else ND_EXT[1]=1;
;;;3340   temp_SL=(signed long)adc_buff_[3];
;;;3341   temp_SL*=Ktext[1];
;;;3342   temp_SL/=20000L;
;;;3343   temp_SL-=273L;
;;;3344   t_ext[1]=(signed short)temp_SL;
;;;3345   
;;;3346   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3347   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3348   else ND_EXT[2]=1;
;;;3349   temp_SL=(signed long)adc_buff_[10];
;;;3350   temp_SL*=Ktext[2];
;;;3351   temp_SL/=20000L;
;;;3352   temp_SL-=273L;
;;;3353   t_ext[2]=(signed short)temp_SL;
;;;3354   
;;;3355   #else
;;;3356   
;;;3357   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3358   //Ток батареи
;;;3359   if(bps[8]._device==dIBAT_METR)
002fa0  f8945320          LDRB     r5,[r4,#0x320]  ; bps
;;;3360   	{
;;;3361   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3362   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3363   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3364   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3365   	if(!bIBAT_SMKLBR)
;;;3366   		{
;;;3367   		signed long temp_SL;
;;;3368   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3369   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3370   		temp_SL*=(signed long)Kibat1[0];
;;;3371   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3372   	
;;;3373   		Ib_ips_termokompensat =(signed short)temp_SL;
002fa4  f8dfc0b0          LDR      r12,|L1.12376|
002fa8  2d09              CMP      r5,#9                 ;3359
002faa  d17e              BNE      |L1.12458|
002fac  f8945326          LDRB     r5,[r4,#0x326]        ;3361  ; bps
002fb0  f8947327          LDRB     r7,[r4,#0x327]        ;3361  ; bps
002fb4  f8df80a4          LDR      r8,|L1.12380|
002fb8  eb052507          ADD      r5,r5,r7,LSL #8       ;3361
002fbc  f8c85000          STR      r5,[r8,#0]            ;3361  ; ibat_metr_buff_
002fc0  f8947328          LDRB     r7,[r4,#0x328]        ;3362  ; bps
002fc4  f894b329          LDRB     r11,[r4,#0x329]       ;3362  ; bps
002fc8  eb07270b          ADD      r7,r7,r11,LSL #8      ;3362
002fcc  f8c87004          STR      r7,[r8,#4]            ;3362  ; ibat_metr_buff_
002fd0  f894832a          LDRB     r8,[r4,#0x32a]        ;3363  ; bps
002fd4  f894b32b          LDRB     r11,[r4,#0x32b]       ;3363  ; bps
002fd8  eb08280b          ADD      r8,r8,r11,LSL #8      ;3363
002fdc  fa0ffb88          SXTH     r11,r8                ;3363
002fe0  f8df807c          LDR      r8,|L1.12384|
002fe4  f8a8b000          STRH     r11,[r8,#0]           ;3363
002fe8  f8df8078          LDR      r8,|L1.12388|
002fec  e03c              B        |L1.12392|
002fee  0000              DCW      0x0000
                  |L1.12272|
                          DCD      net_F3
                  |L1.12276|
                          DCD      net_U
                  |L1.12280|
                          DCD      Kunet
                  |L1.12284|
                          DCD      ||area_number.25||
                  |L1.12288|
                          DCD      net_F
                  |L1.12292|
                          DCD      ||.bss||+0x40c
                  |L1.12296|
                          DCD      Kubat
                  |L1.12300|
                          DCD      bat
                  |L1.12304|
                          DCD      Kubatm
                  |L1.12308|
                          DCD      ad7705_buff_
                  |L1.12312|
                          DCD      Kibat0
                  |L1.12316|
                          DCD      Kibat1
                  |L1.12320|
                          DCD      AUSW_MAIN
                  |L1.12324|
                          DCD      Ktbat
                  |L1.12328|
                          DCD      Kuload
                  |L1.12332|
                          DCD      load_U
                  |L1.12336|
                          DCD      Kuout
                  |L1.12340|
                          DCD      out_U
                  |L1.12344|
                          DCD      Kubps
                  |L1.12348|
                          DCD      bps_U
                  |L1.12352|
                          DCD      NUMIST
                  |L1.12356|
                          DCD      bps
                  |L1.12360|
                          DCD      bps_I
                  |L1.12364|
                          DCD      ND_EXT
                  |L1.12368|
                          DCD      Ktext
                  |L1.12372|
                          DCD      t_ext
                  |L1.12376|
                          DCD      Ib_ips_termokompensat
                  |L1.12380|
                          DCD      ibat_metr_buff_
                  |L1.12384|
                          DCD      bIBAT_SMKLBR
                  |L1.12388|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12392|
003068  f1bb0f00          CMP      r11,#0                ;3364
00306c  d003              BEQ      |L1.12406|
00306e  f04f0b32          MOV      r11,#0x32             ;3364
003072  f8a8b000          STRH     r11,[r8,#0]           ;3364
                  |L1.12406|
003076  d131              BNE      |L1.12508|
003078  eba50707          SUB      r7,r5,r7              ;3369
00307c  4dff              LDR      r5,|L1.13436|
00307e  f9b55000          LDRSH    r5,[r5,#0]            ;3370  ; Kibat1
003082  fb05f507          MUL      r5,r5,r7              ;3370
003086  f5a047aa          SUB      r7,r0,#0x5500         ;3371
00308a  3ffa              SUBS     r7,r7,#0xfa           ;3371
00308c  d00f              BEQ      |L1.12462|
00308e  1e7f              SUBS     r7,r7,#1              ;3371
003090  d00d              BEQ      |L1.12462|
003092  4548              CMP      r0,r9                 ;3371
003094  d00b              BEQ      |L1.12462|
003096  3f16              SUBS     r7,r7,#0x16           ;3371
003098  d009              BEQ      |L1.12462|
00309a  3f1e              SUBS     r7,r7,#0x1e           ;3371
00309c  d007              BEQ      |L1.12462|
00309e  3728              ADDS     r7,r7,#0x28           ;3371
0030a0  d005              BEQ      |L1.12462|
0030a2  3f14              SUBS     r7,r7,#0x14           ;3371
0030a4  d003              BEQ      |L1.12462|
0030a6  1e7f              SUBS     r7,r7,#1              ;3371
0030a8  e000              B        |L1.12460|
                  |L1.12458|
0030aa  e017              B        |L1.12508|
                  |L1.12460|
0030ac  d103              BNE      |L1.12470|
                  |L1.12462|
0030ae  f44f67fa          MOV      r7,#0x7d0             ;3371
0030b2  fb95f5f7          SDIV     r5,r5,r7              ;3371
                  |L1.12470|
0030b6  b22f              SXTH     r7,r5
0030b8  f8ac7000          STRH     r7,[r12,#0]
;;;3374   		if(bIBAT_SMKLBR_cnt)
0030bc  f9b85000          LDRSH    r5,[r8,#0]  ; bIBAT_SMKLBR_cnt
;;;3375   			{
;;;3376   			bIBAT_SMKLBR_cnt--;
;;;3377   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
0030c0  f8df93bc          LDR      r9,|L1.13440|
0030c4  b145              CBZ      r5,|L1.12504|
0030c6  f1a50501          SUB      r5,r5,#1              ;3376
0030ca  f8a85000          STRH     r5,[r8,#0]            ;3376
0030ce  f8b95000          LDRH     r5,[r9,#0]  ; Ib_ips_termokompensat_temp
0030d2  f8ac5000          STRH     r5,[r12,#0]
0030d6  e001              B        |L1.12508|
                  |L1.12504|
;;;3378   			}
;;;3379   		else 
;;;3380   			{
;;;3381   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
0030d8  f8a97000          STRH     r7,[r9,#0]
                  |L1.12508|
;;;3382   			}
;;;3383   		}
;;;3384   	}
;;;3385   
;;;3386   bat[0]._Ub=load_U;
0030dc  4de9              LDR      r5,|L1.13444|
0030de  f8a5a002          STRH     r10,[r5,#2]
;;;3387   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
0030e2  f5a047ac          SUB      r7,r0,#0x5600
0030e6  3f02              SUBS     r7,#2
0030e8  d103              BNE      |L1.12530|
0030ea  8928              LDRH     r0,[r5,#8]  ; bat
0030ec  f8ac0000          STRH     r0,[r12,#0]
0030f0  e002              B        |L1.12536|
                  |L1.12530|
;;;3388   else bat[0]._Ib=Ib_ips_termokompensat;
0030f2  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
0030f6  8128              STRH     r0,[r5,#8]
                  |L1.12536|
;;;3389   
;;;3390   #endif
;;;3391   #endif
;;;3392   
;;;3393   
;;;3394   #ifdef UKU_TELECORE2015
;;;3395   
;;;3396   //Внешний датчик температуры №1
;;;3397   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3398   else ND_EXT[0]=1;
;;;3399   temp_SL=(signed long)adc_buff_[7];
;;;3400   temp_SL*=Ktext[0];
;;;3401   temp_SL/=20000L;
;;;3402   temp_SL-=273L;
;;;3403   t_ext[0]=(signed short)temp_SL;
;;;3404   
;;;3405   
;;;3406   //Внешний датчик температуры №2
;;;3407   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3408   else ND_EXT[1]=1;
;;;3409   temp_SL=(signed long)adc_buff_[6];
;;;3410   temp_SL*=Ktext[1];
;;;3411   temp_SL/=20000L;
;;;3412   temp_SL-=273L;
;;;3413   t_ext[1]=(signed short)temp_SL;
;;;3414   
;;;3415   #endif
;;;3416   
;;;3417   #ifdef UKU_TELECORE2017
;;;3418   
;;;3419   //Внешний датчик температуры №1
;;;3420   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3421   else ND_EXT[0]=1;
;;;3422   temp_SL=(signed long)adc_buff_[7];
;;;3423   temp_SL*=Ktext[0];
;;;3424   temp_SL/=20000L;
;;;3425   temp_SL-=273L;
;;;3426   t_ext[0]=(signed short)temp_SL;
;;;3427   
;;;3428   
;;;3429   //Внешний датчик температуры №2
;;;3430   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3431   else ND_EXT[1]=1;
;;;3432   temp_SL=(signed long)adc_buff_[6];
;;;3433   temp_SL*=Ktext[1];
;;;3434   temp_SL/=20000L;
;;;3435   temp_SL-=273L;
;;;3436   t_ext[1]=(signed short)temp_SL;
;;;3437   
;;;3438   #endif
;;;3439   
;;;3440   //напряжение ввода
;;;3441   temp_SL=(signed long)adc_buff_ext_[0];
0030f8  f8df838c          LDR      r8,|L1.13448|
0030fc  f8b87000          LDRH     r7,[r8,#0]  ; adc_buff_ext_
;;;3442   temp_SL*=Kunet_ext[0];
003100  f8df9388          LDR      r9,|L1.13452|
003104  f9b90000          LDRSH    r0,[r9,#0]  ; Kunet_ext
003108  4378              MULS     r0,r7,r0
;;;3443   temp_SL/=4000L;
00310a  f44f6b7a          MOV      r11,#0xfa0
00310e  fb90f0fb          SDIV     r0,r0,r11
;;;3444   Uvv[0]=(signed short)temp_SL;
003112  4fdf              LDR      r7,|L1.13456|
003114  b280              UXTH     r0,r0
003116  8038              STRH     r0,[r7,#0]
;;;3445   if(Uvv[0]<100) Uvv0=Uvv[0];
003118  f8dfe378          LDR      lr,|L1.13460|
00311c  2864              CMP      r0,#0x64
00311e  d202              BCS      |L1.12582|
003120  f8ae0000          STRH     r0,[lr,#0]
003124  e003              B        |L1.12590|
                  |L1.12582|
;;;3446   else Uvv0=net_U;
003126  48dc              LDR      r0,|L1.13464|
003128  8800              LDRH     r0,[r0,#0]  ; net_U
00312a  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12590|
;;;3447   
;;;3448   //напряжение пэс
;;;3449   temp_SL=(signed long)adc_buff_ext_[1];
00312e  f8b88002          LDRH     r8,[r8,#2]  ; adc_buff_ext_
;;;3450   temp_SL*=Kunet_ext[1];
003132  f9b90002          LDRSH    r0,[r9,#2]  ; Kunet_ext
003136  fb00f008          MUL      r0,r0,r8
;;;3451   temp_SL/=4000L;
00313a  fb90f0fb          SDIV     r0,r0,r11
;;;3452   Uvv[1]=(signed short)temp_SL;
00313e  8078              STRH     r0,[r7,#2]
;;;3453   
;;;3454   
;;;3455   //напряжение ввода трехфазное
;;;3456   temp_SL=(signed long)eb2_data_short[0];
003140  4fd6              LDR      r7,|L1.13468|
003142  f9b70000          LDRSH    r0,[r7,#0]  ; eb2_data_short
;;;3457   temp_SL*=Kvv_eb2[0];
003146  f8df8358          LDR      r8,|L1.13472|
00314a  f9b89000          LDRSH    r9,[r8,#0]  ; Kvv_eb2
00314e  fb09f900          MUL      r9,r9,r0
;;;3458   temp_SL/=6000L;
003152  f2417070          MOV      r0,#0x1770
003156  fb99fbf0          SDIV     r11,r9,r0
;;;3459   Uvv_eb2[0]=(signed short)temp_SL;
00315a  f8df9348          LDR      r9,|L1.13476|
00315e  f8a9b000          STRH     r11,[r9,#0]
;;;3460   
;;;3461   temp_SL=(signed long)eb2_data_short[1];
003162  f9b7e002          LDRSH    lr,[r7,#2]  ; eb2_data_short
;;;3462   temp_SL*=Kvv_eb2[1];
003166  f9b8b002          LDRSH    r11,[r8,#2]  ; Kvv_eb2
00316a  fb0bfb0e          MUL      r11,r11,lr
;;;3463   temp_SL/=6000L;
00316e  fb9bfbf0          SDIV     r11,r11,r0
;;;3464   Uvv_eb2[1]=(signed short)temp_SL;
003172  f8a9b002          STRH     r11,[r9,#2]
;;;3465   
;;;3466   temp_SL=(signed long)eb2_data_short[2];
003176  f9b7b004          LDRSH    r11,[r7,#4]  ; eb2_data_short
;;;3467   temp_SL*=Kvv_eb2[2];
00317a  f9b88004          LDRSH    r8,[r8,#4]  ; Kvv_eb2
00317e  fb08f80b          MUL      r8,r8,r11
;;;3468   temp_SL/=6000L;
003182  fb98f8f0          SDIV     r8,r8,r0
;;;3469   Uvv_eb2[2]=(signed short)temp_SL;
003186  f8a98004          STRH     r8,[r9,#4]
;;;3470   
;;;3471   //напряжение пэс трехфазное
;;;3472   temp_SL=(signed long)eb2_data_short[3];
00318a  f9b7b006          LDRSH    r11,[r7,#6]  ; eb2_data_short
;;;3473   temp_SL*=Kpes_eb2[0];
00318e  f8df8318          LDR      r8,|L1.13480|
003192  f9b89000          LDRSH    r9,[r8,#0]  ; Kpes_eb2
003196  fb09f90b          MUL      r9,r9,r11
;;;3474   temp_SL/=6000L;
00319a  fb99fbf0          SDIV     r11,r9,r0
;;;3475   Upes_eb2[0]=(signed short)temp_SL;
00319e  f8df930c          LDR      r9,|L1.13484|
0031a2  f8a9b000          STRH     r11,[r9,#0]
;;;3476   
;;;3477   temp_SL=(signed long)eb2_data_short[4];
0031a6  f9b7e008          LDRSH    lr,[r7,#8]  ; eb2_data_short
;;;3478   temp_SL*=Kpes_eb2[1];
0031aa  f9b8b002          LDRSH    r11,[r8,#2]  ; Kpes_eb2
0031ae  fb0bfb0e          MUL      r11,r11,lr
;;;3479   temp_SL/=6000L;
0031b2  fb9bfbf0          SDIV     r11,r11,r0
;;;3480   Upes_eb2[1]=(signed short)temp_SL;
0031b6  f8a9b002          STRH     r11,[r9,#2]
;;;3481   
;;;3482   temp_SL=(signed long)eb2_data_short[5];
0031ba  f9b7b00a          LDRSH    r11,[r7,#0xa]  ; eb2_data_short
;;;3483   temp_SL*=Kpes_eb2[2];
0031be  f9b87004          LDRSH    r7,[r8,#4]  ; Kpes_eb2
0031c2  fb07f70b          MUL      r7,r7,r11
;;;3484   temp_SL/=6000L;
0031c6  fb97f0f0          SDIV     r0,r7,r0
;;;3485   Upes_eb2[2]=(signed short)temp_SL;
0031ca  f8a90004          STRH     r0,[r9,#4]
;;;3486   
;;;3487   //Вычисление температуры шкафа
;;;3488   
;;;3489   ibt._T[0]=t_ext[1]+273;
0031ce  9f00              LDR      r7,[sp,#0]
0031d0  f8dfb2e0          LDR      r11,|L1.13492|
0031d4  f2071711          ADD      r7,r7,#0x111
0031d8  48b5              LDR      r0,|L1.13488|
0031da  fa0ff887          SXTH     r8,r7
0031de  f8ab8000          STRH     r8,[r11,#0]
;;;3490   ibt._T[1]=t_ext[2]+273;
0031e2  8880              LDRH     r0,[r0,#4]  ; t_ext
0031e4  f2001011          ADD      r0,r0,#0x111
0031e8  fa0ff980          SXTH     r9,r0
0031ec  f8ab9002          STRH     r9,[r11,#2]
;;;3491   
;;;3492   ibt._nd[0]=ND_EXT[1];
0031f0  784f              LDRB     r7,[r1,#1]  ; ND_EXT
0031f2  f88b7008          STRB     r7,[r11,#8]
;;;3493   ibt._nd[1]=ND_EXT[2];
0031f6  7888              LDRB     r0,[r1,#2]  ; ND_EXT
0031f8  f88b0009          STRB     r0,[r11,#9]
;;;3494   
;;;3495   #ifndef UKU_TELECORE2015
;;;3496   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3497   	{
;;;3498   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
0031fc  49ae              LDR      r1,|L1.13496|
0031fe  b907              CBNZ     r7,|L1.12802|
003200  b110              CBZ      r0,|L1.12808|
                  |L1.12802|
;;;3499   	}
;;;3500   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
003202  2f01              CMP      r7,#1
003204  d00a              BEQ      |L1.12828|
003206  e00a              B        |L1.12830|
                  |L1.12808|
003208  eb080009          ADD      r0,r8,r9              ;3498
00320c  eb0070d0          ADD      r0,r0,r0,LSR #31      ;3498
003210  f46f7788          MVN      r7,#0x110             ;3498
003214  eb070060          ADD      r0,r7,r0,ASR #1       ;3498
003218  8008              STRH     r0,[r1,#0]            ;3498
00321a  e01e              B        |L1.12890|
                  |L1.12828|
00321c  b108              CBZ      r0,|L1.12834|
                  |L1.12830|
;;;3501   	{
;;;3502   	t_box=ibt._T[1]-273;
;;;3503   	}
;;;3504   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
00321e  b12f              CBZ      r7,|L1.12844|
003220  e006              B        |L1.12848|
                  |L1.12834|
003222  f2a91911          SUB      r9,r9,#0x111          ;3502
003226  f8a19000          STRH     r9,[r1,#0]            ;3502
00322a  e016              B        |L1.12890|
                  |L1.12844|
00322c  2801              CMP      r0,#1
00322e  d002              BEQ      |L1.12854|
                  |L1.12848|
;;;3505   	{
;;;3506   	t_box=ibt._T[0]-273;
;;;3507   	}
;;;3508   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
003230  2f01              CMP      r7,#1
003232  d005              BEQ      |L1.12864|
003234  e011              B        |L1.12890|
                  |L1.12854|
003236  f2a81811          SUB      r8,r8,#0x111          ;3506
00323a  f8a18000          STRH     r8,[r1,#0]            ;3506
00323e  e00c              B        |L1.12890|
                  |L1.12864|
003240  2801              CMP      r0,#1
003242  d10a              BNE      |L1.12890|
;;;3509   	{
;;;3510   	if(t_ext_can_nd<5)t_box= t_ext_can;
003244  489d              LDR      r0,|L1.13500|
003246  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
003248  2805              CMP      r0,#5
00324a  d203              BCS      |L1.12884|
00324c  489c              LDR      r0,|L1.13504|
00324e  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003250  8008              STRH     r0,[r1,#0]
003252  e002              B        |L1.12890|
                  |L1.12884|
;;;3511   	else t_box=20;
003254  f04f0014          MOV      r0,#0x14
003258  8008              STRH     r0,[r1,#0]
                  |L1.12890|
;;;3512   	}
;;;3513   #endif
;;;3514   /*
;;;3515   //Вычисление температуры шкафа
;;;3516   
;;;3517   ibt._T[0]=bat[0]._Tb+273;
;;;3518   ibt._T[1]=bat[1]._Tb+273;
;;;3519   ibt._T[2]=t_ext[1]+273;
;;;3520   ibt._T[3]=t_ext[2]+273;
;;;3521   
;;;3522   ibt._nd[0]=bat[0]._nd;
;;;3523   ibt._nd[1]=bat[1]._nd;
;;;3524   ibt._nd[2]=ND_EXT[1];
;;;3525   ibt._nd[3]=ND_EXT[2];
;;;3526   
;;;3527   ibt._avg1=0;
;;;3528   ibt._avg_cnt=4;
;;;3529   
;;;3530   if(ibt._nd[0]==0)
;;;3531   	{
;;;3532   	ibt._avg1+=ibt._T[0];
;;;3533   	}
;;;3534   else 
;;;3535   	{
;;;3536   	ibt._avg_cnt--;
;;;3537   	}
;;;3538   
;;;3539   if(ibt._nd[1]==0)
;;;3540   	{
;;;3541   	ibt._avg1+=ibt._T[1];
;;;3542   	}
;;;3543   else 
;;;3544   	{
;;;3545   	ibt._avg_cnt--;
;;;3546   	}
;;;3547   
;;;3548   if(ibt._nd[2]==0)
;;;3549   	{
;;;3550   	ibt._avg1+=ibt._T[2];
;;;3551   	}
;;;3552   else 
;;;3553   	{
;;;3554   	ibt._avg_cnt--;
;;;3555   	}
;;;3556   
;;;3557   if(ibt._nd[3]==0)
;;;3558   	{
;;;3559   	ibt._avg1+=ibt._T[3];
;;;3560   	}
;;;3561   else 
;;;3562   	{
;;;3563   	ibt._avg_cnt--;
;;;3564   	}
;;;3565   
;;;3566   if(ibt._avg_cnt==0)
;;;3567   	{
;;;3568   	}
;;;3569   else
;;;3570   	{
;;;3571   	ibt._avg1/=ibt._avg_cnt;
;;;3572   	}
;;;3573   
;;;3574   
;;;3575   if(ibt._nd[0]!=0)
;;;3576   	{
;;;3577   	ibt._T_dispers[0]=0;
;;;3578   	}
;;;3579   else 
;;;3580   	{
;;;3581   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3582   	}
;;;3583   
;;;3584   if(ibt._nd[1]!=0)
;;;3585   	{
;;;3586   	ibt._T_dispers[1]=0;
;;;3587   	}
;;;3588   else 
;;;3589   	{
;;;3590   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3591   	}
;;;3592   
;;;3593   if(ibt._nd[2]!=0)
;;;3594   	{
;;;3595   	ibt._T_dispers[2]=0;
;;;3596   	}
;;;3597   else 
;;;3598   	{
;;;3599   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3600   	}
;;;3601   
;;;3602   if(ibt._nd[3]!=0)
;;;3603   	{
;;;3604   	ibt._T_dispers[3]=0;
;;;3605   	}
;;;3606   else 
;;;3607   	{
;;;3608   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3609   	}
;;;3610   
;;;3611   if(	ibt._nd[0]&&
;;;3612   	ibt._nd[1]&&
;;;3613   	ibt._nd[2]&&
;;;3614   	ibt._nd[3]
;;;3615   	)
;;;3616   	{
;;;3617   	t_box=(bps[0]._Ti);
;;;3618   	}
;;;3619   
;;;3620   else if(	ibt._nd[0]||
;;;3621   	ibt._nd[1]||
;;;3622   	ibt._nd[2]||
;;;3623   	ibt._nd[3]
;;;3624   	)
;;;3625   	{
;;;3626   	t_box=(ibt._avg1-273);
;;;3627   	}
;;;3628   else 
;;;3629   	{
;;;3630   	ibt._max_dispers_num=0;
;;;3631   	ibt._max_dispers=ibt._T_dispers[0];
;;;3632   
;;;3633   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3634   		{
;;;3635   		ibt._max_dispers_num=1;
;;;3636   		ibt._max_dispers=ibt._T_dispers[1];
;;;3637   		}
;;;3638   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3639   		{
;;;3640   		ibt._max_dispers_num=2;
;;;3641   		ibt._max_dispers=ibt._T_dispers[2];
;;;3642   		}
;;;3643   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3644   		{
;;;3645   		ibt._max_dispers_num=3;
;;;3646   		ibt._max_dispers=ibt._T_dispers[3];
;;;3647   		}
;;;3648   
;;;3649   	ibt._avg2=0;
;;;3650   
;;;3651   	if(ibt._max_dispers_num!=0)
;;;3652   		{
;;;3653   		ibt._avg2+=ibt._T[0];
;;;3654   		}
;;;3655   	if(ibt._max_dispers_num!=1)
;;;3656   		{
;;;3657   		ibt._avg2+=ibt._T[1];
;;;3658   		}
;;;3659   	if(ibt._max_dispers_num!=2)
;;;3660   		{
;;;3661   		ibt._avg2+=ibt._T[2];
;;;3662   		}
;;;3663   	if(ibt._max_dispers_num!=3)
;;;3664   		{
;;;3665   		ibt._avg2+=ibt._T[3];
;;;3666   		}
;;;3667   
;;;3668   	t_box=(ibt._avg2/3)-273;
;;;3669   
;;;3670   	}*/
;;;3671   
;;;3672   
;;;3673   //*********************************************
;;;3674   
;;;3675   #ifndef TELECORE
;;;3676   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
00325a  489a              LDR      r0,|L1.13508|
00325c  7801              LDRB     r1,[r0,#0]  ; BAT_IS_ON
00325e  2955              CMP      r1,#0x55
003260  d105              BNE      |L1.12910|
003262  f1ba0fc8          CMP      r10,#0xc8
003266  dd02              BLE      |L1.12910|
003268  8929              LDRH     r1,[r5,#8]  ; bat
00326a  f8a6104a          STRH     r1,[r6,#0x4a]
                  |L1.12910|
;;;3677   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
00326e  7840              LDRB     r0,[r0,#1]  ; BAT_IS_ON
003270  2855              CMP      r0,#0x55
003272  d10b              BNE      |L1.12940|
003274  f9b5004e          LDRSH    r0,[r5,#0x4e]  ; bat
003278  28c8              CMP      r0,#0xc8
00327a  dd07              BLE      |L1.12940|
00327c  f9b50054          LDRSH    r0,[r5,#0x54]  ; bat
003280  f9b51008          LDRSH    r1,[r5,#8]  ; bat
003284  4288              CMP      r0,r1
003286  dd01              BLE      |L1.12940|
003288  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12940|
;;;3678   #endif
;;;3679   
;;;3680   #ifdef TELECORE
;;;3681   Ibmax=0;
;;;3682   /*
;;;3683   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3684   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3685   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3686   */
;;;3687   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3688   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3689   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3690   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3691   #endif
;;;3692   //Ibmax=bat[0]._Ib;
;;;3693   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3694   
;;;3695   #ifdef UKU_TELECORE2017
;;;3696   Ibmax=0;
;;;3697   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3698   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3699   #endif
;;;3700   
;;;3701   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3702   Ibmax=Ib_ips_termokompensat;
00328c  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
003290  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3703   #endif
;;;3704   for(i=0;i<NUMIST;i++)
003294  f04f0100          MOV      r1,#0
003298  e02f              B        |L1.13050|
                  |L1.12954|
;;;3705   	{
;;;3706   	if(bps[i]._cnt<25)
00329a  eb0100c1          ADD      r0,r1,r1,LSL #3
00329e  eb001001          ADD      r0,r0,r1,LSL #4
0032a2  eb040080          ADD      r0,r4,r0,LSL #2
0032a6  78c6              LDRB     r6,[r0,#3]
0032a8  2e19              CMP      r6,#0x19
0032aa  d21c              BCS      |L1.13030|
;;;3707        	{
;;;3708        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0032ac  7986              LDRB     r6,[r0,#6]
0032ae  79c7              LDRB     r7,[r0,#7]
0032b0  eb062607          ADD      r6,r6,r7,LSL #8
0032b4  6246              STR      r6,[r0,#0x24]
;;;3709        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0032b6  7a06              LDRB     r6,[r0,#8]
0032b8  7a47              LDRB     r7,[r0,#9]
0032ba  eb062607          ADD      r6,r6,r7,LSL #8
0032be  6206              STR      r6,[r0,#0x20]
;;;3710        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0032c0  7a86              LDRB     r6,[r0,#0xa]
0032c2  7ac7              LDRB     r7,[r0,#0xb]
0032c4  eb062607          ADD      r6,r6,r7,LSL #8
0032c8  61c6              STR      r6,[r0,#0x1c]
;;;3711        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0032ca  7b06              LDRB     r6,[r0,#0xc]
0032cc  6286              STR      r6,[r0,#0x28]
;;;3712        	bps[i]._adr_ee=bps[i]._buff[7];
0032ce  7b46              LDRB     r6,[r0,#0xd]
0032d0  f8806056          STRB     r6,[r0,#0x56]
;;;3713        	bps[i]._flags_tm=bps[i]._buff[8];
0032d4  7b86              LDRB     r6,[r0,#0xe]
0032d6  f8806042          STRB     r6,[r0,#0x42]
;;;3714   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
0032da  7c06              LDRB     r6,[r0,#0x10]
0032dc  7c47              LDRB     r7,[r0,#0x11]
0032de  eb062607          ADD      r6,r6,r7,LSL #8
0032e2  6506              STR      r6,[r0,#0x50]
0032e4  e006              B        |L1.13044|
                  |L1.13030|
;;;3715        	} 
;;;3716   	else 
;;;3717        	{
;;;3718        	bps[i]._Uii=0; 
0032e6  61c3              STR      r3,[r0,#0x1c]
;;;3719        	bps[i]._Ii=0;
0032e8  6243              STR      r3,[r0,#0x24]
;;;3720        	bps[i]._Uin=0;
0032ea  6203              STR      r3,[r0,#0x20]
;;;3721        	bps[i]._Ti=0;
0032ec  6283              STR      r3,[r0,#0x28]
;;;3722        	bps[i]._flags_tm=0; 
0032ee  f8803042          STRB     r3,[r0,#0x42]
;;;3723   	     bps[i]._rotor=0;    
0032f2  6503              STR      r3,[r0,#0x50]
                  |L1.13044|
0032f4  f1010101          ADD      r1,r1,#1              ;3704
0032f8  b2c9              UXTB     r1,r1                 ;3704
                  |L1.13050|
0032fa  4291              CMP      r1,r2                 ;3704
0032fc  dbcd              BLT      |L1.12954|
;;;3724        	}
;;;3725        
;;;3726        }
;;;3727   
;;;3728   load_I=0;
0032fe  4e72              LDR      r6,|L1.13512|
;;;3729   #ifdef TELECORE
;;;3730   
;;;3731   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3732   	{
;;;3733   	load_I-=lakb[i]._ch_curr/10;
;;;3734   	}*/
;;;3735   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3736   #elif UKU_TELECORE2017
;;;3737   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3738   #else
;;;3739   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
003300  f9b51008          LDRSH    r1,[r5,#8]  ; bat
003304  f04f000a          MOV      r0,#0xa
003308  fb91f1f0          SDIV     r1,r1,r0
00330c  f9b55054          LDRSH    r5,[r5,#0x54]  ; bat
003310  fb95f0f0          SDIV     r0,r5,r0
003314  4408              ADD      r0,r0,r1
003316  f1c00000          RSB      r0,r0,#0
00331a  b207              SXTH     r7,r0
00331c  8037              STRH     r7,[r6,#0]
;;;3740   #endif
;;;3741   Isumm=0;
00331e  4d6b              LDR      r5,|L1.13516|
003320  802b              STRH     r3,[r5,#0]
;;;3742   
;;;3743   for(i=0;i<NUMIST;i++)
003322  f04f0000          MOV      r0,#0
003326  e012              B        |L1.13134|
                  |L1.13096|
;;;3744        {
;;;3745        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003328  eb0001c0          ADD      r1,r0,r0,LSL #3
00332c  eb011100          ADD      r1,r1,r0,LSL #4
003330  eb040181          ADD      r1,r4,r1,LSL #2
003334  f891c003          LDRB     r12,[r1,#3]
003338  f1bc0f05          CMP      r12,#5
00333c  d204              BCS      |L1.13128|
00333e  6a49              LDR      r1,[r1,#0x24]
003340  f8b5c000          LDRH     r12,[r5,#0]  ; Isumm
003344  4461              ADD      r1,r1,r12
003346  8029              STRH     r1,[r5,#0]
                  |L1.13128|
003348  f1000001          ADD      r0,r0,#1              ;3743
00334c  b2c0              UXTB     r0,r0                 ;3743
                  |L1.13134|
00334e  4290              CMP      r0,r2                 ;3743
003350  dbea              BLT      |L1.13096|
;;;3746        }  
;;;3747        
;;;3748   load_I=load_I+Isumm;
003352  8828              LDRH     r0,[r5,#0]  ; Isumm
003354  4438              ADD      r0,r0,r7
003356  b200              SXTH     r0,r0
003358  8030              STRH     r0,[r6,#0]
;;;3749   if(load_I<0)load_I=0;
00335a  2800              CMP      r0,#0
00335c  da00              BGE      |L1.13152|
00335e  8033              STRH     r3,[r6,#0]
                  |L1.13152|
;;;3750   
;;;3751   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3752   load_I=0;
003360  8033              STRH     r3,[r6,#0]
;;;3753   
;;;3754   Isumm=0;
003362  802b              STRH     r3,[r5,#0]
;;;3755   
;;;3756   for(i=0;i<NUMIST;i++)
003364  f04f0000          MOV      r0,#0
003368  e00f              B        |L1.13194|
                  |L1.13162|
;;;3757        {
;;;3758        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
00336a  eb0001c0          ADD      r1,r0,r0,LSL #3
00336e  eb011100          ADD      r1,r1,r0,LSL #4
003372  eb040181          ADD      r1,r4,r1,LSL #2
003376  78cf              LDRB     r7,[r1,#3]
003378  2f05              CMP      r7,#5
00337a  d203              BCS      |L1.13188|
00337c  6a49              LDR      r1,[r1,#0x24]
00337e  882f              LDRH     r7,[r5,#0]  ; Isumm
003380  4439              ADD      r1,r1,r7
003382  8029              STRH     r1,[r5,#0]
                  |L1.13188|
003384  f1000001          ADD      r0,r0,#1              ;3756
003388  b2c0              UXTB     r0,r0                 ;3756
                  |L1.13194|
00338a  4290              CMP      r0,r2                 ;3756
00338c  dbed              BLT      |L1.13162|
;;;3759        }  
;;;3760        
;;;3761   load_I=load_I+Isumm;
00338e  8829              LDRH     r1,[r5,#0]  ; Isumm
003390  eb030001          ADD      r0,r3,r1
003394  b200              SXTH     r0,r0
003396  8030              STRH     r0,[r6,#0]
;;;3762   if(load_I<0)load_I=0;
003398  2800              CMP      r0,#0
00339a  da00              BGE      |L1.13214|
00339c  8033              STRH     r3,[r6,#0]
                  |L1.13214|
;;;3763   
;;;3764   #endif
;;;3765   #ifdef IPS_SGEP_GAZPROM
;;;3766   load_I=Isumm;
;;;3767   #endif
;;;3768   
;;;3769   
;;;3770   #ifdef UKU_GLONASS
;;;3771   inv[0]._Uio=6;
;;;3772   if (NUMINV)
;;;3773   	{
;;;3774   	for(i=0;i<NUMINV;i++)
;;;3775   		{
;;;3776   		if(bps[i+first_inv_slot]._cnt<25)
;;;3777        		{
;;;3778        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3779        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3780        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3781        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3782        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3783   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3784   			inv[i]._cnt=0;    
;;;3785        		} 
;;;3786   		else 
;;;3787        		{
;;;3788        		inv[i]._Uio=0; 
;;;3789        		inv[i]._Ii=0;
;;;3790        		inv[i]._Uin=0;
;;;3791        		inv[i]._Ti=0;
;;;3792        		inv[i]._flags_tm=0; 
;;;3793   //	     	inv[i]._rotor0;
;;;3794   			inv[i]._cnt=25;    
;;;3795        		}
;;;3796        	}
;;;3797      	}
;;;3798   #endif
;;;3799   
;;;3800   #ifndef UKU_GLONASS
;;;3801   if (NUMINV)
00339e  484c              LDR      r0,|L1.13520|
0033a0  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0033a4  2d00              CMP      r5,#0
0033a6  d066              BEQ      |L1.13430|
;;;3802   	{
;;;3803   	for(i=0;i<NUMINV;i++)
0033a8  f04f0200          MOV      r2,#0
;;;3804   		{
;;;3805   		if(bps[i+20]._cnt<25)
;;;3806        		{
;;;3807        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
0033ac  4e49              LDR      r6,|L1.13524|
0033ae  e060              B        |L1.13426|
                  |L1.13232|
0033b0  f1020014          ADD      r0,r2,#0x14           ;3805
0033b4  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3805
0033b8  eb011000          ADD      r0,r1,r0,LSL #4       ;3805
0033bc  eb040080          ADD      r0,r4,r0,LSL #2       ;3805
0033c0  78c1              LDRB     r1,[r0,#3]            ;3805
0033c2  2919              CMP      r1,#0x19              ;3805
0033c4  d239              BCS      |L1.13370|
0033c6  7981              LDRB     r1,[r0,#6]
0033c8  79c7              LDRB     r7,[r0,#7]
0033ca  eb012707          ADD      r7,r1,r7,LSL #8
0033ce  eb020142          ADD      r1,r2,r2,LSL #1
0033d2  eb061141          ADD      r1,r6,r1,LSL #5
0033d6  61cf              STR      r7,[r1,#0x1c]
;;;3808        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0033d8  7a07              LDRB     r7,[r0,#8]
0033da  f890c009          LDRB     r12,[r0,#9]
0033de  eb07270c          ADD      r7,r7,r12,LSL #8
0033e2  62cf              STR      r7,[r1,#0x2c]
;;;3809        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
0033e4  7a87              LDRB     r7,[r0,#0xa]
0033e6  f890c00b          LDRB     r12,[r0,#0xb]
0033ea  eb07270c          ADD      r7,r7,r12,LSL #8
0033ee  618f              STR      r7,[r1,#0x18]
;;;3810        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
0033f0  7b07              LDRB     r7,[r0,#0xc]
0033f2  620f              STR      r7,[r1,#0x20]
;;;3811        		inv[i]._flags_tm=bps[i+20]._buff[7];
0033f4  7b47              LDRB     r7,[r0,#0xd]
0033f6  f8817046          STRB     r7,[r1,#0x46]
;;;3812        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
0033fa  7b87              LDRB     r7,[r0,#0xe]
0033fc  f890c00f          LDRB     r12,[r0,#0xf]
003400  eb07270c          ADD      r7,r7,r12,LSL #8
003404  628f              STR      r7,[r1,#0x28]
;;;3813        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
003406  7c07              LDRB     r7,[r0,#0x10]
003408  f890c011          LDRB     r12,[r0,#0x11]
00340c  eb07270c          ADD      r7,r7,r12,LSL #8
003410  624f              STR      r7,[r1,#0x24]
;;;3814   			inv[i]._cnt=0;
003412  708b              STRB     r3,[r1,#2]
;;;3815   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
003414  7c87              LDRB     r7,[r0,#0x12]
003416  f8817059          STRB     r7,[r1,#0x59]
;;;3816   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
00341a  7cc7              LDRB     r7,[r0,#0x13]
00341c  f881705a          STRB     r7,[r1,#0x5a]
;;;3817   			inv[i]._Pnom=bps[i+20]._buff[14]; 
003420  7d07              LDRB     r7,[r0,#0x14]
003422  f8817058          STRB     r7,[r1,#0x58]
;;;3818   			inv[i]._net_contr_en=bps[i+20]._buff[15];
003426  7d47              LDRB     r7,[r0,#0x15]
003428  f881705b          STRB     r7,[r1,#0x5b]
;;;3819   			inv[i]._pwm_en=bps[i+20]._buff[16];  
00342c  7d87              LDRB     r7,[r0,#0x16]
00342e  f881705c          STRB     r7,[r1,#0x5c]
;;;3820   			inv[i]._phase_mode=bps[i+20]._buff[17];  
003432  7dc0              LDRB     r0,[r0,#0x17]
003434  f881005d          STRB     r0,[r1,#0x5d]
003438  e018              B        |L1.13420|
                  |L1.13370|
;;;3821        		} 
;;;3822   		else 
;;;3823        		{
;;;3824         		inv[i]._Ii=0;
00343a  eb020042          ADD      r0,r2,r2,LSL #1
00343e  eb061040          ADD      r0,r6,r0,LSL #5
003442  61c3              STR      r3,[r0,#0x1c]
;;;3825   			inv[i]._Pio=0;
003444  62c3              STR      r3,[r0,#0x2c]
;;;3826   			inv[i]._Uio=0;
003446  6183              STR      r3,[r0,#0x18]
;;;3827        		inv[i]._Ti=0;
003448  6203              STR      r3,[r0,#0x20]
;;;3828        		inv[i]._flags_tm=0; 
00344a  f8803046          STRB     r3,[r0,#0x46]
;;;3829        		inv[i]._Uil=0;
00344e  6243              STR      r3,[r0,#0x24]
;;;3830        		inv[i]._Uin=0;
003450  6283              STR      r3,[r0,#0x28]
;;;3831   			inv[i]._cnt=25; 
003452  f04f0119          MOV      r1,#0x19
003456  7081              STRB     r1,[r0,#2]
;;;3832   			inv[i]._Uoutmin=0; 
003458  f8803059          STRB     r3,[r0,#0x59]
;;;3833   			inv[i]._Uoutmax=0; 
00345c  f880305a          STRB     r3,[r0,#0x5a]
;;;3834   			inv[i]._Pnom=0; 
003460  f8803058          STRB     r3,[r0,#0x58]
;;;3835   			inv[i]._net_contr_en=0;
003464  f880305b          STRB     r3,[r0,#0x5b]
;;;3836   			inv[i]._pwm_en=0;   
003468  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13420|
00346c  f1020201          ADD      r2,r2,#1              ;3803
003470  b2d2              UXTB     r2,r2                 ;3803
                  |L1.13426|
003472  42aa              CMP      r2,r5                 ;3803
003474  db9c              BLT      |L1.13232|
                  |L1.13430|
;;;3837   			   
;;;3838        		}
;;;3839        	}
;;;3840      	}
;;;3841   #endif
;;;3842   
;;;3843   #ifdef GLADKOV
;;;3844   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3845   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3846   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3847   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3848   inv[0]._flags_tm=bps[4]._buff[7];
;;;3849   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3850   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3851   inv[0]._cnt=0;    
;;;3852   
;;;3853   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3854   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3855   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3856   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3857   inv[1]._flags_tm=bps[21]._buff[7];
;;;3858   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3859   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3860   inv[1]._cnt=0;    
;;;3861   #endif
;;;3862   
;;;3863   /*
;;;3864   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3865   	{
;;;3866   	lakb[0]._battCommState=0;
;;;3867   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3868   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3869   	
;;;3870   	if(lakb[0]._battCommState==0)
;;;3871   		{	
;;;3872   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3873   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3874   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3875   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3876   		}
;;;3877   	}
;;;3878   */
;;;3879   
;;;3880   #ifdef UKU_TELECORE2015
;;;3881   
;;;3882   	if(BAT_TYPE==2)
;;;3883   		{
;;;3884   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3885   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3886   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3887   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3888   		
;;;3889   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3890   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3891   	
;;;3892   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3893   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3894   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3895   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3896   	
;;;3897   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3898   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3899   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3900   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3901   	
;;;3902   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3903   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3904   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3905   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3906   	
;;;3907   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3908   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3909   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3910   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3911   	
;;;3912   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3913   	
;;;3914   	
;;;3915   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3916   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3917   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3918   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3919   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3920   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3921   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3922   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3923   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3924   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3925   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3926   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3927   	
;;;3928   		if(lakb[i]._rat_cap==0)
;;;3929   			{
;;;3930   			if(lakb[i]._isOnCnt)
;;;3931   				{
;;;3932   				lakb[i]._isOnCnt--;
;;;3933   				if(lakb[i]._isOnCnt==0)
;;;3934   					{
;;;3935   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3936   					}
;;;3937   				}
;;;3938   			}
;;;3939   		else 
;;;3940   			{
;;;3941   			if(lakb[i]._isOnCnt<50)
;;;3942   				{
;;;3943   				lakb[i]._isOnCnt++;
;;;3944   				if(lakb[i]._isOnCnt==50)
;;;3945   					{
;;;3946   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3947   					}
;;;3948   				}
;;;3949   			}
;;;3950   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3951   		}
;;;3952   	else if(BAT_TYPE==3)
;;;3953   		{
;;;3954   		//short numOfPacks;
;;;3955   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3956   		
;;;3957   		#ifndef UKU_TELECORE2016
;;;3958   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3959   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3960   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3961   		if(numOfPacks)numOfPacks-=1;
;;;3962   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3963   		plazma_numOfCells=numOfCells;
;;;3964   		plazma_numOfTemperCells=numOfTemperCells;
;;;3965   		plazma_numOfPacks=numOfPacks;
;;;3966   
;;;3967   
;;;3968   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3969   
;;;3970   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3971   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3972   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3973   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3974   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3975   							);	  
;;;3976   
;;;3977   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3978   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3979   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3980   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3981   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3982   							)/10;
;;;3983   
;;;3984   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3985   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3986   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3987   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3988   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3989   							)-2730;
;;;3990   
;;;3991   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3992   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3993   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3994   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3995   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3996   							)/10;
;;;3997   
;;;3998   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3999   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;4000   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;4001   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;4002   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;4003   							)/10;
;;;4004   		#endif
;;;4005   		
;;;4006   		#ifdef UKU_TELECORE2016
;;;4007   		{
;;;4008   		char i;
;;;4009   		
;;;4010   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4011   			{
;;;4012   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4013   			}
;;;4014   		}
;;;4015   		#endif
;;;4016   		
;;;4017   										  
;;;4018   		}
;;;4019   	
;;;4020   if(sacredSunSilentCnt<3) 
;;;4021   	{
;;;4022       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;4023       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;4024      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;4025   	}
;;;4026   else 
;;;4027   	{
;;;4028       	//bat[0]._Ub=0;
;;;4029       	//bat[0]._Tb=0;
;;;4030      	//bat[0]._Ib=0;
;;;4031   	}
;;;4032   
;;;4033   if(BAT_TYPE==1)
;;;4034   	{
;;;4035   	char i;
;;;4036   	for(i=0;i<1;i++)
;;;4037   		{
;;;4038   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4039   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4040   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4041   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;4042   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4043   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4044   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4045   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4046   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4047   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4048   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4049   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4050   		lakb[i]._flags1= lakb_damp[i][34];
;;;4051   		lakb[i]._flags2= lakb_damp[i][35];
;;;4052   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4053   
;;;4054   /*		if(lakb[i]._rat_cap==0)
;;;4055   			{
;;;4056   			if(lakb[i]._isOnCnt)
;;;4057   				{
;;;4058   				lakb[i]._isOnCnt--;
;;;4059   				if(lakb[i]._isOnCnt==0)
;;;4060   					{
;;;4061   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4062   					}
;;;4063   				}
;;;4064   			}
;;;4065   		else 
;;;4066   			{
;;;4067   			if(lakb[i]._isOnCnt<50)
;;;4068   				{
;;;4069   				lakb[i]._isOnCnt++;
;;;4070   				if(lakb[i]._isOnCnt==50)
;;;4071   					{
;;;4072   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4073   					}
;;;4074   				}
;;;4075   			} */
;;;4076   		gran(&lakb[i]._isOnCnt,0,50);
;;;4077   	 	}
;;;4078   
;;;4079   	if(lakb_damp[0][41]==100)
;;;4080   		{
;;;4081   		li_bat._485Error=1;
;;;4082   		}
;;;4083   	if(lakb_damp[0][41]==0)
;;;4084   		{
;;;4085   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4086   		li_bat._485Error=0;
;;;4087   		}
;;;4088   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4089   
;;;4090   
;;;4091   	}
;;;4092   
;;;4093   
;;;4094   #endif
;;;4095   
;;;4096   		#ifdef UKU_TELECORE2017
;;;4097   		{
;;;4098   		char i;
;;;4099   		
;;;4100   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4101   			{
;;;4102   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4103   			}
;;;4104   		}
;;;4105   		#endif
;;;4106   #ifdef UKU_TELECORE2015
;;;4107   //вычисление параметров работы батареи
;;;4108   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4109   li_bat._batStat=bsOK;
;;;4110   if(BAT_TYPE==1) //COSLIGHT
;;;4111   	{
;;;4112   	if(li_bat._batStat==bsOK)
;;;4113   		{
;;;4114   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4115   
;;;4116   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4117   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4118   	
;;;4119   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4120   		li_bat._soc=lakb[0]._s_o_c;
;;;4121   		li_bat._soh=lakb[0]._s_o_h;
;;;4122   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4123   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4124   		li_bat._rbt=lakb[0]._r_b_t;
;;;4125   		}
;;;4126   	else 
;;;4127   		{
;;;4128   		li_bat._Ub=bat[0]._Ub;
;;;4129   		li_bat._Ib=bat[0]._Ib/10;
;;;4130   		li_bat._Tb=bat[0]._Tb;
;;;4131   		}
;;;4132   
;;;4133   	if((li_bat._485Error)||(li_bat._canError))
;;;4134   		{
;;;4135   		li_bat._batStat=bsOFF;
;;;4136   		}
;;;4137   	else li_bat._batStat=bsOK;
;;;4138   	}
;;;4139   else if(BAT_TYPE==2) //SACRED SUN
;;;4140   	{
;;;4141   	}
;;;4142   else if(BAT_TYPE==3) //ZTT
;;;4143   	{
;;;4144   	if(li_bat._batStat==bsOK)
;;;4145   		{
;;;4146   
;;;4147   		}
;;;4148   	}
;;;4149   #endif
;;;4150   
;;;4151   
;;;4152   /*
;;;4153   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4154   	{
;;;4155   
;;;4156   
;;;4157   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4158   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4159   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4160   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4161   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4162   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4163   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4164   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4165   
;;;4166   	tempSS=0;
;;;4167   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4168   
;;;4169   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4170   
;;;4171   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4172   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4173   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4174   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4175   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4176   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4177   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4178   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4179   
;;;4180   	tempSS=0;
;;;4181   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4182   
;;;4183   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4184   
;;;4185   
;;;4186   	}*/
;;;4187   }
003476  e8bd9fff          POP      {r0-r12,pc}
00347a  0000              DCW      0x0000
                  |L1.13436|
                          DCD      Kibat1
                  |L1.13440|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13444|
                          DCD      bat
                  |L1.13448|
                          DCD      adc_buff_ext_
                  |L1.13452|
                          DCD      Kunet_ext
                  |L1.13456|
                          DCD      Uvv
                  |L1.13460|
                          DCD      Uvv0
                  |L1.13464|
                          DCD      net_U
                  |L1.13468|
                          DCD      eb2_data_short
                  |L1.13472|
                          DCD      Kvv_eb2
                  |L1.13476|
                          DCD      Uvv_eb2
                  |L1.13480|
                          DCD      Kpes_eb2
                  |L1.13484|
                          DCD      Upes_eb2
                  |L1.13488|
                          DCD      t_ext
                  |L1.13492|
                          DCD      ibt
                  |L1.13496|
                          DCD      t_box
                  |L1.13500|
                          DCD      t_ext_can_nd
                  |L1.13504|
                          DCD      t_ext_can
                  |L1.13508|
                          DCD      BAT_IS_ON
                  |L1.13512|
                          DCD      load_I
                  |L1.13516|
                          DCD      Isumm
                  |L1.13520|
                          DCD      NUMINV
                  |L1.13524|
                          DCD      inv
                          ENDP

                  mnemo_hndl PROC
;;;4248   //-----------------------------------------------
;;;4249   void mnemo_hndl(void)
0034d8  4afb              LDR      r2,|L1.14536|
;;;4250   {
;;;4251   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4252   	{
;;;4253   	if(mnemo_cnt)mnemo_cnt--;
0034da  49fc              LDR      r1,|L1.14540|
0034dc  7810              LDRB     r0,[r2,#0]            ;4251  ; a_ind
0034de  2804              CMP      r0,#4                 ;4251
0034e0  d001              BEQ      |L1.13542|
0034e2  2801              CMP      r0,#1                 ;4251
0034e4  d105              BNE      |L1.13554|
                  |L1.13542|
0034e6  7850              LDRB     r0,[r2,#1]            ;4251  ; a_ind
0034e8  b918              CBNZ     r0,|L1.13554|
0034ea  48f9              LDR      r0,|L1.14544|
0034ec  7800              LDRB     r0,[r0,#0]            ;4251  ; MNEMO_ON
0034ee  2855              CMP      r0,#0x55              ;4251
0034f0  d003              BEQ      |L1.13562|
                  |L1.13554|
;;;4254   	}
;;;4255   else mnemo_cnt=MNEMO_TIME;
0034f2  48f8              LDR      r0,|L1.14548|
0034f4  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0034f6  7008              STRB     r0,[r1,#0]
                  |L1.13560|
;;;4256   }
0034f8  4770              BX       lr
                  |L1.13562|
0034fa  7808              LDRB     r0,[r1,#0]            ;4253  ; mnemo_cnt
0034fc  2800              CMP      r0,#0                 ;4253
0034fe  d0fb              BEQ      |L1.13560|
003500  f1a00001          SUB      r0,r0,#1              ;4253
003504  7008              STRB     r0,[r1,#0]            ;4253
003506  4770              BX       lr
;;;4257   
                          ENDP

                  apv_start PROC
;;;4258   //-----------------------------------------------
;;;4259   void apv_start(char in)
003508  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4260   {
;;;4261   if(	(bps[in]._apv_timer_1_lev==0)&&
00350c  eb011100          ADD      r1,r1,r0,LSL #4
003510  48f1              LDR      r0,|L1.14552|
003512  eb000081          ADD      r0,r0,r1,LSL #2
003516  f890105e          LDRB     r1,[r0,#0x5e]
00351a  2900              CMP      r1,#0
00351c  d115              BNE      |L1.13642|
;;;4262   	(bps[in]._apv_cnt_1_lev==0)&&
00351e  f890105f          LDRB     r1,[r0,#0x5f]
003522  2900              CMP      r1,#0
003524  d111              BNE      |L1.13642|
;;;4263   	(bps[in]._apv_timer_2_lev==0) )
003526  f8b01060          LDRH     r1,[r0,#0x60]
00352a  2900              CMP      r1,#0
00352c  d10d              BNE      |L1.13642|
;;;4264   		{
;;;4265    		bps[in]._apv_timer_1_lev=60;
00352e  f04f013c          MOV      r1,#0x3c
003532  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4266   		bps[in]._apv_cnt_1_lev=3;
003536  f04f0103          MOV      r1,#3
00353a  7041              STRB     r1,[r0,#1]
;;;4267   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00353c  49e7              LDR      r1,|L1.14556|
00353e  f44f6261          MOV      r2,#0xe10
003542  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
003544  fb01f102          MUL      r1,r1,r2
003548  8041              STRH     r1,[r0,#2]
                  |L1.13642|
;;;4268   		}
;;;4269   }
00354a  4770              BX       lr
;;;4270   
                          ENDP

                  apv_stop PROC
;;;4271   //-----------------------------------------------
;;;4272   void apv_stop(char in)
00354c  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4273   {
;;;4274   bps[in]._apv_timer_1_lev=0;
003550  eb021200          ADD      r2,r2,r0,LSL #4
003554  48e0              LDR      r0,|L1.14552|
003556  f04f0100          MOV      r1,#0
00355a  eb000082          ADD      r0,r0,r2,LSL #2
00355e  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4275   bps[in]._apv_cnt_1_lev=0;
003562  7041              STRB     r1,[r0,#1]
;;;4276   bps[in]._apv_timer_2_lev=0;
003564  8041              STRH     r1,[r0,#2]
;;;4277   }
003566  4770              BX       lr
;;;4278   
                          ENDP

                  apv_drv PROC
;;;4279   //-----------------------------------------------
;;;4280   void apv_drv(void)		//1 Гц
003568  e92d43f0          PUSH     {r4-r9,lr}
;;;4281   {
;;;4282   for(i=0;i<NUMIST;i++)
00356c  4edc              LDR      r6,|L1.14560|
00356e  f04f0300          MOV      r3,#0
003572  75f3              STRB     r3,[r6,#0x17]
;;;4283   	{
;;;4284   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4285   		{
;;;4286   		bps[i]._apv_timer_1_lev=0;
;;;4287   		bps[i]._apv_cnt_1_lev=0;
;;;4288   		bps[i]._apv_timer_2_lev=0;
;;;4289   		}
;;;4290   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
003574  4cdb              LDR      r4,|L1.14564|
;;;4291   		{
;;;4292   		bps[i]._apv_timer_2_lev=0;
;;;4293   		}
;;;4294   
;;;4295   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4296   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4297   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4298   			{
;;;4299   			if(bps[i]._state==bsWRK)
;;;4300   				{
;;;4301   				if(bps[i]._apv_succes_timer<60)
;;;4302   					{
;;;4303   					bps[i]._apv_succes_timer++;
;;;4304   					if(bps[i]._apv_succes_timer>=60)
;;;4305   						{
;;;4306   						apv_stop(i);
;;;4307   						}
;;;4308   					}
;;;4309   				}
;;;4310   			else bps[i]._apv_succes_timer=0;
;;;4311   			}
;;;4312   
;;;4313   	if(bps[i]._apv_timer_1_lev)
;;;4314   		{
;;;4315   		bps[i]._apv_timer_2_lev=0;
;;;4316   		bps[i]._apv_timer_1_lev--;
;;;4317   		if(bps[i]._apv_timer_1_lev==0)
;;;4318   			{
;;;4319   			if(bps[i]._apv_cnt_1_lev)
;;;4320   				{
;;;4321   				bps[i]._apv_cnt_1_lev--;
;;;4322   				bps[i]._apv_timer_1_lev=60;
003576  f04f073c          MOV      r7,#0x3c
;;;4323   				bps[i]._apv_reset_av_timer=2;
00357a  f04f0802          MOV      r8,#2
00357e  4dd6              LDR      r5,|L1.14552|
003580  f8df9364          LDR      r9,|L1.14568|
003584  e079              B        |L1.13946|
                  |L1.13702|
003586  49d9              LDR      r1,|L1.14572|
003588  7809              LDRB     r1,[r1,#0]            ;4284  ; APV_ON1
00358a  b949              CBNZ     r1,|L1.13728|
00358c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4286
003590  eb011100          ADD      r1,r1,r0,LSL #4       ;4286
003594  eb050181          ADD      r1,r5,r1,LSL #2       ;4286
003598  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4286
00359c  704b              STRB     r3,[r1,#1]            ;4287
00359e  804b              STRH     r3,[r1,#2]            ;4288
                  |L1.13728|
0035a0  7821              LDRB     r1,[r4,#0]            ;4290  ; APV_ON2
0035a2  b939              CBNZ     r1,|L1.13748|
0035a4  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4292
0035a8  eb011100          ADD      r1,r1,r0,LSL #4       ;4292
0035ac  eb050181          ADD      r1,r5,r1,LSL #2       ;4292
0035b0  f8a13060          STRH     r3,[r1,#0x60]         ;4292
                  |L1.13748|
0035b4  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4295
0035b8  eb011100          ADD      r1,r1,r0,LSL #4       ;4295
0035bc  eb050181          ADD      r1,r5,r1,LSL #2       ;4295
0035c0  f891205e          LDRB     r2,[r1,#0x5e]         ;4295
0035c4  b92a              CBNZ     r2,|L1.13778|
0035c6  f891205f          LDRB     r2,[r1,#0x5f]         ;4296
0035ca  b912              CBNZ     r2,|L1.13778|
0035cc  f8b12060          LDRH     r2,[r1,#0x60]         ;4297
0035d0  b122              CBZ      r2,|L1.13788|
                  |L1.13778|
0035d2  788a              LDRB     r2,[r1,#2]            ;4299
0035d4  2a01              CMP      r2,#1                 ;4299
0035d6  d014              BEQ      |L1.13826|
0035d8  f8813063          STRB     r3,[r1,#0x63]         ;4310
                  |L1.13788|
0035dc  7df1              LDRB     r1,[r6,#0x17]         ;4313  ; i
0035de  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4313
0035e2  eb001001          ADD      r0,r0,r1,LSL #4       ;4313
0035e6  eb050080          ADD      r0,r5,r0,LSL #2       ;4313
0035ea  f890205e          LDRB     r2,[r0,#0x5e]         ;4313
0035ee  b30a              CBZ      r2,|L1.13876|
0035f0  f8a03060          STRH     r3,[r0,#0x60]         ;4315
0035f4  f1a20201          SUB      r2,r2,#1              ;4316
0035f8  b2d2              UXTB     r2,r2                 ;4316
0035fa  f880205e          STRB     r2,[r0,#0x5e]         ;4316
0035fe  b172              CBZ      r2,|L1.13854|
003600  e024              B        |L1.13900|
                  |L1.13826|
003602  f8912063          LDRB     r2,[r1,#0x63]         ;4301
003606  2a3c              CMP      r2,#0x3c              ;4301
003608  d2e8              BCS      |L1.13788|
00360a  f1020201          ADD      r2,r2,#1              ;4303
00360e  b2d2              UXTB     r2,r2                 ;4303
003610  f8812063          STRB     r2,[r1,#0x63]         ;4303
003614  2a3c              CMP      r2,#0x3c              ;4304
003616  d3e1              BCC      |L1.13788|
003618  f7fffffe          BL       apv_stop
00361c  e7de              B        |L1.13788|
                  |L1.13854|
00361e  f890205f          LDRB     r2,[r0,#0x5f]         ;4319
003622  b142              CBZ      r2,|L1.13878|
003624  f1a20201          SUB      r2,r2,#1              ;4321
003628  f880205f          STRB     r2,[r0,#0x5f]         ;4321
00362c  f880705e          STRB     r7,[r0,#0x5e]         ;4322
003630  f8808062          STRB     r8,[r0,#0x62]
                  |L1.13876|
003634  e00a              B        |L1.13900|
                  |L1.13878|
;;;4324   				}
;;;4325   			else
;;;4326   				{
;;;4327   				if(APV_ON2==apvON)
003636  7822              LDRB     r2,[r4,#0]  ; APV_ON2
003638  2a01              CMP      r2,#1
00363a  d107              BNE      |L1.13900|
;;;4328   					{
;;;4329   					bps[i]._apv_timer_1_lev=0;
;;;4330   					bps[i]._apv_cnt_1_lev=0;
;;;4331   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00363c  4aa7              LDR      r2,|L1.14556|
00363e  f44f6c61          MOV      r12,#0xe10
003642  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
003644  fb02f20c          MUL      r2,r2,r12
003648  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.13900|
;;;4332   					}
;;;4333   				}
;;;4334   			
;;;4335   			}
;;;4336   		}
;;;4337   	if(bps[i]._apv_timer_2_lev)
00364c  f8b02060          LDRH     r2,[r0,#0x60]
003650  b14a              CBZ      r2,|L1.13926|
;;;4338   		{
;;;4339   		bps[i]._apv_timer_2_lev--;
003652  f1a20201          SUB      r2,r2,#1
003656  b292              UXTH     r2,r2
003658  f8a02060          STRH     r2,[r0,#0x60]
;;;4340   		if(bps[i]._apv_timer_2_lev==0)
00365c  b91a              CBNZ     r2,|L1.13926|
;;;4341   			{
;;;4342   			bps[i]._apv_cnt_1_lev=2;
00365e  f880805f          STRB     r8,[r0,#0x5f]
;;;4343   			bps[i]._apv_timer_1_lev=60;
003662  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.13926|
;;;4344   			}
;;;4345   		}
;;;4346   
;;;4347   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
003666  f8902062          LDRB     r2,[r0,#0x62]
00366a  b11a              CBZ      r2,|L1.13940|
00366c  f1a20201          SUB      r2,r2,#1
003670  f8802062          STRB     r2,[r0,#0x62]
                  |L1.13940|
003674  f1010101          ADD      r1,r1,#1              ;4282
003678  75f1              STRB     r1,[r6,#0x17]         ;4282
                  |L1.13946|
00367a  7df0              LDRB     r0,[r6,#0x17]         ;4282  ; i
00367c  f9b91000          LDRSH    r1,[r9,#0]            ;4282  ; NUMIST
003680  4288              CMP      r0,r1                 ;4282
003682  db80              BLT      |L1.13702|
;;;4348   	} 
;;;4349   /*char i;
;;;4350   for(i=0;i<2;i++) 
;;;4351   	{
;;;4352   	if(apv_cnt_sec[i])
;;;4353   		{
;;;4354   		apv_cnt_sec[i]--;
;;;4355   		if(apv_cnt_sec[i]==0)
;;;4356   			{
;;;4357   			cnt_av_umax[i]=0;
;;;4358   			cnt_av_umin[i]=0;
;;;4359   			reset_apv_cnt[i]=600;
;;;4360   			}
;;;4361   		}
;;;4362   	
;;;4363   	if(reset_apv_cnt[i])
;;;4364   		{
;;;4365   		reset_apv_cnt[i]--;
;;;4366   		if(reset_apv_cnt[i]==0)
;;;4367   			{
;;;4368   			apv_cnt[i]=0;
;;;4369   			}
;;;4370   		}	
;;;4371   		
;;;4372   	if(hour_apv_cnt[i])
;;;4373   		{
;;;4374   		hour_apv_cnt[i]--;
;;;4375   		if(hour_apv_cnt[i]==0)
;;;4376   			{
;;;4377   			apv_cnt[i]=0;
;;;4378   			avar_src_reset(i);
;;;4379   			}
;;;4380   		}			
;;;4381   	}
;;;4382   
;;;4383   
;;;4384   
;;;4385   
;;;4386   if(apv_cnt_1)
;;;4387   	{
;;;4388   	apv_cnt_1--;
;;;4389   	if(!apv_cnt_1) 
;;;4390   		{
;;;4391   		avar_src_reset(0);
;;;4392   		avar_src_reset(1);
;;;4393   		//cntrl_stat=0;
;;;4394   		}
;;;4395   	}*/		
;;;4396   }
003684  e8bd83f0          POP      {r4-r9,pc}
;;;4397   
                          ENDP

                  adc_init PROC
;;;4398   //-----------------------------------------------
;;;4399   void adc_init(void)
003688  4899              LDR      r0,|L1.14576|
;;;4400   {
;;;4401   
;;;4402   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
00368a  6841              LDR      r1,[r0,#4]
00368c  f4212140          BIC      r1,r1,#0xc0000
003690  f4412180          ORR      r1,r1,#0x40000
003694  6041              STR      r1,[r0,#4]
;;;4403   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
003696  6841              LDR      r1,[r0,#4]
003698  f4213140          BIC      r1,r1,#0x30000
00369c  f4413180          ORR      r1,r1,#0x10000
0036a0  6041              STR      r1,[r0,#4]
;;;4404   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0036a2  6841              LDR      r1,[r0,#4]
0036a4  f4214140          BIC      r1,r1,#0xc000
0036a8  f4414180          ORR      r1,r1,#0x4000
0036ac  6041              STR      r1,[r0,#4]
;;;4405   
;;;4406   
;;;4407   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0036ae  6c41              LDR      r1,[r0,#0x44]
0036b0  f4212140          BIC      r1,r1,#0xc0000
0036b4  f4412100          ORR      r1,r1,#0x80000
0036b8  6441              STR      r1,[r0,#0x44]
;;;4408   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0036ba  6c41              LDR      r1,[r0,#0x44]
0036bc  f4213140          BIC      r1,r1,#0x30000
0036c0  f4413100          ORR      r1,r1,#0x20000
0036c4  6441              STR      r1,[r0,#0x44]
;;;4409   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0036c6  6c41              LDR      r1,[r0,#0x44]
0036c8  f4214140          BIC      r1,r1,#0xc000
0036cc  f4414100          ORR      r1,r1,#0x8000
0036d0  6441              STR      r1,[r0,#0x44]
;;;4410   
;;;4411   SET_REG(LPC_ADC->ADCR,0,24,3);
0036d2  4888              LDR      r0,|L1.14580|
0036d4  6801              LDR      r1,[r0,#0]
0036d6  f02161e0          BIC      r1,r1,#0x7000000
0036da  6001              STR      r1,[r0,#0]
;;;4412   
;;;4413   SET_REG(LPC_ADC->ADCR,1,21,1);
0036dc  6801              LDR      r1,[r0,#0]
0036de  f4411100          ORR      r1,r1,#0x200000
0036e2  6001              STR      r1,[r0,#0]
;;;4414   SET_REG(LPC_ADC->ADCR,0,16,1);
0036e4  6801              LDR      r1,[r0,#0]
0036e6  f4213180          BIC      r1,r1,#0x10000
0036ea  6001              STR      r1,[r0,#0]
;;;4415   SET_REG(LPC_ADC->ADCR,1,8,8);
0036ec  6801              LDR      r1,[r0,#0]
0036ee  f421417f          BIC      r1,r1,#0xff00
0036f2  f4417180          ORR      r1,r1,#0x100
0036f6  6001              STR      r1,[r0,#0]
;;;4416   
;;;4417   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4418   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4419   	
;;;4420   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4421        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4422        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4423   
;;;4424   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
0036f8  f44f7180          MOV      r1,#0x100
0036fc  60c1              STR      r1,[r0,#0xc]
0036fe  487e              LDR      r0,|L1.14584|
003700  f44f0180          MOV      r1,#0x400000
003704  6001              STR      r1,[r0,#0]
;;;4425   
;;;4426   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4427   
;;;4428   
;;;4429   }
003706  4770              BX       lr
;;;4430   
                          ENDP

                  adc_drv7 PROC
;;;4431   //-----------------------------------------------
;;;4432   void adc_drv7(void) //(Uсети - постоянка)
003708  e92d41f0          PUSH     {r4-r8,lr}
;;;4433   {
;;;4434   //int temp_S;
;;;4435   //char i;
;;;4436   //signed short temp_SS;
;;;4437   
;;;4438   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00370c  4c74              LDR      r4,|L1.14560|
00370e  34f2              ADDS     r4,r4,#0xf2
003710  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003712  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003714  1a40              SUBS     r0,r0,r1
003716  b200              SXTH     r0,r0
003718  f7fffffe          BL       abs_pal
00371c  1da6              ADDS     r6,r4,#6
00371e  8030              STRH     r0,[r6,#0]
;;;4439   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003720  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003722  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
003724  1a40              SUBS     r0,r0,r1
003726  b200              SXTH     r0,r0
003728  f7fffffe          BL       abs_pal
00372c  8070              STRH     r0,[r6,#2]
;;;4440   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00372e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003730  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003732  1a40              SUBS     r0,r0,r1
003734  b200              SXTH     r0,r0
003736  f7fffffe          BL       abs_pal
00373a  80b0              STRH     r0,[r6,#4]
;;;4441   
;;;4442   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4443   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4444   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4445   
;;;4446   
;;;4447   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
00373c  f44f7196          MOV      r1,#0x12c
;;;4448   	{
;;;4449   	adc_result=adc_self_ch_buff[2];
003740  4d67              LDR      r5,|L1.14560|
003742  4288              CMP      r0,r1                 ;4447
003744  da02              BGE      |L1.14156|
003746  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003748  87a8              STRH     r0,[r5,#0x3c]
00374a  e00c              B        |L1.14182|
                  |L1.14156|
;;;4450   	} 
;;;4451   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
00374c  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
003750  4288              CMP      r0,r1
003752  da02              BGE      |L1.14170|
;;;4452   	{
;;;4453   	adc_result=adc_self_ch_buff[1];
003754  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003756  87a8              STRH     r0,[r5,#0x3c]
003758  e005              B        |L1.14182|
                  |L1.14170|
;;;4454   	}
;;;4455   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
00375a  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
00375e  4288              CMP      r0,r1
003760  da01              BGE      |L1.14182|
;;;4456   	{
;;;4457   	adc_result=adc_self_ch_buff[0];
003762  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
003764  87a8              STRH     r0,[r5,#0x3c]
                  |L1.14182|
;;;4458   	}
;;;4459       //adc_result=92;
;;;4460   
;;;4461   if(adc_ch_net)
003766  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
003768  2600              MOVS     r6,#0
00376a  b347              CBZ      r7,|L1.14270|
;;;4462   	{
;;;4463   
;;;4464   	main_power_buffer[0]+=(long)(adc_result);
00376c  4863              LDR      r0,|L1.14588|
00376e  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
003772  6802              LDR      r2,[r0,#0]  ; main_power_buffer
003774  440a              ADD      r2,r2,r1
003776  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4465   	main_power_buffer[1]+=(long)(adc_result);
003778  6842              LDR      r2,[r0,#4]  ; main_power_buffer
00377a  440a              ADD      r2,r2,r1
00377c  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4466   	main_power_buffer[2]+=(long)(adc_result);
00377e  6882              LDR      r2,[r0,#8]  ; main_power_buffer
003780  440a              ADD      r2,r2,r1
003782  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4467   	main_power_buffer[3]+=(long)(adc_result);
003784  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
003786  4411              ADD      r1,r1,r2
003788  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4468   
;;;4469   	adc_net_buff_cnt++;
00378a  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
00378e  f1010101          ADD      r1,r1,#1
003792  b209              SXTH     r1,r1
003794  f8a51044          STRH     r1,[r5,#0x44]
;;;4470   	if(adc_net_buff_cnt>=0x1000)
003798  f5b15f80          CMP      r1,#0x1000
00379c  db01              BLT      |L1.14242|
;;;4471   		{
;;;4472   		adc_net_buff_cnt=0;
00379e  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.14242|
;;;4473   		}
;;;4474   	if((adc_net_buff_cnt&0x03ff)==0)
0037a2  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
0037a6  058a              LSLS     r2,r1,#22
0037a8  d131              BNE      |L1.14350|
;;;4475   		{
;;;4476   		#ifdef UKU_220
;;;4477   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4478   		#else
;;;4479   		#ifdef UKU_220_V2
;;;4480   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4481   		#else
;;;4482   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0037aa  ea4f21a1          ASR      r1,r1,#10
0037ae  f8502021          LDR      r2,[r0,r1,LSL #2]
0037b2  ea4f2222          ASR      r2,r2,#8
0037b6  876a              STRH     r2,[r5,#0x3a]
;;;4483   		#endif
;;;4484   		#endif
;;;4485   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0037b8  f8406021          STR      r6,[r0,r1,LSL #2]
0037bc  e027              B        |L1.14350|
                  |L1.14270|
;;;4486   		}
;;;4487   
;;;4488   
;;;4489   	} 
;;;4490   else if(!adc_ch_net)
;;;4491   	{
;;;4492   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0037be  4850              LDR      r0,|L1.14592|
0037c0  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
0037c2  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
0037c4  eb001384          ADD      r3,r0,r4,LSL #6
0037c8  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0037cc  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4493   	
;;;4494   	if((adc_ch_cnt&0x03)==0)
0037d0  0790              LSLS     r0,r2,#30
0037d2  d10f              BNE      |L1.14324|
;;;4495   		{
;;;4496   		long temp_L;
;;;4497   		char i;
;;;4498   		temp_L=0;
0037d4  4601              MOV      r1,r0
                  |L1.14294|
;;;4499   		for(i=0;i<16;i++)
;;;4500   			{
;;;4501   			temp_L+=adc_buff[adc_ch][i];
0037d6  f853c020          LDR      r12,[r3,r0,LSL #2]
0037da  4461              ADD      r1,r1,r12
0037dc  f1000001          ADD      r0,r0,#1              ;4499
0037e0  b2c0              UXTB     r0,r0                 ;4499
0037e2  2810              CMP      r0,#0x10              ;4499
0037e4  d3f7              BCC      |L1.14294|
;;;4502   			}
;;;4503   		adc_buff_[adc_ch]= (short)(temp_L>>4);
0037e6  ea4f1021          ASR      r0,r1,#4
0037ea  4944              LDR      r1,|L1.14588|
0037ec  f1a10120          SUB      r1,r1,#0x20
0037f0  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14324|
;;;4504   
;;;4505   		//adc_buff_[3]=346;
;;;4506   		}
;;;4507   	if(++adc_ch>=16) 
0037f4  1c64              ADDS     r4,r4,#1
0037f6  b2e0              UXTB     r0,r4
0037f8  74a8              STRB     r0,[r5,#0x12]
0037fa  2810              CMP      r0,#0x10
0037fc  d307              BCC      |L1.14350|
;;;4508   		{
;;;4509   		adc_ch=0;
0037fe  74ae              STRB     r6,[r5,#0x12]
;;;4510   		adc_ch_cnt++;
003800  f1020201          ADD      r2,r2,#1
003804  b2d0              UXTB     r0,r2
003806  74e8              STRB     r0,[r5,#0x13]
;;;4511   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003808  2810              CMP      r0,#0x10
00380a  d300              BCC      |L1.14350|
00380c  74ee              STRB     r6,[r5,#0x13]
                  |L1.14350|
;;;4512   		}
;;;4513   	}
;;;4514   
;;;4515   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4516   
;;;4517   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4518   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4519   /*
;;;4520   	{
;;;4521   	if((adc_cnt1&0x03)==0)
;;;4522   		{
;;;4523   		temp_S=0;
;;;4524   		for(i=0;i<16;i++)
;;;4525   			{
;;;4526   			temp_S+=adc_buff[adc_ch][i];
;;;4527   			} 
;;;4528            	adc_buff_[adc_ch]=temp_S>>4;
;;;4529             }
;;;4530   	}*/
;;;4531   
;;;4532   
;;;4533   		  
;;;4534   
;;;4535   adc_self_ch_cnt=0;
00380e  742e              STRB     r6,[r5,#0x10]
;;;4536   
;;;4537   adc_ch_net++;
003810  f1070701          ADD      r7,r7,#1
;;;4538   adc_ch_net&=1;
003814  f0070001          AND      r0,r7,#1
003818  7468              STRB     r0,[r5,#0x11]
;;;4539   
;;;4540   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4541   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4542   
;;;4543   if(adc_ch_net)
;;;4544   	{
;;;4545   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4546   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4547   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
00381a  4a36              LDR      r2,|L1.14580|
00381c  b130              CBZ      r0,|L1.14380|
00381e  6810              LDR      r0,[r2,#0]
003820  f02000ff          BIC      r0,r0,#0xff
003824  f1000004          ADD      r0,r0,#4
003828  6010              STR      r0,[r2,#0]
00382a  e03d              B        |L1.14504|
                  |L1.14380|
;;;4548   	}
;;;4549   else
;;;4550   	{
;;;4551   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4552   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4553   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
00382c  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
00382e  0708              LSLS     r0,r1,#28
003830  d406              BMI      |L1.14400|
003832  6810              LDR      r0,[r2,#0]
003834  f02000ff          BIC      r0,r0,#0xff
003838  f1000001          ADD      r0,r0,#1
00383c  6010              STR      r0,[r2,#0]
00383e  e005              B        |L1.14412|
                  |L1.14400|
;;;4554   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
003840  6810              LDR      r0,[r2,#0]
003842  f02000ff          BIC      r0,r0,#0xff
003846  f1000002          ADD      r0,r0,#2
00384a  6010              STR      r0,[r2,#0]
                  |L1.14412|
;;;4555   
;;;4556   
;;;4557   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
00384c  482d              LDR      r0,|L1.14596|
00384e  6803              LDR      r3,[r0,#0]
003850  f0435380          ORR      r3,r3,#0x10000000
003854  6003              STR      r3,[r0,#0]
;;;4558   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
003856  6a03              LDR      r3,[r0,#0x20]
003858  f0434380          ORR      r3,r3,#0x40000000
00385c  6203              STR      r3,[r0,#0x20]
;;;4559   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
00385e  6e03              LDR      r3,[r0,#0x60]
003860  f0436380          ORR      r3,r3,#0x4000000
003864  6603              STR      r3,[r0,#0x60]
;;;4560   
;;;4561   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
003866  07cb              LSLS     r3,r1,#31
003868  d00a              BEQ      |L1.14464|
;;;4562   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
00386a  6943              LDR      r3,[r0,#0x14]
00386c  f0435380          ORR      r3,r3,#0x10000000
003870  6143              STR      r3,[r0,#0x14]
                  |L1.14450|
;;;4563   
;;;4564   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
003872  078b              LSLS     r3,r1,#30
003874  d409              BMI      |L1.14474|
003876  6b43              LDR      r3,[r0,#0x34]
003878  f0234380          BIC      r3,r3,#0x40000000
00387c  6343              STR      r3,[r0,#0x34]
00387e  e008              B        |L1.14482|
                  |L1.14464|
003880  6943              LDR      r3,[r0,#0x14]         ;4561
003882  f0235380          BIC      r3,r3,#0x10000000     ;4561
003886  6143              STR      r3,[r0,#0x14]         ;4561
003888  e7f3              B        |L1.14450|
                  |L1.14474|
;;;4565   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
00388a  6b43              LDR      r3,[r0,#0x34]
00388c  f0434380          ORR      r3,r3,#0x40000000
003890  6343              STR      r3,[r0,#0x34]
                  |L1.14482|
;;;4566   
;;;4567   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
003892  0749              LSLS     r1,r1,#29
003894  d404              BMI      |L1.14496|
003896  6f41              LDR      r1,[r0,#0x74]
003898  f0216180          BIC      r1,r1,#0x4000000
00389c  6741              STR      r1,[r0,#0x74]
00389e  e003              B        |L1.14504|
                  |L1.14496|
;;;4568   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0038a0  6f41              LDR      r1,[r0,#0x74]
0038a2  f0416180          ORR      r1,r1,#0x4000000
0038a6  6741              STR      r1,[r0,#0x74]
                  |L1.14504|
;;;4569   	}
;;;4570   	
;;;4571   
;;;4572   
;;;4573   
;;;4574   LPC_ADC->ADCR |=  (1<<24);
0038a8  6810              LDR      r0,[r2,#0]
0038aa  f0407080          ORR      r0,r0,#0x1000000
0038ae  6010              STR      r0,[r2,#0]
                  |L1.14512|
;;;4575   
;;;4576   }
0038b0  e8bd81f0          POP      {r4-r8,pc}
;;;4577   
                          ENDP

                  avg_hndl PROC
;;;4834   //-----------------------------------------------
;;;4835   void avg_hndl(void)
0038b4  e92d41f0          PUSH     {r4-r8,lr}
;;;4836   { 
;;;4837   char i;
;;;4838   
;;;4839   //#define AVGCNTMAX	5
;;;4840   if(avg_main_cnt)
0038b8  4d09              LDR      r5,|L1.14560|
0038ba  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
0038be  b318              CBZ      r0,|L1.14600|
;;;4841   	{
;;;4842   	avg_main_cnt--;
0038c0  f1a00001          SUB      r0,r0,#1
0038c4  86e8              STRH     r0,[r5,#0x36]
;;;4843   	//goto avg_hndl_end;
;;;4844   	return;
;;;4845   	}                 
;;;4846   
;;;4847   avg_main_cnt=5;
;;;4848   avg_num=0;
;;;4849   
;;;4850   for(i=0;i<NUMIST;i++)
;;;4851   	{
;;;4852   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4853   	}
;;;4854   
;;;4855   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4856   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4857   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4858   
;;;4859   if(avg_vektor) avg_vektor=0;
;;;4860   else avg_vektor=1;
;;;4861   	
;;;4862   if(avg_num<2)
;;;4863   	{
;;;4864   	//goto avg_hndl_end;
;;;4865   	return;
;;;4866   	}
;;;4867   	
;;;4868   else
;;;4869   	{
;;;4870   	i_avg_min=5000;
;;;4871   	i_avg_max=0;
;;;4872   	i_avg_summ=0;
;;;4873   	for(i=0;i<NUMIST;i++)
;;;4874   		{
;;;4875   		if(bps[i]._state==bsWRK)
;;;4876   			{
;;;4877   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;4878   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;4879   			
;;;4880   			i_avg_summ+=bps[i]._Ii;
;;;4881   			}
;;;4882   		}
;;;4883   	i_avg=i_avg_summ/avg_num;	
;;;4884   	
;;;4885   	if(i_avg_min==0)i_avg_min=1;
;;;4886   
;;;4887   	avg=i_avg_max;
;;;4888   	avg*=100;
;;;4889   	avg/=i_avg_min;
;;;4890   
;;;4891   	if(avg>130) bAVG=1;
;;;4892   	if(avg<110) bAVG=0;
;;;4893   
;;;4894   	if(bAVG==1)
;;;4895   		{
;;;4896   		for(i=0;i<NUMIST;i++)
;;;4897   			{
;;;4898   			if(bps[i]._state==bsWRK)
;;;4899   				{
;;;4900   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;4901   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;4902   			
;;;4903   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;4904   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;4905   				}
;;;4906   			}		
;;;4907   		}			
;;;4908   	}   	 
;;;4909   
;;;4910   
;;;4911   avg_hndl_end:
;;;4912   __nop();  
;;;4913   }
0038c6  e7f3              B        |L1.14512|
                  |L1.14536|
                          DCD      a_ind
                  |L1.14540|
                          DCD      mnemo_cnt
                  |L1.14544|
                          DCD      MNEMO_ON
                  |L1.14548|
                          DCD      MNEMO_TIME
                  |L1.14552|
                          DCD      bps
                  |L1.14556|
                          DCD      APV_ON2_TIME
                  |L1.14560|
                          DCD      ||area_number.25||
                  |L1.14564|
                          DCD      APV_ON2
                  |L1.14568|
                          DCD      NUMIST
                  |L1.14572|
                          DCD      APV_ON1
                  |L1.14576|
                          DCD      0x4002c000
                  |L1.14580|
                          DCD      0x40034000
                  |L1.14584|
                          DCD      0xe000e100
                  |L1.14588|
                          DCD      ||.bss||+0x42c
                  |L1.14592|
                          DCD      ||.bss||+0xc
                  |L1.14596|
                          DCD      0x2009c000
                  |L1.14600|
003908  f04f0005          MOV      r0,#5                 ;4847
00390c  86e8              STRH     r0,[r5,#0x36]         ;4847
00390e  f04f0700          MOV      r7,#0                 ;4848
003912  76af              STRB     r7,[r5,#0x1a]         ;4848
003914  f04f0000          MOV      r0,#0                 ;4850
003918  49f8              LDR      r1,|L1.15612|
00391a  4cf7              LDR      r4,|L1.15608|
00391c  f9b12000          LDRSH    r2,[r1,#0]            ;4850
003920  e012              B        |L1.14664|
                  |L1.14626|
003922  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4852
003926  eb011100          ADD      r1,r1,r0,LSL #4       ;4852
00392a  eb040181          ADD      r1,r4,r1,LSL #2       ;4852
00392e  788b              LDRB     r3,[r1,#2]            ;4852
003930  2b01              CMP      r3,#1                 ;4852
003932  d106              BNE      |L1.14658|
003934  78c9              LDRB     r1,[r1,#3]            ;4852
003936  2914              CMP      r1,#0x14              ;4852
003938  d203              BCS      |L1.14658|
00393a  7ea9              LDRB     r1,[r5,#0x1a]         ;4852  ; avg_num
00393c  f1010101          ADD      r1,r1,#1              ;4852
003940  76a9              STRB     r1,[r5,#0x1a]         ;4852
                  |L1.14658|
003942  f1000001          ADD      r0,r0,#1              ;4850
003946  b2c0              UXTB     r0,r0                 ;4850
                  |L1.14664|
003948  4290              CMP      r0,r2                 ;4850
00394a  dbea              BLT      |L1.14626|
00394c  7ee8              LDRB     r0,[r5,#0x1b]         ;4859  ; avg_vektor
00394e  f04f0c01          MOV      r12,#1                ;4852
003952  b108              CBZ      r0,|L1.14680|
003954  76ef              STRB     r7,[r5,#0x1b]         ;4859
003956  e001              B        |L1.14684|
                  |L1.14680|
003958  f885c01b          STRB     r12,[r5,#0x1b]        ;4860
                  |L1.14684|
00395c  7eae              LDRB     r6,[r5,#0x1a]         ;4862  ; avg_num
00395e  2e02              CMP      r6,#2                 ;4862
003960  d3a6              BCC      |L1.14512|
003962  4be7              LDR      r3,|L1.15616|
003964  f2413088          MOV      r0,#0x1388            ;4870
003968  61d8              STR      r0,[r3,#0x1c]         ;4870  ; i_avg_min
00396a  619f              STR      r7,[r3,#0x18]         ;4871  ; i_avg_max
00396c  621f              STR      r7,[r3,#0x20]         ;4872  ; i_avg_summ
00396e  f04f0100          MOV      r1,#0                 ;4873
003972  e01c              B        |L1.14766|
                  |L1.14708|
003974  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4875
003978  eb001001          ADD      r0,r0,r1,LSL #4       ;4875
00397c  eb040080          ADD      r0,r4,r0,LSL #2       ;4875
003980  f8908002          LDRB     r8,[r0,#2]            ;4875
003984  f1b80f01          CMP      r8,#1                 ;4875
003988  d10e              BNE      |L1.14760|
00398a  6a40              LDR      r0,[r0,#0x24]         ;4877
00398c  f8d38018          LDR      r8,[r3,#0x18]         ;4877  ; i_avg_max
003990  4540              CMP      r0,r8                 ;4877
003992  dd00              BLE      |L1.14742|
003994  6198              STR      r0,[r3,#0x18]         ;4877  ; i_avg_max
                  |L1.14742|
003996  f8d3801c          LDR      r8,[r3,#0x1c]         ;4878  ; i_avg_min
00399a  4540              CMP      r0,r8                 ;4878
00399c  da00              BGE      |L1.14752|
00399e  61d8              STR      r0,[r3,#0x1c]         ;4878  ; i_avg_min
                  |L1.14752|
0039a0  f8d38020          LDR      r8,[r3,#0x20]         ;4880  ; i_avg_summ
0039a4  4440              ADD      r0,r0,r8              ;4880
0039a6  6218              STR      r0,[r3,#0x20]         ;4880  ; i_avg_summ
                  |L1.14760|
0039a8  f1010101          ADD      r1,r1,#1              ;4873
0039ac  b2c9              UXTB     r1,r1                 ;4873
                  |L1.14766|
0039ae  4291              CMP      r1,r2                 ;4873
0039b0  dbe0              BLT      |L1.14708|
0039b2  6a18              LDR      r0,[r3,#0x20]         ;4883  ; i_avg_summ
0039b4  fb90f6f6          SDIV     r6,r0,r6              ;4883
0039b8  625e              STR      r6,[r3,#0x24]         ;4883  ; i_avg
0039ba  69d8              LDR      r0,[r3,#0x1c]         ;4885  ; i_avg_min
0039bc  b908              CBNZ     r0,|L1.14786|
0039be  f8c3c01c          STR      r12,[r3,#0x1c]        ;4885  ; i_avg_min
                  |L1.14786|
0039c2  6998              LDR      r0,[r3,#0x18]         ;4887  ; i_avg_max
0039c4  f04f0164          MOV      r1,#0x64              ;4888
0039c8  fb00f001          MUL      r0,r0,r1              ;4888
0039cc  69d9              LDR      r1,[r3,#0x1c]         ;4889  ; i_avg_min
0039ce  fb90f0f1          SDIV     r0,r0,r1              ;4889
0039d2  6298              STR      r0,[r3,#0x28]         ;4889  ; avg
0039d4  2882              CMP      r0,#0x82              ;4891
0039d6  dd01              BLE      |L1.14812|
0039d8  f885c019          STRB     r12,[r5,#0x19]        ;4891
                  |L1.14812|
0039dc  286e              CMP      r0,#0x6e              ;4892
0039de  da00              BGE      |L1.14818|
0039e0  766f              STRB     r7,[r5,#0x19]         ;4892
                  |L1.14818|
0039e2  7e68              LDRB     r0,[r5,#0x19]         ;4894  ; bAVG
0039e4  2801              CMP      r0,#1                 ;4894
0039e6  d138              BNE      |L1.14938|
0039e8  f04f0100          MOV      r1,#0                 ;4896
0039ec  f06f0731          MVN      r7,#0x31              ;4903
0039f0  e031              B        |L1.14934|
                  |L1.14834|
0039f2  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4898
0039f6  eb001001          ADD      r0,r0,r1,LSL #4       ;4898
0039fa  eb040080          ADD      r0,r4,r0,LSL #2       ;4898
0039fe  7883              LDRB     r3,[r0,#2]            ;4898
003a00  2b01              CMP      r3,#1                 ;4898
003a02  d125              BNE      |L1.14928|
003a04  6a43              LDR      r3,[r0,#0x24]         ;4900
003a06  42b3              CMP      r3,r6                 ;4900
003a08  dd0a              BLE      |L1.14880|
003a0a  f895c01b          LDRB     r12,[r5,#0x1b]        ;4900  ; avg_vektor
003a0e  f1bc0f00          CMP      r12,#0                ;4900
003a12  d105              BNE      |L1.14880|
003a14  f8b0c054          LDRH     r12,[r0,#0x54]        ;4900
003a18  f1ac0c01          SUB      r12,r12,#1            ;4900
003a1c  f8a0c054          STRH     r12,[r0,#0x54]        ;4900
                  |L1.14880|
003a20  42b3              CMP      r3,r6                 ;4901
003a22  da07              BGE      |L1.14900|
003a24  7eeb              LDRB     r3,[r5,#0x1b]         ;4901  ; avg_vektor
003a26  b12b              CBZ      r3,|L1.14900|
003a28  f8b03054          LDRH     r3,[r0,#0x54]         ;4901
003a2c  f1030301          ADD      r3,r3,#1              ;4901
003a30  f8a03054          STRH     r3,[r0,#0x54]         ;4901
                  |L1.14900|
003a34  f9b03054          LDRSH    r3,[r0,#0x54]         ;4903
003a38  42bb              CMP      r3,r7                 ;4903
003a3a  da01              BGE      |L1.14912|
003a3c  f8a07054          STRH     r7,[r0,#0x54]         ;4903
                  |L1.14912|
003a40  f9b03054          LDRSH    r3,[r0,#0x54]         ;4904
003a44  2b32              CMP      r3,#0x32              ;4904
003a46  dd03              BLE      |L1.14928|
003a48  f04f0332          MOV      r3,#0x32              ;4904
003a4c  f8a03054          STRH     r3,[r0,#0x54]         ;4904
                  |L1.14928|
003a50  f1010101          ADD      r1,r1,#1              ;4896
003a54  b2c9              UXTB     r1,r1                 ;4896
                  |L1.14934|
003a56  4291              CMP      r1,r2                 ;4896
003a58  dbcb              BLT      |L1.14834|
                  |L1.14938|
003a5a  bf00              NOP                            ;4912
003a5c  e728              B        |L1.14512|
;;;4914   
                          ENDP

                  rele_hndl PROC
;;;4927   //*************-----------------------------------------------
;;;4928   void rele_hndl(void)
003a5e  e92d5ff0          PUSH     {r4-r12,lr}
;;;4929   {
;;;4930   //static char cnt_rel_sam;
;;;4931   //char temp;
;;;4932   
;;;4933   //temp=0;
;;;4934   
;;;4935   
;;;4936   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003a62  48a8              LDR      r0,|L1.15620|
003a64  6801              LDR      r1,[r0,#0]
003a66  4aa8              LDR      r2,|L1.15624|
003a68  ea010102          AND      r1,r1,r2
003a6c  6001              STR      r1,[r0,#0]
;;;4937   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003a6e  4ca7              LDR      r4,|L1.15628|
003a70  6821              LDR      r1,[r4,#0]
003a72  f441717c          ORR      r1,r1,#0x3f0
003a76  6021              STR      r1,[r4,#0]
;;;4938   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003a78  69c1              LDR      r1,[r0,#0x1c]
003a7a  f4212140          BIC      r1,r1,#0xc0000
003a7e  61c1              STR      r1,[r0,#0x1c]
;;;4939   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003a80  6e21              LDR      r1,[r4,#0x60]
003a82  f0417100          ORR      r1,r1,#0x2000000
003a86  6621              STR      r1,[r4,#0x60]
;;;4940   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003a88  6841              LDR      r1,[r0,#4]
003a8a  f0216140          BIC      r1,r1,#0xc000000
003a8e  6041              STR      r1,[r0,#4]
;;;4941   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003a90  6820              LDR      r0,[r4,#0]
003a92  f0405000          ORR      r0,r0,#0x20000000
003a96  6020              STR      r0,[r4,#0]
;;;4942   
;;;4943   
;;;4944   
;;;4945   
;;;4946   
;;;4947   
;;;4948   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003a98  489e              LDR      r0,|L1.15636|
003a9a  4d9d              LDR      r5,|L1.15632|
003a9c  499f              LDR      r1,|L1.15644|
003a9e  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003aa0  489d              LDR      r0,|L1.15640|
003aa2  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003aa6  f9b11000          LDRSH    r1,[r1,#0]
003aaa  7800              LDRB     r0,[r0,#0]
003aac  4313              ORRS     r3,r3,r2
003aae  d007              BEQ      |L1.15040|
003ab0  b130              CBZ      r0,|L1.15040|
003ab2  2905              CMP      r1,#5
003ab4  dd04              BLE      |L1.15040|
;;;4949   	{
;;;4950   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003ab6  69a3              LDR      r3,[r4,#0x18]
003ab8  f4437380          ORR      r3,r3,#0x100
003abc  61a3              STR      r3,[r4,#0x18]
003abe  e003              B        |L1.15048|
                  |L1.15040|
;;;4951   	}
;;;4952   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003ac0  69e3              LDR      r3,[r4,#0x1c]
003ac2  f4437380          ORR      r3,r3,#0x100
003ac6  61e3              STR      r3,[r4,#0x1c]
                  |L1.15048|
;;;4953   
;;;4954   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003ac8  f8953088          LDRB     r3,[r5,#0x88]  ; bat
003acc  4313              ORRS     r3,r3,r2
003ace  d007              BEQ      |L1.15072|
003ad0  b130              CBZ      r0,|L1.15072|
003ad2  2905              CMP      r1,#5
003ad4  dd04              BLE      |L1.15072|
;;;4955   	{
;;;4956   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003ad6  69a0              LDR      r0,[r4,#0x18]
003ad8  f0400040          ORR      r0,r0,#0x40
003adc  61a0              STR      r0,[r4,#0x18]
003ade  e003              B        |L1.15080|
                  |L1.15072|
;;;4957   	}
;;;4958   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003ae0  69e0              LDR      r0,[r4,#0x1c]
003ae2  f0400040          ORR      r0,r0,#0x40
003ae6  61e0              STR      r0,[r4,#0x1c]
                  |L1.15080|
;;;4959   
;;;4960   
;;;4961   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003ae8  20d2              MOVS     r0,#0xd2
003aea  f7fffffe          BL       mess_find_unvol
003aee  4d8c              LDR      r5,|L1.15648|
003af0  b110              CBZ      r0,|L1.15096|
003af2  6828              LDR      r0,[r5,#0]  ; mess_data
003af4  2864              CMP      r0,#0x64
003af6  d048              BEQ      |L1.15242|
                  |L1.15096|
;;;4962   	{
;;;4963   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4964   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4965   	}
;;;4966   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003af8  69e0              LDR      r0,[r4,#0x1c]
003afa  f0405000          ORR      r0,r0,#0x20000000
003afe  61e0              STR      r0,[r4,#0x1c]
                  |L1.15104|
;;;4967   
;;;4968   
;;;4969   #ifndef UKU2071x
;;;4970   //Реле аварии сети
;;;4971   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4972   	{
;;;4973   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4974   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4975   	}
;;;4976   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4977   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4978   #endif
;;;4979   #ifdef UKU2071x
;;;4980   //Реле аварии сети
;;;4981   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003b00  20d2              MOVS     r0,#0xd2
003b02  f7fffffe          BL       mess_find_unvol
;;;4982   	{
;;;4983   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4984   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4985   	}
;;;4986   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003b06  4e87              LDR      r6,|L1.15652|
003b08  b110              CBZ      r0,|L1.15120|
003b0a  6828              LDR      r0,[r5,#0]            ;4981  ; mess_data
003b0c  2866              CMP      r0,#0x66              ;4981
003b0e  d04b              BEQ      |L1.15272|
                  |L1.15120|
003b10  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003b12  07c0              LSLS     r0,r0,#31
003b14  d054              BEQ      |L1.15296|
;;;4987   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003b16  6fa0              LDR      r0,[r4,#0x78]
003b18  f0407000          ORR      r0,r0,#0x2000000
003b1c  67a0              STR      r0,[r4,#0x78]
                  |L1.15134|
;;;4988   #endif
;;;4989   
;;;4990   #ifdef UKU_3U
;;;4991   //Реле аварий батарей
;;;4992   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4993   	{
;;;4994   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4995   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4996        }
;;;4997   else 
;;;4998   	{
;;;4999   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5000        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5001   	} 
;;;5002   
;;;5003   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5004   	{
;;;5005   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5006   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5007        }
;;;5008   else 
;;;5009   	{
;;;5010   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5011        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5012   	} 
;;;5013   
;;;5014   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5015   	{
;;;5016   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5017   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5018        }
;;;5019   else 
;;;5020   	{
;;;5021   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5022        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5023   	} 
;;;5024   
;;;5025   #endif
;;;5026   
;;;5027   
;;;5028   #ifdef UKU_GLONASS
;;;5029   //Реле аварий батарей
;;;5030   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5031   	{
;;;5032   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5033   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5034        }
;;;5035   else 
;;;5036   	{
;;;5037   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5038        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5039   	} 
;;;5040   
;;;5041   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5042   	{
;;;5043   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5044   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5045        }
;;;5046   else 
;;;5047   	{
;;;5048   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5049        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5050   	} 
;;;5051   
;;;5052   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5053   	{
;;;5054   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5055   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5056        }
;;;5057   else 
;;;5058   	{
;;;5059   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5060        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5061   	} 
;;;5062   
;;;5063   #endif
;;;5064   
;;;5065   #ifdef U 
;;;5066   
;;;5067   #endif
;;;5068   
;;;5069   #ifdef UKU_RSTKM
;;;5070   
;;;5071   //Реле общей аварии
;;;5072   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5073   	{
;;;5074   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5075   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5076   	}
;;;5077   else 
;;;5078   	{
;;;5079        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5080             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5081             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5082             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5083             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5084        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5085   	}
;;;5086   	
;;;5087   
;;;5088   //Реле освещения
;;;5089   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5090   	{
;;;5091   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5092   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5093        }
;;;5094   else 
;;;5095   	{
;;;5096   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5097        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5098   	}
;;;5099   
;;;5100   
;;;5101   //Реле выключения нагрузки
;;;5102   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5103   	{
;;;5104   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5105   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5106        }
;;;5107   else if(tloaddisable_cmnd==0)
;;;5108   	{
;;;5109   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5110   	}
;;;5111   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5112   	{
;;;5113   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5114   	}
;;;5115   
;;;5116   else 
;;;5117   	{
;;;5118   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5119        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5120   	} 
;;;5121   
;;;5122   //Реле осевого вентилятора
;;;5123   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5124   	{
;;;5125   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5126   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5127   	}
;;;5128   else 
;;;5129   	{
;;;5130   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5131        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5132   	} 
;;;5133   
;;;5134   #endif
;;;5135   
;;;5136   #ifdef UKU_KONTUR
;;;5137   
;;;5138   //Реле общей аварии
;;;5139   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5140   	{
;;;5141   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5142   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5143   	}
;;;5144   else 
;;;5145   	{
;;;5146        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5147             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5148             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5149             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5150             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5151        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5152   	}
;;;5153   
;;;5154   	
;;;5155   //rel_warm_plazma=0;
;;;5156   //Реле освещения   
;;;5157   /*
;;;5158   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5159   	{
;;;5160   	if(mess_data[1]==0)
;;;5161   		{
;;;5162   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5163   		rel_warm_plazma=1;
;;;5164   		}
;;;5165   	else if(mess_data[1]==1) 
;;;5166   		{
;;;5167   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5168   		rel_warm_plazma=2;
;;;5169   		}
;;;5170        }
;;;5171   else 
;;;5172   	{
;;;5173   	if(warm_stat_k==wsOFF) 
;;;5174   		{
;;;5175   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5176   		rel_warm_plazma=3;
;;;5177   		}
;;;5178        else 
;;;5179   		{
;;;5180   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5181   		rel_warm_plazma=4;
;;;5182   		}
;;;5183   	}
;;;5184   */
;;;5185   //Реле освещения
;;;5186   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5187   	{
;;;5188   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5189   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5190        }
;;;5191   else 
;;;5192   	{
;;;5193   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5194        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5195   	}
;;;5196   
;;;5197   
;;;5198   
;;;5199   //Реле выключения нагрузки
;;;5200   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5201   	{
;;;5202   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5203   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5204        }
;;;5205   else if(tloaddisable_cmnd==0)
;;;5206   	{
;;;5207   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5208   	}
;;;5209   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5210   	{
;;;5211   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5212   	}
;;;5213   
;;;5214   else 
;;;5215   	{
;;;5216   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5217        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5218   	} 
;;;5219   
;;;5220   //Реле осевого вентилятора или отопителя
;;;5221   if(RELE_LOG)
;;;5222   	{
;;;5223   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5224   		{
;;;5225   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5226   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5227   		}
;;;5228   	else 
;;;5229   		{
;;;5230   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5231   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5232   		} 
;;;5233   
;;;5234   	}
;;;5235   else 
;;;5236   	{
;;;5237   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5238   		{
;;;5239   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5240   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5241   		}
;;;5242   	else 
;;;5243   		{
;;;5244   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5245   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5246   		} 
;;;5247   	}
;;;5248   #endif
;;;5249   
;;;5250   #ifdef UKU_6U
;;;5251   //Реле аварий батарей
;;;5252   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5253   	{
;;;5254   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5255   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5256        }
;;;5257   else 
;;;5258   	{
;;;5259   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5260        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5261   	} 
;;;5262   
;;;5263   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5264   	{
;;;5265   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5266   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5267       }
;;;5268   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5269   	{
;;;5270   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5271   		{
;;;5272   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5273   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5274        	}
;;;5275   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5276   	}
;;;5277   else 
;;;5278   	{
;;;5279   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5280       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5281   	} 
;;;5282   
;;;5283   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5284   	{
;;;5285   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5286   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5287        }
;;;5288   else 
;;;5289   	{
;;;5290   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5291        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5292   	} 
;;;5293   
;;;5294   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5295   	{
;;;5296   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5297   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5298   	}
;;;5299   else if((NPN_OUT==npnoRELEVENT))
;;;5300   	{
;;;5301   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5302   		{
;;;5303   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5304   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5305       	}
;;;5306   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5307   	}
;;;5308   else 
;;;5309   	{
;;;5310   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5311   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5312   	}
;;;5313   
;;;5314   #endif
;;;5315   
;;;5316   #ifdef UKU_220
;;;5317   //Реле аварий батарей
;;;5318   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5319   	{
;;;5320   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5321   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5322        }
;;;5323   else 
;;;5324   	{
;;;5325   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5326        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5327   	} 
;;;5328   
;;;5329   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5330   	{
;;;5331   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5332   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5333        }
;;;5334   else 
;;;5335   	{
;;;5336   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5337        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5338   	} 
;;;5339   
;;;5340   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5341   	{
;;;5342   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5343   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5344   	}
;;;5345   else 
;;;5346   	{
;;;5347   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5348   		{
;;;5349   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5350   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5351   		}
;;;5352   	else 
;;;5353   		{
;;;5354   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5355        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5356   		}
;;;5357   	}
;;;5358   
;;;5359   #endif
;;;5360   
;;;5361   #ifdef UKU_220_V2
;;;5362   //Реле аварий батарей
;;;5363   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5364   	{
;;;5365   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5366   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5367        }
;;;5368   else 
;;;5369   	{
;;;5370   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5371        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5372   	} 
;;;5373   
;;;5374   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5375   	{
;;;5376   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5377   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5378        }
;;;5379   else 
;;;5380   	{
;;;5381   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5382        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5383   	} 
;;;5384   
;;;5385   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5386   	{
;;;5387   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5388   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5389   	}
;;;5390   else 
;;;5391   	{
;;;5392   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5393   		{
;;;5394   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5395   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5396   		}
;;;5397   	else 
;;;5398   		{
;;;5399   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5400        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5401   		}
;;;5402   	}
;;;5403   
;;;5404   #endif
;;;5405   
;;;5406   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5407   
;;;5408   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003b1e  4882              LDR      r0,|L1.15656|
;;;5409   	{
;;;5410   	#ifndef UKU2071x
;;;5411   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5412   		{
;;;5413   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5414   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5415   		}
;;;5416   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5417   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5418   	#endif
;;;5419   
;;;5420   	#ifdef UKU2071x
;;;5421   		#ifndef APSENERGIA
;;;5422   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5423   			{
;;;5424   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5425   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5426   			}
;;;5427   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5428   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5429   		#endif
;;;5430   
;;;5431   		#ifdef APSENERGIA
;;;5432   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5433   			{
;;;5434   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5435   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5436   			}
;;;5437   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5438   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5439   		#endif
;;;5440   
;;;5441   	#endif
;;;5442   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5443   		{
;;;5444   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5445   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5446   	     }
;;;5447   	else 
;;;5448   		{
;;;5449   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5450   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5451   		} 
;;;5452   
;;;5453   	//Реле аварий батарей
;;;5454   	#ifndef APSENERGIA
;;;5455   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5456   		{
;;;5457   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5458   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5459        	}
;;;5460   	else 
;;;5461   		{
;;;5462   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003b20  f8df8208          LDR      r8,|L1.15660|
003b24  4f82              LDR      r7,|L1.15664|
003b26  8800              LDRH     r0,[r0,#0]            ;5408  ; AUSW_MAIN
003b28  f5a041aa          SUB      r1,r0,#0x5500         ;5408
003b2c  39fa              SUBS     r1,r1,#0xfa           ;5408
003b2e  d001              BEQ      |L1.15156|
003b30  1e49              SUBS     r1,r1,#1              ;5408
003b32  d16f              BNE      |L1.15380|
                  |L1.15156|
003b34  20d2              MOVS     r0,#0xd2              ;5422
003b36  f7fffffe          BL       mess_find_unvol
003b3a  b110              CBZ      r0,|L1.15170|
003b3c  6828              LDR      r0,[r5,#0]            ;5422  ; mess_data
003b3e  2866              CMP      r0,#0x66              ;5422
003b40  d043              BEQ      |L1.15306|
                  |L1.15170|
003b42  6830              LDR      r0,[r6,#0]            ;5427  ; avar_ind_stat
003b44  07c0              LSLS     r0,r0,#31             ;5427
003b46  d04d              BEQ      |L1.15332|
003b48  6fa0              LDR      r0,[r4,#0x78]         ;5428
003b4a  f0407000          ORR      r0,r0,#0x2000000      ;5428
003b4e  67a0              STR      r0,[r4,#0x78]         ;5428
                  |L1.15184|
003b50  20d2              MOVS     r0,#0xd2              ;5442
003b52  f7fffffe          BL       mess_find_unvol
003b56  b110              CBZ      r0,|L1.15198|
003b58  6828              LDR      r0,[r5,#0]            ;5442  ; mess_data
003b5a  286a              CMP      r0,#0x6a              ;5442
003b5c  d047              BEQ      |L1.15342|
                  |L1.15198|
003b5e  6830              LDR      r0,[r6,#0]            ;5449  ; avar_ind_stat
003b60  4238              TST      r0,r7                 ;5449
003b62  d052              BEQ      |L1.15370|
003b64  69a0              LDR      r0,[r4,#0x18]         ;5450
003b66  f0400080          ORR      r0,r0,#0x80           ;5450
003b6a  61a0              STR      r0,[r4,#0x18]         ;5450
                  |L1.15212|
003b6c  20d2              MOVS     r0,#0xd2              ;5455
003b6e  f7fffffe          BL       mess_find_unvol
003b72  b110              CBZ      r0,|L1.15226|
003b74  6828              LDR      r0,[r5,#0]            ;5455  ; mess_data
003b76  2867              CMP      r0,#0x67              ;5455
003b78  d04d              BEQ      |L1.15382|
                  |L1.15226|
003b7a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003b7e  b380              CBZ      r0,|L1.15330|
;;;5463        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003b80  69a0              LDR      r0,[r4,#0x18]
003b82  f0400010          ORR      r0,r0,#0x10
003b86  61a0              STR      r0,[r4,#0x18]
003b88  e1f1              B        |L1.16238|
                  |L1.15242|
003b8a  6868              LDR      r0,[r5,#4]            ;4963  ; mess_data
003b8c  2801              CMP      r0,#1                 ;4963
003b8e  d006              BEQ      |L1.15262|
003b90  2800              CMP      r0,#0                 ;4964
003b92  d1b5              BNE      |L1.15104|
003b94  69e0              LDR      r0,[r4,#0x1c]         ;4964
003b96  f0405000          ORR      r0,r0,#0x20000000     ;4964
003b9a  61e0              STR      r0,[r4,#0x1c]         ;4964
003b9c  e7b0              B        |L1.15104|
                  |L1.15262|
003b9e  69a0              LDR      r0,[r4,#0x18]         ;4963
003ba0  f0405000          ORR      r0,r0,#0x20000000     ;4963
003ba4  61a0              STR      r0,[r4,#0x18]         ;4963
003ba6  e7ab              B        |L1.15104|
                  |L1.15272|
003ba8  6868              LDR      r0,[r5,#4]            ;4983  ; mess_data
003baa  b120              CBZ      r0,|L1.15286|
003bac  6fa0              LDR      r0,[r4,#0x78]         ;4984
003bae  f0407000          ORR      r0,r0,#0x2000000      ;4984
003bb2  67a0              STR      r0,[r4,#0x78]         ;4984
003bb4  e7b3              B        |L1.15134|
                  |L1.15286|
003bb6  6fe0              LDR      r0,[r4,#0x7c]         ;4983
003bb8  f0407000          ORR      r0,r0,#0x2000000      ;4983
003bbc  67e0              STR      r0,[r4,#0x7c]         ;4983
003bbe  e7ae              B        |L1.15134|
                  |L1.15296|
003bc0  6fe0              LDR      r0,[r4,#0x7c]         ;4986
003bc2  f0407000          ORR      r0,r0,#0x2000000      ;4986
003bc6  67e0              STR      r0,[r4,#0x7c]         ;4986
003bc8  e7a9              B        |L1.15134|
                  |L1.15306|
003bca  6868              LDR      r0,[r5,#4]            ;5424  ; mess_data
003bcc  b120              CBZ      r0,|L1.15320|
003bce  6fa0              LDR      r0,[r4,#0x78]         ;5425
003bd0  f0407000          ORR      r0,r0,#0x2000000      ;5425
003bd4  67a0              STR      r0,[r4,#0x78]         ;5425
003bd6  e7bb              B        |L1.15184|
                  |L1.15320|
003bd8  6fe0              LDR      r0,[r4,#0x7c]         ;5424
003bda  f0407000          ORR      r0,r0,#0x2000000      ;5424
003bde  67e0              STR      r0,[r4,#0x7c]         ;5424
003be0  e7b6              B        |L1.15184|
                  |L1.15330|
003be2  e027              B        |L1.15412|
                  |L1.15332|
003be4  6fe0              LDR      r0,[r4,#0x7c]         ;5427
003be6  f0407000          ORR      r0,r0,#0x2000000      ;5427
003bea  67e0              STR      r0,[r4,#0x7c]         ;5427
003bec  e7b0              B        |L1.15184|
                  |L1.15342|
003bee  6868              LDR      r0,[r5,#4]            ;5444  ; mess_data
003bf0  b130              CBZ      r0,|L1.15360|
003bf2  2801              CMP      r0,#1                 ;5445
003bf4  d1ba              BNE      |L1.15212|
003bf6  69a0              LDR      r0,[r4,#0x18]         ;5445
003bf8  f0400080          ORR      r0,r0,#0x80           ;5445
003bfc  61a0              STR      r0,[r4,#0x18]         ;5445
003bfe  e7b5              B        |L1.15212|
                  |L1.15360|
003c00  69e0              LDR      r0,[r4,#0x1c]         ;5444
003c02  f0400080          ORR      r0,r0,#0x80           ;5444
003c06  61e0              STR      r0,[r4,#0x1c]         ;5444
003c08  e7b0              B        |L1.15212|
                  |L1.15370|
003c0a  69e0              LDR      r0,[r4,#0x1c]         ;5449
003c0c  f0400080          ORR      r0,r0,#0x80           ;5449
003c10  61e0              STR      r0,[r4,#0x1c]         ;5449
003c12  e7ab              B        |L1.15212|
                  |L1.15380|
003c14  e013              B        |L1.15422|
                  |L1.15382|
003c16  6868              LDR      r0,[r5,#4]            ;5457  ; mess_data
003c18  b110              CBZ      r0,|L1.15392|
003c1a  2801              CMP      r0,#1                 ;5458
003c1c  d005              BEQ      |L1.15402|
003c1e  e1a6              B        |L1.16238|
                  |L1.15392|
003c20  69e0              LDR      r0,[r4,#0x1c]         ;5457
003c22  f0400010          ORR      r0,r0,#0x10           ;5457
003c26  61e0              STR      r0,[r4,#0x1c]         ;5457
003c28  e1a1              B        |L1.16238|
                  |L1.15402|
003c2a  69a0              LDR      r0,[r4,#0x18]         ;5458
003c2c  f0400010          ORR      r0,r0,#0x10           ;5458
003c30  61a0              STR      r0,[r4,#0x18]         ;5458
003c32  e19c              B        |L1.16238|
                  |L1.15412|
003c34  69e0              LDR      r0,[r4,#0x1c]         ;5462
003c36  f0400010          ORR      r0,r0,#0x10           ;5462
003c3a  61e0              STR      r0,[r4,#0x1c]         ;5462
003c3c  e197              B        |L1.16238|
                  |L1.15422|
;;;5464   		}
;;;5465   	#endif
;;;5466   	#ifdef APSENERGIA
;;;5467   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5468   		{
;;;5469   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5470   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5471        	}
;;;5472   	else 
;;;5473   		{
;;;5474   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5475   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5476   		}
;;;5477   	#endif
;;;5478   	}
;;;5479   
;;;5480   else	if(AUSW_MAIN==22023)
003c3e  f5a041ac          SUB      r1,r0,#0x5600
003c42  3907              SUBS     r1,#7
003c44  d176              BNE      |L1.15668|
;;;5481   	{
;;;5482   
;;;5483   	//Реле аварий батарей
;;;5484   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003c46  20d2              MOVS     r0,#0xd2
003c48  f7fffffe          BL       mess_find_unvol
003c4c  b110              CBZ      r0,|L1.15444|
003c4e  6828              LDR      r0,[r5,#0]  ; mess_data
003c50  2867              CMP      r0,#0x67
003c52  d023              BEQ      |L1.15516|
                  |L1.15444|
;;;5485   		{
;;;5486   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5487   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5488        	}
;;;5489   	else 
;;;5490   		{
;;;5491   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003c54  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003c58  b370              CBZ      r0,|L1.15544|
;;;5492        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003c5a  69a0              LDR      r0,[r4,#0x18]
003c5c  f0400010          ORR      r0,r0,#0x10
003c60  61a0              STR      r0,[r4,#0x18]
                  |L1.15458|
;;;5493   		} 
;;;5494   
;;;5495   
;;;5496   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5497   	#ifndef UKU2071x
;;;5498   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5499   		{
;;;5500   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5501   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5502   		}
;;;5503   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5504   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5505   	#endif
;;;5506   	#ifdef UKU2071x
;;;5507   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c62  20d2              MOVS     r0,#0xd2
003c64  f7fffffe          BL       mess_find_unvol
003c68  b110              CBZ      r0,|L1.15472|
003c6a  6828              LDR      r0,[r5,#0]  ; mess_data
003c6c  2866              CMP      r0,#0x66
003c6e  d028              BEQ      |L1.15554|
                  |L1.15472|
;;;5508   		{
;;;5509   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5510   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5511   		}
;;;5512   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003c70  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c72  07c0              LSLS     r0,r0,#31
003c74  d031              BEQ      |L1.15578|
;;;5513   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003c76  6fa0              LDR      r0,[r4,#0x78]
003c78  f0407000          ORR      r0,r0,#0x2000000
003c7c  67a0              STR      r0,[r4,#0x78]
                  |L1.15486|
;;;5514   	#endif
;;;5515   
;;;5516   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003c7e  20d2              MOVS     r0,#0xd2
003c80  f7fffffe          BL       mess_find_unvol
003c84  b110              CBZ      r0,|L1.15500|
003c86  6828              LDR      r0,[r5,#0]  ; mess_data
003c88  286a              CMP      r0,#0x6a
003c8a  d02b              BEQ      |L1.15588|
                  |L1.15500|
;;;5517   		{
;;;5518   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5519   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5520   	     }
;;;5521   	else 
;;;5522   		{
;;;5523   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003c8c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c8e  4238              TST      r0,r7
003c90  d056              BEQ      |L1.15680|
;;;5524   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003c92  69a0              LDR      r0,[r4,#0x18]
003c94  f0400080          ORR      r0,r0,#0x80
003c98  61a0              STR      r0,[r4,#0x18]
003c9a  e168              B        |L1.16238|
                  |L1.15516|
003c9c  6868              LDR      r0,[r5,#4]            ;5486  ; mess_data
003c9e  b130              CBZ      r0,|L1.15534|
003ca0  2801              CMP      r0,#1                 ;5487
003ca2  d1de              BNE      |L1.15458|
003ca4  69a0              LDR      r0,[r4,#0x18]         ;5487
003ca6  f0400010          ORR      r0,r0,#0x10           ;5487
003caa  61a0              STR      r0,[r4,#0x18]         ;5487
003cac  e7d9              B        |L1.15458|
                  |L1.15534|
003cae  69e0              LDR      r0,[r4,#0x1c]         ;5486
003cb0  f0400010          ORR      r0,r0,#0x10           ;5486
003cb4  61e0              STR      r0,[r4,#0x1c]         ;5486
003cb6  e7d4              B        |L1.15458|
                  |L1.15544|
003cb8  69e0              LDR      r0,[r4,#0x1c]         ;5491
003cba  f0400010          ORR      r0,r0,#0x10           ;5491
003cbe  61e0              STR      r0,[r4,#0x1c]         ;5491
003cc0  e7cf              B        |L1.15458|
                  |L1.15554|
003cc2  6868              LDR      r0,[r5,#4]            ;5509  ; mess_data
003cc4  b120              CBZ      r0,|L1.15568|
003cc6  69e0              LDR      r0,[r4,#0x1c]         ;5510
003cc8  f0407000          ORR      r0,r0,#0x2000000      ;5510
003ccc  61e0              STR      r0,[r4,#0x1c]         ;5510
003cce  e7d6              B        |L1.15486|
                  |L1.15568|
003cd0  69a0              LDR      r0,[r4,#0x18]         ;5509
003cd2  f0407000          ORR      r0,r0,#0x2000000      ;5509
003cd6  61a0              STR      r0,[r4,#0x18]         ;5509
003cd8  e7d1              B        |L1.15486|
                  |L1.15578|
003cda  6ba0              LDR      r0,[r4,#0x38]         ;5512
003cdc  f0407000          ORR      r0,r0,#0x2000000      ;5512
003ce0  63a0              STR      r0,[r4,#0x38]         ;5512
003ce2  e7cc              B        |L1.15486|
                  |L1.15588|
003ce4  6868              LDR      r0,[r5,#4]            ;5518  ; mess_data
003ce6  b110              CBZ      r0,|L1.15598|
003ce8  2801              CMP      r0,#1                 ;5519
003cea  d024              BEQ      |L1.15670|
003cec  e13f              B        |L1.16238|
                  |L1.15598|
003cee  69e0              LDR      r0,[r4,#0x1c]         ;5518
003cf0  f0400080          ORR      r0,r0,#0x80           ;5518
003cf4  61e0              STR      r0,[r4,#0x1c]         ;5518
003cf6  e13a              B        |L1.16238|
                  |L1.15608|
                          DCD      bps
                  |L1.15612|
                          DCD      NUMIST
                  |L1.15616|
                          DCD      ||area_number.25||+0x80
                  |L1.15620|
                          DCD      0x4002c000
                  |L1.15624|
                          DCD      0xfff000ff
                  |L1.15628|
                          DCD      0x2009c000
                  |L1.15632|
                          DCD      bat
                  |L1.15636|
                          DCD      tbatdisable_stat
                  |L1.15640|
                          DCD      tbatdisable_cmnd
                  |L1.15644|
                          DCD      main_1Hz_cnt
                  |L1.15648|
                          DCD      mess_data
                  |L1.15652|
                          DCD      avar_ind_stat
                  |L1.15656|
                          DCD      AUSW_MAIN
                  |L1.15660|
                          DCD      ips_bat_av_stat
                  |L1.15664|
                          DCD      0x100007f8
                  |L1.15668|
003d34  e009              B        |L1.15690|
                  |L1.15670|
003d36  69a0              LDR      r0,[r4,#0x18]         ;5519
003d38  f0400080          ORR      r0,r0,#0x80           ;5519
003d3c  61a0              STR      r0,[r4,#0x18]         ;5519
003d3e  e116              B        |L1.16238|
                  |L1.15680|
003d40  69e0              LDR      r0,[r4,#0x1c]         ;5523
003d42  f0400080          ORR      r0,r0,#0x80           ;5523
003d46  61e0              STR      r0,[r4,#0x1c]         ;5523
003d48  e111              B        |L1.16238|
                  |L1.15690|
;;;5525   		} 
;;;5526   	}
;;;5527   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003d4a  f5a041ac          SUB      r1,r0,#0x5600
003d4e  391b              SUBS     r1,r1,#0x1b
003d50  d001              BEQ      |L1.15702|
003d52  1e49              SUBS     r1,r1,#1
003d54  d170              BNE      |L1.15928|
                  |L1.15702|
;;;5528   	{
;;;5529   	//Реле аварий батарей
;;;5530   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003d56  20d2              MOVS     r0,#0xd2
003d58  f7fffffe          BL       mess_find_unvol
003d5c  b110              CBZ      r0,|L1.15716|
003d5e  6828              LDR      r0,[r5,#0]  ; mess_data
003d60  2867              CMP      r0,#0x67
003d62  d031              BEQ      |L1.15816|
                  |L1.15716|
;;;5531   		{
;;;5532   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5533   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5534        	}
;;;5535   	else 
;;;5536   		{
;;;5537   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003d64  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003d68  b3b8              CBZ      r0,|L1.15834|
;;;5538        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003d6a  69a0              LDR      r0,[r4,#0x18]
003d6c  f0400010          ORR      r0,r0,#0x10
003d70  61a0              STR      r0,[r4,#0x18]
                  |L1.15730|
;;;5539   		} 
;;;5540   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5541   	#ifndef UKU2071x 
;;;5542   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5543   		{
;;;5544   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5545   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5546   		}
;;;5547   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5548   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5549   	#endif
;;;5550   	#ifdef UKU2071x 
;;;5551   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003d72  20d2              MOVS     r0,#0xd2
003d74  f7fffffe          BL       mess_find_unvol
003d78  b110              CBZ      r0,|L1.15744|
003d7a  6828              LDR      r0,[r5,#0]  ; mess_data
003d7c  2866              CMP      r0,#0x66
003d7e  d037              BEQ      |L1.15856|
                  |L1.15744|
;;;5552   		{
;;;5553   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5554   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5555   		}
;;;5556   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003d80  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d82  07c0              LSLS     r0,r0,#31
003d84  d040              BEQ      |L1.15880|
;;;5557   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003d86  6fa0              LDR      r0,[r4,#0x78]
003d88  f0407000          ORR      r0,r0,#0x2000000
003d8c  67a0              STR      r0,[r4,#0x78]
                  |L1.15758|
;;;5558   	#endif
;;;5559   
;;;5560   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003d8e  20d2              MOVS     r0,#0xd2
003d90  f7fffffe          BL       mess_find_unvol
003d94  b110              CBZ      r0,|L1.15772|
003d96  6828              LDR      r0,[r5,#0]  ; mess_data
003d98  286a              CMP      r0,#0x6a
003d9a  d03a              BEQ      |L1.15890|
                  |L1.15772|
;;;5561   		{
;;;5562   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5563   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5564   	     }
;;;5565   	else 
;;;5566   		{
;;;5567   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003d9c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d9e  4238              TST      r0,r7
003da0  d045              BEQ      |L1.15918|
;;;5568   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003da2  69a0              LDR      r0,[r4,#0x18]
003da4  f0400080          ORR      r0,r0,#0x80
003da8  61a0              STR      r0,[r4,#0x18]
                  |L1.15786|
;;;5569   		}
;;;5570   	//Реле аварии БПС
;;;5571   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003daa  20d2              MOVS     r0,#0xd2
003dac  f7fffffe          BL       mess_find_unvol
003db0  b110              CBZ      r0,|L1.15800|
003db2  6828              LDR      r0,[r5,#0]  ; mess_data
003db4  286a              CMP      r0,#0x6a
003db6  d040              BEQ      |L1.15930|
                  |L1.15800|
;;;5572   		{
;;;5573   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5574   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5575        	}
;;;5576   	else 
;;;5577   		{
;;;5578   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003db8  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003dba  4238              TST      r0,r7
003dbc  d04c              BEQ      |L1.15960|
;;;5579        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003dbe  69a0              LDR      r0,[r4,#0x18]
003dc0  f0400020          ORR      r0,r0,#0x20
003dc4  61a0              STR      r0,[r4,#0x18]
003dc6  e0d2              B        |L1.16238|
                  |L1.15816|
003dc8  6868              LDR      r0,[r5,#4]            ;5532  ; mess_data
003dca  b138              CBZ      r0,|L1.15836|
003dcc  2801              CMP      r0,#1                 ;5533
003dce  d1d0              BNE      |L1.15730|
003dd0  69a0              LDR      r0,[r4,#0x18]         ;5533
003dd2  f0400010          ORR      r0,r0,#0x10           ;5533
003dd6  61a0              STR      r0,[r4,#0x18]         ;5533
003dd8  e7cb              B        |L1.15730|
                  |L1.15834|
003dda  e004              B        |L1.15846|
                  |L1.15836|
003ddc  69e0              LDR      r0,[r4,#0x1c]         ;5532
003dde  f0400010          ORR      r0,r0,#0x10           ;5532
003de2  61e0              STR      r0,[r4,#0x1c]         ;5532
003de4  e7c5              B        |L1.15730|
                  |L1.15846|
003de6  69e0              LDR      r0,[r4,#0x1c]         ;5537
003de8  f0400010          ORR      r0,r0,#0x10           ;5537
003dec  61e0              STR      r0,[r4,#0x1c]         ;5537
003dee  e7c0              B        |L1.15730|
                  |L1.15856|
003df0  6868              LDR      r0,[r5,#4]            ;5553  ; mess_data
003df2  b120              CBZ      r0,|L1.15870|
003df4  69e0              LDR      r0,[r4,#0x1c]         ;5554
003df6  f0407000          ORR      r0,r0,#0x2000000      ;5554
003dfa  61e0              STR      r0,[r4,#0x1c]         ;5554
003dfc  e7c7              B        |L1.15758|
                  |L1.15870|
003dfe  69a0              LDR      r0,[r4,#0x18]         ;5553
003e00  f0407000          ORR      r0,r0,#0x2000000      ;5553
003e04  61a0              STR      r0,[r4,#0x18]         ;5553
003e06  e7c2              B        |L1.15758|
                  |L1.15880|
003e08  6ba0              LDR      r0,[r4,#0x38]         ;5556
003e0a  f0407000          ORR      r0,r0,#0x2000000      ;5556
003e0e  63a0              STR      r0,[r4,#0x38]         ;5556
003e10  e7bd              B        |L1.15758|
                  |L1.15890|
003e12  6868              LDR      r0,[r5,#4]            ;5562  ; mess_data
003e14  b130              CBZ      r0,|L1.15908|
003e16  2801              CMP      r0,#1                 ;5563
003e18  d1c7              BNE      |L1.15786|
003e1a  69a0              LDR      r0,[r4,#0x18]         ;5563
003e1c  f0400080          ORR      r0,r0,#0x80           ;5563
003e20  61a0              STR      r0,[r4,#0x18]         ;5563
003e22  e7c2              B        |L1.15786|
                  |L1.15908|
003e24  69e0              LDR      r0,[r4,#0x1c]         ;5562
003e26  f0400080          ORR      r0,r0,#0x80           ;5562
003e2a  61e0              STR      r0,[r4,#0x1c]         ;5562
003e2c  e7bd              B        |L1.15786|
                  |L1.15918|
003e2e  69e0              LDR      r0,[r4,#0x1c]         ;5567
003e30  f0400080          ORR      r0,r0,#0x80           ;5567
003e34  61e0              STR      r0,[r4,#0x1c]         ;5567
003e36  e7b8              B        |L1.15786|
                  |L1.15928|
003e38  e013              B        |L1.15970|
                  |L1.15930|
003e3a  6868              LDR      r0,[r5,#4]            ;5573  ; mess_data
003e3c  b110              CBZ      r0,|L1.15940|
003e3e  2801              CMP      r0,#1                 ;5574
003e40  d005              BEQ      |L1.15950|
003e42  e094              B        |L1.16238|
                  |L1.15940|
003e44  69e0              LDR      r0,[r4,#0x1c]         ;5573
003e46  f0400020          ORR      r0,r0,#0x20           ;5573
003e4a  61e0              STR      r0,[r4,#0x1c]         ;5573
003e4c  e08f              B        |L1.16238|
                  |L1.15950|
003e4e  69a0              LDR      r0,[r4,#0x18]         ;5574
003e50  f0400020          ORR      r0,r0,#0x20           ;5574
003e54  61a0              STR      r0,[r4,#0x18]         ;5574
003e56  e08a              B        |L1.16238|
                  |L1.15960|
003e58  69e0              LDR      r0,[r4,#0x1c]         ;5578
003e5a  f0400020          ORR      r0,r0,#0x20           ;5578
003e5e  61e0              STR      r0,[r4,#0x1c]         ;5578
003e60  e085              B        |L1.16238|
                  |L1.15970|
;;;5580   		} 
;;;5581   	}
;;;5582   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003e62  f5a041ac          SUB      r1,r0,#0x5600
003e66  3911              SUBS     r1,r1,#0x11
003e68  d001              BEQ      |L1.15982|
003e6a  310f              ADDS     r1,r1,#0xf
003e6c  d163              BNE      |L1.16182|
                  |L1.15982|
;;;5583   	{
;;;5584   	#ifndef UKU2071x 
;;;5585   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5586   		{
;;;5587   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5588   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5589   		}
;;;5590   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5591   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5592   	#endif
;;;5593   	#ifdef UKU2071x 
;;;5594   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003e6e  20d2              MOVS     r0,#0xd2
003e70  f7fffffe          BL       mess_find_unvol
003e74  b110              CBZ      r0,|L1.15996|
003e76  6828              LDR      r0,[r5,#0]  ; mess_data
003e78  2866              CMP      r0,#0x66
003e7a  d023              BEQ      |L1.16068|
                  |L1.15996|
;;;5595   		{
;;;5596   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5597   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5598   		}
;;;5599   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003e7c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e7e  07c0              LSLS     r0,r0,#31
003e80  d02c              BEQ      |L1.16092|
;;;5600   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003e82  6fa0              LDR      r0,[r4,#0x78]
003e84  f0407000          ORR      r0,r0,#0x2000000
003e88  67a0              STR      r0,[r4,#0x78]
                  |L1.16010|
;;;5601   	#endif
;;;5602   	
;;;5603   	
;;;5604   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003e8a  20d2              MOVS     r0,#0xd2
003e8c  f7fffffe          BL       mess_find_unvol
003e90  b110              CBZ      r0,|L1.16024|
003e92  6828              LDR      r0,[r5,#0]  ; mess_data
003e94  286a              CMP      r0,#0x6a
003e96  d026              BEQ      |L1.16102|
                  |L1.16024|
;;;5605   		{
;;;5606   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5607   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5608   	     }
;;;5609   	else 
;;;5610   		{
;;;5611   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003e98  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e9a  4238              TST      r0,r7
003e9c  d031              BEQ      |L1.16130|
;;;5612   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003e9e  69a0              LDR      r0,[r4,#0x18]
003ea0  f0400080          ORR      r0,r0,#0x80
003ea4  61a0              STR      r0,[r4,#0x18]
                  |L1.16038|
;;;5613   		} 
;;;5614   
;;;5615   	//Реле аварий батарей
;;;5616   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003ea6  20d2              MOVS     r0,#0xd2
003ea8  f7fffffe          BL       mess_find_unvol
003eac  b110              CBZ      r0,|L1.16052|
003eae  6828              LDR      r0,[r5,#0]  ; mess_data
003eb0  2867              CMP      r0,#0x67
003eb2  d02b              BEQ      |L1.16140|
                  |L1.16052|
;;;5617   		{
;;;5618   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5619   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5620        	}
;;;5621   	else 
;;;5622   		{
;;;5623   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003eb4  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003eb8  b390              CBZ      r0,|L1.16160|
;;;5624        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003eba  69a0              LDR      r0,[r4,#0x18]
003ebc  f0400010          ORR      r0,r0,#0x10
003ec0  61a0              STR      r0,[r4,#0x18]
003ec2  e054              B        |L1.16238|
                  |L1.16068|
003ec4  6868              LDR      r0,[r5,#4]            ;5596  ; mess_data
003ec6  b120              CBZ      r0,|L1.16082|
003ec8  6fa0              LDR      r0,[r4,#0x78]         ;5597
003eca  f0407000          ORR      r0,r0,#0x2000000      ;5597
003ece  67a0              STR      r0,[r4,#0x78]         ;5597
003ed0  e7db              B        |L1.16010|
                  |L1.16082|
003ed2  6fe0              LDR      r0,[r4,#0x7c]         ;5596
003ed4  f0407000          ORR      r0,r0,#0x2000000      ;5596
003ed8  67e0              STR      r0,[r4,#0x7c]         ;5596
003eda  e7d6              B        |L1.16010|
                  |L1.16092|
003edc  6fe0              LDR      r0,[r4,#0x7c]         ;5599
003ede  f0407000          ORR      r0,r0,#0x2000000      ;5599
003ee2  67e0              STR      r0,[r4,#0x7c]         ;5599
003ee4  e7d1              B        |L1.16010|
                  |L1.16102|
003ee6  6868              LDR      r0,[r5,#4]            ;5606  ; mess_data
003ee8  b130              CBZ      r0,|L1.16120|
003eea  2801              CMP      r0,#1                 ;5607
003eec  d1db              BNE      |L1.16038|
003eee  69a0              LDR      r0,[r4,#0x18]         ;5607
003ef0  f0400080          ORR      r0,r0,#0x80           ;5607
003ef4  61a0              STR      r0,[r4,#0x18]         ;5607
003ef6  e7d6              B        |L1.16038|
                  |L1.16120|
003ef8  69e0              LDR      r0,[r4,#0x1c]         ;5606
003efa  f0400080          ORR      r0,r0,#0x80           ;5606
003efe  61e0              STR      r0,[r4,#0x1c]         ;5606
003f00  e7d1              B        |L1.16038|
                  |L1.16130|
003f02  69e0              LDR      r0,[r4,#0x1c]         ;5611
003f04  f0400080          ORR      r0,r0,#0x80           ;5611
003f08  61e0              STR      r0,[r4,#0x1c]         ;5611
003f0a  e7cc              B        |L1.16038|
                  |L1.16140|
003f0c  6868              LDR      r0,[r5,#4]            ;5618  ; mess_data
003f0e  b110              CBZ      r0,|L1.16150|
003f10  2801              CMP      r0,#1                 ;5619
003f12  d006              BEQ      |L1.16162|
003f14  e02b              B        |L1.16238|
                  |L1.16150|
003f16  69e0              LDR      r0,[r4,#0x1c]         ;5618
003f18  f0400010          ORR      r0,r0,#0x10           ;5618
003f1c  61e0              STR      r0,[r4,#0x1c]         ;5618
003f1e  e026              B        |L1.16238|
                  |L1.16160|
003f20  e004              B        |L1.16172|
                  |L1.16162|
003f22  69a0              LDR      r0,[r4,#0x18]         ;5619
003f24  f0400010          ORR      r0,r0,#0x10           ;5619
003f28  61a0              STR      r0,[r4,#0x18]         ;5619
003f2a  e020              B        |L1.16238|
                  |L1.16172|
003f2c  69e0              LDR      r0,[r4,#0x1c]         ;5623
003f2e  f0400010          ORR      r0,r0,#0x10           ;5623
003f32  61e0              STR      r0,[r4,#0x1c]         ;5623
003f34  e01b              B        |L1.16238|
                  |L1.16182|
;;;5625   		} 
;;;5626   	} 	 
;;;5627   else	
;;;5628   	{
;;;5629   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5630   	#ifndef UKU2071x 
;;;5631   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5632   		{
;;;5633   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5634   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5635   		}
;;;5636   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5637   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5638   	#endif
;;;5639   	#ifdef UKU2071x 
;;;5640   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003f36  20d2              MOVS     r0,#0xd2
003f38  f7fffffe          BL       mess_find_unvol
003f3c  b110              CBZ      r0,|L1.16196|
003f3e  6828              LDR      r0,[r5,#0]  ; mess_data
003f40  2866              CMP      r0,#0x66
003f42  d026              BEQ      |L1.16274|
                  |L1.16196|
;;;5641   		{
;;;5642   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5643   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5644   		}
;;;5645   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003f44  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f46  07c0              LSLS     r0,r0,#31
003f48  d02f              BEQ      |L1.16298|
;;;5646   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003f4a  6fa0              LDR      r0,[r4,#0x78]
003f4c  f0407000          ORR      r0,r0,#0x2000000
003f50  67a0              STR      r0,[r4,#0x78]
                  |L1.16210|
;;;5647   	#endif
;;;5648   
;;;5649   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003f52  20d2              MOVS     r0,#0xd2
003f54  f7fffffe          BL       mess_find_unvol
003f58  b110              CBZ      r0,|L1.16224|
003f5a  6828              LDR      r0,[r5,#0]  ; mess_data
003f5c  286a              CMP      r0,#0x6a
003f5e  d029              BEQ      |L1.16308|
                  |L1.16224|
;;;5650   		{
;;;5651   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5652   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5653        	}
;;;5654   	else 
;;;5655   		{
;;;5656   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003f60  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f62  4238              TST      r0,r7
003f64  d034              BEQ      |L1.16336|
;;;5657        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003f66  69a0              LDR      r0,[r4,#0x18]
003f68  f0400020          ORR      r0,r0,#0x20
003f6c  61a0              STR      r0,[r4,#0x18]
                  |L1.16238|
;;;5658   		}
;;;5659   	}
;;;5660   //Дополнительное реле УКУ 
;;;5661   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003f6e  20d2              MOVS     r0,#0xd2
003f70  f7fffffe          BL       mess_find_unvol
;;;5662   	{
;;;5663   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5664   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5665   	}
;;;5666   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5667   	{
;;;5668   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003f74  f8df83f8          LDR      r8,|L1.17264|
003f78  4ffe              LDR      r7,|L1.17268|
003f7a  4eff              LDR      r6,|L1.17272|
003f7c  b110              CBZ      r0,|L1.16260|
003f7e  6828              LDR      r0,[r5,#0]            ;5661  ; mess_data
003f80  2871              CMP      r0,#0x71              ;5661
003f82  d02a              BEQ      |L1.16346|
                  |L1.16260|
003f84  48fd              LDR      r0,|L1.17276|
003f86  f9b00000          LDRSH    r0,[r0,#0]            ;5666  ; DOP_RELE_FUNC
003f8a  b380              CBZ      r0,|L1.16366|
;;;5669   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5670   	}
;;;5671   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003f8c  2801              CMP      r0,#1
003f8e  d066              BEQ      |L1.16478|
003f90  e070              B        |L1.16500|
                  |L1.16274|
003f92  6868              LDR      r0,[r5,#4]            ;5642  ; mess_data
003f94  b120              CBZ      r0,|L1.16288|
003f96  69e0              LDR      r0,[r4,#0x1c]         ;5643
003f98  f0407000          ORR      r0,r0,#0x2000000      ;5643
003f9c  61e0              STR      r0,[r4,#0x1c]         ;5643
003f9e  e7d8              B        |L1.16210|
                  |L1.16288|
003fa0  69a0              LDR      r0,[r4,#0x18]         ;5642
003fa2  f0407000          ORR      r0,r0,#0x2000000      ;5642
003fa6  61a0              STR      r0,[r4,#0x18]         ;5642
003fa8  e7d3              B        |L1.16210|
                  |L1.16298|
003faa  6ba0              LDR      r0,[r4,#0x38]         ;5645
003fac  f0407000          ORR      r0,r0,#0x2000000      ;5645
003fb0  63a0              STR      r0,[r4,#0x38]         ;5645
003fb2  e7ce              B        |L1.16210|
                  |L1.16308|
003fb4  6868              LDR      r0,[r5,#4]            ;5651  ; mess_data
003fb6  b130              CBZ      r0,|L1.16326|
003fb8  2801              CMP      r0,#1                 ;5652
003fba  d1d8              BNE      |L1.16238|
003fbc  69a0              LDR      r0,[r4,#0x18]         ;5652
003fbe  f0400020          ORR      r0,r0,#0x20           ;5652
003fc2  61a0              STR      r0,[r4,#0x18]         ;5652
003fc4  e7d3              B        |L1.16238|
                  |L1.16326|
003fc6  69e0              LDR      r0,[r4,#0x1c]         ;5651
003fc8  f0400020          ORR      r0,r0,#0x20           ;5651
003fcc  61e0              STR      r0,[r4,#0x1c]         ;5651
003fce  e7ce              B        |L1.16238|
                  |L1.16336|
003fd0  69e0              LDR      r0,[r4,#0x1c]         ;5656
003fd2  f0400020          ORR      r0,r0,#0x20           ;5656
003fd6  61e0              STR      r0,[r4,#0x1c]         ;5656
003fd8  e7c9              B        |L1.16238|
                  |L1.16346|
003fda  6868              LDR      r0,[r5,#4]            ;5663  ; mess_data
003fdc  b110              CBZ      r0,|L1.16356|
003fde  2801              CMP      r0,#1                 ;5664
003fe0  d006              BEQ      |L1.16368|
003fe2  e047              B        |L1.16500|
                  |L1.16356|
003fe4  69e0              LDR      r0,[r4,#0x1c]         ;5663
003fe6  f4407000          ORR      r0,r0,#0x200          ;5663
003fea  61e0              STR      r0,[r4,#0x1c]         ;5663
003fec  e042              B        |L1.16500|
                  |L1.16366|
003fee  e004              B        |L1.16378|
                  |L1.16368|
003ff0  69a0              LDR      r0,[r4,#0x18]         ;5664
003ff2  f4407000          ORR      r0,r0,#0x200          ;5664
003ff6  61a0              STR      r0,[r4,#0x18]         ;5664
003ff8  e03c              B        |L1.16500|
                  |L1.16378|
003ffa  48e1              LDR      r0,|L1.17280|
003ffc  49e1              LDR      r1,|L1.17284|
003ffe  f9b00000          LDRSH    r0,[r0,#0]            ;5668  ; speedChIsOn
004002  b9d0              CBNZ     r0,|L1.16442|
004004  f8962023          LDRB     r2,[r6,#0x23]         ;5668  ; spc_stat
004008  2a02              CMP      r2,#2                 ;5668
00400a  d016              BEQ      |L1.16442|
00400c  780a              LDRB     r2,[r1,#0]            ;5668  ; hv_vz_stat
00400e  b9a2              CBNZ     r2,|L1.16442|
004010  783a              LDRB     r2,[r7,#0]            ;5668  ; sp_ch_stat
004012  b992              CBNZ     r2,|L1.16442|
004014  7972              LDRB     r2,[r6,#5]            ;5668  ; vz1_stat
004016  b982              CBNZ     r2,|L1.16442|
004018  79f2              LDRB     r2,[r6,#7]            ;5668  ; vz2_stat
00401a  b972              CBNZ     r2,|L1.16442|
00401c  f9b82000          LDRSH    r2,[r8,#0]            ;5668  ; load_U
004020  230a              MOVS     r3,#0xa               ;5668
004022  fb92f2f3          SDIV     r2,r2,r3              ;5668
004026  4bd8              LDR      r3,|L1.17288|
004028  f9b33000          LDRSH    r3,[r3,#0]            ;5668  ; UVENTOFF
00402c  429a              CMP      r2,r3                 ;5668
00402e  da04              BGE      |L1.16442|
004030  69e0              LDR      r0,[r4,#0x1c]         ;5668
004032  f4407000          ORR      r0,r0,#0x200          ;5668
004036  61e0              STR      r0,[r4,#0x1c]         ;5668
004038  e01c              B        |L1.16500|
                  |L1.16442|
00403a  b958              CBNZ     r0,|L1.16468|
00403c  f8960023          LDRB     r0,[r6,#0x23]         ;5669  ; spc_stat
004040  2802              CMP      r0,#2                 ;5669
004042  d007              BEQ      |L1.16468|
004044  7808              LDRB     r0,[r1,#0]            ;5669  ; hv_vz_stat
004046  b928              CBNZ     r0,|L1.16468|
004048  7838              LDRB     r0,[r7,#0]            ;5669  ; sp_ch_stat
00404a  b918              CBNZ     r0,|L1.16468|
00404c  7970              LDRB     r0,[r6,#5]            ;5669  ; vz1_stat
00404e  b908              CBNZ     r0,|L1.16468|
004050  79f0              LDRB     r0,[r6,#7]            ;5669  ; vz2_stat
004052  b178              CBZ      r0,|L1.16500|
                  |L1.16468|
004054  69a0              LDR      r0,[r4,#0x18]         ;5669
004056  f4407000          ORR      r0,r0,#0x200          ;5669
00405a  61a0              STR      r0,[r4,#0x18]         ;5669
00405c  e00a              B        |L1.16500|
                  |L1.16478|
;;;5672   	{
;;;5673   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
00405e  20d2              MOVS     r0,#0xd2
004060  f7fffffe          BL       mess_find_unvol
004064  b110              CBZ      r0,|L1.16492|
004066  6828              LDR      r0,[r5,#0]  ; mess_data
004068  2872              CMP      r0,#0x72
00406a  d017              BEQ      |L1.16540|
                  |L1.16492|
;;;5674   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
00406c  69a0              LDR      r0,[r4,#0x18]
00406e  f4407000          ORR      r0,r0,#0x200
004072  61a0              STR      r0,[r4,#0x18]
                  |L1.16500|
;;;5675   	}
;;;5676   
;;;5677   #endif //o_9
;;;5678   
;;;5679   #if defined UKU_6U || defined UKU_220_IPS_TERMOKOMPENSAT   //o_9	
;;;5680   //Блок выносной реле
;;;5681   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
004074  20d2              MOVS     r0,#0xd2
004076  f7fffffe          BL       mess_find_unvol
;;;5682   	{
;;;5683   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
00407a  f8df9310          LDR      r9,|L1.17292|
;;;5684   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5685   	}
;;;5686   else 
;;;5687   	{
;;;5688   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
00407e  4cc4              LDR      r4,|L1.17296|
004080  b110              CBZ      r0,|L1.16520|
004082  6828              LDR      r0,[r5,#0]            ;5681  ; mess_data
004084  2875              CMP      r0,#0x75              ;5681
004086  d00e              BEQ      |L1.16550|
                  |L1.16520|
004088  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00408a  07c0              LSLS     r0,r0,#31
00408c  d01e              BEQ      |L1.16588|
00408e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004092  f0400001          ORR      r0,r0,#1
004096  f8890000          STRB     r0,[r9,#0]
00409a  e01d              B        |L1.16600|
                  |L1.16540|
00409c  69e0              LDR      r0,[r4,#0x1c]         ;5673
00409e  f4407000          ORR      r0,r0,#0x200          ;5673
0040a2  61e0              STR      r0,[r4,#0x1c]         ;5673
0040a4  e7e6              B        |L1.16500|
                  |L1.16550|
0040a6  6868              LDR      r0,[r5,#4]            ;5683  ; mess_data
0040a8  b110              CBZ      r0,|L1.16560|
0040aa  2801              CMP      r0,#1                 ;5684
0040ac  d007              BEQ      |L1.16574|
0040ae  e013              B        |L1.16600|
                  |L1.16560|
0040b0  f8990000          LDRB     r0,[r9,#0]            ;5683  ; bdr_transmit_stat
0040b4  f00000fe          AND      r0,r0,#0xfe           ;5683
0040b8  f8890000          STRB     r0,[r9,#0]            ;5683
0040bc  e00c              B        |L1.16600|
                  |L1.16574|
0040be  f8990000          LDRB     r0,[r9,#0]            ;5684  ; bdr_transmit_stat
0040c2  f0400001          ORR      r0,r0,#1              ;5684
0040c6  f8890000          STRB     r0,[r9,#0]            ;5684
0040ca  e005              B        |L1.16600|
                  |L1.16588|
;;;5689   	else 						bdr_transmit_stat&=0xfe;
0040cc  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040d0  f00000fe          AND      r0,r0,#0xfe
0040d4  f8890000          STRB     r0,[r9,#0]
                  |L1.16600|
;;;5690   	}	
;;;5691   
;;;5692   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
0040d8  20d2              MOVS     r0,#0xd2
0040da  f7fffffe          BL       mess_find_unvol
0040de  b110              CBZ      r0,|L1.16614|
0040e0  6828              LDR      r0,[r5,#0]  ; mess_data
0040e2  2876              CMP      r0,#0x76
0040e4  d009              BEQ      |L1.16634|
                  |L1.16614|
;;;5693   	{
;;;5694   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5695   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5696   	}
;;;5697   else 
;;;5698   	{
;;;5699   	if(bdr_avar_stat&0x02)  	bdr_transmit_stat|=0x02;	 //o_9
0040e6  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0040e8  0780              LSLS     r0,r0,#30
0040ea  d519              BPL      |L1.16672|
0040ec  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040f0  f0400002          ORR      r0,r0,#2
0040f4  f8890000          STRB     r0,[r9,#0]
0040f8  e018              B        |L1.16684|
                  |L1.16634|
0040fa  6868              LDR      r0,[r5,#4]            ;5694  ; mess_data
0040fc  b110              CBZ      r0,|L1.16644|
0040fe  2801              CMP      r0,#1                 ;5695
004100  d007              BEQ      |L1.16658|
004102  e013              B        |L1.16684|
                  |L1.16644|
004104  f8990000          LDRB     r0,[r9,#0]            ;5694  ; bdr_transmit_stat
004108  f00000fd          AND      r0,r0,#0xfd           ;5694
00410c  f8890000          STRB     r0,[r9,#0]            ;5694
004110  e00c              B        |L1.16684|
                  |L1.16658|
004112  f8990000          LDRB     r0,[r9,#0]            ;5695  ; bdr_transmit_stat
004116  f0400002          ORR      r0,r0,#2              ;5695
00411a  f8890000          STRB     r0,[r9,#0]            ;5695
00411e  e005              B        |L1.16684|
                  |L1.16672|
;;;5700   	else 						bdr_transmit_stat&=0xfd;
004120  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004124  f00000fd          AND      r0,r0,#0xfd
004128  f8890000          STRB     r0,[r9,#0]
                  |L1.16684|
;;;5701   	}	
;;;5702   	
;;;5703   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
00412c  20d2              MOVS     r0,#0xd2
00412e  f7fffffe          BL       mess_find_unvol
004132  b110              CBZ      r0,|L1.16698|
004134  6828              LDR      r0,[r5,#0]  ; mess_data
004136  2877              CMP      r0,#0x77
004138  d009              BEQ      |L1.16718|
                  |L1.16698|
;;;5704   	{
;;;5705   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5706   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5707   	}
;;;5708   else 
;;;5709   	{
;;;5710   	if(bdr_avar_stat&0x04)  	bdr_transmit_stat|=0x04;	//o_9
00413a  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00413c  0740              LSLS     r0,r0,#29
00413e  d519              BPL      |L1.16756|
004140  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004144  f0400004          ORR      r0,r0,#4
004148  f8890000          STRB     r0,[r9,#0]
00414c  e018              B        |L1.16768|
                  |L1.16718|
00414e  6868              LDR      r0,[r5,#4]            ;5705  ; mess_data
004150  b110              CBZ      r0,|L1.16728|
004152  2801              CMP      r0,#1                 ;5706
004154  d007              BEQ      |L1.16742|
004156  e013              B        |L1.16768|
                  |L1.16728|
004158  f8990000          LDRB     r0,[r9,#0]            ;5705  ; bdr_transmit_stat
00415c  f00000fb          AND      r0,r0,#0xfb           ;5705
004160  f8890000          STRB     r0,[r9,#0]            ;5705
004164  e00c              B        |L1.16768|
                  |L1.16742|
004166  f8990000          LDRB     r0,[r9,#0]            ;5706  ; bdr_transmit_stat
00416a  f0400004          ORR      r0,r0,#4              ;5706
00416e  f8890000          STRB     r0,[r9,#0]            ;5706
004172  e005              B        |L1.16768|
                  |L1.16756|
;;;5711   	else 						bdr_transmit_stat&=0xfb;
004174  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004178  f00000fb          AND      r0,r0,#0xfb
00417c  f8890000          STRB     r0,[r9,#0]
                  |L1.16768|
;;;5712   	}	
;;;5713   	
;;;5714   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
004180  20d2              MOVS     r0,#0xd2
004182  f7fffffe          BL       mess_find_unvol
004186  b110              CBZ      r0,|L1.16782|
004188  6828              LDR      r0,[r5,#0]  ; mess_data
00418a  2878              CMP      r0,#0x78
00418c  d009              BEQ      |L1.16802|
                  |L1.16782|
;;;5715   	{
;;;5716   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5717   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5718   	}
;;;5719   else 
;;;5720   	{
;;;5721   	if(bdr_avar_stat&0x08)  	bdr_transmit_stat|=0x08;	 //o_9
00418e  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004190  0700              LSLS     r0,r0,#28
004192  d519              BPL      |L1.16840|
004194  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004198  f0400008          ORR      r0,r0,#8
00419c  f8890000          STRB     r0,[r9,#0]
0041a0  e018              B        |L1.16852|
                  |L1.16802|
0041a2  6868              LDR      r0,[r5,#4]            ;5716  ; mess_data
0041a4  b110              CBZ      r0,|L1.16812|
0041a6  2801              CMP      r0,#1                 ;5717
0041a8  d007              BEQ      |L1.16826|
0041aa  e013              B        |L1.16852|
                  |L1.16812|
0041ac  f8990000          LDRB     r0,[r9,#0]            ;5716  ; bdr_transmit_stat
0041b0  f00000f7          AND      r0,r0,#0xf7           ;5716
0041b4  f8890000          STRB     r0,[r9,#0]            ;5716
0041b8  e00c              B        |L1.16852|
                  |L1.16826|
0041ba  f8990000          LDRB     r0,[r9,#0]            ;5717  ; bdr_transmit_stat
0041be  f0400008          ORR      r0,r0,#8              ;5717
0041c2  f8890000          STRB     r0,[r9,#0]            ;5717
0041c6  e005              B        |L1.16852|
                  |L1.16840|
;;;5722   	else 						bdr_transmit_stat&=0xf7;
0041c8  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041cc  f00000f7          AND      r0,r0,#0xf7
0041d0  f8890000          STRB     r0,[r9,#0]
                  |L1.16852|
;;;5723   	}	
;;;5724   					 	
;;;5725   #endif
;;;5726   
;;;5727   #ifdef UKU_KONTUR
;;;5728   
;;;5729   //Реле общей аварии
;;;5730   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5731   	{
;;;5732   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5733   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5734   	}
;;;5735   else 
;;;5736   	{
;;;5737        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5738             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5739             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5740             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5741             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5742        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5743   	}
;;;5744   
;;;5745   	
;;;5746   //rel_warm_plazma=0;
;;;5747   //Реле освещения   
;;;5748   /*
;;;5749   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5750   	{
;;;5751   	if(mess_data[1]==0)
;;;5752   		{
;;;5753   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5754   		rel_warm_plazma=1;
;;;5755   		}
;;;5756   	else if(mess_data[1]==1) 
;;;5757   		{
;;;5758   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5759   		rel_warm_plazma=2;
;;;5760   		}
;;;5761        }
;;;5762   else 
;;;5763   	{
;;;5764   	if(warm_stat_k==wsOFF) 
;;;5765   		{
;;;5766   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5767   		rel_warm_plazma=3;
;;;5768   		}
;;;5769        else 
;;;5770   		{
;;;5771   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5772   		rel_warm_plazma=4;
;;;5773   		}
;;;5774   	}
;;;5775   */
;;;5776   //Реле освещения
;;;5777   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5778   	{
;;;5779   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5780   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5781        }
;;;5782   else 
;;;5783   	{
;;;5784   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5785        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5786   	}
;;;5787   
;;;5788   
;;;5789   
;;;5790   //Реле выключения нагрузки
;;;5791   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5792   	{
;;;5793   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5794   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5795        }
;;;5796   else if(tloaddisable_cmnd==0)
;;;5797   	{
;;;5798   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5799   	}
;;;5800   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5801   	{
;;;5802   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5803   	}
;;;5804   
;;;5805   else 
;;;5806   	{
;;;5807   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5808        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5809   	} 
;;;5810   
;;;5811   //Реле осевого вентилятора или отопителя
;;;5812   if(RELE_LOG)
;;;5813   	{
;;;5814   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5815   		{
;;;5816   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5817   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5818   		}
;;;5819   	else 
;;;5820   		{
;;;5821   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5822   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5823   		} 
;;;5824   
;;;5825   	}
;;;5826   else 
;;;5827   	{
;;;5828   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5829   		{
;;;5830   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5831   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5832   		}
;;;5833   	else 
;;;5834   		{
;;;5835   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5836   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5837   		} 
;;;5838   	}
;;;5839   #endif
;;;5840   
;;;5841   
;;;5842   #ifdef UKU_TELECORE2015
;;;5843   //Реле аварии сети
;;;5844   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5845   	{
;;;5846   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5847   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5848   	}
;;;5849   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5850   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5851   
;;;5852   
;;;5853   //Реле освещения
;;;5854   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5855   	{
;;;5856   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5857   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5858        }
;;;5859   else 
;;;5860   	{
;;;5861   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5862        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5863   	}
;;;5864   
;;;5865   //Реле отопителя
;;;5866   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5867   	{
;;;5868   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5869   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5870   	}
;;;5871   else 
;;;5872   	{
;;;5873   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5874        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5875   	} 
;;;5876   //Реле вентилятора
;;;5877   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5878   	{
;;;5879   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5880   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5881   	}
;;;5882   else 
;;;5883   	{
;;;5884   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5885        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5886   	} 
;;;5887   
;;;5888   //Реле внутреннего вентилятора
;;;5889   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5890   	{
;;;5891   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5892   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5893   	}
;;;5894   else 
;;;5895   	{
;;;5896   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5897        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5898   	} 
;;;5899   
;;;5900   #endif
;;;5901   
;;;5902   #ifdef UKU_TELECORE2017
;;;5903   //Реле аварии сети
;;;5904   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5905   	{
;;;5906   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5907   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5908   	}
;;;5909   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5910   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5911   
;;;5912   
;;;5913   //Реле освещения
;;;5914   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5915   	{
;;;5916   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5917   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5918        }
;;;5919   else 
;;;5920   	{
;;;5921   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5922        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5923   	}
;;;5924   
;;;5925   //Реле отопителя
;;;5926   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5927   	{
;;;5928   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5929   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5930   	}
;;;5931   else 
;;;5932   	{
;;;5933   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5934        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5935   	} 
;;;5936   //Реле вентилятора
;;;5937   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5938   	{
;;;5939   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5940   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5941   	}
;;;5942   else 
;;;5943   	{
;;;5944   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5945        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5946   	} 
;;;5947   
;;;5948   //Реле внутреннего вентилятора
;;;5949   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5950   	{
;;;5951   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5952   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5953   	}
;;;5954   else 
;;;5955   	{
;;;5956   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5957        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5958   	} 
;;;5959   
;;;5960   //Реле выключения нагрузки
;;;5961   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5962   	{
;;;5963   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5964   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5965        }
;;;5966   else if(tloaddisable_cmnd==0)
;;;5967   	{
;;;5968   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5969   	}
;;;5970   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5971   	{
;;;5972   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5973   	}
;;;5974   
;;;5975   else 
;;;5976   	{
;;;5977   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5978        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5979   	} 
;;;5980   
;;;5981   
;;;5982   #endif
;;;5983   
;;;5984   #ifdef IPS_SGEP_GAZPROM
;;;5985   rele_hndl_plazma[0]++;
;;;5986   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5987   	{
;;;5988   	rele_hndl_plazma[1]++;
;;;5989   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5990   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5991        }
;;;5992   else 
;;;5993   	{
;;;5994   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5995        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5996   	} 
;;;5997   
;;;5998   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5999   	{
;;;6000   	rele_hndl_plazma[2]++;
;;;6001   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6002   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6003   	}
;;;6004   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;6005   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;6006   #endif
;;;6007   
;;;6008   if(NUMBDR==1)
0041d4  486f              LDR      r0,|L1.17300|
0041d6  8800              LDRH     r0,[r0,#0]  ; NUMBDR
0041d8  2801              CMP      r0,#1
0041da  d17e              BNE      |L1.17114|
;;;6009   	{
;;;6010   	char ii_;
;;;6011   	char bdr_avar_stat_temp=0;
0041dc  f04f0000          MOV      r0,#0
;;;6012   	for	(ii_=0;ii_<4;ii_++)
0041e0  4601              MOV      r1,r0
;;;6013   		{
;;;6014   	//o_9_s
;;;6015   	#ifdef UKU_6U
;;;6016   		 //АБ разряжена
;;;6017   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6018   			( (bat[0]._Ub<(USIGN*10)) || (bat[1]._Ub<(USIGN*10)) ) )			bdr_avar_stat_temp|=(1<<ii_);
;;;6019   		//Выравнивающий заряд
;;;6020   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6021   			(spc_stat==spcVZ))				bdr_avar_stat_temp|=(1<<ii_);
;;;6022   	   	//Общая авария ИБЭП
;;;6023   		if((RELE_SET_MASK[ii_]&0x04)&& 		
;;;6024   			(avar_stat&0x7FF)!=0 )		   	bdr_avar_stat_temp|=(1<<ii_);
;;;6025   		//Ток АКБ<-0,5А
;;;6026   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6027   			(bat[0]._Ib<-50	|| bat[1]._Ib<-50 ) ) bdr_avar_stat_temp|=(1<<ii_);
;;;6028   	   	//отключение НПН
;;;6029   	    if((RELE_SET_MASK[ii_]&0x10)&& 
;;;6030   			NPN_OUT==npnoBDR && npn_stat==npnsOFF) bdr_avar_stat_temp|=(1<<ii_);
;;;6031   		//контроль емкости АКБ1
;;;6032   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6033   			(spc_stat==spcKE)&&(spc_bat==0))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6034   		//контроль емкости АКБ2
;;;6035   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6036   			(spc_stat==spcKE)&&(spc_bat==1))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6037   	#else
;;;6038   	//o_9_e		//АБ разряжена
;;;6039   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6040   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;6041   		//Ускоренный заряд
;;;6042   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6043   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;6044   		//Выравнивающий заряд
;;;6045   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;6046   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;6047   		//Общая авария ЗВУ
;;;6048   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6049   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;6050   		//Uвых завышено
;;;6051   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;6052   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
0041e2  f8dfa1b4          LDR      r10,|L1.17304|
;;;6053   		//Uвых занижено
;;;6054   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6055   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;6056   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6057   			(
;;;6058   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
0041e6  f8df91b4          LDR      r9,|L1.17308|
0041ea  4d6d              LDR      r5,|L1.17312|
0041ec  f8dfb1b4          LDR      r11,|L1.17316|
0041f0  f04f0301          MOV      r3,#1                 ;4963
                  |L1.16884|
0041f4  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;6039
0041f8  ea5f7cc2          LSLS     r12,r2,#31            ;6039
0041fc  d010              BEQ      |L1.16928|
0041fe  f8dfc1a8          LDR      r12,|L1.17320|
004202  f9b8e000          LDRSH    lr,[r8,#0]            ;6040  ; load_U
004206  f9bcc000          LDRSH    r12,[r12,#0]          ;6040  ; USIGN
00420a  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;6040
00420e  ebbe0f4c          CMP      lr,r12,LSL #1         ;6040
004212  da05              BGE      |L1.16928|
004214  fa03fc01          LSL      r12,r3,r1             ;6040
004218  ea4c0c00          ORR      r12,r12,r0            ;6040
00421c  f00c00ff          AND      r0,r12,#0xff          ;6040
                  |L1.16928|
004220  ea5f7c82          LSLS     r12,r2,#30            ;6042
004224  d50a              BPL      |L1.16956|
004226  f897c000          LDRB     r12,[r7,#0]           ;6043  ; sp_ch_stat
00422a  f1bc0f02          CMP      r12,#2                ;6043
00422e  d105              BNE      |L1.16956|
004230  fa03fc01          LSL      r12,r3,r1             ;6043
004234  ea4c0c00          ORR      r12,r12,r0            ;6043
004238  f00c00ff          AND      r0,r12,#0xff          ;6043
                  |L1.16956|
00423c  ea5f7c42          LSLS     r12,r2,#29            ;6045
004240  d50a              BPL      |L1.16984|
004242  f896c023          LDRB     r12,[r6,#0x23]        ;6046  ; spc_stat
004246  f1bc0f02          CMP      r12,#2                ;6046
00424a  d105              BNE      |L1.16984|
00424c  fa03fc01          LSL      r12,r3,r1             ;6046
004250  ea4c0c00          ORR      r12,r12,r0            ;6046
004254  f00c00ff          AND      r0,r12,#0xff          ;6046
                  |L1.16984|
004258  ea5f7c02          LSLS     r12,r2,#28            ;6048
00425c  d50c              BPL      |L1.17016|
00425e  f8dfc14c          LDR      r12,|L1.17324|
004262  f8dcc000          LDR      r12,[r12,#0]          ;6049  ; avar_stat
004266  f1bc0f00          CMP      r12,#0                ;6049
00426a  d005              BEQ      |L1.17016|
00426c  fa03fc01          LSL      r12,r3,r1             ;6049
004270  ea4c0c00          ORR      r12,r12,r0            ;6049
004274  f00c00ff          AND      r0,r12,#0xff          ;6049
                  |L1.17016|
004278  ea5f6cc2          LSLS     r12,r2,#27            ;6051
00427c  d50a              BPL      |L1.17044|
00427e  f89ac000          LDRB     r12,[r10,#0]          ;6052  ; uout_av
004282  f1bc0f01          CMP      r12,#1                ;6052
004286  d105              BNE      |L1.17044|
004288  fa03fc01          LSL      r12,r3,r1             ;6052
00428c  ea4c0c00          ORR      r12,r12,r0            ;6052
004290  f00c00ff          AND      r0,r12,#0xff          ;6052
                  |L1.17044|
004294  ea5f6c82          LSLS     r12,r2,#26            ;6054
004298  d50a              BPL      |L1.17072|
00429a  f89ac000          LDRB     r12,[r10,#0]          ;6055  ; uout_av
00429e  f1bc0f02          CMP      r12,#2                ;6055
0042a2  d105              BNE      |L1.17072|
0042a4  fa03fc01          LSL      r12,r3,r1             ;6055
0042a8  ea4c0c00          ORR      r12,r12,r0            ;6055
0042ac  f00c00ff          AND      r0,r12,#0xff          ;6055
                  |L1.17072|
0042b0  ea5f6c42          LSLS     r12,r2,#25            ;6056
0042b4  d525              BPL      |L1.17154|
0042b6  f899c001          LDRB     r12,[r9,#1]  ; bps
0042ba  ea5f6ccc          LSLS     r12,r12,#27
0042be  d504              BPL      |L1.17098|
0042c0  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042c4  f1bc0f01          CMP      r12,#1
0042c8  da15              BGE      |L1.17142|
                  |L1.17098|
;;;6059   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
0042ca  f899c065          LDRB     r12,[r9,#0x65]  ; bps
0042ce  ea5f6ccc          LSLS     r12,r12,#27
0042d2  d506              BPL      |L1.17122|
0042d4  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042d8  e000              B        |L1.17116|
                  |L1.17114|
0042da  e047              B        |L1.17260|
                  |L1.17116|
0042dc  f1bc0f02          CMP      r12,#2
0042e0  da09              BGE      |L1.17142|
                  |L1.17122|
;;;6060   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
0042e2  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
0042e6  ea5f6ccc          LSLS     r12,r12,#27
0042ea  d50a              BPL      |L1.17154|
0042ec  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042f0  f1bc0f03          CMP      r12,#3
0042f4  db05              BLT      |L1.17154|
                  |L1.17142|
;;;6061   			))bdr_avar_stat_temp|=(1<<ii_);
0042f6  fa03fc01          LSL      r12,r3,r1
0042fa  ea4c0c00          ORR      r12,r12,r0
0042fe  f00c00ff          AND      r0,r12,#0xff
                  |L1.17154|
;;;6062   		if((RELE_SET_MASK[ii_]&0x80)&&
004302  ea5f6c02          LSLS     r12,r2,#24
004306  d523              BPL      |L1.17232|
;;;6063   			(
;;;6064   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
004308  f899c001          LDRB     r12,[r9,#1]  ; bps
00430c  ea5f7c0c          LSLS     r12,r12,#28
004310  d004              BEQ      |L1.17180|
004312  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004316  f1bc0f01          CMP      r12,#1
00431a  da13              BGE      |L1.17220|
                  |L1.17180|
;;;6065   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
00431c  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004320  ea5f7c0c          LSLS     r12,r12,#28
004324  d004              BEQ      |L1.17200|
004326  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00432a  f1bc0f02          CMP      r12,#2
00432e  da09              BGE      |L1.17220|
                  |L1.17200|
;;;6066   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
004330  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
004334  ea5f7c0c          LSLS     r12,r12,#28
004338  d00a              BEQ      |L1.17232|
00433a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00433e  f1bc0f03          CMP      r12,#3
004342  db05              BLT      |L1.17232|
                  |L1.17220|
;;;6067   			))bdr_avar_stat_temp|=(1<<ii_);
004344  fa03fc01          LSL      r12,r3,r1
004348  ea4c0c00          ORR      r12,r12,r0
00434c  f00c00ff          AND      r0,r12,#0xff
                  |L1.17232|
;;;6068   	  #endif											 //o_9
;;;6069   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
004350  0412              LSLS     r2,r2,#16
004352  d404              BMI      |L1.17246|
004354  fa03f201          LSL      r2,r3,r1
004358  ea820200          EOR      r2,r2,r0
00435c  b2d0              UXTB     r0,r2
                  |L1.17246|
00435e  f1010101          ADD      r1,r1,#1              ;6012
004362  b2c9              UXTB     r1,r1                 ;6012
004364  2904              CMP      r1,#4                 ;6012
004366  f4ffaf45          BCC      |L1.16884|
;;;6070   		}
;;;6071   	bdr_avar_stat=bdr_avar_stat_temp;
00436a  7020              STRB     r0,[r4,#0]
                  |L1.17260|
;;;6072   	}
;;;6073   }
00436c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.17264|
                          DCD      load_U
                  |L1.17268|
                          DCD      sp_ch_stat
                  |L1.17272|
                          DCD      ||area_number.25||
                  |L1.17276|
                          DCD      DOP_RELE_FUNC
                  |L1.17280|
                          DCD      speedChIsOn
                  |L1.17284|
                          DCD      hv_vz_stat
                  |L1.17288|
                          DCD      UVENTOFF
                  |L1.17292|
                          DCD      bdr_transmit_stat
                  |L1.17296|
                          DCD      bdr_avar_stat
                  |L1.17300|
                          DCD      NUMBDR
                  |L1.17304|
                          DCD      uout_av
                  |L1.17308|
                          DCD      bps
                  |L1.17312|
                          DCD      NUMIST
                  |L1.17316|
                          DCD      RELE_SET_MASK
                  |L1.17320|
                          DCD      USIGN
                  |L1.17324|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6076   //-----------------------------------------------
;;;6077   void bps_hndl(void)
0043b0  e92d5ff0          PUSH     {r4-r12,lr}
;;;6078   {
;;;6079   char ptr__,i;
;;;6080   unsigned short tempUS;
;;;6081   
;;;6082   if(sh_cnt0<10)
0043b4  f8dfb40c          LDR      r11,|L1.18372|
;;;6083   	{
;;;6084   	sh_cnt0++;
;;;6085   	if(sh_cnt0>=10)
;;;6086   		{
;;;6087   		sh_cnt0=0;
0043b8  2600              MOVS     r6,#0
;;;6088   		b1Hz_sh=1;
0043ba  f04f0a01          MOV      r10,#1
0043be  f89b0021          LDRB     r0,[r11,#0x21]        ;6082  ; sh_cnt0
0043c2  280a              CMP      r0,#0xa               ;6082
0043c4  d20a              BCS      |L1.17372|
0043c6  f1000001          ADD      r0,r0,#1              ;6084
0043ca  b2c0              UXTB     r0,r0                 ;6084
0043cc  f88b0021          STRB     r0,[r11,#0x21]        ;6084
0043d0  280a              CMP      r0,#0xa               ;6085
0043d2  d303              BCC      |L1.17372|
0043d4  f88b6021          STRB     r6,[r11,#0x21]        ;6087
0043d8  f88ba022          STRB     r10,[r11,#0x22]
                  |L1.17372|
;;;6089   		}
;;;6090   	}
;;;6091   
;;;6092   /*if(sh_cnt1<5)
;;;6093   	{
;;;6094   	sh_cnt1++;
;;;6095   	if(sh_cnt1==5)
;;;6096   		{
;;;6097   		sh_cnt1=0;
;;;6098   		b2Hz_sh=1;
;;;6099   		}
;;;6100   	} */
;;;6101   
;;;6102   
;;;6103   /*
;;;6104   if(mess_find(MESS_SRC_ON_OFF))
;;;6105   	{
;;;6106   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6107   		{
;;;6108   		char i;
;;;6109   		for(i=0;i<NUMIST;i++)
;;;6110   			{
;;;6111   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6112   			}
;;;6113   		
;;;6114   		}
;;;6115   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6116   		{
;;;6117   		char i;
;;;6118   		for(i=0;i<NUMIST;i++)
;;;6119   			{
;;;6120   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6121   			}
;;;6122   		
;;;6123   		}
;;;6124   	}
;;;6125   	
;;;6126   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6127   	{				
;;;6128   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6129   		{
;;;6130   		char i;
;;;6131   		for(i=0;i<NUMIST;i++)
;;;6132   			{
;;;6133   			if(mess_data[1]&(1<<i))
;;;6134   				{
;;;6135   				src[i]._ist_blok_cnt=0;
;;;6136   				src[i]._flags_tu=2;
;;;6137   				}
;;;6138   			}
;;;6139   		
;;;6140   		}				
;;;6141   	}*/
;;;6142   
;;;6143   
;;;6144   
;;;6145   /*else*/ 
;;;6146   bps_on_mask=0;
0043dc  4ff9              LDR      r7,|L1.18372|
0043de  3780              ADDS     r7,r7,#0x80
0043e0  62fe              STR      r6,[r7,#0x2c]  ; bps_on_mask
;;;6147   bps_off_mask=0;
0043e2  633e              STR      r6,[r7,#0x30]  ; bps_off_mask
;;;6148   
;;;6149   if(mess_find_unvol(MESS2BPS_HNDL))
0043e4  20cd              MOVS     r0,#0xcd
0043e6  f7fffffe          BL       mess_find_unvol
;;;6150   	{
;;;6151   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6152   		{
;;;6153   		bps_off_mask=0xffff;
;;;6154   		}
;;;6155   
;;;6156   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6157   		{
;;;6158   		bps_off_mask=mess_data[1];
;;;6159   		}
;;;6160   
;;;6161   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6162   		{
;;;6163   		bps_on_mask=mess_data[1];
;;;6164   		}
;;;6165   
;;;6166   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6167   		{
;;;6168   		bps_on_mask=0xffff;
;;;6169   		}
;;;6170   
;;;6171   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6172   		{
;;;6173   		bps_on_mask=(unsigned)mess_data[1];
;;;6174   		bps_off_mask=~((unsigned)mess_data[1]);
;;;6175   		}
;;;6176   
;;;6177    	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC_FOR_NUMBER)
;;;6178   		{
;;;6179   		bps_on_mask=(unsigned)(1<<mess_data[1]);
;;;6180   		bps_off_mask=~((unsigned)(1<<mess_data[1]));
;;;6181   		}
;;;6182   
;;;6183   	for(i=0;i<=NUMIST;i++)
;;;6184   		{
;;;6185   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
0043ea  f8df83dc          LDR      r8,|L1.18376|
0043ee  b3b8              CBZ      r0,|L1.17504|
0043f0  4af6              LDR      r2,|L1.18380|
0043f2  f64f71ff          MOV      r1,#0xffff            ;6153
0043f6  6810              LDR      r0,[r2,#0]            ;6151  ; mess_data
0043f8  28ce              CMP      r0,#0xce              ;6151
0043fa  d100              BNE      |L1.17406|
0043fc  6339              STR      r1,[r7,#0x30]         ;6153  ; bps_off_mask
                  |L1.17406|
0043fe  28cf              CMP      r0,#0xcf              ;6156
004400  d101              BNE      |L1.17414|
004402  6853              LDR      r3,[r2,#4]            ;6158  ; mess_data
004404  633b              STR      r3,[r7,#0x30]         ;6158  ; bps_off_mask
                  |L1.17414|
004406  28d1              CMP      r0,#0xd1              ;6161
004408  d101              BNE      |L1.17422|
00440a  6853              LDR      r3,[r2,#4]            ;6163  ; mess_data
00440c  62fb              STR      r3,[r7,#0x2c]         ;6163  ; bps_on_mask
                  |L1.17422|
00440e  28d2              CMP      r0,#0xd2              ;6166
004410  d100              BNE      |L1.17428|
004412  62f9              STR      r1,[r7,#0x2c]         ;6168  ; bps_on_mask
                  |L1.17428|
004414  28d0              CMP      r0,#0xd0              ;6171
004416  d104              BNE      |L1.17442|
004418  6851              LDR      r1,[r2,#4]            ;6173  ; mess_data
00441a  62f9              STR      r1,[r7,#0x2c]         ;6173  ; bps_on_mask
00441c  ea6f0101          MVN      r1,r1                 ;6174
004420  6339              STR      r1,[r7,#0x30]         ;6174  ; bps_off_mask
                  |L1.17442|
004422  f5b07f9a          CMP      r0,#0x134             ;6177
004426  d106              BNE      |L1.17462|
004428  6851              LDR      r1,[r2,#4]            ;6179  ; mess_data
00442a  fa0af001          LSL      r0,r10,r1             ;6179
00442e  62f8              STR      r0,[r7,#0x2c]         ;6179  ; bps_on_mask
004430  ea6f0000          MVN      r0,r0                 ;6180
004434  6338              STR      r0,[r7,#0x30]         ;6180  ; bps_off_mask
                  |L1.17462|
004436  f04f0400          MOV      r4,#0                 ;6183
00443a  e035              B        |L1.17576|
                  |L1.17468|
00443c  6b38              LDR      r0,[r7,#0x30]  ; bps_off_mask
00443e  fa0af904          LSL      r9,r10,r4
004442  ea190f00          TST      r9,r0
004446  d00c              BEQ      |L1.17506|
004448  eb0400c4          ADD      r0,r4,r4,LSL #3
00444c  eb001004          ADD      r0,r0,r4,LSL #4
004450  eb080080          ADD      r0,r8,r0,LSL #2
004454  f8301f40          LDRH     r1,[r0,#0x40]!
004458  f1010101          ADD      r1,r1,#1
00445c  8001              STRH     r1,[r0,#0]
00445e  e008              B        |L1.17522|
                  |L1.17504|
004460  e028              B        |L1.17588|
                  |L1.17506|
;;;6186   		else bps[i]._blok_cnt=0;
004462  eb0400c4          ADD      r0,r4,r4,LSL #3
004466  eb001004          ADD      r0,r0,r4,LSL #4
00446a  eb080080          ADD      r0,r8,r0,LSL #2
00446e  f8a06040          STRH     r6,[r0,#0x40]
                  |L1.17522|
;;;6187   		gran(&bps[i]._blok_cnt,0,50);
004472  eb0400c4          ADD      r0,r4,r4,LSL #3
004476  eb001004          ADD      r0,r0,r4,LSL #4
00447a  eb080580          ADD      r5,r8,r0,LSL #2
00447e  f1050040          ADD      r0,r5,#0x40
004482  2232              MOVS     r2,#0x32
004484  2100              MOVS     r1,#0
004486  f7fffffe          BL       gran
;;;6188   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
00448a  f9b50040          LDRSH    r0,[r5,#0x40]
00448e  2814              CMP      r0,#0x14
004490  dd01              BLE      |L1.17558|
004492  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17558|
;;;6189   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
004496  6af8              LDR      r0,[r7,#0x2c]  ; bps_on_mask
004498  ea190f00          TST      r9,r0
00449c  d001              BEQ      |L1.17570|
00449e  f885602c          STRB     r6,[r5,#0x2c]
                  |L1.17570|
0044a2  f1040401          ADD      r4,r4,#1              ;6183
0044a6  b2e4              UXTB     r4,r4                 ;6183
                  |L1.17576|
0044a8  48c9              LDR      r0,|L1.18384|
0044aa  f9b00000          LDRSH    r0,[r0,#0]            ;6183  ; NUMIST
0044ae  4284              CMP      r4,r0                 ;6183
0044b0  ddc4              BLE      |L1.17468|
0044b2  e08e              B        |L1.17874|
                  |L1.17588|
;;;6190   	     }
;;;6191   
;;;6192   	
;;;6193   /*
;;;6194   
;;;6195   	if(bps_all_off_cnt>20)
;;;6196   		{
;;;6197   		for(i=0;i<=NUMIST;i++)
;;;6198   			{
;;;6199   	     	bps[i]._flags_tu=1;
;;;6200   	     	}
;;;6201   		}
;;;6202   	else if(bps_mask_off_cnt>20)
;;;6203   		{
;;;6204   		for(i=0;i<=NUMIST;i++)
;;;6205   			{
;;;6206   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6207   	     	}
;;;6208   		}	
;;;6209   		
;;;6210   	else if(bps_mask_on_off_cnt>20)
;;;6211   		{
;;;6212   		for(i=0;i<=NUMIST;i++)
;;;6213   			{
;;;6214   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6215   			else bps[i]._flags_tu=0;
;;;6216   	     	}
;;;6217   		}
;;;6218   		
;;;6219   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6220   		{
;;;6221   		for(i=0;i<=NUMIST;i++)
;;;6222   			{
;;;6223   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6224   	     	}
;;;6225   		}
;;;6226   */										
;;;6227   	}
;;;6228   
;;;6229   
;;;6230   else if(b1Hz_sh)
0044b4  f89b0022          LDRB     r0,[r11,#0x22]  ; b1Hz_sh
0044b8  b3f0              CBZ      r0,|L1.17720|
;;;6231   	{
;;;6232   	ptr__=0;
0044ba  f04f0400          MOV      r4,#0
;;;6233        for(i=0;i<=NUMIST;i++)
0044be  4621              MOV      r1,r4
0044c0  48c3              LDR      r0,|L1.18384|
0044c2  f9b00000          LDRSH    r0,[r0,#0]            ;6183
0044c6  e00a              B        |L1.17630|
                  |L1.17608|
;;;6234   		{
;;;6235   	     bps[i]._flags_tu=1;
0044c8  eb0102c1          ADD      r2,r1,r1,LSL #3
0044cc  eb021201          ADD      r2,r2,r1,LSL #4
0044d0  eb080282          ADD      r2,r8,r2,LSL #2
0044d4  f882a02c          STRB     r10,[r2,#0x2c]
0044d8  f1010101          ADD      r1,r1,#1              ;6233
0044dc  b2c9              UXTB     r1,r1                 ;6233
                  |L1.17630|
0044de  4281              CMP      r1,r0                 ;6233
0044e0  ddf2              BLE      |L1.17608|
;;;6236   	     }	
;;;6237     	     
;;;6238     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
0044e2  f04f0100          MOV      r1,#0
0044e6  e023              B        |L1.17712|
                  |L1.17640|
;;;6239     		{
;;;6240   		char ii,iii;
;;;6241   
;;;6242   		ii=(char)NUMIST;
0044e8  b2c2              UXTB     r2,r0
;;;6243   		//if(ii<0)ii=0;
;;;6244   		if(ii>32)ii=32;
0044ea  2a20              CMP      r2,#0x20
0044ec  d901              BLS      |L1.17650|
0044ee  f04f0220          MOV      r2,#0x20
                  |L1.17650|
;;;6245   		iii=numOfForvardBps;
0044f2  f89b3028          LDRB     r3,[r11,#0x28]  ; numOfForvardBps
;;;6246   		//if(iii<0)iii=0;
;;;6247   		if(iii>=NUMIST)iii=0;
0044f6  4283              CMP      r3,r0
0044f8  db01              BLT      |L1.17662|
0044fa  f04f0300          MOV      r3,#0
                  |L1.17662|
;;;6248   		iii+=i;
0044fe  440b              ADD      r3,r3,r1
004500  b2db              UXTB     r3,r3
;;;6249   		iii=iii%ii;
004502  fbb3f5f2          UDIV     r5,r3,r2
004506  fb023215          MLS      r2,r2,r5,r3
;;;6250   		
;;;6251     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
00450a  eb0203c2          ADD      r3,r2,r2,LSL #3
00450e  eb031202          ADD      r2,r3,r2,LSL #4
004512  eb080282          ADD      r2,r8,r2,LSL #2
004516  7893              LDRB     r3,[r2,#2]
004518  2b02              CMP      r3,#2
00451a  d001              BEQ      |L1.17696|
00451c  2b01              CMP      r3,#1
00451e  d104              BNE      |L1.17706|
                  |L1.17696|
;;;6252     	         	{
;;;6253     	         	bps[iii]._flags_tu=0;
004520  f882602c          STRB     r6,[r2,#0x2c]
;;;6254     	         	ptr__++;
004524  f1040401          ADD      r4,r4,#1
004528  b2e4              UXTB     r4,r4
                  |L1.17706|
00452a  f1010101          ADD      r1,r1,#1              ;6238
00452e  b2c9              UXTB     r1,r1                 ;6238
                  |L1.17712|
004530  4281              CMP      r1,r0                 ;6238
004532  da06              BGE      |L1.17730|
004534  4aa7              LDR      r2,|L1.18388|
004536  e000              B        |L1.17722|
                  |L1.17720|
004538  e04b              B        |L1.17874|
                  |L1.17722|
00453a  f9b22000          LDRSH    r2,[r2,#0]            ;6238  ; num_necc
00453e  4294              CMP      r4,r2                 ;6238
004540  dbd2              BLT      |L1.17640|
                  |L1.17730|
;;;6255     	         	}
;;;6256   			
;;;6257     	     }
;;;6258   	bps[numOfForvardBps_old]._flags_tu=0;
004542  f89b1029          LDRB     r1,[r11,#0x29]  ; numOfForvardBps_old
004546  eb0102c1          ADD      r2,r1,r1,LSL #3
00454a  eb021101          ADD      r1,r2,r1,LSL #4
00454e  eb080181          ADD      r1,r8,r1,LSL #2
004552  f881602c          STRB     r6,[r1,#0x2c]
;;;6259   
;;;6260   	if(main_1Hz_cnt<60)
004556  49a0              LDR      r1,|L1.18392|
004558  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
00455c  293c              CMP      r1,#0x3c
00455e  da0f              BGE      |L1.17792|
;;;6261   		{
;;;6262        	for(i=0;i<=NUMIST;i++)
004560  f04f0100          MOV      r1,#0
004564  e00a              B        |L1.17788|
                  |L1.17766|
;;;6263   			{
;;;6264   	     	bps[i]._flags_tu=0;
004566  eb0102c1          ADD      r2,r1,r1,LSL #3
00456a  eb021201          ADD      r2,r2,r1,LSL #4
00456e  eb080282          ADD      r2,r8,r2,LSL #2
004572  f882602c          STRB     r6,[r2,#0x2c]
004576  f1010101          ADD      r1,r1,#1              ;6262
00457a  b2c9              UXTB     r1,r1                 ;6262
                  |L1.17788|
00457c  4281              CMP      r1,r0                 ;6262
00457e  ddf2              BLE      |L1.17766|
                  |L1.17792|
;;;6265   	     	}	
;;;6266   		}
;;;6267   	if(ipsBlckStat)
004580  4996              LDR      r1,|L1.18396|
004582  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
004584  b179              CBZ      r1,|L1.17830|
;;;6268   		{
;;;6269        	for(i=0;i<=NUMIST;i++)
004586  f04f0100          MOV      r1,#0
00458a  e00a              B        |L1.17826|
                  |L1.17804|
;;;6270   			{
;;;6271   	     	bps[i]._flags_tu=1;
00458c  eb0102c1          ADD      r2,r1,r1,LSL #3
004590  eb021201          ADD      r2,r2,r1,LSL #4
004594  eb080282          ADD      r2,r8,r2,LSL #2
004598  f882a02c          STRB     r10,[r2,#0x2c]
00459c  f1010101          ADD      r1,r1,#1              ;6269
0045a0  b2c9              UXTB     r1,r1                 ;6269
                  |L1.17826|
0045a2  4281              CMP      r1,r0                 ;6269
0045a4  ddf2              BLE      |L1.17804|
                  |L1.17830|
;;;6272   	     	}
;;;6273   		}
;;;6274   
;;;6275        for(i=0;i<=NUMIST;i++)
0045a6  f04f0100          MOV      r1,#0
;;;6276   		{
;;;6277   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0045aa  f06f0331          MVN      r3,#0x31
0045ae  e00e              B        |L1.17870|
                  |L1.17840|
0045b0  eb0102c1          ADD      r2,r1,r1,LSL #3
0045b4  eb021201          ADD      r2,r2,r1,LSL #4
0045b8  eb080282          ADD      r2,r8,r2,LSL #2
0045bc  f892402c          LDRB     r4,[r2,#0x2c]
0045c0  2c01              CMP      r4,#1
0045c2  d101              BNE      |L1.17864|
0045c4  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.17864|
0045c8  f1010101          ADD      r1,r1,#1              ;6275
0045cc  b2c9              UXTB     r1,r1                 ;6275
                  |L1.17870|
0045ce  4281              CMP      r1,r0                 ;6275
0045d0  ddee              BLE      |L1.17840|
                  |L1.17874|
;;;6278   	   	}	
;;;6279   		 
;;;6280     	}
;;;6281   
;;;6282   
;;;6283   for(i=0;i<NUMIST;i++)
0045d2  f04f0000          MOV      r0,#0
0045d6  497e              LDR      r1,|L1.18384|
;;;6284        {
;;;6285        if(bps[i]._ist_blok_host_cnt!=0)
;;;6286             {
;;;6287             bps[i]._flags_tu=99;
0045d8  f04f0463          MOV      r4,#0x63
0045dc  f9b11000          LDRSH    r1,[r1,#0]            ;6183
0045e0  e00f              B        |L1.17922|
                  |L1.17890|
0045e2  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6285
0045e6  eb021200          ADD      r2,r2,r0,LSL #4       ;6285
0045ea  eb080282          ADD      r2,r8,r2,LSL #2       ;6285
0045ee  6bd3              LDR      r3,[r2,#0x3c]         ;6285
0045f0  b123              CBZ      r3,|L1.17916|
0045f2  f882402c          STRB     r4,[r2,#0x2c]
;;;6288   	     bps[i]._ist_blok_host_cnt--;
0045f6  f1a30301          SUB      r3,r3,#1
0045fa  63d3              STR      r3,[r2,#0x3c]
                  |L1.17916|
0045fc  f1000001          ADD      r0,r0,#1              ;6283
004600  b2c0              UXTB     r0,r0                 ;6283
                  |L1.17922|
004602  4288              CMP      r0,r1                 ;6283
004604  dbed              BLT      |L1.17890|
;;;6289             }
;;;6290        }
;;;6291   
;;;6292   
;;;6293   
;;;6294   
;;;6295   b1Hz_sh=0;
004606  f88b6022          STRB     r6,[r11,#0x22]
;;;6296   
;;;6297   
;;;6298   num_of_wrks_bps=0;
00460a  f88b601e          STRB     r6,[r11,#0x1e]
;;;6299   tempUS=0;
00460e  f04f0200          MOV      r2,#0
;;;6300   for(i=0;i<NUMIST;i++)
004612  4610              MOV      r0,r2
004614  e015              B        |L1.17986|
                  |L1.17942|
;;;6301   	{
;;;6302   	if(bps[i]._state==bsWRK)
004616  eb0003c0          ADD      r3,r0,r0,LSL #3
00461a  eb031300          ADD      r3,r3,r0,LSL #4
00461e  eb080383          ADD      r3,r8,r3,LSL #2
004622  789c              LDRB     r4,[r3,#2]
004624  2c01              CMP      r4,#1
004626  d109              BNE      |L1.17980|
;;;6303   		{
;;;6304   		num_of_wrks_bps++;
004628  f89b401e          LDRB     r4,[r11,#0x1e]  ; num_of_wrks_bps
00462c  f1040401          ADD      r4,r4,#1
004630  f88b401e          STRB     r4,[r11,#0x1e]
;;;6305   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
004634  69db              LDR      r3,[r3,#0x1c]
004636  4293              CMP      r3,r2
004638  dd00              BLE      |L1.17980|
00463a  b29a              UXTH     r2,r3
                  |L1.17980|
00463c  f1000001          ADD      r0,r0,#1              ;6300
004640  b2c0              UXTB     r0,r0                 ;6300
                  |L1.17986|
004642  4288              CMP      r0,r1                 ;6300
004644  dbe7              BLT      |L1.17942|
;;;6306   		}
;;;6307   	}
;;;6308   Ubpsmax=tempUS;
004646  f8ab204e          STRH     r2,[r11,#0x4e]
;;;6309   
;;;6310   bPARALLEL_ENOUG=0;
00464a  f88b602c          STRB     r6,[r11,#0x2c]
;;;6311   bPARALLEL_NOT_ENOUG=1;
00464e  f88ba02b          STRB     r10,[r11,#0x2b]
;;;6312   
;;;6313   for(i=0;i<NUMIST;i++)
004652  f04f0000          MOV      r0,#0
;;;6314   	{
;;;6315   	if(bps[i]._Ti>=TSIGN)
004656  4a62              LDR      r2,|L1.18400|
004658  f9b23000          LDRSH    r3,[r2,#0]
;;;6316   		{
;;;6317   		bPARALLEL_ENOUG=1;
;;;6318   		}
;;;6319   	if(bps[i]._Ti>=(TSIGN-5))
00465c  f1a30405          SUB      r4,r3,#5
004660  e011              B        |L1.18054|
                  |L1.18018|
004662  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6315
004666  eb021200          ADD      r2,r2,r0,LSL #4       ;6315
00466a  eb080282          ADD      r2,r8,r2,LSL #2       ;6315
00466e  6a92              LDR      r2,[r2,#0x28]         ;6315
004670  429a              CMP      r2,r3                 ;6315
004672  db01              BLT      |L1.18040|
004674  f88ba02c          STRB     r10,[r11,#0x2c]       ;6317
                  |L1.18040|
004678  42a2              CMP      r2,r4
00467a  db01              BLT      |L1.18048|
;;;6320   		{
;;;6321   		bPARALLEL_NOT_ENOUG=0;
00467c  f88b602b          STRB     r6,[r11,#0x2b]
                  |L1.18048|
004680  f1000001          ADD      r0,r0,#1              ;6313
004684  b2c0              UXTB     r0,r0                 ;6313
                  |L1.18054|
004686  4288              CMP      r0,r1                 ;6313
004688  dbeb              BLT      |L1.18018|
;;;6322   		}
;;;6323   	}
;;;6324   
;;;6325   if(bPARALLEL_ENOUG==1)
00468a  f89b002c          LDRB     r0,[r11,#0x2c]  ; bPARALLEL_ENOUG
00468e  2801              CMP      r0,#1
004690  d00a              BEQ      |L1.18088|
;;;6326   	{
;;;6327   	bPARALLEL=1;
;;;6328   	}
;;;6329   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
004692  f89b002d          LDRB     r0,[r11,#0x2d]  ; bPARALLEL
004696  2800              CMP      r0,#0
004698  d005              BEQ      |L1.18086|
00469a  f89b002b          LDRB     r0,[r11,#0x2b]  ; bPARALLEL_NOT_ENOUG
00469e  2800              CMP      r0,#0
0046a0  d001              BEQ      |L1.18086|
;;;6330   	{
;;;6331   	bPARALLEL=0;
0046a2  f88b602d          STRB     r6,[r11,#0x2d]
                  |L1.18086|
;;;6332   	}
;;;6333   }
0046a6  e661              B        |L1.17260|
                  |L1.18088|
0046a8  f88ba02d          STRB     r10,[r11,#0x2d]       ;6327
0046ac  e65e              B        |L1.17260|
;;;6334   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6341   //-----------------------------------------------
;;;6342   void powerAntiAliasingHndl(void)
0046ae  b570              PUSH     {r4-r6,lr}
;;;6343   {
;;;6344   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0046b0  230a              MOVS     r3,#0xa
0046b2  4c4d              LDR      r4,|L1.18408|
0046b4  484b              LDR      r0,|L1.18404|
;;;6345   	{
;;;6346   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6347   	if(powerSummaryCnt>=10)
;;;6348   		{
;;;6349   		power_summary=power_summary_tempo;
;;;6350   		}
;;;6351   	}
;;;6352   else powerSummaryCnt=0;
0046b6  2500              MOVS     r5,#0
0046b8  6822              LDR      r2,[r4,#0]            ;6344  ; power_summary_tempo_old
0046ba  6800              LDR      r0,[r0,#0]            ;6344  ; power_summary_tempo
0046bc  fbb2f6f3          UDIV     r6,r2,r3              ;6344
0046c0  fbb0f1f3          UDIV     r1,r0,r3              ;6344
0046c4  4a49              LDR      r2,|L1.18412|
0046c6  42b1              CMP      r1,r6                 ;6344
0046c8  d10b              BNE      |L1.18146|
0046ca  7811              LDRB     r1,[r2,#0]            ;6346  ; powerSummaryCnt
0046cc  290f              CMP      r1,#0xf               ;6346
0046ce  d202              BCS      |L1.18134|
0046d0  f1010101          ADD      r1,r1,#1              ;6346
0046d4  7011              STRB     r1,[r2,#0]            ;6346
                  |L1.18134|
0046d6  7811              LDRB     r1,[r2,#0]            ;6347  ; powerSummaryCnt
0046d8  290a              CMP      r1,#0xa               ;6347
0046da  d303              BCC      |L1.18148|
0046dc  4944              LDR      r1,|L1.18416|
0046de  6008              STR      r0,[r1,#0]            ;6349  ; power_summary
0046e0  e000              B        |L1.18148|
                  |L1.18146|
0046e2  7015              STRB     r5,[r2,#0]
                  |L1.18148|
;;;6353   power_summary_tempo_old=power_summary_tempo;
0046e4  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6354   
;;;6355   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0046e6  4843              LDR      r0,|L1.18420|
0046e8  4c43              LDR      r4,|L1.18424|
0046ea  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
0046ee  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
0046f2  fbb0f1f3          UDIV     r1,r0,r3
0046f6  fbb2f3f3          UDIV     r3,r2,r3
;;;6356   	{
;;;6357   	if(powerCurrentCnt<15)powerCurrentCnt++;
0046fa  4a40              LDR      r2,|L1.18428|
0046fc  4299              CMP      r1,r3                 ;6355
0046fe  d10b              BNE      |L1.18200|
004700  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004702  290f              CMP      r1,#0xf
004704  d202              BCS      |L1.18188|
004706  f1010101          ADD      r1,r1,#1
00470a  7011              STRB     r1,[r2,#0]
                  |L1.18188|
;;;6358   	if(powerCurrentCnt>=10)
00470c  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00470e  290a              CMP      r1,#0xa
004710  d303              BCC      |L1.18202|
;;;6359   		{
;;;6360   		power_current=power_current_tempo;
004712  493b              LDR      r1,|L1.18432|
004714  8008              STRH     r0,[r1,#0]
004716  e000              B        |L1.18202|
                  |L1.18200|
;;;6361   		}
;;;6362   	}
;;;6363   else powerCurrentCnt=0;
004718  7015              STRB     r5,[r2,#0]
                  |L1.18202|
;;;6364   power_current_tempo_old=power_current_tempo;
00471a  8020              STRH     r0,[r4,#0]
;;;6365   }
00471c  bd70              POP      {r4-r6,pc}
;;;6366   
                          ENDP

                  energometr_hndl PROC
;;;6476   //-----------------------------------------------
;;;6477   void energometr_hndl(void)
00471e  4770              BX       lr
;;;6478   {
;;;6479   //2F 3F 21 0D 0A 
;;;6480   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6481   //2F 3F 21 0D 0A 
;;;6482   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6483   //06 30 35 31 0D 0A 
;;;6484   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6485   
;;;6486   #ifdef CE102M_ENABLED
;;;6487   /*if
;;;6488   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6489   
;;;6490   if(read_power_cnt_main_cnt)
;;;6491   	{
;;;6492   	read_power_cnt_main_cnt--;
;;;6493   	if(read_power_cnt_main_cnt==0)
;;;6494   		{
;;;6495   		rx_read_power_cnt_phase=0;
;;;6496   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6497   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6498   		else bENERGOMETR_UIP=0;
;;;6499   		//bENERGOMETR_UIP=2;
;;;6500   		}
;;;6501   	}
;;;6502   
;;;6503   if (rx_read_power_cnt_phase==0)
;;;6504   	{
;;;6505   	char command_with_crc[20];
;;;6506   	
;;;6507      	command_with_crc[0]=0xaf;  // /
;;;6508   	command_with_crc[1]=0x3f;  // ?
;;;6509   	command_with_crc[2]=0x21;  // !
;;;6510   	command_with_crc[3]=0x8d;  // CR
;;;6511   	command_with_crc[4]=0x0a;  // LF
;;;6512   
;;;6513   	uart_out__adr1(command_with_crc,5);
;;;6514   
;;;6515   	rx_wr_index1=0;
;;;6516   	rx_read_power_cnt_phase=1;
;;;6517   
;;;6518   	read_power_cnt_main_cnt=50;
;;;6519   	}
;;;6520   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6521   	{
;;;6522   	char command_with_crc[20];
;;;6523   	
;;;6524   	command_with_crc[0]=0x06;  //  
;;;6525   	command_with_crc[1]=0x30;  // 0
;;;6526   	command_with_crc[2]=0x35;  // 5
;;;6527   	command_with_crc[3]=0xb1;  // 1
;;;6528   	command_with_crc[4]=0x8d;  // CR
;;;6529   	command_with_crc[5]=0x0a;  // LF
;;;6530   	
;;;6531   	uart_out__adr1(command_with_crc,6);
;;;6532   	
;;;6533   	rx_wr_index1=0;
;;;6534   	rx_read_power_cnt_phase=3;
;;;6535   
;;;6536   	read_power_cnt_main_cnt=50;
;;;6537   	}  
;;;6538   
;;;6539   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6540   	{
;;;6541   	char command_with_crc[20];
;;;6542   	
;;;6543   	command_with_crc[0]=0x81;  //  
;;;6544   	command_with_crc[1]=0xd2;  // 0
;;;6545   	command_with_crc[2]=0xb1;  // 5
;;;6546   	command_with_crc[3]=0x82;  // 1
;;;6547   	command_with_crc[4]=0x56;  // CR
;;;6548   	command_with_crc[5]=0xcf;  // LF
;;;6549   	command_with_crc[6]=0xcc;  // 1
;;;6550   	command_with_crc[7]=0xd4;  // CR
;;;6551   	command_with_crc[8]=0x41;  // LF
;;;6552   	command_with_crc[9]=0x28;  // 1
;;;6553   	command_with_crc[10]=0xa9;  // CR
;;;6554   	command_with_crc[11]=0x03;  // LF
;;;6555   	command_with_crc[12]=0x5f;  // LF
;;;6556   		
;;;6557   	uart_out__adr1(command_with_crc,13);
;;;6558   	
;;;6559   	rx_wr_index1=0;
;;;6560   	rx_read_power_cnt_phase=5;
;;;6561   
;;;6562   	read_power_cnt_main_cnt=50;
;;;6563   	}  
;;;6564   
;;;6565   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6566   	{
;;;6567   	char command_with_crc[20];
;;;6568   	
;;;6569   	command_with_crc[0]=0x81;  //  
;;;6570   	command_with_crc[1]=0xd2;  // 0
;;;6571   	command_with_crc[2]=0xb1;  // 5
;;;6572   	command_with_crc[3]=0x82;  // 1
;;;6573   	command_with_crc[4]=0xc3;  // CR
;;;6574   	command_with_crc[5]=0x55;  // LF
;;;6575   	command_with_crc[6]=0xd2;  // 1
;;;6576   	command_with_crc[7]=0xd2;  // CR
;;;6577   	command_with_crc[8]=0xc5;  // LF
;;;6578   	command_with_crc[9]=0x28;  // 1
;;;6579   	command_with_crc[10]=0xa9;  // CR
;;;6580   	command_with_crc[11]=0x03;  // LF
;;;6581   	command_with_crc[12]=0x5a;  // LF
;;;6582   		
;;;6583   	uart_out__adr1(command_with_crc,13);
;;;6584   	
;;;6585   	rx_wr_index1=0;
;;;6586   	rx_read_power_cnt_phase=9;
;;;6587   
;;;6588   	read_power_cnt_main_cnt=50;
;;;6589   	}  
;;;6590   
;;;6591   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6592   	{
;;;6593   	char command_with_crc[20];
;;;6594   	
;;;6595   	command_with_crc[0]=0x81;  //  		01
;;;6596   	command_with_crc[1]=0xd2;  // R		52
;;;6597   	command_with_crc[2]=0xb1;  // 1		31
;;;6598   	command_with_crc[3]=0x82;  // 		02
;;;6599   	command_with_crc[4]=0x50;  // P		50
;;;6600   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6601   	command_with_crc[6]=0xd7;  // W		57
;;;6602   	command_with_crc[7]=0xc5;  // E		45
;;;6603   	command_with_crc[8]=0x50;  // P		50
;;;6604   	command_with_crc[9]=0x28;  // (		28
;;;6605   	command_with_crc[10]=0xa9;  // )	29
;;;6606   	command_with_crc[11]=0x03;  // 		03
;;;6607   	command_with_crc[12]=0xe4;  // d	64
;;;6608   		
;;;6609   	uart_out__adr1(command_with_crc,13);
;;;6610   	
;;;6611   	rx_wr_index1=0;
;;;6612   	rx_read_power_cnt_phase=21;
;;;6613   
;;;6614   	read_power_cnt_main_cnt=50;
;;;6615   	}  
;;;6616   
;;;6617   
;;;6618   #endif
;;;6619   }
;;;6620   
                          ENDP

                  ips_current_average_hndl PROC
;;;6621   //-----------------------------------------------
;;;6622   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
004720  e92d4ff0          PUSH     {r4-r11,lr}
;;;6623   {
004724  b089              SUB      sp,sp,#0x24
;;;6624   
;;;6625   if(++ica_timer_cnt>=10) 
004726  4e37              LDR      r6,|L1.18436|
;;;6626   	{
;;;6627   	ica_timer_cnt=0;
004728  2400              MOVS     r4,#0
00472a  7830              LDRB     r0,[r6,#0]            ;6625  ; ica_timer_cnt
00472c  1c40              ADDS     r0,r0,#1              ;6625
00472e  b2c0              UXTB     r0,r0                 ;6625
004730  7030              STRB     r0,[r6,#0]            ;6625
004732  280a              CMP      r0,#0xa               ;6625
004734  d300              BCC      |L1.18232|
004736  7034              STRB     r4,[r6,#0]
                  |L1.18232|
;;;6628   	}
;;;6629   
;;;6630   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004738  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
00473a  4f33              LDR      r7,|L1.18440|
;;;6631   	{
;;;6632   	
;;;6633   	ica_plazma[0]++;
;;;6634   
;;;6635   	ica_my_current=bps_I;
;;;6636   
;;;6637   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00473c  f8dfb0cc          LDR      r11,|L1.18444|
004740  4d20              LDR      r5,|L1.18372|
004742  bbe8              CBNZ     r0,|L1.18368|
004744  7fa8              LDRB     r0,[r5,#0x1e]         ;6630  ; num_of_wrks_bps
004746  b3d8              CBZ      r0,|L1.18368|
004748  f8950023          LDRB     r0,[r5,#0x23]         ;6630  ; spc_stat
00474c  7969              LDRB     r1,[r5,#5]            ;6630  ; vz1_stat
00474e  4308              ORRS     r0,r0,r1              ;6630
004750  79e9              LDRB     r1,[r5,#7]            ;6630  ; vz2_stat
004752  4308              ORRS     r0,r0,r1              ;6630
004754  7839              LDRB     r1,[r7,#0]            ;6630  ; sp_ch_stat
004756  4308              ORRS     r0,r0,r1              ;6630
004758  d17f              BNE      |L1.18522|
00475a  f8df90b4          LDR      r9,|L1.18448|
00475e  f8990000          LDRB     r0,[r9,#0]            ;6633  ; ica_plazma
004762  f1000001          ADD      r0,r0,#1              ;6633
004766  f8890000          STRB     r0,[r9,#0]            ;6633
00476a  482a              LDR      r0,|L1.18452|
00476c  f9b01000          LDRSH    r1,[r0,#0]            ;6635  ; bps_I
004770  4829              LDR      r0,|L1.18456|
004772  8001              STRH     r1,[r0,#0]            ;6635
004774  4829              LDR      r0,|L1.18460|
;;;6638   		{
;;;6639   		ica_plazma[1]++;
;;;6640   		ica_u_necc--;
004776  f8dfa0a8          LDR      r10,|L1.18464|
00477a  f9b02000          LDRSH    r2,[r0,#0]            ;6637  ; ica_your_current
00477e  4648              MOV      r0,r9                 ;6633
004780  f9bac000          LDRSH    r12,[r10,#0]
004784  7843              LDRB     r3,[r0,#1]            ;6639
004786  4827              LDR      r0,|L1.18468|
004788  4291              CMP      r1,r2                 ;6637
00478a  f9b08000          LDRSH    r8,[r0,#0]            ;6637
00478e  4658              MOV      r0,r11                ;6637
004790  f9b00000          LDRSH    r0,[r0,#0]            ;6637
004794  dd48              BLE      |L1.18472|
004796  eba10e02          SUB      lr,r1,r2              ;6637
00479a  f1be0f05          CMP      lr,#5                 ;6637
00479e  db43              BLT      |L1.18472|
0047a0  2801              CMP      r0,#1                 ;6637
0047a2  d004              BEQ      |L1.18350|
0047a4  2802              CMP      r0,#2                 ;6637
0047a6  d13f              BNE      |L1.18472|
0047a8  f1b80f05          CMP      r8,#5                 ;6637
0047ac  dd3c              BLE      |L1.18472|
                  |L1.18350|
0047ae  f1030301          ADD      r3,r3,#1              ;6639
0047b2  f8893001          STRB     r3,[r9,#1]            ;6639
0047b6  f1ac0c01          SUB      r12,r12,#1
0047ba  f8aac000          STRH     r12,[r10,#0]
0047be  e047              B        |L1.18512|
                  |L1.18368|
0047c0  e04b              B        |L1.18522|
0047c2  0000              DCW      0x0000
                  |L1.18372|
                          DCD      ||area_number.25||
                  |L1.18376|
                          DCD      bps
                  |L1.18380|
                          DCD      mess_data
                  |L1.18384|
                          DCD      NUMIST
                  |L1.18388|
                          DCD      num_necc
                  |L1.18392|
                          DCD      main_1Hz_cnt
                  |L1.18396|
                          DCD      ipsBlckStat
                  |L1.18400|
                          DCD      TSIGN
                  |L1.18404|
                          DCD      power_summary_tempo
                  |L1.18408|
                          DCD      power_summary_tempo_old
                  |L1.18412|
                          DCD      powerSummaryCnt
                  |L1.18416|
                          DCD      power_summary
                  |L1.18420|
                          DCD      power_current_tempo
                  |L1.18424|
                          DCD      power_current_tempo_old
                  |L1.18428|
                          DCD      powerCurrentCnt
                  |L1.18432|
                          DCD      power_current
                  |L1.18436|
                          DCD      ica_timer_cnt
                  |L1.18440|
                          DCD      sp_ch_stat
                  |L1.18444|
                          DCD      ICA_EN
                  |L1.18448|
                          DCD      ica_plazma
                  |L1.18452|
                          DCD      bps_I
                  |L1.18456|
                          DCD      ica_my_current
                  |L1.18460|
                          DCD      ica_your_current
                  |L1.18464|
                          DCD      ica_u_necc
                  |L1.18468|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.18472|
;;;6641   		}
;;;6642   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004828  4291              CMP      r1,r2
00482a  da11              BGE      |L1.18512|
00482c  1a51              SUBS     r1,r2,r1
00482e  2905              CMP      r1,#5
004830  db0e              BLT      |L1.18512|
004832  2801              CMP      r0,#1
004834  d004              BEQ      |L1.18496|
004836  2802              CMP      r0,#2
004838  d10a              BNE      |L1.18512|
00483a  f1b80f05          CMP      r8,#5
00483e  dd07              BLE      |L1.18512|
                  |L1.18496|
;;;6643   		{
;;;6644   		ica_plazma[1]--;
004840  f1a30301          SUB      r3,r3,#1
004844  f8893001          STRB     r3,[r9,#1]
;;;6645   		ica_u_necc++;
004848  f10c0c01          ADD      r12,r12,#1
00484c  f8aac000          STRH     r12,[r10,#0]
                  |L1.18512|
;;;6646   		}
;;;6647   	gran(&ica_u_necc,-100,100);
004850  2264              MOVS     r2,#0x64
004852  4251              RSBS     r1,r2,#0
004854  48fc              LDR      r0,|L1.19528|
004856  f7fffffe          BL       gran
                  |L1.18522|
;;;6648   	}
;;;6649   
;;;6650   
;;;6651   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
00485a  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
00485e  2801              CMP      r0,#1
004860  d169              BNE      |L1.18742|
004862  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
004866  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004868  4308              ORRS     r0,r0,r1
00486a  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
00486c  4308              ORRS     r0,r0,r1
00486e  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004870  4308              ORRS     r0,r0,r1
004872  d160              BNE      |L1.18742|
004874  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
004876  2800              CMP      r0,#0
004878  d05d              BEQ      |L1.18742|
;;;6652   	{
;;;6653   	
;;;6654   //	ica_connect_cnt++;
;;;6655   
;;;6656   	if(ica_timer_cnt==8)
00487a  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6657   		{
;;;6658   		char modbus_buff[20],i;
;;;6659   		short crc_temp;
;;;6660   	
;;;6661   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00487c  4bf3              LDR      r3,|L1.19532|
;;;6662   		modbus_buff[1] = 4;
;;;6663   		modbus_buff[2] = 0;
;;;6664   		modbus_buff[3] = 2;
;;;6665   		modbus_buff[4] = 0;	
;;;6666   		modbus_buff[5] = 1;
;;;6667   	
;;;6668   		crc_temp= CRC16_2(modbus_buff,6);
;;;6669   	
;;;6670   		modbus_buff[6]= (char)crc_temp;
;;;6671   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6672   	
;;;6673   		if(ICA_CH==0)
00487e  4ff4              LDR      r7,|L1.19536|
004880  2808              CMP      r0,#8                 ;6656
004882  d05b              BEQ      |L1.18748|
;;;6674   			{
;;;6675   			for (i=0;i<8;i++)
;;;6676   				{
;;;6677   				putchar_sc16is700(modbus_buff[i]);
;;;6678   				}
;;;6679   			}
;;;6680   		else if(ICA_CH==2)
;;;6681   			{
;;;6682   			uart_out1 (5,4,0,2,0,1,0);
;;;6683   			}
;;;6684   		}
;;;6685   	else
;;;6686   		{
;;;6687   		char modbus_buff[20],i;
;;;6688   		short crc_temp, tempSSSS;
;;;6689   
;;;6690   		tempSSSS=cntrl_stat_old;
004884  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6691   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
004888  48f2              LDR      r0,|L1.19540|
00488a  f06f0214          MVN      r2,#0x14
00488e  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
004892  ebc01100          RSB      r1,r0,r0,LSL #4
004896  eb020c81          ADD      r12,r2,r1,LSL #2
00489a  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
00489e  4594              CMP      r12,r2
0048a0  d00b              BEQ      |L1.18618|
0048a2  f06f0c13          MVN      r12,#0x13
0048a6  eb0c0c81          ADD      r12,r12,r1,LSL #2
0048aa  4594              CMP      r12,r2
0048ac  d005              BEQ      |L1.18618|
0048ae  f06f0c12          MVN      r12,#0x12
0048b2  eb0c0181          ADD      r1,r12,r1,LSL #2
0048b6  4291              CMP      r1,r2
0048b8  d101              BNE      |L1.18622|
                  |L1.18618|
0048ba  f4404680          ORR      r6,r0,#0x4000
                  |L1.18622|
;;;6692   
;;;6693   
;;;6694   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0048be  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
0048c0  f88d0010          STRB     r0,[sp,#0x10]
;;;6695   		modbus_buff[1] = 6;
0048c4  f04f0006          MOV      r0,#6
0048c8  f88d0011          STRB     r0,[sp,#0x11]
;;;6696   		modbus_buff[2] = 0;
0048cc  f88d4012          STRB     r4,[sp,#0x12]
;;;6697   		modbus_buff[3] = 100;
0048d0  f04f0064          MOV      r0,#0x64
0048d4  f88d0013          STRB     r0,[sp,#0x13]
;;;6698   		modbus_buff[4] = (char)(tempSSSS/256);	
0048d8  ea4f70e6          ASR      r0,r6,#31
0048dc  eb066010          ADD      r0,r6,r0,LSR #24
0048e0  ea4f2120          ASR      r1,r0,#8
0048e4  f88d1014          STRB     r1,[sp,#0x14]
;;;6699   		modbus_buff[5] = (char)(tempSSSS%256);
0048e8  4630              MOV      r0,r6
0048ea  f88d0015          STRB     r0,[sp,#0x15]
;;;6700   	
;;;6701   		crc_temp= CRC16_2(modbus_buff,6);
0048ee  f04f0106          MOV      r1,#6
0048f2  a804              ADD      r0,sp,#0x10
0048f4  f7fffffe          BL       CRC16_2
;;;6702   	
;;;6703   		modbus_buff[6]= (char)crc_temp;
0048f8  f88d0016          STRB     r0,[sp,#0x16]
;;;6704   		modbus_buff[7]= (char)(crc_temp>>8);
0048fc  ea4f2020          ASR      r0,r0,#8
004900  f88d0017          STRB     r0,[sp,#0x17]
;;;6705   	
;;;6706   		crc_temp= CRC16_2(modbus_buff,6);
004904  f04f0106          MOV      r1,#6
004908  a804              ADD      r0,sp,#0x10
00490a  f7fffffe          BL       CRC16_2
;;;6707   	
;;;6708   		plazma_ica1=tempSSSS;
00490e  f8a5607e          STRH     r6,[r5,#0x7e]
;;;6709   		if(ICA_CH==0)
004912  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
004916  b3f0              CBZ      r0,|L1.18838|
;;;6710   			{
;;;6711   			for (i=0;i<8;i++)
;;;6712   				{
;;;6713   				putchar_sc16is700(modbus_buff[i]);
;;;6714   				}
;;;6715   			}
;;;6716   		else if(ICA_CH==2)
004918  2802              CMP      r0,#2
00491a  d10c              BNE      |L1.18742|
;;;6717   			{
;;;6718   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
00491c  f89d0015          LDRB     r0,[sp,#0x15]
004920  f89d1014          LDRB     r1,[sp,#0x14]
004924  e9cd0401          STRD     r0,r4,[sp,#4]
004928  9100              STR      r1,[sp,#0]
00492a  2364              MOVS     r3,#0x64
00492c  2200              MOVS     r2,#0
00492e  2106              MOVS     r1,#6
004930  2005              MOVS     r0,#5
004932  f7fffffe          BL       uart_out1
                  |L1.18742|
;;;6719   			}
;;;6720   		}
;;;6721   	}
;;;6722   }
004936  b009              ADD      sp,sp,#0x24
004938  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18748|
00493c  8818              LDRH     r0,[r3,#0]            ;6661  ; ICA_MODBUS_ADDRESS
00493e  f88d0010          STRB     r0,[sp,#0x10]         ;6661
004942  f04f0004          MOV      r0,#4                 ;6662
004946  f88d0011          STRB     r0,[sp,#0x11]         ;6662
00494a  f88d4012          STRB     r4,[sp,#0x12]         ;6663
00494e  f04f0002          MOV      r0,#2                 ;6664
004952  f88d0013          STRB     r0,[sp,#0x13]         ;6664
004956  f88d4014          STRB     r4,[sp,#0x14]         ;6665
00495a  f04f0501          MOV      r5,#1                 ;6666
00495e  f88d5015          STRB     r5,[sp,#0x15]         ;6666
004962  f04f0106          MOV      r1,#6                 ;6668
004966  a804              ADD      r0,sp,#0x10           ;6668
004968  f7fffffe          BL       CRC16_2
00496c  f88d0016          STRB     r0,[sp,#0x16]         ;6670
004970  ea4f2020          ASR      r0,r0,#8              ;6671
004974  f88d0017          STRB     r0,[sp,#0x17]         ;6671
004978  f9b70000          LDRSH    r0,[r7,#0]            ;6673  ; ICA_CH
00497c  b160              CBZ      r0,|L1.18840|
00497e  2802              CMP      r0,#2                 ;6680
004980  d1d9              BNE      |L1.18742|
004982  e9cd4500          STRD     r4,r5,[sp,#0]         ;6682
004986  2302              MOVS     r3,#2                 ;6682
004988  2200              MOVS     r2,#0                 ;6682
00498a  2104              MOVS     r1,#4                 ;6682
00498c  2005              MOVS     r0,#5                 ;6682
00498e  9402              STR      r4,[sp,#8]            ;6682
004990  f7fffffe          BL       uart_out1
004994  e7cf              B        |L1.18742|
                  |L1.18838|
004996  e00b              B        |L1.18864|
                  |L1.18840|
004998  f04f0400          MOV      r4,#0                 ;6675
00499c  ad04              ADD      r5,sp,#0x10           ;6658
                  |L1.18846|
00499e  5d28              LDRB     r0,[r5,r4]            ;6677
0049a0  f7fffffe          BL       putchar_sc16is700
0049a4  f1040401          ADD      r4,r4,#1              ;6675
0049a8  b2e4              UXTB     r4,r4                 ;6675
0049aa  2c08              CMP      r4,#8                 ;6675
0049ac  d3f7              BCC      |L1.18846|
0049ae  e7c2              B        |L1.18742|
                  |L1.18864|
0049b0  f04f0400          MOV      r4,#0                 ;6711
0049b4  ad04              ADD      r5,sp,#0x10           ;6687
                  |L1.18870|
0049b6  5d28              LDRB     r0,[r5,r4]            ;6713
0049b8  f7fffffe          BL       putchar_sc16is700
0049bc  f1040401          ADD      r4,r4,#1              ;6711
0049c0  b2e4              UXTB     r4,r4                 ;6711
0049c2  2c08              CMP      r4,#8                 ;6711
0049c4  d3f7              BCC      |L1.18870|
0049c6  e7b6              B        |L1.18742|
;;;6723   
                          ENDP

                  ipsBlckHndl PROC
;;;6806   //-----------------------------------------------
;;;6807   void ipsBlckHndl(char in)
0049c8  b510              PUSH     {r4,lr}
;;;6808   {
;;;6809   
;;;6810   ipsBlckStat=0;
0049ca  4ba3              LDR      r3,|L1.19544|
0049cc  f04f0000          MOV      r0,#0
0049d0  8018              STRH     r0,[r3,#0]
;;;6811   if(ipsBlckSrc==1)
0049d2  48a2              LDR      r0,|L1.19548|
0049d4  f04f0401          MOV      r4,#1
;;;6812   	{
;;;6813   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
0049d8  f44f62fa          MOV      r2,#0x7d0
0049dc  f9b01000          LDRSH    r1,[r0,#0]            ;6811  ; ipsBlckSrc
0049e0  489f              LDR      r0,|L1.19552|
0049e2  2901              CMP      r1,#1                 ;6811
0049e4  f9b00000          LDRSH    r0,[r0,#0]
0049e8  d006              BEQ      |L1.18936|
;;;6814   	}
;;;6815   else if(ipsBlckSrc==2)
0049ea  2902              CMP      r1,#2
0049ec  d10f              BNE      |L1.18958|
0049ee  499d              LDR      r1,|L1.19556|
;;;6816   	{
;;;6817   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
0049f0  f9b1101a          LDRSH    r1,[r1,#0x1a]
0049f4  b160              CBZ      r0,|L1.18960|
0049f6  e00d              B        |L1.18964|
                  |L1.18936|
0049f8  499a              LDR      r1,|L1.19556|
0049fa  f9b11016          LDRSH    r1,[r1,#0x16]         ;6813
0049fe  b908              CBNZ     r0,|L1.18948|
004a00  4291              CMP      r1,r2                 ;6813
004a02  dc03              BGT      |L1.18956|
                  |L1.18948|
004a04  2801              CMP      r0,#1                 ;6813
004a06  d102              BNE      |L1.18958|
004a08  4291              CMP      r1,r2                 ;6813
004a0a  da00              BGE      |L1.18958|
                  |L1.18956|
004a0c  801c              STRH     r4,[r3,#0]            ;6813
                  |L1.18958|
;;;6818   	}
;;;6819   }
004a0e  bd10              POP      {r4,pc}
                  |L1.18960|
004a10  4291              CMP      r1,r2                 ;6817
004a12  dc03              BGT      |L1.18972|
                  |L1.18964|
004a14  2801              CMP      r0,#1                 ;6817
004a16  d1fa              BNE      |L1.18958|
004a18  4291              CMP      r1,r2                 ;6817
004a1a  daf8              BGE      |L1.18958|
                  |L1.18972|
004a1c  801c              STRH     r4,[r3,#0]            ;6817
004a1e  bd10              POP      {r4,pc}
;;;6820   
                          ENDP

                  bps_drv PROC
;;;6821   //-----------------------------------------------
;;;6822   void bps_drv(char in)
004a20  e92d41f0          PUSH     {r4-r8,lr}
;;;6823   {
004a24  4606              MOV      r6,r0
;;;6824   char temp;
;;;6825   
;;;6826   if (bps[in]._device!=dSRC) return;
004a26  eb0600c6          ADD      r0,r6,r6,LSL #3
004a2a  498f              LDR      r1,|L1.19560|
004a2c  eb001006          ADD      r0,r0,r6,LSL #4
004a30  f8112020          LDRB     r2,[r1,r0,LSL #2]
004a34  2a03              CMP      r2,#3
004a36  d17d              BNE      |L1.19252|
;;;6827   temp=bps[in]._flags_tm;
004a38  eb010480          ADD      r4,r1,r0,LSL #2
004a3c  f8945042          LDRB     r5,[r4,#0x42]
;;;6828   if(temp&(1<<AV_T))
004a40  07a8              LSLS     r0,r5,#30
004a42  d517              BPL      |L1.19060|
;;;6829   	{
;;;6830   	if(bps[in]._temp_av_cnt<1200) 
004a44  f9b41046          LDRSH    r1,[r4,#0x46]
004a48  f44f6296          MOV      r2,#0x4b0
004a4c  4291              CMP      r1,r2
004a4e  da22              BGE      |L1.19094|
;;;6831   		{
;;;6832   		bps[in]._temp_av_cnt++;
004a50  f1010101          ADD      r1,r1,#1
004a54  b208              SXTH     r0,r1
004a56  f8a40046          STRH     r0,[r4,#0x46]
;;;6833   		if(bps[in]._temp_av_cnt>=1200)
004a5a  4290              CMP      r0,r2
004a5c  db1b              BLT      |L1.19094|
;;;6834   			{
;;;6835   			bps[in]._temp_av_cnt=1200;
004a5e  f8a42046          STRH     r2,[r4,#0x46]
;;;6836   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
004a62  7860              LDRB     r0,[r4,#1]
004a64  07c0              LSLS     r0,r0,#31
004a66  d116              BNE      |L1.19094|
004a68  2201              MOVS     r2,#1
004a6a  2100              MOVS     r1,#0
004a6c  4630              MOV      r0,r6
004a6e  f7fffffe          BL       avar_bps_hndl
004a72  e010              B        |L1.19094|
                  |L1.19060|
;;;6837   			}
;;;6838   		}
;;;6839   	}
;;;6840   
;;;6841   else if(!(temp&(1<<AV_T)))
;;;6842   	{
;;;6843   	if(bps[in]._temp_av_cnt) 
004a74  f9b41046          LDRSH    r1,[r4,#0x46]
004a78  b169              CBZ      r1,|L1.19094|
;;;6844   		{
;;;6845   		bps[in]._temp_av_cnt--;
004a7a  f1a10101          SUB      r1,r1,#1
004a7e  b208              SXTH     r0,r1
004a80  f8a40046          STRH     r0,[r4,#0x46]
;;;6846   		if(!bps[in]._temp_av_cnt)
004a84  b938              CBNZ     r0,|L1.19094|
;;;6847   			{
;;;6848   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004a86  7860              LDRB     r0,[r4,#1]
004a88  07c0              LSLS     r0,r0,#31
004a8a  d004              BEQ      |L1.19094|
004a8c  2200              MOVS     r2,#0
004a8e  4611              MOV      r1,r2
004a90  4630              MOV      r0,r6
004a92  f7fffffe          BL       avar_bps_hndl
                  |L1.19094|
;;;6849   			}
;;;6850   		} 	
;;;6851   
;;;6852   	}
;;;6853   
;;;6854   if((temp&(1<<AVUMAX)))
004a96  0728              LSLS     r0,r5,#28
;;;6855   	{
;;;6856   	if(bps[in]._umax_av_cnt<10) 
;;;6857   		{
;;;6858   		bps[in]._umax_av_cnt++;
;;;6859   		if(bps[in]._umax_av_cnt>=10)
;;;6860   			{ 
;;;6861   			bps[in]._umax_av_cnt=10;
004a98  f04f080a          MOV      r8,#0xa
004a9c  f04f0700          MOV      r7,#0                 ;6836
004aa0  d518              BPL      |L1.19156|
004aa2  f9b41048          LDRSH    r1,[r4,#0x48]         ;6856
004aa6  290a              CMP      r1,#0xa               ;6856
004aa8  da29              BGE      |L1.19198|
004aaa  f1010101          ADD      r1,r1,#1              ;6858
004aae  b208              SXTH     r0,r1                 ;6858
004ab0  f8a40048          STRH     r0,[r4,#0x48]         ;6858
004ab4  280a              CMP      r0,#0xa               ;6859
004ab6  db22              BLT      |L1.19198|
004ab8  f8a48048          STRH     r8,[r4,#0x48]
;;;6862   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004abc  7860              LDRB     r0,[r4,#1]
004abe  0780              LSLS     r0,r0,#30
004ac0  d404              BMI      |L1.19148|
004ac2  2201              MOVS     r2,#1
004ac4  4611              MOV      r1,r2
004ac6  4630              MOV      r0,r6
004ac8  f7fffffe          BL       avar_bps_hndl
                  |L1.19148|
;;;6863   			apv_start(in);
004acc  4630              MOV      r0,r6
004ace  f7fffffe          BL       apv_start
004ad2  e014              B        |L1.19198|
                  |L1.19156|
;;;6864   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6865   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6866   				{
;;;6867   				apv_cnt[in,0]=APV_INIT;
;;;6868   				apv_cnt[in,1]=APV_INIT;
;;;6869   				apv_cnt[in,2]=APV_INIT;
;;;6870   				apv_flags[in]=afOFF;
;;;6871   				}				*/
;;;6872   						
;;;6873   			}
;;;6874   		} 
;;;6875   	}		
;;;6876   else if(!(temp&(1<<AVUMAX)))
;;;6877   	{
;;;6878   	if(bps[in]._umax_av_cnt>0) 
004ad4  f9b41048          LDRSH    r1,[r4,#0x48]
004ad8  2900              CMP      r1,#0
004ada  dd0d              BLE      |L1.19192|
;;;6879   		{
;;;6880   		bps[in]._umax_av_cnt--;
004adc  f1a10101          SUB      r1,r1,#1
004ae0  b208              SXTH     r0,r1
004ae2  f8a40048          STRH     r0,[r4,#0x48]
;;;6881   		if(bps[in]._umax_av_cnt==0)
004ae6  b950              CBNZ     r0,|L1.19198|
;;;6882   			{
;;;6883   			bps[in]._umax_av_cnt=0;
;;;6884   			avar_bps_hndl(in,1,0);
004ae8  f04f0200          MOV      r2,#0
004aec  f04f0101          MOV      r1,#1
004af0  4630              MOV      r0,r6
004af2  f7fffffe          BL       avar_bps_hndl
004af6  e002              B        |L1.19198|
                  |L1.19192|
;;;6885   			//apv_stop(in);
;;;6886   	 //		apv_cnt[in,0]=0;
;;;6887   	//		apv_cnt[in,1]=0;
;;;6888   	 //		apv_cnt[in,2]=0;			
;;;6889   			}
;;;6890   		}
;;;6891   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004af8  da01              BGE      |L1.19198|
004afa  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.19198|
;;;6892   	}
;;;6893   
;;;6894   if(temp&(1<<AVUMIN))
004afe  06e8              LSLS     r0,r5,#27
004b00  d519              BPL      |L1.19254|
;;;6895   	{
;;;6896   	if(bps[in]._umin_av_cnt<10) 
004b02  f9b4104a          LDRSH    r1,[r4,#0x4a]
004b06  290a              CMP      r1,#0xa
004b08  da23              BGE      |L1.19282|
;;;6897   		{
;;;6898   		bps[in]._umin_av_cnt++;
004b0a  f1010101          ADD      r1,r1,#1
004b0e  b208              SXTH     r0,r1
004b10  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6899   		if(bps[in]._umin_av_cnt>=10)
004b14  280a              CMP      r0,#0xa
004b16  db1c              BLT      |L1.19282|
;;;6900   			{ 
;;;6901   			bps[in]._umin_av_cnt=10;
004b18  f8a4804a          STRH     r8,[r4,#0x4a]
;;;6902   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004b1c  7860              LDRB     r0,[r4,#1]
004b1e  0740              LSLS     r0,r0,#29
004b20  d404              BMI      |L1.19244|
004b22  2201              MOVS     r2,#1
004b24  2102              MOVS     r1,#2
004b26  4630              MOV      r0,r6
004b28  f7fffffe          BL       avar_bps_hndl
                  |L1.19244|
;;;6903   			apv_start(in);
004b2c  4630              MOV      r0,r6
004b2e  f7fffffe          BL       apv_start
004b32  e00e              B        |L1.19282|
                  |L1.19252|
004b34  e0b1              B        |L1.19610|
                  |L1.19254|
;;;6904   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6905   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6906   				{
;;;6907   				apv_cnt[in,0]=APV_INIT;
;;;6908   				apv_cnt[in,1]=APV_INIT;
;;;6909   				apv_cnt[in,2]=APV_INIT;
;;;6910   				apv_flags[in]=afOFF;
;;;6911   				}*/				
;;;6912   			}
;;;6913   		} 
;;;6914   	}	
;;;6915   	
;;;6916   else if(!(temp&(1<<AVUMIN)))
;;;6917   	{
;;;6918   	if(bps[in]._umin_av_cnt) 
004b36  f9b4004a          LDRSH    r0,[r4,#0x4a]
004b3a  b150              CBZ      r0,|L1.19282|
;;;6919   		{
;;;6920   		bps[in]._umin_av_cnt--;
004b3c  f1a00001          SUB      r0,r0,#1
004b40  b200              SXTH     r0,r0
004b42  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6921   		if(bps[in]._umin_av_cnt==0)
004b46  b920              CBNZ     r0,|L1.19282|
;;;6922   			{
;;;6923   			bps[in]._umin_av_cnt=0;
;;;6924   			avar_bps_hndl(in,2,0);
004b48  2200              MOVS     r2,#0
004b4a  2102              MOVS     r1,#2
004b4c  4630              MOV      r0,r6
004b4e  f7fffffe          BL       avar_bps_hndl
                  |L1.19282|
;;;6925   			//apv_stop(in);
;;;6926   		//	apv_cnt[in,0]=0;
;;;6927   		//	apv_cnt[in,1]=0;
;;;6928   		//	apv_cnt[in,2]=0;
;;;6929   			}
;;;6930   		}
;;;6931   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6932   	}
;;;6933   
;;;6934   if((bps[in]._Uii<(UB20-DU)))
004b52  4846              LDR      r0,|L1.19564|
004b54  69e1              LDR      r1,[r4,#0x1c]
004b56  f9b02000          LDRSH    r2,[r0,#0]  ; UB20
004b5a  4845              LDR      r0,|L1.19568|
004b5c  f9b00000          LDRSH    r0,[r0,#0]  ; DU
004b60  1a10              SUBS     r0,r2,r0
004b62  4281              CMP      r1,r0
004b64  da1d              BGE      |L1.19362|
;;;6935   	{
;;;6936   	if(bps[in]._state==bsWRK)
004b66  78a0              LDRB     r0,[r4,#2]
004b68  2801              CMP      r0,#1
004b6a  d128              BNE      |L1.19390|
;;;6937   		{
;;;6938   		if(bps[in]._umin_av_cnt_uku<300) 
004b6c  f9b4004c          LDRSH    r0,[r4,#0x4c]
004b70  f44f7196          MOV      r1,#0x12c
004b74  4288              CMP      r0,r1
004b76  da11              BGE      |L1.19356|
;;;6939   			{
;;;6940   			bps[in]._umin_av_cnt_uku++;
004b78  f1000001          ADD      r0,r0,#1
004b7c  b200              SXTH     r0,r0
004b7e  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6941   			if(bps[in]._umin_av_cnt_uku>=300)
004b82  4288              CMP      r0,r1
004b84  db1b              BLT      |L1.19390|
;;;6942   				{ 
;;;6943   				bps[in]._umin_av_cnt_uku=300;
004b86  f8a4104c          STRH     r1,[r4,#0x4c]
;;;6944   				if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004b8a  7860              LDRB     r0,[r4,#1]
004b8c  0740              LSLS     r0,r0,#29
004b8e  d416              BMI      |L1.19390|
004b90  2201              MOVS     r2,#1
004b92  2102              MOVS     r1,#2
004b94  4630              MOV      r0,r6
004b96  f7fffffe          BL       avar_bps_hndl
004b9a  e010              B        |L1.19390|
                  |L1.19356|
;;;6945   			  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6946   				if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6947   					{
;;;6948   					apv_cnt[in,0]=APV_INIT;
;;;6949   					apv_cnt[in,1]=APV_INIT;
;;;6950   					apv_cnt[in,2]=APV_INIT;
;;;6951   					apv_flags[in]=afOFF;
;;;6952   					}*/				
;;;6953   				}
;;;6954   			}
;;;6955   		else
;;;6956   			{
;;;6957   			bps[in]._umin_av_cnt_uku=0;
004b9c  f8a4704c          STRH     r7,[r4,#0x4c]
004ba0  e00d              B        |L1.19390|
                  |L1.19362|
;;;6958   			} 
;;;6959   		}
;;;6960   	}	
;;;6961   	
;;;6962   else if(bps[in]._Uii>=(UB20-DU))
;;;6963   	{
;;;6964   	if(bps[in]._umin_av_cnt_uku) 
004ba2  f9b4004c          LDRSH    r0,[r4,#0x4c]
004ba6  b150              CBZ      r0,|L1.19390|
;;;6965   		{
;;;6966   		bps[in]._umin_av_cnt_uku--;
004ba8  f1a00001          SUB      r0,r0,#1
004bac  b200              SXTH     r0,r0
004bae  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6967   		if(bps[in]._umin_av_cnt_uku==0)
004bb2  b920              CBNZ     r0,|L1.19390|
;;;6968   			{
;;;6969   			bps[in]._umin_av_cnt_uku=0;
;;;6970   			avar_bps_hndl(in,2,0);
004bb4  2200              MOVS     r2,#0
004bb6  2102              MOVS     r1,#2
004bb8  4630              MOV      r0,r6
004bba  f7fffffe          BL       avar_bps_hndl
                  |L1.19390|
;;;6971   		//	apv_cnt[in,0]=0;
;;;6972   		//	apv_cnt[in,1]=0;
;;;6973   		//	apv_cnt[in,2]=0;
;;;6974   			}
;;;6975   		}
;;;6976   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;6977   	}
;;;6978   
;;;6979   //bps[in]._state=bsOFF;
;;;6980   
;;;6981   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004bbe  7860              LDRB     r0,[r4,#1]
004bc0  0700              LSLS     r0,r0,#28
004bc2  d003              BEQ      |L1.19404|
004bc4  f04f0004          MOV      r0,#4
004bc8  70a0              STRB     r0,[r4,#2]
004bca  e017              B        |L1.19452|
                  |L1.19404|
;;;6982   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004bcc  4829              LDR      r0,|L1.19572|
004bce  7800              LDRB     r0,[r0,#0]  ; net_av
004bd0  b130              CBZ      r0,|L1.19424|
004bd2  78e0              LDRB     r0,[r4,#3]
004bd4  2814              CMP      r0,#0x14
004bd6  d903              BLS      |L1.19424|
;;;6983   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004bd8  f04f0005          MOV      r0,#5
004bdc  70a0              STRB     r0,[r4,#2]
004bde  e00d              B        |L1.19452|
                  |L1.19424|
;;;6984   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004be0  f8940042          LDRB     r0,[r4,#0x42]
004be4  0680              LSLS     r0,r0,#26
004be6  d503              BPL      |L1.19440|
004be8  f04f0002          MOV      r0,#2
004bec  70a0              STRB     r0,[r4,#2]
004bee  e005              B        |L1.19452|
                  |L1.19440|
;;;6985   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004bf0  78e0              LDRB     r0,[r4,#3]
004bf2  2814              CMP      r0,#0x14
004bf4  d202              BCS      |L1.19452|
004bf6  f04f0001          MOV      r0,#1
004bfa  70a0              STRB     r0,[r4,#2]
                  |L1.19452|
;;;6986   
;;;6987   
;;;6988   
;;;6989   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6990   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6991   //else bps[0]._state=ssNOT;
;;;6992   
;;;6993   //bps[in]._is_ready=0;
;;;6994   //bps[in]._is_wrk=0;
;;;6995   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6996   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6997   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6998   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6999   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;7000   //	{
;;;7001   //	bps[in]._flags_bp='B';// заблокирован
;;;7002   //	bps[in]._is_ready=1;
;;;7003   //	}
;;;7004   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;7005   //     {
;;;7006   //     bps[in]._flags_bp='W';// работает
;;;7007   //     bps[in]._is_ready=1;
;;;7008   //     bps[in]._is_wrk=1;
;;;7009        
;;;7010   //     }
;;;7011   //else bps[in]._is_ready=1;     
;;;7012   
;;;7013   
;;;7014   
;;;7015   
;;;7016   
;;;7017   /*
;;;7018   bps[in]._flags_tu&=BIN8(11111110);
;;;7019   if(bps[in]._ist_blok_cnt)
;;;7020   	{
;;;7021   	bps[in]._ist_blok_cnt--;
;;;7022   	bps[in]._flags_tu|=BIN8(1);
;;;7023   	}
;;;7024   
;;;7025   	   */ 
;;;7026   
;;;7027   //Пересброс БПСа при потере связи
;;;7028   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004bfc  78e0              LDRB     r0,[r4,#3]
004bfe  280a              CMP      r0,#0xa
004c00  d306              BCC      |L1.19472|
004c02  f894002c          LDRB     r0,[r4,#0x2c]
004c06  f0400080          ORR      r0,r0,#0x80
004c0a  f884002c          STRB     r0,[r4,#0x2c]
004c0e  e005              B        |L1.19484|
                  |L1.19472|
;;;7029   else bps[in]._flags_tu&=BIN8(1111111);
004c10  f894002c          LDRB     r0,[r4,#0x2c]
004c14  f000007f          AND      r0,r0,#0x7f
004c18  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19484|
;;;7030   
;;;7031   if(avar_bps_reset_cnt) 
004c1c  4816              LDR      r0,|L1.19576|
004c1e  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004c22  b139              CBZ      r1,|L1.19508|
;;;7032   	{
;;;7033   	bps[in]._flags_tu|=BIN8(10);
004c24  f894102c          LDRB     r1,[r4,#0x2c]
004c28  f0410102          ORR      r1,r1,#2
004c2c  f884102c          STRB     r1,[r4,#0x2c]
;;;7034   	bps[in]._av=0;
004c30  7067              STRB     r7,[r4,#1]
004c32  e029              B        |L1.19592|
                  |L1.19508|
;;;7035   	}
;;;7036   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004c34  f8941062          LDRB     r1,[r4,#0x62]
004c38  b301              CBZ      r1,|L1.19580|
004c3a  f894102c          LDRB     r1,[r4,#0x2c]
004c3e  f0410102          ORR      r1,r1,#2
004c42  f884102c          STRB     r1,[r4,#0x2c]
004c46  e01f              B        |L1.19592|
                  |L1.19528|
                          DCD      ica_u_necc
                  |L1.19532|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19536|
                          DCD      ICA_CH
                  |L1.19540|
                          DCD      TBAT
                  |L1.19544|
                          DCD      ipsBlckStat
                  |L1.19548|
                          DCD      ipsBlckSrc
                  |L1.19552|
                          DCD      ipsBlckLog
                  |L1.19556|
                          DCD      ||.bss||+0x40c
                  |L1.19560|
                          DCD      bps
                  |L1.19564|
                          DCD      UB20
                  |L1.19568|
                          DCD      ||DU||
                  |L1.19572|
                          DCD      net_av
                  |L1.19576|
                          DCD      ||area_number.25||
                  |L1.19580|
;;;7037   else bps[in]._flags_tu&=BIN8(11111101);
004c7c  f894102c          LDRB     r1,[r4,#0x2c]
004c80  f00101fd          AND      r1,r1,#0xfd
004c84  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19592|
;;;7038   	
;;;7039   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004c88  f9b41054          LDRSH    r1,[r4,#0x54]
004c8c  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004c90  4408              ADD      r0,r0,r1
004c92  6320              STR      r0,[r4,#0x30]
;;;7040   bps[in]._vol_i=1000;
004c94  f44f707a          MOV      r0,#0x3e8
004c98  6360              STR      r0,[r4,#0x34]
                  |L1.19610|
;;;7041   //bps[0]._vol_u=500;
;;;7042   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;7043   }
004c9a  e8bd81f0          POP      {r4-r8,pc}
;;;7044   
                          ENDP

                  avt_hndl PROC
;;;7045   //-----------------------------------------------
;;;7046   void avt_hndl(void)
004c9e  b570              PUSH     {r4-r6,lr}
;;;7047   {
;;;7048   char i;
;;;7049   for(i=0;i<12;i++)
004ca0  f04f0000          MOV      r0,#0
;;;7050   	{
;;;7051   	if(eb2_data_short[6]&(1<<i))
004ca4  49ff              LDR      r1,|L1.20644|
004ca6  f04f0401          MOV      r4,#1
004caa  4603              MOV      r3,r0                 ;7049
004cac  f9b1200c          LDRSH    r2,[r1,#0xc]
;;;7052   		{
;;;7053   		avt_stat[i]=avtON;
004cb0  4dfd              LDR      r5,|L1.20648|
                  |L1.19634|
004cb2  fa04f100          LSL      r1,r4,r0              ;7051
004cb6  420a              TST      r2,r1                 ;7051
004cb8  d001              BEQ      |L1.19646|
004cba  542c              STRB     r4,[r5,r0]
004cbc  e000              B        |L1.19648|
                  |L1.19646|
;;;7054   		}
;;;7055   	else avt_stat[i]=avtOFF;
004cbe  542b              STRB     r3,[r5,r0]
                  |L1.19648|
004cc0  f1000001          ADD      r0,r0,#1              ;7049
004cc4  b2c0              UXTB     r0,r0                 ;7049
004cc6  280c              CMP      r0,#0xc               ;7049
004cc8  d3f3              BCC      |L1.19634|
;;;7056   	}
;;;7057   
;;;7058   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004cca  4ef8              LDR      r6,|L1.20652|
004ccc  7828              LDRB     r0,[r5,#0]  ; avt_stat
004cce  4cf8              LDR      r4,|L1.20656|
004cd0  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004cd2  4281              CMP      r1,r0
004cd4  d00b              BEQ      |L1.19694|
004cd6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004cda  2901              CMP      r1,#1
004cdc  db07              BLT      |L1.19694|
;;;7059   	{
;;;7060   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004cde  2801              CMP      r0,#1
004ce0  d07e              BEQ      |L1.19936|
;;;7061   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004ce2  2300              MOVS     r3,#0
004ce4  2201              MOVS     r2,#1
004ce6  210b              MOVS     r1,#0xb
004ce8  a0f2              ADR      r0,|L1.20660|
004cea  f7fffffe          BL       snmp_trap_send
                  |L1.19694|
;;;7062   	}
;;;7063   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004cee  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004cf0  7868              LDRB     r0,[r5,#1]  ; avt_stat
004cf2  4281              CMP      r1,r0
004cf4  d00b              BEQ      |L1.19726|
004cf6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004cfa  2902              CMP      r1,#2
004cfc  db07              BLT      |L1.19726|
;;;7064   	{
;;;7065   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004cfe  2801              CMP      r0,#1
004d00  d06f              BEQ      |L1.19938|
;;;7066   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004d02  2300              MOVS     r3,#0
004d04  2202              MOVS     r2,#2
004d06  210b              MOVS     r1,#0xb
004d08  a0ef              ADR      r0,|L1.20680|
004d0a  f7fffffe          BL       snmp_trap_send
                  |L1.19726|
;;;7067   	}
;;;7068   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004d0e  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004d10  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004d12  4281              CMP      r1,r0
004d14  d00b              BEQ      |L1.19758|
004d16  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d1a  2903              CMP      r1,#3
004d1c  db07              BLT      |L1.19758|
;;;7069   	{
;;;7070   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004d1e  2801              CMP      r0,#1
004d20  d072              BEQ      |L1.19976|
;;;7071   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004d22  2300              MOVS     r3,#0
004d24  2203              MOVS     r2,#3
004d26  210b              MOVS     r1,#0xb
004d28  a0ec              ADR      r0,|L1.20700|
004d2a  f7fffffe          BL       snmp_trap_send
                  |L1.19758|
;;;7072   	}
;;;7073   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004d2e  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004d30  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004d32  4281              CMP      r1,r0
004d34  d00b              BEQ      |L1.19790|
004d36  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d3a  2904              CMP      r1,#4
004d3c  db07              BLT      |L1.19790|
;;;7074   	{
;;;7075   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004d3e  2801              CMP      r0,#1
004d40  d079              BEQ      |L1.20022|
;;;7076   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004d42  2300              MOVS     r3,#0
004d44  2204              MOVS     r2,#4
004d46  210b              MOVS     r1,#0xb
004d48  a0e9              ADR      r0,|L1.20720|
004d4a  f7fffffe          BL       snmp_trap_send
                  |L1.19790|
;;;7077   	}
;;;7078   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004d4e  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004d50  7928              LDRB     r0,[r5,#4]  ; avt_stat
004d52  4281              CMP      r1,r0
004d54  d00b              BEQ      |L1.19822|
004d56  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d5a  2905              CMP      r1,#5
004d5c  db07              BLT      |L1.19822|
;;;7079   	{
;;;7080   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004d5e  2801              CMP      r0,#1
004d60  d071              BEQ      |L1.20038|
;;;7081   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004d62  2300              MOVS     r3,#0
004d64  2205              MOVS     r2,#5
004d66  210b              MOVS     r1,#0xb
004d68  a0e6              ADR      r0,|L1.20740|
004d6a  f7fffffe          BL       snmp_trap_send
                  |L1.19822|
;;;7082   	}
;;;7083   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004d6e  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004d70  7968              LDRB     r0,[r5,#5]  ; avt_stat
004d72  4281              CMP      r1,r0
004d74  d00b              BEQ      |L1.19854|
004d76  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d7a  2906              CMP      r1,#6
004d7c  db07              BLT      |L1.19854|
;;;7084   	{
;;;7085   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004d7e  2801              CMP      r0,#1
004d80  d068              BEQ      |L1.20052|
;;;7086   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004d82  2300              MOVS     r3,#0
004d84  2206              MOVS     r2,#6
004d86  210b              MOVS     r1,#0xb
004d88  a0e3              ADR      r0,|L1.20760|
004d8a  f7fffffe          BL       snmp_trap_send
                  |L1.19854|
;;;7087   	}
;;;7088   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004d8e  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004d90  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004d92  4281              CMP      r1,r0
004d94  d00b              BEQ      |L1.19886|
004d96  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d9a  2907              CMP      r1,#7
004d9c  db07              BLT      |L1.19886|
;;;7089   	{
;;;7090   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004d9e  2801              CMP      r0,#1
004da0  d05f              BEQ      |L1.20066|
;;;7091   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004da2  2300              MOVS     r3,#0
004da4  2207              MOVS     r2,#7
004da6  210b              MOVS     r1,#0xb
004da8  a0e0              ADR      r0,|L1.20780|
004daa  f7fffffe          BL       snmp_trap_send
                  |L1.19886|
;;;7092   	}
;;;7093   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004dae  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004db0  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004db2  4281              CMP      r1,r0
004db4  d00b              BEQ      |L1.19918|
004db6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004dba  2908              CMP      r1,#8
004dbc  db07              BLT      |L1.19918|
;;;7094   	{
;;;7095   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004dbe  2801              CMP      r0,#1
004dc0  d056              BEQ      |L1.20080|
;;;7096   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004dc2  2300              MOVS     r3,#0
004dc4  2208              MOVS     r2,#8
004dc6  210b              MOVS     r1,#0xb
004dc8  a0dd              ADR      r0,|L1.20800|
004dca  f7fffffe          BL       snmp_trap_send
                  |L1.19918|
;;;7097   	}
;;;7098   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004dce  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004dd0  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004dd2  4281              CMP      r1,r0
004dd4  d00e              BEQ      |L1.19956|
004dd6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004dda  2909              CMP      r1,#9
004ddc  db0a              BLT      |L1.19956|
;;;7099   	{
;;;7100   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004dde  e001              B        |L1.19940|
                  |L1.19936|
004de0  e013              B        |L1.19978|
                  |L1.19938|
004de2  e019              B        |L1.19992|
                  |L1.19940|
004de4  2801              CMP      r0,#1
004de6  d04a              BEQ      |L1.20094|
;;;7101   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004de8  2300              MOVS     r3,#0
004dea  2209              MOVS     r2,#9
004dec  210b              MOVS     r1,#0xb
004dee  a0d9              ADR      r0,|L1.20820|
004df0  f7fffffe          BL       snmp_trap_send
                  |L1.19956|
;;;7102   	}
;;;7103   
;;;7104   for(i=0;i<12;i++)
004df4  f04f0000          MOV      r0,#0
                  |L1.19960|
;;;7105   	{
;;;7106   	avt_stat_old[i]=avt_stat[i];
004df8  5c29              LDRB     r1,[r5,r0]
004dfa  5431              STRB     r1,[r6,r0]
004dfc  f1000001          ADD      r0,r0,#1              ;7104
004e00  b2c0              UXTB     r0,r0                 ;7104
004e02  280c              CMP      r0,#0xc               ;7104
004e04  d3f8              BCC      |L1.19960|
                  |L1.19974|
;;;7107   	}
;;;7108   }
004e06  bd70              POP      {r4-r6,pc}
                  |L1.19976|
004e08  e00e              B        |L1.20008|
                  |L1.19978|
004e0a  2301              MOVS     r3,#1                 ;7060
004e0c  461a              MOV      r2,r3                 ;7060
004e0e  210b              MOVS     r1,#0xb               ;7060
004e10  a0d5              ADR      r0,|L1.20840|
004e12  f7fffffe          BL       snmp_trap_send
004e16  e76a              B        |L1.19694|
                  |L1.19992|
004e18  2301              MOVS     r3,#1                 ;7065
004e1a  2202              MOVS     r2,#2                 ;7065
004e1c  210b              MOVS     r1,#0xb               ;7065
004e1e  a0d7              ADR      r0,|L1.20860|
004e20  f7fffffe          BL       snmp_trap_send
004e24  e773              B        |L1.19726|
004e26  e006              B        |L1.20022|
                  |L1.20008|
004e28  2301              MOVS     r3,#1                 ;7070
004e2a  2203              MOVS     r2,#3                 ;7070
004e2c  210b              MOVS     r1,#0xb               ;7070
004e2e  a0d8              ADR      r0,|L1.20880|
004e30  f7fffffe          BL       snmp_trap_send
004e34  e77b              B        |L1.19758|
                  |L1.20022|
004e36  2301              MOVS     r3,#1                 ;7075
004e38  2204              MOVS     r2,#4                 ;7075
004e3a  210b              MOVS     r1,#0xb               ;7075
004e3c  a0d9              ADR      r0,|L1.20900|
004e3e  f7fffffe          BL       snmp_trap_send
004e42  e784              B        |L1.19790|
004e44  e7ff              B        |L1.20038|
                  |L1.20038|
004e46  2301              MOVS     r3,#1                 ;7080
004e48  2205              MOVS     r2,#5                 ;7080
004e4a  210b              MOVS     r1,#0xb               ;7080
004e4c  a0da              ADR      r0,|L1.20920|
004e4e  f7fffffe          BL       snmp_trap_send
004e52  e78c              B        |L1.19822|
                  |L1.20052|
004e54  2301              MOVS     r3,#1                 ;7085
004e56  2206              MOVS     r2,#6                 ;7085
004e58  210b              MOVS     r1,#0xb               ;7085
004e5a  a0dc              ADR      r0,|L1.20940|
004e5c  f7fffffe          BL       snmp_trap_send
004e60  e795              B        |L1.19854|
                  |L1.20066|
004e62  2301              MOVS     r3,#1                 ;7090
004e64  2207              MOVS     r2,#7                 ;7090
004e66  210b              MOVS     r1,#0xb               ;7090
004e68  a0dd              ADR      r0,|L1.20960|
004e6a  f7fffffe          BL       snmp_trap_send
004e6e  e79e              B        |L1.19886|
                  |L1.20080|
004e70  2301              MOVS     r3,#1                 ;7095
004e72  2208              MOVS     r2,#8                 ;7095
004e74  210b              MOVS     r1,#0xb               ;7095
004e76  a0df              ADR      r0,|L1.20980|
004e78  f7fffffe          BL       snmp_trap_send
004e7c  e7a7              B        |L1.19918|
                  |L1.20094|
004e7e  2301              MOVS     r3,#1                 ;7100
004e80  2209              MOVS     r2,#9                 ;7100
004e82  210b              MOVS     r1,#0xb               ;7100
004e84  a0e0              ADR      r0,|L1.21000|
004e86  f7fffffe          BL       snmp_trap_send
004e8a  e7b3              B        |L1.19956|
;;;7109   
                          ENDP

                  bat_hndl PROC
;;;7110   //-----------------------------------------------
;;;7111   void bat_hndl(void)
004e8c  b570              PUSH     {r4-r6,lr}
;;;7112   {
;;;7113   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7114   	{
;;;7115   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7116   		{
;;;7117   		char i;
;;;7118   		for(i=0;i<2;i++)
;;;7119   			{
;;;7120   			if(mess_data[1]&(1<<i))
;;;7121   				{
;;;7122   				bat[i]._cnt_to_block=0;
;;;7123        			bat[i]._rel_stat=0;
;;;7124        			}
;;;7125   			}
;;;7126   		}
;;;7127   	}
;;;7128   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7129   	{		
;;;7130   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7131   		{
;;;7132   		char i;
;;;7133   		for(i=0;i<2;i++)
;;;7134   			{
;;;7135   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7136   				{
;;;7137   				bat[i]._cnt_to_block=20;
;;;7138   				bat[i]._rel_stat=1;
;;;7139        			}
;;;7140   			}
;;;7141   		
;;;7142   		}		
;;;7143   	}*/
;;;7144   
;;;7145   if(mess_find_unvol(MESS2BAT_HNDL))
004e8e  20c8              MOVS     r0,#0xc8
004e90  f7fffffe          BL       mess_find_unvol
;;;7146   	{ 
;;;7147   	char i;
;;;7148   	
;;;7149   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7150   		{
;;;7151   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7152   			{
;;;7153   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004e94  49e1              LDR      r1,|L1.21020|
004e96  2200              MOVS     r2,#0                 ;7151
004e98  b3a8              CBZ      r0,|L1.20230|
004e9a  4be1              LDR      r3,|L1.21024|
;;;7154   			}
;;;7155   		}
;;;7156   
;;;7157   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7158   		{
;;;7159   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7160   			{
;;;7161   			if(mess_data[1]&(1<<i))
004e9c  2401              MOVS     r4,#1
004e9e  6818              LDR      r0,[r3,#0]            ;7149  ; mess_data
004ea0  28c9              CMP      r0,#0xc9              ;7149
004ea2  d01c              BEQ      |L1.20190|
004ea4  28ca              CMP      r0,#0xca              ;7157
004ea6  d02f              BEQ      |L1.20232|
;;;7162   				{
;;;7163   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7164   				}
;;;7165   			else bat[i]._cnt_to_block=0;
;;;7166   			}
;;;7167   		}
;;;7168   	else 
;;;7169   	 	{
;;;7170   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004ea8  4610              MOV      r0,r2
                  |L1.20138|
;;;7171   			{
;;;7172   			bat[i]._cnt_to_block=0;
004eaa  eb000340          ADD      r3,r0,r0,LSL #1
004eae  eb031300          ADD      r3,r3,r0,LSL #4
004eb2  f8012023          STRB     r2,[r1,r3,LSL #2]
004eb6  f1000001          ADD      r0,r0,#1              ;7170
004eba  b2c0              UXTB     r0,r0                 ;7170
004ebc  2802              CMP      r0,#2                 ;7170
004ebe  d3f4              BCC      |L1.20138|
                  |L1.20160|
;;;7173   			}
;;;7174   
;;;7175   		}
;;;7176   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004ec0  f04f0000          MOV      r0,#0
                  |L1.20164|
;;;7177   		{
;;;7178   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004ec4  eb000340          ADD      r3,r0,r0,LSL #1
004ec8  eb031300          ADD      r3,r3,r0,LSL #4
004ecc  f8115023          LDRB     r5,[r1,r3,LSL #2]
004ed0  2d14              CMP      r5,#0x14
004ed2  d939              BLS      |L1.20296|
004ed4  eb010383          ADD      r3,r1,r3,LSL #2
004ed8  f883403c          STRB     r4,[r3,#0x3c]
004edc  e038              B        |L1.20304|
                  |L1.20190|
004ede  f04f0000          MOV      r0,#0                 ;7151
                  |L1.20194|
004ee2  eb000340          ADD      r3,r0,r0,LSL #1       ;7153
004ee6  eb031500          ADD      r5,r3,r0,LSL #4       ;7153
004eea  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7153
004eee  2b32              CMP      r3,#0x32              ;7153
004ef0  d203              BCS      |L1.20218|
004ef2  f1030301          ADD      r3,r3,#1              ;7153
004ef6  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7153
                  |L1.20218|
004efa  f1000001          ADD      r0,r0,#1              ;7151
004efe  b2c0              UXTB     r0,r0                 ;7151
004f00  2802              CMP      r0,#2                 ;7151
004f02  d3ee              BCC      |L1.20194|
004f04  e7dc              B        |L1.20160|
                  |L1.20230|
004f06  e029              B        |L1.20316|
                  |L1.20232|
004f08  f04f0000          MOV      r0,#0                 ;7159
004f0c  685e              LDR      r6,[r3,#4]            ;7161
                  |L1.20238|
004f0e  fa04f300          LSL      r3,r4,r0              ;7161
004f12  421e              TST      r6,r3                 ;7161
004f14  d00c              BEQ      |L1.20272|
004f16  eb000340          ADD      r3,r0,r0,LSL #1       ;7163
004f1a  eb031500          ADD      r5,r3,r0,LSL #4       ;7163
004f1e  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7163
004f22  2b32              CMP      r3,#0x32              ;7163
004f24  d20a              BCS      |L1.20284|
004f26  f1030301          ADD      r3,r3,#1              ;7163
004f2a  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7163
004f2e  e005              B        |L1.20284|
                  |L1.20272|
004f30  eb000340          ADD      r3,r0,r0,LSL #1       ;7165
004f34  eb031300          ADD      r3,r3,r0,LSL #4       ;7165
004f38  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7165
                  |L1.20284|
004f3c  f1000001          ADD      r0,r0,#1              ;7159
004f40  b2c0              UXTB     r0,r0                 ;7159
004f42  2802              CMP      r0,#2                 ;7159
004f44  d3e3              BCC      |L1.20238|
004f46  e7bb              B        |L1.20160|
                  |L1.20296|
;;;7179   		else bat[i]._rel_stat=0;
004f48  eb010383          ADD      r3,r1,r3,LSL #2
004f4c  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.20304|
004f50  f1000001          ADD      r0,r0,#1              ;7176
004f54  b2c0              UXTB     r0,r0                 ;7176
004f56  2802              CMP      r0,#2                 ;7176
004f58  d3b4              BCC      |L1.20164|
;;;7180   		}
;;;7181   
;;;7182   	}
;;;7183   
;;;7184   else 
;;;7185   	{
;;;7186   	char i;
;;;7187   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7188   		{
;;;7189   		bat[i]._cnt_to_block=0;
;;;7190   		bat[i]._rel_stat=0;
;;;7191   		}
;;;7192   
;;;7193   	}
;;;7194   
;;;7195   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7196   	{
;;;7197   	if(PARAM_BAT_ON)
;;;7198   		{
;;;7199   		char i;
;;;7200   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7201   			{
;;;7202   			if(mess_data[1]&(1<<i))
;;;7203   				{
;;;7204   				bat[i]._cnt_to_block=0;
;;;7205   				bat[i]._rel_stat=0;
;;;7206   				}
;;;7207   			}
;;;7208   		}
;;;7209   	} */
;;;7210   }
004f5a  e754              B        |L1.19974|
                  |L1.20316|
004f5c  f04f0000          MOV      r0,#0                 ;7187
                  |L1.20320|
004f60  eb000340          ADD      r3,r0,r0,LSL #1       ;7189
004f64  eb031300          ADD      r3,r3,r0,LSL #4       ;7189
004f68  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7189
004f6c  eb010383          ADD      r3,r1,r3,LSL #2       ;7190
004f70  f883203c          STRB     r2,[r3,#0x3c]         ;7190
004f74  f1000001          ADD      r0,r0,#1              ;7187
004f78  b2c0              UXTB     r0,r0                 ;7187
004f7a  2802              CMP      r0,#2                 ;7187
004f7c  d3f0              BCC      |L1.20320|
004f7e  e742              B        |L1.19974|
;;;7211   
                          ENDP

                  bat_drv PROC
;;;7849   //-----------------------------------------------
;;;7850   void bat_drv(char in)
004f80  e92d4ffe          PUSH     {r1-r11,lr}
;;;7851   {
004f84  4605              MOV      r5,r0
;;;7852   unsigned short /*tempUS,*/tempUS_;
;;;7853   unsigned long tempUL,tempUL_;
;;;7854   unsigned short b_zar;
;;;7855   //static unsigned short time_cnt[2];
;;;7856   
;;;7857   
;;;7858   
;;;7859   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004f86  49a7              LDR      r1,|L1.21028|
004f88  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004f8c  b118              CBZ      r0,|L1.20374|
004f8e  f1a00001          SUB      r0,r0,#1
004f92  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.20374|
;;;7860   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004f96  4aa3              LDR      r2,|L1.21028|
004f98  1d12              ADDS     r2,r2,#4
004f9a  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004f9e  b118              CBZ      r0,|L1.20392|
004fa0  f1a00001          SUB      r0,r0,#1
004fa4  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.20392|
;;;7861   
;;;7862   
;;;7863   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004fa8  eb050045          ADD      r0,r5,r5,LSL #1
004fac  4b9b              LDR      r3,|L1.21020|
004fae  eb001005          ADD      r0,r0,r5,LSL #4
004fb2  eb030480          ADD      r4,r3,r0,LSL #2
004fb6  4b9c              LDR      r3,|L1.21032|
004fb8  9002              STR      r0,[sp,#8]
004fba  f9b40008          LDRSH    r0,[r4,#8]
004fbe  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004fc2  2364              MOVS     r3,#0x64
004fc4  42b0              CMP      r0,r6
004fc6  dd01              BLE      |L1.20428|
004fc8  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.20428|
;;;7864   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004fcc  2800              CMP      r0,#0
004fce  da01              BGE      |L1.20436|
004fd0  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.20436|
;;;7865   
;;;7866   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7867        {
;;;7868        if(!cntrl_stat_blok_cnt_)
004fd4  4893              LDR      r0,|L1.21028|
004fd6  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7866
004fda  38b4              SUBS     r0,r0,#0xb4
004fdc  2700              MOVS     r7,#0
004fde  b14b              CBZ      r3,|L1.20468|
004fe0  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7866
004fe4  b133              CBZ      r3,|L1.20468|
004fe6  f8b03072          LDRH     r3,[r0,#0x72]  ; cntrl_stat_blok_cnt_
004fea  b1a3              CBZ      r3,|L1.20502|
;;;7869             {
;;;7870             cntrl_stat_blok_cnt_=600; 
;;;7871             cntrl_stat_blok_cnt_plus[in]=0;
;;;7872             cntrl_stat_blok_cnt_minus[in]=0;
;;;7873             }
;;;7874        else cntrl_stat_blok_cnt=3000;
004fec  f64031b8          MOV      r1,#0xbb8
004ff0  f8a01070          STRH     r1,[r0,#0x70]
                  |L1.20468|
;;;7875        }
;;;7876   cntrl_stat_blok_cnt=0;
004ff4  f8a07070          STRH     r7,[r0,#0x70]
;;;7877   
;;;7878   if(++(bat[in]._time_cnt)>=10)
004ff8  f894003e          LDRB     r0,[r4,#0x3e]
004ffc  1c40              ADDS     r0,r0,#1
004ffe  b2c0              UXTB     r0,r0
005000  f884003e          STRB     r0,[r4,#0x3e]
005004  280a              CMP      r0,#0xa
005006  d301              BCC      |L1.20492|
;;;7879   	{
;;;7880   	bat[in]._time_cnt=0;
005008  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.20492|
;;;7881   	//bat[in]._zar_cnt++;
;;;7882   	}
;;;7883   
;;;7884   if(main_10Hz_cnt==50)
00500c  4e87              LDR      r6,|L1.21036|
00500e  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
005010  2832              CMP      r0,#0x32
005012  d009              BEQ      |L1.20520|
005014  e017              B        |L1.20550|
                  |L1.20502|
005016  f44f7316          MOV      r3,#0x258             ;7870
00501a  f8a03072          STRH     r3,[r0,#0x72]         ;7870
00501e  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7871
005022  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7872
005026  e7e5              B        |L1.20468|
                  |L1.20520|
;;;7885   	{
;;;7886   	if(!bat[in]._rel_stat)
005028  f894003c          LDRB     r0,[r4,#0x3c]
00502c  b958              CBNZ     r0,|L1.20550|
;;;7887   		{
;;;7888   		
;;;7889   		if(bat[in]._Ub<80) 
00502e  f9b40002          LDRSH    r0,[r4,#2]
005032  2850              CMP      r0,#0x50
005034  da07              BGE      |L1.20550|
;;;7890   			{
;;;7891   			
;;;7892   			if(!(bat[in]._av&1))
005036  f894003d          LDRB     r0,[r4,#0x3d]
00503a  07c0              LSLS     r0,r0,#31
00503c  d103              BNE      |L1.20550|
;;;7893   				{
;;;7894   				avar_bat_hndl(in,1);
00503e  2101              MOVS     r1,#1
005040  4628              MOV      r0,r5
005042  f7fffffe          BL       avar_bat_hndl
                  |L1.20550|
;;;7895   				//if(in==0)plazma_bat++;
;;;7896   				}
;;;7897   			}				
;;;7898   
;;;7899   		}
;;;7900   	}
;;;7901   
;;;7902   if(main_10Hz_cnt>200)
005046  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7903   	{
;;;7904   	if(abs(bat[in]._Ib)>IKB) 
00504a  4e79              LDR      r6,|L1.21040|
00504c  28c8              CMP      r0,#0xc8              ;7902
00504e  dd0f              BLE      |L1.20592|
005050  f9b40008          LDRSH    r0,[r4,#8]
005054  f7fffffe          BL       abs
005058  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
00505c  4288              CMP      r0,r1
00505e  dd07              BLE      |L1.20592|
;;;7905   		{
;;;7906   		if((bat[in]._av&1))avar_bat_hndl(in,0);
005060  f894003d          LDRB     r0,[r4,#0x3d]
005064  07c0              LSLS     r0,r0,#31
005066  d003              BEQ      |L1.20592|
005068  2100              MOVS     r1,#0
00506a  4628              MOV      r0,r5
00506c  f7fffffe          BL       avar_bat_hndl
                  |L1.20592|
;;;7907   		}
;;;7908   	}
;;;7909   
;;;7910   #ifdef APSENERGIA
;;;7911   //if(bat[in]._Ib>(-IKB))
;;;7912   
;;;7913   
;;;7914   #endif
;;;7915   
;;;7916   if(bat[in]._Ib>(-IKB))
005070  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
005074  f9b40008          LDRSH    r0,[r4,#8]
005078  4249              RSBS     r1,r1,#0
00507a  4288              CMP      r0,r1
00507c  dd0e              BLE      |L1.20636|
;;;7917   	{
;;;7918   	if(bat[in]._cnt_wrk<10)
00507e  7b60              LDRB     r0,[r4,#0xd]
005080  280a              CMP      r0,#0xa
005082  d20c              BCS      |L1.20638|
;;;7919   		{
;;;7920   		bat[in]._cnt_wrk++;
005084  f1000001          ADD      r0,r0,#1
005088  b2c0              UXTB     r0,r0
00508a  7360              STRB     r0,[r4,#0xd]
;;;7921   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
00508c  280a              CMP      r0,#0xa
00508e  d307              BCC      |L1.20640|
005090  7ba0              LDRB     r0,[r4,#0xe]
005092  2800              CMP      r0,#0
005094  d004              BEQ      |L1.20640|
;;;7922   			{
;;;7923   			bat[in]._wrk=0;
005096  73a7              STRB     r7,[r4,#0xe]
;;;7924   			//beep_init(0x7L,'O');
;;;7925   			//wrk_mem_hndl(0);
;;;7926   			wrk_mem_hndl(in);
005098  4628              MOV      r0,r5
00509a  e0cb              B        |L1.21044|
                  |L1.20636|
00509c  e0d1              B        |L1.21058|
                  |L1.20638|
00509e  e0cc              B        |L1.21050|
                  |L1.20640|
0050a0  e111              B        |L1.21190|
0050a2  0000              DCW      0x0000
                  |L1.20644|
                          DCD      eb2_data_short
                  |L1.20648|
                          DCD      avt_stat
                  |L1.20652|
                          DCD      avt_stat_old
                  |L1.20656|
                          DCD      NUMAVT
                  |L1.20660|
0050b4  4176746f          DCB      "Avtomat #1 is OFF",0
0050b8  6d617420
0050bc  23312069
0050c0  73204f46
0050c4  4600    
0050c6  00                DCB      0
0050c7  00                DCB      0
                  |L1.20680|
0050c8  4176746f          DCB      "Avtomat #2 is OFF",0
0050cc  6d617420
0050d0  23322069
0050d4  73204f46
0050d8  4600    
0050da  00                DCB      0
0050db  00                DCB      0
                  |L1.20700|
0050dc  4176746f          DCB      "Avtomat #3 is OFF",0
0050e0  6d617420
0050e4  23332069
0050e8  73204f46
0050ec  4600    
0050ee  00                DCB      0
0050ef  00                DCB      0
                  |L1.20720|
0050f0  4176746f          DCB      "Avtomat #4 is OFF",0
0050f4  6d617420
0050f8  23342069
0050fc  73204f46
005100  4600    
005102  00                DCB      0
005103  00                DCB      0
                  |L1.20740|
005104  4176746f          DCB      "Avtomat #5 is OFF",0
005108  6d617420
00510c  23352069
005110  73204f46
005114  4600    
005116  00                DCB      0
005117  00                DCB      0
                  |L1.20760|
005118  4176746f          DCB      "Avtomat #6 is OFF",0
00511c  6d617420
005120  23362069
005124  73204f46
005128  4600    
00512a  00                DCB      0
00512b  00                DCB      0
                  |L1.20780|
00512c  4176746f          DCB      "Avtomat #7 is OFF",0
005130  6d617420
005134  23372069
005138  73204f46
00513c  4600    
00513e  00                DCB      0
00513f  00                DCB      0
                  |L1.20800|
005140  4176746f          DCB      "Avtomat #8 is OFF",0
005144  6d617420
005148  23382069
00514c  73204f46
005150  4600    
005152  00                DCB      0
005153  00                DCB      0
                  |L1.20820|
005154  4176746f          DCB      "Avtomat #9 is OFF",0
005158  6d617420
00515c  23392069
005160  73204f46
005164  4600    
005166  00                DCB      0
005167  00                DCB      0
                  |L1.20840|
005168  4176746f          DCB      "Avtomat #1 is ON ",0
00516c  6d617420
005170  23312069
005174  73204f4e
005178  2000    
00517a  00                DCB      0
00517b  00                DCB      0
                  |L1.20860|
00517c  4176746f          DCB      "Avtomat #2 is ON ",0
005180  6d617420
005184  23322069
005188  73204f4e
00518c  2000    
00518e  00                DCB      0
00518f  00                DCB      0
                  |L1.20880|
005190  4176746f          DCB      "Avtomat #3 is ON ",0
005194  6d617420
005198  23332069
00519c  73204f4e
0051a0  2000    
0051a2  00                DCB      0
0051a3  00                DCB      0
                  |L1.20900|
0051a4  4176746f          DCB      "Avtomat #4 is ON ",0
0051a8  6d617420
0051ac  23342069
0051b0  73204f4e
0051b4  2000    
0051b6  00                DCB      0
0051b7  00                DCB      0
                  |L1.20920|
0051b8  4176746f          DCB      "Avtomat #5 is ON ",0
0051bc  6d617420
0051c0  23352069
0051c4  73204f4e
0051c8  2000    
0051ca  00                DCB      0
0051cb  00                DCB      0
                  |L1.20940|
0051cc  4176746f          DCB      "Avtomat #6 is ON ",0
0051d0  6d617420
0051d4  23362069
0051d8  73204f4e
0051dc  2000    
0051de  00                DCB      0
0051df  00                DCB      0
                  |L1.20960|
0051e0  4176746f          DCB      "Avtomat #7 is ON ",0
0051e4  6d617420
0051e8  23372069
0051ec  73204f4e
0051f0  2000    
0051f2  00                DCB      0
0051f3  00                DCB      0
                  |L1.20980|
0051f4  4176746f          DCB      "Avtomat #8 is ON ",0
0051f8  6d617420
0051fc  23382069
005200  73204f4e
005204  2000    
005206  00                DCB      0
005207  00                DCB      0
                  |L1.21000|
005208  4176746f          DCB      "Avtomat #9 is ON ",0
00520c  6d617420
005210  23392069
005214  73204f4e
005218  2000    
00521a  00                DCB      0
00521b  00                DCB      0
                  |L1.21020|
                          DCD      bat
                  |L1.21024|
                          DCD      mess_data
                  |L1.21028|
                          DCD      ||area_number.25||+0xb4
                  |L1.21032|
                          DCD      IZMAX
                  |L1.21036|
                          DCD      main_10Hz_cnt
                  |L1.21040|
                          DCD      IKB
                  |L1.21044|
005234  f7fffffe          BL       wrk_mem_hndl
005238  e069              B        |L1.21262|
                  |L1.21050|
;;;7927   			//plazma++;
;;;7928   			}
;;;7929   		}
;;;7930   	else bat[in]._cnt_wrk=10;	
00523a  f04f000a          MOV      r0,#0xa
00523e  7360              STRB     r0,[r4,#0xd]
005240  e065              B        |L1.21262|
                  |L1.21058|
;;;7931   	}	
;;;7932   
;;;7933   else if(bat[in]._Ib<(-IKB))
005242  da64              BGE      |L1.21262|
;;;7934   	{
;;;7935   	if(bat[in]._cnt_wrk)
005244  7b60              LDRB     r0,[r4,#0xd]
005246  b3f0              CBZ      r0,|L1.21190|
;;;7936   		{
;;;7937   		bat[in]._cnt_wrk--;
005248  f1a00001          SUB      r0,r0,#1
00524c  b2c0              UXTB     r0,r0
00524e  7360              STRB     r0,[r4,#0xd]
;;;7938   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
005250  bbc8              CBNZ     r0,|L1.21190|
005252  7ba0              LDRB     r0,[r4,#0xe]
005254  bbb8              CBNZ     r0,|L1.21190|
;;;7939   			{
;;;7940   			bat[in]._wrk=1;
005256  f04f0001          MOV      r0,#1
00525a  73a0              STRB     r0,[r4,#0xe]
;;;7941   
;;;7942   				{
;;;7943   				char temp;
;;;7944   				signed short temp_temp;
;;;7945   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
00525c  48ff              LDR      r0,|L1.22108|
00525e  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
005260  f1000001          ADD      r0,r0,#1
005264  f0000007          AND      r0,r0,#7
005268  eb040040          ADD      r0,r4,r0,LSL #1
00526c  8c00              LDRH     r0,[r0,#0x20]
00526e  9000              STR      r0,[sp,#0]
;;;7946   			 
;;;7947   				temp=LPC_RTC->YEAR;
005270  4efb              LDR      r6,|L1.22112|
005272  8bb0              LDRH     r0,[r6,#0x1c]
005274  9001              STR      r0,[sp,#4]
;;;7948   				gran_char((signed char*)&temp,1,99);
005276  f04f0263          MOV      r2,#0x63
00527a  f04f0101          MOV      r1,#1
00527e  a801              ADD      r0,sp,#4
005280  f7fffffe          BL       gran_char
;;;7949   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
005284  f104041c          ADD      r4,r4,#0x1c
005288  f89d0004          LDRB     r0,[sp,#4]
00528c  7620              STRB     r0,[r4,#0x18]
;;;7950   			
;;;7951   				temp=LPC_RTC->MONTH;
00528e  7e30              LDRB     r0,[r6,#0x18]
005290  9001              STR      r0,[sp,#4]
;;;7952   				gran_char((signed char*)&temp,1,12);
005292  f04f020c          MOV      r2,#0xc
005296  f04f0101          MOV      r1,#1
00529a  a801              ADD      r0,sp,#4
00529c  f7fffffe          BL       gran_char
;;;7953   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
0052a0  f89d0004          LDRB     r0,[sp,#4]
0052a4  7660              STRB     r0,[r4,#0x19]
;;;7954   			
;;;7955   				temp=LPC_RTC->DOM;
0052a6  7b30              LDRB     r0,[r6,#0xc]
0052a8  9001              STR      r0,[sp,#4]
;;;7956   				gran_char((signed char*)&temp,1,31);
0052aa  221f              MOVS     r2,#0x1f
0052ac  2101              MOVS     r1,#1
0052ae  a801              ADD      r0,sp,#4
0052b0  f7fffffe          BL       gran_char
;;;7957   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
0052b4  f89d0004          LDRB     r0,[sp,#4]
0052b8  76a0              STRB     r0,[r4,#0x1a]
;;;7958   				
;;;7959   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
0052ba  f89d0000          LDRB     r0,[sp,#0]
0052be  76e0              STRB     r0,[r4,#0x1b]
;;;7960   
;;;7961   				temp=LPC_RTC->HOUR;
0052c0  7a30              LDRB     r0,[r6,#8]
0052c2  9001              STR      r0,[sp,#4]
;;;7962   				gran_char((signed char*)&temp,0,23);
0052c4  e000              B        |L1.21192|
                  |L1.21190|
0052c6  e022              B        |L1.21262|
                  |L1.21192|
0052c8  2217              MOVS     r2,#0x17
0052ca  2100              MOVS     r1,#0
0052cc  a801              ADD      r0,sp,#4
0052ce  f7fffffe          BL       gran_char
;;;7963   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
0052d2  f89d0004          LDRB     r0,[sp,#4]
0052d6  7720              STRB     r0,[r4,#0x1c]
;;;7964                  	
;;;7965   				temp=LPC_RTC->MIN;
0052d8  7930              LDRB     r0,[r6,#4]
0052da  9001              STR      r0,[sp,#4]
;;;7966   				gran_char((signed char*)&temp,0,59);
0052dc  223b              MOVS     r2,#0x3b
0052de  2100              MOVS     r1,#0
0052e0  a801              ADD      r0,sp,#4
0052e2  f7fffffe          BL       gran_char
;;;7967   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
0052e6  f89d0004          LDRB     r0,[sp,#4]
0052ea  7760              STRB     r0,[r4,#0x1d]
;;;7968   	          
;;;7969   				temp=LPC_RTC->SEC;
0052ec  7830              LDRB     r0,[r6,#0]
0052ee  9001              STR      r0,[sp,#4]
;;;7970   				gran_char((signed char*)&temp,0,59);
0052f0  223b              MOVS     r2,#0x3b
0052f2  2100              MOVS     r1,#0
0052f4  a801              ADD      r0,sp,#4
0052f6  f7fffffe          BL       gran_char
;;;7971   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
0052fa  f89d0004          LDRB     r0,[sp,#4]
0052fe  77a0              STRB     r0,[r4,#0x1e]
;;;7972   			
;;;7973   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
005300  f89d0001          LDRB     r0,[sp,#1]
005304  77e0              STRB     r0,[r4,#0x1f]
;;;7974   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005306  8027              STRH     r7,[r4,#0]
;;;7975   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
005308  8067              STRH     r7,[r4,#2]
00530a  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.21262|
;;;7976   				}
;;;7977   	
;;;7978   			}
;;;7979   
;;;7980   		}
;;;7981   	else bat[in]._cnt_wrk=0;	 
;;;7982   	
;;;7983   	}					
;;;7984   
;;;7985   /*
;;;7986   if(Ibat>=(-IKB))
;;;7987   	{
;;;7988   	if(cnt_wrk<10)
;;;7989   		{
;;;7990   		cnt_wrk++;
;;;7991   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7992   			{
;;;7993   			wrk=wrkOFF;
;;;7994   			//beep_init(0x7L,'O');
;;;7995   			wrk_mem_hndl(ibat_integr);
;;;7996   			}
;;;7997   		}
;;;7998   	else cnt_wrk=10;	
;;;7999   	}	
;;;8000   
;;;8001   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;8002   	{
;;;8003   	if(cnt_wrk)
;;;8004   		{
;;;8005   		cnt_wrk--;
;;;8006   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;8007   			{
;;;8008   			char temp;
;;;8009   			signed short temp_temp;
;;;8010   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;8011   			 
;;;8012   			wrk=wrkON;
;;;8013   			
;;;8014   			temp=_year;
;;;8015   			gran_char(&temp,1,99);
;;;8016   			*((char*)(&(wrk_date[0])))=temp;
;;;8017   			
;;;8018   			temp=_month;
;;;8019   			gran_char(&temp,1,12);
;;;8020   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;8021   			
;;;8022   			temp=_date;
;;;8023   			gran_char(&temp,1,31);
;;;8024   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;8025   				
;;;8026   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;8027   
;;;8028   			temp=_hour;
;;;8029   			gran_char(&temp,0,23);
;;;8030   			*((char*)(&(wrk_date[1])))=temp;
;;;8031                  
;;;8032   			temp=_min;
;;;8033   			gran_char(&temp,0,59);
;;;8034   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;8035   	          
;;;8036   			temp=_sec;
;;;8037   			gran_char(&temp,0,59);
;;;8038   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;8039   			
;;;8040   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;8041   
;;;8042   			
;;;8043   			//beep_init(0xFL,'O'); 
;;;8044   			ibat_integr=0;
;;;8045   			ibat_integr_=0;
;;;8046   			}
;;;8047   		}
;;;8048   	else cnt_wrk=0;	 
;;;8049   	
;;;8050   	}
;;;8051   if(wrk==wrkON)
;;;8052   	{
;;;8053   	ibat_integr_+=-Ibat;
;;;8054   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;8055   		{
;;;8056   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;8057   		ibat_integr++;
;;;8058   		}
;;;8059   	}
;;;8060   
;;;8061   */
;;;8062   
;;;8063   
;;;8064   /*if(bat[in]._cnt_to_block)
;;;8065   	{
;;;8066   	bat[in]._cnt_to_block--;
;;;8067   	if(!(bat[in]._cnt_to_block))
;;;8068   		{
;;;8069   		//bat[in]._rel_stat=1;
;;;8070   		}
;;;8071   	}
;;;8072   */
;;;8073   
;;;8074   
;;;8075   
;;;8076   
;;;8077   //unsigned int tempUI,tempUI_;
;;;8078   //unsigned int b_zar; 
;;;8079   //char i;
;;;8080   //Ibat[0]=5000;                     
;;;8081   
;;;8082   
;;;8083                               
;;;8084   if(bat[in]._time_cnt==0)
;;;8085   	{
;;;8086   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8087   	
;;;8088   	if(bat[in]._zar_cnt>=AH_CONSTANT)
00530e  f64848a0          MOV      r8,#0x8ca0
005312  f894003e          LDRB     r0,[r4,#0x3e]         ;8084
005316  bba8              CBNZ     r0,|L1.21380|
005318  f9b41008          LDRSH    r1,[r4,#8]            ;8086
00531c  6960              LDR      r0,[r4,#0x14]         ;8086
00531e  4408              ADD      r0,r0,r1              ;8086
005320  6160              STR      r0,[r4,#0x14]         ;8086
;;;8089   		{
;;;8090   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8091   		else tempUS_=BAT_C_REAL[in];
;;;8092   		
;;;8093   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005322  f8df9340          LDR      r9,|L1.22116|
005326  f8dfa340          LDR      r10,|L1.22120|
00532a  f2455b55          MOV      r11,#0x5555           ;8090
00532e  4540              CMP      r0,r8                 ;8088
005330  db29              BLT      |L1.21382|
005332  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8090
005336  4558              CMP      r0,r11                ;8090
005338  d103              BNE      |L1.21314|
00533a  48cc              LDR      r0,|L1.22124|
00533c  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8090
005340  e001              B        |L1.21318|
                  |L1.21314|
005342  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8091
                  |L1.21318|
005346  f8390015          LDRH     r0,[r9,r5,LSL #1]
00534a  f7fffffe          BL       lc640_read_int
00534e  b280              UXTH     r0,r0
;;;8094   
;;;8095   		if(b_zar<(tempUS_/**10*/))
005350  42b0              CMP      r0,r6
005352  d20e              BCS      |L1.21362|
;;;8096   			{
;;;8097   			bat[in]._zar_cnt-=AH_CONSTANT;
005354  6961              LDR      r1,[r4,#0x14]
005356  f5a14100          SUB      r1,r1,#0x8000
00535a  f5a1614a          SUB      r1,r1,#0xca0
00535e  6161              STR      r1,[r4,#0x14]
;;;8098   
;;;8099   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
005360  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005364  f1000001          ADD      r0,r0,#1
005368  b201              SXTH     r1,r0
00536a  4610              MOV      r0,r2
00536c  f7fffffe          BL       lc640_write_int
005370  e032              B        |L1.21464|
                  |L1.21362|
;;;8100   			}
;;;8101   		else if(b_zar>(tempUS_/**10*/))  
005372  d931              BLS      |L1.21464|
;;;8102   			{
;;;8103   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005374  f9390015          LDRSH    r0,[r9,r5,LSL #1]
005378  b231              SXTH     r1,r6
00537a  f7fffffe          BL       lc640_write_int
;;;8104   			bat[in]._zar_cnt=AH_CONSTANT;
00537e  f8c48014          STR      r8,[r4,#0x14]
005382  e029              B        |L1.21464|
                  |L1.21380|
005384  e054              B        |L1.21552|
                  |L1.21382|
;;;8105   
;;;8106   			}
;;;8107   
;;;8108   		}
;;;8109   
;;;8110   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
005386  49ba              LDR      r1,|L1.22128|
005388  4288              CMP      r0,r1
00538a  dc25              BGT      |L1.21464|
;;;8111   		{
;;;8112   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
00538c  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005390  4558              CMP      r0,r11
005392  d103              BNE      |L1.21404|
005394  48b5              LDR      r0,|L1.22124|
005396  f8306015          LDRH     r6,[r0,r5,LSL #1]
00539a  e001              B        |L1.21408|
                  |L1.21404|
;;;8113   		else tempUS_=BAT_C_REAL[in];
00539c  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.21408|
;;;8114   		
;;;8115   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0053a0  f8390015          LDRH     r0,[r9,r5,LSL #1]
0053a4  f7fffffe          BL       lc640_read_int
0053a8  b280              UXTH     r0,r0
;;;8116   
;;;8117   		if(b_zar>tempUS_)
0053aa  42b0              CMP      r0,r6
0053ac  d905              BLS      |L1.21434|
;;;8118   			{
;;;8119   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0053ae  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0053b2  b231              SXTH     r1,r6
0053b4  f7fffffe          BL       lc640_write_int
;;;8120   			b_zar=tempUS_;
0053b8  4630              MOV      r0,r6
                  |L1.21434|
;;;8121   			}
;;;8122   		if(b_zar)
0053ba  b158              CBZ      r0,|L1.21460|
;;;8123   			{
;;;8124   			bat[in]._zar_cnt+=AH_CONSTANT;
0053bc  6961              LDR      r1,[r4,#0x14]
0053be  4441              ADD      r1,r1,r8
0053c0  6161              STR      r1,[r4,#0x14]
;;;8125   
;;;8126   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
0053c2  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0053c6  f1a00001          SUB      r0,r0,#1
0053ca  b201              SXTH     r1,r0
0053cc  4610              MOV      r0,r2
0053ce  f7fffffe          BL       lc640_write_int
0053d2  e001              B        |L1.21464|
                  |L1.21460|
;;;8127   			}
;;;8128   		else 
;;;8129   			{
;;;8130   			bat[in]._zar_cnt=-AH_CONSTANT;
0053d4  48a6              LDR      r0,|L1.22128|
0053d6  6160              STR      r0,[r4,#0x14]
                  |L1.21464|
;;;8131   			}
;;;8132   
;;;8133   		}
;;;8134   
;;;8135   			
;;;8136   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0053d8  f8390015          LDRH     r0,[r9,r5,LSL #1]
0053dc  f7fffffe          BL       lc640_read_int
0053e0  4601              MOV      r1,r0
;;;8137   	
;;;8138   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
0053e2  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0053e6  4558              CMP      r0,r11
0053e8  d102              BNE      |L1.21488|
0053ea  48a0              LDR      r0,|L1.22124|
0053ec  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21488|
;;;8139   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8140   		           	
;;;8141   	tempUL*=1000L;
0053f0  f44f727a          MOV      r2,#0x3e8
0053f4  fb01f102          MUL      r1,r1,r2
;;;8142   
;;;8143   
;;;8144   	if(tempUL_==0) tempUL=0;
0053f8  b158              CBZ      r0,|L1.21522|
;;;8145   	else tempUL/=tempUL_;
0053fa  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21502|
;;;8146   
;;;8147   	tempUL/=10L;
0053fe  f04f010a          MOV      r1,#0xa
005402  fbb0f0f1          UDIV     r0,r0,r1
;;;8148   
;;;8149   	bat[in]._zar=(unsigned short)tempUL;
005406  8220              STRH     r0,[r4,#0x10]
;;;8150   
;;;8151   	if(BAT_TYPE==1)
005408  489a              LDR      r0,|L1.22132|
00540a  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
00540c  2801              CMP      r0,#1
00540e  d003              BEQ      |L1.21528|
005410  e008              B        |L1.21540|
                  |L1.21522|
005412  f04f0000          MOV      r0,#0                 ;8144
005416  e7f2              B        |L1.21502|
                  |L1.21528|
;;;8152   		{
;;;8153   		bat[in]._zar=lakb[in]._s_o_c;
005418  4997              LDR      r1,|L1.22136|
00541a  9802              LDR      r0,[sp,#8]
00541c  eb010080          ADD      r0,r1,r0,LSL #2
005420  8a40              LDRH     r0,[r0,#0x12]
005422  8220              STRH     r0,[r4,#0x10]
                  |L1.21540|
;;;8154   		}
;;;8155   	
;;;8156   	gran((signed short*)&bat[in]._zar,0,100);
005424  f1040010          ADD      r0,r4,#0x10
005428  2264              MOVS     r2,#0x64
00542a  2100              MOVS     r1,#0
00542c  f7fffffe          BL       gran
                  |L1.21552|
;;;8157        }
;;;8158   
;;;8159   
;;;8160   //Подсчет тока разряда батареи      
;;;8161   if(bat[in]._wrk==1)
005430  7ba0              LDRB     r0,[r4,#0xe]
005432  2801              CMP      r0,#1
005434  d113              BNE      |L1.21598|
;;;8162   	{
;;;8163   	if(bat[in]._Iintegr<36000)
005436  8ba0              LDRH     r0,[r4,#0x1c]
005438  4540              CMP      r0,r8
00543a  d20f              BCS      |L1.21596|
;;;8164   		{          
;;;8165   		bat[in]._Iintegr+=abs(bat[in]._Ib);
00543c  f9b40008          LDRSH    r0,[r4,#8]
005440  f7fffffe          BL       abs
005444  8ba1              LDRH     r1,[r4,#0x1c]
005446  4408              ADD      r0,r0,r1
005448  b280              UXTH     r0,r0
00544a  83a0              STRH     r0,[r4,#0x1c]
;;;8166   		if(bat[in]._Iintegr>=36000)
00544c  4540              CMP      r0,r8
00544e  d306              BCC      |L1.21598|
;;;8167   			{
;;;8168   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005450  83a7              STRH     r7,[r4,#0x1c]
;;;8169   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
005452  8be0              LDRH     r0,[r4,#0x1e]
005454  f1000001          ADD      r0,r0,#1
005458  83e0              STRH     r0,[r4,#0x1e]
00545a  e000              B        |L1.21598|
                  |L1.21596|
;;;8170   			}
;;;8171   		}
;;;8172   	else 
;;;8173   		{
;;;8174   		bat[in]._Iintegr=0;
00545c  83a7              STRH     r7,[r4,#0x1c]
                  |L1.21598|
;;;8175   		}	
;;;8176   	} 
;;;8177   	    
;;;8178   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8179   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
00545e  4e87              LDR      r6,|L1.22140|
005460  4987              LDR      r1,|L1.22144|
005462  f8df9220          LDR      r9,|L1.22148|
005466  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00546a  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
00546e  4288              CMP      r0,r1
005470  dd02              BLE      |L1.21624|
005472  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
005476  b380              CBZ      r0,|L1.21722|
                  |L1.21624|
;;;8180   	{
;;;8181   	bat[in]._sign_temper_cnt++;
;;;8182   	}
;;;8183   else 
;;;8184   	{
;;;8185   	bat[in]._sign_temper_cnt--;
005478  f8b40040          LDRH     r0,[r4,#0x40]
00547c  f1a00001          SUB      r0,r0,#1
005480  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.21636|
;;;8186   	}
;;;8187   #else
;;;8188   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8189   	{
;;;8190   	bat[in]._sign_temper_cnt++;
;;;8191   	}
;;;8192   else 
;;;8193   	{
;;;8194   	bat[in]._sign_temper_cnt--;
;;;8195   	}
;;;8196   #endif
;;;8197   gran(&bat[in]._sign_temper_cnt,0,600);
005484  f44f7b16          MOV      r11,#0x258
005488  f1040040          ADD      r0,r4,#0x40
00548c  465a              MOV      r2,r11
00548e  2100              MOVS     r1,#0
005490  f7fffffe          BL       gran
;;;8198   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
005494  f9b40040          LDRSH    r0,[r4,#0x40]
005498  f2402a4e          MOV      r10,#0x24e
00549c  4550              CMP      r0,r10
00549e  db05              BLT      |L1.21676|
0054a0  f894103f          LDRB     r1,[r4,#0x3f]
0054a4  f0410101          ORR      r1,r1,#1
0054a8  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21676|
;;;8199   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
0054ac  280a              CMP      r0,#0xa
0054ae  dc05              BGT      |L1.21692|
0054b0  f894003f          LDRB     r0,[r4,#0x3f]
0054b4  f0200001          BIC      r0,r0,#1
0054b8  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21692|
;;;8200   
;;;8201   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
0054bc  f894003f          LDRB     r0,[r4,#0x3f]
0054c0  07c1              LSLS     r1,r0,#31
0054c2  d005              BEQ      |L1.21712|
0054c4  06c0              LSLS     r0,r0,#27
0054c6  d403              BMI      |L1.21712|
0054c8  2101              MOVS     r1,#1
0054ca  4628              MOV      r0,r5
0054cc  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21712|
;;;8202   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
0054d0  f894003f          LDRB     r0,[r4,#0x3f]
0054d4  07c1              LSLS     r1,r0,#31
0054d6  d008              BEQ      |L1.21738|
0054d8  e00d              B        |L1.21750|
                  |L1.21722|
0054da  e7ff              B        |L1.21724|
                  |L1.21724|
0054dc  f8b40040          LDRH     r0,[r4,#0x40]         ;8181
0054e0  f1000001          ADD      r0,r0,#1              ;8181
0054e4  f8a40040          STRH     r0,[r4,#0x40]         ;8181
0054e8  e7cc              B        |L1.21636|
                  |L1.21738|
0054ea  06c0              LSLS     r0,r0,#27
0054ec  d503              BPL      |L1.21750|
0054ee  2100              MOVS     r1,#0
0054f0  4628              MOV      r0,r5
0054f2  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21750|
;;;8203   
;;;8204   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
0054f6  f894003f          LDRB     r0,[r4,#0x3f]
0054fa  07c1              LSLS     r1,r0,#31
0054fc  d004              BEQ      |L1.21768|
0054fe  f0400010          ORR      r0,r0,#0x10
005502  f884003f          STRB     r0,[r4,#0x3f]
005506  e003              B        |L1.21776|
                  |L1.21768|
;;;8205   else 								bat[in]._temper_stat&=~(1<<4);
005508  f0200010          BIC      r0,r0,#0x10
00550c  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21776|
;;;8206   
;;;8207   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8208   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
005510  495d              LDR      r1,|L1.22152|
005512  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
005516  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
00551a  4288              CMP      r0,r1
00551c  dd02              BLE      |L1.21796|
00551e  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
005522  b3d0              CBZ      r0,|L1.21914|
                  |L1.21796|
;;;8209   	{
;;;8210   	bat[in]._max_temper_cnt++;
;;;8211   	}
;;;8212   else 
;;;8213   	{
;;;8214   	bat[in]._max_temper_cnt--;
005524  f8b40042          LDRH     r0,[r4,#0x42]
005528  f1a00001          SUB      r0,r0,#1
00552c  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21808|
;;;8215   	}
;;;8216   #else
;;;8217   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8218   	{
;;;8219   	bat[in]._max_temper_cnt++;
;;;8220   	}
;;;8221   else 
;;;8222   	{
;;;8223   	bat[in]._max_temper_cnt--;
;;;8224   	}
;;;8225   #endif
;;;8226   
;;;8227   gran(&bat[in]._max_temper_cnt,0,600);
005530  f1040042          ADD      r0,r4,#0x42
005534  465a              MOV      r2,r11
005536  2100              MOVS     r1,#0
005538  f7fffffe          BL       gran
;;;8228   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
00553c  f9b40042          LDRSH    r0,[r4,#0x42]
005540  4550              CMP      r0,r10
005542  db05              BLT      |L1.21840|
005544  f894103f          LDRB     r1,[r4,#0x3f]
005548  f0410102          ORR      r1,r1,#2
00554c  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21840|
;;;8229   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
005550  280a              CMP      r0,#0xa
005552  dc05              BGT      |L1.21856|
005554  f894003f          LDRB     r0,[r4,#0x3f]
005558  f0200002          BIC      r0,r0,#2
00555c  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21856|
;;;8230   
;;;8231   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
005560  f894003f          LDRB     r0,[r4,#0x3f]
005564  0781              LSLS     r1,r0,#30
005566  d505              BPL      |L1.21876|
005568  0680              LSLS     r0,r0,#26
00556a  d403              BMI      |L1.21876|
00556c  2103              MOVS     r1,#3
00556e  4628              MOV      r0,r5
005570  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21876|
;;;8232   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
005574  f894003f          LDRB     r0,[r4,#0x3f]
005578  0781              LSLS     r1,r0,#30
00557a  d405              BMI      |L1.21896|
00557c  0680              LSLS     r0,r0,#26
00557e  d503              BPL      |L1.21896|
005580  2102              MOVS     r1,#2
005582  4628              MOV      r0,r5
005584  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21896|
;;;8233   
;;;8234   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
005588  f894003f          LDRB     r0,[r4,#0x3f]
00558c  0781              LSLS     r1,r0,#30
00558e  d50c              BPL      |L1.21930|
005590  f0400020          ORR      r0,r0,#0x20
005594  f884003f          STRB     r0,[r4,#0x3f]
005598  e00b              B        |L1.21938|
                  |L1.21914|
00559a  e7ff              B        |L1.21916|
                  |L1.21916|
00559c  f8b40042          LDRH     r0,[r4,#0x42]         ;8210
0055a0  f1000001          ADD      r0,r0,#1              ;8210
0055a4  f8a40042          STRH     r0,[r4,#0x42]         ;8210
0055a8  e7c2              B        |L1.21808|
                  |L1.21930|
;;;8235   else 								bat[in]._temper_stat&=~(1<<5);
0055aa  f0200020          BIC      r0,r0,#0x20
0055ae  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21938|
;;;8236   
;;;8237   //Подсчет наработки батареи
;;;8238   if(bat[in]._resurs_cnt<36000)
0055b2  6c60              LDR      r0,[r4,#0x44]
0055b4  4540              CMP      r0,r8
0055b6  da13              BGE      |L1.21984|
;;;8239   	{               
;;;8240   	bat[in]._resurs_cnt++;
0055b8  f1000001          ADD      r0,r0,#1
0055bc  6460              STR      r0,[r4,#0x44]
;;;8241   	if(bat[in]._resurs_cnt>=36000)
0055be  4540              CMP      r0,r8
0055c0  db0f              BLT      |L1.21986|
;;;8242   		{
;;;8243   		bat[in]._resurs_cnt=0;
0055c2  6467              STR      r7,[r4,#0x44]
;;;8244   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0055c4  4c31              LDR      r4,|L1.22156|
0055c6  f8340015          LDRH     r0,[r4,r5,LSL #1]
0055ca  f7fffffe          BL       lc640_read_int
0055ce  1c40              ADDS     r0,r0,#1
0055d0  b201              SXTH     r1,r0
0055d2  f9340015          LDRSH    r0,[r4,r5,LSL #1]
0055d6  b003              ADD      sp,sp,#0xc
0055d8  e8bd4ff0          POP      {r4-r11,lr}
0055dc  f7ffbffe          B.W      lc640_write_int
                  |L1.21984|
;;;8245   		}
;;;8246   	}
;;;8247   else bat[in]._resurs_cnt=0;
0055e0  6467              STR      r7,[r4,#0x44]
                  |L1.21986|
;;;8248   
;;;8249   
;;;8250   #ifndef UKU_220_V2
;;;8251   #ifndef UKU_GLONASS
;;;8252   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8253   //#ifndef UKU_6U
;;;8254   //#ifndef UKU_220
;;;8255   if(UBM_AV)
;;;8256        {
;;;8257        signed short temp_SS;
;;;8258   #ifdef UKU_220
;;;8259   temp_SS=bat[in]._Ub/2;
;;;8260   #else
;;;8261        if(U0B<600)
;;;8262             {
;;;8263   
;;;8264             temp_SS=bat[in]._Ub/4;
;;;8265             }
;;;8266        else temp_SS=bat[in]._Ub/5;
;;;8267   	
;;;8268   	temp_SS+=temp_SS;     
;;;8269   #endif
;;;8270        temp_SS-=(bat[in]._Ubm);
;;;8271   
;;;8272        temp_SS=abs(temp_SS);
;;;8273   
;;;8274        temp_SS*=10;
;;;8275   
;;;8276        temp_SS/=12;
;;;8277   
;;;8278        bat[in]._dUbm=temp_SS;
;;;8279   
;;;8280   
;;;8281        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8282   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8283   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8284   		(!(bat[in]._av & 2))  )
;;;8285   		{
;;;8286   		bat[in]._cnt_as++;
;;;8287   		if(bat[in]._cnt_as==3000)
;;;8288   			{
;;;8289   			avar_bat_as_hndl(in,1);
;;;8290   			}
;;;8291   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8292   		}
;;;8293   	else 
;;;8294   		{
;;;8295   		if(bat[in]._cnt_as)
;;;8296   			{
;;;8297   			bat[in]._cnt_as--;
;;;8298   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8299   			}
;;;8300   		}
;;;8301        
;;;8302        }
;;;8303   //#endif 
;;;8304   #endif 
;;;8305   #endif
;;;8306   #endif
;;;8307   
;;;8308   }
0055e2  e8bd8ffe          POP      {r1-r11,pc}
;;;8309   
                          ENDP

                  bat_hndl_zvu PROC
;;;8311   //-----------------------------------------------
;;;8312   void bat_hndl_zvu(void)
0055e6  e92d4ff0          PUSH     {r4-r11,lr}
;;;8313   {
0055ea  b089              SUB      sp,sp,#0x24
;;;8314   char i;
;;;8315   short bat_hndl_i_temp;
;;;8316   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
0055ec  f04f021c          MOV      r2,#0x1c
0055f0  4927              LDR      r1,|L1.22160|
0055f2  4668              MOV      r0,sp
0055f4  f7fffffe          BL       __aeabi_memcpy4
;;;8317   
;;;8318   //Ib_ips_termokompensat=-17000;
;;;8319    
;;;8320   if(bat_hndl_zvu_init==0)
0055f8  4c26              LDR      r4,|L1.22164|
;;;8321   	{
;;;8322   	//Инициализация при включении системы
;;;8323   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8324   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
0055fa  2564              MOVS     r5,#0x64
;;;8325   	bat_hndl_zvu_Q*=10000L;
;;;8326   
;;;8327   	bat_hndl_zvu_init=1;
;;;8328   	}
;;;8329   else 
;;;8330   	{
;;;8331   	if(Ib_ips_termokompensat<-IKB)
;;;8332   		{
;;;8333   		bat_hndl_i_vector=0;
;;;8334   		bat_hndl_i_zar_price=0L;
;;;8335   			
;;;8336   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8337   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8338   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8339   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8340   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8341   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8342   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8343   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8344   		
;;;8345   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8346   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8347   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8348   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8349   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8350   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8351   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8352   
;;;8353   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8354   		for(i=0;i<7;i++)
;;;8355   			{
;;;8356   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8357   				{
;;;8358   				break;
;;;8359   				}
;;;8360   			}
;;;8361   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8362   		 else if((i>=1)&&(i<7))
;;;8363   		 	{
;;;8364   			short i1,i2;
;;;8365   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8366   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8367   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8368   			bat_hndl_t_razr*=(long)i1;
;;;8369   			bat_hndl_t_razr/=(long)i2;
;;;8370   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8371   			}
;;;8372   		else if(i>=7)
;;;8373   			{
;;;8374   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8375   			}
;;;8376   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
0055fc  f8df8098          LDR      r8,|L1.22168|
005600  7a60              LDRB     r0,[r4,#9]            ;8320  ; bat_hndl_zvu_init
005602  2700              MOVS     r7,#0                 ;8320
005604  f04f0901          MOV      r9,#1                 ;8327
005608  f1040680          ADD      r6,r4,#0x80           ;8323
00560c  2800              CMP      r0,#0                 ;8320
00560e  d07e              BEQ      |L1.22286|
005610  4923              LDR      r1,|L1.22176|
005612  4822              LDR      r0,|L1.22172|
005614  f9b12000          LDRSH    r2,[r1,#0]            ;8331  ; IKB
005618  4631              MOV      r1,r6                 ;8323
00561a  f9b00000          LDRSH    r0,[r0,#0]            ;8331  ; Ib_ips_termokompensat
00561e  4253              RSBS     r3,r2,#0              ;8331
005620  6d89              LDR      r1,[r1,#0x58]         ;8323
005622  4298              CMP      r0,r3                 ;8331
005624  da74              BGE      |L1.22288|
005626  72e7              STRB     r7,[r4,#0xb]          ;8333
005628  60f7              STR      r7,[r6,#0xc]          ;8334  ; bat_hndl_i_zar_price
00562a  f1c00000          RSB      r0,r0,#0              ;8336
00562e  b200              SXTH     r0,r0                 ;8336
005630  8030              STRH     r0,[r6,#0]            ;8336
005632  9008              STR      r0,[sp,#0x20]         ;8336
005634  481b              LDR      r0,|L1.22180|
005636  4a1c              LDR      r2,|L1.22184|
005638  8800              LDRH     r0,[r0,#0]            ;8337  ; BAT_C_POINT_1_6
00563a  eb000040          ADD      r0,r0,r0,LSL #1       ;8337
00563e  ea4f0040          LSL      r0,r0,#1              ;8337
005642  fa0ffb80          SXTH     r11,r0                ;8337
005646  4819              LDR      r0,|L1.22188|
005648  8800              LDRH     r0,[r0,#0]            ;8338  ; BAT_C_POINT_1_2
00564a  ea4f0040          LSL      r0,r0,#1              ;8338
00564e  b203              SXTH     r3,r0                 ;8338
005650  4817              LDR      r0,|L1.22192|
005652  f9b0c000          LDRSH    r12,[r0,#0]           ;8339  ; BAT_C_POINT_1
005656  4817              LDR      r0,|L1.22196|
005658  e02e              B        |L1.22200|
00565a  0000              DCW      0x0000
                  |L1.22108|
                          DCD      bat_u_old_cnt
                  |L1.22112|
                          DCD      0x40024020
                  |L1.22116|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.22120|
                          DCD      BAT_C_REAL
                  |L1.22124|
                          DCD      BAT_C_NOM
                  |L1.22128|
                          DCD      0xffff7360
                  |L1.22132|
                          DCD      BAT_TYPE
                  |L1.22136|
                          DCD      lakb
                  |L1.22140|
                          DCD      t_ext
                  |L1.22144|
                          DCD      TBATSIGN
                  |L1.22148|
                          DCD      ND_EXT
                  |L1.22152|
                          DCD      TBATMAX
                  |L1.22156|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.22160|
                          DCD      ||area_number.19||+0x20
                  |L1.22164|
                          DCD      ||area_number.25||
                  |L1.22168|
                          DCD      0x000f4240
                  |L1.22172|
                          DCD      Ib_ips_termokompensat
                  |L1.22176|
                          DCD      IKB
                  |L1.22180|
                          DCD      BAT_C_POINT_1_6
                  |L1.22184|
                          DCD      ||.bss||+0x44c
                  |L1.22188|
                          DCD      BAT_C_POINT_1_2
                  |L1.22192|
                          DCD      BAT_C_POINT_1
                  |L1.22196|
                          DCD      BAT_C_POINT_3
                  |L1.22200|
0056b8  f9b00000          LDRSH    r0,[r0,#0]            ;8340  ; BAT_C_POINT_3
0056bc  f04f0903          MOV      r9,#3                 ;8340
0056c0  fb90f0f9          SDIV     r0,r0,r9              ;8340
0056c4  b200              SXTH     r0,r0                 ;8340
0056c6  9007              STR      r0,[sp,#0x1c]         ;8340
0056c8  48ff              LDR      r0,|L1.23240|
0056ca  f04f0905          MOV      r9,#5                 ;8341
0056ce  f9b00000          LDRSH    r0,[r0,#0]            ;8341  ; BAT_C_POINT_5
0056d2  fb90f0f9          SDIV     r0,r0,r9              ;8341
0056d6  fa0ff980          SXTH     r9,r0                 ;8341
0056da  48fc              LDR      r0,|L1.23244|
0056dc  f9b0a000          LDRSH    r10,[r0,#0]           ;8342  ; BAT_C_POINT_10
0056e0  f04f000a          MOV      r0,#0xa               ;8342
0056e4  fb9af0f0          SDIV     r0,r10,r0             ;8342
0056e8  fa0ffe80          SXTH     lr,r0                 ;8342
0056ec  48f8              LDR      r0,|L1.23248|
0056ee  f04f0a14          MOV      r10,#0x14             ;8343
0056f2  f9b00000          LDRSH    r0,[r0,#0]            ;8343  ; BAT_C_POINT_20
0056f6  fb90f0fa          SDIV     r0,r0,r10             ;8343
0056fa  fa0ffa80          SXTH     r10,r0                ;8343
0056fe  48f5              LDR      r0,|L1.23252|
005700  f9b00000          LDRSH    r0,[r0,#0]            ;8345  ; BAT_K_OLD
005704  fb0bfb00          MUL      r11,r11,r0            ;8345
005708  fb9bfbf5          SDIV     r11,r11,r5            ;8345
00570c  e001              B        |L1.22290|
                  |L1.22286|
00570e  e04e              B        |L1.22446|
                  |L1.22288|
005710  e082              B        |L1.22552|
                  |L1.22290|
005712  f8a2b000          STRH     r11,[r2,#0]           ;8345
005716  fb03f300          MUL      r3,r3,r0              ;8346
00571a  fb93f3f5          SDIV     r3,r3,r5              ;8346
00571e  8053              STRH     r3,[r2,#2]            ;8346
005720  fb0cfc00          MUL      r12,r12,r0            ;8347
005724  fb9cf3f5          SDIV     r3,r12,r5             ;8347
005728  8093              STRH     r3,[r2,#4]            ;8347
00572a  9b07              LDR      r3,[sp,#0x1c]         ;8348
00572c  fb03f300          MUL      r3,r3,r0              ;8348
005730  fb93f3f5          SDIV     r3,r3,r5              ;8348
005734  80d3              STRH     r3,[r2,#6]            ;8348
005736  fb09f900          MUL      r9,r9,r0              ;8349
00573a  fb99f3f5          SDIV     r3,r9,r5              ;8349
00573e  8113              STRH     r3,[r2,#8]            ;8349
005740  fb0efe00          MUL      lr,lr,r0              ;8350
005744  fb9ef3f5          SDIV     r3,lr,r5              ;8350
005748  8153              STRH     r3,[r2,#0xa]          ;8350
00574a  fb0afa00          MUL      r10,r10,r0            ;8351
00574e  fb9af0f5          SDIV     r0,r10,r5             ;8351
005752  8190              STRH     r0,[r2,#0xc]          ;8351
005754  9808              LDR      r0,[sp,#0x20]         ;8353
005756  f04f030a          MOV      r3,#0xa               ;8353
00575a  fb90f0f3          SDIV     r0,r0,r3              ;8353
00575e  b203              SXTH     r3,r0                 ;8353
005760  f04f0000          MOV      r0,#0                 ;8354
                  |L1.22372|
005764  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8356
005768  429d              CMP      r5,r3                 ;8356
00576a  dd04              BLE      |L1.22390|
00576c  f1000001          ADD      r0,r0,#1              ;8354
005770  b2c0              UXTB     r0,r0                 ;8354
005772  2807              CMP      r0,#7                 ;8354
005774  d3f6              BCC      |L1.22372|
                  |L1.22390|
005776  b358              CBZ      r0,|L1.22480|
005778  1e45              SUBS     r5,r0,#1              ;8362
00577a  2d06              CMP      r5,#6                 ;8362
00577c  d22b              BCS      |L1.22486|
00577e  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8365
005782  ebac0303          SUB      r3,r12,r3             ;8365
005786  b21b              SXTH     r3,r3                 ;8365
005788  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8366
00578c  ebac0202          SUB      r2,r12,r2             ;8366
005790  fa0ffc82          SXTH     r12,r2                ;8366
005794  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8367
005798  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8367
00579c  eba90200          SUB      r2,r9,r0              ;8367
0057a0  fb02f203          MUL      r2,r2,r3              ;8368
0057a4  fb92f2fc          SDIV     r2,r2,r12             ;8369
0057a8  4410              ADD      r0,r0,r2              ;8370
0057aa  6530              STR      r0,[r6,#0x50]         ;8370  ; bat_hndl_t_razr
0057ac  e017              B        |L1.22494|
                  |L1.22446|
0057ae  f44f70ef          MOV      r0,#0x1de             ;8323
0057b2  f7fffffe          BL       lc640_read_int
0057b6  65b0              STR      r0,[r6,#0x58]         ;8323  ; bat_hndl_zvu_Q
0057b8  2865              CMP      r0,#0x65              ;8324
0057ba  d300              BCC      |L1.22462|
0057bc  65b5              STR      r5,[r6,#0x58]         ;8324  ; bat_hndl_zvu_Q
                  |L1.22462|
0057be  6db0              LDR      r0,[r6,#0x58]         ;8325  ; bat_hndl_zvu_Q
0057c0  f2427110          MOV      r1,#0x2710            ;8325
0057c4  fb00f001          MUL      r0,r0,r1              ;8325
0057c8  65b0              STR      r0,[r6,#0x58]         ;8325  ; bat_hndl_zvu_Q
0057ca  f8849009          STRB     r9,[r4,#9]            ;8327
0057ce  e066              B        |L1.22686|
                  |L1.22480|
0057d0  9800              LDR      r0,[sp,#0]            ;8361
0057d2  6530              STR      r0,[r6,#0x50]         ;8361  ; bat_hndl_t_razr
0057d4  e003              B        |L1.22494|
                  |L1.22486|
0057d6  2807              CMP      r0,#7                 ;8372
0057d8  d301              BCC      |L1.22494|
0057da  9806              LDR      r0,[sp,#0x18]         ;8374
0057dc  6530              STR      r0,[r6,#0x50]         ;8374  ; bat_hndl_t_razr
                  |L1.22494|
0057de  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_t_razr
0057e0  fb98f0f0          SDIV     r0,r8,r0
0057e4  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_proc_razr
;;;8377   
;;;8378   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
0057e6  4281              CMP      r1,r0
0057e8  dd03              BLE      |L1.22514|
0057ea  eba10000          SUB      r0,r1,r0
0057ee  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0057f0  e000              B        |L1.22516|
                  |L1.22514|
;;;8379   		else bat_hndl_zvu_Q=0L;
0057f2  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22516|
;;;8380   
;;;8381   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
0057f4  6e31              LDR      r1,[r6,#0x60]  ; bat_hndl_remain_time
0057f6  f44f6061          MOV      r0,#0xe10
0057fa  fb91f0f0          SDIV     r0,r1,r0
0057fe  8070              STRH     r0,[r6,#2]
;;;8382   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005800  f04f003c          MOV      r0,#0x3c
005804  fb91f1f0          SDIV     r1,r1,r0
005808  b209              SXTH     r1,r1
00580a  80b1              STRH     r1,[r6,#4]
;;;8383   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
00580c  fb91f2f0          SDIV     r2,r1,r0
005810  fb001012          MLS      r0,r0,r2,r1
005814  80f0              STRH     r0,[r6,#6]
005816  e016              B        |L1.22598|
                  |L1.22552|
;;;8384   
;;;8385   		}
;;;8386   	else if(Ib_ips_termokompensat>IKB)
005818  4290              CMP      r0,r2
00581a  dd14              BLE      |L1.22598|
;;;8387   		{
;;;8388   		bat_hndl_i_vector=1;
00581c  f884900b          STRB     r9,[r4,#0xb]
;;;8389   
;;;8390   		bat_hndl_i=Ib_ips_termokompensat;
005820  8030              STRH     r0,[r6,#0]
;;;8391   		bat_hndl_i_summ+=(long)bat_hndl_i;
005822  6eb2              LDR      r2,[r6,#0x68]  ; bat_hndl_i_summ
005824  4410              ADD      r0,r0,r2
005826  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8392   		if(bat_hndl_i_summ>=36000L)
005828  f64842a0          MOV      r2,#0x8ca0
00582c  4290              CMP      r0,r2
00582e  db0a              BLT      |L1.22598|
;;;8393   
;;;8394   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8395   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8396   			{
;;;8397   			bat_hndl_i_summ-=36000L;
005830  eba00002          SUB      r0,r0,r2
005834  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8398   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
005836  4541              CMP      r1,r8
005838  da03              BGE      |L1.22594|
00583a  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
00583c  4408              ADD      r0,r0,r1
00583e  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005840  e001              B        |L1.22598|
                  |L1.22594|
;;;8399   			else bat_hndl_zvu_Q=1000000L; 
005842  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22598|
;;;8400   			}
;;;8401   		}
;;;8402   
;;;8403   
;;;8404   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
005846  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005848  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
00584a  4288              CMP      r0,r1
00584c  d00d              BEQ      |L1.22634|
;;;8405   		{
;;;8406   		if(bat_hndl_i_vector==1)
00584e  2801              CMP      r0,#1
005850  d10b              BNE      |L1.22634|
;;;8407   			{
;;;8408   			signed short tempSS;
;;;8409   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
005852  f44f70e4          MOV      r0,#0x1c8
005856  f7fffffe          BL       lc640_read_int
00585a  b200              SXTH     r0,r0
;;;8410   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
00585c  4a9e              LDR      r2,|L1.23256|
00585e  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_zvu_Q
005860  4411              ADD      r1,r1,r2
005862  fb91f0f0          SDIV     r0,r1,r0
005866  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;8411   			bat_hndl_i_summ=0;
005868  66b7              STR      r7,[r6,#0x68]  ; bat_hndl_i_summ
                  |L1.22634|
;;;8412   			}
;;;8413   		}
;;;8414   	bat_hndl_i_vector_old=bat_hndl_i_vector;
00586a  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
00586c  7320              STRB     r0,[r4,#0xc]
;;;8415   
;;;8416   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
00586e  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005870  f2427a10          MOV      r10,#0x2710
005874  fb90f5fa          SDIV     r5,r0,r10
005878  f44f79ef          MOV      r9,#0x1de
00587c  4648              MOV      r0,r9
00587e  f7fffffe          BL       lc640_read_int
005882  4285              CMP      r5,r0
005884  d006              BEQ      |L1.22676|
005886  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
005888  fb90f0fa          SDIV     r0,r0,r10
00588c  b201              SXTH     r1,r0
00588e  4648              MOV      r0,r9
005890  f7fffffe          BL       lc640_write_int
                  |L1.22676|
;;;8417   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
005894  e9d60116          LDRD     r0,r1,[r6,#0x58]
005898  fb90f0f1          SDIV     r0,r0,r1
00589c  6630              STR      r0,[r6,#0x60]  ; bat_hndl_remain_time
                  |L1.22686|
;;;8418   	}
;;;8419   
;;;8420   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
00589e  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0058a0  4540              CMP      r0,r8
0058a2  dd02              BLE      |L1.22698|
0058a4  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
0058a8  e002              B        |L1.22704|
                  |L1.22698|
;;;8421   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
0058aa  2800              CMP      r0,#0
0058ac  da00              BGE      |L1.22704|
0058ae  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22704|
;;;8422   
;;;8423   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
0058b0  488a              LDR      r0,|L1.23260|
0058b2  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
0058b6  200a              MOVS     r0,#0xa
0058b8  fb91f0f0          SDIV     r0,r1,r0
0058bc  4988              LDR      r1,|L1.23264|
0058be  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0058c2  ebb00f41          CMP      r0,r1,LSL #1
0058c6  da30              BGE      |L1.22826|
0058c8  4249              RSBS     r1,r1,#0
0058ca  ebb00f41          CMP      r0,r1,LSL #1
0058ce  dd2c              BLE      |L1.22826|
0058d0  4884              LDR      r0,|L1.23268|
0058d2  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
0058d6  07c0              LSLS     r0,r0,#31
0058d8  d127              BNE      |L1.22826|
0058da  4883              LDR      r0,|L1.23272|
0058dc  4983              LDR      r1,|L1.23276|
0058de  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0058e2  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
0058e6  4288              CMP      r0,r1
0058e8  dc1f              BGT      |L1.22826|
0058ea  4981              LDR      r1,|L1.23280|
0058ec  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
0058f0  4288              CMP      r0,r1
0058f2  dd1a              BLE      |L1.22826|
0058f4  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
0058f8  280a              CMP      r0,#0xa
0058fa  db16              BLT      |L1.22826|
0058fc  28c8              CMP      r0,#0xc8
0058fe  dc14              BGT      |L1.22826|
;;;8424   	{
;;;8425   	if(bat_hndl_zvu_Q_cnt<60)
005900  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
005904  283c              CMP      r0,#0x3c
005906  d20d              BCS      |L1.22820|
;;;8426   		{
;;;8427   		bat_hndl_zvu_Q_cnt++;
005908  f1000001          ADD      r0,r0,#1
00590c  b2c0              UXTB     r0,r0
00590e  f8840030          STRB     r0,[r4,#0x30]
;;;8428   		if(bat_hndl_zvu_Q_cnt>=60)
005912  283c              CMP      r0,#0x3c
005914  d306              BCC      |L1.22820|
;;;8429   			{
;;;8430   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
005916  2164              MOVS     r1,#0x64
005918  f44f70ef          MOV      r0,#0x1de
00591c  f7fffffe          BL       lc640_write_int
;;;8431   			bat_hndl_zvu_Q=1000000L;
005920  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22820|
;;;8432   
;;;8433   
;;;8434   			}
;;;8435   		}
;;;8436   	}
;;;8437   else 
;;;8438   	{
;;;8439   	bat_hndl_zvu_Q_cnt=0;
;;;8440   	}
;;;8441   
;;;8442   
;;;8443   
;;;8444   };
005924  b009              ADD      sp,sp,#0x24
005926  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.22826|
00592a  f8847030          STRB     r7,[r4,#0x30]         ;8439
00592e  e7f9              B        |L1.22820|
;;;8445   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8449   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8450   void u_avt_set_hndl(void)
005930  e92d5fff          PUSH     {r0-r12,lr}
;;;8451   {
;;;8452   if(uavt_set_stat==uassSTEP1)
005934  4d6f              LDR      r5,|L1.23284|
;;;8453   	{
;;;8454   	char i,find_succes;
;;;8455   
;;;8456   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8457   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8458   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8459   		{
;;;8460   		uavt_set_error_cnt=60;
005936  4e70              LDR      r6,|L1.23288|
005938  f8df81c0          LDR      r8,|L1.23292|
00593c  7828              LDRB     r0,[r5,#0]            ;8452  ; uavt_set_stat
;;;8461   		}
;;;8462   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8463   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8464   	find_succes=0;
;;;8465   /*	for(i=0;i<NUMIST;i++)
;;;8466   		{
;;;8467   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8468   		else
;;;8469   			{
;;;8470   			find_succes=0;
;;;8471   			break;
;;;8472   			}
;;;8473   		}*/
;;;8474   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
00593e  f8dfa1c0          LDR      r10,|L1.23296|
005942  2400              MOVS     r4,#0                 ;8463
;;;8475   
;;;8476   	if(find_succes==1)
;;;8477   		{
;;;8478   		uavt_set_stat=uassSTEP2;
005944  f04f0902          MOV      r9,#2
;;;8479   		}
;;;8480   	if(uavt_set_error_cnt)
;;;8481   		{
;;;8482   		uavt_set_error_cnt--;
;;;8483   		if(!uavt_set_error_cnt)
;;;8484   			{
;;;8485   			uavt_set_stat=uassOFF;
;;;8486   			uavt_set_result_stat=uasrsERR;
;;;8487   			avt_error_bps=100;
005948  f04f0b64          MOV      r11,#0x64
00594c  2801              CMP      r0,#1                 ;8452
00594e  d12e              BNE      |L1.22958|
005950  f8980000          LDRB     r0,[r8,#0]            ;8458  ; uavt_set_stat_old
005954  2801              CMP      r0,#1                 ;8458
005956  d002              BEQ      |L1.22878|
005958  f04f003c          MOV      r0,#0x3c              ;8460
00595c  7030              STRB     r0,[r6,#0]            ;8460
                  |L1.22878|
00595e  230a              MOVS     r3,#0xa               ;8463
005960  2200              MOVS     r2,#0                 ;8463
005962  21e6              MOVS     r1,#0xe6              ;8463
005964  20e1              MOVS     r0,#0xe1              ;8463
005966  f7fffffe          BL       mess_send
00596a  f04f0000          MOV      r0,#0                 ;8464
00596e  4965              LDR      r1,|L1.23300|
005970  f9b12000          LDRSH    r2,[r1,#0]            ;8474  ; bps_U
005974  f9ba1000          LDRSH    r1,[r10,#0]           ;8474  ; U_AVT
005978  f1a10301          SUB      r3,r1,#1              ;8474
00597c  429a              CMP      r2,r3                 ;8474
00597e  db04              BLT      |L1.22922|
005980  1c49              ADDS     r1,r1,#1              ;8474
005982  428a              CMP      r2,r1                 ;8474
005984  dc01              BGT      |L1.22922|
005986  f04f0001          MOV      r0,#1                 ;8474
                  |L1.22922|
00598a  2801              CMP      r0,#1                 ;8476
00598c  d101              BNE      |L1.22930|
00598e  f8859000          STRB     r9,[r5,#0]            ;8478
                  |L1.22930|
005992  7830              LDRB     r0,[r6,#0]            ;8480  ; uavt_set_error_cnt
005994  b158              CBZ      r0,|L1.22958|
005996  f1a00001          SUB      r0,r0,#1              ;8482
00599a  b2c0              UXTB     r0,r0                 ;8482
00599c  7030              STRB     r0,[r6,#0]            ;8482
00599e  b930              CBNZ     r0,|L1.22958|
0059a0  702c              STRB     r4,[r5,#0]            ;8485
0059a2  4859              LDR      r0,|L1.23304|
0059a4  f8809000          STRB     r9,[r0,#0]            ;8486
0059a8  4858              LDR      r0,|L1.23308|
0059aa  f880b000          STRB     r11,[r0,#0]
                  |L1.22958|
;;;8488   			}
;;;8489   		}
;;;8490   	}
;;;8491   if(uavt_set_stat==uassSTEP2)
0059ae  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8492   	{
;;;8493   	char i,find_succes;
;;;8494   
;;;8495   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0059b0  4957              LDR      r1,|L1.23312|
;;;8496   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0059b2  4858              LDR      r0,|L1.23316|
;;;8497   
;;;8498   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8499   		{
;;;8500   		uavt_set_error_cnt=60;
;;;8501   		}
;;;8502   
;;;8503   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8504   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8505   	find_succes=1;
;;;8506   
;;;8507   	for(i=0;i<NUMIST;i++)
;;;8508   		{
;;;8509   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8510   		else
;;;8511   			{
;;;8512   			find_succes=0;
;;;8513   			avt_error_bps=i+1;
;;;8514   			break;
;;;8515   			}
;;;8516   		}
;;;8517   
;;;8518   	if(find_succes==1)
;;;8519   		{
;;;8520   		uavt_set_stat=uassSTEP3;
;;;8521   		uavt_bps_pntr=0;
0059b4  4f58              LDR      r7,|L1.23320|
0059b6  2a02              CMP      r2,#2                 ;8491
0059b8  d002              BEQ      |L1.22976|
;;;8522   		avt_plazma=0;
;;;8523   		}
;;;8524   
;;;8525   	if(uavt_set_error_cnt)
;;;8526   		{
;;;8527   		uavt_set_error_cnt--;
;;;8528   		if(!uavt_set_error_cnt)
;;;8529   			{
;;;8530   			uavt_set_stat=uassOFF;
;;;8531   			uavt_set_result_stat=uasrsERR;
;;;8532   			}
;;;8533   		}
;;;8534   	}
;;;8535   else if(uavt_set_stat==uassSTEP3)
0059ba  2a03              CMP      r2,#3
0059bc  d05e              BEQ      |L1.23164|
0059be  e0fb              B        |L1.23480|
                  |L1.22976|
0059c0  f9ba2000          LDRSH    r2,[r10,#0]           ;8495  ; U_AVT
0059c4  f04f0365          MOV      r3,#0x65              ;8495
0059c8  fb02f303          MUL      r3,r2,r3              ;8495
0059cc  fbb3f3fb          UDIV     r3,r3,r11             ;8495
0059d0  468a              MOV      r10,r1                ;8495
0059d2  800b              STRH     r3,[r1,#0]            ;8495
0059d4  eb021142          ADD      r1,r2,r2,LSL #5       ;8496
0059d8  eb010141          ADD      r1,r1,r1,LSL #1       ;8496
0059dc  fbb1f1fb          UDIV     r1,r1,r11             ;8496
0059e0  4683              MOV      r11,r0                ;8496
0059e2  8001              STRH     r1,[r0,#0]            ;8496
0059e4  f8980000          LDRB     r0,[r8,#0]            ;8498  ; uavt_set_stat_old
0059e8  2802              CMP      r0,#2                 ;8498
0059ea  d002              BEQ      |L1.23026|
0059ec  f04f003c          MOV      r0,#0x3c              ;8500
0059f0  7030              STRB     r0,[r6,#0]            ;8500
                  |L1.23026|
0059f2  230a              MOVS     r3,#0xa               ;8503
0059f4  21bf              MOVS     r1,#0xbf              ;8503
0059f6  20be              MOVS     r0,#0xbe              ;8503
0059f8  f7fffffe          BL       mess_send
0059fc  230a              MOVS     r3,#0xa               ;8504
0059fe  2200              MOVS     r2,#0                 ;8504
005a00  21e6              MOVS     r1,#0xe6              ;8504
005a02  20e1              MOVS     r0,#0xe1              ;8504
005a04  f7fffffe          BL       mess_send
005a08  f04f0201          MOV      r2,#1                 ;8505
005a0c  f04f0000          MOV      r0,#0                 ;8507
005a10  4943              LDR      r1,|L1.23328|
005a12  f9ba3000          LDRSH    r3,[r10,#0]           ;8507
005a16  f8dfe104          LDR      lr,|L1.23324|
005a1a  f9bbc000          LDRSH    r12,[r11,#0]          ;8509
005a1e  f9b1a000          LDRSH    r10,[r1,#0]           ;8507
005a22  e00d              B        |L1.23104|
                  |L1.23076|
005a24  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8509
005a28  eb011100          ADD      r1,r1,r0,LSL #4       ;8509
005a2c  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8509
005a30  69c9              LDR      r1,[r1,#0x1c]         ;8509
005a32  4299              CMP      r1,r3                 ;8509
005a34  da09              BGE      |L1.23114|
005a36  4561              CMP      r1,r12                ;8509
005a38  dd07              BLE      |L1.23114|
005a3a  f1000001          ADD      r0,r0,#1              ;8507
005a3e  b2c0              UXTB     r0,r0                 ;8507
                  |L1.23104|
005a40  4550              CMP      r0,r10                ;8507
005a42  dbef              BLT      |L1.23076|
                  |L1.23108|
005a44  2a01              CMP      r2,#1                 ;8518
005a46  d007              BEQ      |L1.23128|
005a48  e00c              B        |L1.23140|
                  |L1.23114|
005a4a  f04f0200          MOV      r2,#0                 ;8512
005a4e  492f              LDR      r1,|L1.23308|
005a50  f1000001          ADD      r0,r0,#1              ;8513
005a54  7008              STRB     r0,[r1,#0]            ;8513
005a56  e7f5              B        |L1.23108|
                  |L1.23128|
005a58  f04f0003          MOV      r0,#3                 ;8520
005a5c  7028              STRB     r0,[r5,#0]            ;8520
005a5e  703c              STRB     r4,[r7,#0]            ;8521
005a60  4830              LDR      r0,|L1.23332|
005a62  7004              STRB     r4,[r0,#0]            ;8522
                  |L1.23140|
005a64  7830              LDRB     r0,[r6,#0]            ;8525  ; uavt_set_error_cnt
005a66  b370              CBZ      r0,|L1.23238|
005a68  f1a00001          SUB      r0,r0,#1              ;8527
005a6c  b2c0              UXTB     r0,r0                 ;8527
005a6e  7030              STRB     r0,[r6,#0]            ;8527
005a70  bb48              CBNZ     r0,|L1.23238|
005a72  702c              STRB     r4,[r5,#0]            ;8530
005a74  4824              LDR      r0,|L1.23304|
005a76  f8809000          STRB     r9,[r0,#0]            ;8531
005a7a  e09d              B        |L1.23480|
                  |L1.23164|
;;;8536   	{
;;;8537   	char i,find_succes;
;;;8538   
;;;8539   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005a7c  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005a80  f04f0365          MOV      r3,#0x65
005a84  fb02f303          MUL      r3,r2,r3
005a88  fbb3f3fb          UDIV     r3,r3,r11
005a8c  468a              MOV      r10,r1
005a8e  800b              STRH     r3,[r1,#0]
;;;8540   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005a90  eb021142          ADD      r1,r2,r2,LSL #5
005a94  eb010141          ADD      r1,r1,r1,LSL #1
005a98  fbb1f1fb          UDIV     r1,r1,r11
005a9c  4683              MOV      r11,r0
005a9e  8001              STRH     r1,[r0,#0]
;;;8541   	
;;;8542   	if(uavt_set_stat_old!=uavt_set_stat)
005aa0  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005aa4  2803              CMP      r0,#3
005aa6  d000              BEQ      |L1.23210|
;;;8543   		{
;;;8544   		uavt_bps_pntr=0;
005aa8  703c              STRB     r4,[r7,#0]
                  |L1.23210|
;;;8545   		}
;;;8546   
;;;8547   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005aaa  230a              MOVS     r3,#0xa
005aac  21bf              MOVS     r1,#0xbf
005aae  20be              MOVS     r0,#0xbe
005ab0  f7fffffe          BL       mess_send
;;;8548   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005ab4  230a              MOVS     r3,#0xa
005ab6  2200              MOVS     r2,#0
005ab8  21e6              MOVS     r1,#0xe6
005aba  20e1              MOVS     r0,#0xe1
005abc  f7fffffe          BL       mess_send
;;;8549   
;;;8550   	find_succes=1;
005ac0  f04f0601          MOV      r6,#1
;;;8551   	for(i=0;i<NUMIST;i++)
005ac4  e030              B        |L1.23336|
                  |L1.23238|
005ac6  e077              B        |L1.23480|
                  |L1.23240|
                          DCD      BAT_C_POINT_5
                  |L1.23244|
                          DCD      BAT_C_POINT_10
                  |L1.23248|
                          DCD      BAT_C_POINT_20
                  |L1.23252|
                          DCD      BAT_K_OLD
                  |L1.23256|
                          DCD      0xfff0bdc0
                  |L1.23260|
                          DCD      Ib_ips_termokompensat
                  |L1.23264|
                          DCD      IKB
                  |L1.23268|
                          DCD      bat
                  |L1.23272|
                          DCD      out_U
                  |L1.23276|
                          DCD      u_necc_up
                  |L1.23280|
                          DCD      u_necc_dn
                  |L1.23284|
                          DCD      uavt_set_stat
                  |L1.23288|
                          DCD      uavt_set_error_cnt
                  |L1.23292|
                          DCD      uavt_set_stat_old
                  |L1.23296|
                          DCD      U_AVT
                  |L1.23300|
                          DCD      bps_U
                  |L1.23304|
                          DCD      uavt_set_result_stat
                  |L1.23308|
                          DCD      avt_error_bps
                  |L1.23312|
                          DCD      u_max_temp
                  |L1.23316|
                          DCD      u_min_temp
                  |L1.23320|
                          DCD      uavt_bps_pntr
                  |L1.23324|
                          DCD      bps
                  |L1.23328|
                          DCD      NUMIST
                  |L1.23332|
                          DCD      avt_plazma
                  |L1.23336|
005b28  f04f0000          MOV      r0,#0
005b2c  f8df942c          LDR      r9,|L1.24412|
005b30  f9ba2000          LDRSH    r2,[r10,#0]
005b34  f8dfc420          LDR      r12,|L1.24408|
005b38  f9bb3000          LDRSH    r3,[r11,#0]           ;8509
005b3c  f9b9a000          LDRSH    r10,[r9,#0]           ;8507
005b40  e00d              B        |L1.23390|
                  |L1.23362|
;;;8552   		{
;;;8553   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005b42  eb0001c0          ADD      r1,r0,r0,LSL #3
005b46  eb011100          ADD      r1,r1,r0,LSL #4
005b4a  eb0c0181          ADD      r1,r12,r1,LSL #2
005b4e  69c9              LDR      r1,[r1,#0x1c]
005b50  4291              CMP      r1,r2
005b52  da0f              BGE      |L1.23412|
005b54  4299              CMP      r1,r3
005b56  dd0d              BLE      |L1.23412|
005b58  f1000001          ADD      r0,r0,#1              ;8551
005b5c  b2c0              UXTB     r0,r0                 ;8551
                  |L1.23390|
005b5e  4550              CMP      r0,r10                ;8551
005b60  dbef              BLT      |L1.23362|
                  |L1.23394|
;;;8554   		else
;;;8555   			{
;;;8556   			find_succes=0;
;;;8557   			break;
;;;8558   			}
;;;8559   		}
;;;8560   
;;;8561   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005b62  20d7              MOVS     r0,#0xd7
005b64  f7fffffe          BL       mess_find
005b68  b1a0              CBZ      r0,|L1.23444|
005b6a  48fd              LDR      r0,|L1.24416|
005b6c  6800              LDR      r0,[r0,#0]  ; mess_data
005b6e  28d9              CMP      r0,#0xd9
005b70  d003              BEQ      |L1.23418|
005b72  e00f              B        |L1.23444|
                  |L1.23412|
005b74  f04f0600          MOV      r6,#0                 ;8556
005b78  e7f3              B        |L1.23394|
                  |L1.23418|
;;;8562   		{
;;;8563   		if(++uavt_bps_pntr>=NUMIST)
005b7a  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005b7c  1c40              ADDS     r0,r0,#1
005b7e  b2c0              UXTB     r0,r0
005b80  7038              STRB     r0,[r7,#0]
005b82  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005b86  4288              CMP      r0,r1
005b88  db04              BLT      |L1.23444|
;;;8564   			{
;;;8565   			uavt_set_stat=uassOFF;
005b8a  702c              STRB     r4,[r5,#0]
;;;8566   			uavt_set_result_stat=uasrsSUCCESS;
005b8c  49f5              LDR      r1,|L1.24420|
005b8e  f04f0003          MOV      r0,#3
005b92  7008              STRB     r0,[r1,#0]
                  |L1.23444|
;;;8567   			}
;;;8568   		//uavt_bps_pntr++;
;;;8569   		//if()
;;;8570   		}
;;;8571   	if(find_succes==1)
005b94  2e01              CMP      r6,#1
005b96  d10f              BNE      |L1.23480|
;;;8572   		{
;;;8573   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005b98  20ee              MOVS     r0,#0xee
005b9a  e9cd0400          STRD     r0,r4,[sp,#0]
005b9e  9402              STR      r4,[sp,#8]
005ba0  9403              STR      r4,[sp,#0xc]
005ba2  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
005ba4  4603              MOV      r3,r0
005ba6  2216              MOVS     r2,#0x16
005ba8  4608              MOV      r0,r1
005baa  f7fffffe          BL       mcp2515_transmit
;;;8574   		avt_plazma++;
005bae  48ee              LDR      r0,|L1.24424|
005bb0  7801              LDRB     r1,[r0,#0]  ; avt_plazma
005bb2  f1010101          ADD      r1,r1,#1
005bb6  7001              STRB     r1,[r0,#0]
                  |L1.23480|
;;;8575   		}
;;;8576   	}
;;;8577   
;;;8578   
;;;8579   
;;;8580   uavt_set_stat_old=uavt_set_stat;
005bb8  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005bba  f8880000          STRB     r0,[r8,#0]
;;;8581   
;;;8582   }
005bbe  e8bd9fff          POP      {r0-r12,pc}
;;;8583   
                          ENDP

                  u_necc_hndl PROC
;;;8658   //-----------------------------------------------
;;;8659   void u_necc_hndl(void)
005bc2  b5f8              PUSH     {r3-r7,lr}
;;;8660   {
;;;8661   signed long temp_L;
;;;8662   signed long temp_SL;
;;;8663   //signed short temp_SS;
;;;8664   
;;;8665   //char i;
;;;8666   
;;;8667   //temp_SS=0;
;;;8668   signed short t[2];
;;;8669   
;;;8670   
;;;8671   
;;;8672   
;;;8673   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8674   
;;;8675   if(!TERMOKOMPENS)
005bc4  48e9              LDR      r0,|L1.24428|
;;;8676   	{
;;;8677   	//u_necc=U0B;
;;;8678   	u_necc=UB20;
;;;8679   	}
;;;8680   else
;;;8681   	{
;;;8682   	if(ND_EXT[0])t[0]=20;
;;;8683   	else t[0]=t_ext[0];
;;;8684   
;;;8685   	mat_temper=t[0];
;;;8686   			
;;;8687   	if(mat_temper<0)temp_SL=UB0; 
;;;8688   	else 
;;;8689   		{
;;;8690   		if(mat_temper>40)mat_temper=40; 
;;;8691   		temp_SL=(UB20-UB0)*10;
;;;8692   		temp_SL*=mat_temper;
;;;8693   		temp_SL/=200;
;;;8694   		temp_SL+=UB0;
;;;8695   		}
;;;8696   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005bc6  4dec              LDR      r5,|L1.24440|
005bc8  4cec              LDR      r4,|L1.24444|
005bca  8801              LDRH     r1,[r0,#0]            ;8675  ; TERMOKOMPENS
005bcc  48e8              LDR      r0,|L1.24432|
005bce  f9b03000          LDRSH    r3,[r0,#0]            ;8678
;;;8697   		{
;;;8698   		temp_SL=UVZ;
005bd2  48e8              LDR      r0,|L1.24436|
005bd4  f9b02000          LDRSH    r2,[r0,#0]
005bd8  b139              CBZ      r1,|L1.23530|
005bda  48e9              LDR      r0,|L1.24448|
005bdc  7800              LDRB     r0,[r0,#0]            ;8682  ; ND_EXT
005bde  b130              CBZ      r0,|L1.23534|
005be0  f04f0014          MOV      r0,#0x14              ;8682
005be4  f8ad0000          STRH     r0,[sp,#0]            ;8682
005be8  e005              B        |L1.23542|
                  |L1.23530|
005bea  8023              STRH     r3,[r4,#0]            ;8678
005bec  e02c              B        |L1.23624|
                  |L1.23534|
005bee  48e5              LDR      r0,|L1.24452|
005bf0  8800              LDRH     r0,[r0,#0]            ;8683  ; t_ext
005bf2  f8ad0000          STRH     r0,[sp,#0]            ;8683
                  |L1.23542|
005bf6  4ee4              LDR      r6,|L1.24456|
005bf8  f9bd1000          LDRSH    r1,[sp,#0]            ;8685
005bfc  6031              STR      r1,[r6,#0]            ;8685  ; mat_temper
005bfe  48e3              LDR      r0,|L1.24460|
005c00  2900              CMP      r1,#0                 ;8687
005c02  f9b00000          LDRSH    r0,[r0,#0]            ;8687
005c06  db12              BLT      |L1.23598|
005c08  2928              CMP      r1,#0x28              ;8690
005c0a  dd02              BLE      |L1.23570|
005c0c  f04f0128          MOV      r1,#0x28              ;8690
005c10  6031              STR      r1,[r6,#0]            ;8690  ; mat_temper
                  |L1.23570|
005c12  eba30100          SUB      r1,r3,r0              ;8691
005c16  eb010181          ADD      r1,r1,r1,LSL #2       ;8691
005c1a  ea4f0141          LSL      r1,r1,#1              ;8691
005c1e  6833              LDR      r3,[r6,#0]            ;8692  ; mat_temper
005c20  fb01f103          MUL      r1,r1,r3              ;8692
005c24  f04f03c8          MOV      r3,#0xc8              ;8693
005c28  fb91f1f3          SDIV     r1,r1,r3              ;8693
005c2c  4408              ADD      r0,r0,r1              ;8694
                  |L1.23598|
005c2e  f8951023          LDRB     r1,[r5,#0x23]         ;8696  ; spc_stat
005c32  2902              CMP      r1,#2                 ;8696
005c34  d107              BNE      |L1.23622|
005c36  49d6              LDR      r1,|L1.24464|
005c38  7809              LDRB     r1,[r1,#0]            ;8696  ; sk_stat
005c3a  2901              CMP      r1,#1                 ;8696
005c3c  d002              BEQ      |L1.23620|
005c3e  49d5              LDR      r1,|L1.24468|
005c40  8809              LDRH     r1,[r1,#0]            ;8696  ; VZ_CH_VENT_BLOK
005c42  b901              CBNZ     r1,|L1.23622|
                  |L1.23620|
005c44  4610              MOV      r0,r2
                  |L1.23622|
;;;8699   		}
;;;8700   	u_necc=(unsigned int)temp_SL;
005c46  8020              STRH     r0,[r4,#0]
                  |L1.23624|
;;;8701   	///u_necc=3456;
;;;8702   	}  
;;;8703   
;;;8704   //u_necc=2355;
;;;8705   
;;;8706   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005c48  48d3              LDR      r0,|L1.24472|
005c4a  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005c4c  b918              CBNZ     r0,|L1.23638|
005c4e  48d3              LDR      r0,|L1.24476|
005c50  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005c52  2802              CMP      r0,#2
005c54  d102              BNE      |L1.23644|
                  |L1.23638|
;;;8707   	{
;;;8708   	u_necc=speedChrgVolt;
005c56  48d2              LDR      r0,|L1.24480|
005c58  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005c5a  8020              STRH     r0,[r4,#0]
                  |L1.23644|
;;;8709   	}
;;;8710   if(hv_vz_stat==hvsWRK)
005c5c  48d1              LDR      r0,|L1.24484|
005c5e  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005c60  2805              CMP      r0,#5
005c62  d100              BNE      |L1.23654|
;;;8711   	{
;;;8712   	u_necc=UVZ;
005c64  8022              STRH     r2,[r4,#0]
                  |L1.23654|
;;;8713   	}
;;;8714   if(vz1_stat==vz1sWRK)
005c66  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005c68  280a              CMP      r0,#0xa
005c6a  d102              BNE      |L1.23666|
;;;8715   	{
;;;8716   	u_necc=UZ_U;
005c6c  48ce              LDR      r0,|L1.24488|
005c6e  8800              LDRH     r0,[r0,#0]  ; UZ_U
005c70  8020              STRH     r0,[r4,#0]
                  |L1.23666|
;;;8717   	}
;;;8718   if(vz2_stat==vz2sWRK1)
005c72  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005c74  280a              CMP      r0,#0xa
005c76  d102              BNE      |L1.23678|
;;;8719   	{
;;;8720   	u_necc=FZ_U1;
005c78  49cc              LDR      r1,|L1.24492|
005c7a  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005c7c  8021              STRH     r1,[r4,#0]
                  |L1.23678|
;;;8721   	}
;;;8722   if(vz2_stat==vz2sWRK2)
005c7e  280b              CMP      r0,#0xb
005c80  d102              BNE      |L1.23688|
;;;8723   	{
;;;8724   	u_necc=FZ_U2;
005c82  48cb              LDR      r0,|L1.24496|
005c84  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005c86  8020              STRH     r0,[r4,#0]
                  |L1.23688|
;;;8725   	}
;;;8726   
;;;8727   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005c88  48ca              LDR      r0,|L1.24500|
005c8a  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005c8c  2801              CMP      r0,#1
005c8e  d001              BEQ      |L1.23700|
005c90  2802              CMP      r0,#2
005c92  d102              BNE      |L1.23706|
                  |L1.23700|
;;;8728   	{
;;;8729   	u_necc=U_AVT;
005c94  48c8              LDR      r0,|L1.24504|
005c96  8800              LDRH     r0,[r0,#0]  ; U_AVT
005c98  8020              STRH     r0,[r4,#0]
                  |L1.23706|
;;;8730   	}
;;;8731   
;;;8732   if(mess_find_unvol(MESS2UNECC_HNDL))
005c9a  20be              MOVS     r0,#0xbe
005c9c  f7fffffe          BL       mess_find_unvol
005ca0  b128              CBZ      r0,|L1.23726|
;;;8733   	{		
;;;8734   	if(mess_data[0]==PARAM_UNECC_SET)
005ca2  48af              LDR      r0,|L1.24416|
005ca4  6801              LDR      r1,[r0,#0]  ; mess_data
005ca6  29bf              CMP      r1,#0xbf
005ca8  d101              BNE      |L1.23726|
;;;8735   		{
;;;8736   		u_necc=mess_data[1];
005caa  6840              LDR      r0,[r0,#4]  ; mess_data
005cac  8020              STRH     r0,[r4,#0]
                  |L1.23726|
;;;8737   		}		
;;;8738   	} 
;;;8739   
;;;8740   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8741   #endif
;;;8742   
;;;8743   
;;;8744   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8745   
;;;8746   #ifndef UKU_TELECORE2015
;;;8747   #ifndef UKU_TELECORE2017
;;;8748   if(unh_cnt0<10)
;;;8749   	{
;;;8750   	unh_cnt0++;
;;;8751   	if(unh_cnt0>=10)
;;;8752   		{
;;;8753   		unh_cnt0=0;
;;;8754   		b1Hz_unh=1;
;;;8755   		}
;;;8756   	}
;;;8757   
;;;8758   if(unh_cnt1<5)
;;;8759   	{
;;;8760   	unh_cnt1++;
;;;8761   	if(unh_cnt1==5)
;;;8762   		{
;;;8763   		unh_cnt1=0;
;;;8764   //		b2Hz_unh=1;
;;;8765   		}
;;;8766   	} 
;;;8767   
;;;8768   
;;;8769   
;;;8770   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8771   	{		
;;;8772   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8773   		{
;;;8774   		u_necc=mess_data[1];
;;;8775   		}		
;;;8776   	}
;;;8777   
;;;8778   
;;;8779   else if(b1Hz_unh)
;;;8780   	{
;;;8781   	
;;;8782   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8783   		{
;;;8784   		
;;;8785   		u_necc=U0B;
;;;8786   		#ifdef IPS_SGEP_GAZPROM
;;;8787   		u_necc=UB0;
;;;8788   		#endif
;;;8789   		}
;;;8790   	else 
;;;8791   		{
;;;8792   		if(BAT_TYPE==0) //если батарея обычная
;;;8793   			{
;;;8794   			for(i=0;i<2;i++)
;;;8795   				{
;;;8796   				if(BAT_IS_ON[i]==bisON)
;;;8797   					{
;;;8798   					if(bat[i]._nd)t[i]=20;
;;;8799   					else t[i]=bat[i]._Tb;
;;;8800   					}
;;;8801   				else
;;;8802   					{
;;;8803   					t[i]=-20;
;;;8804   					}
;;;8805   				}
;;;8806   			if(t[0]>t[1])mat_temper=t[0];
;;;8807   			else mat_temper=t[1];
;;;8808   			
;;;8809   		
;;;8810   			if(mat_temper<0)temp_SL=UB0; 
;;;8811   			else 
;;;8812   				{
;;;8813   				if(mat_temper>40)mat_temper=40; 
;;;8814   				temp_SL=(UB20-UB0)*10;
;;;8815   				temp_SL*=mat_temper;
;;;8816   				temp_SL/=200;
;;;8817   				temp_SL+=UB0;
;;;8818   				}
;;;8819   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8820   				{
;;;8821   				temp_SL=UVZ;
;;;8822   				}
;;;8823   			u_necc=(unsigned int)temp_SL;
;;;8824   			}
;;;8825   		else if(BAT_TYPE==1) //если батарея китайская
;;;8826   			{
;;;8827   			u_necc=U0B;
;;;8828   					
;;;8829   			u_necc=bat[0]._Ub+10;
;;;8830   
;;;8831   			
;;;8832   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8833   				{
;;;8834   				u_necc=UVZ;
;;;8835   				}
;;;8836   			if(u_necc>=UB0) u_necc=UB0;
;;;8837   			if(u_necc>=UB20) u_necc=UB20;
;;;8838   			}
;;;8839   		}  
;;;8840   	}
;;;8841   #endif
;;;8842   #endif
;;;8843   
;;;8844   #ifdef UKU_TELECORE2015
;;;8845   
;;;8846   if(unh_cnt0<10)
;;;8847   	{
;;;8848   	unh_cnt0++;
;;;8849   	if(unh_cnt0>=10)
;;;8850   		{
;;;8851   		unh_cnt0=0;
;;;8852   		b1Hz_unh=1;
;;;8853   		}
;;;8854   	}
;;;8855   
;;;8856   if(unh_cnt1<5)
;;;8857   	{
;;;8858   	unh_cnt1++;
;;;8859   	if(unh_cnt1==5)
;;;8860   		{
;;;8861   		unh_cnt1=0;
;;;8862   //		b2Hz_unh=1;
;;;8863   		}
;;;8864   	} 
;;;8865   
;;;8866   
;;;8867   
;;;8868   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8869   	{		
;;;8870   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8871   		{
;;;8872   		u_necc=mess_data[1];
;;;8873   		}		
;;;8874   	}
;;;8875   
;;;8876   
;;;8877   else if(b1Hz_unh)
;;;8878   	{
;;;8879   	b1Hz_unh=0;
;;;8880   
;;;8881   	if(BAT_TYPE==0)
;;;8882   		{
;;;8883   		if(bat[0]._nd)mat_temper=20;
;;;8884   		else mat_temper=bat[0]._Tb;
;;;8885   
;;;8886   			
;;;8887   		if(mat_temper<0)temp_SL=UB0; 
;;;8888   		else 
;;;8889   			{
;;;8890   			if(mat_temper>40)mat_temper=40; 
;;;8891   			temp_SL=(UB20-UB0)*10;
;;;8892   			temp_SL*=mat_temper;
;;;8893   			temp_SL/=200;
;;;8894   			temp_SL+=UB0;
;;;8895   			}
;;;8896   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8897   			{
;;;8898   			temp_SL=UVZ;
;;;8899   			}
;;;8900   		u_necc=(unsigned int)temp_SL;
;;;8901   	///u_necc=3456;
;;;8902   		}
;;;8903   	else if(BAT_TYPE==1)
;;;8904   		{
;;;8905   		
;;;8906   		gran(&DU_LI_BAT,1,30);
;;;8907   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8908   		gran(&u_necc,0,UB0);
;;;8909   		gran(&u_necc,0,UB20);
;;;8910   		gran(&u_necc,0,540);		
;;;8911   
;;;8912   
;;;8913   		if(li_bat._batStat!=bsOK)
;;;8914   			{
;;;8915   			u_necc=U0B;
;;;8916   			}
;;;8917   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8918   			{
;;;8919   			u_necc=UVZ;
;;;8920   			}
;;;8921   		/* 
;;;8922   		u_necc=U0B;
;;;8923   		
;;;8924   
;;;8925   	
;;;8926   		u_necc=UB0;
;;;8927   		u_necc=li_bat._Ub+10;
;;;8928   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8929   			{
;;;8930   			lakb_error_cnt++;
;;;8931   			if(lakb_error_cnt>=30)
;;;8932   				{
;;;8933   				lakb_error_cnt=30;
;;;8934   				u_necc=U0B;
;;;8935   				}
;;;8936   			}
;;;8937   		else lakb_error_cnt=0;*/
;;;8938   		}
;;;8939   	else if(BAT_TYPE==2)
;;;8940   		{
;;;8941   		u_necc=U0B;
;;;8942   		
;;;8943   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8944   			{
;;;8945   			u_necc=UVZ;
;;;8946   			}
;;;8947   	
;;;8948   		u_necc=UB0;
;;;8949   		}
;;;8950   
;;;8951   	else if(BAT_TYPE==3)
;;;8952   		{
;;;8953   		u_necc=U0B;
;;;8954   		
;;;8955   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8956   			{
;;;8957   			u_necc=UVZ;
;;;8958   			}
;;;8959   
;;;8960   		gran(&DU_LI_BAT,1,30);
;;;8961   
;;;8962   
;;;8963   		if(lakbNotErrorNum==0)
;;;8964   			{
;;;8965   			u_necc=U0B;
;;;8966   			}
;;;8967   		else 
;;;8968   			{
;;;8969   			signed short i;
;;;8970   			//signed short u_necc_max;
;;;8971   			//u_necc_max=0;
;;;8972   			char soc_flag=0;
;;;8973   
;;;8974   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8975   				{
;;;8976   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8977   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8978   				}
;;;8979   
;;;8980   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8981   			}
;;;8982   		gran(&u_necc,0,UB0);
;;;8983   		//gran(&u_necc,0,UB20);
;;;8984   		gran(&u_necc,0,540);
;;;8985   		}
;;;8986   	}
;;;8987   
;;;8988   #endif 
;;;8989   
;;;8990   #ifdef UKU_TELECORE2017
;;;8991   
;;;8992   if(unh_cnt0<10)
;;;8993   	{
;;;8994   	unh_cnt0++;
;;;8995   	if(unh_cnt0>=10)
;;;8996   		{
;;;8997   		unh_cnt0=0;
;;;8998   		b1Hz_unh=1;
;;;8999   		}
;;;9000   	}
;;;9001   
;;;9002   if(unh_cnt1<5)
;;;9003   	{
;;;9004   	unh_cnt1++;
;;;9005   	if(unh_cnt1==5)
;;;9006   		{
;;;9007   		unh_cnt1=0;
;;;9008   //		b2Hz_unh=1;
;;;9009   		}
;;;9010   	} 
;;;9011   
;;;9012   
;;;9013   
;;;9014   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;9015   	{		
;;;9016   	if(mess_data[0]==PARAM_UNECC_SET)
;;;9017   		{
;;;9018   		u_necc=mess_data[1];
;;;9019   		}		
;;;9020   	}
;;;9021   
;;;9022   
;;;9023   else if(b1Hz_unh)
;;;9024   	{
;;;9025   	b1Hz_unh=0;
;;;9026   
;;;9027   	if(BAT_TYPE==0)
;;;9028   		{
;;;9029   		if(bat[0]._nd)mat_temper=20;
;;;9030   		else mat_temper=bat[0]._Tb;
;;;9031   
;;;9032   			
;;;9033   		if(mat_temper<0)temp_SL=UB0; 
;;;9034   		else 
;;;9035   			{
;;;9036   			if(mat_temper>40)mat_temper=40; 
;;;9037   			temp_SL=(UB20-UB0)*10;
;;;9038   			temp_SL*=mat_temper;
;;;9039   			temp_SL/=200;
;;;9040   			temp_SL+=UB0;
;;;9041   			}
;;;9042   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9043   			{
;;;9044   			temp_SL=UVZ;
;;;9045   			}
;;;9046   		u_necc=(unsigned int)temp_SL;
;;;9047   	///u_necc=3456;
;;;9048   		}
;;;9049   	else if(BAT_TYPE==1)
;;;9050   		{
;;;9051   		
;;;9052   		gran(&DU_LI_BAT,1,30);
;;;9053   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9054   		gran(&u_necc,0,UB0);
;;;9055   		gran(&u_necc,0,UB20);
;;;9056   		gran(&u_necc,0,540);		
;;;9057   
;;;9058   
;;;9059   		if(li_bat._batStat!=bsOK)
;;;9060   			{
;;;9061   			u_necc=U0B;
;;;9062   			}
;;;9063   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9064   			{
;;;9065   			u_necc=UVZ;
;;;9066   			}
;;;9067   		}
;;;9068   	else if(BAT_TYPE==2)
;;;9069   		{
;;;9070   		u_necc=U0B;
;;;9071   		
;;;9072   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9073   			{
;;;9074   			u_necc=UVZ;
;;;9075   			}
;;;9076   	
;;;9077   		u_necc=UB0;
;;;9078   		}
;;;9079   
;;;9080   	else if(BAT_TYPE==3)
;;;9081   		{
;;;9082   		u_necc=U0B;
;;;9083   		
;;;9084   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9085   			{
;;;9086   			u_necc=UVZ;
;;;9087   			}
;;;9088   
;;;9089   		gran(&DU_LI_BAT,1,30);
;;;9090   
;;;9091   
;;;9092   		if(lakbNotErrorNum==0)
;;;9093   			{
;;;9094   			u_necc=U0B;
;;;9095   			}
;;;9096   		else 
;;;9097   			{
;;;9098   			signed short i;
;;;9099   			//signed short u_necc_max;
;;;9100   			//u_necc_max=0;
;;;9101   			char soc_flag=0;
;;;9102   
;;;9103   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9104   				{
;;;9105   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9106   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9107   				}
;;;9108   
;;;9109   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9110   			}
;;;9111   		gran(&u_necc,0,UB0);
;;;9112   		//gran(&u_necc,0,UB20);
;;;9113   		gran(&u_necc,0,540);
;;;9114   		}
;;;9115   	}
;;;9116   
;;;9117   #endif 
;;;9118   //u_necc=2356;
;;;9119   
;;;9120   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9121   	{
;;;9122   	u_necc=speedChrgVolt;
;;;9123   	}
;;;9124   #endif//gran(&u_necc,400,UMAX);
;;;9125   
;;;9126   
;;;9127   
;;;9128   temp_L=(signed long) u_necc;
005cae  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9129   temp_L*=98L;
005cb2  f04f0162          MOV      r1,#0x62
005cb6  fb00f101          MUL      r1,r0,r1
;;;9130   temp_L/=100L;
005cba  f04f0264          MOV      r2,#0x64
005cbe  fb91f1f2          SDIV     r1,r1,r2
;;;9131   u_necc_dn=(signed short)temp_L;
005cc2  4bbe              LDR      r3,|L1.24508|
005cc4  8019              STRH     r1,[r3,#0]
;;;9132   
;;;9133   temp_L=(signed long) u_necc;
;;;9134   temp_L*=102L;
005cc6  f04f0166          MOV      r1,#0x66
005cca  fb00f001          MUL      r0,r0,r1
;;;9135   temp_L/=100L;
005cce  fb90f0f2          SDIV     r0,r0,r2
;;;9136   u_necc_up=(signed short)temp_L;
005cd2  49bb              LDR      r1,|L1.24512|
005cd4  8008              STRH     r0,[r1,#0]
;;;9137   /*
;;;9138   #ifdef IPS_SGEP_GAZPROM
;;;9139   u_necc=248;
;;;9140   #endif */
;;;9141   }
005cd6  bdf8              POP      {r3-r7,pc}
;;;9142   
                          ENDP

                  num_necc_hndl PROC
;;;9144   //-----------------------------------------------
;;;9145   void num_necc_hndl(void)
005cd8  e92d41f0          PUSH     {r4-r8,lr}
;;;9146   {
;;;9147   
;;;9148   static short num_necc_block_cnt;
;;;9149   if(num_necc_block_cnt) num_necc_block_cnt--;
005cdc  4ca6              LDR      r4,|L1.24440|
005cde  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005ce2  b110              CBZ      r0,|L1.23786|
005ce4  f1a00001          SUB      r0,r0,#1
005ce8  8720              STRH     r0,[r4,#0x38]
                  |L1.23786|
;;;9150   
;;;9151   Isumm_=Isumm;
005cea  48b6              LDR      r0,|L1.24516|
005cec  4db6              LDR      r5,|L1.24520|
005cee  8800              LDRH     r0,[r0,#0]  ; Isumm
005cf0  8028              STRH     r0,[r5,#0]
;;;9152   
;;;9153   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005cf2  4eb6              LDR      r6,|L1.24524|
005cf4  270a              MOVS     r7,#0xa
005cf6  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005cfa  2800              CMP      r0,#0
005cfc  da06              BGE      |L1.23820|
005cfe  f7fffffe          BL       abs
005d02  fb90f0f7          SDIV     r0,r0,r7
005d06  8829              LDRH     r1,[r5,#0]  ; Isumm_
005d08  4408              ADD      r0,r0,r1
005d0a  8028              STRH     r0,[r5,#0]
                  |L1.23820|
;;;9154   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005d0c  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
005d10  2800              CMP      r0,#0
005d12  da06              BGE      |L1.23842|
005d14  f7fffffe          BL       abs
005d18  fb90f0f7          SDIV     r0,r0,r7
005d1c  8829              LDRH     r1,[r5,#0]  ; Isumm_
005d1e  4408              ADD      r0,r0,r1
005d20  8028              STRH     r0,[r5,#0]
                  |L1.23842|
;;;9155   
;;;9156   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005d22  49ab              LDR      r1,|L1.24528|
005d24  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005d28  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005d2c  fb90f1f1          SDIV     r1,r0,r1
005d30  f1010101          ADD      r1,r1,#1
005d34  b2c9              UXTB     r1,r1
005d36  77e1              STRB     r1,[r4,#0x1f]
;;;9157   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9158   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9159   
;;;9160   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005d38  4aa6              LDR      r2,|L1.24532|
005d3a  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005d3e  fb90f0f2          SDIV     r0,r0,r2
005d42  f1000001          ADD      r0,r0,#1
005d46  b2c2              UXTB     r2,r0
005d48  f8842020          STRB     r2,[r4,#0x20]
;;;9161   
;;;9162   if(num_necc_up>num_necc)
005d4c  48a2              LDR      r0,|L1.24536|
;;;9163   	{
;;;9164   	num_necc=num_necc_up;
;;;9165   	num_necc_block_cnt=60;
005d4e  f04f053c          MOV      r5,#0x3c
005d52  f9b03000          LDRSH    r3,[r0,#0]            ;9162  ; num_necc
005d56  4299              CMP      r1,r3                 ;9162
005d58  dd02              BLE      |L1.23904|
005d5a  8001              STRH     r1,[r0,#0]            ;9164
005d5c  8725              STRH     r5,[r4,#0x38]
005d5e  e005              B        |L1.23916|
                  |L1.23904|
;;;9166   	}
;;;9167   else if(num_necc_down<num_necc)
005d60  429a              CMP      r2,r3
005d62  da03              BGE      |L1.23916|
;;;9168   	{
;;;9169   	if(!num_necc_block_cnt)
005d64  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005d66  b909              CBNZ     r1,|L1.23916|
;;;9170   		{
;;;9171   		num_necc=num_necc_down;
005d68  8002              STRH     r2,[r0,#0]
;;;9172   		num_necc_block_cnt=60;
005d6a  8725              STRH     r5,[r4,#0x38]
                  |L1.23916|
;;;9173   		}
;;;9174   	}
;;;9175   
;;;9176   if(PAR) num_necc=NUMIST;
005d6c  499b              LDR      r1,|L1.24540|
005d6e  880a              LDRH     r2,[r1,#0]  ; PAR
005d70  497a              LDR      r1,|L1.24412|
005d72  b10a              CBZ      r2,|L1.23928|
005d74  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d76  8002              STRH     r2,[r0,#0]
                  |L1.23928|
;;;9177   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9178   if(bPARALLEL) num_necc=NUMIST;
005d78  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005d7c  b10a              CBZ      r2,|L1.23938|
005d7e  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d80  8002              STRH     r2,[r0,#0]
                  |L1.23938|
;;;9179   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005d82  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005d84  2a0a              CMP      r2,#0xa
005d86  d101              BNE      |L1.23948|
005d88  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d8a  8002              STRH     r2,[r0,#0]
                  |L1.23948|
;;;9180   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005d8c  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005d8e  2a0a              CMP      r2,#0xa
005d90  d001              BEQ      |L1.23958|
005d92  2a0b              CMP      r2,#0xb
005d94  d101              BNE      |L1.23962|
                  |L1.23958|
005d96  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d98  8002              STRH     r2,[r0,#0]
                  |L1.23962|
;;;9181   #endif
;;;9182   
;;;9183   gran(&num_necc,1,NUMIST);
005d9a  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005d9e  e8bd41f0          POP      {r4-r8,lr}
005da2  2101              MOVS     r1,#1
005da4  488c              LDR      r0,|L1.24536|
005da6  f7ffbffe          B.W      gran
;;;9184   
;;;9185   }
;;;9186   
                          ENDP

                  cntrl_hndl PROC
;;;9189   //-----------------------------------------------
;;;9190   void cntrl_hndl(void)
005daa  e92d5ff0          PUSH     {r4-r12,lr}
;;;9191   {
;;;9192   
;;;9193   
;;;9194   
;;;9195   IZMAX_=IZMAX;
005dae  488c              LDR      r0,|L1.24544|
005db0  4c71              LDR      r4,|L1.24440|
005db2  8800              LDRH     r0,[r0,#0]  ; IZMAX
005db4  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9196   
;;;9197   //cntrl_hndl_plazma=10;
;;;9198   
;;;9199   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005db8  4877              LDR      r0,|L1.24472|
005dba  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005dbc  b918              CBNZ     r0,|L1.24006|
005dbe  4877              LDR      r0,|L1.24476|
005dc0  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005dc2  2802              CMP      r0,#2
005dc4  d103              BNE      |L1.24014|
                  |L1.24006|
005dc6  4887              LDR      r0,|L1.24548|
005dc8  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005dca  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24014|
;;;9200   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005dce  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005dd0  280a              CMP      r0,#0xa
005dd2  d103              BNE      |L1.24028|
005dd4  4884              LDR      r0,|L1.24552|
005dd6  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005dd8  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24028|
;;;9201   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005ddc  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005dde  280a              CMP      r0,#0xa
005de0  d103              BNE      |L1.24042|
005de2  4982              LDR      r1,|L1.24556|
005de4  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005de6  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.24042|
;;;9202   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005dea  280b              CMP      r0,#0xb
005dec  d103              BNE      |L1.24054|
005dee  4880              LDR      r0,|L1.24560|
005df0  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005df2  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24054|
;;;9203   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9204   
;;;9205   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005df6  f9b40070          LDRSH    r0,[r4,#0x70]  ; cntrl_stat_blok_cnt
005dfa  b118              CBZ      r0,|L1.24068|
005dfc  f1a00001          SUB      r0,r0,#1
005e00  f8a40070          STRH     r0,[r4,#0x70]
                  |L1.24068|
;;;9206   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005e04  f9b40072          LDRSH    r0,[r4,#0x72]  ; cntrl_stat_blok_cnt_
005e08  b118              CBZ      r0,|L1.24082|
005e0a  f1a00001          SUB      r0,r0,#1
005e0e  f8a40072          STRH     r0,[r4,#0x72]
                  |L1.24082|
;;;9207   
;;;9208   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005e12  486e              LDR      r0,|L1.24524|
005e14  f04f080a          MOV      r8,#0xa               ;9200
005e18  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005e1c  0789              LSLS     r1,r1,#30
005e1e  d103              BNE      |L1.24104|
005e20  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005e24  0780              LSLS     r0,r0,#30
005e26  d005              BEQ      |L1.24116|
                  |L1.24104|
005e28  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005e2c  fbb0f0f8          UDIV     r0,r0,r8
005e30  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24116|
;;;9209   
;;;9210   
;;;9211   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9212   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005e34  486f              LDR      r0,|L1.24564|
005e36  2601              MOVS     r6,#1
005e38  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005e3c  1e49              SUBS     r1,r1,#1
005e3e  2905              CMP      r1,#5
005e40  d300              BCC      |L1.24132|
005e42  8006              STRH     r6,[r0,#0]
                  |L1.24132|
;;;9213   if(ch_cnt0<(10*REG_SPEED))
005e44  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005e48  2500              MOVS     r5,#0                 ;9199
005e4a  eb000180          ADD      r1,r0,r0,LSL #2
005e4e  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
005e50  ebb00f41          CMP      r0,r1,LSL #1
005e54  da08              BGE      |L1.24168|
;;;9214   	{
;;;9215   	ch_cnt0++;
005e56  f1000001          ADD      r0,r0,#1
005e5a  b2c0              UXTB     r0,r0
005e5c  7560              STRB     r0,[r4,#0x15]
;;;9216   	if(ch_cnt0>=10*REG_SPEED)
005e5e  ebb00f41          CMP      r0,r1,LSL #1
005e62  db01              BLT      |L1.24168|
;;;9217   		{
;;;9218   		ch_cnt0=0;
005e64  7565              STRB     r5,[r4,#0x15]
;;;9219   		b1Hz_ch=1;
005e66  75a6              STRB     r6,[r4,#0x16]
                  |L1.24168|
;;;9220   		}
;;;9221   	}
;;;9222   #endif
;;;9223   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9224   if(ch_cnt0<10)
;;;9225   	{
;;;9226   	ch_cnt0++;
;;;9227   	if(ch_cnt0>=10)
;;;9228   		{
;;;9229   		ch_cnt0=0;
;;;9230   		b1Hz_ch=1;
;;;9231   		}
;;;9232   	}
;;;9233   #endif
;;;9234   
;;;9235   
;;;9236   if(mess_find_unvol(MESS2CNTRL_HNDL))
005e68  20e1              MOVS     r0,#0xe1
005e6a  f7fffffe          BL       mess_find_unvol
;;;9237   	{
;;;9238   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9239   		{
;;;9240   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9241   		}
;;;9242   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9243   		{
;;;9244   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9245   		}
;;;9246   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9247   		{
;;;9248   		static char cntrlStatIsDownCnt;
;;;9249   		cntrl_stat--;
;;;9250   
;;;9251   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9252   			{
;;;9253   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9254   			}
;;;9255   		else 
;;;9256   			{
;;;9257   			cntrlStatIsDownCnt=0;
;;;9258   			}
;;;9259   
;;;9260   		}
;;;9261   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9262   		{
;;;9263   		cntrl_stat/*_new*/=mess_data[1];
;;;9264   		}
;;;9265   
;;;9266   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9267   		{
;;;9268   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9269   		if(bps_U>u_necc)
005e6e  f8dfc188          LDR      r12,|L1.24568|
005e72  4a42              LDR      r2,|L1.24444|
;;;9270   			{
;;;9271   			cntrl_hndl_plazma=11;
;;;9272   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9273   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9274   			}
;;;9275   		else if(bps_U<u_necc)
;;;9276   			{
;;;9277   			cntrl_hndl_plazma=12;	
;;;9278   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9279   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9280   			}
;;;9281   		#elif defined(UKU_220)
;;;9282   		if(load_U>u_necc)
;;;9283   			{
;;;9284   			cntrl_hndl_plazma=13;
;;;9285   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9286   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9287   			}
;;;9288   		else if(load_U<u_necc)
;;;9289   			{
;;;9290   			cntrl_hndl_plazma=14;	
;;;9291   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9292   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9293   			}
;;;9294   		#elif defined(UKU_220_V2)
;;;9295   		if(load_U>u_necc)
;;;9296   			{
;;;9297   			cntrl_hndl_plazma=15;
;;;9298   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9299   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9300   			}
;;;9301   		else if(load_U<u_necc)
;;;9302   			{
;;;9303   			cntrl_hndl_plazma=16;	
;;;9304   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9305   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9306   			}
;;;9307   		#else
;;;9308   
;;;9309   		if(load_U>u_necc)
;;;9310   			{
;;;9311   			cntrl_hndl_plazma=17;
;;;9312   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9313   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9314   			}
;;;9315   		else if(load_U<u_necc)
;;;9316   			{
;;;9317   			cntrl_hndl_plazma=18;	
;;;9318   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9319   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9320   			}
;;;9321   		#endif	
;;;9322   	 	}
;;;9323   
;;;9324   	/*gran(&cntrl_stat_new,10,1010);			
;;;9325   	cntrl_stat_old=cntrl_stat_new;
;;;9326   	cntrl_stat=cntrl_stat_new;*/
;;;9327   	}
;;;9328   
;;;9329   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9330   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005e74  f8df90e0          LDR      r9,|L1.24408|
;;;9331   	{
;;;9332   	cntrl_stat_new=cntrl_stat_old;
;;;9333   	cntrl_hndl_plazma=19;
;;;9334   	if((Ibmax/10)>(2*IZMAX_))
;;;9335   		{
;;;9336   		cntrl_hndl_plazma=20;
;;;9337             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9338   		else	cntrl_stat_new-=10;
;;;9339   		}		
;;;9340   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9341   		{
;;;9342   		cntrl_hndl_plazma=21;
;;;9343             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9344             else	cntrl_stat_new-=3;
;;;9345   		}   
;;;9346   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9347   		{
;;;9348   		cntrl_hndl_plazma=22;
;;;9349   		cntrl_stat_new--;
;;;9350   		}
;;;9351   		
;;;9352   	else if(bps_U<u_necc)
;;;9353   		{
;;;9354   		cntrl_hndl_plazma=23;
;;;9355   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9356   			{
;;;9357   			cntrl_hndl_plazma=24;
;;;9358   			if(Ibmax<0)
;;;9359   				{
;;;9360   				cntrl_hndl_plazma=25;
;;;9361                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9362   				else cntrl_stat_new+=10;
;;;9363   				}
;;;9364   			else if(Ibmax<(IZMAX_*5))
;;;9365   				{
;;;9366   				cntrl_hndl_plazma=26;
;;;9367                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9368   				else	cntrl_stat_new+=2;
;;;9369   				}
;;;9370   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9371   				{
;;;9372   				cntrl_hndl_plazma=27;
;;;9373   				cntrl_stat_new++;
;;;9374   				}					
;;;9375   			}
;;;9376   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9377   			{
;;;9378   			cntrl_hndl_plazma=28;
;;;9379   			if(Ibmax<(IZMAX_*5))
;;;9380   				{
;;;9381   				cntrl_hndl_plazma=29;
;;;9382                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9383   				else	cntrl_stat_new+=2;
;;;9384   				}
;;;9385   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9386   				{
;;;9387   				cntrl_hndl_plazma=30;
;;;9388   				cntrl_stat_new++;
;;;9389   				}					
;;;9390   			}	
;;;9391   		else if(bps_U<(u_necc-1))
;;;9392   			{
;;;9393   			cntrl_hndl_plazma=31;
;;;9394   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9395   				{
;;;9396   				cntrl_hndl_plazma=32;
;;;9397   				cntrl_stat_new++;
;;;9398   				}					
;;;9399   			}					
;;;9400   		}	
;;;9401   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9402   		{ 	
;;;9403   		cntrl_hndl_plazma=33;
;;;9404   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9405   			{
;;;9406   			cntrl_hndl_plazma=34;
;;;9407                  if((cntrl_stat_blok_cnt)||(!TERMOKOMPENS))cntrl_stat_new--;
;;;9408   			else	cntrl_stat_new-=10;
;;;9409   			}
;;;9410   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9411   			{
;;;9412   			cntrl_hndl_plazma=35;
;;;9413                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9414   			else cntrl_stat_new-=2;
;;;9415   			}	
;;;9416   		else if(bps_U>(u_necc+1))
;;;9417   			{
;;;9418   			cntrl_hndl_plazma=36;
;;;9419   			cntrl_stat_new--;
;;;9420   			}					
;;;9421   		}
;;;9422   
;;;9423   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9424   		{
;;;9425   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9426   		}
;;;9427   
;;;9428   	gran(&cntrl_stat_new,10,1010);
;;;9429   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9430   	cntrl_stat_old=cntrl_stat_new;
;;;9431   	cntrl_stat=cntrl_stat_new;
;;;9432   	
;;;9433   	if(ICA_EN==0)
;;;9434   		{
;;;9435   		if(ica_cntrl_hndl_cnt)
005e78  4f60              LDR      r7,|L1.24572|
005e7a  b398              CBZ      r0,|L1.24292|
005e7c  4938              LDR      r1,|L1.24416|
005e7e  6808              LDR      r0,[r1,#0]            ;9238  ; mess_data
005e80  2864              CMP      r0,#0x64              ;9238
005e82  d008              BEQ      |L1.24214|
005e84  2869              CMP      r0,#0x69              ;9242
005e86  d00b              BEQ      |L1.24224|
005e88  286e              CMP      r0,#0x6e              ;9246
005e8a  d00f              BEQ      |L1.24236|
005e8c  28e5              CMP      r0,#0xe5              ;9261
005e8e  d02c              BEQ      |L1.24298|
005e90  28e6              CMP      r0,#0xe6              ;9266
005e92  d02d              BEQ      |L1.24304|
                  |L1.24212|
005e94  e22b              B        |L1.25326|
                  |L1.24214|
005e96  6848              LDR      r0,[r1,#4]            ;9240  ; mess_data
005e98  8ea1              LDRH     r1,[r4,#0x34]         ;9240  ; cntrl_stat_old
005e9a  4408              ADD      r0,r0,r1              ;9240
005e9c  8660              STRH     r0,[r4,#0x32]         ;9240
005e9e  e226              B        |L1.25326|
                  |L1.24224|
005ea0  6848              LDR      r0,[r1,#4]            ;9244  ; mess_data
005ea2  8ea1              LDRH     r1,[r4,#0x34]         ;9244  ; cntrl_stat_old
005ea4  eba10000          SUB      r0,r1,r0              ;9244
005ea8  8660              STRH     r0,[r4,#0x32]         ;9244
005eaa  e220              B        |L1.25326|
                  |L1.24236|
005eac  8e60              LDRH     r0,[r4,#0x32]         ;9249  ; cntrl_stat
005eae  f1a00001          SUB      r0,r0,#1              ;9249
005eb2  b200              SXTH     r0,r0                 ;9249
005eb4  8660              STRH     r0,[r4,#0x32]         ;9249
005eb6  281e              CMP      r0,#0x1e              ;9251
005eb8  dd07              BLE      |L1.24266|
005eba  4851              LDR      r0,|L1.24576|
005ebc  4951              LDR      r1,|L1.24580|
005ebe  f9b00000          LDRSH    r0,[r0,#0]            ;9251  ; load_U
005ec2  f9b11000          LDRSH    r1,[r1,#0]            ;9251  ; USIGN
005ec6  4288              CMP      r0,r1                 ;9251
005ec8  da0d              BGE      |L1.24294|
                  |L1.24266|
005eca  7be0              LDRB     r0,[r4,#0xf]          ;9253  ; cntrlStatIsDownCnt
005ecc  1c40              ADDS     r0,r0,#1              ;9253
005ece  b2c0              UXTB     r0,r0                 ;9253
005ed0  73e0              STRB     r0,[r4,#0xf]          ;9253
005ed2  28fa              CMP      r0,#0xfa              ;9253
005ed4  d1de              BNE      |L1.24212|
005ed6  230a              MOVS     r3,#0xa               ;9253
005ed8  2200              MOVS     r2,#0                 ;9253
005eda  21e7              MOVS     r1,#0xe7              ;9253
005edc  20e6              MOVS     r0,#0xe6              ;9253
005ede  f7fffffe          BL       mess_send
005ee2  e204              B        |L1.25326|
                  |L1.24292|
005ee4  e09c              B        |L1.24608|
                  |L1.24294|
005ee6  73e5              STRB     r5,[r4,#0xf]          ;9257
005ee8  e201              B        |L1.25326|
                  |L1.24298|
005eea  6848              LDR      r0,[r1,#4]            ;9263  ; mess_data
005eec  8660              STRH     r0,[r4,#0x32]         ;9263
005eee  e1fe              B        |L1.25326|
                  |L1.24304|
005ef0  f9bc0000          LDRSH    r0,[r12,#0]           ;9269  ; bps_U
005ef4  f9b21000          LDRSH    r1,[r2,#0]            ;9269  ; u_necc
005ef8  4288              CMP      r0,r1                 ;9269
005efa  dd1a              BLE      |L1.24370|
005efc  f04f020b          MOV      r2,#0xb               ;9271
005f00  f884202e          STRB     r2,[r4,#0x2e]         ;9271
005f04  eba00001          SUB      r0,r0,r1              ;9272
005f08  2828              CMP      r0,#0x28              ;9272
005f0a  dd07              BLE      |L1.24348|
005f0c  f9b40032          LDRSH    r0,[r4,#0x32]         ;9272  ; cntrl_stat
005f10  2800              CMP      r0,#0                 ;9272
005f12  dd03              BLE      |L1.24348|
005f14  f1a00005          SUB      r0,r0,#5              ;9272
005f18  8660              STRH     r0,[r4,#0x32]         ;9272
005f1a  e1e8              B        |L1.25326|
                  |L1.24348|
005f1c  f9b40032          LDRSH    r0,[r4,#0x32]         ;9273  ; cntrl_stat
005f20  2800              CMP      r0,#0                 ;9273
005f22  d0b7              BEQ      |L1.24212|
005f24  7da1              LDRB     r1,[r4,#0x16]         ;9273  ; b1Hz_ch
005f26  2900              CMP      r1,#0                 ;9273
005f28  d0b4              BEQ      |L1.24212|
005f2a  f1a00001          SUB      r0,r0,#1              ;9273
005f2e  8660              STRH     r0,[r4,#0x32]         ;9273
                  |L1.24368|
005f30  e1dd              B        |L1.25326|
                  |L1.24370|
005f32  daaf              BGE      |L1.24212|
005f34  f04f020c          MOV      r2,#0xc               ;9277
005f38  f884202e          STRB     r2,[r4,#0x2e]         ;9277
005f3c  eba10000          SUB      r0,r1,r0              ;9278
005f40  2828              CMP      r0,#0x28              ;9278
005f42  dd61              BLE      |L1.24584|
005f44  f9b40032          LDRSH    r0,[r4,#0x32]         ;9278  ; cntrl_stat
005f48  f24031f7          MOV      r1,#0x3f7             ;9278
005f4c  4288              CMP      r0,r1                 ;9278
005f4e  da5b              BGE      |L1.24584|
005f50  f1000005          ADD      r0,r0,#5              ;9278
005f54  8660              STRH     r0,[r4,#0x32]         ;9278
                  |L1.24406|
005f56  e1ca              B        |L1.25326|
                  |L1.24408|
                          DCD      bps
                  |L1.24412|
                          DCD      NUMIST
                  |L1.24416|
                          DCD      mess_data
                  |L1.24420|
                          DCD      uavt_set_result_stat
                  |L1.24424|
                          DCD      avt_plazma
                  |L1.24428|
                          DCD      TERMOKOMPENS
                  |L1.24432|
                          DCD      UB20
                  |L1.24436|
                          DCD      UVZ
                  |L1.24440|
                          DCD      ||area_number.25||
                  |L1.24444|
                          DCD      u_necc
                  |L1.24448|
                          DCD      ND_EXT
                  |L1.24452|
                          DCD      t_ext
                  |L1.24456|
                          DCD      mat_temper
                  |L1.24460|
                          DCD      UB0
                  |L1.24464|
                          DCD      sk_stat
                  |L1.24468|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.24472|
                          DCD      speedChIsOn
                  |L1.24476|
                          DCD      sp_ch_stat
                  |L1.24480|
                          DCD      speedChrgVolt
                  |L1.24484|
                          DCD      hv_vz_stat
                  |L1.24488|
                          DCD      UZ_U
                  |L1.24492|
                          DCD      FZ_U1
                  |L1.24496|
                          DCD      FZ_U2
                  |L1.24500|
                          DCD      uavt_set_stat
                  |L1.24504|
                          DCD      U_AVT
                  |L1.24508|
                          DCD      u_necc_dn
                  |L1.24512|
                          DCD      u_necc_up
                  |L1.24516|
                          DCD      Isumm
                  |L1.24520|
                          DCD      Isumm_
                  |L1.24524|
                          DCD      bat
                  |L1.24528|
                          DCD      IMAX
                  |L1.24532|
                          DCD      IMIN
                  |L1.24536|
                          DCD      num_necc
                  |L1.24540|
                          DCD      PAR
                  |L1.24544|
                          DCD      IZMAX
                  |L1.24548|
                          DCD      speedChrgCurr
                  |L1.24552|
                          DCD      UZ_IMAX
                  |L1.24556|
                          DCD      FZ_IMAX1
                  |L1.24560|
                          DCD      FZ_IMAX2
                  |L1.24564|
                          DCD      REG_SPEED
                  |L1.24568|
                          DCD      bps_U
                  |L1.24572|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.24576|
                          DCD      load_U
                  |L1.24580|
                          DCD      USIGN
                  |L1.24584|
006008  f9b40032          LDRSH    r0,[r4,#0x32]         ;9279  ; cntrl_stat
00600c  f5b07f7f          CMP      r0,#0x3fc             ;9279
006010  da8e              BGE      |L1.24368|
006012  7da1              LDRB     r1,[r4,#0x16]         ;9279  ; b1Hz_ch
006014  2900              CMP      r1,#0                 ;9279
006016  d08b              BEQ      |L1.24368|
006018  f1000001          ADD      r0,r0,#1              ;9279
00601c  8660              STRH     r0,[r4,#0x32]         ;9279
00601e  e166              B        |L1.25326|
                  |L1.24608|
006020  7da0              LDRB     r0,[r4,#0x16]         ;9330  ; b1Hz_ch
006022  2800              CMP      r0,#0                 ;9330
006024  d084              BEQ      |L1.24368|
006026  48fd              LDR      r0,|L1.25628|
006028  8800              LDRH     r0,[r0,#0]            ;9330  ; bIBAT_SMKLBR
00602a  b118              CBZ      r0,|L1.24628|
00602c  f8990323          LDRB     r0,[r9,#0x323]        ;9330  ; bps
006030  2828              CMP      r0,#0x28              ;9330
006032  d990              BLS      |L1.24406|
                  |L1.24628|
006034  f104042e          ADD      r4,r4,#0x2e           ;9332
006038  f9b40006          LDRSH    r0,[r4,#6]            ;9332  ; cntrl_stat_old
00603c  8360              STRH     r0,[r4,#0x1a]         ;9332
00603e  f04f0113          MOV      r1,#0x13              ;9333
006042  7021              STRB     r1,[r4,#0]            ;9333
006044  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9334  ; Ibmax
006048  8be3              LDRH     r3,[r4,#0x1e]         ;9334  ; IZMAX_
00604a  fb91f8f8          SDIV     r8,r1,r8              ;9334
00604e  f1a4042e          SUB      r4,r4,#0x2e           ;9334
006052  ebb80f43          CMP      r8,r3,LSL #1          ;9334
006056  dd10              BLE      |L1.24698|
006058  f04f0114          MOV      r1,#0x14              ;9336
00605c  f884102e          STRB     r1,[r4,#0x2e]         ;9336
006060  f8b41070          LDRH     r1,[r4,#0x70]         ;9337  ; cntrl_stat_blok_cnt
006064  b121              CBZ      r1,|L1.24688|
006066  f1a00001          SUB      r0,r0,#1              ;9337
00606a  f8a40048          STRH     r0,[r4,#0x48]         ;9337
00606e  e102              B        |L1.25206|
                  |L1.24688|
006070  f1a0000a          SUB      r0,r0,#0xa            ;9338
006074  f8a40048          STRH     r0,[r4,#0x48]         ;9338
006078  e0fd              B        |L1.25206|
                  |L1.24698|
00607a  da14              BGE      |L1.24742|
00607c  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9340
006080  458a              CMP      r10,r1                ;9340
006082  da10              BGE      |L1.24742|
006084  f04f0115          MOV      r1,#0x15              ;9342
006088  f884102e          STRB     r1,[r4,#0x2e]         ;9342
00608c  f8b41070          LDRH     r1,[r4,#0x70]         ;9343  ; cntrl_stat_blok_cnt
006090  b121              CBZ      r1,|L1.24732|
006092  f1a00001          SUB      r0,r0,#1              ;9343
006096  f8a40048          STRH     r0,[r4,#0x48]         ;9343
00609a  e0ec              B        |L1.25206|
                  |L1.24732|
00609c  f1a00003          SUB      r0,r0,#3              ;9344
0060a0  f8a40048          STRH     r0,[r4,#0x48]         ;9344
0060a4  e0e7              B        |L1.25206|
                  |L1.24742|
0060a6  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9346
0060aa  458a              CMP      r10,r1                ;9346
0060ac  dd0a              BLE      |L1.24772|
0060ae  4598              CMP      r8,r3                 ;9346
0060b0  dd08              BLE      |L1.24772|
0060b2  f04f0116          MOV      r1,#0x16              ;9348
0060b6  f884102e          STRB     r1,[r4,#0x2e]         ;9348
0060ba  f1a00001          SUB      r0,r0,#1              ;9349
0060be  f8a40048          STRH     r0,[r4,#0x48]         ;9349
0060c2  e0d8              B        |L1.25206|
                  |L1.24772|
0060c4  f9bcc000          LDRSH    r12,[r12,#0]          ;9352  ; bps_U
0060c8  f9b22000          LDRSH    r2,[r2,#0]            ;9352  ; u_necc
0060cc  f8df8350          LDR      r8,|L1.25632|
0060d0  f8dfb350          LDR      r11,|L1.25636|
0060d4  4594              CMP      r12,r2                ;9352
0060d6  da72              BGE      |L1.25022|
0060d8  f04f0a17          MOV      r10,#0x17             ;9354
0060dc  f884a02e          STRB     r10,[r4,#0x2e]        ;9354
0060e0  f9b88000          LDRSH    r8,[r8,#0]            ;9355  ; UB0
0060e4  f9bba000          LDRSH    r10,[r11,#0]          ;9355  ; UB20
0060e8  eba8080a          SUB      r8,r8,r10             ;9355
0060ec  eba20a08          SUB      r10,r2,r8             ;9355
0060f0  45e2              CMP      r10,r12               ;9355
0060f2  dd37              BLE      |L1.24932|
0060f4  f04f0218          MOV      r2,#0x18              ;9357
0060f8  f884202e          STRB     r2,[r4,#0x2e]         ;9357
0060fc  2900              CMP      r1,#0                 ;9358
0060fe  da10              BGE      |L1.24866|
006100  f04f0119          MOV      r1,#0x19              ;9360
006104  f884102e          STRB     r1,[r4,#0x2e]         ;9360
006108  f8b41070          LDRH     r1,[r4,#0x70]         ;9361  ; cntrl_stat_blok_cnt
00610c  b121              CBZ      r1,|L1.24856|
00610e  f1000001          ADD      r0,r0,#1              ;9361
006112  f8a40048          STRH     r0,[r4,#0x48]         ;9361
006116  e0ae              B        |L1.25206|
                  |L1.24856|
006118  f100000a          ADD      r0,r0,#0xa            ;9362
00611c  f8a40048          STRH     r0,[r4,#0x48]         ;9362
006120  e0a9              B        |L1.25206|
                  |L1.24866|
006122  eb030283          ADD      r2,r3,r3,LSL #2       ;9364
006126  428a              CMP      r2,r1                 ;9364
006128  dd10              BLE      |L1.24908|
00612a  f04f011a          MOV      r1,#0x1a              ;9366
00612e  f884102e          STRB     r1,[r4,#0x2e]         ;9366
006132  f8b41070          LDRH     r1,[r4,#0x70]         ;9367  ; cntrl_stat_blok_cnt
006136  b121              CBZ      r1,|L1.24898|
006138  f1000001          ADD      r0,r0,#1              ;9367
00613c  f8a40048          STRH     r0,[r4,#0x48]         ;9367
006140  e099              B        |L1.25206|
                  |L1.24898|
006142  f1000002          ADD      r0,r0,#2              ;9368
006146  f8a40048          STRH     r0,[r4,#0x48]         ;9368
00614a  e094              B        |L1.25206|
                  |L1.24908|
00614c  ebb10f42          CMP      r1,r2,LSL #1          ;9370
006150  da07              BGE      |L1.24930|
006152  f04f011b          MOV      r1,#0x1b              ;9372
006156  f884102e          STRB     r1,[r4,#0x2e]         ;9372
00615a  f1000001          ADD      r0,r0,#1              ;9373
00615e  f8a40048          STRH     r0,[r4,#0x48]         ;9373
                  |L1.24930|
006162  e088              B        |L1.25206|
                  |L1.24932|
006164  ea4f7ae8          ASR      r10,r8,#31            ;9376
006168  eb08789a          ADD      r8,r8,r10,LSR #30     ;9376
00616c  eba208a8          SUB      r8,r2,r8,ASR #2       ;9376
006170  45e0              CMP      r8,r12                ;9376
006172  dd25              BLE      |L1.25024|
006174  f04f021c          MOV      r2,#0x1c              ;9378
006178  f884202e          STRB     r2,[r4,#0x2e]         ;9378
00617c  eb030283          ADD      r2,r3,r3,LSL #2       ;9379
006180  428a              CMP      r2,r1                 ;9379
006182  dd10              BLE      |L1.24998|
006184  f04f011d          MOV      r1,#0x1d              ;9381
006188  f884102e          STRB     r1,[r4,#0x2e]         ;9381
00618c  f8b41070          LDRH     r1,[r4,#0x70]         ;9382  ; cntrl_stat_blok_cnt
006190  b121              CBZ      r1,|L1.24988|
006192  f1000001          ADD      r0,r0,#1              ;9382
006196  f8a40048          STRH     r0,[r4,#0x48]         ;9382
00619a  e06c              B        |L1.25206|
                  |L1.24988|
00619c  f1000002          ADD      r0,r0,#2              ;9383
0061a0  f8a40048          STRH     r0,[r4,#0x48]         ;9383
0061a4  e067              B        |L1.25206|
                  |L1.24998|
0061a6  ebb10f42          CMP      r1,r2,LSL #1          ;9385
0061aa  da64              BGE      |L1.25206|
0061ac  f04f011e          MOV      r1,#0x1e              ;9387
0061b0  f884102e          STRB     r1,[r4,#0x2e]         ;9387
0061b4  f1000001          ADD      r0,r0,#1              ;9388
0061b8  f8a40048          STRH     r0,[r4,#0x48]         ;9388
0061bc  e05b              B        |L1.25206|
                  |L1.25022|
0061be  e014              B        |L1.25066|
                  |L1.25024|
0061c0  1e52              SUBS     r2,r2,#1              ;9391
0061c2  4594              CMP      r12,r2                ;9391
0061c4  da57              BGE      |L1.25206|
0061c6  f04f021f          MOV      r2,#0x1f              ;9393
0061ca  f884202e          STRB     r2,[r4,#0x2e]         ;9393
0061ce  eb030283          ADD      r2,r3,r3,LSL #2       ;9394
0061d2  ebb10f42          CMP      r1,r2,LSL #1          ;9394
0061d6  da4e              BGE      |L1.25206|
0061d8  f04f0120          MOV      r1,#0x20              ;9396
0061dc  f884102e          STRB     r1,[r4,#0x2e]         ;9396
0061e0  f1000001          ADD      r0,r0,#1              ;9397
0061e4  f8a40048          STRH     r0,[r4,#0x48]         ;9397
0061e8  e045              B        |L1.25206|
                  |L1.25066|
0061ea  dd44              BLE      |L1.25206|
0061ec  f04f0121          MOV      r1,#0x21              ;9403
0061f0  f884102e          STRB     r1,[r4,#0x2e]         ;9403
0061f4  f9b81000          LDRSH    r1,[r8,#0]            ;9404  ; UB0
0061f8  f9bb3000          LDRSH    r3,[r11,#0]           ;9404  ; UB20
0061fc  eba10103          SUB      r1,r1,r3              ;9404
006200  eb010302          ADD      r3,r1,r2              ;9404
006204  4563              CMP      r3,r12                ;9404
006206  da13              BGE      |L1.25136|
006208  f04f0122          MOV      r1,#0x22              ;9406
00620c  f884102e          STRB     r1,[r4,#0x2e]         ;9406
006210  f8b41070          LDRH     r1,[r4,#0x70]         ;9407  ; cntrl_stat_blok_cnt
006214  b939              CBNZ     r1,|L1.25126|
006216  4984              LDR      r1,|L1.25640|
006218  8809              LDRH     r1,[r1,#0]            ;9407  ; TERMOKOMPENS
00621a  b121              CBZ      r1,|L1.25126|
00621c  f1a0000a          SUB      r0,r0,#0xa            ;9408
006220  f8a40048          STRH     r0,[r4,#0x48]         ;9408
006224  e027              B        |L1.25206|
                  |L1.25126|
006226  f1a00001          SUB      r0,r0,#1              ;9407
00622a  f8a40048          STRH     r0,[r4,#0x48]         ;9407
00622e  e022              B        |L1.25206|
                  |L1.25136|
006230  17cb              ASRS     r3,r1,#31             ;9410
006232  eb017193          ADD      r1,r1,r3,LSR #30      ;9410
006236  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9410
00623a  4561              CMP      r1,r12                ;9410
00623c  da10              BGE      |L1.25184|
00623e  f04f0123          MOV      r1,#0x23              ;9412
006242  f884102e          STRB     r1,[r4,#0x2e]         ;9412
006246  f8b41070          LDRH     r1,[r4,#0x70]         ;9413  ; cntrl_stat_blok_cnt
00624a  b121              CBZ      r1,|L1.25174|
00624c  f1a00001          SUB      r0,r0,#1              ;9413
006250  f8a40048          STRH     r0,[r4,#0x48]         ;9413
006254  e00f              B        |L1.25206|
                  |L1.25174|
006256  f1a00002          SUB      r0,r0,#2              ;9414
00625a  f8a40048          STRH     r0,[r4,#0x48]         ;9414
00625e  e00a              B        |L1.25206|
                  |L1.25184|
006260  1c52              ADDS     r2,r2,#1              ;9416
006262  4594              CMP      r12,r2                ;9416
006264  dd07              BLE      |L1.25206|
006266  f04f0124          MOV      r1,#0x24              ;9418
00626a  f884102e          STRB     r1,[r4,#0x2e]         ;9418
00626e  f1a00001          SUB      r0,r0,#1              ;9419
006272  f8a40048          STRH     r0,[r4,#0x48]         ;9419
                  |L1.25206|
006276  486d              LDR      r0,|L1.25644|
006278  7961              LDRB     r1,[r4,#5]            ;9423  ; vz1_stat
00627a  7800              LDRB     r0,[r0,#0]            ;9423  ; hv_vz_stat
00627c  4308              ORRS     r0,r0,r1              ;9423
00627e  79e1              LDRB     r1,[r4,#7]            ;9423  ; vz2_stat
006280  4308              ORRS     r0,r0,r1              ;9423
006282  d10e              BNE      |L1.25250|
006284  486a              LDR      r0,|L1.25648|
006286  7840              LDRB     r0,[r0,#1]            ;9425  ; sk_stat
006288  2801              CMP      r0,#1                 ;9425
00628a  d10a              BNE      |L1.25250|
00628c  4869              LDR      r0,|L1.25652|
00628e  7840              LDRB     r0,[r0,#1]            ;9425  ; sk_stat_old
006290  b938              CBNZ     r0,|L1.25250|
006292  4869              LDR      r0,|L1.25656|
006294  8800              LDRH     r0,[r0,#0]            ;9425  ; VZ_KIND
006296  2801              CMP      r0,#1                 ;9425
006298  d103              BNE      |L1.25250|
00629a  f04f0032          MOV      r0,#0x32              ;9425
00629e  f8a40048          STRH     r0,[r4,#0x48]         ;9425
                  |L1.25250|
0062a2  f24032f2          MOV      r2,#0x3f2             ;9428
0062a6  210a              MOVS     r1,#0xa               ;9428
0062a8  4864              LDR      r0,|L1.25660|
0062aa  f7fffffe          BL       gran
0062ae  4864              LDR      r0,|L1.25664|
0062b0  8800              LDRH     r0,[r0,#0]            ;9429  ; net_av_2min_timer
0062b2  b110              CBZ      r0,|L1.25274|
0062b4  8ea0              LDRH     r0,[r4,#0x34]         ;9429  ; cntrl_stat_old
0062b6  f8a40048          STRH     r0,[r4,#0x48]         ;9429
                  |L1.25274|
0062ba  f8b40048          LDRH     r0,[r4,#0x48]         ;9430  ; cntrl_stat_new
0062be  86a0              STRH     r0,[r4,#0x34]         ;9430
0062c0  8660              STRH     r0,[r4,#0x32]         ;9431
0062c2  4860              LDR      r0,|L1.25668|
0062c4  f9b00000          LDRSH    r0,[r0,#0]            ;9433  ; ICA_EN
0062c8  b938              CBNZ     r0,|L1.25306|
0062ca  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
0062cc  b129              CBZ      r1,|L1.25306|
;;;9436   			{
;;;9437   			cntrl_stat = ica_cntrl_hndl;
0062ce  495e              LDR      r1,|L1.25672|
0062d0  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
0062d2  8661              STRH     r1,[r4,#0x32]
;;;9438   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
0062d4  f8a41048          STRH     r1,[r4,#0x48]
;;;9439   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
0062d8  86a1              STRH     r1,[r4,#0x34]
                  |L1.25306|
;;;9440   			}
;;;9441   		}
;;;9442   	
;;;9443   	if((ICA_EN==1)||(ICA_EN==2))
0062da  2801              CMP      r0,#1
0062dc  d001              BEQ      |L1.25314|
0062de  2802              CMP      r0,#2
0062e0  d105              BNE      |L1.25326|
                  |L1.25314|
;;;9444   		{
;;;9445   		cntrl_stat=cntrl_stat_new+ica_u_necc;
0062e2  495a              LDR      r1,|L1.25676|
0062e4  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
0062e8  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
0062ea  4408              ADD      r0,r0,r1
0062ec  8660              STRH     r0,[r4,#0x32]
                  |L1.25326|
;;;9446   		}			
;;;9447   	}
;;;9448   #else
;;;9449   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9450   	{
;;;9451   	cntrl_hndl_plazma=37;
;;;9452   	cntrl_stat_new=cntrl_stat_old;
;;;9453   	
;;;9454   	if((Ibmax/10)>(2*IZMAX_))
;;;9455   		{
;;;9456   		cntrl_hndl_plazma=38;
;;;9457             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9458   		else	cntrl_stat_new-=10;
;;;9459   		}		
;;;9460   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9461   		{
;;;9462   		cntrl_hndl_plazma=39;
;;;9463             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9464             else	cntrl_stat_new-=3;
;;;9465   		}   
;;;9466   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9467   		{
;;;9468   		cntrl_hndl_plazma=40;
;;;9469   		cntrl_stat_new--;
;;;9470   		}
;;;9471   		
;;;9472   	else if(load_U<u_necc)
;;;9473   		{
;;;9474   		cntrl_hndl_plazma=41;
;;;9475   		if(load_U<(u_necc-(UB0-UB20)))
;;;9476   			{
;;;9477   			cntrl_hndl_plazma=42;
;;;9478   			if(Ibmax<0)
;;;9479   				{
;;;9480   				cntrl_hndl_plazma=43;
;;;9481                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9482   				else cntrl_stat_new+=10;
;;;9483   				}
;;;9484   			else if(Ibmax<(IZMAX_*5))
;;;9485   				{
;;;9486   				cntrl_hndl_plazma=44;
;;;9487                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9488   				else	cntrl_stat_new+=2;
;;;9489   				}
;;;9490   			else if(Ibmax<((IZMAX_*95)/10))
;;;9491   				{
;;;9492   				cntrl_hndl_plazma=45;
;;;9493   				cntrl_stat_new++;
;;;9494   				}					
;;;9495   			}
;;;9496   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9497   			{
;;;9498   			cntrl_hndl_plazma=46;
;;;9499   			if(Ibmax<(IZMAX_*5))
;;;9500   				{
;;;9501   				cntrl_hndl_plazma=47;
;;;9502                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9503   				else	cntrl_stat_new+=2;
;;;9504   				}
;;;9505   			else if(Ibmax<((IZMAX_*95)/10))
;;;9506   				{
;;;9507   				cntrl_hndl_plazma=48;
;;;9508   				cntrl_stat_new++;
;;;9509   				}					
;;;9510   			}	
;;;9511   		else if(load_U<(u_necc-1))
;;;9512   			{
;;;9513   			cntrl_hndl_plazma=49;
;;;9514   			if(Ibmax<((IZMAX_*95)/10))
;;;9515   				{
;;;9516   				cntrl_hndl_plazma=50;
;;;9517   				cntrl_stat_new++;
;;;9518   				}					
;;;9519   			}					
;;;9520   		}	
;;;9521   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9522   		{
;;;9523   		cntrl_hndl_plazma=51;
;;;9524   		if(load_U>(u_necc+(UB0-UB20)))
;;;9525   			{
;;;9526   			cntrl_hndl_plazma=52;
;;;9527                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9528   			else	cntrl_stat_new-=10;
;;;9529   			}
;;;9530   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9531   			{
;;;9532   			cntrl_hndl_plazma=53;
;;;9533                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9534   			else cntrl_stat_new-=2;
;;;9535   			}	
;;;9536   		else if(load_U>(u_necc+1))
;;;9537   			{
;;;9538   			cntrl_hndl_plazma=54;
;;;9539   			cntrl_stat_new--;
;;;9540   			}					
;;;9541   		}
;;;9542   
;;;9543   	gran(&cntrl_stat_new,10,1022);
;;;9544   				
;;;9545   	cntrl_stat_old=cntrl_stat_new;
;;;9546   	cntrl_stat=cntrl_stat_new;	
;;;9547   	}
;;;9548   #endif
;;;9549   
;;;9550   iiii=0;
0062ee  7625              STRB     r5,[r4,#0x18]
;;;9551   for(i=0;i<NUMIST;i++)
0062f0  75e5              STRB     r5,[r4,#0x17]
0062f2  4857              LDR      r0,|L1.25680|
0062f4  f9b01000          LDRSH    r1,[r0,#0]
0062f8  e00c              B        |L1.25364|
                  |L1.25338|
;;;9552        {
;;;9553        if(bps[i]._cnt<30)iiii=1;
0062fa  eb0002c0          ADD      r2,r0,r0,LSL #3
0062fe  eb021200          ADD      r2,r2,r0,LSL #4
006302  eb090282          ADD      r2,r9,r2,LSL #2
006306  78d2              LDRB     r2,[r2,#3]
006308  2a1e              CMP      r2,#0x1e
00630a  d200              BCS      |L1.25358|
00630c  7626              STRB     r6,[r4,#0x18]
                  |L1.25358|
00630e  f1000001          ADD      r0,r0,#1              ;9551
006312  75e0              STRB     r0,[r4,#0x17]         ;9551
                  |L1.25364|
006314  7de0              LDRB     r0,[r4,#0x17]         ;9551  ; i
006316  4288              CMP      r0,r1                 ;9551
006318  dbef              BLT      |L1.25338|
;;;9554        }
;;;9555   
;;;9556   if(iiii==0)
00631a  7e20              LDRB     r0,[r4,#0x18]  ; iiii
00631c  b948              CBNZ     r0,|L1.25394|
;;;9557   	{
;;;9558   	cntrl_stat=600;	
;;;9559   	cntrl_stat_old=600;
;;;9560   	cntrl_stat_new=600;
;;;9561   	cntrl_stat=10*PWM_START;
00631e  484d              LDR      r0,|L1.25684|
006320  8800              LDRH     r0,[r0,#0]  ; PWM_START
006322  eb000080          ADD      r0,r0,r0,LSL #2
006326  ea4f0040          LSL      r0,r0,#1
00632a  8660              STRH     r0,[r4,#0x32]
;;;9562   	cntrl_stat_old=10*PWM_START;
00632c  86a0              STRH     r0,[r4,#0x34]
;;;9563   	cntrl_stat_new=10*PWM_START;
00632e  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.25394|
;;;9564   	}
;;;9565   
;;;9566   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9567   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
006332  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
006336  b110              CBZ      r0,|L1.25406|
006338  f1a00001          SUB      r0,r0,#1
00633c  8038              STRH     r0,[r7,#0]
                  |L1.25406|
;;;9568   
;;;9569   
;;;9570   
;;;9571   #endif
;;;9572   
;;;9573   
;;;9574   gran(&cntrl_stat,10,1022); 
00633e  483f              LDR      r0,|L1.25660|
006340  f24032fe          MOV      r2,#0x3fe
006344  210a              MOVS     r1,#0xa
006346  3816              SUBS     r0,r0,#0x16
006348  f7fffffe          BL       gran
;;;9575   b1Hz_ch=0;
00634c  75a5              STRB     r5,[r4,#0x16]
                  |L1.25422|
;;;9576   }
00634e  e8bd9ff0          POP      {r4-r12,pc}
;;;9577   #endif
                          ENDP

                  ext_drv PROC
;;;10066  //-----------------------------------------------
;;;10067  void ext_drv(void)
006352  e92d5ff0          PUSH     {r4-r12,lr}
;;;10068  {
;;;10069  char i;
;;;10070  
;;;10071  
;;;10072  for(i=0;i<NUMSK;i++)
006356  f04f0000          MOV      r0,#0
00635a  4a40              LDR      r2,|L1.25692|
;;;10073  	{
;;;10074  	#ifdef UKU_MGTS
;;;10075  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10076  	#endif
;;;10077  	#ifdef UKU_RSTKM
;;;10078  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10079  	#endif
;;;10080  	#ifdef UKU_3U
;;;10081  	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10082  	#endif
;;;10083  	#ifdef UKU_GLONASS
;;;10084  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10085  	#endif
;;;10086  	#ifdef UKU_KONTUR
;;;10087  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10088  	#endif
;;;10089  	#ifdef UKU_6U
;;;10090  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10091  	#endif
;;;10092  	#ifdef UKU_220
;;;10093  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10094  	#endif
;;;10095  	#ifdef UKU_220_V2
;;;10096  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10097  	#endif
;;;10098  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10099  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10100  	#endif
;;;10101  	#ifdef UKU_TELECORE2015	
;;;10102  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10103  	#endif
;;;10104  	#ifdef UKU_TELECORE2017
;;;10105  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10106  	#endif
;;;10107  	#ifdef IPS_SGEP_GAZPROM
;;;10108  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10109  	#endif		
;;;10110  		{
;;;10111  		if(sk_cnt[i]<10)
00635c  4b3e              LDR      r3,|L1.25688|
;;;10112  			{
;;;10113  			sk_cnt[i]++;
;;;10114  			if(sk_cnt[i]>=10)
;;;10115  				{
;;;10116  				sk_stat[i]=ssON;
00635e  4d34              LDR      r5,|L1.25648|
006360  f04f0a01          MOV      r10,#1
;;;10117  				}
;;;10118  			}
;;;10119  		else 
;;;10120  			{
;;;10121  			sk_cnt[i]=10;
006364  f04f0b0a          MOV      r11,#0xa
006368  4606              MOV      r6,r0                 ;10072
00636a  f9b24000          LDRSH    r4,[r2,#0]            ;10072
00636e  e025              B        |L1.25532|
                  |L1.25456|
006370  493b              LDR      r1,|L1.25696|
006372  4f3c              LDR      r7,|L1.25700|
006374  5c09              LDRB     r1,[r1,r0]            ;10099
006376  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10099
00637a  f5b16ffa          CMP      r1,#0x7d0             ;10099
00637e  da0e              BGE      |L1.25502|
006380  5619              LDRSB    r1,[r3,r0]            ;10111
006382  290a              CMP      r1,#0xa               ;10111
006384  da08              BGE      |L1.25496|
006386  f1010101          ADD      r1,r1,#1              ;10113
00638a  b249              SXTB     r1,r1                 ;10113
00638c  5419              STRB     r1,[r3,r0]            ;10113
00638e  290a              CMP      r1,#0xa               ;10114
006390  db11              BLT      |L1.25526|
006392  f805a000          STRB     r10,[r5,r0]           ;10116
006396  e00e              B        |L1.25526|
                  |L1.25496|
006398  f803b000          STRB     r11,[r3,r0]
00639c  e00b              B        |L1.25526|
                  |L1.25502|
;;;10122  			}
;;;10123                 
;;;10124  		}
;;;10125  	else
;;;10126  		{
;;;10127  		if(sk_cnt[i]>0)
00639e  5619              LDRSB    r1,[r3,r0]
0063a0  2900              CMP      r1,#0
0063a2  dd07              BLE      |L1.25524|
;;;10128  			{
;;;10129  			sk_cnt[i]--;
0063a4  f1a10101          SUB      r1,r1,#1
0063a8  b249              SXTB     r1,r1
0063aa  5419              STRB     r1,[r3,r0]
;;;10130  			if(sk_cnt[i]<=0)
0063ac  2900              CMP      r1,#0
0063ae  dc02              BGT      |L1.25526|
;;;10131  				{
;;;10132  				sk_stat[i]=ssOFF;
0063b0  542e              STRB     r6,[r5,r0]
0063b2  e000              B        |L1.25526|
                  |L1.25524|
;;;10133  				}
;;;10134  			}
;;;10135  		else 
;;;10136  			{
;;;10137  			sk_cnt[i]=0;
0063b4  541e              STRB     r6,[r3,r0]
                  |L1.25526|
0063b6  f1000001          ADD      r0,r0,#1              ;10072
0063ba  b2c0              UXTB     r0,r0                 ;10072
                  |L1.25532|
0063bc  42a0              CMP      r0,r4                 ;10072
0063be  dbd7              BLT      |L1.25456|
;;;10138  			}
;;;10139  		}
;;;10140  	}
;;;10141  
;;;10142  for(i=0;i<NUMSK;i++)
0063c0  f04f0400          MOV      r4,#0
;;;10143  	{
;;;10144  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10145  		{
;;;10146  		if(sk_av_cnt[i]<10)
0063c4  f8df90a0          LDR      r9,|L1.25704|
;;;10147  			{
;;;10148  			sk_av_cnt[i]++;
;;;10149  			if(sk_av_cnt[i]>=10)
;;;10150  				{
;;;10151  				sk_av_stat[i]=sasON;
0063c8  4f28              LDR      r7,|L1.25708|
;;;10152  				}
;;;10153  			}
;;;10154  		else 
;;;10155  			{
;;;10156  			sk_av_cnt[i]=10;
;;;10157  			}
;;;10158  		}
;;;10159  	else
;;;10160  		{
;;;10161  		if(sk_av_cnt[i]>=0)
;;;10162  			{
;;;10163  			sk_av_cnt[i]--;
;;;10164  			if(sk_av_cnt[i]<=0)
;;;10165  				{
;;;10166  				sk_av_stat[i]=sasOFF;
;;;10167  				}
;;;10168  			}
;;;10169  		else 
;;;10170  			{
;;;10171  			sk_av_cnt[i]=0;
;;;10172  			}
;;;10173  		}
;;;10174  
;;;10175  #ifndef UKU_KONTUR
;;;10176  	if(sk_av_stat_old[i]!=sk_av_stat[i])
0063ca  f8df80a4          LDR      r8,|L1.25712|
0063ce  e0b1              B        |L1.25908|
                  |L1.25552|
0063d0  4828              LDR      r0,|L1.25716|
0063d2  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10144
0063d6  b910              CBNZ     r0,|L1.25566|
0063d8  5d29              LDRB     r1,[r5,r4]            ;10144
0063da  2901              CMP      r1,#1                 ;10144
0063dc  d00f              BEQ      |L1.25598|
                  |L1.25566|
0063de  b108              CBZ      r0,|L1.25572|
0063e0  5d28              LDRB     r0,[r5,r4]            ;10144
0063e2  b160              CBZ      r0,|L1.25598|
                  |L1.25572|
0063e4  f9190004          LDRSB    r0,[r9,r4]            ;10161
0063e8  2800              CMP      r0,#0                 ;10161
0063ea  db48              BLT      |L1.25726|
0063ec  f1a00001          SUB      r0,r0,#1              ;10163
0063f0  b240              SXTB     r0,r0                 ;10163
0063f2  f8090004          STRB     r0,[r9,r4]            ;10163
0063f6  2800              CMP      r0,#0                 ;10164
0063f8  dc43              BGT      |L1.25730|
0063fa  553e              STRB     r6,[r7,r4]            ;10166
0063fc  e041              B        |L1.25730|
                  |L1.25598|
0063fe  f9190004          LDRSB    r0,[r9,r4]            ;10146
006402  280a              CMP      r0,#0xa               ;10146
006404  da38              BGE      |L1.25720|
006406  f1000001          ADD      r0,r0,#1              ;10148
00640a  b240              SXTB     r0,r0                 ;10148
00640c  f8090004          STRB     r0,[r9,r4]            ;10148
006410  280a              CMP      r0,#0xa               ;10149
006412  db36              BLT      |L1.25730|
006414  f807a004          STRB     r10,[r7,r4]           ;10151
006418  e033              B        |L1.25730|
00641a  0000              DCW      0x0000
                  |L1.25628|
                          DCD      bIBAT_SMKLBR
                  |L1.25632|
                          DCD      UB0
                  |L1.25636|
                          DCD      UB20
                  |L1.25640|
                          DCD      TERMOKOMPENS
                  |L1.25644|
                          DCD      hv_vz_stat
                  |L1.25648|
                          DCD      sk_stat
                  |L1.25652|
                          DCD      sk_stat_old
                  |L1.25656|
                          DCD      VZ_KIND
                  |L1.25660|
                          DCD      ||area_number.25||+0x48
                  |L1.25664|
                          DCD      net_av_2min_timer
                  |L1.25668|
                          DCD      ICA_EN
                  |L1.25672|
                          DCD      ica_cntrl_hndl
                  |L1.25676|
                          DCD      ica_u_necc
                  |L1.25680|
                          DCD      NUMIST
                  |L1.25684|
                          DCD      PWM_START
                  |L1.25688|
                          DCD      sk_cnt
                  |L1.25692|
                          DCD      NUMSK
                  |L1.25696|
                          DCD      ||area_number.19||
                  |L1.25700|
                          DCD      ||.bss||+0x40c
                  |L1.25704|
                          DCD      sk_av_cnt
                  |L1.25708|
                          DCD      sk_av_stat
                  |L1.25712|
                          DCD      sk_av_stat_old
                  |L1.25716|
                          DCD      SK_SIGN
                  |L1.25720|
006478  f809b004          STRB     r11,[r9,r4]           ;10156
00647c  e001              B        |L1.25730|
                  |L1.25726|
00647e  f8096004          STRB     r6,[r9,r4]            ;10171
                  |L1.25730|
006482  f8181004          LDRB     r1,[r8,r4]
006486  5d38              LDRB     r0,[r7,r4]
006488  4281              CMP      r1,r0
00648a  d04d              BEQ      |L1.25896|
;;;10177  		{
;;;10178  		plazma_sk++;
00648c  4af8              LDR      r2,|L1.26736|
00648e  8811              LDRH     r1,[r2,#0]  ; plazma_sk
006490  f1010101          ADD      r1,r1,#1
006494  8011              STRH     r1,[r2,#0]
;;;10179  		if(sk_av_stat[i]==sasON)
006496  2801              CMP      r0,#1
006498  d007              BEQ      |L1.25770|
;;;10180  			{
;;;10181  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10182  			else if(i==1)
;;;10183  				{
;;;10184  				#ifndef UKU_TELEKORE2017
;;;10185  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10186  				#endif
;;;10187  				#ifdef UKU_TELEKORE2017
;;;10188  				snmp_trap_send("Door open",15,2,1);
;;;10189  				#endif
;;;10190  				}
;;;10191  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10192  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10193  			}
;;;10194  		else 
;;;10195  			{
;;;10196  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
00649a  b354              CBZ      r4,|L1.25842|
;;;10197  			else if(i==1)
00649c  2c01              CMP      r4,#1
00649e  d02f              BEQ      |L1.25856|
;;;10198  				{
;;;10199  				#ifndef UKU_TELEKORE2017
;;;10200  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10201  				#endif
;;;10202  				#ifdef UKU_TELEKORE2017
;;;10203  				snmp_trap_send("Door open clear",15,2,0);
;;;10204  				#endif
;;;10205  				}
;;;10206  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
0064a0  2c02              CMP      r4,#2
0064a2  d034              BEQ      |L1.25870|
;;;10207  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
0064a4  2c03              CMP      r4,#3
0064a6  d039              BEQ      |L1.25884|
0064a8  e03e              B        |L1.25896|
                  |L1.25770|
0064aa  b134              CBZ      r4,|L1.25786|
0064ac  2c01              CMP      r4,#1                 ;10182
0064ae  d00b              BEQ      |L1.25800|
0064b0  2c02              CMP      r4,#2                 ;10191
0064b2  d010              BEQ      |L1.25814|
0064b4  2c03              CMP      r4,#3                 ;10192
0064b6  d015              BEQ      |L1.25828|
0064b8  e036              B        |L1.25896|
                  |L1.25786|
0064ba  2301              MOVS     r3,#1                 ;10181
0064bc  461a              MOV      r2,r3                 ;10181
0064be  210f              MOVS     r1,#0xf               ;10181
0064c0  a0ec              ADR      r0,|L1.26740|
0064c2  f7fffffe          BL       snmp_trap_send
0064c6  e02f              B        |L1.25896|
                  |L1.25800|
0064c8  2301              MOVS     r3,#1                 ;10185
0064ca  2202              MOVS     r2,#2                 ;10185
0064cc  210f              MOVS     r1,#0xf               ;10185
0064ce  a0ec              ADR      r0,|L1.26752|
0064d0  f7fffffe          BL       snmp_trap_send
0064d4  e028              B        |L1.25896|
                  |L1.25814|
0064d6  2301              MOVS     r3,#1                 ;10191
0064d8  2203              MOVS     r2,#3                 ;10191
0064da  210f              MOVS     r1,#0xf               ;10191
0064dc  a0eb              ADR      r0,|L1.26764|
0064de  f7fffffe          BL       snmp_trap_send
0064e2  e021              B        |L1.25896|
                  |L1.25828|
0064e4  2301              MOVS     r3,#1                 ;10192
0064e6  2204              MOVS     r2,#4                 ;10192
0064e8  210f              MOVS     r1,#0xf               ;10192
0064ea  a0eb              ADR      r0,|L1.26776|
0064ec  f7fffffe          BL       snmp_trap_send
0064f0  e01a              B        |L1.25896|
                  |L1.25842|
0064f2  2300              MOVS     r3,#0                 ;10196
0064f4  2201              MOVS     r2,#1                 ;10196
0064f6  210f              MOVS     r1,#0xf               ;10196
0064f8  a0ea              ADR      r0,|L1.26788|
0064fa  f7fffffe          BL       snmp_trap_send
0064fe  e013              B        |L1.25896|
                  |L1.25856|
006500  2300              MOVS     r3,#0                 ;10200
006502  2202              MOVS     r2,#2                 ;10200
006504  210f              MOVS     r1,#0xf               ;10200
006506  a0ec              ADR      r0,|L1.26808|
006508  f7fffffe          BL       snmp_trap_send
00650c  e00c              B        |L1.25896|
                  |L1.25870|
00650e  2300              MOVS     r3,#0                 ;10206
006510  2203              MOVS     r2,#3                 ;10206
006512  210f              MOVS     r1,#0xf               ;10206
006514  a0ed              ADR      r0,|L1.26828|
006516  f7fffffe          BL       snmp_trap_send
00651a  e005              B        |L1.25896|
                  |L1.25884|
00651c  2300              MOVS     r3,#0
00651e  2204              MOVS     r2,#4
006520  210f              MOVS     r1,#0xf
006522  a0ef              ADR      r0,|L1.26848|
006524  f7fffffe          BL       snmp_trap_send
                  |L1.25896|
;;;10208  			}
;;;10209  	 	}
;;;10210  #endif
;;;10211  
;;;10212  #ifdef UKU_KONTUR
;;;10213  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10214  		{
;;;10215  		plazma_sk++;
;;;10216  		if(sk_av_stat[i]==sasON)
;;;10217  			{
;;;10218  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10219  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10220  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10221  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10222  			}
;;;10223  		else 
;;;10224  			{
;;;10225  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10226  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10227  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10228  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10229  			}
;;;10230  	 	}
;;;10231  #endif
;;;10232  	sk_av_stat_old[i]=sk_av_stat[i];
006528  5d38              LDRB     r0,[r7,r4]
00652a  f8080004          STRB     r0,[r8,r4]
00652e  f1040401          ADD      r4,r4,#1              ;10142
006532  b2e4              UXTB     r4,r4                 ;10142
                  |L1.25908|
006534  48ef              LDR      r0,|L1.26868|
006536  f9b00000          LDRSH    r0,[r0,#0]            ;10142  ; NUMSK
00653a  4284              CMP      r4,r0                 ;10142
00653c  f6ffaf48          BLT      |L1.25552|
;;;10233  	}
;;;10234  }
006540  e705              B        |L1.25422|
;;;10235  
                          ENDP

                  zar_superviser_start PROC
;;;10272  //-----------------------------------------------
;;;10273  void zar_superviser_start(void)
006542  4aed              LDR      r2,|L1.26872|
;;;10274  {
;;;10275  sign_U[0]=1;
006544  f04f0001          MOV      r0,#1
006548  7010              STRB     r0,[r2,#0]
;;;10276  sign_I[0]=1;
00654a  49ec              LDR      r1,|L1.26876|
00654c  7008              STRB     r0,[r1,#0]
;;;10277  sign_U[1]=1;
00654e  7050              STRB     r0,[r2,#1]
;;;10278  sign_I[1]=1;
006550  7048              STRB     r0,[r1,#1]
;;;10279  
;;;10280  }
006552  4770              BX       lr
;;;10281  
                          ENDP

                  zar_superviser_drv PROC
;;;10237  //-----------------------------------------------
;;;10238  void zar_superviser_drv(void)
006554  e92d5ff0          PUSH     {r4-r12,lr}
;;;10239  {
;;;10240  
;;;10241  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
006558  48ea              LDR      r0,|L1.26884|
00655a  f8df93ac          LDR      r9,|L1.26888|
00655e  f8df83a0          LDR      r8,|L1.26880|
006562  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
006566  f9b90000          LDRSH    r0,[r9,#0]
00656a  4cc1              LDR      r4,|L1.26736|
00656c  ebc01100          RSB      r1,r0,r0,LSL #4
006570  3c46              SUBS     r4,r4,#0x46
006572  f9b87002          LDRSH    r7,[r8,#2]  ; bat
006576  f06f0a1d          MVN      r10,#0x1d
00657a  f06f0b95          MVN      r11,#0x95
00657e  2500              MOVS     r5,#0
006580  4edd              LDR      r6,|L1.26872|
006582  f9b40052          LDRSH    r0,[r4,#0x52]
006586  eb0a0281          ADD      r2,r10,r1,LSL #2
00658a  eb0b0381          ADD      r3,r11,r1,LSL #2
00658e  4567              CMP      r7,r12
006590  dc05              BGT      |L1.26014|
006592  f8dfc378          LDR      r12,|L1.26892|
006596  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
00659a  4567              CMP      r7,r12
00659c  da04              BGE      |L1.26024|
                  |L1.26014|
00659e  4282              CMP      r2,r0
0065a0  dd02              BLE      |L1.26024|
0065a2  4283              CMP      r3,r0
0065a4  da00              BGE      |L1.26024|
0065a6  7035              STRB     r5,[r6,#0]
                  |L1.26024|
;;;10242  
;;;10243  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
0065a8  4fd9              LDR      r7,|L1.26896|
0065aa  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
0065ae  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0065b2  4fd2              LDR      r7,|L1.26876|
0065b4  ebbc0f4e          CMP      r12,lr,LSL #1
0065b8  dc04              BGT      |L1.26052|
0065ba  f1ce0e00          RSB      lr,lr,#0
0065be  ebbc0f4e          CMP      r12,lr,LSL #1
0065c2  da04              BGE      |L1.26062|
                  |L1.26052|
0065c4  4282              CMP      r2,r0
0065c6  dd02              BLE      |L1.26062|
0065c8  4283              CMP      r3,r0
0065ca  da00              BGE      |L1.26062|
0065cc  703d              STRB     r5,[r7,#0]
                  |L1.26062|
;;;10244  																 
;;;10245  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0065ce  f06f0209          MVN      r2,#9
0065d2  eb020181          ADD      r1,r2,r1,LSL #2
0065d6  4281              CMP      r1,r0
0065d8  d121              BNE      |L1.26142|
0065da  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0065de  b9f0              CBNZ     r0,|L1.26142|
;;;10246  	{
;;;10247  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
0065e0  7830              LDRB     r0,[r6,#0]  ; sign_U
0065e2  2801              CMP      r0,#1
0065e4  d11b              BNE      |L1.26142|
0065e6  7838              LDRB     r0,[r7,#0]  ; sign_I
0065e8  2801              CMP      r0,#1
0065ea  d118              BNE      |L1.26142|
0065ec  f44f70ef          MOV      r0,#0x1de
0065f0  f7fffffe          BL       lc640_read_int
0065f4  49c7              LDR      r1,|L1.26900|
0065f6  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
0065fa  4288              CMP      r0,r1
0065fc  d00f              BEQ      |L1.26142|
0065fe  48c6              LDR      r0,|L1.26904|
006600  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006602  b160              CBZ      r0,|L1.26142|
006604  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006608  07c0              LSLS     r0,r0,#31
00660a  d108              BNE      |L1.26142|
;;;10248  		{
;;;10249  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
00660c  f44f70ef          MOV      r0,#0x1de
006610  f7fffffe          BL       lc640_write_int
;;;10250  		superviser_cnt++;
006614  48c1              LDR      r0,|L1.26908|
006616  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006618  f1010101          ADD      r1,r1,#1
00661c  7001              STRB     r1,[r0,#0]
                  |L1.26142|
;;;10251  		}
;;;10252  	
;;;10253  	}
;;;10254  
;;;10255  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00661e  48b9              LDR      r0,|L1.26884|
006620  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006624  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006628  4281              CMP      r1,r0
00662a  dc06              BGT      |L1.26170|
00662c  48b7              LDR      r0,|L1.26892|
00662e  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
006632  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006636  4281              CMP      r1,r0
006638  da0e              BGE      |L1.26200|
                  |L1.26170|
00663a  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00663e  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006642  ebc01000          RSB      r0,r0,r0,LSL #4
006646  eb0a0280          ADD      r2,r10,r0,LSL #2
00664a  428a              CMP      r2,r1
00664c  dd04              BLE      |L1.26200|
00664e  eb0b0080          ADD      r0,r11,r0,LSL #2
006652  4288              CMP      r0,r1
006654  da00              BGE      |L1.26200|
006656  7075              STRB     r5,[r6,#1]
                  |L1.26200|
;;;10256  
;;;10257  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006658  49ad              LDR      r1,|L1.26896|
00665a  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00665e  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
006662  ebb00f41          CMP      r0,r1,LSL #1
006666  dc03              BGT      |L1.26224|
006668  4249              RSBS     r1,r1,#0
00666a  ebb00f41          CMP      r0,r1,LSL #1
00666e  da0e              BGE      |L1.26254|
                  |L1.26224|
006670  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006674  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006678  ebc01000          RSB      r0,r0,r0,LSL #4
00667c  eb0a0280          ADD      r2,r10,r0,LSL #2
006680  428a              CMP      r2,r1
006682  dd04              BLE      |L1.26254|
006684  eb0b0080          ADD      r0,r11,r0,LSL #2
006688  4288              CMP      r0,r1
00668a  da00              BGE      |L1.26254|
00668c  707d              STRB     r5,[r7,#1]
                  |L1.26254|
;;;10258  																 
;;;10259  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00668e  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006692  ebc01100          RSB      r1,r0,r0,LSL #4
006696  f06f0009          MVN      r0,#9
00669a  eb000081          ADD      r0,r0,r1,LSL #2
00669e  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0066a2  4288              CMP      r0,r1
0066a4  d122              BNE      |L1.26348|
0066a6  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0066aa  b9f8              CBNZ     r0,|L1.26348|
;;;10260  	{
;;;10261  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0066ac  7870              LDRB     r0,[r6,#1]  ; sign_U
0066ae  2801              CMP      r0,#1
0066b0  d11c              BNE      |L1.26348|
0066b2  7878              LDRB     r0,[r7,#1]  ; sign_I
0066b4  2801              CMP      r0,#1
0066b6  d119              BNE      |L1.26348|
0066b8  f44f75fe          MOV      r5,#0x1fc
0066bc  4628              MOV      r0,r5
0066be  f7fffffe          BL       lc640_read_int
0066c2  4994              LDR      r1,|L1.26900|
0066c4  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
0066c8  4288              CMP      r0,r1
0066ca  d00f              BEQ      |L1.26348|
0066cc  4892              LDR      r0,|L1.26904|
0066ce  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0066d0  2802              CMP      r0,#2
0066d2  d10b              BNE      |L1.26348|
0066d4  f8980089          LDRB     r0,[r8,#0x89]  ; bat
0066d8  07c0              LSLS     r0,r0,#31
0066da  d107              BNE      |L1.26348|
;;;10262  		{
;;;10263  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
0066dc  4628              MOV      r0,r5
0066de  f7fffffe          BL       lc640_write_int
;;;10264  		superviser_cnt++;
0066e2  488e              LDR      r0,|L1.26908|
0066e4  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0066e6  f1010101          ADD      r1,r1,#1
0066ea  7001              STRB     r1,[r0,#0]
                  |L1.26348|
;;;10265  		}
;;;10266  	
;;;10267  	}
;;;10268  
;;;10269  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
0066ec  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0066f0  f06f0101          MVN      r1,#1
0066f4  ebc01000          RSB      r0,r0,r0,LSL #4
0066f8  eb010080          ADD      r0,r1,r0,LSL #2
0066fc  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006700  4288              CMP      r0,r1
006702  d102              BNE      |L1.26378|
006704  e8bd5ff0          POP      {r4-r12,lr}
006708  e7fe              B        zar_superviser_start
                  |L1.26378|
;;;10270  }
00670a  e620              B        |L1.25422|
;;;10271  
                          ENDP

                  npn_hndl PROC
;;;10282  //-----------------------------------------------
;;;10283  void npn_hndl(void)
00670c  e92d03f0          PUSH     {r4-r9}
;;;10284  {
;;;10285  if(NPN_OUT!=npnoOFF)
006710  4883              LDR      r0,|L1.26912|
;;;10286  	{
;;;10287  /*	if(NPN_SIGN==npnsAVNET)
;;;10288  		{
;;;10289  		if(net_av==1)
;;;10290  			{
;;;10291  			if(npn_tz_cnt<TZNPN)
;;;10292  				{
;;;10293  				npn_tz_cnt++;
;;;10294  				if(npn_tz_cnt==TZNPN)
;;;10295  					{
;;;10296  					npn_stat=npnsOFF;
;;;10297  					}
;;;10298  				}
;;;10299  			}
;;;10300  		else
;;;10301  			{
;;;10302  			if(npn_tz_cnt)
;;;10303  				{
;;;10304  				npn_tz_cnt--;
;;;10305  				if(npn_tz_cnt==0)
;;;10306  					{
;;;10307  					npn_stat=npnsON;
;;;10308  					}
;;;10309  				}
;;;10310  			}
;;;10311  		}*/
;;;10312  /*	if(NPN_SIGN==npnsULOAD)
;;;10313  		{
;;;10314  		if(load_U<UONPN)
;;;10315  			{
;;;10316  			if(npn_tz_cnt<TZNPN)
;;;10317  				{
;;;10318  				npn_tz_cnt++;
;;;10319  				if(npn_tz_cnt==TZNPN)
;;;10320  					{
;;;10321  					npn_stat=npnsOFF;
;;;10322  					}
;;;10323  				}
;;;10324  			}
;;;10325  		else if(load_U>UVNPN)
;;;10326  			{
;;;10327  			if(npn_tz_cnt)
;;;10328  				{
;;;10329  				npn_tz_cnt--;
;;;10330  				if(npn_tz_cnt==0)
;;;10331  					{
;;;10332  					npn_stat=npnsON;
;;;10333  					}
;;;10334  				}
;;;10335  			}
;;;10336  		}*/
;;;10337  
;;;10338  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10339  		{
;;;10340  		if(npn_tz_cnt<TZNPN)
006712  4f84              LDR      r7,|L1.26916|
;;;10341  			{
;;;10342  			npn_tz_cnt++;
;;;10343  			if(npn_tz_cnt==TZNPN)
;;;10344  				{
;;;10345  				npn_stat=npnsOFF;
006714  4e84              LDR      r6,|L1.26920|
006716  7800              LDRB     r0,[r0,#0]            ;10285  ; NPN_OUT
006718  f04f0c00          MOV      r12,#0                ;10285
;;;10346  				}
;;;10347  			}
;;;10348  		}
;;;10349  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10350  		{
;;;10351  		if(npn_tz_cnt)
;;;10352  			{
;;;10353  			npn_tz_cnt--;
;;;10354  			if(npn_tz_cnt==0)
;;;10355  				{
;;;10356  				npn_stat=npnsON;
00671c  f04f0801          MOV      r8,#1
006720  b3e8              CBZ      r0,|L1.26526|
006722  4882              LDR      r0,|L1.26924|
006724  4639              MOV      r1,r7                 ;10340
006726  f9b05000          LDRSH    r5,[r0,#0]            ;10338  ; load_U
00672a  4881              LDR      r0,|L1.26928|
00672c  f9b11000          LDRSH    r1,[r1,#0]            ;10340
006730  f9b09000          LDRSH    r9,[r0,#0]            ;10338  ; UONPN
006734  487f              LDR      r0,|L1.26932|
006736  454d              CMP      r5,r9                 ;10338
006738  f9b02000          LDRSH    r2,[r0,#0]            ;10338
00673c  487e              LDR      r0,|L1.26936|
00673e  f9b03000          LDRSH    r3,[r0,#0]            ;10338
006742  487e              LDR      r0,|L1.26940|
006744  f9b04000          LDRSH    r4,[r0,#0]            ;10338
006748  487d              LDR      r0,|L1.26944|
00674a  f9b00000          LDRSH    r0,[r0,#0]            ;10338
00674e  da13              BGE      |L1.26488|
006750  4282              CMP      r2,r0                 ;10338
006752  db03              BLT      |L1.26460|
006754  4283              CMP      r3,r0                 ;10338
006756  db01              BLT      |L1.26460|
006758  4284              CMP      r4,r0                 ;10338
00675a  da0d              BGE      |L1.26488|
                  |L1.26460|
00675c  4879              LDR      r0,|L1.26948|
00675e  f9b02000          LDRSH    r2,[r0,#0]            ;10340  ; TZNPN
006762  4291              CMP      r1,r2                 ;10340
006764  da23              BGE      |L1.26542|
006766  f1010101          ADD      r1,r1,#1              ;10342
00676a  b208              SXTH     r0,r1                 ;10342
00676c  8038              STRH     r0,[r7,#0]            ;10342
00676e  4290              CMP      r0,r2                 ;10343
006770  d11d              BNE      |L1.26542|
006772  f886c000          STRB     r12,[r6,#0]           ;10345
006776  e01a              B        |L1.26542|
                  |L1.26488|
006778  f8dfc1cc          LDR      r12,|L1.26952|
00677c  f9bcc000          LDRSH    r12,[r12,#0]          ;10349  ; UVNPN
006780  4565              CMP      r5,r12                ;10349
006782  dd14              BLE      |L1.26542|
006784  4282              CMP      r2,r0                 ;10349
006786  dd12              BLE      |L1.26542|
006788  4283              CMP      r3,r0                 ;10349
00678a  dd10              BLE      |L1.26542|
00678c  4284              CMP      r4,r0                 ;10349
00678e  dd0e              BLE      |L1.26542|
006790  b169              CBZ      r1,|L1.26542|
006792  f1a10101          SUB      r1,r1,#1              ;10353
006796  b208              SXTH     r0,r1                 ;10353
006798  8038              STRH     r0,[r7,#0]            ;10353
00679a  b940              CBNZ     r0,|L1.26542|
00679c  e000              B        |L1.26528|
                  |L1.26526|
00679e  e002              B        |L1.26534|
                  |L1.26528|
0067a0  f8868000          STRB     r8,[r6,#0]
0067a4  e003              B        |L1.26542|
                  |L1.26534|
;;;10357  				}
;;;10358  			}
;;;10359  		}
;;;10360  	}
;;;10361  else
;;;10362  	{
;;;10363  	npn_tz_cnt=0;
0067a6  f8a7c000          STRH     r12,[r7,#0]
;;;10364  	npn_stat=npnsON;
0067aa  f8868000          STRB     r8,[r6,#0]
                  |L1.26542|
;;;10365  	}
;;;10366  
;;;10367  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0067ae  7830              LDRB     r0,[r6,#0]  ; npn_stat
0067b0  2800              CMP      r0,#0
0067b2  d107              BNE      |L1.26564|
0067b4  e8bd03f0          POP      {r4-r9}
0067b8  230f              MOVS     r3,#0xf
0067ba  2201              MOVS     r2,#1
0067bc  216e              MOVS     r1,#0x6e
0067be  20d2              MOVS     r0,#0xd2
0067c0  f7ffbffe          B.W      mess_send
                  |L1.26564|
;;;10368  
;;;10369  
;;;10370  }
0067c4  e8bd03f0          POP      {r4-r9}
0067c8  4770              BX       lr
;;;10371  
                          ENDP

                  loadoff_hndl PROC
;;;10373  //-----------------------------------------------
;;;10374  void loadoff_hndl(void)
0067ca  b5f0              PUSH     {r4-r7,lr}
;;;10375  {
;;;10376  if((load_U>UONPN)||(load_U<UVNPN))
0067cc  4857              LDR      r0,|L1.26924|
;;;10377  	{
;;;10378  	if(load_off_cnt<TZNPN)
0067ce  4d5f              LDR      r5,|L1.26956|
;;;10379  		{
;;;10380  		load_off_cnt++;
;;;10381  		if(load_off_cnt>=TZNPN)
;;;10382  			{
;;;10383  			load_off_stat=npnsOFF;
0067d0  2700              MOVS     r7,#0
0067d2  f9b01000          LDRSH    r1,[r0,#0]            ;10376  ; load_U
0067d6  4856              LDR      r0,|L1.26928|
0067d8  4e5d              LDR      r6,|L1.26960|
0067da  f9b02000          LDRSH    r2,[r0,#0]            ;10376  ; UONPN
0067de  f9b50000          LDRSH    r0,[r5,#0]            ;10378
0067e2  4291              CMP      r1,r2                 ;10376
0067e4  dc04              BGT      |L1.26608|
0067e6  4b58              LDR      r3,|L1.26952|
0067e8  f9b33000          LDRSH    r3,[r3,#0]            ;10376  ; UVNPN
0067ec  4299              CMP      r1,r3                 ;10376
0067ee  da0d              BGE      |L1.26636|
                  |L1.26608|
0067f0  4954              LDR      r1,|L1.26948|
0067f2  f9b11000          LDRSH    r1,[r1,#0]            ;10378  ; TZNPN
0067f6  4288              CMP      r0,r1                 ;10378
0067f8  da1c              BGE      |L1.26676|
0067fa  f1000001          ADD      r0,r0,#1              ;10380
0067fe  b200              SXTH     r0,r0                 ;10380
006800  8028              STRH     r0,[r5,#0]            ;10380
006802  4288              CMP      r0,r1                 ;10381
006804  db16              BLT      |L1.26676|
006806  7037              STRB     r7,[r6,#0]
;;;10384  			load_off_cnt=TZNPN;
006808  8029              STRH     r1,[r5,#0]
00680a  e013              B        |L1.26676|
                  |L1.26636|
;;;10385  			}
;;;10386  		}
;;;10387  	}
;;;10388  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
00680c  4c51              LDR      r4,|L1.26964|
00680e  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
006812  4423              ADD      r3,r3,r4
006814  428b              CMP      r3,r1
006816  da0d              BGE      |L1.26676|
006818  1b12              SUBS     r2,r2,r4
00681a  428a              CMP      r2,r1
00681c  dd0a              BLE      |L1.26676|
;;;10389  	{
;;;10390  	if(load_off_cnt)
00681e  b148              CBZ      r0,|L1.26676|
;;;10391  		{
;;;10392  		load_off_cnt--;
006820  f1a00001          SUB      r0,r0,#1
006824  b200              SXTH     r0,r0
006826  8028              STRH     r0,[r5,#0]
;;;10393  		if(load_off_cnt<=0)
006828  2800              CMP      r0,#0
00682a  dc03              BGT      |L1.26676|
;;;10394  			{
;;;10395  			load_off_stat=npnsON;
00682c  f04f0001          MOV      r0,#1
006830  7030              STRB     r0,[r6,#0]
;;;10396  			load_off_cnt=0;
006832  802f              STRH     r7,[r5,#0]
                  |L1.26676|
;;;10397  			}
;;;10398  		}
;;;10399  	}
;;;10400  
;;;10401  
;;;10402  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006834  7830              LDRB     r0,[r6,#0]  ; load_off_stat
006836  2800              CMP      r0,#0
006838  d103              BNE      |L1.26690|
00683a  4947              LDR      r1,|L1.26968|
00683c  f04f000a          MOV      r0,#0xa
006840  7008              STRB     r0,[r1,#0]
                  |L1.26690|
;;;10403  
;;;10404  
;;;10405  }
006842  bdf0              POP      {r4-r7,pc}
;;;10406  
                          ENDP

                  speedChargeStartStop PROC
;;;10594  //-----------------------------------------------
;;;10595  void speedChargeStartStop(void)
006844  b538              PUSH     {r3-r5,lr}
;;;10596  {
;;;10597  spch_plazma[1]++;
006846  4c45              LDR      r4,|L1.26972|
006848  7860              LDRB     r0,[r4,#1]  ; spch_plazma
00684a  f1000001          ADD      r0,r0,#1
00684e  7060              STRB     r0,[r4,#1]
;;;10598  /*if(speedChIsOn)
;;;10599  	{
;;;10600  	speedChIsOn=0;
;;;10601  	}
;;;10602  
;;;10603  else
;;;10604  	{
;;;10605  	if(speedChrgBlckStat==0)
;;;10606  		{
;;;10607  		speedChIsOn=1;
;;;10608  		speedChTimeCnt=0;
;;;10609  		}
;;;10610  	else
;;;10611  		{
;;;10612  		show_mess(	"     Ускоренный     ",
;;;10613  	          		"       заряд        ",
;;;10614  	          		"    заблокирован!   ",
;;;10615  	          		"                    ",2000);	 
;;;10616  		}
;;;10617  	}*/
;;;10618  
;;;10619  if(sp_ch_stat!=scsOFF)
006850  4843              LDR      r0,|L1.26976|
006852  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006854  b151              CBZ      r1,|L1.26732|
;;;10620  	{
;;;10621  	sp_ch_stat=scsOFF;
006856  f04f0100          MOV      r1,#0
00685a  7001              STRB     r1,[r0,#0]
;;;10622  	speedz_mem_hndl(10);
00685c  f04f000a          MOV      r0,#0xa
006860  f7fffffe          BL       speedz_mem_hndl
;;;10623  	spch_plazma[1]=10;
006864  f04f000a          MOV      r0,#0xa
006868  7060              STRB     r0,[r4,#1]
                  |L1.26730|
;;;10624  	}
;;;10625  
;;;10626  else
;;;10627  	{
;;;10628  	spch_plazma[1]=20;
;;;10629  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10630  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10631  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10632  		#endif
;;;10633  		)
;;;10634  		{
;;;10635  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10636  		sp_ch_stat=scsSTEP1;
;;;10637  		#else
;;;10638  		sp_ch_stat=scsWRK;
;;;10639  		#endif
;;;10640  		speedz_mem_hndl(1);
;;;10641  		}
;;;10642  	else 
;;;10643  		{
;;;10644  		show_mess(	"     Ускоренный     ",
;;;10645  	          		"       заряд        ",
;;;10646  	          		"    заблокирован!   ",
;;;10647  	          		"                    ",2000);
;;;10648  		}
;;;10649  	}
;;;10650  }
00686a  bd38              POP      {r3-r5,pc}
                  |L1.26732|
00686c  e07a              B        |L1.26980|
00686e  0000              DCW      0x0000
                  |L1.26736|
                          DCD      ||area_number.25||+0x46
                  |L1.26740|
006874  534b2023          DCB      "SK #1 Alarm",0
006878  3120416c
00687c  61726d00
                  |L1.26752|
006880  534b2023          DCB      "SK #2 Alarm",0
006884  3220416c
006888  61726d00
                  |L1.26764|
00688c  534b2023          DCB      "SK #3 Alarm",0
006890  3320416c
006894  61726d00
                  |L1.26776|
006898  534b2023          DCB      "SK #4 Alarm",0
00689c  3420416c
0068a0  61726d00
                  |L1.26788|
0068a4  534b2023          DCB      "SK #1 Alarm is off",0
0068a8  3120416c
0068ac  61726d20
0068b0  6973206f
0068b4  666600  
0068b7  00                DCB      0
                  |L1.26808|
0068b8  534b2023          DCB      "SK #2 Alarm is off",0
0068bc  3220416c
0068c0  61726d20
0068c4  6973206f
0068c8  666600  
0068cb  00                DCB      0
                  |L1.26828|
0068cc  534b2023          DCB      "SK #3 Alarm is off",0
0068d0  3320416c
0068d4  61726d20
0068d8  6973206f
0068dc  666600  
0068df  00                DCB      0
                  |L1.26848|
0068e0  534b2023          DCB      "SK #4 Alarm is off",0
0068e4  3420416c
0068e8  61726d20
0068ec  6973206f
0068f0  666600  
0068f3  00                DCB      0
                  |L1.26868|
                          DCD      NUMSK
                  |L1.26872|
                          DCD      sign_U
                  |L1.26876|
                          DCD      sign_I
                  |L1.26880|
                          DCD      bat
                  |L1.26884|
                          DCD      u_necc_up
                  |L1.26888|
                          DCD      TBAT
                  |L1.26892|
                          DCD      u_necc_dn
                  |L1.26896|
                          DCD      IKB
                  |L1.26900|
                          DCD      BAT_C_REAL
                  |L1.26904|
                          DCD      NUMBAT
                  |L1.26908|
                          DCD      superviser_cnt
                  |L1.26912|
                          DCD      NPN_OUT
                  |L1.26916|
                          DCD      npn_tz_cnt
                  |L1.26920|
                          DCD      npn_stat
                  |L1.26924|
                          DCD      load_U
                  |L1.26928|
                          DCD      UONPN
                  |L1.26932|
                          DCD      net_Ua
                  |L1.26936|
                          DCD      net_Ub
                  |L1.26940|
                          DCD      net_Uc
                  |L1.26944|
                          DCD      UMN
                  |L1.26948|
                          DCD      TZNPN
                  |L1.26952|
                          DCD      UVNPN
                  |L1.26956|
                          DCD      load_off_cnt
                  |L1.26960|
                          DCD      load_off_stat
                  |L1.26964|
                          DCD      dUNPN
                  |L1.26968|
                          DCD      tloaddisable_cmnd
                  |L1.26972|
                          DCD      spch_plazma
                  |L1.26976|
                          DCD      sp_ch_stat
                  |L1.26980|
006964  f04f0114          MOV      r1,#0x14              ;10628
006968  7061              STRB     r1,[r4,#1]            ;10628
00696a  49fa              LDR      r1,|L1.27988|
00696c  f9b12000          LDRSH    r2,[r1,#0]            ;10629  ; speedChrgBlckStat
006970  49f9              LDR      r1,|L1.27992|
006972  f8913023          LDRB     r3,[r1,#0x23]         ;10629  ; spc_stat
006976  ea420203          ORR      r2,r2,r3              ;10629
00697a  794b              LDRB     r3,[r1,#5]            ;10629  ; vz1_stat
00697c  79c9              LDRB     r1,[r1,#7]            ;10629  ; vz2_stat
00697e  ea420203          ORR      r2,r2,r3              ;10629
006982  430a              ORRS     r2,r2,r1              ;10629
006984  d009              BEQ      |L1.27034|
006986  f44f60fa          MOV      r0,#0x7d0             ;10644
00698a  9000              STR      r0,[sp,#0]            ;10644
00698c  4bf3              LDR      r3,|L1.27996|
00698e  a2f4              ADR      r2,|L1.28000|
006990  a1f9              ADR      r1,|L1.28024|
006992  a0ff              ADR      r0,|L1.28048|
006994  f7fffffe          BL       show_mess
006998  e767              B        |L1.26730|
                  |L1.27034|
00699a  f04f0101          MOV      r1,#1                 ;10636
00699e  7001              STRB     r1,[r0,#0]            ;10636
0069a0  e8bd4038          POP      {r3-r5,lr}            ;10640
0069a4  4608              MOV      r0,r1                 ;10640
0069a6  f7ffbffe          B.W      speedz_mem_hndl
;;;10651  
                          ENDP

                  speedChargeHndl PROC
;;;10407  //-----------------------------------------------
;;;10408  void speedChargeHndl(void)
0069aa  e92d4ff8          PUSH     {r3-r11,lr}
;;;10409  {
;;;10410  /*
;;;10411  if(sp_ch_stat==scsOFF)
;;;10412  	{
;;;10413  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10414  	}*/
;;;10415  	 
;;;10416  if(sp_ch_stat==scsSTEP1)
0069ae  4ffe              LDR      r7,|L1.28072|
;;;10417  	{
;;;10418  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10419  		{
;;;10420  		sp_ch_stat_cnt=5;
;;;10421  		if(SP_CH_VENT_BLOK==0)
0069b0  f8dfa3f8          LDR      r10,|L1.28076|
;;;10422  			{
;;;10423  			sp_ch_stat_cnt=0;
;;;10424  			sp_ch_stat=scsWRK;
;;;10425  			}
;;;10426  		}
;;;10427  	if(sp_ch_stat_cnt)
;;;10428  		{
;;;10429  		sp_ch_stat_cnt--;
;;;10430  		if(sp_ch_stat_cnt==0)
;;;10431  			{
;;;10432  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10433  
;;;10434  			}
;;;10435  		}
;;;10436  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0069b4  f8df93f8          LDR      r9,|L1.28080|
0069b8  7839              LDRB     r1,[r7,#0]            ;10416  ; sp_ch_stat
0069ba  f04f0802          MOV      r8,#2                 ;10424
0069be  4efd              LDR      r6,|L1.28084|
0069c0  4cfd              LDR      r4,|L1.28088|
0069c2  2500              MOVS     r5,#0                 ;10421
0069c4  7830              LDRB     r0,[r6,#0]            ;10418
0069c6  2901              CMP      r1,#1                 ;10416
0069c8  d11b              BNE      |L1.27138|
0069ca  2801              CMP      r0,#1                 ;10418
0069cc  d008              BEQ      |L1.27104|
0069ce  f04f0105          MOV      r1,#5                 ;10420
0069d2  8021              STRH     r1,[r4,#0]            ;10420
0069d4  f8ba1000          LDRH     r1,[r10,#0]           ;10421  ; SP_CH_VENT_BLOK
0069d8  b911              CBNZ     r1,|L1.27104|
0069da  8025              STRH     r5,[r4,#0]            ;10423
0069dc  f8878000          STRB     r8,[r7,#0]            ;10424
                  |L1.27104|
0069e0  f9b41000          LDRSH    r1,[r4,#0]            ;10427  ; sp_ch_stat_cnt
0069e4  b139              CBZ      r1,|L1.27126|
0069e6  f1a10101          SUB      r1,r1,#1              ;10429
0069ea  b209              SXTH     r1,r1                 ;10429
0069ec  8021              STRH     r1,[r4,#0]            ;10429
0069ee  b911              CBNZ     r1,|L1.27126|
0069f0  f04f0103          MOV      r1,#3                 ;10432
0069f4  7039              STRB     r1,[r7,#0]            ;10432
                  |L1.27126|
0069f6  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
0069fa  2901              CMP      r1,#1
0069fc  d101              BNE      |L1.27138|
0069fe  f8878000          STRB     r8,[r7,#0]
                  |L1.27138|
;;;10437  	}
;;;10438  
;;;10439  if(sp_ch_stat==scsWRK)
006a02  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006a04  2902              CMP      r1,#2
006a06  d123              BNE      |L1.27216|
;;;10440  	{
;;;10441  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10442  		{
;;;10443  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006a08  4aec              LDR      r2,|L1.28092|
;;;10444  		hv_vz_up_cnt=0;
006a0a  49ed              LDR      r1,|L1.28096|
006a0c  2802              CMP      r0,#2                 ;10441
006a0e  d008              BEQ      |L1.27170|
006a10  48ec              LDR      r0,|L1.28100|
006a12  f44f6361          MOV      r3,#0xe10             ;10443
006a16  f9b00000          LDRSH    r0,[r0,#0]            ;10443  ; speedChrgTimeInHour
006a1a  fb00f003          MUL      r0,r0,r3              ;10443
006a1e  6010              STR      r0,[r2,#0]            ;10443  ; sp_ch_wrk_cnt
006a20  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27170|
;;;10445  		}
;;;10446  	sp_ch_wrk_cnt--;
006a22  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006a24  f1a00001          SUB      r0,r0,#1
006a28  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10447  	hv_vz_up_cnt++;
006a2a  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006a2c  f1020201          ADD      r2,r2,#1
006a30  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10448  	if(sp_ch_wrk_cnt==0)
006a32  b918              CBNZ     r0,|L1.27196|
;;;10449  		{
;;;10450  		sp_ch_stat=scsOFF;
006a34  703d              STRB     r5,[r7,#0]
;;;10451  		speedz_mem_hndl(0);
006a36  2000              MOVS     r0,#0
006a38  f7fffffe          BL       speedz_mem_hndl
                  |L1.27196|
;;;10452  		}
;;;10453  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10454  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006a3c  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006a40  b930              CBNZ     r0,|L1.27216|
006a42  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
006a46  2801              CMP      r0,#1
006a48  d102              BNE      |L1.27216|
006a4a  f04f0004          MOV      r0,#4
006a4e  7038              STRB     r0,[r7,#0]
                  |L1.27216|
;;;10455  	#endif
;;;10456  	}
;;;10457  
;;;10458  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006a50  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10459  	{
;;;10460  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10461  		{
;;;10462  		sp_ch_stat_cnt=10;
;;;10463  		}
;;;10464  	sp_ch_stat_cnt--;
;;;10465  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10466  		{
;;;10467  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006a52  f2413b88          MOV      r11,#0x1388
006a56  f04f0a0a          MOV      r10,#0xa              ;10462
006a5a  2803              CMP      r0,#3                 ;10458
006a5c  d119              BNE      |L1.27282|
006a5e  7830              LDRB     r0,[r6,#0]            ;10460  ; sp_ch_stat_old
006a60  2803              CMP      r0,#3                 ;10460
006a62  d101              BNE      |L1.27240|
006a64  8820              LDRH     r0,[r4,#0]            ;10460  ; sp_ch_stat_cnt
006a66  b908              CBNZ     r0,|L1.27244|
                  |L1.27240|
006a68  f8a4a000          STRH     r10,[r4,#0]           ;10462
                  |L1.27244|
006a6c  8820              LDRH     r0,[r4,#0]            ;10464  ; sp_ch_stat_cnt
006a6e  f1a00001          SUB      r0,r0,#1              ;10464
006a72  b200              SXTH     r0,r0                 ;10464
006a74  8020              STRH     r0,[r4,#0]            ;10464
006a76  280a              CMP      r0,#0xa               ;10465
006a78  d001              BEQ      |L1.27262|
006a7a  2809              CMP      r0,#9                 ;10465
006a7c  d109              BNE      |L1.27282|
                  |L1.27262|
006a7e  4bd2              LDR      r3,|L1.28104|
006a80  a0d2              ADR      r0,|L1.28108|
006a82  f1030218          ADD      r2,r3,#0x18
006a86  f1020118          ADD      r1,r2,#0x18
006a8a  f8cdb000          STR      r11,[sp,#0]
006a8e  f7fffffe          BL       show_mess
                  |L1.27282|
;;;10468  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10469  					"      ВКЛЮЧЕН       ",
;;;10470  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10471  					5000);
;;;10472  		}
;;;10473  	}
;;;10474  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
006a92  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006a94  2804              CMP      r0,#4
006a96  d11f              BNE      |L1.27352|
;;;10475  	{
;;;10476  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
006a98  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
006a9a  2804              CMP      r0,#4
006a9c  d101              BNE      |L1.27298|
006a9e  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006aa0  b908              CBNZ     r0,|L1.27302|
                  |L1.27298|
;;;10477  		{
;;;10478  		sp_ch_stat_cnt=10;
006aa2  f8a4a000          STRH     r10,[r4,#0]
                  |L1.27302|
;;;10479  		}
;;;10480  	sp_ch_stat_cnt--;
006aa6  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006aa8  f1a00001          SUB      r0,r0,#1
006aac  b200              SXTH     r0,r0
006aae  8020              STRH     r0,[r4,#0]
;;;10481  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
006ab0  280a              CMP      r0,#0xa
006ab2  d001              BEQ      |L1.27320|
006ab4  2809              CMP      r0,#9
006ab6  d109              BNE      |L1.27340|
                  |L1.27320|
;;;10482  		{
;;;10483  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006ab8  4bca              LDR      r3,|L1.28132|
006aba  a0c4              ADR      r0,|L1.28108|
006abc  f1030218          ADD      r2,r3,#0x18
006ac0  f1020118          ADD      r1,r2,#0x18
006ac4  f8cdb000          STR      r11,[sp,#0]
006ac8  f7fffffe          BL       show_mess
                  |L1.27340|
;;;10484  					"    ЗАБЛОКИРОВАН    ",
;;;10485  					"     НЕИСПРАВНА     ",
;;;10486  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10487  					5000);
;;;10488  		}
;;;10489  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006acc  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006ad0  2801              CMP      r0,#1
006ad2  d101              BNE      |L1.27352|
006ad4  f8878000          STRB     r8,[r7,#0]
                  |L1.27352|
;;;10490  	}
;;;10491  
;;;10492  
;;;10493  sp_ch_stat_old=sp_ch_stat;
006ad8  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006ada  7030              STRB     r0,[r6,#0]
;;;10494  
;;;10495  
;;;10496  
;;;10497  if(speedChrgAvtEn==1)
006adc  49c2              LDR      r1,|L1.28136|
;;;10498  	{
;;;10499  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10500  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10501  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10502  		#endif
;;;10503  		)
;;;10504  		{
;;;10505  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10506  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10507  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10508  		#endif
;;;10509  		#ifdef UKU_220_V2
;;;10510  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10511  		#endif
;;;10512  		&&(!speedChrgBlckStat))
006ade  4c9d              LDR      r4,|L1.27988|
006ae0  8809              LDRH     r1,[r1,#0]            ;10497  ; speedChrgAvtEn
006ae2  2901              CMP      r1,#1                 ;10497
006ae4  d10a              BNE      |L1.27388|
006ae6  499c              LDR      r1,|L1.27992|
;;;10513  			{
;;;10514  			speedChargeStartCnt++;
006ae8  4ec0              LDR      r6,|L1.28140|
006aea  f8912023          LDRB     r2,[r1,#0x23]         ;10499  ; spc_stat
006aee  4310              ORRS     r0,r0,r2              ;10499
006af0  794a              LDRB     r2,[r1,#5]            ;10499  ; vz1_stat
006af2  79c9              LDRB     r1,[r1,#7]            ;10499  ; vz2_stat
006af4  4310              ORRS     r0,r0,r2              ;10499
006af6  4308              ORRS     r0,r0,r1              ;10499
006af8  d007              BEQ      |L1.27402|
;;;10515  			if(speedChargeStartCnt>=60)
;;;10516  				{
;;;10517  				speedChargeStartStop();
;;;10518  				speedz_mem_hndl(5);
;;;10519  				}
;;;10520  			}
;;;10521  		else speedChargeStartCnt=0;
;;;10522  		}
;;;10523  	else speedChargeStartCnt=0;
006afa  7035              STRB     r5,[r6,#0]
                  |L1.27388|
;;;10524  	}
;;;10525  
;;;10526  
;;;10527  
;;;10528  /*
;;;10529  if(speedChIsOn)
;;;10530  	{
;;;10531  	speedChTimeCnt++;
;;;10532  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10533  		{
;;;10534  		speedChIsOn=0;
;;;10535  		}
;;;10536  	if(speedChrgBlckStat)
;;;10537  		{
;;;10538  		speedChIsOn=0;
;;;10539  		speedChTimeCnt=0;
;;;10540  		}
;;;10541  	}
;;;10542  
;;;10543  
;;;10544  
;;;10545  if(speedChrgAvtEn)
;;;10546  	{
;;;10547  	if(!speedChIsOn)
;;;10548  		{
;;;10549  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10550  			{
;;;10551  			speedChIsOn=1;
;;;10552  			}
;;;10553  		}
;;;10554  	}
;;;10555  
;;;10556  
;;;10557  */
;;;10558  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006afc  48bc              LDR      r0,|L1.28144|
006afe  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006b00  2802              CMP      r0,#2
006b02  d02e              BEQ      |L1.27490|
006b04  8025              STRH     r5,[r4,#0]
                  |L1.27398|
;;;10559  else
;;;10560  	{
;;;10561  	speedChrgBlckStat=0;
;;;10562  	if(speedChrgBlckSrc==1)
;;;10563  		{
;;;10564  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10565  		}
;;;10566  	else if(speedChrgBlckSrc==2)
;;;10567  		{
;;;10568  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10569  		}
;;;10570  	}
;;;10571  
;;;10572  /*
;;;10573  if(speedChrgBlckStat==1)
;;;10574  	{
;;;10575  
;;;10576  	//speedChargeStartStop();
;;;10577  
;;;10578  	speedChrgShowCnt++;
;;;10579  	if(speedChrgShowCnt>=30)	
;;;10580  		{
;;;10581  		speedChrgShowCnt=0;
;;;10582  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10583  					"       ЗАРЯД        ",
;;;10584  					"     ЗАПРЕЩЕН!!!    ",
;;;10585  					"                    ",
;;;10586  					5000);
;;;10587  		}
;;;10588  	} 
;;;10589  else speedChrgShowCnt=0;  */
;;;10590  
;;;10591  
;;;10592  }
006b06  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.27402|
006b0a  48ba              LDR      r0,|L1.28148|
006b0c  49ba              LDR      r1,|L1.28152|
006b0e  f9b00000          LDRSH    r0,[r0,#0]            ;10505  ; load_U
006b12  f9b11000          LDRSH    r1,[r1,#0]            ;10505  ; u_necc
006b16  4288              CMP      r0,r1                 ;10505
006b18  da14              BGE      |L1.27460|
006b1a  1a08              SUBS     r0,r1,r0              ;10505
006b1c  49b7              LDR      r1,|L1.28156|
006b1e  f9b11000          LDRSH    r1,[r1,#0]            ;10505  ; speedChrgDU
006b22  4288              CMP      r0,r1                 ;10505
006b24  dd0e              BLE      |L1.27460|
006b26  48b6              LDR      r0,|L1.28160|
006b28  49b6              LDR      r1,|L1.28164|
006b2a  f9b00000          LDRSH    r0,[r0,#0]            ;10507  ; Ib_ips_termokompensat
006b2e  8809              LDRH     r1,[r1,#0]            ;10507  ; IZMAX
006b30  fb90f0fa          SDIV     r0,r0,r10             ;10507
006b34  1a40              SUBS     r0,r0,r1              ;10507
006b36  b200              SXTH     r0,r0                 ;10507
006b38  f7fffffe          BL       abs
006b3c  2805              CMP      r0,#5                 ;10507
006b3e  da01              BGE      |L1.27460|
006b40  8820              LDRH     r0,[r4,#0]            ;10512  ; speedChrgBlckStat
006b42  b108              CBZ      r0,|L1.27464|
                  |L1.27460|
006b44  7035              STRB     r5,[r6,#0]            ;10521
006b46  e7d9              B        |L1.27388|
                  |L1.27464|
006b48  7830              LDRB     r0,[r6,#0]            ;10514  ; speedChargeStartCnt
006b4a  f1000001          ADD      r0,r0,#1              ;10514
006b4e  b2c0              UXTB     r0,r0                 ;10514
006b50  7030              STRB     r0,[r6,#0]            ;10514
006b52  283c              CMP      r0,#0x3c              ;10515
006b54  d3d2              BCC      |L1.27388|
006b56  f7fffffe          BL       speedChargeStartStop
006b5a  2005              MOVS     r0,#5                 ;10518
006b5c  f7fffffe          BL       speedz_mem_hndl
006b60  e7cc              B        |L1.27388|
                  |L1.27490|
006b62  8025              STRH     r5,[r4,#0]            ;10561
006b64  48a8              LDR      r0,|L1.28168|
006b66  49a9              LDR      r1,|L1.28172|
006b68  f44f63fa          MOV      r3,#0x7d0             ;10564
006b6c  f9b00000          LDRSH    r0,[r0,#0]            ;10568  ; speedChrgBlckLog
006b70  b918              CBNZ     r0,|L1.27514|
006b72  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10568  ; adc_buff_
006b76  429a              CMP      r2,r3                 ;10568
006b78  dc05              BGT      |L1.27526|
                  |L1.27514|
006b7a  2801              CMP      r0,#1                 ;10568
006b7c  d1c3              BNE      |L1.27398|
006b7e  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10568  ; adc_buff_
006b82  4298              CMP      r0,r3                 ;10568
006b84  dabf              BGE      |L1.27398|
                  |L1.27526|
006b86  f04f0001          MOV      r0,#1                 ;10568
006b8a  8020              STRH     r0,[r4,#0]            ;10568
006b8c  e7bb              B        |L1.27398|
;;;10593  
                          ENDP

                  averageChargeHndl PROC
;;;10652  //-----------------------------------------------
;;;10653  void averageChargeHndl(void)
006b8e  e92d4ff8          PUSH     {r3-r11,lr}
;;;10654  {
;;;10655  /*
;;;10656  if(hv_vz_stat==hvsOFF)
;;;10657  	{
;;;10658  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10659  	} */
;;;10660  if(hv_vz_stat!=hvsOFF)
006b92  f8dfa27c          LDR      r10,|L1.28176|
006b96  f04f0b00          MOV      r11,#0
006b9a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006b9e  b130              CBZ      r0,|L1.27566|
;;;10661  	{
;;;10662  	hv_vz_stat=hvsOFF; 	
006ba0  f88ab000          STRB     r11,[r10,#0]
;;;10663  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006ba4  2100              MOVS     r1,#0
006ba6  f44f70b4          MOV      r0,#0x168
006baa  f7fffffe          BL       lc640_write
                  |L1.27566|
;;;10664  	}
;;;10665  
;;;10666  if(hv_vz_stat==hvsSTEP1)
006bae  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10667  	{
;;;10668  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10669  		{
;;;10670  		hv_vz_stat_cnt=5;
;;;10671  		}
;;;10672  	if(hv_vz_stat_cnt)
;;;10673  		{
;;;10674  		hv_vz_stat_cnt--;
;;;10675  		if(hv_vz_stat_cnt==0)
;;;10676  			{
;;;10677  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10678  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10679  			}
;;;10680  		}
;;;10681  	if(sk_stat[0]==1)
006bb2  4e7f              LDR      r6,|L1.28080|
006bb4  4d97              LDR      r5,|L1.28180|
006bb6  4c98              LDR      r4,|L1.28184|
006bb8  f04f0905          MOV      r9,#5                 ;10670
006bbc  2801              CMP      r0,#1                 ;10666
006bbe  d131              BNE      |L1.27684|
006bc0  7828              LDRB     r0,[r5,#0]            ;10668  ; hv_vz_stat_old
006bc2  2801              CMP      r0,#1                 ;10668
006bc4  d001              BEQ      |L1.27594|
006bc6  f8a49000          STRH     r9,[r4,#0]            ;10670
                  |L1.27594|
006bca  f9b40000          LDRSH    r0,[r4,#0]            ;10672  ; hv_vz_stat_cnt
006bce  b168              CBZ      r0,|L1.27628|
006bd0  f1a00001          SUB      r0,r0,#1              ;10674
006bd4  b200              SXTH     r0,r0                 ;10674
006bd6  8020              STRH     r0,[r4,#0]            ;10674
006bd8  b940              CBNZ     r0,|L1.27628|
006bda  f04f0006          MOV      r0,#6                 ;10677
006bde  f88a0000          STRB     r0,[r10,#0]           ;10677
006be2  4601              MOV      r1,r0                 ;10678
006be4  f44f70b4          MOV      r0,#0x168             ;10678
006be8  f7fffffe          BL       lc640_write
                  |L1.27628|
006bec  7830              LDRB     r0,[r6,#0]  ; sk_stat
006bee  2801              CMP      r0,#1
006bf0  d118              BNE      |L1.27684|
;;;10682  		{
;;;10683  		hv_vz_stat=hvsSTEP2;
006bf2  f04f0002          MOV      r0,#2
006bf6  f88a0000          STRB     r0,[r10,#0]
;;;10684  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006bfa  4601              MOV      r1,r0
006bfc  f44f70b4          MOV      r0,#0x168
006c00  f7fffffe          BL       lc640_write
;;;10685  		tree_up(iHV_STEP2_2,1,0,0);
006c04  2300              MOVS     r3,#0
006c06  461a              MOV      r2,r3
006c08  2101              MOVS     r1,#1
006c0a  20df              MOVS     r0,#0xdf
006c0c  f7fffffe          BL       tree_up
;;;10686  		tree_up(iHV_STEP2_1,0,0,0);
006c10  2300              MOVS     r3,#0
006c12  461a              MOV      r2,r3
006c14  4619              MOV      r1,r3
006c16  20de              MOVS     r0,#0xde
006c18  f7fffffe          BL       tree_up
;;;10687  		ret(1200);
006c1c  f44f6096          MOV      r0,#0x4b0
006c20  f7fffffe          BL       ||ret||
                  |L1.27684|
;;;10688  		}
;;;10689  	}
;;;10690  
;;;10691  if(hv_vz_stat==hvsSTEP2)
006c24  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c28  2802              CMP      r0,#2
006c2a  d10b              BNE      |L1.27716|
;;;10692  	{
;;;10693  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006c2c  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006c2e  2902              CMP      r1,#2
006c30  d101              BNE      |L1.27702|
006c32  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006c34  b911              CBNZ     r1,|L1.27708|
                  |L1.27702|
;;;10694  		{
;;;10695  		hv_vz_stat_cnt=15;
006c36  f04f010f          MOV      r1,#0xf
006c3a  8021              STRH     r1,[r4,#0]
                  |L1.27708|
;;;10696  		}
;;;10697  	hv_vz_stat_cnt--;
006c3c  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006c3e  f1a10101          SUB      r1,r1,#1
006c42  8021              STRH     r1,[r4,#0]
                  |L1.27716|
;;;10698  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10699  	//	{
;;;10700  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10701  	//				"  Напряжение будет  ",
;;;10702  	//				" увеличено до     @В",
;;;10703  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10704  	//				4800,UVZ,1);
;;;10705  	//	}
;;;10706  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10707  	//	{
;;;10708  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10709  	//				"     НАЖАТИЕМ       ",
;;;10710  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10711  	//				"      КНОПКИ        ",
;;;10712  	//				4800);
;;;10713  	//	} 
;;;10714  /*	if(sk_stat[1]==1)
;;;10715  		{
;;;10716  		hv_vz_stat=hvsWRK;
;;;10717  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10718  		}*/
;;;10719  	}
;;;10720  
;;;10721  if(hv_vz_stat==hvsSTEP3)
;;;10722  	{
;;;10723  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10724  		{
;;;10725  		hv_vz_stat_cnt=10;
006c44  270a              MOVS     r7,#0xa
;;;10726  		}
;;;10727  	hv_vz_stat_cnt--;
;;;10728  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10729  		{
;;;10730  		show_mess(	"     ВКЛЮЧИТЕ       ",
006c46  f2413888          MOV      r8,#0x1388
006c4a  2803              CMP      r0,#3                 ;10721
006c4c  d123              BNE      |L1.27798|
006c4e  7828              LDRB     r0,[r5,#0]            ;10723  ; hv_vz_stat_old
006c50  2803              CMP      r0,#3                 ;10723
006c52  d101              BNE      |L1.27736|
006c54  8820              LDRH     r0,[r4,#0]            ;10723  ; hv_vz_stat_cnt
006c56  b900              CBNZ     r0,|L1.27738|
                  |L1.27736|
006c58  8027              STRH     r7,[r4,#0]            ;10725
                  |L1.27738|
006c5a  8820              LDRH     r0,[r4,#0]            ;10727  ; hv_vz_stat_cnt
006c5c  f1a00001          SUB      r0,r0,#1              ;10727
006c60  b200              SXTH     r0,r0                 ;10727
006c62  8020              STRH     r0,[r4,#0]            ;10727
006c64  280a              CMP      r0,#0xa               ;10728
006c66  d001              BEQ      |L1.27756|
006c68  2809              CMP      r0,#9                 ;10728
006c6a  d10a              BNE      |L1.27778|
                  |L1.27756|
006c6c  4b3b              LDR      r3,|L1.27996|
006c6e  a26b              ADR      r2,|L1.28188|
006c70  3b48              SUBS     r3,r3,#0x48
006c72  f5a361bf          SUB      r1,r3,#0x5f8
006c76  f1010018          ADD      r0,r1,#0x18
006c7a  f8cd8000          STR      r8,[sp,#0]
006c7e  f7fffffe          BL       show_mess
                  |L1.27778|
;;;10731  					"      ТУМБЛЕР       ",
;;;10732  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10733  					"       ЗАРЯД        ",
;;;10734  					5000);
;;;10735  		}
;;;10736  	if(sk_stat[1]==1)
006c82  7870              LDRB     r0,[r6,#1]  ; sk_stat
006c84  2801              CMP      r0,#1
006c86  d106              BNE      |L1.27798|
;;;10737  		{
;;;10738  		hv_vz_stat=hvsWRK;
006c88  f88a9000          STRB     r9,[r10,#0]
;;;10739  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006c8c  2105              MOVS     r1,#5
006c8e  f44f70b4          MOV      r0,#0x168
006c92  f7fffffe          BL       lc640_write
                  |L1.27798|
;;;10740  		}
;;;10741  	}
;;;10742  
;;;10743  if(hv_vz_stat==hvsWRK)
006c96  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c9a  2805              CMP      r0,#5
006c9c  d13a              BNE      |L1.27924|
;;;10744  	{
;;;10745  	if(hv_vz_stat_old!=hv_vz_stat)
006c9e  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10746  		{
;;;10747  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006ca0  4a64              LDR      r2,|L1.28212|
;;;10748  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10749  		hv_vz_up_cnt=0L;
006ca2  4947              LDR      r1,|L1.28096|
006ca4  2805              CMP      r0,#5                 ;10745
006ca6  d00d              BEQ      |L1.27844|
006ca8  4863              LDR      r0,|L1.28216|
006caa  f44f6361          MOV      r3,#0xe10             ;10747
006cae  f9b00000          LDRSH    r0,[r0,#0]            ;10747  ; VZ_HR
006cb2  fb00f303          MUL      r3,r0,r3              ;10747
006cb6  6013              STR      r3,[r2,#0]            ;10747  ; hv_vz_wrk_cnt
006cb8  b910              CBNZ     r0,|L1.27840|
006cba  f44f60e1          MOV      r0,#0x708             ;10748
006cbe  6010              STR      r0,[r2,#0]            ;10748  ; hv_vz_wrk_cnt
                  |L1.27840|
006cc0  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27844|
;;;10750  		}
;;;10751  	hv_vz_wrk_cnt--;
006cc4  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006cc6  f1a00001          SUB      r0,r0,#1
006cca  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10752  	hv_vz_up_cnt++;
006ccc  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006cce  f1020201          ADD      r2,r2,#1
006cd2  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10753  
;;;10754  	if(hv_vz_wrk_cnt==0)
006cd4  b940              CBNZ     r0,|L1.27880|
;;;10755  		{
;;;10756  		hv_vz_stat=hvsERR4;
006cd6  f04f0009          MOV      r0,#9
006cda  f88a0000          STRB     r0,[r10,#0]
;;;10757  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006cde  4601              MOV      r1,r0
006ce0  f44f70b4          MOV      r0,#0x168
006ce4  f7fffffe          BL       lc640_write
                  |L1.27880|
;;;10758  		}
;;;10759  	if(sk_stat[0]==0)
006ce8  7830              LDRB     r0,[r6,#0]  ; sk_stat
006cea  b940              CBNZ     r0,|L1.27902|
;;;10760  		{
;;;10761  		hv_vz_stat=hvsERR2;
006cec  f04f0007          MOV      r0,#7
006cf0  f88a0000          STRB     r0,[r10,#0]
;;;10762  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006cf4  4601              MOV      r1,r0
006cf6  f44f70b4          MOV      r0,#0x168
006cfa  f7fffffe          BL       lc640_write
                  |L1.27902|
;;;10763  		}
;;;10764  	if(sk_stat[1]==0)
006cfe  7870              LDRB     r0,[r6,#1]  ; sk_stat
006d00  b940              CBNZ     r0,|L1.27924|
;;;10765  		{
;;;10766  		hv_vz_stat=hvsERR3;
006d02  f04f0008          MOV      r0,#8
006d06  f88a0000          STRB     r0,[r10,#0]
;;;10767  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006d0a  4601              MOV      r1,r0
006d0c  f44f70b4          MOV      r0,#0x168
006d10  f7fffffe          BL       lc640_write
                  |L1.27924|
;;;10768  		}
;;;10769  	}
;;;10770  
;;;10771  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006d14  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006d18  2806              CMP      r0,#6
006d1a  d119              BNE      |L1.27984|
;;;10772  	{
;;;10773  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006d1c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006d1e  2806              CMP      r0,#6
006d20  d101              BNE      |L1.27942|
006d22  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006d24  b900              CBNZ     r0,|L1.27944|
                  |L1.27942|
;;;10774  		{
;;;10775  		hv_vz_stat_cnt=10;
006d26  8027              STRH     r7,[r4,#0]
                  |L1.27944|
;;;10776  		}
;;;10777  	hv_vz_stat_cnt--;
006d28  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006d2a  f1a00001          SUB      r0,r0,#1
006d2e  b200              SXTH     r0,r0
006d30  8020              STRH     r0,[r4,#0]
;;;10778  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006d32  280a              CMP      r0,#0xa
006d34  d001              BEQ      |L1.27962|
006d36  2809              CMP      r0,#9
006d38  d10a              BNE      |L1.27984|
                  |L1.27962|
;;;10779  		{
;;;10780  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006d3a  4b23              LDR      r3,|L1.28104|
006d3c  f8cd8000          STR      r8,[sp,#0]
006d40  f1030218          ADD      r2,r3,#0x18
006d44  f1020118          ADD      r1,r2,#0x18
006d48  f2a15084          SUB      r0,r1,#0x584
006d4c  f7fffffe          BL       show_mess
                  |L1.27984|
;;;10781  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10782  					"      ВКЛЮЧЕН       ",
;;;10783  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10784  					5000);
;;;10785  		}
;;;10786  	}
;;;10787  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006d50  e074              B        |L1.28220|
006d52  0000              DCW      0x0000
                  |L1.27988|
                          DCD      speedChrgBlckStat
                  |L1.27992|
                          DCD      ||area_number.25||
                  |L1.27996|
                          DCD      ||.text||+0x1d64
                  |L1.28000|
006d60  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006d64  e7e0e1eb
006d68  eeeae8f0
006d6c  eee2e0ed
006d70  21      
006d71  20202000          DCB      "   ",0
006d75  00                DCB      0
006d76  00                DCB      0
006d77  00                DCB      0
                  |L1.28024|
006d78  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006d7c  202020e7
006d80  e0f0ffe4
006d84  20202020
006d88  20202020
006d8c  00      
006d8d  00                DCB      0
006d8e  00                DCB      0
006d8f  00                DCB      0
                  |L1.28048|
006d90  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006d94  20d3f1ea
006d98  eef0e5ed
006d9c  edfbe920
006da0  20202020
006da4  00      
006da5  00                DCB      0
006da6  00                DCB      0
006da7  00                DCB      0
                  |L1.28072|
                          DCD      sp_ch_stat
                  |L1.28076|
                          DCD      SP_CH_VENT_BLOK
                  |L1.28080|
                          DCD      sk_stat
                  |L1.28084|
                          DCD      sp_ch_stat_old
                  |L1.28088|
                          DCD      sp_ch_stat_cnt
                  |L1.28092|
                          DCD      sp_ch_wrk_cnt
                  |L1.28096|
                          DCD      hv_vz_up_cnt
                  |L1.28100|
                          DCD      speedChrgTimeInHour
                  |L1.28104|
                          DCD      ||.text||+0x1c2c
                  |L1.28108|
006dcc  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006dd0  caced0c5
006dd4  cdcddbc9
006dd8  20c7c0  
006ddb  d0dfc420          DCB      208,223,196,"  ",0
006ddf  2000    
006de1  00                DCB      0
006de2  00                DCB      0
006de3  00                DCB      0
                  |L1.28132|
                          DCD      ||.text||+0x1690
                  |L1.28136|
                          DCD      speedChrgAvtEn
                  |L1.28140|
                          DCD      speedChargeStartCnt
                  |L1.28144|
                          DCD      speedChrgBlckSrc
                  |L1.28148|
                          DCD      load_U
                  |L1.28152|
                          DCD      u_necc
                  |L1.28156|
                          DCD      speedChrgDU
                  |L1.28160|
                          DCD      Ib_ips_termokompensat
                  |L1.28164|
                          DCD      IZMAX
                  |L1.28168|
                          DCD      speedChrgBlckLog
                  |L1.28172|
                          DCD      ||.bss||+0x40c
                  |L1.28176|
                          DCD      hv_vz_stat
                  |L1.28180|
                          DCD      hv_vz_stat_old
                  |L1.28184|
                          DCD      hv_vz_stat_cnt
                  |L1.28188|
006e1c  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006e20  dbd0c0c2
006e24  cdc8c2c0
006e28  ded9c8c9
006e2c  20202020          DCB      "    ",0
006e30  00      
006e31  00                DCB      0
006e32  00                DCB      0
006e33  00                DCB      0
                  |L1.28212|
                          DCD      hv_vz_wrk_cnt
                  |L1.28216|
                          DCD      VZ_HR
                  |L1.28220|
006e3c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e40  2807              CMP      r0,#7
006e42  d123              BNE      |L1.28300|
;;;10788  	{
;;;10789  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e44  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006e46  2807              CMP      r0,#7
006e48  d101              BNE      |L1.28238|
006e4a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e4c  b900              CBNZ     r0,|L1.28240|
                  |L1.28238|
;;;10790  		{
;;;10791  		hv_vz_stat_cnt=10;
006e4e  8027              STRH     r7,[r4,#0]
                  |L1.28240|
;;;10792  		}
;;;10793  	hv_vz_stat_cnt--;
006e50  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e52  f1a00001          SUB      r0,r0,#1
006e56  b200              SXTH     r0,r0
006e58  8020              STRH     r0,[r4,#0]
;;;10794  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006e5a  280a              CMP      r0,#0xa
006e5c  d001              BEQ      |L1.28258|
006e5e  2809              CMP      r0,#9
006e60  d10a              BNE      |L1.28280|
                  |L1.28258|
;;;10795  		{
;;;10796  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006e62  4bff              LDR      r3,|L1.29280|
006e64  f8cd8000          STR      r8,[sp,#0]
006e68  f1030218          ADD      r2,r3,#0x18
006e6c  f1020118          ADD      r1,r2,#0x18
006e70  f1010018          ADD      r0,r1,#0x18
006e74  f7fffffe          BL       show_mess
                  |L1.28280|
;;;10797  					"    ЗАБЛОКИРОВАН    ",
;;;10798  					"     НЕИСПРАВНА     ",
;;;10799  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10800  					5000);
;;;10801  		}
;;;10802  	if(sk_stat[0]==1)
006e78  7830              LDRB     r0,[r6,#0]  ; sk_stat
006e7a  2801              CMP      r0,#1
006e7c  d106              BNE      |L1.28300|
;;;10803  		{
;;;10804  		hv_vz_stat=hvsWRK;
006e7e  f88a9000          STRB     r9,[r10,#0]
;;;10805  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006e82  2105              MOVS     r1,#5
006e84  f44f70b4          MOV      r0,#0x168
006e88  f7fffffe          BL       lc640_write
                  |L1.28300|
;;;10806  		}
;;;10807  	}
;;;10808  
;;;10809  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006e8c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e90  2808              CMP      r0,#8
006e92  d123              BNE      |L1.28380|
;;;10810  	{
;;;10811  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e94  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006e96  2808              CMP      r0,#8
006e98  d101              BNE      |L1.28318|
006e9a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e9c  b900              CBNZ     r0,|L1.28320|
                  |L1.28318|
;;;10812  		{
;;;10813  		hv_vz_stat_cnt=10;
006e9e  8027              STRH     r7,[r4,#0]
                  |L1.28320|
;;;10814  		}
;;;10815  	hv_vz_stat_cnt--;
006ea0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ea2  f1a00001          SUB      r0,r0,#1
006ea6  b200              SXTH     r0,r0
006ea8  8020              STRH     r0,[r4,#0]
;;;10816  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006eaa  280a              CMP      r0,#0xa
006eac  d001              BEQ      |L1.28338|
006eae  2809              CMP      r0,#9
006eb0  d10a              BNE      |L1.28360|
                  |L1.28338|
;;;10817  		{
;;;10818  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006eb2  4bec              LDR      r3,|L1.29284|
006eb4  f8cd8000          STR      r8,[sp,#0]
006eb8  f2a35254          SUB      r2,r3,#0x554
006ebc  f1020118          ADD      r1,r2,#0x18
006ec0  f2a150e4          SUB      r0,r1,#0x5e4
006ec4  f7fffffe          BL       show_mess
                  |L1.28360|
;;;10819  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10820  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10821  					"    ТУМБЛЕРА!!!     ",
;;;10822  					5000);
;;;10823  		}
;;;10824  	if(sk_stat[1]==1)
006ec8  7870              LDRB     r0,[r6,#1]  ; sk_stat
006eca  2801              CMP      r0,#1
006ecc  d106              BNE      |L1.28380|
;;;10825  		{
;;;10826  		hv_vz_stat=hvsWRK;
006ece  f88a9000          STRB     r9,[r10,#0]
;;;10827  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006ed2  2105              MOVS     r1,#5
006ed4  f44f70b4          MOV      r0,#0x168
006ed8  f7fffffe          BL       lc640_write
                  |L1.28380|
;;;10828  		}
;;;10829  	}
;;;10830  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006edc  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006ee0  2809              CMP      r0,#9
006ee2  d124              BNE      |L1.28462|
;;;10831  	{
;;;10832  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006ee4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006ee6  2809              CMP      r0,#9
006ee8  d101              BNE      |L1.28398|
006eea  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006eec  b900              CBNZ     r0,|L1.28400|
                  |L1.28398|
;;;10833  		{
;;;10834  		hv_vz_stat_cnt=10;
006eee  8027              STRH     r7,[r4,#0]
                  |L1.28400|
;;;10835  		}
;;;10836  	hv_vz_stat_cnt--;
006ef0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ef2  f1a00001          SUB      r0,r0,#1
006ef6  b200              SXTH     r0,r0
006ef8  8020              STRH     r0,[r4,#0]
;;;10837  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006efa  280a              CMP      r0,#0xa
006efc  d001              BEQ      |L1.28418|
006efe  2809              CMP      r0,#9
006f00  d10a              BNE      |L1.28440|
                  |L1.28418|
;;;10838  		{
;;;10839  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006f02  4bd9              LDR      r3,|L1.29288|
006f04  f2af02ec          ADR      r2,|L1.28188|
006f08  f5a361bf          SUB      r1,r3,#0x5f8
006f0c  f50160c5          ADD      r0,r1,#0x628
006f10  f8cd8000          STR      r8,[sp,#0]
006f14  f7fffffe          BL       show_mess
                  |L1.28440|
;;;10840  					"      ТУМБЛЕР       ",
;;;10841  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10842  					"       ЗАРЯД        ",
;;;10843  					5000);
;;;10844  		}
;;;10845  	if(sk_stat[1]==0)
006f18  7870              LDRB     r0,[r6,#1]  ; sk_stat
006f1a  b940              CBNZ     r0,|L1.28462|
;;;10846  		{
;;;10847  		hv_vz_stat=hvsOFF;
006f1c  f88ab000          STRB     r11,[r10,#0]
;;;10848  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006f20  2100              MOVS     r1,#0
006f22  f44f70b4          MOV      r0,#0x168
006f26  f7fffffe          BL       lc640_write
;;;10849  		vz_stop();
006f2a  f7fffffe          BL       vz_stop
                  |L1.28462|
;;;10850  
;;;10851  		}
;;;10852  	}
;;;10853  hv_vz_stat_old=hv_vz_stat;
006f2e  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006f32  7028              STRB     r0,[r5,#0]
;;;10854  /*
;;;10855  if(speedChIsOn)
;;;10856  	{
;;;10857  	speedChTimeCnt++;
;;;10858  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10859  		{
;;;10860  		speedChIsOn=0;
;;;10861  		}
;;;10862  	if(speedChrgBlckStat)
;;;10863  		{
;;;10864  		speedChIsOn=0;
;;;10865  		speedChTimeCnt=0;
;;;10866  		}
;;;10867  	}
;;;10868  
;;;10869  
;;;10870  
;;;10871  if(speedChrgAvtEn)
;;;10872  	{
;;;10873  	if(!speedChIsOn)
;;;10874  		{
;;;10875  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10876  			{
;;;10877  			speedChIsOn=1;
;;;10878  			}
;;;10879  		}
;;;10880  	}
;;;10881  
;;;10882  
;;;10883  
;;;10884  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10885  else
;;;10886  	{
;;;10887  	speedChrgBlckStat=0;
;;;10888  	if(speedChrgBlckSrc==1)
;;;10889  		{
;;;10890  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10891  		}
;;;10892  	else if(speedChrgBlckSrc==2)
;;;10893  		{
;;;10894  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10895  		}
;;;10896  	}
;;;10897  
;;;10898  
;;;10899  if(speedChrgBlckStat==1)
;;;10900  	{
;;;10901  
;;;10902  	//speedChargeStartStop();
;;;10903  
;;;10904  	speedChrgShowCnt++;
;;;10905  	if(speedChrgShowCnt>=30)	
;;;10906  		{
;;;10907  		speedChrgShowCnt=0;
;;;10908  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10909  					"       ЗАРЯД        ",
;;;10910  					"     ЗАПРЕЩЕН!!!    ",
;;;10911  					"                    ",
;;;10912  					5000);
;;;10913  		}
;;;10914  	}
;;;10915  else speedChrgShowCnt=0;
;;;10916  
;;;10917  */
;;;10918  }
006f34  e5e7              B        |L1.27398|
;;;10919  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10936  //-----------------------------------------------
;;;10937  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006f36  e92d41f0          PUSH     {r4-r8,lr}
;;;10938  {
;;;10939  
;;;10940  numOfForvardBps_old=numOfForvardBps;
006f3a  4ccc              LDR      r4,|L1.29292|
006f3c  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006f3e  7060              STRB     r0,[r4,#1]
;;;10941  
;;;10942  numOfForvardBps=0;
006f40  f04f0500          MOV      r5,#0
006f44  f8045928          STRB     r5,[r4],#-0x28
;;;10943  
;;;10944  //FORVARDBPSCHHOUR=10;
;;;10945  
;;;10946  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006f48  4ec9              LDR      r6,|L1.29296|
006f4a  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006f4e  2800              CMP      r0,#0
006f50  dd02              BLE      |L1.28504|
006f52  f5b07ffa          CMP      r0,#0x1f4
006f56  dd02              BLE      |L1.28510|
                  |L1.28504|
;;;10947  	{
;;;10948  	FORVARDBPSCHHOUR=0;
006f58  8035              STRH     r5,[r6,#0]
                  |L1.28506|
;;;10949  	return;
;;;10950  	}
;;;10951  
;;;10952  numOfForvardBps_minCnt++;
;;;10953  
;;;10954  
;;;10955  if(numOfForvardBps_minCnt>=60)
;;;10956  	{
;;;10957  	numOfForvardBps_minCnt=0;
;;;10958  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10959  	numOfForvardBps_hourCnt++;
;;;10960  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10961  		{
;;;10962  		numOfForvardBps_hourCnt=0;
;;;10963  		}
;;;10964  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10965  	}
;;;10966  
;;;10967  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10968  
;;;10969  //if(numOfForvardBps)
;;;10970  //numOfForvardBps_old=numOfForvardBps; 
;;;10971  }
006f5a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28510|
006f5e  f894002a          LDRB     r0,[r4,#0x2a]         ;10952  ; numOfForvardBps_minCnt
006f62  f1000001          ADD      r0,r0,#1              ;10952
006f66  b2c0              UXTB     r0,r0                 ;10952
006f68  f884002a          STRB     r0,[r4,#0x2a]         ;10952
006f6c  283c              CMP      r0,#0x3c              ;10955
006f6e  d31b              BCC      |L1.28584|
006f70  f884502a          STRB     r5,[r4,#0x2a]         ;10957
006f74  f44f7794          MOV      r7,#0x128             ;10958
006f78  4638              MOV      r0,r7                 ;10958
006f7a  f7fffffe          BL       lc640_read_int
006f7e  f1000001          ADD      r0,r0,#1              ;10959
006f82  b200              SXTH     r0,r0                 ;10959
006f84  f8a40074          STRH     r0,[r4,#0x74]         ;10959
006f88  4aba              LDR      r2,|L1.29300|
006f8a  f9b61000          LDRSH    r1,[r6,#0]            ;10960  ; FORVARDBPSCHHOUR
006f8e  f9b22000          LDRSH    r2,[r2,#0]            ;10960  ; NUMIST
006f92  fb01f102          MUL      r1,r1,r2              ;10960
006f96  4281              CMP      r1,r0                 ;10960
006f98  dc01              BGT      |L1.28574|
006f9a  f8a45074          STRH     r5,[r4,#0x74]         ;10962
                  |L1.28574|
006f9e  f9b41074          LDRSH    r1,[r4,#0x74]         ;10964  ; numOfForvardBps_hourCnt
006fa2  4638              MOV      r0,r7                 ;10964
006fa4  f7fffffe          BL       lc640_write_int
                  |L1.28584|
006fa8  f9b40074          LDRSH    r0,[r4,#0x74]         ;10967  ; numOfForvardBps_hourCnt
006fac  f9b61000          LDRSH    r1,[r6,#0]            ;10967  ; FORVARDBPSCHHOUR
006fb0  fb90f0f1          SDIV     r0,r0,r1              ;10967
006fb4  f8840028          STRB     r0,[r4,#0x28]         ;10967
006fb8  e7cf              B        |L1.28506|
;;;10972  
                          ENDP

                  numOfForvardBps_init PROC
;;;10973  //-----------------------------------------------
;;;10974  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006fba  b510              PUSH     {r4,lr}
;;;10975  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10976  lc640_write_int(EE_FORVBPSHOURCNT,0);
006fbc  2100              MOVS     r1,#0
006fbe  f44f7094          MOV      r0,#0x128
006fc2  f7fffffe          BL       lc640_write_int
;;;10977  numOfForvardBps_minCnt=58;
006fc6  49a9              LDR      r1,|L1.29292|
006fc8  f04f003a          MOV      r0,#0x3a
006fcc  f1a10128          SUB      r1,r1,#0x28
006fd0  f881002a          STRB     r0,[r1,#0x2a]
;;;10978  }
006fd4  bd10              POP      {r4,pc}
;;;10979  
                          ENDP

                  outVoltContrHndl PROC
;;;10980  //-----------------------------------------------
;;;10981  void outVoltContrHndl(void)
006fd6  b570              PUSH     {r4-r6,lr}
;;;10982  { 
;;;10983  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006fd8  4ca7              LDR      r4,|L1.29304|
006fda  48a8              LDR      r0,|L1.29308|
;;;10984  	{
;;;10985  	outVoltContrHndlCnt_=0;
;;;10986  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006fdc  4aa8              LDR      r2,|L1.29312|
006fde  f9b41000          LDRSH    r1,[r4,#0]            ;10983  ; load_U
006fe2  f9b06000          LDRSH    r6,[r0,#0]            ;10983  ; U_OUT_KONTR_MAX
006fe6  2500              MOVS     r5,#0                 ;10985
006fe8  f9b20000          LDRSH    r0,[r2,#0]
006fec  4ba5              LDR      r3,|L1.29316|
006fee  42b1              CMP      r1,r6                 ;10983
006ff0  dc04              BGT      |L1.28668|
006ff2  4ea5              LDR      r6,|L1.29320|
006ff4  f9b66000          LDRSH    r6,[r6,#0]            ;10983  ; U_OUT_KONTR_MIN
006ff8  42b1              CMP      r1,r6                 ;10983
006ffa  da0f              BGE      |L1.28700|
                  |L1.28668|
006ffc  801d              STRH     r5,[r3,#0]            ;10985
006ffe  49a3              LDR      r1,|L1.29324|
007000  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
007004  4288              CMP      r0,r1
007006  da1b              BGE      |L1.28736|
;;;10987  		{
;;;10988  		outVoltContrHndlCnt++;
007008  f1000001          ADD      r0,r0,#1
00700c  b200              SXTH     r0,r0
00700e  8010              STRH     r0,[r2,#0]
;;;10989  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
007010  4288              CMP      r0,r1
007012  d115              BNE      |L1.28736|
;;;10990  			{
;;;10991  			avar_uout_hndl(1);
007014  2001              MOVS     r0,#1
007016  f7fffffe          BL       avar_uout_hndl
00701a  e011              B        |L1.28736|
                  |L1.28700|
;;;10992  			}
;;;10993  		}
;;;10994  	}
;;;10995  else
;;;10996  	{
;;;10997  	if(outVoltContrHndlCnt)
00701c  b180              CBZ      r0,|L1.28736|
;;;10998  		{
;;;10999  		if(outVoltContrHndlCnt_<5)
00701e  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
007022  2805              CMP      r0,#5
007024  da0c              BGE      |L1.28736|
;;;11000  			{
;;;11001  			outVoltContrHndlCnt_++;
007026  f1000001          ADD      r0,r0,#1
00702a  b200              SXTH     r0,r0
00702c  8018              STRH     r0,[r3,#0]
;;;11002  			if(outVoltContrHndlCnt_>=5)
00702e  2805              CMP      r0,#5
007030  db06              BLT      |L1.28736|
;;;11003  				{
;;;11004  				outVoltContrHndlCnt=0;
007032  8015              STRH     r5,[r2,#0]
;;;11005  				if(uout_av)avar_uout_hndl(0);
007034  4896              LDR      r0,|L1.29328|
007036  7800              LDRB     r0,[r0,#0]  ; uout_av
007038  b110              CBZ      r0,|L1.28736|
00703a  2000              MOVS     r0,#0
00703c  f7fffffe          BL       avar_uout_hndl
                  |L1.28736|
;;;11006  				}
;;;11007  			}
;;;11008  		}
;;;11009  	}
;;;11010  
;;;11011  if (load_U<(USIGN*10)) 
007040  4894              LDR      r0,|L1.29332|
007042  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
007046  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
00704a  eb000080          ADD      r0,r0,r0,LSL #2
00704e  ebb10f40          CMP      r1,r0,LSL #1
007052  da0b              BGE      |L1.28780|
;;;11012  	{
;;;11013  	if(!bSILENT)
007054  4890              LDR      r0,|L1.29336|
007056  6800              LDR      r0,[r0,#0]  ; bSILENT
007058  2800              CMP      r0,#0
00705a  d107              BNE      |L1.28780|
;;;11014  		{
;;;11015  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
00705c  e8bd4070          POP      {r4-r6,lr}
007060  2314              MOVS     r3,#0x14
007062  2201              MOVS     r2,#1
007064  2172              MOVS     r1,#0x72
007066  20d2              MOVS     r0,#0xd2
007068  f7ffbffe          B.W      mess_send
                  |L1.28780|
;;;11016  		}
;;;11017  
;;;11018  	//bU_BAT2REL_AV_BAT=1;
;;;11019  	}
;;;11020  
;;;11021  
;;;11022  }
00706c  bd70              POP      {r4-r6,pc}
;;;11023  
                          ENDP

                  vent_resurs_hndl PROC
;;;11024  //-----------------------------------------------
;;;11025  void vent_resurs_hndl(void)
00706e  e92d47f0          PUSH     {r4-r10,lr}
;;;11026  {
;;;11027  char i;
;;;11028  char crc_in,crc_eval;
;;;11029  
;;;11030  for(i=0;i<NUMIST;i++)
007072  f04f0200          MOV      r2,#0
;;;11031  	{
;;;11032  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;11033  		{
;;;11034  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;11035  		}
;;;11036  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;11037  		{
;;;11038  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;11039  		}
;;;11040  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;11041  		{
;;;11042  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;11043  		}
;;;11044  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;11045  		{
;;;11046  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;11047  		}
;;;11048  	crc_in=0;
;;;11049  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;11050  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;11051  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;11052  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;11053  
;;;11054  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;11055  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;11056  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;11057  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;11058  
;;;11059  	if(crc_eval==crc_in)
;;;11060  		{
;;;11061  		unsigned short temp_US;
;;;11062  		temp_US=0;
;;;11063  
;;;11064  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;11065  		temp_US<<=4;
;;;11066  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;11067  		temp_US<<=4;
;;;11068  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;11069  		temp_US<<=4;
;;;11070  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;11071  
;;;11072  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;11073  		}
;;;11074  
;;;11075  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
007076  4889              LDR      r0,|L1.29340|
007078  f8dfc224          LDR      r12,|L1.29344|
00707c  f9b06000          LDRSH    r6,[r0,#0]
007080  487c              LDR      r0,|L1.29300|
007082  f9b07000          LDRSH    r7,[r0,#0]            ;11030
007086  e06e              B        |L1.29030|
                  |L1.28808|
007088  eb0200c2          ADD      r0,r2,r2,LSL #3       ;11032
00708c  eb001002          ADD      r0,r0,r2,LSL #4       ;11032
007090  eb0c0080          ADD      r0,r12,r0,LSL #2      ;11032
007094  7b41              LDRB     r1,[r0,#0xd]          ;11032
007096  098b              LSRS     r3,r1,#6              ;11032
007098  d006              BEQ      |L1.28840|
00709a  2301              MOVS     r3,#1                 ;11036
00709c  ebb31f91          CMP      r3,r1,LSR #6          ;11036
0070a0  d105              BNE      |L1.28846|
0070a2  f8801059          STRB     r1,[r0,#0x59]         ;11038
0070a6  e00f              B        |L1.28872|
                  |L1.28840|
0070a8  f8801058          STRB     r1,[r0,#0x58]         ;11034
0070ac  e00c              B        |L1.28872|
                  |L1.28846|
0070ae  2302              MOVS     r3,#2                 ;11040
0070b0  ebb31f91          CMP      r3,r1,LSR #6          ;11040
0070b4  d102              BNE      |L1.28860|
0070b6  f880105a          STRB     r1,[r0,#0x5a]         ;11042
0070ba  e005              B        |L1.28872|
                  |L1.28860|
0070bc  2303              MOVS     r3,#3                 ;11044
0070be  ebb31f91          CMP      r3,r1,LSR #6          ;11044
0070c2  d101              BNE      |L1.28872|
0070c4  f880105b          STRB     r1,[r0,#0x5b]         ;11046
                  |L1.28872|
0070c8  f8101f58          LDRB     r1,[r0,#0x58]!        ;11049
0070cc  f3c11401          UBFX     r4,r1,#4,#2           ;11049
0070d0  7843              LDRB     r3,[r0,#1]            ;11050
0070d2  f0030530          AND      r5,r3,#0x30           ;11050
0070d6  ea440495          ORR      r4,r4,r5,LSR #2       ;11050
0070da  f8909002          LDRB     r9,[r0,#2]            ;11051
0070de  f0090830          AND      r8,r9,#0x30           ;11051
0070e2  ea480804          ORR      r8,r8,r4              ;11051
0070e6  78c5              LDRB     r5,[r0,#3]            ;11052
0070e8  f1a00058          SUB      r0,r0,#0x58           ;11052
0070ec  f0050430          AND      r4,r5,#0x30           ;11052
0070f0  ea480884          ORR      r8,r8,r4,LSL #2       ;11052
0070f4  f001010f          AND      r1,r1,#0xf            ;11054
0070f8  f003040f          AND      r4,r3,#0xf            ;11055
0070fc  ea840a01          EOR      r10,r4,r1             ;11055
007100  f009030f          AND      r3,r9,#0xf            ;11056
007104  ea83090a          EOR      r9,r3,r10             ;11056
007108  f005050f          AND      r5,r5,#0xf            ;11057
00710c  ea850909          EOR      r9,r5,r9              ;11057
007110  45c1              CMP      r9,r8                 ;11059
007112  d113              BNE      |L1.28988|
007114  ea4f1505          LSL      r5,r5,#4              ;11065
007118  ea430305          ORR      r3,r3,r5              ;11066
00711c  ea4f1303          LSL      r3,r3,#4              ;11067
007120  ea440403          ORR      r4,r4,r3              ;11068
007124  ea4f5304          LSL      r3,r4,#20             ;11069
007128  ea4f4313          LSR      r3,r3,#16             ;11069
00712c  ea410103          ORR      r1,r1,r3              ;11070
007130  f8b0305c          LDRH     r3,[r0,#0x5c]         ;11072
007134  428b              CMP      r3,r1                 ;11072
007136  d001              BEQ      |L1.28988|
007138  f8a0105c          STRH     r1,[r0,#0x5c]         ;11072
                  |L1.28988|
00713c  f8b0105c          LDRH     r1,[r0,#0x5c]
007140  eb060386          ADD      r3,r6,r6,LSL #2
007144  ebb10f43          CMP      r1,r3,LSL #1
007148  dd06              BLE      |L1.29016|
00714a  2e00              CMP      r6,#0
00714c  dd04              BLE      |L1.29016|
;;;11076  		{
;;;11077  		bps[i]._av|=(1<<4);
00714e  7841              LDRB     r1,[r0,#1]
007150  f0410110          ORR      r1,r1,#0x10
007154  7041              STRB     r1,[r0,#1]
007156  e003              B        |L1.29024|
                  |L1.29016|
;;;11078  		}
;;;11079  	else bps[i]._av&=~(1<<4);
007158  7841              LDRB     r1,[r0,#1]
00715a  f0210110          BIC      r1,r1,#0x10
00715e  7041              STRB     r1,[r0,#1]
                  |L1.29024|
007160  f1020201          ADD      r2,r2,#1              ;11030
007164  b2d2              UXTB     r2,r2                 ;11030
                  |L1.29030|
007166  42ba              CMP      r2,r7                 ;11030
007168  db8e              BLT      |L1.28808|
;;;11080  	}
;;;11081  }
00716a  e8bd87f0          POP      {r4-r10,pc}
;;;11082  
                          ENDP

                  vent_hndl PROC
;;;11083  //-----------------------------------------------
;;;11084  void vent_hndl(void)
00716e  e92d4ff0          PUSH     {r4-r11,lr}
;;;11085  {
007172  b087              SUB      sp,sp,#0x1c
;;;11086  if(RELEVENTSIGN==rvsAKB)
;;;11087  	{
;;;11088  	if(vent_stat==0)
007174  4c3d              LDR      r4,|L1.29292|
007176  484b              LDR      r0,|L1.29348|
;;;11089  		{
;;;11090  		if	(
;;;11091  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
007178  494b              LDR      r1,|L1.29352|
;;;11092  			||
;;;11093  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11094  			)
;;;11095  			{
;;;11096  			vent_stat=1;
;;;11097  			}
;;;11098  		}
;;;11099  	else if(vent_stat==1)
;;;11100  		{
;;;11101  		if	(
;;;11102  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
00717a  4a4c              LDR      r2,|L1.29356|
00717c  3c28              SUBS     r4,r4,#0x28           ;11088
00717e  7800              LDRB     r0,[r0,#0]            ;11086  ; RELEVENTSIGN
007180  f9943000          LDRSB    r3,[r4,#0]            ;11088
007184  f9b11000          LDRSH    r1,[r1,#0]            ;11091
007188  f9b22000          LDRSH    r2,[r2,#0]
00718c  b148              CBZ      r0,|L1.29090|
;;;11103  			&&
;;;11104  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11105  			)
;;;11106  			{
;;;11107  			vent_stat=0;
;;;11108  			}
;;;11109  		}
;;;11110  	}
;;;11111  else if(RELEVENTSIGN==rvsBPS)
00718e  2802              CMP      r0,#2
007190  d03c              BEQ      |L1.29196|
;;;11112  	{
;;;11113  /*	if	(
;;;11114  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11115  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11116  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11117  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11118  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11119  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11120  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11121  		)
;;;11122  		{
;;;11123  		vent_stat=1;
;;;11124  		}
;;;11125  	else vent_stat=0;
;;;11126  	*/
;;;11127  
;;;11128  	if	(
;;;11129  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11130  		||
;;;11131  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11132  		||
;;;11133  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11134  		||
;;;11135  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11136  		||
;;;11137  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11138  		||
;;;11139  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11140  		||
;;;11141  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11142  		||
;;;11143  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11144  		)
;;;11145  		{
;;;11146  		vent_stat=1;
;;;11147  		}
;;;11148  	else if(vent_stat==1)
;;;11149  		{
;;;11150  		if	(
;;;11151  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11152  			&&
;;;11153  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11154  			&&
;;;11155  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11156  			&&
;;;11157  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11158  			&&
;;;11159  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11160  			&&
;;;11161  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11162  			&&
;;;11163  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11164  			&&
;;;11165  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11166  			)
;;;11167  			{
;;;11168  			vent_stat=0;
;;;11169  			}
;;;11170  		}
;;;11171  	}
;;;11172  else if(RELEVENTSIGN==rvsEXT)
007192  2801              CMP      r0,#1
007194  d063              BEQ      |L1.29278|
;;;11173  	{
;;;11174  	if	(
;;;11175  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11176  		||
;;;11177  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11178  		||
;;;11179  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11180  		)
;;;11181  		{
;;;11182  		vent_stat=1;
;;;11183  		}
;;;11184  	else if(vent_stat==1)
;;;11185  		{
;;;11186  		if	(
;;;11187  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11188  			&&
;;;11189  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11190  			&&
;;;11191  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11192  			)
;;;11193  			{
;;;11194  			vent_stat=0;
;;;11195  			}
;;;11196  		}
;;;11197  	}
;;;11198  else vent_stat=1;
007196  f04f0001          MOV      r0,#1
00719a  7020              STRB     r0,[r4,#0]
                  |L1.29084|
;;;11199  }
00719c  b007              ADD      sp,sp,#0x1c
00719e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.29090|
0071a2  4f43              LDR      r7,|L1.29360|
0071a4  f8df810c          LDR      r8,|L1.29364|
0071a8  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11091
0071ac  7b3d              LDRB     r5,[r7,#0xc]          ;11091
0071ae  f9b76056          LDRSH    r6,[r7,#0x56]         ;11093
0071b2  f898c000          LDRB     r12,[r8,#0]           ;11090
0071b6  f8977058          LDRB     r7,[r7,#0x58]         ;11093
0071ba  f8988001          LDRB     r8,[r8,#1]            ;11093
0071be  b12b              CBZ      r3,|L1.29132|
0071c0  2b01              CMP      r3,#1                 ;11099
0071c2  d1eb              BNE      |L1.29084|
0071c4  f1bc0f55          CMP      r12,#0x55             ;11101
0071c8  d115              BNE      |L1.29174|
0071ca  e010              B        |L1.29166|
                  |L1.29132|
0071cc  f1bc0f55          CMP      r12,#0x55             ;11090
0071d0  d102              BNE      |L1.29144|
0071d2  4288              CMP      r0,r1                 ;11091
0071d4  dc07              BGT      |L1.29158|
0071d6  b935              CBNZ     r5,|L1.29158|
                  |L1.29144|
0071d8  f1b80f55          CMP      r8,#0x55              ;11093
0071dc  d1de              BNE      |L1.29084|
0071de  428e              CMP      r6,r1                 ;11093
0071e0  dc01              BGT      |L1.29158|
0071e2  2f00              CMP      r7,#0                 ;11093
0071e4  d0da              BEQ      |L1.29084|
                  |L1.29158|
0071e6  f04f0001          MOV      r0,#1                 ;11096
0071ea  7020              STRB     r0,[r4,#0]            ;11096
0071ec  e7d6              B        |L1.29084|
                  |L1.29166|
0071ee  4290              CMP      r0,r2                 ;11102
0071f0  dad4              BGE      |L1.29084|
0071f2  2d00              CMP      r5,#0                 ;11102
0071f4  d1d2              BNE      |L1.29084|
                  |L1.29174|
0071f6  f1b80f55          CMP      r8,#0x55              ;11104
0071fa  d103              BNE      |L1.29188|
0071fc  4296              CMP      r6,r2                 ;11104
0071fe  dacd              BGE      |L1.29084|
007200  2f00              CMP      r7,#0                 ;11104
007202  d1cb              BNE      |L1.29084|
                  |L1.29188|
007204  f04f0000          MOV      r0,#0                 ;11107
007208  7020              STRB     r0,[r4,#0]            ;11107
00720a  e7c7              B        |L1.29084|
                  |L1.29196|
00720c  4e24              LDR      r6,|L1.29344|
00720e  4819              LDR      r0,|L1.29300|
007210  6ab5              LDR      r5,[r6,#0x28]         ;11129
007212  f9b00000          LDRSH    r0,[r0,#0]            ;11128  ; NUMIST
007216  78f6              LDRB     r6,[r6,#3]            ;11129
007218  b118              CBZ      r0,|L1.29218|
00721a  428d              CMP      r5,r1                 ;11129
00721c  dc7e              BGT      |L1.29468|
00721e  2e1e              CMP      r6,#0x1e              ;11129
007220  d27c              BCS      |L1.29468|
                  |L1.29218|
007222  f8dfc07c          LDR      r12,|L1.29344|
007226  2801              CMP      r0,#1                 ;11131
007228  f8dc708c          LDR      r7,[r12,#0x8c]        ;11131
00722c  f89cc067          LDRB     r12,[r12,#0x67]       ;11131
007230  f8cdc018          STR      r12,[sp,#0x18]        ;11131
007234  dd06              BLE      |L1.29252|
007236  428f              CMP      r7,r1                 ;11131
007238  dc70              BGT      |L1.29468|
00723a  f8ddc018          LDR      r12,[sp,#0x18]        ;11131
00723e  f1bc0f1e          CMP      r12,#0x1e             ;11131
007242  d26b              BCS      |L1.29468|
                  |L1.29252|
007244  f8dfc058          LDR      r12,|L1.29344|
007248  2802              CMP      r0,#2                 ;11133
00724a  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11133
00724e  f8cd8014          STR      r8,[sp,#0x14]         ;11133
007252  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11133
007256  f8cdc010          STR      r12,[sp,#0x10]        ;11133
00725a  dd36              BLE      |L1.29386|
00725c  e02c              B        |L1.29368|
                  |L1.29278|
00725e  e0c9              B        |L1.29684|
                  |L1.29280|
                          DCD      ||.text||+0x1690
                  |L1.29284|
                          DCD      ||.text||+0x21f8
                  |L1.29288|
                          DCD      ||.text||+0x1d1c
                  |L1.29292|
                          DCD      ||area_number.25||+0x28
                  |L1.29296|
                          DCD      FORVARDBPSCHHOUR
                  |L1.29300|
                          DCD      NUMIST
                  |L1.29304|
                          DCD      load_U
                  |L1.29308|
                          DCD      U_OUT_KONTR_MAX
                  |L1.29312|
                          DCD      outVoltContrHndlCnt
                  |L1.29316|
                          DCD      outVoltContrHndlCnt_
                  |L1.29320|
                          DCD      U_OUT_KONTR_MIN
                  |L1.29324|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.29328|
                          DCD      uout_av
                  |L1.29332|
                          DCD      USIGN
                  |L1.29336|
                          DCD      bSILENT
                  |L1.29340|
                          DCD      TVENTMAX
                  |L1.29344|
                          DCD      bps
                  |L1.29348|
                          DCD      RELEVENTSIGN
                  |L1.29352|
                          DCD      TVENTON
                  |L1.29356|
                          DCD      TVENTOFF
                  |L1.29360|
                          DCD      bat
                  |L1.29364|
                          DCD      BAT_IS_ON
                  |L1.29368|
0072b8  f8ddc014          LDR      r12,[sp,#0x14]        ;11133
0072bc  458c              CMP      r12,r1                ;11133
0072be  dc57              BGT      |L1.29552|
0072c0  f8ddc010          LDR      r12,[sp,#0x10]        ;11133
0072c4  f1bc0f1e          CMP      r12,#0x1e             ;11133
0072c8  d252              BCS      |L1.29552|
                  |L1.29386|
0072ca  f8dfc1b4          LDR      r12,|L1.29824|
0072ce  2803              CMP      r0,#3                 ;11135
0072d0  f8dc8154          LDR      r8,[r12,#0x154]       ;11135
0072d4  f8cd800c          STR      r8,[sp,#0xc]          ;11135
0072d8  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11135
0072dc  f8cdc008          STR      r12,[sp,#8]           ;11135
0072e0  dd08              BLE      |L1.29428|
0072e2  f8ddc00c          LDR      r12,[sp,#0xc]         ;11135
0072e6  458c              CMP      r12,r1                ;11135
0072e8  dc42              BGT      |L1.29552|
0072ea  f8ddc008          LDR      r12,[sp,#8]           ;11135
0072ee  f1bc0f1e          CMP      r12,#0x1e             ;11135
0072f2  d23d              BCS      |L1.29552|
                  |L1.29428|
0072f4  f8df8188          LDR      r8,|L1.29824|
0072f8  2804              CMP      r0,#4                 ;11137
0072fa  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11137
0072fe  f8988193          LDRB     r8,[r8,#0x193]        ;11137
007302  f8cd8004          STR      r8,[sp,#4]            ;11137
007306  dd06              BLE      |L1.29462|
007308  458c              CMP      r12,r1                ;11137
00730a  dc31              BGT      |L1.29552|
00730c  f8dd8004          LDR      r8,[sp,#4]            ;11137
007310  f1b80f1e          CMP      r8,#0x1e              ;11137
007314  d22c              BCS      |L1.29552|
                  |L1.29462|
007316  f8df9168          LDR      r9,|L1.29824|
00731a  e000              B        |L1.29470|
                  |L1.29468|
00731c  e028              B        |L1.29552|
                  |L1.29470|
00731e  f8d9821c          LDR      r8,[r9,#0x21c]        ;11139
007322  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11139
007326  f8cd9000          STR      r9,[sp,#0]            ;11139
00732a  2805              CMP      r0,#5                 ;11139
00732c  dd06              BLE      |L1.29500|
00732e  4588              CMP      r8,r1                 ;11139
007330  dc1e              BGT      |L1.29552|
007332  f8dd9000          LDR      r9,[sp,#0]            ;11139
007336  f1b90f1e          CMP      r9,#0x1e              ;11139
00733a  d219              BCS      |L1.29552|
                  |L1.29500|
00733c  f8dfa140          LDR      r10,|L1.29824|
007340  2806              CMP      r0,#6                 ;11141
007342  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11141
007346  f8da9280          LDR      r9,[r10,#0x280]       ;11141
00734a  dd04              BLE      |L1.29526|
00734c  4589              CMP      r9,r1                 ;11141
00734e  dc0f              BGT      |L1.29552|
007350  f1be0f1e          CMP      lr,#0x1e              ;11141
007354  d20c              BCS      |L1.29552|
                  |L1.29526|
007356  f8dfb128          LDR      r11,|L1.29824|
00735a  2807              CMP      r0,#7                 ;11143
00735c  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11143
007360  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11143
007364  dd08              BLE      |L1.29560|
007366  458a              CMP      r10,r1                ;11143
007368  dc02              BGT      |L1.29552|
00736a  f1bb0f1e          CMP      r11,#0x1e             ;11143
00736e  d303              BCC      |L1.29560|
                  |L1.29552|
007370  f04f0001          MOV      r0,#1                 ;11146
007374  7020              STRB     r0,[r4,#0]            ;11146
                  |L1.29558|
007376  e711              B        |L1.29084|
                  |L1.29560|
007378  2b01              CMP      r3,#1                 ;11148
00737a  d1fc              BNE      |L1.29558|
00737c  b118              CBZ      r0,|L1.29574|
00737e  4295              CMP      r5,r2                 ;11151
007380  daf9              BGE      |L1.29558|
007382  2e0a              CMP      r6,#0xa               ;11151
007384  d2f7              BCS      |L1.29558|
                  |L1.29574|
007386  2802              CMP      r0,#2                 ;11153
007388  db04              BLT      |L1.29588|
00738a  4297              CMP      r7,r2                 ;11153
00738c  daf3              BGE      |L1.29558|
00738e  9906              LDR      r1,[sp,#0x18]         ;11153
007390  290a              CMP      r1,#0xa               ;11153
007392  d2f0              BCS      |L1.29558|
                  |L1.29588|
007394  2803              CMP      r0,#3                 ;11155
007396  db05              BLT      |L1.29604|
007398  9905              LDR      r1,[sp,#0x14]         ;11155
00739a  4291              CMP      r1,r2                 ;11155
00739c  daeb              BGE      |L1.29558|
00739e  9904              LDR      r1,[sp,#0x10]         ;11155
0073a0  290a              CMP      r1,#0xa               ;11155
0073a2  d2e8              BCS      |L1.29558|
                  |L1.29604|
0073a4  2804              CMP      r0,#4                 ;11157
0073a6  db05              BLT      |L1.29620|
0073a8  9903              LDR      r1,[sp,#0xc]          ;11157
0073aa  4291              CMP      r1,r2                 ;11157
0073ac  dae3              BGE      |L1.29558|
0073ae  9902              LDR      r1,[sp,#8]            ;11157
0073b0  290a              CMP      r1,#0xa               ;11157
0073b2  d2e0              BCS      |L1.29558|
                  |L1.29620|
0073b4  2805              CMP      r0,#5                 ;11159
0073b6  db04              BLT      |L1.29634|
0073b8  4594              CMP      r12,r2                ;11159
0073ba  dadc              BGE      |L1.29558|
0073bc  9901              LDR      r1,[sp,#4]            ;11159
0073be  290a              CMP      r1,#0xa               ;11159
0073c0  d2d9              BCS      |L1.29558|
                  |L1.29634|
0073c2  2806              CMP      r0,#6                 ;11161
0073c4  db04              BLT      |L1.29648|
0073c6  4590              CMP      r8,r2                 ;11161
0073c8  dad5              BGE      |L1.29558|
0073ca  9900              LDR      r1,[sp,#0]            ;11161
0073cc  290a              CMP      r1,#0xa               ;11161
0073ce  d2d2              BCS      |L1.29558|
                  |L1.29648|
0073d0  2807              CMP      r0,#7                 ;11163
0073d2  db04              BLT      |L1.29662|
0073d4  4591              CMP      r9,r2                 ;11163
0073d6  dace              BGE      |L1.29558|
0073d8  f1be0f0a          CMP      lr,#0xa               ;11163
0073dc  d2cb              BCS      |L1.29558|
                  |L1.29662|
0073de  2808              CMP      r0,#8                 ;11165
0073e0  db04              BLT      |L1.29676|
0073e2  4592              CMP      r10,r2                ;11165
0073e4  dac7              BGE      |L1.29558|
0073e6  f1bb0f0a          CMP      r11,#0xa              ;11165
0073ea  d2c4              BCS      |L1.29558|
                  |L1.29676|
0073ec  f04f0000          MOV      r0,#0                 ;11168
0073f0  7020              STRB     r0,[r4,#0]            ;11168
                  |L1.29682|
0073f2  e6d3              B        |L1.29084|
                  |L1.29684|
0073f4  4823              LDR      r0,|L1.29828|
0073f6  4d24              LDR      r5,|L1.29832|
0073f8  4e24              LDR      r6,|L1.29836|
0073fa  f9b00000          LDRSH    r0,[r0,#0]            ;11174  ; NUMDT
0073fe  f9b55000          LDRSH    r5,[r5,#0]            ;11175
007402  7836              LDRB     r6,[r6,#0]            ;11175
007404  b110              CBZ      r0,|L1.29708|
007406  428d              CMP      r5,r1                 ;11175
007408  dc1d              BGT      |L1.29766|
00740a  b9e6              CBNZ     r6,|L1.29766|
                  |L1.29708|
00740c  4f1e              LDR      r7,|L1.29832|
00740e  f8dfc07c          LDR      r12,|L1.29836|
007412  2801              CMP      r0,#1                 ;11177
007414  f9b77002          LDRSH    r7,[r7,#2]            ;11177
007418  f89cc001          LDRB     r12,[r12,#1]          ;11177
00741c  dd04              BLE      |L1.29736|
00741e  428f              CMP      r7,r1                 ;11177
007420  dc11              BGT      |L1.29766|
007422  f1bc0f00          CMP      r12,#0                ;11177
007426  d10e              BNE      |L1.29766|
                  |L1.29736|
007428  f8df805c          LDR      r8,|L1.29832|
00742c  f8df905c          LDR      r9,|L1.29836|
007430  2802              CMP      r0,#2                 ;11179
007432  f9b88004          LDRSH    r8,[r8,#4]            ;11179
007436  f8999002          LDRB     r9,[r9,#2]            ;11179
00743a  dd08              BLE      |L1.29774|
00743c  4588              CMP      r8,r1                 ;11179
00743e  dc02              BGT      |L1.29766|
007440  f1b90f00          CMP      r9,#0                 ;11179
007444  d003              BEQ      |L1.29774|
                  |L1.29766|
007446  f04f0001          MOV      r0,#1                 ;11182
00744a  7020              STRB     r0,[r4,#0]            ;11182
00744c  e6a6              B        |L1.29084|
                  |L1.29774|
00744e  2b01              CMP      r3,#1                 ;11184
007450  d191              BNE      |L1.29558|
007452  b118              CBZ      r0,|L1.29788|
007454  4295              CMP      r5,r2                 ;11187
007456  da8e              BGE      |L1.29558|
007458  2e00              CMP      r6,#0                 ;11187
00745a  d18c              BNE      |L1.29558|
                  |L1.29788|
00745c  2802              CMP      r0,#2                 ;11189
00745e  db04              BLT      |L1.29802|
007460  4297              CMP      r7,r2                 ;11189
007462  da88              BGE      |L1.29558|
007464  f1bc0f00          CMP      r12,#0                ;11189
007468  d185              BNE      |L1.29558|
                  |L1.29802|
00746a  2803              CMP      r0,#3                 ;11191
00746c  db04              BLT      |L1.29816|
00746e  4590              CMP      r8,r2                 ;11191
007470  dabf              BGE      |L1.29682|
007472  f1b90f00          CMP      r9,#0                 ;11191
007476  d1bc              BNE      |L1.29682|
                  |L1.29816|
007478  f04f0000          MOV      r0,#0                 ;11194
00747c  7020              STRB     r0,[r4,#0]            ;11194
00747e  e68d              B        |L1.29084|
;;;11200  
                          ENDP

                  |L1.29824|
                          DCD      bps
                  |L1.29828|
                          DCD      NUMDT
                  |L1.29832|
                          DCD      t_ext
                  |L1.29836|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;328    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;329    if(spc_stat!=spcVZ) 
;;;330    	{
;;;331    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;329
;;;332    	sp_ch_error=0;
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;330    	{
;;;331    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;329  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;329
00000c  b200              SXTH     r0,r0                 ;329
00000e  f7fffffe          BL       abs_pal
;;;332    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;333    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;334    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;337  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;337  ; adc_self_ch_buff
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;337
000032  f44f7196          MOV      r1,#0x12c             ;337
000036  f1a406f2          SUB      r6,r4,#0xf2           ;337
00003a  4288              CMP      r0,r1                 ;337
00003c  da02              BGE      |L3.68|
00003e  88a0              LDRH     r0,[r4,#4]            ;339  ; adc_self_ch_buff
000040  87b0              STRH     r0,[r6,#0x3c]         ;339
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]            ;339  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;339
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;341  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;339
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;341  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;342
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;342  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;339
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;341  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;341
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;342  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;344  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;344  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;344
000074  6004              STR      r4,[r0,#0]            ;345  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;345  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;345
00007c  6044              STR      r4,[r0,#4]            ;345  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;350  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;350
000084  6084              STR      r4,[r0,#8]            ;351  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;351  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;353
00008c  60c1              STR      r1,[r0,#0xc]          ;353  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;353  ; adc_result
000092  2964              CMP      r1,#0x64              ;353
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;354  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;354
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;358
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;360
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;360  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;361
0000b0  428c              CMP      r4,r1                 ;361
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;364
0000b8  6002              STR      r2,[r0,#0]            ;364  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;364  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;369  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;369  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;369
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;369  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;370
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;373  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;373
0000d2  b209              SXTH     r1,r1                 ;377
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;377
0000d6  f5b17f00          CMP      r1,#0x200             ;379
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;379
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;380  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;383
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;383
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;388
0000f2  ea4f2424          ASR      r4,r4,#8              ;388
0000f6  8774              STRH     r4,[r6,#0x3a]         ;389
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;389
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;389  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;392
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f
00010a  2827              CMP      r0,#0x27
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1
000116  7530              STRB     r0,[r6,#0x14]
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]  ; adc_ch
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7cf3              LDRB     r3,[r6,#0x13]  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  0798              LSLS     r0,r3,#30
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]
000136  4461              ADD      r1,r1,r12
000138  f1000001          ADD      r0,r0,#1
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013c  b2c0              UXTB     r0,r0
00013e  2810              CMP      r0,#0x10
000140  d3f7              BCC      |L3.306|
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  ea4f1021          ASR      r0,r1,#4
000146  4933              LDR      r1,|L3.532|
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1a10120          SUB      r1,r1,#0x20
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1
000152  b2e8              UXTB     r0,r5
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  74b0              STRB     r0,[r6,#0x12]
000156  2810              CMP      r0,#0x10
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  f1030301          ADD      r3,r3,#1
000160  b2d8              UXTB     r0,r3
000162  74f0              STRB     r0,[r6,#0x13]
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  2810              CMP      r0,#0x10
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f1070701          ADD      r7,r7,#1
000170  f0070001          AND      r0,r7,#1
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000174  7470              STRB     r0,[r6,#0x11]
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]
00017c  f02000ff          BIC      r0,r0,#0xff
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
000180  f1000004          ADD      r0,r0,#4
000184  6010              STR      r0,[r2,#0]
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]  ; adc_ch
00018a  0708              LSLS     r0,r1,#28
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]
000190  f02000ff          BIC      r0,r0,#0xff
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  f1000001          ADD      r0,r0,#1
000198  6010              STR      r0,[r2,#0]
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]
00019e  f02000ff          BIC      r0,r0,#0xff
0001a2  f1000002          ADD      r0,r0,#2
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  6010              STR      r0,[r2,#0]
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]
0001ac  f0435380          ORR      r3,r3,#0x10000000
0001b0  6003              STR      r3,[r0,#0]            ;401
0001b2  6a03              LDR      r3,[r0,#0x20]         ;401
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;401
0001b8  6203              STR      r3,[r0,#0x20]         ;402
0001ba  6e03              LDR      r3,[r0,#0x60]         ;402
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;402
0001c0  6603              STR      r3,[r0,#0x60]         ;404
0001c2  07cb              LSLS     r3,r1,#31             ;404
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;404
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;404
0001cc  6143              STR      r3,[r0,#0x14]         ;405
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;405
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;405
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;420
0001d8  6343              STR      r3,[r0,#0x34]         ;420
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;421
0001de  f0235380          BIC      r3,r3,#0x10000000     ;421
0001e2  6143              STR      r3,[r0,#0x14]         ;423
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;423
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;423
0001ec  6343              STR      r3,[r0,#0x34]         ;423
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;424
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;424
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;424
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
0001f8  6741              STR      r1,[r0,#0x74]
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]
0001fe  f0416180          ORR      r1,r1,#0x4000000
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
000202  6741              STR      r1,[r0,#0x74]
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  f0407080          ORR      r0,r0,#0x1000000
00020a  6010              STR      r0,[r2,#0]
00020c  e8bd81f0          POP      {r4-r8,pc}
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xf2
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;330    	{
;;;331    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;329
00000c  7820              LDRB     r0,[r4,#0]            ;329  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;329
000010  b2c0              UXTB     r0,r0
;;;332    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;333    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;334    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;342  ; bps_I
000032  8008              STRH     r0,[r1,#0]            ;337
000034  495d              LDR      r1,|L4.428|
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12                ;337
00003c  4637              MOV      r7,r6                 ;337
00003e  f9b11000          LDRSH    r1,[r1,#0]            ;339  ; ica_your_current
000042  7852              LDRB     r2,[r2,#1]            ;339
000044  f9b83000          LDRSH    r3,[r8,#0]            ;339
000048  f9b77000          LDRSH    r7,[r7,#0]            ;339
00004c  4288              CMP      r0,r1                 ;341
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;339
000054  f1b90f0a          CMP      r9,#0xa               ;341
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;342
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;341
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;341
000064  280a              CMP      r0,#0xa               ;342
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;344
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;344
000072  f88c2001          STRB     r2,[r12,#1]           ;344
000076  f1a30301          SUB      r3,r3,#1              ;345
00007a  f8a83000          STRH     r3,[r8,#0]            ;345
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;350
000084  f88c2001          STRB     r2,[r12,#1]           ;351
000088  f1030301          ADD      r3,r3,#1              ;353
00008c  f8a83000          STRH     r3,[r8,#0]            ;353
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;353
000092  4251              RSBS     r1,r2,#0              ;353
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;354  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;358
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;360  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;360
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;361  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;361
0000b4  f04f0004          MOV      r0,#4                 ;364
0000b8  f88d0001          STRB     r0,[sp,#1]            ;364
0000bc  f88d5002          STRB     r5,[sp,#2]            ;369
0000c0  f04f0002          MOV      r0,#2                 ;369
0000c4  f88d0003          STRB     r0,[sp,#3]            ;370
0000c8  f88d5004          STRB     r5,[sp,#4]            ;370
0000cc  f04f0001          MOV      r0,#1                 ;373
0000d0  f88d0005          STRB     r0,[sp,#5]            ;373
0000d4  f04f0106          MOV      r1,#6                 ;377
0000d8  4668              MOV      r0,sp                 ;379
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;380
0000e2  ea4f2020          ASR      r0,r0,#8              ;380
0000e6  f88d0007          STRB     r0,[sp,#7]            ;383
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;383  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;388
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;388
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;389  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;389
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;392
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]  ; main_kb_cnt
00010a  4291              CMP      r1,r2
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]  ; ICA_EN
000110  2901              CMP      r1,#1
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]
00011c  f04f0106          MOV      r1,#6
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  f88d1001          STRB     r1,[sp,#1]
000124  f88d5002          STRB     r5,[sp,#2]
000128  f04f011e          MOV      r1,#0x1e
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012c  f88d1003          STRB     r1,[sp,#3]
000130  ea4f71e0          ASR      r1,r0,#31
000134  eb006111          ADD      r1,r0,r1,LSR #24
000138  ea4f2221          ASR      r2,r1,#8
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013c  f88d2004          STRB     r2,[sp,#4]
000140  f88d0005          STRB     r0,[sp,#5]
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000144  f04f0106          MOV      r1,#6
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]
000152  ea4f2020          ASR      r0,r0,#8
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000156  f88d0007          STRB     r0,[sp,#7]
00015a  8838              LDRH     r0,[r7,#0]  ; ICA_CH
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  2800              CMP      r0,#0
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0
000162  466d              MOV      r5,sp
                  |L4.356|
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  5d28              LDRB     r0,[r5,r4]
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  b2e4              UXTB     r4,r4
000174  2c08              CMP      r4,#8
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14
00017a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.382|
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  f04f0400          MOV      r4,#0
000182  46e9              MOV      r9,sp
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000188  f7fffffe          BL       putchar_sc16is700
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  f1040401          ADD      r4,r4,#1
000190  b2e4              UXTB     r4,r4
000192  2c08              CMP      r4,#8
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;328    {  
000002  4604              MOV      r4,r0
;;;329    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;330    	{
;;;331    	vz_error=0;
;;;332    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;333    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
00001c  f8950047          LDRB     r0,[r5,#0x47]
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;341
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;342
000032  b101              CBZ      r1,|L5.54|
000034  7091              STRB     r1,[r2,#2]            ;337
                  |L5.54|
000036  ea000301          AND      r3,r0,r1              ;337
00003a  07db              LSLS     r3,r3,#31             ;337
00003c  d027              BEQ      |L5.142|
00003e  78d0              LDRB     r0,[r2,#3]            ;339  ; plazma_inv
000040  f1000001          ADD      r0,r0,#1              ;339
000044  70d0              STRB     r0,[r2,#3]            ;339
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;339
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;341
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;339
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;342
000058  461a              MOV      r2,r3                 ;342
00005a  210e              MOVS     r1,#0xe               ;342
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;342
000066  2202              MOVS     r2,#2                 ;342
000068  210e              MOVS     r1,#0xe               ;344
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;344
000074  2203              MOVS     r2,#3                 ;345
000076  210e              MOVS     r1,#0xe               ;345
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;350
000082  2204              MOVS     r2,#4                 ;350
000084  210e              MOVS     r1,#0xe               ;351
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;353
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;353
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;354  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;354
00009c  70d0              STRB     r0,[r2,#3]            ;358
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;358
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;360
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;360
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;361
0000b0  2201              MOVS     r2,#1                 ;361
0000b2  210e              MOVS     r1,#0xe               ;361
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;369
0000be  461a              MOV      r2,r3                 ;369
0000c0  210e              MOVS     r1,#0xe               ;369
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;370
0000cc  2203              MOVS     r2,#3                 ;373
0000ce  210e              MOVS     r1,#0xe               ;373
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;379
0000da  2204              MOVS     r2,#4                 ;379
0000dc  210e              MOVS     r1,#0xe               ;379
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;383
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;383
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;388  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;388
0000f4  70d0              STRB     r0,[r2,#3]            ;388
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;389
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;389
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;392
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3
000108  2201              MOVS     r2,#1
00010a  210e              MOVS     r1,#0xe
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3
000116  2202              MOVS     r2,#2
000118  210e              MOVS     r1,#0xe
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3
000124  461a              MOV      r2,r3
000126  210e              MOVS     r1,#0xe
000128  a0a6              ADR      r0,|L5.964|
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3
000132  2204              MOVS     r2,#4
000134  210e              MOVS     r1,#0xe
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28
000140  d529              BPL      |L5.406|
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  070b              LSLS     r3,r1,#28
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  f1000001          ADD      r0,r0,#1
00014c  70d0              STRB     r0,[r2,#3]
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1
000152  d00b              BEQ      |L5.364|
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  2c02              CMP      r4,#2
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3
00015a  d015              BEQ      |L5.392|
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4
000160  2201              MOVS     r2,#1
000162  210e              MOVS     r1,#0xe
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  2304              MOVS     r3,#4
00016e  2202              MOVS     r2,#2
000170  210e              MOVS     r1,#0xe
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4
00017c  2203              MOVS     r2,#3
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  210e              MOVS     r1,#0xe
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4
00018a  461a              MOV      r2,r3
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  210e              MOVS     r1,#0xe
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27
000198  d529              BPL      |L5.494|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  06cb              LSLS     r3,r1,#27
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1
0001a4  70d0              STRB     r0,[r2,#3]
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;401
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;401
0001b8  2201              MOVS     r2,#1                 ;402
0001ba  210e              MOVS     r1,#0xe               ;402
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;404
0001c6  2202              MOVS     r2,#2                 ;404
0001c8  210e              MOVS     r1,#0xe               ;404
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;405
0001d4  2203              MOVS     r2,#3                 ;420
0001d6  210e              MOVS     r1,#0xe               ;420
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;421
0001e2  2204              MOVS     r2,#4                 ;423
0001e4  210e              MOVS     r1,#0xe               ;423
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;424
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;424
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;424  ; plazma_inv
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
0001f8  f1000001          ADD      r0,r0,#1
0001fc  70d0              STRB     r0,[r2,#3]
0001fe  b134              CBZ      r4,|L5.526|
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
000200  2c01              CMP      r4,#1
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6
000210  2201              MOVS     r2,#1
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
000212  210e              MOVS     r1,#0xe
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6
00021e  2202              MOVS     r2,#2
000220  210e              MOVS     r1,#0xe
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
00022a  2306              MOVS     r3,#6
00022c  2203              MOVS     r2,#3
00022e  210e              MOVS     r1,#0xe
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6
00023a  2204              MOVS     r2,#4
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
00023c  210e              MOVS     r1,#0xe
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
000250  70d0              STRB     r0,[r2,#3]
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
000262  2300              MOVS     r3,#0
000264  2201              MOVS     r2,#1
000266  210e              MOVS     r1,#0xe
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;458
000272  2202              MOVS     r2,#2                 ;458
000274  210e              MOVS     r1,#0xe               ;459
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;461
000280  2203              MOVS     r2,#3                 ;461
000282  210e              MOVS     r1,#0xe               ;461
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;462
00028e  2204              MOVS     r2,#4                 ;462
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
000290  210e              MOVS     r1,#0xe
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
000298  f8150f46          LDRB     r0,[r5,#0x46]!
00029c  7068              STRB     r0,[r5,#1]
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
00029e  bd70              POP      {r4-r6,pc}
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xbc
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;330    	{
;;;331    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;329  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;329  ; TBOXMAX
;;;332    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
00001e  8020              STRH     r0,[r4,#0]
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;341
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]            ;337  ; av_tbox_cnt
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1                 ;337
00003c  2805              CMP      r0,#5                 ;337
00003e  dd00              BLE      |L6.66|
000040  700e              STRB     r6,[r1,#0]            ;339
                  |L6.66|
000042  2400              MOVS     r4,#0                 ;339
000044  2801              CMP      r0,#1                 ;339
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;339
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;341  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;341  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;342
00005a  4298              CMP      r0,r3                 ;342
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;341  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;341
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;342
00006a  b249              SXTB     r1,r1                 ;344
00006c  7011              STRB     r1,[r2,#0]            ;344
00006e  291e              CMP      r1,#0x1e              ;344
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;344  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;345
000078  8039              STRH     r1,[r7,#0]            ;345
00007a  7014              STRB     r4,[r2,#0]            ;345
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;350
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;350  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;351
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;353
00008e  b249              SXTB     r1,r1                 ;353
000090  7011              STRB     r1,[r2,#0]            ;353
000092  291e              CMP      r1,#0x1e              ;353
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;354  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;354
00009c  8039              STRH     r1,[r7,#0]            ;358
00009e  7014              STRB     r4,[r2,#0]            ;358
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;358
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;360  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;360
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;361
0000b0  2100              MOVS     r1,#0                 ;361
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;369
0000be  8800              LDRH     r0,[r0,#0]            ;369  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;369
0000c2  b202              SXTH     r2,r0                 ;369
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;370
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;377  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;379
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;379  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;379
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;380  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;380
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;383
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;383
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;388  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;389
0000fc  2928              CMP      r1,#0x28              ;389
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;392  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L6.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L6.468|
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L6.314|
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L6.328|
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L6.380|
00017c  2206              MOVS     r2,#6
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L6.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L6.406|
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
000194  703c              STRB     r4,[r7,#0]
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L6.410|
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L6.406|
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;330    	{
;;;331    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;329
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;329
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;332    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
00001e  fbb0f0f5          UDIV     r0,r0,r5
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;341
000030  4e45              LDR      r6,|L7.328|
000032  4f46              LDR      r7,|L7.332|
000034  f8df8118          LDR      r8,|L7.336|
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
000040  2500              MOVS     r5,#0                 ;339
000042  2b01              CMP      r3,#1                 ;339
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;339
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;341
00004e  f8a81000          STRH     r1,[r8,#0]            ;339
000052  2801              CMP      r0,#1                 ;341
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;342
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;342
00005a  2200              MOVS     r2,#0                 ;342
00005c  21e6              MOVS     r1,#0xe6              ;339
00005e  20e1              MOVS     r0,#0xe1              ;341
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;342
000068  f04f0000          MOV      r0,#0                 ;344
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;344
000070  f9b85000          LDRSH    r5,[r8,#0]            ;344
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;345
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;345
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;350
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;350
000086  69c9              LDR      r1,[r1,#0x1c]         ;351
000088  4299              CMP      r1,r3                 ;353
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;353
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;353
000094  b2c0              UXTB     r0,r0                 ;354
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;354
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;354
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;358
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;360
0000aa  7020              STRB     r0,[r4,#0]            ;360
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;361
0000b0  f8a81000          STRH     r1,[r8,#0]            ;361
0000b4  2802              CMP      r0,#2                 ;364
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;364
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;364
0000bc  2200              MOVS     r2,#0                 ;369
0000be  21e6              MOVS     r1,#0xe6              ;369
0000c0  20e1              MOVS     r0,#0xe1              ;369
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;370
0000ca  f04f0000          MOV      r0,#0                 ;370
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;373
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;377
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;379
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;379
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;380
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;380
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;383
0000ea  4299              CMP      r1,r3                 ;383
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;388
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;388
0000f6  b2c0              UXTB     r0,r0                 ;389
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;389
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;389
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;392
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee
00010a  e9cd0500          STRD     r0,r5,[sp,#0]
00010e  9502              STR      r5,[sp,#8]
000110  9503              STR      r5,[sp,#0xc]
000112  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
000114  4603              MOV      r3,r0
000116  2216              MOVS     r2,#0x16
000118  4608              MOV      r0,r1
00011a  f7fffffe          BL       mcp2515_transmit
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
00011e  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1
000122  b2c0              UXTB     r0,r0
000124  7030              STRB     r0,[r6,#0]
000126  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
00012a  4288              CMP      r0,r1
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]
000136  e8bd9fff          POP      {r0-r12,pc}
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;328    {  
000002  f44f70b4          MOV      r0,#0x168
;;;329    if(spc_stat!=spcVZ) 
;;;330    	{
;;;331    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;329
00000e  700a              STRB     r2,[r1,#0]            ;329
000010  f04f0100          MOV      r1,#0
;;;332    	sp_ch_error=0;
;;;333    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if( (snmp_bat_status[0]==0 || snmp_bat_status[0]==2) && NUMBAT>0) 	//o_10 	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
000020  f7ffbffe          B.W      lc640_write
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if( (snmp_bat_status[1]==0 || snmp_bat_status[1]==2) && NUMBAT==2 )	//o_10 
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s
00005e  0000              DCB      0x00,0x00
                  vz_cnt_s_
000060  0000              DCB      0x00,0x00
                  vz_cnt_h
000062  0000              DCB      0x00,0x00
                  vz_cnt_h_
000064  0000              DCB      0x00,0x00
                  cnt_end_ke
000066  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000068  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006c  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000070  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000072  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000074  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000076  0000              DCB      0x00,0x00
                  volt_region_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007a  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007c  0000              DCB      0x00,0x00
                  plazma_ica1
00007e  0000              DCB      0x00,0x00
                  bat_hndl_i
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000086  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000088  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  bps_on_mask
                          DCD      0x00000000
                  bps_off_mask
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000f0  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000f2  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "control.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_control_c_9601dfb0____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REVSH|
#line 130
|__asm___9_control_c_9601dfb0____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
