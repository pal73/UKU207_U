; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ke_start PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;297    {          
000004  4606              MOV      r6,r0
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  f04f0400          MOV      r4,#0
00000a  4dff              LDR      r5,|L1.1032|
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  f04f0064          MOV      r0,#0x64
000010  f1050506          ADD      r5,r5,#6
000014  7728              STRB     r0,[r5,#0x1c]
;;;315    
;;;316    	spc_stat=spcKE;
000016  f04f0701          MOV      r7,#1
00001a  762f              STRB     r7,[r5,#0x18]
;;;317    	__ee_spc_stat=spcKE;
00001c  f8a57062          STRH     r7,[r5,#0x62]
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000020  4639              MOV      r1,r7
000022  f240209a          MOV      r0,#0x29a
000026  f7fffffe          BL       lc640_write_int
;;;319    	
;;;320    	spc_bat=0;
00002a  766c              STRB     r4,[r5,#0x19]
;;;321    	__ee_spc_bat=0;
00002c  f8a54064          STRH     r4,[r5,#0x64]
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000030  4621              MOV      r1,r4
000032  f240209e          MOV      r0,#0x29e
000036  f7fffffe          BL       lc640_write_int
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
00003a  f8df83d0          LDR      r8,|L1.1036|
00003e  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000042  48f3              LDR      r0,|L1.1040|
000044  2100              MOVS     r1,#0
000046  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
00004a  f7fffffe          BL       lc640_write_int
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004e  f8a8404a          STRH     r4,[r8,#0x4a]
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000052  2100              MOVS     r1,#0
000054  f44f70e3          MOV      r0,#0x1c6
000058  f7fffffe          BL       lc640_write_int
;;;329    
;;;330    	
;;;331    	spc_phase=0;
00005c  76ac              STRB     r4,[r5,#0x1a]
;;;332    	__ee_spc_phase=0;
00005e  f8a54066          STRH     r4,[r5,#0x66]
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000062  4621              MOV      r1,r4
000064  f44f7028          MOV      r0,#0x2a0
000068  f7fffffe          BL       lc640_write_int
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006c  eb060046          ADD      r0,r6,r6,LSL #1
000070  eb001006          ADD      r0,r0,r6,LSL #4
000074  eb080180          ADD      r1,r8,r0,LSL #2
000078  48e6              LDR      r0,|L1.1044|
00007a  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
00007c  f1000001          ADD      r0,r0,#1
000080  f0000007          AND      r0,r0,#7
000084  eb010040          ADD      r0,r1,r0,LSL #1
000088  8c00              LDRH     r0,[r0,#0x20]
00008a  9001              STR      r0,[sp,#4]
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
00008c  4ee2              LDR      r6,|L1.1048|
00008e  8bb0              LDRH     r0,[r6,#0x1c]
000090  9000              STR      r0,[sp,#0]
;;;343    		gran_char(&temp,1,99);
000092  f04f0263          MOV      r2,#0x63
000096  f04f0101          MOV      r1,#1
00009a  4668              MOV      r0,sp
00009c  f7fffffe          BL       gran_char
;;;344    		*((char*)(&(ke_date[0])))=temp;
0000a0  4cd9              LDR      r4,|L1.1032|
0000a2  f89d0000          LDRB     r0,[sp,#0]
0000a6  34f8              ADDS     r4,r4,#0xf8
0000a8  7020              STRB     r0,[r4,#0]
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000aa  7e30              LDRB     r0,[r6,#0x18]
0000ac  9000              STR      r0,[sp,#0]
;;;347    		gran_char(&temp,1,12);
0000ae  220c              MOVS     r2,#0xc
0000b0  2101              MOVS     r1,#1
0000b2  4668              MOV      r0,sp
0000b4  f7fffffe          BL       gran_char
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b8  f89d0000          LDRB     r0,[sp,#0]
0000bc  7060              STRB     r0,[r4,#1]
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000be  7b30              LDRB     r0,[r6,#0xc]
0000c0  9000              STR      r0,[sp,#0]
;;;351    		gran_char(&temp,1,31);
0000c2  221f              MOVS     r2,#0x1f
0000c4  2101              MOVS     r1,#1
0000c6  4668              MOV      r0,sp
0000c8  f7fffffe          BL       gran_char
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000cc  f89d0000          LDRB     r0,[sp,#0]
0000d0  70a0              STRB     r0,[r4,#2]
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d2  f89d0004          LDRB     r0,[sp,#4]
0000d6  70e0              STRB     r0,[r4,#3]
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d8  f24020a2          MOV      r0,#0x2a2
0000dc  6821              LDR      r1,[r4,#0]  ; ke_date
0000de  f7fffffe          BL       lc640_write_long
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e2  7a30              LDRB     r0,[r6,#8]
0000e4  9000              STR      r0,[sp,#0]
;;;358    		gran_char(&temp,0,23);
0000e6  2217              MOVS     r2,#0x17
0000e8  2100              MOVS     r1,#0
0000ea  4668              MOV      r0,sp
0000ec  f7fffffe          BL       gran_char
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000f0  f89d0000          LDRB     r0,[sp,#0]
0000f4  7120              STRB     r0,[r4,#4]
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f6  7930              LDRB     r0,[r6,#4]
0000f8  9000              STR      r0,[sp,#0]
;;;362    		gran_char(&temp,0,59);
0000fa  223b              MOVS     r2,#0x3b
0000fc  2100              MOVS     r1,#0
0000fe  4668              MOV      r0,sp
000100  f7fffffe          BL       gran_char
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000104  f89d0000          LDRB     r0,[sp,#0]
000108  7160              STRB     r0,[r4,#5]
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
00010a  7830              LDRB     r0,[r6,#0]
00010c  9000              STR      r0,[sp,#0]
;;;366    		gran_char(&temp,0,59);
00010e  223b              MOVS     r2,#0x3b
000110  2100              MOVS     r1,#0
000112  4668              MOV      r0,sp
000114  f7fffffe          BL       gran_char
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000118  f89d0000          LDRB     r0,[sp,#0]
00011c  71a0              STRB     r0,[r4,#6]
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011e  f89d0005          LDRB     r0,[sp,#5]
000122  71e0              STRB     r0,[r4,#7]
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000124  f24020a6          MOV      r0,#0x2a6
000128  6861              LDR      r1,[r4,#4]  ; ke_date
00012a  f7fffffe          BL       lc640_write_long
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012e  702f              STRB     r7,[r5,#0]
;;;373    	}
;;;374    }
000130  e8bd81fc          POP      {r2-r8,pc}
;;;375    #endif
                          ENDP

                  ke_drv PROC
;;;457    //-----------------------------------------------
;;;458    void ke_drv(void)
000134  e92d47f0          PUSH     {r4-r10,lr}
;;;459    {
000138  b088              SUB      sp,sp,#0x20
;;;460    static char ke_drv_cnt_10s;
;;;461    static short i_bat_buff[6];
;;;462    static char i_bat_buff_cnt;
;;;463    short ke_drv_i_temp;
;;;464    short ke_drv_i_avg;
;;;465    char i;
;;;466    short ke_drv_i_temp_temp;
;;;467    const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
00013a  f04f021c          MOV      r2,#0x1c
00013e  49b7              LDR      r1,|L1.1052|
000140  a801              ADD      r0,sp,#4
000142  f7fffffe          BL       __aeabi_memcpy4
;;;468    
;;;469    if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000146  4eb0              LDR      r6,|L1.1032|
;;;470    	{
;;;471    	
;;;472    	i_bat_buff[0]=0;
000148  4bb5              LDR      r3,|L1.1056|
00014a  2500              MOVS     r5,#0
00014c  79b0              LDRB     r0,[r6,#6]            ;469  ; bat_hndl_zvu_ke_init
00014e  2801              CMP      r0,#1                 ;469
000150  d102              BNE      |L1.344|
000152  801d              STRH     r5,[r3,#0]
;;;473    	i_bat_buff[0]=0;
;;;474    	i_bat_buff[0]=0;
;;;475    	i_bat_buff[0]=0;
;;;476    	i_bat_buff[0]=0;
;;;477    	i_bat_buff[0]=0;
;;;478    	i_bat_buff_cnt=0;
000154  72b5              STRB     r5,[r6,#0xa]
;;;479    
;;;480    	bat_hndl_zvu_ke_init=0;
000156  71b5              STRB     r5,[r6,#6]
                  |L1.344|
;;;481    	}
;;;482    
;;;483    
;;;484    
;;;485    
;;;486    if(spc_stat==spcKE)
000158  7fb0              LDRB     r0,[r6,#0x1e]  ; spc_stat
00015a  2801              CMP      r0,#1
00015c  d17e              BNE      |L1.604|
;;;487    	{
;;;488    	ke_drv_i_temp=-Ib_ips_termokompensat/10;
00015e  48b1              LDR      r0,|L1.1060|
000160  f04f070a          MOV      r7,#0xa
000164  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000168  f1c00000          RSB      r0,r0,#0
00016c  fb90f0f7          SDIV     r0,r0,r7
000170  b200              SXTH     r0,r0
;;;489    	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000172  2800              CMP      r0,#0
000174  da01              BGE      |L1.378|
000176  f04f0000          MOV      r0,#0
                  |L1.378|
;;;490    
;;;491    	bat_hndl_plazma[3]=ke_drv_cnt_10s;
00017a  4aab              LDR      r2,|L1.1064|
00017c  7a71              LDRB     r1,[r6,#9]  ; ke_drv_cnt_10s
00017e  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;492    	if(++ke_drv_cnt_10s>10)
000180  1c49              ADDS     r1,r1,#1
;;;493    		{
;;;494    		ke_drv_cnt_10s=0;
;;;495    
;;;496    		i_bat_buff_cnt++;
;;;497    		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;498    		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;499    		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;500    		ke_drv_i_temp_temp=0;
;;;501    		for(i=0;i<6;i++)
;;;502    			{
;;;503    			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;504    			}
;;;505    		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;506    
;;;507    		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;508    		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;509    		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;510    		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;511    		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;512    		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;513    		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;514    		
;;;515    		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;516    		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;517    		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;518    		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;519    		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;520    		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;521    		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;522    
;;;523    		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;524    		bat_hndl_i_temp=ke_drv_i_avg;
000182  4ca1              LDR      r4,|L1.1032|
000184  b2c9              UXTB     r1,r1                 ;492
000186  3480              ADDS     r4,r4,#0x80
000188  7271              STRB     r1,[r6,#9]            ;492
00018a  290a              CMP      r1,#0xa               ;492
00018c  d967              BLS      |L1.606|
00018e  7275              STRB     r5,[r6,#9]            ;494
000190  7ab1              LDRB     r1,[r6,#0xa]          ;496  ; i_bat_buff_cnt
000192  f1010101          ADD      r1,r1,#1              ;496
000196  b2c9              UXTB     r1,r1                 ;496
000198  72b1              STRB     r1,[r6,#0xa]          ;496
00019a  2906              CMP      r1,#6                 ;497
00019c  d300              BCC      |L1.416|
00019e  72b5              STRB     r5,[r6,#0xa]          ;497
                  |L1.416|
0001a0  7ab1              LDRB     r1,[r6,#0xa]          ;498  ; i_bat_buff_cnt
0001a2  6091              STR      r1,[r2,#8]            ;498  ; bat_hndl_plazma
0001a4  f8230011          STRH     r0,[r3,r1,LSL #1]     ;499
0001a8  f04f0100          MOV      r1,#0                 ;500
0001ac  4608              MOV      r0,r1                 ;501
                  |L1.430|
0001ae  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;503
0001b2  4461              ADD      r1,r1,r12             ;503
0001b4  b209              SXTH     r1,r1                 ;503
0001b6  f1000001          ADD      r0,r0,#1              ;501
0001ba  b2c0              UXTB     r0,r0                 ;501
0001bc  2806              CMP      r0,#6                 ;501
0001be  d3f6              BCC      |L1.430|
0001c0  f04f0006          MOV      r0,#6                 ;505
0001c4  fb91f0f0          SDIV     r0,r1,r0              ;505
0001c8  b201              SXTH     r1,r0                 ;505
0001ca  4898              LDR      r0,|L1.1068|
0001cc  f8df8258          LDR      r8,|L1.1064|
0001d0  8800              LDRH     r0,[r0,#0]            ;507  ; BAT_C_POINT_1_6
0001d2  f1a8081c          SUB      r8,r8,#0x1c           ;507
0001d6  eb000040          ADD      r0,r0,r0,LSL #1       ;507
0001da  ea4f0040          LSL      r0,r0,#1              ;507
0001de  f8a80000          STRH     r0,[r8,#0]            ;507
0001e2  4893              LDR      r0,|L1.1072|
0001e4  8800              LDRH     r0,[r0,#0]            ;508  ; BAT_C_POINT_1_2
0001e6  ea4f0040          LSL      r0,r0,#1              ;508
0001ea  f8a80002          STRH     r0,[r8,#2]            ;508
0001ee  4891              LDR      r0,|L1.1076|
0001f0  8800              LDRH     r0,[r0,#0]            ;509  ; BAT_C_POINT_1
0001f2  f8a80004          STRH     r0,[r8,#4]            ;509
0001f6  4890              LDR      r0,|L1.1080|
0001f8  f04f0303          MOV      r3,#3                 ;510
0001fc  f9b00000          LDRSH    r0,[r0,#0]            ;510  ; BAT_C_POINT_3
000200  fb90f0f3          SDIV     r0,r0,r3              ;510
000204  f8a80006          STRH     r0,[r8,#6]            ;510
000208  488c              LDR      r0,|L1.1084|
00020a  f04f0305          MOV      r3,#5                 ;511
00020e  f9b00000          LDRSH    r0,[r0,#0]            ;511  ; BAT_C_POINT_5
000212  fb90f0f3          SDIV     r0,r0,r3              ;511
000216  f8a80008          STRH     r0,[r8,#8]            ;511
00021a  4889              LDR      r0,|L1.1088|
00021c  f9b00000          LDRSH    r0,[r0,#0]            ;512  ; BAT_C_POINT_10
000220  fb90f0f7          SDIV     r0,r0,r7              ;512
000224  f8a8000a          STRH     r0,[r8,#0xa]          ;512
000228  4886              LDR      r0,|L1.1092|
00022a  f04f0314          MOV      r3,#0x14              ;513
00022e  f9b00000          LDRSH    r0,[r0,#0]            ;513  ; BAT_C_POINT_20
000232  fb90f0f3          SDIV     r0,r0,r3              ;513
000236  f8a8000c          STRH     r0,[r8,#0xc]          ;513
00023a  4883              LDR      r0,|L1.1096|
00023c  f108090e          ADD      r9,r8,#0xe            ;515
000240  f9b07000          LDRSH    r7,[r0,#0]            ;515  ; BAT_U_END_1_6
000244  f8a97000          STRH     r7,[r9,#0]            ;515
000248  4880              LDR      r0,|L1.1100|
00024a  8800              LDRH     r0,[r0,#0]            ;516  ; BAT_U_END_1_2
00024c  f8a90002          STRH     r0,[r9,#2]            ;516
000250  487f              LDR      r0,|L1.1104|
000252  8800              LDRH     r0,[r0,#0]            ;517  ; BAT_U_END_1
000254  f8a90004          STRH     r0,[r9,#4]            ;517
000258  487e              LDR      r0,|L1.1108|
00025a  e001              B        |L1.608|
                  |L1.604|
00025c  e11e              B        |L1.1180|
                  |L1.606|
00025e  e061              B        |L1.804|
                  |L1.608|
000260  8800              LDRH     r0,[r0,#0]            ;518  ; BAT_U_END_3
000262  f8a90006          STRH     r0,[r9,#6]            ;518
000266  487c              LDR      r0,|L1.1112|
000268  8800              LDRH     r0,[r0,#0]            ;519  ; BAT_U_END_5
00026a  f8a90008          STRH     r0,[r9,#8]            ;519
00026e  487b              LDR      r0,|L1.1116|
000270  8800              LDRH     r0,[r0,#0]            ;520  ; BAT_U_END_10
000272  f8a9000a          STRH     r0,[r9,#0xa]          ;520
000276  487a              LDR      r0,|L1.1120|
000278  f9b0c000          LDRSH    r12,[r0,#0]           ;521  ; BAT_U_END_20
00027c  f8a9c00c          STRH     r12,[r9,#0xc]         ;521
000280  6051              STR      r1,[r2,#4]            ;523  ; bat_hndl_plazma
000282  80e1              STRH     r1,[r4,#6]
;;;525    		
;;;526    		for(i=0;i<7;i++)
000284  f04f0000          MOV      r0,#0
                  |L1.648|
;;;527    			{
;;;528    			if(bat_hndl_i_temp>=I_from_t_table[i])
000288  f9383010          LDRSH    r3,[r8,r0,LSL #1]
00028c  428b              CMP      r3,r1
00028e  dd04              BLE      |L1.666|
000290  f1000001          ADD      r0,r0,#1              ;526
000294  b2c0              UXTB     r0,r0                 ;526
000296  2807              CMP      r0,#7                 ;526
000298  d3f6              BCC      |L1.648|
                  |L1.666|
;;;529    				{
;;;530    				break;
;;;531    				}
;;;532    			}
;;;533    
;;;534    		bat_hndl_plazma[0]=i;
00029a  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
00029c  f10d0a04          ADD      r10,sp,#4             ;467
;;;535    
;;;536    		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
0002a0  b1c8              CBZ      r0,|L1.726|
;;;537    		 else if((i>=1)&&(i<7))
0002a2  1e42              SUBS     r2,r0,#1
0002a4  2a06              CMP      r2,#6
0002a6  d219              BCS      |L1.732|
;;;538    		 	{
;;;539    			short i1,i2;
;;;540    			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
0002a8  f8383012          LDRH     r3,[r8,r2,LSL #1]
0002ac  eba30101          SUB      r1,r3,r1
0002b0  b209              SXTH     r1,r1
;;;541    			i2=I_from_t_table[i-1]-I_from_t_table[i];
0002b2  f8388010          LDRH     r8,[r8,r0,LSL #1]
0002b6  eba30308          SUB      r3,r3,r8
0002ba  b21b              SXTH     r3,r3
;;;542    			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
0002bc  f85a8020          LDR      r8,[r10,r0,LSL #2]
0002c0  f85a2022          LDR      r2,[r10,r2,LSL #2]
0002c4  eba80802          SUB      r8,r8,r2
;;;543    			bat_hndl_t_razr_ke*=(long)i1;
0002c8  fb08f801          MUL      r8,r8,r1
;;;544    			bat_hndl_t_razr_ke/=(long)i2;
0002cc  fb98f1f3          SDIV     r1,r8,r3
;;;545    			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
0002d0  4411              ADD      r1,r1,r2
0002d2  64e1              STR      r1,[r4,#0x4c]  ; bat_hndl_t_razr_ke
;;;546    			}
0002d4  e006              B        |L1.740|
                  |L1.726|
0002d6  9901              LDR      r1,[sp,#4]            ;536
0002d8  64e1              STR      r1,[r4,#0x4c]         ;536  ; bat_hndl_t_razr_ke
0002da  e003              B        |L1.740|
                  |L1.732|
;;;547    		else if(i>=7)
0002dc  2807              CMP      r0,#7
0002de  d301              BCC      |L1.740|
;;;548    			{
;;;549    			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
0002e0  9907              LDR      r1,[sp,#0x1c]
0002e2  64e1              STR      r1,[r4,#0x4c]  ; bat_hndl_t_razr_ke
                  |L1.740|
;;;550    			}
;;;551    
;;;552    		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
0002e4  b1c0              CBZ      r0,|L1.792|
;;;553    		 else if((i>=1)&&(i<7))
0002e6  1e41              SUBS     r1,r0,#1
0002e8  2906              CMP      r1,#6
0002ea  d217              BCS      |L1.796|
;;;554    		 	{
;;;555    			long u1,tempL;
;;;556    
;;;557    			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
0002ec  f9393010          LDRSH    r3,[r9,r0,LSL #1]
0002f0  f9392011          LDRSH    r2,[r9,r1,LSL #1]
0002f4  eba30302          SUB      r3,r3,r2
;;;558    			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
0002f8  f85a1021          LDR      r1,[r10,r1,LSL #2]
0002fc  6ce7              LDR      r7,[r4,#0x4c]  ; bat_hndl_t_razr_ke
0002fe  eba70701          SUB      r7,r7,r1
;;;559    			tempL*=u1;
000302  fb03f307          MUL      r3,r3,r7
;;;560    			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000306  f85a0020          LDR      r0,[r10,r0,LSL #2]
00030a  eba00001          SUB      r0,r0,r1
;;;561    			tempL/=u1;
00030e  fb93f0f0          SDIV     r0,r3,r0
;;;562    			tempL+=(long)U_end_from_i_table[i-1];
000312  4410              ADD      r0,r0,r2
;;;563    			bat_hndl_u_end=(short)tempL;
000314  8120              STRH     r0,[r4,#8]
;;;564    			}
000316  e005              B        |L1.804|
                  |L1.792|
000318  8127              STRH     r7,[r4,#8]            ;552
00031a  e003              B        |L1.804|
                  |L1.796|
;;;565    		else if(i>=7)
00031c  2807              CMP      r0,#7
00031e  d301              BCC      |L1.804|
;;;566    			{
;;;567    			bat_hndl_u_end=U_end_from_i_table[6];
000320  f8a4c008          STRH     r12,[r4,#8]
                  |L1.804|
;;;568    			}
;;;569    
;;;570    		}
;;;571    
;;;572    
;;;573    
;;;574    	if(spc_phase==0)
000324  f8960020          LDRB     r0,[r6,#0x20]  ; spc_phase
;;;575    		{
;;;576    		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;577    		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;578    
;;;579    		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;580    	    	
;;;581    		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;582    			{
;;;583    			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;584    			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000328  4f39              LDR      r7,|L1.1040|
;;;585    			}
;;;586    
;;;587    		bat[0]._time_min_cnt_ke++;
;;;588    		if(bat[0]._time_min_cnt_ke>=60)
;;;589    			{
;;;590    			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
00032a  f44f78e3          MOV      r8,#0x1c6
00032e  bbe0              CBNZ     r0,|L1.938|
000330  2314              MOVS     r3,#0x14              ;577
000332  f04f32ff          MOV      r2,#0xffffffff        ;577
000336  21ce              MOVS     r1,#0xce              ;577
000338  20cd              MOVS     r0,#0xcd              ;577
00033a  f7fffffe          BL       mess_send
00033e  7ff1              LDRB     r1,[r6,#0x1f]         ;579  ; spc_bat
000340  f8df90c8          LDR      r9,|L1.1036|
000344  eb010041          ADD      r0,r1,r1,LSL #1       ;579
000348  eb001001          ADD      r0,r0,r1,LSL #4       ;579
00034c  eb090080          ADD      r0,r9,r0,LSL #2       ;579
000350  f9b00008          LDRSH    r0,[r0,#8]            ;579
000354  f7fffffe          BL       abs
000358  f8d91018          LDR      r1,[r9,#0x18]         ;579  ; bat
00035c  4401              ADD      r1,r1,r0              ;579
00035e  f8c91018          STR      r1,[r9,#0x18]         ;579  ; bat
000362  f64840a0          MOV      r0,#0x8ca0            ;581
000366  4281              CMP      r1,r0                 ;581
000368  db0c              BLT      |L1.900|
00036a  eba10100          SUB      r1,r1,r0              ;583
00036e  f8c91018          STR      r1,[r9,#0x18]         ;583  ; bat
000372  8838              LDRH     r0,[r7,#0]            ;584  ; ADR_EE_BAT_ZAR_CNT_KE
000374  f7fffffe          BL       lc640_read_int
000378  1c40              ADDS     r0,r0,#1              ;584
00037a  b201              SXTH     r1,r0                 ;584
00037c  f9b70000          LDRSH    r0,[r7,#0]            ;584  ; ADR_EE_BAT_ZAR_CNT_KE
000380  f7fffffe          BL       lc640_write_int
                  |L1.900|
000384  f8b9004a          LDRH     r0,[r9,#0x4a]         ;587  ; bat
000388  f1000001          ADD      r0,r0,#1              ;587
00038c  b281              UXTH     r1,r0                 ;587
00038e  f8a9104a          STRH     r1,[r9,#0x4a]         ;587
000392  293c              CMP      r1,#0x3c              ;588
000394  d309              BCC      |L1.938|
000396  4640              MOV      r0,r8
000398  f7fffffe          BL       lc640_read_int
00039c  1c40              ADDS     r0,r0,#1
00039e  b201              SXTH     r1,r0
0003a0  4640              MOV      r0,r8
0003a2  f7fffffe          BL       lc640_write_int
;;;591    			bat[0]._time_min_cnt_ke=0;
0003a6  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.938|
;;;592    			}
;;;593    		}
;;;594    
;;;595    	else if(spc_phase==1)
;;;596    		{
;;;597    		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;598    		}
;;;599    
;;;600    	if(out_U<bat_hndl_u_end)
0003aa  482e              LDR      r0,|L1.1124|
0003ac  f9b41008          LDRSH    r1,[r4,#8]  ; bat_hndl_u_end
0003b0  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0003b4  4288              CMP      r0,r1
0003b6  da6f              BGE      |L1.1176|
;;;601    		{
;;;602    		cnt_end_ke++;
0003b8  f8b60064          LDRH     r0,[r6,#0x64]  ; cnt_end_ke
0003bc  f1000001          ADD      r0,r0,#1
0003c0  b200              SXTH     r0,r0
0003c2  f8a60064          STRH     r0,[r6,#0x64]
;;;603    		if(cnt_end_ke>=30)
0003c6  281e              CMP      r0,#0x1e
0003c8  db68              BLT      |L1.1180|
;;;604    			{
;;;605    			
;;;606    			if((spc_stat==spcKE)&&(spc_phase==0))
0003ca  7fb0              LDRB     r0,[r6,#0x1e]  ; spc_stat
0003cc  2801              CMP      r0,#1
0003ce  d158              BNE      |L1.1154|
0003d0  f8960020          LDRB     r0,[r6,#0x20]  ; spc_phase
0003d4  b9b0              CBNZ     r0,|L1.1028|
;;;607    				{
;;;608    				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
0003d6  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0003d8  f7fffffe          BL       lc640_read_int
0003dc  b201              SXTH     r1,r0
0003de  4822              LDR      r0,|L1.1128|
0003e0  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
0003e4  f7fffffe          BL       lc640_write_int
;;;609    				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
0003e8  4640              MOV      r0,r8
0003ea  f7fffffe          BL       lc640_read_int
0003ee  b284              UXTH     r4,r0
0003f0  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0003f2  f7fffffe          BL       lc640_read_int
0003f6  b281              UXTH     r1,r0
0003f8  4622              MOV      r2,r4
0003fa  2000              MOVS     r0,#0
0003fc  f7fffffe          BL       ke_zvu_mem_hndl
;;;610    				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
000400  481a              LDR      r0,|L1.1132|
000402  e035              B        |L1.1136|
                  |L1.1028|
000404  e03d              B        |L1.1154|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      ||area_number.25||
                  |L1.1036|
                          DCD      bat
                  |L1.1040|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.1044|
                          DCD      bat_u_old_cnt
                  |L1.1048|
                          DCD      0x40024020
                  |L1.1052|
                          DCD      ||area_number.19||+0x4
                  |L1.1056|
                          DCD      ||.bss||
                  |L1.1060|
                          DCD      Ib_ips_termokompensat
                  |L1.1064|
                          DCD      ||.bss||+0x468
                  |L1.1068|
                          DCD      BAT_C_POINT_1_6
                  |L1.1072|
                          DCD      BAT_C_POINT_1_2
                  |L1.1076|
                          DCD      BAT_C_POINT_1
                  |L1.1080|
                          DCD      BAT_C_POINT_3
                  |L1.1084|
                          DCD      BAT_C_POINT_5
                  |L1.1088|
                          DCD      BAT_C_POINT_10
                  |L1.1092|
                          DCD      BAT_C_POINT_20
                  |L1.1096|
                          DCD      BAT_U_END_1_6
                  |L1.1100|
                          DCD      BAT_U_END_1_2
                  |L1.1104|
                          DCD      BAT_U_END_1
                  |L1.1108|
                          DCD      BAT_U_END_3
                  |L1.1112|
                          DCD      BAT_U_END_5
                  |L1.1116|
                          DCD      BAT_U_END_10
                  |L1.1120|
                          DCD      BAT_U_END_20
                  |L1.1124|
                          DCD      out_U
                  |L1.1128|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.1132|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.1136|
000470  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
000474  2100              MOVS     r1,#0
000476  f7fffffe          BL       lc640_write_int
;;;611    				cntrl_stat=50;
00047a  f04f0032          MOV      r0,#0x32
00047e  85b0              STRH     r0,[r6,#0x2c]
;;;612    				cntrl_stat_old=50;
000480  85f0              STRH     r0,[r6,#0x2e]
                  |L1.1154|
;;;613    				}
;;;614    
;;;615    			spc_stat=spcOFF;
000482  77b5              STRB     r5,[r6,#0x1e]
;;;616    			__ee_spc_stat=spcOFF;
000484  f8a65068          STRH     r5,[r6,#0x68]
;;;617    			lc640_write_int(EE_SPC_STAT,spcOFF);
000488  b008              ADD      sp,sp,#0x20
00048a  2100              MOVS     r1,#0
00048c  e8bd47f0          POP      {r4-r10,lr}
000490  f240209a          MOV      r0,#0x29a
000494  f7ffbffe          B.W      lc640_write_int
                  |L1.1176|
;;;618    
;;;619    			}
;;;620    		}
;;;621    	else cnt_end_ke=0;
000498  f8a65064          STRH     r5,[r6,#0x64]
                  |L1.1180|
;;;622    
;;;623    	}
;;;624    			
;;;625    }
00049c  b008              ADD      sp,sp,#0x20
00049e  e8bd87f0          POP      {r4-r10,pc}
;;;626    #endif
                          ENDP

                  vz_start PROC
;;;696    //-----------------------------------------------
;;;697    char vz_start(char hour)
0004a2  b570              PUSH     {r4-r6,lr}
;;;698    {          
0004a4  4605              MOV      r5,r0
;;;699    char out;
;;;700    out=0;
0004a6  f04f0600          MOV      r6,#0
;;;701    if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
0004aa  4cff              LDR      r4,|L1.2216|
0004ac  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
0004ae  bb90              CBNZ     r0,|L1.1302|
0004b0  48fe              LDR      r0,|L1.2220|
0004b2  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
0004b4  2801              CMP      r0,#1
0004b6  d02e              BEQ      |L1.1302|
;;;702    	{
;;;703    	spc_stat=spcVZ;
0004b8  f04f0102          MOV      r1,#2
0004bc  77a1              STRB     r1,[r4,#0x1e]
;;;704    	__ee_spc_stat=spcVZ; 
0004be  f8a41068          STRH     r1,[r4,#0x68]
;;;705    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
0004c2  f240209a          MOV      r0,#0x29a
0004c6  f7fffffe          BL       lc640_write_int
;;;706    	vz_cnt_h=hour;
0004ca  f8a45060          STRH     r5,[r4,#0x60]
;;;707    	__ee_vz_cnt=hour*60;
0004ce  ebc51005          RSB      r0,r5,r5,LSL #4
0004d2  ea4f0080          LSL      r0,r0,#2
0004d6  f8a40066          STRH     r0,[r4,#0x66]
;;;708    	if(hour==0)__ee_vz_cnt=30;
0004da  b91d              CBNZ     r5,|L1.1252|
0004dc  f04f001e          MOV      r0,#0x1e
0004e0  f8a40066          STRH     r0,[r4,#0x66]
                  |L1.1252|
;;;709    	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
0004e4  f104045c          ADD      r4,r4,#0x5c
0004e8  f44f7027          MOV      r0,#0x29c
0004ec  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0004f0  f7fffffe          BL       lc640_write_int
;;;710    	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0004f4  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0004f8  f44f702a          MOV      r0,#0x2a8
0004fc  f7fffffe          BL       lc640_write_int
;;;711    	vz_cnt_h_=0;
000500  f04f0000          MOV      r0,#0
000504  80e0              STRH     r0,[r4,#6]
;;;712    	vz_cnt_s=0;
000506  8020              STRH     r0,[r4,#0]
;;;713    	vz_cnt_s_=0;
000508  8060              STRH     r0,[r4,#2]
;;;714    	out=1;
00050a  f04f0601          MOV      r6,#1
;;;715    	vz_mem_hndl(1);
00050e  f04f0001          MOV      r0,#1
000512  f7fffffe          BL       vz_mem_hndl
                  |L1.1302|
;;;716    	}
;;;717    //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;718    //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;719    //plazma=out;	
;;;720    return out;
000516  4630              MOV      r0,r6
;;;721    }
000518  bd70              POP      {r4-r6,pc}
;;;722    
                          ENDP

                  vz_stop PROC
;;;723    //-----------------------------------------------
;;;724    void vz_stop(void)
00051a  b510              PUSH     {r4,lr}
;;;725    {
;;;726    if(spc_stat==spcVZ)
00051c  4ce2              LDR      r4,|L1.2216|
00051e  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
000520  2802              CMP      r0,#2
000522  d113              BNE      |L1.1356|
;;;727         {
;;;728    vz_mem_hndl(vz_cnt_h);          
000524  f104042a          ADD      r4,r4,#0x2a
000528  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
00052a  f7fffffe          BL       vz_mem_hndl
;;;729    vz_cnt_s=0;
00052e  f04f0000          MOV      r0,#0
000532  8660              STRH     r0,[r4,#0x32]
;;;730    vz_cnt_h=0;
000534  86e0              STRH     r0,[r4,#0x36]
;;;731    vz_cnt_h_=0;
000536  8720              STRH     r0,[r4,#0x38]
;;;732    spc_stat=spcOFF;
000538  f8040c0c          STRB     r0,[r4,#-0xc]
;;;733    
;;;734    		__ee_spc_stat=spcOFF;
00053c  87e0              STRH     r0,[r4,#0x3e]
;;;735    		lc640_write_int(EE_SPC_STAT,spcOFF);
00053e  4601              MOV      r1,r0
000540  e8bd4010          POP      {r4,lr}
000544  f240209a          MOV      r0,#0x29a
000548  f7ffbffe          B.W      lc640_write_int
                  |L1.1356|
;;;736         }
;;;737    
;;;738    }
00054c  bd10              POP      {r4,pc}
;;;739    
                          ENDP

                  amper_chas_cnt_drv PROC
;;;741    //-----------------------------------------------
;;;742    void amper_chas_cnt_drv(void)
00054e  b510              PUSH     {r4,lr}
;;;743    {
;;;744    
;;;745    amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
000550  4ad5              LDR      r2,|L1.2216|
000552  49d7              LDR      r1,|L1.2224|
000554  3280              ADDS     r2,r2,#0x80
000556  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00055a  6dd0              LDR      r0,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
00055c  4401              ADD      r1,r1,r0
00055e  65d1              STR      r1,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
;;;746    
;;;747    if(amper_chas_cnt_drv_summ>=36000L)
000560  f64843a0          MOV      r3,#0x8ca0
;;;748    	{
;;;749    	amper_chas_cnt_drv_summ-=36000L;
;;;750    	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
000564  f44f74e4          MOV      r4,#0x1c8
000568  4299              CMP      r1,r3                 ;747
00056a  db0c              BLT      |L1.1414|
00056c  eba10103          SUB      r1,r1,r3              ;749
000570  65d1              STR      r1,[r2,#0x5c]         ;749  ; amper_chas_cnt_drv_summ
000572  4620              MOV      r0,r4
000574  f7fffffe          BL       lc640_read_int
000578  1c40              ADDS     r0,r0,#1
00057a  b201              SXTH     r1,r0
00057c  4620              MOV      r0,r4
00057e  e8bd4010          POP      {r4,lr}
000582  f7ffbffe          B.W      lc640_write_int
                  |L1.1414|
;;;751    	}
;;;752    else if(amper_chas_cnt_drv_summ<=-36000L)
000586  48cb              LDR      r0,|L1.2228|
000588  4281              CMP      r1,r0
00058a  dc0c              BGT      |L1.1446|
;;;753    	{
;;;754    	amper_chas_cnt_drv_summ+=36000L;
00058c  eb010003          ADD      r0,r1,r3
000590  65d0              STR      r0,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
;;;755    	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
000592  4620              MOV      r0,r4
000594  f7fffffe          BL       lc640_read_int
000598  1e40              SUBS     r0,r0,#1
00059a  b201              SXTH     r1,r0
00059c  4620              MOV      r0,r4
00059e  e8bd4010          POP      {r4,lr}
0005a2  f7ffbffe          B.W      lc640_write_int
                  |L1.1446|
;;;756    	}
;;;757    }
0005a6  bd10              POP      {r4,pc}
;;;758    #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;760    //-----------------------------------------------
;;;761    void avz_next_date_hndl(void)
0005a8  b570              PUSH     {r4-r6,lr}
;;;762    {
;;;763    if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0005aa  4cc3              LDR      r4,|L1.2232|
0005ac  f8940038          LDRB     r0,[r4,#0x38]
0005b0  4dc2              LDR      r5,|L1.2236|
0005b2  7829              LDRB     r1,[r5,#0]  ; AVZ
0005b4  4408              ADD      r0,r0,r1
0005b6  280c              CMP      r0,#0xc
0005b8  d906              BLS      |L1.1480|
0005ba  8fa0              LDRH     r0,[r4,#0x3c]
0005bc  1c40              ADDS     r0,r0,#1
0005be  b201              SXTH     r1,r0
0005c0  20b8              MOVS     r0,#0xb8
0005c2  f7fffffe          BL       lc640_write_int
0005c6  e004              B        |L1.1490|
                  |L1.1480|
;;;764    else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
0005c8  f9b4103c          LDRSH    r1,[r4,#0x3c]
0005cc  20b8              MOVS     r0,#0xb8
0005ce  f7fffffe          BL       lc640_write_int
                  |L1.1490|
;;;765    
;;;766    //lc640_write_int(EE_YEAR_AVZ,6);
;;;767    
;;;768    if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
0005d2  f8941038          LDRB     r1,[r4,#0x38]
0005d6  7828              LDRB     r0,[r5,#0]  ; AVZ
0005d8  4401              ADD      r1,r1,r0
0005da  290c              CMP      r1,#0xc
0005dc  d907              BLS      |L1.1518|
0005de  f8941038          LDRB     r1,[r4,#0x38]
0005e2  380c              SUBS     r0,r0,#0xc
0005e4  4401              ADD      r1,r1,r0
0005e6  20b6              MOVS     r0,#0xb6
0005e8  f7fffffe          BL       lc640_write_int
0005ec  e005              B        |L1.1530|
                  |L1.1518|
;;;769    else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0005ee  f8941038          LDRB     r1,[r4,#0x38]
0005f2  4401              ADD      r1,r1,r0
0005f4  20b6              MOVS     r0,#0xb6
0005f6  f7fffffe          BL       lc640_write_int
                  |L1.1530|
;;;770    
;;;771    //lc640_write_int(EE_MONTH_AVZ,5);
;;;772    
;;;773    if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0005fa  f894002c          LDRB     r0,[r4,#0x2c]
0005fe  281c              CMP      r0,#0x1c
000600  d904              BLS      |L1.1548|
000602  211c              MOVS     r1,#0x1c
000604  20b4              MOVS     r0,#0xb4
000606  f7fffffe          BL       lc640_write_int
00060a  e004              B        |L1.1558|
                  |L1.1548|
;;;774    else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
00060c  f894102c          LDRB     r1,[r4,#0x2c]
000610  20b4              MOVS     r0,#0xb4
000612  f7fffffe          BL       lc640_write_int
                  |L1.1558|
;;;775    
;;;776    //lc640_write_int(EE_DATE_AVZ,4);
;;;777    
;;;778    lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
000616  f1040420          ADD      r4,r4,#0x20
00061a  7a21              LDRB     r1,[r4,#8]
00061c  f04f00ae          MOV      r0,#0xae
000620  f7fffffe          BL       lc640_write_int
;;;779    lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
000624  7921              LDRB     r1,[r4,#4]
000626  20b0              MOVS     r0,#0xb0
000628  f7fffffe          BL       lc640_write_int
;;;780    lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
00062c  7821              LDRB     r1,[r4,#0]
00062e  e8bd4070          POP      {r4-r6,lr}
000632  20b2              MOVS     r0,#0xb2
000634  f7ffbffe          B.W      lc640_write_int
;;;781    
;;;782    }
;;;783    
                          ENDP

                  avz_drv PROC
;;;784    //-----------------------------------------------
;;;785    void avz_drv(void)                               
000638  b510              PUSH     {r4,lr}
;;;786    {                
;;;787    if(AVZ!=AVZ_OFF)
00063a  48a0              LDR      r0,|L1.2236|
;;;788    	{
;;;789    	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;790    		{
;;;791    		bAVZ=1;
00063c  4c9a              LDR      r4,|L1.2216|
00063e  7800              LDRB     r0,[r0,#0]            ;787  ; AVZ
000640  b338              CBZ      r0,|L1.1682|
000642  489d              LDR      r0,|L1.2232|
000644  8f82              LDRH     r2,[r0,#0x3c]         ;789
000646  499e              LDR      r1,|L1.2240|
000648  8809              LDRH     r1,[r1,#0]            ;789  ; YEAR_AVZ
00064a  428a              CMP      r2,r1                 ;789
00064c  d121              BNE      |L1.1682|
00064e  f8902038          LDRB     r2,[r0,#0x38]         ;789
000652  499c              LDR      r1,|L1.2244|
000654  8809              LDRH     r1,[r1,#0]            ;789  ; MONTH_AVZ
000656  428a              CMP      r2,r1                 ;789
000658  d11b              BNE      |L1.1682|
00065a  f890102c          LDRB     r1,[r0,#0x2c]         ;789
00065e  4a9a              LDR      r2,|L1.2248|
000660  8812              LDRH     r2,[r2,#0]            ;789  ; DATE_AVZ
000662  4291              CMP      r1,r2                 ;789
000664  d115              BNE      |L1.1682|
000666  f8901028          LDRB     r1,[r0,#0x28]         ;789
00066a  4a98              LDR      r2,|L1.2252|
00066c  8812              LDRH     r2,[r2,#0]            ;789  ; HOUR_AVZ
00066e  4291              CMP      r1,r2                 ;789
000670  d10f              BNE      |L1.1682|
000672  f8901024          LDRB     r1,[r0,#0x24]         ;789
000676  4a96              LDR      r2,|L1.2256|
000678  8812              LDRH     r2,[r2,#0]            ;789  ; MIN_AVZ
00067a  4291              CMP      r1,r2                 ;789
00067c  d109              BNE      |L1.1682|
00067e  f8900020          LDRB     r0,[r0,#0x20]         ;789
000682  4994              LDR      r1,|L1.2260|
000684  8809              LDRH     r1,[r1,#0]            ;789  ; SEC_AVZ
000686  4288              CMP      r0,r1                 ;789
000688  d103              BNE      |L1.1682|
00068a  f04f0001          MOV      r0,#1
00068e  f8840021          STRB     r0,[r4,#0x21]
                  |L1.1682|
;;;792    		}
;;;793    	}
;;;794    if(bAVZ)
000692  f8940021          LDRB     r0,[r4,#0x21]  ; bAVZ
000696  2800              CMP      r0,#0
000698  d00d              BEQ      |L1.1718|
;;;795    	{
;;;796    	if(vz_start(AVZ_TIME))
00069a  488f              LDR      r0,|L1.2264|
00069c  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
00069e  b2c0              UXTB     r0,r0
0006a0  f7fffffe          BL       vz_start
0006a4  2800              CMP      r0,#0
0006a6  d006              BEQ      |L1.1718|
;;;797    		{
;;;798    		bAVZ=0;
0006a8  f04f0000          MOV      r0,#0
0006ac  f8840021          STRB     r0,[r4,#0x21]
;;;799    		avz_next_date_hndl();
0006b0  e8bd4010          POP      {r4,lr}
0006b4  e7fe              B        avz_next_date_hndl
                  |L1.1718|
;;;800    		}
;;;801    	}	
;;;802    
;;;803    }
0006b6  bd10              POP      {r4,pc}
;;;804    
                          ENDP

                  vz_drv PROC
;;;805    //-----------------------------------------------
;;;806    void vz_drv(void)
0006b8  b538              PUSH     {r3-r5,lr}
;;;807    { 
;;;808    if(spc_stat==spcVZ)
0006ba  4c7b              LDR      r4,|L1.2216|
0006bc  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
0006be  2802              CMP      r0,#2
0006c0  d119              BNE      |L1.1782|
;;;809    	{
;;;810    	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
0006c2  4886              LDR      r0,|L1.2268|
0006c4  7800              LDRB     r0,[r0,#0]  ; sk_stat
0006c6  2801              CMP      r0,#1
0006c8  d016              BEQ      |L1.1784|
0006ca  4885              LDR      r0,|L1.2272|
0006cc  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
0006ce  b198              CBZ      r0,|L1.1784|
;;;811    		{
;;;812    
;;;813    	if(vz_cnt_s_<3600)
;;;814    		{
;;;815    		vz_cnt_s_++;
;;;816    		if(vz_cnt_s_>=3600)
;;;817    			{
;;;818    			vz_cnt_s_=0;
;;;819    			if(vz_cnt_h)
;;;820    				{
;;;821    				vz_cnt_h--;
;;;822    				vz_cnt_h_++;
;;;823    				}
;;;824    			}
;;;825    		}
;;;826    
;;;827    
;;;828    	if(vz_cnt_s<60)
;;;829    		{
;;;830    		vz_cnt_s++;
;;;831    		if(vz_cnt_s>=60)
;;;832    			{
;;;833    			vz_cnt_s=0;
;;;834    			
;;;835    			__ee_vz_cnt--;
;;;836    			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;837    			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;838    				{
;;;839    				spc_stat=spcOFF;
;;;840    						__ee_spc_stat=spcOFF;
;;;841    		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;842    
;;;843    //				hv_vz_stat=hvsOFF;
;;;844    //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;845    				vz_mem_hndl(0);
;;;846    				}
;;;847    			}
;;;848    		}
;;;849    
;;;850    		}
;;;851    	else 
;;;852    		{
;;;853    		if(((LPC_RTC->SEC)%10)==0)
0006d0  4884              LDR      r0,|L1.2276|
0006d2  7800              LDRB     r0,[r0,#0]
0006d4  f04f010a          MOV      r1,#0xa
0006d8  fbb0f2f1          UDIV     r2,r0,r1
0006dc  fb010012          MLS      r0,r1,r2,r0
0006e0  2800              CMP      r0,#0
0006e2  d108              BNE      |L1.1782|
;;;854    			{
;;;855    			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0006e4  f2413088          MOV      r0,#0x1388
0006e8  9000              STR      r0,[sp,#0]
0006ea  a37f              ADR      r3,|L1.2280|
0006ec  a284              ADR      r2,|L1.2304|
0006ee  a18a              ADR      r1,|L1.2328|
0006f0  a08f              ADR      r0,|L1.2352|
0006f2  f7fffffe          BL       show_mess
                  |L1.1782|
;;;856    						"    ЗАБЛОКИРОВАН    ",
;;;857    						"     НЕИСПРАВНА     ",
;;;858    						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;859    						5000);			
;;;860    			}
;;;861    		}
;;;862    /*	if(vz_cnt_s_>=3)
;;;863    		{
;;;864    		if(sk_stat[0]==0)
;;;865    		} */
;;;866    
;;;867    	}
;;;868    
;;;869    
;;;870    } 
0006f6  bd38              POP      {r3-r5,pc}
                  |L1.1784|
0006f8  f8b4005e          LDRH     r0,[r4,#0x5e]         ;813  ; vz_cnt_s_
0006fc  f44f6161          MOV      r1,#0xe10             ;813
000700  2500              MOVS     r5,#0                 ;810
000702  4288              CMP      r0,r1                 ;813
000704  d215              BCS      |L1.1842|
000706  f1000001          ADD      r0,r0,#1              ;815
00070a  b280              UXTH     r0,r0                 ;815
00070c  f8a4005e          STRH     r0,[r4,#0x5e]         ;815
000710  4288              CMP      r0,r1                 ;816
000712  d30e              BCC      |L1.1842|
000714  f8a4505e          STRH     r5,[r4,#0x5e]         ;818
000718  f8b40060          LDRH     r0,[r4,#0x60]         ;819  ; vz_cnt_h
00071c  b148              CBZ      r0,|L1.1842|
00071e  f1a00001          SUB      r0,r0,#1              ;821
000722  f8240f60          STRH     r0,[r4,#0x60]!        ;821
000726  8860              LDRH     r0,[r4,#2]            ;822  ; vz_cnt_h_
000728  f1000001          ADD      r0,r0,#1              ;822
00072c  8060              STRH     r0,[r4,#2]            ;822
00072e  f1a40460          SUB      r4,r4,#0x60           ;822
                  |L1.1842|
000732  f8b4005c          LDRH     r0,[r4,#0x5c]         ;828  ; vz_cnt_s
000736  283c              CMP      r0,#0x3c              ;828
000738  d2dd              BCS      |L1.1782|
00073a  f1000001          ADD      r0,r0,#1              ;830
00073e  b280              UXTH     r0,r0                 ;830
000740  f8a4005c          STRH     r0,[r4,#0x5c]         ;830
000744  283c              CMP      r0,#0x3c              ;831
000746  d3d6              BCC      |L1.1782|
000748  f8245f5c          STRH     r5,[r4,#0x5c]!        ;833
00074c  8960              LDRH     r0,[r4,#0xa]          ;835  ; __ee_vz_cnt
00074e  f1a00001          SUB      r0,r0,#1              ;835
000752  b201              SXTH     r1,r0                 ;835
000754  8161              STRH     r1,[r4,#0xa]          ;835
000756  f44f7027          MOV      r0,#0x29c             ;836
00075a  f7fffffe          BL       lc640_write_int
00075e  8960              LDRH     r0,[r4,#0xa]          ;837  ; __ee_vz_cnt
000760  f1a4045c          SUB      r4,r4,#0x5c           ;837
000764  b118              CBZ      r0,|L1.1902|
000766  4851              LDR      r0,|L1.2220|
000768  8800              LDRH     r0,[r0,#0]            ;837  ; speedChrgBlckStat
00076a  2801              CMP      r0,#1                 ;837
00076c  d1c3              BNE      |L1.1782|
                  |L1.1902|
00076e  77a5              STRB     r5,[r4,#0x1e]         ;839
000770  f8a45068          STRH     r5,[r4,#0x68]         ;840
000774  2100              MOVS     r1,#0                 ;841
000776  f240209a          MOV      r0,#0x29a             ;841
00077a  f7fffffe          BL       lc640_write_int
00077e  e8bd4038          POP      {r3-r5,lr}            ;845
000782  2000              MOVS     r0,#0                 ;845
000784  f7ffbffe          B.W      vz_mem_hndl
;;;871    
                          ENDP

                  vz1_drv PROC
;;;873    //драйвер уравнительного заряда
;;;874    void vz1_drv(void)
000788  e92d4ff8          PUSH     {r3-r11,lr}
;;;875    {
;;;876    if(volt_region_cnt)volt_region_cnt--;
00078c  f8df8118          LDR      r8,|L1.2216|
000790  f9b80076          LDRSH    r0,[r8,#0x76]  ; volt_region_cnt
000794  b118              CBZ      r0,|L1.1950|
000796  f1a00001          SUB      r0,r0,#1
00079a  f8a80076          STRH     r0,[r8,#0x76]
                  |L1.1950|
;;;877    if(vz1_stat==vz1sOFF)
00079e  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
0007a2  b928              CBNZ     r0,|L1.1968|
;;;878    	{
;;;879    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0007a4  2314              MOVS     r3,#0x14
0007a6  2200              MOVS     r2,#0
0007a8  2164              MOVS     r1,#0x64
0007aa  20d2              MOVS     r0,#0xd2
0007ac  f7fffffe          BL       mess_send
                  |L1.1968|
;;;880    	}
;;;881    if(vz1_stat==vz1sSTEP1)
0007b0  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
;;;882    	{
;;;883    	if(vz1_stat_old!=vz1_stat)
;;;884    		{
;;;885    		vz1_stat_cnt=5;
;;;886    		}
;;;887    	if(vz1_stat_cnt)
;;;888    		{
;;;889    		vz1_stat_cnt--;
;;;890    		if(vz1_stat_cnt==0)
;;;891    			{
;;;892    			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;893    			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;894    			}
;;;895    		}
;;;896    	if(sk_stat[0]==1)
0007b4  4d49              LDR      r5,|L1.2268|
0007b6  f44f7bc9          MOV      r11,#0x192            ;893
0007ba  2801              CMP      r0,#1                 ;881
0007bc  d139              BNE      |L1.2098|
0007be  f8980002          LDRB     r0,[r8,#2]            ;883  ; vz1_stat_old
0007c2  2801              CMP      r0,#1                 ;883
0007c4  d003              BEQ      |L1.1998|
0007c6  f04f0005          MOV      r0,#5                 ;885
0007ca  f8a80074          STRH     r0,[r8,#0x74]         ;885
                  |L1.1998|
0007ce  f9b80074          LDRSH    r0,[r8,#0x74]         ;887  ; vz1_stat_cnt
0007d2  b168              CBZ      r0,|L1.2032|
0007d4  f1a00001          SUB      r0,r0,#1              ;889
0007d8  b200              SXTH     r0,r0                 ;889
0007da  f8a80074          STRH     r0,[r8,#0x74]         ;889
0007de  b938              CBNZ     r0,|L1.2032|
0007e0  f04f000b          MOV      r0,#0xb               ;892
0007e4  f8880001          STRB     r0,[r8,#1]            ;892
0007e8  4601              MOV      r1,r0                 ;893
0007ea  4658              MOV      r0,r11                ;893
0007ec  f7fffffe          BL       lc640_write
                  |L1.2032|
0007f0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0007f2  2801              CMP      r0,#1
0007f4  d117              BNE      |L1.2086|
;;;897    		{
;;;898    		vz1_stat=vz1sSTEP2;
0007f6  f04f0002          MOV      r0,#2
0007fa  f8880001          STRB     r0,[r8,#1]
;;;899    		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0007fe  4601              MOV      r1,r0
000800  4658              MOV      r0,r11
000802  f7fffffe          BL       lc640_write
;;;900    		tree_up(iVZ1_STEP2_2,1,0,0);
000806  2300              MOVS     r3,#0
000808  461a              MOV      r2,r3
00080a  2101              MOVS     r1,#1
00080c  20de              MOVS     r0,#0xde
00080e  f7fffffe          BL       tree_up
;;;901    		tree_up(iVZ1_STEP2_1,0,0,0);
000812  2300              MOVS     r3,#0
000814  461a              MOV      r2,r3
000816  4619              MOV      r1,r3
000818  20dd              MOVS     r0,#0xdd
00081a  f7fffffe          BL       tree_up
;;;902    		ret(1200);
00081e  f44f6096          MOV      r0,#0x4b0
000822  f7fffffe          BL       ||ret||
                  |L1.2086|
;;;903    		}
;;;904    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000826  2314              MOVS     r3,#0x14
000828  2200              MOVS     r2,#0
00082a  2164              MOVS     r1,#0x64
00082c  20d2              MOVS     r0,#0xd2
00082e  f7fffffe          BL       mess_send
                  |L1.2098|
;;;905    	}
;;;906    
;;;907    if(vz1_stat==vz1sSTEP2)
000832  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
;;;908    	{
;;;909    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;910    		{
;;;911    		vz1_stat_cnt=15;
000836  f04f090f          MOV      r9,#0xf
00083a  2802              CMP      r0,#2                 ;907
00083c  d118              BNE      |L1.2160|
00083e  f8980002          LDRB     r0,[r8,#2]            ;909  ; vz1_stat_old
000842  2802              CMP      r0,#2                 ;909
000844  d102              BNE      |L1.2124|
000846  f8b80074          LDRH     r0,[r8,#0x74]         ;909  ; vz1_stat_cnt
00084a  b908              CBNZ     r0,|L1.2128|
                  |L1.2124|
00084c  f8a89074          STRH     r9,[r8,#0x74]
                  |L1.2128|
;;;912    		}
;;;913    	vz1_stat_cnt--;
000850  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000854  f1a00001          SUB      r0,r0,#1
000858  f8a80074          STRH     r0,[r8,#0x74]
;;;914    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00085c  f04f0314          MOV      r3,#0x14
000860  f04f0200          MOV      r2,#0
000864  f04f0164          MOV      r1,#0x64
000868  f04f00d2          MOV      r0,#0xd2
00086c  f7fffffe          BL       mess_send
                  |L1.2160|
;;;915    	}
;;;916    
;;;917    if(vz1_stat==vz1sSTEP3)
000870  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
;;;918    	{
;;;919    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;920    		{
;;;921    		vz1_stat_cnt=10;
000874  240a              MOVS     r4,#0xa
000876  2600              MOVS     r6,#0                 ;876
000878  f04f0a01          MOV      r10,#1                ;877
;;;922    
;;;923    		}
;;;924    	vz1_stat_cnt--;
;;;925    	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;926    		{
;;;927    		show_mess(	"     ВКЛЮЧИТЕ       ",
00087c  f2413788          MOV      r7,#0x1388
000880  2803              CMP      r0,#3                 ;917
000882  d17e              BNE      |L1.2434|
000884  f8980002          LDRB     r0,[r8,#2]            ;919  ; vz1_stat_old
000888  2803              CMP      r0,#3                 ;919
00088a  d102              BNE      |L1.2194|
00088c  f8b80074          LDRH     r0,[r8,#0x74]         ;919  ; vz1_stat_cnt
000890  b908              CBNZ     r0,|L1.2198|
                  |L1.2194|
000892  f8a84074          STRH     r4,[r8,#0x74]         ;921
                  |L1.2198|
000896  f8b80074          LDRH     r0,[r8,#0x74]         ;924  ; vz1_stat_cnt
00089a  f1a00001          SUB      r0,r0,#1              ;924
00089e  b200              SXTH     r0,r0                 ;924
0008a0  f8a80074          STRH     r0,[r8,#0x74]         ;924
0008a4  280a              CMP      r0,#0xa               ;925
0008a6  e04f              B        |L1.2376|
                  |L1.2216|
                          DCD      ||area_number.25||
                  |L1.2220|
                          DCD      speedChrgBlckStat
                  |L1.2224|
                          DCD      Ib_ips_termokompensat
                  |L1.2228|
                          DCD      0xffff7360
                  |L1.2232|
                          DCD      0x40024000
                  |L1.2236|
                          DCD      AVZ
                  |L1.2240|
                          DCD      YEAR_AVZ
                  |L1.2244|
                          DCD      MONTH_AVZ
                  |L1.2248|
                          DCD      DATE_AVZ
                  |L1.2252|
                          DCD      HOUR_AVZ
                  |L1.2256|
                          DCD      MIN_AVZ
                  |L1.2260|
                          DCD      SEC_AVZ
                  |L1.2264|
                          DCD      AVZ_TIME
                  |L1.2268|
                          DCD      sk_stat
                  |L1.2272|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.2276|
                          DCD      0x40024020
                  |L1.2280|
0008e8  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
0008ec  c2c5cdd2
0008f0  c8cbdfd6
0008f4  c8df2121
0008f8  21202020
0008fc  00      
0008fd  00                DCB      0
0008fe  00                DCB      0
0008ff  00                DCB      0
                  |L1.2304|
000900  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
000904  20cdc5c8
000908  d1cfd0c0
00090c  c2cdc020
000910  20202020
000914  00      
000915  00                DCB      0
000916  00                DCB      0
000917  00                DCB      0
                  |L1.2328|
000918  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
00091c  c7c0c1cb
000920  cecac8d0
000924  cec2c0cd
000928  20      
000929  20202000          DCB      "   ",0
00092d  00                DCB      0
00092e  00                DCB      0
00092f  00                DCB      0
                  |L1.2352|
000930  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
000934  c2cdc8c2
000938  c0ded9c8
00093c  c920c7  
00093f  c0d0dfc4          DCB      192,208,223,196," ",0
000943  2000    
000945  00                DCB      0
000946  00                DCB      0
000947  00                DCB      0
                  |L1.2376|
000948  d001              BEQ      |L1.2382|
00094a  2809              CMP      r0,#9                 ;925
00094c  d106              BNE      |L1.2396|
                  |L1.2382|
00094e  a3e8              ADR      r3,|L1.3312|
000950  a2ed              ADR      r2,|L1.3336|
000952  a1f3              ADR      r1,|L1.3360|
000954  a0f8              ADR      r0,|L1.3384|
000956  9700              STR      r7,[sp,#0]
000958  f7fffffe          BL       show_mess
                  |L1.2396|
;;;928    					"      ТУМБЛЕР       ",
;;;929    					"     ВЫСОКОГО       ",
;;;930    					"    НАПРЯЖЕНИЯ      ",
;;;931    					5000);
;;;932    		}
;;;933    	if(sk_stat[1]==1)
00095c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00095e  2801              CMP      r0,#1
000960  d10d              BNE      |L1.2430|
;;;934    		{
;;;935    		vz1_stat=vz1sWRK;
000962  f8884001          STRB     r4,[r8,#1]
;;;936    		lc640_write(EE_VZ1_STAT,vz1sWRK);
000966  210a              MOVS     r1,#0xa
000968  4658              MOV      r0,r11
00096a  f7fffffe          BL       lc640_write
;;;937    		volt_region=1;
00096e  f888a02a          STRB     r10,[r8,#0x2a]
;;;938    		cntrl_stat=0;
000972  f8a8602c          STRH     r6,[r8,#0x2c]
;;;939    		cntrl_stat_new=0;
000976  f8a86042          STRH     r6,[r8,#0x42]
;;;940    		cntrl_stat_old=0;
00097a  f8a8602e          STRH     r6,[r8,#0x2e]
                  |L1.2430|
;;;941    		}
;;;942    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00097e  2314              MOVS     r3,#0x14
000980  e000              B        |L1.2436|
                  |L1.2434|
000982  e004              B        |L1.2446|
                  |L1.2436|
000984  2200              MOVS     r2,#0
000986  2164              MOVS     r1,#0x64
000988  20d2              MOVS     r0,#0xd2
00098a  f7fffffe          BL       mess_send
                  |L1.2446|
;;;943    	}
;;;944    
;;;945    if(vz1_stat==vz1sWRK)
00098e  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000992  280a              CMP      r0,#0xa
000994  d17d              BNE      |L1.2706|
;;;946    	{
;;;947    	if(vz1_stat_old!=vz1_stat)
000996  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
;;;948    		{
;;;949    		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00099a  49ed              LDR      r1,|L1.3408|
00099c  280a              CMP      r0,#0xa               ;947
00099e  d008              BEQ      |L1.2482|
0009a0  48ec              LDR      r0,|L1.3412|
0009a2  f44f6261          MOV      r2,#0xe10
0009a6  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
0009aa  fb00f002          MUL      r0,r0,r2
0009ae  6388              STR      r0,[r1,#0x38]  ; vz1_wrk_cnt
;;;950    		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;951    		vz1_up_cnt=0L;
0009b0  63ce              STR      r6,[r1,#0x3c]  ; vz1_up_cnt
                  |L1.2482|
;;;952    
;;;953    		}
;;;954    	vz1_wrk_cnt--;
0009b2  6b88              LDR      r0,[r1,#0x38]  ; vz1_wrk_cnt
0009b4  f1a00001          SUB      r0,r0,#1
0009b8  6388              STR      r0,[r1,#0x38]  ; vz1_wrk_cnt
;;;955    	vz1_up_cnt++;
0009ba  6bca              LDR      r2,[r1,#0x3c]  ; vz1_up_cnt
0009bc  f1020201          ADD      r2,r2,#1
0009c0  63ca              STR      r2,[r1,#0x3c]  ; vz1_up_cnt
;;;956    
;;;957    	if(vz1_wrk_cnt==0)
0009c2  b940              CBNZ     r0,|L1.2518|
;;;958    		{
;;;959    		vz1_stat=vz1sFINE;
0009c4  f8889001          STRB     r9,[r8,#1]
;;;960    		lc640_write(EE_VZ1_STAT,vz1sFINE);
0009c8  210f              MOVS     r1,#0xf
0009ca  4658              MOV      r0,r11
0009cc  f7fffffe          BL       lc640_write
;;;961    		uz_mem_hndl(0);
0009d0  2000              MOVS     r0,#0
0009d2  f7fffffe          BL       uz_mem_hndl
                  |L1.2518|
;;;962    		}
;;;963    	if(sk_stat[0]==0)
0009d6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0009d8  b938              CBNZ     r0,|L1.2538|
;;;964    		{
;;;965    		vz1_stat=vz1sERR2;
0009da  f04f000c          MOV      r0,#0xc
0009de  f8880001          STRB     r0,[r8,#1]
;;;966    		lc640_write(EE_VZ1_STAT,vz1sERR2);
0009e2  4601              MOV      r1,r0
0009e4  4658              MOV      r0,r11
0009e6  f7fffffe          BL       lc640_write
                  |L1.2538|
;;;967    		}
;;;968    	if(sk_stat[1]==0)
0009ea  7868              LDRB     r0,[r5,#1]  ; sk_stat
0009ec  b938              CBNZ     r0,|L1.2558|
;;;969    		{
;;;970    		vz1_stat=vz1sERR3;
0009ee  f04f000d          MOV      r0,#0xd
0009f2  f8880001          STRB     r0,[r8,#1]
;;;971    		lc640_write(EE_VZ1_STAT,vz1sERR3);
0009f6  4601              MOV      r1,r0
0009f8  4658              MOV      r0,r11
0009fa  f7fffffe          BL       lc640_write
                  |L1.2558|
;;;972    		}
;;;973    	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0009fe  f9b80044          LDRSH    r0,[r8,#0x44]  ; Ibmax
000a02  f8b81046          LDRH     r1,[r8,#0x46]  ; IZMAX_
000a06  fb90f0f4          SDIV     r0,r0,r4
;;;974    		{
;;;975    		volt_region=0;
;;;976    		cntrl_stat=1000;
000a0a  f44f727a          MOV      r2,#0x3e8
000a0e  4288              CMP      r0,r1                 ;973
000a10  dd16              BLE      |L1.2624|
000a12  f9b8302c          LDRSH    r3,[r8,#0x2c]         ;973  ; cntrl_stat
000a16  2b14              CMP      r3,#0x14              ;973
000a18  dc12              BGT      |L1.2624|
000a1a  f898302a          LDRB     r3,[r8,#0x2a]         ;973  ; volt_region
000a1e  2b01              CMP      r3,#1                 ;973
000a20  d10e              BNE      |L1.2624|
000a22  f8b83076          LDRH     r3,[r8,#0x76]         ;973  ; volt_region_cnt
000a26  b95b              CBNZ     r3,|L1.2624|
000a28  f888602a          STRB     r6,[r8,#0x2a]         ;975
000a2c  f8a8202c          STRH     r2,[r8,#0x2c]
;;;977    		cntrl_stat_new=1000;
000a30  f8a82042          STRH     r2,[r8,#0x42]
;;;978    		cntrl_stat_old=1000;
000a34  f8a8202e          STRH     r2,[r8,#0x2e]
;;;979    		volt_region_cnt=110;
000a38  f04f036e          MOV      r3,#0x6e
000a3c  f8a83076          STRH     r3,[r8,#0x76]
                  |L1.2624|
;;;980    		}
;;;981    	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
000a40  4288              CMP      r0,r1
000a42  da13              BGE      |L1.2668|
000a44  f9b8002c          LDRSH    r0,[r8,#0x2c]  ; cntrl_stat
000a48  4290              CMP      r0,r2
000a4a  db0f              BLT      |L1.2668|
000a4c  f898002a          LDRB     r0,[r8,#0x2a]  ; volt_region
000a50  b960              CBNZ     r0,|L1.2668|
000a52  f8b80076          LDRH     r0,[r8,#0x76]  ; volt_region_cnt
000a56  b948              CBNZ     r0,|L1.2668|
;;;982    		{
;;;983    		volt_region=1;
000a58  f888a02a          STRB     r10,[r8,#0x2a]
;;;984    		cntrl_stat=10;
000a5c  f8a8402c          STRH     r4,[r8,#0x2c]
;;;985    		cntrl_stat_new=10;
000a60  f8a84042          STRH     r4,[r8,#0x42]
;;;986    		cntrl_stat_old=10;
000a64  f8a8402e          STRH     r4,[r8,#0x2e]
;;;987    		volt_region_cnt=10;
000a68  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.2668|
;;;988    		}
;;;989    	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000a6c  f898002a          LDRB     r0,[r8,#0x2a]  ; volt_region
000a70  b110              CBZ      r0,|L1.2680|
;;;990    	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
000a72  2801              CMP      r0,#1
000a74  d007              BEQ      |L1.2694|
000a76  e00c              B        |L1.2706|
                  |L1.2680|
000a78  2314              MOVS     r3,#0x14              ;989
000a7a  2200              MOVS     r2,#0                 ;989
000a7c  2164              MOVS     r1,#0x64              ;989
000a7e  20d2              MOVS     r0,#0xd2              ;989
000a80  f7fffffe          BL       mess_send
000a84  e005              B        |L1.2706|
                  |L1.2694|
000a86  2314              MOVS     r3,#0x14
000a88  2201              MOVS     r2,#1
000a8a  2164              MOVS     r1,#0x64
000a8c  20d2              MOVS     r0,#0xd2
000a8e  f7fffffe          BL       mess_send
                  |L1.2706|
;;;991    	}
;;;992    
;;;993    if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
000a92  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000a96  280b              CMP      r0,#0xb
000a98  d120              BNE      |L1.2780|
;;;994    	{
;;;995    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000a9a  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000a9e  280b              CMP      r0,#0xb
000aa0  d102              BNE      |L1.2728|
000aa2  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000aa6  b908              CBNZ     r0,|L1.2732|
                  |L1.2728|
;;;996    		{
;;;997    		vz1_stat_cnt=10;
000aa8  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2732|
;;;998    		}
;;;999    	vz1_stat_cnt--;
000aac  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000ab0  f1a00001          SUB      r0,r0,#1
000ab4  b200              SXTH     r0,r0
000ab6  f8a80074          STRH     r0,[r8,#0x74]
;;;1000   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000aba  280a              CMP      r0,#0xa
000abc  d001              BEQ      |L1.2754|
000abe  2809              CMP      r0,#9
000ac0  d106              BNE      |L1.2768|
                  |L1.2754|
;;;1001   		{
;;;1002   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000ac2  a3a5              ADR      r3,|L1.3416|
000ac4  a2aa              ADR      r2,|L1.3440|
000ac6  a1b0              ADR      r1,|L1.3464|
000ac8  a0b5              ADR      r0,|L1.3488|
000aca  9700              STR      r7,[sp,#0]
000acc  f7fffffe          BL       show_mess
                  |L1.2768|
;;;1003   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1004   					"      ВКЛЮЧЕН       ",
;;;1005   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1006   					5000);
;;;1007   		}
;;;1008   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000ad0  2314              MOVS     r3,#0x14
000ad2  2200              MOVS     r2,#0
000ad4  2164              MOVS     r1,#0x64
000ad6  20d2              MOVS     r0,#0xd2
000ad8  f7fffffe          BL       mess_send
                  |L1.2780|
;;;1009   	}
;;;1010   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
000adc  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000ae0  280c              CMP      r0,#0xc
000ae2  d12c              BNE      |L1.2878|
;;;1011   	{
;;;1012   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000ae4  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000ae8  280c              CMP      r0,#0xc
000aea  d102              BNE      |L1.2802|
000aec  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000af0  b908              CBNZ     r0,|L1.2806|
                  |L1.2802|
;;;1013   		{
;;;1014   		vz1_stat_cnt=10;
000af2  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2806|
;;;1015   		}
;;;1016   	vz1_stat_cnt--;
000af6  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000afa  f1a00001          SUB      r0,r0,#1
000afe  b200              SXTH     r0,r0
000b00  f8a80074          STRH     r0,[r8,#0x74]
;;;1017   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000b04  280a              CMP      r0,#0xa
000b06  d001              BEQ      |L1.2828|
000b08  2809              CMP      r0,#9
000b0a  d109              BNE      |L1.2848|
                  |L1.2828|
;;;1018   		{
;;;1019   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000b0c  f2af2328          ADR      r3,|L1.2280|
000b10  f2af2214          ADR      r2,|L1.2304|
000b14  f2af2100          ADR      r1,|L1.2328|
000b18  a0a1              ADR      r0,|L1.3488|
000b1a  9700              STR      r7,[sp,#0]
000b1c  f7fffffe          BL       show_mess
                  |L1.2848|
;;;1020   					"    ЗАБЛОКИРОВАН    ",
;;;1021   					"     НЕИСПРАВНА     ",
;;;1022   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1023   					5000);
;;;1024   		}
;;;1025   	if(sk_stat[0]==1)
000b20  7828              LDRB     r0,[r5,#0]  ; sk_stat
000b22  2801              CMP      r0,#1
000b24  d105              BNE      |L1.2866|
;;;1026   		{
;;;1027   		vz1_stat=vz1sWRK;
000b26  f8884001          STRB     r4,[r8,#1]
;;;1028   		lc640_write(EE_VZ1_STAT,vz1sWRK);
000b2a  210a              MOVS     r1,#0xa
000b2c  4658              MOV      r0,r11
000b2e  f7fffffe          BL       lc640_write
                  |L1.2866|
;;;1029   		}
;;;1030   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000b32  2314              MOVS     r3,#0x14
000b34  2200              MOVS     r2,#0
000b36  2164              MOVS     r1,#0x64
000b38  20d2              MOVS     r0,#0xd2
000b3a  f7fffffe          BL       mess_send
                  |L1.2878|
;;;1031   	}
;;;1032   
;;;1033   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
000b3e  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000b42  280d              CMP      r0,#0xd
000b44  d129              BNE      |L1.2970|
;;;1034   	{
;;;1035   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000b46  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000b4a  280d              CMP      r0,#0xd
000b4c  d102              BNE      |L1.2900|
000b4e  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000b52  b908              CBNZ     r0,|L1.2904|
                  |L1.2900|
;;;1036   		{
;;;1037   		vz1_stat_cnt=10;
000b54  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2904|
;;;1038   		}
;;;1039   	vz1_stat_cnt--;
000b58  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000b5c  f1a00001          SUB      r0,r0,#1
000b60  b200              SXTH     r0,r0
000b62  f8a80074          STRH     r0,[r8,#0x74]
;;;1040   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000b66  280a              CMP      r0,#0xa
000b68  d001              BEQ      |L1.2926|
000b6a  2809              CMP      r0,#9
000b6c  d106              BNE      |L1.2940|
                  |L1.2926|
;;;1041   		{
;;;1042   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000b6e  a392              ADR      r3,|L1.3512|
000b70  a297              ADR      r2,|L1.3536|
000b72  a19d              ADR      r1,|L1.3560|
000b74  a08a              ADR      r0,|L1.3488|
000b76  9700              STR      r7,[sp,#0]
000b78  f7fffffe          BL       show_mess
                  |L1.2940|
;;;1043   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1044   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1045   					"*   ТУМБЛЕРА!!!     ",
;;;1046   					5000);
;;;1047   		}
;;;1048   	if(sk_stat[1]==1)
000b7c  7868              LDRB     r0,[r5,#1]  ; sk_stat
000b7e  2801              CMP      r0,#1
000b80  d105              BNE      |L1.2958|
;;;1049   		{
;;;1050   		vz1_stat=vz1sWRK;
000b82  f8884001          STRB     r4,[r8,#1]
;;;1051   		lc640_write(EE_VZ1_STAT,vz1sWRK);
000b86  210a              MOVS     r1,#0xa
000b88  4658              MOV      r0,r11
000b8a  f7fffffe          BL       lc640_write
                  |L1.2958|
;;;1052   		}
;;;1053   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000b8e  2314              MOVS     r3,#0x14
000b90  2200              MOVS     r2,#0
000b92  2164              MOVS     r1,#0x64
000b94  20d2              MOVS     r0,#0xd2
000b96  f7fffffe          BL       mess_send
                  |L1.2970|
;;;1054   	}
;;;1055   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
000b9a  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000b9e  280e              CMP      r0,#0xe
000ba0  d12a              BNE      |L1.3064|
;;;1056   	{
;;;1057   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000ba2  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000ba6  280e              CMP      r0,#0xe
000ba8  d102              BNE      |L1.2992|
000baa  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000bae  b908              CBNZ     r0,|L1.2996|
                  |L1.2992|
;;;1058   		{
;;;1059   		vz1_stat_cnt=10;
000bb0  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2996|
;;;1060   		}
;;;1061   	vz1_stat_cnt--;
000bb4  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000bb8  f1a00001          SUB      r0,r0,#1
000bbc  b200              SXTH     r0,r0
000bbe  f8a80074          STRH     r0,[r8,#0x74]
;;;1062   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000bc2  280a              CMP      r0,#0xa
000bc4  d001              BEQ      |L1.3018|
000bc6  2809              CMP      r0,#9
000bc8  d106              BNE      |L1.3032|
                  |L1.3018|
;;;1063   		{
;;;1064   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
000bca  a349              ADR      r3,|L1.3312|
000bcc  a24e              ADR      r2,|L1.3336|
000bce  a154              ADR      r1,|L1.3360|
000bd0  a08b              ADR      r0,|L1.3584|
000bd2  9700              STR      r7,[sp,#0]
000bd4  f7fffffe          BL       show_mess
                  |L1.3032|
;;;1065   					"      ТУМБЛЕР       ",
;;;1066   					"     ВЫСОКОГО       ",
;;;1067   					"    НАПРЯЖЕНИЯ      ",
;;;1068   					5000);
;;;1069   		}
;;;1070   	if(sk_stat[1]==0)
000bd8  7868              LDRB     r0,[r5,#1]  ; sk_stat
000bda  b938              CBNZ     r0,|L1.3052|
;;;1071   		{
;;;1072   		vz1_stat=vz1sOFF;
000bdc  f8886001          STRB     r6,[r8,#1]
;;;1073   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000be0  2100              MOVS     r1,#0
000be2  4658              MOV      r0,r11
000be4  f7fffffe          BL       lc640_write
;;;1074   		vz_stop();
000be8  f7fffffe          BL       vz_stop
                  |L1.3052|
;;;1075   
;;;1076   		}
;;;1077   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
000bec  2314              MOVS     r3,#0x14
000bee  2201              MOVS     r2,#1
000bf0  2164              MOVS     r1,#0x64
000bf2  20d2              MOVS     r0,#0xd2
000bf4  f7fffffe          BL       mess_send
                  |L1.3064|
;;;1078   	}
;;;1079   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
000bf8  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
;;;1080   	{
;;;1081   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1082   		{
;;;1083   		vz1_stat_cnt=10;
;;;1084   		}
;;;1085   	vz1_stat_cnt--;
;;;1086   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1087   		{
;;;1088   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
000bfc  f64037b8          MOV      r7,#0xbb8
000c00  280f              CMP      r0,#0xf               ;1079
000c02  d135              BNE      |L1.3184|
000c04  f8980002          LDRB     r0,[r8,#2]            ;1081  ; vz1_stat_old
000c08  280f              CMP      r0,#0xf               ;1081
000c0a  d102              BNE      |L1.3090|
000c0c  f8b80074          LDRH     r0,[r8,#0x74]         ;1081  ; vz1_stat_cnt
000c10  b908              CBNZ     r0,|L1.3094|
                  |L1.3090|
000c12  f8a84074          STRH     r4,[r8,#0x74]         ;1083
                  |L1.3094|
000c16  f8b80074          LDRH     r0,[r8,#0x74]         ;1085  ; vz1_stat_cnt
000c1a  f1a00001          SUB      r0,r0,#1              ;1085
000c1e  b200              SXTH     r0,r0                 ;1085
000c20  f8a80074          STRH     r0,[r8,#0x74]         ;1085
000c24  280a              CMP      r0,#0xa               ;1086
000c26  d001              BEQ      |L1.3116|
000c28  2809              CMP      r0,#9                 ;1086
000c2a  d106              BNE      |L1.3130|
                  |L1.3116|
000c2c  a37a              ADR      r3,|L1.3608|
000c2e  a280              ADR      r2,|L1.3632|
000c30  a185              ADR      r1,|L1.3656|
000c32  a08b              ADR      r0,|L1.3680|
000c34  9700              STR      r7,[sp,#0]
000c36  f7fffffe          BL       show_mess
                  |L1.3130|
;;;1089   					"       ЗАРЯД        ",
;;;1090   					"      УСПЕШНО       ",
;;;1091   					"     ЗАВЕРШЕН       ",
;;;1092   					3000);
;;;1093   		}
;;;1094   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
000c3a  f9b80074          LDRSH    r0,[r8,#0x74]  ; vz1_stat_cnt
000c3e  2806              CMP      r0,#6
000c40  d001              BEQ      |L1.3142|
000c42  2805              CMP      r0,#5
000c44  d106              BNE      |L1.3156|
                  |L1.3142|
;;;1095   		{
;;;1096   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
000c46  a32a              ADR      r3,|L1.3312|
000c48  a22f              ADR      r2,|L1.3336|
000c4a  a135              ADR      r1,|L1.3360|
000c4c  a08a              ADR      r0,|L1.3704|
000c4e  9700              STR      r7,[sp,#0]
000c50  f7fffffe          BL       show_mess
                  |L1.3156|
;;;1097   					"      ТУМБЛЕР       ",
;;;1098   					"     ВЫСОКОГО       ",
;;;1099   					"    НАПРЯЖЕНИЯ      ",
;;;1100   					3000);
;;;1101   		}
;;;1102   	if(sk_stat[1]==0)
000c54  7868              LDRB     r0,[r5,#1]  ; sk_stat
000c56  b928              CBNZ     r0,|L1.3172|
;;;1103   		{
;;;1104   		vz1_stat=vz1sOFF;
000c58  f8886001          STRB     r6,[r8,#1]
;;;1105   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000c5c  2100              MOVS     r1,#0
000c5e  4658              MOV      r0,r11
000c60  f7fffffe          BL       lc640_write
                  |L1.3172|
;;;1106   		}
;;;1107   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000c64  2314              MOVS     r3,#0x14
000c66  2200              MOVS     r2,#0
000c68  2164              MOVS     r1,#0x64
000c6a  20d2              MOVS     r0,#0xd2
000c6c  f7fffffe          BL       mess_send
                  |L1.3184|
;;;1108   	}
;;;1109   
;;;1110   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
000c70  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000c74  2810              CMP      r0,#0x10
000c76  d135              BNE      |L1.3300|
;;;1111   	{
;;;1112   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000c78  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000c7c  2810              CMP      r0,#0x10
000c7e  d102              BNE      |L1.3206|
000c80  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000c84  b908              CBNZ     r0,|L1.3210|
                  |L1.3206|
;;;1113   		{
;;;1114   		vz1_stat_cnt=10;
000c86  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.3210|
;;;1115   		}
;;;1116   	vz1_stat_cnt--;
000c8a  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000c8e  f1a00001          SUB      r0,r0,#1
000c92  b200              SXTH     r0,r0
000c94  f8a80074          STRH     r0,[r8,#0x74]
;;;1117   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000c98  280a              CMP      r0,#0xa
000c9a  d001              BEQ      |L1.3232|
000c9c  2809              CMP      r0,#9
000c9e  d106              BNE      |L1.3246|
                  |L1.3232|
;;;1118   		{
;;;1119   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
000ca0  a37b              ADR      r3,|L1.3728|
000ca2  a281              ADR      r2,|L1.3752|
000ca4  a168              ADR      r1,|L1.3656|
000ca6  a06e              ADR      r0,|L1.3680|
000ca8  9700              STR      r7,[sp,#0]
000caa  f7fffffe          BL       show_mess
                  |L1.3246|
;;;1120   					"       ЗАРЯД        ",
;;;1121   					"     ПРЕКРАЩЕН      ",
;;;1122   					"                    ",
;;;1123   					3000);
;;;1124   		}
;;;1125   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
000cae  f9b80074          LDRSH    r0,[r8,#0x74]  ; vz1_stat_cnt
000cb2  2806              CMP      r0,#6
000cb4  d001              BEQ      |L1.3258|
000cb6  2805              CMP      r0,#5
000cb8  d106              BNE      |L1.3272|
                  |L1.3258|
;;;1126   		{
;;;1127   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
000cba  a30d              ADR      r3,|L1.3312|
000cbc  a212              ADR      r2,|L1.3336|
000cbe  a118              ADR      r1,|L1.3360|
000cc0  a06d              ADR      r0,|L1.3704|
000cc2  9700              STR      r7,[sp,#0]
000cc4  f7fffffe          BL       show_mess
                  |L1.3272|
;;;1128   					"      ТУМБЛЕР       ",
;;;1129   					"     ВЫСОКОГО       ",
;;;1130   					"    НАПРЯЖЕНИЯ      ",
;;;1131   					3000);
;;;1132   		}
;;;1133   	if(sk_stat[1]==0)
000cc8  7868              LDRB     r0,[r5,#1]  ; sk_stat
000cca  b928              CBNZ     r0,|L1.3288|
;;;1134   		{
;;;1135   		vz1_stat=vz1sOFF;
000ccc  f8886001          STRB     r6,[r8,#1]
;;;1136   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000cd0  2100              MOVS     r1,#0
000cd2  4658              MOV      r0,r11
000cd4  f7fffffe          BL       lc640_write
                  |L1.3288|
;;;1137   		}
;;;1138   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000cd8  2314              MOVS     r3,#0x14
000cda  2200              MOVS     r2,#0
000cdc  2164              MOVS     r1,#0x64
000cde  20d2              MOVS     r0,#0xd2
000ce0  f7fffffe          BL       mess_send
                  |L1.3300|
;;;1139   	}
;;;1140   
;;;1141   vz1_stat_old=vz1_stat;
000ce4  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000ce8  f8880002          STRB     r0,[r8,#2]
;;;1142   
;;;1143   
;;;1144   
;;;1145   }
000cec  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.3312|
000cf0  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
000cf4  cdc0cfd0
000cf8  dfc6c5cd
000cfc  c8df2020
000d00  20202020
000d04  00      
000d05  00                DCB      0
000d06  00                DCB      0
000d07  00                DCB      0
                  |L1.3336|
000d08  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
000d0c  20c2dbd1
000d10  cecacec3
000d14  ce202020
000d18  20202020
000d1c  00      
000d1d  00                DCB      0
000d1e  00                DCB      0
000d1f  00                DCB      0
                  |L1.3360|
000d20  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
000d24  2020d2d3
000d28  ccc1cbc5
000d2c  d0202020
000d30  20202020
000d34  00      
000d35  00                DCB      0
000d36  00                DCB      0
000d37  00                DCB      0
                  |L1.3384|
000d38  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
000d3c  20c2cacb
000d40  ded7c8d2
000d44  c5202020
000d48  20202020
000d4c  00      
000d4d  00                DCB      0
000d4e  00                DCB      0
000d4f  00                DCB      0
                  |L1.3408|
                          DCD      ||area_number.25||+0x80
                  |L1.3412|
                          DCD      UZ_T
                  |L1.3416|
000d58  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
000d5c  c720c2c5
000d60  cdd2c8cb
000d64  dfd6c8  
000d67  c8212120          DCB      200,"!!  ",0
000d6b  2000    
000d6d  00                DCB      0
000d6e  00                DCB      0
000d6f  00                DCB      0
                  |L1.3440|
000d70  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
000d74  2020c2ca
000d78  cbded7c5
000d7c  cd202020
000d80  20202020
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L1.3464|
000d88  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
000d8c  c520ccce
000d90  c6c5d220
000d94  c1dbd2dc
000d98  20202020          DCB      "    ",0
000d9c  00      
000d9d  00                DCB      0
000d9e  00                DCB      0
000d9f  00                DCB      0
                  |L1.3488|
000da0  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
000da4  cdc8d2c5
000da8  cbdccddb
000dac  c920c7  
000daf  c0d0dfc4          DCB      192,208,223,196," ",0
000db3  2000    
000db5  00                DCB      0
000db6  00                DCB      0
000db7  00                DCB      0
                  |L1.3512|
000db8  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
000dbc  d2d3ccc1
000dc0  cbc5d0c0
000dc4  21212120
000dc8  20202020
000dcc  00      
000dcd  00                DCB      0
000dce  00                DCB      0
000dcf  00                DCB      0
                  |L1.3536|
000dd0  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
000dd4  d1cbc520
000dd8  c2cacbde
000ddc  d7c5cd  
000ddf  c8df2020          DCB      200,223,"   ",0
000de3  2000    
000de5  00                DCB      0
000de6  00                DCB      0
000de7  00                DCB      0
                  |L1.3560|
000de8  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
000dec  c4c5d220
000df0  cfd0cec4
000df4  cecbc6  
000df7  c5cd2020          DCB      197,205,"   ",0
000dfb  2000    
000dfd  00                DCB      0
000dfe  00                DCB      0
000dff  00                DCB      0
                  |L1.3584|
000e00  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
000e04  20c2dbca
000e08  cbded7c8
000e0c  d2c52020
000e10  20202020
000e14  00      
000e15  00                DCB      0
000e16  00                DCB      0
000e17  00                DCB      0
                  |L1.3608|
000e18  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
000e1c  20c7c0c2
000e20  c5d0d8c5
000e24  cd202020
000e28  20202020
000e2c  00      
000e2d  00                DCB      0
000e2e  00                DCB      0
000e2f  00                DCB      0
                  |L1.3632|
000e30  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
000e34  2020d3d1
000e38  cfc5d8cd
000e3c  ce202020
000e40  20202020
000e44  00      
000e45  00                DCB      0
000e46  00                DCB      0
000e47  00                DCB      0
                  |L1.3656|
000e48  20202020          DCB      "       ",199,192,208,223,196,"        ",0
000e4c  202020c7
000e50  c0d0dfc4
000e54  20202020
000e58  20202020
000e5c  00      
000e5d  00                DCB      0
000e5e  00                DCB      0
000e5f  00                DCB      0
                  |L1.3680|
000e60  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
000e64  d0c0c2cd
000e68  c8d2c5cb
000e6c  dccddbc9
000e70  20202020          DCB      "    ",0
000e74  00      
000e75  00                DCB      0
000e76  00                DCB      0
000e77  00                DCB      0
                  |L1.3704|
000e78  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
000e7c  20c2dbca
000e80  cbded7c8
000e84  d2c52020
000e88  20202020
000e8c  00      
000e8d  00                DCB      0
000e8e  00                DCB      0
000e8f  00                DCB      0
                  |L1.3728|
000e90  20202020          DCB      "                    ",0
000e94  20202020
000e98  20202020
000e9c  20202020
000ea0  20202020
000ea4  00      
000ea5  00                DCB      0
000ea6  00                DCB      0
000ea7  00                DCB      0
                  |L1.3752|
000ea8  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
000eac  20cfd0c5
000eb0  cad0c0d9
000eb4  c5cd2020
000eb8  20202020
000ebc  00      
000ebd  00                DCB      0
000ebe  00                DCB      0
000ebf  00                DCB      0
                          ENDP

                  vz1_start PROC
;;;1148   //старт уравнительног заряда
;;;1149   char vz1_start(char hour)
000ec0  b510              PUSH     {r4,lr}
;;;1150   {          
;;;1151   char out;
;;;1152   out=0;
000ec2  f04f0000          MOV      r0,#0
;;;1153   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
000ec6  49fb              LDR      r1,|L1.4788|
000ec8  7f8a              LDRB     r2,[r1,#0x1e]  ; spc_stat
000eca  2a00              CMP      r2,#0
000ecc  d110              BNE      |L1.3824|
000ece  4afa              LDR      r2,|L1.4792|
000ed0  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
000ed2  2a01              CMP      r2,#1
000ed4  d00c              BEQ      |L1.3824|
000ed6  784a              LDRB     r2,[r1,#1]  ; vz1_stat
000ed8  2a00              CMP      r2,#0
000eda  d109              BNE      |L1.3824|
;;;1154   	{
;;;1155   	if(vz1_stat==vz1sOFF)
;;;1156   		{
;;;1157   		vz1_stat=vz1sSTEP1;
000edc  f04f0001          MOV      r0,#1
000ee0  7048              STRB     r0,[r1,#1]
;;;1158   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
000ee2  4601              MOV      r1,r0
000ee4  f44f70c9          MOV      r0,#0x192
000ee8  f7fffffe          BL       lc640_write
;;;1159   		out=1;
000eec  f04f0001          MOV      r0,#1
                  |L1.3824|
;;;1160   		
;;;1161   		}
;;;1162   /*	spc_stat=spcVZ;
;;;1163   	__ee_spc_stat=spcVZ; 
;;;1164   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1165   	vz_cnt_h=hour;
;;;1166   	__ee_vz_cnt=hour*60;
;;;1167   	if(hour==0)__ee_vz_cnt=30;
;;;1168   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1169   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1170   	vz_cnt_h_=0;
;;;1171   	vz_cnt_s=0;
;;;1172   	vz_cnt_s_=0;
;;;1173   	
;;;1174   		*/
;;;1175   	}
;;;1176   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1177   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1178   //plazma=out;	
;;;1179   return out;
;;;1180   }
000ef0  bd10              POP      {r4,pc}
;;;1181   
                          ENDP

                  vz1_stop PROC
;;;1183   //стоп уравнительног заряда
;;;1184   void vz1_stop(void)
000ef2  48f0              LDR      r0,|L1.4788|
;;;1185   {
;;;1186   if(vz1_stat!=vz1sOFF)
000ef4  7841              LDRB     r1,[r0,#1]  ; vz1_stat
000ef6  2900              CMP      r1,#0
000ef8  d006              BEQ      |L1.3848|
;;;1187   	{
;;;1188   	vz1_stat=vz1sSTOP;
000efa  f04f0110          MOV      r1,#0x10
000efe  7041              STRB     r1,[r0,#1]
;;;1189   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
000f00  f44f70c9          MOV      r0,#0x192
000f04  f7ffbffe          B.W      lc640_write
                  |L1.3848|
;;;1190   	}
;;;1191   }
000f08  4770              BX       lr
;;;1192   
                          ENDP

                  vz2_drv PROC
;;;1194   //драйвер формовочного заряда
;;;1195   void vz2_drv(void)
000f0a  e92d4ff8          PUSH     {r3-r11,lr}
;;;1196   {
;;;1197   
;;;1198   if(vz2_stat==vz2sSTEP1)
000f0e  4ee9              LDR      r6,|L1.4788|
;;;1199   	{
;;;1200   	if(vz2_stat_old!=vz2_stat)
;;;1201   		{
;;;1202   		vz2_stat_cnt=5;
;;;1203   		}
;;;1204   	if(vz2_stat_cnt)
;;;1205   		{
;;;1206   		vz2_stat_cnt--;
;;;1207   		if(vz2_stat_cnt==0)
;;;1208   			{
;;;1209   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1210   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1211   			}
;;;1212   		}
;;;1213   	if(sk_stat[0]==1)
000f10  4dea              LDR      r5,|L1.4796|
000f12  78f0              LDRB     r0,[r6,#3]            ;1198  ; vz2_stat
000f14  2801              CMP      r0,#1                 ;1198
000f16  d138              BNE      |L1.3978|
000f18  7930              LDRB     r0,[r6,#4]            ;1200  ; vz2_stat_old
000f1a  2801              CMP      r0,#1                 ;1200
000f1c  d003              BEQ      |L1.3878|
000f1e  f04f0005          MOV      r0,#5                 ;1202
000f22  f8a60078          STRH     r0,[r6,#0x78]         ;1202
                  |L1.3878|
000f26  f9b60078          LDRSH    r0,[r6,#0x78]         ;1204  ; vz2_stat_cnt
000f2a  b168              CBZ      r0,|L1.3912|
000f2c  f1a00001          SUB      r0,r0,#1              ;1206
000f30  b200              SXTH     r0,r0                 ;1206
000f32  f8a60078          STRH     r0,[r6,#0x78]         ;1206
000f36  b938              CBNZ     r0,|L1.3912|
000f38  f04f000c          MOV      r0,#0xc               ;1209
000f3c  70f0              STRB     r0,[r6,#3]            ;1209
000f3e  4601              MOV      r1,r0                 ;1210
000f40  f44f70ca          MOV      r0,#0x194             ;1210
000f44  f7fffffe          BL       lc640_write
                  |L1.3912|
000f48  7828              LDRB     r0,[r5,#0]  ; sk_stat
000f4a  2801              CMP      r0,#1
000f4c  d117              BNE      |L1.3966|
;;;1214   		{
;;;1215   		vz2_stat=vz2sSTEP2;
000f4e  f04f0002          MOV      r0,#2
000f52  70f0              STRB     r0,[r6,#3]
;;;1216   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
000f54  4601              MOV      r1,r0
000f56  f44f70ca          MOV      r0,#0x194
000f5a  f7fffffe          BL       lc640_write
;;;1217   		tree_up(iVZ2_STEP2_2,1,0,0);
000f5e  2300              MOVS     r3,#0
000f60  461a              MOV      r2,r3
000f62  2101              MOVS     r1,#1
000f64  20e0              MOVS     r0,#0xe0
000f66  f7fffffe          BL       tree_up
;;;1218   		tree_up(iVZ2_STEP2_1,0,0,0);
000f6a  2300              MOVS     r3,#0
000f6c  461a              MOV      r2,r3
000f6e  4619              MOV      r1,r3
000f70  20df              MOVS     r0,#0xdf
000f72  f7fffffe          BL       tree_up
;;;1219   		ret(1200);
000f76  f44f6096          MOV      r0,#0x4b0
000f7a  f7fffffe          BL       ||ret||
                  |L1.3966|
;;;1220   		}
;;;1221   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000f7e  2314              MOVS     r3,#0x14
000f80  2200              MOVS     r2,#0
000f82  2164              MOVS     r1,#0x64
000f84  20d2              MOVS     r0,#0xd2
000f86  f7fffffe          BL       mess_send
                  |L1.3978|
;;;1222   	}
;;;1223   
;;;1224   if(vz2_stat==vz2sSTEP2)
000f8a  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
000f8c  2802              CMP      r0,#2
000f8e  d119              BNE      |L1.4036|
;;;1225   	{
;;;1226   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
000f90  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
000f92  2802              CMP      r0,#2
000f94  d102              BNE      |L1.3996|
000f96  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
000f9a  b918              CBNZ     r0,|L1.4004|
                  |L1.3996|
;;;1227   		{
;;;1228   		vz2_stat_cnt=15;
000f9c  f04f000f          MOV      r0,#0xf
000fa0  f8a60078          STRH     r0,[r6,#0x78]
                  |L1.4004|
;;;1229   		}
;;;1230   	vz2_stat_cnt--;
000fa4  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
000fa8  f1a00001          SUB      r0,r0,#1
000fac  f8a60078          STRH     r0,[r6,#0x78]
;;;1231   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000fb0  f04f0314          MOV      r3,#0x14
000fb4  f04f0200          MOV      r2,#0
000fb8  f04f0164          MOV      r1,#0x64
000fbc  f04f00d2          MOV      r0,#0xd2
000fc0  f7fffffe          BL       mess_send
                  |L1.4036|
;;;1232   	}
;;;1233   
;;;1234   if(vz2_stat==vz2sSTEP3)
000fc4  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
;;;1235   	{
;;;1236   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1237   		{
;;;1238   		vz2_stat_cnt=10;
000fc6  240a              MOVS     r4,#0xa
000fc8  2700              MOVS     r7,#0
;;;1239   		cntrl_stat=0;
;;;1240   		cntrl_stat_new=0;
;;;1241   		cntrl_stat_old=0;
;;;1242   		}
;;;1243   	vz2_stat_cnt--;
;;;1244   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1245   		{
;;;1246   		show_mess(	"     ВКЛЮЧИТЕ       ",
000fca  f2413888          MOV      r8,#0x1388
000fce  2803              CMP      r0,#3                 ;1234
000fd0  d139              BNE      |L1.4166|
000fd2  7930              LDRB     r0,[r6,#4]            ;1236  ; vz2_stat_old
000fd4  2803              CMP      r0,#3                 ;1236
000fd6  d102              BNE      |L1.4062|
000fd8  f8b60078          LDRH     r0,[r6,#0x78]         ;1236  ; vz2_stat_cnt
000fdc  b928              CBNZ     r0,|L1.4074|
                  |L1.4062|
000fde  f8a64078          STRH     r4,[r6,#0x78]         ;1238
000fe2  85b7              STRH     r7,[r6,#0x2c]         ;1239
000fe4  f8a67042          STRH     r7,[r6,#0x42]         ;1240
000fe8  85f7              STRH     r7,[r6,#0x2e]         ;1241
                  |L1.4074|
000fea  f8b60078          LDRH     r0,[r6,#0x78]         ;1243  ; vz2_stat_cnt
000fee  f1a00001          SUB      r0,r0,#1              ;1243
000ff2  b200              SXTH     r0,r0                 ;1243
000ff4  f8a60078          STRH     r0,[r6,#0x78]         ;1243
000ff8  280a              CMP      r0,#0xa               ;1244
000ffa  d001              BEQ      |L1.4096|
000ffc  2809              CMP      r0,#9                 ;1244
000ffe  d10b              BNE      |L1.4120|
                  |L1.4096|
001000  f2af3314          ADR      r3,|L1.3312|
001004  f2af3200          ADR      r2,|L1.3336|
001008  f2af21ec          ADR      r1,|L1.3360|
00100c  f2af20d8          ADR      r0,|L1.3384|
001010  f8cd8000          STR      r8,[sp,#0]
001014  f7fffffe          BL       show_mess
                  |L1.4120|
;;;1247   					"      ТУМБЛЕР       ",
;;;1248   					"     ВЫСОКОГО       ",
;;;1249   					"    НАПРЯЖЕНИЯ      ",
;;;1250   					5000);
;;;1251   		}
;;;1252   	if(sk_stat[1]==1)
001018  7868              LDRB     r0,[r5,#1]  ; sk_stat
00101a  2801              CMP      r0,#1
00101c  d10d              BNE      |L1.4154|
;;;1253   		{
;;;1254   		vz2_stat=vz2sWRK1;
00101e  70f4              STRB     r4,[r6,#3]
;;;1255   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001020  210a              MOVS     r1,#0xa
001022  f44f70ca          MOV      r0,#0x194
001026  f7fffffe          BL       lc640_write
;;;1256   		volt_region=1;
00102a  f04f0001          MOV      r0,#1
00102e  f886002a          STRB     r0,[r6,#0x2a]
;;;1257   		cntrl_stat=0;
001032  85b7              STRH     r7,[r6,#0x2c]
;;;1258   		cntrl_stat_new=0;
001034  f8a67042          STRH     r7,[r6,#0x42]
;;;1259   		cntrl_stat_old=0;
001038  85f7              STRH     r7,[r6,#0x2e]
                  |L1.4154|
;;;1260   		}
;;;1261   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00103a  2314              MOVS     r3,#0x14
00103c  2200              MOVS     r2,#0
00103e  2164              MOVS     r1,#0x64
001040  20d2              MOVS     r0,#0xd2
001042  f7fffffe          BL       mess_send
                  |L1.4166|
;;;1262   	}
;;;1263   
;;;1264   if(vz2_stat==vz2sWRK1)
001046  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
;;;1265   	{
;;;1266   
;;;1267   	if(vz2_stat_old!=vz2_stat)
;;;1268   		{
;;;1269   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001048  f8df9268          LDR      r9,|L1.4788|
;;;1270   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1271   		vz2_up_cnt=0L;
;;;1272   
;;;1273   		}
;;;1274   	vz2_wrk_cnt--;
;;;1275   	vz2_up_cnt++;
;;;1276   
;;;1277   	if(vz2_wrk_cnt==0)
;;;1278   		{
;;;1279   		vz2_stat=vz2sWRK2;
;;;1280   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1281   		}
;;;1282   	if(sk_stat[0]==0)
;;;1283   		{
;;;1284   		vz2_stat=vz2sERR2;
;;;1285   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1286   		}
;;;1287   	if(sk_stat[1]==0)
;;;1288   		{
;;;1289   		vz2_stat=vz2sERR3;
;;;1290   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1291   		}
;;;1292   	//if(abs(out_U-FZ_U1)<10)
;;;1293   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1294   		{
;;;1295   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1296   			{
;;;1297   			if(vz2_stat_ph2_cnt)
;;;1298   				{
;;;1299   				vz2_stat_ph2_cnt--;
;;;1300   				if(vz2_stat_ph2_cnt==0)
;;;1301   					{
;;;1302   					vz2_stat=vz2sWRK2;
;;;1303   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1304   					}
;;;1305   				}
;;;1306   			}
;;;1307   		else
;;;1308   			{
;;;1309   			vz2_stat_ph2_cnt=60;
;;;1310   			}
;;;1311   		}
;;;1312   	else
;;;1313   		{
;;;1314   		vz2_stat_ph2_cnt=60;
;;;1315   		}
;;;1316   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1317   		{
;;;1318   		volt_region=0;
;;;1319   		cntrl_stat=1000;
00104c  f44f7b7a          MOV      r11,#0x3e8
001050  f1090980          ADD      r9,r9,#0x80           ;1269
001054  f04f0a0b          MOV      r10,#0xb              ;1279
001058  280a              CMP      r0,#0xa               ;1264
00105a  d17d              BNE      |L1.4440|
00105c  7930              LDRB     r0,[r6,#4]            ;1267  ; vz2_stat_old
00105e  280a              CMP      r0,#0xa               ;1267
001060  d00a              BEQ      |L1.4216|
001062  4897              LDR      r0,|L1.4800|
001064  f44f6161          MOV      r1,#0xe10             ;1269
001068  f9b00000          LDRSH    r0,[r0,#0]            ;1269  ; FZ_T1
00106c  fb00f001          MUL      r0,r0,r1              ;1269
001070  f8c90040          STR      r0,[r9,#0x40]         ;1269  ; vz2_wrk_cnt
001074  f8c97044          STR      r7,[r9,#0x44]         ;1271  ; vz2_up_cnt
                  |L1.4216|
001078  f8d90040          LDR      r0,[r9,#0x40]         ;1274  ; vz2_wrk_cnt
00107c  f1a00001          SUB      r0,r0,#1              ;1274
001080  f8c90040          STR      r0,[r9,#0x40]         ;1274  ; vz2_wrk_cnt
001084  f8d91044          LDR      r1,[r9,#0x44]         ;1275  ; vz2_up_cnt
001088  f1010101          ADD      r1,r1,#1              ;1275
00108c  f8c91044          STR      r1,[r9,#0x44]         ;1275  ; vz2_up_cnt
001090  b930              CBNZ     r0,|L1.4256|
001092  f886a003          STRB     r10,[r6,#3]           ;1279
001096  210b              MOVS     r1,#0xb               ;1280
001098  f44f70ca          MOV      r0,#0x194             ;1280
00109c  f7fffffe          BL       lc640_write
                  |L1.4256|
0010a0  7828              LDRB     r0,[r5,#0]            ;1282  ; sk_stat
0010a2  b938              CBNZ     r0,|L1.4276|
0010a4  f04f000d          MOV      r0,#0xd               ;1284
0010a8  70f0              STRB     r0,[r6,#3]            ;1284
0010aa  4601              MOV      r1,r0                 ;1285
0010ac  f44f70ca          MOV      r0,#0x194             ;1285
0010b0  f7fffffe          BL       lc640_write
                  |L1.4276|
0010b4  7868              LDRB     r0,[r5,#1]            ;1287  ; sk_stat
0010b6  b938              CBNZ     r0,|L1.4296|
0010b8  f04f000e          MOV      r0,#0xe               ;1289
0010bc  70f0              STRB     r0,[r6,#3]            ;1289
0010be  4601              MOV      r1,r0                 ;1290
0010c0  f44f70ca          MOV      r0,#0x194             ;1290
0010c4  f7fffffe          BL       lc640_write
                  |L1.4296|
0010c8  487e              LDR      r0,|L1.4804|
0010ca  223c              MOVS     r2,#0x3c              ;1309
0010cc  f9b01000          LDRSH    r1,[r0,#0]            ;1293  ; out_U
0010d0  487d              LDR      r0,|L1.4808|
0010d2  f9b00000          LDRSH    r0,[r0,#0]            ;1293  ; FZ_U1
0010d6  f100031e          ADD      r3,r0,#0x1e           ;1293
0010da  4299              CMP      r1,r3                 ;1293
0010dc  da20              BGE      |L1.4384|
0010de  380a              SUBS     r0,r0,#0xa            ;1293
0010e0  4281              CMP      r1,r0                 ;1293
0010e2  dd1d              BLE      |L1.4384|
0010e4  4879              LDR      r0,|L1.4812|
0010e6  497a              LDR      r1,|L1.4816|
0010e8  f9b00000          LDRSH    r0,[r0,#0]            ;1295  ; Ib_ips_termokompensat
0010ec  f9b11000          LDRSH    r1,[r1,#0]            ;1295  ; FZ_ISW12
0010f0  fb90f0f4          SDIV     r0,r0,r4              ;1295
0010f4  4288              CMP      r0,r1                 ;1295
0010f6  da10              BGE      |L1.4378|
0010f8  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1297  ; vz2_stat_ph2_cnt
0010fc  b190              CBZ      r0,|L1.4388|
0010fe  f1a00001          SUB      r0,r0,#1              ;1299
001102  b200              SXTH     r0,r0                 ;1299
001104  f8a6007a          STRH     r0,[r6,#0x7a]         ;1299
001108  b960              CBNZ     r0,|L1.4388|
00110a  f886a003          STRB     r10,[r6,#3]           ;1302
00110e  210b              MOVS     r1,#0xb               ;1303
001110  f44f70ca          MOV      r0,#0x194             ;1303
001114  f7fffffe          BL       lc640_write
001118  e004              B        |L1.4388|
                  |L1.4378|
00111a  f8a6207a          STRH     r2,[r6,#0x7a]         ;1309
00111e  e001              B        |L1.4388|
                  |L1.4384|
001120  f8a6207a          STRH     r2,[r6,#0x7a]         ;1314
                  |L1.4388|
001124  f9b60044          LDRSH    r0,[r6,#0x44]         ;1316  ; Ibmax
001128  f8b61046          LDRH     r1,[r6,#0x46]         ;1316  ; IZMAX_
00112c  fb90f0f4          SDIV     r0,r0,r4              ;1316
001130  4288              CMP      r0,r1                 ;1316
001132  dd18              BLE      |L1.4454|
001134  f9b6202c          LDRSH    r2,[r6,#0x2c]         ;1316  ; cntrl_stat
001138  2a14              CMP      r2,#0x14              ;1316
00113a  dc14              BGT      |L1.4454|
00113c  f896202a          LDRB     r2,[r6,#0x2a]         ;1316  ; volt_region
001140  2a01              CMP      r2,#1                 ;1316
001142  d110              BNE      |L1.4454|
001144  f8b62076          LDRH     r2,[r6,#0x76]         ;1316  ; volt_region_cnt
001148  b96a              CBNZ     r2,|L1.4454|
00114a  f886702a          STRB     r7,[r6,#0x2a]         ;1318
00114e  f8a6b02c          STRH     r11,[r6,#0x2c]
;;;1320   		cntrl_stat_new=1000;
001152  f8a6b042          STRH     r11,[r6,#0x42]
;;;1321   		cntrl_stat_old=1000;
001156  e000              B        |L1.4442|
                  |L1.4440|
001158  e02e              B        |L1.4536|
                  |L1.4442|
00115a  f8a6b02e          STRH     r11,[r6,#0x2e]
;;;1322   		volt_region_cnt=110;
00115e  f04f026e          MOV      r2,#0x6e
001162  f8a62076          STRH     r2,[r6,#0x76]
                  |L1.4454|
;;;1323   		}
;;;1324   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001166  4288              CMP      r0,r1
001168  da13              BGE      |L1.4498|
00116a  f9b6002c          LDRSH    r0,[r6,#0x2c]  ; cntrl_stat
00116e  4558              CMP      r0,r11
001170  db0f              BLT      |L1.4498|
001172  f896002a          LDRB     r0,[r6,#0x2a]  ; volt_region
001176  b960              CBNZ     r0,|L1.4498|
001178  f8b60076          LDRH     r0,[r6,#0x76]  ; volt_region_cnt
00117c  b948              CBNZ     r0,|L1.4498|
;;;1325   		{
;;;1326   		volt_region=1;
00117e  f04f0001          MOV      r0,#1
001182  f886002a          STRB     r0,[r6,#0x2a]
;;;1327   		cntrl_stat=10;
001186  85b4              STRH     r4,[r6,#0x2c]
;;;1328   		cntrl_stat_new=10;
001188  f8a64042          STRH     r4,[r6,#0x42]
;;;1329   		cntrl_stat_old=10;
00118c  85f4              STRH     r4,[r6,#0x2e]
;;;1330   		volt_region_cnt=10;
00118e  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4498|
;;;1331   		}
;;;1332   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001192  f896002a          LDRB     r0,[r6,#0x2a]  ; volt_region
001196  b110              CBZ      r0,|L1.4510|
;;;1333   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001198  2801              CMP      r0,#1
00119a  d007              BEQ      |L1.4524|
00119c  e00c              B        |L1.4536|
                  |L1.4510|
00119e  2314              MOVS     r3,#0x14              ;1332
0011a0  2200              MOVS     r2,#0                 ;1332
0011a2  2164              MOVS     r1,#0x64              ;1332
0011a4  20d2              MOVS     r0,#0xd2              ;1332
0011a6  f7fffffe          BL       mess_send
0011aa  e005              B        |L1.4536|
                  |L1.4524|
0011ac  2314              MOVS     r3,#0x14
0011ae  2201              MOVS     r2,#1
0011b0  2164              MOVS     r1,#0x64
0011b2  20d2              MOVS     r0,#0xd2
0011b4  f7fffffe          BL       mess_send
                  |L1.4536|
;;;1334   	}
;;;1335   
;;;1336   if(vz2_stat==vz2sWRK2)
0011b8  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
0011ba  280b              CMP      r0,#0xb
0011bc  d171              BNE      |L1.4770|
;;;1337   	{
;;;1338   	if(vz2_stat_old!=vz2_stat)
0011be  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0011c0  280b              CMP      r0,#0xb
0011c2  d008              BEQ      |L1.4566|
;;;1339   		{
;;;1340   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
0011c4  4843              LDR      r0,|L1.4820|
0011c6  f44f6161          MOV      r1,#0xe10
0011ca  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
0011ce  fb00f001          MUL      r0,r0,r1
0011d2  f8c90040          STR      r0,[r9,#0x40]  ; vz2_wrk_cnt
                  |L1.4566|
;;;1341   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1342   		//vz2_up_cnt=0L;
;;;1343   		}
;;;1344   	vz2_wrk_cnt--;
0011d6  f8d90040          LDR      r0,[r9,#0x40]  ; vz2_wrk_cnt
0011da  f1a00001          SUB      r0,r0,#1
0011de  f8c90040          STR      r0,[r9,#0x40]  ; vz2_wrk_cnt
;;;1345   	vz2_up_cnt++;
0011e2  f8d91044          LDR      r1,[r9,#0x44]  ; vz2_up_cnt
0011e6  f1010101          ADD      r1,r1,#1
0011ea  f8c91044          STR      r1,[r9,#0x44]  ; vz2_up_cnt
;;;1346   
;;;1347   	if(vz2_wrk_cnt==0)
0011ee  b950              CBNZ     r0,|L1.4614|
;;;1348   		{
;;;1349   		vz2_stat=vz2sFINE;
0011f0  f04f0012          MOV      r0,#0x12
0011f4  70f0              STRB     r0,[r6,#3]
;;;1350   		lc640_write(EE_VZ2_STAT,vz2sFINE);
0011f6  4601              MOV      r1,r0
0011f8  f44f70ca          MOV      r0,#0x194
0011fc  f7fffffe          BL       lc640_write
;;;1351   		fz_mem_hndl(0);
001200  2000              MOVS     r0,#0
001202  f7fffffe          BL       fz_mem_hndl
                  |L1.4614|
;;;1352   		}
;;;1353   	if(sk_stat[0]==0)
001206  7828              LDRB     r0,[r5,#0]  ; sk_stat
001208  b938              CBNZ     r0,|L1.4634|
;;;1354   		{
;;;1355   		vz2_stat=vz2sERR5;
00120a  f04f0010          MOV      r0,#0x10
00120e  70f0              STRB     r0,[r6,#3]
;;;1356   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001210  4601              MOV      r1,r0
001212  f44f70ca          MOV      r0,#0x194
001216  f7fffffe          BL       lc640_write
                  |L1.4634|
;;;1357   		}
;;;1358   	if(sk_stat[1]==0)
00121a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00121c  b938              CBNZ     r0,|L1.4654|
;;;1359   		{
;;;1360   		vz2_stat=vz2sERR6;
00121e  f04f0011          MOV      r0,#0x11
001222  70f0              STRB     r0,[r6,#3]
;;;1361   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001224  4601              MOV      r1,r0
001226  f44f70ca          MOV      r0,#0x194
00122a  f7fffffe          BL       lc640_write
                  |L1.4654|
;;;1362   		}
;;;1363   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
00122e  f9b60044          LDRSH    r0,[r6,#0x44]  ; Ibmax
001232  f8b61046          LDRH     r1,[r6,#0x46]  ; IZMAX_
001236  fb90f0f4          SDIV     r0,r0,r4
00123a  4288              CMP      r0,r1
00123c  dd16              BLE      |L1.4716|
00123e  f9b6202c          LDRSH    r2,[r6,#0x2c]  ; cntrl_stat
001242  2a14              CMP      r2,#0x14
001244  dc12              BGT      |L1.4716|
001246  f896202a          LDRB     r2,[r6,#0x2a]  ; volt_region
00124a  2a01              CMP      r2,#1
00124c  d10e              BNE      |L1.4716|
00124e  f8b62076          LDRH     r2,[r6,#0x76]  ; volt_region_cnt
001252  b95a              CBNZ     r2,|L1.4716|
;;;1364   		{
;;;1365   		volt_region=0;
001254  f886702a          STRB     r7,[r6,#0x2a]
;;;1366   		cntrl_stat=1000;
001258  f8a6b02c          STRH     r11,[r6,#0x2c]
;;;1367   		cntrl_stat_new=1000;
00125c  f8a6b042          STRH     r11,[r6,#0x42]
;;;1368   		cntrl_stat_old=1000;
001260  f8a6b02e          STRH     r11,[r6,#0x2e]
;;;1369   		volt_region_cnt=110;
001264  f04f026e          MOV      r2,#0x6e
001268  f8a62076          STRH     r2,[r6,#0x76]
                  |L1.4716|
;;;1370   		}
;;;1371   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00126c  4288              CMP      r0,r1
00126e  da13              BGE      |L1.4760|
001270  f9b6002c          LDRSH    r0,[r6,#0x2c]  ; cntrl_stat
001274  4558              CMP      r0,r11
001276  db0f              BLT      |L1.4760|
001278  f896002a          LDRB     r0,[r6,#0x2a]  ; volt_region
00127c  b960              CBNZ     r0,|L1.4760|
00127e  f8b60076          LDRH     r0,[r6,#0x76]  ; volt_region_cnt
001282  b948              CBNZ     r0,|L1.4760|
;;;1372   		{
;;;1373   		volt_region=1;
001284  f04f0001          MOV      r0,#1
001288  f886002a          STRB     r0,[r6,#0x2a]
;;;1374   		cntrl_stat=10;
00128c  85b4              STRH     r4,[r6,#0x2c]
;;;1375   		cntrl_stat_new=10;
00128e  f8a64042          STRH     r4,[r6,#0x42]
;;;1376   		cntrl_stat_old=10;
001292  85f4              STRH     r4,[r6,#0x2e]
;;;1377   		volt_region_cnt=10;
001294  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4760|
;;;1378   		}
;;;1379   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001298  f896002a          LDRB     r0,[r6,#0x2a]  ; volt_region
00129c  b110              CBZ      r0,|L1.4772|
;;;1380   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
00129e  2801              CMP      r0,#1
0012a0  d01a              BEQ      |L1.4824|
                  |L1.4770|
0012a2  e01f              B        |L1.4836|
                  |L1.4772|
0012a4  2314              MOVS     r3,#0x14              ;1379
0012a6  2200              MOVS     r2,#0                 ;1379
0012a8  2164              MOVS     r1,#0x64              ;1379
0012aa  20d2              MOVS     r0,#0xd2              ;1379
0012ac  f7fffffe          BL       mess_send
0012b0  e018              B        |L1.4836|
0012b2  0000              DCW      0x0000
                  |L1.4788|
                          DCD      ||area_number.25||
                  |L1.4792|
                          DCD      speedChrgBlckStat
                  |L1.4796|
                          DCD      sk_stat
                  |L1.4800|
                          DCD      FZ_T1
                  |L1.4804|
                          DCD      out_U
                  |L1.4808|
                          DCD      FZ_U1
                  |L1.4812|
                          DCD      Ib_ips_termokompensat
                  |L1.4816|
                          DCD      FZ_ISW12
                  |L1.4820|
                          DCD      FZ_T2
                  |L1.4824|
0012d8  2314              MOVS     r3,#0x14
0012da  2201              MOVS     r2,#1
0012dc  2164              MOVS     r1,#0x64
0012de  20d2              MOVS     r0,#0xd2
0012e0  f7fffffe          BL       mess_send
                  |L1.4836|
;;;1381   	}
;;;1382   
;;;1383   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
0012e4  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
0012e6  280c              CMP      r0,#0xc
0012e8  d123              BNE      |L1.4914|
;;;1384   	{
;;;1385   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0012ea  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0012ec  280c              CMP      r0,#0xc
0012ee  d102              BNE      |L1.4854|
0012f0  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0012f4  b908              CBNZ     r0,|L1.4858|
                  |L1.4854|
;;;1386   		{
;;;1387   		vz2_stat_cnt=10;
0012f6  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.4858|
;;;1388   		}
;;;1389   	vz2_stat_cnt--;
0012fa  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0012fe  f1a00001          SUB      r0,r0,#1
001302  b200              SXTH     r0,r0
001304  f8a60078          STRH     r0,[r6,#0x78]
;;;1390   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001308  280a              CMP      r0,#0xa
00130a  d001              BEQ      |L1.4880|
00130c  2809              CMP      r0,#9
00130e  d10a              BNE      |L1.4902|
                  |L1.4880|
;;;1391   		{
;;;1392   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001310  f2af53bc          ADR      r3,|L1.3416|
001314  f2af52a8          ADR      r2,|L1.3440|
001318  f2af5194          ADR      r1,|L1.3464|
00131c  a0ff              ADR      r0,|L1.5916|
00131e  f8cd8000          STR      r8,[sp,#0]
001322  f7fffffe          BL       show_mess
                  |L1.4902|
;;;1393   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1394   					"      ВКЛЮЧЕН       ",
;;;1395   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1396   					5000);
;;;1397   		}
;;;1398   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001326  2314              MOVS     r3,#0x14
001328  2200              MOVS     r2,#0
00132a  2164              MOVS     r1,#0x64
00132c  20d2              MOVS     r0,#0xd2
00132e  f7fffffe          BL       mess_send
                  |L1.4914|
;;;1399   	}
;;;1400   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
001332  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
001334  280d              CMP      r0,#0xd
001336  d12c              BNE      |L1.5010|
;;;1401   	{
;;;1402   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001338  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
00133a  280d              CMP      r0,#0xd
00133c  d102              BNE      |L1.4932|
00133e  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001342  b908              CBNZ     r0,|L1.4936|
                  |L1.4932|
;;;1403   		{
;;;1404   		vz2_stat_cnt=10;
001344  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.4936|
;;;1405   		}
;;;1406   	vz2_stat_cnt--;
001348  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00134c  f1a00001          SUB      r0,r0,#1
001350  b200              SXTH     r0,r0
001352  f8a60078          STRH     r0,[r6,#0x78]
;;;1407   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001356  280a              CMP      r0,#0xa
001358  d001              BEQ      |L1.4958|
00135a  2809              CMP      r0,#9
00135c  d10a              BNE      |L1.4980|
                  |L1.4958|
;;;1408   		{
;;;1409   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00135e  f6af2378          ADR      r3,|L1.2280|
001362  f6af2264          ADR      r2,|L1.2304|
001366  f6af2150          ADR      r1,|L1.2328|
00136a  a0ec              ADR      r0,|L1.5916|
00136c  f8cd8000          STR      r8,[sp,#0]
001370  f7fffffe          BL       show_mess
                  |L1.4980|
;;;1410   					"    ЗАБЛОКИРОВАН    ",
;;;1411   					"     НЕИСПРАВНА     ",
;;;1412   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1413   					5000);
;;;1414   		}
;;;1415   	if(sk_stat[0]==1)
001374  7828              LDRB     r0,[r5,#0]  ; sk_stat
001376  2801              CMP      r0,#1
001378  d105              BNE      |L1.4998|
;;;1416   		{
;;;1417   		vz2_stat=vz2sWRK1;
00137a  70f4              STRB     r4,[r6,#3]
;;;1418   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
00137c  210a              MOVS     r1,#0xa
00137e  f44f70ca          MOV      r0,#0x194
001382  f7fffffe          BL       lc640_write
                  |L1.4998|
;;;1419   		}
;;;1420   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001386  2314              MOVS     r3,#0x14
001388  2200              MOVS     r2,#0
00138a  2164              MOVS     r1,#0x64
00138c  20d2              MOVS     r0,#0xd2
00138e  f7fffffe          BL       mess_send
                  |L1.5010|
;;;1421   	}
;;;1422   
;;;1423   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
001392  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
001394  280e              CMP      r0,#0xe
001396  d12b              BNE      |L1.5104|
;;;1424   	{
;;;1425   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001398  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
00139a  280e              CMP      r0,#0xe
00139c  d102              BNE      |L1.5028|
00139e  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0013a2  b908              CBNZ     r0,|L1.5032|
                  |L1.5028|
;;;1426   		{
;;;1427   		vz2_stat_cnt=10;
0013a4  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5032|
;;;1428   		}
;;;1429   	vz2_stat_cnt--;
0013a8  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0013ac  f1a00001          SUB      r0,r0,#1
0013b0  b200              SXTH     r0,r0
0013b2  f8a60078          STRH     r0,[r6,#0x78]
;;;1430   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0013b6  280a              CMP      r0,#0xa
0013b8  d001              BEQ      |L1.5054|
0013ba  2809              CMP      r0,#9
0013bc  d109              BNE      |L1.5074|
                  |L1.5054|
;;;1431   		{
;;;1432   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0013be  a3dd              ADR      r3,|L1.5940|
0013c0  f2af52f4          ADR      r2,|L1.3536|
0013c4  f2af51e0          ADR      r1,|L1.3560|
0013c8  a0d4              ADR      r0,|L1.5916|
0013ca  f8cd8000          STR      r8,[sp,#0]
0013ce  f7fffffe          BL       show_mess
                  |L1.5074|
;;;1433   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1434   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1435   					"    ТУМБЛЕРА!!!     ",
;;;1436   					5000);
;;;1437   		}
;;;1438   	if(sk_stat[1]==1)
0013d2  7868              LDRB     r0,[r5,#1]  ; sk_stat
0013d4  2801              CMP      r0,#1
0013d6  d105              BNE      |L1.5092|
;;;1439   		{
;;;1440   		vz2_stat=vz2sWRK1;
0013d8  70f4              STRB     r4,[r6,#3]
;;;1441   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0013da  210a              MOVS     r1,#0xa
0013dc  f44f70ca          MOV      r0,#0x194
0013e0  f7fffffe          BL       lc640_write
                  |L1.5092|
;;;1442   		}
;;;1443   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013e4  2314              MOVS     r3,#0x14
0013e6  2200              MOVS     r2,#0
0013e8  2164              MOVS     r1,#0x64
0013ea  20d2              MOVS     r0,#0xd2
0013ec  f7fffffe          BL       mess_send
                  |L1.5104|
;;;1444   	}
;;;1445   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
0013f0  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
0013f2  2810              CMP      r0,#0x10
0013f4  d12d              BNE      |L1.5202|
;;;1446   	{
;;;1447   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0013f6  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0013f8  2810              CMP      r0,#0x10
0013fa  d102              BNE      |L1.5122|
0013fc  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001400  b908              CBNZ     r0,|L1.5126|
                  |L1.5122|
;;;1448   		{
;;;1449   		vz2_stat_cnt=10;
001402  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5126|
;;;1450   		}
;;;1451   	vz2_stat_cnt--;
001406  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00140a  f1a00001          SUB      r0,r0,#1
00140e  b200              SXTH     r0,r0
001410  f8a60078          STRH     r0,[r6,#0x78]
;;;1452   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001414  280a              CMP      r0,#0xa
001416  d001              BEQ      |L1.5148|
001418  2809              CMP      r0,#9
00141a  d10a              BNE      |L1.5170|
                  |L1.5148|
;;;1453   		{
;;;1454   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00141c  f6af3338          ADR      r3,|L1.2280|
001420  f6af3224          ADR      r2,|L1.2304|
001424  f6af3110          ADR      r1,|L1.2328|
001428  a0bc              ADR      r0,|L1.5916|
00142a  f8cd8000          STR      r8,[sp,#0]
00142e  f7fffffe          BL       show_mess
                  |L1.5170|
;;;1455   					"    ЗАБЛОКИРОВАН    ",
;;;1456   					"     НЕИСПРАВНА     ",
;;;1457   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1458   					5000);
;;;1459   		}
;;;1460   	if(sk_stat[0]==1)
001432  7828              LDRB     r0,[r5,#0]  ; sk_stat
001434  2801              CMP      r0,#1
001436  d106              BNE      |L1.5190|
;;;1461   		{
;;;1462   		vz2_stat=vz2sWRK2;
001438  f886a003          STRB     r10,[r6,#3]
;;;1463   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00143c  210b              MOVS     r1,#0xb
00143e  f44f70ca          MOV      r0,#0x194
001442  f7fffffe          BL       lc640_write
                  |L1.5190|
;;;1464   		}
;;;1465   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001446  2314              MOVS     r3,#0x14
001448  2200              MOVS     r2,#0
00144a  2164              MOVS     r1,#0x64
00144c  20d2              MOVS     r0,#0xd2
00144e  f7fffffe          BL       mess_send
                  |L1.5202|
;;;1466   	}
;;;1467   
;;;1468   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
001452  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
001454  2811              CMP      r0,#0x11
001456  d12c              BNE      |L1.5298|
;;;1469   	{
;;;1470   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001458  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
00145a  2811              CMP      r0,#0x11
00145c  d102              BNE      |L1.5220|
00145e  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001462  b908              CBNZ     r0,|L1.5224|
                  |L1.5220|
;;;1471   		{
;;;1472   		vz2_stat_cnt=10;
001464  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5224|
;;;1473   		}
;;;1474   	vz2_stat_cnt--;
001468  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00146c  f1a00001          SUB      r0,r0,#1
001470  b200              SXTH     r0,r0
001472  f8a60078          STRH     r0,[r6,#0x78]
;;;1475   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001476  280a              CMP      r0,#0xa
001478  d001              BEQ      |L1.5246|
00147a  2809              CMP      r0,#9
00147c  d109              BNE      |L1.5266|
                  |L1.5246|
;;;1476   		{
;;;1477   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00147e  a3ad              ADR      r3,|L1.5940|
001480  f2af62b4          ADR      r2,|L1.3536|
001484  f2af61a0          ADR      r1,|L1.3560|
001488  a0a4              ADR      r0,|L1.5916|
00148a  f8cd8000          STR      r8,[sp,#0]
00148e  f7fffffe          BL       show_mess
                  |L1.5266|
;;;1478   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1479   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1480   					"    ТУМБЛЕРА!!!     ",
;;;1481   					5000);
;;;1482   		}
;;;1483   	if(sk_stat[1]==1)
001492  7868              LDRB     r0,[r5,#1]  ; sk_stat
001494  2801              CMP      r0,#1
001496  d106              BNE      |L1.5286|
;;;1484   		{
;;;1485   		vz2_stat=vz2sWRK2;
001498  f886a003          STRB     r10,[r6,#3]
;;;1486   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00149c  210b              MOVS     r1,#0xb
00149e  f44f70ca          MOV      r0,#0x194
0014a2  f7fffffe          BL       lc640_write
                  |L1.5286|
;;;1487   		}
;;;1488   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014a6  2314              MOVS     r3,#0x14
0014a8  2200              MOVS     r2,#0
0014aa  2164              MOVS     r1,#0x64
0014ac  20d2              MOVS     r0,#0xd2
0014ae  f7fffffe          BL       mess_send
                  |L1.5298|
;;;1489   	}
;;;1490   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0014b2  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
0014b4  280f              CMP      r0,#0xf
0014b6  d12e              BNE      |L1.5398|
;;;1491   	{
;;;1492   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0014b8  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0014ba  280f              CMP      r0,#0xf
0014bc  d102              BNE      |L1.5316|
0014be  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0014c2  b908              CBNZ     r0,|L1.5320|
                  |L1.5316|
;;;1493   		{
;;;1494   		vz2_stat_cnt=10;
0014c4  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5320|
;;;1495   		}
;;;1496   	vz2_stat_cnt--;
0014c8  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0014cc  f1a00001          SUB      r0,r0,#1
0014d0  b200              SXTH     r0,r0
0014d2  f8a60078          STRH     r0,[r6,#0x78]
;;;1497   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0014d6  280a              CMP      r0,#0xa
0014d8  d001              BEQ      |L1.5342|
0014da  2809              CMP      r0,#9
0014dc  d10b              BNE      |L1.5366|
                  |L1.5342|
;;;1498   		{
;;;1499   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0014de  f2af73f0          ADR      r3,|L1.3312|
0014e2  f2af72dc          ADR      r2,|L1.3336|
0014e6  f2af71c8          ADR      r1,|L1.3360|
0014ea  f2af6074          ADR      r0,|L1.3704|
0014ee  f8cd8000          STR      r8,[sp,#0]
0014f2  f7fffffe          BL       show_mess
                  |L1.5366|
;;;1500   					"      ТУМБЛЕР       ",
;;;1501   					"     ВЫСОКОГО       ",
;;;1502   					"    НАПРЯЖЕНИЯ      ",
;;;1503   					5000);
;;;1504   		}
;;;1505   	if(sk_stat[1]==0)
0014f6  7868              LDRB     r0,[r5,#1]  ; sk_stat
0014f8  b938              CBNZ     r0,|L1.5386|
;;;1506   		{
;;;1507   		vz2_stat=vz2sOFF;
0014fa  70f7              STRB     r7,[r6,#3]
;;;1508   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0014fc  2100              MOVS     r1,#0
0014fe  f44f70ca          MOV      r0,#0x194
001502  f7fffffe          BL       lc640_write
;;;1509   		vz_stop();
001506  f7fffffe          BL       vz_stop
                  |L1.5386|
;;;1510   
;;;1511   		}
;;;1512   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00150a  2314              MOVS     r3,#0x14
00150c  2200              MOVS     r2,#0
00150e  2164              MOVS     r1,#0x64
001510  20d2              MOVS     r0,#0xd2
001512  f7fffffe          BL       mess_send
                  |L1.5398|
;;;1513   	}
;;;1514   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
001516  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
;;;1515   	{
;;;1516   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1517   		{
;;;1518   		vz2_stat_cnt=10;
;;;1519   		}
;;;1520   	vz2_stat_cnt--;
;;;1521   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1522   		{
;;;1523   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
001518  f64038b8          MOV      r8,#0xbb8
00151c  2812              CMP      r0,#0x12              ;1514
00151e  d13d              BNE      |L1.5532|
001520  7930              LDRB     r0,[r6,#4]            ;1516  ; vz2_stat_old
001522  2812              CMP      r0,#0x12              ;1516
001524  d102              BNE      |L1.5420|
001526  f8b60078          LDRH     r0,[r6,#0x78]         ;1516  ; vz2_stat_cnt
00152a  b908              CBNZ     r0,|L1.5424|
                  |L1.5420|
00152c  f8a64078          STRH     r4,[r6,#0x78]         ;1518
                  |L1.5424|
001530  f8b60078          LDRH     r0,[r6,#0x78]         ;1520  ; vz2_stat_cnt
001534  f1a00001          SUB      r0,r0,#1              ;1520
001538  b200              SXTH     r0,r0                 ;1520
00153a  f8a60078          STRH     r0,[r6,#0x78]         ;1520
00153e  280a              CMP      r0,#0xa               ;1521
001540  d001              BEQ      |L1.5446|
001542  2809              CMP      r0,#9                 ;1521
001544  d10a              BNE      |L1.5468|
                  |L1.5446|
001546  f2af7330          ADR      r3,|L1.3608|
00154a  f2af721c          ADR      r2,|L1.3632|
00154e  f2af7108          ADR      r1,|L1.3656|
001552  a07e              ADR      r0,|L1.5964|
001554  f8cd8000          STR      r8,[sp,#0]
001558  f7fffffe          BL       show_mess
                  |L1.5468|
;;;1524   					"       ЗАРЯД        ",
;;;1525   					"      УСПЕШНО       ",
;;;1526   					"     ЗАВЕРШЕН       ",
;;;1527   					3000);
;;;1528   		}
;;;1529   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
00155c  f9b60078          LDRSH    r0,[r6,#0x78]  ; vz2_stat_cnt
001560  2806              CMP      r0,#6
001562  d001              BEQ      |L1.5480|
001564  2805              CMP      r0,#5
001566  d10b              BNE      |L1.5504|
                  |L1.5480|
;;;1530   		{
;;;1531   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001568  f6af037c          ADR      r3,|L1.3312|
00156c  f6af0268          ADR      r2,|L1.3336|
001570  f6af0154          ADR      r1,|L1.3360|
001574  f2af7000          ADR      r0,|L1.3704|
001578  f8cd8000          STR      r8,[sp,#0]
00157c  f7fffffe          BL       show_mess
                  |L1.5504|
;;;1532   					"      ТУМБЛЕР       ",
;;;1533   					"     ВЫСОКОГО       ",
;;;1534   					"    НАПРЯЖЕНИЯ      ",
;;;1535   					3000);
;;;1536   		}
;;;1537   	if(sk_stat[1]==0)
001580  7868              LDRB     r0,[r5,#1]  ; sk_stat
001582  b928              CBNZ     r0,|L1.5520|
;;;1538   		{
;;;1539   		vz2_stat=vz2sOFF;
001584  70f7              STRB     r7,[r6,#3]
;;;1540   		lc640_write(EE_VZ2_STAT,vz2sOFF);
001586  2100              MOVS     r1,#0
001588  f44f70ca          MOV      r0,#0x194
00158c  f7fffffe          BL       lc640_write
                  |L1.5520|
;;;1541   		}
;;;1542   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001590  2314              MOVS     r3,#0x14
001592  2200              MOVS     r2,#0
001594  2164              MOVS     r1,#0x64
001596  20d2              MOVS     r0,#0xd2
001598  f7fffffe          BL       mess_send
                  |L1.5532|
;;;1543   	}
;;;1544   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
00159c  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
00159e  2813              CMP      r0,#0x13
0015a0  d13d              BNE      |L1.5662|
;;;1545   	{
;;;1546   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0015a2  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0015a4  2813              CMP      r0,#0x13
0015a6  d102              BNE      |L1.5550|
0015a8  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0015ac  b908              CBNZ     r0,|L1.5554|
                  |L1.5550|
;;;1547   		{
;;;1548   		vz2_stat_cnt=10;
0015ae  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5554|
;;;1549   		}
;;;1550   	vz2_stat_cnt--;
0015b2  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0015b6  f1a00001          SUB      r0,r0,#1
0015ba  b200              SXTH     r0,r0
0015bc  f8a60078          STRH     r0,[r6,#0x78]
;;;1551   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0015c0  280a              CMP      r0,#0xa
0015c2  d001              BEQ      |L1.5576|
0015c4  2809              CMP      r0,#9
0015c6  d10a              BNE      |L1.5598|
                  |L1.5576|
;;;1552   		{
;;;1553   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0015c8  f2af733c          ADR      r3,|L1.3728|
0015cc  f2af7228          ADR      r2,|L1.3752|
0015d0  f2af718c          ADR      r1,|L1.3656|
0015d4  a05d              ADR      r0,|L1.5964|
0015d6  f8cd8000          STR      r8,[sp,#0]
0015da  f7fffffe          BL       show_mess
                  |L1.5598|
;;;1554   					"       ЗАРЯД        ",
;;;1555   					"     ПРЕКРАЩЕН      ",
;;;1556   					"                    ",
;;;1557   					3000);
;;;1558   		}
;;;1559   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0015de  f9b60078          LDRSH    r0,[r6,#0x78]  ; vz2_stat_cnt
0015e2  2806              CMP      r0,#6
0015e4  d001              BEQ      |L1.5610|
0015e6  2805              CMP      r0,#5
0015e8  d10b              BNE      |L1.5634|
                  |L1.5610|
;;;1560   		{
;;;1561   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0015ea  f6af03fc          ADR      r3,|L1.3312|
0015ee  f6af02e8          ADR      r2,|L1.3336|
0015f2  f6af01d4          ADR      r1,|L1.3360|
0015f6  f2af7080          ADR      r0,|L1.3704|
0015fa  f8cd8000          STR      r8,[sp,#0]
0015fe  f7fffffe          BL       show_mess
                  |L1.5634|
;;;1562   					"      ТУМБЛЕР       ",
;;;1563   					"     ВЫСОКОГО       ",
;;;1564   					"    НАПРЯЖЕНИЯ      ",
;;;1565   					3000);
;;;1566   		}
;;;1567   	if(sk_stat[1]==0)
001602  7868              LDRB     r0,[r5,#1]  ; sk_stat
001604  b928              CBNZ     r0,|L1.5650|
;;;1568   		{
;;;1569   		vz2_stat=vz2sOFF;
001606  70f7              STRB     r7,[r6,#3]
;;;1570   		lc640_write(EE_VZ2_STAT,vz2sOFF);
001608  2100              MOVS     r1,#0
00160a  f44f70ca          MOV      r0,#0x194
00160e  f7fffffe          BL       lc640_write
                  |L1.5650|
;;;1571   		}
;;;1572   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001612  2314              MOVS     r3,#0x14
001614  2200              MOVS     r2,#0
001616  2164              MOVS     r1,#0x64
001618  20d2              MOVS     r0,#0xd2
00161a  f7fffffe          BL       mess_send
                  |L1.5662|
;;;1573   	}
;;;1574   vz2_stat_old=vz2_stat;
00161e  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
001620  7130              STRB     r0,[r6,#4]
;;;1575   
;;;1576   }
001622  e8bd8ff8          POP      {r3-r11,pc}
;;;1577   
                          ENDP

                  vz2_start PROC
;;;1579   //старт уравнительног заряда
;;;1580   char vz2_start(char hour)
001626  b510              PUSH     {r4,lr}
;;;1581   {          
;;;1582   char out;
;;;1583   out=0;
001628  f04f0000          MOV      r0,#0
;;;1584   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
00162c  494d              LDR      r1,|L1.5988|
00162e  7f8a              LDRB     r2,[r1,#0x1e]  ; spc_stat
001630  2a00              CMP      r2,#0
001632  d110              BNE      |L1.5718|
001634  4a4c              LDR      r2,|L1.5992|
001636  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001638  2a01              CMP      r2,#1
00163a  d00c              BEQ      |L1.5718|
00163c  784a              LDRB     r2,[r1,#1]  ; vz1_stat
00163e  2a00              CMP      r2,#0
001640  d109              BNE      |L1.5718|
;;;1585   	{
;;;1586   	if(vz1_stat==vz1sOFF)
;;;1587   		{
;;;1588   		vz2_stat=vz2sSTEP1;
001642  f04f0001          MOV      r0,#1
001646  70c8              STRB     r0,[r1,#3]
;;;1589   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
001648  4601              MOV      r1,r0
00164a  f44f70ca          MOV      r0,#0x194
00164e  f7fffffe          BL       lc640_write
;;;1590   		out=1;
001652  f04f0001          MOV      r0,#1
                  |L1.5718|
;;;1591   		
;;;1592   		}
;;;1593   /*	spc_stat=spcVZ;
;;;1594   	__ee_spc_stat=spcVZ; 
;;;1595   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1596   	vz_cnt_h=hour;
;;;1597   	__ee_vz_cnt=hour*60;
;;;1598   	if(hour==0)__ee_vz_cnt=30;
;;;1599   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1600   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1601   	vz_cnt_h_=0;
;;;1602   	vz_cnt_s=0;
;;;1603   	vz_cnt_s_=0;
;;;1604   	
;;;1605   		*/
;;;1606   	}
;;;1607   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1608   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1609   //plazma=out;	
;;;1610   return out;
;;;1611   }
001656  bd10              POP      {r4,pc}
;;;1612   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;1613   //стоп формовочного заряда
;;;1614   void vz2_stop(void)
001658  4842              LDR      r0,|L1.5988|
;;;1615   {
;;;1616   if(vz2_stat!=vz2sOFF)
00165a  78c1              LDRB     r1,[r0,#3]  ; vz2_stat
00165c  2900              CMP      r1,#0
00165e  d006              BEQ      |L1.5742|
;;;1617   	{
;;;1618   	vz2_stat=vz2sSTOP;
001660  f04f0113          MOV      r1,#0x13
001664  70c1              STRB     r1,[r0,#3]
;;;1619   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
001666  f44f70ca          MOV      r0,#0x194
00166a  f7ffbffe          B.W      lc640_write
                  |L1.5742|
;;;1620   	}
;;;1621   }
00166e  4770              BX       lr
;;;1622   
                          ENDP

                  kb_init PROC
;;;1623   //-----------------------------------------------
;;;1624   void kb_init(void)
001670  483e              LDR      r0,|L1.5996|
;;;1625   {
;;;1626   main_kb_cnt=(TBAT*60)-60/*120*/;
001672  f06f013b          MVN      r1,#0x3b
001676  8800              LDRH     r0,[r0,#0]  ; TBAT
001678  ebc01000          RSB      r0,r0,r0,LSL #4
00167c  eb010080          ADD      r0,r1,r0,LSL #2
001680  4938              LDR      r1,|L1.5988|
001682  f8a1004c          STRH     r0,[r1,#0x4c]
;;;1627   }
001686  4770              BX       lr
;;;1628   
                          ENDP

                  kb_hndl PROC
;;;1629   //-----------------------------------------------
;;;1630   void kb_hndl(void)
001688  e92d5ff0          PUSH     {r4-r12,lr}
;;;1631   {
;;;1632   
;;;1633   static signed short ibat[2],ibat_[2];
;;;1634   #ifdef UKU_TELECORE2015
;;;1635   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0))
;;;1636   #else 
;;;1637   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
00168c  f8df80d4          LDR      r8,|L1.5988|
;;;1638   #endif
;;;1639   	{
;;;1640   	main_kb_cnt=0;
;;;1641   	
;;;1642   	kb_start[0]=0;
;;;1643   	kb_start[1]=0;
;;;1644   	kb_start_ips=0;
;;;1645   
;;;1646   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;1647   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;1648   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1649   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
001690  f8dfa0dc          LDR      r10,|L1.6000|
001694  2500              MOVS     r5,#0                 ;1637
001696  f8b8004c          LDRH     r0,[r8,#0x4c]         ;1637  ; main_kb_cnt
00169a  4e36              LDR      r6,|L1.6004|
00169c  1c40              ADDS     r0,r0,#1              ;1637
00169e  b201              SXTH     r1,r0                 ;1637
0016a0  4832              LDR      r0,|L1.5996|
0016a2  f8a8104c          STRH     r1,[r8,#0x4c]         ;1637
0016a6  f8df90d0          LDR      r9,|L1.6008|
0016aa  f9b00000          LDRSH    r0,[r0,#0]            ;1637  ; TBAT
;;;1650   #endif	
;;;1651   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;1652   	  ||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)||(sp_ch_stat!=scsOFF) 	)
;;;1653    
;;;1654   		{
;;;1655   		kb_start[0]=0;
;;;1656   		kb_start[1]=0;
;;;1657   		kb_start_ips=0;
;;;1658   		}
;;;1659   
;;;1660   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;1661   		{
;;;1662   		kb_cnt_1lev=10;
0016ae  270a              MOVS     r7,#0xa
0016b0  ebc01200          RSB      r2,r0,r0,LSL #4       ;1637
0016b4  f04f0b01          MOV      r11,#1                ;1646
0016b8  f1080452          ADD      r4,r8,#0x52           ;1642
0016bc  ebb10f82          CMP      r1,r2,LSL #2          ;1637
0016c0  db7e              BLT      |L1.6080|
0016c2  2800              CMP      r0,#0                 ;1637
0016c4  d07c              BEQ      |L1.6080|
0016c6  f8a8504c          STRH     r5,[r8,#0x4c]         ;1640
0016ca  7025              STRB     r5,[r4,#0]            ;1642
0016cc  7065              STRB     r5,[r4,#1]            ;1643
0016ce  f8885018          STRB     r5,[r8,#0x18]         ;1644
0016d2  482a              LDR      r0,|L1.6012|
0016d4  7800              LDRB     r0,[r0,#0]            ;1646  ; BAT_IS_ON
0016d6  2855              CMP      r0,#0x55              ;1646
0016d8  d111              BNE      |L1.5886|
0016da  f9b60002          LDRSH    r0,[r6,#2]            ;1646  ; bat
0016de  2850              CMP      r0,#0x50              ;1646
0016e0  dd0d              BLE      |L1.5886|
0016e2  f9b60008          LDRSH    r0,[r6,#8]            ;1646  ; bat
0016e6  f7fffffe          BL       abs
0016ea  f9b91000          LDRSH    r1,[r9,#0]            ;1646  ; IKB
0016ee  4288              CMP      r0,r1                 ;1646
0016f0  db03              BLT      |L1.5882|
0016f2  f896003d          LDRB     r0,[r6,#0x3d]         ;1646  ; bat
0016f6  07c0              LSLS     r0,r0,#31             ;1646
0016f8  d001              BEQ      |L1.5886|
                  |L1.5882|
0016fa  f884b000          STRB     r11,[r4,#0]           ;1646
                  |L1.5886|
0016fe  481f              LDR      r0,|L1.6012|
001700  7840              LDRB     r0,[r0,#1]            ;1647  ; BAT_IS_ON
001702  2855              CMP      r0,#0x55              ;1647
001704  d144              BNE      |L1.6032|
001706  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;1647  ; bat
00170a  2850              CMP      r0,#0x50              ;1647
00170c  dd40              BLE      |L1.6032|
00170e  f9b60054          LDRSH    r0,[r6,#0x54]         ;1647  ; bat
001712  f7fffffe          BL       abs
001716  f9b91000          LDRSH    r1,[r9,#0]            ;1647  ; IKB
00171a  e031              B        |L1.6016|
                  |L1.5916|
00171c  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
001720  cccec2ce
001724  d7cddbc9
001728  20c7c0  
00172b  d0dfc420          DCB      208,223,196,"  ",0
00172f  2000    
001731  00                DCB      0
001732  00                DCB      0
001733  00                DCB      0
                  |L1.5940|
001734  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
001738  d2d3ccc1
00173c  cbc5d0c0
001740  21212120
001744  20202020
001748  00      
001749  00                DCB      0
00174a  00                DCB      0
00174b  00                DCB      0
                  |L1.5964|
00174c  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
001750  d4ced0cc
001754  cec2ced7
001758  cddbc920
00175c  202020  
00175f  2000              DCB      " ",0
001761  00                DCB      0
001762  00                DCB      0
001763  00                DCB      0
                  |L1.5988|
                          DCD      ||area_number.25||
                  |L1.5992|
                          DCD      speedChrgBlckStat
                  |L1.5996|
                          DCD      TBAT
                  |L1.6000|
                          DCD      Ib_ips_termokompensat
                  |L1.6004|
                          DCD      bat
                  |L1.6008|
                          DCD      IKB
                  |L1.6012|
                          DCD      BAT_IS_ON
                  |L1.6016|
001780  4288              CMP      r0,r1                 ;1647
001782  db03              BLT      |L1.6028|
001784  f8960089          LDRB     r0,[r6,#0x89]         ;1647  ; bat
001788  07c0              LSLS     r0,r0,#31             ;1647
00178a  d001              BEQ      |L1.6032|
                  |L1.6028|
00178c  f884b001          STRB     r11,[r4,#1]           ;1647
                  |L1.6032|
001790  48ff              LDR      r0,|L1.7056|
001792  7800              LDRB     r0,[r0,#0]            ;1649  ; ips_bat_av_vzvod
001794  b970              CBNZ     r0,|L1.6068|
001796  f9ba0000          LDRSH    r0,[r10,#0]           ;1649  ; Ib_ips_termokompensat
00179a  f7fffffe          BL       abs
00179e  f9b91000          LDRSH    r1,[r9,#0]            ;1649  ; IKB
0017a2  4288              CMP      r0,r1                 ;1649
0017a4  db04              BLT      |L1.6064|
0017a6  48fb              LDR      r0,|L1.7060|
0017a8  f890003d          LDRB     r0,[r0,#0x3d]         ;1649  ; bat_ips
0017ac  07c0              LSLS     r0,r0,#31             ;1649
0017ae  d001              BEQ      |L1.6068|
                  |L1.6064|
0017b0  f888b018          STRB     r11,[r8,#0x18]        ;1649
                  |L1.6068|
0017b4  48f8              LDR      r0,|L1.7064|
0017b6  7800              LDRB     r0,[r0,#0]            ;1651  ; net_av
0017b8  b990              CBNZ     r0,|L1.6112|
0017ba  f8980019          LDRB     r0,[r8,#0x19]         ;1651  ; num_of_wrks_bps
0017be  e000              B        |L1.6082|
                  |L1.6080|
0017c0  e01e              B        |L1.6144|
                  |L1.6082|
0017c2  b168              CBZ      r0,|L1.6112|
0017c4  f898001e          LDRB     r0,[r8,#0x1e]         ;1651  ; spc_stat
0017c8  b108              CBZ      r0,|L1.6094|
0017ca  2802              CMP      r0,#2                 ;1651
0017cc  d108              BNE      |L1.6112|
                  |L1.6094|
0017ce  f8980001          LDRB     r0,[r8,#1]            ;1652  ; vz1_stat
0017d2  b928              CBNZ     r0,|L1.6112|
0017d4  f8980003          LDRB     r0,[r8,#3]            ;1652  ; vz2_stat
0017d8  b910              CBNZ     r0,|L1.6112|
0017da  48f0              LDR      r0,|L1.7068|
0017dc  7800              LDRB     r0,[r0,#0]            ;1652  ; sp_ch_stat
0017de  b118              CBZ      r0,|L1.6120|
                  |L1.6112|
0017e0  7025              STRB     r5,[r4,#0]            ;1655
0017e2  7065              STRB     r5,[r4,#1]            ;1656
0017e4  f8885018          STRB     r5,[r8,#0x18]         ;1657
                  |L1.6120|
0017e8  7820              LDRB     r0,[r4,#0]            ;1660  ; kb_start
0017ea  2801              CMP      r0,#1                 ;1660
0017ec  d01e              BEQ      |L1.6188|
0017ee  7860              LDRB     r0,[r4,#1]            ;1660  ; kb_start
0017f0  2801              CMP      r0,#1                 ;1660
0017f2  d01b              BEQ      |L1.6188|
0017f4  f8980018          LDRB     r0,[r8,#0x18]         ;1660  ; kb_start_ips
0017f8  2801              CMP      r0,#1                 ;1660
0017fa  d017              BEQ      |L1.6188|
;;;1663   		}
;;;1664   	else kb_cnt_1lev=0;
0017fc  f8a8504e          STRH     r5,[r8,#0x4e]
                  |L1.6144|
;;;1665   	}
;;;1666   
;;;1667   if(kb_cnt_1lev)
001800  4641              MOV      r1,r8
001802  f9b8004e          LDRSH    r0,[r8,#0x4e]  ; kb_cnt_1lev
;;;1668   	{
;;;1669   	kb_cnt_1lev--;
;;;1670   
;;;1671   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;1672   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;1673   
;;;1674   
;;;1675   	if(kb_cnt_1lev==5)
;;;1676   		{
;;;1677   		ibat[0]=abs(bat[0]._Ib);
001806  f8df8398          LDR      r8,|L1.7072|
00180a  2800              CMP      r0,#0                 ;1667
00180c  d07e              BEQ      |L1.6412|
00180e  f1a00001          SUB      r0,r0,#1              ;1669
001812  b200              SXTH     r0,r0                 ;1669
001814  468b              MOV      r11,r1                ;1669
001816  f8a1004e          STRH     r0,[r1,#0x4e]         ;1669
00181a  2805              CMP      r0,#5                 ;1671
00181c  dd09              BLE      |L1.6194|
00181e  230f              MOVS     r3,#0xf               ;1671
001820  221e              MOVS     r2,#0x1e              ;1671
001822  2164              MOVS     r1,#0x64              ;1671
001824  20e1              MOVS     r0,#0xe1              ;1671
001826  f7fffffe          BL       mess_send
00182a  e00a              B        |L1.6210|
                  |L1.6188|
00182c  f8a8704e          STRH     r7,[r8,#0x4e]         ;1662
001830  e7e6              B        |L1.6144|
                  |L1.6194|
001832  2800              CMP      r0,#0                 ;1672
001834  dd05              BLE      |L1.6210|
001836  230f              MOVS     r3,#0xf               ;1672
001838  221e              MOVS     r2,#0x1e              ;1672
00183a  2169              MOVS     r1,#0x69              ;1672
00183c  20e1              MOVS     r0,#0xe1              ;1672
00183e  f7fffffe          BL       mess_send
                  |L1.6210|
001842  f8bb004e          LDRH     r0,[r11,#0x4e]        ;1675  ; kb_cnt_1lev
001846  2805              CMP      r0,#5                 ;1675
001848  d111              BNE      |L1.6254|
00184a  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00184e  f7fffffe          BL       abs
001852  f8a80000          STRH     r0,[r8,#0]
;;;1678   		ibat[1]=abs(bat[1]._Ib);
001856  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
00185a  f7fffffe          BL       abs
00185e  f8a80002          STRH     r0,[r8,#2]
;;;1679   		ibat_ips=abs(Ib_ips_termokompensat);
001862  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
001866  f7fffffe          BL       abs
00186a  f8ab0054          STRH     r0,[r11,#0x54]
                  |L1.6254|
;;;1680   		}
;;;1681   	
;;;1682   	if(kb_cnt_1lev==0)
00186e  48cc              LDR      r0,|L1.7072|
001870  3890              SUBS     r0,r0,#0x90
001872  f8b0004e          LDRH     r0,[r0,#0x4e]  ; kb_cnt_1lev
001876  2800              CMP      r0,#0
001878  d158              BNE      |L1.6444|
;;;1683   		{
;;;1684   		ibat_[0]=abs(bat[0]._Ib);
00187a  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00187e  f7fffffe          BL       abs
001882  f8dfb31c          LDR      r11,|L1.7072|
001886  f10b0b04          ADD      r11,r11,#4
00188a  f8ab0000          STRH     r0,[r11,#0]
;;;1685   		ibat_[1]=abs(bat[1]._Ib);
00188e  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
001892  f7fffffe          BL       abs
001896  f8ab0002          STRH     r0,[r11,#2]
;;;1686   		ibat_ips_=abs(Ib_ips_termokompensat);
00189a  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00189e  f7fffffe          BL       abs
0018a2  f1ab0a94          SUB      r10,r11,#0x94
0018a6  f8aa0056          STRH     r0,[r10,#0x56]
;;;1687   
;;;1688   		kb_cnt_2lev=0;
0018aa  f8aa5050          STRH     r5,[r10,#0x50]
;;;1689   
;;;1690   
;;;1691   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0018ae  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0018b2  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0018b6  4408              ADD      r0,r0,r1
0018b8  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0018bc  4288              CMP      r0,r1
0018be  da02              BGE      |L1.6342|
0018c0  7820              LDRB     r0,[r4,#0]  ; kb_start
0018c2  2801              CMP      r0,#1
0018c4  d034              BEQ      |L1.6448|
                  |L1.6342|
;;;1692   			{
;;;1693   			kb_cnt_2lev=10;  
;;;1694   			}
;;;1695   		else if(bat[0]._Ub>200)
0018c6  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0018ca  28c8              CMP      r0,#0xc8
0018cc  dd04              BLE      |L1.6360|
;;;1696   			{
;;;1697   			kb_start[0]=0;
0018ce  7025              STRB     r5,[r4,#0]
;;;1698   			avar_bat_hndl(0,0);
0018d0  2100              MOVS     r1,#0
0018d2  4608              MOV      r0,r1
0018d4  f7fffffe          BL       avar_bat_hndl
                  |L1.6360|
;;;1699   			}
;;;1700   		
;;;1701   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0018d8  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0018dc  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0018e0  4408              ADD      r0,r0,r1
0018e2  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0018e6  4288              CMP      r0,r1
0018e8  da02              BGE      |L1.6384|
0018ea  7860              LDRB     r0,[r4,#1]  ; kb_start
0018ec  2801              CMP      r0,#1
0018ee  d022              BEQ      |L1.6454|
                  |L1.6384|
;;;1702   			{
;;;1703   			kb_cnt_2lev=10;     
;;;1704   			}
;;;1705   		else  if(bat[1]._Ub>200)
0018f0  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
0018f4  28c8              CMP      r0,#0xc8
0018f6  dd04              BLE      |L1.6402|
;;;1706   			{
;;;1707   			kb_start[1]=0;
0018f8  7065              STRB     r5,[r4,#1]
;;;1708   			avar_bat_hndl(1,0);
0018fa  2100              MOVS     r1,#0
0018fc  2001              MOVS     r0,#1
0018fe  f7fffffe          BL       avar_bat_hndl
                  |L1.6402|
;;;1709   			}
;;;1710   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1711   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
001902  f9ba0054          LDRSH    r0,[r10,#0x54]  ; ibat_ips
001906  f9ba1056          LDRSH    r1,[r10,#0x56]  ; ibat_ips_
00190a  e000              B        |L1.6414|
                  |L1.6412|
00190c  e01c              B        |L1.6472|
                  |L1.6414|
00190e  4408              ADD      r0,r0,r1
001910  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
001914  4288              CMP      r0,r1
001916  da09              BGE      |L1.6444|
001918  f89a0018          LDRB     r0,[r10,#0x18]  ; kb_start_ips
00191c  2801              CMP      r0,#1
00191e  d105              BNE      |L1.6444|
;;;1712   			{
;;;1713   			if(KB_ALGORITM==1)
001920  48a0              LDR      r0,|L1.7076|
001922  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
001924  2801              CMP      r0,#1
001926  d009              BEQ      |L1.6460|
;;;1714   				{
;;;1715   				avar_bat_ips_hndl(1);
;;;1716   				kb_start_ips=0;
;;;1717   				}
;;;1718   			else
;;;1719   				{
;;;1720   				kb_cnt_2lev=10;     
001928  f8aa7050          STRH     r7,[r10,#0x50]
                  |L1.6444|
;;;1721   				}
;;;1722   			}
;;;1723   #endif
;;;1724   		}	
;;;1725   
;;;1726   
;;;1727   	}
;;;1728   else if(kb_cnt_2lev)
;;;1729   	{
;;;1730   	kb_cnt_2lev--;
;;;1731   
;;;1732   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;1733   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;1734   
;;;1735   
;;;1736   	if(kb_cnt_2lev==5)
;;;1737   		{
;;;1738   		ibat[0]=abs(bat[0]._Ib);
;;;1739   		ibat[1]=abs(bat[1]._Ib);
;;;1740   		ibat_ips=abs(Ib_ips_termokompensat);
;;;1741   		}
;;;1742   	
;;;1743   	if(kb_cnt_2lev==0)
;;;1744   		{
;;;1745   		ibat_[0]=abs(bat[0]._Ib);
;;;1746   		ibat_[1]=abs(bat[1]._Ib);
;;;1747   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;1748   
;;;1749   		kb_full_ver=0;
;;;1750   
;;;1751   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;1752   			{
;;;1753   			kb_full_ver=1;  
;;;1754   			}
;;;1755   		else if(bat[0]._Ub>200)			
;;;1756   			{
;;;1757   			kb_start[0]=0;
;;;1758   			avar_bat_hndl(0,0);
;;;1759   			}
;;;1760   
;;;1761   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;1762   			{
;;;1763   			kb_full_ver=1;     
;;;1764   			}
;;;1765   		else	if(bat[1]._Ub>200)		
;;;1766   			{
;;;1767   			kb_start[1]=0;
;;;1768   			avar_bat_hndl(1,0);
;;;1769   			}
;;;1770   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1771   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;1772   			{
;;;1773   			if(KB_ALGORITM==2)
;;;1774   				{
;;;1775   				avar_bat_ips_hndl(1);
;;;1776   				kb_start_ips=0;
;;;1777   				}
;;;1778   			else
;;;1779   				{
;;;1780   				kb_full_ver=1;     
;;;1781   				}
;;;1782   			}
;;;1783   #endif
;;;1784   		}	
;;;1785   	}
;;;1786   
;;;1787   else if(kb_full_ver)
;;;1788   	{
;;;1789   	
;;;1790   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;1791   
;;;1792   	if( abs(bat[0]._Ib) > IKB ) 
;;;1793   		{
;;;1794   		if(kb_start[0]==1)
;;;1795   			{
;;;1796   			kb_start[0]=0;
;;;1797   			avar_bat_hndl(0,0);
;;;1798   			}
;;;1799   		}
;;;1800   
;;;1801   	if( abs(bat[1]._Ib) > IKB ) 
;;;1802   		{
;;;1803   		if(kb_start[1]==1)
;;;1804   			{
;;;1805   			kb_start[1]=0;
;;;1806   			avar_bat_hndl(1,0);
;;;1807   			}
;;;1808   		}
;;;1809   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1810   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;1811   		{
;;;1812   		if(kb_start_ips==1)
;;;1813   			{
;;;1814   			kb_start_ips=0;
;;;1815   			avar_bat_ips_hndl(0);
;;;1816   			}
;;;1817   		}
;;;1818   #endif
;;;1819   
;;;1820   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;1821   		{
;;;1822   		kb_full_ver=0;
;;;1823   		}
;;;1824   
;;;1825   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;1826   		{
;;;1827   		kb_full_ver=0;
;;;1828   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;1829   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;1830   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1831   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;1832   #endif
;;;1833   		}
;;;1834   	}
;;;1835   
;;;1836   }
00192c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.6448|
001930  f8aa7050          STRH     r7,[r10,#0x50]        ;1693
001934  e7d0              B        |L1.6360|
                  |L1.6454|
001936  f8aa7050          STRH     r7,[r10,#0x50]        ;1703
00193a  e7e2              B        |L1.6402|
                  |L1.6460|
00193c  2001              MOVS     r0,#1                 ;1715
00193e  f7fffffe          BL       avar_bat_ips_hndl
001942  f88a5018          STRB     r5,[r10,#0x18]        ;1716
                  |L1.6470|
001946  e7f1              B        |L1.6444|
                  |L1.6472|
001948  f9b10050          LDRSH    r0,[r1,#0x50]         ;1728  ; kb_cnt_2lev
00194c  b3f0              CBZ      r0,|L1.6604|
00194e  f1a00001          SUB      r0,r0,#1              ;1730
001952  b200              SXTH     r0,r0                 ;1730
001954  460f              MOV      r7,r1                 ;1730
001956  f8a10050          STRH     r0,[r1,#0x50]         ;1730
00195a  2805              CMP      r0,#5                 ;1732
00195c  dd06              BLE      |L1.6508|
00195e  230f              MOVS     r3,#0xf               ;1732
001960  22c8              MOVS     r2,#0xc8              ;1732
001962  2164              MOVS     r1,#0x64              ;1732
001964  20e1              MOVS     r0,#0xe1              ;1732
001966  f7fffffe          BL       mess_send
00196a  e007              B        |L1.6524|
                  |L1.6508|
00196c  2800              CMP      r0,#0                 ;1733
00196e  dd05              BLE      |L1.6524|
001970  230f              MOVS     r3,#0xf               ;1733
001972  22c8              MOVS     r2,#0xc8              ;1733
001974  2169              MOVS     r1,#0x69              ;1733
001976  20e1              MOVS     r0,#0xe1              ;1733
001978  f7fffffe          BL       mess_send
                  |L1.6524|
00197c  f8b70050          LDRH     r0,[r7,#0x50]         ;1736  ; kb_cnt_2lev
001980  2805              CMP      r0,#5                 ;1736
001982  d111              BNE      |L1.6568|
001984  f9b60008          LDRSH    r0,[r6,#8]            ;1738  ; bat
001988  f7fffffe          BL       abs
00198c  f8a80000          STRH     r0,[r8,#0]            ;1738
001990  f9b60054          LDRSH    r0,[r6,#0x54]         ;1739  ; bat
001994  f7fffffe          BL       abs
001998  f8a80002          STRH     r0,[r8,#2]            ;1739
00199c  f9ba0000          LDRSH    r0,[r10,#0]           ;1740  ; Ib_ips_termokompensat
0019a0  f7fffffe          BL       abs
0019a4  f8a70054          STRH     r0,[r7,#0x54]         ;1740
                  |L1.6568|
0019a8  487d              LDR      r0,|L1.7072|
0019aa  3890              SUBS     r0,r0,#0x90           ;1743
0019ac  f8b00050          LDRH     r0,[r0,#0x50]         ;1743  ; kb_cnt_2lev
0019b0  2800              CMP      r0,#0                 ;1743
                  |L1.6578|
0019b2  d1bb              BNE      |L1.6444|
0019b4  f9b60008          LDRSH    r0,[r6,#8]            ;1745  ; bat
0019b8  f7fffffe          BL       abs
0019bc  4f78              LDR      r7,|L1.7072|
0019be  1d3f              ADDS     r7,r7,#4              ;1745
0019c0  8038              STRH     r0,[r7,#0]            ;1745
0019c2  f9b60054          LDRSH    r0,[r6,#0x54]         ;1746  ; bat
0019c6  f7fffffe          BL       abs
0019ca  e000              B        |L1.6606|
                  |L1.6604|
0019cc  e055              B        |L1.6778|
                  |L1.6606|
0019ce  8078              STRH     r0,[r7,#2]            ;1746
0019d0  f9ba0000          LDRSH    r0,[r10,#0]           ;1747  ; Ib_ips_termokompensat
0019d4  f7fffffe          BL       abs
0019d8  f1a70a94          SUB      r10,r7,#0x94          ;1747
0019dc  f8aa0056          STRH     r0,[r10,#0x56]        ;1747
0019e0  f88a5017          STRB     r5,[r10,#0x17]        ;1749
0019e4  f9b80000          LDRSH    r0,[r8,#0]            ;1751  ; ibat
0019e8  f9b71000          LDRSH    r1,[r7,#0]            ;1751  ; ibat_
0019ec  4408              ADD      r0,r0,r1              ;1751
0019ee  f9b91000          LDRSH    r1,[r9,#0]            ;1751  ; IKB
0019f2  4288              CMP      r0,r1                 ;1751
0019f4  da02              BGE      |L1.6652|
0019f6  7820              LDRB     r0,[r4,#0]            ;1751  ; kb_start
0019f8  2801              CMP      r0,#1                 ;1751
0019fa  d032              BEQ      |L1.6754|
                  |L1.6652|
0019fc  f9b60002          LDRSH    r0,[r6,#2]            ;1755  ; bat
001a00  28c8              CMP      r0,#0xc8              ;1755
001a02  dd04              BLE      |L1.6670|
001a04  7025              STRB     r5,[r4,#0]            ;1757
001a06  2100              MOVS     r1,#0                 ;1758
001a08  4608              MOV      r0,r1                 ;1758
001a0a  f7fffffe          BL       avar_bat_hndl
                  |L1.6670|
001a0e  f9b80002          LDRSH    r0,[r8,#2]            ;1761  ; ibat
001a12  f9b71002          LDRSH    r1,[r7,#2]            ;1761  ; ibat_
001a16  4408              ADD      r0,r0,r1              ;1761
001a18  f9b91000          LDRSH    r1,[r9,#0]            ;1761  ; IKB
001a1c  4288              CMP      r0,r1                 ;1761
001a1e  da02              BGE      |L1.6694|
001a20  7860              LDRB     r0,[r4,#1]            ;1761  ; kb_start
001a22  2801              CMP      r0,#1                 ;1761
001a24  d020              BEQ      |L1.6760|
                  |L1.6694|
001a26  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;1765  ; bat
001a2a  28c8              CMP      r0,#0xc8              ;1765
001a2c  dd04              BLE      |L1.6712|
001a2e  7065              STRB     r5,[r4,#1]            ;1767
001a30  2100              MOVS     r1,#0                 ;1768
001a32  2001              MOVS     r0,#1                 ;1768
001a34  f7fffffe          BL       avar_bat_hndl
                  |L1.6712|
001a38  f9ba0054          LDRSH    r0,[r10,#0x54]        ;1771  ; ibat_ips
001a3c  f9ba1056          LDRSH    r1,[r10,#0x56]        ;1771  ; ibat_ips_
001a40  4408              ADD      r0,r0,r1              ;1771
001a42  f9b91000          LDRSH    r1,[r9,#0]            ;1771  ; IKB
001a46  4288              CMP      r0,r1                 ;1771
001a48  f6bfaf7d          BGE      |L1.6470|
001a4c  f89a0018          LDRB     r0,[r10,#0x18]        ;1771  ; kb_start_ips
001a50  2801              CMP      r0,#1                 ;1771
001a52  d1ae              BNE      |L1.6578|
001a54  4853              LDR      r0,|L1.7076|
001a56  8800              LDRH     r0,[r0,#0]            ;1773  ; KB_ALGORITM
001a58  2802              CMP      r0,#2                 ;1773
001a5a  d008              BEQ      |L1.6766|
001a5c  f88ab017          STRB     r11,[r10,#0x17]       ;1780
                  |L1.6752|
001a60  e764              B        |L1.6444|
                  |L1.6754|
001a62  f88ab017          STRB     r11,[r10,#0x17]       ;1753
001a66  e7d2              B        |L1.6670|
                  |L1.6760|
001a68  f88ab017          STRB     r11,[r10,#0x17]       ;1763
001a6c  e7e4              B        |L1.6712|
                  |L1.6766|
001a6e  2001              MOVS     r0,#1                 ;1775
001a70  f7fffffe          BL       avar_bat_ips_hndl
001a74  f88a5018          STRB     r5,[r10,#0x18]        ;1776
001a78  e758              B        |L1.6444|
                  |L1.6778|
001a7a  7dc8              LDRB     r0,[r1,#0x17]         ;1787  ; kb_full_ver
001a7c  4688              MOV      r8,r1                 ;1787
001a7e  2800              CMP      r0,#0                 ;1787
001a80  d0ee              BEQ      |L1.6752|
001a82  230f              MOVS     r3,#0xf               ;1790
001a84  2200              MOVS     r2,#0                 ;1790
001a86  216e              MOVS     r1,#0x6e              ;1790
001a88  20e1              MOVS     r0,#0xe1              ;1790
001a8a  f7fffffe          BL       mess_send
001a8e  f9b60008          LDRSH    r0,[r6,#8]            ;1792  ; bat
001a92  f7fffffe          BL       abs
001a96  f9b91000          LDRSH    r1,[r9,#0]            ;1792  ; IKB
001a9a  4288              CMP      r0,r1                 ;1792
001a9c  dd07              BLE      |L1.6830|
001a9e  7820              LDRB     r0,[r4,#0]            ;1794  ; kb_start
001aa0  2801              CMP      r0,#1                 ;1794
001aa2  d104              BNE      |L1.6830|
001aa4  7025              STRB     r5,[r4,#0]            ;1796
001aa6  2100              MOVS     r1,#0                 ;1797
001aa8  4608              MOV      r0,r1                 ;1797
001aaa  f7fffffe          BL       avar_bat_hndl
                  |L1.6830|
001aae  f9b60054          LDRSH    r0,[r6,#0x54]         ;1801  ; bat
001ab2  f7fffffe          BL       abs
001ab6  f9b91000          LDRSH    r1,[r9,#0]            ;1801  ; IKB
001aba  4288              CMP      r0,r1                 ;1801
001abc  dd06              BLE      |L1.6860|
001abe  7860              LDRB     r0,[r4,#1]            ;1803  ; kb_start
001ac0  2801              CMP      r0,#1                 ;1803
001ac2  d103              BNE      |L1.6860|
001ac4  7065              STRB     r5,[r4,#1]            ;1805
001ac6  2100              MOVS     r1,#0                 ;1806
001ac8  f7fffffe          BL       avar_bat_hndl
                  |L1.6860|
001acc  f9ba0000          LDRSH    r0,[r10,#0]           ;1810  ; Ib_ips_termokompensat
001ad0  f7fffffe          BL       abs
001ad4  f9b91000          LDRSH    r1,[r9,#0]            ;1810  ; IKB
001ad8  4288              CMP      r0,r1                 ;1810
001ada  dd08              BLE      |L1.6894|
001adc  f8980018          LDRB     r0,[r8,#0x18]         ;1812  ; kb_start_ips
001ae0  2801              CMP      r0,#1                 ;1812
001ae2  d104              BNE      |L1.6894|
001ae4  f8885018          STRB     r5,[r8,#0x18]         ;1814
001ae8  2000              MOVS     r0,#0                 ;1815
001aea  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.6894|
001aee  7820              LDRB     r0,[r4,#0]            ;1820  ; kb_start
001af0  b930              CBNZ     r0,|L1.6912|
001af2  7860              LDRB     r0,[r4,#1]            ;1820  ; kb_start
001af4  b920              CBNZ     r0,|L1.6912|
001af6  f8980018          LDRB     r0,[r8,#0x18]         ;1820  ; kb_start_ips
001afa  b908              CBNZ     r0,|L1.6912|
001afc  f8885017          STRB     r5,[r8,#0x17]         ;1822
                  |L1.6912|
001b00  20e6              MOVS     r0,#0xe6              ;1825
001b02  f7fffffe          BL       mess_find
001b06  b118              CBZ      r0,|L1.6928|
001b08  4827              LDR      r0,|L1.7080|
001b0a  6800              LDR      r0,[r0,#0]            ;1825  ; mess_data
001b0c  28e7              CMP      r0,#0xe7              ;1825
001b0e  d00a              BEQ      |L1.6950|
                  |L1.6928|
001b10  4826              LDR      r0,|L1.7084|
001b12  4927              LDR      r1,|L1.7088|
001b14  f9b00000          LDRSH    r0,[r0,#0]            ;1825  ; USIGN
001b18  f9b11000          LDRSH    r1,[r1,#0]            ;1825  ; load_U
001b1c  eb000080          ADD      r0,r0,r0,LSL #2       ;1825
001b20  ebb10f40          CMP      r1,r0,LSL #1          ;1825
                  |L1.6948|
001b24  da9c              BGE      |L1.6752|
                  |L1.6950|
001b26  f8885017          STRB     r5,[r8,#0x17]         ;1827
001b2a  7820              LDRB     r0,[r4,#0]            ;1828  ; kb_start
001b2c  4d21              LDR      r5,|L1.7092|
001b2e  2801              CMP      r0,#1                 ;1828
001b30  d10f              BNE      |L1.6994|
001b32  f9b90000          LDRSH    r0,[r9,#0]            ;1828  ; IKB
001b36  0040              LSLS     r0,r0,#1              ;1828
001b38  fb90f1f7          SDIV     r1,r0,r7              ;1828
001b3c  f9b50000          LDRSH    r0,[r5,#0]            ;1828  ; load_I
001b40  4281              CMP      r1,r0                 ;1828
001b42  da06              BGE      |L1.6994|
001b44  f896003d          LDRB     r0,[r6,#0x3d]         ;1828  ; bat
001b48  07c0              LSLS     r0,r0,#31             ;1828
001b4a  d102              BNE      |L1.6994|
001b4c  2101              MOVS     r1,#1                 ;1828
001b4e  f7fffffe          BL       avar_bat_hndl
                  |L1.6994|
001b52  7860              LDRB     r0,[r4,#1]            ;1829  ; kb_start
001b54  2801              CMP      r0,#1                 ;1829
001b56  d110              BNE      |L1.7034|
001b58  f9b90000          LDRSH    r0,[r9,#0]            ;1829  ; IKB
001b5c  f9b51000          LDRSH    r1,[r5,#0]            ;1829  ; load_I
001b60  0040              LSLS     r0,r0,#1              ;1829
001b62  fb90f0f7          SDIV     r0,r0,r7              ;1829
001b66  4288              CMP      r0,r1                 ;1829
001b68  da07              BGE      |L1.7034|
001b6a  f8960089          LDRB     r0,[r6,#0x89]         ;1829  ; bat
001b6e  07c0              LSLS     r0,r0,#31             ;1829
001b70  d103              BNE      |L1.7034|
001b72  2101              MOVS     r1,#1                 ;1829
001b74  4608              MOV      r0,r1                 ;1829
001b76  f7fffffe          BL       avar_bat_hndl
                  |L1.7034|
001b7a  f8980018          LDRB     r0,[r8,#0x18]         ;1831  ; kb_start_ips
001b7e  2801              CMP      r0,#1                 ;1831
                  |L1.7040|
001b80  f47faee1          BNE      |L1.6470|
001b84  f9b90000          LDRSH    r0,[r9,#0]            ;1831  ; IKB
001b88  0040              LSLS     r0,r0,#1              ;1831
001b8a  fb90f0f7          SDIV     r0,r0,r7              ;1831
001b8e  e013              B        |L1.7096|
                  |L1.7056|
                          DCD      ips_bat_av_vzvod
                  |L1.7060|
                          DCD      bat_ips
                  |L1.7064|
                          DCD      net_av
                  |L1.7068|
                          DCD      sp_ch_stat
                  |L1.7072|
                          DCD      ||area_number.25||+0x90
                  |L1.7076|
                          DCD      KB_ALGORITM
                  |L1.7080|
                          DCD      mess_data
                  |L1.7084|
                          DCD      USIGN
                  |L1.7088|
                          DCD      load_U
                  |L1.7092|
                          DCD      load_I
                  |L1.7096|
001bb8  f9b51000          LDRSH    r1,[r5,#0]            ;1831  ; load_I
001bbc  4288              CMP      r0,r1                 ;1831
001bbe  dab1              BGE      |L1.6948|
001bc0  48ff              LDR      r0,|L1.8128|
001bc2  f890003d          LDRB     r0,[r0,#0x3d]         ;1831  ; bat_ips
001bc6  07c0              LSLS     r0,r0,#31             ;1831
001bc8  d1da              BNE      |L1.7040|
001bca  e8bd5ff0          POP      {r4-r12,lr}           ;1831
001bce  2001              MOVS     r0,#1                 ;1831
001bd0  f7ffbffe          B.W      avar_bat_ips_hndl
;;;1837   
                          ENDP

                  samokalibr_hndl PROC
;;;1846   //-----------------------------------------------
;;;1847   void samokalibr_hndl(void)
001bd4  4770              BX       lr
;;;1848   {
;;;1849   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;1850   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;1851   
;;;1852   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;1853   	{
;;;1854   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;1855   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;1856   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;1857   	} 
;;;1858   
;;;1859   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;1860   	{
;;;1861   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;1862   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;1863   	
;;;1864   	}
;;;1865   #endif	 	
;;;1866   }
;;;1867   
                          ENDP

                  ubat_old_drv PROC
;;;1870   //-----------------------------------------------
;;;1871   void ubat_old_drv(void)
001bd6  b510              PUSH     {r4,lr}
;;;1872   {        
;;;1873   bat_u_old_cnt++;
001bd8  4cfa              LDR      r4,|L1.8132|
001bda  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
001bdc  f1000001          ADD      r0,r0,#1
001be0  8020              STRH     r0,[r4,#0]
;;;1874   gran_ring(&bat_u_old_cnt,0,8);
001be2  f04f0208          MOV      r2,#8
001be6  f04f0100          MOV      r1,#0
001bea  4620              MOV      r0,r4
001bec  f7fffffe          BL       gran_ring
;;;1875   
;;;1876   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
001bf0  49f5              LDR      r1,|L1.8136|
001bf2  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
001bf6  eb010040          ADD      r0,r1,r0,LSL #1
001bfa  884a              LDRH     r2,[r1,#2]  ; bat
001bfc  8402              STRH     r2,[r0,#0x20]
;;;1877   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
001bfe  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
001c02  f8a0106c          STRH     r1,[r0,#0x6c]
;;;1878   }
001c06  bd10              POP      {r4,pc}
;;;1879   
                          ENDP

                  unet_drv PROC
;;;1880   //-----------------------------------------------
;;;1881   void unet_drv(void)
001c08  b570              PUSH     {r4-r6,lr}
;;;1882   {
;;;1883   if(net_U<UMN)
001c0a  4df0              LDR      r5,|L1.8140|
001c0c  48f0              LDR      r0,|L1.8144|
;;;1884   	{
;;;1885   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
001c0e  4af1              LDR      r2,|L1.8148|
001c10  f9b51000          LDRSH    r1,[r5,#0]            ;1883  ; net_U
001c14  f9b03000          LDRSH    r3,[r0,#0]            ;1883  ; UMN
001c18  f9920000          LDRSB    r0,[r2,#0]
001c1c  4299              CMP      r1,r3                 ;1883
001c1e  da1f              BGE      |L1.7264|
;;;1886   		{
;;;1887   		unet_drv_cnt++;
;;;1888   		if(unet_drv_cnt>=10)
;;;1889   			{
;;;1890   			net_Ustore=net_U;
001c20  4ced              LDR      r4,|L1.8152|
001c22  280a              CMP      r0,#0xa               ;1885
001c24  da0f              BGE      |L1.7238|
001c26  4bed              LDR      r3,|L1.8156|
001c28  f9b33000          LDRSH    r3,[r3,#0]            ;1885  ; main_1Hz_cnt
001c2c  2b0f              CMP      r3,#0xf               ;1885
001c2e  dd0a              BLE      |L1.7238|
001c30  f1000001          ADD      r0,r0,#1              ;1887
001c34  b240              SXTB     r0,r0                 ;1887
001c36  7010              STRB     r0,[r2,#0]            ;1887
001c38  280a              CMP      r0,#0xa               ;1888
001c3a  db09              BLT      |L1.7248|
001c3c  8021              STRH     r1,[r4,#0]
;;;1891   		 	avar_unet_hndl(1);
001c3e  2001              MOVS     r0,#1
001c40  f7fffffe          BL       avar_unet_hndl
001c44  e004              B        |L1.7248|
                  |L1.7238|
;;;1892   			
;;;1893   			}
;;;1894   		}
;;;1895   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
001c46  280a              CMP      r0,#0xa
001c48  db02              BLT      |L1.7248|
001c4a  f04f000a          MOV      r0,#0xa
001c4e  7010              STRB     r0,[r2,#0]
                  |L1.7248|
;;;1896   
;;;1897   	if(net_U<net_Ustore) net_Ustore=net_U;	
001c50  f9b50000          LDRSH    r0,[r5,#0]  ; net_U
001c54  f9b41000          LDRSH    r1,[r4,#0]  ; net_Ustore
001c58  4288              CMP      r0,r1
001c5a  da00              BGE      |L1.7262|
001c5c  8020              STRH     r0,[r4,#0]
                  |L1.7262|
;;;1898   	}
;;;1899   
;;;1900   else if(net_U>UMN)
;;;1901   	{                 
;;;1902   	if(unet_drv_cnt)
;;;1903   		{
;;;1904   		unet_drv_cnt--;
;;;1905   		if(unet_drv_cnt<=0)
;;;1906   			{
;;;1907   			avar_unet_hndl(0);
;;;1908   			}
;;;1909   		}
;;;1910   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;1911   	
;;;1912   	}
;;;1913   
;;;1914   }
001c5e  bd70              POP      {r4-r6,pc}
                  |L1.7264|
001c60  ddfd              BLE      |L1.7262|
001c62  2800              CMP      r0,#0                 ;1902
001c64  d0fb              BEQ      |L1.7262|
001c66  f1a00001          SUB      r0,r0,#1              ;1904
001c6a  b240              SXTB     r0,r0                 ;1904
001c6c  7010              STRB     r0,[r2,#0]            ;1904
001c6e  2800              CMP      r0,#0                 ;1905
001c70  dcf5              BGT      |L1.7262|
001c72  e8bd4070          POP      {r4-r6,lr}            ;1907
001c76  2000              MOVS     r0,#0                 ;1907
001c78  f7ffbffe          B.W      avar_unet_hndl
;;;1915   
                          ENDP

                  matemat PROC
;;;1916   //-----------------------------------------------
;;;1917   void matemat(void)
001c7c  e92d4ff0          PUSH     {r4-r11,lr}
;;;1918   {
001c80  b087              SUB      sp,sp,#0x1c
;;;1919   //signed short temp_SS;
;;;1920   signed long temp_SL/*,temp_SL_*/;
;;;1921   char /*temp,*/i;
;;;1922   //signed short temp_SS;
;;;1923   
;;;1924   #ifdef UKU_MGTS
;;;1925   //напряжение сети
;;;1926   temp_SL=(signed long)net_buff_;
;;;1927   temp_SL*=Kunet;
;;;1928   temp_SL/=110000L;
;;;1929   net_U=(signed short)temp_SL;
;;;1930   #endif
;;;1931   
;;;1932   #ifdef UKU_RSTKM
;;;1933   //напряжение сети
;;;1934   temp_SL=(signed long)net_buff_;
;;;1935   temp_SL*=Kunet;
;;;1936   temp_SL/=110000L;
;;;1937   net_U=(signed short)temp_SL;
;;;1938   #endif
;;;1939   
;;;1940   #ifdef UKU_3U
;;;1941   //напряжение сети
;;;1942   temp_SL=(signed long)net_buff_;
;;;1943   temp_SL*=Kunet;
;;;1944   temp_SL/=36000L;
;;;1945   net_U=(signed short)temp_SL;
;;;1946   #endif
;;;1947   
;;;1948   #ifdef UKU_6U
;;;1949   //напряжение сети
;;;1950   
;;;1951   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;1952   	{
;;;1953   
;;;1954   	if(bps[11]._device==dNET_METR)
;;;1955   		{
;;;1956   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;1957   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;1958   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;1959   
;;;1960   		temp_SL=(signed long)net_metr_buff_[0];
;;;1961   		temp_SL*=KunetA;
;;;1962   		temp_SL/=6000L;
;;;1963   		net_Ua=(signed short)temp_SL;
;;;1964   	
;;;1965   		temp_SL=(signed long)net_metr_buff_[1];
;;;1966   		temp_SL*=KunetB;
;;;1967   		temp_SL/=6000L;
;;;1968   		net_Ub=(signed short)temp_SL;
;;;1969   	
;;;1970   		temp_SL=(signed long)net_metr_buff_[2];
;;;1971   		temp_SL*=KunetC;
;;;1972   		temp_SL/=6000L;
;;;1973   		net_Uc=(signed short)temp_SL;
;;;1974   		}
;;;1975   	else
;;;1976   		{
;;;1977   		temp_SL=(signed long)net_buff_;
;;;1978   		temp_SL*=KunetA;
;;;1979   		temp_SL/=110000L;
;;;1980   		net_Ua=(signed short)temp_SL;
;;;1981   	
;;;1982   		temp_SL=(signed long)adc_buff_[3];
;;;1983   		temp_SL*=KunetB;
;;;1984   		temp_SL/=6000L;
;;;1985   		net_Ub=(signed short)temp_SL;
;;;1986   	
;;;1987   		temp_SL=(signed long)adc_buff_[10];
;;;1988   		temp_SL*=KunetC;
;;;1989   		temp_SL/=6000L;
;;;1990   		net_Uc=(signed short)temp_SL;
;;;1991   		}
;;;1992   
;;;1993   	net_U=net_Ua;
;;;1994   	if(net_Ub<net_U)net_U=net_Ub;
;;;1995   	if(net_Uc<net_U)net_U=net_Uc;
;;;1996   	}
;;;1997   else 
;;;1998   	{
;;;1999   	temp_SL=(signed long)net_buff_;
;;;2000   	temp_SL*=Kunet;
;;;2001   	temp_SL/=110000L;
;;;2002   	net_U=(signed short)temp_SL;
;;;2003   	}
;;;2004   
;;;2005   
;;;2006   
;;;2007   
;;;2008   #endif
;;;2009   
;;;2010   #ifdef UKU_GLONASS
;;;2011   //напряжение сети
;;;2012   temp_SL=(signed long)net_buff_;
;;;2013   temp_SL*=Kunet;
;;;2014   temp_SL/=110000L;
;;;2015   net_U=(signed short)temp_SL;
;;;2016   #endif
;;;2017   
;;;2018   #ifdef UKU_KONTUR
;;;2019   //напряжение сети
;;;2020   temp_SL=(signed long)net_buff_;
;;;2021   temp_SL*=Kunet;
;;;2022   temp_SL/=110000L;
;;;2023   net_U=(signed short)temp_SL;
;;;2024   #endif
;;;2025   
;;;2026   #ifdef IPS_SGEP_GAZPROM
;;;2027   //напряжение сети
;;;2028   temp_SL=(signed long)net_buff_;
;;;2029   temp_SL*=Kunet;
;;;2030   temp_SL/=110000L;
;;;2031   net_U=(signed short)temp_SL;
;;;2032   #endif
;;;2033   
;;;2034   #ifdef UKU_220_V2
;;;2035   //напряжение сети
;;;2036   
;;;2037   if(AUSW_MAIN==22033)
;;;2038   	{
;;;2039   	temp_SL=(signed long)net_buff_;
;;;2040   	temp_SL*=KunetA;
;;;2041   	temp_SL/=6000L;
;;;2042   	net_Ua=(signed short)temp_SL;
;;;2043   
;;;2044   	temp_SL=(signed long)adc_buff_[3];
;;;2045   	temp_SL*=KunetB;
;;;2046   	temp_SL/=6000L;
;;;2047   	net_Ub=(signed short)temp_SL;
;;;2048   
;;;2049   	temp_SL=(signed long)adc_buff_[10];
;;;2050   	temp_SL*=KunetC;
;;;2051   	temp_SL/=6000L;
;;;2052   	net_Uc=(signed short)temp_SL;
;;;2053   
;;;2054   	net_U=net_Ua;
;;;2055   	if(net_Ub<net_U)net_U=net_Ub;
;;;2056   	if(net_Uc<net_U)net_U=net_Uc;
;;;2057   	}
;;;2058   else
;;;2059   	{
;;;2060   	temp_SL=(signed long)net_buff_;
;;;2061   	temp_SL*=Kunet;
;;;2062   	temp_SL/=5000L;
;;;2063   	net_U=(signed short)temp_SL;
;;;2064   	}
;;;2065   #endif
;;;2066   
;;;2067   
;;;2068   #ifdef UKU_220
;;;2069   //напряжение сети
;;;2070   
;;;2071   if(AUSW_MAIN==22035)
;;;2072   	{
;;;2073   	temp_SL=(signed long)net_buff_;
;;;2074   	temp_SL*=KunetA;
;;;2075   	temp_SL/=6000L;
;;;2076   	net_Ua=(signed short)temp_SL;
;;;2077   
;;;2078   	temp_SL=(signed long)adc_buff_[3];
;;;2079   	temp_SL*=KunetB;
;;;2080   	temp_SL/=6000L;
;;;2081   	net_Ub=(signed short)temp_SL;
;;;2082   
;;;2083   	temp_SL=(signed long)adc_buff_[10];
;;;2084   	temp_SL*=KunetC;
;;;2085   	temp_SL/=6000L;
;;;2086   	net_Uc=(signed short)temp_SL;
;;;2087   
;;;2088   	net_U=net_Ua;
;;;2089   	if(net_Ub<net_U)net_U=net_Ub;
;;;2090   	if(net_Uc<net_U)net_U=net_Uc;
;;;2091   	}
;;;2092   else
;;;2093   	{
;;;2094   	temp_SL=(signed long)net_buff_;
;;;2095   	temp_SL*=Kunet;
;;;2096   	#ifdef _ACDC_
;;;2097   	temp_SL/=500L;
;;;2098   	#else
;;;2099   	temp_SL/=5000L;
;;;2100   	#endif
;;;2101   	net_U=(signed short)temp_SL;
;;;2102   	
;;;2103   	}
;;;2104   #endif
;;;2105   
;;;2106   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2107   //напряжение сети
;;;2108   
;;;2109   
;;;2110   	if(bps[11]._device==dNET_METR)
001c82  48d7              LDR      r0,|L1.8160|
;;;2111   		{
;;;2112   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2113   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2114   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2115   
;;;2116   		temp_SL=(signed long)net_metr_buff_[2];
;;;2117   		temp_SL*=KunetA;
001c84  4bd7              LDR      r3,|L1.8164|
;;;2118   		temp_SL/=6000L;
;;;2119   		net_Ua=(signed short)temp_SL;
;;;2120   	
;;;2121   		temp_SL=(signed long)net_metr_buff_[1];
;;;2122   		temp_SL*=KunetB;
001c86  49d9              LDR      r1,|L1.8172|
001c88  f89003f4          LDRB     r0,[r0,#0x3f4]        ;2110  ; bps
;;;2123   		temp_SL/=6000L;
;;;2124   		net_Ub=(signed short)temp_SL;
;;;2125   	
;;;2126   		temp_SL=(signed long)net_metr_buff_[0];
;;;2127   		temp_SL*=KunetC;
001c8c  4ad8              LDR      r2,|L1.8176|
001c8e  9006              STR      r0,[sp,#0x18]         ;2117
001c90  f8dfc354          LDR      r12,|L1.8168|
001c94  f9b39000          LDRSH    r9,[r3,#0]            ;2117
001c98  f9b1b000          LDRSH    r11,[r1,#0]           ;2122
001c9c  f9b2a000          LDRSH    r10,[r2,#0]
001ca0  4fd4              LDR      r7,|L1.8180|
;;;2128   		temp_SL/=6000L;
;;;2129   		net_Uc=(signed short)temp_SL;
001ca2  4cd5              LDR      r4,|L1.8184|
;;;2130   
;;;2131   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2132   
;;;2133   		net_U=net_Ua;
;;;2134   		if(net_Ub<net_U)net_U=net_Ub;
;;;2135   		if(net_Uc<net_U)net_U=net_Uc;
;;;2136   		}
;;;2137   	  else if(AUSW_MAIN==22033)
;;;2138   	{
;;;2139   	temp_SL=(signed long)net_buff_;
001ca4  4ed5              LDR      r6,|L1.8188|
001ca6  f2456511          MOV      r5,#0x5611            ;2137
001caa  2807              CMP      r0,#7                 ;2110
001cac  d036              BEQ      |L1.7452|
001cae  4631              MOV      r1,r6
001cb0  f8df8338          LDR      r8,|L1.8172|
001cb4  8e8a              LDRH     r2,[r1,#0x34]
001cb6  4619              MOV      r1,r3                 ;2117
;;;2140   	temp_SL*=KunetA;
;;;2141   	temp_SL/=4000L;
;;;2142   	net_Ua=(signed short)temp_SL;
;;;2143   
;;;2144   	temp_SL=(signed long)adc_buff_[3];
001cb8  4bd2              LDR      r3,|L1.8196|
001cba  f9b11000          LDRSH    r1,[r1,#0]            ;2117
001cbe  f9b88000          LDRSH    r8,[r8,#0]            ;2122
001cc2  434a              MULS     r2,r1,r2              ;2140
001cc4  f9b31006          LDRSH    r1,[r3,#6]
001cc8  f8df9324          LDR      r9,|L1.8176|
;;;2145   	temp_SL*=KunetB;
001ccc  fb01f108          MUL      r1,r1,r8
001cd0  f2417870          MOV      r8,#0x1770            ;2118
;;;2146   	temp_SL/=6000L;
;;;2147   	net_Ub=(signed short)temp_SL;
;;;2148   
;;;2149   	temp_SL=(signed long)adc_buff_[10];
001cd4  f9b33014          LDRSH    r3,[r3,#0x14]
001cd8  f9b99000          LDRSH    r9,[r9,#0]            ;2127
001cdc  fb91f1f8          SDIV     r1,r1,r8              ;2146
;;;2150   	temp_SL*=KunetC;
001ce0  fb03f309          MUL      r3,r3,r9
;;;2151   	temp_SL/=6000L;
001ce4  fb93f3f8          SDIV     r3,r3,r8
001ce8  48c5              LDR      r0,|L1.8192|
001cea  b209              SXTH     r1,r1                 ;2147
;;;2152   	net_Uc=(signed short)temp_SL;
001cec  b21b              SXTH     r3,r3
001cee  8800              LDRH     r0,[r0,#0]            ;2137  ; AUSW_MAIN
001cf0  42a8              CMP      r0,r5                 ;2137
001cf2  d154              BNE      |L1.7582|
001cf4  f44f607a          MOV      r0,#0xfa0             ;2141
001cf8  fb92f0f0          SDIV     r0,r2,r0              ;2141
001cfc  b200              SXTH     r0,r0                 ;2142
001cfe  f8ac0000          STRH     r0,[r12,#0]           ;2142
001d02  8039              STRH     r1,[r7,#0]            ;2147
001d04  8023              STRH     r3,[r4,#0]
;;;2153   
;;;2154   	net_U=net_Ua;
001d06  4ab1              LDR      r2,|L1.8140|
001d08  8010              STRH     r0,[r2,#0]
;;;2155   	if(net_Ub<net_U)net_U=net_Ub;
001d0a  4281              CMP      r1,r0
001d0c  da00              BGE      |L1.7440|
001d0e  8011              STRH     r1,[r2,#0]
                  |L1.7440|
;;;2156   	if(net_Uc<net_U)net_U=net_Uc;
001d10  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
001d14  4283              CMP      r3,r0
001d16  da00              BGE      |L1.7450|
001d18  8013              STRH     r3,[r2,#0]
                  |L1.7450|
001d1a  e07e              B        |L1.7706|
                  |L1.7452|
001d1c  48ba              LDR      r0,|L1.8200|
001d1e  4bb7              LDR      r3,|L1.8188|
001d20  7801              LDRB     r1,[r0,#0]            ;2112  ; bps
001d22  7842              LDRB     r2,[r0,#1]            ;2112  ; bps
001d24  f10303e4          ADD      r3,r3,#0xe4           ;2112
001d28  eb012102          ADD      r1,r1,r2,LSL #8       ;2112
001d2c  fa1ff881          UXTH     r8,r1                 ;2112
001d30  f8a38000          STRH     r8,[r3,#0]            ;2112
001d34  7881              LDRB     r1,[r0,#2]            ;2113  ; bps
001d36  78c2              LDRB     r2,[r0,#3]            ;2113  ; bps
001d38  eb012102          ADD      r1,r1,r2,LSL #8       ;2113
001d3c  b289              UXTH     r1,r1                 ;2113
001d3e  8059              STRH     r1,[r3,#2]            ;2113
001d40  7902              LDRB     r2,[r0,#4]            ;2114  ; bps
001d42  f890e005          LDRB     lr,[r0,#5]            ;2114  ; bps
001d46  eb02220e          ADD      r2,r2,lr,LSL #8       ;2114
001d4a  b292              UXTH     r2,r2                 ;2114
001d4c  809a              STRH     r2,[r3,#4]            ;2114
001d4e  fb02f209          MUL      r2,r2,r9              ;2117
001d52  f2417370          MOV      r3,#0x1770            ;2118
001d56  fb92f2f3          SDIV     r2,r2,r3              ;2118
001d5a  fa0ff982          SXTH     r9,r2                 ;2119
001d5e  f8ac9000          STRH     r9,[r12,#0]           ;2119
001d62  fb01f10b          MUL      r1,r1,r11             ;2122
001d66  fb91f1f3          SDIV     r1,r1,r3              ;2123
001d6a  b209              SXTH     r1,r1                 ;2124
001d6c  8039              STRH     r1,[r7,#0]            ;2124
001d6e  fb08f80a          MUL      r8,r8,r10             ;2127
001d72  fb98f2f3          SDIV     r2,r8,r3              ;2128
001d76  b212              SXTH     r2,r2                 ;2129
001d78  8022              STRH     r2,[r4,#0]            ;2129
001d7a  7983              LDRB     r3,[r0,#6]            ;2131  ; bps
001d7c  79c0              LDRB     r0,[r0,#7]            ;2131  ; bps
001d7e  eb032000          ADD      r0,r3,r0,LSL #8       ;2131
001d82  4ba2              LDR      r3,|L1.8204|
001d84  8018              STRH     r0,[r3,#0]            ;2131
001d86  4891              LDR      r0,|L1.8140|
001d88  f8a09000          STRH     r9,[r0,#0]            ;2133
001d8c  4549              CMP      r1,r9                 ;2134
001d8e  da00              BGE      |L1.7570|
001d90  8001              STRH     r1,[r0,#0]            ;2134
                  |L1.7570|
001d92  f9b01000          LDRSH    r1,[r0,#0]            ;2135  ; net_U
001d96  428a              CMP      r2,r1                 ;2135
001d98  da3f              BGE      |L1.7706|
001d9a  8002              STRH     r2,[r0,#0]            ;2135
001d9c  e03d              B        |L1.7706|
                  |L1.7582|
;;;2157   	}
;;;2158   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
001d9e  f5a048ac          SUB      r8,r0,#0x5600
001da2  f1b8082f          SUBS     r8,r8,#0x2f
001da6  d00b              BEQ      |L1.7616|
001da8  f1180828          ADDS     r8,r8,#0x28
001dac  d008              BEQ      |L1.7616|
001dae  f1b80814          SUBS     r8,r8,#0x14
001db2  d005              BEQ      |L1.7616|
001db4  f1b80801          SUBS     r8,r8,#1
001db8  d002              BEQ      |L1.7616|
001dba  f118081a          ADDS     r8,r8,#0x1a
001dbe  d113              BNE      |L1.7656|
                  |L1.7616|
;;;2159   	{
;;;2160   	temp_SL=(signed long)net_buff_;
;;;2161   	temp_SL*=KunetA;
;;;2162   	temp_SL/=40000L;
001dc0  f6494040          MOV      r0,#0x9c40
001dc4  fb92f0f0          SDIV     r0,r2,r0
;;;2163   	net_Ua=(signed short)temp_SL;
001dc8  b200              SXTH     r0,r0
001dca  f8ac0000          STRH     r0,[r12,#0]
;;;2164   
;;;2165   	temp_SL=(signed long)adc_buff_[3];
;;;2166   	temp_SL*=KunetB;
;;;2167   	temp_SL/=6000L;
;;;2168   	net_Ub=(signed short)temp_SL;
001dce  8039              STRH     r1,[r7,#0]
;;;2169   
;;;2170   	temp_SL=(signed long)adc_buff_[10];
;;;2171   	temp_SL*=KunetC;
;;;2172   	temp_SL/=6000L;
;;;2173   	net_Uc=(signed short)temp_SL;
001dd0  8023              STRH     r3,[r4,#0]
;;;2174   
;;;2175   	net_U=net_Ua;
001dd2  4a7e              LDR      r2,|L1.8140|
001dd4  8010              STRH     r0,[r2,#0]
;;;2176   	if(net_Ub<net_U)net_U=net_Ub;
001dd6  4281              CMP      r1,r0
001dd8  da00              BGE      |L1.7644|
001dda  8011              STRH     r1,[r2,#0]
                  |L1.7644|
;;;2177   	if(net_Uc<net_U)net_U=net_Uc;
001ddc  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
001de0  4283              CMP      r3,r0
001de2  da1a              BGE      |L1.7706|
001de4  8013              STRH     r3,[r2,#0]
001de6  e018              B        |L1.7706|
                  |L1.7656|
;;;2178   	}
;;;2179   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2180   	{
;;;2181   	temp_SL=(signed long)net_buff_;
;;;2182   	temp_SL*=Kunet;
001de8  4989              LDR      r1,|L1.8208|
001dea  f5a043aa          SUB      r3,r0,#0x5500         ;2179
001dee  f9b12000          LDRSH    r2,[r1,#0]
001df2  4982              LDR      r1,|L1.8188|
001df4  8e89              LDRH     r1,[r1,#0x34]         ;2139
001df6  4351              MULS     r1,r2,r1
001df8  3bfa              SUBS     r3,r3,#0xfa           ;2179
001dfa  d001              BEQ      |L1.7680|
001dfc  1e5a              SUBS     r2,r3,#1              ;2179
001dfe  d106              BNE      |L1.7694|
                  |L1.7680|
;;;2183   	temp_SL/=35000L;
001e00  f64800b8          MOV      r0,#0x88b8
001e04  fb91f0f0          SDIV     r0,r1,r0
;;;2184   	net_U=(signed short)temp_SL;
001e08  4970              LDR      r1,|L1.8140|
001e0a  8008              STRH     r0,[r1,#0]
001e0c  e005              B        |L1.7706|
                  |L1.7694|
;;;2185   	
;;;2186   	}
;;;2187   else
;;;2188   	{
;;;2189   	temp_SL=(signed long)net_buff_;
;;;2190   	temp_SL*=Kunet;
;;;2191   	#ifdef _ACDC_
;;;2192   	temp_SL/=500L;
001e0e  f44f70fa          MOV      r0,#0x1f4
001e12  fb91f0f0          SDIV     r0,r1,r0
;;;2193   	#else
;;;2194   	temp_SL/=5000L;
;;;2195   	#endif
;;;2196   	net_U=(signed short)temp_SL;
001e16  496d              LDR      r1,|L1.8140|
001e18  8008              STRH     r0,[r1,#0]
                  |L1.7706|
;;;2197   	
;;;2198   	}
;;;2199   if(bps[11]._device!=dNET_METR) net_F3=net_F;
001e1a  9806              LDR      r0,[sp,#0x18]
001e1c  2807              CMP      r0,#7
001e1e  d003              BEQ      |L1.7720|
001e20  487c              LDR      r0,|L1.8212|
001e22  8801              LDRH     r1,[r0,#0]  ; net_F
001e24  4879              LDR      r0,|L1.8204|
001e26  8001              STRH     r1,[r0,#0]
                  |L1.7720|
;;;2200   #endif
;;;2201   
;;;2202   #ifdef UKU_TELECORE2015
;;;2203   //напряжение сети
;;;2204   temp_SL=(signed long)net_buff_;
;;;2205   temp_SL*=Kunet;
;;;2206   temp_SL/=110000L;
;;;2207   net_U=(signed short)temp_SL;
;;;2208   #endif
;;;2209   
;;;2210   #ifdef UKU_TELECORE2017
;;;2211   //напряжение сети
;;;2212   temp_SL=(signed long)net_buff_;
;;;2213   temp_SL*=Kunet;
;;;2214   temp_SL/=110000L;
;;;2215   net_U=(signed short)temp_SL;
;;;2216   #endif
;;;2217   
;;;2218   //Напряжения батарей
;;;2219   temp_SL=(signed long)adc_buff_[0];
001e28  4f76              LDR      r7,|L1.8196|
001e2a  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2220   temp_SL*=Kubat[0];
001e2e  497a              LDR      r1,|L1.8216|
001e30  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
001e34  4350              MULS     r0,r2,r0
;;;2221   temp_SL/=2000L;
001e36  f44f68fa          MOV      r8,#0x7d0
001e3a  fb90f0f8          SDIV     r0,r0,r8
;;;2222   bat[0]._Ub=(signed short)temp_SL;
001e3e  4c62              LDR      r4,|L1.8136|
001e40  8060              STRH     r0,[r4,#2]
;;;2223   
;;;2224   #ifdef UKU_220
;;;2225   //Напряжения батарей
;;;2226   temp_SL=(signed long)adc_buff_[0];
;;;2227   temp_SL*=Kubat[0];
;;;2228   temp_SL/=400L;
;;;2229   bat[0]._Ub=(signed short)temp_SL;
;;;2230   #endif
;;;2231   
;;;2232   #ifdef UKU_220_V2
;;;2233   //Напряжения батарей
;;;2234   temp_SL=(signed long)adc_buff_[0];
;;;2235   temp_SL*=Kubat[0];
;;;2236   temp_SL/=400L;
;;;2237   bat[0]._Ub=(signed short)temp_SL;
;;;2238   #endif
;;;2239   
;;;2240   //adc_buff_[4]=300;
;;;2241   
;;;2242   temp_SL=(signed long)adc_buff_[4];
001e42  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2243   temp_SL*=Kubatm[0];
001e46  4a75              LDR      r2,|L1.8220|
001e48  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
001e4c  fb00f003          MUL      r0,r0,r3
;;;2244   temp_SL/=700L;
001e50  f44f732f          MOV      r3,#0x2bc
001e54  fb90f0f3          SDIV     r0,r0,r3
;;;2245   bat[0]._Ubm=(signed short)temp_SL;
001e58  80a0              STRH     r0,[r4,#4]
;;;2246   
;;;2247   #ifdef UKU_KONTUR
;;;2248   temp_SL=(signed long)adc_buff_[4];
;;;2249   temp_SL*=Kubatm[0];
;;;2250   temp_SL/=2000L;
;;;2251   bat[0]._Ubm=(signed short)temp_SL;
;;;2252   #endif
;;;2253   
;;;2254   #ifdef UKU_6U
;;;2255   temp_SL=(signed long)adc_buff_[4];
;;;2256   temp_SL*=Kubatm[0];
;;;2257   temp_SL/=2000L;
;;;2258   bat[0]._Ubm=(signed short)temp_SL;
;;;2259   #endif
;;;2260   
;;;2261   temp_SL=(signed long)adc_buff_[12];
001e5a  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2262   temp_SL*=Kubat[1];
001e5e  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
001e62  fb01f100          MUL      r1,r1,r0
;;;2263   temp_SL/=2000L;
001e66  fb91f0f8          SDIV     r0,r1,r8
;;;2264   bat[1]._Ub=(signed short)temp_SL;
001e6a  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2265   
;;;2266   #ifdef UKU_220
;;;2267   temp_SL=(signed long)adc_buff_[12];
;;;2268   temp_SL*=Kubat[1];
;;;2269   temp_SL/=400L;
;;;2270   bat[1]._Ub=(signed short)temp_SL;
;;;2271   #endif
;;;2272   
;;;2273   #ifdef UKU_220_V2
;;;2274   temp_SL=(signed long)adc_buff_[12];
;;;2275   temp_SL*=Kubat[1];
;;;2276   temp_SL/=400L;
;;;2277   bat[1]._Ub=(signed short)temp_SL;
;;;2278   #endif
;;;2279   
;;;2280   //adc_buff_[1]=300;
;;;2281   
;;;2282   temp_SL=(signed long)adc_buff_[1];
001e6e  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2283   temp_SL*=Kubatm[1];
001e72  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
001e76  fb00f001          MUL      r0,r0,r1
;;;2284   temp_SL/=700L;
001e7a  fb90f0f3          SDIV     r0,r0,r3
;;;2285   bat[1]._Ubm=(signed short)temp_SL;
001e7e  f8a40050          STRH     r0,[r4,#0x50]
;;;2286   #ifdef UKU_KONTUR
;;;2287   temp_SL=(signed long)adc_buff_[1];
;;;2288   temp_SL*=Kubatm[1];
;;;2289   temp_SL/=2000L;
;;;2290   bat[1]._Ubm=(signed short)temp_SL;
;;;2291   #endif
;;;2292   #ifdef UKU_6U
;;;2293   temp_SL=(signed long)adc_buff_[1];
;;;2294   temp_SL*=Kubatm[1];
;;;2295   temp_SL/=2000L;
;;;2296   bat[1]._Ubm=(signed short)temp_SL;
;;;2297   #endif
;;;2298   
;;;2299   #ifdef UKU_TELECORE2015
;;;2300   temp_SL=(signed long)adc_buff_[2];
;;;2301   temp_SL*=Kubat[0];
;;;2302   temp_SL/=2000L;
;;;2303   bat[0]._Ub=(signed short)temp_SL;
;;;2304   #endif
;;;2305   
;;;2306   /*
;;;2307   //Токи батарей
;;;2308   if(!mess_find_unvol(MESS2MATEMAT))
;;;2309   	{
;;;2310   	temp_SL=(signed long)ad7705_buff_[0];
;;;2311   	temp_SL-=(signed long)Kibat0[0];
;;;2312   	temp_SL*=(signed long)Kibat1[0];
;;;2313   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2314   	else temp_SL/=1000L;
;;;2315   	bat[0]._Ib=(signed short)temp_SL;
;;;2316   
;;;2317   	temp_SL=(signed long)ad7705_buff_[1];
;;;2318   	temp_SL-=(signed long)Kibat0[1];
;;;2319   	temp_SL*=(signed long)Kibat1[1];
;;;2320   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2321   	else temp_SL/=1000L;
;;;2322   	bat[1]._Ib=(signed short)temp_SL;
;;;2323   	}
;;;2324   */
;;;2325   
;;;2326   
;;;2327   //Токи батарей
;;;2328   if(!mess_find_unvol(MESS2MATEMAT))
001e82  f04f00dc          MOV      r0,#0xdc
001e86  f7fffffe          BL       mess_find_unvol
;;;2329   	{
;;;2330   	temp_SL=(signed long)ad7705_buff_[0];
;;;2331   	temp_SL-=(signed long)Kibat0[0];
;;;2332   	temp_SL*=(signed long)Kibat1[0];
;;;2333   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2334   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
001e8a  f2456c13          MOV      r12,#0x5613
001e8e  bbe8              CBNZ     r0,|L1.7948|
001e90  f8dfa18c          LDR      r10,|L1.8224|
001e94  f8ba0000          LDRH     r0,[r10,#0]           ;2330  ; ad7705_buff_
001e98  f8dfb188          LDR      r11,|L1.8228|
001e9c  f8bb1000          LDRH     r1,[r11,#0]           ;2331  ; Kibat0
001ea0  eba00001          SUB      r0,r0,r1              ;2331
001ea4  4a60              LDR      r2,|L1.8232|
001ea6  f9b21000          LDRSH    r1,[r2,#0]            ;2332  ; Kibat1
001eaa  fb01f100          MUL      r1,r1,r0              ;2332
001eae  4854              LDR      r0,|L1.8192|
001eb0  f6456338          MOV      r3,#0x5e38            ;2333
001eb4  f6456992          MOV      r9,#0x5e92            ;2333
001eb8  8800              LDRH     r0,[r0,#0]            ;2333  ; AUSW_MAIN
001eba  4298              CMP      r0,r3                 ;2333
001ebc  d001              BEQ      |L1.7874|
001ebe  4548              CMP      r0,r9                 ;2333
001ec0  d104              BNE      |L1.7884|
                  |L1.7874|
001ec2  f44f7e96          MOV      lr,#0x12c             ;2333
001ec6  fb91f1fe          SDIV     r1,r1,lr              ;2333
001eca  e00f              B        |L1.7916|
                  |L1.7884|
001ecc  f5a04ea8          SUB      lr,r0,#0x5400
001ed0  f5be7efd          SUBS     lr,lr,#0x1fa
001ed4  d003              BEQ      |L1.7902|
001ed6  4560              CMP      r0,r12
001ed8  d001              BEQ      |L1.7902|
001eda  42a8              CMP      r0,r5
001edc  d102              BNE      |L1.7908|
                  |L1.7902|
001ede  fb91f1f8          SDIV     r1,r1,r8
001ee2  e003              B        |L1.7916|
                  |L1.7908|
;;;2335   	else temp_SL/=1000L;
001ee4  f44f7e7a          MOV      lr,#0x3e8
001ee8  fb91f1fe          SDIV     r1,r1,lr
                  |L1.7916|
;;;2336   	#ifdef UKU_TELECORE2015
;;;2337   	temp_SL/=2L;
;;;2338   	//temp_SL=-temp_SL;
;;;2339   	#endif
;;;2340   	//#ifdef UKU_TELECORE2017
;;;2341   	//temp_SL/=-2L;
;;;2342   	//temp_SL=-temp_SL;
;;;2343   	//#endif
;;;2344   	bat[0]._Ib=(signed short)temp_SL;
001eec  8121              STRH     r1,[r4,#8]
;;;2345   
;;;2346   	temp_SL=(signed long)ad7705_buff_[1];
001eee  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;2347   	temp_SL-=(signed long)Kibat0[1];
001ef2  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
001ef6  eba10a0a          SUB      r10,r1,r10
;;;2348   	temp_SL*=(signed long)Kibat1[1];
001efa  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
001efe  fb01f10a          MUL      r1,r1,r10
;;;2349   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
001f02  4298              CMP      r0,r3
001f04  d001              BEQ      |L1.7946|
001f06  4548              CMP      r0,r9
001f08  d106              BNE      |L1.7960|
                  |L1.7946|
001f0a  e000              B        |L1.7950|
                  |L1.7948|
001f0c  e015              B        |L1.7994|
                  |L1.7950|
001f0e  f44f7096          MOV      r0,#0x12c
001f12  fb91f0f0          SDIV     r0,r1,r0
001f16  e00e              B        |L1.7990|
                  |L1.7960|
;;;2350   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
001f18  f5a042aa          SUB      r2,r0,#0x5500
001f1c  3afa              SUBS     r2,r2,#0xfa
001f1e  d003              BEQ      |L1.7976|
001f20  4560              CMP      r0,r12
001f22  d001              BEQ      |L1.7976|
001f24  42a8              CMP      r0,r5
001f26  d102              BNE      |L1.7982|
                  |L1.7976|
001f28  fb91f0f8          SDIV     r0,r1,r8
001f2c  e003              B        |L1.7990|
                  |L1.7982|
;;;2351   	else temp_SL/=1000L;
001f2e  f44f707a          MOV      r0,#0x3e8
001f32  fb91f0f0          SDIV     r0,r1,r0
                  |L1.7990|
;;;2352   	bat[1]._Ib=(signed short)temp_SL;
001f36  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.7994|
;;;2353   	}
;;;2354   
;;;2355   
;;;2356   
;;;2357   
;;;2358   
;;;2359   //Температуры батарей
;;;2360   
;;;2361   #ifdef UKU_KONTUR
;;;2362   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;2363   else bat[0]._nd=1;
;;;2364   temp_SL=(signed long)adc_buff_[6];
;;;2365   temp_SL*=Ktbat[0];
;;;2366   temp_SL/=20000L;
;;;2367   temp_SL-=273L;
;;;2368   bat[0]._Tb=(signed short)temp_SL;
;;;2369   #else
;;;2370   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
001f3a  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
001f3e  f6403ab7          MOV      r10,#0xbb7
001f42  4681              MOV      r9,r0
001f44  f2a03021          SUB      r0,r0,#0x321
;;;2371   else bat[0]._nd=1;
001f48  2201              MOVS     r2,#1
001f4a  2300              MOVS     r3,#0                 ;2370
001f4c  9005              STR      r0,[sp,#0x14]         ;2370
001f4e  4550              CMP      r0,r10                ;2370
001f50  d201              BCS      |L1.8022|
001f52  7323              STRB     r3,[r4,#0xc]          ;2370
001f54  e000              B        |L1.8024|
                  |L1.8022|
001f56  7322              STRB     r2,[r4,#0xc]
                  |L1.8024|
;;;2372   temp_SL=(signed long)adc_buff_[6];
;;;2373   temp_SL*=Ktbat[0];
001f58  4934              LDR      r1,|L1.8236|
001f5a  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
001f5e  fb00f009          MUL      r0,r0,r9
;;;2374   temp_SL/=20000L;
001f62  f6446e20          MOV      lr,#0x4e20
001f66  fb90f0fe          SDIV     r0,r0,lr
;;;2375   temp_SL-=273L;
001f6a  f2a01011          SUB      r0,r0,#0x111
;;;2376   bat[0]._Tb=(signed short)temp_SL;
001f6e  8160              STRH     r0,[r4,#0xa]
;;;2377   #endif
;;;2378   
;;;2379   #ifdef UKU_KONTUR
;;;2380   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;2381   else bat[1]._nd=1;
;;;2382   temp_SL=(signed long)adc_buff_[7];
;;;2383   temp_SL*=Ktbat[1];
;;;2384   temp_SL/=20000L;
;;;2385   temp_SL-=273L;
;;;2386   bat[1]._Tb=(signed short)temp_SL;
;;;2387   #else
;;;2388   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
001f70  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
001f74  f2a03b21          SUB      r11,r0,#0x321
001f78  45d3              CMP      r11,r10
001f7a  d202              BCS      |L1.8066|
001f7c  f8843058          STRB     r3,[r4,#0x58]
001f80  e001              B        |L1.8070|
                  |L1.8066|
;;;2389   else bat[1]._nd=1;
001f82  f8842058          STRB     r2,[r4,#0x58]
                  |L1.8070|
;;;2390   temp_SL=(signed long)adc_buff_[7];
;;;2391   temp_SL*=Ktbat[1];
001f86  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
001f8a  4341              MULS     r1,r0,r1
;;;2392   temp_SL/=20000L;
001f8c  f6446020          MOV      r0,#0x4e20
001f90  fb91f0f0          SDIV     r0,r1,r0
;;;2393   temp_SL-=273L;
001f94  f2a01011          SUB      r0,r0,#0x111
;;;2394   bat[1]._Tb=(signed short)temp_SL;
001f98  490b              LDR      r1,|L1.8136|
001f9a  f8a10056          STRH     r0,[r1,#0x56]
;;;2395   #endif
;;;2396   
;;;2397   #ifdef UKU_6U
;;;2398   
;;;2399   if(NUMMAKB==2)
;;;2400   	{
;;;2401   	if(makb[0]._cnt<5)
;;;2402   		{
;;;2403   		if(makb[0]._T_nd[0]==0)
;;;2404   			{
;;;2405   			bat[0]._Tb=makb[0]._T[0];
;;;2406   			bat[0]._nd=0;
;;;2407   			}
;;;2408   		}
;;;2409   
;;;2410   	if(makb[1]._cnt<5)
;;;2411   		{
;;;2412   		if(makb[1]._T_nd[0]==0)
;;;2413   			{
;;;2414   			bat[1]._Tb=makb[1]._T[0];
;;;2415   			bat[1]._nd=0;
;;;2416   			}
;;;2417   		}
;;;2418   
;;;2419   	}
;;;2420   else if(NUMMAKB==4)
;;;2421   	{
;;;2422   	signed short temp_t;
;;;2423   	temp_t=-20;
;;;2424   	if(makb[0]._cnt<5)
;;;2425   		{
;;;2426   		if(makb[0]._T_nd[0]==0)
;;;2427   			{
;;;2428   			temp_t=makb[0]._T[0];
;;;2429   			bat[0]._nd=0;
;;;2430   			}
;;;2431   		}
;;;2432   	if(makb[1]._cnt<5)
;;;2433   		{
;;;2434   		if(makb[1]._T_nd[0]==0)
;;;2435   			{
;;;2436   			if(temp_t<makb[1]._T[0])
;;;2437   				{
;;;2438   				bat[0]._nd=0;
;;;2439   				temp_t=makb[1]._T[0];
;;;2440   				}
;;;2441   			}
;;;2442   		}
;;;2443   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;2444   
;;;2445    	temp_t=-20;
;;;2446   	if(makb[2]._cnt<5)
;;;2447   		{
;;;2448   		if(makb[2]._T_nd[0]==0)
;;;2449   			{
;;;2450   			temp_t=makb[2]._T[0];
;;;2451   			bat[1]._nd=0;
;;;2452   			}
;;;2453   		}
;;;2454   	if(makb[3]._cnt<5)
;;;2455   		{
;;;2456   		if(makb[3]._T_nd[0]==0)
;;;2457   			{
;;;2458   			if(temp_t<makb[3]._T[0])
;;;2459   				{
;;;2460   				bat[1]._nd=0;
;;;2461   				temp_t=makb[3]._T[0];
;;;2462   				}
;;;2463   			}
;;;2464   		}
;;;2465   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;2466   	}
;;;2467   
;;;2468   #endif
;;;2469   
;;;2470   
;;;2471   //Напряжение нагрузки
;;;2472   temp_SL=(signed long)adc_buff_[2];
001f9e  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;2473   temp_SL*=Kuload;
001fa2  4823              LDR      r0,|L1.8240|
001fa4  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
001fa8  fb01f000          MUL      r0,r1,r0
;;;2474   temp_SL/=2000L;
001fac  f44f64fa          MOV      r4,#0x7d0
001fb0  fb90f0f4          SDIV     r0,r0,r4
;;;2475   load_U=(signed short)temp_SL;
001fb4  4c1f              LDR      r4,|L1.8244|
001fb6  8020              STRH     r0,[r4,#0]
;;;2476   
;;;2477   #ifdef UKU_220 
;;;2478   //Напряжение нагрузки
;;;2479   temp_SL=(signed long)adc_buff_[2];
;;;2480   temp_SL*=Kuload;
;;;2481   temp_SL/=350L;
;;;2482   load_U=(signed short)temp_SL;
;;;2483   #endif
;;;2484   
;;;2485   #ifdef UKU_220_V2 
;;;2486   //Напряжение нагрузки
;;;2487   temp_SL=(signed long)adc_buff_[2];
;;;2488   temp_SL*=Kuload;
;;;2489   temp_SL/=350L;
;;;2490   load_U=(signed short)temp_SL;
;;;2491   #endif
;;;2492   
;;;2493   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2494   //Напряжение шины
;;;2495   temp_SL=(signed long)adc_buff_[1];
001fb8  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;2496   temp_SL*=Kuout;
001fbc  481e              LDR      r0,|L1.8248|
001fbe  e03d              B        |L1.8252|
                  |L1.8128|
                          DCD      bat_ips
                  |L1.8132|
                          DCD      bat_u_old_cnt
                  |L1.8136|
                          DCD      bat
                  |L1.8140|
                          DCD      net_U
                  |L1.8144|
                          DCD      UMN
                  |L1.8148|
                          DCD      unet_drv_cnt
                  |L1.8152|
                          DCD      net_Ustore
                  |L1.8156|
                          DCD      main_1Hz_cnt
                  |L1.8160|
                          DCD      bps
                  |L1.8164|
                          DCD      KunetA
                  |L1.8168|
                          DCD      net_Ua
                  |L1.8172|
                          DCD      KunetB
                  |L1.8176|
                          DCD      KunetC
                  |L1.8180|
                          DCD      net_Ub
                  |L1.8184|
                          DCD      net_Uc
                  |L1.8188|
                          DCD      ||area_number.25||
                  |L1.8192|
                          DCD      AUSW_MAIN
                  |L1.8196|
                          DCD      ||.bss||+0x40c
                  |L1.8200|
                          DCD      bps+0x3fa
                  |L1.8204|
                          DCD      net_F3
                  |L1.8208|
                          DCD      Kunet
                  |L1.8212|
                          DCD      net_F
                  |L1.8216|
                          DCD      Kubat
                  |L1.8220|
                          DCD      Kubatm
                  |L1.8224|
                          DCD      ad7705_buff_
                  |L1.8228|
                          DCD      Kibat0
                  |L1.8232|
                          DCD      Kibat1
                  |L1.8236|
                          DCD      Ktbat
                  |L1.8240|
                          DCD      Kuload
                  |L1.8244|
                          DCD      load_U
                  |L1.8248|
                          DCD      Kuout
                  |L1.8252|
00203c  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002040  fb08f800          MUL      r8,r8,r0
;;;2497   if(AUSW_MAIN==22010)temp_SL/=400L;
002044  48fa              LDR      r0,|L1.9264|
002046  f24554fa          MOV      r4,#0x55fa
00204a  f44f7bc8          MOV      r11,#0x190
00204e  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002050  42a0              CMP      r0,r4
002052  d102              BNE      |L1.8282|
002054  fb98f8fb          SDIV     r8,r8,r11
002058  e003              B        |L1.8290|
                  |L1.8282|
;;;2498   else temp_SL/=500L;
00205a  f44f7efa          MOV      lr,#0x1f4
00205e  fb98f8fe          SDIV     r8,r8,lr
                  |L1.8290|
;;;2499   out_U=(signed short)temp_SL;
002062  f8dfe3d0          LDR      lr,|L1.9268|
002066  fa0ff888          SXTH     r8,r8
00206a  f8ae8000          STRH     r8,[lr,#0]
;;;2500   load_U=out_U;
00206e  f8dfe3c8          LDR      lr,|L1.9272|
002072  f8ae8000          STRH     r8,[lr,#0]
;;;2501   
;;;2502   //Напряжение выпрямителей
;;;2503   temp_SL=(signed long)adc_buff_[2];
;;;2504   temp_SL*=Kubps;
002076  4ff1              LDR      r7,|L1.9276|
002078  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
00207c  fb01f107          MUL      r1,r1,r7
;;;2505   if(AUSW_MAIN==22010)temp_SL/=400L;
002080  d102              BNE      |L1.8328|
002082  fb91f1fb          SDIV     r1,r1,r11
002086  e003              B        |L1.8336|
                  |L1.8328|
;;;2506   else temp_SL/=500L;
002088  f44f74fa          MOV      r4,#0x1f4
00208c  fb91f1f4          SDIV     r1,r1,r4
                  |L1.8336|
;;;2507   bps_U=(signed short)temp_SL;
002090  4ceb              LDR      r4,|L1.9280|
002092  b209              SXTH     r1,r1
002094  8021              STRH     r1,[r4,#0]
;;;2508   
;;;2509   if(bps_U<100)
002096  2964              CMP      r1,#0x64
002098  da19              BGE      |L1.8398|
;;;2510   	{
;;;2511   	char i;
;;;2512   	for(i=0;i<NUMIST;i++)
00209a  f04f0100          MOV      r1,#0
00209e  46a6              MOV      lr,r4                 ;2507
0020a0  4ce8              LDR      r4,|L1.9284|
0020a2  f9b4b000          LDRSH    r11,[r4,#0]
0020a6  e010              B        |L1.8394|
                  |L1.8360|
;;;2513   		{
;;;2514   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
0020a8  ebc104c1          RSB      r4,r1,r1,LSL #3
0020ac  eb041701          ADD      r7,r4,r1,LSL #4
0020b0  4ce5              LDR      r4,|L1.9288|
0020b2  eb040487          ADD      r4,r4,r7,LSL #2
0020b6  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
0020ba  6a24              LDR      r4,[r4,#0x20]
0020bc  42bc              CMP      r4,r7
0020be  dd01              BLE      |L1.8388|
0020c0  f8ae4000          STRH     r4,[lr,#0]
                  |L1.8388|
0020c4  f1010101          ADD      r1,r1,#1              ;2512
0020c8  b2c9              UXTB     r1,r1                 ;2512
                  |L1.8394|
0020ca  4559              CMP      r1,r11                ;2512
0020cc  dbec              BLT      |L1.8360|
                  |L1.8398|
;;;2515   		}
;;;2516   	}
;;;2517   
;;;2518   //Суммарный ток выпрямителей
;;;2519   temp_SL=0;
0020ce  f04f0b00          MOV      r11,#0
;;;2520   for (i=0;i<NUMIST;i++)
0020d2  4659              MOV      r1,r11
0020d4  4cdb              LDR      r4,|L1.9284|
0020d6  f9b47000          LDRSH    r7,[r4,#0]            ;2512
0020da  4cdb              LDR      r4,|L1.9288|
0020dc  e00b              B        |L1.8438|
                  |L1.8414|
;;;2521   	{
;;;2522   	temp_SL+=((signed long)bps[i]._Ii);
0020de  ebc10ec1          RSB      lr,r1,r1,LSL #3
0020e2  eb0e1e01          ADD      lr,lr,r1,LSL #4
0020e6  eb040e8e          ADD      lr,r4,lr,LSL #2
0020ea  f8dee024          LDR      lr,[lr,#0x24]
0020ee  44f3              ADD      r11,r11,lr
0020f0  f1010101          ADD      r1,r1,#1              ;2520
0020f4  b2c9              UXTB     r1,r1                 ;2520
                  |L1.8438|
0020f6  42b9              CMP      r1,r7                 ;2520
0020f8  dbf1              BLT      |L1.8414|
;;;2523   	}
;;;2524   bps_I=(signed short)temp_SL;
0020fa  49d4              LDR      r1,|L1.9292|
0020fc  f8a1b000          STRH     r11,[r1,#0]
;;;2525   
;;;2526   
;;;2527   #endif
;;;2528   
;;;2529   
;;;2530   #ifdef UKU_KONTUR
;;;2531   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;2532   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;2533   else ND_EXT[0]=1;
;;;2534   temp_SL=(signed long)adc_buff_[5];
;;;2535   temp_SL*=Ktext[0];
;;;2536   temp_SL/=20000L;
;;;2537   temp_SL-=273L;
;;;2538   t_ext[0]=(signed short)temp_SL;
;;;2539   #else 
;;;2540   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;2541   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002100  49d3              LDR      r1,|L1.9296|
002102  f6403ab7          MOV      r10,#0xbb7
002106  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
00210a  49d2              LDR      r1,|L1.9300|
00210c  f2ab3e21          SUB      lr,r11,#0x321
002110  f8cde010          STR      lr,[sp,#0x10]
002114  45d6              CMP      lr,r10
002116  d201              BCS      |L1.8476|
002118  700b              STRB     r3,[r1,#0]
00211a  e000              B        |L1.8478|
                  |L1.8476|
;;;2542   else ND_EXT[0]=1;
00211c  700a              STRB     r2,[r1,#0]
                  |L1.8478|
;;;2543   temp_SL=(signed long)adc_buff_[5];
;;;2544   temp_SL*=Ktext[0];
00211e  f8dfa338          LDR      r10,|L1.9304|
002122  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
002126  f8cda00c          STR      r10,[sp,#0xc]
00212a  fb0afa0b          MUL      r10,r10,r11
;;;2545   temp_SL/=20000L;
00212e  f6446e20          MOV      lr,#0x4e20
002132  fb9afafe          SDIV     r10,r10,lr
;;;2546   temp_SL-=273L;
002136  f2aa1a11          SUB      r10,r10,#0x111
;;;2547   t_ext[0]=(signed short)temp_SL;
00213a  f8dfe320          LDR      lr,|L1.9308|
00213e  f8aea000          STRH     r10,[lr,#0]
;;;2548   /*
;;;2549   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2550   else ND_EXT[1]=1;
;;;2551   temp_SL=(signed long)adc_buff_[6];
;;;2552   temp_SL*=Ktext[1];
;;;2553   temp_SL/=20000L;
;;;2554   temp_SL-=273L;
;;;2555   t_ext[1]=(signed short)temp_SL;	*/
;;;2556   #endif
;;;2557   
;;;2558   #ifdef UKU_220
;;;2559   
;;;2560   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2561   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;2562   else ND_EXT[1]=1;
;;;2563   temp_SL=(signed long)adc_buff_[3];
;;;2564   temp_SL*=Ktext[1];
;;;2565   temp_SL/=20000L;
;;;2566   temp_SL-=273L;
;;;2567   t_ext[1]=(signed short)temp_SL;
;;;2568   
;;;2569   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2570   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;2571   else ND_EXT[2]=1;
;;;2572   temp_SL=(signed long)adc_buff_[10];
;;;2573   temp_SL*=Ktext[2];
;;;2574   temp_SL/=20000L;
;;;2575   temp_SL-=273L;
;;;2576   t_ext[2]=(signed short)temp_SL;
;;;2577   
;;;2578   #else
;;;2579   
;;;2580   
;;;2581   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2582   
;;;2583   //Внешний датчик температуры 
;;;2584   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002142  f8dda014          LDR      r10,[sp,#0x14]
002146  f6403eb7          MOV      lr,#0xbb7
00214a  45f2              CMP      r10,lr
00214c  d201              BCS      |L1.8530|
00214e  700b              STRB     r3,[r1,#0]
002150  e000              B        |L1.8532|
                  |L1.8530|
;;;2585   else ND_EXT[0]=1;
002152  700a              STRB     r2,[r1,#0]
                  |L1.8532|
;;;2586   temp_SL=(signed long)adc_buff_[6];
;;;2587   temp_SL*=Ktext[0];
002154  f8dda00c          LDR      r10,[sp,#0xc]
002158  fb0afa09          MUL      r10,r10,r9
;;;2588   temp_SL/=20000L;
00215c  f6446920          MOV      r9,#0x4e20
002160  fb9af9f9          SDIV     r9,r10,r9
;;;2589   temp_SL-=273L;
002164  f2a91911          SUB      r9,r9,#0x111
;;;2590   t_ext[0]=(signed short)temp_SL;
002168  f8dfe2f0          LDR      lr,|L1.9308|
00216c  f8ae9000          STRH     r9,[lr,#0]
;;;2591   
;;;2592   //Внешний датчик температуры №2
;;;2593   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002170  f8dd9010          LDR      r9,[sp,#0x10]
002174  f6403ab7          MOV      r10,#0xbb7
002178  45d1              CMP      r9,r10
00217a  d201              BCS      |L1.8576|
00217c  704b              STRB     r3,[r1,#1]
00217e  e000              B        |L1.8578|
                  |L1.8576|
;;;2594   else ND_EXT[1]=1;
002180  704a              STRB     r2,[r1,#1]
                  |L1.8578|
;;;2595   temp_SL=(signed long)adc_buff_[5];
;;;2596   temp_SL*=Ktext[1];
002182  4ab5              LDR      r2,|L1.9304|
002184  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
002188  fb02f20b          MUL      r2,r2,r11
;;;2597   temp_SL/=20000L;
00218c  f6446920          MOV      r9,#0x4e20
002190  fb92f2f9          SDIV     r2,r2,r9
;;;2598   temp_SL-=273L;
002194  f2a21211          SUB      r2,r2,#0x111
;;;2599   t_ext[1]=(signed short)temp_SL;
002198  fa0ffa82          SXTH     r10,r2
00219c  4aaf              LDR      r2,|L1.9308|
00219e  f8a2a002          STRH     r10,[r2,#2]
;;;2600   #else
;;;2601   
;;;2602   
;;;2603   
;;;2604   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2605   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2606   else ND_EXT[1]=1;
;;;2607   temp_SL=(signed long)adc_buff_[6];
;;;2608   temp_SL*=Ktext[1];
;;;2609   temp_SL/=20000L;
;;;2610   temp_SL-=273L;
;;;2611   t_ext[1]=(signed short)temp_SL;
;;;2612   
;;;2613   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2614   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;2615   else ND_EXT[2]=1;
;;;2616   temp_SL=(signed long)adc_buff_[3];
;;;2617   temp_SL*=Ktext[2];
;;;2618   temp_SL/=20000L;
;;;2619   temp_SL-=273L;
;;;2620   t_ext[2]=(signed short)temp_SL;
;;;2621   
;;;2622   #endif
;;;2623   #endif
;;;2624   
;;;2625   #ifdef UKU_220_V2
;;;2626   
;;;2627   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2628   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;2629   else ND_EXT[1]=1;
;;;2630   temp_SL=(signed long)adc_buff_[3];
;;;2631   temp_SL*=Ktext[1];
;;;2632   temp_SL/=20000L;
;;;2633   temp_SL-=273L;
;;;2634   t_ext[1]=(signed short)temp_SL;
;;;2635   
;;;2636   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2637   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;2638   else ND_EXT[2]=1;
;;;2639   temp_SL=(signed long)adc_buff_[10];
;;;2640   temp_SL*=Ktext[2];
;;;2641   temp_SL/=20000L;
;;;2642   temp_SL-=273L;
;;;2643   t_ext[2]=(signed short)temp_SL;
;;;2644   
;;;2645   #else
;;;2646   
;;;2647   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2648   //Ток батареи
;;;2649   if(bps[8]._device==dIBAT_METR)
0021a2  f89422e0          LDRB     r2,[r4,#0x2e0]  ; bps
;;;2650   	{
;;;2651   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;2652   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;2653   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;2654   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;2655   	if(!bIBAT_SMKLBR)
;;;2656   		{
;;;2657   		signed long temp_SL;
;;;2658   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;2659   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;2660   		temp_SL*=(signed long)Kibat1[0];
;;;2661   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;2662   	
;;;2663   		Ib_ips_termokompensat =(signed short)temp_SL;
0021a6  f8df92b8          LDR      r9,|L1.9312|
0021aa  2a09              CMP      r2,#9                 ;2649
0021ac  d15f              BNE      |L1.8814|
0021ae  f89422e6          LDRB     r2,[r4,#0x2e6]        ;2651  ; bps
0021b2  f894b2e7          LDRB     r11,[r4,#0x2e7]       ;2651  ; bps
0021b6  f8dfe2ac          LDR      lr,|L1.9316|
0021ba  eb02220b          ADD      r2,r2,r11,LSL #8      ;2651
0021be  f8ce2000          STR      r2,[lr,#0]            ;2651  ; ibat_metr_buff_
0021c2  9202              STR      r2,[sp,#8]            ;2651
0021c4  f89422e8          LDRB     r2,[r4,#0x2e8]        ;2652  ; bps
0021c8  f894b2e9          LDRB     r11,[r4,#0x2e9]       ;2652  ; bps
0021cc  eb02220b          ADD      r2,r2,r11,LSL #8      ;2652
0021d0  f8ce2004          STR      r2,[lr,#4]            ;2652  ; ibat_metr_buff_
0021d4  f894b2ea          LDRB     r11,[r4,#0x2ea]       ;2653  ; bps
0021d8  f894e2eb          LDRB     lr,[r4,#0x2eb]        ;2653  ; bps
0021dc  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2653
0021e0  f8dfe284          LDR      lr,|L1.9320|
0021e4  fa0ffb8b          SXTH     r11,r11               ;2653
0021e8  f8aeb000          STRH     r11,[lr,#0]           ;2653
0021ec  f1bb0f00          CMP      r11,#0                ;2654
0021f0  d005              BEQ      |L1.8702|
0021f2  f8dfb278          LDR      r11,|L1.9324|
0021f6  f04f0e32          MOV      lr,#0x32              ;2654
0021fa  f8abe000          STRH     lr,[r11,#0]           ;2654
                  |L1.8702|
0021fe  d136              BNE      |L1.8814|
002200  f8ddb008          LDR      r11,[sp,#8]           ;2658
002204  ebab0b02          SUB      r11,r11,r2            ;2659
002208  4a99              LDR      r2,|L1.9328|
00220a  f9b22000          LDRSH    r2,[r2,#0]            ;2660  ; Kibat1
00220e  fb02f20b          MUL      r2,r2,r11             ;2660
002212  f5a04ba8          SUB      r11,r0,#0x5400        ;2661
002216  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;2661
00221a  d00f              BEQ      |L1.8764|
00221c  f1bb0b01          SUBS     r11,r11,#1            ;2661
002220  d00c              BEQ      |L1.8764|
002222  4560              CMP      r0,r12                ;2661
002224  d00a              BEQ      |L1.8764|
002226  42a8              CMP      r0,r5                 ;2661
002228  d008              BEQ      |L1.8764|
00222a  f1bb0534          SUBS     r5,r11,#0x34          ;2661
00222e  d005              BEQ      |L1.8764|
002230  3528              ADDS     r5,r5,#0x28           ;2661
002232  d003              BEQ      |L1.8764|
002234  3d14              SUBS     r5,r5,#0x14           ;2661
002236  d001              BEQ      |L1.8764|
002238  1e6d              SUBS     r5,r5,#1              ;2661
00223a  d103              BNE      |L1.8772|
                  |L1.8764|
00223c  f44f65fa          MOV      r5,#0x7d0             ;2661
002240  fb92f2f5          SDIV     r2,r2,r5              ;2661
                  |L1.8772|
002244  b215              SXTH     r5,r2
002246  f8a95000          STRH     r5,[r9,#0]
;;;2664   		if(bIBAT_SMKLBR_cnt)
00224a  f8dfc220          LDR      r12,|L1.9324|
;;;2665   			{
;;;2666   			bIBAT_SMKLBR_cnt--;
;;;2667   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
00224e  f8dfb224          LDR      r11,|L1.9332|
002252  f9bc2000          LDRSH    r2,[r12,#0]           ;2664  ; bIBAT_SMKLBR_cnt
002256  b142              CBZ      r2,|L1.8810|
002258  f1a20201          SUB      r2,r2,#1              ;2666
00225c  f8ac2000          STRH     r2,[r12,#0]           ;2666
002260  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
002264  f8a92000          STRH     r2,[r9,#0]
002268  e001              B        |L1.8814|
                  |L1.8810|
;;;2668   			}
;;;2669   		else 
;;;2670   			{
;;;2671   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
00226a  f8ab5000          STRH     r5,[r11,#0]
                  |L1.8814|
;;;2672   			}
;;;2673   		}
;;;2674   	}
;;;2675   
;;;2676   bat[0]._Ub=load_U;
00226e  4a82              LDR      r2,|L1.9336|
002270  f8a28002          STRH     r8,[r2,#2]
002274  f8cd8004          STR      r8,[sp,#4]
;;;2677   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
002278  f5a045ac          SUB      r5,r0,#0x5600
00227c  3d02              SUBS     r5,#2
00227e  d103              BNE      |L1.8840|
002280  8910              LDRH     r0,[r2,#8]  ; bat
002282  f8a90000          STRH     r0,[r9,#0]
002286  e002              B        |L1.8846|
                  |L1.8840|
;;;2678   else bat[0]._Ib=Ib_ips_termokompensat;
002288  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
00228c  8110              STRH     r0,[r2,#8]
                  |L1.8846|
;;;2679   
;;;2680   #endif
;;;2681   #endif
;;;2682   
;;;2683   
;;;2684   #ifdef UKU_TELECORE2015
;;;2685   
;;;2686   //Внешний датчик температуры №1
;;;2687   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;2688   else ND_EXT[0]=1;
;;;2689   temp_SL=(signed long)adc_buff_[7];
;;;2690   temp_SL*=Ktext[0];
;;;2691   temp_SL/=20000L;
;;;2692   temp_SL-=273L;
;;;2693   t_ext[0]=(signed short)temp_SL;
;;;2694   
;;;2695   
;;;2696   //Внешний датчик температуры №2
;;;2697   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2698   else ND_EXT[1]=1;
;;;2699   temp_SL=(signed long)adc_buff_[6];
;;;2700   temp_SL*=Ktext[1];
;;;2701   temp_SL/=20000L;
;;;2702   temp_SL-=273L;
;;;2703   t_ext[1]=(signed short)temp_SL;
;;;2704   
;;;2705   #endif
;;;2706   
;;;2707   #ifdef UKU_TELECORE2017
;;;2708   
;;;2709   //Внешний датчик температуры №1
;;;2710   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;2711   else ND_EXT[0]=1;
;;;2712   temp_SL=(signed long)adc_buff_[7];
;;;2713   temp_SL*=Ktext[0];
;;;2714   temp_SL/=20000L;
;;;2715   temp_SL-=273L;
;;;2716   t_ext[0]=(signed short)temp_SL;
;;;2717   
;;;2718   
;;;2719   //Внешний датчик температуры №2
;;;2720   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2721   else ND_EXT[1]=1;
;;;2722   temp_SL=(signed long)adc_buff_[6];
;;;2723   temp_SL*=Ktext[1];
;;;2724   temp_SL/=20000L;
;;;2725   temp_SL-=273L;
;;;2726   t_ext[1]=(signed short)temp_SL;
;;;2727   
;;;2728   #endif
;;;2729   
;;;2730   //напряжение ввода
;;;2731   temp_SL=(signed long)adc_buff_ext_[0];
00228e  f8dfc1ec          LDR      r12,|L1.9340|
002292  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;2732   temp_SL*=Kunet_ext[0];
002296  f8df81e8          LDR      r8,|L1.9344|
00229a  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
00229e  4368              MULS     r0,r5,r0
;;;2733   temp_SL/=4000L;
0022a0  f44f6b7a          MOV      r11,#0xfa0
0022a4  fb90f0fb          SDIV     r0,r0,r11
;;;2734   Uvv[0]=(signed short)temp_SL;
0022a8  4d76              LDR      r5,|L1.9348|
0022aa  b280              UXTH     r0,r0
0022ac  8028              STRH     r0,[r5,#0]
;;;2735   if(Uvv[0]<100) Uvv0=Uvv[0];
0022ae  f8dfe1d8          LDR      lr,|L1.9352|
0022b2  2864              CMP      r0,#0x64
0022b4  d202              BCS      |L1.8892|
0022b6  f8ae0000          STRH     r0,[lr,#0]
0022ba  e003              B        |L1.8900|
                  |L1.8892|
;;;2736   else Uvv0=net_U;
0022bc  4873              LDR      r0,|L1.9356|
0022be  8800              LDRH     r0,[r0,#0]  ; net_U
0022c0  f8ae0000          STRH     r0,[lr,#0]
                  |L1.8900|
;;;2737   
;;;2738   //напряжение пэс
;;;2739   temp_SL=(signed long)adc_buff_ext_[1];
0022c4  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;2740   temp_SL*=Kunet_ext[1];
0022c8  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
0022cc  fb00f00c          MUL      r0,r0,r12
;;;2741   temp_SL/=4000L;
0022d0  fb90f0fb          SDIV     r0,r0,r11
;;;2742   Uvv[1]=(signed short)temp_SL;
0022d4  8068              STRH     r0,[r5,#2]
;;;2743   
;;;2744   
;;;2745   //напряжение ввода трехфазное
;;;2746   temp_SL=(signed long)eb2_data_short[0];
0022d6  4d6e              LDR      r5,|L1.9360|
0022d8  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;2747   temp_SL*=Kvv_eb2[0];
0022dc  f8dfc1b4          LDR      r12,|L1.9364|
0022e0  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
0022e4  fb08f800          MUL      r8,r8,r0
;;;2748   temp_SL/=6000L;
0022e8  f2417070          MOV      r0,#0x1770
0022ec  fb98fbf0          SDIV     r11,r8,r0
;;;2749   Uvv_eb2[0]=(signed short)temp_SL;
0022f0  f8df81a4          LDR      r8,|L1.9368|
0022f4  f8a8b000          STRH     r11,[r8,#0]
;;;2750   
;;;2751   temp_SL=(signed long)eb2_data_short[1];
0022f8  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;2752   temp_SL*=Kvv_eb2[1];
0022fc  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
002300  fb0efe0b          MUL      lr,lr,r11
;;;2753   temp_SL/=6000L;
002304  fb9efbf0          SDIV     r11,lr,r0
;;;2754   Uvv_eb2[1]=(signed short)temp_SL;
002308  f8a8b002          STRH     r11,[r8,#2]
;;;2755   
;;;2756   temp_SL=(signed long)eb2_data_short[2];
00230c  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;2757   temp_SL*=Kvv_eb2[2];
002310  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
002314  fb0cfc0b          MUL      r12,r12,r11
;;;2758   temp_SL/=6000L;
002318  fb9cfcf0          SDIV     r12,r12,r0
;;;2759   Uvv_eb2[2]=(signed short)temp_SL;
00231c  f8a8c004          STRH     r12,[r8,#4]
;;;2760   
;;;2761   //напряжение пэс трехфазное
;;;2762   temp_SL=(signed long)eb2_data_short[3];
002320  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;2763   temp_SL*=Kpes_eb2[0];
002324  f8dfc174          LDR      r12,|L1.9372|
002328  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
00232c  fb08f80b          MUL      r8,r8,r11
;;;2764   temp_SL/=6000L;
002330  fb98fbf0          SDIV     r11,r8,r0
;;;2765   Upes_eb2[0]=(signed short)temp_SL;
002334  f8df8168          LDR      r8,|L1.9376|
002338  f8a8b000          STRH     r11,[r8,#0]
;;;2766   
;;;2767   temp_SL=(signed long)eb2_data_short[4];
00233c  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;2768   temp_SL*=Kpes_eb2[1];
002340  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
002344  fb0efe0b          MUL      lr,lr,r11
;;;2769   temp_SL/=6000L;
002348  fb9efbf0          SDIV     r11,lr,r0
;;;2770   Upes_eb2[1]=(signed short)temp_SL;
00234c  f8a8b002          STRH     r11,[r8,#2]
;;;2771   
;;;2772   temp_SL=(signed long)eb2_data_short[5];
002350  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;2773   temp_SL*=Kpes_eb2[2];
002354  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
002358  fb05f50b          MUL      r5,r5,r11
;;;2774   temp_SL/=6000L;
00235c  fb95f0f0          SDIV     r0,r5,r0
;;;2775   Upes_eb2[2]=(signed short)temp_SL;
002360  f8a80004          STRH     r0,[r8,#4]
;;;2776   
;;;2777   //Вычисление температуры шкафа
;;;2778   
;;;2779   ibt._T[0]=t_ext[1]+273;
002364  f20a1a11          ADD      r10,r10,#0x111
002368  fa0ffc8a          SXTH     r12,r10
00236c  f8dfa134          LDR      r10,|L1.9380|
002370  483a              LDR      r0,|L1.9308|
002372  f8aac000          STRH     r12,[r10,#0]
;;;2780   ibt._T[1]=t_ext[2]+273;
002376  8880              LDRH     r0,[r0,#4]  ; t_ext
002378  f2001011          ADD      r0,r0,#0x111
00237c  fa0ff880          SXTH     r8,r0
002380  f8aa8002          STRH     r8,[r10,#2]
;;;2781   
;;;2782   ibt._nd[0]=ND_EXT[1];
002384  784d              LDRB     r5,[r1,#1]  ; ND_EXT
002386  f88a5008          STRB     r5,[r10,#8]
;;;2783   ibt._nd[1]=ND_EXT[2];
00238a  7888              LDRB     r0,[r1,#2]  ; ND_EXT
00238c  f88a0009          STRB     r0,[r10,#9]
;;;2784   
;;;2785   #ifndef UKU_TELECORE2015
;;;2786   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;2787   	{
;;;2788   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
002390  4945              LDR      r1,|L1.9384|
002392  b905              CBNZ     r5,|L1.9110|
002394  b110              CBZ      r0,|L1.9116|
                  |L1.9110|
;;;2789   	}
;;;2790   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
002396  2d01              CMP      r5,#1
002398  d00a              BEQ      |L1.9136|
00239a  e00a              B        |L1.9138|
                  |L1.9116|
00239c  eb0c0008          ADD      r0,r12,r8             ;2788
0023a0  eb0075d0          ADD      r5,r0,r0,LSR #31      ;2788
0023a4  f46f7088          MVN      r0,#0x110             ;2788
0023a8  eb000065          ADD      r0,r0,r5,ASR #1       ;2788
0023ac  8008              STRH     r0,[r1,#0]            ;2788
0023ae  e01e              B        |L1.9198|
                  |L1.9136|
0023b0  b108              CBZ      r0,|L1.9142|
                  |L1.9138|
;;;2791   	{
;;;2792   	t_box=ibt._T[1]-273;
;;;2793   	}
;;;2794   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
0023b2  b12d              CBZ      r5,|L1.9152|
0023b4  e006              B        |L1.9156|
                  |L1.9142|
0023b6  f2a81811          SUB      r8,r8,#0x111          ;2792
0023ba  f8a18000          STRH     r8,[r1,#0]            ;2792
0023be  e016              B        |L1.9198|
                  |L1.9152|
0023c0  2801              CMP      r0,#1
0023c2  d002              BEQ      |L1.9162|
                  |L1.9156|
;;;2795   	{
;;;2796   	t_box=ibt._T[0]-273;
;;;2797   	}
;;;2798   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
0023c4  2d01              CMP      r5,#1
0023c6  d005              BEQ      |L1.9172|
0023c8  e011              B        |L1.9198|
                  |L1.9162|
0023ca  f2ac1c11          SUB      r12,r12,#0x111        ;2796
0023ce  f8a1c000          STRH     r12,[r1,#0]           ;2796
0023d2  e00c              B        |L1.9198|
                  |L1.9172|
0023d4  2801              CMP      r0,#1
0023d6  d10a              BNE      |L1.9198|
;;;2799   	{
;;;2800   	if(t_ext_can_nd<5)t_box= t_ext_can;
0023d8  4834              LDR      r0,|L1.9388|
0023da  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
0023dc  2805              CMP      r0,#5
0023de  d203              BCS      |L1.9192|
0023e0  4833              LDR      r0,|L1.9392|
0023e2  8800              LDRH     r0,[r0,#0]  ; t_ext_can
0023e4  8008              STRH     r0,[r1,#0]
0023e6  e002              B        |L1.9198|
                  |L1.9192|
;;;2801   	else t_box=20;
0023e8  f04f0014          MOV      r0,#0x14
0023ec  8008              STRH     r0,[r1,#0]
                  |L1.9198|
;;;2802   	}
;;;2803   #endif
;;;2804   /*
;;;2805   //Вычисление температуры шкафа
;;;2806   
;;;2807   ibt._T[0]=bat[0]._Tb+273;
;;;2808   ibt._T[1]=bat[1]._Tb+273;
;;;2809   ibt._T[2]=t_ext[1]+273;
;;;2810   ibt._T[3]=t_ext[2]+273;
;;;2811   
;;;2812   ibt._nd[0]=bat[0]._nd;
;;;2813   ibt._nd[1]=bat[1]._nd;
;;;2814   ibt._nd[2]=ND_EXT[1];
;;;2815   ibt._nd[3]=ND_EXT[2];
;;;2816   
;;;2817   ibt._avg1=0;
;;;2818   ibt._avg_cnt=4;
;;;2819   
;;;2820   if(ibt._nd[0]==0)
;;;2821   	{
;;;2822   	ibt._avg1+=ibt._T[0];
;;;2823   	}
;;;2824   else 
;;;2825   	{
;;;2826   	ibt._avg_cnt--;
;;;2827   	}
;;;2828   
;;;2829   if(ibt._nd[1]==0)
;;;2830   	{
;;;2831   	ibt._avg1+=ibt._T[1];
;;;2832   	}
;;;2833   else 
;;;2834   	{
;;;2835   	ibt._avg_cnt--;
;;;2836   	}
;;;2837   
;;;2838   if(ibt._nd[2]==0)
;;;2839   	{
;;;2840   	ibt._avg1+=ibt._T[2];
;;;2841   	}
;;;2842   else 
;;;2843   	{
;;;2844   	ibt._avg_cnt--;
;;;2845   	}
;;;2846   
;;;2847   if(ibt._nd[3]==0)
;;;2848   	{
;;;2849   	ibt._avg1+=ibt._T[3];
;;;2850   	}
;;;2851   else 
;;;2852   	{
;;;2853   	ibt._avg_cnt--;
;;;2854   	}
;;;2855   
;;;2856   if(ibt._avg_cnt==0)
;;;2857   	{
;;;2858   	}
;;;2859   else
;;;2860   	{
;;;2861   	ibt._avg1/=ibt._avg_cnt;
;;;2862   	}
;;;2863   
;;;2864   
;;;2865   if(ibt._nd[0]!=0)
;;;2866   	{
;;;2867   	ibt._T_dispers[0]=0;
;;;2868   	}
;;;2869   else 
;;;2870   	{
;;;2871   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;2872   	}
;;;2873   
;;;2874   if(ibt._nd[1]!=0)
;;;2875   	{
;;;2876   	ibt._T_dispers[1]=0;
;;;2877   	}
;;;2878   else 
;;;2879   	{
;;;2880   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;2881   	}
;;;2882   
;;;2883   if(ibt._nd[2]!=0)
;;;2884   	{
;;;2885   	ibt._T_dispers[2]=0;
;;;2886   	}
;;;2887   else 
;;;2888   	{
;;;2889   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;2890   	}
;;;2891   
;;;2892   if(ibt._nd[3]!=0)
;;;2893   	{
;;;2894   	ibt._T_dispers[3]=0;
;;;2895   	}
;;;2896   else 
;;;2897   	{
;;;2898   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;2899   	}
;;;2900   
;;;2901   if(	ibt._nd[0]&&
;;;2902   	ibt._nd[1]&&
;;;2903   	ibt._nd[2]&&
;;;2904   	ibt._nd[3]
;;;2905   	)
;;;2906   	{
;;;2907   	t_box=(bps[0]._Ti);
;;;2908   	}
;;;2909   
;;;2910   else if(	ibt._nd[0]||
;;;2911   	ibt._nd[1]||
;;;2912   	ibt._nd[2]||
;;;2913   	ibt._nd[3]
;;;2914   	)
;;;2915   	{
;;;2916   	t_box=(ibt._avg1-273);
;;;2917   	}
;;;2918   else 
;;;2919   	{
;;;2920   	ibt._max_dispers_num=0;
;;;2921   	ibt._max_dispers=ibt._T_dispers[0];
;;;2922   
;;;2923   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;2924   		{
;;;2925   		ibt._max_dispers_num=1;
;;;2926   		ibt._max_dispers=ibt._T_dispers[1];
;;;2927   		}
;;;2928   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;2929   		{
;;;2930   		ibt._max_dispers_num=2;
;;;2931   		ibt._max_dispers=ibt._T_dispers[2];
;;;2932   		}
;;;2933   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;2934   		{
;;;2935   		ibt._max_dispers_num=3;
;;;2936   		ibt._max_dispers=ibt._T_dispers[3];
;;;2937   		}
;;;2938   
;;;2939   	ibt._avg2=0;
;;;2940   
;;;2941   	if(ibt._max_dispers_num!=0)
;;;2942   		{
;;;2943   		ibt._avg2+=ibt._T[0];
;;;2944   		}
;;;2945   	if(ibt._max_dispers_num!=1)
;;;2946   		{
;;;2947   		ibt._avg2+=ibt._T[1];
;;;2948   		}
;;;2949   	if(ibt._max_dispers_num!=2)
;;;2950   		{
;;;2951   		ibt._avg2+=ibt._T[2];
;;;2952   		}
;;;2953   	if(ibt._max_dispers_num!=3)
;;;2954   		{
;;;2955   		ibt._avg2+=ibt._T[3];
;;;2956   		}
;;;2957   
;;;2958   	t_box=(ibt._avg2/3)-273;
;;;2959   
;;;2960   	}*/
;;;2961   
;;;2962   
;;;2963   //*********************************************
;;;2964   
;;;2965   #ifndef TELECORE
;;;2966   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
0023ee  4931              LDR      r1,|L1.9396|
0023f0  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
0023f2  2855              CMP      r0,#0x55
0023f4  d105              BNE      |L1.9218|
0023f6  9801              LDR      r0,[sp,#4]
0023f8  28c8              CMP      r0,#0xc8
0023fa  dd02              BLE      |L1.9218|
0023fc  8910              LDRH     r0,[r2,#8]  ; bat
0023fe  f8a60044          STRH     r0,[r6,#0x44]
                  |L1.9218|
;;;2967   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
002402  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
002404  2855              CMP      r0,#0x55
002406  d10b              BNE      |L1.9248|
002408  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
00240c  28c8              CMP      r0,#0xc8
00240e  dd07              BLE      |L1.9248|
002410  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
002414  f9b21008          LDRSH    r1,[r2,#8]  ; bat
002418  4288              CMP      r0,r1
00241a  dd01              BLE      |L1.9248|
00241c  f8a60044          STRH     r0,[r6,#0x44]
                  |L1.9248|
;;;2968   #endif
;;;2969   
;;;2970   #ifdef TELECORE
;;;2971   Ibmax=0;
;;;2972   /*
;;;2973   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;2974   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;2975   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;2976   */
;;;2977   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;2978   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;2979   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;2980   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;2981   #endif
;;;2982   //Ibmax=bat[0]._Ib;
;;;2983   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;2984   
;;;2985   #ifdef UKU_TELECORE2017
;;;2986   Ibmax=0;
;;;2987   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;2988   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;2989   #endif
;;;2990   
;;;2991   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2992   Ibmax=Ib_ips_termokompensat;
002420  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002424  f8a60044          STRH     r0,[r6,#0x44]
;;;2993   #endif
;;;2994   for(i=0;i<NUMIST;i++)
002428  f04f0100          MOV      r1,#0
00242c  e074              B        |L1.9496|
00242e  0000              DCW      0x0000
                  |L1.9264|
                          DCD      AUSW_MAIN
                  |L1.9268|
                          DCD      out_U
                  |L1.9272|
                          DCD      load_U
                  |L1.9276|
                          DCD      Kubps
                  |L1.9280|
                          DCD      bps_U
                  |L1.9284|
                          DCD      NUMIST
                  |L1.9288|
                          DCD      bps
                  |L1.9292|
                          DCD      bps_I
                  |L1.9296|
                          DCD      ||.bss||+0x40c
                  |L1.9300|
                          DCD      ND_EXT
                  |L1.9304|
                          DCD      Ktext
                  |L1.9308|
                          DCD      t_ext
                  |L1.9312|
                          DCD      Ib_ips_termokompensat
                  |L1.9316|
                          DCD      ibat_metr_buff_
                  |L1.9320|
                          DCD      bIBAT_SMKLBR
                  |L1.9324|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.9328|
                          DCD      Kibat1
                  |L1.9332|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.9336|
                          DCD      bat
                  |L1.9340|
                          DCD      adc_buff_ext_
                  |L1.9344|
                          DCD      Kunet_ext
                  |L1.9348|
                          DCD      Uvv
                  |L1.9352|
                          DCD      Uvv0
                  |L1.9356|
                          DCD      net_U
                  |L1.9360|
                          DCD      eb2_data_short
                  |L1.9364|
                          DCD      Kvv_eb2
                  |L1.9368|
                          DCD      Uvv_eb2
                  |L1.9372|
                          DCD      Kpes_eb2
                  |L1.9376|
                          DCD      Upes_eb2
                  |L1.9380|
                          DCD      ibt
                  |L1.9384|
                          DCD      t_box
                  |L1.9388|
                          DCD      t_ext_can_nd
                  |L1.9392|
                          DCD      t_ext_can
                  |L1.9396|
                          DCD      BAT_IS_ON
                  |L1.9400|
;;;2995   	{
;;;2996   	if(bps[i]._cnt<25)
0024b8  ebc100c1          RSB      r0,r1,r1,LSL #3
0024bc  eb001001          ADD      r0,r0,r1,LSL #4
0024c0  eb040080          ADD      r0,r4,r0,LSL #2
0024c4  78c5              LDRB     r5,[r0,#3]
0024c6  2d19              CMP      r5,#0x19
0024c8  d21c              BCS      |L1.9476|
;;;2997        	{
;;;2998        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0024ca  7985              LDRB     r5,[r0,#6]
0024cc  79c6              LDRB     r6,[r0,#7]
0024ce  eb052506          ADD      r5,r5,r6,LSL #8
0024d2  6245              STR      r5,[r0,#0x24]
;;;2999        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0024d4  7a05              LDRB     r5,[r0,#8]
0024d6  7a46              LDRB     r6,[r0,#9]
0024d8  eb052506          ADD      r5,r5,r6,LSL #8
0024dc  6205              STR      r5,[r0,#0x20]
;;;3000        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0024de  7a85              LDRB     r5,[r0,#0xa]
0024e0  7ac6              LDRB     r6,[r0,#0xb]
0024e2  eb052506          ADD      r5,r5,r6,LSL #8
0024e6  61c5              STR      r5,[r0,#0x1c]
;;;3001        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0024e8  7b05              LDRB     r5,[r0,#0xc]
0024ea  6285              STR      r5,[r0,#0x28]
;;;3002        	bps[i]._adr_ee=bps[i]._buff[7];
0024ec  7b45              LDRB     r5,[r0,#0xd]
0024ee  f8805052          STRB     r5,[r0,#0x52]
;;;3003        	bps[i]._flags_tm=bps[i]._buff[8];
0024f2  7b85              LDRB     r5,[r0,#0xe]
0024f4  f8805042          STRB     r5,[r0,#0x42]
;;;3004   	     bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
0024f8  7c05              LDRB     r5,[r0,#0x10]
0024fa  7c46              LDRB     r6,[r0,#0x11]
0024fc  eb052506          ADD      r5,r5,r6,LSL #8
002500  64c5              STR      r5,[r0,#0x4c]
002502  e006              B        |L1.9490|
                  |L1.9476|
;;;3005        	} 
;;;3006   	else 
;;;3007        	{
;;;3008        	bps[i]._Uii=0; 
002504  61c3              STR      r3,[r0,#0x1c]
;;;3009        	bps[i]._Ii=0;
002506  6243              STR      r3,[r0,#0x24]
;;;3010        	bps[i]._Uin=0;
002508  6203              STR      r3,[r0,#0x20]
;;;3011        	bps[i]._Ti=0;
00250a  6283              STR      r3,[r0,#0x28]
;;;3012        	bps[i]._flags_tm=0; 
00250c  f8803042          STRB     r3,[r0,#0x42]
;;;3013   	     bps[i]._rotor=0;    
002510  64c3              STR      r3,[r0,#0x4c]
                  |L1.9490|
002512  f1010101          ADD      r1,r1,#1              ;2994
002516  b2c9              UXTB     r1,r1                 ;2994
                  |L1.9496|
002518  42b9              CMP      r1,r7                 ;2994
00251a  dbcd              BLT      |L1.9400|
;;;3014        	}
;;;3015        
;;;3016        }
;;;3017   
;;;3018   load_I=0;
00251c  4df9              LDR      r5,|L1.10500|
;;;3019   #ifdef TELECORE
;;;3020   
;;;3021   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3022   	{
;;;3023   	load_I-=lakb[i]._ch_curr/10;
;;;3024   	}*/
;;;3025   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3026   #elif UKU_TELECORE2017
;;;3027   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3028   #else
;;;3029   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
00251e  f9b21008          LDRSH    r1,[r2,#8]  ; bat
002522  f04f000a          MOV      r0,#0xa
002526  fb91f1f0          SDIV     r1,r1,r0
00252a  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
00252e  fb92f0f0          SDIV     r0,r2,r0
002532  4408              ADD      r0,r0,r1
002534  f1c00000          RSB      r0,r0,#0
002538  b206              SXTH     r6,r0
00253a  802e              STRH     r6,[r5,#0]
;;;3030   #endif
;;;3031   Isumm=0;
00253c  4af2              LDR      r2,|L1.10504|
00253e  8013              STRH     r3,[r2,#0]
;;;3032   
;;;3033   for(i=0;i<NUMIST;i++)
002540  f04f0000          MOV      r0,#0
002544  e012              B        |L1.9580|
                  |L1.9542|
;;;3034        {
;;;3035        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
002546  ebc001c0          RSB      r1,r0,r0,LSL #3
00254a  eb011100          ADD      r1,r1,r0,LSL #4
00254e  eb040181          ADD      r1,r4,r1,LSL #2
002552  f891c003          LDRB     r12,[r1,#3]
002556  f1bc0f05          CMP      r12,#5
00255a  d204              BCS      |L1.9574|
00255c  6a49              LDR      r1,[r1,#0x24]
00255e  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
002562  4461              ADD      r1,r1,r12
002564  8011              STRH     r1,[r2,#0]
                  |L1.9574|
002566  f1000001          ADD      r0,r0,#1              ;3033
00256a  b2c0              UXTB     r0,r0                 ;3033
                  |L1.9580|
00256c  42b8              CMP      r0,r7                 ;3033
00256e  dbea              BLT      |L1.9542|
;;;3036        }  
;;;3037        
;;;3038   load_I=load_I+Isumm;
002570  8810              LDRH     r0,[r2,#0]  ; Isumm
002572  4430              ADD      r0,r0,r6
002574  b200              SXTH     r0,r0
002576  8028              STRH     r0,[r5,#0]
;;;3039   if(load_I<0)load_I=0;
002578  2800              CMP      r0,#0
00257a  da00              BGE      |L1.9598|
00257c  802b              STRH     r3,[r5,#0]
                  |L1.9598|
;;;3040   
;;;3041   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3042   load_I=0;
00257e  802b              STRH     r3,[r5,#0]
;;;3043   
;;;3044   Isumm=0;
002580  8013              STRH     r3,[r2,#0]
;;;3045   
;;;3046   for(i=0;i<NUMIST;i++)
002582  f04f0000          MOV      r0,#0
002586  e00f              B        |L1.9640|
                  |L1.9608|
;;;3047        {
;;;3048        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
002588  ebc001c0          RSB      r1,r0,r0,LSL #3
00258c  eb011100          ADD      r1,r1,r0,LSL #4
002590  eb040181          ADD      r1,r4,r1,LSL #2
002594  78ce              LDRB     r6,[r1,#3]
002596  2e05              CMP      r6,#5
002598  d203              BCS      |L1.9634|
00259a  6a49              LDR      r1,[r1,#0x24]
00259c  8816              LDRH     r6,[r2,#0]  ; Isumm
00259e  4431              ADD      r1,r1,r6
0025a0  8011              STRH     r1,[r2,#0]
                  |L1.9634|
0025a2  f1000001          ADD      r0,r0,#1              ;3046
0025a6  b2c0              UXTB     r0,r0                 ;3046
                  |L1.9640|
0025a8  42b8              CMP      r0,r7                 ;3046
0025aa  dbed              BLT      |L1.9608|
;;;3049        }  
;;;3050        
;;;3051   load_I=load_I+Isumm;
0025ac  8811              LDRH     r1,[r2,#0]  ; Isumm
0025ae  eb030001          ADD      r0,r3,r1
0025b2  b200              SXTH     r0,r0
0025b4  8028              STRH     r0,[r5,#0]
;;;3052   if(load_I<0)load_I=0;
0025b6  2800              CMP      r0,#0
0025b8  da00              BGE      |L1.9660|
0025ba  802b              STRH     r3,[r5,#0]
                  |L1.9660|
;;;3053   
;;;3054   #endif
;;;3055   #ifdef IPS_SGEP_GAZPROM
;;;3056   load_I=Isumm;
;;;3057   #endif
;;;3058   
;;;3059   
;;;3060   #ifdef UKU_GLONASS
;;;3061   inv[0]._Uio=6;
;;;3062   if (NUMINV)
;;;3063   	{
;;;3064   	for(i=0;i<NUMINV;i++)
;;;3065   		{
;;;3066   		if(bps[i+first_inv_slot]._cnt<25)
;;;3067        		{
;;;3068        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3069        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3070        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3071        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3072        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3073   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3074   			inv[i]._cnt=0;    
;;;3075        		} 
;;;3076   		else 
;;;3077        		{
;;;3078        		inv[i]._Uio=0; 
;;;3079        		inv[i]._Ii=0;
;;;3080        		inv[i]._Uin=0;
;;;3081        		inv[i]._Ti=0;
;;;3082        		inv[i]._flags_tm=0; 
;;;3083   //	     	inv[i]._rotor0;
;;;3084   			inv[i]._cnt=25;    
;;;3085        		}
;;;3086        	}
;;;3087      	}
;;;3088   #endif
;;;3089   
;;;3090   #ifndef UKU_GLONASS
;;;3091   if (NUMINV)
0025bc  48d3              LDR      r0,|L1.10508|
0025be  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0025c2  2d00              CMP      r5,#0
0025c4  d066              BEQ      |L1.9876|
;;;3092   	{
;;;3093   	for(i=0;i<NUMINV;i++)
0025c6  f04f0200          MOV      r2,#0
;;;3094   		{
;;;3095   		if(bps[i+20]._cnt<25)
;;;3096        		{
;;;3097        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
0025ca  4ed1              LDR      r6,|L1.10512|
0025cc  e060              B        |L1.9872|
                  |L1.9678|
0025ce  f1020014          ADD      r0,r2,#0x14           ;3095
0025d2  ebc001c0          RSB      r1,r0,r0,LSL #3       ;3095
0025d6  eb011000          ADD      r0,r1,r0,LSL #4       ;3095
0025da  eb040080          ADD      r0,r4,r0,LSL #2       ;3095
0025de  78c1              LDRB     r1,[r0,#3]            ;3095
0025e0  2919              CMP      r1,#0x19              ;3095
0025e2  d239              BCS      |L1.9816|
0025e4  7981              LDRB     r1,[r0,#6]
0025e6  79c7              LDRB     r7,[r0,#7]
0025e8  eb012707          ADD      r7,r1,r7,LSL #8
0025ec  eb020142          ADD      r1,r2,r2,LSL #1
0025f0  eb061141          ADD      r1,r6,r1,LSL #5
0025f4  61cf              STR      r7,[r1,#0x1c]
;;;3098        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0025f6  7a07              LDRB     r7,[r0,#8]
0025f8  f890c009          LDRB     r12,[r0,#9]
0025fc  eb07270c          ADD      r7,r7,r12,LSL #8
002600  62cf              STR      r7,[r1,#0x2c]
;;;3099        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
002602  7a87              LDRB     r7,[r0,#0xa]
002604  f890c00b          LDRB     r12,[r0,#0xb]
002608  eb07270c          ADD      r7,r7,r12,LSL #8
00260c  618f              STR      r7,[r1,#0x18]
;;;3100        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
00260e  7b07              LDRB     r7,[r0,#0xc]
002610  620f              STR      r7,[r1,#0x20]
;;;3101        		inv[i]._flags_tm=bps[i+20]._buff[7];
002612  7b47              LDRB     r7,[r0,#0xd]
002614  f8817046          STRB     r7,[r1,#0x46]
;;;3102        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
002618  7b87              LDRB     r7,[r0,#0xe]
00261a  f890c00f          LDRB     r12,[r0,#0xf]
00261e  eb07270c          ADD      r7,r7,r12,LSL #8
002622  628f              STR      r7,[r1,#0x28]
;;;3103        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
002624  7c07              LDRB     r7,[r0,#0x10]
002626  f890c011          LDRB     r12,[r0,#0x11]
00262a  eb07270c          ADD      r7,r7,r12,LSL #8
00262e  624f              STR      r7,[r1,#0x24]
;;;3104   			inv[i]._cnt=0;
002630  708b              STRB     r3,[r1,#2]
;;;3105   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
002632  7c87              LDRB     r7,[r0,#0x12]
002634  f8817059          STRB     r7,[r1,#0x59]
;;;3106   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
002638  7cc7              LDRB     r7,[r0,#0x13]
00263a  f881705a          STRB     r7,[r1,#0x5a]
;;;3107   			inv[i]._Pnom=bps[i+20]._buff[14]; 
00263e  7d07              LDRB     r7,[r0,#0x14]
002640  f8817058          STRB     r7,[r1,#0x58]
;;;3108   			inv[i]._net_contr_en=bps[i+20]._buff[15];
002644  7d47              LDRB     r7,[r0,#0x15]
002646  f881705b          STRB     r7,[r1,#0x5b]
;;;3109   			inv[i]._pwm_en=bps[i+20]._buff[16];  
00264a  7d87              LDRB     r7,[r0,#0x16]
00264c  f881705c          STRB     r7,[r1,#0x5c]
;;;3110   			inv[i]._phase_mode=bps[i+20]._buff[17];  
002650  7dc0              LDRB     r0,[r0,#0x17]
002652  f881005d          STRB     r0,[r1,#0x5d]
002656  e018              B        |L1.9866|
                  |L1.9816|
;;;3111        		} 
;;;3112   		else 
;;;3113        		{
;;;3114         		inv[i]._Ii=0;
002658  eb020042          ADD      r0,r2,r2,LSL #1
00265c  eb061040          ADD      r0,r6,r0,LSL #5
002660  61c3              STR      r3,[r0,#0x1c]
;;;3115   			inv[i]._Pio=0;
002662  62c3              STR      r3,[r0,#0x2c]
;;;3116   			inv[i]._Uio=0;
002664  6183              STR      r3,[r0,#0x18]
;;;3117        		inv[i]._Ti=0;
002666  6203              STR      r3,[r0,#0x20]
;;;3118        		inv[i]._flags_tm=0; 
002668  f8803046          STRB     r3,[r0,#0x46]
;;;3119        		inv[i]._Uil=0;
00266c  6243              STR      r3,[r0,#0x24]
;;;3120        		inv[i]._Uin=0;
00266e  6283              STR      r3,[r0,#0x28]
;;;3121   			inv[i]._cnt=25; 
002670  f04f0119          MOV      r1,#0x19
002674  7081              STRB     r1,[r0,#2]
;;;3122   			inv[i]._Uoutmin=0; 
002676  f8803059          STRB     r3,[r0,#0x59]
;;;3123   			inv[i]._Uoutmax=0; 
00267a  f880305a          STRB     r3,[r0,#0x5a]
;;;3124   			inv[i]._Pnom=0; 
00267e  f8803058          STRB     r3,[r0,#0x58]
;;;3125   			inv[i]._net_contr_en=0;
002682  f880305b          STRB     r3,[r0,#0x5b]
;;;3126   			inv[i]._pwm_en=0;   
002686  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.9866|
00268a  f1020201          ADD      r2,r2,#1              ;3093
00268e  b2d2              UXTB     r2,r2                 ;3093
                  |L1.9872|
002690  42aa              CMP      r2,r5                 ;3093
002692  db9c              BLT      |L1.9678|
                  |L1.9876|
;;;3127   			   
;;;3128        		}
;;;3129        	}
;;;3130      	}
;;;3131   #endif
;;;3132   
;;;3133   #ifdef GLADKOV
;;;3134   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3135   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3136   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3137   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3138   inv[0]._flags_tm=bps[4]._buff[7];
;;;3139   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3140   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3141   inv[0]._cnt=0;    
;;;3142   
;;;3143   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3144   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3145   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3146   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3147   inv[1]._flags_tm=bps[21]._buff[7];
;;;3148   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3149   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3150   inv[1]._cnt=0;    
;;;3151   #endif
;;;3152   
;;;3153   /*
;;;3154   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3155   	{
;;;3156   	lakb[0]._battCommState=0;
;;;3157   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3158   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3159   	
;;;3160   	if(lakb[0]._battCommState==0)
;;;3161   		{	
;;;3162   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3163   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3164   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3165   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3166   		}
;;;3167   	}
;;;3168   */
;;;3169   
;;;3170   #ifdef UKU_TELECORE2015
;;;3171   
;;;3172   	if(BAT_TYPE==2)
;;;3173   		{
;;;3174   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3175   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3176   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3177   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3178   		
;;;3179   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3180   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3181   	
;;;3182   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3183   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3184   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3185   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3186   	
;;;3187   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3188   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3189   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3190   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3191   	
;;;3192   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3193   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3194   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3195   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3196   	
;;;3197   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3198   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3199   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3200   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3201   	
;;;3202   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3203   	
;;;3204   	
;;;3205   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3206   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3207   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3208   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3209   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3210   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3211   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3212   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3213   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3214   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3215   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3216   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3217   	
;;;3218   		if(lakb[i]._rat_cap==0)
;;;3219   			{
;;;3220   			if(lakb[i]._isOnCnt)
;;;3221   				{
;;;3222   				lakb[i]._isOnCnt--;
;;;3223   				if(lakb[i]._isOnCnt==0)
;;;3224   					{
;;;3225   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3226   					}
;;;3227   				}
;;;3228   			}
;;;3229   		else 
;;;3230   			{
;;;3231   			if(lakb[i]._isOnCnt<50)
;;;3232   				{
;;;3233   				lakb[i]._isOnCnt++;
;;;3234   				if(lakb[i]._isOnCnt==50)
;;;3235   					{
;;;3236   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3237   					}
;;;3238   				}
;;;3239   			}
;;;3240   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3241   		}
;;;3242   	else if(BAT_TYPE==3)
;;;3243   		{
;;;3244   		//short numOfPacks;
;;;3245   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3246   		
;;;3247   		#ifndef UKU_TELECORE2016
;;;3248   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3249   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3250   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3251   		if(numOfPacks)numOfPacks-=1;
;;;3252   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3253   		plazma_numOfCells=numOfCells;
;;;3254   		plazma_numOfTemperCells=numOfTemperCells;
;;;3255   		plazma_numOfPacks=numOfPacks;
;;;3256   
;;;3257   
;;;3258   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3259   
;;;3260   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3261   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3262   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3263   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3264   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3265   							);	  
;;;3266   
;;;3267   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3268   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3269   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3270   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3271   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3272   							)/10;
;;;3273   
;;;3274   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3275   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3276   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3277   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3278   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3279   							)-2730;
;;;3280   
;;;3281   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3282   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3283   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3284   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3285   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3286   							)/10;
;;;3287   
;;;3288   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3289   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3290   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3291   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3292   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3293   							)/10;
;;;3294   		#endif
;;;3295   		
;;;3296   		#ifdef UKU_TELECORE2016
;;;3297   		{
;;;3298   		char i;
;;;3299   		
;;;3300   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3301   			{
;;;3302   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3303   			}
;;;3304   		}
;;;3305   		#endif
;;;3306   		
;;;3307   										  
;;;3308   		}
;;;3309   	
;;;3310   if(sacredSunSilentCnt<3) 
;;;3311   	{
;;;3312       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3313       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3314      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3315   	}
;;;3316   else 
;;;3317   	{
;;;3318       	//bat[0]._Ub=0;
;;;3319       	//bat[0]._Tb=0;
;;;3320      	//bat[0]._Ib=0;
;;;3321   	}
;;;3322   
;;;3323   if(BAT_TYPE==1)
;;;3324   	{
;;;3325   	char i;
;;;3326   	for(i=0;i<1;i++)
;;;3327   		{
;;;3328   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3329   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3330   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3331   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3332   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;3333   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3334   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;3335   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3336   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;3337   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;3338   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3339   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;3340   		lakb[i]._flags1= lakb_damp[i][34];
;;;3341   		lakb[i]._flags2= lakb_damp[i][35];
;;;3342   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;3343   
;;;3344   /*		if(lakb[i]._rat_cap==0)
;;;3345   			{
;;;3346   			if(lakb[i]._isOnCnt)
;;;3347   				{
;;;3348   				lakb[i]._isOnCnt--;
;;;3349   				if(lakb[i]._isOnCnt==0)
;;;3350   					{
;;;3351   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3352   					}
;;;3353   				}
;;;3354   			}
;;;3355   		else 
;;;3356   			{
;;;3357   			if(lakb[i]._isOnCnt<50)
;;;3358   				{
;;;3359   				lakb[i]._isOnCnt++;
;;;3360   				if(lakb[i]._isOnCnt==50)
;;;3361   					{
;;;3362   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3363   					}
;;;3364   				}
;;;3365   			} */
;;;3366   		gran(&lakb[i]._isOnCnt,0,50);
;;;3367   	 	}
;;;3368   
;;;3369   	if(lakb_damp[0][41]==100)
;;;3370   		{
;;;3371   		li_bat._485Error=1;
;;;3372   		}
;;;3373   	if(lakb_damp[0][41]==0)
;;;3374   		{
;;;3375   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;3376   		li_bat._485Error=0;
;;;3377   		}
;;;3378   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;3379   
;;;3380   
;;;3381   	}
;;;3382   
;;;3383   
;;;3384   #endif
;;;3385   
;;;3386   		#ifdef UKU_TELECORE2017
;;;3387   		{
;;;3388   		char i;
;;;3389   		
;;;3390   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3391   			{
;;;3392   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3393   			}
;;;3394   		}
;;;3395   		#endif
;;;3396   #ifdef UKU_TELECORE2015
;;;3397   //вычисление параметров работы батареи
;;;3398   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;3399   li_bat._batStat=bsOK;
;;;3400   if(BAT_TYPE==1) //COSLIGHT
;;;3401   	{
;;;3402   	if(li_bat._batStat==bsOK)
;;;3403   		{
;;;3404   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;3405   
;;;3406   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;3407   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;3408   	
;;;3409   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;3410   		li_bat._soc=lakb[0]._s_o_c;
;;;3411   		li_bat._soh=lakb[0]._s_o_h;
;;;3412   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;3413   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;3414   		li_bat._rbt=lakb[0]._r_b_t;
;;;3415   		}
;;;3416   	else 
;;;3417   		{
;;;3418   		li_bat._Ub=bat[0]._Ub;
;;;3419   		li_bat._Ib=bat[0]._Ib/10;
;;;3420   		li_bat._Tb=bat[0]._Tb;
;;;3421   		}
;;;3422   
;;;3423   	if((li_bat._485Error)||(li_bat._canError))
;;;3424   		{
;;;3425   		li_bat._batStat=bsOFF;
;;;3426   		}
;;;3427   	else li_bat._batStat=bsOK;
;;;3428   	}
;;;3429   else if(BAT_TYPE==2) //SACRED SUN
;;;3430   	{
;;;3431   	}
;;;3432   else if(BAT_TYPE==3) //ZTT
;;;3433   	{
;;;3434   	if(li_bat._batStat==bsOK)
;;;3435   		{
;;;3436   
;;;3437   		}
;;;3438   	}
;;;3439   #endif
;;;3440   
;;;3441   
;;;3442   /*
;;;3443   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;3444   	{
;;;3445   
;;;3446   
;;;3447   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;3448   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;3449   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;3450   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;3451   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;3452   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;3453   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;3454   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;3455   
;;;3456   	tempSS=0;
;;;3457   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;3458   
;;;3459   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;3460   
;;;3461   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;3462   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;3463   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;3464   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;3465   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;3466   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;3467   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;3468   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;3469   
;;;3470   	tempSS=0;
;;;3471   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;3472   
;;;3473   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;3474   
;;;3475   
;;;3476   	}*/
;;;3477   
;;;3478   
;;;3479   
;;;3480   }
002694  b007              ADD      sp,sp,#0x1c
002696  e8bd8ff0          POP      {r4-r11,pc}
;;;3481   
                          ENDP

                  mnemo_hndl PROC
;;;3482   //-----------------------------------------------
;;;3483   void mnemo_hndl(void)
00269a  4a9e              LDR      r2,|L1.10516|
;;;3484   {
;;;3485   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;3486   	{
;;;3487   	if(mnemo_cnt)mnemo_cnt--;
00269c  499e              LDR      r1,|L1.10520|
00269e  7810              LDRB     r0,[r2,#0]            ;3485  ; a_ind
0026a0  2804              CMP      r0,#4                 ;3485
0026a2  d001              BEQ      |L1.9896|
0026a4  2801              CMP      r0,#1                 ;3485
0026a6  d105              BNE      |L1.9908|
                  |L1.9896|
0026a8  7850              LDRB     r0,[r2,#1]            ;3485  ; a_ind
0026aa  b918              CBNZ     r0,|L1.9908|
0026ac  489b              LDR      r0,|L1.10524|
0026ae  7800              LDRB     r0,[r0,#0]            ;3485  ; MNEMO_ON
0026b0  2855              CMP      r0,#0x55              ;3485
0026b2  d003              BEQ      |L1.9916|
                  |L1.9908|
;;;3488   	}
;;;3489   else mnemo_cnt=MNEMO_TIME;
0026b4  489a              LDR      r0,|L1.10528|
0026b6  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0026b8  7008              STRB     r0,[r1,#0]
                  |L1.9914|
;;;3490   }
0026ba  4770              BX       lr
                  |L1.9916|
0026bc  7808              LDRB     r0,[r1,#0]            ;3487  ; mnemo_cnt
0026be  2800              CMP      r0,#0                 ;3487
0026c0  d0fb              BEQ      |L1.9914|
0026c2  f1a00001          SUB      r0,r0,#1              ;3487
0026c6  7008              STRB     r0,[r1,#0]            ;3487
0026c8  4770              BX       lr
;;;3491   
                          ENDP

                  adc_init PROC
;;;3492   //-----------------------------------------------
;;;3493   void adc_init(void)
0026ca  4896              LDR      r0,|L1.10532|
;;;3494   {
;;;3495   
;;;3496   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
0026cc  6841              LDR      r1,[r0,#4]
0026ce  f4212140          BIC      r1,r1,#0xc0000
0026d2  f4412180          ORR      r1,r1,#0x40000
0026d6  6041              STR      r1,[r0,#4]
;;;3497   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
0026d8  6841              LDR      r1,[r0,#4]
0026da  f4213140          BIC      r1,r1,#0x30000
0026de  f4413180          ORR      r1,r1,#0x10000
0026e2  6041              STR      r1,[r0,#4]
;;;3498   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0026e4  6841              LDR      r1,[r0,#4]
0026e6  f4214140          BIC      r1,r1,#0xc000
0026ea  f4414180          ORR      r1,r1,#0x4000
0026ee  6041              STR      r1,[r0,#4]
;;;3499   
;;;3500   
;;;3501   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0026f0  6c41              LDR      r1,[r0,#0x44]
0026f2  f4212140          BIC      r1,r1,#0xc0000
0026f6  f4412100          ORR      r1,r1,#0x80000
0026fa  6441              STR      r1,[r0,#0x44]
;;;3502   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0026fc  6c41              LDR      r1,[r0,#0x44]
0026fe  f4213140          BIC      r1,r1,#0x30000
002702  f4413100          ORR      r1,r1,#0x20000
002706  6441              STR      r1,[r0,#0x44]
;;;3503   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
002708  6c41              LDR      r1,[r0,#0x44]
00270a  f4214140          BIC      r1,r1,#0xc000
00270e  f4414100          ORR      r1,r1,#0x8000
002712  6441              STR      r1,[r0,#0x44]
;;;3504   
;;;3505   SET_REG(LPC_ADC->ADCR,0,24,3);
002714  4884              LDR      r0,|L1.10536|
002716  6801              LDR      r1,[r0,#0]
002718  f02161e0          BIC      r1,r1,#0x7000000
00271c  6001              STR      r1,[r0,#0]
;;;3506   
;;;3507   SET_REG(LPC_ADC->ADCR,1,21,1);
00271e  6801              LDR      r1,[r0,#0]
002720  f4411100          ORR      r1,r1,#0x200000
002724  6001              STR      r1,[r0,#0]
;;;3508   SET_REG(LPC_ADC->ADCR,0,16,1);
002726  6801              LDR      r1,[r0,#0]
002728  f4213180          BIC      r1,r1,#0x10000
00272c  6001              STR      r1,[r0,#0]
;;;3509   SET_REG(LPC_ADC->ADCR,1,8,8);
00272e  6801              LDR      r1,[r0,#0]
002730  f421417f          BIC      r1,r1,#0xff00
002734  f4417180          ORR      r1,r1,#0x100
002738  6001              STR      r1,[r0,#0]
;;;3510   
;;;3511   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3512   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;3513   	
;;;3514   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;3515        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;3516        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;3517   
;;;3518   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
00273a  f44f7180          MOV      r1,#0x100
00273e  60c1              STR      r1,[r0,#0xc]
002740  487a              LDR      r0,|L1.10540|
002742  f44f0180          MOV      r1,#0x400000
002746  6001              STR      r1,[r0,#0]
;;;3519   
;;;3520   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;3521   
;;;3522   
;;;3523   }
002748  4770              BX       lr
;;;3524   
                          ENDP

                  adc_drv7 PROC
;;;3525   //-----------------------------------------------
;;;3526   void adc_drv7(void) //(Uсети - постоянка)
00274a  e92d41f0          PUSH     {r4-r8,lr}
;;;3527   {
;;;3528   //int temp_S;
;;;3529   //char i;
;;;3530   //signed short temp_SS;
;;;3531   
;;;3532   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00274e  4c78              LDR      r4,|L1.10544|
002750  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
002752  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
002754  1a40              SUBS     r0,r0,r1
002756  b200              SXTH     r0,r0
002758  f7fffffe          BL       abs_pal
00275c  1da6              ADDS     r6,r4,#6
00275e  8030              STRH     r0,[r6,#0]
;;;3533   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
002760  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
002762  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
002764  1a40              SUBS     r0,r0,r1
002766  b200              SXTH     r0,r0
002768  f7fffffe          BL       abs_pal
00276c  8070              STRH     r0,[r6,#2]
;;;3534   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00276e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
002770  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
002772  1a40              SUBS     r0,r0,r1
002774  b200              SXTH     r0,r0
002776  f7fffffe          BL       abs_pal
00277a  80b0              STRH     r0,[r6,#4]
;;;3535   
;;;3536   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;3537   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;3538   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;3539   
;;;3540   
;;;3541   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
00277c  f44f7196          MOV      r1,#0x12c
;;;3542   	{
;;;3543   	adc_result=adc_self_ch_buff[2];
002780  f1a405ea          SUB      r5,r4,#0xea
002784  4288              CMP      r0,r1                 ;3541
002786  da02              BGE      |L1.10126|
002788  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00278a  86e8              STRH     r0,[r5,#0x36]
00278c  e00c              B        |L1.10152|
                  |L1.10126|
;;;3544   	} 
;;;3545   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
00278e  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
002792  4288              CMP      r0,r1
002794  da02              BGE      |L1.10140|
;;;3546   	{
;;;3547   	adc_result=adc_self_ch_buff[1];
002796  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
002798  86e8              STRH     r0,[r5,#0x36]
00279a  e005              B        |L1.10152|
                  |L1.10140|
;;;3548   	}
;;;3549   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
00279c  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0027a0  4288              CMP      r0,r1
0027a2  da01              BGE      |L1.10152|
;;;3550   	{
;;;3551   	adc_result=adc_self_ch_buff[0];
0027a4  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0027a6  86e8              STRH     r0,[r5,#0x36]
                  |L1.10152|
;;;3552   	}
;;;3553       //adc_result=92;
;;;3554   
;;;3555   if(adc_ch_net)
0027a8  7b6f              LDRB     r7,[r5,#0xd]  ; adc_ch_net
0027aa  2600              MOVS     r6,#0
0027ac  b32f              CBZ      r7,|L1.10234|
;;;3556   	{
;;;3557   
;;;3558   	main_power_buffer[0]+=(long)(adc_result);
0027ae  4861              LDR      r0,|L1.10548|
0027b0  f9b51036          LDRSH    r1,[r5,#0x36]  ; adc_result
0027b4  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0027b6  440a              ADD      r2,r2,r1
0027b8  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;3559   	main_power_buffer[1]+=(long)(adc_result);
0027ba  6842              LDR      r2,[r0,#4]  ; main_power_buffer
0027bc  440a              ADD      r2,r2,r1
0027be  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;3560   	main_power_buffer[2]+=(long)(adc_result);
0027c0  6882              LDR      r2,[r0,#8]  ; main_power_buffer
0027c2  440a              ADD      r2,r2,r1
0027c4  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;3561   	main_power_buffer[3]+=(long)(adc_result);
0027c6  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
0027c8  4411              ADD      r1,r1,r2
0027ca  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;3562   
;;;3563   	adc_net_buff_cnt++;
0027cc  8fe9              LDRH     r1,[r5,#0x3e]  ; adc_net_buff_cnt
0027ce  f1010101          ADD      r1,r1,#1
0027d2  b209              SXTH     r1,r1
0027d4  87e9              STRH     r1,[r5,#0x3e]
;;;3564   	if(adc_net_buff_cnt>=0x1000)
0027d6  f5b15f80          CMP      r1,#0x1000
0027da  db00              BLT      |L1.10206|
;;;3565   		{
;;;3566   		adc_net_buff_cnt=0;
0027dc  87ee              STRH     r6,[r5,#0x3e]
                  |L1.10206|
;;;3567   		}
;;;3568   	if((adc_net_buff_cnt&0x03ff)==0)
0027de  f9b5103e          LDRSH    r1,[r5,#0x3e]  ; adc_net_buff_cnt
0027e2  058a              LSLS     r2,r1,#22
0027e4  d131              BNE      |L1.10314|
;;;3569   		{
;;;3570   		#ifdef UKU_220
;;;3571   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;3572   		#else
;;;3573   		#ifdef UKU_220_V2
;;;3574   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;3575   		#else
;;;3576   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0027e6  ea4f21a1          ASR      r1,r1,#10
0027ea  f8502021          LDR      r2,[r0,r1,LSL #2]
0027ee  ea4f2222          ASR      r2,r2,#8
0027f2  86aa              STRH     r2,[r5,#0x34]
;;;3577   		#endif
;;;3578   		#endif
;;;3579   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0027f4  f8406021          STR      r6,[r0,r1,LSL #2]
0027f8  e027              B        |L1.10314|
                  |L1.10234|
;;;3580   		}
;;;3581   
;;;3582   
;;;3583   	} 
;;;3584   else if(!adc_ch_net)
;;;3585   	{
;;;3586   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0027fa  484f              LDR      r0,|L1.10552|
0027fc  7bac              LDRB     r4,[r5,#0xe]  ; adc_ch
0027fe  7bea              LDRB     r2,[r5,#0xf]  ; adc_ch_cnt
002800  eb001384          ADD      r3,r0,r4,LSL #6
002804  f9b51036          LDRSH    r1,[r5,#0x36]  ; adc_result
002808  f8431022          STR      r1,[r3,r2,LSL #2]
;;;3587   	
;;;3588   	if((adc_ch_cnt&0x03)==0)
00280c  0790              LSLS     r0,r2,#30
00280e  d10f              BNE      |L1.10288|
;;;3589   		{
;;;3590   		long temp_L;
;;;3591   		char i;
;;;3592   		temp_L=0;
002810  4601              MOV      r1,r0
                  |L1.10258|
;;;3593   		for(i=0;i<16;i++)
;;;3594   			{
;;;3595   			temp_L+=adc_buff[adc_ch][i];
002812  f853c020          LDR      r12,[r3,r0,LSL #2]
002816  4461              ADD      r1,r1,r12
002818  f1000001          ADD      r0,r0,#1              ;3593
00281c  b2c0              UXTB     r0,r0                 ;3593
00281e  2810              CMP      r0,#0x10              ;3593
002820  d3f7              BCC      |L1.10258|
;;;3596   			}
;;;3597   		adc_buff_[adc_ch]= (short)(temp_L>>4);
002822  ea4f1021          ASR      r0,r1,#4
002826  4943              LDR      r1,|L1.10548|
002828  f1a10120          SUB      r1,r1,#0x20
00282c  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.10288|
;;;3598   
;;;3599   		//adc_buff_[3]=346;
;;;3600   		}
;;;3601   	if(++adc_ch>=16) 
002830  1c64              ADDS     r4,r4,#1
002832  b2e0              UXTB     r0,r4
002834  73a8              STRB     r0,[r5,#0xe]
002836  2810              CMP      r0,#0x10
002838  d307              BCC      |L1.10314|
;;;3602   		{
;;;3603   		adc_ch=0;
00283a  73ae              STRB     r6,[r5,#0xe]
;;;3604   		adc_ch_cnt++;
00283c  f1020201          ADD      r2,r2,#1
002840  b2d0              UXTB     r0,r2
002842  73e8              STRB     r0,[r5,#0xf]
;;;3605   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
002844  2810              CMP      r0,#0x10
002846  d300              BCC      |L1.10314|
002848  73ee              STRB     r6,[r5,#0xf]
                  |L1.10314|
;;;3606   		}
;;;3607   	}
;;;3608   
;;;3609   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;3610   
;;;3611   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3612   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3613   /*
;;;3614   	{
;;;3615   	if((adc_cnt1&0x03)==0)
;;;3616   		{
;;;3617   		temp_S=0;
;;;3618   		for(i=0;i<16;i++)
;;;3619   			{
;;;3620   			temp_S+=adc_buff[adc_ch][i];
;;;3621   			} 
;;;3622            	adc_buff_[adc_ch]=temp_S>>4;
;;;3623             }
;;;3624   	}*/
;;;3625   
;;;3626   
;;;3627   		  
;;;3628   
;;;3629   adc_self_ch_cnt=0;
00284a  732e              STRB     r6,[r5,#0xc]
;;;3630   
;;;3631   adc_ch_net++;
00284c  f1070701          ADD      r7,r7,#1
;;;3632   adc_ch_net&=1;
002850  f0070001          AND      r0,r7,#1
002854  7368              STRB     r0,[r5,#0xd]
;;;3633   
;;;3634   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3635   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;3636   
;;;3637   if(adc_ch_net)
;;;3638   	{
;;;3639   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3640   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;3641   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
002856  4a34              LDR      r2,|L1.10536|
002858  b130              CBZ      r0,|L1.10344|
00285a  6810              LDR      r0,[r2,#0]
00285c  f02000ff          BIC      r0,r0,#0xff
002860  f1000004          ADD      r0,r0,#4
002864  6010              STR      r0,[r2,#0]
002866  e03d              B        |L1.10468|
                  |L1.10344|
;;;3642   	}
;;;3643   else
;;;3644   	{
;;;3645   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3646   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;3647   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
002868  7ba9              LDRB     r1,[r5,#0xe]  ; adc_ch
00286a  0708              LSLS     r0,r1,#28
00286c  d406              BMI      |L1.10364|
00286e  6810              LDR      r0,[r2,#0]
002870  f02000ff          BIC      r0,r0,#0xff
002874  f1000001          ADD      r0,r0,#1
002878  6010              STR      r0,[r2,#0]
00287a  e005              B        |L1.10376|
                  |L1.10364|
;;;3648   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
00287c  6810              LDR      r0,[r2,#0]
00287e  f02000ff          BIC      r0,r0,#0xff
002882  f1000002          ADD      r0,r0,#2
002886  6010              STR      r0,[r2,#0]
                  |L1.10376|
;;;3649   
;;;3650   
;;;3651   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
002888  482c              LDR      r0,|L1.10556|
00288a  6803              LDR      r3,[r0,#0]
00288c  f0435380          ORR      r3,r3,#0x10000000
002890  6003              STR      r3,[r0,#0]
;;;3652   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
002892  6a03              LDR      r3,[r0,#0x20]
002894  f0434380          ORR      r3,r3,#0x40000000
002898  6203              STR      r3,[r0,#0x20]
;;;3653   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
00289a  6e03              LDR      r3,[r0,#0x60]
00289c  f0436380          ORR      r3,r3,#0x4000000
0028a0  6603              STR      r3,[r0,#0x60]
;;;3654   
;;;3655   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
0028a2  07cb              LSLS     r3,r1,#31
0028a4  d00a              BEQ      |L1.10428|
;;;3656   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
0028a6  6943              LDR      r3,[r0,#0x14]
0028a8  f0435380          ORR      r3,r3,#0x10000000
0028ac  6143              STR      r3,[r0,#0x14]
                  |L1.10414|
;;;3657   
;;;3658   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
0028ae  078b              LSLS     r3,r1,#30
0028b0  d409              BMI      |L1.10438|
0028b2  6b43              LDR      r3,[r0,#0x34]
0028b4  f0234380          BIC      r3,r3,#0x40000000
0028b8  6343              STR      r3,[r0,#0x34]
0028ba  e008              B        |L1.10446|
                  |L1.10428|
0028bc  6943              LDR      r3,[r0,#0x14]         ;3655
0028be  f0235380          BIC      r3,r3,#0x10000000     ;3655
0028c2  6143              STR      r3,[r0,#0x14]         ;3655
0028c4  e7f3              B        |L1.10414|
                  |L1.10438|
;;;3659   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
0028c6  6b43              LDR      r3,[r0,#0x34]
0028c8  f0434380          ORR      r3,r3,#0x40000000
0028cc  6343              STR      r3,[r0,#0x34]
                  |L1.10446|
;;;3660   
;;;3661   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
0028ce  0749              LSLS     r1,r1,#29
0028d0  d404              BMI      |L1.10460|
0028d2  6f41              LDR      r1,[r0,#0x74]
0028d4  f0216180          BIC      r1,r1,#0x4000000
0028d8  6741              STR      r1,[r0,#0x74]
0028da  e003              B        |L1.10468|
                  |L1.10460|
;;;3662   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0028dc  6f41              LDR      r1,[r0,#0x74]
0028de  f0416180          ORR      r1,r1,#0x4000000
0028e2  6741              STR      r1,[r0,#0x74]
                  |L1.10468|
;;;3663   	}
;;;3664   	
;;;3665   
;;;3666   
;;;3667   
;;;3668   LPC_ADC->ADCR |=  (1<<24);
0028e4  6810              LDR      r0,[r2,#0]
0028e6  f0407080          ORR      r0,r0,#0x1000000
0028ea  6010              STR      r0,[r2,#0]
;;;3669   
;;;3670   }
0028ec  e8bd81f0          POP      {r4-r8,pc}
;;;3671   
                          ENDP

                  avg_hndl PROC
;;;3928   //-----------------------------------------------
;;;3929   void avg_hndl(void)
0028f0  b5f0              PUSH     {r4-r7,lr}
;;;3930   { 
;;;3931   char i;
;;;3932   
;;;3933   //#define AVGCNTMAX	5
;;;3934   if(avg_main_cnt)
0028f2  4d0f              LDR      r5,|L1.10544|
0028f4  3dea              SUBS     r5,r5,#0xea
0028f6  f9b50030          LDRSH    r0,[r5,#0x30]  ; avg_main_cnt
0028fa  b308              CBZ      r0,|L1.10560|
;;;3935   	{
;;;3936   	avg_main_cnt--;
0028fc  f1a00001          SUB      r0,r0,#1
002900  8628              STRH     r0,[r5,#0x30]
;;;3937   	goto avg_hndl_end;
002902  e0b2              B        |L1.10858|
                  |L1.10500|
                          DCD      load_I
                  |L1.10504|
                          DCD      Isumm
                  |L1.10508|
                          DCD      NUMINV
                  |L1.10512|
                          DCD      inv
                  |L1.10516|
                          DCD      a_ind
                  |L1.10520|
                          DCD      mnemo_cnt
                  |L1.10524|
                          DCD      MNEMO_ON
                  |L1.10528|
                          DCD      MNEMO_TIME
                  |L1.10532|
                          DCD      0x4002c000
                  |L1.10536|
                          DCD      0x40034000
                  |L1.10540|
                          DCD      0xe000e100
                  |L1.10544|
                          DCD      ||area_number.25||+0xea
                  |L1.10548|
                          DCD      ||.bss||+0x42c
                  |L1.10552|
                          DCD      ||.bss||+0xc
                  |L1.10556|
                          DCD      0x2009c000
                  |L1.10560|
;;;3938   	}                 
;;;3939   
;;;3940   avg_num=0;
002940  f04f0600          MOV      r6,#0
002944  75ae              STRB     r6,[r5,#0x16]
;;;3941   
;;;3942   for(i=0;i<NUMIST;i++)
002946  4630              MOV      r0,r6
002948  49ff              LDR      r1,|L1.11592|
;;;3943   	{
;;;3944   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
00294a  4bfe              LDR      r3,|L1.11588|
00294c  f9b12000          LDRSH    r2,[r1,#0]            ;3942
002950  e012              B        |L1.10616|
                  |L1.10578|
002952  ebc001c0          RSB      r1,r0,r0,LSL #3
002956  eb011100          ADD      r1,r1,r0,LSL #4
00295a  eb030181          ADD      r1,r3,r1,LSL #2
00295e  788c              LDRB     r4,[r1,#2]
002960  2c01              CMP      r4,#1
002962  d106              BNE      |L1.10610|
002964  78c9              LDRB     r1,[r1,#3]
002966  2914              CMP      r1,#0x14
002968  d203              BCS      |L1.10610|
00296a  7da9              LDRB     r1,[r5,#0x16]  ; avg_num
00296c  f1010101          ADD      r1,r1,#1
002970  75a9              STRB     r1,[r5,#0x16]
                  |L1.10610|
002972  f1000001          ADD      r0,r0,#1              ;3942
002976  b2c0              UXTB     r0,r0                 ;3942
                  |L1.10616|
002978  4290              CMP      r0,r2                 ;3942
00297a  dbea              BLT      |L1.10578|
;;;3945   	}
;;;3946   
;;;3947   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;3948   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;3949   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;3950   
;;;3951   	
;;;3952   if(avg_num<2)
00297c  7daf              LDRB     r7,[r5,#0x16]  ; avg_num
00297e  2f02              CMP      r7,#2
002980  d373              BCC      |L1.10858|
;;;3953   	{
;;;3954   	goto avg_hndl_end;
;;;3955   	}
;;;3956   	
;;;3957   else
;;;3958   	{
;;;3959   	i_avg_min=5000;
002982  4cf2              LDR      r4,|L1.11596|
002984  f2413088          MOV      r0,#0x1388
002988  61e0              STR      r0,[r4,#0x1c]  ; i_avg_min
;;;3960   	i_avg_max=0;
00298a  61a6              STR      r6,[r4,#0x18]  ; i_avg_max
;;;3961   	i_avg_summ=0;
00298c  6226              STR      r6,[r4,#0x20]  ; i_avg_summ
;;;3962   	for(i=0;i<NUMIST;i++)
00298e  f04f0100          MOV      r1,#0
002992  e01c              B        |L1.10702|
                  |L1.10644|
;;;3963   		{
;;;3964   		if(bps[i]._state==bsWRK)
002994  ebc100c1          RSB      r0,r1,r1,LSL #3
002998  eb001001          ADD      r0,r0,r1,LSL #4
00299c  eb030080          ADD      r0,r3,r0,LSL #2
0029a0  f890c002          LDRB     r12,[r0,#2]
0029a4  f1bc0f01          CMP      r12,#1
0029a8  d10e              BNE      |L1.10696|
;;;3965   			{
;;;3966   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
0029aa  6a40              LDR      r0,[r0,#0x24]
0029ac  f8d4c018          LDR      r12,[r4,#0x18]  ; i_avg_max
0029b0  4560              CMP      r0,r12
0029b2  dd00              BLE      |L1.10678|
0029b4  61a0              STR      r0,[r4,#0x18]  ; i_avg_max
                  |L1.10678|
;;;3967   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
0029b6  f8d4c01c          LDR      r12,[r4,#0x1c]  ; i_avg_min
0029ba  4560              CMP      r0,r12
0029bc  da00              BGE      |L1.10688|
0029be  61e0              STR      r0,[r4,#0x1c]  ; i_avg_min
                  |L1.10688|
;;;3968   			
;;;3969   			i_avg_summ+=bps[i]._Ii;
0029c0  f8d4c020          LDR      r12,[r4,#0x20]  ; i_avg_summ
0029c4  4460              ADD      r0,r0,r12
0029c6  6220              STR      r0,[r4,#0x20]  ; i_avg_summ
                  |L1.10696|
0029c8  f1010101          ADD      r1,r1,#1              ;3962
0029cc  b2c9              UXTB     r1,r1                 ;3962
                  |L1.10702|
0029ce  4291              CMP      r1,r2                 ;3962
0029d0  dbe0              BLT      |L1.10644|
;;;3970   			}
;;;3971   		}
;;;3972   	i_avg=i_avg_summ/avg_num;	
0029d2  6a20              LDR      r0,[r4,#0x20]  ; i_avg_summ
0029d4  fb90f7f7          SDIV     r7,r0,r7
0029d8  6267              STR      r7,[r4,#0x24]  ; i_avg
;;;3973   	
;;;3974   	if(i_avg_min==0)i_avg_min=1;
0029da  69e0              LDR      r0,[r4,#0x1c]  ; i_avg_min
0029dc  2101              MOVS     r1,#1                 ;3944
0029de  b900              CBNZ     r0,|L1.10722|
0029e0  61e1              STR      r1,[r4,#0x1c]  ; i_avg_min
                  |L1.10722|
;;;3975   
;;;3976   	avg=i_avg_max;
0029e2  69a0              LDR      r0,[r4,#0x18]  ; i_avg_max
;;;3977   	avg*=100;
0029e4  f04f0c64          MOV      r12,#0x64
0029e8  fb00f00c          MUL      r0,r0,r12
;;;3978   	avg/=i_avg_min;
0029ec  f8d4c01c          LDR      r12,[r4,#0x1c]  ; i_avg_min
0029f0  fb90f0fc          SDIV     r0,r0,r12
0029f4  62a0              STR      r0,[r4,#0x28]  ; avg
;;;3979   
;;;3980   	if(avg>160) bAVG=1;
0029f6  28a0              CMP      r0,#0xa0
0029f8  dd00              BLE      |L1.10748|
0029fa  7569              STRB     r1,[r5,#0x15]
                  |L1.10748|
;;;3981   	if(avg<120) bAVG=0;
0029fc  2878              CMP      r0,#0x78
0029fe  da00              BGE      |L1.10754|
002a00  756e              STRB     r6,[r5,#0x15]
                  |L1.10754|
;;;3982   
;;;3983   	if(bAVG==1)
002a02  7d68              LDRB     r0,[r5,#0x15]  ; bAVG
002a04  2801              CMP      r0,#1
002a06  d130              BNE      |L1.10858|
;;;3984   		{
;;;3985   		for(i=0;i<NUMIST;i++)
002a08  f04f0100          MOV      r1,#0
;;;3986   			{
;;;3987   			if(bps[i]._state==bsWRK)
;;;3988   				{
;;;3989   				if(bps[i]._Ii>i_avg)bps[i]._x_--;
;;;3990   				if(bps[i]._Ii<i_avg)bps[i]._x_++;
;;;3991   			
;;;3992   				if(bps[i]._x_<-50)bps[i]._x_=-50;
002a0c  f06f0431          MVN      r4,#0x31
002a10  e029              B        |L1.10854|
                  |L1.10770|
002a12  ebc100c1          RSB      r0,r1,r1,LSL #3       ;3987
002a16  eb001001          ADD      r0,r0,r1,LSL #4       ;3987
002a1a  eb030080          ADD      r0,r3,r0,LSL #2       ;3987
002a1e  7885              LDRB     r5,[r0,#2]            ;3987
002a20  2d01              CMP      r5,#1                 ;3987
002a22  d11d              BNE      |L1.10848|
002a24  6a45              LDR      r5,[r0,#0x24]         ;3989
002a26  42bd              CMP      r5,r7                 ;3989
002a28  dd05              BLE      |L1.10806|
002a2a  f8b05050          LDRH     r5,[r0,#0x50]         ;3989
002a2e  f1a50501          SUB      r5,r5,#1              ;3989
002a32  f8a05050          STRH     r5,[r0,#0x50]         ;3989
                  |L1.10806|
002a36  da05              BGE      |L1.10820|
002a38  f8b05050          LDRH     r5,[r0,#0x50]         ;3990
002a3c  f1050501          ADD      r5,r5,#1              ;3990
002a40  f8a05050          STRH     r5,[r0,#0x50]         ;3990
                  |L1.10820|
002a44  f9b05050          LDRSH    r5,[r0,#0x50]
002a48  42a5              CMP      r5,r4
002a4a  da01              BGE      |L1.10832|
002a4c  f8a04050          STRH     r4,[r0,#0x50]
                  |L1.10832|
;;;3993   				if(bps[i]._x_>50)bps[i]._x_=50;	
002a50  f9b05050          LDRSH    r5,[r0,#0x50]
002a54  2d32              CMP      r5,#0x32
002a56  dd03              BLE      |L1.10848|
002a58  f04f0532          MOV      r5,#0x32
002a5c  f8a05050          STRH     r5,[r0,#0x50]
                  |L1.10848|
002a60  f1010101          ADD      r1,r1,#1              ;3985
002a64  b2c9              UXTB     r1,r1                 ;3985
                  |L1.10854|
002a66  4291              CMP      r1,r2                 ;3985
002a68  dbd3              BLT      |L1.10770|
                  |L1.10858|
;;;3994   				}
;;;3995   			}		
;;;3996   		}			
;;;3997   	}   	 
;;;3998   
;;;3999   
;;;4000   avg_hndl_end:
;;;4001   __nop();  
002a6a  bf00              NOP      
;;;4002   }
002a6c  bdf0              POP      {r4-r7,pc}
;;;4003   
                          ENDP

                  rele_hndl PROC
;;;4016   //*************-----------------------------------------------
;;;4017   void rele_hndl(void)
002a6e  e92d5ff0          PUSH     {r4-r12,lr}
;;;4018   {
;;;4019   //static char cnt_rel_sam;
;;;4020   //char temp;
;;;4021   
;;;4022   //temp=0;
;;;4023   
;;;4024   
;;;4025   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
002a72  48b7              LDR      r0,|L1.11600|
002a74  6801              LDR      r1,[r0,#0]
002a76  4ab7              LDR      r2,|L1.11604|
002a78  ea010102          AND      r1,r1,r2
002a7c  6001              STR      r1,[r0,#0]
;;;4026   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
002a7e  4cb6              LDR      r4,|L1.11608|
002a80  6821              LDR      r1,[r4,#0]
002a82  f441717c          ORR      r1,r1,#0x3f0
002a86  6021              STR      r1,[r4,#0]
;;;4027   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
002a88  69c1              LDR      r1,[r0,#0x1c]
002a8a  f4212140          BIC      r1,r1,#0xc0000
002a8e  61c1              STR      r1,[r0,#0x1c]
;;;4028   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
002a90  6e21              LDR      r1,[r4,#0x60]
002a92  f0417100          ORR      r1,r1,#0x2000000
002a96  6621              STR      r1,[r4,#0x60]
;;;4029   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
002a98  6841              LDR      r1,[r0,#4]
002a9a  f0216140          BIC      r1,r1,#0xc000000
002a9e  6041              STR      r1,[r0,#4]
;;;4030   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
002aa0  6820              LDR      r0,[r4,#0]
002aa2  f0405000          ORR      r0,r0,#0x20000000
002aa6  6020              STR      r0,[r4,#0]
;;;4031   
;;;4032   
;;;4033   
;;;4034   
;;;4035   
;;;4036   
;;;4037   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
002aa8  48ad              LDR      r0,|L1.11616|
002aaa  4dac              LDR      r5,|L1.11612|
002aac  49ae              LDR      r1,|L1.11624|
002aae  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
002ab0  48ac              LDR      r0,|L1.11620|
002ab2  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
002ab6  f9b11000          LDRSH    r1,[r1,#0]
002aba  7800              LDRB     r0,[r0,#0]
002abc  4313              ORRS     r3,r3,r2
002abe  d007              BEQ      |L1.10960|
002ac0  b130              CBZ      r0,|L1.10960|
002ac2  2905              CMP      r1,#5
002ac4  dd04              BLE      |L1.10960|
;;;4038   	{
;;;4039   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
002ac6  69a3              LDR      r3,[r4,#0x18]
002ac8  f4437380          ORR      r3,r3,#0x100
002acc  61a3              STR      r3,[r4,#0x18]
002ace  e003              B        |L1.10968|
                  |L1.10960|
;;;4040   	}
;;;4041   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
002ad0  69e3              LDR      r3,[r4,#0x1c]
002ad2  f4437380          ORR      r3,r3,#0x100
002ad6  61e3              STR      r3,[r4,#0x1c]
                  |L1.10968|
;;;4042   
;;;4043   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
002ad8  f8953088          LDRB     r3,[r5,#0x88]  ; bat
002adc  4313              ORRS     r3,r3,r2
002ade  d007              BEQ      |L1.10992|
002ae0  b130              CBZ      r0,|L1.10992|
002ae2  2905              CMP      r1,#5
002ae4  dd04              BLE      |L1.10992|
;;;4044   	{
;;;4045   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
002ae6  69a0              LDR      r0,[r4,#0x18]
002ae8  f0400040          ORR      r0,r0,#0x40
002aec  61a0              STR      r0,[r4,#0x18]
002aee  e003              B        |L1.11000|
                  |L1.10992|
;;;4046   	}
;;;4047   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
002af0  69e0              LDR      r0,[r4,#0x1c]
002af2  f0400040          ORR      r0,r0,#0x40
002af6  61e0              STR      r0,[r4,#0x1c]
                  |L1.11000|
;;;4048   
;;;4049   
;;;4050   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
002af8  20d2              MOVS     r0,#0xd2
002afa  f7fffffe          BL       mess_find_unvol
002afe  4d9b              LDR      r5,|L1.11628|
002b00  b110              CBZ      r0,|L1.11016|
002b02  6828              LDR      r0,[r5,#0]  ; mess_data
002b04  2864              CMP      r0,#0x64
002b06  d048              BEQ      |L1.11162|
                  |L1.11016|
;;;4051   	{
;;;4052   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4053   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4054   	}
;;;4055   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
002b08  69e0              LDR      r0,[r4,#0x1c]
002b0a  f0405000          ORR      r0,r0,#0x20000000
002b0e  61e0              STR      r0,[r4,#0x1c]
                  |L1.11024|
;;;4056   
;;;4057   
;;;4058   #ifndef UKU2071x
;;;4059   //Реле аварии сети
;;;4060   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4061   	{
;;;4062   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4063   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4064   	}
;;;4065   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4066   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4067   #endif
;;;4068   #ifdef UKU2071x
;;;4069   //Реле аварии сети
;;;4070   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002b10  20d2              MOVS     r0,#0xd2
002b12  f7fffffe          BL       mess_find_unvol
;;;4071   	{
;;;4072   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4073   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4074   	}
;;;4075   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
002b16  4e96              LDR      r6,|L1.11632|
002b18  b110              CBZ      r0,|L1.11040|
002b1a  6828              LDR      r0,[r5,#0]            ;4070  ; mess_data
002b1c  2866              CMP      r0,#0x66              ;4070
002b1e  d04b              BEQ      |L1.11192|
                  |L1.11040|
002b20  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002b22  07c0              LSLS     r0,r0,#31
002b24  d054              BEQ      |L1.11216|
;;;4076   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002b26  6fa0              LDR      r0,[r4,#0x78]
002b28  f0407000          ORR      r0,r0,#0x2000000
002b2c  67a0              STR      r0,[r4,#0x78]
                  |L1.11054|
;;;4077   #endif
;;;4078   
;;;4079   #ifdef UKU_3U
;;;4080   //Реле аварий батарей
;;;4081   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4082   	{
;;;4083   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4084   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4085        }
;;;4086   else 
;;;4087   	{
;;;4088   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4089        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4090   	} 
;;;4091   
;;;4092   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4093   	{
;;;4094   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4095   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4096        }
;;;4097   else 
;;;4098   	{
;;;4099   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4100        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4101   	} 
;;;4102   
;;;4103   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4104   	{
;;;4105   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4106   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4107        }
;;;4108   else 
;;;4109   	{
;;;4110   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4111        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4112   	} 
;;;4113   
;;;4114   #endif
;;;4115   
;;;4116   
;;;4117   #ifdef UKU_GLONASS
;;;4118   //Реле аварий батарей
;;;4119   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4120   	{
;;;4121   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4122   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4123        }
;;;4124   else 
;;;4125   	{
;;;4126   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4127        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4128   	} 
;;;4129   
;;;4130   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4131   	{
;;;4132   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4133   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4134        }
;;;4135   else 
;;;4136   	{
;;;4137   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4138        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4139   	} 
;;;4140   
;;;4141   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4142   	{
;;;4143   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4144   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4145        }
;;;4146   else 
;;;4147   	{
;;;4148   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4149        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4150   	} 
;;;4151   
;;;4152   #endif
;;;4153   
;;;4154   #ifdef U 
;;;4155   
;;;4156   #endif
;;;4157   
;;;4158   #ifdef UKU_RSTKM
;;;4159   
;;;4160   //Реле общей аварии
;;;4161   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4162   	{
;;;4163   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4164   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4165   	}
;;;4166   else 
;;;4167   	{
;;;4168        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;4169             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4170             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4171             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;4172             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4173        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4174   	}
;;;4175   	
;;;4176   
;;;4177   //Реле освещения
;;;4178   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4179   	{
;;;4180   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4181   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4182        }
;;;4183   else 
;;;4184   	{
;;;4185   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4186        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4187   	}
;;;4188   
;;;4189   
;;;4190   //Реле выключения нагрузки
;;;4191   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4192   	{
;;;4193   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4194   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4195        }
;;;4196   else if(tloaddisable_cmnd==0)
;;;4197   	{
;;;4198   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4199   	}
;;;4200   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4201   	{
;;;4202   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4203   	}
;;;4204   
;;;4205   else 
;;;4206   	{
;;;4207   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4208        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4209   	} 
;;;4210   
;;;4211   //Реле осевого вентилятора
;;;4212   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4213   	{
;;;4214   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4215   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4216   	}
;;;4217   else 
;;;4218   	{
;;;4219   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4220        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4221   	} 
;;;4222   
;;;4223   #endif
;;;4224   
;;;4225   #ifdef UKU_KONTUR
;;;4226   
;;;4227   //Реле общей аварии
;;;4228   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4229   	{
;;;4230   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4231   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4232   	}
;;;4233   else 
;;;4234   	{
;;;4235        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4236             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4237             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4238             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4239             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4240        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4241   	}
;;;4242   
;;;4243   	
;;;4244   //rel_warm_plazma=0;
;;;4245   //Реле освещения   
;;;4246   /*
;;;4247   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4248   	{
;;;4249   	if(mess_data[1]==0)
;;;4250   		{
;;;4251   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4252   		rel_warm_plazma=1;
;;;4253   		}
;;;4254   	else if(mess_data[1]==1) 
;;;4255   		{
;;;4256   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4257   		rel_warm_plazma=2;
;;;4258   		}
;;;4259        }
;;;4260   else 
;;;4261   	{
;;;4262   	if(warm_stat_k==wsOFF) 
;;;4263   		{
;;;4264   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4265   		rel_warm_plazma=3;
;;;4266   		}
;;;4267        else 
;;;4268   		{
;;;4269   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4270   		rel_warm_plazma=4;
;;;4271   		}
;;;4272   	}
;;;4273   */
;;;4274   //Реле освещения
;;;4275   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4276   	{
;;;4277   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4278   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4279        }
;;;4280   else 
;;;4281   	{
;;;4282   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4283        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4284   	}
;;;4285   
;;;4286   
;;;4287   
;;;4288   //Реле выключения нагрузки
;;;4289   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4290   	{
;;;4291   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4292   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4293        }
;;;4294   else if(tloaddisable_cmnd==0)
;;;4295   	{
;;;4296   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4297   	}
;;;4298   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4299   	{
;;;4300   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4301   	}
;;;4302   
;;;4303   else 
;;;4304   	{
;;;4305   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4306        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4307   	} 
;;;4308   
;;;4309   //Реле осевого вентилятора или отопителя
;;;4310   if(RELE_LOG)
;;;4311   	{
;;;4312   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4313   		{
;;;4314   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4315   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4316   		}
;;;4317   	else 
;;;4318   		{
;;;4319   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4320   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4321   		} 
;;;4322   
;;;4323   	}
;;;4324   else 
;;;4325   	{
;;;4326   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4327   		{
;;;4328   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4329   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4330   		}
;;;4331   	else 
;;;4332   		{
;;;4333   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4334   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4335   		} 
;;;4336   	}
;;;4337   #endif
;;;4338   
;;;4339   #ifdef UKU_6U
;;;4340   //Реле аварий батарей
;;;4341   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4342   	{
;;;4343   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4344   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4345        }
;;;4346   else 
;;;4347   	{
;;;4348   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4349        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4350   	} 
;;;4351   
;;;4352   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4353   	{
;;;4354   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4355   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4356       }
;;;4357   else if(NPN_OUT==npnoRELEAVBAT2)
;;;4358   	{
;;;4359   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;4360   		{
;;;4361   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4362   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4363        	}
;;;4364   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4365   	}
;;;4366   else 
;;;4367   	{
;;;4368   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4369       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4370   	} 
;;;4371   
;;;4372   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4373   	{
;;;4374   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4375   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4376        }
;;;4377   else 
;;;4378   	{
;;;4379   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4380        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4381   	} 
;;;4382   
;;;4383   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4384   	{
;;;4385   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4386   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4387   	}
;;;4388   else if((NPN_OUT==npnoRELEVENT))
;;;4389   	{
;;;4390   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;4391   		{
;;;4392   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4393   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4394       	}
;;;4395   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4396   	}
;;;4397   else 
;;;4398   	{
;;;4399   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4400   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4401   	}
;;;4402   
;;;4403   #endif
;;;4404   
;;;4405   #ifdef UKU_220
;;;4406   //Реле аварий батарей
;;;4407   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4408   	{
;;;4409   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4410   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4411        }
;;;4412   else 
;;;4413   	{
;;;4414   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4415        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4416   	} 
;;;4417   
;;;4418   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4419   	{
;;;4420   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4421   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4422        }
;;;4423   else 
;;;4424   	{
;;;4425   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4426        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4427   	} 
;;;4428   
;;;4429   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4430   	{
;;;4431   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4432   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4433   	}
;;;4434   else 
;;;4435   	{
;;;4436   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;4437   		{
;;;4438   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4439   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4440   		}
;;;4441   	else 
;;;4442   		{
;;;4443   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4444        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4445   		}
;;;4446   	}
;;;4447   
;;;4448   #endif
;;;4449   
;;;4450   #ifdef UKU_220_V2
;;;4451   //Реле аварий батарей
;;;4452   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4453   	{
;;;4454   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4455   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4456        }
;;;4457   else 
;;;4458   	{
;;;4459   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4460        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4461   	} 
;;;4462   
;;;4463   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4464   	{
;;;4465   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4466   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4467        }
;;;4468   else 
;;;4469   	{
;;;4470   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4471        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4472   	} 
;;;4473   
;;;4474   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4475   	{
;;;4476   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4477   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4478   	}
;;;4479   else 
;;;4480   	{
;;;4481   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;4482   		{
;;;4483   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4484   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4485   		}
;;;4486   	else 
;;;4487   		{
;;;4488   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4489        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4490   		}
;;;4491   	}
;;;4492   
;;;4493   #endif
;;;4494   
;;;4495   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;4496   
;;;4497   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
002b2e  4891              LDR      r0,|L1.11636|
;;;4498   	{
;;;4499   	#ifndef UKU2071x
;;;4500   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4501   		{
;;;4502   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4503   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4504   		}
;;;4505   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4506   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4507   	#endif
;;;4508   
;;;4509   	#ifdef UKU2071x
;;;4510   		#ifndef APSENERGIA
;;;4511   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4512   			{
;;;4513   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4514   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4515   			}
;;;4516   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4517   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4518   		#endif
;;;4519   
;;;4520   		#ifdef APSENERGIA
;;;4521   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4522   			{
;;;4523   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4524   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4525   			}
;;;4526   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4527   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4528   		#endif
;;;4529   
;;;4530   	#endif
;;;4531   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4532   		{
;;;4533   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4534   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4535   	     }
;;;4536   	else 
;;;4537   		{
;;;4538   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4539   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4540   		} 
;;;4541   
;;;4542   	//Реле аварий батарей
;;;4543   	#ifndef APSENERGIA
;;;4544   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4545   		{
;;;4546   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4547   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4548        	}
;;;4549   	else 
;;;4550   		{
;;;4551   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002b30  f8df8244          LDR      r8,|L1.11640|
002b34  4f91              LDR      r7,|L1.11644|
002b36  8800              LDRH     r0,[r0,#0]            ;4497  ; AUSW_MAIN
002b38  f5a041aa          SUB      r1,r0,#0x5500         ;4497
002b3c  39fa              SUBS     r1,r1,#0xfa           ;4497
002b3e  d001              BEQ      |L1.11076|
002b40  1e49              SUBS     r1,r1,#1              ;4497
002b42  d16f              BNE      |L1.11300|
                  |L1.11076|
002b44  20d2              MOVS     r0,#0xd2              ;4511
002b46  f7fffffe          BL       mess_find_unvol
002b4a  b110              CBZ      r0,|L1.11090|
002b4c  6828              LDR      r0,[r5,#0]            ;4511  ; mess_data
002b4e  2866              CMP      r0,#0x66              ;4511
002b50  d043              BEQ      |L1.11226|
                  |L1.11090|
002b52  6830              LDR      r0,[r6,#0]            ;4516  ; avar_ind_stat
002b54  07c0              LSLS     r0,r0,#31             ;4516
002b56  d04d              BEQ      |L1.11252|
002b58  6fa0              LDR      r0,[r4,#0x78]         ;4517
002b5a  f0407000          ORR      r0,r0,#0x2000000      ;4517
002b5e  67a0              STR      r0,[r4,#0x78]         ;4517
                  |L1.11104|
002b60  20d2              MOVS     r0,#0xd2              ;4531
002b62  f7fffffe          BL       mess_find_unvol
002b66  b110              CBZ      r0,|L1.11118|
002b68  6828              LDR      r0,[r5,#0]            ;4531  ; mess_data
002b6a  286a              CMP      r0,#0x6a              ;4531
002b6c  d047              BEQ      |L1.11262|
                  |L1.11118|
002b6e  6830              LDR      r0,[r6,#0]            ;4538  ; avar_ind_stat
002b70  4238              TST      r0,r7                 ;4538
002b72  d052              BEQ      |L1.11290|
002b74  69a0              LDR      r0,[r4,#0x18]         ;4539
002b76  f0400080          ORR      r0,r0,#0x80           ;4539
002b7a  61a0              STR      r0,[r4,#0x18]         ;4539
                  |L1.11132|
002b7c  20d2              MOVS     r0,#0xd2              ;4544
002b7e  f7fffffe          BL       mess_find_unvol
002b82  b110              CBZ      r0,|L1.11146|
002b84  6828              LDR      r0,[r5,#0]            ;4544  ; mess_data
002b86  2867              CMP      r0,#0x67              ;4544
002b88  d04d              BEQ      |L1.11302|
                  |L1.11146|
002b8a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002b8e  b380              CBZ      r0,|L1.11250|
;;;4552        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002b90  69a0              LDR      r0,[r4,#0x18]
002b92  f0400010          ORR      r0,r0,#0x10
002b96  61a0              STR      r0,[r4,#0x18]
002b98  e1f2              B        |L1.12160|
                  |L1.11162|
002b9a  6868              LDR      r0,[r5,#4]            ;4052  ; mess_data
002b9c  2801              CMP      r0,#1                 ;4052
002b9e  d006              BEQ      |L1.11182|
002ba0  2800              CMP      r0,#0                 ;4053
002ba2  d1b5              BNE      |L1.11024|
002ba4  69e0              LDR      r0,[r4,#0x1c]         ;4053
002ba6  f0405000          ORR      r0,r0,#0x20000000     ;4053
002baa  61e0              STR      r0,[r4,#0x1c]         ;4053
002bac  e7b0              B        |L1.11024|
                  |L1.11182|
002bae  69a0              LDR      r0,[r4,#0x18]         ;4052
002bb0  f0405000          ORR      r0,r0,#0x20000000     ;4052
002bb4  61a0              STR      r0,[r4,#0x18]         ;4052
002bb6  e7ab              B        |L1.11024|
                  |L1.11192|
002bb8  6868              LDR      r0,[r5,#4]            ;4072  ; mess_data
002bba  b120              CBZ      r0,|L1.11206|
002bbc  6fa0              LDR      r0,[r4,#0x78]         ;4073
002bbe  f0407000          ORR      r0,r0,#0x2000000      ;4073
002bc2  67a0              STR      r0,[r4,#0x78]         ;4073
002bc4  e7b3              B        |L1.11054|
                  |L1.11206|
002bc6  6fe0              LDR      r0,[r4,#0x7c]         ;4072
002bc8  f0407000          ORR      r0,r0,#0x2000000      ;4072
002bcc  67e0              STR      r0,[r4,#0x7c]         ;4072
002bce  e7ae              B        |L1.11054|
                  |L1.11216|
002bd0  6fe0              LDR      r0,[r4,#0x7c]         ;4075
002bd2  f0407000          ORR      r0,r0,#0x2000000      ;4075
002bd6  67e0              STR      r0,[r4,#0x7c]         ;4075
002bd8  e7a9              B        |L1.11054|
                  |L1.11226|
002bda  6868              LDR      r0,[r5,#4]            ;4513  ; mess_data
002bdc  b120              CBZ      r0,|L1.11240|
002bde  6fa0              LDR      r0,[r4,#0x78]         ;4514
002be0  f0407000          ORR      r0,r0,#0x2000000      ;4514
002be4  67a0              STR      r0,[r4,#0x78]         ;4514
002be6  e7bb              B        |L1.11104|
                  |L1.11240|
002be8  6fe0              LDR      r0,[r4,#0x7c]         ;4513
002bea  f0407000          ORR      r0,r0,#0x2000000      ;4513
002bee  67e0              STR      r0,[r4,#0x7c]         ;4513
002bf0  e7b6              B        |L1.11104|
                  |L1.11250|
002bf2  e027              B        |L1.11332|
                  |L1.11252|
002bf4  6fe0              LDR      r0,[r4,#0x7c]         ;4516
002bf6  f0407000          ORR      r0,r0,#0x2000000      ;4516
002bfa  67e0              STR      r0,[r4,#0x7c]         ;4516
002bfc  e7b0              B        |L1.11104|
                  |L1.11262|
002bfe  6868              LDR      r0,[r5,#4]            ;4533  ; mess_data
002c00  b130              CBZ      r0,|L1.11280|
002c02  2801              CMP      r0,#1                 ;4534
002c04  d1ba              BNE      |L1.11132|
002c06  69a0              LDR      r0,[r4,#0x18]         ;4534
002c08  f0400080          ORR      r0,r0,#0x80           ;4534
002c0c  61a0              STR      r0,[r4,#0x18]         ;4534
002c0e  e7b5              B        |L1.11132|
                  |L1.11280|
002c10  69e0              LDR      r0,[r4,#0x1c]         ;4533
002c12  f0400080          ORR      r0,r0,#0x80           ;4533
002c16  61e0              STR      r0,[r4,#0x1c]         ;4533
002c18  e7b0              B        |L1.11132|
                  |L1.11290|
002c1a  69e0              LDR      r0,[r4,#0x1c]         ;4538
002c1c  f0400080          ORR      r0,r0,#0x80           ;4538
002c20  61e0              STR      r0,[r4,#0x1c]         ;4538
002c22  e7ab              B        |L1.11132|
                  |L1.11300|
002c24  e013              B        |L1.11342|
                  |L1.11302|
002c26  6868              LDR      r0,[r5,#4]            ;4546  ; mess_data
002c28  b110              CBZ      r0,|L1.11312|
002c2a  2801              CMP      r0,#1                 ;4547
002c2c  d005              BEQ      |L1.11322|
002c2e  e1a7              B        |L1.12160|
                  |L1.11312|
002c30  69e0              LDR      r0,[r4,#0x1c]         ;4546
002c32  f0400010          ORR      r0,r0,#0x10           ;4546
002c36  61e0              STR      r0,[r4,#0x1c]         ;4546
002c38  e1a2              B        |L1.12160|
                  |L1.11322|
002c3a  69a0              LDR      r0,[r4,#0x18]         ;4547
002c3c  f0400010          ORR      r0,r0,#0x10           ;4547
002c40  61a0              STR      r0,[r4,#0x18]         ;4547
002c42  e19d              B        |L1.12160|
                  |L1.11332|
002c44  69e0              LDR      r0,[r4,#0x1c]         ;4551
002c46  f0400010          ORR      r0,r0,#0x10           ;4551
002c4a  61e0              STR      r0,[r4,#0x1c]         ;4551
002c4c  e198              B        |L1.12160|
                  |L1.11342|
;;;4553   		}
;;;4554   	#endif
;;;4555   	#ifdef APSENERGIA
;;;4556   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4557   		{
;;;4558   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4559   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4560        	}
;;;4561   	else 
;;;4562   		{
;;;4563   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4564   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4565   		}
;;;4566   	#endif
;;;4567   	}
;;;4568   
;;;4569   else	if(AUSW_MAIN==22023)
002c4e  f5a041ac          SUB      r1,r0,#0x5600
002c52  3907              SUBS     r1,#7
002c54  d162              BNE      |L1.11548|
;;;4570   	{
;;;4571   
;;;4572   	//Реле аварий батарей
;;;4573   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002c56  20d2              MOVS     r0,#0xd2
002c58  f7fffffe          BL       mess_find_unvol
002c5c  b110              CBZ      r0,|L1.11364|
002c5e  6828              LDR      r0,[r5,#0]  ; mess_data
002c60  2867              CMP      r0,#0x67
002c62  d023              BEQ      |L1.11436|
                  |L1.11364|
;;;4574   		{
;;;4575   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4576   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4577        	}
;;;4578   	else 
;;;4579   		{
;;;4580   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002c64  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002c68  b370              CBZ      r0,|L1.11464|
;;;4581        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002c6a  69a0              LDR      r0,[r4,#0x18]
002c6c  f0400010          ORR      r0,r0,#0x10
002c70  61a0              STR      r0,[r4,#0x18]
                  |L1.11378|
;;;4582   		} 
;;;4583   
;;;4584   
;;;4585   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4586   	#ifndef UKU2071x
;;;4587   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4588   		{
;;;4589   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4590   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4591   		}
;;;4592   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4593   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4594   	#endif
;;;4595   	#ifdef UKU2071x
;;;4596   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002c72  20d2              MOVS     r0,#0xd2
002c74  f7fffffe          BL       mess_find_unvol
002c78  b110              CBZ      r0,|L1.11392|
002c7a  6828              LDR      r0,[r5,#0]  ; mess_data
002c7c  2866              CMP      r0,#0x66
002c7e  d028              BEQ      |L1.11474|
                  |L1.11392|
;;;4597   		{
;;;4598   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4599   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4600   		}
;;;4601   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002c80  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002c82  07c0              LSLS     r0,r0,#31
002c84  d031              BEQ      |L1.11498|
;;;4602   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002c86  6fa0              LDR      r0,[r4,#0x78]
002c88  f0407000          ORR      r0,r0,#0x2000000
002c8c  67a0              STR      r0,[r4,#0x78]
                  |L1.11406|
;;;4603   	#endif
;;;4604   
;;;4605   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002c8e  20d2              MOVS     r0,#0xd2
002c90  f7fffffe          BL       mess_find_unvol
002c94  b110              CBZ      r0,|L1.11420|
002c96  6828              LDR      r0,[r5,#0]  ; mess_data
002c98  286a              CMP      r0,#0x6a
002c9a  d02b              BEQ      |L1.11508|
                  |L1.11420|
;;;4606   		{
;;;4607   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4608   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4609   	     }
;;;4610   	else 
;;;4611   		{
;;;4612   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002c9c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002c9e  4238              TST      r0,r7
002ca0  d037              BEQ      |L1.11538|
;;;4613   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002ca2  69a0              LDR      r0,[r4,#0x18]
002ca4  f0400080          ORR      r0,r0,#0x80
002ca8  61a0              STR      r0,[r4,#0x18]
002caa  e169              B        |L1.12160|
                  |L1.11436|
002cac  6868              LDR      r0,[r5,#4]            ;4575  ; mess_data
002cae  b130              CBZ      r0,|L1.11454|
002cb0  2801              CMP      r0,#1                 ;4576
002cb2  d1de              BNE      |L1.11378|
002cb4  69a0              LDR      r0,[r4,#0x18]         ;4576
002cb6  f0400010          ORR      r0,r0,#0x10           ;4576
002cba  61a0              STR      r0,[r4,#0x18]         ;4576
002cbc  e7d9              B        |L1.11378|
                  |L1.11454|
002cbe  69e0              LDR      r0,[r4,#0x1c]         ;4575
002cc0  f0400010          ORR      r0,r0,#0x10           ;4575
002cc4  61e0              STR      r0,[r4,#0x1c]         ;4575
002cc6  e7d4              B        |L1.11378|
                  |L1.11464|
002cc8  69e0              LDR      r0,[r4,#0x1c]         ;4580
002cca  f0400010          ORR      r0,r0,#0x10           ;4580
002cce  61e0              STR      r0,[r4,#0x1c]         ;4580
002cd0  e7cf              B        |L1.11378|
                  |L1.11474|
002cd2  6868              LDR      r0,[r5,#4]            ;4598  ; mess_data
002cd4  b120              CBZ      r0,|L1.11488|
002cd6  69e0              LDR      r0,[r4,#0x1c]         ;4599
002cd8  f0407000          ORR      r0,r0,#0x2000000      ;4599
002cdc  61e0              STR      r0,[r4,#0x1c]         ;4599
002cde  e7d6              B        |L1.11406|
                  |L1.11488|
002ce0  69a0              LDR      r0,[r4,#0x18]         ;4598
002ce2  f0407000          ORR      r0,r0,#0x2000000      ;4598
002ce6  61a0              STR      r0,[r4,#0x18]         ;4598
002ce8  e7d1              B        |L1.11406|
                  |L1.11498|
002cea  6ba0              LDR      r0,[r4,#0x38]         ;4601
002cec  f0407000          ORR      r0,r0,#0x2000000      ;4601
002cf0  63a0              STR      r0,[r4,#0x38]         ;4601
002cf2  e7cc              B        |L1.11406|
                  |L1.11508|
002cf4  6868              LDR      r0,[r5,#4]            ;4607  ; mess_data
002cf6  b110              CBZ      r0,|L1.11518|
002cf8  2801              CMP      r0,#1                 ;4608
002cfa  d005              BEQ      |L1.11528|
002cfc  e140              B        |L1.12160|
                  |L1.11518|
002cfe  69e0              LDR      r0,[r4,#0x1c]         ;4607
002d00  f0400080          ORR      r0,r0,#0x80           ;4607
002d04  61e0              STR      r0,[r4,#0x1c]         ;4607
002d06  e13b              B        |L1.12160|
                  |L1.11528|
002d08  69a0              LDR      r0,[r4,#0x18]         ;4608
002d0a  f0400080          ORR      r0,r0,#0x80           ;4608
002d0e  61a0              STR      r0,[r4,#0x18]         ;4608
002d10  e136              B        |L1.12160|
                  |L1.11538|
002d12  69e0              LDR      r0,[r4,#0x1c]         ;4612
002d14  f0400080          ORR      r0,r0,#0x80           ;4612
002d18  61e0              STR      r0,[r4,#0x1c]         ;4612
002d1a  e131              B        |L1.12160|
                  |L1.11548|
;;;4614   		} 
;;;4615   	}
;;;4616   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
002d1c  f5a041ac          SUB      r1,r0,#0x5600
002d20  391b              SUBS     r1,r1,#0x1b
002d22  d001              BEQ      |L1.11560|
002d24  1e49              SUBS     r1,r1,#1
002d26  d173              BNE      |L1.11792|
                  |L1.11560|
;;;4617   	{
;;;4618   	//Реле аварий батарей
;;;4619   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002d28  20d2              MOVS     r0,#0xd2
002d2a  f7fffffe          BL       mess_find_unvol
002d2e  b110              CBZ      r0,|L1.11574|
002d30  6828              LDR      r0,[r5,#0]  ; mess_data
002d32  2867              CMP      r0,#0x67
002d34  d052              BEQ      |L1.11740|
                  |L1.11574|
;;;4620   		{
;;;4621   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4622   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4623        	}
;;;4624   	else 
;;;4625   		{
;;;4626   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002d36  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002d3a  b3f0              CBZ      r0,|L1.11706|
;;;4627        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002d3c  69a0              LDR      r0,[r4,#0x18]
002d3e  f0400010          ORR      r0,r0,#0x10
002d42  e01d              B        |L1.11648|
                  |L1.11588|
                          DCD      bps
                  |L1.11592|
                          DCD      NUMIST
                  |L1.11596|
                          DCD      ||area_number.25||+0x80
                  |L1.11600|
                          DCD      0x4002c000
                  |L1.11604|
                          DCD      0xfff000ff
                  |L1.11608|
                          DCD      0x2009c000
                  |L1.11612|
                          DCD      bat
                  |L1.11616|
                          DCD      tbatdisable_stat
                  |L1.11620|
                          DCD      tbatdisable_cmnd
                  |L1.11624|
                          DCD      main_1Hz_cnt
                  |L1.11628|
                          DCD      mess_data
                  |L1.11632|
                          DCD      avar_ind_stat
                  |L1.11636|
                          DCD      AUSW_MAIN
                  |L1.11640|
                          DCD      ips_bat_av_stat
                  |L1.11644|
                          DCD      0x100007f8
                  |L1.11648|
002d80  61a0              STR      r0,[r4,#0x18]
                  |L1.11650|
;;;4628   		} 
;;;4629   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4630   	#ifndef UKU2071x 
;;;4631   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4632   		{
;;;4633   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4634   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4635   		}
;;;4636   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4637   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4638   	#endif
;;;4639   	#ifdef UKU2071x 
;;;4640   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002d82  20d2              MOVS     r0,#0xd2
002d84  f7fffffe          BL       mess_find_unvol
002d88  b110              CBZ      r0,|L1.11664|
002d8a  6828              LDR      r0,[r5,#0]  ; mess_data
002d8c  2866              CMP      r0,#0x66
002d8e  d038              BEQ      |L1.11778|
                  |L1.11664|
;;;4641   		{
;;;4642   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4643   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4644   		}
;;;4645   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002d90  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002d92  07c0              LSLS     r0,r0,#31
002d94  d042              BEQ      |L1.11804|
;;;4646   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002d96  6fa0              LDR      r0,[r4,#0x78]
002d98  f0407000          ORR      r0,r0,#0x2000000
002d9c  67a0              STR      r0,[r4,#0x78]
                  |L1.11678|
;;;4647   	#endif
;;;4648   
;;;4649   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002d9e  20d2              MOVS     r0,#0xd2
002da0  f7fffffe          BL       mess_find_unvol
002da4  b110              CBZ      r0,|L1.11692|
002da6  6828              LDR      r0,[r5,#0]  ; mess_data
002da8  286a              CMP      r0,#0x6a
002daa  d03c              BEQ      |L1.11814|
                  |L1.11692|
;;;4650   		{
;;;4651   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4652   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4653   	     }
;;;4654   	else 
;;;4655   		{
;;;4656   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002dac  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002dae  4238              TST      r0,r7
002db0  d047              BEQ      |L1.11842|
;;;4657   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002db2  69a0              LDR      r0,[r4,#0x18]
002db4  f0400080          ORR      r0,r0,#0x80
002db8  e000              B        |L1.11708|
                  |L1.11706|
002dba  e01d              B        |L1.11768|
                  |L1.11708|
002dbc  61a0              STR      r0,[r4,#0x18]
                  |L1.11710|
;;;4658   		}
;;;4659   	//Реле аварии БПС
;;;4660   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002dbe  20d2              MOVS     r0,#0xd2
002dc0  f7fffffe          BL       mess_find_unvol
002dc4  b110              CBZ      r0,|L1.11724|
002dc6  6828              LDR      r0,[r5,#0]  ; mess_data
002dc8  286a              CMP      r0,#0x6a
002dca  d03f              BEQ      |L1.11852|
                  |L1.11724|
;;;4661   		{
;;;4662   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4663   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4664        	}
;;;4665   	else 
;;;4666   		{
;;;4667   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
002dcc  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002dce  4238              TST      r0,r7
002dd0  d04b              BEQ      |L1.11882|
;;;4668        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
002dd2  69a0              LDR      r0,[r4,#0x18]
002dd4  f0400020          ORR      r0,r0,#0x20
002dd8  61a0              STR      r0,[r4,#0x18]
002dda  e0d1              B        |L1.12160|
                  |L1.11740|
002ddc  6868              LDR      r0,[r5,#4]            ;4621  ; mess_data
002dde  b130              CBZ      r0,|L1.11758|
002de0  2801              CMP      r0,#1                 ;4622
002de2  d1ce              BNE      |L1.11650|
002de4  69a0              LDR      r0,[r4,#0x18]         ;4622
002de6  f0400010          ORR      r0,r0,#0x10           ;4622
002dea  61a0              STR      r0,[r4,#0x18]         ;4622
002dec  e7c9              B        |L1.11650|
                  |L1.11758|
002dee  69e0              LDR      r0,[r4,#0x1c]         ;4621
002df0  f0400010          ORR      r0,r0,#0x10           ;4621
002df4  61e0              STR      r0,[r4,#0x1c]         ;4621
002df6  e7c4              B        |L1.11650|
                  |L1.11768|
002df8  69e0              LDR      r0,[r4,#0x1c]         ;4626
002dfa  f0400010          ORR      r0,r0,#0x10           ;4626
002dfe  61e0              STR      r0,[r4,#0x1c]         ;4626
002e00  e7bf              B        |L1.11650|
                  |L1.11778|
002e02  6868              LDR      r0,[r5,#4]            ;4642  ; mess_data
002e04  b128              CBZ      r0,|L1.11794|
002e06  69e0              LDR      r0,[r4,#0x1c]         ;4643
002e08  f0407000          ORR      r0,r0,#0x2000000      ;4643
002e0c  61e0              STR      r0,[r4,#0x1c]         ;4643
002e0e  e7c6              B        |L1.11678|
                  |L1.11792|
002e10  e030              B        |L1.11892|
                  |L1.11794|
002e12  69a0              LDR      r0,[r4,#0x18]         ;4642
002e14  f0407000          ORR      r0,r0,#0x2000000      ;4642
002e18  61a0              STR      r0,[r4,#0x18]         ;4642
002e1a  e7c0              B        |L1.11678|
                  |L1.11804|
002e1c  6ba0              LDR      r0,[r4,#0x38]         ;4645
002e1e  f0407000          ORR      r0,r0,#0x2000000      ;4645
002e22  63a0              STR      r0,[r4,#0x38]         ;4645
002e24  e7bb              B        |L1.11678|
                  |L1.11814|
002e26  6868              LDR      r0,[r5,#4]            ;4651  ; mess_data
002e28  b130              CBZ      r0,|L1.11832|
002e2a  2801              CMP      r0,#1                 ;4652
002e2c  d1c7              BNE      |L1.11710|
002e2e  69a0              LDR      r0,[r4,#0x18]         ;4652
002e30  f0400080          ORR      r0,r0,#0x80           ;4652
002e34  61a0              STR      r0,[r4,#0x18]         ;4652
002e36  e7c2              B        |L1.11710|
                  |L1.11832|
002e38  69e0              LDR      r0,[r4,#0x1c]         ;4651
002e3a  f0400080          ORR      r0,r0,#0x80           ;4651
002e3e  61e0              STR      r0,[r4,#0x1c]         ;4651
002e40  e7bd              B        |L1.11710|
                  |L1.11842|
002e42  69e0              LDR      r0,[r4,#0x1c]         ;4656
002e44  f0400080          ORR      r0,r0,#0x80           ;4656
002e48  61e0              STR      r0,[r4,#0x1c]         ;4656
002e4a  e7b8              B        |L1.11710|
                  |L1.11852|
002e4c  6868              LDR      r0,[r5,#4]            ;4662  ; mess_data
002e4e  b110              CBZ      r0,|L1.11862|
002e50  2801              CMP      r0,#1                 ;4663
002e52  d005              BEQ      |L1.11872|
002e54  e094              B        |L1.12160|
                  |L1.11862|
002e56  69e0              LDR      r0,[r4,#0x1c]         ;4662
002e58  f0400020          ORR      r0,r0,#0x20           ;4662
002e5c  61e0              STR      r0,[r4,#0x1c]         ;4662
002e5e  e08f              B        |L1.12160|
                  |L1.11872|
002e60  69a0              LDR      r0,[r4,#0x18]         ;4663
002e62  f0400020          ORR      r0,r0,#0x20           ;4663
002e66  61a0              STR      r0,[r4,#0x18]         ;4663
002e68  e08a              B        |L1.12160|
                  |L1.11882|
002e6a  69e0              LDR      r0,[r4,#0x1c]         ;4667
002e6c  f0400020          ORR      r0,r0,#0x20           ;4667
002e70  61e0              STR      r0,[r4,#0x1c]         ;4667
002e72  e085              B        |L1.12160|
                  |L1.11892|
;;;4669   		} 
;;;4670   	}
;;;4671   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
002e74  f5a041ac          SUB      r1,r0,#0x5600
002e78  3911              SUBS     r1,r1,#0x11
002e7a  d001              BEQ      |L1.11904|
002e7c  310f              ADDS     r1,r1,#0xf
002e7e  d163              BNE      |L1.12104|
                  |L1.11904|
;;;4672   	{
;;;4673   	#ifndef UKU2071x 
;;;4674   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4675   		{
;;;4676   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4677   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4678   		}
;;;4679   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4680   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4681   	#endif
;;;4682   	#ifdef UKU2071x 
;;;4683   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002e80  20d2              MOVS     r0,#0xd2
002e82  f7fffffe          BL       mess_find_unvol
002e86  b110              CBZ      r0,|L1.11918|
002e88  6828              LDR      r0,[r5,#0]  ; mess_data
002e8a  2866              CMP      r0,#0x66
002e8c  d023              BEQ      |L1.11990|
                  |L1.11918|
;;;4684   		{
;;;4685   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4686   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4687   		}
;;;4688   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
002e8e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002e90  07c0              LSLS     r0,r0,#31
002e92  d02c              BEQ      |L1.12014|
;;;4689   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
002e94  6fa0              LDR      r0,[r4,#0x78]
002e96  f0407000          ORR      r0,r0,#0x2000000
002e9a  67a0              STR      r0,[r4,#0x78]
                  |L1.11932|
;;;4690   	#endif
;;;4691   	
;;;4692   	
;;;4693   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002e9c  20d2              MOVS     r0,#0xd2
002e9e  f7fffffe          BL       mess_find_unvol
002ea2  b110              CBZ      r0,|L1.11946|
002ea4  6828              LDR      r0,[r5,#0]  ; mess_data
002ea6  286a              CMP      r0,#0x6a
002ea8  d026              BEQ      |L1.12024|
                  |L1.11946|
;;;4694   		{
;;;4695   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4696   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4697   	     }
;;;4698   	else 
;;;4699   		{
;;;4700   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002eaa  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002eac  4238              TST      r0,r7
002eae  d031              BEQ      |L1.12052|
;;;4701   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002eb0  69a0              LDR      r0,[r4,#0x18]
002eb2  f0400080          ORR      r0,r0,#0x80
002eb6  61a0              STR      r0,[r4,#0x18]
                  |L1.11960|
;;;4702   		} 
;;;4703   
;;;4704   	//Реле аварий батарей
;;;4705   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002eb8  20d2              MOVS     r0,#0xd2
002eba  f7fffffe          BL       mess_find_unvol
002ebe  b110              CBZ      r0,|L1.11974|
002ec0  6828              LDR      r0,[r5,#0]  ; mess_data
002ec2  2867              CMP      r0,#0x67
002ec4  d02b              BEQ      |L1.12062|
                  |L1.11974|
;;;4706   		{
;;;4707   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4708   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4709        	}
;;;4710   	else 
;;;4711   		{
;;;4712   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002ec6  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002eca  b390              CBZ      r0,|L1.12082|
;;;4713        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002ecc  69a0              LDR      r0,[r4,#0x18]
002ece  f0400010          ORR      r0,r0,#0x10
002ed2  61a0              STR      r0,[r4,#0x18]
002ed4  e054              B        |L1.12160|
                  |L1.11990|
002ed6  6868              LDR      r0,[r5,#4]            ;4685  ; mess_data
002ed8  b120              CBZ      r0,|L1.12004|
002eda  6fa0              LDR      r0,[r4,#0x78]         ;4686
002edc  f0407000          ORR      r0,r0,#0x2000000      ;4686
002ee0  67a0              STR      r0,[r4,#0x78]         ;4686
002ee2  e7db              B        |L1.11932|
                  |L1.12004|
002ee4  6fe0              LDR      r0,[r4,#0x7c]         ;4685
002ee6  f0407000          ORR      r0,r0,#0x2000000      ;4685
002eea  67e0              STR      r0,[r4,#0x7c]         ;4685
002eec  e7d6              B        |L1.11932|
                  |L1.12014|
002eee  6fe0              LDR      r0,[r4,#0x7c]         ;4688
002ef0  f0407000          ORR      r0,r0,#0x2000000      ;4688
002ef4  67e0              STR      r0,[r4,#0x7c]         ;4688
002ef6  e7d1              B        |L1.11932|
                  |L1.12024|
002ef8  6868              LDR      r0,[r5,#4]            ;4695  ; mess_data
002efa  b130              CBZ      r0,|L1.12042|
002efc  2801              CMP      r0,#1                 ;4696
002efe  d1db              BNE      |L1.11960|
002f00  69a0              LDR      r0,[r4,#0x18]         ;4696
002f02  f0400080          ORR      r0,r0,#0x80           ;4696
002f06  61a0              STR      r0,[r4,#0x18]         ;4696
002f08  e7d6              B        |L1.11960|
                  |L1.12042|
002f0a  69e0              LDR      r0,[r4,#0x1c]         ;4695
002f0c  f0400080          ORR      r0,r0,#0x80           ;4695
002f10  61e0              STR      r0,[r4,#0x1c]         ;4695
002f12  e7d1              B        |L1.11960|
                  |L1.12052|
002f14  69e0              LDR      r0,[r4,#0x1c]         ;4700
002f16  f0400080          ORR      r0,r0,#0x80           ;4700
002f1a  61e0              STR      r0,[r4,#0x1c]         ;4700
002f1c  e7cc              B        |L1.11960|
                  |L1.12062|
002f1e  6868              LDR      r0,[r5,#4]            ;4707  ; mess_data
002f20  b110              CBZ      r0,|L1.12072|
002f22  2801              CMP      r0,#1                 ;4708
002f24  d006              BEQ      |L1.12084|
002f26  e02b              B        |L1.12160|
                  |L1.12072|
002f28  69e0              LDR      r0,[r4,#0x1c]         ;4707
002f2a  f0400010          ORR      r0,r0,#0x10           ;4707
002f2e  61e0              STR      r0,[r4,#0x1c]         ;4707
002f30  e026              B        |L1.12160|
                  |L1.12082|
002f32  e004              B        |L1.12094|
                  |L1.12084|
002f34  69a0              LDR      r0,[r4,#0x18]         ;4708
002f36  f0400010          ORR      r0,r0,#0x10           ;4708
002f3a  61a0              STR      r0,[r4,#0x18]         ;4708
002f3c  e020              B        |L1.12160|
                  |L1.12094|
002f3e  69e0              LDR      r0,[r4,#0x1c]         ;4712
002f40  f0400010          ORR      r0,r0,#0x10           ;4712
002f44  61e0              STR      r0,[r4,#0x1c]         ;4712
002f46  e01b              B        |L1.12160|
                  |L1.12104|
;;;4714   		} 
;;;4715   	} 	 
;;;4716   else	
;;;4717   	{
;;;4718   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4719   	#ifndef UKU2071x 
;;;4720   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4721   		{
;;;4722   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4723   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4724   		}
;;;4725   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4726   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4727   	#endif
;;;4728   	#ifdef UKU2071x 
;;;4729   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002f48  20d2              MOVS     r0,#0xd2
002f4a  f7fffffe          BL       mess_find_unvol
002f4e  b110              CBZ      r0,|L1.12118|
002f50  6828              LDR      r0,[r5,#0]  ; mess_data
002f52  2866              CMP      r0,#0x66
002f54  d026              BEQ      |L1.12196|
                  |L1.12118|
;;;4730   		{
;;;4731   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4732   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4733   		}
;;;4734   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002f56  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002f58  07c0              LSLS     r0,r0,#31
002f5a  d02f              BEQ      |L1.12220|
;;;4735   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002f5c  6fa0              LDR      r0,[r4,#0x78]
002f5e  f0407000          ORR      r0,r0,#0x2000000
002f62  67a0              STR      r0,[r4,#0x78]
                  |L1.12132|
;;;4736   	#endif
;;;4737   
;;;4738   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002f64  20d2              MOVS     r0,#0xd2
002f66  f7fffffe          BL       mess_find_unvol
002f6a  b110              CBZ      r0,|L1.12146|
002f6c  6828              LDR      r0,[r5,#0]  ; mess_data
002f6e  286a              CMP      r0,#0x6a
002f70  d029              BEQ      |L1.12230|
                  |L1.12146|
;;;4739   		{
;;;4740   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4741   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4742        	}
;;;4743   	else 
;;;4744   		{
;;;4745   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
002f72  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002f74  4238              TST      r0,r7
002f76  d034              BEQ      |L1.12258|
;;;4746        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
002f78  69a0              LDR      r0,[r4,#0x18]
002f7a  f0400020          ORR      r0,r0,#0x20
002f7e  61a0              STR      r0,[r4,#0x18]
                  |L1.12160|
;;;4747   		}
;;;4748   	}
;;;4749   //Дополнительное реле УКУ 
;;;4750   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
002f80  20d2              MOVS     r0,#0xd2
002f82  f7fffffe          BL       mess_find_unvol
;;;4751   	{
;;;4752   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;4753   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;4754   	}
;;;4755   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;4756   	{
;;;4757   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
002f86  f8df83f8          LDR      r8,|L1.13184|
002f8a  4ffe              LDR      r7,|L1.13188|
002f8c  4efe              LDR      r6,|L1.13192|
002f8e  b110              CBZ      r0,|L1.12182|
002f90  6828              LDR      r0,[r5,#0]            ;4750  ; mess_data
002f92  2871              CMP      r0,#0x71              ;4750
002f94  d02a              BEQ      |L1.12268|
                  |L1.12182|
002f96  48fd              LDR      r0,|L1.13196|
002f98  f9b00000          LDRSH    r0,[r0,#0]            ;4755  ; DOP_RELE_FUNC
002f9c  b380              CBZ      r0,|L1.12288|
;;;4758   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;4759   	}
;;;4760   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
002f9e  2801              CMP      r0,#1
002fa0  d064              BEQ      |L1.12396|
002fa2  e06e              B        |L1.12418|
                  |L1.12196|
002fa4  6868              LDR      r0,[r5,#4]            ;4731  ; mess_data
002fa6  b120              CBZ      r0,|L1.12210|
002fa8  69e0              LDR      r0,[r4,#0x1c]         ;4732
002faa  f0407000          ORR      r0,r0,#0x2000000      ;4732
002fae  61e0              STR      r0,[r4,#0x1c]         ;4732
002fb0  e7d8              B        |L1.12132|
                  |L1.12210|
002fb2  69a0              LDR      r0,[r4,#0x18]         ;4731
002fb4  f0407000          ORR      r0,r0,#0x2000000      ;4731
002fb8  61a0              STR      r0,[r4,#0x18]         ;4731
002fba  e7d3              B        |L1.12132|
                  |L1.12220|
002fbc  6ba0              LDR      r0,[r4,#0x38]         ;4734
002fbe  f0407000          ORR      r0,r0,#0x2000000      ;4734
002fc2  63a0              STR      r0,[r4,#0x38]         ;4734
002fc4  e7ce              B        |L1.12132|
                  |L1.12230|
002fc6  6868              LDR      r0,[r5,#4]            ;4740  ; mess_data
002fc8  b130              CBZ      r0,|L1.12248|
002fca  2801              CMP      r0,#1                 ;4741
002fcc  d1d8              BNE      |L1.12160|
002fce  69a0              LDR      r0,[r4,#0x18]         ;4741
002fd0  f0400020          ORR      r0,r0,#0x20           ;4741
002fd4  61a0              STR      r0,[r4,#0x18]         ;4741
002fd6  e7d3              B        |L1.12160|
                  |L1.12248|
002fd8  69e0              LDR      r0,[r4,#0x1c]         ;4740
002fda  f0400020          ORR      r0,r0,#0x20           ;4740
002fde  61e0              STR      r0,[r4,#0x1c]         ;4740
002fe0  e7ce              B        |L1.12160|
                  |L1.12258|
002fe2  69e0              LDR      r0,[r4,#0x1c]         ;4745
002fe4  f0400020          ORR      r0,r0,#0x20           ;4745
002fe8  61e0              STR      r0,[r4,#0x1c]         ;4745
002fea  e7c9              B        |L1.12160|
                  |L1.12268|
002fec  6868              LDR      r0,[r5,#4]            ;4752  ; mess_data
002fee  b110              CBZ      r0,|L1.12278|
002ff0  2801              CMP      r0,#1                 ;4753
002ff2  d006              BEQ      |L1.12290|
002ff4  e045              B        |L1.12418|
                  |L1.12278|
002ff6  69e0              LDR      r0,[r4,#0x1c]         ;4752
002ff8  f4407000          ORR      r0,r0,#0x200          ;4752
002ffc  61e0              STR      r0,[r4,#0x1c]         ;4752
002ffe  e040              B        |L1.12418|
                  |L1.12288|
003000  e004              B        |L1.12300|
                  |L1.12290|
003002  69a0              LDR      r0,[r4,#0x18]         ;4753
003004  f4407000          ORR      r0,r0,#0x200          ;4753
003008  61a0              STR      r0,[r4,#0x18]         ;4753
00300a  e03a              B        |L1.12418|
                  |L1.12300|
00300c  48e0              LDR      r0,|L1.13200|
00300e  49e1              LDR      r1,|L1.13204|
003010  f9b00000          LDRSH    r0,[r0,#0]            ;4757  ; speedChIsOn
003014  b9c8              CBNZ     r0,|L1.12362|
003016  7fb2              LDRB     r2,[r6,#0x1e]         ;4757  ; spc_stat
003018  2a02              CMP      r2,#2                 ;4757
00301a  d016              BEQ      |L1.12362|
00301c  780a              LDRB     r2,[r1,#0]            ;4757  ; hv_vz_stat
00301e  b9a2              CBNZ     r2,|L1.12362|
003020  783a              LDRB     r2,[r7,#0]            ;4757  ; sp_ch_stat
003022  b992              CBNZ     r2,|L1.12362|
003024  7872              LDRB     r2,[r6,#1]            ;4757  ; vz1_stat
003026  b982              CBNZ     r2,|L1.12362|
003028  78f2              LDRB     r2,[r6,#3]            ;4757  ; vz2_stat
00302a  b972              CBNZ     r2,|L1.12362|
00302c  f9b82000          LDRSH    r2,[r8,#0]            ;4757  ; load_U
003030  230a              MOVS     r3,#0xa               ;4757
003032  fb92f2f3          SDIV     r2,r2,r3              ;4757
003036  4bd8              LDR      r3,|L1.13208|
003038  f9b33000          LDRSH    r3,[r3,#0]            ;4757  ; UVENTOFF
00303c  429a              CMP      r2,r3                 ;4757
00303e  da04              BGE      |L1.12362|
003040  69e0              LDR      r0,[r4,#0x1c]         ;4757
003042  f4407000          ORR      r0,r0,#0x200          ;4757
003046  61e0              STR      r0,[r4,#0x1c]         ;4757
003048  e01b              B        |L1.12418|
                  |L1.12362|
00304a  b950              CBNZ     r0,|L1.12386|
00304c  7fb0              LDRB     r0,[r6,#0x1e]         ;4758  ; spc_stat
00304e  2802              CMP      r0,#2                 ;4758
003050  d007              BEQ      |L1.12386|
003052  7808              LDRB     r0,[r1,#0]            ;4758  ; hv_vz_stat
003054  b928              CBNZ     r0,|L1.12386|
003056  7838              LDRB     r0,[r7,#0]            ;4758  ; sp_ch_stat
003058  b918              CBNZ     r0,|L1.12386|
00305a  7870              LDRB     r0,[r6,#1]            ;4758  ; vz1_stat
00305c  b908              CBNZ     r0,|L1.12386|
00305e  78f0              LDRB     r0,[r6,#3]            ;4758  ; vz2_stat
003060  b178              CBZ      r0,|L1.12418|
                  |L1.12386|
003062  69a0              LDR      r0,[r4,#0x18]         ;4758
003064  f4407000          ORR      r0,r0,#0x200          ;4758
003068  61a0              STR      r0,[r4,#0x18]         ;4758
00306a  e00a              B        |L1.12418|
                  |L1.12396|
;;;4761   	{
;;;4762   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
00306c  20d2              MOVS     r0,#0xd2
00306e  f7fffffe          BL       mess_find_unvol
003072  b110              CBZ      r0,|L1.12410|
003074  6828              LDR      r0,[r5,#0]  ; mess_data
003076  2872              CMP      r0,#0x72
003078  d017              BEQ      |L1.12458|
                  |L1.12410|
;;;4763   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
00307a  69a0              LDR      r0,[r4,#0x18]
00307c  f4407000          ORR      r0,r0,#0x200
003080  61a0              STR      r0,[r4,#0x18]
                  |L1.12418|
;;;4764   	}
;;;4765   	
;;;4766   //Блок выносной реле
;;;4767   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
003082  20d2              MOVS     r0,#0xd2
003084  f7fffffe          BL       mess_find_unvol
;;;4768   	{
;;;4769   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
003088  f8df9310          LDR      r9,|L1.13212|
;;;4770   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;4771   	}
;;;4772   else 
;;;4773   	{
;;;4774   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
00308c  4cc4              LDR      r4,|L1.13216|
00308e  b110              CBZ      r0,|L1.12438|
003090  6828              LDR      r0,[r5,#0]            ;4767  ; mess_data
003092  2875              CMP      r0,#0x75              ;4767
003094  d00e              BEQ      |L1.12468|
                  |L1.12438|
003096  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003098  07c0              LSLS     r0,r0,#31
00309a  d01e              BEQ      |L1.12506|
00309c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0030a0  f0400001          ORR      r0,r0,#1
0030a4  f8890000          STRB     r0,[r9,#0]
0030a8  e01d              B        |L1.12518|
                  |L1.12458|
0030aa  69e0              LDR      r0,[r4,#0x1c]         ;4762
0030ac  f4407000          ORR      r0,r0,#0x200          ;4762
0030b0  61e0              STR      r0,[r4,#0x1c]         ;4762
0030b2  e7e6              B        |L1.12418|
                  |L1.12468|
0030b4  6868              LDR      r0,[r5,#4]            ;4769  ; mess_data
0030b6  b110              CBZ      r0,|L1.12478|
0030b8  2801              CMP      r0,#1                 ;4770
0030ba  d007              BEQ      |L1.12492|
0030bc  e013              B        |L1.12518|
                  |L1.12478|
0030be  f8990000          LDRB     r0,[r9,#0]            ;4769  ; bdr_transmit_stat
0030c2  f00000fe          AND      r0,r0,#0xfe           ;4769
0030c6  f8890000          STRB     r0,[r9,#0]            ;4769
0030ca  e00c              B        |L1.12518|
                  |L1.12492|
0030cc  f8990000          LDRB     r0,[r9,#0]            ;4770  ; bdr_transmit_stat
0030d0  f0400001          ORR      r0,r0,#1              ;4770
0030d4  f8890000          STRB     r0,[r9,#0]            ;4770
0030d8  e005              B        |L1.12518|
                  |L1.12506|
;;;4775   	else 						bdr_transmit_stat&=0xfe;
0030da  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0030de  f00000fe          AND      r0,r0,#0xfe
0030e2  f8890000          STRB     r0,[r9,#0]
                  |L1.12518|
;;;4776   	}	
;;;4777   
;;;4778   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
0030e6  20d2              MOVS     r0,#0xd2
0030e8  f7fffffe          BL       mess_find_unvol
0030ec  b110              CBZ      r0,|L1.12532|
0030ee  6828              LDR      r0,[r5,#0]  ; mess_data
0030f0  2876              CMP      r0,#0x76
0030f2  d009              BEQ      |L1.12552|
                  |L1.12532|
;;;4779   	{
;;;4780   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;4781   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;4782   	}
;;;4783   else 
;;;4784   	{
;;;4785   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
0030f4  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0030f6  07c0              LSLS     r0,r0,#31
0030f8  d019              BEQ      |L1.12590|
0030fa  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0030fe  f0400002          ORR      r0,r0,#2
003102  f8890000          STRB     r0,[r9,#0]
003106  e018              B        |L1.12602|
                  |L1.12552|
003108  6868              LDR      r0,[r5,#4]            ;4780  ; mess_data
00310a  b110              CBZ      r0,|L1.12562|
00310c  2801              CMP      r0,#1                 ;4781
00310e  d007              BEQ      |L1.12576|
003110  e013              B        |L1.12602|
                  |L1.12562|
003112  f8990000          LDRB     r0,[r9,#0]            ;4780  ; bdr_transmit_stat
003116  f00000fd          AND      r0,r0,#0xfd           ;4780
00311a  f8890000          STRB     r0,[r9,#0]            ;4780
00311e  e00c              B        |L1.12602|
                  |L1.12576|
003120  f8990000          LDRB     r0,[r9,#0]            ;4781  ; bdr_transmit_stat
003124  f0400002          ORR      r0,r0,#2              ;4781
003128  f8890000          STRB     r0,[r9,#0]            ;4781
00312c  e005              B        |L1.12602|
                  |L1.12590|
;;;4786   	else 						bdr_transmit_stat&=0xfd;
00312e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003132  f00000fd          AND      r0,r0,#0xfd
003136  f8890000          STRB     r0,[r9,#0]
                  |L1.12602|
;;;4787   	}	
;;;4788   	
;;;4789   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
00313a  20d2              MOVS     r0,#0xd2
00313c  f7fffffe          BL       mess_find_unvol
003140  b110              CBZ      r0,|L1.12616|
003142  6828              LDR      r0,[r5,#0]  ; mess_data
003144  2877              CMP      r0,#0x77
003146  d009              BEQ      |L1.12636|
                  |L1.12616|
;;;4790   	{
;;;4791   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;4792   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;4793   	}
;;;4794   else 
;;;4795   	{
;;;4796   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
003148  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00314a  07c0              LSLS     r0,r0,#31
00314c  d019              BEQ      |L1.12674|
00314e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003152  f0400004          ORR      r0,r0,#4
003156  f8890000          STRB     r0,[r9,#0]
00315a  e018              B        |L1.12686|
                  |L1.12636|
00315c  6868              LDR      r0,[r5,#4]            ;4791  ; mess_data
00315e  b110              CBZ      r0,|L1.12646|
003160  2801              CMP      r0,#1                 ;4792
003162  d007              BEQ      |L1.12660|
003164  e013              B        |L1.12686|
                  |L1.12646|
003166  f8990000          LDRB     r0,[r9,#0]            ;4791  ; bdr_transmit_stat
00316a  f00000fb          AND      r0,r0,#0xfb           ;4791
00316e  f8890000          STRB     r0,[r9,#0]            ;4791
003172  e00c              B        |L1.12686|
                  |L1.12660|
003174  f8990000          LDRB     r0,[r9,#0]            ;4792  ; bdr_transmit_stat
003178  f0400004          ORR      r0,r0,#4              ;4792
00317c  f8890000          STRB     r0,[r9,#0]            ;4792
003180  e005              B        |L1.12686|
                  |L1.12674|
;;;4797   	else 						bdr_transmit_stat&=0xfb;
003182  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003186  f00000fb          AND      r0,r0,#0xfb
00318a  f8890000          STRB     r0,[r9,#0]
                  |L1.12686|
;;;4798   	}	
;;;4799   	
;;;4800   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
00318e  20d2              MOVS     r0,#0xd2
003190  f7fffffe          BL       mess_find_unvol
003194  b110              CBZ      r0,|L1.12700|
003196  6828              LDR      r0,[r5,#0]  ; mess_data
003198  2878              CMP      r0,#0x78
00319a  d009              BEQ      |L1.12720|
                  |L1.12700|
;;;4801   	{
;;;4802   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;4803   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;4804   	}
;;;4805   else 
;;;4806   	{
;;;4807   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
00319c  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00319e  07c0              LSLS     r0,r0,#31
0031a0  d019              BEQ      |L1.12758|
0031a2  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0031a6  f0400008          ORR      r0,r0,#8
0031aa  f8890000          STRB     r0,[r9,#0]
0031ae  e018              B        |L1.12770|
                  |L1.12720|
0031b0  6868              LDR      r0,[r5,#4]            ;4802  ; mess_data
0031b2  b110              CBZ      r0,|L1.12730|
0031b4  2801              CMP      r0,#1                 ;4803
0031b6  d007              BEQ      |L1.12744|
0031b8  e013              B        |L1.12770|
                  |L1.12730|
0031ba  f8990000          LDRB     r0,[r9,#0]            ;4802  ; bdr_transmit_stat
0031be  f00000f7          AND      r0,r0,#0xf7           ;4802
0031c2  f8890000          STRB     r0,[r9,#0]            ;4802
0031c6  e00c              B        |L1.12770|
                  |L1.12744|
0031c8  f8990000          LDRB     r0,[r9,#0]            ;4803  ; bdr_transmit_stat
0031cc  f0400008          ORR      r0,r0,#8              ;4803
0031d0  f8890000          STRB     r0,[r9,#0]            ;4803
0031d4  e005              B        |L1.12770|
                  |L1.12758|
;;;4808   	else 						bdr_transmit_stat&=0xf7;
0031d6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0031da  f00000f7          AND      r0,r0,#0xf7
0031de  f8890000          STRB     r0,[r9,#0]
                  |L1.12770|
;;;4809   	}	
;;;4810   					 	
;;;4811   #endif
;;;4812   
;;;4813   #ifdef UKU_KONTUR
;;;4814   
;;;4815   //Реле общей аварии
;;;4816   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4817   	{
;;;4818   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4819   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4820   	}
;;;4821   else 
;;;4822   	{
;;;4823        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4824             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4825             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4826             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4827             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4828        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4829   	}
;;;4830   
;;;4831   	
;;;4832   //rel_warm_plazma=0;
;;;4833   //Реле освещения   
;;;4834   /*
;;;4835   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4836   	{
;;;4837   	if(mess_data[1]==0)
;;;4838   		{
;;;4839   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4840   		rel_warm_plazma=1;
;;;4841   		}
;;;4842   	else if(mess_data[1]==1) 
;;;4843   		{
;;;4844   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4845   		rel_warm_plazma=2;
;;;4846   		}
;;;4847        }
;;;4848   else 
;;;4849   	{
;;;4850   	if(warm_stat_k==wsOFF) 
;;;4851   		{
;;;4852   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4853   		rel_warm_plazma=3;
;;;4854   		}
;;;4855        else 
;;;4856   		{
;;;4857   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4858   		rel_warm_plazma=4;
;;;4859   		}
;;;4860   	}
;;;4861   */
;;;4862   //Реле освещения
;;;4863   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4864   	{
;;;4865   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4866   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4867        }
;;;4868   else 
;;;4869   	{
;;;4870   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4871        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4872   	}
;;;4873   
;;;4874   
;;;4875   
;;;4876   //Реле выключения нагрузки
;;;4877   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4878   	{
;;;4879   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4880   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4881        }
;;;4882   else if(tloaddisable_cmnd==0)
;;;4883   	{
;;;4884   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4885   	}
;;;4886   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4887   	{
;;;4888   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4889   	}
;;;4890   
;;;4891   else 
;;;4892   	{
;;;4893   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4894        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4895   	} 
;;;4896   
;;;4897   //Реле осевого вентилятора или отопителя
;;;4898   if(RELE_LOG)
;;;4899   	{
;;;4900   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4901   		{
;;;4902   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4903   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4904   		}
;;;4905   	else 
;;;4906   		{
;;;4907   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4908   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4909   		} 
;;;4910   
;;;4911   	}
;;;4912   else 
;;;4913   	{
;;;4914   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4915   		{
;;;4916   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4917   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4918   		}
;;;4919   	else 
;;;4920   		{
;;;4921   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4922   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4923   		} 
;;;4924   	}
;;;4925   #endif
;;;4926   
;;;4927   
;;;4928   #ifdef UKU_TELECORE2015
;;;4929   //Реле аварии сети
;;;4930   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4931   	{
;;;4932   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4933   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4934   	}
;;;4935   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4936   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4937   
;;;4938   
;;;4939   //Реле освещения
;;;4940   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4941   	{
;;;4942   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4943   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4944        }
;;;4945   else 
;;;4946   	{
;;;4947   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4948        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4949   	}
;;;4950   
;;;4951   //Реле отопителя
;;;4952   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;4953   	{
;;;4954   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4955   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4956   	}
;;;4957   else 
;;;4958   	{
;;;4959   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4960        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4961   	} 
;;;4962   //Реле вентилятора
;;;4963   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4964   	{
;;;4965   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4966   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4967   	}
;;;4968   else 
;;;4969   	{
;;;4970   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4971        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4972   	} 
;;;4973   
;;;4974   //Реле внутреннего вентилятора
;;;4975   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;4976   	{
;;;4977   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4978   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4979   	}
;;;4980   else 
;;;4981   	{
;;;4982   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4983        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4984   	} 
;;;4985   
;;;4986   #endif
;;;4987   
;;;4988   #ifdef UKU_TELECORE2017
;;;4989   //Реле аварии сети
;;;4990   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4991   	{
;;;4992   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4993   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4994   	}
;;;4995   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4996   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4997   
;;;4998   
;;;4999   //Реле освещения
;;;5000   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5001   	{
;;;5002   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5003   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5004        }
;;;5005   else 
;;;5006   	{
;;;5007   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5008        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5009   	}
;;;5010   
;;;5011   //Реле отопителя
;;;5012   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5013   	{
;;;5014   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5015   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5016   	}
;;;5017   else 
;;;5018   	{
;;;5019   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5020        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5021   	} 
;;;5022   //Реле вентилятора
;;;5023   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5024   	{
;;;5025   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5026   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5027   	}
;;;5028   else 
;;;5029   	{
;;;5030   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5031        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5032   	} 
;;;5033   
;;;5034   //Реле внутреннего вентилятора
;;;5035   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5036   	{
;;;5037   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5038   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5039   	}
;;;5040   else 
;;;5041   	{
;;;5042   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5043        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5044   	} 
;;;5045   
;;;5046   //Реле выключения нагрузки
;;;5047   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5048   	{
;;;5049   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5050   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5051        }
;;;5052   else if(tloaddisable_cmnd==0)
;;;5053   	{
;;;5054   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5055   	}
;;;5056   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5057   	{
;;;5058   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5059   	}
;;;5060   
;;;5061   else 
;;;5062   	{
;;;5063   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5064        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5065   	} 
;;;5066   
;;;5067   
;;;5068   #endif
;;;5069   
;;;5070   #ifdef IPS_SGEP_GAZPROM
;;;5071   rele_hndl_plazma[0]++;
;;;5072   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5073   	{
;;;5074   	rele_hndl_plazma[1]++;
;;;5075   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5076   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5077        }
;;;5078   else 
;;;5079   	{
;;;5080   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5081        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5082   	} 
;;;5083   
;;;5084   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5085   	{
;;;5086   	rele_hndl_plazma[2]++;
;;;5087   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5088   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5089   	}
;;;5090   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5091   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5092   #endif
;;;5093   
;;;5094   if(NUMBDR==1)
0031e2  4870              LDR      r0,|L1.13220|
0031e4  8800              LDRH     r0,[r0,#0]  ; NUMBDR
0031e6  2801              CMP      r0,#1
0031e8  d17e              BNE      |L1.13032|
;;;5095   	{
;;;5096   	char ii_;
;;;5097   	char bdr_avar_stat_temp=0;
0031ea  f04f0000          MOV      r0,#0
;;;5098   	for	(ii_=0;ii_<4;ii_++)
0031ee  4601              MOV      r1,r0
;;;5099   		{
;;;5100   		//АБ разряжена
;;;5101   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5102   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5103   		//Ускоренный заряд
;;;5104   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5105   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5106   		//Выравнивающий заряд
;;;5107   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5108   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5109   		//Общая авария ЗВУ
;;;5110   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5111   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5112   		//Uвых завышено
;;;5113   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5114   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
0031f0  f8dfa1b4          LDR      r10,|L1.13224|
;;;5115   		//Uвых занижено
;;;5116   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5117   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5118   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5119   			(
;;;5120   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
0031f4  f8df91b4          LDR      r9,|L1.13228|
0031f8  4d6d              LDR      r5,|L1.13232|
0031fa  f8dfb1b8          LDR      r11,|L1.13236|
0031fe  f04f0301          MOV      r3,#1                 ;4052
                  |L1.12802|
003202  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5101
003206  ea5f7cc2          LSLS     r12,r2,#31            ;5101
00320a  d010              BEQ      |L1.12846|
00320c  f8dfc1a8          LDR      r12,|L1.13240|
003210  f9b8e000          LDRSH    lr,[r8,#0]            ;5102  ; load_U
003214  f9bcc000          LDRSH    r12,[r12,#0]          ;5102  ; USIGN
003218  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5102
00321c  ebbe0f4c          CMP      lr,r12,LSL #1         ;5102
003220  da05              BGE      |L1.12846|
003222  fa03fc01          LSL      r12,r3,r1             ;5102
003226  ea4c0c00          ORR      r12,r12,r0            ;5102
00322a  f00c00ff          AND      r0,r12,#0xff          ;5102
                  |L1.12846|
00322e  ea5f7c82          LSLS     r12,r2,#30            ;5104
003232  d50a              BPL      |L1.12874|
003234  f897c000          LDRB     r12,[r7,#0]           ;5105  ; sp_ch_stat
003238  f1bc0f02          CMP      r12,#2                ;5105
00323c  d105              BNE      |L1.12874|
00323e  fa03fc01          LSL      r12,r3,r1             ;5105
003242  ea4c0c00          ORR      r12,r12,r0            ;5105
003246  f00c00ff          AND      r0,r12,#0xff          ;5105
                  |L1.12874|
00324a  ea5f7c42          LSLS     r12,r2,#29            ;5107
00324e  d50a              BPL      |L1.12902|
003250  f896c01e          LDRB     r12,[r6,#0x1e]        ;5108  ; spc_stat
003254  f1bc0f02          CMP      r12,#2                ;5108
003258  d105              BNE      |L1.12902|
00325a  fa03fc01          LSL      r12,r3,r1             ;5108
00325e  ea4c0c00          ORR      r12,r12,r0            ;5108
003262  f00c00ff          AND      r0,r12,#0xff          ;5108
                  |L1.12902|
003266  ea5f7c02          LSLS     r12,r2,#28            ;5110
00326a  d50c              BPL      |L1.12934|
00326c  f8dfc14c          LDR      r12,|L1.13244|
003270  f8dcc000          LDR      r12,[r12,#0]          ;5111  ; avar_stat
003274  f1bc0f00          CMP      r12,#0                ;5111
003278  d005              BEQ      |L1.12934|
00327a  fa03fc01          LSL      r12,r3,r1             ;5111
00327e  ea4c0c00          ORR      r12,r12,r0            ;5111
003282  f00c00ff          AND      r0,r12,#0xff          ;5111
                  |L1.12934|
003286  ea5f6cc2          LSLS     r12,r2,#27            ;5113
00328a  d50a              BPL      |L1.12962|
00328c  f89ac000          LDRB     r12,[r10,#0]          ;5114  ; uout_av
003290  f1bc0f01          CMP      r12,#1                ;5114
003294  d105              BNE      |L1.12962|
003296  fa03fc01          LSL      r12,r3,r1             ;5114
00329a  ea4c0c00          ORR      r12,r12,r0            ;5114
00329e  f00c00ff          AND      r0,r12,#0xff          ;5114
                  |L1.12962|
0032a2  ea5f6c82          LSLS     r12,r2,#26            ;5116
0032a6  d50a              BPL      |L1.12990|
0032a8  f89ac000          LDRB     r12,[r10,#0]          ;5117  ; uout_av
0032ac  f1bc0f02          CMP      r12,#2                ;5117
0032b0  d105              BNE      |L1.12990|
0032b2  fa03fc01          LSL      r12,r3,r1             ;5117
0032b6  ea4c0c00          ORR      r12,r12,r0            ;5117
0032ba  f00c00ff          AND      r0,r12,#0xff          ;5117
                  |L1.12990|
0032be  ea5f6c42          LSLS     r12,r2,#25            ;5118
0032c2  d525              BPL      |L1.13072|
0032c4  f899c001          LDRB     r12,[r9,#1]  ; bps
0032c8  ea5f6ccc          LSLS     r12,r12,#27
0032cc  d504              BPL      |L1.13016|
0032ce  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0032d2  f1bc0f01          CMP      r12,#1
0032d6  da15              BGE      |L1.13060|
                  |L1.13016|
;;;5121   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
0032d8  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
0032dc  ea5f6ccc          LSLS     r12,r12,#27
0032e0  d506              BPL      |L1.13040|
0032e2  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0032e6  e000              B        |L1.13034|
                  |L1.13032|
0032e8  e047              B        |L1.13178|
                  |L1.13034|
0032ea  f1bc0f02          CMP      r12,#2
0032ee  da09              BGE      |L1.13060|
                  |L1.13040|
;;;5122   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
0032f0  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
0032f4  ea5f6ccc          LSLS     r12,r12,#27
0032f8  d50a              BPL      |L1.13072|
0032fa  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0032fe  f1bc0f03          CMP      r12,#3
003302  db05              BLT      |L1.13072|
                  |L1.13060|
;;;5123   			))bdr_avar_stat_temp|=(1<<ii_);
003304  fa03fc01          LSL      r12,r3,r1
003308  ea4c0c00          ORR      r12,r12,r0
00330c  f00c00ff          AND      r0,r12,#0xff
                  |L1.13072|
;;;5124   		if((RELE_SET_MASK[ii_]&0x80)&&
003310  ea5f6c02          LSLS     r12,r2,#24
003314  d523              BPL      |L1.13150|
;;;5125   			(
;;;5126   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
003316  f899c001          LDRB     r12,[r9,#1]  ; bps
00331a  ea5f7c0c          LSLS     r12,r12,#28
00331e  d004              BEQ      |L1.13098|
003320  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003324  f1bc0f01          CMP      r12,#1
003328  da13              BGE      |L1.13138|
                  |L1.13098|
;;;5127   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
00332a  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
00332e  ea5f7c0c          LSLS     r12,r12,#28
003332  d004              BEQ      |L1.13118|
003334  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003338  f1bc0f02          CMP      r12,#2
00333c  da09              BGE      |L1.13138|
                  |L1.13118|
;;;5128   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
00333e  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003342  ea5f7c0c          LSLS     r12,r12,#28
003346  d00a              BEQ      |L1.13150|
003348  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00334c  f1bc0f03          CMP      r12,#3
003350  db05              BLT      |L1.13150|
                  |L1.13138|
;;;5129   			))bdr_avar_stat_temp|=(1<<ii_);
003352  fa03fc01          LSL      r12,r3,r1
003356  ea4c0c00          ORR      r12,r12,r0
00335a  f00c00ff          AND      r0,r12,#0xff
                  |L1.13150|
;;;5130   
;;;5131   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
00335e  0412              LSLS     r2,r2,#16
003360  d404              BMI      |L1.13164|
003362  fa03f201          LSL      r2,r3,r1
003366  ea820200          EOR      r2,r2,r0
00336a  b2d0              UXTB     r0,r2
                  |L1.13164|
00336c  f1010101          ADD      r1,r1,#1              ;5098
003370  b2c9              UXTB     r1,r1                 ;5098
003372  2904              CMP      r1,#4                 ;5098
003374  f4ffaf45          BCC      |L1.12802|
;;;5132   		}
;;;5133   	bdr_avar_stat=bdr_avar_stat_temp;
003378  7020              STRB     r0,[r4,#0]
                  |L1.13178|
;;;5134   	}
;;;5135   }
00337a  e8bd9ff0          POP      {r4-r12,pc}
00337e  0000              DCW      0x0000
                  |L1.13184|
                          DCD      load_U
                  |L1.13188|
                          DCD      sp_ch_stat
                  |L1.13192|
                          DCD      ||area_number.25||
                  |L1.13196|
                          DCD      DOP_RELE_FUNC
                  |L1.13200|
                          DCD      speedChIsOn
                  |L1.13204|
                          DCD      hv_vz_stat
                  |L1.13208|
                          DCD      UVENTOFF
                  |L1.13212|
                          DCD      bdr_transmit_stat
                  |L1.13216|
                          DCD      bdr_avar_stat
                  |L1.13220|
                          DCD      NUMBDR
                  |L1.13224|
                          DCD      uout_av
                  |L1.13228|
                          DCD      bps
                  |L1.13232|
                          DCD      NUMIST
                  |L1.13236|
                          DCD      RELE_SET_MASK
                  |L1.13240|
                          DCD      USIGN
                  |L1.13244|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;5138   //-----------------------------------------------
;;;5139   void bps_hndl(void)
0033c0  e92d5ff0          PUSH     {r4-r12,lr}
;;;5140   {
;;;5141   char ptr__,i;
;;;5142   unsigned short tempUS;
;;;5143   
;;;5144   if(sh_cnt0<10)
0033c4  4efc              LDR      r6,|L1.14264|
;;;5145   	{
;;;5146   	sh_cnt0++;
;;;5147   	if(sh_cnt0>=10)
;;;5148   		{
;;;5149   		sh_cnt0=0;
0033c6  2700              MOVS     r7,#0
;;;5150   		b1Hz_sh=1;
0033c8  f04f0a01          MOV      r10,#1
0033cc  7f30              LDRB     r0,[r6,#0x1c]         ;5144  ; sh_cnt0
0033ce  280a              CMP      r0,#0xa               ;5144
0033d0  d208              BCS      |L1.13284|
0033d2  f1000001          ADD      r0,r0,#1              ;5146
0033d6  b2c0              UXTB     r0,r0                 ;5146
0033d8  7730              STRB     r0,[r6,#0x1c]         ;5146
0033da  280a              CMP      r0,#0xa               ;5147
0033dc  d302              BCC      |L1.13284|
0033de  7737              STRB     r7,[r6,#0x1c]         ;5149
0033e0  f886a01d          STRB     r10,[r6,#0x1d]
                  |L1.13284|
;;;5151   		}
;;;5152   	}
;;;5153   
;;;5154   /*if(sh_cnt1<5)
;;;5155   	{
;;;5156   	sh_cnt1++;
;;;5157   	if(sh_cnt1==5)
;;;5158   		{
;;;5159   		sh_cnt1=0;
;;;5160   		b2Hz_sh=1;
;;;5161   		}
;;;5162   	} */
;;;5163   
;;;5164   
;;;5165   /*
;;;5166   if(mess_find(MESS_SRC_ON_OFF))
;;;5167   	{
;;;5168   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;5169   		{
;;;5170   		char i;
;;;5171   		for(i=0;i<NUMIST;i++)
;;;5172   			{
;;;5173   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;5174   			}
;;;5175   		
;;;5176   		}
;;;5177   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;5178   		{
;;;5179   		char i;
;;;5180   		for(i=0;i<NUMIST;i++)
;;;5181   			{
;;;5182   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;5183   			}
;;;5184   		
;;;5185   		}
;;;5186   	}
;;;5187   	
;;;5188   else if(mess_find(_MESS_SRC_MASK_ON))
;;;5189   	{				
;;;5190   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;5191   		{
;;;5192   		char i;
;;;5193   		for(i=0;i<NUMIST;i++)
;;;5194   			{
;;;5195   			if(mess_data[1]&(1<<i))
;;;5196   				{
;;;5197   				src[i]._ist_blok_cnt=0;
;;;5198   				src[i]._flags_tu=2;
;;;5199   				}
;;;5200   			}
;;;5201   		
;;;5202   		}				
;;;5203   	}*/
;;;5204   
;;;5205   
;;;5206   
;;;5207   /*else*/ 
;;;5208   bps_on_mask=0;
0033e4  f8a67058          STRH     r7,[r6,#0x58]
;;;5209   bps_off_mask=0;
0033e8  f8a6705a          STRH     r7,[r6,#0x5a]
;;;5210   
;;;5211   if(mess_find_unvol(MESS2BPS_HNDL))
0033ec  20cd              MOVS     r0,#0xcd
0033ee  f7fffffe          BL       mess_find_unvol
;;;5212   	{
;;;5213   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;5214   		{
;;;5215   		bps_off_mask=0xffff;
;;;5216   		}
;;;5217   
;;;5218   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;5219   		{
;;;5220   		bps_off_mask=mess_data[1];
;;;5221   		}
;;;5222   
;;;5223   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5224   		{
;;;5225   		bps_on_mask=mess_data[1];
;;;5226   		}
;;;5227   
;;;5228   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;5229   		{
;;;5230   		bps_on_mask=0xffff;
;;;5231   		}
;;;5232   
;;;5233   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;5234   		{
;;;5235   		bps_on_mask=mess_data[1];
;;;5236   		bps_off_mask=~(mess_data[1]);
;;;5237   		}
;;;5238   
;;;5239   
;;;5240   	for(i=0;i<=NUMIST;i++)
;;;5241   		{
;;;5242   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
0033f2  f8df83c8          LDR      r8,|L1.14268|
0033f6  f8dfb3c8          LDR      r11,|L1.14272|
0033fa  b3a0              CBZ      r0,|L1.13414|
0033fc  4af1              LDR      r2,|L1.14276|
0033fe  f64f73ff          MOV      r3,#0xffff            ;5215
003402  6810              LDR      r0,[r2,#0]            ;5213  ; mess_data
003404  28ce              CMP      r0,#0xce              ;5213
003406  d101              BNE      |L1.13324|
003408  f8a6305a          STRH     r3,[r6,#0x5a]         ;5215
                  |L1.13324|
00340c  28cf              CMP      r0,#0xcf              ;5218
00340e  d102              BNE      |L1.13334|
003410  6851              LDR      r1,[r2,#4]            ;5220  ; mess_data
003412  f8a6105a          STRH     r1,[r6,#0x5a]         ;5220
                  |L1.13334|
003416  28d1              CMP      r0,#0xd1              ;5223
003418  d102              BNE      |L1.13344|
00341a  6851              LDR      r1,[r2,#4]            ;5225  ; mess_data
00341c  f8a61058          STRH     r1,[r6,#0x58]         ;5225
                  |L1.13344|
003420  28d2              CMP      r0,#0xd2              ;5228
003422  d101              BNE      |L1.13352|
003424  f8a63058          STRH     r3,[r6,#0x58]         ;5230
                  |L1.13352|
003428  28d0              CMP      r0,#0xd0              ;5233
00342a  d106              BNE      |L1.13370|
00342c  6850              LDR      r0,[r2,#4]            ;5235  ; mess_data
00342e  f8a60058          STRH     r0,[r6,#0x58]         ;5235
003432  ea6f0000          MVN      r0,r0                 ;5236
003436  f8a6005a          STRH     r0,[r6,#0x5a]         ;5236
                  |L1.13370|
00343a  f04f0400          MOV      r4,#0                 ;5240
00343e  e037              B        |L1.13488|
                  |L1.13376|
003440  f8b6005a          LDRH     r0,[r6,#0x5a]  ; bps_off_mask
003444  fa0af904          LSL      r9,r10,r4
003448  ea190f00          TST      r9,r0
00344c  d00c              BEQ      |L1.13416|
00344e  ebc400c4          RSB      r0,r4,r4,LSL #3
003452  eb001004          ADD      r0,r0,r4,LSL #4
003456  eb080080          ADD      r0,r8,r0,LSL #2
00345a  f8301f40          LDRH     r1,[r0,#0x40]!
00345e  f1010101          ADD      r1,r1,#1
003462  8001              STRH     r1,[r0,#0]
003464  e008              B        |L1.13432|
                  |L1.13414|
003466  e028              B        |L1.13498|
                  |L1.13416|
;;;5243   		else bps[i]._blok_cnt=0;
003468  ebc400c4          RSB      r0,r4,r4,LSL #3
00346c  eb001004          ADD      r0,r0,r4,LSL #4
003470  eb080080          ADD      r0,r8,r0,LSL #2
003474  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.13432|
;;;5244   		gran(&bps[i]._blok_cnt,0,50);
003478  ebc400c4          RSB      r0,r4,r4,LSL #3
00347c  eb001004          ADD      r0,r0,r4,LSL #4
003480  eb080580          ADD      r5,r8,r0,LSL #2
003484  f1050040          ADD      r0,r5,#0x40
003488  2232              MOVS     r2,#0x32
00348a  2100              MOVS     r1,#0
00348c  f7fffffe          BL       gran
;;;5245   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
003490  f9b50040          LDRSH    r0,[r5,#0x40]
003494  2814              CMP      r0,#0x14
003496  dd01              BLE      |L1.13468|
003498  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.13468|
;;;5246   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
00349c  f8b60058          LDRH     r0,[r6,#0x58]  ; bps_on_mask
0034a0  ea190f00          TST      r9,r0
0034a4  d001              BEQ      |L1.13482|
0034a6  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.13482|
0034aa  f1040401          ADD      r4,r4,#1              ;5240
0034ae  b2e4              UXTB     r4,r4                 ;5240
                  |L1.13488|
0034b0  f9bb0000          LDRSH    r0,[r11,#0]           ;5240  ; NUMIST
0034b4  4284              CMP      r4,r0                 ;5240
0034b6  ddc3              BLE      |L1.13376|
0034b8  e08c              B        |L1.13780|
                  |L1.13498|
;;;5247   	     }
;;;5248   
;;;5249   	
;;;5250   /*
;;;5251   
;;;5252   	if(bps_all_off_cnt>20)
;;;5253   		{
;;;5254   		for(i=0;i<=NUMIST;i++)
;;;5255   			{
;;;5256   	     	bps[i]._flags_tu=1;
;;;5257   	     	}
;;;5258   		}
;;;5259   	else if(bps_mask_off_cnt>20)
;;;5260   		{
;;;5261   		for(i=0;i<=NUMIST;i++)
;;;5262   			{
;;;5263   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5264   	     	}
;;;5265   		}	
;;;5266   		
;;;5267   	else if(bps_mask_on_off_cnt>20)
;;;5268   		{
;;;5269   		for(i=0;i<=NUMIST;i++)
;;;5270   			{
;;;5271   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5272   			else bps[i]._flags_tu=0;
;;;5273   	     	}
;;;5274   		}
;;;5275   		
;;;5276   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5277   		{
;;;5278   		for(i=0;i<=NUMIST;i++)
;;;5279   			{
;;;5280   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;5281   	     	}
;;;5282   		}
;;;5283   */										
;;;5284   	}
;;;5285   
;;;5286   
;;;5287   else if(b1Hz_sh)
0034ba  7f70              LDRB     r0,[r6,#0x1d]  ; b1Hz_sh
0034bc  b3e8              CBZ      r0,|L1.13626|
;;;5288   	{
;;;5289   	ptr__=0;
0034be  f04f0400          MOV      r4,#0
;;;5290        for(i=0;i<=NUMIST;i++)
0034c2  4621              MOV      r1,r4
0034c4  f9bb0000          LDRSH    r0,[r11,#0]           ;5240
0034c8  e00a              B        |L1.13536|
                  |L1.13514|
;;;5291   		{
;;;5292   	     bps[i]._flags_tu=1;
0034ca  ebc102c1          RSB      r2,r1,r1,LSL #3
0034ce  eb021201          ADD      r2,r2,r1,LSL #4
0034d2  eb080282          ADD      r2,r8,r2,LSL #2
0034d6  f882a02c          STRB     r10,[r2,#0x2c]
0034da  f1010101          ADD      r1,r1,#1              ;5290
0034de  b2c9              UXTB     r1,r1                 ;5290
                  |L1.13536|
0034e0  4281              CMP      r1,r0                 ;5290
0034e2  ddf2              BLE      |L1.13514|
;;;5293   	     }	
;;;5294     	     
;;;5295     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
0034e4  f04f0100          MOV      r1,#0
0034e8  e023              B        |L1.13618|
                  |L1.13546|
;;;5296     		{
;;;5297   		char ii,iii;
;;;5298   
;;;5299   		ii=(char)NUMIST;
0034ea  b2c2              UXTB     r2,r0
;;;5300   		//if(ii<0)ii=0;
;;;5301   		if(ii>32)ii=32;
0034ec  2a20              CMP      r2,#0x20
0034ee  d901              BLS      |L1.13556|
0034f0  f04f0220          MOV      r2,#0x20
                  |L1.13556|
;;;5302   		iii=numOfForvardBps;
0034f4  f8963023          LDRB     r3,[r6,#0x23]  ; numOfForvardBps
;;;5303   		//if(iii<0)iii=0;
;;;5304   		if(iii>=NUMIST)iii=0;
0034f8  4283              CMP      r3,r0
0034fa  db01              BLT      |L1.13568|
0034fc  f04f0300          MOV      r3,#0
                  |L1.13568|
;;;5305   		iii+=i;
003500  440b              ADD      r3,r3,r1
003502  b2db              UXTB     r3,r3
;;;5306   		iii=iii%ii;
003504  fbb3f5f2          UDIV     r5,r3,r2
003508  fb023215          MLS      r2,r2,r5,r3
;;;5307   		
;;;5308     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
00350c  ebc203c2          RSB      r3,r2,r2,LSL #3
003510  eb031202          ADD      r2,r3,r2,LSL #4
003514  eb080282          ADD      r2,r8,r2,LSL #2
003518  7893              LDRB     r3,[r2,#2]
00351a  2b02              CMP      r3,#2
00351c  d001              BEQ      |L1.13602|
00351e  2b01              CMP      r3,#1
003520  d104              BNE      |L1.13612|
                  |L1.13602|
;;;5309     	         	{
;;;5310     	         	bps[iii]._flags_tu=0;
003522  f882702c          STRB     r7,[r2,#0x2c]
;;;5311     	         	ptr__++;
003526  f1040401          ADD      r4,r4,#1
00352a  b2e4              UXTB     r4,r4
                  |L1.13612|
00352c  f1010101          ADD      r1,r1,#1              ;5295
003530  b2c9              UXTB     r1,r1                 ;5295
                  |L1.13618|
003532  4281              CMP      r1,r0                 ;5295
003534  da06              BGE      |L1.13636|
003536  4aa4              LDR      r2,|L1.14280|
003538  e000              B        |L1.13628|
                  |L1.13626|
00353a  e04b              B        |L1.13780|
                  |L1.13628|
00353c  f9b22000          LDRSH    r2,[r2,#0]            ;5295  ; num_necc
003540  4294              CMP      r4,r2                 ;5295
003542  dbd2              BLT      |L1.13546|
                  |L1.13636|
;;;5312     	         	}
;;;5313   			
;;;5314     	     }
;;;5315   	bps[numOfForvardBps_old]._flags_tu=0;
003544  f8961024          LDRB     r1,[r6,#0x24]  ; numOfForvardBps_old
003548  ebc102c1          RSB      r2,r1,r1,LSL #3
00354c  eb021101          ADD      r1,r2,r1,LSL #4
003550  eb080181          ADD      r1,r8,r1,LSL #2
003554  f881702c          STRB     r7,[r1,#0x2c]
;;;5316   
;;;5317   	if(main_1Hz_cnt<60)
003558  499c              LDR      r1,|L1.14284|
00355a  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
00355e  293c              CMP      r1,#0x3c
003560  da0f              BGE      |L1.13698|
;;;5318   		{
;;;5319        	for(i=0;i<=NUMIST;i++)
003562  f04f0100          MOV      r1,#0
003566  e00a              B        |L1.13694|
                  |L1.13672|
;;;5320   			{
;;;5321   	     	bps[i]._flags_tu=0;
003568  ebc102c1          RSB      r2,r1,r1,LSL #3
00356c  eb021201          ADD      r2,r2,r1,LSL #4
003570  eb080282          ADD      r2,r8,r2,LSL #2
003574  f882702c          STRB     r7,[r2,#0x2c]
003578  f1010101          ADD      r1,r1,#1              ;5319
00357c  b2c9              UXTB     r1,r1                 ;5319
                  |L1.13694|
00357e  4281              CMP      r1,r0                 ;5319
003580  ddf2              BLE      |L1.13672|
                  |L1.13698|
;;;5322   	     	}	
;;;5323   		}
;;;5324   	if(ipsBlckStat)
003582  4993              LDR      r1,|L1.14288|
003584  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
003586  b179              CBZ      r1,|L1.13736|
;;;5325   		{
;;;5326        	for(i=0;i<=NUMIST;i++)
003588  f04f0100          MOV      r1,#0
00358c  e00a              B        |L1.13732|
                  |L1.13710|
;;;5327   			{
;;;5328   	     	bps[i]._flags_tu=1;
00358e  ebc102c1          RSB      r2,r1,r1,LSL #3
003592  eb021201          ADD      r2,r2,r1,LSL #4
003596  eb080282          ADD      r2,r8,r2,LSL #2
00359a  f882a02c          STRB     r10,[r2,#0x2c]
00359e  f1010101          ADD      r1,r1,#1              ;5326
0035a2  b2c9              UXTB     r1,r1                 ;5326
                  |L1.13732|
0035a4  4281              CMP      r1,r0                 ;5326
0035a6  ddf2              BLE      |L1.13710|
                  |L1.13736|
;;;5329   	     	}
;;;5330   		}
;;;5331   
;;;5332        for(i=0;i<=NUMIST;i++)
0035a8  f04f0100          MOV      r1,#0
;;;5333   		{
;;;5334   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0035ac  f06f0331          MVN      r3,#0x31
0035b0  e00e              B        |L1.13776|
                  |L1.13746|
0035b2  ebc102c1          RSB      r2,r1,r1,LSL #3
0035b6  eb021201          ADD      r2,r2,r1,LSL #4
0035ba  eb080282          ADD      r2,r8,r2,LSL #2
0035be  f892402c          LDRB     r4,[r2,#0x2c]
0035c2  2c01              CMP      r4,#1
0035c4  d101              BNE      |L1.13770|
0035c6  f8a23050          STRH     r3,[r2,#0x50]
                  |L1.13770|
0035ca  f1010101          ADD      r1,r1,#1              ;5332
0035ce  b2c9              UXTB     r1,r1                 ;5332
                  |L1.13776|
0035d0  4281              CMP      r1,r0                 ;5332
0035d2  ddee              BLE      |L1.13746|
                  |L1.13780|
;;;5335   	   	}	
;;;5336   		 
;;;5337     	}
;;;5338   
;;;5339   
;;;5340   for(i=0;i<NUMIST;i++)
0035d4  f04f0000          MOV      r0,#0
;;;5341        {
;;;5342        if(bps[i]._ist_blok_host_cnt!=0)
;;;5343             {
;;;5344             bps[i]._flags_tu=99;
0035d8  f04f0463          MOV      r4,#0x63
0035dc  f9bb1000          LDRSH    r1,[r11,#0]           ;5240
0035e0  e00f              B        |L1.13826|
                  |L1.13794|
0035e2  ebc002c0          RSB      r2,r0,r0,LSL #3       ;5342
0035e6  eb021200          ADD      r2,r2,r0,LSL #4       ;5342
0035ea  eb080282          ADD      r2,r8,r2,LSL #2       ;5342
0035ee  6bd3              LDR      r3,[r2,#0x3c]         ;5342
0035f0  b123              CBZ      r3,|L1.13820|
0035f2  f882402c          STRB     r4,[r2,#0x2c]
;;;5345   	     bps[i]._ist_blok_host_cnt--;
0035f6  f1a30301          SUB      r3,r3,#1
0035fa  63d3              STR      r3,[r2,#0x3c]
                  |L1.13820|
0035fc  f1000001          ADD      r0,r0,#1              ;5340
003600  b2c0              UXTB     r0,r0                 ;5340
                  |L1.13826|
003602  4288              CMP      r0,r1                 ;5340
003604  dbed              BLT      |L1.13794|
;;;5346             }
;;;5347        }
;;;5348   
;;;5349   
;;;5350   
;;;5351   
;;;5352   b1Hz_sh=0;
003606  7777              STRB     r7,[r6,#0x1d]
;;;5353   
;;;5354   
;;;5355   num_of_wrks_bps=0;
003608  7677              STRB     r7,[r6,#0x19]
;;;5356   tempUS=0;
00360a  f04f0200          MOV      r2,#0
;;;5357   for(i=0;i<NUMIST;i++)
00360e  4610              MOV      r0,r2
003610  e013              B        |L1.13882|
                  |L1.13842|
;;;5358   	{
;;;5359   	if(bps[i]._state==bsWRK)
003612  ebc003c0          RSB      r3,r0,r0,LSL #3
003616  eb031300          ADD      r3,r3,r0,LSL #4
00361a  eb080383          ADD      r3,r8,r3,LSL #2
00361e  789c              LDRB     r4,[r3,#2]
003620  2c01              CMP      r4,#1
003622  d107              BNE      |L1.13876|
;;;5360   		{
;;;5361   		num_of_wrks_bps++;
003624  7e74              LDRB     r4,[r6,#0x19]  ; num_of_wrks_bps
003626  f1040401          ADD      r4,r4,#1
00362a  7674              STRB     r4,[r6,#0x19]
;;;5362   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
00362c  69db              LDR      r3,[r3,#0x1c]
00362e  4293              CMP      r3,r2
003630  dd00              BLE      |L1.13876|
003632  b29a              UXTH     r2,r3
                  |L1.13876|
003634  f1000001          ADD      r0,r0,#1              ;5357
003638  b2c0              UXTB     r0,r0                 ;5357
                  |L1.13882|
00363a  4288              CMP      r0,r1                 ;5357
00363c  dbe9              BLT      |L1.13842|
;;;5363   		}
;;;5364   	}
;;;5365   Ubpsmax=tempUS;
00363e  f8a62048          STRH     r2,[r6,#0x48]
;;;5366   
;;;5367   bPARALLEL_ENOUG=0;
003642  f8867027          STRB     r7,[r6,#0x27]
;;;5368   bPARALLEL_NOT_ENOUG=1;
003646  f886a026          STRB     r10,[r6,#0x26]
;;;5369   
;;;5370   for(i=0;i<NUMIST;i++)
00364a  f04f0000          MOV      r0,#0
;;;5371   	{
;;;5372   	if(bps[i]._Ti>=TSIGN)
00364e  4a61              LDR      r2,|L1.14292|
003650  f9b23000          LDRSH    r3,[r2,#0]
;;;5373   		{
;;;5374   		bPARALLEL_ENOUG=1;
;;;5375   		}
;;;5376   	if(bps[i]._Ti>=(TSIGN-5))
003654  f1a30405          SUB      r4,r3,#5
003658  e011              B        |L1.13950|
                  |L1.13914|
00365a  ebc002c0          RSB      r2,r0,r0,LSL #3       ;5372
00365e  eb021200          ADD      r2,r2,r0,LSL #4       ;5372
003662  eb080282          ADD      r2,r8,r2,LSL #2       ;5372
003666  6a92              LDR      r2,[r2,#0x28]         ;5372
003668  429a              CMP      r2,r3                 ;5372
00366a  db01              BLT      |L1.13936|
00366c  f886a027          STRB     r10,[r6,#0x27]        ;5374
                  |L1.13936|
003670  42a2              CMP      r2,r4
003672  db01              BLT      |L1.13944|
;;;5377   		{
;;;5378   		bPARALLEL_NOT_ENOUG=0;
003674  f8867026          STRB     r7,[r6,#0x26]
                  |L1.13944|
003678  f1000001          ADD      r0,r0,#1              ;5370
00367c  b2c0              UXTB     r0,r0                 ;5370
                  |L1.13950|
00367e  4288              CMP      r0,r1                 ;5370
003680  dbeb              BLT      |L1.13914|
;;;5379   		}
;;;5380   	}
;;;5381   
;;;5382   if(bPARALLEL_ENOUG==1)
003682  f8960027          LDRB     r0,[r6,#0x27]  ; bPARALLEL_ENOUG
003686  2801              CMP      r0,#1
003688  d00a              BEQ      |L1.13984|
;;;5383   	{
;;;5384   	bPARALLEL=1;
;;;5385   	}
;;;5386   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
00368a  f8960028          LDRB     r0,[r6,#0x28]  ; bPARALLEL
00368e  2800              CMP      r0,#0
003690  d005              BEQ      |L1.13982|
003692  f8960026          LDRB     r0,[r6,#0x26]  ; bPARALLEL_NOT_ENOUG
003696  2800              CMP      r0,#0
003698  d001              BEQ      |L1.13982|
;;;5387   	{
;;;5388   	bPARALLEL=0;
00369a  f8867028          STRB     r7,[r6,#0x28]
                  |L1.13982|
;;;5389   	}
;;;5390   }
00369e  e66c              B        |L1.13178|
                  |L1.13984|
0036a0  f886a028          STRB     r10,[r6,#0x28]        ;5384
0036a4  e669              B        |L1.13178|
;;;5391   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;5398   //-----------------------------------------------
;;;5399   void powerAntiAliasingHndl(void)
0036a6  b570              PUSH     {r4-r6,lr}
;;;5400   {
;;;5401   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0036a8  230a              MOVS     r3,#0xa
0036aa  4c4c              LDR      r4,|L1.14300|
0036ac  484a              LDR      r0,|L1.14296|
;;;5402   	{
;;;5403   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;5404   	if(powerSummaryCnt>=10)
;;;5405   		{
;;;5406   		power_summary=power_summary_tempo;
;;;5407   		}
;;;5408   	}
;;;5409   else powerSummaryCnt=0;
0036ae  2500              MOVS     r5,#0
0036b0  6822              LDR      r2,[r4,#0]            ;5401  ; power_summary_tempo_old
0036b2  6800              LDR      r0,[r0,#0]            ;5401  ; power_summary_tempo
0036b4  fbb2f6f3          UDIV     r6,r2,r3              ;5401
0036b8  fbb0f1f3          UDIV     r1,r0,r3              ;5401
0036bc  4a48              LDR      r2,|L1.14304|
0036be  42b1              CMP      r1,r6                 ;5401
0036c0  d10b              BNE      |L1.14042|
0036c2  7811              LDRB     r1,[r2,#0]            ;5403  ; powerSummaryCnt
0036c4  290f              CMP      r1,#0xf               ;5403
0036c6  d202              BCS      |L1.14030|
0036c8  f1010101          ADD      r1,r1,#1              ;5403
0036cc  7011              STRB     r1,[r2,#0]            ;5403
                  |L1.14030|
0036ce  7811              LDRB     r1,[r2,#0]            ;5404  ; powerSummaryCnt
0036d0  290a              CMP      r1,#0xa               ;5404
0036d2  d303              BCC      |L1.14044|
0036d4  4943              LDR      r1,|L1.14308|
0036d6  6008              STR      r0,[r1,#0]            ;5406  ; power_summary
0036d8  e000              B        |L1.14044|
                  |L1.14042|
0036da  7015              STRB     r5,[r2,#0]
                  |L1.14044|
;;;5410   power_summary_tempo_old=power_summary_tempo;
0036dc  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;5411   
;;;5412   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0036de  4842              LDR      r0,|L1.14312|
0036e0  4c42              LDR      r4,|L1.14316|
0036e2  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
0036e6  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
0036ea  fbb0f1f3          UDIV     r1,r0,r3
0036ee  fbb2f3f3          UDIV     r3,r2,r3
;;;5413   	{
;;;5414   	if(powerCurrentCnt<15)powerCurrentCnt++;
0036f2  4a3f              LDR      r2,|L1.14320|
0036f4  4299              CMP      r1,r3                 ;5412
0036f6  d10b              BNE      |L1.14096|
0036f8  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0036fa  290f              CMP      r1,#0xf
0036fc  d202              BCS      |L1.14084|
0036fe  f1010101          ADD      r1,r1,#1
003702  7011              STRB     r1,[r2,#0]
                  |L1.14084|
;;;5415   	if(powerCurrentCnt>=10)
003704  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
003706  290a              CMP      r1,#0xa
003708  d303              BCC      |L1.14098|
;;;5416   		{
;;;5417   		power_current=power_current_tempo;
00370a  493a              LDR      r1,|L1.14324|
00370c  8008              STRH     r0,[r1,#0]
00370e  e000              B        |L1.14098|
                  |L1.14096|
;;;5418   		}
;;;5419   	}
;;;5420   else powerCurrentCnt=0;
003710  7015              STRB     r5,[r2,#0]
                  |L1.14098|
;;;5421   power_current_tempo_old=power_current_tempo;
003712  8020              STRH     r0,[r4,#0]
;;;5422   }
003714  bd70              POP      {r4-r6,pc}
;;;5423   
                          ENDP

                  energometr_hndl PROC
;;;5533   //-----------------------------------------------
;;;5534   void energometr_hndl(void)
003716  4770              BX       lr
;;;5535   {
;;;5536   //2F 3F 21 0D 0A 
;;;5537   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;5538   //2F 3F 21 0D 0A 
;;;5539   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;5540   //06 30 35 31 0D 0A 
;;;5541   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;5542   
;;;5543   #ifdef CE102M_ENABLED
;;;5544   /*if
;;;5545   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;5546   
;;;5547   if(read_power_cnt_main_cnt)
;;;5548   	{
;;;5549   	read_power_cnt_main_cnt--;
;;;5550   	if(read_power_cnt_main_cnt==0)
;;;5551   		{
;;;5552   		rx_read_power_cnt_phase=0;
;;;5553   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;5554   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;5555   		else bENERGOMETR_UIP=0;
;;;5556   		//bENERGOMETR_UIP=2;
;;;5557   		}
;;;5558   	}
;;;5559   
;;;5560   if (rx_read_power_cnt_phase==0)
;;;5561   	{
;;;5562   	char command_with_crc[20];
;;;5563   	
;;;5564      	command_with_crc[0]=0xaf;  // /
;;;5565   	command_with_crc[1]=0x3f;  // ?
;;;5566   	command_with_crc[2]=0x21;  // !
;;;5567   	command_with_crc[3]=0x8d;  // CR
;;;5568   	command_with_crc[4]=0x0a;  // LF
;;;5569   
;;;5570   	uart_out__adr1(command_with_crc,5);
;;;5571   
;;;5572   	rx_wr_index1=0;
;;;5573   	rx_read_power_cnt_phase=1;
;;;5574   
;;;5575   	read_power_cnt_main_cnt=50;
;;;5576   	}
;;;5577   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;5578   	{
;;;5579   	char command_with_crc[20];
;;;5580   	
;;;5581   	command_with_crc[0]=0x06;  //  
;;;5582   	command_with_crc[1]=0x30;  // 0
;;;5583   	command_with_crc[2]=0x35;  // 5
;;;5584   	command_with_crc[3]=0xb1;  // 1
;;;5585   	command_with_crc[4]=0x8d;  // CR
;;;5586   	command_with_crc[5]=0x0a;  // LF
;;;5587   	
;;;5588   	uart_out__adr1(command_with_crc,6);
;;;5589   	
;;;5590   	rx_wr_index1=0;
;;;5591   	rx_read_power_cnt_phase=3;
;;;5592   
;;;5593   	read_power_cnt_main_cnt=50;
;;;5594   	}  
;;;5595   
;;;5596   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;5597   	{
;;;5598   	char command_with_crc[20];
;;;5599   	
;;;5600   	command_with_crc[0]=0x81;  //  
;;;5601   	command_with_crc[1]=0xd2;  // 0
;;;5602   	command_with_crc[2]=0xb1;  // 5
;;;5603   	command_with_crc[3]=0x82;  // 1
;;;5604   	command_with_crc[4]=0x56;  // CR
;;;5605   	command_with_crc[5]=0xcf;  // LF
;;;5606   	command_with_crc[6]=0xcc;  // 1
;;;5607   	command_with_crc[7]=0xd4;  // CR
;;;5608   	command_with_crc[8]=0x41;  // LF
;;;5609   	command_with_crc[9]=0x28;  // 1
;;;5610   	command_with_crc[10]=0xa9;  // CR
;;;5611   	command_with_crc[11]=0x03;  // LF
;;;5612   	command_with_crc[12]=0x5f;  // LF
;;;5613   		
;;;5614   	uart_out__adr1(command_with_crc,13);
;;;5615   	
;;;5616   	rx_wr_index1=0;
;;;5617   	rx_read_power_cnt_phase=5;
;;;5618   
;;;5619   	read_power_cnt_main_cnt=50;
;;;5620   	}  
;;;5621   
;;;5622   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;5623   	{
;;;5624   	char command_with_crc[20];
;;;5625   	
;;;5626   	command_with_crc[0]=0x81;  //  
;;;5627   	command_with_crc[1]=0xd2;  // 0
;;;5628   	command_with_crc[2]=0xb1;  // 5
;;;5629   	command_with_crc[3]=0x82;  // 1
;;;5630   	command_with_crc[4]=0xc3;  // CR
;;;5631   	command_with_crc[5]=0x55;  // LF
;;;5632   	command_with_crc[6]=0xd2;  // 1
;;;5633   	command_with_crc[7]=0xd2;  // CR
;;;5634   	command_with_crc[8]=0xc5;  // LF
;;;5635   	command_with_crc[9]=0x28;  // 1
;;;5636   	command_with_crc[10]=0xa9;  // CR
;;;5637   	command_with_crc[11]=0x03;  // LF
;;;5638   	command_with_crc[12]=0x5a;  // LF
;;;5639   		
;;;5640   	uart_out__adr1(command_with_crc,13);
;;;5641   	
;;;5642   	rx_wr_index1=0;
;;;5643   	rx_read_power_cnt_phase=9;
;;;5644   
;;;5645   	read_power_cnt_main_cnt=50;
;;;5646   	}  
;;;5647   
;;;5648   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;5649   	{
;;;5650   	char command_with_crc[20];
;;;5651   	
;;;5652   	command_with_crc[0]=0x81;  //  		01
;;;5653   	command_with_crc[1]=0xd2;  // R		52
;;;5654   	command_with_crc[2]=0xb1;  // 1		31
;;;5655   	command_with_crc[3]=0x82;  // 		02
;;;5656   	command_with_crc[4]=0x50;  // P		50
;;;5657   	command_with_crc[5]=0xcf;  // O	  	4f
;;;5658   	command_with_crc[6]=0xd7;  // W		57
;;;5659   	command_with_crc[7]=0xc5;  // E		45
;;;5660   	command_with_crc[8]=0x50;  // P		50
;;;5661   	command_with_crc[9]=0x28;  // (		28
;;;5662   	command_with_crc[10]=0xa9;  // )	29
;;;5663   	command_with_crc[11]=0x03;  // 		03
;;;5664   	command_with_crc[12]=0xe4;  // d	64
;;;5665   		
;;;5666   	uart_out__adr1(command_with_crc,13);
;;;5667   	
;;;5668   	rx_wr_index1=0;
;;;5669   	rx_read_power_cnt_phase=21;
;;;5670   
;;;5671   	read_power_cnt_main_cnt=50;
;;;5672   	}  
;;;5673   
;;;5674   
;;;5675   #endif
;;;5676   }
;;;5677   
                          ENDP

                  ips_current_average_hndl PROC
;;;5678   //-----------------------------------------------
;;;5679   void ips_current_average_hndl(void)
003718  e92d4ff0          PUSH     {r4-r11,lr}
;;;5680   {
00371c  b089              SUB      sp,sp,#0x24
;;;5681   
;;;5682   if(++ica_timer_cnt>=10) 
00371e  4e36              LDR      r6,|L1.14328|
;;;5683   	{
;;;5684   	ica_timer_cnt=0;
003720  2400              MOVS     r4,#0
003722  7830              LDRB     r0,[r6,#0]            ;5682  ; ica_timer_cnt
003724  1c40              ADDS     r0,r0,#1              ;5682
003726  b2c0              UXTB     r0,r0                 ;5682
003728  7030              STRB     r0,[r6,#0]            ;5682
00372a  280a              CMP      r0,#0xa               ;5682
00372c  d300              BCC      |L1.14128|
00372e  7034              STRB     r4,[r6,#0]
                  |L1.14128|
;;;5685   	}
;;;5686   
;;;5687   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
003730  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
003732  4f32              LDR      r7,|L1.14332|
;;;5688   	{
;;;5689   	
;;;5690   	ica_plazma[0]++;
;;;5691   
;;;5692   	ica_my_current=bps_I;
;;;5693   
;;;5694   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
003734  f8dfb0c8          LDR      r11,|L1.14336|
003738  4d1f              LDR      r5,|L1.14264|
00373a  bbe0              CBNZ     r0,|L1.14262|
00373c  7e68              LDRB     r0,[r5,#0x19]         ;5687  ; num_of_wrks_bps
00373e  b3d0              CBZ      r0,|L1.14262|
003740  7fa8              LDRB     r0,[r5,#0x1e]         ;5687  ; spc_stat
003742  7869              LDRB     r1,[r5,#1]            ;5687  ; vz1_stat
003744  4308              ORRS     r0,r0,r1              ;5687
003746  78e9              LDRB     r1,[r5,#3]            ;5687  ; vz2_stat
003748  4308              ORRS     r0,r0,r1              ;5687
00374a  7839              LDRB     r1,[r7,#0]            ;5687  ; sp_ch_stat
00374c  4308              ORRS     r0,r0,r1              ;5687
00374e  d17e              BNE      |L1.14414|
003750  f8df90b0          LDR      r9,|L1.14340|
003754  f8990000          LDRB     r0,[r9,#0]            ;5690  ; ica_plazma
003758  f1000001          ADD      r0,r0,#1              ;5690
00375c  f8890000          STRB     r0,[r9,#0]            ;5690
003760  4829              LDR      r0,|L1.14344|
003762  f9b01000          LDRSH    r1,[r0,#0]            ;5692  ; bps_I
003766  4829              LDR      r0,|L1.14348|
003768  8001              STRH     r1,[r0,#0]            ;5692
00376a  4829              LDR      r0,|L1.14352|
;;;5695   		{
;;;5696   		ica_plazma[1]++;
;;;5697   		ica_u_necc--;
00376c  f8dfa0a4          LDR      r10,|L1.14356|
003770  f9b02000          LDRSH    r2,[r0,#0]            ;5694  ; ica_your_current
003774  4648              MOV      r0,r9                 ;5690
003776  f9bac000          LDRSH    r12,[r10,#0]
00377a  7843              LDRB     r3,[r0,#1]            ;5696
00377c  4826              LDR      r0,|L1.14360|
00377e  4291              CMP      r1,r2                 ;5694
003780  f9b08000          LDRSH    r8,[r0,#0]            ;5694
003784  4658              MOV      r0,r11                ;5694
003786  f9b00000          LDRSH    r0,[r0,#0]            ;5694
00378a  dd47              BLE      |L1.14364|
00378c  eba10e02          SUB      lr,r1,r2              ;5694
003790  f1be0f05          CMP      lr,#5                 ;5694
003794  db42              BLT      |L1.14364|
003796  2801              CMP      r0,#1                 ;5694
003798  d004              BEQ      |L1.14244|
00379a  2802              CMP      r0,#2                 ;5694
00379c  d13e              BNE      |L1.14364|
00379e  f1b80f05          CMP      r8,#5                 ;5694
0037a2  dd3b              BLE      |L1.14364|
                  |L1.14244|
0037a4  f1030301          ADD      r3,r3,#1              ;5696
0037a8  f8893001          STRB     r3,[r9,#1]            ;5696
0037ac  f1ac0c01          SUB      r12,r12,#1
0037b0  f8aac000          STRH     r12,[r10,#0]
0037b4  e046              B        |L1.14404|
                  |L1.14262|
0037b6  e04a              B        |L1.14414|
                  |L1.14264|
                          DCD      ||area_number.25||
                  |L1.14268|
                          DCD      bps
                  |L1.14272|
                          DCD      NUMIST
                  |L1.14276|
                          DCD      mess_data
                  |L1.14280|
                          DCD      num_necc
                  |L1.14284|
                          DCD      main_1Hz_cnt
                  |L1.14288|
                          DCD      ipsBlckStat
                  |L1.14292|
                          DCD      TSIGN
                  |L1.14296|
                          DCD      power_summary_tempo
                  |L1.14300|
                          DCD      power_summary_tempo_old
                  |L1.14304|
                          DCD      powerSummaryCnt
                  |L1.14308|
                          DCD      power_summary
                  |L1.14312|
                          DCD      power_current_tempo
                  |L1.14316|
                          DCD      power_current_tempo_old
                  |L1.14320|
                          DCD      powerCurrentCnt
                  |L1.14324|
                          DCD      power_current
                  |L1.14328|
                          DCD      ica_timer_cnt
                  |L1.14332|
                          DCD      sp_ch_stat
                  |L1.14336|
                          DCD      ICA_EN
                  |L1.14340|
                          DCD      ica_plazma
                  |L1.14344|
                          DCD      bps_I
                  |L1.14348|
                          DCD      ica_my_current
                  |L1.14352|
                          DCD      ica_your_current
                  |L1.14356|
                          DCD      ica_u_necc
                  |L1.14360|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.14364|
;;;5698   		}
;;;5699   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00381c  4291              CMP      r1,r2
00381e  da11              BGE      |L1.14404|
003820  1a51              SUBS     r1,r2,r1
003822  2905              CMP      r1,#5
003824  db0e              BLT      |L1.14404|
003826  2801              CMP      r0,#1
003828  d004              BEQ      |L1.14388|
00382a  2802              CMP      r0,#2
00382c  d10a              BNE      |L1.14404|
00382e  f1b80f05          CMP      r8,#5
003832  dd07              BLE      |L1.14404|
                  |L1.14388|
;;;5700   		{
;;;5701   		ica_plazma[1]--;
003834  f1a30301          SUB      r3,r3,#1
003838  f8893001          STRB     r3,[r9,#1]
;;;5702   		ica_u_necc++;
00383c  f10c0c01          ADD      r12,r12,#1
003840  f8aac000          STRH     r12,[r10,#0]
                  |L1.14404|
;;;5703   		}
;;;5704   	gran(&ica_u_necc,-100,100);
003844  2264              MOVS     r2,#0x64
003846  4251              RSBS     r1,r2,#0
003848  48ff              LDR      r0,|L1.15432|
00384a  f7fffffe          BL       gran
                  |L1.14414|
;;;5705   	}
;;;5706   
;;;5707   
;;;5708   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) /*&& (num_of_wrks_bps)*/)
00384e  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
003852  2801              CMP      r0,#1
003854  d165              BNE      |L1.14626|
003856  7fa8              LDRB     r0,[r5,#0x1e]  ; spc_stat
003858  7869              LDRB     r1,[r5,#1]  ; vz1_stat
00385a  4308              ORRS     r0,r0,r1
00385c  78e9              LDRB     r1,[r5,#3]  ; vz2_stat
00385e  4308              ORRS     r0,r0,r1
003860  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
003862  4308              ORRS     r0,r0,r1
003864  d15d              BNE      |L1.14626|
;;;5709   	{
;;;5710   	
;;;5711   	if(ica_timer_cnt==8)
003866  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;5712   		{
;;;5713   		char modbus_buff[20],i;
;;;5714   		short crc_temp;
;;;5715   	
;;;5716   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
003868  4bf8              LDR      r3,|L1.15436|
;;;5717   		modbus_buff[1] = 4;
;;;5718   		modbus_buff[2] = 0;
;;;5719   		modbus_buff[3] = 2;
;;;5720   		modbus_buff[4] = 0;	
;;;5721   		modbus_buff[5] = 1;
;;;5722   	
;;;5723   		crc_temp= CRC16_2(modbus_buff,6);
;;;5724   	
;;;5725   		modbus_buff[6]= (char)crc_temp;
;;;5726   		modbus_buff[7]= (char)(crc_temp>>8);
;;;5727   	
;;;5728   		if(ICA_CH==0)
00386a  4ff9              LDR      r7,|L1.15440|
00386c  2808              CMP      r0,#8                 ;5711
00386e  d05b              BEQ      |L1.14632|
;;;5729   			{
;;;5730   			for (i=0;i<8;i++)
;;;5731   				{
;;;5732   				putchar_sc16is700(modbus_buff[i]);
;;;5733   				}
;;;5734   			}
;;;5735   		else if(ICA_CH==2)
;;;5736   			{
;;;5737   			uart_out1 (5,4,0,2,0,1,0);
;;;5738   			}
;;;5739   		}
;;;5740   	else
;;;5741   		{
;;;5742   		char modbus_buff[20],i;
;;;5743   		short crc_temp, tempSSSS;
;;;5744   
;;;5745   		tempSSSS=cntrl_stat_old;
003870  f9b5602e          LDRSH    r6,[r5,#0x2e]  ; cntrl_stat_old
;;;5746   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
003874  48f7              LDR      r0,|L1.15444|
003876  f06f0214          MVN      r2,#0x14
00387a  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
00387e  ebc01100          RSB      r1,r0,r0,LSL #4
003882  eb020c81          ADD      r12,r2,r1,LSL #2
003886  f9b5204c          LDRSH    r2,[r5,#0x4c]  ; main_kb_cnt
00388a  4594              CMP      r12,r2
00388c  d00b              BEQ      |L1.14502|
00388e  f06f0c13          MVN      r12,#0x13
003892  eb0c0c81          ADD      r12,r12,r1,LSL #2
003896  4594              CMP      r12,r2
003898  d005              BEQ      |L1.14502|
00389a  f06f0c12          MVN      r12,#0x12
00389e  eb0c0181          ADD      r1,r12,r1,LSL #2
0038a2  4291              CMP      r1,r2
0038a4  d101              BNE      |L1.14506|
                  |L1.14502|
0038a6  f4404680          ORR      r6,r0,#0x4000
                  |L1.14506|
;;;5747   
;;;5748   
;;;5749   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0038aa  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
0038ac  f88d0010          STRB     r0,[sp,#0x10]
;;;5750   		modbus_buff[1] = 6;
0038b0  f04f0006          MOV      r0,#6
0038b4  f88d0011          STRB     r0,[sp,#0x11]
;;;5751   		modbus_buff[2] = 0;
0038b8  f88d4012          STRB     r4,[sp,#0x12]
;;;5752   		modbus_buff[3] = 100;
0038bc  f04f0064          MOV      r0,#0x64
0038c0  f88d0013          STRB     r0,[sp,#0x13]
;;;5753   		modbus_buff[4] = (char)(tempSSSS/256);	
0038c4  ea4f70e6          ASR      r0,r6,#31
0038c8  eb066010          ADD      r0,r6,r0,LSR #24
0038cc  ea4f2120          ASR      r1,r0,#8
0038d0  f88d1014          STRB     r1,[sp,#0x14]
;;;5754   		modbus_buff[5] = (char)(tempSSSS%256);
0038d4  4630              MOV      r0,r6
0038d6  f88d0015          STRB     r0,[sp,#0x15]
;;;5755   	
;;;5756   		crc_temp= CRC16_2(modbus_buff,6);
0038da  f04f0106          MOV      r1,#6
0038de  a804              ADD      r0,sp,#0x10
0038e0  f7fffffe          BL       CRC16_2
;;;5757   	
;;;5758   		modbus_buff[6]= (char)crc_temp;
0038e4  f88d0016          STRB     r0,[sp,#0x16]
;;;5759   		modbus_buff[7]= (char)(crc_temp>>8);
0038e8  ea4f2020          ASR      r0,r0,#8
0038ec  f88d0017          STRB     r0,[sp,#0x17]
;;;5760   	
;;;5761   		crc_temp= CRC16_2(modbus_buff,6);
0038f0  f04f0106          MOV      r1,#6
0038f4  a804              ADD      r0,sp,#0x10
0038f6  f7fffffe          BL       CRC16_2
;;;5762   	
;;;5763   		plazma_ica1=tempSSSS;
0038fa  f8a5607c          STRH     r6,[r5,#0x7c]
;;;5764   		if(ICA_CH==0)
0038fe  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
003902  b3f0              CBZ      r0,|L1.14722|
;;;5765   			{
;;;5766   			for (i=0;i<8;i++)
;;;5767   				{
;;;5768   				putchar_sc16is700(modbus_buff[i]);
;;;5769   				}
;;;5770   			}
;;;5771   		else if(ICA_CH==2)
003904  2802              CMP      r0,#2
003906  d10c              BNE      |L1.14626|
;;;5772   			{
;;;5773   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
003908  f89d0015          LDRB     r0,[sp,#0x15]
00390c  f89d1014          LDRB     r1,[sp,#0x14]
003910  e9cd0401          STRD     r0,r4,[sp,#4]
003914  9100              STR      r1,[sp,#0]
003916  2364              MOVS     r3,#0x64
003918  2200              MOVS     r2,#0
00391a  2106              MOVS     r1,#6
00391c  2005              MOVS     r0,#5
00391e  f7fffffe          BL       uart_out1
                  |L1.14626|
;;;5774   			}
;;;5775   		}
;;;5776   	}
;;;5777   }
003922  b009              ADD      sp,sp,#0x24
003924  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.14632|
003928  8818              LDRH     r0,[r3,#0]            ;5716  ; ICA_MODBUS_ADDRESS
00392a  f88d0010          STRB     r0,[sp,#0x10]         ;5716
00392e  f04f0004          MOV      r0,#4                 ;5717
003932  f88d0011          STRB     r0,[sp,#0x11]         ;5717
003936  f88d4012          STRB     r4,[sp,#0x12]         ;5718
00393a  f04f0002          MOV      r0,#2                 ;5719
00393e  f88d0013          STRB     r0,[sp,#0x13]         ;5719
003942  f88d4014          STRB     r4,[sp,#0x14]         ;5720
003946  f04f0501          MOV      r5,#1                 ;5721
00394a  f88d5015          STRB     r5,[sp,#0x15]         ;5721
00394e  f04f0106          MOV      r1,#6                 ;5723
003952  a804              ADD      r0,sp,#0x10           ;5723
003954  f7fffffe          BL       CRC16_2
003958  f88d0016          STRB     r0,[sp,#0x16]         ;5725
00395c  ea4f2020          ASR      r0,r0,#8              ;5726
003960  f88d0017          STRB     r0,[sp,#0x17]         ;5726
003964  f9b70000          LDRSH    r0,[r7,#0]            ;5728  ; ICA_CH
003968  b160              CBZ      r0,|L1.14724|
00396a  2802              CMP      r0,#2                 ;5735
00396c  d1d9              BNE      |L1.14626|
00396e  e9cd4500          STRD     r4,r5,[sp,#0]         ;5737
003972  2302              MOVS     r3,#2                 ;5737
003974  2200              MOVS     r2,#0                 ;5737
003976  2104              MOVS     r1,#4                 ;5737
003978  2005              MOVS     r0,#5                 ;5737
00397a  9402              STR      r4,[sp,#8]            ;5737
00397c  f7fffffe          BL       uart_out1
003980  e7cf              B        |L1.14626|
                  |L1.14722|
003982  e00b              B        |L1.14748|
                  |L1.14724|
003984  f04f0400          MOV      r4,#0                 ;5730
003988  ad04              ADD      r5,sp,#0x10           ;5713
                  |L1.14730|
00398a  5d28              LDRB     r0,[r5,r4]            ;5732
00398c  f7fffffe          BL       putchar_sc16is700
003990  f1040401          ADD      r4,r4,#1              ;5730
003994  b2e4              UXTB     r4,r4                 ;5730
003996  2c08              CMP      r4,#8                 ;5730
003998  d3f7              BCC      |L1.14730|
00399a  e7c2              B        |L1.14626|
                  |L1.14748|
00399c  f04f0400          MOV      r4,#0                 ;5766
0039a0  ad04              ADD      r5,sp,#0x10           ;5742
                  |L1.14754|
0039a2  5d28              LDRB     r0,[r5,r4]            ;5768
0039a4  f7fffffe          BL       putchar_sc16is700
0039a8  f1040401          ADD      r4,r4,#1              ;5766
0039ac  b2e4              UXTB     r4,r4                 ;5766
0039ae  2c08              CMP      r4,#8                 ;5766
0039b0  d3f7              BCC      |L1.14754|
0039b2  e7b6              B        |L1.14626|
;;;5778   
                          ENDP

                  ipsBlckHndl PROC
;;;5861   //-----------------------------------------------
;;;5862   void ipsBlckHndl(char in)
0039b4  b510              PUSH     {r4,lr}
;;;5863   {
;;;5864   
;;;5865   ipsBlckStat=0;
0039b6  4ba8              LDR      r3,|L1.15448|
0039b8  f04f0000          MOV      r0,#0
0039bc  8018              STRH     r0,[r3,#0]
;;;5866   if(ipsBlckSrc==1)
0039be  48a7              LDR      r0,|L1.15452|
0039c0  f04f0401          MOV      r4,#1
;;;5867   	{
;;;5868   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
0039c4  f44f62fa          MOV      r2,#0x7d0
0039c8  f9b01000          LDRSH    r1,[r0,#0]            ;5866  ; ipsBlckSrc
0039cc  48a4              LDR      r0,|L1.15456|
0039ce  2901              CMP      r1,#1                 ;5866
0039d0  f9b00000          LDRSH    r0,[r0,#0]
0039d4  d006              BEQ      |L1.14820|
;;;5869   	}
;;;5870   else if(ipsBlckSrc==2)
0039d6  2902              CMP      r1,#2
0039d8  d10f              BNE      |L1.14842|
0039da  49a2              LDR      r1,|L1.15460|
;;;5871   	{
;;;5872   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
0039dc  f9b1101a          LDRSH    r1,[r1,#0x1a]
0039e0  b160              CBZ      r0,|L1.14844|
0039e2  e00d              B        |L1.14848|
                  |L1.14820|
0039e4  499f              LDR      r1,|L1.15460|
0039e6  f9b11016          LDRSH    r1,[r1,#0x16]         ;5868
0039ea  b908              CBNZ     r0,|L1.14832|
0039ec  4291              CMP      r1,r2                 ;5868
0039ee  dc03              BGT      |L1.14840|
                  |L1.14832|
0039f0  2801              CMP      r0,#1                 ;5868
0039f2  d102              BNE      |L1.14842|
0039f4  4291              CMP      r1,r2                 ;5868
0039f6  da00              BGE      |L1.14842|
                  |L1.14840|
0039f8  801c              STRH     r4,[r3,#0]            ;5868
                  |L1.14842|
;;;5873   	}
;;;5874   }
0039fa  bd10              POP      {r4,pc}
                  |L1.14844|
0039fc  4291              CMP      r1,r2                 ;5872
0039fe  dc03              BGT      |L1.14856|
                  |L1.14848|
003a00  2801              CMP      r0,#1                 ;5872
003a02  d1fa              BNE      |L1.14842|
003a04  4291              CMP      r1,r2                 ;5872
003a06  daf8              BGE      |L1.14842|
                  |L1.14856|
003a08  801c              STRH     r4,[r3,#0]            ;5872
003a0a  bd10              POP      {r4,pc}
;;;5875   
                          ENDP

                  bps_drv PROC
;;;5876   //-----------------------------------------------
;;;5877   void bps_drv(char in)
003a0c  e92d41f0          PUSH     {r4-r8,lr}
;;;5878   {
003a10  4606              MOV      r6,r0
;;;5879   char temp;
;;;5880   
;;;5881   if (bps[in]._device!=dSRC) return;
003a12  ebc600c6          RSB      r0,r6,r6,LSL #3
003a16  4994              LDR      r1,|L1.15464|
003a18  eb001006          ADD      r0,r0,r6,LSL #4
003a1c  f8112020          LDRB     r2,[r1,r0,LSL #2]
003a20  2a03              CMP      r2,#3
003a22  d177              BNE      |L1.15124|
;;;5882   temp=bps[in]._flags_tm;
003a24  eb010480          ADD      r4,r1,r0,LSL #2
003a28  f8945042          LDRB     r5,[r4,#0x42]
;;;5883   if(temp&(1<<AV_T))
003a2c  07a8              LSLS     r0,r5,#30
003a2e  d517              BPL      |L1.14944|
;;;5884   	{
;;;5885   	if(bps[in]._temp_av_cnt<1200) 
003a30  f9b41046          LDRSH    r1,[r4,#0x46]
003a34  f44f6096          MOV      r0,#0x4b0
003a38  4281              CMP      r1,r0
003a3a  da22              BGE      |L1.14978|
;;;5886   		{
;;;5887   		bps[in]._temp_av_cnt++;
003a3c  f1010101          ADD      r1,r1,#1
003a40  b209              SXTH     r1,r1
003a42  f8a41046          STRH     r1,[r4,#0x46]
;;;5888   		if(bps[in]._temp_av_cnt>=1200)
003a46  4281              CMP      r1,r0
003a48  db1b              BLT      |L1.14978|
;;;5889   			{
;;;5890   			bps[in]._temp_av_cnt=1200;
003a4a  f8a40046          STRH     r0,[r4,#0x46]
;;;5891   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
003a4e  7860              LDRB     r0,[r4,#1]
003a50  07c0              LSLS     r0,r0,#31
003a52  d116              BNE      |L1.14978|
003a54  2201              MOVS     r2,#1
003a56  2100              MOVS     r1,#0
003a58  4630              MOV      r0,r6
003a5a  f7fffffe          BL       avar_bps_hndl
003a5e  e010              B        |L1.14978|
                  |L1.14944|
;;;5892   			}
;;;5893   		}
;;;5894   	}
;;;5895   
;;;5896   else if(!(temp&(1<<AV_T)))
;;;5897   	{
;;;5898   	if(bps[in]._temp_av_cnt) 
003a60  f9b41046          LDRSH    r1,[r4,#0x46]
003a64  b169              CBZ      r1,|L1.14978|
;;;5899   		{
;;;5900   		bps[in]._temp_av_cnt--;
003a66  f1a10101          SUB      r1,r1,#1
003a6a  b208              SXTH     r0,r1
003a6c  f8a40046          STRH     r0,[r4,#0x46]
;;;5901   		if(!bps[in]._temp_av_cnt)
003a70  b938              CBNZ     r0,|L1.14978|
;;;5902   			{
;;;5903   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
003a72  7860              LDRB     r0,[r4,#1]
003a74  07c0              LSLS     r0,r0,#31
003a76  d004              BEQ      |L1.14978|
003a78  2200              MOVS     r2,#0
003a7a  4611              MOV      r1,r2
003a7c  4630              MOV      r0,r6
003a7e  f7fffffe          BL       avar_bps_hndl
                  |L1.14978|
;;;5904   			}
;;;5905   		} 	
;;;5906   
;;;5907   	}
;;;5908   
;;;5909   if((temp&(1<<AVUMAX)))
003a82  0729              LSLS     r1,r5,#28
;;;5910   	{
;;;5911   	if(bps[in]._umax_av_cnt<10) 
;;;5912   		{
;;;5913   		bps[in]._umax_av_cnt++;
;;;5914   		if(bps[in]._umax_av_cnt>=10)
;;;5915   			{ 
;;;5916   			bps[in]._umax_av_cnt=10;
003a84  f04f070a          MOV      r7,#0xa
003a88  f04f0000          MOV      r0,#0                 ;5891
003a8c  d515              BPL      |L1.15034|
003a8e  f9b40048          LDRSH    r0,[r4,#0x48]         ;5911
003a92  280a              CMP      r0,#0xa               ;5911
003a94  da26              BGE      |L1.15076|
003a96  f1000001          ADD      r0,r0,#1              ;5913
003a9a  b200              SXTH     r0,r0                 ;5913
003a9c  f8a40048          STRH     r0,[r4,#0x48]         ;5913
003aa0  280a              CMP      r0,#0xa               ;5914
003aa2  db1f              BLT      |L1.15076|
003aa4  f8a47048          STRH     r7,[r4,#0x48]
;;;5917   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
003aa8  7860              LDRB     r0,[r4,#1]
003aaa  0780              LSLS     r0,r0,#30
003aac  d41a              BMI      |L1.15076|
003aae  2201              MOVS     r2,#1
003ab0  4611              MOV      r1,r2
003ab2  4630              MOV      r0,r6
003ab4  f7fffffe          BL       avar_bps_hndl
003ab8  e014              B        |L1.15076|
                  |L1.15034|
;;;5918   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;5919   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;5920   				{
;;;5921   				apv_cnt[in,0]=APV_INIT;
;;;5922   				apv_cnt[in,1]=APV_INIT;
;;;5923   				apv_cnt[in,2]=APV_INIT;
;;;5924   				apv_flags[in]=afOFF;
;;;5925   				}				*/
;;;5926   						
;;;5927   			}
;;;5928   		} 
;;;5929   	}		
;;;5930   else if(!(temp&(1<<AVUMAX)))
;;;5931   	{
;;;5932   	if(bps[in]._umax_av_cnt>0) 
003aba  f9b41048          LDRSH    r1,[r4,#0x48]
003abe  2900              CMP      r1,#0
003ac0  dd0d              BLE      |L1.15070|
;;;5933   		{
;;;5934   		bps[in]._umax_av_cnt--;
003ac2  f1a10101          SUB      r1,r1,#1
003ac6  b208              SXTH     r0,r1
003ac8  f8a40048          STRH     r0,[r4,#0x48]
;;;5935   		if(bps[in]._umax_av_cnt==0)
003acc  b950              CBNZ     r0,|L1.15076|
;;;5936   			{
;;;5937   			bps[in]._umax_av_cnt=0;
;;;5938   			avar_bps_hndl(in,1,0);
003ace  f04f0200          MOV      r2,#0
003ad2  f04f0101          MOV      r1,#1
003ad6  4630              MOV      r0,r6
003ad8  f7fffffe          BL       avar_bps_hndl
003adc  e002              B        |L1.15076|
                  |L1.15070|
;;;5939   	 //		apv_cnt[in,0]=0;
;;;5940   	//		apv_cnt[in,1]=0;
;;;5941   	 //		apv_cnt[in,2]=0;			
;;;5942   			}
;;;5943   		}
;;;5944   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
003ade  da01              BGE      |L1.15076|
003ae0  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.15076|
;;;5945   	}
;;;5946   
;;;5947   if(temp&(1<<AVUMIN))
003ae4  06e8              LSLS     r0,r5,#27
003ae6  d516              BPL      |L1.15126|
;;;5948   	{
;;;5949   	if(bps[in]._umin_av_cnt<10) 
003ae8  f9b4004a          LDRSH    r0,[r4,#0x4a]
003aec  280a              CMP      r0,#0xa
003aee  da20              BGE      |L1.15154|
;;;5950   		{
;;;5951   		bps[in]._umin_av_cnt++;
003af0  f1000001          ADD      r0,r0,#1
003af4  b200              SXTH     r0,r0
003af6  f8a4004a          STRH     r0,[r4,#0x4a]
;;;5952   		if(bps[in]._umin_av_cnt>=10)
003afa  280a              CMP      r0,#0xa
003afc  db19              BLT      |L1.15154|
;;;5953   			{ 
;;;5954   			bps[in]._umin_av_cnt=10;
003afe  f8a4704a          STRH     r7,[r4,#0x4a]
;;;5955   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
003b02  7860              LDRB     r0,[r4,#1]
003b04  0740              LSLS     r0,r0,#29
003b06  d414              BMI      |L1.15154|
003b08  2201              MOVS     r2,#1
003b0a  2102              MOVS     r1,#2
003b0c  4630              MOV      r0,r6
003b0e  f7fffffe          BL       avar_bps_hndl
003b12  e00e              B        |L1.15154|
                  |L1.15124|
003b14  e046              B        |L1.15268|
                  |L1.15126|
;;;5956   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;5957   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;5958   				{
;;;5959   				apv_cnt[in,0]=APV_INIT;
;;;5960   				apv_cnt[in,1]=APV_INIT;
;;;5961   				apv_cnt[in,2]=APV_INIT;
;;;5962   				apv_flags[in]=afOFF;
;;;5963   				}*/				
;;;5964   			}
;;;5965   		} 
;;;5966   	}	
;;;5967   	
;;;5968   else if(!(temp&(1<<AVUMIN)))
;;;5969   	{
;;;5970   	if(bps[in]._umin_av_cnt) 
003b16  f9b4004a          LDRSH    r0,[r4,#0x4a]
003b1a  b150              CBZ      r0,|L1.15154|
;;;5971   		{
;;;5972   		bps[in]._umin_av_cnt--;
003b1c  f1a00001          SUB      r0,r0,#1
003b20  b201              SXTH     r1,r0
003b22  f8a4104a          STRH     r1,[r4,#0x4a]
;;;5973   		if(bps[in]._umin_av_cnt==0)
003b26  b921              CBNZ     r1,|L1.15154|
;;;5974   			{
;;;5975   			bps[in]._umin_av_cnt=0;
;;;5976   			avar_bps_hndl(in,2,0);
003b28  2200              MOVS     r2,#0
003b2a  2102              MOVS     r1,#2
003b2c  4630              MOV      r0,r6
003b2e  f7fffffe          BL       avar_bps_hndl
                  |L1.15154|
;;;5977   		//	apv_cnt[in,0]=0;
;;;5978   		//	apv_cnt[in,1]=0;
;;;5979   		//	apv_cnt[in,2]=0;
;;;5980   			}
;;;5981   		}
;;;5982   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;5983   	}
;;;5984   
;;;5985   //bps[in]._state=bsOFF;
;;;5986   
;;;5987   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
003b32  7860              LDRB     r0,[r4,#1]
003b34  0700              LSLS     r0,r0,#28
003b36  d003              BEQ      |L1.15168|
003b38  f04f0004          MOV      r0,#4
003b3c  70a0              STRB     r0,[r4,#2]
003b3e  e017              B        |L1.15216|
                  |L1.15168|
;;;5988   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
003b40  484a              LDR      r0,|L1.15468|
003b42  7800              LDRB     r0,[r0,#0]  ; net_av
003b44  b130              CBZ      r0,|L1.15188|
003b46  78e0              LDRB     r0,[r4,#3]
003b48  2814              CMP      r0,#0x14
003b4a  d903              BLS      |L1.15188|
;;;5989   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
003b4c  f04f0005          MOV      r0,#5
003b50  70a0              STRB     r0,[r4,#2]
003b52  e00d              B        |L1.15216|
                  |L1.15188|
;;;5990   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
003b54  f8940042          LDRB     r0,[r4,#0x42]
003b58  0680              LSLS     r0,r0,#26
003b5a  d503              BPL      |L1.15204|
003b5c  f04f0002          MOV      r0,#2
003b60  70a0              STRB     r0,[r4,#2]
003b62  e005              B        |L1.15216|
                  |L1.15204|
;;;5991   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
003b64  78e0              LDRB     r0,[r4,#3]
003b66  2814              CMP      r0,#0x14
003b68  d202              BCS      |L1.15216|
003b6a  f04f0001          MOV      r0,#1
003b6e  70a0              STRB     r0,[r4,#2]
                  |L1.15216|
;;;5992   
;;;5993   
;;;5994   
;;;5995   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;5996   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;5997   //else bps[0]._state=ssNOT;
;;;5998   
;;;5999   //bps[in]._is_ready=0;
;;;6000   //bps[in]._is_wrk=0;
;;;6001   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6002   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6003   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6004   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6005   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6006   //	{
;;;6007   //	bps[in]._flags_bp='B';// заблокирован
;;;6008   //	bps[in]._is_ready=1;
;;;6009   //	}
;;;6010   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6011   //     {
;;;6012   //     bps[in]._flags_bp='W';// работает
;;;6013   //     bps[in]._is_ready=1;
;;;6014   //     bps[in]._is_wrk=1;
;;;6015        
;;;6016   //     }
;;;6017   //else bps[in]._is_ready=1;     
;;;6018   
;;;6019   
;;;6020   
;;;6021   
;;;6022   
;;;6023   /*
;;;6024   bps[in]._flags_tu&=BIN8(11111110);
;;;6025   if(bps[in]._ist_blok_cnt)
;;;6026   	{
;;;6027   	bps[in]._ist_blok_cnt--;
;;;6028   	bps[in]._flags_tu|=BIN8(1);
;;;6029   	}
;;;6030   
;;;6031   	   */ 
;;;6032   
;;;6033   //Пересброс БПСа при потере связи
;;;6034   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
003b70  78e0              LDRB     r0,[r4,#3]
003b72  280a              CMP      r0,#0xa
003b74  d306              BCC      |L1.15236|
003b76  f894002c          LDRB     r0,[r4,#0x2c]
003b7a  f0400080          ORR      r0,r0,#0x80
003b7e  f884002c          STRB     r0,[r4,#0x2c]
003b82  e005              B        |L1.15248|
                  |L1.15236|
;;;6035   else bps[in]._flags_tu&=BIN8(1111111);
003b84  f894002c          LDRB     r0,[r4,#0x2c]
003b88  f000007f          AND      r0,r0,#0x7f
003b8c  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.15248|
;;;6036   	
;;;6037   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
003b90  4937              LDR      r1,|L1.15472|
003b92  f9b40050          LDRSH    r0,[r4,#0x50]
003b96  f9b1102c          LDRSH    r1,[r1,#0x2c]  ; cntrl_stat
003b9a  4408              ADD      r0,r0,r1
003b9c  6320              STR      r0,[r4,#0x30]
;;;6038   bps[in]._vol_i=1000; 
003b9e  f44f707a          MOV      r0,#0x3e8
003ba2  6360              STR      r0,[r4,#0x34]
                  |L1.15268|
;;;6039   }
003ba4  e8bd81f0          POP      {r4-r8,pc}
;;;6040   
                          ENDP

                  avt_hndl PROC
;;;6041   //-----------------------------------------------
;;;6042   void avt_hndl(void)
003ba8  b570              PUSH     {r4-r6,lr}
;;;6043   {
;;;6044   char i;
;;;6045   for(i=0;i<12;i++)
003baa  f04f0000          MOV      r0,#0
;;;6046   	{
;;;6047   	if(eb2_data_short[6]&(1<<i))
003bae  4931              LDR      r1,|L1.15476|
;;;6048   		{
;;;6049   		avt_stat[i]=avtON;
003bb0  4d31              LDR      r5,|L1.15480|
003bb2  f04f0401          MOV      r4,#1                 ;6047
003bb6  f9b1200c          LDRSH    r2,[r1,#0xc]          ;6047
003bba  4603              MOV      r3,r0                 ;6045
                  |L1.15292|
003bbc  fa04f100          LSL      r1,r4,r0              ;6047
003bc0  420a              TST      r2,r1                 ;6047
003bc2  d001              BEQ      |L1.15304|
003bc4  542c              STRB     r4,[r5,r0]
003bc6  e000              B        |L1.15306|
                  |L1.15304|
;;;6050   		}
;;;6051   	else avt_stat[i]=avtOFF;
003bc8  542b              STRB     r3,[r5,r0]
                  |L1.15306|
003bca  f1000001          ADD      r0,r0,#1              ;6045
003bce  b2c0              UXTB     r0,r0                 ;6045
003bd0  280c              CMP      r0,#0xc               ;6045
003bd2  d3f3              BCC      |L1.15292|
;;;6052   	}
;;;6053   
;;;6054   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
003bd4  4e29              LDR      r6,|L1.15484|
003bd6  7828              LDRB     r0,[r5,#0]  ; avt_stat
003bd8  4c29              LDR      r4,|L1.15488|
003bda  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
003bdc  4281              CMP      r1,r0
003bde  d00b              BEQ      |L1.15352|
003be0  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003be4  2901              CMP      r1,#1
003be6  db07              BLT      |L1.15352|
;;;6055   	{
;;;6056   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
003be8  2801              CMP      r0,#1
003bea  d069              BEQ      |L1.15552|
;;;6057   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
003bec  2300              MOVS     r3,#0
003bee  2201              MOVS     r2,#1
003bf0  210b              MOVS     r1,#0xb
003bf2  a024              ADR      r0,|L1.15492|
003bf4  f7fffffe          BL       snmp_trap_send
                  |L1.15352|
;;;6058   	}
;;;6059   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
003bf8  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
003bfa  7868              LDRB     r0,[r5,#1]  ; avt_stat
003bfc  4281              CMP      r1,r0
003bfe  d00b              BEQ      |L1.15384|
003c00  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c04  2902              CMP      r1,#2
003c06  db07              BLT      |L1.15384|
;;;6060   	{
;;;6061   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
003c08  2801              CMP      r0,#1
003c0a  d07e              BEQ      |L1.15626|
;;;6062   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
003c0c  2300              MOVS     r3,#0
003c0e  2202              MOVS     r2,#2
003c10  210b              MOVS     r1,#0xb
003c12  a021              ADR      r0,|L1.15512|
003c14  f7fffffe          BL       snmp_trap_send
                  |L1.15384|
;;;6063   	}
;;;6064   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
003c18  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
003c1a  78a8              LDRB     r0,[r5,#2]  ; avt_stat
003c1c  4281              CMP      r1,r0
003c1e  d00b              BEQ      |L1.15416|
003c20  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c24  2903              CMP      r1,#3
003c26  db07              BLT      |L1.15416|
;;;6065   	{
;;;6066   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
003c28  2801              CMP      r0,#1
003c2a  d06f              BEQ      |L1.15628|
;;;6067   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
003c2c  2300              MOVS     r3,#0
003c2e  2203              MOVS     r2,#3
003c30  210b              MOVS     r1,#0xb
003c32  a01e              ADR      r0,|L1.15532|
003c34  f7fffffe          BL       snmp_trap_send
                  |L1.15416|
;;;6068   	}
;;;6069   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
003c38  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
003c3a  78e8              LDRB     r0,[r5,#3]  ; avt_stat
003c3c  4281              CMP      r1,r0
003c3e  d049              BEQ      |L1.15572|
003c40  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c44  2904              CMP      r1,#4
003c46  e03c              B        |L1.15554|
                  |L1.15432|
                          DCD      ica_u_necc
                  |L1.15436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.15440|
                          DCD      ICA_CH
                  |L1.15444|
                          DCD      TBAT
                  |L1.15448|
                          DCD      ipsBlckStat
                  |L1.15452|
                          DCD      ipsBlckSrc
                  |L1.15456|
                          DCD      ipsBlckLog
                  |L1.15460|
                          DCD      ||.bss||+0x40c
                  |L1.15464|
                          DCD      bps
                  |L1.15468|
                          DCD      net_av
                  |L1.15472|
                          DCD      ||area_number.25||
                  |L1.15476|
                          DCD      eb2_data_short
                  |L1.15480|
                          DCD      avt_stat
                  |L1.15484|
                          DCD      avt_stat_old
                  |L1.15488|
                          DCD      NUMAVT
                  |L1.15492|
003c84  4176746f          DCB      "Avtomat #1 is OFF",0
003c88  6d617420
003c8c  23312069
003c90  73204f46
003c94  4600    
003c96  00                DCB      0
003c97  00                DCB      0
                  |L1.15512|
003c98  4176746f          DCB      "Avtomat #2 is OFF",0
003c9c  6d617420
003ca0  23322069
003ca4  73204f46
003ca8  4600    
003caa  00                DCB      0
003cab  00                DCB      0
                  |L1.15532|
003cac  4176746f          DCB      "Avtomat #3 is OFF",0
003cb0  6d617420
003cb4  23332069
003cb8  73204f46
003cbc  4600    
003cbe  00                DCB      0
003cbf  00                DCB      0
                  |L1.15552|
003cc0  e065              B        |L1.15758|
                  |L1.15554|
003cc2  db07              BLT      |L1.15572|
;;;6070   	{
;;;6071   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
003cc4  2801              CMP      r0,#1
003cc6  d078              BEQ      |L1.15802|
;;;6072   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
003cc8  2300              MOVS     r3,#0
003cca  2204              MOVS     r2,#4
003ccc  210b              MOVS     r1,#0xb
003cce  a0ff              ADR      r0,|L1.16588|
003cd0  f7fffffe          BL       snmp_trap_send
                  |L1.15572|
;;;6073   	}
;;;6074   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
003cd4  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
003cd6  7928              LDRB     r0,[r5,#4]  ; avt_stat
003cd8  4281              CMP      r1,r0
003cda  d00b              BEQ      |L1.15604|
003cdc  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003ce0  2905              CMP      r1,#5
003ce2  db07              BLT      |L1.15604|
;;;6075   	{
;;;6076   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
003ce4  2801              CMP      r0,#1
003ce6  d070              BEQ      |L1.15818|
;;;6077   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
003ce8  2300              MOVS     r3,#0
003cea  2205              MOVS     r2,#5
003cec  210b              MOVS     r1,#0xb
003cee  a0fc              ADR      r0,|L1.16608|
003cf0  f7fffffe          BL       snmp_trap_send
                  |L1.15604|
;;;6078   	}
;;;6079   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
003cf4  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
003cf6  7968              LDRB     r0,[r5,#5]  ; avt_stat
003cf8  4281              CMP      r1,r0
003cfa  d00e              BEQ      |L1.15642|
003cfc  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003d00  2906              CMP      r1,#6
003d02  db0a              BLT      |L1.15642|
;;;6080   	{
;;;6081   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
003d04  2801              CMP      r0,#1
003d06  d067              BEQ      |L1.15832|
;;;6082   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
003d08  e001              B        |L1.15630|
                  |L1.15626|
003d0a  e047              B        |L1.15772|
                  |L1.15628|
003d0c  e04e              B        |L1.15788|
                  |L1.15630|
003d0e  2300              MOVS     r3,#0
003d10  2206              MOVS     r2,#6
003d12  210b              MOVS     r1,#0xb
003d14  a0f7              ADR      r0,|L1.16628|
003d16  f7fffffe          BL       snmp_trap_send
                  |L1.15642|
;;;6083   	}
;;;6084   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
003d1a  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
003d1c  79a8              LDRB     r0,[r5,#6]  ; avt_stat
003d1e  4281              CMP      r1,r0
003d20  d00b              BEQ      |L1.15674|
003d22  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003d26  2907              CMP      r1,#7
003d28  db07              BLT      |L1.15674|
;;;6085   	{
;;;6086   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
003d2a  2801              CMP      r0,#1
003d2c  d05b              BEQ      |L1.15846|
;;;6087   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
003d2e  2300              MOVS     r3,#0
003d30  2207              MOVS     r2,#7
003d32  210b              MOVS     r1,#0xb
003d34  a0f4              ADR      r0,|L1.16648|
003d36  f7fffffe          BL       snmp_trap_send
                  |L1.15674|
;;;6088   	}
;;;6089   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
003d3a  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
003d3c  79e8              LDRB     r0,[r5,#7]  ; avt_stat
003d3e  4281              CMP      r1,r0
003d40  d00b              BEQ      |L1.15706|
003d42  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003d46  2908              CMP      r1,#8
003d48  db07              BLT      |L1.15706|
;;;6090   	{
;;;6091   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
003d4a  2801              CMP      r0,#1
003d4c  d052              BEQ      |L1.15860|
;;;6092   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
003d4e  2300              MOVS     r3,#0
003d50  2208              MOVS     r2,#8
003d52  210b              MOVS     r1,#0xb
003d54  a0f1              ADR      r0,|L1.16668|
003d56  f7fffffe          BL       snmp_trap_send
                  |L1.15706|
;;;6093   	}
;;;6094   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
003d5a  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
003d5c  7a28              LDRB     r0,[r5,#8]  ; avt_stat
003d5e  4281              CMP      r1,r0
003d60  d00b              BEQ      |L1.15738|
003d62  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003d66  2909              CMP      r1,#9
003d68  db07              BLT      |L1.15738|
;;;6095   	{
;;;6096   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
003d6a  2801              CMP      r0,#1
003d6c  d049              BEQ      |L1.15874|
;;;6097   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
003d6e  2300              MOVS     r3,#0
003d70  2209              MOVS     r2,#9
003d72  210b              MOVS     r1,#0xb
003d74  a0ee              ADR      r0,|L1.16688|
003d76  f7fffffe          BL       snmp_trap_send
                  |L1.15738|
;;;6098   	}
;;;6099   
;;;6100   for(i=0;i<12;i++)
003d7a  f04f0000          MOV      r0,#0
                  |L1.15742|
;;;6101   	{
;;;6102   	avt_stat_old[i]=avt_stat[i];
003d7e  5c29              LDRB     r1,[r5,r0]
003d80  5431              STRB     r1,[r6,r0]
003d82  f1000001          ADD      r0,r0,#1              ;6100
003d86  b2c0              UXTB     r0,r0                 ;6100
003d88  280c              CMP      r0,#0xc               ;6100
003d8a  d3f8              BCC      |L1.15742|
;;;6103   	}
;;;6104   }
003d8c  bd70              POP      {r4-r6,pc}
                  |L1.15758|
003d8e  2301              MOVS     r3,#1                 ;6056
003d90  461a              MOV      r2,r3                 ;6056
003d92  210b              MOVS     r1,#0xb               ;6056
003d94  a0eb              ADR      r0,|L1.16708|
003d96  f7fffffe          BL       snmp_trap_send
003d9a  e72d              B        |L1.15352|
                  |L1.15772|
003d9c  2301              MOVS     r3,#1                 ;6061
003d9e  2202              MOVS     r2,#2                 ;6061
003da0  210b              MOVS     r1,#0xb               ;6061
003da2  a0ed              ADR      r0,|L1.16728|
003da4  f7fffffe          BL       snmp_trap_send
003da8  e736              B        |L1.15384|
003daa  e006              B        |L1.15802|
                  |L1.15788|
003dac  2301              MOVS     r3,#1                 ;6066
003dae  2203              MOVS     r2,#3                 ;6066
003db0  210b              MOVS     r1,#0xb               ;6066
003db2  a0ee              ADR      r0,|L1.16748|
003db4  f7fffffe          BL       snmp_trap_send
003db8  e73e              B        |L1.15416|
                  |L1.15802|
003dba  2301              MOVS     r3,#1                 ;6071
003dbc  2204              MOVS     r2,#4                 ;6071
003dbe  210b              MOVS     r1,#0xb               ;6071
003dc0  a0ef              ADR      r0,|L1.16768|
003dc2  f7fffffe          BL       snmp_trap_send
003dc6  e785              B        |L1.15572|
003dc8  e7ff              B        |L1.15818|
                  |L1.15818|
003dca  2301              MOVS     r3,#1                 ;6076
003dcc  2205              MOVS     r2,#5                 ;6076
003dce  210b              MOVS     r1,#0xb               ;6076
003dd0  a0f0              ADR      r0,|L1.16788|
003dd2  f7fffffe          BL       snmp_trap_send
003dd6  e78d              B        |L1.15604|
                  |L1.15832|
003dd8  2301              MOVS     r3,#1                 ;6081
003dda  2206              MOVS     r2,#6                 ;6081
003ddc  210b              MOVS     r1,#0xb               ;6081
003dde  a0f2              ADR      r0,|L1.16808|
003de0  f7fffffe          BL       snmp_trap_send
003de4  e799              B        |L1.15642|
                  |L1.15846|
003de6  2301              MOVS     r3,#1                 ;6086
003de8  2207              MOVS     r2,#7                 ;6086
003dea  210b              MOVS     r1,#0xb               ;6086
003dec  a0f3              ADR      r0,|L1.16828|
003dee  f7fffffe          BL       snmp_trap_send
003df2  e7a2              B        |L1.15674|
                  |L1.15860|
003df4  2301              MOVS     r3,#1                 ;6091
003df6  2208              MOVS     r2,#8                 ;6091
003df8  210b              MOVS     r1,#0xb               ;6091
003dfa  a0f5              ADR      r0,|L1.16848|
003dfc  f7fffffe          BL       snmp_trap_send
003e00  e7ab              B        |L1.15706|
                  |L1.15874|
003e02  2301              MOVS     r3,#1                 ;6096
003e04  2209              MOVS     r2,#9                 ;6096
003e06  210b              MOVS     r1,#0xb               ;6096
003e08  a0f6              ADR      r0,|L1.16868|
003e0a  f7fffffe          BL       snmp_trap_send
003e0e  e7b4              B        |L1.15738|
;;;6105   
                          ENDP

                  bat_hndl PROC
;;;6106   //-----------------------------------------------
;;;6107   void bat_hndl(void)
003e10  b570              PUSH     {r4-r6,lr}
;;;6108   {
;;;6109   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;6110   	{
;;;6111   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;6112   		{
;;;6113   		char i;
;;;6114   		for(i=0;i<2;i++)
;;;6115   			{
;;;6116   			if(mess_data[1]&(1<<i))
;;;6117   				{
;;;6118   				bat[i]._cnt_to_block=0;
;;;6119        			bat[i]._rel_stat=0;
;;;6120        			}
;;;6121   			}
;;;6122   		}
;;;6123   	}
;;;6124   if(mess_find(_MESS_BAT_MASK_OFF))
;;;6125   	{		
;;;6126   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;6127   		{
;;;6128   		char i;
;;;6129   		for(i=0;i<2;i++)
;;;6130   			{
;;;6131   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;6132   				{
;;;6133   				bat[i]._cnt_to_block=20;
;;;6134   				bat[i]._rel_stat=1;
;;;6135        			}
;;;6136   			}
;;;6137   		
;;;6138   		}		
;;;6139   	}*/
;;;6140   
;;;6141   if(mess_find_unvol(MESS2BAT_HNDL))
003e12  20c8              MOVS     r0,#0xc8
003e14  f7fffffe          BL       mess_find_unvol
;;;6142   	{ 
;;;6143   	char i;
;;;6144   	
;;;6145   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;6146   		{
;;;6147   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6148   			{
;;;6149   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
003e18  49f7              LDR      r1,|L1.16888|
003e1a  2200              MOVS     r2,#0                 ;6147
003e1c  b3a8              CBZ      r0,|L1.16010|
003e1e  4bf7              LDR      r3,|L1.16892|
;;;6150   			}
;;;6151   		}
;;;6152   
;;;6153   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;6154   		{
;;;6155   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6156   			{
;;;6157   			if(mess_data[1]&(1<<i))
003e20  2401              MOVS     r4,#1
003e22  6818              LDR      r0,[r3,#0]            ;6145  ; mess_data
003e24  28c9              CMP      r0,#0xc9              ;6145
003e26  d01c              BEQ      |L1.15970|
003e28  28ca              CMP      r0,#0xca              ;6153
003e2a  d02f              BEQ      |L1.16012|
;;;6158   				{
;;;6159   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;6160   				}
;;;6161   			else bat[i]._cnt_to_block=0;
;;;6162   			}
;;;6163   		}
;;;6164   	else 
;;;6165   	 	{
;;;6166   		for(i=0;i<MAX_NUM_OF_BAT;i++)
003e2c  4610              MOV      r0,r2
                  |L1.15918|
;;;6167   			{
;;;6168   			bat[i]._cnt_to_block=0;
003e2e  eb000340          ADD      r3,r0,r0,LSL #1
003e32  eb031300          ADD      r3,r3,r0,LSL #4
003e36  f8012023          STRB     r2,[r1,r3,LSL #2]
003e3a  f1000001          ADD      r0,r0,#1              ;6166
003e3e  b2c0              UXTB     r0,r0                 ;6166
003e40  2802              CMP      r0,#2                 ;6166
003e42  d3f4              BCC      |L1.15918|
                  |L1.15940|
;;;6169   			}
;;;6170   
;;;6171   		}
;;;6172   	for(i=0;i<MAX_NUM_OF_BAT;i++)
003e44  f04f0000          MOV      r0,#0
                  |L1.15944|
;;;6173   		{
;;;6174   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
003e48  eb000340          ADD      r3,r0,r0,LSL #1
003e4c  eb031300          ADD      r3,r3,r0,LSL #4
003e50  f8115023          LDRB     r5,[r1,r3,LSL #2]
003e54  2d14              CMP      r5,#0x14
003e56  d939              BLS      |L1.16076|
003e58  eb010383          ADD      r3,r1,r3,LSL #2
003e5c  f883403c          STRB     r4,[r3,#0x3c]
003e60  e038              B        |L1.16084|
                  |L1.15970|
003e62  f04f0000          MOV      r0,#0                 ;6147
                  |L1.15974|
003e66  eb000340          ADD      r3,r0,r0,LSL #1       ;6149
003e6a  eb031500          ADD      r5,r3,r0,LSL #4       ;6149
003e6e  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6149
003e72  2b32              CMP      r3,#0x32              ;6149
003e74  d203              BCS      |L1.15998|
003e76  f1030301          ADD      r3,r3,#1              ;6149
003e7a  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6149
                  |L1.15998|
003e7e  f1000001          ADD      r0,r0,#1              ;6147
003e82  b2c0              UXTB     r0,r0                 ;6147
003e84  2802              CMP      r0,#2                 ;6147
003e86  d3ee              BCC      |L1.15974|
003e88  e7dc              B        |L1.15940|
                  |L1.16010|
003e8a  e029              B        |L1.16096|
                  |L1.16012|
003e8c  f04f0000          MOV      r0,#0                 ;6155
003e90  685e              LDR      r6,[r3,#4]            ;6157
                  |L1.16018|
003e92  fa04f300          LSL      r3,r4,r0              ;6157
003e96  421e              TST      r6,r3                 ;6157
003e98  d00c              BEQ      |L1.16052|
003e9a  eb000340          ADD      r3,r0,r0,LSL #1       ;6159
003e9e  eb031500          ADD      r5,r3,r0,LSL #4       ;6159
003ea2  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6159
003ea6  2b32              CMP      r3,#0x32              ;6159
003ea8  d20a              BCS      |L1.16064|
003eaa  f1030301          ADD      r3,r3,#1              ;6159
003eae  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6159
003eb2  e005              B        |L1.16064|
                  |L1.16052|
003eb4  eb000340          ADD      r3,r0,r0,LSL #1       ;6161
003eb8  eb031300          ADD      r3,r3,r0,LSL #4       ;6161
003ebc  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6161
                  |L1.16064|
003ec0  f1000001          ADD      r0,r0,#1              ;6155
003ec4  b2c0              UXTB     r0,r0                 ;6155
003ec6  2802              CMP      r0,#2                 ;6155
003ec8  d3e3              BCC      |L1.16018|
003eca  e7bb              B        |L1.15940|
                  |L1.16076|
;;;6175   		else bat[i]._rel_stat=0;
003ecc  eb010383          ADD      r3,r1,r3,LSL #2
003ed0  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.16084|
003ed4  f1000001          ADD      r0,r0,#1              ;6172
003ed8  b2c0              UXTB     r0,r0                 ;6172
003eda  2802              CMP      r0,#2                 ;6172
003edc  d3b4              BCC      |L1.15944|
;;;6176   		}
;;;6177   
;;;6178   	}
;;;6179   
;;;6180   else 
;;;6181   	{
;;;6182   	char i;
;;;6183   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6184   		{
;;;6185   		bat[i]._cnt_to_block=0;
;;;6186   		bat[i]._rel_stat=0;
;;;6187   		}
;;;6188   
;;;6189   	}
;;;6190   
;;;6191   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;6192   	{
;;;6193   	if(PARAM_BAT_ON)
;;;6194   		{
;;;6195   		char i;
;;;6196   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6197   			{
;;;6198   			if(mess_data[1]&(1<<i))
;;;6199   				{
;;;6200   				bat[i]._cnt_to_block=0;
;;;6201   				bat[i]._rel_stat=0;
;;;6202   				}
;;;6203   			}
;;;6204   		}
;;;6205   	} */
;;;6206   }
003ede  bd70              POP      {r4-r6,pc}
                  |L1.16096|
003ee0  f04f0000          MOV      r0,#0                 ;6183
                  |L1.16100|
003ee4  eb000340          ADD      r3,r0,r0,LSL #1       ;6185
003ee8  eb031300          ADD      r3,r3,r0,LSL #4       ;6185
003eec  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6185
003ef0  eb010383          ADD      r3,r1,r3,LSL #2       ;6186
003ef4  f883203c          STRB     r2,[r3,#0x3c]         ;6186
003ef8  f1000001          ADD      r0,r0,#1              ;6183
003efc  b2c0              UXTB     r0,r0                 ;6183
003efe  2802              CMP      r0,#2                 ;6183
003f00  d3f0              BCC      |L1.16100|
003f02  bd70              POP      {r4-r6,pc}
;;;6207   
                          ENDP

                  bat_drv PROC
;;;6845   //-----------------------------------------------
;;;6846   void bat_drv(char in)
003f04  e92d4ffe          PUSH     {r1-r11,lr}
;;;6847   {
003f08  4605              MOV      r5,r0
;;;6848   unsigned short /*tempUS,*/tempUS_;
;;;6849   unsigned long tempUL,tempUL_;
;;;6850   unsigned short b_zar;
;;;6851   //static unsigned short time_cnt[2];
;;;6852   
;;;6853   
;;;6854   
;;;6855   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
003f0a  49bd              LDR      r1,|L1.16896|
003f0c  f9310015          LDRSH    r0,[r1,r5,LSL #1]
003f10  b118              CBZ      r0,|L1.16154|
003f12  f1a00001          SUB      r0,r0,#1
003f16  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.16154|
;;;6856   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
003f1a  4ab9              LDR      r2,|L1.16896|
003f1c  1d12              ADDS     r2,r2,#4
003f1e  f9320015          LDRSH    r0,[r2,r5,LSL #1]
003f22  b118              CBZ      r0,|L1.16172|
003f24  f1a00001          SUB      r0,r0,#1
003f28  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.16172|
;;;6857   
;;;6858   
;;;6859   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
003f2c  eb050045          ADD      r0,r5,r5,LSL #1
003f30  4bb1              LDR      r3,|L1.16888|
003f32  eb001005          ADD      r0,r0,r5,LSL #4
003f36  eb030480          ADD      r4,r3,r0,LSL #2
003f3a  4bb2              LDR      r3,|L1.16900|
003f3c  9002              STR      r0,[sp,#8]
003f3e  f9b40008          LDRSH    r0,[r4,#8]
003f42  f9b33000          LDRSH    r3,[r3,#0]  ; IZMAX
003f46  f04f0b64          MOV      r11,#0x64
003f4a  4298              CMP      r0,r3
003f4c  dd01              BLE      |L1.16210|
003f4e  f821b015          STRH     r11,[r1,r5,LSL #1]
                  |L1.16210|
;;;6860   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
003f52  2800              CMP      r0,#0
003f54  da01              BGE      |L1.16218|
003f56  f822b015          STRH     r11,[r2,r5,LSL #1]
                  |L1.16218|
;;;6861   
;;;6862   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;6863        {
;;;6864        if(!cntrl_stat_blok_cnt_)
003f5a  48a9              LDR      r0,|L1.16896|
003f5c  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;6862
003f60  38ac              SUBS     r0,r0,#0xac
003f62  2700              MOVS     r7,#0
003f64  b14b              CBZ      r3,|L1.16250|
003f66  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;6862
003f6a  b133              CBZ      r3,|L1.16250|
003f6c  f8b03070          LDRH     r3,[r0,#0x70]  ; cntrl_stat_blok_cnt_
003f70  b1a3              CBZ      r3,|L1.16284|
;;;6865             {
;;;6866             cntrl_stat_blok_cnt_=600; 
;;;6867             cntrl_stat_blok_cnt_plus[in]=0;
;;;6868             cntrl_stat_blok_cnt_minus[in]=0;
;;;6869             }
;;;6870        else cntrl_stat_blok_cnt=3000;
003f72  f64031b8          MOV      r1,#0xbb8
003f76  f8a0106e          STRH     r1,[r0,#0x6e]
                  |L1.16250|
;;;6871        }
;;;6872   cntrl_stat_blok_cnt=0;
003f7a  f8a0706e          STRH     r7,[r0,#0x6e]
;;;6873   
;;;6874   if(++(bat[in]._time_cnt)>=10)
003f7e  f894003e          LDRB     r0,[r4,#0x3e]
003f82  1c40              ADDS     r0,r0,#1
003f84  b2c0              UXTB     r0,r0
003f86  f884003e          STRB     r0,[r4,#0x3e]
003f8a  280a              CMP      r0,#0xa
003f8c  d301              BCC      |L1.16274|
;;;6875   	{
;;;6876   	bat[in]._time_cnt=0;
003f8e  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.16274|
;;;6877   	//bat[in]._zar_cnt++;
;;;6878   	}
;;;6879   
;;;6880   if(main_10Hz_cnt==50)
003f92  4e9d              LDR      r6,|L1.16904|
003f94  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
003f96  2832              CMP      r0,#0x32
003f98  d009              BEQ      |L1.16302|
003f9a  e017              B        |L1.16332|
                  |L1.16284|
003f9c  f44f7316          MOV      r3,#0x258             ;6866
003fa0  f8a03070          STRH     r3,[r0,#0x70]         ;6866
003fa4  f8217015          STRH     r7,[r1,r5,LSL #1]     ;6867
003fa8  f8227015          STRH     r7,[r2,r5,LSL #1]     ;6868
003fac  e7e5              B        |L1.16250|
                  |L1.16302|
;;;6881   	{
;;;6882   	if(!bat[in]._rel_stat)
003fae  f894003c          LDRB     r0,[r4,#0x3c]
003fb2  b958              CBNZ     r0,|L1.16332|
;;;6883   		{
;;;6884   		
;;;6885   		if(bat[in]._Ub<80) 
003fb4  f9b40002          LDRSH    r0,[r4,#2]
003fb8  2850              CMP      r0,#0x50
003fba  da07              BGE      |L1.16332|
;;;6886   			{
;;;6887   			
;;;6888   			if(!(bat[in]._av&1))
003fbc  f894003d          LDRB     r0,[r4,#0x3d]
003fc0  07c0              LSLS     r0,r0,#31
003fc2  d103              BNE      |L1.16332|
;;;6889   				{
;;;6890   				avar_bat_hndl(in,1);
003fc4  2101              MOVS     r1,#1
003fc6  4628              MOV      r0,r5
003fc8  f7fffffe          BL       avar_bat_hndl
                  |L1.16332|
;;;6891   				//if(in==0)plazma_bat++;
;;;6892   				}
;;;6893   			}				
;;;6894   
;;;6895   		}
;;;6896   	}
;;;6897   
;;;6898   if(main_10Hz_cnt>200)
003fcc  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;6899   	{
;;;6900   	if(abs(bat[in]._Ib)>IKB) 
003fd0  4e8e              LDR      r6,|L1.16908|
003fd2  28c8              CMP      r0,#0xc8              ;6898
003fd4  dd0f              BLE      |L1.16374|
003fd6  f9b40008          LDRSH    r0,[r4,#8]
003fda  f7fffffe          BL       abs
003fde  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
003fe2  4288              CMP      r0,r1
003fe4  dd07              BLE      |L1.16374|
;;;6901   		{
;;;6902   		if((bat[in]._av&1))avar_bat_hndl(in,0);
003fe6  f894003d          LDRB     r0,[r4,#0x3d]
003fea  07c0              LSLS     r0,r0,#31
003fec  d003              BEQ      |L1.16374|
003fee  2100              MOVS     r1,#0
003ff0  4628              MOV      r0,r5
003ff2  f7fffffe          BL       avar_bat_hndl
                  |L1.16374|
;;;6903   		}
;;;6904   	}
;;;6905   
;;;6906   #ifdef APSENERGIA
;;;6907   //if(bat[in]._Ib>(-IKB))
;;;6908   
;;;6909   
;;;6910   #endif
;;;6911   
;;;6912   if(bat[in]._Ib>(-IKB))
003ff6  4885              LDR      r0,|L1.16908|
003ff8  f9b41008          LDRSH    r1,[r4,#8]
003ffc  f9b00000          LDRSH    r0,[r0,#0]  ; IKB
004000  4240              RSBS     r0,r0,#0
004002  4281              CMP      r1,r0
004004  dd14              BLE      |L1.16432|
;;;6913   	{
;;;6914   	if(bat[in]._cnt_wrk<10)
004006  7b60              LDRB     r0,[r4,#0xd]
004008  280a              CMP      r0,#0xa
00400a  d20d              BCS      |L1.16424|
;;;6915   		{
;;;6916   		bat[in]._cnt_wrk++;
00400c  f1000001          ADD      r0,r0,#1
004010  b2c0              UXTB     r0,r0
004012  7360              STRB     r0,[r4,#0xd]
;;;6917   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004014  280a              CMP      r0,#0xa
004016  d306              BCC      |L1.16422|
004018  7ba0              LDRB     r0,[r4,#0xe]
00401a  2800              CMP      r0,#0
00401c  d003              BEQ      |L1.16422|
;;;6918   			{
;;;6919   			bat[in]._wrk=0;
00401e  73a7              STRB     r7,[r4,#0xe]
;;;6920   			//beep_init(0x7L,'O');
;;;6921   			//wrk_mem_hndl(0);
;;;6922   			wrk_mem_hndl(in);
004020  4628              MOV      r0,r5
004022  f7fffffe          BL       wrk_mem_hndl
                  |L1.16422|
004026  e110              B        |L1.16970|
                  |L1.16424|
;;;6923   			//plazma++;
;;;6924   			}
;;;6925   		}
;;;6926   	else bat[in]._cnt_wrk=10;	
004028  f04f000a          MOV      r0,#0xa
00402c  7360              STRB     r0,[r4,#0xd]
00402e  e10c              B        |L1.16970|
                  |L1.16432|
;;;6927   	}	
;;;6928   
;;;6929   else if(bat[in]._Ib<(-IKB))
004030  da40              BGE      |L1.16564|
;;;6930   	{
;;;6931   	if(bat[in]._cnt_wrk)
004032  7b60              LDRB     r0,[r4,#0xd]
004034  b3f0              CBZ      r0,|L1.16564|
;;;6932   		{
;;;6933   		bat[in]._cnt_wrk--;
004036  f1a00001          SUB      r0,r0,#1
00403a  b2c0              UXTB     r0,r0
00403c  7360              STRB     r0,[r4,#0xd]
;;;6934   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
00403e  bbc8              CBNZ     r0,|L1.16564|
004040  7ba0              LDRB     r0,[r4,#0xe]
004042  bbb8              CBNZ     r0,|L1.16564|
;;;6935   			{
;;;6936   			bat[in]._wrk=1;
004044  f04f0001          MOV      r0,#1
004048  73a0              STRB     r0,[r4,#0xe]
;;;6937   
;;;6938   				{
;;;6939   				char temp;
;;;6940   				signed short temp_temp;
;;;6941   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
00404a  4871              LDR      r0,|L1.16912|
00404c  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
00404e  f1000001          ADD      r0,r0,#1
004052  f0000007          AND      r0,r0,#7
004056  eb040040          ADD      r0,r4,r0,LSL #1
00405a  8c00              LDRH     r0,[r0,#0x20]
00405c  9000              STR      r0,[sp,#0]
;;;6942   			 
;;;6943   				temp=LPC_RTC->YEAR;
00405e  4e6d              LDR      r6,|L1.16916|
004060  8bb0              LDRH     r0,[r6,#0x1c]
004062  9001              STR      r0,[sp,#4]
;;;6944   				gran_char((signed char*)&temp,1,99);
004064  f04f0263          MOV      r2,#0x63
004068  f04f0101          MOV      r1,#1
00406c  a801              ADD      r0,sp,#4
00406e  f7fffffe          BL       gran_char
;;;6945   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
004072  f104041c          ADD      r4,r4,#0x1c
004076  f89d0004          LDRB     r0,[sp,#4]
00407a  7620              STRB     r0,[r4,#0x18]
;;;6946   			
;;;6947   				temp=LPC_RTC->MONTH;
00407c  7e30              LDRB     r0,[r6,#0x18]
00407e  9001              STR      r0,[sp,#4]
;;;6948   				gran_char((signed char*)&temp,1,12);
004080  f04f020c          MOV      r2,#0xc
004084  f04f0101          MOV      r1,#1
004088  a801              ADD      r0,sp,#4
00408a  f7fffffe          BL       gran_char
;;;6949   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
00408e  f89d0004          LDRB     r0,[sp,#4]
004092  7660              STRB     r0,[r4,#0x19]
;;;6950   			
;;;6951   				temp=LPC_RTC->DOM;
004094  7b30              LDRB     r0,[r6,#0xc]
004096  9001              STR      r0,[sp,#4]
;;;6952   				gran_char((signed char*)&temp,1,31);
004098  221f              MOVS     r2,#0x1f
00409a  2101              MOVS     r1,#1
00409c  a801              ADD      r0,sp,#4
00409e  f7fffffe          BL       gran_char
;;;6953   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
0040a2  f89d0004          LDRB     r0,[sp,#4]
0040a6  76a0              STRB     r0,[r4,#0x1a]
;;;6954   				
;;;6955   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
0040a8  f89d0000          LDRB     r0,[sp,#0]
0040ac  76e0              STRB     r0,[r4,#0x1b]
;;;6956   
;;;6957   				temp=LPC_RTC->HOUR;
0040ae  7a30              LDRB     r0,[r6,#8]
0040b0  9001              STR      r0,[sp,#4]
;;;6958   				gran_char((signed char*)&temp,0,23);
0040b2  e000              B        |L1.16566|
                  |L1.16564|
0040b4  e0c9              B        |L1.16970|
                  |L1.16566|
0040b6  2217              MOVS     r2,#0x17
0040b8  2100              MOVS     r1,#0
0040ba  a801              ADD      r0,sp,#4
0040bc  f7fffffe          BL       gran_char
;;;6959   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
0040c0  f89d0004          LDRB     r0,[sp,#4]
0040c4  7720              STRB     r0,[r4,#0x1c]
;;;6960                  	
;;;6961   				temp=LPC_RTC->MIN;
0040c6  7930              LDRB     r0,[r6,#4]
0040c8  9001              STR      r0,[sp,#4]
;;;6962   				gran_char((signed char*)&temp,0,59);
0040ca  e0a5              B        |L1.16920|
                  |L1.16588|
0040cc  4176746f          DCB      "Avtomat #4 is OFF",0
0040d0  6d617420
0040d4  23342069
0040d8  73204f46
0040dc  4600    
0040de  00                DCB      0
0040df  00                DCB      0
                  |L1.16608|
0040e0  4176746f          DCB      "Avtomat #5 is OFF",0
0040e4  6d617420
0040e8  23352069
0040ec  73204f46
0040f0  4600    
0040f2  00                DCB      0
0040f3  00                DCB      0
                  |L1.16628|
0040f4  4176746f          DCB      "Avtomat #6 is OFF",0
0040f8  6d617420
0040fc  23362069
004100  73204f46
004104  4600    
004106  00                DCB      0
004107  00                DCB      0
                  |L1.16648|
004108  4176746f          DCB      "Avtomat #7 is OFF",0
00410c  6d617420
004110  23372069
004114  73204f46
004118  4600    
00411a  00                DCB      0
00411b  00                DCB      0
                  |L1.16668|
00411c  4176746f          DCB      "Avtomat #8 is OFF",0
004120  6d617420
004124  23382069
004128  73204f46
00412c  4600    
00412e  00                DCB      0
00412f  00                DCB      0
                  |L1.16688|
004130  4176746f          DCB      "Avtomat #9 is OFF",0
004134  6d617420
004138  23392069
00413c  73204f46
004140  4600    
004142  00                DCB      0
004143  00                DCB      0
                  |L1.16708|
004144  4176746f          DCB      "Avtomat #1 is ON ",0
004148  6d617420
00414c  23312069
004150  73204f4e
004154  2000    
004156  00                DCB      0
004157  00                DCB      0
                  |L1.16728|
004158  4176746f          DCB      "Avtomat #2 is ON ",0
00415c  6d617420
004160  23322069
004164  73204f4e
004168  2000    
00416a  00                DCB      0
00416b  00                DCB      0
                  |L1.16748|
00416c  4176746f          DCB      "Avtomat #3 is ON ",0
004170  6d617420
004174  23332069
004178  73204f4e
00417c  2000    
00417e  00                DCB      0
00417f  00                DCB      0
                  |L1.16768|
004180  4176746f          DCB      "Avtomat #4 is ON ",0
004184  6d617420
004188  23342069
00418c  73204f4e
004190  2000    
004192  00                DCB      0
004193  00                DCB      0
                  |L1.16788|
004194  4176746f          DCB      "Avtomat #5 is ON ",0
004198  6d617420
00419c  23352069
0041a0  73204f4e
0041a4  2000    
0041a6  00                DCB      0
0041a7  00                DCB      0
                  |L1.16808|
0041a8  4176746f          DCB      "Avtomat #6 is ON ",0
0041ac  6d617420
0041b0  23362069
0041b4  73204f4e
0041b8  2000    
0041ba  00                DCB      0
0041bb  00                DCB      0
                  |L1.16828|
0041bc  4176746f          DCB      "Avtomat #7 is ON ",0
0041c0  6d617420
0041c4  23372069
0041c8  73204f4e
0041cc  2000    
0041ce  00                DCB      0
0041cf  00                DCB      0
                  |L1.16848|
0041d0  4176746f          DCB      "Avtomat #8 is ON ",0
0041d4  6d617420
0041d8  23382069
0041dc  73204f4e
0041e0  2000    
0041e2  00                DCB      0
0041e3  00                DCB      0
                  |L1.16868|
0041e4  4176746f          DCB      "Avtomat #9 is ON ",0
0041e8  6d617420
0041ec  23392069
0041f0  73204f4e
0041f4  2000    
0041f6  00                DCB      0
0041f7  00                DCB      0
                  |L1.16888|
                          DCD      bat
                  |L1.16892|
                          DCD      mess_data
                  |L1.16896|
                          DCD      ||area_number.25||+0xac
                  |L1.16900|
                          DCD      IZMAX
                  |L1.16904|
                          DCD      main_10Hz_cnt
                  |L1.16908|
                          DCD      IKB
                  |L1.16912|
                          DCD      bat_u_old_cnt
                  |L1.16916|
                          DCD      0x40024020
                  |L1.16920|
004218  223b              MOVS     r2,#0x3b
00421a  2100              MOVS     r1,#0
00421c  a801              ADD      r0,sp,#4
00421e  f7fffffe          BL       gran_char
;;;6963   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
004222  f89d0004          LDRB     r0,[sp,#4]
004226  7760              STRB     r0,[r4,#0x1d]
;;;6964   	          
;;;6965   				temp=LPC_RTC->SEC;
004228  7830              LDRB     r0,[r6,#0]
00422a  9001              STR      r0,[sp,#4]
;;;6966   				gran_char((signed char*)&temp,0,59);
00422c  223b              MOVS     r2,#0x3b
00422e  2100              MOVS     r1,#0
004230  a801              ADD      r0,sp,#4
004232  f7fffffe          BL       gran_char
;;;6967   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
004236  f89d0004          LDRB     r0,[sp,#4]
00423a  77a0              STRB     r0,[r4,#0x1e]
;;;6968   			
;;;6969   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
00423c  f89d0001          LDRB     r0,[sp,#1]
004240  77e0              STRB     r0,[r4,#0x1f]
;;;6970   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004242  8027              STRH     r7,[r4,#0]
;;;6971   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
004244  8067              STRH     r7,[r4,#2]
004246  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.16970|
;;;6972   				}
;;;6973   	
;;;6974   			}
;;;6975   
;;;6976   		}
;;;6977   	else bat[in]._cnt_wrk=0;	 
;;;6978   	
;;;6979   	}					
;;;6980   
;;;6981   /*
;;;6982   if(Ibat>=(-IKB))
;;;6983   	{
;;;6984   	if(cnt_wrk<10)
;;;6985   		{
;;;6986   		cnt_wrk++;
;;;6987   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;6988   			{
;;;6989   			wrk=wrkOFF;
;;;6990   			//beep_init(0x7L,'O');
;;;6991   			wrk_mem_hndl(ibat_integr);
;;;6992   			}
;;;6993   		}
;;;6994   	else cnt_wrk=10;	
;;;6995   	}	
;;;6996   
;;;6997   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;6998   	{
;;;6999   	if(cnt_wrk)
;;;7000   		{
;;;7001   		cnt_wrk--;
;;;7002   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7003   			{
;;;7004   			char temp;
;;;7005   			signed short temp_temp;
;;;7006   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7007   			 
;;;7008   			wrk=wrkON;
;;;7009   			
;;;7010   			temp=_year;
;;;7011   			gran_char(&temp,1,99);
;;;7012   			*((char*)(&(wrk_date[0])))=temp;
;;;7013   			
;;;7014   			temp=_month;
;;;7015   			gran_char(&temp,1,12);
;;;7016   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7017   			
;;;7018   			temp=_date;
;;;7019   			gran_char(&temp,1,31);
;;;7020   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7021   				
;;;7022   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7023   
;;;7024   			temp=_hour;
;;;7025   			gran_char(&temp,0,23);
;;;7026   			*((char*)(&(wrk_date[1])))=temp;
;;;7027                  
;;;7028   			temp=_min;
;;;7029   			gran_char(&temp,0,59);
;;;7030   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7031   	          
;;;7032   			temp=_sec;
;;;7033   			gran_char(&temp,0,59);
;;;7034   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7035   			
;;;7036   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7037   
;;;7038   			
;;;7039   			//beep_init(0xFL,'O'); 
;;;7040   			ibat_integr=0;
;;;7041   			ibat_integr_=0;
;;;7042   			}
;;;7043   		}
;;;7044   	else cnt_wrk=0;	 
;;;7045   	
;;;7046   	}
;;;7047   if(wrk==wrkON)
;;;7048   	{
;;;7049   	ibat_integr_+=-Ibat;
;;;7050   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7051   		{
;;;7052   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7053   		ibat_integr++;
;;;7054   		}
;;;7055   	}
;;;7056   
;;;7057   */
;;;7058   
;;;7059   
;;;7060   /*if(bat[in]._cnt_to_block)
;;;7061   	{
;;;7062   	bat[in]._cnt_to_block--;
;;;7063   	if(!(bat[in]._cnt_to_block))
;;;7064   		{
;;;7065   		//bat[in]._rel_stat=1;
;;;7066   		}
;;;7067   	}
;;;7068   */
;;;7069   
;;;7070   
;;;7071   
;;;7072   
;;;7073   //unsigned int tempUI,tempUI_;
;;;7074   //unsigned int b_zar; 
;;;7075   //char i;
;;;7076   //Ibat[0]=5000;                     
;;;7077   
;;;7078   
;;;7079                               
;;;7080   if(bat[in]._time_cnt==0)
;;;7081   	{
;;;7082   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;7083   	
;;;7084   	if(bat[in]._zar_cnt>=AH_CONSTANT)
00424a  f64848a0          MOV      r8,#0x8ca0
00424e  f894003e          LDRB     r0,[r4,#0x3e]         ;7080
004252  2800              CMP      r0,#0                 ;7080
004254  d17e              BNE      |L1.17236|
004256  f9b41008          LDRSH    r1,[r4,#8]            ;7082
00425a  6960              LDR      r0,[r4,#0x14]         ;7082
00425c  4408              ADD      r0,r0,r1              ;7082
00425e  6160              STR      r0,[r4,#0x14]         ;7082
;;;7085   		{
;;;7086   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;7087   		else tempUS_=BAT_C_REAL[in];
;;;7088   		
;;;7089   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004260  f8df940c          LDR      r9,|L1.18032|
004264  f8dfa40c          LDR      r10,|L1.18036|
004268  4540              CMP      r0,r8                 ;7084
00426a  db2a              BLT      |L1.17090|
00426c  f93a1015          LDRSH    r1,[r10,r5,LSL #1]    ;7086
004270  f5a140aa          SUB      r0,r1,#0x5500         ;7086
004274  3855              SUBS     r0,r0,#0x55           ;7086
004276  d103              BNE      |L1.17024|
004278  48ff              LDR      r0,|L1.18040|
00427a  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;7086
00427e  e001              B        |L1.17028|
                  |L1.17024|
004280  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;7087
                  |L1.17028|
004284  f8390015          LDRH     r0,[r9,r5,LSL #1]
004288  f7fffffe          BL       lc640_read_int
00428c  b280              UXTH     r0,r0
;;;7090   
;;;7091   		if(b_zar<(tempUS_/**10*/))
00428e  42b0              CMP      r0,r6
004290  d20e              BCS      |L1.17072|
;;;7092   			{
;;;7093   			bat[in]._zar_cnt-=AH_CONSTANT;
004292  6961              LDR      r1,[r4,#0x14]
004294  f5a14100          SUB      r1,r1,#0x8000
004298  f5a1614a          SUB      r1,r1,#0xca0
00429c  6161              STR      r1,[r4,#0x14]
;;;7094   
;;;7095   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
00429e  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0042a2  f1000001          ADD      r0,r0,#1
0042a6  b201              SXTH     r1,r0
0042a8  4610              MOV      r0,r2
0042aa  f7fffffe          BL       lc640_write_int
0042ae  e033              B        |L1.17176|
                  |L1.17072|
;;;7096   			}
;;;7097   		else if(b_zar>(tempUS_/**10*/))  
0042b0  d932              BLS      |L1.17176|
;;;7098   			{
;;;7099   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0042b2  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0042b6  b231              SXTH     r1,r6
0042b8  f7fffffe          BL       lc640_write_int
;;;7100   			bat[in]._zar_cnt=AH_CONSTANT;
0042bc  f8c48014          STR      r8,[r4,#0x14]
0042c0  e02a              B        |L1.17176|
                  |L1.17090|
;;;7101   
;;;7102   			}
;;;7103   
;;;7104   		}
;;;7105   
;;;7106   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
0042c2  49ee              LDR      r1,|L1.18044|
0042c4  4288              CMP      r0,r1
0042c6  dc27              BGT      |L1.17176|
;;;7107   		{
;;;7108   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
0042c8  f93a1015          LDRSH    r1,[r10,r5,LSL #1]
0042cc  f5a140aa          SUB      r0,r1,#0x5500
0042d0  3855              SUBS     r0,r0,#0x55
0042d2  d103              BNE      |L1.17116|
0042d4  48e8              LDR      r0,|L1.18040|
0042d6  f8306015          LDRH     r6,[r0,r5,LSL #1]
0042da  e001              B        |L1.17120|
                  |L1.17116|
;;;7109   		else tempUS_=BAT_C_REAL[in];
0042dc  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.17120|
;;;7110   		
;;;7111   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0042e0  f8390015          LDRH     r0,[r9,r5,LSL #1]
0042e4  f7fffffe          BL       lc640_read_int
0042e8  b280              UXTH     r0,r0
;;;7112   
;;;7113   		if(b_zar>tempUS_)
0042ea  42b0              CMP      r0,r6
0042ec  d905              BLS      |L1.17146|
;;;7114   			{
;;;7115   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0042ee  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0042f2  b231              SXTH     r1,r6
0042f4  f7fffffe          BL       lc640_write_int
;;;7116   			b_zar=tempUS_;
0042f8  4630              MOV      r0,r6
                  |L1.17146|
;;;7117   			}
;;;7118   		if(b_zar)
0042fa  b158              CBZ      r0,|L1.17172|
;;;7119   			{
;;;7120   			bat[in]._zar_cnt+=AH_CONSTANT;
0042fc  6961              LDR      r1,[r4,#0x14]
0042fe  4441              ADD      r1,r1,r8
004300  6161              STR      r1,[r4,#0x14]
;;;7121   
;;;7122   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
004302  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004306  f1a00001          SUB      r0,r0,#1
00430a  b201              SXTH     r1,r0
00430c  4610              MOV      r0,r2
00430e  f7fffffe          BL       lc640_write_int
004312  e001              B        |L1.17176|
                  |L1.17172|
;;;7123   			}
;;;7124   		else 
;;;7125   			{
;;;7126   			bat[in]._zar_cnt=-AH_CONSTANT;
004314  48d9              LDR      r0,|L1.18044|
004316  6160              STR      r0,[r4,#0x14]
                  |L1.17176|
;;;7127   			}
;;;7128   
;;;7129   		}
;;;7130   
;;;7131   			
;;;7132   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004318  f8390015          LDRH     r0,[r9,r5,LSL #1]
00431c  f7fffffe          BL       lc640_read_int
004320  4601              MOV      r1,r0
;;;7133   	
;;;7134   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
004322  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
004326  f5a042aa          SUB      r2,r0,#0x5500
00432a  3a55              SUBS     r2,r2,#0x55
00432c  d102              BNE      |L1.17204|
00432e  48d2              LDR      r0,|L1.18040|
004330  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.17204|
;;;7135   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;7136   		           	
;;;7137   	tempUL*=1000L;
004334  f44f727a          MOV      r2,#0x3e8
004338  fb01f102          MUL      r1,r1,r2
;;;7138   
;;;7139   
;;;7140   	if(tempUL_==0) tempUL=0;
00433c  b168              CBZ      r0,|L1.17242|
;;;7141   	else tempUL/=tempUL_;
00433e  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.17218|
;;;7142   
;;;7143   	tempUL/=10L;
004342  f04f010a          MOV      r1,#0xa
004346  fbb0f0f1          UDIV     r0,r0,r1
;;;7144   
;;;7145   	bat[in]._zar=(unsigned short)tempUL;
00434a  8220              STRH     r0,[r4,#0x10]
;;;7146   
;;;7147   	if(BAT_TYPE==1)
00434c  48cc              LDR      r0,|L1.18048|
00434e  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
004350  2801              CMP      r0,#1
004352  e000              B        |L1.17238|
                  |L1.17236|
004354  e010              B        |L1.17272|
                  |L1.17238|
004356  d003              BEQ      |L1.17248|
004358  e008              B        |L1.17260|
                  |L1.17242|
00435a  f04f0000          MOV      r0,#0                 ;7140
00435e  e7f0              B        |L1.17218|
                  |L1.17248|
;;;7148   		{
;;;7149   		bat[in]._zar=lakb[in]._s_o_c;
004360  49c8              LDR      r1,|L1.18052|
004362  9802              LDR      r0,[sp,#8]
004364  eb010080          ADD      r0,r1,r0,LSL #2
004368  8a40              LDRH     r0,[r0,#0x12]
00436a  8220              STRH     r0,[r4,#0x10]
                  |L1.17260|
;;;7150   		}
;;;7151   	
;;;7152   	gran((signed short*)&bat[in]._zar,0,100);
00436c  f1040010          ADD      r0,r4,#0x10
004370  2264              MOVS     r2,#0x64
004372  2100              MOVS     r1,#0
004374  f7fffffe          BL       gran
                  |L1.17272|
;;;7153        }
;;;7154   
;;;7155   
;;;7156   //Подсчет тока разряда батареи      
;;;7157   if(bat[in]._wrk==1)
004378  7ba0              LDRB     r0,[r4,#0xe]
00437a  2801              CMP      r0,#1
00437c  d113              BNE      |L1.17318|
;;;7158   	{
;;;7159   	if(bat[in]._Iintegr<36000)
00437e  8ba0              LDRH     r0,[r4,#0x1c]
004380  4540              CMP      r0,r8
004382  d20f              BCS      |L1.17316|
;;;7160   		{          
;;;7161   		bat[in]._Iintegr+=abs(bat[in]._Ib);
004384  f9b40008          LDRSH    r0,[r4,#8]
004388  f7fffffe          BL       abs
00438c  8ba1              LDRH     r1,[r4,#0x1c]
00438e  4408              ADD      r0,r0,r1
004390  b280              UXTH     r0,r0
004392  83a0              STRH     r0,[r4,#0x1c]
;;;7162   		if(bat[in]._Iintegr>=36000)
004394  4540              CMP      r0,r8
004396  d306              BCC      |L1.17318|
;;;7163   			{
;;;7164   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004398  83a7              STRH     r7,[r4,#0x1c]
;;;7165   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
00439a  8be0              LDRH     r0,[r4,#0x1e]
00439c  f1000001          ADD      r0,r0,#1
0043a0  83e0              STRH     r0,[r4,#0x1e]
0043a2  e000              B        |L1.17318|
                  |L1.17316|
;;;7166   			}
;;;7167   		}
;;;7168   	else 
;;;7169   		{
;;;7170   		bat[in]._Iintegr=0;
0043a4  83a7              STRH     r7,[r4,#0x1c]
                  |L1.17318|
;;;7171   		}	
;;;7172   	} 
;;;7173   	    
;;;7174   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7175   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
0043a6  f8df92e0          LDR      r9,|L1.18056|
0043aa  49b8              LDR      r1,|L1.18060|
0043ac  f8dfa2e0          LDR      r10,|L1.18064|
0043b0  f9b90000          LDRSH    r0,[r9,#0]  ; t_ext
0043b4  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
0043b8  4288              CMP      r0,r1
0043ba  dd02              BLE      |L1.17346|
0043bc  f89a0000          LDRB     r0,[r10,#0]  ; ND_EXT
0043c0  b3e8              CBZ      r0,|L1.17470|
                  |L1.17346|
;;;7176   	{
;;;7177   	bat[in]._sign_temper_cnt++;
;;;7178   	}
;;;7179   else 
;;;7180   	{
;;;7181   	bat[in]._sign_temper_cnt--;
0043c2  f8b40040          LDRH     r0,[r4,#0x40]
0043c6  f1a00001          SUB      r0,r0,#1
0043ca  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.17358|
;;;7182   	}
;;;7183   #else
;;;7184   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;7185   	{
;;;7186   	bat[in]._sign_temper_cnt++;
;;;7187   	}
;;;7188   else 
;;;7189   	{
;;;7190   	bat[in]._sign_temper_cnt--;
;;;7191   	}
;;;7192   #endif
;;;7193   gran(&bat[in]._sign_temper_cnt,0,600);
0043ce  f1040040          ADD      r0,r4,#0x40
0043d2  f44f7216          MOV      r2,#0x258
0043d6  2100              MOVS     r1,#0
0043d8  f7fffffe          BL       gran
;;;7194   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
0043dc  f9b40040          LDRSH    r0,[r4,#0x40]
0043e0  f240264e          MOV      r6,#0x24e
0043e4  42b0              CMP      r0,r6
0043e6  db05              BLT      |L1.17396|
0043e8  f894103f          LDRB     r1,[r4,#0x3f]
0043ec  f0410101          ORR      r1,r1,#1
0043f0  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.17396|
;;;7195   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
0043f4  280a              CMP      r0,#0xa
0043f6  dc05              BGT      |L1.17412|
0043f8  f894003f          LDRB     r0,[r4,#0x3f]
0043fc  f0200001          BIC      r0,r0,#1
004400  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.17412|
;;;7196   
;;;7197   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7198   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
004404  49a3              LDR      r1,|L1.18068|
004406  f9b90000          LDRSH    r0,[r9,#0]  ; t_ext
00440a  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
00440e  4288              CMP      r0,r1
004410  dd02              BLE      |L1.17432|
004412  f89a0000          LDRB     r0,[r10,#0]  ; ND_EXT
004416  b3b0              CBZ      r0,|L1.17542|
                  |L1.17432|
;;;7199   	{
;;;7200   	bat[in]._max_temper_cnt++;
;;;7201   	}
;;;7202   else 
;;;7203   	{
;;;7204   	bat[in]._max_temper_cnt--;
004418  f8b40042          LDRH     r0,[r4,#0x42]
00441c  f1a00001          SUB      r0,r0,#1
004420  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.17444|
;;;7205   	}
;;;7206   #else
;;;7207   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;7208   	{
;;;7209   	bat[in]._max_temper_cnt++;
;;;7210   	}
;;;7211   else 
;;;7212   	{
;;;7213   	bat[in]._max_temper_cnt--;
;;;7214   	}
;;;7215   #endif
;;;7216   
;;;7217   gran(&bat[in]._max_temper_cnt,0,600);
004424  f44f7916          MOV      r9,#0x258
004428  f1040042          ADD      r0,r4,#0x42
00442c  464a              MOV      r2,r9
00442e  2100              MOVS     r1,#0
004430  f7fffffe          BL       gran
;;;7218   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
004434  f9b40042          LDRSH    r0,[r4,#0x42]
004438  42b0              CMP      r0,r6
00443a  db07              BLT      |L1.17484|
00443c  e000              B        |L1.17472|
                  |L1.17470|
00443e  e023              B        |L1.17544|
                  |L1.17472|
004440  f894103f          LDRB     r1,[r4,#0x3f]
004444  f0410102          ORR      r1,r1,#2
004448  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.17484|
;;;7219   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
00444c  280a              CMP      r0,#0xa
00444e  dc05              BGT      |L1.17500|
004450  f894003f          LDRB     r0,[r4,#0x3f]
004454  f0200002          BIC      r0,r0,#2
004458  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.17500|
;;;7220   
;;;7221   
;;;7222   
;;;7223   //Подсчет наработки батареи
;;;7224   if(bat[in]._resurs_cnt<36000)
00445c  6c60              LDR      r0,[r4,#0x44]
00445e  4540              CMP      r0,r8
004460  da20              BGE      |L1.17572|
;;;7225   	{               
;;;7226   	bat[in]._resurs_cnt++;
004462  f1000001          ADD      r0,r0,#1
004466  6460              STR      r0,[r4,#0x44]
;;;7227   	if(bat[in]._resurs_cnt>=36000)
004468  4540              CMP      r0,r8
00446a  db1c              BLT      |L1.17574|
;;;7228   		{
;;;7229   		bat[in]._resurs_cnt=0;
00446c  6467              STR      r7,[r4,#0x44]
;;;7230   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
00446e  4e8a              LDR      r6,|L1.18072|
004470  f8360015          LDRH     r0,[r6,r5,LSL #1]
004474  f7fffffe          BL       lc640_read_int
004478  1c40              ADDS     r0,r0,#1
00447a  b201              SXTH     r1,r0
00447c  f9360015          LDRSH    r0,[r6,r5,LSL #1]
004480  f7fffffe          BL       lc640_write_int
004484  e00f              B        |L1.17574|
                  |L1.17542|
004486  e006              B        |L1.17558|
                  |L1.17544|
004488  f8b40040          LDRH     r0,[r4,#0x40]         ;7177
00448c  f1000001          ADD      r0,r0,#1              ;7177
004490  f8a40040          STRH     r0,[r4,#0x40]         ;7177
004494  e79b              B        |L1.17358|
                  |L1.17558|
004496  f8b40042          LDRH     r0,[r4,#0x42]         ;7200
00449a  f1000001          ADD      r0,r0,#1              ;7200
00449e  f8a40042          STRH     r0,[r4,#0x42]         ;7200
0044a2  e7bf              B        |L1.17444|
                  |L1.17572|
;;;7231   		}
;;;7232   	}
;;;7233   else bat[in]._resurs_cnt=0;
0044a4  6467              STR      r7,[r4,#0x44]
                  |L1.17574|
;;;7234   
;;;7235   
;;;7236   #ifndef UKU_220_V2
;;;7237   #ifndef UKU_GLONASS
;;;7238   //#ifndef UKU_6U
;;;7239   //#ifndef UKU_220
;;;7240   if(UBM_AV)
0044a6  4e7d              LDR      r6,|L1.18076|
0044a8  8830              LDRH     r0,[r6,#0]  ; UBM_AV
0044aa  2800              CMP      r0,#0
0044ac  d05e              BEQ      |L1.17772|
;;;7241        {
;;;7242        signed short temp_SS;
;;;7243   #ifdef UKU_220
;;;7244   temp_SS=bat[in]._Ub/2;
;;;7245   #else
;;;7246        if(U0B<600)
0044ae  487c              LDR      r0,|L1.18080|
0044b0  f9b00000          LDRSH    r0,[r0,#0]  ; U0B
0044b4  4548              CMP      r0,r9
0044b6  da08              BGE      |L1.17610|
;;;7247             {
;;;7248             temp_SS=bat[in]._Ub/4;
0044b8  f9b40002          LDRSH    r0,[r4,#2]
0044bc  ea4f71e0          ASR      r1,r0,#31
0044c0  eb007091          ADD      r0,r0,r1,LSR #30
0044c4  ea4f00a0          ASR      r0,r0,#2
0044c8  e006              B        |L1.17624|
                  |L1.17610|
;;;7249             }
;;;7250        else temp_SS=bat[in]._Ub/5;
0044ca  f9b40002          LDRSH    r0,[r4,#2]
0044ce  f04f0105          MOV      r1,#5
0044d2  fb90f0f1          SDIV     r0,r0,r1
0044d6  b200              SXTH     r0,r0
                  |L1.17624|
;;;7251   	
;;;7252   	temp_SS+=temp_SS;     
0044d8  ea4f0040          LSL      r0,r0,#1
;;;7253   #endif
;;;7254        temp_SS-=(bat[in]._Ubm);
0044dc  88a1              LDRH     r1,[r4,#4]
0044de  eba00001          SUB      r0,r0,r1
0044e2  b200              SXTH     r0,r0
;;;7255   
;;;7256        temp_SS=abs(temp_SS);
0044e4  f7fffffe          BL       abs
;;;7257   
;;;7258        temp_SS*=10;
0044e8  eb000080          ADD      r0,r0,r0,LSL #2
0044ec  ea4f0040          LSL      r0,r0,#1
0044f0  b200              SXTH     r0,r0
;;;7259   
;;;7260        temp_SS/=12;
0044f2  f04f010c          MOV      r1,#0xc
0044f6  fb90f0f1          SDIV     r0,r0,r1
0044fa  b200              SXTH     r0,r0
;;;7261   
;;;7262        bat[in]._dUbm=temp_SS;
0044fc  80e0              STRH     r0,[r4,#6]
;;;7263   
;;;7264   
;;;7265        if(	(bat[in]._dUbm>UBM_AV) &&
0044fe  f9b61000          LDRSH    r1,[r6,#0]  ; UBM_AV
004502  4288              CMP      r0,r1
004504  dd34              BLE      |L1.17776|
;;;7266   		(abs(bat[in]._Ib)<(5*IKB)) &&
004506  f9b40008          LDRSH    r0,[r4,#8]
00450a  f7fffffe          BL       abs
00450e  4601              MOV      r1,r0
004510  4864              LDR      r0,|L1.18084|
004512  f9b00000          LDRSH    r0,[r0,#0]  ; IKB
004516  eb000080          ADD      r0,r0,r0,LSL #2
00451a  4281              CMP      r1,r0
00451c  da28              BGE      |L1.17776|
;;;7267   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
00451e  4862              LDR      r0,|L1.18088|
004520  2173              MOVS     r1,#0x73
004522  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
004526  4348              MULS     r0,r1,r0
004528  fb90f0fb          SDIV     r0,r0,r11
00452c  f9b41002          LDRSH    r1,[r4,#2]
004530  b200              SXTH     r0,r0
004532  4288              CMP      r0,r1
004534  da1c              BGE      |L1.17776|
;;;7268   		(!(bat[in]._av & 2))  )
004536  f894003d          LDRB     r0,[r4,#0x3d]
00453a  0780              LSLS     r0,r0,#30
00453c  d418              BMI      |L1.17776|
;;;7269   		{
;;;7270   		bat[in]._cnt_as++;
00453e  f8b40048          LDRH     r0,[r4,#0x48]
004542  f1000001          ADD      r0,r0,#1
004546  b200              SXTH     r0,r0
004548  f8a40048          STRH     r0,[r4,#0x48]
;;;7271   		if(bat[in]._cnt_as==3000)
00454c  f5a06130          SUB      r1,r0,#0xb00
004550  39b8              SUBS     r1,r1,#0xb8
004552  d103              BNE      |L1.17756|
;;;7272   			{
;;;7273   			avar_bat_as_hndl(in,1);
004554  2101              MOVS     r1,#1
004556  4628              MOV      r0,r5
004558  f7fffffe          BL       avar_bat_as_hndl
                  |L1.17756|
;;;7274   			}
;;;7275   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
00455c  f9b41048          LDRSH    r1,[r4,#0x48]
004560  f64030bd          MOV      r0,#0xbbd
004564  4281              CMP      r1,r0
004566  db01              BLT      |L1.17772|
004568  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.17772|
;;;7276   		}
;;;7277   	else 
;;;7278   		{
;;;7279   		bat[in]._cnt_as=0;
;;;7280   		}
;;;7281        
;;;7282        }
;;;7283   //#endif 
;;;7284   #endif 
;;;7285   #endif
;;;7286   
;;;7287   }
00456c  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.17776|
004570  f8a47048          STRH     r7,[r4,#0x48]         ;7279
004574  e7fa              B        |L1.17772|
;;;7288   
                          ENDP

                  bat_hndl_zvu PROC
;;;7290   //-----------------------------------------------
;;;7291   void bat_hndl_zvu(void)
004576  e92d4ff0          PUSH     {r4-r11,lr}
;;;7292   {
00457a  b089              SUB      sp,sp,#0x24
;;;7293   char i;
;;;7294   short bat_hndl_i_temp;
;;;7295   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
00457c  f04f021c          MOV      r2,#0x1c
004580  494a              LDR      r1,|L1.18092|
004582  4668              MOV      r0,sp
004584  f7fffffe          BL       __aeabi_memcpy4
;;;7296   
;;;7297   //Ib_ips_termokompensat=-17000;
;;;7298    
;;;7299   if(bat_hndl_zvu_init==0)
004588  4c49              LDR      r4,|L1.18096|
;;;7300   	{
;;;7301   	//Инициализация при включении системы
;;;7302   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;7303   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
00458a  2564              MOVS     r5,#0x64
;;;7304   	bat_hndl_zvu_Q*=10000L;
;;;7305   
;;;7306   	bat_hndl_zvu_init=1;
;;;7307   	}
;;;7308   else 
;;;7309   	{
;;;7310   	if(Ib_ips_termokompensat<-IKB)
;;;7311   		{
;;;7312   		bat_hndl_i_vector=0;
;;;7313   		bat_hndl_i_zar_price=0L;
;;;7314   			
;;;7315   		bat_hndl_i=-Ib_ips_termokompensat;
;;;7316   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;7317   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;7318   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;7319   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;7320   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;7321   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;7322   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;7323   		
;;;7324   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;7325   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;7326   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;7327   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;7328   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;7329   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;7330   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;7331   
;;;7332   		bat_hndl_i_temp=bat_hndl_i/10;
;;;7333   		for(i=0;i<7;i++)
;;;7334   			{
;;;7335   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;7336   				{
;;;7337   				break;
;;;7338   				}
;;;7339   			}
;;;7340   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;7341   		 else if((i>=1)&&(i<7))
;;;7342   		 	{
;;;7343   			short i1,i2;
;;;7344   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;7345   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;7346   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;7347   			bat_hndl_t_razr*=(long)i1;
;;;7348   			bat_hndl_t_razr/=(long)i2;
;;;7349   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;7350   			}
;;;7351   		else if(i>=7)
;;;7352   			{
;;;7353   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;7354   			}
;;;7355   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
00458c  f8df8124          LDR      r8,|L1.18100|
004590  7960              LDRB     r0,[r4,#5]            ;7299  ; bat_hndl_zvu_init
004592  2700              MOVS     r7,#0                 ;7299
004594  f04f0901          MOV      r9,#1                 ;7306
004598  f1040680          ADD      r6,r4,#0x80           ;7302
00459c  2800              CMP      r0,#0                 ;7299
00459e  d065              BEQ      |L1.18028|
0045a0  4940              LDR      r1,|L1.18084|
0045a2  4845              LDR      r0,|L1.18104|
0045a4  f9b12000          LDRSH    r2,[r1,#0]            ;7310  ; IKB
0045a8  4631              MOV      r1,r6                 ;7302
0045aa  f9b00000          LDRSH    r0,[r0,#0]            ;7310  ; Ib_ips_termokompensat
0045ae  4253              RSBS     r3,r2,#0              ;7310
0045b0  6d09              LDR      r1,[r1,#0x50]         ;7302
0045b2  4298              CMP      r0,r3                 ;7310
0045b4  da5b              BGE      |L1.18030|
0045b6  71e7              STRB     r7,[r4,#7]            ;7312
0045b8  60f7              STR      r7,[r6,#0xc]          ;7313  ; bat_hndl_i_zar_price
0045ba  f1c00000          RSB      r0,r0,#0              ;7315
0045be  b200              SXTH     r0,r0                 ;7315
0045c0  f8a4007e          STRH     r0,[r4,#0x7e]         ;7315
0045c4  9008              STR      r0,[sp,#0x20]         ;7315
0045c6  483d              LDR      r0,|L1.18108|
0045c8  4a3d              LDR      r2,|L1.18112|
0045ca  8800              LDRH     r0,[r0,#0]            ;7316  ; BAT_C_POINT_1_6
0045cc  eb000040          ADD      r0,r0,r0,LSL #1       ;7316
0045d0  ea4f0040          LSL      r0,r0,#1              ;7316
0045d4  fa0ffb80          SXTH     r11,r0                ;7316
0045d8  483a              LDR      r0,|L1.18116|
0045da  8800              LDRH     r0,[r0,#0]            ;7317  ; BAT_C_POINT_1_2
0045dc  ea4f0040          LSL      r0,r0,#1              ;7317
0045e0  b203              SXTH     r3,r0                 ;7317
0045e2  4839              LDR      r0,|L1.18120|
0045e4  f9b0c000          LDRSH    r12,[r0,#0]           ;7318  ; BAT_C_POINT_1
0045e8  4838              LDR      r0,|L1.18124|
0045ea  f04f0903          MOV      r9,#3                 ;7319
0045ee  f9b00000          LDRSH    r0,[r0,#0]            ;7319  ; BAT_C_POINT_3
0045f2  fb90f0f9          SDIV     r0,r0,r9              ;7319
0045f6  b200              SXTH     r0,r0                 ;7319
0045f8  9007              STR      r0,[sp,#0x1c]         ;7319
0045fa  4835              LDR      r0,|L1.18128|
0045fc  f04f0905          MOV      r9,#5                 ;7320
004600  f9b00000          LDRSH    r0,[r0,#0]            ;7320  ; BAT_C_POINT_5
004604  fb90f0f9          SDIV     r0,r0,r9              ;7320
004608  fa0ff980          SXTH     r9,r0                 ;7320
00460c  4831              LDR      r0,|L1.18132|
00460e  f9b0a000          LDRSH    r10,[r0,#0]           ;7321  ; BAT_C_POINT_10
004612  f04f000a          MOV      r0,#0xa               ;7321
004616  fb9af0f0          SDIV     r0,r10,r0             ;7321
00461a  fa0ffe80          SXTH     lr,r0                 ;7321
00461e  482e              LDR      r0,|L1.18136|
004620  f04f0a14          MOV      r10,#0x14             ;7322
004624  f9b00000          LDRSH    r0,[r0,#0]            ;7322  ; BAT_C_POINT_20
004628  fb90f0fa          SDIV     r0,r0,r10             ;7322
00462c  fa0ffa80          SXTH     r10,r0                ;7322
004630  482a              LDR      r0,|L1.18140|
004632  f9b00000          LDRSH    r0,[r0,#0]            ;7324  ; BAT_K_OLD
004636  fb0bfb00          MUL      r11,r11,r0            ;7324
00463a  fb9bfbf5          SDIV     r11,r11,r5            ;7324
00463e  f8a2b000          STRH     r11,[r2,#0]           ;7324
004642  fb03f300          MUL      r3,r3,r0              ;7325
004646  fb93f3f5          SDIV     r3,r3,r5              ;7325
00464a  8053              STRH     r3,[r2,#2]            ;7325
00464c  fb0cfc00          MUL      r12,r12,r0            ;7326
004650  fb9cf3f5          SDIV     r3,r12,r5             ;7326
004654  8093              STRH     r3,[r2,#4]            ;7326
004656  9b07              LDR      r3,[sp,#0x1c]         ;7327
004658  fb03f300          MUL      r3,r3,r0              ;7327
00465c  fb93f3f5          SDIV     r3,r3,r5              ;7327
004660  80d3              STRH     r3,[r2,#6]            ;7327
004662  fb09f900          MUL      r9,r9,r0              ;7328
004666  fb99f3f5          SDIV     r3,r9,r5              ;7328
00466a  e039              B        |L1.18144|
                  |L1.18028|
00466c  e070              B        |L1.18256|
                  |L1.18030|
00466e  e0a4              B        |L1.18362|
                  |L1.18032|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.18036|
                          DCD      BAT_C_REAL
                  |L1.18040|
                          DCD      BAT_C_NOM
                  |L1.18044|
                          DCD      0xffff7360
                  |L1.18048|
                          DCD      BAT_TYPE
                  |L1.18052|
                          DCD      lakb
                  |L1.18056|
                          DCD      t_ext
                  |L1.18060|
                          DCD      TBATSIGN
                  |L1.18064|
                          DCD      ND_EXT
                  |L1.18068|
                          DCD      TBATMAX
                  |L1.18072|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.18076|
                          DCD      UBM_AV
                  |L1.18080|
                          DCD      U0B
                  |L1.18084|
                          DCD      IKB
                  |L1.18088|
                          DCD      USIGN
                  |L1.18092|
                          DCD      ||area_number.19||+0x20
                  |L1.18096|
                          DCD      ||area_number.25||
                  |L1.18100|
                          DCD      0x000f4240
                  |L1.18104|
                          DCD      Ib_ips_termokompensat
                  |L1.18108|
                          DCD      BAT_C_POINT_1_6
                  |L1.18112|
                          DCD      ||.bss||+0x44c
                  |L1.18116|
                          DCD      BAT_C_POINT_1_2
                  |L1.18120|
                          DCD      BAT_C_POINT_1
                  |L1.18124|
                          DCD      BAT_C_POINT_3
                  |L1.18128|
                          DCD      BAT_C_POINT_5
                  |L1.18132|
                          DCD      BAT_C_POINT_10
                  |L1.18136|
                          DCD      BAT_C_POINT_20
                  |L1.18140|
                          DCD      BAT_K_OLD
                  |L1.18144|
0046e0  8113              STRH     r3,[r2,#8]            ;7328
0046e2  fb0efe00          MUL      lr,lr,r0              ;7329
0046e6  fb9ef3f5          SDIV     r3,lr,r5              ;7329
0046ea  8153              STRH     r3,[r2,#0xa]          ;7329
0046ec  fb0afa00          MUL      r10,r10,r0            ;7330
0046f0  fb9af0f5          SDIV     r0,r10,r5             ;7330
0046f4  8190              STRH     r0,[r2,#0xc]          ;7330
0046f6  9808              LDR      r0,[sp,#0x20]         ;7332
0046f8  f04f030a          MOV      r3,#0xa               ;7332
0046fc  fb90f0f3          SDIV     r0,r0,r3              ;7332
004700  b203              SXTH     r3,r0                 ;7332
004702  f04f0000          MOV      r0,#0                 ;7333
                  |L1.18182|
004706  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;7335
00470a  429d              CMP      r5,r3                 ;7335
00470c  dd04              BLE      |L1.18200|
00470e  f1000001          ADD      r0,r0,#1              ;7333
004712  b2c0              UXTB     r0,r0                 ;7333
004714  2807              CMP      r0,#7                 ;7333
004716  d3f6              BCC      |L1.18182|
                  |L1.18200|
004718  b358              CBZ      r0,|L1.18290|
00471a  1e45              SUBS     r5,r0,#1              ;7341
00471c  2d06              CMP      r5,#6                 ;7341
00471e  d22b              BCS      |L1.18296|
004720  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;7344
004724  ebac0303          SUB      r3,r12,r3             ;7344
004728  b21b              SXTH     r3,r3                 ;7344
00472a  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;7345
00472e  ebac0202          SUB      r2,r12,r2             ;7345
004732  fa0ffc82          SXTH     r12,r2                ;7345
004736  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;7346
00473a  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;7346
00473e  eba90200          SUB      r2,r9,r0              ;7346
004742  fb02f203          MUL      r2,r2,r3              ;7347
004746  fb92f2fc          SDIV     r2,r2,r12             ;7348
00474a  4410              ADD      r0,r0,r2              ;7349
00474c  64b0              STR      r0,[r6,#0x48]         ;7349  ; bat_hndl_t_razr
00474e  e017              B        |L1.18304|
                  |L1.18256|
004750  f44f70ef          MOV      r0,#0x1de             ;7302
004754  f7fffffe          BL       lc640_read_int
004758  6530              STR      r0,[r6,#0x50]         ;7302  ; bat_hndl_zvu_Q
00475a  2865              CMP      r0,#0x65              ;7303
00475c  d300              BCC      |L1.18272|
00475e  6535              STR      r5,[r6,#0x50]         ;7303  ; bat_hndl_zvu_Q
                  |L1.18272|
004760  6d30              LDR      r0,[r6,#0x50]         ;7304  ; bat_hndl_zvu_Q
004762  f2427110          MOV      r1,#0x2710            ;7304
004766  fb00f001          MUL      r0,r0,r1              ;7304
00476a  6530              STR      r0,[r6,#0x50]         ;7304  ; bat_hndl_zvu_Q
00476c  f8849005          STRB     r9,[r4,#5]            ;7306
004770  e067              B        |L1.18498|
                  |L1.18290|
004772  9800              LDR      r0,[sp,#0]            ;7340
004774  64b0              STR      r0,[r6,#0x48]         ;7340  ; bat_hndl_t_razr
004776  e003              B        |L1.18304|
                  |L1.18296|
004778  2807              CMP      r0,#7                 ;7351
00477a  d301              BCC      |L1.18304|
00477c  9806              LDR      r0,[sp,#0x18]         ;7353
00477e  64b0              STR      r0,[r6,#0x48]         ;7353  ; bat_hndl_t_razr
                  |L1.18304|
004780  6cb0              LDR      r0,[r6,#0x48]  ; bat_hndl_t_razr
004782  fb98f0f0          SDIV     r0,r8,r0
004786  6570              STR      r0,[r6,#0x54]  ; bat_hndl_proc_razr
;;;7356   
;;;7357   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
004788  4281              CMP      r1,r0
00478a  dd03              BLE      |L1.18324|
00478c  eba10000          SUB      r0,r1,r0
004790  6530              STR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
004792  e000              B        |L1.18326|
                  |L1.18324|
;;;7358   		else bat_hndl_zvu_Q=0L;
004794  6537              STR      r7,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.18326|
;;;7359   
;;;7360   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
004796  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_remain_time
004798  f44f6061          MOV      r0,#0xe10
00479c  fb91f0f0          SDIV     r0,r1,r0
0047a0  8030              STRH     r0,[r6,#0]
;;;7361   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
0047a2  f04f003c          MOV      r0,#0x3c
0047a6  fb91f1f0          SDIV     r1,r1,r0
0047aa  b209              SXTH     r1,r1
0047ac  8071              STRH     r1,[r6,#2]
;;;7362   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
0047ae  fb91f2f0          SDIV     r2,r1,r0
0047b2  fb001012          MLS      r0,r0,r2,r1
0047b6  80b0              STRH     r0,[r6,#4]
0047b8  e017              B        |L1.18410|
                  |L1.18362|
;;;7363   
;;;7364   		}
;;;7365   	else if(Ib_ips_termokompensat>IKB)
0047ba  4290              CMP      r0,r2
0047bc  dd15              BLE      |L1.18410|
;;;7366   		{
;;;7367   		bat_hndl_i_vector=1;
0047be  f8849007          STRB     r9,[r4,#7]
;;;7368   
;;;7369   		bat_hndl_i=Ib_ips_termokompensat;
0047c2  f8a4007e          STRH     r0,[r4,#0x7e]
;;;7370   		bat_hndl_i_summ+=(long)bat_hndl_i;
0047c6  6e32              LDR      r2,[r6,#0x60]  ; bat_hndl_i_summ
0047c8  4410              ADD      r0,r0,r2
0047ca  6630              STR      r0,[r6,#0x60]  ; bat_hndl_i_summ
;;;7371   		if(bat_hndl_i_summ>=36000L)
0047cc  f64842a0          MOV      r2,#0x8ca0
0047d0  4290              CMP      r0,r2
0047d2  db0a              BLT      |L1.18410|
;;;7372   
;;;7373   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;7374   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;7375   			{
;;;7376   			bat_hndl_i_summ-=36000L;
0047d4  eba00002          SUB      r0,r0,r2
0047d8  6630              STR      r0,[r6,#0x60]  ; bat_hndl_i_summ
;;;7377   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
0047da  4541              CMP      r1,r8
0047dc  da03              BGE      |L1.18406|
0047de  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
0047e0  4408              ADD      r0,r0,r1
0047e2  6530              STR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
0047e4  e001              B        |L1.18410|
                  |L1.18406|
;;;7378   			else bat_hndl_zvu_Q=1000000L; 
0047e6  f8c68050          STR      r8,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.18410|
;;;7379   			}
;;;7380   		}
;;;7381   
;;;7382   
;;;7383   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
0047ea  79e0              LDRB     r0,[r4,#7]  ; bat_hndl_i_vector
0047ec  7a21              LDRB     r1,[r4,#8]  ; bat_hndl_i_vector_old
0047ee  4288              CMP      r0,r1
0047f0  d00d              BEQ      |L1.18446|
;;;7384   		{
;;;7385   		if(bat_hndl_i_vector==1)
0047f2  2801              CMP      r0,#1
0047f4  d10b              BNE      |L1.18446|
;;;7386   			{
;;;7387   			signed short tempSS;
;;;7388   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0047f6  f44f70e4          MOV      r0,#0x1c8
0047fa  f7fffffe          BL       lc640_read_int
0047fe  b200              SXTH     r0,r0
;;;7389   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
004800  4aff              LDR      r2,|L1.19456|
004802  6d31              LDR      r1,[r6,#0x50]  ; bat_hndl_zvu_Q
004804  4411              ADD      r1,r1,r2
004806  fb91f0f0          SDIV     r0,r1,r0
00480a  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;7390   			bat_hndl_i_summ=0;
00480c  6637              STR      r7,[r6,#0x60]  ; bat_hndl_i_summ
                  |L1.18446|
;;;7391   			}
;;;7392   		}
;;;7393   	bat_hndl_i_vector_old=bat_hndl_i_vector;
00480e  79e0              LDRB     r0,[r4,#7]  ; bat_hndl_i_vector
004810  7220              STRB     r0,[r4,#8]
;;;7394   
;;;7395   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
004812  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
004814  f2427a10          MOV      r10,#0x2710
004818  fb90f5fa          SDIV     r5,r0,r10
00481c  f44f79ef          MOV      r9,#0x1de
004820  4648              MOV      r0,r9
004822  f7fffffe          BL       lc640_read_int
004826  4285              CMP      r5,r0
004828  d006              BEQ      |L1.18488|
00482a  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
00482c  fb90f0fa          SDIV     r0,r0,r10
004830  b201              SXTH     r1,r0
004832  4648              MOV      r0,r9
004834  f7fffffe          BL       lc640_write_int
                  |L1.18488|
;;;7396   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
004838  e9d60114          LDRD     r0,r1,[r6,#0x50]
00483c  fb90f0f1          SDIV     r0,r0,r1
004840  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_remain_time
                  |L1.18498|
;;;7397   	}
;;;7398   
;;;7399   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
004842  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
004844  4540              CMP      r0,r8
004846  dd02              BLE      |L1.18510|
004848  f8c68050          STR      r8,[r6,#0x50]  ; bat_hndl_zvu_Q
00484c  e002              B        |L1.18516|
                  |L1.18510|
;;;7400   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
00484e  2800              CMP      r0,#0
004850  da00              BGE      |L1.18516|
004852  6537              STR      r7,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.18516|
;;;7401   
;;;7402   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
004854  48eb              LDR      r0,|L1.19460|
004856  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
00485a  200a              MOVS     r0,#0xa
00485c  fb91f0f0          SDIV     r0,r1,r0
004860  49e9              LDR      r1,|L1.19464|
004862  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
004866  ebb00f41          CMP      r0,r1,LSL #1
00486a  da30              BGE      |L1.18638|
00486c  4249              RSBS     r1,r1,#0
00486e  ebb00f41          CMP      r0,r1,LSL #1
004872  dd2c              BLE      |L1.18638|
004874  48e5              LDR      r0,|L1.19468|
004876  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
00487a  07c0              LSLS     r0,r0,#31
00487c  d127              BNE      |L1.18638|
00487e  48e4              LDR      r0,|L1.19472|
004880  49e4              LDR      r1,|L1.19476|
004882  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
004886  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
00488a  4288              CMP      r0,r1
00488c  dc1f              BGT      |L1.18638|
00488e  49e2              LDR      r1,|L1.19480|
004890  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
004894  4288              CMP      r0,r1
004896  dd1a              BLE      |L1.18638|
004898  f9b4004c          LDRSH    r0,[r4,#0x4c]  ; main_kb_cnt
00489c  280a              CMP      r0,#0xa
00489e  db16              BLT      |L1.18638|
0048a0  28c8              CMP      r0,#0xc8
0048a2  dc14              BGT      |L1.18638|
;;;7403   	{
;;;7404   	if(bat_hndl_zvu_Q_cnt<60)
0048a4  f894002b          LDRB     r0,[r4,#0x2b]  ; bat_hndl_zvu_Q_cnt
0048a8  283c              CMP      r0,#0x3c
0048aa  d20d              BCS      |L1.18632|
;;;7405   		{
;;;7406   		bat_hndl_zvu_Q_cnt++;
0048ac  f1000001          ADD      r0,r0,#1
0048b0  b2c0              UXTB     r0,r0
0048b2  f884002b          STRB     r0,[r4,#0x2b]
;;;7407   		if(bat_hndl_zvu_Q_cnt>=60)
0048b6  283c              CMP      r0,#0x3c
0048b8  d306              BCC      |L1.18632|
;;;7408   			{
;;;7409   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
0048ba  2164              MOVS     r1,#0x64
0048bc  f44f70ef          MOV      r0,#0x1de
0048c0  f7fffffe          BL       lc640_write_int
;;;7410   			bat_hndl_zvu_Q=1000000L;
0048c4  f8c68050          STR      r8,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.18632|
;;;7411   
;;;7412   
;;;7413   			}
;;;7414   		}
;;;7415   	}
;;;7416   else 
;;;7417   	{
;;;7418   	bat_hndl_zvu_Q_cnt=0;
;;;7419   	}
;;;7420   
;;;7421   
;;;7422   
;;;7423   };
0048c8  b009              ADD      sp,sp,#0x24
0048ca  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18638|
0048ce  f884702b          STRB     r7,[r4,#0x2b]         ;7418
0048d2  e7f9              B        |L1.18632|
;;;7424   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;7428   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;7429   void u_avt_set_hndl(void)
0048d4  e92d5fff          PUSH     {r0-r12,lr}
;;;7430   {
;;;7431   if(uavt_set_stat==uassSTEP1)
0048d8  4dd0              LDR      r5,|L1.19484|
;;;7432   	{
;;;7433   	char i,find_succes;
;;;7434   
;;;7435   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;7436   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;7437   	if(uavt_set_stat_old!=uavt_set_stat)
;;;7438   		{
;;;7439   		uavt_set_error_cnt=60;
0048da  4ed1              LDR      r6,|L1.19488|
0048dc  f8df8344          LDR      r8,|L1.19492|
0048e0  7828              LDRB     r0,[r5,#0]            ;7431  ; uavt_set_stat
;;;7440   		}
;;;7441   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7442   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7443   	find_succes=0;
;;;7444   /*	for(i=0;i<NUMIST;i++)
;;;7445   		{
;;;7446   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;7447   		else
;;;7448   			{
;;;7449   			find_succes=0;
;;;7450   			break;
;;;7451   			}
;;;7452   		}*/
;;;7453   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
0048e2  f8dfa344          LDR      r10,|L1.19496|
0048e6  2400              MOVS     r4,#0                 ;7442
;;;7454   
;;;7455   	if(find_succes==1)
;;;7456   		{
;;;7457   		uavt_set_stat=uassSTEP2;
0048e8  f04f0902          MOV      r9,#2
;;;7458   		}
;;;7459   	if(uavt_set_error_cnt)
;;;7460   		{
;;;7461   		uavt_set_error_cnt--;
;;;7462   		if(!uavt_set_error_cnt)
;;;7463   			{
;;;7464   			uavt_set_stat=uassOFF;
;;;7465   			uavt_set_result_stat=uasrsERR;
;;;7466   			avt_error_bps=100;
0048ec  f04f0b64          MOV      r11,#0x64
0048f0  2801              CMP      r0,#1                 ;7431
0048f2  d12e              BNE      |L1.18770|
0048f4  f8980000          LDRB     r0,[r8,#0]            ;7437  ; uavt_set_stat_old
0048f8  2801              CMP      r0,#1                 ;7437
0048fa  d002              BEQ      |L1.18690|
0048fc  f04f003c          MOV      r0,#0x3c              ;7439
004900  7030              STRB     r0,[r6,#0]            ;7439
                  |L1.18690|
004902  230a              MOVS     r3,#0xa               ;7442
004904  2200              MOVS     r2,#0                 ;7442
004906  21e6              MOVS     r1,#0xe6              ;7442
004908  20e1              MOVS     r0,#0xe1              ;7442
00490a  f7fffffe          BL       mess_send
00490e  f04f0000          MOV      r0,#0                 ;7443
004912  49c6              LDR      r1,|L1.19500|
004914  f9b12000          LDRSH    r2,[r1,#0]            ;7453  ; bps_U
004918  f9ba1000          LDRSH    r1,[r10,#0]           ;7453  ; U_AVT
00491c  f1a10301          SUB      r3,r1,#1              ;7453
004920  429a              CMP      r2,r3                 ;7453
004922  db04              BLT      |L1.18734|
004924  1c49              ADDS     r1,r1,#1              ;7453
004926  428a              CMP      r2,r1                 ;7453
004928  dc01              BGT      |L1.18734|
00492a  f04f0001          MOV      r0,#1                 ;7453
                  |L1.18734|
00492e  2801              CMP      r0,#1                 ;7455
004930  d101              BNE      |L1.18742|
004932  f8859000          STRB     r9,[r5,#0]            ;7457
                  |L1.18742|
004936  7830              LDRB     r0,[r6,#0]            ;7459  ; uavt_set_error_cnt
004938  b158              CBZ      r0,|L1.18770|
00493a  f1a00001          SUB      r0,r0,#1              ;7461
00493e  b2c0              UXTB     r0,r0                 ;7461
004940  7030              STRB     r0,[r6,#0]            ;7461
004942  b930              CBNZ     r0,|L1.18770|
004944  702c              STRB     r4,[r5,#0]            ;7464
004946  48ba              LDR      r0,|L1.19504|
004948  f8809000          STRB     r9,[r0,#0]            ;7465
00494c  48b9              LDR      r0,|L1.19508|
00494e  f880b000          STRB     r11,[r0,#0]
                  |L1.18770|
;;;7467   			}
;;;7468   		}
;;;7469   	}
;;;7470   if(uavt_set_stat==uassSTEP2)
004952  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;7471   	{
;;;7472   	char i,find_succes;
;;;7473   
;;;7474   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
004954  49b8              LDR      r1,|L1.19512|
;;;7475   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
004956  48b9              LDR      r0,|L1.19516|
;;;7476   
;;;7477   	if(uavt_set_stat_old!=uavt_set_stat)
;;;7478   		{
;;;7479   		uavt_set_error_cnt=60;
;;;7480   		}
;;;7481   
;;;7482   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7483   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7484   	find_succes=1;
;;;7485   
;;;7486   	for(i=0;i<NUMIST;i++)
;;;7487   		{
;;;7488   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;7489   		else
;;;7490   			{
;;;7491   			find_succes=0;
;;;7492   			avt_error_bps=i+1;
;;;7493   			break;
;;;7494   			}
;;;7495   		}
;;;7496   
;;;7497   	if(find_succes==1)
;;;7498   		{
;;;7499   		uavt_set_stat=uassSTEP3;
;;;7500   		uavt_bps_pntr=0;
004958  4fb9              LDR      r7,|L1.19520|
00495a  2a02              CMP      r2,#2                 ;7470
00495c  d002              BEQ      |L1.18788|
;;;7501   		avt_plazma=0;
;;;7502   		}
;;;7503   
;;;7504   	if(uavt_set_error_cnt)
;;;7505   		{
;;;7506   		uavt_set_error_cnt--;
;;;7507   		if(!uavt_set_error_cnt)
;;;7508   			{
;;;7509   			uavt_set_stat=uassOFF;
;;;7510   			uavt_set_result_stat=uasrsERR;
;;;7511   			}
;;;7512   		}
;;;7513   	}
;;;7514   else if(uavt_set_stat==uassSTEP3)
00495e  2a03              CMP      r2,#3
004960  d05e              BEQ      |L1.18976|
004962  e0ca              B        |L1.19194|
                  |L1.18788|
004964  f9ba2000          LDRSH    r2,[r10,#0]           ;7474  ; U_AVT
004968  f04f0365          MOV      r3,#0x65              ;7474
00496c  fb02f303          MUL      r3,r2,r3              ;7474
004970  fbb3f3fb          UDIV     r3,r3,r11             ;7474
004974  468a              MOV      r10,r1                ;7474
004976  800b              STRH     r3,[r1,#0]            ;7474
004978  eb021142          ADD      r1,r2,r2,LSL #5       ;7475
00497c  eb010141          ADD      r1,r1,r1,LSL #1       ;7475
004980  fbb1f1fb          UDIV     r1,r1,r11             ;7475
004984  4683              MOV      r11,r0                ;7475
004986  8001              STRH     r1,[r0,#0]            ;7475
004988  f8980000          LDRB     r0,[r8,#0]            ;7477  ; uavt_set_stat_old
00498c  2802              CMP      r0,#2                 ;7477
00498e  d002              BEQ      |L1.18838|
004990  f04f003c          MOV      r0,#0x3c              ;7479
004994  7030              STRB     r0,[r6,#0]            ;7479
                  |L1.18838|
004996  230a              MOVS     r3,#0xa               ;7482
004998  21bf              MOVS     r1,#0xbf              ;7482
00499a  20be              MOVS     r0,#0xbe              ;7482
00499c  f7fffffe          BL       mess_send
0049a0  230a              MOVS     r3,#0xa               ;7483
0049a2  2200              MOVS     r2,#0                 ;7483
0049a4  21e6              MOVS     r1,#0xe6              ;7483
0049a6  20e1              MOVS     r0,#0xe1              ;7483
0049a8  f7fffffe          BL       mess_send
0049ac  f04f0201          MOV      r2,#1                 ;7484
0049b0  f04f0000          MOV      r0,#0                 ;7486
0049b4  49a4              LDR      r1,|L1.19528|
0049b6  f9ba3000          LDRSH    r3,[r10,#0]           ;7486
0049ba  f8dfe288          LDR      lr,|L1.19524|
0049be  f9bbc000          LDRSH    r12,[r11,#0]          ;7488
0049c2  f9b1a000          LDRSH    r10,[r1,#0]           ;7486
0049c6  e00d              B        |L1.18916|
                  |L1.18888|
0049c8  ebc001c0          RSB      r1,r0,r0,LSL #3       ;7488
0049cc  eb011100          ADD      r1,r1,r0,LSL #4       ;7488
0049d0  eb0e0181          ADD      r1,lr,r1,LSL #2       ;7488
0049d4  69c9              LDR      r1,[r1,#0x1c]         ;7488
0049d6  4299              CMP      r1,r3                 ;7488
0049d8  da09              BGE      |L1.18926|
0049da  4561              CMP      r1,r12                ;7488
0049dc  dd07              BLE      |L1.18926|
0049de  f1000001          ADD      r0,r0,#1              ;7486
0049e2  b2c0              UXTB     r0,r0                 ;7486
                  |L1.18916|
0049e4  4550              CMP      r0,r10                ;7486
0049e6  dbef              BLT      |L1.18888|
                  |L1.18920|
0049e8  2a01              CMP      r2,#1                 ;7497
0049ea  d007              BEQ      |L1.18940|
0049ec  e00c              B        |L1.18952|
                  |L1.18926|
0049ee  f04f0200          MOV      r2,#0                 ;7491
0049f2  4990              LDR      r1,|L1.19508|
0049f4  f1000001          ADD      r0,r0,#1              ;7492
0049f8  7008              STRB     r0,[r1,#0]            ;7492
0049fa  e7f5              B        |L1.18920|
                  |L1.18940|
0049fc  f04f0003          MOV      r0,#3                 ;7499
004a00  7028              STRB     r0,[r5,#0]            ;7499
004a02  703c              STRB     r4,[r7,#0]            ;7500
004a04  4891              LDR      r0,|L1.19532|
004a06  7004              STRB     r4,[r0,#0]            ;7501
                  |L1.18952|
004a08  7830              LDRB     r0,[r6,#0]            ;7504  ; uavt_set_error_cnt
004a0a  b3d0              CBZ      r0,|L1.19074|
004a0c  f1a00001          SUB      r0,r0,#1              ;7506
004a10  b2c0              UXTB     r0,r0                 ;7506
004a12  7030              STRB     r0,[r6,#0]            ;7506
004a14  bba8              CBNZ     r0,|L1.19074|
004a16  702c              STRB     r4,[r5,#0]            ;7509
004a18  4885              LDR      r0,|L1.19504|
004a1a  f8809000          STRB     r9,[r0,#0]            ;7510
004a1e  e06c              B        |L1.19194|
                  |L1.18976|
;;;7515   	{
;;;7516   	char i,find_succes;
;;;7517   
;;;7518   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
004a20  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
004a24  f04f0365          MOV      r3,#0x65
004a28  fb02f303          MUL      r3,r2,r3
004a2c  fbb3f3fb          UDIV     r3,r3,r11
004a30  468a              MOV      r10,r1
004a32  800b              STRH     r3,[r1,#0]
;;;7519   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
004a34  eb021142          ADD      r1,r2,r2,LSL #5
004a38  eb010141          ADD      r1,r1,r1,LSL #1
004a3c  fbb1f1fb          UDIV     r1,r1,r11
004a40  4683              MOV      r11,r0
004a42  8001              STRH     r1,[r0,#0]
;;;7520   	
;;;7521   	if(uavt_set_stat_old!=uavt_set_stat)
004a44  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
004a48  2803              CMP      r0,#3
004a4a  d000              BEQ      |L1.19022|
;;;7522   		{
;;;7523   		uavt_bps_pntr=0;
004a4c  703c              STRB     r4,[r7,#0]
                  |L1.19022|
;;;7524   		}
;;;7525   
;;;7526   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
004a4e  230a              MOVS     r3,#0xa
004a50  21bf              MOVS     r1,#0xbf
004a52  20be              MOVS     r0,#0xbe
004a54  f7fffffe          BL       mess_send
;;;7527   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
004a58  230a              MOVS     r3,#0xa
004a5a  2200              MOVS     r2,#0
004a5c  21e6              MOVS     r1,#0xe6
004a5e  20e1              MOVS     r0,#0xe1
004a60  f7fffffe          BL       mess_send
;;;7528   
;;;7529   	find_succes=1;
004a64  f04f0601          MOV      r6,#1
;;;7530   	for(i=0;i<NUMIST;i++)
004a68  f04f0000          MOV      r0,#0
004a6c  f8df91d8          LDR      r9,|L1.19528|
004a70  f9ba2000          LDRSH    r2,[r10,#0]
004a74  f8dfc1cc          LDR      r12,|L1.19524|
004a78  f9bb3000          LDRSH    r3,[r11,#0]           ;7488
004a7c  f9b9a000          LDRSH    r10,[r9,#0]           ;7486
004a80  e00e              B        |L1.19104|
                  |L1.19074|
004a82  e03a              B        |L1.19194|
                  |L1.19076|
;;;7531   		{
;;;7532   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
004a84  ebc001c0          RSB      r1,r0,r0,LSL #3
004a88  eb011100          ADD      r1,r1,r0,LSL #4
004a8c  eb0c0181          ADD      r1,r12,r1,LSL #2
004a90  69c9              LDR      r1,[r1,#0x1c]
004a92  4291              CMP      r1,r2
004a94  da0f              BGE      |L1.19126|
004a96  4299              CMP      r1,r3
004a98  dd0d              BLE      |L1.19126|
004a9a  f1000001          ADD      r0,r0,#1              ;7530
004a9e  b2c0              UXTB     r0,r0                 ;7530
                  |L1.19104|
004aa0  4550              CMP      r0,r10                ;7530
004aa2  dbef              BLT      |L1.19076|
                  |L1.19108|
;;;7533   		else
;;;7534   			{
;;;7535   			find_succes=0;
;;;7536   			break;
;;;7537   			}
;;;7538   		}
;;;7539   
;;;7540   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
004aa4  20d7              MOVS     r0,#0xd7
004aa6  f7fffffe          BL       mess_find
004aaa  b1a0              CBZ      r0,|L1.19158|
004aac  4868              LDR      r0,|L1.19536|
004aae  6800              LDR      r0,[r0,#0]  ; mess_data
004ab0  28d9              CMP      r0,#0xd9
004ab2  d003              BEQ      |L1.19132|
004ab4  e00f              B        |L1.19158|
                  |L1.19126|
004ab6  f04f0600          MOV      r6,#0                 ;7535
004aba  e7f3              B        |L1.19108|
                  |L1.19132|
;;;7541   		{
;;;7542   		if(++uavt_bps_pntr>=NUMIST)
004abc  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
004abe  1c40              ADDS     r0,r0,#1
004ac0  b2c0              UXTB     r0,r0
004ac2  7038              STRB     r0,[r7,#0]
004ac4  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
004ac8  4288              CMP      r0,r1
004aca  db04              BLT      |L1.19158|
;;;7543   			{
;;;7544   			uavt_set_stat=uassOFF;
004acc  702c              STRB     r4,[r5,#0]
;;;7545   			uavt_set_result_stat=uasrsSUCCESS;
004ace  4958              LDR      r1,|L1.19504|
004ad0  f04f0003          MOV      r0,#3
004ad4  7008              STRB     r0,[r1,#0]
                  |L1.19158|
;;;7546   			}
;;;7547   		//uavt_bps_pntr++;
;;;7548   		//if()
;;;7549   		}
;;;7550   	if(find_succes==1)
004ad6  2e01              CMP      r6,#1
004ad8  d10f              BNE      |L1.19194|
;;;7551   		{
;;;7552   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
004ada  20ee              MOVS     r0,#0xee
004adc  e9cd0400          STRD     r0,r4,[sp,#0]
004ae0  9402              STR      r4,[sp,#8]
004ae2  9403              STR      r4,[sp,#0xc]
004ae4  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
004ae6  4603              MOV      r3,r0
004ae8  2216              MOVS     r2,#0x16
004aea  4608              MOV      r0,r1
004aec  f7fffffe          BL       mcp2515_transmit
;;;7553   		avt_plazma++;
004af0  4856              LDR      r0,|L1.19532|
004af2  7801              LDRB     r1,[r0,#0]  ; avt_plazma
004af4  f1010101          ADD      r1,r1,#1
004af8  7001              STRB     r1,[r0,#0]
                  |L1.19194|
;;;7554   		}
;;;7555   	}
;;;7556   
;;;7557   
;;;7558   
;;;7559   uavt_set_stat_old=uavt_set_stat;
004afa  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
004afc  f8880000          STRB     r0,[r8,#0]
;;;7560   
;;;7561   }
004b00  e8bd9fff          POP      {r0-r12,pc}
;;;7562   
                          ENDP

                  u_necc_hndl PROC
;;;7637   //-----------------------------------------------
;;;7638   void u_necc_hndl(void)
004b04  b5f8              PUSH     {r3-r7,lr}
;;;7639   {
;;;7640   signed long temp_L;
;;;7641   signed long temp_SL;
;;;7642   //signed short temp_SS;
;;;7643   
;;;7644   //char i;
;;;7645   
;;;7646   //temp_SS=0;
;;;7647   signed short t[2];
;;;7648   
;;;7649   
;;;7650   
;;;7651   
;;;7652   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7653   
;;;7654   if(!TERMOKOMPENS)
004b06  4853              LDR      r0,|L1.19540|
;;;7655   	{
;;;7656   	//u_necc=U0B;
;;;7657   	u_necc=UB20;
;;;7658   	}
;;;7659   else
;;;7660   	{
;;;7661   	if(ND_EXT[0])t[0]=20;
;;;7662   	else t[0]=t_ext[0];
;;;7663   
;;;7664   	mat_temper=t[0];
;;;7665   			
;;;7666   	if(mat_temper<0)temp_SL=UB0; 
;;;7667   	else 
;;;7668   		{
;;;7669   		if(mat_temper>40)mat_temper=40; 
;;;7670   		temp_SL=(UB20-UB0)*10;
;;;7671   		temp_SL*=mat_temper;
;;;7672   		temp_SL/=200;
;;;7673   		temp_SL+=UB0;
;;;7674   		}
;;;7675   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
004b08  4d55              LDR      r5,|L1.19552|
004b0a  4c56              LDR      r4,|L1.19556|
004b0c  8801              LDRH     r1,[r0,#0]            ;7654  ; TERMOKOMPENS
004b0e  4852              LDR      r0,|L1.19544|
004b10  f9b03000          LDRSH    r3,[r0,#0]            ;7657
;;;7676   		{
;;;7677   		temp_SL=UVZ;
004b14  4851              LDR      r0,|L1.19548|
004b16  f9b02000          LDRSH    r2,[r0,#0]
004b1a  b139              CBZ      r1,|L1.19244|
004b1c  4852              LDR      r0,|L1.19560|
004b1e  7800              LDRB     r0,[r0,#0]            ;7661  ; ND_EXT
004b20  b130              CBZ      r0,|L1.19248|
004b22  f04f0014          MOV      r0,#0x14              ;7661
004b26  f8ad0000          STRH     r0,[sp,#0]            ;7661
004b2a  e005              B        |L1.19256|
                  |L1.19244|
004b2c  8023              STRH     r3,[r4,#0]            ;7657
004b2e  e02b              B        |L1.19336|
                  |L1.19248|
004b30  484e              LDR      r0,|L1.19564|
004b32  8800              LDRH     r0,[r0,#0]            ;7662  ; t_ext
004b34  f8ad0000          STRH     r0,[sp,#0]            ;7662
                  |L1.19256|
004b38  4e4d              LDR      r6,|L1.19568|
004b3a  f9bd1000          LDRSH    r1,[sp,#0]            ;7664
004b3e  6031              STR      r1,[r6,#0]            ;7664  ; mat_temper
004b40  484c              LDR      r0,|L1.19572|
004b42  2900              CMP      r1,#0                 ;7666
004b44  f9b00000          LDRSH    r0,[r0,#0]            ;7666
004b48  db12              BLT      |L1.19312|
004b4a  2928              CMP      r1,#0x28              ;7669
004b4c  dd02              BLE      |L1.19284|
004b4e  f04f0128          MOV      r1,#0x28              ;7669
004b52  6031              STR      r1,[r6,#0]            ;7669  ; mat_temper
                  |L1.19284|
004b54  eba30100          SUB      r1,r3,r0              ;7670
004b58  eb010181          ADD      r1,r1,r1,LSL #2       ;7670
004b5c  ea4f0141          LSL      r1,r1,#1              ;7670
004b60  6833              LDR      r3,[r6,#0]            ;7671  ; mat_temper
004b62  fb01f103          MUL      r1,r1,r3              ;7671
004b66  f04f03c8          MOV      r3,#0xc8              ;7672
004b6a  fb91f1f3          SDIV     r1,r1,r3              ;7672
004b6e  4408              ADD      r0,r0,r1              ;7673
                  |L1.19312|
004b70  7fa9              LDRB     r1,[r5,#0x1e]         ;7675  ; spc_stat
004b72  2902              CMP      r1,#2                 ;7675
004b74  d107              BNE      |L1.19334|
004b76  4940              LDR      r1,|L1.19576|
004b78  7809              LDRB     r1,[r1,#0]            ;7675  ; sk_stat
004b7a  2901              CMP      r1,#1                 ;7675
004b7c  d002              BEQ      |L1.19332|
004b7e  493f              LDR      r1,|L1.19580|
004b80  8809              LDRH     r1,[r1,#0]            ;7675  ; VZ_CH_VENT_BLOK
004b82  b901              CBNZ     r1,|L1.19334|
                  |L1.19332|
004b84  4610              MOV      r0,r2
                  |L1.19334|
;;;7678   		}
;;;7679   	u_necc=(unsigned int)temp_SL;
004b86  8020              STRH     r0,[r4,#0]
                  |L1.19336|
;;;7680   	///u_necc=3456;
;;;7681   	}  
;;;7682   
;;;7683   //u_necc=2355;
;;;7684   
;;;7685   if((speedChIsOn)||(sp_ch_stat==scsWRK))
004b88  483d              LDR      r0,|L1.19584|
004b8a  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
004b8c  b918              CBNZ     r0,|L1.19350|
004b8e  483d              LDR      r0,|L1.19588|
004b90  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
004b92  2802              CMP      r0,#2
004b94  d102              BNE      |L1.19356|
                  |L1.19350|
;;;7686   	{
;;;7687   	u_necc=speedChrgVolt;
004b96  483c              LDR      r0,|L1.19592|
004b98  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
004b9a  8020              STRH     r0,[r4,#0]
                  |L1.19356|
;;;7688   	}
;;;7689   if(hv_vz_stat==hvsWRK)
004b9c  483b              LDR      r0,|L1.19596|
004b9e  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
004ba0  2805              CMP      r0,#5
004ba2  d100              BNE      |L1.19366|
;;;7690   	{
;;;7691   	u_necc=UVZ;
004ba4  8022              STRH     r2,[r4,#0]
                  |L1.19366|
;;;7692   	}
;;;7693   if(vz1_stat==vz1sWRK)
004ba6  7868              LDRB     r0,[r5,#1]  ; vz1_stat
004ba8  280a              CMP      r0,#0xa
004baa  d102              BNE      |L1.19378|
;;;7694   	{
;;;7695   	u_necc=UZ_U;
004bac  4838              LDR      r0,|L1.19600|
004bae  8800              LDRH     r0,[r0,#0]  ; UZ_U
004bb0  8020              STRH     r0,[r4,#0]
                  |L1.19378|
;;;7696   	}
;;;7697   if(vz2_stat==vz2sWRK1)
004bb2  78e8              LDRB     r0,[r5,#3]  ; vz2_stat
004bb4  280a              CMP      r0,#0xa
004bb6  d102              BNE      |L1.19390|
;;;7698   	{
;;;7699   	u_necc=FZ_U1;
004bb8  4936              LDR      r1,|L1.19604|
004bba  8809              LDRH     r1,[r1,#0]  ; FZ_U1
004bbc  8021              STRH     r1,[r4,#0]
                  |L1.19390|
;;;7700   	}
;;;7701   if(vz2_stat==vz2sWRK2)
004bbe  280b              CMP      r0,#0xb
004bc0  d102              BNE      |L1.19400|
;;;7702   	{
;;;7703   	u_necc=FZ_U2;
004bc2  4835              LDR      r0,|L1.19608|
004bc4  8800              LDRH     r0,[r0,#0]  ; FZ_U2
004bc6  8020              STRH     r0,[r4,#0]
                  |L1.19400|
;;;7704   	}
;;;7705   
;;;7706   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
004bc8  4814              LDR      r0,|L1.19484|
004bca  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
004bcc  2801              CMP      r0,#1
004bce  d001              BEQ      |L1.19412|
004bd0  2802              CMP      r0,#2
004bd2  d102              BNE      |L1.19418|
                  |L1.19412|
;;;7707   	{
;;;7708   	u_necc=U_AVT;
004bd4  4814              LDR      r0,|L1.19496|
004bd6  8800              LDRH     r0,[r0,#0]  ; U_AVT
004bd8  8020              STRH     r0,[r4,#0]
                  |L1.19418|
;;;7709   	}
;;;7710   
;;;7711   if(mess_find_unvol(MESS2UNECC_HNDL))
004bda  20be              MOVS     r0,#0xbe
004bdc  f7fffffe          BL       mess_find_unvol
004be0  b128              CBZ      r0,|L1.19438|
;;;7712   	{		
;;;7713   	if(mess_data[0]==PARAM_UNECC_SET)
004be2  481b              LDR      r0,|L1.19536|
004be4  6801              LDR      r1,[r0,#0]  ; mess_data
004be6  29bf              CMP      r1,#0xbf
004be8  d101              BNE      |L1.19438|
;;;7714   		{
;;;7715   		u_necc=mess_data[1];
004bea  6840              LDR      r0,[r0,#4]  ; mess_data
004bec  8020              STRH     r0,[r4,#0]
                  |L1.19438|
;;;7716   		}		
;;;7717   	} 
;;;7718   
;;;7719   //if(ICA_EN)u_necc+=ica_u_necc;
;;;7720   #endif
;;;7721   
;;;7722   
;;;7723   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;7724   
;;;7725   #ifndef UKU_TELECORE2015
;;;7726   #ifndef UKU_TELECORE2017
;;;7727   if(unh_cnt0<10)
;;;7728   	{
;;;7729   	unh_cnt0++;
;;;7730   	if(unh_cnt0>=10)
;;;7731   		{
;;;7732   		unh_cnt0=0;
;;;7733   		b1Hz_unh=1;
;;;7734   		}
;;;7735   	}
;;;7736   
;;;7737   if(unh_cnt1<5)
;;;7738   	{
;;;7739   	unh_cnt1++;
;;;7740   	if(unh_cnt1==5)
;;;7741   		{
;;;7742   		unh_cnt1=0;
;;;7743   //		b2Hz_unh=1;
;;;7744   		}
;;;7745   	} 
;;;7746   
;;;7747   
;;;7748   
;;;7749   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7750   	{		
;;;7751   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7752   		{
;;;7753   		u_necc=mess_data[1];
;;;7754   		}		
;;;7755   	}
;;;7756   
;;;7757   
;;;7758   else if(b1Hz_unh)
;;;7759   	{
;;;7760   	
;;;7761   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;7762   		{
;;;7763   		
;;;7764   		u_necc=U0B;
;;;7765   		#ifdef IPS_SGEP_GAZPROM
;;;7766   		u_necc=UB0;
;;;7767   		#endif
;;;7768   		}
;;;7769   	else 
;;;7770   		{
;;;7771   		if(BAT_TYPE==0) //если батарея обычная
;;;7772   			{
;;;7773   			for(i=0;i<2;i++)
;;;7774   				{
;;;7775   				if(BAT_IS_ON[i]==bisON)
;;;7776   					{
;;;7777   					if(bat[i]._nd)t[i]=20;
;;;7778   					else t[i]=bat[i]._Tb;
;;;7779   					}
;;;7780   				else
;;;7781   					{
;;;7782   					t[i]=-20;
;;;7783   					}
;;;7784   				}
;;;7785   			if(t[0]>t[1])mat_temper=t[0];
;;;7786   			else mat_temper=t[1];
;;;7787   			
;;;7788   		
;;;7789   			if(mat_temper<0)temp_SL=UB0; 
;;;7790   			else 
;;;7791   				{
;;;7792   				if(mat_temper>40)mat_temper=40; 
;;;7793   				temp_SL=(UB20-UB0)*10;
;;;7794   				temp_SL*=mat_temper;
;;;7795   				temp_SL/=200;
;;;7796   				temp_SL+=UB0;
;;;7797   				}
;;;7798   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7799   				{
;;;7800   				temp_SL=UVZ;
;;;7801   				}
;;;7802   			u_necc=(unsigned int)temp_SL;
;;;7803   			}
;;;7804   		else if(BAT_TYPE==1) //если батарея китайская
;;;7805   			{
;;;7806   			u_necc=U0B;
;;;7807   					
;;;7808   			u_necc=bat[0]._Ub+10;
;;;7809   
;;;7810   			
;;;7811   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7812   				{
;;;7813   				u_necc=UVZ;
;;;7814   				}
;;;7815   			if(u_necc>=UB0) u_necc=UB0;
;;;7816   			if(u_necc>=UB20) u_necc=UB20;
;;;7817   			}
;;;7818   		}  
;;;7819   	}
;;;7820   #endif
;;;7821   #endif
;;;7822   
;;;7823   #ifdef UKU_TELECORE2015
;;;7824   
;;;7825   if(unh_cnt0<10)
;;;7826   	{
;;;7827   	unh_cnt0++;
;;;7828   	if(unh_cnt0>=10)
;;;7829   		{
;;;7830   		unh_cnt0=0;
;;;7831   		b1Hz_unh=1;
;;;7832   		}
;;;7833   	}
;;;7834   
;;;7835   if(unh_cnt1<5)
;;;7836   	{
;;;7837   	unh_cnt1++;
;;;7838   	if(unh_cnt1==5)
;;;7839   		{
;;;7840   		unh_cnt1=0;
;;;7841   //		b2Hz_unh=1;
;;;7842   		}
;;;7843   	} 
;;;7844   
;;;7845   
;;;7846   
;;;7847   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7848   	{		
;;;7849   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7850   		{
;;;7851   		u_necc=mess_data[1];
;;;7852   		}		
;;;7853   	}
;;;7854   
;;;7855   
;;;7856   else if(b1Hz_unh)
;;;7857   	{
;;;7858   	b1Hz_unh=0;
;;;7859   
;;;7860   	if(BAT_TYPE==0)
;;;7861   		{
;;;7862   		if(bat[0]._nd)mat_temper=20;
;;;7863   		else mat_temper=bat[0]._Tb;
;;;7864   
;;;7865   			
;;;7866   		if(mat_temper<0)temp_SL=UB0; 
;;;7867   		else 
;;;7868   			{
;;;7869   			if(mat_temper>40)mat_temper=40; 
;;;7870   			temp_SL=(UB20-UB0)*10;
;;;7871   			temp_SL*=mat_temper;
;;;7872   			temp_SL/=200;
;;;7873   			temp_SL+=UB0;
;;;7874   			}
;;;7875   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7876   			{
;;;7877   			temp_SL=UVZ;
;;;7878   			}
;;;7879   		u_necc=(unsigned int)temp_SL;
;;;7880   	///u_necc=3456;
;;;7881   		}
;;;7882   	else if(BAT_TYPE==1)
;;;7883   		{
;;;7884   		
;;;7885   		gran(&DU_LI_BAT,1,30);
;;;7886   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;7887   		gran(&u_necc,0,UB0);
;;;7888   		gran(&u_necc,0,UB20);
;;;7889   		gran(&u_necc,0,540);		
;;;7890   
;;;7891   
;;;7892   		if(li_bat._batStat!=bsOK)
;;;7893   			{
;;;7894   			u_necc=U0B;
;;;7895   			}
;;;7896   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7897   			{
;;;7898   			u_necc=UVZ;
;;;7899   			}
;;;7900   		/* 
;;;7901   		u_necc=U0B;
;;;7902   		
;;;7903   
;;;7904   	
;;;7905   		u_necc=UB0;
;;;7906   		u_necc=li_bat._Ub+10;
;;;7907   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;7908   			{
;;;7909   			lakb_error_cnt++;
;;;7910   			if(lakb_error_cnt>=30)
;;;7911   				{
;;;7912   				lakb_error_cnt=30;
;;;7913   				u_necc=U0B;
;;;7914   				}
;;;7915   			}
;;;7916   		else lakb_error_cnt=0;*/
;;;7917   		}
;;;7918   	else if(BAT_TYPE==2)
;;;7919   		{
;;;7920   		u_necc=U0B;
;;;7921   		
;;;7922   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7923   			{
;;;7924   			u_necc=UVZ;
;;;7925   			}
;;;7926   	
;;;7927   		u_necc=UB0;
;;;7928   		}
;;;7929   
;;;7930   	else if(BAT_TYPE==3)
;;;7931   		{
;;;7932   		u_necc=U0B;
;;;7933   		
;;;7934   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7935   			{
;;;7936   			u_necc=UVZ;
;;;7937   			}
;;;7938   
;;;7939   		gran(&DU_LI_BAT,1,30);
;;;7940   
;;;7941   
;;;7942   		if(lakbNotErrorNum==0)
;;;7943   			{
;;;7944   			u_necc=U0B;
;;;7945   			}
;;;7946   		else 
;;;7947   			{
;;;7948   			signed short i;
;;;7949   			//signed short u_necc_max;
;;;7950   			//u_necc_max=0;
;;;7951   			char soc_flag=0;
;;;7952   
;;;7953   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;7954   				{
;;;7955   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;7956   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;7957   				}
;;;7958   
;;;7959   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;7960   			}
;;;7961   		gran(&u_necc,0,UB0);
;;;7962   		//gran(&u_necc,0,UB20);
;;;7963   		gran(&u_necc,0,540);
;;;7964   		}
;;;7965   	}
;;;7966   
;;;7967   #endif 
;;;7968   
;;;7969   #ifdef UKU_TELECORE2017
;;;7970   
;;;7971   if(unh_cnt0<10)
;;;7972   	{
;;;7973   	unh_cnt0++;
;;;7974   	if(unh_cnt0>=10)
;;;7975   		{
;;;7976   		unh_cnt0=0;
;;;7977   		b1Hz_unh=1;
;;;7978   		}
;;;7979   	}
;;;7980   
;;;7981   if(unh_cnt1<5)
;;;7982   	{
;;;7983   	unh_cnt1++;
;;;7984   	if(unh_cnt1==5)
;;;7985   		{
;;;7986   		unh_cnt1=0;
;;;7987   //		b2Hz_unh=1;
;;;7988   		}
;;;7989   	} 
;;;7990   
;;;7991   
;;;7992   
;;;7993   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7994   	{		
;;;7995   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7996   		{
;;;7997   		u_necc=mess_data[1];
;;;7998   		}		
;;;7999   	}
;;;8000   
;;;8001   
;;;8002   else if(b1Hz_unh)
;;;8003   	{
;;;8004   	b1Hz_unh=0;
;;;8005   
;;;8006   	if(BAT_TYPE==0)
;;;8007   		{
;;;8008   		if(bat[0]._nd)mat_temper=20;
;;;8009   		else mat_temper=bat[0]._Tb;
;;;8010   
;;;8011   			
;;;8012   		if(mat_temper<0)temp_SL=UB0; 
;;;8013   		else 
;;;8014   			{
;;;8015   			if(mat_temper>40)mat_temper=40; 
;;;8016   			temp_SL=(UB20-UB0)*10;
;;;8017   			temp_SL*=mat_temper;
;;;8018   			temp_SL/=200;
;;;8019   			temp_SL+=UB0;
;;;8020   			}
;;;8021   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8022   			{
;;;8023   			temp_SL=UVZ;
;;;8024   			}
;;;8025   		u_necc=(unsigned int)temp_SL;
;;;8026   	///u_necc=3456;
;;;8027   		}
;;;8028   	else if(BAT_TYPE==1)
;;;8029   		{
;;;8030   		
;;;8031   		gran(&DU_LI_BAT,1,30);
;;;8032   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8033   		gran(&u_necc,0,UB0);
;;;8034   		gran(&u_necc,0,UB20);
;;;8035   		gran(&u_necc,0,540);		
;;;8036   
;;;8037   
;;;8038   		if(li_bat._batStat!=bsOK)
;;;8039   			{
;;;8040   			u_necc=U0B;
;;;8041   			}
;;;8042   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8043   			{
;;;8044   			u_necc=UVZ;
;;;8045   			}
;;;8046   		}
;;;8047   	else if(BAT_TYPE==2)
;;;8048   		{
;;;8049   		u_necc=U0B;
;;;8050   		
;;;8051   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8052   			{
;;;8053   			u_necc=UVZ;
;;;8054   			}
;;;8055   	
;;;8056   		u_necc=UB0;
;;;8057   		}
;;;8058   
;;;8059   	else if(BAT_TYPE==3)
;;;8060   		{
;;;8061   		u_necc=U0B;
;;;8062   		
;;;8063   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8064   			{
;;;8065   			u_necc=UVZ;
;;;8066   			}
;;;8067   
;;;8068   		gran(&DU_LI_BAT,1,30);
;;;8069   
;;;8070   
;;;8071   		if(lakbNotErrorNum==0)
;;;8072   			{
;;;8073   			u_necc=U0B;
;;;8074   			}
;;;8075   		else 
;;;8076   			{
;;;8077   			signed short i;
;;;8078   			//signed short u_necc_max;
;;;8079   			//u_necc_max=0;
;;;8080   			char soc_flag=0;
;;;8081   
;;;8082   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8083   				{
;;;8084   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8085   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8086   				}
;;;8087   
;;;8088   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8089   			}
;;;8090   		gran(&u_necc,0,UB0);
;;;8091   		//gran(&u_necc,0,UB20);
;;;8092   		gran(&u_necc,0,540);
;;;8093   		}
;;;8094   	}
;;;8095   
;;;8096   #endif 
;;;8097   //u_necc=2356;
;;;8098   
;;;8099   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;8100   	{
;;;8101   	u_necc=speedChrgVolt;
;;;8102   	}
;;;8103   #endif//gran(&u_necc,400,UMAX);
;;;8104   
;;;8105   
;;;8106   
;;;8107   temp_L=(signed long) u_necc;
004bee  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;8108   temp_L*=98L;
004bf2  f04f0162          MOV      r1,#0x62
004bf6  fb00f101          MUL      r1,r0,r1
;;;8109   temp_L/=100L;
004bfa  f04f0264          MOV      r2,#0x64
004bfe  e04d              B        |L1.19612|
                  |L1.19456|
                          DCD      0xfff0bdc0
                  |L1.19460|
                          DCD      Ib_ips_termokompensat
                  |L1.19464|
                          DCD      IKB
                  |L1.19468|
                          DCD      bat
                  |L1.19472|
                          DCD      out_U
                  |L1.19476|
                          DCD      u_necc_up
                  |L1.19480|
                          DCD      u_necc_dn
                  |L1.19484|
                          DCD      uavt_set_stat
                  |L1.19488|
                          DCD      uavt_set_error_cnt
                  |L1.19492|
                          DCD      uavt_set_stat_old
                  |L1.19496|
                          DCD      U_AVT
                  |L1.19500|
                          DCD      bps_U
                  |L1.19504|
                          DCD      uavt_set_result_stat
                  |L1.19508|
                          DCD      avt_error_bps
                  |L1.19512|
                          DCD      u_max_temp
                  |L1.19516|
                          DCD      u_min_temp
                  |L1.19520|
                          DCD      uavt_bps_pntr
                  |L1.19524|
                          DCD      bps
                  |L1.19528|
                          DCD      NUMIST
                  |L1.19532|
                          DCD      avt_plazma
                  |L1.19536|
                          DCD      mess_data
                  |L1.19540|
                          DCD      TERMOKOMPENS
                  |L1.19544|
                          DCD      UB20
                  |L1.19548|
                          DCD      UVZ
                  |L1.19552|
                          DCD      ||area_number.25||
                  |L1.19556|
                          DCD      u_necc
                  |L1.19560|
                          DCD      ND_EXT
                  |L1.19564|
                          DCD      t_ext
                  |L1.19568|
                          DCD      mat_temper
                  |L1.19572|
                          DCD      UB0
                  |L1.19576|
                          DCD      sk_stat
                  |L1.19580|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.19584|
                          DCD      speedChIsOn
                  |L1.19588|
                          DCD      sp_ch_stat
                  |L1.19592|
                          DCD      speedChrgVolt
                  |L1.19596|
                          DCD      hv_vz_stat
                  |L1.19600|
                          DCD      UZ_U
                  |L1.19604|
                          DCD      FZ_U1
                  |L1.19608|
                          DCD      FZ_U2
                  |L1.19612|
004c9c  fb91f1f2          SDIV     r1,r1,r2
;;;8110   u_necc_dn=(signed short)temp_L;
004ca0  4bfb              LDR      r3,|L1.20624|
004ca2  8019              STRH     r1,[r3,#0]
;;;8111   
;;;8112   temp_L=(signed long) u_necc;
;;;8113   temp_L*=102L;
004ca4  f04f0166          MOV      r1,#0x66
004ca8  fb00f001          MUL      r0,r0,r1
;;;8114   temp_L/=100L;
004cac  fb90f0f2          SDIV     r0,r0,r2
;;;8115   u_necc_up=(signed short)temp_L;
004cb0  49f8              LDR      r1,|L1.20628|
004cb2  8008              STRH     r0,[r1,#0]
;;;8116   /*
;;;8117   #ifdef IPS_SGEP_GAZPROM
;;;8118   u_necc=248;
;;;8119   #endif */
;;;8120   }
004cb4  bdf8              POP      {r3-r7,pc}
;;;8121   
                          ENDP

                  num_necc_hndl PROC
;;;8123   //-----------------------------------------------
;;;8124   void num_necc_hndl(void)
004cb6  e92d41f0          PUSH     {r4-r8,lr}
;;;8125   {
;;;8126   
;;;8127   static short num_necc_block_cnt;
;;;8128   if(num_necc_block_cnt) num_necc_block_cnt--;
004cba  4cf7              LDR      r4,|L1.20632|
004cbc  f9b40032          LDRSH    r0,[r4,#0x32]  ; num_necc_block_cnt
004cc0  b110              CBZ      r0,|L1.19656|
004cc2  f1a00001          SUB      r0,r0,#1
004cc6  8660              STRH     r0,[r4,#0x32]
                  |L1.19656|
;;;8129   
;;;8130   Isumm_=Isumm;
004cc8  48f4              LDR      r0,|L1.20636|
004cca  4df5              LDR      r5,|L1.20640|
004ccc  8800              LDRH     r0,[r0,#0]  ; Isumm
004cce  8028              STRH     r0,[r5,#0]
;;;8131   
;;;8132   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
004cd0  4ef4              LDR      r6,|L1.20644|
004cd2  270a              MOVS     r7,#0xa
004cd4  f9b60008          LDRSH    r0,[r6,#8]  ; bat
004cd8  2800              CMP      r0,#0
004cda  da06              BGE      |L1.19690|
004cdc  f7fffffe          BL       abs
004ce0  fb90f0f7          SDIV     r0,r0,r7
004ce4  8829              LDRH     r1,[r5,#0]  ; Isumm_
004ce6  4408              ADD      r0,r0,r1
004ce8  8028              STRH     r0,[r5,#0]
                  |L1.19690|
;;;8133   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
004cea  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
004cee  2800              CMP      r0,#0
004cf0  da06              BGE      |L1.19712|
004cf2  f7fffffe          BL       abs
004cf6  fb90f0f7          SDIV     r0,r0,r7
004cfa  8829              LDRH     r1,[r5,#0]  ; Isumm_
004cfc  4408              ADD      r0,r0,r1
004cfe  8028              STRH     r0,[r5,#0]
                  |L1.19712|
;;;8134   
;;;8135   num_necc_up=(Isumm_/((signed short)IMAX))+1;
004d00  49e9              LDR      r1,|L1.20648|
004d02  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
004d06  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
004d0a  fb90f1f1          SDIV     r1,r0,r1
004d0e  f1010101          ADD      r1,r1,#1
004d12  b2c9              UXTB     r1,r1
004d14  76a1              STRB     r1,[r4,#0x1a]
;;;8136   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;8137   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;8138   
;;;8139   num_necc_down=(Isumm_/((signed short)IMIN))+1;
004d16  4ae5              LDR      r2,|L1.20652|
004d18  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
004d1c  fb90f0f2          SDIV     r0,r0,r2
004d20  f1000001          ADD      r0,r0,#1
004d24  b2c2              UXTB     r2,r0
004d26  76e2              STRB     r2,[r4,#0x1b]
;;;8140   
;;;8141   if(num_necc_up>num_necc)
004d28  48e1              LDR      r0,|L1.20656|
;;;8142   	{
;;;8143   	num_necc=num_necc_up;
;;;8144   	num_necc_block_cnt=60;
004d2a  f04f053c          MOV      r5,#0x3c
004d2e  f9b03000          LDRSH    r3,[r0,#0]            ;8141  ; num_necc
004d32  4299              CMP      r1,r3                 ;8141
004d34  dd02              BLE      |L1.19772|
004d36  8001              STRH     r1,[r0,#0]            ;8143
004d38  8665              STRH     r5,[r4,#0x32]
004d3a  e005              B        |L1.19784|
                  |L1.19772|
;;;8145   	}
;;;8146   else if(num_necc_down<num_necc)
004d3c  429a              CMP      r2,r3
004d3e  da03              BGE      |L1.19784|
;;;8147   	{
;;;8148   	if(!num_necc_block_cnt)
004d40  8e61              LDRH     r1,[r4,#0x32]  ; num_necc_block_cnt
004d42  b909              CBNZ     r1,|L1.19784|
;;;8149   		{
;;;8150   		num_necc=num_necc_down;
004d44  8002              STRH     r2,[r0,#0]
;;;8151   		num_necc_block_cnt=60;
004d46  8665              STRH     r5,[r4,#0x32]
                  |L1.19784|
;;;8152   		}
;;;8153   	}
;;;8154   
;;;8155   if(PAR) num_necc=NUMIST;
004d48  49da              LDR      r1,|L1.20660|
004d4a  880a              LDRH     r2,[r1,#0]  ; PAR
004d4c  49da              LDR      r1,|L1.20664|
004d4e  b10a              CBZ      r2,|L1.19796|
004d50  880a              LDRH     r2,[r1,#0]  ; NUMIST
004d52  8002              STRH     r2,[r0,#0]
                  |L1.19796|
;;;8156   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8157   if(bPARALLEL) num_necc=NUMIST;
004d54  f8942028          LDRB     r2,[r4,#0x28]  ; bPARALLEL
004d58  b10a              CBZ      r2,|L1.19806|
004d5a  880a              LDRH     r2,[r1,#0]  ; NUMIST
004d5c  8002              STRH     r2,[r0,#0]
                  |L1.19806|
;;;8158   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
004d5e  7862              LDRB     r2,[r4,#1]  ; vz1_stat
004d60  2a0a              CMP      r2,#0xa
004d62  d101              BNE      |L1.19816|
004d64  880a              LDRH     r2,[r1,#0]  ; NUMIST
004d66  8002              STRH     r2,[r0,#0]
                  |L1.19816|
;;;8159   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
004d68  78e2              LDRB     r2,[r4,#3]  ; vz2_stat
004d6a  2a0a              CMP      r2,#0xa
004d6c  d001              BEQ      |L1.19826|
004d6e  2a0b              CMP      r2,#0xb
004d70  d101              BNE      |L1.19830|
                  |L1.19826|
004d72  880a              LDRH     r2,[r1,#0]  ; NUMIST
004d74  8002              STRH     r2,[r0,#0]
                  |L1.19830|
;;;8160   #endif
;;;8161   
;;;8162   gran(&num_necc,1,NUMIST);
004d76  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
004d7a  e8bd41f0          POP      {r4-r8,lr}
004d7e  2101              MOVS     r1,#1
004d80  48cb              LDR      r0,|L1.20656|
004d82  f7ffbffe          B.W      gran
;;;8163   
;;;8164   }
;;;8165   
                          ENDP

                  cntrl_hndl PROC
;;;8168   //-----------------------------------------------
;;;8169   void cntrl_hndl(void)
004d86  e92d5ff0          PUSH     {r4-r12,lr}
;;;8170   {
;;;8171   
;;;8172   
;;;8173   
;;;8174   IZMAX_=IZMAX;
004d8a  48cc              LDR      r0,|L1.20668|
004d8c  4cc2              LDR      r4,|L1.20632|
004d8e  8800              LDRH     r0,[r0,#0]  ; IZMAX
004d90  f8a40046          STRH     r0,[r4,#0x46]
;;;8175   
;;;8176   //cntrl_hndl_plazma=10;
;;;8177   
;;;8178   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
004d94  48ca              LDR      r0,|L1.20672|
004d96  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
004d98  b918              CBNZ     r0,|L1.19874|
004d9a  48ca              LDR      r0,|L1.20676|
004d9c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
004d9e  2802              CMP      r0,#2
004da0  d103              BNE      |L1.19882|
                  |L1.19874|
004da2  48c9              LDR      r0,|L1.20680|
004da4  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
004da6  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.19882|
;;;8179   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
004daa  7860              LDRB     r0,[r4,#1]  ; vz1_stat
004dac  280a              CMP      r0,#0xa
004dae  d103              BNE      |L1.19896|
004db0  48c6              LDR      r0,|L1.20684|
004db2  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
004db4  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.19896|
;;;8180   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
004db8  78e0              LDRB     r0,[r4,#3]  ; vz2_stat
004dba  280a              CMP      r0,#0xa
004dbc  d103              BNE      |L1.19910|
004dbe  49c4              LDR      r1,|L1.20688|
004dc0  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
004dc2  f8a41046          STRH     r1,[r4,#0x46]
                  |L1.19910|
;;;8181   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
004dc6  280b              CMP      r0,#0xb
004dc8  d103              BNE      |L1.19922|
004dca  48c2              LDR      r0,|L1.20692|
004dcc  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
004dce  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.19922|
;;;8182   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;8183   
;;;8184   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
004dd2  f9b4006e          LDRSH    r0,[r4,#0x6e]  ; cntrl_stat_blok_cnt
004dd6  b118              CBZ      r0,|L1.19936|
004dd8  f1a00001          SUB      r0,r0,#1
004ddc  f8a4006e          STRH     r0,[r4,#0x6e]
                  |L1.19936|
;;;8185   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
004de0  f9b40070          LDRSH    r0,[r4,#0x70]  ; cntrl_stat_blok_cnt_
004de4  b118              CBZ      r0,|L1.19950|
004de6  f1a00001          SUB      r0,r0,#1
004dea  f8a40070          STRH     r0,[r4,#0x70]
                  |L1.19950|
;;;8186   
;;;8187   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
004dee  48ad              LDR      r0,|L1.20644|
004df0  f04f080a          MOV      r8,#0xa               ;8179
004df4  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
004df8  0789              LSLS     r1,r1,#30
004dfa  d103              BNE      |L1.19972|
004dfc  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
004e00  0780              LSLS     r0,r0,#30
004e02  d005              BEQ      |L1.19984|
                  |L1.19972|
004e04  f8b40046          LDRH     r0,[r4,#0x46]  ; IZMAX_
004e08  fbb0f0f8          UDIV     r0,r0,r8
004e0c  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.19984|
;;;8188   
;;;8189   
;;;8190   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8191   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
004e10  48b1              LDR      r0,|L1.20696|
004e12  2601              MOVS     r6,#1
004e14  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
004e18  1e49              SUBS     r1,r1,#1
004e1a  2905              CMP      r1,#5
004e1c  d300              BCC      |L1.20000|
004e1e  8006              STRH     r6,[r0,#0]
                  |L1.20000|
;;;8192   if(ch_cnt0<(10*REG_SPEED))
004e20  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
004e24  7c61              LDRB     r1,[r4,#0x11]  ; ch_cnt0
004e26  eb000080          ADD      r0,r0,r0,LSL #2
004e2a  2500              MOVS     r5,#0                 ;8178
004e2c  ebb10f40          CMP      r1,r0,LSL #1
004e30  da08              BGE      |L1.20036|
;;;8193   	{
;;;8194   	ch_cnt0++;
004e32  f1010101          ADD      r1,r1,#1
004e36  b2c9              UXTB     r1,r1
004e38  7461              STRB     r1,[r4,#0x11]
;;;8195   	if(ch_cnt0>=10*REG_SPEED)
004e3a  ebb10f40          CMP      r1,r0,LSL #1
004e3e  db01              BLT      |L1.20036|
;;;8196   		{
;;;8197   		ch_cnt0=0;
004e40  7465              STRB     r5,[r4,#0x11]
;;;8198   		b1Hz_ch=1;
004e42  74a6              STRB     r6,[r4,#0x12]
                  |L1.20036|
;;;8199   		}
;;;8200   	}
;;;8201   #endif
;;;8202   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8203   if(ch_cnt0<10)
;;;8204   	{
;;;8205   	ch_cnt0++;
;;;8206   	if(ch_cnt0>=10)
;;;8207   		{
;;;8208   		ch_cnt0=0;
;;;8209   		b1Hz_ch=1;
;;;8210   		}
;;;8211   	}
;;;8212   #endif
;;;8213   
;;;8214   
;;;8215   if(mess_find_unvol(MESS2CNTRL_HNDL))
004e44  20e1              MOVS     r0,#0xe1
004e46  f7fffffe          BL       mess_find_unvol
;;;8216   	{
;;;8217   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;8218   		{
;;;8219   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;8220   		}
;;;8221   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;8222   		{
;;;8223   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;8224   		}
;;;8225   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;8226   		{
;;;8227   		static char cntrlStatIsDownCnt;
;;;8228   		cntrl_stat--;
;;;8229   
;;;8230   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;8231   			{
;;;8232   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;8233   			}
;;;8234   		else 
;;;8235   			{
;;;8236   			cntrlStatIsDownCnt=0;
;;;8237   			}
;;;8238   
;;;8239   		}
;;;8240   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;8241   		{
;;;8242   		cntrl_stat/*_new*/=mess_data[1];
;;;8243   		}
;;;8244   
;;;8245   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;8246   		{
;;;8247   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8248   		if(bps_U>u_necc)
004e4a  f8dfc290          LDR      r12,|L1.20700|
004e4e  4aa4              LDR      r2,|L1.20704|
;;;8249   			{
;;;8250   			cntrl_hndl_plazma=11;
;;;8251   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8252   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8253   			}
;;;8254   		else if(bps_U<u_necc)
;;;8255   			{
;;;8256   			cntrl_hndl_plazma=12;	
;;;8257   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8258   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8259   			}
;;;8260   		#elif defined(UKU_220)
;;;8261   		if(load_U>u_necc)
;;;8262   			{
;;;8263   			cntrl_hndl_plazma=13;
;;;8264   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8265   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8266   			}
;;;8267   		else if(load_U<u_necc)
;;;8268   			{
;;;8269   			cntrl_hndl_plazma=14;	
;;;8270   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8271   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8272   			}
;;;8273   		#elif defined(UKU_220_V2)
;;;8274   		if(load_U>u_necc)
;;;8275   			{
;;;8276   			cntrl_hndl_plazma=15;
;;;8277   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8278   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8279   			}
;;;8280   		else if(load_U<u_necc)
;;;8281   			{
;;;8282   			cntrl_hndl_plazma=16;	
;;;8283   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8284   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8285   			}
;;;8286   		#else
;;;8287   
;;;8288   		if(load_U>u_necc)
;;;8289   			{
;;;8290   			cntrl_hndl_plazma=17;
;;;8291   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8292   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8293   			}
;;;8294   		else if(load_U<u_necc)
;;;8295   			{
;;;8296   			cntrl_hndl_plazma=18;	
;;;8297   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8298   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8299   			}
;;;8300   		#endif	
;;;8301   	 	}
;;;8302   
;;;8303   	/*gran(&cntrl_stat_new,10,1010);			
;;;8304   	cntrl_stat_old=cntrl_stat_new;
;;;8305   	cntrl_stat=cntrl_stat_new;*/
;;;8306   	}
;;;8307   
;;;8308   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8309   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
004e50  f8df9290          LDR      r9,|L1.20708|
;;;8310   	{
;;;8311   	cntrl_stat_new=cntrl_stat_old;
;;;8312   	cntrl_hndl_plazma=19;
;;;8313   	if((Ibmax/10)>(2*IZMAX_))
;;;8314   		{
;;;8315   		cntrl_hndl_plazma=20;
;;;8316             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8317   		else	cntrl_stat_new-=10;
;;;8318   		}		
;;;8319   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;8320   		{
;;;8321   		cntrl_hndl_plazma=21;
;;;8322             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8323             else	cntrl_stat_new-=3;
;;;8324   		}   
;;;8325   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;8326   		{
;;;8327   		cntrl_hndl_plazma=22;
;;;8328   		cntrl_stat_new--;
;;;8329   		}
;;;8330   		
;;;8331   	else if(bps_U<u_necc)
;;;8332   		{
;;;8333   		cntrl_hndl_plazma=23;
;;;8334   		if(bps_U<(u_necc-(UB0-UB20)))
;;;8335   			{
;;;8336   			cntrl_hndl_plazma=24;
;;;8337   			if(Ibmax<0)
;;;8338   				{
;;;8339   				cntrl_hndl_plazma=25;
;;;8340                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8341   				else cntrl_stat_new+=10;
;;;8342   				}
;;;8343   			else if(Ibmax<(IZMAX_*5))
;;;8344   				{
;;;8345   				cntrl_hndl_plazma=26;
;;;8346                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8347   				else	cntrl_stat_new+=2;
;;;8348   				}
;;;8349   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8350   				{
;;;8351   				cntrl_hndl_plazma=27;
;;;8352   				cntrl_stat_new++;
;;;8353   				}					
;;;8354   			}
;;;8355   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;8356   			{
;;;8357   			cntrl_hndl_plazma=28;
;;;8358   			if(Ibmax<(IZMAX_*5))
;;;8359   				{
;;;8360   				cntrl_hndl_plazma=29;
;;;8361                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8362   				else	cntrl_stat_new+=2;
;;;8363   				}
;;;8364   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8365   				{
;;;8366   				cntrl_hndl_plazma=30;
;;;8367   				cntrl_stat_new++;
;;;8368   				}					
;;;8369   			}	
;;;8370   		else if(bps_U<(u_necc-1))
;;;8371   			{
;;;8372   			cntrl_hndl_plazma=31;
;;;8373   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8374   				{
;;;8375   				cntrl_hndl_plazma=32;
;;;8376   				cntrl_stat_new++;
;;;8377   				}					
;;;8378   			}					
;;;8379   		}	
;;;8380   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;8381   		{ 	
;;;8382   		cntrl_hndl_plazma=33;
;;;8383   		if(bps_U>(u_necc+(UB0-UB20)))
;;;8384   			{
;;;8385   			cntrl_hndl_plazma=34;
;;;8386                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8387   			else	cntrl_stat_new-=10;
;;;8388   			}
;;;8389   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;8390   			{
;;;8391   			cntrl_hndl_plazma=35;
;;;8392                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8393   			else cntrl_stat_new-=2;
;;;8394   			}	
;;;8395   		else if(bps_U>(u_necc+1))
;;;8396   			{
;;;8397   			cntrl_hndl_plazma=36;
;;;8398   			cntrl_stat_new--;
;;;8399   			}					
;;;8400   		}
;;;8401   
;;;8402   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;8403   		{
;;;8404   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;8405   		}
;;;8406   
;;;8407   	gran(&cntrl_stat_new,10,1010);			
;;;8408   	cntrl_stat_old=cntrl_stat_new;
;;;8409   	cntrl_stat=cntrl_stat_new;
;;;8410   	
;;;8411   	if(ICA_EN==0)
;;;8412   		{
;;;8413   		if(ica_cntrl_hndl_cnt)
004e54  4fa4              LDR      r7,|L1.20712|
004e56  b398              CBZ      r0,|L1.20160|
004e58  49a4              LDR      r1,|L1.20716|
004e5a  6808              LDR      r0,[r1,#0]            ;8217  ; mess_data
004e5c  2864              CMP      r0,#0x64              ;8217
004e5e  d008              BEQ      |L1.20082|
004e60  2869              CMP      r0,#0x69              ;8221
004e62  d00b              BEQ      |L1.20092|
004e64  286e              CMP      r0,#0x6e              ;8225
004e66  d00f              BEQ      |L1.20104|
004e68  28e5              CMP      r0,#0xe5              ;8240
004e6a  d02c              BEQ      |L1.20166|
004e6c  28e6              CMP      r0,#0xe6              ;8245
004e6e  d02d              BEQ      |L1.20172|
                  |L1.20080|
004e70  e205              B        |L1.21118|
                  |L1.20082|
004e72  6848              LDR      r0,[r1,#4]            ;8219  ; mess_data
004e74  8de1              LDRH     r1,[r4,#0x2e]         ;8219  ; cntrl_stat_old
004e76  4408              ADD      r0,r0,r1              ;8219
004e78  85a0              STRH     r0,[r4,#0x2c]         ;8219
004e7a  e200              B        |L1.21118|
                  |L1.20092|
004e7c  6848              LDR      r0,[r1,#4]            ;8223  ; mess_data
004e7e  8de1              LDRH     r1,[r4,#0x2e]         ;8223  ; cntrl_stat_old
004e80  eba10000          SUB      r0,r1,r0              ;8223
004e84  85a0              STRH     r0,[r4,#0x2c]         ;8223
004e86  e1fa              B        |L1.21118|
                  |L1.20104|
004e88  8da0              LDRH     r0,[r4,#0x2c]         ;8228  ; cntrl_stat
004e8a  f1a00001          SUB      r0,r0,#1              ;8228
004e8e  b200              SXTH     r0,r0                 ;8228
004e90  85a0              STRH     r0,[r4,#0x2c]         ;8228
004e92  281e              CMP      r0,#0x1e              ;8230
004e94  dd07              BLE      |L1.20134|
004e96  4896              LDR      r0,|L1.20720|
004e98  4996              LDR      r1,|L1.20724|
004e9a  f9b00000          LDRSH    r0,[r0,#0]            ;8230  ; load_U
004e9e  f9b11000          LDRSH    r1,[r1,#0]            ;8230  ; USIGN
004ea2  4288              CMP      r0,r1                 ;8230
004ea4  da0d              BGE      |L1.20162|
                  |L1.20134|
004ea6  7ae0              LDRB     r0,[r4,#0xb]          ;8232  ; cntrlStatIsDownCnt
004ea8  1c40              ADDS     r0,r0,#1              ;8232
004eaa  b2c0              UXTB     r0,r0                 ;8232
004eac  72e0              STRB     r0,[r4,#0xb]          ;8232
004eae  28fa              CMP      r0,#0xfa              ;8232
004eb0  d1de              BNE      |L1.20080|
004eb2  230a              MOVS     r3,#0xa               ;8232
004eb4  2200              MOVS     r2,#0                 ;8232
004eb6  21e7              MOVS     r1,#0xe7              ;8232
004eb8  20e6              MOVS     r0,#0xe6              ;8232
004eba  f7fffffe          BL       mess_send
004ebe  e1de              B        |L1.21118|
                  |L1.20160|
004ec0  e044              B        |L1.20300|
                  |L1.20162|
004ec2  72e5              STRB     r5,[r4,#0xb]          ;8236
004ec4  e1db              B        |L1.21118|
                  |L1.20166|
004ec6  6848              LDR      r0,[r1,#4]            ;8242  ; mess_data
004ec8  85a0              STRH     r0,[r4,#0x2c]         ;8242
004eca  e1d8              B        |L1.21118|
                  |L1.20172|
004ecc  f9bc0000          LDRSH    r0,[r12,#0]           ;8248  ; bps_U
004ed0  f9b21000          LDRSH    r1,[r2,#0]            ;8248  ; u_necc
004ed4  4288              CMP      r0,r1                 ;8248
004ed6  dd1a              BLE      |L1.20238|
004ed8  f04f020b          MOV      r2,#0xb               ;8250
004edc  f8842029          STRB     r2,[r4,#0x29]         ;8250
004ee0  eba00001          SUB      r0,r0,r1              ;8251
004ee4  2828              CMP      r0,#0x28              ;8251
004ee6  dd07              BLE      |L1.20216|
004ee8  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;8251  ; cntrl_stat
004eec  2800              CMP      r0,#0                 ;8251
004eee  dd03              BLE      |L1.20216|
004ef0  f1a00005          SUB      r0,r0,#5              ;8251
004ef4  85a0              STRH     r0,[r4,#0x2c]         ;8251
004ef6  e1c2              B        |L1.21118|
                  |L1.20216|
004ef8  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;8252  ; cntrl_stat
004efc  2800              CMP      r0,#0                 ;8252
004efe  d0b7              BEQ      |L1.20080|
004f00  7ca1              LDRB     r1,[r4,#0x12]         ;8252  ; b1Hz_ch
004f02  2900              CMP      r1,#0                 ;8252
004f04  d0b4              BEQ      |L1.20080|
004f06  f1a00001          SUB      r0,r0,#1              ;8252
004f0a  85a0              STRH     r0,[r4,#0x2c]         ;8252
004f0c  e1b7              B        |L1.21118|
                  |L1.20238|
004f0e  daaf              BGE      |L1.20080|
004f10  f04f020c          MOV      r2,#0xc               ;8256
004f14  f8842029          STRB     r2,[r4,#0x29]         ;8256
004f18  eba10000          SUB      r0,r1,r0              ;8257
004f1c  2828              CMP      r0,#0x28              ;8257
004f1e  dd09              BLE      |L1.20276|
004f20  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;8257  ; cntrl_stat
004f24  f24031f7          MOV      r1,#0x3f7             ;8257
004f28  4288              CMP      r0,r1                 ;8257
004f2a  da03              BGE      |L1.20276|
004f2c  f1000005          ADD      r0,r0,#5              ;8257
004f30  85a0              STRH     r0,[r4,#0x2c]         ;8257
004f32  e1a4              B        |L1.21118|
                  |L1.20276|
004f34  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;8258  ; cntrl_stat
004f38  f5b07f7f          CMP      r0,#0x3fc             ;8258
004f3c  da98              BGE      |L1.20080|
004f3e  7ca1              LDRB     r1,[r4,#0x12]         ;8258  ; b1Hz_ch
004f40  2900              CMP      r1,#0                 ;8258
004f42  d095              BEQ      |L1.20080|
004f44  f1000001          ADD      r0,r0,#1              ;8258
004f48  85a0              STRH     r0,[r4,#0x2c]         ;8258
004f4a  e198              B        |L1.21118|
                  |L1.20300|
004f4c  7ca0              LDRB     r0,[r4,#0x12]         ;8309  ; b1Hz_ch
004f4e  2800              CMP      r0,#0                 ;8309
004f50  d08e              BEQ      |L1.20080|
004f52  4869              LDR      r0,|L1.20728|
004f54  8800              LDRH     r0,[r0,#0]            ;8309  ; bIBAT_SMKLBR
004f56  b118              CBZ      r0,|L1.20320|
004f58  f89902e3          LDRB     r0,[r9,#0x2e3]        ;8309  ; bps
004f5c  2828              CMP      r0,#0x28              ;8309
004f5e  d987              BLS      |L1.20080|
                  |L1.20320|
004f60  f1040428          ADD      r4,r4,#0x28           ;8311
004f64  f9b40006          LDRSH    r0,[r4,#6]            ;8311  ; cntrl_stat_old
004f68  8360              STRH     r0,[r4,#0x1a]         ;8311
004f6a  f04f0113          MOV      r1,#0x13              ;8312
004f6e  7061              STRB     r1,[r4,#1]            ;8312
004f70  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;8313  ; Ibmax
004f74  8be3              LDRH     r3,[r4,#0x1e]         ;8313  ; IZMAX_
004f76  fb91f8f8          SDIV     r8,r1,r8              ;8313
004f7a  f1a40428          SUB      r4,r4,#0x28           ;8313
004f7e  ebb80f43          CMP      r8,r3,LSL #1          ;8313
004f82  dd10              BLE      |L1.20390|
004f84  f04f0114          MOV      r1,#0x14              ;8315
004f88  f8841029          STRB     r1,[r4,#0x29]         ;8315
004f8c  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8316  ; cntrl_stat_blok_cnt
004f90  b121              CBZ      r1,|L1.20380|
004f92  f1a00001          SUB      r0,r0,#1              ;8316
004f96  f8a40042          STRH     r0,[r4,#0x42]         ;8316
004f9a  e13a              B        |L1.21010|
                  |L1.20380|
004f9c  f1a0000a          SUB      r0,r0,#0xa            ;8317
004fa0  f8a40042          STRH     r0,[r4,#0x42]         ;8317
004fa4  e135              B        |L1.21010|
                  |L1.20390|
004fa6  da14              BGE      |L1.20434|
004fa8  ebc31a03          RSB      r10,r3,r3,LSL #4      ;8319
004fac  458a              CMP      r10,r1                ;8319
004fae  da10              BGE      |L1.20434|
004fb0  f04f0115          MOV      r1,#0x15              ;8321
004fb4  f8841029          STRB     r1,[r4,#0x29]         ;8321
004fb8  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8322  ; cntrl_stat_blok_cnt
004fbc  b121              CBZ      r1,|L1.20424|
004fbe  f1a00001          SUB      r0,r0,#1              ;8322
004fc2  f8a40042          STRH     r0,[r4,#0x42]         ;8322
004fc6  e124              B        |L1.21010|
                  |L1.20424|
004fc8  f1a00003          SUB      r0,r0,#3              ;8323
004fcc  f8a40042          STRH     r0,[r4,#0x42]         ;8323
004fd0  e11f              B        |L1.21010|
                  |L1.20434|
004fd2  ebc31a03          RSB      r10,r3,r3,LSL #4      ;8325
004fd6  458a              CMP      r10,r1                ;8325
004fd8  dd0a              BLE      |L1.20464|
004fda  4598              CMP      r8,r3                 ;8325
004fdc  dd08              BLE      |L1.20464|
004fde  f04f0116          MOV      r1,#0x16              ;8327
004fe2  f8841029          STRB     r1,[r4,#0x29]         ;8327
004fe6  f1a00001          SUB      r0,r0,#1              ;8328
004fea  f8a40042          STRH     r0,[r4,#0x42]         ;8328
004fee  e110              B        |L1.21010|
                  |L1.20464|
004ff0  f9bcc000          LDRSH    r12,[r12,#0]          ;8331  ; bps_U
004ff4  f9b22000          LDRSH    r2,[r2,#0]            ;8331  ; u_necc
004ff8  f8df8100          LDR      r8,|L1.20732|
004ffc  f8dfb100          LDR      r11,|L1.20736|
005000  4594              CMP      r12,r2                ;8331
005002  da7f              BGE      |L1.20740|
005004  f04f0a17          MOV      r10,#0x17             ;8333
005008  f884a029          STRB     r10,[r4,#0x29]        ;8333
00500c  f9b88000          LDRSH    r8,[r8,#0]            ;8334  ; UB0
005010  f9bba000          LDRSH    r10,[r11,#0]          ;8334  ; UB20
005014  eba8080a          SUB      r8,r8,r10             ;8334
005018  eba20a08          SUB      r10,r2,r8             ;8334
00501c  45e2              CMP      r10,r12               ;8334
00501e  dd73              BLE      |L1.20744|
005020  f04f0218          MOV      r2,#0x18              ;8336
005024  f8842029          STRB     r2,[r4,#0x29]         ;8336
005028  2900              CMP      r1,#0                 ;8337
00502a  da10              BGE      |L1.20558|
00502c  f04f0119          MOV      r1,#0x19              ;8339
005030  f8841029          STRB     r1,[r4,#0x29]         ;8339
005034  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8340  ; cntrl_stat_blok_cnt
005038  b121              CBZ      r1,|L1.20548|
00503a  f1000001          ADD      r0,r0,#1              ;8340
00503e  f8a40042          STRH     r0,[r4,#0x42]         ;8340
005042  e0e6              B        |L1.21010|
                  |L1.20548|
005044  f100000a          ADD      r0,r0,#0xa            ;8341
005048  f8a40042          STRH     r0,[r4,#0x42]         ;8341
00504c  e0e1              B        |L1.21010|
                  |L1.20558|
00504e  eb030283          ADD      r2,r3,r3,LSL #2       ;8343
005052  428a              CMP      r2,r1                 ;8343
005054  dd10              BLE      |L1.20600|
005056  f04f011a          MOV      r1,#0x1a              ;8345
00505a  f8841029          STRB     r1,[r4,#0x29]         ;8345
00505e  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8346  ; cntrl_stat_blok_cnt
005062  b121              CBZ      r1,|L1.20590|
005064  f1000001          ADD      r0,r0,#1              ;8346
005068  f8a40042          STRH     r0,[r4,#0x42]         ;8346
00506c  e0d1              B        |L1.21010|
                  |L1.20590|
00506e  f1000002          ADD      r0,r0,#2              ;8347
005072  f8a40042          STRH     r0,[r4,#0x42]         ;8347
005076  e0cc              B        |L1.21010|
                  |L1.20600|
005078  ebb10f42          CMP      r1,r2,LSL #1          ;8349
00507c  da07              BGE      |L1.20622|
00507e  f04f011b          MOV      r1,#0x1b              ;8351
005082  f8841029          STRB     r1,[r4,#0x29]         ;8351
005086  f1000001          ADD      r0,r0,#1              ;8352
00508a  f8a40042          STRH     r0,[r4,#0x42]         ;8352
                  |L1.20622|
00508e  e0c0              B        |L1.21010|
                  |L1.20624|
                          DCD      u_necc_dn
                  |L1.20628|
                          DCD      u_necc_up
                  |L1.20632|
                          DCD      ||area_number.25||
                  |L1.20636|
                          DCD      Isumm
                  |L1.20640|
                          DCD      Isumm_
                  |L1.20644|
                          DCD      bat
                  |L1.20648|
                          DCD      IMAX
                  |L1.20652|
                          DCD      IMIN
                  |L1.20656|
                          DCD      num_necc
                  |L1.20660|
                          DCD      PAR
                  |L1.20664|
                          DCD      NUMIST
                  |L1.20668|
                          DCD      IZMAX
                  |L1.20672|
                          DCD      speedChIsOn
                  |L1.20676|
                          DCD      sp_ch_stat
                  |L1.20680|
                          DCD      speedChrgCurr
                  |L1.20684|
                          DCD      UZ_IMAX
                  |L1.20688|
                          DCD      FZ_IMAX1
                  |L1.20692|
                          DCD      FZ_IMAX2
                  |L1.20696|
                          DCD      REG_SPEED
                  |L1.20700|
                          DCD      bps_U
                  |L1.20704|
                          DCD      u_necc
                  |L1.20708|
                          DCD      bps
                  |L1.20712|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.20716|
                          DCD      mess_data
                  |L1.20720|
                          DCD      load_U
                  |L1.20724|
                          DCD      USIGN
                  |L1.20728|
                          DCD      bIBAT_SMKLBR
                  |L1.20732|
                          DCD      UB0
                  |L1.20736|
                          DCD      UB20
                  |L1.20740|
005104  e042              B        |L1.20876|
005106  e7ff              B        |L1.20744|
                  |L1.20744|
005108  ea4f7ae8          ASR      r10,r8,#31            ;8355
00510c  eb08789a          ADD      r8,r8,r10,LSR #30     ;8355
005110  eba208a8          SUB      r8,r2,r8,ASR #2       ;8355
005114  45e0              CMP      r8,r12                ;8355
005116  dd24              BLE      |L1.20834|
005118  f04f021c          MOV      r2,#0x1c              ;8357
00511c  f8842029          STRB     r2,[r4,#0x29]         ;8357
005120  eb030283          ADD      r2,r3,r3,LSL #2       ;8358
005124  428a              CMP      r2,r1                 ;8358
005126  dd10              BLE      |L1.20810|
005128  f04f011d          MOV      r1,#0x1d              ;8360
00512c  f8841029          STRB     r1,[r4,#0x29]         ;8360
005130  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8361  ; cntrl_stat_blok_cnt
005134  b121              CBZ      r1,|L1.20800|
005136  f1000001          ADD      r0,r0,#1              ;8361
00513a  f8a40042          STRH     r0,[r4,#0x42]         ;8361
00513e  e068              B        |L1.21010|
                  |L1.20800|
005140  f1000002          ADD      r0,r0,#2              ;8362
005144  f8a40042          STRH     r0,[r4,#0x42]         ;8362
005148  e063              B        |L1.21010|
                  |L1.20810|
00514a  ebb10f42          CMP      r1,r2,LSL #1          ;8364
00514e  da60              BGE      |L1.21010|
005150  f04f011e          MOV      r1,#0x1e              ;8366
005154  f8841029          STRB     r1,[r4,#0x29]         ;8366
005158  f1000001          ADD      r0,r0,#1              ;8367
00515c  f8a40042          STRH     r0,[r4,#0x42]         ;8367
005160  e057              B        |L1.21010|
                  |L1.20834|
005162  1e52              SUBS     r2,r2,#1              ;8370
005164  4594              CMP      r12,r2                ;8370
005166  da54              BGE      |L1.21010|
005168  f04f021f          MOV      r2,#0x1f              ;8372
00516c  f8842029          STRB     r2,[r4,#0x29]         ;8372
005170  eb030283          ADD      r2,r3,r3,LSL #2       ;8373
005174  ebb10f42          CMP      r1,r2,LSL #1          ;8373
005178  da4b              BGE      |L1.21010|
00517a  f04f0120          MOV      r1,#0x20              ;8375
00517e  f8841029          STRB     r1,[r4,#0x29]         ;8375
005182  f1000001          ADD      r0,r0,#1              ;8376
005186  f8a40042          STRH     r0,[r4,#0x42]         ;8376
00518a  e042              B        |L1.21010|
                  |L1.20876|
00518c  dd41              BLE      |L1.21010|
00518e  f04f0121          MOV      r1,#0x21              ;8382
005192  f8841029          STRB     r1,[r4,#0x29]         ;8382
005196  f9b81000          LDRSH    r1,[r8,#0]            ;8383  ; UB0
00519a  f9bb3000          LDRSH    r3,[r11,#0]           ;8383  ; UB20
00519e  eba10103          SUB      r1,r1,r3              ;8383
0051a2  eb010302          ADD      r3,r1,r2              ;8383
0051a6  4563              CMP      r3,r12                ;8383
0051a8  da10              BGE      |L1.20940|
0051aa  f04f0122          MOV      r1,#0x22              ;8385
0051ae  f8841029          STRB     r1,[r4,#0x29]         ;8385
0051b2  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8386  ; cntrl_stat_blok_cnt
0051b6  b121              CBZ      r1,|L1.20930|
0051b8  f1a00001          SUB      r0,r0,#1              ;8386
0051bc  f8a40042          STRH     r0,[r4,#0x42]         ;8386
0051c0  e027              B        |L1.21010|
                  |L1.20930|
0051c2  f1a0000a          SUB      r0,r0,#0xa            ;8387
0051c6  f8a40042          STRH     r0,[r4,#0x42]         ;8387
0051ca  e022              B        |L1.21010|
                  |L1.20940|
0051cc  17cb              ASRS     r3,r1,#31             ;8389
0051ce  eb017193          ADD      r1,r1,r3,LSR #30      ;8389
0051d2  eb0201a1          ADD      r1,r2,r1,ASR #2       ;8389
0051d6  4561              CMP      r1,r12                ;8389
0051d8  da10              BGE      |L1.20988|
0051da  f04f0123          MOV      r1,#0x23              ;8391
0051de  f8841029          STRB     r1,[r4,#0x29]         ;8391
0051e2  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8392  ; cntrl_stat_blok_cnt
0051e6  b121              CBZ      r1,|L1.20978|
0051e8  f1a00001          SUB      r0,r0,#1              ;8392
0051ec  f8a40042          STRH     r0,[r4,#0x42]         ;8392
0051f0  e00f              B        |L1.21010|
                  |L1.20978|
0051f2  f1a00002          SUB      r0,r0,#2              ;8393
0051f6  f8a40042          STRH     r0,[r4,#0x42]         ;8393
0051fa  e00a              B        |L1.21010|
                  |L1.20988|
0051fc  1c52              ADDS     r2,r2,#1              ;8395
0051fe  4594              CMP      r12,r2                ;8395
005200  dd07              BLE      |L1.21010|
005202  f04f0124          MOV      r1,#0x24              ;8397
005206  f8841029          STRB     r1,[r4,#0x29]         ;8397
00520a  f1a00001          SUB      r0,r0,#1              ;8398
00520e  f8a40042          STRH     r0,[r4,#0x42]         ;8398
                  |L1.21010|
005212  48ff              LDR      r0,|L1.22032|
005214  7861              LDRB     r1,[r4,#1]            ;8402  ; vz1_stat
005216  7800              LDRB     r0,[r0,#0]            ;8402  ; hv_vz_stat
005218  4308              ORRS     r0,r0,r1              ;8402
00521a  78e1              LDRB     r1,[r4,#3]            ;8402  ; vz2_stat
00521c  4308              ORRS     r0,r0,r1              ;8402
00521e  d10e              BNE      |L1.21054|
005220  48fc              LDR      r0,|L1.22036|
005222  7840              LDRB     r0,[r0,#1]            ;8404  ; sk_stat
005224  2801              CMP      r0,#1                 ;8404
005226  d10a              BNE      |L1.21054|
005228  48fb              LDR      r0,|L1.22040|
00522a  7840              LDRB     r0,[r0,#1]            ;8404  ; sk_stat_old
00522c  b938              CBNZ     r0,|L1.21054|
00522e  48fb              LDR      r0,|L1.22044|
005230  8800              LDRH     r0,[r0,#0]            ;8404  ; VZ_KIND
005232  2801              CMP      r0,#1                 ;8404
005234  d103              BNE      |L1.21054|
005236  f04f0032          MOV      r0,#0x32              ;8404
00523a  f8a40042          STRH     r0,[r4,#0x42]         ;8404
                  |L1.21054|
00523e  f24032f2          MOV      r2,#0x3f2             ;8407
005242  210a              MOVS     r1,#0xa               ;8407
005244  48f6              LDR      r0,|L1.22048|
005246  f7fffffe          BL       gran
00524a  f8b40042          LDRH     r0,[r4,#0x42]         ;8408  ; cntrl_stat_new
00524e  85e0              STRH     r0,[r4,#0x2e]         ;8408
005250  85a0              STRH     r0,[r4,#0x2c]         ;8409
005252  48f4              LDR      r0,|L1.22052|
005254  f9b00000          LDRSH    r0,[r0,#0]            ;8411  ; ICA_EN
005258  b938              CBNZ     r0,|L1.21098|
00525a  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
00525c  b129              CBZ      r1,|L1.21098|
;;;8414   			{
;;;8415   			cntrl_stat = ica_cntrl_hndl;
00525e  49f2              LDR      r1,|L1.22056|
005260  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
005262  85a1              STRH     r1,[r4,#0x2c]
;;;8416   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
005264  f8a41042          STRH     r1,[r4,#0x42]
;;;8417   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
005268  85e1              STRH     r1,[r4,#0x2e]
                  |L1.21098|
;;;8418   			}
;;;8419   		}
;;;8420   	
;;;8421   	if((ICA_EN==1)||(ICA_EN==2))
00526a  2801              CMP      r0,#1
00526c  d001              BEQ      |L1.21106|
00526e  2802              CMP      r0,#2
005270  d105              BNE      |L1.21118|
                  |L1.21106|
;;;8422   		{
;;;8423   		cntrl_stat=cntrl_stat_new+ica_u_necc;
005272  49ee              LDR      r1,|L1.22060|
005274  f8b40042          LDRH     r0,[r4,#0x42]  ; cntrl_stat_new
005278  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
00527a  4408              ADD      r0,r0,r1
00527c  85a0              STRH     r0,[r4,#0x2c]
                  |L1.21118|
;;;8424   		}			
;;;8425   	}
;;;8426   #else
;;;8427   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;8428   	{
;;;8429   	cntrl_hndl_plazma=37;
;;;8430   	cntrl_stat_new=cntrl_stat_old;
;;;8431   	
;;;8432   	if((Ibmax/10)>(2*IZMAX_))
;;;8433   		{
;;;8434   		cntrl_hndl_plazma=38;
;;;8435             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8436   		else	cntrl_stat_new-=10;
;;;8437   		}		
;;;8438   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;8439   		{
;;;8440   		cntrl_hndl_plazma=39;
;;;8441             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8442             else	cntrl_stat_new-=3;
;;;8443   		}   
;;;8444   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;8445   		{
;;;8446   		cntrl_hndl_plazma=40;
;;;8447   		cntrl_stat_new--;
;;;8448   		}
;;;8449   		
;;;8450   	else if(load_U<u_necc)
;;;8451   		{
;;;8452   		cntrl_hndl_plazma=41;
;;;8453   		if(load_U<(u_necc-(UB0-UB20)))
;;;8454   			{
;;;8455   			cntrl_hndl_plazma=42;
;;;8456   			if(Ibmax<0)
;;;8457   				{
;;;8458   				cntrl_hndl_plazma=43;
;;;8459                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8460   				else cntrl_stat_new+=10;
;;;8461   				}
;;;8462   			else if(Ibmax<(IZMAX_*5))
;;;8463   				{
;;;8464   				cntrl_hndl_plazma=44;
;;;8465                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8466   				else	cntrl_stat_new+=2;
;;;8467   				}
;;;8468   			else if(Ibmax<((IZMAX_*95)/10))
;;;8469   				{
;;;8470   				cntrl_hndl_plazma=45;
;;;8471   				cntrl_stat_new++;
;;;8472   				}					
;;;8473   			}
;;;8474   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;8475   			{
;;;8476   			cntrl_hndl_plazma=46;
;;;8477   			if(Ibmax<(IZMAX_*5))
;;;8478   				{
;;;8479   				cntrl_hndl_plazma=47;
;;;8480                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8481   				else	cntrl_stat_new+=2;
;;;8482   				}
;;;8483   			else if(Ibmax<((IZMAX_*95)/10))
;;;8484   				{
;;;8485   				cntrl_hndl_plazma=48;
;;;8486   				cntrl_stat_new++;
;;;8487   				}					
;;;8488   			}	
;;;8489   		else if(load_U<(u_necc-1))
;;;8490   			{
;;;8491   			cntrl_hndl_plazma=49;
;;;8492   			if(Ibmax<((IZMAX_*95)/10))
;;;8493   				{
;;;8494   				cntrl_hndl_plazma=50;
;;;8495   				cntrl_stat_new++;
;;;8496   				}					
;;;8497   			}					
;;;8498   		}	
;;;8499   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;8500   		{
;;;8501   		cntrl_hndl_plazma=51;
;;;8502   		if(load_U>(u_necc+(UB0-UB20)))
;;;8503   			{
;;;8504   			cntrl_hndl_plazma=52;
;;;8505                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8506   			else	cntrl_stat_new-=10;
;;;8507   			}
;;;8508   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;8509   			{
;;;8510   			cntrl_hndl_plazma=53;
;;;8511                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8512   			else cntrl_stat_new-=2;
;;;8513   			}	
;;;8514   		else if(load_U>(u_necc+1))
;;;8515   			{
;;;8516   			cntrl_hndl_plazma=54;
;;;8517   			cntrl_stat_new--;
;;;8518   			}					
;;;8519   		}
;;;8520   
;;;8521   	gran(&cntrl_stat_new,10,1010);			
;;;8522   	cntrl_stat_old=cntrl_stat_new;
;;;8523   	cntrl_stat=cntrl_stat_new;	
;;;8524   	}
;;;8525   #endif
;;;8526   
;;;8527   iiii=0;
00527e  7525              STRB     r5,[r4,#0x14]
;;;8528   for(i=0;i<NUMIST;i++)
005280  74e5              STRB     r5,[r4,#0x13]
005282  48eb              LDR      r0,|L1.22064|
005284  f9b01000          LDRSH    r1,[r0,#0]
005288  e00c              B        |L1.21156|
                  |L1.21130|
;;;8529        {
;;;8530        if(bps[i]._cnt<30)iiii=1;
00528a  ebc002c0          RSB      r2,r0,r0,LSL #3
00528e  eb021200          ADD      r2,r2,r0,LSL #4
005292  eb090282          ADD      r2,r9,r2,LSL #2
005296  78d2              LDRB     r2,[r2,#3]
005298  2a1e              CMP      r2,#0x1e
00529a  d200              BCS      |L1.21150|
00529c  7526              STRB     r6,[r4,#0x14]
                  |L1.21150|
00529e  f1000001          ADD      r0,r0,#1              ;8528
0052a2  74e0              STRB     r0,[r4,#0x13]         ;8528
                  |L1.21156|
0052a4  7ce0              LDRB     r0,[r4,#0x13]         ;8528  ; i
0052a6  4288              CMP      r0,r1                 ;8528
0052a8  dbef              BLT      |L1.21130|
;;;8531        }
;;;8532   
;;;8533   if(iiii==0)
0052aa  7d20              LDRB     r0,[r4,#0x14]  ; iiii
0052ac  b948              CBNZ     r0,|L1.21186|
;;;8534   	{
;;;8535   	cntrl_stat=600;	
;;;8536   	cntrl_stat_old=600;
;;;8537   	cntrl_stat_new=600;
;;;8538   	cntrl_stat=10*PWM_START;
0052ae  48e1              LDR      r0,|L1.22068|
0052b0  8800              LDRH     r0,[r0,#0]  ; PWM_START
0052b2  eb000080          ADD      r0,r0,r0,LSL #2
0052b6  ea4f0040          LSL      r0,r0,#1
0052ba  85a0              STRH     r0,[r4,#0x2c]
;;;8539   	cntrl_stat_old=10*PWM_START;
0052bc  85e0              STRH     r0,[r4,#0x2e]
;;;8540   	cntrl_stat_new=10*PWM_START;
0052be  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21186|
;;;8541   	}
;;;8542   
;;;8543   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8544   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
0052c2  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
0052c6  b110              CBZ      r0,|L1.21198|
0052c8  f1a00001          SUB      r0,r0,#1
0052cc  8038              STRH     r0,[r7,#0]
                  |L1.21198|
;;;8545   
;;;8546   
;;;8547   
;;;8548   #endif
;;;8549   
;;;8550   
;;;8551   gran(&cntrl_stat,10,1010); 
0052ce  48d4              LDR      r0,|L1.22048|
0052d0  f24032f2          MOV      r2,#0x3f2
0052d4  210a              MOVS     r1,#0xa
0052d6  3816              SUBS     r0,r0,#0x16
0052d8  f7fffffe          BL       gran
;;;8552   b1Hz_ch=0;
0052dc  74a5              STRB     r5,[r4,#0x12]
                  |L1.21214|
;;;8553   }
0052de  e8bd9ff0          POP      {r4-r12,pc}
;;;8554   #endif
                          ENDP

                  ext_drv PROC
;;;9043   //-----------------------------------------------
;;;9044   void ext_drv(void)
0052e2  e92d5ff0          PUSH     {r4-r12,lr}
;;;9045   {
;;;9046   char i;
;;;9047   
;;;9048   
;;;9049   for(i=0;i<NUMSK;i++)
0052e6  f04f0000          MOV      r0,#0
0052ea  4ad4              LDR      r2,|L1.22076|
;;;9050   	{
;;;9051   	#ifdef UKU_MGTS
;;;9052   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9053   	#endif
;;;9054   	#ifdef UKU_RSTKM
;;;9055   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9056   	#endif
;;;9057   	#ifdef UKU_3U
;;;9058   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;9059   	#endif
;;;9060   	#ifdef UKU_GLONASS
;;;9061   	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;9062   	#endif
;;;9063   	#ifdef UKU_KONTUR
;;;9064   	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;9065   	#endif
;;;9066   	#ifdef UKU_6U
;;;9067   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9068   	#endif
;;;9069   	#ifdef UKU_220
;;;9070   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9071   	#endif
;;;9072   	#ifdef UKU_220_V2
;;;9073   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9074   	#endif
;;;9075   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9076   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9077   	#endif
;;;9078   	#ifdef UKU_TELECORE2015	
;;;9079   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9080   	#endif
;;;9081   	#ifdef UKU_TELECORE2017
;;;9082   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9083   	#endif
;;;9084   	#ifdef IPS_SGEP_GAZPROM
;;;9085   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9086   	#endif		
;;;9087   		{
;;;9088   		if(sk_cnt[i]<10)
0052ec  4bd2              LDR      r3,|L1.22072|
;;;9089   			{
;;;9090   			sk_cnt[i]++;
;;;9091   			if(sk_cnt[i]>=10)
;;;9092   				{
;;;9093   				sk_stat[i]=ssON;
0052ee  4dc9              LDR      r5,|L1.22036|
0052f0  f04f0a01          MOV      r10,#1
;;;9094   				}
;;;9095   			}
;;;9096   		else 
;;;9097   			{
;;;9098   			sk_cnt[i]=10;
0052f4  f04f0b0a          MOV      r11,#0xa
0052f8  4606              MOV      r6,r0                 ;9049
0052fa  f9b24000          LDRSH    r4,[r2,#0]            ;9049
0052fe  e025              B        |L1.21324|
                  |L1.21248|
005300  49cf              LDR      r1,|L1.22080|
005302  4fd0              LDR      r7,|L1.22084|
005304  5c09              LDRB     r1,[r1,r0]            ;9076
005306  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;9076
00530a  f5b16ffa          CMP      r1,#0x7d0             ;9076
00530e  da0e              BGE      |L1.21294|
005310  5619              LDRSB    r1,[r3,r0]            ;9088
005312  290a              CMP      r1,#0xa               ;9088
005314  da08              BGE      |L1.21288|
005316  f1010101          ADD      r1,r1,#1              ;9090
00531a  b249              SXTB     r1,r1                 ;9090
00531c  5419              STRB     r1,[r3,r0]            ;9090
00531e  290a              CMP      r1,#0xa               ;9091
005320  db11              BLT      |L1.21318|
005322  f805a000          STRB     r10,[r5,r0]           ;9093
005326  e00e              B        |L1.21318|
                  |L1.21288|
005328  f803b000          STRB     r11,[r3,r0]
00532c  e00b              B        |L1.21318|
                  |L1.21294|
;;;9099   			}
;;;9100                  
;;;9101   		}
;;;9102   	else
;;;9103   		{
;;;9104   		if(sk_cnt[i]>0)
00532e  5619              LDRSB    r1,[r3,r0]
005330  2900              CMP      r1,#0
005332  dd07              BLE      |L1.21316|
;;;9105   			{
;;;9106   			sk_cnt[i]--;
005334  f1a10101          SUB      r1,r1,#1
005338  b249              SXTB     r1,r1
00533a  5419              STRB     r1,[r3,r0]
;;;9107   			if(sk_cnt[i]<=0)
00533c  2900              CMP      r1,#0
00533e  dc02              BGT      |L1.21318|
;;;9108   				{
;;;9109   				sk_stat[i]=ssOFF;
005340  542e              STRB     r6,[r5,r0]
005342  e000              B        |L1.21318|
                  |L1.21316|
;;;9110   				}
;;;9111   			}
;;;9112   		else 
;;;9113   			{
;;;9114   			sk_cnt[i]=0;
005344  541e              STRB     r6,[r3,r0]
                  |L1.21318|
005346  f1000001          ADD      r0,r0,#1              ;9049
00534a  b2c0              UXTB     r0,r0                 ;9049
                  |L1.21324|
00534c  42a0              CMP      r0,r4                 ;9049
00534e  dbd7              BLT      |L1.21248|
;;;9115   			}
;;;9116   		}
;;;9117   	}
;;;9118   
;;;9119   for(i=0;i<NUMSK;i++)
005350  f04f0400          MOV      r4,#0
;;;9120   	{
;;;9121   	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;9122   		{
;;;9123   		if(sk_av_cnt[i]<10)
005354  f8df92f0          LDR      r9,|L1.22088|
;;;9124   			{
;;;9125   			sk_av_cnt[i]++;
;;;9126   			if(sk_av_cnt[i]>=10)
;;;9127   				{
;;;9128   				sk_av_stat[i]=sasON;
005358  4fbc              LDR      r7,|L1.22092|
;;;9129   				}
;;;9130   			}
;;;9131   		else 
;;;9132   			{
;;;9133   			sk_av_cnt[i]=10;
;;;9134   			}
;;;9135   		}
;;;9136   	else
;;;9137   		{
;;;9138   		if(sk_av_cnt[i]>=0)
;;;9139   			{
;;;9140   			sk_av_cnt[i]--;
;;;9141   			if(sk_av_cnt[i]<=0)
;;;9142   				{
;;;9143   				sk_av_stat[i]=sasOFF;
;;;9144   				}
;;;9145   			}
;;;9146   		else 
;;;9147   			{
;;;9148   			sk_av_cnt[i]=0;
;;;9149   			}
;;;9150   		}
;;;9151   
;;;9152   #ifndef UKU_KONTUR
;;;9153   	if(sk_av_stat_old[i]!=sk_av_stat[i])
00535a  f8df82f4          LDR      r8,|L1.22096|
00535e  e083              B        |L1.21608|
                  |L1.21344|
005360  48bc              LDR      r0,|L1.22100|
005362  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;9121
005366  b910              CBNZ     r0,|L1.21358|
005368  5d29              LDRB     r1,[r5,r4]            ;9121
00536a  2901              CMP      r1,#1                 ;9121
00536c  d00f              BEQ      |L1.21390|
                  |L1.21358|
00536e  b108              CBZ      r0,|L1.21364|
005370  5d28              LDRB     r0,[r5,r4]            ;9121
005372  b160              CBZ      r0,|L1.21390|
                  |L1.21364|
005374  f9190004          LDRSB    r0,[r9,r4]            ;9138
005378  2800              CMP      r0,#0                 ;9138
00537a  db19              BLT      |L1.21424|
00537c  f1a00001          SUB      r0,r0,#1              ;9140
005380  b240              SXTB     r0,r0                 ;9140
005382  f8090004          STRB     r0,[r9,r4]            ;9140
005386  2800              CMP      r0,#0                 ;9141
005388  dc14              BGT      |L1.21428|
00538a  553e              STRB     r6,[r7,r4]            ;9143
00538c  e012              B        |L1.21428|
                  |L1.21390|
00538e  f9190004          LDRSB    r0,[r9,r4]            ;9123
005392  280a              CMP      r0,#0xa               ;9123
005394  da09              BGE      |L1.21418|
005396  f1000001          ADD      r0,r0,#1              ;9125
00539a  b240              SXTB     r0,r0                 ;9125
00539c  f8090004          STRB     r0,[r9,r4]            ;9125
0053a0  280a              CMP      r0,#0xa               ;9126
0053a2  db07              BLT      |L1.21428|
0053a4  f807a004          STRB     r10,[r7,r4]           ;9128
0053a8  e004              B        |L1.21428|
                  |L1.21418|
0053aa  f809b004          STRB     r11,[r9,r4]           ;9133
0053ae  e001              B        |L1.21428|
                  |L1.21424|
0053b0  f8096004          STRB     r6,[r9,r4]            ;9148
                  |L1.21428|
0053b4  f8181004          LDRB     r1,[r8,r4]
0053b8  5d38              LDRB     r0,[r7,r4]
0053ba  4281              CMP      r1,r0
0053bc  d04e              BEQ      |L1.21596|
;;;9154   		{
;;;9155   		plazma_sk++;
0053be  4a98              LDR      r2,|L1.22048|
0053c0  1e92              SUBS     r2,r2,#2
0053c2  8811              LDRH     r1,[r2,#0]  ; plazma_sk
0053c4  f1010101          ADD      r1,r1,#1
0053c8  8011              STRH     r1,[r2,#0]
;;;9156   		if(sk_av_stat[i]==sasON)
0053ca  2801              CMP      r0,#1
0053cc  d007              BEQ      |L1.21470|
;;;9157   			{
;;;9158   			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;9159   			else if(i==1)
;;;9160   				{
;;;9161   				#ifndef UKU_TELEKORE2017
;;;9162   				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;9163   				#endif
;;;9164   				#ifdef UKU_TELEKORE2017
;;;9165   				snmp_trap_send("Door open",15,2,1);
;;;9166   				#endif
;;;9167   				}
;;;9168   			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;9169   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9170   			}
;;;9171   		else 
;;;9172   			{
;;;9173   			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
0053ce  b354              CBZ      r4,|L1.21542|
;;;9174   			else if(i==1)
0053d0  2c01              CMP      r4,#1
0053d2  d02f              BEQ      |L1.21556|
;;;9175   				{
;;;9176   				#ifndef UKU_TELEKORE2017
;;;9177   				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;9178   				#endif
;;;9179   				#ifdef UKU_TELEKORE2017
;;;9180   				snmp_trap_send("Door open clear",15,2,0);
;;;9181   				#endif
;;;9182   				}
;;;9183   			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
0053d4  2c02              CMP      r4,#2
0053d6  d034              BEQ      |L1.21570|
;;;9184   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
0053d8  2c03              CMP      r4,#3
0053da  d039              BEQ      |L1.21584|
0053dc  e03e              B        |L1.21596|
                  |L1.21470|
0053de  b134              CBZ      r4,|L1.21486|
0053e0  2c01              CMP      r4,#1                 ;9159
0053e2  d00b              BEQ      |L1.21500|
0053e4  2c02              CMP      r4,#2                 ;9168
0053e6  d010              BEQ      |L1.21514|
0053e8  2c03              CMP      r4,#3                 ;9169
0053ea  d015              BEQ      |L1.21528|
0053ec  e036              B        |L1.21596|
                  |L1.21486|
0053ee  2301              MOVS     r3,#1                 ;9158
0053f0  461a              MOV      r2,r3                 ;9158
0053f2  210f              MOVS     r1,#0xf               ;9158
0053f4  a098              ADR      r0,|L1.22104|
0053f6  f7fffffe          BL       snmp_trap_send
0053fa  e02f              B        |L1.21596|
                  |L1.21500|
0053fc  2301              MOVS     r3,#1                 ;9162
0053fe  2202              MOVS     r2,#2                 ;9162
005400  210f              MOVS     r1,#0xf               ;9162
005402  a098              ADR      r0,|L1.22116|
005404  f7fffffe          BL       snmp_trap_send
005408  e028              B        |L1.21596|
                  |L1.21514|
00540a  2301              MOVS     r3,#1                 ;9168
00540c  2203              MOVS     r2,#3                 ;9168
00540e  210f              MOVS     r1,#0xf               ;9168
005410  a097              ADR      r0,|L1.22128|
005412  f7fffffe          BL       snmp_trap_send
005416  e021              B        |L1.21596|
                  |L1.21528|
005418  2301              MOVS     r3,#1                 ;9169
00541a  2204              MOVS     r2,#4                 ;9169
00541c  210f              MOVS     r1,#0xf               ;9169
00541e  a097              ADR      r0,|L1.22140|
005420  f7fffffe          BL       snmp_trap_send
005424  e01a              B        |L1.21596|
                  |L1.21542|
005426  2300              MOVS     r3,#0                 ;9173
005428  2201              MOVS     r2,#1                 ;9173
00542a  210f              MOVS     r1,#0xf               ;9173
00542c  a096              ADR      r0,|L1.22152|
00542e  f7fffffe          BL       snmp_trap_send
005432  e013              B        |L1.21596|
                  |L1.21556|
005434  2300              MOVS     r3,#0                 ;9177
005436  2202              MOVS     r2,#2                 ;9177
005438  210f              MOVS     r1,#0xf               ;9177
00543a  a098              ADR      r0,|L1.22172|
00543c  f7fffffe          BL       snmp_trap_send
005440  e00c              B        |L1.21596|
                  |L1.21570|
005442  2300              MOVS     r3,#0                 ;9183
005444  2203              MOVS     r2,#3                 ;9183
005446  210f              MOVS     r1,#0xf               ;9183
005448  a099              ADR      r0,|L1.22192|
00544a  f7fffffe          BL       snmp_trap_send
00544e  e005              B        |L1.21596|
                  |L1.21584|
005450  2300              MOVS     r3,#0
005452  2204              MOVS     r2,#4
005454  210f              MOVS     r1,#0xf
005456  a09b              ADR      r0,|L1.22212|
005458  f7fffffe          BL       snmp_trap_send
                  |L1.21596|
;;;9185   			}
;;;9186   	 	}
;;;9187   #endif
;;;9188   
;;;9189   #ifdef UKU_KONTUR
;;;9190   	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;9191   		{
;;;9192   		plazma_sk++;
;;;9193   		if(sk_av_stat[i]==sasON)
;;;9194   			{
;;;9195   			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;9196   			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;9197   			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;9198   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9199   			}
;;;9200   		else 
;;;9201   			{
;;;9202   			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;9203   			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;9204   			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;9205   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;9206   			}
;;;9207   	 	}
;;;9208   #endif
;;;9209   	sk_av_stat_old[i]=sk_av_stat[i];
00545c  5d38              LDRB     r0,[r7,r4]
00545e  f8080004          STRB     r0,[r8,r4]
005462  f1040401          ADD      r4,r4,#1              ;9119
005466  b2e4              UXTB     r4,r4                 ;9119
                  |L1.21608|
005468  4874              LDR      r0,|L1.22076|
00546a  f9b00000          LDRSH    r0,[r0,#0]            ;9119  ; NUMSK
00546e  4284              CMP      r4,r0                 ;9119
005470  f6ffaf76          BLT      |L1.21344|
;;;9210   	}
;;;9211   }
005474  e733              B        |L1.21214|
;;;9212   
                          ENDP

                  zar_superviser_start PROC
;;;9249   //-----------------------------------------------
;;;9250   void zar_superviser_start(void)
005476  4a98              LDR      r2,|L1.22232|
;;;9251   {
;;;9252   sign_U[0]=1;
005478  f04f0001          MOV      r0,#1
00547c  7010              STRB     r0,[r2,#0]
;;;9253   sign_I[0]=1;
00547e  4997              LDR      r1,|L1.22236|
005480  7008              STRB     r0,[r1,#0]
;;;9254   sign_U[1]=1;
005482  7050              STRB     r0,[r2,#1]
;;;9255   sign_I[1]=1;
005484  7048              STRB     r0,[r1,#1]
;;;9256   
;;;9257   }
005486  4770              BX       lr
;;;9258   
                          ENDP

                  zar_superviser_drv PROC
;;;9214   //-----------------------------------------------
;;;9215   void zar_superviser_drv(void)
005488  e92d5ff0          PUSH     {r4-r12,lr}
;;;9216   {
;;;9217   
;;;9218   if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
00548c  4895              LDR      r0,|L1.22244|
00548e  f8df9258          LDR      r9,|L1.22248|
005492  f8df824c          LDR      r8,|L1.22240|
005496  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
00549a  f9b90000          LDRSH    r0,[r9,#0]
00549e  4c60              LDR      r4,|L1.22048|
0054a0  ebc01100          RSB      r1,r0,r0,LSL #4
0054a4  3c42              SUBS     r4,r4,#0x42
0054a6  f9b87002          LDRSH    r7,[r8,#2]  ; bat
0054aa  f06f0a1d          MVN      r10,#0x1d
0054ae  f06f0b95          MVN      r11,#0x95
0054b2  2500              MOVS     r5,#0
0054b4  4e88              LDR      r6,|L1.22232|
0054b6  f9b4004c          LDRSH    r0,[r4,#0x4c]
0054ba  eb0a0281          ADD      r2,r10,r1,LSL #2
0054be  eb0b0381          ADD      r3,r11,r1,LSL #2
0054c2  4567              CMP      r7,r12
0054c4  dc05              BGT      |L1.21714|
0054c6  f8dfc224          LDR      r12,|L1.22252|
0054ca  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
0054ce  4567              CMP      r7,r12
0054d0  da04              BGE      |L1.21724|
                  |L1.21714|
0054d2  4282              CMP      r2,r0
0054d4  dd02              BLE      |L1.21724|
0054d6  4283              CMP      r3,r0
0054d8  da00              BGE      |L1.21724|
0054da  7035              STRB     r5,[r6,#0]
                  |L1.21724|
;;;9219   
;;;9220   if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
0054dc  4f84              LDR      r7,|L1.22256|
0054de  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
0054e2  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0054e6  4f7d              LDR      r7,|L1.22236|
0054e8  ebbc0f4e          CMP      r12,lr,LSL #1
0054ec  dc04              BGT      |L1.21752|
0054ee  f1ce0e00          RSB      lr,lr,#0
0054f2  ebbc0f4e          CMP      r12,lr,LSL #1
0054f6  da04              BGE      |L1.21762|
                  |L1.21752|
0054f8  4282              CMP      r2,r0
0054fa  dd02              BLE      |L1.21762|
0054fc  4283              CMP      r3,r0
0054fe  da00              BGE      |L1.21762|
005500  703d              STRB     r5,[r7,#0]
                  |L1.21762|
;;;9221   																 
;;;9222   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
005502  f06f0209          MVN      r2,#9
005506  eb020181          ADD      r1,r2,r1,LSL #2
00550a  4281              CMP      r1,r0
00550c  d120              BNE      |L1.21840|
00550e  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
005510  b9f0              CBNZ     r0,|L1.21840|
;;;9223   	{
;;;9224   	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
005512  7830              LDRB     r0,[r6,#0]  ; sign_U
005514  2801              CMP      r0,#1
005516  d11b              BNE      |L1.21840|
005518  7838              LDRB     r0,[r7,#0]  ; sign_I
00551a  2801              CMP      r0,#1
00551c  d118              BNE      |L1.21840|
00551e  f44f70ef          MOV      r0,#0x1de
005522  f7fffffe          BL       lc640_read_int
005526  4973              LDR      r1,|L1.22260|
005528  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
00552c  4288              CMP      r0,r1
00552e  d00f              BEQ      |L1.21840|
005530  4871              LDR      r0,|L1.22264|
005532  8800              LDRH     r0,[r0,#0]  ; NUMBAT
005534  b160              CBZ      r0,|L1.21840|
005536  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
00553a  07c0              LSLS     r0,r0,#31
00553c  d108              BNE      |L1.21840|
;;;9225   		{
;;;9226   		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
00553e  f44f70ef          MOV      r0,#0x1de
005542  f7fffffe          BL       lc640_write_int
;;;9227   		superviser_cnt++;
005546  486d              LDR      r0,|L1.22268|
005548  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
00554a  f1010101          ADD      r1,r1,#1
00554e  7001              STRB     r1,[r0,#0]
                  |L1.21840|
;;;9228   		}
;;;9229   	
;;;9230   	}
;;;9231   
;;;9232   if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
005550  4864              LDR      r0,|L1.22244|
005552  f9b81002          LDRSH    r1,[r8,#2]  ; bat
005556  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
00555a  4281              CMP      r1,r0
00555c  dc06              BGT      |L1.21868|
00555e  4863              LDR      r0,|L1.22252|
005560  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
005564  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
005568  4281              CMP      r1,r0
00556a  da0e              BGE      |L1.21898|
                  |L1.21868|
00556c  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
005570  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
005574  ebc01000          RSB      r0,r0,r0,LSL #4
005578  eb0a0280          ADD      r2,r10,r0,LSL #2
00557c  428a              CMP      r2,r1
00557e  dd04              BLE      |L1.21898|
005580  eb0b0080          ADD      r0,r11,r0,LSL #2
005584  4288              CMP      r0,r1
005586  da00              BGE      |L1.21898|
005588  7075              STRB     r5,[r6,#1]
                  |L1.21898|
;;;9233   
;;;9234   if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
00558a  4959              LDR      r1,|L1.22256|
00558c  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
005590  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
005594  ebb00f41          CMP      r0,r1,LSL #1
005598  dc03              BGT      |L1.21922|
00559a  4249              RSBS     r1,r1,#0
00559c  ebb00f41          CMP      r0,r1,LSL #1
0055a0  da0e              BGE      |L1.21952|
                  |L1.21922|
0055a2  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0055a6  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
0055aa  ebc01000          RSB      r0,r0,r0,LSL #4
0055ae  eb0a0280          ADD      r2,r10,r0,LSL #2
0055b2  428a              CMP      r2,r1
0055b4  dd04              BLE      |L1.21952|
0055b6  eb0b0080          ADD      r0,r11,r0,LSL #2
0055ba  4288              CMP      r0,r1
0055bc  da00              BGE      |L1.21952|
0055be  707d              STRB     r5,[r7,#1]
                  |L1.21952|
;;;9235   																 
;;;9236   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0055c0  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0055c4  ebc01100          RSB      r1,r0,r0,LSL #4
0055c8  f06f0009          MVN      r0,#9
0055cc  eb000081          ADD      r0,r0,r1,LSL #2
0055d0  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
0055d4  4288              CMP      r0,r1
0055d6  d11a              BNE      |L1.22030|
0055d8  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
0055da  b9c0              CBNZ     r0,|L1.22030|
;;;9237   	{
;;;9238   	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0055dc  7870              LDRB     r0,[r6,#1]  ; sign_U
0055de  2801              CMP      r0,#1
0055e0  d115              BNE      |L1.22030|
0055e2  7878              LDRB     r0,[r7,#1]  ; sign_I
0055e4  2801              CMP      r0,#1
0055e6  d112              BNE      |L1.22030|
0055e8  f44f75fe          MOV      r5,#0x1fc
0055ec  4628              MOV      r0,r5
0055ee  f7fffffe          BL       lc640_read_int
0055f2  4940              LDR      r1,|L1.22260|
0055f4  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
0055f8  4288              CMP      r0,r1
0055fa  d008              BEQ      |L1.22030|
0055fc  483e              LDR      r0,|L1.22264|
0055fe  8800              LDRH     r0,[r0,#0]  ; NUMBAT
005600  2802              CMP      r0,#2
005602  d104              BNE      |L1.22030|
005604  f8980089          LDRB     r0,[r8,#0x89]  ; bat
005608  07c0              LSLS     r0,r0,#31
00560a  d100              BNE      |L1.22030|
;;;9239   		{
;;;9240   		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
00560c  e078              B        |L1.22272|
                  |L1.22030|
00560e  e07f              B        |L1.22288|
                  |L1.22032|
                          DCD      hv_vz_stat
                  |L1.22036|
                          DCD      sk_stat
                  |L1.22040|
                          DCD      sk_stat_old
                  |L1.22044|
                          DCD      VZ_KIND
                  |L1.22048|
                          DCD      ||area_number.25||+0x42
                  |L1.22052|
                          DCD      ICA_EN
                  |L1.22056|
                          DCD      ica_cntrl_hndl
                  |L1.22060|
                          DCD      ica_u_necc
                  |L1.22064|
                          DCD      NUMIST
                  |L1.22068|
                          DCD      PWM_START
                  |L1.22072|
                          DCD      sk_cnt
                  |L1.22076|
                          DCD      NUMSK
                  |L1.22080|
                          DCD      ||area_number.19||
                  |L1.22084|
                          DCD      ||.bss||+0x40c
                  |L1.22088|
                          DCD      sk_av_cnt
                  |L1.22092|
                          DCD      sk_av_stat
                  |L1.22096|
                          DCD      sk_av_stat_old
                  |L1.22100|
                          DCD      SK_SIGN
                  |L1.22104|
005658  534b2023          DCB      "SK #1 Alarm",0
00565c  3120416c
005660  61726d00
                  |L1.22116|
005664  534b2023          DCB      "SK #2 Alarm",0
005668  3220416c
00566c  61726d00
                  |L1.22128|
005670  534b2023          DCB      "SK #3 Alarm",0
005674  3320416c
005678  61726d00
                  |L1.22140|
00567c  534b2023          DCB      "SK #4 Alarm",0
005680  3420416c
005684  61726d00
                  |L1.22152|
005688  534b2023          DCB      "SK #1 Alarm is off",0
00568c  3120416c
005690  61726d20
005694  6973206f
005698  666600  
00569b  00                DCB      0
                  |L1.22172|
00569c  534b2023          DCB      "SK #2 Alarm is off",0
0056a0  3220416c
0056a4  61726d20
0056a8  6973206f
0056ac  666600  
0056af  00                DCB      0
                  |L1.22192|
0056b0  534b2023          DCB      "SK #3 Alarm is off",0
0056b4  3320416c
0056b8  61726d20
0056bc  6973206f
0056c0  666600  
0056c3  00                DCB      0
                  |L1.22212|
0056c4  534b2023          DCB      "SK #4 Alarm is off",0
0056c8  3420416c
0056cc  61726d20
0056d0  6973206f
0056d4  666600  
0056d7  00                DCB      0
                  |L1.22232|
                          DCD      sign_U
                  |L1.22236|
                          DCD      sign_I
                  |L1.22240|
                          DCD      bat
                  |L1.22244|
                          DCD      u_necc_up
                  |L1.22248|
                          DCD      TBAT
                  |L1.22252|
                          DCD      u_necc_dn
                  |L1.22256|
                          DCD      IKB
                  |L1.22260|
                          DCD      BAT_C_REAL
                  |L1.22264|
                          DCD      NUMBAT
                  |L1.22268|
                          DCD      superviser_cnt
                  |L1.22272|
005700  4628              MOV      r0,r5
005702  f7fffffe          BL       lc640_write_int
;;;9241   		superviser_cnt++;
005706  48ff              LDR      r0,|L1.23300|
005708  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
00570a  f1010101          ADD      r1,r1,#1
00570e  7001              STRB     r1,[r0,#0]
                  |L1.22288|
;;;9242   		}
;;;9243   	
;;;9244   	}
;;;9245   
;;;9246   if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
005710  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
005714  f06f0101          MVN      r1,#1
005718  ebc01000          RSB      r0,r0,r0,LSL #4
00571c  eb010080          ADD      r0,r1,r0,LSL #2
005720  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
005724  4288              CMP      r0,r1
005726  d102              BNE      |L1.22318|
005728  e8bd5ff0          POP      {r4-r12,lr}
00572c  e7fe              B        zar_superviser_start
                  |L1.22318|
;;;9247   }
00572e  e5d6              B        |L1.21214|
;;;9248   
                          ENDP

                  npn_hndl PROC
;;;9259   //-----------------------------------------------
;;;9260   void npn_hndl(void)
005730  e92d03f0          PUSH     {r4-r9}
;;;9261   {
;;;9262   if(NPN_OUT!=npnoOFF)
005734  48f4              LDR      r0,|L1.23304|
;;;9263   	{
;;;9264   /*	if(NPN_SIGN==npnsAVNET)
;;;9265   		{
;;;9266   		if(net_av==1)
;;;9267   			{
;;;9268   			if(npn_tz_cnt<TZNPN)
;;;9269   				{
;;;9270   				npn_tz_cnt++;
;;;9271   				if(npn_tz_cnt==TZNPN)
;;;9272   					{
;;;9273   					npn_stat=npnsOFF;
;;;9274   					}
;;;9275   				}
;;;9276   			}
;;;9277   		else
;;;9278   			{
;;;9279   			if(npn_tz_cnt)
;;;9280   				{
;;;9281   				npn_tz_cnt--;
;;;9282   				if(npn_tz_cnt==0)
;;;9283   					{
;;;9284   					npn_stat=npnsON;
;;;9285   					}
;;;9286   				}
;;;9287   			}
;;;9288   		}*/
;;;9289   /*	if(NPN_SIGN==npnsULOAD)
;;;9290   		{
;;;9291   		if(load_U<UONPN)
;;;9292   			{
;;;9293   			if(npn_tz_cnt<TZNPN)
;;;9294   				{
;;;9295   				npn_tz_cnt++;
;;;9296   				if(npn_tz_cnt==TZNPN)
;;;9297   					{
;;;9298   					npn_stat=npnsOFF;
;;;9299   					}
;;;9300   				}
;;;9301   			}
;;;9302   		else if(load_U>UVNPN)
;;;9303   			{
;;;9304   			if(npn_tz_cnt)
;;;9305   				{
;;;9306   				npn_tz_cnt--;
;;;9307   				if(npn_tz_cnt==0)
;;;9308   					{
;;;9309   					npn_stat=npnsON;
;;;9310   					}
;;;9311   				}
;;;9312   			}
;;;9313   		}*/
;;;9314   
;;;9315   	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;9316   		{
;;;9317   		if(npn_tz_cnt<TZNPN)
005736  4ff5              LDR      r7,|L1.23308|
;;;9318   			{
;;;9319   			npn_tz_cnt++;
;;;9320   			if(npn_tz_cnt==TZNPN)
;;;9321   				{
;;;9322   				npn_stat=npnsOFF;
005738  4ef5              LDR      r6,|L1.23312|
00573a  7800              LDRB     r0,[r0,#0]            ;9262  ; NPN_OUT
00573c  f04f0c00          MOV      r12,#0                ;9262
;;;9323   				}
;;;9324   			}
;;;9325   		}
;;;9326   	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;9327   		{
;;;9328   		if(npn_tz_cnt)
;;;9329   			{
;;;9330   			npn_tz_cnt--;
;;;9331   			if(npn_tz_cnt==0)
;;;9332   				{
;;;9333   				npn_stat=npnsON;
005740  f04f0801          MOV      r8,#1
005744  b3e8              CBZ      r0,|L1.22466|
005746  48f3              LDR      r0,|L1.23316|
005748  4639              MOV      r1,r7                 ;9317
00574a  f9b05000          LDRSH    r5,[r0,#0]            ;9315  ; load_U
00574e  48f2              LDR      r0,|L1.23320|
005750  f9b11000          LDRSH    r1,[r1,#0]            ;9317
005754  f9b09000          LDRSH    r9,[r0,#0]            ;9315  ; UONPN
005758  48f0              LDR      r0,|L1.23324|
00575a  454d              CMP      r5,r9                 ;9315
00575c  f9b02000          LDRSH    r2,[r0,#0]            ;9315
005760  48ef              LDR      r0,|L1.23328|
005762  f9b03000          LDRSH    r3,[r0,#0]            ;9315
005766  48ef              LDR      r0,|L1.23332|
005768  f9b04000          LDRSH    r4,[r0,#0]            ;9315
00576c  48ee              LDR      r0,|L1.23336|
00576e  f9b00000          LDRSH    r0,[r0,#0]            ;9315
005772  da13              BGE      |L1.22428|
005774  4282              CMP      r2,r0                 ;9315
005776  db03              BLT      |L1.22400|
005778  4283              CMP      r3,r0                 ;9315
00577a  db01              BLT      |L1.22400|
00577c  4284              CMP      r4,r0                 ;9315
00577e  da0d              BGE      |L1.22428|
                  |L1.22400|
005780  48ea              LDR      r0,|L1.23340|
005782  f9b02000          LDRSH    r2,[r0,#0]            ;9317  ; TZNPN
005786  4291              CMP      r1,r2                 ;9317
005788  da23              BGE      |L1.22482|
00578a  f1010101          ADD      r1,r1,#1              ;9319
00578e  b208              SXTH     r0,r1                 ;9319
005790  8038              STRH     r0,[r7,#0]            ;9319
005792  4290              CMP      r0,r2                 ;9320
005794  d11d              BNE      |L1.22482|
005796  f886c000          STRB     r12,[r6,#0]           ;9322
00579a  e01a              B        |L1.22482|
                  |L1.22428|
00579c  f8dfc390          LDR      r12,|L1.23344|
0057a0  f9bcc000          LDRSH    r12,[r12,#0]          ;9326  ; UVNPN
0057a4  4565              CMP      r5,r12                ;9326
0057a6  dd14              BLE      |L1.22482|
0057a8  4282              CMP      r2,r0                 ;9326
0057aa  dd12              BLE      |L1.22482|
0057ac  4283              CMP      r3,r0                 ;9326
0057ae  dd10              BLE      |L1.22482|
0057b0  4284              CMP      r4,r0                 ;9326
0057b2  dd0e              BLE      |L1.22482|
0057b4  b169              CBZ      r1,|L1.22482|
0057b6  f1a10101          SUB      r1,r1,#1              ;9330
0057ba  b208              SXTH     r0,r1                 ;9330
0057bc  8038              STRH     r0,[r7,#0]            ;9330
0057be  b940              CBNZ     r0,|L1.22482|
0057c0  e000              B        |L1.22468|
                  |L1.22466|
0057c2  e002              B        |L1.22474|
                  |L1.22468|
0057c4  f8868000          STRB     r8,[r6,#0]
0057c8  e003              B        |L1.22482|
                  |L1.22474|
;;;9334   				}
;;;9335   			}
;;;9336   		}
;;;9337   	}
;;;9338   else
;;;9339   	{
;;;9340   	npn_tz_cnt=0;
0057ca  f8a7c000          STRH     r12,[r7,#0]
;;;9341   	npn_stat=npnsON;
0057ce  f8868000          STRB     r8,[r6,#0]
                  |L1.22482|
;;;9342   	}
;;;9343   
;;;9344   if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0057d2  7830              LDRB     r0,[r6,#0]  ; npn_stat
0057d4  2800              CMP      r0,#0
0057d6  d107              BNE      |L1.22504|
0057d8  e8bd03f0          POP      {r4-r9}
0057dc  230f              MOVS     r3,#0xf
0057de  2201              MOVS     r2,#1
0057e0  216e              MOVS     r1,#0x6e
0057e2  20d2              MOVS     r0,#0xd2
0057e4  f7ffbffe          B.W      mess_send
                  |L1.22504|
;;;9345   
;;;9346   
;;;9347   }
0057e8  e8bd03f0          POP      {r4-r9}
0057ec  4770              BX       lr
;;;9348   
                          ENDP

                  loadoff_hndl PROC
;;;9350   //-----------------------------------------------
;;;9351   void loadoff_hndl(void)
0057ee  b5f0              PUSH     {r4-r7,lr}
;;;9352   {
;;;9353   if((load_U>UONPN)||(load_U<UVNPN))
0057f0  48c8              LDR      r0,|L1.23316|
;;;9354   	{
;;;9355   	if(load_off_cnt<TZNPN)
0057f2  4dd0              LDR      r5,|L1.23348|
;;;9356   		{
;;;9357   		load_off_cnt++;
;;;9358   		if(load_off_cnt>=TZNPN)
;;;9359   			{
;;;9360   			load_off_stat=npnsOFF;
0057f4  2700              MOVS     r7,#0
0057f6  f9b01000          LDRSH    r1,[r0,#0]            ;9353  ; load_U
0057fa  48c7              LDR      r0,|L1.23320|
0057fc  4ece              LDR      r6,|L1.23352|
0057fe  f9b02000          LDRSH    r2,[r0,#0]            ;9353  ; UONPN
005802  f9b50000          LDRSH    r0,[r5,#0]            ;9355
005806  4291              CMP      r1,r2                 ;9353
005808  dc04              BGT      |L1.22548|
00580a  4bc9              LDR      r3,|L1.23344|
00580c  f9b33000          LDRSH    r3,[r3,#0]            ;9353  ; UVNPN
005810  4299              CMP      r1,r3                 ;9353
005812  da0d              BGE      |L1.22576|
                  |L1.22548|
005814  49c5              LDR      r1,|L1.23340|
005816  f9b11000          LDRSH    r1,[r1,#0]            ;9355  ; TZNPN
00581a  4288              CMP      r0,r1                 ;9355
00581c  da1c              BGE      |L1.22616|
00581e  f1000001          ADD      r0,r0,#1              ;9357
005822  b200              SXTH     r0,r0                 ;9357
005824  8028              STRH     r0,[r5,#0]            ;9357
005826  4288              CMP      r0,r1                 ;9358
005828  db16              BLT      |L1.22616|
00582a  7037              STRB     r7,[r6,#0]
;;;9361   			load_off_cnt=TZNPN;
00582c  8029              STRH     r1,[r5,#0]
00582e  e013              B        |L1.22616|
                  |L1.22576|
;;;9362   			}
;;;9363   		}
;;;9364   	}
;;;9365   else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
005830  4cc2              LDR      r4,|L1.23356|
005832  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
005836  4423              ADD      r3,r3,r4
005838  428b              CMP      r3,r1
00583a  da0d              BGE      |L1.22616|
00583c  1b12              SUBS     r2,r2,r4
00583e  428a              CMP      r2,r1
005840  dd0a              BLE      |L1.22616|
;;;9366   	{
;;;9367   	if(load_off_cnt)
005842  b148              CBZ      r0,|L1.22616|
;;;9368   		{
;;;9369   		load_off_cnt--;
005844  f1a00001          SUB      r0,r0,#1
005848  b200              SXTH     r0,r0
00584a  8028              STRH     r0,[r5,#0]
;;;9370   		if(load_off_cnt<=0)
00584c  2800              CMP      r0,#0
00584e  dc03              BGT      |L1.22616|
;;;9371   			{
;;;9372   			load_off_stat=npnsON;
005850  f04f0001          MOV      r0,#1
005854  7030              STRB     r0,[r6,#0]
;;;9373   			load_off_cnt=0;
005856  802f              STRH     r7,[r5,#0]
                  |L1.22616|
;;;9374   			}
;;;9375   		}
;;;9376   	}
;;;9377   
;;;9378   
;;;9379   if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
005858  7830              LDRB     r0,[r6,#0]  ; load_off_stat
00585a  2800              CMP      r0,#0
00585c  d103              BNE      |L1.22630|
00585e  49b8              LDR      r1,|L1.23360|
005860  f04f000a          MOV      r0,#0xa
005864  7008              STRB     r0,[r1,#0]
                  |L1.22630|
;;;9380   
;;;9381   
;;;9382   }
005866  bdf0              POP      {r4-r7,pc}
;;;9383   
                          ENDP

                  speedChargeStartStop PROC
;;;9571   //-----------------------------------------------
;;;9572   void speedChargeStartStop(void)
005868  b508              PUSH     {r3,lr}
;;;9573   {
;;;9574   /*if(speedChIsOn)
;;;9575   	{
;;;9576   	speedChIsOn=0;
;;;9577   	}
;;;9578   
;;;9579   else
;;;9580   	{
;;;9581   	if(speedChrgBlckStat==0)
;;;9582   		{
;;;9583   		speedChIsOn=1;
;;;9584   		speedChTimeCnt=0;
;;;9585   		}
;;;9586   	else
;;;9587   		{
;;;9588   		show_mess(	"     Ускоренный     ",
;;;9589   	          		"       заряд        ",
;;;9590   	          		"    заблокирован!   ",
;;;9591   	          		"                    ",2000);	 
;;;9592   		}
;;;9593   	}*/
;;;9594   
;;;9595   if(sp_ch_stat!=scsOFF)
00586a  48b6              LDR      r0,|L1.23364|
00586c  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
00586e  b141              CBZ      r1,|L1.22658|
;;;9596   	{
;;;9597   	sp_ch_stat=scsOFF;
005870  f04f0100          MOV      r1,#0
005874  7001              STRB     r1,[r0,#0]
;;;9598   	speedz_mem_hndl(10);
005876  e8bd4008          POP      {r3,lr}
00587a  f04f000a          MOV      r0,#0xa
00587e  f7ffbffe          B.W      speedz_mem_hndl
                  |L1.22658|
;;;9599   	}
;;;9600   
;;;9601   else
;;;9602   	{
;;;9603   	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
005882  49b1              LDR      r1,|L1.23368|
005884  f9b12000          LDRSH    r2,[r1,#0]  ; speedChrgBlckStat
005888  49b0              LDR      r1,|L1.23372|
00588a  7f8b              LDRB     r3,[r1,#0x1e]  ; spc_stat
00588c  431a              ORRS     r2,r2,r3
00588e  784b              LDRB     r3,[r1,#1]  ; vz1_stat
005890  78c9              LDRB     r1,[r1,#3]  ; vz2_stat
005892  431a              ORRS     r2,r2,r3
005894  430a              ORRS     r2,r2,r1
005896  d009              BEQ      |L1.22700|
;;;9604   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9605   		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;9606   		#endif
;;;9607   		)
;;;9608   		{
;;;9609   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9610   		sp_ch_stat=scsSTEP1;
;;;9611   		#else
;;;9612   		sp_ch_stat=scsWRK;
;;;9613   		#endif
;;;9614   		speedz_mem_hndl(1);
;;;9615   		}
;;;9616   	else 
;;;9617   		{
;;;9618   		show_mess(	"     Ускоренный     ",
005898  f44f60fa          MOV      r0,#0x7d0
00589c  9000              STR      r0,[sp,#0]
00589e  4bac              LDR      r3,|L1.23376|
0058a0  a2ac              ADR      r2,|L1.23380|
0058a2  a1b2              ADR      r1,|L1.23404|
0058a4  a0b7              ADR      r0,|L1.23428|
0058a6  f7fffffe          BL       show_mess
;;;9619   	          		"       заряд        ",
;;;9620   	          		"    заблокирован!   ",
;;;9621   	          		"                    ",2000);
;;;9622   		}
;;;9623   	}
;;;9624   }
0058aa  bd08              POP      {r3,pc}
                  |L1.22700|
0058ac  f04f0101          MOV      r1,#1                 ;9610
0058b0  7001              STRB     r1,[r0,#0]            ;9610
0058b2  e8bd4008          POP      {r3,lr}               ;9614
0058b6  4608              MOV      r0,r1                 ;9614
0058b8  f7ffbffe          B.W      speedz_mem_hndl
;;;9625   
                          ENDP

                  speedChargeHndl PROC
;;;9384   //-----------------------------------------------
;;;9385   void speedChargeHndl(void)
0058bc  e92d4ff8          PUSH     {r3-r11,lr}
;;;9386   {
;;;9387   /*
;;;9388   if(sp_ch_stat==scsOFF)
;;;9389   	{
;;;9390   	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;9391   	}*/
;;;9392   	 
;;;9393   if(sp_ch_stat==scsSTEP1)
0058c0  4fa0              LDR      r7,|L1.23364|
;;;9394   	{
;;;9395   	if(sp_ch_stat_old!=sp_ch_stat)
0058c2  4eb8              LDR      r6,|L1.23460|
;;;9396   		{
;;;9397   		sp_ch_stat_cnt=5;
;;;9398   		if(SP_CH_VENT_BLOK==0)
0058c4  f8dfa2d4          LDR      r10,|L1.23452|
0058c8  7839              LDRB     r1,[r7,#0]            ;9393  ; sp_ch_stat
;;;9399   			{
;;;9400   			sp_ch_stat_cnt=0;
;;;9401   			sp_ch_stat=scsWRK;
;;;9402   			}
;;;9403   		}
;;;9404   	if(sp_ch_stat_cnt)
;;;9405   		{
;;;9406   		sp_ch_stat_cnt--;
;;;9407   		if(sp_ch_stat_cnt==0)
;;;9408   			{
;;;9409   			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;9410   
;;;9411   			}
;;;9412   		}
;;;9413   	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0058ca  f8df92d4          LDR      r9,|L1.23456|
0058ce  7830              LDRB     r0,[r6,#0]            ;9395
0058d0  4cb5              LDR      r4,|L1.23464|
0058d2  2500              MOVS     r5,#0                 ;9398
0058d4  f04f0802          MOV      r8,#2                 ;9401
0058d8  2901              CMP      r1,#1                 ;9393
0058da  d11b              BNE      |L1.22804|
0058dc  2801              CMP      r0,#1                 ;9395
0058de  d008              BEQ      |L1.22770|
0058e0  f04f0105          MOV      r1,#5                 ;9397
0058e4  8021              STRH     r1,[r4,#0]            ;9397
0058e6  f8ba1000          LDRH     r1,[r10,#0]           ;9398  ; SP_CH_VENT_BLOK
0058ea  b911              CBNZ     r1,|L1.22770|
0058ec  8025              STRH     r5,[r4,#0]            ;9400
0058ee  f8878000          STRB     r8,[r7,#0]            ;9401
                  |L1.22770|
0058f2  f9b41000          LDRSH    r1,[r4,#0]            ;9404  ; sp_ch_stat_cnt
0058f6  b139              CBZ      r1,|L1.22792|
0058f8  f1a10101          SUB      r1,r1,#1              ;9406
0058fc  b209              SXTH     r1,r1                 ;9406
0058fe  8021              STRH     r1,[r4,#0]            ;9406
005900  b911              CBNZ     r1,|L1.22792|
005902  f04f0103          MOV      r1,#3                 ;9409
005906  7039              STRB     r1,[r7,#0]            ;9409
                  |L1.22792|
005908  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
00590c  2901              CMP      r1,#1
00590e  d101              BNE      |L1.22804|
005910  f8878000          STRB     r8,[r7,#0]
                  |L1.22804|
;;;9414   	}
;;;9415   
;;;9416   if(sp_ch_stat==scsWRK)
005914  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
005916  2902              CMP      r1,#2
005918  d123              BNE      |L1.22882|
;;;9417   	{
;;;9418   	if(sp_ch_stat_old!=sp_ch_stat)
;;;9419   		{
;;;9420   		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
00591a  4aa4              LDR      r2,|L1.23468|
;;;9421   		hv_vz_up_cnt=0;
00591c  49a4              LDR      r1,|L1.23472|
00591e  2802              CMP      r0,#2                 ;9418
005920  d008              BEQ      |L1.22836|
005922  48a4              LDR      r0,|L1.23476|
005924  f44f6361          MOV      r3,#0xe10             ;9420
005928  f9b00000          LDRSH    r0,[r0,#0]            ;9420  ; speedChrgTimeInHour
00592c  fb00f003          MUL      r0,r0,r3              ;9420
005930  6010              STR      r0,[r2,#0]            ;9420  ; sp_ch_wrk_cnt
005932  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.22836|
;;;9422   		}
;;;9423   	sp_ch_wrk_cnt--;
005934  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
005936  f1a00001          SUB      r0,r0,#1
00593a  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;9424   	hv_vz_up_cnt++;
00593c  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
00593e  f1020201          ADD      r2,r2,#1
005942  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;9425   	if(sp_ch_wrk_cnt==0)
005944  b918              CBNZ     r0,|L1.22862|
;;;9426   		{
;;;9427   		sp_ch_stat=scsOFF;
005946  703d              STRB     r5,[r7,#0]
;;;9428   		speedz_mem_hndl(0);
005948  2000              MOVS     r0,#0
00594a  f7fffffe          BL       speedz_mem_hndl
                  |L1.22862|
;;;9429   		}
;;;9430   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9431   	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
00594e  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
005952  b930              CBNZ     r0,|L1.22882|
005954  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
005958  2801              CMP      r0,#1
00595a  d102              BNE      |L1.22882|
00595c  f04f0004          MOV      r0,#4
005960  7038              STRB     r0,[r7,#0]
                  |L1.22882|
;;;9432   	#endif
;;;9433   	}
;;;9434   
;;;9435   if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
005962  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;9436   	{
;;;9437   	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;9438   		{
;;;9439   		sp_ch_stat_cnt=10;
;;;9440   		}
;;;9441   	sp_ch_stat_cnt--;
;;;9442   	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;9443   		{
;;;9444   		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
005964  f2413b88          MOV      r11,#0x1388
005968  f04f0a0a          MOV      r10,#0xa              ;9439
00596c  2803              CMP      r0,#3                 ;9435
00596e  d119              BNE      |L1.22948|
005970  7830              LDRB     r0,[r6,#0]            ;9437  ; sp_ch_stat_old
005972  2803              CMP      r0,#3                 ;9437
005974  d101              BNE      |L1.22906|
005976  8820              LDRH     r0,[r4,#0]            ;9437  ; sp_ch_stat_cnt
005978  b908              CBNZ     r0,|L1.22910|
                  |L1.22906|
00597a  f8a4a000          STRH     r10,[r4,#0]           ;9439
                  |L1.22910|
00597e  8820              LDRH     r0,[r4,#0]            ;9441  ; sp_ch_stat_cnt
005980  f1a00001          SUB      r0,r0,#1              ;9441
005984  b200              SXTH     r0,r0                 ;9441
005986  8020              STRH     r0,[r4,#0]            ;9441
005988  280a              CMP      r0,#0xa               ;9442
00598a  d001              BEQ      |L1.22928|
00598c  2809              CMP      r0,#9                 ;9442
00598e  d109              BNE      |L1.22948|
                  |L1.22928|
005990  4b89              LDR      r3,|L1.23480|
005992  a08a              ADR      r0,|L1.23484|
005994  f1030218          ADD      r2,r3,#0x18
005998  f1020118          ADD      r1,r2,#0x18
00599c  f8cdb000          STR      r11,[sp,#0]
0059a0  f7fffffe          BL       show_mess
                  |L1.22948|
;;;9445   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;9446   					"      ВКЛЮЧЕН       ",
;;;9447   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;9448   					5000);
;;;9449   		}
;;;9450   	}
;;;9451   if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
0059a4  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0059a6  2804              CMP      r0,#4
0059a8  d11f              BNE      |L1.23018|
;;;9452   	{
;;;9453   	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
0059aa  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
0059ac  2804              CMP      r0,#4
0059ae  d101              BNE      |L1.22964|
0059b0  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0059b2  b908              CBNZ     r0,|L1.22968|
                  |L1.22964|
;;;9454   		{
;;;9455   		sp_ch_stat_cnt=10;
0059b4  f8a4a000          STRH     r10,[r4,#0]
                  |L1.22968|
;;;9456   		}
;;;9457   	sp_ch_stat_cnt--;
0059b8  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0059ba  f1a00001          SUB      r0,r0,#1
0059be  b200              SXTH     r0,r0
0059c0  8020              STRH     r0,[r4,#0]
;;;9458   	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
0059c2  280a              CMP      r0,#0xa
0059c4  d001              BEQ      |L1.22986|
0059c6  2809              CMP      r0,#9
0059c8  d109              BNE      |L1.23006|
                  |L1.22986|
;;;9459   		{
;;;9460   		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0059ca  4b82              LDR      r3,|L1.23508|
0059cc  a07b              ADR      r0,|L1.23484|
0059ce  f1030218          ADD      r2,r3,#0x18
0059d2  f1020118          ADD      r1,r2,#0x18
0059d6  f8cdb000          STR      r11,[sp,#0]
0059da  f7fffffe          BL       show_mess
                  |L1.23006|
;;;9461   					"    ЗАБЛОКИРОВАН    ",
;;;9462   					"     НЕИСПРАВНА     ",
;;;9463   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;9464   					5000);
;;;9465   		}
;;;9466   	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0059de  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
0059e2  2801              CMP      r0,#1
0059e4  d101              BNE      |L1.23018|
0059e6  f8878000          STRB     r8,[r7,#0]
                  |L1.23018|
;;;9467   	}
;;;9468   
;;;9469   
;;;9470   sp_ch_stat_old=sp_ch_stat;
0059ea  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0059ec  7030              STRB     r0,[r6,#0]
;;;9471   
;;;9472   
;;;9473   
;;;9474   if(speedChrgAvtEn==1)
0059ee  497a              LDR      r1,|L1.23512|
;;;9475   	{
;;;9476   	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;9477   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9478   		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;9479   		#endif
;;;9480   		)
;;;9481   		{
;;;9482   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;9483   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9484   		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;9485   		#endif
;;;9486   		#ifdef UKU_220_V2
;;;9487   		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;9488   		#endif
;;;9489   		&&(!speedChrgBlckStat))
0059f0  4c55              LDR      r4,|L1.23368|
0059f2  8809              LDRH     r1,[r1,#0]            ;9474  ; speedChrgAvtEn
0059f4  2901              CMP      r1,#1                 ;9474
0059f6  d109              BNE      |L1.23052|
0059f8  4954              LDR      r1,|L1.23372|
;;;9490   			{
;;;9491   			speedChargeStartCnt++;
0059fa  4e78              LDR      r6,|L1.23516|
0059fc  7f8a              LDRB     r2,[r1,#0x1e]         ;9476  ; spc_stat
0059fe  4310              ORRS     r0,r0,r2              ;9476
005a00  784a              LDRB     r2,[r1,#1]            ;9476  ; vz1_stat
005a02  78c9              LDRB     r1,[r1,#3]            ;9476  ; vz2_stat
005a04  4310              ORRS     r0,r0,r2              ;9476
005a06  4308              ORRS     r0,r0,r1              ;9476
005a08  d007              BEQ      |L1.23066|
;;;9492   			if(speedChargeStartCnt>=60)
;;;9493   				{
;;;9494   				speedChargeStartStop();
;;;9495   				speedz_mem_hndl(5);
;;;9496   				}
;;;9497   			}
;;;9498   		else speedChargeStartCnt=0;
;;;9499   		}
;;;9500   	else speedChargeStartCnt=0;
005a0a  7035              STRB     r5,[r6,#0]
                  |L1.23052|
;;;9501   	}
;;;9502   
;;;9503   
;;;9504   
;;;9505   /*
;;;9506   if(speedChIsOn)
;;;9507   	{
;;;9508   	speedChTimeCnt++;
;;;9509   	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;9510   		{
;;;9511   		speedChIsOn=0;
;;;9512   		}
;;;9513   	if(speedChrgBlckStat)
;;;9514   		{
;;;9515   		speedChIsOn=0;
;;;9516   		speedChTimeCnt=0;
;;;9517   		}
;;;9518   	}
;;;9519   
;;;9520   
;;;9521   
;;;9522   if(speedChrgAvtEn)
;;;9523   	{
;;;9524   	if(!speedChIsOn)
;;;9525   		{
;;;9526   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;9527   			{
;;;9528   			speedChIsOn=1;
;;;9529   			}
;;;9530   		}
;;;9531   	}
;;;9532   
;;;9533   
;;;9534   */
;;;9535   if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
005a0c  4874              LDR      r0,|L1.23520|
005a0e  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
005a10  2802              CMP      r0,#2
005a12  d02e              BEQ      |L1.23154|
005a14  8025              STRH     r5,[r4,#0]
                  |L1.23062|
;;;9536   else
;;;9537   	{
;;;9538   	speedChrgBlckStat=0;
;;;9539   	if(speedChrgBlckSrc==1)
;;;9540   		{
;;;9541   		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;9542   		}
;;;9543   	else if(speedChrgBlckSrc==2)
;;;9544   		{
;;;9545   		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;9546   		}
;;;9547   	}
;;;9548   
;;;9549   /*
;;;9550   if(speedChrgBlckStat==1)
;;;9551   	{
;;;9552   
;;;9553   	//speedChargeStartStop();
;;;9554   
;;;9555   	speedChrgShowCnt++;
;;;9556   	if(speedChrgShowCnt>=30)	
;;;9557   		{
;;;9558   		speedChrgShowCnt=0;
;;;9559   		show_mess(	"     УСКОРЕННЫЙ     ",
;;;9560   					"       ЗАРЯД        ",
;;;9561   					"     ЗАПРЕЩЕН!!!    ",
;;;9562   					"                    ",
;;;9563   					5000);
;;;9564   		}
;;;9565   	} 
;;;9566   else speedChrgShowCnt=0;  */
;;;9567   
;;;9568   
;;;9569   }
005a16  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.23066|
005a1a  483e              LDR      r0,|L1.23316|
005a1c  4971              LDR      r1,|L1.23524|
005a1e  f9b00000          LDRSH    r0,[r0,#0]            ;9482  ; load_U
005a22  f9b11000          LDRSH    r1,[r1,#0]            ;9482  ; u_necc
005a26  4288              CMP      r0,r1                 ;9482
005a28  da14              BGE      |L1.23124|
005a2a  1a08              SUBS     r0,r1,r0              ;9482
005a2c  496e              LDR      r1,|L1.23528|
005a2e  f9b11000          LDRSH    r1,[r1,#0]            ;9482  ; speedChrgDU
005a32  4288              CMP      r0,r1                 ;9482
005a34  dd0e              BLE      |L1.23124|
005a36  486d              LDR      r0,|L1.23532|
005a38  496d              LDR      r1,|L1.23536|
005a3a  f9b00000          LDRSH    r0,[r0,#0]            ;9484  ; Ib_ips_termokompensat
005a3e  8809              LDRH     r1,[r1,#0]            ;9484  ; IZMAX
005a40  fb90f0fa          SDIV     r0,r0,r10             ;9484
005a44  1a40              SUBS     r0,r0,r1              ;9484
005a46  b200              SXTH     r0,r0                 ;9484
005a48  f7fffffe          BL       abs
005a4c  2805              CMP      r0,#5                 ;9484
005a4e  da01              BGE      |L1.23124|
005a50  8820              LDRH     r0,[r4,#0]            ;9489  ; speedChrgBlckStat
005a52  b108              CBZ      r0,|L1.23128|
                  |L1.23124|
005a54  7035              STRB     r5,[r6,#0]            ;9498
005a56  e7d9              B        |L1.23052|
                  |L1.23128|
005a58  7830              LDRB     r0,[r6,#0]            ;9491  ; speedChargeStartCnt
005a5a  f1000001          ADD      r0,r0,#1              ;9491
005a5e  b2c0              UXTB     r0,r0                 ;9491
005a60  7030              STRB     r0,[r6,#0]            ;9491
005a62  283c              CMP      r0,#0x3c              ;9492
005a64  d3d2              BCC      |L1.23052|
005a66  f7fffffe          BL       speedChargeStartStop
005a6a  2005              MOVS     r0,#5                 ;9495
005a6c  f7fffffe          BL       speedz_mem_hndl
005a70  e7cc              B        |L1.23052|
                  |L1.23154|
005a72  8025              STRH     r5,[r4,#0]            ;9538
005a74  485f              LDR      r0,|L1.23540|
005a76  4960              LDR      r1,|L1.23544|
005a78  f44f63fa          MOV      r3,#0x7d0             ;9541
005a7c  f9b00000          LDRSH    r0,[r0,#0]            ;9545  ; speedChrgBlckLog
005a80  b918              CBNZ     r0,|L1.23178|
005a82  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;9545  ; adc_buff_
005a86  429a              CMP      r2,r3                 ;9545
005a88  dc05              BGT      |L1.23190|
                  |L1.23178|
005a8a  2801              CMP      r0,#1                 ;9545
005a8c  d1c3              BNE      |L1.23062|
005a8e  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;9545  ; adc_buff_
005a92  4298              CMP      r0,r3                 ;9545
005a94  dabf              BGE      |L1.23062|
                  |L1.23190|
005a96  f04f0001          MOV      r0,#1                 ;9545
005a9a  8020              STRH     r0,[r4,#0]            ;9545
005a9c  e7bb              B        |L1.23062|
;;;9570   
                          ENDP

                  averageChargeHndl PROC
;;;9626   //-----------------------------------------------
;;;9627   void averageChargeHndl(void)
005a9e  e92d4ff8          PUSH     {r3-r11,lr}
;;;9628   {
;;;9629   /*
;;;9630   if(hv_vz_stat==hvsOFF)
;;;9631   	{
;;;9632   	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;9633   	} */
;;;9634   if(hv_vz_stat!=hvsOFF)
005aa2  f8dfa158          LDR      r10,|L1.23548|
005aa6  f04f0b00          MOV      r11,#0
005aaa  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005aae  b130              CBZ      r0,|L1.23230|
;;;9635   	{
;;;9636   	hv_vz_stat=hvsOFF; 	
005ab0  f88ab000          STRB     r11,[r10,#0]
;;;9637   	lc640_write(EE_HV_VZ_STAT,hvsOFF);
005ab4  2100              MOVS     r1,#0
005ab6  f44f70b4          MOV      r0,#0x168
005aba  f7fffffe          BL       lc640_write
                  |L1.23230|
;;;9638   	}
;;;9639   
;;;9640   if(hv_vz_stat==hvsSTEP1)
005abe  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;9641   	{
;;;9642   	if(hv_vz_stat_old!=hv_vz_stat)
;;;9643   		{
;;;9644   		hv_vz_stat_cnt=5;
;;;9645   		}
;;;9646   	if(hv_vz_stat_cnt)
;;;9647   		{
;;;9648   		hv_vz_stat_cnt--;
;;;9649   		if(hv_vz_stat_cnt==0)
;;;9650   			{
;;;9651   			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;9652   			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;9653   			}
;;;9654   		}
;;;9655   	if(sk_stat[0]==1)
005ac2  4e37              LDR      r6,|L1.23456|
005ac4  4d4e              LDR      r5,|L1.23552|
005ac6  4c4f              LDR      r4,|L1.23556|
005ac8  f04f0905          MOV      r9,#5                 ;9644
005acc  2801              CMP      r0,#1                 ;9640
005ace  d118              BNE      |L1.23298|
005ad0  7828              LDRB     r0,[r5,#0]            ;9642  ; hv_vz_stat_old
005ad2  2801              CMP      r0,#1                 ;9642
005ad4  d001              BEQ      |L1.23258|
005ad6  f8a49000          STRH     r9,[r4,#0]            ;9644
                  |L1.23258|
005ada  f9b40000          LDRSH    r0,[r4,#0]            ;9646  ; hv_vz_stat_cnt
005ade  b168              CBZ      r0,|L1.23292|
005ae0  f1a00001          SUB      r0,r0,#1              ;9648
005ae4  b200              SXTH     r0,r0                 ;9648
005ae6  8020              STRH     r0,[r4,#0]            ;9648
005ae8  b940              CBNZ     r0,|L1.23292|
005aea  f04f0006          MOV      r0,#6                 ;9651
005aee  f88a0000          STRB     r0,[r10,#0]           ;9651
005af2  4601              MOV      r1,r0                 ;9652
005af4  f44f70b4          MOV      r0,#0x168             ;9652
005af8  f7fffffe          BL       lc640_write
                  |L1.23292|
005afc  7830              LDRB     r0,[r6,#0]  ; sk_stat
005afe  2801              CMP      r0,#1
005b00  e082              B        |L1.23560|
                  |L1.23298|
005b02  e09b              B        |L1.23612|
                  |L1.23300|
                          DCD      superviser_cnt
                  |L1.23304|
                          DCD      NPN_OUT
                  |L1.23308|
                          DCD      npn_tz_cnt
                  |L1.23312|
                          DCD      npn_stat
                  |L1.23316|
                          DCD      load_U
                  |L1.23320|
                          DCD      UONPN
                  |L1.23324|
                          DCD      net_Ua
                  |L1.23328|
                          DCD      net_Ub
                  |L1.23332|
                          DCD      net_Uc
                  |L1.23336|
                          DCD      UMN
                  |L1.23340|
                          DCD      TZNPN
                  |L1.23344|
                          DCD      UVNPN
                  |L1.23348|
                          DCD      load_off_cnt
                  |L1.23352|
                          DCD      load_off_stat
                  |L1.23356|
                          DCD      dUNPN
                  |L1.23360|
                          DCD      tloaddisable_cmnd
                  |L1.23364|
                          DCD      sp_ch_stat
                  |L1.23368|
                          DCD      speedChrgBlckStat
                  |L1.23372|
                          DCD      ||area_number.25||
                  |L1.23376|
                          DCD      ||.text||+0xe90
                  |L1.23380|
005b54  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
005b58  e7e0e1eb
005b5c  eeeae8f0
005b60  eee2e0ed
005b64  21      
005b65  20202000          DCB      "   ",0
005b69  00                DCB      0
005b6a  00                DCB      0
005b6b  00                DCB      0
                  |L1.23404|
005b6c  20202020          DCB      "       ",231,224,240,255,228,"        ",0
005b70  202020e7
005b74  e0f0ffe4
005b78  20202020
005b7c  20202020
005b80  00      
005b81  00                DCB      0
005b82  00                DCB      0
005b83  00                DCB      0
                  |L1.23428|
005b84  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
005b88  20d3f1ea
005b8c  eef0e5ed
005b90  edfbe920
005b94  20202020
005b98  00      
005b99  00                DCB      0
005b9a  00                DCB      0
005b9b  00                DCB      0
                  |L1.23452|
                          DCD      SP_CH_VENT_BLOK
                  |L1.23456|
                          DCD      sk_stat
                  |L1.23460|
                          DCD      sp_ch_stat_old
                  |L1.23464|
                          DCD      sp_ch_stat_cnt
                  |L1.23468|
                          DCD      sp_ch_wrk_cnt
                  |L1.23472|
                          DCD      hv_vz_up_cnt
                  |L1.23476|
                          DCD      speedChrgTimeInHour
                  |L1.23480|
                          DCD      ||.text||+0xd58
                  |L1.23484|
005bbc  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
005bc0  caced0c5
005bc4  cdcddbc9
005bc8  20c7c0  
005bcb  d0dfc420          DCB      208,223,196,"  ",0
005bcf  2000    
005bd1  00                DCB      0
005bd2  00                DCB      0
005bd3  00                DCB      0
                  |L1.23508|
                          DCD      ||.text||+0x8e8
                  |L1.23512|
                          DCD      speedChrgAvtEn
                  |L1.23516|
                          DCD      speedChargeStartCnt
                  |L1.23520|
                          DCD      speedChrgBlckSrc
                  |L1.23524|
                          DCD      u_necc
                  |L1.23528|
                          DCD      speedChrgDU
                  |L1.23532|
                          DCD      Ib_ips_termokompensat
                  |L1.23536|
                          DCD      IZMAX
                  |L1.23540|
                          DCD      speedChrgBlckLog
                  |L1.23544|
                          DCD      ||.bss||+0x40c
                  |L1.23548|
                          DCD      hv_vz_stat
                  |L1.23552|
                          DCD      hv_vz_stat_old
                  |L1.23556|
                          DCD      hv_vz_stat_cnt
                  |L1.23560|
005c08  d118              BNE      |L1.23612|
;;;9656   		{
;;;9657   		hv_vz_stat=hvsSTEP2;
005c0a  f04f0002          MOV      r0,#2
005c0e  f88a0000          STRB     r0,[r10,#0]
;;;9658   		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
005c12  4601              MOV      r1,r0
005c14  f44f70b4          MOV      r0,#0x168
005c18  f7fffffe          BL       lc640_write
;;;9659   		tree_up(iHV_STEP2_2,1,0,0);
005c1c  2300              MOVS     r3,#0
005c1e  461a              MOV      r2,r3
005c20  2101              MOVS     r1,#1
005c22  20dc              MOVS     r0,#0xdc
005c24  f7fffffe          BL       tree_up
;;;9660   		tree_up(iHV_STEP2_1,0,0,0);
005c28  2300              MOVS     r3,#0
005c2a  461a              MOV      r2,r3
005c2c  4619              MOV      r1,r3
005c2e  20db              MOVS     r0,#0xdb
005c30  f7fffffe          BL       tree_up
;;;9661   		ret(1200);
005c34  f44f6096          MOV      r0,#0x4b0
005c38  f7fffffe          BL       ||ret||
                  |L1.23612|
;;;9662   		}
;;;9663   	}
;;;9664   
;;;9665   if(hv_vz_stat==hvsSTEP2)
005c3c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005c40  2802              CMP      r0,#2
005c42  d10b              BNE      |L1.23644|
;;;9666   	{
;;;9667   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005c44  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
005c46  2902              CMP      r1,#2
005c48  d101              BNE      |L1.23630|
005c4a  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
005c4c  b911              CBNZ     r1,|L1.23636|
                  |L1.23630|
;;;9668   		{
;;;9669   		hv_vz_stat_cnt=15;
005c4e  f04f010f          MOV      r1,#0xf
005c52  8021              STRH     r1,[r4,#0]
                  |L1.23636|
;;;9670   		}
;;;9671   	hv_vz_stat_cnt--;
005c54  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
005c56  f1a10101          SUB      r1,r1,#1
005c5a  8021              STRH     r1,[r4,#0]
                  |L1.23644|
;;;9672   	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;9673   	//	{
;;;9674   //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;9675   	//				"  Напряжение будет  ",
;;;9676   	//				" увеличено до     @В",
;;;9677   	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;9678   	//				4800,UVZ,1);
;;;9679   	//	}
;;;9680   	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;9681   	//	{
;;;9682   	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;9683   	//				"     НАЖАТИЕМ       ",
;;;9684   	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;9685   	//				"      КНОПКИ        ",
;;;9686   	//				4800);
;;;9687   	//	} 
;;;9688   /*	if(sk_stat[1]==1)
;;;9689   		{
;;;9690   		hv_vz_stat=hvsWRK;
;;;9691   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;9692   		}*/
;;;9693   	}
;;;9694   
;;;9695   if(hv_vz_stat==hvsSTEP3)
;;;9696   	{
;;;9697   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;9698   		{
;;;9699   		hv_vz_stat_cnt=10;
005c5c  270a              MOVS     r7,#0xa
;;;9700   		}
;;;9701   	hv_vz_stat_cnt--;
;;;9702   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;9703   		{
;;;9704   		show_mess(	"     ВКЛЮЧИТЕ       ",
005c5e  f2413888          MOV      r8,#0x1388
005c62  2803              CMP      r0,#3                 ;9695
005c64  d122              BNE      |L1.23724|
005c66  7828              LDRB     r0,[r5,#0]            ;9697  ; hv_vz_stat_old
005c68  2803              CMP      r0,#3                 ;9697
005c6a  d101              BNE      |L1.23664|
005c6c  8820              LDRH     r0,[r4,#0]            ;9697  ; hv_vz_stat_cnt
005c6e  b900              CBNZ     r0,|L1.23666|
                  |L1.23664|
005c70  8027              STRH     r7,[r4,#0]            ;9699
                  |L1.23666|
005c72  8820              LDRH     r0,[r4,#0]            ;9701  ; hv_vz_stat_cnt
005c74  f1a00001          SUB      r0,r0,#1              ;9701
005c78  b200              SXTH     r0,r0                 ;9701
005c7a  8020              STRH     r0,[r4,#0]            ;9701
005c7c  280a              CMP      r0,#0xa               ;9702
005c7e  d001              BEQ      |L1.23684|
005c80  2809              CMP      r0,#9                 ;9702
005c82  d109              BNE      |L1.23704|
                  |L1.23684|
005c84  4bfe              LDR      r3,|L1.24704|
005c86  a2ff              ADR      r2,|L1.24708|
005c88  f5a37194          SUB      r1,r3,#0x128
005c8c  f1010018          ADD      r0,r1,#0x18
005c90  f8cd8000          STR      r8,[sp,#0]
005c94  f7fffffe          BL       show_mess
                  |L1.23704|
;;;9705   					"      ТУМБЛЕР       ",
;;;9706   					"   ВЫРАВНИВАЮЩИЙ    ",
;;;9707   					"       ЗАРЯД        ",
;;;9708   					5000);
;;;9709   		}
;;;9710   	if(sk_stat[1]==1)
005c98  7870              LDRB     r0,[r6,#1]  ; sk_stat
005c9a  2801              CMP      r0,#1
005c9c  d106              BNE      |L1.23724|
;;;9711   		{
;;;9712   		hv_vz_stat=hvsWRK;
005c9e  f88a9000          STRB     r9,[r10,#0]
;;;9713   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005ca2  2105              MOVS     r1,#5
005ca4  f44f70b4          MOV      r0,#0x168
005ca8  f7fffffe          BL       lc640_write
                  |L1.23724|
;;;9714   		}
;;;9715   	}
;;;9716   
;;;9717   if(hv_vz_stat==hvsWRK)
005cac  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005cb0  2805              CMP      r0,#5
005cb2  d13a              BNE      |L1.23850|
;;;9718   	{
;;;9719   	if(hv_vz_stat_old!=hv_vz_stat)
005cb4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;9720   		{
;;;9721   		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
005cb6  4af9              LDR      r2,|L1.24732|
;;;9722   		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;9723   		hv_vz_up_cnt=0L;
005cb8  49f9              LDR      r1,|L1.24736|
005cba  2805              CMP      r0,#5                 ;9719
005cbc  d00d              BEQ      |L1.23770|
005cbe  48f9              LDR      r0,|L1.24740|
005cc0  f44f6361          MOV      r3,#0xe10             ;9721
005cc4  f9b00000          LDRSH    r0,[r0,#0]            ;9721  ; VZ_HR
005cc8  fb00f303          MUL      r3,r0,r3              ;9721
005ccc  6013              STR      r3,[r2,#0]            ;9721  ; hv_vz_wrk_cnt
005cce  b910              CBNZ     r0,|L1.23766|
005cd0  f44f60e1          MOV      r0,#0x708             ;9722
005cd4  6010              STR      r0,[r2,#0]            ;9722  ; hv_vz_wrk_cnt
                  |L1.23766|
005cd6  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.23770|
;;;9724   		}
;;;9725   	hv_vz_wrk_cnt--;
005cda  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
005cdc  f1a00001          SUB      r0,r0,#1
005ce0  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;9726   	hv_vz_up_cnt++;
005ce2  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
005ce4  f1020201          ADD      r2,r2,#1
005ce8  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;9727   
;;;9728   	if(hv_vz_wrk_cnt==0)
005cea  b940              CBNZ     r0,|L1.23806|
;;;9729   		{
;;;9730   		hv_vz_stat=hvsERR4;
005cec  f04f0009          MOV      r0,#9
005cf0  f88a0000          STRB     r0,[r10,#0]
;;;9731   		lc640_write(EE_HV_VZ_STAT,hvsERR4);
005cf4  4601              MOV      r1,r0
005cf6  f44f70b4          MOV      r0,#0x168
005cfa  f7fffffe          BL       lc640_write
                  |L1.23806|
;;;9732   		}
;;;9733   	if(sk_stat[0]==0)
005cfe  7830              LDRB     r0,[r6,#0]  ; sk_stat
005d00  b940              CBNZ     r0,|L1.23828|
;;;9734   		{
;;;9735   		hv_vz_stat=hvsERR2;
005d02  f04f0007          MOV      r0,#7
005d06  f88a0000          STRB     r0,[r10,#0]
;;;9736   		lc640_write(EE_HV_VZ_STAT,hvsERR2);
005d0a  4601              MOV      r1,r0
005d0c  f44f70b4          MOV      r0,#0x168
005d10  f7fffffe          BL       lc640_write
                  |L1.23828|
;;;9737   		}
;;;9738   	if(sk_stat[1]==0)
005d14  7870              LDRB     r0,[r6,#1]  ; sk_stat
005d16  b940              CBNZ     r0,|L1.23850|
;;;9739   		{
;;;9740   		hv_vz_stat=hvsERR3;
005d18  f04f0008          MOV      r0,#8
005d1c  f88a0000          STRB     r0,[r10,#0]
;;;9741   		lc640_write(EE_HV_VZ_STAT,hvsERR3);
005d20  4601              MOV      r1,r0
005d22  f44f70b4          MOV      r0,#0x168
005d26  f7fffffe          BL       lc640_write
                  |L1.23850|
;;;9742   		}
;;;9743   	}
;;;9744   
;;;9745   if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
005d2a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005d2e  2806              CMP      r0,#6
005d30  d11a              BNE      |L1.23912|
;;;9746   	{
;;;9747   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005d32  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005d34  2806              CMP      r0,#6
005d36  d101              BNE      |L1.23868|
005d38  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005d3a  b900              CBNZ     r0,|L1.23870|
                  |L1.23868|
;;;9748   		{
;;;9749   		hv_vz_stat_cnt=10;
005d3c  8027              STRH     r7,[r4,#0]
                  |L1.23870|
;;;9750   		}
;;;9751   	hv_vz_stat_cnt--;
005d3e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005d40  f1a00001          SUB      r0,r0,#1
005d44  b200              SXTH     r0,r0
005d46  8020              STRH     r0,[r4,#0]
;;;9752   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005d48  280a              CMP      r0,#0xa
005d4a  d001              BEQ      |L1.23888|
005d4c  2809              CMP      r0,#9
005d4e  d10b              BNE      |L1.23912|
                  |L1.23888|
;;;9753   		{
;;;9754   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005d50  4bcb              LDR      r3,|L1.24704|
005d52  f8cd8000          STR      r8,[sp,#0]
005d56  3bf0              SUBS     r3,r3,#0xf0
005d58  f1030218          ADD      r2,r3,#0x18
005d5c  f1020118          ADD      r1,r2,#0x18
005d60  f5a1608b          SUB      r0,r1,#0x458
005d64  f7fffffe          BL       show_mess
                  |L1.23912|
;;;9755   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;9756   					"      ВКЛЮЧЕН       ",
;;;9757   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;9758   					5000);
;;;9759   		}
;;;9760   	}
;;;9761   if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
005d68  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005d6c  2807              CMP      r0,#7
005d6e  d123              BNE      |L1.23992|
;;;9762   	{
;;;9763   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005d70  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005d72  2807              CMP      r0,#7
005d74  d101              BNE      |L1.23930|
005d76  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005d78  b900              CBNZ     r0,|L1.23932|
                  |L1.23930|
;;;9764   		{
;;;9765   		hv_vz_stat_cnt=10;
005d7a  8027              STRH     r7,[r4,#0]
                  |L1.23932|
;;;9766   		}
;;;9767   	hv_vz_stat_cnt--;
005d7c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005d7e  f1a00001          SUB      r0,r0,#1
005d82  b200              SXTH     r0,r0
005d84  8020              STRH     r0,[r4,#0]
;;;9768   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005d86  280a              CMP      r0,#0xa
005d88  d001              BEQ      |L1.23950|
005d8a  2809              CMP      r0,#9
005d8c  d10a              BNE      |L1.23972|
                  |L1.23950|
;;;9769   		{
;;;9770   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005d8e  4bc6              LDR      r3,|L1.24744|
005d90  f8cd8000          STR      r8,[sp,#0]
005d94  f1030218          ADD      r2,r3,#0x18
005d98  f1020118          ADD      r1,r2,#0x18
005d9c  f1010018          ADD      r0,r1,#0x18
005da0  f7fffffe          BL       show_mess
                  |L1.23972|
;;;9771   					"    ЗАБЛОКИРОВАН    ",
;;;9772   					"     НЕИСПРАВНА     ",
;;;9773   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;9774   					5000);
;;;9775   		}
;;;9776   	if(sk_stat[0]==1)
005da4  7830              LDRB     r0,[r6,#0]  ; sk_stat
005da6  2801              CMP      r0,#1
005da8  d106              BNE      |L1.23992|
;;;9777   		{
;;;9778   		hv_vz_stat=hvsWRK;
005daa  f88a9000          STRB     r9,[r10,#0]
;;;9779   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005dae  2105              MOVS     r1,#5
005db0  f44f70b4          MOV      r0,#0x168
005db4  f7fffffe          BL       lc640_write
                  |L1.23992|
;;;9780   		}
;;;9781   	}
;;;9782   
;;;9783   if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
005db8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005dbc  2808              CMP      r0,#8
005dbe  d123              BNE      |L1.24072|
;;;9784   	{
;;;9785   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005dc0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005dc2  2808              CMP      r0,#8
005dc4  d101              BNE      |L1.24010|
005dc6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005dc8  b900              CBNZ     r0,|L1.24012|
                  |L1.24010|
;;;9786   		{
;;;9787   		hv_vz_stat_cnt=10;
005dca  8027              STRH     r7,[r4,#0]
                  |L1.24012|
;;;9788   		}
;;;9789   	hv_vz_stat_cnt--;
005dcc  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005dce  f1a00001          SUB      r0,r0,#1
005dd2  b200              SXTH     r0,r0
005dd4  8020              STRH     r0,[r4,#0]
;;;9790   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005dd6  280a              CMP      r0,#0xa
005dd8  d001              BEQ      |L1.24030|
005dda  2809              CMP      r0,#9
005ddc  d10a              BNE      |L1.24052|
                  |L1.24030|
;;;9791   		{
;;;9792   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005dde  4bb3              LDR      r3,|L1.24748|
005de0  f8cd8000          STR      r8,[sp,#0]
005de4  f6a31264          SUB      r2,r3,#0x964
005de8  f1020118          ADD      r1,r2,#0x18
005dec  f5a16097          SUB      r0,r1,#0x4b8
005df0  f7fffffe          BL       show_mess
                  |L1.24052|
;;;9793   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;9794   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;9795   					"    ТУМБЛЕРА!!!     ",
;;;9796   					5000);
;;;9797   		}
;;;9798   	if(sk_stat[1]==1)
005df4  7870              LDRB     r0,[r6,#1]  ; sk_stat
005df6  2801              CMP      r0,#1
005df8  d106              BNE      |L1.24072|
;;;9799   		{
;;;9800   		hv_vz_stat=hvsWRK;
005dfa  f88a9000          STRB     r9,[r10,#0]
;;;9801   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005dfe  2105              MOVS     r1,#5
005e00  f44f70b4          MOV      r0,#0x168
005e04  f7fffffe          BL       lc640_write
                  |L1.24072|
;;;9802   		}
;;;9803   	}
;;;9804   if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
005e08  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005e0c  2809              CMP      r0,#9
005e0e  d123              BNE      |L1.24152|
;;;9805   	{
;;;9806   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005e10  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005e12  2809              CMP      r0,#9
005e14  d101              BNE      |L1.24090|
005e16  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005e18  b900              CBNZ     r0,|L1.24092|
                  |L1.24090|
;;;9807   		{
;;;9808   		hv_vz_stat_cnt=10;
005e1a  8027              STRH     r7,[r4,#0]
                  |L1.24092|
;;;9809   		}
;;;9810   	hv_vz_stat_cnt--;
005e1c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005e1e  f1a00001          SUB      r0,r0,#1
005e22  b200              SXTH     r0,r0
005e24  8020              STRH     r0,[r4,#0]
;;;9811   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005e26  280a              CMP      r0,#0xa
005e28  d001              BEQ      |L1.24110|
005e2a  2809              CMP      r0,#9
005e2c  d109              BNE      |L1.24130|
                  |L1.24110|
;;;9812   		{
;;;9813   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
005e2e  4b94              LDR      r3,|L1.24704|
005e30  a294              ADR      r2,|L1.24708|
005e32  f5a37194          SUB      r1,r3,#0x128
005e36  f50170ac          ADD      r0,r1,#0x158
005e3a  f8cd8000          STR      r8,[sp,#0]
005e3e  f7fffffe          BL       show_mess
                  |L1.24130|
;;;9814   					"      ТУМБЛЕР       ",
;;;9815   					"   ВЫРАВНИВАЮЩИЙ    ",
;;;9816   					"       ЗАРЯД        ",
;;;9817   					5000);
;;;9818   		}
;;;9819   	if(sk_stat[1]==0)
005e42  7870              LDRB     r0,[r6,#1]  ; sk_stat
005e44  b940              CBNZ     r0,|L1.24152|
;;;9820   		{
;;;9821   		hv_vz_stat=hvsOFF;
005e46  f88ab000          STRB     r11,[r10,#0]
;;;9822   		lc640_write(EE_HV_VZ_STAT,hvsOFF);
005e4a  2100              MOVS     r1,#0
005e4c  f44f70b4          MOV      r0,#0x168
005e50  f7fffffe          BL       lc640_write
;;;9823   		vz_stop();
005e54  f7fffffe          BL       vz_stop
                  |L1.24152|
;;;9824   
;;;9825   		}
;;;9826   	}
;;;9827   hv_vz_stat_old=hv_vz_stat;
005e58  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005e5c  7028              STRB     r0,[r5,#0]
;;;9828   /*
;;;9829   if(speedChIsOn)
;;;9830   	{
;;;9831   	speedChTimeCnt++;
;;;9832   	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;9833   		{
;;;9834   		speedChIsOn=0;
;;;9835   		}
;;;9836   	if(speedChrgBlckStat)
;;;9837   		{
;;;9838   		speedChIsOn=0;
;;;9839   		speedChTimeCnt=0;
;;;9840   		}
;;;9841   	}
;;;9842   
;;;9843   
;;;9844   
;;;9845   if(speedChrgAvtEn)
;;;9846   	{
;;;9847   	if(!speedChIsOn)
;;;9848   		{
;;;9849   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;9850   			{
;;;9851   			speedChIsOn=1;
;;;9852   			}
;;;9853   		}
;;;9854   	}
;;;9855   
;;;9856   
;;;9857   
;;;9858   if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;9859   else
;;;9860   	{
;;;9861   	speedChrgBlckStat=0;
;;;9862   	if(speedChrgBlckSrc==1)
;;;9863   		{
;;;9864   		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;9865   		}
;;;9866   	else if(speedChrgBlckSrc==2)
;;;9867   		{
;;;9868   		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;9869   		}
;;;9870   	}
;;;9871   
;;;9872   
;;;9873   if(speedChrgBlckStat==1)
;;;9874   	{
;;;9875   
;;;9876   	//speedChargeStartStop();
;;;9877   
;;;9878   	speedChrgShowCnt++;
;;;9879   	if(speedChrgShowCnt>=30)	
;;;9880   		{
;;;9881   		speedChrgShowCnt=0;
;;;9882   		show_mess(	"     УСКОРЕННЫЙ     ",
;;;9883   					"       ЗАРЯД        ",
;;;9884   					"     ЗАПРЕЩЕН!!!    ",
;;;9885   					"                    ",
;;;9886   					5000);
;;;9887   		}
;;;9888   	}
;;;9889   else speedChrgShowCnt=0;
;;;9890   
;;;9891   */
;;;9892   }
005e5e  e5da              B        |L1.23062|
;;;9893   
                          ENDP

                  numOfForvardBps_hndl PROC
;;;9910   //-----------------------------------------------
;;;9911   void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
005e60  e92d41f0          PUSH     {r4-r8,lr}
;;;9912   {
;;;9913   
;;;9914   numOfForvardBps_old=numOfForvardBps;
005e64  4c92              LDR      r4,|L1.24752|
005e66  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
005e68  7060              STRB     r0,[r4,#1]
;;;9915   
;;;9916   numOfForvardBps=0;
005e6a  f04f0500          MOV      r5,#0
005e6e  f8045923          STRB     r5,[r4],#-0x23
;;;9917   
;;;9918   //FORVARDBPSCHHOUR=10;
;;;9919   
;;;9920   if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
005e72  4e90              LDR      r6,|L1.24756|
005e74  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
005e78  2800              CMP      r0,#0
005e7a  dd02              BLE      |L1.24194|
005e7c  f5b07ffa          CMP      r0,#0x1f4
005e80  dd02              BLE      |L1.24200|
                  |L1.24194|
;;;9921   	{
;;;9922   	FORVARDBPSCHHOUR=0;
005e82  8035              STRH     r5,[r6,#0]
                  |L1.24196|
;;;9923   	return;
;;;9924   	}
;;;9925   
;;;9926   numOfForvardBps_minCnt++;
;;;9927   
;;;9928   
;;;9929   if(numOfForvardBps_minCnt>=60)
;;;9930   	{
;;;9931   	numOfForvardBps_minCnt=0;
;;;9932   	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;9933   	numOfForvardBps_hourCnt++;
;;;9934   	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;9935   		{
;;;9936   		numOfForvardBps_hourCnt=0;
;;;9937   		}
;;;9938   	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;9939   	}
;;;9940   
;;;9941   numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;9942   
;;;9943   //if(numOfForvardBps)
;;;9944   //numOfForvardBps_old=numOfForvardBps; 
;;;9945   }
005e84  e8bd81f0          POP      {r4-r8,pc}
                  |L1.24200|
005e88  f8940025          LDRB     r0,[r4,#0x25]         ;9926  ; numOfForvardBps_minCnt
005e8c  f1000001          ADD      r0,r0,#1              ;9926
005e90  b2c0              UXTB     r0,r0                 ;9926
005e92  f8840025          STRB     r0,[r4,#0x25]         ;9926
005e96  283c              CMP      r0,#0x3c              ;9929
005e98  d31b              BCC      |L1.24274|
005e9a  f8845025          STRB     r5,[r4,#0x25]         ;9931
005e9e  f44f7794          MOV      r7,#0x128             ;9932
005ea2  4638              MOV      r0,r7                 ;9932
005ea4  f7fffffe          BL       lc640_read_int
005ea8  f1000001          ADD      r0,r0,#1              ;9933
005eac  b200              SXTH     r0,r0                 ;9933
005eae  f8a40072          STRH     r0,[r4,#0x72]         ;9933
005eb2  4a81              LDR      r2,|L1.24760|
005eb4  f9b61000          LDRSH    r1,[r6,#0]            ;9934  ; FORVARDBPSCHHOUR
005eb8  f9b22000          LDRSH    r2,[r2,#0]            ;9934  ; NUMIST
005ebc  fb01f102          MUL      r1,r1,r2              ;9934
005ec0  4281              CMP      r1,r0                 ;9934
005ec2  dc01              BGT      |L1.24264|
005ec4  f8a45072          STRH     r5,[r4,#0x72]         ;9936
                  |L1.24264|
005ec8  f9b41072          LDRSH    r1,[r4,#0x72]         ;9938  ; numOfForvardBps_hourCnt
005ecc  4638              MOV      r0,r7                 ;9938
005ece  f7fffffe          BL       lc640_write_int
                  |L1.24274|
005ed2  f9b40072          LDRSH    r0,[r4,#0x72]         ;9941  ; numOfForvardBps_hourCnt
005ed6  f9b61000          LDRSH    r1,[r6,#0]            ;9941  ; FORVARDBPSCHHOUR
005eda  fb90f0f1          SDIV     r0,r0,r1              ;9941
005ede  f8840023          STRB     r0,[r4,#0x23]         ;9941
005ee2  e7cf              B        |L1.24196|
;;;9946   
                          ENDP

                  numOfForvardBps_init PROC
;;;9947   //-----------------------------------------------
;;;9948   void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
005ee4  b510              PUSH     {r4,lr}
;;;9949   {									//Должна вызываться при изменении кол-ва источников в структуре
;;;9950   lc640_write_int(EE_FORVBPSHOURCNT,0);
005ee6  2100              MOVS     r1,#0
005ee8  f44f7094          MOV      r0,#0x128
005eec  f7fffffe          BL       lc640_write_int
;;;9951   numOfForvardBps_minCnt=58;
005ef0  496f              LDR      r1,|L1.24752|
005ef2  f04f003a          MOV      r0,#0x3a
005ef6  f1a10123          SUB      r1,r1,#0x23
005efa  f8810025          STRB     r0,[r1,#0x25]
;;;9952   }
005efe  bd10              POP      {r4,pc}
;;;9953   
                          ENDP

                  outVoltContrHndl PROC
;;;9954   //-----------------------------------------------
;;;9955   void outVoltContrHndl(void)
005f00  b570              PUSH     {r4-r6,lr}
;;;9956   { 
;;;9957   if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
005f02  4c6e              LDR      r4,|L1.24764|
005f04  486e              LDR      r0,|L1.24768|
;;;9958   	{
;;;9959   	outVoltContrHndlCnt_=0;
;;;9960   	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
005f06  4a6f              LDR      r2,|L1.24772|
005f08  f9b41000          LDRSH    r1,[r4,#0]            ;9957  ; load_U
005f0c  f9b06000          LDRSH    r6,[r0,#0]            ;9957  ; U_OUT_KONTR_MAX
005f10  2500              MOVS     r5,#0                 ;9959
005f12  f9b20000          LDRSH    r0,[r2,#0]
005f16  4b6c              LDR      r3,|L1.24776|
005f18  42b1              CMP      r1,r6                 ;9957
005f1a  dc04              BGT      |L1.24358|
005f1c  4e6b              LDR      r6,|L1.24780|
005f1e  f9b66000          LDRSH    r6,[r6,#0]            ;9957  ; U_OUT_KONTR_MIN
005f22  42b1              CMP      r1,r6                 ;9957
005f24  da0f              BGE      |L1.24390|
                  |L1.24358|
005f26  801d              STRH     r5,[r3,#0]            ;9959
005f28  4969              LDR      r1,|L1.24784|
005f2a  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
005f2e  4288              CMP      r0,r1
005f30  da1b              BGE      |L1.24426|
;;;9961   		{
;;;9962   		outVoltContrHndlCnt++;
005f32  f1000001          ADD      r0,r0,#1
005f36  b200              SXTH     r0,r0
005f38  8010              STRH     r0,[r2,#0]
;;;9963   		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
005f3a  4288              CMP      r0,r1
005f3c  d115              BNE      |L1.24426|
;;;9964   			{
;;;9965   			avar_uout_hndl(1);
005f3e  2001              MOVS     r0,#1
005f40  f7fffffe          BL       avar_uout_hndl
005f44  e011              B        |L1.24426|
                  |L1.24390|
;;;9966   			}
;;;9967   		}
;;;9968   	}
;;;9969   else
;;;9970   	{
;;;9971   	if(outVoltContrHndlCnt)
005f46  b180              CBZ      r0,|L1.24426|
;;;9972   		{
;;;9973   		if(outVoltContrHndlCnt_<5)
005f48  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
005f4c  2805              CMP      r0,#5
005f4e  da0c              BGE      |L1.24426|
;;;9974   			{
;;;9975   			outVoltContrHndlCnt_++;
005f50  f1000001          ADD      r0,r0,#1
005f54  b200              SXTH     r0,r0
005f56  8018              STRH     r0,[r3,#0]
;;;9976   			if(outVoltContrHndlCnt_>=5)
005f58  2805              CMP      r0,#5
005f5a  db06              BLT      |L1.24426|
;;;9977   				{
;;;9978   				outVoltContrHndlCnt=0;
005f5c  8015              STRH     r5,[r2,#0]
;;;9979   				if(uout_av)avar_uout_hndl(0);
005f5e  485d              LDR      r0,|L1.24788|
005f60  7800              LDRB     r0,[r0,#0]  ; uout_av
005f62  b110              CBZ      r0,|L1.24426|
005f64  2000              MOVS     r0,#0
005f66  f7fffffe          BL       avar_uout_hndl
                  |L1.24426|
;;;9980   				}
;;;9981   			}
;;;9982   		}
;;;9983   	}
;;;9984   
;;;9985   if (load_U<(USIGN*10)) 
005f6a  485b              LDR      r0,|L1.24792|
005f6c  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
005f70  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
005f74  eb000080          ADD      r0,r0,r0,LSL #2
005f78  ebb10f40          CMP      r1,r0,LSL #1
005f7c  da0b              BGE      |L1.24470|
;;;9986   	{
;;;9987   	if(!bSILENT)
005f7e  4857              LDR      r0,|L1.24796|
005f80  6800              LDR      r0,[r0,#0]  ; bSILENT
005f82  2800              CMP      r0,#0
005f84  d107              BNE      |L1.24470|
;;;9988   		{
;;;9989   		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
005f86  e8bd4070          POP      {r4-r6,lr}
005f8a  2314              MOVS     r3,#0x14
005f8c  2201              MOVS     r2,#1
005f8e  2172              MOVS     r1,#0x72
005f90  20d2              MOVS     r0,#0xd2
005f92  f7ffbffe          B.W      mess_send
                  |L1.24470|
;;;9990   		}
;;;9991   
;;;9992   	//bU_BAT2REL_AV_BAT=1;
;;;9993   	}
;;;9994   
;;;9995   
;;;9996   }
005f96  bd70              POP      {r4-r6,pc}
;;;9997   
                          ENDP

                  vent_resurs_hndl PROC
;;;9998   //-----------------------------------------------
;;;9999   void vent_resurs_hndl(void)
005f98  e92d47f0          PUSH     {r4-r10,lr}
;;;10000  {
;;;10001  char i;
;;;10002  char crc_in,crc_eval;
;;;10003  
;;;10004  for(i=0;i<NUMIST;i++)
005f9c  f04f0200          MOV      r2,#0
;;;10005  	{
;;;10006  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10007  		{
;;;10008  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10009  		}
;;;10010  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10011  		{
;;;10012  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10013  		}
;;;10014  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10015  		{
;;;10016  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10017  		}
;;;10018  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10019  		{
;;;10020  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10021  		}
;;;10022  	crc_in=0;
;;;10023  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10024  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10025  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10026  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10027  
;;;10028  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10029  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10030  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10031  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10032  
;;;10033  	if(crc_eval==crc_in)
;;;10034  		{
;;;10035  		unsigned short temp_US;
;;;10036  		temp_US=0;
;;;10037  
;;;10038  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10039  		temp_US<<=4;
;;;10040  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10041  		temp_US<<=4;
;;;10042  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10043  		temp_US<<=4;
;;;10044  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10045  
;;;10046  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10047  		}
;;;10048  
;;;10049  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
005fa0  484f              LDR      r0,|L1.24800|
005fa2  f8dfc140          LDR      r12,|L1.24804|
005fa6  f9b06000          LDRSH    r6,[r0,#0]
005faa  4843              LDR      r0,|L1.24760|
005fac  f9b07000          LDRSH    r7,[r0,#0]            ;10004
005fb0  e0a3              B        |L1.24826|
                  |L1.24498|
005fb2  ebc200c2          RSB      r0,r2,r2,LSL #3       ;10006
005fb6  eb001002          ADD      r0,r0,r2,LSL #4       ;10006
005fba  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10006
005fbe  7b41              LDRB     r1,[r0,#0xd]          ;10006
005fc0  098b              LSRS     r3,r1,#6              ;10006
005fc2  d006              BEQ      |L1.24530|
005fc4  2301              MOVS     r3,#1                 ;10010
005fc6  ebb31f91          CMP      r3,r1,LSR #6          ;10010
005fca  d105              BNE      |L1.24536|
005fcc  f8801055          STRB     r1,[r0,#0x55]         ;10012
005fd0  e00f              B        |L1.24562|
                  |L1.24530|
005fd2  f8801054          STRB     r1,[r0,#0x54]         ;10008
005fd6  e00c              B        |L1.24562|
                  |L1.24536|
005fd8  2302              MOVS     r3,#2                 ;10014
005fda  ebb31f91          CMP      r3,r1,LSR #6          ;10014
005fde  d102              BNE      |L1.24550|
005fe0  f8801056          STRB     r1,[r0,#0x56]         ;10016
005fe4  e005              B        |L1.24562|
                  |L1.24550|
005fe6  2303              MOVS     r3,#3                 ;10018
005fe8  ebb31f91          CMP      r3,r1,LSR #6          ;10018
005fec  d101              BNE      |L1.24562|
005fee  f8801057          STRB     r1,[r0,#0x57]         ;10020
                  |L1.24562|
005ff2  f8101f54          LDRB     r1,[r0,#0x54]!        ;10023
005ff6  f3c11401          UBFX     r4,r1,#4,#2           ;10023
005ffa  7843              LDRB     r3,[r0,#1]            ;10024
005ffc  f0030530          AND      r5,r3,#0x30           ;10024
006000  ea440495          ORR      r4,r4,r5,LSR #2       ;10024
006004  f8909002          LDRB     r9,[r0,#2]            ;10025
006008  f0090830          AND      r8,r9,#0x30           ;10025
00600c  ea480804          ORR      r8,r8,r4              ;10025
006010  78c5              LDRB     r5,[r0,#3]            ;10026
006012  f1a00054          SUB      r0,r0,#0x54           ;10026
006016  f0050430          AND      r4,r5,#0x30           ;10026
00601a  ea480884          ORR      r8,r8,r4,LSL #2       ;10026
00601e  f001010f          AND      r1,r1,#0xf            ;10028
006022  f003040f          AND      r4,r3,#0xf            ;10029
006026  ea840a01          EOR      r10,r4,r1             ;10029
00602a  f009030f          AND      r3,r9,#0xf            ;10030
00602e  ea83090a          EOR      r9,r3,r10             ;10030
006032  f005050f          AND      r5,r5,#0xf            ;10031
006036  ea850909          EOR      r9,r5,r9              ;10031
00603a  45c1              CMP      r9,r8                 ;10033
00603c  d113              BNE      |L1.24678|
00603e  ea4f1505          LSL      r5,r5,#4              ;10039
006042  ea430305          ORR      r3,r3,r5              ;10040
006046  ea4f1303          LSL      r3,r3,#4              ;10041
00604a  ea440403          ORR      r4,r4,r3              ;10042
00604e  ea4f5304          LSL      r3,r4,#20             ;10043
006052  ea4f4313          LSR      r3,r3,#16             ;10043
006056  ea410103          ORR      r1,r1,r3              ;10044
00605a  f8b03058          LDRH     r3,[r0,#0x58]         ;10046
00605e  428b              CMP      r3,r1                 ;10046
006060  d001              BEQ      |L1.24678|
006062  f8a01058          STRH     r1,[r0,#0x58]         ;10046
                  |L1.24678|
006066  f8b01058          LDRH     r1,[r0,#0x58]
00606a  eb060386          ADD      r3,r6,r6,LSL #2
00606e  ebb10f43          CMP      r1,r3,LSL #1
006072  dd3b              BLE      |L1.24812|
006074  2e00              CMP      r6,#0
006076  dd39              BLE      |L1.24812|
;;;10050  		{
;;;10051  		bps[i]._av|=(1<<4);
006078  7841              LDRB     r1,[r0,#1]
00607a  f0410110          ORR      r1,r1,#0x10
00607e  e033              B        |L1.24808|
                  |L1.24704|
                          DCD      ||.text||+0xe48
                  |L1.24708|
006084  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006088  dbd0c0c2
00608c  cdc8c2c0
006090  ded9c8c9
006094  20202020          DCB      "    ",0
006098  00      
006099  00                DCB      0
00609a  00                DCB      0
00609b  00                DCB      0
                  |L1.24732|
                          DCD      hv_vz_wrk_cnt
                  |L1.24736|
                          DCD      hv_vz_up_cnt
                  |L1.24740|
                          DCD      VZ_HR
                  |L1.24744|
                          DCD      ||.text||+0x8e8
                  |L1.24748|
                          DCD      ||.text||+0x1734
                  |L1.24752|
                          DCD      ||area_number.25||+0x23
                  |L1.24756|
                          DCD      FORVARDBPSCHHOUR
                  |L1.24760|
                          DCD      NUMIST
                  |L1.24764|
                          DCD      load_U
                  |L1.24768|
                          DCD      U_OUT_KONTR_MAX
                  |L1.24772|
                          DCD      outVoltContrHndlCnt
                  |L1.24776|
                          DCD      outVoltContrHndlCnt_
                  |L1.24780|
                          DCD      U_OUT_KONTR_MIN
                  |L1.24784|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.24788|
                          DCD      uout_av
                  |L1.24792|
                          DCD      USIGN
                  |L1.24796|
                          DCD      bSILENT
                  |L1.24800|
                          DCD      TVENTMAX
                  |L1.24804|
                          DCD      bps
                  |L1.24808|
0060e8  7041              STRB     r1,[r0,#1]
0060ea  e003              B        |L1.24820|
                  |L1.24812|
;;;10052  		}
;;;10053  	else bps[i]._av&=~(1<<4);
0060ec  7841              LDRB     r1,[r0,#1]
0060ee  f0210110          BIC      r1,r1,#0x10
0060f2  7041              STRB     r1,[r0,#1]
                  |L1.24820|
0060f4  f1020201          ADD      r2,r2,#1              ;10004
0060f8  b2d2              UXTB     r2,r2                 ;10004
                  |L1.24826|
0060fa  42ba              CMP      r2,r7                 ;10004
0060fc  f6ffaf59          BLT      |L1.24498|
;;;10054  	}
;;;10055  }
006100  e8bd87f0          POP      {r4-r10,pc}
;;;10056  
                          ENDP

                  vent_hndl PROC
;;;10057  //-----------------------------------------------
;;;10058  void vent_hndl(void)
006104  e92d4ff0          PUSH     {r4-r11,lr}
;;;10059  {
006108  b087              SUB      sp,sp,#0x1c
;;;10060  if(RELEVENTSIGN==rvsAKB)
00610a  48ab              LDR      r0,|L1.25528|
;;;10061  	{
;;;10062  	if(vent_stat==0)
00610c  4cab              LDR      r4,|L1.25532|
;;;10063  		{
;;;10064  		if	(
;;;10065  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
00610e  49ac              LDR      r1,|L1.25536|
;;;10066  			||
;;;10067  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;10068  			)
;;;10069  			{
;;;10070  			vent_stat=1;
;;;10071  			}
;;;10072  		}
;;;10073  	else if(vent_stat==1)
;;;10074  		{
;;;10075  		if	(
;;;10076  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006110  4aac              LDR      r2,|L1.25540|
006112  7800              LDRB     r0,[r0,#0]            ;10060  ; RELEVENTSIGN
006114  f9943000          LDRSB    r3,[r4,#0]            ;10062
006118  f9b11000          LDRSH    r1,[r1,#0]            ;10065
00611c  f9b22000          LDRSH    r2,[r2,#0]
006120  b148              CBZ      r0,|L1.24886|
;;;10077  			&&
;;;10078  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;10079  			)
;;;10080  			{
;;;10081  			vent_stat=0;
;;;10082  			}
;;;10083  		}
;;;10084  	}
;;;10085  else if(RELEVENTSIGN==rvsBPS)
006122  2802              CMP      r0,#2
006124  d03c              BEQ      |L1.24992|
;;;10086  	{
;;;10087  /*	if	(
;;;10088  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;10089  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;10090  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;10091  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;10092  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;10093  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;10094  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;10095  		)
;;;10096  		{
;;;10097  		vent_stat=1;
;;;10098  		}
;;;10099  	else vent_stat=0;
;;;10100  	*/
;;;10101  
;;;10102  	if	(
;;;10103  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;10104  		||
;;;10105  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;10106  		||
;;;10107  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;10108  		||
;;;10109  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;10110  		||
;;;10111  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;10112  		||
;;;10113  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;10114  		||
;;;10115  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;10116  		||
;;;10117  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;10118  		)
;;;10119  		{
;;;10120  		vent_stat=1;
;;;10121  		}
;;;10122  	else if(vent_stat==1)
;;;10123  		{
;;;10124  		if	(
;;;10125  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;10126  			&&
;;;10127  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;10128  			&&
;;;10129  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;10130  			&&
;;;10131  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;10132  			&&
;;;10133  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;10134  			&&
;;;10135  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;10136  			&&
;;;10137  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;10138  			&&
;;;10139  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;10140  			)
;;;10141  			{
;;;10142  			vent_stat=0;
;;;10143  			}
;;;10144  		}
;;;10145  	}
;;;10146  else if(RELEVENTSIGN==rvsEXT)
006126  2801              CMP      r0,#1
006128  d07e              BEQ      |L1.25128|
;;;10147  	{
;;;10148  	if	(
;;;10149  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;10150  		||
;;;10151  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;10152  		||
;;;10153  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;10154  		)
;;;10155  		{
;;;10156  		vent_stat=1;
;;;10157  		}
;;;10158  	else if(vent_stat==1)
;;;10159  		{
;;;10160  		if	(
;;;10161  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;10162  			&&
;;;10163  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;10164  			&&
;;;10165  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;10166  			)
;;;10167  			{
;;;10168  			vent_stat=0;
;;;10169  			}
;;;10170  		}
;;;10171  	}
;;;10172  else vent_stat=1;
00612a  f04f0001          MOV      r0,#1
00612e  7020              STRB     r0,[r4,#0]
                  |L1.24880|
;;;10173  }
006130  b007              ADD      sp,sp,#0x1c
006132  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.24886|
006136  4fa4              LDR      r7,|L1.25544|
006138  f8df8290          LDR      r8,|L1.25548|
00613c  f9b7000a          LDRSH    r0,[r7,#0xa]          ;10065
006140  7b3d              LDRB     r5,[r7,#0xc]          ;10065
006142  f9b76056          LDRSH    r6,[r7,#0x56]         ;10067
006146  f898c000          LDRB     r12,[r8,#0]           ;10064
00614a  f8977058          LDRB     r7,[r7,#0x58]         ;10067
00614e  f8988001          LDRB     r8,[r8,#1]            ;10067
006152  b12b              CBZ      r3,|L1.24928|
006154  2b01              CMP      r3,#1                 ;10073
006156  d1eb              BNE      |L1.24880|
006158  f1bc0f55          CMP      r12,#0x55             ;10075
00615c  d115              BNE      |L1.24970|
00615e  e010              B        |L1.24962|
                  |L1.24928|
006160  f1bc0f55          CMP      r12,#0x55             ;10064
006164  d102              BNE      |L1.24940|
006166  4288              CMP      r0,r1                 ;10065
006168  dc07              BGT      |L1.24954|
00616a  b935              CBNZ     r5,|L1.24954|
                  |L1.24940|
00616c  f1b80f55          CMP      r8,#0x55              ;10067
006170  d1de              BNE      |L1.24880|
006172  428e              CMP      r6,r1                 ;10067
006174  dc01              BGT      |L1.24954|
006176  2f00              CMP      r7,#0                 ;10067
006178  d0da              BEQ      |L1.24880|
                  |L1.24954|
00617a  f04f0001          MOV      r0,#1                 ;10070
00617e  7020              STRB     r0,[r4,#0]            ;10070
006180  e7d6              B        |L1.24880|
                  |L1.24962|
006182  4290              CMP      r0,r2                 ;10076
006184  dad4              BGE      |L1.24880|
006186  2d00              CMP      r5,#0                 ;10076
006188  d1d2              BNE      |L1.24880|
                  |L1.24970|
00618a  f1b80f55          CMP      r8,#0x55              ;10078
00618e  d103              BNE      |L1.24984|
006190  4296              CMP      r6,r2                 ;10078
006192  dacd              BGE      |L1.24880|
006194  2f00              CMP      r7,#0                 ;10078
006196  d1cb              BNE      |L1.24880|
                  |L1.24984|
006198  f04f0000          MOV      r0,#0                 ;10081
00619c  7020              STRB     r0,[r4,#0]            ;10081
00619e  e7c7              B        |L1.24880|
                  |L1.24992|
0061a0  4e8c              LDR      r6,|L1.25556|
0061a2  488b              LDR      r0,|L1.25552|
0061a4  6ab5              LDR      r5,[r6,#0x28]         ;10103
0061a6  f9b00000          LDRSH    r0,[r0,#0]            ;10102  ; NUMIST
0061aa  78f6              LDRB     r6,[r6,#3]            ;10103
0061ac  b118              CBZ      r0,|L1.25014|
0061ae  428d              CMP      r5,r1                 ;10103
0061b0  dc7a              BGT      |L1.25256|
0061b2  2e1e              CMP      r6,#0x1e              ;10103
0061b4  d278              BCS      |L1.25256|
                  |L1.25014|
0061b6  f8dfc21c          LDR      r12,|L1.25556|
0061ba  2801              CMP      r0,#1                 ;10105
0061bc  f8dc7084          LDR      r7,[r12,#0x84]        ;10105
0061c0  f89cc05f          LDRB     r12,[r12,#0x5f]       ;10105
0061c4  f8cdc018          STR      r12,[sp,#0x18]        ;10105
0061c8  dd06              BLE      |L1.25048|
0061ca  428f              CMP      r7,r1                 ;10105
0061cc  dc6c              BGT      |L1.25256|
0061ce  f8ddc018          LDR      r12,[sp,#0x18]        ;10105
0061d2  f1bc0f1e          CMP      r12,#0x1e             ;10105
0061d6  d267              BCS      |L1.25256|
                  |L1.25048|
0061d8  f8dfc1f8          LDR      r12,|L1.25556|
0061dc  2802              CMP      r0,#2                 ;10107
0061de  f8dc80e0          LDR      r8,[r12,#0xe0]        ;10107
0061e2  f8cd8014          STR      r8,[sp,#0x14]         ;10107
0061e6  f89cc0bb          LDRB     r12,[r12,#0xbb]       ;10107
0061ea  f8cdc010          STR      r12,[sp,#0x10]        ;10107
0061ee  dd08              BLE      |L1.25090|
0061f0  f8ddc014          LDR      r12,[sp,#0x14]        ;10107
0061f4  458c              CMP      r12,r1                ;10107
0061f6  dc57              BGT      |L1.25256|
0061f8  f8ddc010          LDR      r12,[sp,#0x10]        ;10107
0061fc  f1bc0f1e          CMP      r12,#0x1e             ;10107
006200  d252              BCS      |L1.25256|
                  |L1.25090|
006202  f8dfc1d0          LDR      r12,|L1.25556|
006206  2803              CMP      r0,#3                 ;10109
006208  f8dc813c          LDR      r8,[r12,#0x13c]       ;10109
00620c  f8cd800c          STR      r8,[sp,#0xc]          ;10109
006210  f89cc117          LDRB     r12,[r12,#0x117]      ;10109
006214  f8cdc008          STR      r12,[sp,#8]           ;10109
006218  dd0a              BLE      |L1.25136|
00621a  f8ddc00c          LDR      r12,[sp,#0xc]         ;10109
00621e  458c              CMP      r12,r1                ;10109
006220  dc42              BGT      |L1.25256|
006222  f8ddc008          LDR      r12,[sp,#8]           ;10109
006226  e000              B        |L1.25130|
                  |L1.25128|
006228  e080              B        |L1.25388|
                  |L1.25130|
00622a  f1bc0f1e          CMP      r12,#0x1e             ;10109
00622e  d23b              BCS      |L1.25256|
                  |L1.25136|
006230  f8df81a0          LDR      r8,|L1.25556|
006234  2804              CMP      r0,#4                 ;10111
006236  f8d8c198          LDR      r12,[r8,#0x198]       ;10111
00623a  f8988173          LDRB     r8,[r8,#0x173]        ;10111
00623e  f8cd8004          STR      r8,[sp,#4]            ;10111
006242  dd06              BLE      |L1.25170|
006244  458c              CMP      r12,r1                ;10111
006246  dc2f              BGT      |L1.25256|
006248  f8dd8004          LDR      r8,[sp,#4]            ;10111
00624c  f1b80f1e          CMP      r8,#0x1e              ;10111
006250  d22a              BCS      |L1.25256|
                  |L1.25170|
006252  f8df9180          LDR      r9,|L1.25556|
006256  2805              CMP      r0,#5                 ;10113
006258  f8d981f4          LDR      r8,[r9,#0x1f4]        ;10113
00625c  f89991cf          LDRB     r9,[r9,#0x1cf]        ;10113
006260  f8cd9000          STR      r9,[sp,#0]            ;10113
006264  dd06              BLE      |L1.25204|
006266  4588              CMP      r8,r1                 ;10113
006268  dc1e              BGT      |L1.25256|
00626a  f8dd9000          LDR      r9,[sp,#0]            ;10113
00626e  f1b90f1e          CMP      r9,#0x1e              ;10113
006272  d219              BCS      |L1.25256|
                  |L1.25204|
006274  f8dfa15c          LDR      r10,|L1.25556|
006278  2806              CMP      r0,#6                 ;10115
00627a  f89ae22b          LDRB     lr,[r10,#0x22b]       ;10115
00627e  f8da9250          LDR      r9,[r10,#0x250]       ;10115
006282  dd04              BLE      |L1.25230|
006284  4589              CMP      r9,r1                 ;10115
006286  dc0f              BGT      |L1.25256|
006288  f1be0f1e          CMP      lr,#0x1e              ;10115
00628c  d20c              BCS      |L1.25256|
                  |L1.25230|
00628e  f8dfb144          LDR      r11,|L1.25556|
006292  2807              CMP      r0,#7                 ;10117
006294  f8dba2ac          LDR      r10,[r11,#0x2ac]      ;10117
006298  f89bb287          LDRB     r11,[r11,#0x287]      ;10117
00629c  dd08              BLE      |L1.25264|
00629e  458a              CMP      r10,r1                ;10117
0062a0  dc02              BGT      |L1.25256|
0062a2  f1bb0f1e          CMP      r11,#0x1e             ;10117
0062a6  d303              BCC      |L1.25264|
                  |L1.25256|
0062a8  f04f0001          MOV      r0,#1                 ;10120
0062ac  7020              STRB     r0,[r4,#0]            ;10120
                  |L1.25262|
0062ae  e73f              B        |L1.24880|
                  |L1.25264|
0062b0  2b01              CMP      r3,#1                 ;10122
0062b2  d1fc              BNE      |L1.25262|
0062b4  b118              CBZ      r0,|L1.25278|
0062b6  4295              CMP      r5,r2                 ;10125
0062b8  daf9              BGE      |L1.25262|
0062ba  2e0a              CMP      r6,#0xa               ;10125
0062bc  d2f7              BCS      |L1.25262|
                  |L1.25278|
0062be  2802              CMP      r0,#2                 ;10127
0062c0  db04              BLT      |L1.25292|
0062c2  4297              CMP      r7,r2                 ;10127
0062c4  daf3              BGE      |L1.25262|
0062c6  9906              LDR      r1,[sp,#0x18]         ;10127
0062c8  290a              CMP      r1,#0xa               ;10127
0062ca  d2f0              BCS      |L1.25262|
                  |L1.25292|
0062cc  2803              CMP      r0,#3                 ;10129
0062ce  db05              BLT      |L1.25308|
0062d0  9905              LDR      r1,[sp,#0x14]         ;10129
0062d2  4291              CMP      r1,r2                 ;10129
0062d4  daeb              BGE      |L1.25262|
0062d6  9904              LDR      r1,[sp,#0x10]         ;10129
0062d8  290a              CMP      r1,#0xa               ;10129
0062da  d2e8              BCS      |L1.25262|
                  |L1.25308|
0062dc  2804              CMP      r0,#4                 ;10131
0062de  db05              BLT      |L1.25324|
0062e0  9903              LDR      r1,[sp,#0xc]          ;10131
0062e2  4291              CMP      r1,r2                 ;10131
0062e4  dae3              BGE      |L1.25262|
0062e6  9902              LDR      r1,[sp,#8]            ;10131
0062e8  290a              CMP      r1,#0xa               ;10131
0062ea  d2e0              BCS      |L1.25262|
                  |L1.25324|
0062ec  2805              CMP      r0,#5                 ;10133
0062ee  db04              BLT      |L1.25338|
0062f0  4594              CMP      r12,r2                ;10133
0062f2  dadc              BGE      |L1.25262|
0062f4  9901              LDR      r1,[sp,#4]            ;10133
0062f6  290a              CMP      r1,#0xa               ;10133
0062f8  d2d9              BCS      |L1.25262|
                  |L1.25338|
0062fa  2806              CMP      r0,#6                 ;10135
0062fc  db04              BLT      |L1.25352|
0062fe  4590              CMP      r8,r2                 ;10135
006300  dad5              BGE      |L1.25262|
006302  9900              LDR      r1,[sp,#0]            ;10135
006304  290a              CMP      r1,#0xa               ;10135
006306  d2d2              BCS      |L1.25262|
                  |L1.25352|
006308  2807              CMP      r0,#7                 ;10137
00630a  db04              BLT      |L1.25366|
00630c  4591              CMP      r9,r2                 ;10137
00630e  dace              BGE      |L1.25262|
006310  f1be0f0a          CMP      lr,#0xa               ;10137
006314  d2cb              BCS      |L1.25262|
                  |L1.25366|
006316  2808              CMP      r0,#8                 ;10139
006318  db04              BLT      |L1.25380|
00631a  4592              CMP      r10,r2                ;10139
00631c  dac7              BGE      |L1.25262|
00631e  f1bb0f0a          CMP      r11,#0xa              ;10139
006322  d2c4              BCS      |L1.25262|
                  |L1.25380|
006324  f04f0000          MOV      r0,#0                 ;10142
006328  7020              STRB     r0,[r4,#0]            ;10142
                  |L1.25386|
00632a  e701              B        |L1.24880|
                  |L1.25388|
00632c  482a              LDR      r0,|L1.25560|
00632e  4d2b              LDR      r5,|L1.25564|
006330  4e2b              LDR      r6,|L1.25568|
006332  f9b00000          LDRSH    r0,[r0,#0]            ;10148  ; NUMDT
006336  f9b55000          LDRSH    r5,[r5,#0]            ;10149
00633a  7836              LDRB     r6,[r6,#0]            ;10149
00633c  b110              CBZ      r0,|L1.25412|
00633e  428d              CMP      r5,r1                 ;10149
006340  dc1d              BGT      |L1.25470|
006342  b9e6              CBNZ     r6,|L1.25470|
                  |L1.25412|
006344  4f25              LDR      r7,|L1.25564|
006346  f8dfc098          LDR      r12,|L1.25568|
00634a  2801              CMP      r0,#1                 ;10151
00634c  f9b77002          LDRSH    r7,[r7,#2]            ;10151
006350  f89cc001          LDRB     r12,[r12,#1]          ;10151
006354  dd04              BLE      |L1.25440|
006356  428f              CMP      r7,r1                 ;10151
006358  dc11              BGT      |L1.25470|
00635a  f1bc0f00          CMP      r12,#0                ;10151
00635e  d10e              BNE      |L1.25470|
                  |L1.25440|
006360  f8df8078          LDR      r8,|L1.25564|
006364  f8df9078          LDR      r9,|L1.25568|
006368  2802              CMP      r0,#2                 ;10153
00636a  f9b88004          LDRSH    r8,[r8,#4]            ;10153
00636e  f8999002          LDRB     r9,[r9,#2]            ;10153
006372  dd08              BLE      |L1.25478|
006374  4588              CMP      r8,r1                 ;10153
006376  dc02              BGT      |L1.25470|
006378  f1b90f00          CMP      r9,#0                 ;10153
00637c  d003              BEQ      |L1.25478|
                  |L1.25470|
00637e  f04f0001          MOV      r0,#1                 ;10156
006382  7020              STRB     r0,[r4,#0]            ;10156
006384  e6d4              B        |L1.24880|
                  |L1.25478|
006386  2b01              CMP      r3,#1                 ;10158
006388  d191              BNE      |L1.25262|
00638a  b118              CBZ      r0,|L1.25492|
00638c  4295              CMP      r5,r2                 ;10161
00638e  da8e              BGE      |L1.25262|
006390  2e00              CMP      r6,#0                 ;10161
006392  d18c              BNE      |L1.25262|
                  |L1.25492|
006394  2802              CMP      r0,#2                 ;10163
006396  db04              BLT      |L1.25506|
006398  4297              CMP      r7,r2                 ;10163
00639a  da88              BGE      |L1.25262|
00639c  f1bc0f00          CMP      r12,#0                ;10163
0063a0  d185              BNE      |L1.25262|
                  |L1.25506|
0063a2  2803              CMP      r0,#3                 ;10165
0063a4  db04              BLT      |L1.25520|
0063a6  4590              CMP      r8,r2                 ;10165
0063a8  dabf              BGE      |L1.25386|
0063aa  f1b90f00          CMP      r9,#0                 ;10165
0063ae  d1bc              BNE      |L1.25386|
                  |L1.25520|
0063b0  f04f0000          MOV      r0,#0                 ;10168
0063b4  7020              STRB     r0,[r4,#0]            ;10168
0063b6  e6bb              B        |L1.24880|
;;;10174  
                          ENDP

                  |L1.25528|
                          DCD      RELEVENTSIGN
                  |L1.25532|
                          DCD      ||area_number.25||
                  |L1.25536|
                          DCD      TVENTON
                  |L1.25540|
                          DCD      TVENTOFF
                  |L1.25544|
                          DCD      bat
                  |L1.25548|
                          DCD      BAT_IS_ON
                  |L1.25552|
                          DCD      NUMIST
                  |L1.25556|
                          DCD      bps
                  |L1.25560|
                          DCD      NUMDT
                  |L1.25564|
                          DCD      t_ext
                  |L1.25568|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  4902              LDR      r1,|L2.12|
;;;297    {          
000002  f24060f9          MOV      r0,#0x6f9
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  f8a1004a          STRH     r0,[r1,#0x4a]
00000a  4770              BX       lr
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
;;;315    
;;;316    	spc_stat=spcKE;
;;;317    	__ee_spc_stat=spcKE;
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
;;;319    	
;;;320    	spc_bat=0;
;;;321    	__ee_spc_bat=0;
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
;;;329    
;;;330    	
;;;331    	spc_phase=0;
;;;332    	__ee_spc_phase=0;
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
;;;343    		gran_char(&temp,1,99);
;;;344    		*((char*)(&(ke_date[0])))=temp;
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
;;;347    		gran_char(&temp,1,12);
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
;;;351    		gran_char(&temp,1,31);
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
;;;358    		gran_char(&temp,0,23);
;;;359    		*((char*)(&(ke_date[1])))=temp;
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
;;;362    		gran_char(&temp,0,59);
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
;;;366    		gran_char(&temp,0,59);
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
;;;373    	}
;;;374    }
;;;375    #endif
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;297    {          
000004  4c80              LDR      r4,|L3.520|
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  b200              SXTH     r0,r0
00000e  f7fffffe          BL       abs_pal
000012  1da5              ADDS     r5,r4,#6
000014  8028              STRH     r0,[r5,#0]
;;;315    
;;;316    	spc_stat=spcKE;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;317    	__ee_spc_stat=spcKE;
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
000028  1a40              SUBS     r0,r0,r1
;;;319    	
;;;320    	spc_bat=0;
00002a  b200              SXTH     r0,r0
;;;321    	__ee_spc_bat=0;
00002c  f7fffffe          BL       abs_pal
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000030  80a8              STRH     r0,[r5,#4]
000032  f44f7196          MOV      r1,#0x12c
000036  f1a406ea          SUB      r6,r4,#0xea
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000040  86f0              STRH     r0,[r6,#0x36]
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004e  86f0              STRH     r0,[r6,#0x36]
000050  e005              B        |L3.94|
                  |L3.82|
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000052  f9b50000          LDRSH    r0,[r5,#0]  ; adc_self_ch_disp
000056  4288              CMP      r0,r1
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
;;;329    
;;;330    	
;;;331    	spc_phase=0;
00005c  86f0              STRH     r0,[r6,#0x36]
                  |L3.94|
;;;332    	__ee_spc_phase=0;
00005e  7b77              LDRB     r7,[r6,#0xd]  ; adc_ch_net
000060  2200              MOVS     r2,#0
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000062  b3f7              CBZ      r7,|L3.226|
000064  7c33              LDRB     r3,[r6,#0x10]  ; adc_window_flag
000066  4869              LDR      r0,|L3.524|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006e  6804              LDR      r4,[r0,#0]  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2
000074  6004              STR      r4,[r0,#0]  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2
00007c  6044              STR      r4,[r0,#4]  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2
000084  6084              STR      r4,[r0,#8]  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
00008c  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
                  |L3.142|
00008e  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
;;;343    		gran_char(&temp,1,99);
000092  2964              CMP      r1,#0x64
000094  da04              BGE      |L3.160|
000096  8f71              LDRH     r1,[r6,#0x3a]  ; adc_zero_cnt
000098  f1010101          ADD      r1,r1,#1
00009c  8771              STRH     r1,[r6,#0x3a]
00009e  e000              B        |L3.162|
                  |L3.160|
;;;344    		*((char*)(&(ke_date[0])))=temp;
0000a0  8772              STRH     r2,[r6,#0x3a]
                  |L3.162|
0000a2  f9b6403a          LDRSH    r4,[r6,#0x3a]  ; adc_zero_cnt
0000a6  f44f61fa          MOV      r1,#0x7d0
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000aa  428c              CMP      r4,r1
0000ac  db05              BLT      |L3.186|
;;;347    		gran_char(&temp,1,12);
0000ae  8771              STRH     r1,[r6,#0x3a]
0000b0  6002              STR      r2,[r0,#0]  ; main_power_buffer
0000b2  6042              STR      r2,[r0,#4]  ; main_power_buffer
0000b4  6082              STR      r2,[r0,#8]  ; main_power_buffer
0000b6  60c2              STR      r2,[r0,#0xc]  ; main_power_buffer
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b8  86b2              STRH     r2,[r6,#0x34]
                  |L3.186|
0000ba  8f71              LDRH     r1,[r6,#0x3a]  ; adc_zero_cnt
0000bc  2905              CMP      r1,#5
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000be  d14f              BNE      |L3.352|
0000c0  b1bb              CBZ      r3,|L3.242|
;;;351    		gran_char(&temp,1,31);
0000c2  8f31              LDRH     r1,[r6,#0x38]  ; adc_gorb_cnt
0000c4  f1010101          ADD      r1,r1,#1
0000c8  b209              SXTH     r1,r1
0000ca  8731              STRH     r1,[r6,#0x38]
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000cc  f5b17f00          CMP      r1,#0x200
0000d0  db00              BLT      |L3.212|
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d2  8732              STRH     r2,[r6,#0x38]
                  |L3.212|
0000d4  f9b61038          LDRSH    r1,[r6,#0x38]  ; adc_gorb_cnt
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d8  064c              LSLS     r4,r1,#25
0000da  d10a              BNE      |L3.242|
0000dc  ea4f11e1          ASR      r1,r1,#7
0000e0  e000              B        |L3.228|
                  |L3.226|
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e2  e015              B        |L3.272|
                  |L3.228|
0000e4  f8504021          LDR      r4,[r0,r1,LSL #2]
;;;358    		gran_char(&temp,0,23);
0000e8  ea4f2424          ASR      r4,r4,#8
0000ec  86b4              STRH     r4,[r6,#0x34]
0000ee  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L3.242|
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000f2  f9b6003c          LDRSH    r0,[r6,#0x3c]  ; adc_window_cnt
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f6  2896              CMP      r0,#0x96
0000f8  dd01              BLE      |L3.254|
;;;362    		gran_char(&temp,0,59);
0000fa  b103              CBZ      r3,|L3.254|
0000fc  7432              STRB     r2,[r6,#0x10]
                  |L3.254|
0000fe  381f              SUBS     r0,r0,#0x1f
000100  2827              CMP      r0,#0x27
000102  d22d              BCS      |L3.352|
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000104  7c30              LDRB     r0,[r6,#0x10]  ; adc_window_flag
000106  bb58              CBNZ     r0,|L3.352|
000108  f04f0001          MOV      r0,#1
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
00010c  7430              STRB     r0,[r6,#0x10]
;;;366    		gran_char(&temp,0,59);
00010e  e027              B        |L3.352|
                  |L3.272|
000110  483f              LDR      r0,|L3.528|
000112  7bb5              LDRB     r5,[r6,#0xe]  ; adc_ch
000114  7bf3              LDRB     r3,[r6,#0xf]  ; adc_ch_cnt
000116  eb001485          ADD      r4,r0,r5,LSL #6
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
00011a  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011e  f8441023          STR      r1,[r4,r3,LSL #2]
000122  0798              LSLS     r0,r3,#30
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000124  d10f              BNE      |L3.326|
000126  4601              MOV      r1,r0
                  |L3.296|
000128  f854c020          LDR      r12,[r4,r0,LSL #2]
00012c  4461              ADD      r1,r1,r12
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012e  f1000001          ADD      r0,r0,#1
;;;373    	}
;;;374    }
000132  b2c0              UXTB     r0,r0
000134  2810              CMP      r0,#0x10
000136  d3f7              BCC      |L3.296|
000138  ea4f1021          ASR      r0,r1,#4
00013c  4933              LDR      r1,|L3.524|
00013e  f1a10120          SUB      r1,r1,#0x20
000142  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.326|
000146  1c6d              ADDS     r5,r5,#1
000148  b2e8              UXTB     r0,r5
00014a  73b0              STRB     r0,[r6,#0xe]
00014c  2810              CMP      r0,#0x10
00014e  d307              BCC      |L3.352|
000150  73b2              STRB     r2,[r6,#0xe]
000152  f1030301          ADD      r3,r3,#1
000156  b2d8              UXTB     r0,r3
000158  73f0              STRB     r0,[r6,#0xf]
00015a  2810              CMP      r0,#0x10
00015c  d300              BCC      |L3.352|
00015e  73f2              STRB     r2,[r6,#0xf]
                  |L3.352|
000160  7332              STRB     r2,[r6,#0xc]
000162  f1070701          ADD      r7,r7,#1
000166  f0070001          AND      r0,r7,#1
00016a  7370              STRB     r0,[r6,#0xd]
00016c  4a29              LDR      r2,|L3.532|
00016e  b130              CBZ      r0,|L3.382|
000170  6810              LDR      r0,[r2,#0]
000172  f02000ff          BIC      r0,r0,#0xff
000176  f1000004          ADD      r0,r0,#4
00017a  6010              STR      r0,[r2,#0]
00017c  e03d              B        |L3.506|
                  |L3.382|
00017e  7bb1              LDRB     r1,[r6,#0xe]  ; adc_ch
000180  0708              LSLS     r0,r1,#28
000182  d406              BMI      |L3.402|
000184  6810              LDR      r0,[r2,#0]
000186  f02000ff          BIC      r0,r0,#0xff
00018a  f1000001          ADD      r0,r0,#1
00018e  6010              STR      r0,[r2,#0]
000190  e005              B        |L3.414|
                  |L3.402|
000192  6810              LDR      r0,[r2,#0]
000194  f02000ff          BIC      r0,r0,#0xff
000198  f1000002          ADD      r0,r0,#2
00019c  6010              STR      r0,[r2,#0]
                  |L3.414|
00019e  481e              LDR      r0,|L3.536|
0001a0  6803              LDR      r3,[r0,#0]
0001a2  f0435380          ORR      r3,r3,#0x10000000
0001a6  6003              STR      r3,[r0,#0]
0001a8  6a03              LDR      r3,[r0,#0x20]
0001aa  f0434380          ORR      r3,r3,#0x40000000
0001ae  6203              STR      r3,[r0,#0x20]
0001b0  6e03              LDR      r3,[r0,#0x60]
0001b2  f0436380          ORR      r3,r3,#0x4000000
0001b6  6603              STR      r3,[r0,#0x60]
0001b8  07cb              LSLS     r3,r1,#31
0001ba  d00a              BEQ      |L3.466|
0001bc  6943              LDR      r3,[r0,#0x14]
0001be  f0435380          ORR      r3,r3,#0x10000000
0001c2  6143              STR      r3,[r0,#0x14]
                  |L3.452|
0001c4  078b              LSLS     r3,r1,#30
0001c6  d409              BMI      |L3.476|
0001c8  6b43              LDR      r3,[r0,#0x34]
0001ca  f0234380          BIC      r3,r3,#0x40000000
0001ce  6343              STR      r3,[r0,#0x34]
0001d0  e008              B        |L3.484|
                  |L3.466|
0001d2  6943              LDR      r3,[r0,#0x14]
0001d4  f0235380          BIC      r3,r3,#0x10000000
0001d8  6143              STR      r3,[r0,#0x14]
0001da  e7f3              B        |L3.452|
                  |L3.476|
0001dc  6b43              LDR      r3,[r0,#0x34]
0001de  f0434380          ORR      r3,r3,#0x40000000
0001e2  6343              STR      r3,[r0,#0x34]
                  |L3.484|
0001e4  0749              LSLS     r1,r1,#29
0001e6  d404              BMI      |L3.498|
0001e8  6f41              LDR      r1,[r0,#0x74]
0001ea  f0216180          BIC      r1,r1,#0x4000000
0001ee  6741              STR      r1,[r0,#0x74]
0001f0  e003              B        |L3.506|
                  |L3.498|
0001f2  6f41              LDR      r1,[r0,#0x74]
0001f4  f0416180          ORR      r1,r1,#0x4000000
0001f8  6741              STR      r1,[r0,#0x74]
                  |L3.506|
0001fa  6810              LDR      r0,[r2,#0]
0001fc  f0407080          ORR      r0,r0,#0x1000000
000200  6010              STR      r0,[r2,#0]
000202  e8bd81f0          POP      {r4-r8,pc}
;;;375    #endif
                          ENDP

000206  0000              DCW      0x0000
                  |L3.520|
                          DCD      ||area_number.25||+0xea
                  |L3.524|
                          DCD      ||.bss||+0x42c
                  |L3.528|
                          DCD      ||.bss||+0xc
                  |L3.532|
                          DCD      0x40034000
                  |L3.536|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;297    {          
000004  b085              SUB      sp,sp,#0x14
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  7820              LDRB     r0,[r4,#0]  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1
000010  b2c0              UXTB     r0,r0
000012  7020              STRB     r0,[r4,#0]
000014  280a              CMP      r0,#0xa
;;;315    
;;;316    	spc_stat=spcKE;
000016  d340              BCC      |L4.154|
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;317    	__ee_spc_stat=spcKE;
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]
;;;319    	
;;;320    	spc_bat=0;
00002a  485e              LDR      r0,|L4.420|
;;;321    	__ee_spc_bat=0;
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]  ; bps_I
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000032  8008              STRH     r0,[r1,#0]
000034  495d              LDR      r1,|L4.428|
000036  f8df8178          LDR      r8,|L4.432|
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]
00004c  4288              CMP      r0,r1
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000054  f1b90f0a          CMP      r9,#0xa
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1
;;;329    
;;;330    	
;;;331    	spc_phase=0;
00005c  d007              BEQ      |L4.110|
                  |L4.94|
;;;332    	__ee_spc_phase=0;
00005e  4288              CMP      r0,r1
000060  da16              BGE      |L4.144|
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000062  1a08              SUBS     r0,r1,r0
000064  280a              CMP      r0,#0xa
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1
00006a  d009              BEQ      |L4.128|
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1
000072  f88c2001          STRB     r2,[r12,#1]
000076  f1a30301          SUB      r3,r3,#1
00007a  f8a83000          STRH     r3,[r8,#0]
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1
000084  f88c2001          STRB     r2,[r12,#1]
000088  f1030301          ADD      r3,r3,#1
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
00008c  f8a83000          STRH     r3,[r8,#0]
                  |L4.144|
000090  2214              MOVS     r2,#0x14
;;;343    		gran_char(&temp,1,99);
000092  4251              RSBS     r1,r2,#0
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
;;;344    		*((char*)(&(ke_date[0])))=temp;
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]  ; ICA_EN
0000a8  2801              CMP      r0,#1
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]  ; ICA_MODBUS_ADDRESS
;;;347    		gran_char(&temp,1,12);
0000b0  f88d0000          STRB     r0,[sp,#0]
0000b4  f04f0004          MOV      r0,#4
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b8  f88d0001          STRB     r0,[sp,#1]
0000bc  f88d5002          STRB     r5,[sp,#2]
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000c0  f04f0002          MOV      r0,#2
;;;351    		gran_char(&temp,1,31);
0000c4  f88d0003          STRB     r0,[sp,#3]
0000c8  f88d5004          STRB     r5,[sp,#4]
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000cc  f04f0001          MOV      r0,#1
0000d0  f88d0005          STRB     r0,[sp,#5]
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d4  f04f0106          MOV      r1,#6
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d8  4668              MOV      r0,sp
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e2  ea4f2020          ASR      r0,r0,#8
;;;358    		gran_char(&temp,0,23);
0000e6  f88d0007          STRB     r0,[sp,#7]
0000ea  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000f0  2801              CMP      r0,#1
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f8  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
;;;362    		gran_char(&temp,0,59);
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4
000100  eb020181          ADD      r1,r2,r1,LSL #2
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000104  4a2e              LDR      r2,|L4.448|
000106  f9b2204c          LDRSH    r2,[r2,#0x4c]  ; main_kb_cnt
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
00010a  4291              CMP      r1,r2
00010c  d134              BNE      |L4.376|
;;;366    		gran_char(&temp,0,59);
00010e  8831              LDRH     r1,[r6,#0]  ; ICA_EN
000110  2901              CMP      r1,#1
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000118  f88d1000          STRB     r1,[sp,#0]
00011c  f04f0106          MOV      r1,#6
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000120  f88d1001          STRB     r1,[sp,#1]
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000124  f88d5002          STRB     r5,[sp,#2]
000128  f04f011e          MOV      r1,#0x1e
00012c  f88d1003          STRB     r1,[sp,#3]
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
;;;373    	}
;;;374    }
000130  ea4f71e0          ASR      r1,r0,#31
000134  eb006111          ADD      r1,r0,r1,LSR #24
000138  ea4f2221          ASR      r2,r1,#8
00013c  f88d2004          STRB     r2,[sp,#4]
000140  f88d0005          STRB     r0,[sp,#5]
000144  f04f0106          MOV      r1,#6
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]
000152  ea4f2020          ASR      r0,r0,#8
000156  f88d0007          STRB     r0,[sp,#7]
00015a  8838              LDRH     r0,[r7,#0]  ; ICA_CH
00015c  2800              CMP      r0,#0
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0
000162  466d              MOV      r5,sp
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1
000172  b2e4              UXTB     r4,r4
000174  2c08              CMP      r4,#8
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14
00017a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.382|
00017e  f04f0400          MOV      r4,#0
000182  46e9              MOV      r9,sp
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1
000190  b2e4              UXTB     r4,r4
000192  2c08              CMP      r4,#8
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;375    #endif
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  b570              PUSH     {r4-r6,lr}
;;;297    {          
000002  4604              MOV      r4,r0
000004  f04f0207          MOV      r2,#7
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000008  f04f0101          MOV      r1,#1
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
000012  48a4              LDR      r0,|L5.676|
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;315    
;;;316    	spc_stat=spcKE;
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;317    	__ee_spc_stat=spcKE;
00001c  f8950047          LDRB     r0,[r5,#0x47]
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1
000028  4a9f              LDR      r2,|L5.680|
;;;319    	
;;;320    	spc_bat=0;
00002a  b100              CBZ      r0,|L5.46|
;;;321    	__ee_spc_bat=0;
00002c  7050              STRB     r0,[r2,#1]
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000032  b101              CBZ      r1,|L5.54|
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
000036  ea000301          AND      r3,r0,r1
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000040  f1000001          ADD      r0,r0,#1
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1
000058  461a              MOV      r2,r3
00005a  210e              MOVS     r1,#0xe
;;;329    
;;;330    	
;;;331    	spc_phase=0;
00005c  a093              ADR      r0,|L5.684|
;;;332    	__ee_spc_phase=0;
00005e  f7fffffe          BL       snmp_trap_send
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1
000066  2202              MOVS     r2,#2
000068  210e              MOVS     r1,#0xe
00006a  a097              ADR      r0,|L5.712|
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1
000074  2203              MOVS     r2,#3
000076  210e              MOVS     r1,#0xe
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1
000082  2204              MOVS     r2,#4
000084  210e              MOVS     r1,#0xe
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30
000090  d529              BPL      |L5.230|
;;;343    		gran_char(&temp,1,99);
000092  078b              LSLS     r3,r1,#30
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1
00009c  70d0              STRB     r0,[r2,#3]
00009e  b134              CBZ      r4,|L5.174|
;;;344    		*((char*)(&(ke_date[0])))=temp;
0000a0  2c01              CMP      r4,#1
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
;;;347    		gran_char(&temp,1,12);
0000ae  2302              MOVS     r3,#2
0000b0  2201              MOVS     r2,#1
0000b2  210e              MOVS     r1,#0xe
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000be  461a              MOV      r2,r3
0000c0  210e              MOVS     r1,#0xe
;;;351    		gran_char(&temp,1,31);
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000cc  2203              MOVS     r2,#3
0000ce  210e              MOVS     r1,#0xe
0000d0  a0a0              ADR      r0,|L5.852|
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d8  2302              MOVS     r3,#2
0000da  2204              MOVS     r2,#4
0000dc  210e              MOVS     r1,#0xe
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e4  e0d8              B        |L5.664|
                  |L5.230|
;;;358    		gran_char(&temp,0,23);
0000e6  0743              LSLS     r3,r0,#29
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000f0  f1000001          ADD      r0,r0,#1
0000f4  70d0              STRB     r0,[r2,#3]
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1
;;;362    		gran_char(&temp,0,59);
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3
000102  d015              BEQ      |L5.304|
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3
000108  2201              MOVS     r2,#1
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
00010a  210e              MOVS     r1,#0xe
00010c  a09f              ADR      r0,|L5.908|
;;;366    		gran_char(&temp,0,59);
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3
000116  2202              MOVS     r2,#2
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000118  210e              MOVS     r1,#0xe
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000124  461a              MOV      r2,r3
000126  210e              MOVS     r1,#0xe
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012e  e0b3              B        |L5.664|
                  |L5.304|
;;;373    	}
;;;374    }
000130  2303              MOVS     r3,#3
000132  2204              MOVS     r2,#4
000134  210e              MOVS     r1,#0xe
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1
00014c  70d0              STRB     r0,[r2,#3]
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4
000160  2201              MOVS     r2,#1
000162  210e              MOVS     r1,#0xe
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4
00016e  2202              MOVS     r2,#2
000170  210e              MOVS     r1,#0xe
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4
00017c  2203              MOVS     r2,#3
00017e  210e              MOVS     r1,#0xe
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4
00018a  461a              MOV      r2,r3
00018c  210e              MOVS     r1,#0xe
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1
0001a4  70d0              STRB     r0,[r2,#3]
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5
0001b8  2201              MOVS     r2,#1
0001ba  210e              MOVS     r1,#0xe
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5
0001c6  2202              MOVS     r2,#2
0001c8  210e              MOVS     r1,#0xe
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5
0001d4  2203              MOVS     r2,#3
0001d6  210e              MOVS     r1,#0xe
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5
0001e2  2204              MOVS     r2,#4
0001e4  210e              MOVS     r1,#0xe
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1
0001fc  70d0              STRB     r0,[r2,#3]
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6
000210  2201              MOVS     r2,#1
000212  210e              MOVS     r1,#0xe
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6
00021e  2202              MOVS     r2,#2
000220  210e              MOVS     r1,#0xe
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6
00022c  2203              MOVS     r2,#3
00022e  210e              MOVS     r1,#0xe
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6
00023a  2204              MOVS     r2,#4
00023c  210e              MOVS     r1,#0xe
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1
000250  70d0              STRB     r0,[r2,#3]
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0
000264  2201              MOVS     r2,#1
000266  210e              MOVS     r1,#0xe
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0
000272  2202              MOVS     r2,#2
000274  210e              MOVS     r1,#0xe
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0
000280  2203              MOVS     r2,#3
000282  210e              MOVS     r1,#0xe
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0
00028e  2204              MOVS     r2,#4
000290  210e              MOVS     r1,#0xe
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!
00029c  7068              STRB     r0,[r5,#1]
00029e  bd70              POP      {r4-r6,pc}
;;;375    #endif
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb4
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;297    {          
000004  4d66              LDR      r5,|L6.416|
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000e  f9b02000          LDRSH    r2,[r0,#0]  ; TBOXMAX
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;315    
;;;316    	spc_stat=spcKE;
000016  4291              CMP      r1,r2
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;317    	__ee_spc_stat=spcKE;
00001e  8020              STRH     r0,[r4,#0]
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
;;;319    	
;;;320    	spc_bat=0;
00002a  2206              MOVS     r2,#6
;;;321    	__ee_spc_bat=0;
00002c  2100              MOVS     r1,#0
00002e  485e              LDR      r0,|L6.424|
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
000038  495c              LDR      r1,|L6.428|
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
00003e  dd00              BLE      |L6.66|
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]  ; t_box
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
000050  4a58              LDR      r2,|L6.436|
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000052  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2
00005a  4298              CMP      r0,r3
;;;329    
;;;330    	
;;;331    	spc_phase=0;
00005c  da0f              BGE      |L6.126|
;;;332    	__ee_spc_phase=0;
00005e  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000062  291e              CMP      r1,#0x1e
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1
00006a  b249              SXTB     r1,r1
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006c  7011              STRB     r1,[r2,#0]
00006e  291e              CMP      r1,#0x1e
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1
000078  8039              STRH     r1,[r7,#0]
00007a  7014              STRB     r4,[r2,#0]
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000086  291e              CMP      r1,#0x1e
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
00008e  b249              SXTB     r1,r1
000090  7011              STRB     r1,[r2,#0]
;;;343    		gran_char(&temp,1,99);
000092  291e              CMP      r1,#0x1e
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1
00009c  8039              STRH     r1,[r7,#0]
00009e  7014              STRB     r4,[r2,#0]
;;;344    		*((char*)(&(ke_date[0])))=temp;
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXVENTMAX
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000aa  4288              CMP      r0,r1
0000ac  dd05              BLE      |L6.186|
;;;347    		gran_char(&temp,1,12);
0000ae  2214              MOVS     r2,#0x14
0000b0  2100              MOVS     r1,#0
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000be  8800              LDRH     r0,[r0,#0]  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9
;;;351    		gran_char(&temp,1,31);
0000c2  b202              SXTH     r2,r0
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]  ; mess_data
0000d6  29f1              CMP      r1,#0xf1
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]  ; main_vent_pos
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1
;;;358    		gran_char(&temp,0,23);
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]  ; TBATDISABLE
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f8  f1a00132          SUB      r1,r0,#0x32
;;;362    		gran_char(&temp,0,59);
0000fc  2928              CMP      r1,#0x28
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L6.274|
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
;;;366    		gran_char(&temp,0,59);
000110  8038              STRH     r0,[r7,#0]
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000118  4281              CMP      r1,r0
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011e  f1a00001          SUB      r0,r0,#1
000122  8038              STRH     r0,[r7,#0]
                  |L6.292|
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
;;;373    	}
;;;374    }
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L6.314|
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L6.380|
00017c  2206              MOVS     r2,#6
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L6.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L6.406|
;;;375    #endif
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;297    {          
000004  484e              LDR      r0,|L7.320|
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64
00000a  f9b00000          LDRSH    r0,[r0,#0]
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;315    
;;;316    	spc_stat=spcKE;
000016  fbb1f1f5          UDIV     r1,r1,r5
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;317    	__ee_spc_stat=spcKE;
00001e  fbb0f0f5          UDIV     r0,r0,r5
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
;;;319    	
;;;320    	spc_bat=0;
00002a  b201              SXTH     r1,r0
;;;321    	__ee_spc_bat=0;
00002c  f89b0000          LDRB     r0,[r11,#0]
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000030  4e45              LDR      r6,|L7.328|
000032  4f46              LDR      r7,|L7.332|
000034  f8df8118          LDR      r8,|L7.336|
000038  f8df9118          LDR      r9,|L7.340|
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
00003c  f8dfa118          LDR      r10,|L7.344|
000040  2500              MOVS     r5,#0
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004e  f8a81000          STRH     r1,[r8,#0]
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000052  2801              CMP      r0,#1
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]
                  |L7.88|
000058  230a              MOVS     r3,#0xa
00005a  2200              MOVS     r2,#0
;;;329    
;;;330    	
;;;331    	spc_phase=0;
00005c  21e6              MOVS     r1,#0xe6
;;;332    	__ee_spc_phase=0;
00005e  20e1              MOVS     r0,#0xe1
000060  f7fffffe          BL       mess_send
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000064  f04f0201          MOV      r2,#1
000068  f04f0000          MOV      r0,#0
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006c  f9b73000          LDRSH    r3,[r7,#0]
000070  f9b85000          LDRSH    r5,[r8,#0]
000074  f9ba6000          LDRSH    r6,[r10,#0]
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  ebc001c0          RSB      r1,r0,r0,LSL #3
00007e  eb011100          ADD      r1,r1,r0,LSL #4
000082  eb090181          ADD      r1,r9,r1,LSL #2
000086  69c9              LDR      r1,[r1,#0x1c]
000088  4299              CMP      r1,r3
00008a  da09              BGE      |L7.160|
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
00008c  42a9              CMP      r1,r5
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1
;;;343    		gran_char(&temp,1,99);
000094  b2c0              UXTB     r0,r0
                  |L7.150|
000096  42b0              CMP      r0,r6
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
;;;344    		*((char*)(&(ke_date[0])))=temp;
0000a0  f04f0200          MOV      r2,#0
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000aa  7020              STRB     r0,[r4,#0]
0000ac  e040              B        |L7.304|
                  |L7.174|
;;;347    		gran_char(&temp,1,12);
0000ae  803a              STRH     r2,[r7,#0]
0000b0  f8a81000          STRH     r1,[r8,#0]
0000b4  2802              CMP      r0,#2
0000b6  d000              BEQ      |L7.186|
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b8  7035              STRB     r5,[r6,#0]
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa
0000bc  2200              MOVS     r2,#0
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000be  21e6              MOVS     r1,#0xe6
0000c0  20e1              MOVS     r0,#0xe1
;;;351    		gran_char(&temp,1,31);
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1
0000ca  f04f0000          MOV      r0,#0
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000ce  f9b73000          LDRSH    r3,[r7,#0]
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d2  f9b87000          LDRSH    r7,[r8,#0]
0000d6  f9bac000          LDRSH    r12,[r10,#0]
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  ebc001c0          RSB      r1,r0,r0,LSL #3
0000e0  eb011100          ADD      r1,r1,r0,LSL #4
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e4  eb090181          ADD      r1,r9,r1,LSL #2
;;;358    		gran_char(&temp,0,23);
0000e8  69c9              LDR      r1,[r1,#0x1c]
0000ea  4299              CMP      r1,r3
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f6  b2c0              UXTB     r0,r0
                  |L7.248|
0000f8  4560              CMP      r0,r12
;;;362    		gran_char(&temp,0,59);
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
00010a  e9cd0500          STRD     r0,r5,[sp,#0]
;;;366    		gran_char(&temp,0,59);
00010e  9502              STR      r5,[sp,#8]
000110  9503              STR      r5,[sp,#0xc]
000112  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
000114  4603              MOV      r3,r0
000116  2216              MOVS     r2,#0x16
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000118  4608              MOV      r0,r1
00011a  f7fffffe          BL       mcp2515_transmit
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011e  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1
000122  b2c0              UXTB     r0,r0
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000124  7030              STRB     r0,[r6,#0]
000126  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
00012a  4288              CMP      r0,r1
00012c  db00              BLT      |L7.304|
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012e  7025              STRB     r5,[r4,#0]
                  |L7.304|
;;;373    	}
;;;374    }
000130  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]
000136  e8bd9fff          POP      {r0-r12,pc}
;;;375    #endif
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  4908              LDR      r1,|L8.36|
;;;297    {          
000002  f44f70b4          MOV      r0,#0x168
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000e  700a              STRB     r2,[r1,#0]
000010  f04f0100          MOV      r1,#0
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;315    
;;;316    	spc_stat=spcKE;
000018  f04f0201          MOV      r2,#1
;;;317    	__ee_spc_stat=spcKE;
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000020  f7ffbffe          B.W      lc640_write
;;;319    	
;;;320    	spc_bat=0;
;;;321    	__ee_spc_bat=0;
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
;;;329    
;;;330    	
;;;331    	spc_phase=0;
;;;332    	__ee_spc_phase=0;
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
;;;343    		gran_char(&temp,1,99);
;;;344    		*((char*)(&(ke_date[0])))=temp;
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
;;;347    		gran_char(&temp,1,12);
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
;;;351    		gran_char(&temp,1,31);
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
;;;358    		gran_char(&temp,0,23);
;;;359    		*((char*)(&(ke_date[1])))=temp;
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
;;;362    		gran_char(&temp,0,59);
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
;;;366    		gran_char(&temp,0,59);
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
;;;373    	}
;;;374    }
;;;375    #endif
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz1_stat
000001  00                DCB      0x00
                  vz1_stat_old
000002  00                DCB      0x00
                  vz2_stat
000003  00                DCB      0x00
                  vz2_stat_old
000004  00                DCB      0x00
                  bat_hndl_zvu_init
000005  00                DCB      0x00
                  bat_hndl_zvu_ke_init
000006  00                DCB      0x00
                  bat_hndl_i_vector
000007  00                DCB      0x00
                  bat_hndl_i_vector_old
000008  00                DCB      0x00
                  ke_drv_cnt_10s
000009  00                DCB      0x00
                  i_bat_buff_cnt
00000a  00                DCB      0x00
                  cntrlStatIsDownCnt
00000b  00                DCB      0x00
                  adc_self_ch_cnt
00000c  00                DCB      0x00
                  adc_ch_net
00000d  00                DCB      0x00
                  adc_ch
00000e  00                DCB      0x00
                  adc_ch_cnt
00000f  00                DCB      0x00
                  adc_window_flag
000010  00                DCB      0x00
                  ch_cnt0
000011  00                DCB      0x00
                  b1Hz_ch
000012  00                DCB      0x00
                  i
000013  00                DCB      0x00
                  iiii
000014  00                DCB      0x00
                  bAVG
000015  00                DCB      0x00
                  avg_num
000016  00                DCB      0x00
                  kb_full_ver
000017  00                DCB      0x00
                  kb_start_ips
000018  00                DCB      0x00
                  num_of_wrks_bps
000019  00                DCB      0x00
                  num_necc_up
00001a  00                DCB      0x00
                  num_necc_down
00001b  00                DCB      0x00
                  sh_cnt0
00001c  00                DCB      0x00
                  b1Hz_sh
00001d  00                DCB      0x00
                  spc_stat
00001e  00                DCB      0x00
                  spc_bat
00001f  00                DCB      0x00
                  spc_phase
000020  00                DCB      0x00
                  bAVZ
000021  00                DCB      0x00
                  ke_start_stat
000022  00                DCB      0x00
                  numOfForvardBps
000023  00                DCB      0x00
                  numOfForvardBps_old
000024  00                DCB      0x00
                  numOfForvardBps_minCnt
000025  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
000026  00                DCB      0x00
                  bPARALLEL_ENOUG
000027  00                DCB      0x00
                  bPARALLEL
000028  00                DCB      0x00
                  cntrl_hndl_plazma
000029  00                DCB      0x00
                  volt_region
00002a  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
00002b  00                DCB      0x00
                  cntrl_stat
00002c  0258              DCW      0x0258
                  cntrl_stat_old
00002e  0258              DCW      0x0258
                  avg_main_cnt
000030  0014              DCW      0x0014
                  num_necc_block_cnt
000032  0000              DCB      0x00,0x00
                  net_buff_
000034  0000              DCB      0x00,0x00
                  adc_result
000036  0000              DCB      0x00,0x00
                  adc_gorb_cnt
000038  0000              DCB      0x00,0x00
                  adc_zero_cnt
00003a  0000              DCB      0x00,0x00
                  adc_window_cnt
00003c  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
00003e  0000              DCB      0x00,0x00
                  plazma_sk
000040  0000              DCB      0x00,0x00
                  cntrl_stat_new
000042  0000              DCB      0x00,0x00
                  Ibmax
000044  0000              DCB      0x00,0x00
                  IZMAX_
000046  0000              DCB      0x00,0x00
                  Ubpsmax
000048  0000              DCB      0x00,0x00
                  samokalibr_cnt
00004a  0000              DCB      0x00,0x00
                  main_kb_cnt
00004c  0000              DCB      0x00,0x00
                  kb_cnt_1lev
00004e  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000050  0000              DCB      0x00,0x00
                  kb_start
000052  0000              DCB      0x00,0x00
                  ibat_ips
000054  0000              DCB      0x00,0x00
                  ibat_ips_
000056  0000              DCB      0x00,0x00
                  bps_on_mask
000058  0000              DCB      0x00,0x00
                  bps_off_mask
00005a  0000              DCB      0x00,0x00
                  vz_cnt_s
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s_
00005e  0000              DCB      0x00,0x00
                  vz_cnt_h
000060  0000              DCB      0x00,0x00
                  vz_cnt_h_
000062  0000              DCB      0x00,0x00
                  cnt_end_ke
000064  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000066  0000              DCB      0x00,0x00
                  __ee_spc_stat
000068  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006c  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000070  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000072  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000074  0000              DCB      0x00,0x00
                  volt_region_cnt
000076  0000              DCB      0x00,0x00
                  vz2_stat_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007a  0000              DCB      0x00,0x00
                  plazma_ica1
00007c  0000              DCB      0x00,0x00
                  bat_hndl_i
00007e  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000084  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000086  0000              DCB      0x00,0x00
                  bat_hndl_u_end
000088  00000000          DCB      0x00,0x00,0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000e8  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ea  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00
