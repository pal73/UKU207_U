; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ke_start PROC
;;;290    //-----------------------------------------------
;;;291    void ke_start(char in)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;292    {          
000004  4606              MOV      r6,r0
;;;293    ke_start_stat=(enum_ke_start_stat)0;		 
000006  f04f0400          MOV      r4,#0
00000a  4dff              LDR      r5,|L1.1032|
;;;294    /*
;;;295    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;296    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;297    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;298    #endif
;;;299    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;300    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;301    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;302    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;303    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;304    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;305    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;306    else */
;;;307    	{
;;;308    
;;;309    	ke_start_stat=kssYES;
00000c  f04f0064          MOV      r0,#0x64
000010  7728              STRB     r0,[r5,#0x1c]
;;;310    
;;;311    	spc_stat=spcKE;
000012  f04f0701          MOV      r7,#1
000016  762f              STRB     r7,[r5,#0x18]
;;;312    	__ee_spc_stat=spcKE;
000018  f8a57066          STRH     r7,[r5,#0x66]
;;;313    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001c  4639              MOV      r1,r7
00001e  f240209a          MOV      r0,#0x29a
000022  f7fffffe          BL       lc640_write_int
;;;314    	
;;;315    	spc_bat=0;
000026  766c              STRB     r4,[r5,#0x19]
;;;316    	__ee_spc_bat=0;
000028  f8a54068          STRH     r4,[r5,#0x68]
;;;317    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  4621              MOV      r1,r4
00002e  f240209e          MOV      r0,#0x29e
000032  f7fffffe          BL       lc640_write_int
;;;318    
;;;319    	bat[0]._zar_cnt_ke=0;
000036  f8df83d4          LDR      r8,|L1.1036|
00003a  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;320    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  48f4              LDR      r0,|L1.1040|
000040  2100              MOVS     r1,#0
000042  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000046  f7fffffe          BL       lc640_write_int
;;;321    
;;;322    	bat[0]._time_min_cnt_ke=0;
00004a  f8a8404a          STRH     r4,[r8,#0x4a]
;;;323    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  2100              MOVS     r1,#0
000050  f44f70e2          MOV      r0,#0x1c4
000054  f7fffffe          BL       lc640_write_int
;;;324    
;;;325    	
;;;326    	spc_phase=0;
000058  76ac              STRB     r4,[r5,#0x1a]
;;;327    	__ee_spc_phase=0;
00005a  f8a5406a          STRH     r4,[r5,#0x6a]
;;;328    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  4621              MOV      r1,r4
000060  f44f7028          MOV      r0,#0x2a0
000064  f7fffffe          BL       lc640_write_int
;;;329    
;;;330    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;331    
;;;332    		{					
;;;333    		signed short temp_temp;
;;;334    		signed char temp;
;;;335    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  eb060046          ADD      r0,r6,r6,LSL #1
00006c  eb001006          ADD      r0,r0,r6,LSL #4
000070  eb080180          ADD      r1,r8,r0,LSL #2
000074  48e7              LDR      r0,|L1.1044|
000076  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000078  f1000001          ADD      r0,r0,#1
00007c  f0000007          AND      r0,r0,#7
000080  eb010040          ADD      r0,r1,r0,LSL #1
000084  8c00              LDRH     r0,[r0,#0x20]
000086  9001              STR      r0,[sp,#4]
;;;336    		    
;;;337    		temp=LPC_RTC->YEAR;
000088  4ee3              LDR      r6,|L1.1048|
00008a  8bb0              LDRH     r0,[r6,#0x1c]
00008c  9000              STR      r0,[sp,#0]
;;;338    		gran_char(&temp,1,99);
00008e  f04f0263          MOV      r2,#0x63
000092  f04f0101          MOV      r1,#1
000096  4668              MOV      r0,sp
000098  f7fffffe          BL       gran_char
;;;339    		*((char*)(&(ke_date[0])))=temp;
00009c  f10504e8          ADD      r4,r5,#0xe8
0000a0  f89d0000          LDRB     r0,[sp,#0]
0000a4  7020              STRB     r0,[r4,#0]
;;;340    			
;;;341    		temp=LPC_RTC->MONTH;
0000a6  7e30              LDRB     r0,[r6,#0x18]
0000a8  9000              STR      r0,[sp,#0]
;;;342    		gran_char(&temp,1,12);
0000aa  220c              MOVS     r2,#0xc
0000ac  2101              MOVS     r1,#1
0000ae  4668              MOV      r0,sp
0000b0  f7fffffe          BL       gran_char
;;;343    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  f89d0000          LDRB     r0,[sp,#0]
0000b8  7060              STRB     r0,[r4,#1]
;;;344    		
;;;345    		temp=LPC_RTC->DOM;
0000ba  7b30              LDRB     r0,[r6,#0xc]
0000bc  9000              STR      r0,[sp,#0]
;;;346    		gran_char(&temp,1,31);
0000be  221f              MOVS     r2,#0x1f
0000c0  2101              MOVS     r1,#1
0000c2  4668              MOV      r0,sp
0000c4  f7fffffe          BL       gran_char
;;;347    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000c8  f89d0000          LDRB     r0,[sp,#0]
0000cc  70a0              STRB     r0,[r4,#2]
;;;348    				
;;;349    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000ce  f89d0004          LDRB     r0,[sp,#4]
0000d2  70e0              STRB     r0,[r4,#3]
;;;350    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d4  f24020a2          MOV      r0,#0x2a2
0000d8  6821              LDR      r1,[r4,#0]  ; ke_date
0000da  f7fffffe          BL       lc640_write_long
;;;351    
;;;352    		temp=LPC_RTC->HOUR;
0000de  7a30              LDRB     r0,[r6,#8]
0000e0  9000              STR      r0,[sp,#0]
;;;353    		gran_char(&temp,0,23);
0000e2  2217              MOVS     r2,#0x17
0000e4  2100              MOVS     r1,#0
0000e6  4668              MOV      r0,sp
0000e8  f7fffffe          BL       gran_char
;;;354    		*((char*)(&(ke_date[1])))=temp;
0000ec  f89d0000          LDRB     r0,[sp,#0]
0000f0  7120              STRB     r0,[r4,#4]
;;;355                   
;;;356    		temp=LPC_RTC->MIN;
0000f2  7930              LDRB     r0,[r6,#4]
0000f4  9000              STR      r0,[sp,#0]
;;;357    		gran_char(&temp,0,59);
0000f6  223b              MOVS     r2,#0x3b
0000f8  2100              MOVS     r1,#0
0000fa  4668              MOV      r0,sp
0000fc  f7fffffe          BL       gran_char
;;;358    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  f89d0000          LDRB     r0,[sp,#0]
000104  7160              STRB     r0,[r4,#5]
;;;359    	          
;;;360    		temp=LPC_RTC->SEC;
000106  7830              LDRB     r0,[r6,#0]
000108  9000              STR      r0,[sp,#0]
;;;361    		gran_char(&temp,0,59);
00010a  223b              MOVS     r2,#0x3b
00010c  2100              MOVS     r1,#0
00010e  4668              MOV      r0,sp
000110  f7fffffe          BL       gran_char
;;;362    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  f89d0000          LDRB     r0,[sp,#0]
000118  71a0              STRB     r0,[r4,#6]
;;;363    			
;;;364    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  f89d0005          LDRB     r0,[sp,#5]
00011e  71e0              STRB     r0,[r4,#7]
;;;365    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000120  f24020a6          MOV      r0,#0x2a6
000124  6861              LDR      r1,[r4,#4]  ; ke_date
000126  f7fffffe          BL       lc640_write_long
;;;366    		}
;;;367    	bat_hndl_zvu_ke_init=1;
00012a  70af              STRB     r7,[r5,#2]
;;;368    	}
;;;369    }
00012c  e8bd81fc          POP      {r2-r8,pc}
;;;370    #endif
                          ENDP

                  ke_drv PROC
;;;452    //-----------------------------------------------
;;;453    void ke_drv(void)
000130  e92d47f0          PUSH     {r4-r10,lr}
;;;454    {
000134  b088              SUB      sp,sp,#0x20
;;;455    static char ke_drv_cnt_10s;
;;;456    static short i_bat_buff[6];
;;;457    static char i_bat_buff_cnt;
;;;458    short ke_drv_i_temp;
;;;459    short ke_drv_i_avg;
;;;460    char i;
;;;461    short ke_drv_i_temp_temp;
;;;462    const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000136  f04f021c          MOV      r2,#0x1c
00013a  49b8              LDR      r1,|L1.1052|
00013c  a801              ADD      r0,sp,#4
00013e  f7fffffe          BL       __aeabi_memcpy4
;;;463    
;;;464    if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000142  4eb1              LDR      r6,|L1.1032|
;;;465    	{
;;;466    	
;;;467    	i_bat_buff[0]=0;
000144  4bb6              LDR      r3,|L1.1056|
000146  2500              MOVS     r5,#0
000148  78b0              LDRB     r0,[r6,#2]            ;464  ; bat_hndl_zvu_ke_init
00014a  2801              CMP      r0,#1                 ;464
00014c  d102              BNE      |L1.340|
00014e  801d              STRH     r5,[r3,#0]
;;;468    	i_bat_buff[0]=0;
;;;469    	i_bat_buff[0]=0;
;;;470    	i_bat_buff[0]=0;
;;;471    	i_bat_buff[0]=0;
;;;472    	i_bat_buff[0]=0;
;;;473    	i_bat_buff_cnt=0;
000150  7135              STRB     r5,[r6,#4]
;;;474    
;;;475    	bat_hndl_zvu_ke_init=0;
000152  70b5              STRB     r5,[r6,#2]
                  |L1.340|
;;;476    	}
;;;477    
;;;478    
;;;479    
;;;480    
;;;481    if(spc_stat==spcKE)
000154  7e30              LDRB     r0,[r6,#0x18]  ; spc_stat
000156  2801              CMP      r0,#1
000158  d17e              BNE      |L1.600|
;;;482    	{
;;;483    	ke_drv_i_temp=-Ib_ips_termokompensat/10;
00015a  48b2              LDR      r0,|L1.1060|
00015c  f04f070a          MOV      r7,#0xa
000160  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000164  f1c00000          RSB      r0,r0,#0
000168  fb90f0f7          SDIV     r0,r0,r7
00016c  b200              SXTH     r0,r0
;;;484    	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
00016e  2800              CMP      r0,#0
000170  da01              BGE      |L1.374|
000172  f04f0000          MOV      r0,#0
                  |L1.374|
;;;485    
;;;486    	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000176  4aac              LDR      r2,|L1.1064|
000178  78f1              LDRB     r1,[r6,#3]  ; ke_drv_cnt_10s
00017a  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;487    	if(++ke_drv_cnt_10s>10)
00017c  1c49              ADDS     r1,r1,#1
;;;488    		{
;;;489    		ke_drv_cnt_10s=0;
;;;490    
;;;491    		i_bat_buff_cnt++;
;;;492    		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;493    		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;494    		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;495    		ke_drv_i_temp_temp=0;
;;;496    		for(i=0;i<6;i++)
;;;497    			{
;;;498    			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;499    			}
;;;500    		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;501    
;;;502    		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;503    		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;504    		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;505    		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;506    		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;507    		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;508    		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;509    		
;;;510    		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;511    		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;512    		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;513    		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;514    		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;515    		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;516    		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;517    
;;;518    		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;519    		bat_hndl_i_temp=ke_drv_i_avg;
00017e  4ca2              LDR      r4,|L1.1032|
000180  b2c9              UXTB     r1,r1                 ;487
000182  3480              ADDS     r4,r4,#0x80
000184  70f1              STRB     r1,[r6,#3]            ;487
000186  290a              CMP      r1,#0xa               ;487
000188  d967              BLS      |L1.602|
00018a  70f5              STRB     r5,[r6,#3]            ;489
00018c  7931              LDRB     r1,[r6,#4]            ;491  ; i_bat_buff_cnt
00018e  f1010101          ADD      r1,r1,#1              ;491
000192  b2c9              UXTB     r1,r1                 ;491
000194  7131              STRB     r1,[r6,#4]            ;491
000196  2906              CMP      r1,#6                 ;492
000198  d300              BCC      |L1.412|
00019a  7135              STRB     r5,[r6,#4]            ;492
                  |L1.412|
00019c  7931              LDRB     r1,[r6,#4]            ;493  ; i_bat_buff_cnt
00019e  6091              STR      r1,[r2,#8]            ;493  ; bat_hndl_plazma
0001a0  f8230011          STRH     r0,[r3,r1,LSL #1]     ;494
0001a4  f04f0100          MOV      r1,#0                 ;495
0001a8  4608              MOV      r0,r1                 ;496
                  |L1.426|
0001aa  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;498
0001ae  4461              ADD      r1,r1,r12             ;498
0001b0  b209              SXTH     r1,r1                 ;498
0001b2  f1000001          ADD      r0,r0,#1              ;496
0001b6  b2c0              UXTB     r0,r0                 ;496
0001b8  2806              CMP      r0,#6                 ;496
0001ba  d3f6              BCC      |L1.426|
0001bc  f04f0006          MOV      r0,#6                 ;500
0001c0  fb91f0f0          SDIV     r0,r1,r0              ;500
0001c4  b201              SXTH     r1,r0                 ;500
0001c6  4899              LDR      r0,|L1.1068|
0001c8  f8df825c          LDR      r8,|L1.1064|
0001cc  8800              LDRH     r0,[r0,#0]            ;502  ; BAT_C_POINT_1_6
0001ce  f1a8081c          SUB      r8,r8,#0x1c           ;502
0001d2  eb000040          ADD      r0,r0,r0,LSL #1       ;502
0001d6  ea4f0040          LSL      r0,r0,#1              ;502
0001da  f8a80000          STRH     r0,[r8,#0]            ;502
0001de  4894              LDR      r0,|L1.1072|
0001e0  8800              LDRH     r0,[r0,#0]            ;503  ; BAT_C_POINT_1_2
0001e2  ea4f0040          LSL      r0,r0,#1              ;503
0001e6  f8a80002          STRH     r0,[r8,#2]            ;503
0001ea  4892              LDR      r0,|L1.1076|
0001ec  8800              LDRH     r0,[r0,#0]            ;504  ; BAT_C_POINT_1
0001ee  f8a80004          STRH     r0,[r8,#4]            ;504
0001f2  4891              LDR      r0,|L1.1080|
0001f4  f04f0303          MOV      r3,#3                 ;505
0001f8  f9b00000          LDRSH    r0,[r0,#0]            ;505  ; BAT_C_POINT_3
0001fc  fb90f0f3          SDIV     r0,r0,r3              ;505
000200  f8a80006          STRH     r0,[r8,#6]            ;505
000204  488d              LDR      r0,|L1.1084|
000206  f04f0305          MOV      r3,#5                 ;506
00020a  f9b00000          LDRSH    r0,[r0,#0]            ;506  ; BAT_C_POINT_5
00020e  fb90f0f3          SDIV     r0,r0,r3              ;506
000212  f8a80008          STRH     r0,[r8,#8]            ;506
000216  488a              LDR      r0,|L1.1088|
000218  f9b00000          LDRSH    r0,[r0,#0]            ;507  ; BAT_C_POINT_10
00021c  fb90f0f7          SDIV     r0,r0,r7              ;507
000220  f8a8000a          STRH     r0,[r8,#0xa]          ;507
000224  4887              LDR      r0,|L1.1092|
000226  f04f0314          MOV      r3,#0x14              ;508
00022a  f9b00000          LDRSH    r0,[r0,#0]            ;508  ; BAT_C_POINT_20
00022e  fb90f0f3          SDIV     r0,r0,r3              ;508
000232  f8a8000c          STRH     r0,[r8,#0xc]          ;508
000236  4884              LDR      r0,|L1.1096|
000238  f108090e          ADD      r9,r8,#0xe            ;510
00023c  f9b07000          LDRSH    r7,[r0,#0]            ;510  ; BAT_U_END_1_6
000240  f8a97000          STRH     r7,[r9,#0]            ;510
000244  4881              LDR      r0,|L1.1100|
000246  8800              LDRH     r0,[r0,#0]            ;511  ; BAT_U_END_1_2
000248  f8a90002          STRH     r0,[r9,#2]            ;511
00024c  4880              LDR      r0,|L1.1104|
00024e  8800              LDRH     r0,[r0,#0]            ;512  ; BAT_U_END_1
000250  f8a90004          STRH     r0,[r9,#4]            ;512
000254  487f              LDR      r0,|L1.1108|
000256  e001              B        |L1.604|
                  |L1.600|
000258  e11b              B        |L1.1170|
                  |L1.602|
00025a  e061              B        |L1.800|
                  |L1.604|
00025c  8800              LDRH     r0,[r0,#0]            ;513  ; BAT_U_END_3
00025e  f8a90006          STRH     r0,[r9,#6]            ;513
000262  487d              LDR      r0,|L1.1112|
000264  8800              LDRH     r0,[r0,#0]            ;514  ; BAT_U_END_5
000266  f8a90008          STRH     r0,[r9,#8]            ;514
00026a  487c              LDR      r0,|L1.1116|
00026c  8800              LDRH     r0,[r0,#0]            ;515  ; BAT_U_END_10
00026e  f8a9000a          STRH     r0,[r9,#0xa]          ;515
000272  487b              LDR      r0,|L1.1120|
000274  f9b0c000          LDRSH    r12,[r0,#0]           ;516  ; BAT_U_END_20
000278  f8a9c00c          STRH     r12,[r9,#0xc]         ;516
00027c  6051              STR      r1,[r2,#4]            ;518  ; bat_hndl_plazma
00027e  80a1              STRH     r1,[r4,#4]
;;;520    		
;;;521    		for(i=0;i<7;i++)
000280  f04f0000          MOV      r0,#0
                  |L1.644|
;;;522    			{
;;;523    			if(bat_hndl_i_temp>=I_from_t_table[i])
000284  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000288  428b              CMP      r3,r1
00028a  dd04              BLE      |L1.662|
00028c  f1000001          ADD      r0,r0,#1              ;521
000290  b2c0              UXTB     r0,r0                 ;521
000292  2807              CMP      r0,#7                 ;521
000294  d3f6              BCC      |L1.644|
                  |L1.662|
;;;524    				{
;;;525    				break;
;;;526    				}
;;;527    			}
;;;528    
;;;529    		bat_hndl_plazma[0]=i;
000296  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000298  f10d0a04          ADD      r10,sp,#4             ;462
;;;530    
;;;531    		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
00029c  b1c8              CBZ      r0,|L1.722|
;;;532    		 else if((i>=1)&&(i<7))
00029e  1e42              SUBS     r2,r0,#1
0002a0  2a06              CMP      r2,#6
0002a2  d219              BCS      |L1.728|
;;;533    		 	{
;;;534    			short i1,i2;
;;;535    			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
0002a4  f8383012          LDRH     r3,[r8,r2,LSL #1]
0002a8  eba30101          SUB      r1,r3,r1
0002ac  b209              SXTH     r1,r1
;;;536    			i2=I_from_t_table[i-1]-I_from_t_table[i];
0002ae  f8388010          LDRH     r8,[r8,r0,LSL #1]
0002b2  eba30308          SUB      r3,r3,r8
0002b6  b21b              SXTH     r3,r3
;;;537    			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
0002b8  f85a8020          LDR      r8,[r10,r0,LSL #2]
0002bc  f85a2022          LDR      r2,[r10,r2,LSL #2]
0002c0  eba80802          SUB      r8,r8,r2
;;;538    			bat_hndl_t_razr_ke*=(long)i1;
0002c4  fb08f801          MUL      r8,r8,r1
;;;539    			bat_hndl_t_razr_ke/=(long)i2;
0002c8  fb98f1f3          SDIV     r1,r8,r3
;;;540    			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
0002cc  4411              ADD      r1,r1,r2
0002ce  6461              STR      r1,[r4,#0x44]  ; bat_hndl_t_razr_ke
;;;541    			}
0002d0  e006              B        |L1.736|
                  |L1.722|
0002d2  9901              LDR      r1,[sp,#4]            ;531
0002d4  6461              STR      r1,[r4,#0x44]         ;531  ; bat_hndl_t_razr_ke
0002d6  e003              B        |L1.736|
                  |L1.728|
;;;542    		else if(i>=7)
0002d8  2807              CMP      r0,#7
0002da  d301              BCC      |L1.736|
;;;543    			{
;;;544    			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
0002dc  9907              LDR      r1,[sp,#0x1c]
0002de  6461              STR      r1,[r4,#0x44]  ; bat_hndl_t_razr_ke
                  |L1.736|
;;;545    			}
;;;546    
;;;547    		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
0002e0  b1c0              CBZ      r0,|L1.788|
;;;548    		 else if((i>=1)&&(i<7))
0002e2  1e41              SUBS     r1,r0,#1
0002e4  2906              CMP      r1,#6
0002e6  d217              BCS      |L1.792|
;;;549    		 	{
;;;550    			long u1,tempL;
;;;551    
;;;552    			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
0002e8  f9393010          LDRSH    r3,[r9,r0,LSL #1]
0002ec  f9392011          LDRSH    r2,[r9,r1,LSL #1]
0002f0  eba30302          SUB      r3,r3,r2
;;;553    			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
0002f4  f85a1021          LDR      r1,[r10,r1,LSL #2]
0002f8  6c67              LDR      r7,[r4,#0x44]  ; bat_hndl_t_razr_ke
0002fa  eba70701          SUB      r7,r7,r1
;;;554    			tempL*=u1;
0002fe  fb03f307          MUL      r3,r3,r7
;;;555    			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000302  f85a0020          LDR      r0,[r10,r0,LSL #2]
000306  eba00001          SUB      r0,r0,r1
;;;556    			tempL/=u1;
00030a  fb93f0f0          SDIV     r0,r3,r0
;;;557    			tempL+=(long)U_end_from_i_table[i-1];
00030e  4410              ADD      r0,r0,r2
;;;558    			bat_hndl_u_end=(short)tempL;
000310  80e0              STRH     r0,[r4,#6]
;;;559    			}
000312  e005              B        |L1.800|
                  |L1.788|
000314  80e7              STRH     r7,[r4,#6]            ;547
000316  e003              B        |L1.800|
                  |L1.792|
;;;560    		else if(i>=7)
000318  2807              CMP      r0,#7
00031a  d301              BCC      |L1.800|
;;;561    			{
;;;562    			bat_hndl_u_end=U_end_from_i_table[6];
00031c  f8a4c006          STRH     r12,[r4,#6]
                  |L1.800|
;;;563    			}
;;;564    
;;;565    		}
;;;566    
;;;567    
;;;568    
;;;569    	if(spc_phase==0)
000320  7eb0              LDRB     r0,[r6,#0x1a]  ; spc_phase
;;;570    		{
;;;571    		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;572    		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;573    
;;;574    		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;575    	    	
;;;576    		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;577    			{
;;;578    			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;579    			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000322  4f3b              LDR      r7,|L1.1040|
;;;580    			}
;;;581    
;;;582    		bat[0]._time_min_cnt_ke++;
;;;583    		if(bat[0]._time_min_cnt_ke>=60)
;;;584    			{
;;;585    			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
000324  f44f78e2          MOV      r8,#0x1c4
000328  bbe0              CBNZ     r0,|L1.932|
00032a  2314              MOVS     r3,#0x14              ;572
00032c  f04f32ff          MOV      r2,#0xffffffff        ;572
000330  21ce              MOVS     r1,#0xce              ;572
000332  20cd              MOVS     r0,#0xcd              ;572
000334  f7fffffe          BL       mess_send
000338  7e71              LDRB     r1,[r6,#0x19]         ;574  ; spc_bat
00033a  f8df90d0          LDR      r9,|L1.1036|
00033e  eb010041          ADD      r0,r1,r1,LSL #1       ;574
000342  eb001001          ADD      r0,r0,r1,LSL #4       ;574
000346  eb090080          ADD      r0,r9,r0,LSL #2       ;574
00034a  f9b00008          LDRSH    r0,[r0,#8]            ;574
00034e  f7fffffe          BL       abs
000352  f8d91018          LDR      r1,[r9,#0x18]         ;574  ; bat
000356  4401              ADD      r1,r1,r0              ;574
000358  f8c91018          STR      r1,[r9,#0x18]         ;574  ; bat
00035c  f64840a0          MOV      r0,#0x8ca0            ;576
000360  4281              CMP      r1,r0                 ;576
000362  db0c              BLT      |L1.894|
000364  eba10100          SUB      r1,r1,r0              ;578
000368  f8c91018          STR      r1,[r9,#0x18]         ;578  ; bat
00036c  8838              LDRH     r0,[r7,#0]            ;579  ; ADR_EE_BAT_ZAR_CNT_KE
00036e  f7fffffe          BL       lc640_read_int
000372  1c40              ADDS     r0,r0,#1              ;579
000374  b201              SXTH     r1,r0                 ;579
000376  f9b70000          LDRSH    r0,[r7,#0]            ;579  ; ADR_EE_BAT_ZAR_CNT_KE
00037a  f7fffffe          BL       lc640_write_int
                  |L1.894|
00037e  f8b9004a          LDRH     r0,[r9,#0x4a]         ;582  ; bat
000382  f1000001          ADD      r0,r0,#1              ;582
000386  b281              UXTH     r1,r0                 ;582
000388  f8a9104a          STRH     r1,[r9,#0x4a]         ;582
00038c  293c              CMP      r1,#0x3c              ;583
00038e  d309              BCC      |L1.932|
000390  4640              MOV      r0,r8
000392  f7fffffe          BL       lc640_read_int
000396  1c40              ADDS     r0,r0,#1
000398  b201              SXTH     r1,r0
00039a  4640              MOV      r0,r8
00039c  f7fffffe          BL       lc640_write_int
;;;586    			bat[0]._time_min_cnt_ke=0;
0003a0  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.932|
;;;587    			}
;;;588    		}
;;;589    
;;;590    	else if(spc_phase==1)
;;;591    		{
;;;592    		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;593    		}
;;;594    
;;;595    	if(out_U<bat_hndl_u_end)
0003a4  482f              LDR      r0,|L1.1124|
0003a6  f9b41006          LDRSH    r1,[r4,#6]  ; bat_hndl_u_end
0003aa  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0003ae  4288              CMP      r0,r1
0003b0  da6d              BGE      |L1.1166|
;;;596    		{
;;;597    		cnt_end_ke++;
0003b2  f8b60062          LDRH     r0,[r6,#0x62]  ; cnt_end_ke
0003b6  f1000001          ADD      r0,r0,#1
0003ba  b200              SXTH     r0,r0
0003bc  f8a60062          STRH     r0,[r6,#0x62]
;;;598    		if(cnt_end_ke>=30)
0003c0  281e              CMP      r0,#0x1e
0003c2  db66              BLT      |L1.1170|
;;;599    			{
;;;600    			
;;;601    			if((spc_stat==spcKE)&&(spc_phase==0))
0003c4  7e30              LDRB     r0,[r6,#0x18]  ; spc_stat
0003c6  2801              CMP      r0,#1
0003c8  d156              BNE      |L1.1144|
0003ca  7eb0              LDRB     r0,[r6,#0x1a]  ; spc_phase
0003cc  b9d8              CBNZ     r0,|L1.1030|
;;;602    				{
;;;603    				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
0003ce  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0003d0  f7fffffe          BL       lc640_read_int
0003d4  b201              SXTH     r1,r0
0003d6  4824              LDR      r0,|L1.1128|
0003d8  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
0003dc  f7fffffe          BL       lc640_write_int
;;;604    				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
0003e0  4640              MOV      r0,r8
0003e2  f7fffffe          BL       lc640_read_int
0003e6  b284              UXTH     r4,r0
0003e8  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0003ea  f7fffffe          BL       lc640_read_int
0003ee  b281              UXTH     r1,r0
0003f0  4622              MOV      r2,r4
0003f2  2000              MOVS     r0,#0
0003f4  f7fffffe          BL       ke_zvu_mem_hndl
;;;605    				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
0003f8  481c              LDR      r0,|L1.1132|
0003fa  2100              MOVS     r1,#0
0003fc  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
000400  f7fffffe          BL       lc640_write_int
;;;606    				cntrl_stat=50;
000404  e034              B        |L1.1136|
                  |L1.1030|
000406  e037              B        |L1.1144|
                  |L1.1032|
                          DCD      ||area_number.25||
                  |L1.1036|
                          DCD      bat
                  |L1.1040|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.1044|
                          DCD      bat_u_old_cnt
                  |L1.1048|
                          DCD      0x40024020
                  |L1.1052|
                          DCD      ||area_number.19||+0x4
                  |L1.1056|
                          DCD      ||.bss||
                  |L1.1060|
                          DCD      Ib_ips_termokompensat
                  |L1.1064|
                          DCD      ||.bss||+0x468
                  |L1.1068|
                          DCD      BAT_C_POINT_1_6
                  |L1.1072|
                          DCD      BAT_C_POINT_1_2
                  |L1.1076|
                          DCD      BAT_C_POINT_1
                  |L1.1080|
                          DCD      BAT_C_POINT_3
                  |L1.1084|
                          DCD      BAT_C_POINT_5
                  |L1.1088|
                          DCD      BAT_C_POINT_10
                  |L1.1092|
                          DCD      BAT_C_POINT_20
                  |L1.1096|
                          DCD      BAT_U_END_1_6
                  |L1.1100|
                          DCD      BAT_U_END_1_2
                  |L1.1104|
                          DCD      BAT_U_END_1
                  |L1.1108|
                          DCD      BAT_U_END_3
                  |L1.1112|
                          DCD      BAT_U_END_5
                  |L1.1116|
                          DCD      BAT_U_END_10
                  |L1.1120|
                          DCD      BAT_U_END_20
                  |L1.1124|
                          DCD      out_U
                  |L1.1128|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.1132|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.1136|
000470  f04f0032          MOV      r0,#0x32
000474  8570              STRH     r0,[r6,#0x2a]
;;;607    				cntrl_stat_old=50;
000476  85b0              STRH     r0,[r6,#0x2c]
                  |L1.1144|
;;;608    				}
;;;609    
;;;610    			spc_stat=spcOFF;
000478  7635              STRB     r5,[r6,#0x18]
;;;611    			__ee_spc_stat=spcOFF;
00047a  f8a65066          STRH     r5,[r6,#0x66]
;;;612    			lc640_write_int(EE_SPC_STAT,spcOFF);
00047e  b008              ADD      sp,sp,#0x20
000480  2100              MOVS     r1,#0
000482  e8bd47f0          POP      {r4-r10,lr}
000486  f240209a          MOV      r0,#0x29a
00048a  f7ffbffe          B.W      lc640_write_int
                  |L1.1166|
;;;613    
;;;614    			}
;;;615    		}
;;;616    	else cnt_end_ke=0;
00048e  f8a65062          STRH     r5,[r6,#0x62]
                  |L1.1170|
;;;617    
;;;618    	}
;;;619    			
;;;620    }
000492  b008              ADD      sp,sp,#0x20
000494  e8bd87f0          POP      {r4-r10,pc}
;;;621    #endif
                          ENDP

                  vz_start PROC
;;;691    //-----------------------------------------------
;;;692    char vz_start(char hour)
000498  b570              PUSH     {r4-r6,lr}
;;;693    {          
00049a  4605              MOV      r5,r0
;;;694    char out;
;;;695    out=0;
00049c  f04f0600          MOV      r6,#0
;;;696    if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
0004a0  4cff              LDR      r4,|L1.2208|
0004a2  7e20              LDRB     r0,[r4,#0x18]  ; spc_stat
0004a4  bb90              CBNZ     r0,|L1.1292|
0004a6  48ff              LDR      r0,|L1.2212|
0004a8  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
0004aa  2801              CMP      r0,#1
0004ac  d02e              BEQ      |L1.1292|
;;;697    	{
;;;698    	spc_stat=spcVZ;
0004ae  f04f0102          MOV      r1,#2
0004b2  7621              STRB     r1,[r4,#0x18]
;;;699    	__ee_spc_stat=spcVZ; 
0004b4  f8a41066          STRH     r1,[r4,#0x66]
;;;700    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
0004b8  f240209a          MOV      r0,#0x29a
0004bc  f7fffffe          BL       lc640_write_int
;;;701    	vz_cnt_h=hour;
0004c0  f8a4505e          STRH     r5,[r4,#0x5e]
;;;702    	__ee_vz_cnt=hour*60;
0004c4  ebc51005          RSB      r0,r5,r5,LSL #4
0004c8  ea4f0080          LSL      r0,r0,#2
0004cc  f8a40064          STRH     r0,[r4,#0x64]
;;;703    	if(hour==0)__ee_vz_cnt=30;
0004d0  b91d              CBNZ     r5,|L1.1242|
0004d2  f04f001e          MOV      r0,#0x1e
0004d6  f8a40064          STRH     r0,[r4,#0x64]
                  |L1.1242|
;;;704    	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
0004da  f104045a          ADD      r4,r4,#0x5a
0004de  f44f7027          MOV      r0,#0x29c
0004e2  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0004e6  f7fffffe          BL       lc640_write_int
;;;705    	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0004ea  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0004ee  f44f702a          MOV      r0,#0x2a8
0004f2  f7fffffe          BL       lc640_write_int
;;;706    	vz_cnt_h_=0;
0004f6  f04f0000          MOV      r0,#0
0004fa  80e0              STRH     r0,[r4,#6]
;;;707    	vz_cnt_s=0;
0004fc  8020              STRH     r0,[r4,#0]
;;;708    	vz_cnt_s_=0;
0004fe  8060              STRH     r0,[r4,#2]
;;;709    	out=1;
000500  f04f0601          MOV      r6,#1
;;;710    	vz_mem_hndl(1);
000504  f04f0001          MOV      r0,#1
000508  f7fffffe          BL       vz_mem_hndl
                  |L1.1292|
;;;711    	}
;;;712    //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;713    //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;714    //plazma=out;	
;;;715    return out;
00050c  4630              MOV      r0,r6
;;;716    }
00050e  bd70              POP      {r4-r6,pc}
;;;717    
                          ENDP

                  vz_stop PROC
;;;718    //-----------------------------------------------
;;;719    void vz_stop(void)
000510  b510              PUSH     {r4,lr}
;;;720    {
;;;721    if(spc_stat==spcVZ)
000512  4ce3              LDR      r4,|L1.2208|
000514  7e20              LDRB     r0,[r4,#0x18]  ; spc_stat
000516  2802              CMP      r0,#2
000518  d113              BNE      |L1.1346|
;;;722         {
;;;723    vz_mem_hndl(vz_cnt_h);          
00051a  f1040428          ADD      r4,r4,#0x28
00051e  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
000520  f7fffffe          BL       vz_mem_hndl
;;;724    vz_cnt_s=0;
000524  f04f0000          MOV      r0,#0
000528  8660              STRH     r0,[r4,#0x32]
;;;725    vz_cnt_h=0;
00052a  86e0              STRH     r0,[r4,#0x36]
;;;726    vz_cnt_h_=0;
00052c  8720              STRH     r0,[r4,#0x38]
;;;727    spc_stat=spcOFF;
00052e  f8040c10          STRB     r0,[r4,#-0x10]
;;;728    
;;;729    		__ee_spc_stat=spcOFF;
000532  87e0              STRH     r0,[r4,#0x3e]
;;;730    		lc640_write_int(EE_SPC_STAT,spcOFF);
000534  4601              MOV      r1,r0
000536  e8bd4010          POP      {r4,lr}
00053a  f240209a          MOV      r0,#0x29a
00053e  f7ffbffe          B.W      lc640_write_int
                  |L1.1346|
;;;731         }
;;;732    
;;;733    }
000542  bd10              POP      {r4,pc}
;;;734    
                          ENDP

                  avz_next_date_hndl PROC
;;;735    //-----------------------------------------------
;;;736    void avz_next_date_hndl(void)
000544  b570              PUSH     {r4-r6,lr}
;;;737    {
;;;738    if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
000546  4cd8              LDR      r4,|L1.2216|
000548  f8940038          LDRB     r0,[r4,#0x38]
00054c  4dd7              LDR      r5,|L1.2220|
00054e  7829              LDRB     r1,[r5,#0]  ; AVZ
000550  4408              ADD      r0,r0,r1
000552  280c              CMP      r0,#0xc
000554  d906              BLS      |L1.1380|
000556  8fa0              LDRH     r0,[r4,#0x3c]
000558  1c40              ADDS     r0,r0,#1
00055a  b201              SXTH     r1,r0
00055c  20b8              MOVS     r0,#0xb8
00055e  f7fffffe          BL       lc640_write_int
000562  e004              B        |L1.1390|
                  |L1.1380|
;;;739    else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
000564  f9b4103c          LDRSH    r1,[r4,#0x3c]
000568  20b8              MOVS     r0,#0xb8
00056a  f7fffffe          BL       lc640_write_int
                  |L1.1390|
;;;740    
;;;741    //lc640_write_int(EE_YEAR_AVZ,6);
;;;742    
;;;743    if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
00056e  f8941038          LDRB     r1,[r4,#0x38]
000572  7828              LDRB     r0,[r5,#0]  ; AVZ
000574  4401              ADD      r1,r1,r0
000576  290c              CMP      r1,#0xc
000578  d907              BLS      |L1.1418|
00057a  f8941038          LDRB     r1,[r4,#0x38]
00057e  380c              SUBS     r0,r0,#0xc
000580  4401              ADD      r1,r1,r0
000582  20b6              MOVS     r0,#0xb6
000584  f7fffffe          BL       lc640_write_int
000588  e005              B        |L1.1430|
                  |L1.1418|
;;;744    else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
00058a  f8941038          LDRB     r1,[r4,#0x38]
00058e  4401              ADD      r1,r1,r0
000590  20b6              MOVS     r0,#0xb6
000592  f7fffffe          BL       lc640_write_int
                  |L1.1430|
;;;745    
;;;746    //lc640_write_int(EE_MONTH_AVZ,5);
;;;747    
;;;748    if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
000596  f894002c          LDRB     r0,[r4,#0x2c]
00059a  281c              CMP      r0,#0x1c
00059c  d904              BLS      |L1.1448|
00059e  211c              MOVS     r1,#0x1c
0005a0  20b4              MOVS     r0,#0xb4
0005a2  f7fffffe          BL       lc640_write_int
0005a6  e004              B        |L1.1458|
                  |L1.1448|
;;;749    else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
0005a8  f894102c          LDRB     r1,[r4,#0x2c]
0005ac  20b4              MOVS     r0,#0xb4
0005ae  f7fffffe          BL       lc640_write_int
                  |L1.1458|
;;;750    
;;;751    //lc640_write_int(EE_DATE_AVZ,4);
;;;752    
;;;753    lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
0005b2  f1040420          ADD      r4,r4,#0x20
0005b6  7a21              LDRB     r1,[r4,#8]
0005b8  f04f00ae          MOV      r0,#0xae
0005bc  f7fffffe          BL       lc640_write_int
;;;754    lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
0005c0  7921              LDRB     r1,[r4,#4]
0005c2  20b0              MOVS     r0,#0xb0
0005c4  f7fffffe          BL       lc640_write_int
;;;755    lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
0005c8  7821              LDRB     r1,[r4,#0]
0005ca  e8bd4070          POP      {r4-r6,lr}
0005ce  20b2              MOVS     r0,#0xb2
0005d0  f7ffbffe          B.W      lc640_write_int
;;;756    
;;;757    }
;;;758    
                          ENDP

                  avz_drv PROC
;;;759    //-----------------------------------------------
;;;760    void avz_drv(void)                               
0005d4  b510              PUSH     {r4,lr}
;;;761    {                
;;;762    if(AVZ!=AVZ_OFF)
0005d6  48b5              LDR      r0,|L1.2220|
;;;763    	{
;;;764    	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;765    		{
;;;766    		bAVZ=1;
0005d8  4cb1              LDR      r4,|L1.2208|
0005da  7800              LDRB     r0,[r0,#0]            ;762  ; AVZ
0005dc  b330              CBZ      r0,|L1.1580|
0005de  48b2              LDR      r0,|L1.2216|
0005e0  8f82              LDRH     r2,[r0,#0x3c]         ;764
0005e2  49b3              LDR      r1,|L1.2224|
0005e4  8809              LDRH     r1,[r1,#0]            ;764  ; YEAR_AVZ
0005e6  428a              CMP      r2,r1                 ;764
0005e8  d120              BNE      |L1.1580|
0005ea  f8902038          LDRB     r2,[r0,#0x38]         ;764
0005ee  49b1              LDR      r1,|L1.2228|
0005f0  8809              LDRH     r1,[r1,#0]            ;764  ; MONTH_AVZ
0005f2  428a              CMP      r2,r1                 ;764
0005f4  d11a              BNE      |L1.1580|
0005f6  f890102c          LDRB     r1,[r0,#0x2c]         ;764
0005fa  4aaf              LDR      r2,|L1.2232|
0005fc  8812              LDRH     r2,[r2,#0]            ;764  ; DATE_AVZ
0005fe  4291              CMP      r1,r2                 ;764
000600  d114              BNE      |L1.1580|
000602  f8901028          LDRB     r1,[r0,#0x28]         ;764
000606  4aad              LDR      r2,|L1.2236|
000608  8812              LDRH     r2,[r2,#0]            ;764  ; HOUR_AVZ
00060a  4291              CMP      r1,r2                 ;764
00060c  d10e              BNE      |L1.1580|
00060e  f8901024          LDRB     r1,[r0,#0x24]         ;764
000612  4aab              LDR      r2,|L1.2240|
000614  8812              LDRH     r2,[r2,#0]            ;764  ; MIN_AVZ
000616  4291              CMP      r1,r2                 ;764
000618  d108              BNE      |L1.1580|
00061a  f8900020          LDRB     r0,[r0,#0x20]         ;764
00061e  49a9              LDR      r1,|L1.2244|
000620  8809              LDRH     r1,[r1,#0]            ;764  ; SEC_AVZ
000622  4288              CMP      r0,r1                 ;764
000624  d102              BNE      |L1.1580|
000626  f04f0001          MOV      r0,#1
00062a  76e0              STRB     r0,[r4,#0x1b]
                  |L1.1580|
;;;767    		}
;;;768    	}
;;;769    if(bAVZ)
00062c  7ee0              LDRB     r0,[r4,#0x1b]  ; bAVZ
00062e  2800              CMP      r0,#0
000630  d00c              BEQ      |L1.1612|
;;;770    	{
;;;771    	if(vz_start(AVZ_TIME))
000632  48a5              LDR      r0,|L1.2248|
000634  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
000636  b2c0              UXTB     r0,r0
000638  f7fffffe          BL       vz_start
00063c  2800              CMP      r0,#0
00063e  d005              BEQ      |L1.1612|
;;;772    		{
;;;773    		bAVZ=0;
000640  f04f0000          MOV      r0,#0
000644  76e0              STRB     r0,[r4,#0x1b]
;;;774    		avz_next_date_hndl();
000646  e8bd4010          POP      {r4,lr}
00064a  e7fe              B        avz_next_date_hndl
                  |L1.1612|
;;;775    		}
;;;776    	}	
;;;777    
;;;778    }
00064c  bd10              POP      {r4,pc}
;;;779    
                          ENDP

                  vz_drv PROC
;;;780    //-----------------------------------------------
;;;781    void vz_drv(void)
00064e  b538              PUSH     {r3-r5,lr}
;;;782    { 
;;;783    if(spc_stat==spcVZ)
000650  4c93              LDR      r4,|L1.2208|
000652  7e20              LDRB     r0,[r4,#0x18]  ; spc_stat
000654  2802              CMP      r0,#2
000656  d116              BNE      |L1.1670|
;;;784    	{
;;;785    	if(sk_stat[0]==1)
000658  489c              LDR      r0,|L1.2252|
00065a  7800              LDRB     r0,[r0,#0]  ; sk_stat
00065c  2801              CMP      r0,#1
00065e  d013              BEQ      |L1.1672|
;;;786    		{
;;;787    
;;;788    	if(vz_cnt_s_<3600)
;;;789    		{
;;;790    		vz_cnt_s_++;
;;;791    		if(vz_cnt_s_>=3600)
;;;792    			{
;;;793    			vz_cnt_s_=0;
;;;794    			if(vz_cnt_h)
;;;795    				{
;;;796    				vz_cnt_h--;
;;;797    				vz_cnt_h_++;
;;;798    				}
;;;799    			}
;;;800    		}
;;;801    
;;;802    
;;;803    	if(vz_cnt_s<60)
;;;804    		{
;;;805    		vz_cnt_s++;
;;;806    		if(vz_cnt_s>=60)
;;;807    			{
;;;808    			vz_cnt_s=0;
;;;809    			
;;;810    			__ee_vz_cnt--;
;;;811    			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;812    			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;813    				{
;;;814    				spc_stat=spcOFF;
;;;815    						__ee_spc_stat=spcOFF;
;;;816    		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;817    
;;;818    //				hv_vz_stat=hvsOFF;
;;;819    //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;820    				vz_mem_hndl(0);
;;;821    				}
;;;822    			}
;;;823    		}
;;;824    
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		if(((LPC_RTC->SEC)%10)==0)
000660  489b              LDR      r0,|L1.2256|
000662  7800              LDRB     r0,[r0,#0]
000664  f04f010a          MOV      r1,#0xa
000668  fbb0f2f1          UDIV     r2,r0,r1
00066c  fb010012          MLS      r0,r1,r2,r0
000670  2800              CMP      r0,#0
000672  d108              BNE      |L1.1670|
;;;829    			{
;;;830    			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
000674  f2413088          MOV      r0,#0x1388
000678  9000              STR      r0,[sp,#0]
00067a  a396              ADR      r3,|L1.2260|
00067c  a29b              ADR      r2,|L1.2284|
00067e  a1a1              ADR      r1,|L1.2308|
000680  a0a6              ADR      r0,|L1.2332|
000682  f7fffffe          BL       show_mess
                  |L1.1670|
;;;831    						"    ЗАБЛОКИРОВАН    ",
;;;832    						"     НЕИСПРАВНА     ",
;;;833    						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;834    						5000);			
;;;835    			}
;;;836    		}
;;;837    /*	if(vz_cnt_s_>=3)
;;;838    		{
;;;839    		if(sk_stat[0]==0)
;;;840    		} */
;;;841    
;;;842    	}
;;;843    
;;;844    
;;;845    } 
000686  bd38              POP      {r3-r5,pc}
                  |L1.1672|
000688  f8b4005c          LDRH     r0,[r4,#0x5c]         ;788  ; vz_cnt_s_
00068c  f44f6161          MOV      r1,#0xe10             ;788
000690  2500              MOVS     r5,#0                 ;793
000692  4288              CMP      r0,r1                 ;788
000694  d215              BCS      |L1.1730|
000696  f1000001          ADD      r0,r0,#1              ;790
00069a  b280              UXTH     r0,r0                 ;790
00069c  f8a4005c          STRH     r0,[r4,#0x5c]         ;790
0006a0  4288              CMP      r0,r1                 ;791
0006a2  d30e              BCC      |L1.1730|
0006a4  f8a4505c          STRH     r5,[r4,#0x5c]         ;793
0006a8  f8b4005e          LDRH     r0,[r4,#0x5e]         ;794  ; vz_cnt_h
0006ac  b148              CBZ      r0,|L1.1730|
0006ae  f1a00001          SUB      r0,r0,#1              ;796
0006b2  f8240f5e          STRH     r0,[r4,#0x5e]!        ;796
0006b6  8860              LDRH     r0,[r4,#2]            ;797  ; vz_cnt_h_
0006b8  f1000001          ADD      r0,r0,#1              ;797
0006bc  8060              STRH     r0,[r4,#2]            ;797
0006be  f1a4045e          SUB      r4,r4,#0x5e           ;797
                  |L1.1730|
0006c2  f8b4005a          LDRH     r0,[r4,#0x5a]         ;803  ; vz_cnt_s
0006c6  283c              CMP      r0,#0x3c              ;803
0006c8  d2dd              BCS      |L1.1670|
0006ca  f1000001          ADD      r0,r0,#1              ;805
0006ce  b280              UXTH     r0,r0                 ;805
0006d0  f8a4005a          STRH     r0,[r4,#0x5a]         ;805
0006d4  283c              CMP      r0,#0x3c              ;806
0006d6  d3d6              BCC      |L1.1670|
0006d8  f8245f5a          STRH     r5,[r4,#0x5a]!        ;808
0006dc  8960              LDRH     r0,[r4,#0xa]          ;810  ; __ee_vz_cnt
0006de  f1a00001          SUB      r0,r0,#1              ;810
0006e2  b201              SXTH     r1,r0                 ;810
0006e4  8161              STRH     r1,[r4,#0xa]          ;810
0006e6  f44f7027          MOV      r0,#0x29c             ;811
0006ea  f7fffffe          BL       lc640_write_int
0006ee  8960              LDRH     r0,[r4,#0xa]          ;812  ; __ee_vz_cnt
0006f0  f1a4045a          SUB      r4,r4,#0x5a           ;812
0006f4  b118              CBZ      r0,|L1.1790|
0006f6  486b              LDR      r0,|L1.2212|
0006f8  8800              LDRH     r0,[r0,#0]            ;812  ; speedChrgBlckStat
0006fa  2801              CMP      r0,#1                 ;812
0006fc  d1c3              BNE      |L1.1670|
                  |L1.1790|
0006fe  7625              STRB     r5,[r4,#0x18]         ;814
000700  f8a45066          STRH     r5,[r4,#0x66]         ;815
000704  2100              MOVS     r1,#0                 ;816
000706  f240209a          MOV      r0,#0x29a             ;816
00070a  f7fffffe          BL       lc640_write_int
00070e  e8bd4038          POP      {r3-r5,lr}            ;820
000712  2000              MOVS     r0,#0                 ;820
000714  f7ffbffe          B.W      vz_mem_hndl
;;;846    
                          ENDP

                  vz1_drv PROC
;;;848    //драйвер уравнительного заряда
;;;849    void vz1_drv(void)
000718  e92d4ff8          PUSH     {r3-r11,lr}
;;;850    {
;;;851    if(volt_region_cnt)volt_region_cnt--;
00071c  f8df8180          LDR      r8,|L1.2208|
000720  f9b80074          LDRSH    r0,[r8,#0x74]  ; volt_region_cnt
000724  b118              CBZ      r0,|L1.1838|
000726  f1a00001          SUB      r0,r0,#1
00072a  f8a80074          STRH     r0,[r8,#0x74]
                  |L1.1838|
;;;852    if(vz1_stat==vz1sOFF)
00072e  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
000732  b928              CBNZ     r0,|L1.1856|
;;;853    	{
;;;854    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000734  2314              MOVS     r3,#0x14
000736  2200              MOVS     r2,#0
000738  2164              MOVS     r1,#0x64
00073a  20d2              MOVS     r0,#0xd2
00073c  f7fffffe          BL       mess_send
                  |L1.1856|
;;;855    	}
;;;856    if(vz1_stat==vz1sSTEP1)
000740  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
;;;857    	{
;;;858    	if(vz1_stat_old!=vz1_stat)
;;;859    		{
;;;860    		vz1_stat_cnt=5;
;;;861    		}
;;;862    	if(vz1_stat_cnt)
;;;863    		{
;;;864    		vz1_stat_cnt--;
;;;865    		if(vz1_stat_cnt==0)
;;;866    			{
;;;867    			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;868    			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;869    			}
;;;870    		}
;;;871    	if(sk_stat[0]==1)
000744  4d61              LDR      r5,|L1.2252|
000746  f44f7bc9          MOV      r11,#0x192            ;868
00074a  2801              CMP      r0,#1                 ;856
00074c  d139              BNE      |L1.1986|
00074e  f8980025          LDRB     r0,[r8,#0x25]         ;858  ; vz1_stat_old
000752  2801              CMP      r0,#1                 ;858
000754  d003              BEQ      |L1.1886|
000756  f04f0005          MOV      r0,#5                 ;860
00075a  f8a80072          STRH     r0,[r8,#0x72]         ;860
                  |L1.1886|
00075e  f9b80072          LDRSH    r0,[r8,#0x72]         ;862  ; vz1_stat_cnt
000762  b168              CBZ      r0,|L1.1920|
000764  f1a00001          SUB      r0,r0,#1              ;864
000768  b200              SXTH     r0,r0                 ;864
00076a  f8a80072          STRH     r0,[r8,#0x72]         ;864
00076e  b938              CBNZ     r0,|L1.1920|
000770  f04f000b          MOV      r0,#0xb               ;867
000774  f8880024          STRB     r0,[r8,#0x24]         ;867
000778  4601              MOV      r1,r0                 ;868
00077a  4658              MOV      r0,r11                ;868
00077c  f7fffffe          BL       lc640_write
                  |L1.1920|
000780  7828              LDRB     r0,[r5,#0]  ; sk_stat
000782  2801              CMP      r0,#1
000784  d117              BNE      |L1.1974|
;;;872    		{
;;;873    		vz1_stat=vz1sSTEP2;
000786  f04f0002          MOV      r0,#2
00078a  f8880024          STRB     r0,[r8,#0x24]
;;;874    		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
00078e  4601              MOV      r1,r0
000790  4658              MOV      r0,r11
000792  f7fffffe          BL       lc640_write
;;;875    		tree_up(iVZ1_STEP2_2,1,0,0);
000796  2300              MOVS     r3,#0
000798  461a              MOV      r2,r3
00079a  2101              MOVS     r1,#1
00079c  20de              MOVS     r0,#0xde
00079e  f7fffffe          BL       tree_up
;;;876    		tree_up(iVZ1_STEP2_1,0,0,0);
0007a2  2300              MOVS     r3,#0
0007a4  461a              MOV      r2,r3
0007a6  4619              MOV      r1,r3
0007a8  20dd              MOVS     r0,#0xdd
0007aa  f7fffffe          BL       tree_up
;;;877    		ret(1200);
0007ae  f44f6096          MOV      r0,#0x4b0
0007b2  f7fffffe          BL       ||ret||
                  |L1.1974|
;;;878    		}
;;;879    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0007b6  2314              MOVS     r3,#0x14
0007b8  2200              MOVS     r2,#0
0007ba  2164              MOVS     r1,#0x64
0007bc  20d2              MOVS     r0,#0xd2
0007be  f7fffffe          BL       mess_send
                  |L1.1986|
;;;880    	}
;;;881    
;;;882    if(vz1_stat==vz1sSTEP2)
0007c2  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
;;;883    	{
;;;884    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;885    		{
;;;886    		vz1_stat_cnt=15;
0007c6  f04f090f          MOV      r9,#0xf
0007ca  2802              CMP      r0,#2                 ;882
0007cc  d118              BNE      |L1.2048|
0007ce  f8980025          LDRB     r0,[r8,#0x25]         ;884  ; vz1_stat_old
0007d2  2802              CMP      r0,#2                 ;884
0007d4  d102              BNE      |L1.2012|
0007d6  f8b80072          LDRH     r0,[r8,#0x72]         ;884  ; vz1_stat_cnt
0007da  b908              CBNZ     r0,|L1.2016|
                  |L1.2012|
0007dc  f8a89072          STRH     r9,[r8,#0x72]
                  |L1.2016|
;;;887    		}
;;;888    	vz1_stat_cnt--;
0007e0  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
0007e4  f1a00001          SUB      r0,r0,#1
0007e8  f8a80072          STRH     r0,[r8,#0x72]
;;;889    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0007ec  f04f0314          MOV      r3,#0x14
0007f0  f04f0200          MOV      r2,#0
0007f4  f04f0164          MOV      r1,#0x64
0007f8  f04f00d2          MOV      r0,#0xd2
0007fc  f7fffffe          BL       mess_send
                  |L1.2048|
;;;890    	}
;;;891    
;;;892    if(vz1_stat==vz1sSTEP3)
000800  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
;;;893    	{
;;;894    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;895    		{
;;;896    		vz1_stat_cnt=10;
000804  240a              MOVS     r4,#0xa
000806  2600              MOVS     r6,#0                 ;851
000808  f04f0a01          MOV      r10,#1                ;852
;;;897    
;;;898    		}
;;;899    	vz1_stat_cnt--;
;;;900    	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;901    		{
;;;902    		show_mess(	"     ВКЛЮЧИТЕ       ",
00080c  f2413788          MOV      r7,#0x1388
000810  2803              CMP      r0,#3                 ;892
000812  d131              BNE      |L1.2168|
000814  f8980025          LDRB     r0,[r8,#0x25]         ;894  ; vz1_stat_old
000818  2803              CMP      r0,#3                 ;894
00081a  d102              BNE      |L1.2082|
00081c  f8b80072          LDRH     r0,[r8,#0x72]         ;894  ; vz1_stat_cnt
000820  b908              CBNZ     r0,|L1.2086|
                  |L1.2082|
000822  f8a84072          STRH     r4,[r8,#0x72]         ;896
                  |L1.2086|
000826  f8b80072          LDRH     r0,[r8,#0x72]         ;899  ; vz1_stat_cnt
00082a  f1a00001          SUB      r0,r0,#1              ;899
00082e  b200              SXTH     r0,r0                 ;899
000830  f8a80072          STRH     r0,[r8,#0x72]         ;899
000834  280a              CMP      r0,#0xa               ;900
000836  d001              BEQ      |L1.2108|
000838  2809              CMP      r0,#9                 ;900
00083a  d106              BNE      |L1.2122|
                  |L1.2108|
00083c  a33d              ADR      r3,|L1.2356|
00083e  a243              ADR      r2,|L1.2380|
000840  a148              ADR      r1,|L1.2404|
000842  a04e              ADR      r0,|L1.2428|
000844  9700              STR      r7,[sp,#0]
000846  f7fffffe          BL       show_mess
                  |L1.2122|
;;;903    					"      ТУМБЛЕР       ",
;;;904    					"     ВЫСОКОГО       ",
;;;905    					"    НАПРЯЖЕНИЯ      ",
;;;906    					5000);
;;;907    		}
;;;908    	if(sk_stat[1]==1)
00084a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00084c  2801              CMP      r0,#1
00084e  d10d              BNE      |L1.2156|
;;;909    		{
;;;910    		vz1_stat=vz1sWRK;
000850  f8884024          STRB     r4,[r8,#0x24]
;;;911    		lc640_write(EE_VZ1_STAT,vz1sWRK);
000854  210a              MOVS     r1,#0xa
000856  4658              MOV      r0,r11
000858  f7fffffe          BL       lc640_write
;;;912    		volt_region=1;
00085c  f888a026          STRB     r10,[r8,#0x26]
;;;913    		cntrl_stat=0;
000860  f8a8602a          STRH     r6,[r8,#0x2a]
;;;914    		cntrl_stat_new=0;
000864  f8a86040          STRH     r6,[r8,#0x40]
;;;915    		cntrl_stat_old=0;
000868  f8a8602c          STRH     r6,[r8,#0x2c]
                  |L1.2156|
;;;916    		}
;;;917    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00086c  2314              MOVS     r3,#0x14
00086e  2200              MOVS     r2,#0
000870  2164              MOVS     r1,#0x64
000872  20d2              MOVS     r0,#0xd2
000874  f7fffffe          BL       mess_send
                  |L1.2168|
;;;918    	}
;;;919    
;;;920    if(vz1_stat==vz1sWRK)
000878  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
00087c  280a              CMP      r0,#0xa
00087e  d10d              BNE      |L1.2204|
;;;921    	{
;;;922    	if(vz1_stat_old!=vz1_stat)
;;;923    		{
;;;924    		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
000880  4907              LDR      r1,|L1.2208|
000882  f8980025          LDRB     r0,[r8,#0x25]         ;922  ; vz1_stat_old
000886  3180              ADDS     r1,r1,#0x80
000888  280a              CMP      r0,#0xa               ;922
00088a  d008              BEQ      |L1.2206|
00088c  4841              LDR      r0,|L1.2452|
00088e  f44f6261          MOV      r2,#0xe10
000892  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
000896  fb00f002          MUL      r0,r0,r2
00089a  e07d              B        |L1.2456|
                  |L1.2204|
00089c  e0ee              B        |L1.2684|
                  |L1.2206|
00089e  e07d              B        |L1.2460|
                  |L1.2208|
                          DCD      ||area_number.25||
                  |L1.2212|
                          DCD      speedChrgBlckStat
                  |L1.2216|
                          DCD      0x40024000
                  |L1.2220|
                          DCD      AVZ
                  |L1.2224|
                          DCD      YEAR_AVZ
                  |L1.2228|
                          DCD      MONTH_AVZ
                  |L1.2232|
                          DCD      DATE_AVZ
                  |L1.2236|
                          DCD      HOUR_AVZ
                  |L1.2240|
                          DCD      MIN_AVZ
                  |L1.2244|
                          DCD      SEC_AVZ
                  |L1.2248|
                          DCD      AVZ_TIME
                  |L1.2252|
                          DCD      sk_stat
                  |L1.2256|
                          DCD      0x40024020
                  |L1.2260|
0008d4  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
0008d8  c2c5cdd2
0008dc  c8cbdfd6
0008e0  c8df2121
0008e4  21202020
0008e8  00      
0008e9  00                DCB      0
0008ea  00                DCB      0
0008eb  00                DCB      0
                  |L1.2284|
0008ec  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0008f0  20cdc5c8
0008f4  d1cfd0c0
0008f8  c2cdc020
0008fc  20202020
000900  00      
000901  00                DCB      0
000902  00                DCB      0
000903  00                DCB      0
                  |L1.2308|
000904  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
000908  c7c0c1cb
00090c  cecac8d0
000910  cec2c0cd
000914  20      
000915  20202000          DCB      "   ",0
000919  00                DCB      0
00091a  00                DCB      0
00091b  00                DCB      0
                  |L1.2332|
00091c  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
000920  c2cdc8c2
000924  c0ded9c8
000928  c920c7  
00092b  c0d0dfc4          DCB      192,208,223,196," ",0
00092f  2000    
000931  00                DCB      0
000932  00                DCB      0
000933  00                DCB      0
                  |L1.2356|
000934  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
000938  cdc0cfd0
00093c  dfc6c5cd
000940  c8df2020
000944  20202020
000948  00      
000949  00                DCB      0
00094a  00                DCB      0
00094b  00                DCB      0
                  |L1.2380|
00094c  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
000950  20c2dbd1
000954  cecacec3
000958  ce202020
00095c  20202020
000960  00      
000961  00                DCB      0
000962  00                DCB      0
000963  00                DCB      0
                  |L1.2404|
000964  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
000968  2020d2d3
00096c  ccc1cbc5
000970  d0202020
000974  20202020
000978  00      
000979  00                DCB      0
00097a  00                DCB      0
00097b  00                DCB      0
                  |L1.2428|
00097c  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
000980  20c2cacb
000984  ded7c8d2
000988  c5202020
00098c  20202020
000990  00      
000991  00                DCB      0
000992  00                DCB      0
000993  00                DCB      0
                  |L1.2452|
                          DCD      UZ_T
                  |L1.2456|
000998  6308              STR      r0,[r1,#0x30]  ; vz1_wrk_cnt
;;;925    		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;926    		vz1_up_cnt=0L;
00099a  634e              STR      r6,[r1,#0x34]  ; vz1_up_cnt
                  |L1.2460|
;;;927    
;;;928    		}
;;;929    	vz1_wrk_cnt--;
00099c  6b08              LDR      r0,[r1,#0x30]  ; vz1_wrk_cnt
00099e  f1a00001          SUB      r0,r0,#1
0009a2  6308              STR      r0,[r1,#0x30]  ; vz1_wrk_cnt
;;;930    	vz1_up_cnt++;
0009a4  6b4a              LDR      r2,[r1,#0x34]  ; vz1_up_cnt
0009a6  f1020201          ADD      r2,r2,#1
0009aa  634a              STR      r2,[r1,#0x34]  ; vz1_up_cnt
;;;931    
;;;932    	if(vz1_wrk_cnt==0)
0009ac  b940              CBNZ     r0,|L1.2496|
;;;933    		{
;;;934    		vz1_stat=vz1sFINE;
0009ae  f8889024          STRB     r9,[r8,#0x24]
;;;935    		lc640_write(EE_VZ1_STAT,vz1sFINE);
0009b2  210f              MOVS     r1,#0xf
0009b4  4658              MOV      r0,r11
0009b6  f7fffffe          BL       lc640_write
;;;936    		uz_mem_hndl(0);
0009ba  2000              MOVS     r0,#0
0009bc  f7fffffe          BL       uz_mem_hndl
                  |L1.2496|
;;;937    		}
;;;938    	if(sk_stat[0]==0)
0009c0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0009c2  b938              CBNZ     r0,|L1.2516|
;;;939    		{
;;;940    		vz1_stat=vz1sERR2;
0009c4  f04f000c          MOV      r0,#0xc
0009c8  f8880024          STRB     r0,[r8,#0x24]
;;;941    		lc640_write(EE_VZ1_STAT,vz1sERR2);
0009cc  4601              MOV      r1,r0
0009ce  4658              MOV      r0,r11
0009d0  f7fffffe          BL       lc640_write
                  |L1.2516|
;;;942    		}
;;;943    	if(sk_stat[1]==0)
0009d4  7868              LDRB     r0,[r5,#1]  ; sk_stat
0009d6  b938              CBNZ     r0,|L1.2536|
;;;944    		{
;;;945    		vz1_stat=vz1sERR3;
0009d8  f04f000d          MOV      r0,#0xd
0009dc  f8880024          STRB     r0,[r8,#0x24]
;;;946    		lc640_write(EE_VZ1_STAT,vz1sERR3);
0009e0  4601              MOV      r1,r0
0009e2  4658              MOV      r0,r11
0009e4  f7fffffe          BL       lc640_write
                  |L1.2536|
;;;947    		}
;;;948    	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0009e8  f9b80042          LDRSH    r0,[r8,#0x42]  ; Ibmax
0009ec  f8b81044          LDRH     r1,[r8,#0x44]  ; IZMAX_
0009f0  fb90f0f4          SDIV     r0,r0,r4
;;;949    		{
;;;950    		volt_region=0;
;;;951    		cntrl_stat=1000;
0009f4  f44f727a          MOV      r2,#0x3e8
0009f8  4288              CMP      r0,r1                 ;948
0009fa  dd16              BLE      |L1.2602|
0009fc  f9b8302a          LDRSH    r3,[r8,#0x2a]         ;948  ; cntrl_stat
000a00  2b14              CMP      r3,#0x14              ;948
000a02  dc12              BGT      |L1.2602|
000a04  f8983026          LDRB     r3,[r8,#0x26]         ;948  ; volt_region
000a08  2b01              CMP      r3,#1                 ;948
000a0a  d10e              BNE      |L1.2602|
000a0c  f8b83074          LDRH     r3,[r8,#0x74]         ;948  ; volt_region_cnt
000a10  b95b              CBNZ     r3,|L1.2602|
000a12  f8886026          STRB     r6,[r8,#0x26]         ;950
000a16  f8a8202a          STRH     r2,[r8,#0x2a]
;;;952    		cntrl_stat_new=1000;
000a1a  f8a82040          STRH     r2,[r8,#0x40]
;;;953    		cntrl_stat_old=1000;
000a1e  f8a8202c          STRH     r2,[r8,#0x2c]
;;;954    		volt_region_cnt=110;
000a22  f04f036e          MOV      r3,#0x6e
000a26  f8a83074          STRH     r3,[r8,#0x74]
                  |L1.2602|
;;;955    		}
;;;956    	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
000a2a  4288              CMP      r0,r1
000a2c  da13              BGE      |L1.2646|
000a2e  f9b8002a          LDRSH    r0,[r8,#0x2a]  ; cntrl_stat
000a32  4290              CMP      r0,r2
000a34  db0f              BLT      |L1.2646|
000a36  f8980026          LDRB     r0,[r8,#0x26]  ; volt_region
000a3a  b960              CBNZ     r0,|L1.2646|
000a3c  f8b80074          LDRH     r0,[r8,#0x74]  ; volt_region_cnt
000a40  b948              CBNZ     r0,|L1.2646|
;;;957    		{
;;;958    		volt_region=1;
000a42  f888a026          STRB     r10,[r8,#0x26]
;;;959    		cntrl_stat=10;
000a46  f8a8402a          STRH     r4,[r8,#0x2a]
;;;960    		cntrl_stat_new=10;
000a4a  f8a84040          STRH     r4,[r8,#0x40]
;;;961    		cntrl_stat_old=10;
000a4e  f8a8402c          STRH     r4,[r8,#0x2c]
;;;962    		volt_region_cnt=10;
000a52  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2646|
;;;963    		}
;;;964    	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000a56  f8980026          LDRB     r0,[r8,#0x26]  ; volt_region
000a5a  b110              CBZ      r0,|L1.2658|
;;;965    	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
000a5c  2801              CMP      r0,#1
000a5e  d007              BEQ      |L1.2672|
000a60  e00c              B        |L1.2684|
                  |L1.2658|
000a62  2314              MOVS     r3,#0x14              ;964
000a64  2200              MOVS     r2,#0                 ;964
000a66  2164              MOVS     r1,#0x64              ;964
000a68  20d2              MOVS     r0,#0xd2              ;964
000a6a  f7fffffe          BL       mess_send
000a6e  e005              B        |L1.2684|
                  |L1.2672|
000a70  2314              MOVS     r3,#0x14
000a72  2201              MOVS     r2,#1
000a74  2164              MOVS     r1,#0x64
000a76  20d2              MOVS     r0,#0xd2
000a78  f7fffffe          BL       mess_send
                  |L1.2684|
;;;966    	}
;;;967    
;;;968    if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
000a7c  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
000a80  280b              CMP      r0,#0xb
000a82  d120              BNE      |L1.2758|
;;;969    	{
;;;970    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000a84  f8980025          LDRB     r0,[r8,#0x25]  ; vz1_stat_old
000a88  280b              CMP      r0,#0xb
000a8a  d102              BNE      |L1.2706|
000a8c  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000a90  b908              CBNZ     r0,|L1.2710|
                  |L1.2706|
;;;971    		{
;;;972    		vz1_stat_cnt=10;
000a92  f8a84072          STRH     r4,[r8,#0x72]
                  |L1.2710|
;;;973    		}
;;;974    	vz1_stat_cnt--;
000a96  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000a9a  f1a00001          SUB      r0,r0,#1
000a9e  b200              SXTH     r0,r0
000aa0  f8a80072          STRH     r0,[r8,#0x72]
;;;975    	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000aa4  280a              CMP      r0,#0xa
000aa6  d001              BEQ      |L1.2732|
000aa8  2809              CMP      r0,#9
000aaa  d106              BNE      |L1.2746|
                  |L1.2732|
;;;976    		{
;;;977    		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000aac  a3ee              ADR      r3,|L1.3688|
000aae  a2f4              ADR      r2,|L1.3712|
000ab0  a1f9              ADR      r1,|L1.3736|
000ab2  a0ff              ADR      r0,|L1.3760|
000ab4  9700              STR      r7,[sp,#0]
000ab6  f7fffffe          BL       show_mess
                  |L1.2746|
;;;978    					"   НЕ МОЖЕТ БЫТЬ    ",
;;;979    					"      ВКЛЮЧЕН       ",
;;;980    					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;981    					5000);
;;;982    		}
;;;983    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000aba  2314              MOVS     r3,#0x14
000abc  2200              MOVS     r2,#0
000abe  2164              MOVS     r1,#0x64
000ac0  20d2              MOVS     r0,#0xd2
000ac2  f7fffffe          BL       mess_send
                  |L1.2758|
;;;984    	}
;;;985    if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
000ac6  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
000aca  280c              CMP      r0,#0xc
000acc  d12c              BNE      |L1.2856|
;;;986    	{
;;;987    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000ace  f8980025          LDRB     r0,[r8,#0x25]  ; vz1_stat_old
000ad2  280c              CMP      r0,#0xc
000ad4  d102              BNE      |L1.2780|
000ad6  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000ada  b908              CBNZ     r0,|L1.2784|
                  |L1.2780|
;;;988    		{
;;;989    		vz1_stat_cnt=10;
000adc  f8a84072          STRH     r4,[r8,#0x72]
                  |L1.2784|
;;;990    		}
;;;991    	vz1_stat_cnt--;
000ae0  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000ae4  f1a00001          SUB      r0,r0,#1
000ae8  b200              SXTH     r0,r0
000aea  f8a80072          STRH     r0,[r8,#0x72]
;;;992    	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000aee  280a              CMP      r0,#0xa
000af0  d001              BEQ      |L1.2806|
000af2  2809              CMP      r0,#9
000af4  d109              BNE      |L1.2826|
                  |L1.2806|
;;;993    		{
;;;994    		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000af6  f2af2324          ADR      r3,|L1.2260|
000afa  f2af2210          ADR      r2,|L1.2284|
000afe  f2af11fc          ADR      r1,|L1.2308|
000b02  a0eb              ADR      r0,|L1.3760|
000b04  9700              STR      r7,[sp,#0]
000b06  f7fffffe          BL       show_mess
                  |L1.2826|
;;;995    					"    ЗАБЛОКИРОВАН    ",
;;;996    					"     НЕИСПРАВНА     ",
;;;997    					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;998    					5000);
;;;999    		}
;;;1000   	if(sk_stat[0]==1)
000b0a  7828              LDRB     r0,[r5,#0]  ; sk_stat
000b0c  2801              CMP      r0,#1
000b0e  d105              BNE      |L1.2844|
;;;1001   		{
;;;1002   		vz1_stat=vz1sWRK;
000b10  f8884024          STRB     r4,[r8,#0x24]
;;;1003   		lc640_write(EE_VZ1_STAT,vz1sWRK);
000b14  210a              MOVS     r1,#0xa
000b16  4658              MOV      r0,r11
000b18  f7fffffe          BL       lc640_write
                  |L1.2844|
;;;1004   		}
;;;1005   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000b1c  2314              MOVS     r3,#0x14
000b1e  2200              MOVS     r2,#0
000b20  2164              MOVS     r1,#0x64
000b22  20d2              MOVS     r0,#0xd2
000b24  f7fffffe          BL       mess_send
                  |L1.2856|
;;;1006   	}
;;;1007   
;;;1008   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
000b28  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
000b2c  280d              CMP      r0,#0xd
000b2e  d129              BNE      |L1.2948|
;;;1009   	{
;;;1010   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000b30  f8980025          LDRB     r0,[r8,#0x25]  ; vz1_stat_old
000b34  280d              CMP      r0,#0xd
000b36  d102              BNE      |L1.2878|
000b38  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000b3c  b908              CBNZ     r0,|L1.2882|
                  |L1.2878|
;;;1011   		{
;;;1012   		vz1_stat_cnt=10;
000b3e  f8a84072          STRH     r4,[r8,#0x72]
                  |L1.2882|
;;;1013   		}
;;;1014   	vz1_stat_cnt--;
000b42  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000b46  f1a00001          SUB      r0,r0,#1
000b4a  b200              SXTH     r0,r0
000b4c  f8a80072          STRH     r0,[r8,#0x72]
;;;1015   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000b50  280a              CMP      r0,#0xa
000b52  d001              BEQ      |L1.2904|
000b54  2809              CMP      r0,#9
000b56  d106              BNE      |L1.2918|
                  |L1.2904|
;;;1016   		{
;;;1017   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000b58  a3db              ADR      r3,|L1.3784|
000b5a  a2e1              ADR      r2,|L1.3808|
000b5c  a1e6              ADR      r1,|L1.3832|
000b5e  a0d4              ADR      r0,|L1.3760|
000b60  9700              STR      r7,[sp,#0]
000b62  f7fffffe          BL       show_mess
                  |L1.2918|
;;;1018   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1019   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1020   					"*   ТУМБЛЕРА!!!     ",
;;;1021   					5000);
;;;1022   		}
;;;1023   	if(sk_stat[1]==1)
000b66  7868              LDRB     r0,[r5,#1]  ; sk_stat
000b68  2801              CMP      r0,#1
000b6a  d105              BNE      |L1.2936|
;;;1024   		{
;;;1025   		vz1_stat=vz1sWRK;
000b6c  f8884024          STRB     r4,[r8,#0x24]
;;;1026   		lc640_write(EE_VZ1_STAT,vz1sWRK);
000b70  210a              MOVS     r1,#0xa
000b72  4658              MOV      r0,r11
000b74  f7fffffe          BL       lc640_write
                  |L1.2936|
;;;1027   		}
;;;1028   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000b78  2314              MOVS     r3,#0x14
000b7a  2200              MOVS     r2,#0
000b7c  2164              MOVS     r1,#0x64
000b7e  20d2              MOVS     r0,#0xd2
000b80  f7fffffe          BL       mess_send
                  |L1.2948|
;;;1029   	}
;;;1030   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
000b84  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
000b88  280e              CMP      r0,#0xe
000b8a  d12d              BNE      |L1.3048|
;;;1031   	{
;;;1032   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000b8c  f8980025          LDRB     r0,[r8,#0x25]  ; vz1_stat_old
000b90  280e              CMP      r0,#0xe
000b92  d102              BNE      |L1.2970|
000b94  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000b98  b908              CBNZ     r0,|L1.2974|
                  |L1.2970|
;;;1033   		{
;;;1034   		vz1_stat_cnt=10;
000b9a  f8a84072          STRH     r4,[r8,#0x72]
                  |L1.2974|
;;;1035   		}
;;;1036   	vz1_stat_cnt--;
000b9e  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000ba2  f1a00001          SUB      r0,r0,#1
000ba6  b200              SXTH     r0,r0
000ba8  f8a80072          STRH     r0,[r8,#0x72]
;;;1037   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000bac  280a              CMP      r0,#0xa
000bae  d001              BEQ      |L1.2996|
000bb0  2809              CMP      r0,#9
000bb2  d109              BNE      |L1.3016|
                  |L1.2996|
;;;1038   		{
;;;1039   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
000bb4  f2af2384          ADR      r3,|L1.2356|
000bb8  f2af2270          ADR      r2,|L1.2380|
000bbc  f2af215c          ADR      r1,|L1.2404|
000bc0  a0d3              ADR      r0,|L1.3856|
000bc2  9700              STR      r7,[sp,#0]
000bc4  f7fffffe          BL       show_mess
                  |L1.3016|
;;;1040   					"      ТУМБЛЕР       ",
;;;1041   					"     ВЫСОКОГО       ",
;;;1042   					"    НАПРЯЖЕНИЯ      ",
;;;1043   					5000);
;;;1044   		}
;;;1045   	if(sk_stat[1]==0)
000bc8  7868              LDRB     r0,[r5,#1]  ; sk_stat
000bca  b938              CBNZ     r0,|L1.3036|
;;;1046   		{
;;;1047   		vz1_stat=vz1sOFF;
000bcc  f8886024          STRB     r6,[r8,#0x24]
;;;1048   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000bd0  2100              MOVS     r1,#0
000bd2  4658              MOV      r0,r11
000bd4  f7fffffe          BL       lc640_write
;;;1049   		vz_stop();
000bd8  f7fffffe          BL       vz_stop
                  |L1.3036|
;;;1050   
;;;1051   		}
;;;1052   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
000bdc  2314              MOVS     r3,#0x14
000bde  2201              MOVS     r2,#1
000be0  2164              MOVS     r1,#0x64
000be2  20d2              MOVS     r0,#0xd2
000be4  f7fffffe          BL       mess_send
                  |L1.3048|
;;;1053   	}
;;;1054   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
000be8  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
;;;1055   	{
;;;1056   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1057   		{
;;;1058   		vz1_stat_cnt=10;
;;;1059   		}
;;;1060   	vz1_stat_cnt--;
;;;1061   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1062   		{
;;;1063   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
000bec  f64037b8          MOV      r7,#0xbb8
000bf0  280f              CMP      r0,#0xf               ;1054
000bf2  d138              BNE      |L1.3174|
000bf4  f8980025          LDRB     r0,[r8,#0x25]         ;1056  ; vz1_stat_old
000bf8  280f              CMP      r0,#0xf               ;1056
000bfa  d102              BNE      |L1.3074|
000bfc  f8b80072          LDRH     r0,[r8,#0x72]         ;1056  ; vz1_stat_cnt
000c00  b908              CBNZ     r0,|L1.3078|
                  |L1.3074|
000c02  f8a84072          STRH     r4,[r8,#0x72]         ;1058
                  |L1.3078|
000c06  f8b80072          LDRH     r0,[r8,#0x72]         ;1060  ; vz1_stat_cnt
000c0a  f1a00001          SUB      r0,r0,#1              ;1060
000c0e  b200              SXTH     r0,r0                 ;1060
000c10  f8a80072          STRH     r0,[r8,#0x72]         ;1060
000c14  280a              CMP      r0,#0xa               ;1061
000c16  d001              BEQ      |L1.3100|
000c18  2809              CMP      r0,#9                 ;1061
000c1a  d106              BNE      |L1.3114|
                  |L1.3100|
000c1c  a3c2              ADR      r3,|L1.3880|
000c1e  a2c8              ADR      r2,|L1.3904|
000c20  a1cd              ADR      r1,|L1.3928|
000c22  a0d3              ADR      r0,|L1.3952|
000c24  9700              STR      r7,[sp,#0]
000c26  f7fffffe          BL       show_mess
                  |L1.3114|
;;;1064   					"       ЗАРЯД        ",
;;;1065   					"      УСПЕШНО       ",
;;;1066   					"     ЗАВЕРШЕН       ",
;;;1067   					3000);
;;;1068   		}
;;;1069   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
000c2a  f9b80072          LDRSH    r0,[r8,#0x72]  ; vz1_stat_cnt
000c2e  2806              CMP      r0,#6
000c30  d001              BEQ      |L1.3126|
000c32  2805              CMP      r0,#5
000c34  d109              BNE      |L1.3146|
                  |L1.3126|
;;;1070   		{
;;;1071   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
000c36  f2af3304          ADR      r3,|L1.2356|
000c3a  f2af22f0          ADR      r2,|L1.2380|
000c3e  f2af21dc          ADR      r1,|L1.2404|
000c42  a0d1              ADR      r0,|L1.3976|
000c44  9700              STR      r7,[sp,#0]
000c46  f7fffffe          BL       show_mess
                  |L1.3146|
;;;1072   					"      ТУМБЛЕР       ",
;;;1073   					"     ВЫСОКОГО       ",
;;;1074   					"    НАПРЯЖЕНИЯ      ",
;;;1075   					3000);
;;;1076   		}
;;;1077   	if(sk_stat[1]==0)
000c4a  7868              LDRB     r0,[r5,#1]  ; sk_stat
000c4c  b928              CBNZ     r0,|L1.3162|
;;;1078   		{
;;;1079   		vz1_stat=vz1sOFF;
000c4e  f8886024          STRB     r6,[r8,#0x24]
;;;1080   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000c52  2100              MOVS     r1,#0
000c54  4658              MOV      r0,r11
000c56  f7fffffe          BL       lc640_write
                  |L1.3162|
;;;1081   		}
;;;1082   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000c5a  2314              MOVS     r3,#0x14
000c5c  2200              MOVS     r2,#0
000c5e  2164              MOVS     r1,#0x64
000c60  20d2              MOVS     r0,#0xd2
000c62  f7fffffe          BL       mess_send
                  |L1.3174|
;;;1083   	}
;;;1084   
;;;1085   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
000c66  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
000c6a  2810              CMP      r0,#0x10
000c6c  d138              BNE      |L1.3296|
;;;1086   	{
;;;1087   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000c6e  f8980025          LDRB     r0,[r8,#0x25]  ; vz1_stat_old
000c72  2810              CMP      r0,#0x10
000c74  d102              BNE      |L1.3196|
000c76  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000c7a  b908              CBNZ     r0,|L1.3200|
                  |L1.3196|
;;;1088   		{
;;;1089   		vz1_stat_cnt=10;
000c7c  f8a84072          STRH     r4,[r8,#0x72]
                  |L1.3200|
;;;1090   		}
;;;1091   	vz1_stat_cnt--;
000c80  f8b80072          LDRH     r0,[r8,#0x72]  ; vz1_stat_cnt
000c84  f1a00001          SUB      r0,r0,#1
000c88  b200              SXTH     r0,r0
000c8a  f8a80072          STRH     r0,[r8,#0x72]
;;;1092   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000c8e  280a              CMP      r0,#0xa
000c90  d001              BEQ      |L1.3222|
000c92  2809              CMP      r0,#9
000c94  d106              BNE      |L1.3236|
                  |L1.3222|
;;;1093   		{
;;;1094   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
000c96  a3c2              ADR      r3,|L1.4000|
000c98  a2c7              ADR      r2,|L1.4024|
000c9a  a1af              ADR      r1,|L1.3928|
000c9c  a0b4              ADR      r0,|L1.3952|
000c9e  9700              STR      r7,[sp,#0]
000ca0  f7fffffe          BL       show_mess
                  |L1.3236|
;;;1095   					"       ЗАРЯД        ",
;;;1096   					"     ПРЕКРАЩЕН      ",
;;;1097   					"                    ",
;;;1098   					3000);
;;;1099   		}
;;;1100   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
000ca4  f9b80072          LDRSH    r0,[r8,#0x72]  ; vz1_stat_cnt
000ca8  2806              CMP      r0,#6
000caa  d001              BEQ      |L1.3248|
000cac  2805              CMP      r0,#5
000cae  d109              BNE      |L1.3268|
                  |L1.3248|
;;;1101   		{
;;;1102   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
000cb0  f2af3380          ADR      r3,|L1.2356|
000cb4  f2af326c          ADR      r2,|L1.2380|
000cb8  f2af3158          ADR      r1,|L1.2404|
000cbc  a0b2              ADR      r0,|L1.3976|
000cbe  9700              STR      r7,[sp,#0]
000cc0  f7fffffe          BL       show_mess
                  |L1.3268|
;;;1103   					"      ТУМБЛЕР       ",
;;;1104   					"     ВЫСОКОГО       ",
;;;1105   					"    НАПРЯЖЕНИЯ      ",
;;;1106   					3000);
;;;1107   		}
;;;1108   	if(sk_stat[1]==0)
000cc4  7868              LDRB     r0,[r5,#1]  ; sk_stat
000cc6  b928              CBNZ     r0,|L1.3284|
;;;1109   		{
;;;1110   		vz1_stat=vz1sOFF;
000cc8  f8886024          STRB     r6,[r8,#0x24]
;;;1111   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000ccc  2100              MOVS     r1,#0
000cce  4658              MOV      r0,r11
000cd0  f7fffffe          BL       lc640_write
                  |L1.3284|
;;;1112   		}
;;;1113   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000cd4  2314              MOVS     r3,#0x14
000cd6  2200              MOVS     r2,#0
000cd8  2164              MOVS     r1,#0x64
000cda  20d2              MOVS     r0,#0xd2
000cdc  f7fffffe          BL       mess_send
                  |L1.3296|
;;;1114   	}
;;;1115   
;;;1116   vz1_stat_old=vz1_stat;
000ce0  f8980024          LDRB     r0,[r8,#0x24]  ; vz1_stat
000ce4  f8880025          STRB     r0,[r8,#0x25]
;;;1117   
;;;1118   
;;;1119   
;;;1120   }
000ce8  e8bd8ff8          POP      {r3-r11,pc}
;;;1121   
                          ENDP

                  vz1_start PROC
;;;1123   //старт уравнительног заряда
;;;1124   char vz1_start(char hour)
000cec  b510              PUSH     {r4,lr}
;;;1125   {          
;;;1126   char out;
;;;1127   out=0;
000cee  f04f0000          MOV      r0,#0
;;;1128   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
000cf2  49b7              LDR      r1,|L1.4048|
000cf4  7e0a              LDRB     r2,[r1,#0x18]  ; spc_stat
000cf6  2a00              CMP      r2,#0
000cf8  d112              BNE      |L1.3360|
000cfa  4ab6              LDR      r2,|L1.4052|
000cfc  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
000cfe  2a01              CMP      r2,#1
000d00  d00e              BEQ      |L1.3360|
000d02  f8912024          LDRB     r2,[r1,#0x24]  ; vz1_stat
000d06  2a00              CMP      r2,#0
000d08  d10a              BNE      |L1.3360|
;;;1129   	{
;;;1130   	if(vz1_stat==vz1sOFF)
;;;1131   		{
;;;1132   		vz1_stat=vz1sSTEP1;
000d0a  f04f0001          MOV      r0,#1
000d0e  f8810024          STRB     r0,[r1,#0x24]
;;;1133   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
000d12  4601              MOV      r1,r0
000d14  f44f70c9          MOV      r0,#0x192
000d18  f7fffffe          BL       lc640_write
;;;1134   		out=1;
000d1c  f04f0001          MOV      r0,#1
                  |L1.3360|
;;;1135   		
;;;1136   		}
;;;1137   /*	spc_stat=spcVZ;
;;;1138   	__ee_spc_stat=spcVZ; 
;;;1139   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1140   	vz_cnt_h=hour;
;;;1141   	__ee_vz_cnt=hour*60;
;;;1142   	if(hour==0)__ee_vz_cnt=30;
;;;1143   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1144   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1145   	vz_cnt_h_=0;
;;;1146   	vz_cnt_s=0;
;;;1147   	vz_cnt_s_=0;
;;;1148   	
;;;1149   		*/
;;;1150   	}
;;;1151   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1152   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1153   //plazma=out;	
;;;1154   return out;
;;;1155   }
000d20  bd10              POP      {r4,pc}
;;;1156   
                          ENDP

                  vz1_stop PROC
;;;1158   //стоп уравнительног заряда
;;;1159   void vz1_stop(void)
000d22  48ab              LDR      r0,|L1.4048|
;;;1160   {
;;;1161   if(vz1_stat!=vz1sOFF)
000d24  f8901024          LDRB     r1,[r0,#0x24]  ; vz1_stat
000d28  2900              CMP      r1,#0
000d2a  d007              BEQ      |L1.3388|
;;;1162   	{
;;;1163   	vz1_stat=vz1sSTOP;
000d2c  f04f0110          MOV      r1,#0x10
000d30  f8801024          STRB     r1,[r0,#0x24]
;;;1164   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
000d34  f44f70c9          MOV      r0,#0x192
000d38  f7ffbffe          B.W      lc640_write
                  |L1.3388|
;;;1165   	}
;;;1166   }
000d3c  4770              BX       lr
;;;1167   
                          ENDP

                  vz2_drv PROC
;;;1169   //драйвер формовочного заряда
;;;1170   void vz2_drv(void)
000d3e  e92d4ff8          PUSH     {r3-r11,lr}
;;;1171   {
;;;1172   
;;;1173   if(vz2_stat==vz2sSTEP1)
000d42  4ea3              LDR      r6,|L1.4048|
;;;1174   	{
;;;1175   	if(vz2_stat_old!=vz2_stat)
;;;1176   		{
;;;1177   		vz2_stat_cnt=5;
;;;1178   		}
;;;1179   	if(vz2_stat_cnt)
;;;1180   		{
;;;1181   		vz2_stat_cnt--;
;;;1182   		if(vz2_stat_cnt==0)
;;;1183   			{
;;;1184   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1185   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1186   			}
;;;1187   		}
;;;1188   	if(sk_stat[0]==1)
000d44  4da4              LDR      r5,|L1.4056|
000d46  f8960027          LDRB     r0,[r6,#0x27]         ;1173  ; vz2_stat
000d4a  2801              CMP      r0,#1                 ;1173
000d4c  d13b              BNE      |L1.3526|
000d4e  f8960028          LDRB     r0,[r6,#0x28]         ;1175  ; vz2_stat_old
000d52  2801              CMP      r0,#1                 ;1175
000d54  d003              BEQ      |L1.3422|
000d56  f04f0005          MOV      r0,#5                 ;1177
000d5a  f8a60076          STRH     r0,[r6,#0x76]         ;1177
                  |L1.3422|
000d5e  f9b60076          LDRSH    r0,[r6,#0x76]         ;1179  ; vz2_stat_cnt
000d62  b170              CBZ      r0,|L1.3458|
000d64  f1a00001          SUB      r0,r0,#1              ;1181
000d68  b200              SXTH     r0,r0                 ;1181
000d6a  f8a60076          STRH     r0,[r6,#0x76]         ;1181
000d6e  b940              CBNZ     r0,|L1.3458|
000d70  f04f000c          MOV      r0,#0xc               ;1184
000d74  f8860027          STRB     r0,[r6,#0x27]         ;1184
000d78  4601              MOV      r1,r0                 ;1185
000d7a  f44f70ca          MOV      r0,#0x194             ;1185
000d7e  f7fffffe          BL       lc640_write
                  |L1.3458|
000d82  7828              LDRB     r0,[r5,#0]  ; sk_stat
000d84  2801              CMP      r0,#1
000d86  d118              BNE      |L1.3514|
;;;1189   		{
;;;1190   		vz2_stat=vz2sSTEP2;
000d88  f04f0002          MOV      r0,#2
000d8c  f8860027          STRB     r0,[r6,#0x27]
;;;1191   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
000d90  4601              MOV      r1,r0
000d92  f44f70ca          MOV      r0,#0x194
000d96  f7fffffe          BL       lc640_write
;;;1192   		tree_up(iVZ2_STEP2_2,1,0,0);
000d9a  2300              MOVS     r3,#0
000d9c  461a              MOV      r2,r3
000d9e  2101              MOVS     r1,#1
000da0  20e0              MOVS     r0,#0xe0
000da2  f7fffffe          BL       tree_up
;;;1193   		tree_up(iVZ2_STEP2_1,0,0,0);
000da6  2300              MOVS     r3,#0
000da8  461a              MOV      r2,r3
000daa  4619              MOV      r1,r3
000dac  20df              MOVS     r0,#0xdf
000dae  f7fffffe          BL       tree_up
;;;1194   		ret(1200);
000db2  f44f6096          MOV      r0,#0x4b0
000db6  f7fffffe          BL       ||ret||
                  |L1.3514|
;;;1195   		}
;;;1196   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000dba  2314              MOVS     r3,#0x14
000dbc  2200              MOVS     r2,#0
000dbe  2164              MOVS     r1,#0x64
000dc0  20d2              MOVS     r0,#0xd2
000dc2  f7fffffe          BL       mess_send
                  |L1.3526|
;;;1197   	}
;;;1198   
;;;1199   if(vz2_stat==vz2sSTEP2)
000dc6  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
000dca  2802              CMP      r0,#2
000dcc  d11a              BNE      |L1.3588|
;;;1200   	{
;;;1201   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
000dce  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
000dd2  2802              CMP      r0,#2
000dd4  d102              BNE      |L1.3548|
000dd6  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
000dda  b918              CBNZ     r0,|L1.3556|
                  |L1.3548|
;;;1202   		{
;;;1203   		vz2_stat_cnt=15;
000ddc  f04f000f          MOV      r0,#0xf
000de0  f8a60076          STRH     r0,[r6,#0x76]
                  |L1.3556|
;;;1204   		}
;;;1205   	vz2_stat_cnt--;
000de4  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
000de8  f1a00001          SUB      r0,r0,#1
000dec  f8a60076          STRH     r0,[r6,#0x76]
;;;1206   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000df0  f04f0314          MOV      r3,#0x14
000df4  f04f0200          MOV      r2,#0
000df8  f04f0164          MOV      r1,#0x64
000dfc  f04f00d2          MOV      r0,#0xd2
000e00  f7fffffe          BL       mess_send
                  |L1.3588|
;;;1207   	}
;;;1208   
;;;1209   if(vz2_stat==vz2sSTEP3)
000e04  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
;;;1210   	{
;;;1211   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1212   		{
;;;1213   		vz2_stat_cnt=10;
000e08  240a              MOVS     r4,#0xa
000e0a  2700              MOVS     r7,#0
;;;1214   		cntrl_stat=0;
;;;1215   		cntrl_stat_new=0;
;;;1216   		cntrl_stat_old=0;
;;;1217   		}
;;;1218   	vz2_stat_cnt--;
;;;1219   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1220   		{
;;;1221   		show_mess(	"     ВКЛЮЧИТЕ       ",
000e0c  f2413888          MOV      r8,#0x1388
000e10  2803              CMP      r0,#3                 ;1209
000e12  d127              BNE      |L1.3684|
000e14  f8960028          LDRB     r0,[r6,#0x28]         ;1211  ; vz2_stat_old
000e18  2803              CMP      r0,#3                 ;1211
000e1a  d102              BNE      |L1.3618|
000e1c  f8b60076          LDRH     r0,[r6,#0x76]         ;1211  ; vz2_stat_cnt
000e20  b928              CBNZ     r0,|L1.3630|
                  |L1.3618|
000e22  f8a64076          STRH     r4,[r6,#0x76]         ;1213
000e26  8577              STRH     r7,[r6,#0x2a]         ;1214
000e28  f8a67040          STRH     r7,[r6,#0x40]         ;1215
000e2c  85b7              STRH     r7,[r6,#0x2c]         ;1216
                  |L1.3630|
000e2e  f8b60076          LDRH     r0,[r6,#0x76]         ;1218  ; vz2_stat_cnt
000e32  f1a00001          SUB      r0,r0,#1              ;1218
000e36  b200              SXTH     r0,r0                 ;1218
000e38  f8a60076          STRH     r0,[r6,#0x76]         ;1218
000e3c  280a              CMP      r0,#0xa               ;1219
000e3e  d001              BEQ      |L1.3652|
000e40  2809              CMP      r0,#9                 ;1219
000e42  d10b              BNE      |L1.3676|
                  |L1.3652|
000e44  f2af5314          ADR      r3,|L1.2356|
000e48  f2af5200          ADR      r2,|L1.2380|
000e4c  f2af41ec          ADR      r1,|L1.2404|
000e50  f2af40d8          ADR      r0,|L1.2428|
000e54  f8cd8000          STR      r8,[sp,#0]
000e58  f7fffffe          BL       show_mess
                  |L1.3676|
;;;1222   					"      ТУМБЛЕР       ",
;;;1223   					"     ВЫСОКОГО       ",
;;;1224   					"    НАПРЯЖЕНИЯ      ",
;;;1225   					5000);
;;;1226   		}
;;;1227   	if(sk_stat[1]==1)
000e5c  7868              LDRB     r0,[r5,#1]  ; sk_stat
000e5e  2801              CMP      r0,#1
000e60  d101              BNE      |L1.3686|
;;;1228   		{
;;;1229   		vz2_stat=vz2sWRK1;
000e62  e0bb              B        |L1.4060|
                  |L1.3684|
000e64  e0d1              B        |L1.4106|
                  |L1.3686|
000e66  e0ca              B        |L1.4094|
                  |L1.3688|
000e68  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
000e6c  c720c2c5
000e70  cdd2c8cb
000e74  dfd6c8  
000e77  c8212120          DCB      200,"!!  ",0
000e7b  2000    
000e7d  00                DCB      0
000e7e  00                DCB      0
000e7f  00                DCB      0
                  |L1.3712|
000e80  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
000e84  2020c2ca
000e88  cbded7c5
000e8c  cd202020
000e90  20202020
000e94  00      
000e95  00                DCB      0
000e96  00                DCB      0
000e97  00                DCB      0
                  |L1.3736|
000e98  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
000e9c  c520ccce
000ea0  c6c5d220
000ea4  c1dbd2dc
000ea8  20202020          DCB      "    ",0
000eac  00      
000ead  00                DCB      0
000eae  00                DCB      0
000eaf  00                DCB      0
                  |L1.3760|
000eb0  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
000eb4  cdc8d2c5
000eb8  cbdccddb
000ebc  c920c7  
000ebf  c0d0dfc4          DCB      192,208,223,196," ",0
000ec3  2000    
000ec5  00                DCB      0
000ec6  00                DCB      0
000ec7  00                DCB      0
                  |L1.3784|
000ec8  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
000ecc  d2d3ccc1
000ed0  cbc5d0c0
000ed4  21212120
000ed8  20202020
000edc  00      
000edd  00                DCB      0
000ede  00                DCB      0
000edf  00                DCB      0
                  |L1.3808|
000ee0  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
000ee4  d1cbc520
000ee8  c2cacbde
000eec  d7c5cd  
000eef  c8df2020          DCB      200,223,"   ",0
000ef3  2000    
000ef5  00                DCB      0
000ef6  00                DCB      0
000ef7  00                DCB      0
                  |L1.3832|
000ef8  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
000efc  c4c5d220
000f00  cfd0cec4
000f04  cecbc6  
000f07  c5cd2020          DCB      197,205,"   ",0
000f0b  2000    
000f0d  00                DCB      0
000f0e  00                DCB      0
000f0f  00                DCB      0
                  |L1.3856|
000f10  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
000f14  20c2dbca
000f18  cbded7c8
000f1c  d2c52020
000f20  20202020
000f24  00      
000f25  00                DCB      0
000f26  00                DCB      0
000f27  00                DCB      0
                  |L1.3880|
000f28  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
000f2c  20c7c0c2
000f30  c5d0d8c5
000f34  cd202020
000f38  20202020
000f3c  00      
000f3d  00                DCB      0
000f3e  00                DCB      0
000f3f  00                DCB      0
                  |L1.3904|
000f40  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
000f44  2020d3d1
000f48  cfc5d8cd
000f4c  ce202020
000f50  20202020
000f54  00      
000f55  00                DCB      0
000f56  00                DCB      0
000f57  00                DCB      0
                  |L1.3928|
000f58  20202020          DCB      "       ",199,192,208,223,196,"        ",0
000f5c  202020c7
000f60  c0d0dfc4
000f64  20202020
000f68  20202020
000f6c  00      
000f6d  00                DCB      0
000f6e  00                DCB      0
000f6f  00                DCB      0
                  |L1.3952|
000f70  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
000f74  d0c0c2cd
000f78  c8d2c5cb
000f7c  dccddbc9
000f80  20202020          DCB      "    ",0
000f84  00      
000f85  00                DCB      0
000f86  00                DCB      0
000f87  00                DCB      0
                  |L1.3976|
000f88  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
000f8c  20c2dbca
000f90  cbded7c8
000f94  d2c52020
000f98  20202020
000f9c  00      
000f9d  00                DCB      0
000f9e  00                DCB      0
000f9f  00                DCB      0
                  |L1.4000|
000fa0  20202020          DCB      "                    ",0
000fa4  20202020
000fa8  20202020
000fac  20202020
000fb0  20202020
000fb4  00      
000fb5  00                DCB      0
000fb6  00                DCB      0
000fb7  00                DCB      0
                  |L1.4024|
000fb8  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
000fbc  20cfd0c5
000fc0  cad0c0d9
000fc4  c5cd2020
000fc8  20202020
000fcc  00      
000fcd  00                DCB      0
000fce  00                DCB      0
000fcf  00                DCB      0
                  |L1.4048|
                          DCD      ||area_number.25||
                  |L1.4052|
                          DCD      speedChrgBlckStat
                  |L1.4056|
                          DCD      sk_stat
                  |L1.4060|
000fdc  f1060626          ADD      r6,r6,#0x26
000fe0  7074              STRB     r4,[r6,#1]
;;;1230   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
000fe2  f04f010a          MOV      r1,#0xa
000fe6  f44f70ca          MOV      r0,#0x194
000fea  f7fffffe          BL       lc640_write
;;;1231   		volt_region=1;
000fee  f04f0001          MOV      r0,#1
000ff2  7030              STRB     r0,[r6,#0]
;;;1232   		cntrl_stat=0;
000ff4  80b7              STRH     r7,[r6,#4]
;;;1233   		cntrl_stat_new=0;
000ff6  8377              STRH     r7,[r6,#0x1a]
;;;1234   		cntrl_stat_old=0;
000ff8  80f7              STRH     r7,[r6,#6]
000ffa  f1a60626          SUB      r6,r6,#0x26
                  |L1.4094|
;;;1235   		}
;;;1236   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000ffe  2314              MOVS     r3,#0x14
001000  2200              MOVS     r2,#0
001002  2164              MOVS     r1,#0x64
001004  20d2              MOVS     r0,#0xd2
001006  f7fffffe          BL       mess_send
                  |L1.4106|
;;;1237   	}
;;;1238   
;;;1239   if(vz2_stat==vz2sWRK1)
00100a  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
;;;1240   	{
;;;1241   
;;;1242   	if(vz2_stat_old!=vz2_stat)
;;;1243   		{
;;;1244   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
00100e  f8df9410          LDR      r9,|L1.5152|
;;;1245   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1246   		vz2_up_cnt=0L;
;;;1247   
;;;1248   		}
;;;1249   	vz2_wrk_cnt--;
;;;1250   	vz2_up_cnt++;
;;;1251   
;;;1252   	if(vz2_wrk_cnt==0)
;;;1253   		{
;;;1254   		vz2_stat=vz2sWRK2;
;;;1255   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1256   		}
;;;1257   	if(sk_stat[0]==0)
;;;1258   		{
;;;1259   		vz2_stat=vz2sERR2;
;;;1260   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1261   		}
;;;1262   	if(sk_stat[1]==0)
;;;1263   		{
;;;1264   		vz2_stat=vz2sERR3;
;;;1265   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1266   		}
;;;1267   	//if(abs(out_U-FZ_U1)<10)
;;;1268   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1269   		{
;;;1270   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1271   			{
;;;1272   			if(vz2_stat_ph2_cnt)
;;;1273   				{
;;;1274   				vz2_stat_ph2_cnt--;
;;;1275   				if(vz2_stat_ph2_cnt==0)
;;;1276   					{
;;;1277   					vz2_stat=vz2sWRK2;
;;;1278   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1279   					}
;;;1280   				}
;;;1281   			}
;;;1282   		else
;;;1283   			{
;;;1284   			vz2_stat_ph2_cnt=60;
;;;1285   			}
;;;1286   		}
;;;1287   	else
;;;1288   		{
;;;1289   		vz2_stat_ph2_cnt=60;
;;;1290   		}
;;;1291   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1292   		{
;;;1293   		volt_region=0;
;;;1294   		cntrl_stat=1000;
001012  f44f7b7a          MOV      r11,#0x3e8
001016  f04f0a0b          MOV      r10,#0xb              ;1254
00101a  280a              CMP      r0,#0xa               ;1239
00101c  d17e              BNE      |L1.4380|
00101e  f8960028          LDRB     r0,[r6,#0x28]         ;1242  ; vz2_stat_old
001022  280a              CMP      r0,#0xa               ;1242
001024  d00a              BEQ      |L1.4156|
001026  48ff              LDR      r0,|L1.5156|
001028  f44f6161          MOV      r1,#0xe10             ;1244
00102c  f9b00000          LDRSH    r0,[r0,#0]            ;1244  ; FZ_T1
001030  fb00f001          MUL      r0,r0,r1              ;1244
001034  f8c90038          STR      r0,[r9,#0x38]         ;1244  ; vz2_wrk_cnt
001038  f8c9703c          STR      r7,[r9,#0x3c]         ;1246  ; vz2_up_cnt
                  |L1.4156|
00103c  f8d90038          LDR      r0,[r9,#0x38]         ;1249  ; vz2_wrk_cnt
001040  f1a00001          SUB      r0,r0,#1              ;1249
001044  f8c90038          STR      r0,[r9,#0x38]         ;1249  ; vz2_wrk_cnt
001048  f8d9103c          LDR      r1,[r9,#0x3c]         ;1250  ; vz2_up_cnt
00104c  f1010101          ADD      r1,r1,#1              ;1250
001050  f8c9103c          STR      r1,[r9,#0x3c]         ;1250  ; vz2_up_cnt
001054  b930              CBNZ     r0,|L1.4196|
001056  f886a027          STRB     r10,[r6,#0x27]        ;1254
00105a  210b              MOVS     r1,#0xb               ;1255
00105c  f44f70ca          MOV      r0,#0x194             ;1255
001060  f7fffffe          BL       lc640_write
                  |L1.4196|
001064  7828              LDRB     r0,[r5,#0]            ;1257  ; sk_stat
001066  b940              CBNZ     r0,|L1.4218|
001068  f04f000d          MOV      r0,#0xd               ;1259
00106c  f8860027          STRB     r0,[r6,#0x27]         ;1259
001070  4601              MOV      r1,r0                 ;1260
001072  f44f70ca          MOV      r0,#0x194             ;1260
001076  f7fffffe          BL       lc640_write
                  |L1.4218|
00107a  7868              LDRB     r0,[r5,#1]            ;1262  ; sk_stat
00107c  b940              CBNZ     r0,|L1.4240|
00107e  f04f000e          MOV      r0,#0xe               ;1264
001082  f8860027          STRB     r0,[r6,#0x27]         ;1264
001086  4601              MOV      r1,r0                 ;1265
001088  f44f70ca          MOV      r0,#0x194             ;1265
00108c  f7fffffe          BL       lc640_write
                  |L1.4240|
001090  48e5              LDR      r0,|L1.5160|
001092  223c              MOVS     r2,#0x3c              ;1284
001094  f9b01000          LDRSH    r1,[r0,#0]            ;1268  ; out_U
001098  48e4              LDR      r0,|L1.5164|
00109a  f9b00000          LDRSH    r0,[r0,#0]            ;1268  ; FZ_U1
00109e  f100031e          ADD      r3,r0,#0x1e           ;1268
0010a2  4299              CMP      r1,r3                 ;1268
0010a4  da20              BGE      |L1.4328|
0010a6  380a              SUBS     r0,r0,#0xa            ;1268
0010a8  4281              CMP      r1,r0                 ;1268
0010aa  dd1d              BLE      |L1.4328|
0010ac  48e0              LDR      r0,|L1.5168|
0010ae  49e1              LDR      r1,|L1.5172|
0010b0  f9b00000          LDRSH    r0,[r0,#0]            ;1270  ; Ib_ips_termokompensat
0010b4  f9b11000          LDRSH    r1,[r1,#0]            ;1270  ; FZ_ISW12
0010b8  fb90f0f4          SDIV     r0,r0,r4              ;1270
0010bc  4288              CMP      r0,r1                 ;1270
0010be  da10              BGE      |L1.4322|
0010c0  f9b60078          LDRSH    r0,[r6,#0x78]         ;1272  ; vz2_stat_ph2_cnt
0010c4  b190              CBZ      r0,|L1.4332|
0010c6  f1a00001          SUB      r0,r0,#1              ;1274
0010ca  b200              SXTH     r0,r0                 ;1274
0010cc  f8a60078          STRH     r0,[r6,#0x78]         ;1274
0010d0  b960              CBNZ     r0,|L1.4332|
0010d2  f886a027          STRB     r10,[r6,#0x27]        ;1277
0010d6  210b              MOVS     r1,#0xb               ;1278
0010d8  f44f70ca          MOV      r0,#0x194             ;1278
0010dc  f7fffffe          BL       lc640_write
0010e0  e004              B        |L1.4332|
                  |L1.4322|
0010e2  f8a62078          STRH     r2,[r6,#0x78]         ;1284
0010e6  e001              B        |L1.4332|
                  |L1.4328|
0010e8  f8a62078          STRH     r2,[r6,#0x78]         ;1289
                  |L1.4332|
0010ec  f9b60042          LDRSH    r0,[r6,#0x42]         ;1291  ; Ibmax
0010f0  f8b61044          LDRH     r1,[r6,#0x44]         ;1291  ; IZMAX_
0010f4  fb90f0f4          SDIV     r0,r0,r4              ;1291
0010f8  4288              CMP      r0,r1                 ;1291
0010fa  dd18              BLE      |L1.4398|
0010fc  f9b6202a          LDRSH    r2,[r6,#0x2a]         ;1291  ; cntrl_stat
001100  2a14              CMP      r2,#0x14              ;1291
001102  dc14              BGT      |L1.4398|
001104  f8962026          LDRB     r2,[r6,#0x26]         ;1291  ; volt_region
001108  2a01              CMP      r2,#1                 ;1291
00110a  d110              BNE      |L1.4398|
00110c  f8b62074          LDRH     r2,[r6,#0x74]         ;1291  ; volt_region_cnt
001110  b96a              CBNZ     r2,|L1.4398|
001112  f8867026          STRB     r7,[r6,#0x26]         ;1293
001116  f8a6b02a          STRH     r11,[r6,#0x2a]
;;;1295   		cntrl_stat_new=1000;
00111a  e000              B        |L1.4382|
                  |L1.4380|
00111c  e030              B        |L1.4480|
                  |L1.4382|
00111e  f8a6b040          STRH     r11,[r6,#0x40]
;;;1296   		cntrl_stat_old=1000;
001122  f8a6b02c          STRH     r11,[r6,#0x2c]
;;;1297   		volt_region_cnt=110;
001126  f04f026e          MOV      r2,#0x6e
00112a  f8a62074          STRH     r2,[r6,#0x74]
                  |L1.4398|
;;;1298   		}
;;;1299   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00112e  4288              CMP      r0,r1
001130  da13              BGE      |L1.4442|
001132  f9b6002a          LDRSH    r0,[r6,#0x2a]  ; cntrl_stat
001136  4558              CMP      r0,r11
001138  db0f              BLT      |L1.4442|
00113a  f8960026          LDRB     r0,[r6,#0x26]  ; volt_region
00113e  b960              CBNZ     r0,|L1.4442|
001140  f8b60074          LDRH     r0,[r6,#0x74]  ; volt_region_cnt
001144  b948              CBNZ     r0,|L1.4442|
;;;1300   		{
;;;1301   		volt_region=1;
001146  f04f0001          MOV      r0,#1
00114a  f8860026          STRB     r0,[r6,#0x26]
;;;1302   		cntrl_stat=10;
00114e  8574              STRH     r4,[r6,#0x2a]
;;;1303   		cntrl_stat_new=10;
001150  f8a64040          STRH     r4,[r6,#0x40]
;;;1304   		cntrl_stat_old=10;
001154  85b4              STRH     r4,[r6,#0x2c]
;;;1305   		volt_region_cnt=10;
001156  f8a64074          STRH     r4,[r6,#0x74]
                  |L1.4442|
;;;1306   		}
;;;1307   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00115a  f8960026          LDRB     r0,[r6,#0x26]  ; volt_region
00115e  b110              CBZ      r0,|L1.4454|
;;;1308   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001160  2801              CMP      r0,#1
001162  d007              BEQ      |L1.4468|
001164  e00c              B        |L1.4480|
                  |L1.4454|
001166  2314              MOVS     r3,#0x14              ;1307
001168  2200              MOVS     r2,#0                 ;1307
00116a  2164              MOVS     r1,#0x64              ;1307
00116c  20d2              MOVS     r0,#0xd2              ;1307
00116e  f7fffffe          BL       mess_send
001172  e005              B        |L1.4480|
                  |L1.4468|
001174  2314              MOVS     r3,#0x14
001176  2201              MOVS     r2,#1
001178  2164              MOVS     r1,#0x64
00117a  20d2              MOVS     r0,#0xd2
00117c  f7fffffe          BL       mess_send
                  |L1.4480|
;;;1309   	}
;;;1310   
;;;1311   if(vz2_stat==vz2sWRK2)
001180  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
001184  280b              CMP      r0,#0xb
001186  d175              BNE      |L1.4724|
;;;1312   	{
;;;1313   	if(vz2_stat_old!=vz2_stat)
001188  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
00118c  280b              CMP      r0,#0xb
00118e  d008              BEQ      |L1.4514|
;;;1314   		{
;;;1315   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001190  48a9              LDR      r0,|L1.5176|
001192  f44f6161          MOV      r1,#0xe10
001196  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
00119a  fb00f001          MUL      r0,r0,r1
00119e  f8c90038          STR      r0,[r9,#0x38]  ; vz2_wrk_cnt
                  |L1.4514|
;;;1316   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1317   		//vz2_up_cnt=0L;
;;;1318   		}
;;;1319   	vz2_wrk_cnt--;
0011a2  f8d90038          LDR      r0,[r9,#0x38]  ; vz2_wrk_cnt
0011a6  f1a00001          SUB      r0,r0,#1
0011aa  f8c90038          STR      r0,[r9,#0x38]  ; vz2_wrk_cnt
;;;1320   	vz2_up_cnt++;
0011ae  f8d9103c          LDR      r1,[r9,#0x3c]  ; vz2_up_cnt
0011b2  f1010101          ADD      r1,r1,#1
0011b6  f8c9103c          STR      r1,[r9,#0x3c]  ; vz2_up_cnt
;;;1321   
;;;1322   	if(vz2_wrk_cnt==0)
0011ba  b958              CBNZ     r0,|L1.4564|
;;;1323   		{
;;;1324   		vz2_stat=vz2sFINE;
0011bc  f04f0012          MOV      r0,#0x12
0011c0  f8860027          STRB     r0,[r6,#0x27]
;;;1325   		lc640_write(EE_VZ2_STAT,vz2sFINE);
0011c4  4601              MOV      r1,r0
0011c6  f44f70ca          MOV      r0,#0x194
0011ca  f7fffffe          BL       lc640_write
;;;1326   		fz_mem_hndl(0);
0011ce  2000              MOVS     r0,#0
0011d0  f7fffffe          BL       fz_mem_hndl
                  |L1.4564|
;;;1327   		}
;;;1328   	if(sk_stat[0]==0)
0011d4  7828              LDRB     r0,[r5,#0]  ; sk_stat
0011d6  b940              CBNZ     r0,|L1.4586|
;;;1329   		{
;;;1330   		vz2_stat=vz2sERR5;
0011d8  f04f0010          MOV      r0,#0x10
0011dc  f8860027          STRB     r0,[r6,#0x27]
;;;1331   		lc640_write(EE_VZ2_STAT,vz2sERR5);
0011e0  4601              MOV      r1,r0
0011e2  f44f70ca          MOV      r0,#0x194
0011e6  f7fffffe          BL       lc640_write
                  |L1.4586|
;;;1332   		}
;;;1333   	if(sk_stat[1]==0)
0011ea  7868              LDRB     r0,[r5,#1]  ; sk_stat
0011ec  b940              CBNZ     r0,|L1.4608|
;;;1334   		{
;;;1335   		vz2_stat=vz2sERR6;
0011ee  f04f0011          MOV      r0,#0x11
0011f2  f8860027          STRB     r0,[r6,#0x27]
;;;1336   		lc640_write(EE_VZ2_STAT,vz2sERR6);
0011f6  4601              MOV      r1,r0
0011f8  f44f70ca          MOV      r0,#0x194
0011fc  f7fffffe          BL       lc640_write
                  |L1.4608|
;;;1337   		}
;;;1338   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001200  f9b60042          LDRSH    r0,[r6,#0x42]  ; Ibmax
001204  f8b61044          LDRH     r1,[r6,#0x44]  ; IZMAX_
001208  fb90f0f4          SDIV     r0,r0,r4
00120c  4288              CMP      r0,r1
00120e  dd16              BLE      |L1.4670|
001210  f9b6202a          LDRSH    r2,[r6,#0x2a]  ; cntrl_stat
001214  2a14              CMP      r2,#0x14
001216  dc12              BGT      |L1.4670|
001218  f8962026          LDRB     r2,[r6,#0x26]  ; volt_region
00121c  2a01              CMP      r2,#1
00121e  d10e              BNE      |L1.4670|
001220  f8b62074          LDRH     r2,[r6,#0x74]  ; volt_region_cnt
001224  b95a              CBNZ     r2,|L1.4670|
;;;1339   		{
;;;1340   		volt_region=0;
001226  f8867026          STRB     r7,[r6,#0x26]
;;;1341   		cntrl_stat=1000;
00122a  f8a6b02a          STRH     r11,[r6,#0x2a]
;;;1342   		cntrl_stat_new=1000;
00122e  f8a6b040          STRH     r11,[r6,#0x40]
;;;1343   		cntrl_stat_old=1000;
001232  f8a6b02c          STRH     r11,[r6,#0x2c]
;;;1344   		volt_region_cnt=110;
001236  f04f026e          MOV      r2,#0x6e
00123a  f8a62074          STRH     r2,[r6,#0x74]
                  |L1.4670|
;;;1345   		}
;;;1346   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00123e  4288              CMP      r0,r1
001240  da13              BGE      |L1.4714|
001242  f9b6002a          LDRSH    r0,[r6,#0x2a]  ; cntrl_stat
001246  4558              CMP      r0,r11
001248  db0f              BLT      |L1.4714|
00124a  f8960026          LDRB     r0,[r6,#0x26]  ; volt_region
00124e  b960              CBNZ     r0,|L1.4714|
001250  f8b60074          LDRH     r0,[r6,#0x74]  ; volt_region_cnt
001254  b948              CBNZ     r0,|L1.4714|
;;;1347   		{
;;;1348   		volt_region=1;
001256  f04f0001          MOV      r0,#1
00125a  f8860026          STRB     r0,[r6,#0x26]
;;;1349   		cntrl_stat=10;
00125e  8574              STRH     r4,[r6,#0x2a]
;;;1350   		cntrl_stat_new=10;
001260  f8a64040          STRH     r4,[r6,#0x40]
;;;1351   		cntrl_stat_old=10;
001264  85b4              STRH     r4,[r6,#0x2c]
;;;1352   		volt_region_cnt=10;
001266  f8a64074          STRH     r4,[r6,#0x74]
                  |L1.4714|
;;;1353   		}
;;;1354   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00126a  f8960026          LDRB     r0,[r6,#0x26]  ; volt_region
00126e  b110              CBZ      r0,|L1.4726|
;;;1355   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001270  2801              CMP      r0,#1
001272  d007              BEQ      |L1.4740|
                  |L1.4724|
001274  e00c              B        |L1.4752|
                  |L1.4726|
001276  2314              MOVS     r3,#0x14              ;1354
001278  2200              MOVS     r2,#0                 ;1354
00127a  2164              MOVS     r1,#0x64              ;1354
00127c  20d2              MOVS     r0,#0xd2              ;1354
00127e  f7fffffe          BL       mess_send
001282  e005              B        |L1.4752|
                  |L1.4740|
001284  2314              MOVS     r3,#0x14
001286  2201              MOVS     r2,#1
001288  2164              MOVS     r1,#0x64
00128a  20d2              MOVS     r0,#0xd2
00128c  f7fffffe          BL       mess_send
                  |L1.4752|
;;;1356   	}
;;;1357   
;;;1358   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
001290  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
001294  280c              CMP      r0,#0xc
001296  d124              BNE      |L1.4834|
;;;1359   	{
;;;1360   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001298  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
00129c  280c              CMP      r0,#0xc
00129e  d102              BNE      |L1.4774|
0012a0  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0012a4  b908              CBNZ     r0,|L1.4778|
                  |L1.4774|
;;;1361   		{
;;;1362   		vz2_stat_cnt=10;
0012a6  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4778|
;;;1363   		}
;;;1364   	vz2_stat_cnt--;
0012aa  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0012ae  f1a00001          SUB      r0,r0,#1
0012b2  b200              SXTH     r0,r0
0012b4  f8a60076          STRH     r0,[r6,#0x76]
;;;1365   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0012b8  280a              CMP      r0,#0xa
0012ba  d001              BEQ      |L1.4800|
0012bc  2809              CMP      r0,#9
0012be  d10a              BNE      |L1.4822|
                  |L1.4800|
;;;1366   		{
;;;1367   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0012c0  f2af435c          ADR      r3,|L1.3688|
0012c4  f2af4248          ADR      r2,|L1.3712|
0012c8  f2af4134          ADR      r1,|L1.3736|
0012cc  a05b              ADR      r0,|L1.5180|
0012ce  f8cd8000          STR      r8,[sp,#0]
0012d2  f7fffffe          BL       show_mess
                  |L1.4822|
;;;1368   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1369   					"      ВКЛЮЧЕН       ",
;;;1370   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1371   					5000);
;;;1372   		}
;;;1373   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0012d6  2314              MOVS     r3,#0x14
0012d8  2200              MOVS     r2,#0
0012da  2164              MOVS     r1,#0x64
0012dc  20d2              MOVS     r0,#0xd2
0012de  f7fffffe          BL       mess_send
                  |L1.4834|
;;;1374   	}
;;;1375   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
0012e2  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
0012e6  280d              CMP      r0,#0xd
0012e8  d12e              BNE      |L1.4936|
;;;1376   	{
;;;1377   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0012ea  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
0012ee  280d              CMP      r0,#0xd
0012f0  d102              BNE      |L1.4856|
0012f2  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0012f6  b908              CBNZ     r0,|L1.4860|
                  |L1.4856|
;;;1378   		{
;;;1379   		vz2_stat_cnt=10;
0012f8  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4860|
;;;1380   		}
;;;1381   	vz2_stat_cnt--;
0012fc  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
001300  f1a00001          SUB      r0,r0,#1
001304  b200              SXTH     r0,r0
001306  f8a60076          STRH     r0,[r6,#0x76]
;;;1382   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00130a  280a              CMP      r0,#0xa
00130c  d001              BEQ      |L1.4882|
00130e  2809              CMP      r0,#9
001310  d10a              BNE      |L1.4904|
                  |L1.4882|
;;;1383   		{
;;;1384   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001312  f6af2340          ADR      r3,|L1.2260|
001316  f6af222c          ADR      r2,|L1.2284|
00131a  f6af2118          ADR      r1,|L1.2308|
00131e  a047              ADR      r0,|L1.5180|
001320  f8cd8000          STR      r8,[sp,#0]
001324  f7fffffe          BL       show_mess
                  |L1.4904|
;;;1385   					"    ЗАБЛОКИРОВАН    ",
;;;1386   					"     НЕИСПРАВНА     ",
;;;1387   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1388   					5000);
;;;1389   		}
;;;1390   	if(sk_stat[0]==1)
001328  7828              LDRB     r0,[r5,#0]  ; sk_stat
00132a  2801              CMP      r0,#1
00132c  d106              BNE      |L1.4924|
;;;1391   		{
;;;1392   		vz2_stat=vz2sWRK1;
00132e  f8864027          STRB     r4,[r6,#0x27]
;;;1393   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001332  210a              MOVS     r1,#0xa
001334  f44f70ca          MOV      r0,#0x194
001338  f7fffffe          BL       lc640_write
                  |L1.4924|
;;;1394   		}
;;;1395   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00133c  2314              MOVS     r3,#0x14
00133e  2200              MOVS     r2,#0
001340  2164              MOVS     r1,#0x64
001342  20d2              MOVS     r0,#0xd2
001344  f7fffffe          BL       mess_send
                  |L1.4936|
;;;1396   	}
;;;1397   
;;;1398   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
001348  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
00134c  280e              CMP      r0,#0xe
00134e  d12d              BNE      |L1.5036|
;;;1399   	{
;;;1400   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001350  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
001354  280e              CMP      r0,#0xe
001356  d102              BNE      |L1.4958|
001358  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
00135c  b908              CBNZ     r0,|L1.4962|
                  |L1.4958|
;;;1401   		{
;;;1402   		vz2_stat_cnt=10;
00135e  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4962|
;;;1403   		}
;;;1404   	vz2_stat_cnt--;
001362  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
001366  f1a00001          SUB      r0,r0,#1
00136a  b200              SXTH     r0,r0
00136c  f8a60076          STRH     r0,[r6,#0x76]
;;;1405   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001370  280a              CMP      r0,#0xa
001372  d001              BEQ      |L1.4984|
001374  2809              CMP      r0,#9
001376  d109              BNE      |L1.5004|
                  |L1.4984|
;;;1406   		{
;;;1407   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001378  a336              ADR      r3,|L1.5204|
00137a  f2af429c          ADR      r2,|L1.3808|
00137e  f2af4188          ADR      r1,|L1.3832|
001382  a02e              ADR      r0,|L1.5180|
001384  f8cd8000          STR      r8,[sp,#0]
001388  f7fffffe          BL       show_mess
                  |L1.5004|
;;;1408   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1409   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1410   					"    ТУМБЛЕРА!!!     ",
;;;1411   					5000);
;;;1412   		}
;;;1413   	if(sk_stat[1]==1)
00138c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00138e  2801              CMP      r0,#1
001390  d106              BNE      |L1.5024|
;;;1414   		{
;;;1415   		vz2_stat=vz2sWRK1;
001392  f8864027          STRB     r4,[r6,#0x27]
;;;1416   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001396  210a              MOVS     r1,#0xa
001398  f44f70ca          MOV      r0,#0x194
00139c  f7fffffe          BL       lc640_write
                  |L1.5024|
;;;1417   		}
;;;1418   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013a0  2314              MOVS     r3,#0x14
0013a2  2200              MOVS     r2,#0
0013a4  2164              MOVS     r1,#0x64
0013a6  20d2              MOVS     r0,#0xd2
0013a8  f7fffffe          BL       mess_send
                  |L1.5036|
;;;1419   	}
;;;1420   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
0013ac  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
0013b0  2810              CMP      r0,#0x10
0013b2  d12e              BNE      |L1.5138|
;;;1421   	{
;;;1422   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0013b4  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
0013b8  2810              CMP      r0,#0x10
0013ba  d102              BNE      |L1.5058|
0013bc  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0013c0  b908              CBNZ     r0,|L1.5062|
                  |L1.5058|
;;;1423   		{
;;;1424   		vz2_stat_cnt=10;
0013c2  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.5062|
;;;1425   		}
;;;1426   	vz2_stat_cnt--;
0013c6  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0013ca  f1a00001          SUB      r0,r0,#1
0013ce  b200              SXTH     r0,r0
0013d0  f8a60076          STRH     r0,[r6,#0x76]
;;;1427   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0013d4  280a              CMP      r0,#0xa
0013d6  d001              BEQ      |L1.5084|
0013d8  2809              CMP      r0,#9
0013da  d10a              BNE      |L1.5106|
                  |L1.5084|
;;;1428   		{
;;;1429   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0013dc  f6af330c          ADR      r3,|L1.2260|
0013e0  f6af22f8          ADR      r2,|L1.2284|
0013e4  f6af21e4          ADR      r1,|L1.2308|
0013e8  a014              ADR      r0,|L1.5180|
0013ea  f8cd8000          STR      r8,[sp,#0]
0013ee  f7fffffe          BL       show_mess
                  |L1.5106|
;;;1430   					"    ЗАБЛОКИРОВАН    ",
;;;1431   					"     НЕИСПРАВНА     ",
;;;1432   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1433   					5000);
;;;1434   		}
;;;1435   	if(sk_stat[0]==1)
0013f2  7828              LDRB     r0,[r5,#0]  ; sk_stat
0013f4  2801              CMP      r0,#1
0013f6  d106              BNE      |L1.5126|
;;;1436   		{
;;;1437   		vz2_stat=vz2sWRK2;
0013f8  f886a027          STRB     r10,[r6,#0x27]
;;;1438   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0013fc  210b              MOVS     r1,#0xb
0013fe  f44f70ca          MOV      r0,#0x194
001402  f7fffffe          BL       lc640_write
                  |L1.5126|
;;;1439   		}
;;;1440   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001406  2314              MOVS     r3,#0x14
001408  2200              MOVS     r2,#0
00140a  2164              MOVS     r1,#0x64
00140c  20d2              MOVS     r0,#0xd2
00140e  f7fffffe          BL       mess_send
                  |L1.5138|
;;;1441   	}
;;;1442   
;;;1443   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
001412  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
001416  2811              CMP      r0,#0x11
001418  d156              BNE      |L1.5320|
;;;1444   	{
;;;1445   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00141a  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
00141e  e025              B        |L1.5228|
                  |L1.5152|
                          DCD      ||area_number.25||+0x80
                  |L1.5156|
                          DCD      FZ_T1
                  |L1.5160|
                          DCD      out_U
                  |L1.5164|
                          DCD      FZ_U1
                  |L1.5168|
                          DCD      Ib_ips_termokompensat
                  |L1.5172|
                          DCD      FZ_ISW12
                  |L1.5176|
                          DCD      FZ_T2
                  |L1.5180|
00143c  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
001440  cccec2ce
001444  d7cddbc9
001448  20c7c0  
00144b  d0dfc420          DCB      208,223,196,"  ",0
00144f  2000    
001451  00                DCB      0
001452  00                DCB      0
001453  00                DCB      0
                  |L1.5204|
001454  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
001458  d2d3ccc1
00145c  cbc5d0c0
001460  21212120
001464  20202020
001468  00      
001469  00                DCB      0
00146a  00                DCB      0
00146b  00                DCB      0
                  |L1.5228|
00146c  2811              CMP      r0,#0x11
00146e  d102              BNE      |L1.5238|
001470  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
001474  b908              CBNZ     r0,|L1.5242|
                  |L1.5238|
;;;1446   		{
;;;1447   		vz2_stat_cnt=10;
001476  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.5242|
;;;1448   		}
;;;1449   	vz2_stat_cnt--;
00147a  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
00147e  f1a00001          SUB      r0,r0,#1
001482  b200              SXTH     r0,r0
001484  f8a60076          STRH     r0,[r6,#0x76]
;;;1450   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001488  280a              CMP      r0,#0xa
00148a  d001              BEQ      |L1.5264|
00148c  2809              CMP      r0,#9
00148e  d10b              BNE      |L1.5288|
                  |L1.5264|
;;;1451   		{
;;;1452   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001490  f2af0340          ADR      r3,|L1.5204|
001494  f2af52b8          ADR      r2,|L1.3808|
001498  f2af51a4          ADR      r1,|L1.3832|
00149c  f2af0064          ADR      r0,|L1.5180|
0014a0  f8cd8000          STR      r8,[sp,#0]
0014a4  f7fffffe          BL       show_mess
                  |L1.5288|
;;;1453   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1454   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1455   					"    ТУМБЛЕРА!!!     ",
;;;1456   					5000);
;;;1457   		}
;;;1458   	if(sk_stat[1]==1)
0014a8  7868              LDRB     r0,[r5,#1]  ; sk_stat
0014aa  2801              CMP      r0,#1
0014ac  d106              BNE      |L1.5308|
;;;1459   		{
;;;1460   		vz2_stat=vz2sWRK2;
0014ae  f886a027          STRB     r10,[r6,#0x27]
;;;1461   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0014b2  210b              MOVS     r1,#0xb
0014b4  f44f70ca          MOV      r0,#0x194
0014b8  f7fffffe          BL       lc640_write
                  |L1.5308|
;;;1462   		}
;;;1463   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014bc  2314              MOVS     r3,#0x14
0014be  2200              MOVS     r2,#0
0014c0  2164              MOVS     r1,#0x64
0014c2  20d2              MOVS     r0,#0xd2
0014c4  f7fffffe          BL       mess_send
                  |L1.5320|
;;;1464   	}
;;;1465   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0014c8  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
0014cc  280f              CMP      r0,#0xf
0014ce  d130              BNE      |L1.5426|
;;;1466   	{
;;;1467   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0014d0  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
0014d4  280f              CMP      r0,#0xf
0014d6  d102              BNE      |L1.5342|
0014d8  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0014dc  b908              CBNZ     r0,|L1.5346|
                  |L1.5342|
;;;1468   		{
;;;1469   		vz2_stat_cnt=10;
0014de  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.5346|
;;;1470   		}
;;;1471   	vz2_stat_cnt--;
0014e2  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0014e6  f1a00001          SUB      r0,r0,#1
0014ea  b200              SXTH     r0,r0
0014ec  f8a60076          STRH     r0,[r6,#0x76]
;;;1472   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0014f0  280a              CMP      r0,#0xa
0014f2  d001              BEQ      |L1.5368|
0014f4  2809              CMP      r0,#9
0014f6  d10b              BNE      |L1.5392|
                  |L1.5368|
;;;1473   		{
;;;1474   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0014f8  f6af33c8          ADR      r3,|L1.2356|
0014fc  f6af32b4          ADR      r2,|L1.2380|
001500  f6af31a0          ADR      r1,|L1.2404|
001504  f2af5080          ADR      r0,|L1.3976|
001508  f8cd8000          STR      r8,[sp,#0]
00150c  f7fffffe          BL       show_mess
                  |L1.5392|
;;;1475   					"      ТУМБЛЕР       ",
;;;1476   					"     ВЫСОКОГО       ",
;;;1477   					"    НАПРЯЖЕНИЯ      ",
;;;1478   					5000);
;;;1479   		}
;;;1480   	if(sk_stat[1]==0)
001510  7868              LDRB     r0,[r5,#1]  ; sk_stat
001512  b940              CBNZ     r0,|L1.5414|
;;;1481   		{
;;;1482   		vz2_stat=vz2sOFF;
001514  f8867027          STRB     r7,[r6,#0x27]
;;;1483   		lc640_write(EE_VZ2_STAT,vz2sOFF);
001518  2100              MOVS     r1,#0
00151a  f44f70ca          MOV      r0,#0x194
00151e  f7fffffe          BL       lc640_write
;;;1484   		vz_stop();
001522  f7fffffe          BL       vz_stop
                  |L1.5414|
;;;1485   
;;;1486   		}
;;;1487   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001526  2314              MOVS     r3,#0x14
001528  2200              MOVS     r2,#0
00152a  2164              MOVS     r1,#0x64
00152c  20d2              MOVS     r0,#0xd2
00152e  f7fffffe          BL       mess_send
                  |L1.5426|
;;;1488   	}
;;;1489   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
001532  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
;;;1490   	{
;;;1491   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1492   		{
;;;1493   		vz2_stat_cnt=10;
;;;1494   		}
;;;1495   	vz2_stat_cnt--;
;;;1496   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1497   		{
;;;1498   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
001536  f64038b8          MOV      r8,#0xbb8
00153a  2812              CMP      r0,#0x12              ;1489
00153c  d13f              BNE      |L1.5566|
00153e  f8960028          LDRB     r0,[r6,#0x28]         ;1491  ; vz2_stat_old
001542  2812              CMP      r0,#0x12              ;1491
001544  d102              BNE      |L1.5452|
001546  f8b60076          LDRH     r0,[r6,#0x76]         ;1491  ; vz2_stat_cnt
00154a  b908              CBNZ     r0,|L1.5456|
                  |L1.5452|
00154c  f8a64076          STRH     r4,[r6,#0x76]         ;1493
                  |L1.5456|
001550  f8b60076          LDRH     r0,[r6,#0x76]         ;1495  ; vz2_stat_cnt
001554  f1a00001          SUB      r0,r0,#1              ;1495
001558  b200              SXTH     r0,r0                 ;1495
00155a  f8a60076          STRH     r0,[r6,#0x76]         ;1495
00155e  280a              CMP      r0,#0xa               ;1496
001560  d001              BEQ      |L1.5478|
001562  2809              CMP      r0,#9                 ;1496
001564  d10a              BNE      |L1.5500|
                  |L1.5478|
001566  f2af6340          ADR      r3,|L1.3880|
00156a  f2af622c          ADR      r2,|L1.3904|
00156e  f2af6118          ADR      r1,|L1.3928|
001572  a0ff              ADR      r0,|L1.6512|
001574  f8cd8000          STR      r8,[sp,#0]
001578  f7fffffe          BL       show_mess
                  |L1.5500|
;;;1499   					"       ЗАРЯД        ",
;;;1500   					"      УСПЕШНО       ",
;;;1501   					"     ЗАВЕРШЕН       ",
;;;1502   					3000);
;;;1503   		}
;;;1504   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
00157c  f9b60076          LDRSH    r0,[r6,#0x76]  ; vz2_stat_cnt
001580  2806              CMP      r0,#6
001582  d001              BEQ      |L1.5512|
001584  2805              CMP      r0,#5
001586  d10b              BNE      |L1.5536|
                  |L1.5512|
;;;1505   		{
;;;1506   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001588  f6af4358          ADR      r3,|L1.2356|
00158c  f6af4244          ADR      r2,|L1.2380|
001590  f6af4130          ADR      r1,|L1.2404|
001594  f2af6010          ADR      r0,|L1.3976|
001598  f8cd8000          STR      r8,[sp,#0]
00159c  f7fffffe          BL       show_mess
                  |L1.5536|
;;;1507   					"      ТУМБЛЕР       ",
;;;1508   					"     ВЫСОКОГО       ",
;;;1509   					"    НАПРЯЖЕНИЯ      ",
;;;1510   					3000);
;;;1511   		}
;;;1512   	if(sk_stat[1]==0)
0015a0  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015a2  b930              CBNZ     r0,|L1.5554|
;;;1513   		{
;;;1514   		vz2_stat=vz2sOFF;
0015a4  f8867027          STRB     r7,[r6,#0x27]
;;;1515   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0015a8  2100              MOVS     r1,#0
0015aa  f44f70ca          MOV      r0,#0x194
0015ae  f7fffffe          BL       lc640_write
                  |L1.5554|
;;;1516   		}
;;;1517   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0015b2  2314              MOVS     r3,#0x14
0015b4  2200              MOVS     r2,#0
0015b6  2164              MOVS     r1,#0x64
0015b8  20d2              MOVS     r0,#0xd2
0015ba  f7fffffe          BL       mess_send
                  |L1.5566|
;;;1518   	}
;;;1519   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
0015be  f8960027          LDRB     r0,[r6,#0x27]  ; vz2_stat
0015c2  2813              CMP      r0,#0x13
0015c4  d13f              BNE      |L1.5702|
;;;1520   	{
;;;1521   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0015c6  f8960028          LDRB     r0,[r6,#0x28]  ; vz2_stat_old
0015ca  2813              CMP      r0,#0x13
0015cc  d102              BNE      |L1.5588|
0015ce  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0015d2  b908              CBNZ     r0,|L1.5592|
                  |L1.5588|
;;;1522   		{
;;;1523   		vz2_stat_cnt=10;
0015d4  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.5592|
;;;1524   		}
;;;1525   	vz2_stat_cnt--;
0015d8  f8b60076          LDRH     r0,[r6,#0x76]  ; vz2_stat_cnt
0015dc  f1a00001          SUB      r0,r0,#1
0015e0  b200              SXTH     r0,r0
0015e2  f8a60076          STRH     r0,[r6,#0x76]
;;;1526   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0015e6  280a              CMP      r0,#0xa
0015e8  d001              BEQ      |L1.5614|
0015ea  2809              CMP      r0,#9
0015ec  d10a              BNE      |L1.5636|
                  |L1.5614|
;;;1527   		{
;;;1528   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0015ee  f2af6350          ADR      r3,|L1.4000|
0015f2  f2af623c          ADR      r2,|L1.4024|
0015f6  f2af61a0          ADR      r1,|L1.3928|
0015fa  a0dd              ADR      r0,|L1.6512|
0015fc  f8cd8000          STR      r8,[sp,#0]
001600  f7fffffe          BL       show_mess
                  |L1.5636|
;;;1529   					"       ЗАРЯД        ",
;;;1530   					"     ПРЕКРАЩЕН      ",
;;;1531   					"                    ",
;;;1532   					3000);
;;;1533   		}
;;;1534   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
001604  f9b60076          LDRSH    r0,[r6,#0x76]  ; vz2_stat_cnt
001608  2806              CMP      r0,#6
00160a  d001              BEQ      |L1.5648|
00160c  2805              CMP      r0,#5
00160e  d10b              BNE      |L1.5672|
                  |L1.5648|
;;;1535   		{
;;;1536   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001610  f6af43e0          ADR      r3,|L1.2356|
001614  f6af42cc          ADR      r2,|L1.2380|
001618  f6af41b8          ADR      r1,|L1.2404|
00161c  f2af6098          ADR      r0,|L1.3976|
001620  f8cd8000          STR      r8,[sp,#0]
001624  f7fffffe          BL       show_mess
                  |L1.5672|
;;;1537   					"      ТУМБЛЕР       ",
;;;1538   					"     ВЫСОКОГО       ",
;;;1539   					"    НАПРЯЖЕНИЯ      ",
;;;1540   					3000);
;;;1541   		}
;;;1542   	if(sk_stat[1]==0)
001628  7868              LDRB     r0,[r5,#1]  ; sk_stat
00162a  b930              CBNZ     r0,|L1.5690|
;;;1543   		{
;;;1544   		vz2_stat=vz2sOFF;
00162c  f8867027          STRB     r7,[r6,#0x27]
;;;1545   		lc640_write(EE_VZ2_STAT,vz2sOFF);
001630  2100              MOVS     r1,#0
001632  f44f70ca          MOV      r0,#0x194
001636  f7fffffe          BL       lc640_write
                  |L1.5690|
;;;1546   		}
;;;1547   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00163a  2314              MOVS     r3,#0x14
00163c  2200              MOVS     r2,#0
00163e  2164              MOVS     r1,#0x64
001640  20d2              MOVS     r0,#0xd2
001642  f7fffffe          BL       mess_send
                  |L1.5702|
;;;1548   	}
;;;1549   vz2_stat_old=vz2_stat;
001646  f8160f27          LDRB     r0,[r6,#0x27]!  ; vz2_stat
00164a  7070              STRB     r0,[r6,#1]
;;;1550   
;;;1551   }
00164c  e8bd8ff8          POP      {r3-r11,pc}
;;;1552   
                          ENDP

                  vz2_start PROC
;;;1554   //старт уравнительног заряда
;;;1555   char vz2_start(char hour)
001650  b510              PUSH     {r4,lr}
;;;1556   {          
;;;1557   char out;
;;;1558   out=0;
001652  f04f0000          MOV      r0,#0
;;;1559   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001656  49cc              LDR      r1,|L1.6536|
001658  7e0a              LDRB     r2,[r1,#0x18]  ; spc_stat
00165a  2a00              CMP      r2,#0
00165c  d112              BNE      |L1.5764|
00165e  4acb              LDR      r2,|L1.6540|
001660  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001662  2a01              CMP      r2,#1
001664  d00e              BEQ      |L1.5764|
001666  f8912024          LDRB     r2,[r1,#0x24]  ; vz1_stat
00166a  2a00              CMP      r2,#0
00166c  d10a              BNE      |L1.5764|
;;;1560   	{
;;;1561   	if(vz1_stat==vz1sOFF)
;;;1562   		{
;;;1563   		vz2_stat=vz2sSTEP1;
00166e  f04f0001          MOV      r0,#1
001672  f8810027          STRB     r0,[r1,#0x27]
;;;1564   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
001676  4601              MOV      r1,r0
001678  f44f70ca          MOV      r0,#0x194
00167c  f7fffffe          BL       lc640_write
;;;1565   		out=1;
001680  f04f0001          MOV      r0,#1
                  |L1.5764|
;;;1566   		
;;;1567   		}
;;;1568   /*	spc_stat=spcVZ;
;;;1569   	__ee_spc_stat=spcVZ; 
;;;1570   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1571   	vz_cnt_h=hour;
;;;1572   	__ee_vz_cnt=hour*60;
;;;1573   	if(hour==0)__ee_vz_cnt=30;
;;;1574   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1575   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1576   	vz_cnt_h_=0;
;;;1577   	vz_cnt_s=0;
;;;1578   	vz_cnt_s_=0;
;;;1579   	
;;;1580   		*/
;;;1581   	}
;;;1582   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1583   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1584   //plazma=out;	
;;;1585   return out;
;;;1586   }
001684  bd10              POP      {r4,pc}
;;;1587   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;1588   //стоп формовочного заряда
;;;1589   void vz2_stop(void)
001686  48c0              LDR      r0,|L1.6536|
;;;1590   {
;;;1591   if(vz2_stat!=vz2sOFF)
001688  f8901027          LDRB     r1,[r0,#0x27]  ; vz2_stat
00168c  2900              CMP      r1,#0
00168e  d007              BEQ      |L1.5792|
;;;1592   	{
;;;1593   	vz2_stat=vz2sSTOP;
001690  f04f0113          MOV      r1,#0x13
001694  f8801027          STRB     r1,[r0,#0x27]
;;;1594   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
001698  f44f70ca          MOV      r0,#0x194
00169c  f7ffbffe          B.W      lc640_write
                  |L1.5792|
;;;1595   	}
;;;1596   }
0016a0  4770              BX       lr
;;;1597   
                          ENDP

                  kb_init PROC
;;;1598   //-----------------------------------------------
;;;1599   void kb_init(void)
0016a2  48bb              LDR      r0,|L1.6544|
;;;1600   {
;;;1601   main_kb_cnt=(TBAT*60)-60/*120*/;
0016a4  f06f013b          MVN      r1,#0x3b
0016a8  8800              LDRH     r0,[r0,#0]  ; TBAT
0016aa  ebc01000          RSB      r0,r0,r0,LSL #4
0016ae  eb010080          ADD      r0,r1,r0,LSL #2
0016b2  49b5              LDR      r1,|L1.6536|
0016b4  f8a1004a          STRH     r0,[r1,#0x4a]
;;;1602   }
0016b8  4770              BX       lr
;;;1603   
                          ENDP

                  kb_hndl PROC
;;;1604   //-----------------------------------------------
;;;1605   void kb_hndl(void)
0016ba  e92d5ff0          PUSH     {r4-r12,lr}
;;;1606   {
;;;1607   
;;;1608   static signed short ibat[2],ibat_[2];
;;;1609   #ifdef UKU_TELECORE2015
;;;1610   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0))
;;;1611   #else 
;;;1612   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
0016be  f8df82c8          LDR      r8,|L1.6536|
;;;1613   #endif
;;;1614   	{
;;;1615   	main_kb_cnt=0;
;;;1616   	
;;;1617   	kb_start[0]=0;
;;;1618   	kb_start[1]=0;
;;;1619   	kb_start_ips=0;
;;;1620   
;;;1621   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;1622   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;1623   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1624   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
0016c2  f8dfa2d0          LDR      r10,|L1.6548|
0016c6  2500              MOVS     r5,#0                 ;1612
0016c8  f8b8004a          LDRH     r0,[r8,#0x4a]         ;1612  ; main_kb_cnt
0016cc  4eb2              LDR      r6,|L1.6552|
0016ce  1c40              ADDS     r0,r0,#1              ;1612
0016d0  b201              SXTH     r1,r0                 ;1612
0016d2  48af              LDR      r0,|L1.6544|
0016d4  f8a8104a          STRH     r1,[r8,#0x4a]         ;1612
0016d8  f8df92c0          LDR      r9,|L1.6556|
0016dc  f9b00000          LDRSH    r0,[r0,#0]            ;1612  ; TBAT
;;;1625   #endif	
;;;1626   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;1627   	  ||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)||(sp_ch_stat!=scsOFF) 	)
;;;1628    
;;;1629   		{
;;;1630   		kb_start[0]=0;
;;;1631   		kb_start[1]=0;
;;;1632   		kb_start_ips=0;
;;;1633   		}
;;;1634   
;;;1635   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;1636   		{
;;;1637   		kb_cnt_1lev=10;
0016e0  270a              MOVS     r7,#0xa
0016e2  ebc01200          RSB      r2,r0,r0,LSL #4       ;1612
0016e6  f04f0b01          MOV      r11,#1                ;1621
0016ea  f1080450          ADD      r4,r8,#0x50           ;1617
0016ee  ebb10f82          CMP      r1,r2,LSL #2          ;1612
0016f2  db69              BLT      |L1.6088|
0016f4  2800              CMP      r0,#0                 ;1612
0016f6  d067              BEQ      |L1.6088|
0016f8  f8a8504a          STRH     r5,[r8,#0x4a]         ;1615
0016fc  7025              STRB     r5,[r4,#0]            ;1617
0016fe  7065              STRB     r5,[r4,#1]            ;1618
001700  f8885012          STRB     r5,[r8,#0x12]         ;1619
001704  48a6              LDR      r0,|L1.6560|
001706  7800              LDRB     r0,[r0,#0]            ;1621  ; BAT_IS_ON
001708  2855              CMP      r0,#0x55              ;1621
00170a  d111              BNE      |L1.5936|
00170c  f9b60002          LDRSH    r0,[r6,#2]            ;1621  ; bat
001710  2850              CMP      r0,#0x50              ;1621
001712  dd0d              BLE      |L1.5936|
001714  f9b60008          LDRSH    r0,[r6,#8]            ;1621  ; bat
001718  f7fffffe          BL       abs
00171c  f9b91000          LDRSH    r1,[r9,#0]            ;1621  ; IKB
001720  4288              CMP      r0,r1                 ;1621
001722  db03              BLT      |L1.5932|
001724  f896003d          LDRB     r0,[r6,#0x3d]         ;1621  ; bat
001728  07c0              LSLS     r0,r0,#31             ;1621
00172a  d001              BEQ      |L1.5936|
                  |L1.5932|
00172c  f884b000          STRB     r11,[r4,#0]           ;1621
                  |L1.5936|
001730  489b              LDR      r0,|L1.6560|
001732  7840              LDRB     r0,[r0,#1]            ;1622  ; BAT_IS_ON
001734  2855              CMP      r0,#0x55              ;1622
001736  d111              BNE      |L1.5980|
001738  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;1622  ; bat
00173c  2850              CMP      r0,#0x50              ;1622
00173e  dd0d              BLE      |L1.5980|
001740  f9b60054          LDRSH    r0,[r6,#0x54]         ;1622  ; bat
001744  f7fffffe          BL       abs
001748  f9b91000          LDRSH    r1,[r9,#0]            ;1622  ; IKB
00174c  4288              CMP      r0,r1                 ;1622
00174e  db03              BLT      |L1.5976|
001750  f8960089          LDRB     r0,[r6,#0x89]         ;1622  ; bat
001754  07c0              LSLS     r0,r0,#31             ;1622
001756  d001              BEQ      |L1.5980|
                  |L1.5976|
001758  f884b001          STRB     r11,[r4,#1]           ;1622
                  |L1.5980|
00175c  4891              LDR      r0,|L1.6564|
00175e  7800              LDRB     r0,[r0,#0]            ;1624  ; ips_bat_av_vzvod
001760  b970              CBNZ     r0,|L1.6016|
001762  f9ba0000          LDRSH    r0,[r10,#0]           ;1624  ; Ib_ips_termokompensat
001766  f7fffffe          BL       abs
00176a  f9b91000          LDRSH    r1,[r9,#0]            ;1624  ; IKB
00176e  4288              CMP      r0,r1                 ;1624
001770  db04              BLT      |L1.6012|
001772  488d              LDR      r0,|L1.6568|
001774  f890003d          LDRB     r0,[r0,#0x3d]         ;1624  ; bat_ips
001778  07c0              LSLS     r0,r0,#31             ;1624
00177a  d001              BEQ      |L1.6016|
                  |L1.6012|
00177c  f888b012          STRB     r11,[r8,#0x12]        ;1624
                  |L1.6016|
001780  488a              LDR      r0,|L1.6572|
001782  7800              LDRB     r0,[r0,#0]            ;1626  ; net_av
001784  b980              CBNZ     r0,|L1.6056|
001786  f8980013          LDRB     r0,[r8,#0x13]         ;1626  ; num_of_wrks_bps
00178a  b168              CBZ      r0,|L1.6056|
00178c  f8980018          LDRB     r0,[r8,#0x18]         ;1626  ; spc_stat
001790  b108              CBZ      r0,|L1.6038|
001792  2802              CMP      r0,#2                 ;1626
001794  d108              BNE      |L1.6056|
                  |L1.6038|
001796  f8980024          LDRB     r0,[r8,#0x24]         ;1627  ; vz1_stat
00179a  b928              CBNZ     r0,|L1.6056|
00179c  f8980027          LDRB     r0,[r8,#0x27]         ;1627  ; vz2_stat
0017a0  b910              CBNZ     r0,|L1.6056|
0017a2  4883              LDR      r0,|L1.6576|
0017a4  7800              LDRB     r0,[r0,#0]            ;1627  ; sp_ch_stat
0017a6  b118              CBZ      r0,|L1.6064|
                  |L1.6056|
0017a8  7025              STRB     r5,[r4,#0]            ;1630
0017aa  7065              STRB     r5,[r4,#1]            ;1631
0017ac  f8885012          STRB     r5,[r8,#0x12]         ;1632
                  |L1.6064|
0017b0  7820              LDRB     r0,[r4,#0]            ;1635  ; kb_start
0017b2  2801              CMP      r0,#1                 ;1635
0017b4  d020              BEQ      |L1.6136|
0017b6  7860              LDRB     r0,[r4,#1]            ;1635  ; kb_start
0017b8  2801              CMP      r0,#1                 ;1635
0017ba  d01d              BEQ      |L1.6136|
0017bc  f8980012          LDRB     r0,[r8,#0x12]         ;1635  ; kb_start_ips
0017c0  2801              CMP      r0,#1                 ;1635
0017c2  d019              BEQ      |L1.6136|
;;;1638   		}
;;;1639   	else kb_cnt_1lev=0;
0017c4  f8a8504c          STRH     r5,[r8,#0x4c]
                  |L1.6088|
;;;1640   	}
;;;1641   
;;;1642   if(kb_cnt_1lev)
0017c8  4641              MOV      r1,r8
0017ca  f9b8004c          LDRSH    r0,[r8,#0x4c]  ; kb_cnt_1lev
;;;1643   	{
;;;1644   	kb_cnt_1lev--;
;;;1645   
;;;1646   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;1647   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;1648   
;;;1649   
;;;1650   	if(kb_cnt_1lev==5)
;;;1651   		{
;;;1652   		ibat[0]=abs(bat[0]._Ib);
0017ce  f8df81b8          LDR      r8,|L1.6536|
0017d2  2800              CMP      r0,#0                 ;1642
0017d4  f1080888          ADD      r8,r8,#0x88
0017d8  d07e              BEQ      |L1.6360|
0017da  f1a00001          SUB      r0,r0,#1              ;1644
0017de  b200              SXTH     r0,r0                 ;1644
0017e0  468b              MOV      r11,r1                ;1644
0017e2  f8a1004c          STRH     r0,[r1,#0x4c]         ;1644
0017e6  2805              CMP      r0,#5                 ;1646
0017e8  dd09              BLE      |L1.6142|
0017ea  230f              MOVS     r3,#0xf               ;1646
0017ec  221e              MOVS     r2,#0x1e              ;1646
0017ee  2164              MOVS     r1,#0x64              ;1646
0017f0  20e1              MOVS     r0,#0xe1              ;1646
0017f2  f7fffffe          BL       mess_send
0017f6  e00a              B        |L1.6158|
                  |L1.6136|
0017f8  f8a8704c          STRH     r7,[r8,#0x4c]         ;1637
0017fc  e7e4              B        |L1.6088|
                  |L1.6142|
0017fe  2800              CMP      r0,#0                 ;1647
001800  dd05              BLE      |L1.6158|
001802  230f              MOVS     r3,#0xf               ;1647
001804  221e              MOVS     r2,#0x1e              ;1647
001806  2169              MOVS     r1,#0x69              ;1647
001808  20e1              MOVS     r0,#0xe1              ;1647
00180a  f7fffffe          BL       mess_send
                  |L1.6158|
00180e  f8bb004c          LDRH     r0,[r11,#0x4c]        ;1650  ; kb_cnt_1lev
001812  2805              CMP      r0,#5                 ;1650
001814  d111              BNE      |L1.6202|
001816  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00181a  f7fffffe          BL       abs
00181e  f8a80000          STRH     r0,[r8,#0]
;;;1653   		ibat[1]=abs(bat[1]._Ib);
001822  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
001826  f7fffffe          BL       abs
00182a  f8a80002          STRH     r0,[r8,#2]
;;;1654   		ibat_ips=abs(Ib_ips_termokompensat);
00182e  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
001832  f7fffffe          BL       abs
001836  f8ab0052          STRH     r0,[r11,#0x52]
                  |L1.6202|
;;;1655   		}
;;;1656   	
;;;1657   	if(kb_cnt_1lev==0)
00183a  4853              LDR      r0,|L1.6536|
00183c  f8b0004c          LDRH     r0,[r0,#0x4c]  ; kb_cnt_1lev
001840  2800              CMP      r0,#0
001842  d158              BNE      |L1.6390|
;;;1658   		{
;;;1659   		ibat_[0]=abs(bat[0]._Ib);
001844  f9b60008          LDRSH    r0,[r6,#8]  ; bat
001848  f7fffffe          BL       abs
00184c  f8dfb138          LDR      r11,|L1.6536|
001850  f10b0b8c          ADD      r11,r11,#0x8c
001854  f8ab0000          STRH     r0,[r11,#0]
;;;1660   		ibat_[1]=abs(bat[1]._Ib);
001858  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
00185c  f7fffffe          BL       abs
001860  f8ab0002          STRH     r0,[r11,#2]
;;;1661   		ibat_ips_=abs(Ib_ips_termokompensat);
001864  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
001868  f7fffffe          BL       abs
00186c  f8dfa118          LDR      r10,|L1.6536|
001870  f8aa0054          STRH     r0,[r10,#0x54]
;;;1662   
;;;1663   		kb_cnt_2lev=0;
001874  f8aa504e          STRH     r5,[r10,#0x4e]
;;;1664   
;;;1665   
;;;1666   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
001878  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
00187c  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
001880  4408              ADD      r0,r0,r1
001882  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
001886  4288              CMP      r0,r1
001888  da02              BGE      |L1.6288|
00188a  7820              LDRB     r0,[r4,#0]  ; kb_start
00188c  2801              CMP      r0,#1
00188e  d034              BEQ      |L1.6394|
                  |L1.6288|
;;;1667   			{
;;;1668   			kb_cnt_2lev=10;  
;;;1669   			}
;;;1670   		else if(bat[0]._Ub>200)
001890  f9b60002          LDRSH    r0,[r6,#2]  ; bat
001894  28c8              CMP      r0,#0xc8
001896  dd04              BLE      |L1.6306|
;;;1671   			{
;;;1672   			kb_start[0]=0;
001898  7025              STRB     r5,[r4,#0]
;;;1673   			avar_bat_hndl(0,0);
00189a  2100              MOVS     r1,#0
00189c  4608              MOV      r0,r1
00189e  f7fffffe          BL       avar_bat_hndl
                  |L1.6306|
;;;1674   			}
;;;1675   		
;;;1676   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0018a2  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0018a6  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0018aa  4408              ADD      r0,r0,r1
0018ac  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0018b0  4288              CMP      r0,r1
0018b2  da02              BGE      |L1.6330|
0018b4  7860              LDRB     r0,[r4,#1]  ; kb_start
0018b6  2801              CMP      r0,#1
0018b8  d022              BEQ      |L1.6400|
                  |L1.6330|
;;;1677   			{
;;;1678   			kb_cnt_2lev=10;     
;;;1679   			}
;;;1680   		else  if(bat[1]._Ub>200)
0018ba  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
0018be  28c8              CMP      r0,#0xc8
0018c0  dd04              BLE      |L1.6348|
;;;1681   			{
;;;1682   			kb_start[1]=0;
0018c2  7065              STRB     r5,[r4,#1]
;;;1683   			avar_bat_hndl(1,0);
0018c4  2100              MOVS     r1,#0
0018c6  2001              MOVS     r0,#1
0018c8  f7fffffe          BL       avar_bat_hndl
                  |L1.6348|
;;;1684   			}
;;;1685   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1686   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
0018cc  f9ba0052          LDRSH    r0,[r10,#0x52]  ; ibat_ips
0018d0  f9ba1054          LDRSH    r1,[r10,#0x54]  ; ibat_ips_
0018d4  4408              ADD      r0,r0,r1
0018d6  e000              B        |L1.6362|
                  |L1.6360|
0018d8  e01b              B        |L1.6418|
                  |L1.6362|
0018da  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0018de  4288              CMP      r0,r1
0018e0  da09              BGE      |L1.6390|
0018e2  f89a0012          LDRB     r0,[r10,#0x12]  ; kb_start_ips
0018e6  2801              CMP      r0,#1
0018e8  d105              BNE      |L1.6390|
;;;1687   			{
;;;1688   			if(KB_ALGORITM==1)
0018ea  4832              LDR      r0,|L1.6580|
0018ec  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
0018ee  2801              CMP      r0,#1
0018f0  d009              BEQ      |L1.6406|
;;;1689   				{
;;;1690   				avar_bat_ips_hndl(1);
;;;1691   				kb_start_ips=0;
;;;1692   				}
;;;1693   			else
;;;1694   				{
;;;1695   				kb_cnt_2lev=10;     
0018f2  f8aa704e          STRH     r7,[r10,#0x4e]
                  |L1.6390|
;;;1696   				}
;;;1697   			}
;;;1698   #endif
;;;1699   		}	
;;;1700   
;;;1701   
;;;1702   	}
;;;1703   else if(kb_cnt_2lev)
;;;1704   	{
;;;1705   	kb_cnt_2lev--;
;;;1706   
;;;1707   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;1708   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;1709   
;;;1710   
;;;1711   	if(kb_cnt_2lev==5)
;;;1712   		{
;;;1713   		ibat[0]=abs(bat[0]._Ib);
;;;1714   		ibat[1]=abs(bat[1]._Ib);
;;;1715   		ibat_ips=abs(Ib_ips_termokompensat);
;;;1716   		}
;;;1717   	
;;;1718   	if(kb_cnt_2lev==0)
;;;1719   		{
;;;1720   		ibat_[0]=abs(bat[0]._Ib);
;;;1721   		ibat_[1]=abs(bat[1]._Ib);
;;;1722   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;1723   
;;;1724   		kb_full_ver=0;
;;;1725   
;;;1726   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;1727   			{
;;;1728   			kb_full_ver=1;  
;;;1729   			}
;;;1730   		else if(bat[0]._Ub>200)			
;;;1731   			{
;;;1732   			kb_start[0]=0;
;;;1733   			avar_bat_hndl(0,0);
;;;1734   			}
;;;1735   
;;;1736   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;1737   			{
;;;1738   			kb_full_ver=1;     
;;;1739   			}
;;;1740   		else	if(bat[1]._Ub>200)		
;;;1741   			{
;;;1742   			kb_start[1]=0;
;;;1743   			avar_bat_hndl(1,0);
;;;1744   			}
;;;1745   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1746   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;1747   			{
;;;1748   			if(KB_ALGORITM==2)
;;;1749   				{
;;;1750   				avar_bat_ips_hndl(1);
;;;1751   				kb_start_ips=0;
;;;1752   				}
;;;1753   			else
;;;1754   				{
;;;1755   				kb_full_ver=1;     
;;;1756   				}
;;;1757   			}
;;;1758   #endif
;;;1759   		}	
;;;1760   	}
;;;1761   
;;;1762   else if(kb_full_ver)
;;;1763   	{
;;;1764   	
;;;1765   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;1766   
;;;1767   	if( abs(bat[0]._Ib) > IKB ) 
;;;1768   		{
;;;1769   		if(kb_start[0]==1)
;;;1770   			{
;;;1771   			kb_start[0]=0;
;;;1772   			avar_bat_hndl(0,0);
;;;1773   			}
;;;1774   		}
;;;1775   
;;;1776   	if( abs(bat[1]._Ib) > IKB ) 
;;;1777   		{
;;;1778   		if(kb_start[1]==1)
;;;1779   			{
;;;1780   			kb_start[1]=0;
;;;1781   			avar_bat_hndl(1,0);
;;;1782   			}
;;;1783   		}
;;;1784   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1785   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;1786   		{
;;;1787   		if(kb_start_ips==1)
;;;1788   			{
;;;1789   			kb_start_ips=0;
;;;1790   			avar_bat_ips_hndl(0);
;;;1791   			}
;;;1792   		}
;;;1793   #endif
;;;1794   
;;;1795   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;1796   		{
;;;1797   		kb_full_ver=0;
;;;1798   		}
;;;1799   
;;;1800   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;1801   		{
;;;1802   		kb_full_ver=0;
;;;1803   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;1804   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;1805   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1806   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;1807   #endif
;;;1808   		}
;;;1809   	}
;;;1810   
;;;1811   }
0018f6  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.6394|
0018fa  f8aa704e          STRH     r7,[r10,#0x4e]        ;1668
0018fe  e7d0              B        |L1.6306|
                  |L1.6400|
001900  f8aa704e          STRH     r7,[r10,#0x4e]        ;1678
001904  e7e2              B        |L1.6348|
                  |L1.6406|
001906  2001              MOVS     r0,#1                 ;1690
001908  f7fffffe          BL       avar_bat_ips_hndl
00190c  f88a5012          STRB     r5,[r10,#0x12]        ;1691
                  |L1.6416|
001910  e7f1              B        |L1.6390|
                  |L1.6418|
001912  f9b1004e          LDRSH    r0,[r1,#0x4e]         ;1703  ; kb_cnt_2lev
001916  b348              CBZ      r0,|L1.6508|
001918  f1a00001          SUB      r0,r0,#1              ;1705
00191c  b200              SXTH     r0,r0                 ;1705
00191e  460f              MOV      r7,r1                 ;1705
001920  f8a1004e          STRH     r0,[r1,#0x4e]         ;1705
001924  2805              CMP      r0,#5                 ;1707
001926  dd06              BLE      |L1.6454|
001928  230f              MOVS     r3,#0xf               ;1707
00192a  22c8              MOVS     r2,#0xc8              ;1707
00192c  2164              MOVS     r1,#0x64              ;1707
00192e  20e1              MOVS     r0,#0xe1              ;1707
001930  f7fffffe          BL       mess_send
001934  e007              B        |L1.6470|
                  |L1.6454|
001936  2800              CMP      r0,#0                 ;1708
001938  dd05              BLE      |L1.6470|
00193a  230f              MOVS     r3,#0xf               ;1708
00193c  22c8              MOVS     r2,#0xc8              ;1708
00193e  2169              MOVS     r1,#0x69              ;1708
001940  20e1              MOVS     r0,#0xe1              ;1708
001942  f7fffffe          BL       mess_send
                  |L1.6470|
001946  f8b7004e          LDRH     r0,[r7,#0x4e]         ;1711  ; kb_cnt_2lev
00194a  2805              CMP      r0,#5                 ;1711
00194c  d138              BNE      |L1.6592|
00194e  f9b60008          LDRSH    r0,[r6,#8]            ;1713  ; bat
001952  f7fffffe          BL       abs
001956  f8a80000          STRH     r0,[r8,#0]            ;1713
00195a  f9b60054          LDRSH    r0,[r6,#0x54]         ;1714  ; bat
00195e  f7fffffe          BL       abs
001962  f8a80002          STRH     r0,[r8,#2]            ;1714
001966  f9ba0000          LDRSH    r0,[r10,#0]           ;1715  ; Ib_ips_termokompensat
00196a  e025              B        |L1.6584|
                  |L1.6508|
00196c  e08e              B        |L1.6796|
00196e  0000              DCW      0x0000
                  |L1.6512|
001970  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
001974  d4ced0cc
001978  cec2ced7
00197c  cddbc920
001980  202020  
001983  2000              DCB      " ",0
001985  00                DCB      0
001986  00                DCB      0
001987  00                DCB      0
                  |L1.6536|
                          DCD      ||area_number.25||
                  |L1.6540|
                          DCD      speedChrgBlckStat
                  |L1.6544|
                          DCD      TBAT
                  |L1.6548|
                          DCD      Ib_ips_termokompensat
                  |L1.6552|
                          DCD      bat
                  |L1.6556|
                          DCD      IKB
                  |L1.6560|
                          DCD      BAT_IS_ON
                  |L1.6564|
                          DCD      ips_bat_av_vzvod
                  |L1.6568|
                          DCD      bat_ips
                  |L1.6572|
                          DCD      net_av
                  |L1.6576|
                          DCD      sp_ch_stat
                  |L1.6580|
                          DCD      KB_ALGORITM
                  |L1.6584|
0019b8  f7fffffe          BL       abs
0019bc  f8a70052          STRH     r0,[r7,#0x52]         ;1715
                  |L1.6592|
0019c0  48ff              LDR      r0,|L1.7616|
0019c2  f8b0004e          LDRH     r0,[r0,#0x4e]         ;1718  ; kb_cnt_2lev
0019c6  2800              CMP      r0,#0                 ;1718
                  |L1.6600|
0019c8  d195              BNE      |L1.6390|
0019ca  f9b60008          LDRSH    r0,[r6,#8]            ;1720  ; bat
0019ce  f7fffffe          BL       abs
0019d2  4ffb              LDR      r7,|L1.7616|
0019d4  378c              ADDS     r7,r7,#0x8c           ;1720
0019d6  8038              STRH     r0,[r7,#0]            ;1720
0019d8  f9b60054          LDRSH    r0,[r6,#0x54]         ;1721  ; bat
0019dc  f7fffffe          BL       abs
0019e0  8078              STRH     r0,[r7,#2]            ;1721
0019e2  f9ba0000          LDRSH    r0,[r10,#0]           ;1722  ; Ib_ips_termokompensat
0019e6  f7fffffe          BL       abs
0019ea  f8dfa3d4          LDR      r10,|L1.7616|
0019ee  f8aa0054          STRH     r0,[r10,#0x54]        ;1722
0019f2  f88a5011          STRB     r5,[r10,#0x11]        ;1724
0019f6  f9b80000          LDRSH    r0,[r8,#0]            ;1726  ; ibat
0019fa  f9b71000          LDRSH    r1,[r7,#0]            ;1726  ; ibat_
0019fe  4408              ADD      r0,r0,r1              ;1726
001a00  f9b91000          LDRSH    r1,[r9,#0]            ;1726  ; IKB
001a04  4288              CMP      r0,r1                 ;1726
001a06  da02              BGE      |L1.6670|
001a08  7820              LDRB     r0,[r4,#0]            ;1726  ; kb_start
001a0a  2801              CMP      r0,#1                 ;1726
001a0c  d032              BEQ      |L1.6772|
                  |L1.6670|
001a0e  f9b60002          LDRSH    r0,[r6,#2]            ;1730  ; bat
001a12  28c8              CMP      r0,#0xc8              ;1730
001a14  dd04              BLE      |L1.6688|
001a16  7025              STRB     r5,[r4,#0]            ;1732
001a18  2100              MOVS     r1,#0                 ;1733
001a1a  4608              MOV      r0,r1                 ;1733
001a1c  f7fffffe          BL       avar_bat_hndl
                  |L1.6688|
001a20  f9b80002          LDRSH    r0,[r8,#2]            ;1736  ; ibat
001a24  f9b71002          LDRSH    r1,[r7,#2]            ;1736  ; ibat_
001a28  4408              ADD      r0,r0,r1              ;1736
001a2a  f9b91000          LDRSH    r1,[r9,#0]            ;1736  ; IKB
001a2e  4288              CMP      r0,r1                 ;1736
001a30  da02              BGE      |L1.6712|
001a32  7860              LDRB     r0,[r4,#1]            ;1736  ; kb_start
001a34  2801              CMP      r0,#1                 ;1736
001a36  d020              BEQ      |L1.6778|
                  |L1.6712|
001a38  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;1740  ; bat
001a3c  28c8              CMP      r0,#0xc8              ;1740
001a3e  dd04              BLE      |L1.6730|
001a40  7065              STRB     r5,[r4,#1]            ;1742
001a42  2100              MOVS     r1,#0                 ;1743
001a44  2001              MOVS     r0,#1                 ;1743
001a46  f7fffffe          BL       avar_bat_hndl
                  |L1.6730|
001a4a  f9ba0052          LDRSH    r0,[r10,#0x52]        ;1746  ; ibat_ips
001a4e  f9ba1054          LDRSH    r1,[r10,#0x54]        ;1746  ; ibat_ips_
001a52  4408              ADD      r0,r0,r1              ;1746
001a54  f9b91000          LDRSH    r1,[r9,#0]            ;1746  ; IKB
001a58  4288              CMP      r0,r1                 ;1746
001a5a  f6bfaf59          BGE      |L1.6416|
001a5e  f89a0012          LDRB     r0,[r10,#0x12]        ;1746  ; kb_start_ips
001a62  2801              CMP      r0,#1                 ;1746
001a64  d1b0              BNE      |L1.6600|
001a66  48d7              LDR      r0,|L1.7620|
001a68  8800              LDRH     r0,[r0,#0]            ;1748  ; KB_ALGORITM
001a6a  2802              CMP      r0,#2                 ;1748
001a6c  d008              BEQ      |L1.6784|
001a6e  f88ab011          STRB     r11,[r10,#0x11]       ;1755
                  |L1.6770|
001a72  e740              B        |L1.6390|
                  |L1.6772|
001a74  f88ab011          STRB     r11,[r10,#0x11]       ;1728
001a78  e7d2              B        |L1.6688|
                  |L1.6778|
001a7a  f88ab011          STRB     r11,[r10,#0x11]       ;1738
001a7e  e7e4              B        |L1.6730|
                  |L1.6784|
001a80  2001              MOVS     r0,#1                 ;1750
001a82  f7fffffe          BL       avar_bat_ips_hndl
001a86  f88a5012          STRB     r5,[r10,#0x12]        ;1751
001a8a  e734              B        |L1.6390|
                  |L1.6796|
001a8c  7c48              LDRB     r0,[r1,#0x11]         ;1762  ; kb_full_ver
001a8e  4688              MOV      r8,r1                 ;1762
001a90  2800              CMP      r0,#0                 ;1762
001a92  d0ee              BEQ      |L1.6770|
001a94  230f              MOVS     r3,#0xf               ;1765
001a96  2200              MOVS     r2,#0                 ;1765
001a98  216e              MOVS     r1,#0x6e              ;1765
001a9a  20e1              MOVS     r0,#0xe1              ;1765
001a9c  f7fffffe          BL       mess_send
001aa0  f9b60008          LDRSH    r0,[r6,#8]            ;1767  ; bat
001aa4  f7fffffe          BL       abs
001aa8  f9b91000          LDRSH    r1,[r9,#0]            ;1767  ; IKB
001aac  4288              CMP      r0,r1                 ;1767
001aae  dd07              BLE      |L1.6848|
001ab0  7820              LDRB     r0,[r4,#0]            ;1769  ; kb_start
001ab2  2801              CMP      r0,#1                 ;1769
001ab4  d104              BNE      |L1.6848|
001ab6  7025              STRB     r5,[r4,#0]            ;1771
001ab8  2100              MOVS     r1,#0                 ;1772
001aba  4608              MOV      r0,r1                 ;1772
001abc  f7fffffe          BL       avar_bat_hndl
                  |L1.6848|
001ac0  f9b60054          LDRSH    r0,[r6,#0x54]         ;1776  ; bat
001ac4  f7fffffe          BL       abs
001ac8  f9b91000          LDRSH    r1,[r9,#0]            ;1776  ; IKB
001acc  4288              CMP      r0,r1                 ;1776
001ace  dd06              BLE      |L1.6878|
001ad0  7860              LDRB     r0,[r4,#1]            ;1778  ; kb_start
001ad2  2801              CMP      r0,#1                 ;1778
001ad4  d103              BNE      |L1.6878|
001ad6  7065              STRB     r5,[r4,#1]            ;1780
001ad8  2100              MOVS     r1,#0                 ;1781
001ada  f7fffffe          BL       avar_bat_hndl
                  |L1.6878|
001ade  f9ba0000          LDRSH    r0,[r10,#0]           ;1785  ; Ib_ips_termokompensat
001ae2  f7fffffe          BL       abs
001ae6  f9b91000          LDRSH    r1,[r9,#0]            ;1785  ; IKB
001aea  4288              CMP      r0,r1                 ;1785
001aec  dd08              BLE      |L1.6912|
001aee  f8980012          LDRB     r0,[r8,#0x12]         ;1787  ; kb_start_ips
001af2  2801              CMP      r0,#1                 ;1787
001af4  d104              BNE      |L1.6912|
001af6  f8885012          STRB     r5,[r8,#0x12]         ;1789
001afa  2000              MOVS     r0,#0                 ;1790
001afc  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.6912|
001b00  7820              LDRB     r0,[r4,#0]            ;1795  ; kb_start
001b02  b930              CBNZ     r0,|L1.6930|
001b04  7860              LDRB     r0,[r4,#1]            ;1795  ; kb_start
001b06  b920              CBNZ     r0,|L1.6930|
001b08  f8980012          LDRB     r0,[r8,#0x12]         ;1795  ; kb_start_ips
001b0c  b908              CBNZ     r0,|L1.6930|
001b0e  f8885011          STRB     r5,[r8,#0x11]         ;1797
                  |L1.6930|
001b12  20e6              MOVS     r0,#0xe6              ;1800
001b14  f7fffffe          BL       mess_find
001b18  b118              CBZ      r0,|L1.6946|
001b1a  48ab              LDR      r0,|L1.7624|
001b1c  6800              LDR      r0,[r0,#0]            ;1800  ; mess_data
001b1e  28e7              CMP      r0,#0xe7              ;1800
001b20  d00a              BEQ      |L1.6968|
                  |L1.6946|
001b22  48aa              LDR      r0,|L1.7628|
001b24  49aa              LDR      r1,|L1.7632|
001b26  f9b00000          LDRSH    r0,[r0,#0]            ;1800  ; USIGN
001b2a  f9b11000          LDRSH    r1,[r1,#0]            ;1800  ; load_U
001b2e  eb000080          ADD      r0,r0,r0,LSL #2       ;1800
001b32  ebb10f40          CMP      r1,r0,LSL #1          ;1800
                  |L1.6966|
001b36  da9c              BGE      |L1.6770|
                  |L1.6968|
001b38  f8885011          STRB     r5,[r8,#0x11]         ;1802
001b3c  7820              LDRB     r0,[r4,#0]            ;1803  ; kb_start
001b3e  4da5              LDR      r5,|L1.7636|
001b40  2801              CMP      r0,#1                 ;1803
001b42  d10f              BNE      |L1.7012|
001b44  f9b90000          LDRSH    r0,[r9,#0]            ;1803  ; IKB
001b48  0040              LSLS     r0,r0,#1              ;1803
001b4a  fb90f1f7          SDIV     r1,r0,r7              ;1803
001b4e  f9b50000          LDRSH    r0,[r5,#0]            ;1803  ; load_I
001b52  4281              CMP      r1,r0                 ;1803
001b54  da06              BGE      |L1.7012|
001b56  f896003d          LDRB     r0,[r6,#0x3d]         ;1803  ; bat
001b5a  07c0              LSLS     r0,r0,#31             ;1803
001b5c  d102              BNE      |L1.7012|
001b5e  2101              MOVS     r1,#1                 ;1803
001b60  f7fffffe          BL       avar_bat_hndl
                  |L1.7012|
001b64  7860              LDRB     r0,[r4,#1]            ;1804  ; kb_start
001b66  2801              CMP      r0,#1                 ;1804
001b68  d110              BNE      |L1.7052|
001b6a  f9b90000          LDRSH    r0,[r9,#0]            ;1804  ; IKB
001b6e  f9b51000          LDRSH    r1,[r5,#0]            ;1804  ; load_I
001b72  0040              LSLS     r0,r0,#1              ;1804
001b74  fb90f0f7          SDIV     r0,r0,r7              ;1804
001b78  4288              CMP      r0,r1                 ;1804
001b7a  da07              BGE      |L1.7052|
001b7c  f8960089          LDRB     r0,[r6,#0x89]         ;1804  ; bat
001b80  07c0              LSLS     r0,r0,#31             ;1804
001b82  d103              BNE      |L1.7052|
001b84  2101              MOVS     r1,#1                 ;1804
001b86  4608              MOV      r0,r1                 ;1804
001b88  f7fffffe          BL       avar_bat_hndl
                  |L1.7052|
001b8c  f8980012          LDRB     r0,[r8,#0x12]         ;1806  ; kb_start_ips
001b90  2801              CMP      r0,#1                 ;1806
                  |L1.7058|
001b92  f47faebd          BNE      |L1.6416|
001b96  f9b90000          LDRSH    r0,[r9,#0]            ;1806  ; IKB
001b9a  f9b51000          LDRSH    r1,[r5,#0]            ;1806  ; load_I
001b9e  0040              LSLS     r0,r0,#1              ;1806
001ba0  fb90f0f7          SDIV     r0,r0,r7              ;1806
001ba4  4288              CMP      r0,r1                 ;1806
001ba6  dac6              BGE      |L1.6966|
001ba8  488b              LDR      r0,|L1.7640|
001baa  f890003d          LDRB     r0,[r0,#0x3d]         ;1806  ; bat_ips
001bae  07c0              LSLS     r0,r0,#31             ;1806
001bb0  d1ef              BNE      |L1.7058|
001bb2  e8bd5ff0          POP      {r4-r12,lr}           ;1806
001bb6  2001              MOVS     r0,#1                 ;1806
001bb8  f7ffbffe          B.W      avar_bat_ips_hndl
;;;1812   
                          ENDP

                  samokalibr_hndl PROC
;;;1821   //-----------------------------------------------
;;;1822   void samokalibr_hndl(void)
001bbc  4770              BX       lr
;;;1823   {
;;;1824   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;1825   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;1826   
;;;1827   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;1828   	{
;;;1829   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;1830   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;1831   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;1832   	} 
;;;1833   
;;;1834   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;1835   	{
;;;1836   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;1837   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;1838   	
;;;1839   	}
;;;1840   #endif	 	
;;;1841   }
;;;1842   
                          ENDP

                  ubat_old_drv PROC
;;;1845   //-----------------------------------------------
;;;1846   void ubat_old_drv(void)
001bbe  b510              PUSH     {r4,lr}
;;;1847   {        
;;;1848   bat_u_old_cnt++;
001bc0  4c86              LDR      r4,|L1.7644|
001bc2  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
001bc4  f1000001          ADD      r0,r0,#1
001bc8  8020              STRH     r0,[r4,#0]
;;;1849   gran_ring(&bat_u_old_cnt,0,8);
001bca  f04f0208          MOV      r2,#8
001bce  f04f0100          MOV      r1,#0
001bd2  4620              MOV      r0,r4
001bd4  f7fffffe          BL       gran_ring
;;;1850   
;;;1851   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
001bd8  4981              LDR      r1,|L1.7648|
001bda  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
001bde  eb010040          ADD      r0,r1,r0,LSL #1
001be2  884a              LDRH     r2,[r1,#2]  ; bat
001be4  8402              STRH     r2,[r0,#0x20]
;;;1852   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
001be6  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
001bea  f8a0106c          STRH     r1,[r0,#0x6c]
;;;1853   }
001bee  bd10              POP      {r4,pc}
;;;1854   
                          ENDP

                  unet_drv PROC
;;;1855   //-----------------------------------------------
;;;1856   void unet_drv(void)
001bf0  b570              PUSH     {r4-r6,lr}
;;;1857   {
;;;1858   if(net_U<UMN)
001bf2  4d7c              LDR      r5,|L1.7652|
001bf4  487c              LDR      r0,|L1.7656|
;;;1859   	{
;;;1860   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
001bf6  4a7d              LDR      r2,|L1.7660|
001bf8  f9b51000          LDRSH    r1,[r5,#0]            ;1858  ; net_U
001bfc  f9b03000          LDRSH    r3,[r0,#0]            ;1858  ; UMN
001c00  f9920000          LDRSB    r0,[r2,#0]
001c04  4299              CMP      r1,r3                 ;1858
001c06  da1f              BGE      |L1.7240|
;;;1861   		{
;;;1862   		unet_drv_cnt++;
;;;1863   		if(unet_drv_cnt>=10)
;;;1864   			{
;;;1865   			net_Ustore=net_U;
001c08  4c79              LDR      r4,|L1.7664|
001c0a  280a              CMP      r0,#0xa               ;1860
001c0c  da0f              BGE      |L1.7214|
001c0e  4b79              LDR      r3,|L1.7668|
001c10  f9b33000          LDRSH    r3,[r3,#0]            ;1860  ; main_1Hz_cnt
001c14  2b0f              CMP      r3,#0xf               ;1860
001c16  dd0a              BLE      |L1.7214|
001c18  f1000001          ADD      r0,r0,#1              ;1862
001c1c  b240              SXTB     r0,r0                 ;1862
001c1e  7010              STRB     r0,[r2,#0]            ;1862
001c20  280a              CMP      r0,#0xa               ;1863
001c22  db09              BLT      |L1.7224|
001c24  8021              STRH     r1,[r4,#0]
;;;1866   		 	avar_unet_hndl(1);
001c26  2001              MOVS     r0,#1
001c28  f7fffffe          BL       avar_unet_hndl
001c2c  e004              B        |L1.7224|
                  |L1.7214|
;;;1867   			
;;;1868   			}
;;;1869   		}
;;;1870   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
001c2e  280a              CMP      r0,#0xa
001c30  db02              BLT      |L1.7224|
001c32  f04f000a          MOV      r0,#0xa
001c36  7010              STRB     r0,[r2,#0]
                  |L1.7224|
;;;1871   
;;;1872   	if(net_U<net_Ustore) net_Ustore=net_U;	
001c38  f9b50000          LDRSH    r0,[r5,#0]  ; net_U
001c3c  f9b41000          LDRSH    r1,[r4,#0]  ; net_Ustore
001c40  4288              CMP      r0,r1
001c42  da00              BGE      |L1.7238|
001c44  8020              STRH     r0,[r4,#0]
                  |L1.7238|
;;;1873   	}
;;;1874   
;;;1875   else if(net_U>UMN)
;;;1876   	{                 
;;;1877   	if(unet_drv_cnt)
;;;1878   		{
;;;1879   		unet_drv_cnt--;
;;;1880   		if(unet_drv_cnt<=0)
;;;1881   			{
;;;1882   			avar_unet_hndl(0);
;;;1883   			}
;;;1884   		}
;;;1885   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;1886   	
;;;1887   	}
;;;1888   
;;;1889   }
001c46  bd70              POP      {r4-r6,pc}
                  |L1.7240|
001c48  ddfd              BLE      |L1.7238|
001c4a  2800              CMP      r0,#0                 ;1877
001c4c  d0fb              BEQ      |L1.7238|
001c4e  f1a00001          SUB      r0,r0,#1              ;1879
001c52  b240              SXTB     r0,r0                 ;1879
001c54  7010              STRB     r0,[r2,#0]            ;1879
001c56  2800              CMP      r0,#0                 ;1880
001c58  dcf5              BGT      |L1.7238|
001c5a  e8bd4070          POP      {r4-r6,lr}            ;1882
001c5e  2000              MOVS     r0,#0                 ;1882
001c60  f7ffbffe          B.W      avar_unet_hndl
;;;1890   
                          ENDP

                  matemat PROC
;;;1891   //-----------------------------------------------
;;;1892   void matemat(void)
001c64  e92d5ffc          PUSH     {r2-r12,lr}
;;;1893   {
;;;1894   //signed short temp_SS;
;;;1895   signed long temp_SL/*,temp_SL_*/;
;;;1896   char /*temp,*/i;
;;;1897   //signed short temp_SS;
;;;1898   
;;;1899   #ifdef UKU_MGTS
;;;1900   //напряжение сети
;;;1901   temp_SL=(signed long)net_buff_;
;;;1902   temp_SL*=Kunet;
;;;1903   temp_SL/=110000L;
;;;1904   net_U=(signed short)temp_SL;
;;;1905   #endif
;;;1906   
;;;1907   #ifdef UKU_RSTKM
;;;1908   //напряжение сети
;;;1909   temp_SL=(signed long)net_buff_;
;;;1910   temp_SL*=Kunet;
;;;1911   temp_SL/=110000L;
;;;1912   net_U=(signed short)temp_SL;
;;;1913   #endif
;;;1914   
;;;1915   #ifdef UKU_3U
;;;1916   //напряжение сети
;;;1917   temp_SL=(signed long)net_buff_;
;;;1918   temp_SL*=Kunet;
;;;1919   temp_SL/=36000L;
;;;1920   net_U=(signed short)temp_SL;
;;;1921   #endif
;;;1922   
;;;1923   #ifdef UKU_6U
;;;1924   //напряжение сети
;;;1925   
;;;1926   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;1927   	{
;;;1928   
;;;1929   	if(bps[11]._device==dNET_METR)
;;;1930   		{
;;;1931   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;1932   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;1933   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;1934   
;;;1935   		temp_SL=(signed long)net_metr_buff_[0];
;;;1936   		temp_SL*=KunetA;
;;;1937   		temp_SL/=6000L;
;;;1938   		net_Ua=(signed short)temp_SL;
;;;1939   	
;;;1940   		temp_SL=(signed long)net_metr_buff_[1];
;;;1941   		temp_SL*=KunetB;
;;;1942   		temp_SL/=6000L;
;;;1943   		net_Ub=(signed short)temp_SL;
;;;1944   	
;;;1945   		temp_SL=(signed long)net_metr_buff_[2];
;;;1946   		temp_SL*=KunetC;
;;;1947   		temp_SL/=6000L;
;;;1948   		net_Uc=(signed short)temp_SL;
;;;1949   		}
;;;1950   	else
;;;1951   		{
;;;1952   		temp_SL=(signed long)net_buff_;
;;;1953   		temp_SL*=KunetA;
;;;1954   		temp_SL/=110000L;
;;;1955   		net_Ua=(signed short)temp_SL;
;;;1956   	
;;;1957   		temp_SL=(signed long)adc_buff_[3];
;;;1958   		temp_SL*=KunetB;
;;;1959   		temp_SL/=6000L;
;;;1960   		net_Ub=(signed short)temp_SL;
;;;1961   	
;;;1962   		temp_SL=(signed long)adc_buff_[10];
;;;1963   		temp_SL*=KunetC;
;;;1964   		temp_SL/=6000L;
;;;1965   		net_Uc=(signed short)temp_SL;
;;;1966   		}
;;;1967   
;;;1968   	net_U=net_Ua;
;;;1969   	if(net_Ub<net_U)net_U=net_Ub;
;;;1970   	if(net_Uc<net_U)net_U=net_Uc;
;;;1971   	}
;;;1972   else 
;;;1973   	{
;;;1974   	temp_SL=(signed long)net_buff_;
;;;1975   	temp_SL*=Kunet;
;;;1976   	temp_SL/=110000L;
;;;1977   	net_U=(signed short)temp_SL;
;;;1978   	}
;;;1979   
;;;1980   
;;;1981   
;;;1982   
;;;1983   #endif
;;;1984   
;;;1985   #ifdef UKU_GLONASS
;;;1986   //напряжение сети
;;;1987   temp_SL=(signed long)net_buff_;
;;;1988   temp_SL*=Kunet;
;;;1989   temp_SL/=110000L;
;;;1990   net_U=(signed short)temp_SL;
;;;1991   #endif
;;;1992   
;;;1993   #ifdef UKU_KONTUR
;;;1994   //напряжение сети
;;;1995   temp_SL=(signed long)net_buff_;
;;;1996   temp_SL*=Kunet;
;;;1997   temp_SL/=110000L;
;;;1998   net_U=(signed short)temp_SL;
;;;1999   #endif
;;;2000   
;;;2001   #ifdef IPS_SGEP_GAZPROM
;;;2002   //напряжение сети
;;;2003   temp_SL=(signed long)net_buff_;
;;;2004   temp_SL*=Kunet;
;;;2005   temp_SL/=110000L;
;;;2006   net_U=(signed short)temp_SL;
;;;2007   #endif
;;;2008   
;;;2009   #ifdef UKU_220_V2
;;;2010   //напряжение сети
;;;2011   
;;;2012   if(AUSW_MAIN==22033)
;;;2013   	{
;;;2014   	temp_SL=(signed long)net_buff_;
;;;2015   	temp_SL*=KunetA;
;;;2016   	temp_SL/=6000L;
;;;2017   	net_Ua=(signed short)temp_SL;
;;;2018   
;;;2019   	temp_SL=(signed long)adc_buff_[3];
;;;2020   	temp_SL*=KunetB;
;;;2021   	temp_SL/=6000L;
;;;2022   	net_Ub=(signed short)temp_SL;
;;;2023   
;;;2024   	temp_SL=(signed long)adc_buff_[10];
;;;2025   	temp_SL*=KunetC;
;;;2026   	temp_SL/=6000L;
;;;2027   	net_Uc=(signed short)temp_SL;
;;;2028   
;;;2029   	net_U=net_Ua;
;;;2030   	if(net_Ub<net_U)net_U=net_Ub;
;;;2031   	if(net_Uc<net_U)net_U=net_Uc;
;;;2032   	}
;;;2033   else
;;;2034   	{
;;;2035   	temp_SL=(signed long)net_buff_;
;;;2036   	temp_SL*=Kunet;
;;;2037   	temp_SL/=5000L;
;;;2038   	net_U=(signed short)temp_SL;
;;;2039   	}
;;;2040   #endif
;;;2041   
;;;2042   
;;;2043   #ifdef UKU_220
;;;2044   //напряжение сети
;;;2045   
;;;2046   if(AUSW_MAIN==22035)
;;;2047   	{
;;;2048   	temp_SL=(signed long)net_buff_;
;;;2049   	temp_SL*=KunetA;
;;;2050   	temp_SL/=6000L;
;;;2051   	net_Ua=(signed short)temp_SL;
;;;2052   
;;;2053   	temp_SL=(signed long)adc_buff_[3];
;;;2054   	temp_SL*=KunetB;
;;;2055   	temp_SL/=6000L;
;;;2056   	net_Ub=(signed short)temp_SL;
;;;2057   
;;;2058   	temp_SL=(signed long)adc_buff_[10];
;;;2059   	temp_SL*=KunetC;
;;;2060   	temp_SL/=6000L;
;;;2061   	net_Uc=(signed short)temp_SL;
;;;2062   
;;;2063   	net_U=net_Ua;
;;;2064   	if(net_Ub<net_U)net_U=net_Ub;
;;;2065   	if(net_Uc<net_U)net_U=net_Uc;
;;;2066   	}
;;;2067   else
;;;2068   	{
;;;2069   	temp_SL=(signed long)net_buff_;
;;;2070   	temp_SL*=Kunet;
;;;2071   	#ifdef _ACDC_
;;;2072   	temp_SL/=500L;
;;;2073   	#else
;;;2074   	temp_SL/=5000L;
;;;2075   	#endif
;;;2076   	net_U=(signed short)temp_SL;
;;;2077   	
;;;2078   	}
;;;2079   #endif
;;;2080   
;;;2081   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2082   //напряжение сети
;;;2083   
;;;2084   
;;;2085   	if(bps[11]._device==dNET_METR)
001c68  4863              LDR      r0,|L1.7672|
;;;2086   		{
;;;2087   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2088   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2089   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2090   
;;;2091   		temp_SL=(signed long)net_metr_buff_[2];
;;;2092   		temp_SL*=KunetA;
001c6a  4a64              LDR      r2,|L1.7676|
;;;2093   		temp_SL/=6000L;
;;;2094   		net_Ua=(signed short)temp_SL;
;;;2095   	
;;;2096   		temp_SL=(signed long)net_metr_buff_[1];
;;;2097   		temp_SL*=KunetB;
001c6c  4965              LDR      r1,|L1.7684|
001c6e  f89003f4          LDRB     r0,[r0,#0x3f4]        ;2085  ; bps
;;;2098   		temp_SL/=6000L;
;;;2099   		net_Ub=(signed short)temp_SL;
;;;2100   	
;;;2101   		temp_SL=(signed long)net_metr_buff_[0];
;;;2102   		temp_SL*=KunetC;
001c72  4b65              LDR      r3,|L1.7688|
001c74  9001              STR      r0,[sp,#4]            ;2092
001c76  f8dfc188          LDR      r12,|L1.7680|
001c7a  f9b29000          LDRSH    r9,[r2,#0]            ;2092
001c7e  f9b1b000          LDRSH    r11,[r1,#0]           ;2097
001c82  f9b3a000          LDRSH    r10,[r3,#0]
001c86  4d61              LDR      r5,|L1.7692|
;;;2103   		temp_SL/=6000L;
;;;2104   		net_Uc=(signed short)temp_SL;
001c88  4c61              LDR      r4,|L1.7696|
;;;2105   
;;;2106   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2107   
;;;2108   		net_U=net_Ua;
;;;2109   		if(net_Ub<net_U)net_U=net_Ub;
;;;2110   		if(net_Uc<net_U)net_U=net_Uc;
;;;2111   		}
;;;2112   	  else if(AUSW_MAIN==22033)
;;;2113   	{
;;;2114   	temp_SL=(signed long)net_buff_;
001c8a  4f4d              LDR      r7,|L1.7616|
001c8c  f2456611          MOV      r6,#0x5611            ;2112
001c90  2807              CMP      r0,#7                 ;2085
001c92  d036              BEQ      |L1.7426|
001c94  4639              MOV      r1,r7
;;;2115   	temp_SL*=KunetA;
;;;2116   	temp_SL/=4000L;
;;;2117   	net_Ua=(signed short)temp_SL;
;;;2118   
;;;2119   	temp_SL=(signed long)adc_buff_[3];
001c96  4b60              LDR      r3,|L1.7704|
001c98  8e4a              LDRH     r2,[r1,#0x32]         ;2114
001c9a  4958              LDR      r1,|L1.7676|
001c9c  f8df8164          LDR      r8,|L1.7684|
001ca0  f8df9164          LDR      r9,|L1.7688|
001ca4  f9b11000          LDRSH    r1,[r1,#0]            ;2092
001ca8  f9b88000          LDRSH    r8,[r8,#0]            ;2097
001cac  434a              MULS     r2,r1,r2              ;2115
001cae  f9b31006          LDRSH    r1,[r3,#6]
;;;2120   	temp_SL*=KunetB;
;;;2121   	temp_SL/=6000L;
;;;2122   	net_Ub=(signed short)temp_SL;
;;;2123   
;;;2124   	temp_SL=(signed long)adc_buff_[10];
001cb2  f9b33014          LDRSH    r3,[r3,#0x14]
001cb6  fb01f108          MUL      r1,r1,r8              ;2120
001cba  f2417870          MOV      r8,#0x1770            ;2093
001cbe  f9b99000          LDRSH    r9,[r9,#0]            ;2102
001cc2  fb91f1f8          SDIV     r1,r1,r8              ;2121
;;;2125   	temp_SL*=KunetC;
001cc6  fb03f309          MUL      r3,r3,r9
;;;2126   	temp_SL/=6000L;
001cca  fb93f3f8          SDIV     r3,r3,r8
001cce  4851              LDR      r0,|L1.7700|
001cd0  b209              SXTH     r1,r1                 ;2122
;;;2127   	net_Uc=(signed short)temp_SL;
001cd2  b21b              SXTH     r3,r3
001cd4  8800              LDRH     r0,[r0,#0]            ;2112  ; AUSW_MAIN
001cd6  42b0              CMP      r0,r6                 ;2112
001cd8  d154              BNE      |L1.7556|
001cda  f44f607a          MOV      r0,#0xfa0             ;2116
001cde  fb92f0f0          SDIV     r0,r2,r0              ;2116
001ce2  b200              SXTH     r0,r0                 ;2117
001ce4  f8ac0000          STRH     r0,[r12,#0]           ;2117
001ce8  8029              STRH     r1,[r5,#0]            ;2122
001cea  8023              STRH     r3,[r4,#0]
;;;2128   
;;;2129   	net_U=net_Ua;
001cec  4a3d              LDR      r2,|L1.7652|
001cee  8010              STRH     r0,[r2,#0]
;;;2130   	if(net_Ub<net_U)net_U=net_Ub;
001cf0  4281              CMP      r1,r0
001cf2  da00              BGE      |L1.7414|
001cf4  8011              STRH     r1,[r2,#0]
                  |L1.7414|
;;;2131   	if(net_Uc<net_U)net_U=net_Uc;
001cf6  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
001cfa  4283              CMP      r3,r0
001cfc  da00              BGE      |L1.7424|
001cfe  8013              STRH     r3,[r2,#0]
                  |L1.7424|
001d00  e0b1              B        |L1.7782|
                  |L1.7426|
001d02  4846              LDR      r0,|L1.7708|
001d04  4b2e              LDR      r3,|L1.7616|
001d06  7801              LDRB     r1,[r0,#0]            ;2087  ; bps
001d08  7842              LDRB     r2,[r0,#1]            ;2087  ; bps
001d0a  f10303d4          ADD      r3,r3,#0xd4           ;2087
001d0e  eb012102          ADD      r1,r1,r2,LSL #8       ;2087
001d12  fa1ff881          UXTH     r8,r1                 ;2087
001d16  f8a38000          STRH     r8,[r3,#0]            ;2087
001d1a  7881              LDRB     r1,[r0,#2]            ;2088  ; bps
001d1c  78c2              LDRB     r2,[r0,#3]            ;2088  ; bps
001d1e  eb012102          ADD      r1,r1,r2,LSL #8       ;2088
001d22  b28a              UXTH     r2,r1                 ;2088
001d24  805a              STRH     r2,[r3,#2]            ;2088
001d26  7901              LDRB     r1,[r0,#4]            ;2089  ; bps
001d28  f890e005          LDRB     lr,[r0,#5]            ;2089  ; bps
001d2c  eb01210e          ADD      r1,r1,lr,LSL #8       ;2089
001d30  b289              UXTH     r1,r1                 ;2089
001d32  8099              STRH     r1,[r3,#4]            ;2089
001d34  fb01f109          MUL      r1,r1,r9              ;2092
001d38  f2417370          MOV      r3,#0x1770            ;2093
001d3c  fb91f1f3          SDIV     r1,r1,r3              ;2093
001d40  fa0ff981          SXTH     r9,r1                 ;2094
001d44  f8ac9000          STRH     r9,[r12,#0]           ;2094
001d48  fb02f20b          MUL      r2,r2,r11             ;2097
001d4c  fb92f1f3          SDIV     r1,r2,r3              ;2098
001d50  b209              SXTH     r1,r1                 ;2099
001d52  8029              STRH     r1,[r5,#0]            ;2099
001d54  fb08f80a          MUL      r8,r8,r10             ;2102
001d58  fb98f2f3          SDIV     r2,r8,r3              ;2103
001d5c  b212              SXTH     r2,r2                 ;2104
001d5e  8022              STRH     r2,[r4,#0]            ;2104
001d60  7983              LDRB     r3,[r0,#6]            ;2106  ; bps
001d62  79c0              LDRB     r0,[r0,#7]            ;2106  ; bps
001d64  eb032000          ADD      r0,r3,r0,LSL #8       ;2106
001d68  4b2d              LDR      r3,|L1.7712|
001d6a  8018              STRH     r0,[r3,#0]            ;2106
001d6c  481d              LDR      r0,|L1.7652|
001d6e  f8a09000          STRH     r9,[r0,#0]            ;2108
001d72  4549              CMP      r1,r9                 ;2109
001d74  da00              BGE      |L1.7544|
001d76  8001              STRH     r1,[r0,#0]            ;2109
                  |L1.7544|
001d78  f9b01000          LDRSH    r1,[r0,#0]            ;2110  ; net_U
001d7c  428a              CMP      r2,r1                 ;2110
001d7e  da72              BGE      |L1.7782|
001d80  8002              STRH     r2,[r0,#0]            ;2110
001d82  e070              B        |L1.7782|
                  |L1.7556|
;;;2132   	}
;;;2133   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
001d84  f5a048ac          SUB      r8,r0,#0x5600
001d88  f1b8082f          SUBS     r8,r8,#0x2f
001d8c  d00b              BEQ      |L1.7590|
001d8e  f1180828          ADDS     r8,r8,#0x28
001d92  d008              BEQ      |L1.7590|
001d94  f1b80814          SUBS     r8,r8,#0x14
001d98  d005              BEQ      |L1.7590|
001d9a  f1b80801          SUBS     r8,r8,#1
001d9e  d002              BEQ      |L1.7590|
001da0  f118081a          ADDS     r8,r8,#0x1a
001da4  d146              BNE      |L1.7732|
                  |L1.7590|
;;;2134   	{
;;;2135   	temp_SL=(signed long)net_buff_;
;;;2136   	temp_SL*=KunetA;
;;;2137   	temp_SL/=40000L;
001da6  f6494040          MOV      r0,#0x9c40
001daa  fb92f0f0          SDIV     r0,r2,r0
;;;2138   	net_Ua=(signed short)temp_SL;
001dae  b200              SXTH     r0,r0
001db0  f8ac0000          STRH     r0,[r12,#0]
;;;2139   
;;;2140   	temp_SL=(signed long)adc_buff_[3];
;;;2141   	temp_SL*=KunetB;
;;;2142   	temp_SL/=6000L;
;;;2143   	net_Ub=(signed short)temp_SL;
001db4  8029              STRH     r1,[r5,#0]
;;;2144   
;;;2145   	temp_SL=(signed long)adc_buff_[10];
;;;2146   	temp_SL*=KunetC;
;;;2147   	temp_SL/=6000L;
;;;2148   	net_Uc=(signed short)temp_SL;
001db6  8023              STRH     r3,[r4,#0]
;;;2149   
;;;2150   	net_U=net_Ua;
001db8  4a0a              LDR      r2,|L1.7652|
001dba  8010              STRH     r0,[r2,#0]
;;;2151   	if(net_Ub<net_U)net_U=net_Ub;
001dbc  4281              CMP      r1,r0
001dbe  e031              B        |L1.7716|
                  |L1.7616|
                          DCD      ||area_number.25||
                  |L1.7620|
                          DCD      KB_ALGORITM
                  |L1.7624|
                          DCD      mess_data
                  |L1.7628|
                          DCD      USIGN
                  |L1.7632|
                          DCD      load_U
                  |L1.7636|
                          DCD      load_I
                  |L1.7640|
                          DCD      bat_ips
                  |L1.7644|
                          DCD      bat_u_old_cnt
                  |L1.7648|
                          DCD      bat
                  |L1.7652|
                          DCD      net_U
                  |L1.7656|
                          DCD      UMN
                  |L1.7660|
                          DCD      unet_drv_cnt
                  |L1.7664|
                          DCD      net_Ustore
                  |L1.7668|
                          DCD      main_1Hz_cnt
                  |L1.7672|
                          DCD      bps
                  |L1.7676|
                          DCD      KunetA
                  |L1.7680|
                          DCD      net_Ua
                  |L1.7684|
                          DCD      KunetB
                  |L1.7688|
                          DCD      KunetC
                  |L1.7692|
                          DCD      net_Ub
                  |L1.7696|
                          DCD      net_Uc
                  |L1.7700|
                          DCD      AUSW_MAIN
                  |L1.7704|
                          DCD      ||.bss||+0x40c
                  |L1.7708|
                          DCD      bps+0x3fa
                  |L1.7712|
                          DCD      net_F3
                  |L1.7716|
001e24  da00              BGE      |L1.7720|
001e26  8011              STRH     r1,[r2,#0]
                  |L1.7720|
;;;2152   	if(net_Uc<net_U)net_U=net_Uc;
001e28  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
001e2c  4283              CMP      r3,r0
001e2e  da1a              BGE      |L1.7782|
001e30  8013              STRH     r3,[r2,#0]
001e32  e018              B        |L1.7782|
                  |L1.7732|
;;;2153   	}
;;;2154   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2155   	{
;;;2156   	temp_SL=(signed long)net_buff_;
;;;2157   	temp_SL*=Kunet;
001e34  49ff              LDR      r1,|L1.8756|
001e36  f5a043aa          SUB      r3,r0,#0x5500         ;2154
001e3a  f9b12000          LDRSH    r2,[r1,#0]
001e3e  49fe              LDR      r1,|L1.8760|
001e40  8e49              LDRH     r1,[r1,#0x32]         ;2114
001e42  4351              MULS     r1,r2,r1
001e44  3bfa              SUBS     r3,r3,#0xfa           ;2154
001e46  d001              BEQ      |L1.7756|
001e48  1e5a              SUBS     r2,r3,#1              ;2154
001e4a  d106              BNE      |L1.7770|
                  |L1.7756|
;;;2158   	temp_SL/=35000L;
001e4c  f64800b8          MOV      r0,#0x88b8
001e50  fb91f0f0          SDIV     r0,r1,r0
;;;2159   	net_U=(signed short)temp_SL;
001e54  49f9              LDR      r1,|L1.8764|
001e56  8008              STRH     r0,[r1,#0]
001e58  e005              B        |L1.7782|
                  |L1.7770|
;;;2160   	
;;;2161   	}
;;;2162   else
;;;2163   	{
;;;2164   	temp_SL=(signed long)net_buff_;
;;;2165   	temp_SL*=Kunet;
;;;2166   	#ifdef _ACDC_
;;;2167   	temp_SL/=500L;
001e5a  f44f70fa          MOV      r0,#0x1f4
001e5e  fb91f0f0          SDIV     r0,r1,r0
;;;2168   	#else
;;;2169   	temp_SL/=5000L;
;;;2170   	#endif
;;;2171   	net_U=(signed short)temp_SL;
001e62  49f6              LDR      r1,|L1.8764|
001e64  8008              STRH     r0,[r1,#0]
                  |L1.7782|
;;;2172   	
;;;2173   	}
;;;2174   if(bps[11]._device!=dNET_METR) net_F3=net_F;
001e66  9801              LDR      r0,[sp,#4]
001e68  2807              CMP      r0,#7
001e6a  d003              BEQ      |L1.7796|
001e6c  48f4              LDR      r0,|L1.8768|
001e6e  8801              LDRH     r1,[r0,#0]  ; net_F
001e70  48f4              LDR      r0,|L1.8772|
001e72  8001              STRH     r1,[r0,#0]
                  |L1.7796|
;;;2175   #endif
;;;2176   
;;;2177   #ifdef UKU_TELECORE2015
;;;2178   //напряжение сети
;;;2179   temp_SL=(signed long)net_buff_;
;;;2180   temp_SL*=Kunet;
;;;2181   temp_SL/=110000L;
;;;2182   net_U=(signed short)temp_SL;
;;;2183   #endif
;;;2184   
;;;2185   #ifdef UKU_TELECORE2017
;;;2186   //напряжение сети
;;;2187   temp_SL=(signed long)net_buff_;
;;;2188   temp_SL*=Kunet;
;;;2189   temp_SL/=110000L;
;;;2190   net_U=(signed short)temp_SL;
;;;2191   #endif
;;;2192   
;;;2193   //Напряжения батарей
;;;2194   temp_SL=(signed long)adc_buff_[0];
001e74  f8df83d0          LDR      r8,|L1.8776|
001e78  f9b82000          LDRSH    r2,[r8,#0]  ; adc_buff_
;;;2195   temp_SL*=Kubat[0];
001e7c  49f3              LDR      r1,|L1.8780|
001e7e  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
001e82  4350              MULS     r0,r2,r0
;;;2196   temp_SL/=2000L;
001e84  f44f65fa          MOV      r5,#0x7d0
001e88  fb90f0f5          SDIV     r0,r0,r5
;;;2197   bat[0]._Ub=(signed short)temp_SL;
001e8c  4cf0              LDR      r4,|L1.8784|
001e8e  8060              STRH     r0,[r4,#2]
;;;2198   
;;;2199   #ifdef UKU_220
;;;2200   //Напряжения батарей
;;;2201   temp_SL=(signed long)adc_buff_[0];
;;;2202   temp_SL*=Kubat[0];
;;;2203   temp_SL/=400L;
;;;2204   bat[0]._Ub=(signed short)temp_SL;
;;;2205   #endif
;;;2206   
;;;2207   #ifdef UKU_220_V2
;;;2208   //Напряжения батарей
;;;2209   temp_SL=(signed long)adc_buff_[0];
;;;2210   temp_SL*=Kubat[0];
;;;2211   temp_SL/=400L;
;;;2212   bat[0]._Ub=(signed short)temp_SL;
;;;2213   #endif
;;;2214   
;;;2215   temp_SL=(signed long)adc_buff_[4];
001e90  f9b83008          LDRSH    r3,[r8,#8]  ; adc_buff_
;;;2216   temp_SL*=Kubatm[0];
001e94  4aef              LDR      r2,|L1.8788|
001e96  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
001e9a  fb00f003          MUL      r0,r0,r3
;;;2217   temp_SL/=700L;
001e9e  f44f732f          MOV      r3,#0x2bc
001ea2  fb90f0f3          SDIV     r0,r0,r3
;;;2218   bat[0]._Ubm=(signed short)temp_SL;
001ea6  80a0              STRH     r0,[r4,#4]
;;;2219   
;;;2220   #ifdef UKU_KONTUR
;;;2221   temp_SL=(signed long)adc_buff_[4];
;;;2222   temp_SL*=Kubatm[0];
;;;2223   temp_SL/=2000L;
;;;2224   bat[0]._Ubm=(signed short)temp_SL;
;;;2225   #endif
;;;2226   
;;;2227   temp_SL=(signed long)adc_buff_[12];
001ea8  f9b80018          LDRSH    r0,[r8,#0x18]  ; adc_buff_
;;;2228   temp_SL*=Kubat[1];
001eac  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
001eb0  fb01f100          MUL      r1,r1,r0
;;;2229   temp_SL/=2000L;
001eb4  fb91f0f5          SDIV     r0,r1,r5
;;;2230   bat[1]._Ub=(signed short)temp_SL;
001eb8  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2231   
;;;2232   #ifdef UKU_220
;;;2233   temp_SL=(signed long)adc_buff_[12];
;;;2234   temp_SL*=Kubat[1];
;;;2235   temp_SL/=400L;
;;;2236   bat[1]._Ub=(signed short)temp_SL;
;;;2237   #endif
;;;2238   
;;;2239   #ifdef UKU_220_V2
;;;2240   temp_SL=(signed long)adc_buff_[12];
;;;2241   temp_SL*=Kubat[1];
;;;2242   temp_SL/=400L;
;;;2243   bat[1]._Ub=(signed short)temp_SL;
;;;2244   #endif
;;;2245   
;;;2246   temp_SL=(signed long)adc_buff_[1];
001ebc  f9b81002          LDRSH    r1,[r8,#2]  ; adc_buff_
;;;2247   temp_SL*=Kubatm[1];
001ec0  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
001ec4  fb00f001          MUL      r0,r0,r1
;;;2248   temp_SL/=700L;
001ec8  fb90f0f3          SDIV     r0,r0,r3
;;;2249   bat[1]._Ubm=(signed short)temp_SL;
001ecc  f8a40050          STRH     r0,[r4,#0x50]
;;;2250   #ifdef UKU_KONTUR
;;;2251   temp_SL=(signed long)adc_buff_[1];
;;;2252   temp_SL*=Kubatm[1];
;;;2253   temp_SL/=2000L;
;;;2254   bat[1]._Ubm=(signed short)temp_SL;
;;;2255   #endif
;;;2256   
;;;2257   #ifdef UKU_TELECORE2015
;;;2258   temp_SL=(signed long)adc_buff_[2];
;;;2259   temp_SL*=Kubat[0];
;;;2260   temp_SL/=2000L;
;;;2261   bat[0]._Ub=(signed short)temp_SL;
;;;2262   #endif
;;;2263   
;;;2264   /*
;;;2265   //Токи батарей
;;;2266   if(!mess_find_unvol(MESS2MATEMAT))
;;;2267   	{
;;;2268   	temp_SL=(signed long)ad7705_buff_[0];
;;;2269   	temp_SL-=(signed long)Kibat0[0];
;;;2270   	temp_SL*=(signed long)Kibat1[0];
;;;2271   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2272   	else temp_SL/=1000L;
;;;2273   	bat[0]._Ib=(signed short)temp_SL;
;;;2274   
;;;2275   	temp_SL=(signed long)ad7705_buff_[1];
;;;2276   	temp_SL-=(signed long)Kibat0[1];
;;;2277   	temp_SL*=(signed long)Kibat1[1];
;;;2278   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2279   	else temp_SL/=1000L;
;;;2280   	bat[1]._Ib=(signed short)temp_SL;
;;;2281   	}
;;;2282   */
;;;2283   
;;;2284   
;;;2285   //Токи батарей
;;;2286   if(!mess_find_unvol(MESS2MATEMAT))
001ed0  f04f00dc          MOV      r0,#0xdc
001ed4  f7fffffe          BL       mess_find_unvol
;;;2287   	{
;;;2288   	temp_SL=(signed long)ad7705_buff_[0];
;;;2289   	temp_SL-=(signed long)Kibat0[0];
;;;2290   	temp_SL*=(signed long)Kibat1[0];
;;;2291   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2292   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
001ed8  f2456a13          MOV      r10,#0x5613
001edc  bbe8              CBNZ     r0,|L1.8026|
001ede  f8df9378          LDR      r9,|L1.8792|
001ee2  f8b90000          LDRH     r0,[r9,#0]            ;2288  ; ad7705_buff_
001ee6  f8dfb374          LDR      r11,|L1.8796|
001eea  f8bb1000          LDRH     r1,[r11,#0]           ;2289  ; Kibat0
001eee  eba00001          SUB      r0,r0,r1              ;2289
001ef2  4adb              LDR      r2,|L1.8800|
001ef4  f9b21000          LDRSH    r1,[r2,#0]            ;2290  ; Kibat1
001ef8  fb01f100          MUL      r1,r1,r0              ;2290
001efc  48d9              LDR      r0,|L1.8804|
001efe  f6456338          MOV      r3,#0x5e38            ;2291
001f02  f6456c92          MOV      r12,#0x5e92           ;2291
001f06  8800              LDRH     r0,[r0,#0]            ;2291  ; AUSW_MAIN
001f08  4298              CMP      r0,r3                 ;2291
001f0a  d001              BEQ      |L1.7952|
001f0c  4560              CMP      r0,r12                ;2291
001f0e  d104              BNE      |L1.7962|
                  |L1.7952|
001f10  f44f7e96          MOV      lr,#0x12c             ;2291
001f14  fb91f1fe          SDIV     r1,r1,lr              ;2291
001f18  e00f              B        |L1.7994|
                  |L1.7962|
001f1a  f5a04ea8          SUB      lr,r0,#0x5400
001f1e  f5be7efd          SUBS     lr,lr,#0x1fa
001f22  d003              BEQ      |L1.7980|
001f24  4550              CMP      r0,r10
001f26  d001              BEQ      |L1.7980|
001f28  42b0              CMP      r0,r6
001f2a  d102              BNE      |L1.7986|
                  |L1.7980|
001f2c  fb91f1f5          SDIV     r1,r1,r5
001f30  e003              B        |L1.7994|
                  |L1.7986|
;;;2293   	else temp_SL/=1000L;
001f32  f44f7e7a          MOV      lr,#0x3e8
001f36  fb91f1fe          SDIV     r1,r1,lr
                  |L1.7994|
;;;2294   	#ifdef UKU_TELECORE2015
;;;2295   	temp_SL/=2L;
;;;2296   	//temp_SL=-temp_SL;
;;;2297   	#endif
;;;2298   	//#ifdef UKU_TELECORE2017
;;;2299   	//temp_SL/=-2L;
;;;2300   	//temp_SL=-temp_SL;
;;;2301   	//#endif
;;;2302   	bat[0]._Ib=(signed short)temp_SL;
001f3a  8121              STRH     r1,[r4,#8]
;;;2303   
;;;2304   	temp_SL=(signed long)ad7705_buff_[1];
001f3c  f8b91002          LDRH     r1,[r9,#2]  ; ad7705_buff_
;;;2305   	temp_SL-=(signed long)Kibat0[1];
001f40  f8bb9002          LDRH     r9,[r11,#2]  ; Kibat0
001f44  eba10909          SUB      r9,r1,r9
;;;2306   	temp_SL*=(signed long)Kibat1[1];
001f48  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
001f4c  fb01f109          MUL      r1,r1,r9
;;;2307   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
001f50  4298              CMP      r0,r3
001f52  d001              BEQ      |L1.8024|
001f54  4560              CMP      r0,r12
001f56  d106              BNE      |L1.8038|
                  |L1.8024|
001f58  e000              B        |L1.8028|
                  |L1.8026|
001f5a  e015              B        |L1.8072|
                  |L1.8028|
001f5c  f44f7096          MOV      r0,#0x12c
001f60  fb91f0f0          SDIV     r0,r1,r0
001f64  e00e              B        |L1.8068|
                  |L1.8038|
;;;2308   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
001f66  f5a042aa          SUB      r2,r0,#0x5500
001f6a  3afa              SUBS     r2,r2,#0xfa
001f6c  d003              BEQ      |L1.8054|
001f6e  4550              CMP      r0,r10
001f70  d001              BEQ      |L1.8054|
001f72  42b0              CMP      r0,r6
001f74  d102              BNE      |L1.8060|
                  |L1.8054|
001f76  fb91f0f5          SDIV     r0,r1,r5
001f7a  e003              B        |L1.8068|
                  |L1.8060|
;;;2309   	else temp_SL/=1000L;
001f7c  f44f707a          MOV      r0,#0x3e8
001f80  fb91f0f0          SDIV     r0,r1,r0
                  |L1.8068|
;;;2310   	bat[1]._Ib=(signed short)temp_SL;
001f84  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.8072|
;;;2311   	}
;;;2312   
;;;2313   
;;;2314   
;;;2315   
;;;2316   
;;;2317   //Температуры батарей
;;;2318   
;;;2319   #ifdef UKU_KONTUR
;;;2320   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;2321   else bat[0]._nd=1;
;;;2322   temp_SL=(signed long)adc_buff_[6];
;;;2323   temp_SL*=Ktbat[0];
;;;2324   temp_SL/=20000L;
;;;2325   temp_SL-=273L;
;;;2326   bat[0]._Tb=(signed short)temp_SL;
;;;2327   #else
;;;2328   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
001f88  f9b8000c          LDRSH    r0,[r8,#0xc]  ; adc_buff_
001f8c  f64031b7          MOV      r1,#0xbb7
001f90  4684              MOV      r12,r0
001f92  f2a03021          SUB      r0,r0,#0x321
001f96  2300              MOVS     r3,#0
;;;2329   else bat[0]._nd=1;
001f98  f04f0901          MOV      r9,#1
001f9c  9000              STR      r0,[sp,#0]            ;2328
001f9e  4288              CMP      r0,r1                 ;2328
001fa0  d201              BCS      |L1.8102|
001fa2  7323              STRB     r3,[r4,#0xc]          ;2328
001fa4  e001              B        |L1.8106|
                  |L1.8102|
001fa6  f884900c          STRB     r9,[r4,#0xc]
                  |L1.8106|
;;;2330   temp_SL=(signed long)adc_buff_[6];
;;;2331   temp_SL*=Ktbat[0];
001faa  4aaf              LDR      r2,|L1.8808|
001fac  f9b20000          LDRSH    r0,[r2,#0]  ; Ktbat
001fb0  fb00f00c          MUL      r0,r0,r12
;;;2332   temp_SL/=20000L;
001fb4  f6446e20          MOV      lr,#0x4e20
001fb8  fb90f0fe          SDIV     r0,r0,lr
;;;2333   temp_SL-=273L;
001fbc  f2a01011          SUB      r0,r0,#0x111
;;;2334   bat[0]._Tb=(signed short)temp_SL;
001fc0  8160              STRH     r0,[r4,#0xa]
;;;2335   #endif
;;;2336   
;;;2337   #ifdef UKU_KONTUR
;;;2338   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;2339   else bat[1]._nd=1;
;;;2340   temp_SL=(signed long)adc_buff_[7];
;;;2341   temp_SL*=Ktbat[1];
;;;2342   temp_SL/=20000L;
;;;2343   temp_SL-=273L;
;;;2344   bat[1]._Tb=(signed short)temp_SL;
;;;2345   #else
;;;2346   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
001fc2  f9b8000e          LDRSH    r0,[r8,#0xe]  ; adc_buff_
001fc6  f64031b7          MOV      r1,#0xbb7
001fca  f2a03b21          SUB      r11,r0,#0x321
001fce  458b              CMP      r11,r1
001fd0  d202              BCS      |L1.8152|
001fd2  f8843058          STRB     r3,[r4,#0x58]
001fd6  e001              B        |L1.8156|
                  |L1.8152|
;;;2347   else bat[1]._nd=1;
001fd8  f8849058          STRB     r9,[r4,#0x58]
                  |L1.8156|
;;;2348   temp_SL=(signed long)adc_buff_[7];
;;;2349   temp_SL*=Ktbat[1];
001fdc  f9b21002          LDRSH    r1,[r2,#2]  ; Ktbat
001fe0  4341              MULS     r1,r0,r1
;;;2350   temp_SL/=20000L;
001fe2  f6446020          MOV      r0,#0x4e20
001fe6  fb91f0f0          SDIV     r0,r1,r0
;;;2351   temp_SL-=273L;
001fea  f2a01011          SUB      r0,r0,#0x111
;;;2352   bat[1]._Tb=(signed short)temp_SL;
001fee  4998              LDR      r1,|L1.8784|
001ff0  f8a10056          STRH     r0,[r1,#0x56]
;;;2353   #endif
;;;2354   
;;;2355   #ifdef UKU_6U
;;;2356   
;;;2357   if(NUMMAKB==2)
;;;2358   	{
;;;2359   	if(makb[0]._cnt<5)
;;;2360   		{
;;;2361   		if(makb[0]._T_nd[0]==0)
;;;2362   			{
;;;2363   			bat[0]._Tb=makb[0]._T[0];
;;;2364   			bat[0]._nd=0;
;;;2365   			}
;;;2366   		}
;;;2367   
;;;2368   	if(makb[1]._cnt<5)
;;;2369   		{
;;;2370   		if(makb[1]._T_nd[0]==0)
;;;2371   			{
;;;2372   			bat[1]._Tb=makb[1]._T[0];
;;;2373   			bat[1]._nd=0;
;;;2374   			}
;;;2375   		}
;;;2376   
;;;2377   	}
;;;2378   else if(NUMMAKB==4)
;;;2379   	{
;;;2380   	signed short temp_t;
;;;2381   	temp_t=-20;
;;;2382   	if(makb[0]._cnt<5)
;;;2383   		{
;;;2384   		if(makb[0]._T_nd[0]==0)
;;;2385   			{
;;;2386   			temp_t=makb[0]._T[0];
;;;2387   			bat[0]._nd=0;
;;;2388   			}
;;;2389   		}
;;;2390   	if(makb[1]._cnt<5)
;;;2391   		{
;;;2392   		if(makb[1]._T_nd[0]==0)
;;;2393   			{
;;;2394   			if(temp_t<makb[1]._T[0])
;;;2395   				{
;;;2396   				bat[0]._nd=0;
;;;2397   				temp_t=makb[1]._T[0];
;;;2398   				}
;;;2399   			}
;;;2400   		}
;;;2401   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;2402   
;;;2403    	temp_t=-20;
;;;2404   	if(makb[2]._cnt<5)
;;;2405   		{
;;;2406   		if(makb[2]._T_nd[0]==0)
;;;2407   			{
;;;2408   			temp_t=makb[2]._T[0];
;;;2409   			bat[1]._nd=0;
;;;2410   			}
;;;2411   		}
;;;2412   	if(makb[3]._cnt<5)
;;;2413   		{
;;;2414   		if(makb[3]._T_nd[0]==0)
;;;2415   			{
;;;2416   			if(temp_t<makb[3]._T[0])
;;;2417   				{
;;;2418   				bat[1]._nd=0;
;;;2419   				temp_t=makb[3]._T[0];
;;;2420   				}
;;;2421   			}
;;;2422   		}
;;;2423   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;2424   	}
;;;2425   
;;;2426   #endif
;;;2427   
;;;2428   
;;;2429   //Напряжение нагрузки
;;;2430   temp_SL=(signed long)adc_buff_[2];
001ff4  f9b81004          LDRSH    r1,[r8,#4]  ; adc_buff_
;;;2431   temp_SL*=Kuload;
001ff8  489c              LDR      r0,|L1.8812|
001ffa  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
001ffe  fb01f000          MUL      r0,r1,r0
;;;2432   temp_SL/=2000L;
002002  f44f62fa          MOV      r2,#0x7d0
002006  fb90f0f2          SDIV     r0,r0,r2
;;;2433   load_U=(signed short)temp_SL;
00200a  f8dfe264          LDR      lr,|L1.8816|
00200e  f8ae0000          STRH     r0,[lr,#0]
;;;2434   
;;;2435   #ifdef UKU_220 
;;;2436   //Напряжение нагрузки
;;;2437   temp_SL=(signed long)adc_buff_[2];
;;;2438   temp_SL*=Kuload;
;;;2439   temp_SL/=350L;
;;;2440   load_U=(signed short)temp_SL;
;;;2441   #endif
;;;2442   
;;;2443   #ifdef UKU_220_V2 
;;;2444   //Напряжение нагрузки
;;;2445   temp_SL=(signed long)adc_buff_[2];
;;;2446   temp_SL*=Kuload;
;;;2447   temp_SL/=350L;
;;;2448   load_U=(signed short)temp_SL;
;;;2449   #endif
;;;2450   
;;;2451   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2452   //Напряжение шины
;;;2453   temp_SL=(signed long)adc_buff_[1];
002012  f9b82002          LDRSH    r2,[r8,#2]  ; adc_buff_
;;;2454   temp_SL*=Kuout;
002016  4897              LDR      r0,|L1.8820|
002018  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
00201c  fb02f200          MUL      r2,r2,r0
;;;2455   if(AUSW_MAIN==22010)temp_SL/=400L;
002020  4890              LDR      r0,|L1.8804|
002022  f24554fa          MOV      r4,#0x55fa
002026  f44f75c8          MOV      r5,#0x190
00202a  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
00202c  42a0              CMP      r0,r4
00202e  d102              BNE      |L1.8246|
002030  fb92f2f5          SDIV     r2,r2,r5
002034  e003              B        |L1.8254|
                  |L1.8246|
;;;2456   else temp_SL/=500L;
002036  f44f7bfa          MOV      r11,#0x1f4
00203a  fb92f2fb          SDIV     r2,r2,r11
                  |L1.8254|
;;;2457   out_U=(signed short)temp_SL;
00203e  fa0ffb82          SXTH     r11,r2
002042  4a8d              LDR      r2,|L1.8824|
002044  f8a2b000          STRH     r11,[r2,#0]
;;;2458   load_U=out_U;
002048  f8aeb000          STRH     r11,[lr,#0]
;;;2459   
;;;2460   //Напряжение выпрямителей
;;;2461   temp_SL=(signed long)adc_buff_[2];
;;;2462   temp_SL*=Kubps;
00204c  4a8b              LDR      r2,|L1.8828|
00204e  f9b22000          LDRSH    r2,[r2,#0]  ; Kubps
002052  fb01f102          MUL      r1,r1,r2
;;;2463   if(AUSW_MAIN==22010)temp_SL/=400L;
002056  d102              BNE      |L1.8286|
002058  fb91f1f5          SDIV     r1,r1,r5
00205c  e003              B        |L1.8294|
                  |L1.8286|
;;;2464   else temp_SL/=500L;
00205e  f44f72fa          MOV      r2,#0x1f4
002062  fb91f1f2          SDIV     r1,r1,r2
                  |L1.8294|
;;;2465   bps_U=(signed short)temp_SL;
002066  4d86              LDR      r5,|L1.8832|
002068  b209              SXTH     r1,r1
00206a  8029              STRH     r1,[r5,#0]
;;;2466   
;;;2467   if(bps_U<100)
00206c  2964              CMP      r1,#0x64
00206e  da18              BGE      |L1.8354|
;;;2468   	{
;;;2469   	char i;
;;;2470   	for(i=0;i<NUMIST;i++)
002070  f04f0100          MOV      r1,#0
002074  4a83              LDR      r2,|L1.8836|
002076  f8dfe210          LDR      lr,|L1.8840|
00207a  f9b28000          LDRSH    r8,[r2,#0]
00207e  e00e              B        |L1.8350|
                  |L1.8320|
;;;2471   		{
;;;2472   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002080  ebc102c1          RSB      r2,r1,r1,LSL #3
002084  eb021201          ADD      r2,r2,r1,LSL #4
002088  eb0e0282          ADD      r2,lr,r2,LSL #2
00208c  f9b54000          LDRSH    r4,[r5,#0]  ; bps_U
002090  6a12              LDR      r2,[r2,#0x20]
002092  42a2              CMP      r2,r4
002094  dd00              BLE      |L1.8344|
002096  802a              STRH     r2,[r5,#0]
                  |L1.8344|
002098  f1010101          ADD      r1,r1,#1              ;2470
00209c  b2c9              UXTB     r1,r1                 ;2470
                  |L1.8350|
00209e  4541              CMP      r1,r8                 ;2470
0020a0  dbee              BLT      |L1.8320|
                  |L1.8354|
;;;2473   		}
;;;2474   	}
;;;2475   
;;;2476   //Суммарный ток выпрямителей
;;;2477   temp_SL=0;
0020a2  f04f0500          MOV      r5,#0
;;;2478   for (i=0;i<NUMIST;i++)
0020a6  4629              MOV      r1,r5
0020a8  4a76              LDR      r2,|L1.8836|
0020aa  4c77              LDR      r4,|L1.8840|
0020ac  f9b22000          LDRSH    r2,[r2,#0]            ;2470
0020b0  e00b              B        |L1.8394|
                  |L1.8370|
;;;2479   	{
;;;2480   	temp_SL+=((signed long)bps[i]._Ii);
0020b2  ebc108c1          RSB      r8,r1,r1,LSL #3
0020b6  eb081801          ADD      r8,r8,r1,LSL #4
0020ba  eb040888          ADD      r8,r4,r8,LSL #2
0020be  f8d88024          LDR      r8,[r8,#0x24]
0020c2  4445              ADD      r5,r5,r8
0020c4  f1010101          ADD      r1,r1,#1              ;2478
0020c8  b2c9              UXTB     r1,r1                 ;2478
                  |L1.8394|
0020ca  4291              CMP      r1,r2                 ;2478
0020cc  dbf1              BLT      |L1.8370|
;;;2481   	}
;;;2482   bps_I=(signed short)temp_SL;
0020ce  496f              LDR      r1,|L1.8844|
0020d0  800d              STRH     r5,[r1,#0]
;;;2483   
;;;2484   
;;;2485   #endif
;;;2486   
;;;2487   
;;;2488   #ifdef UKU_KONTUR
;;;2489   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;2490   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;2491   else ND_EXT[0]=1;
;;;2492   temp_SL=(signed long)adc_buff_[5];
;;;2493   temp_SL*=Ktext[0];
;;;2494   temp_SL/=20000L;
;;;2495   temp_SL-=273L;
;;;2496   t_ext[0]=(signed short)temp_SL;
;;;2497   #else 
;;;2498   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;2499   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
0020d2  495d              LDR      r1,|L1.8776|
0020d4  f8df81b8          LDR      r8,|L1.8848|
0020d8  f9b1500a          LDRSH    r5,[r1,#0xa]  ; adc_buff_
0020dc  f64031b7          MOV      r1,#0xbb7
0020e0  f2a53e21          SUB      lr,r5,#0x321
0020e4  458e              CMP      lr,r1
0020e6  d202              BCS      |L1.8430|
0020e8  f8883000          STRB     r3,[r8,#0]
0020ec  e001              B        |L1.8434|
                  |L1.8430|
;;;2500   else ND_EXT[0]=1;
0020ee  f8889000          STRB     r9,[r8,#0]
                  |L1.8434|
;;;2501   temp_SL=(signed long)adc_buff_[5];
;;;2502   temp_SL*=Ktext[0];
0020f2  4968              LDR      r1,|L1.8852|
0020f4  f9b11000          LDRSH    r1,[r1,#0]  ; Ktext
0020f8  434d              MULS     r5,r1,r5
;;;2503   temp_SL/=20000L;
0020fa  f6446e20          MOV      lr,#0x4e20
0020fe  fb95f5fe          SDIV     r5,r5,lr
;;;2504   temp_SL-=273L;
002102  f2a51511          SUB      r5,r5,#0x111
;;;2505   t_ext[0]=(signed short)temp_SL;
002106  f8dfe190          LDR      lr,|L1.8856|
00210a  f8ae5000          STRH     r5,[lr,#0]
;;;2506   /*
;;;2507   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2508   else ND_EXT[1]=1;
;;;2509   temp_SL=(signed long)adc_buff_[6];
;;;2510   temp_SL*=Ktext[1];
;;;2511   temp_SL/=20000L;
;;;2512   temp_SL-=273L;
;;;2513   t_ext[1]=(signed short)temp_SL;	*/
;;;2514   #endif
;;;2515   
;;;2516   #ifdef UKU_220
;;;2517   
;;;2518   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2519   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;2520   else ND_EXT[1]=1;
;;;2521   temp_SL=(signed long)adc_buff_[3];
;;;2522   temp_SL*=Ktext[1];
;;;2523   temp_SL/=20000L;
;;;2524   temp_SL-=273L;
;;;2525   t_ext[1]=(signed short)temp_SL;
;;;2526   
;;;2527   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2528   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;2529   else ND_EXT[2]=1;
;;;2530   temp_SL=(signed long)adc_buff_[10];
;;;2531   temp_SL*=Ktext[2];
;;;2532   temp_SL/=20000L;
;;;2533   temp_SL-=273L;
;;;2534   t_ext[2]=(signed short)temp_SL;
;;;2535   
;;;2536   #else
;;;2537   
;;;2538   
;;;2539   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2540   
;;;2541   //Внешний датчик температуры 
;;;2542   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
00210e  9d00              LDR      r5,[sp,#0]
002110  f6403eb7          MOV      lr,#0xbb7
002114  4575              CMP      r5,lr
002116  d202              BCS      |L1.8478|
002118  f8883000          STRB     r3,[r8,#0]
00211c  e001              B        |L1.8482|
                  |L1.8478|
;;;2543   else ND_EXT[0]=1;
00211e  f8889000          STRB     r9,[r8,#0]
                  |L1.8482|
;;;2544   temp_SL=(signed long)adc_buff_[6];
;;;2545   temp_SL*=Ktext[0];
002122  fb01f10c          MUL      r1,r1,r12
;;;2546   temp_SL/=20000L;
002126  f6446520          MOV      r5,#0x4e20
00212a  fb91f1f5          SDIV     r1,r1,r5
;;;2547   temp_SL-=273L;
00212e  f2a11111          SUB      r1,r1,#0x111
;;;2548   t_ext[0]=(signed short)temp_SL;
002132  4d59              LDR      r5,|L1.8856|
002134  8029              STRH     r1,[r5,#0]
;;;2549   
;;;2550   #else
;;;2551   
;;;2552   
;;;2553   
;;;2554   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2555   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2556   else ND_EXT[1]=1;
;;;2557   temp_SL=(signed long)adc_buff_[6];
;;;2558   temp_SL*=Ktext[1];
;;;2559   temp_SL/=20000L;
;;;2560   temp_SL-=273L;
;;;2561   t_ext[1]=(signed short)temp_SL;
;;;2562   
;;;2563   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2564   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;2565   else ND_EXT[2]=1;
;;;2566   temp_SL=(signed long)adc_buff_[3];
;;;2567   temp_SL*=Ktext[2];
;;;2568   temp_SL/=20000L;
;;;2569   temp_SL-=273L;
;;;2570   t_ext[2]=(signed short)temp_SL;
;;;2571   
;;;2572   #endif
;;;2573   #endif
;;;2574   
;;;2575   #ifdef UKU_220_V2
;;;2576   
;;;2577   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2578   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;2579   else ND_EXT[1]=1;
;;;2580   temp_SL=(signed long)adc_buff_[3];
;;;2581   temp_SL*=Ktext[1];
;;;2582   temp_SL/=20000L;
;;;2583   temp_SL-=273L;
;;;2584   t_ext[1]=(signed short)temp_SL;
;;;2585   
;;;2586   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2587   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;2588   else ND_EXT[2]=1;
;;;2589   temp_SL=(signed long)adc_buff_[10];
;;;2590   temp_SL*=Ktext[2];
;;;2591   temp_SL/=20000L;
;;;2592   temp_SL-=273L;
;;;2593   t_ext[2]=(signed short)temp_SL;
;;;2594   
;;;2595   #else
;;;2596   
;;;2597   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2598   //Ток батареи
;;;2599   if(bps[8]._device==dIBAT_METR)
002136  f89412e0          LDRB     r1,[r4,#0x2e0]  ; bps
;;;2600   	{
;;;2601   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;2602   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;2603   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;2604   
;;;2605   	if(!bIBAT_SMKLBR)
;;;2606   		{
;;;2607   		signed long temp_SL;
;;;2608   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;2609   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;2610   		temp_SL*=(signed long)Kibat1[0];
;;;2611   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;2612   	
;;;2613   		Ib_ips_termokompensat =(signed short)temp_SL;
00213a  f8dfc160          LDR      r12,|L1.8860|
00213e  2909              CMP      r1,#9                 ;2599
002140  d13f              BNE      |L1.8642|
002142  f89412e6          LDRB     r1,[r4,#0x2e6]        ;2601  ; bps
002146  f89452e7          LDRB     r5,[r4,#0x2e7]        ;2601  ; bps
00214a  f8dfe154          LDR      lr,|L1.8864|
00214e  eb012105          ADD      r1,r1,r5,LSL #8       ;2601
002152  f8ce1000          STR      r1,[lr,#0]            ;2601  ; ibat_metr_buff_
002156  f89452e8          LDRB     r5,[r4,#0x2e8]        ;2602  ; bps
00215a  f89492e9          LDRB     r9,[r4,#0x2e9]        ;2602  ; bps
00215e  eb052509          ADD      r5,r5,r9,LSL #8       ;2602
002162  f8ce5004          STR      r5,[lr,#4]            ;2602  ; ibat_metr_buff_
002166  f89492ea          LDRB     r9,[r4,#0x2ea]        ;2603  ; bps
00216a  f894e2eb          LDRB     lr,[r4,#0x2eb]        ;2603  ; bps
00216e  eb09290e          ADD      r9,r9,lr,LSL #8       ;2603
002172  f8dfe130          LDR      lr,|L1.8868|
002176  fa0ff989          SXTH     r9,r9                 ;2603
00217a  f8ae9000          STRH     r9,[lr,#0]            ;2603
00217e  f1b90f00          CMP      r9,#0                 ;2605
002182  d11e              BNE      |L1.8642|
002184  eba10505          SUB      r5,r1,r5              ;2609
002188  4935              LDR      r1,|L1.8800|
00218a  f9b11000          LDRSH    r1,[r1,#0]            ;2610  ; Kibat1
00218e  fb01f105          MUL      r1,r1,r5              ;2610
002192  f5a045aa          SUB      r5,r0,#0x5500         ;2611
002196  3dfa              SUBS     r5,r5,#0xfa           ;2611
002198  d00d              BEQ      |L1.8630|
00219a  1e6d              SUBS     r5,r5,#1              ;2611
00219c  d00b              BEQ      |L1.8630|
00219e  4550              CMP      r0,r10                ;2611
0021a0  d009              BEQ      |L1.8630|
0021a2  42b0              CMP      r0,r6                 ;2611
0021a4  d007              BEQ      |L1.8630|
0021a6  3d34              SUBS     r5,r5,#0x34           ;2611
0021a8  d005              BEQ      |L1.8630|
0021aa  3528              ADDS     r5,r5,#0x28           ;2611
0021ac  d003              BEQ      |L1.8630|
0021ae  3d14              SUBS     r5,r5,#0x14           ;2611
0021b0  d001              BEQ      |L1.8630|
0021b2  1e6d              SUBS     r5,r5,#1              ;2611
0021b4  d103              BNE      |L1.8638|
                  |L1.8630|
0021b6  f44f65fa          MOV      r5,#0x7d0             ;2611
0021ba  fb91f1f5          SDIV     r1,r1,r5              ;2611
                  |L1.8638|
0021be  f8ac1000          STRH     r1,[r12,#0]
                  |L1.8642|
;;;2614   		}
;;;2615   	}
;;;2616   
;;;2617   bat[0]._Ub=load_U;
0021c2  4d23              LDR      r5,|L1.8784|
0021c4  f8a5b002          STRH     r11,[r5,#2]
;;;2618   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
0021c8  f5a041ac          SUB      r1,r0,#0x5600
0021cc  3902              SUBS     r1,#2
0021ce  d103              BNE      |L1.8664|
0021d0  8928              LDRH     r0,[r5,#8]  ; bat
0021d2  f8ac0000          STRH     r0,[r12,#0]
0021d6  e002              B        |L1.8670|
                  |L1.8664|
;;;2619   else bat[0]._Ib=Ib_ips_termokompensat;
0021d8  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
0021dc  8128              STRH     r0,[r5,#8]
                  |L1.8670|
;;;2620   
;;;2621   #endif
;;;2622   #endif
;;;2623   
;;;2624   
;;;2625   #ifdef UKU_TELECORE2015
;;;2626   
;;;2627   //Внешний датчик температуры №1
;;;2628   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;2629   else ND_EXT[0]=1;
;;;2630   temp_SL=(signed long)adc_buff_[7];
;;;2631   temp_SL*=Ktext[0];
;;;2632   temp_SL/=20000L;
;;;2633   temp_SL-=273L;
;;;2634   t_ext[0]=(signed short)temp_SL;
;;;2635   
;;;2636   
;;;2637   //Внешний датчик температуры №2
;;;2638   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2639   else ND_EXT[1]=1;
;;;2640   temp_SL=(signed long)adc_buff_[6];
;;;2641   temp_SL*=Ktext[1];
;;;2642   temp_SL/=20000L;
;;;2643   temp_SL-=273L;
;;;2644   t_ext[1]=(signed short)temp_SL;
;;;2645   
;;;2646   #endif
;;;2647   
;;;2648   #ifdef UKU_TELECORE2017
;;;2649   
;;;2650   //Внешний датчик температуры №1
;;;2651   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;2652   else ND_EXT[0]=1;
;;;2653   temp_SL=(signed long)adc_buff_[7];
;;;2654   temp_SL*=Ktext[0];
;;;2655   temp_SL/=20000L;
;;;2656   temp_SL-=273L;
;;;2657   t_ext[0]=(signed short)temp_SL;
;;;2658   
;;;2659   
;;;2660   //Внешний датчик температуры №2
;;;2661   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2662   else ND_EXT[1]=1;
;;;2663   temp_SL=(signed long)adc_buff_[6];
;;;2664   temp_SL*=Ktext[1];
;;;2665   temp_SL/=20000L;
;;;2666   temp_SL-=273L;
;;;2667   t_ext[1]=(signed short)temp_SL;
;;;2668   
;;;2669   #endif
;;;2670   
;;;2671   //напряжение ввода
;;;2672   temp_SL=(signed long)adc_buff_ext_[0];
0021de  f8df90c8          LDR      r9,|L1.8872|
0021e2  f8b91000          LDRH     r1,[r9,#0]  ; adc_buff_ext_
;;;2673   temp_SL*=Kunet_ext[0];
0021e6  f8dfa0c4          LDR      r10,|L1.8876|
0021ea  f9ba0000          LDRSH    r0,[r10,#0]  ; Kunet_ext
0021ee  4348              MULS     r0,r1,r0
;;;2674   temp_SL/=4000L;
0021f0  f44f667a          MOV      r6,#0xfa0
0021f4  fb90f0f6          SDIV     r0,r0,r6
;;;2675   Uvv[0]=(signed short)temp_SL;
0021f8  492d              LDR      r1,|L1.8880|
0021fa  b280              UXTH     r0,r0
0021fc  8008              STRH     r0,[r1,#0]
;;;2676   if(Uvv[0]<100) Uvv0=Uvv[0];
0021fe  f8dfe0b4          LDR      lr,|L1.8884|
002202  2864              CMP      r0,#0x64
002204  d202              BCS      |L1.8716|
002206  f8ae0000          STRH     r0,[lr,#0]
00220a  e003              B        |L1.8724|
                  |L1.8716|
;;;2677   else Uvv0=net_U;
00220c  480b              LDR      r0,|L1.8764|
00220e  8800              LDRH     r0,[r0,#0]  ; net_U
002210  f8ae0000          STRH     r0,[lr,#0]
                  |L1.8724|
;;;2678   
;;;2679   //напряжение пэс
;;;2680   temp_SL=(signed long)adc_buff_ext_[1];
002214  f8b99002          LDRH     r9,[r9,#2]  ; adc_buff_ext_
;;;2681   temp_SL*=Kunet_ext[1];
002218  f9ba0002          LDRSH    r0,[r10,#2]  ; Kunet_ext
00221c  fb00f009          MUL      r0,r0,r9
;;;2682   temp_SL/=4000L;
002220  fb90f0f6          SDIV     r0,r0,r6
;;;2683   Uvv[1]=(signed short)temp_SL;
002224  8048              STRH     r0,[r1,#2]
;;;2684   
;;;2685   
;;;2686   //напряжение ввода трехфазное
;;;2687   temp_SL=(signed long)eb2_data_short[0];
002226  4924              LDR      r1,|L1.8888|
002228  f9b10000          LDRSH    r0,[r1,#0]  ; eb2_data_short
;;;2688   temp_SL*=Kvv_eb2[0];
00222c  4e23              LDR      r6,|L1.8892|
00222e  f9b69000          LDRSH    r9,[r6,#0]  ; Kvv_eb2
002232  e045              B        |L1.8896|
                  |L1.8756|
                          DCD      Kunet
                  |L1.8760|
                          DCD      ||area_number.25||
                  |L1.8764|
                          DCD      net_U
                  |L1.8768|
                          DCD      net_F
                  |L1.8772|
                          DCD      net_F3
                  |L1.8776|
                          DCD      ||.bss||+0x40c
                  |L1.8780|
                          DCD      Kubat
                  |L1.8784|
                          DCD      bat
                  |L1.8788|
                          DCD      Kubatm
                  |L1.8792|
                          DCD      ad7705_buff_
                  |L1.8796|
                          DCD      Kibat0
                  |L1.8800|
                          DCD      Kibat1
                  |L1.8804|
                          DCD      AUSW_MAIN
                  |L1.8808|
                          DCD      Ktbat
                  |L1.8812|
                          DCD      Kuload
                  |L1.8816|
                          DCD      load_U
                  |L1.8820|
                          DCD      Kuout
                  |L1.8824|
                          DCD      out_U
                  |L1.8828|
                          DCD      Kubps
                  |L1.8832|
                          DCD      bps_U
                  |L1.8836|
                          DCD      NUMIST
                  |L1.8840|
                          DCD      bps
                  |L1.8844|
                          DCD      bps_I
                  |L1.8848|
                          DCD      ND_EXT
                  |L1.8852|
                          DCD      Ktext
                  |L1.8856|
                          DCD      t_ext
                  |L1.8860|
                          DCD      Ib_ips_termokompensat
                  |L1.8864|
                          DCD      ibat_metr_buff_
                  |L1.8868|
                          DCD      bIBAT_SMKLBR
                  |L1.8872|
                          DCD      adc_buff_ext_
                  |L1.8876|
                          DCD      Kunet_ext
                  |L1.8880|
                          DCD      Uvv
                  |L1.8884|
                          DCD      Uvv0
                  |L1.8888|
                          DCD      eb2_data_short
                  |L1.8892|
                          DCD      Kvv_eb2
                  |L1.8896|
0022c0  fb09f900          MUL      r9,r9,r0
;;;2689   temp_SL/=6000L;
0022c4  f2417070          MOV      r0,#0x1770
0022c8  fb99faf0          SDIV     r10,r9,r0
;;;2690   Uvv_eb2[0]=(signed short)temp_SL;
0022cc  f8df9438          LDR      r9,|L1.9992|
0022d0  f8a9a000          STRH     r10,[r9,#0]
;;;2691   
;;;2692   temp_SL=(signed long)eb2_data_short[1];
0022d4  f9b1e002          LDRSH    lr,[r1,#2]  ; eb2_data_short
;;;2693   temp_SL*=Kvv_eb2[1];
0022d8  f9b6a002          LDRSH    r10,[r6,#2]  ; Kvv_eb2
0022dc  fb0afa0e          MUL      r10,r10,lr
;;;2694   temp_SL/=6000L;
0022e0  fb9afaf0          SDIV     r10,r10,r0
;;;2695   Uvv_eb2[1]=(signed short)temp_SL;
0022e4  f8a9a002          STRH     r10,[r9,#2]
;;;2696   
;;;2697   temp_SL=(signed long)eb2_data_short[2];
0022e8  f9b1a004          LDRSH    r10,[r1,#4]  ; eb2_data_short
;;;2698   temp_SL*=Kvv_eb2[2];
0022ec  f9b66004          LDRSH    r6,[r6,#4]  ; Kvv_eb2
0022f0  fb06f60a          MUL      r6,r6,r10
;;;2699   temp_SL/=6000L;
0022f4  fb96f6f0          SDIV     r6,r6,r0
;;;2700   Uvv_eb2[2]=(signed short)temp_SL;
0022f8  f8a96004          STRH     r6,[r9,#4]
;;;2701   
;;;2702   //напряжение пэс трехфазное
;;;2703   temp_SL=(signed long)eb2_data_short[3];
0022fc  f9b1a006          LDRSH    r10,[r1,#6]  ; eb2_data_short
;;;2704   temp_SL*=Kpes_eb2[0];
002300  f8df9408          LDR      r9,|L1.9996|
002304  f9b96000          LDRSH    r6,[r9,#0]  ; Kpes_eb2
002308  fb06f60a          MUL      r6,r6,r10
;;;2705   temp_SL/=6000L;
00230c  fb96faf0          SDIV     r10,r6,r0
;;;2706   Upes_eb2[0]=(signed short)temp_SL;
002310  4eff              LDR      r6,|L1.10000|
002312  f8a6a000          STRH     r10,[r6,#0]
;;;2707   
;;;2708   temp_SL=(signed long)eb2_data_short[4];
002316  f9b1e008          LDRSH    lr,[r1,#8]  ; eb2_data_short
;;;2709   temp_SL*=Kpes_eb2[1];
00231a  f9b9a002          LDRSH    r10,[r9,#2]  ; Kpes_eb2
00231e  fb0afa0e          MUL      r10,r10,lr
;;;2710   temp_SL/=6000L;
002322  fb9afaf0          SDIV     r10,r10,r0
;;;2711   Upes_eb2[1]=(signed short)temp_SL;
002326  f8a6a002          STRH     r10,[r6,#2]
;;;2712   
;;;2713   temp_SL=(signed long)eb2_data_short[5];
00232a  f9b1100a          LDRSH    r1,[r1,#0xa]  ; eb2_data_short
;;;2714   temp_SL*=Kpes_eb2[2];
00232e  f9b99004          LDRSH    r9,[r9,#4]  ; Kpes_eb2
002332  fb09f901          MUL      r9,r9,r1
;;;2715   temp_SL/=6000L;
002336  fb99f0f0          SDIV     r0,r9,r0
;;;2716   Upes_eb2[2]=(signed short)temp_SL;
00233a  80b0              STRH     r0,[r6,#4]
;;;2717   
;;;2718   //Вычисление температуры шкафа
;;;2719   
;;;2720   ibt._T[0]=t_ext[1]+273;
00233c  48f5              LDR      r0,|L1.10004|
00233e  4ef6              LDR      r6,|L1.10008|
002340  8841              LDRH     r1,[r0,#2]  ; t_ext
002342  f2011111          ADD      r1,r1,#0x111
002346  fa0ff981          SXTH     r9,r1
00234a  f8a69000          STRH     r9,[r6,#0]
;;;2721   ibt._T[1]=t_ext[2]+273;
00234e  8880              LDRH     r0,[r0,#4]  ; t_ext
002350  f2001011          ADD      r0,r0,#0x111
002354  fa0ffa80          SXTH     r10,r0
002358  f8a6a002          STRH     r10,[r6,#2]
;;;2722   
;;;2723   ibt._nd[0]=ND_EXT[1];
00235c  f8981001          LDRB     r1,[r8,#1]  ; ND_EXT
002360  7231              STRB     r1,[r6,#8]
;;;2724   ibt._nd[1]=ND_EXT[2];
002362  f8980002          LDRB     r0,[r8,#2]  ; ND_EXT
002366  7270              STRB     r0,[r6,#9]
;;;2725   
;;;2726   #ifndef UKU_TELECORE2015
;;;2727   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;2728   	{
;;;2729   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
002368  4eec              LDR      r6,|L1.10012|
00236a  b901              CBNZ     r1,|L1.9070|
00236c  b110              CBZ      r0,|L1.9076|
                  |L1.9070|
;;;2730   	}
;;;2731   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
00236e  2901              CMP      r1,#1
002370  d00a              BEQ      |L1.9096|
002372  e00a              B        |L1.9098|
                  |L1.9076|
002374  eb09000a          ADD      r0,r9,r10             ;2729
002378  eb0070d0          ADD      r0,r0,r0,LSR #31      ;2729
00237c  f46f7188          MVN      r1,#0x110             ;2729
002380  eb010060          ADD      r0,r1,r0,ASR #1       ;2729
002384  8030              STRH     r0,[r6,#0]            ;2729
002386  e01e              B        |L1.9158|
                  |L1.9096|
002388  b108              CBZ      r0,|L1.9102|
                  |L1.9098|
;;;2732   	{
;;;2733   	t_box=ibt._T[1]-273;
;;;2734   	}
;;;2735   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
00238a  b129              CBZ      r1,|L1.9112|
00238c  e006              B        |L1.9116|
                  |L1.9102|
00238e  f2aa1a11          SUB      r10,r10,#0x111        ;2733
002392  f8a6a000          STRH     r10,[r6,#0]           ;2733
002396  e016              B        |L1.9158|
                  |L1.9112|
002398  2801              CMP      r0,#1
00239a  d002              BEQ      |L1.9122|
                  |L1.9116|
;;;2736   	{
;;;2737   	t_box=ibt._T[0]-273;
;;;2738   	}
;;;2739   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
00239c  2901              CMP      r1,#1
00239e  d005              BEQ      |L1.9132|
0023a0  e011              B        |L1.9158|
                  |L1.9122|
0023a2  f2a91911          SUB      r9,r9,#0x111          ;2737
0023a6  f8a69000          STRH     r9,[r6,#0]            ;2737
0023aa  e00c              B        |L1.9158|
                  |L1.9132|
0023ac  2801              CMP      r0,#1
0023ae  d10a              BNE      |L1.9158|
;;;2740   	{
;;;2741   	if(t_ext_can_nd<5)t_box= t_ext_can;
0023b0  48db              LDR      r0,|L1.10016|
0023b2  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
0023b4  2805              CMP      r0,#5
0023b6  d203              BCS      |L1.9152|
0023b8  48da              LDR      r0,|L1.10020|
0023ba  8800              LDRH     r0,[r0,#0]  ; t_ext_can
0023bc  8030              STRH     r0,[r6,#0]
0023be  e002              B        |L1.9158|
                  |L1.9152|
;;;2742   	else t_box=20;
0023c0  f04f0014          MOV      r0,#0x14
0023c4  8030              STRH     r0,[r6,#0]
                  |L1.9158|
;;;2743   	}
;;;2744   #endif
;;;2745   /*
;;;2746   //Вычисление температуры шкафа
;;;2747   
;;;2748   ibt._T[0]=bat[0]._Tb+273;
;;;2749   ibt._T[1]=bat[1]._Tb+273;
;;;2750   ibt._T[2]=t_ext[1]+273;
;;;2751   ibt._T[3]=t_ext[2]+273;
;;;2752   
;;;2753   ibt._nd[0]=bat[0]._nd;
;;;2754   ibt._nd[1]=bat[1]._nd;
;;;2755   ibt._nd[2]=ND_EXT[1];
;;;2756   ibt._nd[3]=ND_EXT[2];
;;;2757   
;;;2758   ibt._avg1=0;
;;;2759   ibt._avg_cnt=4;
;;;2760   
;;;2761   if(ibt._nd[0]==0)
;;;2762   	{
;;;2763   	ibt._avg1+=ibt._T[0];
;;;2764   	}
;;;2765   else 
;;;2766   	{
;;;2767   	ibt._avg_cnt--;
;;;2768   	}
;;;2769   
;;;2770   if(ibt._nd[1]==0)
;;;2771   	{
;;;2772   	ibt._avg1+=ibt._T[1];
;;;2773   	}
;;;2774   else 
;;;2775   	{
;;;2776   	ibt._avg_cnt--;
;;;2777   	}
;;;2778   
;;;2779   if(ibt._nd[2]==0)
;;;2780   	{
;;;2781   	ibt._avg1+=ibt._T[2];
;;;2782   	}
;;;2783   else 
;;;2784   	{
;;;2785   	ibt._avg_cnt--;
;;;2786   	}
;;;2787   
;;;2788   if(ibt._nd[3]==0)
;;;2789   	{
;;;2790   	ibt._avg1+=ibt._T[3];
;;;2791   	}
;;;2792   else 
;;;2793   	{
;;;2794   	ibt._avg_cnt--;
;;;2795   	}
;;;2796   
;;;2797   if(ibt._avg_cnt==0)
;;;2798   	{
;;;2799   	}
;;;2800   else
;;;2801   	{
;;;2802   	ibt._avg1/=ibt._avg_cnt;
;;;2803   	}
;;;2804   
;;;2805   
;;;2806   if(ibt._nd[0]!=0)
;;;2807   	{
;;;2808   	ibt._T_dispers[0]=0;
;;;2809   	}
;;;2810   else 
;;;2811   	{
;;;2812   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;2813   	}
;;;2814   
;;;2815   if(ibt._nd[1]!=0)
;;;2816   	{
;;;2817   	ibt._T_dispers[1]=0;
;;;2818   	}
;;;2819   else 
;;;2820   	{
;;;2821   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;2822   	}
;;;2823   
;;;2824   if(ibt._nd[2]!=0)
;;;2825   	{
;;;2826   	ibt._T_dispers[2]=0;
;;;2827   	}
;;;2828   else 
;;;2829   	{
;;;2830   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;2831   	}
;;;2832   
;;;2833   if(ibt._nd[3]!=0)
;;;2834   	{
;;;2835   	ibt._T_dispers[3]=0;
;;;2836   	}
;;;2837   else 
;;;2838   	{
;;;2839   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;2840   	}
;;;2841   
;;;2842   if(	ibt._nd[0]&&
;;;2843   	ibt._nd[1]&&
;;;2844   	ibt._nd[2]&&
;;;2845   	ibt._nd[3]
;;;2846   	)
;;;2847   	{
;;;2848   	t_box=(bps[0]._Ti);
;;;2849   	}
;;;2850   
;;;2851   else if(	ibt._nd[0]||
;;;2852   	ibt._nd[1]||
;;;2853   	ibt._nd[2]||
;;;2854   	ibt._nd[3]
;;;2855   	)
;;;2856   	{
;;;2857   	t_box=(ibt._avg1-273);
;;;2858   	}
;;;2859   else 
;;;2860   	{
;;;2861   	ibt._max_dispers_num=0;
;;;2862   	ibt._max_dispers=ibt._T_dispers[0];
;;;2863   
;;;2864   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;2865   		{
;;;2866   		ibt._max_dispers_num=1;
;;;2867   		ibt._max_dispers=ibt._T_dispers[1];
;;;2868   		}
;;;2869   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;2870   		{
;;;2871   		ibt._max_dispers_num=2;
;;;2872   		ibt._max_dispers=ibt._T_dispers[2];
;;;2873   		}
;;;2874   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;2875   		{
;;;2876   		ibt._max_dispers_num=3;
;;;2877   		ibt._max_dispers=ibt._T_dispers[3];
;;;2878   		}
;;;2879   
;;;2880   	ibt._avg2=0;
;;;2881   
;;;2882   	if(ibt._max_dispers_num!=0)
;;;2883   		{
;;;2884   		ibt._avg2+=ibt._T[0];
;;;2885   		}
;;;2886   	if(ibt._max_dispers_num!=1)
;;;2887   		{
;;;2888   		ibt._avg2+=ibt._T[1];
;;;2889   		}
;;;2890   	if(ibt._max_dispers_num!=2)
;;;2891   		{
;;;2892   		ibt._avg2+=ibt._T[2];
;;;2893   		}
;;;2894   	if(ibt._max_dispers_num!=3)
;;;2895   		{
;;;2896   		ibt._avg2+=ibt._T[3];
;;;2897   		}
;;;2898   
;;;2899   	t_box=(ibt._avg2/3)-273;
;;;2900   
;;;2901   	}*/
;;;2902   
;;;2903   
;;;2904   //*********************************************
;;;2905   
;;;2906   #ifndef TELECORE
;;;2907   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
0023c6  48d8              LDR      r0,|L1.10024|
0023c8  7801              LDRB     r1,[r0,#0]  ; BAT_IS_ON
0023ca  2955              CMP      r1,#0x55
0023cc  d105              BNE      |L1.9178|
0023ce  f1bb0fc8          CMP      r11,#0xc8
0023d2  dd02              BLE      |L1.9178|
0023d4  8929              LDRH     r1,[r5,#8]  ; bat
0023d6  f8a71042          STRH     r1,[r7,#0x42]
                  |L1.9178|
;;;2908   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
0023da  7840              LDRB     r0,[r0,#1]  ; BAT_IS_ON
0023dc  2855              CMP      r0,#0x55
0023de  d10b              BNE      |L1.9208|
0023e0  f9b5004e          LDRSH    r0,[r5,#0x4e]  ; bat
0023e4  28c8              CMP      r0,#0xc8
0023e6  dd07              BLE      |L1.9208|
0023e8  f9b50054          LDRSH    r0,[r5,#0x54]  ; bat
0023ec  f9b51008          LDRSH    r1,[r5,#8]  ; bat
0023f0  4288              CMP      r0,r1
0023f2  dd01              BLE      |L1.9208|
0023f4  f8a70042          STRH     r0,[r7,#0x42]
                  |L1.9208|
;;;2909   #endif
;;;2910   
;;;2911   #ifdef TELECORE
;;;2912   Ibmax=0;
;;;2913   /*
;;;2914   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;2915   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;2916   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;2917   */
;;;2918   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;2919   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;2920   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;2921   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;2922   #endif
;;;2923   //Ibmax=bat[0]._Ib;
;;;2924   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;2925   
;;;2926   #ifdef UKU_TELECORE2017
;;;2927   Ibmax=0;
;;;2928   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;2929   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;2930   #endif
;;;2931   
;;;2932   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2933   Ibmax=Ib_ips_termokompensat;
0023f8  f8bc0000          LDRH     r0,[r12,#0]  ; Ib_ips_termokompensat
0023fc  f8a70042          STRH     r0,[r7,#0x42]
;;;2934   #endif
;;;2935   for(i=0;i<NUMIST;i++)
002400  f04f0100          MOV      r1,#0
002404  e02f              B        |L1.9318|
                  |L1.9222|
;;;2936   	{
;;;2937   	if(bps[i]._cnt<25)
002406  ebc100c1          RSB      r0,r1,r1,LSL #3
00240a  eb001001          ADD      r0,r0,r1,LSL #4
00240e  eb040080          ADD      r0,r4,r0,LSL #2
002412  78c6              LDRB     r6,[r0,#3]
002414  2e19              CMP      r6,#0x19
002416  d21c              BCS      |L1.9298|
;;;2938        	{
;;;2939        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
002418  7986              LDRB     r6,[r0,#6]
00241a  79c7              LDRB     r7,[r0,#7]
00241c  eb062607          ADD      r6,r6,r7,LSL #8
002420  6246              STR      r6,[r0,#0x24]
;;;2940        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
002422  7a06              LDRB     r6,[r0,#8]
002424  7a47              LDRB     r7,[r0,#9]
002426  eb062607          ADD      r6,r6,r7,LSL #8
00242a  6206              STR      r6,[r0,#0x20]
;;;2941        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
00242c  7a86              LDRB     r6,[r0,#0xa]
00242e  7ac7              LDRB     r7,[r0,#0xb]
002430  eb062607          ADD      r6,r6,r7,LSL #8
002434  61c6              STR      r6,[r0,#0x1c]
;;;2942        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
002436  7b06              LDRB     r6,[r0,#0xc]
002438  6286              STR      r6,[r0,#0x28]
;;;2943        	bps[i]._adr_ee=bps[i]._buff[7];
00243a  7b46              LDRB     r6,[r0,#0xd]
00243c  f8806052          STRB     r6,[r0,#0x52]
;;;2944        	bps[i]._flags_tm=bps[i]._buff[8];
002440  7b86              LDRB     r6,[r0,#0xe]
002442  f8806042          STRB     r6,[r0,#0x42]
;;;2945   	     bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
002446  7c06              LDRB     r6,[r0,#0x10]
002448  7c47              LDRB     r7,[r0,#0x11]
00244a  eb062607          ADD      r6,r6,r7,LSL #8
00244e  64c6              STR      r6,[r0,#0x4c]
002450  e006              B        |L1.9312|
                  |L1.9298|
;;;2946        	} 
;;;2947   	else 
;;;2948        	{
;;;2949        	bps[i]._Uii=0; 
002452  61c3              STR      r3,[r0,#0x1c]
;;;2950        	bps[i]._Ii=0;
002454  6243              STR      r3,[r0,#0x24]
;;;2951        	bps[i]._Uin=0;
002456  6203              STR      r3,[r0,#0x20]
;;;2952        	bps[i]._Ti=0;
002458  6283              STR      r3,[r0,#0x28]
;;;2953        	bps[i]._flags_tm=0; 
00245a  f8803042          STRB     r3,[r0,#0x42]
;;;2954   	     bps[i]._rotor=0;    
00245e  64c3              STR      r3,[r0,#0x4c]
                  |L1.9312|
002460  f1010101          ADD      r1,r1,#1              ;2935
002464  b2c9              UXTB     r1,r1                 ;2935
                  |L1.9318|
002466  4291              CMP      r1,r2                 ;2935
002468  dbcd              BLT      |L1.9222|
;;;2955        	}
;;;2956        
;;;2957        }
;;;2958   
;;;2959   load_I=0;
00246a  4eb0              LDR      r6,|L1.10028|
;;;2960   #ifdef TELECORE
;;;2961   
;;;2962   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;2963   	{
;;;2964   	load_I-=lakb[i]._ch_curr/10;
;;;2965   	}*/
;;;2966   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;2967   #elif UKU_TELECORE2017
;;;2968   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;2969   #else
;;;2970   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
00246c  f9b51008          LDRSH    r1,[r5,#8]  ; bat
002470  f04f000a          MOV      r0,#0xa
002474  fb91f1f0          SDIV     r1,r1,r0
002478  f9b55054          LDRSH    r5,[r5,#0x54]  ; bat
00247c  fb95f0f0          SDIV     r0,r5,r0
002480  4408              ADD      r0,r0,r1
002482  f1c00000          RSB      r0,r0,#0
002486  b207              SXTH     r7,r0
002488  8037              STRH     r7,[r6,#0]
;;;2971   #endif
;;;2972   Isumm=0;
00248a  4da9              LDR      r5,|L1.10032|
00248c  802b              STRH     r3,[r5,#0]
;;;2973   
;;;2974   for(i=0;i<NUMIST;i++)
00248e  f04f0000          MOV      r0,#0
002492  e012              B        |L1.9402|
                  |L1.9364|
;;;2975        {
;;;2976        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
002494  ebc001c0          RSB      r1,r0,r0,LSL #3
002498  eb011100          ADD      r1,r1,r0,LSL #4
00249c  eb040181          ADD      r1,r4,r1,LSL #2
0024a0  f891c003          LDRB     r12,[r1,#3]
0024a4  f1bc0f05          CMP      r12,#5
0024a8  d204              BCS      |L1.9396|
0024aa  6a49              LDR      r1,[r1,#0x24]
0024ac  f8b5c000          LDRH     r12,[r5,#0]  ; Isumm
0024b0  4461              ADD      r1,r1,r12
0024b2  8029              STRH     r1,[r5,#0]
                  |L1.9396|
0024b4  f1000001          ADD      r0,r0,#1              ;2974
0024b8  b2c0              UXTB     r0,r0                 ;2974
                  |L1.9402|
0024ba  4290              CMP      r0,r2                 ;2974
0024bc  dbea              BLT      |L1.9364|
;;;2977        }  
;;;2978        
;;;2979   load_I=load_I+Isumm;
0024be  8828              LDRH     r0,[r5,#0]  ; Isumm
0024c0  4438              ADD      r0,r0,r7
0024c2  b200              SXTH     r0,r0
0024c4  8030              STRH     r0,[r6,#0]
;;;2980   if(load_I<0)load_I=0;
0024c6  2800              CMP      r0,#0
0024c8  da00              BGE      |L1.9420|
0024ca  8033              STRH     r3,[r6,#0]
                  |L1.9420|
;;;2981   
;;;2982   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2983   load_I=0;
0024cc  8033              STRH     r3,[r6,#0]
;;;2984   
;;;2985   Isumm=0;
0024ce  802b              STRH     r3,[r5,#0]
;;;2986   
;;;2987   for(i=0;i<NUMIST;i++)
0024d0  f04f0000          MOV      r0,#0
0024d4  e00f              B        |L1.9462|
                  |L1.9430|
;;;2988        {
;;;2989        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0024d6  ebc001c0          RSB      r1,r0,r0,LSL #3
0024da  eb011100          ADD      r1,r1,r0,LSL #4
0024de  eb040181          ADD      r1,r4,r1,LSL #2
0024e2  78cf              LDRB     r7,[r1,#3]
0024e4  2f05              CMP      r7,#5
0024e6  d203              BCS      |L1.9456|
0024e8  6a49              LDR      r1,[r1,#0x24]
0024ea  882f              LDRH     r7,[r5,#0]  ; Isumm
0024ec  4439              ADD      r1,r1,r7
0024ee  8029              STRH     r1,[r5,#0]
                  |L1.9456|
0024f0  f1000001          ADD      r0,r0,#1              ;2987
0024f4  b2c0              UXTB     r0,r0                 ;2987
                  |L1.9462|
0024f6  4290              CMP      r0,r2                 ;2987
0024f8  dbed              BLT      |L1.9430|
;;;2990        }  
;;;2991        
;;;2992   load_I=load_I+Isumm;
0024fa  8829              LDRH     r1,[r5,#0]  ; Isumm
0024fc  eb030001          ADD      r0,r3,r1
002500  b200              SXTH     r0,r0
002502  8030              STRH     r0,[r6,#0]
;;;2993   if(load_I<0)load_I=0;
002504  2800              CMP      r0,#0
002506  da00              BGE      |L1.9482|
002508  8033              STRH     r3,[r6,#0]
                  |L1.9482|
;;;2994   
;;;2995   #endif
;;;2996   #ifdef IPS_SGEP_GAZPROM
;;;2997   load_I=Isumm;
;;;2998   #endif
;;;2999   
;;;3000   
;;;3001   #ifdef UKU_GLONASS
;;;3002   inv[0]._Uio=6;
;;;3003   if (NUMINV)
;;;3004   	{
;;;3005   	for(i=0;i<NUMINV;i++)
;;;3006   		{
;;;3007   		if(bps[i+first_inv_slot]._cnt<25)
;;;3008        		{
;;;3009        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3010        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3011        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3012        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3013        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3014   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3015   			inv[i]._cnt=0;    
;;;3016        		} 
;;;3017   		else 
;;;3018        		{
;;;3019        		inv[i]._Uio=0; 
;;;3020        		inv[i]._Ii=0;
;;;3021        		inv[i]._Uin=0;
;;;3022        		inv[i]._Ti=0;
;;;3023        		inv[i]._flags_tm=0; 
;;;3024   //	     	inv[i]._rotor0;
;;;3025   			inv[i]._cnt=25;    
;;;3026        		}
;;;3027        	}
;;;3028      	}
;;;3029   #endif
;;;3030   
;;;3031   #ifndef UKU_GLONASS
;;;3032   if (NUMINV)
00250a  488a              LDR      r0,|L1.10036|
00250c  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
002510  2d00              CMP      r5,#0
002512  d066              BEQ      |L1.9698|
;;;3033   	{
;;;3034   	for(i=0;i<NUMINV;i++)
002514  f04f0200          MOV      r2,#0
;;;3035   		{
;;;3036   		if(bps[i+20]._cnt<25)
;;;3037        		{
;;;3038        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
002518  4e87              LDR      r6,|L1.10040|
00251a  e060              B        |L1.9694|
                  |L1.9500|
00251c  f1020014          ADD      r0,r2,#0x14           ;3036
002520  ebc001c0          RSB      r1,r0,r0,LSL #3       ;3036
002524  eb011000          ADD      r0,r1,r0,LSL #4       ;3036
002528  eb040080          ADD      r0,r4,r0,LSL #2       ;3036
00252c  78c1              LDRB     r1,[r0,#3]            ;3036
00252e  2919              CMP      r1,#0x19              ;3036
002530  d239              BCS      |L1.9638|
002532  7981              LDRB     r1,[r0,#6]
002534  79c7              LDRB     r7,[r0,#7]
002536  eb012707          ADD      r7,r1,r7,LSL #8
00253a  eb020142          ADD      r1,r2,r2,LSL #1
00253e  eb061141          ADD      r1,r6,r1,LSL #5
002542  61cf              STR      r7,[r1,#0x1c]
;;;3039        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
002544  7a07              LDRB     r7,[r0,#8]
002546  f890c009          LDRB     r12,[r0,#9]
00254a  eb07270c          ADD      r7,r7,r12,LSL #8
00254e  62cf              STR      r7,[r1,#0x2c]
;;;3040        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
002550  7a87              LDRB     r7,[r0,#0xa]
002552  f890c00b          LDRB     r12,[r0,#0xb]
002556  eb07270c          ADD      r7,r7,r12,LSL #8
00255a  618f              STR      r7,[r1,#0x18]
;;;3041        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
00255c  7b07              LDRB     r7,[r0,#0xc]
00255e  620f              STR      r7,[r1,#0x20]
;;;3042        		inv[i]._flags_tm=bps[i+20]._buff[7];
002560  7b47              LDRB     r7,[r0,#0xd]
002562  f8817046          STRB     r7,[r1,#0x46]
;;;3043        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
002566  7b87              LDRB     r7,[r0,#0xe]
002568  f890c00f          LDRB     r12,[r0,#0xf]
00256c  eb07270c          ADD      r7,r7,r12,LSL #8
002570  628f              STR      r7,[r1,#0x28]
;;;3044        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
002572  7c07              LDRB     r7,[r0,#0x10]
002574  f890c011          LDRB     r12,[r0,#0x11]
002578  eb07270c          ADD      r7,r7,r12,LSL #8
00257c  624f              STR      r7,[r1,#0x24]
;;;3045   			inv[i]._cnt=0;
00257e  708b              STRB     r3,[r1,#2]
;;;3046   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
002580  7c87              LDRB     r7,[r0,#0x12]
002582  f8817059          STRB     r7,[r1,#0x59]
;;;3047   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
002586  7cc7              LDRB     r7,[r0,#0x13]
002588  f881705a          STRB     r7,[r1,#0x5a]
;;;3048   			inv[i]._Pnom=bps[i+20]._buff[14]; 
00258c  7d07              LDRB     r7,[r0,#0x14]
00258e  f8817058          STRB     r7,[r1,#0x58]
;;;3049   			inv[i]._net_contr_en=bps[i+20]._buff[15];
002592  7d47              LDRB     r7,[r0,#0x15]
002594  f881705b          STRB     r7,[r1,#0x5b]
;;;3050   			inv[i]._pwm_en=bps[i+20]._buff[16];  
002598  7d87              LDRB     r7,[r0,#0x16]
00259a  f881705c          STRB     r7,[r1,#0x5c]
;;;3051   			inv[i]._phase_mode=bps[i+20]._buff[17];  
00259e  7dc0              LDRB     r0,[r0,#0x17]
0025a0  f881005d          STRB     r0,[r1,#0x5d]
0025a4  e018              B        |L1.9688|
                  |L1.9638|
;;;3052        		} 
;;;3053   		else 
;;;3054        		{
;;;3055         		inv[i]._Ii=0;
0025a6  eb020042          ADD      r0,r2,r2,LSL #1
0025aa  eb061040          ADD      r0,r6,r0,LSL #5
0025ae  61c3              STR      r3,[r0,#0x1c]
;;;3056   			inv[i]._Pio=0;
0025b0  62c3              STR      r3,[r0,#0x2c]
;;;3057   			inv[i]._Uio=0;
0025b2  6183              STR      r3,[r0,#0x18]
;;;3058        		inv[i]._Ti=0;
0025b4  6203              STR      r3,[r0,#0x20]
;;;3059        		inv[i]._flags_tm=0; 
0025b6  f8803046          STRB     r3,[r0,#0x46]
;;;3060        		inv[i]._Uil=0;
0025ba  6243              STR      r3,[r0,#0x24]
;;;3061        		inv[i]._Uin=0;
0025bc  6283              STR      r3,[r0,#0x28]
;;;3062   			inv[i]._cnt=25; 
0025be  f04f0119          MOV      r1,#0x19
0025c2  7081              STRB     r1,[r0,#2]
;;;3063   			inv[i]._Uoutmin=0; 
0025c4  f8803059          STRB     r3,[r0,#0x59]
;;;3064   			inv[i]._Uoutmax=0; 
0025c8  f880305a          STRB     r3,[r0,#0x5a]
;;;3065   			inv[i]._Pnom=0; 
0025cc  f8803058          STRB     r3,[r0,#0x58]
;;;3066   			inv[i]._net_contr_en=0;
0025d0  f880305b          STRB     r3,[r0,#0x5b]
;;;3067   			inv[i]._pwm_en=0;   
0025d4  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.9688|
0025d8  f1020201          ADD      r2,r2,#1              ;3034
0025dc  b2d2              UXTB     r2,r2                 ;3034
                  |L1.9694|
0025de  42aa              CMP      r2,r5                 ;3034
0025e0  db9c              BLT      |L1.9500|
                  |L1.9698|
;;;3068   			   
;;;3069        		}
;;;3070        	}
;;;3071      	}
;;;3072   #endif
;;;3073   
;;;3074   #ifdef GLADKOV
;;;3075   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3076   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3077   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3078   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3079   inv[0]._flags_tm=bps[4]._buff[7];
;;;3080   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3081   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3082   inv[0]._cnt=0;    
;;;3083   
;;;3084   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3085   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3086   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3087   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3088   inv[1]._flags_tm=bps[21]._buff[7];
;;;3089   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3090   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3091   inv[1]._cnt=0;    
;;;3092   #endif
;;;3093   
;;;3094   /*
;;;3095   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3096   	{
;;;3097   	lakb[0]._battCommState=0;
;;;3098   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3099   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3100   	
;;;3101   	if(lakb[0]._battCommState==0)
;;;3102   		{	
;;;3103   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3104   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3105   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3106   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3107   		}
;;;3108   	}
;;;3109   */
;;;3110   
;;;3111   #ifdef UKU_TELECORE2015
;;;3112   
;;;3113   	if(BAT_TYPE==2)
;;;3114   		{
;;;3115   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3116   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3117   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3118   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3119   		
;;;3120   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3121   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3122   	
;;;3123   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3124   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3125   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3126   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3127   	
;;;3128   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3129   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3130   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3131   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3132   	
;;;3133   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3134   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3135   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3136   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3137   	
;;;3138   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3139   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3140   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3141   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3142   	
;;;3143   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3144   	
;;;3145   	
;;;3146   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3147   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3148   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3149   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3150   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3151   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3152   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3153   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3154   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3155   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3156   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3157   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3158   	
;;;3159   		if(lakb[i]._rat_cap==0)
;;;3160   			{
;;;3161   			if(lakb[i]._isOnCnt)
;;;3162   				{
;;;3163   				lakb[i]._isOnCnt--;
;;;3164   				if(lakb[i]._isOnCnt==0)
;;;3165   					{
;;;3166   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3167   					}
;;;3168   				}
;;;3169   			}
;;;3170   		else 
;;;3171   			{
;;;3172   			if(lakb[i]._isOnCnt<50)
;;;3173   				{
;;;3174   				lakb[i]._isOnCnt++;
;;;3175   				if(lakb[i]._isOnCnt==50)
;;;3176   					{
;;;3177   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3178   					}
;;;3179   				}
;;;3180   			}
;;;3181   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3182   		}
;;;3183   	else if(BAT_TYPE==3)
;;;3184   		{
;;;3185   		//short numOfPacks;
;;;3186   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3187   		
;;;3188   		#ifndef UKU_TELECORE2016
;;;3189   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3190   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3191   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3192   		if(numOfPacks)numOfPacks-=1;
;;;3193   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3194   		plazma_numOfCells=numOfCells;
;;;3195   		plazma_numOfTemperCells=numOfTemperCells;
;;;3196   		plazma_numOfPacks=numOfPacks;
;;;3197   
;;;3198   
;;;3199   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3200   
;;;3201   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3202   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3203   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3204   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3205   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3206   							);	  
;;;3207   
;;;3208   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3209   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3210   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3211   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3212   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3213   							)/10;
;;;3214   
;;;3215   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3216   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3217   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3218   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3219   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3220   							)-2730;
;;;3221   
;;;3222   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3223   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3224   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3225   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3226   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3227   							)/10;
;;;3228   
;;;3229   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3230   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3231   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3232   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3233   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3234   							)/10;
;;;3235   		#endif
;;;3236   		
;;;3237   		#ifdef UKU_TELECORE2016
;;;3238   		{
;;;3239   		char i;
;;;3240   		
;;;3241   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3242   			{
;;;3243   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3244   			}
;;;3245   		}
;;;3246   		#endif
;;;3247   		
;;;3248   										  
;;;3249   		}
;;;3250   	
;;;3251   if(sacredSunSilentCnt<3) 
;;;3252   	{
;;;3253       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3254       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3255      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3256   	}
;;;3257   else 
;;;3258   	{
;;;3259       	//bat[0]._Ub=0;
;;;3260       	//bat[0]._Tb=0;
;;;3261      	//bat[0]._Ib=0;
;;;3262   	}
;;;3263   
;;;3264   if(BAT_TYPE==1)
;;;3265   	{
;;;3266   	char i;
;;;3267   	for(i=0;i<1;i++)
;;;3268   		{
;;;3269   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3270   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3271   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3272   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3273   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;3274   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3275   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;3276   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3277   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;3278   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;3279   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3280   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;3281   		lakb[i]._flags1= lakb_damp[i][34];
;;;3282   		lakb[i]._flags2= lakb_damp[i][35];
;;;3283   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;3284   
;;;3285   /*		if(lakb[i]._rat_cap==0)
;;;3286   			{
;;;3287   			if(lakb[i]._isOnCnt)
;;;3288   				{
;;;3289   				lakb[i]._isOnCnt--;
;;;3290   				if(lakb[i]._isOnCnt==0)
;;;3291   					{
;;;3292   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3293   					}
;;;3294   				}
;;;3295   			}
;;;3296   		else 
;;;3297   			{
;;;3298   			if(lakb[i]._isOnCnt<50)
;;;3299   				{
;;;3300   				lakb[i]._isOnCnt++;
;;;3301   				if(lakb[i]._isOnCnt==50)
;;;3302   					{
;;;3303   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3304   					}
;;;3305   				}
;;;3306   			} */
;;;3307   		gran(&lakb[i]._isOnCnt,0,50);
;;;3308   	 	}
;;;3309   
;;;3310   	if(lakb_damp[0][41]==100)
;;;3311   		{
;;;3312   		li_bat._485Error=1;
;;;3313   		}
;;;3314   	if(lakb_damp[0][41]==0)
;;;3315   		{
;;;3316   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;3317   		li_bat._485Error=0;
;;;3318   		}
;;;3319   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;3320   
;;;3321   
;;;3322   	}
;;;3323   
;;;3324   
;;;3325   #endif
;;;3326   
;;;3327   		#ifdef UKU_TELECORE2017
;;;3328   		{
;;;3329   		char i;
;;;3330   		
;;;3331   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3332   			{
;;;3333   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3334   			}
;;;3335   		}
;;;3336   		#endif
;;;3337   #ifdef UKU_TELECORE2015
;;;3338   //вычисление параметров работы батареи
;;;3339   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;3340   li_bat._batStat=bsOK;
;;;3341   if(BAT_TYPE==1) //COSLIGHT
;;;3342   	{
;;;3343   	if(li_bat._batStat==bsOK)
;;;3344   		{
;;;3345   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;3346   
;;;3347   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;3348   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;3349   	
;;;3350   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;3351   		li_bat._soc=lakb[0]._s_o_c;
;;;3352   		li_bat._soh=lakb[0]._s_o_h;
;;;3353   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;3354   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;3355   		li_bat._rbt=lakb[0]._r_b_t;
;;;3356   		}
;;;3357   	else 
;;;3358   		{
;;;3359   		li_bat._Ub=bat[0]._Ub;
;;;3360   		li_bat._Ib=bat[0]._Ib/10;
;;;3361   		li_bat._Tb=bat[0]._Tb;
;;;3362   		}
;;;3363   
;;;3364   	if((li_bat._485Error)||(li_bat._canError))
;;;3365   		{
;;;3366   		li_bat._batStat=bsOFF;
;;;3367   		}
;;;3368   	else li_bat._batStat=bsOK;
;;;3369   	}
;;;3370   else if(BAT_TYPE==2) //SACRED SUN
;;;3371   	{
;;;3372   	}
;;;3373   else if(BAT_TYPE==3) //ZTT
;;;3374   	{
;;;3375   	if(li_bat._batStat==bsOK)
;;;3376   		{
;;;3377   
;;;3378   		}
;;;3379   	}
;;;3380   #endif
;;;3381   
;;;3382   
;;;3383   /*
;;;3384   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;3385   	{
;;;3386   
;;;3387   
;;;3388   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;3389   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;3390   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;3391   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;3392   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;3393   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;3394   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;3395   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;3396   
;;;3397   	tempSS=0;
;;;3398   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;3399   
;;;3400   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;3401   
;;;3402   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;3403   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;3404   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;3405   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;3406   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;3407   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;3408   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;3409   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;3410   
;;;3411   	tempSS=0;
;;;3412   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;3413   
;;;3414   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;3415   
;;;3416   
;;;3417   	}*/
;;;3418   
;;;3419   
;;;3420   
;;;3421   }
0025e2  e8bd9ffc          POP      {r2-r12,pc}
;;;3422   
                          ENDP

                  mnemo_hndl PROC
;;;3423   //-----------------------------------------------
;;;3424   void mnemo_hndl(void)
0025e6  4a55              LDR      r2,|L1.10044|
;;;3425   {
;;;3426   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;3427   	{
;;;3428   	if(mnemo_cnt)mnemo_cnt--;
0025e8  4955              LDR      r1,|L1.10048|
0025ea  7810              LDRB     r0,[r2,#0]            ;3426  ; a_ind
0025ec  2804              CMP      r0,#4                 ;3426
0025ee  d001              BEQ      |L1.9716|
0025f0  2801              CMP      r0,#1                 ;3426
0025f2  d105              BNE      |L1.9728|
                  |L1.9716|
0025f4  7850              LDRB     r0,[r2,#1]            ;3426  ; a_ind
0025f6  b918              CBNZ     r0,|L1.9728|
0025f8  4852              LDR      r0,|L1.10052|
0025fa  7800              LDRB     r0,[r0,#0]            ;3426  ; MNEMO_ON
0025fc  2855              CMP      r0,#0x55              ;3426
0025fe  d003              BEQ      |L1.9736|
                  |L1.9728|
;;;3429   	}
;;;3430   else mnemo_cnt=MNEMO_TIME;
002600  4851              LDR      r0,|L1.10056|
002602  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
002604  7008              STRB     r0,[r1,#0]
                  |L1.9734|
;;;3431   }
002606  4770              BX       lr
                  |L1.9736|
002608  7808              LDRB     r0,[r1,#0]            ;3428  ; mnemo_cnt
00260a  2800              CMP      r0,#0                 ;3428
00260c  d0fb              BEQ      |L1.9734|
00260e  f1a00001          SUB      r0,r0,#1              ;3428
002612  7008              STRB     r0,[r1,#0]            ;3428
002614  4770              BX       lr
;;;3432   
                          ENDP

                  adc_init PROC
;;;3433   //-----------------------------------------------
;;;3434   void adc_init(void)
002616  484d              LDR      r0,|L1.10060|
;;;3435   {
;;;3436   
;;;3437   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
002618  6841              LDR      r1,[r0,#4]
00261a  f4212140          BIC      r1,r1,#0xc0000
00261e  f4412180          ORR      r1,r1,#0x40000
002622  6041              STR      r1,[r0,#4]
;;;3438   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
002624  6841              LDR      r1,[r0,#4]
002626  f4213140          BIC      r1,r1,#0x30000
00262a  f4413180          ORR      r1,r1,#0x10000
00262e  6041              STR      r1,[r0,#4]
;;;3439   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
002630  6841              LDR      r1,[r0,#4]
002632  f4214140          BIC      r1,r1,#0xc000
002636  f4414180          ORR      r1,r1,#0x4000
00263a  6041              STR      r1,[r0,#4]
;;;3440   
;;;3441   
;;;3442   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
00263c  6c41              LDR      r1,[r0,#0x44]
00263e  f4212140          BIC      r1,r1,#0xc0000
002642  f4412100          ORR      r1,r1,#0x80000
002646  6441              STR      r1,[r0,#0x44]
;;;3443   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
002648  6c41              LDR      r1,[r0,#0x44]
00264a  f4213140          BIC      r1,r1,#0x30000
00264e  f4413100          ORR      r1,r1,#0x20000
002652  6441              STR      r1,[r0,#0x44]
;;;3444   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
002654  6c41              LDR      r1,[r0,#0x44]
002656  f4214140          BIC      r1,r1,#0xc000
00265a  f4414100          ORR      r1,r1,#0x8000
00265e  6441              STR      r1,[r0,#0x44]
;;;3445   
;;;3446   SET_REG(LPC_ADC->ADCR,0,24,3);
002660  483b              LDR      r0,|L1.10064|
002662  6801              LDR      r1,[r0,#0]
002664  f02161e0          BIC      r1,r1,#0x7000000
002668  6001              STR      r1,[r0,#0]
;;;3447   
;;;3448   SET_REG(LPC_ADC->ADCR,1,21,1);
00266a  6801              LDR      r1,[r0,#0]
00266c  f4411100          ORR      r1,r1,#0x200000
002670  6001              STR      r1,[r0,#0]
;;;3449   SET_REG(LPC_ADC->ADCR,0,16,1);
002672  6801              LDR      r1,[r0,#0]
002674  f4213180          BIC      r1,r1,#0x10000
002678  6001              STR      r1,[r0,#0]
;;;3450   SET_REG(LPC_ADC->ADCR,1,8,8);
00267a  6801              LDR      r1,[r0,#0]
00267c  f421417f          BIC      r1,r1,#0xff00
002680  f4417180          ORR      r1,r1,#0x100
002684  6001              STR      r1,[r0,#0]
;;;3451   
;;;3452   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3453   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;3454   	
;;;3455   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;3456        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;3457        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;3458   
;;;3459   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
002686  f44f7180          MOV      r1,#0x100
00268a  60c1              STR      r1,[r0,#0xc]
00268c  4831              LDR      r0,|L1.10068|
00268e  f44f0180          MOV      r1,#0x400000
002692  6001              STR      r1,[r0,#0]
;;;3460   
;;;3461   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;3462   
;;;3463   
;;;3464   }
002694  4770              BX       lr
;;;3465   
                          ENDP

                  adc_drv7 PROC
;;;3466   //-----------------------------------------------
;;;3467   void adc_drv7(void) //(Uсети - постоянка)
002696  e92d41f0          PUSH     {r4-r8,lr}
;;;3468   {
;;;3469   //int temp_S;
;;;3470   //char i;
;;;3471   //signed short temp_SS;
;;;3472   
;;;3473   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00269a  4c2f              LDR      r4,|L1.10072|
00269c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00269e  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0026a0  1a40              SUBS     r0,r0,r1
0026a2  b200              SXTH     r0,r0
0026a4  f7fffffe          BL       abs_pal
0026a8  1da6              ADDS     r6,r4,#6
0026aa  8030              STRH     r0,[r6,#0]
;;;3474   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
0026ac  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0026ae  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
0026b0  1a40              SUBS     r0,r0,r1
0026b2  b200              SXTH     r0,r0
0026b4  f7fffffe          BL       abs_pal
0026b8  8070              STRH     r0,[r6,#2]
;;;3475   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
0026ba  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0026bc  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0026be  1a40              SUBS     r0,r0,r1
0026c0  b200              SXTH     r0,r0
0026c2  f7fffffe          BL       abs_pal
0026c6  80b0              STRH     r0,[r6,#4]
;;;3476   
;;;3477   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;3478   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;3479   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;3480   
;;;3481   
;;;3482   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
0026c8  f44f7196          MOV      r1,#0x12c
;;;3483   	{
;;;3484   	adc_result=adc_self_ch_buff[2];
0026cc  f1a405da          SUB      r5,r4,#0xda
0026d0  4288              CMP      r0,r1                 ;3482
0026d2  da02              BGE      |L1.9946|
0026d4  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0026d6  86a8              STRH     r0,[r5,#0x34]
0026d8  e00c              B        |L1.9972|
                  |L1.9946|
;;;3485   	} 
;;;3486   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
0026da  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
0026de  4288              CMP      r0,r1
0026e0  da02              BGE      |L1.9960|
;;;3487   	{
;;;3488   	adc_result=adc_self_ch_buff[1];
0026e2  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0026e4  86a8              STRH     r0,[r5,#0x34]
0026e6  e005              B        |L1.9972|
                  |L1.9960|
;;;3489   	}
;;;3490   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0026e8  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0026ec  4288              CMP      r0,r1
0026ee  da01              BGE      |L1.9972|
;;;3491   	{
;;;3492   	adc_result=adc_self_ch_buff[0];
0026f0  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0026f2  86a8              STRH     r0,[r5,#0x34]
                  |L1.9972|
;;;3493   	}
;;;3494       //adc_result=92;
;;;3495   
;;;3496   if(adc_ch_net)
0026f4  79ef              LDRB     r7,[r5,#7]  ; adc_ch_net
0026f6  2600              MOVS     r6,#0
0026f8  b397              CBZ      r7,|L1.10080|
;;;3497   	{
;;;3498   
;;;3499   	main_power_buffer[0]+=(long)(adc_result);
0026fa  4818              LDR      r0,|L1.10076|
0026fc  f9b51034          LDRSH    r1,[r5,#0x34]  ; adc_result
002700  6802              LDR      r2,[r0,#0]  ; main_power_buffer
002702  440a              ADD      r2,r2,r1
002704  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;3500   	main_power_buffer[1]+=(long)(adc_result);
002706  e02c              B        |L1.10082|
                  |L1.9992|
                          DCD      Uvv_eb2
                  |L1.9996|
                          DCD      Kpes_eb2
                  |L1.10000|
                          DCD      Upes_eb2
                  |L1.10004|
                          DCD      t_ext
                  |L1.10008|
                          DCD      ibt
                  |L1.10012|
                          DCD      t_box
                  |L1.10016|
                          DCD      t_ext_can_nd
                  |L1.10020|
                          DCD      t_ext_can
                  |L1.10024|
                          DCD      BAT_IS_ON
                  |L1.10028|
                          DCD      load_I
                  |L1.10032|
                          DCD      Isumm
                  |L1.10036|
                          DCD      NUMINV
                  |L1.10040|
                          DCD      inv
                  |L1.10044|
                          DCD      a_ind
                  |L1.10048|
                          DCD      mnemo_cnt
                  |L1.10052|
                          DCD      MNEMO_ON
                  |L1.10056|
                          DCD      MNEMO_TIME
                  |L1.10060|
                          DCD      0x4002c000
                  |L1.10064|
                          DCD      0x40034000
                  |L1.10068|
                          DCD      0xe000e100
                  |L1.10072|
                          DCD      ||area_number.25||+0xda
                  |L1.10076|
                          DCD      ||.bss||+0x42c
                  |L1.10080|
002760  e01f              B        |L1.10146|
                  |L1.10082|
002762  6842              LDR      r2,[r0,#4]  ; main_power_buffer
002764  440a              ADD      r2,r2,r1
002766  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;3501   	main_power_buffer[2]+=(long)(adc_result);
002768  6882              LDR      r2,[r0,#8]  ; main_power_buffer
00276a  440a              ADD      r2,r2,r1
00276c  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;3502   	main_power_buffer[3]+=(long)(adc_result);
00276e  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
002770  4411              ADD      r1,r1,r2
002772  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;3503   
;;;3504   	adc_net_buff_cnt++;
002774  8fa9              LDRH     r1,[r5,#0x3c]  ; adc_net_buff_cnt
002776  f1010101          ADD      r1,r1,#1
00277a  b209              SXTH     r1,r1
00277c  87a9              STRH     r1,[r5,#0x3c]
;;;3505   	if(adc_net_buff_cnt>=0x1000)
00277e  f5b15f80          CMP      r1,#0x1000
002782  db00              BLT      |L1.10118|
;;;3506   		{
;;;3507   		adc_net_buff_cnt=0;
002784  87ae              STRH     r6,[r5,#0x3c]
                  |L1.10118|
;;;3508   		}
;;;3509   	if((adc_net_buff_cnt&0x03ff)==0)
002786  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_net_buff_cnt
00278a  058a              LSLS     r2,r1,#22
00278c  d12f              BNE      |L1.10222|
;;;3510   		{
;;;3511   		#ifdef UKU_220
;;;3512   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;3513   		#else
;;;3514   		#ifdef UKU_220_V2
;;;3515   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;3516   		#else
;;;3517   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
00278e  ea4f21a1          ASR      r1,r1,#10
002792  f8502021          LDR      r2,[r0,r1,LSL #2]
002796  ea4f2222          ASR      r2,r2,#8
00279a  866a              STRH     r2,[r5,#0x32]
;;;3518   		#endif
;;;3519   		#endif
;;;3520   		main_power_buffer[adc_net_buff_cnt>>10]=0;
00279c  f8406021          STR      r6,[r0,r1,LSL #2]
0027a0  e025              B        |L1.10222|
                  |L1.10146|
;;;3521   		}
;;;3522   
;;;3523   
;;;3524   	} 
;;;3525   else if(!adc_ch_net)
;;;3526   	{
;;;3527   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0027a2  48f9              LDR      r0,|L1.11144|
0027a4  7a2c              LDRB     r4,[r5,#8]  ; adc_ch
0027a6  7a6a              LDRB     r2,[r5,#9]  ; adc_ch_cnt
0027a8  eb001384          ADD      r3,r0,r4,LSL #6
0027ac  f9b51034          LDRSH    r1,[r5,#0x34]  ; adc_result
0027b0  f8431022          STR      r1,[r3,r2,LSL #2]
;;;3528   	
;;;3529   	if((adc_ch_cnt&0x03)==0)
0027b4  0790              LSLS     r0,r2,#30
0027b6  d10d              BNE      |L1.10196|
;;;3530   		{
;;;3531   		long temp_L;
;;;3532   		char i;
;;;3533   		temp_L=0;
0027b8  4601              MOV      r1,r0
                  |L1.10170|
;;;3534   		for(i=0;i<16;i++)
;;;3535   			{
;;;3536   			temp_L+=adc_buff[adc_ch][i];
0027ba  f853c020          LDR      r12,[r3,r0,LSL #2]
0027be  4461              ADD      r1,r1,r12
0027c0  f1000001          ADD      r0,r0,#1              ;3534
0027c4  b2c0              UXTB     r0,r0                 ;3534
0027c6  2810              CMP      r0,#0x10              ;3534
0027c8  d3f7              BCC      |L1.10170|
;;;3537   			}
;;;3538   		adc_buff_[adc_ch]= (short)(temp_L>>4);
0027ca  ea4f1021          ASR      r0,r1,#4
0027ce  49ef              LDR      r1,|L1.11148|
0027d0  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.10196|
;;;3539   
;;;3540   		//adc_buff_[3]=346;
;;;3541   		}
;;;3542   	if(++adc_ch>=16) 
0027d4  1c64              ADDS     r4,r4,#1
0027d6  b2e0              UXTB     r0,r4
0027d8  7228              STRB     r0,[r5,#8]
0027da  2810              CMP      r0,#0x10
0027dc  d307              BCC      |L1.10222|
;;;3543   		{
;;;3544   		adc_ch=0;
0027de  722e              STRB     r6,[r5,#8]
;;;3545   		adc_ch_cnt++;
0027e0  f1020201          ADD      r2,r2,#1
0027e4  b2d0              UXTB     r0,r2
0027e6  7268              STRB     r0,[r5,#9]
;;;3546   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
0027e8  2810              CMP      r0,#0x10
0027ea  d300              BCC      |L1.10222|
0027ec  726e              STRB     r6,[r5,#9]
                  |L1.10222|
;;;3547   		}
;;;3548   	}
;;;3549   
;;;3550   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;3551   
;;;3552   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3553   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3554   /*
;;;3555   	{
;;;3556   	if((adc_cnt1&0x03)==0)
;;;3557   		{
;;;3558   		temp_S=0;
;;;3559   		for(i=0;i<16;i++)
;;;3560   			{
;;;3561   			temp_S+=adc_buff[adc_ch][i];
;;;3562   			} 
;;;3563            	adc_buff_[adc_ch]=temp_S>>4;
;;;3564             }
;;;3565   	}*/
;;;3566   
;;;3567   
;;;3568   		  
;;;3569   
;;;3570   adc_self_ch_cnt=0;
0027ee  71ae              STRB     r6,[r5,#6]
;;;3571   
;;;3572   adc_ch_net++;
0027f0  f1070701          ADD      r7,r7,#1
;;;3573   adc_ch_net&=1;
0027f4  f0070001          AND      r0,r7,#1
0027f8  71e8              STRB     r0,[r5,#7]
;;;3574   
;;;3575   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3576   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;3577   
;;;3578   if(adc_ch_net)
;;;3579   	{
;;;3580   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3581   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;3582   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
0027fa  4ae5              LDR      r2,|L1.11152|
0027fc  b130              CBZ      r0,|L1.10252|
0027fe  6810              LDR      r0,[r2,#0]
002800  f02000ff          BIC      r0,r0,#0xff
002804  f1000004          ADD      r0,r0,#4
002808  6010              STR      r0,[r2,#0]
00280a  e03d              B        |L1.10376|
                  |L1.10252|
;;;3583   	}
;;;3584   else
;;;3585   	{
;;;3586   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3587   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;3588   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
00280c  7a29              LDRB     r1,[r5,#8]  ; adc_ch
00280e  0708              LSLS     r0,r1,#28
002810  d406              BMI      |L1.10272|
002812  6810              LDR      r0,[r2,#0]
002814  f02000ff          BIC      r0,r0,#0xff
002818  f1000001          ADD      r0,r0,#1
00281c  6010              STR      r0,[r2,#0]
00281e  e005              B        |L1.10284|
                  |L1.10272|
;;;3589   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
002820  6810              LDR      r0,[r2,#0]
002822  f02000ff          BIC      r0,r0,#0xff
002826  f1000002          ADD      r0,r0,#2
00282a  6010              STR      r0,[r2,#0]
                  |L1.10284|
;;;3590   
;;;3591   
;;;3592   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
00282c  48d9              LDR      r0,|L1.11156|
00282e  6803              LDR      r3,[r0,#0]
002830  f0435380          ORR      r3,r3,#0x10000000
002834  6003              STR      r3,[r0,#0]
;;;3593   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
002836  6a03              LDR      r3,[r0,#0x20]
002838  f0434380          ORR      r3,r3,#0x40000000
00283c  6203              STR      r3,[r0,#0x20]
;;;3594   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
00283e  6e03              LDR      r3,[r0,#0x60]
002840  f0436380          ORR      r3,r3,#0x4000000
002844  6603              STR      r3,[r0,#0x60]
;;;3595   
;;;3596   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
002846  07cb              LSLS     r3,r1,#31
002848  d00a              BEQ      |L1.10336|
;;;3597   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
00284a  6943              LDR      r3,[r0,#0x14]
00284c  f0435380          ORR      r3,r3,#0x10000000
002850  6143              STR      r3,[r0,#0x14]
                  |L1.10322|
;;;3598   
;;;3599   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
002852  078b              LSLS     r3,r1,#30
002854  d409              BMI      |L1.10346|
002856  6b43              LDR      r3,[r0,#0x34]
002858  f0234380          BIC      r3,r3,#0x40000000
00285c  6343              STR      r3,[r0,#0x34]
00285e  e008              B        |L1.10354|
                  |L1.10336|
002860  6943              LDR      r3,[r0,#0x14]         ;3596
002862  f0235380          BIC      r3,r3,#0x10000000     ;3596
002866  6143              STR      r3,[r0,#0x14]         ;3596
002868  e7f3              B        |L1.10322|
                  |L1.10346|
;;;3600   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
00286a  6b43              LDR      r3,[r0,#0x34]
00286c  f0434380          ORR      r3,r3,#0x40000000
002870  6343              STR      r3,[r0,#0x34]
                  |L1.10354|
;;;3601   
;;;3602   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
002872  0749              LSLS     r1,r1,#29
002874  d404              BMI      |L1.10368|
002876  6f41              LDR      r1,[r0,#0x74]
002878  f0216180          BIC      r1,r1,#0x4000000
00287c  6741              STR      r1,[r0,#0x74]
00287e  e003              B        |L1.10376|
                  |L1.10368|
;;;3603   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
002880  6f41              LDR      r1,[r0,#0x74]
002882  f0416180          ORR      r1,r1,#0x4000000
002886  6741              STR      r1,[r0,#0x74]
                  |L1.10376|
;;;3604   	}
;;;3605   	
;;;3606   
;;;3607   
;;;3608   
;;;3609   LPC_ADC->ADCR |=  (1<<24);
002888  6810              LDR      r0,[r2,#0]
00288a  f0407080          ORR      r0,r0,#0x1000000
00288e  6010              STR      r0,[r2,#0]
;;;3610   
;;;3611   }
002890  e8bd81f0          POP      {r4-r8,pc}
;;;3612   
                          ENDP

                  avg_hndl PROC
;;;3869   //-----------------------------------------------
;;;3870   void avg_hndl(void)
002894  b5f0              PUSH     {r4-r7,lr}
;;;3871   { 
;;;3872   char i;
;;;3873   
;;;3874   //#define AVGCNTMAX	5
;;;3875   if(avg_main_cnt)
002896  4dc0              LDR      r5,|L1.11160|
002898  f9b5002e          LDRSH    r0,[r5,#0x2e]  ; avg_main_cnt
00289c  b118              CBZ      r0,|L1.10406|
;;;3876   	{
;;;3877   	avg_main_cnt--;
00289e  f1a00001          SUB      r0,r0,#1
0028a2  85e8              STRH     r0,[r5,#0x2e]
;;;3878   	goto avg_hndl_end;
0028a4  e096              B        |L1.10708|
                  |L1.10406|
;;;3879   	}                 
;;;3880   
;;;3881   avg_num=0;
0028a6  f04f0600          MOV      r6,#0
0028aa  742e              STRB     r6,[r5,#0x10]
;;;3882   
;;;3883   for(i=0;i<NUMIST;i++)
0028ac  4630              MOV      r0,r6
0028ae  49bc              LDR      r1,|L1.11168|
;;;3884   	{
;;;3885   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
0028b0  4bba              LDR      r3,|L1.11164|
0028b2  f9b12000          LDRSH    r2,[r1,#0]            ;3883
0028b6  e012              B        |L1.10462|
                  |L1.10424|
0028b8  ebc001c0          RSB      r1,r0,r0,LSL #3
0028bc  eb011100          ADD      r1,r1,r0,LSL #4
0028c0  eb030181          ADD      r1,r3,r1,LSL #2
0028c4  788c              LDRB     r4,[r1,#2]
0028c6  2c01              CMP      r4,#1
0028c8  d106              BNE      |L1.10456|
0028ca  78c9              LDRB     r1,[r1,#3]
0028cc  2914              CMP      r1,#0x14
0028ce  d203              BCS      |L1.10456|
0028d0  7c29              LDRB     r1,[r5,#0x10]  ; avg_num
0028d2  f1010101          ADD      r1,r1,#1
0028d6  7429              STRB     r1,[r5,#0x10]
                  |L1.10456|
0028d8  f1000001          ADD      r0,r0,#1              ;3883
0028dc  b2c0              UXTB     r0,r0                 ;3883
                  |L1.10462|
0028de  4290              CMP      r0,r2                 ;3883
0028e0  dbea              BLT      |L1.10424|
;;;3886   	}
;;;3887   
;;;3888   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;3889   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;3890   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;3891   
;;;3892   	
;;;3893   if(avg_num<2)
0028e2  7c2f              LDRB     r7,[r5,#0x10]  ; avg_num
0028e4  2f02              CMP      r7,#2
0028e6  d375              BCC      |L1.10708|
;;;3894   	{
;;;3895   	goto avg_hndl_end;
;;;3896   	}
;;;3897   	
;;;3898   else
;;;3899   	{
;;;3900   	i_avg_min=5000;
0028e8  4cab              LDR      r4,|L1.11160|
0028ea  f2413088          MOV      r0,#0x1388
0028ee  f1040480          ADD      r4,r4,#0x80
0028f2  6160              STR      r0,[r4,#0x14]  ; i_avg_min
;;;3901   	i_avg_max=0;
0028f4  6126              STR      r6,[r4,#0x10]  ; i_avg_max
;;;3902   	i_avg_summ=0;
0028f6  61a6              STR      r6,[r4,#0x18]  ; i_avg_summ
;;;3903   	for(i=0;i<NUMIST;i++)
0028f8  f04f0100          MOV      r1,#0
0028fc  e01c              B        |L1.10552|
                  |L1.10494|
;;;3904   		{
;;;3905   		if(bps[i]._state==bsWRK)
0028fe  ebc100c1          RSB      r0,r1,r1,LSL #3
002902  eb001001          ADD      r0,r0,r1,LSL #4
002906  eb030080          ADD      r0,r3,r0,LSL #2
00290a  f890c002          LDRB     r12,[r0,#2]
00290e  f1bc0f01          CMP      r12,#1
002912  d10e              BNE      |L1.10546|
;;;3906   			{
;;;3907   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
002914  6a40              LDR      r0,[r0,#0x24]
002916  f8d4c010          LDR      r12,[r4,#0x10]  ; i_avg_max
00291a  4560              CMP      r0,r12
00291c  dd00              BLE      |L1.10528|
00291e  6120              STR      r0,[r4,#0x10]  ; i_avg_max
                  |L1.10528|
;;;3908   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
002920  f8d4c014          LDR      r12,[r4,#0x14]  ; i_avg_min
002924  4560              CMP      r0,r12
002926  da00              BGE      |L1.10538|
002928  6160              STR      r0,[r4,#0x14]  ; i_avg_min
                  |L1.10538|
;;;3909   			
;;;3910   			i_avg_summ+=bps[i]._Ii;
00292a  f8d4c018          LDR      r12,[r4,#0x18]  ; i_avg_summ
00292e  4460              ADD      r0,r0,r12
002930  61a0              STR      r0,[r4,#0x18]  ; i_avg_summ
                  |L1.10546|
002932  f1010101          ADD      r1,r1,#1              ;3903
002936  b2c9              UXTB     r1,r1                 ;3903
                  |L1.10552|
002938  4291              CMP      r1,r2                 ;3903
00293a  dbe0              BLT      |L1.10494|
;;;3911   			}
;;;3912   		}
;;;3913   	i_avg=i_avg_summ/avg_num;	
00293c  69a0              LDR      r0,[r4,#0x18]  ; i_avg_summ
00293e  fb90f7f7          SDIV     r7,r0,r7
002942  61e7              STR      r7,[r4,#0x1c]  ; i_avg
;;;3914   	
;;;3915   	if(i_avg_min==0)i_avg_min=1;
002944  6960              LDR      r0,[r4,#0x14]  ; i_avg_min
002946  2101              MOVS     r1,#1                 ;3885
002948  b900              CBNZ     r0,|L1.10572|
00294a  6161              STR      r1,[r4,#0x14]  ; i_avg_min
                  |L1.10572|
;;;3916   
;;;3917   	avg=i_avg_max;
00294c  6920              LDR      r0,[r4,#0x10]  ; i_avg_max
;;;3918   	avg*=100;
00294e  f04f0c64          MOV      r12,#0x64
002952  fb00f00c          MUL      r0,r0,r12
;;;3919   	avg/=i_avg_min;
002956  f8d4c014          LDR      r12,[r4,#0x14]  ; i_avg_min
00295a  fb90f0fc          SDIV     r0,r0,r12
00295e  6220              STR      r0,[r4,#0x20]  ; avg
;;;3920   
;;;3921   	if(avg>160) bAVG=1;
002960  28a0              CMP      r0,#0xa0
002962  dd00              BLE      |L1.10598|
002964  73e9              STRB     r1,[r5,#0xf]
                  |L1.10598|
;;;3922   	if(avg<120) bAVG=0;
002966  2878              CMP      r0,#0x78
002968  da00              BGE      |L1.10604|
00296a  73ee              STRB     r6,[r5,#0xf]
                  |L1.10604|
;;;3923   
;;;3924   	if(bAVG==1)
00296c  7be8              LDRB     r0,[r5,#0xf]  ; bAVG
00296e  2801              CMP      r0,#1
002970  d130              BNE      |L1.10708|
;;;3925   		{
;;;3926   		for(i=0;i<NUMIST;i++)
002972  f04f0100          MOV      r1,#0
;;;3927   			{
;;;3928   			if(bps[i]._state==bsWRK)
;;;3929   				{
;;;3930   				if(bps[i]._Ii>i_avg)bps[i]._x_--;
;;;3931   				if(bps[i]._Ii<i_avg)bps[i]._x_++;
;;;3932   			
;;;3933   				if(bps[i]._x_<-50)bps[i]._x_=-50;
002976  f06f0431          MVN      r4,#0x31
00297a  e029              B        |L1.10704|
                  |L1.10620|
00297c  ebc100c1          RSB      r0,r1,r1,LSL #3       ;3928
002980  eb001001          ADD      r0,r0,r1,LSL #4       ;3928
002984  eb030080          ADD      r0,r3,r0,LSL #2       ;3928
002988  7885              LDRB     r5,[r0,#2]            ;3928
00298a  2d01              CMP      r5,#1                 ;3928
00298c  d11d              BNE      |L1.10698|
00298e  6a45              LDR      r5,[r0,#0x24]         ;3930
002990  42bd              CMP      r5,r7                 ;3930
002992  dd05              BLE      |L1.10656|
002994  f8b05050          LDRH     r5,[r0,#0x50]         ;3930
002998  f1a50501          SUB      r5,r5,#1              ;3930
00299c  f8a05050          STRH     r5,[r0,#0x50]         ;3930
                  |L1.10656|
0029a0  da05              BGE      |L1.10670|
0029a2  f8b05050          LDRH     r5,[r0,#0x50]         ;3931
0029a6  f1050501          ADD      r5,r5,#1              ;3931
0029aa  f8a05050          STRH     r5,[r0,#0x50]         ;3931
                  |L1.10670|
0029ae  f9b05050          LDRSH    r5,[r0,#0x50]
0029b2  42a5              CMP      r5,r4
0029b4  da01              BGE      |L1.10682|
0029b6  f8a04050          STRH     r4,[r0,#0x50]
                  |L1.10682|
;;;3934   				if(bps[i]._x_>50)bps[i]._x_=50;	
0029ba  f9b05050          LDRSH    r5,[r0,#0x50]
0029be  2d32              CMP      r5,#0x32
0029c0  dd03              BLE      |L1.10698|
0029c2  f04f0532          MOV      r5,#0x32
0029c6  f8a05050          STRH     r5,[r0,#0x50]
                  |L1.10698|
0029ca  f1010101          ADD      r1,r1,#1              ;3926
0029ce  b2c9              UXTB     r1,r1                 ;3926
                  |L1.10704|
0029d0  4291              CMP      r1,r2                 ;3926
0029d2  dbd3              BLT      |L1.10620|
                  |L1.10708|
;;;3935   				}
;;;3936   			}		
;;;3937   		}			
;;;3938   	}   	 
;;;3939   
;;;3940   
;;;3941   avg_hndl_end:
;;;3942   __nop();  
0029d4  bf00              NOP      
;;;3943   }
0029d6  bdf0              POP      {r4-r7,pc}
;;;3944   
                          ENDP

                  rele_hndl PROC
;;;3957   //*************-----------------------------------------------
;;;3958   void rele_hndl(void)
0029d8  e92d5ff0          PUSH     {r4-r12,lr}
;;;3959   {
;;;3960   //static char cnt_rel_sam;
;;;3961   //char temp;
;;;3962   
;;;3963   //temp=0;
;;;3964   
;;;3965   
;;;3966   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
0029dc  4871              LDR      r0,|L1.11172|
0029de  6801              LDR      r1,[r0,#0]
0029e0  4a71              LDR      r2,|L1.11176|
0029e2  ea010102          AND      r1,r1,r2
0029e6  6001              STR      r1,[r0,#0]
;;;3967   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
0029e8  4c6a              LDR      r4,|L1.11156|
0029ea  6821              LDR      r1,[r4,#0]
0029ec  f441717c          ORR      r1,r1,#0x3f0
0029f0  6021              STR      r1,[r4,#0]
;;;3968   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
0029f2  69c1              LDR      r1,[r0,#0x1c]
0029f4  f4212140          BIC      r1,r1,#0xc0000
0029f8  61c1              STR      r1,[r0,#0x1c]
;;;3969   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
0029fa  6e21              LDR      r1,[r4,#0x60]
0029fc  f0417100          ORR      r1,r1,#0x2000000
002a00  6621              STR      r1,[r4,#0x60]
;;;3970   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
002a02  6841              LDR      r1,[r0,#4]
002a04  f0216140          BIC      r1,r1,#0xc000000
002a08  6041              STR      r1,[r0,#4]
;;;3971   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
002a0a  6820              LDR      r0,[r4,#0]
002a0c  f0405000          ORR      r0,r0,#0x20000000
002a10  6020              STR      r0,[r4,#0]
;;;3972   
;;;3973   
;;;3974   
;;;3975   
;;;3976   
;;;3977   
;;;3978   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
002a12  4867              LDR      r0,|L1.11184|
002a14  4d65              LDR      r5,|L1.11180|
002a16  4968              LDR      r1,|L1.11192|
002a18  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
002a1a  4866              LDR      r0,|L1.11188|
002a1c  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
002a20  f9b11000          LDRSH    r1,[r1,#0]
002a24  7800              LDRB     r0,[r0,#0]
002a26  4313              ORRS     r3,r3,r2
002a28  d007              BEQ      |L1.10810|
002a2a  b130              CBZ      r0,|L1.10810|
002a2c  2905              CMP      r1,#5
002a2e  dd04              BLE      |L1.10810|
;;;3979   	{
;;;3980   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
002a30  69a3              LDR      r3,[r4,#0x18]
002a32  f4437380          ORR      r3,r3,#0x100
002a36  61a3              STR      r3,[r4,#0x18]
002a38  e003              B        |L1.10818|
                  |L1.10810|
;;;3981   	}
;;;3982   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
002a3a  69e3              LDR      r3,[r4,#0x1c]
002a3c  f4437380          ORR      r3,r3,#0x100
002a40  61e3              STR      r3,[r4,#0x1c]
                  |L1.10818|
;;;3983   
;;;3984   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
002a42  f8953088          LDRB     r3,[r5,#0x88]  ; bat
002a46  4313              ORRS     r3,r3,r2
002a48  d007              BEQ      |L1.10842|
002a4a  b130              CBZ      r0,|L1.10842|
002a4c  2905              CMP      r1,#5
002a4e  dd04              BLE      |L1.10842|
;;;3985   	{
;;;3986   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
002a50  69a0              LDR      r0,[r4,#0x18]
002a52  f0400040          ORR      r0,r0,#0x40
002a56  61a0              STR      r0,[r4,#0x18]
002a58  e003              B        |L1.10850|
                  |L1.10842|
;;;3987   	}
;;;3988   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
002a5a  69e0              LDR      r0,[r4,#0x1c]
002a5c  f0400040          ORR      r0,r0,#0x40
002a60  61e0              STR      r0,[r4,#0x1c]
                  |L1.10850|
;;;3989   
;;;3990   
;;;3991   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
002a62  20d2              MOVS     r0,#0xd2
002a64  f7fffffe          BL       mess_find_unvol
002a68  4d54              LDR      r5,|L1.11196|
002a6a  b110              CBZ      r0,|L1.10866|
002a6c  6828              LDR      r0,[r5,#0]  ; mess_data
002a6e  2864              CMP      r0,#0x64
002a70  d048              BEQ      |L1.11012|
                  |L1.10866|
;;;3992   	{
;;;3993   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;3994   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;3995   	}
;;;3996   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
002a72  69e0              LDR      r0,[r4,#0x1c]
002a74  f0405000          ORR      r0,r0,#0x20000000
002a78  61e0              STR      r0,[r4,#0x1c]
                  |L1.10874|
;;;3997   
;;;3998   
;;;3999   #ifndef UKU2071x
;;;4000   //Реле аварии сети
;;;4001   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4002   	{
;;;4003   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4004   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4005   	}
;;;4006   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4007   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4008   #endif
;;;4009   #ifdef UKU2071x
;;;4010   //Реле аварии сети
;;;4011   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002a7a  20d2              MOVS     r0,#0xd2
002a7c  f7fffffe          BL       mess_find_unvol
;;;4012   	{
;;;4013   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4014   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4015   	}
;;;4016   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
002a80  4e4f              LDR      r6,|L1.11200|
002a82  b110              CBZ      r0,|L1.10890|
002a84  6828              LDR      r0,[r5,#0]            ;4011  ; mess_data
002a86  2866              CMP      r0,#0x66              ;4011
002a88  d04b              BEQ      |L1.11042|
                  |L1.10890|
002a8a  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002a8c  07c0              LSLS     r0,r0,#31
002a8e  d054              BEQ      |L1.11066|
;;;4017   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002a90  6fa0              LDR      r0,[r4,#0x78]
002a92  f0407000          ORR      r0,r0,#0x2000000
002a96  67a0              STR      r0,[r4,#0x78]
                  |L1.10904|
;;;4018   #endif
;;;4019   
;;;4020   #ifdef UKU_3U
;;;4021   //Реле аварий батарей
;;;4022   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4023   	{
;;;4024   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4025   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4026        }
;;;4027   else 
;;;4028   	{
;;;4029   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4030        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4031   	} 
;;;4032   
;;;4033   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4034   	{
;;;4035   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4036   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4037        }
;;;4038   else 
;;;4039   	{
;;;4040   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4041        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4042   	} 
;;;4043   
;;;4044   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4045   	{
;;;4046   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4047   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4048        }
;;;4049   else 
;;;4050   	{
;;;4051   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4052        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4053   	} 
;;;4054   
;;;4055   #endif
;;;4056   
;;;4057   
;;;4058   #ifdef UKU_GLONASS
;;;4059   //Реле аварий батарей
;;;4060   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4061   	{
;;;4062   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4063   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4064        }
;;;4065   else 
;;;4066   	{
;;;4067   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4068        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4069   	} 
;;;4070   
;;;4071   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4072   	{
;;;4073   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4074   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4075        }
;;;4076   else 
;;;4077   	{
;;;4078   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4079        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4080   	} 
;;;4081   
;;;4082   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4083   	{
;;;4084   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4085   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4086        }
;;;4087   else 
;;;4088   	{
;;;4089   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4090        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4091   	} 
;;;4092   
;;;4093   #endif
;;;4094   
;;;4095   #ifdef U 
;;;4096   
;;;4097   #endif
;;;4098   
;;;4099   #ifdef UKU_RSTKM
;;;4100   
;;;4101   //Реле общей аварии
;;;4102   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4103   	{
;;;4104   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4105   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4106   	}
;;;4107   else 
;;;4108   	{
;;;4109        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;4110             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4111             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4112             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;4113             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4114        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4115   	}
;;;4116   	
;;;4117   
;;;4118   //Реле освещения
;;;4119   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4120   	{
;;;4121   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4122   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4123        }
;;;4124   else 
;;;4125   	{
;;;4126   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4127        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4128   	}
;;;4129   
;;;4130   
;;;4131   //Реле выключения нагрузки
;;;4132   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4133   	{
;;;4134   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4135   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4136        }
;;;4137   else if(tloaddisable_cmnd==0)
;;;4138   	{
;;;4139   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4140   	}
;;;4141   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4142   	{
;;;4143   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4144   	}
;;;4145   
;;;4146   else 
;;;4147   	{
;;;4148   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4149        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4150   	} 
;;;4151   
;;;4152   //Реле осевого вентилятора
;;;4153   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4154   	{
;;;4155   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4156   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4157   	}
;;;4158   else 
;;;4159   	{
;;;4160   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4161        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4162   	} 
;;;4163   
;;;4164   #endif
;;;4165   
;;;4166   #ifdef UKU_KONTUR
;;;4167   
;;;4168   //Реле общей аварии
;;;4169   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4170   	{
;;;4171   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4172   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4173   	}
;;;4174   else 
;;;4175   	{
;;;4176        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4177             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4178             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4179             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4180             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4181        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4182   	}
;;;4183   
;;;4184   	
;;;4185   //rel_warm_plazma=0;
;;;4186   //Реле освещения   
;;;4187   /*
;;;4188   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4189   	{
;;;4190   	if(mess_data[1]==0)
;;;4191   		{
;;;4192   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4193   		rel_warm_plazma=1;
;;;4194   		}
;;;4195   	else if(mess_data[1]==1) 
;;;4196   		{
;;;4197   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4198   		rel_warm_plazma=2;
;;;4199   		}
;;;4200        }
;;;4201   else 
;;;4202   	{
;;;4203   	if(warm_stat_k==wsOFF) 
;;;4204   		{
;;;4205   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4206   		rel_warm_plazma=3;
;;;4207   		}
;;;4208        else 
;;;4209   		{
;;;4210   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4211   		rel_warm_plazma=4;
;;;4212   		}
;;;4213   	}
;;;4214   */
;;;4215   //Реле освещения
;;;4216   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4217   	{
;;;4218   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4219   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4220        }
;;;4221   else 
;;;4222   	{
;;;4223   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4224        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4225   	}
;;;4226   
;;;4227   
;;;4228   
;;;4229   //Реле выключения нагрузки
;;;4230   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4231   	{
;;;4232   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4233   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4234        }
;;;4235   else if(tloaddisable_cmnd==0)
;;;4236   	{
;;;4237   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4238   	}
;;;4239   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4240   	{
;;;4241   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4242   	}
;;;4243   
;;;4244   else 
;;;4245   	{
;;;4246   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4247        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4248   	} 
;;;4249   
;;;4250   //Реле осевого вентилятора или отопителя
;;;4251   if(RELE_LOG)
;;;4252   	{
;;;4253   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4254   		{
;;;4255   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4256   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4257   		}
;;;4258   	else 
;;;4259   		{
;;;4260   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4261   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4262   		} 
;;;4263   
;;;4264   	}
;;;4265   else 
;;;4266   	{
;;;4267   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4268   		{
;;;4269   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4270   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4271   		}
;;;4272   	else 
;;;4273   		{
;;;4274   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4275   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4276   		} 
;;;4277   	}
;;;4278   #endif
;;;4279   
;;;4280   #ifdef UKU_6U
;;;4281   //Реле аварий батарей
;;;4282   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4283   	{
;;;4284   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4285   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4286        }
;;;4287   else 
;;;4288   	{
;;;4289   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4290        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4291   	} 
;;;4292   
;;;4293   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4294   	{
;;;4295   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4296   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4297       }
;;;4298   else if(NPN_OUT==npnoRELEAVBAT2)
;;;4299   	{
;;;4300   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;4301   		{
;;;4302   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4303   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4304        	}
;;;4305   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4306   	}
;;;4307   else 
;;;4308   	{
;;;4309   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4310       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4311   	} 
;;;4312   
;;;4313   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4314   	{
;;;4315   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4316   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4317        }
;;;4318   else 
;;;4319   	{
;;;4320   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4321        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4322   	} 
;;;4323   
;;;4324   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4325   	{
;;;4326   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4327   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4328   	}
;;;4329   else if((NPN_OUT==npnoRELEVENT))
;;;4330   	{
;;;4331   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;4332   		{
;;;4333   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4334   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4335       	}
;;;4336   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4337   	}
;;;4338   else 
;;;4339   	{
;;;4340   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4341   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4342   	}
;;;4343   
;;;4344   #endif
;;;4345   
;;;4346   #ifdef UKU_220
;;;4347   //Реле аварий батарей
;;;4348   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4349   	{
;;;4350   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4351   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4352        }
;;;4353   else 
;;;4354   	{
;;;4355   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4356        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4357   	} 
;;;4358   
;;;4359   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4360   	{
;;;4361   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4362   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4363        }
;;;4364   else 
;;;4365   	{
;;;4366   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4367        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4368   	} 
;;;4369   
;;;4370   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4371   	{
;;;4372   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4373   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4374   	}
;;;4375   else 
;;;4376   	{
;;;4377   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;4378   		{
;;;4379   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4380   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4381   		}
;;;4382   	else 
;;;4383   		{
;;;4384   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4385        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4386   		}
;;;4387   	}
;;;4388   
;;;4389   #endif
;;;4390   
;;;4391   #ifdef UKU_220_V2
;;;4392   //Реле аварий батарей
;;;4393   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4394   	{
;;;4395   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4396   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4397        }
;;;4398   else 
;;;4399   	{
;;;4400   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4401        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4402   	} 
;;;4403   
;;;4404   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4405   	{
;;;4406   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4407   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4408        }
;;;4409   else 
;;;4410   	{
;;;4411   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4412        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4413   	} 
;;;4414   
;;;4415   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4416   	{
;;;4417   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4418   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4419   	}
;;;4420   else 
;;;4421   	{
;;;4422   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;4423   		{
;;;4424   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4425   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4426   		}
;;;4427   	else 
;;;4428   		{
;;;4429   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4430        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4431   		}
;;;4432   	}
;;;4433   
;;;4434   #endif
;;;4435   
;;;4436   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;4437   
;;;4438   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
002a98  484a              LDR      r0,|L1.11204|
;;;4439   	{
;;;4440   	#ifndef UKU2071x
;;;4441   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4442   		{
;;;4443   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4444   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4445   		}
;;;4446   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4447   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4448   	#endif
;;;4449   
;;;4450   	#ifdef UKU2071x
;;;4451   		#ifndef APSENERGIA
;;;4452   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4453   			{
;;;4454   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4455   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4456   			}
;;;4457   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4458   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4459   		#endif
;;;4460   
;;;4461   		#ifdef APSENERGIA
;;;4462   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4463   			{
;;;4464   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4465   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4466   			}
;;;4467   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4468   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4469   		#endif
;;;4470   
;;;4471   	#endif
;;;4472   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4473   		{
;;;4474   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4475   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4476   	     }
;;;4477   	else 
;;;4478   		{
;;;4479   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4480   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4481   		} 
;;;4482   
;;;4483   	//Реле аварий батарей
;;;4484   	#ifndef APSENERGIA
;;;4485   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4486   		{
;;;4487   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4488   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4489        	}
;;;4490   	else 
;;;4491   		{
;;;4492   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002a9a  f8df812c          LDR      r8,|L1.11208|
002a9e  4f4b              LDR      r7,|L1.11212|
002aa0  8800              LDRH     r0,[r0,#0]            ;4438  ; AUSW_MAIN
002aa2  f5a041aa          SUB      r1,r0,#0x5500         ;4438
002aa6  39fa              SUBS     r1,r1,#0xfa           ;4438
002aa8  d001              BEQ      |L1.10926|
002aaa  1e49              SUBS     r1,r1,#1              ;4438
002aac  d16a              BNE      |L1.11140|
                  |L1.10926|
002aae  20d2              MOVS     r0,#0xd2              ;4452
002ab0  f7fffffe          BL       mess_find_unvol
002ab4  b110              CBZ      r0,|L1.10940|
002ab6  6828              LDR      r0,[r5,#0]            ;4452  ; mess_data
002ab8  2866              CMP      r0,#0x66              ;4452
002aba  d043              BEQ      |L1.11076|
                  |L1.10940|
002abc  6830              LDR      r0,[r6,#0]            ;4457  ; avar_ind_stat
002abe  07c0              LSLS     r0,r0,#31             ;4457
002ac0  d04d              BEQ      |L1.11102|
002ac2  6fa0              LDR      r0,[r4,#0x78]         ;4458
002ac4  f0407000          ORR      r0,r0,#0x2000000      ;4458
002ac8  67a0              STR      r0,[r4,#0x78]         ;4458
                  |L1.10954|
002aca  20d2              MOVS     r0,#0xd2              ;4472
002acc  f7fffffe          BL       mess_find_unvol
002ad0  b110              CBZ      r0,|L1.10968|
002ad2  6828              LDR      r0,[r5,#0]            ;4472  ; mess_data
002ad4  286a              CMP      r0,#0x6a              ;4472
002ad6  d047              BEQ      |L1.11112|
                  |L1.10968|
002ad8  6830              LDR      r0,[r6,#0]            ;4479  ; avar_ind_stat
002ada  4238              TST      r0,r7                 ;4479
002adc  d079              BEQ      |L1.11218|
002ade  69a0              LDR      r0,[r4,#0x18]         ;4480
002ae0  f0400080          ORR      r0,r0,#0x80           ;4480
002ae4  61a0              STR      r0,[r4,#0x18]         ;4480
                  |L1.10982|
002ae6  20d2              MOVS     r0,#0xd2              ;4485
002ae8  f7fffffe          BL       mess_find_unvol
002aec  b110              CBZ      r0,|L1.10996|
002aee  6828              LDR      r0,[r5,#0]            ;4485  ; mess_data
002af0  2867              CMP      r0,#0x67              ;4485
002af2  d073              BEQ      |L1.11228|
                  |L1.10996|
002af4  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002af8  b380              CBZ      r0,|L1.11100|
;;;4493        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002afa  69a0              LDR      r0,[r4,#0x18]
002afc  f0400010          ORR      r0,r0,#0x10
002b00  61a0              STR      r0,[r4,#0x18]
002b02  e1f8              B        |L1.12022|
                  |L1.11012|
002b04  6868              LDR      r0,[r5,#4]            ;3993  ; mess_data
002b06  2801              CMP      r0,#1                 ;3993
002b08  d006              BEQ      |L1.11032|
002b0a  2800              CMP      r0,#0                 ;3994
002b0c  d1b5              BNE      |L1.10874|
002b0e  69e0              LDR      r0,[r4,#0x1c]         ;3994
002b10  f0405000          ORR      r0,r0,#0x20000000     ;3994
002b14  61e0              STR      r0,[r4,#0x1c]         ;3994
002b16  e7b0              B        |L1.10874|
                  |L1.11032|
002b18  69a0              LDR      r0,[r4,#0x18]         ;3993
002b1a  f0405000          ORR      r0,r0,#0x20000000     ;3993
002b1e  61a0              STR      r0,[r4,#0x18]         ;3993
002b20  e7ab              B        |L1.10874|
                  |L1.11042|
002b22  6868              LDR      r0,[r5,#4]            ;4013  ; mess_data
002b24  b120              CBZ      r0,|L1.11056|
002b26  6fa0              LDR      r0,[r4,#0x78]         ;4014
002b28  f0407000          ORR      r0,r0,#0x2000000      ;4014
002b2c  67a0              STR      r0,[r4,#0x78]         ;4014
002b2e  e7b3              B        |L1.10904|
                  |L1.11056|
002b30  6fe0              LDR      r0,[r4,#0x7c]         ;4013
002b32  f0407000          ORR      r0,r0,#0x2000000      ;4013
002b36  67e0              STR      r0,[r4,#0x7c]         ;4013
002b38  e7ae              B        |L1.10904|
                  |L1.11066|
002b3a  6fe0              LDR      r0,[r4,#0x7c]         ;4016
002b3c  f0407000          ORR      r0,r0,#0x2000000      ;4016
002b40  67e0              STR      r0,[r4,#0x7c]         ;4016
002b42  e7a9              B        |L1.10904|
                  |L1.11076|
002b44  6868              LDR      r0,[r5,#4]            ;4454  ; mess_data
002b46  b120              CBZ      r0,|L1.11090|
002b48  6fa0              LDR      r0,[r4,#0x78]         ;4455
002b4a  f0407000          ORR      r0,r0,#0x2000000      ;4455
002b4e  67a0              STR      r0,[r4,#0x78]         ;4455
002b50  e7bb              B        |L1.10954|
                  |L1.11090|
002b52  6fe0              LDR      r0,[r4,#0x7c]         ;4454
002b54  f0407000          ORR      r0,r0,#0x2000000      ;4454
002b58  67e0              STR      r0,[r4,#0x7c]         ;4454
002b5a  e7b6              B        |L1.10954|
                  |L1.11100|
002b5c  e04d              B        |L1.11258|
                  |L1.11102|
002b5e  6fe0              LDR      r0,[r4,#0x7c]         ;4457
002b60  f0407000          ORR      r0,r0,#0x2000000      ;4457
002b64  67e0              STR      r0,[r4,#0x7c]         ;4457
002b66  e7b0              B        |L1.10954|
                  |L1.11112|
002b68  6868              LDR      r0,[r5,#4]            ;4474  ; mess_data
002b6a  b130              CBZ      r0,|L1.11130|
002b6c  2801              CMP      r0,#1                 ;4475
002b6e  d1ba              BNE      |L1.10982|
002b70  69a0              LDR      r0,[r4,#0x18]         ;4475
002b72  f0400080          ORR      r0,r0,#0x80           ;4475
002b76  61a0              STR      r0,[r4,#0x18]         ;4475
002b78  e7b5              B        |L1.10982|
                  |L1.11130|
002b7a  69e0              LDR      r0,[r4,#0x1c]         ;4474
002b7c  f0400080          ORR      r0,r0,#0x80           ;4474
002b80  61e0              STR      r0,[r4,#0x1c]         ;4474
002b82  e7b0              B        |L1.10982|
                  |L1.11140|
002b84  e03e              B        |L1.11268|
002b86  e024              B        |L1.11218|
                  |L1.11144|
                          DCD      ||.bss||+0xc
                  |L1.11148|
                          DCD      ||.bss||+0x40c
                  |L1.11152|
                          DCD      0x40034000
                  |L1.11156|
                          DCD      0x2009c000
                  |L1.11160|
                          DCD      ||area_number.25||
                  |L1.11164|
                          DCD      bps
                  |L1.11168|
                          DCD      NUMIST
                  |L1.11172|
                          DCD      0x4002c000
                  |L1.11176|
                          DCD      0xfff000ff
                  |L1.11180|
                          DCD      bat
                  |L1.11184|
                          DCD      tbatdisable_stat
                  |L1.11188|
                          DCD      tbatdisable_cmnd
                  |L1.11192|
                          DCD      main_1Hz_cnt
                  |L1.11196|
                          DCD      mess_data
                  |L1.11200|
                          DCD      avar_ind_stat
                  |L1.11204|
                          DCD      AUSW_MAIN
                  |L1.11208|
                          DCD      ips_bat_av_stat
                  |L1.11212|
                          DCD      0x100007f8
002bd0  e004              B        |L1.11228|
                  |L1.11218|
002bd2  69e0              LDR      r0,[r4,#0x1c]         ;4479
002bd4  f0400080          ORR      r0,r0,#0x80           ;4479
002bd8  61e0              STR      r0,[r4,#0x1c]         ;4479
002bda  e784              B        |L1.10982|
                  |L1.11228|
002bdc  6868              LDR      r0,[r5,#4]            ;4487  ; mess_data
002bde  b110              CBZ      r0,|L1.11238|
002be0  2801              CMP      r0,#1                 ;4488
002be2  d005              BEQ      |L1.11248|
002be4  e187              B        |L1.12022|
                  |L1.11238|
002be6  69e0              LDR      r0,[r4,#0x1c]         ;4487
002be8  f0400010          ORR      r0,r0,#0x10           ;4487
002bec  61e0              STR      r0,[r4,#0x1c]         ;4487
002bee  e182              B        |L1.12022|
                  |L1.11248|
002bf0  69a0              LDR      r0,[r4,#0x18]         ;4488
002bf2  f0400010          ORR      r0,r0,#0x10           ;4488
002bf6  61a0              STR      r0,[r4,#0x18]         ;4488
002bf8  e17d              B        |L1.12022|
                  |L1.11258|
002bfa  69e0              LDR      r0,[r4,#0x1c]         ;4492
002bfc  f0400010          ORR      r0,r0,#0x10           ;4492
002c00  61e0              STR      r0,[r4,#0x1c]         ;4492
002c02  e178              B        |L1.12022|
                  |L1.11268|
;;;4494   		}
;;;4495   	#endif
;;;4496   	#ifdef APSENERGIA
;;;4497   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4498   		{
;;;4499   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4500   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4501        	}
;;;4502   	else 
;;;4503   		{
;;;4504   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4505   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4506   		}
;;;4507   	#endif
;;;4508   	}
;;;4509   
;;;4510   else	if(AUSW_MAIN==22023)
002c04  f5a041ac          SUB      r1,r0,#0x5600
002c08  3907              SUBS     r1,#7
002c0a  d162              BNE      |L1.11474|
;;;4511   	{
;;;4512   
;;;4513   	//Реле аварий батарей
;;;4514   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002c0c  20d2              MOVS     r0,#0xd2
002c0e  f7fffffe          BL       mess_find_unvol
002c12  b110              CBZ      r0,|L1.11290|
002c14  6828              LDR      r0,[r5,#0]  ; mess_data
002c16  2867              CMP      r0,#0x67
002c18  d023              BEQ      |L1.11362|
                  |L1.11290|
;;;4515   		{
;;;4516   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4517   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4518        	}
;;;4519   	else 
;;;4520   		{
;;;4521   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002c1a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002c1e  b370              CBZ      r0,|L1.11390|
;;;4522        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002c20  69a0              LDR      r0,[r4,#0x18]
002c22  f0400010          ORR      r0,r0,#0x10
002c26  61a0              STR      r0,[r4,#0x18]
                  |L1.11304|
;;;4523   		} 
;;;4524   
;;;4525   
;;;4526   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4527   	#ifndef UKU2071x
;;;4528   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4529   		{
;;;4530   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4531   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4532   		}
;;;4533   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4534   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4535   	#endif
;;;4536   	#ifdef UKU2071x
;;;4537   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002c28  20d2              MOVS     r0,#0xd2
002c2a  f7fffffe          BL       mess_find_unvol
002c2e  b110              CBZ      r0,|L1.11318|
002c30  6828              LDR      r0,[r5,#0]  ; mess_data
002c32  2866              CMP      r0,#0x66
002c34  d028              BEQ      |L1.11400|
                  |L1.11318|
;;;4538   		{
;;;4539   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4540   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4541   		}
;;;4542   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002c36  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002c38  07c0              LSLS     r0,r0,#31
002c3a  d031              BEQ      |L1.11424|
;;;4543   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002c3c  6fa0              LDR      r0,[r4,#0x78]
002c3e  f0407000          ORR      r0,r0,#0x2000000
002c42  67a0              STR      r0,[r4,#0x78]
                  |L1.11332|
;;;4544   	#endif
;;;4545   
;;;4546   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002c44  20d2              MOVS     r0,#0xd2
002c46  f7fffffe          BL       mess_find_unvol
002c4a  b110              CBZ      r0,|L1.11346|
002c4c  6828              LDR      r0,[r5,#0]  ; mess_data
002c4e  286a              CMP      r0,#0x6a
002c50  d02b              BEQ      |L1.11434|
                  |L1.11346|
;;;4547   		{
;;;4548   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4549   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4550   	     }
;;;4551   	else 
;;;4552   		{
;;;4553   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002c52  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002c54  4238              TST      r0,r7
002c56  d037              BEQ      |L1.11464|
;;;4554   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002c58  69a0              LDR      r0,[r4,#0x18]
002c5a  f0400080          ORR      r0,r0,#0x80
002c5e  61a0              STR      r0,[r4,#0x18]
002c60  e149              B        |L1.12022|
                  |L1.11362|
002c62  6868              LDR      r0,[r5,#4]            ;4516  ; mess_data
002c64  b130              CBZ      r0,|L1.11380|
002c66  2801              CMP      r0,#1                 ;4517
002c68  d1de              BNE      |L1.11304|
002c6a  69a0              LDR      r0,[r4,#0x18]         ;4517
002c6c  f0400010          ORR      r0,r0,#0x10           ;4517
002c70  61a0              STR      r0,[r4,#0x18]         ;4517
002c72  e7d9              B        |L1.11304|
                  |L1.11380|
002c74  69e0              LDR      r0,[r4,#0x1c]         ;4516
002c76  f0400010          ORR      r0,r0,#0x10           ;4516
002c7a  61e0              STR      r0,[r4,#0x1c]         ;4516
002c7c  e7d4              B        |L1.11304|
                  |L1.11390|
002c7e  69e0              LDR      r0,[r4,#0x1c]         ;4521
002c80  f0400010          ORR      r0,r0,#0x10           ;4521
002c84  61e0              STR      r0,[r4,#0x1c]         ;4521
002c86  e7cf              B        |L1.11304|
                  |L1.11400|
002c88  6868              LDR      r0,[r5,#4]            ;4539  ; mess_data
002c8a  b120              CBZ      r0,|L1.11414|
002c8c  69e0              LDR      r0,[r4,#0x1c]         ;4540
002c8e  f0407000          ORR      r0,r0,#0x2000000      ;4540
002c92  61e0              STR      r0,[r4,#0x1c]         ;4540
002c94  e7d6              B        |L1.11332|
                  |L1.11414|
002c96  69a0              LDR      r0,[r4,#0x18]         ;4539
002c98  f0407000          ORR      r0,r0,#0x2000000      ;4539
002c9c  61a0              STR      r0,[r4,#0x18]         ;4539
002c9e  e7d1              B        |L1.11332|
                  |L1.11424|
002ca0  6ba0              LDR      r0,[r4,#0x38]         ;4542
002ca2  f0407000          ORR      r0,r0,#0x2000000      ;4542
002ca6  63a0              STR      r0,[r4,#0x38]         ;4542
002ca8  e7cc              B        |L1.11332|
                  |L1.11434|
002caa  6868              LDR      r0,[r5,#4]            ;4548  ; mess_data
002cac  b110              CBZ      r0,|L1.11444|
002cae  2801              CMP      r0,#1                 ;4549
002cb0  d005              BEQ      |L1.11454|
002cb2  e120              B        |L1.12022|
                  |L1.11444|
002cb4  69e0              LDR      r0,[r4,#0x1c]         ;4548
002cb6  f0400080          ORR      r0,r0,#0x80           ;4548
002cba  61e0              STR      r0,[r4,#0x1c]         ;4548
002cbc  e11b              B        |L1.12022|
                  |L1.11454|
002cbe  69a0              LDR      r0,[r4,#0x18]         ;4549
002cc0  f0400080          ORR      r0,r0,#0x80           ;4549
002cc4  61a0              STR      r0,[r4,#0x18]         ;4549
002cc6  e116              B        |L1.12022|
                  |L1.11464|
002cc8  69e0              LDR      r0,[r4,#0x1c]         ;4553
002cca  f0400080          ORR      r0,r0,#0x80           ;4553
002cce  61e0              STR      r0,[r4,#0x1c]         ;4553
002cd0  e111              B        |L1.12022|
                  |L1.11474|
;;;4555   		} 
;;;4556   	}
;;;4557   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
002cd2  f5a041ac          SUB      r1,r0,#0x5600
002cd6  391b              SUBS     r1,r1,#0x1b
002cd8  d001              BEQ      |L1.11486|
002cda  1e49              SUBS     r1,r1,#1
002cdc  d170              BNE      |L1.11712|
                  |L1.11486|
;;;4558   	{
;;;4559   	//Реле аварий батарей
;;;4560   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002cde  20d2              MOVS     r0,#0xd2
002ce0  f7fffffe          BL       mess_find_unvol
002ce4  b110              CBZ      r0,|L1.11500|
002ce6  6828              LDR      r0,[r5,#0]  ; mess_data
002ce8  2867              CMP      r0,#0x67
002cea  d031              BEQ      |L1.11600|
                  |L1.11500|
;;;4561   		{
;;;4562   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4563   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4564        	}
;;;4565   	else 
;;;4566   		{
;;;4567   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002cec  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002cf0  b3b8              CBZ      r0,|L1.11618|
;;;4568        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002cf2  69a0              LDR      r0,[r4,#0x18]
002cf4  f0400010          ORR      r0,r0,#0x10
002cf8  61a0              STR      r0,[r4,#0x18]
                  |L1.11514|
;;;4569   		} 
;;;4570   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4571   	#ifndef UKU2071x 
;;;4572   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4573   		{
;;;4574   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4575   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4576   		}
;;;4577   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4578   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4579   	#endif
;;;4580   	#ifdef UKU2071x 
;;;4581   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002cfa  20d2              MOVS     r0,#0xd2
002cfc  f7fffffe          BL       mess_find_unvol
002d00  b110              CBZ      r0,|L1.11528|
002d02  6828              LDR      r0,[r5,#0]  ; mess_data
002d04  2866              CMP      r0,#0x66
002d06  d037              BEQ      |L1.11640|
                  |L1.11528|
;;;4582   		{
;;;4583   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4584   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4585   		}
;;;4586   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002d08  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002d0a  07c0              LSLS     r0,r0,#31
002d0c  d040              BEQ      |L1.11664|
;;;4587   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002d0e  6fa0              LDR      r0,[r4,#0x78]
002d10  f0407000          ORR      r0,r0,#0x2000000
002d14  67a0              STR      r0,[r4,#0x78]
                  |L1.11542|
;;;4588   	#endif
;;;4589   
;;;4590   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002d16  20d2              MOVS     r0,#0xd2
002d18  f7fffffe          BL       mess_find_unvol
002d1c  b110              CBZ      r0,|L1.11556|
002d1e  6828              LDR      r0,[r5,#0]  ; mess_data
002d20  286a              CMP      r0,#0x6a
002d22  d03a              BEQ      |L1.11674|
                  |L1.11556|
;;;4591   		{
;;;4592   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4593   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4594   	     }
;;;4595   	else 
;;;4596   		{
;;;4597   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002d24  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002d26  4238              TST      r0,r7
002d28  d045              BEQ      |L1.11702|
;;;4598   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002d2a  69a0              LDR      r0,[r4,#0x18]
002d2c  f0400080          ORR      r0,r0,#0x80
002d30  61a0              STR      r0,[r4,#0x18]
                  |L1.11570|
;;;4599   		}
;;;4600   	//Реле аварии БПС
;;;4601   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002d32  20d2              MOVS     r0,#0xd2
002d34  f7fffffe          BL       mess_find_unvol
002d38  b110              CBZ      r0,|L1.11584|
002d3a  6828              LDR      r0,[r5,#0]  ; mess_data
002d3c  286a              CMP      r0,#0x6a
002d3e  d040              BEQ      |L1.11714|
                  |L1.11584|
;;;4602   		{
;;;4603   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4604   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4605        	}
;;;4606   	else 
;;;4607   		{
;;;4608   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
002d40  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002d42  4238              TST      r0,r7
002d44  d04c              BEQ      |L1.11744|
;;;4609        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
002d46  69a0              LDR      r0,[r4,#0x18]
002d48  f0400020          ORR      r0,r0,#0x20
002d4c  61a0              STR      r0,[r4,#0x18]
002d4e  e0d2              B        |L1.12022|
                  |L1.11600|
002d50  6868              LDR      r0,[r5,#4]            ;4562  ; mess_data
002d52  b138              CBZ      r0,|L1.11620|
002d54  2801              CMP      r0,#1                 ;4563
002d56  d1d0              BNE      |L1.11514|
002d58  69a0              LDR      r0,[r4,#0x18]         ;4563
002d5a  f0400010          ORR      r0,r0,#0x10           ;4563
002d5e  61a0              STR      r0,[r4,#0x18]         ;4563
002d60  e7cb              B        |L1.11514|
                  |L1.11618|
002d62  e004              B        |L1.11630|
                  |L1.11620|
002d64  69e0              LDR      r0,[r4,#0x1c]         ;4562
002d66  f0400010          ORR      r0,r0,#0x10           ;4562
002d6a  61e0              STR      r0,[r4,#0x1c]         ;4562
002d6c  e7c5              B        |L1.11514|
                  |L1.11630|
002d6e  69e0              LDR      r0,[r4,#0x1c]         ;4567
002d70  f0400010          ORR      r0,r0,#0x10           ;4567
002d74  61e0              STR      r0,[r4,#0x1c]         ;4567
002d76  e7c0              B        |L1.11514|
                  |L1.11640|
002d78  6868              LDR      r0,[r5,#4]            ;4583  ; mess_data
002d7a  b120              CBZ      r0,|L1.11654|
002d7c  69e0              LDR      r0,[r4,#0x1c]         ;4584
002d7e  f0407000          ORR      r0,r0,#0x2000000      ;4584
002d82  61e0              STR      r0,[r4,#0x1c]         ;4584
002d84  e7c7              B        |L1.11542|
                  |L1.11654|
002d86  69a0              LDR      r0,[r4,#0x18]         ;4583
002d88  f0407000          ORR      r0,r0,#0x2000000      ;4583
002d8c  61a0              STR      r0,[r4,#0x18]         ;4583
002d8e  e7c2              B        |L1.11542|
                  |L1.11664|
002d90  6ba0              LDR      r0,[r4,#0x38]         ;4586
002d92  f0407000          ORR      r0,r0,#0x2000000      ;4586
002d96  63a0              STR      r0,[r4,#0x38]         ;4586
002d98  e7bd              B        |L1.11542|
                  |L1.11674|
002d9a  6868              LDR      r0,[r5,#4]            ;4592  ; mess_data
002d9c  b130              CBZ      r0,|L1.11692|
002d9e  2801              CMP      r0,#1                 ;4593
002da0  d1c7              BNE      |L1.11570|
002da2  69a0              LDR      r0,[r4,#0x18]         ;4593
002da4  f0400080          ORR      r0,r0,#0x80           ;4593
002da8  61a0              STR      r0,[r4,#0x18]         ;4593
002daa  e7c2              B        |L1.11570|
                  |L1.11692|
002dac  69e0              LDR      r0,[r4,#0x1c]         ;4592
002dae  f0400080          ORR      r0,r0,#0x80           ;4592
002db2  61e0              STR      r0,[r4,#0x1c]         ;4592
002db4  e7bd              B        |L1.11570|
                  |L1.11702|
002db6  69e0              LDR      r0,[r4,#0x1c]         ;4597
002db8  f0400080          ORR      r0,r0,#0x80           ;4597
002dbc  61e0              STR      r0,[r4,#0x1c]         ;4597
002dbe  e7b8              B        |L1.11570|
                  |L1.11712|
002dc0  e013              B        |L1.11754|
                  |L1.11714|
002dc2  6868              LDR      r0,[r5,#4]            ;4603  ; mess_data
002dc4  b110              CBZ      r0,|L1.11724|
002dc6  2801              CMP      r0,#1                 ;4604
002dc8  d005              BEQ      |L1.11734|
002dca  e094              B        |L1.12022|
                  |L1.11724|
002dcc  69e0              LDR      r0,[r4,#0x1c]         ;4603
002dce  f0400020          ORR      r0,r0,#0x20           ;4603
002dd2  61e0              STR      r0,[r4,#0x1c]         ;4603
002dd4  e08f              B        |L1.12022|
                  |L1.11734|
002dd6  69a0              LDR      r0,[r4,#0x18]         ;4604
002dd8  f0400020          ORR      r0,r0,#0x20           ;4604
002ddc  61a0              STR      r0,[r4,#0x18]         ;4604
002dde  e08a              B        |L1.12022|
                  |L1.11744|
002de0  69e0              LDR      r0,[r4,#0x1c]         ;4608
002de2  f0400020          ORR      r0,r0,#0x20           ;4608
002de6  61e0              STR      r0,[r4,#0x1c]         ;4608
002de8  e085              B        |L1.12022|
                  |L1.11754|
;;;4610   		} 
;;;4611   	}
;;;4612   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
002dea  f5a041ac          SUB      r1,r0,#0x5600
002dee  3911              SUBS     r1,r1,#0x11
002df0  d001              BEQ      |L1.11766|
002df2  310f              ADDS     r1,r1,#0xf
002df4  d163              BNE      |L1.11966|
                  |L1.11766|
;;;4613   	{
;;;4614   	#ifndef UKU2071x 
;;;4615   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4616   		{
;;;4617   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4618   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4619   		}
;;;4620   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4621   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4622   	#endif
;;;4623   	#ifdef UKU2071x 
;;;4624   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002df6  20d2              MOVS     r0,#0xd2
002df8  f7fffffe          BL       mess_find_unvol
002dfc  b110              CBZ      r0,|L1.11780|
002dfe  6828              LDR      r0,[r5,#0]  ; mess_data
002e00  2866              CMP      r0,#0x66
002e02  d023              BEQ      |L1.11852|
                  |L1.11780|
;;;4625   		{
;;;4626   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4627   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4628   		}
;;;4629   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
002e04  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002e06  07c0              LSLS     r0,r0,#31
002e08  d02c              BEQ      |L1.11876|
;;;4630   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
002e0a  6fa0              LDR      r0,[r4,#0x78]
002e0c  f0407000          ORR      r0,r0,#0x2000000
002e10  67a0              STR      r0,[r4,#0x78]
                  |L1.11794|
;;;4631   	#endif
;;;4632   	
;;;4633   	
;;;4634   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002e12  20d2              MOVS     r0,#0xd2
002e14  f7fffffe          BL       mess_find_unvol
002e18  b110              CBZ      r0,|L1.11808|
002e1a  6828              LDR      r0,[r5,#0]  ; mess_data
002e1c  286a              CMP      r0,#0x6a
002e1e  d026              BEQ      |L1.11886|
                  |L1.11808|
;;;4635   		{
;;;4636   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4637   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4638   	     }
;;;4639   	else 
;;;4640   		{
;;;4641   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002e20  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002e22  4238              TST      r0,r7
002e24  d031              BEQ      |L1.11914|
;;;4642   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002e26  69a0              LDR      r0,[r4,#0x18]
002e28  f0400080          ORR      r0,r0,#0x80
002e2c  61a0              STR      r0,[r4,#0x18]
                  |L1.11822|
;;;4643   		} 
;;;4644   
;;;4645   	//Реле аварий батарей
;;;4646   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002e2e  20d2              MOVS     r0,#0xd2
002e30  f7fffffe          BL       mess_find_unvol
002e34  b110              CBZ      r0,|L1.11836|
002e36  6828              LDR      r0,[r5,#0]  ; mess_data
002e38  2867              CMP      r0,#0x67
002e3a  d02b              BEQ      |L1.11924|
                  |L1.11836|
;;;4647   		{
;;;4648   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4649   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4650        	}
;;;4651   	else 
;;;4652   		{
;;;4653   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002e3c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002e40  b390              CBZ      r0,|L1.11944|
;;;4654        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002e42  69a0              LDR      r0,[r4,#0x18]
002e44  f0400010          ORR      r0,r0,#0x10
002e48  61a0              STR      r0,[r4,#0x18]
002e4a  e054              B        |L1.12022|
                  |L1.11852|
002e4c  6868              LDR      r0,[r5,#4]            ;4626  ; mess_data
002e4e  b120              CBZ      r0,|L1.11866|
002e50  6fa0              LDR      r0,[r4,#0x78]         ;4627
002e52  f0407000          ORR      r0,r0,#0x2000000      ;4627
002e56  67a0              STR      r0,[r4,#0x78]         ;4627
002e58  e7db              B        |L1.11794|
                  |L1.11866|
002e5a  6fe0              LDR      r0,[r4,#0x7c]         ;4626
002e5c  f0407000          ORR      r0,r0,#0x2000000      ;4626
002e60  67e0              STR      r0,[r4,#0x7c]         ;4626
002e62  e7d6              B        |L1.11794|
                  |L1.11876|
002e64  6fe0              LDR      r0,[r4,#0x7c]         ;4629
002e66  f0407000          ORR      r0,r0,#0x2000000      ;4629
002e6a  67e0              STR      r0,[r4,#0x7c]         ;4629
002e6c  e7d1              B        |L1.11794|
                  |L1.11886|
002e6e  6868              LDR      r0,[r5,#4]            ;4636  ; mess_data
002e70  b130              CBZ      r0,|L1.11904|
002e72  2801              CMP      r0,#1                 ;4637
002e74  d1db              BNE      |L1.11822|
002e76  69a0              LDR      r0,[r4,#0x18]         ;4637
002e78  f0400080          ORR      r0,r0,#0x80           ;4637
002e7c  61a0              STR      r0,[r4,#0x18]         ;4637
002e7e  e7d6              B        |L1.11822|
                  |L1.11904|
002e80  69e0              LDR      r0,[r4,#0x1c]         ;4636
002e82  f0400080          ORR      r0,r0,#0x80           ;4636
002e86  61e0              STR      r0,[r4,#0x1c]         ;4636
002e88  e7d1              B        |L1.11822|
                  |L1.11914|
002e8a  69e0              LDR      r0,[r4,#0x1c]         ;4641
002e8c  f0400080          ORR      r0,r0,#0x80           ;4641
002e90  61e0              STR      r0,[r4,#0x1c]         ;4641
002e92  e7cc              B        |L1.11822|
                  |L1.11924|
002e94  6868              LDR      r0,[r5,#4]            ;4648  ; mess_data
002e96  b110              CBZ      r0,|L1.11934|
002e98  2801              CMP      r0,#1                 ;4649
002e9a  d006              BEQ      |L1.11946|
002e9c  e02b              B        |L1.12022|
                  |L1.11934|
002e9e  69e0              LDR      r0,[r4,#0x1c]         ;4648
002ea0  f0400010          ORR      r0,r0,#0x10           ;4648
002ea4  61e0              STR      r0,[r4,#0x1c]         ;4648
002ea6  e026              B        |L1.12022|
                  |L1.11944|
002ea8  e004              B        |L1.11956|
                  |L1.11946|
002eaa  69a0              LDR      r0,[r4,#0x18]         ;4649
002eac  f0400010          ORR      r0,r0,#0x10           ;4649
002eb0  61a0              STR      r0,[r4,#0x18]         ;4649
002eb2  e020              B        |L1.12022|
                  |L1.11956|
002eb4  69e0              LDR      r0,[r4,#0x1c]         ;4653
002eb6  f0400010          ORR      r0,r0,#0x10           ;4653
002eba  61e0              STR      r0,[r4,#0x1c]         ;4653
002ebc  e01b              B        |L1.12022|
                  |L1.11966|
;;;4655   		} 
;;;4656   	} 	 
;;;4657   else	
;;;4658   	{
;;;4659   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4660   	#ifndef UKU2071x 
;;;4661   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4662   		{
;;;4663   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4664   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4665   		}
;;;4666   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4667   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4668   	#endif
;;;4669   	#ifdef UKU2071x 
;;;4670   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002ebe  20d2              MOVS     r0,#0xd2
002ec0  f7fffffe          BL       mess_find_unvol
002ec4  b110              CBZ      r0,|L1.11980|
002ec6  6828              LDR      r0,[r5,#0]  ; mess_data
002ec8  2866              CMP      r0,#0x66
002eca  d026              BEQ      |L1.12058|
                  |L1.11980|
;;;4671   		{
;;;4672   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4673   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4674   		}
;;;4675   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002ecc  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002ece  07c0              LSLS     r0,r0,#31
002ed0  d02f              BEQ      |L1.12082|
;;;4676   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002ed2  6fa0              LDR      r0,[r4,#0x78]
002ed4  f0407000          ORR      r0,r0,#0x2000000
002ed8  67a0              STR      r0,[r4,#0x78]
                  |L1.11994|
;;;4677   	#endif
;;;4678   
;;;4679   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002eda  20d2              MOVS     r0,#0xd2
002edc  f7fffffe          BL       mess_find_unvol
002ee0  b110              CBZ      r0,|L1.12008|
002ee2  6828              LDR      r0,[r5,#0]  ; mess_data
002ee4  286a              CMP      r0,#0x6a
002ee6  d029              BEQ      |L1.12092|
                  |L1.12008|
;;;4680   		{
;;;4681   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4682   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4683        	}
;;;4684   	else 
;;;4685   		{
;;;4686   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
002ee8  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002eea  4238              TST      r0,r7
002eec  d034              BEQ      |L1.12120|
;;;4687        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
002eee  69a0              LDR      r0,[r4,#0x18]
002ef0  f0400020          ORR      r0,r0,#0x20
002ef4  61a0              STR      r0,[r4,#0x18]
                  |L1.12022|
;;;4688   		}
;;;4689   	}
;;;4690   //Дополнительное реле УКУ 
;;;4691   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
002ef6  20d2              MOVS     r0,#0xd2
002ef8  f7fffffe          BL       mess_find_unvol
;;;4692   	{
;;;4693   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;4694   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;4695   	}
;;;4696   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;4697   	{
;;;4698   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
002efc  f8df83f8          LDR      r8,|L1.13048|
002f00  4ffe              LDR      r7,|L1.13052|
002f02  4eff              LDR      r6,|L1.13056|
002f04  b110              CBZ      r0,|L1.12044|
002f06  6828              LDR      r0,[r5,#0]            ;4691  ; mess_data
002f08  2871              CMP      r0,#0x71              ;4691
002f0a  d02a              BEQ      |L1.12130|
                  |L1.12044|
002f0c  48fd              LDR      r0,|L1.13060|
002f0e  f9b00000          LDRSH    r0,[r0,#0]            ;4696  ; DOP_RELE_FUNC
002f12  b380              CBZ      r0,|L1.12150|
;;;4699   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;4700   	}
;;;4701   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
002f14  2801              CMP      r0,#1
002f16  d068              BEQ      |L1.12266|
002f18  e072              B        |L1.12288|
                  |L1.12058|
002f1a  6868              LDR      r0,[r5,#4]            ;4672  ; mess_data
002f1c  b120              CBZ      r0,|L1.12072|
002f1e  69e0              LDR      r0,[r4,#0x1c]         ;4673
002f20  f0407000          ORR      r0,r0,#0x2000000      ;4673
002f24  61e0              STR      r0,[r4,#0x1c]         ;4673
002f26  e7d8              B        |L1.11994|
                  |L1.12072|
002f28  69a0              LDR      r0,[r4,#0x18]         ;4672
002f2a  f0407000          ORR      r0,r0,#0x2000000      ;4672
002f2e  61a0              STR      r0,[r4,#0x18]         ;4672
002f30  e7d3              B        |L1.11994|
                  |L1.12082|
002f32  6ba0              LDR      r0,[r4,#0x38]         ;4675
002f34  f0407000          ORR      r0,r0,#0x2000000      ;4675
002f38  63a0              STR      r0,[r4,#0x38]         ;4675
002f3a  e7ce              B        |L1.11994|
                  |L1.12092|
002f3c  6868              LDR      r0,[r5,#4]            ;4681  ; mess_data
002f3e  b130              CBZ      r0,|L1.12110|
002f40  2801              CMP      r0,#1                 ;4682
002f42  d1d8              BNE      |L1.12022|
002f44  69a0              LDR      r0,[r4,#0x18]         ;4682
002f46  f0400020          ORR      r0,r0,#0x20           ;4682
002f4a  61a0              STR      r0,[r4,#0x18]         ;4682
002f4c  e7d3              B        |L1.12022|
                  |L1.12110|
002f4e  69e0              LDR      r0,[r4,#0x1c]         ;4681
002f50  f0400020          ORR      r0,r0,#0x20           ;4681
002f54  61e0              STR      r0,[r4,#0x1c]         ;4681
002f56  e7ce              B        |L1.12022|
                  |L1.12120|
002f58  69e0              LDR      r0,[r4,#0x1c]         ;4686
002f5a  f0400020          ORR      r0,r0,#0x20           ;4686
002f5e  61e0              STR      r0,[r4,#0x1c]         ;4686
002f60  e7c9              B        |L1.12022|
                  |L1.12130|
002f62  6868              LDR      r0,[r5,#4]            ;4693  ; mess_data
002f64  b110              CBZ      r0,|L1.12140|
002f66  2801              CMP      r0,#1                 ;4694
002f68  d006              BEQ      |L1.12152|
002f6a  e049              B        |L1.12288|
                  |L1.12140|
002f6c  69e0              LDR      r0,[r4,#0x1c]         ;4693
002f6e  f4407000          ORR      r0,r0,#0x200          ;4693
002f72  61e0              STR      r0,[r4,#0x1c]         ;4693
002f74  e044              B        |L1.12288|
                  |L1.12150|
002f76  e004              B        |L1.12162|
                  |L1.12152|
002f78  69a0              LDR      r0,[r4,#0x18]         ;4694
002f7a  f4407000          ORR      r0,r0,#0x200          ;4694
002f7e  61a0              STR      r0,[r4,#0x18]         ;4694
002f80  e03e              B        |L1.12288|
                  |L1.12162|
002f82  48e1              LDR      r0,|L1.13064|
002f84  49e1              LDR      r1,|L1.13068|
002f86  f9b00000          LDRSH    r0,[r0,#0]            ;4698  ; speedChIsOn
002f8a  b9d8              CBNZ     r0,|L1.12228|
002f8c  7e32              LDRB     r2,[r6,#0x18]         ;4698  ; spc_stat
002f8e  2a02              CMP      r2,#2                 ;4698
002f90  d018              BEQ      |L1.12228|
002f92  780a              LDRB     r2,[r1,#0]            ;4698  ; hv_vz_stat
002f94  b9b2              CBNZ     r2,|L1.12228|
002f96  783a              LDRB     r2,[r7,#0]            ;4698  ; sp_ch_stat
002f98  b9a2              CBNZ     r2,|L1.12228|
002f9a  f8962024          LDRB     r2,[r6,#0x24]         ;4698  ; vz1_stat
002f9e  b98a              CBNZ     r2,|L1.12228|
002fa0  f8962027          LDRB     r2,[r6,#0x27]         ;4698  ; vz2_stat
002fa4  b972              CBNZ     r2,|L1.12228|
002fa6  f9b82000          LDRSH    r2,[r8,#0]            ;4698  ; load_U
002faa  230a              MOVS     r3,#0xa               ;4698
002fac  fb92f2f3          SDIV     r2,r2,r3              ;4698
002fb0  4bd7              LDR      r3,|L1.13072|
002fb2  f9b33000          LDRSH    r3,[r3,#0]            ;4698  ; UVENTOFF
002fb6  429a              CMP      r2,r3                 ;4698
002fb8  da04              BGE      |L1.12228|
002fba  69e0              LDR      r0,[r4,#0x1c]         ;4698
002fbc  f4407000          ORR      r0,r0,#0x200          ;4698
002fc0  61e0              STR      r0,[r4,#0x1c]         ;4698
002fc2  e01d              B        |L1.12288|
                  |L1.12228|
002fc4  b960              CBNZ     r0,|L1.12256|
002fc6  7e30              LDRB     r0,[r6,#0x18]         ;4699  ; spc_stat
002fc8  2802              CMP      r0,#2                 ;4699
002fca  d009              BEQ      |L1.12256|
002fcc  7808              LDRB     r0,[r1,#0]            ;4699  ; hv_vz_stat
002fce  b938              CBNZ     r0,|L1.12256|
002fd0  7838              LDRB     r0,[r7,#0]            ;4699  ; sp_ch_stat
002fd2  b928              CBNZ     r0,|L1.12256|
002fd4  f8960024          LDRB     r0,[r6,#0x24]         ;4699  ; vz1_stat
002fd8  b910              CBNZ     r0,|L1.12256|
002fda  f8960027          LDRB     r0,[r6,#0x27]         ;4699  ; vz2_stat
002fde  b178              CBZ      r0,|L1.12288|
                  |L1.12256|
002fe0  69a0              LDR      r0,[r4,#0x18]         ;4699
002fe2  f4407000          ORR      r0,r0,#0x200          ;4699
002fe6  61a0              STR      r0,[r4,#0x18]         ;4699
002fe8  e00a              B        |L1.12288|
                  |L1.12266|
;;;4702   	{
;;;4703   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
002fea  20d2              MOVS     r0,#0xd2
002fec  f7fffffe          BL       mess_find_unvol
002ff0  b110              CBZ      r0,|L1.12280|
002ff2  6828              LDR      r0,[r5,#0]  ; mess_data
002ff4  2872              CMP      r0,#0x72
002ff6  d017              BEQ      |L1.12328|
                  |L1.12280|
;;;4704   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
002ff8  69a0              LDR      r0,[r4,#0x18]
002ffa  f4407000          ORR      r0,r0,#0x200
002ffe  61a0              STR      r0,[r4,#0x18]
                  |L1.12288|
;;;4705   	}
;;;4706   	
;;;4707   //Блок выносной реле
;;;4708   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
003000  20d2              MOVS     r0,#0xd2
003002  f7fffffe          BL       mess_find_unvol
;;;4709   	{
;;;4710   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
003006  f8df930c          LDR      r9,|L1.13076|
;;;4711   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;4712   	}
;;;4713   else 
;;;4714   	{
;;;4715   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
00300a  4cc3              LDR      r4,|L1.13080|
00300c  b110              CBZ      r0,|L1.12308|
00300e  6828              LDR      r0,[r5,#0]            ;4708  ; mess_data
003010  2875              CMP      r0,#0x75              ;4708
003012  d00e              BEQ      |L1.12338|
                  |L1.12308|
003014  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003016  07c0              LSLS     r0,r0,#31
003018  d01e              BEQ      |L1.12376|
00301a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00301e  f0400001          ORR      r0,r0,#1
003022  f8890000          STRB     r0,[r9,#0]
003026  e01d              B        |L1.12388|
                  |L1.12328|
003028  69e0              LDR      r0,[r4,#0x1c]         ;4703
00302a  f4407000          ORR      r0,r0,#0x200          ;4703
00302e  61e0              STR      r0,[r4,#0x1c]         ;4703
003030  e7e6              B        |L1.12288|
                  |L1.12338|
003032  6868              LDR      r0,[r5,#4]            ;4710  ; mess_data
003034  b110              CBZ      r0,|L1.12348|
003036  2801              CMP      r0,#1                 ;4711
003038  d007              BEQ      |L1.12362|
00303a  e013              B        |L1.12388|
                  |L1.12348|
00303c  f8990000          LDRB     r0,[r9,#0]            ;4710  ; bdr_transmit_stat
003040  f00000fe          AND      r0,r0,#0xfe           ;4710
003044  f8890000          STRB     r0,[r9,#0]            ;4710
003048  e00c              B        |L1.12388|
                  |L1.12362|
00304a  f8990000          LDRB     r0,[r9,#0]            ;4711  ; bdr_transmit_stat
00304e  f0400001          ORR      r0,r0,#1              ;4711
003052  f8890000          STRB     r0,[r9,#0]            ;4711
003056  e005              B        |L1.12388|
                  |L1.12376|
;;;4716   	else 						bdr_transmit_stat&=0xfe;
003058  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00305c  f00000fe          AND      r0,r0,#0xfe
003060  f8890000          STRB     r0,[r9,#0]
                  |L1.12388|
;;;4717   	}	
;;;4718   
;;;4719   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
003064  20d2              MOVS     r0,#0xd2
003066  f7fffffe          BL       mess_find_unvol
00306a  b110              CBZ      r0,|L1.12402|
00306c  6828              LDR      r0,[r5,#0]  ; mess_data
00306e  2876              CMP      r0,#0x76
003070  d009              BEQ      |L1.12422|
                  |L1.12402|
;;;4720   	{
;;;4721   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;4722   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;4723   	}
;;;4724   else 
;;;4725   	{
;;;4726   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
003072  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003074  07c0              LSLS     r0,r0,#31
003076  d019              BEQ      |L1.12460|
003078  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00307c  f0400002          ORR      r0,r0,#2
003080  f8890000          STRB     r0,[r9,#0]
003084  e018              B        |L1.12472|
                  |L1.12422|
003086  6868              LDR      r0,[r5,#4]            ;4721  ; mess_data
003088  b110              CBZ      r0,|L1.12432|
00308a  2801              CMP      r0,#1                 ;4722
00308c  d007              BEQ      |L1.12446|
00308e  e013              B        |L1.12472|
                  |L1.12432|
003090  f8990000          LDRB     r0,[r9,#0]            ;4721  ; bdr_transmit_stat
003094  f00000fd          AND      r0,r0,#0xfd           ;4721
003098  f8890000          STRB     r0,[r9,#0]            ;4721
00309c  e00c              B        |L1.12472|
                  |L1.12446|
00309e  f8990000          LDRB     r0,[r9,#0]            ;4722  ; bdr_transmit_stat
0030a2  f0400002          ORR      r0,r0,#2              ;4722
0030a6  f8890000          STRB     r0,[r9,#0]            ;4722
0030aa  e005              B        |L1.12472|
                  |L1.12460|
;;;4727   	else 						bdr_transmit_stat&=0xfd;
0030ac  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0030b0  f00000fd          AND      r0,r0,#0xfd
0030b4  f8890000          STRB     r0,[r9,#0]
                  |L1.12472|
;;;4728   	}	
;;;4729   	
;;;4730   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
0030b8  20d2              MOVS     r0,#0xd2
0030ba  f7fffffe          BL       mess_find_unvol
0030be  b110              CBZ      r0,|L1.12486|
0030c0  6828              LDR      r0,[r5,#0]  ; mess_data
0030c2  2877              CMP      r0,#0x77
0030c4  d009              BEQ      |L1.12506|
                  |L1.12486|
;;;4731   	{
;;;4732   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;4733   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;4734   	}
;;;4735   else 
;;;4736   	{
;;;4737   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
0030c6  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0030c8  07c0              LSLS     r0,r0,#31
0030ca  d019              BEQ      |L1.12544|
0030cc  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0030d0  f0400004          ORR      r0,r0,#4
0030d4  f8890000          STRB     r0,[r9,#0]
0030d8  e018              B        |L1.12556|
                  |L1.12506|
0030da  6868              LDR      r0,[r5,#4]            ;4732  ; mess_data
0030dc  b110              CBZ      r0,|L1.12516|
0030de  2801              CMP      r0,#1                 ;4733
0030e0  d007              BEQ      |L1.12530|
0030e2  e013              B        |L1.12556|
                  |L1.12516|
0030e4  f8990000          LDRB     r0,[r9,#0]            ;4732  ; bdr_transmit_stat
0030e8  f00000fb          AND      r0,r0,#0xfb           ;4732
0030ec  f8890000          STRB     r0,[r9,#0]            ;4732
0030f0  e00c              B        |L1.12556|
                  |L1.12530|
0030f2  f8990000          LDRB     r0,[r9,#0]            ;4733  ; bdr_transmit_stat
0030f6  f0400004          ORR      r0,r0,#4              ;4733
0030fa  f8890000          STRB     r0,[r9,#0]            ;4733
0030fe  e005              B        |L1.12556|
                  |L1.12544|
;;;4738   	else 						bdr_transmit_stat&=0xfb;
003100  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003104  f00000fb          AND      r0,r0,#0xfb
003108  f8890000          STRB     r0,[r9,#0]
                  |L1.12556|
;;;4739   	}	
;;;4740   	
;;;4741   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
00310c  20d2              MOVS     r0,#0xd2
00310e  f7fffffe          BL       mess_find_unvol
003112  b110              CBZ      r0,|L1.12570|
003114  6828              LDR      r0,[r5,#0]  ; mess_data
003116  2878              CMP      r0,#0x78
003118  d009              BEQ      |L1.12590|
                  |L1.12570|
;;;4742   	{
;;;4743   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;4744   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;4745   	}
;;;4746   else 
;;;4747   	{
;;;4748   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
00311a  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00311c  07c0              LSLS     r0,r0,#31
00311e  d019              BEQ      |L1.12628|
003120  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003124  f0400008          ORR      r0,r0,#8
003128  f8890000          STRB     r0,[r9,#0]
00312c  e018              B        |L1.12640|
                  |L1.12590|
00312e  6868              LDR      r0,[r5,#4]            ;4743  ; mess_data
003130  b110              CBZ      r0,|L1.12600|
003132  2801              CMP      r0,#1                 ;4744
003134  d007              BEQ      |L1.12614|
003136  e013              B        |L1.12640|
                  |L1.12600|
003138  f8990000          LDRB     r0,[r9,#0]            ;4743  ; bdr_transmit_stat
00313c  f00000f7          AND      r0,r0,#0xf7           ;4743
003140  f8890000          STRB     r0,[r9,#0]            ;4743
003144  e00c              B        |L1.12640|
                  |L1.12614|
003146  f8990000          LDRB     r0,[r9,#0]            ;4744  ; bdr_transmit_stat
00314a  f0400008          ORR      r0,r0,#8              ;4744
00314e  f8890000          STRB     r0,[r9,#0]            ;4744
003152  e005              B        |L1.12640|
                  |L1.12628|
;;;4749   	else 						bdr_transmit_stat&=0xf7;
003154  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003158  f00000f7          AND      r0,r0,#0xf7
00315c  f8890000          STRB     r0,[r9,#0]
                  |L1.12640|
;;;4750   	}	
;;;4751   					 	
;;;4752   #endif
;;;4753   
;;;4754   #ifdef UKU_KONTUR
;;;4755   
;;;4756   //Реле общей аварии
;;;4757   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4758   	{
;;;4759   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4760   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4761   	}
;;;4762   else 
;;;4763   	{
;;;4764        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4765             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4766             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4767             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4768             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4769        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4770   	}
;;;4771   
;;;4772   	
;;;4773   //rel_warm_plazma=0;
;;;4774   //Реле освещения   
;;;4775   /*
;;;4776   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4777   	{
;;;4778   	if(mess_data[1]==0)
;;;4779   		{
;;;4780   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4781   		rel_warm_plazma=1;
;;;4782   		}
;;;4783   	else if(mess_data[1]==1) 
;;;4784   		{
;;;4785   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4786   		rel_warm_plazma=2;
;;;4787   		}
;;;4788        }
;;;4789   else 
;;;4790   	{
;;;4791   	if(warm_stat_k==wsOFF) 
;;;4792   		{
;;;4793   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4794   		rel_warm_plazma=3;
;;;4795   		}
;;;4796        else 
;;;4797   		{
;;;4798   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4799   		rel_warm_plazma=4;
;;;4800   		}
;;;4801   	}
;;;4802   */
;;;4803   //Реле освещения
;;;4804   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4805   	{
;;;4806   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4807   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4808        }
;;;4809   else 
;;;4810   	{
;;;4811   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4812        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4813   	}
;;;4814   
;;;4815   
;;;4816   
;;;4817   //Реле выключения нагрузки
;;;4818   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4819   	{
;;;4820   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4821   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4822        }
;;;4823   else if(tloaddisable_cmnd==0)
;;;4824   	{
;;;4825   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4826   	}
;;;4827   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4828   	{
;;;4829   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4830   	}
;;;4831   
;;;4832   else 
;;;4833   	{
;;;4834   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4835        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4836   	} 
;;;4837   
;;;4838   //Реле осевого вентилятора или отопителя
;;;4839   if(RELE_LOG)
;;;4840   	{
;;;4841   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4842   		{
;;;4843   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4844   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4845   		}
;;;4846   	else 
;;;4847   		{
;;;4848   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4849   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4850   		} 
;;;4851   
;;;4852   	}
;;;4853   else 
;;;4854   	{
;;;4855   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4856   		{
;;;4857   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4858   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4859   		}
;;;4860   	else 
;;;4861   		{
;;;4862   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4863   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4864   		} 
;;;4865   	}
;;;4866   #endif
;;;4867   
;;;4868   
;;;4869   #ifdef UKU_TELECORE2015
;;;4870   //Реле аварии сети
;;;4871   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4872   	{
;;;4873   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4874   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4875   	}
;;;4876   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4877   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4878   
;;;4879   
;;;4880   //Реле освещения
;;;4881   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4882   	{
;;;4883   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4884   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4885        }
;;;4886   else 
;;;4887   	{
;;;4888   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4889        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4890   	}
;;;4891   
;;;4892   //Реле отопителя
;;;4893   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;4894   	{
;;;4895   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4896   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4897   	}
;;;4898   else 
;;;4899   	{
;;;4900   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4901        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4902   	} 
;;;4903   //Реле вентилятора
;;;4904   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4905   	{
;;;4906   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4907   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4908   	}
;;;4909   else 
;;;4910   	{
;;;4911   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4912        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4913   	} 
;;;4914   
;;;4915   //Реле внутреннего вентилятора
;;;4916   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;4917   	{
;;;4918   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4919   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4920   	}
;;;4921   else 
;;;4922   	{
;;;4923   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4924        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4925   	} 
;;;4926   
;;;4927   #endif
;;;4928   
;;;4929   #ifdef UKU_TELECORE2017
;;;4930   //Реле аварии сети
;;;4931   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4932   	{
;;;4933   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4934   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4935   	}
;;;4936   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4937   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4938   
;;;4939   
;;;4940   //Реле освещения
;;;4941   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4942   	{
;;;4943   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4944   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4945        }
;;;4946   else 
;;;4947   	{
;;;4948   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4949        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4950   	}
;;;4951   
;;;4952   //Реле отопителя
;;;4953   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;4954   	{
;;;4955   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4956   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4957   	}
;;;4958   else 
;;;4959   	{
;;;4960   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4961        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4962   	} 
;;;4963   //Реле вентилятора
;;;4964   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4965   	{
;;;4966   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4967   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4968   	}
;;;4969   else 
;;;4970   	{
;;;4971   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4972        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4973   	} 
;;;4974   
;;;4975   //Реле внутреннего вентилятора
;;;4976   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;4977   	{
;;;4978   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4979   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4980   	}
;;;4981   else 
;;;4982   	{
;;;4983   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4984        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4985   	} 
;;;4986   
;;;4987   //Реле выключения нагрузки
;;;4988   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4989   	{
;;;4990   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4991   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4992        }
;;;4993   else if(tloaddisable_cmnd==0)
;;;4994   	{
;;;4995   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4996   	}
;;;4997   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4998   	{
;;;4999   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5000   	}
;;;5001   
;;;5002   else 
;;;5003   	{
;;;5004   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5005        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5006   	} 
;;;5007   
;;;5008   
;;;5009   #endif
;;;5010   
;;;5011   #ifdef IPS_SGEP_GAZPROM
;;;5012   rele_hndl_plazma[0]++;
;;;5013   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5014   	{
;;;5015   	rele_hndl_plazma[1]++;
;;;5016   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5017   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5018        }
;;;5019   else 
;;;5020   	{
;;;5021   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5022        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5023   	} 
;;;5024   
;;;5025   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5026   	{
;;;5027   	rele_hndl_plazma[2]++;
;;;5028   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5029   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5030   	}
;;;5031   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5032   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5033   #endif
;;;5034   
;;;5035   if(NUMBDR==1)
003160  486e              LDR      r0,|L1.13084|
003162  8800              LDRH     r0,[r0,#0]  ; NUMBDR
003164  2801              CMP      r0,#1
003166  d17e              BNE      |L1.12902|
;;;5036   	{
;;;5037   	char ii_;
;;;5038   	char bdr_avar_stat_temp=0;
003168  f04f0000          MOV      r0,#0
;;;5039   	for	(ii_=0;ii_<4;ii_++)
00316c  4601              MOV      r1,r0
;;;5040   		{
;;;5041   		//АБ разряжена
;;;5042   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5043   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5044   		//Ускоренный заряд
;;;5045   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5046   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5047   		//Выравнивающий заряд
;;;5048   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5049   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5050   		//Общая авария ЗВУ
;;;5051   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5052   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5053   		//Uвых завышено
;;;5054   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5055   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
00316e  f8dfa1b0          LDR      r10,|L1.13088|
;;;5056   		//Uвых занижено
;;;5057   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5058   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5059   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5060   			(
;;;5061   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
003172  f8df91b0          LDR      r9,|L1.13092|
003176  4d6c              LDR      r5,|L1.13096|
003178  f8dfb1b0          LDR      r11,|L1.13100|
00317c  f04f0301          MOV      r3,#1                 ;3993
                  |L1.12672|
003180  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5042
003184  ea5f7cc2          LSLS     r12,r2,#31            ;5042
003188  d010              BEQ      |L1.12716|
00318a  f8dfc1a4          LDR      r12,|L1.13104|
00318e  f9b8e000          LDRSH    lr,[r8,#0]            ;5043  ; load_U
003192  f9bcc000          LDRSH    r12,[r12,#0]          ;5043  ; USIGN
003196  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5043
00319a  ebbe0f4c          CMP      lr,r12,LSL #1         ;5043
00319e  da05              BGE      |L1.12716|
0031a0  fa03fc01          LSL      r12,r3,r1             ;5043
0031a4  ea4c0c00          ORR      r12,r12,r0            ;5043
0031a8  f00c00ff          AND      r0,r12,#0xff          ;5043
                  |L1.12716|
0031ac  ea5f7c82          LSLS     r12,r2,#30            ;5045
0031b0  d50a              BPL      |L1.12744|
0031b2  f897c000          LDRB     r12,[r7,#0]           ;5046  ; sp_ch_stat
0031b6  f1bc0f02          CMP      r12,#2                ;5046
0031ba  d105              BNE      |L1.12744|
0031bc  fa03fc01          LSL      r12,r3,r1             ;5046
0031c0  ea4c0c00          ORR      r12,r12,r0            ;5046
0031c4  f00c00ff          AND      r0,r12,#0xff          ;5046
                  |L1.12744|
0031c8  ea5f7c42          LSLS     r12,r2,#29            ;5048
0031cc  d50a              BPL      |L1.12772|
0031ce  f896c018          LDRB     r12,[r6,#0x18]        ;5049  ; spc_stat
0031d2  f1bc0f02          CMP      r12,#2                ;5049
0031d6  d105              BNE      |L1.12772|
0031d8  fa03fc01          LSL      r12,r3,r1             ;5049
0031dc  ea4c0c00          ORR      r12,r12,r0            ;5049
0031e0  f00c00ff          AND      r0,r12,#0xff          ;5049
                  |L1.12772|
0031e4  ea5f7c02          LSLS     r12,r2,#28            ;5051
0031e8  d50c              BPL      |L1.12804|
0031ea  f8dfc148          LDR      r12,|L1.13108|
0031ee  f8dcc000          LDR      r12,[r12,#0]          ;5052  ; avar_stat
0031f2  f1bc0f00          CMP      r12,#0                ;5052
0031f6  d005              BEQ      |L1.12804|
0031f8  fa03fc01          LSL      r12,r3,r1             ;5052
0031fc  ea4c0c00          ORR      r12,r12,r0            ;5052
003200  f00c00ff          AND      r0,r12,#0xff          ;5052
                  |L1.12804|
003204  ea5f6cc2          LSLS     r12,r2,#27            ;5054
003208  d50a              BPL      |L1.12832|
00320a  f89ac000          LDRB     r12,[r10,#0]          ;5055  ; uout_av
00320e  f1bc0f01          CMP      r12,#1                ;5055
003212  d105              BNE      |L1.12832|
003214  fa03fc01          LSL      r12,r3,r1             ;5055
003218  ea4c0c00          ORR      r12,r12,r0            ;5055
00321c  f00c00ff          AND      r0,r12,#0xff          ;5055
                  |L1.12832|
003220  ea5f6c82          LSLS     r12,r2,#26            ;5057
003224  d50a              BPL      |L1.12860|
003226  f89ac000          LDRB     r12,[r10,#0]          ;5058  ; uout_av
00322a  f1bc0f02          CMP      r12,#2                ;5058
00322e  d105              BNE      |L1.12860|
003230  fa03fc01          LSL      r12,r3,r1             ;5058
003234  ea4c0c00          ORR      r12,r12,r0            ;5058
003238  f00c00ff          AND      r0,r12,#0xff          ;5058
                  |L1.12860|
00323c  ea5f6c42          LSLS     r12,r2,#25            ;5059
003240  d525              BPL      |L1.12942|
003242  f899c001          LDRB     r12,[r9,#1]  ; bps
003246  ea5f6ccc          LSLS     r12,r12,#27
00324a  d504              BPL      |L1.12886|
00324c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003250  f1bc0f01          CMP      r12,#1
003254  da15              BGE      |L1.12930|
                  |L1.12886|
;;;5062   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
003256  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
00325a  ea5f6ccc          LSLS     r12,r12,#27
00325e  d506              BPL      |L1.12910|
003260  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003264  e000              B        |L1.12904|
                  |L1.12902|
003266  e068              B        |L1.13114|
                  |L1.12904|
003268  f1bc0f02          CMP      r12,#2
00326c  da09              BGE      |L1.12930|
                  |L1.12910|
;;;5063   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
00326e  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003272  ea5f6ccc          LSLS     r12,r12,#27
003276  d50a              BPL      |L1.12942|
003278  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00327c  f1bc0f03          CMP      r12,#3
003280  db05              BLT      |L1.12942|
                  |L1.12930|
;;;5064   			))bdr_avar_stat_temp|=(1<<ii_);
003282  fa03fc01          LSL      r12,r3,r1
003286  ea4c0c00          ORR      r12,r12,r0
00328a  f00c00ff          AND      r0,r12,#0xff
                  |L1.12942|
;;;5065   		if((RELE_SET_MASK[ii_]&0x80)&&
00328e  ea5f6c02          LSLS     r12,r2,#24
003292  d523              BPL      |L1.13020|
;;;5066   			(
;;;5067   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
003294  f899c001          LDRB     r12,[r9,#1]  ; bps
003298  ea5f7c0c          LSLS     r12,r12,#28
00329c  d004              BEQ      |L1.12968|
00329e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0032a2  f1bc0f01          CMP      r12,#1
0032a6  da13              BGE      |L1.13008|
                  |L1.12968|
;;;5068   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
0032a8  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
0032ac  ea5f7c0c          LSLS     r12,r12,#28
0032b0  d004              BEQ      |L1.12988|
0032b2  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0032b6  f1bc0f02          CMP      r12,#2
0032ba  da09              BGE      |L1.13008|
                  |L1.12988|
;;;5069   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
0032bc  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
0032c0  ea5f7c0c          LSLS     r12,r12,#28
0032c4  d00a              BEQ      |L1.13020|
0032c6  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0032ca  f1bc0f03          CMP      r12,#3
0032ce  db05              BLT      |L1.13020|
                  |L1.13008|
;;;5070   			))bdr_avar_stat_temp|=(1<<ii_);
0032d0  fa03fc01          LSL      r12,r3,r1
0032d4  ea4c0c00          ORR      r12,r12,r0
0032d8  f00c00ff          AND      r0,r12,#0xff
                  |L1.13020|
;;;5071   
;;;5072   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
0032dc  0412              LSLS     r2,r2,#16
0032de  d404              BMI      |L1.13034|
0032e0  fa03f201          LSL      r2,r3,r1
0032e4  ea820200          EOR      r2,r2,r0
0032e8  b2d0              UXTB     r0,r2
                  |L1.13034|
0032ea  f1010101          ADD      r1,r1,#1              ;5039
0032ee  b2c9              UXTB     r1,r1                 ;5039
0032f0  2904              CMP      r1,#4                 ;5039
0032f2  f4ffaf45          BCC      |L1.12672|
;;;5073   		}
;;;5074   	bdr_avar_stat=bdr_avar_stat_temp;
0032f6  e01f              B        |L1.13112|
                  |L1.13048|
                          DCD      load_U
                  |L1.13052|
                          DCD      sp_ch_stat
                  |L1.13056|
                          DCD      ||area_number.25||
                  |L1.13060|
                          DCD      DOP_RELE_FUNC
                  |L1.13064|
                          DCD      speedChIsOn
                  |L1.13068|
                          DCD      hv_vz_stat
                  |L1.13072|
                          DCD      UVENTOFF
                  |L1.13076|
                          DCD      bdr_transmit_stat
                  |L1.13080|
                          DCD      bdr_avar_stat
                  |L1.13084|
                          DCD      NUMBDR
                  |L1.13088|
                          DCD      uout_av
                  |L1.13092|
                          DCD      bps
                  |L1.13096|
                          DCD      NUMIST
                  |L1.13100|
                          DCD      RELE_SET_MASK
                  |L1.13104|
                          DCD      USIGN
                  |L1.13108|
                          DCD      avar_stat
                  |L1.13112|
003338  7020              STRB     r0,[r4,#0]
                  |L1.13114|
;;;5075   	}
;;;5076   }
00333a  e8bd9ff0          POP      {r4-r12,pc}
;;;5077   
                          ENDP

                  bps_hndl PROC
;;;5079   //-----------------------------------------------
;;;5080   void bps_hndl(void)
00333e  e92d5ff0          PUSH     {r4-r12,lr}
;;;5081   {
;;;5082   char ptr__,i;
;;;5083   unsigned short tempUS;
;;;5084   
;;;5085   if(sh_cnt0<10)
003342  4efd              LDR      r6,|L1.14136|
;;;5086   	{
;;;5087   	sh_cnt0++;
;;;5088   	if(sh_cnt0>=10)
;;;5089   		{
;;;5090   		sh_cnt0=0;
003344  2700              MOVS     r7,#0
;;;5091   		b1Hz_sh=1;
003346  f04f0a01          MOV      r10,#1
00334a  7db0              LDRB     r0,[r6,#0x16]         ;5085  ; sh_cnt0
00334c  280a              CMP      r0,#0xa               ;5085
00334e  d208              BCS      |L1.13154|
003350  f1000001          ADD      r0,r0,#1              ;5087
003354  b2c0              UXTB     r0,r0                 ;5087
003356  75b0              STRB     r0,[r6,#0x16]         ;5087
003358  280a              CMP      r0,#0xa               ;5088
00335a  d302              BCC      |L1.13154|
00335c  75b7              STRB     r7,[r6,#0x16]         ;5090
00335e  f886a017          STRB     r10,[r6,#0x17]
                  |L1.13154|
;;;5092   		}
;;;5093   	}
;;;5094   
;;;5095   /*if(sh_cnt1<5)
;;;5096   	{
;;;5097   	sh_cnt1++;
;;;5098   	if(sh_cnt1==5)
;;;5099   		{
;;;5100   		sh_cnt1=0;
;;;5101   		b2Hz_sh=1;
;;;5102   		}
;;;5103   	} */
;;;5104   
;;;5105   
;;;5106   /*
;;;5107   if(mess_find(MESS_SRC_ON_OFF))
;;;5108   	{
;;;5109   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;5110   		{
;;;5111   		char i;
;;;5112   		for(i=0;i<NUMIST;i++)
;;;5113   			{
;;;5114   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;5115   			}
;;;5116   		
;;;5117   		}
;;;5118   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;5119   		{
;;;5120   		char i;
;;;5121   		for(i=0;i<NUMIST;i++)
;;;5122   			{
;;;5123   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;5124   			}
;;;5125   		
;;;5126   		}
;;;5127   	}
;;;5128   	
;;;5129   else if(mess_find(_MESS_SRC_MASK_ON))
;;;5130   	{				
;;;5131   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;5132   		{
;;;5133   		char i;
;;;5134   		for(i=0;i<NUMIST;i++)
;;;5135   			{
;;;5136   			if(mess_data[1]&(1<<i))
;;;5137   				{
;;;5138   				src[i]._ist_blok_cnt=0;
;;;5139   				src[i]._flags_tu=2;
;;;5140   				}
;;;5141   			}
;;;5142   		
;;;5143   		}				
;;;5144   	}*/
;;;5145   
;;;5146   
;;;5147   
;;;5148   /*else*/ 
;;;5149   bps_on_mask=0;
003362  f8a67056          STRH     r7,[r6,#0x56]
;;;5150   bps_off_mask=0;
003366  f8a67058          STRH     r7,[r6,#0x58]
;;;5151   
;;;5152   if(mess_find_unvol(MESS2BPS_HNDL))
00336a  20cd              MOVS     r0,#0xcd
00336c  f7fffffe          BL       mess_find_unvol
;;;5153   	{
;;;5154   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;5155   		{
;;;5156   		bps_off_mask=0xffff;
;;;5157   		}
;;;5158   
;;;5159   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;5160   		{
;;;5161   		bps_off_mask=mess_data[1];
;;;5162   		}
;;;5163   
;;;5164   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5165   		{
;;;5166   		bps_on_mask=mess_data[1];
;;;5167   		}
;;;5168   
;;;5169   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;5170   		{
;;;5171   		bps_on_mask=0xffff;
;;;5172   		}
;;;5173   
;;;5174   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;5175   		{
;;;5176   		bps_on_mask=mess_data[1];
;;;5177   		bps_off_mask=~(mess_data[1]);
;;;5178   		}
;;;5179   
;;;5180   
;;;5181   	for(i=0;i<=NUMIST;i++)
;;;5182   		{
;;;5183   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
003370  f8df83c8          LDR      r8,|L1.14140|
003374  f8dfb3c8          LDR      r11,|L1.14144|
003378  b3a0              CBZ      r0,|L1.13284|
00337a  4af2              LDR      r2,|L1.14148|
00337c  f64f73ff          MOV      r3,#0xffff            ;5156
003380  6810              LDR      r0,[r2,#0]            ;5154  ; mess_data
003382  28ce              CMP      r0,#0xce              ;5154
003384  d101              BNE      |L1.13194|
003386  f8a63058          STRH     r3,[r6,#0x58]         ;5156
                  |L1.13194|
00338a  28cf              CMP      r0,#0xcf              ;5159
00338c  d102              BNE      |L1.13204|
00338e  6851              LDR      r1,[r2,#4]            ;5161  ; mess_data
003390  f8a61058          STRH     r1,[r6,#0x58]         ;5161
                  |L1.13204|
003394  28d1              CMP      r0,#0xd1              ;5164
003396  d102              BNE      |L1.13214|
003398  6851              LDR      r1,[r2,#4]            ;5166  ; mess_data
00339a  f8a61056          STRH     r1,[r6,#0x56]         ;5166
                  |L1.13214|
00339e  28d2              CMP      r0,#0xd2              ;5169
0033a0  d101              BNE      |L1.13222|
0033a2  f8a63056          STRH     r3,[r6,#0x56]         ;5171
                  |L1.13222|
0033a6  28d0              CMP      r0,#0xd0              ;5174
0033a8  d106              BNE      |L1.13240|
0033aa  6850              LDR      r0,[r2,#4]            ;5176  ; mess_data
0033ac  f8a60056          STRH     r0,[r6,#0x56]         ;5176
0033b0  ea6f0000          MVN      r0,r0                 ;5177
0033b4  f8a60058          STRH     r0,[r6,#0x58]         ;5177
                  |L1.13240|
0033b8  f04f0400          MOV      r4,#0                 ;5181
0033bc  e037              B        |L1.13358|
                  |L1.13246|
0033be  f8b60058          LDRH     r0,[r6,#0x58]  ; bps_off_mask
0033c2  fa0af904          LSL      r9,r10,r4
0033c6  ea190f00          TST      r9,r0
0033ca  d00c              BEQ      |L1.13286|
0033cc  ebc400c4          RSB      r0,r4,r4,LSL #3
0033d0  eb001004          ADD      r0,r0,r4,LSL #4
0033d4  eb080080          ADD      r0,r8,r0,LSL #2
0033d8  f8301f40          LDRH     r1,[r0,#0x40]!
0033dc  f1010101          ADD      r1,r1,#1
0033e0  8001              STRH     r1,[r0,#0]
0033e2  e008              B        |L1.13302|
                  |L1.13284|
0033e4  e028              B        |L1.13368|
                  |L1.13286|
;;;5184   		else bps[i]._blok_cnt=0;
0033e6  ebc400c4          RSB      r0,r4,r4,LSL #3
0033ea  eb001004          ADD      r0,r0,r4,LSL #4
0033ee  eb080080          ADD      r0,r8,r0,LSL #2
0033f2  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.13302|
;;;5185   		gran(&bps[i]._blok_cnt,0,50);
0033f6  ebc400c4          RSB      r0,r4,r4,LSL #3
0033fa  eb001004          ADD      r0,r0,r4,LSL #4
0033fe  eb080580          ADD      r5,r8,r0,LSL #2
003402  f1050040          ADD      r0,r5,#0x40
003406  2232              MOVS     r2,#0x32
003408  2100              MOVS     r1,#0
00340a  f7fffffe          BL       gran
;;;5186   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
00340e  f9b50040          LDRSH    r0,[r5,#0x40]
003412  2814              CMP      r0,#0x14
003414  dd01              BLE      |L1.13338|
003416  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.13338|
;;;5187   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
00341a  f8b60056          LDRH     r0,[r6,#0x56]  ; bps_on_mask
00341e  ea190f00          TST      r9,r0
003422  d001              BEQ      |L1.13352|
003424  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.13352|
003428  f1040401          ADD      r4,r4,#1              ;5181
00342c  b2e4              UXTB     r4,r4                 ;5181
                  |L1.13358|
00342e  f9bb0000          LDRSH    r0,[r11,#0]           ;5181  ; NUMIST
003432  4284              CMP      r4,r0                 ;5181
003434  ddc3              BLE      |L1.13246|
003436  e08a              B        |L1.13646|
                  |L1.13368|
;;;5188   	     }
;;;5189   
;;;5190   	
;;;5191   /*
;;;5192   
;;;5193   	if(bps_all_off_cnt>20)
;;;5194   		{
;;;5195   		for(i=0;i<=NUMIST;i++)
;;;5196   			{
;;;5197   	     	bps[i]._flags_tu=1;
;;;5198   	     	}
;;;5199   		}
;;;5200   	else if(bps_mask_off_cnt>20)
;;;5201   		{
;;;5202   		for(i=0;i<=NUMIST;i++)
;;;5203   			{
;;;5204   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5205   	     	}
;;;5206   		}	
;;;5207   		
;;;5208   	else if(bps_mask_on_off_cnt>20)
;;;5209   		{
;;;5210   		for(i=0;i<=NUMIST;i++)
;;;5211   			{
;;;5212   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5213   			else bps[i]._flags_tu=0;
;;;5214   	     	}
;;;5215   		}
;;;5216   		
;;;5217   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5218   		{
;;;5219   		for(i=0;i<=NUMIST;i++)
;;;5220   			{
;;;5221   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;5222   	     	}
;;;5223   		}
;;;5224   */										
;;;5225   	}
;;;5226   
;;;5227   
;;;5228   else if(b1Hz_sh)
003438  7df0              LDRB     r0,[r6,#0x17]  ; b1Hz_sh
00343a  b3f0              CBZ      r0,|L1.13498|
;;;5229   	{
;;;5230   	ptr__=0;
00343c  f04f0400          MOV      r4,#0
;;;5231        for(i=0;i<=NUMIST;i++)
003440  4621              MOV      r1,r4
003442  f9bb0000          LDRSH    r0,[r11,#0]           ;5181
003446  e00a              B        |L1.13406|
                  |L1.13384|
;;;5232   		{
;;;5233   	     bps[i]._flags_tu=1;
003448  ebc102c1          RSB      r2,r1,r1,LSL #3
00344c  eb021201          ADD      r2,r2,r1,LSL #4
003450  eb080282          ADD      r2,r8,r2,LSL #2
003454  f882a02c          STRB     r10,[r2,#0x2c]
003458  f1010101          ADD      r1,r1,#1              ;5231
00345c  b2c9              UXTB     r1,r1                 ;5231
                  |L1.13406|
00345e  4281              CMP      r1,r0                 ;5231
003460  ddf2              BLE      |L1.13384|
;;;5234   	     }	
;;;5235     	     
;;;5236     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
003462  f04f0100          MOV      r1,#0
003466  e022              B        |L1.13486|
                  |L1.13416|
;;;5237     		{
;;;5238   		char ii,iii;
;;;5239   
;;;5240   		ii=(char)NUMIST;
003468  b2c2              UXTB     r2,r0
;;;5241   		//if(ii<0)ii=0;
;;;5242   		if(ii>32)ii=32;
00346a  2a20              CMP      r2,#0x20
00346c  d901              BLS      |L1.13426|
00346e  f04f0220          MOV      r2,#0x20
                  |L1.13426|
;;;5243   		iii=numOfForvardBps;
003472  7f73              LDRB     r3,[r6,#0x1d]  ; numOfForvardBps
;;;5244   		//if(iii<0)iii=0;
;;;5245   		if(iii>=NUMIST)iii=0;
003474  4283              CMP      r3,r0
003476  db01              BLT      |L1.13436|
003478  f04f0300          MOV      r3,#0
                  |L1.13436|
;;;5246   		iii+=i;
00347c  440b              ADD      r3,r3,r1
00347e  b2db              UXTB     r3,r3
;;;5247   		iii=iii%ii;
003480  fbb3f5f2          UDIV     r5,r3,r2
003484  fb023215          MLS      r2,r2,r5,r3
;;;5248   		
;;;5249     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
003488  ebc203c2          RSB      r3,r2,r2,LSL #3
00348c  eb031202          ADD      r2,r3,r2,LSL #4
003490  eb080282          ADD      r2,r8,r2,LSL #2
003494  7893              LDRB     r3,[r2,#2]
003496  2b02              CMP      r3,#2
003498  d001              BEQ      |L1.13470|
00349a  2b01              CMP      r3,#1
00349c  d104              BNE      |L1.13480|
                  |L1.13470|
;;;5250     	         	{
;;;5251     	         	bps[iii]._flags_tu=0;
00349e  f882702c          STRB     r7,[r2,#0x2c]
;;;5252     	         	ptr__++;
0034a2  f1040401          ADD      r4,r4,#1
0034a6  b2e4              UXTB     r4,r4
                  |L1.13480|
0034a8  f1010101          ADD      r1,r1,#1              ;5236
0034ac  b2c9              UXTB     r1,r1                 ;5236
                  |L1.13486|
0034ae  4281              CMP      r1,r0                 ;5236
0034b0  da06              BGE      |L1.13504|
0034b2  4aa5              LDR      r2,|L1.14152|
0034b4  f9b22000          LDRSH    r2,[r2,#0]            ;5236  ; num_necc
0034b8  e000              B        |L1.13500|
                  |L1.13498|
0034ba  e048              B        |L1.13646|
                  |L1.13500|
0034bc  4294              CMP      r4,r2                 ;5236
0034be  dbd3              BLT      |L1.13416|
                  |L1.13504|
;;;5253     	         	}
;;;5254   			
;;;5255     	     }
;;;5256   	bps[numOfForvardBps_old]._flags_tu=0;
0034c0  7fb1              LDRB     r1,[r6,#0x1e]  ; numOfForvardBps_old
0034c2  ebc102c1          RSB      r2,r1,r1,LSL #3
0034c6  eb021101          ADD      r1,r2,r1,LSL #4
0034ca  eb080181          ADD      r1,r8,r1,LSL #2
0034ce  f881702c          STRB     r7,[r1,#0x2c]
;;;5257   
;;;5258   	if(main_1Hz_cnt<60)
0034d2  499e              LDR      r1,|L1.14156|
0034d4  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
0034d8  293c              CMP      r1,#0x3c
0034da  da0f              BGE      |L1.13564|
;;;5259   		{
;;;5260        	for(i=0;i<=NUMIST;i++)
0034dc  f04f0100          MOV      r1,#0
0034e0  e00a              B        |L1.13560|
                  |L1.13538|
;;;5261   			{
;;;5262   	     	bps[i]._flags_tu=0;
0034e2  ebc102c1          RSB      r2,r1,r1,LSL #3
0034e6  eb021201          ADD      r2,r2,r1,LSL #4
0034ea  eb080282          ADD      r2,r8,r2,LSL #2
0034ee  f882702c          STRB     r7,[r2,#0x2c]
0034f2  f1010101          ADD      r1,r1,#1              ;5260
0034f6  b2c9              UXTB     r1,r1                 ;5260
                  |L1.13560|
0034f8  4281              CMP      r1,r0                 ;5260
0034fa  ddf2              BLE      |L1.13538|
                  |L1.13564|
;;;5263   	     	}	
;;;5264   		}
;;;5265   	if(ipsBlckStat)
0034fc  4994              LDR      r1,|L1.14160|
0034fe  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
003500  b179              CBZ      r1,|L1.13602|
;;;5266   		{
;;;5267        	for(i=0;i<=NUMIST;i++)
003502  f04f0100          MOV      r1,#0
003506  e00a              B        |L1.13598|
                  |L1.13576|
;;;5268   			{
;;;5269   	     	bps[i]._flags_tu=1;
003508  ebc102c1          RSB      r2,r1,r1,LSL #3
00350c  eb021201          ADD      r2,r2,r1,LSL #4
003510  eb080282          ADD      r2,r8,r2,LSL #2
003514  f882a02c          STRB     r10,[r2,#0x2c]
003518  f1010101          ADD      r1,r1,#1              ;5267
00351c  b2c9              UXTB     r1,r1                 ;5267
                  |L1.13598|
00351e  4281              CMP      r1,r0                 ;5267
003520  ddf2              BLE      |L1.13576|
                  |L1.13602|
;;;5270   	     	}
;;;5271   		}
;;;5272   
;;;5273        for(i=0;i<=NUMIST;i++)
003522  f04f0100          MOV      r1,#0
;;;5274   		{
;;;5275   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
003526  f06f0331          MVN      r3,#0x31
00352a  e00e              B        |L1.13642|
                  |L1.13612|
00352c  ebc102c1          RSB      r2,r1,r1,LSL #3
003530  eb021201          ADD      r2,r2,r1,LSL #4
003534  eb080282          ADD      r2,r8,r2,LSL #2
003538  f892402c          LDRB     r4,[r2,#0x2c]
00353c  2c01              CMP      r4,#1
00353e  d101              BNE      |L1.13636|
003540  f8a23050          STRH     r3,[r2,#0x50]
                  |L1.13636|
003544  f1010101          ADD      r1,r1,#1              ;5273
003548  b2c9              UXTB     r1,r1                 ;5273
                  |L1.13642|
00354a  4281              CMP      r1,r0                 ;5273
00354c  ddee              BLE      |L1.13612|
                  |L1.13646|
;;;5276   	   	}	
;;;5277   		 
;;;5278     	}
;;;5279   
;;;5280   
;;;5281   for(i=0;i<NUMIST;i++)
00354e  f04f0000          MOV      r0,#0
;;;5282        {
;;;5283        if(bps[i]._ist_blok_host_cnt!=0)
;;;5284             {
;;;5285             bps[i]._flags_tu=99;
003552  f04f0463          MOV      r4,#0x63
003556  f9bb1000          LDRSH    r1,[r11,#0]           ;5181
00355a  e00f              B        |L1.13692|
                  |L1.13660|
00355c  ebc002c0          RSB      r2,r0,r0,LSL #3       ;5283
003560  eb021200          ADD      r2,r2,r0,LSL #4       ;5283
003564  eb080282          ADD      r2,r8,r2,LSL #2       ;5283
003568  6bd3              LDR      r3,[r2,#0x3c]         ;5283
00356a  b123              CBZ      r3,|L1.13686|
00356c  f882402c          STRB     r4,[r2,#0x2c]
;;;5286   	     bps[i]._ist_blok_host_cnt--;
003570  f1a30301          SUB      r3,r3,#1
003574  63d3              STR      r3,[r2,#0x3c]
                  |L1.13686|
003576  f1000001          ADD      r0,r0,#1              ;5281
00357a  b2c0              UXTB     r0,r0                 ;5281
                  |L1.13692|
00357c  4288              CMP      r0,r1                 ;5281
00357e  dbed              BLT      |L1.13660|
;;;5287             }
;;;5288        }
;;;5289   
;;;5290   
;;;5291   
;;;5292   
;;;5293   b1Hz_sh=0;
003580  75f7              STRB     r7,[r6,#0x17]
;;;5294   
;;;5295   
;;;5296   num_of_wrks_bps=0;
003582  74f7              STRB     r7,[r6,#0x13]
;;;5297   tempUS=0;
003584  f04f0200          MOV      r2,#0
;;;5298   for(i=0;i<NUMIST;i++)
003588  4610              MOV      r0,r2
00358a  e013              B        |L1.13748|
                  |L1.13708|
;;;5299   	{
;;;5300   	if(bps[i]._state==bsWRK)
00358c  ebc003c0          RSB      r3,r0,r0,LSL #3
003590  eb031300          ADD      r3,r3,r0,LSL #4
003594  eb080383          ADD      r3,r8,r3,LSL #2
003598  789c              LDRB     r4,[r3,#2]
00359a  2c01              CMP      r4,#1
00359c  d107              BNE      |L1.13742|
;;;5301   		{
;;;5302   		num_of_wrks_bps++;
00359e  7cf4              LDRB     r4,[r6,#0x13]  ; num_of_wrks_bps
0035a0  f1040401          ADD      r4,r4,#1
0035a4  74f4              STRB     r4,[r6,#0x13]
;;;5303   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
0035a6  69db              LDR      r3,[r3,#0x1c]
0035a8  4293              CMP      r3,r2
0035aa  dd00              BLE      |L1.13742|
0035ac  b29a              UXTH     r2,r3
                  |L1.13742|
0035ae  f1000001          ADD      r0,r0,#1              ;5298
0035b2  b2c0              UXTB     r0,r0                 ;5298
                  |L1.13748|
0035b4  4288              CMP      r0,r1                 ;5298
0035b6  dbe9              BLT      |L1.13708|
;;;5304   		}
;;;5305   	}
;;;5306   Ubpsmax=tempUS;
0035b8  f8a62046          STRH     r2,[r6,#0x46]
;;;5307   
;;;5308   bPARALLEL_ENOUG=0;
0035bc  f8867021          STRB     r7,[r6,#0x21]
;;;5309   bPARALLEL_NOT_ENOUG=1;
0035c0  f886a020          STRB     r10,[r6,#0x20]
;;;5310   
;;;5311   for(i=0;i<NUMIST;i++)
0035c4  f04f0000          MOV      r0,#0
;;;5312   	{
;;;5313   	if(bps[i]._Ti>=TSIGN)
0035c8  4a62              LDR      r2,|L1.14164|
0035ca  f9b23000          LDRSH    r3,[r2,#0]
;;;5314   		{
;;;5315   		bPARALLEL_ENOUG=1;
;;;5316   		}
;;;5317   	if(bps[i]._Ti>=(TSIGN-5))
0035ce  f1a30405          SUB      r4,r3,#5
0035d2  e011              B        |L1.13816|
                  |L1.13780|
0035d4  ebc002c0          RSB      r2,r0,r0,LSL #3       ;5313
0035d8  eb021200          ADD      r2,r2,r0,LSL #4       ;5313
0035dc  eb080282          ADD      r2,r8,r2,LSL #2       ;5313
0035e0  6a92              LDR      r2,[r2,#0x28]         ;5313
0035e2  429a              CMP      r2,r3                 ;5313
0035e4  db01              BLT      |L1.13802|
0035e6  f886a021          STRB     r10,[r6,#0x21]        ;5315
                  |L1.13802|
0035ea  42a2              CMP      r2,r4
0035ec  db01              BLT      |L1.13810|
;;;5318   		{
;;;5319   		bPARALLEL_NOT_ENOUG=0;
0035ee  f8867020          STRB     r7,[r6,#0x20]
                  |L1.13810|
0035f2  f1000001          ADD      r0,r0,#1              ;5311
0035f6  b2c0              UXTB     r0,r0                 ;5311
                  |L1.13816|
0035f8  4288              CMP      r0,r1                 ;5311
0035fa  dbeb              BLT      |L1.13780|
;;;5320   		}
;;;5321   	}
;;;5322   
;;;5323   if(bPARALLEL_ENOUG==1)
0035fc  f8960021          LDRB     r0,[r6,#0x21]  ; bPARALLEL_ENOUG
003600  2801              CMP      r0,#1
003602  d00a              BEQ      |L1.13850|
;;;5324   	{
;;;5325   	bPARALLEL=1;
;;;5326   	}
;;;5327   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
003604  f8960022          LDRB     r0,[r6,#0x22]  ; bPARALLEL
003608  2800              CMP      r0,#0
00360a  d005              BEQ      |L1.13848|
00360c  f8960020          LDRB     r0,[r6,#0x20]  ; bPARALLEL_NOT_ENOUG
003610  2800              CMP      r0,#0
003612  d001              BEQ      |L1.13848|
;;;5328   	{
;;;5329   	bPARALLEL=0;
003614  f8867022          STRB     r7,[r6,#0x22]
                  |L1.13848|
;;;5330   	}
;;;5331   }
003618  e68f              B        |L1.13114|
                  |L1.13850|
00361a  f886a022          STRB     r10,[r6,#0x22]        ;5325
00361e  e68c              B        |L1.13114|
;;;5332   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;5339   //-----------------------------------------------
;;;5340   void powerAntiAliasingHndl(void)
003620  b570              PUSH     {r4-r6,lr}
;;;5341   {
;;;5342   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
003622  230a              MOVS     r3,#0xa
003624  4c4d              LDR      r4,|L1.14172|
003626  484c              LDR      r0,|L1.14168|
;;;5343   	{
;;;5344   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;5345   	if(powerSummaryCnt>=10)
;;;5346   		{
;;;5347   		power_summary=power_summary_tempo;
;;;5348   		}
;;;5349   	}
;;;5350   else powerSummaryCnt=0;
003628  2500              MOVS     r5,#0
00362a  6822              LDR      r2,[r4,#0]            ;5342  ; power_summary_tempo_old
00362c  6800              LDR      r0,[r0,#0]            ;5342  ; power_summary_tempo
00362e  fbb2f6f3          UDIV     r6,r2,r3              ;5342
003632  fbb0f1f3          UDIV     r1,r0,r3              ;5342
003636  4a4a              LDR      r2,|L1.14176|
003638  42b1              CMP      r1,r6                 ;5342
00363a  d10b              BNE      |L1.13908|
00363c  7811              LDRB     r1,[r2,#0]            ;5344  ; powerSummaryCnt
00363e  290f              CMP      r1,#0xf               ;5344
003640  d202              BCS      |L1.13896|
003642  f1010101          ADD      r1,r1,#1              ;5344
003646  7011              STRB     r1,[r2,#0]            ;5344
                  |L1.13896|
003648  7811              LDRB     r1,[r2,#0]            ;5345  ; powerSummaryCnt
00364a  290a              CMP      r1,#0xa               ;5345
00364c  d303              BCC      |L1.13910|
00364e  4945              LDR      r1,|L1.14180|
003650  6008              STR      r0,[r1,#0]            ;5347  ; power_summary
003652  e000              B        |L1.13910|
                  |L1.13908|
003654  7015              STRB     r5,[r2,#0]
                  |L1.13910|
;;;5351   power_summary_tempo_old=power_summary_tempo;
003656  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;5352   
;;;5353   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
003658  4843              LDR      r0,|L1.14184|
00365a  4c44              LDR      r4,|L1.14188|
00365c  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
003660  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
003664  fbb0f1f3          UDIV     r1,r0,r3
003668  fbb2f3f3          UDIV     r3,r2,r3
;;;5354   	{
;;;5355   	if(powerCurrentCnt<15)powerCurrentCnt++;
00366c  4a40              LDR      r2,|L1.14192|
00366e  4299              CMP      r1,r3                 ;5353
003670  d10b              BNE      |L1.13962|
003672  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
003674  290f              CMP      r1,#0xf
003676  d202              BCS      |L1.13950|
003678  f1010101          ADD      r1,r1,#1
00367c  7011              STRB     r1,[r2,#0]
                  |L1.13950|
;;;5356   	if(powerCurrentCnt>=10)
00367e  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
003680  290a              CMP      r1,#0xa
003682  d303              BCC      |L1.13964|
;;;5357   		{
;;;5358   		power_current=power_current_tempo;
003684  493b              LDR      r1,|L1.14196|
003686  8008              STRH     r0,[r1,#0]
003688  e000              B        |L1.13964|
                  |L1.13962|
;;;5359   		}
;;;5360   	}
;;;5361   else powerCurrentCnt=0;
00368a  7015              STRB     r5,[r2,#0]
                  |L1.13964|
;;;5362   power_current_tempo_old=power_current_tempo;
00368c  8020              STRH     r0,[r4,#0]
;;;5363   }
00368e  bd70              POP      {r4-r6,pc}
;;;5364   
                          ENDP

                  energometr_hndl PROC
;;;5474   //-----------------------------------------------
;;;5475   void energometr_hndl(void)
003690  4770              BX       lr
;;;5476   {
;;;5477   //2F 3F 21 0D 0A 
;;;5478   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;5479   //2F 3F 21 0D 0A 
;;;5480   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;5481   //06 30 35 31 0D 0A 
;;;5482   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;5483   
;;;5484   #ifdef CE102M_ENABLED
;;;5485   /*if
;;;5486   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;5487   
;;;5488   if(read_power_cnt_main_cnt)
;;;5489   	{
;;;5490   	read_power_cnt_main_cnt--;
;;;5491   	if(read_power_cnt_main_cnt==0)
;;;5492   		{
;;;5493   		rx_read_power_cnt_phase=0;
;;;5494   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;5495   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;5496   		else bENERGOMETR_UIP=0;
;;;5497   		//bENERGOMETR_UIP=2;
;;;5498   		}
;;;5499   	}
;;;5500   
;;;5501   if (rx_read_power_cnt_phase==0)
;;;5502   	{
;;;5503   	char command_with_crc[20];
;;;5504   	
;;;5505      	command_with_crc[0]=0xaf;  // /
;;;5506   	command_with_crc[1]=0x3f;  // ?
;;;5507   	command_with_crc[2]=0x21;  // !
;;;5508   	command_with_crc[3]=0x8d;  // CR
;;;5509   	command_with_crc[4]=0x0a;  // LF
;;;5510   
;;;5511   	uart_out__adr1(command_with_crc,5);
;;;5512   
;;;5513   	rx_wr_index1=0;
;;;5514   	rx_read_power_cnt_phase=1;
;;;5515   
;;;5516   	read_power_cnt_main_cnt=50;
;;;5517   	}
;;;5518   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;5519   	{
;;;5520   	char command_with_crc[20];
;;;5521   	
;;;5522   	command_with_crc[0]=0x06;  //  
;;;5523   	command_with_crc[1]=0x30;  // 0
;;;5524   	command_with_crc[2]=0x35;  // 5
;;;5525   	command_with_crc[3]=0xb1;  // 1
;;;5526   	command_with_crc[4]=0x8d;  // CR
;;;5527   	command_with_crc[5]=0x0a;  // LF
;;;5528   	
;;;5529   	uart_out__adr1(command_with_crc,6);
;;;5530   	
;;;5531   	rx_wr_index1=0;
;;;5532   	rx_read_power_cnt_phase=3;
;;;5533   
;;;5534   	read_power_cnt_main_cnt=50;
;;;5535   	}  
;;;5536   
;;;5537   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;5538   	{
;;;5539   	char command_with_crc[20];
;;;5540   	
;;;5541   	command_with_crc[0]=0x81;  //  
;;;5542   	command_with_crc[1]=0xd2;  // 0
;;;5543   	command_with_crc[2]=0xb1;  // 5
;;;5544   	command_with_crc[3]=0x82;  // 1
;;;5545   	command_with_crc[4]=0x56;  // CR
;;;5546   	command_with_crc[5]=0xcf;  // LF
;;;5547   	command_with_crc[6]=0xcc;  // 1
;;;5548   	command_with_crc[7]=0xd4;  // CR
;;;5549   	command_with_crc[8]=0x41;  // LF
;;;5550   	command_with_crc[9]=0x28;  // 1
;;;5551   	command_with_crc[10]=0xa9;  // CR
;;;5552   	command_with_crc[11]=0x03;  // LF
;;;5553   	command_with_crc[12]=0x5f;  // LF
;;;5554   		
;;;5555   	uart_out__adr1(command_with_crc,13);
;;;5556   	
;;;5557   	rx_wr_index1=0;
;;;5558   	rx_read_power_cnt_phase=5;
;;;5559   
;;;5560   	read_power_cnt_main_cnt=50;
;;;5561   	}  
;;;5562   
;;;5563   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;5564   	{
;;;5565   	char command_with_crc[20];
;;;5566   	
;;;5567   	command_with_crc[0]=0x81;  //  
;;;5568   	command_with_crc[1]=0xd2;  // 0
;;;5569   	command_with_crc[2]=0xb1;  // 5
;;;5570   	command_with_crc[3]=0x82;  // 1
;;;5571   	command_with_crc[4]=0xc3;  // CR
;;;5572   	command_with_crc[5]=0x55;  // LF
;;;5573   	command_with_crc[6]=0xd2;  // 1
;;;5574   	command_with_crc[7]=0xd2;  // CR
;;;5575   	command_with_crc[8]=0xc5;  // LF
;;;5576   	command_with_crc[9]=0x28;  // 1
;;;5577   	command_with_crc[10]=0xa9;  // CR
;;;5578   	command_with_crc[11]=0x03;  // LF
;;;5579   	command_with_crc[12]=0x5a;  // LF
;;;5580   		
;;;5581   	uart_out__adr1(command_with_crc,13);
;;;5582   	
;;;5583   	rx_wr_index1=0;
;;;5584   	rx_read_power_cnt_phase=9;
;;;5585   
;;;5586   	read_power_cnt_main_cnt=50;
;;;5587   	}  
;;;5588   
;;;5589   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;5590   	{
;;;5591   	char command_with_crc[20];
;;;5592   	
;;;5593   	command_with_crc[0]=0x81;  //  		01
;;;5594   	command_with_crc[1]=0xd2;  // R		52
;;;5595   	command_with_crc[2]=0xb1;  // 1		31
;;;5596   	command_with_crc[3]=0x82;  // 		02
;;;5597   	command_with_crc[4]=0x50;  // P		50
;;;5598   	command_with_crc[5]=0xcf;  // O	  	4f
;;;5599   	command_with_crc[6]=0xd7;  // W		57
;;;5600   	command_with_crc[7]=0xc5;  // E		45
;;;5601   	command_with_crc[8]=0x50;  // P		50
;;;5602   	command_with_crc[9]=0x28;  // (		28
;;;5603   	command_with_crc[10]=0xa9;  // )	29
;;;5604   	command_with_crc[11]=0x03;  // 		03
;;;5605   	command_with_crc[12]=0xe4;  // d	64
;;;5606   		
;;;5607   	uart_out__adr1(command_with_crc,13);
;;;5608   	
;;;5609   	rx_wr_index1=0;
;;;5610   	rx_read_power_cnt_phase=21;
;;;5611   
;;;5612   	read_power_cnt_main_cnt=50;
;;;5613   	}  
;;;5614   
;;;5615   
;;;5616   #endif
;;;5617   }
;;;5618   
                          ENDP

                  ips_current_average_hndl PROC
;;;5619   //-----------------------------------------------
;;;5620   void ips_current_average_hndl(void)
003692  e92d4ff0          PUSH     {r4-r11,lr}
;;;5621   {
003696  b089              SUB      sp,sp,#0x24
;;;5622   
;;;5623   if(++ica_timer_cnt>=10) 
003698  4e37              LDR      r6,|L1.14200|
;;;5624   	{
;;;5625   	ica_timer_cnt=0;
00369a  2400              MOVS     r4,#0
00369c  7830              LDRB     r0,[r6,#0]            ;5623  ; ica_timer_cnt
00369e  1c40              ADDS     r0,r0,#1              ;5623
0036a0  b2c0              UXTB     r0,r0                 ;5623
0036a2  7030              STRB     r0,[r6,#0]            ;5623
0036a4  280a              CMP      r0,#0xa               ;5623
0036a6  d300              BCC      |L1.13994|
0036a8  7034              STRB     r4,[r6,#0]
                  |L1.13994|
;;;5626   	}
;;;5627   
;;;5628   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
0036aa  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
0036ac  4f33              LDR      r7,|L1.14204|
;;;5629   	{
;;;5630   	
;;;5631   	ica_plazma[0]++;
;;;5632   
;;;5633   	ica_my_current=bps_I;
;;;5634   
;;;5635   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
0036ae  f8dfb0d0          LDR      r11,|L1.14208|
0036b2  4d21              LDR      r5,|L1.14136|
0036b4  bbf0              CBNZ     r0,|L1.14132|
0036b6  7ce8              LDRB     r0,[r5,#0x13]         ;5628  ; num_of_wrks_bps
0036b8  b3e0              CBZ      r0,|L1.14132|
0036ba  7e28              LDRB     r0,[r5,#0x18]         ;5628  ; spc_stat
0036bc  f8951024          LDRB     r1,[r5,#0x24]         ;5628  ; vz1_stat
0036c0  4308              ORRS     r0,r0,r1              ;5628
0036c2  f8951027          LDRB     r1,[r5,#0x27]         ;5628  ; vz2_stat
0036c6  4308              ORRS     r0,r0,r1              ;5628
0036c8  7839              LDRB     r1,[r7,#0]            ;5628  ; sp_ch_stat
0036ca  4308              ORRS     r0,r0,r1              ;5628
0036cc  d17f              BNE      |L1.14286|
0036ce  f8df90b4          LDR      r9,|L1.14212|
0036d2  f8990000          LDRB     r0,[r9,#0]            ;5631  ; ica_plazma
0036d6  f1000001          ADD      r0,r0,#1              ;5631
0036da  f8890000          STRB     r0,[r9,#0]            ;5631
0036de  482a              LDR      r0,|L1.14216|
0036e0  f9b01000          LDRSH    r1,[r0,#0]            ;5633  ; bps_I
0036e4  4829              LDR      r0,|L1.14220|
0036e6  8001              STRH     r1,[r0,#0]            ;5633
0036e8  4829              LDR      r0,|L1.14224|
;;;5636   		{
;;;5637   		ica_plazma[1]++;
;;;5638   		ica_u_necc--;
0036ea  f8dfa0a8          LDR      r10,|L1.14228|
0036ee  f9b02000          LDRSH    r2,[r0,#0]            ;5635  ; ica_your_current
0036f2  4648              MOV      r0,r9                 ;5631
0036f4  f9bac000          LDRSH    r12,[r10,#0]
0036f8  7843              LDRB     r3,[r0,#1]            ;5637
0036fa  4827              LDR      r0,|L1.14232|
0036fc  4291              CMP      r1,r2                 ;5635
0036fe  f9b08000          LDRSH    r8,[r0,#0]            ;5635
003702  4658              MOV      r0,r11                ;5635
003704  f9b00000          LDRSH    r0,[r0,#0]            ;5635
003708  dd48              BLE      |L1.14236|
00370a  eba10e02          SUB      lr,r1,r2              ;5635
00370e  f1be0f05          CMP      lr,#5                 ;5635
003712  db43              BLT      |L1.14236|
003714  2801              CMP      r0,#1                 ;5635
003716  d004              BEQ      |L1.14114|
003718  2802              CMP      r0,#2                 ;5635
00371a  d13f              BNE      |L1.14236|
00371c  f1b80f05          CMP      r8,#5                 ;5635
003720  dd3c              BLE      |L1.14236|
                  |L1.14114|
003722  f1030301          ADD      r3,r3,#1              ;5637
003726  f8893001          STRB     r3,[r9,#1]            ;5637
00372a  f1ac0c01          SUB      r12,r12,#1
00372e  f8aac000          STRH     r12,[r10,#0]
003732  e047              B        |L1.14276|
                  |L1.14132|
003734  e04b              B        |L1.14286|
003736  0000              DCW      0x0000
                  |L1.14136|
                          DCD      ||area_number.25||
                  |L1.14140|
                          DCD      bps
                  |L1.14144|
                          DCD      NUMIST
                  |L1.14148|
                          DCD      mess_data
                  |L1.14152|
                          DCD      num_necc
                  |L1.14156|
                          DCD      main_1Hz_cnt
                  |L1.14160|
                          DCD      ipsBlckStat
                  |L1.14164|
                          DCD      TSIGN
                  |L1.14168|
                          DCD      power_summary_tempo
                  |L1.14172|
                          DCD      power_summary_tempo_old
                  |L1.14176|
                          DCD      powerSummaryCnt
                  |L1.14180|
                          DCD      power_summary
                  |L1.14184|
                          DCD      power_current_tempo
                  |L1.14188|
                          DCD      power_current_tempo_old
                  |L1.14192|
                          DCD      powerCurrentCnt
                  |L1.14196|
                          DCD      power_current
                  |L1.14200|
                          DCD      ica_timer_cnt
                  |L1.14204|
                          DCD      sp_ch_stat
                  |L1.14208|
                          DCD      ICA_EN
                  |L1.14212|
                          DCD      ica_plazma
                  |L1.14216|
                          DCD      bps_I
                  |L1.14220|
                          DCD      ica_my_current
                  |L1.14224|
                          DCD      ica_your_current
                  |L1.14228|
                          DCD      ica_u_necc
                  |L1.14232|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.14236|
;;;5639   		}
;;;5640   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00379c  4291              CMP      r1,r2
00379e  da11              BGE      |L1.14276|
0037a0  1a51              SUBS     r1,r2,r1
0037a2  2905              CMP      r1,#5
0037a4  db0e              BLT      |L1.14276|
0037a6  2801              CMP      r0,#1
0037a8  d004              BEQ      |L1.14260|
0037aa  2802              CMP      r0,#2
0037ac  d10a              BNE      |L1.14276|
0037ae  f1b80f05          CMP      r8,#5
0037b2  dd07              BLE      |L1.14276|
                  |L1.14260|
;;;5641   		{
;;;5642   		ica_plazma[1]--;
0037b4  f1a30301          SUB      r3,r3,#1
0037b8  f8893001          STRB     r3,[r9,#1]
;;;5643   		ica_u_necc++;
0037bc  f10c0c01          ADD      r12,r12,#1
0037c0  f8aac000          STRH     r12,[r10,#0]
                  |L1.14276|
;;;5644   		}
;;;5645   	gran(&ica_u_necc,-100,100);
0037c4  2264              MOVS     r2,#0x64
0037c6  4251              RSBS     r1,r2,#0
0037c8  48ff              LDR      r0,|L1.15304|
0037ca  f7fffffe          BL       gran
                  |L1.14286|
;;;5646   	}
;;;5647   
;;;5648   
;;;5649   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) /*&& (num_of_wrks_bps)*/)
0037ce  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
0037d2  2801              CMP      r0,#1
0037d4  d167              BNE      |L1.14502|
0037d6  7e28              LDRB     r0,[r5,#0x18]  ; spc_stat
0037d8  f8951024          LDRB     r1,[r5,#0x24]  ; vz1_stat
0037dc  4308              ORRS     r0,r0,r1
0037de  f8951027          LDRB     r1,[r5,#0x27]  ; vz2_stat
0037e2  4308              ORRS     r0,r0,r1
0037e4  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
0037e6  4308              ORRS     r0,r0,r1
0037e8  d15d              BNE      |L1.14502|
;;;5650   	{
;;;5651   	
;;;5652   	if(ica_timer_cnt==8)
0037ea  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;5653   		{
;;;5654   		char modbus_buff[20],i;
;;;5655   		short crc_temp;
;;;5656   	
;;;5657   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0037ec  4bf7              LDR      r3,|L1.15308|
;;;5658   		modbus_buff[1] = 4;
;;;5659   		modbus_buff[2] = 0;
;;;5660   		modbus_buff[3] = 2;
;;;5661   		modbus_buff[4] = 0;	
;;;5662   		modbus_buff[5] = 1;
;;;5663   	
;;;5664   		crc_temp= CRC16_2(modbus_buff,6);
;;;5665   	
;;;5666   		modbus_buff[6]= (char)crc_temp;
;;;5667   		modbus_buff[7]= (char)(crc_temp>>8);
;;;5668   	
;;;5669   		if(ICA_CH==0)
0037ee  4ff8              LDR      r7,|L1.15312|
0037f0  2808              CMP      r0,#8                 ;5652
0037f2  d05b              BEQ      |L1.14508|
;;;5670   			{
;;;5671   			for (i=0;i<8;i++)
;;;5672   				{
;;;5673   				putchar_sc16is700(modbus_buff[i]);
;;;5674   				}
;;;5675   			}
;;;5676   		else if(ICA_CH==2)
;;;5677   			{
;;;5678   			uart_out1 (5,4,0,2,0,1,0);
;;;5679   			}
;;;5680   		}
;;;5681   	else
;;;5682   		{
;;;5683   		char modbus_buff[20],i;
;;;5684   		short crc_temp, tempSSSS;
;;;5685   
;;;5686   		tempSSSS=cntrl_stat_old;
0037f4  f9b5602c          LDRSH    r6,[r5,#0x2c]  ; cntrl_stat_old
;;;5687   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
0037f8  48f6              LDR      r0,|L1.15316|
0037fa  f06f0214          MVN      r2,#0x14
0037fe  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
003802  ebc01100          RSB      r1,r0,r0,LSL #4
003806  eb020c81          ADD      r12,r2,r1,LSL #2
00380a  f9b5204a          LDRSH    r2,[r5,#0x4a]  ; main_kb_cnt
00380e  4594              CMP      r12,r2
003810  d00b              BEQ      |L1.14378|
003812  f06f0c13          MVN      r12,#0x13
003816  eb0c0c81          ADD      r12,r12,r1,LSL #2
00381a  4594              CMP      r12,r2
00381c  d005              BEQ      |L1.14378|
00381e  f06f0c12          MVN      r12,#0x12
003822  eb0c0181          ADD      r1,r12,r1,LSL #2
003826  4291              CMP      r1,r2
003828  d101              BNE      |L1.14382|
                  |L1.14378|
00382a  f4404680          ORR      r6,r0,#0x4000
                  |L1.14382|
;;;5688   
;;;5689   
;;;5690   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00382e  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
003830  f88d0010          STRB     r0,[sp,#0x10]
;;;5691   		modbus_buff[1] = 6;
003834  f04f0006          MOV      r0,#6
003838  f88d0011          STRB     r0,[sp,#0x11]
;;;5692   		modbus_buff[2] = 0;
00383c  f88d4012          STRB     r4,[sp,#0x12]
;;;5693   		modbus_buff[3] = 100;
003840  f04f0064          MOV      r0,#0x64
003844  f88d0013          STRB     r0,[sp,#0x13]
;;;5694   		modbus_buff[4] = (char)(tempSSSS/256);	
003848  ea4f70e6          ASR      r0,r6,#31
00384c  eb066010          ADD      r0,r6,r0,LSR #24
003850  ea4f2120          ASR      r1,r0,#8
003854  f88d1014          STRB     r1,[sp,#0x14]
;;;5695   		modbus_buff[5] = (char)(tempSSSS%256);
003858  4630              MOV      r0,r6
00385a  f88d0015          STRB     r0,[sp,#0x15]
;;;5696   	
;;;5697   		crc_temp= CRC16_2(modbus_buff,6);
00385e  f04f0106          MOV      r1,#6
003862  a804              ADD      r0,sp,#0x10
003864  f7fffffe          BL       CRC16_2
;;;5698   	
;;;5699   		modbus_buff[6]= (char)crc_temp;
003868  f88d0016          STRB     r0,[sp,#0x16]
;;;5700   		modbus_buff[7]= (char)(crc_temp>>8);
00386c  ea4f2020          ASR      r0,r0,#8
003870  f88d0017          STRB     r0,[sp,#0x17]
;;;5701   	
;;;5702   		crc_temp= CRC16_2(modbus_buff,6);
003874  f04f0106          MOV      r1,#6
003878  a804              ADD      r0,sp,#0x10
00387a  f7fffffe          BL       CRC16_2
;;;5703   	
;;;5704   		plazma_ica1=tempSSSS;
00387e  f8a5607a          STRH     r6,[r5,#0x7a]
;;;5705   		if(ICA_CH==0)
003882  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
003886  b3f0              CBZ      r0,|L1.14598|
;;;5706   			{
;;;5707   			for (i=0;i<8;i++)
;;;5708   				{
;;;5709   				putchar_sc16is700(modbus_buff[i]);
;;;5710   				}
;;;5711   			}
;;;5712   		else if(ICA_CH==2)
003888  2802              CMP      r0,#2
00388a  d10c              BNE      |L1.14502|
;;;5713   			{
;;;5714   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
00388c  f89d0015          LDRB     r0,[sp,#0x15]
003890  f89d1014          LDRB     r1,[sp,#0x14]
003894  e9cd0401          STRD     r0,r4,[sp,#4]
003898  9100              STR      r1,[sp,#0]
00389a  2364              MOVS     r3,#0x64
00389c  2200              MOVS     r2,#0
00389e  2106              MOVS     r1,#6
0038a0  2005              MOVS     r0,#5
0038a2  f7fffffe          BL       uart_out1
                  |L1.14502|
;;;5715   			}
;;;5716   		}
;;;5717   	}
;;;5718   }
0038a6  b009              ADD      sp,sp,#0x24
0038a8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.14508|
0038ac  8818              LDRH     r0,[r3,#0]            ;5657  ; ICA_MODBUS_ADDRESS
0038ae  f88d0010          STRB     r0,[sp,#0x10]         ;5657
0038b2  f04f0004          MOV      r0,#4                 ;5658
0038b6  f88d0011          STRB     r0,[sp,#0x11]         ;5658
0038ba  f88d4012          STRB     r4,[sp,#0x12]         ;5659
0038be  f04f0002          MOV      r0,#2                 ;5660
0038c2  f88d0013          STRB     r0,[sp,#0x13]         ;5660
0038c6  f88d4014          STRB     r4,[sp,#0x14]         ;5661
0038ca  f04f0501          MOV      r5,#1                 ;5662
0038ce  f88d5015          STRB     r5,[sp,#0x15]         ;5662
0038d2  f04f0106          MOV      r1,#6                 ;5664
0038d6  a804              ADD      r0,sp,#0x10           ;5664
0038d8  f7fffffe          BL       CRC16_2
0038dc  f88d0016          STRB     r0,[sp,#0x16]         ;5666
0038e0  ea4f2020          ASR      r0,r0,#8              ;5667
0038e4  f88d0017          STRB     r0,[sp,#0x17]         ;5667
0038e8  f9b70000          LDRSH    r0,[r7,#0]            ;5669  ; ICA_CH
0038ec  b160              CBZ      r0,|L1.14600|
0038ee  2802              CMP      r0,#2                 ;5676
0038f0  d1d9              BNE      |L1.14502|
0038f2  e9cd4500          STRD     r4,r5,[sp,#0]         ;5678
0038f6  2302              MOVS     r3,#2                 ;5678
0038f8  2200              MOVS     r2,#0                 ;5678
0038fa  2104              MOVS     r1,#4                 ;5678
0038fc  2005              MOVS     r0,#5                 ;5678
0038fe  9402              STR      r4,[sp,#8]            ;5678
003900  f7fffffe          BL       uart_out1
003904  e7cf              B        |L1.14502|
                  |L1.14598|
003906  e00b              B        |L1.14624|
                  |L1.14600|
003908  f04f0400          MOV      r4,#0                 ;5671
00390c  ad04              ADD      r5,sp,#0x10           ;5654
                  |L1.14606|
00390e  5d28              LDRB     r0,[r5,r4]            ;5673
003910  f7fffffe          BL       putchar_sc16is700
003914  f1040401          ADD      r4,r4,#1              ;5671
003918  b2e4              UXTB     r4,r4                 ;5671
00391a  2c08              CMP      r4,#8                 ;5671
00391c  d3f7              BCC      |L1.14606|
00391e  e7c2              B        |L1.14502|
                  |L1.14624|
003920  f04f0400          MOV      r4,#0                 ;5707
003924  ad04              ADD      r5,sp,#0x10           ;5683
                  |L1.14630|
003926  5d28              LDRB     r0,[r5,r4]            ;5709
003928  f7fffffe          BL       putchar_sc16is700
00392c  f1040401          ADD      r4,r4,#1              ;5707
003930  b2e4              UXTB     r4,r4                 ;5707
003932  2c08              CMP      r4,#8                 ;5707
003934  d3f7              BCC      |L1.14630|
003936  e7b6              B        |L1.14502|
;;;5719   
                          ENDP

                  ipsBlckHndl PROC
;;;5802   //-----------------------------------------------
;;;5803   void ipsBlckHndl(char in)
003938  b510              PUSH     {r4,lr}
;;;5804   {
;;;5805   
;;;5806   ipsBlckStat=0;
00393a  4ba7              LDR      r3,|L1.15320|
00393c  f04f0000          MOV      r0,#0
003940  8018              STRH     r0,[r3,#0]
;;;5807   if(ipsBlckSrc==1)
003942  48a6              LDR      r0,|L1.15324|
003944  f04f0401          MOV      r4,#1
;;;5808   	{
;;;5809   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
003948  f44f62fa          MOV      r2,#0x7d0
00394c  f9b01000          LDRSH    r1,[r0,#0]            ;5807  ; ipsBlckSrc
003950  48a3              LDR      r0,|L1.15328|
003952  2901              CMP      r1,#1                 ;5807
003954  f9b00000          LDRSH    r0,[r0,#0]
003958  d006              BEQ      |L1.14696|
;;;5810   	}
;;;5811   else if(ipsBlckSrc==2)
00395a  2902              CMP      r1,#2
00395c  d10f              BNE      |L1.14718|
00395e  49a1              LDR      r1,|L1.15332|
;;;5812   	{
;;;5813   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
003960  f9b1101a          LDRSH    r1,[r1,#0x1a]
003964  b160              CBZ      r0,|L1.14720|
003966  e00d              B        |L1.14724|
                  |L1.14696|
003968  499e              LDR      r1,|L1.15332|
00396a  f9b11016          LDRSH    r1,[r1,#0x16]         ;5809
00396e  b908              CBNZ     r0,|L1.14708|
003970  4291              CMP      r1,r2                 ;5809
003972  dc03              BGT      |L1.14716|
                  |L1.14708|
003974  2801              CMP      r0,#1                 ;5809
003976  d102              BNE      |L1.14718|
003978  4291              CMP      r1,r2                 ;5809
00397a  da00              BGE      |L1.14718|
                  |L1.14716|
00397c  801c              STRH     r4,[r3,#0]            ;5809
                  |L1.14718|
;;;5814   	}
;;;5815   }
00397e  bd10              POP      {r4,pc}
                  |L1.14720|
003980  4291              CMP      r1,r2                 ;5813
003982  dc03              BGT      |L1.14732|
                  |L1.14724|
003984  2801              CMP      r0,#1                 ;5813
003986  d1fa              BNE      |L1.14718|
003988  4291              CMP      r1,r2                 ;5813
00398a  daf8              BGE      |L1.14718|
                  |L1.14732|
00398c  801c              STRH     r4,[r3,#0]            ;5813
00398e  bd10              POP      {r4,pc}
;;;5816   
                          ENDP

                  bps_drv PROC
;;;5817   //-----------------------------------------------
;;;5818   void bps_drv(char in)
003990  e92d41f0          PUSH     {r4-r8,lr}
;;;5819   {
003994  4606              MOV      r6,r0
;;;5820   char temp;
;;;5821   
;;;5822   if (bps[in]._device!=dSRC) return;
003996  ebc600c6          RSB      r0,r6,r6,LSL #3
00399a  4993              LDR      r1,|L1.15336|
00399c  eb001006          ADD      r0,r0,r6,LSL #4
0039a0  f8112020          LDRB     r2,[r1,r0,LSL #2]
0039a4  2a03              CMP      r2,#3
0039a6  d177              BNE      |L1.15000|
;;;5823   temp=bps[in]._flags_tm;
0039a8  eb010480          ADD      r4,r1,r0,LSL #2
0039ac  f8945042          LDRB     r5,[r4,#0x42]
;;;5824   if(temp&(1<<AV_T))
0039b0  07a8              LSLS     r0,r5,#30
0039b2  d517              BPL      |L1.14820|
;;;5825   	{
;;;5826   	if(bps[in]._temp_av_cnt<1200) 
0039b4  f9b41046          LDRSH    r1,[r4,#0x46]
0039b8  f44f6096          MOV      r0,#0x4b0
0039bc  4281              CMP      r1,r0
0039be  da22              BGE      |L1.14854|
;;;5827   		{
;;;5828   		bps[in]._temp_av_cnt++;
0039c0  f1010101          ADD      r1,r1,#1
0039c4  b209              SXTH     r1,r1
0039c6  f8a41046          STRH     r1,[r4,#0x46]
;;;5829   		if(bps[in]._temp_av_cnt>=1200)
0039ca  4281              CMP      r1,r0
0039cc  db1b              BLT      |L1.14854|
;;;5830   			{
;;;5831   			bps[in]._temp_av_cnt=1200;
0039ce  f8a40046          STRH     r0,[r4,#0x46]
;;;5832   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
0039d2  7860              LDRB     r0,[r4,#1]
0039d4  07c0              LSLS     r0,r0,#31
0039d6  d116              BNE      |L1.14854|
0039d8  2201              MOVS     r2,#1
0039da  2100              MOVS     r1,#0
0039dc  4630              MOV      r0,r6
0039de  f7fffffe          BL       avar_bps_hndl
0039e2  e010              B        |L1.14854|
                  |L1.14820|
;;;5833   			}
;;;5834   		}
;;;5835   	}
;;;5836   
;;;5837   else if(!(temp&(1<<AV_T)))
;;;5838   	{
;;;5839   	if(bps[in]._temp_av_cnt) 
0039e4  f9b41046          LDRSH    r1,[r4,#0x46]
0039e8  b169              CBZ      r1,|L1.14854|
;;;5840   		{
;;;5841   		bps[in]._temp_av_cnt--;
0039ea  f1a10101          SUB      r1,r1,#1
0039ee  b208              SXTH     r0,r1
0039f0  f8a40046          STRH     r0,[r4,#0x46]
;;;5842   		if(!bps[in]._temp_av_cnt)
0039f4  b938              CBNZ     r0,|L1.14854|
;;;5843   			{
;;;5844   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
0039f6  7860              LDRB     r0,[r4,#1]
0039f8  07c0              LSLS     r0,r0,#31
0039fa  d004              BEQ      |L1.14854|
0039fc  2200              MOVS     r2,#0
0039fe  4611              MOV      r1,r2
003a00  4630              MOV      r0,r6
003a02  f7fffffe          BL       avar_bps_hndl
                  |L1.14854|
;;;5845   			}
;;;5846   		} 	
;;;5847   
;;;5848   	}
;;;5849   
;;;5850   if((temp&(1<<AVUMAX)))
003a06  0729              LSLS     r1,r5,#28
;;;5851   	{
;;;5852   	if(bps[in]._umax_av_cnt<10) 
;;;5853   		{
;;;5854   		bps[in]._umax_av_cnt++;
;;;5855   		if(bps[in]._umax_av_cnt>=10)
;;;5856   			{ 
;;;5857   			bps[in]._umax_av_cnt=10;
003a08  f04f070a          MOV      r7,#0xa
003a0c  f04f0000          MOV      r0,#0                 ;5832
003a10  d515              BPL      |L1.14910|
003a12  f9b40048          LDRSH    r0,[r4,#0x48]         ;5852
003a16  280a              CMP      r0,#0xa               ;5852
003a18  da26              BGE      |L1.14952|
003a1a  f1000001          ADD      r0,r0,#1              ;5854
003a1e  b200              SXTH     r0,r0                 ;5854
003a20  f8a40048          STRH     r0,[r4,#0x48]         ;5854
003a24  280a              CMP      r0,#0xa               ;5855
003a26  db1f              BLT      |L1.14952|
003a28  f8a47048          STRH     r7,[r4,#0x48]
;;;5858   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
003a2c  7860              LDRB     r0,[r4,#1]
003a2e  0780              LSLS     r0,r0,#30
003a30  d41a              BMI      |L1.14952|
003a32  2201              MOVS     r2,#1
003a34  4611              MOV      r1,r2
003a36  4630              MOV      r0,r6
003a38  f7fffffe          BL       avar_bps_hndl
003a3c  e014              B        |L1.14952|
                  |L1.14910|
;;;5859   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;5860   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;5861   				{
;;;5862   				apv_cnt[in,0]=APV_INIT;
;;;5863   				apv_cnt[in,1]=APV_INIT;
;;;5864   				apv_cnt[in,2]=APV_INIT;
;;;5865   				apv_flags[in]=afOFF;
;;;5866   				}				*/
;;;5867   						
;;;5868   			}
;;;5869   		} 
;;;5870   	}		
;;;5871   else if(!(temp&(1<<AVUMAX)))
;;;5872   	{
;;;5873   	if(bps[in]._umax_av_cnt>0) 
003a3e  f9b41048          LDRSH    r1,[r4,#0x48]
003a42  2900              CMP      r1,#0
003a44  dd0d              BLE      |L1.14946|
;;;5874   		{
;;;5875   		bps[in]._umax_av_cnt--;
003a46  f1a10101          SUB      r1,r1,#1
003a4a  b208              SXTH     r0,r1
003a4c  f8a40048          STRH     r0,[r4,#0x48]
;;;5876   		if(bps[in]._umax_av_cnt==0)
003a50  b950              CBNZ     r0,|L1.14952|
;;;5877   			{
;;;5878   			bps[in]._umax_av_cnt=0;
;;;5879   			avar_bps_hndl(in,1,0);
003a52  f04f0200          MOV      r2,#0
003a56  f04f0101          MOV      r1,#1
003a5a  4630              MOV      r0,r6
003a5c  f7fffffe          BL       avar_bps_hndl
003a60  e002              B        |L1.14952|
                  |L1.14946|
;;;5880   	 //		apv_cnt[in,0]=0;
;;;5881   	//		apv_cnt[in,1]=0;
;;;5882   	 //		apv_cnt[in,2]=0;			
;;;5883   			}
;;;5884   		}
;;;5885   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
003a62  da01              BGE      |L1.14952|
003a64  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.14952|
;;;5886   	}
;;;5887   
;;;5888   if(temp&(1<<AVUMIN))
003a68  06e8              LSLS     r0,r5,#27
003a6a  d516              BPL      |L1.15002|
;;;5889   	{
;;;5890   	if(bps[in]._umin_av_cnt<10) 
003a6c  f9b4004a          LDRSH    r0,[r4,#0x4a]
003a70  280a              CMP      r0,#0xa
003a72  da20              BGE      |L1.15030|
;;;5891   		{
;;;5892   		bps[in]._umin_av_cnt++;
003a74  f1000001          ADD      r0,r0,#1
003a78  b200              SXTH     r0,r0
003a7a  f8a4004a          STRH     r0,[r4,#0x4a]
;;;5893   		if(bps[in]._umin_av_cnt>=10)
003a7e  280a              CMP      r0,#0xa
003a80  db19              BLT      |L1.15030|
;;;5894   			{ 
;;;5895   			bps[in]._umin_av_cnt=10;
003a82  f8a4704a          STRH     r7,[r4,#0x4a]
;;;5896   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
003a86  7860              LDRB     r0,[r4,#1]
003a88  0740              LSLS     r0,r0,#29
003a8a  d414              BMI      |L1.15030|
003a8c  2201              MOVS     r2,#1
003a8e  2102              MOVS     r1,#2
003a90  4630              MOV      r0,r6
003a92  f7fffffe          BL       avar_bps_hndl
003a96  e00e              B        |L1.15030|
                  |L1.15000|
003a98  e046              B        |L1.15144|
                  |L1.15002|
;;;5897   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;5898   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;5899   				{
;;;5900   				apv_cnt[in,0]=APV_INIT;
;;;5901   				apv_cnt[in,1]=APV_INIT;
;;;5902   				apv_cnt[in,2]=APV_INIT;
;;;5903   				apv_flags[in]=afOFF;
;;;5904   				}*/				
;;;5905   			}
;;;5906   		} 
;;;5907   	}	
;;;5908   	
;;;5909   else if(!(temp&(1<<AVUMIN)))
;;;5910   	{
;;;5911   	if(bps[in]._umin_av_cnt) 
003a9a  f9b4004a          LDRSH    r0,[r4,#0x4a]
003a9e  b150              CBZ      r0,|L1.15030|
;;;5912   		{
;;;5913   		bps[in]._umin_av_cnt--;
003aa0  f1a00001          SUB      r0,r0,#1
003aa4  b201              SXTH     r1,r0
003aa6  f8a4104a          STRH     r1,[r4,#0x4a]
;;;5914   		if(bps[in]._umin_av_cnt==0)
003aaa  b921              CBNZ     r1,|L1.15030|
;;;5915   			{
;;;5916   			bps[in]._umin_av_cnt=0;
;;;5917   			avar_bps_hndl(in,2,0);
003aac  2200              MOVS     r2,#0
003aae  2102              MOVS     r1,#2
003ab0  4630              MOV      r0,r6
003ab2  f7fffffe          BL       avar_bps_hndl
                  |L1.15030|
;;;5918   		//	apv_cnt[in,0]=0;
;;;5919   		//	apv_cnt[in,1]=0;
;;;5920   		//	apv_cnt[in,2]=0;
;;;5921   			}
;;;5922   		}
;;;5923   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;5924   	}
;;;5925   
;;;5926   //bps[in]._state=bsOFF;
;;;5927   
;;;5928   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
003ab6  7860              LDRB     r0,[r4,#1]
003ab8  0700              LSLS     r0,r0,#28
003aba  d003              BEQ      |L1.15044|
003abc  f04f0004          MOV      r0,#4
003ac0  70a0              STRB     r0,[r4,#2]
003ac2  e017              B        |L1.15092|
                  |L1.15044|
;;;5929   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
003ac4  4849              LDR      r0,|L1.15340|
003ac6  7800              LDRB     r0,[r0,#0]  ; net_av
003ac8  b130              CBZ      r0,|L1.15064|
003aca  78e0              LDRB     r0,[r4,#3]
003acc  2814              CMP      r0,#0x14
003ace  d903              BLS      |L1.15064|
;;;5930   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
003ad0  f04f0005          MOV      r0,#5
003ad4  70a0              STRB     r0,[r4,#2]
003ad6  e00d              B        |L1.15092|
                  |L1.15064|
;;;5931   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
003ad8  f8940042          LDRB     r0,[r4,#0x42]
003adc  0680              LSLS     r0,r0,#26
003ade  d503              BPL      |L1.15080|
003ae0  f04f0002          MOV      r0,#2
003ae4  70a0              STRB     r0,[r4,#2]
003ae6  e005              B        |L1.15092|
                  |L1.15080|
;;;5932   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
003ae8  78e0              LDRB     r0,[r4,#3]
003aea  2814              CMP      r0,#0x14
003aec  d202              BCS      |L1.15092|
003aee  f04f0001          MOV      r0,#1
003af2  70a0              STRB     r0,[r4,#2]
                  |L1.15092|
;;;5933   
;;;5934   
;;;5935   
;;;5936   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;5937   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;5938   //else bps[0]._state=ssNOT;
;;;5939   
;;;5940   //bps[in]._is_ready=0;
;;;5941   //bps[in]._is_wrk=0;
;;;5942   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;5943   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;5944   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;5945   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;5946   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;5947   //	{
;;;5948   //	bps[in]._flags_bp='B';// заблокирован
;;;5949   //	bps[in]._is_ready=1;
;;;5950   //	}
;;;5951   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;5952   //     {
;;;5953   //     bps[in]._flags_bp='W';// работает
;;;5954   //     bps[in]._is_ready=1;
;;;5955   //     bps[in]._is_wrk=1;
;;;5956        
;;;5957   //     }
;;;5958   //else bps[in]._is_ready=1;     
;;;5959   
;;;5960   
;;;5961   
;;;5962   
;;;5963   
;;;5964   /*
;;;5965   bps[in]._flags_tu&=BIN8(11111110);
;;;5966   if(bps[in]._ist_blok_cnt)
;;;5967   	{
;;;5968   	bps[in]._ist_blok_cnt--;
;;;5969   	bps[in]._flags_tu|=BIN8(1);
;;;5970   	}
;;;5971   
;;;5972   	   */ 
;;;5973   
;;;5974   //Пересброс БПСа при потере связи
;;;5975   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
003af4  78e0              LDRB     r0,[r4,#3]
003af6  280a              CMP      r0,#0xa
003af8  d306              BCC      |L1.15112|
003afa  f894002c          LDRB     r0,[r4,#0x2c]
003afe  f0400080          ORR      r0,r0,#0x80
003b02  f884002c          STRB     r0,[r4,#0x2c]
003b06  e005              B        |L1.15124|
                  |L1.15112|
;;;5976   else bps[in]._flags_tu&=BIN8(1111111);
003b08  f894002c          LDRB     r0,[r4,#0x2c]
003b0c  f000007f          AND      r0,r0,#0x7f
003b10  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.15124|
;;;5977   	
;;;5978   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
003b14  4936              LDR      r1,|L1.15344|
003b16  f9b40050          LDRSH    r0,[r4,#0x50]
003b1a  f9b1102a          LDRSH    r1,[r1,#0x2a]  ; cntrl_stat
003b1e  4408              ADD      r0,r0,r1
003b20  6320              STR      r0,[r4,#0x30]
;;;5979   bps[in]._vol_i=1000; 
003b22  f44f707a          MOV      r0,#0x3e8
003b26  6360              STR      r0,[r4,#0x34]
                  |L1.15144|
;;;5980   }
003b28  e8bd81f0          POP      {r4-r8,pc}
;;;5981   
                          ENDP

                  avt_hndl PROC
;;;5982   //-----------------------------------------------
;;;5983   void avt_hndl(void)
003b2c  b570              PUSH     {r4-r6,lr}
;;;5984   {
;;;5985   char i;
;;;5986   for(i=0;i<12;i++)
003b2e  f04f0000          MOV      r0,#0
;;;5987   	{
;;;5988   	if(eb2_data_short[6]&(1<<i))
003b32  4930              LDR      r1,|L1.15348|
;;;5989   		{
;;;5990   		avt_stat[i]=avtON;
003b34  4d30              LDR      r5,|L1.15352|
003b36  f04f0401          MOV      r4,#1                 ;5988
003b3a  f9b1200c          LDRSH    r2,[r1,#0xc]          ;5988
003b3e  4603              MOV      r3,r0                 ;5986
                  |L1.15168|
003b40  fa04f100          LSL      r1,r4,r0              ;5988
003b44  420a              TST      r2,r1                 ;5988
003b46  d001              BEQ      |L1.15180|
003b48  542c              STRB     r4,[r5,r0]
003b4a  e000              B        |L1.15182|
                  |L1.15180|
;;;5991   		}
;;;5992   	else avt_stat[i]=avtOFF;
003b4c  542b              STRB     r3,[r5,r0]
                  |L1.15182|
003b4e  f1000001          ADD      r0,r0,#1              ;5986
003b52  b2c0              UXTB     r0,r0                 ;5986
003b54  280c              CMP      r0,#0xc               ;5986
003b56  d3f3              BCC      |L1.15168|
;;;5993   	}
;;;5994   
;;;5995   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
003b58  4e28              LDR      r6,|L1.15356|
003b5a  7828              LDRB     r0,[r5,#0]  ; avt_stat
003b5c  4c28              LDR      r4,|L1.15360|
003b5e  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
003b60  4281              CMP      r1,r0
003b62  d00b              BEQ      |L1.15228|
003b64  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003b68  2901              CMP      r1,#1
003b6a  db07              BLT      |L1.15228|
;;;5996   	{
;;;5997   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
003b6c  2801              CMP      r0,#1
003b6e  d02a              BEQ      |L1.15302|
;;;5998   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
003b70  2300              MOVS     r3,#0
003b72  2201              MOVS     r2,#1
003b74  210b              MOVS     r1,#0xb
003b76  a023              ADR      r0,|L1.15364|
003b78  f7fffffe          BL       snmp_trap_send
                  |L1.15228|
;;;5999   	}
;;;6000   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
003b7c  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
003b7e  7868              LDRB     r0,[r5,#1]  ; avt_stat
003b80  4281              CMP      r1,r0
003b82  d00b              BEQ      |L1.15260|
003b84  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003b88  2902              CMP      r1,#2
003b8a  db07              BLT      |L1.15260|
;;;6001   	{
;;;6002   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
003b8c  2801              CMP      r0,#1
003b8e  d07e              BEQ      |L1.15502|
;;;6003   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
003b90  2300              MOVS     r3,#0
003b92  2202              MOVS     r2,#2
003b94  210b              MOVS     r1,#0xb
003b96  a020              ADR      r0,|L1.15384|
003b98  f7fffffe          BL       snmp_trap_send
                  |L1.15260|
;;;6004   	}
;;;6005   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
003b9c  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
003b9e  78a8              LDRB     r0,[r5,#2]  ; avt_stat
003ba0  4281              CMP      r1,r0
003ba2  d00b              BEQ      |L1.15292|
003ba4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003ba8  2903              CMP      r1,#3
003baa  db07              BLT      |L1.15292|
;;;6006   	{
;;;6007   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
003bac  2801              CMP      r0,#1
003bae  d06f              BEQ      |L1.15504|
;;;6008   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
003bb0  2300              MOVS     r3,#0
003bb2  2203              MOVS     r2,#3
003bb4  210b              MOVS     r1,#0xb
003bb6  a01d              ADR      r0,|L1.15404|
003bb8  f7fffffe          BL       snmp_trap_send
                  |L1.15292|
;;;6009   	}
;;;6010   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
003bbc  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
003bbe  78e8              LDRB     r0,[r5,#3]  ; avt_stat
003bc0  4281              CMP      r1,r0
003bc2  d049              BEQ      |L1.15448|
003bc4  e03c              B        |L1.15424|
                  |L1.15302|
003bc6  e0a4              B        |L1.15634|
                  |L1.15304|
                          DCD      ica_u_necc
                  |L1.15308|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.15312|
                          DCD      ICA_CH
                  |L1.15316|
                          DCD      TBAT
                  |L1.15320|
                          DCD      ipsBlckStat
                  |L1.15324|
                          DCD      ipsBlckSrc
                  |L1.15328|
                          DCD      ipsBlckLog
                  |L1.15332|
                          DCD      ||.bss||+0x40c
                  |L1.15336|
                          DCD      bps
                  |L1.15340|
                          DCD      net_av
                  |L1.15344|
                          DCD      ||area_number.25||
                  |L1.15348|
                          DCD      eb2_data_short
                  |L1.15352|
                          DCD      avt_stat
                  |L1.15356|
                          DCD      avt_stat_old
                  |L1.15360|
                          DCD      NUMAVT
                  |L1.15364|
003c04  4176746f          DCB      "Avtomat #1 is OFF",0
003c08  6d617420
003c0c  23312069
003c10  73204f46
003c14  4600    
003c16  00                DCB      0
003c17  00                DCB      0
                  |L1.15384|
003c18  4176746f          DCB      "Avtomat #2 is OFF",0
003c1c  6d617420
003c20  23322069
003c24  73204f46
003c28  4600    
003c2a  00                DCB      0
003c2b  00                DCB      0
                  |L1.15404|
003c2c  4176746f          DCB      "Avtomat #3 is OFF",0
003c30  6d617420
003c34  23332069
003c38  73204f46
003c3c  4600    
003c3e  00                DCB      0
003c3f  00                DCB      0
                  |L1.15424|
003c40  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c44  2904              CMP      r1,#4
003c46  db07              BLT      |L1.15448|
;;;6011   	{
;;;6012   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
003c48  2801              CMP      r0,#1
003c4a  d078              BEQ      |L1.15678|
;;;6013   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
003c4c  2300              MOVS     r3,#0
003c4e  2204              MOVS     r2,#4
003c50  210b              MOVS     r1,#0xb
003c52  a0ff              ADR      r0,|L1.16464|
003c54  f7fffffe          BL       snmp_trap_send
                  |L1.15448|
;;;6014   	}
;;;6015   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
003c58  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
003c5a  7928              LDRB     r0,[r5,#4]  ; avt_stat
003c5c  4281              CMP      r1,r0
003c5e  d00b              BEQ      |L1.15480|
003c60  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c64  2905              CMP      r1,#5
003c66  db07              BLT      |L1.15480|
;;;6016   	{
;;;6017   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
003c68  2801              CMP      r0,#1
003c6a  d070              BEQ      |L1.15694|
;;;6018   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
003c6c  2300              MOVS     r3,#0
003c6e  2205              MOVS     r2,#5
003c70  210b              MOVS     r1,#0xb
003c72  a0fc              ADR      r0,|L1.16484|
003c74  f7fffffe          BL       snmp_trap_send
                  |L1.15480|
;;;6019   	}
;;;6020   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
003c78  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
003c7a  7968              LDRB     r0,[r5,#5]  ; avt_stat
003c7c  4281              CMP      r1,r0
003c7e  d00e              BEQ      |L1.15518|
003c80  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c84  2906              CMP      r1,#6
003c86  db0a              BLT      |L1.15518|
;;;6021   	{
;;;6022   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
003c88  2801              CMP      r0,#1
003c8a  d067              BEQ      |L1.15708|
;;;6023   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
003c8c  e001              B        |L1.15506|
                  |L1.15502|
003c8e  e047              B        |L1.15648|
                  |L1.15504|
003c90  e04e              B        |L1.15664|
                  |L1.15506|
003c92  2300              MOVS     r3,#0
003c94  2206              MOVS     r2,#6
003c96  210b              MOVS     r1,#0xb
003c98  a0f7              ADR      r0,|L1.16504|
003c9a  f7fffffe          BL       snmp_trap_send
                  |L1.15518|
;;;6024   	}
;;;6025   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
003c9e  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
003ca0  79a8              LDRB     r0,[r5,#6]  ; avt_stat
003ca2  4281              CMP      r1,r0
003ca4  d00b              BEQ      |L1.15550|
003ca6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003caa  2907              CMP      r1,#7
003cac  db07              BLT      |L1.15550|
;;;6026   	{
;;;6027   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
003cae  2801              CMP      r0,#1
003cb0  d05b              BEQ      |L1.15722|
;;;6028   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
003cb2  2300              MOVS     r3,#0
003cb4  2207              MOVS     r2,#7
003cb6  210b              MOVS     r1,#0xb
003cb8  a0f4              ADR      r0,|L1.16524|
003cba  f7fffffe          BL       snmp_trap_send
                  |L1.15550|
;;;6029   	}
;;;6030   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
003cbe  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
003cc0  79e8              LDRB     r0,[r5,#7]  ; avt_stat
003cc2  4281              CMP      r1,r0
003cc4  d00b              BEQ      |L1.15582|
003cc6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003cca  2908              CMP      r1,#8
003ccc  db07              BLT      |L1.15582|
;;;6031   	{
;;;6032   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
003cce  2801              CMP      r0,#1
003cd0  d052              BEQ      |L1.15736|
;;;6033   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
003cd2  2300              MOVS     r3,#0
003cd4  2208              MOVS     r2,#8
003cd6  210b              MOVS     r1,#0xb
003cd8  a0f1              ADR      r0,|L1.16544|
003cda  f7fffffe          BL       snmp_trap_send
                  |L1.15582|
;;;6034   	}
;;;6035   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
003cde  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
003ce0  7a28              LDRB     r0,[r5,#8]  ; avt_stat
003ce2  4281              CMP      r1,r0
003ce4  d00b              BEQ      |L1.15614|
003ce6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003cea  2909              CMP      r1,#9
003cec  db07              BLT      |L1.15614|
;;;6036   	{
;;;6037   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
003cee  2801              CMP      r0,#1
003cf0  d049              BEQ      |L1.15750|
;;;6038   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
003cf2  2300              MOVS     r3,#0
003cf4  2209              MOVS     r2,#9
003cf6  210b              MOVS     r1,#0xb
003cf8  a0ee              ADR      r0,|L1.16564|
003cfa  f7fffffe          BL       snmp_trap_send
                  |L1.15614|
;;;6039   	}
;;;6040   
;;;6041   for(i=0;i<12;i++)
003cfe  f04f0000          MOV      r0,#0
                  |L1.15618|
;;;6042   	{
;;;6043   	avt_stat_old[i]=avt_stat[i];
003d02  5c29              LDRB     r1,[r5,r0]
003d04  5431              STRB     r1,[r6,r0]
003d06  f1000001          ADD      r0,r0,#1              ;6041
003d0a  b2c0              UXTB     r0,r0                 ;6041
003d0c  280c              CMP      r0,#0xc               ;6041
003d0e  d3f8              BCC      |L1.15618|
;;;6044   	}
;;;6045   }
003d10  bd70              POP      {r4-r6,pc}
                  |L1.15634|
003d12  2301              MOVS     r3,#1                 ;5997
003d14  461a              MOV      r2,r3                 ;5997
003d16  210b              MOVS     r1,#0xb               ;5997
003d18  a0eb              ADR      r0,|L1.16584|
003d1a  f7fffffe          BL       snmp_trap_send
003d1e  e72d              B        |L1.15228|
                  |L1.15648|
003d20  2301              MOVS     r3,#1                 ;6002
003d22  2202              MOVS     r2,#2                 ;6002
003d24  210b              MOVS     r1,#0xb               ;6002
003d26  a0ed              ADR      r0,|L1.16604|
003d28  f7fffffe          BL       snmp_trap_send
003d2c  e736              B        |L1.15260|
003d2e  e006              B        |L1.15678|
                  |L1.15664|
003d30  2301              MOVS     r3,#1                 ;6007
003d32  2203              MOVS     r2,#3                 ;6007
003d34  210b              MOVS     r1,#0xb               ;6007
003d36  a0ee              ADR      r0,|L1.16624|
003d38  f7fffffe          BL       snmp_trap_send
003d3c  e73e              B        |L1.15292|
                  |L1.15678|
003d3e  2301              MOVS     r3,#1                 ;6012
003d40  2204              MOVS     r2,#4                 ;6012
003d42  210b              MOVS     r1,#0xb               ;6012
003d44  a0ef              ADR      r0,|L1.16644|
003d46  f7fffffe          BL       snmp_trap_send
003d4a  e785              B        |L1.15448|
003d4c  e7ff              B        |L1.15694|
                  |L1.15694|
003d4e  2301              MOVS     r3,#1                 ;6017
003d50  2205              MOVS     r2,#5                 ;6017
003d52  210b              MOVS     r1,#0xb               ;6017
003d54  a0f0              ADR      r0,|L1.16664|
003d56  f7fffffe          BL       snmp_trap_send
003d5a  e78d              B        |L1.15480|
                  |L1.15708|
003d5c  2301              MOVS     r3,#1                 ;6022
003d5e  2206              MOVS     r2,#6                 ;6022
003d60  210b              MOVS     r1,#0xb               ;6022
003d62  a0f2              ADR      r0,|L1.16684|
003d64  f7fffffe          BL       snmp_trap_send
003d68  e799              B        |L1.15518|
                  |L1.15722|
003d6a  2301              MOVS     r3,#1                 ;6027
003d6c  2207              MOVS     r2,#7                 ;6027
003d6e  210b              MOVS     r1,#0xb               ;6027
003d70  a0f3              ADR      r0,|L1.16704|
003d72  f7fffffe          BL       snmp_trap_send
003d76  e7a2              B        |L1.15550|
                  |L1.15736|
003d78  2301              MOVS     r3,#1                 ;6032
003d7a  2208              MOVS     r2,#8                 ;6032
003d7c  210b              MOVS     r1,#0xb               ;6032
003d7e  a0f5              ADR      r0,|L1.16724|
003d80  f7fffffe          BL       snmp_trap_send
003d84  e7ab              B        |L1.15582|
                  |L1.15750|
003d86  2301              MOVS     r3,#1                 ;6037
003d88  2209              MOVS     r2,#9                 ;6037
003d8a  210b              MOVS     r1,#0xb               ;6037
003d8c  a0f6              ADR      r0,|L1.16744|
003d8e  f7fffffe          BL       snmp_trap_send
003d92  e7b4              B        |L1.15614|
;;;6046   
                          ENDP

                  bat_hndl PROC
;;;6047   //-----------------------------------------------
;;;6048   void bat_hndl(void)
003d94  b570              PUSH     {r4-r6,lr}
;;;6049   {
;;;6050   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;6051   	{
;;;6052   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;6053   		{
;;;6054   		char i;
;;;6055   		for(i=0;i<2;i++)
;;;6056   			{
;;;6057   			if(mess_data[1]&(1<<i))
;;;6058   				{
;;;6059   				bat[i]._cnt_to_block=0;
;;;6060        			bat[i]._rel_stat=0;
;;;6061        			}
;;;6062   			}
;;;6063   		}
;;;6064   	}
;;;6065   if(mess_find(_MESS_BAT_MASK_OFF))
;;;6066   	{		
;;;6067   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;6068   		{
;;;6069   		char i;
;;;6070   		for(i=0;i<2;i++)
;;;6071   			{
;;;6072   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;6073   				{
;;;6074   				bat[i]._cnt_to_block=20;
;;;6075   				bat[i]._rel_stat=1;
;;;6076        			}
;;;6077   			}
;;;6078   		
;;;6079   		}		
;;;6080   	}*/
;;;6081   
;;;6082   if(mess_find_unvol(MESS2BAT_HNDL))
003d96  20c8              MOVS     r0,#0xc8
003d98  f7fffffe          BL       mess_find_unvol
;;;6083   	{ 
;;;6084   	char i;
;;;6085   	
;;;6086   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;6087   		{
;;;6088   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6089   			{
;;;6090   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
003d9c  49f7              LDR      r1,|L1.16764|
003d9e  2200              MOVS     r2,#0                 ;6088
003da0  b3a8              CBZ      r0,|L1.15886|
003da2  4bf7              LDR      r3,|L1.16768|
;;;6091   			}
;;;6092   		}
;;;6093   
;;;6094   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;6095   		{
;;;6096   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6097   			{
;;;6098   			if(mess_data[1]&(1<<i))
003da4  2401              MOVS     r4,#1
003da6  6818              LDR      r0,[r3,#0]            ;6086  ; mess_data
003da8  28c9              CMP      r0,#0xc9              ;6086
003daa  d01c              BEQ      |L1.15846|
003dac  28ca              CMP      r0,#0xca              ;6094
003dae  d02f              BEQ      |L1.15888|
;;;6099   				{
;;;6100   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;6101   				}
;;;6102   			else bat[i]._cnt_to_block=0;
;;;6103   			}
;;;6104   		}
;;;6105   	else 
;;;6106   	 	{
;;;6107   		for(i=0;i<MAX_NUM_OF_BAT;i++)
003db0  4610              MOV      r0,r2
                  |L1.15794|
;;;6108   			{
;;;6109   			bat[i]._cnt_to_block=0;
003db2  eb000340          ADD      r3,r0,r0,LSL #1
003db6  eb031300          ADD      r3,r3,r0,LSL #4
003dba  f8012023          STRB     r2,[r1,r3,LSL #2]
003dbe  f1000001          ADD      r0,r0,#1              ;6107
003dc2  b2c0              UXTB     r0,r0                 ;6107
003dc4  2802              CMP      r0,#2                 ;6107
003dc6  d3f4              BCC      |L1.15794|
                  |L1.15816|
;;;6110   			}
;;;6111   
;;;6112   		}
;;;6113   	for(i=0;i<MAX_NUM_OF_BAT;i++)
003dc8  f04f0000          MOV      r0,#0
                  |L1.15820|
;;;6114   		{
;;;6115   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
003dcc  eb000340          ADD      r3,r0,r0,LSL #1
003dd0  eb031300          ADD      r3,r3,r0,LSL #4
003dd4  f8115023          LDRB     r5,[r1,r3,LSL #2]
003dd8  2d14              CMP      r5,#0x14
003dda  d939              BLS      |L1.15952|
003ddc  eb010383          ADD      r3,r1,r3,LSL #2
003de0  f883403c          STRB     r4,[r3,#0x3c]
003de4  e038              B        |L1.15960|
                  |L1.15846|
003de6  f04f0000          MOV      r0,#0                 ;6088
                  |L1.15850|
003dea  eb000340          ADD      r3,r0,r0,LSL #1       ;6090
003dee  eb031500          ADD      r5,r3,r0,LSL #4       ;6090
003df2  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6090
003df6  2b32              CMP      r3,#0x32              ;6090
003df8  d203              BCS      |L1.15874|
003dfa  f1030301          ADD      r3,r3,#1              ;6090
003dfe  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6090
                  |L1.15874|
003e02  f1000001          ADD      r0,r0,#1              ;6088
003e06  b2c0              UXTB     r0,r0                 ;6088
003e08  2802              CMP      r0,#2                 ;6088
003e0a  d3ee              BCC      |L1.15850|
003e0c  e7dc              B        |L1.15816|
                  |L1.15886|
003e0e  e029              B        |L1.15972|
                  |L1.15888|
003e10  f04f0000          MOV      r0,#0                 ;6096
003e14  685e              LDR      r6,[r3,#4]            ;6098
                  |L1.15894|
003e16  fa04f300          LSL      r3,r4,r0              ;6098
003e1a  421e              TST      r6,r3                 ;6098
003e1c  d00c              BEQ      |L1.15928|
003e1e  eb000340          ADD      r3,r0,r0,LSL #1       ;6100
003e22  eb031500          ADD      r5,r3,r0,LSL #4       ;6100
003e26  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6100
003e2a  2b32              CMP      r3,#0x32              ;6100
003e2c  d20a              BCS      |L1.15940|
003e2e  f1030301          ADD      r3,r3,#1              ;6100
003e32  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6100
003e36  e005              B        |L1.15940|
                  |L1.15928|
003e38  eb000340          ADD      r3,r0,r0,LSL #1       ;6102
003e3c  eb031300          ADD      r3,r3,r0,LSL #4       ;6102
003e40  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6102
                  |L1.15940|
003e44  f1000001          ADD      r0,r0,#1              ;6096
003e48  b2c0              UXTB     r0,r0                 ;6096
003e4a  2802              CMP      r0,#2                 ;6096
003e4c  d3e3              BCC      |L1.15894|
003e4e  e7bb              B        |L1.15816|
                  |L1.15952|
;;;6116   		else bat[i]._rel_stat=0;
003e50  eb010383          ADD      r3,r1,r3,LSL #2
003e54  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.15960|
003e58  f1000001          ADD      r0,r0,#1              ;6113
003e5c  b2c0              UXTB     r0,r0                 ;6113
003e5e  2802              CMP      r0,#2                 ;6113
003e60  d3b4              BCC      |L1.15820|
;;;6117   		}
;;;6118   
;;;6119   	}
;;;6120   
;;;6121   else 
;;;6122   	{
;;;6123   	char i;
;;;6124   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6125   		{
;;;6126   		bat[i]._cnt_to_block=0;
;;;6127   		bat[i]._rel_stat=0;
;;;6128   		}
;;;6129   
;;;6130   	}
;;;6131   
;;;6132   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;6133   	{
;;;6134   	if(PARAM_BAT_ON)
;;;6135   		{
;;;6136   		char i;
;;;6137   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6138   			{
;;;6139   			if(mess_data[1]&(1<<i))
;;;6140   				{
;;;6141   				bat[i]._cnt_to_block=0;
;;;6142   				bat[i]._rel_stat=0;
;;;6143   				}
;;;6144   			}
;;;6145   		}
;;;6146   	} */
;;;6147   }
003e62  bd70              POP      {r4-r6,pc}
                  |L1.15972|
003e64  f04f0000          MOV      r0,#0                 ;6124
                  |L1.15976|
003e68  eb000340          ADD      r3,r0,r0,LSL #1       ;6126
003e6c  eb031300          ADD      r3,r3,r0,LSL #4       ;6126
003e70  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6126
003e74  eb010383          ADD      r3,r1,r3,LSL #2       ;6127
003e78  f883203c          STRB     r2,[r3,#0x3c]         ;6127
003e7c  f1000001          ADD      r0,r0,#1              ;6124
003e80  b2c0              UXTB     r0,r0                 ;6124
003e82  2802              CMP      r0,#2                 ;6124
003e84  d3f0              BCC      |L1.15976|
003e86  bd70              POP      {r4-r6,pc}
;;;6148   
                          ENDP

                  bat_drv PROC
;;;6786   //-----------------------------------------------
;;;6787   void bat_drv(char in)
003e88  e92d4ffe          PUSH     {r1-r11,lr}
;;;6788   {
003e8c  4605              MOV      r5,r0
;;;6789   unsigned short /*tempUS,*/tempUS_;
;;;6790   unsigned long tempUL,tempUL_;
;;;6791   unsigned short b_zar;
;;;6792   //static unsigned short time_cnt[2];
;;;6793   
;;;6794   
;;;6795   
;;;6796   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
003e8e  49bd              LDR      r1,|L1.16772|
003e90  f9310015          LDRSH    r0,[r1,r5,LSL #1]
003e94  b118              CBZ      r0,|L1.16030|
003e96  f1a00001          SUB      r0,r0,#1
003e9a  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.16030|
;;;6797   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
003e9e  4ab9              LDR      r2,|L1.16772|
003ea0  1d12              ADDS     r2,r2,#4
003ea2  f9320015          LDRSH    r0,[r2,r5,LSL #1]
003ea6  b118              CBZ      r0,|L1.16048|
003ea8  f1a00001          SUB      r0,r0,#1
003eac  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.16048|
;;;6798   
;;;6799   
;;;6800   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
003eb0  eb050045          ADD      r0,r5,r5,LSL #1
003eb4  4bb1              LDR      r3,|L1.16764|
003eb6  eb001005          ADD      r0,r0,r5,LSL #4
003eba  eb030480          ADD      r4,r3,r0,LSL #2
003ebe  4bb2              LDR      r3,|L1.16776|
003ec0  9002              STR      r0,[sp,#8]
003ec2  f9b40008          LDRSH    r0,[r4,#8]
003ec6  f9b33000          LDRSH    r3,[r3,#0]  ; IZMAX
003eca  f04f0b64          MOV      r11,#0x64
003ece  4298              CMP      r0,r3
003ed0  dd01              BLE      |L1.16086|
003ed2  f821b015          STRH     r11,[r1,r5,LSL #1]
                  |L1.16086|
;;;6801   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
003ed6  2800              CMP      r0,#0
003ed8  da01              BGE      |L1.16094|
003eda  f822b015          STRH     r11,[r2,r5,LSL #1]
                  |L1.16094|
;;;6802   
;;;6803   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;6804        {
;;;6805        if(!cntrl_stat_blok_cnt_)
003ede  48a9              LDR      r0,|L1.16772|
003ee0  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;6803
003ee4  38a4              SUBS     r0,r0,#0xa4
003ee6  2700              MOVS     r7,#0
003ee8  b14b              CBZ      r3,|L1.16126|
003eea  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;6803
003eee  b133              CBZ      r3,|L1.16126|
003ef0  f8b0306e          LDRH     r3,[r0,#0x6e]  ; cntrl_stat_blok_cnt_
003ef4  b1a3              CBZ      r3,|L1.16160|
;;;6806             {
;;;6807             cntrl_stat_blok_cnt_=600; 
;;;6808             cntrl_stat_blok_cnt_plus[in]=0;
;;;6809             cntrl_stat_blok_cnt_minus[in]=0;
;;;6810             }
;;;6811        else cntrl_stat_blok_cnt=3000;
003ef6  f64031b8          MOV      r1,#0xbb8
003efa  f8a0106c          STRH     r1,[r0,#0x6c]
                  |L1.16126|
;;;6812        }
;;;6813   cntrl_stat_blok_cnt=0;
003efe  f8a0706c          STRH     r7,[r0,#0x6c]
;;;6814   
;;;6815   if(++(bat[in]._time_cnt)>=10)
003f02  f894003e          LDRB     r0,[r4,#0x3e]
003f06  1c40              ADDS     r0,r0,#1
003f08  b2c0              UXTB     r0,r0
003f0a  f884003e          STRB     r0,[r4,#0x3e]
003f0e  280a              CMP      r0,#0xa
003f10  d301              BCC      |L1.16150|
;;;6816   	{
;;;6817   	bat[in]._time_cnt=0;
003f12  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.16150|
;;;6818   	//bat[in]._zar_cnt++;
;;;6819   	}
;;;6820   
;;;6821   if(main_10Hz_cnt==50)
003f16  4e9d              LDR      r6,|L1.16780|
003f18  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
003f1a  2832              CMP      r0,#0x32
003f1c  d009              BEQ      |L1.16178|
003f1e  e017              B        |L1.16208|
                  |L1.16160|
003f20  f44f7316          MOV      r3,#0x258             ;6807
003f24  f8a0306e          STRH     r3,[r0,#0x6e]         ;6807
003f28  f8217015          STRH     r7,[r1,r5,LSL #1]     ;6808
003f2c  f8227015          STRH     r7,[r2,r5,LSL #1]     ;6809
003f30  e7e5              B        |L1.16126|
                  |L1.16178|
;;;6822   	{
;;;6823   	if(!bat[in]._rel_stat)
003f32  f894003c          LDRB     r0,[r4,#0x3c]
003f36  b958              CBNZ     r0,|L1.16208|
;;;6824   		{
;;;6825   		
;;;6826   		if(bat[in]._Ub<80) 
003f38  f9b40002          LDRSH    r0,[r4,#2]
003f3c  2850              CMP      r0,#0x50
003f3e  da07              BGE      |L1.16208|
;;;6827   			{
;;;6828   			
;;;6829   			if(!(bat[in]._av&1))
003f40  f894003d          LDRB     r0,[r4,#0x3d]
003f44  07c0              LSLS     r0,r0,#31
003f46  d103              BNE      |L1.16208|
;;;6830   				{
;;;6831   				avar_bat_hndl(in,1);
003f48  2101              MOVS     r1,#1
003f4a  4628              MOV      r0,r5
003f4c  f7fffffe          BL       avar_bat_hndl
                  |L1.16208|
;;;6832   				//if(in==0)plazma_bat++;
;;;6833   				}
;;;6834   			}				
;;;6835   
;;;6836   		}
;;;6837   	}
;;;6838   
;;;6839   if(main_10Hz_cnt>200)
003f50  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;6840   	{
;;;6841   	if(abs(bat[in]._Ib)>IKB) 
003f54  4e8e              LDR      r6,|L1.16784|
003f56  28c8              CMP      r0,#0xc8              ;6839
003f58  dd0f              BLE      |L1.16250|
003f5a  f9b40008          LDRSH    r0,[r4,#8]
003f5e  f7fffffe          BL       abs
003f62  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
003f66  4288              CMP      r0,r1
003f68  dd07              BLE      |L1.16250|
;;;6842   		{
;;;6843   		if((bat[in]._av&1))avar_bat_hndl(in,0);
003f6a  f894003d          LDRB     r0,[r4,#0x3d]
003f6e  07c0              LSLS     r0,r0,#31
003f70  d003              BEQ      |L1.16250|
003f72  2100              MOVS     r1,#0
003f74  4628              MOV      r0,r5
003f76  f7fffffe          BL       avar_bat_hndl
                  |L1.16250|
;;;6844   		}
;;;6845   	}
;;;6846   
;;;6847   #ifdef APSENERGIA
;;;6848   //if(bat[in]._Ib>(-IKB))
;;;6849   
;;;6850   
;;;6851   #endif
;;;6852   
;;;6853   if(bat[in]._Ib>(-IKB))
003f7a  4885              LDR      r0,|L1.16784|
003f7c  f9b41008          LDRSH    r1,[r4,#8]
003f80  f9b00000          LDRSH    r0,[r0,#0]  ; IKB
003f84  4240              RSBS     r0,r0,#0
003f86  4281              CMP      r1,r0
003f88  dd14              BLE      |L1.16308|
;;;6854   	{
;;;6855   	if(bat[in]._cnt_wrk<10)
003f8a  7b60              LDRB     r0,[r4,#0xd]
003f8c  280a              CMP      r0,#0xa
003f8e  d20d              BCS      |L1.16300|
;;;6856   		{
;;;6857   		bat[in]._cnt_wrk++;
003f90  f1000001          ADD      r0,r0,#1
003f94  b2c0              UXTB     r0,r0
003f96  7360              STRB     r0,[r4,#0xd]
;;;6858   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
003f98  280a              CMP      r0,#0xa
003f9a  d306              BCC      |L1.16298|
003f9c  7ba0              LDRB     r0,[r4,#0xe]
003f9e  2800              CMP      r0,#0
003fa0  d003              BEQ      |L1.16298|
;;;6859   			{
;;;6860   			bat[in]._wrk=0;
003fa2  73a7              STRB     r7,[r4,#0xe]
;;;6861   			//beep_init(0x7L,'O');
;;;6862   			//wrk_mem_hndl(0);
;;;6863   			wrk_mem_hndl(in);
003fa4  4628              MOV      r0,r5
003fa6  f7fffffe          BL       wrk_mem_hndl
                  |L1.16298|
003faa  e110              B        |L1.16846|
                  |L1.16300|
;;;6864   			//plazma++;
;;;6865   			}
;;;6866   		}
;;;6867   	else bat[in]._cnt_wrk=10;	
003fac  f04f000a          MOV      r0,#0xa
003fb0  7360              STRB     r0,[r4,#0xd]
003fb2  e10c              B        |L1.16846|
                  |L1.16308|
;;;6868   	}	
;;;6869   
;;;6870   else if(bat[in]._Ib<(-IKB))
003fb4  da40              BGE      |L1.16440|
;;;6871   	{
;;;6872   	if(bat[in]._cnt_wrk)
003fb6  7b60              LDRB     r0,[r4,#0xd]
003fb8  b3f0              CBZ      r0,|L1.16440|
;;;6873   		{
;;;6874   		bat[in]._cnt_wrk--;
003fba  f1a00001          SUB      r0,r0,#1
003fbe  b2c0              UXTB     r0,r0
003fc0  7360              STRB     r0,[r4,#0xd]
;;;6875   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
003fc2  bbc8              CBNZ     r0,|L1.16440|
003fc4  7ba0              LDRB     r0,[r4,#0xe]
003fc6  bbb8              CBNZ     r0,|L1.16440|
;;;6876   			{
;;;6877   			bat[in]._wrk=1;
003fc8  f04f0001          MOV      r0,#1
003fcc  73a0              STRB     r0,[r4,#0xe]
;;;6878   
;;;6879   				{
;;;6880   				char temp;
;;;6881   				signed short temp_temp;
;;;6882   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
003fce  4871              LDR      r0,|L1.16788|
003fd0  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
003fd2  f1000001          ADD      r0,r0,#1
003fd6  f0000007          AND      r0,r0,#7
003fda  eb040040          ADD      r0,r4,r0,LSL #1
003fde  8c00              LDRH     r0,[r0,#0x20]
003fe0  9000              STR      r0,[sp,#0]
;;;6883   			 
;;;6884   				temp=LPC_RTC->YEAR;
003fe2  4e6d              LDR      r6,|L1.16792|
003fe4  8bb0              LDRH     r0,[r6,#0x1c]
003fe6  9001              STR      r0,[sp,#4]
;;;6885   				gran_char((signed char*)&temp,1,99);
003fe8  f04f0263          MOV      r2,#0x63
003fec  f04f0101          MOV      r1,#1
003ff0  a801              ADD      r0,sp,#4
003ff2  f7fffffe          BL       gran_char
;;;6886   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
003ff6  f104041c          ADD      r4,r4,#0x1c
003ffa  f89d0004          LDRB     r0,[sp,#4]
003ffe  7620              STRB     r0,[r4,#0x18]
;;;6887   			
;;;6888   				temp=LPC_RTC->MONTH;
004000  7e30              LDRB     r0,[r6,#0x18]
004002  9001              STR      r0,[sp,#4]
;;;6889   				gran_char((signed char*)&temp,1,12);
004004  f04f020c          MOV      r2,#0xc
004008  f04f0101          MOV      r1,#1
00400c  a801              ADD      r0,sp,#4
00400e  f7fffffe          BL       gran_char
;;;6890   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
004012  f89d0004          LDRB     r0,[sp,#4]
004016  7660              STRB     r0,[r4,#0x19]
;;;6891   			
;;;6892   				temp=LPC_RTC->DOM;
004018  7b30              LDRB     r0,[r6,#0xc]
00401a  9001              STR      r0,[sp,#4]
;;;6893   				gran_char((signed char*)&temp,1,31);
00401c  221f              MOVS     r2,#0x1f
00401e  2101              MOVS     r1,#1
004020  a801              ADD      r0,sp,#4
004022  f7fffffe          BL       gran_char
;;;6894   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
004026  f89d0004          LDRB     r0,[sp,#4]
00402a  76a0              STRB     r0,[r4,#0x1a]
;;;6895   				
;;;6896   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
00402c  f89d0000          LDRB     r0,[sp,#0]
004030  76e0              STRB     r0,[r4,#0x1b]
;;;6897   
;;;6898   				temp=LPC_RTC->HOUR;
004032  7a30              LDRB     r0,[r6,#8]
004034  9001              STR      r0,[sp,#4]
;;;6899   				gran_char((signed char*)&temp,0,23);
004036  e000              B        |L1.16442|
                  |L1.16440|
004038  e0c9              B        |L1.16846|
                  |L1.16442|
00403a  2217              MOVS     r2,#0x17
00403c  2100              MOVS     r1,#0
00403e  a801              ADD      r0,sp,#4
004040  f7fffffe          BL       gran_char
;;;6900   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
004044  f89d0004          LDRB     r0,[sp,#4]
004048  7720              STRB     r0,[r4,#0x1c]
;;;6901                  	
;;;6902   				temp=LPC_RTC->MIN;
00404a  7930              LDRB     r0,[r6,#4]
00404c  9001              STR      r0,[sp,#4]
;;;6903   				gran_char((signed char*)&temp,0,59);
00404e  e0a5              B        |L1.16796|
                  |L1.16464|
004050  4176746f          DCB      "Avtomat #4 is OFF",0
004054  6d617420
004058  23342069
00405c  73204f46
004060  4600    
004062  00                DCB      0
004063  00                DCB      0
                  |L1.16484|
004064  4176746f          DCB      "Avtomat #5 is OFF",0
004068  6d617420
00406c  23352069
004070  73204f46
004074  4600    
004076  00                DCB      0
004077  00                DCB      0
                  |L1.16504|
004078  4176746f          DCB      "Avtomat #6 is OFF",0
00407c  6d617420
004080  23362069
004084  73204f46
004088  4600    
00408a  00                DCB      0
00408b  00                DCB      0
                  |L1.16524|
00408c  4176746f          DCB      "Avtomat #7 is OFF",0
004090  6d617420
004094  23372069
004098  73204f46
00409c  4600    
00409e  00                DCB      0
00409f  00                DCB      0
                  |L1.16544|
0040a0  4176746f          DCB      "Avtomat #8 is OFF",0
0040a4  6d617420
0040a8  23382069
0040ac  73204f46
0040b0  4600    
0040b2  00                DCB      0
0040b3  00                DCB      0
                  |L1.16564|
0040b4  4176746f          DCB      "Avtomat #9 is OFF",0
0040b8  6d617420
0040bc  23392069
0040c0  73204f46
0040c4  4600    
0040c6  00                DCB      0
0040c7  00                DCB      0
                  |L1.16584|
0040c8  4176746f          DCB      "Avtomat #1 is ON ",0
0040cc  6d617420
0040d0  23312069
0040d4  73204f4e
0040d8  2000    
0040da  00                DCB      0
0040db  00                DCB      0
                  |L1.16604|
0040dc  4176746f          DCB      "Avtomat #2 is ON ",0
0040e0  6d617420
0040e4  23322069
0040e8  73204f4e
0040ec  2000    
0040ee  00                DCB      0
0040ef  00                DCB      0
                  |L1.16624|
0040f0  4176746f          DCB      "Avtomat #3 is ON ",0
0040f4  6d617420
0040f8  23332069
0040fc  73204f4e
004100  2000    
004102  00                DCB      0
004103  00                DCB      0
                  |L1.16644|
004104  4176746f          DCB      "Avtomat #4 is ON ",0
004108  6d617420
00410c  23342069
004110  73204f4e
004114  2000    
004116  00                DCB      0
004117  00                DCB      0
                  |L1.16664|
004118  4176746f          DCB      "Avtomat #5 is ON ",0
00411c  6d617420
004120  23352069
004124  73204f4e
004128  2000    
00412a  00                DCB      0
00412b  00                DCB      0
                  |L1.16684|
00412c  4176746f          DCB      "Avtomat #6 is ON ",0
004130  6d617420
004134  23362069
004138  73204f4e
00413c  2000    
00413e  00                DCB      0
00413f  00                DCB      0
                  |L1.16704|
004140  4176746f          DCB      "Avtomat #7 is ON ",0
004144  6d617420
004148  23372069
00414c  73204f4e
004150  2000    
004152  00                DCB      0
004153  00                DCB      0
                  |L1.16724|
004154  4176746f          DCB      "Avtomat #8 is ON ",0
004158  6d617420
00415c  23382069
004160  73204f4e
004164  2000    
004166  00                DCB      0
004167  00                DCB      0
                  |L1.16744|
004168  4176746f          DCB      "Avtomat #9 is ON ",0
00416c  6d617420
004170  23392069
004174  73204f4e
004178  2000    
00417a  00                DCB      0
00417b  00                DCB      0
                  |L1.16764|
                          DCD      bat
                  |L1.16768|
                          DCD      mess_data
                  |L1.16772|
                          DCD      ||area_number.25||+0xa4
                  |L1.16776|
                          DCD      IZMAX
                  |L1.16780|
                          DCD      main_10Hz_cnt
                  |L1.16784|
                          DCD      IKB
                  |L1.16788|
                          DCD      bat_u_old_cnt
                  |L1.16792|
                          DCD      0x40024020
                  |L1.16796|
00419c  223b              MOVS     r2,#0x3b
00419e  2100              MOVS     r1,#0
0041a0  a801              ADD      r0,sp,#4
0041a2  f7fffffe          BL       gran_char
;;;6904   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
0041a6  f89d0004          LDRB     r0,[sp,#4]
0041aa  7760              STRB     r0,[r4,#0x1d]
;;;6905   	          
;;;6906   				temp=LPC_RTC->SEC;
0041ac  7830              LDRB     r0,[r6,#0]
0041ae  9001              STR      r0,[sp,#4]
;;;6907   				gran_char((signed char*)&temp,0,59);
0041b0  223b              MOVS     r2,#0x3b
0041b2  2100              MOVS     r1,#0
0041b4  a801              ADD      r0,sp,#4
0041b6  f7fffffe          BL       gran_char
;;;6908   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
0041ba  f89d0004          LDRB     r0,[sp,#4]
0041be  77a0              STRB     r0,[r4,#0x1e]
;;;6909   			
;;;6910   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
0041c0  f89d0001          LDRB     r0,[sp,#1]
0041c4  77e0              STRB     r0,[r4,#0x1f]
;;;6911   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
0041c6  8027              STRH     r7,[r4,#0]
;;;6912   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
0041c8  8067              STRH     r7,[r4,#2]
0041ca  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.16846|
;;;6913   				}
;;;6914   	
;;;6915   			}
;;;6916   
;;;6917   		}
;;;6918   	else bat[in]._cnt_wrk=0;	 
;;;6919   	
;;;6920   	}					
;;;6921   
;;;6922   /*
;;;6923   if(Ibat>=(-IKB))
;;;6924   	{
;;;6925   	if(cnt_wrk<10)
;;;6926   		{
;;;6927   		cnt_wrk++;
;;;6928   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;6929   			{
;;;6930   			wrk=wrkOFF;
;;;6931   			//beep_init(0x7L,'O');
;;;6932   			wrk_mem_hndl(ibat_integr);
;;;6933   			}
;;;6934   		}
;;;6935   	else cnt_wrk=10;	
;;;6936   	}	
;;;6937   
;;;6938   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;6939   	{
;;;6940   	if(cnt_wrk)
;;;6941   		{
;;;6942   		cnt_wrk--;
;;;6943   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;6944   			{
;;;6945   			char temp;
;;;6946   			signed short temp_temp;
;;;6947   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;6948   			 
;;;6949   			wrk=wrkON;
;;;6950   			
;;;6951   			temp=_year;
;;;6952   			gran_char(&temp,1,99);
;;;6953   			*((char*)(&(wrk_date[0])))=temp;
;;;6954   			
;;;6955   			temp=_month;
;;;6956   			gran_char(&temp,1,12);
;;;6957   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;6958   			
;;;6959   			temp=_date;
;;;6960   			gran_char(&temp,1,31);
;;;6961   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;6962   				
;;;6963   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;6964   
;;;6965   			temp=_hour;
;;;6966   			gran_char(&temp,0,23);
;;;6967   			*((char*)(&(wrk_date[1])))=temp;
;;;6968                  
;;;6969   			temp=_min;
;;;6970   			gran_char(&temp,0,59);
;;;6971   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;6972   	          
;;;6973   			temp=_sec;
;;;6974   			gran_char(&temp,0,59);
;;;6975   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;6976   			
;;;6977   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;6978   
;;;6979   			
;;;6980   			//beep_init(0xFL,'O'); 
;;;6981   			ibat_integr=0;
;;;6982   			ibat_integr_=0;
;;;6983   			}
;;;6984   		}
;;;6985   	else cnt_wrk=0;	 
;;;6986   	
;;;6987   	}
;;;6988   if(wrk==wrkON)
;;;6989   	{
;;;6990   	ibat_integr_+=-Ibat;
;;;6991   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;6992   		{
;;;6993   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;6994   		ibat_integr++;
;;;6995   		}
;;;6996   	}
;;;6997   
;;;6998   */
;;;6999   
;;;7000   
;;;7001   /*if(bat[in]._cnt_to_block)
;;;7002   	{
;;;7003   	bat[in]._cnt_to_block--;
;;;7004   	if(!(bat[in]._cnt_to_block))
;;;7005   		{
;;;7006   		//bat[in]._rel_stat=1;
;;;7007   		}
;;;7008   	}
;;;7009   */
;;;7010   
;;;7011   
;;;7012   
;;;7013   
;;;7014   //unsigned int tempUI,tempUI_;
;;;7015   //unsigned int b_zar; 
;;;7016   //char i;
;;;7017   //Ibat[0]=5000;                     
;;;7018   
;;;7019   
;;;7020                               
;;;7021   if(bat[in]._time_cnt==0)
;;;7022   	{
;;;7023   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;7024   	
;;;7025   	if(bat[in]._zar_cnt>=AH_CONSTANT)
0041ce  f64848a0          MOV      r8,#0x8ca0
0041d2  f894003e          LDRB     r0,[r4,#0x3e]         ;7021
0041d6  2800              CMP      r0,#0                 ;7021
0041d8  d17e              BNE      |L1.17112|
0041da  f9b41008          LDRSH    r1,[r4,#8]            ;7023
0041de  6960              LDR      r0,[r4,#0x14]         ;7023
0041e0  4408              ADD      r0,r0,r1              ;7023
0041e2  6160              STR      r0,[r4,#0x14]         ;7023
;;;7026   		{
;;;7027   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;7028   		else tempUS_=BAT_C_REAL[in];
;;;7029   		
;;;7030   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0041e4  f8df940c          LDR      r9,|L1.17908|
0041e8  f8dfa40c          LDR      r10,|L1.17912|
0041ec  4540              CMP      r0,r8                 ;7025
0041ee  db2a              BLT      |L1.16966|
0041f0  f93a1015          LDRSH    r1,[r10,r5,LSL #1]    ;7027
0041f4  f5a140aa          SUB      r0,r1,#0x5500         ;7027
0041f8  3855              SUBS     r0,r0,#0x55           ;7027
0041fa  d103              BNE      |L1.16900|
0041fc  48ff              LDR      r0,|L1.17916|
0041fe  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;7027
004202  e001              B        |L1.16904|
                  |L1.16900|
004204  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;7028
                  |L1.16904|
004208  f8390015          LDRH     r0,[r9,r5,LSL #1]
00420c  f7fffffe          BL       lc640_read_int
004210  b280              UXTH     r0,r0
;;;7031   
;;;7032   		if(b_zar<(tempUS_/**10*/))
004212  42b0              CMP      r0,r6
004214  d20e              BCS      |L1.16948|
;;;7033   			{
;;;7034   			bat[in]._zar_cnt-=AH_CONSTANT;
004216  6961              LDR      r1,[r4,#0x14]
004218  f5a14100          SUB      r1,r1,#0x8000
00421c  f5a1614a          SUB      r1,r1,#0xca0
004220  6161              STR      r1,[r4,#0x14]
;;;7035   
;;;7036   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
004222  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004226  f1000001          ADD      r0,r0,#1
00422a  b201              SXTH     r1,r0
00422c  4610              MOV      r0,r2
00422e  f7fffffe          BL       lc640_write_int
004232  e033              B        |L1.17052|
                  |L1.16948|
;;;7037   			}
;;;7038   		else if(b_zar>(tempUS_/**10*/))  
004234  d932              BLS      |L1.17052|
;;;7039   			{
;;;7040   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004236  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00423a  b231              SXTH     r1,r6
00423c  f7fffffe          BL       lc640_write_int
;;;7041   			bat[in]._zar_cnt=AH_CONSTANT;
004240  f8c48014          STR      r8,[r4,#0x14]
004244  e02a              B        |L1.17052|
                  |L1.16966|
;;;7042   
;;;7043   			}
;;;7044   
;;;7045   		}
;;;7046   
;;;7047   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
004246  49ee              LDR      r1,|L1.17920|
004248  4288              CMP      r0,r1
00424a  dc27              BGT      |L1.17052|
;;;7048   		{
;;;7049   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
00424c  f93a1015          LDRSH    r1,[r10,r5,LSL #1]
004250  f5a140aa          SUB      r0,r1,#0x5500
004254  3855              SUBS     r0,r0,#0x55
004256  d103              BNE      |L1.16992|
004258  48e8              LDR      r0,|L1.17916|
00425a  f8306015          LDRH     r6,[r0,r5,LSL #1]
00425e  e001              B        |L1.16996|
                  |L1.16992|
;;;7050   		else tempUS_=BAT_C_REAL[in];
004260  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.16996|
;;;7051   		
;;;7052   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004264  f8390015          LDRH     r0,[r9,r5,LSL #1]
004268  f7fffffe          BL       lc640_read_int
00426c  b280              UXTH     r0,r0
;;;7053   
;;;7054   		if(b_zar>tempUS_)
00426e  42b0              CMP      r0,r6
004270  d905              BLS      |L1.17022|
;;;7055   			{
;;;7056   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004272  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004276  b231              SXTH     r1,r6
004278  f7fffffe          BL       lc640_write_int
;;;7057   			b_zar=tempUS_;
00427c  4630              MOV      r0,r6
                  |L1.17022|
;;;7058   			}
;;;7059   		if(b_zar)
00427e  b158              CBZ      r0,|L1.17048|
;;;7060   			{
;;;7061   			bat[in]._zar_cnt+=AH_CONSTANT;
004280  6961              LDR      r1,[r4,#0x14]
004282  4441              ADD      r1,r1,r8
004284  6161              STR      r1,[r4,#0x14]
;;;7062   
;;;7063   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
004286  f9392015          LDRSH    r2,[r9,r5,LSL #1]
00428a  f1a00001          SUB      r0,r0,#1
00428e  b201              SXTH     r1,r0
004290  4610              MOV      r0,r2
004292  f7fffffe          BL       lc640_write_int
004296  e001              B        |L1.17052|
                  |L1.17048|
;;;7064   			}
;;;7065   		else 
;;;7066   			{
;;;7067   			bat[in]._zar_cnt=-AH_CONSTANT;
004298  48d9              LDR      r0,|L1.17920|
00429a  6160              STR      r0,[r4,#0x14]
                  |L1.17052|
;;;7068   			}
;;;7069   
;;;7070   		}
;;;7071   
;;;7072   			
;;;7073   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00429c  f8390015          LDRH     r0,[r9,r5,LSL #1]
0042a0  f7fffffe          BL       lc640_read_int
0042a4  4601              MOV      r1,r0
;;;7074   	
;;;7075   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
0042a6  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0042aa  f5a042aa          SUB      r2,r0,#0x5500
0042ae  3a55              SUBS     r2,r2,#0x55
0042b0  d102              BNE      |L1.17080|
0042b2  48d2              LDR      r0,|L1.17916|
0042b4  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.17080|
;;;7076   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;7077   		           	
;;;7078   	tempUL*=1000L;
0042b8  f44f727a          MOV      r2,#0x3e8
0042bc  fb01f102          MUL      r1,r1,r2
;;;7079   
;;;7080   
;;;7081   	if(tempUL_==0) tempUL=0;
0042c0  b168              CBZ      r0,|L1.17118|
;;;7082   	else tempUL/=tempUL_;
0042c2  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.17094|
;;;7083   
;;;7084   	tempUL/=10L;
0042c6  f04f010a          MOV      r1,#0xa
0042ca  fbb0f0f1          UDIV     r0,r0,r1
;;;7085   
;;;7086   	bat[in]._zar=(unsigned short)tempUL;
0042ce  8220              STRH     r0,[r4,#0x10]
;;;7087   
;;;7088   	if(BAT_TYPE==1)
0042d0  48cc              LDR      r0,|L1.17924|
0042d2  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
0042d4  2801              CMP      r0,#1
0042d6  e000              B        |L1.17114|
                  |L1.17112|
0042d8  e010              B        |L1.17148|
                  |L1.17114|
0042da  d003              BEQ      |L1.17124|
0042dc  e008              B        |L1.17136|
                  |L1.17118|
0042de  f04f0000          MOV      r0,#0                 ;7081
0042e2  e7f0              B        |L1.17094|
                  |L1.17124|
;;;7089   		{
;;;7090   		bat[in]._zar=lakb[in]._s_o_c;
0042e4  49c8              LDR      r1,|L1.17928|
0042e6  9802              LDR      r0,[sp,#8]
0042e8  eb010080          ADD      r0,r1,r0,LSL #2
0042ec  8a40              LDRH     r0,[r0,#0x12]
0042ee  8220              STRH     r0,[r4,#0x10]
                  |L1.17136|
;;;7091   		}
;;;7092   	
;;;7093   	gran((signed short*)&bat[in]._zar,0,100);
0042f0  f1040010          ADD      r0,r4,#0x10
0042f4  2264              MOVS     r2,#0x64
0042f6  2100              MOVS     r1,#0
0042f8  f7fffffe          BL       gran
                  |L1.17148|
;;;7094        }
;;;7095   
;;;7096   
;;;7097   //Подсчет тока разряда батареи      
;;;7098   if(bat[in]._wrk==1)
0042fc  7ba0              LDRB     r0,[r4,#0xe]
0042fe  2801              CMP      r0,#1
004300  d113              BNE      |L1.17194|
;;;7099   	{
;;;7100   	if(bat[in]._Iintegr<36000)
004302  8ba0              LDRH     r0,[r4,#0x1c]
004304  4540              CMP      r0,r8
004306  d20f              BCS      |L1.17192|
;;;7101   		{          
;;;7102   		bat[in]._Iintegr+=abs(bat[in]._Ib);
004308  f9b40008          LDRSH    r0,[r4,#8]
00430c  f7fffffe          BL       abs
004310  8ba1              LDRH     r1,[r4,#0x1c]
004312  4408              ADD      r0,r0,r1
004314  b280              UXTH     r0,r0
004316  83a0              STRH     r0,[r4,#0x1c]
;;;7103   		if(bat[in]._Iintegr>=36000)
004318  4540              CMP      r0,r8
00431a  d306              BCC      |L1.17194|
;;;7104   			{
;;;7105   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
00431c  83a7              STRH     r7,[r4,#0x1c]
;;;7106   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
00431e  8be0              LDRH     r0,[r4,#0x1e]
004320  f1000001          ADD      r0,r0,#1
004324  83e0              STRH     r0,[r4,#0x1e]
004326  e000              B        |L1.17194|
                  |L1.17192|
;;;7107   			}
;;;7108   		}
;;;7109   	else 
;;;7110   		{
;;;7111   		bat[in]._Iintegr=0;
004328  83a7              STRH     r7,[r4,#0x1c]
                  |L1.17194|
;;;7112   		}	
;;;7113   	} 
;;;7114   	    
;;;7115   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7116   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
00432a  f8df92e0          LDR      r9,|L1.17932|
00432e  49b8              LDR      r1,|L1.17936|
004330  f8dfa2e0          LDR      r10,|L1.17940|
004334  f9b90000          LDRSH    r0,[r9,#0]  ; t_ext
004338  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
00433c  4288              CMP      r0,r1
00433e  dd02              BLE      |L1.17222|
004340  f89a0000          LDRB     r0,[r10,#0]  ; ND_EXT
004344  b3e8              CBZ      r0,|L1.17346|
                  |L1.17222|
;;;7117   	{
;;;7118   	bat[in]._sign_temper_cnt++;
;;;7119   	}
;;;7120   else 
;;;7121   	{
;;;7122   	bat[in]._sign_temper_cnt--;
004346  f8b40040          LDRH     r0,[r4,#0x40]
00434a  f1a00001          SUB      r0,r0,#1
00434e  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.17234|
;;;7123   	}
;;;7124   #else
;;;7125   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;7126   	{
;;;7127   	bat[in]._sign_temper_cnt++;
;;;7128   	}
;;;7129   else 
;;;7130   	{
;;;7131   	bat[in]._sign_temper_cnt--;
;;;7132   	}
;;;7133   #endif
;;;7134   gran(&bat[in]._sign_temper_cnt,0,600);
004352  f1040040          ADD      r0,r4,#0x40
004356  f44f7216          MOV      r2,#0x258
00435a  2100              MOVS     r1,#0
00435c  f7fffffe          BL       gran
;;;7135   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
004360  f9b40040          LDRSH    r0,[r4,#0x40]
004364  f240264e          MOV      r6,#0x24e
004368  42b0              CMP      r0,r6
00436a  db05              BLT      |L1.17272|
00436c  f894103f          LDRB     r1,[r4,#0x3f]
004370  f0410101          ORR      r1,r1,#1
004374  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.17272|
;;;7136   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
004378  280a              CMP      r0,#0xa
00437a  dc05              BGT      |L1.17288|
00437c  f894003f          LDRB     r0,[r4,#0x3f]
004380  f0200001          BIC      r0,r0,#1
004384  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.17288|
;;;7137   
;;;7138   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7139   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
004388  49a3              LDR      r1,|L1.17944|
00438a  f9b90000          LDRSH    r0,[r9,#0]  ; t_ext
00438e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
004392  4288              CMP      r0,r1
004394  dd02              BLE      |L1.17308|
004396  f89a0000          LDRB     r0,[r10,#0]  ; ND_EXT
00439a  b3b0              CBZ      r0,|L1.17418|
                  |L1.17308|
;;;7140   	{
;;;7141   	bat[in]._max_temper_cnt++;
;;;7142   	}
;;;7143   else 
;;;7144   	{
;;;7145   	bat[in]._max_temper_cnt--;
00439c  f8b40042          LDRH     r0,[r4,#0x42]
0043a0  f1a00001          SUB      r0,r0,#1
0043a4  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.17320|
;;;7146   	}
;;;7147   #else
;;;7148   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;7149   	{
;;;7150   	bat[in]._max_temper_cnt++;
;;;7151   	}
;;;7152   else 
;;;7153   	{
;;;7154   	bat[in]._max_temper_cnt--;
;;;7155   	}
;;;7156   #endif
;;;7157   
;;;7158   gran(&bat[in]._max_temper_cnt,0,600);
0043a8  f44f7916          MOV      r9,#0x258
0043ac  f1040042          ADD      r0,r4,#0x42
0043b0  464a              MOV      r2,r9
0043b2  2100              MOVS     r1,#0
0043b4  f7fffffe          BL       gran
;;;7159   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
0043b8  f9b40042          LDRSH    r0,[r4,#0x42]
0043bc  42b0              CMP      r0,r6
0043be  db07              BLT      |L1.17360|
0043c0  e000              B        |L1.17348|
                  |L1.17346|
0043c2  e023              B        |L1.17420|
                  |L1.17348|
0043c4  f894103f          LDRB     r1,[r4,#0x3f]
0043c8  f0410102          ORR      r1,r1,#2
0043cc  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.17360|
;;;7160   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
0043d0  280a              CMP      r0,#0xa
0043d2  dc05              BGT      |L1.17376|
0043d4  f894003f          LDRB     r0,[r4,#0x3f]
0043d8  f0200002          BIC      r0,r0,#2
0043dc  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.17376|
;;;7161   
;;;7162   
;;;7163   
;;;7164   //Подсчет наработки батареи
;;;7165   if(bat[in]._resurs_cnt<36000)
0043e0  6c60              LDR      r0,[r4,#0x44]
0043e2  4540              CMP      r0,r8
0043e4  da20              BGE      |L1.17448|
;;;7166   	{               
;;;7167   	bat[in]._resurs_cnt++;
0043e6  f1000001          ADD      r0,r0,#1
0043ea  6460              STR      r0,[r4,#0x44]
;;;7168   	if(bat[in]._resurs_cnt>=36000)
0043ec  4540              CMP      r0,r8
0043ee  db1c              BLT      |L1.17450|
;;;7169   		{
;;;7170   		bat[in]._resurs_cnt=0;
0043f0  6467              STR      r7,[r4,#0x44]
;;;7171   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0043f2  4e8a              LDR      r6,|L1.17948|
0043f4  f8360015          LDRH     r0,[r6,r5,LSL #1]
0043f8  f7fffffe          BL       lc640_read_int
0043fc  1c40              ADDS     r0,r0,#1
0043fe  b201              SXTH     r1,r0
004400  f9360015          LDRSH    r0,[r6,r5,LSL #1]
004404  f7fffffe          BL       lc640_write_int
004408  e00f              B        |L1.17450|
                  |L1.17418|
00440a  e006              B        |L1.17434|
                  |L1.17420|
00440c  f8b40040          LDRH     r0,[r4,#0x40]         ;7118
004410  f1000001          ADD      r0,r0,#1              ;7118
004414  f8a40040          STRH     r0,[r4,#0x40]         ;7118
004418  e79b              B        |L1.17234|
                  |L1.17434|
00441a  f8b40042          LDRH     r0,[r4,#0x42]         ;7141
00441e  f1000001          ADD      r0,r0,#1              ;7141
004422  f8a40042          STRH     r0,[r4,#0x42]         ;7141
004426  e7bf              B        |L1.17320|
                  |L1.17448|
;;;7172   		}
;;;7173   	}
;;;7174   else bat[in]._resurs_cnt=0;
004428  6467              STR      r7,[r4,#0x44]
                  |L1.17450|
;;;7175   
;;;7176   
;;;7177   #ifndef UKU_220_V2
;;;7178   #ifndef UKU_GLONASS
;;;7179   #ifndef UKU_6U
;;;7180   //#ifndef UKU_220
;;;7181   if(UBM_AV)
00442a  4e7d              LDR      r6,|L1.17952|
00442c  8830              LDRH     r0,[r6,#0]  ; UBM_AV
00442e  2800              CMP      r0,#0
004430  d05e              BEQ      |L1.17648|
;;;7182        {
;;;7183        signed short temp_SS;
;;;7184   #ifdef UKU_220
;;;7185   temp_SS=bat[in]._Ub/2;
;;;7186   #else
;;;7187        if(U0B<600)
004432  487c              LDR      r0,|L1.17956|
004434  f9b00000          LDRSH    r0,[r0,#0]  ; U0B
004438  4548              CMP      r0,r9
00443a  da08              BGE      |L1.17486|
;;;7188             {
;;;7189             temp_SS=bat[in]._Ub/4;
00443c  f9b40002          LDRSH    r0,[r4,#2]
004440  ea4f71e0          ASR      r1,r0,#31
004444  eb007091          ADD      r0,r0,r1,LSR #30
004448  ea4f00a0          ASR      r0,r0,#2
00444c  e006              B        |L1.17500|
                  |L1.17486|
;;;7190             }
;;;7191        else temp_SS=bat[in]._Ub/5;
00444e  f9b40002          LDRSH    r0,[r4,#2]
004452  f04f0105          MOV      r1,#5
004456  fb90f0f1          SDIV     r0,r0,r1
00445a  b200              SXTH     r0,r0
                  |L1.17500|
;;;7192   	
;;;7193   	temp_SS+=temp_SS;     
00445c  ea4f0040          LSL      r0,r0,#1
;;;7194   #endif
;;;7195        temp_SS-=(bat[in]._Ubm);
004460  88a1              LDRH     r1,[r4,#4]
004462  eba00001          SUB      r0,r0,r1
004466  b200              SXTH     r0,r0
;;;7196   
;;;7197        temp_SS=abs(temp_SS);
004468  f7fffffe          BL       abs
;;;7198   
;;;7199        temp_SS*=10;
00446c  eb000080          ADD      r0,r0,r0,LSL #2
004470  ea4f0040          LSL      r0,r0,#1
004474  b200              SXTH     r0,r0
;;;7200   
;;;7201        temp_SS/=12;
004476  f04f010c          MOV      r1,#0xc
00447a  fb90f0f1          SDIV     r0,r0,r1
00447e  b200              SXTH     r0,r0
;;;7202   
;;;7203        bat[in]._dUbm=temp_SS;
004480  80e0              STRH     r0,[r4,#6]
;;;7204   
;;;7205   
;;;7206        if(	(bat[in]._dUbm>UBM_AV) &&
004482  f9b61000          LDRSH    r1,[r6,#0]  ; UBM_AV
004486  4288              CMP      r0,r1
004488  dd34              BLE      |L1.17652|
;;;7207   		(abs(bat[in]._Ib)<(5*IKB)) &&
00448a  f9b40008          LDRSH    r0,[r4,#8]
00448e  f7fffffe          BL       abs
004492  4601              MOV      r1,r0
004494  4864              LDR      r0,|L1.17960|
004496  f9b00000          LDRSH    r0,[r0,#0]  ; IKB
00449a  eb000080          ADD      r0,r0,r0,LSL #2
00449e  4281              CMP      r1,r0
0044a0  da28              BGE      |L1.17652|
;;;7208   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
0044a2  4862              LDR      r0,|L1.17964|
0044a4  2173              MOVS     r1,#0x73
0044a6  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
0044aa  4348              MULS     r0,r1,r0
0044ac  fb90f0fb          SDIV     r0,r0,r11
0044b0  f9b41002          LDRSH    r1,[r4,#2]
0044b4  b200              SXTH     r0,r0
0044b6  4288              CMP      r0,r1
0044b8  da1c              BGE      |L1.17652|
;;;7209   		(!(bat[in]._av & 2))  )
0044ba  f894003d          LDRB     r0,[r4,#0x3d]
0044be  0780              LSLS     r0,r0,#30
0044c0  d418              BMI      |L1.17652|
;;;7210   		{
;;;7211   		bat[in]._cnt_as++;
0044c2  f8b40048          LDRH     r0,[r4,#0x48]
0044c6  f1000001          ADD      r0,r0,#1
0044ca  b200              SXTH     r0,r0
0044cc  f8a40048          STRH     r0,[r4,#0x48]
;;;7212   		if(bat[in]._cnt_as==3000)
0044d0  f5a06130          SUB      r1,r0,#0xb00
0044d4  39b8              SUBS     r1,r1,#0xb8
0044d6  d103              BNE      |L1.17632|
;;;7213   			{
;;;7214   			avar_bat_as_hndl(in,1);
0044d8  2101              MOVS     r1,#1
0044da  4628              MOV      r0,r5
0044dc  f7fffffe          BL       avar_bat_as_hndl
                  |L1.17632|
;;;7215   			}
;;;7216   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
0044e0  f9b41048          LDRSH    r1,[r4,#0x48]
0044e4  f64030bd          MOV      r0,#0xbbd
0044e8  4281              CMP      r1,r0
0044ea  db01              BLT      |L1.17648|
0044ec  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.17648|
;;;7217   		}
;;;7218   	else 
;;;7219   		{
;;;7220   		bat[in]._cnt_as=0;
;;;7221   		}
;;;7222        
;;;7223        }
;;;7224   #endif 
;;;7225   #endif 
;;;7226   #endif
;;;7227   
;;;7228   }
0044f0  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.17652|
0044f4  f8a47048          STRH     r7,[r4,#0x48]         ;7220
0044f8  e7fa              B        |L1.17648|
;;;7229   
                          ENDP

                  bat_hndl_zvu PROC
;;;7231   //-----------------------------------------------
;;;7232   void bat_hndl_zvu(void)
0044fa  e92d43f0          PUSH     {r4-r9,lr}
;;;7233   {
0044fe  b087              SUB      sp,sp,#0x1c
;;;7234   char i;
;;;7235   short bat_hndl_i_temp;
;;;7236   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
004500  f04f021c          MOV      r2,#0x1c
004504  494a              LDR      r1,|L1.17968|
004506  4668              MOV      r0,sp
004508  f7fffffe          BL       __aeabi_memcpy4
;;;7237   
;;;7238   //Ib_ips_termokompensat=-17000;
;;;7239    
;;;7240   if(bat_hndl_zvu_init==0)
00450c  4e49              LDR      r6,|L1.17972|
;;;7241   	{
;;;7242   	//Инициализация при включении системы
;;;7243   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
00450e  f44f70ef          MOV      r0,#0x1de
004512  f1060480          ADD      r4,r6,#0x80
004516  7871              LDRB     r1,[r6,#1]            ;7240  ; bat_hndl_zvu_init
004518  2900              CMP      r1,#0                 ;7240
00451a  d068              BEQ      |L1.17902|
;;;7244   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
;;;7245   	bat_hndl_zvu_Q*=10000L;
;;;7246   
;;;7247   	bat_hndl_zvu_init=1;
;;;7248   	}
;;;7249   else 
;;;7250   	{
;;;7251   	if(Ib_ips_termokompensat<-IKB)
00451c  4a42              LDR      r2,|L1.17960|
00451e  4946              LDR      r1,|L1.17976|
;;;7252   		{	
;;;7253   		bat_hndl_i=-Ib_ips_termokompensat;
;;;7254   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;7255   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;7256   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;7257   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;7258   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;7259   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;7260   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;7261   		
;;;7262   		bat_hndl_i_temp=bat_hndl_i/10;
;;;7263   		for(i=0;i<7;i++)
;;;7264   			{
;;;7265   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;7266   				{
;;;7267   				break;
;;;7268   				}
;;;7269   			}
;;;7270   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;7271   		 else if((i>=1)&&(i<7))
;;;7272   		 	{
;;;7273   			short i1,i2;
;;;7274   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;7275   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;7276   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;7277   			bat_hndl_t_razr*=(long)i1;
;;;7278   			bat_hndl_t_razr/=(long)i2;
;;;7279   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;7280   			}
;;;7281   		else if(i>=7)
;;;7282   			{
;;;7283   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;7284   			}
;;;7285   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
004520  4f47              LDR      r7,|L1.17984|
004522  f9b23000          LDRSH    r3,[r2,#0]            ;7251  ; IKB
004526  4a45              LDR      r2,|L1.17980|
004528  f9b11000          LDRSH    r1,[r1,#0]            ;7251  ; Ib_ips_termokompensat
00452c  f1c30c00          RSB      r12,r3,#0             ;7251
004530  f9b25000          LDRSH    r5,[r2,#0]            ;7260
004534  4622              MOV      r2,r4                 ;7243
004536  4561              CMP      r1,r12                ;7251
004538  6c92              LDR      r2,[r2,#0x48]         ;7243
00453a  da59              BGE      |L1.17904|
00453c  f1c10100          RSB      r1,r1,#0              ;7253
004540  b209              SXTH     r1,r1                 ;7253
004542  f8a6107c          STRH     r1,[r6,#0x7c]         ;7253
004546  4b3f              LDR      r3,|L1.17988|
004548  881b              LDRH     r3,[r3,#0]            ;7254  ; BAT_C_POINT_1_6
00454a  eb030343          ADD      r3,r3,r3,LSL #1       ;7254
00454e  ea4f0c43          LSL      r12,r3,#1             ;7254
004552  4b3d              LDR      r3,|L1.17992|
004554  f8a3c000          STRH     r12,[r3,#0]           ;7254
004558  f8dfc0f0          LDR      r12,|L1.17996|
00455c  f8bcc000          LDRH     r12,[r12,#0]          ;7255  ; BAT_C_POINT_1_2
004560  ea4f0c4c          LSL      r12,r12,#1            ;7255
004564  f8a3c002          STRH     r12,[r3,#2]           ;7255
004568  f8dfc0e4          LDR      r12,|L1.18000|
00456c  f8bcc000          LDRH     r12,[r12,#0]          ;7256  ; BAT_C_POINT_1
004570  f8a3c004          STRH     r12,[r3,#4]           ;7256
004574  f8dfc0dc          LDR      r12,|L1.18004|
004578  f04f0803          MOV      r8,#3                 ;7257
00457c  f9bcc000          LDRSH    r12,[r12,#0]          ;7257  ; BAT_C_POINT_3
004580  fb9cfcf8          SDIV     r12,r12,r8            ;7257
004584  f8a3c006          STRH     r12,[r3,#6]           ;7257
004588  f8dfc0cc          LDR      r12,|L1.18008|
00458c  f04f0805          MOV      r8,#5                 ;7258
004590  f9bcc000          LDRSH    r12,[r12,#0]          ;7258  ; BAT_C_POINT_5
004594  fb9cfcf8          SDIV     r12,r12,r8            ;7258
004598  f8a3c008          STRH     r12,[r3,#8]           ;7258
00459c  f8dfc0bc          LDR      r12,|L1.18012|
0045a0  f04f080a          MOV      r8,#0xa               ;7259
0045a4  f9bcc000          LDRSH    r12,[r12,#0]          ;7259  ; BAT_C_POINT_10
0045a8  fb9cfcf8          SDIV     r12,r12,r8            ;7259
0045ac  f8a3c00a          STRH     r12,[r3,#0xa]         ;7259
0045b0  f04f0c14          MOV      r12,#0x14             ;7260
0045b4  fb95f5fc          SDIV     r5,r5,r12             ;7260
0045b8  819d              STRH     r5,[r3,#0xc]          ;7260
0045ba  fb91f1f8          SDIV     r1,r1,r8              ;7262
0045be  b20d              SXTH     r5,r1                 ;7262
0045c0  f04f0100          MOV      r1,#0                 ;7263
                  |L1.17860|
0045c4  f933c011          LDRSH    r12,[r3,r1,LSL #1]    ;7265
0045c8  45ac              CMP      r12,r5                ;7265
0045ca  dd04              BLE      |L1.17878|
0045cc  f1010101          ADD      r1,r1,#1              ;7263
0045d0  b2c9              UXTB     r1,r1                 ;7263
0045d2  2907              CMP      r1,#7                 ;7263
0045d4  d3f6              BCC      |L1.17860|
                  |L1.17878|
0045d6  b161              CBZ      r1,|L1.17906|
0045d8  f1a10c01          SUB      r12,r1,#1             ;7271
0045dc  f1bc0f06          CMP      r12,#6                ;7271
0045e0  d268              BCS      |L1.18100|
0045e2  f833801c          LDRH     r8,[r3,r12,LSL #1]    ;7274
0045e6  eba80505          SUB      r5,r8,r5              ;7274
0045ea  b22d              SXTH     r5,r5                 ;7274
0045ec  e038              B        |L1.18016|
                  |L1.17902|
0045ee  e04a              B        |L1.18054|
                  |L1.17904|
0045f0  e07f              B        |L1.18162|
                  |L1.17906|
0045f2  e05c              B        |L1.18094|
                  |L1.17908|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.17912|
                          DCD      BAT_C_REAL
                  |L1.17916|
                          DCD      BAT_C_NOM
                  |L1.17920|
                          DCD      0xffff7360
                  |L1.17924|
                          DCD      BAT_TYPE
                  |L1.17928|
                          DCD      lakb
                  |L1.17932|
                          DCD      t_ext
                  |L1.17936|
                          DCD      TBATSIGN
                  |L1.17940|
                          DCD      ND_EXT
                  |L1.17944|
                          DCD      TBATMAX
                  |L1.17948|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.17952|
                          DCD      UBM_AV
                  |L1.17956|
                          DCD      U0B
                  |L1.17960|
                          DCD      IKB
                  |L1.17964|
                          DCD      USIGN
                  |L1.17968|
                          DCD      ||area_number.19||+0x20
                  |L1.17972|
                          DCD      ||area_number.25||
                  |L1.17976|
                          DCD      Ib_ips_termokompensat
                  |L1.17980|
                          DCD      BAT_C_POINT_20
                  |L1.17984|
                          DCD      0x000f4240
                  |L1.17988|
                          DCD      BAT_C_POINT_1_6
                  |L1.17992|
                          DCD      ||.bss||+0x44c
                  |L1.17996|
                          DCD      BAT_C_POINT_1_2
                  |L1.18000|
                          DCD      BAT_C_POINT_1
                  |L1.18004|
                          DCD      BAT_C_POINT_3
                  |L1.18008|
                          DCD      BAT_C_POINT_5
                  |L1.18012|
                          DCD      BAT_C_POINT_10
                  |L1.18016|
004660  f8333011          LDRH     r3,[r3,r1,LSL #1]     ;7275
004664  eba80303          SUB      r3,r8,r3              ;7275
004668  fa0ff883          SXTH     r8,r3                 ;7275
00466c  f85d9021          LDR      r9,[sp,r1,LSL #2]     ;7276
004670  f85d102c          LDR      r1,[sp,r12,LSL #2]    ;7276
004674  eba90301          SUB      r3,r9,r1              ;7276
004678  fb03f305          MUL      r3,r3,r5              ;7277
00467c  fb93f3f8          SDIV     r3,r3,r8              ;7278
004680  4419              ADD      r1,r1,r3              ;7279
004682  6421              STR      r1,[r4,#0x40]         ;7279  ; bat_hndl_t_razr
004684  e01a              B        |L1.18108|
                  |L1.18054|
004686  f7fffffe          BL       lc640_read_int
00468a  64a0              STR      r0,[r4,#0x48]         ;7243  ; bat_hndl_zvu_Q
00468c  2865              CMP      r0,#0x65              ;7244
00468e  d302              BCC      |L1.18070|
004690  f04f0064          MOV      r0,#0x64              ;7244
004694  64a0              STR      r0,[r4,#0x48]         ;7244  ; bat_hndl_zvu_Q
                  |L1.18070|
004696  6ca0              LDR      r0,[r4,#0x48]         ;7245  ; bat_hndl_zvu_Q
004698  f2427110          MOV      r1,#0x2710            ;7245
00469c  fb00f001          MUL      r0,r0,r1              ;7245
0046a0  64a0              STR      r0,[r4,#0x48]         ;7245  ; bat_hndl_zvu_Q
0046a2  f04f0001          MOV      r0,#1                 ;7247
0046a6  7070              STRB     r0,[r6,#1]            ;7247
                  |L1.18088|
;;;7286   
;;;7287   		if(bat_hndl_zvu_Q)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
;;;7288   		else bat_hndl_zvu_Q=0L;
;;;7289   
;;;7290   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
;;;7291   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
;;;7292   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
;;;7293   
;;;7294   		}
;;;7295   	else if(Ib_ips_termokompensat>IKB)
;;;7296   		{
;;;7297   		bat_hndl_i=Ib_ips_termokompensat;
;;;7298   		bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;7299   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;7300   		if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_proc_razr;
;;;7301   		else bat_hndl_zvu_Q=1000000L; 
;;;7302   		}
;;;7303   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
;;;7304   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
;;;7305   	}
;;;7306   
;;;7307   
;;;7308   
;;;7309   
;;;7310   };
0046a8  b007              ADD      sp,sp,#0x1c
0046aa  e8bd83f0          POP      {r4-r9,pc}
                  |L1.18094|
0046ae  9900              LDR      r1,[sp,#0]            ;7270
0046b0  6421              STR      r1,[r4,#0x40]         ;7270  ; bat_hndl_t_razr
0046b2  e003              B        |L1.18108|
                  |L1.18100|
0046b4  2907              CMP      r1,#7                 ;7281
0046b6  d301              BCC      |L1.18108|
0046b8  9906              LDR      r1,[sp,#0x18]         ;7283
0046ba  6421              STR      r1,[r4,#0x40]         ;7283  ; bat_hndl_t_razr
                  |L1.18108|
0046bc  6c21              LDR      r1,[r4,#0x40]         ;7285  ; bat_hndl_t_razr
0046be  fb97f1f1          SDIV     r1,r7,r1              ;7285
0046c2  64e1              STR      r1,[r4,#0x4c]         ;7285  ; bat_hndl_proc_razr
0046c4  b112              CBZ      r2,|L1.18124|
0046c6  eba20101          SUB      r1,r2,r1              ;7287
0046ca  64a1              STR      r1,[r4,#0x48]         ;7287  ; bat_hndl_zvu_Q
                  |L1.18124|
0046cc  6d22              LDR      r2,[r4,#0x50]         ;7290  ; bat_hndl_remain_time
0046ce  f44f6161          MOV      r1,#0xe10             ;7290
0046d2  fb92f1f1          SDIV     r1,r2,r1              ;7290
0046d6  f8a6107e          STRH     r1,[r6,#0x7e]         ;7290
0046da  f04f013c          MOV      r1,#0x3c              ;7291
0046de  fb92f2f1          SDIV     r2,r2,r1              ;7291
0046e2  b212              SXTH     r2,r2                 ;7291
0046e4  8022              STRH     r2,[r4,#0]            ;7291
0046e6  fb92f3f1          SDIV     r3,r2,r1              ;7292
0046ea  fb012113          MLS      r1,r1,r3,r2           ;7292
0046ee  8061              STRH     r1,[r4,#2]            ;7292
0046f0  e013              B        |L1.18202|
                  |L1.18162|
0046f2  4299              CMP      r1,r3                 ;7295
0046f4  dd11              BLE      |L1.18202|
0046f6  f8a6107c          STRH     r1,[r6,#0x7c]         ;7297
0046fa  f64843a0          MOV      r3,#0x8ca0            ;7298
0046fe  fb05f503          MUL      r5,r5,r3              ;7298
004702  fb95f1f1          SDIV     r1,r5,r1              ;7298
004706  6421              STR      r1,[r4,#0x40]         ;7298  ; bat_hndl_t_razr
004708  fb97f1f1          SDIV     r1,r7,r1              ;7299
00470c  64e1              STR      r1,[r4,#0x4c]         ;7299  ; bat_hndl_proc_razr
00470e  42ba              CMP      r2,r7                 ;7300
004710  da02              BGE      |L1.18200|
004712  4411              ADD      r1,r1,r2              ;7300
004714  64a1              STR      r1,[r4,#0x48]         ;7300  ; bat_hndl_zvu_Q
004716  e000              B        |L1.18202|
                  |L1.18200|
004718  64a7              STR      r7,[r4,#0x48]         ;7301  ; bat_hndl_zvu_Q
                  |L1.18202|
00471a  6ca1              LDR      r1,[r4,#0x48]         ;7303  ; bat_hndl_zvu_Q
00471c  f2427510          MOV      r5,#0x2710            ;7303
004720  fb91f7f5          SDIV     r7,r1,r5              ;7303
004724  4606              MOV      r6,r0                 ;7303
004726  f7fffffe          BL       lc640_read_int
00472a  4287              CMP      r7,r0                 ;7303
00472c  d006              BEQ      |L1.18236|
00472e  6ca0              LDR      r0,[r4,#0x48]         ;7303  ; bat_hndl_zvu_Q
004730  fb90f0f5          SDIV     r0,r0,r5              ;7303
004734  b201              SXTH     r1,r0                 ;7303
004736  4630              MOV      r0,r6                 ;7303
004738  f7fffffe          BL       lc640_write_int
                  |L1.18236|
00473c  e9d40112          LDRD     r0,r1,[r4,#0x48]      ;7304
004740  fb90f0f1          SDIV     r0,r0,r1              ;7304
004744  6520              STR      r0,[r4,#0x50]         ;7304  ; bat_hndl_remain_time
004746  e7af              B        |L1.18088|
;;;7311   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;7315   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;7316   void u_avt_set_hndl(void)
004748  e92d5fff          PUSH     {r0-r12,lr}
;;;7317   {
;;;7318   if(uavt_set_stat==uassSTEP1)
00474c  4dff              LDR      r5,|L1.19276|
;;;7319   	{
;;;7320   	char i,find_succes;
;;;7321   
;;;7322   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;7323   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;7324   	if(uavt_set_stat_old!=uavt_set_stat)
;;;7325   		{
;;;7326   		uavt_set_error_cnt=60;
;;;7327   		}
;;;7328   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7329   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7330   	find_succes=0;
;;;7331   /*	for(i=0;i<NUMIST;i++)
;;;7332   		{
;;;7333   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;7334   		else
;;;7335   			{
;;;7336   			find_succes=0;
;;;7337   			break;
;;;7338   			}
;;;7339   		}*/
;;;7340   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
;;;7341   
;;;7342   	if(find_succes==1)
;;;7343   		{
;;;7344   		uavt_set_stat=uassSTEP2;
00474e  f04f0902          MOV      r9,#2
;;;7345   		}
;;;7346   	if(uavt_set_error_cnt)
;;;7347   		{
;;;7348   		uavt_set_error_cnt--;
;;;7349   		if(!uavt_set_error_cnt)
;;;7350   			{
;;;7351   			uavt_set_stat=uassOFF;
;;;7352   			uavt_set_result_stat=uasrsERR;
;;;7353   			avt_error_bps=100;
004752  f04f0b64          MOV      r11,#0x64
004756  7828              LDRB     r0,[r5,#0]            ;7318  ; uavt_set_stat
004758  4efd              LDR      r6,|L1.19280|
00475a  f8df83f8          LDR      r8,|L1.19284|
00475e  f8dfa3f8          LDR      r10,|L1.19288|
004762  2400              MOVS     r4,#0                 ;7329
004764  2801              CMP      r0,#1                 ;7318
004766  d12e              BNE      |L1.18374|
004768  f8980000          LDRB     r0,[r8,#0]            ;7324  ; uavt_set_stat_old
00476c  2801              CMP      r0,#1                 ;7324
00476e  d002              BEQ      |L1.18294|
004770  f04f003c          MOV      r0,#0x3c              ;7326
004774  7030              STRB     r0,[r6,#0]            ;7326
                  |L1.18294|
004776  230a              MOVS     r3,#0xa               ;7329
004778  2200              MOVS     r2,#0                 ;7329
00477a  21e6              MOVS     r1,#0xe6              ;7329
00477c  20e1              MOVS     r0,#0xe1              ;7329
00477e  f7fffffe          BL       mess_send
004782  f04f0000          MOV      r0,#0                 ;7330
004786  49f5              LDR      r1,|L1.19292|
004788  f9b12000          LDRSH    r2,[r1,#0]            ;7340  ; bps_U
00478c  f9ba1000          LDRSH    r1,[r10,#0]           ;7340  ; U_AVT
004790  f1a10301          SUB      r3,r1,#1              ;7340
004794  429a              CMP      r2,r3                 ;7340
004796  db04              BLT      |L1.18338|
004798  1c49              ADDS     r1,r1,#1              ;7340
00479a  428a              CMP      r2,r1                 ;7340
00479c  dc01              BGT      |L1.18338|
00479e  f04f0001          MOV      r0,#1                 ;7340
                  |L1.18338|
0047a2  2801              CMP      r0,#1                 ;7342
0047a4  d101              BNE      |L1.18346|
0047a6  f8859000          STRB     r9,[r5,#0]            ;7344
                  |L1.18346|
0047aa  7830              LDRB     r0,[r6,#0]            ;7346  ; uavt_set_error_cnt
0047ac  b158              CBZ      r0,|L1.18374|
0047ae  f1a00001          SUB      r0,r0,#1              ;7348
0047b2  b2c0              UXTB     r0,r0                 ;7348
0047b4  7030              STRB     r0,[r6,#0]            ;7348
0047b6  b930              CBNZ     r0,|L1.18374|
0047b8  702c              STRB     r4,[r5,#0]            ;7351
0047ba  48e9              LDR      r0,|L1.19296|
0047bc  f8809000          STRB     r9,[r0,#0]            ;7352
0047c0  48e8              LDR      r0,|L1.19300|
0047c2  f880b000          STRB     r11,[r0,#0]
                  |L1.18374|
;;;7354   			}
;;;7355   		}
;;;7356   	}
;;;7357   if(uavt_set_stat==uassSTEP2)
0047c6  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;7358   	{
;;;7359   	char i,find_succes;
;;;7360   
;;;7361   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0047c8  49e7              LDR      r1,|L1.19304|
;;;7362   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0047ca  48e8              LDR      r0,|L1.19308|
;;;7363   
;;;7364   	if(uavt_set_stat_old!=uavt_set_stat)
;;;7365   		{
;;;7366   		uavt_set_error_cnt=60;
;;;7367   		}
;;;7368   
;;;7369   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7370   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7371   	find_succes=1;
;;;7372   
;;;7373   	for(i=0;i<NUMIST;i++)
;;;7374   		{
;;;7375   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;7376   		else
;;;7377   			{
;;;7378   			find_succes=0;
;;;7379   			avt_error_bps=i+1;
;;;7380   			break;
;;;7381   			}
;;;7382   		}
;;;7383   
;;;7384   	if(find_succes==1)
;;;7385   		{
;;;7386   		uavt_set_stat=uassSTEP3;
;;;7387   		uavt_bps_pntr=0;
0047cc  4fe8              LDR      r7,|L1.19312|
0047ce  2a02              CMP      r2,#2                 ;7357
0047d0  d002              BEQ      |L1.18392|
;;;7388   		avt_plazma=0;
;;;7389   		}
;;;7390   
;;;7391   	if(uavt_set_error_cnt)
;;;7392   		{
;;;7393   		uavt_set_error_cnt--;
;;;7394   		if(!uavt_set_error_cnt)
;;;7395   			{
;;;7396   			uavt_set_stat=uassOFF;
;;;7397   			uavt_set_result_stat=uasrsERR;
;;;7398   			}
;;;7399   		}
;;;7400   	}
;;;7401   else if(uavt_set_stat==uassSTEP3)
0047d2  2a03              CMP      r2,#3
0047d4  d05e              BEQ      |L1.18580|
0047d6  e0ca              B        |L1.18798|
                  |L1.18392|
0047d8  f9ba2000          LDRSH    r2,[r10,#0]           ;7361  ; U_AVT
0047dc  f04f0365          MOV      r3,#0x65              ;7361
0047e0  fb02f303          MUL      r3,r2,r3              ;7361
0047e4  fbb3f3fb          UDIV     r3,r3,r11             ;7361
0047e8  468a              MOV      r10,r1                ;7361
0047ea  800b              STRH     r3,[r1,#0]            ;7361
0047ec  eb021142          ADD      r1,r2,r2,LSL #5       ;7362
0047f0  eb010141          ADD      r1,r1,r1,LSL #1       ;7362
0047f4  fbb1f1fb          UDIV     r1,r1,r11             ;7362
0047f8  4683              MOV      r11,r0                ;7362
0047fa  8001              STRH     r1,[r0,#0]            ;7362
0047fc  f8980000          LDRB     r0,[r8,#0]            ;7364  ; uavt_set_stat_old
004800  2802              CMP      r0,#2                 ;7364
004802  d002              BEQ      |L1.18442|
004804  f04f003c          MOV      r0,#0x3c              ;7366
004808  7030              STRB     r0,[r6,#0]            ;7366
                  |L1.18442|
00480a  230a              MOVS     r3,#0xa               ;7369
00480c  21bf              MOVS     r1,#0xbf              ;7369
00480e  20be              MOVS     r0,#0xbe              ;7369
004810  f7fffffe          BL       mess_send
004814  230a              MOVS     r3,#0xa               ;7370
004816  2200              MOVS     r2,#0                 ;7370
004818  21e6              MOVS     r1,#0xe6              ;7370
00481a  20e1              MOVS     r0,#0xe1              ;7370
00481c  f7fffffe          BL       mess_send
004820  f04f0201          MOV      r2,#1                 ;7371
004824  f04f0000          MOV      r0,#0                 ;7373
004828  49d3              LDR      r1,|L1.19320|
00482a  f9ba3000          LDRSH    r3,[r10,#0]           ;7373
00482e  f8dfe344          LDR      lr,|L1.19316|
004832  f9bbc000          LDRSH    r12,[r11,#0]          ;7375
004836  f9b1a000          LDRSH    r10,[r1,#0]           ;7373
00483a  e00d              B        |L1.18520|
                  |L1.18492|
00483c  ebc001c0          RSB      r1,r0,r0,LSL #3       ;7375
004840  eb011100          ADD      r1,r1,r0,LSL #4       ;7375
004844  eb0e0181          ADD      r1,lr,r1,LSL #2       ;7375
004848  69c9              LDR      r1,[r1,#0x1c]         ;7375
00484a  4299              CMP      r1,r3                 ;7375
00484c  da09              BGE      |L1.18530|
00484e  4561              CMP      r1,r12                ;7375
004850  dd07              BLE      |L1.18530|
004852  f1000001          ADD      r0,r0,#1              ;7373
004856  b2c0              UXTB     r0,r0                 ;7373
                  |L1.18520|
004858  4550              CMP      r0,r10                ;7373
00485a  dbef              BLT      |L1.18492|
                  |L1.18524|
00485c  2a01              CMP      r2,#1                 ;7384
00485e  d007              BEQ      |L1.18544|
004860  e00c              B        |L1.18556|
                  |L1.18530|
004862  f04f0200          MOV      r2,#0                 ;7378
004866  49bf              LDR      r1,|L1.19300|
004868  f1000001          ADD      r0,r0,#1              ;7379
00486c  7008              STRB     r0,[r1,#0]            ;7379
00486e  e7f5              B        |L1.18524|
                  |L1.18544|
004870  f04f0003          MOV      r0,#3                 ;7386
004874  7028              STRB     r0,[r5,#0]            ;7386
004876  703c              STRB     r4,[r7,#0]            ;7387
004878  48c0              LDR      r0,|L1.19324|
00487a  7004              STRB     r4,[r0,#0]            ;7388
                  |L1.18556|
00487c  7830              LDRB     r0,[r6,#0]            ;7391  ; uavt_set_error_cnt
00487e  b3d0              CBZ      r0,|L1.18678|
004880  f1a00001          SUB      r0,r0,#1              ;7393
004884  b2c0              UXTB     r0,r0                 ;7393
004886  7030              STRB     r0,[r6,#0]            ;7393
004888  bba8              CBNZ     r0,|L1.18678|
00488a  702c              STRB     r4,[r5,#0]            ;7396
00488c  48b4              LDR      r0,|L1.19296|
00488e  f8809000          STRB     r9,[r0,#0]            ;7397
004892  e06c              B        |L1.18798|
                  |L1.18580|
;;;7402   	{
;;;7403   	char i,find_succes;
;;;7404   
;;;7405   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
004894  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
004898  f04f0365          MOV      r3,#0x65
00489c  fb02f303          MUL      r3,r2,r3
0048a0  fbb3f3fb          UDIV     r3,r3,r11
0048a4  468a              MOV      r10,r1
0048a6  800b              STRH     r3,[r1,#0]
;;;7406   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0048a8  eb021142          ADD      r1,r2,r2,LSL #5
0048ac  eb010141          ADD      r1,r1,r1,LSL #1
0048b0  fbb1f1fb          UDIV     r1,r1,r11
0048b4  4683              MOV      r11,r0
0048b6  8001              STRH     r1,[r0,#0]
;;;7407   	
;;;7408   	if(uavt_set_stat_old!=uavt_set_stat)
0048b8  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
0048bc  2803              CMP      r0,#3
0048be  d000              BEQ      |L1.18626|
;;;7409   		{
;;;7410   		uavt_bps_pntr=0;
0048c0  703c              STRB     r4,[r7,#0]
                  |L1.18626|
;;;7411   		}
;;;7412   
;;;7413   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
0048c2  230a              MOVS     r3,#0xa
0048c4  21bf              MOVS     r1,#0xbf
0048c6  20be              MOVS     r0,#0xbe
0048c8  f7fffffe          BL       mess_send
;;;7414   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
0048cc  230a              MOVS     r3,#0xa
0048ce  2200              MOVS     r2,#0
0048d0  21e6              MOVS     r1,#0xe6
0048d2  20e1              MOVS     r0,#0xe1
0048d4  f7fffffe          BL       mess_send
;;;7415   
;;;7416   	find_succes=1;
0048d8  f04f0601          MOV      r6,#1
;;;7417   	for(i=0;i<NUMIST;i++)
0048dc  f04f0000          MOV      r0,#0
0048e0  f8df9294          LDR      r9,|L1.19320|
0048e4  f9ba2000          LDRSH    r2,[r10,#0]
0048e8  f8dfc288          LDR      r12,|L1.19316|
0048ec  f9bb3000          LDRSH    r3,[r11,#0]           ;7375
0048f0  f9b9a000          LDRSH    r10,[r9,#0]           ;7373
0048f4  e00e              B        |L1.18708|
                  |L1.18678|
0048f6  e03a              B        |L1.18798|
                  |L1.18680|
;;;7418   		{
;;;7419   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
0048f8  ebc001c0          RSB      r1,r0,r0,LSL #3
0048fc  eb011100          ADD      r1,r1,r0,LSL #4
004900  eb0c0181          ADD      r1,r12,r1,LSL #2
004904  69c9              LDR      r1,[r1,#0x1c]
004906  4291              CMP      r1,r2
004908  da0f              BGE      |L1.18730|
00490a  4299              CMP      r1,r3
00490c  dd0d              BLE      |L1.18730|
00490e  f1000001          ADD      r0,r0,#1              ;7417
004912  b2c0              UXTB     r0,r0                 ;7417
                  |L1.18708|
004914  4550              CMP      r0,r10                ;7417
004916  dbef              BLT      |L1.18680|
                  |L1.18712|
;;;7420   		else
;;;7421   			{
;;;7422   			find_succes=0;
;;;7423   			break;
;;;7424   			}
;;;7425   		}
;;;7426   
;;;7427   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
004918  20d7              MOVS     r0,#0xd7
00491a  f7fffffe          BL       mess_find
00491e  b1a0              CBZ      r0,|L1.18762|
004920  4897              LDR      r0,|L1.19328|
004922  6800              LDR      r0,[r0,#0]  ; mess_data
004924  28d9              CMP      r0,#0xd9
004926  d003              BEQ      |L1.18736|
004928  e00f              B        |L1.18762|
                  |L1.18730|
00492a  f04f0600          MOV      r6,#0                 ;7422
00492e  e7f3              B        |L1.18712|
                  |L1.18736|
;;;7428   		{
;;;7429   		if(++uavt_bps_pntr>=NUMIST)
004930  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
004932  1c40              ADDS     r0,r0,#1
004934  b2c0              UXTB     r0,r0
004936  7038              STRB     r0,[r7,#0]
004938  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
00493c  4288              CMP      r0,r1
00493e  db04              BLT      |L1.18762|
;;;7430   			{
;;;7431   			uavt_set_stat=uassOFF;
004940  702c              STRB     r4,[r5,#0]
;;;7432   			uavt_set_result_stat=uasrsSUCCESS;
004942  4987              LDR      r1,|L1.19296|
004944  f04f0003          MOV      r0,#3
004948  7008              STRB     r0,[r1,#0]
                  |L1.18762|
;;;7433   			}
;;;7434   		//uavt_bps_pntr++;
;;;7435   		//if()
;;;7436   		}
;;;7437   	if(find_succes==1)
00494a  2e01              CMP      r6,#1
00494c  d10f              BNE      |L1.18798|
;;;7438   		{
;;;7439   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
00494e  20ee              MOVS     r0,#0xee
004950  e9cd0400          STRD     r0,r4,[sp,#0]
004954  9402              STR      r4,[sp,#8]
004956  9403              STR      r4,[sp,#0xc]
004958  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
00495a  4603              MOV      r3,r0
00495c  2216              MOVS     r2,#0x16
00495e  4608              MOV      r0,r1
004960  f7fffffe          BL       mcp2515_transmit
;;;7440   		avt_plazma++;
004964  4885              LDR      r0,|L1.19324|
004966  7801              LDRB     r1,[r0,#0]  ; avt_plazma
004968  f1010101          ADD      r1,r1,#1
00496c  7001              STRB     r1,[r0,#0]
                  |L1.18798|
;;;7441   		}
;;;7442   	}
;;;7443   
;;;7444   
;;;7445   
;;;7446   uavt_set_stat_old=uavt_set_stat;
00496e  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
004970  f8880000          STRB     r0,[r8,#0]
;;;7447   
;;;7448   }
004974  e8bd9fff          POP      {r0-r12,pc}
;;;7449   
                          ENDP

                  u_necc_hndl PROC
;;;7524   //-----------------------------------------------
;;;7525   void u_necc_hndl(void)
004978  b5f8              PUSH     {r3-r7,lr}
;;;7526   {
;;;7527   signed long temp_L;
;;;7528   signed long temp_SL;
;;;7529   //signed short temp_SS;
;;;7530   
;;;7531   //char i;
;;;7532   
;;;7533   //temp_SS=0;
;;;7534   signed short t[2];
;;;7535   
;;;7536   
;;;7537   
;;;7538   
;;;7539   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7540   
;;;7541   if(!TERMOKOMPENS)
00497a  4882              LDR      r0,|L1.19332|
;;;7542   	{
;;;7543   	//u_necc=U0B;
;;;7544   	u_necc=UB20;
;;;7545   	}
;;;7546   else
;;;7547   	{
;;;7548   	if(ND_EXT[0])t[0]=20;
;;;7549   	else t[0]=t_ext[0];
;;;7550   
;;;7551   	mat_temper=t[0];
;;;7552   			
;;;7553   	if(mat_temper<0)temp_SL=UB0; 
;;;7554   	else 
;;;7555   		{
;;;7556   		if(mat_temper>40)mat_temper=40; 
;;;7557   		temp_SL=(UB20-UB0)*10;
;;;7558   		temp_SL*=mat_temper;
;;;7559   		temp_SL/=200;
;;;7560   		temp_SL+=UB0;
;;;7561   		}
;;;7562   	if((spc_stat==spcVZ)&&(sk_stat[0]==1))
00497c  4d84              LDR      r5,|L1.19344|
00497e  4c85              LDR      r4,|L1.19348|
004980  8801              LDRH     r1,[r0,#0]            ;7541  ; TERMOKOMPENS
004982  4881              LDR      r0,|L1.19336|
004984  f9b03000          LDRSH    r3,[r0,#0]            ;7544
;;;7563   		{
;;;7564   		temp_SL=UVZ;
004988  4880              LDR      r0,|L1.19340|
00498a  f9b02000          LDRSH    r2,[r0,#0]
00498e  b139              CBZ      r1,|L1.18848|
004990  4881              LDR      r0,|L1.19352|
004992  7800              LDRB     r0,[r0,#0]            ;7548  ; ND_EXT
004994  b130              CBZ      r0,|L1.18852|
004996  f04f0014          MOV      r0,#0x14              ;7548
00499a  f8ad0000          STRH     r0,[sp,#0]            ;7548
00499e  e005              B        |L1.18860|
                  |L1.18848|
0049a0  8023              STRH     r3,[r4,#0]            ;7544
0049a2  e028              B        |L1.18934|
                  |L1.18852|
0049a4  487d              LDR      r0,|L1.19356|
0049a6  8800              LDRH     r0,[r0,#0]            ;7549  ; t_ext
0049a8  f8ad0000          STRH     r0,[sp,#0]            ;7549
                  |L1.18860|
0049ac  4e7c              LDR      r6,|L1.19360|
0049ae  f9bd1000          LDRSH    r1,[sp,#0]            ;7551
0049b2  6031              STR      r1,[r6,#0]            ;7551  ; mat_temper
0049b4  487b              LDR      r0,|L1.19364|
0049b6  2900              CMP      r1,#0                 ;7553
0049b8  f9b00000          LDRSH    r0,[r0,#0]            ;7553
0049bc  db12              BLT      |L1.18916|
0049be  2928              CMP      r1,#0x28              ;7556
0049c0  dd02              BLE      |L1.18888|
0049c2  f04f0128          MOV      r1,#0x28              ;7556
0049c6  6031              STR      r1,[r6,#0]            ;7556  ; mat_temper
                  |L1.18888|
0049c8  eba30100          SUB      r1,r3,r0              ;7557
0049cc  eb010181          ADD      r1,r1,r1,LSL #2       ;7557
0049d0  ea4f0141          LSL      r1,r1,#1              ;7557
0049d4  6833              LDR      r3,[r6,#0]            ;7558  ; mat_temper
0049d6  fb01f103          MUL      r1,r1,r3              ;7558
0049da  f04f03c8          MOV      r3,#0xc8              ;7559
0049de  fb91f1f3          SDIV     r1,r1,r3              ;7559
0049e2  4408              ADD      r0,r0,r1              ;7560
                  |L1.18916|
0049e4  7e29              LDRB     r1,[r5,#0x18]         ;7562  ; spc_stat
0049e6  2902              CMP      r1,#2                 ;7562
0049e8  d104              BNE      |L1.18932|
0049ea  496f              LDR      r1,|L1.19368|
0049ec  7809              LDRB     r1,[r1,#0]            ;7562  ; sk_stat
0049ee  2901              CMP      r1,#1                 ;7562
0049f0  d100              BNE      |L1.18932|
0049f2  4610              MOV      r0,r2
                  |L1.18932|
;;;7565   		}
;;;7566   	u_necc=(unsigned int)temp_SL;
0049f4  8020              STRH     r0,[r4,#0]
                  |L1.18934|
;;;7567   	///u_necc=3456;
;;;7568   	}  
;;;7569   
;;;7570   //u_necc=2355;
;;;7571   
;;;7572   if((speedChIsOn)||(sp_ch_stat==scsWRK))
0049f6  486d              LDR      r0,|L1.19372|
0049f8  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
0049fa  b918              CBNZ     r0,|L1.18948|
0049fc  486c              LDR      r0,|L1.19376|
0049fe  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
004a00  2802              CMP      r0,#2
004a02  d102              BNE      |L1.18954|
                  |L1.18948|
;;;7573   	{
;;;7574   	u_necc=speedChrgVolt;
004a04  486b              LDR      r0,|L1.19380|
004a06  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
004a08  8020              STRH     r0,[r4,#0]
                  |L1.18954|
;;;7575   	}
;;;7576   if(hv_vz_stat==hvsWRK)
004a0a  486b              LDR      r0,|L1.19384|
004a0c  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
004a0e  2805              CMP      r0,#5
004a10  d100              BNE      |L1.18964|
;;;7577   	{
;;;7578   	u_necc=UVZ;
004a12  8022              STRH     r2,[r4,#0]
                  |L1.18964|
;;;7579   	}
;;;7580   if(vz1_stat==vz1sWRK)
004a14  f8950024          LDRB     r0,[r5,#0x24]  ; vz1_stat
004a18  280a              CMP      r0,#0xa
004a1a  d102              BNE      |L1.18978|
;;;7581   	{
;;;7582   	u_necc=UZ_U;
004a1c  4867              LDR      r0,|L1.19388|
004a1e  8800              LDRH     r0,[r0,#0]  ; UZ_U
004a20  8020              STRH     r0,[r4,#0]
                  |L1.18978|
;;;7583   	}
;;;7584   if(vz2_stat==vz2sWRK1)
004a22  f8950027          LDRB     r0,[r5,#0x27]  ; vz2_stat
004a26  280a              CMP      r0,#0xa
004a28  d102              BNE      |L1.18992|
;;;7585   	{
;;;7586   	u_necc=FZ_U1;
004a2a  4965              LDR      r1,|L1.19392|
004a2c  8809              LDRH     r1,[r1,#0]  ; FZ_U1
004a2e  8021              STRH     r1,[r4,#0]
                  |L1.18992|
;;;7587   	}
;;;7588   if(vz2_stat==vz2sWRK2)
004a30  280b              CMP      r0,#0xb
004a32  d102              BNE      |L1.19002|
;;;7589   	{
;;;7590   	u_necc=FZ_U2;
004a34  4863              LDR      r0,|L1.19396|
004a36  8800              LDRH     r0,[r0,#0]  ; FZ_U2
004a38  8020              STRH     r0,[r4,#0]
                  |L1.19002|
;;;7591   	}
;;;7592   
;;;7593   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
004a3a  4844              LDR      r0,|L1.19276|
004a3c  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
004a3e  2801              CMP      r0,#1
004a40  d001              BEQ      |L1.19014|
004a42  2802              CMP      r0,#2
004a44  d102              BNE      |L1.19020|
                  |L1.19014|
;;;7594   	{
;;;7595   	u_necc=U_AVT;
004a46  4844              LDR      r0,|L1.19288|
004a48  8800              LDRH     r0,[r0,#0]  ; U_AVT
004a4a  8020              STRH     r0,[r4,#0]
                  |L1.19020|
;;;7596   	}
;;;7597   
;;;7598   if(mess_find_unvol(MESS2UNECC_HNDL))
004a4c  20be              MOVS     r0,#0xbe
004a4e  f7fffffe          BL       mess_find_unvol
004a52  b128              CBZ      r0,|L1.19040|
;;;7599   	{		
;;;7600   	if(mess_data[0]==PARAM_UNECC_SET)
004a54  484a              LDR      r0,|L1.19328|
004a56  6801              LDR      r1,[r0,#0]  ; mess_data
004a58  29bf              CMP      r1,#0xbf
004a5a  d101              BNE      |L1.19040|
;;;7601   		{
;;;7602   		u_necc=mess_data[1];
004a5c  6840              LDR      r0,[r0,#4]  ; mess_data
004a5e  8020              STRH     r0,[r4,#0]
                  |L1.19040|
;;;7603   		}		
;;;7604   	} 
;;;7605   
;;;7606   //if(ICA_EN)u_necc+=ica_u_necc;
;;;7607   #endif
;;;7608   
;;;7609   
;;;7610   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;7611   
;;;7612   #ifndef UKU_TELECORE2015
;;;7613   #ifndef UKU_TELECORE2017
;;;7614   if(unh_cnt0<10)
;;;7615   	{
;;;7616   	unh_cnt0++;
;;;7617   	if(unh_cnt0>=10)
;;;7618   		{
;;;7619   		unh_cnt0=0;
;;;7620   		b1Hz_unh=1;
;;;7621   		}
;;;7622   	}
;;;7623   
;;;7624   if(unh_cnt1<5)
;;;7625   	{
;;;7626   	unh_cnt1++;
;;;7627   	if(unh_cnt1==5)
;;;7628   		{
;;;7629   		unh_cnt1=0;
;;;7630   //		b2Hz_unh=1;
;;;7631   		}
;;;7632   	} 
;;;7633   
;;;7634   
;;;7635   
;;;7636   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7637   	{		
;;;7638   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7639   		{
;;;7640   		u_necc=mess_data[1];
;;;7641   		}		
;;;7642   	}
;;;7643   
;;;7644   
;;;7645   else if(b1Hz_unh)
;;;7646   	{
;;;7647   	
;;;7648   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;7649   		{
;;;7650   		
;;;7651   		u_necc=U0B;
;;;7652   		#ifdef IPS_SGEP_GAZPROM
;;;7653   		u_necc=UB0;
;;;7654   		#endif
;;;7655   		}
;;;7656   	else 
;;;7657   		{
;;;7658   		if(BAT_TYPE==0) //если батарея обычная
;;;7659   			{
;;;7660   			for(i=0;i<2;i++)
;;;7661   				{
;;;7662   				if(BAT_IS_ON[i]==bisON)
;;;7663   					{
;;;7664   					if(bat[i]._nd)t[i]=20;
;;;7665   					else t[i]=bat[i]._Tb;
;;;7666   					}
;;;7667   				else
;;;7668   					{
;;;7669   					t[i]=-20;
;;;7670   					}
;;;7671   				}
;;;7672   			if(t[0]>t[1])mat_temper=t[0];
;;;7673   			else mat_temper=t[1];
;;;7674   			
;;;7675   		
;;;7676   			if(mat_temper<0)temp_SL=UB0; 
;;;7677   			else 
;;;7678   				{
;;;7679   				if(mat_temper>40)mat_temper=40; 
;;;7680   				temp_SL=(UB20-UB0)*10;
;;;7681   				temp_SL*=mat_temper;
;;;7682   				temp_SL/=200;
;;;7683   				temp_SL+=UB0;
;;;7684   				}
;;;7685   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7686   				{
;;;7687   				temp_SL=UVZ;
;;;7688   				}
;;;7689   			u_necc=(unsigned int)temp_SL;
;;;7690   			}
;;;7691   		else if(BAT_TYPE==1) //если батарея китайская
;;;7692   			{
;;;7693   			u_necc=U0B;
;;;7694   					
;;;7695   			u_necc=bat[0]._Ub+10;
;;;7696   
;;;7697   			
;;;7698   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7699   				{
;;;7700   				u_necc=UVZ;
;;;7701   				}
;;;7702   			if(u_necc>=UB0) u_necc=UB0;
;;;7703   			if(u_necc>=UB20) u_necc=UB20;
;;;7704   			}
;;;7705   		}  
;;;7706   	}
;;;7707   #endif
;;;7708   #endif
;;;7709   
;;;7710   #ifdef UKU_TELECORE2015
;;;7711   
;;;7712   if(unh_cnt0<10)
;;;7713   	{
;;;7714   	unh_cnt0++;
;;;7715   	if(unh_cnt0>=10)
;;;7716   		{
;;;7717   		unh_cnt0=0;
;;;7718   		b1Hz_unh=1;
;;;7719   		}
;;;7720   	}
;;;7721   
;;;7722   if(unh_cnt1<5)
;;;7723   	{
;;;7724   	unh_cnt1++;
;;;7725   	if(unh_cnt1==5)
;;;7726   		{
;;;7727   		unh_cnt1=0;
;;;7728   //		b2Hz_unh=1;
;;;7729   		}
;;;7730   	} 
;;;7731   
;;;7732   
;;;7733   
;;;7734   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7735   	{		
;;;7736   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7737   		{
;;;7738   		u_necc=mess_data[1];
;;;7739   		}		
;;;7740   	}
;;;7741   
;;;7742   
;;;7743   else if(b1Hz_unh)
;;;7744   	{
;;;7745   	b1Hz_unh=0;
;;;7746   
;;;7747   	if(BAT_TYPE==0)
;;;7748   		{
;;;7749   		if(bat[0]._nd)mat_temper=20;
;;;7750   		else mat_temper=bat[0]._Tb;
;;;7751   
;;;7752   			
;;;7753   		if(mat_temper<0)temp_SL=UB0; 
;;;7754   		else 
;;;7755   			{
;;;7756   			if(mat_temper>40)mat_temper=40; 
;;;7757   			temp_SL=(UB20-UB0)*10;
;;;7758   			temp_SL*=mat_temper;
;;;7759   			temp_SL/=200;
;;;7760   			temp_SL+=UB0;
;;;7761   			}
;;;7762   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7763   			{
;;;7764   			temp_SL=UVZ;
;;;7765   			}
;;;7766   		u_necc=(unsigned int)temp_SL;
;;;7767   	///u_necc=3456;
;;;7768   		}
;;;7769   	else if(BAT_TYPE==1)
;;;7770   		{
;;;7771   		
;;;7772   		gran(&DU_LI_BAT,1,30);
;;;7773   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;7774   		gran(&u_necc,0,UB0);
;;;7775   		gran(&u_necc,0,UB20);
;;;7776   		gran(&u_necc,0,540);		
;;;7777   
;;;7778   
;;;7779   		if(li_bat._batStat!=bsOK)
;;;7780   			{
;;;7781   			u_necc=U0B;
;;;7782   			}
;;;7783   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7784   			{
;;;7785   			u_necc=UVZ;
;;;7786   			}
;;;7787   		/* 
;;;7788   		u_necc=U0B;
;;;7789   		
;;;7790   
;;;7791   	
;;;7792   		u_necc=UB0;
;;;7793   		u_necc=li_bat._Ub+10;
;;;7794   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;7795   			{
;;;7796   			lakb_error_cnt++;
;;;7797   			if(lakb_error_cnt>=30)
;;;7798   				{
;;;7799   				lakb_error_cnt=30;
;;;7800   				u_necc=U0B;
;;;7801   				}
;;;7802   			}
;;;7803   		else lakb_error_cnt=0;*/
;;;7804   		}
;;;7805   	else if(BAT_TYPE==2)
;;;7806   		{
;;;7807   		u_necc=U0B;
;;;7808   		
;;;7809   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7810   			{
;;;7811   			u_necc=UVZ;
;;;7812   			}
;;;7813   	
;;;7814   		u_necc=UB0;
;;;7815   		}
;;;7816   
;;;7817   	else if(BAT_TYPE==3)
;;;7818   		{
;;;7819   		u_necc=U0B;
;;;7820   		
;;;7821   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7822   			{
;;;7823   			u_necc=UVZ;
;;;7824   			}
;;;7825   
;;;7826   		gran(&DU_LI_BAT,1,30);
;;;7827   
;;;7828   
;;;7829   		if(lakbNotErrorNum==0)
;;;7830   			{
;;;7831   			u_necc=U0B;
;;;7832   			}
;;;7833   		else 
;;;7834   			{
;;;7835   			signed short i;
;;;7836   			//signed short u_necc_max;
;;;7837   			//u_necc_max=0;
;;;7838   			char soc_flag=0;
;;;7839   
;;;7840   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;7841   				{
;;;7842   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;7843   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;7844   				}
;;;7845   
;;;7846   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;7847   			}
;;;7848   		gran(&u_necc,0,UB0);
;;;7849   		//gran(&u_necc,0,UB20);
;;;7850   		gran(&u_necc,0,540);
;;;7851   		}
;;;7852   	}
;;;7853   
;;;7854   #endif 
;;;7855   
;;;7856   #ifdef UKU_TELECORE2017
;;;7857   
;;;7858   if(unh_cnt0<10)
;;;7859   	{
;;;7860   	unh_cnt0++;
;;;7861   	if(unh_cnt0>=10)
;;;7862   		{
;;;7863   		unh_cnt0=0;
;;;7864   		b1Hz_unh=1;
;;;7865   		}
;;;7866   	}
;;;7867   
;;;7868   if(unh_cnt1<5)
;;;7869   	{
;;;7870   	unh_cnt1++;
;;;7871   	if(unh_cnt1==5)
;;;7872   		{
;;;7873   		unh_cnt1=0;
;;;7874   //		b2Hz_unh=1;
;;;7875   		}
;;;7876   	} 
;;;7877   
;;;7878   
;;;7879   
;;;7880   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7881   	{		
;;;7882   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7883   		{
;;;7884   		u_necc=mess_data[1];
;;;7885   		}		
;;;7886   	}
;;;7887   
;;;7888   
;;;7889   else if(b1Hz_unh)
;;;7890   	{
;;;7891   	b1Hz_unh=0;
;;;7892   
;;;7893   	if(BAT_TYPE==0)
;;;7894   		{
;;;7895   		if(bat[0]._nd)mat_temper=20;
;;;7896   		else mat_temper=bat[0]._Tb;
;;;7897   
;;;7898   			
;;;7899   		if(mat_temper<0)temp_SL=UB0; 
;;;7900   		else 
;;;7901   			{
;;;7902   			if(mat_temper>40)mat_temper=40; 
;;;7903   			temp_SL=(UB20-UB0)*10;
;;;7904   			temp_SL*=mat_temper;
;;;7905   			temp_SL/=200;
;;;7906   			temp_SL+=UB0;
;;;7907   			}
;;;7908   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7909   			{
;;;7910   			temp_SL=UVZ;
;;;7911   			}
;;;7912   		u_necc=(unsigned int)temp_SL;
;;;7913   	///u_necc=3456;
;;;7914   		}
;;;7915   	else if(BAT_TYPE==1)
;;;7916   		{
;;;7917   		
;;;7918   		gran(&DU_LI_BAT,1,30);
;;;7919   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;7920   		gran(&u_necc,0,UB0);
;;;7921   		gran(&u_necc,0,UB20);
;;;7922   		gran(&u_necc,0,540);		
;;;7923   
;;;7924   
;;;7925   		if(li_bat._batStat!=bsOK)
;;;7926   			{
;;;7927   			u_necc=U0B;
;;;7928   			}
;;;7929   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7930   			{
;;;7931   			u_necc=UVZ;
;;;7932   			}
;;;7933   		}
;;;7934   	else if(BAT_TYPE==2)
;;;7935   		{
;;;7936   		u_necc=U0B;
;;;7937   		
;;;7938   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7939   			{
;;;7940   			u_necc=UVZ;
;;;7941   			}
;;;7942   	
;;;7943   		u_necc=UB0;
;;;7944   		}
;;;7945   
;;;7946   	else if(BAT_TYPE==3)
;;;7947   		{
;;;7948   		u_necc=U0B;
;;;7949   		
;;;7950   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7951   			{
;;;7952   			u_necc=UVZ;
;;;7953   			}
;;;7954   
;;;7955   		gran(&DU_LI_BAT,1,30);
;;;7956   
;;;7957   
;;;7958   		if(lakbNotErrorNum==0)
;;;7959   			{
;;;7960   			u_necc=U0B;
;;;7961   			}
;;;7962   		else 
;;;7963   			{
;;;7964   			signed short i;
;;;7965   			//signed short u_necc_max;
;;;7966   			//u_necc_max=0;
;;;7967   			char soc_flag=0;
;;;7968   
;;;7969   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;7970   				{
;;;7971   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;7972   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;7973   				}
;;;7974   
;;;7975   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;7976   			}
;;;7977   		gran(&u_necc,0,UB0);
;;;7978   		//gran(&u_necc,0,UB20);
;;;7979   		gran(&u_necc,0,540);
;;;7980   		}
;;;7981   	}
;;;7982   
;;;7983   #endif 
;;;7984   //u_necc=2356;
;;;7985   
;;;7986   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;7987   	{
;;;7988   	u_necc=speedChrgVolt;
;;;7989   	}
;;;7990   #endif//gran(&u_necc,400,UMAX);
;;;7991   
;;;7992   
;;;7993   
;;;7994   temp_L=(signed long) u_necc;
004a60  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;7995   temp_L*=98L;
004a64  f04f0162          MOV      r1,#0x62
004a68  fb00f101          MUL      r1,r0,r1
;;;7996   temp_L/=100L;
004a6c  f04f0264          MOV      r2,#0x64
004a70  fb91f1f2          SDIV     r1,r1,r2
;;;7997   u_necc_dn=(signed short)temp_L;
004a74  4b54              LDR      r3,|L1.19400|
004a76  8019              STRH     r1,[r3,#0]
;;;7998   
;;;7999   temp_L=(signed long) u_necc;
;;;8000   temp_L*=102L;
004a78  f04f0166          MOV      r1,#0x66
004a7c  fb00f001          MUL      r0,r0,r1
;;;8001   temp_L/=100L;
004a80  fb90f0f2          SDIV     r0,r0,r2
;;;8002   u_necc_up=(signed short)temp_L;
004a84  4951              LDR      r1,|L1.19404|
004a86  8008              STRH     r0,[r1,#0]
;;;8003   /*
;;;8004   #ifdef IPS_SGEP_GAZPROM
;;;8005   u_necc=248;
;;;8006   #endif */
;;;8007   }
004a88  bdf8              POP      {r3-r7,pc}
;;;8008   
                          ENDP

                  num_necc_hndl PROC
;;;8010   //-----------------------------------------------
;;;8011   void num_necc_hndl(void)
004a8a  e92d41f0          PUSH     {r4-r8,lr}
;;;8012   {
;;;8013   
;;;8014   static short num_necc_block_cnt;
;;;8015   if(num_necc_block_cnt) num_necc_block_cnt--;
004a8e  4c40              LDR      r4,|L1.19344|
004a90  f9b40030          LDRSH    r0,[r4,#0x30]  ; num_necc_block_cnt
004a94  b110              CBZ      r0,|L1.19100|
004a96  f1a00001          SUB      r0,r0,#1
004a9a  8620              STRH     r0,[r4,#0x30]
                  |L1.19100|
;;;8016   
;;;8017   Isumm_=Isumm;
004a9c  484c              LDR      r0,|L1.19408|
004a9e  4d4d              LDR      r5,|L1.19412|
004aa0  8800              LDRH     r0,[r0,#0]  ; Isumm
004aa2  8028              STRH     r0,[r5,#0]
;;;8018   
;;;8019   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
004aa4  4e4c              LDR      r6,|L1.19416|
004aa6  270a              MOVS     r7,#0xa
004aa8  f9b60008          LDRSH    r0,[r6,#8]  ; bat
004aac  2800              CMP      r0,#0
004aae  da06              BGE      |L1.19134|
004ab0  f7fffffe          BL       abs
004ab4  fb90f0f7          SDIV     r0,r0,r7
004ab8  8829              LDRH     r1,[r5,#0]  ; Isumm_
004aba  4408              ADD      r0,r0,r1
004abc  8028              STRH     r0,[r5,#0]
                  |L1.19134|
;;;8020   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
004abe  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
004ac2  2800              CMP      r0,#0
004ac4  da06              BGE      |L1.19156|
004ac6  f7fffffe          BL       abs
004aca  fb90f0f7          SDIV     r0,r0,r7
004ace  8829              LDRH     r1,[r5,#0]  ; Isumm_
004ad0  4408              ADD      r0,r0,r1
004ad2  8028              STRH     r0,[r5,#0]
                  |L1.19156|
;;;8021   
;;;8022   num_necc_up=(Isumm_/((signed short)IMAX))+1;
004ad4  4941              LDR      r1,|L1.19420|
004ad6  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
004ada  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
004ade  fb90f1f1          SDIV     r1,r0,r1
004ae2  f1010101          ADD      r1,r1,#1
004ae6  b2c9              UXTB     r1,r1
004ae8  7521              STRB     r1,[r4,#0x14]
;;;8023   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;8024   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;8025   
;;;8026   num_necc_down=(Isumm_/((signed short)IMIN))+1;
004aea  4a3d              LDR      r2,|L1.19424|
004aec  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
004af0  fb90f0f2          SDIV     r0,r0,r2
004af4  f1000001          ADD      r0,r0,#1
004af8  b2c2              UXTB     r2,r0
004afa  7562              STRB     r2,[r4,#0x15]
;;;8027   
;;;8028   if(num_necc_up>num_necc)
004afc  4839              LDR      r0,|L1.19428|
;;;8029   	{
;;;8030   	num_necc=num_necc_up;
;;;8031   	num_necc_block_cnt=60;
004afe  f04f053c          MOV      r5,#0x3c
004b02  f9b03000          LDRSH    r3,[r0,#0]            ;8028  ; num_necc
004b06  4299              CMP      r1,r3                 ;8028
004b08  dd02              BLE      |L1.19216|
004b0a  8001              STRH     r1,[r0,#0]            ;8030
004b0c  8625              STRH     r5,[r4,#0x30]
004b0e  e005              B        |L1.19228|
                  |L1.19216|
;;;8032   	}
;;;8033   else if(num_necc_down<num_necc)
004b10  429a              CMP      r2,r3
004b12  da03              BGE      |L1.19228|
;;;8034   	{
;;;8035   	if(!num_necc_block_cnt)
004b14  8e21              LDRH     r1,[r4,#0x30]  ; num_necc_block_cnt
004b16  b909              CBNZ     r1,|L1.19228|
;;;8036   		{
;;;8037   		num_necc=num_necc_down;
004b18  8002              STRH     r2,[r0,#0]
;;;8038   		num_necc_block_cnt=60;
004b1a  8625              STRH     r5,[r4,#0x30]
                  |L1.19228|
;;;8039   		}
;;;8040   	}
;;;8041   
;;;8042   if(PAR) num_necc=NUMIST;
004b1c  4932              LDR      r1,|L1.19432|
004b1e  880a              LDRH     r2,[r1,#0]  ; PAR
004b20  4915              LDR      r1,|L1.19320|
004b22  b10a              CBZ      r2,|L1.19240|
004b24  880a              LDRH     r2,[r1,#0]  ; NUMIST
004b26  8002              STRH     r2,[r0,#0]
                  |L1.19240|
;;;8043   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8044   if(bPARALLEL) num_necc=NUMIST;
004b28  f8942022          LDRB     r2,[r4,#0x22]  ; bPARALLEL
004b2c  b10a              CBZ      r2,|L1.19250|
004b2e  880a              LDRH     r2,[r1,#0]  ; NUMIST
004b30  8002              STRH     r2,[r0,#0]
                  |L1.19250|
;;;8045   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
004b32  f8942024          LDRB     r2,[r4,#0x24]  ; vz1_stat
004b36  2a0a              CMP      r2,#0xa
004b38  d101              BNE      |L1.19262|
004b3a  880a              LDRH     r2,[r1,#0]  ; NUMIST
004b3c  8002              STRH     r2,[r0,#0]
                  |L1.19262|
;;;8046   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
004b3e  f8942027          LDRB     r2,[r4,#0x27]  ; vz2_stat
004b42  2a0a              CMP      r2,#0xa
004b44  d001              BEQ      |L1.19274|
004b46  2a0b              CMP      r2,#0xb
004b48  d152              BNE      |L1.19440|
                  |L1.19274|
004b4a  e04f              B        |L1.19436|
                  |L1.19276|
                          DCD      uavt_set_stat
                  |L1.19280|
                          DCD      uavt_set_error_cnt
                  |L1.19284|
                          DCD      uavt_set_stat_old
                  |L1.19288|
                          DCD      U_AVT
                  |L1.19292|
                          DCD      bps_U
                  |L1.19296|
                          DCD      uavt_set_result_stat
                  |L1.19300|
                          DCD      avt_error_bps
                  |L1.19304|
                          DCD      u_max_temp
                  |L1.19308|
                          DCD      u_min_temp
                  |L1.19312|
                          DCD      uavt_bps_pntr
                  |L1.19316|
                          DCD      bps
                  |L1.19320|
                          DCD      NUMIST
                  |L1.19324|
                          DCD      avt_plazma
                  |L1.19328|
                          DCD      mess_data
                  |L1.19332|
                          DCD      TERMOKOMPENS
                  |L1.19336|
                          DCD      UB20
                  |L1.19340|
                          DCD      UVZ
                  |L1.19344|
                          DCD      ||area_number.25||
                  |L1.19348|
                          DCD      u_necc
                  |L1.19352|
                          DCD      ND_EXT
                  |L1.19356|
                          DCD      t_ext
                  |L1.19360|
                          DCD      mat_temper
                  |L1.19364|
                          DCD      UB0
                  |L1.19368|
                          DCD      sk_stat
                  |L1.19372|
                          DCD      speedChIsOn
                  |L1.19376|
                          DCD      sp_ch_stat
                  |L1.19380|
                          DCD      speedChrgVolt
                  |L1.19384|
                          DCD      hv_vz_stat
                  |L1.19388|
                          DCD      UZ_U
                  |L1.19392|
                          DCD      FZ_U1
                  |L1.19396|
                          DCD      FZ_U2
                  |L1.19400|
                          DCD      u_necc_dn
                  |L1.19404|
                          DCD      u_necc_up
                  |L1.19408|
                          DCD      Isumm
                  |L1.19412|
                          DCD      Isumm_
                  |L1.19416|
                          DCD      bat
                  |L1.19420|
                          DCD      IMAX
                  |L1.19424|
                          DCD      IMIN
                  |L1.19428|
                          DCD      num_necc
                  |L1.19432|
                          DCD      PAR
                  |L1.19436|
004bec  880a              LDRH     r2,[r1,#0]  ; NUMIST
004bee  8002              STRH     r2,[r0,#0]
                  |L1.19440|
;;;8047   #endif
;;;8048   
;;;8049   gran(&num_necc,1,NUMIST);
004bf0  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
004bf4  e8bd41f0          POP      {r4-r8,lr}
004bf8  2101              MOVS     r1,#1
004bfa  48fc              LDR      r0,|L1.20460|
004bfc  f7ffbffe          B.W      gran
;;;8050   
;;;8051   }
;;;8052   
                          ENDP

                  cntrl_hndl PROC
;;;8055   //-----------------------------------------------
;;;8056   void cntrl_hndl(void)
004c00  e92d5ff0          PUSH     {r4-r12,lr}
;;;8057   {
;;;8058   
;;;8059   
;;;8060   
;;;8061   IZMAX_=IZMAX;
004c04  48fa              LDR      r0,|L1.20464|
004c06  4cfb              LDR      r4,|L1.20468|
004c08  8800              LDRH     r0,[r0,#0]  ; IZMAX
004c0a  f8a40044          STRH     r0,[r4,#0x44]
;;;8062   
;;;8063   //cntrl_hndl_plazma=10;
;;;8064   
;;;8065   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
004c0e  48fa              LDR      r0,|L1.20472|
004c10  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
004c12  b918              CBNZ     r0,|L1.19484|
004c14  48f9              LDR      r0,|L1.20476|
004c16  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
004c18  2802              CMP      r0,#2
004c1a  d103              BNE      |L1.19492|
                  |L1.19484|
004c1c  48f8              LDR      r0,|L1.20480|
004c1e  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
004c20  f8a40044          STRH     r0,[r4,#0x44]
                  |L1.19492|
;;;8066   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
004c24  f8940024          LDRB     r0,[r4,#0x24]  ; vz1_stat
004c28  280a              CMP      r0,#0xa
004c2a  d103              BNE      |L1.19508|
004c2c  48f5              LDR      r0,|L1.20484|
004c2e  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
004c30  f8a40044          STRH     r0,[r4,#0x44]
                  |L1.19508|
;;;8067   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
004c34  f8940027          LDRB     r0,[r4,#0x27]  ; vz2_stat
004c38  280a              CMP      r0,#0xa
004c3a  d103              BNE      |L1.19524|
004c3c  49f2              LDR      r1,|L1.20488|
004c3e  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
004c40  f8a41044          STRH     r1,[r4,#0x44]
                  |L1.19524|
;;;8068   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
004c44  280b              CMP      r0,#0xb
004c46  d103              BNE      |L1.19536|
004c48  48f0              LDR      r0,|L1.20492|
004c4a  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
004c4c  f8a40044          STRH     r0,[r4,#0x44]
                  |L1.19536|
;;;8069   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;8070   
;;;8071   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
004c50  f9b4006c          LDRSH    r0,[r4,#0x6c]  ; cntrl_stat_blok_cnt
004c54  b118              CBZ      r0,|L1.19550|
004c56  f1a00001          SUB      r0,r0,#1
004c5a  f8a4006c          STRH     r0,[r4,#0x6c]
                  |L1.19550|
;;;8072   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
004c5e  f9b4006e          LDRSH    r0,[r4,#0x6e]  ; cntrl_stat_blok_cnt_
004c62  b118              CBZ      r0,|L1.19564|
004c64  f1a00001          SUB      r0,r0,#1
004c68  f8a4006e          STRH     r0,[r4,#0x6e]
                  |L1.19564|
;;;8073   
;;;8074   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
004c6c  48e8              LDR      r0,|L1.20496|
004c6e  f04f080a          MOV      r8,#0xa               ;8066
004c72  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
004c76  0789              LSLS     r1,r1,#30
004c78  d103              BNE      |L1.19586|
004c7a  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
004c7e  0780              LSLS     r0,r0,#30
004c80  d005              BEQ      |L1.19598|
                  |L1.19586|
004c82  f8b40044          LDRH     r0,[r4,#0x44]  ; IZMAX_
004c86  fbb0f0f8          UDIV     r0,r0,r8
004c8a  f8a40044          STRH     r0,[r4,#0x44]
                  |L1.19598|
;;;8075   
;;;8076   
;;;8077   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8078   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
004c8e  48e1              LDR      r0,|L1.20500|
004c90  2601              MOVS     r6,#1
004c92  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
004c96  1e49              SUBS     r1,r1,#1
004c98  2905              CMP      r1,#5
004c9a  d300              BCC      |L1.19614|
004c9c  8006              STRH     r6,[r0,#0]
                  |L1.19614|
;;;8079   if(ch_cnt0<(10*REG_SPEED))
004c9e  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
004ca2  2500              MOVS     r5,#0                 ;8065
004ca4  eb000180          ADD      r1,r0,r0,LSL #2
004ca8  7ae0              LDRB     r0,[r4,#0xb]  ; ch_cnt0
004caa  ebb00f41          CMP      r0,r1,LSL #1
004cae  da08              BGE      |L1.19650|
;;;8080   	{
;;;8081   	ch_cnt0++;
004cb0  f1000001          ADD      r0,r0,#1
004cb4  b2c0              UXTB     r0,r0
004cb6  72e0              STRB     r0,[r4,#0xb]
;;;8082   	if(ch_cnt0>=10*REG_SPEED)
004cb8  ebb00f41          CMP      r0,r1,LSL #1
004cbc  db01              BLT      |L1.19650|
;;;8083   		{
;;;8084   		ch_cnt0=0;
004cbe  72e5              STRB     r5,[r4,#0xb]
;;;8085   		b1Hz_ch=1;
004cc0  7326              STRB     r6,[r4,#0xc]
                  |L1.19650|
;;;8086   		}
;;;8087   	}
;;;8088   #endif
;;;8089   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8090   if(ch_cnt0<10)
;;;8091   	{
;;;8092   	ch_cnt0++;
;;;8093   	if(ch_cnt0>=10)
;;;8094   		{
;;;8095   		ch_cnt0=0;
;;;8096   		b1Hz_ch=1;
;;;8097   		}
;;;8098   	}
;;;8099   #endif
;;;8100   
;;;8101   
;;;8102   if(mess_find_unvol(MESS2CNTRL_HNDL))
004cc2  20e1              MOVS     r0,#0xe1
004cc4  f7fffffe          BL       mess_find_unvol
;;;8103   	{
;;;8104   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;8105   		{
;;;8106   		cntrl_stat_new=cntrl_stat_old+mess_data[1];
;;;8107   		}
;;;8108   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;8109   		{
;;;8110   		cntrl_stat_new=cntrl_stat_old-mess_data[1];
;;;8111   		}
;;;8112   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;8113   		{
;;;8114   		static char cntrlStatIsDownCnt;
;;;8115   		cntrl_stat--;
;;;8116   
;;;8117   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;8118   			{
;;;8119   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;8120   			}
;;;8121   		else 
;;;8122   			{
;;;8123   			cntrlStatIsDownCnt=0;
;;;8124   			}
;;;8125   
;;;8126   		}
;;;8127   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;8128   		{
;;;8129   		cntrl_stat_new=mess_data[1];
;;;8130   		}
;;;8131   
;;;8132   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;8133   		{
;;;8134   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8135   		if(bps_U>u_necc)
004cc8  f8dfc34c          LDR      r12,|L1.20504|
004ccc  4ad3              LDR      r2,|L1.20508|
;;;8136   			{
;;;8137   			cntrl_hndl_plazma=11;
;;;8138   			if(((bps_U-u_necc)>40)&&(cntrl_stat_new>0))cntrl_stat_new-=5;
;;;8139   			else if((cntrl_stat_new)&&b1Hz_ch)cntrl_stat_new--;
;;;8140   			}
;;;8141   		else if(bps_U<u_necc)
;;;8142   			{
;;;8143   			cntrl_hndl_plazma=12;	
;;;8144   			if(((u_necc-bps_U)>40)&&(cntrl_stat_new<1015))cntrl_stat_new+=5;
;;;8145   			else	if((cntrl_stat_new<1020)&&b1Hz_ch)cntrl_stat_new++;
;;;8146   			}
;;;8147   		#elif defined(UKU_220)
;;;8148   		if(load_U>u_necc)
;;;8149   			{
;;;8150   			cntrl_hndl_plazma=13;
;;;8151   			if(((load_U-u_necc)>40)&&(cntrl_stat_new>0))cntrl_stat_new-=5;
;;;8152   			else if((cntrl_stat_new)&&b1Hz_ch)cntrl_stat_new--;
;;;8153   			}
;;;8154   		else if(load_U<u_necc)
;;;8155   			{
;;;8156   			cntrl_hndl_plazma=14;	
;;;8157   			if(((u_necc-load_U)>40)&&(cntrl_stat_new<1015))cntrl_stat_new+=5;
;;;8158   			else	if((cntrl_stat_new<1020)&&b1Hz_ch)cntrl_stat_new++;
;;;8159   			}
;;;8160   		#elif defined(UKU_220_V2)
;;;8161   		if(load_U>u_necc)
;;;8162   			{
;;;8163   			cntrl_hndl_plazma=15;
;;;8164   			if(((load_U-u_necc)>40)&&(cntrl_stat_new>0))cntrl_stat_new-=5;
;;;8165   			else if((cntrl_stat_new)&&b1Hz_ch)cntrl_stat_new--;
;;;8166   			}
;;;8167   		else if(load_U<u_necc)
;;;8168   			{
;;;8169   			cntrl_hndl_plazma=16;	
;;;8170   			if(((u_necc-load_U)>40)&&(cntrl_stat_new<1015))cntrl_stat_new+=5;
;;;8171   			else	if((cntrl_stat_new<1020)&&b1Hz_ch)cntrl_stat_new++;
;;;8172   			}
;;;8173   		#else
;;;8174   
;;;8175   		if(load_U>u_necc)
;;;8176   			{
;;;8177   			cntrl_hndl_plazma=17;
;;;8178   			if(((load_U-u_necc)>10)&&(cntrl_stat_new>0))cntrl_stat_new-=5;
;;;8179   			else if((cntrl_stat_new)&&b1Hz_ch)cntrl_stat_new--;
;;;8180   			}
;;;8181   		else if(load_U<u_necc)
;;;8182   			{
;;;8183   			cntrl_hndl_plazma=18;	
;;;8184   			if(((u_necc-load_U)>10)&&(cntrl_stat_new<1015))cntrl_stat_new+=5;
;;;8185   			else	if((cntrl_stat_new<1020)&&b1Hz_ch)cntrl_stat_new++;
;;;8186   			}
;;;8187   		#endif	
;;;8188   	 	}
;;;8189   
;;;8190   	gran(&cntrl_stat_new,10,1010);			
;;;8191   	cntrl_stat_old=cntrl_stat_new;
;;;8192   	cntrl_stat=cntrl_stat_new;
;;;8193   	}
;;;8194   
;;;8195   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8196   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
004cce  f8df9350          LDR      r9,|L1.20512|
;;;8197   	{
;;;8198   	cntrl_stat_new=cntrl_stat_old;
;;;8199   	cntrl_hndl_plazma=19;
;;;8200   	if((Ibmax/10)>(2*IZMAX_))
;;;8201   		{
;;;8202   		cntrl_hndl_plazma=20;
;;;8203             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8204   		else	cntrl_stat_new-=10;
;;;8205   		}		
;;;8206   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;8207   		{
;;;8208   		cntrl_hndl_plazma=21;
;;;8209             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8210             else	cntrl_stat_new-=3;
;;;8211   		}   
;;;8212   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;8213   		{
;;;8214   		cntrl_hndl_plazma=22;
;;;8215   		cntrl_stat_new--;
;;;8216   		}
;;;8217   		
;;;8218   	else if(bps_U<u_necc)
;;;8219   		{
;;;8220   		cntrl_hndl_plazma=23;
;;;8221   		if(bps_U<(u_necc-(UB0-UB20)))
;;;8222   			{
;;;8223   			cntrl_hndl_plazma=24;
;;;8224   			if(Ibmax<0)
;;;8225   				{
;;;8226   				cntrl_hndl_plazma=25;
;;;8227                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8228   				else cntrl_stat_new+=10;
;;;8229   				}
;;;8230   			else if(Ibmax<(IZMAX_*5))
;;;8231   				{
;;;8232   				cntrl_hndl_plazma=26;
;;;8233                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8234   				else	cntrl_stat_new+=2;
;;;8235   				}
;;;8236   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8237   				{
;;;8238   				cntrl_hndl_plazma=27;
;;;8239   				cntrl_stat_new++;
;;;8240   				}					
;;;8241   			}
;;;8242   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;8243   			{
;;;8244   			cntrl_hndl_plazma=28;
;;;8245   			if(Ibmax<(IZMAX_*5))
;;;8246   				{
;;;8247   				cntrl_hndl_plazma=29;
;;;8248                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8249   				else	cntrl_stat_new+=2;
;;;8250   				}
;;;8251   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8252   				{
;;;8253   				cntrl_hndl_plazma=30;
;;;8254   				cntrl_stat_new++;
;;;8255   				}					
;;;8256   			}	
;;;8257   		else if(bps_U<(u_necc-1))
;;;8258   			{
;;;8259   			cntrl_hndl_plazma=31;
;;;8260   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8261   				{
;;;8262   				cntrl_hndl_plazma=32;
;;;8263   				cntrl_stat_new++;
;;;8264   				}					
;;;8265   			}					
;;;8266   		}	
;;;8267   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;8268   		{ 	
;;;8269   		cntrl_hndl_plazma=33;
;;;8270   		if(bps_U>(u_necc+(UB0-UB20)))
;;;8271   			{
;;;8272   			cntrl_hndl_plazma=34;
;;;8273                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8274   			else	cntrl_stat_new-=10;
;;;8275   			}
;;;8276   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;8277   			{
;;;8278   			cntrl_hndl_plazma=35;
;;;8279                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8280   			else cntrl_stat_new-=2;
;;;8281   			}	
;;;8282   		else if(bps_U>(u_necc+1))
;;;8283   			{
;;;8284   			cntrl_hndl_plazma=36;
;;;8285   			cntrl_stat_new--;
;;;8286   			}					
;;;8287   		}
;;;8288   
;;;8289   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;8290   		{
;;;8291   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;8292   		}
;;;8293   
;;;8294   	gran(&cntrl_stat_new,10,1010);			
;;;8295   	cntrl_stat_old=cntrl_stat_new;
;;;8296   	cntrl_stat=cntrl_stat_new;
;;;8297   	
;;;8298   	if(ICA_EN==0)
;;;8299   		{
;;;8300   		if(ica_cntrl_hndl_cnt)
004cd2  4fd4              LDR      r7,|L1.20516|
004cd4  2800              CMP      r0,#0                 ;8102
004cd6  d070              BEQ      |L1.19898|
004cd8  49d3              LDR      r1,|L1.20520|
004cda  6808              LDR      r0,[r1,#0]            ;8104  ; mess_data
004cdc  2864              CMP      r0,#0x64              ;8104
004cde  d008              BEQ      |L1.19698|
004ce0  2869              CMP      r0,#0x69              ;8108
004ce2  d00c              BEQ      |L1.19710|
004ce4  286e              CMP      r0,#0x6e              ;8112
004ce6  d011              BEQ      |L1.19724|
004ce8  28e5              CMP      r0,#0xe5              ;8127
004cea  d02d              BEQ      |L1.19784|
004cec  28e6              CMP      r0,#0xe6              ;8132
004cee  d02f              BEQ      |L1.19792|
004cf0  e06f              B        |L1.19922|
                  |L1.19698|
004cf2  6848              LDR      r0,[r1,#4]            ;8106  ; mess_data
004cf4  8da1              LDRH     r1,[r4,#0x2c]         ;8106  ; cntrl_stat_old
004cf6  4408              ADD      r0,r0,r1              ;8106
004cf8  f8a40040          STRH     r0,[r4,#0x40]         ;8106
004cfc  e069              B        |L1.19922|
                  |L1.19710|
004cfe  6848              LDR      r0,[r1,#4]            ;8110  ; mess_data
004d00  8da1              LDRH     r1,[r4,#0x2c]         ;8110  ; cntrl_stat_old
004d02  eba10000          SUB      r0,r1,r0              ;8110
004d06  f8a40040          STRH     r0,[r4,#0x40]         ;8110
004d0a  e062              B        |L1.19922|
                  |L1.19724|
004d0c  8d60              LDRH     r0,[r4,#0x2a]         ;8115  ; cntrl_stat
004d0e  f1a00001          SUB      r0,r0,#1              ;8115
004d12  b200              SXTH     r0,r0                 ;8115
004d14  8560              STRH     r0,[r4,#0x2a]         ;8115
004d16  281e              CMP      r0,#0x1e              ;8117
004d18  dd07              BLE      |L1.19754|
004d1a  48c4              LDR      r0,|L1.20524|
004d1c  49c4              LDR      r1,|L1.20528|
004d1e  f9b00000          LDRSH    r0,[r0,#0]            ;8117  ; load_U
004d22  f9b11000          LDRSH    r1,[r1,#0]            ;8117  ; USIGN
004d26  4288              CMP      r0,r1                 ;8117
004d28  da0c              BGE      |L1.19780|
                  |L1.19754|
004d2a  7960              LDRB     r0,[r4,#5]            ;8119  ; cntrlStatIsDownCnt
004d2c  1c40              ADDS     r0,r0,#1              ;8119
004d2e  b2c0              UXTB     r0,r0                 ;8119
004d30  7160              STRB     r0,[r4,#5]            ;8119
004d32  28fa              CMP      r0,#0xfa              ;8119
004d34  d14d              BNE      |L1.19922|
004d36  230a              MOVS     r3,#0xa               ;8119
004d38  2200              MOVS     r2,#0                 ;8119
004d3a  21e7              MOVS     r1,#0xe7              ;8119
004d3c  20e6              MOVS     r0,#0xe6              ;8119
004d3e  f7fffffe          BL       mess_send
004d42  e046              B        |L1.19922|
                  |L1.19780|
004d44  7165              STRB     r5,[r4,#5]            ;8123
004d46  e044              B        |L1.19922|
                  |L1.19784|
004d48  6848              LDR      r0,[r1,#4]            ;8129  ; mess_data
004d4a  f8a40040          STRH     r0,[r4,#0x40]         ;8129
004d4e  e040              B        |L1.19922|
                  |L1.19792|
004d50  f9bc0000          LDRSH    r0,[r12,#0]           ;8135  ; bps_U
004d54  f9b21000          LDRSH    r1,[r2,#0]            ;8135  ; u_necc
004d58  4288              CMP      r0,r1                 ;8135
004d5a  dd1a              BLE      |L1.19858|
004d5c  f04f020b          MOV      r2,#0xb               ;8137
004d60  f8842023          STRB     r2,[r4,#0x23]         ;8137
004d64  eba00001          SUB      r0,r0,r1              ;8138
004d68  2828              CMP      r0,#0x28              ;8138
004d6a  dd08              BLE      |L1.19838|
004d6c  f9b40040          LDRSH    r0,[r4,#0x40]         ;8138  ; cntrl_stat_new
004d70  2800              CMP      r0,#0                 ;8138
004d72  dd04              BLE      |L1.19838|
004d74  f1a00005          SUB      r0,r0,#5              ;8138
004d78  f8a40040          STRH     r0,[r4,#0x40]         ;8138
004d7c  e029              B        |L1.19922|
                  |L1.19838|
004d7e  f9b40040          LDRSH    r0,[r4,#0x40]         ;8139  ; cntrl_stat_new
004d82  b330              CBZ      r0,|L1.19922|
004d84  7b21              LDRB     r1,[r4,#0xc]          ;8139  ; b1Hz_ch
004d86  b321              CBZ      r1,|L1.19922|
004d88  f1a00001          SUB      r0,r0,#1              ;8139
004d8c  f8a40040          STRH     r0,[r4,#0x40]         ;8139
004d90  e01f              B        |L1.19922|
                  |L1.19858|
004d92  da1e              BGE      |L1.19922|
004d94  f04f020c          MOV      r2,#0xc               ;8143
004d98  f8842023          STRB     r2,[r4,#0x23]         ;8143
004d9c  eba10000          SUB      r0,r1,r0              ;8144
004da0  2828              CMP      r0,#0x28              ;8144
004da2  dd0b              BLE      |L1.19900|
004da4  f9b40040          LDRSH    r0,[r4,#0x40]         ;8144  ; cntrl_stat_new
004da8  f24031f7          MOV      r1,#0x3f7             ;8144
004dac  4288              CMP      r0,r1                 ;8144
004dae  da05              BGE      |L1.19900|
004db0  f1000005          ADD      r0,r0,#5              ;8144
004db4  f8a40040          STRH     r0,[r4,#0x40]         ;8144
004db8  e00b              B        |L1.19922|
                  |L1.19898|
004dba  e016              B        |L1.19946|
                  |L1.19900|
004dbc  f9b40040          LDRSH    r0,[r4,#0x40]         ;8145  ; cntrl_stat_new
004dc0  f5b07f7f          CMP      r0,#0x3fc             ;8145
004dc4  da05              BGE      |L1.19922|
004dc6  7b21              LDRB     r1,[r4,#0xc]          ;8145  ; b1Hz_ch
004dc8  b119              CBZ      r1,|L1.19922|
004dca  f1000001          ADD      r0,r0,#1              ;8145
004dce  f8a40040          STRH     r0,[r4,#0x40]         ;8145
                  |L1.19922|
004dd2  4888              LDR      r0,|L1.20468|
004dd4  f24032f2          MOV      r2,#0x3f2             ;8190
004dd8  210a              MOVS     r1,#0xa               ;8190
004dda  3040              ADDS     r0,r0,#0x40           ;8190
004ddc  f7fffffe          BL       gran
004de0  f8b40040          LDRH     r0,[r4,#0x40]         ;8191  ; cntrl_stat_new
004de4  85a0              STRH     r0,[r4,#0x2c]         ;8191
004de6  8560              STRH     r0,[r4,#0x2a]         ;8192
                  |L1.19944|
004de8  e18a              B        |L1.20736|
                  |L1.19946|
004dea  7b20              LDRB     r0,[r4,#0xc]          ;8196  ; b1Hz_ch
004dec  2800              CMP      r0,#0                 ;8196
004dee  d0fb              BEQ      |L1.19944|
004df0  4890              LDR      r0,|L1.20532|
004df2  8800              LDRH     r0,[r0,#0]            ;8196  ; bIBAT_SMKLBR
004df4  b118              CBZ      r0,|L1.19966|
004df6  f89902e3          LDRB     r0,[r9,#0x2e3]        ;8196  ; bps
004dfa  2828              CMP      r0,#0x28              ;8196
004dfc  d9f4              BLS      |L1.19944|
                  |L1.19966|
004dfe  f1040422          ADD      r4,r4,#0x22           ;8198
004e02  f9b4000a          LDRSH    r0,[r4,#0xa]          ;8198  ; cntrl_stat_old
004e06  83e0              STRH     r0,[r4,#0x1e]         ;8198
004e08  f04f0113          MOV      r1,#0x13              ;8199
004e0c  7061              STRB     r1,[r4,#1]            ;8199
004e0e  f9b41020          LDRSH    r1,[r4,#0x20]         ;8200  ; Ibmax
004e12  8c63              LDRH     r3,[r4,#0x22]         ;8200  ; IZMAX_
004e14  fb91f8f8          SDIV     r8,r1,r8              ;8200
004e18  f1a40422          SUB      r4,r4,#0x22           ;8200
004e1c  ebb80f43          CMP      r8,r3,LSL #1          ;8200
004e20  dd10              BLE      |L1.20036|
004e22  f04f0114          MOV      r1,#0x14              ;8202
004e26  f8841023          STRB     r1,[r4,#0x23]         ;8202
004e2a  f8b4106c          LDRH     r1,[r4,#0x6c]         ;8203  ; cntrl_stat_blok_cnt
004e2e  b121              CBZ      r1,|L1.20026|
004e30  f1a00001          SUB      r0,r0,#1              ;8203
004e34  f8a40040          STRH     r0,[r4,#0x40]         ;8203
004e38  e12a              B        |L1.20624|
                  |L1.20026|
004e3a  f1a0000a          SUB      r0,r0,#0xa            ;8204
004e3e  f8a40040          STRH     r0,[r4,#0x40]         ;8204
004e42  e125              B        |L1.20624|
                  |L1.20036|
004e44  da14              BGE      |L1.20080|
004e46  ebc31a03          RSB      r10,r3,r3,LSL #4      ;8206
004e4a  458a              CMP      r10,r1                ;8206
004e4c  da10              BGE      |L1.20080|
004e4e  f04f0115          MOV      r1,#0x15              ;8208
004e52  f8841023          STRB     r1,[r4,#0x23]         ;8208
004e56  f8b4106c          LDRH     r1,[r4,#0x6c]         ;8209  ; cntrl_stat_blok_cnt
004e5a  b121              CBZ      r1,|L1.20070|
004e5c  f1a00001          SUB      r0,r0,#1              ;8209
004e60  f8a40040          STRH     r0,[r4,#0x40]         ;8209
004e64  e114              B        |L1.20624|
                  |L1.20070|
004e66  f1a00003          SUB      r0,r0,#3              ;8210
004e6a  f8a40040          STRH     r0,[r4,#0x40]         ;8210
004e6e  e10f              B        |L1.20624|
                  |L1.20080|
004e70  ebc31a03          RSB      r10,r3,r3,LSL #4      ;8212
004e74  458a              CMP      r10,r1                ;8212
004e76  dd0a              BLE      |L1.20110|
004e78  4598              CMP      r8,r3                 ;8212
004e7a  dd08              BLE      |L1.20110|
004e7c  f04f0116          MOV      r1,#0x16              ;8214
004e80  f8841023          STRB     r1,[r4,#0x23]         ;8214
004e84  f1a00001          SUB      r0,r0,#1              ;8215
004e88  f8a40040          STRH     r0,[r4,#0x40]         ;8215
004e8c  e100              B        |L1.20624|
                  |L1.20110|
004e8e  f9bcc000          LDRSH    r12,[r12,#0]          ;8218  ; bps_U
004e92  f9b22000          LDRSH    r2,[r2,#0]            ;8218  ; u_necc
004e96  f8df81a0          LDR      r8,|L1.20536|
004e9a  f8dfb1a0          LDR      r11,|L1.20540|
004e9e  4594              CMP      r12,r2                ;8218
004ea0  da72              BGE      |L1.20360|
004ea2  f04f0a17          MOV      r10,#0x17             ;8220
004ea6  f884a023          STRB     r10,[r4,#0x23]        ;8220
004eaa  f9b88000          LDRSH    r8,[r8,#0]            ;8221  ; UB0
004eae  f9bba000          LDRSH    r10,[r11,#0]          ;8221  ; UB20
004eb2  eba8080a          SUB      r8,r8,r10             ;8221
004eb6  eba20a08          SUB      r10,r2,r8             ;8221
004eba  45e2              CMP      r10,r12               ;8221
004ebc  dd37              BLE      |L1.20270|
004ebe  f04f0218          MOV      r2,#0x18              ;8223
004ec2  f8842023          STRB     r2,[r4,#0x23]         ;8223
004ec6  2900              CMP      r1,#0                 ;8224
004ec8  da10              BGE      |L1.20204|
004eca  f04f0119          MOV      r1,#0x19              ;8226
004ece  f8841023          STRB     r1,[r4,#0x23]         ;8226
004ed2  f8b4106c          LDRH     r1,[r4,#0x6c]         ;8227  ; cntrl_stat_blok_cnt
004ed6  b121              CBZ      r1,|L1.20194|
004ed8  f1000001          ADD      r0,r0,#1              ;8227
004edc  f8a40040          STRH     r0,[r4,#0x40]         ;8227
004ee0  e0d6              B        |L1.20624|
                  |L1.20194|
004ee2  f100000a          ADD      r0,r0,#0xa            ;8228
004ee6  f8a40040          STRH     r0,[r4,#0x40]         ;8228
004eea  e0d1              B        |L1.20624|
                  |L1.20204|
004eec  eb030283          ADD      r2,r3,r3,LSL #2       ;8230
004ef0  428a              CMP      r2,r1                 ;8230
004ef2  dd10              BLE      |L1.20246|
004ef4  f04f011a          MOV      r1,#0x1a              ;8232
004ef8  f8841023          STRB     r1,[r4,#0x23]         ;8232
004efc  f8b4106c          LDRH     r1,[r4,#0x6c]         ;8233  ; cntrl_stat_blok_cnt
004f00  b121              CBZ      r1,|L1.20236|
004f02  f1000001          ADD      r0,r0,#1              ;8233
004f06  f8a40040          STRH     r0,[r4,#0x40]         ;8233
004f0a  e0c1              B        |L1.20624|
                  |L1.20236|
004f0c  f1000002          ADD      r0,r0,#2              ;8234
004f10  f8a40040          STRH     r0,[r4,#0x40]         ;8234
004f14  e0bc              B        |L1.20624|
                  |L1.20246|
004f16  ebb10f42          CMP      r1,r2,LSL #1          ;8236
004f1a  da07              BGE      |L1.20268|
004f1c  f04f011b          MOV      r1,#0x1b              ;8238
004f20  f8841023          STRB     r1,[r4,#0x23]         ;8238
004f24  f1000001          ADD      r0,r0,#1              ;8239
004f28  f8a40040          STRH     r0,[r4,#0x40]         ;8239
                  |L1.20268|
004f2c  e0b0              B        |L1.20624|
                  |L1.20270|
004f2e  ea4f7ae8          ASR      r10,r8,#31            ;8242
004f32  eb08789a          ADD      r8,r8,r10,LSR #30     ;8242
004f36  eba208a8          SUB      r8,r2,r8,ASR #2       ;8242
004f3a  45e0              CMP      r8,r12                ;8242
004f3c  dd25              BLE      |L1.20362|
004f3e  f04f021c          MOV      r2,#0x1c              ;8244
004f42  f8842023          STRB     r2,[r4,#0x23]         ;8244
004f46  eb030283          ADD      r2,r3,r3,LSL #2       ;8245
004f4a  428a              CMP      r2,r1                 ;8245
004f4c  dd10              BLE      |L1.20336|
004f4e  f04f011d          MOV      r1,#0x1d              ;8247
004f52  f8841023          STRB     r1,[r4,#0x23]         ;8247
004f56  f8b4106c          LDRH     r1,[r4,#0x6c]         ;8248  ; cntrl_stat_blok_cnt
004f5a  b121              CBZ      r1,|L1.20326|
004f5c  f1000001          ADD      r0,r0,#1              ;8248
004f60  f8a40040          STRH     r0,[r4,#0x40]         ;8248
004f64  e094              B        |L1.20624|
                  |L1.20326|
004f66  f1000002          ADD      r0,r0,#2              ;8249
004f6a  f8a40040          STRH     r0,[r4,#0x40]         ;8249
004f6e  e08f              B        |L1.20624|
                  |L1.20336|
004f70  ebb10f42          CMP      r1,r2,LSL #1          ;8251
004f74  da07              BGE      |L1.20358|
004f76  f04f011e          MOV      r1,#0x1e              ;8253
004f7a  f8841023          STRB     r1,[r4,#0x23]         ;8253
004f7e  f1000001          ADD      r0,r0,#1              ;8254
004f82  f8a40040          STRH     r0,[r4,#0x40]         ;8254
                  |L1.20358|
004f86  e083              B        |L1.20624|
                  |L1.20360|
004f88  e014              B        |L1.20404|
                  |L1.20362|
004f8a  1e52              SUBS     r2,r2,#1              ;8257
004f8c  4594              CMP      r12,r2                ;8257
004f8e  da7f              BGE      |L1.20624|
004f90  f04f021f          MOV      r2,#0x1f              ;8259
004f94  f8842023          STRB     r2,[r4,#0x23]         ;8259
004f98  eb030283          ADD      r2,r3,r3,LSL #2       ;8260
004f9c  ebb10f42          CMP      r1,r2,LSL #1          ;8260
004fa0  da76              BGE      |L1.20624|
004fa2  f04f0120          MOV      r1,#0x20              ;8262
004fa6  f8841023          STRB     r1,[r4,#0x23]         ;8262
004faa  f1000001          ADD      r0,r0,#1              ;8263
004fae  f8a40040          STRH     r0,[r4,#0x40]         ;8263
004fb2  e06d              B        |L1.20624|
                  |L1.20404|
004fb4  dd6c              BLE      |L1.20624|
004fb6  f04f0121          MOV      r1,#0x21              ;8269
004fba  f8841023          STRB     r1,[r4,#0x23]         ;8269
004fbe  f9b81000          LDRSH    r1,[r8,#0]            ;8270  ; UB0
004fc2  f9bb3000          LDRSH    r3,[r11,#0]           ;8270  ; UB20
004fc6  eba10103          SUB      r1,r1,r3              ;8270
004fca  eb010302          ADD      r3,r1,r2              ;8270
004fce  4563              CMP      r3,r12                ;8270
004fd0  da3b              BGE      |L1.20554|
004fd2  f04f0122          MOV      r1,#0x22              ;8272
004fd6  f8841023          STRB     r1,[r4,#0x23]         ;8272
004fda  f8b4106c          LDRH     r1,[r4,#0x6c]         ;8273  ; cntrl_stat_blok_cnt
004fde  b121              CBZ      r1,|L1.20458|
004fe0  f1a00001          SUB      r0,r0,#1              ;8273
004fe4  f8a40040          STRH     r0,[r4,#0x40]         ;8273
004fe8  e052              B        |L1.20624|
                  |L1.20458|
004fea  e029              B        |L1.20544|
                  |L1.20460|
                          DCD      num_necc
                  |L1.20464|
                          DCD      IZMAX
                  |L1.20468|
                          DCD      ||area_number.25||
                  |L1.20472|
                          DCD      speedChIsOn
                  |L1.20476|
                          DCD      sp_ch_stat
                  |L1.20480|
                          DCD      speedChrgCurr
                  |L1.20484|
                          DCD      UZ_IMAX
                  |L1.20488|
                          DCD      FZ_IMAX1
                  |L1.20492|
                          DCD      FZ_IMAX2
                  |L1.20496|
                          DCD      bat
                  |L1.20500|
                          DCD      REG_SPEED
                  |L1.20504|
                          DCD      bps_U
                  |L1.20508|
                          DCD      u_necc
                  |L1.20512|
                          DCD      bps
                  |L1.20516|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.20520|
                          DCD      mess_data
                  |L1.20524|
                          DCD      load_U
                  |L1.20528|
                          DCD      USIGN
                  |L1.20532|
                          DCD      bIBAT_SMKLBR
                  |L1.20536|
                          DCD      UB0
                  |L1.20540|
                          DCD      UB20
                  |L1.20544|
005040  f1a0000a          SUB      r0,r0,#0xa            ;8274
005044  f8a40040          STRH     r0,[r4,#0x40]         ;8274
005048  e022              B        |L1.20624|
                  |L1.20554|
00504a  17cb              ASRS     r3,r1,#31             ;8276
00504c  eb017193          ADD      r1,r1,r3,LSR #30      ;8276
005050  eb0201a1          ADD      r1,r2,r1,ASR #2       ;8276
005054  4561              CMP      r1,r12                ;8276
005056  da10              BGE      |L1.20602|
005058  f04f0123          MOV      r1,#0x23              ;8278
00505c  f8841023          STRB     r1,[r4,#0x23]         ;8278
005060  f8b4106c          LDRH     r1,[r4,#0x6c]         ;8279  ; cntrl_stat_blok_cnt
005064  b121              CBZ      r1,|L1.20592|
005066  f1a00001          SUB      r0,r0,#1              ;8279
00506a  f8a40040          STRH     r0,[r4,#0x40]         ;8279
00506e  e00f              B        |L1.20624|
                  |L1.20592|
005070  f1a00002          SUB      r0,r0,#2              ;8280
005074  f8a40040          STRH     r0,[r4,#0x40]         ;8280
005078  e00a              B        |L1.20624|
                  |L1.20602|
00507a  1c52              ADDS     r2,r2,#1              ;8282
00507c  4594              CMP      r12,r2                ;8282
00507e  dd07              BLE      |L1.20624|
005080  f04f0124          MOV      r1,#0x24              ;8284
005084  f8841023          STRB     r1,[r4,#0x23]         ;8284
005088  f1a00001          SUB      r0,r0,#1              ;8285
00508c  f8a40040          STRH     r0,[r4,#0x40]         ;8285
                  |L1.20624|
005090  48ff              LDR      r0,|L1.21648|
005092  f8941024          LDRB     r1,[r4,#0x24]         ;8289  ; vz1_stat
005096  7800              LDRB     r0,[r0,#0]            ;8289  ; hv_vz_stat
005098  4308              ORRS     r0,r0,r1              ;8289
00509a  f8941027          LDRB     r1,[r4,#0x27]         ;8289  ; vz2_stat
00509e  4308              ORRS     r0,r0,r1              ;8289
0050a0  d10e              BNE      |L1.20672|
0050a2  48fc              LDR      r0,|L1.21652|
0050a4  7840              LDRB     r0,[r0,#1]            ;8291  ; sk_stat
0050a6  2801              CMP      r0,#1                 ;8291
0050a8  d10a              BNE      |L1.20672|
0050aa  48fb              LDR      r0,|L1.21656|
0050ac  7840              LDRB     r0,[r0,#1]            ;8291  ; sk_stat_old
0050ae  b938              CBNZ     r0,|L1.20672|
0050b0  48fa              LDR      r0,|L1.21660|
0050b2  8800              LDRH     r0,[r0,#0]            ;8291  ; VZ_KIND
0050b4  2801              CMP      r0,#1                 ;8291
0050b6  d103              BNE      |L1.20672|
0050b8  f04f0032          MOV      r0,#0x32              ;8291
0050bc  f8a40040          STRH     r0,[r4,#0x40]         ;8291
                  |L1.20672|
0050c0  f24032f2          MOV      r2,#0x3f2             ;8294
0050c4  210a              MOVS     r1,#0xa               ;8294
0050c6  48f6              LDR      r0,|L1.21664|
0050c8  f7fffffe          BL       gran
0050cc  f8b40040          LDRH     r0,[r4,#0x40]         ;8295  ; cntrl_stat_new
0050d0  85a0              STRH     r0,[r4,#0x2c]         ;8295
0050d2  8560              STRH     r0,[r4,#0x2a]         ;8296
0050d4  48f3              LDR      r0,|L1.21668|
0050d6  f9b00000          LDRSH    r0,[r0,#0]            ;8298  ; ICA_EN
0050da  b938              CBNZ     r0,|L1.20716|
0050dc  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
0050de  b129              CBZ      r1,|L1.20716|
;;;8301   			{
;;;8302   			cntrl_stat = ica_cntrl_hndl;
0050e0  49f1              LDR      r1,|L1.21672|
0050e2  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
0050e4  8561              STRH     r1,[r4,#0x2a]
;;;8303   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
0050e6  f8a41040          STRH     r1,[r4,#0x40]
;;;8304   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
0050ea  85a1              STRH     r1,[r4,#0x2c]
                  |L1.20716|
;;;8305   			}
;;;8306   		}
;;;8307   	
;;;8308   	if((ICA_EN==1)||(ICA_EN==2))
0050ec  2801              CMP      r0,#1
0050ee  d001              BEQ      |L1.20724|
0050f0  2802              CMP      r0,#2
0050f2  d105              BNE      |L1.20736|
                  |L1.20724|
;;;8309   		{
;;;8310   		cntrl_stat=cntrl_stat_new+ica_u_necc;
0050f4  49ed              LDR      r1,|L1.21676|
0050f6  f8b40040          LDRH     r0,[r4,#0x40]  ; cntrl_stat_new
0050fa  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
0050fc  4408              ADD      r0,r0,r1
0050fe  8560              STRH     r0,[r4,#0x2a]
                  |L1.20736|
;;;8311   		}			
;;;8312   	}
;;;8313   #else
;;;8314   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;8315   	{
;;;8316   	cntrl_hndl_plazma=37;
;;;8317   	cntrl_stat_new=cntrl_stat_old;
;;;8318   	
;;;8319   	if((Ibmax/10)>(2*IZMAX_))
;;;8320   		{
;;;8321   		cntrl_hndl_plazma=38;
;;;8322             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8323   		else	cntrl_stat_new-=10;
;;;8324   		}		
;;;8325   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;8326   		{
;;;8327   		cntrl_hndl_plazma=39;
;;;8328             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8329             else	cntrl_stat_new-=3;
;;;8330   		}   
;;;8331   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;8332   		{
;;;8333   		cntrl_hndl_plazma=40;
;;;8334   		cntrl_stat_new--;
;;;8335   		}
;;;8336   		
;;;8337   	else if(load_U<u_necc)
;;;8338   		{
;;;8339   		cntrl_hndl_plazma=41;
;;;8340   		if(load_U<(u_necc-(UB0-UB20)))
;;;8341   			{
;;;8342   			cntrl_hndl_plazma=42;
;;;8343   			if(Ibmax<0)
;;;8344   				{
;;;8345   				cntrl_hndl_plazma=43;
;;;8346                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8347   				else cntrl_stat_new+=10;
;;;8348   				}
;;;8349   			else if(Ibmax<(IZMAX_*5))
;;;8350   				{
;;;8351   				cntrl_hndl_plazma=44;
;;;8352                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8353   				else	cntrl_stat_new+=2;
;;;8354   				}
;;;8355   			else if(Ibmax<((IZMAX_*95)/10))
;;;8356   				{
;;;8357   				cntrl_hndl_plazma=45;
;;;8358   				cntrl_stat_new++;
;;;8359   				}					
;;;8360   			}
;;;8361   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;8362   			{
;;;8363   			cntrl_hndl_plazma=46;
;;;8364   			if(Ibmax<(IZMAX_*5))
;;;8365   				{
;;;8366   				cntrl_hndl_plazma=47;
;;;8367                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8368   				else	cntrl_stat_new+=2;
;;;8369   				}
;;;8370   			else if(Ibmax<((IZMAX_*95)/10))
;;;8371   				{
;;;8372   				cntrl_hndl_plazma=48;
;;;8373   				cntrl_stat_new++;
;;;8374   				}					
;;;8375   			}	
;;;8376   		else if(load_U<(u_necc-1))
;;;8377   			{
;;;8378   			cntrl_hndl_plazma=49;
;;;8379   			if(Ibmax<((IZMAX_*95)/10))
;;;8380   				{
;;;8381   				cntrl_hndl_plazma=50;
;;;8382   				cntrl_stat_new++;
;;;8383   				}					
;;;8384   			}					
;;;8385   		}	
;;;8386   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;8387   		{
;;;8388   		cntrl_hndl_plazma=51;
;;;8389   		if(load_U>(u_necc+(UB0-UB20)))
;;;8390   			{
;;;8391   			cntrl_hndl_plazma=52;
;;;8392                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8393   			else	cntrl_stat_new-=10;
;;;8394   			}
;;;8395   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;8396   			{
;;;8397   			cntrl_hndl_plazma=53;
;;;8398                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8399   			else cntrl_stat_new-=2;
;;;8400   			}	
;;;8401   		else if(load_U>(u_necc+1))
;;;8402   			{
;;;8403   			cntrl_hndl_plazma=54;
;;;8404   			cntrl_stat_new--;
;;;8405   			}					
;;;8406   		}
;;;8407   
;;;8408   	gran(&cntrl_stat_new,10,1010);			
;;;8409   	cntrl_stat_old=cntrl_stat_new;
;;;8410   	cntrl_stat=cntrl_stat_new;	
;;;8411   	}
;;;8412   #endif
;;;8413   
;;;8414   iiii=0;
005100  73a5              STRB     r5,[r4,#0xe]
;;;8415   for(i=0;i<NUMIST;i++)
005102  7365              STRB     r5,[r4,#0xd]
005104  48ea              LDR      r0,|L1.21680|
005106  f9b01000          LDRSH    r1,[r0,#0]
00510a  e00c              B        |L1.20774|
                  |L1.20748|
;;;8416        {
;;;8417        if(bps[i]._cnt<30)iiii=1;
00510c  ebc002c0          RSB      r2,r0,r0,LSL #3
005110  eb021200          ADD      r2,r2,r0,LSL #4
005114  eb090282          ADD      r2,r9,r2,LSL #2
005118  78d2              LDRB     r2,[r2,#3]
00511a  2a1e              CMP      r2,#0x1e
00511c  d200              BCS      |L1.20768|
00511e  73a6              STRB     r6,[r4,#0xe]
                  |L1.20768|
005120  f1000001          ADD      r0,r0,#1              ;8415
005124  7360              STRB     r0,[r4,#0xd]          ;8415
                  |L1.20774|
005126  7b60              LDRB     r0,[r4,#0xd]          ;8415  ; i
005128  4288              CMP      r0,r1                 ;8415
00512a  dbef              BLT      |L1.20748|
;;;8418        }
;;;8419   
;;;8420   if(iiii==0)
00512c  7ba0              LDRB     r0,[r4,#0xe]  ; iiii
00512e  b928              CBNZ     r0,|L1.20796|
;;;8421        {
;;;8422        cntrl_stat=600;	
005130  f44f7016          MOV      r0,#0x258
005134  8560              STRH     r0,[r4,#0x2a]
;;;8423        cntrl_stat_old=600;
005136  85a0              STRH     r0,[r4,#0x2c]
;;;8424        cntrl_stat_new=600;
005138  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.20796|
;;;8425   	#ifdef UKU_TELECORE2015
;;;8426   	//cntrl_stat=0;
;;;8427   	//cntrl_stat_old=0;
;;;8428   	//cntrl_stat_new=0;
;;;8429   	#endif
;;;8430        }
;;;8431   
;;;8432   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8433   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
00513c  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
005140  b110              CBZ      r0,|L1.20808|
005142  f1a00001          SUB      r0,r0,#1
005146  8038              STRH     r0,[r7,#0]
                  |L1.20808|
;;;8434   
;;;8435   
;;;8436   
;;;8437   #endif
;;;8438   
;;;8439   
;;;8440   gran(&cntrl_stat,10,1010); 
005148  48d5              LDR      r0,|L1.21664|
00514a  f24032f2          MOV      r2,#0x3f2
00514e  210a              MOVS     r1,#0xa
005150  3816              SUBS     r0,r0,#0x16
005152  f7fffffe          BL       gran
;;;8441   b1Hz_ch=0;
005156  7325              STRB     r5,[r4,#0xc]
                  |L1.20824|
;;;8442   }
005158  e8bd9ff0          POP      {r4-r12,pc}
;;;8443   #endif
                          ENDP

                  ext_drv PROC
;;;8932   //-----------------------------------------------
;;;8933   void ext_drv(void)
00515c  e92d5ff0          PUSH     {r4-r12,lr}
;;;8934   {
;;;8935   char i;
;;;8936   
;;;8937   
;;;8938   for(i=0;i<NUMSK;i++)
005160  f04f0000          MOV      r0,#0
005164  4ad4              LDR      r2,|L1.21688|
;;;8939   	{
;;;8940   	#ifdef UKU_MGTS
;;;8941   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;8942   	#endif
;;;8943   	#ifdef UKU_RSTKM
;;;8944   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;8945   	#endif
;;;8946   	#ifdef UKU_3U
;;;8947   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;8948   	#endif
;;;8949   	#ifdef UKU_GLONASS
;;;8950   	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;8951   	#endif
;;;8952   	#ifdef UKU_KONTUR
;;;8953   	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;8954   	#endif
;;;8955   	#ifdef UKU_6U
;;;8956   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;8957   	#endif
;;;8958   	#ifdef UKU_220
;;;8959   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;8960   	#endif
;;;8961   	#ifdef UKU_220_V2
;;;8962   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;8963   	#endif
;;;8964   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8965   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;8966   	#endif
;;;8967   	#ifdef UKU_TELECORE2015	
;;;8968   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;8969   	#endif
;;;8970   	#ifdef UKU_TELECORE2017
;;;8971   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;8972   	#endif
;;;8973   	#ifdef IPS_SGEP_GAZPROM
;;;8974   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;8975   	#endif		
;;;8976   		{
;;;8977   		if(sk_cnt[i]<10)
005166  4bd3              LDR      r3,|L1.21684|
;;;8978   			{
;;;8979   			sk_cnt[i]++;
;;;8980   			if(sk_cnt[i]>=10)
;;;8981   				{
;;;8982   				sk_stat[i]=ssON;
005168  4dca              LDR      r5,|L1.21652|
00516a  f04f0a01          MOV      r10,#1
;;;8983   				}
;;;8984   			}
;;;8985   		else 
;;;8986   			{
;;;8987   			sk_cnt[i]=10;
00516e  f04f0b0a          MOV      r11,#0xa
005172  4606              MOV      r6,r0                 ;8938
005174  f9b24000          LDRSH    r4,[r2,#0]            ;8938
005178  e025              B        |L1.20934|
                  |L1.20858|
00517a  49d0              LDR      r1,|L1.21692|
00517c  4fd0              LDR      r7,|L1.21696|
00517e  5c09              LDRB     r1,[r1,r0]            ;8965
005180  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;8965
005184  f5b16ffa          CMP      r1,#0x7d0             ;8965
005188  da0e              BGE      |L1.20904|
00518a  5619              LDRSB    r1,[r3,r0]            ;8977
00518c  290a              CMP      r1,#0xa               ;8977
00518e  da08              BGE      |L1.20898|
005190  f1010101          ADD      r1,r1,#1              ;8979
005194  b249              SXTB     r1,r1                 ;8979
005196  5419              STRB     r1,[r3,r0]            ;8979
005198  290a              CMP      r1,#0xa               ;8980
00519a  db11              BLT      |L1.20928|
00519c  f805a000          STRB     r10,[r5,r0]           ;8982
0051a0  e00e              B        |L1.20928|
                  |L1.20898|
0051a2  f803b000          STRB     r11,[r3,r0]
0051a6  e00b              B        |L1.20928|
                  |L1.20904|
;;;8988   			}
;;;8989                  
;;;8990   		}
;;;8991   	else
;;;8992   		{
;;;8993   		if(sk_cnt[i]>0)
0051a8  5619              LDRSB    r1,[r3,r0]
0051aa  2900              CMP      r1,#0
0051ac  dd07              BLE      |L1.20926|
;;;8994   			{
;;;8995   			sk_cnt[i]--;
0051ae  f1a10101          SUB      r1,r1,#1
0051b2  b249              SXTB     r1,r1
0051b4  5419              STRB     r1,[r3,r0]
;;;8996   			if(sk_cnt[i]<=0)
0051b6  2900              CMP      r1,#0
0051b8  dc02              BGT      |L1.20928|
;;;8997   				{
;;;8998   				sk_stat[i]=ssOFF;
0051ba  542e              STRB     r6,[r5,r0]
0051bc  e000              B        |L1.20928|
                  |L1.20926|
;;;8999   				}
;;;9000   			}
;;;9001   		else 
;;;9002   			{
;;;9003   			sk_cnt[i]=0;
0051be  541e              STRB     r6,[r3,r0]
                  |L1.20928|
0051c0  f1000001          ADD      r0,r0,#1              ;8938
0051c4  b2c0              UXTB     r0,r0                 ;8938
                  |L1.20934|
0051c6  42a0              CMP      r0,r4                 ;8938
0051c8  dbd7              BLT      |L1.20858|
;;;9004   			}
;;;9005   		}
;;;9006   	}
;;;9007   
;;;9008   for(i=0;i<NUMSK;i++)
0051ca  f04f0400          MOV      r4,#0
;;;9009   	{
;;;9010   	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;9011   		{
;;;9012   		if(sk_av_cnt[i]<10)
0051ce  f8df92f4          LDR      r9,|L1.21700|
;;;9013   			{
;;;9014   			sk_av_cnt[i]++;
;;;9015   			if(sk_av_cnt[i]>=10)
;;;9016   				{
;;;9017   				sk_av_stat[i]=sasON;
0051d2  4fbd              LDR      r7,|L1.21704|
;;;9018   				}
;;;9019   			}
;;;9020   		else 
;;;9021   			{
;;;9022   			sk_av_cnt[i]=10;
;;;9023   			}
;;;9024   		}
;;;9025   	else
;;;9026   		{
;;;9027   		if(sk_av_cnt[i]>=0)
;;;9028   			{
;;;9029   			sk_av_cnt[i]--;
;;;9030   			if(sk_av_cnt[i]<=0)
;;;9031   				{
;;;9032   				sk_av_stat[i]=sasOFF;
;;;9033   				}
;;;9034   			}
;;;9035   		else 
;;;9036   			{
;;;9037   			sk_av_cnt[i]=0;
;;;9038   			}
;;;9039   		}
;;;9040   
;;;9041   #ifndef UKU_KONTUR
;;;9042   	if(sk_av_stat_old[i]!=sk_av_stat[i])
0051d4  f8df82f4          LDR      r8,|L1.21708|
0051d8  e083              B        |L1.21218|
                  |L1.20954|
0051da  48bd              LDR      r0,|L1.21712|
0051dc  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;9010
0051e0  b910              CBNZ     r0,|L1.20968|
0051e2  5d29              LDRB     r1,[r5,r4]            ;9010
0051e4  2901              CMP      r1,#1                 ;9010
0051e6  d00f              BEQ      |L1.21000|
                  |L1.20968|
0051e8  b108              CBZ      r0,|L1.20974|
0051ea  5d28              LDRB     r0,[r5,r4]            ;9010
0051ec  b160              CBZ      r0,|L1.21000|
                  |L1.20974|
0051ee  f9190004          LDRSB    r0,[r9,r4]            ;9027
0051f2  2800              CMP      r0,#0                 ;9027
0051f4  db19              BLT      |L1.21034|
0051f6  f1a00001          SUB      r0,r0,#1              ;9029
0051fa  b240              SXTB     r0,r0                 ;9029
0051fc  f8090004          STRB     r0,[r9,r4]            ;9029
005200  2800              CMP      r0,#0                 ;9030
005202  dc14              BGT      |L1.21038|
005204  553e              STRB     r6,[r7,r4]            ;9032
005206  e012              B        |L1.21038|
                  |L1.21000|
005208  f9190004          LDRSB    r0,[r9,r4]            ;9012
00520c  280a              CMP      r0,#0xa               ;9012
00520e  da09              BGE      |L1.21028|
005210  f1000001          ADD      r0,r0,#1              ;9014
005214  b240              SXTB     r0,r0                 ;9014
005216  f8090004          STRB     r0,[r9,r4]            ;9014
00521a  280a              CMP      r0,#0xa               ;9015
00521c  db07              BLT      |L1.21038|
00521e  f807a004          STRB     r10,[r7,r4]           ;9017
005222  e004              B        |L1.21038|
                  |L1.21028|
005224  f809b004          STRB     r11,[r9,r4]           ;9022
005228  e001              B        |L1.21038|
                  |L1.21034|
00522a  f8096004          STRB     r6,[r9,r4]            ;9037
                  |L1.21038|
00522e  f8181004          LDRB     r1,[r8,r4]
005232  5d38              LDRB     r0,[r7,r4]
005234  4281              CMP      r1,r0
005236  d04e              BEQ      |L1.21206|
;;;9043   		{
;;;9044   		plazma_sk++;
005238  4a99              LDR      r2,|L1.21664|
00523a  3a40              SUBS     r2,r2,#0x40
00523c  8fd1              LDRH     r1,[r2,#0x3e]  ; plazma_sk
00523e  f1010101          ADD      r1,r1,#1
005242  87d1              STRH     r1,[r2,#0x3e]
;;;9045   		if(sk_av_stat[i]==sasON)
005244  2801              CMP      r0,#1
005246  d007              BEQ      |L1.21080|
;;;9046   			{
;;;9047   			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;9048   			else if(i==1)
;;;9049   				{
;;;9050   				#ifndef UKU_TELEKORE2017
;;;9051   				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;9052   				#endif
;;;9053   				#ifdef UKU_TELEKORE2017
;;;9054   				snmp_trap_send("Door open",15,2,1);
;;;9055   				#endif
;;;9056   				}
;;;9057   			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;9058   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9059   			}
;;;9060   		else 
;;;9061   			{
;;;9062   			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
005248  b354              CBZ      r4,|L1.21152|
;;;9063   			else if(i==1)
00524a  2c01              CMP      r4,#1
00524c  d02f              BEQ      |L1.21166|
;;;9064   				{
;;;9065   				#ifndef UKU_TELEKORE2017
;;;9066   				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;9067   				#endif
;;;9068   				#ifdef UKU_TELEKORE2017
;;;9069   				snmp_trap_send("Door open clear",15,2,0);
;;;9070   				#endif
;;;9071   				}
;;;9072   			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
00524e  2c02              CMP      r4,#2
005250  d034              BEQ      |L1.21180|
;;;9073   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
005252  2c03              CMP      r4,#3
005254  d039              BEQ      |L1.21194|
005256  e03e              B        |L1.21206|
                  |L1.21080|
005258  b134              CBZ      r4,|L1.21096|
00525a  2c01              CMP      r4,#1                 ;9048
00525c  d00b              BEQ      |L1.21110|
00525e  2c02              CMP      r4,#2                 ;9057
005260  d010              BEQ      |L1.21124|
005262  2c03              CMP      r4,#3                 ;9058
005264  d015              BEQ      |L1.21138|
005266  e036              B        |L1.21206|
                  |L1.21096|
005268  2301              MOVS     r3,#1                 ;9047
00526a  461a              MOV      r2,r3                 ;9047
00526c  210f              MOVS     r1,#0xf               ;9047
00526e  a099              ADR      r0,|L1.21716|
005270  f7fffffe          BL       snmp_trap_send
005274  e02f              B        |L1.21206|
                  |L1.21110|
005276  2301              MOVS     r3,#1                 ;9051
005278  2202              MOVS     r2,#2                 ;9051
00527a  210f              MOVS     r1,#0xf               ;9051
00527c  a098              ADR      r0,|L1.21728|
00527e  f7fffffe          BL       snmp_trap_send
005282  e028              B        |L1.21206|
                  |L1.21124|
005284  2301              MOVS     r3,#1                 ;9057
005286  2203              MOVS     r2,#3                 ;9057
005288  210f              MOVS     r1,#0xf               ;9057
00528a  a098              ADR      r0,|L1.21740|
00528c  f7fffffe          BL       snmp_trap_send
005290  e021              B        |L1.21206|
                  |L1.21138|
005292  2301              MOVS     r3,#1                 ;9058
005294  2204              MOVS     r2,#4                 ;9058
005296  210f              MOVS     r1,#0xf               ;9058
005298  a097              ADR      r0,|L1.21752|
00529a  f7fffffe          BL       snmp_trap_send
00529e  e01a              B        |L1.21206|
                  |L1.21152|
0052a0  2300              MOVS     r3,#0                 ;9062
0052a2  2201              MOVS     r2,#1                 ;9062
0052a4  210f              MOVS     r1,#0xf               ;9062
0052a6  a097              ADR      r0,|L1.21764|
0052a8  f7fffffe          BL       snmp_trap_send
0052ac  e013              B        |L1.21206|
                  |L1.21166|
0052ae  2300              MOVS     r3,#0                 ;9066
0052b0  2202              MOVS     r2,#2                 ;9066
0052b2  210f              MOVS     r1,#0xf               ;9066
0052b4  a098              ADR      r0,|L1.21784|
0052b6  f7fffffe          BL       snmp_trap_send
0052ba  e00c              B        |L1.21206|
                  |L1.21180|
0052bc  2300              MOVS     r3,#0                 ;9072
0052be  2203              MOVS     r2,#3                 ;9072
0052c0  210f              MOVS     r1,#0xf               ;9072
0052c2  a09a              ADR      r0,|L1.21804|
0052c4  f7fffffe          BL       snmp_trap_send
0052c8  e005              B        |L1.21206|
                  |L1.21194|
0052ca  2300              MOVS     r3,#0
0052cc  2204              MOVS     r2,#4
0052ce  210f              MOVS     r1,#0xf
0052d0  a09b              ADR      r0,|L1.21824|
0052d2  f7fffffe          BL       snmp_trap_send
                  |L1.21206|
;;;9074   			}
;;;9075   	 	}
;;;9076   #endif
;;;9077   
;;;9078   #ifdef UKU_KONTUR
;;;9079   	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;9080   		{
;;;9081   		plazma_sk++;
;;;9082   		if(sk_av_stat[i]==sasON)
;;;9083   			{
;;;9084   			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;9085   			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;9086   			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;9087   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9088   			}
;;;9089   		else 
;;;9090   			{
;;;9091   			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;9092   			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;9093   			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;9094   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;9095   			}
;;;9096   	 	}
;;;9097   #endif
;;;9098   	sk_av_stat_old[i]=sk_av_stat[i];
0052d6  5d38              LDRB     r0,[r7,r4]
0052d8  f8080004          STRB     r0,[r8,r4]
0052dc  f1040401          ADD      r4,r4,#1              ;9008
0052e0  b2e4              UXTB     r4,r4                 ;9008
                  |L1.21218|
0052e2  4875              LDR      r0,|L1.21688|
0052e4  f9b00000          LDRSH    r0,[r0,#0]            ;9008  ; NUMSK
0052e8  4284              CMP      r4,r0                 ;9008
0052ea  f6ffaf76          BLT      |L1.20954|
;;;9099   	}
;;;9100   }
0052ee  e733              B        |L1.20824|
;;;9101   
                          ENDP

                  zar_superviser_start PROC
;;;9138   //-----------------------------------------------
;;;9139   void zar_superviser_start(void)
0052f0  4a98              LDR      r2,|L1.21844|
;;;9140   {
;;;9141   sign_U[0]=1;
0052f2  f04f0001          MOV      r0,#1
0052f6  7010              STRB     r0,[r2,#0]
;;;9142   sign_I[0]=1;
0052f8  4997              LDR      r1,|L1.21848|
0052fa  7008              STRB     r0,[r1,#0]
;;;9143   sign_U[1]=1;
0052fc  7050              STRB     r0,[r2,#1]
;;;9144   sign_I[1]=1;
0052fe  7048              STRB     r0,[r1,#1]
;;;9145   
;;;9146   }
005300  4770              BX       lr
;;;9147   
                          ENDP

                  zar_superviser_drv PROC
;;;9103   //-----------------------------------------------
;;;9104   void zar_superviser_drv(void)
005302  e92d5ff0          PUSH     {r4-r12,lr}
;;;9105   {
;;;9106   
;;;9107   if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
005306  4896              LDR      r0,|L1.21856|
005308  f8df9258          LDR      r9,|L1.21860|
00530c  f8df824c          LDR      r8,|L1.21852|
005310  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
005314  f9b90000          LDRSH    r0,[r9,#0]
005318  4c61              LDR      r4,|L1.21664|
00531a  ebc01100          RSB      r1,r0,r0,LSL #4
00531e  3c40              SUBS     r4,r4,#0x40
005320  f9b87002          LDRSH    r7,[r8,#2]  ; bat
005324  f06f0a1d          MVN      r10,#0x1d
005328  f06f0b95          MVN      r11,#0x95
00532c  2500              MOVS     r5,#0
00532e  4e89              LDR      r6,|L1.21844|
005330  f9b4004a          LDRSH    r0,[r4,#0x4a]
005334  eb0a0281          ADD      r2,r10,r1,LSL #2
005338  eb0b0381          ADD      r3,r11,r1,LSL #2
00533c  4567              CMP      r7,r12
00533e  dc05              BGT      |L1.21324|
005340  f8dfc224          LDR      r12,|L1.21864|
005344  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
005348  4567              CMP      r7,r12
00534a  da04              BGE      |L1.21334|
                  |L1.21324|
00534c  4282              CMP      r2,r0
00534e  dd02              BLE      |L1.21334|
005350  4283              CMP      r3,r0
005352  da00              BGE      |L1.21334|
005354  7035              STRB     r5,[r6,#0]
                  |L1.21334|
;;;9108   
;;;9109   if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
005356  4f85              LDR      r7,|L1.21868|
005358  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
00535c  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
005360  4f7d              LDR      r7,|L1.21848|
005362  ebbc0f4e          CMP      r12,lr,LSL #1
005366  dc04              BGT      |L1.21362|
005368  f1ce0e00          RSB      lr,lr,#0
00536c  ebbc0f4e          CMP      r12,lr,LSL #1
005370  da04              BGE      |L1.21372|
                  |L1.21362|
005372  4282              CMP      r2,r0
005374  dd02              BLE      |L1.21372|
005376  4283              CMP      r3,r0
005378  da00              BGE      |L1.21372|
00537a  703d              STRB     r5,[r7,#0]
                  |L1.21372|
;;;9110   																 
;;;9111   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00537c  f06f0209          MVN      r2,#9
005380  eb020181          ADD      r1,r2,r1,LSL #2
005384  4281              CMP      r1,r0
005386  d120              BNE      |L1.21450|
005388  7e20              LDRB     r0,[r4,#0x18]  ; spc_stat
00538a  b9f0              CBNZ     r0,|L1.21450|
;;;9112   	{
;;;9113   	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
00538c  7830              LDRB     r0,[r6,#0]  ; sign_U
00538e  2801              CMP      r0,#1
005390  d11b              BNE      |L1.21450|
005392  7838              LDRB     r0,[r7,#0]  ; sign_I
005394  2801              CMP      r0,#1
005396  d118              BNE      |L1.21450|
005398  f44f70ef          MOV      r0,#0x1de
00539c  f7fffffe          BL       lc640_read_int
0053a0  4973              LDR      r1,|L1.21872|
0053a2  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
0053a6  4288              CMP      r0,r1
0053a8  d00f              BEQ      |L1.21450|
0053aa  4872              LDR      r0,|L1.21876|
0053ac  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0053ae  b160              CBZ      r0,|L1.21450|
0053b0  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
0053b4  07c0              LSLS     r0,r0,#31
0053b6  d108              BNE      |L1.21450|
;;;9114   		{
;;;9115   		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
0053b8  f44f70ef          MOV      r0,#0x1de
0053bc  f7fffffe          BL       lc640_write_int
;;;9116   		superviser_cnt++;
0053c0  486d              LDR      r0,|L1.21880|
0053c2  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0053c4  f1010101          ADD      r1,r1,#1
0053c8  7001              STRB     r1,[r0,#0]
                  |L1.21450|
;;;9117   		}
;;;9118   	
;;;9119   	}
;;;9120   
;;;9121   if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
0053ca  4865              LDR      r0,|L1.21856|
0053cc  f9b81002          LDRSH    r1,[r8,#2]  ; bat
0053d0  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
0053d4  4281              CMP      r1,r0
0053d6  dc06              BGT      |L1.21478|
0053d8  4863              LDR      r0,|L1.21864|
0053da  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
0053de  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
0053e2  4281              CMP      r1,r0
0053e4  da0e              BGE      |L1.21508|
                  |L1.21478|
0053e6  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0053ea  f9b4104a          LDRSH    r1,[r4,#0x4a]  ; main_kb_cnt
0053ee  ebc01000          RSB      r0,r0,r0,LSL #4
0053f2  eb0a0280          ADD      r2,r10,r0,LSL #2
0053f6  428a              CMP      r2,r1
0053f8  dd04              BLE      |L1.21508|
0053fa  eb0b0080          ADD      r0,r11,r0,LSL #2
0053fe  4288              CMP      r0,r1
005400  da00              BGE      |L1.21508|
005402  7075              STRB     r5,[r6,#1]
                  |L1.21508|
;;;9122   
;;;9123   if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
005404  4959              LDR      r1,|L1.21868|
005406  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00540a  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00540e  ebb00f41          CMP      r0,r1,LSL #1
005412  dc03              BGT      |L1.21532|
005414  4249              RSBS     r1,r1,#0
005416  ebb00f41          CMP      r0,r1,LSL #1
00541a  da0e              BGE      |L1.21562|
                  |L1.21532|
00541c  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
005420  f9b4104a          LDRSH    r1,[r4,#0x4a]  ; main_kb_cnt
005424  ebc01000          RSB      r0,r0,r0,LSL #4
005428  eb0a0280          ADD      r2,r10,r0,LSL #2
00542c  428a              CMP      r2,r1
00542e  dd04              BLE      |L1.21562|
005430  eb0b0080          ADD      r0,r11,r0,LSL #2
005434  4288              CMP      r0,r1
005436  da00              BGE      |L1.21562|
005438  707d              STRB     r5,[r7,#1]
                  |L1.21562|
;;;9124   																 
;;;9125   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00543a  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00543e  ebc01100          RSB      r1,r0,r0,LSL #4
005442  f06f0009          MVN      r0,#9
005446  eb000081          ADD      r0,r0,r1,LSL #2
00544a  f9b4104a          LDRSH    r1,[r4,#0x4a]  ; main_kb_cnt
00544e  4288              CMP      r0,r1
005450  d11d              BNE      |L1.21646|
005452  7e20              LDRB     r0,[r4,#0x18]  ; spc_stat
005454  b9d8              CBNZ     r0,|L1.21646|
;;;9126   	{
;;;9127   	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
005456  7870              LDRB     r0,[r6,#1]  ; sign_U
005458  2801              CMP      r0,#1
00545a  d118              BNE      |L1.21646|
00545c  7878              LDRB     r0,[r7,#1]  ; sign_I
00545e  2801              CMP      r0,#1
005460  d115              BNE      |L1.21646|
005462  f44f75fe          MOV      r5,#0x1fc
005466  4628              MOV      r0,r5
005468  f7fffffe          BL       lc640_read_int
00546c  4940              LDR      r1,|L1.21872|
00546e  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
005472  4288              CMP      r0,r1
005474  d00b              BEQ      |L1.21646|
005476  483f              LDR      r0,|L1.21876|
005478  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00547a  2802              CMP      r0,#2
00547c  d107              BNE      |L1.21646|
00547e  f8980089          LDRB     r0,[r8,#0x89]  ; bat
005482  07c0              LSLS     r0,r0,#31
005484  d17f              BNE      |L1.21894|
;;;9128   		{
;;;9129   		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
005486  4628              MOV      r0,r5
005488  f7fffffe          BL       lc640_write_int
;;;9130   		superviser_cnt++;
00548c  e076              B        |L1.21884|
                  |L1.21646|
00548e  e07a              B        |L1.21894|
                  |L1.21648|
                          DCD      hv_vz_stat
                  |L1.21652|
                          DCD      sk_stat
                  |L1.21656|
                          DCD      sk_stat_old
                  |L1.21660|
                          DCD      VZ_KIND
                  |L1.21664|
                          DCD      ||area_number.25||+0x40
                  |L1.21668|
                          DCD      ICA_EN
                  |L1.21672|
                          DCD      ica_cntrl_hndl
                  |L1.21676|
                          DCD      ica_u_necc
                  |L1.21680|
                          DCD      NUMIST
                  |L1.21684|
                          DCD      sk_cnt
                  |L1.21688|
                          DCD      NUMSK
                  |L1.21692|
                          DCD      ||area_number.19||
                  |L1.21696|
                          DCD      ||.bss||+0x40c
                  |L1.21700|
                          DCD      sk_av_cnt
                  |L1.21704|
                          DCD      sk_av_stat
                  |L1.21708|
                          DCD      sk_av_stat_old
                  |L1.21712|
                          DCD      SK_SIGN
                  |L1.21716|
0054d4  534b2023          DCB      "SK #1 Alarm",0
0054d8  3120416c
0054dc  61726d00
                  |L1.21728|
0054e0  534b2023          DCB      "SK #2 Alarm",0
0054e4  3220416c
0054e8  61726d00
                  |L1.21740|
0054ec  534b2023          DCB      "SK #3 Alarm",0
0054f0  3320416c
0054f4  61726d00
                  |L1.21752|
0054f8  534b2023          DCB      "SK #4 Alarm",0
0054fc  3420416c
005500  61726d00
                  |L1.21764|
005504  534b2023          DCB      "SK #1 Alarm is off",0
005508  3120416c
00550c  61726d20
005510  6973206f
005514  666600  
005517  00                DCB      0
                  |L1.21784|
005518  534b2023          DCB      "SK #2 Alarm is off",0
00551c  3220416c
005520  61726d20
005524  6973206f
005528  666600  
00552b  00                DCB      0
                  |L1.21804|
00552c  534b2023          DCB      "SK #3 Alarm is off",0
005530  3320416c
005534  61726d20
005538  6973206f
00553c  666600  
00553f  00                DCB      0
                  |L1.21824|
005540  534b2023          DCB      "SK #4 Alarm is off",0
005544  3420416c
005548  61726d20
00554c  6973206f
005550  666600  
005553  00                DCB      0
                  |L1.21844|
                          DCD      sign_U
                  |L1.21848|
                          DCD      sign_I
                  |L1.21852|
                          DCD      bat
                  |L1.21856|
                          DCD      u_necc_up
                  |L1.21860|
                          DCD      TBAT
                  |L1.21864|
                          DCD      u_necc_dn
                  |L1.21868|
                          DCD      IKB
                  |L1.21872|
                          DCD      BAT_C_REAL
                  |L1.21876|
                          DCD      NUMBAT
                  |L1.21880|
                          DCD      superviser_cnt
                  |L1.21884|
00557c  48ff              LDR      r0,|L1.22908|
00557e  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
005580  f1010101          ADD      r1,r1,#1
005584  7001              STRB     r1,[r0,#0]
                  |L1.21894|
;;;9131   		}
;;;9132   	
;;;9133   	}
;;;9134   
;;;9135   if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
005586  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00558a  f06f0101          MVN      r1,#1
00558e  ebc01000          RSB      r0,r0,r0,LSL #4
005592  eb010080          ADD      r0,r1,r0,LSL #2
005596  f9b4104a          LDRSH    r1,[r4,#0x4a]  ; main_kb_cnt
00559a  4288              CMP      r0,r1
00559c  d102              BNE      |L1.21924|
00559e  e8bd5ff0          POP      {r4-r12,lr}
0055a2  e7fe              B        zar_superviser_start
                  |L1.21924|
;;;9136   }
0055a4  e5d8              B        |L1.20824|
;;;9137   
                          ENDP

                  npn_hndl PROC
;;;9148   //-----------------------------------------------
;;;9149   void npn_hndl(void)
0055a6  e92d03f0          PUSH     {r4-r9}
;;;9150   {
;;;9151   if(NPN_OUT!=npnoOFF)
0055aa  48f5              LDR      r0,|L1.22912|
;;;9152   	{
;;;9153   /*	if(NPN_SIGN==npnsAVNET)
;;;9154   		{
;;;9155   		if(net_av==1)
;;;9156   			{
;;;9157   			if(npn_tz_cnt<TZNPN)
;;;9158   				{
;;;9159   				npn_tz_cnt++;
;;;9160   				if(npn_tz_cnt==TZNPN)
;;;9161   					{
;;;9162   					npn_stat=npnsOFF;
;;;9163   					}
;;;9164   				}
;;;9165   			}
;;;9166   		else
;;;9167   			{
;;;9168   			if(npn_tz_cnt)
;;;9169   				{
;;;9170   				npn_tz_cnt--;
;;;9171   				if(npn_tz_cnt==0)
;;;9172   					{
;;;9173   					npn_stat=npnsON;
;;;9174   					}
;;;9175   				}
;;;9176   			}
;;;9177   		}*/
;;;9178   /*	if(NPN_SIGN==npnsULOAD)
;;;9179   		{
;;;9180   		if(load_U<UONPN)
;;;9181   			{
;;;9182   			if(npn_tz_cnt<TZNPN)
;;;9183   				{
;;;9184   				npn_tz_cnt++;
;;;9185   				if(npn_tz_cnt==TZNPN)
;;;9186   					{
;;;9187   					npn_stat=npnsOFF;
;;;9188   					}
;;;9189   				}
;;;9190   			}
;;;9191   		else if(load_U>UVNPN)
;;;9192   			{
;;;9193   			if(npn_tz_cnt)
;;;9194   				{
;;;9195   				npn_tz_cnt--;
;;;9196   				if(npn_tz_cnt==0)
;;;9197   					{
;;;9198   					npn_stat=npnsON;
;;;9199   					}
;;;9200   				}
;;;9201   			}
;;;9202   		}*/
;;;9203   
;;;9204   	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;9205   		{
;;;9206   		if(npn_tz_cnt<TZNPN)
0055ac  4ff5              LDR      r7,|L1.22916|
;;;9207   			{
;;;9208   			npn_tz_cnt++;
;;;9209   			if(npn_tz_cnt==TZNPN)
;;;9210   				{
;;;9211   				npn_stat=npnsOFF;
0055ae  4ef6              LDR      r6,|L1.22920|
0055b0  7800              LDRB     r0,[r0,#0]            ;9151  ; NPN_OUT
0055b2  f04f0c00          MOV      r12,#0                ;9151
;;;9212   				}
;;;9213   			}
;;;9214   		}
;;;9215   	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;9216   		{
;;;9217   		if(npn_tz_cnt)
;;;9218   			{
;;;9219   			npn_tz_cnt--;
;;;9220   			if(npn_tz_cnt==0)
;;;9221   				{
;;;9222   				npn_stat=npnsON;
0055b6  f04f0801          MOV      r8,#1
0055ba  b3e8              CBZ      r0,|L1.22072|
0055bc  48f3              LDR      r0,|L1.22924|
0055be  4639              MOV      r1,r7                 ;9206
0055c0  f9b05000          LDRSH    r5,[r0,#0]            ;9204  ; load_U
0055c4  48f2              LDR      r0,|L1.22928|
0055c6  f9b11000          LDRSH    r1,[r1,#0]            ;9206
0055ca  f9b09000          LDRSH    r9,[r0,#0]            ;9204  ; UONPN
0055ce  48f1              LDR      r0,|L1.22932|
0055d0  454d              CMP      r5,r9                 ;9204
0055d2  f9b02000          LDRSH    r2,[r0,#0]            ;9204
0055d6  48f0              LDR      r0,|L1.22936|
0055d8  f9b03000          LDRSH    r3,[r0,#0]            ;9204
0055dc  48ef              LDR      r0,|L1.22940|
0055de  f9b04000          LDRSH    r4,[r0,#0]            ;9204
0055e2  48ef              LDR      r0,|L1.22944|
0055e4  f9b00000          LDRSH    r0,[r0,#0]            ;9204
0055e8  da13              BGE      |L1.22034|
0055ea  4282              CMP      r2,r0                 ;9204
0055ec  db03              BLT      |L1.22006|
0055ee  4283              CMP      r3,r0                 ;9204
0055f0  db01              BLT      |L1.22006|
0055f2  4284              CMP      r4,r0                 ;9204
0055f4  da0d              BGE      |L1.22034|
                  |L1.22006|
0055f6  48eb              LDR      r0,|L1.22948|
0055f8  f9b02000          LDRSH    r2,[r0,#0]            ;9206  ; TZNPN
0055fc  4291              CMP      r1,r2                 ;9206
0055fe  da23              BGE      |L1.22088|
005600  f1010101          ADD      r1,r1,#1              ;9208
005604  b208              SXTH     r0,r1                 ;9208
005606  8038              STRH     r0,[r7,#0]            ;9208
005608  4290              CMP      r0,r2                 ;9209
00560a  d11d              BNE      |L1.22088|
00560c  f886c000          STRB     r12,[r6,#0]           ;9211
005610  e01a              B        |L1.22088|
                  |L1.22034|
005612  f8dfc394          LDR      r12,|L1.22952|
005616  f9bcc000          LDRSH    r12,[r12,#0]          ;9215  ; UVNPN
00561a  4565              CMP      r5,r12                ;9215
00561c  dd14              BLE      |L1.22088|
00561e  4282              CMP      r2,r0                 ;9215
005620  dd12              BLE      |L1.22088|
005622  4283              CMP      r3,r0                 ;9215
005624  dd10              BLE      |L1.22088|
005626  4284              CMP      r4,r0                 ;9215
005628  dd0e              BLE      |L1.22088|
00562a  b169              CBZ      r1,|L1.22088|
00562c  f1a10101          SUB      r1,r1,#1              ;9219
005630  b208              SXTH     r0,r1                 ;9219
005632  8038              STRH     r0,[r7,#0]            ;9219
005634  b940              CBNZ     r0,|L1.22088|
005636  e000              B        |L1.22074|
                  |L1.22072|
005638  e002              B        |L1.22080|
                  |L1.22074|
00563a  f8868000          STRB     r8,[r6,#0]
00563e  e003              B        |L1.22088|
                  |L1.22080|
;;;9223   				}
;;;9224   			}
;;;9225   		}
;;;9226   	}
;;;9227   else
;;;9228   	{
;;;9229   	npn_tz_cnt=0;
005640  f8a7c000          STRH     r12,[r7,#0]
;;;9230   	npn_stat=npnsON;
005644  f8868000          STRB     r8,[r6,#0]
                  |L1.22088|
;;;9231   	}
;;;9232   
;;;9233   if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
005648  7830              LDRB     r0,[r6,#0]  ; npn_stat
00564a  2800              CMP      r0,#0
00564c  d107              BNE      |L1.22110|
00564e  e8bd03f0          POP      {r4-r9}
005652  230f              MOVS     r3,#0xf
005654  2201              MOVS     r2,#1
005656  216e              MOVS     r1,#0x6e
005658  20d2              MOVS     r0,#0xd2
00565a  f7ffbffe          B.W      mess_send
                  |L1.22110|
;;;9234   
;;;9235   
;;;9236   }
00565e  e8bd03f0          POP      {r4-r9}
005662  4770              BX       lr
;;;9237   
                          ENDP

                  loadoff_hndl PROC
;;;9239   //-----------------------------------------------
;;;9240   void loadoff_hndl(void)
005664  b5f0              PUSH     {r4-r7,lr}
;;;9241   {
;;;9242   if((load_U>UONPN)||(load_U<UVNPN))
005666  48c9              LDR      r0,|L1.22924|
;;;9243   	{
;;;9244   	if(load_off_cnt<TZNPN)
005668  4dd0              LDR      r5,|L1.22956|
;;;9245   		{
;;;9246   		load_off_cnt++;
;;;9247   		if(load_off_cnt>=TZNPN)
;;;9248   			{
;;;9249   			load_off_stat=npnsOFF;
00566a  2700              MOVS     r7,#0
00566c  f9b01000          LDRSH    r1,[r0,#0]            ;9242  ; load_U
005670  48c7              LDR      r0,|L1.22928|
005672  4ecf              LDR      r6,|L1.22960|
005674  f9b02000          LDRSH    r2,[r0,#0]            ;9242  ; UONPN
005678  f9b50000          LDRSH    r0,[r5,#0]            ;9244
00567c  4291              CMP      r1,r2                 ;9242
00567e  dc04              BGT      |L1.22154|
005680  4bc9              LDR      r3,|L1.22952|
005682  f9b33000          LDRSH    r3,[r3,#0]            ;9242  ; UVNPN
005686  4299              CMP      r1,r3                 ;9242
005688  da0d              BGE      |L1.22182|
                  |L1.22154|
00568a  49c6              LDR      r1,|L1.22948|
00568c  f9b11000          LDRSH    r1,[r1,#0]            ;9244  ; TZNPN
005690  4288              CMP      r0,r1                 ;9244
005692  da1c              BGE      |L1.22222|
005694  f1000001          ADD      r0,r0,#1              ;9246
005698  b200              SXTH     r0,r0                 ;9246
00569a  8028              STRH     r0,[r5,#0]            ;9246
00569c  4288              CMP      r0,r1                 ;9247
00569e  db16              BLT      |L1.22222|
0056a0  7037              STRB     r7,[r6,#0]
;;;9250   			load_off_cnt=TZNPN;
0056a2  8029              STRH     r1,[r5,#0]
0056a4  e013              B        |L1.22222|
                  |L1.22182|
;;;9251   			}
;;;9252   		}
;;;9253   	}
;;;9254   else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
0056a6  4cc3              LDR      r4,|L1.22964|
0056a8  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
0056ac  4423              ADD      r3,r3,r4
0056ae  428b              CMP      r3,r1
0056b0  da0d              BGE      |L1.22222|
0056b2  1b12              SUBS     r2,r2,r4
0056b4  428a              CMP      r2,r1
0056b6  dd0a              BLE      |L1.22222|
;;;9255   	{
;;;9256   	if(load_off_cnt)
0056b8  b148              CBZ      r0,|L1.22222|
;;;9257   		{
;;;9258   		load_off_cnt--;
0056ba  f1a00001          SUB      r0,r0,#1
0056be  b200              SXTH     r0,r0
0056c0  8028              STRH     r0,[r5,#0]
;;;9259   		if(load_off_cnt<=0)
0056c2  2800              CMP      r0,#0
0056c4  dc03              BGT      |L1.22222|
;;;9260   			{
;;;9261   			load_off_stat=npnsON;
0056c6  f04f0001          MOV      r0,#1
0056ca  7030              STRB     r0,[r6,#0]
;;;9262   			load_off_cnt=0;
0056cc  802f              STRH     r7,[r5,#0]
                  |L1.22222|
;;;9263   			}
;;;9264   		}
;;;9265   	}
;;;9266   
;;;9267   
;;;9268   if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
0056ce  7830              LDRB     r0,[r6,#0]  ; load_off_stat
0056d0  2800              CMP      r0,#0
0056d2  d103              BNE      |L1.22236|
0056d4  49b8              LDR      r1,|L1.22968|
0056d6  f04f000a          MOV      r0,#0xa
0056da  7008              STRB     r0,[r1,#0]
                  |L1.22236|
;;;9269   
;;;9270   
;;;9271   }
0056dc  bdf0              POP      {r4-r7,pc}
;;;9272   
                          ENDP

                  speedChargeStartStop PROC
;;;9449   //-----------------------------------------------
;;;9450   void speedChargeStartStop(void)
0056de  b508              PUSH     {r3,lr}
;;;9451   {
;;;9452   /*if(speedChIsOn)
;;;9453   	{
;;;9454   	speedChIsOn=0;
;;;9455   	}
;;;9456   
;;;9457   else
;;;9458   	{
;;;9459   	if(speedChrgBlckStat==0)
;;;9460   		{
;;;9461   		speedChIsOn=1;
;;;9462   		speedChTimeCnt=0;
;;;9463   		}
;;;9464   	else
;;;9465   		{
;;;9466   		show_mess(	"     Ускоренный     ",
;;;9467   	          		"       заряд        ",
;;;9468   	          		"    заблокирован!   ",
;;;9469   	          		"                    ",2000);	 
;;;9470   		}
;;;9471   	}*/
;;;9472   
;;;9473   if(sp_ch_stat!=scsOFF)
0056e0  48b6              LDR      r0,|L1.22972|
0056e2  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
0056e4  b141              CBZ      r1,|L1.22264|
;;;9474   	{
;;;9475   	sp_ch_stat=scsOFF;
0056e6  f04f0100          MOV      r1,#0
0056ea  7001              STRB     r1,[r0,#0]
;;;9476   	speedz_mem_hndl(10);
0056ec  e8bd4008          POP      {r3,lr}
0056f0  f04f000a          MOV      r0,#0xa
0056f4  f7ffbffe          B.W      speedz_mem_hndl
                  |L1.22264|
;;;9477   	}
;;;9478   
;;;9479   else
;;;9480   	{
;;;9481   	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
0056f8  49b1              LDR      r1,|L1.22976|
0056fa  f9b12000          LDRSH    r2,[r1,#0]  ; speedChrgBlckStat
0056fe  49b1              LDR      r1,|L1.22980|
005700  780b              LDRB     r3,[r1,#0]  ; spc_stat
005702  431a              ORRS     r2,r2,r3
005704  7b0b              LDRB     r3,[r1,#0xc]  ; vz1_stat
005706  7bc9              LDRB     r1,[r1,#0xf]  ; vz2_stat
005708  431a              ORRS     r2,r2,r3
00570a  430a              ORRS     r2,r2,r1
00570c  d009              BEQ      |L1.22306|
;;;9482   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9483   		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;9484   		#endif
;;;9485   		)
;;;9486   		{
;;;9487   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9488   		sp_ch_stat=scsSTEP1;
;;;9489   		#else
;;;9490   		sp_ch_stat=scsWRK;
;;;9491   		#endif
;;;9492   		speedz_mem_hndl(1);
;;;9493   		}
;;;9494   	else 
;;;9495   		{
;;;9496   		show_mess(	"     Ускоренный     ",
00570e  f44f60fa          MOV      r0,#0x7d0
005712  9000              STR      r0,[sp,#0]
005714  4bac              LDR      r3,|L1.22984|
005716  a2ad              ADR      r2,|L1.22988|
005718  a1b2              ADR      r1,|L1.23012|
00571a  a0b8              ADR      r0,|L1.23036|
00571c  f7fffffe          BL       show_mess
;;;9497   	          		"       заряд        ",
;;;9498   	          		"    заблокирован!   ",
;;;9499   	          		"                    ",2000);
;;;9500   		}
;;;9501   	}
;;;9502   }
005720  bd08              POP      {r3,pc}
                  |L1.22306|
005722  f04f0101          MOV      r1,#1                 ;9488
005726  7001              STRB     r1,[r0,#0]            ;9488
005728  e8bd4008          POP      {r3,lr}               ;9492
00572c  4608              MOV      r0,r1                 ;9492
00572e  f7ffbffe          B.W      speedz_mem_hndl
;;;9503   
                          ENDP

                  speedChargeHndl PROC
;;;9273   //-----------------------------------------------
;;;9274   void speedChargeHndl(void)
005732  e92d4ff8          PUSH     {r3-r11,lr}
;;;9275   {
;;;9276   /*
;;;9277   if(sp_ch_stat==scsOFF)
;;;9278   	{
;;;9279   	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;9280   	}*/
;;;9281   	 
;;;9282   if(sp_ch_stat==scsSTEP1)
005736  4fa1              LDR      r7,|L1.22972|
;;;9283   	{
;;;9284   	if(sp_ch_stat_old!=sp_ch_stat)
005738  4db7              LDR      r5,|L1.23064|
;;;9285   		{
;;;9286   		sp_ch_stat_cnt=5;
;;;9287   		}
;;;9288   	if(sp_ch_stat_cnt)
;;;9289   		{
;;;9290   		sp_ch_stat_cnt--;
;;;9291   		if(sp_ch_stat_cnt==0)
;;;9292   			{
;;;9293   			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;9294   
;;;9295   			}
;;;9296   		}
;;;9297   	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
00573a  f8df82d8          LDR      r8,|L1.23060|
00573e  7839              LDRB     r1,[r7,#0]            ;9282  ; sp_ch_stat
005740  7828              LDRB     r0,[r5,#0]            ;9284
005742  4cb6              LDR      r4,|L1.23068|
005744  f04f0a02          MOV      r10,#2
005748  2901              CMP      r1,#1                 ;9282
00574a  d115              BNE      |L1.22392|
00574c  2801              CMP      r0,#1                 ;9284
00574e  d002              BEQ      |L1.22358|
005750  f04f0105          MOV      r1,#5                 ;9286
005754  8021              STRH     r1,[r4,#0]            ;9286
                  |L1.22358|
005756  f9b41000          LDRSH    r1,[r4,#0]            ;9288  ; sp_ch_stat_cnt
00575a  b139              CBZ      r1,|L1.22380|
00575c  f1a10101          SUB      r1,r1,#1              ;9290
005760  b209              SXTH     r1,r1                 ;9290
005762  8021              STRH     r1,[r4,#0]            ;9290
005764  b911              CBNZ     r1,|L1.22380|
005766  f04f0103          MOV      r1,#3                 ;9293
00576a  7039              STRB     r1,[r7,#0]            ;9293
                  |L1.22380|
00576c  f8981000          LDRB     r1,[r8,#0]  ; sk_stat
005770  2901              CMP      r1,#1
005772  d101              BNE      |L1.22392|
005774  f887a000          STRB     r10,[r7,#0]
                  |L1.22392|
;;;9298   	}
;;;9299   
;;;9300   if(sp_ch_stat==scsWRK)
005778  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
00577a  2600              MOVS     r6,#0
00577c  2902              CMP      r1,#2
00577e  d11f              BNE      |L1.22464|
;;;9301   	{
;;;9302   	if(sp_ch_stat_old!=sp_ch_stat)
;;;9303   		{
;;;9304   		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
005780  4aa7              LDR      r2,|L1.23072|
;;;9305   		hv_vz_up_cnt=0;
005782  49a8              LDR      r1,|L1.23076|
005784  2802              CMP      r0,#2                 ;9302
005786  d008              BEQ      |L1.22426|
005788  48a7              LDR      r0,|L1.23080|
00578a  f44f6361          MOV      r3,#0xe10             ;9304
00578e  f9b00000          LDRSH    r0,[r0,#0]            ;9304  ; speedChrgTimeInHour
005792  fb00f003          MUL      r0,r0,r3              ;9304
005796  6010              STR      r0,[r2,#0]            ;9304  ; sp_ch_wrk_cnt
005798  600e              STR      r6,[r1,#0]  ; hv_vz_up_cnt
                  |L1.22426|
;;;9306   		}
;;;9307   	sp_ch_wrk_cnt--;
00579a  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
00579c  f1a00001          SUB      r0,r0,#1
0057a0  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;9308   	hv_vz_up_cnt++;
0057a2  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
0057a4  f1020201          ADD      r2,r2,#1
0057a8  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;9309   	if(sp_ch_wrk_cnt==0)
0057aa  b918              CBNZ     r0,|L1.22452|
;;;9310   		{
;;;9311   		sp_ch_stat=scsOFF;
0057ac  703e              STRB     r6,[r7,#0]
;;;9312   		speedz_mem_hndl(0);
0057ae  2000              MOVS     r0,#0
0057b0  f7fffffe          BL       speedz_mem_hndl
                  |L1.22452|
;;;9313   		}
;;;9314   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9315   	if(sk_stat[0]==0)sp_ch_stat=scsERR2;
0057b4  f8980000          LDRB     r0,[r8,#0]  ; sk_stat
0057b8  b910              CBNZ     r0,|L1.22464|
0057ba  f04f0004          MOV      r0,#4
0057be  7038              STRB     r0,[r7,#0]
                  |L1.22464|
;;;9316   	#endif
;;;9317   	}
;;;9318   
;;;9319   if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
0057c0  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;9320   	{
;;;9321   	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;9322   		{
;;;9323   		sp_ch_stat_cnt=10;
;;;9324   		}
;;;9325   	sp_ch_stat_cnt--;
;;;9326   	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;9327   		{
;;;9328   		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0057c2  f2413b88          MOV      r11,#0x1388
0057c6  f04f090a          MOV      r9,#0xa               ;9323
0057ca  2803              CMP      r0,#3                 ;9319
0057cc  d119              BNE      |L1.22530|
0057ce  7828              LDRB     r0,[r5,#0]            ;9321  ; sp_ch_stat_old
0057d0  2803              CMP      r0,#3                 ;9321
0057d2  d101              BNE      |L1.22488|
0057d4  8820              LDRH     r0,[r4,#0]            ;9321  ; sp_ch_stat_cnt
0057d6  b908              CBNZ     r0,|L1.22492|
                  |L1.22488|
0057d8  f8a49000          STRH     r9,[r4,#0]            ;9323
                  |L1.22492|
0057dc  8820              LDRH     r0,[r4,#0]            ;9325  ; sp_ch_stat_cnt
0057de  f1a00001          SUB      r0,r0,#1              ;9325
0057e2  b200              SXTH     r0,r0                 ;9325
0057e4  8020              STRH     r0,[r4,#0]            ;9325
0057e6  280a              CMP      r0,#0xa               ;9326
0057e8  d001              BEQ      |L1.22510|
0057ea  2809              CMP      r0,#9                 ;9326
0057ec  d109              BNE      |L1.22530|
                  |L1.22510|
0057ee  4b8f              LDR      r3,|L1.23084|
0057f0  a08f              ADR      r0,|L1.23088|
0057f2  f1030218          ADD      r2,r3,#0x18
0057f6  f1020118          ADD      r1,r2,#0x18
0057fa  f8cdb000          STR      r11,[sp,#0]
0057fe  f7fffffe          BL       show_mess
                  |L1.22530|
;;;9329   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;9330   					"      ВКЛЮЧЕН       ",
;;;9331   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;9332   					5000);
;;;9333   		}
;;;9334   	}
;;;9335   if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
005802  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
005804  2804              CMP      r0,#4
005806  d11f              BNE      |L1.22600|
;;;9336   	{
;;;9337   	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
005808  7828              LDRB     r0,[r5,#0]  ; sp_ch_stat_old
00580a  2804              CMP      r0,#4
00580c  d101              BNE      |L1.22546|
00580e  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
005810  b908              CBNZ     r0,|L1.22550|
                  |L1.22546|
;;;9338   		{
;;;9339   		sp_ch_stat_cnt=10;
005812  f8a49000          STRH     r9,[r4,#0]
                  |L1.22550|
;;;9340   		}
;;;9341   	sp_ch_stat_cnt--;
005816  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
005818  f1a00001          SUB      r0,r0,#1
00581c  b200              SXTH     r0,r0
00581e  8020              STRH     r0,[r4,#0]
;;;9342   	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
005820  280a              CMP      r0,#0xa
005822  d001              BEQ      |L1.22568|
005824  2809              CMP      r0,#9
005826  d109              BNE      |L1.22588|
                  |L1.22568|
;;;9343   		{
;;;9344   		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
005828  4b87              LDR      r3,|L1.23112|
00582a  a081              ADR      r0,|L1.23088|
00582c  f1030218          ADD      r2,r3,#0x18
005830  f1020118          ADD      r1,r2,#0x18
005834  f8cdb000          STR      r11,[sp,#0]
005838  f7fffffe          BL       show_mess
                  |L1.22588|
;;;9345   					"    ЗАБЛОКИРОВАН    ",
;;;9346   					"     НЕИСПРАВНА     ",
;;;9347   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;9348   					5000);
;;;9349   		}
;;;9350   	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
00583c  f8980000          LDRB     r0,[r8,#0]  ; sk_stat
005840  2801              CMP      r0,#1
005842  d101              BNE      |L1.22600|
005844  f887a000          STRB     r10,[r7,#0]
                  |L1.22600|
;;;9351   	}
;;;9352   
;;;9353   
;;;9354   sp_ch_stat_old=sp_ch_stat;
005848  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
00584a  7028              STRB     r0,[r5,#0]
;;;9355   
;;;9356   
;;;9357   
;;;9358   if(speedChrgAvtEn==1)
00584c  497f              LDR      r1,|L1.23116|
;;;9359   	{
;;;9360   	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;9361   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9362   		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;9363   		#endif
;;;9364   		)
;;;9365   		{
;;;9366   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;9367   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9368   		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;9369   		#endif
;;;9370   		#ifdef UKU_220_V2
;;;9371   		&&(abs(bat[0]._Ib/10-IZMAX)<5)
;;;9372   		#endif
;;;9373   		&&(!speedChrgBlckStat))
00584e  4c5c              LDR      r4,|L1.22976|
005850  8809              LDRH     r1,[r1,#0]            ;9358  ; speedChrgAvtEn
005852  2901              CMP      r1,#1                 ;9358
005854  d129              BNE      |L1.22698|
005856  495b              LDR      r1,|L1.22980|
005858  780a              LDRB     r2,[r1,#0]            ;9360  ; spc_stat
00585a  4310              ORRS     r0,r0,r2              ;9360
00585c  7b0a              LDRB     r2,[r1,#0xc]          ;9360  ; vz1_stat
00585e  7bc9              LDRB     r1,[r1,#0xf]          ;9360  ; vz2_stat
005860  4310              ORRS     r0,r0,r2              ;9360
005862  4308              ORRS     r0,r0,r1              ;9360
005864  d121              BNE      |L1.22698|
005866  4849              LDR      r0,|L1.22924|
005868  4979              LDR      r1,|L1.23120|
00586a  f9b00000          LDRSH    r0,[r0,#0]            ;9366  ; load_U
00586e  f9b11000          LDRSH    r1,[r1,#0]            ;9366  ; u_necc
005872  4288              CMP      r0,r1                 ;9366
005874  da19              BGE      |L1.22698|
005876  1a08              SUBS     r0,r1,r0              ;9366
005878  4976              LDR      r1,|L1.23124|
00587a  f9b11000          LDRSH    r1,[r1,#0]            ;9366  ; speedChrgDU
00587e  4288              CMP      r0,r1                 ;9366
005880  dd13              BLE      |L1.22698|
005882  4875              LDR      r0,|L1.23128|
005884  4975              LDR      r1,|L1.23132|
005886  f9b00000          LDRSH    r0,[r0,#0]            ;9368  ; Ib_ips_termokompensat
00588a  8809              LDRH     r1,[r1,#0]            ;9368  ; IZMAX
00588c  fb90f0f9          SDIV     r0,r0,r9              ;9368
005890  1a40              SUBS     r0,r0,r1              ;9368
005892  b200              SXTH     r0,r0                 ;9368
005894  f7fffffe          BL       abs
005898  2805              CMP      r0,#5                 ;9368
00589a  da06              BGE      |L1.22698|
00589c  8820              LDRH     r0,[r4,#0]  ; speedChrgBlckStat
00589e  b920              CBNZ     r0,|L1.22698|
;;;9374   			{
;;;9375   			speedChargeStartStop();
0058a0  f7fffffe          BL       speedChargeStartStop
;;;9376   			speedz_mem_hndl(5);
0058a4  2005              MOVS     r0,#5
0058a6  f7fffffe          BL       speedz_mem_hndl
                  |L1.22698|
;;;9377   			}
;;;9378   		}
;;;9379   	}
;;;9380   
;;;9381   
;;;9382   
;;;9383   /*
;;;9384   if(speedChIsOn)
;;;9385   	{
;;;9386   	speedChTimeCnt++;
;;;9387   	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;9388   		{
;;;9389   		speedChIsOn=0;
;;;9390   		}
;;;9391   	if(speedChrgBlckStat)
;;;9392   		{
;;;9393   		speedChIsOn=0;
;;;9394   		speedChTimeCnt=0;
;;;9395   		}
;;;9396   	}
;;;9397   
;;;9398   
;;;9399   
;;;9400   if(speedChrgAvtEn)
;;;9401   	{
;;;9402   	if(!speedChIsOn)
;;;9403   		{
;;;9404   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;9405   			{
;;;9406   			speedChIsOn=1;
;;;9407   			}
;;;9408   		}
;;;9409   	}
;;;9410   
;;;9411   
;;;9412   */
;;;9413   if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
0058aa  486d              LDR      r0,|L1.23136|
0058ac  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
0058ae  2802              CMP      r0,#2
0058b0  d002              BEQ      |L1.22712|
0058b2  8026              STRH     r6,[r4,#0]
                  |L1.22708|
;;;9414   else
;;;9415   	{
;;;9416   	speedChrgBlckStat=0;
;;;9417   	if(speedChrgBlckSrc==1)
;;;9418   		{
;;;9419   		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;9420   		}
;;;9421   	else if(speedChrgBlckSrc==2)
;;;9422   		{
;;;9423   		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;9424   		}
;;;9425   	}
;;;9426   
;;;9427   /*
;;;9428   if(speedChrgBlckStat==1)
;;;9429   	{
;;;9430   
;;;9431   	//speedChargeStartStop();
;;;9432   
;;;9433   	speedChrgShowCnt++;
;;;9434   	if(speedChrgShowCnt>=30)	
;;;9435   		{
;;;9436   		speedChrgShowCnt=0;
;;;9437   		show_mess(	"     УСКОРЕННЫЙ     ",
;;;9438   					"       ЗАРЯД        ",
;;;9439   					"     ЗАПРЕЩЕН!!!    ",
;;;9440   					"                    ",
;;;9441   					5000);
;;;9442   		}
;;;9443   	} 
;;;9444   else speedChrgShowCnt=0;  */
;;;9445   
;;;9446   
;;;9447   }
0058b4  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.22712|
0058b8  8026              STRH     r6,[r4,#0]            ;9416
0058ba  486a              LDR      r0,|L1.23140|
0058bc  496a              LDR      r1,|L1.23144|
0058be  f44f63fa          MOV      r3,#0x7d0             ;9419
0058c2  f9b00000          LDRSH    r0,[r0,#0]            ;9423  ; speedChrgBlckLog
0058c6  b918              CBNZ     r0,|L1.22736|
0058c8  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;9423  ; adc_buff_
0058cc  429a              CMP      r2,r3                 ;9423
0058ce  dc05              BGT      |L1.22748|
                  |L1.22736|
0058d0  2801              CMP      r0,#1                 ;9423
0058d2  d1ef              BNE      |L1.22708|
0058d4  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;9423  ; adc_buff_
0058d8  4298              CMP      r0,r3                 ;9423
0058da  daeb              BGE      |L1.22708|
                  |L1.22748|
0058dc  f04f0001          MOV      r0,#1                 ;9423
0058e0  8020              STRH     r0,[r4,#0]            ;9423
0058e2  e7e7              B        |L1.22708|
;;;9448   
                          ENDP

                  averageChargeHndl PROC
;;;9504   //-----------------------------------------------
;;;9505   void averageChargeHndl(void)
0058e4  e92d4ff8          PUSH     {r3-r11,lr}
;;;9506   {
;;;9507   /*
;;;9508   if(hv_vz_stat==hvsOFF)
;;;9509   	{
;;;9510   	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;9511   	} */
;;;9512   if(hv_vz_stat!=hvsOFF)
0058e8  f8dfa180          LDR      r10,|L1.23148|
0058ec  f04f0b00          MOV      r11,#0
0058f0  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0058f4  b130              CBZ      r0,|L1.22788|
;;;9513   	{
;;;9514   	hv_vz_stat=hvsOFF; 	
0058f6  f88ab000          STRB     r11,[r10,#0]
;;;9515   	lc640_write(EE_HV_VZ_STAT,hvsOFF);
0058fa  2100              MOVS     r1,#0
0058fc  f44f70b4          MOV      r0,#0x168
005900  f7fffffe          BL       lc640_write
                  |L1.22788|
;;;9516   	}
;;;9517   
;;;9518   if(hv_vz_stat==hvsSTEP1)
005904  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;9519   	{
;;;9520   	if(hv_vz_stat_old!=hv_vz_stat)
;;;9521   		{
;;;9522   		hv_vz_stat_cnt=5;
;;;9523   		}
;;;9524   	if(hv_vz_stat_cnt)
;;;9525   		{
;;;9526   		hv_vz_stat_cnt--;
;;;9527   		if(hv_vz_stat_cnt==0)
;;;9528   			{
;;;9529   			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;9530   			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;9531   			}
;;;9532   		}
;;;9533   	if(sk_stat[0]==1)
005908  4e42              LDR      r6,|L1.23060|
00590a  4d59              LDR      r5,|L1.23152|
00590c  4c59              LDR      r4,|L1.23156|
00590e  f04f0905          MOV      r9,#5                 ;9522
005912  2801              CMP      r0,#1                 ;9518
005914  d130              BNE      |L1.22904|
005916  7828              LDRB     r0,[r5,#0]            ;9520  ; hv_vz_stat_old
005918  2801              CMP      r0,#1                 ;9520
00591a  d001              BEQ      |L1.22816|
00591c  f8a49000          STRH     r9,[r4,#0]            ;9522
                  |L1.22816|
005920  f9b40000          LDRSH    r0,[r4,#0]            ;9524  ; hv_vz_stat_cnt
005924  b168              CBZ      r0,|L1.22850|
005926  f1a00001          SUB      r0,r0,#1              ;9526
00592a  b200              SXTH     r0,r0                 ;9526
00592c  8020              STRH     r0,[r4,#0]            ;9526
00592e  b940              CBNZ     r0,|L1.22850|
005930  f04f0006          MOV      r0,#6                 ;9529
005934  f88a0000          STRB     r0,[r10,#0]           ;9529
005938  4601              MOV      r1,r0                 ;9530
00593a  f44f70b4          MOV      r0,#0x168             ;9530
00593e  f7fffffe          BL       lc640_write
                  |L1.22850|
005942  7830              LDRB     r0,[r6,#0]  ; sk_stat
005944  2801              CMP      r0,#1
005946  d117              BNE      |L1.22904|
;;;9534   		{
;;;9535   		hv_vz_stat=hvsSTEP2;
005948  f04f0002          MOV      r0,#2
00594c  f88a0000          STRB     r0,[r10,#0]
;;;9536   		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
005950  4601              MOV      r1,r0
005952  f44f70b4          MOV      r0,#0x168
005956  f7fffffe          BL       lc640_write
;;;9537   		tree_up(iHV_STEP2_2,1,0,0);
00595a  2300              MOVS     r3,#0
00595c  461a              MOV      r2,r3
00595e  2101              MOVS     r1,#1
005960  20dc              MOVS     r0,#0xdc
005962  f7fffffe          BL       tree_up
;;;9538   		tree_up(iHV_STEP2_1,0,0,0);
005966  2300              MOVS     r3,#0
005968  461a              MOV      r2,r3
00596a  4619              MOV      r1,r3
00596c  20db              MOVS     r0,#0xdb
00596e  f7fffffe          BL       tree_up
;;;9539   		ret(1200);
005972  f44f6096          MOV      r0,#0x4b0
005976  e07f              B        |L1.23160|
                  |L1.22904|
005978  e080              B        |L1.23164|
00597a  0000              DCW      0x0000
                  |L1.22908|
                          DCD      superviser_cnt
                  |L1.22912|
                          DCD      NPN_OUT
                  |L1.22916|
                          DCD      npn_tz_cnt
                  |L1.22920|
                          DCD      npn_stat
                  |L1.22924|
                          DCD      load_U
                  |L1.22928|
                          DCD      UONPN
                  |L1.22932|
                          DCD      net_Ua
                  |L1.22936|
                          DCD      net_Ub
                  |L1.22940|
                          DCD      net_Uc
                  |L1.22944|
                          DCD      UMN
                  |L1.22948|
                          DCD      TZNPN
                  |L1.22952|
                          DCD      UVNPN
                  |L1.22956|
                          DCD      load_off_cnt
                  |L1.22960|
                          DCD      load_off_stat
                  |L1.22964|
                          DCD      dUNPN
                  |L1.22968|
                          DCD      tloaddisable_cmnd
                  |L1.22972|
                          DCD      sp_ch_stat
                  |L1.22976|
                          DCD      speedChrgBlckStat
                  |L1.22980|
                          DCD      ||area_number.25||+0x18
                  |L1.22984|
                          DCD      ||.text||+0xfa0
                  |L1.22988|
0059cc  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
0059d0  e7e0e1eb
0059d4  eeeae8f0
0059d8  eee2e0ed
0059dc  21      
0059dd  20202000          DCB      "   ",0
0059e1  00                DCB      0
0059e2  00                DCB      0
0059e3  00                DCB      0
                  |L1.23012|
0059e4  20202020          DCB      "       ",231,224,240,255,228,"        ",0
0059e8  202020e7
0059ec  e0f0ffe4
0059f0  20202020
0059f4  20202020
0059f8  00      
0059f9  00                DCB      0
0059fa  00                DCB      0
0059fb  00                DCB      0
                  |L1.23036|
0059fc  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
005a00  20d3f1ea
005a04  eef0e5ed
005a08  edfbe920
005a0c  20202020
005a10  00      
005a11  00                DCB      0
005a12  00                DCB      0
005a13  00                DCB      0
                  |L1.23060|
                          DCD      sk_stat
                  |L1.23064|
                          DCD      sp_ch_stat_old
                  |L1.23068|
                          DCD      sp_ch_stat_cnt
                  |L1.23072|
                          DCD      sp_ch_wrk_cnt
                  |L1.23076|
                          DCD      hv_vz_up_cnt
                  |L1.23080|
                          DCD      speedChrgTimeInHour
                  |L1.23084|
                          DCD      ||.text||+0xe68
                  |L1.23088|
005a30  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
005a34  caced0c5
005a38  cdcddbc9
005a3c  20c7c0  
005a3f  d0dfc420          DCB      208,223,196,"  ",0
005a43  2000    
005a45  00                DCB      0
005a46  00                DCB      0
005a47  00                DCB      0
                  |L1.23112|
                          DCD      ||.text||+0x8d4
                  |L1.23116|
                          DCD      speedChrgAvtEn
                  |L1.23120|
                          DCD      u_necc
                  |L1.23124|
                          DCD      speedChrgDU
                  |L1.23128|
                          DCD      Ib_ips_termokompensat
                  |L1.23132|
                          DCD      IZMAX
                  |L1.23136|
                          DCD      speedChrgBlckSrc
                  |L1.23140|
                          DCD      speedChrgBlckLog
                  |L1.23144|
                          DCD      ||.bss||+0x40c
                  |L1.23148|
                          DCD      hv_vz_stat
                  |L1.23152|
                          DCD      hv_vz_stat_old
                  |L1.23156|
                          DCD      hv_vz_stat_cnt
                  |L1.23160|
005a78  f7fffffe          BL       ||ret||
                  |L1.23164|
;;;9540   		}
;;;9541   	}
;;;9542   
;;;9543   if(hv_vz_stat==hvsSTEP2)
005a7c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005a80  2802              CMP      r0,#2
005a82  d10b              BNE      |L1.23196|
;;;9544   	{
;;;9545   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005a84  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
005a86  2902              CMP      r1,#2
005a88  d101              BNE      |L1.23182|
005a8a  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
005a8c  b911              CBNZ     r1,|L1.23188|
                  |L1.23182|
;;;9546   		{
;;;9547   		hv_vz_stat_cnt=15;
005a8e  f04f010f          MOV      r1,#0xf
005a92  8021              STRH     r1,[r4,#0]
                  |L1.23188|
;;;9548   		}
;;;9549   	hv_vz_stat_cnt--;
005a94  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
005a96  f1a10101          SUB      r1,r1,#1
005a9a  8021              STRH     r1,[r4,#0]
                  |L1.23196|
;;;9550   	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;9551   	//	{
;;;9552   //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;9553   	//				"  Напряжение будет  ",
;;;9554   	//				" увеличено до     @В",
;;;9555   	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;9556   	//				4800,UVZ,1);
;;;9557   	//	}
;;;9558   	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;9559   	//	{
;;;9560   	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;9561   	//				"     НАЖАТИЕМ       ",
;;;9562   	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;9563   	//				"      КНОПКИ        ",
;;;9564   	//				4800);
;;;9565   	//	} 
;;;9566   /*	if(sk_stat[1]==1)
;;;9567   		{
;;;9568   		hv_vz_stat=hvsWRK;
;;;9569   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;9570   		}*/
;;;9571   	}
;;;9572   
;;;9573   if(hv_vz_stat==hvsSTEP3)
;;;9574   	{
;;;9575   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;9576   		{
;;;9577   		hv_vz_stat_cnt=10;
005a9c  270a              MOVS     r7,#0xa
;;;9578   		}
;;;9579   	hv_vz_stat_cnt--;
;;;9580   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;9581   		{
;;;9582   		show_mess(	"     ВКЛЮЧИТЕ       ",
005a9e  f2413888          MOV      r8,#0x1388
005aa2  2803              CMP      r0,#3                 ;9573
005aa4  d122              BNE      |L1.23276|
005aa6  7828              LDRB     r0,[r5,#0]            ;9575  ; hv_vz_stat_old
005aa8  2803              CMP      r0,#3                 ;9575
005aaa  d101              BNE      |L1.23216|
005aac  8820              LDRH     r0,[r4,#0]            ;9575  ; hv_vz_stat_cnt
005aae  b900              CBNZ     r0,|L1.23218|
                  |L1.23216|
005ab0  8027              STRH     r7,[r4,#0]            ;9577
                  |L1.23218|
005ab2  8820              LDRH     r0,[r4,#0]            ;9579  ; hv_vz_stat_cnt
005ab4  f1a00001          SUB      r0,r0,#1              ;9579
005ab8  b200              SXTH     r0,r0                 ;9579
005aba  8020              STRH     r0,[r4,#0]            ;9579
005abc  280a              CMP      r0,#0xa               ;9580
005abe  d001              BEQ      |L1.23236|
005ac0  2809              CMP      r0,#9                 ;9580
005ac2  d109              BNE      |L1.23256|
                  |L1.23236|
005ac4  4bfb              LDR      r3,|L1.24244|
005ac6  a2fc              ADR      r2,|L1.24248|
005ac8  f2a351f4          SUB      r1,r3,#0x5f4
005acc  f1010018          ADD      r0,r1,#0x18
005ad0  f8cd8000          STR      r8,[sp,#0]
005ad4  f7fffffe          BL       show_mess
                  |L1.23256|
;;;9583   					"      ТУМБЛЕР       ",
;;;9584   					"   ВЫРАВНИВАЮЩИЙ    ",
;;;9585   					"       ЗАРЯД        ",
;;;9586   					5000);
;;;9587   		}
;;;9588   	if(sk_stat[1]==1)
005ad8  7870              LDRB     r0,[r6,#1]  ; sk_stat
005ada  2801              CMP      r0,#1
005adc  d106              BNE      |L1.23276|
;;;9589   		{
;;;9590   		hv_vz_stat=hvsWRK;
005ade  f88a9000          STRB     r9,[r10,#0]
;;;9591   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005ae2  2105              MOVS     r1,#5
005ae4  f44f70b4          MOV      r0,#0x168
005ae8  f7fffffe          BL       lc640_write
                  |L1.23276|
;;;9592   		}
;;;9593   	}
;;;9594   
;;;9595   if(hv_vz_stat==hvsWRK)
005aec  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005af0  2805              CMP      r0,#5
005af2  d13a              BNE      |L1.23402|
;;;9596   	{
;;;9597   	if(hv_vz_stat_old!=hv_vz_stat)
005af4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;9598   		{
;;;9599   		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
005af6  4af6              LDR      r2,|L1.24272|
;;;9600   		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;9601   		hv_vz_up_cnt=0L;
005af8  49f6              LDR      r1,|L1.24276|
005afa  2805              CMP      r0,#5                 ;9597
005afc  d00d              BEQ      |L1.23322|
005afe  48f6              LDR      r0,|L1.24280|
005b00  f44f6361          MOV      r3,#0xe10             ;9599
005b04  f9b00000          LDRSH    r0,[r0,#0]            ;9599  ; VZ_HR
005b08  fb00f303          MUL      r3,r0,r3              ;9599
005b0c  6013              STR      r3,[r2,#0]            ;9599  ; hv_vz_wrk_cnt
005b0e  b910              CBNZ     r0,|L1.23318|
005b10  f44f60e1          MOV      r0,#0x708             ;9600
005b14  6010              STR      r0,[r2,#0]            ;9600  ; hv_vz_wrk_cnt
                  |L1.23318|
005b16  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.23322|
;;;9602   		}
;;;9603   	hv_vz_wrk_cnt--;
005b1a  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
005b1c  f1a00001          SUB      r0,r0,#1
005b20  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;9604   	hv_vz_up_cnt++;
005b22  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
005b24  f1020201          ADD      r2,r2,#1
005b28  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;9605   
;;;9606   	if(hv_vz_wrk_cnt==0)
005b2a  b940              CBNZ     r0,|L1.23358|
;;;9607   		{
;;;9608   		hv_vz_stat=hvsERR4;
005b2c  f04f0009          MOV      r0,#9
005b30  f88a0000          STRB     r0,[r10,#0]
;;;9609   		lc640_write(EE_HV_VZ_STAT,hvsERR4);
005b34  4601              MOV      r1,r0
005b36  f44f70b4          MOV      r0,#0x168
005b3a  f7fffffe          BL       lc640_write
                  |L1.23358|
;;;9610   		}
;;;9611   	if(sk_stat[0]==0)
005b3e  7830              LDRB     r0,[r6,#0]  ; sk_stat
005b40  b940              CBNZ     r0,|L1.23380|
;;;9612   		{
;;;9613   		hv_vz_stat=hvsERR2;
005b42  f04f0007          MOV      r0,#7
005b46  f88a0000          STRB     r0,[r10,#0]
;;;9614   		lc640_write(EE_HV_VZ_STAT,hvsERR2);
005b4a  4601              MOV      r1,r0
005b4c  f44f70b4          MOV      r0,#0x168
005b50  f7fffffe          BL       lc640_write
                  |L1.23380|
;;;9615   		}
;;;9616   	if(sk_stat[1]==0)
005b54  7870              LDRB     r0,[r6,#1]  ; sk_stat
005b56  b940              CBNZ     r0,|L1.23402|
;;;9617   		{
;;;9618   		hv_vz_stat=hvsERR3;
005b58  f04f0008          MOV      r0,#8
005b5c  f88a0000          STRB     r0,[r10,#0]
;;;9619   		lc640_write(EE_HV_VZ_STAT,hvsERR3);
005b60  4601              MOV      r1,r0
005b62  f44f70b4          MOV      r0,#0x168
005b66  f7fffffe          BL       lc640_write
                  |L1.23402|
;;;9620   		}
;;;9621   	}
;;;9622   
;;;9623   if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
005b6a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005b6e  2806              CMP      r0,#6
005b70  d11a              BNE      |L1.23464|
;;;9624   	{
;;;9625   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005b72  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005b74  2806              CMP      r0,#6
005b76  d101              BNE      |L1.23420|
005b78  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005b7a  b900              CBNZ     r0,|L1.23422|
                  |L1.23420|
;;;9626   		{
;;;9627   		hv_vz_stat_cnt=10;
005b7c  8027              STRH     r7,[r4,#0]
                  |L1.23422|
;;;9628   		}
;;;9629   	hv_vz_stat_cnt--;
005b7e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005b80  f1a00001          SUB      r0,r0,#1
005b84  b200              SXTH     r0,r0
005b86  8020              STRH     r0,[r4,#0]
;;;9630   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005b88  280a              CMP      r0,#0xa
005b8a  d001              BEQ      |L1.23440|
005b8c  2809              CMP      r0,#9
005b8e  d10b              BNE      |L1.23464|
                  |L1.23440|
;;;9631   		{
;;;9632   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005b90  4bc8              LDR      r3,|L1.24244|
005b92  f8cd8000          STR      r8,[sp,#0]
005b96  3bf0              SUBS     r3,r3,#0xf0
005b98  f1030218          ADD      r2,r3,#0x18
005b9c  f1020118          ADD      r1,r2,#0x18
005ba0  f2a1507c          SUB      r0,r1,#0x57c
005ba4  f7fffffe          BL       show_mess
                  |L1.23464|
;;;9633   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;9634   					"      ВКЛЮЧЕН       ",
;;;9635   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;9636   					5000);
;;;9637   		}
;;;9638   	}
;;;9639   if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
005ba8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005bac  2807              CMP      r0,#7
005bae  d123              BNE      |L1.23544|
;;;9640   	{
;;;9641   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005bb0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005bb2  2807              CMP      r0,#7
005bb4  d101              BNE      |L1.23482|
005bb6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005bb8  b900              CBNZ     r0,|L1.23484|
                  |L1.23482|
;;;9642   		{
;;;9643   		hv_vz_stat_cnt=10;
005bba  8027              STRH     r7,[r4,#0]
                  |L1.23484|
;;;9644   		}
;;;9645   	hv_vz_stat_cnt--;
005bbc  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005bbe  f1a00001          SUB      r0,r0,#1
005bc2  b200              SXTH     r0,r0
005bc4  8020              STRH     r0,[r4,#0]
;;;9646   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005bc6  280a              CMP      r0,#0xa
005bc8  d001              BEQ      |L1.23502|
005bca  2809              CMP      r0,#9
005bcc  d10a              BNE      |L1.23524|
                  |L1.23502|
;;;9647   		{
;;;9648   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005bce  4bc3              LDR      r3,|L1.24284|
005bd0  f8cd8000          STR      r8,[sp,#0]
005bd4  f1030218          ADD      r2,r3,#0x18
005bd8  f1020118          ADD      r1,r2,#0x18
005bdc  f1010018          ADD      r0,r1,#0x18
005be0  f7fffffe          BL       show_mess
                  |L1.23524|
;;;9649   					"    ЗАБЛОКИРОВАН    ",
;;;9650   					"     НЕИСПРАВНА     ",
;;;9651   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;9652   					5000);
;;;9653   		}
;;;9654   	if(sk_stat[0]==1)
005be4  7830              LDRB     r0,[r6,#0]  ; sk_stat
005be6  2801              CMP      r0,#1
005be8  d106              BNE      |L1.23544|
;;;9655   		{
;;;9656   		hv_vz_stat=hvsWRK;
005bea  f88a9000          STRB     r9,[r10,#0]
;;;9657   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005bee  2105              MOVS     r1,#5
005bf0  f44f70b4          MOV      r0,#0x168
005bf4  f7fffffe          BL       lc640_write
                  |L1.23544|
;;;9658   		}
;;;9659   	}
;;;9660   
;;;9661   if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
005bf8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005bfc  2808              CMP      r0,#8
005bfe  d123              BNE      |L1.23624|
;;;9662   	{
;;;9663   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005c00  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005c02  2808              CMP      r0,#8
005c04  d101              BNE      |L1.23562|
005c06  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005c08  b900              CBNZ     r0,|L1.23564|
                  |L1.23562|
;;;9664   		{
;;;9665   		hv_vz_stat_cnt=10;
005c0a  8027              STRH     r7,[r4,#0]
                  |L1.23564|
;;;9666   		}
;;;9667   	hv_vz_stat_cnt--;
005c0c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005c0e  f1a00001          SUB      r0,r0,#1
005c12  b200              SXTH     r0,r0
005c14  8020              STRH     r0,[r4,#0]
;;;9668   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005c16  280a              CMP      r0,#0xa
005c18  d001              BEQ      |L1.23582|
005c1a  2809              CMP      r0,#9
005c1c  d10a              BNE      |L1.23604|
                  |L1.23582|
;;;9669   		{
;;;9670   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005c1e  4bb0              LDR      r3,|L1.24288|
005c20  f8cd8000          STR      r8,[sp,#0]
005c24  f2a35274          SUB      r2,r3,#0x574
005c28  f1020118          ADD      r1,r2,#0x18
005c2c  f2a150dc          SUB      r0,r1,#0x5dc
005c30  f7fffffe          BL       show_mess
                  |L1.23604|
;;;9671   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;9672   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;9673   					"    ТУМБЛЕРА!!!     ",
;;;9674   					5000);
;;;9675   		}
;;;9676   	if(sk_stat[1]==1)
005c34  7870              LDRB     r0,[r6,#1]  ; sk_stat
005c36  2801              CMP      r0,#1
005c38  d106              BNE      |L1.23624|
;;;9677   		{
;;;9678   		hv_vz_stat=hvsWRK;
005c3a  f88a9000          STRB     r9,[r10,#0]
;;;9679   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005c3e  2105              MOVS     r1,#5
005c40  f44f70b4          MOV      r0,#0x168
005c44  f7fffffe          BL       lc640_write
                  |L1.23624|
;;;9680   		}
;;;9681   	}
;;;9682   if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
005c48  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005c4c  2809              CMP      r0,#9
005c4e  d123              BNE      |L1.23704|
;;;9683   	{
;;;9684   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005c50  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005c52  2809              CMP      r0,#9
005c54  d101              BNE      |L1.23642|
005c56  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005c58  b900              CBNZ     r0,|L1.23644|
                  |L1.23642|
;;;9685   		{
;;;9686   		hv_vz_stat_cnt=10;
005c5a  8027              STRH     r7,[r4,#0]
                  |L1.23644|
;;;9687   		}
;;;9688   	hv_vz_stat_cnt--;
005c5c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005c5e  f1a00001          SUB      r0,r0,#1
005c62  b200              SXTH     r0,r0
005c64  8020              STRH     r0,[r4,#0]
;;;9689   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005c66  280a              CMP      r0,#0xa
005c68  d001              BEQ      |L1.23662|
005c6a  2809              CMP      r0,#9
005c6c  d109              BNE      |L1.23682|
                  |L1.23662|
;;;9690   		{
;;;9691   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
005c6e  4b91              LDR      r3,|L1.24244|
005c70  a291              ADR      r2,|L1.24248|
005c72  f2a351f4          SUB      r1,r3,#0x5f4
005c76  f2016024          ADD      r0,r1,#0x624
005c7a  f8cd8000          STR      r8,[sp,#0]
005c7e  f7fffffe          BL       show_mess
                  |L1.23682|
;;;9692   					"      ТУМБЛЕР       ",
;;;9693   					"   ВЫРАВНИВАЮЩИЙ    ",
;;;9694   					"       ЗАРЯД        ",
;;;9695   					5000);
;;;9696   		}
;;;9697   	if(sk_stat[1]==0)
005c82  7870              LDRB     r0,[r6,#1]  ; sk_stat
005c84  b940              CBNZ     r0,|L1.23704|
;;;9698   		{
;;;9699   		hv_vz_stat=hvsOFF;
005c86  f88ab000          STRB     r11,[r10,#0]
;;;9700   		lc640_write(EE_HV_VZ_STAT,hvsOFF);
005c8a  2100              MOVS     r1,#0
005c8c  f44f70b4          MOV      r0,#0x168
005c90  f7fffffe          BL       lc640_write
;;;9701   		vz_stop();
005c94  f7fffffe          BL       vz_stop
                  |L1.23704|
;;;9702   
;;;9703   		}
;;;9704   	}
;;;9705   hv_vz_stat_old=hv_vz_stat;
005c98  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005c9c  7028              STRB     r0,[r5,#0]
;;;9706   /*
;;;9707   if(speedChIsOn)
;;;9708   	{
;;;9709   	speedChTimeCnt++;
;;;9710   	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;9711   		{
;;;9712   		speedChIsOn=0;
;;;9713   		}
;;;9714   	if(speedChrgBlckStat)
;;;9715   		{
;;;9716   		speedChIsOn=0;
;;;9717   		speedChTimeCnt=0;
;;;9718   		}
;;;9719   	}
;;;9720   
;;;9721   
;;;9722   
;;;9723   if(speedChrgAvtEn)
;;;9724   	{
;;;9725   	if(!speedChIsOn)
;;;9726   		{
;;;9727   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;9728   			{
;;;9729   			speedChIsOn=1;
;;;9730   			}
;;;9731   		}
;;;9732   	}
;;;9733   
;;;9734   
;;;9735   
;;;9736   if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;9737   else
;;;9738   	{
;;;9739   	speedChrgBlckStat=0;
;;;9740   	if(speedChrgBlckSrc==1)
;;;9741   		{
;;;9742   		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;9743   		}
;;;9744   	else if(speedChrgBlckSrc==2)
;;;9745   		{
;;;9746   		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;9747   		}
;;;9748   	}
;;;9749   
;;;9750   
;;;9751   if(speedChrgBlckStat==1)
;;;9752   	{
;;;9753   
;;;9754   	//speedChargeStartStop();
;;;9755   
;;;9756   	speedChrgShowCnt++;
;;;9757   	if(speedChrgShowCnt>=30)	
;;;9758   		{
;;;9759   		speedChrgShowCnt=0;
;;;9760   		show_mess(	"     УСКОРЕННЫЙ     ",
;;;9761   					"       ЗАРЯД        ",
;;;9762   					"     ЗАПРЕЩЕН!!!    ",
;;;9763   					"                    ",
;;;9764   					5000);
;;;9765   		}
;;;9766   	}
;;;9767   else speedChrgShowCnt=0;
;;;9768   
;;;9769   */
;;;9770   }
005c9e  e609              B        |L1.22708|
;;;9771   
                          ENDP

                  numOfForvardBps_hndl PROC
;;;9788   //-----------------------------------------------
;;;9789   void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
005ca0  e92d41f0          PUSH     {r4-r8,lr}
;;;9790   {
;;;9791   
;;;9792   numOfForvardBps_old=numOfForvardBps;
005ca4  4c8f              LDR      r4,|L1.24292|
005ca6  7f60              LDRB     r0,[r4,#0x1d]  ; numOfForvardBps
005ca8  77a0              STRB     r0,[r4,#0x1e]
;;;9793   
;;;9794   numOfForvardBps=0;
005caa  f04f0500          MOV      r5,#0
005cae  7765              STRB     r5,[r4,#0x1d]
;;;9795   
;;;9796   //FORVARDBPSCHHOUR=10;
;;;9797   
;;;9798   if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
005cb0  4e8d              LDR      r6,|L1.24296|
005cb2  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
005cb6  2800              CMP      r0,#0
005cb8  dd02              BLE      |L1.23744|
005cba  f5b07ffa          CMP      r0,#0x1f4
005cbe  dd02              BLE      |L1.23750|
                  |L1.23744|
;;;9799   	{
;;;9800   	FORVARDBPSCHHOUR=0;
005cc0  8035              STRH     r5,[r6,#0]
                  |L1.23746|
;;;9801   	return;
;;;9802   	}
;;;9803   
;;;9804   numOfForvardBps_minCnt++;
;;;9805   
;;;9806   
;;;9807   if(numOfForvardBps_minCnt>=60)
;;;9808   	{
;;;9809   	numOfForvardBps_minCnt=0;
;;;9810   	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;9811   	numOfForvardBps_hourCnt++;
;;;9812   	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;9813   		{
;;;9814   		numOfForvardBps_hourCnt=0;
;;;9815   		}
;;;9816   	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;9817   	}
;;;9818   
;;;9819   numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;9820   
;;;9821   //if(numOfForvardBps)
;;;9822   //numOfForvardBps_old=numOfForvardBps; 
;;;9823   }
005cc2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.23750|
005cc6  7fe0              LDRB     r0,[r4,#0x1f]         ;9804  ; numOfForvardBps_minCnt
005cc8  f1000001          ADD      r0,r0,#1              ;9804
005ccc  b2c0              UXTB     r0,r0                 ;9804
005cce  77e0              STRB     r0,[r4,#0x1f]         ;9804
005cd0  283c              CMP      r0,#0x3c              ;9807
005cd2  d31a              BCC      |L1.23818|
005cd4  77e5              STRB     r5,[r4,#0x1f]         ;9809
005cd6  f44f7794          MOV      r7,#0x128             ;9810
005cda  4638              MOV      r0,r7                 ;9810
005cdc  f7fffffe          BL       lc640_read_int
005ce0  f1000001          ADD      r0,r0,#1              ;9811
005ce4  b200              SXTH     r0,r0                 ;9811
005ce6  f8a40070          STRH     r0,[r4,#0x70]         ;9811
005cea  4a80              LDR      r2,|L1.24300|
005cec  f9b61000          LDRSH    r1,[r6,#0]            ;9812  ; FORVARDBPSCHHOUR
005cf0  f9b22000          LDRSH    r2,[r2,#0]            ;9812  ; NUMIST
005cf4  fb01f102          MUL      r1,r1,r2              ;9812
005cf8  4281              CMP      r1,r0                 ;9812
005cfa  dc01              BGT      |L1.23808|
005cfc  f8a45070          STRH     r5,[r4,#0x70]         ;9814
                  |L1.23808|
005d00  f9b41070          LDRSH    r1,[r4,#0x70]         ;9816  ; numOfForvardBps_hourCnt
005d04  4638              MOV      r0,r7                 ;9816
005d06  f7fffffe          BL       lc640_write_int
                  |L1.23818|
005d0a  f9b40070          LDRSH    r0,[r4,#0x70]         ;9819  ; numOfForvardBps_hourCnt
005d0e  f9b61000          LDRSH    r1,[r6,#0]            ;9819  ; FORVARDBPSCHHOUR
005d12  fb90f0f1          SDIV     r0,r0,r1              ;9819
005d16  7760              STRB     r0,[r4,#0x1d]         ;9819
005d18  e7d3              B        |L1.23746|
;;;9824   
                          ENDP

                  numOfForvardBps_init PROC
;;;9825   //-----------------------------------------------
;;;9826   void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
005d1a  b510              PUSH     {r4,lr}
;;;9827   {									//Должна вызываться при изменении кол-ва источников в структуре
;;;9828   lc640_write_int(EE_FORVBPSHOURCNT,0);
005d1c  2100              MOVS     r1,#0
005d1e  f44f7094          MOV      r0,#0x128
005d22  f7fffffe          BL       lc640_write_int
;;;9829   numOfForvardBps_minCnt=58;
005d26  496f              LDR      r1,|L1.24292|
005d28  f04f003a          MOV      r0,#0x3a
005d2c  77c8              STRB     r0,[r1,#0x1f]
;;;9830   }
005d2e  bd10              POP      {r4,pc}
;;;9831   
                          ENDP

                  outVoltContrHndl PROC
;;;9832   //-----------------------------------------------
;;;9833   void outVoltContrHndl(void)
005d30  b570              PUSH     {r4-r6,lr}
;;;9834   { 
;;;9835   if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
005d32  4c6f              LDR      r4,|L1.24304|
005d34  486f              LDR      r0,|L1.24308|
;;;9836   	{
;;;9837   	outVoltContrHndlCnt_=0;
;;;9838   	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
005d36  4a70              LDR      r2,|L1.24312|
005d38  f9b41000          LDRSH    r1,[r4,#0]            ;9835  ; load_U
005d3c  f9b06000          LDRSH    r6,[r0,#0]            ;9835  ; U_OUT_KONTR_MAX
005d40  2500              MOVS     r5,#0                 ;9837
005d42  f9b20000          LDRSH    r0,[r2,#0]
005d46  4b6d              LDR      r3,|L1.24316|
005d48  42b1              CMP      r1,r6                 ;9835
005d4a  dc04              BGT      |L1.23894|
005d4c  4e6c              LDR      r6,|L1.24320|
005d4e  f9b66000          LDRSH    r6,[r6,#0]            ;9835  ; U_OUT_KONTR_MIN
005d52  42b1              CMP      r1,r6                 ;9835
005d54  da0f              BGE      |L1.23926|
                  |L1.23894|
005d56  801d              STRH     r5,[r3,#0]            ;9837
005d58  496a              LDR      r1,|L1.24324|
005d5a  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
005d5e  4288              CMP      r0,r1
005d60  da1b              BGE      |L1.23962|
;;;9839   		{
;;;9840   		outVoltContrHndlCnt++;
005d62  f1000001          ADD      r0,r0,#1
005d66  b200              SXTH     r0,r0
005d68  8010              STRH     r0,[r2,#0]
;;;9841   		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
005d6a  4288              CMP      r0,r1
005d6c  d115              BNE      |L1.23962|
;;;9842   			{
;;;9843   			avar_uout_hndl(1);
005d6e  2001              MOVS     r0,#1
005d70  f7fffffe          BL       avar_uout_hndl
005d74  e011              B        |L1.23962|
                  |L1.23926|
;;;9844   			}
;;;9845   		}
;;;9846   	}
;;;9847   else
;;;9848   	{
;;;9849   	if(outVoltContrHndlCnt)
005d76  b180              CBZ      r0,|L1.23962|
;;;9850   		{
;;;9851   		if(outVoltContrHndlCnt_<5)
005d78  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
005d7c  2805              CMP      r0,#5
005d7e  da0c              BGE      |L1.23962|
;;;9852   			{
;;;9853   			outVoltContrHndlCnt_++;
005d80  f1000001          ADD      r0,r0,#1
005d84  b200              SXTH     r0,r0
005d86  8018              STRH     r0,[r3,#0]
;;;9854   			if(outVoltContrHndlCnt_>=5)
005d88  2805              CMP      r0,#5
005d8a  db06              BLT      |L1.23962|
;;;9855   				{
;;;9856   				outVoltContrHndlCnt=0;
005d8c  8015              STRH     r5,[r2,#0]
;;;9857   				if(uout_av)avar_uout_hndl(0);
005d8e  485e              LDR      r0,|L1.24328|
005d90  7800              LDRB     r0,[r0,#0]  ; uout_av
005d92  b110              CBZ      r0,|L1.23962|
005d94  2000              MOVS     r0,#0
005d96  f7fffffe          BL       avar_uout_hndl
                  |L1.23962|
;;;9858   				}
;;;9859   			}
;;;9860   		}
;;;9861   	}
;;;9862   
;;;9863   if (load_U<(USIGN*10)) 
005d9a  485c              LDR      r0,|L1.24332|
005d9c  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
005da0  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
005da4  eb000080          ADD      r0,r0,r0,LSL #2
005da8  ebb10f40          CMP      r1,r0,LSL #1
005dac  da0b              BGE      |L1.24006|
;;;9864   	{
;;;9865   	if(!bSILENT)
005dae  4858              LDR      r0,|L1.24336|
005db0  6800              LDR      r0,[r0,#0]  ; bSILENT
005db2  2800              CMP      r0,#0
005db4  d107              BNE      |L1.24006|
;;;9866   		{
;;;9867   		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
005db6  e8bd4070          POP      {r4-r6,lr}
005dba  2314              MOVS     r3,#0x14
005dbc  2201              MOVS     r2,#1
005dbe  2172              MOVS     r1,#0x72
005dc0  20d2              MOVS     r0,#0xd2
005dc2  f7ffbffe          B.W      mess_send
                  |L1.24006|
;;;9868   		}
;;;9869   
;;;9870   	//bU_BAT2REL_AV_BAT=1;
;;;9871   	}
;;;9872   
;;;9873   
;;;9874   }
005dc6  bd70              POP      {r4-r6,pc}
;;;9875   
                          ENDP

                  vent_resurs_hndl PROC
;;;9876   //-----------------------------------------------
;;;9877   void vent_resurs_hndl(void)
005dc8  e92d47f0          PUSH     {r4-r10,lr}
;;;9878   {
;;;9879   char i;
;;;9880   char crc_in,crc_eval;
;;;9881   
;;;9882   for(i=0;i<NUMIST;i++)
005dcc  f04f0200          MOV      r2,#0
;;;9883   	{
;;;9884   	if((bps[i]._buff[7]&0xc0)==0x00)
;;;9885   		{
;;;9886   		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;9887   		}
;;;9888   	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;9889   		{
;;;9890   		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;9891   		}
;;;9892   	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;9893   		{
;;;9894   		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;9895   		}
;;;9896   	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;9897   		{
;;;9898   		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;9899   		}
;;;9900   	crc_in=0;
;;;9901   	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;9902   	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;9903   	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;9904   	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;9905   
;;;9906   	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;9907   	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;9908   	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;9909   	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;9910   
;;;9911   	if(crc_eval==crc_in)
;;;9912   		{
;;;9913   		unsigned short temp_US;
;;;9914   		temp_US=0;
;;;9915   
;;;9916   		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;9917   		temp_US<<=4;
;;;9918   		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;9919   		temp_US<<=4;
;;;9920   		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;9921   		temp_US<<=4;
;;;9922   		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;9923   
;;;9924   		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;9925   		}
;;;9926   
;;;9927   	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
005dd0  4850              LDR      r0,|L1.24340|
005dd2  f8dfc144          LDR      r12,|L1.24344|
005dd6  f9b06000          LDRSH    r6,[r0,#0]
005dda  4844              LDR      r0,|L1.24300|
005ddc  f9b07000          LDRSH    r7,[r0,#0]            ;9882
005de0  e0a3              B        |L1.24362|
                  |L1.24034|
005de2  ebc200c2          RSB      r0,r2,r2,LSL #3       ;9884
005de6  eb001002          ADD      r0,r0,r2,LSL #4       ;9884
005dea  eb0c0080          ADD      r0,r12,r0,LSL #2      ;9884
005dee  7b41              LDRB     r1,[r0,#0xd]          ;9884
005df0  098b              LSRS     r3,r1,#6              ;9884
005df2  d006              BEQ      |L1.24066|
005df4  2301              MOVS     r3,#1                 ;9888
005df6  ebb31f91          CMP      r3,r1,LSR #6          ;9888
005dfa  d105              BNE      |L1.24072|
005dfc  f8801055          STRB     r1,[r0,#0x55]         ;9890
005e00  e00f              B        |L1.24098|
                  |L1.24066|
005e02  f8801054          STRB     r1,[r0,#0x54]         ;9886
005e06  e00c              B        |L1.24098|
                  |L1.24072|
005e08  2302              MOVS     r3,#2                 ;9892
005e0a  ebb31f91          CMP      r3,r1,LSR #6          ;9892
005e0e  d102              BNE      |L1.24086|
005e10  f8801056          STRB     r1,[r0,#0x56]         ;9894
005e14  e005              B        |L1.24098|
                  |L1.24086|
005e16  2303              MOVS     r3,#3                 ;9896
005e18  ebb31f91          CMP      r3,r1,LSR #6          ;9896
005e1c  d101              BNE      |L1.24098|
005e1e  f8801057          STRB     r1,[r0,#0x57]         ;9898
                  |L1.24098|
005e22  f8101f54          LDRB     r1,[r0,#0x54]!        ;9901
005e26  f3c11401          UBFX     r4,r1,#4,#2           ;9901
005e2a  7843              LDRB     r3,[r0,#1]            ;9902
005e2c  f0030530          AND      r5,r3,#0x30           ;9902
005e30  ea440495          ORR      r4,r4,r5,LSR #2       ;9902
005e34  f8909002          LDRB     r9,[r0,#2]            ;9903
005e38  f0090830          AND      r8,r9,#0x30           ;9903
005e3c  ea480804          ORR      r8,r8,r4              ;9903
005e40  78c5              LDRB     r5,[r0,#3]            ;9904
005e42  f1a00054          SUB      r0,r0,#0x54           ;9904
005e46  f0050430          AND      r4,r5,#0x30           ;9904
005e4a  ea480884          ORR      r8,r8,r4,LSL #2       ;9904
005e4e  f001010f          AND      r1,r1,#0xf            ;9906
005e52  f003040f          AND      r4,r3,#0xf            ;9907
005e56  ea840a01          EOR      r10,r4,r1             ;9907
005e5a  f009030f          AND      r3,r9,#0xf            ;9908
005e5e  ea83090a          EOR      r9,r3,r10             ;9908
005e62  f005050f          AND      r5,r5,#0xf            ;9909
005e66  ea850909          EOR      r9,r5,r9              ;9909
005e6a  45c1              CMP      r9,r8                 ;9911
005e6c  d113              BNE      |L1.24214|
005e6e  ea4f1505          LSL      r5,r5,#4              ;9917
005e72  ea430305          ORR      r3,r3,r5              ;9918
005e76  ea4f1303          LSL      r3,r3,#4              ;9919
005e7a  ea440403          ORR      r4,r4,r3              ;9920
005e7e  ea4f5304          LSL      r3,r4,#20             ;9921
005e82  ea4f4313          LSR      r3,r3,#16             ;9921
005e86  ea410103          ORR      r1,r1,r3              ;9922
005e8a  f8b03058          LDRH     r3,[r0,#0x58]         ;9924
005e8e  428b              CMP      r3,r1                 ;9924
005e90  d001              BEQ      |L1.24214|
005e92  f8a01058          STRH     r1,[r0,#0x58]         ;9924
                  |L1.24214|
005e96  f8b01058          LDRH     r1,[r0,#0x58]
005e9a  eb060386          ADD      r3,r6,r6,LSL #2
005e9e  ebb10f43          CMP      r1,r3,LSL #1
005ea2  dd3b              BLE      |L1.24348|
005ea4  2e00              CMP      r6,#0
005ea6  dd39              BLE      |L1.24348|
;;;9928   		{
;;;9929   		bps[i]._av|=(1<<4);
005ea8  7841              LDRB     r1,[r0,#1]
005eaa  f0410110          ORR      r1,r1,#0x10
005eae  7041              STRB     r1,[r0,#1]
005eb0  e038              B        |L1.24356|
005eb2  0000              DCW      0x0000
                  |L1.24244|
                          DCD      ||.text||+0xf58
                  |L1.24248|
005eb8  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
005ebc  dbd0c0c2
005ec0  cdc8c2c0
005ec4  ded9c8c9
005ec8  20202020          DCB      "    ",0
005ecc  00      
005ecd  00                DCB      0
005ece  00                DCB      0
005ecf  00                DCB      0
                  |L1.24272|
                          DCD      hv_vz_wrk_cnt
                  |L1.24276|
                          DCD      hv_vz_up_cnt
                  |L1.24280|
                          DCD      VZ_HR
                  |L1.24284|
                          DCD      ||.text||+0x8d4
                  |L1.24288|
                          DCD      ||.text||+0x1454
                  |L1.24292|
                          DCD      ||area_number.25||
                  |L1.24296|
                          DCD      FORVARDBPSCHHOUR
                  |L1.24300|
                          DCD      NUMIST
                  |L1.24304|
                          DCD      load_U
                  |L1.24308|
                          DCD      U_OUT_KONTR_MAX
                  |L1.24312|
                          DCD      outVoltContrHndlCnt
                  |L1.24316|
                          DCD      outVoltContrHndlCnt_
                  |L1.24320|
                          DCD      U_OUT_KONTR_MIN
                  |L1.24324|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.24328|
                          DCD      uout_av
                  |L1.24332|
                          DCD      USIGN
                  |L1.24336|
                          DCD      bSILENT
                  |L1.24340|
                          DCD      TVENTMAX
                  |L1.24344|
                          DCD      bps
                  |L1.24348|
;;;9930   		}
;;;9931   	else bps[i]._av&=~(1<<4);
005f1c  7841              LDRB     r1,[r0,#1]
005f1e  f0210110          BIC      r1,r1,#0x10
005f22  7041              STRB     r1,[r0,#1]
                  |L1.24356|
005f24  f1020201          ADD      r2,r2,#1              ;9882
005f28  b2d2              UXTB     r2,r2                 ;9882
                  |L1.24362|
005f2a  42ba              CMP      r2,r7                 ;9882
005f2c  f6ffaf59          BLT      |L1.24034|
;;;9932   	}
;;;9933   }
005f30  e8bd87f0          POP      {r4-r10,pc}
;;;9934   
                          ENDP

                  vent_hndl PROC
;;;9935   //-----------------------------------------------
;;;9936   void vent_hndl(void)
005f34  e92d4ff0          PUSH     {r4-r11,lr}
;;;9937   {
005f38  b087              SUB      sp,sp,#0x1c
;;;9938   if(RELEVENTSIGN==rvsAKB)
005f3a  48ab              LDR      r0,|L1.25064|
;;;9939   	{
;;;9940   	if(vent_stat==0)
005f3c  4cab              LDR      r4,|L1.25068|
;;;9941   		{
;;;9942   		if	(
;;;9943   			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
005f3e  49ac              LDR      r1,|L1.25072|
;;;9944   			||
;;;9945   			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;9946   			)
;;;9947   			{
;;;9948   			vent_stat=1;
;;;9949   			}
;;;9950   		}
;;;9951   	else if(vent_stat==1)
;;;9952   		{
;;;9953   		if	(
;;;9954   			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
005f40  4aac              LDR      r2,|L1.25076|
005f42  7800              LDRB     r0,[r0,#0]            ;9938  ; RELEVENTSIGN
005f44  f9943000          LDRSB    r3,[r4,#0]            ;9940
005f48  f9b11000          LDRSH    r1,[r1,#0]            ;9943
005f4c  f9b22000          LDRSH    r2,[r2,#0]
005f50  b148              CBZ      r0,|L1.24422|
;;;9955   			&&
;;;9956   			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;9957   			)
;;;9958   			{
;;;9959   			vent_stat=0;
;;;9960   			}
;;;9961   		}
;;;9962   	}
;;;9963   else if(RELEVENTSIGN==rvsBPS)
005f52  2802              CMP      r0,#2
005f54  d03c              BEQ      |L1.24528|
;;;9964   	{
;;;9965   /*	if	(
;;;9966   		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;9967   		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;9968   		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;9969   		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;9970   		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;9971   		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;9972   		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;9973   		)
;;;9974   		{
;;;9975   		vent_stat=1;
;;;9976   		}
;;;9977   	else vent_stat=0;
;;;9978   	*/
;;;9979   
;;;9980   	if	(
;;;9981   		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;9982   		||
;;;9983   		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;9984   		||
;;;9985   		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;9986   		||
;;;9987   		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;9988   		||
;;;9989   		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;9990   		||
;;;9991   		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;9992   		||
;;;9993   		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;9994   		||
;;;9995   		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;9996   		)
;;;9997   		{
;;;9998   		vent_stat=1;
;;;9999   		}
;;;10000  	else if(vent_stat==1)
;;;10001  		{
;;;10002  		if	(
;;;10003  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;10004  			&&
;;;10005  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;10006  			&&
;;;10007  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;10008  			&&
;;;10009  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;10010  			&&
;;;10011  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;10012  			&&
;;;10013  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;10014  			&&
;;;10015  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;10016  			&&
;;;10017  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;10018  			)
;;;10019  			{
;;;10020  			vent_stat=0;
;;;10021  			}
;;;10022  		}
;;;10023  	}
;;;10024  else if(RELEVENTSIGN==rvsEXT)
005f56  2801              CMP      r0,#1
005f58  d07e              BEQ      |L1.24664|
;;;10025  	{
;;;10026  	if	(
;;;10027  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;10028  		||
;;;10029  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;10030  		||
;;;10031  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;10032  		)
;;;10033  		{
;;;10034  		vent_stat=1;
;;;10035  		}
;;;10036  	else if(vent_stat==1)
;;;10037  		{
;;;10038  		if	(
;;;10039  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;10040  			&&
;;;10041  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;10042  			&&
;;;10043  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;10044  			)
;;;10045  			{
;;;10046  			vent_stat=0;
;;;10047  			}
;;;10048  		}
;;;10049  	}
;;;10050  else vent_stat=1;
005f5a  f04f0001          MOV      r0,#1
005f5e  7020              STRB     r0,[r4,#0]
                  |L1.24416|
;;;10051  }
005f60  b007              ADD      sp,sp,#0x1c
005f62  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.24422|
005f66  4fa4              LDR      r7,|L1.25080|
005f68  f8df8290          LDR      r8,|L1.25084|
005f6c  f9b7000a          LDRSH    r0,[r7,#0xa]          ;9943
005f70  7b3d              LDRB     r5,[r7,#0xc]          ;9943
005f72  f9b76056          LDRSH    r6,[r7,#0x56]         ;9945
005f76  f898c000          LDRB     r12,[r8,#0]           ;9942
005f7a  f8977058          LDRB     r7,[r7,#0x58]         ;9945
005f7e  f8988001          LDRB     r8,[r8,#1]            ;9945
005f82  b12b              CBZ      r3,|L1.24464|
005f84  2b01              CMP      r3,#1                 ;9951
005f86  d1eb              BNE      |L1.24416|
005f88  f1bc0f55          CMP      r12,#0x55             ;9953
005f8c  d115              BNE      |L1.24506|
005f8e  e010              B        |L1.24498|
                  |L1.24464|
005f90  f1bc0f55          CMP      r12,#0x55             ;9942
005f94  d102              BNE      |L1.24476|
005f96  4288              CMP      r0,r1                 ;9943
005f98  dc07              BGT      |L1.24490|
005f9a  b935              CBNZ     r5,|L1.24490|
                  |L1.24476|
005f9c  f1b80f55          CMP      r8,#0x55              ;9945
005fa0  d1de              BNE      |L1.24416|
005fa2  428e              CMP      r6,r1                 ;9945
005fa4  dc01              BGT      |L1.24490|
005fa6  2f00              CMP      r7,#0                 ;9945
005fa8  d0da              BEQ      |L1.24416|
                  |L1.24490|
005faa  f04f0001          MOV      r0,#1                 ;9948
005fae  7020              STRB     r0,[r4,#0]            ;9948
005fb0  e7d6              B        |L1.24416|
                  |L1.24498|
005fb2  4290              CMP      r0,r2                 ;9954
005fb4  dad4              BGE      |L1.24416|
005fb6  2d00              CMP      r5,#0                 ;9954
005fb8  d1d2              BNE      |L1.24416|
                  |L1.24506|
005fba  f1b80f55          CMP      r8,#0x55              ;9956
005fbe  d103              BNE      |L1.24520|
005fc0  4296              CMP      r6,r2                 ;9956
005fc2  dacd              BGE      |L1.24416|
005fc4  2f00              CMP      r7,#0                 ;9956
005fc6  d1cb              BNE      |L1.24416|
                  |L1.24520|
005fc8  f04f0000          MOV      r0,#0                 ;9959
005fcc  7020              STRB     r0,[r4,#0]            ;9959
005fce  e7c7              B        |L1.24416|
                  |L1.24528|
005fd0  4e8c              LDR      r6,|L1.25092|
005fd2  488b              LDR      r0,|L1.25088|
005fd4  6ab5              LDR      r5,[r6,#0x28]         ;9981
005fd6  f9b00000          LDRSH    r0,[r0,#0]            ;9980  ; NUMIST
005fda  78f6              LDRB     r6,[r6,#3]            ;9981
005fdc  b118              CBZ      r0,|L1.24550|
005fde  428d              CMP      r5,r1                 ;9981
005fe0  dc7a              BGT      |L1.24792|
005fe2  2e1e              CMP      r6,#0x1e              ;9981
005fe4  d278              BCS      |L1.24792|
                  |L1.24550|
005fe6  f8dfc21c          LDR      r12,|L1.25092|
005fea  2801              CMP      r0,#1                 ;9983
005fec  f8dc7084          LDR      r7,[r12,#0x84]        ;9983
005ff0  f89cc05f          LDRB     r12,[r12,#0x5f]       ;9983
005ff4  f8cdc018          STR      r12,[sp,#0x18]        ;9983
005ff8  dd06              BLE      |L1.24584|
005ffa  428f              CMP      r7,r1                 ;9983
005ffc  dc6c              BGT      |L1.24792|
005ffe  f8ddc018          LDR      r12,[sp,#0x18]        ;9983
006002  f1bc0f1e          CMP      r12,#0x1e             ;9983
006006  d267              BCS      |L1.24792|
                  |L1.24584|
006008  f8dfc1f8          LDR      r12,|L1.25092|
00600c  2802              CMP      r0,#2                 ;9985
00600e  f8dc80e0          LDR      r8,[r12,#0xe0]        ;9985
006012  f8cd8014          STR      r8,[sp,#0x14]         ;9985
006016  f89cc0bb          LDRB     r12,[r12,#0xbb]       ;9985
00601a  f8cdc010          STR      r12,[sp,#0x10]        ;9985
00601e  dd08              BLE      |L1.24626|
006020  f8ddc014          LDR      r12,[sp,#0x14]        ;9985
006024  458c              CMP      r12,r1                ;9985
006026  dc57              BGT      |L1.24792|
006028  f8ddc010          LDR      r12,[sp,#0x10]        ;9985
00602c  f1bc0f1e          CMP      r12,#0x1e             ;9985
006030  d252              BCS      |L1.24792|
                  |L1.24626|
006032  f8dfc1d0          LDR      r12,|L1.25092|
006036  2803              CMP      r0,#3                 ;9987
006038  f8dc813c          LDR      r8,[r12,#0x13c]       ;9987
00603c  f8cd800c          STR      r8,[sp,#0xc]          ;9987
006040  f89cc117          LDRB     r12,[r12,#0x117]      ;9987
006044  f8cdc008          STR      r12,[sp,#8]           ;9987
006048  dd0a              BLE      |L1.24672|
00604a  f8ddc00c          LDR      r12,[sp,#0xc]         ;9987
00604e  458c              CMP      r12,r1                ;9987
006050  dc42              BGT      |L1.24792|
006052  f8ddc008          LDR      r12,[sp,#8]           ;9987
006056  e000              B        |L1.24666|
                  |L1.24664|
006058  e080              B        |L1.24924|
                  |L1.24666|
00605a  f1bc0f1e          CMP      r12,#0x1e             ;9987
00605e  d23b              BCS      |L1.24792|
                  |L1.24672|
006060  f8df81a0          LDR      r8,|L1.25092|
006064  2804              CMP      r0,#4                 ;9989
006066  f8d8c198          LDR      r12,[r8,#0x198]       ;9989
00606a  f8988173          LDRB     r8,[r8,#0x173]        ;9989
00606e  f8cd8004          STR      r8,[sp,#4]            ;9989
006072  dd06              BLE      |L1.24706|
006074  458c              CMP      r12,r1                ;9989
006076  dc2f              BGT      |L1.24792|
006078  f8dd8004          LDR      r8,[sp,#4]            ;9989
00607c  f1b80f1e          CMP      r8,#0x1e              ;9989
006080  d22a              BCS      |L1.24792|
                  |L1.24706|
006082  f8df9180          LDR      r9,|L1.25092|
006086  2805              CMP      r0,#5                 ;9991
006088  f8d981f4          LDR      r8,[r9,#0x1f4]        ;9991
00608c  f89991cf          LDRB     r9,[r9,#0x1cf]        ;9991
006090  f8cd9000          STR      r9,[sp,#0]            ;9991
006094  dd06              BLE      |L1.24740|
006096  4588              CMP      r8,r1                 ;9991
006098  dc1e              BGT      |L1.24792|
00609a  f8dd9000          LDR      r9,[sp,#0]            ;9991
00609e  f1b90f1e          CMP      r9,#0x1e              ;9991
0060a2  d219              BCS      |L1.24792|
                  |L1.24740|
0060a4  f8dfa15c          LDR      r10,|L1.25092|
0060a8  2806              CMP      r0,#6                 ;9993
0060aa  f89ae22b          LDRB     lr,[r10,#0x22b]       ;9993
0060ae  f8da9250          LDR      r9,[r10,#0x250]       ;9993
0060b2  dd04              BLE      |L1.24766|
0060b4  4589              CMP      r9,r1                 ;9993
0060b6  dc0f              BGT      |L1.24792|
0060b8  f1be0f1e          CMP      lr,#0x1e              ;9993
0060bc  d20c              BCS      |L1.24792|
                  |L1.24766|
0060be  f8dfb144          LDR      r11,|L1.25092|
0060c2  2807              CMP      r0,#7                 ;9995
0060c4  f8dba2ac          LDR      r10,[r11,#0x2ac]      ;9995
0060c8  f89bb287          LDRB     r11,[r11,#0x287]      ;9995
0060cc  dd08              BLE      |L1.24800|
0060ce  458a              CMP      r10,r1                ;9995
0060d0  dc02              BGT      |L1.24792|
0060d2  f1bb0f1e          CMP      r11,#0x1e             ;9995
0060d6  d303              BCC      |L1.24800|
                  |L1.24792|
0060d8  f04f0001          MOV      r0,#1                 ;9998
0060dc  7020              STRB     r0,[r4,#0]            ;9998
                  |L1.24798|
0060de  e73f              B        |L1.24416|
                  |L1.24800|
0060e0  2b01              CMP      r3,#1                 ;10000
0060e2  d1fc              BNE      |L1.24798|
0060e4  b118              CBZ      r0,|L1.24814|
0060e6  4295              CMP      r5,r2                 ;10003
0060e8  daf9              BGE      |L1.24798|
0060ea  2e0a              CMP      r6,#0xa               ;10003
0060ec  d2f7              BCS      |L1.24798|
                  |L1.24814|
0060ee  2802              CMP      r0,#2                 ;10005
0060f0  db04              BLT      |L1.24828|
0060f2  4297              CMP      r7,r2                 ;10005
0060f4  daf3              BGE      |L1.24798|
0060f6  9906              LDR      r1,[sp,#0x18]         ;10005
0060f8  290a              CMP      r1,#0xa               ;10005
0060fa  d2f0              BCS      |L1.24798|
                  |L1.24828|
0060fc  2803              CMP      r0,#3                 ;10007
0060fe  db05              BLT      |L1.24844|
006100  9905              LDR      r1,[sp,#0x14]         ;10007
006102  4291              CMP      r1,r2                 ;10007
006104  daeb              BGE      |L1.24798|
006106  9904              LDR      r1,[sp,#0x10]         ;10007
006108  290a              CMP      r1,#0xa               ;10007
00610a  d2e8              BCS      |L1.24798|
                  |L1.24844|
00610c  2804              CMP      r0,#4                 ;10009
00610e  db05              BLT      |L1.24860|
006110  9903              LDR      r1,[sp,#0xc]          ;10009
006112  4291              CMP      r1,r2                 ;10009
006114  dae3              BGE      |L1.24798|
006116  9902              LDR      r1,[sp,#8]            ;10009
006118  290a              CMP      r1,#0xa               ;10009
00611a  d2e0              BCS      |L1.24798|
                  |L1.24860|
00611c  2805              CMP      r0,#5                 ;10011
00611e  db04              BLT      |L1.24874|
006120  4594              CMP      r12,r2                ;10011
006122  dadc              BGE      |L1.24798|
006124  9901              LDR      r1,[sp,#4]            ;10011
006126  290a              CMP      r1,#0xa               ;10011
006128  d2d9              BCS      |L1.24798|
                  |L1.24874|
00612a  2806              CMP      r0,#6                 ;10013
00612c  db04              BLT      |L1.24888|
00612e  4590              CMP      r8,r2                 ;10013
006130  dad5              BGE      |L1.24798|
006132  9900              LDR      r1,[sp,#0]            ;10013
006134  290a              CMP      r1,#0xa               ;10013
006136  d2d2              BCS      |L1.24798|
                  |L1.24888|
006138  2807              CMP      r0,#7                 ;10015
00613a  db04              BLT      |L1.24902|
00613c  4591              CMP      r9,r2                 ;10015
00613e  dace              BGE      |L1.24798|
006140  f1be0f0a          CMP      lr,#0xa               ;10015
006144  d2cb              BCS      |L1.24798|
                  |L1.24902|
006146  2808              CMP      r0,#8                 ;10017
006148  db04              BLT      |L1.24916|
00614a  4592              CMP      r10,r2                ;10017
00614c  dac7              BGE      |L1.24798|
00614e  f1bb0f0a          CMP      r11,#0xa              ;10017
006152  d2c4              BCS      |L1.24798|
                  |L1.24916|
006154  f04f0000          MOV      r0,#0                 ;10020
006158  7020              STRB     r0,[r4,#0]            ;10020
                  |L1.24922|
00615a  e701              B        |L1.24416|
                  |L1.24924|
00615c  482a              LDR      r0,|L1.25096|
00615e  4d2b              LDR      r5,|L1.25100|
006160  4e2b              LDR      r6,|L1.25104|
006162  f9b00000          LDRSH    r0,[r0,#0]            ;10026  ; NUMDT
006166  f9b55000          LDRSH    r5,[r5,#0]            ;10027
00616a  7836              LDRB     r6,[r6,#0]            ;10027
00616c  b110              CBZ      r0,|L1.24948|
00616e  428d              CMP      r5,r1                 ;10027
006170  dc1d              BGT      |L1.25006|
006172  b9e6              CBNZ     r6,|L1.25006|
                  |L1.24948|
006174  4f25              LDR      r7,|L1.25100|
006176  f8dfc098          LDR      r12,|L1.25104|
00617a  2801              CMP      r0,#1                 ;10029
00617c  f9b77002          LDRSH    r7,[r7,#2]            ;10029
006180  f89cc001          LDRB     r12,[r12,#1]          ;10029
006184  dd04              BLE      |L1.24976|
006186  428f              CMP      r7,r1                 ;10029
006188  dc11              BGT      |L1.25006|
00618a  f1bc0f00          CMP      r12,#0                ;10029
00618e  d10e              BNE      |L1.25006|
                  |L1.24976|
006190  f8df8078          LDR      r8,|L1.25100|
006194  f8df9078          LDR      r9,|L1.25104|
006198  2802              CMP      r0,#2                 ;10031
00619a  f9b88004          LDRSH    r8,[r8,#4]            ;10031
00619e  f8999002          LDRB     r9,[r9,#2]            ;10031
0061a2  dd08              BLE      |L1.25014|
0061a4  4588              CMP      r8,r1                 ;10031
0061a6  dc02              BGT      |L1.25006|
0061a8  f1b90f00          CMP      r9,#0                 ;10031
0061ac  d003              BEQ      |L1.25014|
                  |L1.25006|
0061ae  f04f0001          MOV      r0,#1                 ;10034
0061b2  7020              STRB     r0,[r4,#0]            ;10034
0061b4  e6d4              B        |L1.24416|
                  |L1.25014|
0061b6  2b01              CMP      r3,#1                 ;10036
0061b8  d191              BNE      |L1.24798|
0061ba  b118              CBZ      r0,|L1.25028|
0061bc  4295              CMP      r5,r2                 ;10039
0061be  da8e              BGE      |L1.24798|
0061c0  2e00              CMP      r6,#0                 ;10039
0061c2  d18c              BNE      |L1.24798|
                  |L1.25028|
0061c4  2802              CMP      r0,#2                 ;10041
0061c6  db04              BLT      |L1.25042|
0061c8  4297              CMP      r7,r2                 ;10041
0061ca  da88              BGE      |L1.24798|
0061cc  f1bc0f00          CMP      r12,#0                ;10041
0061d0  d185              BNE      |L1.24798|
                  |L1.25042|
0061d2  2803              CMP      r0,#3                 ;10043
0061d4  db04              BLT      |L1.25056|
0061d6  4590              CMP      r8,r2                 ;10043
0061d8  dabf              BGE      |L1.24922|
0061da  f1b90f00          CMP      r9,#0                 ;10043
0061de  d1bc              BNE      |L1.24922|
                  |L1.25056|
0061e0  f04f0000          MOV      r0,#0                 ;10046
0061e4  7020              STRB     r0,[r4,#0]            ;10046
0061e6  e6bb              B        |L1.24416|
;;;10052  
                          ENDP

                  |L1.25064|
                          DCD      RELEVENTSIGN
                  |L1.25068|
                          DCD      ||area_number.25||
                  |L1.25072|
                          DCD      TVENTON
                  |L1.25076|
                          DCD      TVENTOFF
                  |L1.25080|
                          DCD      bat
                  |L1.25084|
                          DCD      BAT_IS_ON
                  |L1.25088|
                          DCD      NUMIST
                  |L1.25092|
                          DCD      bps
                  |L1.25096|
                          DCD      NUMDT
                  |L1.25100|
                          DCD      t_ext
                  |L1.25104|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;290    //-----------------------------------------------
;;;291    void ke_start(char in)
000000  4902              LDR      r1,|L2.12|
;;;292    {          
000002  f24060f9          MOV      r0,#0x6f9
;;;293    ke_start_stat=(enum_ke_start_stat)0;		 
000006  f8a10048          STRH     r0,[r1,#0x48]
00000a  4770              BX       lr
;;;294    /*
;;;295    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;296    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;297    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;298    #endif
;;;299    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;300    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;301    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;302    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;303    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;304    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;305    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;306    else */
;;;307    	{
;;;308    
;;;309    	ke_start_stat=kssYES;
;;;310    
;;;311    	spc_stat=spcKE;
;;;312    	__ee_spc_stat=spcKE;
;;;313    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
;;;314    	
;;;315    	spc_bat=0;
;;;316    	__ee_spc_bat=0;
;;;317    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
;;;318    
;;;319    	bat[0]._zar_cnt_ke=0;
;;;320    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
;;;321    
;;;322    	bat[0]._time_min_cnt_ke=0;
;;;323    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
;;;324    
;;;325    	
;;;326    	spc_phase=0;
;;;327    	__ee_spc_phase=0;
;;;328    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
;;;329    
;;;330    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;331    
;;;332    		{					
;;;333    		signed short temp_temp;
;;;334    		signed char temp;
;;;335    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
;;;336    		    
;;;337    		temp=LPC_RTC->YEAR;
;;;338    		gran_char(&temp,1,99);
;;;339    		*((char*)(&(ke_date[0])))=temp;
;;;340    			
;;;341    		temp=LPC_RTC->MONTH;
;;;342    		gran_char(&temp,1,12);
;;;343    		*(((char*)(&(ke_date[0])))+1)=temp;
;;;344    		
;;;345    		temp=LPC_RTC->DOM;
;;;346    		gran_char(&temp,1,31);
;;;347    		*(((char*)(&(ke_date[0])))+2)=temp;			
;;;348    				
;;;349    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
;;;350    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
;;;351    
;;;352    		temp=LPC_RTC->HOUR;
;;;353    		gran_char(&temp,0,23);
;;;354    		*((char*)(&(ke_date[1])))=temp;
;;;355                   
;;;356    		temp=LPC_RTC->MIN;
;;;357    		gran_char(&temp,0,59);
;;;358    		*(((char*)(&(ke_date[1])))+1)=temp;
;;;359    	          
;;;360    		temp=LPC_RTC->SEC;
;;;361    		gran_char(&temp,0,59);
;;;362    		*(((char*)(&(ke_date[1])))+2)=temp;
;;;363    			
;;;364    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;365    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
;;;366    		}
;;;367    	bat_hndl_zvu_ke_init=1;
;;;368    	}
;;;369    }
;;;370    #endif
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;290    //-----------------------------------------------
;;;291    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;292    {          
000004  4c80              LDR      r4,|L3.520|
;;;293    ke_start_stat=(enum_ke_start_stat)0;		 
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1
;;;294    /*
;;;295    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;296    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;297    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;298    #endif
;;;299    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;300    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;301    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;302    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;303    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;304    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;305    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;306    else */
;;;307    	{
;;;308    
;;;309    	ke_start_stat=kssYES;
00000c  b200              SXTH     r0,r0
00000e  f7fffffe          BL       abs_pal
;;;310    
;;;311    	spc_stat=spcKE;
000012  1da5              ADDS     r5,r4,#6
000014  8028              STRH     r0,[r5,#0]
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;312    	__ee_spc_stat=spcKE;
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;313    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;314    	
;;;315    	spc_bat=0;
000026  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
;;;316    	__ee_spc_bat=0;
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
;;;317    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]
000032  f44f7196          MOV      r1,#0x12c
;;;318    
;;;319    	bat[0]._zar_cnt_ke=0;
000036  f1a406da          SUB      r6,r4,#0xda
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;320    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000040  86b0              STRH     r0,[r6,#0x34]
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1
;;;321    
;;;322    	bat[0]._time_min_cnt_ke=0;
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
;;;323    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  86b0              STRH     r0,[r6,#0x34]
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]  ; adc_self_ch_disp
000056  4288              CMP      r0,r1
;;;324    
;;;325    	
;;;326    	spc_phase=0;
000058  da01              BGE      |L3.94|
;;;327    	__ee_spc_phase=0;
00005a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00005c  86b0              STRH     r0,[r6,#0x34]
                  |L3.94|
;;;328    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  79f7              LDRB     r7,[r6,#7]  ; adc_ch_net
000060  2200              MOVS     r2,#0
000062  b3f7              CBZ      r7,|L3.226|
000064  7ab3              LDRB     r3,[r6,#0xa]  ; adc_window_flag
000066  4869              LDR      r0,|L3.524|
;;;329    
;;;330    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;331    
;;;332    		{					
;;;333    		signed short temp_temp;
;;;334    		signed char temp;
;;;335    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b61034          LDRSH    r1,[r6,#0x34]  ; adc_result
00006e  6804              LDR      r4,[r0,#0]  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2
000074  6004              STR      r4,[r0,#0]  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2
00007c  6044              STR      r4,[r0,#4]  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2
000084  6084              STR      r4,[r0,#8]  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]  ; main_power_buffer
;;;336    		    
;;;337    		temp=LPC_RTC->YEAR;
000088  eb0401a1          ADD      r1,r4,r1,ASR #2
00008c  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
                  |L3.142|
;;;338    		gran_char(&temp,1,99);
00008e  f9b61034          LDRSH    r1,[r6,#0x34]  ; adc_result
000092  2964              CMP      r1,#0x64
000094  da04              BGE      |L3.160|
000096  8f31              LDRH     r1,[r6,#0x38]  ; adc_zero_cnt
000098  f1010101          ADD      r1,r1,#1
;;;339    		*((char*)(&(ke_date[0])))=temp;
00009c  8731              STRH     r1,[r6,#0x38]
00009e  e000              B        |L3.162|
                  |L3.160|
0000a0  8732              STRH     r2,[r6,#0x38]
                  |L3.162|
0000a2  f9b64038          LDRSH    r4,[r6,#0x38]  ; adc_zero_cnt
;;;340    			
;;;341    		temp=LPC_RTC->MONTH;
0000a6  f44f61fa          MOV      r1,#0x7d0
;;;342    		gran_char(&temp,1,12);
0000aa  428c              CMP      r4,r1
0000ac  db05              BLT      |L3.186|
0000ae  8731              STRH     r1,[r6,#0x38]
0000b0  6002              STR      r2,[r0,#0]  ; main_power_buffer
0000b2  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;343    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  6082              STR      r2,[r0,#8]  ; main_power_buffer
0000b6  60c2              STR      r2,[r0,#0xc]  ; main_power_buffer
0000b8  8672              STRH     r2,[r6,#0x32]
                  |L3.186|
;;;344    		
;;;345    		temp=LPC_RTC->DOM;
0000ba  8f31              LDRH     r1,[r6,#0x38]  ; adc_zero_cnt
0000bc  2905              CMP      r1,#5
;;;346    		gran_char(&temp,1,31);
0000be  d14f              BNE      |L3.352|
0000c0  b1bb              CBZ      r3,|L3.242|
0000c2  8ef1              LDRH     r1,[r6,#0x36]  ; adc_gorb_cnt
0000c4  f1010101          ADD      r1,r1,#1
;;;347    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000c8  b209              SXTH     r1,r1
0000ca  86f1              STRH     r1,[r6,#0x36]
0000cc  f5b17f00          CMP      r1,#0x200
;;;348    				
;;;349    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d0  db00              BLT      |L3.212|
0000d2  86f2              STRH     r2,[r6,#0x36]
                  |L3.212|
;;;350    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d4  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_gorb_cnt
0000d8  064c              LSLS     r4,r1,#25
0000da  d10a              BNE      |L3.242|
0000dc  ea4f11e1          ASR      r1,r1,#7
;;;351    
;;;352    		temp=LPC_RTC->HOUR;
0000e0  e000              B        |L3.228|
                  |L3.226|
;;;353    		gran_char(&temp,0,23);
0000e2  e015              B        |L3.272|
                  |L3.228|
0000e4  f8504021          LDR      r4,[r0,r1,LSL #2]
0000e8  ea4f2424          ASR      r4,r4,#8
;;;354    		*((char*)(&(ke_date[1])))=temp;
0000ec  8674              STRH     r4,[r6,#0x32]
0000ee  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L3.242|
;;;355                   
;;;356    		temp=LPC_RTC->MIN;
0000f2  f9b6003a          LDRSH    r0,[r6,#0x3a]  ; adc_window_cnt
;;;357    		gran_char(&temp,0,59);
0000f6  2896              CMP      r0,#0x96
0000f8  dd01              BLE      |L3.254|
0000fa  b103              CBZ      r3,|L3.254|
0000fc  72b2              STRB     r2,[r6,#0xa]
                  |L3.254|
0000fe  381f              SUBS     r0,r0,#0x1f
;;;358    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  2827              CMP      r0,#0x27
000102  d22d              BCS      |L3.352|
000104  7ab0              LDRB     r0,[r6,#0xa]  ; adc_window_flag
;;;359    	          
;;;360    		temp=LPC_RTC->SEC;
000106  bb58              CBNZ     r0,|L3.352|
000108  f04f0001          MOV      r0,#1
;;;361    		gran_char(&temp,0,59);
00010c  72b0              STRB     r0,[r6,#0xa]
00010e  e027              B        |L3.352|
                  |L3.272|
000110  483f              LDR      r0,|L3.528|
000112  7a35              LDRB     r5,[r6,#8]  ; adc_ch
;;;362    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  7a73              LDRB     r3,[r6,#9]  ; adc_ch_cnt
000116  eb001485          ADD      r4,r0,r5,LSL #6
;;;363    			
;;;364    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  f9b61034          LDRSH    r1,[r6,#0x34]  ; adc_result
00011e  f8441023          STR      r1,[r4,r3,LSL #2]
;;;365    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000122  0798              LSLS     r0,r3,#30
000124  d10f              BNE      |L3.326|
000126  4601              MOV      r1,r0
                  |L3.296|
000128  f854c020          LDR      r12,[r4,r0,LSL #2]
;;;366    		}
;;;367    	bat_hndl_zvu_ke_init=1;
;;;368    	}
;;;369    }
00012c  4461              ADD      r1,r1,r12
00012e  f1000001          ADD      r0,r0,#1
000132  b2c0              UXTB     r0,r0
000134  2810              CMP      r0,#0x10
000136  d3f7              BCC      |L3.296|
000138  ea4f1021          ASR      r0,r1,#4
00013c  4933              LDR      r1,|L3.524|
00013e  f1a10120          SUB      r1,r1,#0x20
000142  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.326|
000146  1c6d              ADDS     r5,r5,#1
000148  b2e8              UXTB     r0,r5
00014a  7230              STRB     r0,[r6,#8]
00014c  2810              CMP      r0,#0x10
00014e  d307              BCC      |L3.352|
000150  7232              STRB     r2,[r6,#8]
000152  f1030301          ADD      r3,r3,#1
000156  b2d8              UXTB     r0,r3
000158  7270              STRB     r0,[r6,#9]
00015a  2810              CMP      r0,#0x10
00015c  d300              BCC      |L3.352|
00015e  7272              STRB     r2,[r6,#9]
                  |L3.352|
000160  71b2              STRB     r2,[r6,#6]
000162  f1070701          ADD      r7,r7,#1
000166  f0070001          AND      r0,r7,#1
00016a  71f0              STRB     r0,[r6,#7]
00016c  4a29              LDR      r2,|L3.532|
00016e  b130              CBZ      r0,|L3.382|
000170  6810              LDR      r0,[r2,#0]
000172  f02000ff          BIC      r0,r0,#0xff
000176  f1000004          ADD      r0,r0,#4
00017a  6010              STR      r0,[r2,#0]
00017c  e03d              B        |L3.506|
                  |L3.382|
00017e  7a31              LDRB     r1,[r6,#8]  ; adc_ch
000180  0708              LSLS     r0,r1,#28
000182  d406              BMI      |L3.402|
000184  6810              LDR      r0,[r2,#0]
000186  f02000ff          BIC      r0,r0,#0xff
00018a  f1000001          ADD      r0,r0,#1
00018e  6010              STR      r0,[r2,#0]
000190  e005              B        |L3.414|
                  |L3.402|
000192  6810              LDR      r0,[r2,#0]
000194  f02000ff          BIC      r0,r0,#0xff
000198  f1000002          ADD      r0,r0,#2
00019c  6010              STR      r0,[r2,#0]
                  |L3.414|
00019e  481e              LDR      r0,|L3.536|
0001a0  6803              LDR      r3,[r0,#0]
0001a2  f0435380          ORR      r3,r3,#0x10000000
0001a6  6003              STR      r3,[r0,#0]
0001a8  6a03              LDR      r3,[r0,#0x20]
0001aa  f0434380          ORR      r3,r3,#0x40000000
0001ae  6203              STR      r3,[r0,#0x20]
0001b0  6e03              LDR      r3,[r0,#0x60]
0001b2  f0436380          ORR      r3,r3,#0x4000000
0001b6  6603              STR      r3,[r0,#0x60]
0001b8  07cb              LSLS     r3,r1,#31
0001ba  d00a              BEQ      |L3.466|
0001bc  6943              LDR      r3,[r0,#0x14]
0001be  f0435380          ORR      r3,r3,#0x10000000
0001c2  6143              STR      r3,[r0,#0x14]
                  |L3.452|
0001c4  078b              LSLS     r3,r1,#30
0001c6  d409              BMI      |L3.476|
0001c8  6b43              LDR      r3,[r0,#0x34]
0001ca  f0234380          BIC      r3,r3,#0x40000000
0001ce  6343              STR      r3,[r0,#0x34]
0001d0  e008              B        |L3.484|
                  |L3.466|
0001d2  6943              LDR      r3,[r0,#0x14]
0001d4  f0235380          BIC      r3,r3,#0x10000000
0001d8  6143              STR      r3,[r0,#0x14]
0001da  e7f3              B        |L3.452|
                  |L3.476|
0001dc  6b43              LDR      r3,[r0,#0x34]
0001de  f0434380          ORR      r3,r3,#0x40000000
0001e2  6343              STR      r3,[r0,#0x34]
                  |L3.484|
0001e4  0749              LSLS     r1,r1,#29
0001e6  d404              BMI      |L3.498|
0001e8  6f41              LDR      r1,[r0,#0x74]
0001ea  f0216180          BIC      r1,r1,#0x4000000
0001ee  6741              STR      r1,[r0,#0x74]
0001f0  e003              B        |L3.506|
                  |L3.498|
0001f2  6f41              LDR      r1,[r0,#0x74]
0001f4  f0416180          ORR      r1,r1,#0x4000000
0001f8  6741              STR      r1,[r0,#0x74]
                  |L3.506|
0001fa  6810              LDR      r0,[r2,#0]
0001fc  f0407080          ORR      r0,r0,#0x1000000
000200  6010              STR      r0,[r2,#0]
000202  e8bd81f0          POP      {r4-r8,pc}
;;;370    #endif
                          ENDP

000206  0000              DCW      0x0000
                  |L3.520|
                          DCD      ||area_number.25||+0xda
                  |L3.524|
                          DCD      ||.bss||+0x42c
                  |L3.528|
                          DCD      ||.bss||+0xc
                  |L3.532|
                          DCD      0x40034000
                  |L3.536|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;290    //-----------------------------------------------
;;;291    void ke_start(char in)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;292    {          
000004  b085              SUB      sp,sp,#0x14
;;;293    ke_start_stat=(enum_ke_start_stat)0;		 
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0
;;;294    /*
;;;295    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;296    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;297    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;298    #endif
;;;299    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;300    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;301    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;302    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;303    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;304    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;305    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;306    else */
;;;307    	{
;;;308    
;;;309    	ke_start_stat=kssYES;
00000c  7820              LDRB     r0,[r4,#0]  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1
000010  b2c0              UXTB     r0,r0
;;;310    
;;;311    	spc_stat=spcKE;
000012  7020              STRB     r0,[r4,#0]
000014  280a              CMP      r0,#0xa
000016  d340              BCC      |L4.154|
;;;312    	__ee_spc_stat=spcKE;
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;313    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
;;;314    	
;;;315    	spc_bat=0;
000026  f88c0000          STRB     r0,[r12,#0]
;;;316    	__ee_spc_bat=0;
00002a  485e              LDR      r0,|L4.420|
;;;317    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]  ; bps_I
000032  8008              STRH     r0,[r1,#0]
000034  495d              LDR      r1,|L4.428|
;;;318    
;;;319    	bat[0]._zar_cnt_ke=0;
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;320    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]
;;;321    
;;;322    	bat[0]._time_min_cnt_ke=0;
00004c  4288              CMP      r0,r1
;;;323    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1
000054  f1b90f0a          CMP      r9,#0xa
;;;324    
;;;325    	
;;;326    	spc_phase=0;
000058  db01              BLT      |L4.94|
;;;327    	__ee_spc_phase=0;
00005a  2f01              CMP      r7,#1
00005c  d007              BEQ      |L4.110|
                  |L4.94|
;;;328    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  4288              CMP      r0,r1
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0
000064  280a              CMP      r0,#0xa
000066  db13              BLT      |L4.144|
;;;329    
;;;330    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;331    
;;;332    		{					
;;;333    		signed short temp_temp;
;;;334    		signed char temp;
;;;335    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  2f01              CMP      r7,#1
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1
000072  f88c2001          STRB     r2,[r12,#1]
000076  f1a30301          SUB      r3,r3,#1
00007a  f8a83000          STRH     r3,[r8,#0]
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1
000084  f88c2001          STRB     r2,[r12,#1]
;;;336    		    
;;;337    		temp=LPC_RTC->YEAR;
000088  f1030301          ADD      r3,r3,#1
00008c  f8a83000          STRH     r3,[r8,#0]
                  |L4.144|
;;;338    		gran_char(&temp,1,99);
000090  2214              MOVS     r2,#0x14
000092  4251              RSBS     r1,r2,#0
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]  ; ica_timer_cnt
;;;339    		*((char*)(&(ke_date[0])))=temp;
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8
0000a4  d125              BNE      |L4.242|
;;;340    			
;;;341    		temp=LPC_RTC->MONTH;
0000a6  8830              LDRH     r0,[r6,#0]  ; ICA_EN
0000a8  2801              CMP      r0,#1
;;;342    		gran_char(&temp,1,12);
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]
;;;343    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  f04f0004          MOV      r0,#4
0000b8  f88d0001          STRB     r0,[sp,#1]
;;;344    		
;;;345    		temp=LPC_RTC->DOM;
0000bc  f88d5002          STRB     r5,[sp,#2]
;;;346    		gran_char(&temp,1,31);
0000c0  f04f0002          MOV      r0,#2
0000c4  f88d0003          STRB     r0,[sp,#3]
;;;347    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000c8  f88d5004          STRB     r5,[sp,#4]
0000cc  f04f0001          MOV      r0,#1
;;;348    				
;;;349    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d0  f88d0005          STRB     r0,[sp,#5]
;;;350    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d4  f04f0106          MOV      r1,#6
0000d8  4668              MOV      r0,sp
0000da  f7fffffe          BL       CRC16_2
;;;351    
;;;352    		temp=LPC_RTC->HOUR;
0000de  f88d0006          STRB     r0,[sp,#6]
;;;353    		gran_char(&temp,0,23);
0000e2  ea4f2020          ASR      r0,r0,#8
0000e6  f88d0007          STRB     r0,[sp,#7]
0000ea  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
;;;354    		*((char*)(&(ke_date[1])))=temp;
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1
                  |L4.242|
;;;355                   
;;;356    		temp=LPC_RTC->MIN;
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14
;;;357    		gran_char(&temp,0,59);
0000f8  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4
;;;358    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  eb020181          ADD      r1,r2,r1,LSL #2
000104  4a2e              LDR      r2,|L4.448|
;;;359    	          
;;;360    		temp=LPC_RTC->SEC;
000106  f9b2204a          LDRSH    r2,[r2,#0x4a]  ; main_kb_cnt
;;;361    		gran_char(&temp,0,59);
00010a  4291              CMP      r1,r2
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]  ; ICA_EN
000110  2901              CMP      r1,#1
000112  d131              BNE      |L4.376|
;;;362    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]
;;;363    			
;;;364    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011c  f04f0106          MOV      r1,#6
;;;365    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000120  f88d1001          STRB     r1,[sp,#1]
000124  f88d5002          STRB     r5,[sp,#2]
000128  f04f011e          MOV      r1,#0x1e
;;;366    		}
;;;367    	bat_hndl_zvu_ke_init=1;
;;;368    	}
;;;369    }
00012c  f88d1003          STRB     r1,[sp,#3]
000130  ea4f71e0          ASR      r1,r0,#31
000134  eb006111          ADD      r1,r0,r1,LSR #24
000138  ea4f2221          ASR      r2,r1,#8
00013c  f88d2004          STRB     r2,[sp,#4]
000140  f88d0005          STRB     r0,[sp,#5]
000144  f04f0106          MOV      r1,#6
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]
000152  ea4f2020          ASR      r0,r0,#8
000156  f88d0007          STRB     r0,[sp,#7]
00015a  8838              LDRH     r0,[r7,#0]  ; ICA_CH
00015c  2800              CMP      r0,#0
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0
000162  466d              MOV      r5,sp
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1
000172  b2e4              UXTB     r4,r4
000174  2c08              CMP      r4,#8
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14
00017a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.382|
00017e  f04f0400          MOV      r4,#0
000182  46e9              MOV      r9,sp
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1
000190  b2e4              UXTB     r4,r4
000192  2c08              CMP      r4,#8
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;370    #endif
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;290    //-----------------------------------------------
;;;291    void ke_start(char in)
000000  b570              PUSH     {r4-r6,lr}
;;;292    {          
000002  4604              MOV      r4,r0
000004  f04f0207          MOV      r2,#7
;;;293    ke_start_stat=(enum_ke_start_stat)0;		 
000008  f04f0101          MOV      r1,#1
;;;294    /*
;;;295    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;296    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;297    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;298    #endif
;;;299    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;300    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;301    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;302    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;303    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;304    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;305    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;306    else */
;;;307    	{
;;;308    
;;;309    	ke_start_stat=kssYES;
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;310    
;;;311    	spc_stat=spcKE;
000012  48a4              LDR      r0,|L5.676|
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;312    	__ee_spc_stat=spcKE;
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;313    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1
;;;314    	
;;;315    	spc_bat=0;
;;;316    	__ee_spc_bat=0;
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
;;;317    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  7050              STRB     r0,[r2,#1]
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0
000032  b101              CBZ      r1,|L5.54|
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;318    
;;;319    	bat[0]._zar_cnt_ke=0;
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;320    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000040  f1000001          ADD      r0,r0,#1
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1
;;;321    
;;;322    	bat[0]._time_min_cnt_ke=0;
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2
;;;323    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1
;;;324    
;;;325    	
;;;326    	spc_phase=0;
000058  461a              MOV      r2,r3
;;;327    	__ee_spc_phase=0;
00005a  210e              MOVS     r1,#0xe
00005c  a093              ADR      r0,|L5.684|
;;;328    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1
000066  2202              MOVS     r2,#2
;;;329    
;;;330    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;331    
;;;332    		{					
;;;333    		signed short temp_temp;
;;;334    		signed char temp;
;;;335    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  210e              MOVS     r1,#0xe
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1
000074  2203              MOVS     r2,#3
000076  210e              MOVS     r1,#0xe
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1
000082  2204              MOVS     r2,#4
000084  210e              MOVS     r1,#0xe
000086  a09e              ADR      r0,|L5.768|
;;;336    		    
;;;337    		temp=LPC_RTC->YEAR;
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
;;;338    		gran_char(&temp,1,99);
00008e  0783              LSLS     r3,r0,#30
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1
;;;339    		*((char*)(&(ke_date[0])))=temp;
00009c  70d0              STRB     r0,[r2,#3]
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2
;;;340    			
;;;341    		temp=LPC_RTC->MONTH;
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3
;;;342    		gran_char(&temp,1,12);
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2
0000b0  2201              MOVS     r2,#1
0000b2  210e              MOVS     r1,#0xe
;;;343    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
;;;344    		
;;;345    		temp=LPC_RTC->DOM;
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2
;;;346    		gran_char(&temp,1,31);
0000be  461a              MOV      r2,r3
0000c0  210e              MOVS     r1,#0xe
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
;;;347    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2
0000cc  2203              MOVS     r2,#3
;;;348    				
;;;349    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000ce  210e              MOVS     r1,#0xe
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
;;;350    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2
0000da  2204              MOVS     r2,#4
0000dc  210e              MOVS     r1,#0xe
;;;351    
;;;352    		temp=LPC_RTC->HOUR;
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
;;;353    		gran_char(&temp,0,23);
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29
;;;354    		*((char*)(&(ke_date[1])))=temp;
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1
;;;355                   
;;;356    		temp=LPC_RTC->MIN;
0000f4  70d0              STRB     r0,[r2,#3]
;;;357    		gran_char(&temp,0,59);
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2
0000fe  d010              BEQ      |L5.290|
;;;358    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  2c03              CMP      r4,#3
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
;;;359    	          
;;;360    		temp=LPC_RTC->SEC;
000106  2303              MOVS     r3,#3
000108  2201              MOVS     r2,#1
;;;361    		gran_char(&temp,0,59);
00010a  210e              MOVS     r1,#0xe
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
;;;362    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  2303              MOVS     r3,#3
000116  2202              MOVS     r2,#2
000118  210e              MOVS     r1,#0xe
;;;363    			
;;;364    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
;;;365    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3
000124  461a              MOV      r2,r3
000126  210e              MOVS     r1,#0xe
000128  a0a6              ADR      r0,|L5.964|
;;;366    		}
;;;367    	bat_hndl_zvu_ke_init=1;
00012a  f7fffffe          BL       snmp_trap_send
;;;368    	}
;;;369    }
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3
000132  2204              MOVS     r2,#4
000134  210e              MOVS     r1,#0xe
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1
00014c  70d0              STRB     r0,[r2,#3]
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4
000160  2201              MOVS     r2,#1
000162  210e              MOVS     r1,#0xe
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4
00016e  2202              MOVS     r2,#2
000170  210e              MOVS     r1,#0xe
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4
00017c  2203              MOVS     r2,#3
00017e  210e              MOVS     r1,#0xe
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4
00018a  461a              MOV      r2,r3
00018c  210e              MOVS     r1,#0xe
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1
0001a4  70d0              STRB     r0,[r2,#3]
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5
0001b8  2201              MOVS     r2,#1
0001ba  210e              MOVS     r1,#0xe
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5
0001c6  2202              MOVS     r2,#2
0001c8  210e              MOVS     r1,#0xe
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5
0001d4  2203              MOVS     r2,#3
0001d6  210e              MOVS     r1,#0xe
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5
0001e2  2204              MOVS     r2,#4
0001e4  210e              MOVS     r1,#0xe
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1
0001fc  70d0              STRB     r0,[r2,#3]
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6
000210  2201              MOVS     r2,#1
000212  210e              MOVS     r1,#0xe
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6
00021e  2202              MOVS     r2,#2
000220  210e              MOVS     r1,#0xe
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6
00022c  2203              MOVS     r2,#3
00022e  210e              MOVS     r1,#0xe
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6
00023a  2204              MOVS     r2,#4
00023c  210e              MOVS     r1,#0xe
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1
000250  70d0              STRB     r0,[r2,#3]
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0
000264  2201              MOVS     r2,#1
000266  210e              MOVS     r1,#0xe
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0
000272  2202              MOVS     r2,#2
000274  210e              MOVS     r1,#0xe
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0
000280  2203              MOVS     r2,#3
000282  210e              MOVS     r1,#0xe
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0
00028e  2204              MOVS     r2,#4
000290  210e              MOVS     r1,#0xe
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!
00029c  7068              STRB     r0,[r5,#1]
00029e  bd70              POP      {r4-r6,pc}
;;;370    #endif
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xac
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;290    //-----------------------------------------------
;;;291    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;292    {          
000004  4d66              LDR      r5,|L6.416|
;;;293    ke_start_stat=(enum_ke_start_stat)0;		 
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;294    /*
;;;295    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;296    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;297    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;298    #endif
;;;299    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;300    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;301    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;302    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;303    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;304    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;305    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;306    else */
;;;307    	{
;;;308    
;;;309    	ke_start_stat=kssYES;
00000e  f9b02000          LDRSH    r2,[r0,#0]  ; TBOXMAX
;;;310    
;;;311    	spc_stat=spcKE;
000012  f9b40000          LDRSH    r0,[r4,#0]
000016  4291              CMP      r1,r2
;;;312    	__ee_spc_stat=spcKE;
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;313    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1
;;;314    	
;;;315    	spc_bat=0;
;;;316    	__ee_spc_bat=0;
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
;;;317    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  2100              MOVS     r1,#0
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;318    
;;;319    	bat[0]._zar_cnt_ke=0;
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;320    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  dd00              BLE      |L6.66|
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]
                  |L6.74|
;;;321    
;;;322    	bat[0]._time_min_cnt_ke=0;
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]  ; t_box
;;;323    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
;;;324    
;;;325    	
;;;326    	spc_phase=0;
000058  1e8b              SUBS     r3,r1,#2
;;;327    	__ee_spc_phase=0;
00005a  4298              CMP      r0,r3
00005c  da0f              BGE      |L6.126|
;;;328    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000062  291e              CMP      r1,#0x1e
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1
;;;329    
;;;330    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;331    
;;;332    		{					
;;;333    		signed short temp_temp;
;;;334    		signed char temp;
;;;335    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006a  b249              SXTB     r1,r1
00006c  7011              STRB     r1,[r2,#0]
00006e  291e              CMP      r1,#0x1e
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1
000078  8039              STRH     r1,[r7,#0]
00007a  7014              STRB     r4,[r2,#0]
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000086  291e              CMP      r1,#0x1e
;;;336    		    
;;;337    		temp=LPC_RTC->YEAR;
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1
;;;338    		gran_char(&temp,1,99);
00008e  b249              SXTB     r1,r1
000090  7011              STRB     r1,[r2,#0]
000092  291e              CMP      r1,#0x1e
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1
;;;339    		*((char*)(&(ke_date[0])))=temp;
00009c  8039              STRH     r1,[r7,#0]
00009e  7014              STRB     r4,[r2,#0]
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
;;;340    			
;;;341    		temp=LPC_RTC->MONTH;
0000a6  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXVENTMAX
;;;342    		gran_char(&temp,1,12);
0000aa  4288              CMP      r0,r1
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14
0000b0  2100              MOVS     r1,#0
0000b2  4841              LDR      r0,|L6.440|
;;;343    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
;;;344    		
;;;345    		temp=LPC_RTC->DOM;
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0
;;;346    		gran_char(&temp,1,31);
0000be  8800              LDRH     r0,[r0,#0]  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9
0000c2  b202              SXTH     r2,r0
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
;;;347    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000ca  20f0              MOVS     r0,#0xf0
0000cc  f7fffffe          BL       mess_find_unvol
;;;348    				
;;;349    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
;;;350    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d4  6801              LDR      r1,[r0,#0]  ; mess_data
0000d6  29f1              CMP      r1,#0xf1
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]
                  |L6.222|
;;;351    
;;;352    		temp=LPC_RTC->HOUR;
0000de  f9b71000          LDRSH    r1,[r7,#0]  ; main_vent_pos
;;;353    		gran_char(&temp,0,23);
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]
0000ea  e000              B        |L6.238|
                  |L6.236|
;;;354    		*((char*)(&(ke_date[1])))=temp;
0000ec  7004              STRB     r4,[r0,#0]
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
;;;355                   
;;;356    		temp=LPC_RTC->MIN;
0000f4  f9b00000          LDRSH    r0,[r0,#0]  ; TBATDISABLE
;;;357    		gran_char(&temp,0,59);
0000f8  f1a00132          SUB      r1,r0,#0x32
0000fc  2928              CMP      r1,#0x28
0000fe  d821              BHI      |L6.324|
;;;358    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
000104  4f33              LDR      r7,|L6.468|
;;;359    	          
;;;360    		temp=LPC_RTC->SEC;
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L6.274|
;;;361    		gran_char(&temp,0,59);
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
;;;362    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
;;;363    			
;;;364    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1
;;;365    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000122  8038              STRH     r0,[r7,#0]
                  |L6.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L6.468|
;;;366    		}
;;;367    	bat_hndl_zvu_ke_init=1;
00012a  f7fffffe          BL       gran
;;;368    	}
;;;369    }
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L6.314|
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L6.380|
00017c  2206              MOVS     r2,#6
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L6.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L6.406|
;;;370    #endif
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;290    //-----------------------------------------------
;;;291    void ke_start(char in)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;292    {          
000004  484e              LDR      r0,|L7.320|
;;;293    ke_start_stat=(enum_ke_start_stat)0;		 
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64
00000a  f9b00000          LDRSH    r0,[r0,#0]
;;;294    /*
;;;295    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;296    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;297    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;298    #endif
;;;299    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;300    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;301    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;302    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;303    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;304    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;305    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;306    else */
;;;307    	{
;;;308    
;;;309    	ke_start_stat=kssYES;
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;310    
;;;311    	spc_stat=spcKE;
000012  eb001040          ADD      r0,r0,r0,LSL #5
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;312    	__ee_spc_stat=spcKE;
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;313    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
;;;314    	
;;;315    	spc_bat=0;
000026  b20a              SXTH     r2,r1
;;;316    	__ee_spc_bat=0;
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
;;;317    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  f89b0000          LDRB     r0,[r11,#0]
000030  4e45              LDR      r6,|L7.328|
000032  4f46              LDR      r7,|L7.332|
000034  f8df8118          LDR      r8,|L7.336|
;;;318    
;;;319    	bat[0]._zar_cnt_ke=0;
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;320    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000040  2500              MOVS     r5,#0
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2
000048  d031              BEQ      |L7.174|
;;;321    
;;;322    	bat[0]._time_min_cnt_ke=0;
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]
;;;323    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  f8a81000          STRH     r1,[r8,#0]
000052  2801              CMP      r0,#1
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]
                  |L7.88|
;;;324    
;;;325    	
;;;326    	spc_phase=0;
000058  230a              MOVS     r3,#0xa
;;;327    	__ee_spc_phase=0;
00005a  2200              MOVS     r2,#0
00005c  21e6              MOVS     r1,#0xe6
;;;328    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  20e1              MOVS     r0,#0xe1
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1
;;;329    
;;;330    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;331    
;;;332    		{					
;;;333    		signed short temp_temp;
;;;334    		signed char temp;
;;;335    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  f04f0000          MOV      r0,#0
00006c  f9b73000          LDRSH    r3,[r7,#0]
000070  f9b85000          LDRSH    r5,[r8,#0]
000074  f9ba6000          LDRSH    r6,[r10,#0]
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  ebc001c0          RSB      r1,r0,r0,LSL #3
00007e  eb011100          ADD      r1,r1,r0,LSL #4
000082  eb090181          ADD      r1,r9,r1,LSL #2
000086  69c9              LDR      r1,[r1,#0x1c]
;;;336    		    
;;;337    		temp=LPC_RTC->YEAR;
000088  4299              CMP      r1,r3
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5
;;;338    		gran_char(&temp,1,99);
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1
000094  b2c0              UXTB     r0,r0
                  |L7.150|
000096  42b0              CMP      r0,r6
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1
;;;339    		*((char*)(&(ke_date[0])))=temp;
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0
0000a4  e7f9              B        |L7.154|
                  |L7.166|
;;;340    			
;;;341    		temp=LPC_RTC->MONTH;
0000a6  f04f0002          MOV      r0,#2
;;;342    		gran_char(&temp,1,12);
0000aa  7020              STRB     r0,[r4,#0]
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]
0000b0  f8a81000          STRH     r1,[r8,#0]
;;;343    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  2802              CMP      r0,#2
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]
                  |L7.186|
;;;344    		
;;;345    		temp=LPC_RTC->DOM;
0000ba  230a              MOVS     r3,#0xa
0000bc  2200              MOVS     r2,#0
;;;346    		gran_char(&temp,1,31);
0000be  21e6              MOVS     r1,#0xe6
0000c0  20e1              MOVS     r0,#0xe1
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1
;;;347    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000ca  f04f0000          MOV      r0,#0
;;;348    				
;;;349    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000ce  f9b73000          LDRSH    r3,[r7,#0]
0000d2  f9b87000          LDRSH    r7,[r8,#0]
;;;350    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d6  f9bac000          LDRSH    r12,[r10,#0]
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  ebc001c0          RSB      r1,r0,r0,LSL #3
;;;351    
;;;352    		temp=LPC_RTC->HOUR;
0000e0  eb011100          ADD      r1,r1,r0,LSL #4
;;;353    		gran_char(&temp,0,23);
0000e4  eb090181          ADD      r1,r9,r1,LSL #2
0000e8  69c9              LDR      r1,[r1,#0x1c]
0000ea  4299              CMP      r1,r3
;;;354    		*((char*)(&(ke_date[1])))=temp;
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7
0000f0  dd07              BLE      |L7.258|
;;;355                   
;;;356    		temp=LPC_RTC->MIN;
0000f2  f1000001          ADD      r0,r0,#1
;;;357    		gran_char(&temp,0,59);
0000f6  b2c0              UXTB     r0,r0
                  |L7.248|
0000f8  4560              CMP      r0,r12
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1
0000fe  d003              BEQ      |L7.264|
;;;358    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0
;;;359    	          
;;;360    		temp=LPC_RTC->SEC;
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee
;;;361    		gran_char(&temp,0,59);
00010a  e9cd0500          STRD     r0,r5,[sp,#0]
00010e  9502              STR      r5,[sp,#8]
000110  9503              STR      r5,[sp,#0xc]
000112  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
;;;362    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  4603              MOV      r3,r0
000116  2216              MOVS     r2,#0x16
000118  4608              MOV      r0,r1
;;;363    			
;;;364    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
;;;365    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000120  1c40              ADDS     r0,r0,#1
000122  b2c0              UXTB     r0,r0
000124  7030              STRB     r0,[r6,#0]
000126  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
;;;366    		}
;;;367    	bat_hndl_zvu_ke_init=1;
00012a  4288              CMP      r0,r1
;;;368    	}
;;;369    }
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]
000136  e8bd9fff          POP      {r0-r12,pc}
;;;370    #endif
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;290    //-----------------------------------------------
;;;291    void ke_start(char in)
000000  4908              LDR      r1,|L8.36|
;;;292    {          
000002  f44f70b4          MOV      r0,#0x168
;;;293    ke_start_stat=(enum_ke_start_stat)0;		 
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0
;;;294    /*
;;;295    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;296    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;297    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;298    #endif
;;;299    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;300    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;301    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;302    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;303    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;304    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;305    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;306    else */
;;;307    	{
;;;308    
;;;309    	ke_start_stat=kssYES;
00000e  700a              STRB     r2,[r1,#0]
000010  f04f0100          MOV      r1,#0
;;;310    
;;;311    	spc_stat=spcKE;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;312    	__ee_spc_stat=spcKE;
000018  f04f0201          MOV      r2,#1
;;;313    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;314    	
;;;315    	spc_bat=0;
;;;316    	__ee_spc_bat=0;
;;;317    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
;;;318    
;;;319    	bat[0]._zar_cnt_ke=0;
;;;320    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
;;;321    
;;;322    	bat[0]._time_min_cnt_ke=0;
;;;323    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
;;;324    
;;;325    	
;;;326    	spc_phase=0;
;;;327    	__ee_spc_phase=0;
;;;328    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
;;;329    
;;;330    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;331    
;;;332    		{					
;;;333    		signed short temp_temp;
;;;334    		signed char temp;
;;;335    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
;;;336    		    
;;;337    		temp=LPC_RTC->YEAR;
;;;338    		gran_char(&temp,1,99);
;;;339    		*((char*)(&(ke_date[0])))=temp;
;;;340    			
;;;341    		temp=LPC_RTC->MONTH;
;;;342    		gran_char(&temp,1,12);
;;;343    		*(((char*)(&(ke_date[0])))+1)=temp;
;;;344    		
;;;345    		temp=LPC_RTC->DOM;
;;;346    		gran_char(&temp,1,31);
;;;347    		*(((char*)(&(ke_date[0])))+2)=temp;			
;;;348    				
;;;349    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
;;;350    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
;;;351    
;;;352    		temp=LPC_RTC->HOUR;
;;;353    		gran_char(&temp,0,23);
;;;354    		*((char*)(&(ke_date[1])))=temp;
;;;355                   
;;;356    		temp=LPC_RTC->MIN;
;;;357    		gran_char(&temp,0,59);
;;;358    		*(((char*)(&(ke_date[1])))+1)=temp;
;;;359    	          
;;;360    		temp=LPC_RTC->SEC;
;;;361    		gran_char(&temp,0,59);
;;;362    		*(((char*)(&(ke_date[1])))+2)=temp;
;;;363    			
;;;364    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;365    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
;;;366    		}
;;;367    	bat_hndl_zvu_ke_init=1;
;;;368    	}
;;;369    }
;;;370    #endif
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  bat_hndl_zvu_init
000001  00                DCB      0x00
                  bat_hndl_zvu_ke_init
000002  00                DCB      0x00
                  ke_drv_cnt_10s
000003  00                DCB      0x00
                  i_bat_buff_cnt
000004  00                DCB      0x00
                  cntrlStatIsDownCnt
000005  00                DCB      0x00
                  adc_self_ch_cnt
000006  00                DCB      0x00
                  adc_ch_net
000007  00                DCB      0x00
                  adc_ch
000008  00                DCB      0x00
                  adc_ch_cnt
000009  00                DCB      0x00
                  adc_window_flag
00000a  00                DCB      0x00
                  ch_cnt0
00000b  00                DCB      0x00
                  b1Hz_ch
00000c  00                DCB      0x00
                  i
00000d  00                DCB      0x00
                  iiii
00000e  00                DCB      0x00
                  bAVG
00000f  00                DCB      0x00
                  avg_num
000010  00                DCB      0x00
                  kb_full_ver
000011  00                DCB      0x00
                  kb_start_ips
000012  00                DCB      0x00
                  num_of_wrks_bps
000013  00                DCB      0x00
                  num_necc_up
000014  00                DCB      0x00
                  num_necc_down
000015  00                DCB      0x00
                  sh_cnt0
000016  00                DCB      0x00
                  b1Hz_sh
000017  00                DCB      0x00
                  spc_stat
000018  00                DCB      0x00
                  spc_bat
000019  00                DCB      0x00
                  spc_phase
00001a  00                DCB      0x00
                  bAVZ
00001b  00                DCB      0x00
                  ke_start_stat
00001c  00                DCB      0x00
                  numOfForvardBps
00001d  00                DCB      0x00
                  numOfForvardBps_old
00001e  00                DCB      0x00
                  numOfForvardBps_minCnt
00001f  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
000020  00                DCB      0x00
                  bPARALLEL_ENOUG
000021  00                DCB      0x00
                  bPARALLEL
000022  00                DCB      0x00
                  cntrl_hndl_plazma
000023  00                DCB      0x00
                  vz1_stat
000024  00                DCB      0x00
                  vz1_stat_old
000025  00                DCB      0x00
                  volt_region
000026  00                DCB      0x00
                  vz2_stat
000027  00                DCB      0x00
                  vz2_stat_old
000028  0000              DCB      0x00,0x00
                  cntrl_stat
00002a  0258              DCW      0x0258
                  cntrl_stat_old
00002c  0258              DCW      0x0258
                  avg_main_cnt
00002e  0014              DCW      0x0014
                  num_necc_block_cnt
000030  0000              DCB      0x00,0x00
                  net_buff_
000032  0000              DCB      0x00,0x00
                  adc_result
000034  0000              DCB      0x00,0x00
                  adc_gorb_cnt
000036  0000              DCB      0x00,0x00
                  adc_zero_cnt
000038  0000              DCB      0x00,0x00
                  adc_window_cnt
00003a  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
00003c  0000              DCB      0x00,0x00
                  plazma_sk
00003e  0000              DCB      0x00,0x00
                  cntrl_stat_new
000040  0000              DCB      0x00,0x00
                  Ibmax
000042  0000              DCB      0x00,0x00
                  IZMAX_
000044  0000              DCB      0x00,0x00
                  Ubpsmax
000046  0000              DCB      0x00,0x00
                  samokalibr_cnt
000048  0000              DCB      0x00,0x00
                  main_kb_cnt
00004a  0000              DCB      0x00,0x00
                  kb_cnt_1lev
00004c  0000              DCB      0x00,0x00
                  kb_cnt_2lev
00004e  0000              DCB      0x00,0x00
                  kb_start
000050  0000              DCB      0x00,0x00
                  ibat_ips
000052  0000              DCB      0x00,0x00
                  ibat_ips_
000054  0000              DCB      0x00,0x00
                  bps_on_mask
000056  0000              DCB      0x00,0x00
                  bps_off_mask
000058  0000              DCB      0x00,0x00
                  vz_cnt_s
00005a  0000              DCB      0x00,0x00
                  vz_cnt_s_
00005c  0000              DCB      0x00,0x00
                  vz_cnt_h
00005e  0000              DCB      0x00,0x00
                  vz_cnt_h_
000060  0000              DCB      0x00,0x00
                  cnt_end_ke
000062  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000064  0000              DCB      0x00,0x00
                  __ee_spc_stat
000066  0000              DCB      0x00,0x00
                  __ee_spc_bat
000068  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006a  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
00006c  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
00006e  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000070  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000072  0000              DCB      0x00,0x00
                  volt_region_cnt
000074  0000              DCB      0x00,0x00
                  vz2_stat_cnt
000076  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
000078  0000              DCB      0x00,0x00
                  plazma_ica1
00007a  0000              DCB      0x00,0x00
                  bat_hndl_i
00007c  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
00007e  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000082  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000084  0000              DCB      0x00,0x00
                  bat_hndl_u_end
000086  0000              DCB      0x00,0x00
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000d8  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000da  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00
