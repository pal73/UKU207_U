; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\EXE\graphic.o --depend=.\EXE\graphic.d --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DAPSENERGIA --omf_browse=.\EXE\graphic.crf graphic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  draw PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;8      {
000004  9c09              LDR      r4,[sp,#0x24]
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  2920              CMP      r1,#0x20
000008  d239              BCS      |L1.126|
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000a  17cd              ASRS     r5,r1,#31
00000c  eb017555          ADD      r5,r1,r5,LSR #29
000010  10ee              ASRS     r6,r5,#3
000012  4637              MOV      r7,r6
000014  f06f0c3c          MVN      r12,#0x3c
000018  fb06f60c          MUL      r6,r6,r12
00001c  f44f7cb7          MOV      r12,#0x16e
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000020  f0250507          BIC      r5,r5,#7
000024  eb0c0646          ADD      r6,r12,r6,LSL #1      ;25
000028  eba10805          SUB      r8,r1,r5
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
00002c  4dfb              LDR      r5,|L1.1052|
00002e  4406              ADD      r6,r6,r0              ;25
000030  f04f0c01          MOV      r12,#1
000034  2a00              CMP      r2,#0                 ;23
000036  d042              BEQ      |L1.190|
000038  b2b0              UXTH     r0,r6                 ;25
00003a  f1c80107          RSB      r1,r8,#7              ;28
00003e  b2c9              UXTB     r1,r1                 ;28
000040  dd1f              BLE      |L1.130|
000042  eb000302          ADD      r3,r0,r2              ;31
000046  e018              B        |L1.122|
                  |L1.72|
000048  b124              CBZ      r4,|L1.84|
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004a  2c01              CMP      r4,#1
00004c  d008              BEQ      |L1.96|
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
00004e  2c02              CMP      r4,#2
000050  d00c              BEQ      |L1.108|
000052  e010              B        |L1.118|
                  |L1.84|
000054  5c2a              LDRB     r2,[r5,r0]            ;33
000056  fa0cf601          LSL      r6,r12,r1             ;33
00005a  4332              ORRS     r2,r2,r6              ;33
00005c  542a              STRB     r2,[r5,r0]            ;33
00005e  e00a              B        |L1.118|
                  |L1.96|
000060  5c2a              LDRB     r2,[r5,r0]            ;34
000062  fa0cf601          LSL      r6,r12,r1             ;34
000066  4072              EORS     r2,r2,r6              ;34
000068  542a              STRB     r2,[r5,r0]            ;34
00006a  e004              B        |L1.118|
                  |L1.108|
00006c  5c2e              LDRB     r6,[r5,r0]
00006e  fa0cf201          LSL      r2,r12,r1
000072  4016              ANDS     r6,r6,r2
000074  542e              STRB     r6,[r5,r0]
                  |L1.118|
000076  1c40              ADDS     r0,r0,#1              ;31
000078  b280              UXTH     r0,r0                 ;31
                  |L1.122|
00007a  4283              CMP      r3,r0                 ;31
00007c  dce4              BGT      |L1.72|
                  |L1.126|
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
00007e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.130|
000082  1883              ADDS     r3,r0,r2              ;31
000084  e018              B        |L1.184|
                  |L1.134|
000086  b124              CBZ      r4,|L1.146|
000088  2c01              CMP      r4,#1                 ;43
00008a  d008              BEQ      |L1.158|
00008c  2c02              CMP      r4,#2                 ;44
00008e  d00c              BEQ      |L1.170|
000090  e010              B        |L1.180|
                  |L1.146|
000092  5c2a              LDRB     r2,[r5,r0]            ;42
000094  fa0cf601          LSL      r6,r12,r1             ;42
000098  4332              ORRS     r2,r2,r6              ;42
00009a  542a              STRB     r2,[r5,r0]            ;42
00009c  e00a              B        |L1.180|
                  |L1.158|
00009e  5c2a              LDRB     r2,[r5,r0]            ;43
0000a0  fa0cf601          LSL      r6,r12,r1             ;43
0000a4  4072              EORS     r2,r2,r6              ;43
0000a6  542a              STRB     r2,[r5,r0]            ;43
0000a8  e004              B        |L1.180|
                  |L1.170|
0000aa  5c2a              LDRB     r2,[r5,r0]            ;44
0000ac  fa0cf601          LSL      r6,r12,r1             ;44
0000b0  4032              ANDS     r2,r2,r6              ;44
0000b2  542a              STRB     r2,[r5,r0]            ;44
                  |L1.180|
0000b4  1e40              SUBS     r0,r0,#1              ;40
0000b6  b280              UXTH     r0,r0                 ;40
                  |L1.184|
0000b8  4283              CMP      r3,r0                 ;40
0000ba  dbe4              BLT      |L1.134|
                  |L1.188|
0000bc  e7df              B        |L1.126|
                  |L1.190|
0000be  f04f0eff          MOV      lr,#0xff              ;70
0000c2  2b00              CMP      r3,#0                 ;48
0000c4  d0db              BEQ      |L1.126|
0000c6  b2ba              UXTH     r2,r7                 ;51
0000c8  eb010603          ADD      r6,r1,r3              ;52
0000cc  ea4f77e6          ASR      r7,r6,#31             ;52
0000d0  eb067a57          ADD      r10,r6,r7,LSR #29     ;52
0000d4  f3ca07cf          UBFX     r7,r10,#3,#16         ;52
0000d8  fa1ff988          UXTH     r9,r8                 ;53
0000dc  f02a0807          BIC      r8,r10,#7             ;54
0000e0  eba60608          SUB      r6,r6,r8              ;54
0000e4  fa1ff886          UXTH     r8,r6                 ;54
0000e8  dd45              BLE      |L1.374|
0000ea  42ba              CMP      r2,r7                 ;59
0000ec  d144              BNE      |L1.376|
0000ee  464e              MOV      r6,r9                 ;61
0000f0  e03f              B        |L1.370|
                  |L1.242|
0000f2  b124              CBZ      r4,|L1.254|
0000f4  2c01              CMP      r4,#1                 ;64
0000f6  d015              BEQ      |L1.292|
0000f8  2c02              CMP      r4,#2                 ;65
0000fa  d026              BEQ      |L1.330|
0000fc  e037              B        |L1.366|
                  |L1.254|
0000fe  f1c20103          RSB      r1,r2,#3              ;63
000102  eb010a41          ADD      r10,r1,r1,LSL #1      ;63
000106  ebca1181          RSB      r1,r10,r1,LSL #6      ;63
00010a  eb000141          ADD      r1,r0,r1,LSL #1       ;63
00010e  f1c60b07          RSB      r11,r6,#7             ;63
000112  f815a001          LDRB     r10,[r5,r1]           ;63
000116  fa0cfb0b          LSL      r11,r12,r11           ;63
00011a  ea4a0a0b          ORR      r10,r10,r11           ;63
00011e  f805a001          STRB     r10,[r5,r1]           ;63
000122  e024              B        |L1.366|
                  |L1.292|
000124  f1c20103          RSB      r1,r2,#3              ;64
000128  eb010a41          ADD      r10,r1,r1,LSL #1      ;64
00012c  ebca1181          RSB      r1,r10,r1,LSL #6      ;64
000130  eb000141          ADD      r1,r0,r1,LSL #1       ;64
000134  f1c60b07          RSB      r11,r6,#7             ;64
000138  f815a001          LDRB     r10,[r5,r1]           ;64
00013c  fa0cfb0b          LSL      r11,r12,r11           ;64
000140  ea8a0a0b          EOR      r10,r10,r11           ;64
000144  f805a001          STRB     r10,[r5,r1]           ;64
000148  e011              B        |L1.366|
                  |L1.330|
00014a  f1c20103          RSB      r1,r2,#3              ;65
00014e  eb010a41          ADD      r10,r1,r1,LSL #1      ;65
000152  ebca1181          RSB      r1,r10,r1,LSL #6      ;65
000156  eb000141          ADD      r1,r0,r1,LSL #1       ;65
00015a  f1c60b07          RSB      r11,r6,#7             ;65
00015e  f815a001          LDRB     r10,[r5,r1]           ;65
000162  fa0cfb0b          LSL      r11,r12,r11           ;65
000166  ea2a0a0b          BIC      r10,r10,r11           ;65
00016a  f805a001          STRB     r10,[r5,r1]           ;65
                  |L1.366|
00016e  1c76              ADDS     r6,r6,#1              ;61
000170  b2b6              UXTH     r6,r6                 ;61
                  |L1.370|
000172  4546              CMP      r6,r8                 ;61
000174  d3bd              BCC      |L1.242|
                  |L1.374|
000176  e09a              B        |L1.686|
                  |L1.376|
000178  17ce              ASRS     r6,r1,#31             ;25
00017a  eb017b56          ADD      r11,r1,r6,LSR #29     ;25
00017e  f3cb06cf          UBFX     r6,r11,#3,#16         ;51
000182  f1c60603          RSB      r6,r6,#3              ;70
000186  eb060a46          ADD      r10,r6,r6,LSL #1      ;70
00018a  ebca1686          RSB      r6,r10,r6,LSL #6      ;70
00018e  f02b0a07          BIC      r10,r11,#7            ;28
000192  eba10b0a          SUB      r11,r1,r10            ;28
000196  f04f0aff          MOV      r10,#0xff             ;70
00019a  eb000646          ADD      r6,r0,r6,LSL #1       ;70
00019e  fa2afa0b          LSR      r10,r10,r11           ;70
0001a2  b124              CBZ      r4,|L1.430|
0001a4  2c01              CMP      r4,#1                 ;71
0001a6  d009              BEQ      |L1.444|
0001a8  2c02              CMP      r4,#2                 ;72
0001aa  d00e              BEQ      |L1.458|
0001ac  e013              B        |L1.470|
                  |L1.430|
0001ae  f815b006          LDRB     r11,[r5,r6]           ;70
0001b2  ea4b0b0a          ORR      r11,r11,r10           ;70
0001b6  f805b006          STRB     r11,[r5,r6]           ;70
0001ba  e00c              B        |L1.470|
                  |L1.444|
0001bc  f815b006          LDRB     r11,[r5,r6]           ;71
0001c0  ea8b0b0a          EOR      r11,r11,r10           ;71
0001c4  f805b006          STRB     r11,[r5,r6]           ;71
0001c8  e005              B        |L1.470|
                  |L1.458|
0001ca  f815b006          LDRB     r11,[r5,r6]           ;72
0001ce  ea2b0b0a          BIC      r11,r11,r10           ;72
0001d2  f805b006          STRB     r11,[r5,r6]           ;72
                  |L1.470|
0001d6  18ce              ADDS     r6,r1,r3              ;52
0001d8  17f1              ASRS     r1,r6,#31             ;52
0001da  eb067b51          ADD      r11,r6,r1,LSR #29     ;52
0001de  f3cb01cf          UBFX     r1,r11,#3,#16         ;52
0001e2  f1c10103          RSB      r1,r1,#3              ;74
0001e6  eb010a41          ADD      r10,r1,r1,LSL #1      ;74
0001ea  ebca1181          RSB      r1,r10,r1,LSL #6      ;74
0001ee  f02b0a07          BIC      r10,r11,#7            ;54
0001f2  eba6060a          SUB      r6,r6,r10             ;54
0001f6  b2b6              UXTH     r6,r6                 ;54
0001f8  f1c60a08          RSB      r10,r6,#8             ;74
0001fc  26ff              MOVS     r6,#0xff              ;70
0001fe  eb000141          ADD      r1,r0,r1,LSL #1       ;74
000202  fa06f60a          LSL      r6,r6,r10             ;74
000206  b124              CBZ      r4,|L1.530|
000208  2c01              CMP      r4,#1                 ;75
00020a  d009              BEQ      |L1.544|
00020c  2c02              CMP      r4,#2                 ;76
00020e  d00e              BEQ      |L1.558|
000210  e013              B        |L1.570|
                  |L1.530|
000212  f815a001          LDRB     r10,[r5,r1]           ;74
000216  ea4a0a06          ORR      r10,r10,r6            ;74
00021a  f805a001          STRB     r10,[r5,r1]           ;74
00021e  e00c              B        |L1.570|
                  |L1.544|
000220  f815a001          LDRB     r10,[r5,r1]           ;75
000224  ea8a0a06          EOR      r10,r10,r6            ;75
000228  f805a001          STRB     r10,[r5,r1]           ;75
00022c  e005              B        |L1.570|
                  |L1.558|
00022e  f815a001          LDRB     r10,[r5,r1]           ;76
000232  ea2a0a06          BIC      r10,r10,r6            ;76
000236  f805a001          STRB     r10,[r5,r1]           ;76
                  |L1.570|
00023a  1ab9              SUBS     r1,r7,r2              ;78
00023c  2901              CMP      r1,#1                 ;78
00023e  dd36              BLE      |L1.686|
000240  1c51              ADDS     r1,r2,#1              ;80
000242  b289              UXTH     r1,r1                 ;80
000244  e031              B        |L1.682|
                  |L1.582|
000246  b124              CBZ      r4,|L1.594|
000248  2c01              CMP      r4,#1                 ;83
00024a  d011              BEQ      |L1.624|
00024c  2c02              CMP      r4,#2                 ;84
00024e  d01e              BEQ      |L1.654|
000250  e029              B        |L1.678|
                  |L1.594|
000252  f1c10603          RSB      r6,r1,#3              ;82
000256  eb060a46          ADD      r10,r6,r6,LSL #1      ;82
00025a  ebca1686          RSB      r6,r10,r6,LSL #6      ;82
00025e  eb000646          ADD      r6,r0,r6,LSL #1       ;82
000262  f815a006          LDRB     r10,[r5,r6]           ;82
000266  f04f3aff          MOV      r10,#0xffffffff       ;82
00026a  f805a006          STRB     r10,[r5,r6]           ;82
00026e  e01a              B        |L1.678|
                  |L1.624|
000270  f1c10603          RSB      r6,r1,#3              ;83
000274  eb060a46          ADD      r10,r6,r6,LSL #1      ;83
000278  ebca1686          RSB      r6,r10,r6,LSL #6      ;83
00027c  eb000646          ADD      r6,r0,r6,LSL #1       ;83
000280  f815a006          LDRB     r10,[r5,r6]           ;83
000284  ea6f0a0a          MVN      r10,r10               ;83
000288  f805a006          STRB     r10,[r5,r6]           ;83
00028c  e00b              B        |L1.678|
                  |L1.654|
00028e  f1c10603          RSB      r6,r1,#3              ;84
000292  eb060b46          ADD      r11,r6,r6,LSL #1      ;84
000296  ebcb1686          RSB      r6,r11,r6,LSL #6      ;84
00029a  eb000646          ADD      r6,r0,r6,LSL #1       ;84
00029e  f04f0a00          MOV      r10,#0                ;84
0002a2  f805a006          STRB     r10,[r5,r6]           ;84
                  |L1.678|
0002a6  1c49              ADDS     r1,r1,#1              ;80
0002a8  b289              UXTH     r1,r1                 ;80
                  |L1.682|
0002aa  42b9              CMP      r1,r7                 ;80
0002ac  d3cb              BCC      |L1.582|
                  |L1.686|
0002ae  2b00              CMP      r3,#0                 ;90
0002b0  f6bfaf04          BGE      |L1.188|
0002b4  42ba              CMP      r2,r7                 ;93
0002b6  d13e              BNE      |L1.822|
0002b8  f1a90901          SUB      r9,r9,#1              ;95
0002bc  fa1ff189          UXTH     r1,r9                 ;95
0002c0  e036              B        |L1.816|
                  |L1.706|
0002c2  b124              CBZ      r4,|L1.718|
0002c4  2c01              CMP      r4,#1                 ;98
0002c6  d012              BEQ      |L1.750|
0002c8  2c02              CMP      r4,#2                 ;99
0002ca  d020              BEQ      |L1.782|
0002cc  e02e              B        |L1.812|
                  |L1.718|
0002ce  f1c20303          RSB      r3,r2,#3              ;97
0002d2  eb030643          ADD      r6,r3,r3,LSL #1       ;97
0002d6  ebc61383          RSB      r3,r6,r3,LSL #6       ;97
0002da  eb000343          ADD      r3,r0,r3,LSL #1       ;97
0002de  f1c10707          RSB      r7,r1,#7              ;97
0002e2  5cee              LDRB     r6,[r5,r3]            ;97
0002e4  fa0cf707          LSL      r7,r12,r7             ;97
0002e8  433e              ORRS     r6,r6,r7              ;97
0002ea  54ee              STRB     r6,[r5,r3]            ;97
0002ec  e01e              B        |L1.812|
                  |L1.750|
0002ee  f1c20303          RSB      r3,r2,#3              ;98
0002f2  eb030643          ADD      r6,r3,r3,LSL #1       ;98
0002f6  ebc61383          RSB      r3,r6,r3,LSL #6       ;98
0002fa  eb000343          ADD      r3,r0,r3,LSL #1       ;98
0002fe  f1c10707          RSB      r7,r1,#7              ;98
000302  5cee              LDRB     r6,[r5,r3]            ;98
000304  fa0cf707          LSL      r7,r12,r7             ;98
000308  407e              EORS     r6,r6,r7              ;98
00030a  54ee              STRB     r6,[r5,r3]            ;98
00030c  e00e              B        |L1.812|
                  |L1.782|
00030e  f1c20303          RSB      r3,r2,#3              ;99
000312  eb030643          ADD      r6,r3,r3,LSL #1       ;99
000316  ebc61383          RSB      r3,r6,r3,LSL #6       ;99
00031a  eb000343          ADD      r3,r0,r3,LSL #1       ;99
00031e  f1c10707          RSB      r7,r1,#7              ;99
000322  5cee              LDRB     r6,[r5,r3]            ;99
000324  fa0cf707          LSL      r7,r12,r7             ;99
000328  43be              BICS     r6,r6,r7              ;99
00032a  54ee              STRB     r6,[r5,r3]            ;99
                  |L1.812|
00032c  1e49              SUBS     r1,r1,#1              ;95
00032e  b289              UXTH     r1,r1                 ;95
                  |L1.816|
000330  4541              CMP      r1,r8                 ;95
000332  d2c6              BCS      |L1.706|
                  |L1.820|
000334  e6a3              B        |L1.126|
                  |L1.822|
000336  b124              CBZ      r4,|L1.834|
000338  2c01              CMP      r4,#1                 ;105
00033a  d012              BEQ      |L1.866|
00033c  2c02              CMP      r4,#2                 ;106
00033e  d020              BEQ      |L1.898|
000340  e02e              B        |L1.928|
                  |L1.834|
000342  f1c20103          RSB      r1,r2,#3              ;104
000346  eb010341          ADD      r3,r1,r1,LSL #1       ;104
00034a  ebc31181          RSB      r1,r3,r1,LSL #6       ;104
00034e  eb000141          ADD      r1,r0,r1,LSL #1       ;104
000352  f1c90608          RSB      r6,r9,#8              ;104
000356  5c6b              LDRB     r3,[r5,r1]            ;104
000358  fa0ef606          LSL      r6,lr,r6              ;104
00035c  4333              ORRS     r3,r3,r6              ;104
00035e  546b              STRB     r3,[r5,r1]            ;104
000360  e01e              B        |L1.928|
                  |L1.866|
000362  f1c20103          RSB      r1,r2,#3              ;105
000366  eb010341          ADD      r3,r1,r1,LSL #1       ;105
00036a  ebc31181          RSB      r1,r3,r1,LSL #6       ;105
00036e  eb000141          ADD      r1,r0,r1,LSL #1       ;105
000372  f1c90608          RSB      r6,r9,#8              ;105
000376  5c6b              LDRB     r3,[r5,r1]            ;105
000378  fa0ef606          LSL      r6,lr,r6              ;105
00037c  4073              EORS     r3,r3,r6              ;105
00037e  546b              STRB     r3,[r5,r1]            ;105
000380  e00e              B        |L1.928|
                  |L1.898|
000382  f1c20103          RSB      r1,r2,#3              ;106
000386  eb010341          ADD      r3,r1,r1,LSL #1       ;106
00038a  ebc31181          RSB      r1,r3,r1,LSL #6       ;106
00038e  eb000141          ADD      r1,r0,r1,LSL #1       ;106
000392  f1c90608          RSB      r6,r9,#8              ;106
000396  5c6b              LDRB     r3,[r5,r1]            ;106
000398  fa0ef606          LSL      r6,lr,r6              ;106
00039c  43b3              BICS     r3,r3,r6              ;106
00039e  546b              STRB     r3,[r5,r1]            ;106
                  |L1.928|
0003a0  b124              CBZ      r4,|L1.940|
0003a2  2c01              CMP      r4,#1                 ;109
0003a4  d011              BEQ      |L1.970|
0003a6  2c02              CMP      r4,#2                 ;110
0003a8  d01e              BEQ      |L1.1000|
0003aa  e02b              B        |L1.1028|
                  |L1.940|
0003ac  f1c70103          RSB      r1,r7,#3              ;108
0003b0  eb010341          ADD      r3,r1,r1,LSL #1       ;108
0003b4  ebc31181          RSB      r1,r3,r1,LSL #6       ;108
0003b8  eb000141          ADD      r1,r0,r1,LSL #1       ;108
0003bc  fa2efe08          LSR      lr,lr,r8              ;108
0003c0  5c6b              LDRB     r3,[r5,r1]            ;108
0003c2  ea43030e          ORR      r3,r3,lr              ;108
0003c6  546b              STRB     r3,[r5,r1]            ;108
0003c8  e01c              B        |L1.1028|
                  |L1.970|
0003ca  f1c70103          RSB      r1,r7,#3              ;109
0003ce  eb010341          ADD      r3,r1,r1,LSL #1       ;109
0003d2  ebc31181          RSB      r1,r3,r1,LSL #6       ;109
0003d6  eb000141          ADD      r1,r0,r1,LSL #1       ;109
0003da  fa2efe08          LSR      lr,lr,r8              ;109
0003de  5c6b              LDRB     r3,[r5,r1]            ;109
0003e0  ea83030e          EOR      r3,r3,lr              ;109
0003e4  546b              STRB     r3,[r5,r1]            ;109
0003e6  e00d              B        |L1.1028|
                  |L1.1000|
0003e8  f1c70103          RSB      r1,r7,#3              ;110
0003ec  eb010341          ADD      r3,r1,r1,LSL #1       ;110
0003f0  ebc31181          RSB      r1,r3,r1,LSL #6       ;110
0003f4  eb000141          ADD      r1,r0,r1,LSL #1       ;110
0003f8  fa2efe08          LSR      lr,lr,r8              ;110
0003fc  5c6b              LDRB     r3,[r5,r1]            ;110
0003fe  ea23030e          BIC      r3,r3,lr              ;110
000402  546b              STRB     r3,[r5,r1]            ;110
                  |L1.1028|
000404  1bd1              SUBS     r1,r2,r7              ;112
000406  2901              CMP      r1,#1                 ;112
000408  dd94              BLE      |L1.820|
00040a  1e52              SUBS     r2,r2,#1              ;114
00040c  b291              UXTH     r1,r2                 ;114
00040e  e02c              B        |L1.1130|
                  |L1.1040|
000410  b134              CBZ      r4,|L1.1056|
000412  2c01              CMP      r4,#1                 ;117
000414  d011              BEQ      |L1.1082|
000416  2c02              CMP      r4,#2                 ;118
000418  d01b              BEQ      |L1.1106|
00041a  e024              B        |L1.1126|
                  |L1.1052|
                          DCD      lcd_bitmap
                  |L1.1056|
000420  f1c10203          RSB      r2,r1,#3              ;116
000424  eb020342          ADD      r3,r2,r2,LSL #1       ;116
000428  ebc31282          RSB      r2,r3,r2,LSL #6       ;116
00042c  eb000242          ADD      r2,r0,r2,LSL #1       ;116
000430  5cab              LDRB     r3,[r5,r2]            ;116
000432  f04f33ff          MOV      r3,#0xffffffff        ;116
000436  54ab              STRB     r3,[r5,r2]            ;116
000438  e015              B        |L1.1126|
                  |L1.1082|
00043a  f1c10203          RSB      r2,r1,#3              ;117
00043e  eb020342          ADD      r3,r2,r2,LSL #1       ;117
000442  ebc31282          RSB      r2,r3,r2,LSL #6       ;117
000446  eb000242          ADD      r2,r0,r2,LSL #1       ;117
00044a  5cab              LDRB     r3,[r5,r2]            ;117
00044c  43db              MVNS     r3,r3                 ;117
00044e  54ab              STRB     r3,[r5,r2]            ;117
000450  e009              B        |L1.1126|
                  |L1.1106|
000452  f1c10203          RSB      r2,r1,#3              ;118
000456  eb020642          ADD      r6,r2,r2,LSL #1       ;118
00045a  ebc61282          RSB      r2,r6,r2,LSL #6       ;118
00045e  eb000242          ADD      r2,r0,r2,LSL #1       ;118
000462  2300              MOVS     r3,#0                 ;118
000464  54ab              STRB     r3,[r5,r2]            ;118
                  |L1.1126|
000466  1e49              SUBS     r1,r1,#1              ;114
000468  b289              UXTH     r1,r1                 ;114
                  |L1.1130|
00046a  42b9              CMP      r1,r7                 ;114
00046c  d8d0              BHI      |L1.1040|
00046e  e606              B        |L1.126|
;;;126    //---------------------------------------------
                          ENDP

                  draw_rectangle PROC
;;;127    void draw_rectangle(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char solid,char inverse)
000470  e92d47f8          PUSH     {r3-r10,lr}
;;;128    {
000474  4604              MOV      r4,r0
000476  e9dd0809          LDRD     r0,r8,[sp,#0x24]
00047a  460f              MOV      r7,r1
00047c  4692              MOV      r10,r2
00047e  461e              MOV      r6,r3
;;;129    
;;;130    signed short i;
;;;131    /*draw(x_b,y_b,0,y_o,inverse);
;;;132    draw(x_b,y_b+y_o,x_o,0,inverse);
;;;133    draw(x_b+x_o,y_b+y_o,0,-y_o,inverse);
;;;134    draw(x_b+x_o,y_b,-x_o,0,inverse);*/
;;;135    
;;;136    if(solid)
;;;137    	{
;;;138    	for(i=x_b;i<=(x_b+x_o);i++)
000480  eb04050a          ADD      r5,r4,r10
000484  b950              CBNZ     r0,|L1.1180|
000486  e00d              B        |L1.1188|
                  |L1.1160|
;;;139    		{
;;;140    		draw(i,y_b,0,y_o,inverse);
000488  4633              MOV      r3,r6
00048a  2200              MOVS     r2,#0
00048c  4639              MOV      r1,r7
00048e  4620              MOV      r0,r4
000490  f8cd8000          STR      r8,[sp,#0]
000494  f7fffffe          BL       draw
000498  1c64              ADDS     r4,r4,#1              ;138
00049a  b224              SXTH     r4,r4                 ;138
                  |L1.1180|
00049c  42a5              CMP      r5,r4                 ;138
00049e  daf3              BGE      |L1.1160|
                  |L1.1184|
;;;141    		}
;;;142    	}
;;;143    else
;;;144    	{
;;;145    	draw(x_b,y_b,0,y_o,inverse);
;;;146    	draw(x_b,y_b+y_o-1,x_o,0,inverse);
;;;147    	draw(x_b+x_o-1,y_b+y_o,0,-y_o,inverse);
;;;148    	draw(x_b+x_o-1,y_b,-x_o,0,inverse);	
;;;149    	}	
;;;150    
;;;151    }
0004a0  e8bd87f8          POP      {r3-r10,pc}
                  |L1.1188|
0004a4  4633              MOV      r3,r6                 ;145
0004a6  2200              MOVS     r2,#0                 ;145
0004a8  4639              MOV      r1,r7                 ;145
0004aa  4620              MOV      r0,r4                 ;145
0004ac  f8cd8000          STR      r8,[sp,#0]            ;145
0004b0  f7fffffe          BL       draw
0004b4  eb070906          ADD      r9,r7,r6              ;146
0004b8  f1a90001          SUB      r0,r9,#1              ;146
0004bc  b201              SXTH     r1,r0                 ;146
0004be  2300              MOVS     r3,#0                 ;146
0004c0  4652              MOV      r2,r10                ;146
0004c2  4620              MOV      r0,r4                 ;146
0004c4  f8cd8000          STR      r8,[sp,#0]            ;146
0004c8  f7fffffe          BL       draw
0004cc  1e6d              SUBS     r5,r5,#1              ;147
0004ce  4270              RSBS     r0,r6,#0              ;147
0004d0  b22c              SXTH     r4,r5                 ;147
0004d2  b203              SXTH     r3,r0                 ;147
0004d4  fa0ff189          SXTH     r1,r9                 ;147
0004d8  2200              MOVS     r2,#0                 ;147
0004da  4620              MOV      r0,r4                 ;147
0004dc  f8cd8000          STR      r8,[sp,#0]            ;147
0004e0  f7fffffe          BL       draw
0004e4  f1ca0000          RSB      r0,r10,#0             ;148
0004e8  b202              SXTH     r2,r0                 ;148
0004ea  2300              MOVS     r3,#0                 ;148
0004ec  4639              MOV      r1,r7                 ;148
0004ee  4620              MOV      r0,r4                 ;148
0004f0  f8cd8000          STR      r8,[sp,#0]            ;148
0004f4  f7fffffe          BL       draw
0004f8  e7d2              B        |L1.1184|
;;;152    
                          ENDP

                  draw_ptr PROC
;;;153    //---------------------------------------------
;;;154    void draw_ptr(char x_b,char y_b,char ptr,char vol)
0004fa  e92d41f8          PUSH     {r3-r8,lr}
;;;155    {
0004fe  4680              MOV      r8,r0
000500  460e              MOV      r6,r1
000502  461d              MOV      r5,r3
;;;156    char i;
;;;157    if(ptr==0)
000504  b11a              CBZ      r2,|L1.1294|
;;;158    	{
;;;159    	for(i=0;i<vol;i++)
;;;160    		{
;;;161    		draw(x_b,y_b+i,-(vol-i),0,0);
;;;162    		draw(x_b,y_b+i,(vol-i),0,0);
;;;163    		}
;;;164    	}
;;;165    else if(ptr==2)
000506  2a02              CMP      r2,#2
000508  d116              BNE      |L1.1336|
;;;166    	{
;;;167    	for(i=0;i<vol;i++)
00050a  2400              MOVS     r4,#0
00050c  e027              B        |L1.1374|
                  |L1.1294|
00050e  2400              MOVS     r4,#0                 ;159
000510  e010              B        |L1.1332|
                  |L1.1298|
000512  2300              MOVS     r3,#0                 ;161
000514  1937              ADDS     r7,r6,r4              ;161
000516  1b62              SUBS     r2,r4,r5              ;161
000518  4639              MOV      r1,r7                 ;161
00051a  4640              MOV      r0,r8                 ;161
00051c  9300              STR      r3,[sp,#0]            ;161
00051e  f7fffffe          BL       draw
000522  2300              MOVS     r3,#0                 ;162
000524  1b2a              SUBS     r2,r5,r4              ;162
000526  4639              MOV      r1,r7                 ;162
000528  4640              MOV      r0,r8                 ;162
00052a  9300              STR      r3,[sp,#0]            ;162
00052c  f7fffffe          BL       draw
000530  1c64              ADDS     r4,r4,#1              ;159
000532  b2e4              UXTB     r4,r4                 ;159
                  |L1.1332|
000534  42ac              CMP      r4,r5                 ;159
000536  d3ec              BCC      |L1.1298|
                  |L1.1336|
;;;168    		{
;;;169    		draw(x_b,y_b-i,-(vol-i),0,0);
;;;170    		draw(x_b,y_b-i,(vol-i),0,0);
;;;171    		}
;;;172    	}	
;;;173    }
000538  e8bd81f8          POP      {r3-r8,pc}
                  |L1.1340|
00053c  2300              MOVS     r3,#0                 ;169
00053e  1b37              SUBS     r7,r6,r4              ;169
000540  1b62              SUBS     r2,r4,r5              ;169
000542  4639              MOV      r1,r7                 ;169
000544  4640              MOV      r0,r8                 ;169
000546  9300              STR      r3,[sp,#0]            ;169
000548  f7fffffe          BL       draw
00054c  2300              MOVS     r3,#0                 ;170
00054e  1b2a              SUBS     r2,r5,r4              ;170
000550  4639              MOV      r1,r7                 ;170
000552  4640              MOV      r0,r8                 ;170
000554  9300              STR      r3,[sp,#0]            ;170
000556  f7fffffe          BL       draw
00055a  1c64              ADDS     r4,r4,#1              ;167
00055c  b2e4              UXTB     r4,r4                 ;167
                  |L1.1374|
00055e  42ac              CMP      r4,r5                 ;167
000560  d3ec              BCC      |L1.1340|
000562  e7e9              B        |L1.1336|
;;;174    
                          ENDP

                  plot PROC
;;;175    //-----------------------------------------------
;;;176    void plot(signed short x_b,signed short y_b,unsigned long data,signed short len,char inverse)
000564  e92d47f8          PUSH     {r3-r10,lr}
;;;177    {
000568  f8dd9024          LDR      r9,[sp,#0x24]
;;;178    //unsigned short num_byte;
;;;179    //signed short byte_offset;
;;;180    //unsigned short x_target;
;;;181    //unsigned short i;
;;;182    char num_bite;
;;;183    unsigned short /*y_begin*/y_bit_begin;
;;;184    //unsigned short y_target,y_bit_target;
;;;185    unsigned long data1/*,data2*/;
;;;186    char data1_0,data1_1,data1_2,data1_3;
;;;187    
;;;188    data1=0xffffffffUL;
00056c  f04f34ff          MOV      r4,#0xffffffff
;;;189    data1<<=(32-len);
000570  f1c30320          RSB      r3,r3,#0x20
000574  409c              LSLS     r4,r4,r3
000576  9400              STR      r4,[sp,#0]
;;;190    data1&=data;
000578  9b00              LDR      r3,[sp,#0]
00057a  4013              ANDS     r3,r3,r2
00057c  9300              STR      r3,[sp,#0]
;;;191    data1=data1>>y_b;
00057e  9a00              LDR      r2,[sp,#0]
000580  40ca              LSRS     r2,r2,r1
000582  9200              STR      r2,[sp,#0]
;;;192    
;;;193    data1_0=*((char*)&data1);
000584  f89d6000          LDRB     r6,[sp,#0]
;;;194    data1_1=*(((char*)&data1)+1);
000588  f89d7001          LDRB     r7,[sp,#1]
;;;195    data1_2=*(((char*)&data1)+2);
00058c  f89dc002          LDRB     r12,[sp,#2]
;;;196    data1_3=*(((char*)&data1)+3);
000590  f89d8003          LDRB     r8,[sp,#3]
;;;197    
;;;198    if(!inverse)
;;;199    	{
;;;200    	lcd_bitmap[x_b]|=data1_0;
000594  f8dfa2cc          LDR      r10,|L1.2148|
000598  f1b90f00          CMP      r9,#0                 ;198
00059c  eb0a0100          ADD      r1,r10,r0
0005a0  f81a2000          LDRB     r2,[r10,r0]
;;;201    	lcd_bitmap[122+x_b]|=data1_1;
0005a4  f891307a          LDRB     r3,[r1,#0x7a]
;;;202    	lcd_bitmap[244+x_b]|=data1_2;
0005a8  f89140f4          LDRB     r4,[r1,#0xf4]
;;;203    	lcd_bitmap[366+x_b]|=data1_3;
0005ac  f891516e          LDRB     r5,[r1,#0x16e]
0005b0  d00e              BEQ      |L1.1488|
;;;204    	}
;;;205    else if(inverse)
;;;206    	{
;;;207    	lcd_bitmap[x_b]^=data1_0;
0005b2  4072              EORS     r2,r2,r6
0005b4  f80a2000          STRB     r2,[r10,r0]
;;;208    	lcd_bitmap[122+x_b]^=data1_1;
0005b8  407b              EORS     r3,r3,r7
0005ba  f881307a          STRB     r3,[r1,#0x7a]
;;;209    	lcd_bitmap[244+x_b]^=data1_2;
0005be  ea84040c          EOR      r4,r4,r12
0005c2  f88140f4          STRB     r4,[r1,#0xf4]
;;;210    	lcd_bitmap[366+x_b]^=data1_3;
0005c6  ea850508          EOR      r5,r5,r8
0005ca  f881516e          STRB     r5,[r1,#0x16e]
;;;211    	}
;;;212    
;;;213    }	
0005ce  e767              B        |L1.1184|
                  |L1.1488|
0005d0  4332              ORRS     r2,r2,r6              ;200
0005d2  f80a2000          STRB     r2,[r10,r0]           ;200
0005d6  433b              ORRS     r3,r3,r7              ;201
0005d8  f881307a          STRB     r3,[r1,#0x7a]         ;201
0005dc  ea44040c          ORR      r4,r4,r12             ;202
0005e0  f88140f4          STRB     r4,[r1,#0xf4]         ;202
0005e4  ea450508          ORR      r5,r5,r8              ;203
0005e8  f881516e          STRB     r5,[r1,#0x16e]        ;203
0005ec  e758              B        |L1.1184|
;;;214    
                          ENDP

                  graphic_print PROC
;;;216    //-----------------------------------------------
;;;217    void graphic_print(signed short x_b,signed short y_b,signed short x_l,signed short y_l,signed short x_d,signed short y_d,const char* adress,char inverse)
0005ee  e92d4ffc          PUSH     {r2-r11,lr}
;;;218    {
0005f2  4606              MOV      r6,r0
0005f4  e9dd8b0d          LDRD     r8,r11,[sp,#0x34]
0005f8  9d0c              LDR      r5,[sp,#0x30]
0005fa  4689              MOV      r9,r1
0005fc  4617              MOV      r7,r2
0005fe  469a              MOV      r10,r3
;;;219    signed short i;
;;;220    
;;;221    for(i=0;i<x_l;i++)
000600  2400              MOVS     r4,#0
000602  e01c              B        |L1.1598|
                  |L1.1540|
;;;222    	{
;;;223    	long data;
;;;224    	
;;;225    	*(((char*)&data)+3)=adress[(i*y_d)+y_d-1];
000604  fb048005          MLA      r0,r4,r5,r8
000608  1e69              SUBS     r1,r5,#1
00060a  5c41              LDRB     r1,[r0,r1]
00060c  f88d1007          STRB     r1,[sp,#7]
;;;226    	*(((char*)&data)+2)=adress[(i*y_d)+y_d-2];
000610  1ea9              SUBS     r1,r5,#2
000612  5c41              LDRB     r1,[r0,r1]
000614  f88d1006          STRB     r1,[sp,#6]
;;;227    	*(((char*)&data)+1)=adress[(i*y_d)+y_d-3];
000618  1ee9              SUBS     r1,r5,#3
00061a  5c41              LDRB     r1,[r0,r1]
00061c  f88d1005          STRB     r1,[sp,#5]
;;;228    	*((char*)&data)=adress[(i*y_d)+y_d-4];
000620  1f29              SUBS     r1,r5,#4
000622  5c40              LDRB     r0,[r0,r1]
000624  f88d0004          STRB     r0,[sp,#4]
;;;229    	
;;;230    	//data=0x08000000;
;;;231    	
;;;232    	plot(x_b+i,y_b,data,y_l,inverse);
000628  1930              ADDS     r0,r6,r4
00062a  b200              SXTH     r0,r0
00062c  4653              MOV      r3,r10
00062e  f8cdb000          STR      r11,[sp,#0]
000632  4649              MOV      r1,r9
000634  9a01              LDR      r2,[sp,#4]
000636  f7fffffe          BL       plot
00063a  1c64              ADDS     r4,r4,#1              ;221
00063c  b224              SXTH     r4,r4                 ;221
                  |L1.1598|
00063e  42bc              CMP      r4,r7                 ;221
000640  dbe0              BLT      |L1.1540|
;;;233    	}
;;;234    }
000642  e8bd8ffc          POP      {r2-r11,pc}
;;;235    
                          ENDP

                  graphic_print_text PROC
;;;236    //-----------------------------------------------
;;;237    void graphic_print_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse)
000646  e92d4fff          PUSH     {r0-r11,lr}
;;;238    {
00064a  b095              SUB      sp,sp,#0x54
00064c  460e              MOV      r6,r1
00064e  e9dd8723          LDRD     r8,r7,[sp,#0x8c]
000652  9922              LDR      r1,[sp,#0x88]
000654  4605              MOV      r5,r0
;;;239    signed short i;
;;;240    char buffer[10];
;;;241    char bitmap_buffer[60];
;;;242    for(i=0;i<10;i++)
000656  2000              MOVS     r0,#0
;;;243    	{
;;;244    	buffer[i]=' ';
000658  f04f0920          MOV      r9,#0x20
00065c  f10d0c48          ADD      r12,sp,#0x48          ;240
                  |L1.1632|
000660  f80c9000          STRB     r9,[r12,r0]
000664  1c40              ADDS     r0,r0,#1              ;242
000666  b200              SXTH     r0,r0                 ;242
000668  280a              CMP      r0,#0xa               ;242
00066a  dbf9              BLT      |L1.1632|
;;;245    	}
;;;246    for(i=0;i<num;i++)
00066c  2000              MOVS     r0,#0
00066e  e004              B        |L1.1658|
                  |L1.1648|
;;;247    	{
;;;248    	buffer[i]=bgnd[i];
000670  5c14              LDRB     r4,[r2,r0]
000672  f80c4000          STRB     r4,[r12,r0]
000676  1c40              ADDS     r0,r0,#1              ;246
000678  b200              SXTH     r0,r0                 ;246
                  |L1.1658|
00067a  4298              CMP      r0,r3                 ;246
00067c  dbf8              BLT      |L1.1648|
;;;249    	}	
;;;250    	
;;;251    {	
;;;252    signed char i;
;;;253    //char n;
;;;254    char s[10];
;;;255    char minus='+';
00067e  f04f0b2b          MOV      r11,#0x2b
;;;256    char zero_on;
;;;257    char simb_num;
;;;258    
;;;259    if(data<0)
000682  2900              CMP      r1,#0
000684  da03              BGE      |L1.1678|
;;;260    	{
;;;261    	data=-data;
000686  4248              RSBS     r0,r1,#0
000688  b201              SXTH     r1,r0
;;;262    	minus='-';
00068a  f04f0b2d          MOV      r11,#0x2d
                  |L1.1678|
;;;263    	}
;;;264    
;;;265    for(i=0;i<10;i++)
00068e  2000              MOVS     r0,#0
;;;266    	{
;;;267    	s[i]=data%10;
000690  240a              MOVS     r4,#0xa
000692  46ea              MOV      r10,sp                ;254
                  |L1.1684|
000694  fb91f2f4          SDIV     r2,r1,r4
000698  fb041112          MLS      r1,r4,r2,r1
00069c  f80a1000          STRB     r1,[r10,r0]
;;;268    	data/=10;
0006a0  b211              SXTH     r1,r2
0006a2  1c40              ADDS     r0,r0,#1              ;265
0006a4  b240              SXTB     r0,r0                 ;265
0006a6  280a              CMP      r0,#0xa               ;265
0006a8  dbf4              BLT      |L1.1684|
;;;269    	}   
;;;270    
;;;271    zero_on=1;
0006aa  2001              MOVS     r0,#1
;;;272    simb_num=0;
0006ac  2400              MOVS     r4,#0
;;;273    
;;;274    for (i=9;i>=0;i--)
0006ae  2209              MOVS     r2,#9
                  |L1.1712|
;;;275    	{
;;;276    	if(zero_on&&(!s[i])&&(i>(des)))
0006b0  b138              CBZ      r0,|L1.1730|
0006b2  f81a1002          LDRB     r1,[r10,r2]
0006b6  b921              CBNZ     r1,|L1.1730|
0006b8  4542              CMP      r2,r8
0006ba  dd02              BLE      |L1.1730|
;;;277    	     {
;;;278    	     s[i]=0x20;
0006bc  f80a9002          STRB     r9,[r10,r2]
0006c0  e007              B        |L1.1746|
                  |L1.1730|
;;;279    	     }
;;;280    	else 
;;;281    	     {
;;;282    	     s[i]=s[i]+0x30;
0006c2  f81a0002          LDRB     r0,[r10,r2]
0006c6  3030              ADDS     r0,r0,#0x30
0006c8  f80a0002          STRB     r0,[r10,r2]
;;;283    	     zero_on=0;
0006cc  2000              MOVS     r0,#0
;;;284    	     simb_num++;
0006ce  1c64              ADDS     r4,r4,#1
0006d0  b2e4              UXTB     r4,r4
                  |L1.1746|
0006d2  1e52              SUBS     r2,r2,#1              ;274
0006d4  b252              SXTB     r2,r2                 ;274
0006d6  2a00              CMP      r2,#0                 ;274
0006d8  daea              BGE      |L1.1712|
;;;285    	     }
;;;286    	 }
;;;287    	          
;;;288    if(minus=='-')	
0006da  f1bb0f2d          CMP      r11,#0x2d
0006de  d104              BNE      |L1.1770|
;;;289         {
;;;290         s[simb_num++]=minus; 
0006e0  4620              MOV      r0,r4
0006e2  1c64              ADDS     r4,r4,#1
0006e4  b2e4              UXTB     r4,r4
0006e6  f80ab000          STRB     r11,[r10,r0]
                  |L1.1770|
;;;291         }    
;;;292    if(des)
0006ea  f1b80f00          CMP      r8,#0
0006ee  d010              BEQ      |L1.1810|
;;;293         {
;;;294         for(i=simb_num;i>des;i--)
0006f0  b262              SXTB     r2,r4
0006f2  e007              B        |L1.1796|
                  |L1.1780|
;;;295              {
;;;296              s[i]=s[i-1];
0006f4  eb0a0002          ADD      r0,r10,r2
0006f8  f8100c01          LDRB     r0,[r0,#-1]
0006fc  f80a0002          STRB     r0,[r10,r2]
000700  1e52              SUBS     r2,r2,#1              ;294
000702  b252              SXTB     r2,r2                 ;294
                  |L1.1796|
000704  4542              CMP      r2,r8                 ;294
000706  dcf5              BGT      |L1.1780|
;;;297              }
;;;298         s[des]='.';
000708  202e              MOVS     r0,#0x2e
00070a  f80a0008          STRB     r0,[r10,r8]
;;;299         simb_num++;     
00070e  1c64              ADDS     r4,r4,#1
000710  b2e4              UXTB     r4,r4
                  |L1.1810|
;;;300         }
;;;301    	
;;;302    for (i=0;i<simb_num;i++)
000712  2200              MOVS     r2,#0
000714  e007              B        |L1.1830|
                  |L1.1814|
;;;303    	{
;;;304         buffer[pos-1-i]=s[i];
000716  1ab9              SUBS     r1,r7,r2
000718  4461              ADD      r1,r1,r12
00071a  f81a0002          LDRB     r0,[r10,r2]
00071e  f8010c01          STRB     r0,[r1,#-1]
000722  1c52              ADDS     r2,r2,#1              ;302
000724  b252              SXTB     r2,r2                 ;302
                  |L1.1830|
000726  42a2              CMP      r2,r4                 ;302
000728  dbf5              BLT      |L1.1814|
;;;305    	}
;;;306    }	
;;;307    	
;;;308    		
;;;309    for(i=0;i<num;i++)
00072a  2200              MOVS     r2,#0
00072c  af03              ADD      r7,sp,#0xc            ;241
00072e  e01a              B        |L1.1894|
                  |L1.1840|
;;;310    	{
;;;311    	bitmap_buffer[(6*i)+0]=caracter[(unsigned)buffer[i]*6];
000730  f81c0002          LDRB     r0,[r12,r2]
000734  4c4c              LDR      r4,|L1.2152|
000736  eb000040          ADD      r0,r0,r0,LSL #1
00073a  eb020142          ADD      r1,r2,r2,LSL #1
00073e  f8148010          LDRB     r8,[r4,r0,LSL #1]
000742  f8078011          STRB     r8,[r7,r1,LSL #1]
;;;312    	bitmap_buffer[(6*i)+1]=caracter[((unsigned)buffer[i]*6)+1];
000746  eb040040          ADD      r0,r4,r0,LSL #1
00074a  eb070141          ADD      r1,r7,r1,LSL #1
00074e  7844              LDRB     r4,[r0,#1]
000750  704c              STRB     r4,[r1,#1]
;;;313    	bitmap_buffer[(6*i)+2]=caracter[((unsigned)buffer[i]*6)+2];
000752  7884              LDRB     r4,[r0,#2]
000754  708c              STRB     r4,[r1,#2]
;;;314    	bitmap_buffer[(6*i)+3]=caracter[((unsigned)buffer[i]*6)+3];
000756  78c4              LDRB     r4,[r0,#3]
000758  70cc              STRB     r4,[r1,#3]
;;;315    	bitmap_buffer[(6*i)+4]=caracter[((unsigned)buffer[i]*6)+4];
00075a  7904              LDRB     r4,[r0,#4]
00075c  710c              STRB     r4,[r1,#4]
;;;316    	bitmap_buffer[(6*i)+5]=caracter[((unsigned)buffer[i]*6)+5];
00075e  7940              LDRB     r0,[r0,#5]
000760  7148              STRB     r0,[r1,#5]
000762  1c52              ADDS     r2,r2,#1              ;309
000764  b212              SXTH     r2,r2                 ;309
                  |L1.1894|
000766  429a              CMP      r2,r3                 ;309
000768  dbe2              BLT      |L1.1840|
;;;317    	}
;;;318    for(i=0;i<(num*6);i++)
00076a  2400              MOVS     r4,#0
00076c  eb030843          ADD      r8,r3,r3,LSL #1
000770  e00d              B        |L1.1934|
                  |L1.1906|
;;;319    	{
;;;320    	long data;
;;;321    	
;;;322    	*(((char*)&data)+3)=bitmap_buffer[i];
000772  5d38              LDRB     r0,[r7,r4]
000774  f88d000b          STRB     r0,[sp,#0xb]
;;;323    	
;;;324    	//data=0x08000000;
;;;325    	
;;;326    	plot(x_b+i,y_b,data,8,inverse);
000778  9b25              LDR      r3,[sp,#0x94]
00077a  1928              ADDS     r0,r5,r4
00077c  9300              STR      r3,[sp,#0]
00077e  b200              SXTH     r0,r0
000780  2308              MOVS     r3,#8
000782  4631              MOV      r1,r6
000784  9a02              LDR      r2,[sp,#8]
000786  f7fffffe          BL       plot
00078a  1c64              ADDS     r4,r4,#1              ;318
00078c  b224              SXTH     r4,r4                 ;318
                  |L1.1934|
00078e  ebb40f48          CMP      r4,r8,LSL #1          ;318
000792  dbee              BLT      |L1.1906|
;;;327    	}
;;;328    }
000794  b019              ADD      sp,sp,#0x64
000796  e472              B        |L1.126|
;;;329    
                          ENDP

                  graphic_print_text_text PROC
;;;330    //-----------------------------------------------
;;;331    void graphic_print_text_text(signed short x_b,signed short y_b,const char* bgnd,signed short num,signed short data,signed short des,signed short pos,char inverse)
000798  e92d43f0          PUSH     {r4-r9,lr}
;;;332    {
00079c  b095              SUB      sp,sp,#0x54
00079e  460f              MOV      r7,r1
0007a0  f8dd807c          LDR      r8,[sp,#0x7c]
0007a4  991c              LDR      r1,[sp,#0x70]
0007a6  4606              MOV      r6,r0
;;;333    signed short i;
;;;334    char buffer[10];
;;;335    char bitmap_buffer[60];
;;;336    for(i=0;i<10;i++)
0007a8  2000              MOVS     r0,#0
;;;337    	{
;;;338    	buffer[i]=' ';
0007aa  2420              MOVS     r4,#0x20
0007ac  f10d0c48          ADD      r12,sp,#0x48          ;334
                  |L1.1968|
0007b0  f80c4000          STRB     r4,[r12,r0]
0007b4  1c40              ADDS     r0,r0,#1              ;336
0007b6  b200              SXTH     r0,r0                 ;336
0007b8  280a              CMP      r0,#0xa               ;336
0007ba  dbf9              BLT      |L1.1968|
;;;339    	}
;;;340    for(i=0;i<num;i++)
0007bc  2400              MOVS     r4,#0
0007be  e004              B        |L1.1994|
                  |L1.1984|
;;;341    	{
;;;342    	buffer[i]=bgnd[i];
0007c0  5d10              LDRB     r0,[r2,r4]
0007c2  f80c0004          STRB     r0,[r12,r4]
0007c6  1c64              ADDS     r4,r4,#1              ;340
0007c8  b224              SXTH     r4,r4                 ;340
                  |L1.1994|
0007ca  429c              CMP      r4,r3                 ;340
0007cc  dbf8              BLT      |L1.1984|
;;;343    	}	
;;;344    	
;;;345    {	
;;;346    signed char i;
;;;347    //char n;
;;;348    char s[10];
;;;349    char minus='+';
;;;350    char zero_on;
;;;351    char simb_num;
;;;352    
;;;353    if(data<0)
0007ce  2900              CMP      r1,#0
0007d0  da01              BGE      |L1.2006|
;;;354    	{
;;;355    	data=-data;
0007d2  4248              RSBS     r0,r1,#0
0007d4  b201              SXTH     r1,r0
                  |L1.2006|
;;;356    	minus='-';
;;;357    	}
;;;358    
;;;359    for(i=0;i<10;i++)
0007d6  2000              MOVS     r0,#0
0007d8  466d              MOV      r5,sp                 ;348
;;;360    	{
;;;361    	s[i]=data%10;
0007da  220a              MOVS     r2,#0xa
                  |L1.2012|
0007dc  fb91f4f2          SDIV     r4,r1,r2
0007e0  fb021114          MLS      r1,r2,r4,r1
0007e4  5429              STRB     r1,[r5,r0]
;;;362    	data/=10;
0007e6  b221              SXTH     r1,r4
0007e8  1c40              ADDS     r0,r0,#1              ;359
0007ea  b240              SXTB     r0,r0                 ;359
0007ec  280a              CMP      r0,#0xa               ;359
0007ee  dbf5              BLT      |L1.2012|
;;;363    	}   
;;;364    
;;;365    zero_on=1;
;;;366    simb_num=0;
;;;367    /*
;;;368    for (i=9;i>=0;i--)
;;;369    	{
;;;370    	if(zero_on&&(!s[i])&&(i>(des)))
;;;371    	     {
;;;372    	     s[i]=0x20;
;;;373    	     }
;;;374    	else 
;;;375    	     {
;;;376    	     s[i]=s[i]+0x30;
;;;377    	     zero_on=0;
;;;378    	     simb_num++;
;;;379    	     }
;;;380    	 }
;;;381    	          
;;;382    	
;;;383    */
;;;384    }	
;;;385    	
;;;386    		
;;;387    for(i=0;i<num;i++)
0007f0  2200              MOVS     r2,#0
0007f2  f10d090c          ADD      r9,sp,#0xc            ;335
0007f6  e01a              B        |L1.2094|
                  |L1.2040|
;;;388    	{
;;;389    	bitmap_buffer[(6*i)+0]=caracter[(unsigned)buffer[i]*6];
0007f8  f81c0002          LDRB     r0,[r12,r2]
0007fc  4c1a              LDR      r4,|L1.2152|
0007fe  eb000140          ADD      r1,r0,r0,LSL #1
000802  eb020042          ADD      r0,r2,r2,LSL #1
000806  f8145011          LDRB     r5,[r4,r1,LSL #1]
00080a  f8095010          STRB     r5,[r9,r0,LSL #1]
;;;390    	bitmap_buffer[(6*i)+1]=caracter[((unsigned)buffer[i]*6)+1];
00080e  eb040441          ADD      r4,r4,r1,LSL #1
000812  eb090540          ADD      r5,r9,r0,LSL #1
000816  7861              LDRB     r1,[r4,#1]
000818  7069              STRB     r1,[r5,#1]
;;;391    	bitmap_buffer[(6*i)+2]=caracter[((unsigned)buffer[i]*6)+2];
00081a  78a0              LDRB     r0,[r4,#2]
00081c  70a8              STRB     r0,[r5,#2]
;;;392    	bitmap_buffer[(6*i)+3]=caracter[((unsigned)buffer[i]*6)+3];
00081e  78e0              LDRB     r0,[r4,#3]
000820  70e8              STRB     r0,[r5,#3]
;;;393    	bitmap_buffer[(6*i)+4]=caracter[((unsigned)buffer[i]*6)+4];
000822  7920              LDRB     r0,[r4,#4]
000824  7128              STRB     r0,[r5,#4]
;;;394    	bitmap_buffer[(6*i)+5]=caracter[((unsigned)buffer[i]*6)+5];
000826  7960              LDRB     r0,[r4,#5]
000828  7168              STRB     r0,[r5,#5]
00082a  1c52              ADDS     r2,r2,#1              ;387
00082c  b212              SXTH     r2,r2                 ;387
                  |L1.2094|
00082e  429a              CMP      r2,r3                 ;387
000830  dbe2              BLT      |L1.2040|
;;;395    	}
;;;396    for(i=0;i<(num*6);i++)
000832  2400              MOVS     r4,#0
000834  eb030543          ADD      r5,r3,r3,LSL #1
000838  e00e              B        |L1.2136|
                  |L1.2106|
;;;397    	{
;;;398    	long data;
;;;399    	
;;;400    	*(((char*)&data)+3)=bitmap_buffer[i];
00083a  f8190004          LDRB     r0,[r9,r4]
00083e  f88d000b          STRB     r0,[sp,#0xb]
;;;401    	
;;;402    	//data=0x08000000;
;;;403    	
;;;404    	plot(x_b+i,y_b,data,8,inverse);
000842  1930              ADDS     r0,r6,r4
000844  b200              SXTH     r0,r0
000846  2308              MOVS     r3,#8
000848  f8cd8000          STR      r8,[sp,#0]
00084c  4639              MOV      r1,r7
00084e  9a02              LDR      r2,[sp,#8]
000850  f7fffffe          BL       plot
000854  1c64              ADDS     r4,r4,#1              ;396
000856  b224              SXTH     r4,r4                 ;396
                  |L1.2136|
000858  ebb40f45          CMP      r4,r5,LSL #1          ;396
00085c  dbed              BLT      |L1.2106|
;;;405    	}
;;;406    }
00085e  b015              ADD      sp,sp,#0x54
000860  e8bd83f0          POP      {r4-r9,pc}
                          ENDP

                  |L1.2148|
                          DCD      lcd_bitmap
                  |L1.2152|
                          DCD      caracter
