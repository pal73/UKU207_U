; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU -DAPSENERGIA --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  4efc              LDR      r6,|L1.1016|
;;;308    	{
;;;309    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960022          LDRB     r0,[r6,#0x22]         ;307  ; spc_stat
00000c  2802              CMP      r0,#2                 ;307
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;310    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;311    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;312    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f8dfa3e0          LDR      r10,|L1.1020|
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8dfb3e0          LDR      r11,|L1.1024|
000020  f8df83e0          LDR      r8,|L1.1028|
000024  f8ba0000          LDRH     r0,[r10,#0]           ;315  ; snmp_bat_status
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93dc          LDR      r9,|L1.1032|
00002c  4cf7              LDR      r4,|L1.1036|
00002e  4df8              LDR      r5,|L1.1040|
000030  b148              CBZ      r0,|L1.70|
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  8027              STRH     r7,[r4,#0]
;;;551    	snmp_bat_flag_puts[0]=0;
000034  802f              STRH     r7,[r5,#0]
                  |L1.54|
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8ba0002          LDRH     r0,[r10,#2]  ; snmp_bat_status
00003a  2800              CMP      r0,#0
00003c  d07d              BEQ      |L1.314|
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  8067              STRH     r7,[r4,#2]
;;;790    	snmp_bat_flag_puts[1]=0;
000040  806f              STRH     r7,[r5,#2]
                  |L1.66|
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.70|
000046  f9bb0000          LDRSH    r0,[r11,#0]           ;317  ; USIGN
00004a  f9b82002          LDRSH    r2,[r8,#2]            ;317  ; bat
00004e  eb000380          ADD      r3,r0,r0,LSL #2       ;317
000052  48ee              LDR      r0,|L1.1036|
000054  ebb20f43          CMP      r2,r3,LSL #1          ;317
000058  f9b01000          LDRSH    r1,[r0,#0]            ;319
00005c  48ec              LDR      r0,|L1.1040|
00005e  f9b00000          LDRSH    r0,[r0,#0]            ;320
000062  da0f              BGE      |L1.132|
000064  f0410101          ORR      r1,r1,#1              ;319
000068  8021              STRH     r1,[r4,#0]            ;319
00006a  07c0              LSLS     r0,r0,#31             ;320
00006c  d119              BNE      |L1.162|
00006e  2300              MOVS     r3,#0                 ;322
000070  2208              MOVS     r2,#8                 ;322
000072  2105              MOVS     r1,#5                 ;322
000074  a0e7              ADR      r0,|L1.1044|
000076  f7fffffe          BL       snmp_trap_send
00007a  8828              LDRH     r0,[r5,#0]            ;323  ; snmp_bat_flag_puts
00007c  f0400001          ORR      r0,r0,#1              ;323
000080  8028              STRH     r0,[r5,#0]            ;323
000082  e00e              B        |L1.162|
                  |L1.132|
000084  f0210101          BIC      r1,r1,#1              ;328
000088  8021              STRH     r1,[r4,#0]            ;328
00008a  07c0              LSLS     r0,r0,#31             ;329
00008c  d009              BEQ      |L1.162|
00008e  2301              MOVS     r3,#1                 ;331
000090  2208              MOVS     r2,#8                 ;331
000092  2105              MOVS     r1,#5                 ;331
000094  a0e7              ADR      r0,|L1.1076|
000096  f7fffffe          BL       snmp_trap_send
00009a  8828              LDRH     r0,[r5,#0]            ;332  ; snmp_bat_flag_puts
00009c  f0200001          BIC      r0,r0,#1              ;332
0000a0  8028              STRH     r0,[r5,#0]            ;332
                  |L1.162|
0000a2  f898003f          LDRB     r0,[r8,#0x3f]         ;336  ; bat
0000a6  07c0              LSLS     r0,r0,#31             ;336
0000a8  d011              BEQ      |L1.206|
0000aa  8820              LDRH     r0,[r4,#0]            ;338  ; snmp_bat_flag
0000ac  f0400002          ORR      r0,r0,#2              ;338
0000b0  8020              STRH     r0,[r4,#0]            ;338
0000b2  8828              LDRH     r0,[r5,#0]            ;339  ; snmp_bat_flag_puts
0000b4  0780              LSLS     r0,r0,#30             ;339
0000b6  d41b              BMI      |L1.240|
0000b8  2302              MOVS     r3,#2                 ;341
0000ba  2208              MOVS     r2,#8                 ;341
0000bc  2105              MOVS     r1,#5                 ;341
0000be  a0e7              ADR      r0,|L1.1116|
0000c0  f7fffffe          BL       snmp_trap_send
0000c4  8828              LDRH     r0,[r5,#0]            ;342  ; snmp_bat_flag_puts
0000c6  f0400002          ORR      r0,r0,#2              ;342
0000ca  8028              STRH     r0,[r5,#0]            ;342
0000cc  e010              B        |L1.240|
                  |L1.206|
0000ce  8820              LDRH     r0,[r4,#0]            ;347  ; snmp_bat_flag
0000d0  f0200002          BIC      r0,r0,#2              ;347
0000d4  8020              STRH     r0,[r4,#0]            ;347
0000d6  8828              LDRH     r0,[r5,#0]            ;348  ; snmp_bat_flag_puts
0000d8  0780              LSLS     r0,r0,#30             ;348
0000da  d509              BPL      |L1.240|
0000dc  2303              MOVS     r3,#3                 ;350
0000de  2208              MOVS     r2,#8                 ;350
0000e0  2105              MOVS     r1,#5                 ;350
0000e2  a0e9              ADR      r0,|L1.1160|
0000e4  f7fffffe          BL       snmp_trap_send
0000e8  8828              LDRH     r0,[r5,#0]            ;351  ; snmp_bat_flag_puts
0000ea  f0200002          BIC      r0,r0,#2              ;351
0000ee  8028              STRH     r0,[r5,#0]            ;351
                  |L1.240|
0000f0  f898003f          LDRB     r0,[r8,#0x3f]         ;355  ; bat
0000f4  0780              LSLS     r0,r0,#30             ;355
0000f6  d511              BPL      |L1.284|
0000f8  8820              LDRH     r0,[r4,#0]            ;357  ; snmp_bat_flag
0000fa  f0400004          ORR      r0,r0,#4              ;357
0000fe  8020              STRH     r0,[r4,#0]            ;357
000100  8828              LDRH     r0,[r5,#0]            ;358  ; snmp_bat_flag_puts
000102  0740              LSLS     r0,r0,#29             ;358
000104  d41d              BMI      |L1.322|
000106  2304              MOVS     r3,#4                 ;360
000108  2208              MOVS     r2,#8                 ;360
00010a  2105              MOVS     r1,#5                 ;360
00010c  a0eb              ADR      r0,|L1.1212|
00010e  f7fffffe          BL       snmp_trap_send
000112  8828              LDRH     r0,[r5,#0]            ;361  ; snmp_bat_flag_puts
000114  f0400004          ORR      r0,r0,#4              ;361
000118  8028              STRH     r0,[r5,#0]            ;361
00011a  e012              B        |L1.322|
                  |L1.284|
00011c  8820              LDRH     r0,[r4,#0]            ;366  ; snmp_bat_flag
00011e  f0200004          BIC      r0,r0,#4              ;366
000122  8020              STRH     r0,[r4,#0]            ;366
000124  8828              LDRH     r0,[r5,#0]            ;367  ; snmp_bat_flag_puts
000126  0740              LSLS     r0,r0,#29             ;367
000128  d50b              BPL      |L1.322|
00012a  2305              MOVS     r3,#5                 ;369
00012c  2208              MOVS     r2,#8                 ;369
00012e  4619              MOV      r1,r3                 ;369
000130  a0ec              ADR      r0,|L1.1252|
000132  f7fffffe          BL       snmp_trap_send
000136  8828              LDRH     r0,[r5,#0]            ;370  ; snmp_bat_flag_puts
000138  e000              B        |L1.316|
                  |L1.314|
00013a  e322              B        |L1.1922|
                  |L1.316|
00013c  f0200004          BIC      r0,r0,#4              ;370
000140  8028              STRH     r0,[r5,#0]            ;370
                  |L1.322|
000142  f9b91000          LDRSH    r1,[r9,#0]            ;374  ; IKB
000146  f9b80008          LDRSH    r0,[r8,#8]            ;374  ; bat
00014a  424a              RSBS     r2,r1,#0              ;374
00014c  4290              CMP      r0,r2                 ;374
00014e  da04              BGE      |L1.346|
000150  8820              LDRH     r0,[r4,#0]            ;374  ; snmp_bat_flag
000152  f0400008          ORR      r0,r0,#8              ;374
000156  8020              STRH     r0,[r4,#0]            ;374
000158  e005              B        |L1.358|
                  |L1.346|
00015a  4288              CMP      r0,r1                 ;375
00015c  dd03              BLE      |L1.358|
00015e  8820              LDRH     r0,[r4,#0]            ;375  ; snmp_bat_flag
000160  f0200008          BIC      r0,r0,#8              ;375
000164  8020              STRH     r0,[r4,#0]            ;375
                  |L1.358|
000166  f8960022          LDRB     r0,[r6,#0x22]         ;377  ; spc_stat
00016a  2801              CMP      r0,#1                 ;377
00016c  d103              BNE      |L1.374|
00016e  f8960023          LDRB     r0,[r6,#0x23]         ;377  ; spc_bat
000172  2800              CMP      r0,#0                 ;377
000174  d03a              BEQ      |L1.492|
                  |L1.374|
000176  8820              LDRH     r0,[r4,#0]            ;388  ; snmp_bat_flag
000178  f0200010          BIC      r0,r0,#0x10           ;388
00017c  8020              STRH     r0,[r4,#0]            ;388
00017e  8828              LDRH     r0,[r5,#0]            ;389  ; snmp_bat_flag_puts
000180  06c0              LSLS     r0,r0,#27             ;389
000182  d509              BPL      |L1.408|
000184  2307              MOVS     r3,#7                 ;391
000186  2208              MOVS     r2,#8                 ;391
000188  2105              MOVS     r1,#5                 ;391
00018a  a0e3              ADR      r0,|L1.1304|
00018c  f7fffffe          BL       snmp_trap_send
000190  8828              LDRH     r0,[r5,#0]            ;392  ; snmp_bat_flag_puts
000192  f0200010          BIC      r0,r0,#0x10           ;392
000196  8028              STRH     r0,[r5,#0]            ;392
                  |L1.408|
000198  f8960022          LDRB     r0,[r6,#0x22]         ;396  ; spc_stat
00019c  2802              CMP      r0,#2                 ;396
00019e  d037              BEQ      |L1.528|
0001a0  8820              LDRH     r0,[r4,#0]            ;407  ; snmp_bat_flag
0001a2  f0200020          BIC      r0,r0,#0x20           ;407
0001a6  8020              STRH     r0,[r4,#0]            ;407
0001a8  8828              LDRH     r0,[r5,#0]            ;408  ; snmp_bat_flag_puts
0001aa  0680              LSLS     r0,r0,#26             ;408
0001ac  d509              BPL      |L1.450|
0001ae  2309              MOVS     r3,#9                 ;410
0001b0  2208              MOVS     r2,#8                 ;410
0001b2  2105              MOVS     r1,#5                 ;410
0001b4  a0e0              ADR      r0,|L1.1336|
0001b6  f7fffffe          BL       snmp_trap_send
0001ba  8828              LDRH     r0,[r5,#0]            ;411  ; snmp_bat_flag_puts
0001bc  f0200020          BIC      r0,r0,#0x20           ;411
0001c0  8028              STRH     r0,[r5,#0]            ;411
                  |L1.450|
0001c2  7870              LDRB     r0,[r6,#1]            ;415  ; vz_error
0001c4  2800              CMP      r0,#0                 ;415
0001c6  d035              BEQ      |L1.564|
0001c8  8820              LDRH     r0,[r4,#0]            ;417  ; snmp_bat_flag
0001ca  f0400040          ORR      r0,r0,#0x40           ;417
0001ce  8020              STRH     r0,[r4,#0]            ;417
0001d0  8828              LDRH     r0,[r5,#0]            ;418  ; snmp_bat_flag_puts
0001d2  0640              LSLS     r0,r0,#25             ;418
0001d4  d43f              BMI      |L1.598|
0001d6  230a              MOVS     r3,#0xa               ;420
0001d8  2208              MOVS     r2,#8                 ;420
0001da  2105              MOVS     r1,#5                 ;420
0001dc  a0df              ADR      r0,|L1.1372|
0001de  f7fffffe          BL       snmp_trap_send
0001e2  8828              LDRH     r0,[r5,#0]            ;421  ; snmp_bat_flag_puts
0001e4  f0400040          ORR      r0,r0,#0x40           ;421
0001e8  8028              STRH     r0,[r5,#0]            ;421
0001ea  e034              B        |L1.598|
                  |L1.492|
0001ec  8820              LDRH     r0,[r4,#0]            ;379  ; snmp_bat_flag
0001ee  f0400010          ORR      r0,r0,#0x10           ;379
0001f2  8020              STRH     r0,[r4,#0]            ;379
0001f4  8828              LDRH     r0,[r5,#0]            ;380  ; snmp_bat_flag_puts
0001f6  06c0              LSLS     r0,r0,#27             ;380
0001f8  d4ce              BMI      |L1.408|
0001fa  2306              MOVS     r3,#6                 ;382
0001fc  2208              MOVS     r2,#8                 ;382
0001fe  2105              MOVS     r1,#5                 ;382
000200  a0df              ADR      r0,|L1.1408|
000202  f7fffffe          BL       snmp_trap_send
000206  8828              LDRH     r0,[r5,#0]            ;383  ; snmp_bat_flag_puts
000208  f0400010          ORR      r0,r0,#0x10           ;383
00020c  8028              STRH     r0,[r5,#0]            ;383
00020e  e7c3              B        |L1.408|
                  |L1.528|
000210  8820              LDRH     r0,[r4,#0]            ;398  ; snmp_bat_flag
000212  f0400020          ORR      r0,r0,#0x20           ;398
000216  8020              STRH     r0,[r4,#0]            ;398
000218  8828              LDRH     r0,[r5,#0]            ;399  ; snmp_bat_flag_puts
00021a  0680              LSLS     r0,r0,#26             ;399
00021c  d4d1              BMI      |L1.450|
00021e  2308              MOVS     r3,#8                 ;401
000220  461a              MOV      r2,r3                 ;401
000222  2105              MOVS     r1,#5                 ;401
000224  a0de              ADR      r0,|L1.1440|
000226  f7fffffe          BL       snmp_trap_send
00022a  8828              LDRH     r0,[r5,#0]            ;402  ; snmp_bat_flag_puts
00022c  f0400020          ORR      r0,r0,#0x20           ;402
000230  8028              STRH     r0,[r5,#0]            ;402
000232  e7c6              B        |L1.450|
                  |L1.564|
000234  8820              LDRH     r0,[r4,#0]            ;426  ; snmp_bat_flag
000236  f0200040          BIC      r0,r0,#0x40           ;426
00023a  8020              STRH     r0,[r4,#0]            ;426
00023c  8828              LDRH     r0,[r5,#0]            ;427  ; snmp_bat_flag_puts
00023e  0640              LSLS     r0,r0,#25             ;427
000240  d509              BPL      |L1.598|
000242  230b              MOVS     r3,#0xb               ;429
000244  2208              MOVS     r2,#8                 ;429
000246  2105              MOVS     r1,#5                 ;429
000248  a0de              ADR      r0,|L1.1476|
00024a  f7fffffe          BL       snmp_trap_send
00024e  8828              LDRH     r0,[r5,#0]            ;430  ; snmp_bat_flag_puts
000250  f0200040          BIC      r0,r0,#0x40           ;430
000254  8028              STRH     r0,[r5,#0]            ;430
                  |L1.598|
000256  48e4              LDR      r0,|L1.1512|
000258  7800              LDRB     r0,[r0,#0]            ;434  ; sp_ch_stat
00025a  2802              CMP      r0,#2                 ;434
00025c  d024              BEQ      |L1.680|
00025e  8820              LDRH     r0,[r4,#0]            ;445  ; snmp_bat_flag
000260  f0200080          BIC      r0,r0,#0x80           ;445
000264  8020              STRH     r0,[r4,#0]            ;445
000266  8828              LDRH     r0,[r5,#0]            ;446  ; snmp_bat_flag_puts
000268  0600              LSLS     r0,r0,#24             ;446
00026a  d509              BPL      |L1.640|
00026c  230b              MOVS     r3,#0xb               ;448
00026e  2208              MOVS     r2,#8                 ;448
000270  2105              MOVS     r1,#5                 ;448
000272  a0de              ADR      r0,|L1.1516|
000274  f7fffffe          BL       snmp_trap_send
000278  8828              LDRH     r0,[r5,#0]            ;449  ; snmp_bat_flag_puts
00027a  f0200080          BIC      r0,r0,#0x80           ;449
00027e  8028              STRH     r0,[r5,#0]            ;449
                  |L1.640|
000280  78b0              LDRB     r0,[r6,#2]            ;453  ; sp_ch_error
000282  b318              CBZ      r0,|L1.716|
000284  8820              LDRH     r0,[r4,#0]            ;455  ; snmp_bat_flag
000286  f4407080          ORR      r0,r0,#0x100          ;455
00028a  8020              STRH     r0,[r4,#0]            ;455
00028c  8828              LDRH     r0,[r5,#0]            ;456  ; snmp_bat_flag_puts
00028e  05c0              LSLS     r0,r0,#23             ;456
000290  d42d              BMI      |L1.750|
000292  230c              MOVS     r3,#0xc               ;458
000294  2208              MOVS     r2,#8                 ;458
000296  2105              MOVS     r1,#5                 ;458
000298  a0dc              ADR      r0,|L1.1548|
00029a  f7fffffe          BL       snmp_trap_send
00029e  8828              LDRH     r0,[r5,#0]            ;459  ; snmp_bat_flag_puts
0002a0  f4407080          ORR      r0,r0,#0x100          ;459
0002a4  8028              STRH     r0,[r5,#0]            ;459
0002a6  e022              B        |L1.750|
                  |L1.680|
0002a8  8820              LDRH     r0,[r4,#0]            ;436  ; snmp_bat_flag
0002aa  f0400080          ORR      r0,r0,#0x80           ;436
0002ae  8020              STRH     r0,[r4,#0]            ;436
0002b0  8828              LDRH     r0,[r5,#0]            ;437  ; snmp_bat_flag_puts
0002b2  0600              LSLS     r0,r0,#24             ;437
0002b4  d4e4              BMI      |L1.640|
0002b6  230a              MOVS     r3,#0xa               ;439
0002b8  2208              MOVS     r2,#8                 ;439
0002ba  2105              MOVS     r1,#5                 ;439
0002bc  a0db              ADR      r0,|L1.1580|
0002be  f7fffffe          BL       snmp_trap_send
0002c2  8828              LDRH     r0,[r5,#0]            ;440  ; snmp_bat_flag_puts
0002c4  f0400080          ORR      r0,r0,#0x80           ;440
0002c8  8028              STRH     r0,[r5,#0]            ;440
0002ca  e7d9              B        |L1.640|
                  |L1.716|
0002cc  8820              LDRH     r0,[r4,#0]            ;464  ; snmp_bat_flag
0002ce  f4207080          BIC      r0,r0,#0x100          ;464
0002d2  8020              STRH     r0,[r4,#0]            ;464
0002d4  8828              LDRH     r0,[r5,#0]            ;465  ; snmp_bat_flag_puts
0002d6  05c0              LSLS     r0,r0,#23             ;465
0002d8  d509              BPL      |L1.750|
0002da  230d              MOVS     r3,#0xd               ;467
0002dc  2208              MOVS     r2,#8                 ;467
0002de  2105              MOVS     r1,#5                 ;467
0002e0  a0da              ADR      r0,|L1.1612|
0002e2  f7fffffe          BL       snmp_trap_send
0002e6  8828              LDRH     r0,[r5,#0]            ;468  ; snmp_bat_flag_puts
0002e8  f4207080          BIC      r0,r0,#0x100          ;468
0002ec  8028              STRH     r0,[r5,#0]            ;468
                  |L1.750|
0002ee  7970              LDRB     r0,[r6,#5]            ;472  ; vz1_stat
0002f0  b188              CBZ      r0,|L1.790|
0002f2  8820              LDRH     r0,[r4,#0]            ;474  ; snmp_bat_flag
0002f4  f4407000          ORR      r0,r0,#0x200          ;474
0002f8  8020              STRH     r0,[r4,#0]            ;474
0002fa  8828              LDRH     r0,[r5,#0]            ;475  ; snmp_bat_flag_puts
0002fc  0580              LSLS     r0,r0,#22             ;475
0002fe  d41b              BMI      |L1.824|
000300  230e              MOVS     r3,#0xe               ;477
000302  2208              MOVS     r2,#8                 ;477
000304  2105              MOVS     r1,#5                 ;477
000306  a0da              ADR      r0,|L1.1648|
000308  f7fffffe          BL       snmp_trap_send
00030c  8828              LDRH     r0,[r5,#0]            ;478  ; snmp_bat_flag_puts
00030e  f4407000          ORR      r0,r0,#0x200          ;478
000312  8028              STRH     r0,[r5,#0]            ;478
000314  e010              B        |L1.824|
                  |L1.790|
000316  8820              LDRH     r0,[r4,#0]            ;483  ; snmp_bat_flag
000318  f4207000          BIC      r0,r0,#0x200          ;483
00031c  8020              STRH     r0,[r4,#0]            ;483
00031e  8828              LDRH     r0,[r5,#0]            ;484  ; snmp_bat_flag_puts
000320  0580              LSLS     r0,r0,#22             ;484
000322  d509              BPL      |L1.824|
000324  230f              MOVS     r3,#0xf               ;486
000326  2208              MOVS     r2,#8                 ;486
000328  2105              MOVS     r1,#5                 ;486
00032a  a0d9              ADR      r0,|L1.1680|
00032c  f7fffffe          BL       snmp_trap_send
000330  8828              LDRH     r0,[r5,#0]            ;487  ; snmp_bat_flag_puts
000332  f4207000          BIC      r0,r0,#0x200          ;487
000336  8028              STRH     r0,[r5,#0]            ;487
                  |L1.824|
000338  78f0              LDRB     r0,[r6,#3]            ;491  ; vz1_error
00033a  b188              CBZ      r0,|L1.864|
00033c  8820              LDRH     r0,[r4,#0]            ;493  ; snmp_bat_flag
00033e  f4406080          ORR      r0,r0,#0x400          ;493
000342  8020              STRH     r0,[r4,#0]            ;493
000344  8828              LDRH     r0,[r5,#0]            ;494  ; snmp_bat_flag_puts
000346  0540              LSLS     r0,r0,#21             ;494
000348  d41b              BMI      |L1.898|
00034a  2310              MOVS     r3,#0x10              ;496
00034c  2208              MOVS     r2,#8                 ;496
00034e  2105              MOVS     r1,#5                 ;496
000350  a0d7              ADR      r0,|L1.1712|
000352  f7fffffe          BL       snmp_trap_send
000356  8828              LDRH     r0,[r5,#0]            ;497  ; snmp_bat_flag_puts
000358  f4406080          ORR      r0,r0,#0x400          ;497
00035c  8028              STRH     r0,[r5,#0]            ;497
00035e  e010              B        |L1.898|
                  |L1.864|
000360  8820              LDRH     r0,[r4,#0]            ;502  ; snmp_bat_flag
000362  f4206080          BIC      r0,r0,#0x400          ;502
000366  8020              STRH     r0,[r4,#0]            ;502
000368  8828              LDRH     r0,[r5,#0]            ;503  ; snmp_bat_flag_puts
00036a  0540              LSLS     r0,r0,#21             ;503
00036c  d509              BPL      |L1.898|
00036e  2311              MOVS     r3,#0x11              ;505
000370  2208              MOVS     r2,#8                 ;505
000372  2105              MOVS     r1,#5                 ;505
000374  a0d7              ADR      r0,|L1.1748|
000376  f7fffffe          BL       snmp_trap_send
00037a  8828              LDRH     r0,[r5,#0]            ;506  ; snmp_bat_flag_puts
00037c  f4206080          BIC      r0,r0,#0x400          ;506
000380  8028              STRH     r0,[r5,#0]            ;506
                  |L1.898|
000382  79f0              LDRB     r0,[r6,#7]            ;510  ; vz2_stat
000384  b188              CBZ      r0,|L1.938|
000386  8820              LDRH     r0,[r4,#0]            ;512  ; snmp_bat_flag
000388  f4406000          ORR      r0,r0,#0x800          ;512
00038c  8020              STRH     r0,[r4,#0]            ;512
00038e  8828              LDRH     r0,[r5,#0]            ;513  ; snmp_bat_flag_puts
000390  0500              LSLS     r0,r0,#20             ;513
000392  d41b              BMI      |L1.972|
000394  2312              MOVS     r3,#0x12              ;515
000396  2208              MOVS     r2,#8                 ;515
000398  2105              MOVS     r1,#5                 ;515
00039a  a0d8              ADR      r0,|L1.1788|
00039c  f7fffffe          BL       snmp_trap_send
0003a0  8828              LDRH     r0,[r5,#0]            ;516  ; snmp_bat_flag_puts
0003a2  f4406000          ORR      r0,r0,#0x800          ;516
0003a6  8028              STRH     r0,[r5,#0]            ;516
0003a8  e010              B        |L1.972|
                  |L1.938|
0003aa  8820              LDRH     r0,[r4,#0]            ;521  ; snmp_bat_flag
0003ac  f4206000          BIC      r0,r0,#0x800          ;521
0003b0  8020              STRH     r0,[r4,#0]            ;521
0003b2  8828              LDRH     r0,[r5,#0]            ;522  ; snmp_bat_flag_puts
0003b4  0500              LSLS     r0,r0,#20             ;522
0003b6  d509              BPL      |L1.972|
0003b8  2313              MOVS     r3,#0x13              ;524
0003ba  2208              MOVS     r2,#8                 ;524
0003bc  2105              MOVS     r1,#5                 ;524
0003be  a0d6              ADR      r0,|L1.1816|
0003c0  f7fffffe          BL       snmp_trap_send
0003c4  8828              LDRH     r0,[r5,#0]            ;525  ; snmp_bat_flag_puts
0003c6  f4206000          BIC      r0,r0,#0x800          ;525
0003ca  8028              STRH     r0,[r5,#0]            ;525
                  |L1.972|
0003cc  7930              LDRB     r0,[r6,#4]            ;529  ; vz2_error
0003ce  b190              CBZ      r0,|L1.1014|
0003d0  8820              LDRH     r0,[r4,#0]            ;531  ; snmp_bat_flag
0003d2  f4405080          ORR      r0,r0,#0x1000         ;531
0003d6  8020              STRH     r0,[r4,#0]            ;531
0003d8  8828              LDRH     r0,[r5,#0]            ;532  ; snmp_bat_flag_puts
0003da  04c0              LSLS     r0,r0,#19             ;532
0003dc  f53fae2b          BMI      |L1.54|
0003e0  2314              MOVS     r3,#0x14              ;534
0003e2  2208              MOVS     r2,#8                 ;534
0003e4  2105              MOVS     r1,#5                 ;534
0003e6  a0d4              ADR      r0,|L1.1848|
0003e8  f7fffffe          BL       snmp_trap_send
0003ec  8828              LDRH     r0,[r5,#0]            ;535  ; snmp_bat_flag_puts
0003ee  f4405080          ORR      r0,r0,#0x1000         ;535
0003f2  8028              STRH     r0,[r5,#0]            ;535
                  |L1.1012|
0003f4  e61f              B        |L1.54|
                  |L1.1014|
0003f6  e1b1              B        |L1.1884|
                  |L1.1016|
                          DCD      ||area_number.25||
                  |L1.1020|
                          DCD      snmp_bat_status
                  |L1.1024|
                          DCD      USIGN
                  |L1.1028|
                          DCD      bat
                  |L1.1032|
                          DCD      IKB
                  |L1.1036|
                          DCD      snmp_bat_flag
                  |L1.1040|
                          DCD      snmp_bat_flag_puts
                  |L1.1044|
000414  42415420          DCB      "BAT #1 Alarm, battery is low",0
000418  23312041
00041c  6c61726d
000420  2c206261
000424  74746572
000428  79206973
00042c  206c6f77
000430  00      
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000438  23312041
00043c  6c61726d
000440  20636c65
000444  61722c20
000448  62617474
00044c  65727920
000450  6973206e
000454  6f74206c
000458  6f7700  
00045b  00                DCB      0
                  |L1.1116|
00045c  42415420          DCB      "BAT #1 Warning, high battery temperature",0
000460  23312057
000464  61726e69
000468  6e672c20
00046c  68696768
000470  20626174
000474  74657279
000478  2074656d
00047c  70657261
000480  74757265
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  42415420          DCB      "BAT #1 Warning clear, battery temperature is normal",0
00048c  23312057
000490  61726e69
000494  6e672063
000498  6c656172
00049c  2c206261
0004a0  74746572
0004a4  79207465
0004a8  6d706572
0004ac  61747572
0004b0  65206973
0004b4  206e6f72
0004b8  6d616c00
                  |L1.1212|
0004bc  42415420          DCB      "BAT #1 Alarm, high battery temperature",0
0004c0  23312041
0004c4  6c61726d
0004c8  2c206869
0004cc  67682062
0004d0  61747465
0004d4  72792074
0004d8  656d7065
0004dc  72617475
0004e0  726500  
0004e3  00                DCB      0
                  |L1.1252|
0004e4  42415420          DCB      "BAT #1 Alarm clear, battery temperature is normal",0
0004e8  23312041
0004ec  6c61726d
0004f0  20636c65
0004f4  61722c20
0004f8  62617474
0004fc  65727920
000500  74656d70
000504  65726174
000508  75726520
00050c  6973206e
000510  6f726d61
000514  6c00    
000516  00                DCB      0
000517  00                DCB      0
                  |L1.1304|
000518  42415420          DCB      "BAT #1, capacity test stopped",0
00051c  23312c20
000520  63617061
000524  63697479
000528  20746573
00052c  74207374
000530  6f707065
000534  6400    
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  42415420          DCB      "BAT #1,leveling charge is stopped",0
00053c  23312c6c
000540  6576656c
000544  696e6720
000548  63686172
00054c  67652069
000550  73207374
000554  6f707065
000558  6400    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L1.1372|
00055c  42415420          DCB      "BAT #1,leveling charge is blocked",0
000560  23312c6c
000564  6576656c
000568  696e6720
00056c  63686172
000570  67652069
000574  7320626c
000578  6f636b65
00057c  6400    
00057e  00                DCB      0
00057f  00                DCB      0
                  |L1.1408|
000580  42415420          DCB      "BAT #1, capacity test started",0
000584  23312c20
000588  63617061
00058c  63697479
000590  20746573
000594  74207374
000598  61727465
00059c  6400    
00059e  00                DCB      0
00059f  00                DCB      0
                  |L1.1440|
0005a0  42415420          DCB      "BAT #1,leveling charge is started",0
0005a4  23312c6c
0005a8  6576656c
0005ac  696e6720
0005b0  63686172
0005b4  67652069
0005b8  73207374
0005bc  61727465
0005c0  6400    
0005c2  00                DCB      0
0005c3  00                DCB      0
                  |L1.1476|
0005c4  42415420          DCB      "BAT #1,leveling charge is unblocked",0
0005c8  23312c6c
0005cc  6576656c
0005d0  696e6720
0005d4  63686172
0005d8  67652069
0005dc  7320756e
0005e0  626c6f63
0005e4  6b656400
                  |L1.1512|
                          DCD      sp_ch_stat
                  |L1.1516|
0005ec  42415420          DCB      "BAT #1,speed charge is stopped",0
0005f0  23312c73
0005f4  70656564
0005f8  20636861
0005fc  72676520
000600  69732073
000604  746f7070
000608  656400  
00060b  00                DCB      0
                  |L1.1548|
00060c  42415420          DCB      "BAT #1,speed charge is blocked",0
000610  23312c73
000614  70656564
000618  20636861
00061c  72676520
000620  69732062
000624  6c6f636b
000628  656400  
00062b  00                DCB      0
                  |L1.1580|
00062c  42415420          DCB      "BAT #1,speed charge is started",0
000630  23312c73
000634  70656564
000638  20636861
00063c  72676520
000640  69732073
000644  74617274
000648  656400  
00064b  00                DCB      0
                  |L1.1612|
00064c  42415420          DCB      "BAT #1,speed charge is unblocked",0
000650  23312c73
000654  70656564
000658  20636861
00065c  72676520
000660  69732075
000664  6e626c6f
000668  636b6564
00066c  00      
00066d  00                DCB      0
00066e  00                DCB      0
00066f  00                DCB      0
                  |L1.1648|
000670  42415420          DCB      "BAT #1,equalising charge is on",0
000674  23312c65
000678  7175616c
00067c  6973696e
000680  67206368
000684  61726765
000688  20697320
00068c  6f6e00  
00068f  00                DCB      0
                  |L1.1680|
000690  42415420          DCB      "BAT #1,equalising charge is off",0
000694  23312c65
000698  7175616c
00069c  6973696e
0006a0  67206368
0006a4  61726765
0006a8  20697320
0006ac  6f666600
                  |L1.1712|
0006b0  42415420          DCB      "BAT #1,equalising charge is blocked",0
0006b4  23312c65
0006b8  7175616c
0006bc  6973696e
0006c0  67206368
0006c4  61726765
0006c8  20697320
0006cc  626c6f63
0006d0  6b656400
                  |L1.1748|
0006d4  42415420          DCB      "BAT #1,equalising charge is unblocked",0
0006d8  23312c65
0006dc  7175616c
0006e0  6973696e
0006e4  67206368
0006e8  61726765
0006ec  20697320
0006f0  756e626c
0006f4  6f636b65
0006f8  6400    
0006fa  00                DCB      0
0006fb  00                DCB      0
                  |L1.1788|
0006fc  42415420          DCB      "BAT #1,molding charge is on",0
000700  23312c6d
000704  6f6c6469
000708  6e672063
00070c  68617267
000710  65206973
000714  206f6e00
                  |L1.1816|
000718  42415420          DCB      "BAT #1,molding charge is off",0
00071c  23312c6d
000720  6f6c6469
000724  6e672063
000728  68617267
00072c  65206973
000730  206f6666
000734  00      
000735  00                DCB      0
000736  00                DCB      0
000737  00                DCB      0
                  |L1.1848|
000738  42415420          DCB      "BAT #1,molding charge is blocked",0
00073c  23312c6d
000740  6f6c6469
000744  6e672063
000748  68617267
00074c  65206973
000750  20626c6f
000754  636b6564
000758  00      
000759  00                DCB      0
00075a  00                DCB      0
00075b  00                DCB      0
                  |L1.1884|
00075c  8820              LDRH     r0,[r4,#0]            ;540  ; snmp_bat_flag
00075e  f4205080          BIC      r0,r0,#0x1000         ;540
000762  8020              STRH     r0,[r4,#0]            ;540
000764  8828              LDRH     r0,[r5,#0]            ;541  ; snmp_bat_flag_puts
000766  04c0              LSLS     r0,r0,#19             ;541
000768  f57fae44          BPL      |L1.1012|
00076c  2315              MOVS     r3,#0x15              ;543
00076e  2208              MOVS     r2,#8                 ;543
000770  2105              MOVS     r1,#5                 ;543
000772  a0fa              ADR      r0,|L1.2908|
000774  f7fffffe          BL       snmp_trap_send
000778  8828              LDRH     r0,[r5,#0]            ;544  ; snmp_bat_flag_puts
00077a  f4205080          BIC      r0,r0,#0x1000         ;544
00077e  8028              STRH     r0,[r5,#0]            ;544
000780  e459              B        |L1.54|
                  |L1.1922|
000782  f9bb0000          LDRSH    r0,[r11,#0]           ;556  ; USIGN
000786  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;556  ; bat
00078a  eb000080          ADD      r0,r0,r0,LSL #2       ;556
00078e  ebb10f40          CMP      r1,r0,LSL #1          ;556
000792  da12              BGE      |L1.1978|
000794  8860              LDRH     r0,[r4,#2]            ;558  ; snmp_bat_flag
000796  f0400001          ORR      r0,r0,#1              ;558
00079a  8060              STRH     r0,[r4,#2]            ;558
00079c  8868              LDRH     r0,[r5,#2]            ;559  ; snmp_bat_flag_puts
00079e  07c0              LSLS     r0,r0,#31             ;559
0007a0  d11d              BNE      |L1.2014|
0007a2  2316              MOVS     r3,#0x16              ;561
0007a4  2208              MOVS     r2,#8                 ;561
0007a6  2105              MOVS     r1,#5                 ;561
0007a8  f2af3098          ADR      r0,|L1.1044|
0007ac  f7fffffe          BL       snmp_trap_send
0007b0  8868              LDRH     r0,[r5,#2]            ;562  ; snmp_bat_flag_puts
0007b2  f0400001          ORR      r0,r0,#1              ;562
0007b6  8068              STRH     r0,[r5,#2]            ;562
0007b8  e011              B        |L1.2014|
                  |L1.1978|
0007ba  8860              LDRH     r0,[r4,#2]            ;567  ; snmp_bat_flag
0007bc  f0200001          BIC      r0,r0,#1              ;567
0007c0  8060              STRH     r0,[r4,#2]            ;567
0007c2  8868              LDRH     r0,[r5,#2]            ;568  ; snmp_bat_flag_puts
0007c4  07c0              LSLS     r0,r0,#31             ;568
0007c6  d00a              BEQ      |L1.2014|
0007c8  2317              MOVS     r3,#0x17              ;570
0007ca  2208              MOVS     r2,#8                 ;570
0007cc  2105              MOVS     r1,#5                 ;570
0007ce  f2af309c          ADR      r0,|L1.1076|
0007d2  f7fffffe          BL       snmp_trap_send
0007d6  8868              LDRH     r0,[r5,#2]            ;571  ; snmp_bat_flag_puts
0007d8  f0200001          BIC      r0,r0,#1              ;571
0007dc  8068              STRH     r0,[r5,#2]            ;571
                  |L1.2014|
0007de  f898008b          LDRB     r0,[r8,#0x8b]         ;575  ; bat
0007e2  07c0              LSLS     r0,r0,#31             ;575
0007e4  d012              BEQ      |L1.2060|
0007e6  8860              LDRH     r0,[r4,#2]            ;577  ; snmp_bat_flag
0007e8  f0400002          ORR      r0,r0,#2              ;577
0007ec  8060              STRH     r0,[r4,#2]            ;577
0007ee  8828              LDRH     r0,[r5,#0]            ;578  ; snmp_bat_flag_puts
0007f0  0780              LSLS     r0,r0,#30             ;578
0007f2  d41d              BMI      |L1.2096|
0007f4  2318              MOVS     r3,#0x18              ;580
0007f6  2208              MOVS     r2,#8                 ;580
0007f8  2105              MOVS     r1,#5                 ;580
0007fa  f2af30a0          ADR      r0,|L1.1116|
0007fe  f7fffffe          BL       snmp_trap_send
000802  8868              LDRH     r0,[r5,#2]            ;581  ; snmp_bat_flag_puts
000804  f0400002          ORR      r0,r0,#2              ;581
000808  8068              STRH     r0,[r5,#2]            ;581
00080a  e011              B        |L1.2096|
                  |L1.2060|
00080c  8860              LDRH     r0,[r4,#2]            ;586  ; snmp_bat_flag
00080e  f0200002          BIC      r0,r0,#2              ;586
000812  8060              STRH     r0,[r4,#2]            ;586
000814  8868              LDRH     r0,[r5,#2]            ;587  ; snmp_bat_flag_puts
000816  0780              LSLS     r0,r0,#30             ;587
000818  d50a              BPL      |L1.2096|
00081a  2319              MOVS     r3,#0x19              ;589
00081c  2208              MOVS     r2,#8                 ;589
00081e  2105              MOVS     r1,#5                 ;589
000820  f2af309c          ADR      r0,|L1.1160|
000824  f7fffffe          BL       snmp_trap_send
000828  8868              LDRH     r0,[r5,#2]            ;590  ; snmp_bat_flag_puts
00082a  f0200002          BIC      r0,r0,#2              ;590
00082e  8068              STRH     r0,[r5,#2]            ;590
                  |L1.2096|
000830  f898008b          LDRB     r0,[r8,#0x8b]         ;594  ; bat
000834  0780              LSLS     r0,r0,#30             ;594
000836  d512              BPL      |L1.2142|
000838  8860              LDRH     r0,[r4,#2]            ;596  ; snmp_bat_flag
00083a  f0400004          ORR      r0,r0,#4              ;596
00083e  8060              STRH     r0,[r4,#2]            ;596
000840  8868              LDRH     r0,[r5,#2]            ;597  ; snmp_bat_flag_puts
000842  0740              LSLS     r0,r0,#29             ;597
000844  d41d              BMI      |L1.2178|
000846  231a              MOVS     r3,#0x1a              ;599
000848  2208              MOVS     r2,#8                 ;599
00084a  2105              MOVS     r1,#5                 ;599
00084c  f2af3094          ADR      r0,|L1.1212|
000850  f7fffffe          BL       snmp_trap_send
000854  8868              LDRH     r0,[r5,#2]            ;600  ; snmp_bat_flag_puts
000856  f0400004          ORR      r0,r0,#4              ;600
00085a  8068              STRH     r0,[r5,#2]            ;600
00085c  e011              B        |L1.2178|
                  |L1.2142|
00085e  8860              LDRH     r0,[r4,#2]            ;605  ; snmp_bat_flag
000860  f0200004          BIC      r0,r0,#4              ;605
000864  8060              STRH     r0,[r4,#2]            ;605
000866  8868              LDRH     r0,[r5,#2]            ;606  ; snmp_bat_flag_puts
000868  0740              LSLS     r0,r0,#29             ;606
00086a  d50a              BPL      |L1.2178|
00086c  231b              MOVS     r3,#0x1b              ;608
00086e  2208              MOVS     r2,#8                 ;608
000870  2105              MOVS     r1,#5                 ;608
000872  f2af3090          ADR      r0,|L1.1252|
000876  f7fffffe          BL       snmp_trap_send
00087a  8868              LDRH     r0,[r5,#2]            ;609  ; snmp_bat_flag_puts
00087c  f0200004          BIC      r0,r0,#4              ;609
000880  8068              STRH     r0,[r5,#2]            ;609
                  |L1.2178|
000882  f9b91000          LDRSH    r1,[r9,#0]            ;613  ; IKB
000886  f9b80054          LDRSH    r0,[r8,#0x54]         ;613  ; bat
00088a  424a              RSBS     r2,r1,#0              ;613
00088c  4290              CMP      r0,r2                 ;613
00088e  da04              BGE      |L1.2202|
000890  8860              LDRH     r0,[r4,#2]            ;613  ; snmp_bat_flag
000892  f0400008          ORR      r0,r0,#8              ;613
000896  8060              STRH     r0,[r4,#2]            ;613
000898  e005              B        |L1.2214|
                  |L1.2202|
00089a  4288              CMP      r0,r1                 ;614
00089c  dd03              BLE      |L1.2214|
00089e  8860              LDRH     r0,[r4,#2]            ;614  ; snmp_bat_flag
0008a0  f0200008          BIC      r0,r0,#8              ;614
0008a4  8060              STRH     r0,[r4,#2]            ;614
                  |L1.2214|
0008a6  f8960022          LDRB     r0,[r6,#0x22]         ;616  ; spc_stat
0008aa  2801              CMP      r0,#1                 ;616
0008ac  d102              BNE      |L1.2228|
0008ae  f8960023          LDRB     r0,[r6,#0x23]         ;616  ; spc_bat
0008b2  b3e0              CBZ      r0,|L1.2350|
                  |L1.2228|
0008b4  8860              LDRH     r0,[r4,#2]            ;627  ; snmp_bat_flag
0008b6  f0200010          BIC      r0,r0,#0x10           ;627
0008ba  8060              STRH     r0,[r4,#2]            ;627
0008bc  8868              LDRH     r0,[r5,#2]            ;628  ; snmp_bat_flag_puts
0008be  06c0              LSLS     r0,r0,#27             ;628
0008c0  d50a              BPL      |L1.2264|
0008c2  231d              MOVS     r3,#0x1d              ;630
0008c4  2208              MOVS     r2,#8                 ;630
0008c6  2105              MOVS     r1,#5                 ;630
0008c8  f2af30b4          ADR      r0,|L1.1304|
0008cc  f7fffffe          BL       snmp_trap_send
0008d0  8868              LDRH     r0,[r5,#2]            ;631  ; snmp_bat_flag_puts
0008d2  f0200010          BIC      r0,r0,#0x10           ;631
0008d6  8068              STRH     r0,[r5,#2]            ;631
                  |L1.2264|
0008d8  f8960022          LDRB     r0,[r6,#0x22]         ;635  ; spc_stat
0008dc  2802              CMP      r0,#2                 ;635
0008de  d03a              BEQ      |L1.2390|
0008e0  8860              LDRH     r0,[r4,#2]            ;646  ; snmp_bat_flag
0008e2  f0200020          BIC      r0,r0,#0x20           ;646
0008e6  8060              STRH     r0,[r4,#2]            ;646
0008e8  8868              LDRH     r0,[r5,#2]            ;647  ; snmp_bat_flag_puts
0008ea  0680              LSLS     r0,r0,#26             ;647
0008ec  d50a              BPL      |L1.2308|
0008ee  231f              MOVS     r3,#0x1f              ;649
0008f0  2208              MOVS     r2,#8                 ;649
0008f2  2105              MOVS     r1,#5                 ;649
0008f4  f2af30c0          ADR      r0,|L1.1336|
0008f8  f7fffffe          BL       snmp_trap_send
0008fc  8868              LDRH     r0,[r5,#2]            ;650  ; snmp_bat_flag_puts
0008fe  f0200020          BIC      r0,r0,#0x20           ;650
000902  8068              STRH     r0,[r5,#2]            ;650
                  |L1.2308|
000904  7870              LDRB     r0,[r6,#1]            ;654  ; vz_error
000906  b3c8              CBZ      r0,|L1.2428|
000908  8860              LDRH     r0,[r4,#2]            ;656  ; snmp_bat_flag
00090a  f0400040          ORR      r0,r0,#0x40           ;656
00090e  8060              STRH     r0,[r4,#2]            ;656
000910  8868              LDRH     r0,[r5,#2]            ;657  ; snmp_bat_flag_puts
000912  0640              LSLS     r0,r0,#25             ;657
000914  d445              BMI      |L1.2466|
000916  2320              MOVS     r3,#0x20              ;659
000918  2208              MOVS     r2,#8                 ;659
00091a  2105              MOVS     r1,#5                 ;659
00091c  f2af30c4          ADR      r0,|L1.1372|
000920  f7fffffe          BL       snmp_trap_send
000924  8868              LDRH     r0,[r5,#2]            ;660  ; snmp_bat_flag_puts
000926  f0400040          ORR      r0,r0,#0x40           ;660
00092a  8068              STRH     r0,[r5,#2]            ;660
00092c  e039              B        |L1.2466|
                  |L1.2350|
00092e  e7ff              B        |L1.2352|
                  |L1.2352|
000930  8860              LDRH     r0,[r4,#2]            ;618  ; snmp_bat_flag
000932  f0400010          ORR      r0,r0,#0x10           ;618
000936  8060              STRH     r0,[r4,#2]            ;618
000938  8868              LDRH     r0,[r5,#2]            ;619  ; snmp_bat_flag_puts
00093a  06c0              LSLS     r0,r0,#27             ;619
00093c  d4cc              BMI      |L1.2264|
00093e  231c              MOVS     r3,#0x1c              ;621
000940  2208              MOVS     r2,#8                 ;621
000942  2105              MOVS     r1,#5                 ;621
000944  f2af30c8          ADR      r0,|L1.1408|
000948  f7fffffe          BL       snmp_trap_send
00094c  8868              LDRH     r0,[r5,#2]            ;622  ; snmp_bat_flag_puts
00094e  f0400010          ORR      r0,r0,#0x10           ;622
000952  8068              STRH     r0,[r5,#2]            ;622
000954  e7c0              B        |L1.2264|
                  |L1.2390|
000956  8860              LDRH     r0,[r4,#2]            ;637  ; snmp_bat_flag
000958  f0400020          ORR      r0,r0,#0x20           ;637
00095c  8060              STRH     r0,[r4,#2]            ;637
00095e  8868              LDRH     r0,[r5,#2]            ;638  ; snmp_bat_flag_puts
000960  0680              LSLS     r0,r0,#26             ;638
000962  d4cf              BMI      |L1.2308|
000964  231e              MOVS     r3,#0x1e              ;640
000966  2208              MOVS     r2,#8                 ;640
000968  2105              MOVS     r1,#5                 ;640
00096a  f2af30cc          ADR      r0,|L1.1440|
00096e  f7fffffe          BL       snmp_trap_send
000972  8868              LDRH     r0,[r5,#2]            ;641  ; snmp_bat_flag_puts
000974  f0400020          ORR      r0,r0,#0x20           ;641
000978  8068              STRH     r0,[r5,#2]            ;641
00097a  e7c3              B        |L1.2308|
                  |L1.2428|
00097c  e7ff              B        |L1.2430|
                  |L1.2430|
00097e  8860              LDRH     r0,[r4,#2]            ;665  ; snmp_bat_flag
000980  f0200040          BIC      r0,r0,#0x40           ;665
000984  8060              STRH     r0,[r4,#2]            ;665
000986  8868              LDRH     r0,[r5,#2]            ;666  ; snmp_bat_flag_puts
000988  0640              LSLS     r0,r0,#25             ;666
00098a  d50a              BPL      |L1.2466|
00098c  2321              MOVS     r3,#0x21              ;668
00098e  2208              MOVS     r2,#8                 ;668
000990  2105              MOVS     r1,#5                 ;668
000992  f2af30d0          ADR      r0,|L1.1476|
000996  f7fffffe          BL       snmp_trap_send
00099a  8868              LDRH     r0,[r5,#2]            ;669  ; snmp_bat_flag_puts
00099c  f0200040          BIC      r0,r0,#0x40           ;669
0009a0  8068              STRH     r0,[r5,#2]            ;669
                  |L1.2466|
0009a2  4877              LDR      r0,|L1.2944|
0009a4  7800              LDRB     r0,[r0,#0]            ;673  ; sp_ch_stat
0009a6  2802              CMP      r0,#2                 ;673
0009a8  d026              BEQ      |L1.2552|
0009aa  8860              LDRH     r0,[r4,#2]            ;684  ; snmp_bat_flag
0009ac  f0200080          BIC      r0,r0,#0x80           ;684
0009b0  8060              STRH     r0,[r4,#2]            ;684
0009b2  8868              LDRH     r0,[r5,#2]            ;685  ; snmp_bat_flag_puts
0009b4  0600              LSLS     r0,r0,#24             ;685
0009b6  d50a              BPL      |L1.2510|
0009b8  2323              MOVS     r3,#0x23              ;687
0009ba  2208              MOVS     r2,#8                 ;687
0009bc  2105              MOVS     r1,#5                 ;687
0009be  f2af30d4          ADR      r0,|L1.1516|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;688  ; snmp_bat_flag_puts
0009c8  f0200080          BIC      r0,r0,#0x80           ;688
0009cc  8068              STRH     r0,[r5,#2]            ;688
                  |L1.2510|
0009ce  78b0              LDRB     r0,[r6,#2]            ;692  ; sp_ch_error
0009d0  b328              CBZ      r0,|L1.2590|
0009d2  8860              LDRH     r0,[r4,#2]            ;694  ; snmp_bat_flag
0009d4  f4407080          ORR      r0,r0,#0x100          ;694
0009d8  8060              STRH     r0,[r4,#2]            ;694
0009da  8868              LDRH     r0,[r5,#2]            ;695  ; snmp_bat_flag_puts
0009dc  05c0              LSLS     r0,r0,#23             ;695
0009de  d430              BMI      |L1.2626|
0009e0  2324              MOVS     r3,#0x24              ;697
0009e2  2208              MOVS     r2,#8                 ;697
0009e4  2105              MOVS     r1,#5                 ;697
0009e6  f2af30dc          ADR      r0,|L1.1548|
0009ea  f7fffffe          BL       snmp_trap_send
0009ee  8868              LDRH     r0,[r5,#2]            ;698  ; snmp_bat_flag_puts
0009f0  f4407080          ORR      r0,r0,#0x100          ;698
0009f4  8068              STRH     r0,[r5,#2]            ;698
0009f6  e024              B        |L1.2626|
                  |L1.2552|
0009f8  8860              LDRH     r0,[r4,#2]            ;675  ; snmp_bat_flag
0009fa  f0400080          ORR      r0,r0,#0x80           ;675
0009fe  8060              STRH     r0,[r4,#2]            ;675
000a00  8868              LDRH     r0,[r5,#2]            ;676  ; snmp_bat_flag_puts
000a02  0600              LSLS     r0,r0,#24             ;676
000a04  d4e3              BMI      |L1.2510|
000a06  2322              MOVS     r3,#0x22              ;678
000a08  2208              MOVS     r2,#8                 ;678
000a0a  2105              MOVS     r1,#5                 ;678
000a0c  f2af30e4          ADR      r0,|L1.1580|
000a10  f7fffffe          BL       snmp_trap_send
000a14  8868              LDRH     r0,[r5,#2]            ;679  ; snmp_bat_flag_puts
000a16  f0400080          ORR      r0,r0,#0x80           ;679
000a1a  8068              STRH     r0,[r5,#2]            ;679
000a1c  e7d7              B        |L1.2510|
                  |L1.2590|
000a1e  8860              LDRH     r0,[r4,#2]            ;703  ; snmp_bat_flag
000a20  f4207080          BIC      r0,r0,#0x100          ;703
000a24  8060              STRH     r0,[r4,#2]            ;703
000a26  8868              LDRH     r0,[r5,#2]            ;704  ; snmp_bat_flag_puts
000a28  05c0              LSLS     r0,r0,#23             ;704
000a2a  d50a              BPL      |L1.2626|
000a2c  2325              MOVS     r3,#0x25              ;706
000a2e  2208              MOVS     r2,#8                 ;706
000a30  2105              MOVS     r1,#5                 ;706
000a32  f2af30e8          ADR      r0,|L1.1612|
000a36  f7fffffe          BL       snmp_trap_send
000a3a  8868              LDRH     r0,[r5,#2]            ;707  ; snmp_bat_flag_puts
000a3c  f4207080          BIC      r0,r0,#0x100          ;707
000a40  8068              STRH     r0,[r5,#2]            ;707
                  |L1.2626|
000a42  7970              LDRB     r0,[r6,#5]            ;711  ; vz1_stat
000a44  b190              CBZ      r0,|L1.2668|
000a46  8860              LDRH     r0,[r4,#2]            ;713  ; snmp_bat_flag
000a48  f4407000          ORR      r0,r0,#0x200          ;713
000a4c  8060              STRH     r0,[r4,#2]            ;713
000a4e  8868              LDRH     r0,[r5,#2]            ;714  ; snmp_bat_flag_puts
000a50  0580              LSLS     r0,r0,#22             ;714
000a52  d41d              BMI      |L1.2704|
000a54  2326              MOVS     r3,#0x26              ;716
000a56  2208              MOVS     r2,#8                 ;716
000a58  2105              MOVS     r1,#5                 ;716
000a5a  f2af30ec          ADR      r0,|L1.1648|
000a5e  f7fffffe          BL       snmp_trap_send
000a62  8868              LDRH     r0,[r5,#2]            ;717  ; snmp_bat_flag_puts
000a64  f4407000          ORR      r0,r0,#0x200          ;717
000a68  8068              STRH     r0,[r5,#2]            ;717
000a6a  e011              B        |L1.2704|
                  |L1.2668|
000a6c  8860              LDRH     r0,[r4,#2]            ;722  ; snmp_bat_flag
000a6e  f4207000          BIC      r0,r0,#0x200          ;722
000a72  8060              STRH     r0,[r4,#2]            ;722
000a74  8868              LDRH     r0,[r5,#2]            ;723  ; snmp_bat_flag_puts
000a76  0580              LSLS     r0,r0,#22             ;723
000a78  d50a              BPL      |L1.2704|
000a7a  2327              MOVS     r3,#0x27              ;725
000a7c  2208              MOVS     r2,#8                 ;725
000a7e  2105              MOVS     r1,#5                 ;725
000a80  f2af30f4          ADR      r0,|L1.1680|
000a84  f7fffffe          BL       snmp_trap_send
000a88  8868              LDRH     r0,[r5,#2]            ;726  ; snmp_bat_flag_puts
000a8a  f4207000          BIC      r0,r0,#0x200          ;726
000a8e  8068              STRH     r0,[r5,#2]            ;726
                  |L1.2704|
000a90  78f0              LDRB     r0,[r6,#3]            ;730  ; vz1_error
000a92  b190              CBZ      r0,|L1.2746|
000a94  8860              LDRH     r0,[r4,#2]            ;732  ; snmp_bat_flag
000a96  f4406080          ORR      r0,r0,#0x400          ;732
000a9a  8060              STRH     r0,[r4,#2]            ;732
000a9c  8868              LDRH     r0,[r5,#2]            ;733  ; snmp_bat_flag_puts
000a9e  0540              LSLS     r0,r0,#21             ;733
000aa0  d41d              BMI      |L1.2782|
000aa2  2328              MOVS     r3,#0x28              ;735
000aa4  2208              MOVS     r2,#8                 ;735
000aa6  2105              MOVS     r1,#5                 ;735
000aa8  f2af30fc          ADR      r0,|L1.1712|
000aac  f7fffffe          BL       snmp_trap_send
000ab0  8868              LDRH     r0,[r5,#2]            ;736  ; snmp_bat_flag_puts
000ab2  f4406080          ORR      r0,r0,#0x400          ;736
000ab6  8068              STRH     r0,[r5,#2]            ;736
000ab8  e011              B        |L1.2782|
                  |L1.2746|
000aba  8860              LDRH     r0,[r4,#2]            ;741  ; snmp_bat_flag
000abc  f4206080          BIC      r0,r0,#0x400          ;741
000ac0  8060              STRH     r0,[r4,#2]            ;741
000ac2  8868              LDRH     r0,[r5,#2]            ;742  ; snmp_bat_flag_puts
000ac4  0540              LSLS     r0,r0,#21             ;742
000ac6  d50a              BPL      |L1.2782|
000ac8  2329              MOVS     r3,#0x29              ;744
000aca  2208              MOVS     r2,#8                 ;744
000acc  2105              MOVS     r1,#5                 ;744
000ace  f2af30fc          ADR      r0,|L1.1748|
000ad2  f7fffffe          BL       snmp_trap_send
000ad6  8868              LDRH     r0,[r5,#2]            ;745  ; snmp_bat_flag_puts
000ad8  f4206080          BIC      r0,r0,#0x400          ;745
000adc  8068              STRH     r0,[r5,#2]            ;745
                  |L1.2782|
000ade  79f0              LDRB     r0,[r6,#7]            ;749  ; vz2_stat
000ae0  b190              CBZ      r0,|L1.2824|
000ae2  8860              LDRH     r0,[r4,#2]            ;751  ; snmp_bat_flag
000ae4  f4406000          ORR      r0,r0,#0x800          ;751
000ae8  8060              STRH     r0,[r4,#2]            ;751
000aea  8868              LDRH     r0,[r5,#2]            ;752  ; snmp_bat_flag_puts
000aec  0500              LSLS     r0,r0,#20             ;752
000aee  d41d              BMI      |L1.2860|
000af0  232a              MOVS     r3,#0x2a              ;754
000af2  2208              MOVS     r2,#8                 ;754
000af4  2105              MOVS     r1,#5                 ;754
000af6  f2af30fc          ADR      r0,|L1.1788|
000afa  f7fffffe          BL       snmp_trap_send
000afe  8868              LDRH     r0,[r5,#2]            ;755  ; snmp_bat_flag_puts
000b00  f4406000          ORR      r0,r0,#0x800          ;755
000b04  8068              STRH     r0,[r5,#2]            ;755
000b06  e011              B        |L1.2860|
                  |L1.2824|
000b08  8860              LDRH     r0,[r4,#2]            ;760  ; snmp_bat_flag
000b0a  f4206000          BIC      r0,r0,#0x800          ;760
000b0e  8060              STRH     r0,[r4,#2]            ;760
000b10  8868              LDRH     r0,[r5,#2]            ;761  ; snmp_bat_flag_puts
000b12  0500              LSLS     r0,r0,#20             ;761
000b14  d50a              BPL      |L1.2860|
000b16  232b              MOVS     r3,#0x2b              ;763
000b18  2208              MOVS     r2,#8                 ;763
000b1a  2105              MOVS     r1,#5                 ;763
000b1c  f2af4008          ADR      r0,|L1.1816|
000b20  f7fffffe          BL       snmp_trap_send
000b24  8868              LDRH     r0,[r5,#2]            ;764  ; snmp_bat_flag_puts
000b26  f4206000          BIC      r0,r0,#0x800          ;764
000b2a  8068              STRH     r0,[r5,#2]            ;764
                  |L1.2860|
000b2c  7930              LDRB     r0,[r6,#4]            ;768  ; vz2_error
000b2e  b1a0              CBZ      r0,|L1.2906|
000b30  8860              LDRH     r0,[r4,#2]            ;770  ; snmp_bat_flag
000b32  f4405080          ORR      r0,r0,#0x1000         ;770
000b36  8060              STRH     r0,[r4,#2]            ;770
000b38  8868              LDRH     r0,[r5,#2]            ;771  ; snmp_bat_flag_puts
000b3a  04c0              LSLS     r0,r0,#19             ;771
000b3c  f53faa81          BMI      |L1.66|
000b40  232c              MOVS     r3,#0x2c              ;773
000b42  2208              MOVS     r2,#8                 ;773
000b44  2105              MOVS     r1,#5                 ;773
000b46  f2af4010          ADR      r0,|L1.1848|
000b4a  f7fffffe          BL       snmp_trap_send
000b4e  8868              LDRH     r0,[r5,#2]            ;774  ; snmp_bat_flag_puts
000b50  f4405080          ORR      r0,r0,#0x1000         ;774
000b54  8068              STRH     r0,[r5,#2]            ;774
                  |L1.2902|
000b56  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2906|
000b5a  e013              B        |L1.2948|
                  |L1.2908|
000b5c  42415420          DCB      "BAT #1,molding charge is unblocked",0
000b60  23312c6d
000b64  6f6c6469
000b68  6e672063
000b6c  68617267
000b70  65206973
000b74  20756e62
000b78  6c6f636b
000b7c  656400  
000b7f  00                DCB      0
                  |L1.2944|
                          DCD      sp_ch_stat
                  |L1.2948|
000b84  8860              LDRH     r0,[r4,#2]            ;779  ; snmp_bat_flag
000b86  f4205080          BIC      r0,r0,#0x1000         ;779
000b8a  8060              STRH     r0,[r4,#2]            ;779
000b8c  8868              LDRH     r0,[r5,#2]            ;780  ; snmp_bat_flag_puts
000b8e  04c0              LSLS     r0,r0,#19             ;780
000b90  d5e1              BPL      |L1.2902|
000b92  232d              MOVS     r3,#0x2d              ;782
000b94  2208              MOVS     r2,#8                 ;782
000b96  2105              MOVS     r1,#5                 ;782
000b98  f2af0040          ADR      r0,|L1.2908|
000b9c  f7fffffe          BL       snmp_trap_send
000ba0  8868              LDRH     r0,[r5,#2]            ;783  ; snmp_bat_flag_puts
000ba2  f4205080          BIC      r0,r0,#0x1000         ;783
000ba6  8068              STRH     r0,[r5,#2]            ;783
000ba8  e7d5              B        |L1.2902|
;;;916    
                          ENDP

                  ke_start PROC
;;;919    //-----------------------------------------------
;;;920    void ke_start(char in)
000baa  e92d41fc          PUSH     {r2-r8,lr}
;;;921    {          
000bae  4606              MOV      r6,r0
;;;922    ke_start_stat=(enum_ke_start_stat)0;		 
000bb0  f04f0400          MOV      r4,#0
000bb4  4dff              LDR      r5,|L1.4020|
;;;923    /*
;;;924    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;925    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;926    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;927    #endif
;;;928    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;929    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;930    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;931    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;932    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;933    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;934    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;935    else */
;;;936    	{
;;;937    
;;;938    	ke_start_stat=kssYES;
000bb6  f04f0064          MOV      r0,#0x64
000bba  f105050a          ADD      r5,r5,#0xa
000bbe  7728              STRB     r0,[r5,#0x1c]
;;;939    
;;;940    	spc_stat=spcKE;
000bc0  f04f0701          MOV      r7,#1
000bc4  762f              STRB     r7,[r5,#0x18]
;;;941    	__ee_spc_stat=spcKE;
000bc6  f8a57062          STRH     r7,[r5,#0x62]
;;;942    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000bca  4639              MOV      r1,r7
000bcc  f240209a          MOV      r0,#0x29a
000bd0  f7fffffe          BL       lc640_write_int
;;;943    	
;;;944    	spc_bat=0;
000bd4  766c              STRB     r4,[r5,#0x19]
;;;945    	__ee_spc_bat=0;
000bd6  f8a54064          STRH     r4,[r5,#0x64]
;;;946    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000bda  4621              MOV      r1,r4
000bdc  f240209e          MOV      r0,#0x29e
000be0  f7fffffe          BL       lc640_write_int
;;;947    
;;;948    	bat[0]._zar_cnt_ke=0;
000be4  f8df83d0          LDR      r8,|L1.4024|
000be8  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;949    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000bec  48f3              LDR      r0,|L1.4028|
000bee  2100              MOVS     r1,#0
000bf0  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000bf4  f7fffffe          BL       lc640_write_int
;;;950    
;;;951    	bat[0]._time_min_cnt_ke=0;
000bf8  f8a8404a          STRH     r4,[r8,#0x4a]
;;;952    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000bfc  2100              MOVS     r1,#0
000bfe  f44f70e3          MOV      r0,#0x1c6
000c02  f7fffffe          BL       lc640_write_int
;;;953    
;;;954    	
;;;955    	spc_phase=0;
000c06  76ac              STRB     r4,[r5,#0x1a]
;;;956    	__ee_spc_phase=0;
000c08  f8a54066          STRH     r4,[r5,#0x66]
;;;957    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000c0c  4621              MOV      r1,r4
000c0e  f44f7028          MOV      r0,#0x2a0
000c12  f7fffffe          BL       lc640_write_int
;;;958    
;;;959    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;960    
;;;961    		{					
;;;962    		signed short temp_temp;
;;;963    		signed char temp;
;;;964    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000c16  eb060046          ADD      r0,r6,r6,LSL #1
000c1a  eb001006          ADD      r0,r0,r6,LSL #4
000c1e  eb080180          ADD      r1,r8,r0,LSL #2
000c22  48e7              LDR      r0,|L1.4032|
000c24  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000c26  f1000001          ADD      r0,r0,#1
000c2a  f0000007          AND      r0,r0,#7
000c2e  eb010040          ADD      r0,r1,r0,LSL #1
000c32  8c00              LDRH     r0,[r0,#0x20]
000c34  9001              STR      r0,[sp,#4]
;;;965    		    
;;;966    		temp=LPC_RTC->YEAR;
000c36  4ee3              LDR      r6,|L1.4036|
000c38  8bb0              LDRH     r0,[r6,#0x1c]
000c3a  9000              STR      r0,[sp,#0]
;;;967    		gran_char(&temp,1,99);
000c3c  f04f0263          MOV      r2,#0x63
000c40  f04f0101          MOV      r1,#1
000c44  4668              MOV      r0,sp
000c46  f7fffffe          BL       gran_char
;;;968    		*((char*)(&(ke_date[0])))=temp;
000c4a  4cda              LDR      r4,|L1.4020|
000c4c  f89d0000          LDRB     r0,[sp,#0]
000c50  34fc              ADDS     r4,r4,#0xfc
000c52  7020              STRB     r0,[r4,#0]
;;;969    			
;;;970    		temp=LPC_RTC->MONTH;
000c54  7e30              LDRB     r0,[r6,#0x18]
000c56  9000              STR      r0,[sp,#0]
;;;971    		gran_char(&temp,1,12);
000c58  220c              MOVS     r2,#0xc
000c5a  2101              MOVS     r1,#1
000c5c  4668              MOV      r0,sp
000c5e  f7fffffe          BL       gran_char
;;;972    		*(((char*)(&(ke_date[0])))+1)=temp;
000c62  f89d0000          LDRB     r0,[sp,#0]
000c66  7060              STRB     r0,[r4,#1]
;;;973    		
;;;974    		temp=LPC_RTC->DOM;
000c68  7b30              LDRB     r0,[r6,#0xc]
000c6a  9000              STR      r0,[sp,#0]
;;;975    		gran_char(&temp,1,31);
000c6c  221f              MOVS     r2,#0x1f
000c6e  2101              MOVS     r1,#1
000c70  4668              MOV      r0,sp
000c72  f7fffffe          BL       gran_char
;;;976    		*(((char*)(&(ke_date[0])))+2)=temp;			
000c76  f89d0000          LDRB     r0,[sp,#0]
000c7a  70a0              STRB     r0,[r4,#2]
;;;977    				
;;;978    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000c7c  f89d0004          LDRB     r0,[sp,#4]
000c80  70e0              STRB     r0,[r4,#3]
;;;979    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000c82  f24020a2          MOV      r0,#0x2a2
000c86  6821              LDR      r1,[r4,#0]  ; ke_date
000c88  f7fffffe          BL       lc640_write_long
;;;980    
;;;981    		temp=LPC_RTC->HOUR;
000c8c  7a30              LDRB     r0,[r6,#8]
000c8e  9000              STR      r0,[sp,#0]
;;;982    		gran_char(&temp,0,23);
000c90  2217              MOVS     r2,#0x17
000c92  2100              MOVS     r1,#0
000c94  4668              MOV      r0,sp
000c96  f7fffffe          BL       gran_char
;;;983    		*((char*)(&(ke_date[1])))=temp;
000c9a  f89d0000          LDRB     r0,[sp,#0]
000c9e  7120              STRB     r0,[r4,#4]
;;;984                   
;;;985    		temp=LPC_RTC->MIN;
000ca0  7930              LDRB     r0,[r6,#4]
000ca2  9000              STR      r0,[sp,#0]
;;;986    		gran_char(&temp,0,59);
000ca4  223b              MOVS     r2,#0x3b
000ca6  2100              MOVS     r1,#0
000ca8  4668              MOV      r0,sp
000caa  f7fffffe          BL       gran_char
;;;987    		*(((char*)(&(ke_date[1])))+1)=temp;
000cae  f89d0000          LDRB     r0,[sp,#0]
000cb2  7160              STRB     r0,[r4,#5]
;;;988    	          
;;;989    		temp=LPC_RTC->SEC;
000cb4  7830              LDRB     r0,[r6,#0]
000cb6  9000              STR      r0,[sp,#0]
;;;990    		gran_char(&temp,0,59);
000cb8  223b              MOVS     r2,#0x3b
000cba  2100              MOVS     r1,#0
000cbc  4668              MOV      r0,sp
000cbe  f7fffffe          BL       gran_char
;;;991    		*(((char*)(&(ke_date[1])))+2)=temp;
000cc2  f89d0000          LDRB     r0,[sp,#0]
000cc6  71a0              STRB     r0,[r4,#6]
;;;992    			
;;;993    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000cc8  f89d0005          LDRB     r0,[sp,#5]
000ccc  71e0              STRB     r0,[r4,#7]
;;;994    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000cce  f24020a6          MOV      r0,#0x2a6
000cd2  6861              LDR      r1,[r4,#4]  ; ke_date
000cd4  f7fffffe          BL       lc640_write_long
;;;995    		}
;;;996    	bat_hndl_zvu_ke_init=1;
000cd8  702f              STRB     r7,[r5,#0]
;;;997    	}
;;;998    }
000cda  e8bd81fc          POP      {r2-r8,pc}
;;;999    #endif
                          ENDP

                  ke_drv PROC
;;;1081   //-----------------------------------------------
;;;1082   void ke_drv(void)
000cde  e92d47f0          PUSH     {r4-r10,lr}
;;;1083   {
000ce2  b088              SUB      sp,sp,#0x20
;;;1084   static char ke_drv_cnt_10s;
;;;1085   static short i_bat_buff[6];
;;;1086   static char i_bat_buff_cnt;
;;;1087   short ke_drv_i_temp;
;;;1088   short ke_drv_i_avg;
;;;1089   char i;
;;;1090   short ke_drv_i_temp_temp;
;;;1091   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000ce4  f04f021c          MOV      r2,#0x1c
000ce8  49b7              LDR      r1,|L1.4040|
000cea  a801              ADD      r0,sp,#4
000cec  f7fffffe          BL       __aeabi_memcpy4
;;;1092   
;;;1093   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000cf0  4eb0              LDR      r6,|L1.4020|
;;;1094   	{
;;;1095   	
;;;1096   	i_bat_buff[0]=0;
000cf2  4bb6              LDR      r3,|L1.4044|
000cf4  2500              MOVS     r5,#0
000cf6  7ab0              LDRB     r0,[r6,#0xa]          ;1093  ; bat_hndl_zvu_ke_init
000cf8  2801              CMP      r0,#1                 ;1093
000cfa  d102              BNE      |L1.3330|
000cfc  801d              STRH     r5,[r3,#0]
;;;1097   	i_bat_buff[0]=0;
;;;1098   	i_bat_buff[0]=0;
;;;1099   	i_bat_buff[0]=0;
;;;1100   	i_bat_buff[0]=0;
;;;1101   	i_bat_buff[0]=0;
;;;1102   	i_bat_buff_cnt=0;
000cfe  73b5              STRB     r5,[r6,#0xe]
;;;1103   
;;;1104   	bat_hndl_zvu_ke_init=0;
000d00  72b5              STRB     r5,[r6,#0xa]
                  |L1.3330|
;;;1105   	}
;;;1106   
;;;1107   
;;;1108   
;;;1109   
;;;1110   if(spc_stat==spcKE)
000d02  f8960022          LDRB     r0,[r6,#0x22]  ; spc_stat
000d06  2801              CMP      r0,#1
000d08  d17e              BNE      |L1.3592|
;;;1111   	{
;;;1112   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000d0a  48b1              LDR      r0,|L1.4048|
000d0c  f04f070a          MOV      r7,#0xa
000d10  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000d14  f1c00000          RSB      r0,r0,#0
000d18  fb90f0f7          SDIV     r0,r0,r7
000d1c  b200              SXTH     r0,r0
;;;1113   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000d1e  2800              CMP      r0,#0
000d20  da01              BGE      |L1.3366|
000d22  f04f0000          MOV      r0,#0
                  |L1.3366|
;;;1114   
;;;1115   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000d26  4aab              LDR      r2,|L1.4052|
000d28  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000d2a  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1116   	if(++ke_drv_cnt_10s>10)
000d2c  1c49              ADDS     r1,r1,#1
;;;1117   		{
;;;1118   		ke_drv_cnt_10s=0;
;;;1119   
;;;1120   		i_bat_buff_cnt++;
;;;1121   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1122   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1123   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1124   		ke_drv_i_temp_temp=0;
;;;1125   		for(i=0;i<6;i++)
;;;1126   			{
;;;1127   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1128   			}
;;;1129   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1130   
;;;1131   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1132   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1133   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1134   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1135   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1136   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1137   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1138   		
;;;1139   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1140   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1141   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1142   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1143   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1144   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1145   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1146   
;;;1147   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1148   		bat_hndl_i_temp=ke_drv_i_avg;
000d2e  4ca1              LDR      r4,|L1.4020|
000d30  b2c9              UXTB     r1,r1                 ;1116
000d32  3480              ADDS     r4,r4,#0x80
000d34  7371              STRB     r1,[r6,#0xd]          ;1116
000d36  290a              CMP      r1,#0xa               ;1116
000d38  d967              BLS      |L1.3594|
000d3a  7375              STRB     r5,[r6,#0xd]          ;1118
000d3c  7bb1              LDRB     r1,[r6,#0xe]          ;1120  ; i_bat_buff_cnt
000d3e  f1010101          ADD      r1,r1,#1              ;1120
000d42  b2c9              UXTB     r1,r1                 ;1120
000d44  73b1              STRB     r1,[r6,#0xe]          ;1120
000d46  2906              CMP      r1,#6                 ;1121
000d48  d300              BCC      |L1.3404|
000d4a  73b5              STRB     r5,[r6,#0xe]          ;1121
                  |L1.3404|
000d4c  7bb1              LDRB     r1,[r6,#0xe]          ;1122  ; i_bat_buff_cnt
000d4e  6091              STR      r1,[r2,#8]            ;1122  ; bat_hndl_plazma
000d50  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1123
000d54  f04f0100          MOV      r1,#0                 ;1124
000d58  4608              MOV      r0,r1                 ;1125
                  |L1.3418|
000d5a  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1127
000d5e  4461              ADD      r1,r1,r12             ;1127
000d60  b209              SXTH     r1,r1                 ;1127
000d62  f1000001          ADD      r0,r0,#1              ;1125
000d66  b2c0              UXTB     r0,r0                 ;1125
000d68  2806              CMP      r0,#6                 ;1125
000d6a  d3f6              BCC      |L1.3418|
000d6c  f04f0006          MOV      r0,#6                 ;1129
000d70  fb91f0f0          SDIV     r0,r1,r0              ;1129
000d74  b201              SXTH     r1,r0                 ;1129
000d76  4898              LDR      r0,|L1.4056|
000d78  f8df8258          LDR      r8,|L1.4052|
000d7c  8800              LDRH     r0,[r0,#0]            ;1131  ; BAT_C_POINT_1_6
000d7e  f1a8081c          SUB      r8,r8,#0x1c           ;1131
000d82  eb000040          ADD      r0,r0,r0,LSL #1       ;1131
000d86  ea4f0040          LSL      r0,r0,#1              ;1131
000d8a  f8a80000          STRH     r0,[r8,#0]            ;1131
000d8e  4893              LDR      r0,|L1.4060|
000d90  8800              LDRH     r0,[r0,#0]            ;1132  ; BAT_C_POINT_1_2
000d92  ea4f0040          LSL      r0,r0,#1              ;1132
000d96  f8a80002          STRH     r0,[r8,#2]            ;1132
000d9a  4891              LDR      r0,|L1.4064|
000d9c  8800              LDRH     r0,[r0,#0]            ;1133  ; BAT_C_POINT_1
000d9e  f8a80004          STRH     r0,[r8,#4]            ;1133
000da2  4890              LDR      r0,|L1.4068|
000da4  f04f0303          MOV      r3,#3                 ;1134
000da8  f9b00000          LDRSH    r0,[r0,#0]            ;1134  ; BAT_C_POINT_3
000dac  fb90f0f3          SDIV     r0,r0,r3              ;1134
000db0  f8a80006          STRH     r0,[r8,#6]            ;1134
000db4  488c              LDR      r0,|L1.4072|
000db6  f04f0305          MOV      r3,#5                 ;1135
000dba  f9b00000          LDRSH    r0,[r0,#0]            ;1135  ; BAT_C_POINT_5
000dbe  fb90f0f3          SDIV     r0,r0,r3              ;1135
000dc2  f8a80008          STRH     r0,[r8,#8]            ;1135
000dc6  4889              LDR      r0,|L1.4076|
000dc8  f9b00000          LDRSH    r0,[r0,#0]            ;1136  ; BAT_C_POINT_10
000dcc  fb90f0f7          SDIV     r0,r0,r7              ;1136
000dd0  f8a8000a          STRH     r0,[r8,#0xa]          ;1136
000dd4  4886              LDR      r0,|L1.4080|
000dd6  f04f0314          MOV      r3,#0x14              ;1137
000dda  f9b00000          LDRSH    r0,[r0,#0]            ;1137  ; BAT_C_POINT_20
000dde  fb90f0f3          SDIV     r0,r0,r3              ;1137
000de2  f8a8000c          STRH     r0,[r8,#0xc]          ;1137
000de6  4883              LDR      r0,|L1.4084|
000de8  f108090e          ADD      r9,r8,#0xe            ;1139
000dec  f9b07000          LDRSH    r7,[r0,#0]            ;1139  ; BAT_U_END_1_6
000df0  f8a97000          STRH     r7,[r9,#0]            ;1139
000df4  4880              LDR      r0,|L1.4088|
000df6  8800              LDRH     r0,[r0,#0]            ;1140  ; BAT_U_END_1_2
000df8  f8a90002          STRH     r0,[r9,#2]            ;1140
000dfc  487f              LDR      r0,|L1.4092|
000dfe  8800              LDRH     r0,[r0,#0]            ;1141  ; BAT_U_END_1
000e00  f8a90004          STRH     r0,[r9,#4]            ;1141
000e04  487e              LDR      r0,|L1.4096|
000e06  e001              B        |L1.3596|
                  |L1.3592|
000e08  e11e              B        |L1.4168|
                  |L1.3594|
000e0a  e061              B        |L1.3792|
                  |L1.3596|
000e0c  8800              LDRH     r0,[r0,#0]            ;1142  ; BAT_U_END_3
000e0e  f8a90006          STRH     r0,[r9,#6]            ;1142
000e12  487c              LDR      r0,|L1.4100|
000e14  8800              LDRH     r0,[r0,#0]            ;1143  ; BAT_U_END_5
000e16  f8a90008          STRH     r0,[r9,#8]            ;1143
000e1a  487b              LDR      r0,|L1.4104|
000e1c  8800              LDRH     r0,[r0,#0]            ;1144  ; BAT_U_END_10
000e1e  f8a9000a          STRH     r0,[r9,#0xa]          ;1144
000e22  487a              LDR      r0,|L1.4108|
000e24  f9b0c000          LDRSH    r12,[r0,#0]           ;1145  ; BAT_U_END_20
000e28  f8a9c00c          STRH     r12,[r9,#0xc]         ;1145
000e2c  6051              STR      r1,[r2,#4]            ;1147  ; bat_hndl_plazma
000e2e  8161              STRH     r1,[r4,#0xa]
;;;1149   		
;;;1150   		for(i=0;i<7;i++)
000e30  f04f0000          MOV      r0,#0
                  |L1.3636|
;;;1151   			{
;;;1152   			if(bat_hndl_i_temp>=I_from_t_table[i])
000e34  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000e38  428b              CMP      r3,r1
000e3a  dd04              BLE      |L1.3654|
000e3c  f1000001          ADD      r0,r0,#1              ;1150
000e40  b2c0              UXTB     r0,r0                 ;1150
000e42  2807              CMP      r0,#7                 ;1150
000e44  d3f6              BCC      |L1.3636|
                  |L1.3654|
;;;1153   				{
;;;1154   				break;
;;;1155   				}
;;;1156   			}
;;;1157   
;;;1158   		bat_hndl_plazma[0]=i;
000e46  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000e48  f10d0a04          ADD      r10,sp,#4             ;1091
;;;1159   
;;;1160   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000e4c  b1c8              CBZ      r0,|L1.3714|
;;;1161   		 else if((i>=1)&&(i<7))
000e4e  1e42              SUBS     r2,r0,#1
000e50  2a06              CMP      r2,#6
000e52  d219              BCS      |L1.3720|
;;;1162   		 	{
;;;1163   			short i1,i2;
;;;1164   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000e54  f8383012          LDRH     r3,[r8,r2,LSL #1]
000e58  eba30101          SUB      r1,r3,r1
000e5c  b209              SXTH     r1,r1
;;;1165   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000e5e  f8388010          LDRH     r8,[r8,r0,LSL #1]
000e62  eba30308          SUB      r3,r3,r8
000e66  b21b              SXTH     r3,r3
;;;1166   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000e68  f85a8020          LDR      r8,[r10,r0,LSL #2]
000e6c  f85a2022          LDR      r2,[r10,r2,LSL #2]
000e70  eba80802          SUB      r8,r8,r2
;;;1167   			bat_hndl_t_razr_ke*=(long)i1;
000e74  fb08f801          MUL      r8,r8,r1
;;;1168   			bat_hndl_t_razr_ke/=(long)i2;
000e78  fb98f1f3          SDIV     r1,r8,r3
;;;1169   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000e7c  4411              ADD      r1,r1,r2
000e7e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
;;;1170   			}
000e80  e006              B        |L1.3728|
                  |L1.3714|
000e82  9901              LDR      r1,[sp,#4]            ;1160
000e84  6521              STR      r1,[r4,#0x50]         ;1160  ; bat_hndl_t_razr_ke
000e86  e003              B        |L1.3728|
                  |L1.3720|
;;;1171   		else if(i>=7)
000e88  2807              CMP      r0,#7
000e8a  d301              BCC      |L1.3728|
;;;1172   			{
;;;1173   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
000e8c  9907              LDR      r1,[sp,#0x1c]
000e8e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
                  |L1.3728|
;;;1174   			}
;;;1175   
;;;1176   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
000e90  b1c0              CBZ      r0,|L1.3780|
;;;1177   		 else if((i>=1)&&(i<7))
000e92  1e41              SUBS     r1,r0,#1
000e94  2906              CMP      r1,#6
000e96  d217              BCS      |L1.3784|
;;;1178   		 	{
;;;1179   			long u1,tempL;
;;;1180   
;;;1181   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
000e98  f9393010          LDRSH    r3,[r9,r0,LSL #1]
000e9c  f9392011          LDRSH    r2,[r9,r1,LSL #1]
000ea0  eba30302          SUB      r3,r3,r2
;;;1182   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
000ea4  f85a1021          LDR      r1,[r10,r1,LSL #2]
000ea8  6d27              LDR      r7,[r4,#0x50]  ; bat_hndl_t_razr_ke
000eaa  eba70701          SUB      r7,r7,r1
;;;1183   			tempL*=u1;
000eae  fb03f307          MUL      r3,r3,r7
;;;1184   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000eb2  f85a0020          LDR      r0,[r10,r0,LSL #2]
000eb6  eba00001          SUB      r0,r0,r1
;;;1185   			tempL/=u1;
000eba  fb93f0f0          SDIV     r0,r3,r0
;;;1186   			tempL+=(long)U_end_from_i_table[i-1];
000ebe  4410              ADD      r0,r0,r2
;;;1187   			bat_hndl_u_end=(short)tempL;
000ec0  81a0              STRH     r0,[r4,#0xc]
;;;1188   			}
000ec2  e005              B        |L1.3792|
                  |L1.3780|
000ec4  81a7              STRH     r7,[r4,#0xc]          ;1176
000ec6  e003              B        |L1.3792|
                  |L1.3784|
;;;1189   		else if(i>=7)
000ec8  2807              CMP      r0,#7
000eca  d301              BCC      |L1.3792|
;;;1190   			{
;;;1191   			bat_hndl_u_end=U_end_from_i_table[6];
000ecc  f8a4c00c          STRH     r12,[r4,#0xc]
                  |L1.3792|
;;;1192   			}
;;;1193   
;;;1194   		}
;;;1195   
;;;1196   
;;;1197   
;;;1198   	if(spc_phase==0)
000ed0  f8960024          LDRB     r0,[r6,#0x24]  ; spc_phase
;;;1199   		{
;;;1200   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1201   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1202   
;;;1203   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1204   	    	
;;;1205   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1206   			{
;;;1207   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1208   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000ed4  4f39              LDR      r7,|L1.4028|
;;;1209   			}
;;;1210   
;;;1211   		bat[0]._time_min_cnt_ke++;
;;;1212   		if(bat[0]._time_min_cnt_ke>=60)
;;;1213   			{
;;;1214   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
000ed6  f44f78e3          MOV      r8,#0x1c6
000eda  bbe8              CBNZ     r0,|L1.3928|
000edc  2314              MOVS     r3,#0x14              ;1201
000ede  f04f32ff          MOV      r2,#0xffffffff        ;1201
000ee2  21ce              MOVS     r1,#0xce              ;1201
000ee4  20cd              MOVS     r0,#0xcd              ;1201
000ee6  f7fffffe          BL       mess_send
000eea  f8961023          LDRB     r1,[r6,#0x23]         ;1203  ; spc_bat
000eee  f8df90c8          LDR      r9,|L1.4024|
000ef2  eb010041          ADD      r0,r1,r1,LSL #1       ;1203
000ef6  eb001001          ADD      r0,r0,r1,LSL #4       ;1203
000efa  eb090080          ADD      r0,r9,r0,LSL #2       ;1203
000efe  f9b00008          LDRSH    r0,[r0,#8]            ;1203
000f02  f7fffffe          BL       abs
000f06  f8d91018          LDR      r1,[r9,#0x18]         ;1203  ; bat
000f0a  4401              ADD      r1,r1,r0              ;1203
000f0c  f8c91018          STR      r1,[r9,#0x18]         ;1203  ; bat
000f10  f64840a0          MOV      r0,#0x8ca0            ;1205
000f14  4281              CMP      r1,r0                 ;1205
000f16  db0c              BLT      |L1.3890|
000f18  eba10100          SUB      r1,r1,r0              ;1207
000f1c  f8c91018          STR      r1,[r9,#0x18]         ;1207  ; bat
000f20  8838              LDRH     r0,[r7,#0]            ;1208  ; ADR_EE_BAT_ZAR_CNT_KE
000f22  f7fffffe          BL       lc640_read_int
000f26  1c40              ADDS     r0,r0,#1              ;1208
000f28  b201              SXTH     r1,r0                 ;1208
000f2a  f9b70000          LDRSH    r0,[r7,#0]            ;1208  ; ADR_EE_BAT_ZAR_CNT_KE
000f2e  f7fffffe          BL       lc640_write_int
                  |L1.3890|
000f32  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1211  ; bat
000f36  f1000001          ADD      r0,r0,#1              ;1211
000f3a  b281              UXTH     r1,r0                 ;1211
000f3c  f8a9104a          STRH     r1,[r9,#0x4a]         ;1211
000f40  293c              CMP      r1,#0x3c              ;1212
000f42  d309              BCC      |L1.3928|
000f44  4640              MOV      r0,r8
000f46  f7fffffe          BL       lc640_read_int
000f4a  1c40              ADDS     r0,r0,#1
000f4c  b201              SXTH     r1,r0
000f4e  4640              MOV      r0,r8
000f50  f7fffffe          BL       lc640_write_int
;;;1215   			bat[0]._time_min_cnt_ke=0;
000f54  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.3928|
;;;1216   			}
;;;1217   		}
;;;1218   
;;;1219   	else if(spc_phase==1)
;;;1220   		{
;;;1221   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1222   		}
;;;1223   
;;;1224   	if(out_U<bat_hndl_u_end)
000f58  482d              LDR      r0,|L1.4112|
000f5a  f9b4100c          LDRSH    r1,[r4,#0xc]  ; bat_hndl_u_end
000f5e  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
000f62  4288              CMP      r0,r1
000f64  da6e              BGE      |L1.4164|
;;;1225   		{
;;;1226   		cnt_end_ke++;
000f66  f8b60068          LDRH     r0,[r6,#0x68]  ; cnt_end_ke
000f6a  f1000001          ADD      r0,r0,#1
000f6e  b200              SXTH     r0,r0
000f70  f8a60068          STRH     r0,[r6,#0x68]
;;;1227   		if(cnt_end_ke>=30)
000f74  281e              CMP      r0,#0x1e
000f76  db67              BLT      |L1.4168|
;;;1228   			{
;;;1229   			
;;;1230   			if((spc_stat==spcKE)&&(spc_phase==0))
000f78  f8960022          LDRB     r0,[r6,#0x22]  ; spc_stat
000f7c  2801              CMP      r0,#1
000f7e  d155              BNE      |L1.4140|
000f80  f8960024          LDRB     r0,[r6,#0x24]  ; spc_phase
000f84  b9a8              CBNZ     r0,|L1.4018|
;;;1231   				{
;;;1232   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
000f86  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000f88  f7fffffe          BL       lc640_read_int
000f8c  b201              SXTH     r1,r0
000f8e  4821              LDR      r0,|L1.4116|
000f90  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
000f94  f7fffffe          BL       lc640_write_int
;;;1233   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
000f98  4640              MOV      r0,r8
000f9a  f7fffffe          BL       lc640_read_int
000f9e  b284              UXTH     r4,r0
000fa0  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000fa2  f7fffffe          BL       lc640_read_int
000fa6  b281              UXTH     r1,r0
000fa8  4622              MOV      r2,r4
000faa  2000              MOVS     r0,#0
000fac  f7fffffe          BL       ke_zvu_mem_hndl
;;;1234   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
000fb0  e032              B        |L1.4120|
                  |L1.4018|
000fb2  e03b              B        |L1.4140|
                  |L1.4020|
                          DCD      ||area_number.25||
                  |L1.4024|
                          DCD      bat
                  |L1.4028|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4032|
                          DCD      bat_u_old_cnt
                  |L1.4036|
                          DCD      0x40024020
                  |L1.4040|
                          DCD      ||area_number.19||+0x4
                  |L1.4044|
                          DCD      ||.bss||
                  |L1.4048|
                          DCD      Ib_ips_termokompensat
                  |L1.4052|
                          DCD      ||.bss||+0x468
                  |L1.4056|
                          DCD      BAT_C_POINT_1_6
                  |L1.4060|
                          DCD      BAT_C_POINT_1_2
                  |L1.4064|
                          DCD      BAT_C_POINT_1
                  |L1.4068|
                          DCD      BAT_C_POINT_3
                  |L1.4072|
                          DCD      BAT_C_POINT_5
                  |L1.4076|
                          DCD      BAT_C_POINT_10
                  |L1.4080|
                          DCD      BAT_C_POINT_20
                  |L1.4084|
                          DCD      BAT_U_END_1_6
                  |L1.4088|
                          DCD      BAT_U_END_1_2
                  |L1.4092|
                          DCD      BAT_U_END_1
                  |L1.4096|
                          DCD      BAT_U_END_3
                  |L1.4100|
                          DCD      BAT_U_END_5
                  |L1.4104|
                          DCD      BAT_U_END_10
                  |L1.4108|
                          DCD      BAT_U_END_20
                  |L1.4112|
                          DCD      out_U
                  |L1.4116|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4120|
001018  48ff              LDR      r0,|L1.5144|
00101a  2100              MOVS     r1,#0
00101c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001020  f7fffffe          BL       lc640_write_int
;;;1235   				cntrl_stat=50;
001024  f04f0032          MOV      r0,#0x32
001028  8630              STRH     r0,[r6,#0x30]
;;;1236   				cntrl_stat_old=50;
00102a  8670              STRH     r0,[r6,#0x32]
                  |L1.4140|
;;;1237   				}
;;;1238   
;;;1239   			spc_stat=spcOFF;
00102c  f8865022          STRB     r5,[r6,#0x22]
;;;1240   			__ee_spc_stat=spcOFF;
001030  f8a6506c          STRH     r5,[r6,#0x6c]
;;;1241   			lc640_write_int(EE_SPC_STAT,spcOFF);
001034  b008              ADD      sp,sp,#0x20
001036  2100              MOVS     r1,#0
001038  e8bd47f0          POP      {r4-r10,lr}
00103c  f240209a          MOV      r0,#0x29a
001040  f7ffbffe          B.W      lc640_write_int
                  |L1.4164|
;;;1242   
;;;1243   			}
;;;1244   		}
;;;1245   	else cnt_end_ke=0;
001044  f8a65068          STRH     r5,[r6,#0x68]
                  |L1.4168|
;;;1246   
;;;1247   	}
;;;1248   			
;;;1249   }
001048  b008              ADD      sp,sp,#0x20
00104a  e8bd87f0          POP      {r4-r10,pc}
;;;1250   #endif
                          ENDP

                  vz_start PROC
;;;1320   //-----------------------------------------------
;;;1321   char vz_start(char hour)
00104e  b570              PUSH     {r4-r6,lr}
;;;1322   {          
001050  4605              MOV      r5,r0
;;;1323   char out;
;;;1324   out=0;
001052  f04f0600          MOV      r6,#0
;;;1325   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
001056  4cf1              LDR      r4,|L1.5148|
001058  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
00105c  bba0              CBNZ     r0,|L1.4296|
00105e  48f0              LDR      r0,|L1.5152|
001060  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001062  2801              CMP      r0,#1
001064  d030              BEQ      |L1.4296|
;;;1326   	{
;;;1327   	spc_stat=spcVZ;
001066  f104042e          ADD      r4,r4,#0x2e
00106a  f04f0102          MOV      r1,#2
00106e  f8041c0c          STRB     r1,[r4,#-0xc]
;;;1328   	__ee_spc_stat=spcVZ; 
001072  87e1              STRH     r1,[r4,#0x3e]
;;;1329   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001074  f240209a          MOV      r0,#0x29a
001078  f7fffffe          BL       lc640_write_int
;;;1330   	vz_cnt_h=hour;
00107c  86e5              STRH     r5,[r4,#0x36]
;;;1331   	__ee_vz_cnt=hour*60;
00107e  ebc51005          RSB      r0,r5,r5,LSL #4
001082  ea4f0080          LSL      r0,r0,#2
001086  87a0              STRH     r0,[r4,#0x3c]
001088  f1a4042e          SUB      r4,r4,#0x2e
;;;1332   	if(hour==0)__ee_vz_cnt=30;
00108c  b91d              CBNZ     r5,|L1.4246|
00108e  f04f001e          MOV      r0,#0x1e
001092  f8a4006a          STRH     r0,[r4,#0x6a]
                  |L1.4246|
;;;1333   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001096  f1040460          ADD      r4,r4,#0x60
00109a  f44f7027          MOV      r0,#0x29c
00109e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010a2  f7fffffe          BL       lc640_write_int
;;;1334   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0010a6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010aa  f44f702a          MOV      r0,#0x2a8
0010ae  f7fffffe          BL       lc640_write_int
;;;1335   	vz_cnt_h_=0;
0010b2  f04f0000          MOV      r0,#0
0010b6  80e0              STRH     r0,[r4,#6]
;;;1336   	vz_cnt_s=0;
0010b8  8020              STRH     r0,[r4,#0]
;;;1337   	vz_cnt_s_=0;
0010ba  8060              STRH     r0,[r4,#2]
;;;1338   	out=1;
0010bc  f04f0601          MOV      r6,#1
;;;1339   	vz_mem_hndl(1);
0010c0  f04f0001          MOV      r0,#1
0010c4  f7fffffe          BL       vz_mem_hndl
                  |L1.4296|
;;;1340   	}
;;;1341   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1342   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1343   //plazma=out;	
;;;1344   return out;
0010c8  4630              MOV      r0,r6
;;;1345   }
0010ca  bd70              POP      {r4-r6,pc}
;;;1346   
                          ENDP

                  vz_stop PROC
;;;1347   //-----------------------------------------------
;;;1348   void vz_stop(void)
0010cc  b510              PUSH     {r4,lr}
;;;1349   {
;;;1350   if(spc_stat==spcVZ)
0010ce  4cd3              LDR      r4,|L1.5148|
0010d0  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
0010d4  2802              CMP      r0,#2
0010d6  d113              BNE      |L1.4352|
;;;1351        {
;;;1352   vz_mem_hndl(vz_cnt_h);          
0010d8  f104042e          ADD      r4,r4,#0x2e
0010dc  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
0010de  f7fffffe          BL       vz_mem_hndl
;;;1353   vz_cnt_s=0;
0010e2  f04f0000          MOV      r0,#0
0010e6  8660              STRH     r0,[r4,#0x32]
;;;1354   vz_cnt_h=0;
0010e8  86e0              STRH     r0,[r4,#0x36]
;;;1355   vz_cnt_h_=0;
0010ea  8720              STRH     r0,[r4,#0x38]
;;;1356   spc_stat=spcOFF;
0010ec  f8040c0c          STRB     r0,[r4,#-0xc]
;;;1357   
;;;1358   		__ee_spc_stat=spcOFF;
0010f0  87e0              STRH     r0,[r4,#0x3e]
;;;1359   		lc640_write_int(EE_SPC_STAT,spcOFF);
0010f2  4601              MOV      r1,r0
0010f4  e8bd4010          POP      {r4,lr}
0010f8  f240209a          MOV      r0,#0x29a
0010fc  f7ffbffe          B.W      lc640_write_int
                  |L1.4352|
;;;1360        }
;;;1361   
;;;1362   }
001100  bd10              POP      {r4,pc}
;;;1363   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1365   //-----------------------------------------------
;;;1366   void amper_chas_cnt_drv(void)
001102  b510              PUSH     {r4,lr}
;;;1367   {
;;;1368   
;;;1369   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
001104  4ac5              LDR      r2,|L1.5148|
001106  49c7              LDR      r1,|L1.5156|
001108  3280              ADDS     r2,r2,#0x80
00110a  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00110e  6e10              LDR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
001110  4401              ADD      r1,r1,r0
001112  6611              STR      r1,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1370   
;;;1371   if(amper_chas_cnt_drv_summ>=36000L)
001114  f64843a0          MOV      r3,#0x8ca0
;;;1372   	{
;;;1373   	amper_chas_cnt_drv_summ-=36000L;
;;;1374   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001118  f44f74e4          MOV      r4,#0x1c8
00111c  4299              CMP      r1,r3                 ;1371
00111e  db0c              BLT      |L1.4410|
001120  eba10103          SUB      r1,r1,r3              ;1373
001124  6611              STR      r1,[r2,#0x60]         ;1373  ; amper_chas_cnt_drv_summ
001126  4620              MOV      r0,r4
001128  f7fffffe          BL       lc640_read_int
00112c  1c40              ADDS     r0,r0,#1
00112e  b201              SXTH     r1,r0
001130  4620              MOV      r0,r4
001132  e8bd4010          POP      {r4,lr}
001136  f7ffbffe          B.W      lc640_write_int
                  |L1.4410|
;;;1375   	}
;;;1376   else if(amper_chas_cnt_drv_summ<=-36000L)
00113a  48bb              LDR      r0,|L1.5160|
00113c  4281              CMP      r1,r0
00113e  dc0c              BGT      |L1.4442|
;;;1377   	{
;;;1378   	amper_chas_cnt_drv_summ+=36000L;
001140  eb010003          ADD      r0,r1,r3
001144  6610              STR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1379   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
001146  4620              MOV      r0,r4
001148  f7fffffe          BL       lc640_read_int
00114c  1e40              SUBS     r0,r0,#1
00114e  b201              SXTH     r1,r0
001150  4620              MOV      r0,r4
001152  e8bd4010          POP      {r4,lr}
001156  f7ffbffe          B.W      lc640_write_int
                  |L1.4442|
;;;1380   	}
;;;1381   }
00115a  bd10              POP      {r4,pc}
;;;1382   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1384   //-----------------------------------------------
;;;1385   void avz_next_date_hndl(void)
00115c  b570              PUSH     {r4-r6,lr}
;;;1386   {
;;;1387   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
00115e  4cb3              LDR      r4,|L1.5164|
001160  f8940038          LDRB     r0,[r4,#0x38]
001164  4db2              LDR      r5,|L1.5168|
001166  7829              LDRB     r1,[r5,#0]  ; AVZ
001168  4408              ADD      r0,r0,r1
00116a  280c              CMP      r0,#0xc
00116c  d906              BLS      |L1.4476|
00116e  8fa0              LDRH     r0,[r4,#0x3c]
001170  1c40              ADDS     r0,r0,#1
001172  b201              SXTH     r1,r0
001174  20b8              MOVS     r0,#0xb8
001176  f7fffffe          BL       lc640_write_int
00117a  e004              B        |L1.4486|
                  |L1.4476|
;;;1388   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
00117c  f9b4103c          LDRSH    r1,[r4,#0x3c]
001180  20b8              MOVS     r0,#0xb8
001182  f7fffffe          BL       lc640_write_int
                  |L1.4486|
;;;1389   
;;;1390   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1391   
;;;1392   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
001186  f8941038          LDRB     r1,[r4,#0x38]
00118a  7828              LDRB     r0,[r5,#0]  ; AVZ
00118c  4401              ADD      r1,r1,r0
00118e  290c              CMP      r1,#0xc
001190  d907              BLS      |L1.4514|
001192  f8941038          LDRB     r1,[r4,#0x38]
001196  380c              SUBS     r0,r0,#0xc
001198  4401              ADD      r1,r1,r0
00119a  20b6              MOVS     r0,#0xb6
00119c  f7fffffe          BL       lc640_write_int
0011a0  e005              B        |L1.4526|
                  |L1.4514|
;;;1393   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0011a2  f8941038          LDRB     r1,[r4,#0x38]
0011a6  4401              ADD      r1,r1,r0
0011a8  20b6              MOVS     r0,#0xb6
0011aa  f7fffffe          BL       lc640_write_int
                  |L1.4526|
;;;1394   
;;;1395   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1396   
;;;1397   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0011ae  f894002c          LDRB     r0,[r4,#0x2c]
0011b2  281c              CMP      r0,#0x1c
0011b4  d904              BLS      |L1.4544|
0011b6  211c              MOVS     r1,#0x1c
0011b8  20b4              MOVS     r0,#0xb4
0011ba  f7fffffe          BL       lc640_write_int
0011be  e004              B        |L1.4554|
                  |L1.4544|
;;;1398   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
0011c0  f894102c          LDRB     r1,[r4,#0x2c]
0011c4  20b4              MOVS     r0,#0xb4
0011c6  f7fffffe          BL       lc640_write_int
                  |L1.4554|
;;;1399   
;;;1400   //lc640_write_int(EE_DATE_AVZ,4);
;;;1401   
;;;1402   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
0011ca  f1040420          ADD      r4,r4,#0x20
0011ce  7a21              LDRB     r1,[r4,#8]
0011d0  f04f00ae          MOV      r0,#0xae
0011d4  f7fffffe          BL       lc640_write_int
;;;1403   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
0011d8  7921              LDRB     r1,[r4,#4]
0011da  20b0              MOVS     r0,#0xb0
0011dc  f7fffffe          BL       lc640_write_int
;;;1404   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
0011e0  7821              LDRB     r1,[r4,#0]
0011e2  e8bd4070          POP      {r4-r6,lr}
0011e6  20b2              MOVS     r0,#0xb2
0011e8  f7ffbffe          B.W      lc640_write_int
;;;1405   
;;;1406   }
;;;1407   
                          ENDP

                  avz_drv PROC
;;;1408   //-----------------------------------------------
;;;1409   void avz_drv(void)                               
0011ec  b510              PUSH     {r4,lr}
;;;1410   {                
;;;1411   if(AVZ!=AVZ_OFF)
0011ee  4890              LDR      r0,|L1.5168|
;;;1412   	{
;;;1413   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1414   		{
;;;1415   		bAVZ=1;
0011f0  4c8a              LDR      r4,|L1.5148|
0011f2  7800              LDRB     r0,[r0,#0]            ;1411  ; AVZ
0011f4  b338              CBZ      r0,|L1.4678|
0011f6  488d              LDR      r0,|L1.5164|
0011f8  8f82              LDRH     r2,[r0,#0x3c]         ;1413
0011fa  498e              LDR      r1,|L1.5172|
0011fc  8809              LDRH     r1,[r1,#0]            ;1413  ; YEAR_AVZ
0011fe  428a              CMP      r2,r1                 ;1413
001200  d121              BNE      |L1.4678|
001202  f8902038          LDRB     r2,[r0,#0x38]         ;1413
001206  498c              LDR      r1,|L1.5176|
001208  8809              LDRH     r1,[r1,#0]            ;1413  ; MONTH_AVZ
00120a  428a              CMP      r2,r1                 ;1413
00120c  d11b              BNE      |L1.4678|
00120e  f890102c          LDRB     r1,[r0,#0x2c]         ;1413
001212  4a8a              LDR      r2,|L1.5180|
001214  8812              LDRH     r2,[r2,#0]            ;1413  ; DATE_AVZ
001216  4291              CMP      r1,r2                 ;1413
001218  d115              BNE      |L1.4678|
00121a  f8901028          LDRB     r1,[r0,#0x28]         ;1413
00121e  4a88              LDR      r2,|L1.5184|
001220  8812              LDRH     r2,[r2,#0]            ;1413  ; HOUR_AVZ
001222  4291              CMP      r1,r2                 ;1413
001224  d10f              BNE      |L1.4678|
001226  f8901024          LDRB     r1,[r0,#0x24]         ;1413
00122a  4a86              LDR      r2,|L1.5188|
00122c  8812              LDRH     r2,[r2,#0]            ;1413  ; MIN_AVZ
00122e  4291              CMP      r1,r2                 ;1413
001230  d109              BNE      |L1.4678|
001232  f8900020          LDRB     r0,[r0,#0x20]         ;1413
001236  4984              LDR      r1,|L1.5192|
001238  8809              LDRH     r1,[r1,#0]            ;1413  ; SEC_AVZ
00123a  4288              CMP      r0,r1                 ;1413
00123c  d103              BNE      |L1.4678|
00123e  f04f0001          MOV      r0,#1
001242  f8840025          STRB     r0,[r4,#0x25]
                  |L1.4678|
;;;1416   		}
;;;1417   	}
;;;1418   if(bAVZ)
001246  f8940025          LDRB     r0,[r4,#0x25]  ; bAVZ
00124a  2800              CMP      r0,#0
00124c  d00d              BEQ      |L1.4714|
;;;1419   	{
;;;1420   	if(vz_start(AVZ_TIME))
00124e  487f              LDR      r0,|L1.5196|
001250  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
001252  b2c0              UXTB     r0,r0
001254  f7fffffe          BL       vz_start
001258  2800              CMP      r0,#0
00125a  d006              BEQ      |L1.4714|
;;;1421   		{
;;;1422   		bAVZ=0;
00125c  f04f0000          MOV      r0,#0
001260  f8840025          STRB     r0,[r4,#0x25]
;;;1423   		avz_next_date_hndl();
001264  e8bd4010          POP      {r4,lr}
001268  e7fe              B        avz_next_date_hndl
                  |L1.4714|
;;;1424   		}
;;;1425   	}	
;;;1426   
;;;1427   }
00126a  bd10              POP      {r4,pc}
;;;1428   
                          ENDP

                  vz_drv PROC
;;;1429   //-----------------------------------------------
;;;1430   void vz_drv(void)
00126c  b538              PUSH     {r3-r5,lr}
;;;1431   { 
;;;1432   if(spc_stat==spcVZ)
00126e  4c6b              LDR      r4,|L1.5148|
001270  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
001274  2802              CMP      r0,#2
001276  d11d              BNE      |L1.4788|
;;;1433   	{
;;;1434   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001278  4875              LDR      r0,|L1.5200|
00127a  7800              LDRB     r0,[r0,#0]  ; sk_stat
00127c  2801              CMP      r0,#1
00127e  d01a              BEQ      |L1.4790|
001280  4874              LDR      r0,|L1.5204|
001282  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
001284  2800              CMP      r0,#0
001286  d016              BEQ      |L1.4790|
;;;1435   		{
;;;1436   
;;;1437   	if(vz_cnt_s_<3600)
;;;1438   		{
;;;1439   		vz_cnt_s_++;
;;;1440   		if(vz_cnt_s_>=3600)
;;;1441   			{
;;;1442   			vz_cnt_s_=0;
;;;1443   			if(vz_cnt_h)
;;;1444   				{
;;;1445   				vz_cnt_h--;
;;;1446   				vz_cnt_h_++;
;;;1447   				}
;;;1448   			}
;;;1449   		}
;;;1450   
;;;1451   
;;;1452   	if(vz_cnt_s<60)
;;;1453   		{
;;;1454   		vz_cnt_s++;
;;;1455   		if(vz_cnt_s>=60)
;;;1456   			{
;;;1457   			vz_cnt_s=0;
;;;1458   			
;;;1459   			__ee_vz_cnt--;
;;;1460   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1461   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1462   				{
;;;1463   				spc_stat=spcOFF;
;;;1464   						__ee_spc_stat=spcOFF;
;;;1465   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1466   
;;;1467   //				hv_vz_stat=hvsOFF;
;;;1468   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1469   				vz_mem_hndl(0);
;;;1470   				}
;;;1471   			}
;;;1472   		}
;;;1473   		vz_error=0; 
;;;1474   		}
;;;1475   	else 
;;;1476   		{
;;;1477   		vz_error=1; 
001288  f04f0001          MOV      r0,#1
00128c  7060              STRB     r0,[r4,#1]
;;;1478   		if(((LPC_RTC->SEC)%10)==0)
00128e  4872              LDR      r0,|L1.5208|
001290  7800              LDRB     r0,[r0,#0]
001292  f04f010a          MOV      r1,#0xa
001296  fbb0f2f1          UDIV     r2,r0,r1
00129a  fb010012          MLS      r0,r1,r2,r0
00129e  2800              CMP      r0,#0
0012a0  d108              BNE      |L1.4788|
;;;1479   			{
;;;1480   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0012a2  f2413088          MOV      r0,#0x1388
0012a6  9000              STR      r0,[sp,#0]
0012a8  a36c              ADR      r3,|L1.5212|
0012aa  a272              ADR      r2,|L1.5236|
0012ac  a177              ADR      r1,|L1.5260|
0012ae  a07d              ADR      r0,|L1.5284|
0012b0  f7fffffe          BL       show_mess
                  |L1.4788|
;;;1481   						"    ЗАБЛОКИРОВАН    ",
;;;1482   						"     НЕИСПРАВНА     ",
;;;1483   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1484   						5000);			
;;;1485   			}
;;;1486   		}
;;;1487   /*	if(vz_cnt_s_>=3)
;;;1488   		{
;;;1489   		if(sk_stat[0]==0)
;;;1490   		} */
;;;1491   
;;;1492   	}
;;;1493   
;;;1494   
;;;1495   } 
0012b4  bd38              POP      {r3-r5,pc}
                  |L1.4790|
0012b6  f8b40062          LDRH     r0,[r4,#0x62]         ;1437  ; vz_cnt_s_
0012ba  f44f6161          MOV      r1,#0xe10             ;1437
0012be  2500              MOVS     r5,#0                 ;1434
0012c0  4288              CMP      r0,r1                 ;1437
0012c2  d215              BCS      |L1.4848|
0012c4  f1000001          ADD      r0,r0,#1              ;1439
0012c8  b280              UXTH     r0,r0                 ;1439
0012ca  f8a40062          STRH     r0,[r4,#0x62]         ;1439
0012ce  4288              CMP      r0,r1                 ;1440
0012d0  d30e              BCC      |L1.4848|
0012d2  f8a45062          STRH     r5,[r4,#0x62]         ;1442
0012d6  f8b40064          LDRH     r0,[r4,#0x64]         ;1443  ; vz_cnt_h
0012da  b148              CBZ      r0,|L1.4848|
0012dc  f1a00001          SUB      r0,r0,#1              ;1445
0012e0  f8240f64          STRH     r0,[r4,#0x64]!        ;1445
0012e4  8860              LDRH     r0,[r4,#2]            ;1446  ; vz_cnt_h_
0012e6  f1000001          ADD      r0,r0,#1              ;1446
0012ea  8060              STRH     r0,[r4,#2]            ;1446
0012ec  f1a40464          SUB      r4,r4,#0x64           ;1446
                  |L1.4848|
0012f0  f8b40060          LDRH     r0,[r4,#0x60]         ;1452  ; vz_cnt_s
0012f4  283c              CMP      r0,#0x3c              ;1452
0012f6  d225              BCS      |L1.4932|
0012f8  f1000001          ADD      r0,r0,#1              ;1454
0012fc  b280              UXTH     r0,r0                 ;1454
0012fe  f8a40060          STRH     r0,[r4,#0x60]         ;1454
001302  283c              CMP      r0,#0x3c              ;1455
001304  d31e              BCC      |L1.4932|
001306  f8245f60          STRH     r5,[r4,#0x60]!        ;1457
00130a  8960              LDRH     r0,[r4,#0xa]          ;1459  ; __ee_vz_cnt
00130c  f1a00001          SUB      r0,r0,#1              ;1459
001310  b201              SXTH     r1,r0                 ;1459
001312  8161              STRH     r1,[r4,#0xa]          ;1459
001314  f44f7027          MOV      r0,#0x29c             ;1460
001318  f7fffffe          BL       lc640_write_int
00131c  8960              LDRH     r0,[r4,#0xa]          ;1461  ; __ee_vz_cnt
00131e  f1a40460          SUB      r4,r4,#0x60           ;1461
001322  b118              CBZ      r0,|L1.4908|
001324  483e              LDR      r0,|L1.5152|
001326  8800              LDRH     r0,[r0,#0]            ;1461  ; speedChrgBlckStat
001328  2801              CMP      r0,#1                 ;1461
00132a  d10b              BNE      |L1.4932|
                  |L1.4908|
00132c  f8845022          STRB     r5,[r4,#0x22]         ;1463
001330  f8a4506c          STRH     r5,[r4,#0x6c]         ;1464
001334  2100              MOVS     r1,#0                 ;1465
001336  f240209a          MOV      r0,#0x29a             ;1465
00133a  f7fffffe          BL       lc640_write_int
00133e  2000              MOVS     r0,#0                 ;1469
001340  f7fffffe          BL       vz_mem_hndl
                  |L1.4932|
001344  7065              STRB     r5,[r4,#1]            ;1473
001346  bd38              POP      {r3-r5,pc}
;;;1496   
                          ENDP

                  vz1_drv PROC
;;;1498   //драйвер уравнительного заряда
;;;1499   void vz1_drv(void)
001348  e92d4ff8          PUSH     {r3-r11,lr}
;;;1500   {
;;;1501   if(volt_region_cnt)volt_region_cnt--;
00134c  f8df80cc          LDR      r8,|L1.5148|
001350  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; volt_region_cnt
001354  b118              CBZ      r0,|L1.4958|
001356  f1a00001          SUB      r0,r0,#1
00135a  f8a8007a          STRH     r0,[r8,#0x7a]
                  |L1.4958|
;;;1502   if(vz1_stat==vz1sOFF)
00135e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001362  b928              CBNZ     r0,|L1.4976|
;;;1503   	{
;;;1504   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001364  2314              MOVS     r3,#0x14
001366  2200              MOVS     r2,#0
001368  2164              MOVS     r1,#0x64
00136a  20d2              MOVS     r0,#0xd2
00136c  f7fffffe          BL       mess_send
                  |L1.4976|
;;;1505   	}
;;;1506   if(vz1_stat==vz1sSTEP1)
001370  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1507   	{
;;;1508   	if(vz1_stat_old!=vz1_stat)
;;;1509   		{
;;;1510   		vz1_stat_cnt=5;
;;;1511   		}
;;;1512   	if(vz1_stat_cnt)
;;;1513   		{
;;;1514   		vz1_stat_cnt--;
;;;1515   		if(vz1_stat_cnt==0)
;;;1516   			{
;;;1517   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1518   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1519   			}
;;;1520   		}
;;;1521   	if(sk_stat[0]==1)
001374  4d36              LDR      r5,|L1.5200|
001376  f44f7bc9          MOV      r11,#0x192            ;1518
00137a  2801              CMP      r0,#1                 ;1506
00137c  d139              BNE      |L1.5106|
00137e  f8980006          LDRB     r0,[r8,#6]            ;1508  ; vz1_stat_old
001382  2801              CMP      r0,#1                 ;1508
001384  d003              BEQ      |L1.5006|
001386  f04f0005          MOV      r0,#5                 ;1510
00138a  f8a80078          STRH     r0,[r8,#0x78]         ;1510
                  |L1.5006|
00138e  f9b80078          LDRSH    r0,[r8,#0x78]         ;1512  ; vz1_stat_cnt
001392  b168              CBZ      r0,|L1.5040|
001394  f1a00001          SUB      r0,r0,#1              ;1514
001398  b200              SXTH     r0,r0                 ;1514
00139a  f8a80078          STRH     r0,[r8,#0x78]         ;1514
00139e  b938              CBNZ     r0,|L1.5040|
0013a0  f04f000b          MOV      r0,#0xb               ;1517
0013a4  f8880005          STRB     r0,[r8,#5]            ;1517
0013a8  4601              MOV      r1,r0                 ;1518
0013aa  4658              MOV      r0,r11                ;1518
0013ac  f7fffffe          BL       lc640_write
                  |L1.5040|
0013b0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0013b2  2801              CMP      r0,#1
0013b4  d117              BNE      |L1.5094|
;;;1522   		{
;;;1523   		vz1_stat=vz1sSTEP2;
0013b6  f04f0002          MOV      r0,#2
0013ba  f8880005          STRB     r0,[r8,#5]
;;;1524   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0013be  4601              MOV      r1,r0
0013c0  4658              MOV      r0,r11
0013c2  f7fffffe          BL       lc640_write
;;;1525   		tree_up(iVZ1_STEP2_2,1,0,0);
0013c6  2300              MOVS     r3,#0
0013c8  461a              MOV      r2,r3
0013ca  2101              MOVS     r1,#1
0013cc  20de              MOVS     r0,#0xde
0013ce  f7fffffe          BL       tree_up
;;;1526   		tree_up(iVZ1_STEP2_1,0,0,0);
0013d2  2300              MOVS     r3,#0
0013d4  461a              MOV      r2,r3
0013d6  4619              MOV      r1,r3
0013d8  20dd              MOVS     r0,#0xdd
0013da  f7fffffe          BL       tree_up
;;;1527   		ret(1200);
0013de  f44f6096          MOV      r0,#0x4b0
0013e2  f7fffffe          BL       ||ret||
                  |L1.5094|
;;;1528   		}
;;;1529   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013e6  2314              MOVS     r3,#0x14
0013e8  2200              MOVS     r2,#0
0013ea  2164              MOVS     r1,#0x64
0013ec  20d2              MOVS     r0,#0xd2
0013ee  f7fffffe          BL       mess_send
                  |L1.5106|
;;;1530   	}
;;;1531   
;;;1532   if(vz1_stat==vz1sSTEP2)
0013f2  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1533   	{
;;;1534   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1535   		{
;;;1536   		vz1_stat_cnt=15;
0013f6  f04f090f          MOV      r9,#0xf
0013fa  2802              CMP      r0,#2                 ;1532
0013fc  d16c              BNE      |L1.5336|
0013fe  f8980006          LDRB     r0,[r8,#6]            ;1534  ; vz1_stat_old
001402  2802              CMP      r0,#2                 ;1534
001404  d102              BNE      |L1.5132|
001406  f8b80078          LDRH     r0,[r8,#0x78]         ;1534  ; vz1_stat_cnt
00140a  b908              CBNZ     r0,|L1.5136|
                  |L1.5132|
00140c  f8a89078          STRH     r9,[r8,#0x78]
                  |L1.5136|
;;;1537   		}
;;;1538   	vz1_stat_cnt--;
001410  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001414  e052              B        |L1.5308|
001416  0000              DCW      0x0000
                  |L1.5144|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.5148|
                          DCD      ||area_number.25||
                  |L1.5152|
                          DCD      speedChrgBlckStat
                  |L1.5156|
                          DCD      Ib_ips_termokompensat
                  |L1.5160|
                          DCD      0xffff7360
                  |L1.5164|
                          DCD      0x40024000
                  |L1.5168|
                          DCD      AVZ
                  |L1.5172|
                          DCD      YEAR_AVZ
                  |L1.5176|
                          DCD      MONTH_AVZ
                  |L1.5180|
                          DCD      DATE_AVZ
                  |L1.5184|
                          DCD      HOUR_AVZ
                  |L1.5188|
                          DCD      MIN_AVZ
                  |L1.5192|
                          DCD      SEC_AVZ
                  |L1.5196|
                          DCD      AVZ_TIME
                  |L1.5200|
                          DCD      sk_stat
                  |L1.5204|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5208|
                          DCD      0x40024020
                  |L1.5212|
00145c  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001460  c2c5cdd2
001464  c8cbdfd6
001468  c8df2121
00146c  21202020
001470  00      
001471  00                DCB      0
001472  00                DCB      0
001473  00                DCB      0
                  |L1.5236|
001474  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
001478  20cdc5c8
00147c  d1cfd0c0
001480  c2cdc020
001484  20202020
001488  00      
001489  00                DCB      0
00148a  00                DCB      0
00148b  00                DCB      0
                  |L1.5260|
00148c  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
001490  c7c0c1cb
001494  cecac8d0
001498  cec2c0cd
00149c  20      
00149d  20202000          DCB      "   ",0
0014a1  00                DCB      0
0014a2  00                DCB      0
0014a3  00                DCB      0
                  |L1.5284|
0014a4  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0014a8  c2cdc8c2
0014ac  c0ded9c8
0014b0  c920c7  
0014b3  c0d0dfc4          DCB      192,208,223,196," ",0
0014b7  2000    
0014b9  00                DCB      0
0014ba  00                DCB      0
0014bb  00                DCB      0
                  |L1.5308|
0014bc  f1a00001          SUB      r0,r0,#1
0014c0  f8a80078          STRH     r0,[r8,#0x78]
;;;1539   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014c4  f04f0314          MOV      r3,#0x14
0014c8  f04f0200          MOV      r2,#0
0014cc  f04f0164          MOV      r1,#0x64
0014d0  f04f00d2          MOV      r0,#0xd2
0014d4  f7fffffe          BL       mess_send
                  |L1.5336|
;;;1540   	}
;;;1541   
;;;1542   if(vz1_stat==vz1sSTEP3)
0014d8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1543   	{
;;;1544   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1545   		{
;;;1546   		vz1_stat_cnt=10;
0014dc  240a              MOVS     r4,#0xa
0014de  2600              MOVS     r6,#0                 ;1501
0014e0  f04f0a01          MOV      r10,#1                ;1502
;;;1547   
;;;1548   		}
;;;1549   	vz1_stat_cnt--;
;;;1550   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1551   		{
;;;1552   		show_mess(	"     ВКЛЮЧИТЕ       ",
0014e4  f2413788          MOV      r7,#0x1388
0014e8  2803              CMP      r0,#3                 ;1542
0014ea  d131              BNE      |L1.5456|
0014ec  f8980006          LDRB     r0,[r8,#6]            ;1544  ; vz1_stat_old
0014f0  2803              CMP      r0,#3                 ;1544
0014f2  d102              BNE      |L1.5370|
0014f4  f8b80078          LDRH     r0,[r8,#0x78]         ;1544  ; vz1_stat_cnt
0014f8  b908              CBNZ     r0,|L1.5374|
                  |L1.5370|
0014fa  f8a84078          STRH     r4,[r8,#0x78]         ;1546
                  |L1.5374|
0014fe  f8b80078          LDRH     r0,[r8,#0x78]         ;1549  ; vz1_stat_cnt
001502  f1a00001          SUB      r0,r0,#1              ;1549
001506  b200              SXTH     r0,r0                 ;1549
001508  f8a80078          STRH     r0,[r8,#0x78]         ;1549
00150c  280a              CMP      r0,#0xa               ;1550
00150e  d001              BEQ      |L1.5396|
001510  2809              CMP      r0,#9                 ;1550
001512  d106              BNE      |L1.5410|
                  |L1.5396|
001514  a3e7              ADR      r3,|L1.6324|
001516  a2ed              ADR      r2,|L1.6348|
001518  a1f2              ADR      r1,|L1.6372|
00151a  a0f8              ADR      r0,|L1.6396|
00151c  9700              STR      r7,[sp,#0]
00151e  f7fffffe          BL       show_mess
                  |L1.5410|
;;;1553   					"      ТУМБЛЕР       ",
;;;1554   					"     ВЫСОКОГО       ",
;;;1555   					"    НАПРЯЖЕНИЯ      ",
;;;1556   					5000);
;;;1557   		}
;;;1558   	if(sk_stat[1]==1)
001522  7868              LDRB     r0,[r5,#1]  ; sk_stat
001524  2801              CMP      r0,#1
001526  d10d              BNE      |L1.5444|
;;;1559   		{
;;;1560   		vz1_stat=vz1sWRK;
001528  f8884005          STRB     r4,[r8,#5]
;;;1561   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00152c  210a              MOVS     r1,#0xa
00152e  4658              MOV      r0,r11
001530  f7fffffe          BL       lc640_write
;;;1562   		volt_region=1;
001534  f888a02e          STRB     r10,[r8,#0x2e]
;;;1563   		cntrl_stat=0;
001538  f8a86030          STRH     r6,[r8,#0x30]
;;;1564   		cntrl_stat_new=0;
00153c  f8a86046          STRH     r6,[r8,#0x46]
;;;1565   		cntrl_stat_old=0;
001540  f8a86032          STRH     r6,[r8,#0x32]
                  |L1.5444|
;;;1566   		}
;;;1567   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001544  2314              MOVS     r3,#0x14
001546  2200              MOVS     r2,#0
001548  2164              MOVS     r1,#0x64
00154a  20d2              MOVS     r0,#0xd2
00154c  f7fffffe          BL       mess_send
                  |L1.5456|
;;;1568   	}
;;;1569   
;;;1570   if(vz1_stat==vz1sWRK)
001550  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001554  280a              CMP      r0,#0xa
001556  d17d              BNE      |L1.5716|
;;;1571   	{
;;;1572   	if(vz1_stat_old!=vz1_stat)
001558  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
;;;1573   		{
;;;1574   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00155c  49ed              LDR      r1,|L1.6420|
00155e  280a              CMP      r0,#0xa               ;1572
001560  d008              BEQ      |L1.5492|
001562  48ed              LDR      r0,|L1.6424|
001564  f44f6261          MOV      r2,#0xe10
001568  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00156c  fb00f002          MUL      r0,r0,r2
001570  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1575   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1576   		vz1_up_cnt=0L;
001572  640e              STR      r6,[r1,#0x40]  ; vz1_up_cnt
                  |L1.5492|
;;;1577   
;;;1578   		}
;;;1579   	vz1_wrk_cnt--;
001574  6bc8              LDR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
001576  f1a00001          SUB      r0,r0,#1
00157a  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1580   	vz1_up_cnt++;
00157c  6c0a              LDR      r2,[r1,#0x40]  ; vz1_up_cnt
00157e  f1020201          ADD      r2,r2,#1
001582  640a              STR      r2,[r1,#0x40]  ; vz1_up_cnt
;;;1581   
;;;1582   	if(vz1_wrk_cnt==0)
001584  b940              CBNZ     r0,|L1.5528|
;;;1583   		{
;;;1584   		vz1_stat=vz1sFINE;
001586  f8889005          STRB     r9,[r8,#5]
;;;1585   		lc640_write(EE_VZ1_STAT,vz1sFINE);
00158a  210f              MOVS     r1,#0xf
00158c  4658              MOV      r0,r11
00158e  f7fffffe          BL       lc640_write
;;;1586   		uz_mem_hndl(0);
001592  2000              MOVS     r0,#0
001594  f7fffffe          BL       uz_mem_hndl
                  |L1.5528|
;;;1587   		}
;;;1588   	if(sk_stat[0]==0)
001598  7828              LDRB     r0,[r5,#0]  ; sk_stat
00159a  b938              CBNZ     r0,|L1.5548|
;;;1589   		{
;;;1590   		vz1_stat=vz1sERR2;
00159c  f04f000c          MOV      r0,#0xc
0015a0  f8880005          STRB     r0,[r8,#5]
;;;1591   		lc640_write(EE_VZ1_STAT,vz1sERR2);
0015a4  4601              MOV      r1,r0
0015a6  4658              MOV      r0,r11
0015a8  f7fffffe          BL       lc640_write
                  |L1.5548|
;;;1592   		}
;;;1593   	if(sk_stat[1]==0)
0015ac  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015ae  b938              CBNZ     r0,|L1.5568|
;;;1594   		{
;;;1595   		vz1_stat=vz1sERR3;
0015b0  f04f000d          MOV      r0,#0xd
0015b4  f8880005          STRB     r0,[r8,#5]
;;;1596   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0015b8  4601              MOV      r1,r0
0015ba  4658              MOV      r0,r11
0015bc  f7fffffe          BL       lc640_write
                  |L1.5568|
;;;1597   		}
;;;1598   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0015c0  f9b80048          LDRSH    r0,[r8,#0x48]  ; Ibmax
0015c4  f8b8104a          LDRH     r1,[r8,#0x4a]  ; IZMAX_
0015c8  fb90f0f4          SDIV     r0,r0,r4
;;;1599   		{
;;;1600   		volt_region=0;
;;;1601   		cntrl_stat=1000;
0015cc  f44f727a          MOV      r2,#0x3e8
0015d0  4288              CMP      r0,r1                 ;1598
0015d2  dd16              BLE      |L1.5634|
0015d4  f9b83030          LDRSH    r3,[r8,#0x30]         ;1598  ; cntrl_stat
0015d8  2b14              CMP      r3,#0x14              ;1598
0015da  dc12              BGT      |L1.5634|
0015dc  f898302e          LDRB     r3,[r8,#0x2e]         ;1598  ; volt_region
0015e0  2b01              CMP      r3,#1                 ;1598
0015e2  d10e              BNE      |L1.5634|
0015e4  f8b8307a          LDRH     r3,[r8,#0x7a]         ;1598  ; volt_region_cnt
0015e8  b95b              CBNZ     r3,|L1.5634|
0015ea  f888602e          STRB     r6,[r8,#0x2e]         ;1600
0015ee  f8a82030          STRH     r2,[r8,#0x30]
;;;1602   		cntrl_stat_new=1000;
0015f2  f8a82046          STRH     r2,[r8,#0x46]
;;;1603   		cntrl_stat_old=1000;
0015f6  f8a82032          STRH     r2,[r8,#0x32]
;;;1604   		volt_region_cnt=110;
0015fa  f04f036e          MOV      r3,#0x6e
0015fe  f8a8307a          STRH     r3,[r8,#0x7a]
                  |L1.5634|
;;;1605   		}
;;;1606   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001602  4288              CMP      r0,r1
001604  da13              BGE      |L1.5678|
001606  f9b80030          LDRSH    r0,[r8,#0x30]  ; cntrl_stat
00160a  4290              CMP      r0,r2
00160c  db0f              BLT      |L1.5678|
00160e  f898002e          LDRB     r0,[r8,#0x2e]  ; volt_region
001612  b960              CBNZ     r0,|L1.5678|
001614  f8b8007a          LDRH     r0,[r8,#0x7a]  ; volt_region_cnt
001618  b948              CBNZ     r0,|L1.5678|
;;;1607   		{
;;;1608   		volt_region=1;
00161a  f888a02e          STRB     r10,[r8,#0x2e]
;;;1609   		cntrl_stat=10;
00161e  f8a84030          STRH     r4,[r8,#0x30]
;;;1610   		cntrl_stat_new=10;
001622  f8a84046          STRH     r4,[r8,#0x46]
;;;1611   		cntrl_stat_old=10;
001626  f8a84032          STRH     r4,[r8,#0x32]
;;;1612   		volt_region_cnt=10;
00162a  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5678|
;;;1613   		}
;;;1614   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00162e  f898002e          LDRB     r0,[r8,#0x2e]  ; volt_region
001632  b110              CBZ      r0,|L1.5690|
;;;1615   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001634  2801              CMP      r0,#1
001636  d007              BEQ      |L1.5704|
001638  e00c              B        |L1.5716|
                  |L1.5690|
00163a  2314              MOVS     r3,#0x14              ;1614
00163c  2200              MOVS     r2,#0                 ;1614
00163e  2164              MOVS     r1,#0x64              ;1614
001640  20d2              MOVS     r0,#0xd2              ;1614
001642  f7fffffe          BL       mess_send
001646  e005              B        |L1.5716|
                  |L1.5704|
001648  2314              MOVS     r3,#0x14
00164a  2201              MOVS     r2,#1
00164c  2164              MOVS     r1,#0x64
00164e  20d2              MOVS     r0,#0xd2
001650  f7fffffe          BL       mess_send
                  |L1.5716|
;;;1616   	}
;;;1617   
;;;1618   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001654  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001658  280b              CMP      r0,#0xb
00165a  d120              BNE      |L1.5790|
;;;1619   	{
;;;1620   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00165c  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001660  280b              CMP      r0,#0xb
001662  d102              BNE      |L1.5738|
001664  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001668  b908              CBNZ     r0,|L1.5742|
                  |L1.5738|
;;;1621   		{
;;;1622   		vz1_stat_cnt=10;
00166a  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.5742|
;;;1623   		}
;;;1624   	vz1_stat_cnt--;
00166e  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001672  f1a00001          SUB      r0,r0,#1
001676  b200              SXTH     r0,r0
001678  f8a80078          STRH     r0,[r8,#0x78]
;;;1625   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00167c  280a              CMP      r0,#0xa
00167e  d001              BEQ      |L1.5764|
001680  2809              CMP      r0,#9
001682  d106              BNE      |L1.5778|
                  |L1.5764|
;;;1626   		{
;;;1627   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001684  a3a5              ADR      r3,|L1.6428|
001686  a2ab              ADR      r2,|L1.6452|
001688  a1b0              ADR      r1,|L1.6476|
00168a  a0b6              ADR      r0,|L1.6500|
00168c  9700              STR      r7,[sp,#0]
00168e  f7fffffe          BL       show_mess
                  |L1.5778|
;;;1628   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1629   					"      ВКЛЮЧЕН       ",
;;;1630   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1631   					5000);
;;;1632   		}
;;;1633   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001692  2314              MOVS     r3,#0x14
001694  2200              MOVS     r2,#0
001696  2164              MOVS     r1,#0x64
001698  20d2              MOVS     r0,#0xd2
00169a  f7fffffe          BL       mess_send
                  |L1.5790|
;;;1634   	}
;;;1635   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00169e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0016a2  280c              CMP      r0,#0xc
0016a4  d12c              BNE      |L1.5888|
;;;1636   	{
;;;1637   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0016a6  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0016aa  280c              CMP      r0,#0xc
0016ac  d102              BNE      |L1.5812|
0016ae  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
0016b2  b908              CBNZ     r0,|L1.5816|
                  |L1.5812|
;;;1638   		{
;;;1639   		vz1_stat_cnt=10;
0016b4  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.5816|
;;;1640   		}
;;;1641   	vz1_stat_cnt--;
0016b8  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
0016bc  f1a00001          SUB      r0,r0,#1
0016c0  b200              SXTH     r0,r0
0016c2  f8a80078          STRH     r0,[r8,#0x78]
;;;1642   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0016c6  280a              CMP      r0,#0xa
0016c8  d001              BEQ      |L1.5838|
0016ca  2809              CMP      r0,#9
0016cc  d109              BNE      |L1.5858|
                  |L1.5838|
;;;1643   		{
;;;1644   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0016ce  f2af2374          ADR      r3,|L1.5212|
0016d2  f2af2260          ADR      r2,|L1.5236|
0016d6  f2af214c          ADR      r1,|L1.5260|
0016da  a0a2              ADR      r0,|L1.6500|
0016dc  9700              STR      r7,[sp,#0]
0016de  f7fffffe          BL       show_mess
                  |L1.5858|
;;;1645   					"    ЗАБЛОКИРОВАН    ",
;;;1646   					"     НЕИСПРАВНА     ",
;;;1647   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1648   					5000);
;;;1649   		}
;;;1650   	if(sk_stat[0]==1)
0016e2  7828              LDRB     r0,[r5,#0]  ; sk_stat
0016e4  2801              CMP      r0,#1
0016e6  d105              BNE      |L1.5876|
;;;1651   		{
;;;1652   		vz1_stat=vz1sWRK;
0016e8  f8884005          STRB     r4,[r8,#5]
;;;1653   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0016ec  210a              MOVS     r1,#0xa
0016ee  4658              MOV      r0,r11
0016f0  f7fffffe          BL       lc640_write
                  |L1.5876|
;;;1654   		}
;;;1655   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0016f4  2314              MOVS     r3,#0x14
0016f6  2200              MOVS     r2,#0
0016f8  2164              MOVS     r1,#0x64
0016fa  20d2              MOVS     r0,#0xd2
0016fc  f7fffffe          BL       mess_send
                  |L1.5888|
;;;1656   	}
;;;1657   
;;;1658   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
001700  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001704  280d              CMP      r0,#0xd
001706  d129              BNE      |L1.5980|
;;;1659   	{
;;;1660   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001708  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00170c  280d              CMP      r0,#0xd
00170e  d102              BNE      |L1.5910|
001710  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001714  b908              CBNZ     r0,|L1.5914|
                  |L1.5910|
;;;1661   		{
;;;1662   		vz1_stat_cnt=10;
001716  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.5914|
;;;1663   		}
;;;1664   	vz1_stat_cnt--;
00171a  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
00171e  f1a00001          SUB      r0,r0,#1
001722  b200              SXTH     r0,r0
001724  f8a80078          STRH     r0,[r8,#0x78]
;;;1665   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001728  280a              CMP      r0,#0xa
00172a  d001              BEQ      |L1.5936|
00172c  2809              CMP      r0,#9
00172e  d106              BNE      |L1.5950|
                  |L1.5936|
;;;1666   		{
;;;1667   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001730  a392              ADR      r3,|L1.6524|
001732  a298              ADR      r2,|L1.6548|
001734  a19d              ADR      r1,|L1.6572|
001736  a08b              ADR      r0,|L1.6500|
001738  9700              STR      r7,[sp,#0]
00173a  f7fffffe          BL       show_mess
                  |L1.5950|
;;;1668   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1669   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1670   					"*   ТУМБЛЕРА!!!     ",
;;;1671   					5000);
;;;1672   		}
;;;1673   	if(sk_stat[1]==1)
00173e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001740  2801              CMP      r0,#1
001742  d105              BNE      |L1.5968|
;;;1674   		{
;;;1675   		vz1_stat=vz1sWRK;
001744  f8884005          STRB     r4,[r8,#5]
;;;1676   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001748  210a              MOVS     r1,#0xa
00174a  4658              MOV      r0,r11
00174c  f7fffffe          BL       lc640_write
                  |L1.5968|
;;;1677   		}
;;;1678   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001750  2314              MOVS     r3,#0x14
001752  2200              MOVS     r2,#0
001754  2164              MOVS     r1,#0x64
001756  20d2              MOVS     r0,#0xd2
001758  f7fffffe          BL       mess_send
                  |L1.5980|
;;;1679   	}
;;;1680   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
00175c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001760  280e              CMP      r0,#0xe
001762  d12a              BNE      |L1.6074|
;;;1681   	{
;;;1682   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001764  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001768  280e              CMP      r0,#0xe
00176a  d102              BNE      |L1.6002|
00176c  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001770  b908              CBNZ     r0,|L1.6006|
                  |L1.6002|
;;;1683   		{
;;;1684   		vz1_stat_cnt=10;
001772  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6006|
;;;1685   		}
;;;1686   	vz1_stat_cnt--;
001776  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
00177a  f1a00001          SUB      r0,r0,#1
00177e  b200              SXTH     r0,r0
001780  f8a80078          STRH     r0,[r8,#0x78]
;;;1687   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001784  280a              CMP      r0,#0xa
001786  d001              BEQ      |L1.6028|
001788  2809              CMP      r0,#9
00178a  d106              BNE      |L1.6042|
                  |L1.6028|
;;;1688   		{
;;;1689   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
00178c  a349              ADR      r3,|L1.6324|
00178e  a24f              ADR      r2,|L1.6348|
001790  a154              ADR      r1,|L1.6372|
001792  a08c              ADR      r0,|L1.6596|
001794  9700              STR      r7,[sp,#0]
001796  f7fffffe          BL       show_mess
                  |L1.6042|
;;;1690   					"      ТУМБЛЕР       ",
;;;1691   					"     ВЫСОКОГО       ",
;;;1692   					"    НАПРЯЖЕНИЯ      ",
;;;1693   					5000);
;;;1694   		}
;;;1695   	if(sk_stat[1]==0)
00179a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179c  b938              CBNZ     r0,|L1.6062|
;;;1696   		{
;;;1697   		vz1_stat=vz1sOFF;
00179e  f8886005          STRB     r6,[r8,#5]
;;;1698   		lc640_write(EE_VZ1_STAT,vz1sOFF);
0017a2  2100              MOVS     r1,#0
0017a4  4658              MOV      r0,r11
0017a6  f7fffffe          BL       lc640_write
;;;1699   		vz_stop();
0017aa  f7fffffe          BL       vz_stop
                  |L1.6062|
;;;1700   
;;;1701   		}
;;;1702   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0017ae  2314              MOVS     r3,#0x14
0017b0  2201              MOVS     r2,#1
0017b2  2164              MOVS     r1,#0x64
0017b4  20d2              MOVS     r0,#0xd2
0017b6  f7fffffe          BL       mess_send
                  |L1.6074|
;;;1703   	}
;;;1704   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0017ba  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1705   	{
;;;1706   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1707   		{
;;;1708   		vz1_stat_cnt=10;
;;;1709   		}
;;;1710   	vz1_stat_cnt--;
;;;1711   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1712   		{
;;;1713   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0017be  f64037b8          MOV      r7,#0xbb8
0017c2  280f              CMP      r0,#0xf               ;1704
0017c4  d135              BNE      |L1.6194|
0017c6  f8980006          LDRB     r0,[r8,#6]            ;1706  ; vz1_stat_old
0017ca  280f              CMP      r0,#0xf               ;1706
0017cc  d102              BNE      |L1.6100|
0017ce  f8b80078          LDRH     r0,[r8,#0x78]         ;1706  ; vz1_stat_cnt
0017d2  b908              CBNZ     r0,|L1.6104|
                  |L1.6100|
0017d4  f8a84078          STRH     r4,[r8,#0x78]         ;1708
                  |L1.6104|
0017d8  f8b80078          LDRH     r0,[r8,#0x78]         ;1710  ; vz1_stat_cnt
0017dc  f1a00001          SUB      r0,r0,#1              ;1710
0017e0  b200              SXTH     r0,r0                 ;1710
0017e2  f8a80078          STRH     r0,[r8,#0x78]         ;1710
0017e6  280a              CMP      r0,#0xa               ;1711
0017e8  d001              BEQ      |L1.6126|
0017ea  2809              CMP      r0,#9                 ;1711
0017ec  d106              BNE      |L1.6140|
                  |L1.6126|
0017ee  a37b              ADR      r3,|L1.6620|
0017f0  a280              ADR      r2,|L1.6644|
0017f2  a186              ADR      r1,|L1.6668|
0017f4  a08b              ADR      r0,|L1.6692|
0017f6  9700              STR      r7,[sp,#0]
0017f8  f7fffffe          BL       show_mess
                  |L1.6140|
;;;1714   					"       ЗАРЯД        ",
;;;1715   					"      УСПЕШНО       ",
;;;1716   					"     ЗАВЕРШЕН       ",
;;;1717   					3000);
;;;1718   		}
;;;1719   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0017fc  f9b80078          LDRSH    r0,[r8,#0x78]  ; vz1_stat_cnt
001800  2806              CMP      r0,#6
001802  d001              BEQ      |L1.6152|
001804  2805              CMP      r0,#5
001806  d106              BNE      |L1.6166|
                  |L1.6152|
;;;1720   		{
;;;1721   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001808  a32a              ADR      r3,|L1.6324|
00180a  a230              ADR      r2,|L1.6348|
00180c  a135              ADR      r1,|L1.6372|
00180e  a08b              ADR      r0,|L1.6716|
001810  9700              STR      r7,[sp,#0]
001812  f7fffffe          BL       show_mess
                  |L1.6166|
;;;1722   					"      ТУМБЛЕР       ",
;;;1723   					"     ВЫСОКОГО       ",
;;;1724   					"    НАПРЯЖЕНИЯ      ",
;;;1725   					3000);
;;;1726   		}
;;;1727   	if(sk_stat[1]==0)
001816  7868              LDRB     r0,[r5,#1]  ; sk_stat
001818  b928              CBNZ     r0,|L1.6182|
;;;1728   		{
;;;1729   		vz1_stat=vz1sOFF;
00181a  f8886005          STRB     r6,[r8,#5]
;;;1730   		lc640_write(EE_VZ1_STAT,vz1sOFF);
00181e  2100              MOVS     r1,#0
001820  4658              MOV      r0,r11
001822  f7fffffe          BL       lc640_write
                  |L1.6182|
;;;1731   		}
;;;1732   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001826  2314              MOVS     r3,#0x14
001828  2200              MOVS     r2,#0
00182a  2164              MOVS     r1,#0x64
00182c  20d2              MOVS     r0,#0xd2
00182e  f7fffffe          BL       mess_send
                  |L1.6194|
;;;1733   	}
;;;1734   
;;;1735   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001832  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001836  2810              CMP      r0,#0x10
001838  d135              BNE      |L1.6310|
;;;1736   	{
;;;1737   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00183a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00183e  2810              CMP      r0,#0x10
001840  d102              BNE      |L1.6216|
001842  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001846  b908              CBNZ     r0,|L1.6220|
                  |L1.6216|
;;;1738   		{
;;;1739   		vz1_stat_cnt=10;
001848  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6220|
;;;1740   		}
;;;1741   	vz1_stat_cnt--;
00184c  f8b80078          LDRH     r0,[r8,#0x78]  ; vz1_stat_cnt
001850  f1a00001          SUB      r0,r0,#1
001854  b200              SXTH     r0,r0
001856  f8a80078          STRH     r0,[r8,#0x78]
;;;1742   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00185a  280a              CMP      r0,#0xa
00185c  d001              BEQ      |L1.6242|
00185e  2809              CMP      r0,#9
001860  d106              BNE      |L1.6256|
                  |L1.6242|
;;;1743   		{
;;;1744   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001862  a37c              ADR      r3,|L1.6740|
001864  a281              ADR      r2,|L1.6764|
001866  a169              ADR      r1,|L1.6668|
001868  a06e              ADR      r0,|L1.6692|
00186a  9700              STR      r7,[sp,#0]
00186c  f7fffffe          BL       show_mess
                  |L1.6256|
;;;1745   					"       ЗАРЯД        ",
;;;1746   					"     ПРЕКРАЩЕН      ",
;;;1747   					"                    ",
;;;1748   					3000);
;;;1749   		}
;;;1750   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001870  f9b80078          LDRSH    r0,[r8,#0x78]  ; vz1_stat_cnt
001874  2806              CMP      r0,#6
001876  d001              BEQ      |L1.6268|
001878  2805              CMP      r0,#5
00187a  d106              BNE      |L1.6282|
                  |L1.6268|
;;;1751   		{
;;;1752   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00187c  a30d              ADR      r3,|L1.6324|
00187e  a213              ADR      r2,|L1.6348|
001880  a118              ADR      r1,|L1.6372|
001882  a06e              ADR      r0,|L1.6716|
001884  9700              STR      r7,[sp,#0]
001886  f7fffffe          BL       show_mess
                  |L1.6282|
;;;1753   					"      ТУМБЛЕР       ",
;;;1754   					"     ВЫСОКОГО       ",
;;;1755   					"    НАПРЯЖЕНИЯ      ",
;;;1756   					3000);
;;;1757   		}
;;;1758   	if(sk_stat[1]==0)
00188a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00188c  b928              CBNZ     r0,|L1.6298|
;;;1759   		{
;;;1760   		vz1_stat=vz1sOFF;
00188e  f8886005          STRB     r6,[r8,#5]
;;;1761   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001892  2100              MOVS     r1,#0
001894  4658              MOV      r0,r11
001896  f7fffffe          BL       lc640_write
                  |L1.6298|
;;;1762   		}
;;;1763   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00189a  2314              MOVS     r3,#0x14
00189c  2200              MOVS     r2,#0
00189e  2164              MOVS     r1,#0x64
0018a0  20d2              MOVS     r0,#0xd2
0018a2  f7fffffe          BL       mess_send
                  |L1.6310|
;;;1764   	}
;;;1765   
;;;1766   vz1_stat_old=vz1_stat;
0018a6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018aa  f8880006          STRB     r0,[r8,#6]
;;;1767   
;;;1768   
;;;1769   
;;;1770   }
0018ae  e8bd8ff8          POP      {r3-r11,pc}
0018b2  0000              DCW      0x0000
                  |L1.6324|
0018b4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0018b8  cdc0cfd0
0018bc  dfc6c5cd
0018c0  c8df2020
0018c4  20202020
0018c8  00      
0018c9  00                DCB      0
0018ca  00                DCB      0
0018cb  00                DCB      0
                  |L1.6348|
0018cc  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
0018d0  20c2dbd1
0018d4  cecacec3
0018d8  ce202020
0018dc  20202020
0018e0  00      
0018e1  00                DCB      0
0018e2  00                DCB      0
0018e3  00                DCB      0
                  |L1.6372|
0018e4  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
0018e8  2020d2d3
0018ec  ccc1cbc5
0018f0  d0202020
0018f4  20202020
0018f8  00      
0018f9  00                DCB      0
0018fa  00                DCB      0
0018fb  00                DCB      0
                  |L1.6396|
0018fc  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001900  20c2cacb
001904  ded7c8d2
001908  c5202020
00190c  20202020
001910  00      
001911  00                DCB      0
001912  00                DCB      0
001913  00                DCB      0
                  |L1.6420|
                          DCD      ||area_number.25||+0x80
                  |L1.6424|
                          DCD      UZ_T
                  |L1.6428|
00191c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001920  c720c2c5
001924  cdd2c8cb
001928  dfd6c8  
00192b  c8212120          DCB      200,"!!  ",0
00192f  2000    
001931  00                DCB      0
001932  00                DCB      0
001933  00                DCB      0
                  |L1.6452|
001934  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001938  2020c2ca
00193c  cbded7c5
001940  cd202020
001944  20202020
001948  00      
001949  00                DCB      0
00194a  00                DCB      0
00194b  00                DCB      0
                  |L1.6476|
00194c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001950  c520ccce
001954  c6c5d220
001958  c1dbd2dc
00195c  20202020          DCB      "    ",0
001960  00      
001961  00                DCB      0
001962  00                DCB      0
001963  00                DCB      0
                  |L1.6500|
001964  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001968  cdc8d2c5
00196c  cbdccddb
001970  c920c7  
001973  c0d0dfc4          DCB      192,208,223,196," ",0
001977  2000    
001979  00                DCB      0
00197a  00                DCB      0
00197b  00                DCB      0
                  |L1.6524|
00197c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001980  d2d3ccc1
001984  cbc5d0c0
001988  21212120
00198c  20202020
001990  00      
001991  00                DCB      0
001992  00                DCB      0
001993  00                DCB      0
                  |L1.6548|
001994  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001998  d1cbc520
00199c  c2cacbde
0019a0  d7c5cd  
0019a3  c8df2020          DCB      200,223,"   ",0
0019a7  2000    
0019a9  00                DCB      0
0019aa  00                DCB      0
0019ab  00                DCB      0
                  |L1.6572|
0019ac  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
0019b0  c4c5d220
0019b4  cfd0cec4
0019b8  cecbc6  
0019bb  c5cd2020          DCB      197,205,"   ",0
0019bf  2000    
0019c1  00                DCB      0
0019c2  00                DCB      0
0019c3  00                DCB      0
                  |L1.6596|
0019c4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
0019c8  20c2dbca
0019cc  cbded7c8
0019d0  d2c52020
0019d4  20202020
0019d8  00      
0019d9  00                DCB      0
0019da  00                DCB      0
0019db  00                DCB      0
                  |L1.6620|
0019dc  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
0019e0  20c7c0c2
0019e4  c5d0d8c5
0019e8  cd202020
0019ec  20202020
0019f0  00      
0019f1  00                DCB      0
0019f2  00                DCB      0
0019f3  00                DCB      0
                  |L1.6644|
0019f4  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
0019f8  2020d3d1
0019fc  cfc5d8cd
001a00  ce202020
001a04  20202020
001a08  00      
001a09  00                DCB      0
001a0a  00                DCB      0
001a0b  00                DCB      0
                  |L1.6668|
001a0c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001a10  202020c7
001a14  c0d0dfc4
001a18  20202020
001a1c  20202020
001a20  00      
001a21  00                DCB      0
001a22  00                DCB      0
001a23  00                DCB      0
                  |L1.6692|
001a24  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001a28  d0c0c2cd
001a2c  c8d2c5cb
001a30  dccddbc9
001a34  20202020          DCB      "    ",0
001a38  00      
001a39  00                DCB      0
001a3a  00                DCB      0
001a3b  00                DCB      0
                  |L1.6716|
001a3c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001a40  20c2dbca
001a44  cbded7c8
001a48  d2c52020
001a4c  20202020
001a50  00      
001a51  00                DCB      0
001a52  00                DCB      0
001a53  00                DCB      0
                  |L1.6740|
001a54  20202020          DCB      "                    ",0
001a58  20202020
001a5c  20202020
001a60  20202020
001a64  20202020
001a68  00      
001a69  00                DCB      0
001a6a  00                DCB      0
001a6b  00                DCB      0
                  |L1.6764|
001a6c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001a70  20cfd0c5
001a74  cad0c0d9
001a78  c5cd2020
001a7c  20202020
001a80  00      
001a81  00                DCB      0
001a82  00                DCB      0
001a83  00                DCB      0
                          ENDP

                  vz1_start PROC
;;;1773   //старт уравнительног заряда
;;;1774   char vz1_start(char hour)
001a84  b510              PUSH     {r4,lr}
;;;1775   {          
;;;1776   char out;
;;;1777   out=0;
001a86  f04f0000          MOV      r0,#0
;;;1778   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001a8a  49f8              LDR      r1,|L1.7788|
001a8c  f8912022          LDRB     r2,[r1,#0x22]  ; spc_stat
001a90  2a00              CMP      r2,#0
001a92  d110              BNE      |L1.6838|
001a94  4af6              LDR      r2,|L1.7792|
001a96  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001a98  2a01              CMP      r2,#1
001a9a  d00c              BEQ      |L1.6838|
001a9c  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001a9e  2a00              CMP      r2,#0
001aa0  d109              BNE      |L1.6838|
;;;1779   	{
;;;1780   	if(vz1_stat==vz1sOFF)
;;;1781   		{
;;;1782   		vz1_stat=vz1sSTEP1;
001aa2  f04f0001          MOV      r0,#1
001aa6  7148              STRB     r0,[r1,#5]
;;;1783   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001aa8  4601              MOV      r1,r0
001aaa  f44f70c9          MOV      r0,#0x192
001aae  f7fffffe          BL       lc640_write
;;;1784   		out=1;
001ab2  f04f0001          MOV      r0,#1
                  |L1.6838|
;;;1785   		
;;;1786   		}
;;;1787   /*	spc_stat=spcVZ;
;;;1788   	__ee_spc_stat=spcVZ; 
;;;1789   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1790   	vz_cnt_h=hour;
;;;1791   	__ee_vz_cnt=hour*60;
;;;1792   	if(hour==0)__ee_vz_cnt=30;
;;;1793   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1794   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1795   	vz_cnt_h_=0;
;;;1796   	vz_cnt_s=0;
;;;1797   	vz_cnt_s_=0;
;;;1798   	
;;;1799   		*/
;;;1800   	}
;;;1801   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1802   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1803   //plazma=out;	
;;;1804   return out;
;;;1805   }
001ab6  bd10              POP      {r4,pc}
;;;1806   
                          ENDP

                  vz1_stop PROC
;;;1808   //стоп уравнительног заряда
;;;1809   void vz1_stop(void)
001ab8  48ec              LDR      r0,|L1.7788|
;;;1810   {
;;;1811   if(vz1_stat!=vz1sOFF)
001aba  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001abc  2900              CMP      r1,#0
001abe  d006              BEQ      |L1.6862|
;;;1812   	{
;;;1813   	vz1_stat=vz1sSTOP;
001ac0  f04f0110          MOV      r1,#0x10
001ac4  7141              STRB     r1,[r0,#5]
;;;1814   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001ac6  f44f70c9          MOV      r0,#0x192
001aca  f7ffbffe          B.W      lc640_write
                  |L1.6862|
;;;1815   	}
;;;1816   }
001ace  4770              BX       lr
;;;1817   
                          ENDP

                  vz2_drv PROC
;;;1819   //драйвер формовочного заряда
;;;1820   void vz2_drv(void)
001ad0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1821   {
;;;1822   
;;;1823   if(vz2_stat==vz2sSTEP1)
001ad4  4ee5              LDR      r6,|L1.7788|
;;;1824   	{
;;;1825   	if(vz2_stat_old!=vz2_stat)
;;;1826   		{
;;;1827   		vz2_stat_cnt=5;
;;;1828   		}
;;;1829   	if(vz2_stat_cnt)
;;;1830   		{
;;;1831   		vz2_stat_cnt--;
;;;1832   		if(vz2_stat_cnt==0)
;;;1833   			{
;;;1834   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1835   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1836   			}
;;;1837   		}
;;;1838   	if(sk_stat[0]==1)
001ad6  4de7              LDR      r5,|L1.7796|
001ad8  79f0              LDRB     r0,[r6,#7]            ;1823  ; vz2_stat
001ada  2801              CMP      r0,#1                 ;1823
001adc  d138              BNE      |L1.6992|
001ade  7a30              LDRB     r0,[r6,#8]            ;1825  ; vz2_stat_old
001ae0  2801              CMP      r0,#1                 ;1825
001ae2  d003              BEQ      |L1.6892|
001ae4  f04f0005          MOV      r0,#5                 ;1827
001ae8  f8a6007c          STRH     r0,[r6,#0x7c]         ;1827
                  |L1.6892|
001aec  f9b6007c          LDRSH    r0,[r6,#0x7c]         ;1829  ; vz2_stat_cnt
001af0  b168              CBZ      r0,|L1.6926|
001af2  f1a00001          SUB      r0,r0,#1              ;1831
001af6  b200              SXTH     r0,r0                 ;1831
001af8  f8a6007c          STRH     r0,[r6,#0x7c]         ;1831
001afc  b938              CBNZ     r0,|L1.6926|
001afe  f04f000c          MOV      r0,#0xc               ;1834
001b02  71f0              STRB     r0,[r6,#7]            ;1834
001b04  4601              MOV      r1,r0                 ;1835
001b06  f44f70ca          MOV      r0,#0x194             ;1835
001b0a  f7fffffe          BL       lc640_write
                  |L1.6926|
001b0e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b10  2801              CMP      r0,#1
001b12  d117              BNE      |L1.6980|
;;;1839   		{
;;;1840   		vz2_stat=vz2sSTEP2;
001b14  f04f0002          MOV      r0,#2
001b18  71f0              STRB     r0,[r6,#7]
;;;1841   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b1a  4601              MOV      r1,r0
001b1c  f44f70ca          MOV      r0,#0x194
001b20  f7fffffe          BL       lc640_write
;;;1842   		tree_up(iVZ2_STEP2_2,1,0,0);
001b24  2300              MOVS     r3,#0
001b26  461a              MOV      r2,r3
001b28  2101              MOVS     r1,#1
001b2a  20e0              MOVS     r0,#0xe0
001b2c  f7fffffe          BL       tree_up
;;;1843   		tree_up(iVZ2_STEP2_1,0,0,0);
001b30  2300              MOVS     r3,#0
001b32  461a              MOV      r2,r3
001b34  4619              MOV      r1,r3
001b36  20df              MOVS     r0,#0xdf
001b38  f7fffffe          BL       tree_up
;;;1844   		ret(1200);
001b3c  f44f6096          MOV      r0,#0x4b0
001b40  f7fffffe          BL       ||ret||
                  |L1.6980|
;;;1845   		}
;;;1846   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b44  2314              MOVS     r3,#0x14
001b46  2200              MOVS     r2,#0
001b48  2164              MOVS     r1,#0x64
001b4a  20d2              MOVS     r0,#0xd2
001b4c  f7fffffe          BL       mess_send
                  |L1.6992|
;;;1847   	}
;;;1848   
;;;1849   if(vz2_stat==vz2sSTEP2)
001b50  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001b52  2802              CMP      r0,#2
001b54  d119              BNE      |L1.7050|
;;;1850   	{
;;;1851   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b56  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001b58  2802              CMP      r0,#2
001b5a  d102              BNE      |L1.7010|
001b5c  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001b60  b918              CBNZ     r0,|L1.7018|
                  |L1.7010|
;;;1852   		{
;;;1853   		vz2_stat_cnt=15;
001b62  f04f000f          MOV      r0,#0xf
001b66  f8a6007c          STRH     r0,[r6,#0x7c]
                  |L1.7018|
;;;1854   		}
;;;1855   	vz2_stat_cnt--;
001b6a  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001b6e  f1a00001          SUB      r0,r0,#1
001b72  f8a6007c          STRH     r0,[r6,#0x7c]
;;;1856   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b76  f04f0314          MOV      r3,#0x14
001b7a  f04f0200          MOV      r2,#0
001b7e  f04f0164          MOV      r1,#0x64
001b82  f04f00d2          MOV      r0,#0xd2
001b86  f7fffffe          BL       mess_send
                  |L1.7050|
;;;1857   	}
;;;1858   
;;;1859   if(vz2_stat==vz2sSTEP3)
001b8a  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1860   	{
;;;1861   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1862   		{
;;;1863   		vz2_stat_cnt=10;
001b8c  240a              MOVS     r4,#0xa
001b8e  2700              MOVS     r7,#0
;;;1864   		cntrl_stat=0;
;;;1865   		cntrl_stat_new=0;
;;;1866   		cntrl_stat_old=0;
;;;1867   		}
;;;1868   	vz2_stat_cnt--;
;;;1869   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1870   		{
;;;1871   		show_mess(	"     ВКЛЮЧИТЕ       ",
001b90  f2413888          MOV      r8,#0x1388
001b94  2803              CMP      r0,#3                 ;1859
001b96  d139              BNE      |L1.7180|
001b98  7a30              LDRB     r0,[r6,#8]            ;1861  ; vz2_stat_old
001b9a  2803              CMP      r0,#3                 ;1861
001b9c  d102              BNE      |L1.7076|
001b9e  f8b6007c          LDRH     r0,[r6,#0x7c]         ;1861  ; vz2_stat_cnt
001ba2  b928              CBNZ     r0,|L1.7088|
                  |L1.7076|
001ba4  f8a6407c          STRH     r4,[r6,#0x7c]         ;1863
001ba8  8637              STRH     r7,[r6,#0x30]         ;1864
001baa  f8a67046          STRH     r7,[r6,#0x46]         ;1865
001bae  8677              STRH     r7,[r6,#0x32]         ;1866
                  |L1.7088|
001bb0  f8b6007c          LDRH     r0,[r6,#0x7c]         ;1868  ; vz2_stat_cnt
001bb4  f1a00001          SUB      r0,r0,#1              ;1868
001bb8  b200              SXTH     r0,r0                 ;1868
001bba  f8a6007c          STRH     r0,[r6,#0x7c]         ;1868
001bbe  280a              CMP      r0,#0xa               ;1869
001bc0  d001              BEQ      |L1.7110|
001bc2  2809              CMP      r0,#9                 ;1869
001bc4  d10b              BNE      |L1.7134|
                  |L1.7110|
001bc6  f2af3314          ADR      r3,|L1.6324|
001bca  f2af3200          ADR      r2,|L1.6348|
001bce  f2af21ec          ADR      r1,|L1.6372|
001bd2  f2af20d8          ADR      r0,|L1.6396|
001bd6  f8cd8000          STR      r8,[sp,#0]
001bda  f7fffffe          BL       show_mess
                  |L1.7134|
;;;1872   					"      ТУМБЛЕР       ",
;;;1873   					"     ВЫСОКОГО       ",
;;;1874   					"    НАПРЯЖЕНИЯ      ",
;;;1875   					5000);
;;;1876   		}
;;;1877   	if(sk_stat[1]==1)
001bde  7868              LDRB     r0,[r5,#1]  ; sk_stat
001be0  2801              CMP      r0,#1
001be2  d10d              BNE      |L1.7168|
;;;1878   		{
;;;1879   		vz2_stat=vz2sWRK1;
001be4  71f4              STRB     r4,[r6,#7]
;;;1880   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001be6  210a              MOVS     r1,#0xa
001be8  f44f70ca          MOV      r0,#0x194
001bec  f7fffffe          BL       lc640_write
;;;1881   		volt_region=1;
001bf0  f04f0001          MOV      r0,#1
001bf4  f886002e          STRB     r0,[r6,#0x2e]
;;;1882   		cntrl_stat=0;
001bf8  8637              STRH     r7,[r6,#0x30]
;;;1883   		cntrl_stat_new=0;
001bfa  f8a67046          STRH     r7,[r6,#0x46]
;;;1884   		cntrl_stat_old=0;
001bfe  8677              STRH     r7,[r6,#0x32]
                  |L1.7168|
;;;1885   		}
;;;1886   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001c00  2314              MOVS     r3,#0x14
001c02  2200              MOVS     r2,#0
001c04  2164              MOVS     r1,#0x64
001c06  20d2              MOVS     r0,#0xd2
001c08  f7fffffe          BL       mess_send
                  |L1.7180|
;;;1887   	}
;;;1888   
;;;1889   if(vz2_stat==vz2sWRK1)
001c0c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1890   	{
;;;1891   
;;;1892   	if(vz2_stat_old!=vz2_stat)
;;;1893   		{
;;;1894   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001c0e  f8df925c          LDR      r9,|L1.7788|
;;;1895   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1896   		vz2_up_cnt=0L;
;;;1897   
;;;1898   		}
;;;1899   	vz2_wrk_cnt--;
;;;1900   	vz2_up_cnt++;
;;;1901   
;;;1902   	if(vz2_wrk_cnt==0)
;;;1903   		{
;;;1904   		vz2_stat=vz2sWRK2;
;;;1905   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1906   		}
;;;1907   	if(sk_stat[0]==0)
;;;1908   		{
;;;1909   		vz2_stat=vz2sERR2;
;;;1910   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1911   		}
;;;1912   	if(sk_stat[1]==0)
;;;1913   		{
;;;1914   		vz2_stat=vz2sERR3;
;;;1915   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1916   		}
;;;1917   	//if(abs(out_U-FZ_U1)<10)
;;;1918   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1919   		{
;;;1920   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1921   			{
;;;1922   			if(vz2_stat_ph2_cnt)
;;;1923   				{
;;;1924   				vz2_stat_ph2_cnt--;
;;;1925   				if(vz2_stat_ph2_cnt==0)
;;;1926   					{
;;;1927   					vz2_stat=vz2sWRK2;
;;;1928   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1929   					}
;;;1930   				}
;;;1931   			}
;;;1932   		else
;;;1933   			{
;;;1934   			vz2_stat_ph2_cnt=60;
;;;1935   			}
;;;1936   		}
;;;1937   	else
;;;1938   		{
;;;1939   		vz2_stat_ph2_cnt=60;
;;;1940   		}
;;;1941   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1942   		{
;;;1943   		volt_region=0;
;;;1944   		cntrl_stat=1000;
001c12  f44f7b7a          MOV      r11,#0x3e8
001c16  f1090980          ADD      r9,r9,#0x80           ;1894
001c1a  f04f0a0b          MOV      r10,#0xb              ;1904
001c1e  280a              CMP      r0,#0xa               ;1889
001c20  d17d              BNE      |L1.7454|
001c22  7a30              LDRB     r0,[r6,#8]            ;1892  ; vz2_stat_old
001c24  280a              CMP      r0,#0xa               ;1892
001c26  d00a              BEQ      |L1.7230|
001c28  4893              LDR      r0,|L1.7800|
001c2a  f44f6161          MOV      r1,#0xe10             ;1894
001c2e  f9b00000          LDRSH    r0,[r0,#0]            ;1894  ; FZ_T1
001c32  fb00f001          MUL      r0,r0,r1              ;1894
001c36  f8c90044          STR      r0,[r9,#0x44]         ;1894  ; vz2_wrk_cnt
001c3a  f8c97048          STR      r7,[r9,#0x48]         ;1896  ; vz2_up_cnt
                  |L1.7230|
001c3e  f8d90044          LDR      r0,[r9,#0x44]         ;1899  ; vz2_wrk_cnt
001c42  f1a00001          SUB      r0,r0,#1              ;1899
001c46  f8c90044          STR      r0,[r9,#0x44]         ;1899  ; vz2_wrk_cnt
001c4a  f8d91048          LDR      r1,[r9,#0x48]         ;1900  ; vz2_up_cnt
001c4e  f1010101          ADD      r1,r1,#1              ;1900
001c52  f8c91048          STR      r1,[r9,#0x48]         ;1900  ; vz2_up_cnt
001c56  b930              CBNZ     r0,|L1.7270|
001c58  f886a007          STRB     r10,[r6,#7]           ;1904
001c5c  210b              MOVS     r1,#0xb               ;1905
001c5e  f44f70ca          MOV      r0,#0x194             ;1905
001c62  f7fffffe          BL       lc640_write
                  |L1.7270|
001c66  7828              LDRB     r0,[r5,#0]            ;1907  ; sk_stat
001c68  b938              CBNZ     r0,|L1.7290|
001c6a  f04f000d          MOV      r0,#0xd               ;1909
001c6e  71f0              STRB     r0,[r6,#7]            ;1909
001c70  4601              MOV      r1,r0                 ;1910
001c72  f44f70ca          MOV      r0,#0x194             ;1910
001c76  f7fffffe          BL       lc640_write
                  |L1.7290|
001c7a  7868              LDRB     r0,[r5,#1]            ;1912  ; sk_stat
001c7c  b938              CBNZ     r0,|L1.7310|
001c7e  f04f000e          MOV      r0,#0xe               ;1914
001c82  71f0              STRB     r0,[r6,#7]            ;1914
001c84  4601              MOV      r1,r0                 ;1915
001c86  f44f70ca          MOV      r0,#0x194             ;1915
001c8a  f7fffffe          BL       lc640_write
                  |L1.7310|
001c8e  487b              LDR      r0,|L1.7804|
001c90  223c              MOVS     r2,#0x3c              ;1934
001c92  f9b01000          LDRSH    r1,[r0,#0]            ;1918  ; out_U
001c96  487a              LDR      r0,|L1.7808|
001c98  f9b00000          LDRSH    r0,[r0,#0]            ;1918  ; FZ_U1
001c9c  f100031e          ADD      r3,r0,#0x1e           ;1918
001ca0  4299              CMP      r1,r3                 ;1918
001ca2  da20              BGE      |L1.7398|
001ca4  380a              SUBS     r0,r0,#0xa            ;1918
001ca6  4281              CMP      r1,r0                 ;1918
001ca8  dd1d              BLE      |L1.7398|
001caa  4876              LDR      r0,|L1.7812|
001cac  4976              LDR      r1,|L1.7816|
001cae  f9b00000          LDRSH    r0,[r0,#0]            ;1920  ; Ib_ips_termokompensat
001cb2  f9b11000          LDRSH    r1,[r1,#0]            ;1920  ; FZ_ISW12
001cb6  fb90f0f4          SDIV     r0,r0,r4              ;1920
001cba  4288              CMP      r0,r1                 ;1920
001cbc  da10              BGE      |L1.7392|
001cbe  f9b6007e          LDRSH    r0,[r6,#0x7e]         ;1922  ; vz2_stat_ph2_cnt
001cc2  b190              CBZ      r0,|L1.7402|
001cc4  f1a00001          SUB      r0,r0,#1              ;1924
001cc8  b200              SXTH     r0,r0                 ;1924
001cca  f8a6007e          STRH     r0,[r6,#0x7e]         ;1924
001cce  b960              CBNZ     r0,|L1.7402|
001cd0  f886a007          STRB     r10,[r6,#7]           ;1927
001cd4  210b              MOVS     r1,#0xb               ;1928
001cd6  f44f70ca          MOV      r0,#0x194             ;1928
001cda  f7fffffe          BL       lc640_write
001cde  e004              B        |L1.7402|
                  |L1.7392|
001ce0  f8a6207e          STRH     r2,[r6,#0x7e]         ;1934
001ce4  e001              B        |L1.7402|
                  |L1.7398|
001ce6  f8a6207e          STRH     r2,[r6,#0x7e]         ;1939
                  |L1.7402|
001cea  f9b60048          LDRSH    r0,[r6,#0x48]         ;1941  ; Ibmax
001cee  f8b6104a          LDRH     r1,[r6,#0x4a]         ;1941  ; IZMAX_
001cf2  fb90f0f4          SDIV     r0,r0,r4              ;1941
001cf6  4288              CMP      r0,r1                 ;1941
001cf8  dd18              BLE      |L1.7468|
001cfa  f9b62030          LDRSH    r2,[r6,#0x30]         ;1941  ; cntrl_stat
001cfe  2a14              CMP      r2,#0x14              ;1941
001d00  dc14              BGT      |L1.7468|
001d02  f896202e          LDRB     r2,[r6,#0x2e]         ;1941  ; volt_region
001d06  2a01              CMP      r2,#1                 ;1941
001d08  d110              BNE      |L1.7468|
001d0a  f8b6207a          LDRH     r2,[r6,#0x7a]         ;1941  ; volt_region_cnt
001d0e  b96a              CBNZ     r2,|L1.7468|
001d10  f886702e          STRB     r7,[r6,#0x2e]         ;1943
001d14  f8a6b030          STRH     r11,[r6,#0x30]
;;;1945   		cntrl_stat_new=1000;
001d18  f8a6b046          STRH     r11,[r6,#0x46]
;;;1946   		cntrl_stat_old=1000;
001d1c  e000              B        |L1.7456|
                  |L1.7454|
001d1e  e02e              B        |L1.7550|
                  |L1.7456|
001d20  f8a6b032          STRH     r11,[r6,#0x32]
;;;1947   		volt_region_cnt=110;
001d24  f04f026e          MOV      r2,#0x6e
001d28  f8a6207a          STRH     r2,[r6,#0x7a]
                  |L1.7468|
;;;1948   		}
;;;1949   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001d2c  4288              CMP      r0,r1
001d2e  da13              BGE      |L1.7512|
001d30  f9b60030          LDRSH    r0,[r6,#0x30]  ; cntrl_stat
001d34  4558              CMP      r0,r11
001d36  db0f              BLT      |L1.7512|
001d38  f896002e          LDRB     r0,[r6,#0x2e]  ; volt_region
001d3c  b960              CBNZ     r0,|L1.7512|
001d3e  f8b6007a          LDRH     r0,[r6,#0x7a]  ; volt_region_cnt
001d42  b948              CBNZ     r0,|L1.7512|
;;;1950   		{
;;;1951   		volt_region=1;
001d44  f04f0001          MOV      r0,#1
001d48  f886002e          STRB     r0,[r6,#0x2e]
;;;1952   		cntrl_stat=10;
001d4c  8634              STRH     r4,[r6,#0x30]
;;;1953   		cntrl_stat_new=10;
001d4e  f8a64046          STRH     r4,[r6,#0x46]
;;;1954   		cntrl_stat_old=10;
001d52  8674              STRH     r4,[r6,#0x32]
;;;1955   		volt_region_cnt=10;
001d54  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.7512|
;;;1956   		}
;;;1957   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d58  f896002e          LDRB     r0,[r6,#0x2e]  ; volt_region
001d5c  b110              CBZ      r0,|L1.7524|
;;;1958   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001d5e  2801              CMP      r0,#1
001d60  d007              BEQ      |L1.7538|
001d62  e00c              B        |L1.7550|
                  |L1.7524|
001d64  2314              MOVS     r3,#0x14              ;1957
001d66  2200              MOVS     r2,#0                 ;1957
001d68  2164              MOVS     r1,#0x64              ;1957
001d6a  20d2              MOVS     r0,#0xd2              ;1957
001d6c  f7fffffe          BL       mess_send
001d70  e005              B        |L1.7550|
                  |L1.7538|
001d72  2314              MOVS     r3,#0x14
001d74  2201              MOVS     r2,#1
001d76  2164              MOVS     r1,#0x64
001d78  20d2              MOVS     r0,#0xd2
001d7a  f7fffffe          BL       mess_send
                  |L1.7550|
;;;1959   	}
;;;1960   
;;;1961   if(vz2_stat==vz2sWRK2)
001d7e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001d80  280b              CMP      r0,#0xb
001d82  d171              BNE      |L1.7784|
;;;1962   	{
;;;1963   	if(vz2_stat_old!=vz2_stat)
001d84  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001d86  280b              CMP      r0,#0xb
001d88  d008              BEQ      |L1.7580|
;;;1964   		{
;;;1965   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001d8a  4840              LDR      r0,|L1.7820|
001d8c  f44f6161          MOV      r1,#0xe10
001d90  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001d94  fb00f001          MUL      r0,r0,r1
001d98  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
                  |L1.7580|
;;;1966   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1967   		//vz2_up_cnt=0L;
;;;1968   		}
;;;1969   	vz2_wrk_cnt--;
001d9c  f8d90044          LDR      r0,[r9,#0x44]  ; vz2_wrk_cnt
001da0  f1a00001          SUB      r0,r0,#1
001da4  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
;;;1970   	vz2_up_cnt++;
001da8  f8d91048          LDR      r1,[r9,#0x48]  ; vz2_up_cnt
001dac  f1010101          ADD      r1,r1,#1
001db0  f8c91048          STR      r1,[r9,#0x48]  ; vz2_up_cnt
;;;1971   
;;;1972   	if(vz2_wrk_cnt==0)
001db4  b950              CBNZ     r0,|L1.7628|
;;;1973   		{
;;;1974   		vz2_stat=vz2sFINE;
001db6  f04f0012          MOV      r0,#0x12
001dba  71f0              STRB     r0,[r6,#7]
;;;1975   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001dbc  4601              MOV      r1,r0
001dbe  f44f70ca          MOV      r0,#0x194
001dc2  f7fffffe          BL       lc640_write
;;;1976   		fz_mem_hndl(0);
001dc6  2000              MOVS     r0,#0
001dc8  f7fffffe          BL       fz_mem_hndl
                  |L1.7628|
;;;1977   		}
;;;1978   	if(sk_stat[0]==0)
001dcc  7828              LDRB     r0,[r5,#0]  ; sk_stat
001dce  b938              CBNZ     r0,|L1.7648|
;;;1979   		{
;;;1980   		vz2_stat=vz2sERR5;
001dd0  f04f0010          MOV      r0,#0x10
001dd4  71f0              STRB     r0,[r6,#7]
;;;1981   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001dd6  4601              MOV      r1,r0
001dd8  f44f70ca          MOV      r0,#0x194
001ddc  f7fffffe          BL       lc640_write
                  |L1.7648|
;;;1982   		}
;;;1983   	if(sk_stat[1]==0)
001de0  7868              LDRB     r0,[r5,#1]  ; sk_stat
001de2  b938              CBNZ     r0,|L1.7668|
;;;1984   		{
;;;1985   		vz2_stat=vz2sERR6;
001de4  f04f0011          MOV      r0,#0x11
001de8  71f0              STRB     r0,[r6,#7]
;;;1986   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001dea  4601              MOV      r1,r0
001dec  f44f70ca          MOV      r0,#0x194
001df0  f7fffffe          BL       lc640_write
                  |L1.7668|
;;;1987   		}
;;;1988   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001df4  f9b60048          LDRSH    r0,[r6,#0x48]  ; Ibmax
001df8  f8b6104a          LDRH     r1,[r6,#0x4a]  ; IZMAX_
001dfc  fb90f0f4          SDIV     r0,r0,r4
001e00  4288              CMP      r0,r1
001e02  dd16              BLE      |L1.7730|
001e04  f9b62030          LDRSH    r2,[r6,#0x30]  ; cntrl_stat
001e08  2a14              CMP      r2,#0x14
001e0a  dc12              BGT      |L1.7730|
001e0c  f896202e          LDRB     r2,[r6,#0x2e]  ; volt_region
001e10  2a01              CMP      r2,#1
001e12  d10e              BNE      |L1.7730|
001e14  f8b6207a          LDRH     r2,[r6,#0x7a]  ; volt_region_cnt
001e18  b95a              CBNZ     r2,|L1.7730|
;;;1989   		{
;;;1990   		volt_region=0;
001e1a  f886702e          STRB     r7,[r6,#0x2e]
;;;1991   		cntrl_stat=1000;
001e1e  f8a6b030          STRH     r11,[r6,#0x30]
;;;1992   		cntrl_stat_new=1000;
001e22  f8a6b046          STRH     r11,[r6,#0x46]
;;;1993   		cntrl_stat_old=1000;
001e26  f8a6b032          STRH     r11,[r6,#0x32]
;;;1994   		volt_region_cnt=110;
001e2a  f04f026e          MOV      r2,#0x6e
001e2e  f8a6207a          STRH     r2,[r6,#0x7a]
                  |L1.7730|
;;;1995   		}
;;;1996   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001e32  4288              CMP      r0,r1
001e34  da13              BGE      |L1.7774|
001e36  f9b60030          LDRSH    r0,[r6,#0x30]  ; cntrl_stat
001e3a  4558              CMP      r0,r11
001e3c  db0f              BLT      |L1.7774|
001e3e  f896002e          LDRB     r0,[r6,#0x2e]  ; volt_region
001e42  b960              CBNZ     r0,|L1.7774|
001e44  f8b6007a          LDRH     r0,[r6,#0x7a]  ; volt_region_cnt
001e48  b948              CBNZ     r0,|L1.7774|
;;;1997   		{
;;;1998   		volt_region=1;
001e4a  f04f0001          MOV      r0,#1
001e4e  f886002e          STRB     r0,[r6,#0x2e]
;;;1999   		cntrl_stat=10;
001e52  8634              STRH     r4,[r6,#0x30]
;;;2000   		cntrl_stat_new=10;
001e54  f8a64046          STRH     r4,[r6,#0x46]
;;;2001   		cntrl_stat_old=10;
001e58  8674              STRH     r4,[r6,#0x32]
;;;2002   		volt_region_cnt=10;
001e5a  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.7774|
;;;2003   		}
;;;2004   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001e5e  f896002e          LDRB     r0,[r6,#0x2e]  ; volt_region
001e62  b1a8              CBZ      r0,|L1.7824|
;;;2005   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001e64  2801              CMP      r0,#1
001e66  d01a              BEQ      |L1.7838|
                  |L1.7784|
001e68  e01f              B        |L1.7850|
001e6a  0000              DCW      0x0000
                  |L1.7788|
                          DCD      ||area_number.25||
                  |L1.7792|
                          DCD      speedChrgBlckStat
                  |L1.7796|
                          DCD      sk_stat
                  |L1.7800|
                          DCD      FZ_T1
                  |L1.7804|
                          DCD      out_U
                  |L1.7808|
                          DCD      FZ_U1
                  |L1.7812|
                          DCD      Ib_ips_termokompensat
                  |L1.7816|
                          DCD      FZ_ISW12
                  |L1.7820|
                          DCD      FZ_T2
                  |L1.7824|
001e90  2314              MOVS     r3,#0x14              ;2004
001e92  2200              MOVS     r2,#0                 ;2004
001e94  2164              MOVS     r1,#0x64              ;2004
001e96  20d2              MOVS     r0,#0xd2              ;2004
001e98  f7fffffe          BL       mess_send
001e9c  e005              B        |L1.7850|
                  |L1.7838|
001e9e  2314              MOVS     r3,#0x14
001ea0  2201              MOVS     r2,#1
001ea2  2164              MOVS     r1,#0x64
001ea4  20d2              MOVS     r0,#0xd2
001ea6  f7fffffe          BL       mess_send
                  |L1.7850|
;;;2006   	}
;;;2007   
;;;2008   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
001eaa  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001eac  280c              CMP      r0,#0xc
001eae  d123              BNE      |L1.7928|
;;;2009   	{
;;;2010   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001eb0  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001eb2  280c              CMP      r0,#0xc
001eb4  d102              BNE      |L1.7868|
001eb6  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001eba  b908              CBNZ     r0,|L1.7872|
                  |L1.7868|
;;;2011   		{
;;;2012   		vz2_stat_cnt=10;
001ebc  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.7872|
;;;2013   		}
;;;2014   	vz2_stat_cnt--;
001ec0  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001ec4  f1a00001          SUB      r0,r0,#1
001ec8  b200              SXTH     r0,r0
001eca  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2015   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001ece  280a              CMP      r0,#0xa
001ed0  d001              BEQ      |L1.7894|
001ed2  2809              CMP      r0,#9
001ed4  d10a              BNE      |L1.7916|
                  |L1.7894|
;;;2016   		{
;;;2017   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001ed6  f2af53bc          ADR      r3,|L1.6428|
001eda  f2af52a8          ADR      r2,|L1.6452|
001ede  f2af5194          ADR      r1,|L1.6476|
001ee2  a0ff              ADR      r0,|L1.8928|
001ee4  f8cd8000          STR      r8,[sp,#0]
001ee8  f7fffffe          BL       show_mess
                  |L1.7916|
;;;2018   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2019   					"      ВКЛЮЧЕН       ",
;;;2020   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2021   					5000);
;;;2022   		}
;;;2023   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001eec  2314              MOVS     r3,#0x14
001eee  2200              MOVS     r2,#0
001ef0  2164              MOVS     r1,#0x64
001ef2  20d2              MOVS     r0,#0xd2
001ef4  f7fffffe          BL       mess_send
                  |L1.7928|
;;;2024   	}
;;;2025   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
001ef8  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001efa  280d              CMP      r0,#0xd
001efc  d12c              BNE      |L1.8024|
;;;2026   	{
;;;2027   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001efe  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f00  280d              CMP      r0,#0xd
001f02  d102              BNE      |L1.7946|
001f04  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001f08  b908              CBNZ     r0,|L1.7950|
                  |L1.7946|
;;;2028   		{
;;;2029   		vz2_stat_cnt=10;
001f0a  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.7950|
;;;2030   		}
;;;2031   	vz2_stat_cnt--;
001f0e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001f12  f1a00001          SUB      r0,r0,#1
001f16  b200              SXTH     r0,r0
001f18  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2032   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f1c  280a              CMP      r0,#0xa
001f1e  d001              BEQ      |L1.7972|
001f20  2809              CMP      r0,#9
001f22  d10a              BNE      |L1.7994|
                  |L1.7972|
;;;2033   		{
;;;2034   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f24  f6af23cc          ADR      r3,|L1.5212|
001f28  f6af22b8          ADR      r2,|L1.5236|
001f2c  f6af21a4          ADR      r1,|L1.5260|
001f30  a0eb              ADR      r0,|L1.8928|
001f32  f8cd8000          STR      r8,[sp,#0]
001f36  f7fffffe          BL       show_mess
                  |L1.7994|
;;;2035   					"    ЗАБЛОКИРОВАН    ",
;;;2036   					"     НЕИСПРАВНА     ",
;;;2037   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2038   					5000);
;;;2039   		}
;;;2040   	if(sk_stat[0]==1)
001f3a  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f3c  2801              CMP      r0,#1
001f3e  d105              BNE      |L1.8012|
;;;2041   		{
;;;2042   		vz2_stat=vz2sWRK1;
001f40  71f4              STRB     r4,[r6,#7]
;;;2043   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001f42  210a              MOVS     r1,#0xa
001f44  f44f70ca          MOV      r0,#0x194
001f48  f7fffffe          BL       lc640_write
                  |L1.8012|
;;;2044   		}
;;;2045   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f4c  2314              MOVS     r3,#0x14
001f4e  2200              MOVS     r2,#0
001f50  2164              MOVS     r1,#0x64
001f52  20d2              MOVS     r0,#0xd2
001f54  f7fffffe          BL       mess_send
                  |L1.8024|
;;;2046   	}
;;;2047   
;;;2048   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
001f58  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001f5a  280e              CMP      r0,#0xe
001f5c  d12b              BNE      |L1.8118|
;;;2049   	{
;;;2050   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001f5e  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f60  280e              CMP      r0,#0xe
001f62  d102              BNE      |L1.8042|
001f64  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001f68  b908              CBNZ     r0,|L1.8046|
                  |L1.8042|
;;;2051   		{
;;;2052   		vz2_stat_cnt=10;
001f6a  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8046|
;;;2053   		}
;;;2054   	vz2_stat_cnt--;
001f6e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001f72  f1a00001          SUB      r0,r0,#1
001f76  b200              SXTH     r0,r0
001f78  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2055   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f7c  280a              CMP      r0,#0xa
001f7e  d001              BEQ      |L1.8068|
001f80  2809              CMP      r0,#9
001f82  d109              BNE      |L1.8088|
                  |L1.8068|
;;;2056   		{
;;;2057   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f84  a3dc              ADR      r3,|L1.8952|
001f86  f2af52f4          ADR      r2,|L1.6548|
001f8a  f2af51e0          ADR      r1,|L1.6572|
001f8e  a0d4              ADR      r0,|L1.8928|
001f90  f8cd8000          STR      r8,[sp,#0]
001f94  f7fffffe          BL       show_mess
                  |L1.8088|
;;;2058   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2059   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2060   					"    ТУМБЛЕРА!!!     ",
;;;2061   					5000);
;;;2062   		}
;;;2063   	if(sk_stat[1]==1)
001f98  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f9a  2801              CMP      r0,#1
001f9c  d105              BNE      |L1.8106|
;;;2064   		{
;;;2065   		vz2_stat=vz2sWRK1;
001f9e  71f4              STRB     r4,[r6,#7]
;;;2066   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001fa0  210a              MOVS     r1,#0xa
001fa2  f44f70ca          MOV      r0,#0x194
001fa6  f7fffffe          BL       lc640_write
                  |L1.8106|
;;;2067   		}
;;;2068   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001faa  2314              MOVS     r3,#0x14
001fac  2200              MOVS     r2,#0
001fae  2164              MOVS     r1,#0x64
001fb0  20d2              MOVS     r0,#0xd2
001fb2  f7fffffe          BL       mess_send
                  |L1.8118|
;;;2069   	}
;;;2070   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
001fb6  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001fb8  2810              CMP      r0,#0x10
001fba  d12d              BNE      |L1.8216|
;;;2071   	{
;;;2072   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001fbc  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001fbe  2810              CMP      r0,#0x10
001fc0  d102              BNE      |L1.8136|
001fc2  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001fc6  b908              CBNZ     r0,|L1.8140|
                  |L1.8136|
;;;2073   		{
;;;2074   		vz2_stat_cnt=10;
001fc8  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8140|
;;;2075   		}
;;;2076   	vz2_stat_cnt--;
001fcc  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
001fd0  f1a00001          SUB      r0,r0,#1
001fd4  b200              SXTH     r0,r0
001fd6  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2077   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001fda  280a              CMP      r0,#0xa
001fdc  d001              BEQ      |L1.8162|
001fde  2809              CMP      r0,#9
001fe0  d10a              BNE      |L1.8184|
                  |L1.8162|
;;;2078   		{
;;;2079   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001fe2  f6af3388          ADR      r3,|L1.5212|
001fe6  f6af3274          ADR      r2,|L1.5236|
001fea  f6af3160          ADR      r1,|L1.5260|
001fee  a0bc              ADR      r0,|L1.8928|
001ff0  f8cd8000          STR      r8,[sp,#0]
001ff4  f7fffffe          BL       show_mess
                  |L1.8184|
;;;2080   					"    ЗАБЛОКИРОВАН    ",
;;;2081   					"     НЕИСПРАВНА     ",
;;;2082   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2083   					5000);
;;;2084   		}
;;;2085   	if(sk_stat[0]==1)
001ff8  7828              LDRB     r0,[r5,#0]  ; sk_stat
001ffa  2801              CMP      r0,#1
001ffc  d106              BNE      |L1.8204|
;;;2086   		{
;;;2087   		vz2_stat=vz2sWRK2;
001ffe  f886a007          STRB     r10,[r6,#7]
;;;2088   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002002  210b              MOVS     r1,#0xb
002004  f44f70ca          MOV      r0,#0x194
002008  f7fffffe          BL       lc640_write
                  |L1.8204|
;;;2089   		}
;;;2090   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00200c  2314              MOVS     r3,#0x14
00200e  2200              MOVS     r2,#0
002010  2164              MOVS     r1,#0x64
002012  20d2              MOVS     r0,#0xd2
002014  f7fffffe          BL       mess_send
                  |L1.8216|
;;;2091   	}
;;;2092   
;;;2093   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
002018  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00201a  2811              CMP      r0,#0x11
00201c  d12c              BNE      |L1.8312|
;;;2094   	{
;;;2095   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00201e  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002020  2811              CMP      r0,#0x11
002022  d102              BNE      |L1.8234|
002024  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002028  b908              CBNZ     r0,|L1.8238|
                  |L1.8234|
;;;2096   		{
;;;2097   		vz2_stat_cnt=10;
00202a  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8238|
;;;2098   		}
;;;2099   	vz2_stat_cnt--;
00202e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002032  f1a00001          SUB      r0,r0,#1
002036  b200              SXTH     r0,r0
002038  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2100   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00203c  280a              CMP      r0,#0xa
00203e  d001              BEQ      |L1.8260|
002040  2809              CMP      r0,#9
002042  d109              BNE      |L1.8280|
                  |L1.8260|
;;;2101   		{
;;;2102   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002044  a3ac              ADR      r3,|L1.8952|
002046  f2af62b4          ADR      r2,|L1.6548|
00204a  f2af61a0          ADR      r1,|L1.6572|
00204e  a0a4              ADR      r0,|L1.8928|
002050  f8cd8000          STR      r8,[sp,#0]
002054  f7fffffe          BL       show_mess
                  |L1.8280|
;;;2103   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2104   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2105   					"    ТУМБЛЕРА!!!     ",
;;;2106   					5000);
;;;2107   		}
;;;2108   	if(sk_stat[1]==1)
002058  7868              LDRB     r0,[r5,#1]  ; sk_stat
00205a  2801              CMP      r0,#1
00205c  d106              BNE      |L1.8300|
;;;2109   		{
;;;2110   		vz2_stat=vz2sWRK2;
00205e  f886a007          STRB     r10,[r6,#7]
;;;2111   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002062  210b              MOVS     r1,#0xb
002064  f44f70ca          MOV      r0,#0x194
002068  f7fffffe          BL       lc640_write
                  |L1.8300|
;;;2112   		}
;;;2113   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00206c  2314              MOVS     r3,#0x14
00206e  2200              MOVS     r2,#0
002070  2164              MOVS     r1,#0x64
002072  20d2              MOVS     r0,#0xd2
002074  f7fffffe          BL       mess_send
                  |L1.8312|
;;;2114   	}
;;;2115   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
002078  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00207a  280f              CMP      r0,#0xf
00207c  d12e              BNE      |L1.8412|
;;;2116   	{
;;;2117   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00207e  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002080  280f              CMP      r0,#0xf
002082  d102              BNE      |L1.8330|
002084  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002088  b908              CBNZ     r0,|L1.8334|
                  |L1.8330|
;;;2118   		{
;;;2119   		vz2_stat_cnt=10;
00208a  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8334|
;;;2120   		}
;;;2121   	vz2_stat_cnt--;
00208e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002092  f1a00001          SUB      r0,r0,#1
002096  b200              SXTH     r0,r0
002098  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2122   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00209c  280a              CMP      r0,#0xa
00209e  d001              BEQ      |L1.8356|
0020a0  2809              CMP      r0,#9
0020a2  d10b              BNE      |L1.8380|
                  |L1.8356|
;;;2123   		{
;;;2124   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0020a4  f2af73f4          ADR      r3,|L1.6324|
0020a8  f2af72e0          ADR      r2,|L1.6348|
0020ac  f2af71cc          ADR      r1,|L1.6372|
0020b0  f2af6078          ADR      r0,|L1.6716|
0020b4  f8cd8000          STR      r8,[sp,#0]
0020b8  f7fffffe          BL       show_mess
                  |L1.8380|
;;;2125   					"      ТУМБЛЕР       ",
;;;2126   					"     ВЫСОКОГО       ",
;;;2127   					"    НАПРЯЖЕНИЯ      ",
;;;2128   					5000);
;;;2129   		}
;;;2130   	if(sk_stat[1]==0)
0020bc  7868              LDRB     r0,[r5,#1]  ; sk_stat
0020be  b938              CBNZ     r0,|L1.8400|
;;;2131   		{
;;;2132   		vz2_stat=vz2sOFF;
0020c0  71f7              STRB     r7,[r6,#7]
;;;2133   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0020c2  2100              MOVS     r1,#0
0020c4  f44f70ca          MOV      r0,#0x194
0020c8  f7fffffe          BL       lc640_write
;;;2134   		vz_stop();
0020cc  f7fffffe          BL       vz_stop
                  |L1.8400|
;;;2135   
;;;2136   		}
;;;2137   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020d0  2314              MOVS     r3,#0x14
0020d2  2200              MOVS     r2,#0
0020d4  2164              MOVS     r1,#0x64
0020d6  20d2              MOVS     r0,#0xd2
0020d8  f7fffffe          BL       mess_send
                  |L1.8412|
;;;2138   	}
;;;2139   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
0020dc  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;2140   	{
;;;2141   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2142   		{
;;;2143   		vz2_stat_cnt=10;
;;;2144   		}
;;;2145   	vz2_stat_cnt--;
;;;2146   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2147   		{
;;;2148   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0020de  f64038b8          MOV      r8,#0xbb8
0020e2  2812              CMP      r0,#0x12              ;2139
0020e4  d13d              BNE      |L1.8546|
0020e6  7a30              LDRB     r0,[r6,#8]            ;2141  ; vz2_stat_old
0020e8  2812              CMP      r0,#0x12              ;2141
0020ea  d102              BNE      |L1.8434|
0020ec  f8b6007c          LDRH     r0,[r6,#0x7c]         ;2141  ; vz2_stat_cnt
0020f0  b908              CBNZ     r0,|L1.8438|
                  |L1.8434|
0020f2  f8a6407c          STRH     r4,[r6,#0x7c]         ;2143
                  |L1.8438|
0020f6  f8b6007c          LDRH     r0,[r6,#0x7c]         ;2145  ; vz2_stat_cnt
0020fa  f1a00001          SUB      r0,r0,#1              ;2145
0020fe  b200              SXTH     r0,r0                 ;2145
002100  f8a6007c          STRH     r0,[r6,#0x7c]         ;2145
002104  280a              CMP      r0,#0xa               ;2146
002106  d001              BEQ      |L1.8460|
002108  2809              CMP      r0,#9                 ;2146
00210a  d10a              BNE      |L1.8482|
                  |L1.8460|
00210c  f2af7334          ADR      r3,|L1.6620|
002110  f2af7220          ADR      r2,|L1.6644|
002114  f2af710c          ADR      r1,|L1.6668|
002118  a07d              ADR      r0,|L1.8976|
00211a  f8cd8000          STR      r8,[sp,#0]
00211e  f7fffffe          BL       show_mess
                  |L1.8482|
;;;2149   					"       ЗАРЯД        ",
;;;2150   					"      УСПЕШНО       ",
;;;2151   					"     ЗАВЕРШЕН       ",
;;;2152   					3000);
;;;2153   		}
;;;2154   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002122  f9b6007c          LDRSH    r0,[r6,#0x7c]  ; vz2_stat_cnt
002126  2806              CMP      r0,#6
002128  d001              BEQ      |L1.8494|
00212a  2805              CMP      r0,#5
00212c  d10b              BNE      |L1.8518|
                  |L1.8494|
;;;2155   		{
;;;2156   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00212e  f6af037c          ADR      r3,|L1.6324|
002132  f6af0268          ADR      r2,|L1.6348|
002136  f6af0154          ADR      r1,|L1.6372|
00213a  f2af7000          ADR      r0,|L1.6716|
00213e  f8cd8000          STR      r8,[sp,#0]
002142  f7fffffe          BL       show_mess
                  |L1.8518|
;;;2157   					"      ТУМБЛЕР       ",
;;;2158   					"     ВЫСОКОГО       ",
;;;2159   					"    НАПРЯЖЕНИЯ      ",
;;;2160   					3000);
;;;2161   		}
;;;2162   	if(sk_stat[1]==0)
002146  7868              LDRB     r0,[r5,#1]  ; sk_stat
002148  b928              CBNZ     r0,|L1.8534|
;;;2163   		{
;;;2164   		vz2_stat=vz2sOFF;
00214a  71f7              STRB     r7,[r6,#7]
;;;2165   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00214c  2100              MOVS     r1,#0
00214e  f44f70ca          MOV      r0,#0x194
002152  f7fffffe          BL       lc640_write
                  |L1.8534|
;;;2166   		}
;;;2167   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002156  2314              MOVS     r3,#0x14
002158  2200              MOVS     r2,#0
00215a  2164              MOVS     r1,#0x64
00215c  20d2              MOVS     r0,#0xd2
00215e  f7fffffe          BL       mess_send
                  |L1.8546|
;;;2168   	}
;;;2169   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
002162  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002164  2813              CMP      r0,#0x13
002166  d13d              BNE      |L1.8676|
;;;2170   	{
;;;2171   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002168  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00216a  2813              CMP      r0,#0x13
00216c  d102              BNE      |L1.8564|
00216e  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
002172  b908              CBNZ     r0,|L1.8568|
                  |L1.8564|
;;;2172   		{
;;;2173   		vz2_stat_cnt=10;
002174  f8a6407c          STRH     r4,[r6,#0x7c]
                  |L1.8568|
;;;2174   		}
;;;2175   	vz2_stat_cnt--;
002178  f8b6007c          LDRH     r0,[r6,#0x7c]  ; vz2_stat_cnt
00217c  f1a00001          SUB      r0,r0,#1
002180  b200              SXTH     r0,r0
002182  f8a6007c          STRH     r0,[r6,#0x7c]
;;;2176   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002186  280a              CMP      r0,#0xa
002188  d001              BEQ      |L1.8590|
00218a  2809              CMP      r0,#9
00218c  d10a              BNE      |L1.8612|
                  |L1.8590|
;;;2177   		{
;;;2178   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
00218e  f2af733c          ADR      r3,|L1.6740|
002192  f2af7228          ADR      r2,|L1.6764|
002196  f2af718c          ADR      r1,|L1.6668|
00219a  a05d              ADR      r0,|L1.8976|
00219c  f8cd8000          STR      r8,[sp,#0]
0021a0  f7fffffe          BL       show_mess
                  |L1.8612|
;;;2179   					"       ЗАРЯД        ",
;;;2180   					"     ПРЕКРАЩЕН      ",
;;;2181   					"                    ",
;;;2182   					3000);
;;;2183   		}
;;;2184   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0021a4  f9b6007c          LDRSH    r0,[r6,#0x7c]  ; vz2_stat_cnt
0021a8  2806              CMP      r0,#6
0021aa  d001              BEQ      |L1.8624|
0021ac  2805              CMP      r0,#5
0021ae  d10b              BNE      |L1.8648|
                  |L1.8624|
;;;2185   		{
;;;2186   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0021b0  f6af1300          ADR      r3,|L1.6324|
0021b4  f6af02ec          ADR      r2,|L1.6348|
0021b8  f6af01d8          ADR      r1,|L1.6372|
0021bc  f2af7084          ADR      r0,|L1.6716|
0021c0  f8cd8000          STR      r8,[sp,#0]
0021c4  f7fffffe          BL       show_mess
                  |L1.8648|
;;;2187   					"      ТУМБЛЕР       ",
;;;2188   					"     ВЫСОКОГО       ",
;;;2189   					"    НАПРЯЖЕНИЯ      ",
;;;2190   					3000);
;;;2191   		}
;;;2192   	if(sk_stat[1]==0)
0021c8  7868              LDRB     r0,[r5,#1]  ; sk_stat
0021ca  b928              CBNZ     r0,|L1.8664|
;;;2193   		{
;;;2194   		vz2_stat=vz2sOFF;
0021cc  71f7              STRB     r7,[r6,#7]
;;;2195   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0021ce  2100              MOVS     r1,#0
0021d0  f44f70ca          MOV      r0,#0x194
0021d4  f7fffffe          BL       lc640_write
                  |L1.8664|
;;;2196   		}
;;;2197   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0021d8  2314              MOVS     r3,#0x14
0021da  2200              MOVS     r2,#0
0021dc  2164              MOVS     r1,#0x64
0021de  20d2              MOVS     r0,#0xd2
0021e0  f7fffffe          BL       mess_send
                  |L1.8676|
;;;2198   	}
;;;2199   vz2_stat_old=vz2_stat;
0021e4  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0021e6  7230              STRB     r0,[r6,#8]
;;;2200   
;;;2201   }
0021e8  e8bd8ff8          POP      {r3-r11,pc}
;;;2202   
                          ENDP

                  vz2_start PROC
;;;2204   //старт уравнительног заряда
;;;2205   char vz2_start(char hour)
0021ec  b510              PUSH     {r4,lr}
;;;2206   {          
;;;2207   char out;
;;;2208   out=0;
0021ee  f04f0000          MOV      r0,#0
;;;2209   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0021f2  494d              LDR      r1,|L1.9000|
0021f4  f8912022          LDRB     r2,[r1,#0x22]  ; spc_stat
0021f8  2a00              CMP      r2,#0
0021fa  d110              BNE      |L1.8734|
0021fc  4a4b              LDR      r2,|L1.9004|
0021fe  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
002200  2a01              CMP      r2,#1
002202  d00c              BEQ      |L1.8734|
002204  794a              LDRB     r2,[r1,#5]  ; vz1_stat
002206  2a00              CMP      r2,#0
002208  d109              BNE      |L1.8734|
;;;2210   	{
;;;2211   	if(vz1_stat==vz1sOFF)
;;;2212   		{
;;;2213   		vz2_stat=vz2sSTEP1;
00220a  f04f0001          MOV      r0,#1
00220e  71c8              STRB     r0,[r1,#7]
;;;2214   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
002210  4601              MOV      r1,r0
002212  f44f70ca          MOV      r0,#0x194
002216  f7fffffe          BL       lc640_write
;;;2215   		out=1;
00221a  f04f0001          MOV      r0,#1
                  |L1.8734|
;;;2216   		
;;;2217   		}
;;;2218   /*	spc_stat=spcVZ;
;;;2219   	__ee_spc_stat=spcVZ; 
;;;2220   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2221   	vz_cnt_h=hour;
;;;2222   	__ee_vz_cnt=hour*60;
;;;2223   	if(hour==0)__ee_vz_cnt=30;
;;;2224   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2225   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2226   	vz_cnt_h_=0;
;;;2227   	vz_cnt_s=0;
;;;2228   	vz_cnt_s_=0;
;;;2229   	
;;;2230   		*/
;;;2231   	}
;;;2232   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2233   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2234   //plazma=out;	
;;;2235   return out;
;;;2236   }
00221e  bd10              POP      {r4,pc}
;;;2237   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2238   //стоп формовочного заряда
;;;2239   void vz2_stop(void)
002220  4841              LDR      r0,|L1.9000|
;;;2240   {
;;;2241   if(vz2_stat!=vz2sOFF)
002222  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
002224  2900              CMP      r1,#0
002226  d006              BEQ      |L1.8758|
;;;2242   	{
;;;2243   	vz2_stat=vz2sSTOP;
002228  f04f0113          MOV      r1,#0x13
00222c  71c1              STRB     r1,[r0,#7]
;;;2244   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
00222e  f44f70ca          MOV      r0,#0x194
002232  f7ffbffe          B.W      lc640_write
                  |L1.8758|
;;;2245   	}
;;;2246   }
002236  4770              BX       lr
;;;2247   
                          ENDP

                  kb_init PROC
;;;2248   //-----------------------------------------------
;;;2249   void kb_init(void)
002238  483d              LDR      r0,|L1.9008|
;;;2250   {
;;;2251   main_kb_cnt=(TBAT*60)-60/*120*/;
00223a  f06f013b          MVN      r1,#0x3b
00223e  8800              LDRH     r0,[r0,#0]  ; TBAT
002240  ebc01000          RSB      r0,r0,r0,LSL #4
002244  eb010080          ADD      r0,r1,r0,LSL #2
002248  4937              LDR      r1,|L1.9000|
00224a  f8a10050          STRH     r0,[r1,#0x50]
;;;2252   }
00224e  4770              BX       lr
;;;2253   
                          ENDP

                  kb_hndl PROC
;;;2254   //-----------------------------------------------
;;;2255   void kb_hndl(void)
002250  e92d5ff0          PUSH     {r4-r12,lr}
;;;2256   {
;;;2257   
;;;2258   static signed short ibat[2],ibat_[2];
;;;2259   #ifdef UKU_TELECORE2015
;;;2260   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0))
;;;2261   #else 
;;;2262   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
002254  f8df80d0          LDR      r8,|L1.9000|
;;;2263   #endif
;;;2264   	{
;;;2265   	main_kb_cnt=0;
;;;2266   	
;;;2267   	kb_start[0]=0;
;;;2268   	kb_start[1]=0;
;;;2269   	kb_start_ips=0;
;;;2270   
;;;2271   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2272   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2273   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2274   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
002258  f8dfa0d8          LDR      r10,|L1.9012|
00225c  2500              MOVS     r5,#0                 ;2262
00225e  f8b80050          LDRH     r0,[r8,#0x50]         ;2262  ; main_kb_cnt
002262  4e35              LDR      r6,|L1.9016|
002264  1c40              ADDS     r0,r0,#1              ;2262
002266  b201              SXTH     r1,r0                 ;2262
002268  4831              LDR      r0,|L1.9008|
00226a  f8a81050          STRH     r1,[r8,#0x50]         ;2262
00226e  f8df90cc          LDR      r9,|L1.9020|
002272  f9b00000          LDRSH    r0,[r0,#0]            ;2262  ; TBAT
;;;2275   #endif	
;;;2276   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2277   	  ||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)||(sp_ch_stat!=scsOFF) 	)
;;;2278    
;;;2279   		{
;;;2280   		kb_start[0]=0;
;;;2281   		kb_start[1]=0;
;;;2282   		kb_start_ips=0;
;;;2283   		}
;;;2284   
;;;2285   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2286   		{
;;;2287   		kb_cnt_1lev=10;
002276  270a              MOVS     r7,#0xa
002278  ebc01200          RSB      r2,r0,r0,LSL #4       ;2262
00227c  f04f0b01          MOV      r11,#1                ;2271
002280  f1080456          ADD      r4,r8,#0x56           ;2267
002284  ebb10f82          CMP      r1,r2,LSL #2          ;2262
002288  db7e              BLT      |L1.9096|
00228a  2800              CMP      r0,#0                 ;2262
00228c  d07c              BEQ      |L1.9096|
00228e  f8a85050          STRH     r5,[r8,#0x50]         ;2265
002292  7025              STRB     r5,[r4,#0]            ;2267
002294  7065              STRB     r5,[r4,#1]            ;2268
002296  f888501c          STRB     r5,[r8,#0x1c]         ;2269
00229a  4829              LDR      r0,|L1.9024|
00229c  7800              LDRB     r0,[r0,#0]            ;2271  ; BAT_IS_ON
00229e  2855              CMP      r0,#0x55              ;2271
0022a0  d111              BNE      |L1.8902|
0022a2  f9b60002          LDRSH    r0,[r6,#2]            ;2271  ; bat
0022a6  2850              CMP      r0,#0x50              ;2271
0022a8  dd0d              BLE      |L1.8902|
0022aa  f9b60008          LDRSH    r0,[r6,#8]            ;2271  ; bat
0022ae  f7fffffe          BL       abs
0022b2  f9b91000          LDRSH    r1,[r9,#0]            ;2271  ; IKB
0022b6  4288              CMP      r0,r1                 ;2271
0022b8  db03              BLT      |L1.8898|
0022ba  f896003d          LDRB     r0,[r6,#0x3d]         ;2271  ; bat
0022be  07c0              LSLS     r0,r0,#31             ;2271
0022c0  d001              BEQ      |L1.8902|
                  |L1.8898|
0022c2  f884b000          STRB     r11,[r4,#0]           ;2271
                  |L1.8902|
0022c6  481e              LDR      r0,|L1.9024|
0022c8  7840              LDRB     r0,[r0,#1]            ;2272  ; BAT_IS_ON
0022ca  2855              CMP      r0,#0x55              ;2272
0022cc  d144              BNE      |L1.9048|
0022ce  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2272  ; bat
0022d2  2850              CMP      r0,#0x50              ;2272
0022d4  dd40              BLE      |L1.9048|
0022d6  f9b60054          LDRSH    r0,[r6,#0x54]         ;2272  ; bat
0022da  f7fffffe          BL       abs
0022de  e031              B        |L1.9028|
                  |L1.8928|
0022e0  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0022e4  cccec2ce
0022e8  d7cddbc9
0022ec  20c7c0  
0022ef  d0dfc420          DCB      208,223,196,"  ",0
0022f3  2000    
0022f5  00                DCB      0
0022f6  00                DCB      0
0022f7  00                DCB      0
                  |L1.8952|
0022f8  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
0022fc  d2d3ccc1
002300  cbc5d0c0
002304  21212120
002308  20202020
00230c  00      
00230d  00                DCB      0
00230e  00                DCB      0
00230f  00                DCB      0
                  |L1.8976|
002310  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
002314  d4ced0cc
002318  cec2ced7
00231c  cddbc920
002320  202020  
002323  2000              DCB      " ",0
002325  00                DCB      0
002326  00                DCB      0
002327  00                DCB      0
                  |L1.9000|
                          DCD      ||area_number.25||
                  |L1.9004|
                          DCD      speedChrgBlckStat
                  |L1.9008|
                          DCD      TBAT
                  |L1.9012|
                          DCD      Ib_ips_termokompensat
                  |L1.9016|
                          DCD      bat
                  |L1.9020|
                          DCD      IKB
                  |L1.9024|
                          DCD      BAT_IS_ON
                  |L1.9028|
002344  f9b91000          LDRSH    r1,[r9,#0]            ;2272  ; IKB
002348  4288              CMP      r0,r1                 ;2272
00234a  db03              BLT      |L1.9044|
00234c  f8960089          LDRB     r0,[r6,#0x89]         ;2272  ; bat
002350  07c0              LSLS     r0,r0,#31             ;2272
002352  d001              BEQ      |L1.9048|
                  |L1.9044|
002354  f884b001          STRB     r11,[r4,#1]           ;2272
                  |L1.9048|
002358  48ff              LDR      r0,|L1.10072|
00235a  7800              LDRB     r0,[r0,#0]            ;2274  ; ips_bat_av_vzvod
00235c  b970              CBNZ     r0,|L1.9084|
00235e  f9ba0000          LDRSH    r0,[r10,#0]           ;2274  ; Ib_ips_termokompensat
002362  f7fffffe          BL       abs
002366  f9b91000          LDRSH    r1,[r9,#0]            ;2274  ; IKB
00236a  4288              CMP      r0,r1                 ;2274
00236c  db04              BLT      |L1.9080|
00236e  48fb              LDR      r0,|L1.10076|
002370  f890003d          LDRB     r0,[r0,#0x3d]         ;2274  ; bat_ips
002374  07c0              LSLS     r0,r0,#31             ;2274
002376  d001              BEQ      |L1.9084|
                  |L1.9080|
002378  f888b01c          STRB     r11,[r8,#0x1c]        ;2274
                  |L1.9084|
00237c  48f8              LDR      r0,|L1.10080|
00237e  7800              LDRB     r0,[r0,#0]            ;2276  ; net_av
002380  b990              CBNZ     r0,|L1.9128|
002382  f898001d          LDRB     r0,[r8,#0x1d]         ;2276  ; num_of_wrks_bps
002386  e000              B        |L1.9098|
                  |L1.9096|
002388  e01e              B        |L1.9160|
                  |L1.9098|
00238a  b168              CBZ      r0,|L1.9128|
00238c  f8980022          LDRB     r0,[r8,#0x22]         ;2276  ; spc_stat
002390  b108              CBZ      r0,|L1.9110|
002392  2802              CMP      r0,#2                 ;2276
002394  d108              BNE      |L1.9128|
                  |L1.9110|
002396  f8980005          LDRB     r0,[r8,#5]            ;2277  ; vz1_stat
00239a  b928              CBNZ     r0,|L1.9128|
00239c  f8980007          LDRB     r0,[r8,#7]            ;2277  ; vz2_stat
0023a0  b910              CBNZ     r0,|L1.9128|
0023a2  48f0              LDR      r0,|L1.10084|
0023a4  7800              LDRB     r0,[r0,#0]            ;2277  ; sp_ch_stat
0023a6  b118              CBZ      r0,|L1.9136|
                  |L1.9128|
0023a8  7025              STRB     r5,[r4,#0]            ;2280
0023aa  7065              STRB     r5,[r4,#1]            ;2281
0023ac  f888501c          STRB     r5,[r8,#0x1c]         ;2282
                  |L1.9136|
0023b0  7820              LDRB     r0,[r4,#0]            ;2285  ; kb_start
0023b2  2801              CMP      r0,#1                 ;2285
0023b4  d01e              BEQ      |L1.9204|
0023b6  7860              LDRB     r0,[r4,#1]            ;2285  ; kb_start
0023b8  2801              CMP      r0,#1                 ;2285
0023ba  d01b              BEQ      |L1.9204|
0023bc  f898001c          LDRB     r0,[r8,#0x1c]         ;2285  ; kb_start_ips
0023c0  2801              CMP      r0,#1                 ;2285
0023c2  d017              BEQ      |L1.9204|
;;;2288   		}
;;;2289   	else kb_cnt_1lev=0;
0023c4  f8a85052          STRH     r5,[r8,#0x52]
                  |L1.9160|
;;;2290   	}
;;;2291   
;;;2292   if(kb_cnt_1lev)
0023c8  4641              MOV      r1,r8
0023ca  f9b80052          LDRSH    r0,[r8,#0x52]  ; kb_cnt_1lev
;;;2293   	{
;;;2294   	kb_cnt_1lev--;
;;;2295   
;;;2296   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2297   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2298   
;;;2299   
;;;2300   	if(kb_cnt_1lev==5)
;;;2301   		{
;;;2302   		ibat[0]=abs(bat[0]._Ib);
0023ce  f8df8398          LDR      r8,|L1.10088|
0023d2  2800              CMP      r0,#0                 ;2292
0023d4  d07e              BEQ      |L1.9428|
0023d6  f1a00001          SUB      r0,r0,#1              ;2294
0023da  b200              SXTH     r0,r0                 ;2294
0023dc  468b              MOV      r11,r1                ;2294
0023de  f8a10052          STRH     r0,[r1,#0x52]         ;2294
0023e2  2805              CMP      r0,#5                 ;2296
0023e4  dd09              BLE      |L1.9210|
0023e6  230f              MOVS     r3,#0xf               ;2296
0023e8  221e              MOVS     r2,#0x1e              ;2296
0023ea  2164              MOVS     r1,#0x64              ;2296
0023ec  20e1              MOVS     r0,#0xe1              ;2296
0023ee  f7fffffe          BL       mess_send
0023f2  e00a              B        |L1.9226|
                  |L1.9204|
0023f4  f8a87052          STRH     r7,[r8,#0x52]         ;2287
0023f8  e7e6              B        |L1.9160|
                  |L1.9210|
0023fa  2800              CMP      r0,#0                 ;2297
0023fc  dd05              BLE      |L1.9226|
0023fe  230f              MOVS     r3,#0xf               ;2297
002400  221e              MOVS     r2,#0x1e              ;2297
002402  2169              MOVS     r1,#0x69              ;2297
002404  20e1              MOVS     r0,#0xe1              ;2297
002406  f7fffffe          BL       mess_send
                  |L1.9226|
00240a  f8bb0052          LDRH     r0,[r11,#0x52]        ;2300  ; kb_cnt_1lev
00240e  2805              CMP      r0,#5                 ;2300
002410  d111              BNE      |L1.9270|
002412  f9b60008          LDRSH    r0,[r6,#8]  ; bat
002416  f7fffffe          BL       abs
00241a  f8a80000          STRH     r0,[r8,#0]
;;;2303   		ibat[1]=abs(bat[1]._Ib);
00241e  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
002422  f7fffffe          BL       abs
002426  f8a80002          STRH     r0,[r8,#2]
;;;2304   		ibat_ips=abs(Ib_ips_termokompensat);
00242a  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00242e  f7fffffe          BL       abs
002432  f8ab0058          STRH     r0,[r11,#0x58]
                  |L1.9270|
;;;2305   		}
;;;2306   	
;;;2307   	if(kb_cnt_1lev==0)
002436  48cc              LDR      r0,|L1.10088|
002438  3894              SUBS     r0,r0,#0x94
00243a  f8b00052          LDRH     r0,[r0,#0x52]  ; kb_cnt_1lev
00243e  2800              CMP      r0,#0
002440  d158              BNE      |L1.9460|
;;;2308   		{
;;;2309   		ibat_[0]=abs(bat[0]._Ib);
002442  f9b60008          LDRSH    r0,[r6,#8]  ; bat
002446  f7fffffe          BL       abs
00244a  f8dfb31c          LDR      r11,|L1.10088|
00244e  f10b0b04          ADD      r11,r11,#4
002452  f8ab0000          STRH     r0,[r11,#0]
;;;2310   		ibat_[1]=abs(bat[1]._Ib);
002456  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
00245a  f7fffffe          BL       abs
00245e  f8ab0002          STRH     r0,[r11,#2]
;;;2311   		ibat_ips_=abs(Ib_ips_termokompensat);
002462  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
002466  f7fffffe          BL       abs
00246a  f1ab0a98          SUB      r10,r11,#0x98
00246e  f8aa005a          STRH     r0,[r10,#0x5a]
;;;2312   
;;;2313   		kb_cnt_2lev=0;
002472  f8aa5054          STRH     r5,[r10,#0x54]
;;;2314   
;;;2315   
;;;2316   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
002476  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
00247a  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
00247e  4408              ADD      r0,r0,r1
002480  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002484  4288              CMP      r0,r1
002486  da02              BGE      |L1.9358|
002488  7820              LDRB     r0,[r4,#0]  ; kb_start
00248a  2801              CMP      r0,#1
00248c  d034              BEQ      |L1.9464|
                  |L1.9358|
;;;2317   			{
;;;2318   			kb_cnt_2lev=10;  
;;;2319   			}
;;;2320   		else if(bat[0]._Ub>200)
00248e  f9b60002          LDRSH    r0,[r6,#2]  ; bat
002492  28c8              CMP      r0,#0xc8
002494  dd04              BLE      |L1.9376|
;;;2321   			{
;;;2322   			kb_start[0]=0;
002496  7025              STRB     r5,[r4,#0]
;;;2323   			avar_bat_hndl(0,0);
002498  2100              MOVS     r1,#0
00249a  4608              MOV      r0,r1
00249c  f7fffffe          BL       avar_bat_hndl
                  |L1.9376|
;;;2324   			}
;;;2325   		
;;;2326   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0024a0  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0024a4  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0024a8  4408              ADD      r0,r0,r1
0024aa  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0024ae  4288              CMP      r0,r1
0024b0  da02              BGE      |L1.9400|
0024b2  7860              LDRB     r0,[r4,#1]  ; kb_start
0024b4  2801              CMP      r0,#1
0024b6  d022              BEQ      |L1.9470|
                  |L1.9400|
;;;2327   			{
;;;2328   			kb_cnt_2lev=10;     
;;;2329   			}
;;;2330   		else  if(bat[1]._Ub>200)
0024b8  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
0024bc  28c8              CMP      r0,#0xc8
0024be  dd04              BLE      |L1.9418|
;;;2331   			{
;;;2332   			kb_start[1]=0;
0024c0  7065              STRB     r5,[r4,#1]
;;;2333   			avar_bat_hndl(1,0);
0024c2  2100              MOVS     r1,#0
0024c4  2001              MOVS     r0,#1
0024c6  f7fffffe          BL       avar_bat_hndl
                  |L1.9418|
;;;2334   			}
;;;2335   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2336   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
0024ca  f9ba0058          LDRSH    r0,[r10,#0x58]  ; ibat_ips
0024ce  f9ba105a          LDRSH    r1,[r10,#0x5a]  ; ibat_ips_
0024d2  e000              B        |L1.9430|
                  |L1.9428|
0024d4  e01c              B        |L1.9488|
                  |L1.9430|
0024d6  4408              ADD      r0,r0,r1
0024d8  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0024dc  4288              CMP      r0,r1
0024de  da09              BGE      |L1.9460|
0024e0  f89a001c          LDRB     r0,[r10,#0x1c]  ; kb_start_ips
0024e4  2801              CMP      r0,#1
0024e6  d105              BNE      |L1.9460|
;;;2337   			{
;;;2338   			if(KB_ALGORITM==1)
0024e8  48a0              LDR      r0,|L1.10092|
0024ea  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
0024ec  2801              CMP      r0,#1
0024ee  d009              BEQ      |L1.9476|
;;;2339   				{
;;;2340   				avar_bat_ips_hndl(1);
;;;2341   				kb_start_ips=0;
;;;2342   				}
;;;2343   			else
;;;2344   				{
;;;2345   				kb_cnt_2lev=10;     
0024f0  f8aa7054          STRH     r7,[r10,#0x54]
                  |L1.9460|
;;;2346   				}
;;;2347   			}
;;;2348   #endif
;;;2349   		}	
;;;2350   
;;;2351   
;;;2352   	}
;;;2353   else if(kb_cnt_2lev)
;;;2354   	{
;;;2355   	kb_cnt_2lev--;
;;;2356   
;;;2357   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2358   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2359   
;;;2360   
;;;2361   	if(kb_cnt_2lev==5)
;;;2362   		{
;;;2363   		ibat[0]=abs(bat[0]._Ib);
;;;2364   		ibat[1]=abs(bat[1]._Ib);
;;;2365   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2366   		}
;;;2367   	
;;;2368   	if(kb_cnt_2lev==0)
;;;2369   		{
;;;2370   		ibat_[0]=abs(bat[0]._Ib);
;;;2371   		ibat_[1]=abs(bat[1]._Ib);
;;;2372   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2373   
;;;2374   		kb_full_ver=0;
;;;2375   
;;;2376   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2377   			{
;;;2378   			kb_full_ver=1;  
;;;2379   			}
;;;2380   		else if(bat[0]._Ub>200)			
;;;2381   			{
;;;2382   			kb_start[0]=0;
;;;2383   			avar_bat_hndl(0,0);
;;;2384   			}
;;;2385   
;;;2386   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2387   			{
;;;2388   			kb_full_ver=1;     
;;;2389   			}
;;;2390   		else	if(bat[1]._Ub>200)		
;;;2391   			{
;;;2392   			kb_start[1]=0;
;;;2393   			avar_bat_hndl(1,0);
;;;2394   			}
;;;2395   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2396   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2397   			{
;;;2398   			if(KB_ALGORITM==2)
;;;2399   				{
;;;2400   				avar_bat_ips_hndl(1);
;;;2401   				kb_start_ips=0;
;;;2402   				}
;;;2403   			else
;;;2404   				{
;;;2405   				kb_full_ver=1;     
;;;2406   				}
;;;2407   			}
;;;2408   #endif
;;;2409   		}	
;;;2410   	}
;;;2411   
;;;2412   else if(kb_full_ver)
;;;2413   	{
;;;2414   	
;;;2415   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2416   
;;;2417   	if( abs(bat[0]._Ib) > IKB ) 
;;;2418   		{
;;;2419   		if(kb_start[0]==1)
;;;2420   			{
;;;2421   			kb_start[0]=0;
;;;2422   			avar_bat_hndl(0,0);
;;;2423   			}
;;;2424   		}
;;;2425   
;;;2426   	if( abs(bat[1]._Ib) > IKB ) 
;;;2427   		{
;;;2428   		if(kb_start[1]==1)
;;;2429   			{
;;;2430   			kb_start[1]=0;
;;;2431   			avar_bat_hndl(1,0);
;;;2432   			}
;;;2433   		}
;;;2434   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2435   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2436   		{
;;;2437   		if(kb_start_ips==1)
;;;2438   			{
;;;2439   			kb_start_ips=0;
;;;2440   			avar_bat_ips_hndl(0);
;;;2441   			}
;;;2442   		}
;;;2443   #endif
;;;2444   
;;;2445   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2446   		{
;;;2447   		kb_full_ver=0;
;;;2448   		}
;;;2449   
;;;2450   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2451   		{
;;;2452   		kb_full_ver=0;
;;;2453   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2454   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2455   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2456   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2457   #endif
;;;2458   		}
;;;2459   	}
;;;2460   
;;;2461   }
0024f4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9464|
0024f8  f8aa7054          STRH     r7,[r10,#0x54]        ;2318
0024fc  e7d0              B        |L1.9376|
                  |L1.9470|
0024fe  f8aa7054          STRH     r7,[r10,#0x54]        ;2328
002502  e7e2              B        |L1.9418|
                  |L1.9476|
002504  2001              MOVS     r0,#1                 ;2340
002506  f7fffffe          BL       avar_bat_ips_hndl
00250a  f88a501c          STRB     r5,[r10,#0x1c]        ;2341
                  |L1.9486|
00250e  e7f1              B        |L1.9460|
                  |L1.9488|
002510  f9b10054          LDRSH    r0,[r1,#0x54]         ;2353  ; kb_cnt_2lev
002514  b3f0              CBZ      r0,|L1.9620|
002516  f1a00001          SUB      r0,r0,#1              ;2355
00251a  b200              SXTH     r0,r0                 ;2355
00251c  460f              MOV      r7,r1                 ;2355
00251e  f8a10054          STRH     r0,[r1,#0x54]         ;2355
002522  2805              CMP      r0,#5                 ;2357
002524  dd06              BLE      |L1.9524|
002526  230f              MOVS     r3,#0xf               ;2357
002528  22c8              MOVS     r2,#0xc8              ;2357
00252a  2164              MOVS     r1,#0x64              ;2357
00252c  20e1              MOVS     r0,#0xe1              ;2357
00252e  f7fffffe          BL       mess_send
002532  e007              B        |L1.9540|
                  |L1.9524|
002534  2800              CMP      r0,#0                 ;2358
002536  dd05              BLE      |L1.9540|
002538  230f              MOVS     r3,#0xf               ;2358
00253a  22c8              MOVS     r2,#0xc8              ;2358
00253c  2169              MOVS     r1,#0x69              ;2358
00253e  20e1              MOVS     r0,#0xe1              ;2358
002540  f7fffffe          BL       mess_send
                  |L1.9540|
002544  f8b70054          LDRH     r0,[r7,#0x54]         ;2361  ; kb_cnt_2lev
002548  2805              CMP      r0,#5                 ;2361
00254a  d111              BNE      |L1.9584|
00254c  f9b60008          LDRSH    r0,[r6,#8]            ;2363  ; bat
002550  f7fffffe          BL       abs
002554  f8a80000          STRH     r0,[r8,#0]            ;2363
002558  f9b60054          LDRSH    r0,[r6,#0x54]         ;2364  ; bat
00255c  f7fffffe          BL       abs
002560  f8a80002          STRH     r0,[r8,#2]            ;2364
002564  f9ba0000          LDRSH    r0,[r10,#0]           ;2365  ; Ib_ips_termokompensat
002568  f7fffffe          BL       abs
00256c  f8a70058          STRH     r0,[r7,#0x58]         ;2365
                  |L1.9584|
002570  487d              LDR      r0,|L1.10088|
002572  3894              SUBS     r0,r0,#0x94           ;2368
002574  f8b00054          LDRH     r0,[r0,#0x54]         ;2368  ; kb_cnt_2lev
002578  2800              CMP      r0,#0                 ;2368
                  |L1.9594|
00257a  d1bb              BNE      |L1.9460|
00257c  f9b60008          LDRSH    r0,[r6,#8]            ;2370  ; bat
002580  f7fffffe          BL       abs
002584  4f78              LDR      r7,|L1.10088|
002586  1d3f              ADDS     r7,r7,#4              ;2370
002588  8038              STRH     r0,[r7,#0]            ;2370
00258a  f9b60054          LDRSH    r0,[r6,#0x54]         ;2371  ; bat
00258e  f7fffffe          BL       abs
002592  e000              B        |L1.9622|
                  |L1.9620|
002594  e055              B        |L1.9794|
                  |L1.9622|
002596  8078              STRH     r0,[r7,#2]            ;2371
002598  f9ba0000          LDRSH    r0,[r10,#0]           ;2372  ; Ib_ips_termokompensat
00259c  f7fffffe          BL       abs
0025a0  f1a70a98          SUB      r10,r7,#0x98          ;2372
0025a4  f8aa005a          STRH     r0,[r10,#0x5a]        ;2372
0025a8  f88a501b          STRB     r5,[r10,#0x1b]        ;2374
0025ac  f9b80000          LDRSH    r0,[r8,#0]            ;2376  ; ibat
0025b0  f9b71000          LDRSH    r1,[r7,#0]            ;2376  ; ibat_
0025b4  4408              ADD      r0,r0,r1              ;2376
0025b6  f9b91000          LDRSH    r1,[r9,#0]            ;2376  ; IKB
0025ba  4288              CMP      r0,r1                 ;2376
0025bc  da02              BGE      |L1.9668|
0025be  7820              LDRB     r0,[r4,#0]            ;2376  ; kb_start
0025c0  2801              CMP      r0,#1                 ;2376
0025c2  d032              BEQ      |L1.9770|
                  |L1.9668|
0025c4  f9b60002          LDRSH    r0,[r6,#2]            ;2380  ; bat
0025c8  28c8              CMP      r0,#0xc8              ;2380
0025ca  dd04              BLE      |L1.9686|
0025cc  7025              STRB     r5,[r4,#0]            ;2382
0025ce  2100              MOVS     r1,#0                 ;2383
0025d0  4608              MOV      r0,r1                 ;2383
0025d2  f7fffffe          BL       avar_bat_hndl
                  |L1.9686|
0025d6  f9b80002          LDRSH    r0,[r8,#2]            ;2386  ; ibat
0025da  f9b71002          LDRSH    r1,[r7,#2]            ;2386  ; ibat_
0025de  4408              ADD      r0,r0,r1              ;2386
0025e0  f9b91000          LDRSH    r1,[r9,#0]            ;2386  ; IKB
0025e4  4288              CMP      r0,r1                 ;2386
0025e6  da02              BGE      |L1.9710|
0025e8  7860              LDRB     r0,[r4,#1]            ;2386  ; kb_start
0025ea  2801              CMP      r0,#1                 ;2386
0025ec  d020              BEQ      |L1.9776|
                  |L1.9710|
0025ee  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2390  ; bat
0025f2  28c8              CMP      r0,#0xc8              ;2390
0025f4  dd04              BLE      |L1.9728|
0025f6  7065              STRB     r5,[r4,#1]            ;2392
0025f8  2100              MOVS     r1,#0                 ;2393
0025fa  2001              MOVS     r0,#1                 ;2393
0025fc  f7fffffe          BL       avar_bat_hndl
                  |L1.9728|
002600  f9ba0058          LDRSH    r0,[r10,#0x58]        ;2396  ; ibat_ips
002604  f9ba105a          LDRSH    r1,[r10,#0x5a]        ;2396  ; ibat_ips_
002608  4408              ADD      r0,r0,r1              ;2396
00260a  f9b91000          LDRSH    r1,[r9,#0]            ;2396  ; IKB
00260e  4288              CMP      r0,r1                 ;2396
002610  f6bfaf7d          BGE      |L1.9486|
002614  f89a001c          LDRB     r0,[r10,#0x1c]        ;2396  ; kb_start_ips
002618  2801              CMP      r0,#1                 ;2396
00261a  d1ae              BNE      |L1.9594|
00261c  4853              LDR      r0,|L1.10092|
00261e  8800              LDRH     r0,[r0,#0]            ;2398  ; KB_ALGORITM
002620  2802              CMP      r0,#2                 ;2398
002622  d008              BEQ      |L1.9782|
002624  f88ab01b          STRB     r11,[r10,#0x1b]       ;2405
                  |L1.9768|
002628  e764              B        |L1.9460|
                  |L1.9770|
00262a  f88ab01b          STRB     r11,[r10,#0x1b]       ;2378
00262e  e7d2              B        |L1.9686|
                  |L1.9776|
002630  f88ab01b          STRB     r11,[r10,#0x1b]       ;2388
002634  e7e4              B        |L1.9728|
                  |L1.9782|
002636  2001              MOVS     r0,#1                 ;2400
002638  f7fffffe          BL       avar_bat_ips_hndl
00263c  f88a501c          STRB     r5,[r10,#0x1c]        ;2401
002640  e758              B        |L1.9460|
                  |L1.9794|
002642  7ec8              LDRB     r0,[r1,#0x1b]         ;2412  ; kb_full_ver
002644  4688              MOV      r8,r1                 ;2412
002646  2800              CMP      r0,#0                 ;2412
002648  d0ee              BEQ      |L1.9768|
00264a  230f              MOVS     r3,#0xf               ;2415
00264c  2200              MOVS     r2,#0                 ;2415
00264e  216e              MOVS     r1,#0x6e              ;2415
002650  20e1              MOVS     r0,#0xe1              ;2415
002652  f7fffffe          BL       mess_send
002656  f9b60008          LDRSH    r0,[r6,#8]            ;2417  ; bat
00265a  f7fffffe          BL       abs
00265e  f9b91000          LDRSH    r1,[r9,#0]            ;2417  ; IKB
002662  4288              CMP      r0,r1                 ;2417
002664  dd07              BLE      |L1.9846|
002666  7820              LDRB     r0,[r4,#0]            ;2419  ; kb_start
002668  2801              CMP      r0,#1                 ;2419
00266a  d104              BNE      |L1.9846|
00266c  7025              STRB     r5,[r4,#0]            ;2421
00266e  2100              MOVS     r1,#0                 ;2422
002670  4608              MOV      r0,r1                 ;2422
002672  f7fffffe          BL       avar_bat_hndl
                  |L1.9846|
002676  f9b60054          LDRSH    r0,[r6,#0x54]         ;2426  ; bat
00267a  f7fffffe          BL       abs
00267e  f9b91000          LDRSH    r1,[r9,#0]            ;2426  ; IKB
002682  4288              CMP      r0,r1                 ;2426
002684  dd06              BLE      |L1.9876|
002686  7860              LDRB     r0,[r4,#1]            ;2428  ; kb_start
002688  2801              CMP      r0,#1                 ;2428
00268a  d103              BNE      |L1.9876|
00268c  7065              STRB     r5,[r4,#1]            ;2430
00268e  2100              MOVS     r1,#0                 ;2431
002690  f7fffffe          BL       avar_bat_hndl
                  |L1.9876|
002694  f9ba0000          LDRSH    r0,[r10,#0]           ;2435  ; Ib_ips_termokompensat
002698  f7fffffe          BL       abs
00269c  f9b91000          LDRSH    r1,[r9,#0]            ;2435  ; IKB
0026a0  4288              CMP      r0,r1                 ;2435
0026a2  dd08              BLE      |L1.9910|
0026a4  f898001c          LDRB     r0,[r8,#0x1c]         ;2437  ; kb_start_ips
0026a8  2801              CMP      r0,#1                 ;2437
0026aa  d104              BNE      |L1.9910|
0026ac  f888501c          STRB     r5,[r8,#0x1c]         ;2439
0026b0  2000              MOVS     r0,#0                 ;2440
0026b2  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.9910|
0026b6  7820              LDRB     r0,[r4,#0]            ;2445  ; kb_start
0026b8  b930              CBNZ     r0,|L1.9928|
0026ba  7860              LDRB     r0,[r4,#1]            ;2445  ; kb_start
0026bc  b920              CBNZ     r0,|L1.9928|
0026be  f898001c          LDRB     r0,[r8,#0x1c]         ;2445  ; kb_start_ips
0026c2  b908              CBNZ     r0,|L1.9928|
0026c4  f888501b          STRB     r5,[r8,#0x1b]         ;2447
                  |L1.9928|
0026c8  20e6              MOVS     r0,#0xe6              ;2450
0026ca  f7fffffe          BL       mess_find
0026ce  b118              CBZ      r0,|L1.9944|
0026d0  4827              LDR      r0,|L1.10096|
0026d2  6800              LDR      r0,[r0,#0]            ;2450  ; mess_data
0026d4  28e7              CMP      r0,#0xe7              ;2450
0026d6  d00a              BEQ      |L1.9966|
                  |L1.9944|
0026d8  4826              LDR      r0,|L1.10100|
0026da  4927              LDR      r1,|L1.10104|
0026dc  f9b00000          LDRSH    r0,[r0,#0]            ;2450  ; USIGN
0026e0  f9b11000          LDRSH    r1,[r1,#0]            ;2450  ; load_U
0026e4  eb000080          ADD      r0,r0,r0,LSL #2       ;2450
0026e8  ebb10f40          CMP      r1,r0,LSL #1          ;2450
                  |L1.9964|
0026ec  da9c              BGE      |L1.9768|
                  |L1.9966|
0026ee  f888501b          STRB     r5,[r8,#0x1b]         ;2452
0026f2  7820              LDRB     r0,[r4,#0]            ;2453  ; kb_start
0026f4  4d21              LDR      r5,|L1.10108|
0026f6  2801              CMP      r0,#1                 ;2453
0026f8  d10f              BNE      |L1.10010|
0026fa  f9b90000          LDRSH    r0,[r9,#0]            ;2453  ; IKB
0026fe  0040              LSLS     r0,r0,#1              ;2453
002700  fb90f1f7          SDIV     r1,r0,r7              ;2453
002704  f9b50000          LDRSH    r0,[r5,#0]            ;2453  ; load_I
002708  4281              CMP      r1,r0                 ;2453
00270a  da06              BGE      |L1.10010|
00270c  f896003d          LDRB     r0,[r6,#0x3d]         ;2453  ; bat
002710  07c0              LSLS     r0,r0,#31             ;2453
002712  d102              BNE      |L1.10010|
002714  2101              MOVS     r1,#1                 ;2453
002716  f7fffffe          BL       avar_bat_hndl
                  |L1.10010|
00271a  7860              LDRB     r0,[r4,#1]            ;2454  ; kb_start
00271c  2801              CMP      r0,#1                 ;2454
00271e  d110              BNE      |L1.10050|
002720  f9b90000          LDRSH    r0,[r9,#0]            ;2454  ; IKB
002724  f9b51000          LDRSH    r1,[r5,#0]            ;2454  ; load_I
002728  0040              LSLS     r0,r0,#1              ;2454
00272a  fb90f0f7          SDIV     r0,r0,r7              ;2454
00272e  4288              CMP      r0,r1                 ;2454
002730  da07              BGE      |L1.10050|
002732  f8960089          LDRB     r0,[r6,#0x89]         ;2454  ; bat
002736  07c0              LSLS     r0,r0,#31             ;2454
002738  d103              BNE      |L1.10050|
00273a  2101              MOVS     r1,#1                 ;2454
00273c  4608              MOV      r0,r1                 ;2454
00273e  f7fffffe          BL       avar_bat_hndl
                  |L1.10050|
002742  f898001c          LDRB     r0,[r8,#0x1c]         ;2456  ; kb_start_ips
002746  2801              CMP      r0,#1                 ;2456
                  |L1.10056|
002748  f47faee1          BNE      |L1.9486|
00274c  f9b90000          LDRSH    r0,[r9,#0]            ;2456  ; IKB
002750  0040              LSLS     r0,r0,#1              ;2456
002752  fb90f0f7          SDIV     r0,r0,r7              ;2456
002756  e013              B        |L1.10112|
                  |L1.10072|
                          DCD      ips_bat_av_vzvod
                  |L1.10076|
                          DCD      bat_ips
                  |L1.10080|
                          DCD      net_av
                  |L1.10084|
                          DCD      sp_ch_stat
                  |L1.10088|
                          DCD      ||area_number.25||+0x94
                  |L1.10092|
                          DCD      KB_ALGORITM
                  |L1.10096|
                          DCD      mess_data
                  |L1.10100|
                          DCD      USIGN
                  |L1.10104|
                          DCD      load_U
                  |L1.10108|
                          DCD      load_I
                  |L1.10112|
002780  f9b51000          LDRSH    r1,[r5,#0]            ;2456  ; load_I
002784  4288              CMP      r0,r1                 ;2456
002786  dab1              BGE      |L1.9964|
002788  48ff              LDR      r0,|L1.11144|
00278a  f890003d          LDRB     r0,[r0,#0x3d]         ;2456  ; bat_ips
00278e  07c0              LSLS     r0,r0,#31             ;2456
002790  d1da              BNE      |L1.10056|
002792  e8bd5ff0          POP      {r4-r12,lr}           ;2456
002796  2001              MOVS     r0,#1                 ;2456
002798  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2462   
                          ENDP

                  samokalibr_hndl PROC
;;;2471   //-----------------------------------------------
;;;2472   void samokalibr_hndl(void)
00279c  4770              BX       lr
;;;2473   {
;;;2474   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2475   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2476   
;;;2477   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2478   	{
;;;2479   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2480   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2481   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2482   	} 
;;;2483   
;;;2484   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2485   	{
;;;2486   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2487   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2488   	
;;;2489   	}
;;;2490   #endif	 	
;;;2491   }
;;;2492   
                          ENDP

                  ubat_old_drv PROC
;;;2495   //-----------------------------------------------
;;;2496   void ubat_old_drv(void)
00279e  b510              PUSH     {r4,lr}
;;;2497   {        
;;;2498   bat_u_old_cnt++;
0027a0  4cfa              LDR      r4,|L1.11148|
0027a2  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
0027a4  f1000001          ADD      r0,r0,#1
0027a8  8020              STRH     r0,[r4,#0]
;;;2499   gran_ring(&bat_u_old_cnt,0,8);
0027aa  f04f0208          MOV      r2,#8
0027ae  f04f0100          MOV      r1,#0
0027b2  4620              MOV      r0,r4
0027b4  f7fffffe          BL       gran_ring
;;;2500   
;;;2501   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
0027b8  49f5              LDR      r1,|L1.11152|
0027ba  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
0027be  eb010040          ADD      r0,r1,r0,LSL #1
0027c2  884a              LDRH     r2,[r1,#2]  ; bat
0027c4  8402              STRH     r2,[r0,#0x20]
;;;2502   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
0027c6  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
0027ca  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2503   }
0027ce  bd10              POP      {r4,pc}
;;;2504   
                          ENDP

                  unet_drv PROC
;;;2505   //-----------------------------------------------
;;;2506   void unet_drv(void)
0027d0  b570              PUSH     {r4-r6,lr}
;;;2507   {
;;;2508   if(net_U<UMN)
0027d2  4df0              LDR      r5,|L1.11156|
0027d4  48f0              LDR      r0,|L1.11160|
;;;2509   	{
;;;2510   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
0027d6  4af1              LDR      r2,|L1.11164|
0027d8  f9b51000          LDRSH    r1,[r5,#0]            ;2508  ; net_U
0027dc  f9b03000          LDRSH    r3,[r0,#0]            ;2508  ; UMN
0027e0  f9920000          LDRSB    r0,[r2,#0]
0027e4  4299              CMP      r1,r3                 ;2508
0027e6  da1f              BGE      |L1.10280|
;;;2511   		{
;;;2512   		unet_drv_cnt++;
;;;2513   		if(unet_drv_cnt>=10)
;;;2514   			{
;;;2515   			net_Ustore=net_U;
0027e8  4ced              LDR      r4,|L1.11168|
0027ea  280a              CMP      r0,#0xa               ;2510
0027ec  da0f              BGE      |L1.10254|
0027ee  4bed              LDR      r3,|L1.11172|
0027f0  f9b33000          LDRSH    r3,[r3,#0]            ;2510  ; main_1Hz_cnt
0027f4  2b0f              CMP      r3,#0xf               ;2510
0027f6  dd0a              BLE      |L1.10254|
0027f8  f1000001          ADD      r0,r0,#1              ;2512
0027fc  b240              SXTB     r0,r0                 ;2512
0027fe  7010              STRB     r0,[r2,#0]            ;2512
002800  280a              CMP      r0,#0xa               ;2513
002802  db09              BLT      |L1.10264|
002804  8021              STRH     r1,[r4,#0]
;;;2516   		 	avar_unet_hndl(1);
002806  2001              MOVS     r0,#1
002808  f7fffffe          BL       avar_unet_hndl
00280c  e004              B        |L1.10264|
                  |L1.10254|
;;;2517   			
;;;2518   			}
;;;2519   		}
;;;2520   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
00280e  280a              CMP      r0,#0xa
002810  db02              BLT      |L1.10264|
002812  f04f000a          MOV      r0,#0xa
002816  7010              STRB     r0,[r2,#0]
                  |L1.10264|
;;;2521   
;;;2522   	if(net_U<net_Ustore) net_Ustore=net_U;	
002818  f9b50000          LDRSH    r0,[r5,#0]  ; net_U
00281c  f9b41000          LDRSH    r1,[r4,#0]  ; net_Ustore
002820  4288              CMP      r0,r1
002822  da00              BGE      |L1.10278|
002824  8020              STRH     r0,[r4,#0]
                  |L1.10278|
;;;2523   	}
;;;2524   
;;;2525   else if(net_U>UMN)
;;;2526   	{                 
;;;2527   	if(unet_drv_cnt)
;;;2528   		{
;;;2529   		unet_drv_cnt--;
;;;2530   		if(unet_drv_cnt<=0)
;;;2531   			{
;;;2532   			avar_unet_hndl(0);
;;;2533   			}
;;;2534   		}
;;;2535   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2536   	
;;;2537   	}
;;;2538   
;;;2539   }
002826  bd70              POP      {r4-r6,pc}
                  |L1.10280|
002828  ddfd              BLE      |L1.10278|
00282a  2800              CMP      r0,#0                 ;2527
00282c  d0fb              BEQ      |L1.10278|
00282e  f1a00001          SUB      r0,r0,#1              ;2529
002832  b240              SXTB     r0,r0                 ;2529
002834  7010              STRB     r0,[r2,#0]            ;2529
002836  2800              CMP      r0,#0                 ;2530
002838  dcf5              BGT      |L1.10278|
00283a  e8bd4070          POP      {r4-r6,lr}            ;2532
00283e  2000              MOVS     r0,#0                 ;2532
002840  f7ffbffe          B.W      avar_unet_hndl
;;;2540   
                          ENDP

                  matemat PROC
;;;2542   //-----------------------------------------------
;;;2543   void matemat(void)
002844  e92d4ff0          PUSH     {r4-r11,lr}
;;;2544   {
002848  b087              SUB      sp,sp,#0x1c
;;;2545   //signed short temp_SS;
;;;2546   signed long temp_SL/*,temp_SL_*/;
;;;2547   char /*temp,*/i;
;;;2548   //signed short temp_SS;
;;;2549   
;;;2550   #ifdef UKU_MGTS
;;;2551   //напряжение сети
;;;2552   temp_SL=(signed long)net_buff_;
;;;2553   temp_SL*=Kunet;
;;;2554   temp_SL/=110000L;
;;;2555   net_U=(signed short)temp_SL;
;;;2556   #endif
;;;2557   
;;;2558   #ifdef UKU_RSTKM
;;;2559   //напряжение сети
;;;2560   temp_SL=(signed long)net_buff_;
;;;2561   temp_SL*=Kunet;
;;;2562   temp_SL/=110000L;
;;;2563   net_U=(signed short)temp_SL;
;;;2564   #endif
;;;2565   
;;;2566   #ifdef UKU_3U
;;;2567   //напряжение сети
;;;2568   temp_SL=(signed long)net_buff_;
;;;2569   temp_SL*=Kunet;
;;;2570   temp_SL/=36000L;
;;;2571   net_U=(signed short)temp_SL;
;;;2572   #endif
;;;2573   
;;;2574   #ifdef UKU_6U
;;;2575   //напряжение сети
;;;2576   
;;;2577   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2578   	{
;;;2579   
;;;2580   	if(bps[11]._device==dNET_METR)
;;;2581   		{
;;;2582   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2583   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2584   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2585   
;;;2586   		temp_SL=(signed long)net_metr_buff_[0];
;;;2587   		temp_SL*=KunetA;
;;;2588   		temp_SL/=6000L;
;;;2589   		net_Ua=(signed short)temp_SL;
;;;2590   	
;;;2591   		temp_SL=(signed long)net_metr_buff_[1];
;;;2592   		temp_SL*=KunetB;
;;;2593   		temp_SL/=6000L;
;;;2594   		net_Ub=(signed short)temp_SL;
;;;2595   	
;;;2596   		temp_SL=(signed long)net_metr_buff_[2];
;;;2597   		temp_SL*=KunetC;
;;;2598   		temp_SL/=6000L;
;;;2599   		net_Uc=(signed short)temp_SL;
;;;2600   		}
;;;2601   	else
;;;2602   		{
;;;2603   		temp_SL=(signed long)net_buff_;
;;;2604   		temp_SL*=KunetA;
;;;2605   		temp_SL/=110000L;
;;;2606   		net_Ua=(signed short)temp_SL;
;;;2607   	
;;;2608   		temp_SL=(signed long)adc_buff_[3];
;;;2609   		temp_SL*=KunetB;
;;;2610   		temp_SL/=6000L;
;;;2611   		net_Ub=(signed short)temp_SL;
;;;2612   	
;;;2613   		temp_SL=(signed long)adc_buff_[10];
;;;2614   		temp_SL*=KunetC;
;;;2615   		temp_SL/=6000L;
;;;2616   		net_Uc=(signed short)temp_SL;
;;;2617   		}
;;;2618   
;;;2619   	net_U=net_Ua;
;;;2620   	if(net_Ub<net_U)net_U=net_Ub;
;;;2621   	if(net_Uc<net_U)net_U=net_Uc;
;;;2622   	}
;;;2623   else 
;;;2624   	{
;;;2625   	temp_SL=(signed long)net_buff_;
;;;2626   	temp_SL*=Kunet;
;;;2627   	temp_SL/=110000L;
;;;2628   	net_U=(signed short)temp_SL;
;;;2629   	}
;;;2630   
;;;2631   
;;;2632   
;;;2633   
;;;2634   #endif
;;;2635   
;;;2636   #ifdef UKU_GLONASS
;;;2637   //напряжение сети
;;;2638   temp_SL=(signed long)net_buff_;
;;;2639   temp_SL*=Kunet;
;;;2640   temp_SL/=110000L;
;;;2641   net_U=(signed short)temp_SL;
;;;2642   #endif
;;;2643   
;;;2644   #ifdef UKU_KONTUR
;;;2645   //напряжение сети
;;;2646   temp_SL=(signed long)net_buff_;
;;;2647   temp_SL*=Kunet;
;;;2648   temp_SL/=110000L;
;;;2649   net_U=(signed short)temp_SL;
;;;2650   #endif
;;;2651   
;;;2652   #ifdef IPS_SGEP_GAZPROM
;;;2653   //напряжение сети
;;;2654   temp_SL=(signed long)net_buff_;
;;;2655   temp_SL*=Kunet;
;;;2656   temp_SL/=110000L;
;;;2657   net_U=(signed short)temp_SL;
;;;2658   #endif
;;;2659   
;;;2660   #ifdef UKU_220_V2
;;;2661   //напряжение сети
;;;2662   
;;;2663   if(AUSW_MAIN==22033)
;;;2664   	{
;;;2665   	temp_SL=(signed long)net_buff_;
;;;2666   	temp_SL*=KunetA;
;;;2667   	temp_SL/=6000L;
;;;2668   	net_Ua=(signed short)temp_SL;
;;;2669   
;;;2670   	temp_SL=(signed long)adc_buff_[3];
;;;2671   	temp_SL*=KunetB;
;;;2672   	temp_SL/=6000L;
;;;2673   	net_Ub=(signed short)temp_SL;
;;;2674   
;;;2675   	temp_SL=(signed long)adc_buff_[10];
;;;2676   	temp_SL*=KunetC;
;;;2677   	temp_SL/=6000L;
;;;2678   	net_Uc=(signed short)temp_SL;
;;;2679   
;;;2680   	net_U=net_Ua;
;;;2681   	if(net_Ub<net_U)net_U=net_Ub;
;;;2682   	if(net_Uc<net_U)net_U=net_Uc;
;;;2683   	}
;;;2684   else
;;;2685   	{
;;;2686   	temp_SL=(signed long)net_buff_;
;;;2687   	temp_SL*=Kunet;
;;;2688   	temp_SL/=5000L;
;;;2689   	net_U=(signed short)temp_SL;
;;;2690   	}
;;;2691   #endif
;;;2692   
;;;2693   
;;;2694   #ifdef UKU_220
;;;2695   //напряжение сети
;;;2696   
;;;2697   if(AUSW_MAIN==22035)
;;;2698   	{
;;;2699   	temp_SL=(signed long)net_buff_;
;;;2700   	temp_SL*=KunetA;
;;;2701   	temp_SL/=6000L;
;;;2702   	net_Ua=(signed short)temp_SL;
;;;2703   
;;;2704   	temp_SL=(signed long)adc_buff_[3];
;;;2705   	temp_SL*=KunetB;
;;;2706   	temp_SL/=6000L;
;;;2707   	net_Ub=(signed short)temp_SL;
;;;2708   
;;;2709   	temp_SL=(signed long)adc_buff_[10];
;;;2710   	temp_SL*=KunetC;
;;;2711   	temp_SL/=6000L;
;;;2712   	net_Uc=(signed short)temp_SL;
;;;2713   
;;;2714   	net_U=net_Ua;
;;;2715   	if(net_Ub<net_U)net_U=net_Ub;
;;;2716   	if(net_Uc<net_U)net_U=net_Uc;
;;;2717   	}
;;;2718   else
;;;2719   	{
;;;2720   	temp_SL=(signed long)net_buff_;
;;;2721   	temp_SL*=Kunet;
;;;2722   	#ifdef _ACDC_
;;;2723   	temp_SL/=500L;
;;;2724   	#else
;;;2725   	temp_SL/=5000L;
;;;2726   	#endif
;;;2727   	net_U=(signed short)temp_SL;
;;;2728   	
;;;2729   	}
;;;2730   #endif
;;;2731   
;;;2732   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2733   //напряжение сети
;;;2734   
;;;2735   
;;;2736   	if(bps[11]._device==dNET_METR)
00284a  48d7              LDR      r0,|L1.11176|
;;;2737   		{
;;;2738   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2739   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2740   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2741   
;;;2742   		temp_SL=(signed long)net_metr_buff_[2];
;;;2743   		temp_SL*=KunetA;
00284c  4bd7              LDR      r3,|L1.11180|
;;;2744   		temp_SL/=6000L;
;;;2745   		net_Ua=(signed short)temp_SL;
;;;2746   	
;;;2747   		temp_SL=(signed long)net_metr_buff_[1];
;;;2748   		temp_SL*=KunetB;
00284e  49d9              LDR      r1,|L1.11188|
002850  f89003f4          LDRB     r0,[r0,#0x3f4]        ;2736  ; bps
;;;2749   		temp_SL/=6000L;
;;;2750   		net_Ub=(signed short)temp_SL;
;;;2751   	
;;;2752   		temp_SL=(signed long)net_metr_buff_[0];
;;;2753   		temp_SL*=KunetC;
002854  4ad8              LDR      r2,|L1.11192|
002856  9006              STR      r0,[sp,#0x18]         ;2743
002858  f8dfc354          LDR      r12,|L1.11184|
00285c  f9b39000          LDRSH    r9,[r3,#0]            ;2743
002860  f9b1b000          LDRSH    r11,[r1,#0]           ;2748
002864  f9b2a000          LDRSH    r10,[r2,#0]
002868  4fd4              LDR      r7,|L1.11196|
;;;2754   		temp_SL/=6000L;
;;;2755   		net_Uc=(signed short)temp_SL;
00286a  4cd5              LDR      r4,|L1.11200|
;;;2756   
;;;2757   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2758   
;;;2759   		net_U=net_Ua;
;;;2760   		if(net_Ub<net_U)net_U=net_Ub;
;;;2761   		if(net_Uc<net_U)net_U=net_Uc;
;;;2762   		}
;;;2763   	  else if(AUSW_MAIN==22033)
;;;2764   	{
;;;2765   	temp_SL=(signed long)net_buff_;
00286c  4ed5              LDR      r6,|L1.11204|
00286e  f2456511          MOV      r5,#0x5611            ;2763
002872  2807              CMP      r0,#7                 ;2736
002874  d036              BEQ      |L1.10468|
002876  4631              MOV      r1,r6
002878  f8df8338          LDR      r8,|L1.11188|
00287c  8f0a              LDRH     r2,[r1,#0x38]
00287e  4619              MOV      r1,r3                 ;2743
;;;2766   	temp_SL*=KunetA;
;;;2767   	temp_SL/=4000L;
;;;2768   	net_Ua=(signed short)temp_SL;
;;;2769   
;;;2770   	temp_SL=(signed long)adc_buff_[3];
002880  4bd2              LDR      r3,|L1.11212|
002882  f9b11000          LDRSH    r1,[r1,#0]            ;2743
002886  f9b88000          LDRSH    r8,[r8,#0]            ;2748
00288a  434a              MULS     r2,r1,r2              ;2766
00288c  f9b31006          LDRSH    r1,[r3,#6]
002890  f8df9324          LDR      r9,|L1.11192|
;;;2771   	temp_SL*=KunetB;
002894  fb01f108          MUL      r1,r1,r8
002898  f2417870          MOV      r8,#0x1770            ;2744
;;;2772   	temp_SL/=6000L;
;;;2773   	net_Ub=(signed short)temp_SL;
;;;2774   
;;;2775   	temp_SL=(signed long)adc_buff_[10];
00289c  f9b33014          LDRSH    r3,[r3,#0x14]
0028a0  f9b99000          LDRSH    r9,[r9,#0]            ;2753
0028a4  fb91f1f8          SDIV     r1,r1,r8              ;2772
;;;2776   	temp_SL*=KunetC;
0028a8  fb03f309          MUL      r3,r3,r9
;;;2777   	temp_SL/=6000L;
0028ac  fb93f3f8          SDIV     r3,r3,r8
0028b0  48c5              LDR      r0,|L1.11208|
0028b2  b209              SXTH     r1,r1                 ;2773
;;;2778   	net_Uc=(signed short)temp_SL;
0028b4  b21b              SXTH     r3,r3
0028b6  8800              LDRH     r0,[r0,#0]            ;2763  ; AUSW_MAIN
0028b8  42a8              CMP      r0,r5                 ;2763
0028ba  d154              BNE      |L1.10598|
0028bc  f44f607a          MOV      r0,#0xfa0             ;2767
0028c0  fb92f0f0          SDIV     r0,r2,r0              ;2767
0028c4  b200              SXTH     r0,r0                 ;2768
0028c6  f8ac0000          STRH     r0,[r12,#0]           ;2768
0028ca  8039              STRH     r1,[r7,#0]            ;2773
0028cc  8023              STRH     r3,[r4,#0]
;;;2779   
;;;2780   	net_U=net_Ua;
0028ce  4ab1              LDR      r2,|L1.11156|
0028d0  8010              STRH     r0,[r2,#0]
;;;2781   	if(net_Ub<net_U)net_U=net_Ub;
0028d2  4281              CMP      r1,r0
0028d4  da00              BGE      |L1.10456|
0028d6  8011              STRH     r1,[r2,#0]
                  |L1.10456|
;;;2782   	if(net_Uc<net_U)net_U=net_Uc;
0028d8  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
0028dc  4283              CMP      r3,r0
0028de  da00              BGE      |L1.10466|
0028e0  8013              STRH     r3,[r2,#0]
                  |L1.10466|
0028e2  e07e              B        |L1.10722|
                  |L1.10468|
0028e4  48ba              LDR      r0,|L1.11216|
0028e6  4bb7              LDR      r3,|L1.11204|
0028e8  7801              LDRB     r1,[r0,#0]            ;2738  ; bps
0028ea  7842              LDRB     r2,[r0,#1]            ;2738  ; bps
0028ec  f10303e8          ADD      r3,r3,#0xe8           ;2738
0028f0  eb012102          ADD      r1,r1,r2,LSL #8       ;2738
0028f4  fa1ff881          UXTH     r8,r1                 ;2738
0028f8  f8a38000          STRH     r8,[r3,#0]            ;2738
0028fc  7881              LDRB     r1,[r0,#2]            ;2739  ; bps
0028fe  78c2              LDRB     r2,[r0,#3]            ;2739  ; bps
002900  eb012102          ADD      r1,r1,r2,LSL #8       ;2739
002904  b289              UXTH     r1,r1                 ;2739
002906  8059              STRH     r1,[r3,#2]            ;2739
002908  7902              LDRB     r2,[r0,#4]            ;2740  ; bps
00290a  f890e005          LDRB     lr,[r0,#5]            ;2740  ; bps
00290e  eb02220e          ADD      r2,r2,lr,LSL #8       ;2740
002912  b292              UXTH     r2,r2                 ;2740
002914  809a              STRH     r2,[r3,#4]            ;2740
002916  fb02f209          MUL      r2,r2,r9              ;2743
00291a  f2417370          MOV      r3,#0x1770            ;2744
00291e  fb92f2f3          SDIV     r2,r2,r3              ;2744
002922  fa0ff982          SXTH     r9,r2                 ;2745
002926  f8ac9000          STRH     r9,[r12,#0]           ;2745
00292a  fb01f10b          MUL      r1,r1,r11             ;2748
00292e  fb91f1f3          SDIV     r1,r1,r3              ;2749
002932  b209              SXTH     r1,r1                 ;2750
002934  8039              STRH     r1,[r7,#0]            ;2750
002936  fb08f80a          MUL      r8,r8,r10             ;2753
00293a  fb98f2f3          SDIV     r2,r8,r3              ;2754
00293e  b212              SXTH     r2,r2                 ;2755
002940  8022              STRH     r2,[r4,#0]            ;2755
002942  7983              LDRB     r3,[r0,#6]            ;2757  ; bps
002944  79c0              LDRB     r0,[r0,#7]            ;2757  ; bps
002946  eb032000          ADD      r0,r3,r0,LSL #8       ;2757
00294a  4ba2              LDR      r3,|L1.11220|
00294c  8018              STRH     r0,[r3,#0]            ;2757
00294e  4891              LDR      r0,|L1.11156|
002950  f8a09000          STRH     r9,[r0,#0]            ;2759
002954  4549              CMP      r1,r9                 ;2760
002956  da00              BGE      |L1.10586|
002958  8001              STRH     r1,[r0,#0]            ;2760
                  |L1.10586|
00295a  f9b01000          LDRSH    r1,[r0,#0]            ;2761  ; net_U
00295e  428a              CMP      r2,r1                 ;2761
002960  da3f              BGE      |L1.10722|
002962  8002              STRH     r2,[r0,#0]            ;2761
002964  e03d              B        |L1.10722|
                  |L1.10598|
;;;2783   	}
;;;2784   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002966  f5a048ac          SUB      r8,r0,#0x5600
00296a  f1b8082f          SUBS     r8,r8,#0x2f
00296e  d00b              BEQ      |L1.10632|
002970  f1180828          ADDS     r8,r8,#0x28
002974  d008              BEQ      |L1.10632|
002976  f1b80814          SUBS     r8,r8,#0x14
00297a  d005              BEQ      |L1.10632|
00297c  f1b80801          SUBS     r8,r8,#1
002980  d002              BEQ      |L1.10632|
002982  f118081a          ADDS     r8,r8,#0x1a
002986  d113              BNE      |L1.10672|
                  |L1.10632|
;;;2785   	{
;;;2786   	temp_SL=(signed long)net_buff_;
;;;2787   	temp_SL*=KunetA;
;;;2788   	temp_SL/=40000L;
002988  f6494040          MOV      r0,#0x9c40
00298c  fb92f0f0          SDIV     r0,r2,r0
;;;2789   	net_Ua=(signed short)temp_SL;
002990  b200              SXTH     r0,r0
002992  f8ac0000          STRH     r0,[r12,#0]
;;;2790   
;;;2791   	temp_SL=(signed long)adc_buff_[3];
;;;2792   	temp_SL*=KunetB;
;;;2793   	temp_SL/=6000L;
;;;2794   	net_Ub=(signed short)temp_SL;
002996  8039              STRH     r1,[r7,#0]
;;;2795   
;;;2796   	temp_SL=(signed long)adc_buff_[10];
;;;2797   	temp_SL*=KunetC;
;;;2798   	temp_SL/=6000L;
;;;2799   	net_Uc=(signed short)temp_SL;
002998  8023              STRH     r3,[r4,#0]
;;;2800   
;;;2801   	net_U=net_Ua;
00299a  4a7e              LDR      r2,|L1.11156|
00299c  8010              STRH     r0,[r2,#0]
;;;2802   	if(net_Ub<net_U)net_U=net_Ub;
00299e  4281              CMP      r1,r0
0029a0  da00              BGE      |L1.10660|
0029a2  8011              STRH     r1,[r2,#0]
                  |L1.10660|
;;;2803   	if(net_Uc<net_U)net_U=net_Uc;
0029a4  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
0029a8  4283              CMP      r3,r0
0029aa  da1a              BGE      |L1.10722|
0029ac  8013              STRH     r3,[r2,#0]
0029ae  e018              B        |L1.10722|
                  |L1.10672|
;;;2804   	}
;;;2805   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2806   	{
;;;2807   	temp_SL=(signed long)net_buff_;
;;;2808   	temp_SL*=Kunet;
0029b0  4989              LDR      r1,|L1.11224|
0029b2  f5a043aa          SUB      r3,r0,#0x5500         ;2805
0029b6  f9b12000          LDRSH    r2,[r1,#0]
0029ba  4982              LDR      r1,|L1.11204|
0029bc  8f09              LDRH     r1,[r1,#0x38]         ;2765
0029be  4351              MULS     r1,r2,r1
0029c0  3bfa              SUBS     r3,r3,#0xfa           ;2805
0029c2  d001              BEQ      |L1.10696|
0029c4  1e5a              SUBS     r2,r3,#1              ;2805
0029c6  d106              BNE      |L1.10710|
                  |L1.10696|
;;;2809   	temp_SL/=35000L;
0029c8  f64800b8          MOV      r0,#0x88b8
0029cc  fb91f0f0          SDIV     r0,r1,r0
;;;2810   	net_U=(signed short)temp_SL;
0029d0  4970              LDR      r1,|L1.11156|
0029d2  8008              STRH     r0,[r1,#0]
0029d4  e005              B        |L1.10722|
                  |L1.10710|
;;;2811   	
;;;2812   	}
;;;2813   else
;;;2814   	{
;;;2815   	temp_SL=(signed long)net_buff_;
;;;2816   	temp_SL*=Kunet;
;;;2817   	#ifdef _ACDC_
;;;2818   	temp_SL/=500L;
0029d6  f44f70fa          MOV      r0,#0x1f4
0029da  fb91f0f0          SDIV     r0,r1,r0
;;;2819   	#else
;;;2820   	temp_SL/=5000L;
;;;2821   	#endif
;;;2822   	net_U=(signed short)temp_SL;
0029de  496d              LDR      r1,|L1.11156|
0029e0  8008              STRH     r0,[r1,#0]
                  |L1.10722|
;;;2823   	
;;;2824   	}
;;;2825   if(bps[11]._device!=dNET_METR) net_F3=net_F;
0029e2  9806              LDR      r0,[sp,#0x18]
0029e4  2807              CMP      r0,#7
0029e6  d003              BEQ      |L1.10736|
0029e8  487c              LDR      r0,|L1.11228|
0029ea  8801              LDRH     r1,[r0,#0]  ; net_F
0029ec  4879              LDR      r0,|L1.11220|
0029ee  8001              STRH     r1,[r0,#0]
                  |L1.10736|
;;;2826   #endif
;;;2827   
;;;2828   #ifdef UKU_TELECORE2015
;;;2829   //напряжение сети
;;;2830   temp_SL=(signed long)net_buff_;
;;;2831   temp_SL*=Kunet;
;;;2832   temp_SL/=110000L;
;;;2833   net_U=(signed short)temp_SL;
;;;2834   #endif
;;;2835   
;;;2836   #ifdef UKU_TELECORE2017
;;;2837   //напряжение сети
;;;2838   temp_SL=(signed long)net_buff_;
;;;2839   temp_SL*=Kunet;
;;;2840   temp_SL/=110000L;
;;;2841   net_U=(signed short)temp_SL;
;;;2842   #endif
;;;2843   
;;;2844   //Напряжения батарей
;;;2845   temp_SL=(signed long)adc_buff_[0];
0029f0  4f76              LDR      r7,|L1.11212|
0029f2  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2846   temp_SL*=Kubat[0];
0029f6  497a              LDR      r1,|L1.11232|
0029f8  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
0029fc  4350              MULS     r0,r2,r0
;;;2847   temp_SL/=2000L;
0029fe  f44f68fa          MOV      r8,#0x7d0
002a02  fb90f0f8          SDIV     r0,r0,r8
;;;2848   bat[0]._Ub=(signed short)temp_SL;
002a06  4c62              LDR      r4,|L1.11152|
002a08  8060              STRH     r0,[r4,#2]
;;;2849   
;;;2850   #ifdef UKU_220
;;;2851   //Напряжения батарей
;;;2852   temp_SL=(signed long)adc_buff_[0];
;;;2853   temp_SL*=Kubat[0];
;;;2854   temp_SL/=400L;
;;;2855   bat[0]._Ub=(signed short)temp_SL;
;;;2856   #endif
;;;2857   
;;;2858   #ifdef UKU_220_V2
;;;2859   //Напряжения батарей
;;;2860   temp_SL=(signed long)adc_buff_[0];
;;;2861   temp_SL*=Kubat[0];
;;;2862   temp_SL/=400L;
;;;2863   bat[0]._Ub=(signed short)temp_SL;
;;;2864   #endif
;;;2865   
;;;2866   //adc_buff_[4]=300;
;;;2867   
;;;2868   temp_SL=(signed long)adc_buff_[4];
002a0a  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2869   temp_SL*=Kubatm[0];
002a0e  4a75              LDR      r2,|L1.11236|
002a10  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
002a14  fb00f003          MUL      r0,r0,r3
;;;2870   temp_SL/=700L;
002a18  f44f732f          MOV      r3,#0x2bc
002a1c  fb90f0f3          SDIV     r0,r0,r3
;;;2871   bat[0]._Ubm=(signed short)temp_SL;
002a20  80a0              STRH     r0,[r4,#4]
;;;2872   
;;;2873   #ifdef UKU_KONTUR
;;;2874   temp_SL=(signed long)adc_buff_[4];
;;;2875   temp_SL*=Kubatm[0];
;;;2876   temp_SL/=2000L;
;;;2877   bat[0]._Ubm=(signed short)temp_SL;
;;;2878   #endif
;;;2879   
;;;2880   #ifdef UKU_6U
;;;2881   temp_SL=(signed long)adc_buff_[4];
;;;2882   temp_SL*=Kubatm[0];
;;;2883   temp_SL/=2000L;
;;;2884   bat[0]._Ubm=(signed short)temp_SL;
;;;2885   #endif
;;;2886   
;;;2887   temp_SL=(signed long)adc_buff_[12];
002a22  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2888   temp_SL*=Kubat[1];
002a26  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002a2a  fb01f100          MUL      r1,r1,r0
;;;2889   temp_SL/=2000L;
002a2e  fb91f0f8          SDIV     r0,r1,r8
;;;2890   bat[1]._Ub=(signed short)temp_SL;
002a32  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2891   
;;;2892   #ifdef UKU_220
;;;2893   temp_SL=(signed long)adc_buff_[12];
;;;2894   temp_SL*=Kubat[1];
;;;2895   temp_SL/=400L;
;;;2896   bat[1]._Ub=(signed short)temp_SL;
;;;2897   #endif
;;;2898   
;;;2899   #ifdef UKU_220_V2
;;;2900   temp_SL=(signed long)adc_buff_[12];
;;;2901   temp_SL*=Kubat[1];
;;;2902   temp_SL/=400L;
;;;2903   bat[1]._Ub=(signed short)temp_SL;
;;;2904   #endif
;;;2905   
;;;2906   //adc_buff_[1]=300;
;;;2907   
;;;2908   temp_SL=(signed long)adc_buff_[1];
002a36  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2909   temp_SL*=Kubatm[1];
002a3a  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002a3e  fb00f001          MUL      r0,r0,r1
;;;2910   temp_SL/=700L;
002a42  fb90f0f3          SDIV     r0,r0,r3
;;;2911   bat[1]._Ubm=(signed short)temp_SL;
002a46  f8a40050          STRH     r0,[r4,#0x50]
;;;2912   #ifdef UKU_KONTUR
;;;2913   temp_SL=(signed long)adc_buff_[1];
;;;2914   temp_SL*=Kubatm[1];
;;;2915   temp_SL/=2000L;
;;;2916   bat[1]._Ubm=(signed short)temp_SL;
;;;2917   #endif
;;;2918   #ifdef UKU_6U
;;;2919   temp_SL=(signed long)adc_buff_[1];
;;;2920   temp_SL*=Kubatm[1];
;;;2921   temp_SL/=2000L;
;;;2922   bat[1]._Ubm=(signed short)temp_SL;
;;;2923   #endif
;;;2924   
;;;2925   #ifdef UKU_TELECORE2015
;;;2926   temp_SL=(signed long)adc_buff_[2];
;;;2927   temp_SL*=Kubat[0];
;;;2928   temp_SL/=2000L;
;;;2929   bat[0]._Ub=(signed short)temp_SL;
;;;2930   #endif
;;;2931   
;;;2932   /*
;;;2933   //Токи батарей
;;;2934   if(!mess_find_unvol(MESS2MATEMAT))
;;;2935   	{
;;;2936   	temp_SL=(signed long)ad7705_buff_[0];
;;;2937   	temp_SL-=(signed long)Kibat0[0];
;;;2938   	temp_SL*=(signed long)Kibat1[0];
;;;2939   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2940   	else temp_SL/=1000L;
;;;2941   	bat[0]._Ib=(signed short)temp_SL;
;;;2942   
;;;2943   	temp_SL=(signed long)ad7705_buff_[1];
;;;2944   	temp_SL-=(signed long)Kibat0[1];
;;;2945   	temp_SL*=(signed long)Kibat1[1];
;;;2946   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2947   	else temp_SL/=1000L;
;;;2948   	bat[1]._Ib=(signed short)temp_SL;
;;;2949   	}
;;;2950   */
;;;2951   
;;;2952   
;;;2953   //Токи батарей
;;;2954   if(!mess_find_unvol(MESS2MATEMAT))
002a4a  f04f00dc          MOV      r0,#0xdc
002a4e  f7fffffe          BL       mess_find_unvol
;;;2955   	{
;;;2956   	temp_SL=(signed long)ad7705_buff_[0];
;;;2957   	temp_SL-=(signed long)Kibat0[0];
;;;2958   	temp_SL*=(signed long)Kibat1[0];
;;;2959   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2960   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002a52  f2456c13          MOV      r12,#0x5613
002a56  bbe8              CBNZ     r0,|L1.10964|
002a58  f8dfa18c          LDR      r10,|L1.11240|
002a5c  f8ba0000          LDRH     r0,[r10,#0]           ;2956  ; ad7705_buff_
002a60  f8dfb188          LDR      r11,|L1.11244|
002a64  f8bb1000          LDRH     r1,[r11,#0]           ;2957  ; Kibat0
002a68  eba00001          SUB      r0,r0,r1              ;2957
002a6c  4a60              LDR      r2,|L1.11248|
002a6e  f9b21000          LDRSH    r1,[r2,#0]            ;2958  ; Kibat1
002a72  fb01f100          MUL      r1,r1,r0              ;2958
002a76  4854              LDR      r0,|L1.11208|
002a78  f6456338          MOV      r3,#0x5e38            ;2959
002a7c  f6456992          MOV      r9,#0x5e92            ;2959
002a80  8800              LDRH     r0,[r0,#0]            ;2959  ; AUSW_MAIN
002a82  4298              CMP      r0,r3                 ;2959
002a84  d001              BEQ      |L1.10890|
002a86  4548              CMP      r0,r9                 ;2959
002a88  d104              BNE      |L1.10900|
                  |L1.10890|
002a8a  f44f7e96          MOV      lr,#0x12c             ;2959
002a8e  fb91f1fe          SDIV     r1,r1,lr              ;2959
002a92  e00f              B        |L1.10932|
                  |L1.10900|
002a94  f5a04ea8          SUB      lr,r0,#0x5400
002a98  f5be7efd          SUBS     lr,lr,#0x1fa
002a9c  d003              BEQ      |L1.10918|
002a9e  4560              CMP      r0,r12
002aa0  d001              BEQ      |L1.10918|
002aa2  42a8              CMP      r0,r5
002aa4  d102              BNE      |L1.10924|
                  |L1.10918|
002aa6  fb91f1f8          SDIV     r1,r1,r8
002aaa  e003              B        |L1.10932|
                  |L1.10924|
;;;2961   	else temp_SL/=1000L;
002aac  f44f7e7a          MOV      lr,#0x3e8
002ab0  fb91f1fe          SDIV     r1,r1,lr
                  |L1.10932|
;;;2962   	#ifdef UKU_TELECORE2015
;;;2963   	temp_SL/=2L;
;;;2964   	//temp_SL=-temp_SL;
;;;2965   	#endif
;;;2966   	//#ifdef UKU_TELECORE2017
;;;2967   	//temp_SL/=-2L;
;;;2968   	//temp_SL=-temp_SL;
;;;2969   	//#endif
;;;2970   	bat[0]._Ib=(signed short)temp_SL;
002ab4  8121              STRH     r1,[r4,#8]
;;;2971   
;;;2972   	temp_SL=(signed long)ad7705_buff_[1];
002ab6  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;2973   	temp_SL-=(signed long)Kibat0[1];
002aba  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002abe  eba10a0a          SUB      r10,r1,r10
;;;2974   	temp_SL*=(signed long)Kibat1[1];
002ac2  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002ac6  fb01f10a          MUL      r1,r1,r10
;;;2975   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002aca  4298              CMP      r0,r3
002acc  d001              BEQ      |L1.10962|
002ace  4548              CMP      r0,r9
002ad0  d106              BNE      |L1.10976|
                  |L1.10962|
002ad2  e000              B        |L1.10966|
                  |L1.10964|
002ad4  e015              B        |L1.11010|
                  |L1.10966|
002ad6  f44f7096          MOV      r0,#0x12c
002ada  fb91f0f0          SDIV     r0,r1,r0
002ade  e00e              B        |L1.11006|
                  |L1.10976|
;;;2976   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002ae0  f5a042aa          SUB      r2,r0,#0x5500
002ae4  3afa              SUBS     r2,r2,#0xfa
002ae6  d003              BEQ      |L1.10992|
002ae8  4560              CMP      r0,r12
002aea  d001              BEQ      |L1.10992|
002aec  42a8              CMP      r0,r5
002aee  d102              BNE      |L1.10998|
                  |L1.10992|
002af0  fb91f0f8          SDIV     r0,r1,r8
002af4  e003              B        |L1.11006|
                  |L1.10998|
;;;2977   	else temp_SL/=1000L;
002af6  f44f707a          MOV      r0,#0x3e8
002afa  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11006|
;;;2978   	bat[1]._Ib=(signed short)temp_SL;
002afe  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.11010|
;;;2979   	}
;;;2980   
;;;2981   
;;;2982   
;;;2983   
;;;2984   
;;;2985   //Температуры батарей
;;;2986   
;;;2987   #ifdef UKU_KONTUR
;;;2988   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;2989   else bat[0]._nd=1;
;;;2990   temp_SL=(signed long)adc_buff_[6];
;;;2991   temp_SL*=Ktbat[0];
;;;2992   temp_SL/=20000L;
;;;2993   temp_SL-=273L;
;;;2994   bat[0]._Tb=(signed short)temp_SL;
;;;2995   #else
;;;2996   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002b02  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
002b06  f6403ab7          MOV      r10,#0xbb7
002b0a  4681              MOV      r9,r0
002b0c  f2a03021          SUB      r0,r0,#0x321
;;;2997   else bat[0]._nd=1;
002b10  2201              MOVS     r2,#1
002b12  2300              MOVS     r3,#0                 ;2996
002b14  9005              STR      r0,[sp,#0x14]         ;2996
002b16  4550              CMP      r0,r10                ;2996
002b18  d201              BCS      |L1.11038|
002b1a  7323              STRB     r3,[r4,#0xc]          ;2996
002b1c  e000              B        |L1.11040|
                  |L1.11038|
002b1e  7322              STRB     r2,[r4,#0xc]
                  |L1.11040|
;;;2998   temp_SL=(signed long)adc_buff_[6];
;;;2999   temp_SL*=Ktbat[0];
002b20  4934              LDR      r1,|L1.11252|
002b22  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
002b26  fb00f009          MUL      r0,r0,r9
;;;3000   temp_SL/=20000L;
002b2a  f6446e20          MOV      lr,#0x4e20
002b2e  fb90f0fe          SDIV     r0,r0,lr
;;;3001   temp_SL-=273L;
002b32  f2a01011          SUB      r0,r0,#0x111
;;;3002   bat[0]._Tb=(signed short)temp_SL;
002b36  8160              STRH     r0,[r4,#0xa]
;;;3003   #endif
;;;3004   
;;;3005   #ifdef UKU_KONTUR
;;;3006   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3007   else bat[1]._nd=1;
;;;3008   temp_SL=(signed long)adc_buff_[7];
;;;3009   temp_SL*=Ktbat[1];
;;;3010   temp_SL/=20000L;
;;;3011   temp_SL-=273L;
;;;3012   bat[1]._Tb=(signed short)temp_SL;
;;;3013   #else
;;;3014   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002b38  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
002b3c  f2a03b21          SUB      r11,r0,#0x321
002b40  45d3              CMP      r11,r10
002b42  d202              BCS      |L1.11082|
002b44  f8843058          STRB     r3,[r4,#0x58]
002b48  e001              B        |L1.11086|
                  |L1.11082|
;;;3015   else bat[1]._nd=1;
002b4a  f8842058          STRB     r2,[r4,#0x58]
                  |L1.11086|
;;;3016   temp_SL=(signed long)adc_buff_[7];
;;;3017   temp_SL*=Ktbat[1];
002b4e  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
002b52  4341              MULS     r1,r0,r1
;;;3018   temp_SL/=20000L;
002b54  f6446020          MOV      r0,#0x4e20
002b58  fb91f0f0          SDIV     r0,r1,r0
;;;3019   temp_SL-=273L;
002b5c  f2a01011          SUB      r0,r0,#0x111
;;;3020   bat[1]._Tb=(signed short)temp_SL;
002b60  490b              LDR      r1,|L1.11152|
002b62  f8a10056          STRH     r0,[r1,#0x56]
;;;3021   #endif
;;;3022   
;;;3023   #ifdef UKU_6U
;;;3024   
;;;3025   if(NUMMAKB==2)
;;;3026   	{
;;;3027   	if(makb[0]._cnt<5)
;;;3028   		{
;;;3029   		if(makb[0]._T_nd[0]==0)
;;;3030   			{
;;;3031   			bat[0]._Tb=makb[0]._T[0];
;;;3032   			bat[0]._nd=0;
;;;3033   			}
;;;3034   		}
;;;3035   
;;;3036   	if(makb[1]._cnt<5)
;;;3037   		{
;;;3038   		if(makb[1]._T_nd[0]==0)
;;;3039   			{
;;;3040   			bat[1]._Tb=makb[1]._T[0];
;;;3041   			bat[1]._nd=0;
;;;3042   			}
;;;3043   		}
;;;3044   
;;;3045   	}
;;;3046   else if(NUMMAKB==4)
;;;3047   	{
;;;3048   	signed short temp_t;
;;;3049   	temp_t=-20;
;;;3050   	if(makb[0]._cnt<5)
;;;3051   		{
;;;3052   		if(makb[0]._T_nd[0]==0)
;;;3053   			{
;;;3054   			temp_t=makb[0]._T[0];
;;;3055   			bat[0]._nd=0;
;;;3056   			}
;;;3057   		}
;;;3058   	if(makb[1]._cnt<5)
;;;3059   		{
;;;3060   		if(makb[1]._T_nd[0]==0)
;;;3061   			{
;;;3062   			if(temp_t<makb[1]._T[0])
;;;3063   				{
;;;3064   				bat[0]._nd=0;
;;;3065   				temp_t=makb[1]._T[0];
;;;3066   				}
;;;3067   			}
;;;3068   		}
;;;3069   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3070   
;;;3071    	temp_t=-20;
;;;3072   	if(makb[2]._cnt<5)
;;;3073   		{
;;;3074   		if(makb[2]._T_nd[0]==0)
;;;3075   			{
;;;3076   			temp_t=makb[2]._T[0];
;;;3077   			bat[1]._nd=0;
;;;3078   			}
;;;3079   		}
;;;3080   	if(makb[3]._cnt<5)
;;;3081   		{
;;;3082   		if(makb[3]._T_nd[0]==0)
;;;3083   			{
;;;3084   			if(temp_t<makb[3]._T[0])
;;;3085   				{
;;;3086   				bat[1]._nd=0;
;;;3087   				temp_t=makb[3]._T[0];
;;;3088   				}
;;;3089   			}
;;;3090   		}
;;;3091   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3092   	}
;;;3093   
;;;3094   #endif
;;;3095   
;;;3096   
;;;3097   //Напряжение нагрузки
;;;3098   temp_SL=(signed long)adc_buff_[2];
002b66  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;3099   temp_SL*=Kuload;
002b6a  4823              LDR      r0,|L1.11256|
002b6c  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002b70  fb01f000          MUL      r0,r1,r0
;;;3100   temp_SL/=2000L;
002b74  f44f64fa          MOV      r4,#0x7d0
002b78  fb90f0f4          SDIV     r0,r0,r4
;;;3101   load_U=(signed short)temp_SL;
002b7c  4c1f              LDR      r4,|L1.11260|
002b7e  8020              STRH     r0,[r4,#0]
;;;3102   
;;;3103   #ifdef UKU_220 
;;;3104   //Напряжение нагрузки
;;;3105   temp_SL=(signed long)adc_buff_[2];
;;;3106   temp_SL*=Kuload;
;;;3107   temp_SL/=350L;
;;;3108   load_U=(signed short)temp_SL;
;;;3109   #endif
;;;3110   
;;;3111   #ifdef UKU_220_V2 
;;;3112   //Напряжение нагрузки
;;;3113   temp_SL=(signed long)adc_buff_[2];
;;;3114   temp_SL*=Kuload;
;;;3115   temp_SL/=350L;
;;;3116   load_U=(signed short)temp_SL;
;;;3117   #endif
;;;3118   
;;;3119   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3120   //Напряжение шины
;;;3121   temp_SL=(signed long)adc_buff_[1];
002b80  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;3122   temp_SL*=Kuout;
002b84  481e              LDR      r0,|L1.11264|
002b86  e03d              B        |L1.11268|
                  |L1.11144|
                          DCD      bat_ips
                  |L1.11148|
                          DCD      bat_u_old_cnt
                  |L1.11152|
                          DCD      bat
                  |L1.11156|
                          DCD      net_U
                  |L1.11160|
                          DCD      UMN
                  |L1.11164|
                          DCD      unet_drv_cnt
                  |L1.11168|
                          DCD      net_Ustore
                  |L1.11172|
                          DCD      main_1Hz_cnt
                  |L1.11176|
                          DCD      bps
                  |L1.11180|
                          DCD      KunetA
                  |L1.11184|
                          DCD      net_Ua
                  |L1.11188|
                          DCD      KunetB
                  |L1.11192|
                          DCD      KunetC
                  |L1.11196|
                          DCD      net_Ub
                  |L1.11200|
                          DCD      net_Uc
                  |L1.11204|
                          DCD      ||area_number.25||
                  |L1.11208|
                          DCD      AUSW_MAIN
                  |L1.11212|
                          DCD      ||.bss||+0x40c
                  |L1.11216|
                          DCD      bps+0x3fa
                  |L1.11220|
                          DCD      net_F3
                  |L1.11224|
                          DCD      Kunet
                  |L1.11228|
                          DCD      net_F
                  |L1.11232|
                          DCD      Kubat
                  |L1.11236|
                          DCD      Kubatm
                  |L1.11240|
                          DCD      ad7705_buff_
                  |L1.11244|
                          DCD      Kibat0
                  |L1.11248|
                          DCD      Kibat1
                  |L1.11252|
                          DCD      Ktbat
                  |L1.11256|
                          DCD      Kuload
                  |L1.11260|
                          DCD      load_U
                  |L1.11264|
                          DCD      Kuout
                  |L1.11268|
002c04  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002c08  fb08f800          MUL      r8,r8,r0
;;;3123   if(AUSW_MAIN==22010)temp_SL/=400L;
002c0c  48fa              LDR      r0,|L1.12280|
002c0e  f24554fa          MOV      r4,#0x55fa
002c12  f44f7bc8          MOV      r11,#0x190
002c16  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002c18  42a0              CMP      r0,r4
002c1a  d102              BNE      |L1.11298|
002c1c  fb98f8fb          SDIV     r8,r8,r11
002c20  e003              B        |L1.11306|
                  |L1.11298|
;;;3124   else temp_SL/=500L;
002c22  f44f7efa          MOV      lr,#0x1f4
002c26  fb98f8fe          SDIV     r8,r8,lr
                  |L1.11306|
;;;3125   out_U=(signed short)temp_SL;
002c2a  f8dfe3d0          LDR      lr,|L1.12284|
002c2e  fa0ff888          SXTH     r8,r8
002c32  f8ae8000          STRH     r8,[lr,#0]
;;;3126   load_U=out_U;
002c36  f8dfe3c8          LDR      lr,|L1.12288|
002c3a  f8ae8000          STRH     r8,[lr,#0]
;;;3127   
;;;3128   //Напряжение выпрямителей
;;;3129   temp_SL=(signed long)adc_buff_[2];
;;;3130   temp_SL*=Kubps;
002c3e  4ff1              LDR      r7,|L1.12292|
002c40  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002c44  fb01f107          MUL      r1,r1,r7
;;;3131   if(AUSW_MAIN==22010)temp_SL/=400L;
002c48  d102              BNE      |L1.11344|
002c4a  fb91f1fb          SDIV     r1,r1,r11
002c4e  e003              B        |L1.11352|
                  |L1.11344|
;;;3132   else temp_SL/=500L;
002c50  f44f74fa          MOV      r4,#0x1f4
002c54  fb91f1f4          SDIV     r1,r1,r4
                  |L1.11352|
;;;3133   bps_U=(signed short)temp_SL;
002c58  4ceb              LDR      r4,|L1.12296|
002c5a  b209              SXTH     r1,r1
002c5c  8021              STRH     r1,[r4,#0]
;;;3134   
;;;3135   if(bps_U<100)
002c5e  2964              CMP      r1,#0x64
002c60  da19              BGE      |L1.11414|
;;;3136   	{
;;;3137   	char i;
;;;3138   	for(i=0;i<NUMIST;i++)
002c62  f04f0100          MOV      r1,#0
002c66  46a6              MOV      lr,r4                 ;3133
002c68  4ce8              LDR      r4,|L1.12300|
002c6a  f9b4b000          LDRSH    r11,[r4,#0]
002c6e  e010              B        |L1.11410|
                  |L1.11376|
;;;3139   		{
;;;3140   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002c70  ebc104c1          RSB      r4,r1,r1,LSL #3
002c74  eb041701          ADD      r7,r4,r1,LSL #4
002c78  4ce5              LDR      r4,|L1.12304|
002c7a  eb040487          ADD      r4,r4,r7,LSL #2
002c7e  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
002c82  6a24              LDR      r4,[r4,#0x20]
002c84  42bc              CMP      r4,r7
002c86  dd01              BLE      |L1.11404|
002c88  f8ae4000          STRH     r4,[lr,#0]
                  |L1.11404|
002c8c  f1010101          ADD      r1,r1,#1              ;3138
002c90  b2c9              UXTB     r1,r1                 ;3138
                  |L1.11410|
002c92  4559              CMP      r1,r11                ;3138
002c94  dbec              BLT      |L1.11376|
                  |L1.11414|
;;;3141   		}
;;;3142   	}
;;;3143   
;;;3144   //Суммарный ток выпрямителей
;;;3145   temp_SL=0;
002c96  f04f0b00          MOV      r11,#0
;;;3146   for (i=0;i<NUMIST;i++)
002c9a  4659              MOV      r1,r11
002c9c  4cdb              LDR      r4,|L1.12300|
002c9e  f9b47000          LDRSH    r7,[r4,#0]            ;3138
002ca2  4cdb              LDR      r4,|L1.12304|
002ca4  e00b              B        |L1.11454|
                  |L1.11430|
;;;3147   	{
;;;3148   	temp_SL+=((signed long)bps[i]._Ii);
002ca6  ebc10ec1          RSB      lr,r1,r1,LSL #3
002caa  eb0e1e01          ADD      lr,lr,r1,LSL #4
002cae  eb040e8e          ADD      lr,r4,lr,LSL #2
002cb2  f8dee024          LDR      lr,[lr,#0x24]
002cb6  44f3              ADD      r11,r11,lr
002cb8  f1010101          ADD      r1,r1,#1              ;3146
002cbc  b2c9              UXTB     r1,r1                 ;3146
                  |L1.11454|
002cbe  42b9              CMP      r1,r7                 ;3146
002cc0  dbf1              BLT      |L1.11430|
;;;3149   	}
;;;3150   bps_I=(signed short)temp_SL;
002cc2  49d4              LDR      r1,|L1.12308|
002cc4  f8a1b000          STRH     r11,[r1,#0]
;;;3151   
;;;3152   
;;;3153   #endif
;;;3154   
;;;3155   
;;;3156   #ifdef UKU_KONTUR
;;;3157   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3158   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3159   else ND_EXT[0]=1;
;;;3160   temp_SL=(signed long)adc_buff_[5];
;;;3161   temp_SL*=Ktext[0];
;;;3162   temp_SL/=20000L;
;;;3163   temp_SL-=273L;
;;;3164   t_ext[0]=(signed short)temp_SL;
;;;3165   #else 
;;;3166   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3167   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002cc8  49d3              LDR      r1,|L1.12312|
002cca  f6403ab7          MOV      r10,#0xbb7
002cce  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
002cd2  49d2              LDR      r1,|L1.12316|
002cd4  f2ab3e21          SUB      lr,r11,#0x321
002cd8  f8cde010          STR      lr,[sp,#0x10]
002cdc  45d6              CMP      lr,r10
002cde  d201              BCS      |L1.11492|
002ce0  700b              STRB     r3,[r1,#0]
002ce2  e000              B        |L1.11494|
                  |L1.11492|
;;;3168   else ND_EXT[0]=1;
002ce4  700a              STRB     r2,[r1,#0]
                  |L1.11494|
;;;3169   temp_SL=(signed long)adc_buff_[5];
;;;3170   temp_SL*=Ktext[0];
002ce6  f8dfa338          LDR      r10,|L1.12320|
002cea  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
002cee  f8cda00c          STR      r10,[sp,#0xc]
002cf2  fb0afa0b          MUL      r10,r10,r11
;;;3171   temp_SL/=20000L;
002cf6  f6446e20          MOV      lr,#0x4e20
002cfa  fb9afafe          SDIV     r10,r10,lr
;;;3172   temp_SL-=273L;
002cfe  f2aa1a11          SUB      r10,r10,#0x111
;;;3173   t_ext[0]=(signed short)temp_SL;
002d02  f8dfe320          LDR      lr,|L1.12324|
002d06  f8aea000          STRH     r10,[lr,#0]
;;;3174   /*
;;;3175   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3176   else ND_EXT[1]=1;
;;;3177   temp_SL=(signed long)adc_buff_[6];
;;;3178   temp_SL*=Ktext[1];
;;;3179   temp_SL/=20000L;
;;;3180   temp_SL-=273L;
;;;3181   t_ext[1]=(signed short)temp_SL;	*/
;;;3182   #endif
;;;3183   
;;;3184   #ifdef UKU_220
;;;3185   
;;;3186   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3187   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3188   else ND_EXT[1]=1;
;;;3189   temp_SL=(signed long)adc_buff_[3];
;;;3190   temp_SL*=Ktext[1];
;;;3191   temp_SL/=20000L;
;;;3192   temp_SL-=273L;
;;;3193   t_ext[1]=(signed short)temp_SL;
;;;3194   
;;;3195   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3196   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3197   else ND_EXT[2]=1;
;;;3198   temp_SL=(signed long)adc_buff_[10];
;;;3199   temp_SL*=Ktext[2];
;;;3200   temp_SL/=20000L;
;;;3201   temp_SL-=273L;
;;;3202   t_ext[2]=(signed short)temp_SL;
;;;3203   
;;;3204   #else
;;;3205   
;;;3206   
;;;3207   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3208   
;;;3209   //Внешний датчик температуры 
;;;3210   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002d0a  f8dda014          LDR      r10,[sp,#0x14]
002d0e  f6403eb7          MOV      lr,#0xbb7
002d12  45f2              CMP      r10,lr
002d14  d201              BCS      |L1.11546|
002d16  700b              STRB     r3,[r1,#0]
002d18  e000              B        |L1.11548|
                  |L1.11546|
;;;3211   else ND_EXT[0]=1;
002d1a  700a              STRB     r2,[r1,#0]
                  |L1.11548|
;;;3212   temp_SL=(signed long)adc_buff_[6];
;;;3213   temp_SL*=Ktext[0];
002d1c  f8dda00c          LDR      r10,[sp,#0xc]
002d20  fb0afa09          MUL      r10,r10,r9
;;;3214   temp_SL/=20000L;
002d24  f6446920          MOV      r9,#0x4e20
002d28  fb9af9f9          SDIV     r9,r10,r9
;;;3215   temp_SL-=273L;
002d2c  f2a91911          SUB      r9,r9,#0x111
;;;3216   t_ext[0]=(signed short)temp_SL;
002d30  f8dfe2f0          LDR      lr,|L1.12324|
002d34  f8ae9000          STRH     r9,[lr,#0]
;;;3217   
;;;3218   //Внешний датчик температуры №2
;;;3219   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002d38  f8dd9010          LDR      r9,[sp,#0x10]
002d3c  f6403ab7          MOV      r10,#0xbb7
002d40  45d1              CMP      r9,r10
002d42  d201              BCS      |L1.11592|
002d44  704b              STRB     r3,[r1,#1]
002d46  e000              B        |L1.11594|
                  |L1.11592|
;;;3220   else ND_EXT[1]=1;
002d48  704a              STRB     r2,[r1,#1]
                  |L1.11594|
;;;3221   temp_SL=(signed long)adc_buff_[5];
;;;3222   temp_SL*=Ktext[1];
002d4a  4ab5              LDR      r2,|L1.12320|
002d4c  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
002d50  fb02f20b          MUL      r2,r2,r11
;;;3223   temp_SL/=20000L;
002d54  f6446920          MOV      r9,#0x4e20
002d58  fb92f2f9          SDIV     r2,r2,r9
;;;3224   temp_SL-=273L;
002d5c  f2a21211          SUB      r2,r2,#0x111
;;;3225   t_ext[1]=(signed short)temp_SL;
002d60  fa0ffa82          SXTH     r10,r2
002d64  4aaf              LDR      r2,|L1.12324|
002d66  f8a2a002          STRH     r10,[r2,#2]
;;;3226   #else
;;;3227   
;;;3228   
;;;3229   
;;;3230   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3231   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3232   else ND_EXT[1]=1;
;;;3233   temp_SL=(signed long)adc_buff_[6];
;;;3234   temp_SL*=Ktext[1];
;;;3235   temp_SL/=20000L;
;;;3236   temp_SL-=273L;
;;;3237   t_ext[1]=(signed short)temp_SL;
;;;3238   
;;;3239   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3240   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3241   else ND_EXT[2]=1;
;;;3242   temp_SL=(signed long)adc_buff_[3];
;;;3243   temp_SL*=Ktext[2];
;;;3244   temp_SL/=20000L;
;;;3245   temp_SL-=273L;
;;;3246   t_ext[2]=(signed short)temp_SL;
;;;3247   
;;;3248   #endif
;;;3249   #endif
;;;3250   
;;;3251   #ifdef UKU_220_V2
;;;3252   
;;;3253   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3254   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3255   else ND_EXT[1]=1;
;;;3256   temp_SL=(signed long)adc_buff_[3];
;;;3257   temp_SL*=Ktext[1];
;;;3258   temp_SL/=20000L;
;;;3259   temp_SL-=273L;
;;;3260   t_ext[1]=(signed short)temp_SL;
;;;3261   
;;;3262   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3263   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3264   else ND_EXT[2]=1;
;;;3265   temp_SL=(signed long)adc_buff_[10];
;;;3266   temp_SL*=Ktext[2];
;;;3267   temp_SL/=20000L;
;;;3268   temp_SL-=273L;
;;;3269   t_ext[2]=(signed short)temp_SL;
;;;3270   
;;;3271   #else
;;;3272   
;;;3273   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3274   //Ток батареи
;;;3275   if(bps[8]._device==dIBAT_METR)
002d6a  f89422e0          LDRB     r2,[r4,#0x2e0]  ; bps
;;;3276   	{
;;;3277   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3278   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3279   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3280   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3281   	if(!bIBAT_SMKLBR)
;;;3282   		{
;;;3283   		signed long temp_SL;
;;;3284   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3285   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3286   		temp_SL*=(signed long)Kibat1[0];
;;;3287   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3288   	
;;;3289   		Ib_ips_termokompensat =(signed short)temp_SL;
002d6e  f8df92b8          LDR      r9,|L1.12328|
002d72  2a09              CMP      r2,#9                 ;3275
002d74  d15f              BNE      |L1.11830|
002d76  f89422e6          LDRB     r2,[r4,#0x2e6]        ;3277  ; bps
002d7a  f894b2e7          LDRB     r11,[r4,#0x2e7]       ;3277  ; bps
002d7e  f8dfe2ac          LDR      lr,|L1.12332|
002d82  eb02220b          ADD      r2,r2,r11,LSL #8      ;3277
002d86  f8ce2000          STR      r2,[lr,#0]            ;3277  ; ibat_metr_buff_
002d8a  9202              STR      r2,[sp,#8]            ;3277
002d8c  f89422e8          LDRB     r2,[r4,#0x2e8]        ;3278  ; bps
002d90  f894b2e9          LDRB     r11,[r4,#0x2e9]       ;3278  ; bps
002d94  eb02220b          ADD      r2,r2,r11,LSL #8      ;3278
002d98  f8ce2004          STR      r2,[lr,#4]            ;3278  ; ibat_metr_buff_
002d9c  f894b2ea          LDRB     r11,[r4,#0x2ea]       ;3279  ; bps
002da0  f894e2eb          LDRB     lr,[r4,#0x2eb]        ;3279  ; bps
002da4  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;3279
002da8  f8dfe284          LDR      lr,|L1.12336|
002dac  fa0ffb8b          SXTH     r11,r11               ;3279
002db0  f8aeb000          STRH     r11,[lr,#0]           ;3279
002db4  f1bb0f00          CMP      r11,#0                ;3280
002db8  d005              BEQ      |L1.11718|
002dba  f8dfb278          LDR      r11,|L1.12340|
002dbe  f04f0e32          MOV      lr,#0x32              ;3280
002dc2  f8abe000          STRH     lr,[r11,#0]           ;3280
                  |L1.11718|
002dc6  d136              BNE      |L1.11830|
002dc8  f8ddb008          LDR      r11,[sp,#8]           ;3284
002dcc  ebab0b02          SUB      r11,r11,r2            ;3285
002dd0  4a99              LDR      r2,|L1.12344|
002dd2  f9b22000          LDRSH    r2,[r2,#0]            ;3286  ; Kibat1
002dd6  fb02f20b          MUL      r2,r2,r11             ;3286
002dda  f5a04ba8          SUB      r11,r0,#0x5400        ;3287
002dde  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3287
002de2  d00f              BEQ      |L1.11780|
002de4  f1bb0b01          SUBS     r11,r11,#1            ;3287
002de8  d00c              BEQ      |L1.11780|
002dea  4560              CMP      r0,r12                ;3287
002dec  d00a              BEQ      |L1.11780|
002dee  42a8              CMP      r0,r5                 ;3287
002df0  d008              BEQ      |L1.11780|
002df2  f1bb0534          SUBS     r5,r11,#0x34          ;3287
002df6  d005              BEQ      |L1.11780|
002df8  3528              ADDS     r5,r5,#0x28           ;3287
002dfa  d003              BEQ      |L1.11780|
002dfc  3d14              SUBS     r5,r5,#0x14           ;3287
002dfe  d001              BEQ      |L1.11780|
002e00  1e6d              SUBS     r5,r5,#1              ;3287
002e02  d103              BNE      |L1.11788|
                  |L1.11780|
002e04  f44f65fa          MOV      r5,#0x7d0             ;3287
002e08  fb92f2f5          SDIV     r2,r2,r5              ;3287
                  |L1.11788|
002e0c  b215              SXTH     r5,r2
002e0e  f8a95000          STRH     r5,[r9,#0]
;;;3290   		if(bIBAT_SMKLBR_cnt)
002e12  f8dfc220          LDR      r12,|L1.12340|
;;;3291   			{
;;;3292   			bIBAT_SMKLBR_cnt--;
;;;3293   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
002e16  f8dfb224          LDR      r11,|L1.12348|
002e1a  f9bc2000          LDRSH    r2,[r12,#0]           ;3290  ; bIBAT_SMKLBR_cnt
002e1e  b142              CBZ      r2,|L1.11826|
002e20  f1a20201          SUB      r2,r2,#1              ;3292
002e24  f8ac2000          STRH     r2,[r12,#0]           ;3292
002e28  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
002e2c  f8a92000          STRH     r2,[r9,#0]
002e30  e001              B        |L1.11830|
                  |L1.11826|
;;;3294   			}
;;;3295   		else 
;;;3296   			{
;;;3297   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
002e32  f8ab5000          STRH     r5,[r11,#0]
                  |L1.11830|
;;;3298   			}
;;;3299   		}
;;;3300   	}
;;;3301   
;;;3302   bat[0]._Ub=load_U;
002e36  4a82              LDR      r2,|L1.12352|
002e38  f8a28002          STRH     r8,[r2,#2]
002e3c  f8cd8004          STR      r8,[sp,#4]
;;;3303   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
002e40  f5a045ac          SUB      r5,r0,#0x5600
002e44  3d02              SUBS     r5,#2
002e46  d103              BNE      |L1.11856|
002e48  8910              LDRH     r0,[r2,#8]  ; bat
002e4a  f8a90000          STRH     r0,[r9,#0]
002e4e  e002              B        |L1.11862|
                  |L1.11856|
;;;3304   else bat[0]._Ib=Ib_ips_termokompensat;
002e50  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002e54  8110              STRH     r0,[r2,#8]
                  |L1.11862|
;;;3305   
;;;3306   #endif
;;;3307   #endif
;;;3308   
;;;3309   
;;;3310   #ifdef UKU_TELECORE2015
;;;3311   
;;;3312   //Внешний датчик температуры №1
;;;3313   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3314   else ND_EXT[0]=1;
;;;3315   temp_SL=(signed long)adc_buff_[7];
;;;3316   temp_SL*=Ktext[0];
;;;3317   temp_SL/=20000L;
;;;3318   temp_SL-=273L;
;;;3319   t_ext[0]=(signed short)temp_SL;
;;;3320   
;;;3321   
;;;3322   //Внешний датчик температуры №2
;;;3323   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3324   else ND_EXT[1]=1;
;;;3325   temp_SL=(signed long)adc_buff_[6];
;;;3326   temp_SL*=Ktext[1];
;;;3327   temp_SL/=20000L;
;;;3328   temp_SL-=273L;
;;;3329   t_ext[1]=(signed short)temp_SL;
;;;3330   
;;;3331   #endif
;;;3332   
;;;3333   #ifdef UKU_TELECORE2017
;;;3334   
;;;3335   //Внешний датчик температуры №1
;;;3336   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3337   else ND_EXT[0]=1;
;;;3338   temp_SL=(signed long)adc_buff_[7];
;;;3339   temp_SL*=Ktext[0];
;;;3340   temp_SL/=20000L;
;;;3341   temp_SL-=273L;
;;;3342   t_ext[0]=(signed short)temp_SL;
;;;3343   
;;;3344   
;;;3345   //Внешний датчик температуры №2
;;;3346   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3347   else ND_EXT[1]=1;
;;;3348   temp_SL=(signed long)adc_buff_[6];
;;;3349   temp_SL*=Ktext[1];
;;;3350   temp_SL/=20000L;
;;;3351   temp_SL-=273L;
;;;3352   t_ext[1]=(signed short)temp_SL;
;;;3353   
;;;3354   #endif
;;;3355   
;;;3356   //напряжение ввода
;;;3357   temp_SL=(signed long)adc_buff_ext_[0];
002e56  f8dfc1ec          LDR      r12,|L1.12356|
002e5a  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;3358   temp_SL*=Kunet_ext[0];
002e5e  f8df81e8          LDR      r8,|L1.12360|
002e62  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
002e66  4368              MULS     r0,r5,r0
;;;3359   temp_SL/=4000L;
002e68  f44f6b7a          MOV      r11,#0xfa0
002e6c  fb90f0fb          SDIV     r0,r0,r11
;;;3360   Uvv[0]=(signed short)temp_SL;
002e70  4d76              LDR      r5,|L1.12364|
002e72  b280              UXTH     r0,r0
002e74  8028              STRH     r0,[r5,#0]
;;;3361   if(Uvv[0]<100) Uvv0=Uvv[0];
002e76  f8dfe1d8          LDR      lr,|L1.12368|
002e7a  2864              CMP      r0,#0x64
002e7c  d202              BCS      |L1.11908|
002e7e  f8ae0000          STRH     r0,[lr,#0]
002e82  e003              B        |L1.11916|
                  |L1.11908|
;;;3362   else Uvv0=net_U;
002e84  4873              LDR      r0,|L1.12372|
002e86  8800              LDRH     r0,[r0,#0]  ; net_U
002e88  f8ae0000          STRH     r0,[lr,#0]
                  |L1.11916|
;;;3363   
;;;3364   //напряжение пэс
;;;3365   temp_SL=(signed long)adc_buff_ext_[1];
002e8c  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;3366   temp_SL*=Kunet_ext[1];
002e90  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
002e94  fb00f00c          MUL      r0,r0,r12
;;;3367   temp_SL/=4000L;
002e98  fb90f0fb          SDIV     r0,r0,r11
;;;3368   Uvv[1]=(signed short)temp_SL;
002e9c  8068              STRH     r0,[r5,#2]
;;;3369   
;;;3370   
;;;3371   //напряжение ввода трехфазное
;;;3372   temp_SL=(signed long)eb2_data_short[0];
002e9e  4d6e              LDR      r5,|L1.12376|
002ea0  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;3373   temp_SL*=Kvv_eb2[0];
002ea4  f8dfc1b4          LDR      r12,|L1.12380|
002ea8  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
002eac  fb08f800          MUL      r8,r8,r0
;;;3374   temp_SL/=6000L;
002eb0  f2417070          MOV      r0,#0x1770
002eb4  fb98fbf0          SDIV     r11,r8,r0
;;;3375   Uvv_eb2[0]=(signed short)temp_SL;
002eb8  f8df81a4          LDR      r8,|L1.12384|
002ebc  f8a8b000          STRH     r11,[r8,#0]
;;;3376   
;;;3377   temp_SL=(signed long)eb2_data_short[1];
002ec0  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;3378   temp_SL*=Kvv_eb2[1];
002ec4  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
002ec8  fb0efe0b          MUL      lr,lr,r11
;;;3379   temp_SL/=6000L;
002ecc  fb9efbf0          SDIV     r11,lr,r0
;;;3380   Uvv_eb2[1]=(signed short)temp_SL;
002ed0  f8a8b002          STRH     r11,[r8,#2]
;;;3381   
;;;3382   temp_SL=(signed long)eb2_data_short[2];
002ed4  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;3383   temp_SL*=Kvv_eb2[2];
002ed8  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
002edc  fb0cfc0b          MUL      r12,r12,r11
;;;3384   temp_SL/=6000L;
002ee0  fb9cfcf0          SDIV     r12,r12,r0
;;;3385   Uvv_eb2[2]=(signed short)temp_SL;
002ee4  f8a8c004          STRH     r12,[r8,#4]
;;;3386   
;;;3387   //напряжение пэс трехфазное
;;;3388   temp_SL=(signed long)eb2_data_short[3];
002ee8  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;3389   temp_SL*=Kpes_eb2[0];
002eec  f8dfc174          LDR      r12,|L1.12388|
002ef0  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
002ef4  fb08f80b          MUL      r8,r8,r11
;;;3390   temp_SL/=6000L;
002ef8  fb98fbf0          SDIV     r11,r8,r0
;;;3391   Upes_eb2[0]=(signed short)temp_SL;
002efc  f8df8168          LDR      r8,|L1.12392|
002f00  f8a8b000          STRH     r11,[r8,#0]
;;;3392   
;;;3393   temp_SL=(signed long)eb2_data_short[4];
002f04  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;3394   temp_SL*=Kpes_eb2[1];
002f08  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
002f0c  fb0efe0b          MUL      lr,lr,r11
;;;3395   temp_SL/=6000L;
002f10  fb9efbf0          SDIV     r11,lr,r0
;;;3396   Upes_eb2[1]=(signed short)temp_SL;
002f14  f8a8b002          STRH     r11,[r8,#2]
;;;3397   
;;;3398   temp_SL=(signed long)eb2_data_short[5];
002f18  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;3399   temp_SL*=Kpes_eb2[2];
002f1c  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
002f20  fb05f50b          MUL      r5,r5,r11
;;;3400   temp_SL/=6000L;
002f24  fb95f0f0          SDIV     r0,r5,r0
;;;3401   Upes_eb2[2]=(signed short)temp_SL;
002f28  f8a80004          STRH     r0,[r8,#4]
;;;3402   
;;;3403   //Вычисление температуры шкафа
;;;3404   
;;;3405   ibt._T[0]=t_ext[1]+273;
002f2c  f20a1a11          ADD      r10,r10,#0x111
002f30  fa0ffc8a          SXTH     r12,r10
002f34  f8dfa134          LDR      r10,|L1.12396|
002f38  483a              LDR      r0,|L1.12324|
002f3a  f8aac000          STRH     r12,[r10,#0]
;;;3406   ibt._T[1]=t_ext[2]+273;
002f3e  8880              LDRH     r0,[r0,#4]  ; t_ext
002f40  f2001011          ADD      r0,r0,#0x111
002f44  fa0ff880          SXTH     r8,r0
002f48  f8aa8002          STRH     r8,[r10,#2]
;;;3407   
;;;3408   ibt._nd[0]=ND_EXT[1];
002f4c  784d              LDRB     r5,[r1,#1]  ; ND_EXT
002f4e  f88a5008          STRB     r5,[r10,#8]
;;;3409   ibt._nd[1]=ND_EXT[2];
002f52  7888              LDRB     r0,[r1,#2]  ; ND_EXT
002f54  f88a0009          STRB     r0,[r10,#9]
;;;3410   
;;;3411   #ifndef UKU_TELECORE2015
;;;3412   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3413   	{
;;;3414   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
002f58  4945              LDR      r1,|L1.12400|
002f5a  b905              CBNZ     r5,|L1.12126|
002f5c  b110              CBZ      r0,|L1.12132|
                  |L1.12126|
;;;3415   	}
;;;3416   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
002f5e  2d01              CMP      r5,#1
002f60  d00a              BEQ      |L1.12152|
002f62  e00a              B        |L1.12154|
                  |L1.12132|
002f64  eb0c0008          ADD      r0,r12,r8             ;3414
002f68  eb0075d0          ADD      r5,r0,r0,LSR #31      ;3414
002f6c  f46f7088          MVN      r0,#0x110             ;3414
002f70  eb000065          ADD      r0,r0,r5,ASR #1       ;3414
002f74  8008              STRH     r0,[r1,#0]            ;3414
002f76  e01e              B        |L1.12214|
                  |L1.12152|
002f78  b108              CBZ      r0,|L1.12158|
                  |L1.12154|
;;;3417   	{
;;;3418   	t_box=ibt._T[1]-273;
;;;3419   	}
;;;3420   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
002f7a  b12d              CBZ      r5,|L1.12168|
002f7c  e006              B        |L1.12172|
                  |L1.12158|
002f7e  f2a81811          SUB      r8,r8,#0x111          ;3418
002f82  f8a18000          STRH     r8,[r1,#0]            ;3418
002f86  e016              B        |L1.12214|
                  |L1.12168|
002f88  2801              CMP      r0,#1
002f8a  d002              BEQ      |L1.12178|
                  |L1.12172|
;;;3421   	{
;;;3422   	t_box=ibt._T[0]-273;
;;;3423   	}
;;;3424   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
002f8c  2d01              CMP      r5,#1
002f8e  d005              BEQ      |L1.12188|
002f90  e011              B        |L1.12214|
                  |L1.12178|
002f92  f2ac1c11          SUB      r12,r12,#0x111        ;3422
002f96  f8a1c000          STRH     r12,[r1,#0]           ;3422
002f9a  e00c              B        |L1.12214|
                  |L1.12188|
002f9c  2801              CMP      r0,#1
002f9e  d10a              BNE      |L1.12214|
;;;3425   	{
;;;3426   	if(t_ext_can_nd<5)t_box= t_ext_can;
002fa0  4834              LDR      r0,|L1.12404|
002fa2  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
002fa4  2805              CMP      r0,#5
002fa6  d203              BCS      |L1.12208|
002fa8  4833              LDR      r0,|L1.12408|
002faa  8800              LDRH     r0,[r0,#0]  ; t_ext_can
002fac  8008              STRH     r0,[r1,#0]
002fae  e002              B        |L1.12214|
                  |L1.12208|
;;;3427   	else t_box=20;
002fb0  f04f0014          MOV      r0,#0x14
002fb4  8008              STRH     r0,[r1,#0]
                  |L1.12214|
;;;3428   	}
;;;3429   #endif
;;;3430   /*
;;;3431   //Вычисление температуры шкафа
;;;3432   
;;;3433   ibt._T[0]=bat[0]._Tb+273;
;;;3434   ibt._T[1]=bat[1]._Tb+273;
;;;3435   ibt._T[2]=t_ext[1]+273;
;;;3436   ibt._T[3]=t_ext[2]+273;
;;;3437   
;;;3438   ibt._nd[0]=bat[0]._nd;
;;;3439   ibt._nd[1]=bat[1]._nd;
;;;3440   ibt._nd[2]=ND_EXT[1];
;;;3441   ibt._nd[3]=ND_EXT[2];
;;;3442   
;;;3443   ibt._avg1=0;
;;;3444   ibt._avg_cnt=4;
;;;3445   
;;;3446   if(ibt._nd[0]==0)
;;;3447   	{
;;;3448   	ibt._avg1+=ibt._T[0];
;;;3449   	}
;;;3450   else 
;;;3451   	{
;;;3452   	ibt._avg_cnt--;
;;;3453   	}
;;;3454   
;;;3455   if(ibt._nd[1]==0)
;;;3456   	{
;;;3457   	ibt._avg1+=ibt._T[1];
;;;3458   	}
;;;3459   else 
;;;3460   	{
;;;3461   	ibt._avg_cnt--;
;;;3462   	}
;;;3463   
;;;3464   if(ibt._nd[2]==0)
;;;3465   	{
;;;3466   	ibt._avg1+=ibt._T[2];
;;;3467   	}
;;;3468   else 
;;;3469   	{
;;;3470   	ibt._avg_cnt--;
;;;3471   	}
;;;3472   
;;;3473   if(ibt._nd[3]==0)
;;;3474   	{
;;;3475   	ibt._avg1+=ibt._T[3];
;;;3476   	}
;;;3477   else 
;;;3478   	{
;;;3479   	ibt._avg_cnt--;
;;;3480   	}
;;;3481   
;;;3482   if(ibt._avg_cnt==0)
;;;3483   	{
;;;3484   	}
;;;3485   else
;;;3486   	{
;;;3487   	ibt._avg1/=ibt._avg_cnt;
;;;3488   	}
;;;3489   
;;;3490   
;;;3491   if(ibt._nd[0]!=0)
;;;3492   	{
;;;3493   	ibt._T_dispers[0]=0;
;;;3494   	}
;;;3495   else 
;;;3496   	{
;;;3497   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3498   	}
;;;3499   
;;;3500   if(ibt._nd[1]!=0)
;;;3501   	{
;;;3502   	ibt._T_dispers[1]=0;
;;;3503   	}
;;;3504   else 
;;;3505   	{
;;;3506   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3507   	}
;;;3508   
;;;3509   if(ibt._nd[2]!=0)
;;;3510   	{
;;;3511   	ibt._T_dispers[2]=0;
;;;3512   	}
;;;3513   else 
;;;3514   	{
;;;3515   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3516   	}
;;;3517   
;;;3518   if(ibt._nd[3]!=0)
;;;3519   	{
;;;3520   	ibt._T_dispers[3]=0;
;;;3521   	}
;;;3522   else 
;;;3523   	{
;;;3524   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3525   	}
;;;3526   
;;;3527   if(	ibt._nd[0]&&
;;;3528   	ibt._nd[1]&&
;;;3529   	ibt._nd[2]&&
;;;3530   	ibt._nd[3]
;;;3531   	)
;;;3532   	{
;;;3533   	t_box=(bps[0]._Ti);
;;;3534   	}
;;;3535   
;;;3536   else if(	ibt._nd[0]||
;;;3537   	ibt._nd[1]||
;;;3538   	ibt._nd[2]||
;;;3539   	ibt._nd[3]
;;;3540   	)
;;;3541   	{
;;;3542   	t_box=(ibt._avg1-273);
;;;3543   	}
;;;3544   else 
;;;3545   	{
;;;3546   	ibt._max_dispers_num=0;
;;;3547   	ibt._max_dispers=ibt._T_dispers[0];
;;;3548   
;;;3549   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3550   		{
;;;3551   		ibt._max_dispers_num=1;
;;;3552   		ibt._max_dispers=ibt._T_dispers[1];
;;;3553   		}
;;;3554   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3555   		{
;;;3556   		ibt._max_dispers_num=2;
;;;3557   		ibt._max_dispers=ibt._T_dispers[2];
;;;3558   		}
;;;3559   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3560   		{
;;;3561   		ibt._max_dispers_num=3;
;;;3562   		ibt._max_dispers=ibt._T_dispers[3];
;;;3563   		}
;;;3564   
;;;3565   	ibt._avg2=0;
;;;3566   
;;;3567   	if(ibt._max_dispers_num!=0)
;;;3568   		{
;;;3569   		ibt._avg2+=ibt._T[0];
;;;3570   		}
;;;3571   	if(ibt._max_dispers_num!=1)
;;;3572   		{
;;;3573   		ibt._avg2+=ibt._T[1];
;;;3574   		}
;;;3575   	if(ibt._max_dispers_num!=2)
;;;3576   		{
;;;3577   		ibt._avg2+=ibt._T[2];
;;;3578   		}
;;;3579   	if(ibt._max_dispers_num!=3)
;;;3580   		{
;;;3581   		ibt._avg2+=ibt._T[3];
;;;3582   		}
;;;3583   
;;;3584   	t_box=(ibt._avg2/3)-273;
;;;3585   
;;;3586   	}*/
;;;3587   
;;;3588   
;;;3589   //*********************************************
;;;3590   
;;;3591   #ifndef TELECORE
;;;3592   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
002fb6  4931              LDR      r1,|L1.12412|
002fb8  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
002fba  2855              CMP      r0,#0x55
002fbc  d105              BNE      |L1.12234|
002fbe  9801              LDR      r0,[sp,#4]
002fc0  28c8              CMP      r0,#0xc8
002fc2  dd02              BLE      |L1.12234|
002fc4  8910              LDRH     r0,[r2,#8]  ; bat
002fc6  f8a60048          STRH     r0,[r6,#0x48]
                  |L1.12234|
;;;3593   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
002fca  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
002fcc  2855              CMP      r0,#0x55
002fce  d10b              BNE      |L1.12264|
002fd0  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
002fd4  28c8              CMP      r0,#0xc8
002fd6  dd07              BLE      |L1.12264|
002fd8  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
002fdc  f9b21008          LDRSH    r1,[r2,#8]  ; bat
002fe0  4288              CMP      r0,r1
002fe2  dd01              BLE      |L1.12264|
002fe4  f8a60048          STRH     r0,[r6,#0x48]
                  |L1.12264|
;;;3594   #endif
;;;3595   
;;;3596   #ifdef TELECORE
;;;3597   Ibmax=0;
;;;3598   /*
;;;3599   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3600   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3601   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3602   */
;;;3603   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3604   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3605   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3606   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3607   #endif
;;;3608   //Ibmax=bat[0]._Ib;
;;;3609   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3610   
;;;3611   #ifdef UKU_TELECORE2017
;;;3612   Ibmax=0;
;;;3613   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3614   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3615   #endif
;;;3616   
;;;3617   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3618   Ibmax=Ib_ips_termokompensat;
002fe8  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002fec  f8a60048          STRH     r0,[r6,#0x48]
;;;3619   #endif
;;;3620   for(i=0;i<NUMIST;i++)
002ff0  f04f0100          MOV      r1,#0
002ff4  e074              B        |L1.12512|
002ff6  0000              DCW      0x0000
                  |L1.12280|
                          DCD      AUSW_MAIN
                  |L1.12284|
                          DCD      out_U
                  |L1.12288|
                          DCD      load_U
                  |L1.12292|
                          DCD      Kubps
                  |L1.12296|
                          DCD      bps_U
                  |L1.12300|
                          DCD      NUMIST
                  |L1.12304|
                          DCD      bps
                  |L1.12308|
                          DCD      bps_I
                  |L1.12312|
                          DCD      ||.bss||+0x40c
                  |L1.12316|
                          DCD      ND_EXT
                  |L1.12320|
                          DCD      Ktext
                  |L1.12324|
                          DCD      t_ext
                  |L1.12328|
                          DCD      Ib_ips_termokompensat
                  |L1.12332|
                          DCD      ibat_metr_buff_
                  |L1.12336|
                          DCD      bIBAT_SMKLBR
                  |L1.12340|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12344|
                          DCD      Kibat1
                  |L1.12348|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.12352|
                          DCD      bat
                  |L1.12356|
                          DCD      adc_buff_ext_
                  |L1.12360|
                          DCD      Kunet_ext
                  |L1.12364|
                          DCD      Uvv
                  |L1.12368|
                          DCD      Uvv0
                  |L1.12372|
                          DCD      net_U
                  |L1.12376|
                          DCD      eb2_data_short
                  |L1.12380|
                          DCD      Kvv_eb2
                  |L1.12384|
                          DCD      Uvv_eb2
                  |L1.12388|
                          DCD      Kpes_eb2
                  |L1.12392|
                          DCD      Upes_eb2
                  |L1.12396|
                          DCD      ibt
                  |L1.12400|
                          DCD      t_box
                  |L1.12404|
                          DCD      t_ext_can_nd
                  |L1.12408|
                          DCD      t_ext_can
                  |L1.12412|
                          DCD      BAT_IS_ON
                  |L1.12416|
;;;3621   	{
;;;3622   	if(bps[i]._cnt<25)
003080  ebc100c1          RSB      r0,r1,r1,LSL #3
003084  eb001001          ADD      r0,r0,r1,LSL #4
003088  eb040080          ADD      r0,r4,r0,LSL #2
00308c  78c5              LDRB     r5,[r0,#3]
00308e  2d19              CMP      r5,#0x19
003090  d21c              BCS      |L1.12492|
;;;3623        	{
;;;3624        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
003092  7985              LDRB     r5,[r0,#6]
003094  79c6              LDRB     r6,[r0,#7]
003096  eb052506          ADD      r5,r5,r6,LSL #8
00309a  6245              STR      r5,[r0,#0x24]
;;;3625        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
00309c  7a05              LDRB     r5,[r0,#8]
00309e  7a46              LDRB     r6,[r0,#9]
0030a0  eb052506          ADD      r5,r5,r6,LSL #8
0030a4  6205              STR      r5,[r0,#0x20]
;;;3626        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0030a6  7a85              LDRB     r5,[r0,#0xa]
0030a8  7ac6              LDRB     r6,[r0,#0xb]
0030aa  eb052506          ADD      r5,r5,r6,LSL #8
0030ae  61c5              STR      r5,[r0,#0x1c]
;;;3627        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0030b0  7b05              LDRB     r5,[r0,#0xc]
0030b2  6285              STR      r5,[r0,#0x28]
;;;3628        	bps[i]._adr_ee=bps[i]._buff[7];
0030b4  7b45              LDRB     r5,[r0,#0xd]
0030b6  f8805052          STRB     r5,[r0,#0x52]
;;;3629        	bps[i]._flags_tm=bps[i]._buff[8];
0030ba  7b85              LDRB     r5,[r0,#0xe]
0030bc  f8805042          STRB     r5,[r0,#0x42]
;;;3630   	     bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
0030c0  7c05              LDRB     r5,[r0,#0x10]
0030c2  7c46              LDRB     r6,[r0,#0x11]
0030c4  eb052506          ADD      r5,r5,r6,LSL #8
0030c8  64c5              STR      r5,[r0,#0x4c]
0030ca  e006              B        |L1.12506|
                  |L1.12492|
;;;3631        	} 
;;;3632   	else 
;;;3633        	{
;;;3634        	bps[i]._Uii=0; 
0030cc  61c3              STR      r3,[r0,#0x1c]
;;;3635        	bps[i]._Ii=0;
0030ce  6243              STR      r3,[r0,#0x24]
;;;3636        	bps[i]._Uin=0;
0030d0  6203              STR      r3,[r0,#0x20]
;;;3637        	bps[i]._Ti=0;
0030d2  6283              STR      r3,[r0,#0x28]
;;;3638        	bps[i]._flags_tm=0; 
0030d4  f8803042          STRB     r3,[r0,#0x42]
;;;3639   	     bps[i]._rotor=0;    
0030d8  64c3              STR      r3,[r0,#0x4c]
                  |L1.12506|
0030da  f1010101          ADD      r1,r1,#1              ;3620
0030de  b2c9              UXTB     r1,r1                 ;3620
                  |L1.12512|
0030e0  42b9              CMP      r1,r7                 ;3620
0030e2  dbcd              BLT      |L1.12416|
;;;3640        	}
;;;3641        
;;;3642        }
;;;3643   
;;;3644   load_I=0;
0030e4  4dfb              LDR      r5,|L1.13524|
;;;3645   #ifdef TELECORE
;;;3646   
;;;3647   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3648   	{
;;;3649   	load_I-=lakb[i]._ch_curr/10;
;;;3650   	}*/
;;;3651   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3652   #elif UKU_TELECORE2017
;;;3653   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3654   #else
;;;3655   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
0030e6  f9b21008          LDRSH    r1,[r2,#8]  ; bat
0030ea  f04f000a          MOV      r0,#0xa
0030ee  fb91f1f0          SDIV     r1,r1,r0
0030f2  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
0030f6  fb92f0f0          SDIV     r0,r2,r0
0030fa  4408              ADD      r0,r0,r1
0030fc  f1c00000          RSB      r0,r0,#0
003100  b206              SXTH     r6,r0
003102  802e              STRH     r6,[r5,#0]
;;;3656   #endif
;;;3657   Isumm=0;
003104  4af4              LDR      r2,|L1.13528|
003106  8013              STRH     r3,[r2,#0]
;;;3658   
;;;3659   for(i=0;i<NUMIST;i++)
003108  f04f0000          MOV      r0,#0
00310c  e012              B        |L1.12596|
                  |L1.12558|
;;;3660        {
;;;3661        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
00310e  ebc001c0          RSB      r1,r0,r0,LSL #3
003112  eb011100          ADD      r1,r1,r0,LSL #4
003116  eb040181          ADD      r1,r4,r1,LSL #2
00311a  f891c003          LDRB     r12,[r1,#3]
00311e  f1bc0f05          CMP      r12,#5
003122  d204              BCS      |L1.12590|
003124  6a49              LDR      r1,[r1,#0x24]
003126  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
00312a  4461              ADD      r1,r1,r12
00312c  8011              STRH     r1,[r2,#0]
                  |L1.12590|
00312e  f1000001          ADD      r0,r0,#1              ;3659
003132  b2c0              UXTB     r0,r0                 ;3659
                  |L1.12596|
003134  42b8              CMP      r0,r7                 ;3659
003136  dbea              BLT      |L1.12558|
;;;3662        }  
;;;3663        
;;;3664   load_I=load_I+Isumm;
003138  8810              LDRH     r0,[r2,#0]  ; Isumm
00313a  4430              ADD      r0,r0,r6
00313c  b200              SXTH     r0,r0
00313e  8028              STRH     r0,[r5,#0]
;;;3665   if(load_I<0)load_I=0;
003140  2800              CMP      r0,#0
003142  da00              BGE      |L1.12614|
003144  802b              STRH     r3,[r5,#0]
                  |L1.12614|
;;;3666   
;;;3667   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3668   load_I=0;
003146  802b              STRH     r3,[r5,#0]
;;;3669   
;;;3670   Isumm=0;
003148  8013              STRH     r3,[r2,#0]
;;;3671   
;;;3672   for(i=0;i<NUMIST;i++)
00314a  f04f0000          MOV      r0,#0
00314e  e00f              B        |L1.12656|
                  |L1.12624|
;;;3673        {
;;;3674        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003150  ebc001c0          RSB      r1,r0,r0,LSL #3
003154  eb011100          ADD      r1,r1,r0,LSL #4
003158  eb040181          ADD      r1,r4,r1,LSL #2
00315c  78ce              LDRB     r6,[r1,#3]
00315e  2e05              CMP      r6,#5
003160  d203              BCS      |L1.12650|
003162  6a49              LDR      r1,[r1,#0x24]
003164  8816              LDRH     r6,[r2,#0]  ; Isumm
003166  4431              ADD      r1,r1,r6
003168  8011              STRH     r1,[r2,#0]
                  |L1.12650|
00316a  f1000001          ADD      r0,r0,#1              ;3672
00316e  b2c0              UXTB     r0,r0                 ;3672
                  |L1.12656|
003170  42b8              CMP      r0,r7                 ;3672
003172  dbed              BLT      |L1.12624|
;;;3675        }  
;;;3676        
;;;3677   load_I=load_I+Isumm;
003174  8811              LDRH     r1,[r2,#0]  ; Isumm
003176  eb030001          ADD      r0,r3,r1
00317a  b200              SXTH     r0,r0
00317c  8028              STRH     r0,[r5,#0]
;;;3678   if(load_I<0)load_I=0;
00317e  2800              CMP      r0,#0
003180  da00              BGE      |L1.12676|
003182  802b              STRH     r3,[r5,#0]
                  |L1.12676|
;;;3679   
;;;3680   #endif
;;;3681   #ifdef IPS_SGEP_GAZPROM
;;;3682   load_I=Isumm;
;;;3683   #endif
;;;3684   
;;;3685   
;;;3686   #ifdef UKU_GLONASS
;;;3687   inv[0]._Uio=6;
;;;3688   if (NUMINV)
;;;3689   	{
;;;3690   	for(i=0;i<NUMINV;i++)
;;;3691   		{
;;;3692   		if(bps[i+first_inv_slot]._cnt<25)
;;;3693        		{
;;;3694        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3695        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3696        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3697        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3698        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3699   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3700   			inv[i]._cnt=0;    
;;;3701        		} 
;;;3702   		else 
;;;3703        		{
;;;3704        		inv[i]._Uio=0; 
;;;3705        		inv[i]._Ii=0;
;;;3706        		inv[i]._Uin=0;
;;;3707        		inv[i]._Ti=0;
;;;3708        		inv[i]._flags_tm=0; 
;;;3709   //	     	inv[i]._rotor0;
;;;3710   			inv[i]._cnt=25;    
;;;3711        		}
;;;3712        	}
;;;3713      	}
;;;3714   #endif
;;;3715   
;;;3716   #ifndef UKU_GLONASS
;;;3717   if (NUMINV)
003184  48d5              LDR      r0,|L1.13532|
003186  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
00318a  2d00              CMP      r5,#0
00318c  d066              BEQ      |L1.12892|
;;;3718   	{
;;;3719   	for(i=0;i<NUMINV;i++)
00318e  f04f0200          MOV      r2,#0
;;;3720   		{
;;;3721   		if(bps[i+20]._cnt<25)
;;;3722        		{
;;;3723        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
003192  4ed3              LDR      r6,|L1.13536|
003194  e060              B        |L1.12888|
                  |L1.12694|
003196  f1020014          ADD      r0,r2,#0x14           ;3721
00319a  ebc001c0          RSB      r1,r0,r0,LSL #3       ;3721
00319e  eb011000          ADD      r0,r1,r0,LSL #4       ;3721
0031a2  eb040080          ADD      r0,r4,r0,LSL #2       ;3721
0031a6  78c1              LDRB     r1,[r0,#3]            ;3721
0031a8  2919              CMP      r1,#0x19              ;3721
0031aa  d239              BCS      |L1.12832|
0031ac  7981              LDRB     r1,[r0,#6]
0031ae  79c7              LDRB     r7,[r0,#7]
0031b0  eb012707          ADD      r7,r1,r7,LSL #8
0031b4  eb020142          ADD      r1,r2,r2,LSL #1
0031b8  eb061141          ADD      r1,r6,r1,LSL #5
0031bc  61cf              STR      r7,[r1,#0x1c]
;;;3724        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0031be  7a07              LDRB     r7,[r0,#8]
0031c0  f890c009          LDRB     r12,[r0,#9]
0031c4  eb07270c          ADD      r7,r7,r12,LSL #8
0031c8  62cf              STR      r7,[r1,#0x2c]
;;;3725        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
0031ca  7a87              LDRB     r7,[r0,#0xa]
0031cc  f890c00b          LDRB     r12,[r0,#0xb]
0031d0  eb07270c          ADD      r7,r7,r12,LSL #8
0031d4  618f              STR      r7,[r1,#0x18]
;;;3726        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
0031d6  7b07              LDRB     r7,[r0,#0xc]
0031d8  620f              STR      r7,[r1,#0x20]
;;;3727        		inv[i]._flags_tm=bps[i+20]._buff[7];
0031da  7b47              LDRB     r7,[r0,#0xd]
0031dc  f8817046          STRB     r7,[r1,#0x46]
;;;3728        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
0031e0  7b87              LDRB     r7,[r0,#0xe]
0031e2  f890c00f          LDRB     r12,[r0,#0xf]
0031e6  eb07270c          ADD      r7,r7,r12,LSL #8
0031ea  628f              STR      r7,[r1,#0x28]
;;;3729        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
0031ec  7c07              LDRB     r7,[r0,#0x10]
0031ee  f890c011          LDRB     r12,[r0,#0x11]
0031f2  eb07270c          ADD      r7,r7,r12,LSL #8
0031f6  624f              STR      r7,[r1,#0x24]
;;;3730   			inv[i]._cnt=0;
0031f8  708b              STRB     r3,[r1,#2]
;;;3731   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
0031fa  7c87              LDRB     r7,[r0,#0x12]
0031fc  f8817059          STRB     r7,[r1,#0x59]
;;;3732   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
003200  7cc7              LDRB     r7,[r0,#0x13]
003202  f881705a          STRB     r7,[r1,#0x5a]
;;;3733   			inv[i]._Pnom=bps[i+20]._buff[14]; 
003206  7d07              LDRB     r7,[r0,#0x14]
003208  f8817058          STRB     r7,[r1,#0x58]
;;;3734   			inv[i]._net_contr_en=bps[i+20]._buff[15];
00320c  7d47              LDRB     r7,[r0,#0x15]
00320e  f881705b          STRB     r7,[r1,#0x5b]
;;;3735   			inv[i]._pwm_en=bps[i+20]._buff[16];  
003212  7d87              LDRB     r7,[r0,#0x16]
003214  f881705c          STRB     r7,[r1,#0x5c]
;;;3736   			inv[i]._phase_mode=bps[i+20]._buff[17];  
003218  7dc0              LDRB     r0,[r0,#0x17]
00321a  f881005d          STRB     r0,[r1,#0x5d]
00321e  e018              B        |L1.12882|
                  |L1.12832|
;;;3737        		} 
;;;3738   		else 
;;;3739        		{
;;;3740         		inv[i]._Ii=0;
003220  eb020042          ADD      r0,r2,r2,LSL #1
003224  eb061040          ADD      r0,r6,r0,LSL #5
003228  61c3              STR      r3,[r0,#0x1c]
;;;3741   			inv[i]._Pio=0;
00322a  62c3              STR      r3,[r0,#0x2c]
;;;3742   			inv[i]._Uio=0;
00322c  6183              STR      r3,[r0,#0x18]
;;;3743        		inv[i]._Ti=0;
00322e  6203              STR      r3,[r0,#0x20]
;;;3744        		inv[i]._flags_tm=0; 
003230  f8803046          STRB     r3,[r0,#0x46]
;;;3745        		inv[i]._Uil=0;
003234  6243              STR      r3,[r0,#0x24]
;;;3746        		inv[i]._Uin=0;
003236  6283              STR      r3,[r0,#0x28]
;;;3747   			inv[i]._cnt=25; 
003238  f04f0119          MOV      r1,#0x19
00323c  7081              STRB     r1,[r0,#2]
;;;3748   			inv[i]._Uoutmin=0; 
00323e  f8803059          STRB     r3,[r0,#0x59]
;;;3749   			inv[i]._Uoutmax=0; 
003242  f880305a          STRB     r3,[r0,#0x5a]
;;;3750   			inv[i]._Pnom=0; 
003246  f8803058          STRB     r3,[r0,#0x58]
;;;3751   			inv[i]._net_contr_en=0;
00324a  f880305b          STRB     r3,[r0,#0x5b]
;;;3752   			inv[i]._pwm_en=0;   
00324e  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.12882|
003252  f1020201          ADD      r2,r2,#1              ;3719
003256  b2d2              UXTB     r2,r2                 ;3719
                  |L1.12888|
003258  42aa              CMP      r2,r5                 ;3719
00325a  db9c              BLT      |L1.12694|
                  |L1.12892|
;;;3753   			   
;;;3754        		}
;;;3755        	}
;;;3756      	}
;;;3757   #endif
;;;3758   
;;;3759   #ifdef GLADKOV
;;;3760   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3761   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3762   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3763   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3764   inv[0]._flags_tm=bps[4]._buff[7];
;;;3765   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3766   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3767   inv[0]._cnt=0;    
;;;3768   
;;;3769   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3770   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3771   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3772   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3773   inv[1]._flags_tm=bps[21]._buff[7];
;;;3774   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3775   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3776   inv[1]._cnt=0;    
;;;3777   #endif
;;;3778   
;;;3779   /*
;;;3780   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3781   	{
;;;3782   	lakb[0]._battCommState=0;
;;;3783   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3784   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3785   	
;;;3786   	if(lakb[0]._battCommState==0)
;;;3787   		{	
;;;3788   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3789   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3790   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3791   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3792   		}
;;;3793   	}
;;;3794   */
;;;3795   
;;;3796   #ifdef UKU_TELECORE2015
;;;3797   
;;;3798   	if(BAT_TYPE==2)
;;;3799   		{
;;;3800   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3801   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3802   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3803   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3804   		
;;;3805   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3806   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3807   	
;;;3808   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3809   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3810   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3811   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3812   	
;;;3813   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3814   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3815   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3816   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3817   	
;;;3818   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3819   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3820   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3821   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3822   	
;;;3823   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3824   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3825   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3826   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3827   	
;;;3828   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3829   	
;;;3830   	
;;;3831   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3832   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3833   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3834   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3835   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3836   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3837   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3838   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3839   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3840   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3841   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3842   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3843   	
;;;3844   		if(lakb[i]._rat_cap==0)
;;;3845   			{
;;;3846   			if(lakb[i]._isOnCnt)
;;;3847   				{
;;;3848   				lakb[i]._isOnCnt--;
;;;3849   				if(lakb[i]._isOnCnt==0)
;;;3850   					{
;;;3851   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3852   					}
;;;3853   				}
;;;3854   			}
;;;3855   		else 
;;;3856   			{
;;;3857   			if(lakb[i]._isOnCnt<50)
;;;3858   				{
;;;3859   				lakb[i]._isOnCnt++;
;;;3860   				if(lakb[i]._isOnCnt==50)
;;;3861   					{
;;;3862   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3863   					}
;;;3864   				}
;;;3865   			}
;;;3866   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3867   		}
;;;3868   	else if(BAT_TYPE==3)
;;;3869   		{
;;;3870   		//short numOfPacks;
;;;3871   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3872   		
;;;3873   		#ifndef UKU_TELECORE2016
;;;3874   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3875   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3876   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3877   		if(numOfPacks)numOfPacks-=1;
;;;3878   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3879   		plazma_numOfCells=numOfCells;
;;;3880   		plazma_numOfTemperCells=numOfTemperCells;
;;;3881   		plazma_numOfPacks=numOfPacks;
;;;3882   
;;;3883   
;;;3884   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3885   
;;;3886   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3887   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3888   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3889   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3890   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3891   							);	  
;;;3892   
;;;3893   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3894   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3895   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3896   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3897   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3898   							)/10;
;;;3899   
;;;3900   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3901   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3902   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3903   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3904   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3905   							)-2730;
;;;3906   
;;;3907   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3908   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3909   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3910   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3911   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3912   							)/10;
;;;3913   
;;;3914   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3915   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3916   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3917   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3918   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3919   							)/10;
;;;3920   		#endif
;;;3921   		
;;;3922   		#ifdef UKU_TELECORE2016
;;;3923   		{
;;;3924   		char i;
;;;3925   		
;;;3926   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3927   			{
;;;3928   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3929   			}
;;;3930   		}
;;;3931   		#endif
;;;3932   		
;;;3933   										  
;;;3934   		}
;;;3935   	
;;;3936   if(sacredSunSilentCnt<3) 
;;;3937   	{
;;;3938       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3939       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3940      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3941   	}
;;;3942   else 
;;;3943   	{
;;;3944       	//bat[0]._Ub=0;
;;;3945       	//bat[0]._Tb=0;
;;;3946      	//bat[0]._Ib=0;
;;;3947   	}
;;;3948   
;;;3949   if(BAT_TYPE==1)
;;;3950   	{
;;;3951   	char i;
;;;3952   	for(i=0;i<1;i++)
;;;3953   		{
;;;3954   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3955   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3956   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3957   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3958   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;3959   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3960   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;3961   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3962   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;3963   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;3964   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3965   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;3966   		lakb[i]._flags1= lakb_damp[i][34];
;;;3967   		lakb[i]._flags2= lakb_damp[i][35];
;;;3968   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;3969   
;;;3970   /*		if(lakb[i]._rat_cap==0)
;;;3971   			{
;;;3972   			if(lakb[i]._isOnCnt)
;;;3973   				{
;;;3974   				lakb[i]._isOnCnt--;
;;;3975   				if(lakb[i]._isOnCnt==0)
;;;3976   					{
;;;3977   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3978   					}
;;;3979   				}
;;;3980   			}
;;;3981   		else 
;;;3982   			{
;;;3983   			if(lakb[i]._isOnCnt<50)
;;;3984   				{
;;;3985   				lakb[i]._isOnCnt++;
;;;3986   				if(lakb[i]._isOnCnt==50)
;;;3987   					{
;;;3988   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3989   					}
;;;3990   				}
;;;3991   			} */
;;;3992   		gran(&lakb[i]._isOnCnt,0,50);
;;;3993   	 	}
;;;3994   
;;;3995   	if(lakb_damp[0][41]==100)
;;;3996   		{
;;;3997   		li_bat._485Error=1;
;;;3998   		}
;;;3999   	if(lakb_damp[0][41]==0)
;;;4000   		{
;;;4001   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4002   		li_bat._485Error=0;
;;;4003   		}
;;;4004   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4005   
;;;4006   
;;;4007   	}
;;;4008   
;;;4009   
;;;4010   #endif
;;;4011   
;;;4012   		#ifdef UKU_TELECORE2017
;;;4013   		{
;;;4014   		char i;
;;;4015   		
;;;4016   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4017   			{
;;;4018   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4019   			}
;;;4020   		}
;;;4021   		#endif
;;;4022   #ifdef UKU_TELECORE2015
;;;4023   //вычисление параметров работы батареи
;;;4024   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4025   li_bat._batStat=bsOK;
;;;4026   if(BAT_TYPE==1) //COSLIGHT
;;;4027   	{
;;;4028   	if(li_bat._batStat==bsOK)
;;;4029   		{
;;;4030   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4031   
;;;4032   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4033   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4034   	
;;;4035   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4036   		li_bat._soc=lakb[0]._s_o_c;
;;;4037   		li_bat._soh=lakb[0]._s_o_h;
;;;4038   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4039   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4040   		li_bat._rbt=lakb[0]._r_b_t;
;;;4041   		}
;;;4042   	else 
;;;4043   		{
;;;4044   		li_bat._Ub=bat[0]._Ub;
;;;4045   		li_bat._Ib=bat[0]._Ib/10;
;;;4046   		li_bat._Tb=bat[0]._Tb;
;;;4047   		}
;;;4048   
;;;4049   	if((li_bat._485Error)||(li_bat._canError))
;;;4050   		{
;;;4051   		li_bat._batStat=bsOFF;
;;;4052   		}
;;;4053   	else li_bat._batStat=bsOK;
;;;4054   	}
;;;4055   else if(BAT_TYPE==2) //SACRED SUN
;;;4056   	{
;;;4057   	}
;;;4058   else if(BAT_TYPE==3) //ZTT
;;;4059   	{
;;;4060   	if(li_bat._batStat==bsOK)
;;;4061   		{
;;;4062   
;;;4063   		}
;;;4064   	}
;;;4065   #endif
;;;4066   
;;;4067   
;;;4068   /*
;;;4069   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4070   	{
;;;4071   
;;;4072   
;;;4073   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4074   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4075   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4076   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4077   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4078   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4079   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4080   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4081   
;;;4082   	tempSS=0;
;;;4083   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4084   
;;;4085   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4086   
;;;4087   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4088   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4089   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4090   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4091   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4092   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4093   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4094   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4095   
;;;4096   	tempSS=0;
;;;4097   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4098   
;;;4099   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4100   
;;;4101   
;;;4102   	}*/
;;;4103   }
00325c  b007              ADD      sp,sp,#0x1c
00325e  e8bd8ff0          POP      {r4-r11,pc}
;;;4104   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4164   //-----------------------------------------------
;;;4165   void mnemo_hndl(void)
003262  4aa0              LDR      r2,|L1.13540|
;;;4166   {
;;;4167   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4168   	{
;;;4169   	if(mnemo_cnt)mnemo_cnt--;
003264  49a0              LDR      r1,|L1.13544|
003266  7810              LDRB     r0,[r2,#0]            ;4167  ; a_ind
003268  2804              CMP      r0,#4                 ;4167
00326a  d001              BEQ      |L1.12912|
00326c  2801              CMP      r0,#1                 ;4167
00326e  d105              BNE      |L1.12924|
                  |L1.12912|
003270  7850              LDRB     r0,[r2,#1]            ;4167  ; a_ind
003272  b918              CBNZ     r0,|L1.12924|
003274  489d              LDR      r0,|L1.13548|
003276  7800              LDRB     r0,[r0,#0]            ;4167  ; MNEMO_ON
003278  2855              CMP      r0,#0x55              ;4167
00327a  d003              BEQ      |L1.12932|
                  |L1.12924|
;;;4170   	}
;;;4171   else mnemo_cnt=MNEMO_TIME;
00327c  489c              LDR      r0,|L1.13552|
00327e  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
003280  7008              STRB     r0,[r1,#0]
                  |L1.12930|
;;;4172   }
003282  4770              BX       lr
                  |L1.12932|
003284  7808              LDRB     r0,[r1,#0]            ;4169  ; mnemo_cnt
003286  2800              CMP      r0,#0                 ;4169
003288  d0fb              BEQ      |L1.12930|
00328a  f1a00001          SUB      r0,r0,#1              ;4169
00328e  7008              STRB     r0,[r1,#0]            ;4169
003290  4770              BX       lr
;;;4173   
                          ENDP

                  adc_init PROC
;;;4174   //-----------------------------------------------
;;;4175   void adc_init(void)
003292  4898              LDR      r0,|L1.13556|
;;;4176   {
;;;4177   
;;;4178   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
003294  6841              LDR      r1,[r0,#4]
003296  f4212140          BIC      r1,r1,#0xc0000
00329a  f4412180          ORR      r1,r1,#0x40000
00329e  6041              STR      r1,[r0,#4]
;;;4179   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
0032a0  6841              LDR      r1,[r0,#4]
0032a2  f4213140          BIC      r1,r1,#0x30000
0032a6  f4413180          ORR      r1,r1,#0x10000
0032aa  6041              STR      r1,[r0,#4]
;;;4180   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0032ac  6841              LDR      r1,[r0,#4]
0032ae  f4214140          BIC      r1,r1,#0xc000
0032b2  f4414180          ORR      r1,r1,#0x4000
0032b6  6041              STR      r1,[r0,#4]
;;;4181   
;;;4182   
;;;4183   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0032b8  6c41              LDR      r1,[r0,#0x44]
0032ba  f4212140          BIC      r1,r1,#0xc0000
0032be  f4412100          ORR      r1,r1,#0x80000
0032c2  6441              STR      r1,[r0,#0x44]
;;;4184   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0032c4  6c41              LDR      r1,[r0,#0x44]
0032c6  f4213140          BIC      r1,r1,#0x30000
0032ca  f4413100          ORR      r1,r1,#0x20000
0032ce  6441              STR      r1,[r0,#0x44]
;;;4185   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0032d0  6c41              LDR      r1,[r0,#0x44]
0032d2  f4214140          BIC      r1,r1,#0xc000
0032d6  f4414100          ORR      r1,r1,#0x8000
0032da  6441              STR      r1,[r0,#0x44]
;;;4186   
;;;4187   SET_REG(LPC_ADC->ADCR,0,24,3);
0032dc  4886              LDR      r0,|L1.13560|
0032de  6801              LDR      r1,[r0,#0]
0032e0  f02161e0          BIC      r1,r1,#0x7000000
0032e4  6001              STR      r1,[r0,#0]
;;;4188   
;;;4189   SET_REG(LPC_ADC->ADCR,1,21,1);
0032e6  6801              LDR      r1,[r0,#0]
0032e8  f4411100          ORR      r1,r1,#0x200000
0032ec  6001              STR      r1,[r0,#0]
;;;4190   SET_REG(LPC_ADC->ADCR,0,16,1);
0032ee  6801              LDR      r1,[r0,#0]
0032f0  f4213180          BIC      r1,r1,#0x10000
0032f4  6001              STR      r1,[r0,#0]
;;;4191   SET_REG(LPC_ADC->ADCR,1,8,8);
0032f6  6801              LDR      r1,[r0,#0]
0032f8  f421417f          BIC      r1,r1,#0xff00
0032fc  f4417180          ORR      r1,r1,#0x100
003300  6001              STR      r1,[r0,#0]
;;;4192   
;;;4193   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4194   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4195   	
;;;4196   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4197        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4198        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4199   
;;;4200   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003302  f44f7180          MOV      r1,#0x100
003306  60c1              STR      r1,[r0,#0xc]
003308  487c              LDR      r0,|L1.13564|
00330a  f44f0180          MOV      r1,#0x400000
00330e  6001              STR      r1,[r0,#0]
;;;4201   
;;;4202   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4203   
;;;4204   
;;;4205   }
003310  4770              BX       lr
;;;4206   
                          ENDP

                  adc_drv7 PROC
;;;4207   //-----------------------------------------------
;;;4208   void adc_drv7(void) //(Uсети - постоянка)
003312  e92d41f0          PUSH     {r4-r8,lr}
;;;4209   {
;;;4210   //int temp_S;
;;;4211   //char i;
;;;4212   //signed short temp_SS;
;;;4213   
;;;4214   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
003316  4c7a              LDR      r4,|L1.13568|
003318  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00331a  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00331c  1a40              SUBS     r0,r0,r1
00331e  b200              SXTH     r0,r0
003320  f7fffffe          BL       abs_pal
003324  1da6              ADDS     r6,r4,#6
003326  8030              STRH     r0,[r6,#0]
;;;4215   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003328  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00332a  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00332c  1a40              SUBS     r0,r0,r1
00332e  b200              SXTH     r0,r0
003330  f7fffffe          BL       abs_pal
003334  8070              STRH     r0,[r6,#2]
;;;4216   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
003336  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003338  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00333a  1a40              SUBS     r0,r0,r1
00333c  b200              SXTH     r0,r0
00333e  f7fffffe          BL       abs_pal
003342  80b0              STRH     r0,[r6,#4]
;;;4217   
;;;4218   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4219   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4220   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4221   
;;;4222   
;;;4223   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
003344  f44f7196          MOV      r1,#0x12c
;;;4224   	{
;;;4225   	adc_result=adc_self_ch_buff[2];
003348  f1a405ee          SUB      r5,r4,#0xee
00334c  4288              CMP      r0,r1                 ;4223
00334e  da02              BGE      |L1.13142|
003350  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003352  8768              STRH     r0,[r5,#0x3a]
003354  e00c              B        |L1.13168|
                  |L1.13142|
;;;4226   	} 
;;;4227   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
003356  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
00335a  4288              CMP      r0,r1
00335c  da02              BGE      |L1.13156|
;;;4228   	{
;;;4229   	adc_result=adc_self_ch_buff[1];
00335e  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003360  8768              STRH     r0,[r5,#0x3a]
003362  e005              B        |L1.13168|
                  |L1.13156|
;;;4230   	}
;;;4231   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
003364  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
003368  4288              CMP      r0,r1
00336a  da01              BGE      |L1.13168|
;;;4232   	{
;;;4233   	adc_result=adc_self_ch_buff[0];
00336c  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00336e  8768              STRH     r0,[r5,#0x3a]
                  |L1.13168|
;;;4234   	}
;;;4235       //adc_result=92;
;;;4236   
;;;4237   if(adc_ch_net)
003370  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
003372  2600              MOVS     r6,#0
003374  b347              CBZ      r7,|L1.13256|
;;;4238   	{
;;;4239   
;;;4240   	main_power_buffer[0]+=(long)(adc_result);
003376  4863              LDR      r0,|L1.13572|
003378  f9b5103a          LDRSH    r1,[r5,#0x3a]  ; adc_result
00337c  6802              LDR      r2,[r0,#0]  ; main_power_buffer
00337e  440a              ADD      r2,r2,r1
003380  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4241   	main_power_buffer[1]+=(long)(adc_result);
003382  6842              LDR      r2,[r0,#4]  ; main_power_buffer
003384  440a              ADD      r2,r2,r1
003386  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4242   	main_power_buffer[2]+=(long)(adc_result);
003388  6882              LDR      r2,[r0,#8]  ; main_power_buffer
00338a  440a              ADD      r2,r2,r1
00338c  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4243   	main_power_buffer[3]+=(long)(adc_result);
00338e  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
003390  4411              ADD      r1,r1,r2
003392  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4244   
;;;4245   	adc_net_buff_cnt++;
003394  f8b51042          LDRH     r1,[r5,#0x42]  ; adc_net_buff_cnt
003398  f1010101          ADD      r1,r1,#1
00339c  b209              SXTH     r1,r1
00339e  f8a51042          STRH     r1,[r5,#0x42]
;;;4246   	if(adc_net_buff_cnt>=0x1000)
0033a2  f5b15f80          CMP      r1,#0x1000
0033a6  db01              BLT      |L1.13228|
;;;4247   		{
;;;4248   		adc_net_buff_cnt=0;
0033a8  f8a56042          STRH     r6,[r5,#0x42]
                  |L1.13228|
;;;4249   		}
;;;4250   	if((adc_net_buff_cnt&0x03ff)==0)
0033ac  f9b51042          LDRSH    r1,[r5,#0x42]  ; adc_net_buff_cnt
0033b0  058a              LSLS     r2,r1,#22
0033b2  d131              BNE      |L1.13336|
;;;4251   		{
;;;4252   		#ifdef UKU_220
;;;4253   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4254   		#else
;;;4255   		#ifdef UKU_220_V2
;;;4256   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4257   		#else
;;;4258   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0033b4  ea4f21a1          ASR      r1,r1,#10
0033b8  f8502021          LDR      r2,[r0,r1,LSL #2]
0033bc  ea4f2222          ASR      r2,r2,#8
0033c0  872a              STRH     r2,[r5,#0x38]
;;;4259   		#endif
;;;4260   		#endif
;;;4261   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0033c2  f8406021          STR      r6,[r0,r1,LSL #2]
0033c6  e027              B        |L1.13336|
                  |L1.13256|
;;;4262   		}
;;;4263   
;;;4264   
;;;4265   	} 
;;;4266   else if(!adc_ch_net)
;;;4267   	{
;;;4268   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0033c8  484f              LDR      r0,|L1.13576|
0033ca  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
0033cc  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
0033ce  eb001384          ADD      r3,r0,r4,LSL #6
0033d2  f9b5103a          LDRSH    r1,[r5,#0x3a]  ; adc_result
0033d6  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4269   	
;;;4270   	if((adc_ch_cnt&0x03)==0)
0033da  0790              LSLS     r0,r2,#30
0033dc  d10f              BNE      |L1.13310|
;;;4271   		{
;;;4272   		long temp_L;
;;;4273   		char i;
;;;4274   		temp_L=0;
0033de  4601              MOV      r1,r0
                  |L1.13280|
;;;4275   		for(i=0;i<16;i++)
;;;4276   			{
;;;4277   			temp_L+=adc_buff[adc_ch][i];
0033e0  f853c020          LDR      r12,[r3,r0,LSL #2]
0033e4  4461              ADD      r1,r1,r12
0033e6  f1000001          ADD      r0,r0,#1              ;4275
0033ea  b2c0              UXTB     r0,r0                 ;4275
0033ec  2810              CMP      r0,#0x10              ;4275
0033ee  d3f7              BCC      |L1.13280|
;;;4278   			}
;;;4279   		adc_buff_[adc_ch]= (short)(temp_L>>4);
0033f0  ea4f1021          ASR      r0,r1,#4
0033f4  4943              LDR      r1,|L1.13572|
0033f6  f1a10120          SUB      r1,r1,#0x20
0033fa  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.13310|
;;;4280   
;;;4281   		//adc_buff_[3]=346;
;;;4282   		}
;;;4283   	if(++adc_ch>=16) 
0033fe  1c64              ADDS     r4,r4,#1
003400  b2e0              UXTB     r0,r4
003402  74a8              STRB     r0,[r5,#0x12]
003404  2810              CMP      r0,#0x10
003406  d307              BCC      |L1.13336|
;;;4284   		{
;;;4285   		adc_ch=0;
003408  74ae              STRB     r6,[r5,#0x12]
;;;4286   		adc_ch_cnt++;
00340a  f1020201          ADD      r2,r2,#1
00340e  b2d0              UXTB     r0,r2
003410  74e8              STRB     r0,[r5,#0x13]
;;;4287   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003412  2810              CMP      r0,#0x10
003414  d300              BCC      |L1.13336|
003416  74ee              STRB     r6,[r5,#0x13]
                  |L1.13336|
;;;4288   		}
;;;4289   	}
;;;4290   
;;;4291   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4292   
;;;4293   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4294   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4295   /*
;;;4296   	{
;;;4297   	if((adc_cnt1&0x03)==0)
;;;4298   		{
;;;4299   		temp_S=0;
;;;4300   		for(i=0;i<16;i++)
;;;4301   			{
;;;4302   			temp_S+=adc_buff[adc_ch][i];
;;;4303   			} 
;;;4304            	adc_buff_[adc_ch]=temp_S>>4;
;;;4305             }
;;;4306   	}*/
;;;4307   
;;;4308   
;;;4309   		  
;;;4310   
;;;4311   adc_self_ch_cnt=0;
003418  742e              STRB     r6,[r5,#0x10]
;;;4312   
;;;4313   adc_ch_net++;
00341a  f1070701          ADD      r7,r7,#1
;;;4314   adc_ch_net&=1;
00341e  f0070001          AND      r0,r7,#1
003422  7468              STRB     r0,[r5,#0x11]
;;;4315   
;;;4316   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4317   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4318   
;;;4319   if(adc_ch_net)
;;;4320   	{
;;;4321   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4322   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4323   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
003424  4a34              LDR      r2,|L1.13560|
003426  b130              CBZ      r0,|L1.13366|
003428  6810              LDR      r0,[r2,#0]
00342a  f02000ff          BIC      r0,r0,#0xff
00342e  f1000004          ADD      r0,r0,#4
003432  6010              STR      r0,[r2,#0]
003434  e03d              B        |L1.13490|
                  |L1.13366|
;;;4324   	}
;;;4325   else
;;;4326   	{
;;;4327   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4328   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4329   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
003436  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
003438  0708              LSLS     r0,r1,#28
00343a  d406              BMI      |L1.13386|
00343c  6810              LDR      r0,[r2,#0]
00343e  f02000ff          BIC      r0,r0,#0xff
003442  f1000001          ADD      r0,r0,#1
003446  6010              STR      r0,[r2,#0]
003448  e005              B        |L1.13398|
                  |L1.13386|
;;;4330   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
00344a  6810              LDR      r0,[r2,#0]
00344c  f02000ff          BIC      r0,r0,#0xff
003450  f1000002          ADD      r0,r0,#2
003454  6010              STR      r0,[r2,#0]
                  |L1.13398|
;;;4331   
;;;4332   
;;;4333   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
003456  482d              LDR      r0,|L1.13580|
003458  6803              LDR      r3,[r0,#0]
00345a  f0435380          ORR      r3,r3,#0x10000000
00345e  6003              STR      r3,[r0,#0]
;;;4334   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
003460  6a03              LDR      r3,[r0,#0x20]
003462  f0434380          ORR      r3,r3,#0x40000000
003466  6203              STR      r3,[r0,#0x20]
;;;4335   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
003468  6e03              LDR      r3,[r0,#0x60]
00346a  f0436380          ORR      r3,r3,#0x4000000
00346e  6603              STR      r3,[r0,#0x60]
;;;4336   
;;;4337   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
003470  07cb              LSLS     r3,r1,#31
003472  d00a              BEQ      |L1.13450|
;;;4338   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
003474  6943              LDR      r3,[r0,#0x14]
003476  f0435380          ORR      r3,r3,#0x10000000
00347a  6143              STR      r3,[r0,#0x14]
                  |L1.13436|
;;;4339   
;;;4340   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
00347c  078b              LSLS     r3,r1,#30
00347e  d409              BMI      |L1.13460|
003480  6b43              LDR      r3,[r0,#0x34]
003482  f0234380          BIC      r3,r3,#0x40000000
003486  6343              STR      r3,[r0,#0x34]
003488  e008              B        |L1.13468|
                  |L1.13450|
00348a  6943              LDR      r3,[r0,#0x14]         ;4337
00348c  f0235380          BIC      r3,r3,#0x10000000     ;4337
003490  6143              STR      r3,[r0,#0x14]         ;4337
003492  e7f3              B        |L1.13436|
                  |L1.13460|
;;;4341   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
003494  6b43              LDR      r3,[r0,#0x34]
003496  f0434380          ORR      r3,r3,#0x40000000
00349a  6343              STR      r3,[r0,#0x34]
                  |L1.13468|
;;;4342   
;;;4343   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
00349c  0749              LSLS     r1,r1,#29
00349e  d404              BMI      |L1.13482|
0034a0  6f41              LDR      r1,[r0,#0x74]
0034a2  f0216180          BIC      r1,r1,#0x4000000
0034a6  6741              STR      r1,[r0,#0x74]
0034a8  e003              B        |L1.13490|
                  |L1.13482|
;;;4344   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0034aa  6f41              LDR      r1,[r0,#0x74]
0034ac  f0416180          ORR      r1,r1,#0x4000000
0034b0  6741              STR      r1,[r0,#0x74]
                  |L1.13490|
;;;4345   	}
;;;4346   	
;;;4347   
;;;4348   
;;;4349   
;;;4350   LPC_ADC->ADCR |=  (1<<24);
0034b2  6810              LDR      r0,[r2,#0]
0034b4  f0407080          ORR      r0,r0,#0x1000000
0034b8  6010              STR      r0,[r2,#0]
;;;4351   
;;;4352   }
0034ba  e8bd81f0          POP      {r4-r8,pc}
;;;4353   
                          ENDP

                  avg_hndl PROC
;;;4610   //-----------------------------------------------
;;;4611   void avg_hndl(void)
0034be  b5f0              PUSH     {r4-r7,lr}
;;;4612   { 
;;;4613   char i;
;;;4614   
;;;4615   //#define AVGCNTMAX	5
;;;4616   if(avg_main_cnt)
0034c0  4d0f              LDR      r5,|L1.13568|
0034c2  3dee              SUBS     r5,r5,#0xee
0034c4  f9b50034          LDRSH    r0,[r5,#0x34]  ; avg_main_cnt
0034c8  b118              CBZ      r0,|L1.13522|
;;;4617   	{
;;;4618   	avg_main_cnt--;
0034ca  f1a00001          SUB      r0,r0,#1
0034ce  86a8              STRH     r0,[r5,#0x34]
;;;4619   	goto avg_hndl_end;
0034d0  e0b3              B        |L1.13882|
                  |L1.13522|
0034d2  e01d              B        |L1.13584|
                  |L1.13524|
                          DCD      load_I
                  |L1.13528|
                          DCD      Isumm
                  |L1.13532|
                          DCD      NUMINV
                  |L1.13536|
                          DCD      inv
                  |L1.13540|
                          DCD      a_ind
                  |L1.13544|
                          DCD      mnemo_cnt
                  |L1.13548|
                          DCD      MNEMO_ON
                  |L1.13552|
                          DCD      MNEMO_TIME
                  |L1.13556|
                          DCD      0x4002c000
                  |L1.13560|
                          DCD      0x40034000
                  |L1.13564|
                          DCD      0xe000e100
                  |L1.13568|
                          DCD      ||area_number.25||+0xee
                  |L1.13572|
                          DCD      ||.bss||+0x42c
                  |L1.13576|
                          DCD      ||.bss||+0xc
                  |L1.13580|
                          DCD      0x2009c000
                  |L1.13584|
;;;4620   	}                 
;;;4621   
;;;4622   avg_num=0;
003510  f04f0600          MOV      r6,#0
003514  76ae              STRB     r6,[r5,#0x1a]
;;;4623   
;;;4624   for(i=0;i<NUMIST;i++)
003516  4630              MOV      r0,r6
003518  49f8              LDR      r1,|L1.14588|
;;;4625   	{
;;;4626   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
00351a  4bf7              LDR      r3,|L1.14584|
00351c  f9b12000          LDRSH    r2,[r1,#0]            ;4624
003520  e012              B        |L1.13640|
                  |L1.13602|
003522  ebc001c0          RSB      r1,r0,r0,LSL #3
003526  eb011100          ADD      r1,r1,r0,LSL #4
00352a  eb030181          ADD      r1,r3,r1,LSL #2
00352e  788c              LDRB     r4,[r1,#2]
003530  2c01              CMP      r4,#1
003532  d106              BNE      |L1.13634|
003534  78c9              LDRB     r1,[r1,#3]
003536  2914              CMP      r1,#0x14
003538  d203              BCS      |L1.13634|
00353a  7ea9              LDRB     r1,[r5,#0x1a]  ; avg_num
00353c  f1010101          ADD      r1,r1,#1
003540  76a9              STRB     r1,[r5,#0x1a]
                  |L1.13634|
003542  f1000001          ADD      r0,r0,#1              ;4624
003546  b2c0              UXTB     r0,r0                 ;4624
                  |L1.13640|
003548  4290              CMP      r0,r2                 ;4624
00354a  dbea              BLT      |L1.13602|
;;;4627   	}
;;;4628   
;;;4629   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4630   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4631   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4632   
;;;4633   	
;;;4634   if(avg_num<2)
00354c  7eaf              LDRB     r7,[r5,#0x1a]  ; avg_num
00354e  2f02              CMP      r7,#2
003550  d373              BCC      |L1.13882|
;;;4635   	{
;;;4636   	goto avg_hndl_end;
;;;4637   	}
;;;4638   	
;;;4639   else
;;;4640   	{
;;;4641   	i_avg_min=5000;
003552  4ceb              LDR      r4,|L1.14592|
003554  f2413088          MOV      r0,#0x1388
003558  6220              STR      r0,[r4,#0x20]  ; i_avg_min
;;;4642   	i_avg_max=0;
00355a  61e6              STR      r6,[r4,#0x1c]  ; i_avg_max
;;;4643   	i_avg_summ=0;
00355c  6266              STR      r6,[r4,#0x24]  ; i_avg_summ
;;;4644   	for(i=0;i<NUMIST;i++)
00355e  f04f0100          MOV      r1,#0
003562  e01c              B        |L1.13726|
                  |L1.13668|
;;;4645   		{
;;;4646   		if(bps[i]._state==bsWRK)
003564  ebc100c1          RSB      r0,r1,r1,LSL #3
003568  eb001001          ADD      r0,r0,r1,LSL #4
00356c  eb030080          ADD      r0,r3,r0,LSL #2
003570  f890c002          LDRB     r12,[r0,#2]
003574  f1bc0f01          CMP      r12,#1
003578  d10e              BNE      |L1.13720|
;;;4647   			{
;;;4648   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
00357a  6a40              LDR      r0,[r0,#0x24]
00357c  f8d4c01c          LDR      r12,[r4,#0x1c]  ; i_avg_max
003580  4560              CMP      r0,r12
003582  dd00              BLE      |L1.13702|
003584  61e0              STR      r0,[r4,#0x1c]  ; i_avg_max
                  |L1.13702|
;;;4649   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
003586  f8d4c020          LDR      r12,[r4,#0x20]  ; i_avg_min
00358a  4560              CMP      r0,r12
00358c  da00              BGE      |L1.13712|
00358e  6220              STR      r0,[r4,#0x20]  ; i_avg_min
                  |L1.13712|
;;;4650   			
;;;4651   			i_avg_summ+=bps[i]._Ii;
003590  f8d4c024          LDR      r12,[r4,#0x24]  ; i_avg_summ
003594  4460              ADD      r0,r0,r12
003596  6260              STR      r0,[r4,#0x24]  ; i_avg_summ
                  |L1.13720|
003598  f1010101          ADD      r1,r1,#1              ;4644
00359c  b2c9              UXTB     r1,r1                 ;4644
                  |L1.13726|
00359e  4291              CMP      r1,r2                 ;4644
0035a0  dbe0              BLT      |L1.13668|
;;;4652   			}
;;;4653   		}
;;;4654   	i_avg=i_avg_summ/avg_num;	
0035a2  6a60              LDR      r0,[r4,#0x24]  ; i_avg_summ
0035a4  fb90f7f7          SDIV     r7,r0,r7
0035a8  62a7              STR      r7,[r4,#0x28]  ; i_avg
;;;4655   	
;;;4656   	if(i_avg_min==0)i_avg_min=1;
0035aa  6a20              LDR      r0,[r4,#0x20]  ; i_avg_min
0035ac  2101              MOVS     r1,#1                 ;4626
0035ae  b900              CBNZ     r0,|L1.13746|
0035b0  6221              STR      r1,[r4,#0x20]  ; i_avg_min
                  |L1.13746|
;;;4657   
;;;4658   	avg=i_avg_max;
0035b2  69e0              LDR      r0,[r4,#0x1c]  ; i_avg_max
;;;4659   	avg*=100;
0035b4  f04f0c64          MOV      r12,#0x64
0035b8  fb00f00c          MUL      r0,r0,r12
;;;4660   	avg/=i_avg_min;
0035bc  f8d4c020          LDR      r12,[r4,#0x20]  ; i_avg_min
0035c0  fb90f0fc          SDIV     r0,r0,r12
0035c4  62e0              STR      r0,[r4,#0x2c]  ; avg
;;;4661   
;;;4662   	if(avg>160) bAVG=1;
0035c6  28a0              CMP      r0,#0xa0
0035c8  dd00              BLE      |L1.13772|
0035ca  7669              STRB     r1,[r5,#0x19]
                  |L1.13772|
;;;4663   	if(avg<120) bAVG=0;
0035cc  2878              CMP      r0,#0x78
0035ce  da00              BGE      |L1.13778|
0035d0  766e              STRB     r6,[r5,#0x19]
                  |L1.13778|
;;;4664   
;;;4665   	if(bAVG==1)
0035d2  7e68              LDRB     r0,[r5,#0x19]  ; bAVG
0035d4  2801              CMP      r0,#1
0035d6  d130              BNE      |L1.13882|
;;;4666   		{
;;;4667   		for(i=0;i<NUMIST;i++)
0035d8  f04f0100          MOV      r1,#0
;;;4668   			{
;;;4669   			if(bps[i]._state==bsWRK)
;;;4670   				{
;;;4671   				if(bps[i]._Ii>i_avg)bps[i]._x_--;
;;;4672   				if(bps[i]._Ii<i_avg)bps[i]._x_++;
;;;4673   			
;;;4674   				if(bps[i]._x_<-50)bps[i]._x_=-50;
0035dc  f06f0431          MVN      r4,#0x31
0035e0  e029              B        |L1.13878|
                  |L1.13794|
0035e2  ebc100c1          RSB      r0,r1,r1,LSL #3       ;4669
0035e6  eb001001          ADD      r0,r0,r1,LSL #4       ;4669
0035ea  eb030080          ADD      r0,r3,r0,LSL #2       ;4669
0035ee  7885              LDRB     r5,[r0,#2]            ;4669
0035f0  2d01              CMP      r5,#1                 ;4669
0035f2  d11d              BNE      |L1.13872|
0035f4  6a45              LDR      r5,[r0,#0x24]         ;4671
0035f6  42bd              CMP      r5,r7                 ;4671
0035f8  dd05              BLE      |L1.13830|
0035fa  f8b05050          LDRH     r5,[r0,#0x50]         ;4671
0035fe  f1a50501          SUB      r5,r5,#1              ;4671
003602  f8a05050          STRH     r5,[r0,#0x50]         ;4671
                  |L1.13830|
003606  da05              BGE      |L1.13844|
003608  f8b05050          LDRH     r5,[r0,#0x50]         ;4672
00360c  f1050501          ADD      r5,r5,#1              ;4672
003610  f8a05050          STRH     r5,[r0,#0x50]         ;4672
                  |L1.13844|
003614  f9b05050          LDRSH    r5,[r0,#0x50]
003618  42a5              CMP      r5,r4
00361a  da01              BGE      |L1.13856|
00361c  f8a04050          STRH     r4,[r0,#0x50]
                  |L1.13856|
;;;4675   				if(bps[i]._x_>50)bps[i]._x_=50;	
003620  f9b05050          LDRSH    r5,[r0,#0x50]
003624  2d32              CMP      r5,#0x32
003626  dd03              BLE      |L1.13872|
003628  f04f0532          MOV      r5,#0x32
00362c  f8a05050          STRH     r5,[r0,#0x50]
                  |L1.13872|
003630  f1010101          ADD      r1,r1,#1              ;4667
003634  b2c9              UXTB     r1,r1                 ;4667
                  |L1.13878|
003636  4291              CMP      r1,r2                 ;4667
003638  dbd3              BLT      |L1.13794|
                  |L1.13882|
;;;4676   				}
;;;4677   			}		
;;;4678   		}			
;;;4679   	}   	 
;;;4680   
;;;4681   
;;;4682   avg_hndl_end:
;;;4683   __nop();  
00363a  bf00              NOP      
;;;4684   }
00363c  bdf0              POP      {r4-r7,pc}
;;;4685   
                          ENDP

                  rele_hndl PROC
;;;4698   //*************-----------------------------------------------
;;;4699   void rele_hndl(void)
00363e  e92d5ff0          PUSH     {r4-r12,lr}
;;;4700   {
;;;4701   //static char cnt_rel_sam;
;;;4702   //char temp;
;;;4703   
;;;4704   //temp=0;
;;;4705   
;;;4706   
;;;4707   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003642  48b0              LDR      r0,|L1.14596|
003644  6801              LDR      r1,[r0,#0]
003646  4ab0              LDR      r2,|L1.14600|
003648  ea010102          AND      r1,r1,r2
00364c  6001              STR      r1,[r0,#0]
;;;4708   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
00364e  4caf              LDR      r4,|L1.14604|
003650  6821              LDR      r1,[r4,#0]
003652  f441717c          ORR      r1,r1,#0x3f0
003656  6021              STR      r1,[r4,#0]
;;;4709   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003658  69c1              LDR      r1,[r0,#0x1c]
00365a  f4212140          BIC      r1,r1,#0xc0000
00365e  61c1              STR      r1,[r0,#0x1c]
;;;4710   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003660  6e21              LDR      r1,[r4,#0x60]
003662  f0417100          ORR      r1,r1,#0x2000000
003666  6621              STR      r1,[r4,#0x60]
;;;4711   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003668  6841              LDR      r1,[r0,#4]
00366a  f0216140          BIC      r1,r1,#0xc000000
00366e  6041              STR      r1,[r0,#4]
;;;4712   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003670  6820              LDR      r0,[r4,#0]
003672  f0405000          ORR      r0,r0,#0x20000000
003676  6020              STR      r0,[r4,#0]
;;;4713   
;;;4714   
;;;4715   
;;;4716   
;;;4717   
;;;4718   
;;;4719   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003678  48a6              LDR      r0,|L1.14612|
00367a  4da5              LDR      r5,|L1.14608|
00367c  49a7              LDR      r1,|L1.14620|
00367e  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003680  48a5              LDR      r0,|L1.14616|
003682  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003686  f9b11000          LDRSH    r1,[r1,#0]
00368a  7800              LDRB     r0,[r0,#0]
00368c  4313              ORRS     r3,r3,r2
00368e  d007              BEQ      |L1.13984|
003690  b130              CBZ      r0,|L1.13984|
003692  2905              CMP      r1,#5
003694  dd04              BLE      |L1.13984|
;;;4720   	{
;;;4721   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003696  69a3              LDR      r3,[r4,#0x18]
003698  f4437380          ORR      r3,r3,#0x100
00369c  61a3              STR      r3,[r4,#0x18]
00369e  e003              B        |L1.13992|
                  |L1.13984|
;;;4722   	}
;;;4723   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
0036a0  69e3              LDR      r3,[r4,#0x1c]
0036a2  f4437380          ORR      r3,r3,#0x100
0036a6  61e3              STR      r3,[r4,#0x1c]
                  |L1.13992|
;;;4724   
;;;4725   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
0036a8  f8953088          LDRB     r3,[r5,#0x88]  ; bat
0036ac  4313              ORRS     r3,r3,r2
0036ae  d007              BEQ      |L1.14016|
0036b0  b130              CBZ      r0,|L1.14016|
0036b2  2905              CMP      r1,#5
0036b4  dd04              BLE      |L1.14016|
;;;4726   	{
;;;4727   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
0036b6  69a0              LDR      r0,[r4,#0x18]
0036b8  f0400040          ORR      r0,r0,#0x40
0036bc  61a0              STR      r0,[r4,#0x18]
0036be  e003              B        |L1.14024|
                  |L1.14016|
;;;4728   	}
;;;4729   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
0036c0  69e0              LDR      r0,[r4,#0x1c]
0036c2  f0400040          ORR      r0,r0,#0x40
0036c6  61e0              STR      r0,[r4,#0x1c]
                  |L1.14024|
;;;4730   
;;;4731   
;;;4732   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
0036c8  20d2              MOVS     r0,#0xd2
0036ca  f7fffffe          BL       mess_find_unvol
0036ce  4d94              LDR      r5,|L1.14624|
0036d0  b110              CBZ      r0,|L1.14040|
0036d2  6828              LDR      r0,[r5,#0]  ; mess_data
0036d4  2864              CMP      r0,#0x64
0036d6  d04a              BEQ      |L1.14190|
                  |L1.14040|
;;;4733   	{
;;;4734   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4735   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4736   	}
;;;4737   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
0036d8  69e0              LDR      r0,[r4,#0x1c]
0036da  f0405000          ORR      r0,r0,#0x20000000
0036de  61e0              STR      r0,[r4,#0x1c]
                  |L1.14048|
;;;4738   
;;;4739   
;;;4740   #ifndef UKU2071x
;;;4741   //Реле аварии сети
;;;4742   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4743   	{
;;;4744   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4745   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4746   	}
;;;4747   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4748   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4749   #endif
;;;4750   #ifdef UKU2071x
;;;4751   //Реле аварии сети
;;;4752   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
0036e0  20d2              MOVS     r0,#0xd2
0036e2  f7fffffe          BL       mess_find_unvol
;;;4753   	{
;;;4754   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4755   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4756   	}
;;;4757   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
0036e6  4e8f              LDR      r6,|L1.14628|
0036e8  b110              CBZ      r0,|L1.14064|
0036ea  6828              LDR      r0,[r5,#0]            ;4752  ; mess_data
0036ec  2866              CMP      r0,#0x66              ;4752
0036ee  d04d              BEQ      |L1.14220|
                  |L1.14064|
0036f0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0036f2  07c0              LSLS     r0,r0,#31
0036f4  d056              BEQ      |L1.14244|
;;;4758   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
0036f6  6fa0              LDR      r0,[r4,#0x78]
0036f8  f0407000          ORR      r0,r0,#0x2000000
0036fc  67a0              STR      r0,[r4,#0x78]
                  |L1.14078|
;;;4759   #endif
;;;4760   
;;;4761   #ifdef UKU_3U
;;;4762   //Реле аварий батарей
;;;4763   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4764   	{
;;;4765   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4766   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4767        }
;;;4768   else 
;;;4769   	{
;;;4770   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4771        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4772   	} 
;;;4773   
;;;4774   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4775   	{
;;;4776   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4777   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4778        }
;;;4779   else 
;;;4780   	{
;;;4781   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4782        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4783   	} 
;;;4784   
;;;4785   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4786   	{
;;;4787   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4788   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4789        }
;;;4790   else 
;;;4791   	{
;;;4792   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4793        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4794   	} 
;;;4795   
;;;4796   #endif
;;;4797   
;;;4798   
;;;4799   #ifdef UKU_GLONASS
;;;4800   //Реле аварий батарей
;;;4801   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4802   	{
;;;4803   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4804   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4805        }
;;;4806   else 
;;;4807   	{
;;;4808   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4809        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4810   	} 
;;;4811   
;;;4812   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4813   	{
;;;4814   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4815   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4816        }
;;;4817   else 
;;;4818   	{
;;;4819   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4820        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4821   	} 
;;;4822   
;;;4823   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4824   	{
;;;4825   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4826   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4827        }
;;;4828   else 
;;;4829   	{
;;;4830   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4831        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4832   	} 
;;;4833   
;;;4834   #endif
;;;4835   
;;;4836   #ifdef U 
;;;4837   
;;;4838   #endif
;;;4839   
;;;4840   #ifdef UKU_RSTKM
;;;4841   
;;;4842   //Реле общей аварии
;;;4843   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4844   	{
;;;4845   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4846   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4847   	}
;;;4848   else 
;;;4849   	{
;;;4850        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;4851             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4852             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4853             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;4854             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4855        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4856   	}
;;;4857   	
;;;4858   
;;;4859   //Реле освещения
;;;4860   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4861   	{
;;;4862   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4863   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4864        }
;;;4865   else 
;;;4866   	{
;;;4867   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4868        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4869   	}
;;;4870   
;;;4871   
;;;4872   //Реле выключения нагрузки
;;;4873   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4874   	{
;;;4875   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4876   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4877        }
;;;4878   else if(tloaddisable_cmnd==0)
;;;4879   	{
;;;4880   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4881   	}
;;;4882   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4883   	{
;;;4884   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4885   	}
;;;4886   
;;;4887   else 
;;;4888   	{
;;;4889   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4890        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4891   	} 
;;;4892   
;;;4893   //Реле осевого вентилятора
;;;4894   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4895   	{
;;;4896   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4897   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4898   	}
;;;4899   else 
;;;4900   	{
;;;4901   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4902        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4903   	} 
;;;4904   
;;;4905   #endif
;;;4906   
;;;4907   #ifdef UKU_KONTUR
;;;4908   
;;;4909   //Реле общей аварии
;;;4910   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4911   	{
;;;4912   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4913   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4914   	}
;;;4915   else 
;;;4916   	{
;;;4917        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4918             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4919             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4920             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4921             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4922        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4923   	}
;;;4924   
;;;4925   	
;;;4926   //rel_warm_plazma=0;
;;;4927   //Реле освещения   
;;;4928   /*
;;;4929   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4930   	{
;;;4931   	if(mess_data[1]==0)
;;;4932   		{
;;;4933   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4934   		rel_warm_plazma=1;
;;;4935   		}
;;;4936   	else if(mess_data[1]==1) 
;;;4937   		{
;;;4938   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4939   		rel_warm_plazma=2;
;;;4940   		}
;;;4941        }
;;;4942   else 
;;;4943   	{
;;;4944   	if(warm_stat_k==wsOFF) 
;;;4945   		{
;;;4946   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4947   		rel_warm_plazma=3;
;;;4948   		}
;;;4949        else 
;;;4950   		{
;;;4951   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4952   		rel_warm_plazma=4;
;;;4953   		}
;;;4954   	}
;;;4955   */
;;;4956   //Реле освещения
;;;4957   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4958   	{
;;;4959   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4960   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4961        }
;;;4962   else 
;;;4963   	{
;;;4964   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4965        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4966   	}
;;;4967   
;;;4968   
;;;4969   
;;;4970   //Реле выключения нагрузки
;;;4971   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4972   	{
;;;4973   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4974   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4975        }
;;;4976   else if(tloaddisable_cmnd==0)
;;;4977   	{
;;;4978   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4979   	}
;;;4980   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4981   	{
;;;4982   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4983   	}
;;;4984   
;;;4985   else 
;;;4986   	{
;;;4987   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4988        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4989   	} 
;;;4990   
;;;4991   //Реле осевого вентилятора или отопителя
;;;4992   if(RELE_LOG)
;;;4993   	{
;;;4994   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4995   		{
;;;4996   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4997   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4998   		}
;;;4999   	else 
;;;5000   		{
;;;5001   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5002   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5003   		} 
;;;5004   
;;;5005   	}
;;;5006   else 
;;;5007   	{
;;;5008   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5009   		{
;;;5010   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5011   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5012   		}
;;;5013   	else 
;;;5014   		{
;;;5015   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5016   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5017   		} 
;;;5018   	}
;;;5019   #endif
;;;5020   
;;;5021   #ifdef UKU_6U
;;;5022   //Реле аварий батарей
;;;5023   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5024   	{
;;;5025   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5026   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5027        }
;;;5028   else 
;;;5029   	{
;;;5030   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5031        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5032   	} 
;;;5033   
;;;5034   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5035   	{
;;;5036   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5037   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5038       }
;;;5039   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5040   	{
;;;5041   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5042   		{
;;;5043   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5044   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5045        	}
;;;5046   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5047   	}
;;;5048   else 
;;;5049   	{
;;;5050   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5051       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5052   	} 
;;;5053   
;;;5054   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5055   	{
;;;5056   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5057   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5058        }
;;;5059   else 
;;;5060   	{
;;;5061   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5062        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5063   	} 
;;;5064   
;;;5065   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5066   	{
;;;5067   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5068   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5069   	}
;;;5070   else if((NPN_OUT==npnoRELEVENT))
;;;5071   	{
;;;5072   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5073   		{
;;;5074   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5075   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5076       	}
;;;5077   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5078   	}
;;;5079   else 
;;;5080   	{
;;;5081   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5082   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5083   	}
;;;5084   
;;;5085   #endif
;;;5086   
;;;5087   #ifdef UKU_220
;;;5088   //Реле аварий батарей
;;;5089   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5090   	{
;;;5091   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5092   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5093        }
;;;5094   else 
;;;5095   	{
;;;5096   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5097        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5098   	} 
;;;5099   
;;;5100   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5101   	{
;;;5102   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5103   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5104        }
;;;5105   else 
;;;5106   	{
;;;5107   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5108        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5109   	} 
;;;5110   
;;;5111   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5112   	{
;;;5113   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5114   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5115   	}
;;;5116   else 
;;;5117   	{
;;;5118   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5119   		{
;;;5120   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5121   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5122   		}
;;;5123   	else 
;;;5124   		{
;;;5125   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5126        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5127   		}
;;;5128   	}
;;;5129   
;;;5130   #endif
;;;5131   
;;;5132   #ifdef UKU_220_V2
;;;5133   //Реле аварий батарей
;;;5134   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5135   	{
;;;5136   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5137   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5138        }
;;;5139   else 
;;;5140   	{
;;;5141   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5142        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5143   	} 
;;;5144   
;;;5145   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5146   	{
;;;5147   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5148   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5149        }
;;;5150   else 
;;;5151   	{
;;;5152   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5153        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5154   	} 
;;;5155   
;;;5156   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5157   	{
;;;5158   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5159   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5160   	}
;;;5161   else 
;;;5162   	{
;;;5163   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5164   		{
;;;5165   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5166   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5167   		}
;;;5168   	else 
;;;5169   		{
;;;5170   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5171        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5172   		}
;;;5173   	}
;;;5174   
;;;5175   #endif
;;;5176   
;;;5177   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5178   
;;;5179   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
0036fe  488a              LDR      r0,|L1.14632|
;;;5180   	{
;;;5181   	#ifndef UKU2071x
;;;5182   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5183   		{
;;;5184   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5185   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5186   		}
;;;5187   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5188   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5189   	#endif
;;;5190   
;;;5191   	#ifdef UKU2071x
;;;5192   		#ifndef APSENERGIA
;;;5193   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5194   			{
;;;5195   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5196   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5197   			}
;;;5198   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5199   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5200   		#endif
;;;5201   
;;;5202   		#ifdef APSENERGIA
;;;5203   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5204   			{
;;;5205   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5206   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5207   			}
;;;5208   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5209   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5210   		#endif
;;;5211   
;;;5212   	#endif
;;;5213   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5214   		{
;;;5215   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5216   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5217   	     }
;;;5218   	else 
;;;5219   		{
;;;5220   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003700  4f8a              LDR      r7,|L1.14636|
003702  8800              LDRH     r0,[r0,#0]            ;5179  ; AUSW_MAIN
003704  f5a041aa          SUB      r1,r0,#0x5500         ;5179
003708  39fa              SUBS     r1,r1,#0xfa           ;5179
00370a  d001              BEQ      |L1.14096|
00370c  1e49              SUBS     r1,r1,#1              ;5179
00370e  d173              BNE      |L1.14328|
                  |L1.14096|
003710  20d2              MOVS     r0,#0xd2              ;5203
003712  f7fffffe          BL       mess_find_unvol
003716  b110              CBZ      r0,|L1.14110|
003718  6828              LDR      r0,[r5,#0]            ;5203  ; mess_data
00371a  2866              CMP      r0,#0x66              ;5203
00371c  d047              BEQ      |L1.14254|
                  |L1.14110|
00371e  20d2              MOVS     r0,#0xd2              ;5208
003720  f7fffffe          BL       mess_find_unvol
003724  b110              CBZ      r0,|L1.14124|
003726  6828              LDR      r0,[r5,#0]            ;5208  ; mess_data
003728  2872              CMP      r0,#0x72              ;5208
00372a  d04d              BEQ      |L1.14280|
                  |L1.14124|
00372c  6fa0              LDR      r0,[r4,#0x78]         ;5209
00372e  f0407000          ORR      r0,r0,#0x2000000      ;5209
003732  67a0              STR      r0,[r4,#0x78]         ;5209
                  |L1.14132|
003734  20d2              MOVS     r0,#0xd2              ;5213
003736  f7fffffe          BL       mess_find_unvol
00373a  b110              CBZ      r0,|L1.14146|
00373c  6828              LDR      r0,[r5,#0]            ;5213  ; mess_data
00373e  286a              CMP      r0,#0x6a              ;5213
003740  d047              BEQ      |L1.14290|
                  |L1.14146|
003742  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003744  4238              TST      r0,r7
003746  d052              BEQ      |L1.14318|
;;;5221   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003748  69a0              LDR      r0,[r4,#0x18]
00374a  f0400080          ORR      r0,r0,#0x80
00374e  61a0              STR      r0,[r4,#0x18]
                  |L1.14160|
;;;5222   		} 
;;;5223   
;;;5224   	//Реле аварий батарей
;;;5225   	#ifndef APSENERGIA
;;;5226   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5227   		{
;;;5228   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5229   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5230        	}
;;;5231   	else 
;;;5232   		{
;;;5233   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5234        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5235   		}
;;;5236   	#endif
;;;5237   	#ifdef APSENERGIA
;;;5238   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003750  20d2              MOVS     r0,#0xd2
003752  f7fffffe          BL       mess_find_unvol
003756  b110              CBZ      r0,|L1.14174|
003758  6828              LDR      r0,[r5,#0]  ; mess_data
00375a  2867              CMP      r0,#0x67
00375c  d04d              BEQ      |L1.14330|
                  |L1.14174|
;;;5239   		{
;;;5240   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5241   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5242        	}
;;;5243   	else 
;;;5244   		{
;;;5245   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
00375e  4874              LDR      r0,|L1.14640|
003760  7800              LDRB     r0,[r0,#0]  ; apsEnergiaStat
003762  b380              CBZ      r0,|L1.14278|
;;;5246   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003764  69e0              LDR      r0,[r4,#0x1c]
003766  f0400010          ORR      r0,r0,#0x10
00376a  61e0              STR      r0,[r4,#0x1c]
00376c  e1f6              B        |L1.15196|
                  |L1.14190|
00376e  6868              LDR      r0,[r5,#4]            ;4734  ; mess_data
003770  2801              CMP      r0,#1                 ;4734
003772  d006              BEQ      |L1.14210|
003774  2800              CMP      r0,#0                 ;4735
003776  d1b3              BNE      |L1.14048|
003778  69e0              LDR      r0,[r4,#0x1c]         ;4735
00377a  f0405000          ORR      r0,r0,#0x20000000     ;4735
00377e  61e0              STR      r0,[r4,#0x1c]         ;4735
003780  e7ae              B        |L1.14048|
                  |L1.14210|
003782  69a0              LDR      r0,[r4,#0x18]         ;4734
003784  f0405000          ORR      r0,r0,#0x20000000     ;4734
003788  61a0              STR      r0,[r4,#0x18]         ;4734
00378a  e7a9              B        |L1.14048|
                  |L1.14220|
00378c  6868              LDR      r0,[r5,#4]            ;4754  ; mess_data
00378e  b120              CBZ      r0,|L1.14234|
003790  6fa0              LDR      r0,[r4,#0x78]         ;4755
003792  f0407000          ORR      r0,r0,#0x2000000      ;4755
003796  67a0              STR      r0,[r4,#0x78]         ;4755
003798  e7b1              B        |L1.14078|
                  |L1.14234|
00379a  6fe0              LDR      r0,[r4,#0x7c]         ;4754
00379c  f0407000          ORR      r0,r0,#0x2000000      ;4754
0037a0  67e0              STR      r0,[r4,#0x7c]         ;4754
0037a2  e7ac              B        |L1.14078|
                  |L1.14244|
0037a4  6fe0              LDR      r0,[r4,#0x7c]         ;4757
0037a6  f0407000          ORR      r0,r0,#0x2000000      ;4757
0037aa  67e0              STR      r0,[r4,#0x7c]         ;4757
0037ac  e7a7              B        |L1.14078|
                  |L1.14254|
0037ae  6868              LDR      r0,[r5,#4]            ;5205  ; mess_data
0037b0  b120              CBZ      r0,|L1.14268|
0037b2  6fa0              LDR      r0,[r4,#0x78]         ;5206
0037b4  f0407000          ORR      r0,r0,#0x2000000      ;5206
0037b8  67a0              STR      r0,[r4,#0x78]         ;5206
0037ba  e7bb              B        |L1.14132|
                  |L1.14268|
0037bc  6fe0              LDR      r0,[r4,#0x7c]         ;5205
0037be  f0407000          ORR      r0,r0,#0x2000000      ;5205
0037c2  67e0              STR      r0,[r4,#0x7c]         ;5205
0037c4  e7b6              B        |L1.14132|
                  |L1.14278|
0037c6  e027              B        |L1.14360|
                  |L1.14280|
0037c8  6fe0              LDR      r0,[r4,#0x7c]         ;5208
0037ca  f0407000          ORR      r0,r0,#0x2000000      ;5208
0037ce  67e0              STR      r0,[r4,#0x7c]         ;5208
0037d0  e7b0              B        |L1.14132|
                  |L1.14290|
0037d2  6868              LDR      r0,[r5,#4]            ;5215  ; mess_data
0037d4  b130              CBZ      r0,|L1.14308|
0037d6  2801              CMP      r0,#1                 ;5216
0037d8  d1ba              BNE      |L1.14160|
0037da  69a0              LDR      r0,[r4,#0x18]         ;5216
0037dc  f0400080          ORR      r0,r0,#0x80           ;5216
0037e0  61a0              STR      r0,[r4,#0x18]         ;5216
0037e2  e7b5              B        |L1.14160|
                  |L1.14308|
0037e4  69e0              LDR      r0,[r4,#0x1c]         ;5215
0037e6  f0400080          ORR      r0,r0,#0x80           ;5215
0037ea  61e0              STR      r0,[r4,#0x1c]         ;5215
0037ec  e7b0              B        |L1.14160|
                  |L1.14318|
0037ee  69e0              LDR      r0,[r4,#0x1c]         ;5220
0037f0  f0400080          ORR      r0,r0,#0x80           ;5220
0037f4  61e0              STR      r0,[r4,#0x1c]         ;5220
0037f6  e7ab              B        |L1.14160|
                  |L1.14328|
0037f8  e013              B        |L1.14370|
                  |L1.14330|
0037fa  6868              LDR      r0,[r5,#4]            ;5240  ; mess_data
0037fc  b110              CBZ      r0,|L1.14340|
0037fe  2801              CMP      r0,#1                 ;5241
003800  d005              BEQ      |L1.14350|
003802  e1ab              B        |L1.15196|
                  |L1.14340|
003804  69e0              LDR      r0,[r4,#0x1c]         ;5240
003806  f0400010          ORR      r0,r0,#0x10           ;5240
00380a  61e0              STR      r0,[r4,#0x1c]         ;5240
00380c  e1a6              B        |L1.15196|
                  |L1.14350|
00380e  69a0              LDR      r0,[r4,#0x18]         ;5241
003810  f0400010          ORR      r0,r0,#0x10           ;5241
003814  61a0              STR      r0,[r4,#0x18]         ;5241
003816  e1a1              B        |L1.15196|
                  |L1.14360|
003818  69a0              LDR      r0,[r4,#0x18]         ;5245
00381a  f0400010          ORR      r0,r0,#0x10           ;5245
00381e  61a0              STR      r0,[r4,#0x18]         ;5245
003820  e19c              B        |L1.15196|
                  |L1.14370|
;;;5247   		}
;;;5248   	#endif
;;;5249   	}
;;;5250   
;;;5251   else	if(AUSW_MAIN==22023)
;;;5252   	{
;;;5253   
;;;5254   	//Реле аварий батарей
;;;5255   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5256   		{
;;;5257   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5258   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5259        	}
;;;5260   	else 
;;;5261   		{
;;;5262   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003822  f8df8110          LDR      r8,|L1.14644|
003826  f5a041ac          SUB      r1,r0,#0x5600         ;5251
00382a  3907              SUBS     r1,#7                 ;5251
00382c  d162              BNE      |L1.14580|
00382e  20d2              MOVS     r0,#0xd2              ;5255
003830  f7fffffe          BL       mess_find_unvol
003834  b110              CBZ      r0,|L1.14396|
003836  6828              LDR      r0,[r5,#0]            ;5255  ; mess_data
003838  2867              CMP      r0,#0x67              ;5255
00383a  d023              BEQ      |L1.14468|
                  |L1.14396|
00383c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003840  b370              CBZ      r0,|L1.14496|
;;;5263        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003842  69a0              LDR      r0,[r4,#0x18]
003844  f0400010          ORR      r0,r0,#0x10
003848  61a0              STR      r0,[r4,#0x18]
                  |L1.14410|
;;;5264   		} 
;;;5265   
;;;5266   
;;;5267   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5268   	#ifndef UKU2071x
;;;5269   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5270   		{
;;;5271   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5272   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5273   		}
;;;5274   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5275   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5276   	#endif
;;;5277   	#ifdef UKU2071x
;;;5278   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
00384a  20d2              MOVS     r0,#0xd2
00384c  f7fffffe          BL       mess_find_unvol
003850  b110              CBZ      r0,|L1.14424|
003852  6828              LDR      r0,[r5,#0]  ; mess_data
003854  2866              CMP      r0,#0x66
003856  d028              BEQ      |L1.14506|
                  |L1.14424|
;;;5279   		{
;;;5280   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5281   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5282   		}
;;;5283   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003858  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00385a  07c0              LSLS     r0,r0,#31
00385c  d031              BEQ      |L1.14530|
;;;5284   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
00385e  6fa0              LDR      r0,[r4,#0x78]
003860  f0407000          ORR      r0,r0,#0x2000000
003864  67a0              STR      r0,[r4,#0x78]
                  |L1.14438|
;;;5285   	#endif
;;;5286   
;;;5287   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003866  20d2              MOVS     r0,#0xd2
003868  f7fffffe          BL       mess_find_unvol
00386c  b110              CBZ      r0,|L1.14452|
00386e  6828              LDR      r0,[r5,#0]  ; mess_data
003870  286a              CMP      r0,#0x6a
003872  d02b              BEQ      |L1.14540|
                  |L1.14452|
;;;5288   		{
;;;5289   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5290   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5291   	     }
;;;5292   	else 
;;;5293   		{
;;;5294   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003874  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003876  4238              TST      r0,r7
003878  d037              BEQ      |L1.14570|
;;;5295   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
00387a  69a0              LDR      r0,[r4,#0x18]
00387c  f0400080          ORR      r0,r0,#0x80
003880  61a0              STR      r0,[r4,#0x18]
003882  e16b              B        |L1.15196|
                  |L1.14468|
003884  6868              LDR      r0,[r5,#4]            ;5257  ; mess_data
003886  b130              CBZ      r0,|L1.14486|
003888  2801              CMP      r0,#1                 ;5258
00388a  d1de              BNE      |L1.14410|
00388c  69a0              LDR      r0,[r4,#0x18]         ;5258
00388e  f0400010          ORR      r0,r0,#0x10           ;5258
003892  61a0              STR      r0,[r4,#0x18]         ;5258
003894  e7d9              B        |L1.14410|
                  |L1.14486|
003896  69e0              LDR      r0,[r4,#0x1c]         ;5257
003898  f0400010          ORR      r0,r0,#0x10           ;5257
00389c  61e0              STR      r0,[r4,#0x1c]         ;5257
00389e  e7d4              B        |L1.14410|
                  |L1.14496|
0038a0  69e0              LDR      r0,[r4,#0x1c]         ;5262
0038a2  f0400010          ORR      r0,r0,#0x10           ;5262
0038a6  61e0              STR      r0,[r4,#0x1c]         ;5262
0038a8  e7cf              B        |L1.14410|
                  |L1.14506|
0038aa  6868              LDR      r0,[r5,#4]            ;5280  ; mess_data
0038ac  b120              CBZ      r0,|L1.14520|
0038ae  69e0              LDR      r0,[r4,#0x1c]         ;5281
0038b0  f0407000          ORR      r0,r0,#0x2000000      ;5281
0038b4  61e0              STR      r0,[r4,#0x1c]         ;5281
0038b6  e7d6              B        |L1.14438|
                  |L1.14520|
0038b8  69a0              LDR      r0,[r4,#0x18]         ;5280
0038ba  f0407000          ORR      r0,r0,#0x2000000      ;5280
0038be  61a0              STR      r0,[r4,#0x18]         ;5280
0038c0  e7d1              B        |L1.14438|
                  |L1.14530|
0038c2  6ba0              LDR      r0,[r4,#0x38]         ;5283
0038c4  f0407000          ORR      r0,r0,#0x2000000      ;5283
0038c8  63a0              STR      r0,[r4,#0x38]         ;5283
0038ca  e7cc              B        |L1.14438|
                  |L1.14540|
0038cc  6868              LDR      r0,[r5,#4]            ;5289  ; mess_data
0038ce  b110              CBZ      r0,|L1.14550|
0038d0  2801              CMP      r0,#1                 ;5290
0038d2  d005              BEQ      |L1.14560|
0038d4  e142              B        |L1.15196|
                  |L1.14550|
0038d6  69e0              LDR      r0,[r4,#0x1c]         ;5289
0038d8  f0400080          ORR      r0,r0,#0x80           ;5289
0038dc  61e0              STR      r0,[r4,#0x1c]         ;5289
0038de  e13d              B        |L1.15196|
                  |L1.14560|
0038e0  69a0              LDR      r0,[r4,#0x18]         ;5290
0038e2  f0400080          ORR      r0,r0,#0x80           ;5290
0038e6  61a0              STR      r0,[r4,#0x18]         ;5290
0038e8  e138              B        |L1.15196|
                  |L1.14570|
0038ea  69e0              LDR      r0,[r4,#0x1c]         ;5294
0038ec  f0400080          ORR      r0,r0,#0x80           ;5294
0038f0  61e0              STR      r0,[r4,#0x1c]         ;5294
0038f2  e133              B        |L1.15196|
                  |L1.14580|
0038f4  e020              B        |L1.14648|
0038f6  0000              DCW      0x0000
                  |L1.14584|
                          DCD      bps
                  |L1.14588|
                          DCD      NUMIST
                  |L1.14592|
                          DCD      ||area_number.25||+0x80
                  |L1.14596|
                          DCD      0x4002c000
                  |L1.14600|
                          DCD      0xfff000ff
                  |L1.14604|
                          DCD      0x2009c000
                  |L1.14608|
                          DCD      bat
                  |L1.14612|
                          DCD      tbatdisable_stat
                  |L1.14616|
                          DCD      tbatdisable_cmnd
                  |L1.14620|
                          DCD      main_1Hz_cnt
                  |L1.14624|
                          DCD      mess_data
                  |L1.14628|
                          DCD      avar_ind_stat
                  |L1.14632|
                          DCD      AUSW_MAIN
                  |L1.14636|
                          DCD      0x100007f8
                  |L1.14640|
                          DCD      apsEnergiaStat
                  |L1.14644|
                          DCD      ips_bat_av_stat
                  |L1.14648|
;;;5296   		} 
;;;5297   	}
;;;5298   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003938  f5a041ac          SUB      r1,r0,#0x5600
00393c  391b              SUBS     r1,r1,#0x1b
00393e  d001              BEQ      |L1.14660|
003940  1e49              SUBS     r1,r1,#1
003942  d170              BNE      |L1.14886|
                  |L1.14660|
;;;5299   	{
;;;5300   	//Реле аварий батарей
;;;5301   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003944  20d2              MOVS     r0,#0xd2
003946  f7fffffe          BL       mess_find_unvol
00394a  b110              CBZ      r0,|L1.14674|
00394c  6828              LDR      r0,[r5,#0]  ; mess_data
00394e  2867              CMP      r0,#0x67
003950  d031              BEQ      |L1.14774|
                  |L1.14674|
;;;5302   		{
;;;5303   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5304   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5305        	}
;;;5306   	else 
;;;5307   		{
;;;5308   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003952  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003956  b3b8              CBZ      r0,|L1.14792|
;;;5309        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003958  69a0              LDR      r0,[r4,#0x18]
00395a  f0400010          ORR      r0,r0,#0x10
00395e  61a0              STR      r0,[r4,#0x18]
                  |L1.14688|
;;;5310   		} 
;;;5311   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5312   	#ifndef UKU2071x 
;;;5313   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5314   		{
;;;5315   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5316   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5317   		}
;;;5318   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5319   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5320   	#endif
;;;5321   	#ifdef UKU2071x 
;;;5322   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003960  20d2              MOVS     r0,#0xd2
003962  f7fffffe          BL       mess_find_unvol
003966  b110              CBZ      r0,|L1.14702|
003968  6828              LDR      r0,[r5,#0]  ; mess_data
00396a  2866              CMP      r0,#0x66
00396c  d037              BEQ      |L1.14814|
                  |L1.14702|
;;;5323   		{
;;;5324   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5325   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5326   		}
;;;5327   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
00396e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003970  07c0              LSLS     r0,r0,#31
003972  d040              BEQ      |L1.14838|
;;;5328   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003974  6fa0              LDR      r0,[r4,#0x78]
003976  f0407000          ORR      r0,r0,#0x2000000
00397a  67a0              STR      r0,[r4,#0x78]
                  |L1.14716|
;;;5329   	#endif
;;;5330   
;;;5331   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
00397c  20d2              MOVS     r0,#0xd2
00397e  f7fffffe          BL       mess_find_unvol
003982  b110              CBZ      r0,|L1.14730|
003984  6828              LDR      r0,[r5,#0]  ; mess_data
003986  286a              CMP      r0,#0x6a
003988  d03a              BEQ      |L1.14848|
                  |L1.14730|
;;;5332   		{
;;;5333   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5334   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5335   	     }
;;;5336   	else 
;;;5337   		{
;;;5338   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
00398a  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00398c  4238              TST      r0,r7
00398e  d045              BEQ      |L1.14876|
;;;5339   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003990  69a0              LDR      r0,[r4,#0x18]
003992  f0400080          ORR      r0,r0,#0x80
003996  61a0              STR      r0,[r4,#0x18]
                  |L1.14744|
;;;5340   		}
;;;5341   	//Реле аварии БПС
;;;5342   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003998  20d2              MOVS     r0,#0xd2
00399a  f7fffffe          BL       mess_find_unvol
00399e  b110              CBZ      r0,|L1.14758|
0039a0  6828              LDR      r0,[r5,#0]  ; mess_data
0039a2  286a              CMP      r0,#0x6a
0039a4  d040              BEQ      |L1.14888|
                  |L1.14758|
;;;5343   		{
;;;5344   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5345   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5346        	}
;;;5347   	else 
;;;5348   		{
;;;5349   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
0039a6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0039a8  4238              TST      r0,r7
0039aa  d04c              BEQ      |L1.14918|
;;;5350        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
0039ac  69a0              LDR      r0,[r4,#0x18]
0039ae  f0400020          ORR      r0,r0,#0x20
0039b2  61a0              STR      r0,[r4,#0x18]
0039b4  e0d2              B        |L1.15196|
                  |L1.14774|
0039b6  6868              LDR      r0,[r5,#4]            ;5303  ; mess_data
0039b8  b138              CBZ      r0,|L1.14794|
0039ba  2801              CMP      r0,#1                 ;5304
0039bc  d1d0              BNE      |L1.14688|
0039be  69a0              LDR      r0,[r4,#0x18]         ;5304
0039c0  f0400010          ORR      r0,r0,#0x10           ;5304
0039c4  61a0              STR      r0,[r4,#0x18]         ;5304
0039c6  e7cb              B        |L1.14688|
                  |L1.14792|
0039c8  e004              B        |L1.14804|
                  |L1.14794|
0039ca  69e0              LDR      r0,[r4,#0x1c]         ;5303
0039cc  f0400010          ORR      r0,r0,#0x10           ;5303
0039d0  61e0              STR      r0,[r4,#0x1c]         ;5303
0039d2  e7c5              B        |L1.14688|
                  |L1.14804|
0039d4  69e0              LDR      r0,[r4,#0x1c]         ;5308
0039d6  f0400010          ORR      r0,r0,#0x10           ;5308
0039da  61e0              STR      r0,[r4,#0x1c]         ;5308
0039dc  e7c0              B        |L1.14688|
                  |L1.14814|
0039de  6868              LDR      r0,[r5,#4]            ;5324  ; mess_data
0039e0  b120              CBZ      r0,|L1.14828|
0039e2  69e0              LDR      r0,[r4,#0x1c]         ;5325
0039e4  f0407000          ORR      r0,r0,#0x2000000      ;5325
0039e8  61e0              STR      r0,[r4,#0x1c]         ;5325
0039ea  e7c7              B        |L1.14716|
                  |L1.14828|
0039ec  69a0              LDR      r0,[r4,#0x18]         ;5324
0039ee  f0407000          ORR      r0,r0,#0x2000000      ;5324
0039f2  61a0              STR      r0,[r4,#0x18]         ;5324
0039f4  e7c2              B        |L1.14716|
                  |L1.14838|
0039f6  6ba0              LDR      r0,[r4,#0x38]         ;5327
0039f8  f0407000          ORR      r0,r0,#0x2000000      ;5327
0039fc  63a0              STR      r0,[r4,#0x38]         ;5327
0039fe  e7bd              B        |L1.14716|
                  |L1.14848|
003a00  6868              LDR      r0,[r5,#4]            ;5333  ; mess_data
003a02  b130              CBZ      r0,|L1.14866|
003a04  2801              CMP      r0,#1                 ;5334
003a06  d1c7              BNE      |L1.14744|
003a08  69a0              LDR      r0,[r4,#0x18]         ;5334
003a0a  f0400080          ORR      r0,r0,#0x80           ;5334
003a0e  61a0              STR      r0,[r4,#0x18]         ;5334
003a10  e7c2              B        |L1.14744|
                  |L1.14866|
003a12  69e0              LDR      r0,[r4,#0x1c]         ;5333
003a14  f0400080          ORR      r0,r0,#0x80           ;5333
003a18  61e0              STR      r0,[r4,#0x1c]         ;5333
003a1a  e7bd              B        |L1.14744|
                  |L1.14876|
003a1c  69e0              LDR      r0,[r4,#0x1c]         ;5338
003a1e  f0400080          ORR      r0,r0,#0x80           ;5338
003a22  61e0              STR      r0,[r4,#0x1c]         ;5338
003a24  e7b8              B        |L1.14744|
                  |L1.14886|
003a26  e013              B        |L1.14928|
                  |L1.14888|
003a28  6868              LDR      r0,[r5,#4]            ;5344  ; mess_data
003a2a  b110              CBZ      r0,|L1.14898|
003a2c  2801              CMP      r0,#1                 ;5345
003a2e  d005              BEQ      |L1.14908|
003a30  e094              B        |L1.15196|
                  |L1.14898|
003a32  69e0              LDR      r0,[r4,#0x1c]         ;5344
003a34  f0400020          ORR      r0,r0,#0x20           ;5344
003a38  61e0              STR      r0,[r4,#0x1c]         ;5344
003a3a  e08f              B        |L1.15196|
                  |L1.14908|
003a3c  69a0              LDR      r0,[r4,#0x18]         ;5345
003a3e  f0400020          ORR      r0,r0,#0x20           ;5345
003a42  61a0              STR      r0,[r4,#0x18]         ;5345
003a44  e08a              B        |L1.15196|
                  |L1.14918|
003a46  69e0              LDR      r0,[r4,#0x1c]         ;5349
003a48  f0400020          ORR      r0,r0,#0x20           ;5349
003a4c  61e0              STR      r0,[r4,#0x1c]         ;5349
003a4e  e085              B        |L1.15196|
                  |L1.14928|
;;;5351   		} 
;;;5352   	}
;;;5353   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003a50  f5a041ac          SUB      r1,r0,#0x5600
003a54  3911              SUBS     r1,r1,#0x11
003a56  d001              BEQ      |L1.14940|
003a58  310f              ADDS     r1,r1,#0xf
003a5a  d163              BNE      |L1.15140|
                  |L1.14940|
;;;5354   	{
;;;5355   	#ifndef UKU2071x 
;;;5356   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5357   		{
;;;5358   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5359   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5360   		}
;;;5361   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5362   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5363   	#endif
;;;5364   	#ifdef UKU2071x 
;;;5365   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003a5c  20d2              MOVS     r0,#0xd2
003a5e  f7fffffe          BL       mess_find_unvol
003a62  b110              CBZ      r0,|L1.14954|
003a64  6828              LDR      r0,[r5,#0]  ; mess_data
003a66  2866              CMP      r0,#0x66
003a68  d023              BEQ      |L1.15026|
                  |L1.14954|
;;;5366   		{
;;;5367   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5368   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5369   		}
;;;5370   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003a6a  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003a6c  07c0              LSLS     r0,r0,#31
003a6e  d02c              BEQ      |L1.15050|
;;;5371   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003a70  6fa0              LDR      r0,[r4,#0x78]
003a72  f0407000          ORR      r0,r0,#0x2000000
003a76  67a0              STR      r0,[r4,#0x78]
                  |L1.14968|
;;;5372   	#endif
;;;5373   	
;;;5374   	
;;;5375   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003a78  20d2              MOVS     r0,#0xd2
003a7a  f7fffffe          BL       mess_find_unvol
003a7e  b110              CBZ      r0,|L1.14982|
003a80  6828              LDR      r0,[r5,#0]  ; mess_data
003a82  286a              CMP      r0,#0x6a
003a84  d026              BEQ      |L1.15060|
                  |L1.14982|
;;;5376   		{
;;;5377   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5378   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5379   	     }
;;;5380   	else 
;;;5381   		{
;;;5382   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003a86  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003a88  4238              TST      r0,r7
003a8a  d031              BEQ      |L1.15088|
;;;5383   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003a8c  69a0              LDR      r0,[r4,#0x18]
003a8e  f0400080          ORR      r0,r0,#0x80
003a92  61a0              STR      r0,[r4,#0x18]
                  |L1.14996|
;;;5384   		} 
;;;5385   
;;;5386   	//Реле аварий батарей
;;;5387   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003a94  20d2              MOVS     r0,#0xd2
003a96  f7fffffe          BL       mess_find_unvol
003a9a  b110              CBZ      r0,|L1.15010|
003a9c  6828              LDR      r0,[r5,#0]  ; mess_data
003a9e  2867              CMP      r0,#0x67
003aa0  d02b              BEQ      |L1.15098|
                  |L1.15010|
;;;5388   		{
;;;5389   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5390   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5391        	}
;;;5392   	else 
;;;5393   		{
;;;5394   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003aa2  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003aa6  b390              CBZ      r0,|L1.15118|
;;;5395        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003aa8  69a0              LDR      r0,[r4,#0x18]
003aaa  f0400010          ORR      r0,r0,#0x10
003aae  61a0              STR      r0,[r4,#0x18]
003ab0  e054              B        |L1.15196|
                  |L1.15026|
003ab2  6868              LDR      r0,[r5,#4]            ;5367  ; mess_data
003ab4  b120              CBZ      r0,|L1.15040|
003ab6  6fa0              LDR      r0,[r4,#0x78]         ;5368
003ab8  f0407000          ORR      r0,r0,#0x2000000      ;5368
003abc  67a0              STR      r0,[r4,#0x78]         ;5368
003abe  e7db              B        |L1.14968|
                  |L1.15040|
003ac0  6fe0              LDR      r0,[r4,#0x7c]         ;5367
003ac2  f0407000          ORR      r0,r0,#0x2000000      ;5367
003ac6  67e0              STR      r0,[r4,#0x7c]         ;5367
003ac8  e7d6              B        |L1.14968|
                  |L1.15050|
003aca  6fe0              LDR      r0,[r4,#0x7c]         ;5370
003acc  f0407000          ORR      r0,r0,#0x2000000      ;5370
003ad0  67e0              STR      r0,[r4,#0x7c]         ;5370
003ad2  e7d1              B        |L1.14968|
                  |L1.15060|
003ad4  6868              LDR      r0,[r5,#4]            ;5377  ; mess_data
003ad6  b130              CBZ      r0,|L1.15078|
003ad8  2801              CMP      r0,#1                 ;5378
003ada  d1db              BNE      |L1.14996|
003adc  69a0              LDR      r0,[r4,#0x18]         ;5378
003ade  f0400080          ORR      r0,r0,#0x80           ;5378
003ae2  61a0              STR      r0,[r4,#0x18]         ;5378
003ae4  e7d6              B        |L1.14996|
                  |L1.15078|
003ae6  69e0              LDR      r0,[r4,#0x1c]         ;5377
003ae8  f0400080          ORR      r0,r0,#0x80           ;5377
003aec  61e0              STR      r0,[r4,#0x1c]         ;5377
003aee  e7d1              B        |L1.14996|
                  |L1.15088|
003af0  69e0              LDR      r0,[r4,#0x1c]         ;5382
003af2  f0400080          ORR      r0,r0,#0x80           ;5382
003af6  61e0              STR      r0,[r4,#0x1c]         ;5382
003af8  e7cc              B        |L1.14996|
                  |L1.15098|
003afa  6868              LDR      r0,[r5,#4]            ;5389  ; mess_data
003afc  b110              CBZ      r0,|L1.15108|
003afe  2801              CMP      r0,#1                 ;5390
003b00  d006              BEQ      |L1.15120|
003b02  e02b              B        |L1.15196|
                  |L1.15108|
003b04  69e0              LDR      r0,[r4,#0x1c]         ;5389
003b06  f0400010          ORR      r0,r0,#0x10           ;5389
003b0a  61e0              STR      r0,[r4,#0x1c]         ;5389
003b0c  e026              B        |L1.15196|
                  |L1.15118|
003b0e  e004              B        |L1.15130|
                  |L1.15120|
003b10  69a0              LDR      r0,[r4,#0x18]         ;5390
003b12  f0400010          ORR      r0,r0,#0x10           ;5390
003b16  61a0              STR      r0,[r4,#0x18]         ;5390
003b18  e020              B        |L1.15196|
                  |L1.15130|
003b1a  69e0              LDR      r0,[r4,#0x1c]         ;5394
003b1c  f0400010          ORR      r0,r0,#0x10           ;5394
003b20  61e0              STR      r0,[r4,#0x1c]         ;5394
003b22  e01b              B        |L1.15196|
                  |L1.15140|
;;;5396   		} 
;;;5397   	} 	 
;;;5398   else	
;;;5399   	{
;;;5400   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5401   	#ifndef UKU2071x 
;;;5402   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5403   		{
;;;5404   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5405   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5406   		}
;;;5407   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5408   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5409   	#endif
;;;5410   	#ifdef UKU2071x 
;;;5411   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003b24  20d2              MOVS     r0,#0xd2
003b26  f7fffffe          BL       mess_find_unvol
003b2a  b110              CBZ      r0,|L1.15154|
003b2c  6828              LDR      r0,[r5,#0]  ; mess_data
003b2e  2866              CMP      r0,#0x66
003b30  d026              BEQ      |L1.15232|
                  |L1.15154|
;;;5412   		{
;;;5413   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5414   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5415   		}
;;;5416   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003b32  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003b34  07c0              LSLS     r0,r0,#31
003b36  d02f              BEQ      |L1.15256|
;;;5417   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003b38  6fa0              LDR      r0,[r4,#0x78]
003b3a  f0407000          ORR      r0,r0,#0x2000000
003b3e  67a0              STR      r0,[r4,#0x78]
                  |L1.15168|
;;;5418   	#endif
;;;5419   
;;;5420   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003b40  20d2              MOVS     r0,#0xd2
003b42  f7fffffe          BL       mess_find_unvol
003b46  b110              CBZ      r0,|L1.15182|
003b48  6828              LDR      r0,[r5,#0]  ; mess_data
003b4a  286a              CMP      r0,#0x6a
003b4c  d029              BEQ      |L1.15266|
                  |L1.15182|
;;;5421   		{
;;;5422   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5423   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5424        	}
;;;5425   	else 
;;;5426   		{
;;;5427   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003b4e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003b50  4238              TST      r0,r7
003b52  d034              BEQ      |L1.15294|
;;;5428        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003b54  69a0              LDR      r0,[r4,#0x18]
003b56  f0400020          ORR      r0,r0,#0x20
003b5a  61a0              STR      r0,[r4,#0x18]
                  |L1.15196|
;;;5429   		}
;;;5430   	}
;;;5431   //Дополнительное реле УКУ 
;;;5432   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003b5c  20d2              MOVS     r0,#0xd2
003b5e  f7fffffe          BL       mess_find_unvol
;;;5433   	{
;;;5434   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5435   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5436   	}
;;;5437   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5438   	{
;;;5439   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003b62  f8df83fc          LDR      r8,|L1.16224|
003b66  4fff              LDR      r7,|L1.16228|
003b68  4eff              LDR      r6,|L1.16232|
003b6a  b110              CBZ      r0,|L1.15218|
003b6c  6828              LDR      r0,[r5,#0]            ;5432  ; mess_data
003b6e  2871              CMP      r0,#0x71              ;5432
003b70  d02a              BEQ      |L1.15304|
                  |L1.15218|
003b72  48fe              LDR      r0,|L1.16236|
003b74  f9b00000          LDRSH    r0,[r0,#0]            ;5437  ; DOP_RELE_FUNC
003b78  b380              CBZ      r0,|L1.15324|
;;;5440   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5441   	}
;;;5442   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003b7a  2801              CMP      r0,#1
003b7c  d066              BEQ      |L1.15436|
003b7e  e070              B        |L1.15458|
                  |L1.15232|
003b80  6868              LDR      r0,[r5,#4]            ;5413  ; mess_data
003b82  b120              CBZ      r0,|L1.15246|
003b84  69e0              LDR      r0,[r4,#0x1c]         ;5414
003b86  f0407000          ORR      r0,r0,#0x2000000      ;5414
003b8a  61e0              STR      r0,[r4,#0x1c]         ;5414
003b8c  e7d8              B        |L1.15168|
                  |L1.15246|
003b8e  69a0              LDR      r0,[r4,#0x18]         ;5413
003b90  f0407000          ORR      r0,r0,#0x2000000      ;5413
003b94  61a0              STR      r0,[r4,#0x18]         ;5413
003b96  e7d3              B        |L1.15168|
                  |L1.15256|
003b98  6ba0              LDR      r0,[r4,#0x38]         ;5416
003b9a  f0407000          ORR      r0,r0,#0x2000000      ;5416
003b9e  63a0              STR      r0,[r4,#0x38]         ;5416
003ba0  e7ce              B        |L1.15168|
                  |L1.15266|
003ba2  6868              LDR      r0,[r5,#4]            ;5422  ; mess_data
003ba4  b130              CBZ      r0,|L1.15284|
003ba6  2801              CMP      r0,#1                 ;5423
003ba8  d1d8              BNE      |L1.15196|
003baa  69a0              LDR      r0,[r4,#0x18]         ;5423
003bac  f0400020          ORR      r0,r0,#0x20           ;5423
003bb0  61a0              STR      r0,[r4,#0x18]         ;5423
003bb2  e7d3              B        |L1.15196|
                  |L1.15284|
003bb4  69e0              LDR      r0,[r4,#0x1c]         ;5422
003bb6  f0400020          ORR      r0,r0,#0x20           ;5422
003bba  61e0              STR      r0,[r4,#0x1c]         ;5422
003bbc  e7ce              B        |L1.15196|
                  |L1.15294|
003bbe  69e0              LDR      r0,[r4,#0x1c]         ;5427
003bc0  f0400020          ORR      r0,r0,#0x20           ;5427
003bc4  61e0              STR      r0,[r4,#0x1c]         ;5427
003bc6  e7c9              B        |L1.15196|
                  |L1.15304|
003bc8  6868              LDR      r0,[r5,#4]            ;5434  ; mess_data
003bca  b110              CBZ      r0,|L1.15314|
003bcc  2801              CMP      r0,#1                 ;5435
003bce  d006              BEQ      |L1.15326|
003bd0  e047              B        |L1.15458|
                  |L1.15314|
003bd2  69e0              LDR      r0,[r4,#0x1c]         ;5434
003bd4  f4407000          ORR      r0,r0,#0x200          ;5434
003bd8  61e0              STR      r0,[r4,#0x1c]         ;5434
003bda  e042              B        |L1.15458|
                  |L1.15324|
003bdc  e004              B        |L1.15336|
                  |L1.15326|
003bde  69a0              LDR      r0,[r4,#0x18]         ;5435
003be0  f4407000          ORR      r0,r0,#0x200          ;5435
003be4  61a0              STR      r0,[r4,#0x18]         ;5435
003be6  e03c              B        |L1.15458|
                  |L1.15336|
003be8  48e1              LDR      r0,|L1.16240|
003bea  49e2              LDR      r1,|L1.16244|
003bec  f9b00000          LDRSH    r0,[r0,#0]            ;5439  ; speedChIsOn
003bf0  b9d0              CBNZ     r0,|L1.15400|
003bf2  f8962022          LDRB     r2,[r6,#0x22]         ;5439  ; spc_stat
003bf6  2a02              CMP      r2,#2                 ;5439
003bf8  d016              BEQ      |L1.15400|
003bfa  780a              LDRB     r2,[r1,#0]            ;5439  ; hv_vz_stat
003bfc  b9a2              CBNZ     r2,|L1.15400|
003bfe  783a              LDRB     r2,[r7,#0]            ;5439  ; sp_ch_stat
003c00  b992              CBNZ     r2,|L1.15400|
003c02  7972              LDRB     r2,[r6,#5]            ;5439  ; vz1_stat
003c04  b982              CBNZ     r2,|L1.15400|
003c06  79f2              LDRB     r2,[r6,#7]            ;5439  ; vz2_stat
003c08  b972              CBNZ     r2,|L1.15400|
003c0a  f9b82000          LDRSH    r2,[r8,#0]            ;5439  ; load_U
003c0e  230a              MOVS     r3,#0xa               ;5439
003c10  fb92f2f3          SDIV     r2,r2,r3              ;5439
003c14  4bd8              LDR      r3,|L1.16248|
003c16  f9b33000          LDRSH    r3,[r3,#0]            ;5439  ; UVENTOFF
003c1a  429a              CMP      r2,r3                 ;5439
003c1c  da04              BGE      |L1.15400|
003c1e  69e0              LDR      r0,[r4,#0x1c]         ;5439
003c20  f4407000          ORR      r0,r0,#0x200          ;5439
003c24  61e0              STR      r0,[r4,#0x1c]         ;5439
003c26  e01c              B        |L1.15458|
                  |L1.15400|
003c28  b958              CBNZ     r0,|L1.15426|
003c2a  f8960022          LDRB     r0,[r6,#0x22]         ;5440  ; spc_stat
003c2e  2802              CMP      r0,#2                 ;5440
003c30  d007              BEQ      |L1.15426|
003c32  7808              LDRB     r0,[r1,#0]            ;5440  ; hv_vz_stat
003c34  b928              CBNZ     r0,|L1.15426|
003c36  7838              LDRB     r0,[r7,#0]            ;5440  ; sp_ch_stat
003c38  b918              CBNZ     r0,|L1.15426|
003c3a  7970              LDRB     r0,[r6,#5]            ;5440  ; vz1_stat
003c3c  b908              CBNZ     r0,|L1.15426|
003c3e  79f0              LDRB     r0,[r6,#7]            ;5440  ; vz2_stat
003c40  b178              CBZ      r0,|L1.15458|
                  |L1.15426|
003c42  69a0              LDR      r0,[r4,#0x18]         ;5440
003c44  f4407000          ORR      r0,r0,#0x200          ;5440
003c48  61a0              STR      r0,[r4,#0x18]         ;5440
003c4a  e00a              B        |L1.15458|
                  |L1.15436|
;;;5443   	{
;;;5444   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003c4c  20d2              MOVS     r0,#0xd2
003c4e  f7fffffe          BL       mess_find_unvol
003c52  b110              CBZ      r0,|L1.15450|
003c54  6828              LDR      r0,[r5,#0]  ; mess_data
003c56  2872              CMP      r0,#0x72
003c58  d017              BEQ      |L1.15498|
                  |L1.15450|
;;;5445   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
003c5a  69a0              LDR      r0,[r4,#0x18]
003c5c  f4407000          ORR      r0,r0,#0x200
003c60  61a0              STR      r0,[r4,#0x18]
                  |L1.15458|
;;;5446   	}
;;;5447   	
;;;5448   //Блок выносной реле
;;;5449   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
003c62  20d2              MOVS     r0,#0xd2
003c64  f7fffffe          BL       mess_find_unvol
;;;5450   	{
;;;5451   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
003c68  f8df9310          LDR      r9,|L1.16252|
;;;5452   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5453   	}
;;;5454   else 
;;;5455   	{
;;;5456   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
003c6c  4cc4              LDR      r4,|L1.16256|
003c6e  b110              CBZ      r0,|L1.15478|
003c70  6828              LDR      r0,[r5,#0]            ;5449  ; mess_data
003c72  2875              CMP      r0,#0x75              ;5449
003c74  d00e              BEQ      |L1.15508|
                  |L1.15478|
003c76  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003c78  07c0              LSLS     r0,r0,#31
003c7a  d01e              BEQ      |L1.15546|
003c7c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003c80  f0400001          ORR      r0,r0,#1
003c84  f8890000          STRB     r0,[r9,#0]
003c88  e01d              B        |L1.15558|
                  |L1.15498|
003c8a  69e0              LDR      r0,[r4,#0x1c]         ;5444
003c8c  f4407000          ORR      r0,r0,#0x200          ;5444
003c90  61e0              STR      r0,[r4,#0x1c]         ;5444
003c92  e7e6              B        |L1.15458|
                  |L1.15508|
003c94  6868              LDR      r0,[r5,#4]            ;5451  ; mess_data
003c96  b110              CBZ      r0,|L1.15518|
003c98  2801              CMP      r0,#1                 ;5452
003c9a  d007              BEQ      |L1.15532|
003c9c  e013              B        |L1.15558|
                  |L1.15518|
003c9e  f8990000          LDRB     r0,[r9,#0]            ;5451  ; bdr_transmit_stat
003ca2  f00000fe          AND      r0,r0,#0xfe           ;5451
003ca6  f8890000          STRB     r0,[r9,#0]            ;5451
003caa  e00c              B        |L1.15558|
                  |L1.15532|
003cac  f8990000          LDRB     r0,[r9,#0]            ;5452  ; bdr_transmit_stat
003cb0  f0400001          ORR      r0,r0,#1              ;5452
003cb4  f8890000          STRB     r0,[r9,#0]            ;5452
003cb8  e005              B        |L1.15558|
                  |L1.15546|
;;;5457   	else 						bdr_transmit_stat&=0xfe;
003cba  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003cbe  f00000fe          AND      r0,r0,#0xfe
003cc2  f8890000          STRB     r0,[r9,#0]
                  |L1.15558|
;;;5458   	}	
;;;5459   
;;;5460   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
003cc6  20d2              MOVS     r0,#0xd2
003cc8  f7fffffe          BL       mess_find_unvol
003ccc  b110              CBZ      r0,|L1.15572|
003cce  6828              LDR      r0,[r5,#0]  ; mess_data
003cd0  2876              CMP      r0,#0x76
003cd2  d009              BEQ      |L1.15592|
                  |L1.15572|
;;;5461   	{
;;;5462   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5463   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5464   	}
;;;5465   else 
;;;5466   	{
;;;5467   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
003cd4  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003cd6  07c0              LSLS     r0,r0,#31
003cd8  d019              BEQ      |L1.15630|
003cda  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003cde  f0400002          ORR      r0,r0,#2
003ce2  f8890000          STRB     r0,[r9,#0]
003ce6  e018              B        |L1.15642|
                  |L1.15592|
003ce8  6868              LDR      r0,[r5,#4]            ;5462  ; mess_data
003cea  b110              CBZ      r0,|L1.15602|
003cec  2801              CMP      r0,#1                 ;5463
003cee  d007              BEQ      |L1.15616|
003cf0  e013              B        |L1.15642|
                  |L1.15602|
003cf2  f8990000          LDRB     r0,[r9,#0]            ;5462  ; bdr_transmit_stat
003cf6  f00000fd          AND      r0,r0,#0xfd           ;5462
003cfa  f8890000          STRB     r0,[r9,#0]            ;5462
003cfe  e00c              B        |L1.15642|
                  |L1.15616|
003d00  f8990000          LDRB     r0,[r9,#0]            ;5463  ; bdr_transmit_stat
003d04  f0400002          ORR      r0,r0,#2              ;5463
003d08  f8890000          STRB     r0,[r9,#0]            ;5463
003d0c  e005              B        |L1.15642|
                  |L1.15630|
;;;5468   	else 						bdr_transmit_stat&=0xfd;
003d0e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d12  f00000fd          AND      r0,r0,#0xfd
003d16  f8890000          STRB     r0,[r9,#0]
                  |L1.15642|
;;;5469   	}	
;;;5470   	
;;;5471   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
003d1a  20d2              MOVS     r0,#0xd2
003d1c  f7fffffe          BL       mess_find_unvol
003d20  b110              CBZ      r0,|L1.15656|
003d22  6828              LDR      r0,[r5,#0]  ; mess_data
003d24  2877              CMP      r0,#0x77
003d26  d009              BEQ      |L1.15676|
                  |L1.15656|
;;;5472   	{
;;;5473   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5474   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5475   	}
;;;5476   else 
;;;5477   	{
;;;5478   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
003d28  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003d2a  07c0              LSLS     r0,r0,#31
003d2c  d019              BEQ      |L1.15714|
003d2e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d32  f0400004          ORR      r0,r0,#4
003d36  f8890000          STRB     r0,[r9,#0]
003d3a  e018              B        |L1.15726|
                  |L1.15676|
003d3c  6868              LDR      r0,[r5,#4]            ;5473  ; mess_data
003d3e  b110              CBZ      r0,|L1.15686|
003d40  2801              CMP      r0,#1                 ;5474
003d42  d007              BEQ      |L1.15700|
003d44  e013              B        |L1.15726|
                  |L1.15686|
003d46  f8990000          LDRB     r0,[r9,#0]            ;5473  ; bdr_transmit_stat
003d4a  f00000fb          AND      r0,r0,#0xfb           ;5473
003d4e  f8890000          STRB     r0,[r9,#0]            ;5473
003d52  e00c              B        |L1.15726|
                  |L1.15700|
003d54  f8990000          LDRB     r0,[r9,#0]            ;5474  ; bdr_transmit_stat
003d58  f0400004          ORR      r0,r0,#4              ;5474
003d5c  f8890000          STRB     r0,[r9,#0]            ;5474
003d60  e005              B        |L1.15726|
                  |L1.15714|
;;;5479   	else 						bdr_transmit_stat&=0xfb;
003d62  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d66  f00000fb          AND      r0,r0,#0xfb
003d6a  f8890000          STRB     r0,[r9,#0]
                  |L1.15726|
;;;5480   	}	
;;;5481   	
;;;5482   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
003d6e  20d2              MOVS     r0,#0xd2
003d70  f7fffffe          BL       mess_find_unvol
003d74  b110              CBZ      r0,|L1.15740|
003d76  6828              LDR      r0,[r5,#0]  ; mess_data
003d78  2878              CMP      r0,#0x78
003d7a  d009              BEQ      |L1.15760|
                  |L1.15740|
;;;5483   	{
;;;5484   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5485   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5486   	}
;;;5487   else 
;;;5488   	{
;;;5489   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
003d7c  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003d7e  07c0              LSLS     r0,r0,#31
003d80  d019              BEQ      |L1.15798|
003d82  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d86  f0400008          ORR      r0,r0,#8
003d8a  f8890000          STRB     r0,[r9,#0]
003d8e  e018              B        |L1.15810|
                  |L1.15760|
003d90  6868              LDR      r0,[r5,#4]            ;5484  ; mess_data
003d92  b110              CBZ      r0,|L1.15770|
003d94  2801              CMP      r0,#1                 ;5485
003d96  d007              BEQ      |L1.15784|
003d98  e013              B        |L1.15810|
                  |L1.15770|
003d9a  f8990000          LDRB     r0,[r9,#0]            ;5484  ; bdr_transmit_stat
003d9e  f00000f7          AND      r0,r0,#0xf7           ;5484
003da2  f8890000          STRB     r0,[r9,#0]            ;5484
003da6  e00c              B        |L1.15810|
                  |L1.15784|
003da8  f8990000          LDRB     r0,[r9,#0]            ;5485  ; bdr_transmit_stat
003dac  f0400008          ORR      r0,r0,#8              ;5485
003db0  f8890000          STRB     r0,[r9,#0]            ;5485
003db4  e005              B        |L1.15810|
                  |L1.15798|
;;;5490   	else 						bdr_transmit_stat&=0xf7;
003db6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003dba  f00000f7          AND      r0,r0,#0xf7
003dbe  f8890000          STRB     r0,[r9,#0]
                  |L1.15810|
;;;5491   	}	
;;;5492   					 	
;;;5493   #endif
;;;5494   
;;;5495   #ifdef UKU_KONTUR
;;;5496   
;;;5497   //Реле общей аварии
;;;5498   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5499   	{
;;;5500   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5501   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5502   	}
;;;5503   else 
;;;5504   	{
;;;5505        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5506             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5507             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5508             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5509             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5510        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5511   	}
;;;5512   
;;;5513   	
;;;5514   //rel_warm_plazma=0;
;;;5515   //Реле освещения   
;;;5516   /*
;;;5517   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5518   	{
;;;5519   	if(mess_data[1]==0)
;;;5520   		{
;;;5521   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5522   		rel_warm_plazma=1;
;;;5523   		}
;;;5524   	else if(mess_data[1]==1) 
;;;5525   		{
;;;5526   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5527   		rel_warm_plazma=2;
;;;5528   		}
;;;5529        }
;;;5530   else 
;;;5531   	{
;;;5532   	if(warm_stat_k==wsOFF) 
;;;5533   		{
;;;5534   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5535   		rel_warm_plazma=3;
;;;5536   		}
;;;5537        else 
;;;5538   		{
;;;5539   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5540   		rel_warm_plazma=4;
;;;5541   		}
;;;5542   	}
;;;5543   */
;;;5544   //Реле освещения
;;;5545   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5546   	{
;;;5547   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5548   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5549        }
;;;5550   else 
;;;5551   	{
;;;5552   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5553        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5554   	}
;;;5555   
;;;5556   
;;;5557   
;;;5558   //Реле выключения нагрузки
;;;5559   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5560   	{
;;;5561   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5562   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5563        }
;;;5564   else if(tloaddisable_cmnd==0)
;;;5565   	{
;;;5566   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5567   	}
;;;5568   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5569   	{
;;;5570   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5571   	}
;;;5572   
;;;5573   else 
;;;5574   	{
;;;5575   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5576        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5577   	} 
;;;5578   
;;;5579   //Реле осевого вентилятора или отопителя
;;;5580   if(RELE_LOG)
;;;5581   	{
;;;5582   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5583   		{
;;;5584   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5585   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5586   		}
;;;5587   	else 
;;;5588   		{
;;;5589   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5590   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5591   		} 
;;;5592   
;;;5593   	}
;;;5594   else 
;;;5595   	{
;;;5596   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5597   		{
;;;5598   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5599   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5600   		}
;;;5601   	else 
;;;5602   		{
;;;5603   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5604   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5605   		} 
;;;5606   	}
;;;5607   #endif
;;;5608   
;;;5609   
;;;5610   #ifdef UKU_TELECORE2015
;;;5611   //Реле аварии сети
;;;5612   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5613   	{
;;;5614   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5615   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5616   	}
;;;5617   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5618   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5619   
;;;5620   
;;;5621   //Реле освещения
;;;5622   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5623   	{
;;;5624   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5625   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5626        }
;;;5627   else 
;;;5628   	{
;;;5629   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5630        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5631   	}
;;;5632   
;;;5633   //Реле отопителя
;;;5634   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5635   	{
;;;5636   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5637   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5638   	}
;;;5639   else 
;;;5640   	{
;;;5641   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5642        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5643   	} 
;;;5644   //Реле вентилятора
;;;5645   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5646   	{
;;;5647   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5648   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5649   	}
;;;5650   else 
;;;5651   	{
;;;5652   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5653        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5654   	} 
;;;5655   
;;;5656   //Реле внутреннего вентилятора
;;;5657   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5658   	{
;;;5659   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5660   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5661   	}
;;;5662   else 
;;;5663   	{
;;;5664   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5665        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5666   	} 
;;;5667   
;;;5668   #endif
;;;5669   
;;;5670   #ifdef UKU_TELECORE2017
;;;5671   //Реле аварии сети
;;;5672   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5673   	{
;;;5674   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5675   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5676   	}
;;;5677   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5678   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5679   
;;;5680   
;;;5681   //Реле освещения
;;;5682   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5683   	{
;;;5684   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5685   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5686        }
;;;5687   else 
;;;5688   	{
;;;5689   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5690        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5691   	}
;;;5692   
;;;5693   //Реле отопителя
;;;5694   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5695   	{
;;;5696   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5697   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5698   	}
;;;5699   else 
;;;5700   	{
;;;5701   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5702        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5703   	} 
;;;5704   //Реле вентилятора
;;;5705   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5706   	{
;;;5707   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5708   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5709   	}
;;;5710   else 
;;;5711   	{
;;;5712   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5713        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5714   	} 
;;;5715   
;;;5716   //Реле внутреннего вентилятора
;;;5717   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5718   	{
;;;5719   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5720   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5721   	}
;;;5722   else 
;;;5723   	{
;;;5724   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5725        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5726   	} 
;;;5727   
;;;5728   //Реле выключения нагрузки
;;;5729   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5730   	{
;;;5731   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5732   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5733        }
;;;5734   else if(tloaddisable_cmnd==0)
;;;5735   	{
;;;5736   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5737   	}
;;;5738   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5739   	{
;;;5740   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5741   	}
;;;5742   
;;;5743   else 
;;;5744   	{
;;;5745   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5746        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5747   	} 
;;;5748   
;;;5749   
;;;5750   #endif
;;;5751   
;;;5752   #ifdef IPS_SGEP_GAZPROM
;;;5753   rele_hndl_plazma[0]++;
;;;5754   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5755   	{
;;;5756   	rele_hndl_plazma[1]++;
;;;5757   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5758   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5759        }
;;;5760   else 
;;;5761   	{
;;;5762   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5763        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5764   	} 
;;;5765   
;;;5766   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5767   	{
;;;5768   	rele_hndl_plazma[2]++;
;;;5769   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5770   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5771   	}
;;;5772   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5773   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5774   #endif
;;;5775   
;;;5776   if(NUMBDR==1)
003dc2  4870              LDR      r0,|L1.16260|
003dc4  8800              LDRH     r0,[r0,#0]  ; NUMBDR
003dc6  2801              CMP      r0,#1
003dc8  d17e              BNE      |L1.16072|
;;;5777   	{
;;;5778   	char ii_;
;;;5779   	char bdr_avar_stat_temp=0;
003dca  f04f0000          MOV      r0,#0
;;;5780   	for	(ii_=0;ii_<4;ii_++)
003dce  4601              MOV      r1,r0
;;;5781   		{
;;;5782   		//АБ разряжена
;;;5783   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5784   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5785   		//Ускоренный заряд
;;;5786   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5787   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5788   		//Выравнивающий заряд
;;;5789   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5790   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5791   		//Общая авария ЗВУ
;;;5792   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5793   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5794   		//Uвых завышено
;;;5795   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5796   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
003dd0  f8dfa1b4          LDR      r10,|L1.16264|
;;;5797   		//Uвых занижено
;;;5798   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5799   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5800   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5801   			(
;;;5802   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
003dd4  f8df91b4          LDR      r9,|L1.16268|
003dd8  4d6d              LDR      r5,|L1.16272|
003dda  f8dfb1b8          LDR      r11,|L1.16276|
003dde  f04f0301          MOV      r3,#1                 ;4734
                  |L1.15842|
003de2  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5783
003de6  ea5f7cc2          LSLS     r12,r2,#31            ;5783
003dea  d010              BEQ      |L1.15886|
003dec  f8dfc1a8          LDR      r12,|L1.16280|
003df0  f9b8e000          LDRSH    lr,[r8,#0]            ;5784  ; load_U
003df4  f9bcc000          LDRSH    r12,[r12,#0]          ;5784  ; USIGN
003df8  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5784
003dfc  ebbe0f4c          CMP      lr,r12,LSL #1         ;5784
003e00  da05              BGE      |L1.15886|
003e02  fa03fc01          LSL      r12,r3,r1             ;5784
003e06  ea4c0c00          ORR      r12,r12,r0            ;5784
003e0a  f00c00ff          AND      r0,r12,#0xff          ;5784
                  |L1.15886|
003e0e  ea5f7c82          LSLS     r12,r2,#30            ;5786
003e12  d50a              BPL      |L1.15914|
003e14  f897c000          LDRB     r12,[r7,#0]           ;5787  ; sp_ch_stat
003e18  f1bc0f02          CMP      r12,#2                ;5787
003e1c  d105              BNE      |L1.15914|
003e1e  fa03fc01          LSL      r12,r3,r1             ;5787
003e22  ea4c0c00          ORR      r12,r12,r0            ;5787
003e26  f00c00ff          AND      r0,r12,#0xff          ;5787
                  |L1.15914|
003e2a  ea5f7c42          LSLS     r12,r2,#29            ;5789
003e2e  d50a              BPL      |L1.15942|
003e30  f896c022          LDRB     r12,[r6,#0x22]        ;5790  ; spc_stat
003e34  f1bc0f02          CMP      r12,#2                ;5790
003e38  d105              BNE      |L1.15942|
003e3a  fa03fc01          LSL      r12,r3,r1             ;5790
003e3e  ea4c0c00          ORR      r12,r12,r0            ;5790
003e42  f00c00ff          AND      r0,r12,#0xff          ;5790
                  |L1.15942|
003e46  ea5f7c02          LSLS     r12,r2,#28            ;5792
003e4a  d50c              BPL      |L1.15974|
003e4c  f8dfc14c          LDR      r12,|L1.16284|
003e50  f8dcc000          LDR      r12,[r12,#0]          ;5793  ; avar_stat
003e54  f1bc0f00          CMP      r12,#0                ;5793
003e58  d005              BEQ      |L1.15974|
003e5a  fa03fc01          LSL      r12,r3,r1             ;5793
003e5e  ea4c0c00          ORR      r12,r12,r0            ;5793
003e62  f00c00ff          AND      r0,r12,#0xff          ;5793
                  |L1.15974|
003e66  ea5f6cc2          LSLS     r12,r2,#27            ;5795
003e6a  d50a              BPL      |L1.16002|
003e6c  f89ac000          LDRB     r12,[r10,#0]          ;5796  ; uout_av
003e70  f1bc0f01          CMP      r12,#1                ;5796
003e74  d105              BNE      |L1.16002|
003e76  fa03fc01          LSL      r12,r3,r1             ;5796
003e7a  ea4c0c00          ORR      r12,r12,r0            ;5796
003e7e  f00c00ff          AND      r0,r12,#0xff          ;5796
                  |L1.16002|
003e82  ea5f6c82          LSLS     r12,r2,#26            ;5798
003e86  d50a              BPL      |L1.16030|
003e88  f89ac000          LDRB     r12,[r10,#0]          ;5799  ; uout_av
003e8c  f1bc0f02          CMP      r12,#2                ;5799
003e90  d105              BNE      |L1.16030|
003e92  fa03fc01          LSL      r12,r3,r1             ;5799
003e96  ea4c0c00          ORR      r12,r12,r0            ;5799
003e9a  f00c00ff          AND      r0,r12,#0xff          ;5799
                  |L1.16030|
003e9e  ea5f6c42          LSLS     r12,r2,#25            ;5800
003ea2  d525              BPL      |L1.16112|
003ea4  f899c001          LDRB     r12,[r9,#1]  ; bps
003ea8  ea5f6ccc          LSLS     r12,r12,#27
003eac  d504              BPL      |L1.16056|
003eae  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003eb2  f1bc0f01          CMP      r12,#1
003eb6  da15              BGE      |L1.16100|
                  |L1.16056|
;;;5803   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
003eb8  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003ebc  ea5f6ccc          LSLS     r12,r12,#27
003ec0  d506              BPL      |L1.16080|
003ec2  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003ec6  e000              B        |L1.16074|
                  |L1.16072|
003ec8  e047              B        |L1.16218|
                  |L1.16074|
003eca  f1bc0f02          CMP      r12,#2
003ece  da09              BGE      |L1.16100|
                  |L1.16080|
;;;5804   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
003ed0  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003ed4  ea5f6ccc          LSLS     r12,r12,#27
003ed8  d50a              BPL      |L1.16112|
003eda  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003ede  f1bc0f03          CMP      r12,#3
003ee2  db05              BLT      |L1.16112|
                  |L1.16100|
;;;5805   			))bdr_avar_stat_temp|=(1<<ii_);
003ee4  fa03fc01          LSL      r12,r3,r1
003ee8  ea4c0c00          ORR      r12,r12,r0
003eec  f00c00ff          AND      r0,r12,#0xff
                  |L1.16112|
;;;5806   		if((RELE_SET_MASK[ii_]&0x80)&&
003ef0  ea5f6c02          LSLS     r12,r2,#24
003ef4  d523              BPL      |L1.16190|
;;;5807   			(
;;;5808   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
003ef6  f899c001          LDRB     r12,[r9,#1]  ; bps
003efa  ea5f7c0c          LSLS     r12,r12,#28
003efe  d004              BEQ      |L1.16138|
003f00  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f04  f1bc0f01          CMP      r12,#1
003f08  da13              BGE      |L1.16178|
                  |L1.16138|
;;;5809   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
003f0a  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003f0e  ea5f7c0c          LSLS     r12,r12,#28
003f12  d004              BEQ      |L1.16158|
003f14  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f18  f1bc0f02          CMP      r12,#2
003f1c  da09              BGE      |L1.16178|
                  |L1.16158|
;;;5810   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
003f1e  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003f22  ea5f7c0c          LSLS     r12,r12,#28
003f26  d00a              BEQ      |L1.16190|
003f28  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f2c  f1bc0f03          CMP      r12,#3
003f30  db05              BLT      |L1.16190|
                  |L1.16178|
;;;5811   			))bdr_avar_stat_temp|=(1<<ii_);
003f32  fa03fc01          LSL      r12,r3,r1
003f36  ea4c0c00          ORR      r12,r12,r0
003f3a  f00c00ff          AND      r0,r12,#0xff
                  |L1.16190|
;;;5812   
;;;5813   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
003f3e  0412              LSLS     r2,r2,#16
003f40  d404              BMI      |L1.16204|
003f42  fa03f201          LSL      r2,r3,r1
003f46  ea820200          EOR      r2,r2,r0
003f4a  b2d0              UXTB     r0,r2
                  |L1.16204|
003f4c  f1010101          ADD      r1,r1,#1              ;5780
003f50  b2c9              UXTB     r1,r1                 ;5780
003f52  2904              CMP      r1,#4                 ;5780
003f54  f4ffaf45          BCC      |L1.15842|
;;;5814   		}
;;;5815   	bdr_avar_stat=bdr_avar_stat_temp;
003f58  7020              STRB     r0,[r4,#0]
                  |L1.16218|
;;;5816   	}
;;;5817   }
003f5a  e8bd9ff0          POP      {r4-r12,pc}
003f5e  0000              DCW      0x0000
                  |L1.16224|
                          DCD      load_U
                  |L1.16228|
                          DCD      sp_ch_stat
                  |L1.16232|
                          DCD      ||area_number.25||
                  |L1.16236|
                          DCD      DOP_RELE_FUNC
                  |L1.16240|
                          DCD      speedChIsOn
                  |L1.16244|
                          DCD      hv_vz_stat
                  |L1.16248|
                          DCD      UVENTOFF
                  |L1.16252|
                          DCD      bdr_transmit_stat
                  |L1.16256|
                          DCD      bdr_avar_stat
                  |L1.16260|
                          DCD      NUMBDR
                  |L1.16264|
                          DCD      uout_av
                  |L1.16268|
                          DCD      bps
                  |L1.16272|
                          DCD      NUMIST
                  |L1.16276|
                          DCD      RELE_SET_MASK
                  |L1.16280|
                          DCD      USIGN
                  |L1.16284|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;5820   //-----------------------------------------------
;;;5821   void bps_hndl(void)
003fa0  e92d5ff0          PUSH     {r4-r12,lr}
;;;5822   {
;;;5823   char ptr__,i;
;;;5824   unsigned short tempUS;
;;;5825   
;;;5826   if(sh_cnt0<10)
003fa4  4eff              LDR      r6,|L1.17316|
;;;5827   	{
;;;5828   	sh_cnt0++;
;;;5829   	if(sh_cnt0>=10)
;;;5830   		{
;;;5831   		sh_cnt0=0;
003fa6  2700              MOVS     r7,#0
;;;5832   		b1Hz_sh=1;
003fa8  f04f0a01          MOV      r10,#1
003fac  f8960020          LDRB     r0,[r6,#0x20]         ;5826  ; sh_cnt0
003fb0  280a              CMP      r0,#0xa               ;5826
003fb2  d20a              BCS      |L1.16330|
003fb4  f1000001          ADD      r0,r0,#1              ;5828
003fb8  b2c0              UXTB     r0,r0                 ;5828
003fba  f8860020          STRB     r0,[r6,#0x20]         ;5828
003fbe  280a              CMP      r0,#0xa               ;5829
003fc0  d303              BCC      |L1.16330|
003fc2  f8867020          STRB     r7,[r6,#0x20]         ;5831
003fc6  f886a021          STRB     r10,[r6,#0x21]
                  |L1.16330|
;;;5833   		}
;;;5834   	}
;;;5835   
;;;5836   /*if(sh_cnt1<5)
;;;5837   	{
;;;5838   	sh_cnt1++;
;;;5839   	if(sh_cnt1==5)
;;;5840   		{
;;;5841   		sh_cnt1=0;
;;;5842   		b2Hz_sh=1;
;;;5843   		}
;;;5844   	} */
;;;5845   
;;;5846   
;;;5847   /*
;;;5848   if(mess_find(MESS_SRC_ON_OFF))
;;;5849   	{
;;;5850   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;5851   		{
;;;5852   		char i;
;;;5853   		for(i=0;i<NUMIST;i++)
;;;5854   			{
;;;5855   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;5856   			}
;;;5857   		
;;;5858   		}
;;;5859   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;5860   		{
;;;5861   		char i;
;;;5862   		for(i=0;i<NUMIST;i++)
;;;5863   			{
;;;5864   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;5865   			}
;;;5866   		
;;;5867   		}
;;;5868   	}
;;;5869   	
;;;5870   else if(mess_find(_MESS_SRC_MASK_ON))
;;;5871   	{				
;;;5872   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;5873   		{
;;;5874   		char i;
;;;5875   		for(i=0;i<NUMIST;i++)
;;;5876   			{
;;;5877   			if(mess_data[1]&(1<<i))
;;;5878   				{
;;;5879   				src[i]._ist_blok_cnt=0;
;;;5880   				src[i]._flags_tu=2;
;;;5881   				}
;;;5882   			}
;;;5883   		
;;;5884   		}				
;;;5885   	}*/
;;;5886   
;;;5887   
;;;5888   
;;;5889   /*else*/ 
;;;5890   bps_on_mask=0;
003fca  f8a6705c          STRH     r7,[r6,#0x5c]
;;;5891   bps_off_mask=0;
003fce  f8a6705e          STRH     r7,[r6,#0x5e]
;;;5892   
;;;5893   if(mess_find_unvol(MESS2BPS_HNDL))
003fd2  20cd              MOVS     r0,#0xcd
003fd4  f7fffffe          BL       mess_find_unvol
;;;5894   	{
;;;5895   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;5896   		{
;;;5897   		bps_off_mask=0xffff;
;;;5898   		}
;;;5899   
;;;5900   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;5901   		{
;;;5902   		bps_off_mask=mess_data[1];
;;;5903   		}
;;;5904   
;;;5905   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5906   		{
;;;5907   		bps_on_mask=mess_data[1];
;;;5908   		}
;;;5909   
;;;5910   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;5911   		{
;;;5912   		bps_on_mask=0xffff;
;;;5913   		}
;;;5914   
;;;5915   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;5916   		{
;;;5917   		bps_on_mask=mess_data[1];
;;;5918   		bps_off_mask=~(mess_data[1]);
;;;5919   		}
;;;5920   
;;;5921   
;;;5922   	for(i=0;i<=NUMIST;i++)
;;;5923   		{
;;;5924   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
003fd8  f8df83cc          LDR      r8,|L1.17320|
003fdc  f8dfb3cc          LDR      r11,|L1.17324|
003fe0  b3a0              CBZ      r0,|L1.16460|
003fe2  4af3              LDR      r2,|L1.17328|
003fe4  f64f73ff          MOV      r3,#0xffff            ;5897
003fe8  6810              LDR      r0,[r2,#0]            ;5895  ; mess_data
003fea  28ce              CMP      r0,#0xce              ;5895
003fec  d101              BNE      |L1.16370|
003fee  f8a6305e          STRH     r3,[r6,#0x5e]         ;5897
                  |L1.16370|
003ff2  28cf              CMP      r0,#0xcf              ;5900
003ff4  d102              BNE      |L1.16380|
003ff6  6851              LDR      r1,[r2,#4]            ;5902  ; mess_data
003ff8  f8a6105e          STRH     r1,[r6,#0x5e]         ;5902
                  |L1.16380|
003ffc  28d1              CMP      r0,#0xd1              ;5905
003ffe  d102              BNE      |L1.16390|
004000  6851              LDR      r1,[r2,#4]            ;5907  ; mess_data
004002  f8a6105c          STRH     r1,[r6,#0x5c]         ;5907
                  |L1.16390|
004006  28d2              CMP      r0,#0xd2              ;5910
004008  d101              BNE      |L1.16398|
00400a  f8a6305c          STRH     r3,[r6,#0x5c]         ;5912
                  |L1.16398|
00400e  28d0              CMP      r0,#0xd0              ;5915
004010  d106              BNE      |L1.16416|
004012  6850              LDR      r0,[r2,#4]            ;5917  ; mess_data
004014  f8a6005c          STRH     r0,[r6,#0x5c]         ;5917
004018  ea6f0000          MVN      r0,r0                 ;5918
00401c  f8a6005e          STRH     r0,[r6,#0x5e]         ;5918
                  |L1.16416|
004020  f04f0400          MOV      r4,#0                 ;5922
004024  e037              B        |L1.16534|
                  |L1.16422|
004026  f8b6005e          LDRH     r0,[r6,#0x5e]  ; bps_off_mask
00402a  fa0af904          LSL      r9,r10,r4
00402e  ea190f00          TST      r9,r0
004032  d00c              BEQ      |L1.16462|
004034  ebc400c4          RSB      r0,r4,r4,LSL #3
004038  eb001004          ADD      r0,r0,r4,LSL #4
00403c  eb080080          ADD      r0,r8,r0,LSL #2
004040  f8301f40          LDRH     r1,[r0,#0x40]!
004044  f1010101          ADD      r1,r1,#1
004048  8001              STRH     r1,[r0,#0]
00404a  e008              B        |L1.16478|
                  |L1.16460|
00404c  e028              B        |L1.16544|
                  |L1.16462|
;;;5925   		else bps[i]._blok_cnt=0;
00404e  ebc400c4          RSB      r0,r4,r4,LSL #3
004052  eb001004          ADD      r0,r0,r4,LSL #4
004056  eb080080          ADD      r0,r8,r0,LSL #2
00405a  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.16478|
;;;5926   		gran(&bps[i]._blok_cnt,0,50);
00405e  ebc400c4          RSB      r0,r4,r4,LSL #3
004062  eb001004          ADD      r0,r0,r4,LSL #4
004066  eb080580          ADD      r5,r8,r0,LSL #2
00406a  f1050040          ADD      r0,r5,#0x40
00406e  2232              MOVS     r2,#0x32
004070  2100              MOVS     r1,#0
004072  f7fffffe          BL       gran
;;;5927   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
004076  f9b50040          LDRSH    r0,[r5,#0x40]
00407a  2814              CMP      r0,#0x14
00407c  dd01              BLE      |L1.16514|
00407e  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.16514|
;;;5928   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
004082  f8b6005c          LDRH     r0,[r6,#0x5c]  ; bps_on_mask
004086  ea190f00          TST      r9,r0
00408a  d001              BEQ      |L1.16528|
00408c  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.16528|
004090  f1040401          ADD      r4,r4,#1              ;5922
004094  b2e4              UXTB     r4,r4                 ;5922
                  |L1.16534|
004096  f9bb0000          LDRSH    r0,[r11,#0]           ;5922  ; NUMIST
00409a  4284              CMP      r4,r0                 ;5922
00409c  ddc3              BLE      |L1.16422|
00409e  e08d              B        |L1.16828|
                  |L1.16544|
;;;5929   	     }
;;;5930   
;;;5931   	
;;;5932   /*
;;;5933   
;;;5934   	if(bps_all_off_cnt>20)
;;;5935   		{
;;;5936   		for(i=0;i<=NUMIST;i++)
;;;5937   			{
;;;5938   	     	bps[i]._flags_tu=1;
;;;5939   	     	}
;;;5940   		}
;;;5941   	else if(bps_mask_off_cnt>20)
;;;5942   		{
;;;5943   		for(i=0;i<=NUMIST;i++)
;;;5944   			{
;;;5945   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5946   	     	}
;;;5947   		}	
;;;5948   		
;;;5949   	else if(bps_mask_on_off_cnt>20)
;;;5950   		{
;;;5951   		for(i=0;i<=NUMIST;i++)
;;;5952   			{
;;;5953   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5954   			else bps[i]._flags_tu=0;
;;;5955   	     	}
;;;5956   		}
;;;5957   		
;;;5958   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5959   		{
;;;5960   		for(i=0;i<=NUMIST;i++)
;;;5961   			{
;;;5962   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;5963   	     	}
;;;5964   		}
;;;5965   */										
;;;5966   	}
;;;5967   
;;;5968   
;;;5969   else if(b1Hz_sh)
0040a0  f8960021          LDRB     r0,[r6,#0x21]  ; b1Hz_sh
0040a4  b3e8              CBZ      r0,|L1.16674|
;;;5970   	{
;;;5971   	ptr__=0;
0040a6  f04f0400          MOV      r4,#0
;;;5972        for(i=0;i<=NUMIST;i++)
0040aa  4621              MOV      r1,r4
0040ac  f9bb0000          LDRSH    r0,[r11,#0]           ;5922
0040b0  e00a              B        |L1.16584|
                  |L1.16562|
;;;5973   		{
;;;5974   	     bps[i]._flags_tu=1;
0040b2  ebc102c1          RSB      r2,r1,r1,LSL #3
0040b6  eb021201          ADD      r2,r2,r1,LSL #4
0040ba  eb080282          ADD      r2,r8,r2,LSL #2
0040be  f882a02c          STRB     r10,[r2,#0x2c]
0040c2  f1010101          ADD      r1,r1,#1              ;5972
0040c6  b2c9              UXTB     r1,r1                 ;5972
                  |L1.16584|
0040c8  4281              CMP      r1,r0                 ;5972
0040ca  ddf2              BLE      |L1.16562|
;;;5975   	     }	
;;;5976     	     
;;;5977     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
0040cc  f04f0100          MOV      r1,#0
0040d0  e023              B        |L1.16666|
                  |L1.16594|
;;;5978     		{
;;;5979   		char ii,iii;
;;;5980   
;;;5981   		ii=(char)NUMIST;
0040d2  b2c2              UXTB     r2,r0
;;;5982   		//if(ii<0)ii=0;
;;;5983   		if(ii>32)ii=32;
0040d4  2a20              CMP      r2,#0x20
0040d6  d901              BLS      |L1.16604|
0040d8  f04f0220          MOV      r2,#0x20
                  |L1.16604|
;;;5984   		iii=numOfForvardBps;
0040dc  f8963027          LDRB     r3,[r6,#0x27]  ; numOfForvardBps
;;;5985   		//if(iii<0)iii=0;
;;;5986   		if(iii>=NUMIST)iii=0;
0040e0  4283              CMP      r3,r0
0040e2  db01              BLT      |L1.16616|
0040e4  f04f0300          MOV      r3,#0
                  |L1.16616|
;;;5987   		iii+=i;
0040e8  440b              ADD      r3,r3,r1
0040ea  b2db              UXTB     r3,r3
;;;5988   		iii=iii%ii;
0040ec  fbb3f5f2          UDIV     r5,r3,r2
0040f0  fb023215          MLS      r2,r2,r5,r3
;;;5989   		
;;;5990     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
0040f4  ebc203c2          RSB      r3,r2,r2,LSL #3
0040f8  eb031202          ADD      r2,r3,r2,LSL #4
0040fc  eb080282          ADD      r2,r8,r2,LSL #2
004100  7893              LDRB     r3,[r2,#2]
004102  2b02              CMP      r3,#2
004104  d001              BEQ      |L1.16650|
004106  2b01              CMP      r3,#1
004108  d104              BNE      |L1.16660|
                  |L1.16650|
;;;5991     	         	{
;;;5992     	         	bps[iii]._flags_tu=0;
00410a  f882702c          STRB     r7,[r2,#0x2c]
;;;5993     	         	ptr__++;
00410e  f1040401          ADD      r4,r4,#1
004112  b2e4              UXTB     r4,r4
                  |L1.16660|
004114  f1010101          ADD      r1,r1,#1              ;5977
004118  b2c9              UXTB     r1,r1                 ;5977
                  |L1.16666|
00411a  4281              CMP      r1,r0                 ;5977
00411c  da06              BGE      |L1.16684|
00411e  4aa5              LDR      r2,|L1.17332|
004120  e000              B        |L1.16676|
                  |L1.16674|
004122  e04b              B        |L1.16828|
                  |L1.16676|
004124  f9b22000          LDRSH    r2,[r2,#0]            ;5977  ; num_necc
004128  4294              CMP      r4,r2                 ;5977
00412a  dbd2              BLT      |L1.16594|
                  |L1.16684|
;;;5994     	         	}
;;;5995   			
;;;5996     	     }
;;;5997   	bps[numOfForvardBps_old]._flags_tu=0;
00412c  f8961028          LDRB     r1,[r6,#0x28]  ; numOfForvardBps_old
004130  ebc102c1          RSB      r2,r1,r1,LSL #3
004134  eb021101          ADD      r1,r2,r1,LSL #4
004138  eb080181          ADD      r1,r8,r1,LSL #2
00413c  f881702c          STRB     r7,[r1,#0x2c]
;;;5998   
;;;5999   	if(main_1Hz_cnt<60)
004140  499d              LDR      r1,|L1.17336|
004142  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
004146  293c              CMP      r1,#0x3c
004148  da0f              BGE      |L1.16746|
;;;6000   		{
;;;6001        	for(i=0;i<=NUMIST;i++)
00414a  f04f0100          MOV      r1,#0
00414e  e00a              B        |L1.16742|
                  |L1.16720|
;;;6002   			{
;;;6003   	     	bps[i]._flags_tu=0;
004150  ebc102c1          RSB      r2,r1,r1,LSL #3
004154  eb021201          ADD      r2,r2,r1,LSL #4
004158  eb080282          ADD      r2,r8,r2,LSL #2
00415c  f882702c          STRB     r7,[r2,#0x2c]
004160  f1010101          ADD      r1,r1,#1              ;6001
004164  b2c9              UXTB     r1,r1                 ;6001
                  |L1.16742|
004166  4281              CMP      r1,r0                 ;6001
004168  ddf2              BLE      |L1.16720|
                  |L1.16746|
;;;6004   	     	}	
;;;6005   		}
;;;6006   	if(ipsBlckStat)
00416a  4994              LDR      r1,|L1.17340|
00416c  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
00416e  b179              CBZ      r1,|L1.16784|
;;;6007   		{
;;;6008        	for(i=0;i<=NUMIST;i++)
004170  f04f0100          MOV      r1,#0
004174  e00a              B        |L1.16780|
                  |L1.16758|
;;;6009   			{
;;;6010   	     	bps[i]._flags_tu=1;
004176  ebc102c1          RSB      r2,r1,r1,LSL #3
00417a  eb021201          ADD      r2,r2,r1,LSL #4
00417e  eb080282          ADD      r2,r8,r2,LSL #2
004182  f882a02c          STRB     r10,[r2,#0x2c]
004186  f1010101          ADD      r1,r1,#1              ;6008
00418a  b2c9              UXTB     r1,r1                 ;6008
                  |L1.16780|
00418c  4281              CMP      r1,r0                 ;6008
00418e  ddf2              BLE      |L1.16758|
                  |L1.16784|
;;;6011   	     	}
;;;6012   		}
;;;6013   
;;;6014        for(i=0;i<=NUMIST;i++)
004190  f04f0100          MOV      r1,#0
;;;6015   		{
;;;6016   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
004194  f06f0331          MVN      r3,#0x31
004198  e00e              B        |L1.16824|
                  |L1.16794|
00419a  ebc102c1          RSB      r2,r1,r1,LSL #3
00419e  eb021201          ADD      r2,r2,r1,LSL #4
0041a2  eb080282          ADD      r2,r8,r2,LSL #2
0041a6  f892402c          LDRB     r4,[r2,#0x2c]
0041aa  2c01              CMP      r4,#1
0041ac  d101              BNE      |L1.16818|
0041ae  f8a23050          STRH     r3,[r2,#0x50]
                  |L1.16818|
0041b2  f1010101          ADD      r1,r1,#1              ;6014
0041b6  b2c9              UXTB     r1,r1                 ;6014
                  |L1.16824|
0041b8  4281              CMP      r1,r0                 ;6014
0041ba  ddee              BLE      |L1.16794|
                  |L1.16828|
;;;6017   	   	}	
;;;6018   		 
;;;6019     	}
;;;6020   
;;;6021   
;;;6022   for(i=0;i<NUMIST;i++)
0041bc  f04f0000          MOV      r0,#0
;;;6023        {
;;;6024        if(bps[i]._ist_blok_host_cnt!=0)
;;;6025             {
;;;6026             bps[i]._flags_tu=99;
0041c0  f04f0463          MOV      r4,#0x63
0041c4  f9bb1000          LDRSH    r1,[r11,#0]           ;5922
0041c8  e00f              B        |L1.16874|
                  |L1.16842|
0041ca  ebc002c0          RSB      r2,r0,r0,LSL #3       ;6024
0041ce  eb021200          ADD      r2,r2,r0,LSL #4       ;6024
0041d2  eb080282          ADD      r2,r8,r2,LSL #2       ;6024
0041d6  6bd3              LDR      r3,[r2,#0x3c]         ;6024
0041d8  b123              CBZ      r3,|L1.16868|
0041da  f882402c          STRB     r4,[r2,#0x2c]
;;;6027   	     bps[i]._ist_blok_host_cnt--;
0041de  f1a30301          SUB      r3,r3,#1
0041e2  63d3              STR      r3,[r2,#0x3c]
                  |L1.16868|
0041e4  f1000001          ADD      r0,r0,#1              ;6022
0041e8  b2c0              UXTB     r0,r0                 ;6022
                  |L1.16874|
0041ea  4288              CMP      r0,r1                 ;6022
0041ec  dbed              BLT      |L1.16842|
;;;6028             }
;;;6029        }
;;;6030   
;;;6031   
;;;6032   
;;;6033   
;;;6034   b1Hz_sh=0;
0041ee  f8867021          STRB     r7,[r6,#0x21]
;;;6035   
;;;6036   
;;;6037   num_of_wrks_bps=0;
0041f2  7777              STRB     r7,[r6,#0x1d]
;;;6038   tempUS=0;
0041f4  f04f0200          MOV      r2,#0
;;;6039   for(i=0;i<NUMIST;i++)
0041f8  4610              MOV      r0,r2
0041fa  e013              B        |L1.16932|
                  |L1.16892|
;;;6040   	{
;;;6041   	if(bps[i]._state==bsWRK)
0041fc  ebc003c0          RSB      r3,r0,r0,LSL #3
004200  eb031300          ADD      r3,r3,r0,LSL #4
004204  eb080383          ADD      r3,r8,r3,LSL #2
004208  789c              LDRB     r4,[r3,#2]
00420a  2c01              CMP      r4,#1
00420c  d107              BNE      |L1.16926|
;;;6042   		{
;;;6043   		num_of_wrks_bps++;
00420e  7f74              LDRB     r4,[r6,#0x1d]  ; num_of_wrks_bps
004210  f1040401          ADD      r4,r4,#1
004214  7774              STRB     r4,[r6,#0x1d]
;;;6044   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
004216  69db              LDR      r3,[r3,#0x1c]
004218  4293              CMP      r3,r2
00421a  dd00              BLE      |L1.16926|
00421c  b29a              UXTH     r2,r3
                  |L1.16926|
00421e  f1000001          ADD      r0,r0,#1              ;6039
004222  b2c0              UXTB     r0,r0                 ;6039
                  |L1.16932|
004224  4288              CMP      r0,r1                 ;6039
004226  dbe9              BLT      |L1.16892|
;;;6045   		}
;;;6046   	}
;;;6047   Ubpsmax=tempUS;
004228  f8a6204c          STRH     r2,[r6,#0x4c]
;;;6048   
;;;6049   bPARALLEL_ENOUG=0;
00422c  f886702b          STRB     r7,[r6,#0x2b]
;;;6050   bPARALLEL_NOT_ENOUG=1;
004230  f886a02a          STRB     r10,[r6,#0x2a]
;;;6051   
;;;6052   for(i=0;i<NUMIST;i++)
004234  f04f0000          MOV      r0,#0
;;;6053   	{
;;;6054   	if(bps[i]._Ti>=TSIGN)
004238  4a61              LDR      r2,|L1.17344|
00423a  f9b23000          LDRSH    r3,[r2,#0]
;;;6055   		{
;;;6056   		bPARALLEL_ENOUG=1;
;;;6057   		}
;;;6058   	if(bps[i]._Ti>=(TSIGN-5))
00423e  f1a30405          SUB      r4,r3,#5
004242  e011              B        |L1.17000|
                  |L1.16964|
004244  ebc002c0          RSB      r2,r0,r0,LSL #3       ;6054
004248  eb021200          ADD      r2,r2,r0,LSL #4       ;6054
00424c  eb080282          ADD      r2,r8,r2,LSL #2       ;6054
004250  6a92              LDR      r2,[r2,#0x28]         ;6054
004252  429a              CMP      r2,r3                 ;6054
004254  db01              BLT      |L1.16986|
004256  f886a02b          STRB     r10,[r6,#0x2b]        ;6056
                  |L1.16986|
00425a  42a2              CMP      r2,r4
00425c  db01              BLT      |L1.16994|
;;;6059   		{
;;;6060   		bPARALLEL_NOT_ENOUG=0;
00425e  f886702a          STRB     r7,[r6,#0x2a]
                  |L1.16994|
004262  f1000001          ADD      r0,r0,#1              ;6052
004266  b2c0              UXTB     r0,r0                 ;6052
                  |L1.17000|
004268  4288              CMP      r0,r1                 ;6052
00426a  dbeb              BLT      |L1.16964|
;;;6061   		}
;;;6062   	}
;;;6063   
;;;6064   if(bPARALLEL_ENOUG==1)
00426c  f896002b          LDRB     r0,[r6,#0x2b]  ; bPARALLEL_ENOUG
004270  2801              CMP      r0,#1
004272  d00a              BEQ      |L1.17034|
;;;6065   	{
;;;6066   	bPARALLEL=1;
;;;6067   	}
;;;6068   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
004274  f896002c          LDRB     r0,[r6,#0x2c]  ; bPARALLEL
004278  2800              CMP      r0,#0
00427a  d005              BEQ      |L1.17032|
00427c  f896002a          LDRB     r0,[r6,#0x2a]  ; bPARALLEL_NOT_ENOUG
004280  2800              CMP      r0,#0
004282  d001              BEQ      |L1.17032|
;;;6069   	{
;;;6070   	bPARALLEL=0;
004284  f886702c          STRB     r7,[r6,#0x2c]
                  |L1.17032|
;;;6071   	}
;;;6072   }
004288  e667              B        |L1.16218|
                  |L1.17034|
00428a  f886a02c          STRB     r10,[r6,#0x2c]        ;6066
00428e  e664              B        |L1.16218|
;;;6073   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6080   //-----------------------------------------------
;;;6081   void powerAntiAliasingHndl(void)
004290  b570              PUSH     {r4-r6,lr}
;;;6082   {
;;;6083   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
004292  230a              MOVS     r3,#0xa
004294  4c4c              LDR      r4,|L1.17352|
004296  484b              LDR      r0,|L1.17348|
;;;6084   	{
;;;6085   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6086   	if(powerSummaryCnt>=10)
;;;6087   		{
;;;6088   		power_summary=power_summary_tempo;
;;;6089   		}
;;;6090   	}
;;;6091   else powerSummaryCnt=0;
004298  2500              MOVS     r5,#0
00429a  6822              LDR      r2,[r4,#0]            ;6083  ; power_summary_tempo_old
00429c  6800              LDR      r0,[r0,#0]            ;6083  ; power_summary_tempo
00429e  fbb2f6f3          UDIV     r6,r2,r3              ;6083
0042a2  fbb0f1f3          UDIV     r1,r0,r3              ;6083
0042a6  4a49              LDR      r2,|L1.17356|
0042a8  42b1              CMP      r1,r6                 ;6083
0042aa  d10b              BNE      |L1.17092|
0042ac  7811              LDRB     r1,[r2,#0]            ;6085  ; powerSummaryCnt
0042ae  290f              CMP      r1,#0xf               ;6085
0042b0  d202              BCS      |L1.17080|
0042b2  f1010101          ADD      r1,r1,#1              ;6085
0042b6  7011              STRB     r1,[r2,#0]            ;6085
                  |L1.17080|
0042b8  7811              LDRB     r1,[r2,#0]            ;6086  ; powerSummaryCnt
0042ba  290a              CMP      r1,#0xa               ;6086
0042bc  d303              BCC      |L1.17094|
0042be  4944              LDR      r1,|L1.17360|
0042c0  6008              STR      r0,[r1,#0]            ;6088  ; power_summary
0042c2  e000              B        |L1.17094|
                  |L1.17092|
0042c4  7015              STRB     r5,[r2,#0]
                  |L1.17094|
;;;6092   power_summary_tempo_old=power_summary_tempo;
0042c6  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6093   
;;;6094   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0042c8  4842              LDR      r0,|L1.17364|
0042ca  4c43              LDR      r4,|L1.17368|
0042cc  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
0042d0  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
0042d4  fbb0f1f3          UDIV     r1,r0,r3
0042d8  fbb2f3f3          UDIV     r3,r2,r3
;;;6095   	{
;;;6096   	if(powerCurrentCnt<15)powerCurrentCnt++;
0042dc  4a3f              LDR      r2,|L1.17372|
0042de  4299              CMP      r1,r3                 ;6094
0042e0  d10b              BNE      |L1.17146|
0042e2  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0042e4  290f              CMP      r1,#0xf
0042e6  d202              BCS      |L1.17134|
0042e8  f1010101          ADD      r1,r1,#1
0042ec  7011              STRB     r1,[r2,#0]
                  |L1.17134|
;;;6097   	if(powerCurrentCnt>=10)
0042ee  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0042f0  290a              CMP      r1,#0xa
0042f2  d303              BCC      |L1.17148|
;;;6098   		{
;;;6099   		power_current=power_current_tempo;
0042f4  493a              LDR      r1,|L1.17376|
0042f6  8008              STRH     r0,[r1,#0]
0042f8  e000              B        |L1.17148|
                  |L1.17146|
;;;6100   		}
;;;6101   	}
;;;6102   else powerCurrentCnt=0;
0042fa  7015              STRB     r5,[r2,#0]
                  |L1.17148|
;;;6103   power_current_tempo_old=power_current_tempo;
0042fc  8020              STRH     r0,[r4,#0]
;;;6104   }
0042fe  bd70              POP      {r4-r6,pc}
;;;6105   
                          ENDP

                  energometr_hndl PROC
;;;6215   //-----------------------------------------------
;;;6216   void energometr_hndl(void)
004300  4770              BX       lr
;;;6217   {
;;;6218   //2F 3F 21 0D 0A 
;;;6219   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6220   //2F 3F 21 0D 0A 
;;;6221   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6222   //06 30 35 31 0D 0A 
;;;6223   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6224   
;;;6225   #ifdef CE102M_ENABLED
;;;6226   /*if
;;;6227   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6228   
;;;6229   if(read_power_cnt_main_cnt)
;;;6230   	{
;;;6231   	read_power_cnt_main_cnt--;
;;;6232   	if(read_power_cnt_main_cnt==0)
;;;6233   		{
;;;6234   		rx_read_power_cnt_phase=0;
;;;6235   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6236   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6237   		else bENERGOMETR_UIP=0;
;;;6238   		//bENERGOMETR_UIP=2;
;;;6239   		}
;;;6240   	}
;;;6241   
;;;6242   if (rx_read_power_cnt_phase==0)
;;;6243   	{
;;;6244   	char command_with_crc[20];
;;;6245   	
;;;6246      	command_with_crc[0]=0xaf;  // /
;;;6247   	command_with_crc[1]=0x3f;  // ?
;;;6248   	command_with_crc[2]=0x21;  // !
;;;6249   	command_with_crc[3]=0x8d;  // CR
;;;6250   	command_with_crc[4]=0x0a;  // LF
;;;6251   
;;;6252   	uart_out__adr1(command_with_crc,5);
;;;6253   
;;;6254   	rx_wr_index1=0;
;;;6255   	rx_read_power_cnt_phase=1;
;;;6256   
;;;6257   	read_power_cnt_main_cnt=50;
;;;6258   	}
;;;6259   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6260   	{
;;;6261   	char command_with_crc[20];
;;;6262   	
;;;6263   	command_with_crc[0]=0x06;  //  
;;;6264   	command_with_crc[1]=0x30;  // 0
;;;6265   	command_with_crc[2]=0x35;  // 5
;;;6266   	command_with_crc[3]=0xb1;  // 1
;;;6267   	command_with_crc[4]=0x8d;  // CR
;;;6268   	command_with_crc[5]=0x0a;  // LF
;;;6269   	
;;;6270   	uart_out__adr1(command_with_crc,6);
;;;6271   	
;;;6272   	rx_wr_index1=0;
;;;6273   	rx_read_power_cnt_phase=3;
;;;6274   
;;;6275   	read_power_cnt_main_cnt=50;
;;;6276   	}  
;;;6277   
;;;6278   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6279   	{
;;;6280   	char command_with_crc[20];
;;;6281   	
;;;6282   	command_with_crc[0]=0x81;  //  
;;;6283   	command_with_crc[1]=0xd2;  // 0
;;;6284   	command_with_crc[2]=0xb1;  // 5
;;;6285   	command_with_crc[3]=0x82;  // 1
;;;6286   	command_with_crc[4]=0x56;  // CR
;;;6287   	command_with_crc[5]=0xcf;  // LF
;;;6288   	command_with_crc[6]=0xcc;  // 1
;;;6289   	command_with_crc[7]=0xd4;  // CR
;;;6290   	command_with_crc[8]=0x41;  // LF
;;;6291   	command_with_crc[9]=0x28;  // 1
;;;6292   	command_with_crc[10]=0xa9;  // CR
;;;6293   	command_with_crc[11]=0x03;  // LF
;;;6294   	command_with_crc[12]=0x5f;  // LF
;;;6295   		
;;;6296   	uart_out__adr1(command_with_crc,13);
;;;6297   	
;;;6298   	rx_wr_index1=0;
;;;6299   	rx_read_power_cnt_phase=5;
;;;6300   
;;;6301   	read_power_cnt_main_cnt=50;
;;;6302   	}  
;;;6303   
;;;6304   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6305   	{
;;;6306   	char command_with_crc[20];
;;;6307   	
;;;6308   	command_with_crc[0]=0x81;  //  
;;;6309   	command_with_crc[1]=0xd2;  // 0
;;;6310   	command_with_crc[2]=0xb1;  // 5
;;;6311   	command_with_crc[3]=0x82;  // 1
;;;6312   	command_with_crc[4]=0xc3;  // CR
;;;6313   	command_with_crc[5]=0x55;  // LF
;;;6314   	command_with_crc[6]=0xd2;  // 1
;;;6315   	command_with_crc[7]=0xd2;  // CR
;;;6316   	command_with_crc[8]=0xc5;  // LF
;;;6317   	command_with_crc[9]=0x28;  // 1
;;;6318   	command_with_crc[10]=0xa9;  // CR
;;;6319   	command_with_crc[11]=0x03;  // LF
;;;6320   	command_with_crc[12]=0x5a;  // LF
;;;6321   		
;;;6322   	uart_out__adr1(command_with_crc,13);
;;;6323   	
;;;6324   	rx_wr_index1=0;
;;;6325   	rx_read_power_cnt_phase=9;
;;;6326   
;;;6327   	read_power_cnt_main_cnt=50;
;;;6328   	}  
;;;6329   
;;;6330   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6331   	{
;;;6332   	char command_with_crc[20];
;;;6333   	
;;;6334   	command_with_crc[0]=0x81;  //  		01
;;;6335   	command_with_crc[1]=0xd2;  // R		52
;;;6336   	command_with_crc[2]=0xb1;  // 1		31
;;;6337   	command_with_crc[3]=0x82;  // 		02
;;;6338   	command_with_crc[4]=0x50;  // P		50
;;;6339   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6340   	command_with_crc[6]=0xd7;  // W		57
;;;6341   	command_with_crc[7]=0xc5;  // E		45
;;;6342   	command_with_crc[8]=0x50;  // P		50
;;;6343   	command_with_crc[9]=0x28;  // (		28
;;;6344   	command_with_crc[10]=0xa9;  // )	29
;;;6345   	command_with_crc[11]=0x03;  // 		03
;;;6346   	command_with_crc[12]=0xe4;  // d	64
;;;6347   		
;;;6348   	uart_out__adr1(command_with_crc,13);
;;;6349   	
;;;6350   	rx_wr_index1=0;
;;;6351   	rx_read_power_cnt_phase=21;
;;;6352   
;;;6353   	read_power_cnt_main_cnt=50;
;;;6354   	}  
;;;6355   
;;;6356   
;;;6357   #endif
;;;6358   }
;;;6359   
                          ENDP

                  ips_current_average_hndl PROC
;;;6360   //-----------------------------------------------
;;;6361   void ips_current_average_hndl(void)
004302  e92d4ff0          PUSH     {r4-r11,lr}
;;;6362   {
004306  b089              SUB      sp,sp,#0x24
;;;6363   
;;;6364   if(++ica_timer_cnt>=10) 
004308  4e36              LDR      r6,|L1.17380|
;;;6365   	{
;;;6366   	ica_timer_cnt=0;
00430a  2400              MOVS     r4,#0
00430c  7830              LDRB     r0,[r6,#0]            ;6364  ; ica_timer_cnt
00430e  1c40              ADDS     r0,r0,#1              ;6364
004310  b2c0              UXTB     r0,r0                 ;6364
004312  7030              STRB     r0,[r6,#0]            ;6364
004314  280a              CMP      r0,#0xa               ;6364
004316  d300              BCC      |L1.17178|
004318  7034              STRB     r4,[r6,#0]
                  |L1.17178|
;;;6367   	}
;;;6368   
;;;6369   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
00431a  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
00431c  4f32              LDR      r7,|L1.17384|
;;;6370   	{
;;;6371   	
;;;6372   	ica_plazma[0]++;
;;;6373   
;;;6374   	ica_my_current=bps_I;
;;;6375   
;;;6376   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00431e  f8dfb0cc          LDR      r11,|L1.17388|
004322  4d20              LDR      r5,|L1.17316|
004324  bbe8              CBNZ     r0,|L1.17314|
004326  7f68              LDRB     r0,[r5,#0x1d]         ;6369  ; num_of_wrks_bps
004328  b3d8              CBZ      r0,|L1.17314|
00432a  f8950022          LDRB     r0,[r5,#0x22]         ;6369  ; spc_stat
00432e  7969              LDRB     r1,[r5,#5]            ;6369  ; vz1_stat
004330  4308              ORRS     r0,r0,r1              ;6369
004332  79e9              LDRB     r1,[r5,#7]            ;6369  ; vz2_stat
004334  4308              ORRS     r0,r0,r1              ;6369
004336  7839              LDRB     r1,[r7,#0]            ;6369  ; sp_ch_stat
004338  4308              ORRS     r0,r0,r1              ;6369
00433a  d17e              BNE      |L1.17466|
00433c  f8df90b0          LDR      r9,|L1.17392|
004340  f8990000          LDRB     r0,[r9,#0]            ;6372  ; ica_plazma
004344  f1000001          ADD      r0,r0,#1              ;6372
004348  f8890000          STRB     r0,[r9,#0]            ;6372
00434c  4829              LDR      r0,|L1.17396|
00434e  f9b01000          LDRSH    r1,[r0,#0]            ;6374  ; bps_I
004352  4829              LDR      r0,|L1.17400|
004354  8001              STRH     r1,[r0,#0]            ;6374
004356  4829              LDR      r0,|L1.17404|
;;;6377   		{
;;;6378   		ica_plazma[1]++;
;;;6379   		ica_u_necc--;
004358  f8dfa0a4          LDR      r10,|L1.17408|
00435c  f9b02000          LDRSH    r2,[r0,#0]            ;6376  ; ica_your_current
004360  4648              MOV      r0,r9                 ;6372
004362  f9bac000          LDRSH    r12,[r10,#0]
004366  7843              LDRB     r3,[r0,#1]            ;6378
004368  4826              LDR      r0,|L1.17412|
00436a  4291              CMP      r1,r2                 ;6376
00436c  f9b08000          LDRSH    r8,[r0,#0]            ;6376
004370  4658              MOV      r0,r11                ;6376
004372  f9b00000          LDRSH    r0,[r0,#0]            ;6376
004376  dd47              BLE      |L1.17416|
004378  eba10e02          SUB      lr,r1,r2              ;6376
00437c  f1be0f05          CMP      lr,#5                 ;6376
004380  db42              BLT      |L1.17416|
004382  2801              CMP      r0,#1                 ;6376
004384  d004              BEQ      |L1.17296|
004386  2802              CMP      r0,#2                 ;6376
004388  d13e              BNE      |L1.17416|
00438a  f1b80f05          CMP      r8,#5                 ;6376
00438e  dd3b              BLE      |L1.17416|
                  |L1.17296|
004390  f1030301          ADD      r3,r3,#1              ;6378
004394  f8893001          STRB     r3,[r9,#1]            ;6378
004398  f1ac0c01          SUB      r12,r12,#1
00439c  f8aac000          STRH     r12,[r10,#0]
0043a0  e046              B        |L1.17456|
                  |L1.17314|
0043a2  e04a              B        |L1.17466|
                  |L1.17316|
                          DCD      ||area_number.25||
                  |L1.17320|
                          DCD      bps
                  |L1.17324|
                          DCD      NUMIST
                  |L1.17328|
                          DCD      mess_data
                  |L1.17332|
                          DCD      num_necc
                  |L1.17336|
                          DCD      main_1Hz_cnt
                  |L1.17340|
                          DCD      ipsBlckStat
                  |L1.17344|
                          DCD      TSIGN
                  |L1.17348|
                          DCD      power_summary_tempo
                  |L1.17352|
                          DCD      power_summary_tempo_old
                  |L1.17356|
                          DCD      powerSummaryCnt
                  |L1.17360|
                          DCD      power_summary
                  |L1.17364|
                          DCD      power_current_tempo
                  |L1.17368|
                          DCD      power_current_tempo_old
                  |L1.17372|
                          DCD      powerCurrentCnt
                  |L1.17376|
                          DCD      power_current
                  |L1.17380|
                          DCD      ica_timer_cnt
                  |L1.17384|
                          DCD      sp_ch_stat
                  |L1.17388|
                          DCD      ICA_EN
                  |L1.17392|
                          DCD      ica_plazma
                  |L1.17396|
                          DCD      bps_I
                  |L1.17400|
                          DCD      ica_my_current
                  |L1.17404|
                          DCD      ica_your_current
                  |L1.17408|
                          DCD      ica_u_necc
                  |L1.17412|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.17416|
;;;6380   		}
;;;6381   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004408  4291              CMP      r1,r2
00440a  da11              BGE      |L1.17456|
00440c  1a51              SUBS     r1,r2,r1
00440e  2905              CMP      r1,#5
004410  db0e              BLT      |L1.17456|
004412  2801              CMP      r0,#1
004414  d004              BEQ      |L1.17440|
004416  2802              CMP      r0,#2
004418  d10a              BNE      |L1.17456|
00441a  f1b80f05          CMP      r8,#5
00441e  dd07              BLE      |L1.17456|
                  |L1.17440|
;;;6382   		{
;;;6383   		ica_plazma[1]--;
004420  f1a30301          SUB      r3,r3,#1
004424  f8893001          STRB     r3,[r9,#1]
;;;6384   		ica_u_necc++;
004428  f10c0c01          ADD      r12,r12,#1
00442c  f8aac000          STRH     r12,[r10,#0]
                  |L1.17456|
;;;6385   		}
;;;6386   	gran(&ica_u_necc,-100,100);
004430  2264              MOVS     r2,#0x64
004432  4251              RSBS     r1,r2,#0
004434  48ff              LDR      r0,|L1.18484|
004436  f7fffffe          BL       gran
                  |L1.17466|
;;;6387   	}
;;;6388   
;;;6389   
;;;6390   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) /*&& (num_of_wrks_bps)*/)
00443a  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
00443e  2801              CMP      r0,#1
004440  d166              BNE      |L1.17680|
004442  f8950022          LDRB     r0,[r5,#0x22]  ; spc_stat
004446  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004448  4308              ORRS     r0,r0,r1
00444a  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
00444c  4308              ORRS     r0,r0,r1
00444e  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004450  4308              ORRS     r0,r0,r1
004452  d15d              BNE      |L1.17680|
;;;6391   	{
;;;6392   	
;;;6393   	if(ica_timer_cnt==8)
004454  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6394   		{
;;;6395   		char modbus_buff[20],i;
;;;6396   		short crc_temp;
;;;6397   	
;;;6398   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004456  4bf8              LDR      r3,|L1.18488|
;;;6399   		modbus_buff[1] = 4;
;;;6400   		modbus_buff[2] = 0;
;;;6401   		modbus_buff[3] = 2;
;;;6402   		modbus_buff[4] = 0;	
;;;6403   		modbus_buff[5] = 1;
;;;6404   	
;;;6405   		crc_temp= CRC16_2(modbus_buff,6);
;;;6406   	
;;;6407   		modbus_buff[6]= (char)crc_temp;
;;;6408   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6409   	
;;;6410   		if(ICA_CH==0)
004458  4ff8              LDR      r7,|L1.18492|
00445a  2808              CMP      r0,#8                 ;6393
00445c  d05b              BEQ      |L1.17686|
;;;6411   			{
;;;6412   			for (i=0;i<8;i++)
;;;6413   				{
;;;6414   				putchar_sc16is700(modbus_buff[i]);
;;;6415   				}
;;;6416   			}
;;;6417   		else if(ICA_CH==2)
;;;6418   			{
;;;6419   			uart_out1 (5,4,0,2,0,1,0);
;;;6420   			}
;;;6421   		}
;;;6422   	else
;;;6423   		{
;;;6424   		char modbus_buff[20],i;
;;;6425   		short crc_temp, tempSSSS;
;;;6426   
;;;6427   		tempSSSS=cntrl_stat_old;
00445e  f9b56032          LDRSH    r6,[r5,#0x32]  ; cntrl_stat_old
;;;6428   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
004462  48f7              LDR      r0,|L1.18496|
004464  f06f0214          MVN      r2,#0x14
004468  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
00446c  ebc01100          RSB      r1,r0,r0,LSL #4
004470  eb020c81          ADD      r12,r2,r1,LSL #2
004474  f9b52050          LDRSH    r2,[r5,#0x50]  ; main_kb_cnt
004478  4594              CMP      r12,r2
00447a  d00b              BEQ      |L1.17556|
00447c  f06f0513          MVN      r5,#0x13
004480  eb050581          ADD      r5,r5,r1,LSL #2
004484  4295              CMP      r5,r2
004486  d005              BEQ      |L1.17556|
004488  f06f0512          MVN      r5,#0x12
00448c  eb050181          ADD      r1,r5,r1,LSL #2
004490  4291              CMP      r1,r2
004492  d101              BNE      |L1.17560|
                  |L1.17556|
004494  f4404680          ORR      r6,r0,#0x4000
                  |L1.17560|
;;;6429   
;;;6430   
;;;6431   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004498  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
00449a  f88d0010          STRB     r0,[sp,#0x10]
;;;6432   		modbus_buff[1] = 6;
00449e  f04f0006          MOV      r0,#6
0044a2  f88d0011          STRB     r0,[sp,#0x11]
;;;6433   		modbus_buff[2] = 0;
0044a6  f88d4012          STRB     r4,[sp,#0x12]
;;;6434   		modbus_buff[3] = 100;
0044aa  f04f0064          MOV      r0,#0x64
0044ae  f88d0013          STRB     r0,[sp,#0x13]
;;;6435   		modbus_buff[4] = (char)(tempSSSS/256);	
0044b2  ea4f70e6          ASR      r0,r6,#31
0044b6  eb066010          ADD      r0,r6,r0,LSR #24
0044ba  ea4f2120          ASR      r1,r0,#8
0044be  f88d1014          STRB     r1,[sp,#0x14]
;;;6436   		modbus_buff[5] = (char)(tempSSSS%256);
0044c2  4630              MOV      r0,r6
0044c4  f88d0015          STRB     r0,[sp,#0x15]
;;;6437   	
;;;6438   		crc_temp= CRC16_2(modbus_buff,6);
0044c8  f04f0106          MOV      r1,#6
0044cc  a804              ADD      r0,sp,#0x10
0044ce  f7fffffe          BL       CRC16_2
;;;6439   	
;;;6440   		modbus_buff[6]= (char)crc_temp;
0044d2  f88d0016          STRB     r0,[sp,#0x16]
;;;6441   		modbus_buff[7]= (char)(crc_temp>>8);
0044d6  ea4f2020          ASR      r0,r0,#8
0044da  f88d0017          STRB     r0,[sp,#0x17]
;;;6442   	
;;;6443   		crc_temp= CRC16_2(modbus_buff,6);
0044de  f04f0106          MOV      r1,#6
0044e2  a804              ADD      r0,sp,#0x10
0044e4  f7fffffe          BL       CRC16_2
;;;6444   	
;;;6445   		plazma_ica1=tempSSSS;
0044e8  48d6              LDR      r0,|L1.18500|
0044ea  8006              STRH     r6,[r0,#0]
;;;6446   		if(ICA_CH==0)
0044ec  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
0044f0  b3f0              CBZ      r0,|L1.17776|
;;;6447   			{
;;;6448   			for (i=0;i<8;i++)
;;;6449   				{
;;;6450   				putchar_sc16is700(modbus_buff[i]);
;;;6451   				}
;;;6452   			}
;;;6453   		else if(ICA_CH==2)
0044f2  2802              CMP      r0,#2
0044f4  d10c              BNE      |L1.17680|
;;;6454   			{
;;;6455   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
0044f6  f89d0015          LDRB     r0,[sp,#0x15]
0044fa  f89d1014          LDRB     r1,[sp,#0x14]
0044fe  e9cd0401          STRD     r0,r4,[sp,#4]
004502  9100              STR      r1,[sp,#0]
004504  2364              MOVS     r3,#0x64
004506  2200              MOVS     r2,#0
004508  2106              MOVS     r1,#6
00450a  2005              MOVS     r0,#5
00450c  f7fffffe          BL       uart_out1
                  |L1.17680|
;;;6456   			}
;;;6457   		}
;;;6458   	}
;;;6459   }
004510  b009              ADD      sp,sp,#0x24
004512  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.17686|
004516  8818              LDRH     r0,[r3,#0]            ;6398  ; ICA_MODBUS_ADDRESS
004518  f88d0010          STRB     r0,[sp,#0x10]         ;6398
00451c  f04f0004          MOV      r0,#4                 ;6399
004520  f88d0011          STRB     r0,[sp,#0x11]         ;6399
004524  f88d4012          STRB     r4,[sp,#0x12]         ;6400
004528  f04f0002          MOV      r0,#2                 ;6401
00452c  f88d0013          STRB     r0,[sp,#0x13]         ;6401
004530  f88d4014          STRB     r4,[sp,#0x14]         ;6402
004534  f04f0501          MOV      r5,#1                 ;6403
004538  f88d5015          STRB     r5,[sp,#0x15]         ;6403
00453c  f04f0106          MOV      r1,#6                 ;6405
004540  a804              ADD      r0,sp,#0x10           ;6405
004542  f7fffffe          BL       CRC16_2
004546  f88d0016          STRB     r0,[sp,#0x16]         ;6407
00454a  ea4f2020          ASR      r0,r0,#8              ;6408
00454e  f88d0017          STRB     r0,[sp,#0x17]         ;6408
004552  f9b70000          LDRSH    r0,[r7,#0]            ;6410  ; ICA_CH
004556  b160              CBZ      r0,|L1.17778|
004558  2802              CMP      r0,#2                 ;6417
00455a  d1d9              BNE      |L1.17680|
00455c  e9cd4500          STRD     r4,r5,[sp,#0]         ;6419
004560  2302              MOVS     r3,#2                 ;6419
004562  2200              MOVS     r2,#0                 ;6419
004564  2104              MOVS     r1,#4                 ;6419
004566  2005              MOVS     r0,#5                 ;6419
004568  9402              STR      r4,[sp,#8]            ;6419
00456a  f7fffffe          BL       uart_out1
00456e  e7cf              B        |L1.17680|
                  |L1.17776|
004570  e00b              B        |L1.17802|
                  |L1.17778|
004572  f04f0400          MOV      r4,#0                 ;6412
004576  ad04              ADD      r5,sp,#0x10           ;6395
                  |L1.17784|
004578  5d28              LDRB     r0,[r5,r4]            ;6414
00457a  f7fffffe          BL       putchar_sc16is700
00457e  f1040401          ADD      r4,r4,#1              ;6412
004582  b2e4              UXTB     r4,r4                 ;6412
004584  2c08              CMP      r4,#8                 ;6412
004586  d3f7              BCC      |L1.17784|
004588  e7c2              B        |L1.17680|
                  |L1.17802|
00458a  f04f0400          MOV      r4,#0                 ;6448
00458e  ad04              ADD      r5,sp,#0x10           ;6424
                  |L1.17808|
004590  5d28              LDRB     r0,[r5,r4]            ;6450
004592  f7fffffe          BL       putchar_sc16is700
004596  f1040401          ADD      r4,r4,#1              ;6448
00459a  b2e4              UXTB     r4,r4                 ;6448
00459c  2c08              CMP      r4,#8                 ;6448
00459e  d3f7              BCC      |L1.17808|
0045a0  e7b6              B        |L1.17680|
;;;6460   
                          ENDP

                  ipsBlckHndl PROC
;;;6543   //-----------------------------------------------
;;;6544   void ipsBlckHndl(char in)
0045a2  b510              PUSH     {r4,lr}
;;;6545   {
;;;6546   
;;;6547   ipsBlckStat=0;
0045a4  4ba8              LDR      r3,|L1.18504|
0045a6  f04f0000          MOV      r0,#0
0045aa  8018              STRH     r0,[r3,#0]
;;;6548   if(ipsBlckSrc==1)
0045ac  48a7              LDR      r0,|L1.18508|
0045ae  f04f0401          MOV      r4,#1
;;;6549   	{
;;;6550   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
0045b2  f44f62fa          MOV      r2,#0x7d0
0045b6  f9b01000          LDRSH    r1,[r0,#0]            ;6548  ; ipsBlckSrc
0045ba  48a5              LDR      r0,|L1.18512|
0045bc  2901              CMP      r1,#1                 ;6548
0045be  f9b00000          LDRSH    r0,[r0,#0]
0045c2  d006              BEQ      |L1.17874|
;;;6551   	}
;;;6552   else if(ipsBlckSrc==2)
0045c4  2902              CMP      r1,#2
0045c6  d10f              BNE      |L1.17896|
0045c8  49a2              LDR      r1,|L1.18516|
;;;6553   	{
;;;6554   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
0045ca  f9b1101a          LDRSH    r1,[r1,#0x1a]
0045ce  b160              CBZ      r0,|L1.17898|
0045d0  e00d              B        |L1.17902|
                  |L1.17874|
0045d2  49a0              LDR      r1,|L1.18516|
0045d4  f9b11016          LDRSH    r1,[r1,#0x16]         ;6550
0045d8  b908              CBNZ     r0,|L1.17886|
0045da  4291              CMP      r1,r2                 ;6550
0045dc  dc03              BGT      |L1.17894|
                  |L1.17886|
0045de  2801              CMP      r0,#1                 ;6550
0045e0  d102              BNE      |L1.17896|
0045e2  4291              CMP      r1,r2                 ;6550
0045e4  da00              BGE      |L1.17896|
                  |L1.17894|
0045e6  801c              STRH     r4,[r3,#0]            ;6550
                  |L1.17896|
;;;6555   	}
;;;6556   }
0045e8  bd10              POP      {r4,pc}
                  |L1.17898|
0045ea  4291              CMP      r1,r2                 ;6554
0045ec  dc03              BGT      |L1.17910|
                  |L1.17902|
0045ee  2801              CMP      r0,#1                 ;6554
0045f0  d1fa              BNE      |L1.17896|
0045f2  4291              CMP      r1,r2                 ;6554
0045f4  daf8              BGE      |L1.17896|
                  |L1.17910|
0045f6  801c              STRH     r4,[r3,#0]            ;6554
0045f8  bd10              POP      {r4,pc}
;;;6557   
                          ENDP

                  bps_drv PROC
;;;6558   //-----------------------------------------------
;;;6559   void bps_drv(char in)
0045fa  e92d41f0          PUSH     {r4-r8,lr}
;;;6560   {
0045fe  4606              MOV      r6,r0
;;;6561   char temp;
;;;6562   
;;;6563   if (bps[in]._device!=dSRC) return;
004600  ebc600c6          RSB      r0,r6,r6,LSL #3
004604  4994              LDR      r1,|L1.18520|
004606  eb001006          ADD      r0,r0,r6,LSL #4
00460a  f8112020          LDRB     r2,[r1,r0,LSL #2]
00460e  2a03              CMP      r2,#3
004610  d177              BNE      |L1.18178|
;;;6564   temp=bps[in]._flags_tm;
004612  eb010480          ADD      r4,r1,r0,LSL #2
004616  f8945042          LDRB     r5,[r4,#0x42]
;;;6565   if(temp&(1<<AV_T))
00461a  07a8              LSLS     r0,r5,#30
00461c  d517              BPL      |L1.17998|
;;;6566   	{
;;;6567   	if(bps[in]._temp_av_cnt<1200) 
00461e  f9b41046          LDRSH    r1,[r4,#0x46]
004622  f44f6096          MOV      r0,#0x4b0
004626  4281              CMP      r1,r0
004628  da22              BGE      |L1.18032|
;;;6568   		{
;;;6569   		bps[in]._temp_av_cnt++;
00462a  f1010101          ADD      r1,r1,#1
00462e  b209              SXTH     r1,r1
004630  f8a41046          STRH     r1,[r4,#0x46]
;;;6570   		if(bps[in]._temp_av_cnt>=1200)
004634  4281              CMP      r1,r0
004636  db1b              BLT      |L1.18032|
;;;6571   			{
;;;6572   			bps[in]._temp_av_cnt=1200;
004638  f8a40046          STRH     r0,[r4,#0x46]
;;;6573   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
00463c  7860              LDRB     r0,[r4,#1]
00463e  07c0              LSLS     r0,r0,#31
004640  d116              BNE      |L1.18032|
004642  2201              MOVS     r2,#1
004644  2100              MOVS     r1,#0
004646  4630              MOV      r0,r6
004648  f7fffffe          BL       avar_bps_hndl
00464c  e010              B        |L1.18032|
                  |L1.17998|
;;;6574   			}
;;;6575   		}
;;;6576   	}
;;;6577   
;;;6578   else if(!(temp&(1<<AV_T)))
;;;6579   	{
;;;6580   	if(bps[in]._temp_av_cnt) 
00464e  f9b41046          LDRSH    r1,[r4,#0x46]
004652  b169              CBZ      r1,|L1.18032|
;;;6581   		{
;;;6582   		bps[in]._temp_av_cnt--;
004654  f1a10101          SUB      r1,r1,#1
004658  b208              SXTH     r0,r1
00465a  f8a40046          STRH     r0,[r4,#0x46]
;;;6583   		if(!bps[in]._temp_av_cnt)
00465e  b938              CBNZ     r0,|L1.18032|
;;;6584   			{
;;;6585   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004660  7860              LDRB     r0,[r4,#1]
004662  07c0              LSLS     r0,r0,#31
004664  d004              BEQ      |L1.18032|
004666  2200              MOVS     r2,#0
004668  4611              MOV      r1,r2
00466a  4630              MOV      r0,r6
00466c  f7fffffe          BL       avar_bps_hndl
                  |L1.18032|
;;;6586   			}
;;;6587   		} 	
;;;6588   
;;;6589   	}
;;;6590   
;;;6591   if((temp&(1<<AVUMAX)))
004670  0729              LSLS     r1,r5,#28
;;;6592   	{
;;;6593   	if(bps[in]._umax_av_cnt<10) 
;;;6594   		{
;;;6595   		bps[in]._umax_av_cnt++;
;;;6596   		if(bps[in]._umax_av_cnt>=10)
;;;6597   			{ 
;;;6598   			bps[in]._umax_av_cnt=10;
004672  f04f070a          MOV      r7,#0xa
004676  f04f0000          MOV      r0,#0                 ;6573
00467a  d515              BPL      |L1.18088|
00467c  f9b40048          LDRSH    r0,[r4,#0x48]         ;6593
004680  280a              CMP      r0,#0xa               ;6593
004682  da26              BGE      |L1.18130|
004684  f1000001          ADD      r0,r0,#1              ;6595
004688  b200              SXTH     r0,r0                 ;6595
00468a  f8a40048          STRH     r0,[r4,#0x48]         ;6595
00468e  280a              CMP      r0,#0xa               ;6596
004690  db1f              BLT      |L1.18130|
004692  f8a47048          STRH     r7,[r4,#0x48]
;;;6599   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004696  7860              LDRB     r0,[r4,#1]
004698  0780              LSLS     r0,r0,#30
00469a  d41a              BMI      |L1.18130|
00469c  2201              MOVS     r2,#1
00469e  4611              MOV      r1,r2
0046a0  4630              MOV      r0,r6
0046a2  f7fffffe          BL       avar_bps_hndl
0046a6  e014              B        |L1.18130|
                  |L1.18088|
;;;6600   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6601   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6602   				{
;;;6603   				apv_cnt[in,0]=APV_INIT;
;;;6604   				apv_cnt[in,1]=APV_INIT;
;;;6605   				apv_cnt[in,2]=APV_INIT;
;;;6606   				apv_flags[in]=afOFF;
;;;6607   				}				*/
;;;6608   						
;;;6609   			}
;;;6610   		} 
;;;6611   	}		
;;;6612   else if(!(temp&(1<<AVUMAX)))
;;;6613   	{
;;;6614   	if(bps[in]._umax_av_cnt>0) 
0046a8  f9b41048          LDRSH    r1,[r4,#0x48]
0046ac  2900              CMP      r1,#0
0046ae  dd0d              BLE      |L1.18124|
;;;6615   		{
;;;6616   		bps[in]._umax_av_cnt--;
0046b0  f1a10101          SUB      r1,r1,#1
0046b4  b208              SXTH     r0,r1
0046b6  f8a40048          STRH     r0,[r4,#0x48]
;;;6617   		if(bps[in]._umax_av_cnt==0)
0046ba  b950              CBNZ     r0,|L1.18130|
;;;6618   			{
;;;6619   			bps[in]._umax_av_cnt=0;
;;;6620   			avar_bps_hndl(in,1,0);
0046bc  f04f0200          MOV      r2,#0
0046c0  f04f0101          MOV      r1,#1
0046c4  4630              MOV      r0,r6
0046c6  f7fffffe          BL       avar_bps_hndl
0046ca  e002              B        |L1.18130|
                  |L1.18124|
;;;6621   	 //		apv_cnt[in,0]=0;
;;;6622   	//		apv_cnt[in,1]=0;
;;;6623   	 //		apv_cnt[in,2]=0;			
;;;6624   			}
;;;6625   		}
;;;6626   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
0046cc  da01              BGE      |L1.18130|
0046ce  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.18130|
;;;6627   	}
;;;6628   
;;;6629   if(temp&(1<<AVUMIN))
0046d2  06e8              LSLS     r0,r5,#27
0046d4  d516              BPL      |L1.18180|
;;;6630   	{
;;;6631   	if(bps[in]._umin_av_cnt<10) 
0046d6  f9b4004a          LDRSH    r0,[r4,#0x4a]
0046da  280a              CMP      r0,#0xa
0046dc  da20              BGE      |L1.18208|
;;;6632   		{
;;;6633   		bps[in]._umin_av_cnt++;
0046de  f1000001          ADD      r0,r0,#1
0046e2  b200              SXTH     r0,r0
0046e4  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6634   		if(bps[in]._umin_av_cnt>=10)
0046e8  280a              CMP      r0,#0xa
0046ea  db19              BLT      |L1.18208|
;;;6635   			{ 
;;;6636   			bps[in]._umin_av_cnt=10;
0046ec  f8a4704a          STRH     r7,[r4,#0x4a]
;;;6637   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
0046f0  7860              LDRB     r0,[r4,#1]
0046f2  0740              LSLS     r0,r0,#29
0046f4  d414              BMI      |L1.18208|
0046f6  2201              MOVS     r2,#1
0046f8  2102              MOVS     r1,#2
0046fa  4630              MOV      r0,r6
0046fc  f7fffffe          BL       avar_bps_hndl
004700  e00e              B        |L1.18208|
                  |L1.18178|
004702  e047              B        |L1.18324|
                  |L1.18180|
;;;6638   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6639   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6640   				{
;;;6641   				apv_cnt[in,0]=APV_INIT;
;;;6642   				apv_cnt[in,1]=APV_INIT;
;;;6643   				apv_cnt[in,2]=APV_INIT;
;;;6644   				apv_flags[in]=afOFF;
;;;6645   				}*/				
;;;6646   			}
;;;6647   		} 
;;;6648   	}	
;;;6649   	
;;;6650   else if(!(temp&(1<<AVUMIN)))
;;;6651   	{
;;;6652   	if(bps[in]._umin_av_cnt) 
004704  f9b4004a          LDRSH    r0,[r4,#0x4a]
004708  b150              CBZ      r0,|L1.18208|
;;;6653   		{
;;;6654   		bps[in]._umin_av_cnt--;
00470a  f1a00001          SUB      r0,r0,#1
00470e  b201              SXTH     r1,r0
004710  f8a4104a          STRH     r1,[r4,#0x4a]
;;;6655   		if(bps[in]._umin_av_cnt==0)
004714  b921              CBNZ     r1,|L1.18208|
;;;6656   			{
;;;6657   			bps[in]._umin_av_cnt=0;
;;;6658   			avar_bps_hndl(in,2,0);
004716  2200              MOVS     r2,#0
004718  2102              MOVS     r1,#2
00471a  4630              MOV      r0,r6
00471c  f7fffffe          BL       avar_bps_hndl
                  |L1.18208|
;;;6659   		//	apv_cnt[in,0]=0;
;;;6660   		//	apv_cnt[in,1]=0;
;;;6661   		//	apv_cnt[in,2]=0;
;;;6662   			}
;;;6663   		}
;;;6664   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6665   	}
;;;6666   
;;;6667   //bps[in]._state=bsOFF;
;;;6668   
;;;6669   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004720  7860              LDRB     r0,[r4,#1]
004722  0700              LSLS     r0,r0,#28
004724  d003              BEQ      |L1.18222|
004726  f04f0004          MOV      r0,#4
00472a  70a0              STRB     r0,[r4,#2]
00472c  e017              B        |L1.18270|
                  |L1.18222|
;;;6670   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
00472e  484b              LDR      r0,|L1.18524|
004730  7800              LDRB     r0,[r0,#0]  ; net_av
004732  b130              CBZ      r0,|L1.18242|
004734  78e0              LDRB     r0,[r4,#3]
004736  2814              CMP      r0,#0x14
004738  d903              BLS      |L1.18242|
;;;6671   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
00473a  f04f0005          MOV      r0,#5
00473e  70a0              STRB     r0,[r4,#2]
004740  e00d              B        |L1.18270|
                  |L1.18242|
;;;6672   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004742  f8940042          LDRB     r0,[r4,#0x42]
004746  0680              LSLS     r0,r0,#26
004748  d503              BPL      |L1.18258|
00474a  f04f0002          MOV      r0,#2
00474e  70a0              STRB     r0,[r4,#2]
004750  e005              B        |L1.18270|
                  |L1.18258|
;;;6673   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004752  78e0              LDRB     r0,[r4,#3]
004754  2814              CMP      r0,#0x14
004756  d202              BCS      |L1.18270|
004758  f04f0001          MOV      r0,#1
00475c  70a0              STRB     r0,[r4,#2]
                  |L1.18270|
;;;6674   
;;;6675   
;;;6676   
;;;6677   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6678   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6679   //else bps[0]._state=ssNOT;
;;;6680   
;;;6681   //bps[in]._is_ready=0;
;;;6682   //bps[in]._is_wrk=0;
;;;6683   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6684   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6685   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6686   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6687   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6688   //	{
;;;6689   //	bps[in]._flags_bp='B';// заблокирован
;;;6690   //	bps[in]._is_ready=1;
;;;6691   //	}
;;;6692   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6693   //     {
;;;6694   //     bps[in]._flags_bp='W';// работает
;;;6695   //     bps[in]._is_ready=1;
;;;6696   //     bps[in]._is_wrk=1;
;;;6697        
;;;6698   //     }
;;;6699   //else bps[in]._is_ready=1;     
;;;6700   
;;;6701   
;;;6702   
;;;6703   
;;;6704   
;;;6705   /*
;;;6706   bps[in]._flags_tu&=BIN8(11111110);
;;;6707   if(bps[in]._ist_blok_cnt)
;;;6708   	{
;;;6709   	bps[in]._ist_blok_cnt--;
;;;6710   	bps[in]._flags_tu|=BIN8(1);
;;;6711   	}
;;;6712   
;;;6713   	   */ 
;;;6714   
;;;6715   //Пересброс БПСа при потере связи
;;;6716   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
00475e  78e0              LDRB     r0,[r4,#3]
004760  280a              CMP      r0,#0xa
004762  d306              BCC      |L1.18290|
004764  f894002c          LDRB     r0,[r4,#0x2c]
004768  f0400080          ORR      r0,r0,#0x80
00476c  f884002c          STRB     r0,[r4,#0x2c]
004770  e005              B        |L1.18302|
                  |L1.18290|
;;;6717   else bps[in]._flags_tu&=BIN8(1111111);
004772  f894002c          LDRB     r0,[r4,#0x2c]
004776  f000007f          AND      r0,r0,#0x7f
00477a  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.18302|
;;;6718   	
;;;6719   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
00477e  4931              LDR      r1,|L1.18500|
004780  f9b40050          LDRSH    r0,[r4,#0x50]
004784  3980              SUBS     r1,r1,#0x80
004786  f9b11030          LDRSH    r1,[r1,#0x30]  ; cntrl_stat
00478a  4408              ADD      r0,r0,r1
00478c  6320              STR      r0,[r4,#0x30]
;;;6720   bps[in]._vol_i=1000; 
00478e  f44f707a          MOV      r0,#0x3e8
004792  6360              STR      r0,[r4,#0x34]
                  |L1.18324|
;;;6721   }
004794  e8bd81f0          POP      {r4-r8,pc}
;;;6722   
                          ENDP

                  avt_hndl PROC
;;;6723   //-----------------------------------------------
;;;6724   void avt_hndl(void)
004798  b570              PUSH     {r4-r6,lr}
;;;6725   {
;;;6726   char i;
;;;6727   for(i=0;i<12;i++)
00479a  f04f0000          MOV      r0,#0
;;;6728   	{
;;;6729   	if(eb2_data_short[6]&(1<<i))
00479e  4930              LDR      r1,|L1.18528|
;;;6730   		{
;;;6731   		avt_stat[i]=avtON;
0047a0  4d30              LDR      r5,|L1.18532|
0047a2  f04f0401          MOV      r4,#1                 ;6729
0047a6  f9b1200c          LDRSH    r2,[r1,#0xc]          ;6729
0047aa  4603              MOV      r3,r0                 ;6727
                  |L1.18348|
0047ac  fa04f100          LSL      r1,r4,r0              ;6729
0047b0  420a              TST      r2,r1                 ;6729
0047b2  d001              BEQ      |L1.18360|
0047b4  542c              STRB     r4,[r5,r0]
0047b6  e000              B        |L1.18362|
                  |L1.18360|
;;;6732   		}
;;;6733   	else avt_stat[i]=avtOFF;
0047b8  542b              STRB     r3,[r5,r0]
                  |L1.18362|
0047ba  f1000001          ADD      r0,r0,#1              ;6727
0047be  b2c0              UXTB     r0,r0                 ;6727
0047c0  280c              CMP      r0,#0xc               ;6727
0047c2  d3f3              BCC      |L1.18348|
;;;6734   	}
;;;6735   
;;;6736   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
0047c4  4e28              LDR      r6,|L1.18536|
0047c6  7828              LDRB     r0,[r5,#0]  ; avt_stat
0047c8  4c28              LDR      r4,|L1.18540|
0047ca  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
0047cc  4281              CMP      r1,r0
0047ce  d00b              BEQ      |L1.18408|
0047d0  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0047d4  2901              CMP      r1,#1
0047d6  db07              BLT      |L1.18408|
;;;6737   	{
;;;6738   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
0047d8  2801              CMP      r0,#1
0047da  d02a              BEQ      |L1.18482|
;;;6739   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
0047dc  2300              MOVS     r3,#0
0047de  2201              MOVS     r2,#1
0047e0  210b              MOVS     r1,#0xb
0047e2  a023              ADR      r0,|L1.18544|
0047e4  f7fffffe          BL       snmp_trap_send
                  |L1.18408|
;;;6740   	}
;;;6741   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
0047e8  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
0047ea  7868              LDRB     r0,[r5,#1]  ; avt_stat
0047ec  4281              CMP      r1,r0
0047ee  d00b              BEQ      |L1.18440|
0047f0  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0047f4  2902              CMP      r1,#2
0047f6  db07              BLT      |L1.18440|
;;;6742   	{
;;;6743   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
0047f8  2801              CMP      r0,#1
0047fa  d07e              BEQ      |L1.18682|
;;;6744   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
0047fc  2300              MOVS     r3,#0
0047fe  2202              MOVS     r2,#2
004800  210b              MOVS     r1,#0xb
004802  a020              ADR      r0,|L1.18564|
004804  f7fffffe          BL       snmp_trap_send
                  |L1.18440|
;;;6745   	}
;;;6746   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004808  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
00480a  78a8              LDRB     r0,[r5,#2]  ; avt_stat
00480c  4281              CMP      r1,r0
00480e  d00b              BEQ      |L1.18472|
004810  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004814  2903              CMP      r1,#3
004816  db07              BLT      |L1.18472|
;;;6747   	{
;;;6748   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004818  2801              CMP      r0,#1
00481a  d06f              BEQ      |L1.18684|
;;;6749   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
00481c  2300              MOVS     r3,#0
00481e  2203              MOVS     r2,#3
004820  210b              MOVS     r1,#0xb
004822  a01d              ADR      r0,|L1.18584|
004824  f7fffffe          BL       snmp_trap_send
                  |L1.18472|
;;;6750   	}
;;;6751   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004828  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
00482a  78e8              LDRB     r0,[r5,#3]  ; avt_stat
00482c  4281              CMP      r1,r0
00482e  d049              BEQ      |L1.18628|
004830  e03c              B        |L1.18604|
                  |L1.18482|
004832  e0a4              B        |L1.18814|
                  |L1.18484|
                          DCD      ica_u_necc
                  |L1.18488|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.18492|
                          DCD      ICA_CH
                  |L1.18496|
                          DCD      TBAT
                  |L1.18500|
                          DCD      ||area_number.25||+0x80
                  |L1.18504|
                          DCD      ipsBlckStat
                  |L1.18508|
                          DCD      ipsBlckSrc
                  |L1.18512|
                          DCD      ipsBlckLog
                  |L1.18516|
                          DCD      ||.bss||+0x40c
                  |L1.18520|
                          DCD      bps
                  |L1.18524|
                          DCD      net_av
                  |L1.18528|
                          DCD      eb2_data_short
                  |L1.18532|
                          DCD      avt_stat
                  |L1.18536|
                          DCD      avt_stat_old
                  |L1.18540|
                          DCD      NUMAVT
                  |L1.18544|
004870  4176746f          DCB      "Avtomat #1 is OFF",0
004874  6d617420
004878  23312069
00487c  73204f46
004880  4600    
004882  00                DCB      0
004883  00                DCB      0
                  |L1.18564|
004884  4176746f          DCB      "Avtomat #2 is OFF",0
004888  6d617420
00488c  23322069
004890  73204f46
004894  4600    
004896  00                DCB      0
004897  00                DCB      0
                  |L1.18584|
004898  4176746f          DCB      "Avtomat #3 is OFF",0
00489c  6d617420
0048a0  23332069
0048a4  73204f46
0048a8  4600    
0048aa  00                DCB      0
0048ab  00                DCB      0
                  |L1.18604|
0048ac  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0048b0  2904              CMP      r1,#4
0048b2  db07              BLT      |L1.18628|
;;;6752   	{
;;;6753   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
0048b4  2801              CMP      r0,#1
0048b6  d078              BEQ      |L1.18858|
;;;6754   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
0048b8  2300              MOVS     r3,#0
0048ba  2204              MOVS     r2,#4
0048bc  210b              MOVS     r1,#0xb
0048be  a0ff              ADR      r0,|L1.19644|
0048c0  f7fffffe          BL       snmp_trap_send
                  |L1.18628|
;;;6755   	}
;;;6756   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
0048c4  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
0048c6  7928              LDRB     r0,[r5,#4]  ; avt_stat
0048c8  4281              CMP      r1,r0
0048ca  d00b              BEQ      |L1.18660|
0048cc  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0048d0  2905              CMP      r1,#5
0048d2  db07              BLT      |L1.18660|
;;;6757   	{
;;;6758   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
0048d4  2801              CMP      r0,#1
0048d6  d070              BEQ      |L1.18874|
;;;6759   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
0048d8  2300              MOVS     r3,#0
0048da  2205              MOVS     r2,#5
0048dc  210b              MOVS     r1,#0xb
0048de  a0fc              ADR      r0,|L1.19664|
0048e0  f7fffffe          BL       snmp_trap_send
                  |L1.18660|
;;;6760   	}
;;;6761   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
0048e4  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
0048e6  7968              LDRB     r0,[r5,#5]  ; avt_stat
0048e8  4281              CMP      r1,r0
0048ea  d00e              BEQ      |L1.18698|
0048ec  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0048f0  2906              CMP      r1,#6
0048f2  db0a              BLT      |L1.18698|
;;;6762   	{
;;;6763   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
0048f4  2801              CMP      r0,#1
0048f6  d067              BEQ      |L1.18888|
;;;6764   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
0048f8  e001              B        |L1.18686|
                  |L1.18682|
0048fa  e047              B        |L1.18828|
                  |L1.18684|
0048fc  e04e              B        |L1.18844|
                  |L1.18686|
0048fe  2300              MOVS     r3,#0
004900  2206              MOVS     r2,#6
004902  210b              MOVS     r1,#0xb
004904  a0f7              ADR      r0,|L1.19684|
004906  f7fffffe          BL       snmp_trap_send
                  |L1.18698|
;;;6765   	}
;;;6766   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
00490a  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
00490c  79a8              LDRB     r0,[r5,#6]  ; avt_stat
00490e  4281              CMP      r1,r0
004910  d00b              BEQ      |L1.18730|
004912  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004916  2907              CMP      r1,#7
004918  db07              BLT      |L1.18730|
;;;6767   	{
;;;6768   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
00491a  2801              CMP      r0,#1
00491c  d05b              BEQ      |L1.18902|
;;;6769   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
00491e  2300              MOVS     r3,#0
004920  2207              MOVS     r2,#7
004922  210b              MOVS     r1,#0xb
004924  a0f4              ADR      r0,|L1.19704|
004926  f7fffffe          BL       snmp_trap_send
                  |L1.18730|
;;;6770   	}
;;;6771   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
00492a  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
00492c  79e8              LDRB     r0,[r5,#7]  ; avt_stat
00492e  4281              CMP      r1,r0
004930  d00b              BEQ      |L1.18762|
004932  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004936  2908              CMP      r1,#8
004938  db07              BLT      |L1.18762|
;;;6772   	{
;;;6773   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
00493a  2801              CMP      r0,#1
00493c  d052              BEQ      |L1.18916|
;;;6774   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
00493e  2300              MOVS     r3,#0
004940  2208              MOVS     r2,#8
004942  210b              MOVS     r1,#0xb
004944  a0f1              ADR      r0,|L1.19724|
004946  f7fffffe          BL       snmp_trap_send
                  |L1.18762|
;;;6775   	}
;;;6776   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
00494a  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
00494c  7a28              LDRB     r0,[r5,#8]  ; avt_stat
00494e  4281              CMP      r1,r0
004950  d00b              BEQ      |L1.18794|
004952  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004956  2909              CMP      r1,#9
004958  db07              BLT      |L1.18794|
;;;6777   	{
;;;6778   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
00495a  2801              CMP      r0,#1
00495c  d049              BEQ      |L1.18930|
;;;6779   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
00495e  2300              MOVS     r3,#0
004960  2209              MOVS     r2,#9
004962  210b              MOVS     r1,#0xb
004964  a0ee              ADR      r0,|L1.19744|
004966  f7fffffe          BL       snmp_trap_send
                  |L1.18794|
;;;6780   	}
;;;6781   
;;;6782   for(i=0;i<12;i++)
00496a  f04f0000          MOV      r0,#0
                  |L1.18798|
;;;6783   	{
;;;6784   	avt_stat_old[i]=avt_stat[i];
00496e  5c29              LDRB     r1,[r5,r0]
004970  5431              STRB     r1,[r6,r0]
004972  f1000001          ADD      r0,r0,#1              ;6782
004976  b2c0              UXTB     r0,r0                 ;6782
004978  280c              CMP      r0,#0xc               ;6782
00497a  d3f8              BCC      |L1.18798|
;;;6785   	}
;;;6786   }
00497c  bd70              POP      {r4-r6,pc}
                  |L1.18814|
00497e  2301              MOVS     r3,#1                 ;6738
004980  461a              MOV      r2,r3                 ;6738
004982  210b              MOVS     r1,#0xb               ;6738
004984  a0eb              ADR      r0,|L1.19764|
004986  f7fffffe          BL       snmp_trap_send
00498a  e72d              B        |L1.18408|
                  |L1.18828|
00498c  2301              MOVS     r3,#1                 ;6743
00498e  2202              MOVS     r2,#2                 ;6743
004990  210b              MOVS     r1,#0xb               ;6743
004992  a0ed              ADR      r0,|L1.19784|
004994  f7fffffe          BL       snmp_trap_send
004998  e736              B        |L1.18440|
00499a  e006              B        |L1.18858|
                  |L1.18844|
00499c  2301              MOVS     r3,#1                 ;6748
00499e  2203              MOVS     r2,#3                 ;6748
0049a0  210b              MOVS     r1,#0xb               ;6748
0049a2  a0ee              ADR      r0,|L1.19804|
0049a4  f7fffffe          BL       snmp_trap_send
0049a8  e73e              B        |L1.18472|
                  |L1.18858|
0049aa  2301              MOVS     r3,#1                 ;6753
0049ac  2204              MOVS     r2,#4                 ;6753
0049ae  210b              MOVS     r1,#0xb               ;6753
0049b0  a0ef              ADR      r0,|L1.19824|
0049b2  f7fffffe          BL       snmp_trap_send
0049b6  e785              B        |L1.18628|
0049b8  e7ff              B        |L1.18874|
                  |L1.18874|
0049ba  2301              MOVS     r3,#1                 ;6758
0049bc  2205              MOVS     r2,#5                 ;6758
0049be  210b              MOVS     r1,#0xb               ;6758
0049c0  a0f0              ADR      r0,|L1.19844|
0049c2  f7fffffe          BL       snmp_trap_send
0049c6  e78d              B        |L1.18660|
                  |L1.18888|
0049c8  2301              MOVS     r3,#1                 ;6763
0049ca  2206              MOVS     r2,#6                 ;6763
0049cc  210b              MOVS     r1,#0xb               ;6763
0049ce  a0f2              ADR      r0,|L1.19864|
0049d0  f7fffffe          BL       snmp_trap_send
0049d4  e799              B        |L1.18698|
                  |L1.18902|
0049d6  2301              MOVS     r3,#1                 ;6768
0049d8  2207              MOVS     r2,#7                 ;6768
0049da  210b              MOVS     r1,#0xb               ;6768
0049dc  a0f3              ADR      r0,|L1.19884|
0049de  f7fffffe          BL       snmp_trap_send
0049e2  e7a2              B        |L1.18730|
                  |L1.18916|
0049e4  2301              MOVS     r3,#1                 ;6773
0049e6  2208              MOVS     r2,#8                 ;6773
0049e8  210b              MOVS     r1,#0xb               ;6773
0049ea  a0f5              ADR      r0,|L1.19904|
0049ec  f7fffffe          BL       snmp_trap_send
0049f0  e7ab              B        |L1.18762|
                  |L1.18930|
0049f2  2301              MOVS     r3,#1                 ;6778
0049f4  2209              MOVS     r2,#9                 ;6778
0049f6  210b              MOVS     r1,#0xb               ;6778
0049f8  a0f6              ADR      r0,|L1.19924|
0049fa  f7fffffe          BL       snmp_trap_send
0049fe  e7b4              B        |L1.18794|
;;;6787   
                          ENDP

                  bat_hndl PROC
;;;6788   //-----------------------------------------------
;;;6789   void bat_hndl(void)
004a00  b570              PUSH     {r4-r6,lr}
;;;6790   {
;;;6791   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;6792   	{
;;;6793   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;6794   		{
;;;6795   		char i;
;;;6796   		for(i=0;i<2;i++)
;;;6797   			{
;;;6798   			if(mess_data[1]&(1<<i))
;;;6799   				{
;;;6800   				bat[i]._cnt_to_block=0;
;;;6801        			bat[i]._rel_stat=0;
;;;6802        			}
;;;6803   			}
;;;6804   		}
;;;6805   	}
;;;6806   if(mess_find(_MESS_BAT_MASK_OFF))
;;;6807   	{		
;;;6808   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;6809   		{
;;;6810   		char i;
;;;6811   		for(i=0;i<2;i++)
;;;6812   			{
;;;6813   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;6814   				{
;;;6815   				bat[i]._cnt_to_block=20;
;;;6816   				bat[i]._rel_stat=1;
;;;6817        			}
;;;6818   			}
;;;6819   		
;;;6820   		}		
;;;6821   	}*/
;;;6822   
;;;6823   if(mess_find_unvol(MESS2BAT_HNDL))
004a02  20c8              MOVS     r0,#0xc8
004a04  f7fffffe          BL       mess_find_unvol
;;;6824   	{ 
;;;6825   	char i;
;;;6826   	
;;;6827   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;6828   		{
;;;6829   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6830   			{
;;;6831   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004a08  49f7              LDR      r1,|L1.19944|
004a0a  2200              MOVS     r2,#0                 ;6829
004a0c  b3a8              CBZ      r0,|L1.19066|
004a0e  4bf7              LDR      r3,|L1.19948|
;;;6832   			}
;;;6833   		}
;;;6834   
;;;6835   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;6836   		{
;;;6837   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6838   			{
;;;6839   			if(mess_data[1]&(1<<i))
004a10  2401              MOVS     r4,#1
004a12  6818              LDR      r0,[r3,#0]            ;6827  ; mess_data
004a14  28c9              CMP      r0,#0xc9              ;6827
004a16  d01c              BEQ      |L1.19026|
004a18  28ca              CMP      r0,#0xca              ;6835
004a1a  d02f              BEQ      |L1.19068|
;;;6840   				{
;;;6841   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;6842   				}
;;;6843   			else bat[i]._cnt_to_block=0;
;;;6844   			}
;;;6845   		}
;;;6846   	else 
;;;6847   	 	{
;;;6848   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004a1c  4610              MOV      r0,r2
                  |L1.18974|
;;;6849   			{
;;;6850   			bat[i]._cnt_to_block=0;
004a1e  eb000340          ADD      r3,r0,r0,LSL #1
004a22  eb031300          ADD      r3,r3,r0,LSL #4
004a26  f8012023          STRB     r2,[r1,r3,LSL #2]
004a2a  f1000001          ADD      r0,r0,#1              ;6848
004a2e  b2c0              UXTB     r0,r0                 ;6848
004a30  2802              CMP      r0,#2                 ;6848
004a32  d3f4              BCC      |L1.18974|
                  |L1.18996|
;;;6851   			}
;;;6852   
;;;6853   		}
;;;6854   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004a34  f04f0000          MOV      r0,#0
                  |L1.19000|
;;;6855   		{
;;;6856   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004a38  eb000340          ADD      r3,r0,r0,LSL #1
004a3c  eb031300          ADD      r3,r3,r0,LSL #4
004a40  f8115023          LDRB     r5,[r1,r3,LSL #2]
004a44  2d14              CMP      r5,#0x14
004a46  d939              BLS      |L1.19132|
004a48  eb010383          ADD      r3,r1,r3,LSL #2
004a4c  f883403c          STRB     r4,[r3,#0x3c]
004a50  e038              B        |L1.19140|
                  |L1.19026|
004a52  f04f0000          MOV      r0,#0                 ;6829
                  |L1.19030|
004a56  eb000340          ADD      r3,r0,r0,LSL #1       ;6831
004a5a  eb031500          ADD      r5,r3,r0,LSL #4       ;6831
004a5e  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6831
004a62  2b32              CMP      r3,#0x32              ;6831
004a64  d203              BCS      |L1.19054|
004a66  f1030301          ADD      r3,r3,#1              ;6831
004a6a  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6831
                  |L1.19054|
004a6e  f1000001          ADD      r0,r0,#1              ;6829
004a72  b2c0              UXTB     r0,r0                 ;6829
004a74  2802              CMP      r0,#2                 ;6829
004a76  d3ee              BCC      |L1.19030|
004a78  e7dc              B        |L1.18996|
                  |L1.19066|
004a7a  e029              B        |L1.19152|
                  |L1.19068|
004a7c  f04f0000          MOV      r0,#0                 ;6837
004a80  685e              LDR      r6,[r3,#4]            ;6839
                  |L1.19074|
004a82  fa04f300          LSL      r3,r4,r0              ;6839
004a86  421e              TST      r6,r3                 ;6839
004a88  d00c              BEQ      |L1.19108|
004a8a  eb000340          ADD      r3,r0,r0,LSL #1       ;6841
004a8e  eb031500          ADD      r5,r3,r0,LSL #4       ;6841
004a92  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6841
004a96  2b32              CMP      r3,#0x32              ;6841
004a98  d20a              BCS      |L1.19120|
004a9a  f1030301          ADD      r3,r3,#1              ;6841
004a9e  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6841
004aa2  e005              B        |L1.19120|
                  |L1.19108|
004aa4  eb000340          ADD      r3,r0,r0,LSL #1       ;6843
004aa8  eb031300          ADD      r3,r3,r0,LSL #4       ;6843
004aac  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6843
                  |L1.19120|
004ab0  f1000001          ADD      r0,r0,#1              ;6837
004ab4  b2c0              UXTB     r0,r0                 ;6837
004ab6  2802              CMP      r0,#2                 ;6837
004ab8  d3e3              BCC      |L1.19074|
004aba  e7bb              B        |L1.18996|
                  |L1.19132|
;;;6857   		else bat[i]._rel_stat=0;
004abc  eb010383          ADD      r3,r1,r3,LSL #2
004ac0  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.19140|
004ac4  f1000001          ADD      r0,r0,#1              ;6854
004ac8  b2c0              UXTB     r0,r0                 ;6854
004aca  2802              CMP      r0,#2                 ;6854
004acc  d3b4              BCC      |L1.19000|
;;;6858   		}
;;;6859   
;;;6860   	}
;;;6861   
;;;6862   else 
;;;6863   	{
;;;6864   	char i;
;;;6865   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6866   		{
;;;6867   		bat[i]._cnt_to_block=0;
;;;6868   		bat[i]._rel_stat=0;
;;;6869   		}
;;;6870   
;;;6871   	}
;;;6872   
;;;6873   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;6874   	{
;;;6875   	if(PARAM_BAT_ON)
;;;6876   		{
;;;6877   		char i;
;;;6878   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6879   			{
;;;6880   			if(mess_data[1]&(1<<i))
;;;6881   				{
;;;6882   				bat[i]._cnt_to_block=0;
;;;6883   				bat[i]._rel_stat=0;
;;;6884   				}
;;;6885   			}
;;;6886   		}
;;;6887   	} */
;;;6888   }
004ace  bd70              POP      {r4-r6,pc}
                  |L1.19152|
004ad0  f04f0000          MOV      r0,#0                 ;6865
                  |L1.19156|
004ad4  eb000340          ADD      r3,r0,r0,LSL #1       ;6867
004ad8  eb031300          ADD      r3,r3,r0,LSL #4       ;6867
004adc  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6867
004ae0  eb010383          ADD      r3,r1,r3,LSL #2       ;6868
004ae4  f883203c          STRB     r2,[r3,#0x3c]         ;6868
004ae8  f1000001          ADD      r0,r0,#1              ;6865
004aec  b2c0              UXTB     r0,r0                 ;6865
004aee  2802              CMP      r0,#2                 ;6865
004af0  d3f0              BCC      |L1.19156|
004af2  bd70              POP      {r4-r6,pc}
;;;6889   
                          ENDP

                  bat_drv PROC
;;;7527   //-----------------------------------------------
;;;7528   void bat_drv(char in)
004af4  e92d4ffe          PUSH     {r1-r11,lr}
;;;7529   {
004af8  4605              MOV      r5,r0
;;;7530   unsigned short /*tempUS,*/tempUS_;
;;;7531   unsigned long tempUL,tempUL_;
;;;7532   unsigned short b_zar;
;;;7533   //static unsigned short time_cnt[2];
;;;7534   
;;;7535   
;;;7536   
;;;7537   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004afa  49bd              LDR      r1,|L1.19952|
004afc  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004b00  b118              CBZ      r0,|L1.19210|
004b02  f1a00001          SUB      r0,r0,#1
004b06  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.19210|
;;;7538   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004b0a  4ab9              LDR      r2,|L1.19952|
004b0c  1d12              ADDS     r2,r2,#4
004b0e  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004b12  b118              CBZ      r0,|L1.19228|
004b14  f1a00001          SUB      r0,r0,#1
004b18  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.19228|
;;;7539   
;;;7540   
;;;7541   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004b1c  eb050045          ADD      r0,r5,r5,LSL #1
004b20  4bb1              LDR      r3,|L1.19944|
004b22  eb001005          ADD      r0,r0,r5,LSL #4
004b26  eb030480          ADD      r4,r3,r0,LSL #2
004b2a  4bb2              LDR      r3,|L1.19956|
004b2c  9002              STR      r0,[sp,#8]
004b2e  f9b40008          LDRSH    r0,[r4,#8]
004b32  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004b36  2364              MOVS     r3,#0x64
004b38  42b0              CMP      r0,r6
004b3a  dd01              BLE      |L1.19264|
004b3c  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.19264|
;;;7542   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004b40  2800              CMP      r0,#0
004b42  da01              BGE      |L1.19272|
004b44  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.19272|
;;;7543   
;;;7544   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7545        {
;;;7546        if(!cntrl_stat_blok_cnt_)
004b48  48a9              LDR      r0,|L1.19952|
004b4a  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7544
004b4e  38b0              SUBS     r0,r0,#0xb0
004b50  2700              MOVS     r7,#0
004b52  b14b              CBZ      r3,|L1.19304|
004b54  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7544
004b58  b133              CBZ      r3,|L1.19304|
004b5a  f8b03074          LDRH     r3,[r0,#0x74]  ; cntrl_stat_blok_cnt_
004b5e  b1a3              CBZ      r3,|L1.19338|
;;;7547             {
;;;7548             cntrl_stat_blok_cnt_=600; 
;;;7549             cntrl_stat_blok_cnt_plus[in]=0;
;;;7550             cntrl_stat_blok_cnt_minus[in]=0;
;;;7551             }
;;;7552        else cntrl_stat_blok_cnt=3000;
004b60  f64031b8          MOV      r1,#0xbb8
004b64  f8a01072          STRH     r1,[r0,#0x72]
                  |L1.19304|
;;;7553        }
;;;7554   cntrl_stat_blok_cnt=0;
004b68  f8a07072          STRH     r7,[r0,#0x72]
;;;7555   
;;;7556   if(++(bat[in]._time_cnt)>=10)
004b6c  f894003e          LDRB     r0,[r4,#0x3e]
004b70  1c40              ADDS     r0,r0,#1
004b72  b2c0              UXTB     r0,r0
004b74  f884003e          STRB     r0,[r4,#0x3e]
004b78  280a              CMP      r0,#0xa
004b7a  d301              BCC      |L1.19328|
;;;7557   	{
;;;7558   	bat[in]._time_cnt=0;
004b7c  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.19328|
;;;7559   	//bat[in]._zar_cnt++;
;;;7560   	}
;;;7561   
;;;7562   if(main_10Hz_cnt==50)
004b80  4e9d              LDR      r6,|L1.19960|
004b82  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
004b84  2832              CMP      r0,#0x32
004b86  d009              BEQ      |L1.19356|
004b88  e017              B        |L1.19386|
                  |L1.19338|
004b8a  f44f7316          MOV      r3,#0x258             ;7548
004b8e  f8a03074          STRH     r3,[r0,#0x74]         ;7548
004b92  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7549
004b96  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7550
004b9a  e7e5              B        |L1.19304|
                  |L1.19356|
;;;7563   	{
;;;7564   	if(!bat[in]._rel_stat)
004b9c  f894003c          LDRB     r0,[r4,#0x3c]
004ba0  b958              CBNZ     r0,|L1.19386|
;;;7565   		{
;;;7566   		
;;;7567   		if(bat[in]._Ub<80) 
004ba2  f9b40002          LDRSH    r0,[r4,#2]
004ba6  2850              CMP      r0,#0x50
004ba8  da07              BGE      |L1.19386|
;;;7568   			{
;;;7569   			
;;;7570   			if(!(bat[in]._av&1))
004baa  f894003d          LDRB     r0,[r4,#0x3d]
004bae  07c0              LSLS     r0,r0,#31
004bb0  d103              BNE      |L1.19386|
;;;7571   				{
;;;7572   				avar_bat_hndl(in,1);
004bb2  2101              MOVS     r1,#1
004bb4  4628              MOV      r0,r5
004bb6  f7fffffe          BL       avar_bat_hndl
                  |L1.19386|
;;;7573   				//if(in==0)plazma_bat++;
;;;7574   				}
;;;7575   			}				
;;;7576   
;;;7577   		}
;;;7578   	}
;;;7579   
;;;7580   if(main_10Hz_cnt>200)
004bba  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7581   	{
;;;7582   	if(abs(bat[in]._Ib)>IKB) 
004bbe  4e8f              LDR      r6,|L1.19964|
004bc0  28c8              CMP      r0,#0xc8              ;7580
004bc2  dd0f              BLE      |L1.19428|
004bc4  f9b40008          LDRSH    r0,[r4,#8]
004bc8  f7fffffe          BL       abs
004bcc  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004bd0  4288              CMP      r0,r1
004bd2  dd07              BLE      |L1.19428|
;;;7583   		{
;;;7584   		if((bat[in]._av&1))avar_bat_hndl(in,0);
004bd4  f894003d          LDRB     r0,[r4,#0x3d]
004bd8  07c0              LSLS     r0,r0,#31
004bda  d003              BEQ      |L1.19428|
004bdc  2100              MOVS     r1,#0
004bde  4628              MOV      r0,r5
004be0  f7fffffe          BL       avar_bat_hndl
                  |L1.19428|
;;;7585   		}
;;;7586   	}
;;;7587   
;;;7588   #ifdef APSENERGIA
;;;7589   //if(bat[in]._Ib>(-IKB))
;;;7590   
;;;7591   
;;;7592   #endif
;;;7593   
;;;7594   if(bat[in]._Ib>(-IKB))
004be4  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004be8  f9b40008          LDRSH    r0,[r4,#8]
004bec  4249              RSBS     r1,r1,#0
004bee  4288              CMP      r0,r1
004bf0  dd14              BLE      |L1.19484|
;;;7595   	{
;;;7596   	if(bat[in]._cnt_wrk<10)
004bf2  7b60              LDRB     r0,[r4,#0xd]
004bf4  280a              CMP      r0,#0xa
004bf6  d20d              BCS      |L1.19476|
;;;7597   		{
;;;7598   		bat[in]._cnt_wrk++;
004bf8  f1000001          ADD      r0,r0,#1
004bfc  b2c0              UXTB     r0,r0
004bfe  7360              STRB     r0,[r4,#0xd]
;;;7599   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004c00  280a              CMP      r0,#0xa
004c02  d306              BCC      |L1.19474|
004c04  7ba0              LDRB     r0,[r4,#0xe]
004c06  2800              CMP      r0,#0
004c08  d003              BEQ      |L1.19474|
;;;7600   			{
;;;7601   			bat[in]._wrk=0;
004c0a  73a7              STRB     r7,[r4,#0xe]
;;;7602   			//beep_init(0x7L,'O');
;;;7603   			//wrk_mem_hndl(0);
;;;7604   			wrk_mem_hndl(in);
004c0c  4628              MOV      r0,r5
004c0e  f7fffffe          BL       wrk_mem_hndl
                  |L1.19474|
004c12  e110              B        |L1.20022|
                  |L1.19476|
;;;7605   			//plazma++;
;;;7606   			}
;;;7607   		}
;;;7608   	else bat[in]._cnt_wrk=10;	
004c14  f04f000a          MOV      r0,#0xa
004c18  7360              STRB     r0,[r4,#0xd]
004c1a  e10c              B        |L1.20022|
                  |L1.19484|
;;;7609   	}	
;;;7610   
;;;7611   else if(bat[in]._Ib<(-IKB))
004c1c  da40              BGE      |L1.19616|
;;;7612   	{
;;;7613   	if(bat[in]._cnt_wrk)
004c1e  7b60              LDRB     r0,[r4,#0xd]
004c20  b3f0              CBZ      r0,|L1.19616|
;;;7614   		{
;;;7615   		bat[in]._cnt_wrk--;
004c22  f1a00001          SUB      r0,r0,#1
004c26  b2c0              UXTB     r0,r0
004c28  7360              STRB     r0,[r4,#0xd]
;;;7616   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
004c2a  bbc8              CBNZ     r0,|L1.19616|
004c2c  7ba0              LDRB     r0,[r4,#0xe]
004c2e  bbb8              CBNZ     r0,|L1.19616|
;;;7617   			{
;;;7618   			bat[in]._wrk=1;
004c30  f04f0001          MOV      r0,#1
004c34  73a0              STRB     r0,[r4,#0xe]
;;;7619   
;;;7620   				{
;;;7621   				char temp;
;;;7622   				signed short temp_temp;
;;;7623   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
004c36  4872              LDR      r0,|L1.19968|
004c38  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
004c3a  f1000001          ADD      r0,r0,#1
004c3e  f0000007          AND      r0,r0,#7
004c42  eb040040          ADD      r0,r4,r0,LSL #1
004c46  8c00              LDRH     r0,[r0,#0x20]
004c48  9000              STR      r0,[sp,#0]
;;;7624   			 
;;;7625   				temp=LPC_RTC->YEAR;
004c4a  4e6e              LDR      r6,|L1.19972|
004c4c  8bb0              LDRH     r0,[r6,#0x1c]
004c4e  9001              STR      r0,[sp,#4]
;;;7626   				gran_char((signed char*)&temp,1,99);
004c50  f04f0263          MOV      r2,#0x63
004c54  f04f0101          MOV      r1,#1
004c58  a801              ADD      r0,sp,#4
004c5a  f7fffffe          BL       gran_char
;;;7627   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
004c5e  f104041c          ADD      r4,r4,#0x1c
004c62  f89d0004          LDRB     r0,[sp,#4]
004c66  7620              STRB     r0,[r4,#0x18]
;;;7628   			
;;;7629   				temp=LPC_RTC->MONTH;
004c68  7e30              LDRB     r0,[r6,#0x18]
004c6a  9001              STR      r0,[sp,#4]
;;;7630   				gran_char((signed char*)&temp,1,12);
004c6c  f04f020c          MOV      r2,#0xc
004c70  f04f0101          MOV      r1,#1
004c74  a801              ADD      r0,sp,#4
004c76  f7fffffe          BL       gran_char
;;;7631   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
004c7a  f89d0004          LDRB     r0,[sp,#4]
004c7e  7660              STRB     r0,[r4,#0x19]
;;;7632   			
;;;7633   				temp=LPC_RTC->DOM;
004c80  7b30              LDRB     r0,[r6,#0xc]
004c82  9001              STR      r0,[sp,#4]
;;;7634   				gran_char((signed char*)&temp,1,31);
004c84  221f              MOVS     r2,#0x1f
004c86  2101              MOVS     r1,#1
004c88  a801              ADD      r0,sp,#4
004c8a  f7fffffe          BL       gran_char
;;;7635   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
004c8e  f89d0004          LDRB     r0,[sp,#4]
004c92  76a0              STRB     r0,[r4,#0x1a]
;;;7636   				
;;;7637   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
004c94  f89d0000          LDRB     r0,[sp,#0]
004c98  76e0              STRB     r0,[r4,#0x1b]
;;;7638   
;;;7639   				temp=LPC_RTC->HOUR;
004c9a  7a30              LDRB     r0,[r6,#8]
004c9c  9001              STR      r0,[sp,#4]
;;;7640   				gran_char((signed char*)&temp,0,23);
004c9e  e000              B        |L1.19618|
                  |L1.19616|
004ca0  e0c9              B        |L1.20022|
                  |L1.19618|
004ca2  2217              MOVS     r2,#0x17
004ca4  2100              MOVS     r1,#0
004ca6  a801              ADD      r0,sp,#4
004ca8  f7fffffe          BL       gran_char
;;;7641   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
004cac  f89d0004          LDRB     r0,[sp,#4]
004cb0  7720              STRB     r0,[r4,#0x1c]
;;;7642                  	
;;;7643   				temp=LPC_RTC->MIN;
004cb2  7930              LDRB     r0,[r6,#4]
004cb4  9001              STR      r0,[sp,#4]
;;;7644   				gran_char((signed char*)&temp,0,59);
004cb6  223b              MOVS     r2,#0x3b
004cb8  2100              MOVS     r1,#0
004cba  e0a5              B        |L1.19976|
                  |L1.19644|
004cbc  4176746f          DCB      "Avtomat #4 is OFF",0
004cc0  6d617420
004cc4  23342069
004cc8  73204f46
004ccc  4600    
004cce  00                DCB      0
004ccf  00                DCB      0
                  |L1.19664|
004cd0  4176746f          DCB      "Avtomat #5 is OFF",0
004cd4  6d617420
004cd8  23352069
004cdc  73204f46
004ce0  4600    
004ce2  00                DCB      0
004ce3  00                DCB      0
                  |L1.19684|
004ce4  4176746f          DCB      "Avtomat #6 is OFF",0
004ce8  6d617420
004cec  23362069
004cf0  73204f46
004cf4  4600    
004cf6  00                DCB      0
004cf7  00                DCB      0
                  |L1.19704|
004cf8  4176746f          DCB      "Avtomat #7 is OFF",0
004cfc  6d617420
004d00  23372069
004d04  73204f46
004d08  4600    
004d0a  00                DCB      0
004d0b  00                DCB      0
                  |L1.19724|
004d0c  4176746f          DCB      "Avtomat #8 is OFF",0
004d10  6d617420
004d14  23382069
004d18  73204f46
004d1c  4600    
004d1e  00                DCB      0
004d1f  00                DCB      0
                  |L1.19744|
004d20  4176746f          DCB      "Avtomat #9 is OFF",0
004d24  6d617420
004d28  23392069
004d2c  73204f46
004d30  4600    
004d32  00                DCB      0
004d33  00                DCB      0
                  |L1.19764|
004d34  4176746f          DCB      "Avtomat #1 is ON ",0
004d38  6d617420
004d3c  23312069
004d40  73204f4e
004d44  2000    
004d46  00                DCB      0
004d47  00                DCB      0
                  |L1.19784|
004d48  4176746f          DCB      "Avtomat #2 is ON ",0
004d4c  6d617420
004d50  23322069
004d54  73204f4e
004d58  2000    
004d5a  00                DCB      0
004d5b  00                DCB      0
                  |L1.19804|
004d5c  4176746f          DCB      "Avtomat #3 is ON ",0
004d60  6d617420
004d64  23332069
004d68  73204f4e
004d6c  2000    
004d6e  00                DCB      0
004d6f  00                DCB      0
                  |L1.19824|
004d70  4176746f          DCB      "Avtomat #4 is ON ",0
004d74  6d617420
004d78  23342069
004d7c  73204f4e
004d80  2000    
004d82  00                DCB      0
004d83  00                DCB      0
                  |L1.19844|
004d84  4176746f          DCB      "Avtomat #5 is ON ",0
004d88  6d617420
004d8c  23352069
004d90  73204f4e
004d94  2000    
004d96  00                DCB      0
004d97  00                DCB      0
                  |L1.19864|
004d98  4176746f          DCB      "Avtomat #6 is ON ",0
004d9c  6d617420
004da0  23362069
004da4  73204f4e
004da8  2000    
004daa  00                DCB      0
004dab  00                DCB      0
                  |L1.19884|
004dac  4176746f          DCB      "Avtomat #7 is ON ",0
004db0  6d617420
004db4  23372069
004db8  73204f4e
004dbc  2000    
004dbe  00                DCB      0
004dbf  00                DCB      0
                  |L1.19904|
004dc0  4176746f          DCB      "Avtomat #8 is ON ",0
004dc4  6d617420
004dc8  23382069
004dcc  73204f4e
004dd0  2000    
004dd2  00                DCB      0
004dd3  00                DCB      0
                  |L1.19924|
004dd4  4176746f          DCB      "Avtomat #9 is ON ",0
004dd8  6d617420
004ddc  23392069
004de0  73204f4e
004de4  2000    
004de6  00                DCB      0
004de7  00                DCB      0
                  |L1.19944|
                          DCD      bat
                  |L1.19948|
                          DCD      mess_data
                  |L1.19952|
                          DCD      ||area_number.25||+0xb0
                  |L1.19956|
                          DCD      IZMAX
                  |L1.19960|
                          DCD      main_10Hz_cnt
                  |L1.19964|
                          DCD      IKB
                  |L1.19968|
                          DCD      bat_u_old_cnt
                  |L1.19972|
                          DCD      0x40024020
                  |L1.19976|
004e08  a801              ADD      r0,sp,#4
004e0a  f7fffffe          BL       gran_char
;;;7645   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
004e0e  f89d0004          LDRB     r0,[sp,#4]
004e12  7760              STRB     r0,[r4,#0x1d]
;;;7646   	          
;;;7647   				temp=LPC_RTC->SEC;
004e14  7830              LDRB     r0,[r6,#0]
004e16  9001              STR      r0,[sp,#4]
;;;7648   				gran_char((signed char*)&temp,0,59);
004e18  223b              MOVS     r2,#0x3b
004e1a  2100              MOVS     r1,#0
004e1c  a801              ADD      r0,sp,#4
004e1e  f7fffffe          BL       gran_char
;;;7649   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
004e22  f89d0004          LDRB     r0,[sp,#4]
004e26  77a0              STRB     r0,[r4,#0x1e]
;;;7650   			
;;;7651   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
004e28  f89d0001          LDRB     r0,[sp,#1]
004e2c  77e0              STRB     r0,[r4,#0x1f]
;;;7652   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004e2e  8027              STRH     r7,[r4,#0]
;;;7653   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
004e30  8067              STRH     r7,[r4,#2]
004e32  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.20022|
;;;7654   				}
;;;7655   	
;;;7656   			}
;;;7657   
;;;7658   		}
;;;7659   	else bat[in]._cnt_wrk=0;	 
;;;7660   	
;;;7661   	}					
;;;7662   
;;;7663   /*
;;;7664   if(Ibat>=(-IKB))
;;;7665   	{
;;;7666   	if(cnt_wrk<10)
;;;7667   		{
;;;7668   		cnt_wrk++;
;;;7669   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7670   			{
;;;7671   			wrk=wrkOFF;
;;;7672   			//beep_init(0x7L,'O');
;;;7673   			wrk_mem_hndl(ibat_integr);
;;;7674   			}
;;;7675   		}
;;;7676   	else cnt_wrk=10;	
;;;7677   	}	
;;;7678   
;;;7679   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;7680   	{
;;;7681   	if(cnt_wrk)
;;;7682   		{
;;;7683   		cnt_wrk--;
;;;7684   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7685   			{
;;;7686   			char temp;
;;;7687   			signed short temp_temp;
;;;7688   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7689   			 
;;;7690   			wrk=wrkON;
;;;7691   			
;;;7692   			temp=_year;
;;;7693   			gran_char(&temp,1,99);
;;;7694   			*((char*)(&(wrk_date[0])))=temp;
;;;7695   			
;;;7696   			temp=_month;
;;;7697   			gran_char(&temp,1,12);
;;;7698   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7699   			
;;;7700   			temp=_date;
;;;7701   			gran_char(&temp,1,31);
;;;7702   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7703   				
;;;7704   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7705   
;;;7706   			temp=_hour;
;;;7707   			gran_char(&temp,0,23);
;;;7708   			*((char*)(&(wrk_date[1])))=temp;
;;;7709                  
;;;7710   			temp=_min;
;;;7711   			gran_char(&temp,0,59);
;;;7712   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7713   	          
;;;7714   			temp=_sec;
;;;7715   			gran_char(&temp,0,59);
;;;7716   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7717   			
;;;7718   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7719   
;;;7720   			
;;;7721   			//beep_init(0xFL,'O'); 
;;;7722   			ibat_integr=0;
;;;7723   			ibat_integr_=0;
;;;7724   			}
;;;7725   		}
;;;7726   	else cnt_wrk=0;	 
;;;7727   	
;;;7728   	}
;;;7729   if(wrk==wrkON)
;;;7730   	{
;;;7731   	ibat_integr_+=-Ibat;
;;;7732   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7733   		{
;;;7734   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7735   		ibat_integr++;
;;;7736   		}
;;;7737   	}
;;;7738   
;;;7739   */
;;;7740   
;;;7741   
;;;7742   /*if(bat[in]._cnt_to_block)
;;;7743   	{
;;;7744   	bat[in]._cnt_to_block--;
;;;7745   	if(!(bat[in]._cnt_to_block))
;;;7746   		{
;;;7747   		//bat[in]._rel_stat=1;
;;;7748   		}
;;;7749   	}
;;;7750   */
;;;7751   
;;;7752   
;;;7753   
;;;7754   
;;;7755   //unsigned int tempUI,tempUI_;
;;;7756   //unsigned int b_zar; 
;;;7757   //char i;
;;;7758   //Ibat[0]=5000;                     
;;;7759   
;;;7760   
;;;7761                               
;;;7762   if(bat[in]._time_cnt==0)
;;;7763   	{
;;;7764   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;7765   	
;;;7766   	if(bat[in]._zar_cnt>=AH_CONSTANT)
004e36  f64848a0          MOV      r8,#0x8ca0
004e3a  f894003e          LDRB     r0,[r4,#0x3e]         ;7762
004e3e  bba8              CBNZ     r0,|L1.20140|
004e40  f9b41008          LDRSH    r1,[r4,#8]            ;7764
004e44  6960              LDR      r0,[r4,#0x14]         ;7764
004e46  4408              ADD      r0,r0,r1              ;7764
004e48  6160              STR      r0,[r4,#0x14]         ;7764
;;;7767   		{
;;;7768   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;7769   		else tempUS_=BAT_C_REAL[in];
;;;7770   		
;;;7771   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004e4a  f8df940c          LDR      r9,|L1.21080|
004e4e  f8dfa40c          LDR      r10,|L1.21084|
004e52  f2455b55          MOV      r11,#0x5555           ;7768
004e56  4540              CMP      r0,r8                 ;7766
004e58  db29              BLT      |L1.20142|
004e5a  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;7768
004e5e  4558              CMP      r0,r11                ;7768
004e60  d103              BNE      |L1.20074|
004e62  48ff              LDR      r0,|L1.21088|
004e64  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;7768
004e68  e001              B        |L1.20078|
                  |L1.20074|
004e6a  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;7769
                  |L1.20078|
004e6e  f8390015          LDRH     r0,[r9,r5,LSL #1]
004e72  f7fffffe          BL       lc640_read_int
004e76  b280              UXTH     r0,r0
;;;7772   
;;;7773   		if(b_zar<(tempUS_/**10*/))
004e78  42b0              CMP      r0,r6
004e7a  d20e              BCS      |L1.20122|
;;;7774   			{
;;;7775   			bat[in]._zar_cnt-=AH_CONSTANT;
004e7c  6961              LDR      r1,[r4,#0x14]
004e7e  f5a14100          SUB      r1,r1,#0x8000
004e82  f5a1614a          SUB      r1,r1,#0xca0
004e86  6161              STR      r1,[r4,#0x14]
;;;7776   
;;;7777   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
004e88  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004e8c  f1000001          ADD      r0,r0,#1
004e90  b201              SXTH     r1,r0
004e92  4610              MOV      r0,r2
004e94  f7fffffe          BL       lc640_write_int
004e98  e032              B        |L1.20224|
                  |L1.20122|
;;;7778   			}
;;;7779   		else if(b_zar>(tempUS_/**10*/))  
004e9a  d931              BLS      |L1.20224|
;;;7780   			{
;;;7781   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004e9c  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004ea0  b231              SXTH     r1,r6
004ea2  f7fffffe          BL       lc640_write_int
;;;7782   			bat[in]._zar_cnt=AH_CONSTANT;
004ea6  f8c48014          STR      r8,[r4,#0x14]
004eaa  e029              B        |L1.20224|
                  |L1.20140|
004eac  e054              B        |L1.20312|
                  |L1.20142|
;;;7783   
;;;7784   			}
;;;7785   
;;;7786   		}
;;;7787   
;;;7788   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
004eae  49ed              LDR      r1,|L1.21092|
004eb0  4288              CMP      r0,r1
004eb2  dc25              BGT      |L1.20224|
;;;7789   		{
;;;7790   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
004eb4  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
004eb8  4558              CMP      r0,r11
004eba  d103              BNE      |L1.20164|
004ebc  48e8              LDR      r0,|L1.21088|
004ebe  f8306015          LDRH     r6,[r0,r5,LSL #1]
004ec2  e001              B        |L1.20168|
                  |L1.20164|
;;;7791   		else tempUS_=BAT_C_REAL[in];
004ec4  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.20168|
;;;7792   		
;;;7793   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004ec8  f8390015          LDRH     r0,[r9,r5,LSL #1]
004ecc  f7fffffe          BL       lc640_read_int
004ed0  b280              UXTH     r0,r0
;;;7794   
;;;7795   		if(b_zar>tempUS_)
004ed2  42b0              CMP      r0,r6
004ed4  d905              BLS      |L1.20194|
;;;7796   			{
;;;7797   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004ed6  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004eda  b231              SXTH     r1,r6
004edc  f7fffffe          BL       lc640_write_int
;;;7798   			b_zar=tempUS_;
004ee0  4630              MOV      r0,r6
                  |L1.20194|
;;;7799   			}
;;;7800   		if(b_zar)
004ee2  b158              CBZ      r0,|L1.20220|
;;;7801   			{
;;;7802   			bat[in]._zar_cnt+=AH_CONSTANT;
004ee4  6961              LDR      r1,[r4,#0x14]
004ee6  4441              ADD      r1,r1,r8
004ee8  6161              STR      r1,[r4,#0x14]
;;;7803   
;;;7804   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
004eea  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004eee  f1a00001          SUB      r0,r0,#1
004ef2  b201              SXTH     r1,r0
004ef4  4610              MOV      r0,r2
004ef6  f7fffffe          BL       lc640_write_int
004efa  e001              B        |L1.20224|
                  |L1.20220|
;;;7805   			}
;;;7806   		else 
;;;7807   			{
;;;7808   			bat[in]._zar_cnt=-AH_CONSTANT;
004efc  48d9              LDR      r0,|L1.21092|
004efe  6160              STR      r0,[r4,#0x14]
                  |L1.20224|
;;;7809   			}
;;;7810   
;;;7811   		}
;;;7812   
;;;7813   			
;;;7814   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004f00  f8390015          LDRH     r0,[r9,r5,LSL #1]
004f04  f7fffffe          BL       lc640_read_int
004f08  4601              MOV      r1,r0
;;;7815   	
;;;7816   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
004f0a  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
004f0e  4558              CMP      r0,r11
004f10  d102              BNE      |L1.20248|
004f12  48d3              LDR      r0,|L1.21088|
004f14  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.20248|
;;;7817   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;7818   		           	
;;;7819   	tempUL*=1000L;
004f18  f44f727a          MOV      r2,#0x3e8
004f1c  fb01f102          MUL      r1,r1,r2
;;;7820   
;;;7821   
;;;7822   	if(tempUL_==0) tempUL=0;
004f20  b158              CBZ      r0,|L1.20282|
;;;7823   	else tempUL/=tempUL_;
004f22  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.20262|
;;;7824   
;;;7825   	tempUL/=10L;
004f26  f04f010a          MOV      r1,#0xa
004f2a  fbb0f0f1          UDIV     r0,r0,r1
;;;7826   
;;;7827   	bat[in]._zar=(unsigned short)tempUL;
004f2e  8220              STRH     r0,[r4,#0x10]
;;;7828   
;;;7829   	if(BAT_TYPE==1)
004f30  48cd              LDR      r0,|L1.21096|
004f32  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
004f34  2801              CMP      r0,#1
004f36  d003              BEQ      |L1.20288|
004f38  e008              B        |L1.20300|
                  |L1.20282|
004f3a  f04f0000          MOV      r0,#0                 ;7822
004f3e  e7f2              B        |L1.20262|
                  |L1.20288|
;;;7830   		{
;;;7831   		bat[in]._zar=lakb[in]._s_o_c;
004f40  49ca              LDR      r1,|L1.21100|
004f42  9802              LDR      r0,[sp,#8]
004f44  eb010080          ADD      r0,r1,r0,LSL #2
004f48  8a40              LDRH     r0,[r0,#0x12]
004f4a  8220              STRH     r0,[r4,#0x10]
                  |L1.20300|
;;;7832   		}
;;;7833   	
;;;7834   	gran((signed short*)&bat[in]._zar,0,100);
004f4c  f1040010          ADD      r0,r4,#0x10
004f50  2264              MOVS     r2,#0x64
004f52  2100              MOVS     r1,#0
004f54  f7fffffe          BL       gran
                  |L1.20312|
;;;7835        }
;;;7836   
;;;7837   
;;;7838   //Подсчет тока разряда батареи      
;;;7839   if(bat[in]._wrk==1)
004f58  7ba0              LDRB     r0,[r4,#0xe]
004f5a  2801              CMP      r0,#1
004f5c  d113              BNE      |L1.20358|
;;;7840   	{
;;;7841   	if(bat[in]._Iintegr<36000)
004f5e  8ba0              LDRH     r0,[r4,#0x1c]
004f60  4540              CMP      r0,r8
004f62  d20f              BCS      |L1.20356|
;;;7842   		{          
;;;7843   		bat[in]._Iintegr+=abs(bat[in]._Ib);
004f64  f9b40008          LDRSH    r0,[r4,#8]
004f68  f7fffffe          BL       abs
004f6c  8ba1              LDRH     r1,[r4,#0x1c]
004f6e  4408              ADD      r0,r0,r1
004f70  b280              UXTH     r0,r0
004f72  83a0              STRH     r0,[r4,#0x1c]
;;;7844   		if(bat[in]._Iintegr>=36000)
004f74  4540              CMP      r0,r8
004f76  d306              BCC      |L1.20358|
;;;7845   			{
;;;7846   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004f78  83a7              STRH     r7,[r4,#0x1c]
;;;7847   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
004f7a  8be0              LDRH     r0,[r4,#0x1e]
004f7c  f1000001          ADD      r0,r0,#1
004f80  83e0              STRH     r0,[r4,#0x1e]
004f82  e000              B        |L1.20358|
                  |L1.20356|
;;;7848   			}
;;;7849   		}
;;;7850   	else 
;;;7851   		{
;;;7852   		bat[in]._Iintegr=0;
004f84  83a7              STRH     r7,[r4,#0x1c]
                  |L1.20358|
;;;7853   		}	
;;;7854   	} 
;;;7855   	    
;;;7856   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7857   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
004f86  4eba              LDR      r6,|L1.21104|
004f88  49ba              LDR      r1,|L1.21108|
004f8a  f8df92ec          LDR      r9,|L1.21112|
004f8e  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
004f92  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
004f96  4288              CMP      r0,r1
004f98  dd02              BLE      |L1.20384|
004f9a  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
004f9e  b3f0              CBZ      r0,|L1.20510|
                  |L1.20384|
;;;7858   	{
;;;7859   	bat[in]._sign_temper_cnt++;
;;;7860   	}
;;;7861   else 
;;;7862   	{
;;;7863   	bat[in]._sign_temper_cnt--;
004fa0  f8b40040          LDRH     r0,[r4,#0x40]
004fa4  f1a00001          SUB      r0,r0,#1
004fa8  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.20396|
;;;7864   	}
;;;7865   #else
;;;7866   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;7867   	{
;;;7868   	bat[in]._sign_temper_cnt++;
;;;7869   	}
;;;7870   else 
;;;7871   	{
;;;7872   	bat[in]._sign_temper_cnt--;
;;;7873   	}
;;;7874   #endif
;;;7875   gran(&bat[in]._sign_temper_cnt,0,600);
004fac  f44f7b16          MOV      r11,#0x258
004fb0  f1040040          ADD      r0,r4,#0x40
004fb4  465a              MOV      r2,r11
004fb6  2100              MOVS     r1,#0
004fb8  f7fffffe          BL       gran
;;;7876   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
004fbc  f9b40040          LDRSH    r0,[r4,#0x40]
004fc0  f2402a4e          MOV      r10,#0x24e
004fc4  4550              CMP      r0,r10
004fc6  db05              BLT      |L1.20436|
004fc8  f894103f          LDRB     r1,[r4,#0x3f]
004fcc  f0410101          ORR      r1,r1,#1
004fd0  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.20436|
;;;7877   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
004fd4  280a              CMP      r0,#0xa
004fd6  dc05              BGT      |L1.20452|
004fd8  f894003f          LDRB     r0,[r4,#0x3f]
004fdc  f0200001          BIC      r0,r0,#1
004fe0  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20452|
;;;7878   
;;;7879   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7880   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
004fe4  49a5              LDR      r1,|L1.21116|
004fe6  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
004fea  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
004fee  4288              CMP      r0,r1
004ff0  dd02              BLE      |L1.20472|
004ff2  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
004ff6  b3e8              CBZ      r0,|L1.20596|
                  |L1.20472|
;;;7881   	{
;;;7882   	bat[in]._max_temper_cnt++;
;;;7883   	}
;;;7884   else 
;;;7885   	{
;;;7886   	bat[in]._max_temper_cnt--;
004ff8  f8b40042          LDRH     r0,[r4,#0x42]
004ffc  f1a00001          SUB      r0,r0,#1
005000  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.20484|
;;;7887   	}
;;;7888   #else
;;;7889   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;7890   	{
;;;7891   	bat[in]._max_temper_cnt++;
;;;7892   	}
;;;7893   else 
;;;7894   	{
;;;7895   	bat[in]._max_temper_cnt--;
;;;7896   	}
;;;7897   #endif
;;;7898   
;;;7899   gran(&bat[in]._max_temper_cnt,0,600);
005004  f1040042          ADD      r0,r4,#0x42
005008  465a              MOV      r2,r11
00500a  2100              MOVS     r1,#0
00500c  f7fffffe          BL       gran
;;;7900   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
005010  f9b40042          LDRSH    r0,[r4,#0x42]
005014  4550              CMP      r0,r10
005016  db07              BLT      |L1.20520|
005018  f894103f          LDRB     r1,[r4,#0x3f]
00501c  e000              B        |L1.20512|
                  |L1.20510|
00501e  e022              B        |L1.20582|
                  |L1.20512|
005020  f0410102          ORR      r1,r1,#2
005024  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.20520|
;;;7901   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
005028  280a              CMP      r0,#0xa
00502a  dc05              BGT      |L1.20536|
00502c  f894003f          LDRB     r0,[r4,#0x3f]
005030  f0200002          BIC      r0,r0,#2
005034  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20536|
;;;7902   
;;;7903   
;;;7904   
;;;7905   //Подсчет наработки батареи
;;;7906   if(bat[in]._resurs_cnt<36000)
005038  6c60              LDR      r0,[r4,#0x44]
00503a  4540              CMP      r0,r8
00503c  da22              BGE      |L1.20612|
;;;7907   	{               
;;;7908   	bat[in]._resurs_cnt++;
00503e  f1000001          ADD      r0,r0,#1
005042  6460              STR      r0,[r4,#0x44]
;;;7909   	if(bat[in]._resurs_cnt>=36000)
005044  4540              CMP      r0,r8
005046  db1e              BLT      |L1.20614|
;;;7910   		{
;;;7911   		bat[in]._resurs_cnt=0;
005048  6467              STR      r7,[r4,#0x44]
;;;7912   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
00504a  4c8d              LDR      r4,|L1.21120|
00504c  f8340015          LDRH     r0,[r4,r5,LSL #1]
005050  f7fffffe          BL       lc640_read_int
005054  1c40              ADDS     r0,r0,#1
005056  b201              SXTH     r1,r0
005058  f9340015          LDRSH    r0,[r4,r5,LSL #1]
00505c  b003              ADD      sp,sp,#0xc
00505e  e8bd4ff0          POP      {r4-r11,lr}
005062  f7ffbffe          B.W      lc640_write_int
                  |L1.20582|
005066  f8b40040          LDRH     r0,[r4,#0x40]         ;7859
00506a  f1000001          ADD      r0,r0,#1              ;7859
00506e  f8a40040          STRH     r0,[r4,#0x40]         ;7859
005072  e79b              B        |L1.20396|
                  |L1.20596|
005074  e7ff              B        |L1.20598|
                  |L1.20598|
005076  f8b40042          LDRH     r0,[r4,#0x42]         ;7882
00507a  f1000001          ADD      r0,r0,#1              ;7882
00507e  f8a40042          STRH     r0,[r4,#0x42]         ;7882
005082  e7bf              B        |L1.20484|
                  |L1.20612|
;;;7913   		}
;;;7914   	}
;;;7915   else bat[in]._resurs_cnt=0;
005084  6467              STR      r7,[r4,#0x44]
                  |L1.20614|
;;;7916   
;;;7917   
;;;7918   #ifndef UKU_220_V2
;;;7919   #ifndef UKU_GLONASS
;;;7920   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;7921   //#ifndef UKU_6U
;;;7922   //#ifndef UKU_220
;;;7923   if(UBM_AV)
;;;7924        {
;;;7925        signed short temp_SS;
;;;7926   #ifdef UKU_220
;;;7927   temp_SS=bat[in]._Ub/2;
;;;7928   #else
;;;7929        if(U0B<600)
;;;7930             {
;;;7931   
;;;7932             temp_SS=bat[in]._Ub/4;
;;;7933             }
;;;7934        else temp_SS=bat[in]._Ub/5;
;;;7935   	
;;;7936   	temp_SS+=temp_SS;     
;;;7937   #endif
;;;7938        temp_SS-=(bat[in]._Ubm);
;;;7939   
;;;7940        temp_SS=abs(temp_SS);
;;;7941   
;;;7942        temp_SS*=10;
;;;7943   
;;;7944        temp_SS/=12;
;;;7945   
;;;7946        bat[in]._dUbm=temp_SS;
;;;7947   
;;;7948   
;;;7949        if(	(bat[in]._dUbm>UBM_AV) &&
;;;7950   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;7951   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;7952   		(!(bat[in]._av & 2))  )
;;;7953   		{
;;;7954   		bat[in]._cnt_as++;
;;;7955   		if(bat[in]._cnt_as==3000)
;;;7956   			{
;;;7957   			avar_bat_as_hndl(in,1);
;;;7958   			}
;;;7959   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;7960   		}
;;;7961   	else 
;;;7962   		{
;;;7963   		if(bat[in]._cnt_as)
;;;7964   			{
;;;7965   			bat[in]._cnt_as--;
;;;7966   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;7967   			}
;;;7968   		}
;;;7969        
;;;7970        }
;;;7971   //#endif 
;;;7972   #endif 
;;;7973   #endif
;;;7974   #endif
;;;7975   
;;;7976   }
005086  e8bd8ffe          POP      {r1-r11,pc}
;;;7977   
                          ENDP

                  bat_hndl_zvu PROC
;;;7979   //-----------------------------------------------
;;;7980   void bat_hndl_zvu(void)
00508a  e92d4ff0          PUSH     {r4-r11,lr}
;;;7981   {
00508e  b089              SUB      sp,sp,#0x24
;;;7982   char i;
;;;7983   short bat_hndl_i_temp;
;;;7984   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
005090  f04f021c          MOV      r2,#0x1c
005094  497b              LDR      r1,|L1.21124|
005096  4668              MOV      r0,sp
005098  f7fffffe          BL       __aeabi_memcpy4
;;;7985   
;;;7986   //Ib_ips_termokompensat=-17000;
;;;7987    
;;;7988   if(bat_hndl_zvu_init==0)
00509c  4c7a              LDR      r4,|L1.21128|
;;;7989   	{
;;;7990   	//Инициализация при включении системы
;;;7991   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;7992   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
00509e  2564              MOVS     r5,#0x64
;;;7993   	bat_hndl_zvu_Q*=10000L;
;;;7994   
;;;7995   	bat_hndl_zvu_init=1;
;;;7996   	}
;;;7997   else 
;;;7998   	{
;;;7999   	if(Ib_ips_termokompensat<-IKB)
;;;8000   		{
;;;8001   		bat_hndl_i_vector=0;
;;;8002   		bat_hndl_i_zar_price=0L;
;;;8003   			
;;;8004   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8005   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8006   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8007   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8008   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8009   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8010   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8011   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8012   		
;;;8013   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8014   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8015   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8016   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8017   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8018   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8019   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8020   
;;;8021   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8022   		for(i=0;i<7;i++)
;;;8023   			{
;;;8024   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8025   				{
;;;8026   				break;
;;;8027   				}
;;;8028   			}
;;;8029   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8030   		 else if((i>=1)&&(i<7))
;;;8031   		 	{
;;;8032   			short i1,i2;
;;;8033   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8034   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8035   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8036   			bat_hndl_t_razr*=(long)i1;
;;;8037   			bat_hndl_t_razr/=(long)i2;
;;;8038   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8039   			}
;;;8040   		else if(i>=7)
;;;8041   			{
;;;8042   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8043   			}
;;;8044   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
0050a0  f8df81e8          LDR      r8,|L1.21132|
0050a4  7a60              LDRB     r0,[r4,#9]            ;7988  ; bat_hndl_zvu_init
0050a6  2700              MOVS     r7,#0                 ;7988
0050a8  f04f0901          MOV      r9,#1                 ;7995
0050ac  f1040680          ADD      r6,r4,#0x80           ;7991
0050b0  2800              CMP      r0,#0                 ;7988
0050b2  d07e              BEQ      |L1.20914|
0050b4  4977              LDR      r1,|L1.21140|
0050b6  4876              LDR      r0,|L1.21136|
0050b8  f9b12000          LDRSH    r2,[r1,#0]            ;7999  ; IKB
0050bc  4631              MOV      r1,r6                 ;7991
0050be  f9b00000          LDRSH    r0,[r0,#0]            ;7999  ; Ib_ips_termokompensat
0050c2  4253              RSBS     r3,r2,#0              ;7999
0050c4  6d49              LDR      r1,[r1,#0x54]         ;7991
0050c6  4298              CMP      r0,r3                 ;7999
0050c8  da74              BGE      |L1.20916|
0050ca  72e7              STRB     r7,[r4,#0xb]          ;8001
0050cc  6137              STR      r7,[r6,#0x10]         ;8002  ; bat_hndl_i_zar_price
0050ce  f1c00000          RSB      r0,r0,#0              ;8004
0050d2  b200              SXTH     r0,r0                 ;8004
0050d4  8070              STRH     r0,[r6,#2]            ;8004
0050d6  9008              STR      r0,[sp,#0x20]         ;8004
0050d8  486f              LDR      r0,|L1.21144|
0050da  4a70              LDR      r2,|L1.21148|
0050dc  8800              LDRH     r0,[r0,#0]            ;8005  ; BAT_C_POINT_1_6
0050de  eb000040          ADD      r0,r0,r0,LSL #1       ;8005
0050e2  ea4f0040          LSL      r0,r0,#1              ;8005
0050e6  fa0ffb80          SXTH     r11,r0                ;8005
0050ea  486d              LDR      r0,|L1.21152|
0050ec  8800              LDRH     r0,[r0,#0]            ;8006  ; BAT_C_POINT_1_2
0050ee  ea4f0040          LSL      r0,r0,#1              ;8006
0050f2  b203              SXTH     r3,r0                 ;8006
0050f4  486b              LDR      r0,|L1.21156|
0050f6  f9b0c000          LDRSH    r12,[r0,#0]           ;8007  ; BAT_C_POINT_1
0050fa  486b              LDR      r0,|L1.21160|
0050fc  f04f0903          MOV      r9,#3                 ;8008
005100  f9b00000          LDRSH    r0,[r0,#0]            ;8008  ; BAT_C_POINT_3
005104  fb90f0f9          SDIV     r0,r0,r9              ;8008
005108  b200              SXTH     r0,r0                 ;8008
00510a  9007              STR      r0,[sp,#0x1c]         ;8008
00510c  4867              LDR      r0,|L1.21164|
00510e  f04f0905          MOV      r9,#5                 ;8009
005112  f9b00000          LDRSH    r0,[r0,#0]            ;8009  ; BAT_C_POINT_5
005116  fb90f0f9          SDIV     r0,r0,r9              ;8009
00511a  fa0ff980          SXTH     r9,r0                 ;8009
00511e  4864              LDR      r0,|L1.21168|
005120  f9b0a000          LDRSH    r10,[r0,#0]           ;8010  ; BAT_C_POINT_10
005124  f04f000a          MOV      r0,#0xa               ;8010
005128  fb9af0f0          SDIV     r0,r10,r0             ;8010
00512c  fa0ffe80          SXTH     lr,r0                 ;8010
005130  4860              LDR      r0,|L1.21172|
005132  f04f0a14          MOV      r10,#0x14             ;8011
005136  f9b00000          LDRSH    r0,[r0,#0]            ;8011  ; BAT_C_POINT_20
00513a  fb90f0fa          SDIV     r0,r0,r10             ;8011
00513e  fa0ffa80          SXTH     r10,r0                ;8011
005142  485d              LDR      r0,|L1.21176|
005144  f9b00000          LDRSH    r0,[r0,#0]            ;8013  ; BAT_K_OLD
005148  fb0bfb00          MUL      r11,r11,r0            ;8013
00514c  fb9bfbf5          SDIV     r11,r11,r5            ;8013
005150  f8a2b000          STRH     r11,[r2,#0]           ;8013
005154  fb03f300          MUL      r3,r3,r0              ;8014
005158  fb93f3f5          SDIV     r3,r3,r5              ;8014
00515c  8053              STRH     r3,[r2,#2]            ;8014
00515e  fb0cfc00          MUL      r12,r12,r0            ;8015
005162  fb9cf3f5          SDIV     r3,r12,r5             ;8015
005166  8093              STRH     r3,[r2,#4]            ;8015
005168  9b07              LDR      r3,[sp,#0x1c]         ;8016
00516a  fb03f300          MUL      r3,r3,r0              ;8016
00516e  fb93f3f5          SDIV     r3,r3,r5              ;8016
005172  80d3              STRH     r3,[r2,#6]            ;8016
005174  fb09f900          MUL      r9,r9,r0              ;8017
005178  fb99f3f5          SDIV     r3,r9,r5              ;8017
00517c  8113              STRH     r3,[r2,#8]            ;8017
00517e  fb0efe00          MUL      lr,lr,r0              ;8018
005182  fb9ef3f5          SDIV     r3,lr,r5              ;8018
005186  8153              STRH     r3,[r2,#0xa]          ;8018
005188  fb0afa00          MUL      r10,r10,r0            ;8019
00518c  fb9af0f5          SDIV     r0,r10,r5             ;8019
005190  8190              STRH     r0,[r2,#0xc]          ;8019
005192  9808              LDR      r0,[sp,#0x20]         ;8021
005194  f04f030a          MOV      r3,#0xa               ;8021
005198  fb90f0f3          SDIV     r0,r0,r3              ;8021
00519c  b203              SXTH     r3,r0                 ;8021
00519e  f04f0000          MOV      r0,#0                 ;8022
                  |L1.20898|
0051a2  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8024
0051a6  429d              CMP      r5,r3                 ;8024
0051a8  dd07              BLE      |L1.20922|
0051aa  f1000001          ADD      r0,r0,#1              ;8022
0051ae  b2c0              UXTB     r0,r0                 ;8022
0051b0  e001              B        |L1.20918|
                  |L1.20914|
0051b2  e01e              B        |L1.20978|
                  |L1.20916|
0051b4  e086              B        |L1.21188|
                  |L1.20918|
0051b6  2807              CMP      r0,#7                 ;8022
0051b8  d3f3              BCC      |L1.20898|
                  |L1.20922|
0051ba  b358              CBZ      r0,|L1.21012|
0051bc  1e45              SUBS     r5,r0,#1              ;8030
0051be  2d06              CMP      r5,#6                 ;8030
0051c0  d22b              BCS      |L1.21018|
0051c2  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8033
0051c6  ebac0303          SUB      r3,r12,r3             ;8033
0051ca  b21b              SXTH     r3,r3                 ;8033
0051cc  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8034
0051d0  ebac0202          SUB      r2,r12,r2             ;8034
0051d4  fa0ffc82          SXTH     r12,r2                ;8034
0051d8  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8035
0051dc  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8035
0051e0  eba90200          SUB      r2,r9,r0              ;8035
0051e4  fb02f203          MUL      r2,r2,r3              ;8036
0051e8  fb92f2fc          SDIV     r2,r2,r12             ;8037
0051ec  4410              ADD      r0,r0,r2              ;8038
0051ee  64f0              STR      r0,[r6,#0x4c]         ;8038  ; bat_hndl_t_razr
0051f0  e017              B        |L1.21026|
                  |L1.20978|
0051f2  f44f70ef          MOV      r0,#0x1de             ;7991
0051f6  f7fffffe          BL       lc640_read_int
0051fa  6570              STR      r0,[r6,#0x54]         ;7991  ; bat_hndl_zvu_Q
0051fc  2865              CMP      r0,#0x65              ;7992
0051fe  d300              BCC      |L1.20994|
005200  6575              STR      r5,[r6,#0x54]         ;7992  ; bat_hndl_zvu_Q
                  |L1.20994|
005202  6d70              LDR      r0,[r6,#0x54]         ;7993  ; bat_hndl_zvu_Q
005204  f2427110          MOV      r1,#0x2710            ;7993
005208  fb00f001          MUL      r0,r0,r1              ;7993
00520c  6570              STR      r0,[r6,#0x54]         ;7993  ; bat_hndl_zvu_Q
00520e  f8849009          STRB     r9,[r4,#9]            ;7995
005212  e09a              B        |L1.21322|
                  |L1.21012|
005214  9800              LDR      r0,[sp,#0]            ;8029
005216  64f0              STR      r0,[r6,#0x4c]         ;8029  ; bat_hndl_t_razr
005218  e003              B        |L1.21026|
                  |L1.21018|
00521a  2807              CMP      r0,#7                 ;8040
00521c  d301              BCC      |L1.21026|
00521e  9806              LDR      r0,[sp,#0x18]         ;8042
005220  64f0              STR      r0,[r6,#0x4c]         ;8042  ; bat_hndl_t_razr
                  |L1.21026|
005222  6cf0              LDR      r0,[r6,#0x4c]  ; bat_hndl_t_razr
005224  fb98f0f0          SDIV     r0,r8,r0
005228  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_proc_razr
;;;8045   
;;;8046   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
00522a  4281              CMP      r1,r0
00522c  dd03              BLE      |L1.21046|
00522e  eba10000          SUB      r0,r1,r0
005232  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005234  e000              B        |L1.21048|
                  |L1.21046|
;;;8047   		else bat_hndl_zvu_Q=0L;
005236  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21048|
;;;8048   
;;;8049   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
005238  6df1              LDR      r1,[r6,#0x5c]  ; bat_hndl_remain_time
00523a  f44f6061          MOV      r0,#0xe10
00523e  fb91f0f0          SDIV     r0,r1,r0
005242  80b0              STRH     r0,[r6,#4]
;;;8050   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005244  f04f003c          MOV      r0,#0x3c
005248  fb91f1f0          SDIV     r1,r1,r0
00524c  b209              SXTH     r1,r1
00524e  80f1              STRH     r1,[r6,#6]
;;;8051   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
005250  fb91f2f0          SDIV     r2,r1,r0
005254  e032              B        |L1.21180|
005256  0000              DCW      0x0000
                  |L1.21080|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.21084|
                          DCD      BAT_C_REAL
                  |L1.21088|
                          DCD      BAT_C_NOM
                  |L1.21092|
                          DCD      0xffff7360
                  |L1.21096|
                          DCD      BAT_TYPE
                  |L1.21100|
                          DCD      lakb
                  |L1.21104|
                          DCD      t_ext
                  |L1.21108|
                          DCD      TBATSIGN
                  |L1.21112|
                          DCD      ND_EXT
                  |L1.21116|
                          DCD      TBATMAX
                  |L1.21120|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.21124|
                          DCD      ||area_number.19||+0x20
                  |L1.21128|
                          DCD      ||area_number.25||
                  |L1.21132|
                          DCD      0x000f4240
                  |L1.21136|
                          DCD      Ib_ips_termokompensat
                  |L1.21140|
                          DCD      IKB
                  |L1.21144|
                          DCD      BAT_C_POINT_1_6
                  |L1.21148|
                          DCD      ||.bss||+0x44c
                  |L1.21152|
                          DCD      BAT_C_POINT_1_2
                  |L1.21156|
                          DCD      BAT_C_POINT_1
                  |L1.21160|
                          DCD      BAT_C_POINT_3
                  |L1.21164|
                          DCD      BAT_C_POINT_5
                  |L1.21168|
                          DCD      BAT_C_POINT_10
                  |L1.21172|
                          DCD      BAT_C_POINT_20
                  |L1.21176|
                          DCD      BAT_K_OLD
                  |L1.21180|
0052bc  fb001012          MLS      r0,r0,r2,r1
0052c0  8130              STRH     r0,[r6,#8]
0052c2  e016              B        |L1.21234|
                  |L1.21188|
;;;8052   
;;;8053   		}
;;;8054   	else if(Ib_ips_termokompensat>IKB)
0052c4  4290              CMP      r0,r2
0052c6  dd14              BLE      |L1.21234|
;;;8055   		{
;;;8056   		bat_hndl_i_vector=1;
0052c8  f884900b          STRB     r9,[r4,#0xb]
;;;8057   
;;;8058   		bat_hndl_i=Ib_ips_termokompensat;
0052cc  8070              STRH     r0,[r6,#2]
;;;8059   		bat_hndl_i_summ+=(long)bat_hndl_i;
0052ce  6e72              LDR      r2,[r6,#0x64]  ; bat_hndl_i_summ
0052d0  4410              ADD      r0,r0,r2
0052d2  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8060   		if(bat_hndl_i_summ>=36000L)
0052d4  f64842a0          MOV      r2,#0x8ca0
0052d8  4290              CMP      r0,r2
0052da  db0a              BLT      |L1.21234|
;;;8061   
;;;8062   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8063   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8064   			{
;;;8065   			bat_hndl_i_summ-=36000L;
0052dc  eba00002          SUB      r0,r0,r2
0052e0  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8066   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
0052e2  4541              CMP      r1,r8
0052e4  da03              BGE      |L1.21230|
0052e6  6930              LDR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
0052e8  4408              ADD      r0,r0,r1
0052ea  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0052ec  e001              B        |L1.21234|
                  |L1.21230|
;;;8067   			else bat_hndl_zvu_Q=1000000L; 
0052ee  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21234|
;;;8068   			}
;;;8069   		}
;;;8070   
;;;8071   
;;;8072   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
0052f2  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0052f4  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
0052f6  4288              CMP      r0,r1
0052f8  d00d              BEQ      |L1.21270|
;;;8073   		{
;;;8074   		if(bat_hndl_i_vector==1)
0052fa  2801              CMP      r0,#1
0052fc  d10b              BNE      |L1.21270|
;;;8075   			{
;;;8076   			signed short tempSS;
;;;8077   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0052fe  f44f70e4          MOV      r0,#0x1c8
005302  f7fffffe          BL       lc640_read_int
005306  b200              SXTH     r0,r0
;;;8078   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
005308  4aff              LDR      r2,|L1.22280|
00530a  6d71              LDR      r1,[r6,#0x54]  ; bat_hndl_zvu_Q
00530c  4411              ADD      r1,r1,r2
00530e  fb91f0f0          SDIV     r0,r1,r0
005312  6130              STR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
;;;8079   			bat_hndl_i_summ=0;
005314  6677              STR      r7,[r6,#0x64]  ; bat_hndl_i_summ
                  |L1.21270|
;;;8080   			}
;;;8081   		}
;;;8082   	bat_hndl_i_vector_old=bat_hndl_i_vector;
005316  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005318  7320              STRB     r0,[r4,#0xc]
;;;8083   
;;;8084   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
00531a  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
00531c  f2427a10          MOV      r10,#0x2710
005320  fb90f5fa          SDIV     r5,r0,r10
005324  f44f79ef          MOV      r9,#0x1de
005328  4648              MOV      r0,r9
00532a  f7fffffe          BL       lc640_read_int
00532e  4285              CMP      r5,r0
005330  d006              BEQ      |L1.21312|
005332  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005334  fb90f0fa          SDIV     r0,r0,r10
005338  b201              SXTH     r1,r0
00533a  4648              MOV      r0,r9
00533c  f7fffffe          BL       lc640_write_int
                  |L1.21312|
;;;8085   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
005340  e9d60115          LDRD     r0,r1,[r6,#0x54]
005344  fb90f0f1          SDIV     r0,r0,r1
005348  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_remain_time
                  |L1.21322|
;;;8086   	}
;;;8087   
;;;8088   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
00534a  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
00534c  4540              CMP      r0,r8
00534e  dd02              BLE      |L1.21334|
005350  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
005354  e002              B        |L1.21340|
                  |L1.21334|
;;;8089   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
005356  2800              CMP      r0,#0
005358  da00              BGE      |L1.21340|
00535a  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21340|
;;;8090   
;;;8091   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
00535c  48eb              LDR      r0,|L1.22284|
00535e  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
005362  200a              MOVS     r0,#0xa
005364  fb91f0f0          SDIV     r0,r1,r0
005368  49e9              LDR      r1,|L1.22288|
00536a  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00536e  ebb00f41          CMP      r0,r1,LSL #1
005372  da30              BGE      |L1.21462|
005374  4249              RSBS     r1,r1,#0
005376  ebb00f41          CMP      r0,r1,LSL #1
00537a  dd2c              BLE      |L1.21462|
00537c  48e5              LDR      r0,|L1.22292|
00537e  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
005382  07c0              LSLS     r0,r0,#31
005384  d127              BNE      |L1.21462|
005386  48e4              LDR      r0,|L1.22296|
005388  49e4              LDR      r1,|L1.22300|
00538a  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
00538e  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
005392  4288              CMP      r0,r1
005394  dc1f              BGT      |L1.21462|
005396  49e2              LDR      r1,|L1.22304|
005398  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
00539c  4288              CMP      r0,r1
00539e  dd1a              BLE      |L1.21462|
0053a0  f9b40050          LDRSH    r0,[r4,#0x50]  ; main_kb_cnt
0053a4  280a              CMP      r0,#0xa
0053a6  db16              BLT      |L1.21462|
0053a8  28c8              CMP      r0,#0xc8
0053aa  dc14              BGT      |L1.21462|
;;;8092   	{
;;;8093   	if(bat_hndl_zvu_Q_cnt<60)
0053ac  f894002f          LDRB     r0,[r4,#0x2f]  ; bat_hndl_zvu_Q_cnt
0053b0  283c              CMP      r0,#0x3c
0053b2  d20d              BCS      |L1.21456|
;;;8094   		{
;;;8095   		bat_hndl_zvu_Q_cnt++;
0053b4  f1000001          ADD      r0,r0,#1
0053b8  b2c0              UXTB     r0,r0
0053ba  f884002f          STRB     r0,[r4,#0x2f]
;;;8096   		if(bat_hndl_zvu_Q_cnt>=60)
0053be  283c              CMP      r0,#0x3c
0053c0  d306              BCC      |L1.21456|
;;;8097   			{
;;;8098   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
0053c2  2164              MOVS     r1,#0x64
0053c4  f44f70ef          MOV      r0,#0x1de
0053c8  f7fffffe          BL       lc640_write_int
;;;8099   			bat_hndl_zvu_Q=1000000L;
0053cc  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21456|
;;;8100   
;;;8101   
;;;8102   			}
;;;8103   		}
;;;8104   	}
;;;8105   else 
;;;8106   	{
;;;8107   	bat_hndl_zvu_Q_cnt=0;
;;;8108   	}
;;;8109   
;;;8110   
;;;8111   
;;;8112   };
0053d0  b009              ADD      sp,sp,#0x24
0053d2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.21462|
0053d6  f884702f          STRB     r7,[r4,#0x2f]         ;8107
0053da  e7f9              B        |L1.21456|
;;;8113   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8117   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8118   void u_avt_set_hndl(void)
0053dc  e92d5fff          PUSH     {r0-r12,lr}
;;;8119   {
;;;8120   if(uavt_set_stat==uassSTEP1)
0053e0  4dd0              LDR      r5,|L1.22308|
;;;8121   	{
;;;8122   	char i,find_succes;
;;;8123   
;;;8124   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8125   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8126   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8127   		{
;;;8128   		uavt_set_error_cnt=60;
0053e2  4ed1              LDR      r6,|L1.22312|
0053e4  f8df8344          LDR      r8,|L1.22316|
0053e8  7828              LDRB     r0,[r5,#0]            ;8120  ; uavt_set_stat
;;;8129   		}
;;;8130   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8131   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8132   	find_succes=0;
;;;8133   /*	for(i=0;i<NUMIST;i++)
;;;8134   		{
;;;8135   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8136   		else
;;;8137   			{
;;;8138   			find_succes=0;
;;;8139   			break;
;;;8140   			}
;;;8141   		}*/
;;;8142   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
0053ea  f8dfa344          LDR      r10,|L1.22320|
0053ee  2400              MOVS     r4,#0                 ;8131
;;;8143   
;;;8144   	if(find_succes==1)
;;;8145   		{
;;;8146   		uavt_set_stat=uassSTEP2;
0053f0  f04f0902          MOV      r9,#2
;;;8147   		}
;;;8148   	if(uavt_set_error_cnt)
;;;8149   		{
;;;8150   		uavt_set_error_cnt--;
;;;8151   		if(!uavt_set_error_cnt)
;;;8152   			{
;;;8153   			uavt_set_stat=uassOFF;
;;;8154   			uavt_set_result_stat=uasrsERR;
;;;8155   			avt_error_bps=100;
0053f4  f04f0b64          MOV      r11,#0x64
0053f8  2801              CMP      r0,#1                 ;8120
0053fa  d12e              BNE      |L1.21594|
0053fc  f8980000          LDRB     r0,[r8,#0]            ;8126  ; uavt_set_stat_old
005400  2801              CMP      r0,#1                 ;8126
005402  d002              BEQ      |L1.21514|
005404  f04f003c          MOV      r0,#0x3c              ;8128
005408  7030              STRB     r0,[r6,#0]            ;8128
                  |L1.21514|
00540a  230a              MOVS     r3,#0xa               ;8131
00540c  2200              MOVS     r2,#0                 ;8131
00540e  21e6              MOVS     r1,#0xe6              ;8131
005410  20e1              MOVS     r0,#0xe1              ;8131
005412  f7fffffe          BL       mess_send
005416  f04f0000          MOV      r0,#0                 ;8132
00541a  49c6              LDR      r1,|L1.22324|
00541c  f9b12000          LDRSH    r2,[r1,#0]            ;8142  ; bps_U
005420  f9ba1000          LDRSH    r1,[r10,#0]           ;8142  ; U_AVT
005424  f1a10301          SUB      r3,r1,#1              ;8142
005428  429a              CMP      r2,r3                 ;8142
00542a  db04              BLT      |L1.21558|
00542c  1c49              ADDS     r1,r1,#1              ;8142
00542e  428a              CMP      r2,r1                 ;8142
005430  dc01              BGT      |L1.21558|
005432  f04f0001          MOV      r0,#1                 ;8142
                  |L1.21558|
005436  2801              CMP      r0,#1                 ;8144
005438  d101              BNE      |L1.21566|
00543a  f8859000          STRB     r9,[r5,#0]            ;8146
                  |L1.21566|
00543e  7830              LDRB     r0,[r6,#0]            ;8148  ; uavt_set_error_cnt
005440  b158              CBZ      r0,|L1.21594|
005442  f1a00001          SUB      r0,r0,#1              ;8150
005446  b2c0              UXTB     r0,r0                 ;8150
005448  7030              STRB     r0,[r6,#0]            ;8150
00544a  b930              CBNZ     r0,|L1.21594|
00544c  702c              STRB     r4,[r5,#0]            ;8153
00544e  48ba              LDR      r0,|L1.22328|
005450  f8809000          STRB     r9,[r0,#0]            ;8154
005454  48b9              LDR      r0,|L1.22332|
005456  f880b000          STRB     r11,[r0,#0]
                  |L1.21594|
;;;8156   			}
;;;8157   		}
;;;8158   	}
;;;8159   if(uavt_set_stat==uassSTEP2)
00545a  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8160   	{
;;;8161   	char i,find_succes;
;;;8162   
;;;8163   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
00545c  49b8              LDR      r1,|L1.22336|
;;;8164   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
00545e  48b9              LDR      r0,|L1.22340|
;;;8165   
;;;8166   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8167   		{
;;;8168   		uavt_set_error_cnt=60;
;;;8169   		}
;;;8170   
;;;8171   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8172   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8173   	find_succes=1;
;;;8174   
;;;8175   	for(i=0;i<NUMIST;i++)
;;;8176   		{
;;;8177   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8178   		else
;;;8179   			{
;;;8180   			find_succes=0;
;;;8181   			avt_error_bps=i+1;
;;;8182   			break;
;;;8183   			}
;;;8184   		}
;;;8185   
;;;8186   	if(find_succes==1)
;;;8187   		{
;;;8188   		uavt_set_stat=uassSTEP3;
;;;8189   		uavt_bps_pntr=0;
005460  4fb9              LDR      r7,|L1.22344|
005462  2a02              CMP      r2,#2                 ;8159
005464  d002              BEQ      |L1.21612|
;;;8190   		avt_plazma=0;
;;;8191   		}
;;;8192   
;;;8193   	if(uavt_set_error_cnt)
;;;8194   		{
;;;8195   		uavt_set_error_cnt--;
;;;8196   		if(!uavt_set_error_cnt)
;;;8197   			{
;;;8198   			uavt_set_stat=uassOFF;
;;;8199   			uavt_set_result_stat=uasrsERR;
;;;8200   			}
;;;8201   		}
;;;8202   	}
;;;8203   else if(uavt_set_stat==uassSTEP3)
005466  2a03              CMP      r2,#3
005468  d05e              BEQ      |L1.21800|
00546a  e0ca              B        |L1.22018|
                  |L1.21612|
00546c  f9ba2000          LDRSH    r2,[r10,#0]           ;8163  ; U_AVT
005470  f04f0365          MOV      r3,#0x65              ;8163
005474  fb02f303          MUL      r3,r2,r3              ;8163
005478  fbb3f3fb          UDIV     r3,r3,r11             ;8163
00547c  468a              MOV      r10,r1                ;8163
00547e  800b              STRH     r3,[r1,#0]            ;8163
005480  eb021142          ADD      r1,r2,r2,LSL #5       ;8164
005484  eb010141          ADD      r1,r1,r1,LSL #1       ;8164
005488  fbb1f1fb          UDIV     r1,r1,r11             ;8164
00548c  4683              MOV      r11,r0                ;8164
00548e  8001              STRH     r1,[r0,#0]            ;8164
005490  f8980000          LDRB     r0,[r8,#0]            ;8166  ; uavt_set_stat_old
005494  2802              CMP      r0,#2                 ;8166
005496  d002              BEQ      |L1.21662|
005498  f04f003c          MOV      r0,#0x3c              ;8168
00549c  7030              STRB     r0,[r6,#0]            ;8168
                  |L1.21662|
00549e  230a              MOVS     r3,#0xa               ;8171
0054a0  21bf              MOVS     r1,#0xbf              ;8171
0054a2  20be              MOVS     r0,#0xbe              ;8171
0054a4  f7fffffe          BL       mess_send
0054a8  230a              MOVS     r3,#0xa               ;8172
0054aa  2200              MOVS     r2,#0                 ;8172
0054ac  21e6              MOVS     r1,#0xe6              ;8172
0054ae  20e1              MOVS     r0,#0xe1              ;8172
0054b0  f7fffffe          BL       mess_send
0054b4  f04f0201          MOV      r2,#1                 ;8173
0054b8  f04f0000          MOV      r0,#0                 ;8175
0054bc  49a4              LDR      r1,|L1.22352|
0054be  f9ba3000          LDRSH    r3,[r10,#0]           ;8175
0054c2  f8dfe288          LDR      lr,|L1.22348|
0054c6  f9bbc000          LDRSH    r12,[r11,#0]          ;8177
0054ca  f9b1a000          LDRSH    r10,[r1,#0]           ;8175
0054ce  e00d              B        |L1.21740|
                  |L1.21712|
0054d0  ebc001c0          RSB      r1,r0,r0,LSL #3       ;8177
0054d4  eb011100          ADD      r1,r1,r0,LSL #4       ;8177
0054d8  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8177
0054dc  69c9              LDR      r1,[r1,#0x1c]         ;8177
0054de  4299              CMP      r1,r3                 ;8177
0054e0  da09              BGE      |L1.21750|
0054e2  4561              CMP      r1,r12                ;8177
0054e4  dd07              BLE      |L1.21750|
0054e6  f1000001          ADD      r0,r0,#1              ;8175
0054ea  b2c0              UXTB     r0,r0                 ;8175
                  |L1.21740|
0054ec  4550              CMP      r0,r10                ;8175
0054ee  dbef              BLT      |L1.21712|
                  |L1.21744|
0054f0  2a01              CMP      r2,#1                 ;8186
0054f2  d007              BEQ      |L1.21764|
0054f4  e00c              B        |L1.21776|
                  |L1.21750|
0054f6  f04f0200          MOV      r2,#0                 ;8180
0054fa  4990              LDR      r1,|L1.22332|
0054fc  f1000001          ADD      r0,r0,#1              ;8181
005500  7008              STRB     r0,[r1,#0]            ;8181
005502  e7f5              B        |L1.21744|
                  |L1.21764|
005504  f04f0003          MOV      r0,#3                 ;8188
005508  7028              STRB     r0,[r5,#0]            ;8188
00550a  703c              STRB     r4,[r7,#0]            ;8189
00550c  4891              LDR      r0,|L1.22356|
00550e  7004              STRB     r4,[r0,#0]            ;8190
                  |L1.21776|
005510  7830              LDRB     r0,[r6,#0]            ;8193  ; uavt_set_error_cnt
005512  b3d0              CBZ      r0,|L1.21898|
005514  f1a00001          SUB      r0,r0,#1              ;8195
005518  b2c0              UXTB     r0,r0                 ;8195
00551a  7030              STRB     r0,[r6,#0]            ;8195
00551c  bba8              CBNZ     r0,|L1.21898|
00551e  702c              STRB     r4,[r5,#0]            ;8198
005520  4885              LDR      r0,|L1.22328|
005522  f8809000          STRB     r9,[r0,#0]            ;8199
005526  e06c              B        |L1.22018|
                  |L1.21800|
;;;8204   	{
;;;8205   	char i,find_succes;
;;;8206   
;;;8207   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005528  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
00552c  f04f0365          MOV      r3,#0x65
005530  fb02f303          MUL      r3,r2,r3
005534  fbb3f3fb          UDIV     r3,r3,r11
005538  468a              MOV      r10,r1
00553a  800b              STRH     r3,[r1,#0]
;;;8208   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
00553c  eb021142          ADD      r1,r2,r2,LSL #5
005540  eb010141          ADD      r1,r1,r1,LSL #1
005544  fbb1f1fb          UDIV     r1,r1,r11
005548  4683              MOV      r11,r0
00554a  8001              STRH     r1,[r0,#0]
;;;8209   	
;;;8210   	if(uavt_set_stat_old!=uavt_set_stat)
00554c  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005550  2803              CMP      r0,#3
005552  d000              BEQ      |L1.21846|
;;;8211   		{
;;;8212   		uavt_bps_pntr=0;
005554  703c              STRB     r4,[r7,#0]
                  |L1.21846|
;;;8213   		}
;;;8214   
;;;8215   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005556  230a              MOVS     r3,#0xa
005558  21bf              MOVS     r1,#0xbf
00555a  20be              MOVS     r0,#0xbe
00555c  f7fffffe          BL       mess_send
;;;8216   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005560  230a              MOVS     r3,#0xa
005562  2200              MOVS     r2,#0
005564  21e6              MOVS     r1,#0xe6
005566  20e1              MOVS     r0,#0xe1
005568  f7fffffe          BL       mess_send
;;;8217   
;;;8218   	find_succes=1;
00556c  f04f0601          MOV      r6,#1
;;;8219   	for(i=0;i<NUMIST;i++)
005570  f04f0000          MOV      r0,#0
005574  f8df91d8          LDR      r9,|L1.22352|
005578  f9ba2000          LDRSH    r2,[r10,#0]
00557c  f8dfc1cc          LDR      r12,|L1.22348|
005580  f9bb3000          LDRSH    r3,[r11,#0]           ;8177
005584  f9b9a000          LDRSH    r10,[r9,#0]           ;8175
005588  e00e              B        |L1.21928|
                  |L1.21898|
00558a  e03a              B        |L1.22018|
                  |L1.21900|
;;;8220   		{
;;;8221   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
00558c  ebc001c0          RSB      r1,r0,r0,LSL #3
005590  eb011100          ADD      r1,r1,r0,LSL #4
005594  eb0c0181          ADD      r1,r12,r1,LSL #2
005598  69c9              LDR      r1,[r1,#0x1c]
00559a  4291              CMP      r1,r2
00559c  da0f              BGE      |L1.21950|
00559e  4299              CMP      r1,r3
0055a0  dd0d              BLE      |L1.21950|
0055a2  f1000001          ADD      r0,r0,#1              ;8219
0055a6  b2c0              UXTB     r0,r0                 ;8219
                  |L1.21928|
0055a8  4550              CMP      r0,r10                ;8219
0055aa  dbef              BLT      |L1.21900|
                  |L1.21932|
;;;8222   		else
;;;8223   			{
;;;8224   			find_succes=0;
;;;8225   			break;
;;;8226   			}
;;;8227   		}
;;;8228   
;;;8229   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
0055ac  20d7              MOVS     r0,#0xd7
0055ae  f7fffffe          BL       mess_find
0055b2  b1a0              CBZ      r0,|L1.21982|
0055b4  4868              LDR      r0,|L1.22360|
0055b6  6800              LDR      r0,[r0,#0]  ; mess_data
0055b8  28d9              CMP      r0,#0xd9
0055ba  d003              BEQ      |L1.21956|
0055bc  e00f              B        |L1.21982|
                  |L1.21950|
0055be  f04f0600          MOV      r6,#0                 ;8224
0055c2  e7f3              B        |L1.21932|
                  |L1.21956|
;;;8230   		{
;;;8231   		if(++uavt_bps_pntr>=NUMIST)
0055c4  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
0055c6  1c40              ADDS     r0,r0,#1
0055c8  b2c0              UXTB     r0,r0
0055ca  7038              STRB     r0,[r7,#0]
0055cc  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
0055d0  4288              CMP      r0,r1
0055d2  db04              BLT      |L1.21982|
;;;8232   			{
;;;8233   			uavt_set_stat=uassOFF;
0055d4  702c              STRB     r4,[r5,#0]
;;;8234   			uavt_set_result_stat=uasrsSUCCESS;
0055d6  4958              LDR      r1,|L1.22328|
0055d8  f04f0003          MOV      r0,#3
0055dc  7008              STRB     r0,[r1,#0]
                  |L1.21982|
;;;8235   			}
;;;8236   		//uavt_bps_pntr++;
;;;8237   		//if()
;;;8238   		}
;;;8239   	if(find_succes==1)
0055de  2e01              CMP      r6,#1
0055e0  d10f              BNE      |L1.22018|
;;;8240   		{
;;;8241   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
0055e2  20ee              MOVS     r0,#0xee
0055e4  e9cd0400          STRD     r0,r4,[sp,#0]
0055e8  9402              STR      r4,[sp,#8]
0055ea  9403              STR      r4,[sp,#0xc]
0055ec  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
0055ee  4603              MOV      r3,r0
0055f0  2216              MOVS     r2,#0x16
0055f2  4608              MOV      r0,r1
0055f4  f7fffffe          BL       mcp2515_transmit
;;;8242   		avt_plazma++;
0055f8  4856              LDR      r0,|L1.22356|
0055fa  7801              LDRB     r1,[r0,#0]  ; avt_plazma
0055fc  f1010101          ADD      r1,r1,#1
005600  7001              STRB     r1,[r0,#0]
                  |L1.22018|
;;;8243   		}
;;;8244   	}
;;;8245   
;;;8246   
;;;8247   
;;;8248   uavt_set_stat_old=uavt_set_stat;
005602  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005604  f8880000          STRB     r0,[r8,#0]
;;;8249   
;;;8250   }
005608  e8bd9fff          POP      {r0-r12,pc}
;;;8251   
                          ENDP

                  u_necc_hndl PROC
;;;8326   //-----------------------------------------------
;;;8327   void u_necc_hndl(void)
00560c  b5f8              PUSH     {r3-r7,lr}
;;;8328   {
;;;8329   signed long temp_L;
;;;8330   signed long temp_SL;
;;;8331   //signed short temp_SS;
;;;8332   
;;;8333   //char i;
;;;8334   
;;;8335   //temp_SS=0;
;;;8336   signed short t[2];
;;;8337   
;;;8338   
;;;8339   
;;;8340   
;;;8341   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8342   
;;;8343   if(!TERMOKOMPENS)
00560e  4853              LDR      r0,|L1.22364|
;;;8344   	{
;;;8345   	//u_necc=U0B;
;;;8346   	u_necc=UB20;
;;;8347   	}
;;;8348   else
;;;8349   	{
;;;8350   	if(ND_EXT[0])t[0]=20;
;;;8351   	else t[0]=t_ext[0];
;;;8352   
;;;8353   	mat_temper=t[0];
;;;8354   			
;;;8355   	if(mat_temper<0)temp_SL=UB0; 
;;;8356   	else 
;;;8357   		{
;;;8358   		if(mat_temper>40)mat_temper=40; 
;;;8359   		temp_SL=(UB20-UB0)*10;
;;;8360   		temp_SL*=mat_temper;
;;;8361   		temp_SL/=200;
;;;8362   		temp_SL+=UB0;
;;;8363   		}
;;;8364   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005610  4d55              LDR      r5,|L1.22376|
005612  4c56              LDR      r4,|L1.22380|
005614  8801              LDRH     r1,[r0,#0]            ;8343  ; TERMOKOMPENS
005616  4852              LDR      r0,|L1.22368|
005618  f9b03000          LDRSH    r3,[r0,#0]            ;8346
;;;8365   		{
;;;8366   		temp_SL=UVZ;
00561c  4851              LDR      r0,|L1.22372|
00561e  f9b02000          LDRSH    r2,[r0,#0]
005622  b139              CBZ      r1,|L1.22068|
005624  4852              LDR      r0,|L1.22384|
005626  7800              LDRB     r0,[r0,#0]            ;8350  ; ND_EXT
005628  b130              CBZ      r0,|L1.22072|
00562a  f04f0014          MOV      r0,#0x14              ;8350
00562e  f8ad0000          STRH     r0,[sp,#0]            ;8350
005632  e005              B        |L1.22080|
                  |L1.22068|
005634  8023              STRH     r3,[r4,#0]            ;8346
005636  e02c              B        |L1.22162|
                  |L1.22072|
005638  484e              LDR      r0,|L1.22388|
00563a  8800              LDRH     r0,[r0,#0]            ;8351  ; t_ext
00563c  f8ad0000          STRH     r0,[sp,#0]            ;8351
                  |L1.22080|
005640  4e4d              LDR      r6,|L1.22392|
005642  f9bd1000          LDRSH    r1,[sp,#0]            ;8353
005646  6031              STR      r1,[r6,#0]            ;8353  ; mat_temper
005648  484c              LDR      r0,|L1.22396|
00564a  2900              CMP      r1,#0                 ;8355
00564c  f9b00000          LDRSH    r0,[r0,#0]            ;8355
005650  db12              BLT      |L1.22136|
005652  2928              CMP      r1,#0x28              ;8358
005654  dd02              BLE      |L1.22108|
005656  f04f0128          MOV      r1,#0x28              ;8358
00565a  6031              STR      r1,[r6,#0]            ;8358  ; mat_temper
                  |L1.22108|
00565c  eba30100          SUB      r1,r3,r0              ;8359
005660  eb010181          ADD      r1,r1,r1,LSL #2       ;8359
005664  ea4f0141          LSL      r1,r1,#1              ;8359
005668  6833              LDR      r3,[r6,#0]            ;8360  ; mat_temper
00566a  fb01f103          MUL      r1,r1,r3              ;8360
00566e  f04f03c8          MOV      r3,#0xc8              ;8361
005672  fb91f1f3          SDIV     r1,r1,r3              ;8361
005676  4408              ADD      r0,r0,r1              ;8362
                  |L1.22136|
005678  f8951022          LDRB     r1,[r5,#0x22]         ;8364  ; spc_stat
00567c  2902              CMP      r1,#2                 ;8364
00567e  d107              BNE      |L1.22160|
005680  493f              LDR      r1,|L1.22400|
005682  7809              LDRB     r1,[r1,#0]            ;8364  ; sk_stat
005684  2901              CMP      r1,#1                 ;8364
005686  d002              BEQ      |L1.22158|
005688  493e              LDR      r1,|L1.22404|
00568a  8809              LDRH     r1,[r1,#0]            ;8364  ; VZ_CH_VENT_BLOK
00568c  b901              CBNZ     r1,|L1.22160|
                  |L1.22158|
00568e  4610              MOV      r0,r2
                  |L1.22160|
;;;8367   		}
;;;8368   	u_necc=(unsigned int)temp_SL;
005690  8020              STRH     r0,[r4,#0]
                  |L1.22162|
;;;8369   	///u_necc=3456;
;;;8370   	}  
;;;8371   
;;;8372   //u_necc=2355;
;;;8373   
;;;8374   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005692  483d              LDR      r0,|L1.22408|
005694  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005696  b918              CBNZ     r0,|L1.22176|
005698  483c              LDR      r0,|L1.22412|
00569a  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
00569c  2802              CMP      r0,#2
00569e  d102              BNE      |L1.22182|
                  |L1.22176|
;;;8375   	{
;;;8376   	u_necc=speedChrgVolt;
0056a0  483b              LDR      r0,|L1.22416|
0056a2  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
0056a4  8020              STRH     r0,[r4,#0]
                  |L1.22182|
;;;8377   	}
;;;8378   if(hv_vz_stat==hvsWRK)
0056a6  483b              LDR      r0,|L1.22420|
0056a8  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
0056aa  2805              CMP      r0,#5
0056ac  d100              BNE      |L1.22192|
;;;8379   	{
;;;8380   	u_necc=UVZ;
0056ae  8022              STRH     r2,[r4,#0]
                  |L1.22192|
;;;8381   	}
;;;8382   if(vz1_stat==vz1sWRK)
0056b0  7968              LDRB     r0,[r5,#5]  ; vz1_stat
0056b2  280a              CMP      r0,#0xa
0056b4  d102              BNE      |L1.22204|
;;;8383   	{
;;;8384   	u_necc=UZ_U;
0056b6  4838              LDR      r0,|L1.22424|
0056b8  8800              LDRH     r0,[r0,#0]  ; UZ_U
0056ba  8020              STRH     r0,[r4,#0]
                  |L1.22204|
;;;8385   	}
;;;8386   if(vz2_stat==vz2sWRK1)
0056bc  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
0056be  280a              CMP      r0,#0xa
0056c0  d102              BNE      |L1.22216|
;;;8387   	{
;;;8388   	u_necc=FZ_U1;
0056c2  4936              LDR      r1,|L1.22428|
0056c4  8809              LDRH     r1,[r1,#0]  ; FZ_U1
0056c6  8021              STRH     r1,[r4,#0]
                  |L1.22216|
;;;8389   	}
;;;8390   if(vz2_stat==vz2sWRK2)
0056c8  280b              CMP      r0,#0xb
0056ca  d102              BNE      |L1.22226|
;;;8391   	{
;;;8392   	u_necc=FZ_U2;
0056cc  4834              LDR      r0,|L1.22432|
0056ce  8800              LDRH     r0,[r0,#0]  ; FZ_U2
0056d0  8020              STRH     r0,[r4,#0]
                  |L1.22226|
;;;8393   	}
;;;8394   
;;;8395   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
0056d2  4814              LDR      r0,|L1.22308|
0056d4  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
0056d6  2801              CMP      r0,#1
0056d8  d001              BEQ      |L1.22238|
0056da  2802              CMP      r0,#2
0056dc  d102              BNE      |L1.22244|
                  |L1.22238|
;;;8396   	{
;;;8397   	u_necc=U_AVT;
0056de  4814              LDR      r0,|L1.22320|
0056e0  8800              LDRH     r0,[r0,#0]  ; U_AVT
0056e2  8020              STRH     r0,[r4,#0]
                  |L1.22244|
;;;8398   	}
;;;8399   
;;;8400   if(mess_find_unvol(MESS2UNECC_HNDL))
0056e4  20be              MOVS     r0,#0xbe
0056e6  f7fffffe          BL       mess_find_unvol
0056ea  b128              CBZ      r0,|L1.22264|
;;;8401   	{		
;;;8402   	if(mess_data[0]==PARAM_UNECC_SET)
0056ec  481a              LDR      r0,|L1.22360|
0056ee  6801              LDR      r1,[r0,#0]  ; mess_data
0056f0  29bf              CMP      r1,#0xbf
0056f2  d101              BNE      |L1.22264|
;;;8403   		{
;;;8404   		u_necc=mess_data[1];
0056f4  6840              LDR      r0,[r0,#4]  ; mess_data
0056f6  8020              STRH     r0,[r4,#0]
                  |L1.22264|
;;;8405   		}		
;;;8406   	} 
;;;8407   
;;;8408   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8409   #endif
;;;8410   
;;;8411   
;;;8412   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8413   
;;;8414   #ifndef UKU_TELECORE2015
;;;8415   #ifndef UKU_TELECORE2017
;;;8416   if(unh_cnt0<10)
;;;8417   	{
;;;8418   	unh_cnt0++;
;;;8419   	if(unh_cnt0>=10)
;;;8420   		{
;;;8421   		unh_cnt0=0;
;;;8422   		b1Hz_unh=1;
;;;8423   		}
;;;8424   	}
;;;8425   
;;;8426   if(unh_cnt1<5)
;;;8427   	{
;;;8428   	unh_cnt1++;
;;;8429   	if(unh_cnt1==5)
;;;8430   		{
;;;8431   		unh_cnt1=0;
;;;8432   //		b2Hz_unh=1;
;;;8433   		}
;;;8434   	} 
;;;8435   
;;;8436   
;;;8437   
;;;8438   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8439   	{		
;;;8440   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8441   		{
;;;8442   		u_necc=mess_data[1];
;;;8443   		}		
;;;8444   	}
;;;8445   
;;;8446   
;;;8447   else if(b1Hz_unh)
;;;8448   	{
;;;8449   	
;;;8450   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8451   		{
;;;8452   		
;;;8453   		u_necc=U0B;
;;;8454   		#ifdef IPS_SGEP_GAZPROM
;;;8455   		u_necc=UB0;
;;;8456   		#endif
;;;8457   		}
;;;8458   	else 
;;;8459   		{
;;;8460   		if(BAT_TYPE==0) //если батарея обычная
;;;8461   			{
;;;8462   			for(i=0;i<2;i++)
;;;8463   				{
;;;8464   				if(BAT_IS_ON[i]==bisON)
;;;8465   					{
;;;8466   					if(bat[i]._nd)t[i]=20;
;;;8467   					else t[i]=bat[i]._Tb;
;;;8468   					}
;;;8469   				else
;;;8470   					{
;;;8471   					t[i]=-20;
;;;8472   					}
;;;8473   				}
;;;8474   			if(t[0]>t[1])mat_temper=t[0];
;;;8475   			else mat_temper=t[1];
;;;8476   			
;;;8477   		
;;;8478   			if(mat_temper<0)temp_SL=UB0; 
;;;8479   			else 
;;;8480   				{
;;;8481   				if(mat_temper>40)mat_temper=40; 
;;;8482   				temp_SL=(UB20-UB0)*10;
;;;8483   				temp_SL*=mat_temper;
;;;8484   				temp_SL/=200;
;;;8485   				temp_SL+=UB0;
;;;8486   				}
;;;8487   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8488   				{
;;;8489   				temp_SL=UVZ;
;;;8490   				}
;;;8491   			u_necc=(unsigned int)temp_SL;
;;;8492   			}
;;;8493   		else if(BAT_TYPE==1) //если батарея китайская
;;;8494   			{
;;;8495   			u_necc=U0B;
;;;8496   					
;;;8497   			u_necc=bat[0]._Ub+10;
;;;8498   
;;;8499   			
;;;8500   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8501   				{
;;;8502   				u_necc=UVZ;
;;;8503   				}
;;;8504   			if(u_necc>=UB0) u_necc=UB0;
;;;8505   			if(u_necc>=UB20) u_necc=UB20;
;;;8506   			}
;;;8507   		}  
;;;8508   	}
;;;8509   #endif
;;;8510   #endif
;;;8511   
;;;8512   #ifdef UKU_TELECORE2015
;;;8513   
;;;8514   if(unh_cnt0<10)
;;;8515   	{
;;;8516   	unh_cnt0++;
;;;8517   	if(unh_cnt0>=10)
;;;8518   		{
;;;8519   		unh_cnt0=0;
;;;8520   		b1Hz_unh=1;
;;;8521   		}
;;;8522   	}
;;;8523   
;;;8524   if(unh_cnt1<5)
;;;8525   	{
;;;8526   	unh_cnt1++;
;;;8527   	if(unh_cnt1==5)
;;;8528   		{
;;;8529   		unh_cnt1=0;
;;;8530   //		b2Hz_unh=1;
;;;8531   		}
;;;8532   	} 
;;;8533   
;;;8534   
;;;8535   
;;;8536   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8537   	{		
;;;8538   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8539   		{
;;;8540   		u_necc=mess_data[1];
;;;8541   		}		
;;;8542   	}
;;;8543   
;;;8544   
;;;8545   else if(b1Hz_unh)
;;;8546   	{
;;;8547   	b1Hz_unh=0;
;;;8548   
;;;8549   	if(BAT_TYPE==0)
;;;8550   		{
;;;8551   		if(bat[0]._nd)mat_temper=20;
;;;8552   		else mat_temper=bat[0]._Tb;
;;;8553   
;;;8554   			
;;;8555   		if(mat_temper<0)temp_SL=UB0; 
;;;8556   		else 
;;;8557   			{
;;;8558   			if(mat_temper>40)mat_temper=40; 
;;;8559   			temp_SL=(UB20-UB0)*10;
;;;8560   			temp_SL*=mat_temper;
;;;8561   			temp_SL/=200;
;;;8562   			temp_SL+=UB0;
;;;8563   			}
;;;8564   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8565   			{
;;;8566   			temp_SL=UVZ;
;;;8567   			}
;;;8568   		u_necc=(unsigned int)temp_SL;
;;;8569   	///u_necc=3456;
;;;8570   		}
;;;8571   	else if(BAT_TYPE==1)
;;;8572   		{
;;;8573   		
;;;8574   		gran(&DU_LI_BAT,1,30);
;;;8575   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8576   		gran(&u_necc,0,UB0);
;;;8577   		gran(&u_necc,0,UB20);
;;;8578   		gran(&u_necc,0,540);		
;;;8579   
;;;8580   
;;;8581   		if(li_bat._batStat!=bsOK)
;;;8582   			{
;;;8583   			u_necc=U0B;
;;;8584   			}
;;;8585   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8586   			{
;;;8587   			u_necc=UVZ;
;;;8588   			}
;;;8589   		/* 
;;;8590   		u_necc=U0B;
;;;8591   		
;;;8592   
;;;8593   	
;;;8594   		u_necc=UB0;
;;;8595   		u_necc=li_bat._Ub+10;
;;;8596   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8597   			{
;;;8598   			lakb_error_cnt++;
;;;8599   			if(lakb_error_cnt>=30)
;;;8600   				{
;;;8601   				lakb_error_cnt=30;
;;;8602   				u_necc=U0B;
;;;8603   				}
;;;8604   			}
;;;8605   		else lakb_error_cnt=0;*/
;;;8606   		}
;;;8607   	else if(BAT_TYPE==2)
;;;8608   		{
;;;8609   		u_necc=U0B;
;;;8610   		
;;;8611   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8612   			{
;;;8613   			u_necc=UVZ;
;;;8614   			}
;;;8615   	
;;;8616   		u_necc=UB0;
;;;8617   		}
;;;8618   
;;;8619   	else if(BAT_TYPE==3)
;;;8620   		{
;;;8621   		u_necc=U0B;
;;;8622   		
;;;8623   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8624   			{
;;;8625   			u_necc=UVZ;
;;;8626   			}
;;;8627   
;;;8628   		gran(&DU_LI_BAT,1,30);
;;;8629   
;;;8630   
;;;8631   		if(lakbNotErrorNum==0)
;;;8632   			{
;;;8633   			u_necc=U0B;
;;;8634   			}
;;;8635   		else 
;;;8636   			{
;;;8637   			signed short i;
;;;8638   			//signed short u_necc_max;
;;;8639   			//u_necc_max=0;
;;;8640   			char soc_flag=0;
;;;8641   
;;;8642   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8643   				{
;;;8644   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8645   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8646   				}
;;;8647   
;;;8648   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8649   			}
;;;8650   		gran(&u_necc,0,UB0);
;;;8651   		//gran(&u_necc,0,UB20);
;;;8652   		gran(&u_necc,0,540);
;;;8653   		}
;;;8654   	}
;;;8655   
;;;8656   #endif 
;;;8657   
;;;8658   #ifdef UKU_TELECORE2017
;;;8659   
;;;8660   if(unh_cnt0<10)
;;;8661   	{
;;;8662   	unh_cnt0++;
;;;8663   	if(unh_cnt0>=10)
;;;8664   		{
;;;8665   		unh_cnt0=0;
;;;8666   		b1Hz_unh=1;
;;;8667   		}
;;;8668   	}
;;;8669   
;;;8670   if(unh_cnt1<5)
;;;8671   	{
;;;8672   	unh_cnt1++;
;;;8673   	if(unh_cnt1==5)
;;;8674   		{
;;;8675   		unh_cnt1=0;
;;;8676   //		b2Hz_unh=1;
;;;8677   		}
;;;8678   	} 
;;;8679   
;;;8680   
;;;8681   
;;;8682   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8683   	{		
;;;8684   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8685   		{
;;;8686   		u_necc=mess_data[1];
;;;8687   		}		
;;;8688   	}
;;;8689   
;;;8690   
;;;8691   else if(b1Hz_unh)
;;;8692   	{
;;;8693   	b1Hz_unh=0;
;;;8694   
;;;8695   	if(BAT_TYPE==0)
;;;8696   		{
;;;8697   		if(bat[0]._nd)mat_temper=20;
;;;8698   		else mat_temper=bat[0]._Tb;
;;;8699   
;;;8700   			
;;;8701   		if(mat_temper<0)temp_SL=UB0; 
;;;8702   		else 
;;;8703   			{
;;;8704   			if(mat_temper>40)mat_temper=40; 
;;;8705   			temp_SL=(UB20-UB0)*10;
;;;8706   			temp_SL*=mat_temper;
;;;8707   			temp_SL/=200;
;;;8708   			temp_SL+=UB0;
;;;8709   			}
;;;8710   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8711   			{
;;;8712   			temp_SL=UVZ;
;;;8713   			}
;;;8714   		u_necc=(unsigned int)temp_SL;
;;;8715   	///u_necc=3456;
;;;8716   		}
;;;8717   	else if(BAT_TYPE==1)
;;;8718   		{
;;;8719   		
;;;8720   		gran(&DU_LI_BAT,1,30);
;;;8721   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8722   		gran(&u_necc,0,UB0);
;;;8723   		gran(&u_necc,0,UB20);
;;;8724   		gran(&u_necc,0,540);		
;;;8725   
;;;8726   
;;;8727   		if(li_bat._batStat!=bsOK)
;;;8728   			{
;;;8729   			u_necc=U0B;
;;;8730   			}
;;;8731   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8732   			{
;;;8733   			u_necc=UVZ;
;;;8734   			}
;;;8735   		}
;;;8736   	else if(BAT_TYPE==2)
;;;8737   		{
;;;8738   		u_necc=U0B;
;;;8739   		
;;;8740   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8741   			{
;;;8742   			u_necc=UVZ;
;;;8743   			}
;;;8744   	
;;;8745   		u_necc=UB0;
;;;8746   		}
;;;8747   
;;;8748   	else if(BAT_TYPE==3)
;;;8749   		{
;;;8750   		u_necc=U0B;
;;;8751   		
;;;8752   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8753   			{
;;;8754   			u_necc=UVZ;
;;;8755   			}
;;;8756   
;;;8757   		gran(&DU_LI_BAT,1,30);
;;;8758   
;;;8759   
;;;8760   		if(lakbNotErrorNum==0)
;;;8761   			{
;;;8762   			u_necc=U0B;
;;;8763   			}
;;;8764   		else 
;;;8765   			{
;;;8766   			signed short i;
;;;8767   			//signed short u_necc_max;
;;;8768   			//u_necc_max=0;
;;;8769   			char soc_flag=0;
;;;8770   
;;;8771   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8772   				{
;;;8773   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8774   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8775   				}
;;;8776   
;;;8777   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8778   			}
;;;8779   		gran(&u_necc,0,UB0);
;;;8780   		//gran(&u_necc,0,UB20);
;;;8781   		gran(&u_necc,0,540);
;;;8782   		}
;;;8783   	}
;;;8784   
;;;8785   #endif 
;;;8786   //u_necc=2356;
;;;8787   
;;;8788   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;8789   	{
;;;8790   	u_necc=speedChrgVolt;
;;;8791   	}
;;;8792   #endif//gran(&u_necc,400,UMAX);
;;;8793   
;;;8794   
;;;8795   
;;;8796   temp_L=(signed long) u_necc;
0056f8  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;8797   temp_L*=98L;
0056fc  f04f0162          MOV      r1,#0x62
005700  fb00f101          MUL      r1,r0,r1
;;;8798   temp_L/=100L;
005704  e04e              B        |L1.22436|
005706  0000              DCW      0x0000
                  |L1.22280|
                          DCD      0xfff0bdc0
                  |L1.22284|
                          DCD      Ib_ips_termokompensat
                  |L1.22288|
                          DCD      IKB
                  |L1.22292|
                          DCD      bat
                  |L1.22296|
                          DCD      out_U
                  |L1.22300|
                          DCD      u_necc_up
                  |L1.22304|
                          DCD      u_necc_dn
                  |L1.22308|
                          DCD      uavt_set_stat
                  |L1.22312|
                          DCD      uavt_set_error_cnt
                  |L1.22316|
                          DCD      uavt_set_stat_old
                  |L1.22320|
                          DCD      U_AVT
                  |L1.22324|
                          DCD      bps_U
                  |L1.22328|
                          DCD      uavt_set_result_stat
                  |L1.22332|
                          DCD      avt_error_bps
                  |L1.22336|
                          DCD      u_max_temp
                  |L1.22340|
                          DCD      u_min_temp
                  |L1.22344|
                          DCD      uavt_bps_pntr
                  |L1.22348|
                          DCD      bps
                  |L1.22352|
                          DCD      NUMIST
                  |L1.22356|
                          DCD      avt_plazma
                  |L1.22360|
                          DCD      mess_data
                  |L1.22364|
                          DCD      TERMOKOMPENS
                  |L1.22368|
                          DCD      UB20
                  |L1.22372|
                          DCD      UVZ
                  |L1.22376|
                          DCD      ||area_number.25||
                  |L1.22380|
                          DCD      u_necc
                  |L1.22384|
                          DCD      ND_EXT
                  |L1.22388|
                          DCD      t_ext
                  |L1.22392|
                          DCD      mat_temper
                  |L1.22396|
                          DCD      UB0
                  |L1.22400|
                          DCD      sk_stat
                  |L1.22404|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.22408|
                          DCD      speedChIsOn
                  |L1.22412|
                          DCD      sp_ch_stat
                  |L1.22416|
                          DCD      speedChrgVolt
                  |L1.22420|
                          DCD      hv_vz_stat
                  |L1.22424|
                          DCD      UZ_U
                  |L1.22428|
                          DCD      FZ_U1
                  |L1.22432|
                          DCD      FZ_U2
                  |L1.22436|
0057a4  f04f0264          MOV      r2,#0x64
0057a8  fb91f1f2          SDIV     r1,r1,r2
;;;8799   u_necc_dn=(signed short)temp_L;
0057ac  4bfb              LDR      r3,|L1.23452|
0057ae  8019              STRH     r1,[r3,#0]
;;;8800   
;;;8801   temp_L=(signed long) u_necc;
;;;8802   temp_L*=102L;
0057b0  f04f0166          MOV      r1,#0x66
0057b4  fb00f001          MUL      r0,r0,r1
;;;8803   temp_L/=100L;
0057b8  fb90f0f2          SDIV     r0,r0,r2
;;;8804   u_necc_up=(signed short)temp_L;
0057bc  49f8              LDR      r1,|L1.23456|
0057be  8008              STRH     r0,[r1,#0]
;;;8805   /*
;;;8806   #ifdef IPS_SGEP_GAZPROM
;;;8807   u_necc=248;
;;;8808   #endif */
;;;8809   }
0057c0  bdf8              POP      {r3-r7,pc}
;;;8810   
                          ENDP

                  num_necc_hndl PROC
;;;8812   //-----------------------------------------------
;;;8813   void num_necc_hndl(void)
0057c2  e92d41f0          PUSH     {r4-r8,lr}
;;;8814   {
;;;8815   
;;;8816   static short num_necc_block_cnt;
;;;8817   if(num_necc_block_cnt) num_necc_block_cnt--;
0057c6  4cf7              LDR      r4,|L1.23460|
0057c8  f9b40036          LDRSH    r0,[r4,#0x36]  ; num_necc_block_cnt
0057cc  b110              CBZ      r0,|L1.22484|
0057ce  f1a00001          SUB      r0,r0,#1
0057d2  86e0              STRH     r0,[r4,#0x36]
                  |L1.22484|
;;;8818   
;;;8819   Isumm_=Isumm;
0057d4  48f4              LDR      r0,|L1.23464|
0057d6  4df5              LDR      r5,|L1.23468|
0057d8  8800              LDRH     r0,[r0,#0]  ; Isumm
0057da  8028              STRH     r0,[r5,#0]
;;;8820   
;;;8821   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
0057dc  4ef4              LDR      r6,|L1.23472|
0057de  270a              MOVS     r7,#0xa
0057e0  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0057e4  2800              CMP      r0,#0
0057e6  da06              BGE      |L1.22518|
0057e8  f7fffffe          BL       abs
0057ec  fb90f0f7          SDIV     r0,r0,r7
0057f0  8829              LDRH     r1,[r5,#0]  ; Isumm_
0057f2  4408              ADD      r0,r0,r1
0057f4  8028              STRH     r0,[r5,#0]
                  |L1.22518|
;;;8822   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
0057f6  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0057fa  2800              CMP      r0,#0
0057fc  da06              BGE      |L1.22540|
0057fe  f7fffffe          BL       abs
005802  fb90f0f7          SDIV     r0,r0,r7
005806  8829              LDRH     r1,[r5,#0]  ; Isumm_
005808  4408              ADD      r0,r0,r1
00580a  8028              STRH     r0,[r5,#0]
                  |L1.22540|
;;;8823   
;;;8824   num_necc_up=(Isumm_/((signed short)IMAX))+1;
00580c  49e9              LDR      r1,|L1.23476|
00580e  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005812  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005816  fb90f1f1          SDIV     r1,r0,r1
00581a  f1010101          ADD      r1,r1,#1
00581e  b2c9              UXTB     r1,r1
005820  77a1              STRB     r1,[r4,#0x1e]
;;;8825   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;8826   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;8827   
;;;8828   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005822  4ae5              LDR      r2,|L1.23480|
005824  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005828  fb90f0f2          SDIV     r0,r0,r2
00582c  f1000001          ADD      r0,r0,#1
005830  b2c2              UXTB     r2,r0
005832  77e2              STRB     r2,[r4,#0x1f]
;;;8829   
;;;8830   if(num_necc_up>num_necc)
005834  48e1              LDR      r0,|L1.23484|
;;;8831   	{
;;;8832   	num_necc=num_necc_up;
;;;8833   	num_necc_block_cnt=60;
005836  f04f053c          MOV      r5,#0x3c
00583a  f9b03000          LDRSH    r3,[r0,#0]            ;8830  ; num_necc
00583e  4299              CMP      r1,r3                 ;8830
005840  dd02              BLE      |L1.22600|
005842  8001              STRH     r1,[r0,#0]            ;8832
005844  86e5              STRH     r5,[r4,#0x36]
005846  e005              B        |L1.22612|
                  |L1.22600|
;;;8834   	}
;;;8835   else if(num_necc_down<num_necc)
005848  429a              CMP      r2,r3
00584a  da03              BGE      |L1.22612|
;;;8836   	{
;;;8837   	if(!num_necc_block_cnt)
00584c  8ee1              LDRH     r1,[r4,#0x36]  ; num_necc_block_cnt
00584e  b909              CBNZ     r1,|L1.22612|
;;;8838   		{
;;;8839   		num_necc=num_necc_down;
005850  8002              STRH     r2,[r0,#0]
;;;8840   		num_necc_block_cnt=60;
005852  86e5              STRH     r5,[r4,#0x36]
                  |L1.22612|
;;;8841   		}
;;;8842   	}
;;;8843   
;;;8844   if(PAR) num_necc=NUMIST;
005854  49da              LDR      r1,|L1.23488|
005856  880a              LDRH     r2,[r1,#0]  ; PAR
005858  49da              LDR      r1,|L1.23492|
00585a  b10a              CBZ      r2,|L1.22624|
00585c  880a              LDRH     r2,[r1,#0]  ; NUMIST
00585e  8002              STRH     r2,[r0,#0]
                  |L1.22624|
;;;8845   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8846   if(bPARALLEL) num_necc=NUMIST;
005860  f894202c          LDRB     r2,[r4,#0x2c]  ; bPARALLEL
005864  b10a              CBZ      r2,|L1.22634|
005866  880a              LDRH     r2,[r1,#0]  ; NUMIST
005868  8002              STRH     r2,[r0,#0]
                  |L1.22634|
;;;8847   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
00586a  7962              LDRB     r2,[r4,#5]  ; vz1_stat
00586c  2a0a              CMP      r2,#0xa
00586e  d101              BNE      |L1.22644|
005870  880a              LDRH     r2,[r1,#0]  ; NUMIST
005872  8002              STRH     r2,[r0,#0]
                  |L1.22644|
;;;8848   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005874  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005876  2a0a              CMP      r2,#0xa
005878  d001              BEQ      |L1.22654|
00587a  2a0b              CMP      r2,#0xb
00587c  d101              BNE      |L1.22658|
                  |L1.22654|
00587e  880a              LDRH     r2,[r1,#0]  ; NUMIST
005880  8002              STRH     r2,[r0,#0]
                  |L1.22658|
;;;8849   #endif
;;;8850   
;;;8851   gran(&num_necc,1,NUMIST);
005882  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005886  e8bd41f0          POP      {r4-r8,lr}
00588a  2101              MOVS     r1,#1
00588c  48cb              LDR      r0,|L1.23484|
00588e  f7ffbffe          B.W      gran
;;;8852   
;;;8853   }
;;;8854   
                          ENDP

                  cntrl_hndl PROC
;;;8857   //-----------------------------------------------
;;;8858   void cntrl_hndl(void)
005892  e92d5ff0          PUSH     {r4-r12,lr}
;;;8859   {
;;;8860   
;;;8861   
;;;8862   
;;;8863   IZMAX_=IZMAX;
005896  48cc              LDR      r0,|L1.23496|
005898  4cc2              LDR      r4,|L1.23460|
00589a  8800              LDRH     r0,[r0,#0]  ; IZMAX
00589c  f8a4004a          STRH     r0,[r4,#0x4a]
;;;8864   
;;;8865   //cntrl_hndl_plazma=10;
;;;8866   
;;;8867   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
0058a0  48ca              LDR      r0,|L1.23500|
0058a2  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
0058a4  b918              CBNZ     r0,|L1.22702|
0058a6  48ca              LDR      r0,|L1.23504|
0058a8  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
0058aa  2802              CMP      r0,#2
0058ac  d103              BNE      |L1.22710|
                  |L1.22702|
0058ae  48c9              LDR      r0,|L1.23508|
0058b0  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
0058b2  f8a4004a          STRH     r0,[r4,#0x4a]
                  |L1.22710|
;;;8868   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
0058b6  7960              LDRB     r0,[r4,#5]  ; vz1_stat
0058b8  280a              CMP      r0,#0xa
0058ba  d103              BNE      |L1.22724|
0058bc  48c6              LDR      r0,|L1.23512|
0058be  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
0058c0  f8a4004a          STRH     r0,[r4,#0x4a]
                  |L1.22724|
;;;8869   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
0058c4  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
0058c6  280a              CMP      r0,#0xa
0058c8  d103              BNE      |L1.22738|
0058ca  49c4              LDR      r1,|L1.23516|
0058cc  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
0058ce  f8a4104a          STRH     r1,[r4,#0x4a]
                  |L1.22738|
;;;8870   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
0058d2  280b              CMP      r0,#0xb
0058d4  d103              BNE      |L1.22750|
0058d6  48c2              LDR      r0,|L1.23520|
0058d8  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
0058da  f8a4004a          STRH     r0,[r4,#0x4a]
                  |L1.22750|
;;;8871   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;8872   
;;;8873   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
0058de  f9b40072          LDRSH    r0,[r4,#0x72]  ; cntrl_stat_blok_cnt
0058e2  b118              CBZ      r0,|L1.22764|
0058e4  f1a00001          SUB      r0,r0,#1
0058e8  f8a40072          STRH     r0,[r4,#0x72]
                  |L1.22764|
;;;8874   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
0058ec  f9b40074          LDRSH    r0,[r4,#0x74]  ; cntrl_stat_blok_cnt_
0058f0  b118              CBZ      r0,|L1.22778|
0058f2  f1a00001          SUB      r0,r0,#1
0058f6  f8a40074          STRH     r0,[r4,#0x74]
                  |L1.22778|
;;;8875   
;;;8876   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
0058fa  48ad              LDR      r0,|L1.23472|
0058fc  f04f080a          MOV      r8,#0xa               ;8868
005900  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005904  0789              LSLS     r1,r1,#30
005906  d103              BNE      |L1.22800|
005908  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
00590c  0780              LSLS     r0,r0,#30
00590e  d005              BEQ      |L1.22812|
                  |L1.22800|
005910  f8b4004a          LDRH     r0,[r4,#0x4a]  ; IZMAX_
005914  fbb0f0f8          UDIV     r0,r0,r8
005918  f8a4004a          STRH     r0,[r4,#0x4a]
                  |L1.22812|
;;;8877   
;;;8878   
;;;8879   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8880   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
00591c  48b1              LDR      r0,|L1.23524|
00591e  2601              MOVS     r6,#1
005920  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005924  1e49              SUBS     r1,r1,#1
005926  2905              CMP      r1,#5
005928  d300              BCC      |L1.22828|
00592a  8006              STRH     r6,[r0,#0]
                  |L1.22828|
;;;8881   if(ch_cnt0<(10*REG_SPEED))
00592c  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005930  7d61              LDRB     r1,[r4,#0x15]  ; ch_cnt0
005932  eb000080          ADD      r0,r0,r0,LSL #2
005936  2500              MOVS     r5,#0                 ;8867
005938  ebb10f40          CMP      r1,r0,LSL #1
00593c  da08              BGE      |L1.22864|
;;;8882   	{
;;;8883   	ch_cnt0++;
00593e  f1010101          ADD      r1,r1,#1
005942  b2c9              UXTB     r1,r1
005944  7561              STRB     r1,[r4,#0x15]
;;;8884   	if(ch_cnt0>=10*REG_SPEED)
005946  ebb10f40          CMP      r1,r0,LSL #1
00594a  db01              BLT      |L1.22864|
;;;8885   		{
;;;8886   		ch_cnt0=0;
00594c  7565              STRB     r5,[r4,#0x15]
;;;8887   		b1Hz_ch=1;
00594e  75a6              STRB     r6,[r4,#0x16]
                  |L1.22864|
;;;8888   		}
;;;8889   	}
;;;8890   #endif
;;;8891   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8892   if(ch_cnt0<10)
;;;8893   	{
;;;8894   	ch_cnt0++;
;;;8895   	if(ch_cnt0>=10)
;;;8896   		{
;;;8897   		ch_cnt0=0;
;;;8898   		b1Hz_ch=1;
;;;8899   		}
;;;8900   	}
;;;8901   #endif
;;;8902   
;;;8903   
;;;8904   if(mess_find_unvol(MESS2CNTRL_HNDL))
005950  20e1              MOVS     r0,#0xe1
005952  f7fffffe          BL       mess_find_unvol
;;;8905   	{
;;;8906   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;8907   		{
;;;8908   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;8909   		}
;;;8910   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;8911   		{
;;;8912   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;8913   		}
;;;8914   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;8915   		{
;;;8916   		static char cntrlStatIsDownCnt;
;;;8917   		cntrl_stat--;
;;;8918   
;;;8919   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;8920   			{
;;;8921   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;8922   			}
;;;8923   		else 
;;;8924   			{
;;;8925   			cntrlStatIsDownCnt=0;
;;;8926   			}
;;;8927   
;;;8928   		}
;;;8929   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;8930   		{
;;;8931   		cntrl_stat/*_new*/=mess_data[1];
;;;8932   		}
;;;8933   
;;;8934   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;8935   		{
;;;8936   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8937   		if(bps_U>u_necc)
005956  f8dfc290          LDR      r12,|L1.23528|
00595a  4aa4              LDR      r2,|L1.23532|
;;;8938   			{
;;;8939   			cntrl_hndl_plazma=11;
;;;8940   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8941   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8942   			}
;;;8943   		else if(bps_U<u_necc)
;;;8944   			{
;;;8945   			cntrl_hndl_plazma=12;	
;;;8946   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8947   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8948   			}
;;;8949   		#elif defined(UKU_220)
;;;8950   		if(load_U>u_necc)
;;;8951   			{
;;;8952   			cntrl_hndl_plazma=13;
;;;8953   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8954   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8955   			}
;;;8956   		else if(load_U<u_necc)
;;;8957   			{
;;;8958   			cntrl_hndl_plazma=14;	
;;;8959   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8960   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8961   			}
;;;8962   		#elif defined(UKU_220_V2)
;;;8963   		if(load_U>u_necc)
;;;8964   			{
;;;8965   			cntrl_hndl_plazma=15;
;;;8966   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8967   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8968   			}
;;;8969   		else if(load_U<u_necc)
;;;8970   			{
;;;8971   			cntrl_hndl_plazma=16;	
;;;8972   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8973   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8974   			}
;;;8975   		#else
;;;8976   
;;;8977   		if(load_U>u_necc)
;;;8978   			{
;;;8979   			cntrl_hndl_plazma=17;
;;;8980   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8981   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8982   			}
;;;8983   		else if(load_U<u_necc)
;;;8984   			{
;;;8985   			cntrl_hndl_plazma=18;	
;;;8986   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8987   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8988   			}
;;;8989   		#endif	
;;;8990   	 	}
;;;8991   
;;;8992   	/*gran(&cntrl_stat_new,10,1010);			
;;;8993   	cntrl_stat_old=cntrl_stat_new;
;;;8994   	cntrl_stat=cntrl_stat_new;*/
;;;8995   	}
;;;8996   
;;;8997   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8998   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
00595c  f8df9290          LDR      r9,|L1.23536|
;;;8999   	{
;;;9000   	cntrl_stat_new=cntrl_stat_old;
;;;9001   	cntrl_hndl_plazma=19;
;;;9002   	if((Ibmax/10)>(2*IZMAX_))
;;;9003   		{
;;;9004   		cntrl_hndl_plazma=20;
;;;9005             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9006   		else	cntrl_stat_new-=10;
;;;9007   		}		
;;;9008   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9009   		{
;;;9010   		cntrl_hndl_plazma=21;
;;;9011             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9012             else	cntrl_stat_new-=3;
;;;9013   		}   
;;;9014   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9015   		{
;;;9016   		cntrl_hndl_plazma=22;
;;;9017   		cntrl_stat_new--;
;;;9018   		}
;;;9019   		
;;;9020   	else if(bps_U<u_necc)
;;;9021   		{
;;;9022   		cntrl_hndl_plazma=23;
;;;9023   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9024   			{
;;;9025   			cntrl_hndl_plazma=24;
;;;9026   			if(Ibmax<0)
;;;9027   				{
;;;9028   				cntrl_hndl_plazma=25;
;;;9029                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9030   				else cntrl_stat_new+=10;
;;;9031   				}
;;;9032   			else if(Ibmax<(IZMAX_*5))
;;;9033   				{
;;;9034   				cntrl_hndl_plazma=26;
;;;9035                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9036   				else	cntrl_stat_new+=2;
;;;9037   				}
;;;9038   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9039   				{
;;;9040   				cntrl_hndl_plazma=27;
;;;9041   				cntrl_stat_new++;
;;;9042   				}					
;;;9043   			}
;;;9044   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9045   			{
;;;9046   			cntrl_hndl_plazma=28;
;;;9047   			if(Ibmax<(IZMAX_*5))
;;;9048   				{
;;;9049   				cntrl_hndl_plazma=29;
;;;9050                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9051   				else	cntrl_stat_new+=2;
;;;9052   				}
;;;9053   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9054   				{
;;;9055   				cntrl_hndl_plazma=30;
;;;9056   				cntrl_stat_new++;
;;;9057   				}					
;;;9058   			}	
;;;9059   		else if(bps_U<(u_necc-1))
;;;9060   			{
;;;9061   			cntrl_hndl_plazma=31;
;;;9062   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9063   				{
;;;9064   				cntrl_hndl_plazma=32;
;;;9065   				cntrl_stat_new++;
;;;9066   				}					
;;;9067   			}					
;;;9068   		}	
;;;9069   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9070   		{ 	
;;;9071   		cntrl_hndl_plazma=33;
;;;9072   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9073   			{
;;;9074   			cntrl_hndl_plazma=34;
;;;9075                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9076   			else	cntrl_stat_new-=10;
;;;9077   			}
;;;9078   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9079   			{
;;;9080   			cntrl_hndl_plazma=35;
;;;9081                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9082   			else cntrl_stat_new-=2;
;;;9083   			}	
;;;9084   		else if(bps_U>(u_necc+1))
;;;9085   			{
;;;9086   			cntrl_hndl_plazma=36;
;;;9087   			cntrl_stat_new--;
;;;9088   			}					
;;;9089   		}
;;;9090   
;;;9091   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9092   		{
;;;9093   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9094   		}
;;;9095   
;;;9096   	gran(&cntrl_stat_new,10,1010);			
;;;9097   	cntrl_stat_old=cntrl_stat_new;
;;;9098   	cntrl_stat=cntrl_stat_new;
;;;9099   	
;;;9100   	if(ICA_EN==0)
;;;9101   		{
;;;9102   		if(ica_cntrl_hndl_cnt)
005960  4fa4              LDR      r7,|L1.23540|
005962  b398              CBZ      r0,|L1.22988|
005964  49a4              LDR      r1,|L1.23544|
005966  6808              LDR      r0,[r1,#0]            ;8906  ; mess_data
005968  2864              CMP      r0,#0x64              ;8906
00596a  d008              BEQ      |L1.22910|
00596c  2869              CMP      r0,#0x69              ;8910
00596e  d00b              BEQ      |L1.22920|
005970  286e              CMP      r0,#0x6e              ;8914
005972  d00f              BEQ      |L1.22932|
005974  28e5              CMP      r0,#0xe5              ;8929
005976  d02c              BEQ      |L1.22994|
005978  28e6              CMP      r0,#0xe6              ;8934
00597a  d02d              BEQ      |L1.23000|
                  |L1.22908|
00597c  e205              B        |L1.23946|
                  |L1.22910|
00597e  6848              LDR      r0,[r1,#4]            ;8908  ; mess_data
005980  8e61              LDRH     r1,[r4,#0x32]         ;8908  ; cntrl_stat_old
005982  4408              ADD      r0,r0,r1              ;8908
005984  8620              STRH     r0,[r4,#0x30]         ;8908
005986  e200              B        |L1.23946|
                  |L1.22920|
005988  6848              LDR      r0,[r1,#4]            ;8912  ; mess_data
00598a  8e61              LDRH     r1,[r4,#0x32]         ;8912  ; cntrl_stat_old
00598c  eba10000          SUB      r0,r1,r0              ;8912
005990  8620              STRH     r0,[r4,#0x30]         ;8912
005992  e1fa              B        |L1.23946|
                  |L1.22932|
005994  8e20              LDRH     r0,[r4,#0x30]         ;8917  ; cntrl_stat
005996  f1a00001          SUB      r0,r0,#1              ;8917
00599a  b200              SXTH     r0,r0                 ;8917
00599c  8620              STRH     r0,[r4,#0x30]         ;8917
00599e  281e              CMP      r0,#0x1e              ;8919
0059a0  dd07              BLE      |L1.22962|
0059a2  4896              LDR      r0,|L1.23548|
0059a4  4996              LDR      r1,|L1.23552|
0059a6  f9b00000          LDRSH    r0,[r0,#0]            ;8919  ; load_U
0059aa  f9b11000          LDRSH    r1,[r1,#0]            ;8919  ; USIGN
0059ae  4288              CMP      r0,r1                 ;8919
0059b0  da0d              BGE      |L1.22990|
                  |L1.22962|
0059b2  7be0              LDRB     r0,[r4,#0xf]          ;8921  ; cntrlStatIsDownCnt
0059b4  1c40              ADDS     r0,r0,#1              ;8921
0059b6  b2c0              UXTB     r0,r0                 ;8921
0059b8  73e0              STRB     r0,[r4,#0xf]          ;8921
0059ba  28fa              CMP      r0,#0xfa              ;8921
0059bc  d1de              BNE      |L1.22908|
0059be  230a              MOVS     r3,#0xa               ;8921
0059c0  2200              MOVS     r2,#0                 ;8921
0059c2  21e7              MOVS     r1,#0xe7              ;8921
0059c4  20e6              MOVS     r0,#0xe6              ;8921
0059c6  f7fffffe          BL       mess_send
0059ca  e1de              B        |L1.23946|
                  |L1.22988|
0059cc  e044              B        |L1.23128|
                  |L1.22990|
0059ce  73e5              STRB     r5,[r4,#0xf]          ;8925
0059d0  e1db              B        |L1.23946|
                  |L1.22994|
0059d2  6848              LDR      r0,[r1,#4]            ;8931  ; mess_data
0059d4  8620              STRH     r0,[r4,#0x30]         ;8931
0059d6  e1d8              B        |L1.23946|
                  |L1.23000|
0059d8  f9bc0000          LDRSH    r0,[r12,#0]           ;8937  ; bps_U
0059dc  f9b21000          LDRSH    r1,[r2,#0]            ;8937  ; u_necc
0059e0  4288              CMP      r0,r1                 ;8937
0059e2  dd1a              BLE      |L1.23066|
0059e4  f04f020b          MOV      r2,#0xb               ;8939
0059e8  f884202d          STRB     r2,[r4,#0x2d]         ;8939
0059ec  eba00001          SUB      r0,r0,r1              ;8940
0059f0  2828              CMP      r0,#0x28              ;8940
0059f2  dd07              BLE      |L1.23044|
0059f4  f9b40030          LDRSH    r0,[r4,#0x30]         ;8940  ; cntrl_stat
0059f8  2800              CMP      r0,#0                 ;8940
0059fa  dd03              BLE      |L1.23044|
0059fc  f1a00005          SUB      r0,r0,#5              ;8940
005a00  8620              STRH     r0,[r4,#0x30]         ;8940
005a02  e1c2              B        |L1.23946|
                  |L1.23044|
005a04  f9b40030          LDRSH    r0,[r4,#0x30]         ;8941  ; cntrl_stat
005a08  2800              CMP      r0,#0                 ;8941
005a0a  d0b7              BEQ      |L1.22908|
005a0c  7da1              LDRB     r1,[r4,#0x16]         ;8941  ; b1Hz_ch
005a0e  2900              CMP      r1,#0                 ;8941
005a10  d0b4              BEQ      |L1.22908|
005a12  f1a00001          SUB      r0,r0,#1              ;8941
005a16  8620              STRH     r0,[r4,#0x30]         ;8941
005a18  e1b7              B        |L1.23946|
                  |L1.23066|
005a1a  daaf              BGE      |L1.22908|
005a1c  f04f020c          MOV      r2,#0xc               ;8945
005a20  f884202d          STRB     r2,[r4,#0x2d]         ;8945
005a24  eba10000          SUB      r0,r1,r0              ;8946
005a28  2828              CMP      r0,#0x28              ;8946
005a2a  dd09              BLE      |L1.23104|
005a2c  f9b40030          LDRSH    r0,[r4,#0x30]         ;8946  ; cntrl_stat
005a30  f24031f7          MOV      r1,#0x3f7             ;8946
005a34  4288              CMP      r0,r1                 ;8946
005a36  da03              BGE      |L1.23104|
005a38  f1000005          ADD      r0,r0,#5              ;8946
005a3c  8620              STRH     r0,[r4,#0x30]         ;8946
005a3e  e1a4              B        |L1.23946|
                  |L1.23104|
005a40  f9b40030          LDRSH    r0,[r4,#0x30]         ;8947  ; cntrl_stat
005a44  f5b07f7f          CMP      r0,#0x3fc             ;8947
005a48  da98              BGE      |L1.22908|
005a4a  7da1              LDRB     r1,[r4,#0x16]         ;8947  ; b1Hz_ch
005a4c  2900              CMP      r1,#0                 ;8947
005a4e  d095              BEQ      |L1.22908|
005a50  f1000001          ADD      r0,r0,#1              ;8947
005a54  8620              STRH     r0,[r4,#0x30]         ;8947
005a56  e198              B        |L1.23946|
                  |L1.23128|
005a58  7da0              LDRB     r0,[r4,#0x16]         ;8998  ; b1Hz_ch
005a5a  2800              CMP      r0,#0                 ;8998
005a5c  d08e              BEQ      |L1.22908|
005a5e  4869              LDR      r0,|L1.23556|
005a60  8800              LDRH     r0,[r0,#0]            ;8998  ; bIBAT_SMKLBR
005a62  b118              CBZ      r0,|L1.23148|
005a64  f89902e3          LDRB     r0,[r9,#0x2e3]        ;8998  ; bps
005a68  2828              CMP      r0,#0x28              ;8998
005a6a  d987              BLS      |L1.22908|
                  |L1.23148|
005a6c  f104042c          ADD      r4,r4,#0x2c           ;9000
005a70  f9b40006          LDRSH    r0,[r4,#6]            ;9000  ; cntrl_stat_old
005a74  8360              STRH     r0,[r4,#0x1a]         ;9000
005a76  f04f0113          MOV      r1,#0x13              ;9001
005a7a  7061              STRB     r1,[r4,#1]            ;9001
005a7c  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9002  ; Ibmax
005a80  8be3              LDRH     r3,[r4,#0x1e]         ;9002  ; IZMAX_
005a82  fb91f8f8          SDIV     r8,r1,r8              ;9002
005a86  f1a4042c          SUB      r4,r4,#0x2c           ;9002
005a8a  ebb80f43          CMP      r8,r3,LSL #1          ;9002
005a8e  dd10              BLE      |L1.23218|
005a90  f04f0114          MOV      r1,#0x14              ;9004
005a94  f884102d          STRB     r1,[r4,#0x2d]         ;9004
005a98  f8b41072          LDRH     r1,[r4,#0x72]         ;9005  ; cntrl_stat_blok_cnt
005a9c  b121              CBZ      r1,|L1.23208|
005a9e  f1a00001          SUB      r0,r0,#1              ;9005
005aa2  f8a40046          STRH     r0,[r4,#0x46]         ;9005
005aa6  e13a              B        |L1.23838|
                  |L1.23208|
005aa8  f1a0000a          SUB      r0,r0,#0xa            ;9006
005aac  f8a40046          STRH     r0,[r4,#0x46]         ;9006
005ab0  e135              B        |L1.23838|
                  |L1.23218|
005ab2  da14              BGE      |L1.23262|
005ab4  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9008
005ab8  458a              CMP      r10,r1                ;9008
005aba  da10              BGE      |L1.23262|
005abc  f04f0115          MOV      r1,#0x15              ;9010
005ac0  f884102d          STRB     r1,[r4,#0x2d]         ;9010
005ac4  f8b41072          LDRH     r1,[r4,#0x72]         ;9011  ; cntrl_stat_blok_cnt
005ac8  b121              CBZ      r1,|L1.23252|
005aca  f1a00001          SUB      r0,r0,#1              ;9011
005ace  f8a40046          STRH     r0,[r4,#0x46]         ;9011
005ad2  e124              B        |L1.23838|
                  |L1.23252|
005ad4  f1a00003          SUB      r0,r0,#3              ;9012
005ad8  f8a40046          STRH     r0,[r4,#0x46]         ;9012
005adc  e11f              B        |L1.23838|
                  |L1.23262|
005ade  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9014
005ae2  458a              CMP      r10,r1                ;9014
005ae4  dd0a              BLE      |L1.23292|
005ae6  4598              CMP      r8,r3                 ;9014
005ae8  dd08              BLE      |L1.23292|
005aea  f04f0116          MOV      r1,#0x16              ;9016
005aee  f884102d          STRB     r1,[r4,#0x2d]         ;9016
005af2  f1a00001          SUB      r0,r0,#1              ;9017
005af6  f8a40046          STRH     r0,[r4,#0x46]         ;9017
005afa  e110              B        |L1.23838|
                  |L1.23292|
005afc  f9bcc000          LDRSH    r12,[r12,#0]          ;9020  ; bps_U
005b00  f9b22000          LDRSH    r2,[r2,#0]            ;9020  ; u_necc
005b04  f8df8100          LDR      r8,|L1.23560|
005b08  f8dfb100          LDR      r11,|L1.23564|
005b0c  4594              CMP      r12,r2                ;9020
005b0e  da7f              BGE      |L1.23568|
005b10  f04f0a17          MOV      r10,#0x17             ;9022
005b14  f884a02d          STRB     r10,[r4,#0x2d]        ;9022
005b18  f9b88000          LDRSH    r8,[r8,#0]            ;9023  ; UB0
005b1c  f9bba000          LDRSH    r10,[r11,#0]          ;9023  ; UB20
005b20  eba8080a          SUB      r8,r8,r10             ;9023
005b24  eba20a08          SUB      r10,r2,r8             ;9023
005b28  45e2              CMP      r10,r12               ;9023
005b2a  dd73              BLE      |L1.23572|
005b2c  f04f0218          MOV      r2,#0x18              ;9025
005b30  f884202d          STRB     r2,[r4,#0x2d]         ;9025
005b34  2900              CMP      r1,#0                 ;9026
005b36  da10              BGE      |L1.23386|
005b38  f04f0119          MOV      r1,#0x19              ;9028
005b3c  f884102d          STRB     r1,[r4,#0x2d]         ;9028
005b40  f8b41072          LDRH     r1,[r4,#0x72]         ;9029  ; cntrl_stat_blok_cnt
005b44  b121              CBZ      r1,|L1.23376|
005b46  f1000001          ADD      r0,r0,#1              ;9029
005b4a  f8a40046          STRH     r0,[r4,#0x46]         ;9029
005b4e  e0e6              B        |L1.23838|
                  |L1.23376|
005b50  f100000a          ADD      r0,r0,#0xa            ;9030
005b54  f8a40046          STRH     r0,[r4,#0x46]         ;9030
005b58  e0e1              B        |L1.23838|
                  |L1.23386|
005b5a  eb030283          ADD      r2,r3,r3,LSL #2       ;9032
005b5e  428a              CMP      r2,r1                 ;9032
005b60  dd10              BLE      |L1.23428|
005b62  f04f011a          MOV      r1,#0x1a              ;9034
005b66  f884102d          STRB     r1,[r4,#0x2d]         ;9034
005b6a  f8b41072          LDRH     r1,[r4,#0x72]         ;9035  ; cntrl_stat_blok_cnt
005b6e  b121              CBZ      r1,|L1.23418|
005b70  f1000001          ADD      r0,r0,#1              ;9035
005b74  f8a40046          STRH     r0,[r4,#0x46]         ;9035
005b78  e0d1              B        |L1.23838|
                  |L1.23418|
005b7a  f1000002          ADD      r0,r0,#2              ;9036
005b7e  f8a40046          STRH     r0,[r4,#0x46]         ;9036
005b82  e0cc              B        |L1.23838|
                  |L1.23428|
005b84  ebb10f42          CMP      r1,r2,LSL #1          ;9038
005b88  da07              BGE      |L1.23450|
005b8a  f04f011b          MOV      r1,#0x1b              ;9040
005b8e  f884102d          STRB     r1,[r4,#0x2d]         ;9040
005b92  f1000001          ADD      r0,r0,#1              ;9041
005b96  f8a40046          STRH     r0,[r4,#0x46]         ;9041
                  |L1.23450|
005b9a  e0c0              B        |L1.23838|
                  |L1.23452|
                          DCD      u_necc_dn
                  |L1.23456|
                          DCD      u_necc_up
                  |L1.23460|
                          DCD      ||area_number.25||
                  |L1.23464|
                          DCD      Isumm
                  |L1.23468|
                          DCD      Isumm_
                  |L1.23472|
                          DCD      bat
                  |L1.23476|
                          DCD      IMAX
                  |L1.23480|
                          DCD      IMIN
                  |L1.23484|
                          DCD      num_necc
                  |L1.23488|
                          DCD      PAR
                  |L1.23492|
                          DCD      NUMIST
                  |L1.23496|
                          DCD      IZMAX
                  |L1.23500|
                          DCD      speedChIsOn
                  |L1.23504|
                          DCD      sp_ch_stat
                  |L1.23508|
                          DCD      speedChrgCurr
                  |L1.23512|
                          DCD      UZ_IMAX
                  |L1.23516|
                          DCD      FZ_IMAX1
                  |L1.23520|
                          DCD      FZ_IMAX2
                  |L1.23524|
                          DCD      REG_SPEED
                  |L1.23528|
                          DCD      bps_U
                  |L1.23532|
                          DCD      u_necc
                  |L1.23536|
                          DCD      bps
                  |L1.23540|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.23544|
                          DCD      mess_data
                  |L1.23548|
                          DCD      load_U
                  |L1.23552|
                          DCD      USIGN
                  |L1.23556|
                          DCD      bIBAT_SMKLBR
                  |L1.23560|
                          DCD      UB0
                  |L1.23564|
                          DCD      UB20
                  |L1.23568|
005c10  e042              B        |L1.23704|
005c12  e7ff              B        |L1.23572|
                  |L1.23572|
005c14  ea4f7ae8          ASR      r10,r8,#31            ;9044
005c18  eb08789a          ADD      r8,r8,r10,LSR #30     ;9044
005c1c  eba208a8          SUB      r8,r2,r8,ASR #2       ;9044
005c20  45e0              CMP      r8,r12                ;9044
005c22  dd24              BLE      |L1.23662|
005c24  f04f021c          MOV      r2,#0x1c              ;9046
005c28  f884202d          STRB     r2,[r4,#0x2d]         ;9046
005c2c  eb030283          ADD      r2,r3,r3,LSL #2       ;9047
005c30  428a              CMP      r2,r1                 ;9047
005c32  dd10              BLE      |L1.23638|
005c34  f04f011d          MOV      r1,#0x1d              ;9049
005c38  f884102d          STRB     r1,[r4,#0x2d]         ;9049
005c3c  f8b41072          LDRH     r1,[r4,#0x72]         ;9050  ; cntrl_stat_blok_cnt
005c40  b121              CBZ      r1,|L1.23628|
005c42  f1000001          ADD      r0,r0,#1              ;9050
005c46  f8a40046          STRH     r0,[r4,#0x46]         ;9050
005c4a  e068              B        |L1.23838|
                  |L1.23628|
005c4c  f1000002          ADD      r0,r0,#2              ;9051
005c50  f8a40046          STRH     r0,[r4,#0x46]         ;9051
005c54  e063              B        |L1.23838|
                  |L1.23638|
005c56  ebb10f42          CMP      r1,r2,LSL #1          ;9053
005c5a  da60              BGE      |L1.23838|
005c5c  f04f011e          MOV      r1,#0x1e              ;9055
005c60  f884102d          STRB     r1,[r4,#0x2d]         ;9055
005c64  f1000001          ADD      r0,r0,#1              ;9056
005c68  f8a40046          STRH     r0,[r4,#0x46]         ;9056
005c6c  e057              B        |L1.23838|
                  |L1.23662|
005c6e  1e52              SUBS     r2,r2,#1              ;9059
005c70  4594              CMP      r12,r2                ;9059
005c72  da54              BGE      |L1.23838|
005c74  f04f021f          MOV      r2,#0x1f              ;9061
005c78  f884202d          STRB     r2,[r4,#0x2d]         ;9061
005c7c  eb030283          ADD      r2,r3,r3,LSL #2       ;9062
005c80  ebb10f42          CMP      r1,r2,LSL #1          ;9062
005c84  da4b              BGE      |L1.23838|
005c86  f04f0120          MOV      r1,#0x20              ;9064
005c8a  f884102d          STRB     r1,[r4,#0x2d]         ;9064
005c8e  f1000001          ADD      r0,r0,#1              ;9065
005c92  f8a40046          STRH     r0,[r4,#0x46]         ;9065
005c96  e042              B        |L1.23838|
                  |L1.23704|
005c98  dd41              BLE      |L1.23838|
005c9a  f04f0121          MOV      r1,#0x21              ;9071
005c9e  f884102d          STRB     r1,[r4,#0x2d]         ;9071
005ca2  f9b81000          LDRSH    r1,[r8,#0]            ;9072  ; UB0
005ca6  f9bb3000          LDRSH    r3,[r11,#0]           ;9072  ; UB20
005caa  eba10103          SUB      r1,r1,r3              ;9072
005cae  eb010302          ADD      r3,r1,r2              ;9072
005cb2  4563              CMP      r3,r12                ;9072
005cb4  da10              BGE      |L1.23768|
005cb6  f04f0122          MOV      r1,#0x22              ;9074
005cba  f884102d          STRB     r1,[r4,#0x2d]         ;9074
005cbe  f8b41072          LDRH     r1,[r4,#0x72]         ;9075  ; cntrl_stat_blok_cnt
005cc2  b121              CBZ      r1,|L1.23758|
005cc4  f1a00001          SUB      r0,r0,#1              ;9075
005cc8  f8a40046          STRH     r0,[r4,#0x46]         ;9075
005ccc  e027              B        |L1.23838|
                  |L1.23758|
005cce  f1a0000a          SUB      r0,r0,#0xa            ;9076
005cd2  f8a40046          STRH     r0,[r4,#0x46]         ;9076
005cd6  e022              B        |L1.23838|
                  |L1.23768|
005cd8  17cb              ASRS     r3,r1,#31             ;9078
005cda  eb017193          ADD      r1,r1,r3,LSR #30      ;9078
005cde  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9078
005ce2  4561              CMP      r1,r12                ;9078
005ce4  da10              BGE      |L1.23816|
005ce6  f04f0123          MOV      r1,#0x23              ;9080
005cea  f884102d          STRB     r1,[r4,#0x2d]         ;9080
005cee  f8b41072          LDRH     r1,[r4,#0x72]         ;9081  ; cntrl_stat_blok_cnt
005cf2  b121              CBZ      r1,|L1.23806|
005cf4  f1a00001          SUB      r0,r0,#1              ;9081
005cf8  f8a40046          STRH     r0,[r4,#0x46]         ;9081
005cfc  e00f              B        |L1.23838|
                  |L1.23806|
005cfe  f1a00002          SUB      r0,r0,#2              ;9082
005d02  f8a40046          STRH     r0,[r4,#0x46]         ;9082
005d06  e00a              B        |L1.23838|
                  |L1.23816|
005d08  1c52              ADDS     r2,r2,#1              ;9084
005d0a  4594              CMP      r12,r2                ;9084
005d0c  dd07              BLE      |L1.23838|
005d0e  f04f0124          MOV      r1,#0x24              ;9086
005d12  f884102d          STRB     r1,[r4,#0x2d]         ;9086
005d16  f1a00001          SUB      r0,r0,#1              ;9087
005d1a  f8a40046          STRH     r0,[r4,#0x46]         ;9087
                  |L1.23838|
005d1e  48ff              LDR      r0,|L1.24860|
005d20  7961              LDRB     r1,[r4,#5]            ;9091  ; vz1_stat
005d22  7800              LDRB     r0,[r0,#0]            ;9091  ; hv_vz_stat
005d24  4308              ORRS     r0,r0,r1              ;9091
005d26  79e1              LDRB     r1,[r4,#7]            ;9091  ; vz2_stat
005d28  4308              ORRS     r0,r0,r1              ;9091
005d2a  d10e              BNE      |L1.23882|
005d2c  48fc              LDR      r0,|L1.24864|
005d2e  7840              LDRB     r0,[r0,#1]            ;9093  ; sk_stat
005d30  2801              CMP      r0,#1                 ;9093
005d32  d10a              BNE      |L1.23882|
005d34  48fb              LDR      r0,|L1.24868|
005d36  7840              LDRB     r0,[r0,#1]            ;9093  ; sk_stat_old
005d38  b938              CBNZ     r0,|L1.23882|
005d3a  48fb              LDR      r0,|L1.24872|
005d3c  8800              LDRH     r0,[r0,#0]            ;9093  ; VZ_KIND
005d3e  2801              CMP      r0,#1                 ;9093
005d40  d103              BNE      |L1.23882|
005d42  f04f0032          MOV      r0,#0x32              ;9093
005d46  f8a40046          STRH     r0,[r4,#0x46]         ;9093
                  |L1.23882|
005d4a  f24032f2          MOV      r2,#0x3f2             ;9096
005d4e  210a              MOVS     r1,#0xa               ;9096
005d50  48f6              LDR      r0,|L1.24876|
005d52  f7fffffe          BL       gran
005d56  f8b40046          LDRH     r0,[r4,#0x46]         ;9097  ; cntrl_stat_new
005d5a  8660              STRH     r0,[r4,#0x32]         ;9097
005d5c  8620              STRH     r0,[r4,#0x30]         ;9098
005d5e  48f4              LDR      r0,|L1.24880|
005d60  f9b00000          LDRSH    r0,[r0,#0]            ;9100  ; ICA_EN
005d64  b938              CBNZ     r0,|L1.23926|
005d66  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
005d68  b129              CBZ      r1,|L1.23926|
;;;9103   			{
;;;9104   			cntrl_stat = ica_cntrl_hndl;
005d6a  49f2              LDR      r1,|L1.24884|
005d6c  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
005d6e  8621              STRH     r1,[r4,#0x30]
;;;9105   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
005d70  f8a41046          STRH     r1,[r4,#0x46]
;;;9106   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
005d74  8661              STRH     r1,[r4,#0x32]
                  |L1.23926|
;;;9107   			}
;;;9108   		}
;;;9109   	
;;;9110   	if((ICA_EN==1)||(ICA_EN==2))
005d76  2801              CMP      r0,#1
005d78  d001              BEQ      |L1.23934|
005d7a  2802              CMP      r0,#2
005d7c  d105              BNE      |L1.23946|
                  |L1.23934|
;;;9111   		{
;;;9112   		cntrl_stat=cntrl_stat_new+ica_u_necc;
005d7e  49ee              LDR      r1,|L1.24888|
005d80  f8b40046          LDRH     r0,[r4,#0x46]  ; cntrl_stat_new
005d84  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
005d86  4408              ADD      r0,r0,r1
005d88  8620              STRH     r0,[r4,#0x30]
                  |L1.23946|
;;;9113   		}			
;;;9114   	}
;;;9115   #else
;;;9116   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9117   	{
;;;9118   	cntrl_hndl_plazma=37;
;;;9119   	cntrl_stat_new=cntrl_stat_old;
;;;9120   	
;;;9121   	if((Ibmax/10)>(2*IZMAX_))
;;;9122   		{
;;;9123   		cntrl_hndl_plazma=38;
;;;9124             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9125   		else	cntrl_stat_new-=10;
;;;9126   		}		
;;;9127   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9128   		{
;;;9129   		cntrl_hndl_plazma=39;
;;;9130             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9131             else	cntrl_stat_new-=3;
;;;9132   		}   
;;;9133   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9134   		{
;;;9135   		cntrl_hndl_plazma=40;
;;;9136   		cntrl_stat_new--;
;;;9137   		}
;;;9138   		
;;;9139   	else if(load_U<u_necc)
;;;9140   		{
;;;9141   		cntrl_hndl_plazma=41;
;;;9142   		if(load_U<(u_necc-(UB0-UB20)))
;;;9143   			{
;;;9144   			cntrl_hndl_plazma=42;
;;;9145   			if(Ibmax<0)
;;;9146   				{
;;;9147   				cntrl_hndl_plazma=43;
;;;9148                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9149   				else cntrl_stat_new+=10;
;;;9150   				}
;;;9151   			else if(Ibmax<(IZMAX_*5))
;;;9152   				{
;;;9153   				cntrl_hndl_plazma=44;
;;;9154                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9155   				else	cntrl_stat_new+=2;
;;;9156   				}
;;;9157   			else if(Ibmax<((IZMAX_*95)/10))
;;;9158   				{
;;;9159   				cntrl_hndl_plazma=45;
;;;9160   				cntrl_stat_new++;
;;;9161   				}					
;;;9162   			}
;;;9163   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9164   			{
;;;9165   			cntrl_hndl_plazma=46;
;;;9166   			if(Ibmax<(IZMAX_*5))
;;;9167   				{
;;;9168   				cntrl_hndl_plazma=47;
;;;9169                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9170   				else	cntrl_stat_new+=2;
;;;9171   				}
;;;9172   			else if(Ibmax<((IZMAX_*95)/10))
;;;9173   				{
;;;9174   				cntrl_hndl_plazma=48;
;;;9175   				cntrl_stat_new++;
;;;9176   				}					
;;;9177   			}	
;;;9178   		else if(load_U<(u_necc-1))
;;;9179   			{
;;;9180   			cntrl_hndl_plazma=49;
;;;9181   			if(Ibmax<((IZMAX_*95)/10))
;;;9182   				{
;;;9183   				cntrl_hndl_plazma=50;
;;;9184   				cntrl_stat_new++;
;;;9185   				}					
;;;9186   			}					
;;;9187   		}	
;;;9188   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9189   		{
;;;9190   		cntrl_hndl_plazma=51;
;;;9191   		if(load_U>(u_necc+(UB0-UB20)))
;;;9192   			{
;;;9193   			cntrl_hndl_plazma=52;
;;;9194                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9195   			else	cntrl_stat_new-=10;
;;;9196   			}
;;;9197   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9198   			{
;;;9199   			cntrl_hndl_plazma=53;
;;;9200                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9201   			else cntrl_stat_new-=2;
;;;9202   			}	
;;;9203   		else if(load_U>(u_necc+1))
;;;9204   			{
;;;9205   			cntrl_hndl_plazma=54;
;;;9206   			cntrl_stat_new--;
;;;9207   			}					
;;;9208   		}
;;;9209   
;;;9210   	gran(&cntrl_stat_new,10,1010);			
;;;9211   	cntrl_stat_old=cntrl_stat_new;
;;;9212   	cntrl_stat=cntrl_stat_new;	
;;;9213   	}
;;;9214   #endif
;;;9215   
;;;9216   iiii=0;
005d8a  7625              STRB     r5,[r4,#0x18]
;;;9217   for(i=0;i<NUMIST;i++)
005d8c  75e5              STRB     r5,[r4,#0x17]
005d8e  48eb              LDR      r0,|L1.24892|
005d90  f9b01000          LDRSH    r1,[r0,#0]
005d94  e00c              B        |L1.23984|
                  |L1.23958|
;;;9218        {
;;;9219        if(bps[i]._cnt<30)iiii=1;
005d96  ebc002c0          RSB      r2,r0,r0,LSL #3
005d9a  eb021200          ADD      r2,r2,r0,LSL #4
005d9e  eb090282          ADD      r2,r9,r2,LSL #2
005da2  78d2              LDRB     r2,[r2,#3]
005da4  2a1e              CMP      r2,#0x1e
005da6  d200              BCS      |L1.23978|
005da8  7626              STRB     r6,[r4,#0x18]
                  |L1.23978|
005daa  f1000001          ADD      r0,r0,#1              ;9217
005dae  75e0              STRB     r0,[r4,#0x17]         ;9217
                  |L1.23984|
005db0  7de0              LDRB     r0,[r4,#0x17]         ;9217  ; i
005db2  4288              CMP      r0,r1                 ;9217
005db4  dbef              BLT      |L1.23958|
;;;9220        }
;;;9221   
;;;9222   if(iiii==0)
005db6  7e20              LDRB     r0,[r4,#0x18]  ; iiii
005db8  b948              CBNZ     r0,|L1.24014|
;;;9223   	{
;;;9224   	cntrl_stat=600;	
;;;9225   	cntrl_stat_old=600;
;;;9226   	cntrl_stat_new=600;
;;;9227   	cntrl_stat=10*PWM_START;
005dba  48e1              LDR      r0,|L1.24896|
005dbc  8800              LDRH     r0,[r0,#0]  ; PWM_START
005dbe  eb000080          ADD      r0,r0,r0,LSL #2
005dc2  ea4f0040          LSL      r0,r0,#1
005dc6  8620              STRH     r0,[r4,#0x30]
;;;9228   	cntrl_stat_old=10*PWM_START;
005dc8  8660              STRH     r0,[r4,#0x32]
;;;9229   	cntrl_stat_new=10*PWM_START;
005dca  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.24014|
;;;9230   	}
;;;9231   
;;;9232   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9233   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
005dce  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
005dd2  b110              CBZ      r0,|L1.24026|
005dd4  f1a00001          SUB      r0,r0,#1
005dd8  8038              STRH     r0,[r7,#0]
                  |L1.24026|
;;;9234   
;;;9235   
;;;9236   
;;;9237   #endif
;;;9238   
;;;9239   
;;;9240   gran(&cntrl_stat,10,1010); 
005dda  48d4              LDR      r0,|L1.24876|
005ddc  f24032f2          MOV      r2,#0x3f2
005de0  210a              MOVS     r1,#0xa
005de2  3816              SUBS     r0,r0,#0x16
005de4  f7fffffe          BL       gran
;;;9241   b1Hz_ch=0;
005de8  75a5              STRB     r5,[r4,#0x16]
                  |L1.24042|
;;;9242   }
005dea  e8bd9ff0          POP      {r4-r12,pc}
;;;9243   #endif
                          ENDP

                  ext_drv PROC
;;;9732   //-----------------------------------------------
;;;9733   void ext_drv(void)
005dee  e92d5ff0          PUSH     {r4-r12,lr}
;;;9734   {
;;;9735   char i;
;;;9736   
;;;9737   
;;;9738   for(i=0;i<NUMSK;i++)
005df2  f04f0000          MOV      r0,#0
005df6  4ad4              LDR      r2,|L1.24904|
;;;9739   	{
;;;9740   	#ifdef UKU_MGTS
;;;9741   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9742   	#endif
;;;9743   	#ifdef UKU_RSTKM
;;;9744   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9745   	#endif
;;;9746   	#ifdef UKU_3U
;;;9747   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;9748   	#endif
;;;9749   	#ifdef UKU_GLONASS
;;;9750   	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;9751   	#endif
;;;9752   	#ifdef UKU_KONTUR
;;;9753   	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;9754   	#endif
;;;9755   	#ifdef UKU_6U
;;;9756   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9757   	#endif
;;;9758   	#ifdef UKU_220
;;;9759   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9760   	#endif
;;;9761   	#ifdef UKU_220_V2
;;;9762   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9763   	#endif
;;;9764   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9765   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9766   	#endif
;;;9767   	#ifdef UKU_TELECORE2015	
;;;9768   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9769   	#endif
;;;9770   	#ifdef UKU_TELECORE2017
;;;9771   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9772   	#endif
;;;9773   	#ifdef IPS_SGEP_GAZPROM
;;;9774   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9775   	#endif		
;;;9776   		{
;;;9777   		if(sk_cnt[i]<10)
005df8  4bd2              LDR      r3,|L1.24900|
;;;9778   			{
;;;9779   			sk_cnt[i]++;
;;;9780   			if(sk_cnt[i]>=10)
;;;9781   				{
;;;9782   				sk_stat[i]=ssON;
005dfa  4dc9              LDR      r5,|L1.24864|
005dfc  f04f0a01          MOV      r10,#1
;;;9783   				}
;;;9784   			}
;;;9785   		else 
;;;9786   			{
;;;9787   			sk_cnt[i]=10;
005e00  f04f0b0a          MOV      r11,#0xa
005e04  4606              MOV      r6,r0                 ;9738
005e06  f9b24000          LDRSH    r4,[r2,#0]            ;9738
005e0a  e025              B        |L1.24152|
                  |L1.24076|
005e0c  49cf              LDR      r1,|L1.24908|
005e0e  4fd0              LDR      r7,|L1.24912|
005e10  5c09              LDRB     r1,[r1,r0]            ;9765
005e12  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;9765
005e16  f5b16ffa          CMP      r1,#0x7d0             ;9765
005e1a  da0e              BGE      |L1.24122|
005e1c  5619              LDRSB    r1,[r3,r0]            ;9777
005e1e  290a              CMP      r1,#0xa               ;9777
005e20  da08              BGE      |L1.24116|
005e22  f1010101          ADD      r1,r1,#1              ;9779
005e26  b249              SXTB     r1,r1                 ;9779
005e28  5419              STRB     r1,[r3,r0]            ;9779
005e2a  290a              CMP      r1,#0xa               ;9780
005e2c  db11              BLT      |L1.24146|
005e2e  f805a000          STRB     r10,[r5,r0]           ;9782
005e32  e00e              B        |L1.24146|
                  |L1.24116|
005e34  f803b000          STRB     r11,[r3,r0]
005e38  e00b              B        |L1.24146|
                  |L1.24122|
;;;9788   			}
;;;9789                  
;;;9790   		}
;;;9791   	else
;;;9792   		{
;;;9793   		if(sk_cnt[i]>0)
005e3a  5619              LDRSB    r1,[r3,r0]
005e3c  2900              CMP      r1,#0
005e3e  dd07              BLE      |L1.24144|
;;;9794   			{
;;;9795   			sk_cnt[i]--;
005e40  f1a10101          SUB      r1,r1,#1
005e44  b249              SXTB     r1,r1
005e46  5419              STRB     r1,[r3,r0]
;;;9796   			if(sk_cnt[i]<=0)
005e48  2900              CMP      r1,#0
005e4a  dc02              BGT      |L1.24146|
;;;9797   				{
;;;9798   				sk_stat[i]=ssOFF;
005e4c  542e              STRB     r6,[r5,r0]
005e4e  e000              B        |L1.24146|
                  |L1.24144|
;;;9799   				}
;;;9800   			}
;;;9801   		else 
;;;9802   			{
;;;9803   			sk_cnt[i]=0;
005e50  541e              STRB     r6,[r3,r0]
                  |L1.24146|
005e52  f1000001          ADD      r0,r0,#1              ;9738
005e56  b2c0              UXTB     r0,r0                 ;9738
                  |L1.24152|
005e58  42a0              CMP      r0,r4                 ;9738
005e5a  dbd7              BLT      |L1.24076|
;;;9804   			}
;;;9805   		}
;;;9806   	}
;;;9807   
;;;9808   for(i=0;i<NUMSK;i++)
005e5c  f04f0400          MOV      r4,#0
;;;9809   	{
;;;9810   	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;9811   		{
;;;9812   		if(sk_av_cnt[i]<10)
005e60  f8df92f0          LDR      r9,|L1.24916|
;;;9813   			{
;;;9814   			sk_av_cnt[i]++;
;;;9815   			if(sk_av_cnt[i]>=10)
;;;9816   				{
;;;9817   				sk_av_stat[i]=sasON;
005e64  4fbc              LDR      r7,|L1.24920|
;;;9818   				}
;;;9819   			}
;;;9820   		else 
;;;9821   			{
;;;9822   			sk_av_cnt[i]=10;
;;;9823   			}
;;;9824   		}
;;;9825   	else
;;;9826   		{
;;;9827   		if(sk_av_cnt[i]>=0)
;;;9828   			{
;;;9829   			sk_av_cnt[i]--;
;;;9830   			if(sk_av_cnt[i]<=0)
;;;9831   				{
;;;9832   				sk_av_stat[i]=sasOFF;
;;;9833   				}
;;;9834   			}
;;;9835   		else 
;;;9836   			{
;;;9837   			sk_av_cnt[i]=0;
;;;9838   			}
;;;9839   		}
;;;9840   
;;;9841   #ifndef UKU_KONTUR
;;;9842   	if(sk_av_stat_old[i]!=sk_av_stat[i])
005e66  f8df82f4          LDR      r8,|L1.24924|
005e6a  e083              B        |L1.24436|
                  |L1.24172|
005e6c  48bc              LDR      r0,|L1.24928|
005e6e  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;9810
005e72  b910              CBNZ     r0,|L1.24186|
005e74  5d29              LDRB     r1,[r5,r4]            ;9810
005e76  2901              CMP      r1,#1                 ;9810
005e78  d00f              BEQ      |L1.24218|
                  |L1.24186|
005e7a  b108              CBZ      r0,|L1.24192|
005e7c  5d28              LDRB     r0,[r5,r4]            ;9810
005e7e  b160              CBZ      r0,|L1.24218|
                  |L1.24192|
005e80  f9190004          LDRSB    r0,[r9,r4]            ;9827
005e84  2800              CMP      r0,#0                 ;9827
005e86  db19              BLT      |L1.24252|
005e88  f1a00001          SUB      r0,r0,#1              ;9829
005e8c  b240              SXTB     r0,r0                 ;9829
005e8e  f8090004          STRB     r0,[r9,r4]            ;9829
005e92  2800              CMP      r0,#0                 ;9830
005e94  dc14              BGT      |L1.24256|
005e96  553e              STRB     r6,[r7,r4]            ;9832
005e98  e012              B        |L1.24256|
                  |L1.24218|
005e9a  f9190004          LDRSB    r0,[r9,r4]            ;9812
005e9e  280a              CMP      r0,#0xa               ;9812
005ea0  da09              BGE      |L1.24246|
005ea2  f1000001          ADD      r0,r0,#1              ;9814
005ea6  b240              SXTB     r0,r0                 ;9814
005ea8  f8090004          STRB     r0,[r9,r4]            ;9814
005eac  280a              CMP      r0,#0xa               ;9815
005eae  db07              BLT      |L1.24256|
005eb0  f807a004          STRB     r10,[r7,r4]           ;9817
005eb4  e004              B        |L1.24256|
                  |L1.24246|
005eb6  f809b004          STRB     r11,[r9,r4]           ;9822
005eba  e001              B        |L1.24256|
                  |L1.24252|
005ebc  f8096004          STRB     r6,[r9,r4]            ;9837
                  |L1.24256|
005ec0  f8181004          LDRB     r1,[r8,r4]
005ec4  5d38              LDRB     r0,[r7,r4]
005ec6  4281              CMP      r1,r0
005ec8  d04e              BEQ      |L1.24424|
;;;9843   		{
;;;9844   		plazma_sk++;
005eca  4a98              LDR      r2,|L1.24876|
005ecc  1e92              SUBS     r2,r2,#2
005ece  8811              LDRH     r1,[r2,#0]  ; plazma_sk
005ed0  f1010101          ADD      r1,r1,#1
005ed4  8011              STRH     r1,[r2,#0]
;;;9845   		if(sk_av_stat[i]==sasON)
005ed6  2801              CMP      r0,#1
005ed8  d007              BEQ      |L1.24298|
;;;9846   			{
;;;9847   			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;9848   			else if(i==1)
;;;9849   				{
;;;9850   				#ifndef UKU_TELEKORE2017
;;;9851   				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;9852   				#endif
;;;9853   				#ifdef UKU_TELEKORE2017
;;;9854   				snmp_trap_send("Door open",15,2,1);
;;;9855   				#endif
;;;9856   				}
;;;9857   			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;9858   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9859   			}
;;;9860   		else 
;;;9861   			{
;;;9862   			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
005eda  b354              CBZ      r4,|L1.24370|
;;;9863   			else if(i==1)
005edc  2c01              CMP      r4,#1
005ede  d02f              BEQ      |L1.24384|
;;;9864   				{
;;;9865   				#ifndef UKU_TELEKORE2017
;;;9866   				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;9867   				#endif
;;;9868   				#ifdef UKU_TELEKORE2017
;;;9869   				snmp_trap_send("Door open clear",15,2,0);
;;;9870   				#endif
;;;9871   				}
;;;9872   			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
005ee0  2c02              CMP      r4,#2
005ee2  d034              BEQ      |L1.24398|
;;;9873   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
005ee4  2c03              CMP      r4,#3
005ee6  d039              BEQ      |L1.24412|
005ee8  e03e              B        |L1.24424|
                  |L1.24298|
005eea  b134              CBZ      r4,|L1.24314|
005eec  2c01              CMP      r4,#1                 ;9848
005eee  d00b              BEQ      |L1.24328|
005ef0  2c02              CMP      r4,#2                 ;9857
005ef2  d010              BEQ      |L1.24342|
005ef4  2c03              CMP      r4,#3                 ;9858
005ef6  d015              BEQ      |L1.24356|
005ef8  e036              B        |L1.24424|
                  |L1.24314|
005efa  2301              MOVS     r3,#1                 ;9847
005efc  461a              MOV      r2,r3                 ;9847
005efe  210f              MOVS     r1,#0xf               ;9847
005f00  a098              ADR      r0,|L1.24932|
005f02  f7fffffe          BL       snmp_trap_send
005f06  e02f              B        |L1.24424|
                  |L1.24328|
005f08  2301              MOVS     r3,#1                 ;9851
005f0a  2202              MOVS     r2,#2                 ;9851
005f0c  210f              MOVS     r1,#0xf               ;9851
005f0e  a098              ADR      r0,|L1.24944|
005f10  f7fffffe          BL       snmp_trap_send
005f14  e028              B        |L1.24424|
                  |L1.24342|
005f16  2301              MOVS     r3,#1                 ;9857
005f18  2203              MOVS     r2,#3                 ;9857
005f1a  210f              MOVS     r1,#0xf               ;9857
005f1c  a097              ADR      r0,|L1.24956|
005f1e  f7fffffe          BL       snmp_trap_send
005f22  e021              B        |L1.24424|
                  |L1.24356|
005f24  2301              MOVS     r3,#1                 ;9858
005f26  2204              MOVS     r2,#4                 ;9858
005f28  210f              MOVS     r1,#0xf               ;9858
005f2a  a097              ADR      r0,|L1.24968|
005f2c  f7fffffe          BL       snmp_trap_send
005f30  e01a              B        |L1.24424|
                  |L1.24370|
005f32  2300              MOVS     r3,#0                 ;9862
005f34  2201              MOVS     r2,#1                 ;9862
005f36  210f              MOVS     r1,#0xf               ;9862
005f38  a096              ADR      r0,|L1.24980|
005f3a  f7fffffe          BL       snmp_trap_send
005f3e  e013              B        |L1.24424|
                  |L1.24384|
005f40  2300              MOVS     r3,#0                 ;9866
005f42  2202              MOVS     r2,#2                 ;9866
005f44  210f              MOVS     r1,#0xf               ;9866
005f46  a098              ADR      r0,|L1.25000|
005f48  f7fffffe          BL       snmp_trap_send
005f4c  e00c              B        |L1.24424|
                  |L1.24398|
005f4e  2300              MOVS     r3,#0                 ;9872
005f50  2203              MOVS     r2,#3                 ;9872
005f52  210f              MOVS     r1,#0xf               ;9872
005f54  a099              ADR      r0,|L1.25020|
005f56  f7fffffe          BL       snmp_trap_send
005f5a  e005              B        |L1.24424|
                  |L1.24412|
005f5c  2300              MOVS     r3,#0
005f5e  2204              MOVS     r2,#4
005f60  210f              MOVS     r1,#0xf
005f62  a09b              ADR      r0,|L1.25040|
005f64  f7fffffe          BL       snmp_trap_send
                  |L1.24424|
;;;9874   			}
;;;9875   	 	}
;;;9876   #endif
;;;9877   
;;;9878   #ifdef UKU_KONTUR
;;;9879   	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;9880   		{
;;;9881   		plazma_sk++;
;;;9882   		if(sk_av_stat[i]==sasON)
;;;9883   			{
;;;9884   			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;9885   			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;9886   			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;9887   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9888   			}
;;;9889   		else 
;;;9890   			{
;;;9891   			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;9892   			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;9893   			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;9894   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;9895   			}
;;;9896   	 	}
;;;9897   #endif
;;;9898   	sk_av_stat_old[i]=sk_av_stat[i];
005f68  5d38              LDRB     r0,[r7,r4]
005f6a  f8080004          STRB     r0,[r8,r4]
005f6e  f1040401          ADD      r4,r4,#1              ;9808
005f72  b2e4              UXTB     r4,r4                 ;9808
                  |L1.24436|
005f74  4874              LDR      r0,|L1.24904|
005f76  f9b00000          LDRSH    r0,[r0,#0]            ;9808  ; NUMSK
005f7a  4284              CMP      r4,r0                 ;9808
005f7c  f6ffaf76          BLT      |L1.24172|
;;;9899   	}
;;;9900   }
005f80  e733              B        |L1.24042|
;;;9901   
                          ENDP

                  zar_superviser_start PROC
;;;9938   //-----------------------------------------------
;;;9939   void zar_superviser_start(void)
005f82  4a98              LDR      r2,|L1.25060|
;;;9940   {
;;;9941   sign_U[0]=1;
005f84  f04f0001          MOV      r0,#1
005f88  7010              STRB     r0,[r2,#0]
;;;9942   sign_I[0]=1;
005f8a  4997              LDR      r1,|L1.25064|
005f8c  7008              STRB     r0,[r1,#0]
;;;9943   sign_U[1]=1;
005f8e  7050              STRB     r0,[r2,#1]
;;;9944   sign_I[1]=1;
005f90  7048              STRB     r0,[r1,#1]
;;;9945   
;;;9946   }
005f92  4770              BX       lr
;;;9947   
                          ENDP

                  zar_superviser_drv PROC
;;;9903   //-----------------------------------------------
;;;9904   void zar_superviser_drv(void)
005f94  e92d5ff0          PUSH     {r4-r12,lr}
;;;9905   {
;;;9906   
;;;9907   if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
005f98  4895              LDR      r0,|L1.25072|
005f9a  f8df9258          LDR      r9,|L1.25076|
005f9e  f8df824c          LDR      r8,|L1.25068|
005fa2  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
005fa6  f9b90000          LDRSH    r0,[r9,#0]
005faa  4c60              LDR      r4,|L1.24876|
005fac  ebc01100          RSB      r1,r0,r0,LSL #4
005fb0  3c46              SUBS     r4,r4,#0x46
005fb2  f9b87002          LDRSH    r7,[r8,#2]  ; bat
005fb6  f06f0a1d          MVN      r10,#0x1d
005fba  f06f0b95          MVN      r11,#0x95
005fbe  2500              MOVS     r5,#0
005fc0  4e88              LDR      r6,|L1.25060|
005fc2  f9b40050          LDRSH    r0,[r4,#0x50]
005fc6  eb0a0281          ADD      r2,r10,r1,LSL #2
005fca  eb0b0381          ADD      r3,r11,r1,LSL #2
005fce  4567              CMP      r7,r12
005fd0  dc05              BGT      |L1.24542|
005fd2  f8dfc224          LDR      r12,|L1.25080|
005fd6  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
005fda  4567              CMP      r7,r12
005fdc  da04              BGE      |L1.24552|
                  |L1.24542|
005fde  4282              CMP      r2,r0
005fe0  dd02              BLE      |L1.24552|
005fe2  4283              CMP      r3,r0
005fe4  da00              BGE      |L1.24552|
005fe6  7035              STRB     r5,[r6,#0]
                  |L1.24552|
;;;9908   
;;;9909   if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
005fe8  4f84              LDR      r7,|L1.25084|
005fea  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
005fee  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
005ff2  4f7d              LDR      r7,|L1.25064|
005ff4  ebbc0f4e          CMP      r12,lr,LSL #1
005ff8  dc04              BGT      |L1.24580|
005ffa  f1ce0e00          RSB      lr,lr,#0
005ffe  ebbc0f4e          CMP      r12,lr,LSL #1
006002  da04              BGE      |L1.24590|
                  |L1.24580|
006004  4282              CMP      r2,r0
006006  dd02              BLE      |L1.24590|
006008  4283              CMP      r3,r0
00600a  da00              BGE      |L1.24590|
00600c  703d              STRB     r5,[r7,#0]
                  |L1.24590|
;;;9910   																 
;;;9911   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00600e  f06f0209          MVN      r2,#9
006012  eb020181          ADD      r1,r2,r1,LSL #2
006016  4281              CMP      r1,r0
006018  d121              BNE      |L1.24670|
00601a  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
00601e  b9f0              CBNZ     r0,|L1.24670|
;;;9912   	{
;;;9913   	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
006020  7830              LDRB     r0,[r6,#0]  ; sign_U
006022  2801              CMP      r0,#1
006024  d11b              BNE      |L1.24670|
006026  7838              LDRB     r0,[r7,#0]  ; sign_I
006028  2801              CMP      r0,#1
00602a  d118              BNE      |L1.24670|
00602c  f44f70ef          MOV      r0,#0x1de
006030  f7fffffe          BL       lc640_read_int
006034  4972              LDR      r1,|L1.25088|
006036  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
00603a  4288              CMP      r0,r1
00603c  d00f              BEQ      |L1.24670|
00603e  4871              LDR      r0,|L1.25092|
006040  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006042  b160              CBZ      r0,|L1.24670|
006044  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006048  07c0              LSLS     r0,r0,#31
00604a  d108              BNE      |L1.24670|
;;;9914   		{
;;;9915   		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
00604c  f44f70ef          MOV      r0,#0x1de
006050  f7fffffe          BL       lc640_write_int
;;;9916   		superviser_cnt++;
006054  486c              LDR      r0,|L1.25096|
006056  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006058  f1010101          ADD      r1,r1,#1
00605c  7001              STRB     r1,[r0,#0]
                  |L1.24670|
;;;9917   		}
;;;9918   	
;;;9919   	}
;;;9920   
;;;9921   if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00605e  4864              LDR      r0,|L1.25072|
006060  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006064  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006068  4281              CMP      r1,r0
00606a  dc06              BGT      |L1.24698|
00606c  4862              LDR      r0,|L1.25080|
00606e  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
006072  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006076  4281              CMP      r1,r0
006078  da0e              BGE      |L1.24728|
                  |L1.24698|
00607a  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00607e  f9b41050          LDRSH    r1,[r4,#0x50]  ; main_kb_cnt
006082  ebc01000          RSB      r0,r0,r0,LSL #4
006086  eb0a0280          ADD      r2,r10,r0,LSL #2
00608a  428a              CMP      r2,r1
00608c  dd04              BLE      |L1.24728|
00608e  eb0b0080          ADD      r0,r11,r0,LSL #2
006092  4288              CMP      r0,r1
006094  da00              BGE      |L1.24728|
006096  7075              STRB     r5,[r6,#1]
                  |L1.24728|
;;;9922   
;;;9923   if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006098  4958              LDR      r1,|L1.25084|
00609a  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00609e  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0060a2  ebb00f41          CMP      r0,r1,LSL #1
0060a6  dc03              BGT      |L1.24752|
0060a8  4249              RSBS     r1,r1,#0
0060aa  ebb00f41          CMP      r0,r1,LSL #1
0060ae  da0e              BGE      |L1.24782|
                  |L1.24752|
0060b0  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0060b4  f9b41050          LDRSH    r1,[r4,#0x50]  ; main_kb_cnt
0060b8  ebc01000          RSB      r0,r0,r0,LSL #4
0060bc  eb0a0280          ADD      r2,r10,r0,LSL #2
0060c0  428a              CMP      r2,r1
0060c2  dd04              BLE      |L1.24782|
0060c4  eb0b0080          ADD      r0,r11,r0,LSL #2
0060c8  4288              CMP      r0,r1
0060ca  da00              BGE      |L1.24782|
0060cc  707d              STRB     r5,[r7,#1]
                  |L1.24782|
;;;9924   																 
;;;9925   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0060ce  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0060d2  ebc01100          RSB      r1,r0,r0,LSL #4
0060d6  f06f0009          MVN      r0,#9
0060da  eb000081          ADD      r0,r0,r1,LSL #2
0060de  f9b41050          LDRSH    r1,[r4,#0x50]  ; main_kb_cnt
0060e2  4288              CMP      r0,r1
0060e4  d119              BNE      |L1.24858|
0060e6  f8940022          LDRB     r0,[r4,#0x22]  ; spc_stat
0060ea  b9b0              CBNZ     r0,|L1.24858|
;;;9926   	{
;;;9927   	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0060ec  7870              LDRB     r0,[r6,#1]  ; sign_U
0060ee  2801              CMP      r0,#1
0060f0  d113              BNE      |L1.24858|
0060f2  7878              LDRB     r0,[r7,#1]  ; sign_I
0060f4  2801              CMP      r0,#1
0060f6  d110              BNE      |L1.24858|
0060f8  f44f75fe          MOV      r5,#0x1fc
0060fc  4628              MOV      r0,r5
0060fe  f7fffffe          BL       lc640_read_int
006102  493f              LDR      r1,|L1.25088|
006104  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
006108  4288              CMP      r0,r1
00610a  d006              BEQ      |L1.24858|
00610c  483d              LDR      r0,|L1.25092|
00610e  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006110  2802              CMP      r0,#2
006112  d102              BNE      |L1.24858|
006114  f8980089          LDRB     r0,[r8,#0x89]  ; bat
006118  e078              B        |L1.25100|
                  |L1.24858|
00611a  e081              B        |L1.25120|
                  |L1.24860|
                          DCD      hv_vz_stat
                  |L1.24864|
                          DCD      sk_stat
                  |L1.24868|
                          DCD      sk_stat_old
                  |L1.24872|
                          DCD      VZ_KIND
                  |L1.24876|
                          DCD      ||area_number.25||+0x46
                  |L1.24880|
                          DCD      ICA_EN
                  |L1.24884|
                          DCD      ica_cntrl_hndl
                  |L1.24888|
                          DCD      ica_u_necc
                  |L1.24892|
                          DCD      NUMIST
                  |L1.24896|
                          DCD      PWM_START
                  |L1.24900|
                          DCD      sk_cnt
                  |L1.24904|
                          DCD      NUMSK
                  |L1.24908|
                          DCD      ||area_number.19||
                  |L1.24912|
                          DCD      ||.bss||+0x40c
                  |L1.24916|
                          DCD      sk_av_cnt
                  |L1.24920|
                          DCD      sk_av_stat
                  |L1.24924|
                          DCD      sk_av_stat_old
                  |L1.24928|
                          DCD      SK_SIGN
                  |L1.24932|
006164  534b2023          DCB      "SK #1 Alarm",0
006168  3120416c
00616c  61726d00
                  |L1.24944|
006170  534b2023          DCB      "SK #2 Alarm",0
006174  3220416c
006178  61726d00
                  |L1.24956|
00617c  534b2023          DCB      "SK #3 Alarm",0
006180  3320416c
006184  61726d00
                  |L1.24968|
006188  534b2023          DCB      "SK #4 Alarm",0
00618c  3420416c
006190  61726d00
                  |L1.24980|
006194  534b2023          DCB      "SK #1 Alarm is off",0
006198  3120416c
00619c  61726d20
0061a0  6973206f
0061a4  666600  
0061a7  00                DCB      0
                  |L1.25000|
0061a8  534b2023          DCB      "SK #2 Alarm is off",0
0061ac  3220416c
0061b0  61726d20
0061b4  6973206f
0061b8  666600  
0061bb  00                DCB      0
                  |L1.25020|
0061bc  534b2023          DCB      "SK #3 Alarm is off",0
0061c0  3320416c
0061c4  61726d20
0061c8  6973206f
0061cc  666600  
0061cf  00                DCB      0
                  |L1.25040|
0061d0  534b2023          DCB      "SK #4 Alarm is off",0
0061d4  3420416c
0061d8  61726d20
0061dc  6973206f
0061e0  666600  
0061e3  00                DCB      0
                  |L1.25060|
                          DCD      sign_U
                  |L1.25064|
                          DCD      sign_I
                  |L1.25068|
                          DCD      bat
                  |L1.25072|
                          DCD      u_necc_up
                  |L1.25076|
                          DCD      TBAT
                  |L1.25080|
                          DCD      u_necc_dn
                  |L1.25084|
                          DCD      IKB
                  |L1.25088|
                          DCD      BAT_C_REAL
                  |L1.25092|
                          DCD      NUMBAT
                  |L1.25096|
                          DCD      superviser_cnt
                  |L1.25100|
00620c  07c0              LSLS     r0,r0,#31
00620e  d107              BNE      |L1.25120|
;;;9928   		{
;;;9929   		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
006210  4628              MOV      r0,r5
006212  f7fffffe          BL       lc640_write_int
;;;9930   		superviser_cnt++;
006216  48ff              LDR      r0,|L1.26132|
006218  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
00621a  f1010101          ADD      r1,r1,#1
00621e  7001              STRB     r1,[r0,#0]
                  |L1.25120|
;;;9931   		}
;;;9932   	
;;;9933   	}
;;;9934   
;;;9935   if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006220  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006224  f06f0101          MVN      r1,#1
006228  ebc01000          RSB      r0,r0,r0,LSL #4
00622c  eb010080          ADD      r0,r1,r0,LSL #2
006230  f9b41050          LDRSH    r1,[r4,#0x50]  ; main_kb_cnt
006234  4288              CMP      r0,r1
006236  d102              BNE      |L1.25150|
006238  e8bd5ff0          POP      {r4-r12,lr}
00623c  e7fe              B        zar_superviser_start
                  |L1.25150|
;;;9936   }
00623e  e5d4              B        |L1.24042|
;;;9937   
                          ENDP

                  npn_hndl PROC
;;;9948   //-----------------------------------------------
;;;9949   void npn_hndl(void)
006240  e92d03f0          PUSH     {r4-r9}
;;;9950   {
;;;9951   if(NPN_OUT!=npnoOFF)
006244  48f4              LDR      r0,|L1.26136|
;;;9952   	{
;;;9953   /*	if(NPN_SIGN==npnsAVNET)
;;;9954   		{
;;;9955   		if(net_av==1)
;;;9956   			{
;;;9957   			if(npn_tz_cnt<TZNPN)
;;;9958   				{
;;;9959   				npn_tz_cnt++;
;;;9960   				if(npn_tz_cnt==TZNPN)
;;;9961   					{
;;;9962   					npn_stat=npnsOFF;
;;;9963   					}
;;;9964   				}
;;;9965   			}
;;;9966   		else
;;;9967   			{
;;;9968   			if(npn_tz_cnt)
;;;9969   				{
;;;9970   				npn_tz_cnt--;
;;;9971   				if(npn_tz_cnt==0)
;;;9972   					{
;;;9973   					npn_stat=npnsON;
;;;9974   					}
;;;9975   				}
;;;9976   			}
;;;9977   		}*/
;;;9978   /*	if(NPN_SIGN==npnsULOAD)
;;;9979   		{
;;;9980   		if(load_U<UONPN)
;;;9981   			{
;;;9982   			if(npn_tz_cnt<TZNPN)
;;;9983   				{
;;;9984   				npn_tz_cnt++;
;;;9985   				if(npn_tz_cnt==TZNPN)
;;;9986   					{
;;;9987   					npn_stat=npnsOFF;
;;;9988   					}
;;;9989   				}
;;;9990   			}
;;;9991   		else if(load_U>UVNPN)
;;;9992   			{
;;;9993   			if(npn_tz_cnt)
;;;9994   				{
;;;9995   				npn_tz_cnt--;
;;;9996   				if(npn_tz_cnt==0)
;;;9997   					{
;;;9998   					npn_stat=npnsON;
;;;9999   					}
;;;10000  				}
;;;10001  			}
;;;10002  		}*/
;;;10003  
;;;10004  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10005  		{
;;;10006  		if(npn_tz_cnt<TZNPN)
006246  4ff5              LDR      r7,|L1.26140|
;;;10007  			{
;;;10008  			npn_tz_cnt++;
;;;10009  			if(npn_tz_cnt==TZNPN)
;;;10010  				{
;;;10011  				npn_stat=npnsOFF;
006248  4ef5              LDR      r6,|L1.26144|
00624a  7800              LDRB     r0,[r0,#0]            ;9951  ; NPN_OUT
00624c  f04f0c00          MOV      r12,#0                ;9951
;;;10012  				}
;;;10013  			}
;;;10014  		}
;;;10015  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10016  		{
;;;10017  		if(npn_tz_cnt)
;;;10018  			{
;;;10019  			npn_tz_cnt--;
;;;10020  			if(npn_tz_cnt==0)
;;;10021  				{
;;;10022  				npn_stat=npnsON;
006250  f04f0801          MOV      r8,#1
006254  b3e8              CBZ      r0,|L1.25298|
006256  48f3              LDR      r0,|L1.26148|
006258  4639              MOV      r1,r7                 ;10006
00625a  f9b05000          LDRSH    r5,[r0,#0]            ;10004  ; load_U
00625e  48f2              LDR      r0,|L1.26152|
006260  f9b11000          LDRSH    r1,[r1,#0]            ;10006
006264  f9b09000          LDRSH    r9,[r0,#0]            ;10004  ; UONPN
006268  48f0              LDR      r0,|L1.26156|
00626a  454d              CMP      r5,r9                 ;10004
00626c  f9b02000          LDRSH    r2,[r0,#0]            ;10004
006270  48ef              LDR      r0,|L1.26160|
006272  f9b03000          LDRSH    r3,[r0,#0]            ;10004
006276  48ef              LDR      r0,|L1.26164|
006278  f9b04000          LDRSH    r4,[r0,#0]            ;10004
00627c  48ee              LDR      r0,|L1.26168|
00627e  f9b00000          LDRSH    r0,[r0,#0]            ;10004
006282  da13              BGE      |L1.25260|
006284  4282              CMP      r2,r0                 ;10004
006286  db03              BLT      |L1.25232|
006288  4283              CMP      r3,r0                 ;10004
00628a  db01              BLT      |L1.25232|
00628c  4284              CMP      r4,r0                 ;10004
00628e  da0d              BGE      |L1.25260|
                  |L1.25232|
006290  48ea              LDR      r0,|L1.26172|
006292  f9b02000          LDRSH    r2,[r0,#0]            ;10006  ; TZNPN
006296  4291              CMP      r1,r2                 ;10006
006298  da23              BGE      |L1.25314|
00629a  f1010101          ADD      r1,r1,#1              ;10008
00629e  b208              SXTH     r0,r1                 ;10008
0062a0  8038              STRH     r0,[r7,#0]            ;10008
0062a2  4290              CMP      r0,r2                 ;10009
0062a4  d11d              BNE      |L1.25314|
0062a6  f886c000          STRB     r12,[r6,#0]           ;10011
0062aa  e01a              B        |L1.25314|
                  |L1.25260|
0062ac  f8dfc390          LDR      r12,|L1.26176|
0062b0  f9bcc000          LDRSH    r12,[r12,#0]          ;10015  ; UVNPN
0062b4  4565              CMP      r5,r12                ;10015
0062b6  dd14              BLE      |L1.25314|
0062b8  4282              CMP      r2,r0                 ;10015
0062ba  dd12              BLE      |L1.25314|
0062bc  4283              CMP      r3,r0                 ;10015
0062be  dd10              BLE      |L1.25314|
0062c0  4284              CMP      r4,r0                 ;10015
0062c2  dd0e              BLE      |L1.25314|
0062c4  b169              CBZ      r1,|L1.25314|
0062c6  f1a10101          SUB      r1,r1,#1              ;10019
0062ca  b208              SXTH     r0,r1                 ;10019
0062cc  8038              STRH     r0,[r7,#0]            ;10019
0062ce  b940              CBNZ     r0,|L1.25314|
0062d0  e000              B        |L1.25300|
                  |L1.25298|
0062d2  e002              B        |L1.25306|
                  |L1.25300|
0062d4  f8868000          STRB     r8,[r6,#0]
0062d8  e003              B        |L1.25314|
                  |L1.25306|
;;;10023  				}
;;;10024  			}
;;;10025  		}
;;;10026  	}
;;;10027  else
;;;10028  	{
;;;10029  	npn_tz_cnt=0;
0062da  f8a7c000          STRH     r12,[r7,#0]
;;;10030  	npn_stat=npnsON;
0062de  f8868000          STRB     r8,[r6,#0]
                  |L1.25314|
;;;10031  	}
;;;10032  
;;;10033  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0062e2  7830              LDRB     r0,[r6,#0]  ; npn_stat
0062e4  2800              CMP      r0,#0
0062e6  d107              BNE      |L1.25336|
0062e8  e8bd03f0          POP      {r4-r9}
0062ec  230f              MOVS     r3,#0xf
0062ee  2201              MOVS     r2,#1
0062f0  216e              MOVS     r1,#0x6e
0062f2  20d2              MOVS     r0,#0xd2
0062f4  f7ffbffe          B.W      mess_send
                  |L1.25336|
;;;10034  
;;;10035  
;;;10036  }
0062f8  e8bd03f0          POP      {r4-r9}
0062fc  4770              BX       lr
;;;10037  
                          ENDP

                  loadoff_hndl PROC
;;;10039  //-----------------------------------------------
;;;10040  void loadoff_hndl(void)
0062fe  b5f0              PUSH     {r4-r7,lr}
;;;10041  {
;;;10042  if((load_U>UONPN)||(load_U<UVNPN))
006300  48c8              LDR      r0,|L1.26148|
;;;10043  	{
;;;10044  	if(load_off_cnt<TZNPN)
006302  4dd0              LDR      r5,|L1.26180|
;;;10045  		{
;;;10046  		load_off_cnt++;
;;;10047  		if(load_off_cnt>=TZNPN)
;;;10048  			{
;;;10049  			load_off_stat=npnsOFF;
006304  2700              MOVS     r7,#0
006306  f9b01000          LDRSH    r1,[r0,#0]            ;10042  ; load_U
00630a  48c7              LDR      r0,|L1.26152|
00630c  4ece              LDR      r6,|L1.26184|
00630e  f9b02000          LDRSH    r2,[r0,#0]            ;10042  ; UONPN
006312  f9b50000          LDRSH    r0,[r5,#0]            ;10044
006316  4291              CMP      r1,r2                 ;10042
006318  dc04              BGT      |L1.25380|
00631a  4bc9              LDR      r3,|L1.26176|
00631c  f9b33000          LDRSH    r3,[r3,#0]            ;10042  ; UVNPN
006320  4299              CMP      r1,r3                 ;10042
006322  da0d              BGE      |L1.25408|
                  |L1.25380|
006324  49c5              LDR      r1,|L1.26172|
006326  f9b11000          LDRSH    r1,[r1,#0]            ;10044  ; TZNPN
00632a  4288              CMP      r0,r1                 ;10044
00632c  da1c              BGE      |L1.25448|
00632e  f1000001          ADD      r0,r0,#1              ;10046
006332  b200              SXTH     r0,r0                 ;10046
006334  8028              STRH     r0,[r5,#0]            ;10046
006336  4288              CMP      r0,r1                 ;10047
006338  db16              BLT      |L1.25448|
00633a  7037              STRB     r7,[r6,#0]
;;;10050  			load_off_cnt=TZNPN;
00633c  8029              STRH     r1,[r5,#0]
00633e  e013              B        |L1.25448|
                  |L1.25408|
;;;10051  			}
;;;10052  		}
;;;10053  	}
;;;10054  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
006340  4cc2              LDR      r4,|L1.26188|
006342  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
006346  4423              ADD      r3,r3,r4
006348  428b              CMP      r3,r1
00634a  da0d              BGE      |L1.25448|
00634c  1b12              SUBS     r2,r2,r4
00634e  428a              CMP      r2,r1
006350  dd0a              BLE      |L1.25448|
;;;10055  	{
;;;10056  	if(load_off_cnt)
006352  b148              CBZ      r0,|L1.25448|
;;;10057  		{
;;;10058  		load_off_cnt--;
006354  f1a00001          SUB      r0,r0,#1
006358  b200              SXTH     r0,r0
00635a  8028              STRH     r0,[r5,#0]
;;;10059  		if(load_off_cnt<=0)
00635c  2800              CMP      r0,#0
00635e  dc03              BGT      |L1.25448|
;;;10060  			{
;;;10061  			load_off_stat=npnsON;
006360  f04f0001          MOV      r0,#1
006364  7030              STRB     r0,[r6,#0]
;;;10062  			load_off_cnt=0;
006366  802f              STRH     r7,[r5,#0]
                  |L1.25448|
;;;10063  			}
;;;10064  		}
;;;10065  	}
;;;10066  
;;;10067  
;;;10068  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006368  7830              LDRB     r0,[r6,#0]  ; load_off_stat
00636a  2800              CMP      r0,#0
00636c  d103              BNE      |L1.25462|
00636e  49b8              LDR      r1,|L1.26192|
006370  f04f000a          MOV      r0,#0xa
006374  7008              STRB     r0,[r1,#0]
                  |L1.25462|
;;;10069  
;;;10070  
;;;10071  }
006376  bdf0              POP      {r4-r7,pc}
;;;10072  
                          ENDP

                  speedChargeStartStop PROC
;;;10260  //-----------------------------------------------
;;;10261  void speedChargeStartStop(void)
006378  b538              PUSH     {r3-r5,lr}
;;;10262  {
;;;10263  spch_plazma[1]++;
00637a  4cb6              LDR      r4,|L1.26196|
00637c  7860              LDRB     r0,[r4,#1]  ; spch_plazma
00637e  f1000001          ADD      r0,r0,#1
006382  7060              STRB     r0,[r4,#1]
;;;10264  /*if(speedChIsOn)
;;;10265  	{
;;;10266  	speedChIsOn=0;
;;;10267  	}
;;;10268  
;;;10269  else
;;;10270  	{
;;;10271  	if(speedChrgBlckStat==0)
;;;10272  		{
;;;10273  		speedChIsOn=1;
;;;10274  		speedChTimeCnt=0;
;;;10275  		}
;;;10276  	else
;;;10277  		{
;;;10278  		show_mess(	"     Ускоренный     ",
;;;10279  	          		"       заряд        ",
;;;10280  	          		"    заблокирован!   ",
;;;10281  	          		"                    ",2000);	 
;;;10282  		}
;;;10283  	}*/
;;;10284  
;;;10285  if(sp_ch_stat!=scsOFF)
006384  48b4              LDR      r0,|L1.26200|
006386  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006388  b151              CBZ      r1,|L1.25504|
;;;10286  	{
;;;10287  	sp_ch_stat=scsOFF;
00638a  f04f0100          MOV      r1,#0
00638e  7001              STRB     r1,[r0,#0]
;;;10288  	speedz_mem_hndl(10);
006390  f04f000a          MOV      r0,#0xa
006394  f7fffffe          BL       speedz_mem_hndl
;;;10289  	spch_plazma[1]=10;
006398  f04f000a          MOV      r0,#0xa
00639c  7060              STRB     r0,[r4,#1]
;;;10290  	}
;;;10291  
;;;10292  else
;;;10293  	{
;;;10294  	spch_plazma[1]=20;
;;;10295  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10296  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10297  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10298  		#endif
;;;10299  		)
;;;10300  		{
;;;10301  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10302  		sp_ch_stat=scsSTEP1;
;;;10303  		#else
;;;10304  		sp_ch_stat=scsWRK;
;;;10305  		#endif
;;;10306  		speedz_mem_hndl(1);
;;;10307  		}
;;;10308  	else 
;;;10309  		{
;;;10310  		show_mess(	"     Ускоренный     ",
;;;10311  	          		"       заряд        ",
;;;10312  	          		"    заблокирован!   ",
;;;10313  	          		"                    ",2000);
;;;10314  		}
;;;10315  	}
;;;10316  }
00639e  bd38              POP      {r3-r5,pc}
                  |L1.25504|
0063a0  f04f0114          MOV      r1,#0x14              ;10294
0063a4  7061              STRB     r1,[r4,#1]            ;10294
0063a6  49ad              LDR      r1,|L1.26204|
0063a8  f9b12000          LDRSH    r2,[r1,#0]            ;10295  ; speedChrgBlckStat
0063ac  49ac              LDR      r1,|L1.26208|
0063ae  f8913022          LDRB     r3,[r1,#0x22]         ;10295  ; spc_stat
0063b2  ea420203          ORR      r2,r2,r3              ;10295
0063b6  794b              LDRB     r3,[r1,#5]            ;10295  ; vz1_stat
0063b8  79c9              LDRB     r1,[r1,#7]            ;10295  ; vz2_stat
0063ba  ea420203          ORR      r2,r2,r3              ;10295
0063be  430a              ORRS     r2,r2,r1              ;10295
0063c0  d009              BEQ      |L1.25558|
0063c2  f44f60fa          MOV      r0,#0x7d0             ;10310
0063c6  9000              STR      r0,[sp,#0]            ;10310
0063c8  4ba6              LDR      r3,|L1.26212|
0063ca  a2a7              ADR      r2,|L1.26216|
0063cc  a1ac              ADR      r1,|L1.26240|
0063ce  a0b2              ADR      r0,|L1.26264|
0063d0  f7fffffe          BL       show_mess
0063d4  bd38              POP      {r3-r5,pc}
                  |L1.25558|
0063d6  f04f0101          MOV      r1,#1                 ;10302
0063da  7001              STRB     r1,[r0,#0]            ;10302
0063dc  e8bd4038          POP      {r3-r5,lr}            ;10306
0063e0  4608              MOV      r0,r1                 ;10306
0063e2  f7ffbffe          B.W      speedz_mem_hndl
;;;10317  
                          ENDP

                  speedChargeHndl PROC
;;;10073  //-----------------------------------------------
;;;10074  void speedChargeHndl(void)
0063e6  e92d4ff8          PUSH     {r3-r11,lr}
;;;10075  {
;;;10076  /*
;;;10077  if(sp_ch_stat==scsOFF)
;;;10078  	{
;;;10079  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10080  	}*/
;;;10081  	 
;;;10082  if(sp_ch_stat==scsSTEP1)
0063ea  4f9b              LDR      r7,|L1.26200|
;;;10083  	{
;;;10084  	if(sp_ch_stat_old!=sp_ch_stat)
0063ec  4eb2              LDR      r6,|L1.26296|
;;;10085  		{
;;;10086  		sp_ch_stat_cnt=5;
;;;10087  		if(SP_CH_VENT_BLOK==0)
0063ee  f8dfa2c0          LDR      r10,|L1.26288|
0063f2  7839              LDRB     r1,[r7,#0]            ;10082  ; sp_ch_stat
;;;10088  			{
;;;10089  			sp_ch_stat_cnt=0;
;;;10090  			sp_ch_stat=scsWRK;
;;;10091  			}
;;;10092  		}
;;;10093  	if(sp_ch_stat_cnt)
;;;10094  		{
;;;10095  		sp_ch_stat_cnt--;
;;;10096  		if(sp_ch_stat_cnt==0)
;;;10097  			{
;;;10098  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10099  
;;;10100  			}
;;;10101  		}
;;;10102  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0063f4  f8df92bc          LDR      r9,|L1.26292|
0063f8  7830              LDRB     r0,[r6,#0]            ;10084
0063fa  4cb0              LDR      r4,|L1.26300|
0063fc  2500              MOVS     r5,#0                 ;10087
0063fe  f04f0802          MOV      r8,#2                 ;10090
006402  2901              CMP      r1,#1                 ;10082
006404  d11b              BNE      |L1.25662|
006406  2801              CMP      r0,#1                 ;10084
006408  d008              BEQ      |L1.25628|
00640a  f04f0105          MOV      r1,#5                 ;10086
00640e  8021              STRH     r1,[r4,#0]            ;10086
006410  f8ba1000          LDRH     r1,[r10,#0]           ;10087  ; SP_CH_VENT_BLOK
006414  b911              CBNZ     r1,|L1.25628|
006416  8025              STRH     r5,[r4,#0]            ;10089
006418  f8878000          STRB     r8,[r7,#0]            ;10090
                  |L1.25628|
00641c  f9b41000          LDRSH    r1,[r4,#0]            ;10093  ; sp_ch_stat_cnt
006420  b139              CBZ      r1,|L1.25650|
006422  f1a10101          SUB      r1,r1,#1              ;10095
006426  b209              SXTH     r1,r1                 ;10095
006428  8021              STRH     r1,[r4,#0]            ;10095
00642a  b911              CBNZ     r1,|L1.25650|
00642c  f04f0103          MOV      r1,#3                 ;10098
006430  7039              STRB     r1,[r7,#0]            ;10098
                  |L1.25650|
006432  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
006436  2901              CMP      r1,#1
006438  d101              BNE      |L1.25662|
00643a  f8878000          STRB     r8,[r7,#0]
                  |L1.25662|
;;;10103  	}
;;;10104  
;;;10105  if(sp_ch_stat==scsWRK)
00643e  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006440  2902              CMP      r1,#2
006442  d123              BNE      |L1.25740|
;;;10106  	{
;;;10107  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10108  		{
;;;10109  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006444  4a9e              LDR      r2,|L1.26304|
;;;10110  		hv_vz_up_cnt=0;
006446  499f              LDR      r1,|L1.26308|
006448  2802              CMP      r0,#2                 ;10107
00644a  d008              BEQ      |L1.25694|
00644c  489e              LDR      r0,|L1.26312|
00644e  f44f6361          MOV      r3,#0xe10             ;10109
006452  f9b00000          LDRSH    r0,[r0,#0]            ;10109  ; speedChrgTimeInHour
006456  fb00f003          MUL      r0,r0,r3              ;10109
00645a  6010              STR      r0,[r2,#0]            ;10109  ; sp_ch_wrk_cnt
00645c  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.25694|
;;;10111  		}
;;;10112  	sp_ch_wrk_cnt--;
00645e  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006460  f1a00001          SUB      r0,r0,#1
006464  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10113  	hv_vz_up_cnt++;
006466  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006468  f1020201          ADD      r2,r2,#1
00646c  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10114  	if(sp_ch_wrk_cnt==0)
00646e  b918              CBNZ     r0,|L1.25720|
;;;10115  		{
;;;10116  		sp_ch_stat=scsOFF;
006470  703d              STRB     r5,[r7,#0]
;;;10117  		speedz_mem_hndl(0);
006472  2000              MOVS     r0,#0
006474  f7fffffe          BL       speedz_mem_hndl
                  |L1.25720|
;;;10118  		}
;;;10119  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10120  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006478  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
00647c  b930              CBNZ     r0,|L1.25740|
00647e  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
006482  2801              CMP      r0,#1
006484  d102              BNE      |L1.25740|
006486  f04f0004          MOV      r0,#4
00648a  7038              STRB     r0,[r7,#0]
                  |L1.25740|
;;;10121  	#endif
;;;10122  	}
;;;10123  
;;;10124  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
00648c  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10125  	{
;;;10126  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10127  		{
;;;10128  		sp_ch_stat_cnt=10;
;;;10129  		}
;;;10130  	sp_ch_stat_cnt--;
;;;10131  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10132  		{
;;;10133  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
00648e  f2413b88          MOV      r11,#0x1388
006492  f04f0a0a          MOV      r10,#0xa              ;10128
006496  2803              CMP      r0,#3                 ;10124
006498  d119              BNE      |L1.25806|
00649a  7830              LDRB     r0,[r6,#0]            ;10126  ; sp_ch_stat_old
00649c  2803              CMP      r0,#3                 ;10126
00649e  d101              BNE      |L1.25764|
0064a0  8820              LDRH     r0,[r4,#0]            ;10126  ; sp_ch_stat_cnt
0064a2  b908              CBNZ     r0,|L1.25768|
                  |L1.25764|
0064a4  f8a4a000          STRH     r10,[r4,#0]           ;10128
                  |L1.25768|
0064a8  8820              LDRH     r0,[r4,#0]            ;10130  ; sp_ch_stat_cnt
0064aa  f1a00001          SUB      r0,r0,#1              ;10130
0064ae  b200              SXTH     r0,r0                 ;10130
0064b0  8020              STRH     r0,[r4,#0]            ;10130
0064b2  280a              CMP      r0,#0xa               ;10131
0064b4  d001              BEQ      |L1.25786|
0064b6  2809              CMP      r0,#9                 ;10131
0064b8  d109              BNE      |L1.25806|
                  |L1.25786|
0064ba  4b84              LDR      r3,|L1.26316|
0064bc  a084              ADR      r0,|L1.26320|
0064be  f1030218          ADD      r2,r3,#0x18
0064c2  f1020118          ADD      r1,r2,#0x18
0064c6  f8cdb000          STR      r11,[sp,#0]
0064ca  f7fffffe          BL       show_mess
                  |L1.25806|
;;;10134  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10135  					"      ВКЛЮЧЕН       ",
;;;10136  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10137  					5000);
;;;10138  		}
;;;10139  	}
;;;10140  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
0064ce  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0064d0  2804              CMP      r0,#4
0064d2  d11f              BNE      |L1.25876|
;;;10141  	{
;;;10142  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
0064d4  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
0064d6  2804              CMP      r0,#4
0064d8  d101              BNE      |L1.25822|
0064da  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0064dc  b908              CBNZ     r0,|L1.25826|
                  |L1.25822|
;;;10143  		{
;;;10144  		sp_ch_stat_cnt=10;
0064de  f8a4a000          STRH     r10,[r4,#0]
                  |L1.25826|
;;;10145  		}
;;;10146  	sp_ch_stat_cnt--;
0064e2  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0064e4  f1a00001          SUB      r0,r0,#1
0064e8  b200              SXTH     r0,r0
0064ea  8020              STRH     r0,[r4,#0]
;;;10147  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
0064ec  280a              CMP      r0,#0xa
0064ee  d001              BEQ      |L1.25844|
0064f0  2809              CMP      r0,#9
0064f2  d109              BNE      |L1.25864|
                  |L1.25844|
;;;10148  		{
;;;10149  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0064f4  4b7c              LDR      r3,|L1.26344|
0064f6  a076              ADR      r0,|L1.26320|
0064f8  f1030218          ADD      r2,r3,#0x18
0064fc  f1020118          ADD      r1,r2,#0x18
006500  f8cdb000          STR      r11,[sp,#0]
006504  f7fffffe          BL       show_mess
                  |L1.25864|
;;;10150  					"    ЗАБЛОКИРОВАН    ",
;;;10151  					"     НЕИСПРАВНА     ",
;;;10152  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10153  					5000);
;;;10154  		}
;;;10155  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006508  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
00650c  2801              CMP      r0,#1
00650e  d101              BNE      |L1.25876|
006510  f8878000          STRB     r8,[r7,#0]
                  |L1.25876|
;;;10156  	}
;;;10157  
;;;10158  
;;;10159  sp_ch_stat_old=sp_ch_stat;
006514  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006516  7030              STRB     r0,[r6,#0]
;;;10160  
;;;10161  
;;;10162  
;;;10163  if(speedChrgAvtEn==1)
006518  4974              LDR      r1,|L1.26348|
;;;10164  	{
;;;10165  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10166  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10167  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10168  		#endif
;;;10169  		)
;;;10170  		{
;;;10171  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10172  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10173  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10174  		#endif
;;;10175  		#ifdef UKU_220_V2
;;;10176  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10177  		#endif
;;;10178  		&&(!speedChrgBlckStat))
00651a  4c50              LDR      r4,|L1.26204|
00651c  8809              LDRH     r1,[r1,#0]            ;10163  ; speedChrgAvtEn
00651e  2901              CMP      r1,#1                 ;10163
006520  d10a              BNE      |L1.25912|
006522  494f              LDR      r1,|L1.26208|
;;;10179  			{
;;;10180  			speedChargeStartCnt++;
006524  4e72              LDR      r6,|L1.26352|
006526  f8912022          LDRB     r2,[r1,#0x22]         ;10165  ; spc_stat
00652a  4310              ORRS     r0,r0,r2              ;10165
00652c  794a              LDRB     r2,[r1,#5]            ;10165  ; vz1_stat
00652e  79c9              LDRB     r1,[r1,#7]            ;10165  ; vz2_stat
006530  4310              ORRS     r0,r0,r2              ;10165
006532  4308              ORRS     r0,r0,r1              ;10165
006534  d007              BEQ      |L1.25926|
;;;10181  			if(speedChargeStartCnt>=60)
;;;10182  				{
;;;10183  				speedChargeStartStop();
;;;10184  				speedz_mem_hndl(5);
;;;10185  				}
;;;10186  			}
;;;10187  		else speedChargeStartCnt=0;
;;;10188  		}
;;;10189  	else speedChargeStartCnt=0;
006536  7035              STRB     r5,[r6,#0]
                  |L1.25912|
;;;10190  	}
;;;10191  
;;;10192  
;;;10193  
;;;10194  /*
;;;10195  if(speedChIsOn)
;;;10196  	{
;;;10197  	speedChTimeCnt++;
;;;10198  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10199  		{
;;;10200  		speedChIsOn=0;
;;;10201  		}
;;;10202  	if(speedChrgBlckStat)
;;;10203  		{
;;;10204  		speedChIsOn=0;
;;;10205  		speedChTimeCnt=0;
;;;10206  		}
;;;10207  	}
;;;10208  
;;;10209  
;;;10210  
;;;10211  if(speedChrgAvtEn)
;;;10212  	{
;;;10213  	if(!speedChIsOn)
;;;10214  		{
;;;10215  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10216  			{
;;;10217  			speedChIsOn=1;
;;;10218  			}
;;;10219  		}
;;;10220  	}
;;;10221  
;;;10222  
;;;10223  */
;;;10224  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006538  486e              LDR      r0,|L1.26356|
00653a  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
00653c  2802              CMP      r0,#2
00653e  d02e              BEQ      |L1.26014|
006540  8025              STRH     r5,[r4,#0]
                  |L1.25922|
;;;10225  else
;;;10226  	{
;;;10227  	speedChrgBlckStat=0;
;;;10228  	if(speedChrgBlckSrc==1)
;;;10229  		{
;;;10230  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10231  		}
;;;10232  	else if(speedChrgBlckSrc==2)
;;;10233  		{
;;;10234  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10235  		}
;;;10236  	}
;;;10237  
;;;10238  /*
;;;10239  if(speedChrgBlckStat==1)
;;;10240  	{
;;;10241  
;;;10242  	//speedChargeStartStop();
;;;10243  
;;;10244  	speedChrgShowCnt++;
;;;10245  	if(speedChrgShowCnt>=30)	
;;;10246  		{
;;;10247  		speedChrgShowCnt=0;
;;;10248  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10249  					"       ЗАРЯД        ",
;;;10250  					"     ЗАПРЕЩЕН!!!    ",
;;;10251  					"                    ",
;;;10252  					5000);
;;;10253  		}
;;;10254  	} 
;;;10255  else speedChrgShowCnt=0;  */
;;;10256  
;;;10257  
;;;10258  }
006542  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.25926|
006546  4837              LDR      r0,|L1.26148|
006548  496b              LDR      r1,|L1.26360|
00654a  f9b00000          LDRSH    r0,[r0,#0]            ;10171  ; load_U
00654e  f9b11000          LDRSH    r1,[r1,#0]            ;10171  ; u_necc
006552  4288              CMP      r0,r1                 ;10171
006554  da14              BGE      |L1.25984|
006556  1a08              SUBS     r0,r1,r0              ;10171
006558  4968              LDR      r1,|L1.26364|
00655a  f9b11000          LDRSH    r1,[r1,#0]            ;10171  ; speedChrgDU
00655e  4288              CMP      r0,r1                 ;10171
006560  dd0e              BLE      |L1.25984|
006562  4867              LDR      r0,|L1.26368|
006564  4967              LDR      r1,|L1.26372|
006566  f9b00000          LDRSH    r0,[r0,#0]            ;10173  ; Ib_ips_termokompensat
00656a  8809              LDRH     r1,[r1,#0]            ;10173  ; IZMAX
00656c  fb90f0fa          SDIV     r0,r0,r10             ;10173
006570  1a40              SUBS     r0,r0,r1              ;10173
006572  b200              SXTH     r0,r0                 ;10173
006574  f7fffffe          BL       abs
006578  2805              CMP      r0,#5                 ;10173
00657a  da01              BGE      |L1.25984|
00657c  8820              LDRH     r0,[r4,#0]            ;10178  ; speedChrgBlckStat
00657e  b108              CBZ      r0,|L1.25988|
                  |L1.25984|
006580  7035              STRB     r5,[r6,#0]            ;10187
006582  e7d9              B        |L1.25912|
                  |L1.25988|
006584  7830              LDRB     r0,[r6,#0]            ;10180  ; speedChargeStartCnt
006586  f1000001          ADD      r0,r0,#1              ;10180
00658a  b2c0              UXTB     r0,r0                 ;10180
00658c  7030              STRB     r0,[r6,#0]            ;10180
00658e  283c              CMP      r0,#0x3c              ;10181
006590  d3d2              BCC      |L1.25912|
006592  f7fffffe          BL       speedChargeStartStop
006596  2005              MOVS     r0,#5                 ;10184
006598  f7fffffe          BL       speedz_mem_hndl
00659c  e7cc              B        |L1.25912|
                  |L1.26014|
00659e  8025              STRH     r5,[r4,#0]            ;10227
0065a0  4859              LDR      r0,|L1.26376|
0065a2  495a              LDR      r1,|L1.26380|
0065a4  f44f63fa          MOV      r3,#0x7d0             ;10230
0065a8  f9b00000          LDRSH    r0,[r0,#0]            ;10234  ; speedChrgBlckLog
0065ac  b918              CBNZ     r0,|L1.26038|
0065ae  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10234  ; adc_buff_
0065b2  429a              CMP      r2,r3                 ;10234
0065b4  dc05              BGT      |L1.26050|
                  |L1.26038|
0065b6  2801              CMP      r0,#1                 ;10234
0065b8  d1c3              BNE      |L1.25922|
0065ba  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10234  ; adc_buff_
0065be  4298              CMP      r0,r3                 ;10234
0065c0  dabf              BGE      |L1.25922|
                  |L1.26050|
0065c2  f04f0001          MOV      r0,#1                 ;10234
0065c6  8020              STRH     r0,[r4,#0]            ;10234
0065c8  e7bb              B        |L1.25922|
;;;10259  
                          ENDP

                  averageChargeHndl PROC
;;;10318  //-----------------------------------------------
;;;10319  void averageChargeHndl(void)
0065ca  e92d4ff8          PUSH     {r3-r11,lr}
;;;10320  {
;;;10321  /*
;;;10322  if(hv_vz_stat==hvsOFF)
;;;10323  	{
;;;10324  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10325  	} */
;;;10326  if(hv_vz_stat!=hvsOFF)
0065ce  f8dfa140          LDR      r10,|L1.26384|
0065d2  f04f0b00          MOV      r11,#0
0065d6  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0065da  b130              CBZ      r0,|L1.26090|
;;;10327  	{
;;;10328  	hv_vz_stat=hvsOFF; 	
0065dc  f88ab000          STRB     r11,[r10,#0]
;;;10329  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
0065e0  2100              MOVS     r1,#0
0065e2  f44f70b4          MOV      r0,#0x168
0065e6  f7fffffe          BL       lc640_write
                  |L1.26090|
;;;10330  	}
;;;10331  
;;;10332  if(hv_vz_stat==hvsSTEP1)
0065ea  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10333  	{
;;;10334  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10335  		{
;;;10336  		hv_vz_stat_cnt=5;
;;;10337  		}
;;;10338  	if(hv_vz_stat_cnt)
;;;10339  		{
;;;10340  		hv_vz_stat_cnt--;
;;;10341  		if(hv_vz_stat_cnt==0)
;;;10342  			{
;;;10343  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10344  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10345  			}
;;;10346  		}
;;;10347  	if(sk_stat[0]==1)
0065ee  4e31              LDR      r6,|L1.26292|
0065f0  4d48              LDR      r5,|L1.26388|
0065f2  4c49              LDR      r4,|L1.26392|
0065f4  f04f0905          MOV      r9,#5                 ;10336
0065f8  2801              CMP      r0,#1                 ;10332
0065fa  d109              BNE      |L1.26128|
0065fc  7828              LDRB     r0,[r5,#0]            ;10334  ; hv_vz_stat_old
0065fe  2801              CMP      r0,#1                 ;10334
006600  d001              BEQ      |L1.26118|
006602  f8a49000          STRH     r9,[r4,#0]            ;10336
                  |L1.26118|
006606  f9b40000          LDRSH    r0,[r4,#0]            ;10338  ; hv_vz_stat_cnt
00660a  b100              CBZ      r0,|L1.26126|
00660c  e086              B        |L1.26396|
                  |L1.26126|
00660e  e093              B        |L1.26424|
                  |L1.26128|
006610  e0ae              B        |L1.26480|
006612  0000              DCW      0x0000
                  |L1.26132|
                          DCD      superviser_cnt
                  |L1.26136|
                          DCD      NPN_OUT
                  |L1.26140|
                          DCD      npn_tz_cnt
                  |L1.26144|
                          DCD      npn_stat
                  |L1.26148|
                          DCD      load_U
                  |L1.26152|
                          DCD      UONPN
                  |L1.26156|
                          DCD      net_Ua
                  |L1.26160|
                          DCD      net_Ub
                  |L1.26164|
                          DCD      net_Uc
                  |L1.26168|
                          DCD      UMN
                  |L1.26172|
                          DCD      TZNPN
                  |L1.26176|
                          DCD      UVNPN
                  |L1.26180|
                          DCD      load_off_cnt
                  |L1.26184|
                          DCD      load_off_stat
                  |L1.26188|
                          DCD      dUNPN
                  |L1.26192|
                          DCD      tloaddisable_cmnd
                  |L1.26196|
                          DCD      spch_plazma
                  |L1.26200|
                          DCD      sp_ch_stat
                  |L1.26204|
                          DCD      speedChrgBlckStat
                  |L1.26208|
                          DCD      ||area_number.25||
                  |L1.26212|
                          DCD      ||.text||+0x1a54
                  |L1.26216|
006668  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
00666c  e7e0e1eb
006670  eeeae8f0
006674  eee2e0ed
006678  21      
006679  20202000          DCB      "   ",0
00667d  00                DCB      0
00667e  00                DCB      0
00667f  00                DCB      0
                  |L1.26240|
006680  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006684  202020e7
006688  e0f0ffe4
00668c  20202020
006690  20202020
006694  00      
006695  00                DCB      0
006696  00                DCB      0
006697  00                DCB      0
                  |L1.26264|
006698  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
00669c  20d3f1ea
0066a0  eef0e5ed
0066a4  edfbe920
0066a8  20202020
0066ac  00      
0066ad  00                DCB      0
0066ae  00                DCB      0
0066af  00                DCB      0
                  |L1.26288|
                          DCD      SP_CH_VENT_BLOK
                  |L1.26292|
                          DCD      sk_stat
                  |L1.26296|
                          DCD      sp_ch_stat_old
                  |L1.26300|
                          DCD      sp_ch_stat_cnt
                  |L1.26304|
                          DCD      sp_ch_wrk_cnt
                  |L1.26308|
                          DCD      hv_vz_up_cnt
                  |L1.26312|
                          DCD      speedChrgTimeInHour
                  |L1.26316|
                          DCD      ||.text||+0x191c
                  |L1.26320|
0066d0  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
0066d4  caced0c5
0066d8  cdcddbc9
0066dc  20c7c0  
0066df  d0dfc420          DCB      208,223,196,"  ",0
0066e3  2000    
0066e5  00                DCB      0
0066e6  00                DCB      0
0066e7  00                DCB      0
                  |L1.26344|
                          DCD      ||.text||+0x145c
                  |L1.26348|
                          DCD      speedChrgAvtEn
                  |L1.26352|
                          DCD      speedChargeStartCnt
                  |L1.26356|
                          DCD      speedChrgBlckSrc
                  |L1.26360|
                          DCD      u_necc
                  |L1.26364|
                          DCD      speedChrgDU
                  |L1.26368|
                          DCD      Ib_ips_termokompensat
                  |L1.26372|
                          DCD      IZMAX
                  |L1.26376|
                          DCD      speedChrgBlckLog
                  |L1.26380|
                          DCD      ||.bss||+0x40c
                  |L1.26384|
                          DCD      hv_vz_stat
                  |L1.26388|
                          DCD      hv_vz_stat_old
                  |L1.26392|
                          DCD      hv_vz_stat_cnt
                  |L1.26396|
00671c  f1a00001          SUB      r0,r0,#1              ;10340
006720  b200              SXTH     r0,r0                 ;10340
006722  8020              STRH     r0,[r4,#0]            ;10340
006724  b940              CBNZ     r0,|L1.26424|
006726  f04f0006          MOV      r0,#6                 ;10343
00672a  f88a0000          STRB     r0,[r10,#0]           ;10343
00672e  4601              MOV      r1,r0                 ;10344
006730  f44f70b4          MOV      r0,#0x168             ;10344
006734  f7fffffe          BL       lc640_write
                  |L1.26424|
006738  7830              LDRB     r0,[r6,#0]  ; sk_stat
00673a  2801              CMP      r0,#1
00673c  d118              BNE      |L1.26480|
;;;10348  		{
;;;10349  		hv_vz_stat=hvsSTEP2;
00673e  f04f0002          MOV      r0,#2
006742  f88a0000          STRB     r0,[r10,#0]
;;;10350  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006746  4601              MOV      r1,r0
006748  f44f70b4          MOV      r0,#0x168
00674c  f7fffffe          BL       lc640_write
;;;10351  		tree_up(iHV_STEP2_2,1,0,0);
006750  2300              MOVS     r3,#0
006752  461a              MOV      r2,r3
006754  2101              MOVS     r1,#1
006756  20dc              MOVS     r0,#0xdc
006758  f7fffffe          BL       tree_up
;;;10352  		tree_up(iHV_STEP2_1,0,0,0);
00675c  2300              MOVS     r3,#0
00675e  461a              MOV      r2,r3
006760  4619              MOV      r1,r3
006762  20db              MOVS     r0,#0xdb
006764  f7fffffe          BL       tree_up
;;;10353  		ret(1200);
006768  f44f6096          MOV      r0,#0x4b0
00676c  f7fffffe          BL       ||ret||
                  |L1.26480|
;;;10354  		}
;;;10355  	}
;;;10356  
;;;10357  if(hv_vz_stat==hvsSTEP2)
006770  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006774  2802              CMP      r0,#2
006776  d10b              BNE      |L1.26512|
;;;10358  	{
;;;10359  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006778  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
00677a  2902              CMP      r1,#2
00677c  d101              BNE      |L1.26498|
00677e  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006780  b911              CBNZ     r1,|L1.26504|
                  |L1.26498|
;;;10360  		{
;;;10361  		hv_vz_stat_cnt=15;
006782  f04f010f          MOV      r1,#0xf
006786  8021              STRH     r1,[r4,#0]
                  |L1.26504|
;;;10362  		}
;;;10363  	hv_vz_stat_cnt--;
006788  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
00678a  f1a10101          SUB      r1,r1,#1
00678e  8021              STRH     r1,[r4,#0]
                  |L1.26512|
;;;10364  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10365  	//	{
;;;10366  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10367  	//				"  Напряжение будет  ",
;;;10368  	//				" увеличено до     @В",
;;;10369  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10370  	//				4800,UVZ,1);
;;;10371  	//	}
;;;10372  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10373  	//	{
;;;10374  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10375  	//				"     НАЖАТИЕМ       ",
;;;10376  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10377  	//				"      КНОПКИ        ",
;;;10378  	//				4800);
;;;10379  	//	} 
;;;10380  /*	if(sk_stat[1]==1)
;;;10381  		{
;;;10382  		hv_vz_stat=hvsWRK;
;;;10383  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10384  		}*/
;;;10385  	}
;;;10386  
;;;10387  if(hv_vz_stat==hvsSTEP3)
;;;10388  	{
;;;10389  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10390  		{
;;;10391  		hv_vz_stat_cnt=10;
006790  270a              MOVS     r7,#0xa
;;;10392  		}
;;;10393  	hv_vz_stat_cnt--;
;;;10394  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10395  		{
;;;10396  		show_mess(	"     ВКЛЮЧИТЕ       ",
006792  f2413888          MOV      r8,#0x1388
006796  2803              CMP      r0,#3                 ;10387
006798  d122              BNE      |L1.26592|
00679a  7828              LDRB     r0,[r5,#0]            ;10389  ; hv_vz_stat_old
00679c  2803              CMP      r0,#3                 ;10389
00679e  d101              BNE      |L1.26532|
0067a0  8820              LDRH     r0,[r4,#0]            ;10389  ; hv_vz_stat_cnt
0067a2  b900              CBNZ     r0,|L1.26534|
                  |L1.26532|
0067a4  8027              STRH     r7,[r4,#0]            ;10391
                  |L1.26534|
0067a6  8820              LDRH     r0,[r4,#0]            ;10393  ; hv_vz_stat_cnt
0067a8  f1a00001          SUB      r0,r0,#1              ;10393
0067ac  b200              SXTH     r0,r0                 ;10393
0067ae  8020              STRH     r0,[r4,#0]            ;10393
0067b0  280a              CMP      r0,#0xa               ;10394
0067b2  d001              BEQ      |L1.26552|
0067b4  2809              CMP      r0,#9                 ;10394
0067b6  d109              BNE      |L1.26572|
                  |L1.26552|
0067b8  4bfe              LDR      r3,|L1.27572|
0067ba  a2ff              ADR      r2,|L1.27576|
0067bc  f5a37194          SUB      r1,r3,#0x128
0067c0  f1010018          ADD      r0,r1,#0x18
0067c4  f8cd8000          STR      r8,[sp,#0]
0067c8  f7fffffe          BL       show_mess
                  |L1.26572|
;;;10397  					"      ТУМБЛЕР       ",
;;;10398  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10399  					"       ЗАРЯД        ",
;;;10400  					5000);
;;;10401  		}
;;;10402  	if(sk_stat[1]==1)
0067cc  7870              LDRB     r0,[r6,#1]  ; sk_stat
0067ce  2801              CMP      r0,#1
0067d0  d106              BNE      |L1.26592|
;;;10403  		{
;;;10404  		hv_vz_stat=hvsWRK;
0067d2  f88a9000          STRB     r9,[r10,#0]
;;;10405  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0067d6  2105              MOVS     r1,#5
0067d8  f44f70b4          MOV      r0,#0x168
0067dc  f7fffffe          BL       lc640_write
                  |L1.26592|
;;;10406  		}
;;;10407  	}
;;;10408  
;;;10409  if(hv_vz_stat==hvsWRK)
0067e0  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0067e4  2805              CMP      r0,#5
0067e6  d13a              BNE      |L1.26718|
;;;10410  	{
;;;10411  	if(hv_vz_stat_old!=hv_vz_stat)
0067e8  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10412  		{
;;;10413  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
0067ea  4af9              LDR      r2,|L1.27600|
;;;10414  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10415  		hv_vz_up_cnt=0L;
0067ec  49f9              LDR      r1,|L1.27604|
0067ee  2805              CMP      r0,#5                 ;10411
0067f0  d00d              BEQ      |L1.26638|
0067f2  48f9              LDR      r0,|L1.27608|
0067f4  f44f6361          MOV      r3,#0xe10             ;10413
0067f8  f9b00000          LDRSH    r0,[r0,#0]            ;10413  ; VZ_HR
0067fc  fb00f303          MUL      r3,r0,r3              ;10413
006800  6013              STR      r3,[r2,#0]            ;10413  ; hv_vz_wrk_cnt
006802  b910              CBNZ     r0,|L1.26634|
006804  f44f60e1          MOV      r0,#0x708             ;10414
006808  6010              STR      r0,[r2,#0]            ;10414  ; hv_vz_wrk_cnt
                  |L1.26634|
00680a  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.26638|
;;;10416  		}
;;;10417  	hv_vz_wrk_cnt--;
00680e  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006810  f1a00001          SUB      r0,r0,#1
006814  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10418  	hv_vz_up_cnt++;
006816  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006818  f1020201          ADD      r2,r2,#1
00681c  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10419  
;;;10420  	if(hv_vz_wrk_cnt==0)
00681e  b940              CBNZ     r0,|L1.26674|
;;;10421  		{
;;;10422  		hv_vz_stat=hvsERR4;
006820  f04f0009          MOV      r0,#9
006824  f88a0000          STRB     r0,[r10,#0]
;;;10423  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006828  4601              MOV      r1,r0
00682a  f44f70b4          MOV      r0,#0x168
00682e  f7fffffe          BL       lc640_write
                  |L1.26674|
;;;10424  		}
;;;10425  	if(sk_stat[0]==0)
006832  7830              LDRB     r0,[r6,#0]  ; sk_stat
006834  b940              CBNZ     r0,|L1.26696|
;;;10426  		{
;;;10427  		hv_vz_stat=hvsERR2;
006836  f04f0007          MOV      r0,#7
00683a  f88a0000          STRB     r0,[r10,#0]
;;;10428  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
00683e  4601              MOV      r1,r0
006840  f44f70b4          MOV      r0,#0x168
006844  f7fffffe          BL       lc640_write
                  |L1.26696|
;;;10429  		}
;;;10430  	if(sk_stat[1]==0)
006848  7870              LDRB     r0,[r6,#1]  ; sk_stat
00684a  b940              CBNZ     r0,|L1.26718|
;;;10431  		{
;;;10432  		hv_vz_stat=hvsERR3;
00684c  f04f0008          MOV      r0,#8
006850  f88a0000          STRB     r0,[r10,#0]
;;;10433  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006854  4601              MOV      r1,r0
006856  f44f70b4          MOV      r0,#0x168
00685a  f7fffffe          BL       lc640_write
                  |L1.26718|
;;;10434  		}
;;;10435  	}
;;;10436  
;;;10437  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
00685e  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006862  2806              CMP      r0,#6
006864  d11a              BNE      |L1.26780|
;;;10438  	{
;;;10439  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006866  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006868  2806              CMP      r0,#6
00686a  d101              BNE      |L1.26736|
00686c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00686e  b900              CBNZ     r0,|L1.26738|
                  |L1.26736|
;;;10440  		{
;;;10441  		hv_vz_stat_cnt=10;
006870  8027              STRH     r7,[r4,#0]
                  |L1.26738|
;;;10442  		}
;;;10443  	hv_vz_stat_cnt--;
006872  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006874  f1a00001          SUB      r0,r0,#1
006878  b200              SXTH     r0,r0
00687a  8020              STRH     r0,[r4,#0]
;;;10444  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
00687c  280a              CMP      r0,#0xa
00687e  d001              BEQ      |L1.26756|
006880  2809              CMP      r0,#9
006882  d10b              BNE      |L1.26780|
                  |L1.26756|
;;;10445  		{
;;;10446  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006884  4bcb              LDR      r3,|L1.27572|
006886  f8cd8000          STR      r8,[sp,#0]
00688a  3bf0              SUBS     r3,r3,#0xf0
00688c  f1030218          ADD      r2,r3,#0x18
006890  f1020118          ADD      r1,r2,#0x18
006894  f5a16095          SUB      r0,r1,#0x4a8
006898  f7fffffe          BL       show_mess
                  |L1.26780|
;;;10447  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10448  					"      ВКЛЮЧЕН       ",
;;;10449  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10450  					5000);
;;;10451  		}
;;;10452  	}
;;;10453  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
00689c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0068a0  2807              CMP      r0,#7
0068a2  d123              BNE      |L1.26860|
;;;10454  	{
;;;10455  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
0068a4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
0068a6  2807              CMP      r0,#7
0068a8  d101              BNE      |L1.26798|
0068aa  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068ac  b900              CBNZ     r0,|L1.26800|
                  |L1.26798|
;;;10456  		{
;;;10457  		hv_vz_stat_cnt=10;
0068ae  8027              STRH     r7,[r4,#0]
                  |L1.26800|
;;;10458  		}
;;;10459  	hv_vz_stat_cnt--;
0068b0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068b2  f1a00001          SUB      r0,r0,#1
0068b6  b200              SXTH     r0,r0
0068b8  8020              STRH     r0,[r4,#0]
;;;10460  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
0068ba  280a              CMP      r0,#0xa
0068bc  d001              BEQ      |L1.26818|
0068be  2809              CMP      r0,#9
0068c0  d10a              BNE      |L1.26840|
                  |L1.26818|
;;;10461  		{
;;;10462  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0068c2  4bc6              LDR      r3,|L1.27612|
0068c4  f8cd8000          STR      r8,[sp,#0]
0068c8  f1030218          ADD      r2,r3,#0x18
0068cc  f1020118          ADD      r1,r2,#0x18
0068d0  f1010018          ADD      r0,r1,#0x18
0068d4  f7fffffe          BL       show_mess
                  |L1.26840|
;;;10463  					"    ЗАБЛОКИРОВАН    ",
;;;10464  					"     НЕИСПРАВНА     ",
;;;10465  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10466  					5000);
;;;10467  		}
;;;10468  	if(sk_stat[0]==1)
0068d8  7830              LDRB     r0,[r6,#0]  ; sk_stat
0068da  2801              CMP      r0,#1
0068dc  d106              BNE      |L1.26860|
;;;10469  		{
;;;10470  		hv_vz_stat=hvsWRK;
0068de  f88a9000          STRB     r9,[r10,#0]
;;;10471  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0068e2  2105              MOVS     r1,#5
0068e4  f44f70b4          MOV      r0,#0x168
0068e8  f7fffffe          BL       lc640_write
                  |L1.26860|
;;;10472  		}
;;;10473  	}
;;;10474  
;;;10475  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
0068ec  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0068f0  2808              CMP      r0,#8
0068f2  d123              BNE      |L1.26940|
;;;10476  	{
;;;10477  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
0068f4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
0068f6  2808              CMP      r0,#8
0068f8  d101              BNE      |L1.26878|
0068fa  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0068fc  b900              CBNZ     r0,|L1.26880|
                  |L1.26878|
;;;10478  		{
;;;10479  		hv_vz_stat_cnt=10;
0068fe  8027              STRH     r7,[r4,#0]
                  |L1.26880|
;;;10480  		}
;;;10481  	hv_vz_stat_cnt--;
006900  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006902  f1a00001          SUB      r0,r0,#1
006906  b200              SXTH     r0,r0
006908  8020              STRH     r0,[r4,#0]
;;;10482  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
00690a  280a              CMP      r0,#0xa
00690c  d001              BEQ      |L1.26898|
00690e  2809              CMP      r0,#9
006910  d10a              BNE      |L1.26920|
                  |L1.26898|
;;;10483  		{
;;;10484  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006912  4bb3              LDR      r3,|L1.27616|
006914  f8cd8000          STR      r8,[sp,#0]
006918  f6a31264          SUB      r2,r3,#0x964
00691c  f1020118          ADD      r1,r2,#0x18
006920  f5a160a1          SUB      r0,r1,#0x508
006924  f7fffffe          BL       show_mess
                  |L1.26920|
;;;10485  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10486  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10487  					"    ТУМБЛЕРА!!!     ",
;;;10488  					5000);
;;;10489  		}
;;;10490  	if(sk_stat[1]==1)
006928  7870              LDRB     r0,[r6,#1]  ; sk_stat
00692a  2801              CMP      r0,#1
00692c  d106              BNE      |L1.26940|
;;;10491  		{
;;;10492  		hv_vz_stat=hvsWRK;
00692e  f88a9000          STRB     r9,[r10,#0]
;;;10493  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006932  2105              MOVS     r1,#5
006934  f44f70b4          MOV      r0,#0x168
006938  f7fffffe          BL       lc640_write
                  |L1.26940|
;;;10494  		}
;;;10495  	}
;;;10496  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
00693c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006940  2809              CMP      r0,#9
006942  d123              BNE      |L1.27020|
;;;10497  	{
;;;10498  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006944  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006946  2809              CMP      r0,#9
006948  d101              BNE      |L1.26958|
00694a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00694c  b900              CBNZ     r0,|L1.26960|
                  |L1.26958|
;;;10499  		{
;;;10500  		hv_vz_stat_cnt=10;
00694e  8027              STRH     r7,[r4,#0]
                  |L1.26960|
;;;10501  		}
;;;10502  	hv_vz_stat_cnt--;
006950  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006952  f1a00001          SUB      r0,r0,#1
006956  b200              SXTH     r0,r0
006958  8020              STRH     r0,[r4,#0]
;;;10503  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
00695a  280a              CMP      r0,#0xa
00695c  d001              BEQ      |L1.26978|
00695e  2809              CMP      r0,#9
006960  d109              BNE      |L1.26998|
                  |L1.26978|
;;;10504  		{
;;;10505  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006962  4b94              LDR      r3,|L1.27572|
006964  a294              ADR      r2,|L1.27576|
006966  f5a37194          SUB      r1,r3,#0x128
00696a  f50170ac          ADD      r0,r1,#0x158
00696e  f8cd8000          STR      r8,[sp,#0]
006972  f7fffffe          BL       show_mess
                  |L1.26998|
;;;10506  					"      ТУМБЛЕР       ",
;;;10507  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10508  					"       ЗАРЯД        ",
;;;10509  					5000);
;;;10510  		}
;;;10511  	if(sk_stat[1]==0)
006976  7870              LDRB     r0,[r6,#1]  ; sk_stat
006978  b940              CBNZ     r0,|L1.27020|
;;;10512  		{
;;;10513  		hv_vz_stat=hvsOFF;
00697a  f88ab000          STRB     r11,[r10,#0]
;;;10514  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
00697e  2100              MOVS     r1,#0
006980  f44f70b4          MOV      r0,#0x168
006984  f7fffffe          BL       lc640_write
;;;10515  		vz_stop();
006988  f7fffffe          BL       vz_stop
                  |L1.27020|
;;;10516  
;;;10517  		}
;;;10518  	}
;;;10519  hv_vz_stat_old=hv_vz_stat;
00698c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006990  7028              STRB     r0,[r5,#0]
;;;10520  /*
;;;10521  if(speedChIsOn)
;;;10522  	{
;;;10523  	speedChTimeCnt++;
;;;10524  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10525  		{
;;;10526  		speedChIsOn=0;
;;;10527  		}
;;;10528  	if(speedChrgBlckStat)
;;;10529  		{
;;;10530  		speedChIsOn=0;
;;;10531  		speedChTimeCnt=0;
;;;10532  		}
;;;10533  	}
;;;10534  
;;;10535  
;;;10536  
;;;10537  if(speedChrgAvtEn)
;;;10538  	{
;;;10539  	if(!speedChIsOn)
;;;10540  		{
;;;10541  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10542  			{
;;;10543  			speedChIsOn=1;
;;;10544  			}
;;;10545  		}
;;;10546  	}
;;;10547  
;;;10548  
;;;10549  
;;;10550  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10551  else
;;;10552  	{
;;;10553  	speedChrgBlckStat=0;
;;;10554  	if(speedChrgBlckSrc==1)
;;;10555  		{
;;;10556  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10557  		}
;;;10558  	else if(speedChrgBlckSrc==2)
;;;10559  		{
;;;10560  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10561  		}
;;;10562  	}
;;;10563  
;;;10564  
;;;10565  if(speedChrgBlckStat==1)
;;;10566  	{
;;;10567  
;;;10568  	//speedChargeStartStop();
;;;10569  
;;;10570  	speedChrgShowCnt++;
;;;10571  	if(speedChrgShowCnt>=30)	
;;;10572  		{
;;;10573  		speedChrgShowCnt=0;
;;;10574  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10575  					"       ЗАРЯД        ",
;;;10576  					"     ЗАПРЕЩЕН!!!    ",
;;;10577  					"                    ",
;;;10578  					5000);
;;;10579  		}
;;;10580  	}
;;;10581  else speedChrgShowCnt=0;
;;;10582  
;;;10583  */
;;;10584  }
006992  e5d6              B        |L1.25922|
;;;10585  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10602  //-----------------------------------------------
;;;10603  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006994  e92d41f0          PUSH     {r4-r8,lr}
;;;10604  {
;;;10605  
;;;10606  numOfForvardBps_old=numOfForvardBps;
006998  4c92              LDR      r4,|L1.27620|
00699a  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
00699c  7060              STRB     r0,[r4,#1]
;;;10607  
;;;10608  numOfForvardBps=0;
00699e  f04f0500          MOV      r5,#0
0069a2  f8045927          STRB     r5,[r4],#-0x27
;;;10609  
;;;10610  //FORVARDBPSCHHOUR=10;
;;;10611  
;;;10612  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
0069a6  4e90              LDR      r6,|L1.27624|
0069a8  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
0069ac  2800              CMP      r0,#0
0069ae  dd02              BLE      |L1.27062|
0069b0  f5b07ffa          CMP      r0,#0x1f4
0069b4  dd02              BLE      |L1.27068|
                  |L1.27062|
;;;10613  	{
;;;10614  	FORVARDBPSCHHOUR=0;
0069b6  8035              STRH     r5,[r6,#0]
                  |L1.27064|
;;;10615  	return;
;;;10616  	}
;;;10617  
;;;10618  numOfForvardBps_minCnt++;
;;;10619  
;;;10620  
;;;10621  if(numOfForvardBps_minCnt>=60)
;;;10622  	{
;;;10623  	numOfForvardBps_minCnt=0;
;;;10624  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10625  	numOfForvardBps_hourCnt++;
;;;10626  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10627  		{
;;;10628  		numOfForvardBps_hourCnt=0;
;;;10629  		}
;;;10630  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10631  	}
;;;10632  
;;;10633  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10634  
;;;10635  //if(numOfForvardBps)
;;;10636  //numOfForvardBps_old=numOfForvardBps; 
;;;10637  }
0069b8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.27068|
0069bc  f8940029          LDRB     r0,[r4,#0x29]         ;10618  ; numOfForvardBps_minCnt
0069c0  f1000001          ADD      r0,r0,#1              ;10618
0069c4  b2c0              UXTB     r0,r0                 ;10618
0069c6  f8840029          STRB     r0,[r4,#0x29]         ;10618
0069ca  283c              CMP      r0,#0x3c              ;10621
0069cc  d31b              BCC      |L1.27142|
0069ce  f8845029          STRB     r5,[r4,#0x29]         ;10623
0069d2  f44f7794          MOV      r7,#0x128             ;10624
0069d6  4638              MOV      r0,r7                 ;10624
0069d8  f7fffffe          BL       lc640_read_int
0069dc  f1000001          ADD      r0,r0,#1              ;10625
0069e0  b200              SXTH     r0,r0                 ;10625
0069e2  f8a40076          STRH     r0,[r4,#0x76]         ;10625
0069e6  4a81              LDR      r2,|L1.27628|
0069e8  f9b61000          LDRSH    r1,[r6,#0]            ;10626  ; FORVARDBPSCHHOUR
0069ec  f9b22000          LDRSH    r2,[r2,#0]            ;10626  ; NUMIST
0069f0  fb01f102          MUL      r1,r1,r2              ;10626
0069f4  4281              CMP      r1,r0                 ;10626
0069f6  dc01              BGT      |L1.27132|
0069f8  f8a45076          STRH     r5,[r4,#0x76]         ;10628
                  |L1.27132|
0069fc  f9b41076          LDRSH    r1,[r4,#0x76]         ;10630  ; numOfForvardBps_hourCnt
006a00  4638              MOV      r0,r7                 ;10630
006a02  f7fffffe          BL       lc640_write_int
                  |L1.27142|
006a06  f9b40076          LDRSH    r0,[r4,#0x76]         ;10633  ; numOfForvardBps_hourCnt
006a0a  f9b61000          LDRSH    r1,[r6,#0]            ;10633  ; FORVARDBPSCHHOUR
006a0e  fb90f0f1          SDIV     r0,r0,r1              ;10633
006a12  f8840027          STRB     r0,[r4,#0x27]         ;10633
006a16  e7cf              B        |L1.27064|
;;;10638  
                          ENDP

                  numOfForvardBps_init PROC
;;;10639  //-----------------------------------------------
;;;10640  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006a18  b510              PUSH     {r4,lr}
;;;10641  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10642  lc640_write_int(EE_FORVBPSHOURCNT,0);
006a1a  2100              MOVS     r1,#0
006a1c  f44f7094          MOV      r0,#0x128
006a20  f7fffffe          BL       lc640_write_int
;;;10643  numOfForvardBps_minCnt=58;
006a24  496f              LDR      r1,|L1.27620|
006a26  f04f003a          MOV      r0,#0x3a
006a2a  f1a10127          SUB      r1,r1,#0x27
006a2e  f8810029          STRB     r0,[r1,#0x29]
;;;10644  }
006a32  bd10              POP      {r4,pc}
;;;10645  
                          ENDP

                  outVoltContrHndl PROC
;;;10646  //-----------------------------------------------
;;;10647  void outVoltContrHndl(void)
006a34  b570              PUSH     {r4-r6,lr}
;;;10648  { 
;;;10649  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006a36  4c6e              LDR      r4,|L1.27632|
006a38  486e              LDR      r0,|L1.27636|
;;;10650  	{
;;;10651  	outVoltContrHndlCnt_=0;
;;;10652  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006a3a  4a6f              LDR      r2,|L1.27640|
006a3c  f9b41000          LDRSH    r1,[r4,#0]            ;10649  ; load_U
006a40  f9b06000          LDRSH    r6,[r0,#0]            ;10649  ; U_OUT_KONTR_MAX
006a44  2500              MOVS     r5,#0                 ;10651
006a46  f9b20000          LDRSH    r0,[r2,#0]
006a4a  4b6c              LDR      r3,|L1.27644|
006a4c  42b1              CMP      r1,r6                 ;10649
006a4e  dc04              BGT      |L1.27226|
006a50  4e6b              LDR      r6,|L1.27648|
006a52  f9b66000          LDRSH    r6,[r6,#0]            ;10649  ; U_OUT_KONTR_MIN
006a56  42b1              CMP      r1,r6                 ;10649
006a58  da0f              BGE      |L1.27258|
                  |L1.27226|
006a5a  801d              STRH     r5,[r3,#0]            ;10651
006a5c  4969              LDR      r1,|L1.27652|
006a5e  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006a62  4288              CMP      r0,r1
006a64  da1b              BGE      |L1.27294|
;;;10653  		{
;;;10654  		outVoltContrHndlCnt++;
006a66  f1000001          ADD      r0,r0,#1
006a6a  b200              SXTH     r0,r0
006a6c  8010              STRH     r0,[r2,#0]
;;;10655  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006a6e  4288              CMP      r0,r1
006a70  d115              BNE      |L1.27294|
;;;10656  			{
;;;10657  			avar_uout_hndl(1);
006a72  2001              MOVS     r0,#1
006a74  f7fffffe          BL       avar_uout_hndl
006a78  e011              B        |L1.27294|
                  |L1.27258|
;;;10658  			}
;;;10659  		}
;;;10660  	}
;;;10661  else
;;;10662  	{
;;;10663  	if(outVoltContrHndlCnt)
006a7a  b180              CBZ      r0,|L1.27294|
;;;10664  		{
;;;10665  		if(outVoltContrHndlCnt_<5)
006a7c  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006a80  2805              CMP      r0,#5
006a82  da0c              BGE      |L1.27294|
;;;10666  			{
;;;10667  			outVoltContrHndlCnt_++;
006a84  f1000001          ADD      r0,r0,#1
006a88  b200              SXTH     r0,r0
006a8a  8018              STRH     r0,[r3,#0]
;;;10668  			if(outVoltContrHndlCnt_>=5)
006a8c  2805              CMP      r0,#5
006a8e  db06              BLT      |L1.27294|
;;;10669  				{
;;;10670  				outVoltContrHndlCnt=0;
006a90  8015              STRH     r5,[r2,#0]
;;;10671  				if(uout_av)avar_uout_hndl(0);
006a92  485d              LDR      r0,|L1.27656|
006a94  7800              LDRB     r0,[r0,#0]  ; uout_av
006a96  b110              CBZ      r0,|L1.27294|
006a98  2000              MOVS     r0,#0
006a9a  f7fffffe          BL       avar_uout_hndl
                  |L1.27294|
;;;10672  				}
;;;10673  			}
;;;10674  		}
;;;10675  	}
;;;10676  
;;;10677  if (load_U<(USIGN*10)) 
006a9e  485b              LDR      r0,|L1.27660|
006aa0  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006aa4  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006aa8  eb000080          ADD      r0,r0,r0,LSL #2
006aac  ebb10f40          CMP      r1,r0,LSL #1
006ab0  da0b              BGE      |L1.27338|
;;;10678  	{
;;;10679  	if(!bSILENT)
006ab2  4857              LDR      r0,|L1.27664|
006ab4  6800              LDR      r0,[r0,#0]  ; bSILENT
006ab6  2800              CMP      r0,#0
006ab8  d107              BNE      |L1.27338|
;;;10680  		{
;;;10681  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006aba  e8bd4070          POP      {r4-r6,lr}
006abe  2314              MOVS     r3,#0x14
006ac0  2201              MOVS     r2,#1
006ac2  2172              MOVS     r1,#0x72
006ac4  20d2              MOVS     r0,#0xd2
006ac6  f7ffbffe          B.W      mess_send
                  |L1.27338|
;;;10682  		}
;;;10683  
;;;10684  	//bU_BAT2REL_AV_BAT=1;
;;;10685  	}
;;;10686  
;;;10687  
;;;10688  }
006aca  bd70              POP      {r4-r6,pc}
;;;10689  
                          ENDP

                  vent_resurs_hndl PROC
;;;10690  //-----------------------------------------------
;;;10691  void vent_resurs_hndl(void)
006acc  e92d47f0          PUSH     {r4-r10,lr}
;;;10692  {
;;;10693  char i;
;;;10694  char crc_in,crc_eval;
;;;10695  
;;;10696  for(i=0;i<NUMIST;i++)
006ad0  f04f0200          MOV      r2,#0
;;;10697  	{
;;;10698  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10699  		{
;;;10700  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10701  		}
;;;10702  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10703  		{
;;;10704  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10705  		}
;;;10706  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10707  		{
;;;10708  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10709  		}
;;;10710  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10711  		{
;;;10712  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10713  		}
;;;10714  	crc_in=0;
;;;10715  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10716  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10717  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10718  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10719  
;;;10720  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10721  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10722  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10723  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10724  
;;;10725  	if(crc_eval==crc_in)
;;;10726  		{
;;;10727  		unsigned short temp_US;
;;;10728  		temp_US=0;
;;;10729  
;;;10730  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10731  		temp_US<<=4;
;;;10732  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10733  		temp_US<<=4;
;;;10734  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10735  		temp_US<<=4;
;;;10736  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10737  
;;;10738  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10739  		}
;;;10740  
;;;10741  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006ad4  484f              LDR      r0,|L1.27668|
006ad6  f8dfc140          LDR      r12,|L1.27672|
006ada  f9b06000          LDRSH    r6,[r0,#0]
006ade  4843              LDR      r0,|L1.27628|
006ae0  f9b07000          LDRSH    r7,[r0,#0]            ;10696
006ae4  e0a3              B        |L1.27694|
                  |L1.27366|
006ae6  ebc200c2          RSB      r0,r2,r2,LSL #3       ;10698
006aea  eb001002          ADD      r0,r0,r2,LSL #4       ;10698
006aee  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10698
006af2  7b41              LDRB     r1,[r0,#0xd]          ;10698
006af4  098b              LSRS     r3,r1,#6              ;10698
006af6  d006              BEQ      |L1.27398|
006af8  2301              MOVS     r3,#1                 ;10702
006afa  ebb31f91          CMP      r3,r1,LSR #6          ;10702
006afe  d105              BNE      |L1.27404|
006b00  f8801055          STRB     r1,[r0,#0x55]         ;10704
006b04  e00f              B        |L1.27430|
                  |L1.27398|
006b06  f8801054          STRB     r1,[r0,#0x54]         ;10700
006b0a  e00c              B        |L1.27430|
                  |L1.27404|
006b0c  2302              MOVS     r3,#2                 ;10706
006b0e  ebb31f91          CMP      r3,r1,LSR #6          ;10706
006b12  d102              BNE      |L1.27418|
006b14  f8801056          STRB     r1,[r0,#0x56]         ;10708
006b18  e005              B        |L1.27430|
                  |L1.27418|
006b1a  2303              MOVS     r3,#3                 ;10710
006b1c  ebb31f91          CMP      r3,r1,LSR #6          ;10710
006b20  d101              BNE      |L1.27430|
006b22  f8801057          STRB     r1,[r0,#0x57]         ;10712
                  |L1.27430|
006b26  f8101f54          LDRB     r1,[r0,#0x54]!        ;10715
006b2a  f3c11401          UBFX     r4,r1,#4,#2           ;10715
006b2e  7843              LDRB     r3,[r0,#1]            ;10716
006b30  f0030530          AND      r5,r3,#0x30           ;10716
006b34  ea440495          ORR      r4,r4,r5,LSR #2       ;10716
006b38  f8909002          LDRB     r9,[r0,#2]            ;10717
006b3c  f0090830          AND      r8,r9,#0x30           ;10717
006b40  ea480804          ORR      r8,r8,r4              ;10717
006b44  78c5              LDRB     r5,[r0,#3]            ;10718
006b46  f1a00054          SUB      r0,r0,#0x54           ;10718
006b4a  f0050430          AND      r4,r5,#0x30           ;10718
006b4e  ea480884          ORR      r8,r8,r4,LSL #2       ;10718
006b52  f001010f          AND      r1,r1,#0xf            ;10720
006b56  f003040f          AND      r4,r3,#0xf            ;10721
006b5a  ea840a01          EOR      r10,r4,r1             ;10721
006b5e  f009030f          AND      r3,r9,#0xf            ;10722
006b62  ea83090a          EOR      r9,r3,r10             ;10722
006b66  f005050f          AND      r5,r5,#0xf            ;10723
006b6a  ea850909          EOR      r9,r5,r9              ;10723
006b6e  45c1              CMP      r9,r8                 ;10725
006b70  d113              BNE      |L1.27546|
006b72  ea4f1505          LSL      r5,r5,#4              ;10731
006b76  ea430305          ORR      r3,r3,r5              ;10732
006b7a  ea4f1303          LSL      r3,r3,#4              ;10733
006b7e  ea440403          ORR      r4,r4,r3              ;10734
006b82  ea4f5304          LSL      r3,r4,#20             ;10735
006b86  ea4f4313          LSR      r3,r3,#16             ;10735
006b8a  ea410103          ORR      r1,r1,r3              ;10736
006b8e  f8b03058          LDRH     r3,[r0,#0x58]         ;10738
006b92  428b              CMP      r3,r1                 ;10738
006b94  d001              BEQ      |L1.27546|
006b96  f8a01058          STRH     r1,[r0,#0x58]         ;10738
                  |L1.27546|
006b9a  f8b01058          LDRH     r1,[r0,#0x58]
006b9e  eb060386          ADD      r3,r6,r6,LSL #2
006ba2  ebb10f43          CMP      r1,r3,LSL #1
006ba6  dd3b              BLE      |L1.27680|
006ba8  2e00              CMP      r6,#0
006baa  dd39              BLE      |L1.27680|
;;;10742  		{
;;;10743  		bps[i]._av|=(1<<4);
006bac  7841              LDRB     r1,[r0,#1]
006bae  f0410110          ORR      r1,r1,#0x10
006bb2  e033              B        |L1.27676|
                  |L1.27572|
                          DCD      ||.text||+0x1a0c
                  |L1.27576|
006bb8  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006bbc  dbd0c0c2
006bc0  cdc8c2c0
006bc4  ded9c8c9
006bc8  20202020          DCB      "    ",0
006bcc  00      
006bcd  00                DCB      0
006bce  00                DCB      0
006bcf  00                DCB      0
                  |L1.27600|
                          DCD      hv_vz_wrk_cnt
                  |L1.27604|
                          DCD      hv_vz_up_cnt
                  |L1.27608|
                          DCD      VZ_HR
                  |L1.27612|
                          DCD      ||.text||+0x145c
                  |L1.27616|
                          DCD      ||.text||+0x22f8
                  |L1.27620|
                          DCD      ||area_number.25||+0x27
                  |L1.27624|
                          DCD      FORVARDBPSCHHOUR
                  |L1.27628|
                          DCD      NUMIST
                  |L1.27632|
                          DCD      load_U
                  |L1.27636|
                          DCD      U_OUT_KONTR_MAX
                  |L1.27640|
                          DCD      outVoltContrHndlCnt
                  |L1.27644|
                          DCD      outVoltContrHndlCnt_
                  |L1.27648|
                          DCD      U_OUT_KONTR_MIN
                  |L1.27652|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.27656|
                          DCD      uout_av
                  |L1.27660|
                          DCD      USIGN
                  |L1.27664|
                          DCD      bSILENT
                  |L1.27668|
                          DCD      TVENTMAX
                  |L1.27672|
                          DCD      bps
                  |L1.27676|
006c1c  7041              STRB     r1,[r0,#1]
006c1e  e003              B        |L1.27688|
                  |L1.27680|
;;;10744  		}
;;;10745  	else bps[i]._av&=~(1<<4);
006c20  7841              LDRB     r1,[r0,#1]
006c22  f0210110          BIC      r1,r1,#0x10
006c26  7041              STRB     r1,[r0,#1]
                  |L1.27688|
006c28  f1020201          ADD      r2,r2,#1              ;10696
006c2c  b2d2              UXTB     r2,r2                 ;10696
                  |L1.27694|
006c2e  42ba              CMP      r2,r7                 ;10696
006c30  f6ffaf59          BLT      |L1.27366|
;;;10746  	}
;;;10747  }
006c34  e8bd87f0          POP      {r4-r10,pc}
;;;10748  
                          ENDP

                  vent_hndl PROC
;;;10749  //-----------------------------------------------
;;;10750  void vent_hndl(void)
006c38  e92d4ff0          PUSH     {r4-r11,lr}
;;;10751  {
006c3c  b087              SUB      sp,sp,#0x1c
;;;10752  if(RELEVENTSIGN==rvsAKB)
006c3e  48ab              LDR      r0,|L1.28396|
;;;10753  	{
;;;10754  	if(vent_stat==0)
006c40  4cab              LDR      r4,|L1.28400|
;;;10755  		{
;;;10756  		if	(
;;;10757  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
006c42  49ac              LDR      r1,|L1.28404|
;;;10758  			||
;;;10759  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;10760  			)
;;;10761  			{
;;;10762  			vent_stat=1;
;;;10763  			}
;;;10764  		}
;;;10765  	else if(vent_stat==1)
;;;10766  		{
;;;10767  		if	(
;;;10768  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006c44  4aac              LDR      r2,|L1.28408|
006c46  7800              LDRB     r0,[r0,#0]            ;10752  ; RELEVENTSIGN
006c48  f9943000          LDRSB    r3,[r4,#0]            ;10754
006c4c  f9b11000          LDRSH    r1,[r1,#0]            ;10757
006c50  f9b22000          LDRSH    r2,[r2,#0]
006c54  b148              CBZ      r0,|L1.27754|
;;;10769  			&&
;;;10770  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;10771  			)
;;;10772  			{
;;;10773  			vent_stat=0;
;;;10774  			}
;;;10775  		}
;;;10776  	}
;;;10777  else if(RELEVENTSIGN==rvsBPS)
006c56  2802              CMP      r0,#2
006c58  d03c              BEQ      |L1.27860|
;;;10778  	{
;;;10779  /*	if	(
;;;10780  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;10781  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;10782  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;10783  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;10784  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;10785  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;10786  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;10787  		)
;;;10788  		{
;;;10789  		vent_stat=1;
;;;10790  		}
;;;10791  	else vent_stat=0;
;;;10792  	*/
;;;10793  
;;;10794  	if	(
;;;10795  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;10796  		||
;;;10797  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;10798  		||
;;;10799  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;10800  		||
;;;10801  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;10802  		||
;;;10803  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;10804  		||
;;;10805  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;10806  		||
;;;10807  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;10808  		||
;;;10809  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;10810  		)
;;;10811  		{
;;;10812  		vent_stat=1;
;;;10813  		}
;;;10814  	else if(vent_stat==1)
;;;10815  		{
;;;10816  		if	(
;;;10817  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;10818  			&&
;;;10819  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;10820  			&&
;;;10821  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;10822  			&&
;;;10823  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;10824  			&&
;;;10825  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;10826  			&&
;;;10827  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;10828  			&&
;;;10829  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;10830  			&&
;;;10831  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;10832  			)
;;;10833  			{
;;;10834  			vent_stat=0;
;;;10835  			}
;;;10836  		}
;;;10837  	}
;;;10838  else if(RELEVENTSIGN==rvsEXT)
006c5a  2801              CMP      r0,#1
006c5c  d07e              BEQ      |L1.27996|
;;;10839  	{
;;;10840  	if	(
;;;10841  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;10842  		||
;;;10843  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;10844  		||
;;;10845  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;10846  		)
;;;10847  		{
;;;10848  		vent_stat=1;
;;;10849  		}
;;;10850  	else if(vent_stat==1)
;;;10851  		{
;;;10852  		if	(
;;;10853  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;10854  			&&
;;;10855  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;10856  			&&
;;;10857  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;10858  			)
;;;10859  			{
;;;10860  			vent_stat=0;
;;;10861  			}
;;;10862  		}
;;;10863  	}
;;;10864  else vent_stat=1;
006c5e  f04f0001          MOV      r0,#1
006c62  7020              STRB     r0,[r4,#0]
                  |L1.27748|
;;;10865  }
006c64  b007              ADD      sp,sp,#0x1c
006c66  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.27754|
006c6a  4fa4              LDR      r7,|L1.28412|
006c6c  f8df8290          LDR      r8,|L1.28416|
006c70  f9b7000a          LDRSH    r0,[r7,#0xa]          ;10757
006c74  7b3d              LDRB     r5,[r7,#0xc]          ;10757
006c76  f9b76056          LDRSH    r6,[r7,#0x56]         ;10759
006c7a  f898c000          LDRB     r12,[r8,#0]           ;10756
006c7e  f8977058          LDRB     r7,[r7,#0x58]         ;10759
006c82  f8988001          LDRB     r8,[r8,#1]            ;10759
006c86  b12b              CBZ      r3,|L1.27796|
006c88  2b01              CMP      r3,#1                 ;10765
006c8a  d1eb              BNE      |L1.27748|
006c8c  f1bc0f55          CMP      r12,#0x55             ;10767
006c90  d115              BNE      |L1.27838|
006c92  e010              B        |L1.27830|
                  |L1.27796|
006c94  f1bc0f55          CMP      r12,#0x55             ;10756
006c98  d102              BNE      |L1.27808|
006c9a  4288              CMP      r0,r1                 ;10757
006c9c  dc07              BGT      |L1.27822|
006c9e  b935              CBNZ     r5,|L1.27822|
                  |L1.27808|
006ca0  f1b80f55          CMP      r8,#0x55              ;10759
006ca4  d1de              BNE      |L1.27748|
006ca6  428e              CMP      r6,r1                 ;10759
006ca8  dc01              BGT      |L1.27822|
006caa  2f00              CMP      r7,#0                 ;10759
006cac  d0da              BEQ      |L1.27748|
                  |L1.27822|
006cae  f04f0001          MOV      r0,#1                 ;10762
006cb2  7020              STRB     r0,[r4,#0]            ;10762
006cb4  e7d6              B        |L1.27748|
                  |L1.27830|
006cb6  4290              CMP      r0,r2                 ;10768
006cb8  dad4              BGE      |L1.27748|
006cba  2d00              CMP      r5,#0                 ;10768
006cbc  d1d2              BNE      |L1.27748|
                  |L1.27838|
006cbe  f1b80f55          CMP      r8,#0x55              ;10770
006cc2  d103              BNE      |L1.27852|
006cc4  4296              CMP      r6,r2                 ;10770
006cc6  dacd              BGE      |L1.27748|
006cc8  2f00              CMP      r7,#0                 ;10770
006cca  d1cb              BNE      |L1.27748|
                  |L1.27852|
006ccc  f04f0000          MOV      r0,#0                 ;10773
006cd0  7020              STRB     r0,[r4,#0]            ;10773
006cd2  e7c7              B        |L1.27748|
                  |L1.27860|
006cd4  4e8c              LDR      r6,|L1.28424|
006cd6  488b              LDR      r0,|L1.28420|
006cd8  6ab5              LDR      r5,[r6,#0x28]         ;10795
006cda  f9b00000          LDRSH    r0,[r0,#0]            ;10794  ; NUMIST
006cde  78f6              LDRB     r6,[r6,#3]            ;10795
006ce0  b118              CBZ      r0,|L1.27882|
006ce2  428d              CMP      r5,r1                 ;10795
006ce4  dc7a              BGT      |L1.28124|
006ce6  2e1e              CMP      r6,#0x1e              ;10795
006ce8  d278              BCS      |L1.28124|
                  |L1.27882|
006cea  f8dfc21c          LDR      r12,|L1.28424|
006cee  2801              CMP      r0,#1                 ;10797
006cf0  f8dc7084          LDR      r7,[r12,#0x84]        ;10797
006cf4  f89cc05f          LDRB     r12,[r12,#0x5f]       ;10797
006cf8  f8cdc018          STR      r12,[sp,#0x18]        ;10797
006cfc  dd06              BLE      |L1.27916|
006cfe  428f              CMP      r7,r1                 ;10797
006d00  dc6c              BGT      |L1.28124|
006d02  f8ddc018          LDR      r12,[sp,#0x18]        ;10797
006d06  f1bc0f1e          CMP      r12,#0x1e             ;10797
006d0a  d267              BCS      |L1.28124|
                  |L1.27916|
006d0c  f8dfc1f8          LDR      r12,|L1.28424|
006d10  2802              CMP      r0,#2                 ;10799
006d12  f8dc80e0          LDR      r8,[r12,#0xe0]        ;10799
006d16  f8cd8014          STR      r8,[sp,#0x14]         ;10799
006d1a  f89cc0bb          LDRB     r12,[r12,#0xbb]       ;10799
006d1e  f8cdc010          STR      r12,[sp,#0x10]        ;10799
006d22  dd08              BLE      |L1.27958|
006d24  f8ddc014          LDR      r12,[sp,#0x14]        ;10799
006d28  458c              CMP      r12,r1                ;10799
006d2a  dc57              BGT      |L1.28124|
006d2c  f8ddc010          LDR      r12,[sp,#0x10]        ;10799
006d30  f1bc0f1e          CMP      r12,#0x1e             ;10799
006d34  d252              BCS      |L1.28124|
                  |L1.27958|
006d36  f8dfc1d0          LDR      r12,|L1.28424|
006d3a  2803              CMP      r0,#3                 ;10801
006d3c  f8dc813c          LDR      r8,[r12,#0x13c]       ;10801
006d40  f8cd800c          STR      r8,[sp,#0xc]          ;10801
006d44  f89cc117          LDRB     r12,[r12,#0x117]      ;10801
006d48  f8cdc008          STR      r12,[sp,#8]           ;10801
006d4c  dd0a              BLE      |L1.28004|
006d4e  f8ddc00c          LDR      r12,[sp,#0xc]         ;10801
006d52  458c              CMP      r12,r1                ;10801
006d54  dc42              BGT      |L1.28124|
006d56  f8ddc008          LDR      r12,[sp,#8]           ;10801
006d5a  e000              B        |L1.27998|
                  |L1.27996|
006d5c  e080              B        |L1.28256|
                  |L1.27998|
006d5e  f1bc0f1e          CMP      r12,#0x1e             ;10801
006d62  d23b              BCS      |L1.28124|
                  |L1.28004|
006d64  f8df81a0          LDR      r8,|L1.28424|
006d68  2804              CMP      r0,#4                 ;10803
006d6a  f8d8c198          LDR      r12,[r8,#0x198]       ;10803
006d6e  f8988173          LDRB     r8,[r8,#0x173]        ;10803
006d72  f8cd8004          STR      r8,[sp,#4]            ;10803
006d76  dd06              BLE      |L1.28038|
006d78  458c              CMP      r12,r1                ;10803
006d7a  dc2f              BGT      |L1.28124|
006d7c  f8dd8004          LDR      r8,[sp,#4]            ;10803
006d80  f1b80f1e          CMP      r8,#0x1e              ;10803
006d84  d22a              BCS      |L1.28124|
                  |L1.28038|
006d86  f8df9180          LDR      r9,|L1.28424|
006d8a  2805              CMP      r0,#5                 ;10805
006d8c  f8d981f4          LDR      r8,[r9,#0x1f4]        ;10805
006d90  f89991cf          LDRB     r9,[r9,#0x1cf]        ;10805
006d94  f8cd9000          STR      r9,[sp,#0]            ;10805
006d98  dd06              BLE      |L1.28072|
006d9a  4588              CMP      r8,r1                 ;10805
006d9c  dc1e              BGT      |L1.28124|
006d9e  f8dd9000          LDR      r9,[sp,#0]            ;10805
006da2  f1b90f1e          CMP      r9,#0x1e              ;10805
006da6  d219              BCS      |L1.28124|
                  |L1.28072|
006da8  f8dfa15c          LDR      r10,|L1.28424|
006dac  2806              CMP      r0,#6                 ;10807
006dae  f89ae22b          LDRB     lr,[r10,#0x22b]       ;10807
006db2  f8da9250          LDR      r9,[r10,#0x250]       ;10807
006db6  dd04              BLE      |L1.28098|
006db8  4589              CMP      r9,r1                 ;10807
006dba  dc0f              BGT      |L1.28124|
006dbc  f1be0f1e          CMP      lr,#0x1e              ;10807
006dc0  d20c              BCS      |L1.28124|
                  |L1.28098|
006dc2  f8dfb144          LDR      r11,|L1.28424|
006dc6  2807              CMP      r0,#7                 ;10809
006dc8  f8dba2ac          LDR      r10,[r11,#0x2ac]      ;10809
006dcc  f89bb287          LDRB     r11,[r11,#0x287]      ;10809
006dd0  dd08              BLE      |L1.28132|
006dd2  458a              CMP      r10,r1                ;10809
006dd4  dc02              BGT      |L1.28124|
006dd6  f1bb0f1e          CMP      r11,#0x1e             ;10809
006dda  d303              BCC      |L1.28132|
                  |L1.28124|
006ddc  f04f0001          MOV      r0,#1                 ;10812
006de0  7020              STRB     r0,[r4,#0]            ;10812
                  |L1.28130|
006de2  e73f              B        |L1.27748|
                  |L1.28132|
006de4  2b01              CMP      r3,#1                 ;10814
006de6  d1fc              BNE      |L1.28130|
006de8  b118              CBZ      r0,|L1.28146|
006dea  4295              CMP      r5,r2                 ;10817
006dec  daf9              BGE      |L1.28130|
006dee  2e0a              CMP      r6,#0xa               ;10817
006df0  d2f7              BCS      |L1.28130|
                  |L1.28146|
006df2  2802              CMP      r0,#2                 ;10819
006df4  db04              BLT      |L1.28160|
006df6  4297              CMP      r7,r2                 ;10819
006df8  daf3              BGE      |L1.28130|
006dfa  9906              LDR      r1,[sp,#0x18]         ;10819
006dfc  290a              CMP      r1,#0xa               ;10819
006dfe  d2f0              BCS      |L1.28130|
                  |L1.28160|
006e00  2803              CMP      r0,#3                 ;10821
006e02  db05              BLT      |L1.28176|
006e04  9905              LDR      r1,[sp,#0x14]         ;10821
006e06  4291              CMP      r1,r2                 ;10821
006e08  daeb              BGE      |L1.28130|
006e0a  9904              LDR      r1,[sp,#0x10]         ;10821
006e0c  290a              CMP      r1,#0xa               ;10821
006e0e  d2e8              BCS      |L1.28130|
                  |L1.28176|
006e10  2804              CMP      r0,#4                 ;10823
006e12  db05              BLT      |L1.28192|
006e14  9903              LDR      r1,[sp,#0xc]          ;10823
006e16  4291              CMP      r1,r2                 ;10823
006e18  dae3              BGE      |L1.28130|
006e1a  9902              LDR      r1,[sp,#8]            ;10823
006e1c  290a              CMP      r1,#0xa               ;10823
006e1e  d2e0              BCS      |L1.28130|
                  |L1.28192|
006e20  2805              CMP      r0,#5                 ;10825
006e22  db04              BLT      |L1.28206|
006e24  4594              CMP      r12,r2                ;10825
006e26  dadc              BGE      |L1.28130|
006e28  9901              LDR      r1,[sp,#4]            ;10825
006e2a  290a              CMP      r1,#0xa               ;10825
006e2c  d2d9              BCS      |L1.28130|
                  |L1.28206|
006e2e  2806              CMP      r0,#6                 ;10827
006e30  db04              BLT      |L1.28220|
006e32  4590              CMP      r8,r2                 ;10827
006e34  dad5              BGE      |L1.28130|
006e36  9900              LDR      r1,[sp,#0]            ;10827
006e38  290a              CMP      r1,#0xa               ;10827
006e3a  d2d2              BCS      |L1.28130|
                  |L1.28220|
006e3c  2807              CMP      r0,#7                 ;10829
006e3e  db04              BLT      |L1.28234|
006e40  4591              CMP      r9,r2                 ;10829
006e42  dace              BGE      |L1.28130|
006e44  f1be0f0a          CMP      lr,#0xa               ;10829
006e48  d2cb              BCS      |L1.28130|
                  |L1.28234|
006e4a  2808              CMP      r0,#8                 ;10831
006e4c  db04              BLT      |L1.28248|
006e4e  4592              CMP      r10,r2                ;10831
006e50  dac7              BGE      |L1.28130|
006e52  f1bb0f0a          CMP      r11,#0xa              ;10831
006e56  d2c4              BCS      |L1.28130|
                  |L1.28248|
006e58  f04f0000          MOV      r0,#0                 ;10834
006e5c  7020              STRB     r0,[r4,#0]            ;10834
                  |L1.28254|
006e5e  e701              B        |L1.27748|
                  |L1.28256|
006e60  482a              LDR      r0,|L1.28428|
006e62  4d2b              LDR      r5,|L1.28432|
006e64  4e2b              LDR      r6,|L1.28436|
006e66  f9b00000          LDRSH    r0,[r0,#0]            ;10840  ; NUMDT
006e6a  f9b55000          LDRSH    r5,[r5,#0]            ;10841
006e6e  7836              LDRB     r6,[r6,#0]            ;10841
006e70  b110              CBZ      r0,|L1.28280|
006e72  428d              CMP      r5,r1                 ;10841
006e74  dc1d              BGT      |L1.28338|
006e76  b9e6              CBNZ     r6,|L1.28338|
                  |L1.28280|
006e78  4f25              LDR      r7,|L1.28432|
006e7a  f8dfc098          LDR      r12,|L1.28436|
006e7e  2801              CMP      r0,#1                 ;10843
006e80  f9b77002          LDRSH    r7,[r7,#2]            ;10843
006e84  f89cc001          LDRB     r12,[r12,#1]          ;10843
006e88  dd04              BLE      |L1.28308|
006e8a  428f              CMP      r7,r1                 ;10843
006e8c  dc11              BGT      |L1.28338|
006e8e  f1bc0f00          CMP      r12,#0                ;10843
006e92  d10e              BNE      |L1.28338|
                  |L1.28308|
006e94  f8df8078          LDR      r8,|L1.28432|
006e98  f8df9078          LDR      r9,|L1.28436|
006e9c  2802              CMP      r0,#2                 ;10845
006e9e  f9b88004          LDRSH    r8,[r8,#4]            ;10845
006ea2  f8999002          LDRB     r9,[r9,#2]            ;10845
006ea6  dd08              BLE      |L1.28346|
006ea8  4588              CMP      r8,r1                 ;10845
006eaa  dc02              BGT      |L1.28338|
006eac  f1b90f00          CMP      r9,#0                 ;10845
006eb0  d003              BEQ      |L1.28346|
                  |L1.28338|
006eb2  f04f0001          MOV      r0,#1                 ;10848
006eb6  7020              STRB     r0,[r4,#0]            ;10848
006eb8  e6d4              B        |L1.27748|
                  |L1.28346|
006eba  2b01              CMP      r3,#1                 ;10850
006ebc  d191              BNE      |L1.28130|
006ebe  b118              CBZ      r0,|L1.28360|
006ec0  4295              CMP      r5,r2                 ;10853
006ec2  da8e              BGE      |L1.28130|
006ec4  2e00              CMP      r6,#0                 ;10853
006ec6  d18c              BNE      |L1.28130|
                  |L1.28360|
006ec8  2802              CMP      r0,#2                 ;10855
006eca  db04              BLT      |L1.28374|
006ecc  4297              CMP      r7,r2                 ;10855
006ece  da88              BGE      |L1.28130|
006ed0  f1bc0f00          CMP      r12,#0                ;10855
006ed4  d185              BNE      |L1.28130|
                  |L1.28374|
006ed6  2803              CMP      r0,#3                 ;10857
006ed8  db04              BLT      |L1.28388|
006eda  4590              CMP      r8,r2                 ;10857
006edc  dabf              BGE      |L1.28254|
006ede  f1b90f00          CMP      r9,#0                 ;10857
006ee2  d1bc              BNE      |L1.28254|
                  |L1.28388|
006ee4  f04f0000          MOV      r0,#0                 ;10860
006ee8  7020              STRB     r0,[r4,#0]            ;10860
006eea  e6bb              B        |L1.27748|
;;;10866  
                          ENDP

                  |L1.28396|
                          DCD      RELEVENTSIGN
                  |L1.28400|
                          DCD      ||area_number.25||
                  |L1.28404|
                          DCD      TVENTON
                  |L1.28408|
                          DCD      TVENTOFF
                  |L1.28412|
                          DCD      bat
                  |L1.28416|
                          DCD      BAT_IS_ON
                  |L1.28420|
                          DCD      NUMIST
                  |L1.28424|
                          DCD      bps
                  |L1.28428|
                          DCD      NUMDT
                  |L1.28432|
                          DCD      t_ext
                  |L1.28436|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;306    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;307    if(spc_stat!=spcVZ) 
;;;308    	{
;;;309    	vz_error=0;
000006  f8a1004e          STRH     r0,[r1,#0x4e]
00000a  4770              BX       lr                    ;307
;;;310    	sp_ch_error=0;
;;;311    	vz1_error=0;
;;;312    	vz2_error=0;
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
;;;551    	snmp_bat_flag_puts[0]=0;
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
;;;790    	snmp_bat_flag_puts[1]=0;
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
;;;916    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  4c80              LDR      r4,|L3.520|
;;;308    	{
;;;309    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;307  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;307
00000c  b200              SXTH     r0,r0                 ;307
00000e  f7fffffe          BL       abs_pal
;;;310    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;311    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;312    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;315  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;315  ; adc_self_ch_buff
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;315
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  f44f7196          MOV      r1,#0x12c
;;;551    	snmp_bat_flag_puts[0]=0;
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f1a406ee          SUB      r6,r4,#0xee
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;790    	snmp_bat_flag_puts[1]=0;
000040  8770              STRH     r0,[r6,#0x3a]
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;317
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;317  ; adc_self_ch_buff
00004e  8770              STRH     r0,[r6,#0x3a]         ;317
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;319  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;317
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;319  ; adc_self_ch_buff
00005c  8770              STRH     r0,[r6,#0x3a]         ;320
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;320  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;320
000062  b3f7              CBZ      r7,|L3.226|
000064  7d33              LDRB     r3,[r6,#0x14]         ;319  ; adc_window_flag
000066  4869              LDR      r0,|L3.524|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103a          LDRSH    r1,[r6,#0x3a]         ;320  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;322  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;322
000074  6004              STR      r4,[r0,#0]            ;322  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;322  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;322
00007c  6044              STR      r4,[r0,#4]            ;323  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;323  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;323
000084  6084              STR      r4,[r0,#8]            ;328  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;328  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;328
00008c  60c1              STR      r1,[r0,#0xc]          ;329  ; main_power_buffer
                  |L3.142|
00008e  f9b6103a          LDRSH    r1,[r6,#0x3a]         ;331  ; adc_result
000092  2964              CMP      r1,#0x64              ;331
000094  da04              BGE      |L3.160|
000096  8ff1              LDRH     r1,[r6,#0x3e]         ;331  ; adc_zero_cnt
000098  f1010101          ADD      r1,r1,#1              ;331
00009c  87f1              STRH     r1,[r6,#0x3e]         ;332
00009e  e000              B        |L3.162|
                  |L3.160|
0000a0  87f2              STRH     r2,[r6,#0x3e]         ;332
                  |L3.162|
0000a2  f9b6403e          LDRSH    r4,[r6,#0x3e]         ;336  ; adc_zero_cnt
0000a6  f44f61fa          MOV      r1,#0x7d0             ;336
0000aa  428c              CMP      r4,r1                 ;338
0000ac  db05              BLT      |L3.186|
0000ae  87f1              STRH     r1,[r6,#0x3e]         ;338
0000b0  6002              STR      r2,[r0,#0]            ;338  ; main_power_buffer
0000b2  6042              STR      r2,[r0,#4]            ;339  ; main_power_buffer
0000b4  6082              STR      r2,[r0,#8]            ;339  ; main_power_buffer
0000b6  60c2              STR      r2,[r0,#0xc]          ;339  ; main_power_buffer
0000b8  8732              STRH     r2,[r6,#0x38]         ;341
                  |L3.186|
0000ba  8ff1              LDRH     r1,[r6,#0x3e]         ;341  ; adc_zero_cnt
0000bc  2905              CMP      r1,#5                 ;341
0000be  d14f              BNE      |L3.352|
0000c0  b1bb              CBZ      r3,|L3.242|
0000c2  8fb1              LDRH     r1,[r6,#0x3c]         ;341  ; adc_gorb_cnt
0000c4  f1010101          ADD      r1,r1,#1              ;342
0000c8  b209              SXTH     r1,r1                 ;342
0000ca  87b1              STRH     r1,[r6,#0x3c]         ;342
0000cc  f5b17f00          CMP      r1,#0x200             ;342
0000d0  db00              BLT      |L3.212|
0000d2  87b2              STRH     r2,[r6,#0x3c]         ;347
                  |L3.212|
0000d4  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;347  ; adc_gorb_cnt
0000d8  064c              LSLS     r4,r1,#25             ;348
0000da  d10a              BNE      |L3.242|
0000dc  ea4f11e1          ASR      r1,r1,#7              ;350
0000e0  e000              B        |L3.228|
                  |L3.226|
0000e2  e015              B        |L3.272|
                  |L3.228|
0000e4  f8504021          LDR      r4,[r0,r1,LSL #2]     ;350
0000e8  ea4f2424          ASR      r4,r4,#8              ;351
0000ec  8734              STRH     r4,[r6,#0x38]         ;351
0000ee  f8402021          STR      r2,[r0,r1,LSL #2]     ;351
                  |L3.242|
0000f2  f9b60040          LDRSH    r0,[r6,#0x40]         ;355  ; adc_window_cnt
0000f6  2896              CMP      r0,#0x96              ;355
0000f8  dd01              BLE      |L3.254|
0000fa  b103              CBZ      r3,|L3.254|
0000fc  7532              STRB     r2,[r6,#0x14]         ;357
                  |L3.254|
0000fe  381f              SUBS     r0,r0,#0x1f           ;357
000100  2827              CMP      r0,#0x27              ;358
000102  d22d              BCS      |L3.352|
000104  7d30              LDRB     r0,[r6,#0x14]         ;358  ; adc_window_flag
000106  bb58              CBNZ     r0,|L3.352|
000108  f04f0001          MOV      r0,#1                 ;360
00010c  7530              STRB     r0,[r6,#0x14]         ;360
00010e  e027              B        |L3.352|
                  |L3.272|
000110  483f              LDR      r0,|L3.528|
000112  7cb5              LDRB     r5,[r6,#0x12]         ;361  ; adc_ch
000114  7cf3              LDRB     r3,[r6,#0x13]         ;361  ; adc_ch_cnt
000116  eb001485          ADD      r4,r0,r5,LSL #6       ;361
00011a  f9b6103a          LDRSH    r1,[r6,#0x3a]         ;361  ; adc_result
00011e  f8441023          STR      r1,[r4,r3,LSL #2]     ;366
000122  0798              LSLS     r0,r3,#30             ;366
000124  d10f              BNE      |L3.326|
000126  4601              MOV      r1,r0                 ;367
                  |L3.296|
000128  f854c020          LDR      r12,[r4,r0,LSL #2]    ;367
00012c  4461              ADD      r1,r1,r12             ;369
00012e  f1000001          ADD      r0,r0,#1              ;369
000132  b2c0              UXTB     r0,r0                 ;369
000134  2810              CMP      r0,#0x10              ;369
000136  d3f7              BCC      |L3.296|
000138  ea4f1021          ASR      r0,r1,#4              ;370
00013c  4933              LDR      r1,|L3.524|
00013e  f1a10120          SUB      r1,r1,#0x20           ;370
000142  f8210015          STRH     r0,[r1,r5,LSL #1]     ;374
                  |L3.326|
000146  1c6d              ADDS     r5,r5,#1              ;374
000148  b2e8              UXTB     r0,r5                 ;374
00014a  74b0              STRB     r0,[r6,#0x12]         ;374
00014c  2810              CMP      r0,#0x10              ;374
00014e  d307              BCC      |L3.352|
000150  74b2              STRB     r2,[r6,#0x12]         ;374
000152  f1030301          ADD      r3,r3,#1              ;374
000156  b2d8              UXTB     r0,r3                 ;374
000158  74f0              STRB     r0,[r6,#0x13]         ;374
00015a  2810              CMP      r0,#0x10              ;375
00015c  d300              BCC      |L3.352|
00015e  74f2              STRB     r2,[r6,#0x13]         ;375
                  |L3.352|
000160  7432              STRB     r2,[r6,#0x10]         ;375
000162  f1070701          ADD      r7,r7,#1              ;375
000166  f0070001          AND      r0,r7,#1              ;377
00016a  7470              STRB     r0,[r6,#0x11]         ;377
00016c  4a29              LDR      r2,|L3.532|
00016e  b130              CBZ      r0,|L3.382|
000170  6810              LDR      r0,[r2,#0]            ;377
000172  f02000ff          BIC      r0,r0,#0xff           ;377
000176  f1000004          ADD      r0,r0,#4              ;388
00017a  6010              STR      r0,[r2,#0]            ;388
00017c  e03d              B        |L3.506|
                  |L3.382|
00017e  7cb1              LDRB     r1,[r6,#0x12]         ;389  ; adc_ch
000180  0708              LSLS     r0,r1,#28             ;389
000182  d406              BMI      |L3.402|
000184  6810              LDR      r0,[r2,#0]            ;391
000186  f02000ff          BIC      r0,r0,#0xff           ;391
00018a  f1000001          ADD      r0,r0,#1              ;391
00018e  6010              STR      r0,[r2,#0]            ;391
000190  e005              B        |L3.414|
                  |L3.402|
000192  6810              LDR      r0,[r2,#0]            ;392
000194  f02000ff          BIC      r0,r0,#0xff           ;392
000198  f1000002          ADD      r0,r0,#2              ;396
00019c  6010              STR      r0,[r2,#0]            ;396
                  |L3.414|
00019e  481e              LDR      r0,|L3.536|
0001a0  6803              LDR      r3,[r0,#0]            ;407
0001a2  f0435380          ORR      r3,r3,#0x10000000     ;407
0001a6  6003              STR      r3,[r0,#0]            ;407
0001a8  6a03              LDR      r3,[r0,#0x20]         ;408
0001aa  f0434380          ORR      r3,r3,#0x40000000     ;408
0001ae  6203              STR      r3,[r0,#0x20]         ;410
0001b0  6e03              LDR      r3,[r0,#0x60]         ;410
0001b2  f0436380          ORR      r3,r3,#0x4000000      ;410
0001b6  6603              STR      r3,[r0,#0x60]         ;410
0001b8  07cb              LSLS     r3,r1,#31             ;410
0001ba  d00a              BEQ      |L3.466|
0001bc  6943              LDR      r3,[r0,#0x14]         ;411
0001be  f0435380          ORR      r3,r3,#0x10000000     ;411
0001c2  6143              STR      r3,[r0,#0x14]         ;415
                  |L3.452|
0001c4  078b              LSLS     r3,r1,#30             ;415
0001c6  d409              BMI      |L3.476|
0001c8  6b43              LDR      r3,[r0,#0x34]         ;417
0001ca  f0234380          BIC      r3,r3,#0x40000000     ;417
0001ce  6343              STR      r3,[r0,#0x34]         ;417
0001d0  e008              B        |L3.484|
                  |L3.466|
0001d2  6943              LDR      r3,[r0,#0x14]         ;418
0001d4  f0235380          BIC      r3,r3,#0x10000000     ;418
0001d8  6143              STR      r3,[r0,#0x14]         ;420
0001da  e7f3              B        |L3.452|
                  |L3.476|
0001dc  6b43              LDR      r3,[r0,#0x34]         ;420
0001de  f0434380          ORR      r3,r3,#0x40000000     ;420
0001e2  6343              STR      r3,[r0,#0x34]         ;421
                  |L3.484|
0001e4  0749              LSLS     r1,r1,#29             ;421
0001e6  d404              BMI      |L3.498|
0001e8  6f41              LDR      r1,[r0,#0x74]         ;421
0001ea  f0216180          BIC      r1,r1,#0x4000000      ;421
0001ee  6741              STR      r1,[r0,#0x74]         ;379
0001f0  e003              B        |L3.506|
                  |L3.498|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;379
0001f4  f0416180          ORR      r1,r1,#0x4000000      ;380
0001f8  6741              STR      r1,[r0,#0x74]         ;380
                  |L3.506|
0001fa  6810              LDR      r0,[r2,#0]            ;382
0001fc  f0407080          ORR      r0,r0,#0x1000000      ;382
000200  6010              STR      r0,[r2,#0]            ;382
000202  e8bd81f0          POP      {r4-r8,pc}            ;382
;;;916    
                          ENDP

000206  0000              DCW      0x0000
                  |L3.520|
                          DCD      ||area_number.25||+0xee
                  |L3.524|
                          DCD      ||.bss||+0x42c
                  |L3.528|
                          DCD      ||.bss||+0xc
                  |L3.532|
                          DCD      0x40034000
                  |L3.536|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;308    	{
;;;309    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;307
00000c  7820              LDRB     r0,[r4,#0]            ;307  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;307
000010  b2c0              UXTB     r0,r0
;;;310    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;311    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;312    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;315
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;320  ; bps_I
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  8008              STRH     r0,[r1,#0]
;;;551    	snmp_bat_flag_puts[0]=0;
000034  495d              LDR      r1,|L4.428|
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;790    	snmp_bat_flag_puts[1]=0;
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]            ;317
00004c  4288              CMP      r0,r1                 ;317
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;317
000054  f1b90f0a          CMP      r9,#0xa               ;317
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;319
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;320
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;317
000064  280a              CMP      r0,#0xa               ;319
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;319
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;322
000072  f88c2001          STRB     r2,[r12,#1]           ;322
000076  f1a30301          SUB      r3,r3,#1              ;322
00007a  f8a83000          STRH     r3,[r8,#0]            ;323
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;323
000084  f88c2001          STRB     r2,[r12,#1]           ;328
000088  f1030301          ADD      r3,r3,#1              ;328
00008c  f8a83000          STRH     r3,[r8,#0]            ;329
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;331
000092  4251              RSBS     r1,r2,#0              ;331
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;332  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;336
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;336  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;336
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;338  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;338
0000b4  f04f0004          MOV      r0,#4                 ;339
0000b8  f88d0001          STRB     r0,[sp,#1]            ;341
0000bc  f88d5002          STRB     r5,[sp,#2]            ;341
0000c0  f04f0002          MOV      r0,#2                 ;341
0000c4  f88d0003          STRB     r0,[sp,#3]            ;342
0000c8  f88d5004          STRB     r5,[sp,#4]            ;342
0000cc  f04f0001          MOV      r0,#1                 ;342
0000d0  f88d0005          STRB     r0,[sp,#5]            ;347
0000d4  f04f0106          MOV      r1,#6                 ;347
0000d8  4668              MOV      r0,sp                 ;348
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;350
0000e2  ea4f2020          ASR      r0,r0,#8              ;350
0000e6  f88d0007          STRB     r0,[sp,#7]            ;350
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;351  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;355
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;355
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;357  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;357
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;358
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22050          LDRSH    r2,[r2,#0x50]         ;360  ; main_kb_cnt
00010a  4291              CMP      r1,r2                 ;360
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]            ;360  ; ICA_EN
000110  2901              CMP      r1,#1                 ;360
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]            ;361  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]            ;361
00011c  f04f0106          MOV      r1,#6                 ;366
000120  f88d1001          STRB     r1,[sp,#1]            ;366
000124  f88d5002          STRB     r5,[sp,#2]            ;367
000128  f04f011e          MOV      r1,#0x1e              ;367
00012c  f88d1003          STRB     r1,[sp,#3]            ;369
000130  ea4f71e0          ASR      r1,r0,#31             ;369
000134  eb006111          ADD      r1,r0,r1,LSR #24      ;369
000138  ea4f2221          ASR      r2,r1,#8              ;370
00013c  f88d2004          STRB     r2,[sp,#4]            ;370
000140  f88d0005          STRB     r0,[sp,#5]            ;370
000144  f04f0106          MOV      r1,#6                 ;374
000148  4668              MOV      r0,sp                 ;374
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]            ;374
000152  ea4f2020          ASR      r0,r0,#8              ;374
000156  f88d0007          STRB     r0,[sp,#7]            ;374
00015a  8838              LDRH     r0,[r7,#0]            ;375  ; ICA_CH
00015c  2800              CMP      r0,#0                 ;375
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0                 ;375
000162  466d              MOV      r5,sp                 ;375
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]            ;375
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1              ;377
000172  b2e4              UXTB     r4,r4                 ;377
000174  2c08              CMP      r4,#8                 ;377
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14           ;388
00017a  e8bd83f0          POP      {r4-r9,pc}            ;388
                  |L4.382|
00017e  f04f0400          MOV      r4,#0                 ;389
000182  46e9              MOV      r9,sp                 ;389
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]            ;391
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1              ;391
000190  b2e4              UXTB     r4,r4                 ;392
000192  2c08              CMP      r4,#8                 ;392
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;916    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;306    {  
000002  4604              MOV      r4,r0
;;;307    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;308    	{
;;;309    	vz_error=0;
;;;310    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;311    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;312    	vz2_error=0;
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;315
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;319
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;320
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  b101              CBZ      r1,|L5.54|
;;;551    	snmp_bat_flag_puts[0]=0;
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;790    	snmp_bat_flag_puts[1]=0;
000040  f1000001          ADD      r0,r0,#1
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;317
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;317
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;317
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;317
000058  461a              MOV      r2,r3                 ;319
00005a  210e              MOVS     r1,#0xe               ;319
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;319
000066  2202              MOVS     r2,#2                 ;319
000068  210e              MOVS     r1,#0xe               ;319
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;322
000074  2203              MOVS     r2,#3                 ;322
000076  210e              MOVS     r1,#0xe               ;322
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;323
000082  2204              MOVS     r2,#4                 ;323
000084  210e              MOVS     r1,#0xe               ;328
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;331
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;331
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;331  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;331
00009c  70d0              STRB     r0,[r2,#3]            ;332
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;332
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;336
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;336
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;338
0000b0  2201              MOVS     r2,#1                 ;338
0000b2  210e              MOVS     r1,#0xe               ;339
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;341
0000be  461a              MOV      r2,r3                 ;341
0000c0  210e              MOVS     r1,#0xe               ;341
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;342
0000cc  2203              MOVS     r2,#3                 ;342
0000ce  210e              MOVS     r1,#0xe               ;347
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;348
0000da  2204              MOVS     r2,#4                 ;348
0000dc  210e              MOVS     r1,#0xe               ;350
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;350
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;351
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;351  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;355
0000f4  70d0              STRB     r0,[r2,#3]            ;355
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;357
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;357
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;358
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3                 ;360
000108  2201              MOVS     r2,#1                 ;360
00010a  210e              MOVS     r1,#0xe               ;360
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3                 ;361
000116  2202              MOVS     r2,#2                 ;361
000118  210e              MOVS     r1,#0xe               ;361
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3                 ;366
000124  461a              MOV      r2,r3                 ;367
000126  210e              MOVS     r1,#0xe               ;367
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3                 ;369
000132  2204              MOVS     r2,#4                 ;369
000134  210e              MOVS     r1,#0xe               ;369
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28             ;370
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28             ;374
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]            ;374  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1              ;374
00014c  70d0              STRB     r0,[r2,#3]            ;374
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1                 ;374
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2                 ;374
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3                 ;374
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4                 ;375
000160  2201              MOVS     r2,#1                 ;375
000162  210e              MOVS     r1,#0xe               ;375
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4                 ;377
00016e  2202              MOVS     r2,#2                 ;377
000170  210e              MOVS     r1,#0xe               ;377
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4                 ;388
00017c  2203              MOVS     r2,#3                 ;388
00017e  210e              MOVS     r1,#0xe               ;389
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4                 ;391
00018a  461a              MOV      r2,r3                 ;391
00018c  210e              MOVS     r1,#0xe               ;391
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27             ;392
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27             ;396
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]            ;396  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1              ;407
0001a4  70d0              STRB     r0,[r2,#3]            ;407
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1                 ;408
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2                 ;408
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;410
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;410
0001b8  2201              MOVS     r2,#1                 ;410
0001ba  210e              MOVS     r1,#0xe               ;411
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;415
0001c6  2202              MOVS     r2,#2                 ;415
0001c8  210e              MOVS     r1,#0xe               ;417
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;418
0001d4  2203              MOVS     r2,#3                 ;418
0001d6  210e              MOVS     r1,#0xe               ;420
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;420
0001e2  2204              MOVS     r2,#4                 ;421
0001e4  210e              MOVS     r1,#0xe               ;421
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;379
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;379
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;380  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1              ;380
0001fc  70d0              STRB     r0,[r2,#3]            ;382
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1                 ;382
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2                 ;382
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3                 ;383
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6                 ;383
000210  2201              MOVS     r2,#1                 ;398
000212  210e              MOVS     r1,#0xe               ;398
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6                 ;399
00021e  2202              MOVS     r2,#2                 ;401
000220  210e              MOVS     r1,#0xe               ;401
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6                 ;402
00022c  2203              MOVS     r2,#3                 ;402
00022e  210e              MOVS     r1,#0xe               ;402
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6                 ;426
00023a  2204              MOVS     r2,#4                 ;426
00023c  210e              MOVS     r1,#0xe               ;427
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]            ;429  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1              ;429
000250  70d0              STRB     r0,[r2,#3]            ;430
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1                 ;430
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2                 ;434
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3                 ;434
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0                 ;445
000264  2201              MOVS     r2,#1                 ;445
000266  210e              MOVS     r1,#0xe               ;446
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;448
000272  2202              MOVS     r2,#2                 ;448
000274  210e              MOVS     r1,#0xe               ;448
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;449
000280  2203              MOVS     r2,#3                 ;453
000282  210e              MOVS     r1,#0xe               ;453
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;456
00028e  2204              MOVS     r2,#4                 ;456
000290  210e              MOVS     r1,#0xe               ;456
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!        ;458
00029c  7068              STRB     r0,[r5,#1]            ;458
00029e  bd70              POP      {r4-r6,pc}            ;459
;;;916    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb8
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;308    	{
;;;309    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;307  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;307  ; TBOXMAX
;;;310    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;311    	vz1_error=0;
;;;312    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;315
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;319
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
;;;551    	snmp_bat_flag_puts[0]=0;
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
00003e  dd00              BLE      |L6.66|
;;;790    	snmp_bat_flag_puts[1]=0;
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;317
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;317  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;319  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;319
00005a  4298              CMP      r0,r3                 ;319
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;320  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;317
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;319
00006a  b249              SXTB     r1,r1                 ;320
00006c  7011              STRB     r1,[r2,#0]            ;320
00006e  291e              CMP      r1,#0x1e              ;322
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;322  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;322
000078  8039              STRH     r1,[r7,#0]            ;322
00007a  7014              STRB     r4,[r2,#0]            ;323
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;323
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;323  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;328
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;329
00008e  b249              SXTB     r1,r1                 ;331
000090  7011              STRB     r1,[r2,#0]            ;331
000092  291e              CMP      r1,#0x1e              ;331
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;331  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;331
00009c  8039              STRH     r1,[r7,#0]            ;332
00009e  7014              STRB     r4,[r2,#0]            ;332
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;336
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;336  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;338
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;338
0000b0  2100              MOVS     r1,#0                 ;338
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;341
0000be  8800              LDRH     r0,[r0,#0]            ;341  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;341
0000c2  b202              SXTH     r2,r0                 ;341
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;342
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;347  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;348
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;348  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;350
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;350  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;350
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;351
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;351
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;355  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;357
0000fc  2928              CMP      r1,#0x28              ;357
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;358  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0                 ;360
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]            ;360  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1              ;360
000110  8038              STRH     r0,[r7,#0]            ;360
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]            ;361  ; TBATENABLE
000118  4281              CMP      r1,r0                 ;361
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]            ;366  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1              ;366
000122  8038              STRH     r0,[r7,#0]            ;366
                  |L6.292|
000124  2206              MOVS     r2,#6                 ;367
000126  2100              MOVS     r1,#0                 ;367
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]            ;369  ; tbatdisable_cnt
000132  2805              CMP      r0,#5                 ;369
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]            ;370
                  |L6.314|
00013a  2801              CMP      r0,#1                 ;370
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]            ;370
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]            ;374
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]            ;374  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32           ;374
000154  291e              CMP      r1,#0x1e              ;374
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]            ;374  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0                 ;375
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]            ;375  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1              ;375
000168  8028              STRH     r0,[r5,#0]            ;377
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]            ;377  ; TLOADENABLE
000170  4281              CMP      r1,r0                 ;377
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]            ;377  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1              ;388
00017a  8028              STRH     r0,[r5,#0]            ;388
                  |L6.380|
00017c  2206              MOVS     r2,#6                 ;388
00017e  2100              MOVS     r1,#0                 ;389
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]            ;391  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5                 ;391
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]            ;391
                  |L6.400|
000190  2801              CMP      r0,#1                 ;392
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]            ;392
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}            ;392
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]            ;396
00019c  e7fb              B        |L6.406|
;;;916    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;306    {  
;;;307    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;308    	{
;;;309    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;307
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;307
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;310    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;311    	vz1_error=0;
;;;312    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;315
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;319
000030  4e45              LDR      r6,|L7.328|
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
000032  4f46              LDR      r7,|L7.332|
;;;551    	snmp_bat_flag_puts[0]=0;
000034  f8df8118          LDR      r8,|L7.336|
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
;;;790    	snmp_bat_flag_puts[1]=0;
000040  2500              MOVS     r5,#0
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;317
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;317
00004e  f8a81000          STRH     r1,[r8,#0]            ;317
000052  2801              CMP      r0,#1                 ;319
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;317
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;319
00005a  2200              MOVS     r2,#0                 ;319
00005c  21e6              MOVS     r1,#0xe6              ;320
00005e  20e1              MOVS     r0,#0xe1              ;320
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;319
000068  f04f0000          MOV      r0,#0                 ;319
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;320
000070  f9b85000          LDRSH    r5,[r8,#0]            ;322
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;322
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  ebc001c0          RSB      r1,r0,r0,LSL #3       ;323
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;323
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;323
000086  69c9              LDR      r1,[r1,#0x1c]         ;328
000088  4299              CMP      r1,r3                 ;328
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;329
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;331
000094  b2c0              UXTB     r0,r0                 ;331
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;331
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;332
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;332
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;336
0000aa  7020              STRB     r0,[r4,#0]            ;338
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;338
0000b0  f8a81000          STRH     r1,[r8,#0]            ;338
0000b4  2802              CMP      r0,#2                 ;339
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;341
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;341
0000bc  2200              MOVS     r2,#0                 ;341
0000be  21e6              MOVS     r1,#0xe6              ;341
0000c0  20e1              MOVS     r0,#0xe1              ;341
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;342
0000ca  f04f0000          MOV      r0,#0                 ;342
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;347
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;347
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;348
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  ebc001c0          RSB      r1,r0,r0,LSL #3       ;350
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;350
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;350
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;351
0000ea  4299              CMP      r1,r3                 ;351
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;351
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;355
0000f6  b2c0              UXTB     r0,r0                 ;355
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;357
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;357
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;358
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee              ;360
00010a  e9cd0500          STRD     r0,r5,[sp,#0]         ;360
00010e  9502              STR      r5,[sp,#8]            ;360
000110  9503              STR      r5,[sp,#0xc]          ;360
000112  7831              LDRB     r1,[r6,#0]            ;361  ; uavt_bps_pntr
000114  4603              MOV      r3,r0                 ;361
000116  2216              MOVS     r2,#0x16              ;361
000118  4608              MOV      r0,r1                 ;361
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]            ;366  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1              ;366
000122  b2c0              UXTB     r0,r0                 ;366
000124  7030              STRB     r0,[r6,#0]            ;367
000126  f9ba1000          LDRSH    r1,[r10,#0]           ;367  ; NUMIST
00012a  4288              CMP      r0,r1                 ;369
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]            ;369
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]            ;369  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]           ;369
000136  e8bd9fff          POP      {r0-r12,pc}           ;370
;;;916    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;304    // заполнение флагов для АКБ
;;;305    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;306    {  
000002  f44f70b4          MOV      r0,#0x168
;;;307    if(spc_stat!=spcVZ) 
;;;308    	{
;;;309    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;307
00000e  700a              STRB     r2,[r1,#0]            ;307
000010  f04f0100          MOV      r1,#0
;;;310    	sp_ch_error=0;
;;;311    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;312    	vz2_error=0;
;;;313    	}
;;;314    
;;;315    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
;;;316    	{
;;;317    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;318    		{
;;;319    		snmp_bat_flag[0]|=0x0001; 
;;;320    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;321    			{
;;;322    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;323    			snmp_bat_flag_puts[0]|=0x0001;
;;;324    			}
;;;325    		}
;;;326    	else 
;;;327    		{
;;;328    		snmp_bat_flag[0]&=~0x0001; 
;;;329    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;330    			{
;;;331    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;332    			snmp_bat_flag_puts[0]&=~0x0001;
;;;333    			}
;;;334    		}
;;;335    
;;;336    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;337    		{
;;;338    		snmp_bat_flag[0]|=0x0002;
;;;339    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;340    			{
;;;341    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;342    			snmp_bat_flag_puts[0]|=0x0002;
;;;343    			}
;;;344    		}
;;;345    	else 
;;;346    		{
;;;347    		snmp_bat_flag[0]&=~0x0002;
;;;348    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;349    			{
;;;350    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;351    			snmp_bat_flag_puts[0]&=~0x02;
;;;352    			}
;;;353    		}
;;;354    
;;;355    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;356    		{
;;;357    		snmp_bat_flag[0]|=0x0004;
;;;358    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;359    			{
;;;360    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;361    			snmp_bat_flag_puts[0]|=0x0004;
;;;362    			}
;;;363    		}
;;;364    	else 
;;;365    		{
;;;366    		snmp_bat_flag[0]&=~0x0004;
;;;367    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;368    			{
;;;369    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;370    			snmp_bat_flag_puts[0]&=~0x0004;
;;;371    			}
;;;372    		}
;;;373    
;;;374    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;375    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;376    
;;;377    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0010;
;;;380    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;381    			{
;;;382    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;383    			snmp_bat_flag_puts[0]|=0x0010;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0010;
;;;389    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;390    			{
;;;391    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;392    			snmp_bat_flag_puts[0]&=~0x0010;
;;;393    			}
;;;394    		}
;;;395    		
;;;396    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;397    		{
;;;398    		snmp_bat_flag[0]|=0x0020;
;;;399    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;400    			{
;;;401    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;402    			snmp_bat_flag_puts[0]|=0x0020;
;;;403    			}
;;;404    		}
;;;405    	else 
;;;406    		{
;;;407    		snmp_bat_flag[0]&=~0x0020;
;;;408    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;409    			{
;;;410    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;411    			snmp_bat_flag_puts[0]&=~0x0020;
;;;412    			}
;;;413    		}
;;;414    
;;;415    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;416    		{
;;;417    		snmp_bat_flag[0]|=0x0040;
;;;418    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;419    			{
;;;420    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;421    			snmp_bat_flag_puts[0]|=0x0040;
;;;422    			}
;;;423    		}
;;;424    	else 
;;;425    		{
;;;426    		snmp_bat_flag[0]&=~0x0040;
;;;427    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;428    			{
;;;429    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;430    			snmp_bat_flag_puts[0]&=~0x0040;
;;;431    			} 
;;;432    		}
;;;433    
;;;434    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;435    		{
;;;436    		snmp_bat_flag[0]|=0x0080;
;;;437    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;438    			{
;;;439    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;440    			snmp_bat_flag_puts[0]|=0x0080;
;;;441    			}
;;;442    		}
;;;443    	else 
;;;444    		{
;;;445    		snmp_bat_flag[0]&=~0x0080;
;;;446    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;447    			{
;;;448    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;449    			snmp_bat_flag_puts[0]&=~0x0080;
;;;450    			}
;;;451    		}
;;;452    
;;;453    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;454    		{
;;;455    		snmp_bat_flag[0]|=0x0100;
;;;456    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;457    			{
;;;458    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;459    			snmp_bat_flag_puts[0]|=0x0100;
;;;460    			}
;;;461    		}
;;;462    	else 
;;;463    		{
;;;464    		snmp_bat_flag[0]&=~0x0100;
;;;465    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;466    			{
;;;467    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;468    			snmp_bat_flag_puts[0]&=~0x0100;
;;;469    			} 
;;;470    		}
;;;471    
;;;472    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;473    		{
;;;474    		snmp_bat_flag[0]|=0x0200;
;;;475    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;476    			{
;;;477    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;478    			snmp_bat_flag_puts[0]|=0x0200;
;;;479    			}
;;;480    		}
;;;481    	else 
;;;482    		{
;;;483    		snmp_bat_flag[0]&=~0x0200;
;;;484    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;485    			{
;;;486    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;487    			snmp_bat_flag_puts[0]&=~0x0200;
;;;488    			}
;;;489    		}
;;;490    
;;;491    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;492    		{
;;;493    		snmp_bat_flag[0]|=0x0400;
;;;494    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;495    			{
;;;496    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;497    			snmp_bat_flag_puts[0]|=0x0400;
;;;498    			}
;;;499    		}
;;;500    	else 
;;;501    		{
;;;502    		snmp_bat_flag[0]&=~0x0400;
;;;503    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;504    			{
;;;505    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;506    			snmp_bat_flag_puts[0]&=~0x0400;
;;;507    			} 
;;;508    		}
;;;509    
;;;510    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;511    		{
;;;512    		snmp_bat_flag[0]|=0x0800;
;;;513    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;514    			{
;;;515    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;516    			snmp_bat_flag_puts[0]|=0x0800;
;;;517    			}
;;;518    		}
;;;519    	else 
;;;520    		{
;;;521    		snmp_bat_flag[0]&=~0x0800;
;;;522    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;523    			{
;;;524    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;525    			snmp_bat_flag_puts[0]&=~0x0800;
;;;526    			}
;;;527    		}
;;;528    
;;;529    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;530    		{
;;;531    		snmp_bat_flag[0]|=0x1000;
;;;532    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;533    			{
;;;534    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;535    			snmp_bat_flag_puts[0]|=0x1000;
;;;536    			}
;;;537    		}
;;;538    	else 
;;;539    		{
;;;540    		snmp_bat_flag[0]&=~0x1000;
;;;541    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;542    			{
;;;543    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;544    			snmp_bat_flag_puts[0]&=~0x1000;
;;;545    			} 
;;;546    		}
;;;547    	}
;;;548    else 
;;;549    	{
;;;550    	snmp_bat_flag[0]=0; 
;;;551    	snmp_bat_flag_puts[0]=0;
;;;552    	}
;;;553    
;;;554    if(!snmp_bat_status[1])	 			//Батарея №2
;;;555    	{
;;;556    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;557    		{
;;;558    		snmp_bat_flag[1]|=0x0001; 
;;;559    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;560    			{
;;;561    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;562    			snmp_bat_flag_puts[1]|=0x0001;
;;;563    			}
;;;564    		}
;;;565    	else 
;;;566    		{
;;;567    		snmp_bat_flag[1]&=~0x0001; 
;;;568    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;569    			{
;;;570    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;571    			snmp_bat_flag_puts[1]&=~0x0001;
;;;572    			}
;;;573    		}
;;;574    
;;;575    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;576    		{
;;;577    		snmp_bat_flag[1]|=0x0002;
;;;578    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;579    			{
;;;580    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;581    			snmp_bat_flag_puts[1]|=0x0002;
;;;582    			}
;;;583    		}
;;;584    	else 
;;;585    		{
;;;586    		snmp_bat_flag[1]&=~0x0002;
;;;587    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;588    			{
;;;589    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;590    			snmp_bat_flag_puts[1]&=~0x02;
;;;591    			}
;;;592    		}
;;;593    
;;;594    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;595    		{
;;;596    		snmp_bat_flag[1]|=0x0004;
;;;597    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;598    			{
;;;599    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;600    			snmp_bat_flag_puts[1]|=0x0004;
;;;601    			}
;;;602    		}
;;;603    	else 
;;;604    		{
;;;605    		snmp_bat_flag[1]&=~0x0004;
;;;606    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;607    			{
;;;608    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;609    			snmp_bat_flag_puts[1]&=~0x0004;
;;;610    			}
;;;611    		}
;;;612    
;;;613    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;614    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;615    
;;;616    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0010;
;;;619    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;620    			{
;;;621    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;622    			snmp_bat_flag_puts[1]|=0x0010;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0010;
;;;628    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;629    			{
;;;630    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;631    			snmp_bat_flag_puts[1]&=~0x0010;
;;;632    			}
;;;633    		}
;;;634    		
;;;635    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;636    		{
;;;637    		snmp_bat_flag[1]|=0x0020;
;;;638    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;639    			{
;;;640    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;641    			snmp_bat_flag_puts[1]|=0x0020;
;;;642    			}
;;;643    		}
;;;644    	else 
;;;645    		{
;;;646    		snmp_bat_flag[1]&=~0x0020;
;;;647    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;648    			{
;;;649    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;650    			snmp_bat_flag_puts[1]&=~0x0020;
;;;651    			}
;;;652    		}
;;;653    
;;;654    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;655    		{
;;;656    		snmp_bat_flag[1]|=0x0040;
;;;657    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;658    			{
;;;659    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;660    			snmp_bat_flag_puts[1]|=0x0040;
;;;661    			}
;;;662    		}
;;;663    	else 
;;;664    		{
;;;665    		snmp_bat_flag[1]&=~0x0040;
;;;666    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;667    			{
;;;668    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;669    			snmp_bat_flag_puts[1]&=~0x0040;
;;;670    			} 
;;;671    		}
;;;672    
;;;673    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;674    		{
;;;675    		snmp_bat_flag[1]|=0x0080;
;;;676    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;677    			{
;;;678    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;679    			snmp_bat_flag_puts[1]|=0x0080;
;;;680    			}
;;;681    		}
;;;682    	else 
;;;683    		{
;;;684    		snmp_bat_flag[1]&=~0x0080;
;;;685    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;686    			{
;;;687    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;688    			snmp_bat_flag_puts[1]&=~0x0080;
;;;689    			}
;;;690    		}
;;;691    
;;;692    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;693    		{
;;;694    		snmp_bat_flag[1]|=0x0100;
;;;695    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;696    			{
;;;697    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;698    			snmp_bat_flag_puts[1]|=0x0100;
;;;699    			}
;;;700    		}
;;;701    	else 
;;;702    		{
;;;703    		snmp_bat_flag[1]&=~0x0100;
;;;704    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;705    			{
;;;706    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;707    			snmp_bat_flag_puts[1]&=~0x0100;
;;;708    			} 
;;;709    		}
;;;710    
;;;711    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;712    		{
;;;713    		snmp_bat_flag[1]|=0x0200;
;;;714    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;715    			{
;;;716    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;717    			snmp_bat_flag_puts[1]|=0x0200;
;;;718    			}
;;;719    		}
;;;720    	else 
;;;721    		{
;;;722    		snmp_bat_flag[1]&=~0x0200;
;;;723    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;724    			{
;;;725    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;726    			snmp_bat_flag_puts[1]&=~0x0200;
;;;727    			}
;;;728    		}
;;;729    
;;;730    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;731    		{
;;;732    		snmp_bat_flag[1]|=0x0400;
;;;733    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;734    			{
;;;735    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;736    			snmp_bat_flag_puts[1]|=0x0400;
;;;737    			}
;;;738    		}
;;;739    	else 
;;;740    		{
;;;741    		snmp_bat_flag[1]&=~0x0400;
;;;742    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;743    			{
;;;744    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;745    			snmp_bat_flag_puts[1]&=~0x0400;
;;;746    			} 
;;;747    		}
;;;748    
;;;749    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;750    		{
;;;751    		snmp_bat_flag[1]|=0x0800;
;;;752    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;753    			{
;;;754    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;755    			snmp_bat_flag_puts[1]|=0x0800;
;;;756    			}
;;;757    		}
;;;758    	else 
;;;759    		{
;;;760    		snmp_bat_flag[1]&=~0x0800;
;;;761    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;762    			{
;;;763    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;764    			snmp_bat_flag_puts[1]&=~0x0800;
;;;765    			}
;;;766    		}
;;;767    
;;;768    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;769    		{
;;;770    		snmp_bat_flag[1]|=0x1000;
;;;771    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;772    			{
;;;773    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;774    			snmp_bat_flag_puts[1]|=0x1000;
;;;775    			}
;;;776    		}
;;;777    	else 
;;;778    		{
;;;779    		snmp_bat_flag[1]&=~0x1000;
;;;780    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;781    			{
;;;782    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;783    			snmp_bat_flag_puts[1]&=~0x1000;
;;;784    			} 
;;;785    		}
;;;786    	}
;;;787    else 
;;;788    	{
;;;789    	snmp_bat_flag[1]=0; 
;;;790    	snmp_bat_flag_puts[1]=0;
;;;791    	}
;;;792    /*
;;;793    if(!snmp_bat_status[1])
;;;794    	{
;;;795    	if((bat[1]._Ub<(USIGN*10))) 
;;;796    		{
;;;797    		snmp_bat_flag[1]|=0x01; 
;;;798    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;799    			{
;;;800    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;801    			snmp_bat_flag_puts[1]|=0x01;
;;;802    			}
;;;803    		}
;;;804    	else 
;;;805    		{
;;;806    		snmp_bat_flag[1]&=~0x01; 
;;;807    		if(snmp_bat_flag_puts[1]&0x01) 
;;;808    			{
;;;809    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;810    			snmp_bat_flag_puts[1]&=~0x01;
;;;811    			}
;;;812    		}
;;;813    	if(bat[1]._temper_stat&0x01) 
;;;814    		{
;;;815    		snmp_bat_flag[1]|=0x02;
;;;816    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;817    			{
;;;818    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;819    			snmp_bat_flag_puts[1]|=0x02;
;;;820    			}
;;;821    		}
;;;822    	else 
;;;823    		{
;;;824    		snmp_bat_flag[1]&=~0x02;
;;;825    		if(snmp_bat_flag_puts[1]&0x02) 
;;;826    			{
;;;827    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;828    			snmp_bat_flag_puts[1]&=~0x02;
;;;829    			}
;;;830    		}
;;;831    	if(bat[1]._temper_stat&0x02) 
;;;832    		{
;;;833    		snmp_bat_flag[1]|=0x04;
;;;834    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;835    			{
;;;836    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;837    			snmp_bat_flag_puts[1]|=0x04;
;;;838    			}
;;;839    		}
;;;840    	else 
;;;841    		{
;;;842    		snmp_bat_flag[1]&=~0x04;
;;;843    		if(snmp_bat_flag_puts[1]&0x04) 
;;;844    			{
;;;845    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;846    			snmp_bat_flag_puts[1]&=~0x04;
;;;847    			}
;;;848    		}
;;;849    		
;;;850    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;851    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;852    
;;;853    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x10;
;;;856    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;859    			snmp_bat_flag_puts[1]|=0x10;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x10;
;;;865    		if(snmp_bat_flag_puts[1]&0x10) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;868    			snmp_bat_flag_puts[1]&=~0x10;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(spc_stat==spcVZ) 
;;;873    		{
;;;874    		snmp_bat_flag[1]|=0x20;
;;;875    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;876    			{
;;;877    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;878    			snmp_bat_flag_puts[1]|=0x20;
;;;879    			}
;;;880    		}
;;;881    	else 
;;;882    		{
;;;883    		snmp_bat_flag[1]&=~0x20;
;;;884    		if(snmp_bat_flag_puts[1]&0x20) 
;;;885    			{
;;;886    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;887    			snmp_bat_flag_puts[1]&=~0x20;
;;;888    			}
;;;889    		}
;;;890    
;;;891    	if(vz_error) 
;;;892    		{
;;;893    		snmp_bat_flag[1]|=0x40;
;;;894    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;895    			{
;;;896    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;897    			snmp_bat_flag_puts[1]|=0x40;
;;;898    			}
;;;899    		}
;;;900    	else 
;;;901    		{
;;;902    		snmp_bat_flag[1]&=~0x40;
;;;903    		if(snmp_bat_flag_puts[1]&0x40) 
;;;904    			{
;;;905    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;906    			snmp_bat_flag_puts[1]&=~0x40;
;;;907    			} 
;;;908    		}
;;;909       }
;;;910    else 
;;;911    	{
;;;912    	snmp_bat_flag[1]=0; 
;;;913    	snmp_bat_flag_puts[1]=0;
;;;914    	} */
;;;915    }
;;;916    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  kb_full_ver
00001b  00                DCB      0x00
                  kb_start_ips
00001c  00                DCB      0x00
                  num_of_wrks_bps
00001d  00                DCB      0x00
                  num_necc_up
00001e  00                DCB      0x00
                  num_necc_down
00001f  00                DCB      0x00
                  sh_cnt0
000020  00                DCB      0x00
                  b1Hz_sh
000021  00                DCB      0x00
                  spc_stat
000022  00                DCB      0x00
                  spc_bat
000023  00                DCB      0x00
                  spc_phase
000024  00                DCB      0x00
                  bAVZ
000025  00                DCB      0x00
                  ke_start_stat
000026  00                DCB      0x00
                  numOfForvardBps
000027  00                DCB      0x00
                  numOfForvardBps_old
000028  00                DCB      0x00
                  numOfForvardBps_minCnt
000029  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002a  00                DCB      0x00
                  bPARALLEL_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL
00002c  00                DCB      0x00
                  cntrl_hndl_plazma
00002d  00                DCB      0x00
                  volt_region
00002e  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
00002f  00                DCB      0x00
                  cntrl_stat
000030  0258              DCW      0x0258
                  cntrl_stat_old
000032  0258              DCW      0x0258
                  avg_main_cnt
000034  0014              DCW      0x0014
                  num_necc_block_cnt
000036  0000              DCB      0x00,0x00
                  net_buff_
000038  0000              DCB      0x00,0x00
                  adc_result
00003a  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003c  0000              DCB      0x00,0x00
                  adc_zero_cnt
00003e  0000              DCB      0x00,0x00
                  adc_window_cnt
000040  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000042  0000              DCB      0x00,0x00
                  plazma_sk
000044  0000              DCB      0x00,0x00
                  cntrl_stat_new
000046  0000              DCB      0x00,0x00
                  Ibmax
000048  0000              DCB      0x00,0x00
                  IZMAX_
00004a  0000              DCB      0x00,0x00
                  Ubpsmax
00004c  0000              DCB      0x00,0x00
                  samokalibr_cnt
00004e  0000              DCB      0x00,0x00
                  main_kb_cnt
000050  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000052  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000054  0000              DCB      0x00,0x00
                  kb_start
000056  0000              DCB      0x00,0x00
                  ibat_ips
000058  0000              DCB      0x00,0x00
                  ibat_ips_
00005a  0000              DCB      0x00,0x00
                  bps_on_mask
00005c  0000              DCB      0x00,0x00
                  bps_off_mask
00005e  0000              DCB      0x00,0x00
                  vz_cnt_s
000060  0000              DCB      0x00,0x00
                  vz_cnt_s_
000062  0000              DCB      0x00,0x00
                  vz_cnt_h
000064  0000              DCB      0x00,0x00
                  vz_cnt_h_
000066  0000              DCB      0x00,0x00
                  cnt_end_ke
000068  0000              DCB      0x00,0x00
                  __ee_vz_cnt
00006a  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006c  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006e  0000              DCB      0x00,0x00
                  __ee_spc_phase
000070  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000072  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000074  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000076  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000078  0000              DCB      0x00,0x00
                  volt_region_cnt
00007a  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007c  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007e  0000              DCB      0x00,0x00
                  plazma_ica1
000080  0000              DCB      0x00,0x00
                  bat_hndl_i
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000086  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000088  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
00008a  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008c  00000000          DCB      0x00,0x00,0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000ec  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ee  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
