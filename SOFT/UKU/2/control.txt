; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4efc              LDR      r6,|L1.1016|
;;;310    	{
;;;311    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;309  ; spc_stat
00000c  2802              CMP      r0,#2                 ;309
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;312    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;313    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;314    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f8dfa3e0          LDR      r10,|L1.1020|
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8dfb3e0          LDR      r11,|L1.1024|
000020  f8df83e0          LDR      r8,|L1.1028|
000024  f8ba0000          LDRH     r0,[r10,#0]           ;317  ; snmp_bat_status
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93dc          LDR      r9,|L1.1032|
00002c  4cf7              LDR      r4,|L1.1036|
00002e  4df8              LDR      r5,|L1.1040|
000030  b148              CBZ      r0,|L1.70|
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  8027              STRH     r7,[r4,#0]
;;;553    	snmp_bat_flag_puts[0]=0;
000034  802f              STRH     r7,[r5,#0]
                  |L1.54|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8ba0002          LDRH     r0,[r10,#2]  ; snmp_bat_status
00003a  2800              CMP      r0,#0
00003c  d07d              BEQ      |L1.314|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  8067              STRH     r7,[r4,#2]
;;;792    	snmp_bat_flag_puts[1]=0;
000040  806f              STRH     r7,[r5,#2]
                  |L1.66|
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.70|
000046  f9bb0000          LDRSH    r0,[r11,#0]           ;319  ; USIGN
00004a  f9b82002          LDRSH    r2,[r8,#2]            ;319  ; bat
00004e  eb000380          ADD      r3,r0,r0,LSL #2       ;319
000052  48ee              LDR      r0,|L1.1036|
000054  ebb20f43          CMP      r2,r3,LSL #1          ;319
000058  f9b01000          LDRSH    r1,[r0,#0]            ;321
00005c  48ec              LDR      r0,|L1.1040|
00005e  f9b00000          LDRSH    r0,[r0,#0]            ;322
000062  da0f              BGE      |L1.132|
000064  f0410101          ORR      r1,r1,#1              ;321
000068  8021              STRH     r1,[r4,#0]            ;321
00006a  07c0              LSLS     r0,r0,#31             ;322
00006c  d119              BNE      |L1.162|
00006e  2300              MOVS     r3,#0                 ;324
000070  2208              MOVS     r2,#8                 ;324
000072  2105              MOVS     r1,#5                 ;324
000074  a0e7              ADR      r0,|L1.1044|
000076  f7fffffe          BL       snmp_trap_send
00007a  8828              LDRH     r0,[r5,#0]            ;325  ; snmp_bat_flag_puts
00007c  f0400001          ORR      r0,r0,#1              ;325
000080  8028              STRH     r0,[r5,#0]            ;325
000082  e00e              B        |L1.162|
                  |L1.132|
000084  f0210101          BIC      r1,r1,#1              ;330
000088  8021              STRH     r1,[r4,#0]            ;330
00008a  07c0              LSLS     r0,r0,#31             ;331
00008c  d009              BEQ      |L1.162|
00008e  2301              MOVS     r3,#1                 ;333
000090  2208              MOVS     r2,#8                 ;333
000092  2105              MOVS     r1,#5                 ;333
000094  a0e7              ADR      r0,|L1.1076|
000096  f7fffffe          BL       snmp_trap_send
00009a  8828              LDRH     r0,[r5,#0]            ;334  ; snmp_bat_flag_puts
00009c  f0200001          BIC      r0,r0,#1              ;334
0000a0  8028              STRH     r0,[r5,#0]            ;334
                  |L1.162|
0000a2  f898003f          LDRB     r0,[r8,#0x3f]         ;338  ; bat
0000a6  07c0              LSLS     r0,r0,#31             ;338
0000a8  d011              BEQ      |L1.206|
0000aa  8820              LDRH     r0,[r4,#0]            ;340  ; snmp_bat_flag
0000ac  f0400002          ORR      r0,r0,#2              ;340
0000b0  8020              STRH     r0,[r4,#0]            ;340
0000b2  8828              LDRH     r0,[r5,#0]            ;341  ; snmp_bat_flag_puts
0000b4  0780              LSLS     r0,r0,#30             ;341
0000b6  d41b              BMI      |L1.240|
0000b8  2302              MOVS     r3,#2                 ;343
0000ba  2208              MOVS     r2,#8                 ;343
0000bc  2105              MOVS     r1,#5                 ;343
0000be  a0e7              ADR      r0,|L1.1116|
0000c0  f7fffffe          BL       snmp_trap_send
0000c4  8828              LDRH     r0,[r5,#0]            ;344  ; snmp_bat_flag_puts
0000c6  f0400002          ORR      r0,r0,#2              ;344
0000ca  8028              STRH     r0,[r5,#0]            ;344
0000cc  e010              B        |L1.240|
                  |L1.206|
0000ce  8820              LDRH     r0,[r4,#0]            ;349  ; snmp_bat_flag
0000d0  f0200002          BIC      r0,r0,#2              ;349
0000d4  8020              STRH     r0,[r4,#0]            ;349
0000d6  8828              LDRH     r0,[r5,#0]            ;350  ; snmp_bat_flag_puts
0000d8  0780              LSLS     r0,r0,#30             ;350
0000da  d509              BPL      |L1.240|
0000dc  2303              MOVS     r3,#3                 ;352
0000de  2208              MOVS     r2,#8                 ;352
0000e0  2105              MOVS     r1,#5                 ;352
0000e2  a0e9              ADR      r0,|L1.1160|
0000e4  f7fffffe          BL       snmp_trap_send
0000e8  8828              LDRH     r0,[r5,#0]            ;353  ; snmp_bat_flag_puts
0000ea  f0200002          BIC      r0,r0,#2              ;353
0000ee  8028              STRH     r0,[r5,#0]            ;353
                  |L1.240|
0000f0  f898003f          LDRB     r0,[r8,#0x3f]         ;357  ; bat
0000f4  0780              LSLS     r0,r0,#30             ;357
0000f6  d511              BPL      |L1.284|
0000f8  8820              LDRH     r0,[r4,#0]            ;359  ; snmp_bat_flag
0000fa  f0400004          ORR      r0,r0,#4              ;359
0000fe  8020              STRH     r0,[r4,#0]            ;359
000100  8828              LDRH     r0,[r5,#0]            ;360  ; snmp_bat_flag_puts
000102  0740              LSLS     r0,r0,#29             ;360
000104  d41d              BMI      |L1.322|
000106  2304              MOVS     r3,#4                 ;362
000108  2208              MOVS     r2,#8                 ;362
00010a  2105              MOVS     r1,#5                 ;362
00010c  a0eb              ADR      r0,|L1.1212|
00010e  f7fffffe          BL       snmp_trap_send
000112  8828              LDRH     r0,[r5,#0]            ;363  ; snmp_bat_flag_puts
000114  f0400004          ORR      r0,r0,#4              ;363
000118  8028              STRH     r0,[r5,#0]            ;363
00011a  e012              B        |L1.322|
                  |L1.284|
00011c  8820              LDRH     r0,[r4,#0]            ;368  ; snmp_bat_flag
00011e  f0200004          BIC      r0,r0,#4              ;368
000122  8020              STRH     r0,[r4,#0]            ;368
000124  8828              LDRH     r0,[r5,#0]            ;369  ; snmp_bat_flag_puts
000126  0740              LSLS     r0,r0,#29             ;369
000128  d50b              BPL      |L1.322|
00012a  2305              MOVS     r3,#5                 ;371
00012c  2208              MOVS     r2,#8                 ;371
00012e  4619              MOV      r1,r3                 ;371
000130  a0ec              ADR      r0,|L1.1252|
000132  f7fffffe          BL       snmp_trap_send
000136  8828              LDRH     r0,[r5,#0]            ;372  ; snmp_bat_flag_puts
000138  e000              B        |L1.316|
                  |L1.314|
00013a  e322              B        |L1.1922|
                  |L1.316|
00013c  f0200004          BIC      r0,r0,#4              ;372
000140  8028              STRH     r0,[r5,#0]            ;372
                  |L1.322|
000142  f9b91000          LDRSH    r1,[r9,#0]            ;376  ; IKB
000146  f9b80008          LDRSH    r0,[r8,#8]            ;376  ; bat
00014a  424a              RSBS     r2,r1,#0              ;376
00014c  4290              CMP      r0,r2                 ;376
00014e  da04              BGE      |L1.346|
000150  8820              LDRH     r0,[r4,#0]            ;376  ; snmp_bat_flag
000152  f0400008          ORR      r0,r0,#8              ;376
000156  8020              STRH     r0,[r4,#0]            ;376
000158  e005              B        |L1.358|
                  |L1.346|
00015a  4288              CMP      r0,r1                 ;377
00015c  dd03              BLE      |L1.358|
00015e  8820              LDRH     r0,[r4,#0]            ;377  ; snmp_bat_flag
000160  f0200008          BIC      r0,r0,#8              ;377
000164  8020              STRH     r0,[r4,#0]            ;377
                  |L1.358|
000166  f8960023          LDRB     r0,[r6,#0x23]         ;379  ; spc_stat
00016a  2801              CMP      r0,#1                 ;379
00016c  d103              BNE      |L1.374|
00016e  f8960024          LDRB     r0,[r6,#0x24]         ;379  ; spc_bat
000172  2800              CMP      r0,#0                 ;379
000174  d03a              BEQ      |L1.492|
                  |L1.374|
000176  8820              LDRH     r0,[r4,#0]            ;390  ; snmp_bat_flag
000178  f0200010          BIC      r0,r0,#0x10           ;390
00017c  8020              STRH     r0,[r4,#0]            ;390
00017e  8828              LDRH     r0,[r5,#0]            ;391  ; snmp_bat_flag_puts
000180  06c0              LSLS     r0,r0,#27             ;391
000182  d509              BPL      |L1.408|
000184  2307              MOVS     r3,#7                 ;393
000186  2208              MOVS     r2,#8                 ;393
000188  2105              MOVS     r1,#5                 ;393
00018a  a0e3              ADR      r0,|L1.1304|
00018c  f7fffffe          BL       snmp_trap_send
000190  8828              LDRH     r0,[r5,#0]            ;394  ; snmp_bat_flag_puts
000192  f0200010          BIC      r0,r0,#0x10           ;394
000196  8028              STRH     r0,[r5,#0]            ;394
                  |L1.408|
000198  f8960023          LDRB     r0,[r6,#0x23]         ;398  ; spc_stat
00019c  2802              CMP      r0,#2                 ;398
00019e  d037              BEQ      |L1.528|
0001a0  8820              LDRH     r0,[r4,#0]            ;409  ; snmp_bat_flag
0001a2  f0200020          BIC      r0,r0,#0x20           ;409
0001a6  8020              STRH     r0,[r4,#0]            ;409
0001a8  8828              LDRH     r0,[r5,#0]            ;410  ; snmp_bat_flag_puts
0001aa  0680              LSLS     r0,r0,#26             ;410
0001ac  d509              BPL      |L1.450|
0001ae  2309              MOVS     r3,#9                 ;412
0001b0  2208              MOVS     r2,#8                 ;412
0001b2  2105              MOVS     r1,#5                 ;412
0001b4  a0e0              ADR      r0,|L1.1336|
0001b6  f7fffffe          BL       snmp_trap_send
0001ba  8828              LDRH     r0,[r5,#0]            ;413  ; snmp_bat_flag_puts
0001bc  f0200020          BIC      r0,r0,#0x20           ;413
0001c0  8028              STRH     r0,[r5,#0]            ;413
                  |L1.450|
0001c2  7870              LDRB     r0,[r6,#1]            ;417  ; vz_error
0001c4  2800              CMP      r0,#0                 ;417
0001c6  d035              BEQ      |L1.564|
0001c8  8820              LDRH     r0,[r4,#0]            ;419  ; snmp_bat_flag
0001ca  f0400040          ORR      r0,r0,#0x40           ;419
0001ce  8020              STRH     r0,[r4,#0]            ;419
0001d0  8828              LDRH     r0,[r5,#0]            ;420  ; snmp_bat_flag_puts
0001d2  0640              LSLS     r0,r0,#25             ;420
0001d4  d43f              BMI      |L1.598|
0001d6  230a              MOVS     r3,#0xa               ;422
0001d8  2208              MOVS     r2,#8                 ;422
0001da  2105              MOVS     r1,#5                 ;422
0001dc  a0df              ADR      r0,|L1.1372|
0001de  f7fffffe          BL       snmp_trap_send
0001e2  8828              LDRH     r0,[r5,#0]            ;423  ; snmp_bat_flag_puts
0001e4  f0400040          ORR      r0,r0,#0x40           ;423
0001e8  8028              STRH     r0,[r5,#0]            ;423
0001ea  e034              B        |L1.598|
                  |L1.492|
0001ec  8820              LDRH     r0,[r4,#0]            ;381  ; snmp_bat_flag
0001ee  f0400010          ORR      r0,r0,#0x10           ;381
0001f2  8020              STRH     r0,[r4,#0]            ;381
0001f4  8828              LDRH     r0,[r5,#0]            ;382  ; snmp_bat_flag_puts
0001f6  06c0              LSLS     r0,r0,#27             ;382
0001f8  d4ce              BMI      |L1.408|
0001fa  2306              MOVS     r3,#6                 ;384
0001fc  2208              MOVS     r2,#8                 ;384
0001fe  2105              MOVS     r1,#5                 ;384
000200  a0df              ADR      r0,|L1.1408|
000202  f7fffffe          BL       snmp_trap_send
000206  8828              LDRH     r0,[r5,#0]            ;385  ; snmp_bat_flag_puts
000208  f0400010          ORR      r0,r0,#0x10           ;385
00020c  8028              STRH     r0,[r5,#0]            ;385
00020e  e7c3              B        |L1.408|
                  |L1.528|
000210  8820              LDRH     r0,[r4,#0]            ;400  ; snmp_bat_flag
000212  f0400020          ORR      r0,r0,#0x20           ;400
000216  8020              STRH     r0,[r4,#0]            ;400
000218  8828              LDRH     r0,[r5,#0]            ;401  ; snmp_bat_flag_puts
00021a  0680              LSLS     r0,r0,#26             ;401
00021c  d4d1              BMI      |L1.450|
00021e  2308              MOVS     r3,#8                 ;403
000220  461a              MOV      r2,r3                 ;403
000222  2105              MOVS     r1,#5                 ;403
000224  a0de              ADR      r0,|L1.1440|
000226  f7fffffe          BL       snmp_trap_send
00022a  8828              LDRH     r0,[r5,#0]            ;404  ; snmp_bat_flag_puts
00022c  f0400020          ORR      r0,r0,#0x20           ;404
000230  8028              STRH     r0,[r5,#0]            ;404
000232  e7c6              B        |L1.450|
                  |L1.564|
000234  8820              LDRH     r0,[r4,#0]            ;428  ; snmp_bat_flag
000236  f0200040          BIC      r0,r0,#0x40           ;428
00023a  8020              STRH     r0,[r4,#0]            ;428
00023c  8828              LDRH     r0,[r5,#0]            ;429  ; snmp_bat_flag_puts
00023e  0640              LSLS     r0,r0,#25             ;429
000240  d509              BPL      |L1.598|
000242  230b              MOVS     r3,#0xb               ;431
000244  2208              MOVS     r2,#8                 ;431
000246  2105              MOVS     r1,#5                 ;431
000248  a0de              ADR      r0,|L1.1476|
00024a  f7fffffe          BL       snmp_trap_send
00024e  8828              LDRH     r0,[r5,#0]            ;432  ; snmp_bat_flag_puts
000250  f0200040          BIC      r0,r0,#0x40           ;432
000254  8028              STRH     r0,[r5,#0]            ;432
                  |L1.598|
000256  48e4              LDR      r0,|L1.1512|
000258  7800              LDRB     r0,[r0,#0]            ;436  ; sp_ch_stat
00025a  2802              CMP      r0,#2                 ;436
00025c  d024              BEQ      |L1.680|
00025e  8820              LDRH     r0,[r4,#0]            ;447  ; snmp_bat_flag
000260  f0200080          BIC      r0,r0,#0x80           ;447
000264  8020              STRH     r0,[r4,#0]            ;447
000266  8828              LDRH     r0,[r5,#0]            ;448  ; snmp_bat_flag_puts
000268  0600              LSLS     r0,r0,#24             ;448
00026a  d509              BPL      |L1.640|
00026c  230b              MOVS     r3,#0xb               ;450
00026e  2208              MOVS     r2,#8                 ;450
000270  2105              MOVS     r1,#5                 ;450
000272  a0de              ADR      r0,|L1.1516|
000274  f7fffffe          BL       snmp_trap_send
000278  8828              LDRH     r0,[r5,#0]            ;451  ; snmp_bat_flag_puts
00027a  f0200080          BIC      r0,r0,#0x80           ;451
00027e  8028              STRH     r0,[r5,#0]            ;451
                  |L1.640|
000280  78b0              LDRB     r0,[r6,#2]            ;455  ; sp_ch_error
000282  b318              CBZ      r0,|L1.716|
000284  8820              LDRH     r0,[r4,#0]            ;457  ; snmp_bat_flag
000286  f4407080          ORR      r0,r0,#0x100          ;457
00028a  8020              STRH     r0,[r4,#0]            ;457
00028c  8828              LDRH     r0,[r5,#0]            ;458  ; snmp_bat_flag_puts
00028e  05c0              LSLS     r0,r0,#23             ;458
000290  d42d              BMI      |L1.750|
000292  230c              MOVS     r3,#0xc               ;460
000294  2208              MOVS     r2,#8                 ;460
000296  2105              MOVS     r1,#5                 ;460
000298  a0dc              ADR      r0,|L1.1548|
00029a  f7fffffe          BL       snmp_trap_send
00029e  8828              LDRH     r0,[r5,#0]            ;461  ; snmp_bat_flag_puts
0002a0  f4407080          ORR      r0,r0,#0x100          ;461
0002a4  8028              STRH     r0,[r5,#0]            ;461
0002a6  e022              B        |L1.750|
                  |L1.680|
0002a8  8820              LDRH     r0,[r4,#0]            ;438  ; snmp_bat_flag
0002aa  f0400080          ORR      r0,r0,#0x80           ;438
0002ae  8020              STRH     r0,[r4,#0]            ;438
0002b0  8828              LDRH     r0,[r5,#0]            ;439  ; snmp_bat_flag_puts
0002b2  0600              LSLS     r0,r0,#24             ;439
0002b4  d4e4              BMI      |L1.640|
0002b6  230a              MOVS     r3,#0xa               ;441
0002b8  2208              MOVS     r2,#8                 ;441
0002ba  2105              MOVS     r1,#5                 ;441
0002bc  a0db              ADR      r0,|L1.1580|
0002be  f7fffffe          BL       snmp_trap_send
0002c2  8828              LDRH     r0,[r5,#0]            ;442  ; snmp_bat_flag_puts
0002c4  f0400080          ORR      r0,r0,#0x80           ;442
0002c8  8028              STRH     r0,[r5,#0]            ;442
0002ca  e7d9              B        |L1.640|
                  |L1.716|
0002cc  8820              LDRH     r0,[r4,#0]            ;466  ; snmp_bat_flag
0002ce  f4207080          BIC      r0,r0,#0x100          ;466
0002d2  8020              STRH     r0,[r4,#0]            ;466
0002d4  8828              LDRH     r0,[r5,#0]            ;467  ; snmp_bat_flag_puts
0002d6  05c0              LSLS     r0,r0,#23             ;467
0002d8  d509              BPL      |L1.750|
0002da  230d              MOVS     r3,#0xd               ;469
0002dc  2208              MOVS     r2,#8                 ;469
0002de  2105              MOVS     r1,#5                 ;469
0002e0  a0da              ADR      r0,|L1.1612|
0002e2  f7fffffe          BL       snmp_trap_send
0002e6  8828              LDRH     r0,[r5,#0]            ;470  ; snmp_bat_flag_puts
0002e8  f4207080          BIC      r0,r0,#0x100          ;470
0002ec  8028              STRH     r0,[r5,#0]            ;470
                  |L1.750|
0002ee  7970              LDRB     r0,[r6,#5]            ;474  ; vz1_stat
0002f0  b188              CBZ      r0,|L1.790|
0002f2  8820              LDRH     r0,[r4,#0]            ;476  ; snmp_bat_flag
0002f4  f4407000          ORR      r0,r0,#0x200          ;476
0002f8  8020              STRH     r0,[r4,#0]            ;476
0002fa  8828              LDRH     r0,[r5,#0]            ;477  ; snmp_bat_flag_puts
0002fc  0580              LSLS     r0,r0,#22             ;477
0002fe  d41b              BMI      |L1.824|
000300  230e              MOVS     r3,#0xe               ;479
000302  2208              MOVS     r2,#8                 ;479
000304  2105              MOVS     r1,#5                 ;479
000306  a0da              ADR      r0,|L1.1648|
000308  f7fffffe          BL       snmp_trap_send
00030c  8828              LDRH     r0,[r5,#0]            ;480  ; snmp_bat_flag_puts
00030e  f4407000          ORR      r0,r0,#0x200          ;480
000312  8028              STRH     r0,[r5,#0]            ;480
000314  e010              B        |L1.824|
                  |L1.790|
000316  8820              LDRH     r0,[r4,#0]            ;485  ; snmp_bat_flag
000318  f4207000          BIC      r0,r0,#0x200          ;485
00031c  8020              STRH     r0,[r4,#0]            ;485
00031e  8828              LDRH     r0,[r5,#0]            ;486  ; snmp_bat_flag_puts
000320  0580              LSLS     r0,r0,#22             ;486
000322  d509              BPL      |L1.824|
000324  230f              MOVS     r3,#0xf               ;488
000326  2208              MOVS     r2,#8                 ;488
000328  2105              MOVS     r1,#5                 ;488
00032a  a0d9              ADR      r0,|L1.1680|
00032c  f7fffffe          BL       snmp_trap_send
000330  8828              LDRH     r0,[r5,#0]            ;489  ; snmp_bat_flag_puts
000332  f4207000          BIC      r0,r0,#0x200          ;489
000336  8028              STRH     r0,[r5,#0]            ;489
                  |L1.824|
000338  78f0              LDRB     r0,[r6,#3]            ;493  ; vz1_error
00033a  b188              CBZ      r0,|L1.864|
00033c  8820              LDRH     r0,[r4,#0]            ;495  ; snmp_bat_flag
00033e  f4406080          ORR      r0,r0,#0x400          ;495
000342  8020              STRH     r0,[r4,#0]            ;495
000344  8828              LDRH     r0,[r5,#0]            ;496  ; snmp_bat_flag_puts
000346  0540              LSLS     r0,r0,#21             ;496
000348  d41b              BMI      |L1.898|
00034a  2310              MOVS     r3,#0x10              ;498
00034c  2208              MOVS     r2,#8                 ;498
00034e  2105              MOVS     r1,#5                 ;498
000350  a0d7              ADR      r0,|L1.1712|
000352  f7fffffe          BL       snmp_trap_send
000356  8828              LDRH     r0,[r5,#0]            ;499  ; snmp_bat_flag_puts
000358  f4406080          ORR      r0,r0,#0x400          ;499
00035c  8028              STRH     r0,[r5,#0]            ;499
00035e  e010              B        |L1.898|
                  |L1.864|
000360  8820              LDRH     r0,[r4,#0]            ;504  ; snmp_bat_flag
000362  f4206080          BIC      r0,r0,#0x400          ;504
000366  8020              STRH     r0,[r4,#0]            ;504
000368  8828              LDRH     r0,[r5,#0]            ;505  ; snmp_bat_flag_puts
00036a  0540              LSLS     r0,r0,#21             ;505
00036c  d509              BPL      |L1.898|
00036e  2311              MOVS     r3,#0x11              ;507
000370  2208              MOVS     r2,#8                 ;507
000372  2105              MOVS     r1,#5                 ;507
000374  a0d7              ADR      r0,|L1.1748|
000376  f7fffffe          BL       snmp_trap_send
00037a  8828              LDRH     r0,[r5,#0]            ;508  ; snmp_bat_flag_puts
00037c  f4206080          BIC      r0,r0,#0x400          ;508
000380  8028              STRH     r0,[r5,#0]            ;508
                  |L1.898|
000382  79f0              LDRB     r0,[r6,#7]            ;512  ; vz2_stat
000384  b188              CBZ      r0,|L1.938|
000386  8820              LDRH     r0,[r4,#0]            ;514  ; snmp_bat_flag
000388  f4406000          ORR      r0,r0,#0x800          ;514
00038c  8020              STRH     r0,[r4,#0]            ;514
00038e  8828              LDRH     r0,[r5,#0]            ;515  ; snmp_bat_flag_puts
000390  0500              LSLS     r0,r0,#20             ;515
000392  d41b              BMI      |L1.972|
000394  2312              MOVS     r3,#0x12              ;517
000396  2208              MOVS     r2,#8                 ;517
000398  2105              MOVS     r1,#5                 ;517
00039a  a0d8              ADR      r0,|L1.1788|
00039c  f7fffffe          BL       snmp_trap_send
0003a0  8828              LDRH     r0,[r5,#0]            ;518  ; snmp_bat_flag_puts
0003a2  f4406000          ORR      r0,r0,#0x800          ;518
0003a6  8028              STRH     r0,[r5,#0]            ;518
0003a8  e010              B        |L1.972|
                  |L1.938|
0003aa  8820              LDRH     r0,[r4,#0]            ;523  ; snmp_bat_flag
0003ac  f4206000          BIC      r0,r0,#0x800          ;523
0003b0  8020              STRH     r0,[r4,#0]            ;523
0003b2  8828              LDRH     r0,[r5,#0]            ;524  ; snmp_bat_flag_puts
0003b4  0500              LSLS     r0,r0,#20             ;524
0003b6  d509              BPL      |L1.972|
0003b8  2313              MOVS     r3,#0x13              ;526
0003ba  2208              MOVS     r2,#8                 ;526
0003bc  2105              MOVS     r1,#5                 ;526
0003be  a0d6              ADR      r0,|L1.1816|
0003c0  f7fffffe          BL       snmp_trap_send
0003c4  8828              LDRH     r0,[r5,#0]            ;527  ; snmp_bat_flag_puts
0003c6  f4206000          BIC      r0,r0,#0x800          ;527
0003ca  8028              STRH     r0,[r5,#0]            ;527
                  |L1.972|
0003cc  7930              LDRB     r0,[r6,#4]            ;531  ; vz2_error
0003ce  b190              CBZ      r0,|L1.1014|
0003d0  8820              LDRH     r0,[r4,#0]            ;533  ; snmp_bat_flag
0003d2  f4405080          ORR      r0,r0,#0x1000         ;533
0003d6  8020              STRH     r0,[r4,#0]            ;533
0003d8  8828              LDRH     r0,[r5,#0]            ;534  ; snmp_bat_flag_puts
0003da  04c0              LSLS     r0,r0,#19             ;534
0003dc  f53fae2b          BMI      |L1.54|
0003e0  2314              MOVS     r3,#0x14              ;536
0003e2  2208              MOVS     r2,#8                 ;536
0003e4  2105              MOVS     r1,#5                 ;536
0003e6  a0d4              ADR      r0,|L1.1848|
0003e8  f7fffffe          BL       snmp_trap_send
0003ec  8828              LDRH     r0,[r5,#0]            ;537  ; snmp_bat_flag_puts
0003ee  f4405080          ORR      r0,r0,#0x1000         ;537
0003f2  8028              STRH     r0,[r5,#0]            ;537
                  |L1.1012|
0003f4  e61f              B        |L1.54|
                  |L1.1014|
0003f6  e1b1              B        |L1.1884|
                  |L1.1016|
                          DCD      ||area_number.25||
                  |L1.1020|
                          DCD      snmp_bat_status
                  |L1.1024|
                          DCD      USIGN
                  |L1.1028|
                          DCD      bat
                  |L1.1032|
                          DCD      IKB
                  |L1.1036|
                          DCD      snmp_bat_flag
                  |L1.1040|
                          DCD      snmp_bat_flag_puts
                  |L1.1044|
000414  42415420          DCB      "BAT #1 Alarm, battery is low",0
000418  23312041
00041c  6c61726d
000420  2c206261
000424  74746572
000428  79206973
00042c  206c6f77
000430  00      
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000438  23312041
00043c  6c61726d
000440  20636c65
000444  61722c20
000448  62617474
00044c  65727920
000450  6973206e
000454  6f74206c
000458  6f7700  
00045b  00                DCB      0
                  |L1.1116|
00045c  42415420          DCB      "BAT #1 Warning, high battery temperature",0
000460  23312057
000464  61726e69
000468  6e672c20
00046c  68696768
000470  20626174
000474  74657279
000478  2074656d
00047c  70657261
000480  74757265
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  42415420          DCB      "BAT #1 Warning clear, battery temperature is normal",0
00048c  23312057
000490  61726e69
000494  6e672063
000498  6c656172
00049c  2c206261
0004a0  74746572
0004a4  79207465
0004a8  6d706572
0004ac  61747572
0004b0  65206973
0004b4  206e6f72
0004b8  6d616c00
                  |L1.1212|
0004bc  42415420          DCB      "BAT #1 Alarm, high battery temperature",0
0004c0  23312041
0004c4  6c61726d
0004c8  2c206869
0004cc  67682062
0004d0  61747465
0004d4  72792074
0004d8  656d7065
0004dc  72617475
0004e0  726500  
0004e3  00                DCB      0
                  |L1.1252|
0004e4  42415420          DCB      "BAT #1 Alarm clear, battery temperature is normal",0
0004e8  23312041
0004ec  6c61726d
0004f0  20636c65
0004f4  61722c20
0004f8  62617474
0004fc  65727920
000500  74656d70
000504  65726174
000508  75726520
00050c  6973206e
000510  6f726d61
000514  6c00    
000516  00                DCB      0
000517  00                DCB      0
                  |L1.1304|
000518  42415420          DCB      "BAT #1, capacity test stopped",0
00051c  23312c20
000520  63617061
000524  63697479
000528  20746573
00052c  74207374
000530  6f707065
000534  6400    
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  42415420          DCB      "BAT #1,leveling charge is stopped",0
00053c  23312c6c
000540  6576656c
000544  696e6720
000548  63686172
00054c  67652069
000550  73207374
000554  6f707065
000558  6400    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L1.1372|
00055c  42415420          DCB      "BAT #1,leveling charge is blocked",0
000560  23312c6c
000564  6576656c
000568  696e6720
00056c  63686172
000570  67652069
000574  7320626c
000578  6f636b65
00057c  6400    
00057e  00                DCB      0
00057f  00                DCB      0
                  |L1.1408|
000580  42415420          DCB      "BAT #1, capacity test started",0
000584  23312c20
000588  63617061
00058c  63697479
000590  20746573
000594  74207374
000598  61727465
00059c  6400    
00059e  00                DCB      0
00059f  00                DCB      0
                  |L1.1440|
0005a0  42415420          DCB      "BAT #1,leveling charge is started",0
0005a4  23312c6c
0005a8  6576656c
0005ac  696e6720
0005b0  63686172
0005b4  67652069
0005b8  73207374
0005bc  61727465
0005c0  6400    
0005c2  00                DCB      0
0005c3  00                DCB      0
                  |L1.1476|
0005c4  42415420          DCB      "BAT #1,leveling charge is unblocked",0
0005c8  23312c6c
0005cc  6576656c
0005d0  696e6720
0005d4  63686172
0005d8  67652069
0005dc  7320756e
0005e0  626c6f63
0005e4  6b656400
                  |L1.1512|
                          DCD      sp_ch_stat
                  |L1.1516|
0005ec  42415420          DCB      "BAT #1,speed charge is stopped",0
0005f0  23312c73
0005f4  70656564
0005f8  20636861
0005fc  72676520
000600  69732073
000604  746f7070
000608  656400  
00060b  00                DCB      0
                  |L1.1548|
00060c  42415420          DCB      "BAT #1,speed charge is blocked",0
000610  23312c73
000614  70656564
000618  20636861
00061c  72676520
000620  69732062
000624  6c6f636b
000628  656400  
00062b  00                DCB      0
                  |L1.1580|
00062c  42415420          DCB      "BAT #1,speed charge is started",0
000630  23312c73
000634  70656564
000638  20636861
00063c  72676520
000640  69732073
000644  74617274
000648  656400  
00064b  00                DCB      0
                  |L1.1612|
00064c  42415420          DCB      "BAT #1,speed charge is unblocked",0
000650  23312c73
000654  70656564
000658  20636861
00065c  72676520
000660  69732075
000664  6e626c6f
000668  636b6564
00066c  00      
00066d  00                DCB      0
00066e  00                DCB      0
00066f  00                DCB      0
                  |L1.1648|
000670  42415420          DCB      "BAT #1,equalising charge is on",0
000674  23312c65
000678  7175616c
00067c  6973696e
000680  67206368
000684  61726765
000688  20697320
00068c  6f6e00  
00068f  00                DCB      0
                  |L1.1680|
000690  42415420          DCB      "BAT #1,equalising charge is off",0
000694  23312c65
000698  7175616c
00069c  6973696e
0006a0  67206368
0006a4  61726765
0006a8  20697320
0006ac  6f666600
                  |L1.1712|
0006b0  42415420          DCB      "BAT #1,equalising charge is blocked",0
0006b4  23312c65
0006b8  7175616c
0006bc  6973696e
0006c0  67206368
0006c4  61726765
0006c8  20697320
0006cc  626c6f63
0006d0  6b656400
                  |L1.1748|
0006d4  42415420          DCB      "BAT #1,equalising charge is unblocked",0
0006d8  23312c65
0006dc  7175616c
0006e0  6973696e
0006e4  67206368
0006e8  61726765
0006ec  20697320
0006f0  756e626c
0006f4  6f636b65
0006f8  6400    
0006fa  00                DCB      0
0006fb  00                DCB      0
                  |L1.1788|
0006fc  42415420          DCB      "BAT #1,molding charge is on",0
000700  23312c6d
000704  6f6c6469
000708  6e672063
00070c  68617267
000710  65206973
000714  206f6e00
                  |L1.1816|
000718  42415420          DCB      "BAT #1,molding charge is off",0
00071c  23312c6d
000720  6f6c6469
000724  6e672063
000728  68617267
00072c  65206973
000730  206f6666
000734  00      
000735  00                DCB      0
000736  00                DCB      0
000737  00                DCB      0
                  |L1.1848|
000738  42415420          DCB      "BAT #1,molding charge is blocked",0
00073c  23312c6d
000740  6f6c6469
000744  6e672063
000748  68617267
00074c  65206973
000750  20626c6f
000754  636b6564
000758  00      
000759  00                DCB      0
00075a  00                DCB      0
00075b  00                DCB      0
                  |L1.1884|
00075c  8820              LDRH     r0,[r4,#0]            ;542  ; snmp_bat_flag
00075e  f4205080          BIC      r0,r0,#0x1000         ;542
000762  8020              STRH     r0,[r4,#0]            ;542
000764  8828              LDRH     r0,[r5,#0]            ;543  ; snmp_bat_flag_puts
000766  04c0              LSLS     r0,r0,#19             ;543
000768  f57fae44          BPL      |L1.1012|
00076c  2315              MOVS     r3,#0x15              ;545
00076e  2208              MOVS     r2,#8                 ;545
000770  2105              MOVS     r1,#5                 ;545
000772  a0fa              ADR      r0,|L1.2908|
000774  f7fffffe          BL       snmp_trap_send
000778  8828              LDRH     r0,[r5,#0]            ;546  ; snmp_bat_flag_puts
00077a  f4205080          BIC      r0,r0,#0x1000         ;546
00077e  8028              STRH     r0,[r5,#0]            ;546
000780  e459              B        |L1.54|
                  |L1.1922|
000782  f9bb0000          LDRSH    r0,[r11,#0]           ;558  ; USIGN
000786  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;558  ; bat
00078a  eb000080          ADD      r0,r0,r0,LSL #2       ;558
00078e  ebb10f40          CMP      r1,r0,LSL #1          ;558
000792  da12              BGE      |L1.1978|
000794  8860              LDRH     r0,[r4,#2]            ;560  ; snmp_bat_flag
000796  f0400001          ORR      r0,r0,#1              ;560
00079a  8060              STRH     r0,[r4,#2]            ;560
00079c  8868              LDRH     r0,[r5,#2]            ;561  ; snmp_bat_flag_puts
00079e  07c0              LSLS     r0,r0,#31             ;561
0007a0  d11d              BNE      |L1.2014|
0007a2  2316              MOVS     r3,#0x16              ;563
0007a4  2208              MOVS     r2,#8                 ;563
0007a6  2105              MOVS     r1,#5                 ;563
0007a8  f2af3098          ADR      r0,|L1.1044|
0007ac  f7fffffe          BL       snmp_trap_send
0007b0  8868              LDRH     r0,[r5,#2]            ;564  ; snmp_bat_flag_puts
0007b2  f0400001          ORR      r0,r0,#1              ;564
0007b6  8068              STRH     r0,[r5,#2]            ;564
0007b8  e011              B        |L1.2014|
                  |L1.1978|
0007ba  8860              LDRH     r0,[r4,#2]            ;569  ; snmp_bat_flag
0007bc  f0200001          BIC      r0,r0,#1              ;569
0007c0  8060              STRH     r0,[r4,#2]            ;569
0007c2  8868              LDRH     r0,[r5,#2]            ;570  ; snmp_bat_flag_puts
0007c4  07c0              LSLS     r0,r0,#31             ;570
0007c6  d00a              BEQ      |L1.2014|
0007c8  2317              MOVS     r3,#0x17              ;572
0007ca  2208              MOVS     r2,#8                 ;572
0007cc  2105              MOVS     r1,#5                 ;572
0007ce  f2af309c          ADR      r0,|L1.1076|
0007d2  f7fffffe          BL       snmp_trap_send
0007d6  8868              LDRH     r0,[r5,#2]            ;573  ; snmp_bat_flag_puts
0007d8  f0200001          BIC      r0,r0,#1              ;573
0007dc  8068              STRH     r0,[r5,#2]            ;573
                  |L1.2014|
0007de  f898008b          LDRB     r0,[r8,#0x8b]         ;577  ; bat
0007e2  07c0              LSLS     r0,r0,#31             ;577
0007e4  d012              BEQ      |L1.2060|
0007e6  8860              LDRH     r0,[r4,#2]            ;579  ; snmp_bat_flag
0007e8  f0400002          ORR      r0,r0,#2              ;579
0007ec  8060              STRH     r0,[r4,#2]            ;579
0007ee  8828              LDRH     r0,[r5,#0]            ;580  ; snmp_bat_flag_puts
0007f0  0780              LSLS     r0,r0,#30             ;580
0007f2  d41d              BMI      |L1.2096|
0007f4  2318              MOVS     r3,#0x18              ;582
0007f6  2208              MOVS     r2,#8                 ;582
0007f8  2105              MOVS     r1,#5                 ;582
0007fa  f2af30a0          ADR      r0,|L1.1116|
0007fe  f7fffffe          BL       snmp_trap_send
000802  8868              LDRH     r0,[r5,#2]            ;583  ; snmp_bat_flag_puts
000804  f0400002          ORR      r0,r0,#2              ;583
000808  8068              STRH     r0,[r5,#2]            ;583
00080a  e011              B        |L1.2096|
                  |L1.2060|
00080c  8860              LDRH     r0,[r4,#2]            ;588  ; snmp_bat_flag
00080e  f0200002          BIC      r0,r0,#2              ;588
000812  8060              STRH     r0,[r4,#2]            ;588
000814  8868              LDRH     r0,[r5,#2]            ;589  ; snmp_bat_flag_puts
000816  0780              LSLS     r0,r0,#30             ;589
000818  d50a              BPL      |L1.2096|
00081a  2319              MOVS     r3,#0x19              ;591
00081c  2208              MOVS     r2,#8                 ;591
00081e  2105              MOVS     r1,#5                 ;591
000820  f2af309c          ADR      r0,|L1.1160|
000824  f7fffffe          BL       snmp_trap_send
000828  8868              LDRH     r0,[r5,#2]            ;592  ; snmp_bat_flag_puts
00082a  f0200002          BIC      r0,r0,#2              ;592
00082e  8068              STRH     r0,[r5,#2]            ;592
                  |L1.2096|
000830  f898008b          LDRB     r0,[r8,#0x8b]         ;596  ; bat
000834  0780              LSLS     r0,r0,#30             ;596
000836  d512              BPL      |L1.2142|
000838  8860              LDRH     r0,[r4,#2]            ;598  ; snmp_bat_flag
00083a  f0400004          ORR      r0,r0,#4              ;598
00083e  8060              STRH     r0,[r4,#2]            ;598
000840  8868              LDRH     r0,[r5,#2]            ;599  ; snmp_bat_flag_puts
000842  0740              LSLS     r0,r0,#29             ;599
000844  d41d              BMI      |L1.2178|
000846  231a              MOVS     r3,#0x1a              ;601
000848  2208              MOVS     r2,#8                 ;601
00084a  2105              MOVS     r1,#5                 ;601
00084c  f2af3094          ADR      r0,|L1.1212|
000850  f7fffffe          BL       snmp_trap_send
000854  8868              LDRH     r0,[r5,#2]            ;602  ; snmp_bat_flag_puts
000856  f0400004          ORR      r0,r0,#4              ;602
00085a  8068              STRH     r0,[r5,#2]            ;602
00085c  e011              B        |L1.2178|
                  |L1.2142|
00085e  8860              LDRH     r0,[r4,#2]            ;607  ; snmp_bat_flag
000860  f0200004          BIC      r0,r0,#4              ;607
000864  8060              STRH     r0,[r4,#2]            ;607
000866  8868              LDRH     r0,[r5,#2]            ;608  ; snmp_bat_flag_puts
000868  0740              LSLS     r0,r0,#29             ;608
00086a  d50a              BPL      |L1.2178|
00086c  231b              MOVS     r3,#0x1b              ;610
00086e  2208              MOVS     r2,#8                 ;610
000870  2105              MOVS     r1,#5                 ;610
000872  f2af3090          ADR      r0,|L1.1252|
000876  f7fffffe          BL       snmp_trap_send
00087a  8868              LDRH     r0,[r5,#2]            ;611  ; snmp_bat_flag_puts
00087c  f0200004          BIC      r0,r0,#4              ;611
000880  8068              STRH     r0,[r5,#2]            ;611
                  |L1.2178|
000882  f9b91000          LDRSH    r1,[r9,#0]            ;615  ; IKB
000886  f9b80054          LDRSH    r0,[r8,#0x54]         ;615  ; bat
00088a  424a              RSBS     r2,r1,#0              ;615
00088c  4290              CMP      r0,r2                 ;615
00088e  da04              BGE      |L1.2202|
000890  8860              LDRH     r0,[r4,#2]            ;615  ; snmp_bat_flag
000892  f0400008          ORR      r0,r0,#8              ;615
000896  8060              STRH     r0,[r4,#2]            ;615
000898  e005              B        |L1.2214|
                  |L1.2202|
00089a  4288              CMP      r0,r1                 ;616
00089c  dd03              BLE      |L1.2214|
00089e  8860              LDRH     r0,[r4,#2]            ;616  ; snmp_bat_flag
0008a0  f0200008          BIC      r0,r0,#8              ;616
0008a4  8060              STRH     r0,[r4,#2]            ;616
                  |L1.2214|
0008a6  f8960023          LDRB     r0,[r6,#0x23]         ;618  ; spc_stat
0008aa  2801              CMP      r0,#1                 ;618
0008ac  d102              BNE      |L1.2228|
0008ae  f8960024          LDRB     r0,[r6,#0x24]         ;618  ; spc_bat
0008b2  b3e0              CBZ      r0,|L1.2350|
                  |L1.2228|
0008b4  8860              LDRH     r0,[r4,#2]            ;629  ; snmp_bat_flag
0008b6  f0200010          BIC      r0,r0,#0x10           ;629
0008ba  8060              STRH     r0,[r4,#2]            ;629
0008bc  8868              LDRH     r0,[r5,#2]            ;630  ; snmp_bat_flag_puts
0008be  06c0              LSLS     r0,r0,#27             ;630
0008c0  d50a              BPL      |L1.2264|
0008c2  231d              MOVS     r3,#0x1d              ;632
0008c4  2208              MOVS     r2,#8                 ;632
0008c6  2105              MOVS     r1,#5                 ;632
0008c8  f2af30b4          ADR      r0,|L1.1304|
0008cc  f7fffffe          BL       snmp_trap_send
0008d0  8868              LDRH     r0,[r5,#2]            ;633  ; snmp_bat_flag_puts
0008d2  f0200010          BIC      r0,r0,#0x10           ;633
0008d6  8068              STRH     r0,[r5,#2]            ;633
                  |L1.2264|
0008d8  f8960023          LDRB     r0,[r6,#0x23]         ;637  ; spc_stat
0008dc  2802              CMP      r0,#2                 ;637
0008de  d03a              BEQ      |L1.2390|
0008e0  8860              LDRH     r0,[r4,#2]            ;648  ; snmp_bat_flag
0008e2  f0200020          BIC      r0,r0,#0x20           ;648
0008e6  8060              STRH     r0,[r4,#2]            ;648
0008e8  8868              LDRH     r0,[r5,#2]            ;649  ; snmp_bat_flag_puts
0008ea  0680              LSLS     r0,r0,#26             ;649
0008ec  d50a              BPL      |L1.2308|
0008ee  231f              MOVS     r3,#0x1f              ;651
0008f0  2208              MOVS     r2,#8                 ;651
0008f2  2105              MOVS     r1,#5                 ;651
0008f4  f2af30c0          ADR      r0,|L1.1336|
0008f8  f7fffffe          BL       snmp_trap_send
0008fc  8868              LDRH     r0,[r5,#2]            ;652  ; snmp_bat_flag_puts
0008fe  f0200020          BIC      r0,r0,#0x20           ;652
000902  8068              STRH     r0,[r5,#2]            ;652
                  |L1.2308|
000904  7870              LDRB     r0,[r6,#1]            ;656  ; vz_error
000906  b3c8              CBZ      r0,|L1.2428|
000908  8860              LDRH     r0,[r4,#2]            ;658  ; snmp_bat_flag
00090a  f0400040          ORR      r0,r0,#0x40           ;658
00090e  8060              STRH     r0,[r4,#2]            ;658
000910  8868              LDRH     r0,[r5,#2]            ;659  ; snmp_bat_flag_puts
000912  0640              LSLS     r0,r0,#25             ;659
000914  d445              BMI      |L1.2466|
000916  2320              MOVS     r3,#0x20              ;661
000918  2208              MOVS     r2,#8                 ;661
00091a  2105              MOVS     r1,#5                 ;661
00091c  f2af30c4          ADR      r0,|L1.1372|
000920  f7fffffe          BL       snmp_trap_send
000924  8868              LDRH     r0,[r5,#2]            ;662  ; snmp_bat_flag_puts
000926  f0400040          ORR      r0,r0,#0x40           ;662
00092a  8068              STRH     r0,[r5,#2]            ;662
00092c  e039              B        |L1.2466|
                  |L1.2350|
00092e  e7ff              B        |L1.2352|
                  |L1.2352|
000930  8860              LDRH     r0,[r4,#2]            ;620  ; snmp_bat_flag
000932  f0400010          ORR      r0,r0,#0x10           ;620
000936  8060              STRH     r0,[r4,#2]            ;620
000938  8868              LDRH     r0,[r5,#2]            ;621  ; snmp_bat_flag_puts
00093a  06c0              LSLS     r0,r0,#27             ;621
00093c  d4cc              BMI      |L1.2264|
00093e  231c              MOVS     r3,#0x1c              ;623
000940  2208              MOVS     r2,#8                 ;623
000942  2105              MOVS     r1,#5                 ;623
000944  f2af30c8          ADR      r0,|L1.1408|
000948  f7fffffe          BL       snmp_trap_send
00094c  8868              LDRH     r0,[r5,#2]            ;624  ; snmp_bat_flag_puts
00094e  f0400010          ORR      r0,r0,#0x10           ;624
000952  8068              STRH     r0,[r5,#2]            ;624
000954  e7c0              B        |L1.2264|
                  |L1.2390|
000956  8860              LDRH     r0,[r4,#2]            ;639  ; snmp_bat_flag
000958  f0400020          ORR      r0,r0,#0x20           ;639
00095c  8060              STRH     r0,[r4,#2]            ;639
00095e  8868              LDRH     r0,[r5,#2]            ;640  ; snmp_bat_flag_puts
000960  0680              LSLS     r0,r0,#26             ;640
000962  d4cf              BMI      |L1.2308|
000964  231e              MOVS     r3,#0x1e              ;642
000966  2208              MOVS     r2,#8                 ;642
000968  2105              MOVS     r1,#5                 ;642
00096a  f2af30cc          ADR      r0,|L1.1440|
00096e  f7fffffe          BL       snmp_trap_send
000972  8868              LDRH     r0,[r5,#2]            ;643  ; snmp_bat_flag_puts
000974  f0400020          ORR      r0,r0,#0x20           ;643
000978  8068              STRH     r0,[r5,#2]            ;643
00097a  e7c3              B        |L1.2308|
                  |L1.2428|
00097c  e7ff              B        |L1.2430|
                  |L1.2430|
00097e  8860              LDRH     r0,[r4,#2]            ;667  ; snmp_bat_flag
000980  f0200040          BIC      r0,r0,#0x40           ;667
000984  8060              STRH     r0,[r4,#2]            ;667
000986  8868              LDRH     r0,[r5,#2]            ;668  ; snmp_bat_flag_puts
000988  0640              LSLS     r0,r0,#25             ;668
00098a  d50a              BPL      |L1.2466|
00098c  2321              MOVS     r3,#0x21              ;670
00098e  2208              MOVS     r2,#8                 ;670
000990  2105              MOVS     r1,#5                 ;670
000992  f2af30d0          ADR      r0,|L1.1476|
000996  f7fffffe          BL       snmp_trap_send
00099a  8868              LDRH     r0,[r5,#2]            ;671  ; snmp_bat_flag_puts
00099c  f0200040          BIC      r0,r0,#0x40           ;671
0009a0  8068              STRH     r0,[r5,#2]            ;671
                  |L1.2466|
0009a2  4877              LDR      r0,|L1.2944|
0009a4  7800              LDRB     r0,[r0,#0]            ;675  ; sp_ch_stat
0009a6  2802              CMP      r0,#2                 ;675
0009a8  d026              BEQ      |L1.2552|
0009aa  8860              LDRH     r0,[r4,#2]            ;686  ; snmp_bat_flag
0009ac  f0200080          BIC      r0,r0,#0x80           ;686
0009b0  8060              STRH     r0,[r4,#2]            ;686
0009b2  8868              LDRH     r0,[r5,#2]            ;687  ; snmp_bat_flag_puts
0009b4  0600              LSLS     r0,r0,#24             ;687
0009b6  d50a              BPL      |L1.2510|
0009b8  2323              MOVS     r3,#0x23              ;689
0009ba  2208              MOVS     r2,#8                 ;689
0009bc  2105              MOVS     r1,#5                 ;689
0009be  f2af30d4          ADR      r0,|L1.1516|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;690  ; snmp_bat_flag_puts
0009c8  f0200080          BIC      r0,r0,#0x80           ;690
0009cc  8068              STRH     r0,[r5,#2]            ;690
                  |L1.2510|
0009ce  78b0              LDRB     r0,[r6,#2]            ;694  ; sp_ch_error
0009d0  b328              CBZ      r0,|L1.2590|
0009d2  8860              LDRH     r0,[r4,#2]            ;696  ; snmp_bat_flag
0009d4  f4407080          ORR      r0,r0,#0x100          ;696
0009d8  8060              STRH     r0,[r4,#2]            ;696
0009da  8868              LDRH     r0,[r5,#2]            ;697  ; snmp_bat_flag_puts
0009dc  05c0              LSLS     r0,r0,#23             ;697
0009de  d430              BMI      |L1.2626|
0009e0  2324              MOVS     r3,#0x24              ;699
0009e2  2208              MOVS     r2,#8                 ;699
0009e4  2105              MOVS     r1,#5                 ;699
0009e6  f2af30dc          ADR      r0,|L1.1548|
0009ea  f7fffffe          BL       snmp_trap_send
0009ee  8868              LDRH     r0,[r5,#2]            ;700  ; snmp_bat_flag_puts
0009f0  f4407080          ORR      r0,r0,#0x100          ;700
0009f4  8068              STRH     r0,[r5,#2]            ;700
0009f6  e024              B        |L1.2626|
                  |L1.2552|
0009f8  8860              LDRH     r0,[r4,#2]            ;677  ; snmp_bat_flag
0009fa  f0400080          ORR      r0,r0,#0x80           ;677
0009fe  8060              STRH     r0,[r4,#2]            ;677
000a00  8868              LDRH     r0,[r5,#2]            ;678  ; snmp_bat_flag_puts
000a02  0600              LSLS     r0,r0,#24             ;678
000a04  d4e3              BMI      |L1.2510|
000a06  2322              MOVS     r3,#0x22              ;680
000a08  2208              MOVS     r2,#8                 ;680
000a0a  2105              MOVS     r1,#5                 ;680
000a0c  f2af30e4          ADR      r0,|L1.1580|
000a10  f7fffffe          BL       snmp_trap_send
000a14  8868              LDRH     r0,[r5,#2]            ;681  ; snmp_bat_flag_puts
000a16  f0400080          ORR      r0,r0,#0x80           ;681
000a1a  8068              STRH     r0,[r5,#2]            ;681
000a1c  e7d7              B        |L1.2510|
                  |L1.2590|
000a1e  8860              LDRH     r0,[r4,#2]            ;705  ; snmp_bat_flag
000a20  f4207080          BIC      r0,r0,#0x100          ;705
000a24  8060              STRH     r0,[r4,#2]            ;705
000a26  8868              LDRH     r0,[r5,#2]            ;706  ; snmp_bat_flag_puts
000a28  05c0              LSLS     r0,r0,#23             ;706
000a2a  d50a              BPL      |L1.2626|
000a2c  2325              MOVS     r3,#0x25              ;708
000a2e  2208              MOVS     r2,#8                 ;708
000a30  2105              MOVS     r1,#5                 ;708
000a32  f2af30e8          ADR      r0,|L1.1612|
000a36  f7fffffe          BL       snmp_trap_send
000a3a  8868              LDRH     r0,[r5,#2]            ;709  ; snmp_bat_flag_puts
000a3c  f4207080          BIC      r0,r0,#0x100          ;709
000a40  8068              STRH     r0,[r5,#2]            ;709
                  |L1.2626|
000a42  7970              LDRB     r0,[r6,#5]            ;713  ; vz1_stat
000a44  b190              CBZ      r0,|L1.2668|
000a46  8860              LDRH     r0,[r4,#2]            ;715  ; snmp_bat_flag
000a48  f4407000          ORR      r0,r0,#0x200          ;715
000a4c  8060              STRH     r0,[r4,#2]            ;715
000a4e  8868              LDRH     r0,[r5,#2]            ;716  ; snmp_bat_flag_puts
000a50  0580              LSLS     r0,r0,#22             ;716
000a52  d41d              BMI      |L1.2704|
000a54  2326              MOVS     r3,#0x26              ;718
000a56  2208              MOVS     r2,#8                 ;718
000a58  2105              MOVS     r1,#5                 ;718
000a5a  f2af30ec          ADR      r0,|L1.1648|
000a5e  f7fffffe          BL       snmp_trap_send
000a62  8868              LDRH     r0,[r5,#2]            ;719  ; snmp_bat_flag_puts
000a64  f4407000          ORR      r0,r0,#0x200          ;719
000a68  8068              STRH     r0,[r5,#2]            ;719
000a6a  e011              B        |L1.2704|
                  |L1.2668|
000a6c  8860              LDRH     r0,[r4,#2]            ;724  ; snmp_bat_flag
000a6e  f4207000          BIC      r0,r0,#0x200          ;724
000a72  8060              STRH     r0,[r4,#2]            ;724
000a74  8868              LDRH     r0,[r5,#2]            ;725  ; snmp_bat_flag_puts
000a76  0580              LSLS     r0,r0,#22             ;725
000a78  d50a              BPL      |L1.2704|
000a7a  2327              MOVS     r3,#0x27              ;727
000a7c  2208              MOVS     r2,#8                 ;727
000a7e  2105              MOVS     r1,#5                 ;727
000a80  f2af30f4          ADR      r0,|L1.1680|
000a84  f7fffffe          BL       snmp_trap_send
000a88  8868              LDRH     r0,[r5,#2]            ;728  ; snmp_bat_flag_puts
000a8a  f4207000          BIC      r0,r0,#0x200          ;728
000a8e  8068              STRH     r0,[r5,#2]            ;728
                  |L1.2704|
000a90  78f0              LDRB     r0,[r6,#3]            ;732  ; vz1_error
000a92  b190              CBZ      r0,|L1.2746|
000a94  8860              LDRH     r0,[r4,#2]            ;734  ; snmp_bat_flag
000a96  f4406080          ORR      r0,r0,#0x400          ;734
000a9a  8060              STRH     r0,[r4,#2]            ;734
000a9c  8868              LDRH     r0,[r5,#2]            ;735  ; snmp_bat_flag_puts
000a9e  0540              LSLS     r0,r0,#21             ;735
000aa0  d41d              BMI      |L1.2782|
000aa2  2328              MOVS     r3,#0x28              ;737
000aa4  2208              MOVS     r2,#8                 ;737
000aa6  2105              MOVS     r1,#5                 ;737
000aa8  f2af30fc          ADR      r0,|L1.1712|
000aac  f7fffffe          BL       snmp_trap_send
000ab0  8868              LDRH     r0,[r5,#2]            ;738  ; snmp_bat_flag_puts
000ab2  f4406080          ORR      r0,r0,#0x400          ;738
000ab6  8068              STRH     r0,[r5,#2]            ;738
000ab8  e011              B        |L1.2782|
                  |L1.2746|
000aba  8860              LDRH     r0,[r4,#2]            ;743  ; snmp_bat_flag
000abc  f4206080          BIC      r0,r0,#0x400          ;743
000ac0  8060              STRH     r0,[r4,#2]            ;743
000ac2  8868              LDRH     r0,[r5,#2]            ;744  ; snmp_bat_flag_puts
000ac4  0540              LSLS     r0,r0,#21             ;744
000ac6  d50a              BPL      |L1.2782|
000ac8  2329              MOVS     r3,#0x29              ;746
000aca  2208              MOVS     r2,#8                 ;746
000acc  2105              MOVS     r1,#5                 ;746
000ace  f2af30fc          ADR      r0,|L1.1748|
000ad2  f7fffffe          BL       snmp_trap_send
000ad6  8868              LDRH     r0,[r5,#2]            ;747  ; snmp_bat_flag_puts
000ad8  f4206080          BIC      r0,r0,#0x400          ;747
000adc  8068              STRH     r0,[r5,#2]            ;747
                  |L1.2782|
000ade  79f0              LDRB     r0,[r6,#7]            ;751  ; vz2_stat
000ae0  b190              CBZ      r0,|L1.2824|
000ae2  8860              LDRH     r0,[r4,#2]            ;753  ; snmp_bat_flag
000ae4  f4406000          ORR      r0,r0,#0x800          ;753
000ae8  8060              STRH     r0,[r4,#2]            ;753
000aea  8868              LDRH     r0,[r5,#2]            ;754  ; snmp_bat_flag_puts
000aec  0500              LSLS     r0,r0,#20             ;754
000aee  d41d              BMI      |L1.2860|
000af0  232a              MOVS     r3,#0x2a              ;756
000af2  2208              MOVS     r2,#8                 ;756
000af4  2105              MOVS     r1,#5                 ;756
000af6  f2af30fc          ADR      r0,|L1.1788|
000afa  f7fffffe          BL       snmp_trap_send
000afe  8868              LDRH     r0,[r5,#2]            ;757  ; snmp_bat_flag_puts
000b00  f4406000          ORR      r0,r0,#0x800          ;757
000b04  8068              STRH     r0,[r5,#2]            ;757
000b06  e011              B        |L1.2860|
                  |L1.2824|
000b08  8860              LDRH     r0,[r4,#2]            ;762  ; snmp_bat_flag
000b0a  f4206000          BIC      r0,r0,#0x800          ;762
000b0e  8060              STRH     r0,[r4,#2]            ;762
000b10  8868              LDRH     r0,[r5,#2]            ;763  ; snmp_bat_flag_puts
000b12  0500              LSLS     r0,r0,#20             ;763
000b14  d50a              BPL      |L1.2860|
000b16  232b              MOVS     r3,#0x2b              ;765
000b18  2208              MOVS     r2,#8                 ;765
000b1a  2105              MOVS     r1,#5                 ;765
000b1c  f2af4008          ADR      r0,|L1.1816|
000b20  f7fffffe          BL       snmp_trap_send
000b24  8868              LDRH     r0,[r5,#2]            ;766  ; snmp_bat_flag_puts
000b26  f4206000          BIC      r0,r0,#0x800          ;766
000b2a  8068              STRH     r0,[r5,#2]            ;766
                  |L1.2860|
000b2c  7930              LDRB     r0,[r6,#4]            ;770  ; vz2_error
000b2e  b1a0              CBZ      r0,|L1.2906|
000b30  8860              LDRH     r0,[r4,#2]            ;772  ; snmp_bat_flag
000b32  f4405080          ORR      r0,r0,#0x1000         ;772
000b36  8060              STRH     r0,[r4,#2]            ;772
000b38  8868              LDRH     r0,[r5,#2]            ;773  ; snmp_bat_flag_puts
000b3a  04c0              LSLS     r0,r0,#19             ;773
000b3c  f53faa81          BMI      |L1.66|
000b40  232c              MOVS     r3,#0x2c              ;775
000b42  2208              MOVS     r2,#8                 ;775
000b44  2105              MOVS     r1,#5                 ;775
000b46  f2af4010          ADR      r0,|L1.1848|
000b4a  f7fffffe          BL       snmp_trap_send
000b4e  8868              LDRH     r0,[r5,#2]            ;776  ; snmp_bat_flag_puts
000b50  f4405080          ORR      r0,r0,#0x1000         ;776
000b54  8068              STRH     r0,[r5,#2]            ;776
                  |L1.2902|
000b56  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2906|
000b5a  e013              B        |L1.2948|
                  |L1.2908|
000b5c  42415420          DCB      "BAT #1,molding charge is unblocked",0
000b60  23312c6d
000b64  6f6c6469
000b68  6e672063
000b6c  68617267
000b70  65206973
000b74  20756e62
000b78  6c6f636b
000b7c  656400  
000b7f  00                DCB      0
                  |L1.2944|
                          DCD      sp_ch_stat
                  |L1.2948|
000b84  8860              LDRH     r0,[r4,#2]            ;781  ; snmp_bat_flag
000b86  f4205080          BIC      r0,r0,#0x1000         ;781
000b8a  8060              STRH     r0,[r4,#2]            ;781
000b8c  8868              LDRH     r0,[r5,#2]            ;782  ; snmp_bat_flag_puts
000b8e  04c0              LSLS     r0,r0,#19             ;782
000b90  d5e1              BPL      |L1.2902|
000b92  232d              MOVS     r3,#0x2d              ;784
000b94  2208              MOVS     r2,#8                 ;784
000b96  2105              MOVS     r1,#5                 ;784
000b98  f2af0040          ADR      r0,|L1.2908|
000b9c  f7fffffe          BL       snmp_trap_send
000ba0  8868              LDRH     r0,[r5,#2]            ;785  ; snmp_bat_flag_puts
000ba2  f4205080          BIC      r0,r0,#0x1000         ;785
000ba6  8068              STRH     r0,[r5,#2]            ;785
000ba8  e7d5              B        |L1.2902|
;;;918    
                          ENDP

                  ke_start PROC
;;;921    //-----------------------------------------------
;;;922    void ke_start(char in)
000baa  e92d41fc          PUSH     {r2-r8,lr}
;;;923    {          
000bae  4606              MOV      r6,r0
;;;924    ke_start_stat=(enum_ke_start_stat)0;		 
000bb0  f04f0400          MOV      r4,#0
000bb4  4dff              LDR      r5,|L1.4020|
;;;925    /*
;;;926    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;927    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;928    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;929    #endif
;;;930    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;931    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;932    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;933    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;934    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;935    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;936    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;937    else */
;;;938    	{
;;;939    
;;;940    	ke_start_stat=kssYES;
000bb6  f04f0064          MOV      r0,#0x64
000bba  f105050a          ADD      r5,r5,#0xa
000bbe  7768              STRB     r0,[r5,#0x1d]
;;;941    
;;;942    	spc_stat=spcKE;
000bc0  f04f0701          MOV      r7,#1
000bc4  766f              STRB     r7,[r5,#0x19]
;;;943    	__ee_spc_stat=spcKE;
000bc6  f8a57064          STRH     r7,[r5,#0x64]
;;;944    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000bca  4639              MOV      r1,r7
000bcc  f240209a          MOV      r0,#0x29a
000bd0  f7fffffe          BL       lc640_write_int
;;;945    	
;;;946    	spc_bat=0;
000bd4  76ac              STRB     r4,[r5,#0x1a]
;;;947    	__ee_spc_bat=0;
000bd6  f8a54066          STRH     r4,[r5,#0x66]
;;;948    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000bda  4621              MOV      r1,r4
000bdc  f240209e          MOV      r0,#0x29e
000be0  f7fffffe          BL       lc640_write_int
;;;949    
;;;950    	bat[0]._zar_cnt_ke=0;
000be4  f8df83d0          LDR      r8,|L1.4024|
000be8  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;951    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000bec  48f3              LDR      r0,|L1.4028|
000bee  2100              MOVS     r1,#0
000bf0  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000bf4  f7fffffe          BL       lc640_write_int
;;;952    
;;;953    	bat[0]._time_min_cnt_ke=0;
000bf8  f8a8404a          STRH     r4,[r8,#0x4a]
;;;954    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000bfc  2100              MOVS     r1,#0
000bfe  f44f70e3          MOV      r0,#0x1c6
000c02  f7fffffe          BL       lc640_write_int
;;;955    
;;;956    	
;;;957    	spc_phase=0;
000c06  76ec              STRB     r4,[r5,#0x1b]
;;;958    	__ee_spc_phase=0;
000c08  f8a54068          STRH     r4,[r5,#0x68]
;;;959    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000c0c  4621              MOV      r1,r4
000c0e  f44f7028          MOV      r0,#0x2a0
000c12  f7fffffe          BL       lc640_write_int
;;;960    
;;;961    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;962    
;;;963    		{					
;;;964    		signed short temp_temp;
;;;965    		signed char temp;
;;;966    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000c16  eb060046          ADD      r0,r6,r6,LSL #1
000c1a  eb001006          ADD      r0,r0,r6,LSL #4
000c1e  eb080180          ADD      r1,r8,r0,LSL #2
000c22  48e7              LDR      r0,|L1.4032|
000c24  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000c26  f1000001          ADD      r0,r0,#1
000c2a  f0000007          AND      r0,r0,#7
000c2e  eb010040          ADD      r0,r1,r0,LSL #1
000c32  8c00              LDRH     r0,[r0,#0x20]
000c34  9001              STR      r0,[sp,#4]
;;;967    		    
;;;968    		temp=LPC_RTC->YEAR;
000c36  4ee3              LDR      r6,|L1.4036|
000c38  8bb0              LDRH     r0,[r6,#0x1c]
000c3a  9000              STR      r0,[sp,#0]
;;;969    		gran_char(&temp,1,99);
000c3c  f04f0263          MOV      r2,#0x63
000c40  f04f0101          MOV      r1,#1
000c44  4668              MOV      r0,sp
000c46  f7fffffe          BL       gran_char
;;;970    		*((char*)(&(ke_date[0])))=temp;
000c4a  4cda              LDR      r4,|L1.4020|
000c4c  f89d0000          LDRB     r0,[sp,#0]
000c50  34fc              ADDS     r4,r4,#0xfc
000c52  7020              STRB     r0,[r4,#0]
;;;971    			
;;;972    		temp=LPC_RTC->MONTH;
000c54  7e30              LDRB     r0,[r6,#0x18]
000c56  9000              STR      r0,[sp,#0]
;;;973    		gran_char(&temp,1,12);
000c58  220c              MOVS     r2,#0xc
000c5a  2101              MOVS     r1,#1
000c5c  4668              MOV      r0,sp
000c5e  f7fffffe          BL       gran_char
;;;974    		*(((char*)(&(ke_date[0])))+1)=temp;
000c62  f89d0000          LDRB     r0,[sp,#0]
000c66  7060              STRB     r0,[r4,#1]
;;;975    		
;;;976    		temp=LPC_RTC->DOM;
000c68  7b30              LDRB     r0,[r6,#0xc]
000c6a  9000              STR      r0,[sp,#0]
;;;977    		gran_char(&temp,1,31);
000c6c  221f              MOVS     r2,#0x1f
000c6e  2101              MOVS     r1,#1
000c70  4668              MOV      r0,sp
000c72  f7fffffe          BL       gran_char
;;;978    		*(((char*)(&(ke_date[0])))+2)=temp;			
000c76  f89d0000          LDRB     r0,[sp,#0]
000c7a  70a0              STRB     r0,[r4,#2]
;;;979    				
;;;980    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000c7c  f89d0004          LDRB     r0,[sp,#4]
000c80  70e0              STRB     r0,[r4,#3]
;;;981    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000c82  f24020a2          MOV      r0,#0x2a2
000c86  6821              LDR      r1,[r4,#0]  ; ke_date
000c88  f7fffffe          BL       lc640_write_long
;;;982    
;;;983    		temp=LPC_RTC->HOUR;
000c8c  7a30              LDRB     r0,[r6,#8]
000c8e  9000              STR      r0,[sp,#0]
;;;984    		gran_char(&temp,0,23);
000c90  2217              MOVS     r2,#0x17
000c92  2100              MOVS     r1,#0
000c94  4668              MOV      r0,sp
000c96  f7fffffe          BL       gran_char
;;;985    		*((char*)(&(ke_date[1])))=temp;
000c9a  f89d0000          LDRB     r0,[sp,#0]
000c9e  7120              STRB     r0,[r4,#4]
;;;986                   
;;;987    		temp=LPC_RTC->MIN;
000ca0  7930              LDRB     r0,[r6,#4]
000ca2  9000              STR      r0,[sp,#0]
;;;988    		gran_char(&temp,0,59);
000ca4  223b              MOVS     r2,#0x3b
000ca6  2100              MOVS     r1,#0
000ca8  4668              MOV      r0,sp
000caa  f7fffffe          BL       gran_char
;;;989    		*(((char*)(&(ke_date[1])))+1)=temp;
000cae  f89d0000          LDRB     r0,[sp,#0]
000cb2  7160              STRB     r0,[r4,#5]
;;;990    	          
;;;991    		temp=LPC_RTC->SEC;
000cb4  7830              LDRB     r0,[r6,#0]
000cb6  9000              STR      r0,[sp,#0]
;;;992    		gran_char(&temp,0,59);
000cb8  223b              MOVS     r2,#0x3b
000cba  2100              MOVS     r1,#0
000cbc  4668              MOV      r0,sp
000cbe  f7fffffe          BL       gran_char
;;;993    		*(((char*)(&(ke_date[1])))+2)=temp;
000cc2  f89d0000          LDRB     r0,[sp,#0]
000cc6  71a0              STRB     r0,[r4,#6]
;;;994    			
;;;995    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000cc8  f89d0005          LDRB     r0,[sp,#5]
000ccc  71e0              STRB     r0,[r4,#7]
;;;996    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000cce  f24020a6          MOV      r0,#0x2a6
000cd2  6861              LDR      r1,[r4,#4]  ; ke_date
000cd4  f7fffffe          BL       lc640_write_long
;;;997    		}
;;;998    	bat_hndl_zvu_ke_init=1;
000cd8  702f              STRB     r7,[r5,#0]
;;;999    	}
;;;1000   }
000cda  e8bd81fc          POP      {r2-r8,pc}
;;;1001   #endif
                          ENDP

                  ke_drv PROC
;;;1083   //-----------------------------------------------
;;;1084   void ke_drv(void)
000cde  e92d47f0          PUSH     {r4-r10,lr}
;;;1085   {
000ce2  b088              SUB      sp,sp,#0x20
;;;1086   static char ke_drv_cnt_10s;
;;;1087   static short i_bat_buff[6];
;;;1088   static char i_bat_buff_cnt;
;;;1089   short ke_drv_i_temp;
;;;1090   short ke_drv_i_avg;
;;;1091   char i;
;;;1092   short ke_drv_i_temp_temp;
;;;1093   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000ce4  f04f021c          MOV      r2,#0x1c
000ce8  49b7              LDR      r1,|L1.4040|
000cea  a801              ADD      r0,sp,#4
000cec  f7fffffe          BL       __aeabi_memcpy4
;;;1094   
;;;1095   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000cf0  4eb0              LDR      r6,|L1.4020|
;;;1096   	{
;;;1097   	
;;;1098   	i_bat_buff[0]=0;
000cf2  4bb6              LDR      r3,|L1.4044|
000cf4  2500              MOVS     r5,#0
000cf6  7ab0              LDRB     r0,[r6,#0xa]          ;1095  ; bat_hndl_zvu_ke_init
000cf8  2801              CMP      r0,#1                 ;1095
000cfa  d102              BNE      |L1.3330|
000cfc  801d              STRH     r5,[r3,#0]
;;;1099   	i_bat_buff[0]=0;
;;;1100   	i_bat_buff[0]=0;
;;;1101   	i_bat_buff[0]=0;
;;;1102   	i_bat_buff[0]=0;
;;;1103   	i_bat_buff[0]=0;
;;;1104   	i_bat_buff_cnt=0;
000cfe  73b5              STRB     r5,[r6,#0xe]
;;;1105   
;;;1106   	bat_hndl_zvu_ke_init=0;
000d00  72b5              STRB     r5,[r6,#0xa]
                  |L1.3330|
;;;1107   	}
;;;1108   
;;;1109   
;;;1110   
;;;1111   
;;;1112   if(spc_stat==spcKE)
000d02  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000d06  2801              CMP      r0,#1
000d08  d17e              BNE      |L1.3592|
;;;1113   	{
;;;1114   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000d0a  48b1              LDR      r0,|L1.4048|
000d0c  f04f070a          MOV      r7,#0xa
000d10  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000d14  f1c00000          RSB      r0,r0,#0
000d18  fb90f0f7          SDIV     r0,r0,r7
000d1c  b200              SXTH     r0,r0
;;;1115   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000d1e  2800              CMP      r0,#0
000d20  da01              BGE      |L1.3366|
000d22  f04f0000          MOV      r0,#0
                  |L1.3366|
;;;1116   
;;;1117   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000d26  4aab              LDR      r2,|L1.4052|
000d28  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000d2a  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1118   	if(++ke_drv_cnt_10s>10)
000d2c  1c49              ADDS     r1,r1,#1
;;;1119   		{
;;;1120   		ke_drv_cnt_10s=0;
;;;1121   
;;;1122   		i_bat_buff_cnt++;
;;;1123   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1124   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1125   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1126   		ke_drv_i_temp_temp=0;
;;;1127   		for(i=0;i<6;i++)
;;;1128   			{
;;;1129   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1130   			}
;;;1131   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1132   
;;;1133   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1134   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1135   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1136   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1137   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1138   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1139   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1140   		
;;;1141   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1142   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1143   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1144   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1145   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1146   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1147   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1148   
;;;1149   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1150   		bat_hndl_i_temp=ke_drv_i_avg;
000d2e  4ca1              LDR      r4,|L1.4020|
000d30  b2c9              UXTB     r1,r1                 ;1118
000d32  3480              ADDS     r4,r4,#0x80
000d34  7371              STRB     r1,[r6,#0xd]          ;1118
000d36  290a              CMP      r1,#0xa               ;1118
000d38  d967              BLS      |L1.3594|
000d3a  7375              STRB     r5,[r6,#0xd]          ;1120
000d3c  7bb1              LDRB     r1,[r6,#0xe]          ;1122  ; i_bat_buff_cnt
000d3e  f1010101          ADD      r1,r1,#1              ;1122
000d42  b2c9              UXTB     r1,r1                 ;1122
000d44  73b1              STRB     r1,[r6,#0xe]          ;1122
000d46  2906              CMP      r1,#6                 ;1123
000d48  d300              BCC      |L1.3404|
000d4a  73b5              STRB     r5,[r6,#0xe]          ;1123
                  |L1.3404|
000d4c  7bb1              LDRB     r1,[r6,#0xe]          ;1124  ; i_bat_buff_cnt
000d4e  6091              STR      r1,[r2,#8]            ;1124  ; bat_hndl_plazma
000d50  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1125
000d54  f04f0100          MOV      r1,#0                 ;1126
000d58  4608              MOV      r0,r1                 ;1127
                  |L1.3418|
000d5a  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1129
000d5e  4461              ADD      r1,r1,r12             ;1129
000d60  b209              SXTH     r1,r1                 ;1129
000d62  f1000001          ADD      r0,r0,#1              ;1127
000d66  b2c0              UXTB     r0,r0                 ;1127
000d68  2806              CMP      r0,#6                 ;1127
000d6a  d3f6              BCC      |L1.3418|
000d6c  f04f0006          MOV      r0,#6                 ;1131
000d70  fb91f0f0          SDIV     r0,r1,r0              ;1131
000d74  b201              SXTH     r1,r0                 ;1131
000d76  4898              LDR      r0,|L1.4056|
000d78  f8df8258          LDR      r8,|L1.4052|
000d7c  8800              LDRH     r0,[r0,#0]            ;1133  ; BAT_C_POINT_1_6
000d7e  f1a8081c          SUB      r8,r8,#0x1c           ;1133
000d82  eb000040          ADD      r0,r0,r0,LSL #1       ;1133
000d86  ea4f0040          LSL      r0,r0,#1              ;1133
000d8a  f8a80000          STRH     r0,[r8,#0]            ;1133
000d8e  4893              LDR      r0,|L1.4060|
000d90  8800              LDRH     r0,[r0,#0]            ;1134  ; BAT_C_POINT_1_2
000d92  ea4f0040          LSL      r0,r0,#1              ;1134
000d96  f8a80002          STRH     r0,[r8,#2]            ;1134
000d9a  4891              LDR      r0,|L1.4064|
000d9c  8800              LDRH     r0,[r0,#0]            ;1135  ; BAT_C_POINT_1
000d9e  f8a80004          STRH     r0,[r8,#4]            ;1135
000da2  4890              LDR      r0,|L1.4068|
000da4  f04f0303          MOV      r3,#3                 ;1136
000da8  f9b00000          LDRSH    r0,[r0,#0]            ;1136  ; BAT_C_POINT_3
000dac  fb90f0f3          SDIV     r0,r0,r3              ;1136
000db0  f8a80006          STRH     r0,[r8,#6]            ;1136
000db4  488c              LDR      r0,|L1.4072|
000db6  f04f0305          MOV      r3,#5                 ;1137
000dba  f9b00000          LDRSH    r0,[r0,#0]            ;1137  ; BAT_C_POINT_5
000dbe  fb90f0f3          SDIV     r0,r0,r3              ;1137
000dc2  f8a80008          STRH     r0,[r8,#8]            ;1137
000dc6  4889              LDR      r0,|L1.4076|
000dc8  f9b00000          LDRSH    r0,[r0,#0]            ;1138  ; BAT_C_POINT_10
000dcc  fb90f0f7          SDIV     r0,r0,r7              ;1138
000dd0  f8a8000a          STRH     r0,[r8,#0xa]          ;1138
000dd4  4886              LDR      r0,|L1.4080|
000dd6  f04f0314          MOV      r3,#0x14              ;1139
000dda  f9b00000          LDRSH    r0,[r0,#0]            ;1139  ; BAT_C_POINT_20
000dde  fb90f0f3          SDIV     r0,r0,r3              ;1139
000de2  f8a8000c          STRH     r0,[r8,#0xc]          ;1139
000de6  4883              LDR      r0,|L1.4084|
000de8  f108090e          ADD      r9,r8,#0xe            ;1141
000dec  f9b07000          LDRSH    r7,[r0,#0]            ;1141  ; BAT_U_END_1_6
000df0  f8a97000          STRH     r7,[r9,#0]            ;1141
000df4  4880              LDR      r0,|L1.4088|
000df6  8800              LDRH     r0,[r0,#0]            ;1142  ; BAT_U_END_1_2
000df8  f8a90002          STRH     r0,[r9,#2]            ;1142
000dfc  487f              LDR      r0,|L1.4092|
000dfe  8800              LDRH     r0,[r0,#0]            ;1143  ; BAT_U_END_1
000e00  f8a90004          STRH     r0,[r9,#4]            ;1143
000e04  487e              LDR      r0,|L1.4096|
000e06  e001              B        |L1.3596|
                  |L1.3592|
000e08  e11e              B        |L1.4168|
                  |L1.3594|
000e0a  e061              B        |L1.3792|
                  |L1.3596|
000e0c  8800              LDRH     r0,[r0,#0]            ;1144  ; BAT_U_END_3
000e0e  f8a90006          STRH     r0,[r9,#6]            ;1144
000e12  487c              LDR      r0,|L1.4100|
000e14  8800              LDRH     r0,[r0,#0]            ;1145  ; BAT_U_END_5
000e16  f8a90008          STRH     r0,[r9,#8]            ;1145
000e1a  487b              LDR      r0,|L1.4104|
000e1c  8800              LDRH     r0,[r0,#0]            ;1146  ; BAT_U_END_10
000e1e  f8a9000a          STRH     r0,[r9,#0xa]          ;1146
000e22  487a              LDR      r0,|L1.4108|
000e24  f9b0c000          LDRSH    r12,[r0,#0]           ;1147  ; BAT_U_END_20
000e28  f8a9c00c          STRH     r12,[r9,#0xc]         ;1147
000e2c  6051              STR      r1,[r2,#4]            ;1149  ; bat_hndl_plazma
000e2e  81a1              STRH     r1,[r4,#0xc]
;;;1151   		
;;;1152   		for(i=0;i<7;i++)
000e30  f04f0000          MOV      r0,#0
                  |L1.3636|
;;;1153   			{
;;;1154   			if(bat_hndl_i_temp>=I_from_t_table[i])
000e34  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000e38  428b              CMP      r3,r1
000e3a  dd04              BLE      |L1.3654|
000e3c  f1000001          ADD      r0,r0,#1              ;1152
000e40  b2c0              UXTB     r0,r0                 ;1152
000e42  2807              CMP      r0,#7                 ;1152
000e44  d3f6              BCC      |L1.3636|
                  |L1.3654|
;;;1155   				{
;;;1156   				break;
;;;1157   				}
;;;1158   			}
;;;1159   
;;;1160   		bat_hndl_plazma[0]=i;
000e46  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000e48  f10d0a04          ADD      r10,sp,#4             ;1093
;;;1161   
;;;1162   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000e4c  b1c8              CBZ      r0,|L1.3714|
;;;1163   		 else if((i>=1)&&(i<7))
000e4e  1e42              SUBS     r2,r0,#1
000e50  2a06              CMP      r2,#6
000e52  d219              BCS      |L1.3720|
;;;1164   		 	{
;;;1165   			short i1,i2;
;;;1166   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000e54  f8383012          LDRH     r3,[r8,r2,LSL #1]
000e58  eba30101          SUB      r1,r3,r1
000e5c  b209              SXTH     r1,r1
;;;1167   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000e5e  f8388010          LDRH     r8,[r8,r0,LSL #1]
000e62  eba30308          SUB      r3,r3,r8
000e66  b21b              SXTH     r3,r3
;;;1168   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000e68  f85a8020          LDR      r8,[r10,r0,LSL #2]
000e6c  f85a2022          LDR      r2,[r10,r2,LSL #2]
000e70  eba80802          SUB      r8,r8,r2
;;;1169   			bat_hndl_t_razr_ke*=(long)i1;
000e74  fb08f801          MUL      r8,r8,r1
;;;1170   			bat_hndl_t_razr_ke/=(long)i2;
000e78  fb98f1f3          SDIV     r1,r8,r3
;;;1171   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000e7c  4411              ADD      r1,r1,r2
000e7e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
;;;1172   			}
000e80  e006              B        |L1.3728|
                  |L1.3714|
000e82  9901              LDR      r1,[sp,#4]            ;1162
000e84  6521              STR      r1,[r4,#0x50]         ;1162  ; bat_hndl_t_razr_ke
000e86  e003              B        |L1.3728|
                  |L1.3720|
;;;1173   		else if(i>=7)
000e88  2807              CMP      r0,#7
000e8a  d301              BCC      |L1.3728|
;;;1174   			{
;;;1175   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
000e8c  9907              LDR      r1,[sp,#0x1c]
000e8e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
                  |L1.3728|
;;;1176   			}
;;;1177   
;;;1178   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
000e90  b1c0              CBZ      r0,|L1.3780|
;;;1179   		 else if((i>=1)&&(i<7))
000e92  1e41              SUBS     r1,r0,#1
000e94  2906              CMP      r1,#6
000e96  d217              BCS      |L1.3784|
;;;1180   		 	{
;;;1181   			long u1,tempL;
;;;1182   
;;;1183   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
000e98  f9393010          LDRSH    r3,[r9,r0,LSL #1]
000e9c  f9392011          LDRSH    r2,[r9,r1,LSL #1]
000ea0  eba30302          SUB      r3,r3,r2
;;;1184   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
000ea4  f85a1021          LDR      r1,[r10,r1,LSL #2]
000ea8  6d27              LDR      r7,[r4,#0x50]  ; bat_hndl_t_razr_ke
000eaa  eba70701          SUB      r7,r7,r1
;;;1185   			tempL*=u1;
000eae  fb03f307          MUL      r3,r3,r7
;;;1186   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000eb2  f85a0020          LDR      r0,[r10,r0,LSL #2]
000eb6  eba00001          SUB      r0,r0,r1
;;;1187   			tempL/=u1;
000eba  fb93f0f0          SDIV     r0,r3,r0
;;;1188   			tempL+=(long)U_end_from_i_table[i-1];
000ebe  4410              ADD      r0,r0,r2
;;;1189   			bat_hndl_u_end=(short)tempL;
000ec0  81e0              STRH     r0,[r4,#0xe]
;;;1190   			}
000ec2  e005              B        |L1.3792|
                  |L1.3780|
000ec4  81e7              STRH     r7,[r4,#0xe]          ;1178
000ec6  e003              B        |L1.3792|
                  |L1.3784|
;;;1191   		else if(i>=7)
000ec8  2807              CMP      r0,#7
000eca  d301              BCC      |L1.3792|
;;;1192   			{
;;;1193   			bat_hndl_u_end=U_end_from_i_table[6];
000ecc  f8a4c00e          STRH     r12,[r4,#0xe]
                  |L1.3792|
;;;1194   			}
;;;1195   
;;;1196   		}
;;;1197   
;;;1198   
;;;1199   
;;;1200   	if(spc_phase==0)
000ed0  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1201   		{
;;;1202   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1203   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1204   
;;;1205   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1206   	    	
;;;1207   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1208   			{
;;;1209   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1210   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000ed4  4f39              LDR      r7,|L1.4028|
;;;1211   			}
;;;1212   
;;;1213   		bat[0]._time_min_cnt_ke++;
;;;1214   		if(bat[0]._time_min_cnt_ke>=60)
;;;1215   			{
;;;1216   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
000ed6  f44f78e3          MOV      r8,#0x1c6
000eda  bbe8              CBNZ     r0,|L1.3928|
000edc  2314              MOVS     r3,#0x14              ;1203
000ede  f04f32ff          MOV      r2,#0xffffffff        ;1203
000ee2  21ce              MOVS     r1,#0xce              ;1203
000ee4  20cd              MOVS     r0,#0xcd              ;1203
000ee6  f7fffffe          BL       mess_send
000eea  f8961024          LDRB     r1,[r6,#0x24]         ;1205  ; spc_bat
000eee  f8df90c8          LDR      r9,|L1.4024|
000ef2  eb010041          ADD      r0,r1,r1,LSL #1       ;1205
000ef6  eb001001          ADD      r0,r0,r1,LSL #4       ;1205
000efa  eb090080          ADD      r0,r9,r0,LSL #2       ;1205
000efe  f9b00008          LDRSH    r0,[r0,#8]            ;1205
000f02  f7fffffe          BL       abs
000f06  f8d91018          LDR      r1,[r9,#0x18]         ;1205  ; bat
000f0a  4401              ADD      r1,r1,r0              ;1205
000f0c  f8c91018          STR      r1,[r9,#0x18]         ;1205  ; bat
000f10  f64840a0          MOV      r0,#0x8ca0            ;1207
000f14  4281              CMP      r1,r0                 ;1207
000f16  db0c              BLT      |L1.3890|
000f18  eba10100          SUB      r1,r1,r0              ;1209
000f1c  f8c91018          STR      r1,[r9,#0x18]         ;1209  ; bat
000f20  8838              LDRH     r0,[r7,#0]            ;1210  ; ADR_EE_BAT_ZAR_CNT_KE
000f22  f7fffffe          BL       lc640_read_int
000f26  1c40              ADDS     r0,r0,#1              ;1210
000f28  b201              SXTH     r1,r0                 ;1210
000f2a  f9b70000          LDRSH    r0,[r7,#0]            ;1210  ; ADR_EE_BAT_ZAR_CNT_KE
000f2e  f7fffffe          BL       lc640_write_int
                  |L1.3890|
000f32  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1213  ; bat
000f36  f1000001          ADD      r0,r0,#1              ;1213
000f3a  b281              UXTH     r1,r0                 ;1213
000f3c  f8a9104a          STRH     r1,[r9,#0x4a]         ;1213
000f40  293c              CMP      r1,#0x3c              ;1214
000f42  d309              BCC      |L1.3928|
000f44  4640              MOV      r0,r8
000f46  f7fffffe          BL       lc640_read_int
000f4a  1c40              ADDS     r0,r0,#1
000f4c  b201              SXTH     r1,r0
000f4e  4640              MOV      r0,r8
000f50  f7fffffe          BL       lc640_write_int
;;;1217   			bat[0]._time_min_cnt_ke=0;
000f54  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.3928|
;;;1218   			}
;;;1219   		}
;;;1220   
;;;1221   	else if(spc_phase==1)
;;;1222   		{
;;;1223   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1224   		}
;;;1225   
;;;1226   	if(out_U<bat_hndl_u_end)
000f58  482d              LDR      r0,|L1.4112|
000f5a  f9b4100e          LDRSH    r1,[r4,#0xe]  ; bat_hndl_u_end
000f5e  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
000f62  4288              CMP      r0,r1
000f64  da6e              BGE      |L1.4164|
;;;1227   		{
;;;1228   		cnt_end_ke++;
000f66  f8b6006a          LDRH     r0,[r6,#0x6a]  ; cnt_end_ke
000f6a  f1000001          ADD      r0,r0,#1
000f6e  b200              SXTH     r0,r0
000f70  f8a6006a          STRH     r0,[r6,#0x6a]
;;;1229   		if(cnt_end_ke>=30)
000f74  281e              CMP      r0,#0x1e
000f76  db67              BLT      |L1.4168|
;;;1230   			{
;;;1231   			
;;;1232   			if((spc_stat==spcKE)&&(spc_phase==0))
000f78  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000f7c  2801              CMP      r0,#1
000f7e  d155              BNE      |L1.4140|
000f80  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
000f84  b9a8              CBNZ     r0,|L1.4018|
;;;1233   				{
;;;1234   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
000f86  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000f88  f7fffffe          BL       lc640_read_int
000f8c  b201              SXTH     r1,r0
000f8e  4821              LDR      r0,|L1.4116|
000f90  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
000f94  f7fffffe          BL       lc640_write_int
;;;1235   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
000f98  4640              MOV      r0,r8
000f9a  f7fffffe          BL       lc640_read_int
000f9e  b284              UXTH     r4,r0
000fa0  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000fa2  f7fffffe          BL       lc640_read_int
000fa6  b281              UXTH     r1,r0
000fa8  4622              MOV      r2,r4
000faa  2000              MOVS     r0,#0
000fac  f7fffffe          BL       ke_zvu_mem_hndl
;;;1236   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
000fb0  e032              B        |L1.4120|
                  |L1.4018|
000fb2  e03b              B        |L1.4140|
                  |L1.4020|
                          DCD      ||area_number.25||
                  |L1.4024|
                          DCD      bat
                  |L1.4028|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4032|
                          DCD      bat_u_old_cnt
                  |L1.4036|
                          DCD      0x40024020
                  |L1.4040|
                          DCD      ||area_number.19||+0x4
                  |L1.4044|
                          DCD      ||.bss||
                  |L1.4048|
                          DCD      Ib_ips_termokompensat
                  |L1.4052|
                          DCD      ||.bss||+0x468
                  |L1.4056|
                          DCD      BAT_C_POINT_1_6
                  |L1.4060|
                          DCD      BAT_C_POINT_1_2
                  |L1.4064|
                          DCD      BAT_C_POINT_1
                  |L1.4068|
                          DCD      BAT_C_POINT_3
                  |L1.4072|
                          DCD      BAT_C_POINT_5
                  |L1.4076|
                          DCD      BAT_C_POINT_10
                  |L1.4080|
                          DCD      BAT_C_POINT_20
                  |L1.4084|
                          DCD      BAT_U_END_1_6
                  |L1.4088|
                          DCD      BAT_U_END_1_2
                  |L1.4092|
                          DCD      BAT_U_END_1
                  |L1.4096|
                          DCD      BAT_U_END_3
                  |L1.4100|
                          DCD      BAT_U_END_5
                  |L1.4104|
                          DCD      BAT_U_END_10
                  |L1.4108|
                          DCD      BAT_U_END_20
                  |L1.4112|
                          DCD      out_U
                  |L1.4116|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4120|
001018  48ff              LDR      r0,|L1.5144|
00101a  2100              MOVS     r1,#0
00101c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001020  f7fffffe          BL       lc640_write_int
;;;1237   				cntrl_stat=50;
001024  f04f0032          MOV      r0,#0x32
001028  8670              STRH     r0,[r6,#0x32]
;;;1238   				cntrl_stat_old=50;
00102a  86b0              STRH     r0,[r6,#0x34]
                  |L1.4140|
;;;1239   				}
;;;1240   
;;;1241   			spc_stat=spcOFF;
00102c  f8865023          STRB     r5,[r6,#0x23]
;;;1242   			__ee_spc_stat=spcOFF;
001030  f8a6506e          STRH     r5,[r6,#0x6e]
;;;1243   			lc640_write_int(EE_SPC_STAT,spcOFF);
001034  b008              ADD      sp,sp,#0x20
001036  2100              MOVS     r1,#0
001038  e8bd47f0          POP      {r4-r10,lr}
00103c  f240209a          MOV      r0,#0x29a
001040  f7ffbffe          B.W      lc640_write_int
                  |L1.4164|
;;;1244   
;;;1245   			}
;;;1246   		}
;;;1247   	else cnt_end_ke=0;
001044  f8a6506a          STRH     r5,[r6,#0x6a]
                  |L1.4168|
;;;1248   
;;;1249   	}
;;;1250   			
;;;1251   }
001048  b008              ADD      sp,sp,#0x20
00104a  e8bd87f0          POP      {r4-r10,pc}
;;;1252   #endif
                          ENDP

                  vz_start PROC
;;;1322   //-----------------------------------------------
;;;1323   char vz_start(char hour)
00104e  b570              PUSH     {r4-r6,lr}
;;;1324   {          
001050  4605              MOV      r5,r0
;;;1325   char out;
;;;1326   out=0;
001052  f04f0600          MOV      r6,#0
;;;1327   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
001056  4cf1              LDR      r4,|L1.5148|
001058  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00105c  bba0              CBNZ     r0,|L1.4296|
00105e  48f0              LDR      r0,|L1.5152|
001060  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001062  2801              CMP      r0,#1
001064  d030              BEQ      |L1.4296|
;;;1328   	{
;;;1329   	spc_stat=spcVZ;
001066  f1040430          ADD      r4,r4,#0x30
00106a  f04f0102          MOV      r1,#2
00106e  f8041c0d          STRB     r1,[r4,#-0xd]
;;;1330   	__ee_spc_stat=spcVZ; 
001072  87e1              STRH     r1,[r4,#0x3e]
;;;1331   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001074  f240209a          MOV      r0,#0x29a
001078  f7fffffe          BL       lc640_write_int
;;;1332   	vz_cnt_h=hour;
00107c  86e5              STRH     r5,[r4,#0x36]
;;;1333   	__ee_vz_cnt=hour*60;
00107e  ebc51005          RSB      r0,r5,r5,LSL #4
001082  ea4f0080          LSL      r0,r0,#2
001086  87a0              STRH     r0,[r4,#0x3c]
001088  f1a40430          SUB      r4,r4,#0x30
;;;1334   	if(hour==0)__ee_vz_cnt=30;
00108c  b91d              CBNZ     r5,|L1.4246|
00108e  f04f001e          MOV      r0,#0x1e
001092  f8a4006c          STRH     r0,[r4,#0x6c]
                  |L1.4246|
;;;1335   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001096  f1040462          ADD      r4,r4,#0x62
00109a  f44f7027          MOV      r0,#0x29c
00109e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010a2  f7fffffe          BL       lc640_write_int
;;;1336   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0010a6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010aa  f44f702a          MOV      r0,#0x2a8
0010ae  f7fffffe          BL       lc640_write_int
;;;1337   	vz_cnt_h_=0;
0010b2  f04f0000          MOV      r0,#0
0010b6  80e0              STRH     r0,[r4,#6]
;;;1338   	vz_cnt_s=0;
0010b8  8020              STRH     r0,[r4,#0]
;;;1339   	vz_cnt_s_=0;
0010ba  8060              STRH     r0,[r4,#2]
;;;1340   	out=1;
0010bc  f04f0601          MOV      r6,#1
;;;1341   	vz_mem_hndl(1);
0010c0  f04f0001          MOV      r0,#1
0010c4  f7fffffe          BL       vz_mem_hndl
                  |L1.4296|
;;;1342   	}
;;;1343   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1344   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1345   //plazma=out;	
;;;1346   return out;
0010c8  4630              MOV      r0,r6
;;;1347   }
0010ca  bd70              POP      {r4-r6,pc}
;;;1348   
                          ENDP

                  vz_stop PROC
;;;1349   //-----------------------------------------------
;;;1350   void vz_stop(void)
0010cc  b510              PUSH     {r4,lr}
;;;1351   {
;;;1352   if(spc_stat==spcVZ)
0010ce  4cd3              LDR      r4,|L1.5148|
0010d0  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0010d4  2802              CMP      r0,#2
0010d6  d113              BNE      |L1.4352|
;;;1353        {
;;;1354   vz_mem_hndl(vz_cnt_h);          
0010d8  f1040430          ADD      r4,r4,#0x30
0010dc  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
0010de  f7fffffe          BL       vz_mem_hndl
;;;1355   vz_cnt_s=0;
0010e2  f04f0000          MOV      r0,#0
0010e6  8660              STRH     r0,[r4,#0x32]
;;;1356   vz_cnt_h=0;
0010e8  86e0              STRH     r0,[r4,#0x36]
;;;1357   vz_cnt_h_=0;
0010ea  8720              STRH     r0,[r4,#0x38]
;;;1358   spc_stat=spcOFF;
0010ec  f8040c0d          STRB     r0,[r4,#-0xd]
;;;1359   
;;;1360   		__ee_spc_stat=spcOFF;
0010f0  87e0              STRH     r0,[r4,#0x3e]
;;;1361   		lc640_write_int(EE_SPC_STAT,spcOFF);
0010f2  4601              MOV      r1,r0
0010f4  e8bd4010          POP      {r4,lr}
0010f8  f240209a          MOV      r0,#0x29a
0010fc  f7ffbffe          B.W      lc640_write_int
                  |L1.4352|
;;;1362        }
;;;1363   
;;;1364   }
001100  bd10              POP      {r4,pc}
;;;1365   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1367   //-----------------------------------------------
;;;1368   void amper_chas_cnt_drv(void)
001102  b510              PUSH     {r4,lr}
;;;1369   {
;;;1370   
;;;1371   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
001104  4ac5              LDR      r2,|L1.5148|
001106  49c7              LDR      r1,|L1.5156|
001108  3280              ADDS     r2,r2,#0x80
00110a  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00110e  6e10              LDR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
001110  4401              ADD      r1,r1,r0
001112  6611              STR      r1,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1372   
;;;1373   if(amper_chas_cnt_drv_summ>=36000L)
001114  f64843a0          MOV      r3,#0x8ca0
;;;1374   	{
;;;1375   	amper_chas_cnt_drv_summ-=36000L;
;;;1376   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001118  f44f74e4          MOV      r4,#0x1c8
00111c  4299              CMP      r1,r3                 ;1373
00111e  db0c              BLT      |L1.4410|
001120  eba10103          SUB      r1,r1,r3              ;1375
001124  6611              STR      r1,[r2,#0x60]         ;1375  ; amper_chas_cnt_drv_summ
001126  4620              MOV      r0,r4
001128  f7fffffe          BL       lc640_read_int
00112c  1c40              ADDS     r0,r0,#1
00112e  b201              SXTH     r1,r0
001130  4620              MOV      r0,r4
001132  e8bd4010          POP      {r4,lr}
001136  f7ffbffe          B.W      lc640_write_int
                  |L1.4410|
;;;1377   	}
;;;1378   else if(amper_chas_cnt_drv_summ<=-36000L)
00113a  48bb              LDR      r0,|L1.5160|
00113c  4281              CMP      r1,r0
00113e  dc0c              BGT      |L1.4442|
;;;1379   	{
;;;1380   	amper_chas_cnt_drv_summ+=36000L;
001140  eb010003          ADD      r0,r1,r3
001144  6610              STR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1381   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
001146  4620              MOV      r0,r4
001148  f7fffffe          BL       lc640_read_int
00114c  1e40              SUBS     r0,r0,#1
00114e  b201              SXTH     r1,r0
001150  4620              MOV      r0,r4
001152  e8bd4010          POP      {r4,lr}
001156  f7ffbffe          B.W      lc640_write_int
                  |L1.4442|
;;;1382   	}
;;;1383   }
00115a  bd10              POP      {r4,pc}
;;;1384   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1386   //-----------------------------------------------
;;;1387   void avz_next_date_hndl(void)
00115c  b570              PUSH     {r4-r6,lr}
;;;1388   {
;;;1389   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
00115e  4cb3              LDR      r4,|L1.5164|
001160  f8940038          LDRB     r0,[r4,#0x38]
001164  4db2              LDR      r5,|L1.5168|
001166  7829              LDRB     r1,[r5,#0]  ; AVZ
001168  4408              ADD      r0,r0,r1
00116a  280c              CMP      r0,#0xc
00116c  d906              BLS      |L1.4476|
00116e  8fa0              LDRH     r0,[r4,#0x3c]
001170  1c40              ADDS     r0,r0,#1
001172  b201              SXTH     r1,r0
001174  20b8              MOVS     r0,#0xb8
001176  f7fffffe          BL       lc640_write_int
00117a  e004              B        |L1.4486|
                  |L1.4476|
;;;1390   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
00117c  f9b4103c          LDRSH    r1,[r4,#0x3c]
001180  20b8              MOVS     r0,#0xb8
001182  f7fffffe          BL       lc640_write_int
                  |L1.4486|
;;;1391   
;;;1392   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1393   
;;;1394   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
001186  f8941038          LDRB     r1,[r4,#0x38]
00118a  7828              LDRB     r0,[r5,#0]  ; AVZ
00118c  4401              ADD      r1,r1,r0
00118e  290c              CMP      r1,#0xc
001190  d907              BLS      |L1.4514|
001192  f8941038          LDRB     r1,[r4,#0x38]
001196  380c              SUBS     r0,r0,#0xc
001198  4401              ADD      r1,r1,r0
00119a  20b6              MOVS     r0,#0xb6
00119c  f7fffffe          BL       lc640_write_int
0011a0  e005              B        |L1.4526|
                  |L1.4514|
;;;1395   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0011a2  f8941038          LDRB     r1,[r4,#0x38]
0011a6  4401              ADD      r1,r1,r0
0011a8  20b6              MOVS     r0,#0xb6
0011aa  f7fffffe          BL       lc640_write_int
                  |L1.4526|
;;;1396   
;;;1397   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1398   
;;;1399   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0011ae  f894002c          LDRB     r0,[r4,#0x2c]
0011b2  281c              CMP      r0,#0x1c
0011b4  d904              BLS      |L1.4544|
0011b6  211c              MOVS     r1,#0x1c
0011b8  20b4              MOVS     r0,#0xb4
0011ba  f7fffffe          BL       lc640_write_int
0011be  e004              B        |L1.4554|
                  |L1.4544|
;;;1400   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
0011c0  f894102c          LDRB     r1,[r4,#0x2c]
0011c4  20b4              MOVS     r0,#0xb4
0011c6  f7fffffe          BL       lc640_write_int
                  |L1.4554|
;;;1401   
;;;1402   //lc640_write_int(EE_DATE_AVZ,4);
;;;1403   
;;;1404   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
0011ca  f1040420          ADD      r4,r4,#0x20
0011ce  7a21              LDRB     r1,[r4,#8]
0011d0  f04f00ae          MOV      r0,#0xae
0011d4  f7fffffe          BL       lc640_write_int
;;;1405   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
0011d8  7921              LDRB     r1,[r4,#4]
0011da  20b0              MOVS     r0,#0xb0
0011dc  f7fffffe          BL       lc640_write_int
;;;1406   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
0011e0  7821              LDRB     r1,[r4,#0]
0011e2  e8bd4070          POP      {r4-r6,lr}
0011e6  20b2              MOVS     r0,#0xb2
0011e8  f7ffbffe          B.W      lc640_write_int
;;;1407   
;;;1408   }
;;;1409   
                          ENDP

                  avz_drv PROC
;;;1410   //-----------------------------------------------
;;;1411   void avz_drv(void)                               
0011ec  b510              PUSH     {r4,lr}
;;;1412   {                
;;;1413   if(AVZ!=AVZ_OFF)
0011ee  4890              LDR      r0,|L1.5168|
;;;1414   	{
;;;1415   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1416   		{
;;;1417   		bAVZ=1;
0011f0  4c8a              LDR      r4,|L1.5148|
0011f2  7800              LDRB     r0,[r0,#0]            ;1413  ; AVZ
0011f4  b338              CBZ      r0,|L1.4678|
0011f6  488d              LDR      r0,|L1.5164|
0011f8  8f82              LDRH     r2,[r0,#0x3c]         ;1415
0011fa  498e              LDR      r1,|L1.5172|
0011fc  8809              LDRH     r1,[r1,#0]            ;1415  ; YEAR_AVZ
0011fe  428a              CMP      r2,r1                 ;1415
001200  d121              BNE      |L1.4678|
001202  f8902038          LDRB     r2,[r0,#0x38]         ;1415
001206  498c              LDR      r1,|L1.5176|
001208  8809              LDRH     r1,[r1,#0]            ;1415  ; MONTH_AVZ
00120a  428a              CMP      r2,r1                 ;1415
00120c  d11b              BNE      |L1.4678|
00120e  f890102c          LDRB     r1,[r0,#0x2c]         ;1415
001212  4a8a              LDR      r2,|L1.5180|
001214  8812              LDRH     r2,[r2,#0]            ;1415  ; DATE_AVZ
001216  4291              CMP      r1,r2                 ;1415
001218  d115              BNE      |L1.4678|
00121a  f8901028          LDRB     r1,[r0,#0x28]         ;1415
00121e  4a88              LDR      r2,|L1.5184|
001220  8812              LDRH     r2,[r2,#0]            ;1415  ; HOUR_AVZ
001222  4291              CMP      r1,r2                 ;1415
001224  d10f              BNE      |L1.4678|
001226  f8901024          LDRB     r1,[r0,#0x24]         ;1415
00122a  4a86              LDR      r2,|L1.5188|
00122c  8812              LDRH     r2,[r2,#0]            ;1415  ; MIN_AVZ
00122e  4291              CMP      r1,r2                 ;1415
001230  d109              BNE      |L1.4678|
001232  f8900020          LDRB     r0,[r0,#0x20]         ;1415
001236  4984              LDR      r1,|L1.5192|
001238  8809              LDRH     r1,[r1,#0]            ;1415  ; SEC_AVZ
00123a  4288              CMP      r0,r1                 ;1415
00123c  d103              BNE      |L1.4678|
00123e  f04f0001          MOV      r0,#1
001242  f8840026          STRB     r0,[r4,#0x26]
                  |L1.4678|
;;;1418   		}
;;;1419   	}
;;;1420   if(bAVZ)
001246  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
00124a  2800              CMP      r0,#0
00124c  d00d              BEQ      |L1.4714|
;;;1421   	{
;;;1422   	if(vz_start(AVZ_TIME))
00124e  487f              LDR      r0,|L1.5196|
001250  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
001252  b2c0              UXTB     r0,r0
001254  f7fffffe          BL       vz_start
001258  2800              CMP      r0,#0
00125a  d006              BEQ      |L1.4714|
;;;1423   		{
;;;1424   		bAVZ=0;
00125c  f04f0000          MOV      r0,#0
001260  f8840026          STRB     r0,[r4,#0x26]
;;;1425   		avz_next_date_hndl();
001264  e8bd4010          POP      {r4,lr}
001268  e7fe              B        avz_next_date_hndl
                  |L1.4714|
;;;1426   		}
;;;1427   	}	
;;;1428   
;;;1429   }
00126a  bd10              POP      {r4,pc}
;;;1430   
                          ENDP

                  vz_drv PROC
;;;1431   //-----------------------------------------------
;;;1432   void vz_drv(void)
00126c  b538              PUSH     {r3-r5,lr}
;;;1433   { 
;;;1434   if(spc_stat==spcVZ)
00126e  4c6b              LDR      r4,|L1.5148|
001270  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001274  2802              CMP      r0,#2
001276  d11d              BNE      |L1.4788|
;;;1435   	{
;;;1436   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001278  4875              LDR      r0,|L1.5200|
00127a  7800              LDRB     r0,[r0,#0]  ; sk_stat
00127c  2801              CMP      r0,#1
00127e  d01a              BEQ      |L1.4790|
001280  4874              LDR      r0,|L1.5204|
001282  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
001284  2800              CMP      r0,#0
001286  d016              BEQ      |L1.4790|
;;;1437   		{
;;;1438   
;;;1439   	if(vz_cnt_s_<3600)
;;;1440   		{
;;;1441   		vz_cnt_s_++;
;;;1442   		if(vz_cnt_s_>=3600)
;;;1443   			{
;;;1444   			vz_cnt_s_=0;
;;;1445   			if(vz_cnt_h)
;;;1446   				{
;;;1447   				vz_cnt_h--;
;;;1448   				vz_cnt_h_++;
;;;1449   				}
;;;1450   			}
;;;1451   		}
;;;1452   
;;;1453   
;;;1454   	if(vz_cnt_s<60)
;;;1455   		{
;;;1456   		vz_cnt_s++;
;;;1457   		if(vz_cnt_s>=60)
;;;1458   			{
;;;1459   			vz_cnt_s=0;
;;;1460   			
;;;1461   			__ee_vz_cnt--;
;;;1462   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1463   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1464   				{
;;;1465   				spc_stat=spcOFF;
;;;1466   						__ee_spc_stat=spcOFF;
;;;1467   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1468   
;;;1469   //				hv_vz_stat=hvsOFF;
;;;1470   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1471   				vz_mem_hndl(0);
;;;1472   				}
;;;1473   			}
;;;1474   		}
;;;1475   		vz_error=0; 
;;;1476   		}
;;;1477   	else 
;;;1478   		{
;;;1479   		vz_error=1; 
001288  f04f0001          MOV      r0,#1
00128c  7060              STRB     r0,[r4,#1]
;;;1480   		if(((LPC_RTC->SEC)%10)==0)
00128e  4872              LDR      r0,|L1.5208|
001290  7800              LDRB     r0,[r0,#0]
001292  f04f010a          MOV      r1,#0xa
001296  fbb0f2f1          UDIV     r2,r0,r1
00129a  fb010012          MLS      r0,r1,r2,r0
00129e  2800              CMP      r0,#0
0012a0  d108              BNE      |L1.4788|
;;;1481   			{
;;;1482   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0012a2  f2413088          MOV      r0,#0x1388
0012a6  9000              STR      r0,[sp,#0]
0012a8  a36c              ADR      r3,|L1.5212|
0012aa  a272              ADR      r2,|L1.5236|
0012ac  a177              ADR      r1,|L1.5260|
0012ae  a07d              ADR      r0,|L1.5284|
0012b0  f7fffffe          BL       show_mess
                  |L1.4788|
;;;1483   						"    ЗАБЛОКИРОВАН    ",
;;;1484   						"     НЕИСПРАВНА     ",
;;;1485   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1486   						5000);			
;;;1487   			}
;;;1488   		}
;;;1489   /*	if(vz_cnt_s_>=3)
;;;1490   		{
;;;1491   		if(sk_stat[0]==0)
;;;1492   		} */
;;;1493   
;;;1494   	}
;;;1495   
;;;1496   
;;;1497   } 
0012b4  bd38              POP      {r3-r5,pc}
                  |L1.4790|
0012b6  f8b40064          LDRH     r0,[r4,#0x64]         ;1439  ; vz_cnt_s_
0012ba  f44f6161          MOV      r1,#0xe10             ;1439
0012be  2500              MOVS     r5,#0                 ;1436
0012c0  4288              CMP      r0,r1                 ;1439
0012c2  d215              BCS      |L1.4848|
0012c4  f1000001          ADD      r0,r0,#1              ;1441
0012c8  b280              UXTH     r0,r0                 ;1441
0012ca  f8a40064          STRH     r0,[r4,#0x64]         ;1441
0012ce  4288              CMP      r0,r1                 ;1442
0012d0  d30e              BCC      |L1.4848|
0012d2  f8a45064          STRH     r5,[r4,#0x64]         ;1444
0012d6  f8b40066          LDRH     r0,[r4,#0x66]         ;1445  ; vz_cnt_h
0012da  b148              CBZ      r0,|L1.4848|
0012dc  f1a00001          SUB      r0,r0,#1              ;1447
0012e0  f8240f66          STRH     r0,[r4,#0x66]!        ;1447
0012e4  8860              LDRH     r0,[r4,#2]            ;1448  ; vz_cnt_h_
0012e6  f1000001          ADD      r0,r0,#1              ;1448
0012ea  8060              STRH     r0,[r4,#2]            ;1448
0012ec  f1a40466          SUB      r4,r4,#0x66           ;1448
                  |L1.4848|
0012f0  f8b40062          LDRH     r0,[r4,#0x62]         ;1454  ; vz_cnt_s
0012f4  283c              CMP      r0,#0x3c              ;1454
0012f6  d225              BCS      |L1.4932|
0012f8  f1000001          ADD      r0,r0,#1              ;1456
0012fc  b280              UXTH     r0,r0                 ;1456
0012fe  f8a40062          STRH     r0,[r4,#0x62]         ;1456
001302  283c              CMP      r0,#0x3c              ;1457
001304  d31e              BCC      |L1.4932|
001306  f8245f62          STRH     r5,[r4,#0x62]!        ;1459
00130a  8960              LDRH     r0,[r4,#0xa]          ;1461  ; __ee_vz_cnt
00130c  f1a00001          SUB      r0,r0,#1              ;1461
001310  b201              SXTH     r1,r0                 ;1461
001312  8161              STRH     r1,[r4,#0xa]          ;1461
001314  f44f7027          MOV      r0,#0x29c             ;1462
001318  f7fffffe          BL       lc640_write_int
00131c  8960              LDRH     r0,[r4,#0xa]          ;1463  ; __ee_vz_cnt
00131e  f1a40462          SUB      r4,r4,#0x62           ;1463
001322  b118              CBZ      r0,|L1.4908|
001324  483e              LDR      r0,|L1.5152|
001326  8800              LDRH     r0,[r0,#0]            ;1463  ; speedChrgBlckStat
001328  2801              CMP      r0,#1                 ;1463
00132a  d10b              BNE      |L1.4932|
                  |L1.4908|
00132c  f8845023          STRB     r5,[r4,#0x23]         ;1465
001330  f8a4506e          STRH     r5,[r4,#0x6e]         ;1466
001334  2100              MOVS     r1,#0                 ;1467
001336  f240209a          MOV      r0,#0x29a             ;1467
00133a  f7fffffe          BL       lc640_write_int
00133e  2000              MOVS     r0,#0                 ;1471
001340  f7fffffe          BL       vz_mem_hndl
                  |L1.4932|
001344  7065              STRB     r5,[r4,#1]            ;1475
001346  bd38              POP      {r3-r5,pc}
;;;1498   
                          ENDP

                  vz1_drv PROC
;;;1500   //драйвер уравнительного заряда
;;;1501   void vz1_drv(void)
001348  e92d4ff8          PUSH     {r3-r11,lr}
;;;1502   {
;;;1503   if(volt_region_cnt)volt_region_cnt--;
00134c  f8df80cc          LDR      r8,|L1.5148|
001350  f9b8007c          LDRSH    r0,[r8,#0x7c]  ; volt_region_cnt
001354  b118              CBZ      r0,|L1.4958|
001356  f1a00001          SUB      r0,r0,#1
00135a  f8a8007c          STRH     r0,[r8,#0x7c]
                  |L1.4958|
;;;1504   if(vz1_stat==vz1sOFF)
00135e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001362  b928              CBNZ     r0,|L1.4976|
;;;1505   	{
;;;1506   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001364  2314              MOVS     r3,#0x14
001366  2200              MOVS     r2,#0
001368  2164              MOVS     r1,#0x64
00136a  20d2              MOVS     r0,#0xd2
00136c  f7fffffe          BL       mess_send
                  |L1.4976|
;;;1507   	}
;;;1508   if(vz1_stat==vz1sSTEP1)
001370  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1509   	{
;;;1510   	if(vz1_stat_old!=vz1_stat)
;;;1511   		{
;;;1512   		vz1_stat_cnt=5;
;;;1513   		}
;;;1514   	if(vz1_stat_cnt)
;;;1515   		{
;;;1516   		vz1_stat_cnt--;
;;;1517   		if(vz1_stat_cnt==0)
;;;1518   			{
;;;1519   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1520   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1521   			}
;;;1522   		}
;;;1523   	if(sk_stat[0]==1)
001374  4d36              LDR      r5,|L1.5200|
001376  f44f7bc9          MOV      r11,#0x192            ;1520
00137a  2801              CMP      r0,#1                 ;1508
00137c  d139              BNE      |L1.5106|
00137e  f8980006          LDRB     r0,[r8,#6]            ;1510  ; vz1_stat_old
001382  2801              CMP      r0,#1                 ;1510
001384  d003              BEQ      |L1.5006|
001386  f04f0005          MOV      r0,#5                 ;1512
00138a  f8a8007a          STRH     r0,[r8,#0x7a]         ;1512
                  |L1.5006|
00138e  f9b8007a          LDRSH    r0,[r8,#0x7a]         ;1514  ; vz1_stat_cnt
001392  b168              CBZ      r0,|L1.5040|
001394  f1a00001          SUB      r0,r0,#1              ;1516
001398  b200              SXTH     r0,r0                 ;1516
00139a  f8a8007a          STRH     r0,[r8,#0x7a]         ;1516
00139e  b938              CBNZ     r0,|L1.5040|
0013a0  f04f000b          MOV      r0,#0xb               ;1519
0013a4  f8880005          STRB     r0,[r8,#5]            ;1519
0013a8  4601              MOV      r1,r0                 ;1520
0013aa  4658              MOV      r0,r11                ;1520
0013ac  f7fffffe          BL       lc640_write
                  |L1.5040|
0013b0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0013b2  2801              CMP      r0,#1
0013b4  d117              BNE      |L1.5094|
;;;1524   		{
;;;1525   		vz1_stat=vz1sSTEP2;
0013b6  f04f0002          MOV      r0,#2
0013ba  f8880005          STRB     r0,[r8,#5]
;;;1526   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0013be  4601              MOV      r1,r0
0013c0  4658              MOV      r0,r11
0013c2  f7fffffe          BL       lc640_write
;;;1527   		tree_up(iVZ1_STEP2_2,1,0,0);
0013c6  2300              MOVS     r3,#0
0013c8  461a              MOV      r2,r3
0013ca  2101              MOVS     r1,#1
0013cc  20df              MOVS     r0,#0xdf
0013ce  f7fffffe          BL       tree_up
;;;1528   		tree_up(iVZ1_STEP2_1,0,0,0);
0013d2  2300              MOVS     r3,#0
0013d4  461a              MOV      r2,r3
0013d6  4619              MOV      r1,r3
0013d8  20de              MOVS     r0,#0xde
0013da  f7fffffe          BL       tree_up
;;;1529   		ret(1200);
0013de  f44f6096          MOV      r0,#0x4b0
0013e2  f7fffffe          BL       ||ret||
                  |L1.5094|
;;;1530   		}
;;;1531   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013e6  2314              MOVS     r3,#0x14
0013e8  2200              MOVS     r2,#0
0013ea  2164              MOVS     r1,#0x64
0013ec  20d2              MOVS     r0,#0xd2
0013ee  f7fffffe          BL       mess_send
                  |L1.5106|
;;;1532   	}
;;;1533   
;;;1534   if(vz1_stat==vz1sSTEP2)
0013f2  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1535   	{
;;;1536   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1537   		{
;;;1538   		vz1_stat_cnt=15;
0013f6  f04f090f          MOV      r9,#0xf
0013fa  2802              CMP      r0,#2                 ;1534
0013fc  d16c              BNE      |L1.5336|
0013fe  f8980006          LDRB     r0,[r8,#6]            ;1536  ; vz1_stat_old
001402  2802              CMP      r0,#2                 ;1536
001404  d102              BNE      |L1.5132|
001406  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1536  ; vz1_stat_cnt
00140a  b908              CBNZ     r0,|L1.5136|
                  |L1.5132|
00140c  f8a8907a          STRH     r9,[r8,#0x7a]
                  |L1.5136|
;;;1539   		}
;;;1540   	vz1_stat_cnt--;
001410  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001414  e052              B        |L1.5308|
001416  0000              DCW      0x0000
                  |L1.5144|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.5148|
                          DCD      ||area_number.25||
                  |L1.5152|
                          DCD      speedChrgBlckStat
                  |L1.5156|
                          DCD      Ib_ips_termokompensat
                  |L1.5160|
                          DCD      0xffff7360
                  |L1.5164|
                          DCD      0x40024000
                  |L1.5168|
                          DCD      AVZ
                  |L1.5172|
                          DCD      YEAR_AVZ
                  |L1.5176|
                          DCD      MONTH_AVZ
                  |L1.5180|
                          DCD      DATE_AVZ
                  |L1.5184|
                          DCD      HOUR_AVZ
                  |L1.5188|
                          DCD      MIN_AVZ
                  |L1.5192|
                          DCD      SEC_AVZ
                  |L1.5196|
                          DCD      AVZ_TIME
                  |L1.5200|
                          DCD      sk_stat
                  |L1.5204|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5208|
                          DCD      0x40024020
                  |L1.5212|
00145c  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001460  c2c5cdd2
001464  c8cbdfd6
001468  c8df2121
00146c  21202020
001470  00      
001471  00                DCB      0
001472  00                DCB      0
001473  00                DCB      0
                  |L1.5236|
001474  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
001478  20cdc5c8
00147c  d1cfd0c0
001480  c2cdc020
001484  20202020
001488  00      
001489  00                DCB      0
00148a  00                DCB      0
00148b  00                DCB      0
                  |L1.5260|
00148c  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
001490  c7c0c1cb
001494  cecac8d0
001498  cec2c0cd
00149c  20      
00149d  20202000          DCB      "   ",0
0014a1  00                DCB      0
0014a2  00                DCB      0
0014a3  00                DCB      0
                  |L1.5284|
0014a4  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0014a8  c2cdc8c2
0014ac  c0ded9c8
0014b0  c920c7  
0014b3  c0d0dfc4          DCB      192,208,223,196," ",0
0014b7  2000    
0014b9  00                DCB      0
0014ba  00                DCB      0
0014bb  00                DCB      0
                  |L1.5308|
0014bc  f1a00001          SUB      r0,r0,#1
0014c0  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1541   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014c4  f04f0314          MOV      r3,#0x14
0014c8  f04f0200          MOV      r2,#0
0014cc  f04f0164          MOV      r1,#0x64
0014d0  f04f00d2          MOV      r0,#0xd2
0014d4  f7fffffe          BL       mess_send
                  |L1.5336|
;;;1542   	}
;;;1543   
;;;1544   if(vz1_stat==vz1sSTEP3)
0014d8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1545   	{
;;;1546   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1547   		{
;;;1548   		vz1_stat_cnt=10;
0014dc  240a              MOVS     r4,#0xa
0014de  2600              MOVS     r6,#0                 ;1503
0014e0  f04f0a01          MOV      r10,#1                ;1504
;;;1549   
;;;1550   		}
;;;1551   	vz1_stat_cnt--;
;;;1552   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1553   		{
;;;1554   		show_mess(	"     ВКЛЮЧИТЕ       ",
0014e4  f2413788          MOV      r7,#0x1388
0014e8  2803              CMP      r0,#3                 ;1544
0014ea  d131              BNE      |L1.5456|
0014ec  f8980006          LDRB     r0,[r8,#6]            ;1546  ; vz1_stat_old
0014f0  2803              CMP      r0,#3                 ;1546
0014f2  d102              BNE      |L1.5370|
0014f4  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1546  ; vz1_stat_cnt
0014f8  b908              CBNZ     r0,|L1.5374|
                  |L1.5370|
0014fa  f8a8407a          STRH     r4,[r8,#0x7a]         ;1548
                  |L1.5374|
0014fe  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1551  ; vz1_stat_cnt
001502  f1a00001          SUB      r0,r0,#1              ;1551
001506  b200              SXTH     r0,r0                 ;1551
001508  f8a8007a          STRH     r0,[r8,#0x7a]         ;1551
00150c  280a              CMP      r0,#0xa               ;1552
00150e  d001              BEQ      |L1.5396|
001510  2809              CMP      r0,#9                 ;1552
001512  d106              BNE      |L1.5410|
                  |L1.5396|
001514  a3e7              ADR      r3,|L1.6324|
001516  a2ed              ADR      r2,|L1.6348|
001518  a1f2              ADR      r1,|L1.6372|
00151a  a0f8              ADR      r0,|L1.6396|
00151c  9700              STR      r7,[sp,#0]
00151e  f7fffffe          BL       show_mess
                  |L1.5410|
;;;1555   					"      ТУМБЛЕР       ",
;;;1556   					"     ВЫСОКОГО       ",
;;;1557   					"    НАПРЯЖЕНИЯ      ",
;;;1558   					5000);
;;;1559   		}
;;;1560   	if(sk_stat[1]==1)
001522  7868              LDRB     r0,[r5,#1]  ; sk_stat
001524  2801              CMP      r0,#1
001526  d10d              BNE      |L1.5444|
;;;1561   		{
;;;1562   		vz1_stat=vz1sWRK;
001528  f8884005          STRB     r4,[r8,#5]
;;;1563   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00152c  210a              MOVS     r1,#0xa
00152e  4658              MOV      r0,r11
001530  f7fffffe          BL       lc640_write
;;;1564   		volt_region=1;
001534  f888a02f          STRB     r10,[r8,#0x2f]
;;;1565   		cntrl_stat=0;
001538  f8a86032          STRH     r6,[r8,#0x32]
;;;1566   		cntrl_stat_new=0;
00153c  f8a86048          STRH     r6,[r8,#0x48]
;;;1567   		cntrl_stat_old=0;
001540  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5444|
;;;1568   		}
;;;1569   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001544  2314              MOVS     r3,#0x14
001546  2200              MOVS     r2,#0
001548  2164              MOVS     r1,#0x64
00154a  20d2              MOVS     r0,#0xd2
00154c  f7fffffe          BL       mess_send
                  |L1.5456|
;;;1570   	}
;;;1571   
;;;1572   if(vz1_stat==vz1sWRK)
001550  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001554  280a              CMP      r0,#0xa
001556  d17d              BNE      |L1.5716|
;;;1573   	{
;;;1574   	if(vz1_stat_old!=vz1_stat)
001558  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
;;;1575   		{
;;;1576   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00155c  49ed              LDR      r1,|L1.6420|
00155e  280a              CMP      r0,#0xa               ;1574
001560  d008              BEQ      |L1.5492|
001562  48ed              LDR      r0,|L1.6424|
001564  f44f6261          MOV      r2,#0xe10
001568  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00156c  fb00f002          MUL      r0,r0,r2
001570  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1577   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1578   		vz1_up_cnt=0L;
001572  640e              STR      r6,[r1,#0x40]  ; vz1_up_cnt
                  |L1.5492|
;;;1579   
;;;1580   		}
;;;1581   	vz1_wrk_cnt--;
001574  6bc8              LDR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
001576  f1a00001          SUB      r0,r0,#1
00157a  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1582   	vz1_up_cnt++;
00157c  6c0a              LDR      r2,[r1,#0x40]  ; vz1_up_cnt
00157e  f1020201          ADD      r2,r2,#1
001582  640a              STR      r2,[r1,#0x40]  ; vz1_up_cnt
;;;1583   
;;;1584   	if(vz1_wrk_cnt==0)
001584  b940              CBNZ     r0,|L1.5528|
;;;1585   		{
;;;1586   		vz1_stat=vz1sFINE;
001586  f8889005          STRB     r9,[r8,#5]
;;;1587   		lc640_write(EE_VZ1_STAT,vz1sFINE);
00158a  210f              MOVS     r1,#0xf
00158c  4658              MOV      r0,r11
00158e  f7fffffe          BL       lc640_write
;;;1588   		uz_mem_hndl(0);
001592  2000              MOVS     r0,#0
001594  f7fffffe          BL       uz_mem_hndl
                  |L1.5528|
;;;1589   		}
;;;1590   	if(sk_stat[0]==0)
001598  7828              LDRB     r0,[r5,#0]  ; sk_stat
00159a  b938              CBNZ     r0,|L1.5548|
;;;1591   		{
;;;1592   		vz1_stat=vz1sERR2;
00159c  f04f000c          MOV      r0,#0xc
0015a0  f8880005          STRB     r0,[r8,#5]
;;;1593   		lc640_write(EE_VZ1_STAT,vz1sERR2);
0015a4  4601              MOV      r1,r0
0015a6  4658              MOV      r0,r11
0015a8  f7fffffe          BL       lc640_write
                  |L1.5548|
;;;1594   		}
;;;1595   	if(sk_stat[1]==0)
0015ac  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015ae  b938              CBNZ     r0,|L1.5568|
;;;1596   		{
;;;1597   		vz1_stat=vz1sERR3;
0015b0  f04f000d          MOV      r0,#0xd
0015b4  f8880005          STRB     r0,[r8,#5]
;;;1598   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0015b8  4601              MOV      r1,r0
0015ba  4658              MOV      r0,r11
0015bc  f7fffffe          BL       lc640_write
                  |L1.5568|
;;;1599   		}
;;;1600   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0015c0  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0015c4  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
0015c8  fb90f0f4          SDIV     r0,r0,r4
;;;1601   		{
;;;1602   		volt_region=0;
;;;1603   		cntrl_stat=1000;
0015cc  f44f727a          MOV      r2,#0x3e8
0015d0  4288              CMP      r0,r1                 ;1600
0015d2  dd16              BLE      |L1.5634|
0015d4  f9b83032          LDRSH    r3,[r8,#0x32]         ;1600  ; cntrl_stat
0015d8  2b14              CMP      r3,#0x14              ;1600
0015da  dc12              BGT      |L1.5634|
0015dc  f898302f          LDRB     r3,[r8,#0x2f]         ;1600  ; volt_region
0015e0  2b01              CMP      r3,#1                 ;1600
0015e2  d10e              BNE      |L1.5634|
0015e4  f8b8307c          LDRH     r3,[r8,#0x7c]         ;1600  ; volt_region_cnt
0015e8  b95b              CBNZ     r3,|L1.5634|
0015ea  f888602f          STRB     r6,[r8,#0x2f]         ;1602
0015ee  f8a82032          STRH     r2,[r8,#0x32]
;;;1604   		cntrl_stat_new=1000;
0015f2  f8a82048          STRH     r2,[r8,#0x48]
;;;1605   		cntrl_stat_old=1000;
0015f6  f8a82034          STRH     r2,[r8,#0x34]
;;;1606   		volt_region_cnt=110;
0015fa  f04f036e          MOV      r3,#0x6e
0015fe  f8a8307c          STRH     r3,[r8,#0x7c]
                  |L1.5634|
;;;1607   		}
;;;1608   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001602  4288              CMP      r0,r1
001604  da13              BGE      |L1.5678|
001606  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
00160a  4290              CMP      r0,r2
00160c  db0f              BLT      |L1.5678|
00160e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001612  b960              CBNZ     r0,|L1.5678|
001614  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001618  b948              CBNZ     r0,|L1.5678|
;;;1609   		{
;;;1610   		volt_region=1;
00161a  f888a02f          STRB     r10,[r8,#0x2f]
;;;1611   		cntrl_stat=10;
00161e  f8a84032          STRH     r4,[r8,#0x32]
;;;1612   		cntrl_stat_new=10;
001622  f8a84048          STRH     r4,[r8,#0x48]
;;;1613   		cntrl_stat_old=10;
001626  f8a84034          STRH     r4,[r8,#0x34]
;;;1614   		volt_region_cnt=10;
00162a  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.5678|
;;;1615   		}
;;;1616   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00162e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001632  b110              CBZ      r0,|L1.5690|
;;;1617   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001634  2801              CMP      r0,#1
001636  d007              BEQ      |L1.5704|
001638  e00c              B        |L1.5716|
                  |L1.5690|
00163a  2314              MOVS     r3,#0x14              ;1616
00163c  2200              MOVS     r2,#0                 ;1616
00163e  2164              MOVS     r1,#0x64              ;1616
001640  20d2              MOVS     r0,#0xd2              ;1616
001642  f7fffffe          BL       mess_send
001646  e005              B        |L1.5716|
                  |L1.5704|
001648  2314              MOVS     r3,#0x14
00164a  2201              MOVS     r2,#1
00164c  2164              MOVS     r1,#0x64
00164e  20d2              MOVS     r0,#0xd2
001650  f7fffffe          BL       mess_send
                  |L1.5716|
;;;1618   	}
;;;1619   
;;;1620   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001654  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001658  280b              CMP      r0,#0xb
00165a  d120              BNE      |L1.5790|
;;;1621   	{
;;;1622   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00165c  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001660  280b              CMP      r0,#0xb
001662  d102              BNE      |L1.5738|
001664  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001668  b908              CBNZ     r0,|L1.5742|
                  |L1.5738|
;;;1623   		{
;;;1624   		vz1_stat_cnt=10;
00166a  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5742|
;;;1625   		}
;;;1626   	vz1_stat_cnt--;
00166e  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001672  f1a00001          SUB      r0,r0,#1
001676  b200              SXTH     r0,r0
001678  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1627   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00167c  280a              CMP      r0,#0xa
00167e  d001              BEQ      |L1.5764|
001680  2809              CMP      r0,#9
001682  d106              BNE      |L1.5778|
                  |L1.5764|
;;;1628   		{
;;;1629   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001684  a3a5              ADR      r3,|L1.6428|
001686  a2ab              ADR      r2,|L1.6452|
001688  a1b0              ADR      r1,|L1.6476|
00168a  a0b6              ADR      r0,|L1.6500|
00168c  9700              STR      r7,[sp,#0]
00168e  f7fffffe          BL       show_mess
                  |L1.5778|
;;;1630   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1631   					"      ВКЛЮЧЕН       ",
;;;1632   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1633   					5000);
;;;1634   		}
;;;1635   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001692  2314              MOVS     r3,#0x14
001694  2200              MOVS     r2,#0
001696  2164              MOVS     r1,#0x64
001698  20d2              MOVS     r0,#0xd2
00169a  f7fffffe          BL       mess_send
                  |L1.5790|
;;;1636   	}
;;;1637   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00169e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0016a2  280c              CMP      r0,#0xc
0016a4  d12c              BNE      |L1.5888|
;;;1638   	{
;;;1639   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0016a6  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0016aa  280c              CMP      r0,#0xc
0016ac  d102              BNE      |L1.5812|
0016ae  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0016b2  b908              CBNZ     r0,|L1.5816|
                  |L1.5812|
;;;1640   		{
;;;1641   		vz1_stat_cnt=10;
0016b4  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5816|
;;;1642   		}
;;;1643   	vz1_stat_cnt--;
0016b8  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0016bc  f1a00001          SUB      r0,r0,#1
0016c0  b200              SXTH     r0,r0
0016c2  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1644   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0016c6  280a              CMP      r0,#0xa
0016c8  d001              BEQ      |L1.5838|
0016ca  2809              CMP      r0,#9
0016cc  d109              BNE      |L1.5858|
                  |L1.5838|
;;;1645   		{
;;;1646   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0016ce  f2af2374          ADR      r3,|L1.5212|
0016d2  f2af2260          ADR      r2,|L1.5236|
0016d6  f2af214c          ADR      r1,|L1.5260|
0016da  a0a2              ADR      r0,|L1.6500|
0016dc  9700              STR      r7,[sp,#0]
0016de  f7fffffe          BL       show_mess
                  |L1.5858|
;;;1647   					"    ЗАБЛОКИРОВАН    ",
;;;1648   					"     НЕИСПРАВНА     ",
;;;1649   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1650   					5000);
;;;1651   		}
;;;1652   	if(sk_stat[0]==1)
0016e2  7828              LDRB     r0,[r5,#0]  ; sk_stat
0016e4  2801              CMP      r0,#1
0016e6  d105              BNE      |L1.5876|
;;;1653   		{
;;;1654   		vz1_stat=vz1sWRK;
0016e8  f8884005          STRB     r4,[r8,#5]
;;;1655   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0016ec  210a              MOVS     r1,#0xa
0016ee  4658              MOV      r0,r11
0016f0  f7fffffe          BL       lc640_write
                  |L1.5876|
;;;1656   		}
;;;1657   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0016f4  2314              MOVS     r3,#0x14
0016f6  2200              MOVS     r2,#0
0016f8  2164              MOVS     r1,#0x64
0016fa  20d2              MOVS     r0,#0xd2
0016fc  f7fffffe          BL       mess_send
                  |L1.5888|
;;;1658   	}
;;;1659   
;;;1660   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
001700  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001704  280d              CMP      r0,#0xd
001706  d129              BNE      |L1.5980|
;;;1661   	{
;;;1662   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001708  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00170c  280d              CMP      r0,#0xd
00170e  d102              BNE      |L1.5910|
001710  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001714  b908              CBNZ     r0,|L1.5914|
                  |L1.5910|
;;;1663   		{
;;;1664   		vz1_stat_cnt=10;
001716  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5914|
;;;1665   		}
;;;1666   	vz1_stat_cnt--;
00171a  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00171e  f1a00001          SUB      r0,r0,#1
001722  b200              SXTH     r0,r0
001724  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1667   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001728  280a              CMP      r0,#0xa
00172a  d001              BEQ      |L1.5936|
00172c  2809              CMP      r0,#9
00172e  d106              BNE      |L1.5950|
                  |L1.5936|
;;;1668   		{
;;;1669   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001730  a392              ADR      r3,|L1.6524|
001732  a298              ADR      r2,|L1.6548|
001734  a19d              ADR      r1,|L1.6572|
001736  a08b              ADR      r0,|L1.6500|
001738  9700              STR      r7,[sp,#0]
00173a  f7fffffe          BL       show_mess
                  |L1.5950|
;;;1670   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1671   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1672   					"*   ТУМБЛЕРА!!!     ",
;;;1673   					5000);
;;;1674   		}
;;;1675   	if(sk_stat[1]==1)
00173e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001740  2801              CMP      r0,#1
001742  d105              BNE      |L1.5968|
;;;1676   		{
;;;1677   		vz1_stat=vz1sWRK;
001744  f8884005          STRB     r4,[r8,#5]
;;;1678   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001748  210a              MOVS     r1,#0xa
00174a  4658              MOV      r0,r11
00174c  f7fffffe          BL       lc640_write
                  |L1.5968|
;;;1679   		}
;;;1680   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001750  2314              MOVS     r3,#0x14
001752  2200              MOVS     r2,#0
001754  2164              MOVS     r1,#0x64
001756  20d2              MOVS     r0,#0xd2
001758  f7fffffe          BL       mess_send
                  |L1.5980|
;;;1681   	}
;;;1682   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
00175c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001760  280e              CMP      r0,#0xe
001762  d12a              BNE      |L1.6074|
;;;1683   	{
;;;1684   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001764  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001768  280e              CMP      r0,#0xe
00176a  d102              BNE      |L1.6002|
00176c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001770  b908              CBNZ     r0,|L1.6006|
                  |L1.6002|
;;;1685   		{
;;;1686   		vz1_stat_cnt=10;
001772  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6006|
;;;1687   		}
;;;1688   	vz1_stat_cnt--;
001776  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00177a  f1a00001          SUB      r0,r0,#1
00177e  b200              SXTH     r0,r0
001780  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1689   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001784  280a              CMP      r0,#0xa
001786  d001              BEQ      |L1.6028|
001788  2809              CMP      r0,#9
00178a  d106              BNE      |L1.6042|
                  |L1.6028|
;;;1690   		{
;;;1691   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
00178c  a349              ADR      r3,|L1.6324|
00178e  a24f              ADR      r2,|L1.6348|
001790  a154              ADR      r1,|L1.6372|
001792  a08c              ADR      r0,|L1.6596|
001794  9700              STR      r7,[sp,#0]
001796  f7fffffe          BL       show_mess
                  |L1.6042|
;;;1692   					"      ТУМБЛЕР       ",
;;;1693   					"     ВЫСОКОГО       ",
;;;1694   					"    НАПРЯЖЕНИЯ      ",
;;;1695   					5000);
;;;1696   		}
;;;1697   	if(sk_stat[1]==0)
00179a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179c  b938              CBNZ     r0,|L1.6062|
;;;1698   		{
;;;1699   		vz1_stat=vz1sOFF;
00179e  f8886005          STRB     r6,[r8,#5]
;;;1700   		lc640_write(EE_VZ1_STAT,vz1sOFF);
0017a2  2100              MOVS     r1,#0
0017a4  4658              MOV      r0,r11
0017a6  f7fffffe          BL       lc640_write
;;;1701   		vz_stop();
0017aa  f7fffffe          BL       vz_stop
                  |L1.6062|
;;;1702   
;;;1703   		}
;;;1704   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0017ae  2314              MOVS     r3,#0x14
0017b0  2201              MOVS     r2,#1
0017b2  2164              MOVS     r1,#0x64
0017b4  20d2              MOVS     r0,#0xd2
0017b6  f7fffffe          BL       mess_send
                  |L1.6074|
;;;1705   	}
;;;1706   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0017ba  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1707   	{
;;;1708   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1709   		{
;;;1710   		vz1_stat_cnt=10;
;;;1711   		}
;;;1712   	vz1_stat_cnt--;
;;;1713   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1714   		{
;;;1715   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0017be  f64037b8          MOV      r7,#0xbb8
0017c2  280f              CMP      r0,#0xf               ;1706
0017c4  d135              BNE      |L1.6194|
0017c6  f8980006          LDRB     r0,[r8,#6]            ;1708  ; vz1_stat_old
0017ca  280f              CMP      r0,#0xf               ;1708
0017cc  d102              BNE      |L1.6100|
0017ce  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1708  ; vz1_stat_cnt
0017d2  b908              CBNZ     r0,|L1.6104|
                  |L1.6100|
0017d4  f8a8407a          STRH     r4,[r8,#0x7a]         ;1710
                  |L1.6104|
0017d8  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1712  ; vz1_stat_cnt
0017dc  f1a00001          SUB      r0,r0,#1              ;1712
0017e0  b200              SXTH     r0,r0                 ;1712
0017e2  f8a8007a          STRH     r0,[r8,#0x7a]         ;1712
0017e6  280a              CMP      r0,#0xa               ;1713
0017e8  d001              BEQ      |L1.6126|
0017ea  2809              CMP      r0,#9                 ;1713
0017ec  d106              BNE      |L1.6140|
                  |L1.6126|
0017ee  a37b              ADR      r3,|L1.6620|
0017f0  a280              ADR      r2,|L1.6644|
0017f2  a186              ADR      r1,|L1.6668|
0017f4  a08b              ADR      r0,|L1.6692|
0017f6  9700              STR      r7,[sp,#0]
0017f8  f7fffffe          BL       show_mess
                  |L1.6140|
;;;1716   					"       ЗАРЯД        ",
;;;1717   					"      УСПЕШНО       ",
;;;1718   					"     ЗАВЕРШЕН       ",
;;;1719   					3000);
;;;1720   		}
;;;1721   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0017fc  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001800  2806              CMP      r0,#6
001802  d001              BEQ      |L1.6152|
001804  2805              CMP      r0,#5
001806  d106              BNE      |L1.6166|
                  |L1.6152|
;;;1722   		{
;;;1723   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001808  a32a              ADR      r3,|L1.6324|
00180a  a230              ADR      r2,|L1.6348|
00180c  a135              ADR      r1,|L1.6372|
00180e  a08b              ADR      r0,|L1.6716|
001810  9700              STR      r7,[sp,#0]
001812  f7fffffe          BL       show_mess
                  |L1.6166|
;;;1724   					"      ТУМБЛЕР       ",
;;;1725   					"     ВЫСОКОГО       ",
;;;1726   					"    НАПРЯЖЕНИЯ      ",
;;;1727   					3000);
;;;1728   		}
;;;1729   	if(sk_stat[1]==0)
001816  7868              LDRB     r0,[r5,#1]  ; sk_stat
001818  b928              CBNZ     r0,|L1.6182|
;;;1730   		{
;;;1731   		vz1_stat=vz1sOFF;
00181a  f8886005          STRB     r6,[r8,#5]
;;;1732   		lc640_write(EE_VZ1_STAT,vz1sOFF);
00181e  2100              MOVS     r1,#0
001820  4658              MOV      r0,r11
001822  f7fffffe          BL       lc640_write
                  |L1.6182|
;;;1733   		}
;;;1734   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001826  2314              MOVS     r3,#0x14
001828  2200              MOVS     r2,#0
00182a  2164              MOVS     r1,#0x64
00182c  20d2              MOVS     r0,#0xd2
00182e  f7fffffe          BL       mess_send
                  |L1.6194|
;;;1735   	}
;;;1736   
;;;1737   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001832  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001836  2810              CMP      r0,#0x10
001838  d135              BNE      |L1.6310|
;;;1738   	{
;;;1739   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00183a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00183e  2810              CMP      r0,#0x10
001840  d102              BNE      |L1.6216|
001842  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001846  b908              CBNZ     r0,|L1.6220|
                  |L1.6216|
;;;1740   		{
;;;1741   		vz1_stat_cnt=10;
001848  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6220|
;;;1742   		}
;;;1743   	vz1_stat_cnt--;
00184c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001850  f1a00001          SUB      r0,r0,#1
001854  b200              SXTH     r0,r0
001856  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1744   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00185a  280a              CMP      r0,#0xa
00185c  d001              BEQ      |L1.6242|
00185e  2809              CMP      r0,#9
001860  d106              BNE      |L1.6256|
                  |L1.6242|
;;;1745   		{
;;;1746   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001862  a37c              ADR      r3,|L1.6740|
001864  a281              ADR      r2,|L1.6764|
001866  a169              ADR      r1,|L1.6668|
001868  a06e              ADR      r0,|L1.6692|
00186a  9700              STR      r7,[sp,#0]
00186c  f7fffffe          BL       show_mess
                  |L1.6256|
;;;1747   					"       ЗАРЯД        ",
;;;1748   					"     ПРЕКРАЩЕН      ",
;;;1749   					"                    ",
;;;1750   					3000);
;;;1751   		}
;;;1752   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001870  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001874  2806              CMP      r0,#6
001876  d001              BEQ      |L1.6268|
001878  2805              CMP      r0,#5
00187a  d106              BNE      |L1.6282|
                  |L1.6268|
;;;1753   		{
;;;1754   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00187c  a30d              ADR      r3,|L1.6324|
00187e  a213              ADR      r2,|L1.6348|
001880  a118              ADR      r1,|L1.6372|
001882  a06e              ADR      r0,|L1.6716|
001884  9700              STR      r7,[sp,#0]
001886  f7fffffe          BL       show_mess
                  |L1.6282|
;;;1755   					"      ТУМБЛЕР       ",
;;;1756   					"     ВЫСОКОГО       ",
;;;1757   					"    НАПРЯЖЕНИЯ      ",
;;;1758   					3000);
;;;1759   		}
;;;1760   	if(sk_stat[1]==0)
00188a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00188c  b928              CBNZ     r0,|L1.6298|
;;;1761   		{
;;;1762   		vz1_stat=vz1sOFF;
00188e  f8886005          STRB     r6,[r8,#5]
;;;1763   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001892  2100              MOVS     r1,#0
001894  4658              MOV      r0,r11
001896  f7fffffe          BL       lc640_write
                  |L1.6298|
;;;1764   		}
;;;1765   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00189a  2314              MOVS     r3,#0x14
00189c  2200              MOVS     r2,#0
00189e  2164              MOVS     r1,#0x64
0018a0  20d2              MOVS     r0,#0xd2
0018a2  f7fffffe          BL       mess_send
                  |L1.6310|
;;;1766   	}
;;;1767   
;;;1768   vz1_stat_old=vz1_stat;
0018a6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018aa  f8880006          STRB     r0,[r8,#6]
;;;1769   
;;;1770   
;;;1771   
;;;1772   }
0018ae  e8bd8ff8          POP      {r3-r11,pc}
0018b2  0000              DCW      0x0000
                  |L1.6324|
0018b4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0018b8  cdc0cfd0
0018bc  dfc6c5cd
0018c0  c8df2020
0018c4  20202020
0018c8  00      
0018c9  00                DCB      0
0018ca  00                DCB      0
0018cb  00                DCB      0
                  |L1.6348|
0018cc  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
0018d0  20c2dbd1
0018d4  cecacec3
0018d8  ce202020
0018dc  20202020
0018e0  00      
0018e1  00                DCB      0
0018e2  00                DCB      0
0018e3  00                DCB      0
                  |L1.6372|
0018e4  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
0018e8  2020d2d3
0018ec  ccc1cbc5
0018f0  d0202020
0018f4  20202020
0018f8  00      
0018f9  00                DCB      0
0018fa  00                DCB      0
0018fb  00                DCB      0
                  |L1.6396|
0018fc  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001900  20c2cacb
001904  ded7c8d2
001908  c5202020
00190c  20202020
001910  00      
001911  00                DCB      0
001912  00                DCB      0
001913  00                DCB      0
                  |L1.6420|
                          DCD      ||area_number.25||+0x80
                  |L1.6424|
                          DCD      UZ_T
                  |L1.6428|
00191c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001920  c720c2c5
001924  cdd2c8cb
001928  dfd6c8  
00192b  c8212120          DCB      200,"!!  ",0
00192f  2000    
001931  00                DCB      0
001932  00                DCB      0
001933  00                DCB      0
                  |L1.6452|
001934  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001938  2020c2ca
00193c  cbded7c5
001940  cd202020
001944  20202020
001948  00      
001949  00                DCB      0
00194a  00                DCB      0
00194b  00                DCB      0
                  |L1.6476|
00194c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001950  c520ccce
001954  c6c5d220
001958  c1dbd2dc
00195c  20202020          DCB      "    ",0
001960  00      
001961  00                DCB      0
001962  00                DCB      0
001963  00                DCB      0
                  |L1.6500|
001964  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001968  cdc8d2c5
00196c  cbdccddb
001970  c920c7  
001973  c0d0dfc4          DCB      192,208,223,196," ",0
001977  2000    
001979  00                DCB      0
00197a  00                DCB      0
00197b  00                DCB      0
                  |L1.6524|
00197c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001980  d2d3ccc1
001984  cbc5d0c0
001988  21212120
00198c  20202020
001990  00      
001991  00                DCB      0
001992  00                DCB      0
001993  00                DCB      0
                  |L1.6548|
001994  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001998  d1cbc520
00199c  c2cacbde
0019a0  d7c5cd  
0019a3  c8df2020          DCB      200,223,"   ",0
0019a7  2000    
0019a9  00                DCB      0
0019aa  00                DCB      0
0019ab  00                DCB      0
                  |L1.6572|
0019ac  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
0019b0  c4c5d220
0019b4  cfd0cec4
0019b8  cecbc6  
0019bb  c5cd2020          DCB      197,205,"   ",0
0019bf  2000    
0019c1  00                DCB      0
0019c2  00                DCB      0
0019c3  00                DCB      0
                  |L1.6596|
0019c4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
0019c8  20c2dbca
0019cc  cbded7c8
0019d0  d2c52020
0019d4  20202020
0019d8  00      
0019d9  00                DCB      0
0019da  00                DCB      0
0019db  00                DCB      0
                  |L1.6620|
0019dc  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
0019e0  20c7c0c2
0019e4  c5d0d8c5
0019e8  cd202020
0019ec  20202020
0019f0  00      
0019f1  00                DCB      0
0019f2  00                DCB      0
0019f3  00                DCB      0
                  |L1.6644|
0019f4  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
0019f8  2020d3d1
0019fc  cfc5d8cd
001a00  ce202020
001a04  20202020
001a08  00      
001a09  00                DCB      0
001a0a  00                DCB      0
001a0b  00                DCB      0
                  |L1.6668|
001a0c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001a10  202020c7
001a14  c0d0dfc4
001a18  20202020
001a1c  20202020
001a20  00      
001a21  00                DCB      0
001a22  00                DCB      0
001a23  00                DCB      0
                  |L1.6692|
001a24  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001a28  d0c0c2cd
001a2c  c8d2c5cb
001a30  dccddbc9
001a34  20202020          DCB      "    ",0
001a38  00      
001a39  00                DCB      0
001a3a  00                DCB      0
001a3b  00                DCB      0
                  |L1.6716|
001a3c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001a40  20c2dbca
001a44  cbded7c8
001a48  d2c52020
001a4c  20202020
001a50  00      
001a51  00                DCB      0
001a52  00                DCB      0
001a53  00                DCB      0
                  |L1.6740|
001a54  20202020          DCB      "                    ",0
001a58  20202020
001a5c  20202020
001a60  20202020
001a64  20202020
001a68  00      
001a69  00                DCB      0
001a6a  00                DCB      0
001a6b  00                DCB      0
                  |L1.6764|
001a6c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001a70  20cfd0c5
001a74  cad0c0d9
001a78  c5cd2020
001a7c  20202020
001a80  00      
001a81  00                DCB      0
001a82  00                DCB      0
001a83  00                DCB      0
                          ENDP

                  vz1_start PROC
;;;1775   //старт уравнительног заряда
;;;1776   char vz1_start(char hour)
001a84  b510              PUSH     {r4,lr}
;;;1777   {          
;;;1778   char out;
;;;1779   out=0;
001a86  f04f0000          MOV      r0,#0
;;;1780   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001a8a  49fe              LDR      r1,|L1.7812|
001a8c  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001a90  2a00              CMP      r2,#0
001a92  d110              BNE      |L1.6838|
001a94  4afc              LDR      r2,|L1.7816|
001a96  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001a98  2a01              CMP      r2,#1
001a9a  d00c              BEQ      |L1.6838|
001a9c  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001a9e  2a00              CMP      r2,#0
001aa0  d109              BNE      |L1.6838|
;;;1781   	{
;;;1782   	if(vz1_stat==vz1sOFF)
;;;1783   		{
;;;1784   		vz1_stat=vz1sSTEP1;
001aa2  f04f0001          MOV      r0,#1
001aa6  7148              STRB     r0,[r1,#5]
;;;1785   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001aa8  4601              MOV      r1,r0
001aaa  f44f70c9          MOV      r0,#0x192
001aae  f7fffffe          BL       lc640_write
;;;1786   		out=1;
001ab2  f04f0001          MOV      r0,#1
                  |L1.6838|
;;;1787   		
;;;1788   		}
;;;1789   /*	spc_stat=spcVZ;
;;;1790   	__ee_spc_stat=spcVZ; 
;;;1791   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1792   	vz_cnt_h=hour;
;;;1793   	__ee_vz_cnt=hour*60;
;;;1794   	if(hour==0)__ee_vz_cnt=30;
;;;1795   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1796   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1797   	vz_cnt_h_=0;
;;;1798   	vz_cnt_s=0;
;;;1799   	vz_cnt_s_=0;
;;;1800   	
;;;1801   		*/
;;;1802   	}
;;;1803   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1804   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1805   //plazma=out;	
;;;1806   return out;
;;;1807   }
001ab6  bd10              POP      {r4,pc}
;;;1808   
                          ENDP

                  vz1_stop PROC
;;;1810   //стоп уравнительног заряда
;;;1811   void vz1_stop(void)
001ab8  48f2              LDR      r0,|L1.7812|
;;;1812   {
;;;1813   if(vz1_stat!=vz1sOFF)
001aba  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001abc  2900              CMP      r1,#0
001abe  d006              BEQ      |L1.6862|
;;;1814   	{
;;;1815   	vz1_stat=vz1sSTOP;
001ac0  f04f0110          MOV      r1,#0x10
001ac4  7141              STRB     r1,[r0,#5]
;;;1816   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001ac6  f44f70c9          MOV      r0,#0x192
001aca  f7ffbffe          B.W      lc640_write
                  |L1.6862|
;;;1817   	}
;;;1818   }
001ace  4770              BX       lr
;;;1819   
                          ENDP

                  vz2_drv PROC
;;;1821   //драйвер формовочного заряда
;;;1822   void vz2_drv(void)
001ad0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1823   {
;;;1824   
;;;1825   if(vz2_stat==vz2sSTEP1)
001ad4  f8df83ac          LDR      r8,|L1.7812|
;;;1826   	{
;;;1827   	if(vz2_stat_old!=vz2_stat)
;;;1828   		{
;;;1829   		vz2_stat_cnt=5;
;;;1830   		}
;;;1831   	if(vz2_stat_cnt)
;;;1832   		{
;;;1833   		vz2_stat_cnt--;
;;;1834   		if(vz2_stat_cnt==0)
;;;1835   			{
;;;1836   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1837   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1838   			}
;;;1839   		}
;;;1840   	if(sk_stat[0]==1)
001ad8  4dec              LDR      r5,|L1.7820|
001ada  f8980007          LDRB     r0,[r8,#7]            ;1825  ; vz2_stat
001ade  2801              CMP      r0,#1                 ;1825
001ae0  d13b              BNE      |L1.7002|
001ae2  f8980008          LDRB     r0,[r8,#8]            ;1827  ; vz2_stat_old
001ae6  2801              CMP      r0,#1                 ;1827
001ae8  d003              BEQ      |L1.6898|
001aea  f04f0005          MOV      r0,#5                 ;1829
001aee  f8a8007e          STRH     r0,[r8,#0x7e]         ;1829
                  |L1.6898|
001af2  f9b8007e          LDRSH    r0,[r8,#0x7e]         ;1831  ; vz2_stat_cnt
001af6  b170              CBZ      r0,|L1.6934|
001af8  f1a00001          SUB      r0,r0,#1              ;1833
001afc  b200              SXTH     r0,r0                 ;1833
001afe  f8a8007e          STRH     r0,[r8,#0x7e]         ;1833
001b02  b940              CBNZ     r0,|L1.6934|
001b04  f04f000c          MOV      r0,#0xc               ;1836
001b08  f8880007          STRB     r0,[r8,#7]            ;1836
001b0c  4601              MOV      r1,r0                 ;1837
001b0e  f44f70ca          MOV      r0,#0x194             ;1837
001b12  f7fffffe          BL       lc640_write
                  |L1.6934|
001b16  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b18  2801              CMP      r0,#1
001b1a  d118              BNE      |L1.6990|
;;;1841   		{
;;;1842   		vz2_stat=vz2sSTEP2;
001b1c  f04f0002          MOV      r0,#2
001b20  f8880007          STRB     r0,[r8,#7]
;;;1843   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b24  4601              MOV      r1,r0
001b26  f44f70ca          MOV      r0,#0x194
001b2a  f7fffffe          BL       lc640_write
;;;1844   		tree_up(iVZ2_STEP2_2,1,0,0);
001b2e  2300              MOVS     r3,#0
001b30  461a              MOV      r2,r3
001b32  2101              MOVS     r1,#1
001b34  20e1              MOVS     r0,#0xe1
001b36  f7fffffe          BL       tree_up
;;;1845   		tree_up(iVZ2_STEP2_1,0,0,0);
001b3a  2300              MOVS     r3,#0
001b3c  461a              MOV      r2,r3
001b3e  4619              MOV      r1,r3
001b40  20e0              MOVS     r0,#0xe0
001b42  f7fffffe          BL       tree_up
;;;1846   		ret(1200);
001b46  f44f6096          MOV      r0,#0x4b0
001b4a  f7fffffe          BL       ||ret||
                  |L1.6990|
;;;1847   		}
;;;1848   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b4e  2314              MOVS     r3,#0x14
001b50  2200              MOVS     r2,#0
001b52  2164              MOVS     r1,#0x64
001b54  20d2              MOVS     r0,#0xd2
001b56  f7fffffe          BL       mess_send
                  |L1.7002|
;;;1849   	}
;;;1850   
;;;1851   if(vz2_stat==vz2sSTEP2)
001b5a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001b5e  2802              CMP      r0,#2
001b60  d11a              BNE      |L1.7064|
;;;1852   	{
;;;1853   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b62  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001b66  2802              CMP      r0,#2
001b68  d102              BNE      |L1.7024|
001b6a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001b6e  b918              CBNZ     r0,|L1.7032|
                  |L1.7024|
;;;1854   		{
;;;1855   		vz2_stat_cnt=15;
001b70  f04f000f          MOV      r0,#0xf
001b74  f8a8007e          STRH     r0,[r8,#0x7e]
                  |L1.7032|
;;;1856   		}
;;;1857   	vz2_stat_cnt--;
001b78  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001b7c  f1a00001          SUB      r0,r0,#1
001b80  f8a8007e          STRH     r0,[r8,#0x7e]
;;;1858   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b84  f04f0314          MOV      r3,#0x14
001b88  f04f0200          MOV      r2,#0
001b8c  f04f0164          MOV      r1,#0x64
001b90  f04f00d2          MOV      r0,#0xd2
001b94  f7fffffe          BL       mess_send
                  |L1.7064|
;;;1859   	}
;;;1860   
;;;1861   if(vz2_stat==vz2sSTEP3)
001b98  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1862   	{
;;;1863   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1864   		{
;;;1865   		vz2_stat_cnt=10;
001b9c  240a              MOVS     r4,#0xa
001b9e  2600              MOVS     r6,#0
;;;1866   		cntrl_stat=0;
;;;1867   		cntrl_stat_new=0;
;;;1868   		cntrl_stat_old=0;
;;;1869   		}
;;;1870   	vz2_stat_cnt--;
;;;1871   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1872   		{
;;;1873   		show_mess(	"     ВКЛЮЧИТЕ       ",
001ba0  f2413788          MOV      r7,#0x1388
001ba4  2803              CMP      r0,#3                 ;1861
001ba6  d13e              BNE      |L1.7206|
001ba8  f8980008          LDRB     r0,[r8,#8]            ;1863  ; vz2_stat_old
001bac  2803              CMP      r0,#3                 ;1863
001bae  d102              BNE      |L1.7094|
001bb0  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1863  ; vz2_stat_cnt
001bb4  b938              CBNZ     r0,|L1.7110|
                  |L1.7094|
001bb6  f8a8407e          STRH     r4,[r8,#0x7e]         ;1865
001bba  f8a86032          STRH     r6,[r8,#0x32]         ;1866
001bbe  f8a86048          STRH     r6,[r8,#0x48]         ;1867
001bc2  f8a86034          STRH     r6,[r8,#0x34]         ;1868
                  |L1.7110|
001bc6  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1870  ; vz2_stat_cnt
001bca  f1a00001          SUB      r0,r0,#1              ;1870
001bce  b200              SXTH     r0,r0                 ;1870
001bd0  f8a8007e          STRH     r0,[r8,#0x7e]         ;1870
001bd4  280a              CMP      r0,#0xa               ;1871
001bd6  d001              BEQ      |L1.7132|
001bd8  2809              CMP      r0,#9                 ;1871
001bda  d10a              BNE      |L1.7154|
                  |L1.7132|
001bdc  f2af332c          ADR      r3,|L1.6324|
001be0  f2af3218          ADR      r2,|L1.6348|
001be4  f2af3104          ADR      r1,|L1.6372|
001be8  f2af20f0          ADR      r0,|L1.6396|
001bec  9700              STR      r7,[sp,#0]
001bee  f7fffffe          BL       show_mess
                  |L1.7154|
;;;1874   					"      ТУМБЛЕР       ",
;;;1875   					"     ВЫСОКОГО       ",
;;;1876   					"    НАПРЯЖЕНИЯ      ",
;;;1877   					5000);
;;;1878   		}
;;;1879   	if(sk_stat[1]==1)
001bf2  7868              LDRB     r0,[r5,#1]  ; sk_stat
001bf4  2801              CMP      r0,#1
001bf6  d110              BNE      |L1.7194|
;;;1880   		{
;;;1881   		vz2_stat=vz2sWRK1;
001bf8  f8884007          STRB     r4,[r8,#7]
;;;1882   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001bfc  210a              MOVS     r1,#0xa
001bfe  f44f70ca          MOV      r0,#0x194
001c02  f7fffffe          BL       lc640_write
;;;1883   		volt_region=1;
001c06  f04f0001          MOV      r0,#1
001c0a  f888002f          STRB     r0,[r8,#0x2f]
;;;1884   		cntrl_stat=0;
001c0e  f8a86032          STRH     r6,[r8,#0x32]
;;;1885   		cntrl_stat_new=0;
001c12  f8a86048          STRH     r6,[r8,#0x48]
;;;1886   		cntrl_stat_old=0;
001c16  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.7194|
;;;1887   		}
;;;1888   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001c1a  2314              MOVS     r3,#0x14
001c1c  2200              MOVS     r2,#0
001c1e  2164              MOVS     r1,#0x64
001c20  20d2              MOVS     r0,#0xd2
001c22  f7fffffe          BL       mess_send
                  |L1.7206|
;;;1889   	}
;;;1890   
;;;1891   if(vz2_stat==vz2sWRK1)
001c26  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1892   	{
;;;1893   
;;;1894   	if(vz2_stat_old!=vz2_stat)
;;;1895   		{
;;;1896   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001c2a  f8df9258          LDR      r9,|L1.7812|
;;;1897   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1898   		vz2_up_cnt=0L;
;;;1899   
;;;1900   		}
;;;1901   	vz2_wrk_cnt--;
;;;1902   	vz2_up_cnt++;
;;;1903   
;;;1904   	if(vz2_wrk_cnt==0)
;;;1905   		{
;;;1906   		vz2_stat=vz2sWRK2;
;;;1907   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1908   		}
;;;1909   	if(sk_stat[0]==0)
;;;1910   		{
;;;1911   		vz2_stat=vz2sERR2;
;;;1912   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1913   		}
;;;1914   	if(sk_stat[1]==0)
;;;1915   		{
;;;1916   		vz2_stat=vz2sERR3;
;;;1917   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1918   		}
;;;1919   	//if(abs(out_U-FZ_U1)<10)
;;;1920   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1921   		{
;;;1922   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1923   			{
;;;1924   			if(vz2_stat_ph2_cnt)
;;;1925   				{
;;;1926   				vz2_stat_ph2_cnt--;
;;;1927   				if(vz2_stat_ph2_cnt==0)
;;;1928   					{
;;;1929   					vz2_stat=vz2sWRK2;
;;;1930   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1931   					}
;;;1932   				}
;;;1933   			}
;;;1934   		else
;;;1935   			{
;;;1936   			vz2_stat_ph2_cnt=60;
;;;1937   			}
;;;1938   		}
;;;1939   	else
;;;1940   		{
;;;1941   		vz2_stat_ph2_cnt=60;
;;;1942   		}
;;;1943   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1944   		{
;;;1945   		volt_region=0;
;;;1946   		cntrl_stat=1000;
001c2e  f44f7b7a          MOV      r11,#0x3e8
001c32  f1090980          ADD      r9,r9,#0x80           ;1896
001c36  f04f0a0b          MOV      r10,#0xb              ;1906
001c3a  280a              CMP      r0,#0xa               ;1891
001c3c  d17e              BNE      |L1.7484|
001c3e  f8980008          LDRB     r0,[r8,#8]            ;1894  ; vz2_stat_old
001c42  280a              CMP      r0,#0xa               ;1894
001c44  d00a              BEQ      |L1.7260|
001c46  4892              LDR      r0,|L1.7824|
001c48  f44f6161          MOV      r1,#0xe10             ;1896
001c4c  f9b00000          LDRSH    r0,[r0,#0]            ;1896  ; FZ_T1
001c50  fb00f001          MUL      r0,r0,r1              ;1896
001c54  f8c90044          STR      r0,[r9,#0x44]         ;1896  ; vz2_wrk_cnt
001c58  f8c96048          STR      r6,[r9,#0x48]         ;1898  ; vz2_up_cnt
                  |L1.7260|
001c5c  f8d90044          LDR      r0,[r9,#0x44]         ;1901  ; vz2_wrk_cnt
001c60  f1a00001          SUB      r0,r0,#1              ;1901
001c64  f8c90044          STR      r0,[r9,#0x44]         ;1901  ; vz2_wrk_cnt
001c68  f8d91048          LDR      r1,[r9,#0x48]         ;1902  ; vz2_up_cnt
001c6c  f1010101          ADD      r1,r1,#1              ;1902
001c70  f8c91048          STR      r1,[r9,#0x48]         ;1902  ; vz2_up_cnt
001c74  b930              CBNZ     r0,|L1.7300|
001c76  f888a007          STRB     r10,[r8,#7]           ;1906
001c7a  210b              MOVS     r1,#0xb               ;1907
001c7c  f44f70ca          MOV      r0,#0x194             ;1907
001c80  f7fffffe          BL       lc640_write
                  |L1.7300|
001c84  7828              LDRB     r0,[r5,#0]            ;1909  ; sk_stat
001c86  b940              CBNZ     r0,|L1.7322|
001c88  f04f000d          MOV      r0,#0xd               ;1911
001c8c  f8880007          STRB     r0,[r8,#7]            ;1911
001c90  4601              MOV      r1,r0                 ;1912
001c92  f44f70ca          MOV      r0,#0x194             ;1912
001c96  f7fffffe          BL       lc640_write
                  |L1.7322|
001c9a  7868              LDRB     r0,[r5,#1]            ;1914  ; sk_stat
001c9c  b940              CBNZ     r0,|L1.7344|
001c9e  f04f000e          MOV      r0,#0xe               ;1916
001ca2  f8880007          STRB     r0,[r8,#7]            ;1916
001ca6  4601              MOV      r1,r0                 ;1917
001ca8  f44f70ca          MOV      r0,#0x194             ;1917
001cac  f7fffffe          BL       lc640_write
                  |L1.7344|
001cb0  4979              LDR      r1,|L1.7832|
001cb2  4878              LDR      r0,|L1.7828|
001cb4  233c              MOVS     r3,#0x3c              ;1936
001cb6  f9b11000          LDRSH    r1,[r1,#0]            ;1920  ; FZ_U1
001cba  f9b00000          LDRSH    r0,[r0,#0]            ;1920  ; out_U
001cbe  f101021e          ADD      r2,r1,#0x1e           ;1920
001cc2  4290              CMP      r0,r2                 ;1920
001cc4  da20              BGE      |L1.7432|
001cc6  390a              SUBS     r1,r1,#0xa            ;1920
001cc8  4288              CMP      r0,r1                 ;1920
001cca  dd1d              BLE      |L1.7432|
001ccc  4873              LDR      r0,|L1.7836|
001cce  4974              LDR      r1,|L1.7840|
001cd0  f9b00000          LDRSH    r0,[r0,#0]            ;1922  ; Ib_ips_termokompensat
001cd4  f9b11000          LDRSH    r1,[r1,#0]            ;1922  ; FZ_ISW12
001cd8  fb90f0f4          SDIV     r0,r0,r4              ;1922
001cdc  4288              CMP      r0,r1                 ;1922
001cde  da10              BGE      |L1.7426|
001ce0  f9b90000          LDRSH    r0,[r9,#0]            ;1924  ; vz2_stat_ph2_cnt
001ce4  b190              CBZ      r0,|L1.7436|
001ce6  f1a00001          SUB      r0,r0,#1              ;1926
001cea  b200              SXTH     r0,r0                 ;1926
001cec  f8a90000          STRH     r0,[r9,#0]            ;1926
001cf0  b960              CBNZ     r0,|L1.7436|
001cf2  f888a007          STRB     r10,[r8,#7]           ;1929
001cf6  210b              MOVS     r1,#0xb               ;1930
001cf8  f44f70ca          MOV      r0,#0x194             ;1930
001cfc  f7fffffe          BL       lc640_write
001d00  e004              B        |L1.7436|
                  |L1.7426|
001d02  f8a93000          STRH     r3,[r9,#0]            ;1936
001d06  e001              B        |L1.7436|
                  |L1.7432|
001d08  f8a93000          STRH     r3,[r9,#0]            ;1941
                  |L1.7436|
001d0c  f9b8004a          LDRSH    r0,[r8,#0x4a]         ;1943  ; Ibmax
001d10  f8b8104c          LDRH     r1,[r8,#0x4c]         ;1943  ; IZMAX_
001d14  fb90f0f4          SDIV     r0,r0,r4              ;1943
001d18  4288              CMP      r0,r1                 ;1943
001d1a  dd18              BLE      |L1.7502|
001d1c  f9b82032          LDRSH    r2,[r8,#0x32]         ;1943  ; cntrl_stat
001d20  2a14              CMP      r2,#0x14              ;1943
001d22  dc14              BGT      |L1.7502|
001d24  f898202f          LDRB     r2,[r8,#0x2f]         ;1943  ; volt_region
001d28  2a01              CMP      r2,#1                 ;1943
001d2a  d110              BNE      |L1.7502|
001d2c  f8b8207c          LDRH     r2,[r8,#0x7c]         ;1943  ; volt_region_cnt
001d30  b96a              CBNZ     r2,|L1.7502|
001d32  f888602f          STRB     r6,[r8,#0x2f]         ;1945
001d36  f8a8b032          STRH     r11,[r8,#0x32]
;;;1947   		cntrl_stat_new=1000;
001d3a  e000              B        |L1.7486|
                  |L1.7484|
001d3c  e032              B        |L1.7588|
                  |L1.7486|
001d3e  f8a8b048          STRH     r11,[r8,#0x48]
;;;1948   		cntrl_stat_old=1000;
001d42  f8a8b034          STRH     r11,[r8,#0x34]
;;;1949   		volt_region_cnt=110;
001d46  f04f026e          MOV      r2,#0x6e
001d4a  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.7502|
;;;1950   		}
;;;1951   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001d4e  4288              CMP      r0,r1
001d50  da15              BGE      |L1.7550|
001d52  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001d56  4558              CMP      r0,r11
001d58  db11              BLT      |L1.7550|
001d5a  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001d5e  b970              CBNZ     r0,|L1.7550|
001d60  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001d64  b958              CBNZ     r0,|L1.7550|
;;;1952   		{
;;;1953   		volt_region=1;
001d66  f04f0001          MOV      r0,#1
001d6a  f888002f          STRB     r0,[r8,#0x2f]
;;;1954   		cntrl_stat=10;
001d6e  f8a84032          STRH     r4,[r8,#0x32]
;;;1955   		cntrl_stat_new=10;
001d72  f8a84048          STRH     r4,[r8,#0x48]
;;;1956   		cntrl_stat_old=10;
001d76  f8a84034          STRH     r4,[r8,#0x34]
;;;1957   		volt_region_cnt=10;
001d7a  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.7550|
;;;1958   		}
;;;1959   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d7e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001d82  b110              CBZ      r0,|L1.7562|
;;;1960   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001d84  2801              CMP      r0,#1
001d86  d007              BEQ      |L1.7576|
001d88  e00c              B        |L1.7588|
                  |L1.7562|
001d8a  2314              MOVS     r3,#0x14              ;1959
001d8c  2200              MOVS     r2,#0                 ;1959
001d8e  2164              MOVS     r1,#0x64              ;1959
001d90  20d2              MOVS     r0,#0xd2              ;1959
001d92  f7fffffe          BL       mess_send
001d96  e005              B        |L1.7588|
                  |L1.7576|
001d98  2314              MOVS     r3,#0x14
001d9a  2201              MOVS     r2,#1
001d9c  2164              MOVS     r1,#0x64
001d9e  20d2              MOVS     r0,#0xd2
001da0  f7fffffe          BL       mess_send
                  |L1.7588|
;;;1961   	}
;;;1962   
;;;1963   if(vz2_stat==vz2sWRK2)
001da4  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001da8  280b              CMP      r0,#0xb
001daa  d17d              BNE      |L1.7848|
;;;1964   	{
;;;1965   	if(vz2_stat_old!=vz2_stat)
001dac  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001db0  280b              CMP      r0,#0xb
001db2  d008              BEQ      |L1.7622|
;;;1966   		{
;;;1967   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001db4  483b              LDR      r0,|L1.7844|
001db6  f44f6161          MOV      r1,#0xe10
001dba  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001dbe  fb00f001          MUL      r0,r0,r1
001dc2  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
                  |L1.7622|
;;;1968   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1969   		//vz2_up_cnt=0L;
;;;1970   		}
;;;1971   	vz2_wrk_cnt--;
001dc6  f8d90044          LDR      r0,[r9,#0x44]  ; vz2_wrk_cnt
001dca  f1a00001          SUB      r0,r0,#1
001dce  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
;;;1972   	vz2_up_cnt++;
001dd2  f8d91048          LDR      r1,[r9,#0x48]  ; vz2_up_cnt
001dd6  f1010101          ADD      r1,r1,#1
001dda  f8c91048          STR      r1,[r9,#0x48]  ; vz2_up_cnt
;;;1973   
;;;1974   	if(vz2_wrk_cnt==0)
001dde  b958              CBNZ     r0,|L1.7672|
;;;1975   		{
;;;1976   		vz2_stat=vz2sFINE;
001de0  f04f0012          MOV      r0,#0x12
001de4  f8880007          STRB     r0,[r8,#7]
;;;1977   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001de8  4601              MOV      r1,r0
001dea  f44f70ca          MOV      r0,#0x194
001dee  f7fffffe          BL       lc640_write
;;;1978   		fz_mem_hndl(0);
001df2  2000              MOVS     r0,#0
001df4  f7fffffe          BL       fz_mem_hndl
                  |L1.7672|
;;;1979   		}
;;;1980   	if(sk_stat[0]==0)
001df8  7828              LDRB     r0,[r5,#0]  ; sk_stat
001dfa  b940              CBNZ     r0,|L1.7694|
;;;1981   		{
;;;1982   		vz2_stat=vz2sERR5;
001dfc  f04f0010          MOV      r0,#0x10
001e00  f8880007          STRB     r0,[r8,#7]
;;;1983   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001e04  4601              MOV      r1,r0
001e06  f44f70ca          MOV      r0,#0x194
001e0a  f7fffffe          BL       lc640_write
                  |L1.7694|
;;;1984   		}
;;;1985   	if(sk_stat[1]==0)
001e0e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001e10  b940              CBNZ     r0,|L1.7716|
;;;1986   		{
;;;1987   		vz2_stat=vz2sERR6;
001e12  f04f0011          MOV      r0,#0x11
001e16  f8880007          STRB     r0,[r8,#7]
;;;1988   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001e1a  4601              MOV      r1,r0
001e1c  f44f70ca          MOV      r0,#0x194
001e20  f7fffffe          BL       lc640_write
                  |L1.7716|
;;;1989   		}
;;;1990   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001e24  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
001e28  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
001e2c  fb90f0f4          SDIV     r0,r0,r4
001e30  4288              CMP      r0,r1
001e32  dd16              BLE      |L1.7778|
001e34  f9b82032          LDRSH    r2,[r8,#0x32]  ; cntrl_stat
001e38  2a14              CMP      r2,#0x14
001e3a  dc12              BGT      |L1.7778|
001e3c  f898202f          LDRB     r2,[r8,#0x2f]  ; volt_region
001e40  2a01              CMP      r2,#1
001e42  d10e              BNE      |L1.7778|
001e44  f8b8207c          LDRH     r2,[r8,#0x7c]  ; volt_region_cnt
001e48  b95a              CBNZ     r2,|L1.7778|
;;;1991   		{
;;;1992   		volt_region=0;
001e4a  f888602f          STRB     r6,[r8,#0x2f]
;;;1993   		cntrl_stat=1000;
001e4e  f8a8b032          STRH     r11,[r8,#0x32]
;;;1994   		cntrl_stat_new=1000;
001e52  f8a8b048          STRH     r11,[r8,#0x48]
;;;1995   		cntrl_stat_old=1000;
001e56  f8a8b034          STRH     r11,[r8,#0x34]
;;;1996   		volt_region_cnt=110;
001e5a  f04f026e          MOV      r2,#0x6e
001e5e  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.7778|
;;;1997   		}
;;;1998   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001e62  4288              CMP      r0,r1
001e64  da29              BGE      |L1.7866|
001e66  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001e6a  4558              CMP      r0,r11
001e6c  db25              BLT      |L1.7866|
001e6e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001e72  bb10              CBNZ     r0,|L1.7866|
001e74  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001e78  b9f8              CBNZ     r0,|L1.7866|
;;;1999   		{
;;;2000   		volt_region=1;
001e7a  f04f0001          MOV      r0,#1
001e7e  f888002f          STRB     r0,[r8,#0x2f]
;;;2001   		cntrl_stat=10;
001e82  e012              B        |L1.7850|
                  |L1.7812|
                          DCD      ||area_number.25||
                  |L1.7816|
                          DCD      speedChrgBlckStat
                  |L1.7820|
                          DCD      sk_stat
                  |L1.7824|
                          DCD      FZ_T1
                  |L1.7828|
                          DCD      out_U
                  |L1.7832|
                          DCD      FZ_U1
                  |L1.7836|
                          DCD      Ib_ips_termokompensat
                  |L1.7840|
                          DCD      FZ_ISW12
                  |L1.7844|
                          DCD      FZ_T2
                  |L1.7848|
001ea8  e01a              B        |L1.7904|
                  |L1.7850|
001eaa  f8a84032          STRH     r4,[r8,#0x32]
;;;2002   		cntrl_stat_new=10;
001eae  f8a84048          STRH     r4,[r8,#0x48]
;;;2003   		cntrl_stat_old=10;
001eb2  f8a84034          STRH     r4,[r8,#0x34]
;;;2004   		volt_region_cnt=10;
001eb6  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.7866|
;;;2005   		}
;;;2006   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001eba  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001ebe  b110              CBZ      r0,|L1.7878|
;;;2007   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001ec0  2801              CMP      r0,#1
001ec2  d007              BEQ      |L1.7892|
001ec4  e00c              B        |L1.7904|
                  |L1.7878|
001ec6  2314              MOVS     r3,#0x14              ;2006
001ec8  2200              MOVS     r2,#0                 ;2006
001eca  2164              MOVS     r1,#0x64              ;2006
001ecc  20d2              MOVS     r0,#0xd2              ;2006
001ece  f7fffffe          BL       mess_send
001ed2  e005              B        |L1.7904|
                  |L1.7892|
001ed4  2314              MOVS     r3,#0x14
001ed6  2201              MOVS     r2,#1
001ed8  2164              MOVS     r1,#0x64
001eda  20d2              MOVS     r0,#0xd2
001edc  f7fffffe          BL       mess_send
                  |L1.7904|
;;;2008   	}
;;;2009   
;;;2010   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
001ee0  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001ee4  280c              CMP      r0,#0xc
001ee6  d123              BNE      |L1.7984|
;;;2011   	{
;;;2012   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001ee8  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001eec  280c              CMP      r0,#0xc
001eee  d102              BNE      |L1.7926|
001ef0  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001ef4  b908              CBNZ     r0,|L1.7930|
                  |L1.7926|
;;;2013   		{
;;;2014   		vz2_stat_cnt=10;
001ef6  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.7930|
;;;2015   		}
;;;2016   	vz2_stat_cnt--;
001efa  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001efe  f1a00001          SUB      r0,r0,#1
001f02  b200              SXTH     r0,r0
001f04  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2017   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f08  280a              CMP      r0,#0xa
001f0a  d001              BEQ      |L1.7952|
001f0c  2809              CMP      r0,#9
001f0e  d109              BNE      |L1.7972|
                  |L1.7952|
;;;2018   		{
;;;2019   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f10  f2af53f8          ADR      r3,|L1.6428|
001f14  f2af52e4          ADR      r2,|L1.6452|
001f18  f2af51d0          ADR      r1,|L1.6476|
001f1c  a0ff              ADR      r0,|L1.8988|
001f1e  9700              STR      r7,[sp,#0]
001f20  f7fffffe          BL       show_mess
                  |L1.7972|
;;;2020   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2021   					"      ВКЛЮЧЕН       ",
;;;2022   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2023   					5000);
;;;2024   		}
;;;2025   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f24  2314              MOVS     r3,#0x14
001f26  2200              MOVS     r2,#0
001f28  2164              MOVS     r1,#0x64
001f2a  20d2              MOVS     r0,#0xd2
001f2c  f7fffffe          BL       mess_send
                  |L1.7984|
;;;2026   	}
;;;2027   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
001f30  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001f34  280d              CMP      r0,#0xd
001f36  d12d              BNE      |L1.8084|
;;;2028   	{
;;;2029   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001f38  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001f3c  280d              CMP      r0,#0xd
001f3e  d102              BNE      |L1.8006|
001f40  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001f44  b908              CBNZ     r0,|L1.8010|
                  |L1.8006|
;;;2030   		{
;;;2031   		vz2_stat_cnt=10;
001f46  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8010|
;;;2032   		}
;;;2033   	vz2_stat_cnt--;
001f4a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001f4e  f1a00001          SUB      r0,r0,#1
001f52  b200              SXTH     r0,r0
001f54  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2034   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f58  280a              CMP      r0,#0xa
001f5a  d001              BEQ      |L1.8032|
001f5c  2809              CMP      r0,#9
001f5e  d109              BNE      |L1.8052|
                  |L1.8032|
;;;2035   		{
;;;2036   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f60  f6af3308          ADR      r3,|L1.5212|
001f64  f6af22f4          ADR      r2,|L1.5236|
001f68  f6af21e0          ADR      r1,|L1.5260|
001f6c  a0eb              ADR      r0,|L1.8988|
001f6e  9700              STR      r7,[sp,#0]
001f70  f7fffffe          BL       show_mess
                  |L1.8052|
;;;2037   					"    ЗАБЛОКИРОВАН    ",
;;;2038   					"     НЕИСПРАВНА     ",
;;;2039   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2040   					5000);
;;;2041   		}
;;;2042   	if(sk_stat[0]==1)
001f74  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f76  2801              CMP      r0,#1
001f78  d106              BNE      |L1.8072|
;;;2043   		{
;;;2044   		vz2_stat=vz2sWRK1;
001f7a  f8884007          STRB     r4,[r8,#7]
;;;2045   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001f7e  210a              MOVS     r1,#0xa
001f80  f44f70ca          MOV      r0,#0x194
001f84  f7fffffe          BL       lc640_write
                  |L1.8072|
;;;2046   		}
;;;2047   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f88  2314              MOVS     r3,#0x14
001f8a  2200              MOVS     r2,#0
001f8c  2164              MOVS     r1,#0x64
001f8e  20d2              MOVS     r0,#0xd2
001f90  f7fffffe          BL       mess_send
                  |L1.8084|
;;;2048   	}
;;;2049   
;;;2050   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
001f94  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001f98  280e              CMP      r0,#0xe
001f9a  d12c              BNE      |L1.8182|
;;;2051   	{
;;;2052   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001f9c  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001fa0  280e              CMP      r0,#0xe
001fa2  d102              BNE      |L1.8106|
001fa4  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001fa8  b908              CBNZ     r0,|L1.8110|
                  |L1.8106|
;;;2053   		{
;;;2054   		vz2_stat_cnt=10;
001faa  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8110|
;;;2055   		}
;;;2056   	vz2_stat_cnt--;
001fae  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001fb2  f1a00001          SUB      r0,r0,#1
001fb6  b200              SXTH     r0,r0
001fb8  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2057   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001fbc  280a              CMP      r0,#0xa
001fbe  d001              BEQ      |L1.8132|
001fc0  2809              CMP      r0,#9
001fc2  d108              BNE      |L1.8150|
                  |L1.8132|
;;;2058   		{
;;;2059   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001fc4  a3db              ADR      r3,|L1.9012|
001fc6  f2af6234          ADR      r2,|L1.6548|
001fca  f2af6120          ADR      r1,|L1.6572|
001fce  a0d3              ADR      r0,|L1.8988|
001fd0  9700              STR      r7,[sp,#0]
001fd2  f7fffffe          BL       show_mess
                  |L1.8150|
;;;2060   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2061   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2062   					"    ТУМБЛЕРА!!!     ",
;;;2063   					5000);
;;;2064   		}
;;;2065   	if(sk_stat[1]==1)
001fd6  7868              LDRB     r0,[r5,#1]  ; sk_stat
001fd8  2801              CMP      r0,#1
001fda  d106              BNE      |L1.8170|
;;;2066   		{
;;;2067   		vz2_stat=vz2sWRK1;
001fdc  f8884007          STRB     r4,[r8,#7]
;;;2068   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001fe0  210a              MOVS     r1,#0xa
001fe2  f44f70ca          MOV      r0,#0x194
001fe6  f7fffffe          BL       lc640_write
                  |L1.8170|
;;;2069   		}
;;;2070   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001fea  2314              MOVS     r3,#0x14
001fec  2200              MOVS     r2,#0
001fee  2164              MOVS     r1,#0x64
001ff0  20d2              MOVS     r0,#0xd2
001ff2  f7fffffe          BL       mess_send
                  |L1.8182|
;;;2071   	}
;;;2072   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
001ff6  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001ffa  2810              CMP      r0,#0x10
001ffc  d12d              BNE      |L1.8282|
;;;2073   	{
;;;2074   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001ffe  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002002  2810              CMP      r0,#0x10
002004  d102              BNE      |L1.8204|
002006  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00200a  b908              CBNZ     r0,|L1.8208|
                  |L1.8204|
;;;2075   		{
;;;2076   		vz2_stat_cnt=10;
00200c  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8208|
;;;2077   		}
;;;2078   	vz2_stat_cnt--;
002010  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002014  f1a00001          SUB      r0,r0,#1
002018  b200              SXTH     r0,r0
00201a  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2079   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00201e  280a              CMP      r0,#0xa
002020  d001              BEQ      |L1.8230|
002022  2809              CMP      r0,#9
002024  d109              BNE      |L1.8250|
                  |L1.8230|
;;;2080   		{
;;;2081   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002026  f6af33cc          ADR      r3,|L1.5212|
00202a  f6af32b8          ADR      r2,|L1.5236|
00202e  f6af31a4          ADR      r1,|L1.5260|
002032  a0ba              ADR      r0,|L1.8988|
002034  9700              STR      r7,[sp,#0]
002036  f7fffffe          BL       show_mess
                  |L1.8250|
;;;2082   					"    ЗАБЛОКИРОВАН    ",
;;;2083   					"     НЕИСПРАВНА     ",
;;;2084   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2085   					5000);
;;;2086   		}
;;;2087   	if(sk_stat[0]==1)
00203a  7828              LDRB     r0,[r5,#0]  ; sk_stat
00203c  2801              CMP      r0,#1
00203e  d106              BNE      |L1.8270|
;;;2088   		{
;;;2089   		vz2_stat=vz2sWRK2;
002040  f888a007          STRB     r10,[r8,#7]
;;;2090   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002044  210b              MOVS     r1,#0xb
002046  f44f70ca          MOV      r0,#0x194
00204a  f7fffffe          BL       lc640_write
                  |L1.8270|
;;;2091   		}
;;;2092   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00204e  2314              MOVS     r3,#0x14
002050  2200              MOVS     r2,#0
002052  2164              MOVS     r1,#0x64
002054  20d2              MOVS     r0,#0xd2
002056  f7fffffe          BL       mess_send
                  |L1.8282|
;;;2093   	}
;;;2094   
;;;2095   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
00205a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00205e  2811              CMP      r0,#0x11
002060  d12c              BNE      |L1.8380|
;;;2096   	{
;;;2097   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002062  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002066  2811              CMP      r0,#0x11
002068  d102              BNE      |L1.8304|
00206a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00206e  b908              CBNZ     r0,|L1.8308|
                  |L1.8304|
;;;2098   		{
;;;2099   		vz2_stat_cnt=10;
002070  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8308|
;;;2100   		}
;;;2101   	vz2_stat_cnt--;
002074  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002078  f1a00001          SUB      r0,r0,#1
00207c  b200              SXTH     r0,r0
00207e  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2102   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002082  280a              CMP      r0,#0xa
002084  d001              BEQ      |L1.8330|
002086  2809              CMP      r0,#9
002088  d108              BNE      |L1.8348|
                  |L1.8330|
;;;2103   		{
;;;2104   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00208a  a3aa              ADR      r3,|L1.9012|
00208c  f2af62fc          ADR      r2,|L1.6548|
002090  f2af61e8          ADR      r1,|L1.6572|
002094  a0a1              ADR      r0,|L1.8988|
002096  9700              STR      r7,[sp,#0]
002098  f7fffffe          BL       show_mess
                  |L1.8348|
;;;2105   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2106   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2107   					"    ТУМБЛЕРА!!!     ",
;;;2108   					5000);
;;;2109   		}
;;;2110   	if(sk_stat[1]==1)
00209c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00209e  2801              CMP      r0,#1
0020a0  d106              BNE      |L1.8368|
;;;2111   		{
;;;2112   		vz2_stat=vz2sWRK2;
0020a2  f888a007          STRB     r10,[r8,#7]
;;;2113   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0020a6  210b              MOVS     r1,#0xb
0020a8  f44f70ca          MOV      r0,#0x194
0020ac  f7fffffe          BL       lc640_write
                  |L1.8368|
;;;2114   		}
;;;2115   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020b0  2314              MOVS     r3,#0x14
0020b2  2200              MOVS     r2,#0
0020b4  2164              MOVS     r1,#0x64
0020b6  20d2              MOVS     r0,#0xd2
0020b8  f7fffffe          BL       mess_send
                  |L1.8380|
;;;2116   	}
;;;2117   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0020bc  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0020c0  280f              CMP      r0,#0xf
0020c2  d12f              BNE      |L1.8484|
;;;2118   	{
;;;2119   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020c4  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0020c8  280f              CMP      r0,#0xf
0020ca  d102              BNE      |L1.8402|
0020cc  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020d0  b908              CBNZ     r0,|L1.8406|
                  |L1.8402|
;;;2120   		{
;;;2121   		vz2_stat_cnt=10;
0020d2  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8406|
;;;2122   		}
;;;2123   	vz2_stat_cnt--;
0020d6  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020da  f1a00001          SUB      r0,r0,#1
0020de  b200              SXTH     r0,r0
0020e0  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2124   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020e4  280a              CMP      r0,#0xa
0020e6  d001              BEQ      |L1.8428|
0020e8  2809              CMP      r0,#9
0020ea  d10a              BNE      |L1.8450|
                  |L1.8428|
;;;2125   		{
;;;2126   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0020ec  f6af033c          ADR      r3,|L1.6324|
0020f0  f6af0228          ADR      r2,|L1.6348|
0020f4  f6af0114          ADR      r1,|L1.6372|
0020f8  f2af60c0          ADR      r0,|L1.6716|
0020fc  9700              STR      r7,[sp,#0]
0020fe  f7fffffe          BL       show_mess
                  |L1.8450|
;;;2127   					"      ТУМБЛЕР       ",
;;;2128   					"     ВЫСОКОГО       ",
;;;2129   					"    НАПРЯЖЕНИЯ      ",
;;;2130   					5000);
;;;2131   		}
;;;2132   	if(sk_stat[1]==0)
002102  7868              LDRB     r0,[r5,#1]  ; sk_stat
002104  b940              CBNZ     r0,|L1.8472|
;;;2133   		{
;;;2134   		vz2_stat=vz2sOFF;
002106  f8886007          STRB     r6,[r8,#7]
;;;2135   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00210a  2100              MOVS     r1,#0
00210c  f44f70ca          MOV      r0,#0x194
002110  f7fffffe          BL       lc640_write
;;;2136   		vz_stop();
002114  f7fffffe          BL       vz_stop
                  |L1.8472|
;;;2137   
;;;2138   		}
;;;2139   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002118  2314              MOVS     r3,#0x14
00211a  2200              MOVS     r2,#0
00211c  2164              MOVS     r1,#0x64
00211e  20d2              MOVS     r0,#0xd2
002120  f7fffffe          BL       mess_send
                  |L1.8484|
;;;2140   	}
;;;2141   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
002124  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;2142   	{
;;;2143   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2144   		{
;;;2145   		vz2_stat_cnt=10;
;;;2146   		}
;;;2147   	vz2_stat_cnt--;
;;;2148   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2149   		{
;;;2150   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002128  f64037b8          MOV      r7,#0xbb8
00212c  2812              CMP      r0,#0x12              ;2141
00212e  d13d              BNE      |L1.8620|
002130  f8980008          LDRB     r0,[r8,#8]            ;2143  ; vz2_stat_old
002134  2812              CMP      r0,#0x12              ;2143
002136  d102              BNE      |L1.8510|
002138  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2143  ; vz2_stat_cnt
00213c  b908              CBNZ     r0,|L1.8514|
                  |L1.8510|
00213e  f8a8407e          STRH     r4,[r8,#0x7e]         ;2145
                  |L1.8514|
002142  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2147  ; vz2_stat_cnt
002146  f1a00001          SUB      r0,r0,#1              ;2147
00214a  b200              SXTH     r0,r0                 ;2147
00214c  f8a8007e          STRH     r0,[r8,#0x7e]         ;2147
002150  280a              CMP      r0,#0xa               ;2148
002152  d001              BEQ      |L1.8536|
002154  2809              CMP      r0,#9                 ;2148
002156  d109              BNE      |L1.8556|
                  |L1.8536|
002158  f2af7380          ADR      r3,|L1.6620|
00215c  f2af726c          ADR      r2,|L1.6644|
002160  f2af7158          ADR      r1,|L1.6668|
002164  a079              ADR      r0,|L1.9036|
002166  9700              STR      r7,[sp,#0]
002168  f7fffffe          BL       show_mess
                  |L1.8556|
;;;2151   					"       ЗАРЯД        ",
;;;2152   					"      УСПЕШНО       ",
;;;2153   					"     ЗАВЕРШЕН       ",
;;;2154   					3000);
;;;2155   		}
;;;2156   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
00216c  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
002170  2806              CMP      r0,#6
002172  d001              BEQ      |L1.8568|
002174  2805              CMP      r0,#5
002176  d10a              BNE      |L1.8590|
                  |L1.8568|
;;;2157   		{
;;;2158   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002178  f6af03c8          ADR      r3,|L1.6324|
00217c  f6af02b4          ADR      r2,|L1.6348|
002180  f6af01a0          ADR      r1,|L1.6372|
002184  f2af704c          ADR      r0,|L1.6716|
002188  9700              STR      r7,[sp,#0]
00218a  f7fffffe          BL       show_mess
                  |L1.8590|
;;;2159   					"      ТУМБЛЕР       ",
;;;2160   					"     ВЫСОКОГО       ",
;;;2161   					"    НАПРЯЖЕНИЯ      ",
;;;2162   					3000);
;;;2163   		}
;;;2164   	if(sk_stat[1]==0)
00218e  7868              LDRB     r0,[r5,#1]  ; sk_stat
002190  b930              CBNZ     r0,|L1.8608|
;;;2165   		{
;;;2166   		vz2_stat=vz2sOFF;
002192  f8886007          STRB     r6,[r8,#7]
;;;2167   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002196  2100              MOVS     r1,#0
002198  f44f70ca          MOV      r0,#0x194
00219c  f7fffffe          BL       lc640_write
                  |L1.8608|
;;;2168   		}
;;;2169   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0021a0  2314              MOVS     r3,#0x14
0021a2  2200              MOVS     r2,#0
0021a4  2164              MOVS     r1,#0x64
0021a6  20d2              MOVS     r0,#0xd2
0021a8  f7fffffe          BL       mess_send
                  |L1.8620|
;;;2170   	}
;;;2171   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
0021ac  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0021b0  2813              CMP      r0,#0x13
0021b2  d13d              BNE      |L1.8752|
;;;2172   	{
;;;2173   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0021b4  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0021b8  2813              CMP      r0,#0x13
0021ba  d102              BNE      |L1.8642|
0021bc  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0021c0  b908              CBNZ     r0,|L1.8646|
                  |L1.8642|
;;;2174   		{
;;;2175   		vz2_stat_cnt=10;
0021c2  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8646|
;;;2176   		}
;;;2177   	vz2_stat_cnt--;
0021c6  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0021ca  f1a00001          SUB      r0,r0,#1
0021ce  b200              SXTH     r0,r0
0021d0  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2178   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021d4  280a              CMP      r0,#0xa
0021d6  d001              BEQ      |L1.8668|
0021d8  2809              CMP      r0,#9
0021da  d109              BNE      |L1.8688|
                  |L1.8668|
;;;2179   		{
;;;2180   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0021dc  f2af738c          ADR      r3,|L1.6740|
0021e0  f2af7278          ADR      r2,|L1.6764|
0021e4  f2af71dc          ADR      r1,|L1.6668|
0021e8  a058              ADR      r0,|L1.9036|
0021ea  9700              STR      r7,[sp,#0]
0021ec  f7fffffe          BL       show_mess
                  |L1.8688|
;;;2181   					"       ЗАРЯД        ",
;;;2182   					"     ПРЕКРАЩЕН      ",
;;;2183   					"                    ",
;;;2184   					3000);
;;;2185   		}
;;;2186   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0021f0  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
0021f4  2806              CMP      r0,#6
0021f6  d001              BEQ      |L1.8700|
0021f8  2805              CMP      r0,#5
0021fa  d10a              BNE      |L1.8722|
                  |L1.8700|
;;;2187   		{
;;;2188   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0021fc  f6af134c          ADR      r3,|L1.6324|
002200  f6af1238          ADR      r2,|L1.6348|
002204  f6af1124          ADR      r1,|L1.6372|
002208  f2af70d0          ADR      r0,|L1.6716|
00220c  9700              STR      r7,[sp,#0]
00220e  f7fffffe          BL       show_mess
                  |L1.8722|
;;;2189   					"      ТУМБЛЕР       ",
;;;2190   					"     ВЫСОКОГО       ",
;;;2191   					"    НАПРЯЖЕНИЯ      ",
;;;2192   					3000);
;;;2193   		}
;;;2194   	if(sk_stat[1]==0)
002212  7868              LDRB     r0,[r5,#1]  ; sk_stat
002214  b930              CBNZ     r0,|L1.8740|
;;;2195   		{
;;;2196   		vz2_stat=vz2sOFF;
002216  f8886007          STRB     r6,[r8,#7]
;;;2197   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00221a  2100              MOVS     r1,#0
00221c  f44f70ca          MOV      r0,#0x194
002220  f7fffffe          BL       lc640_write
                  |L1.8740|
;;;2198   		}
;;;2199   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002224  2314              MOVS     r3,#0x14
002226  2200              MOVS     r2,#0
002228  2164              MOVS     r1,#0x64
00222a  20d2              MOVS     r0,#0xd2
00222c  f7fffffe          BL       mess_send
                  |L1.8752|
;;;2200   	}
;;;2201   vz2_stat_old=vz2_stat;
002230  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002234  f8880008          STRB     r0,[r8,#8]
;;;2202   
;;;2203   }
002238  e8bd8ff8          POP      {r3-r11,pc}
;;;2204   
                          ENDP

                  vz2_start PROC
;;;2206   //старт уравнительног заряда
;;;2207   char vz2_start(char hour)
00223c  b510              PUSH     {r4,lr}
;;;2208   {          
;;;2209   char out;
;;;2210   out=0;
00223e  f04f0000          MOV      r0,#0
;;;2211   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
002242  4948              LDR      r1,|L1.9060|
002244  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
002248  2a00              CMP      r2,#0
00224a  d110              BNE      |L1.8814|
00224c  4a46              LDR      r2,|L1.9064|
00224e  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
002250  2a01              CMP      r2,#1
002252  d00c              BEQ      |L1.8814|
002254  794a              LDRB     r2,[r1,#5]  ; vz1_stat
002256  2a00              CMP      r2,#0
002258  d109              BNE      |L1.8814|
;;;2212   	{
;;;2213   	if(vz1_stat==vz1sOFF)
;;;2214   		{
;;;2215   		vz2_stat=vz2sSTEP1;
00225a  f04f0001          MOV      r0,#1
00225e  71c8              STRB     r0,[r1,#7]
;;;2216   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
002260  4601              MOV      r1,r0
002262  f44f70ca          MOV      r0,#0x194
002266  f7fffffe          BL       lc640_write
;;;2217   		out=1;
00226a  f04f0001          MOV      r0,#1
                  |L1.8814|
;;;2218   		
;;;2219   		}
;;;2220   /*	spc_stat=spcVZ;
;;;2221   	__ee_spc_stat=spcVZ; 
;;;2222   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2223   	vz_cnt_h=hour;
;;;2224   	__ee_vz_cnt=hour*60;
;;;2225   	if(hour==0)__ee_vz_cnt=30;
;;;2226   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2227   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2228   	vz_cnt_h_=0;
;;;2229   	vz_cnt_s=0;
;;;2230   	vz_cnt_s_=0;
;;;2231   	
;;;2232   		*/
;;;2233   	}
;;;2234   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2235   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2236   //plazma=out;	
;;;2237   return out;
;;;2238   }
00226e  bd10              POP      {r4,pc}
;;;2239   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2240   //стоп формовочного заряда
;;;2241   void vz2_stop(void)
002270  483c              LDR      r0,|L1.9060|
;;;2242   {
;;;2243   if(vz2_stat!=vz2sOFF)
002272  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
002274  2900              CMP      r1,#0
002276  d006              BEQ      |L1.8838|
;;;2244   	{
;;;2245   	vz2_stat=vz2sSTOP;
002278  f04f0113          MOV      r1,#0x13
00227c  71c1              STRB     r1,[r0,#7]
;;;2246   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
00227e  f44f70ca          MOV      r0,#0x194
002282  f7ffbffe          B.W      lc640_write
                  |L1.8838|
;;;2247   	}
;;;2248   }
002286  4770              BX       lr
;;;2249   
                          ENDP

                  kb_init PROC
;;;2250   //-----------------------------------------------
;;;2251   void kb_init(void)
002288  4838              LDR      r0,|L1.9068|
;;;2252   {
;;;2253   main_kb_cnt=(TBAT*60)-60/*120*/;
00228a  f06f013b          MVN      r1,#0x3b
00228e  8800              LDRH     r0,[r0,#0]  ; TBAT
002290  ebc01000          RSB      r0,r0,r0,LSL #4
002294  eb010080          ADD      r0,r1,r0,LSL #2
002298  4932              LDR      r1,|L1.9060|
00229a  f8a10052          STRH     r0,[r1,#0x52]
;;;2254   }
00229e  4770              BX       lr
;;;2255   
                          ENDP

                  kb_hndl PROC
;;;2256   //-----------------------------------------------
;;;2257   void kb_hndl(void)
0022a0  e92d5ff0          PUSH     {r4-r12,lr}
;;;2258   {
;;;2259   
;;;2260   static signed short ibat[2],ibat_[2];
;;;2261   #ifdef UKU_TELECORE2015
;;;2262   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2263   #else 
;;;2264   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
0022a4  f8df80bc          LDR      r8,|L1.9060|
;;;2265   #endif
;;;2266   	{
;;;2267   	main_kb_cnt=0;
;;;2268   	
;;;2269   	kb_start[0]=0;
;;;2270   	kb_start[1]=0;
;;;2271   	kb_start_ips=0;
;;;2272   
;;;2273   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2274   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2275   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2276   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
0022a8  f8dfa0c4          LDR      r10,|L1.9072|
0022ac  2500              MOVS     r5,#0                 ;2264
0022ae  f8b80052          LDRH     r0,[r8,#0x52]         ;2264  ; main_kb_cnt
0022b2  4e30              LDR      r6,|L1.9076|
0022b4  1c40              ADDS     r0,r0,#1              ;2264
0022b6  b201              SXTH     r1,r0                 ;2264
0022b8  482c              LDR      r0,|L1.9068|
0022ba  f8a81052          STRH     r1,[r8,#0x52]         ;2264
0022be  f8df90b8          LDR      r9,|L1.9080|
0022c2  f9b00000          LDRSH    r0,[r0,#0]            ;2264  ; TBAT
;;;2277   #endif	
;;;2278   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2279   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2280   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2281   #endif
;;;2282   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2283    
;;;2284   		{
;;;2285   		kb_start[0]=0;
;;;2286   		kb_start[1]=0;
;;;2287   		kb_start_ips=0;
;;;2288   		}
;;;2289   
;;;2290   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2291   		{
;;;2292   		kb_cnt_1lev=10;
0022c6  270a              MOVS     r7,#0xa
0022c8  ebc01200          RSB      r2,r0,r0,LSL #4       ;2264
0022cc  f04f0b01          MOV      r11,#1                ;2273
0022d0  f1080458          ADD      r4,r8,#0x58           ;2269
0022d4  ebb10f82          CMP      r1,r2,LSL #2          ;2264
0022d8  db7e              BLT      |L1.9176|
0022da  2800              CMP      r0,#0                 ;2264
0022dc  d07c              BEQ      |L1.9176|
0022de  f8a85052          STRH     r5,[r8,#0x52]         ;2267
0022e2  7025              STRB     r5,[r4,#0]            ;2269
0022e4  7065              STRB     r5,[r4,#1]            ;2270
0022e6  f888501d          STRB     r5,[r8,#0x1d]         ;2271
0022ea  4824              LDR      r0,|L1.9084|
0022ec  7800              LDRB     r0,[r0,#0]            ;2273  ; BAT_IS_ON
0022ee  2855              CMP      r0,#0x55              ;2273
0022f0  d111              BNE      |L1.8982|
0022f2  f9b60002          LDRSH    r0,[r6,#2]            ;2273  ; bat
0022f6  2850              CMP      r0,#0x50              ;2273
0022f8  dd0d              BLE      |L1.8982|
0022fa  f9b60008          LDRSH    r0,[r6,#8]            ;2273  ; bat
0022fe  f7fffffe          BL       abs
002302  f9b91000          LDRSH    r1,[r9,#0]            ;2273  ; IKB
002306  4288              CMP      r0,r1                 ;2273
002308  db03              BLT      |L1.8978|
00230a  f896003d          LDRB     r0,[r6,#0x3d]         ;2273  ; bat
00230e  07c0              LSLS     r0,r0,#31             ;2273
002310  d001              BEQ      |L1.8982|
                  |L1.8978|
002312  f884b000          STRB     r11,[r4,#0]           ;2273
                  |L1.8982|
002316  4819              LDR      r0,|L1.9084|
002318  7840              LDRB     r0,[r0,#1]            ;2274  ; BAT_IS_ON
00231a  e031              B        |L1.9088|
                  |L1.8988|
00231c  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
002320  cccec2ce
002324  d7cddbc9
002328  20c7c0  
00232b  d0dfc420          DCB      208,223,196,"  ",0
00232f  2000    
002331  00                DCB      0
002332  00                DCB      0
002333  00                DCB      0
                  |L1.9012|
002334  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
002338  d2d3ccc1
00233c  cbc5d0c0
002340  21212120
002344  20202020
002348  00      
002349  00                DCB      0
00234a  00                DCB      0
00234b  00                DCB      0
                  |L1.9036|
00234c  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
002350  d4ced0cc
002354  cec2ced7
002358  cddbc920
00235c  202020  
00235f  2000              DCB      " ",0
002361  00                DCB      0
002362  00                DCB      0
002363  00                DCB      0
                  |L1.9060|
                          DCD      ||area_number.25||
                  |L1.9064|
                          DCD      speedChrgBlckStat
                  |L1.9068|
                          DCD      TBAT
                  |L1.9072|
                          DCD      Ib_ips_termokompensat
                  |L1.9076|
                          DCD      bat
                  |L1.9080|
                          DCD      IKB
                  |L1.9084|
                          DCD      BAT_IS_ON
                  |L1.9088|
002380  2855              CMP      r0,#0x55              ;2274
002382  d111              BNE      |L1.9128|
002384  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2274  ; bat
002388  2850              CMP      r0,#0x50              ;2274
00238a  dd0d              BLE      |L1.9128|
00238c  f9b60054          LDRSH    r0,[r6,#0x54]         ;2274  ; bat
002390  f7fffffe          BL       abs
002394  f9b91000          LDRSH    r1,[r9,#0]            ;2274  ; IKB
002398  4288              CMP      r0,r1                 ;2274
00239a  db03              BLT      |L1.9124|
00239c  f8960089          LDRB     r0,[r6,#0x89]         ;2274  ; bat
0023a0  07c0              LSLS     r0,r0,#31             ;2274
0023a2  d001              BEQ      |L1.9128|
                  |L1.9124|
0023a4  f884b001          STRB     r11,[r4,#1]           ;2274
                  |L1.9128|
0023a8  48ff              LDR      r0,|L1.10152|
0023aa  7800              LDRB     r0,[r0,#0]            ;2276  ; ips_bat_av_vzvod
0023ac  b970              CBNZ     r0,|L1.9164|
0023ae  f9ba0000          LDRSH    r0,[r10,#0]           ;2276  ; Ib_ips_termokompensat
0023b2  f7fffffe          BL       abs
0023b6  f9b91000          LDRSH    r1,[r9,#0]            ;2276  ; IKB
0023ba  4288              CMP      r0,r1                 ;2276
0023bc  db04              BLT      |L1.9160|
0023be  48fb              LDR      r0,|L1.10156|
0023c0  f890003d          LDRB     r0,[r0,#0x3d]         ;2276  ; bat_ips
0023c4  07c0              LSLS     r0,r0,#31             ;2276
0023c6  d001              BEQ      |L1.9164|
                  |L1.9160|
0023c8  f888b01d          STRB     r11,[r8,#0x1d]        ;2276
                  |L1.9164|
0023cc  48f8              LDR      r0,|L1.10160|
0023ce  7800              LDRB     r0,[r0,#0]            ;2278  ; net_av
0023d0  b9a8              CBNZ     r0,|L1.9214|
0023d2  f898001e          LDRB     r0,[r8,#0x1e]         ;2278  ; num_of_wrks_bps
0023d6  e000              B        |L1.9178|
                  |L1.9176|
0023d8  e021              B        |L1.9246|
                  |L1.9178|
0023da  b180              CBZ      r0,|L1.9214|
0023dc  f8980023          LDRB     r0,[r8,#0x23]         ;2278  ; spc_stat
0023e0  b108              CBZ      r0,|L1.9190|
0023e2  2802              CMP      r0,#2                 ;2278
0023e4  d10b              BNE      |L1.9214|
                  |L1.9190|
0023e6  f8980005          LDRB     r0,[r8,#5]            ;2280  ; vz1_stat
0023ea  f8981007          LDRB     r1,[r8,#7]            ;2280  ; vz2_stat
0023ee  4308              ORRS     r0,r0,r1              ;2280
0023f0  d002              BEQ      |L1.9208|
0023f2  48f0              LDR      r0,|L1.10164|
0023f4  8800              LDRH     r0,[r0,#0]            ;2280  ; SMART_SPC
0023f6  b910              CBNZ     r0,|L1.9214|
                  |L1.9208|
0023f8  48ef              LDR      r0,|L1.10168|
0023fa  7800              LDRB     r0,[r0,#0]            ;2282  ; sp_ch_stat
0023fc  b118              CBZ      r0,|L1.9222|
                  |L1.9214|
0023fe  7025              STRB     r5,[r4,#0]            ;2285
002400  7065              STRB     r5,[r4,#1]            ;2286
002402  f888501d          STRB     r5,[r8,#0x1d]         ;2287
                  |L1.9222|
002406  7820              LDRB     r0,[r4,#0]            ;2290  ; kb_start
002408  2801              CMP      r0,#1                 ;2290
00240a  d01e              BEQ      |L1.9290|
00240c  7860              LDRB     r0,[r4,#1]            ;2290  ; kb_start
00240e  2801              CMP      r0,#1                 ;2290
002410  d01b              BEQ      |L1.9290|
002412  f898001d          LDRB     r0,[r8,#0x1d]         ;2290  ; kb_start_ips
002416  2801              CMP      r0,#1                 ;2290
002418  d017              BEQ      |L1.9290|
;;;2293   		}
;;;2294   	else kb_cnt_1lev=0;
00241a  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9246|
;;;2295   	}
;;;2296   
;;;2297   if(kb_cnt_1lev)
00241e  4641              MOV      r1,r8
002420  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2298   	{
;;;2299   	kb_cnt_1lev--;
;;;2300   
;;;2301   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2302   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2303   
;;;2304   
;;;2305   	if(kb_cnt_1lev==5)
;;;2306   		{
;;;2307   		ibat[0]=abs(bat[0]._Ib);
002424  f8df8394          LDR      r8,|L1.10172|
002428  2800              CMP      r0,#0                 ;2297
00242a  d07e              BEQ      |L1.9514|
00242c  f1a00001          SUB      r0,r0,#1              ;2299
002430  b200              SXTH     r0,r0                 ;2299
002432  468b              MOV      r11,r1                ;2299
002434  f8a10054          STRH     r0,[r1,#0x54]         ;2299
002438  2805              CMP      r0,#5                 ;2301
00243a  dd09              BLE      |L1.9296|
00243c  230f              MOVS     r3,#0xf               ;2301
00243e  221e              MOVS     r2,#0x1e              ;2301
002440  2164              MOVS     r1,#0x64              ;2301
002442  20e1              MOVS     r0,#0xe1              ;2301
002444  f7fffffe          BL       mess_send
002448  e00a              B        |L1.9312|
                  |L1.9290|
00244a  f8a87054          STRH     r7,[r8,#0x54]         ;2292
00244e  e7e6              B        |L1.9246|
                  |L1.9296|
002450  2800              CMP      r0,#0                 ;2302
002452  dd05              BLE      |L1.9312|
002454  230f              MOVS     r3,#0xf               ;2302
002456  221e              MOVS     r2,#0x1e              ;2302
002458  2169              MOVS     r1,#0x69              ;2302
00245a  20e1              MOVS     r0,#0xe1              ;2302
00245c  f7fffffe          BL       mess_send
                  |L1.9312|
002460  f8bb0054          LDRH     r0,[r11,#0x54]        ;2305  ; kb_cnt_1lev
002464  2805              CMP      r0,#5                 ;2305
002466  d111              BNE      |L1.9356|
002468  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00246c  f7fffffe          BL       abs
002470  f8a80000          STRH     r0,[r8,#0]
;;;2308   		ibat[1]=abs(bat[1]._Ib);
002474  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
002478  f7fffffe          BL       abs
00247c  f8a80002          STRH     r0,[r8,#2]
;;;2309   		ibat_ips=abs(Ib_ips_termokompensat);
002480  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
002484  f7fffffe          BL       abs
002488  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9356|
;;;2310   		}
;;;2311   	
;;;2312   	if(kb_cnt_1lev==0)
00248c  48cb              LDR      r0,|L1.10172|
00248e  3894              SUBS     r0,r0,#0x94
002490  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
002494  2800              CMP      r0,#0
002496  d158              BNE      |L1.9546|
;;;2313   		{
;;;2314   		ibat_[0]=abs(bat[0]._Ib);
002498  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00249c  f7fffffe          BL       abs
0024a0  f8dfb318          LDR      r11,|L1.10172|
0024a4  f10b0b04          ADD      r11,r11,#4
0024a8  f8ab0000          STRH     r0,[r11,#0]
;;;2315   		ibat_[1]=abs(bat[1]._Ib);
0024ac  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0024b0  f7fffffe          BL       abs
0024b4  f8ab0002          STRH     r0,[r11,#2]
;;;2316   		ibat_ips_=abs(Ib_ips_termokompensat);
0024b8  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0024bc  f7fffffe          BL       abs
0024c0  f1ab0a98          SUB      r10,r11,#0x98
0024c4  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2317   
;;;2318   		kb_cnt_2lev=0;
0024c8  f8aa5056          STRH     r5,[r10,#0x56]
;;;2319   
;;;2320   
;;;2321   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0024cc  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0024d0  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0024d4  4408              ADD      r0,r0,r1
0024d6  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0024da  4288              CMP      r0,r1
0024dc  da02              BGE      |L1.9444|
0024de  7820              LDRB     r0,[r4,#0]  ; kb_start
0024e0  2801              CMP      r0,#1
0024e2  d034              BEQ      |L1.9550|
                  |L1.9444|
;;;2322   			{
;;;2323   			kb_cnt_2lev=10;  
;;;2324   			}
;;;2325   		else if(bat[0]._Ub>200)
0024e4  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0024e8  28c8              CMP      r0,#0xc8
0024ea  dd04              BLE      |L1.9462|
;;;2326   			{
;;;2327   			kb_start[0]=0;
0024ec  7025              STRB     r5,[r4,#0]
;;;2328   			avar_bat_hndl(0,0);
0024ee  2100              MOVS     r1,#0
0024f0  4608              MOV      r0,r1
0024f2  f7fffffe          BL       avar_bat_hndl
                  |L1.9462|
;;;2329   			}
;;;2330   		
;;;2331   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0024f6  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0024fa  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0024fe  4408              ADD      r0,r0,r1
002500  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002504  4288              CMP      r0,r1
002506  da02              BGE      |L1.9486|
002508  7860              LDRB     r0,[r4,#1]  ; kb_start
00250a  2801              CMP      r0,#1
00250c  d022              BEQ      |L1.9556|
                  |L1.9486|
;;;2332   			{
;;;2333   			kb_cnt_2lev=10;     
;;;2334   			}
;;;2335   		else  if(bat[1]._Ub>200)
00250e  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
002512  28c8              CMP      r0,#0xc8
002514  dd04              BLE      |L1.9504|
;;;2336   			{
;;;2337   			kb_start[1]=0;
002516  7065              STRB     r5,[r4,#1]
;;;2338   			avar_bat_hndl(1,0);
002518  2100              MOVS     r1,#0
00251a  2001              MOVS     r0,#1
00251c  f7fffffe          BL       avar_bat_hndl
                  |L1.9504|
;;;2339   			}
;;;2340   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2341   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
002520  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002524  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
002528  e000              B        |L1.9516|
                  |L1.9514|
00252a  e01c              B        |L1.9574|
                  |L1.9516|
00252c  4408              ADD      r0,r0,r1
00252e  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002532  4288              CMP      r0,r1
002534  da09              BGE      |L1.9546|
002536  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
00253a  2801              CMP      r0,#1
00253c  d105              BNE      |L1.9546|
;;;2342   			{
;;;2343   			if(KB_ALGORITM==1)
00253e  48a0              LDR      r0,|L1.10176|
002540  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
002542  2801              CMP      r0,#1
002544  d009              BEQ      |L1.9562|
;;;2344   				{
;;;2345   				avar_bat_ips_hndl(1);
;;;2346   				kb_start_ips=0;
;;;2347   				}
;;;2348   			else
;;;2349   				{
;;;2350   				kb_cnt_2lev=10;     
002546  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9546|
;;;2351   				}
;;;2352   			}
;;;2353   #endif
;;;2354   		}	
;;;2355   
;;;2356   
;;;2357   	}
;;;2358   else if(kb_cnt_2lev)
;;;2359   	{
;;;2360   	kb_cnt_2lev--;
;;;2361   
;;;2362   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2363   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2364   
;;;2365   
;;;2366   	if(kb_cnt_2lev==5)
;;;2367   		{
;;;2368   		ibat[0]=abs(bat[0]._Ib);
;;;2369   		ibat[1]=abs(bat[1]._Ib);
;;;2370   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2371   		}
;;;2372   	
;;;2373   	if(kb_cnt_2lev==0)
;;;2374   		{
;;;2375   		ibat_[0]=abs(bat[0]._Ib);
;;;2376   		ibat_[1]=abs(bat[1]._Ib);
;;;2377   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2378   
;;;2379   		kb_full_ver=0;
;;;2380   
;;;2381   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2382   			{
;;;2383   			kb_full_ver=1;  
;;;2384   			}
;;;2385   		else if(bat[0]._Ub>200)			
;;;2386   			{
;;;2387   			kb_start[0]=0;
;;;2388   			avar_bat_hndl(0,0);
;;;2389   			}
;;;2390   
;;;2391   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2392   			{
;;;2393   			kb_full_ver=1;     
;;;2394   			}
;;;2395   		else	if(bat[1]._Ub>200)		
;;;2396   			{
;;;2397   			kb_start[1]=0;
;;;2398   			avar_bat_hndl(1,0);
;;;2399   			}
;;;2400   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2401   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2402   			{
;;;2403   			if(KB_ALGORITM==2)
;;;2404   				{
;;;2405   				avar_bat_ips_hndl(1);
;;;2406   				kb_start_ips=0;
;;;2407   				}
;;;2408   			else
;;;2409   				{
;;;2410   				kb_full_ver=1;     
;;;2411   				}
;;;2412   			}
;;;2413   #endif
;;;2414   		}	
;;;2415   	}
;;;2416   
;;;2417   else if(kb_full_ver)
;;;2418   	{
;;;2419   	
;;;2420   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2421   
;;;2422   	if( abs(bat[0]._Ib) > IKB ) 
;;;2423   		{
;;;2424   		if(kb_start[0]==1)
;;;2425   			{
;;;2426   			kb_start[0]=0;
;;;2427   			avar_bat_hndl(0,0);
;;;2428   			}
;;;2429   		}
;;;2430   
;;;2431   	if( abs(bat[1]._Ib) > IKB ) 
;;;2432   		{
;;;2433   		if(kb_start[1]==1)
;;;2434   			{
;;;2435   			kb_start[1]=0;
;;;2436   			avar_bat_hndl(1,0);
;;;2437   			}
;;;2438   		}
;;;2439   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2440   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2441   		{
;;;2442   		if(kb_start_ips==1)
;;;2443   			{
;;;2444   			kb_start_ips=0;
;;;2445   			avar_bat_ips_hndl(0);
;;;2446   			}
;;;2447   		}
;;;2448   #endif
;;;2449   
;;;2450   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2451   		{
;;;2452   		kb_full_ver=0;
;;;2453   		}
;;;2454   
;;;2455   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2456   		{
;;;2457   		kb_full_ver=0;
;;;2458   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2459   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2460   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2461   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2462   #endif
;;;2463   		}
;;;2464   	}
;;;2465   
;;;2466   }
00254a  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9550|
00254e  f8aa7056          STRH     r7,[r10,#0x56]        ;2323
002552  e7d0              B        |L1.9462|
                  |L1.9556|
002554  f8aa7056          STRH     r7,[r10,#0x56]        ;2333
002558  e7e2              B        |L1.9504|
                  |L1.9562|
00255a  2001              MOVS     r0,#1                 ;2345
00255c  f7fffffe          BL       avar_bat_ips_hndl
002560  f88a501d          STRB     r5,[r10,#0x1d]        ;2346
                  |L1.9572|
002564  e7f1              B        |L1.9546|
                  |L1.9574|
002566  f9b10056          LDRSH    r0,[r1,#0x56]         ;2358  ; kb_cnt_2lev
00256a  b3f0              CBZ      r0,|L1.9706|
00256c  f1a00001          SUB      r0,r0,#1              ;2360
002570  b200              SXTH     r0,r0                 ;2360
002572  460f              MOV      r7,r1                 ;2360
002574  f8a10056          STRH     r0,[r1,#0x56]         ;2360
002578  2805              CMP      r0,#5                 ;2362
00257a  dd06              BLE      |L1.9610|
00257c  230f              MOVS     r3,#0xf               ;2362
00257e  22c8              MOVS     r2,#0xc8              ;2362
002580  2164              MOVS     r1,#0x64              ;2362
002582  20e1              MOVS     r0,#0xe1              ;2362
002584  f7fffffe          BL       mess_send
002588  e007              B        |L1.9626|
                  |L1.9610|
00258a  2800              CMP      r0,#0                 ;2363
00258c  dd05              BLE      |L1.9626|
00258e  230f              MOVS     r3,#0xf               ;2363
002590  22c8              MOVS     r2,#0xc8              ;2363
002592  2169              MOVS     r1,#0x69              ;2363
002594  20e1              MOVS     r0,#0xe1              ;2363
002596  f7fffffe          BL       mess_send
                  |L1.9626|
00259a  f8b70056          LDRH     r0,[r7,#0x56]         ;2366  ; kb_cnt_2lev
00259e  2805              CMP      r0,#5                 ;2366
0025a0  d111              BNE      |L1.9670|
0025a2  f9b60008          LDRSH    r0,[r6,#8]            ;2368  ; bat
0025a6  f7fffffe          BL       abs
0025aa  f8a80000          STRH     r0,[r8,#0]            ;2368
0025ae  f9b60054          LDRSH    r0,[r6,#0x54]         ;2369  ; bat
0025b2  f7fffffe          BL       abs
0025b6  f8a80002          STRH     r0,[r8,#2]            ;2369
0025ba  f9ba0000          LDRSH    r0,[r10,#0]           ;2370  ; Ib_ips_termokompensat
0025be  f7fffffe          BL       abs
0025c2  f8a7005a          STRH     r0,[r7,#0x5a]         ;2370
                  |L1.9670|
0025c6  487d              LDR      r0,|L1.10172|
0025c8  3894              SUBS     r0,r0,#0x94           ;2373
0025ca  f8b00056          LDRH     r0,[r0,#0x56]         ;2373  ; kb_cnt_2lev
0025ce  2800              CMP      r0,#0                 ;2373
                  |L1.9680|
0025d0  d1bb              BNE      |L1.9546|
0025d2  f9b60008          LDRSH    r0,[r6,#8]            ;2375  ; bat
0025d6  f7fffffe          BL       abs
0025da  4f78              LDR      r7,|L1.10172|
0025dc  1d3f              ADDS     r7,r7,#4              ;2375
0025de  8038              STRH     r0,[r7,#0]            ;2375
0025e0  f9b60054          LDRSH    r0,[r6,#0x54]         ;2376  ; bat
0025e4  f7fffffe          BL       abs
0025e8  e000              B        |L1.9708|
                  |L1.9706|
0025ea  e055              B        |L1.9880|
                  |L1.9708|
0025ec  8078              STRH     r0,[r7,#2]            ;2376
0025ee  f9ba0000          LDRSH    r0,[r10,#0]           ;2377  ; Ib_ips_termokompensat
0025f2  f7fffffe          BL       abs
0025f6  f1a70a98          SUB      r10,r7,#0x98          ;2377
0025fa  f8aa005c          STRH     r0,[r10,#0x5c]        ;2377
0025fe  f88a501c          STRB     r5,[r10,#0x1c]        ;2379
002602  f9b80000          LDRSH    r0,[r8,#0]            ;2381  ; ibat
002606  f9b71000          LDRSH    r1,[r7,#0]            ;2381  ; ibat_
00260a  4408              ADD      r0,r0,r1              ;2381
00260c  f9b91000          LDRSH    r1,[r9,#0]            ;2381  ; IKB
002610  4288              CMP      r0,r1                 ;2381
002612  da02              BGE      |L1.9754|
002614  7820              LDRB     r0,[r4,#0]            ;2381  ; kb_start
002616  2801              CMP      r0,#1                 ;2381
002618  d032              BEQ      |L1.9856|
                  |L1.9754|
00261a  f9b60002          LDRSH    r0,[r6,#2]            ;2385  ; bat
00261e  28c8              CMP      r0,#0xc8              ;2385
002620  dd04              BLE      |L1.9772|
002622  7025              STRB     r5,[r4,#0]            ;2387
002624  2100              MOVS     r1,#0                 ;2388
002626  4608              MOV      r0,r1                 ;2388
002628  f7fffffe          BL       avar_bat_hndl
                  |L1.9772|
00262c  f9b80002          LDRSH    r0,[r8,#2]            ;2391  ; ibat
002630  f9b71002          LDRSH    r1,[r7,#2]            ;2391  ; ibat_
002634  4408              ADD      r0,r0,r1              ;2391
002636  f9b91000          LDRSH    r1,[r9,#0]            ;2391  ; IKB
00263a  4288              CMP      r0,r1                 ;2391
00263c  da02              BGE      |L1.9796|
00263e  7860              LDRB     r0,[r4,#1]            ;2391  ; kb_start
002640  2801              CMP      r0,#1                 ;2391
002642  d020              BEQ      |L1.9862|
                  |L1.9796|
002644  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2395  ; bat
002648  28c8              CMP      r0,#0xc8              ;2395
00264a  dd04              BLE      |L1.9814|
00264c  7065              STRB     r5,[r4,#1]            ;2397
00264e  2100              MOVS     r1,#0                 ;2398
002650  2001              MOVS     r0,#1                 ;2398
002652  f7fffffe          BL       avar_bat_hndl
                  |L1.9814|
002656  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2401  ; ibat_ips
00265a  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2401  ; ibat_ips_
00265e  4408              ADD      r0,r0,r1              ;2401
002660  f9b91000          LDRSH    r1,[r9,#0]            ;2401  ; IKB
002664  4288              CMP      r0,r1                 ;2401
002666  f6bfaf7d          BGE      |L1.9572|
00266a  f89a001d          LDRB     r0,[r10,#0x1d]        ;2401  ; kb_start_ips
00266e  2801              CMP      r0,#1                 ;2401
002670  d1ae              BNE      |L1.9680|
002672  4853              LDR      r0,|L1.10176|
002674  8800              LDRH     r0,[r0,#0]            ;2403  ; KB_ALGORITM
002676  2802              CMP      r0,#2                 ;2403
002678  d008              BEQ      |L1.9868|
00267a  f88ab01c          STRB     r11,[r10,#0x1c]       ;2410
                  |L1.9854|
00267e  e764              B        |L1.9546|
                  |L1.9856|
002680  f88ab01c          STRB     r11,[r10,#0x1c]       ;2383
002684  e7d2              B        |L1.9772|
                  |L1.9862|
002686  f88ab01c          STRB     r11,[r10,#0x1c]       ;2393
00268a  e7e4              B        |L1.9814|
                  |L1.9868|
00268c  2001              MOVS     r0,#1                 ;2405
00268e  f7fffffe          BL       avar_bat_ips_hndl
002692  f88a501d          STRB     r5,[r10,#0x1d]        ;2406
002696  e758              B        |L1.9546|
                  |L1.9880|
002698  7f08              LDRB     r0,[r1,#0x1c]         ;2417  ; kb_full_ver
00269a  4688              MOV      r8,r1                 ;2417
00269c  2800              CMP      r0,#0                 ;2417
00269e  d0ee              BEQ      |L1.9854|
0026a0  230f              MOVS     r3,#0xf               ;2420
0026a2  2200              MOVS     r2,#0                 ;2420
0026a4  216e              MOVS     r1,#0x6e              ;2420
0026a6  20e1              MOVS     r0,#0xe1              ;2420
0026a8  f7fffffe          BL       mess_send
0026ac  f9b60008          LDRSH    r0,[r6,#8]            ;2422  ; bat
0026b0  f7fffffe          BL       abs
0026b4  f9b91000          LDRSH    r1,[r9,#0]            ;2422  ; IKB
0026b8  4288              CMP      r0,r1                 ;2422
0026ba  dd07              BLE      |L1.9932|
0026bc  7820              LDRB     r0,[r4,#0]            ;2424  ; kb_start
0026be  2801              CMP      r0,#1                 ;2424
0026c0  d104              BNE      |L1.9932|
0026c2  7025              STRB     r5,[r4,#0]            ;2426
0026c4  2100              MOVS     r1,#0                 ;2427
0026c6  4608              MOV      r0,r1                 ;2427
0026c8  f7fffffe          BL       avar_bat_hndl
                  |L1.9932|
0026cc  f9b60054          LDRSH    r0,[r6,#0x54]         ;2431  ; bat
0026d0  f7fffffe          BL       abs
0026d4  f9b91000          LDRSH    r1,[r9,#0]            ;2431  ; IKB
0026d8  4288              CMP      r0,r1                 ;2431
0026da  dd06              BLE      |L1.9962|
0026dc  7860              LDRB     r0,[r4,#1]            ;2433  ; kb_start
0026de  2801              CMP      r0,#1                 ;2433
0026e0  d103              BNE      |L1.9962|
0026e2  7065              STRB     r5,[r4,#1]            ;2435
0026e4  2100              MOVS     r1,#0                 ;2436
0026e6  f7fffffe          BL       avar_bat_hndl
                  |L1.9962|
0026ea  f9ba0000          LDRSH    r0,[r10,#0]           ;2440  ; Ib_ips_termokompensat
0026ee  f7fffffe          BL       abs
0026f2  f9b91000          LDRSH    r1,[r9,#0]            ;2440  ; IKB
0026f6  4288              CMP      r0,r1                 ;2440
0026f8  dd08              BLE      |L1.9996|
0026fa  f898001d          LDRB     r0,[r8,#0x1d]         ;2442  ; kb_start_ips
0026fe  2801              CMP      r0,#1                 ;2442
002700  d104              BNE      |L1.9996|
002702  f888501d          STRB     r5,[r8,#0x1d]         ;2444
002706  2000              MOVS     r0,#0                 ;2445
002708  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.9996|
00270c  7820              LDRB     r0,[r4,#0]            ;2450  ; kb_start
00270e  b930              CBNZ     r0,|L1.10014|
002710  7860              LDRB     r0,[r4,#1]            ;2450  ; kb_start
002712  b920              CBNZ     r0,|L1.10014|
002714  f898001d          LDRB     r0,[r8,#0x1d]         ;2450  ; kb_start_ips
002718  b908              CBNZ     r0,|L1.10014|
00271a  f888501c          STRB     r5,[r8,#0x1c]         ;2452
                  |L1.10014|
00271e  20e6              MOVS     r0,#0xe6              ;2455
002720  f7fffffe          BL       mess_find
002724  b118              CBZ      r0,|L1.10030|
002726  4827              LDR      r0,|L1.10180|
002728  6800              LDR      r0,[r0,#0]            ;2455  ; mess_data
00272a  28e7              CMP      r0,#0xe7              ;2455
00272c  d00a              BEQ      |L1.10052|
                  |L1.10030|
00272e  4826              LDR      r0,|L1.10184|
002730  4926              LDR      r1,|L1.10188|
002732  f9b00000          LDRSH    r0,[r0,#0]            ;2455  ; USIGN
002736  f9b11000          LDRSH    r1,[r1,#0]            ;2455  ; load_U
00273a  eb000080          ADD      r0,r0,r0,LSL #2       ;2455
00273e  ebb10f40          CMP      r1,r0,LSL #1          ;2455
                  |L1.10050|
002742  da9c              BGE      |L1.9854|
                  |L1.10052|
002744  f888501c          STRB     r5,[r8,#0x1c]         ;2457
002748  7820              LDRB     r0,[r4,#0]            ;2458  ; kb_start
00274a  4d21              LDR      r5,|L1.10192|
00274c  2801              CMP      r0,#1                 ;2458
00274e  d10f              BNE      |L1.10096|
002750  f9b90000          LDRSH    r0,[r9,#0]            ;2458  ; IKB
002754  f9b51000          LDRSH    r1,[r5,#0]            ;2458  ; load_I
002758  0040              LSLS     r0,r0,#1              ;2458
00275a  fb90f0f7          SDIV     r0,r0,r7              ;2458
00275e  4288              CMP      r0,r1                 ;2458
002760  da06              BGE      |L1.10096|
002762  f896003d          LDRB     r0,[r6,#0x3d]         ;2458  ; bat
002766  07c0              LSLS     r0,r0,#31             ;2458
002768  d102              BNE      |L1.10096|
00276a  2101              MOVS     r1,#1                 ;2458
00276c  f7fffffe          BL       avar_bat_hndl
                  |L1.10096|
002770  7860              LDRB     r0,[r4,#1]            ;2459  ; kb_start
002772  2801              CMP      r0,#1                 ;2459
002774  d110              BNE      |L1.10136|
002776  f9b90000          LDRSH    r0,[r9,#0]            ;2459  ; IKB
00277a  f9b51000          LDRSH    r1,[r5,#0]            ;2459  ; load_I
00277e  0040              LSLS     r0,r0,#1              ;2459
002780  fb90f0f7          SDIV     r0,r0,r7              ;2459
002784  4288              CMP      r0,r1                 ;2459
002786  da07              BGE      |L1.10136|
002788  f8960089          LDRB     r0,[r6,#0x89]         ;2459  ; bat
00278c  07c0              LSLS     r0,r0,#31             ;2459
00278e  d103              BNE      |L1.10136|
002790  2101              MOVS     r1,#1                 ;2459
002792  4608              MOV      r0,r1                 ;2459
002794  f7fffffe          BL       avar_bat_hndl
                  |L1.10136|
002798  f898001d          LDRB     r0,[r8,#0x1d]         ;2461  ; kb_start_ips
00279c  2801              CMP      r0,#1                 ;2461
                  |L1.10142|
00279e  f47faee1          BNE      |L1.9572|
0027a2  f9b90000          LDRSH    r0,[r9,#0]            ;2461  ; IKB
0027a6  e015              B        |L1.10196|
                  |L1.10152|
                          DCD      ips_bat_av_vzvod
                  |L1.10156|
                          DCD      bat_ips
                  |L1.10160|
                          DCD      net_av
                  |L1.10164|
                          DCD      SMART_SPC
                  |L1.10168|
                          DCD      sp_ch_stat
                  |L1.10172|
                          DCD      ||area_number.25||+0x94
                  |L1.10176|
                          DCD      KB_ALGORITM
                  |L1.10180|
                          DCD      mess_data
                  |L1.10184|
                          DCD      USIGN
                  |L1.10188|
                          DCD      load_U
                  |L1.10192|
                          DCD      load_I
                  |L1.10196|
0027d4  0040              LSLS     r0,r0,#1              ;2461
0027d6  fb90f0f7          SDIV     r0,r0,r7              ;2461
0027da  f9b51000          LDRSH    r1,[r5,#0]            ;2461  ; load_I
0027de  4288              CMP      r0,r1                 ;2461
0027e0  daaf              BGE      |L1.10050|
0027e2  48ff              LDR      r0,|L1.11232|
0027e4  f890003d          LDRB     r0,[r0,#0x3d]         ;2461  ; bat_ips
0027e8  07c0              LSLS     r0,r0,#31             ;2461
0027ea  d1d8              BNE      |L1.10142|
0027ec  e8bd5ff0          POP      {r4-r12,lr}           ;2461
0027f0  2001              MOVS     r0,#1                 ;2461
0027f2  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2467   
                          ENDP

                  samokalibr_hndl PROC
;;;2476   //-----------------------------------------------
;;;2477   void samokalibr_hndl(void)
0027f6  4770              BX       lr
;;;2478   {
;;;2479   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2480   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2481   
;;;2482   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2483   	{
;;;2484   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2485   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2486   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2487   	} 
;;;2488   
;;;2489   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2490   	{
;;;2491   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2492   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2493   	
;;;2494   	}
;;;2495   #endif	 	
;;;2496   }
;;;2497   
                          ENDP

                  ubat_old_drv PROC
;;;2500   //-----------------------------------------------
;;;2501   void ubat_old_drv(void)
0027f8  b510              PUSH     {r4,lr}
;;;2502   {        
;;;2503   bat_u_old_cnt++;
0027fa  4cfa              LDR      r4,|L1.11236|
0027fc  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
0027fe  f1000001          ADD      r0,r0,#1
002802  8020              STRH     r0,[r4,#0]
;;;2504   gran_ring(&bat_u_old_cnt,0,8);
002804  f04f0208          MOV      r2,#8
002808  f04f0100          MOV      r1,#0
00280c  4620              MOV      r0,r4
00280e  f7fffffe          BL       gran_ring
;;;2505   
;;;2506   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002812  49f5              LDR      r1,|L1.11240|
002814  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002818  eb010040          ADD      r0,r1,r0,LSL #1
00281c  884a              LDRH     r2,[r1,#2]  ; bat
00281e  8402              STRH     r2,[r0,#0x20]
;;;2507   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
002820  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
002824  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2508   }
002828  bd10              POP      {r4,pc}
;;;2509   
                          ENDP

                  unet_drv PROC
;;;2510   //-----------------------------------------------
;;;2511   void unet_drv(void)
00282a  e92d41f0          PUSH     {r4-r8,lr}
;;;2512   {
;;;2513   if(net_U<UMN)
00282e  4eef              LDR      r6,|L1.11244|
002830  48ef              LDR      r0,|L1.11248|
;;;2514   	{
;;;2515   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002832  4af0              LDR      r2,|L1.11252|
002834  f9b61000          LDRSH    r1,[r6,#0]            ;2513  ; net_U
002838  f9b03000          LDRSH    r3,[r0,#0]            ;2513  ; UMN
;;;2516   		{
;;;2517   		unet_drv_cnt++;
;;;2518   		if(unet_drv_cnt>=10)
;;;2519   			{
;;;2520   			net_Ustore=net_U;
;;;2521   		 	avar_unet_hndl(1);
;;;2522   			
;;;2523   			}
;;;2524   		}
;;;2525   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
00283c  270a              MOVS     r7,#0xa
00283e  f9920000          LDRSB    r0,[r2,#0]            ;2515
;;;2526   
;;;2527   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2528   	}
;;;2529   
;;;2530   else if(net_U>UMN)
;;;2531   	{                 
;;;2532   	if(unet_drv_cnt)
;;;2533   		{
;;;2534   		unet_drv_cnt--;
;;;2535   		if(unet_drv_cnt<=0)
;;;2536   			{
;;;2537   			avar_unet_hndl(0);
;;;2538   			avar_bps_reset_cnt=10;
002842  4ced              LDR      r4,|L1.11256|
002844  4299              CMP      r1,r3                 ;2513
002846  da1d              BGE      |L1.10372|
002848  4dec              LDR      r5,|L1.11260|
00284a  280a              CMP      r0,#0xa               ;2515
00284c  da0f              BGE      |L1.10350|
00284e  4bec              LDR      r3,|L1.11264|
002850  f9b33000          LDRSH    r3,[r3,#0]            ;2515  ; main_1Hz_cnt
002854  2b0f              CMP      r3,#0xf               ;2515
002856  dd0a              BLE      |L1.10350|
002858  f1000001          ADD      r0,r0,#1              ;2517
00285c  b240              SXTB     r0,r0                 ;2517
00285e  7010              STRB     r0,[r2,#0]            ;2517
002860  280a              CMP      r0,#0xa               ;2518
002862  db07              BLT      |L1.10356|
002864  8029              STRH     r1,[r5,#0]            ;2520
002866  2001              MOVS     r0,#1                 ;2521
002868  f7fffffe          BL       avar_unet_hndl
00286c  e002              B        |L1.10356|
                  |L1.10350|
00286e  280a              CMP      r0,#0xa               ;2525
002870  db00              BLT      |L1.10356|
002872  7017              STRB     r7,[r2,#0]            ;2525
                  |L1.10356|
002874  f9b60000          LDRSH    r0,[r6,#0]            ;2527  ; net_U
002878  f9b51000          LDRSH    r1,[r5,#0]            ;2527  ; net_Ustore
00287c  4288              CMP      r0,r1                 ;2527
00287e  da0e              BGE      |L1.10398|
002880  8028              STRH     r0,[r5,#0]            ;2527
002882  e00c              B        |L1.10398|
                  |L1.10372|
002884  dd0b              BLE      |L1.10398|
002886  b150              CBZ      r0,|L1.10398|
002888  f1a00001          SUB      r0,r0,#1              ;2534
00288c  b240              SXTB     r0,r0                 ;2534
00288e  7010              STRB     r0,[r2,#0]            ;2534
002890  2800              CMP      r0,#0                 ;2535
002892  dc04              BGT      |L1.10398|
002894  2000              MOVS     r0,#0                 ;2537
002896  f7fffffe          BL       avar_unet_hndl
00289a  f8847031          STRB     r7,[r4,#0x31]
                  |L1.10398|
;;;2539   			}
;;;2540   		}
;;;2541   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2542   	
;;;2543   	}
;;;2544   #ifdef UKU_6U
;;;2545   if(net_U>UMAXN)
;;;2546   	{
;;;2547   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
;;;2548   		{
;;;2549   		unet_max_drv_cnt++;
;;;2550   		if(unet_max_drv_cnt>=10)
;;;2551   			{
;;;2552   			net_Ustore=net_U;
;;;2553   		 	avar_unet_hndl(2);
;;;2554   			
;;;2555   			}
;;;2556   		}
;;;2557   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
;;;2558   
;;;2559   	if(net_U>net_Ustore) net_Ustore=net_U;	
;;;2560   	}
;;;2561   
;;;2562   else if(net_U<UMAXN)
;;;2563   	{                 
;;;2564   	if(unet_max_drv_cnt)
;;;2565   		{
;;;2566   		unet_max_drv_cnt--;
;;;2567   		if(unet_max_drv_cnt<=0)
;;;2568   			{
;;;2569   			avar_unet_hndl(0);
;;;2570   			avar_bps_reset_cnt=10;
;;;2571   			}
;;;2572   		}
;;;2573   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2574   	
;;;2575   	}
;;;2576   #endif /*UKU_6U*/
;;;2577   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
00289e  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
0028a2  2800              CMP      r0,#0
0028a4  d003              BEQ      |L1.10414|
0028a6  f1a00001          SUB      r0,r0,#1
0028aa  f8840031          STRB     r0,[r4,#0x31]
                  |L1.10414|
;;;2578   }
0028ae  e8bd81f0          POP      {r4-r8,pc}
;;;2579   
                          ENDP

                  matemat PROC
;;;2581   //-----------------------------------------------
;;;2582   void matemat(void)
0028b2  e92d4ff0          PUSH     {r4-r11,lr}
;;;2583   {
0028b6  b087              SUB      sp,sp,#0x1c
;;;2584   //signed short temp_SS;
;;;2585   signed long temp_SL/*,temp_SL_*/;
;;;2586   char /*temp,*/i;
;;;2587   //signed short temp_SS;
;;;2588   
;;;2589   #ifdef UKU_MGTS
;;;2590   //напряжение сети
;;;2591   temp_SL=(signed long)net_buff_;
;;;2592   temp_SL*=Kunet;
;;;2593   temp_SL/=110000L;
;;;2594   net_U=(signed short)temp_SL;
;;;2595   #endif
;;;2596   
;;;2597   #ifdef UKU_RSTKM
;;;2598   //напряжение сети
;;;2599   temp_SL=(signed long)net_buff_;
;;;2600   temp_SL*=Kunet;
;;;2601   temp_SL/=110000L;
;;;2602   net_U=(signed short)temp_SL;
;;;2603   #endif
;;;2604   
;;;2605   #ifdef UKU_3U
;;;2606   //напряжение сети
;;;2607   temp_SL=(signed long)net_buff_;
;;;2608   temp_SL*=Kunet;
;;;2609   temp_SL/=36000L;
;;;2610   net_U=(signed short)temp_SL;
;;;2611   #endif
;;;2612   
;;;2613   #ifdef UKU_6U
;;;2614   //напряжение сети
;;;2615   
;;;2616   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2617   	{
;;;2618   
;;;2619   	if(bps[11]._device==dNET_METR)
;;;2620   		{
;;;2621   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2622   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2623   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2624   
;;;2625   		temp_SL=(signed long)net_metr_buff_[0];
;;;2626   		temp_SL*=KunetA;
;;;2627   		temp_SL/=6000L;
;;;2628   		net_Ua=(signed short)temp_SL;
;;;2629   	
;;;2630   		temp_SL=(signed long)net_metr_buff_[1];
;;;2631   		temp_SL*=KunetB;
;;;2632   		temp_SL/=6000L;
;;;2633   		net_Ub=(signed short)temp_SL;
;;;2634   	
;;;2635   		temp_SL=(signed long)net_metr_buff_[2];
;;;2636   		temp_SL*=KunetC;
;;;2637   		temp_SL/=6000L;
;;;2638   		net_Uc=(signed short)temp_SL;
;;;2639   		}
;;;2640   	else
;;;2641   		{
;;;2642   		temp_SL=(signed long)net_buff_;
;;;2643   		temp_SL*=KunetA;
;;;2644   		temp_SL/=110000L;
;;;2645   		net_Ua=(signed short)temp_SL;
;;;2646   	
;;;2647   		temp_SL=(signed long)adc_buff_[3];
;;;2648   		temp_SL*=KunetB;
;;;2649   		temp_SL/=6000L;
;;;2650   		net_Ub=(signed short)temp_SL;
;;;2651   	
;;;2652   		temp_SL=(signed long)adc_buff_[10];
;;;2653   		temp_SL*=KunetC;
;;;2654   		temp_SL/=6000L;
;;;2655   		net_Uc=(signed short)temp_SL;
;;;2656   		}
;;;2657   
;;;2658   	net_U=net_Ua;
;;;2659   	if(net_Ub<net_U)net_U=net_Ub;
;;;2660   	if(net_Uc<net_U)net_U=net_Uc;
;;;2661   	}
;;;2662   else 
;;;2663   	{
;;;2664   	temp_SL=(signed long)net_buff_;
;;;2665   	temp_SL*=Kunet;
;;;2666   	temp_SL/=110000L;
;;;2667   	net_U=(signed short)temp_SL;
;;;2668   	}
;;;2669   
;;;2670   
;;;2671   
;;;2672   
;;;2673   #endif
;;;2674   
;;;2675   #ifdef UKU_GLONASS
;;;2676   //напряжение сети
;;;2677   temp_SL=(signed long)net_buff_;
;;;2678   temp_SL*=Kunet;
;;;2679   temp_SL/=110000L;
;;;2680   net_U=(signed short)temp_SL;
;;;2681   #endif
;;;2682   
;;;2683   #ifdef UKU_KONTUR
;;;2684   //напряжение сети
;;;2685   temp_SL=(signed long)net_buff_;
;;;2686   temp_SL*=Kunet;
;;;2687   temp_SL/=110000L;
;;;2688   net_U=(signed short)temp_SL;
;;;2689   #endif
;;;2690   
;;;2691   #ifdef IPS_SGEP_GAZPROM
;;;2692   //напряжение сети
;;;2693   temp_SL=(signed long)net_buff_;
;;;2694   temp_SL*=Kunet;
;;;2695   temp_SL/=110000L;
;;;2696   net_U=(signed short)temp_SL;
;;;2697   #endif
;;;2698   
;;;2699   #ifdef UKU_220_V2
;;;2700   //напряжение сети
;;;2701   
;;;2702   if(AUSW_MAIN==22033)
;;;2703   	{
;;;2704   	temp_SL=(signed long)net_buff_;
;;;2705   	temp_SL*=KunetA;
;;;2706   	temp_SL/=6000L;
;;;2707   	net_Ua=(signed short)temp_SL;
;;;2708   
;;;2709   	temp_SL=(signed long)adc_buff_[3];
;;;2710   	temp_SL*=KunetB;
;;;2711   	temp_SL/=6000L;
;;;2712   	net_Ub=(signed short)temp_SL;
;;;2713   
;;;2714   	temp_SL=(signed long)adc_buff_[10];
;;;2715   	temp_SL*=KunetC;
;;;2716   	temp_SL/=6000L;
;;;2717   	net_Uc=(signed short)temp_SL;
;;;2718   
;;;2719   	net_U=net_Ua;
;;;2720   	if(net_Ub<net_U)net_U=net_Ub;
;;;2721   	if(net_Uc<net_U)net_U=net_Uc;
;;;2722   	}
;;;2723   else
;;;2724   	{
;;;2725   	temp_SL=(signed long)net_buff_;
;;;2726   	temp_SL*=Kunet;
;;;2727   	temp_SL/=5000L;
;;;2728   	net_U=(signed short)temp_SL;
;;;2729   	}
;;;2730   #endif
;;;2731   
;;;2732   
;;;2733   #ifdef UKU_220
;;;2734   //напряжение сети
;;;2735   
;;;2736   if(AUSW_MAIN==22035)
;;;2737   	{
;;;2738   	temp_SL=(signed long)net_buff_;
;;;2739   	temp_SL*=KunetA;
;;;2740   	temp_SL/=6000L;
;;;2741   	net_Ua=(signed short)temp_SL;
;;;2742   
;;;2743   	temp_SL=(signed long)adc_buff_[3];
;;;2744   	temp_SL*=KunetB;
;;;2745   	temp_SL/=6000L;
;;;2746   	net_Ub=(signed short)temp_SL;
;;;2747   
;;;2748   	temp_SL=(signed long)adc_buff_[10];
;;;2749   	temp_SL*=KunetC;
;;;2750   	temp_SL/=6000L;
;;;2751   	net_Uc=(signed short)temp_SL;
;;;2752   
;;;2753   	net_U=net_Ua;
;;;2754   	if(net_Ub<net_U)net_U=net_Ub;
;;;2755   	if(net_Uc<net_U)net_U=net_Uc;
;;;2756   	}
;;;2757   else
;;;2758   	{
;;;2759   	temp_SL=(signed long)net_buff_;
;;;2760   	temp_SL*=Kunet;
;;;2761   	#ifdef _ACDC_
;;;2762   	temp_SL/=500L;
;;;2763   	#else
;;;2764   	temp_SL/=5000L;
;;;2765   	#endif
;;;2766   	net_U=(signed short)temp_SL;
;;;2767   	
;;;2768   	}
;;;2769   #endif
;;;2770   
;;;2771   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2772   //напряжение сети
;;;2773   
;;;2774   
;;;2775   	if(bps[11]._device==dNET_METR)
0028b8  48d2              LDR      r0,|L1.11268|
;;;2776   		{
;;;2777   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2778   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2779   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2780   
;;;2781   		temp_SL=(signed long)net_metr_buff_[2];
;;;2782   		temp_SL*=KunetA;
0028ba  4bd3              LDR      r3,|L1.11272|
;;;2783   		temp_SL/=6000L;
;;;2784   		net_Ua=(signed short)temp_SL;
;;;2785   	
;;;2786   		temp_SL=(signed long)net_metr_buff_[1];
;;;2787   		temp_SL*=KunetB;
0028bc  49d4              LDR      r1,|L1.11280|
0028be  f890044c          LDRB     r0,[r0,#0x44c]        ;2775  ; bps
;;;2788   		temp_SL/=6000L;
;;;2789   		net_Ub=(signed short)temp_SL;
;;;2790   	
;;;2791   		temp_SL=(signed long)net_metr_buff_[0];
;;;2792   		temp_SL*=KunetC;
0028c2  4ad4              LDR      r2,|L1.11284|
0028c4  9006              STR      r0,[sp,#0x18]         ;2782
0028c6  f8dfc344          LDR      r12,|L1.11276|
0028ca  f9b39000          LDRSH    r9,[r3,#0]            ;2782
0028ce  f9b1b000          LDRSH    r11,[r1,#0]           ;2787
0028d2  f9b2a000          LDRSH    r10,[r2,#0]
0028d6  4fd0              LDR      r7,|L1.11288|
;;;2793   		temp_SL/=6000L;
;;;2794   		net_Uc=(signed short)temp_SL;
0028d8  4cd0              LDR      r4,|L1.11292|
;;;2795   
;;;2796   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2797   
;;;2798   		net_U=net_Ua;
;;;2799   		if(net_Ub<net_U)net_U=net_Ub;
;;;2800   		if(net_Uc<net_U)net_U=net_Uc;
;;;2801   		}
;;;2802   	  else if(AUSW_MAIN==22033)
;;;2803   	{
;;;2804   	temp_SL=(signed long)net_buff_;
0028da  4ec7              LDR      r6,|L1.11256|
0028dc  f2456511          MOV      r5,#0x5611            ;2802
0028e0  2807              CMP      r0,#7                 ;2775
0028e2  d036              BEQ      |L1.10578|
0028e4  4631              MOV      r1,r6
0028e6  f8df8328          LDR      r8,|L1.11280|
0028ea  8f4a              LDRH     r2,[r1,#0x3a]
0028ec  4619              MOV      r1,r3                 ;2782
;;;2805   	temp_SL*=KunetA;
;;;2806   	temp_SL/=4000L;
;;;2807   	net_Ua=(signed short)temp_SL;
;;;2808   
;;;2809   	temp_SL=(signed long)adc_buff_[3];
0028ee  4bcd              LDR      r3,|L1.11300|
0028f0  f9b11000          LDRSH    r1,[r1,#0]            ;2782
0028f4  f9b88000          LDRSH    r8,[r8,#0]            ;2787
0028f8  434a              MULS     r2,r1,r2              ;2805
0028fa  f9b31006          LDRSH    r1,[r3,#6]
0028fe  f8df9314          LDR      r9,|L1.11284|
;;;2810   	temp_SL*=KunetB;
002902  fb01f108          MUL      r1,r1,r8
002906  f2417870          MOV      r8,#0x1770            ;2783
;;;2811   	temp_SL/=6000L;
;;;2812   	net_Ub=(signed short)temp_SL;
;;;2813   
;;;2814   	temp_SL=(signed long)adc_buff_[10];
00290a  f9b33014          LDRSH    r3,[r3,#0x14]
00290e  f9b99000          LDRSH    r9,[r9,#0]            ;2792
002912  fb91f1f8          SDIV     r1,r1,r8              ;2811
;;;2815   	temp_SL*=KunetC;
002916  fb03f309          MUL      r3,r3,r9
;;;2816   	temp_SL/=6000L;
00291a  fb93f3f8          SDIV     r3,r3,r8
00291e  48c0              LDR      r0,|L1.11296|
002920  b209              SXTH     r1,r1                 ;2812
;;;2817   	net_Uc=(signed short)temp_SL;
002922  b21b              SXTH     r3,r3
002924  8800              LDRH     r0,[r0,#0]            ;2802  ; AUSW_MAIN
002926  42a8              CMP      r0,r5                 ;2802
002928  d154              BNE      |L1.10708|
00292a  f44f607a          MOV      r0,#0xfa0             ;2806
00292e  fb92f0f0          SDIV     r0,r2,r0              ;2806
002932  b200              SXTH     r0,r0                 ;2807
002934  f8ac0000          STRH     r0,[r12,#0]           ;2807
002938  8039              STRH     r1,[r7,#0]            ;2812
00293a  8023              STRH     r3,[r4,#0]
;;;2818   
;;;2819   	net_U=net_Ua;
00293c  4aab              LDR      r2,|L1.11244|
00293e  8010              STRH     r0,[r2,#0]
;;;2820   	if(net_Ub<net_U)net_U=net_Ub;
002940  4281              CMP      r1,r0
002942  da00              BGE      |L1.10566|
002944  8011              STRH     r1,[r2,#0]
                  |L1.10566|
;;;2821   	if(net_Uc<net_U)net_U=net_Uc;
002946  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
00294a  4283              CMP      r3,r0
00294c  da00              BGE      |L1.10576|
00294e  8013              STRH     r3,[r2,#0]
                  |L1.10576|
002950  e07e              B        |L1.10832|
                  |L1.10578|
002952  48b5              LDR      r0,|L1.11304|
002954  4ba8              LDR      r3,|L1.11256|
002956  7801              LDRB     r1,[r0,#0]            ;2777  ; bps
002958  7842              LDRB     r2,[r0,#1]            ;2777  ; bps
00295a  f10303e8          ADD      r3,r3,#0xe8           ;2777
00295e  eb012102          ADD      r1,r1,r2,LSL #8       ;2777
002962  fa1ff881          UXTH     r8,r1                 ;2777
002966  f8a38000          STRH     r8,[r3,#0]            ;2777
00296a  7881              LDRB     r1,[r0,#2]            ;2778  ; bps
00296c  78c2              LDRB     r2,[r0,#3]            ;2778  ; bps
00296e  eb012102          ADD      r1,r1,r2,LSL #8       ;2778
002972  b289              UXTH     r1,r1                 ;2778
002974  8059              STRH     r1,[r3,#2]            ;2778
002976  7902              LDRB     r2,[r0,#4]            ;2779  ; bps
002978  f890e005          LDRB     lr,[r0,#5]            ;2779  ; bps
00297c  eb02220e          ADD      r2,r2,lr,LSL #8       ;2779
002980  b292              UXTH     r2,r2                 ;2779
002982  809a              STRH     r2,[r3,#4]            ;2779
002984  fb02f209          MUL      r2,r2,r9              ;2782
002988  f2417370          MOV      r3,#0x1770            ;2783
00298c  fb92f2f3          SDIV     r2,r2,r3              ;2783
002990  fa0ff982          SXTH     r9,r2                 ;2784
002994  f8ac9000          STRH     r9,[r12,#0]           ;2784
002998  fb01f10b          MUL      r1,r1,r11             ;2787
00299c  fb91f1f3          SDIV     r1,r1,r3              ;2788
0029a0  b209              SXTH     r1,r1                 ;2789
0029a2  8039              STRH     r1,[r7,#0]            ;2789
0029a4  fb08f80a          MUL      r8,r8,r10             ;2792
0029a8  fb98f2f3          SDIV     r2,r8,r3              ;2793
0029ac  b212              SXTH     r2,r2                 ;2794
0029ae  8022              STRH     r2,[r4,#0]            ;2794
0029b0  7983              LDRB     r3,[r0,#6]            ;2796  ; bps
0029b2  79c0              LDRB     r0,[r0,#7]            ;2796  ; bps
0029b4  eb032000          ADD      r0,r3,r0,LSL #8       ;2796
0029b8  4b9c              LDR      r3,|L1.11308|
0029ba  8018              STRH     r0,[r3,#0]            ;2796
0029bc  488b              LDR      r0,|L1.11244|
0029be  f8a09000          STRH     r9,[r0,#0]            ;2798
0029c2  4549              CMP      r1,r9                 ;2799
0029c4  da00              BGE      |L1.10696|
0029c6  8001              STRH     r1,[r0,#0]            ;2799
                  |L1.10696|
0029c8  f9b01000          LDRSH    r1,[r0,#0]            ;2800  ; net_U
0029cc  428a              CMP      r2,r1                 ;2800
0029ce  da3f              BGE      |L1.10832|
0029d0  8002              STRH     r2,[r0,#0]            ;2800
0029d2  e03d              B        |L1.10832|
                  |L1.10708|
;;;2822   	}
;;;2823   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
0029d4  f5a048ac          SUB      r8,r0,#0x5600
0029d8  f1b8082f          SUBS     r8,r8,#0x2f
0029dc  d00b              BEQ      |L1.10742|
0029de  f1180828          ADDS     r8,r8,#0x28
0029e2  d008              BEQ      |L1.10742|
0029e4  f1b80814          SUBS     r8,r8,#0x14
0029e8  d005              BEQ      |L1.10742|
0029ea  f1b80801          SUBS     r8,r8,#1
0029ee  d002              BEQ      |L1.10742|
0029f0  f118081a          ADDS     r8,r8,#0x1a
0029f4  d113              BNE      |L1.10782|
                  |L1.10742|
;;;2824   	{
;;;2825   	temp_SL=(signed long)net_buff_;
;;;2826   	temp_SL*=KunetA;
;;;2827   	temp_SL/=40000L;
0029f6  f6494040          MOV      r0,#0x9c40
0029fa  fb92f0f0          SDIV     r0,r2,r0
;;;2828   	net_Ua=(signed short)temp_SL;
0029fe  b200              SXTH     r0,r0
002a00  f8ac0000          STRH     r0,[r12,#0]
;;;2829   
;;;2830   	temp_SL=(signed long)adc_buff_[3];
;;;2831   	temp_SL*=KunetB;
;;;2832   	temp_SL/=6000L;
;;;2833   	net_Ub=(signed short)temp_SL;
002a04  8039              STRH     r1,[r7,#0]
;;;2834   
;;;2835   	temp_SL=(signed long)adc_buff_[10];
;;;2836   	temp_SL*=KunetC;
;;;2837   	temp_SL/=6000L;
;;;2838   	net_Uc=(signed short)temp_SL;
002a06  8023              STRH     r3,[r4,#0]
;;;2839   
;;;2840   	net_U=net_Ua;
002a08  4a78              LDR      r2,|L1.11244|
002a0a  8010              STRH     r0,[r2,#0]
;;;2841   	if(net_Ub<net_U)net_U=net_Ub;
002a0c  4281              CMP      r1,r0
002a0e  da00              BGE      |L1.10770|
002a10  8011              STRH     r1,[r2,#0]
                  |L1.10770|
;;;2842   	if(net_Uc<net_U)net_U=net_Uc;
002a12  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002a16  4283              CMP      r3,r0
002a18  da1a              BGE      |L1.10832|
002a1a  8013              STRH     r3,[r2,#0]
002a1c  e018              B        |L1.10832|
                  |L1.10782|
;;;2843   	}
;;;2844   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2845   	{
;;;2846   	temp_SL=(signed long)net_buff_;
;;;2847   	temp_SL*=Kunet;
002a1e  4984              LDR      r1,|L1.11312|
002a20  f5a043aa          SUB      r3,r0,#0x5500         ;2844
002a24  f9b12000          LDRSH    r2,[r1,#0]
002a28  4973              LDR      r1,|L1.11256|
002a2a  8f49              LDRH     r1,[r1,#0x3a]         ;2804
002a2c  4351              MULS     r1,r2,r1
002a2e  3bfa              SUBS     r3,r3,#0xfa           ;2844
002a30  d001              BEQ      |L1.10806|
002a32  1e5a              SUBS     r2,r3,#1              ;2844
002a34  d106              BNE      |L1.10820|
                  |L1.10806|
;;;2848   	temp_SL/=35000L;
002a36  f64800b8          MOV      r0,#0x88b8
002a3a  fb91f0f0          SDIV     r0,r1,r0
;;;2849   	net_U=(signed short)temp_SL;
002a3e  496b              LDR      r1,|L1.11244|
002a40  8008              STRH     r0,[r1,#0]
002a42  e005              B        |L1.10832|
                  |L1.10820|
;;;2850   	
;;;2851   	}
;;;2852   else
;;;2853   	{
;;;2854   	temp_SL=(signed long)net_buff_;
;;;2855   	temp_SL*=Kunet;
;;;2856   	#ifdef _ACDC_
;;;2857   	temp_SL/=500L;
002a44  f44f70fa          MOV      r0,#0x1f4
002a48  fb91f0f0          SDIV     r0,r1,r0
;;;2858   	#else
;;;2859   	temp_SL/=5000L;
;;;2860   	#endif
;;;2861   	net_U=(signed short)temp_SL;
002a4c  4967              LDR      r1,|L1.11244|
002a4e  8008              STRH     r0,[r1,#0]
                  |L1.10832|
;;;2862   	
;;;2863   	}
;;;2864   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002a50  9806              LDR      r0,[sp,#0x18]
002a52  2807              CMP      r0,#7
002a54  d003              BEQ      |L1.10846|
002a56  4877              LDR      r0,|L1.11316|
002a58  8801              LDRH     r1,[r0,#0]  ; net_F
002a5a  4874              LDR      r0,|L1.11308|
002a5c  8001              STRH     r1,[r0,#0]
                  |L1.10846|
;;;2865   #endif
;;;2866   
;;;2867   #ifdef UKU_TELECORE2015
;;;2868   //напряжение сети
;;;2869   temp_SL=(signed long)net_buff_;
;;;2870   temp_SL*=Kunet;
;;;2871   temp_SL/=110000L;
;;;2872   net_U=(signed short)temp_SL;
;;;2873   #endif
;;;2874   
;;;2875   #ifdef UKU_TELECORE2017
;;;2876   //напряжение сети
;;;2877   temp_SL=(signed long)net_buff_;
;;;2878   temp_SL*=Kunet;
;;;2879   temp_SL/=110000L;
;;;2880   net_U=(signed short)temp_SL;
;;;2881   #endif
;;;2882   
;;;2883   //Напряжения батарей
;;;2884   temp_SL=(signed long)adc_buff_[0];
002a5e  4f71              LDR      r7,|L1.11300|
002a60  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2885   temp_SL*=Kubat[0];
002a64  4974              LDR      r1,|L1.11320|
002a66  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
002a6a  4350              MULS     r0,r2,r0
;;;2886   temp_SL/=2000L;
002a6c  f44f68fa          MOV      r8,#0x7d0
002a70  fb90f0f8          SDIV     r0,r0,r8
;;;2887   bat[0]._Ub=(signed short)temp_SL;
002a74  4c5c              LDR      r4,|L1.11240|
002a76  8060              STRH     r0,[r4,#2]
;;;2888   
;;;2889   #ifdef UKU_220
;;;2890   //Напряжения батарей
;;;2891   temp_SL=(signed long)adc_buff_[0];
;;;2892   temp_SL*=Kubat[0];
;;;2893   temp_SL/=400L;
;;;2894   bat[0]._Ub=(signed short)temp_SL;
;;;2895   #endif
;;;2896   
;;;2897   #ifdef UKU_220_V2
;;;2898   //Напряжения батарей
;;;2899   temp_SL=(signed long)adc_buff_[0];
;;;2900   temp_SL*=Kubat[0];
;;;2901   temp_SL/=400L;
;;;2902   bat[0]._Ub=(signed short)temp_SL;
;;;2903   #endif
;;;2904   
;;;2905   //adc_buff_[4]=300;
;;;2906   
;;;2907   temp_SL=(signed long)adc_buff_[4];
002a78  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2908   temp_SL*=Kubatm[0];
002a7c  4a6f              LDR      r2,|L1.11324|
002a7e  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
002a82  fb00f003          MUL      r0,r0,r3
;;;2909   temp_SL/=700L;
002a86  f44f732f          MOV      r3,#0x2bc
002a8a  fb90f0f3          SDIV     r0,r0,r3
;;;2910   bat[0]._Ubm=(signed short)temp_SL;
002a8e  80a0              STRH     r0,[r4,#4]
;;;2911   
;;;2912   #ifdef UKU_KONTUR
;;;2913   temp_SL=(signed long)adc_buff_[4];
;;;2914   temp_SL*=Kubatm[0];
;;;2915   temp_SL/=2000L;
;;;2916   bat[0]._Ubm=(signed short)temp_SL;
;;;2917   #endif
;;;2918   
;;;2919   #ifdef UKU_6U
;;;2920   temp_SL=(signed long)adc_buff_[4];
;;;2921   temp_SL*=Kubatm[0];
;;;2922   temp_SL/=2000L;
;;;2923   bat[0]._Ubm=(signed short)temp_SL;
;;;2924   #endif
;;;2925   
;;;2926   temp_SL=(signed long)adc_buff_[12];
002a90  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2927   temp_SL*=Kubat[1];
002a94  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002a98  fb01f100          MUL      r1,r1,r0
;;;2928   temp_SL/=2000L;
002a9c  fb91f0f8          SDIV     r0,r1,r8
;;;2929   bat[1]._Ub=(signed short)temp_SL;
002aa0  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2930   
;;;2931   #ifdef UKU_220
;;;2932   temp_SL=(signed long)adc_buff_[12];
;;;2933   temp_SL*=Kubat[1];
;;;2934   temp_SL/=400L;
;;;2935   bat[1]._Ub=(signed short)temp_SL;
;;;2936   #endif
;;;2937   
;;;2938   #ifdef UKU_220_V2
;;;2939   temp_SL=(signed long)adc_buff_[12];
;;;2940   temp_SL*=Kubat[1];
;;;2941   temp_SL/=400L;
;;;2942   bat[1]._Ub=(signed short)temp_SL;
;;;2943   #endif
;;;2944   
;;;2945   //adc_buff_[1]=300;
;;;2946   
;;;2947   temp_SL=(signed long)adc_buff_[1];
002aa4  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2948   temp_SL*=Kubatm[1];
002aa8  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002aac  fb00f001          MUL      r0,r0,r1
;;;2949   temp_SL/=700L;
002ab0  fb90f0f3          SDIV     r0,r0,r3
;;;2950   bat[1]._Ubm=(signed short)temp_SL;
002ab4  f8a40050          STRH     r0,[r4,#0x50]
;;;2951   #ifdef UKU_KONTUR
;;;2952   temp_SL=(signed long)adc_buff_[1];
;;;2953   temp_SL*=Kubatm[1];
;;;2954   temp_SL/=2000L;
;;;2955   bat[1]._Ubm=(signed short)temp_SL;
;;;2956   #endif
;;;2957   #ifdef UKU_6U
;;;2958   temp_SL=(signed long)adc_buff_[1];
;;;2959   temp_SL*=Kubatm[1];
;;;2960   temp_SL/=2000L;
;;;2961   bat[1]._Ubm=(signed short)temp_SL;
;;;2962   #endif
;;;2963   
;;;2964   #ifdef UKU_TELECORE2015
;;;2965   temp_SL=(signed long)adc_buff_[2];
;;;2966   temp_SL*=Kubat[0];
;;;2967   temp_SL/=2000L;
;;;2968   bat[0]._Ub=(signed short)temp_SL;
;;;2969   #endif
;;;2970   
;;;2971   /*
;;;2972   //Токи батарей
;;;2973   if(!mess_find_unvol(MESS2MATEMAT))
;;;2974   	{
;;;2975   	temp_SL=(signed long)ad7705_buff_[0];
;;;2976   	temp_SL-=(signed long)Kibat0[0];
;;;2977   	temp_SL*=(signed long)Kibat1[0];
;;;2978   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2979   	else temp_SL/=1000L;
;;;2980   	bat[0]._Ib=(signed short)temp_SL;
;;;2981   
;;;2982   	temp_SL=(signed long)ad7705_buff_[1];
;;;2983   	temp_SL-=(signed long)Kibat0[1];
;;;2984   	temp_SL*=(signed long)Kibat1[1];
;;;2985   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2986   	else temp_SL/=1000L;
;;;2987   	bat[1]._Ib=(signed short)temp_SL;
;;;2988   	}
;;;2989   */
;;;2990   
;;;2991   
;;;2992   //Токи батарей
;;;2993   if(!mess_find_unvol(MESS2MATEMAT))
002ab8  f04f00dc          MOV      r0,#0xdc
002abc  f7fffffe          BL       mess_find_unvol
;;;2994   	{
;;;2995   	temp_SL=(signed long)ad7705_buff_[0];
;;;2996   	temp_SL-=(signed long)Kibat0[0];
;;;2997   	temp_SL*=(signed long)Kibat1[0];
;;;2998   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2999   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002ac0  f2456c13          MOV      r12,#0x5613
002ac4  bbe8              CBNZ     r0,|L1.11074|
002ac6  f8dfa178          LDR      r10,|L1.11328|
002aca  f8ba0000          LDRH     r0,[r10,#0]           ;2995  ; ad7705_buff_
002ace  f8dfb174          LDR      r11,|L1.11332|
002ad2  f8bb1000          LDRH     r1,[r11,#0]           ;2996  ; Kibat0
002ad6  eba00001          SUB      r0,r0,r1              ;2996
002ada  4a5b              LDR      r2,|L1.11336|
002adc  f9b21000          LDRSH    r1,[r2,#0]            ;2997  ; Kibat1
002ae0  fb01f100          MUL      r1,r1,r0              ;2997
002ae4  484e              LDR      r0,|L1.11296|
002ae6  f6456338          MOV      r3,#0x5e38            ;2998
002aea  f6456992          MOV      r9,#0x5e92            ;2998
002aee  8800              LDRH     r0,[r0,#0]            ;2998  ; AUSW_MAIN
002af0  4298              CMP      r0,r3                 ;2998
002af2  d001              BEQ      |L1.11000|
002af4  4548              CMP      r0,r9                 ;2998
002af6  d104              BNE      |L1.11010|
                  |L1.11000|
002af8  f44f7e96          MOV      lr,#0x12c             ;2998
002afc  fb91f1fe          SDIV     r1,r1,lr              ;2998
002b00  e00f              B        |L1.11042|
                  |L1.11010|
002b02  f5a04ea8          SUB      lr,r0,#0x5400
002b06  f5be7efd          SUBS     lr,lr,#0x1fa
002b0a  d003              BEQ      |L1.11028|
002b0c  4560              CMP      r0,r12
002b0e  d001              BEQ      |L1.11028|
002b10  42a8              CMP      r0,r5
002b12  d102              BNE      |L1.11034|
                  |L1.11028|
002b14  fb91f1f8          SDIV     r1,r1,r8
002b18  e003              B        |L1.11042|
                  |L1.11034|
;;;3000   	else temp_SL/=1000L;
002b1a  f44f7e7a          MOV      lr,#0x3e8
002b1e  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11042|
;;;3001   	#ifdef UKU_TELECORE2015
;;;3002   	temp_SL/=2L;
;;;3003   	//temp_SL=-temp_SL;
;;;3004   	#endif
;;;3005   	//#ifdef UKU_TELECORE2017
;;;3006   	//temp_SL/=-2L;
;;;3007   	//temp_SL=-temp_SL;
;;;3008   	//#endif
;;;3009   	bat[0]._Ib=(signed short)temp_SL;
002b22  8121              STRH     r1,[r4,#8]
;;;3010   
;;;3011   	temp_SL=(signed long)ad7705_buff_[1];
002b24  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3012   	temp_SL-=(signed long)Kibat0[1];
002b28  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002b2c  eba10a0a          SUB      r10,r1,r10
;;;3013   	temp_SL*=(signed long)Kibat1[1];
002b30  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002b34  fb01f10a          MUL      r1,r1,r10
;;;3014   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002b38  4298              CMP      r0,r3
002b3a  d001              BEQ      |L1.11072|
002b3c  4548              CMP      r0,r9
002b3e  d106              BNE      |L1.11086|
                  |L1.11072|
002b40  e000              B        |L1.11076|
                  |L1.11074|
002b42  e015              B        |L1.11120|
                  |L1.11076|
002b44  f44f7096          MOV      r0,#0x12c
002b48  fb91f0f0          SDIV     r0,r1,r0
002b4c  e00e              B        |L1.11116|
                  |L1.11086|
;;;3015   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002b4e  f5a042aa          SUB      r2,r0,#0x5500
002b52  3afa              SUBS     r2,r2,#0xfa
002b54  d003              BEQ      |L1.11102|
002b56  4560              CMP      r0,r12
002b58  d001              BEQ      |L1.11102|
002b5a  42a8              CMP      r0,r5
002b5c  d102              BNE      |L1.11108|
                  |L1.11102|
002b5e  fb91f0f8          SDIV     r0,r1,r8
002b62  e003              B        |L1.11116|
                  |L1.11108|
;;;3016   	else temp_SL/=1000L;
002b64  f44f707a          MOV      r0,#0x3e8
002b68  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11116|
;;;3017   	bat[1]._Ib=(signed short)temp_SL;
002b6c  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.11120|
;;;3018   	}
;;;3019   
;;;3020   
;;;3021   
;;;3022   
;;;3023   
;;;3024   //Температуры батарей
;;;3025   
;;;3026   #ifdef UKU_KONTUR
;;;3027   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3028   else bat[0]._nd=1;
;;;3029   temp_SL=(signed long)adc_buff_[6];
;;;3030   temp_SL*=Ktbat[0];
;;;3031   temp_SL/=20000L;
;;;3032   temp_SL-=273L;
;;;3033   bat[0]._Tb=(signed short)temp_SL;
;;;3034   #else
;;;3035   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002b70  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
002b74  f6403ab7          MOV      r10,#0xbb7
002b78  4681              MOV      r9,r0
002b7a  f2a03021          SUB      r0,r0,#0x321
;;;3036   else bat[0]._nd=1;
002b7e  2201              MOVS     r2,#1
002b80  2300              MOVS     r3,#0                 ;3035
002b82  9005              STR      r0,[sp,#0x14]         ;3035
002b84  4550              CMP      r0,r10                ;3035
002b86  d201              BCS      |L1.11148|
002b88  7323              STRB     r3,[r4,#0xc]          ;3035
002b8a  e000              B        |L1.11150|
                  |L1.11148|
002b8c  7322              STRB     r2,[r4,#0xc]
                  |L1.11150|
;;;3037   temp_SL=(signed long)adc_buff_[6];
;;;3038   temp_SL*=Ktbat[0];
002b8e  492f              LDR      r1,|L1.11340|
002b90  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
002b94  fb00f009          MUL      r0,r0,r9
;;;3039   temp_SL/=20000L;
002b98  f6446e20          MOV      lr,#0x4e20
002b9c  fb90f0fe          SDIV     r0,r0,lr
;;;3040   temp_SL-=273L;
002ba0  f2a01011          SUB      r0,r0,#0x111
;;;3041   bat[0]._Tb=(signed short)temp_SL;
002ba4  8160              STRH     r0,[r4,#0xa]
;;;3042   #endif
;;;3043   
;;;3044   #ifdef UKU_KONTUR
;;;3045   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3046   else bat[1]._nd=1;
;;;3047   temp_SL=(signed long)adc_buff_[7];
;;;3048   temp_SL*=Ktbat[1];
;;;3049   temp_SL/=20000L;
;;;3050   temp_SL-=273L;
;;;3051   bat[1]._Tb=(signed short)temp_SL;
;;;3052   #else
;;;3053   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002ba6  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
002baa  f2a03b21          SUB      r11,r0,#0x321
002bae  45d3              CMP      r11,r10
002bb0  d202              BCS      |L1.11192|
002bb2  f8843058          STRB     r3,[r4,#0x58]
002bb6  e001              B        |L1.11196|
                  |L1.11192|
;;;3054   else bat[1]._nd=1;
002bb8  f8842058          STRB     r2,[r4,#0x58]
                  |L1.11196|
;;;3055   temp_SL=(signed long)adc_buff_[7];
;;;3056   temp_SL*=Ktbat[1];
002bbc  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
002bc0  4341              MULS     r1,r0,r1
;;;3057   temp_SL/=20000L;
002bc2  f6446020          MOV      r0,#0x4e20
002bc6  fb91f0f0          SDIV     r0,r1,r0
;;;3058   temp_SL-=273L;
002bca  f2a01011          SUB      r0,r0,#0x111
;;;3059   bat[1]._Tb=(signed short)temp_SL;
002bce  4906              LDR      r1,|L1.11240|
002bd0  f8a10056          STRH     r0,[r1,#0x56]
;;;3060   #endif
;;;3061   
;;;3062   #ifdef UKU_6U
;;;3063   
;;;3064   if(NUMMAKB==2)
;;;3065   	{
;;;3066   	if(makb[0]._cnt<5)
;;;3067   		{
;;;3068   		if(makb[0]._T_nd[0]==0)
;;;3069   			{
;;;3070   			bat[0]._Tb=makb[0]._T[0];
;;;3071   			bat[0]._nd=0;
;;;3072   			}
;;;3073   		}
;;;3074   
;;;3075   	if(makb[1]._cnt<5)
;;;3076   		{
;;;3077   		if(makb[1]._T_nd[0]==0)
;;;3078   			{
;;;3079   			bat[1]._Tb=makb[1]._T[0];
;;;3080   			bat[1]._nd=0;
;;;3081   			}
;;;3082   		}
;;;3083   
;;;3084   	}
;;;3085   else if(NUMMAKB==4)
;;;3086   	{
;;;3087   	signed short temp_t;
;;;3088   	temp_t=-20;
;;;3089   	if(makb[0]._cnt<5)
;;;3090   		{
;;;3091   		if(makb[0]._T_nd[0]==0)
;;;3092   			{
;;;3093   			temp_t=makb[0]._T[0];
;;;3094   			bat[0]._nd=0;
;;;3095   			}
;;;3096   		}
;;;3097   	if(makb[1]._cnt<5)
;;;3098   		{
;;;3099   		if(makb[1]._T_nd[0]==0)
;;;3100   			{
;;;3101   			if(temp_t<makb[1]._T[0])
;;;3102   				{
;;;3103   				bat[0]._nd=0;
;;;3104   				temp_t=makb[1]._T[0];
;;;3105   				}
;;;3106   			}
;;;3107   		}
;;;3108   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3109   
;;;3110    	temp_t=-20;
;;;3111   	if(makb[2]._cnt<5)
;;;3112   		{
;;;3113   		if(makb[2]._T_nd[0]==0)
;;;3114   			{
;;;3115   			temp_t=makb[2]._T[0];
;;;3116   			bat[1]._nd=0;
;;;3117   			}
;;;3118   		}
;;;3119   	if(makb[3]._cnt<5)
;;;3120   		{
;;;3121   		if(makb[3]._T_nd[0]==0)
;;;3122   			{
;;;3123   			if(temp_t<makb[3]._T[0])
;;;3124   				{
;;;3125   				bat[1]._nd=0;
;;;3126   				temp_t=makb[3]._T[0];
;;;3127   				}
;;;3128   			}
;;;3129   		}
;;;3130   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3131   	}
;;;3132   
;;;3133   #endif
;;;3134   
;;;3135   
;;;3136   //Напряжение нагрузки
;;;3137   temp_SL=(signed long)adc_buff_[2];
002bd4  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;3138   temp_SL*=Kuload;
002bd8  481d              LDR      r0,|L1.11344|
002bda  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002bde  e039              B        |L1.11348|
                  |L1.11232|
                          DCD      bat_ips
                  |L1.11236|
                          DCD      bat_u_old_cnt
                  |L1.11240|
                          DCD      bat
                  |L1.11244|
                          DCD      net_U
                  |L1.11248|
                          DCD      UMN
                  |L1.11252|
                          DCD      unet_drv_cnt
                  |L1.11256|
                          DCD      ||area_number.25||
                  |L1.11260|
                          DCD      net_Ustore
                  |L1.11264|
                          DCD      main_1Hz_cnt
                  |L1.11268|
                          DCD      bps
                  |L1.11272|
                          DCD      KunetA
                  |L1.11276|
                          DCD      net_Ua
                  |L1.11280|
                          DCD      KunetB
                  |L1.11284|
                          DCD      KunetC
                  |L1.11288|
                          DCD      net_Ub
                  |L1.11292|
                          DCD      net_Uc
                  |L1.11296|
                          DCD      AUSW_MAIN
                  |L1.11300|
                          DCD      ||.bss||+0x40c
                  |L1.11304|
                          DCD      bps+0x452
                  |L1.11308|
                          DCD      net_F3
                  |L1.11312|
                          DCD      Kunet
                  |L1.11316|
                          DCD      net_F
                  |L1.11320|
                          DCD      Kubat
                  |L1.11324|
                          DCD      Kubatm
                  |L1.11328|
                          DCD      ad7705_buff_
                  |L1.11332|
                          DCD      Kibat0
                  |L1.11336|
                          DCD      Kibat1
                  |L1.11340|
                          DCD      Ktbat
                  |L1.11344|
                          DCD      Kuload
                  |L1.11348|
002c54  fb01f000          MUL      r0,r1,r0
;;;3139   temp_SL/=2000L;
002c58  f44f64fa          MOV      r4,#0x7d0
002c5c  fb90f0f4          SDIV     r0,r0,r4
;;;3140   load_U=(signed short)temp_SL;
002c60  4cfe              LDR      r4,|L1.12380|
002c62  8020              STRH     r0,[r4,#0]
;;;3141   
;;;3142   #ifdef UKU_220 
;;;3143   //Напряжение нагрузки
;;;3144   temp_SL=(signed long)adc_buff_[2];
;;;3145   temp_SL*=Kuload;
;;;3146   temp_SL/=350L;
;;;3147   load_U=(signed short)temp_SL;
;;;3148   #endif
;;;3149   
;;;3150   #ifdef UKU_220_V2 
;;;3151   //Напряжение нагрузки
;;;3152   temp_SL=(signed long)adc_buff_[2];
;;;3153   temp_SL*=Kuload;
;;;3154   temp_SL/=350L;
;;;3155   load_U=(signed short)temp_SL;
;;;3156   #endif
;;;3157   
;;;3158   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3159   //Напряжение шины
;;;3160   temp_SL=(signed long)adc_buff_[1];
002c64  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;3161   temp_SL*=Kuout;
002c68  48fd              LDR      r0,|L1.12384|
002c6a  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002c6e  fb08f800          MUL      r8,r8,r0
;;;3162   if(AUSW_MAIN==22010)temp_SL/=400L;
002c72  48fc              LDR      r0,|L1.12388|
002c74  f24554fa          MOV      r4,#0x55fa
002c78  f44f7bc8          MOV      r11,#0x190
002c7c  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002c7e  42a0              CMP      r0,r4
002c80  d102              BNE      |L1.11400|
002c82  fb98f8fb          SDIV     r8,r8,r11
002c86  e003              B        |L1.11408|
                  |L1.11400|
;;;3163   else temp_SL/=500L;
002c88  f44f7efa          MOV      lr,#0x1f4
002c8c  fb98f8fe          SDIV     r8,r8,lr
                  |L1.11408|
;;;3164   out_U=(signed short)temp_SL;
002c90  f8dfe3d4          LDR      lr,|L1.12392|
002c94  fa0ff888          SXTH     r8,r8
002c98  f8ae8000          STRH     r8,[lr,#0]
;;;3165   load_U=out_U;
002c9c  f8dfe3bc          LDR      lr,|L1.12380|
002ca0  f8ae8000          STRH     r8,[lr,#0]
;;;3166   
;;;3167   //Напряжение выпрямителей
;;;3168   temp_SL=(signed long)adc_buff_[2];
;;;3169   temp_SL*=Kubps;
002ca4  4ff1              LDR      r7,|L1.12396|
002ca6  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002caa  fb01f107          MUL      r1,r1,r7
;;;3170   if(AUSW_MAIN==22010)temp_SL/=400L;
002cae  d102              BNE      |L1.11446|
002cb0  fb91f1fb          SDIV     r1,r1,r11
002cb4  e003              B        |L1.11454|
                  |L1.11446|
;;;3171   else temp_SL/=500L;
002cb6  f44f74fa          MOV      r4,#0x1f4
002cba  fb91f1f4          SDIV     r1,r1,r4
                  |L1.11454|
;;;3172   bps_U=(signed short)temp_SL;
002cbe  4cec              LDR      r4,|L1.12400|
002cc0  b209              SXTH     r1,r1
002cc2  8021              STRH     r1,[r4,#0]
;;;3173   
;;;3174   if(bps_U<100)
002cc4  2964              CMP      r1,#0x64
002cc6  da19              BGE      |L1.11516|
;;;3175   	{
;;;3176   	char i;
;;;3177   	for(i=0;i<NUMIST;i++)
002cc8  f04f0100          MOV      r1,#0
002ccc  46a6              MOV      lr,r4                 ;3172
002cce  4ce9              LDR      r4,|L1.12404|
002cd0  f9b4b000          LDRSH    r11,[r4,#0]
002cd4  e010              B        |L1.11512|
                  |L1.11478|
;;;3178   		{
;;;3179   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002cd6  eb0104c1          ADD      r4,r1,r1,LSL #3
002cda  eb041701          ADD      r7,r4,r1,LSL #4
002cde  4ce6              LDR      r4,|L1.12408|
002ce0  eb040487          ADD      r4,r4,r7,LSL #2
002ce4  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
002ce8  6a24              LDR      r4,[r4,#0x20]
002cea  42bc              CMP      r4,r7
002cec  dd01              BLE      |L1.11506|
002cee  f8ae4000          STRH     r4,[lr,#0]
                  |L1.11506|
002cf2  f1010101          ADD      r1,r1,#1              ;3177
002cf6  b2c9              UXTB     r1,r1                 ;3177
                  |L1.11512|
002cf8  4559              CMP      r1,r11                ;3177
002cfa  dbec              BLT      |L1.11478|
                  |L1.11516|
;;;3180   		}
;;;3181   	}
;;;3182   
;;;3183   //Суммарный ток выпрямителей
;;;3184   temp_SL=0;
002cfc  f04f0b00          MOV      r11,#0
;;;3185   for (i=0;i<NUMIST;i++)
002d00  4659              MOV      r1,r11
002d02  4cdc              LDR      r4,|L1.12404|
002d04  f9b47000          LDRSH    r7,[r4,#0]            ;3177
002d08  4cdb              LDR      r4,|L1.12408|
002d0a  e00b              B        |L1.11556|
                  |L1.11532|
;;;3186   	{
;;;3187   	temp_SL+=((signed long)bps[i]._Ii);
002d0c  eb010ec1          ADD      lr,r1,r1,LSL #3
002d10  eb0e1e01          ADD      lr,lr,r1,LSL #4
002d14  eb040e8e          ADD      lr,r4,lr,LSL #2
002d18  f8dee024          LDR      lr,[lr,#0x24]
002d1c  44f3              ADD      r11,r11,lr
002d1e  f1010101          ADD      r1,r1,#1              ;3185
002d22  b2c9              UXTB     r1,r1                 ;3185
                  |L1.11556|
002d24  42b9              CMP      r1,r7                 ;3185
002d26  dbf1              BLT      |L1.11532|
;;;3188   	}
;;;3189   bps_I=(signed short)temp_SL;
002d28  49d4              LDR      r1,|L1.12412|
002d2a  f8a1b000          STRH     r11,[r1,#0]
;;;3190   
;;;3191   
;;;3192   #endif
;;;3193   
;;;3194   
;;;3195   #ifdef UKU_KONTUR
;;;3196   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3197   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3198   else ND_EXT[0]=1;
;;;3199   temp_SL=(signed long)adc_buff_[5];
;;;3200   temp_SL*=Ktext[0];
;;;3201   temp_SL/=20000L;
;;;3202   temp_SL-=273L;
;;;3203   t_ext[0]=(signed short)temp_SL;
;;;3204   #else 
;;;3205   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3206   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002d2e  49d4              LDR      r1,|L1.12416|
002d30  f6403ab7          MOV      r10,#0xbb7
002d34  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
002d38  49d2              LDR      r1,|L1.12420|
002d3a  f2ab3e21          SUB      lr,r11,#0x321
002d3e  f8cde010          STR      lr,[sp,#0x10]
002d42  45d6              CMP      lr,r10
002d44  d201              BCS      |L1.11594|
002d46  700b              STRB     r3,[r1,#0]
002d48  e000              B        |L1.11596|
                  |L1.11594|
;;;3207   else ND_EXT[0]=1;
002d4a  700a              STRB     r2,[r1,#0]
                  |L1.11596|
;;;3208   temp_SL=(signed long)adc_buff_[5];
;;;3209   temp_SL*=Ktext[0];
002d4c  f8dfa338          LDR      r10,|L1.12424|
002d50  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
002d54  f8cda00c          STR      r10,[sp,#0xc]
002d58  fb0afa0b          MUL      r10,r10,r11
;;;3210   temp_SL/=20000L;
002d5c  f6446e20          MOV      lr,#0x4e20
002d60  fb9afafe          SDIV     r10,r10,lr
;;;3211   temp_SL-=273L;
002d64  f2aa1a11          SUB      r10,r10,#0x111
;;;3212   t_ext[0]=(signed short)temp_SL;
002d68  f8dfe320          LDR      lr,|L1.12428|
002d6c  f8aea000          STRH     r10,[lr,#0]
;;;3213   /*
;;;3214   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3215   else ND_EXT[1]=1;
;;;3216   temp_SL=(signed long)adc_buff_[6];
;;;3217   temp_SL*=Ktext[1];
;;;3218   temp_SL/=20000L;
;;;3219   temp_SL-=273L;
;;;3220   t_ext[1]=(signed short)temp_SL;	*/
;;;3221   #endif
;;;3222   
;;;3223   #ifdef UKU_220
;;;3224   
;;;3225   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3226   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3227   else ND_EXT[1]=1;
;;;3228   temp_SL=(signed long)adc_buff_[3];
;;;3229   temp_SL*=Ktext[1];
;;;3230   temp_SL/=20000L;
;;;3231   temp_SL-=273L;
;;;3232   t_ext[1]=(signed short)temp_SL;
;;;3233   
;;;3234   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3235   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3236   else ND_EXT[2]=1;
;;;3237   temp_SL=(signed long)adc_buff_[10];
;;;3238   temp_SL*=Ktext[2];
;;;3239   temp_SL/=20000L;
;;;3240   temp_SL-=273L;
;;;3241   t_ext[2]=(signed short)temp_SL;
;;;3242   
;;;3243   #else
;;;3244   
;;;3245   
;;;3246   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3247   
;;;3248   //Внешний датчик температуры 
;;;3249   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002d70  f8dda014          LDR      r10,[sp,#0x14]
002d74  f6403eb7          MOV      lr,#0xbb7
002d78  45f2              CMP      r10,lr
002d7a  d201              BCS      |L1.11648|
002d7c  700b              STRB     r3,[r1,#0]
002d7e  e000              B        |L1.11650|
                  |L1.11648|
;;;3250   else ND_EXT[0]=1;
002d80  700a              STRB     r2,[r1,#0]
                  |L1.11650|
;;;3251   temp_SL=(signed long)adc_buff_[6];
;;;3252   temp_SL*=Ktext[0];
002d82  f8dda00c          LDR      r10,[sp,#0xc]
002d86  fb0afa09          MUL      r10,r10,r9
;;;3253   temp_SL/=20000L;
002d8a  f6446920          MOV      r9,#0x4e20
002d8e  fb9af9f9          SDIV     r9,r10,r9
;;;3254   temp_SL-=273L;
002d92  f2a91911          SUB      r9,r9,#0x111
;;;3255   t_ext[0]=(signed short)temp_SL;
002d96  f8dfe2f4          LDR      lr,|L1.12428|
002d9a  f8ae9000          STRH     r9,[lr,#0]
;;;3256   
;;;3257   //Внешний датчик температуры №2
;;;3258   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002d9e  f8dd9010          LDR      r9,[sp,#0x10]
002da2  f6403ab7          MOV      r10,#0xbb7
002da6  45d1              CMP      r9,r10
002da8  d201              BCS      |L1.11694|
002daa  704b              STRB     r3,[r1,#1]
002dac  e000              B        |L1.11696|
                  |L1.11694|
;;;3259   else ND_EXT[1]=1;
002dae  704a              STRB     r2,[r1,#1]
                  |L1.11696|
;;;3260   temp_SL=(signed long)adc_buff_[5];
;;;3261   temp_SL*=Ktext[1];
002db0  4ab5              LDR      r2,|L1.12424|
002db2  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
002db6  fb02f20b          MUL      r2,r2,r11
;;;3262   temp_SL/=20000L;
002dba  f6446920          MOV      r9,#0x4e20
002dbe  fb92f2f9          SDIV     r2,r2,r9
;;;3263   temp_SL-=273L;
002dc2  f2a21211          SUB      r2,r2,#0x111
;;;3264   t_ext[1]=(signed short)temp_SL;
002dc6  fa0ffa82          SXTH     r10,r2
002dca  4ab0              LDR      r2,|L1.12428|
002dcc  f8a2a002          STRH     r10,[r2,#2]
;;;3265   #else
;;;3266   
;;;3267   
;;;3268   
;;;3269   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3270   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3271   else ND_EXT[1]=1;
;;;3272   temp_SL=(signed long)adc_buff_[6];
;;;3273   temp_SL*=Ktext[1];
;;;3274   temp_SL/=20000L;
;;;3275   temp_SL-=273L;
;;;3276   t_ext[1]=(signed short)temp_SL;
;;;3277   
;;;3278   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3279   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3280   else ND_EXT[2]=1;
;;;3281   temp_SL=(signed long)adc_buff_[3];
;;;3282   temp_SL*=Ktext[2];
;;;3283   temp_SL/=20000L;
;;;3284   temp_SL-=273L;
;;;3285   t_ext[2]=(signed short)temp_SL;
;;;3286   
;;;3287   #endif
;;;3288   #endif
;;;3289   
;;;3290   #ifdef UKU_220_V2
;;;3291   
;;;3292   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3293   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3294   else ND_EXT[1]=1;
;;;3295   temp_SL=(signed long)adc_buff_[3];
;;;3296   temp_SL*=Ktext[1];
;;;3297   temp_SL/=20000L;
;;;3298   temp_SL-=273L;
;;;3299   t_ext[1]=(signed short)temp_SL;
;;;3300   
;;;3301   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3302   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3303   else ND_EXT[2]=1;
;;;3304   temp_SL=(signed long)adc_buff_[10];
;;;3305   temp_SL*=Ktext[2];
;;;3306   temp_SL/=20000L;
;;;3307   temp_SL-=273L;
;;;3308   t_ext[2]=(signed short)temp_SL;
;;;3309   
;;;3310   #else
;;;3311   
;;;3312   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3313   //Ток батареи
;;;3314   if(bps[8]._device==dIBAT_METR)
002dd0  f8942320          LDRB     r2,[r4,#0x320]  ; bps
;;;3315   	{
;;;3316   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3317   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3318   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3319   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3320   	if(!bIBAT_SMKLBR)
;;;3321   		{
;;;3322   		signed long temp_SL;
;;;3323   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3324   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3325   		temp_SL*=(signed long)Kibat1[0];
;;;3326   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3327   	
;;;3328   		Ib_ips_termokompensat =(signed short)temp_SL;
002dd4  f8df92b8          LDR      r9,|L1.12432|
002dd8  2a09              CMP      r2,#9                 ;3314
002dda  d15f              BNE      |L1.11932|
002ddc  f8942326          LDRB     r2,[r4,#0x326]        ;3316  ; bps
002de0  f894b327          LDRB     r11,[r4,#0x327]       ;3316  ; bps
002de4  f8dfe2ac          LDR      lr,|L1.12436|
002de8  eb02220b          ADD      r2,r2,r11,LSL #8      ;3316
002dec  f8ce2000          STR      r2,[lr,#0]            ;3316  ; ibat_metr_buff_
002df0  9202              STR      r2,[sp,#8]            ;3316
002df2  f8942328          LDRB     r2,[r4,#0x328]        ;3317  ; bps
002df6  f894b329          LDRB     r11,[r4,#0x329]       ;3317  ; bps
002dfa  eb02220b          ADD      r2,r2,r11,LSL #8      ;3317
002dfe  f8ce2004          STR      r2,[lr,#4]            ;3317  ; ibat_metr_buff_
002e02  f894b32a          LDRB     r11,[r4,#0x32a]       ;3318  ; bps
002e06  f894e32b          LDRB     lr,[r4,#0x32b]        ;3318  ; bps
002e0a  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;3318
002e0e  f8dfe288          LDR      lr,|L1.12440|
002e12  fa0ffb8b          SXTH     r11,r11               ;3318
002e16  f8aeb000          STRH     r11,[lr,#0]           ;3318
002e1a  f1bb0f00          CMP      r11,#0                ;3319
002e1e  d005              BEQ      |L1.11820|
002e20  f8dfb278          LDR      r11,|L1.12444|
002e24  f04f0e32          MOV      lr,#0x32              ;3319
002e28  f8abe000          STRH     lr,[r11,#0]           ;3319
                  |L1.11820|
002e2c  d136              BNE      |L1.11932|
002e2e  f8ddb008          LDR      r11,[sp,#8]           ;3323
002e32  ebab0b02          SUB      r11,r11,r2            ;3324
002e36  4a9a              LDR      r2,|L1.12448|
002e38  f9b22000          LDRSH    r2,[r2,#0]            ;3325  ; Kibat1
002e3c  fb02f20b          MUL      r2,r2,r11             ;3325
002e40  f5a04ba8          SUB      r11,r0,#0x5400        ;3326
002e44  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3326
002e48  d00f              BEQ      |L1.11882|
002e4a  f1bb0b01          SUBS     r11,r11,#1            ;3326
002e4e  d00c              BEQ      |L1.11882|
002e50  4560              CMP      r0,r12                ;3326
002e52  d00a              BEQ      |L1.11882|
002e54  42a8              CMP      r0,r5                 ;3326
002e56  d008              BEQ      |L1.11882|
002e58  f1bb0534          SUBS     r5,r11,#0x34          ;3326
002e5c  d005              BEQ      |L1.11882|
002e5e  3528              ADDS     r5,r5,#0x28           ;3326
002e60  d003              BEQ      |L1.11882|
002e62  3d14              SUBS     r5,r5,#0x14           ;3326
002e64  d001              BEQ      |L1.11882|
002e66  1e6d              SUBS     r5,r5,#1              ;3326
002e68  d103              BNE      |L1.11890|
                  |L1.11882|
002e6a  f44f65fa          MOV      r5,#0x7d0             ;3326
002e6e  fb92f2f5          SDIV     r2,r2,r5              ;3326
                  |L1.11890|
002e72  b215              SXTH     r5,r2
002e74  f8a95000          STRH     r5,[r9,#0]
;;;3329   		if(bIBAT_SMKLBR_cnt)
002e78  f8dfc220          LDR      r12,|L1.12444|
;;;3330   			{
;;;3331   			bIBAT_SMKLBR_cnt--;
;;;3332   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
002e7c  f8dfb224          LDR      r11,|L1.12452|
002e80  f9bc2000          LDRSH    r2,[r12,#0]           ;3329  ; bIBAT_SMKLBR_cnt
002e84  b142              CBZ      r2,|L1.11928|
002e86  f1a20201          SUB      r2,r2,#1              ;3331
002e8a  f8ac2000          STRH     r2,[r12,#0]           ;3331
002e8e  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
002e92  f8a92000          STRH     r2,[r9,#0]
002e96  e001              B        |L1.11932|
                  |L1.11928|
;;;3333   			}
;;;3334   		else 
;;;3335   			{
;;;3336   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
002e98  f8ab5000          STRH     r5,[r11,#0]
                  |L1.11932|
;;;3337   			}
;;;3338   		}
;;;3339   	}
;;;3340   
;;;3341   bat[0]._Ub=load_U;
002e9c  4a82              LDR      r2,|L1.12456|
002e9e  f8a28002          STRH     r8,[r2,#2]
002ea2  f8cd8004          STR      r8,[sp,#4]
;;;3342   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
002ea6  f5a045ac          SUB      r5,r0,#0x5600
002eaa  3d02              SUBS     r5,#2
002eac  d103              BNE      |L1.11958|
002eae  8910              LDRH     r0,[r2,#8]  ; bat
002eb0  f8a90000          STRH     r0,[r9,#0]
002eb4  e002              B        |L1.11964|
                  |L1.11958|
;;;3343   else bat[0]._Ib=Ib_ips_termokompensat;
002eb6  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002eba  8110              STRH     r0,[r2,#8]
                  |L1.11964|
;;;3344   
;;;3345   #endif
;;;3346   #endif
;;;3347   
;;;3348   
;;;3349   #ifdef UKU_TELECORE2015
;;;3350   
;;;3351   //Внешний датчик температуры №1
;;;3352   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3353   else ND_EXT[0]=1;
;;;3354   temp_SL=(signed long)adc_buff_[7];
;;;3355   temp_SL*=Ktext[0];
;;;3356   temp_SL/=20000L;
;;;3357   temp_SL-=273L;
;;;3358   t_ext[0]=(signed short)temp_SL;
;;;3359   
;;;3360   
;;;3361   //Внешний датчик температуры №2
;;;3362   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3363   else ND_EXT[1]=1;
;;;3364   temp_SL=(signed long)adc_buff_[6];
;;;3365   temp_SL*=Ktext[1];
;;;3366   temp_SL/=20000L;
;;;3367   temp_SL-=273L;
;;;3368   t_ext[1]=(signed short)temp_SL;
;;;3369   
;;;3370   #endif
;;;3371   
;;;3372   #ifdef UKU_TELECORE2017
;;;3373   
;;;3374   //Внешний датчик температуры №1
;;;3375   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3376   else ND_EXT[0]=1;
;;;3377   temp_SL=(signed long)adc_buff_[7];
;;;3378   temp_SL*=Ktext[0];
;;;3379   temp_SL/=20000L;
;;;3380   temp_SL-=273L;
;;;3381   t_ext[0]=(signed short)temp_SL;
;;;3382   
;;;3383   
;;;3384   //Внешний датчик температуры №2
;;;3385   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3386   else ND_EXT[1]=1;
;;;3387   temp_SL=(signed long)adc_buff_[6];
;;;3388   temp_SL*=Ktext[1];
;;;3389   temp_SL/=20000L;
;;;3390   temp_SL-=273L;
;;;3391   t_ext[1]=(signed short)temp_SL;
;;;3392   
;;;3393   #endif
;;;3394   
;;;3395   //напряжение ввода
;;;3396   temp_SL=(signed long)adc_buff_ext_[0];
002ebc  f8dfc1ec          LDR      r12,|L1.12460|
002ec0  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;3397   temp_SL*=Kunet_ext[0];
002ec4  f8df81e8          LDR      r8,|L1.12464|
002ec8  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
002ecc  4368              MULS     r0,r5,r0
;;;3398   temp_SL/=4000L;
002ece  f44f6b7a          MOV      r11,#0xfa0
002ed2  fb90f0fb          SDIV     r0,r0,r11
;;;3399   Uvv[0]=(signed short)temp_SL;
002ed6  4d77              LDR      r5,|L1.12468|
002ed8  b280              UXTH     r0,r0
002eda  8028              STRH     r0,[r5,#0]
;;;3400   if(Uvv[0]<100) Uvv0=Uvv[0];
002edc  f8dfe1d8          LDR      lr,|L1.12472|
002ee0  2864              CMP      r0,#0x64
002ee2  d202              BCS      |L1.12010|
002ee4  f8ae0000          STRH     r0,[lr,#0]
002ee8  e003              B        |L1.12018|
                  |L1.12010|
;;;3401   else Uvv0=net_U;
002eea  4874              LDR      r0,|L1.12476|
002eec  8800              LDRH     r0,[r0,#0]  ; net_U
002eee  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12018|
;;;3402   
;;;3403   //напряжение пэс
;;;3404   temp_SL=(signed long)adc_buff_ext_[1];
002ef2  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;3405   temp_SL*=Kunet_ext[1];
002ef6  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
002efa  fb00f00c          MUL      r0,r0,r12
;;;3406   temp_SL/=4000L;
002efe  fb90f0fb          SDIV     r0,r0,r11
;;;3407   Uvv[1]=(signed short)temp_SL;
002f02  8068              STRH     r0,[r5,#2]
;;;3408   
;;;3409   
;;;3410   //напряжение ввода трехфазное
;;;3411   temp_SL=(signed long)eb2_data_short[0];
002f04  4d6e              LDR      r5,|L1.12480|
002f06  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;3412   temp_SL*=Kvv_eb2[0];
002f0a  f8dfc1b8          LDR      r12,|L1.12484|
002f0e  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
002f12  fb08f800          MUL      r8,r8,r0
;;;3413   temp_SL/=6000L;
002f16  f2417070          MOV      r0,#0x1770
002f1a  fb98fbf0          SDIV     r11,r8,r0
;;;3414   Uvv_eb2[0]=(signed short)temp_SL;
002f1e  f8df81a8          LDR      r8,|L1.12488|
002f22  f8a8b000          STRH     r11,[r8,#0]
;;;3415   
;;;3416   temp_SL=(signed long)eb2_data_short[1];
002f26  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;3417   temp_SL*=Kvv_eb2[1];
002f2a  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
002f2e  fb0efe0b          MUL      lr,lr,r11
;;;3418   temp_SL/=6000L;
002f32  fb9efbf0          SDIV     r11,lr,r0
;;;3419   Uvv_eb2[1]=(signed short)temp_SL;
002f36  f8a8b002          STRH     r11,[r8,#2]
;;;3420   
;;;3421   temp_SL=(signed long)eb2_data_short[2];
002f3a  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;3422   temp_SL*=Kvv_eb2[2];
002f3e  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
002f42  fb0cfc0b          MUL      r12,r12,r11
;;;3423   temp_SL/=6000L;
002f46  fb9cfcf0          SDIV     r12,r12,r0
;;;3424   Uvv_eb2[2]=(signed short)temp_SL;
002f4a  f8a8c004          STRH     r12,[r8,#4]
;;;3425   
;;;3426   //напряжение пэс трехфазное
;;;3427   temp_SL=(signed long)eb2_data_short[3];
002f4e  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;3428   temp_SL*=Kpes_eb2[0];
002f52  f8dfc178          LDR      r12,|L1.12492|
002f56  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
002f5a  fb08f80b          MUL      r8,r8,r11
;;;3429   temp_SL/=6000L;
002f5e  fb98fbf0          SDIV     r11,r8,r0
;;;3430   Upes_eb2[0]=(signed short)temp_SL;
002f62  f8df816c          LDR      r8,|L1.12496|
002f66  f8a8b000          STRH     r11,[r8,#0]
;;;3431   
;;;3432   temp_SL=(signed long)eb2_data_short[4];
002f6a  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;3433   temp_SL*=Kpes_eb2[1];
002f6e  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
002f72  fb0efe0b          MUL      lr,lr,r11
;;;3434   temp_SL/=6000L;
002f76  fb9efbf0          SDIV     r11,lr,r0
;;;3435   Upes_eb2[1]=(signed short)temp_SL;
002f7a  f8a8b002          STRH     r11,[r8,#2]
;;;3436   
;;;3437   temp_SL=(signed long)eb2_data_short[5];
002f7e  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;3438   temp_SL*=Kpes_eb2[2];
002f82  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
002f86  fb05f50b          MUL      r5,r5,r11
;;;3439   temp_SL/=6000L;
002f8a  fb95f0f0          SDIV     r0,r5,r0
;;;3440   Upes_eb2[2]=(signed short)temp_SL;
002f8e  f8a80004          STRH     r0,[r8,#4]
;;;3441   
;;;3442   //Вычисление температуры шкафа
;;;3443   
;;;3444   ibt._T[0]=t_ext[1]+273;
002f92  f20a1a11          ADD      r10,r10,#0x111
002f96  fa0ffc8a          SXTH     r12,r10
002f9a  f8dfa138          LDR      r10,|L1.12500|
002f9e  483b              LDR      r0,|L1.12428|
002fa0  f8aac000          STRH     r12,[r10,#0]
;;;3445   ibt._T[1]=t_ext[2]+273;
002fa4  8880              LDRH     r0,[r0,#4]  ; t_ext
002fa6  f2001011          ADD      r0,r0,#0x111
002faa  fa0ff880          SXTH     r8,r0
002fae  f8aa8002          STRH     r8,[r10,#2]
;;;3446   
;;;3447   ibt._nd[0]=ND_EXT[1];
002fb2  784d              LDRB     r5,[r1,#1]  ; ND_EXT
002fb4  f88a5008          STRB     r5,[r10,#8]
;;;3448   ibt._nd[1]=ND_EXT[2];
002fb8  7888              LDRB     r0,[r1,#2]  ; ND_EXT
002fba  f88a0009          STRB     r0,[r10,#9]
;;;3449   
;;;3450   #ifndef UKU_TELECORE2015
;;;3451   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3452   	{
;;;3453   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
002fbe  4946              LDR      r1,|L1.12504|
002fc0  b905              CBNZ     r5,|L1.12228|
002fc2  b110              CBZ      r0,|L1.12234|
                  |L1.12228|
;;;3454   	}
;;;3455   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
002fc4  2d01              CMP      r5,#1
002fc6  d00a              BEQ      |L1.12254|
002fc8  e00a              B        |L1.12256|
                  |L1.12234|
002fca  eb0c0008          ADD      r0,r12,r8             ;3453
002fce  eb0075d0          ADD      r5,r0,r0,LSR #31      ;3453
002fd2  f46f7088          MVN      r0,#0x110             ;3453
002fd6  eb000065          ADD      r0,r0,r5,ASR #1       ;3453
002fda  8008              STRH     r0,[r1,#0]            ;3453
002fdc  e01e              B        |L1.12316|
                  |L1.12254|
002fde  b108              CBZ      r0,|L1.12260|
                  |L1.12256|
;;;3456   	{
;;;3457   	t_box=ibt._T[1]-273;
;;;3458   	}
;;;3459   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
002fe0  b12d              CBZ      r5,|L1.12270|
002fe2  e006              B        |L1.12274|
                  |L1.12260|
002fe4  f2a81811          SUB      r8,r8,#0x111          ;3457
002fe8  f8a18000          STRH     r8,[r1,#0]            ;3457
002fec  e016              B        |L1.12316|
                  |L1.12270|
002fee  2801              CMP      r0,#1
002ff0  d002              BEQ      |L1.12280|
                  |L1.12274|
;;;3460   	{
;;;3461   	t_box=ibt._T[0]-273;
;;;3462   	}
;;;3463   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
002ff2  2d01              CMP      r5,#1
002ff4  d005              BEQ      |L1.12290|
002ff6  e011              B        |L1.12316|
                  |L1.12280|
002ff8  f2ac1c11          SUB      r12,r12,#0x111        ;3461
002ffc  f8a1c000          STRH     r12,[r1,#0]           ;3461
003000  e00c              B        |L1.12316|
                  |L1.12290|
003002  2801              CMP      r0,#1
003004  d10a              BNE      |L1.12316|
;;;3464   	{
;;;3465   	if(t_ext_can_nd<5)t_box= t_ext_can;
003006  4835              LDR      r0,|L1.12508|
003008  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
00300a  2805              CMP      r0,#5
00300c  d203              BCS      |L1.12310|
00300e  4834              LDR      r0,|L1.12512|
003010  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003012  8008              STRH     r0,[r1,#0]
003014  e002              B        |L1.12316|
                  |L1.12310|
;;;3466   	else t_box=20;
003016  f04f0014          MOV      r0,#0x14
00301a  8008              STRH     r0,[r1,#0]
                  |L1.12316|
;;;3467   	}
;;;3468   #endif
;;;3469   /*
;;;3470   //Вычисление температуры шкафа
;;;3471   
;;;3472   ibt._T[0]=bat[0]._Tb+273;
;;;3473   ibt._T[1]=bat[1]._Tb+273;
;;;3474   ibt._T[2]=t_ext[1]+273;
;;;3475   ibt._T[3]=t_ext[2]+273;
;;;3476   
;;;3477   ibt._nd[0]=bat[0]._nd;
;;;3478   ibt._nd[1]=bat[1]._nd;
;;;3479   ibt._nd[2]=ND_EXT[1];
;;;3480   ibt._nd[3]=ND_EXT[2];
;;;3481   
;;;3482   ibt._avg1=0;
;;;3483   ibt._avg_cnt=4;
;;;3484   
;;;3485   if(ibt._nd[0]==0)
;;;3486   	{
;;;3487   	ibt._avg1+=ibt._T[0];
;;;3488   	}
;;;3489   else 
;;;3490   	{
;;;3491   	ibt._avg_cnt--;
;;;3492   	}
;;;3493   
;;;3494   if(ibt._nd[1]==0)
;;;3495   	{
;;;3496   	ibt._avg1+=ibt._T[1];
;;;3497   	}
;;;3498   else 
;;;3499   	{
;;;3500   	ibt._avg_cnt--;
;;;3501   	}
;;;3502   
;;;3503   if(ibt._nd[2]==0)
;;;3504   	{
;;;3505   	ibt._avg1+=ibt._T[2];
;;;3506   	}
;;;3507   else 
;;;3508   	{
;;;3509   	ibt._avg_cnt--;
;;;3510   	}
;;;3511   
;;;3512   if(ibt._nd[3]==0)
;;;3513   	{
;;;3514   	ibt._avg1+=ibt._T[3];
;;;3515   	}
;;;3516   else 
;;;3517   	{
;;;3518   	ibt._avg_cnt--;
;;;3519   	}
;;;3520   
;;;3521   if(ibt._avg_cnt==0)
;;;3522   	{
;;;3523   	}
;;;3524   else
;;;3525   	{
;;;3526   	ibt._avg1/=ibt._avg_cnt;
;;;3527   	}
;;;3528   
;;;3529   
;;;3530   if(ibt._nd[0]!=0)
;;;3531   	{
;;;3532   	ibt._T_dispers[0]=0;
;;;3533   	}
;;;3534   else 
;;;3535   	{
;;;3536   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3537   	}
;;;3538   
;;;3539   if(ibt._nd[1]!=0)
;;;3540   	{
;;;3541   	ibt._T_dispers[1]=0;
;;;3542   	}
;;;3543   else 
;;;3544   	{
;;;3545   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3546   	}
;;;3547   
;;;3548   if(ibt._nd[2]!=0)
;;;3549   	{
;;;3550   	ibt._T_dispers[2]=0;
;;;3551   	}
;;;3552   else 
;;;3553   	{
;;;3554   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3555   	}
;;;3556   
;;;3557   if(ibt._nd[3]!=0)
;;;3558   	{
;;;3559   	ibt._T_dispers[3]=0;
;;;3560   	}
;;;3561   else 
;;;3562   	{
;;;3563   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3564   	}
;;;3565   
;;;3566   if(	ibt._nd[0]&&
;;;3567   	ibt._nd[1]&&
;;;3568   	ibt._nd[2]&&
;;;3569   	ibt._nd[3]
;;;3570   	)
;;;3571   	{
;;;3572   	t_box=(bps[0]._Ti);
;;;3573   	}
;;;3574   
;;;3575   else if(	ibt._nd[0]||
;;;3576   	ibt._nd[1]||
;;;3577   	ibt._nd[2]||
;;;3578   	ibt._nd[3]
;;;3579   	)
;;;3580   	{
;;;3581   	t_box=(ibt._avg1-273);
;;;3582   	}
;;;3583   else 
;;;3584   	{
;;;3585   	ibt._max_dispers_num=0;
;;;3586   	ibt._max_dispers=ibt._T_dispers[0];
;;;3587   
;;;3588   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3589   		{
;;;3590   		ibt._max_dispers_num=1;
;;;3591   		ibt._max_dispers=ibt._T_dispers[1];
;;;3592   		}
;;;3593   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3594   		{
;;;3595   		ibt._max_dispers_num=2;
;;;3596   		ibt._max_dispers=ibt._T_dispers[2];
;;;3597   		}
;;;3598   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3599   		{
;;;3600   		ibt._max_dispers_num=3;
;;;3601   		ibt._max_dispers=ibt._T_dispers[3];
;;;3602   		}
;;;3603   
;;;3604   	ibt._avg2=0;
;;;3605   
;;;3606   	if(ibt._max_dispers_num!=0)
;;;3607   		{
;;;3608   		ibt._avg2+=ibt._T[0];
;;;3609   		}
;;;3610   	if(ibt._max_dispers_num!=1)
;;;3611   		{
;;;3612   		ibt._avg2+=ibt._T[1];
;;;3613   		}
;;;3614   	if(ibt._max_dispers_num!=2)
;;;3615   		{
;;;3616   		ibt._avg2+=ibt._T[2];
;;;3617   		}
;;;3618   	if(ibt._max_dispers_num!=3)
;;;3619   		{
;;;3620   		ibt._avg2+=ibt._T[3];
;;;3621   		}
;;;3622   
;;;3623   	t_box=(ibt._avg2/3)-273;
;;;3624   
;;;3625   	}*/
;;;3626   
;;;3627   
;;;3628   //*********************************************
;;;3629   
;;;3630   #ifndef TELECORE
;;;3631   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
00301c  4931              LDR      r1,|L1.12516|
00301e  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
003020  2855              CMP      r0,#0x55
003022  d105              BNE      |L1.12336|
003024  9801              LDR      r0,[sp,#4]
003026  28c8              CMP      r0,#0xc8
003028  dd02              BLE      |L1.12336|
00302a  8910              LDRH     r0,[r2,#8]  ; bat
00302c  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12336|
;;;3632   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
003030  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
003032  2855              CMP      r0,#0x55
003034  d10b              BNE      |L1.12366|
003036  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
00303a  28c8              CMP      r0,#0xc8
00303c  dd07              BLE      |L1.12366|
00303e  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
003042  f9b21008          LDRSH    r1,[r2,#8]  ; bat
003046  4288              CMP      r0,r1
003048  dd01              BLE      |L1.12366|
00304a  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12366|
;;;3633   #endif
;;;3634   
;;;3635   #ifdef TELECORE
;;;3636   Ibmax=0;
;;;3637   /*
;;;3638   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3639   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3640   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3641   */
;;;3642   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3643   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3644   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3645   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3646   #endif
;;;3647   //Ibmax=bat[0]._Ib;
;;;3648   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3649   
;;;3650   #ifdef UKU_TELECORE2017
;;;3651   Ibmax=0;
;;;3652   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3653   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3654   #endif
;;;3655   
;;;3656   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3657   Ibmax=Ib_ips_termokompensat;
00304e  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
003052  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3658   #endif
;;;3659   for(i=0;i<NUMIST;i++)
003056  f04f0100          MOV      r1,#0
00305a  e075              B        |L1.12616|
                  |L1.12380|
                          DCD      load_U
                  |L1.12384|
                          DCD      Kuout
                  |L1.12388|
                          DCD      AUSW_MAIN
                  |L1.12392|
                          DCD      out_U
                  |L1.12396|
                          DCD      Kubps
                  |L1.12400|
                          DCD      bps_U
                  |L1.12404|
                          DCD      NUMIST
                  |L1.12408|
                          DCD      bps
                  |L1.12412|
                          DCD      bps_I
                  |L1.12416|
                          DCD      ||.bss||+0x40c
                  |L1.12420|
                          DCD      ND_EXT
                  |L1.12424|
                          DCD      Ktext
                  |L1.12428|
                          DCD      t_ext
                  |L1.12432|
                          DCD      Ib_ips_termokompensat
                  |L1.12436|
                          DCD      ibat_metr_buff_
                  |L1.12440|
                          DCD      bIBAT_SMKLBR
                  |L1.12444|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12448|
                          DCD      Kibat1
                  |L1.12452|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.12456|
                          DCD      bat
                  |L1.12460|
                          DCD      adc_buff_ext_
                  |L1.12464|
                          DCD      Kunet_ext
                  |L1.12468|
                          DCD      Uvv
                  |L1.12472|
                          DCD      Uvv0
                  |L1.12476|
                          DCD      net_U
                  |L1.12480|
                          DCD      eb2_data_short
                  |L1.12484|
                          DCD      Kvv_eb2
                  |L1.12488|
                          DCD      Uvv_eb2
                  |L1.12492|
                          DCD      Kpes_eb2
                  |L1.12496|
                          DCD      Upes_eb2
                  |L1.12500|
                          DCD      ibt
                  |L1.12504|
                          DCD      t_box
                  |L1.12508|
                          DCD      t_ext_can_nd
                  |L1.12512|
                          DCD      t_ext_can
                  |L1.12516|
                          DCD      BAT_IS_ON
                  |L1.12520|
;;;3660   	{
;;;3661   	if(bps[i]._cnt<25)
0030e8  eb0100c1          ADD      r0,r1,r1,LSL #3
0030ec  eb001001          ADD      r0,r0,r1,LSL #4
0030f0  eb040080          ADD      r0,r4,r0,LSL #2
0030f4  78c5              LDRB     r5,[r0,#3]
0030f6  2d19              CMP      r5,#0x19
0030f8  d21c              BCS      |L1.12596|
;;;3662        	{
;;;3663        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0030fa  7985              LDRB     r5,[r0,#6]
0030fc  79c6              LDRB     r6,[r0,#7]
0030fe  eb052506          ADD      r5,r5,r6,LSL #8
003102  6245              STR      r5,[r0,#0x24]
;;;3664        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
003104  7a05              LDRB     r5,[r0,#8]
003106  7a46              LDRB     r6,[r0,#9]
003108  eb052506          ADD      r5,r5,r6,LSL #8
00310c  6205              STR      r5,[r0,#0x20]
;;;3665        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
00310e  7a85              LDRB     r5,[r0,#0xa]
003110  7ac6              LDRB     r6,[r0,#0xb]
003112  eb052506          ADD      r5,r5,r6,LSL #8
003116  61c5              STR      r5,[r0,#0x1c]
;;;3666        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
003118  7b05              LDRB     r5,[r0,#0xc]
00311a  6285              STR      r5,[r0,#0x28]
;;;3667        	bps[i]._adr_ee=bps[i]._buff[7];
00311c  7b45              LDRB     r5,[r0,#0xd]
00311e  f8805056          STRB     r5,[r0,#0x56]
;;;3668        	bps[i]._flags_tm=bps[i]._buff[8];
003122  7b85              LDRB     r5,[r0,#0xe]
003124  f8805042          STRB     r5,[r0,#0x42]
;;;3669   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
003128  7c05              LDRB     r5,[r0,#0x10]
00312a  7c46              LDRB     r6,[r0,#0x11]
00312c  eb052506          ADD      r5,r5,r6,LSL #8
003130  6505              STR      r5,[r0,#0x50]
003132  e006              B        |L1.12610|
                  |L1.12596|
;;;3670        	} 
;;;3671   	else 
;;;3672        	{
;;;3673        	bps[i]._Uii=0; 
003134  61c3              STR      r3,[r0,#0x1c]
;;;3674        	bps[i]._Ii=0;
003136  6243              STR      r3,[r0,#0x24]
;;;3675        	bps[i]._Uin=0;
003138  6203              STR      r3,[r0,#0x20]
;;;3676        	bps[i]._Ti=0;
00313a  6283              STR      r3,[r0,#0x28]
;;;3677        	bps[i]._flags_tm=0; 
00313c  f8803042          STRB     r3,[r0,#0x42]
;;;3678   	     bps[i]._rotor=0;    
003140  6503              STR      r3,[r0,#0x50]
                  |L1.12610|
003142  f1010101          ADD      r1,r1,#1              ;3659
003146  b2c9              UXTB     r1,r1                 ;3659
                  |L1.12616|
003148  42b9              CMP      r1,r7                 ;3659
00314a  dbcd              BLT      |L1.12520|
;;;3679        	}
;;;3680        
;;;3681        }
;;;3682   
;;;3683   load_I=0;
00314c  4dfc              LDR      r5,|L1.13632|
;;;3684   #ifdef TELECORE
;;;3685   
;;;3686   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3687   	{
;;;3688   	load_I-=lakb[i]._ch_curr/10;
;;;3689   	}*/
;;;3690   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3691   #elif UKU_TELECORE2017
;;;3692   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3693   #else
;;;3694   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
00314e  f9b21008          LDRSH    r1,[r2,#8]  ; bat
003152  f04f000a          MOV      r0,#0xa
003156  fb91f1f0          SDIV     r1,r1,r0
00315a  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
00315e  fb92f0f0          SDIV     r0,r2,r0
003162  4408              ADD      r0,r0,r1
003164  f1c00000          RSB      r0,r0,#0
003168  b206              SXTH     r6,r0
00316a  802e              STRH     r6,[r5,#0]
;;;3695   #endif
;;;3696   Isumm=0;
00316c  4af5              LDR      r2,|L1.13636|
00316e  8013              STRH     r3,[r2,#0]
;;;3697   
;;;3698   for(i=0;i<NUMIST;i++)
003170  f04f0000          MOV      r0,#0
003174  e012              B        |L1.12700|
                  |L1.12662|
;;;3699        {
;;;3700        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003176  eb0001c0          ADD      r1,r0,r0,LSL #3
00317a  eb011100          ADD      r1,r1,r0,LSL #4
00317e  eb040181          ADD      r1,r4,r1,LSL #2
003182  f891c003          LDRB     r12,[r1,#3]
003186  f1bc0f05          CMP      r12,#5
00318a  d204              BCS      |L1.12694|
00318c  6a49              LDR      r1,[r1,#0x24]
00318e  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
003192  4461              ADD      r1,r1,r12
003194  8011              STRH     r1,[r2,#0]
                  |L1.12694|
003196  f1000001          ADD      r0,r0,#1              ;3698
00319a  b2c0              UXTB     r0,r0                 ;3698
                  |L1.12700|
00319c  42b8              CMP      r0,r7                 ;3698
00319e  dbea              BLT      |L1.12662|
;;;3701        }  
;;;3702        
;;;3703   load_I=load_I+Isumm;
0031a0  8810              LDRH     r0,[r2,#0]  ; Isumm
0031a2  4430              ADD      r0,r0,r6
0031a4  b200              SXTH     r0,r0
0031a6  8028              STRH     r0,[r5,#0]
;;;3704   if(load_I<0)load_I=0;
0031a8  2800              CMP      r0,#0
0031aa  da00              BGE      |L1.12718|
0031ac  802b              STRH     r3,[r5,#0]
                  |L1.12718|
;;;3705   
;;;3706   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3707   load_I=0;
0031ae  802b              STRH     r3,[r5,#0]
;;;3708   
;;;3709   Isumm=0;
0031b0  8013              STRH     r3,[r2,#0]
;;;3710   
;;;3711   for(i=0;i<NUMIST;i++)
0031b2  f04f0000          MOV      r0,#0
0031b6  e00f              B        |L1.12760|
                  |L1.12728|
;;;3712        {
;;;3713        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0031b8  eb0001c0          ADD      r1,r0,r0,LSL #3
0031bc  eb011100          ADD      r1,r1,r0,LSL #4
0031c0  eb040181          ADD      r1,r4,r1,LSL #2
0031c4  78ce              LDRB     r6,[r1,#3]
0031c6  2e05              CMP      r6,#5
0031c8  d203              BCS      |L1.12754|
0031ca  6a49              LDR      r1,[r1,#0x24]
0031cc  8816              LDRH     r6,[r2,#0]  ; Isumm
0031ce  4431              ADD      r1,r1,r6
0031d0  8011              STRH     r1,[r2,#0]
                  |L1.12754|
0031d2  f1000001          ADD      r0,r0,#1              ;3711
0031d6  b2c0              UXTB     r0,r0                 ;3711
                  |L1.12760|
0031d8  42b8              CMP      r0,r7                 ;3711
0031da  dbed              BLT      |L1.12728|
;;;3714        }  
;;;3715        
;;;3716   load_I=load_I+Isumm;
0031dc  8811              LDRH     r1,[r2,#0]  ; Isumm
0031de  eb030001          ADD      r0,r3,r1
0031e2  b200              SXTH     r0,r0
0031e4  8028              STRH     r0,[r5,#0]
;;;3717   if(load_I<0)load_I=0;
0031e6  2800              CMP      r0,#0
0031e8  da00              BGE      |L1.12780|
0031ea  802b              STRH     r3,[r5,#0]
                  |L1.12780|
;;;3718   
;;;3719   #endif
;;;3720   #ifdef IPS_SGEP_GAZPROM
;;;3721   load_I=Isumm;
;;;3722   #endif
;;;3723   
;;;3724   
;;;3725   #ifdef UKU_GLONASS
;;;3726   inv[0]._Uio=6;
;;;3727   if (NUMINV)
;;;3728   	{
;;;3729   	for(i=0;i<NUMINV;i++)
;;;3730   		{
;;;3731   		if(bps[i+first_inv_slot]._cnt<25)
;;;3732        		{
;;;3733        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3734        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3735        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3736        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3737        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3738   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3739   			inv[i]._cnt=0;    
;;;3740        		} 
;;;3741   		else 
;;;3742        		{
;;;3743        		inv[i]._Uio=0; 
;;;3744        		inv[i]._Ii=0;
;;;3745        		inv[i]._Uin=0;
;;;3746        		inv[i]._Ti=0;
;;;3747        		inv[i]._flags_tm=0; 
;;;3748   //	     	inv[i]._rotor0;
;;;3749   			inv[i]._cnt=25;    
;;;3750        		}
;;;3751        	}
;;;3752      	}
;;;3753   #endif
;;;3754   
;;;3755   #ifndef UKU_GLONASS
;;;3756   if (NUMINV)
0031ec  48d6              LDR      r0,|L1.13640|
0031ee  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0031f2  2d00              CMP      r5,#0
0031f4  d066              BEQ      |L1.12996|
;;;3757   	{
;;;3758   	for(i=0;i<NUMINV;i++)
0031f6  f04f0200          MOV      r2,#0
;;;3759   		{
;;;3760   		if(bps[i+20]._cnt<25)
;;;3761        		{
;;;3762        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
0031fa  4ed4              LDR      r6,|L1.13644|
0031fc  e060              B        |L1.12992|
                  |L1.12798|
0031fe  f1020014          ADD      r0,r2,#0x14           ;3760
003202  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3760
003206  eb011000          ADD      r0,r1,r0,LSL #4       ;3760
00320a  eb040080          ADD      r0,r4,r0,LSL #2       ;3760
00320e  78c1              LDRB     r1,[r0,#3]            ;3760
003210  2919              CMP      r1,#0x19              ;3760
003212  d239              BCS      |L1.12936|
003214  7981              LDRB     r1,[r0,#6]
003216  79c7              LDRB     r7,[r0,#7]
003218  eb012707          ADD      r7,r1,r7,LSL #8
00321c  eb020142          ADD      r1,r2,r2,LSL #1
003220  eb061141          ADD      r1,r6,r1,LSL #5
003224  61cf              STR      r7,[r1,#0x1c]
;;;3763        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
003226  7a07              LDRB     r7,[r0,#8]
003228  f890c009          LDRB     r12,[r0,#9]
00322c  eb07270c          ADD      r7,r7,r12,LSL #8
003230  62cf              STR      r7,[r1,#0x2c]
;;;3764        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
003232  7a87              LDRB     r7,[r0,#0xa]
003234  f890c00b          LDRB     r12,[r0,#0xb]
003238  eb07270c          ADD      r7,r7,r12,LSL #8
00323c  618f              STR      r7,[r1,#0x18]
;;;3765        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
00323e  7b07              LDRB     r7,[r0,#0xc]
003240  620f              STR      r7,[r1,#0x20]
;;;3766        		inv[i]._flags_tm=bps[i+20]._buff[7];
003242  7b47              LDRB     r7,[r0,#0xd]
003244  f8817046          STRB     r7,[r1,#0x46]
;;;3767        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
003248  7b87              LDRB     r7,[r0,#0xe]
00324a  f890c00f          LDRB     r12,[r0,#0xf]
00324e  eb07270c          ADD      r7,r7,r12,LSL #8
003252  628f              STR      r7,[r1,#0x28]
;;;3768        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
003254  7c07              LDRB     r7,[r0,#0x10]
003256  f890c011          LDRB     r12,[r0,#0x11]
00325a  eb07270c          ADD      r7,r7,r12,LSL #8
00325e  624f              STR      r7,[r1,#0x24]
;;;3769   			inv[i]._cnt=0;
003260  708b              STRB     r3,[r1,#2]
;;;3770   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
003262  7c87              LDRB     r7,[r0,#0x12]
003264  f8817059          STRB     r7,[r1,#0x59]
;;;3771   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
003268  7cc7              LDRB     r7,[r0,#0x13]
00326a  f881705a          STRB     r7,[r1,#0x5a]
;;;3772   			inv[i]._Pnom=bps[i+20]._buff[14]; 
00326e  7d07              LDRB     r7,[r0,#0x14]
003270  f8817058          STRB     r7,[r1,#0x58]
;;;3773   			inv[i]._net_contr_en=bps[i+20]._buff[15];
003274  7d47              LDRB     r7,[r0,#0x15]
003276  f881705b          STRB     r7,[r1,#0x5b]
;;;3774   			inv[i]._pwm_en=bps[i+20]._buff[16];  
00327a  7d87              LDRB     r7,[r0,#0x16]
00327c  f881705c          STRB     r7,[r1,#0x5c]
;;;3775   			inv[i]._phase_mode=bps[i+20]._buff[17];  
003280  7dc0              LDRB     r0,[r0,#0x17]
003282  f881005d          STRB     r0,[r1,#0x5d]
003286  e018              B        |L1.12986|
                  |L1.12936|
;;;3776        		} 
;;;3777   		else 
;;;3778        		{
;;;3779         		inv[i]._Ii=0;
003288  eb020042          ADD      r0,r2,r2,LSL #1
00328c  eb061040          ADD      r0,r6,r0,LSL #5
003290  61c3              STR      r3,[r0,#0x1c]
;;;3780   			inv[i]._Pio=0;
003292  62c3              STR      r3,[r0,#0x2c]
;;;3781   			inv[i]._Uio=0;
003294  6183              STR      r3,[r0,#0x18]
;;;3782        		inv[i]._Ti=0;
003296  6203              STR      r3,[r0,#0x20]
;;;3783        		inv[i]._flags_tm=0; 
003298  f8803046          STRB     r3,[r0,#0x46]
;;;3784        		inv[i]._Uil=0;
00329c  6243              STR      r3,[r0,#0x24]
;;;3785        		inv[i]._Uin=0;
00329e  6283              STR      r3,[r0,#0x28]
;;;3786   			inv[i]._cnt=25; 
0032a0  f04f0119          MOV      r1,#0x19
0032a4  7081              STRB     r1,[r0,#2]
;;;3787   			inv[i]._Uoutmin=0; 
0032a6  f8803059          STRB     r3,[r0,#0x59]
;;;3788   			inv[i]._Uoutmax=0; 
0032aa  f880305a          STRB     r3,[r0,#0x5a]
;;;3789   			inv[i]._Pnom=0; 
0032ae  f8803058          STRB     r3,[r0,#0x58]
;;;3790   			inv[i]._net_contr_en=0;
0032b2  f880305b          STRB     r3,[r0,#0x5b]
;;;3791   			inv[i]._pwm_en=0;   
0032b6  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.12986|
0032ba  f1020201          ADD      r2,r2,#1              ;3758
0032be  b2d2              UXTB     r2,r2                 ;3758
                  |L1.12992|
0032c0  42aa              CMP      r2,r5                 ;3758
0032c2  db9c              BLT      |L1.12798|
                  |L1.12996|
;;;3792   			   
;;;3793        		}
;;;3794        	}
;;;3795      	}
;;;3796   #endif
;;;3797   
;;;3798   #ifdef GLADKOV
;;;3799   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3800   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3801   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3802   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3803   inv[0]._flags_tm=bps[4]._buff[7];
;;;3804   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3805   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3806   inv[0]._cnt=0;    
;;;3807   
;;;3808   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3809   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3810   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3811   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3812   inv[1]._flags_tm=bps[21]._buff[7];
;;;3813   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3814   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3815   inv[1]._cnt=0;    
;;;3816   #endif
;;;3817   
;;;3818   /*
;;;3819   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3820   	{
;;;3821   	lakb[0]._battCommState=0;
;;;3822   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3823   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3824   	
;;;3825   	if(lakb[0]._battCommState==0)
;;;3826   		{	
;;;3827   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3828   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3829   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3830   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3831   		}
;;;3832   	}
;;;3833   */
;;;3834   
;;;3835   #ifdef UKU_TELECORE2015
;;;3836   
;;;3837   	if(BAT_TYPE==2)
;;;3838   		{
;;;3839   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3840   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3841   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3842   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3843   		
;;;3844   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3845   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3846   	
;;;3847   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3848   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3849   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3850   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3851   	
;;;3852   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3853   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3854   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3855   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3856   	
;;;3857   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3858   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3859   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3860   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3861   	
;;;3862   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3863   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3864   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3865   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3866   	
;;;3867   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3868   	
;;;3869   	
;;;3870   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3871   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3872   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3873   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3874   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3875   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3876   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3877   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3878   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3879   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3880   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3881   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3882   	
;;;3883   		if(lakb[i]._rat_cap==0)
;;;3884   			{
;;;3885   			if(lakb[i]._isOnCnt)
;;;3886   				{
;;;3887   				lakb[i]._isOnCnt--;
;;;3888   				if(lakb[i]._isOnCnt==0)
;;;3889   					{
;;;3890   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3891   					}
;;;3892   				}
;;;3893   			}
;;;3894   		else 
;;;3895   			{
;;;3896   			if(lakb[i]._isOnCnt<50)
;;;3897   				{
;;;3898   				lakb[i]._isOnCnt++;
;;;3899   				if(lakb[i]._isOnCnt==50)
;;;3900   					{
;;;3901   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3902   					}
;;;3903   				}
;;;3904   			}
;;;3905   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3906   		}
;;;3907   	else if(BAT_TYPE==3)
;;;3908   		{
;;;3909   		//short numOfPacks;
;;;3910   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3911   		
;;;3912   		#ifndef UKU_TELECORE2016
;;;3913   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3914   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3915   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3916   		if(numOfPacks)numOfPacks-=1;
;;;3917   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3918   		plazma_numOfCells=numOfCells;
;;;3919   		plazma_numOfTemperCells=numOfTemperCells;
;;;3920   		plazma_numOfPacks=numOfPacks;
;;;3921   
;;;3922   
;;;3923   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3924   
;;;3925   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3926   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3927   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3928   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3929   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3930   							);	  
;;;3931   
;;;3932   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3933   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3934   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3935   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3936   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3937   							)/10;
;;;3938   
;;;3939   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3940   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3941   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3942   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3943   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3944   							)-2730;
;;;3945   
;;;3946   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3947   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3948   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3949   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3950   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3951   							)/10;
;;;3952   
;;;3953   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3954   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3955   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3956   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3957   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3958   							)/10;
;;;3959   		#endif
;;;3960   		
;;;3961   		#ifdef UKU_TELECORE2016
;;;3962   		{
;;;3963   		char i;
;;;3964   		
;;;3965   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3966   			{
;;;3967   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3968   			}
;;;3969   		}
;;;3970   		#endif
;;;3971   		
;;;3972   										  
;;;3973   		}
;;;3974   	
;;;3975   if(sacredSunSilentCnt<3) 
;;;3976   	{
;;;3977       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3978       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3979      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3980   	}
;;;3981   else 
;;;3982   	{
;;;3983       	//bat[0]._Ub=0;
;;;3984       	//bat[0]._Tb=0;
;;;3985      	//bat[0]._Ib=0;
;;;3986   	}
;;;3987   
;;;3988   if(BAT_TYPE==1)
;;;3989   	{
;;;3990   	char i;
;;;3991   	for(i=0;i<1;i++)
;;;3992   		{
;;;3993   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3994   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3995   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3996   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3997   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;3998   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3999   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4000   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4001   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4002   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4003   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4004   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4005   		lakb[i]._flags1= lakb_damp[i][34];
;;;4006   		lakb[i]._flags2= lakb_damp[i][35];
;;;4007   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4008   
;;;4009   /*		if(lakb[i]._rat_cap==0)
;;;4010   			{
;;;4011   			if(lakb[i]._isOnCnt)
;;;4012   				{
;;;4013   				lakb[i]._isOnCnt--;
;;;4014   				if(lakb[i]._isOnCnt==0)
;;;4015   					{
;;;4016   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4017   					}
;;;4018   				}
;;;4019   			}
;;;4020   		else 
;;;4021   			{
;;;4022   			if(lakb[i]._isOnCnt<50)
;;;4023   				{
;;;4024   				lakb[i]._isOnCnt++;
;;;4025   				if(lakb[i]._isOnCnt==50)
;;;4026   					{
;;;4027   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4028   					}
;;;4029   				}
;;;4030   			} */
;;;4031   		gran(&lakb[i]._isOnCnt,0,50);
;;;4032   	 	}
;;;4033   
;;;4034   	if(lakb_damp[0][41]==100)
;;;4035   		{
;;;4036   		li_bat._485Error=1;
;;;4037   		}
;;;4038   	if(lakb_damp[0][41]==0)
;;;4039   		{
;;;4040   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4041   		li_bat._485Error=0;
;;;4042   		}
;;;4043   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4044   
;;;4045   
;;;4046   	}
;;;4047   
;;;4048   
;;;4049   #endif
;;;4050   
;;;4051   		#ifdef UKU_TELECORE2017
;;;4052   		{
;;;4053   		char i;
;;;4054   		
;;;4055   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4056   			{
;;;4057   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4058   			}
;;;4059   		}
;;;4060   		#endif
;;;4061   #ifdef UKU_TELECORE2015
;;;4062   //вычисление параметров работы батареи
;;;4063   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4064   li_bat._batStat=bsOK;
;;;4065   if(BAT_TYPE==1) //COSLIGHT
;;;4066   	{
;;;4067   	if(li_bat._batStat==bsOK)
;;;4068   		{
;;;4069   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4070   
;;;4071   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4072   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4073   	
;;;4074   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4075   		li_bat._soc=lakb[0]._s_o_c;
;;;4076   		li_bat._soh=lakb[0]._s_o_h;
;;;4077   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4078   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4079   		li_bat._rbt=lakb[0]._r_b_t;
;;;4080   		}
;;;4081   	else 
;;;4082   		{
;;;4083   		li_bat._Ub=bat[0]._Ub;
;;;4084   		li_bat._Ib=bat[0]._Ib/10;
;;;4085   		li_bat._Tb=bat[0]._Tb;
;;;4086   		}
;;;4087   
;;;4088   	if((li_bat._485Error)||(li_bat._canError))
;;;4089   		{
;;;4090   		li_bat._batStat=bsOFF;
;;;4091   		}
;;;4092   	else li_bat._batStat=bsOK;
;;;4093   	}
;;;4094   else if(BAT_TYPE==2) //SACRED SUN
;;;4095   	{
;;;4096   	}
;;;4097   else if(BAT_TYPE==3) //ZTT
;;;4098   	{
;;;4099   	if(li_bat._batStat==bsOK)
;;;4100   		{
;;;4101   
;;;4102   		}
;;;4103   	}
;;;4104   #endif
;;;4105   
;;;4106   
;;;4107   /*
;;;4108   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4109   	{
;;;4110   
;;;4111   
;;;4112   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4113   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4114   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4115   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4116   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4117   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4118   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4119   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4120   
;;;4121   	tempSS=0;
;;;4122   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4123   
;;;4124   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4125   
;;;4126   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4127   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4128   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4129   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4130   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4131   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4132   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4133   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4134   
;;;4135   	tempSS=0;
;;;4136   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4137   
;;;4138   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4139   
;;;4140   
;;;4141   	}*/
;;;4142   }
0032c4  b007              ADD      sp,sp,#0x1c
0032c6  e8bd8ff0          POP      {r4-r11,pc}
;;;4143   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4203   //-----------------------------------------------
;;;4204   void mnemo_hndl(void)
0032ca  4aa1              LDR      r2,|L1.13648|
;;;4205   {
;;;4206   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4207   	{
;;;4208   	if(mnemo_cnt)mnemo_cnt--;
0032cc  49a1              LDR      r1,|L1.13652|
0032ce  7810              LDRB     r0,[r2,#0]            ;4206  ; a_ind
0032d0  2804              CMP      r0,#4                 ;4206
0032d2  d001              BEQ      |L1.13016|
0032d4  2801              CMP      r0,#1                 ;4206
0032d6  d105              BNE      |L1.13028|
                  |L1.13016|
0032d8  7850              LDRB     r0,[r2,#1]            ;4206  ; a_ind
0032da  b918              CBNZ     r0,|L1.13028|
0032dc  489e              LDR      r0,|L1.13656|
0032de  7800              LDRB     r0,[r0,#0]            ;4206  ; MNEMO_ON
0032e0  2855              CMP      r0,#0x55              ;4206
0032e2  d003              BEQ      |L1.13036|
                  |L1.13028|
;;;4209   	}
;;;4210   else mnemo_cnt=MNEMO_TIME;
0032e4  489d              LDR      r0,|L1.13660|
0032e6  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0032e8  7008              STRB     r0,[r1,#0]
                  |L1.13034|
;;;4211   }
0032ea  4770              BX       lr
                  |L1.13036|
0032ec  7808              LDRB     r0,[r1,#0]            ;4208  ; mnemo_cnt
0032ee  2800              CMP      r0,#0                 ;4208
0032f0  d0fb              BEQ      |L1.13034|
0032f2  f1a00001          SUB      r0,r0,#1              ;4208
0032f6  7008              STRB     r0,[r1,#0]            ;4208
0032f8  4770              BX       lr
;;;4212   
                          ENDP

                  apv_start PROC
;;;4213   //-----------------------------------------------
;;;4214   void apv_start(char in)
0032fa  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4215   {
;;;4216   if(	(bps[in]._apv_timer_1_lev==0)&&
0032fe  eb011100          ADD      r1,r1,r0,LSL #4
003302  4897              LDR      r0,|L1.13664|
003304  eb000081          ADD      r0,r0,r1,LSL #2
003308  f890105e          LDRB     r1,[r0,#0x5e]
00330c  2900              CMP      r1,#0
00330e  d115              BNE      |L1.13116|
;;;4217   	(bps[in]._apv_cnt_1_lev==0)&&
003310  f890105f          LDRB     r1,[r0,#0x5f]
003314  2900              CMP      r1,#0
003316  d111              BNE      |L1.13116|
;;;4218   	(bps[in]._apv_timer_2_lev==0) )
003318  f8b01060          LDRH     r1,[r0,#0x60]
00331c  2900              CMP      r1,#0
00331e  d10d              BNE      |L1.13116|
;;;4219   		{
;;;4220    		bps[in]._apv_timer_1_lev=60;
003320  f04f013c          MOV      r1,#0x3c
003324  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4221   		bps[in]._apv_cnt_1_lev=3;
003328  f04f0103          MOV      r1,#3
00332c  7041              STRB     r1,[r0,#1]
;;;4222   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00332e  498d              LDR      r1,|L1.13668|
003330  f44f6261          MOV      r2,#0xe10
003334  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
003336  fb01f102          MUL      r1,r1,r2
00333a  8041              STRH     r1,[r0,#2]
                  |L1.13116|
;;;4223   		}
;;;4224   }
00333c  4770              BX       lr
;;;4225   
                          ENDP

                  apv_stop PROC
;;;4226   //-----------------------------------------------
;;;4227   void apv_stop(char in)
00333e  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4228   {
;;;4229   bps[in]._apv_timer_1_lev=0;
003342  eb021200          ADD      r2,r2,r0,LSL #4
003346  4886              LDR      r0,|L1.13664|
003348  f04f0100          MOV      r1,#0
00334c  eb000082          ADD      r0,r0,r2,LSL #2
003350  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4230   bps[in]._apv_cnt_1_lev=0;
003354  7041              STRB     r1,[r0,#1]
;;;4231   bps[in]._apv_timer_2_lev=0;
003356  8041              STRH     r1,[r0,#2]
;;;4232   }
003358  4770              BX       lr
;;;4233   
                          ENDP

                  apv_drv PROC
;;;4234   //-----------------------------------------------
;;;4235   void apv_drv(void)		//1 Гц
00335a  e92d43f0          PUSH     {r4-r9,lr}
;;;4236   {
;;;4237   for(i=0;i<NUMIST;i++)
00335e  4e82              LDR      r6,|L1.13672|
003360  f04f0300          MOV      r3,#0
003364  75f3              STRB     r3,[r6,#0x17]
;;;4238   	{
;;;4239   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4240   		{
;;;4241   		bps[i]._apv_timer_1_lev=0;
;;;4242   		bps[i]._apv_cnt_1_lev=0;
;;;4243   		bps[i]._apv_timer_2_lev=0;
;;;4244   		}
;;;4245   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
003366  4c81              LDR      r4,|L1.13676|
;;;4246   		{
;;;4247   		bps[i]._apv_timer_2_lev=0;
;;;4248   		}
;;;4249   
;;;4250   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4251   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4252   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4253   			{
;;;4254   			if(bps[i]._state==bsWRK)
;;;4255   				{
;;;4256   				if(bps[i]._apv_succes_timer<60)
;;;4257   					{
;;;4258   					bps[i]._apv_succes_timer++;
;;;4259   					if(bps[i]._apv_succes_timer>=60)
;;;4260   						{
;;;4261   						apv_stop(i);
;;;4262   						}
;;;4263   					}
;;;4264   				}
;;;4265   			else bps[i]._apv_succes_timer=0;
;;;4266   			}
;;;4267   
;;;4268   	if(bps[i]._apv_timer_1_lev)
;;;4269   		{
;;;4270   		bps[i]._apv_timer_2_lev=0;
;;;4271   		bps[i]._apv_timer_1_lev--;
;;;4272   		if(bps[i]._apv_timer_1_lev==0)
;;;4273   			{
;;;4274   			if(bps[i]._apv_cnt_1_lev)
;;;4275   				{
;;;4276   				bps[i]._apv_cnt_1_lev--;
;;;4277   				bps[i]._apv_timer_1_lev=60;
003368  f04f073c          MOV      r7,#0x3c
;;;4278   				bps[i]._apv_reset_av_timer=2;
00336c  f04f0802          MOV      r8,#2
003370  4d7b              LDR      r5,|L1.13664|
003372  f8df91fc          LDR      r9,|L1.13680|
003376  e079              B        |L1.13420|
                  |L1.13176|
003378  497e              LDR      r1,|L1.13684|
00337a  7809              LDRB     r1,[r1,#0]            ;4239  ; APV_ON1
00337c  b949              CBNZ     r1,|L1.13202|
00337e  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4241
003382  eb011100          ADD      r1,r1,r0,LSL #4       ;4241
003386  eb050181          ADD      r1,r5,r1,LSL #2       ;4241
00338a  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4241
00338e  704b              STRB     r3,[r1,#1]            ;4242
003390  804b              STRH     r3,[r1,#2]            ;4243
                  |L1.13202|
003392  7821              LDRB     r1,[r4,#0]            ;4245  ; APV_ON2
003394  b939              CBNZ     r1,|L1.13222|
003396  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4247
00339a  eb011100          ADD      r1,r1,r0,LSL #4       ;4247
00339e  eb050181          ADD      r1,r5,r1,LSL #2       ;4247
0033a2  f8a13060          STRH     r3,[r1,#0x60]         ;4247
                  |L1.13222|
0033a6  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4250
0033aa  eb011100          ADD      r1,r1,r0,LSL #4       ;4250
0033ae  eb050181          ADD      r1,r5,r1,LSL #2       ;4250
0033b2  f891205e          LDRB     r2,[r1,#0x5e]         ;4250
0033b6  b92a              CBNZ     r2,|L1.13252|
0033b8  f891205f          LDRB     r2,[r1,#0x5f]         ;4251
0033bc  b912              CBNZ     r2,|L1.13252|
0033be  f8b12060          LDRH     r2,[r1,#0x60]         ;4252
0033c2  b122              CBZ      r2,|L1.13262|
                  |L1.13252|
0033c4  788a              LDRB     r2,[r1,#2]            ;4254
0033c6  2a01              CMP      r2,#1                 ;4254
0033c8  d014              BEQ      |L1.13300|
0033ca  f8813063          STRB     r3,[r1,#0x63]         ;4265
                  |L1.13262|
0033ce  7df1              LDRB     r1,[r6,#0x17]         ;4268  ; i
0033d0  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4268
0033d4  eb001001          ADD      r0,r0,r1,LSL #4       ;4268
0033d8  eb050080          ADD      r0,r5,r0,LSL #2       ;4268
0033dc  f890205e          LDRB     r2,[r0,#0x5e]         ;4268
0033e0  b30a              CBZ      r2,|L1.13350|
0033e2  f8a03060          STRH     r3,[r0,#0x60]         ;4270
0033e6  f1a20201          SUB      r2,r2,#1              ;4271
0033ea  b2d2              UXTB     r2,r2                 ;4271
0033ec  f880205e          STRB     r2,[r0,#0x5e]         ;4271
0033f0  b172              CBZ      r2,|L1.13328|
0033f2  e024              B        |L1.13374|
                  |L1.13300|
0033f4  f8912063          LDRB     r2,[r1,#0x63]         ;4256
0033f8  2a3c              CMP      r2,#0x3c              ;4256
0033fa  d2e8              BCS      |L1.13262|
0033fc  f1020201          ADD      r2,r2,#1              ;4258
003400  b2d2              UXTB     r2,r2                 ;4258
003402  f8812063          STRB     r2,[r1,#0x63]         ;4258
003406  2a3c              CMP      r2,#0x3c              ;4259
003408  d3e1              BCC      |L1.13262|
00340a  f7fffffe          BL       apv_stop
00340e  e7de              B        |L1.13262|
                  |L1.13328|
003410  f890205f          LDRB     r2,[r0,#0x5f]         ;4274
003414  b142              CBZ      r2,|L1.13352|
003416  f1a20201          SUB      r2,r2,#1              ;4276
00341a  f880205f          STRB     r2,[r0,#0x5f]         ;4276
00341e  f880705e          STRB     r7,[r0,#0x5e]         ;4277
003422  f8808062          STRB     r8,[r0,#0x62]
                  |L1.13350|
003426  e00a              B        |L1.13374|
                  |L1.13352|
;;;4279   				}
;;;4280   			else
;;;4281   				{
;;;4282   				if(APV_ON2==apvON)
003428  7822              LDRB     r2,[r4,#0]  ; APV_ON2
00342a  2a01              CMP      r2,#1
00342c  d107              BNE      |L1.13374|
;;;4283   					{
;;;4284   					bps[i]._apv_timer_1_lev=0;
;;;4285   					bps[i]._apv_cnt_1_lev=0;
;;;4286   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00342e  4a4d              LDR      r2,|L1.13668|
003430  f44f6c61          MOV      r12,#0xe10
003434  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
003436  fb02f20c          MUL      r2,r2,r12
00343a  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.13374|
;;;4287   					}
;;;4288   				}
;;;4289   			
;;;4290   			}
;;;4291   		}
;;;4292   	if(bps[i]._apv_timer_2_lev)
00343e  f8b02060          LDRH     r2,[r0,#0x60]
003442  b14a              CBZ      r2,|L1.13400|
;;;4293   		{
;;;4294   		bps[i]._apv_timer_2_lev--;
003444  f1a20201          SUB      r2,r2,#1
003448  b292              UXTH     r2,r2
00344a  f8a02060          STRH     r2,[r0,#0x60]
;;;4295   		if(bps[i]._apv_timer_2_lev==0)
00344e  b91a              CBNZ     r2,|L1.13400|
;;;4296   			{
;;;4297   			bps[i]._apv_cnt_1_lev=2;
003450  f880805f          STRB     r8,[r0,#0x5f]
;;;4298   			bps[i]._apv_timer_1_lev=60;
003454  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.13400|
;;;4299   			}
;;;4300   		}
;;;4301   
;;;4302   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
003458  f8902062          LDRB     r2,[r0,#0x62]
00345c  b11a              CBZ      r2,|L1.13414|
00345e  f1a20201          SUB      r2,r2,#1
003462  f8802062          STRB     r2,[r0,#0x62]
                  |L1.13414|
003466  f1010101          ADD      r1,r1,#1              ;4237
00346a  75f1              STRB     r1,[r6,#0x17]         ;4237
                  |L1.13420|
00346c  7df0              LDRB     r0,[r6,#0x17]         ;4237  ; i
00346e  f9b91000          LDRSH    r1,[r9,#0]            ;4237  ; NUMIST
003472  4288              CMP      r0,r1                 ;4237
003474  db80              BLT      |L1.13176|
;;;4303   	} 
;;;4304   /*char i;
;;;4305   for(i=0;i<2;i++) 
;;;4306   	{
;;;4307   	if(apv_cnt_sec[i])
;;;4308   		{
;;;4309   		apv_cnt_sec[i]--;
;;;4310   		if(apv_cnt_sec[i]==0)
;;;4311   			{
;;;4312   			cnt_av_umax[i]=0;
;;;4313   			cnt_av_umin[i]=0;
;;;4314   			reset_apv_cnt[i]=600;
;;;4315   			}
;;;4316   		}
;;;4317   	
;;;4318   	if(reset_apv_cnt[i])
;;;4319   		{
;;;4320   		reset_apv_cnt[i]--;
;;;4321   		if(reset_apv_cnt[i]==0)
;;;4322   			{
;;;4323   			apv_cnt[i]=0;
;;;4324   			}
;;;4325   		}	
;;;4326   		
;;;4327   	if(hour_apv_cnt[i])
;;;4328   		{
;;;4329   		hour_apv_cnt[i]--;
;;;4330   		if(hour_apv_cnt[i]==0)
;;;4331   			{
;;;4332   			apv_cnt[i]=0;
;;;4333   			avar_src_reset(i);
;;;4334   			}
;;;4335   		}			
;;;4336   	}
;;;4337   
;;;4338   
;;;4339   
;;;4340   
;;;4341   if(apv_cnt_1)
;;;4342   	{
;;;4343   	apv_cnt_1--;
;;;4344   	if(!apv_cnt_1) 
;;;4345   		{
;;;4346   		avar_src_reset(0);
;;;4347   		avar_src_reset(1);
;;;4348   		//cntrl_stat=0;
;;;4349   		}
;;;4350   	}*/		
;;;4351   }
003476  e8bd83f0          POP      {r4-r9,pc}
;;;4352   
                          ENDP

                  adc_init PROC
;;;4353   //-----------------------------------------------
;;;4354   void adc_init(void)
00347a  483f              LDR      r0,|L1.13688|
;;;4355   {
;;;4356   
;;;4357   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
00347c  6841              LDR      r1,[r0,#4]
00347e  f4212140          BIC      r1,r1,#0xc0000
003482  f4412180          ORR      r1,r1,#0x40000
003486  6041              STR      r1,[r0,#4]
;;;4358   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
003488  6841              LDR      r1,[r0,#4]
00348a  f4213140          BIC      r1,r1,#0x30000
00348e  f4413180          ORR      r1,r1,#0x10000
003492  6041              STR      r1,[r0,#4]
;;;4359   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
003494  6841              LDR      r1,[r0,#4]
003496  f4214140          BIC      r1,r1,#0xc000
00349a  f4414180          ORR      r1,r1,#0x4000
00349e  6041              STR      r1,[r0,#4]
;;;4360   
;;;4361   
;;;4362   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0034a0  6c41              LDR      r1,[r0,#0x44]
0034a2  f4212140          BIC      r1,r1,#0xc0000
0034a6  f4412100          ORR      r1,r1,#0x80000
0034aa  6441              STR      r1,[r0,#0x44]
;;;4363   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0034ac  6c41              LDR      r1,[r0,#0x44]
0034ae  f4213140          BIC      r1,r1,#0x30000
0034b2  f4413100          ORR      r1,r1,#0x20000
0034b6  6441              STR      r1,[r0,#0x44]
;;;4364   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0034b8  6c41              LDR      r1,[r0,#0x44]
0034ba  f4214140          BIC      r1,r1,#0xc000
0034be  f4414100          ORR      r1,r1,#0x8000
0034c2  6441              STR      r1,[r0,#0x44]
;;;4365   
;;;4366   SET_REG(LPC_ADC->ADCR,0,24,3);
0034c4  482d              LDR      r0,|L1.13692|
0034c6  6801              LDR      r1,[r0,#0]
0034c8  f02161e0          BIC      r1,r1,#0x7000000
0034cc  6001              STR      r1,[r0,#0]
;;;4367   
;;;4368   SET_REG(LPC_ADC->ADCR,1,21,1);
0034ce  6801              LDR      r1,[r0,#0]
0034d0  f4411100          ORR      r1,r1,#0x200000
0034d4  6001              STR      r1,[r0,#0]
;;;4369   SET_REG(LPC_ADC->ADCR,0,16,1);
0034d6  6801              LDR      r1,[r0,#0]
0034d8  f4213180          BIC      r1,r1,#0x10000
0034dc  6001              STR      r1,[r0,#0]
;;;4370   SET_REG(LPC_ADC->ADCR,1,8,8);
0034de  6801              LDR      r1,[r0,#0]
0034e0  f421417f          BIC      r1,r1,#0xff00
0034e4  f4417180          ORR      r1,r1,#0x100
0034e8  6001              STR      r1,[r0,#0]
;;;4371   
;;;4372   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4373   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4374   	
;;;4375   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4376        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4377        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4378   
;;;4379   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
0034ea  f44f7180          MOV      r1,#0x100
0034ee  60c1              STR      r1,[r0,#0xc]
0034f0  4823              LDR      r0,|L1.13696|
0034f2  f44f0180          MOV      r1,#0x400000
0034f6  6001              STR      r1,[r0,#0]
;;;4380   
;;;4381   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4382   
;;;4383   
;;;4384   }
0034f8  4770              BX       lr
;;;4385   
                          ENDP

                  adc_drv7 PROC
;;;4386   //-----------------------------------------------
;;;4387   void adc_drv7(void) //(Uсети - постоянка)
0034fa  e92d41f0          PUSH     {r4-r8,lr}
;;;4388   {
;;;4389   //int temp_S;
;;;4390   //char i;
;;;4391   //signed short temp_SS;
;;;4392   
;;;4393   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
0034fe  4c1a              LDR      r4,|L1.13672|
003500  34ee              ADDS     r4,r4,#0xee
003502  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003504  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003506  1a40              SUBS     r0,r0,r1
003508  b200              SXTH     r0,r0
00350a  f7fffffe          BL       abs_pal
00350e  1da6              ADDS     r6,r4,#6
003510  8030              STRH     r0,[r6,#0]
;;;4394   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003512  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003514  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
003516  1a40              SUBS     r0,r0,r1
003518  b200              SXTH     r0,r0
00351a  f7fffffe          BL       abs_pal
00351e  8070              STRH     r0,[r6,#2]
;;;4395   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
003520  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003522  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003524  1a40              SUBS     r0,r0,r1
003526  b200              SXTH     r0,r0
003528  f7fffffe          BL       abs_pal
00352c  80b0              STRH     r0,[r6,#4]
;;;4396   
;;;4397   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4398   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4399   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4400   
;;;4401   
;;;4402   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
00352e  f44f7196          MOV      r1,#0x12c
;;;4403   	{
;;;4404   	adc_result=adc_self_ch_buff[2];
003532  4d0d              LDR      r5,|L1.13672|
003534  4288              CMP      r0,r1                 ;4402
003536  da25              BGE      |L1.13700|
003538  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00353a  87a8              STRH     r0,[r5,#0x3c]
00353c  e02f              B        |L1.13726|
00353e  0000              DCW      0x0000
                  |L1.13632|
                          DCD      load_I
                  |L1.13636|
                          DCD      Isumm
                  |L1.13640|
                          DCD      NUMINV
                  |L1.13644|
                          DCD      inv
                  |L1.13648|
                          DCD      a_ind
                  |L1.13652|
                          DCD      mnemo_cnt
                  |L1.13656|
                          DCD      MNEMO_ON
                  |L1.13660|
                          DCD      MNEMO_TIME
                  |L1.13664|
                          DCD      bps
                  |L1.13668|
                          DCD      APV_ON2_TIME
                  |L1.13672|
                          DCD      ||area_number.25||
                  |L1.13676|
                          DCD      APV_ON2
                  |L1.13680|
                          DCD      NUMIST
                  |L1.13684|
                          DCD      APV_ON1
                  |L1.13688|
                          DCD      0x4002c000
                  |L1.13692|
                          DCD      0x40034000
                  |L1.13696|
                          DCD      0xe000e100
                  |L1.13700|
;;;4405   	} 
;;;4406   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
003584  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
003588  4288              CMP      r0,r1
00358a  da02              BGE      |L1.13714|
;;;4407   	{
;;;4408   	adc_result=adc_self_ch_buff[1];
00358c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00358e  87a8              STRH     r0,[r5,#0x3c]
003590  e005              B        |L1.13726|
                  |L1.13714|
;;;4409   	}
;;;4410   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
003592  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
003596  4288              CMP      r0,r1
003598  da01              BGE      |L1.13726|
;;;4411   	{
;;;4412   	adc_result=adc_self_ch_buff[0];
00359a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00359c  87a8              STRH     r0,[r5,#0x3c]
                  |L1.13726|
;;;4413   	}
;;;4414       //adc_result=92;
;;;4415   
;;;4416   if(adc_ch_net)
00359e  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
0035a0  2600              MOVS     r6,#0
0035a2  b347              CBZ      r7,|L1.13814|
;;;4417   	{
;;;4418   
;;;4419   	main_power_buffer[0]+=(long)(adc_result);
0035a4  48f8              LDR      r0,|L1.14728|
0035a6  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0035aa  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0035ac  440a              ADD      r2,r2,r1
0035ae  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4420   	main_power_buffer[1]+=(long)(adc_result);
0035b0  6842              LDR      r2,[r0,#4]  ; main_power_buffer
0035b2  440a              ADD      r2,r2,r1
0035b4  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4421   	main_power_buffer[2]+=(long)(adc_result);
0035b6  6882              LDR      r2,[r0,#8]  ; main_power_buffer
0035b8  440a              ADD      r2,r2,r1
0035ba  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4422   	main_power_buffer[3]+=(long)(adc_result);
0035bc  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
0035be  4411              ADD      r1,r1,r2
0035c0  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4423   
;;;4424   	adc_net_buff_cnt++;
0035c2  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
0035c6  f1010101          ADD      r1,r1,#1
0035ca  b209              SXTH     r1,r1
0035cc  f8a51044          STRH     r1,[r5,#0x44]
;;;4425   	if(adc_net_buff_cnt>=0x1000)
0035d0  f5b15f80          CMP      r1,#0x1000
0035d4  db01              BLT      |L1.13786|
;;;4426   		{
;;;4427   		adc_net_buff_cnt=0;
0035d6  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.13786|
;;;4428   		}
;;;4429   	if((adc_net_buff_cnt&0x03ff)==0)
0035da  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
0035de  058a              LSLS     r2,r1,#22
0035e0  d131              BNE      |L1.13894|
;;;4430   		{
;;;4431   		#ifdef UKU_220
;;;4432   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4433   		#else
;;;4434   		#ifdef UKU_220_V2
;;;4435   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4436   		#else
;;;4437   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0035e2  ea4f21a1          ASR      r1,r1,#10
0035e6  f8502021          LDR      r2,[r0,r1,LSL #2]
0035ea  ea4f2222          ASR      r2,r2,#8
0035ee  876a              STRH     r2,[r5,#0x3a]
;;;4438   		#endif
;;;4439   		#endif
;;;4440   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0035f0  f8406021          STR      r6,[r0,r1,LSL #2]
0035f4  e027              B        |L1.13894|
                  |L1.13814|
;;;4441   		}
;;;4442   
;;;4443   
;;;4444   	} 
;;;4445   else if(!adc_ch_net)
;;;4446   	{
;;;4447   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
0035f6  48e5              LDR      r0,|L1.14732|
0035f8  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
0035fa  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
0035fc  eb001384          ADD      r3,r0,r4,LSL #6
003600  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
003604  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4448   	
;;;4449   	if((adc_ch_cnt&0x03)==0)
003608  0790              LSLS     r0,r2,#30
00360a  d10f              BNE      |L1.13868|
;;;4450   		{
;;;4451   		long temp_L;
;;;4452   		char i;
;;;4453   		temp_L=0;
00360c  4601              MOV      r1,r0
                  |L1.13838|
;;;4454   		for(i=0;i<16;i++)
;;;4455   			{
;;;4456   			temp_L+=adc_buff[adc_ch][i];
00360e  f853c020          LDR      r12,[r3,r0,LSL #2]
003612  4461              ADD      r1,r1,r12
003614  f1000001          ADD      r0,r0,#1              ;4454
003618  b2c0              UXTB     r0,r0                 ;4454
00361a  2810              CMP      r0,#0x10              ;4454
00361c  d3f7              BCC      |L1.13838|
;;;4457   			}
;;;4458   		adc_buff_[adc_ch]= (short)(temp_L>>4);
00361e  ea4f1021          ASR      r0,r1,#4
003622  49d9              LDR      r1,|L1.14728|
003624  f1a10120          SUB      r1,r1,#0x20
003628  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.13868|
;;;4459   
;;;4460   		//adc_buff_[3]=346;
;;;4461   		}
;;;4462   	if(++adc_ch>=16) 
00362c  1c64              ADDS     r4,r4,#1
00362e  b2e0              UXTB     r0,r4
003630  74a8              STRB     r0,[r5,#0x12]
003632  2810              CMP      r0,#0x10
003634  d307              BCC      |L1.13894|
;;;4463   		{
;;;4464   		adc_ch=0;
003636  74ae              STRB     r6,[r5,#0x12]
;;;4465   		adc_ch_cnt++;
003638  f1020201          ADD      r2,r2,#1
00363c  b2d0              UXTB     r0,r2
00363e  74e8              STRB     r0,[r5,#0x13]
;;;4466   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003640  2810              CMP      r0,#0x10
003642  d300              BCC      |L1.13894|
003644  74ee              STRB     r6,[r5,#0x13]
                  |L1.13894|
;;;4467   		}
;;;4468   	}
;;;4469   
;;;4470   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4471   
;;;4472   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4473   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4474   /*
;;;4475   	{
;;;4476   	if((adc_cnt1&0x03)==0)
;;;4477   		{
;;;4478   		temp_S=0;
;;;4479   		for(i=0;i<16;i++)
;;;4480   			{
;;;4481   			temp_S+=adc_buff[adc_ch][i];
;;;4482   			} 
;;;4483            	adc_buff_[adc_ch]=temp_S>>4;
;;;4484             }
;;;4485   	}*/
;;;4486   
;;;4487   
;;;4488   		  
;;;4489   
;;;4490   adc_self_ch_cnt=0;
003646  742e              STRB     r6,[r5,#0x10]
;;;4491   
;;;4492   adc_ch_net++;
003648  f1070701          ADD      r7,r7,#1
;;;4493   adc_ch_net&=1;
00364c  f0070001          AND      r0,r7,#1
003650  7468              STRB     r0,[r5,#0x11]
;;;4494   
;;;4495   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4496   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4497   
;;;4498   if(adc_ch_net)
;;;4499   	{
;;;4500   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4501   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4502   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
003652  4acf              LDR      r2,|L1.14736|
003654  b130              CBZ      r0,|L1.13924|
003656  6810              LDR      r0,[r2,#0]
003658  f02000ff          BIC      r0,r0,#0xff
00365c  f1000004          ADD      r0,r0,#4
003660  6010              STR      r0,[r2,#0]
003662  e03d              B        |L1.14048|
                  |L1.13924|
;;;4503   	}
;;;4504   else
;;;4505   	{
;;;4506   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4507   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4508   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
003664  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
003666  0708              LSLS     r0,r1,#28
003668  d406              BMI      |L1.13944|
00366a  6810              LDR      r0,[r2,#0]
00366c  f02000ff          BIC      r0,r0,#0xff
003670  f1000001          ADD      r0,r0,#1
003674  6010              STR      r0,[r2,#0]
003676  e005              B        |L1.13956|
                  |L1.13944|
;;;4509   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
003678  6810              LDR      r0,[r2,#0]
00367a  f02000ff          BIC      r0,r0,#0xff
00367e  f1000002          ADD      r0,r0,#2
003682  6010              STR      r0,[r2,#0]
                  |L1.13956|
;;;4510   
;;;4511   
;;;4512   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
003684  48c3              LDR      r0,|L1.14740|
003686  6803              LDR      r3,[r0,#0]
003688  f0435380          ORR      r3,r3,#0x10000000
00368c  6003              STR      r3,[r0,#0]
;;;4513   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
00368e  6a03              LDR      r3,[r0,#0x20]
003690  f0434380          ORR      r3,r3,#0x40000000
003694  6203              STR      r3,[r0,#0x20]
;;;4514   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
003696  6e03              LDR      r3,[r0,#0x60]
003698  f0436380          ORR      r3,r3,#0x4000000
00369c  6603              STR      r3,[r0,#0x60]
;;;4515   
;;;4516   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
00369e  07cb              LSLS     r3,r1,#31
0036a0  d00a              BEQ      |L1.14008|
;;;4517   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
0036a2  6943              LDR      r3,[r0,#0x14]
0036a4  f0435380          ORR      r3,r3,#0x10000000
0036a8  6143              STR      r3,[r0,#0x14]
                  |L1.13994|
;;;4518   
;;;4519   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
0036aa  078b              LSLS     r3,r1,#30
0036ac  d409              BMI      |L1.14018|
0036ae  6b43              LDR      r3,[r0,#0x34]
0036b0  f0234380          BIC      r3,r3,#0x40000000
0036b4  6343              STR      r3,[r0,#0x34]
0036b6  e008              B        |L1.14026|
                  |L1.14008|
0036b8  6943              LDR      r3,[r0,#0x14]         ;4516
0036ba  f0235380          BIC      r3,r3,#0x10000000     ;4516
0036be  6143              STR      r3,[r0,#0x14]         ;4516
0036c0  e7f3              B        |L1.13994|
                  |L1.14018|
;;;4520   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
0036c2  6b43              LDR      r3,[r0,#0x34]
0036c4  f0434380          ORR      r3,r3,#0x40000000
0036c8  6343              STR      r3,[r0,#0x34]
                  |L1.14026|
;;;4521   
;;;4522   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
0036ca  0749              LSLS     r1,r1,#29
0036cc  d404              BMI      |L1.14040|
0036ce  6f41              LDR      r1,[r0,#0x74]
0036d0  f0216180          BIC      r1,r1,#0x4000000
0036d4  6741              STR      r1,[r0,#0x74]
0036d6  e003              B        |L1.14048|
                  |L1.14040|
;;;4523   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0036d8  6f41              LDR      r1,[r0,#0x74]
0036da  f0416180          ORR      r1,r1,#0x4000000
0036de  6741              STR      r1,[r0,#0x74]
                  |L1.14048|
;;;4524   	}
;;;4525   	
;;;4526   
;;;4527   
;;;4528   
;;;4529   LPC_ADC->ADCR |=  (1<<24);
0036e0  6810              LDR      r0,[r2,#0]
0036e2  f0407080          ORR      r0,r0,#0x1000000
0036e6  6010              STR      r0,[r2,#0]
                  |L1.14056|
;;;4530   
;;;4531   }
0036e8  e8bd81f0          POP      {r4-r8,pc}
;;;4532   
                          ENDP

                  avg_hndl PROC
;;;4789   //-----------------------------------------------
;;;4790   void avg_hndl(void)
0036ec  e92d41f0          PUSH     {r4-r8,lr}
;;;4791   { 
;;;4792   char i;
;;;4793   
;;;4794   //#define AVGCNTMAX	5
;;;4795   if(avg_main_cnt)
0036f0  4da9              LDR      r5,|L1.14744|
0036f2  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
0036f6  b118              CBZ      r0,|L1.14080|
;;;4796   	{
;;;4797   	avg_main_cnt--;
0036f8  f1a00001          SUB      r0,r0,#1
0036fc  86e8              STRH     r0,[r5,#0x36]
;;;4798   	//goto avg_hndl_end;
;;;4799   	return;
;;;4800   	}                 
;;;4801   
;;;4802   avg_main_cnt=5;
;;;4803   avg_num=0;
;;;4804   
;;;4805   for(i=0;i<NUMIST;i++)
;;;4806   	{
;;;4807   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4808   	}
;;;4809   
;;;4810   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4811   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4812   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4813   
;;;4814   if(avg_vektor) avg_vektor=0;
;;;4815   else avg_vektor=1;
;;;4816   	
;;;4817   if(avg_num<2)
;;;4818   	{
;;;4819   	//goto avg_hndl_end;
;;;4820   	return;
;;;4821   	}
;;;4822   	
;;;4823   else
;;;4824   	{
;;;4825   	i_avg_min=5000;
;;;4826   	i_avg_max=0;
;;;4827   	i_avg_summ=0;
;;;4828   	for(i=0;i<NUMIST;i++)
;;;4829   		{
;;;4830   		if(bps[i]._state==bsWRK)
;;;4831   			{
;;;4832   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;4833   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;4834   			
;;;4835   			i_avg_summ+=bps[i]._Ii;
;;;4836   			}
;;;4837   		}
;;;4838   	i_avg=i_avg_summ/avg_num;	
;;;4839   	
;;;4840   	if(i_avg_min==0)i_avg_min=1;
;;;4841   
;;;4842   	avg=i_avg_max;
;;;4843   	avg*=100;
;;;4844   	avg/=i_avg_min;
;;;4845   
;;;4846   	if(avg>130) bAVG=1;
;;;4847   	if(avg<110) bAVG=0;
;;;4848   
;;;4849   	if(bAVG==1)
;;;4850   		{
;;;4851   		for(i=0;i<NUMIST;i++)
;;;4852   			{
;;;4853   			if(bps[i]._state==bsWRK)
;;;4854   				{
;;;4855   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;4856   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;4857   			
;;;4858   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;4859   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;4860   				}
;;;4861   			}		
;;;4862   		}			
;;;4863   	}   	 
;;;4864   
;;;4865   
;;;4866   avg_hndl_end:
;;;4867   __nop();  
;;;4868   }
0036fe  e7f3              B        |L1.14056|
                  |L1.14080|
003700  f04f0005          MOV      r0,#5                 ;4802
003704  86e8              STRH     r0,[r5,#0x36]         ;4802
003706  f04f0700          MOV      r7,#0                 ;4803
00370a  76af              STRB     r7,[r5,#0x1a]         ;4803
00370c  f04f0000          MOV      r0,#0                 ;4805
003710  49a3              LDR      r1,|L1.14752|
003712  4ca2              LDR      r4,|L1.14748|
003714  f9b12000          LDRSH    r2,[r1,#0]            ;4805
003718  e012              B        |L1.14144|
                  |L1.14106|
00371a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4807
00371e  eb011100          ADD      r1,r1,r0,LSL #4       ;4807
003722  eb040181          ADD      r1,r4,r1,LSL #2       ;4807
003726  788b              LDRB     r3,[r1,#2]            ;4807
003728  2b01              CMP      r3,#1                 ;4807
00372a  d106              BNE      |L1.14138|
00372c  78c9              LDRB     r1,[r1,#3]            ;4807
00372e  2914              CMP      r1,#0x14              ;4807
003730  d203              BCS      |L1.14138|
003732  7ea9              LDRB     r1,[r5,#0x1a]         ;4807  ; avg_num
003734  f1010101          ADD      r1,r1,#1              ;4807
003738  76a9              STRB     r1,[r5,#0x1a]         ;4807
                  |L1.14138|
00373a  f1000001          ADD      r0,r0,#1              ;4805
00373e  b2c0              UXTB     r0,r0                 ;4805
                  |L1.14144|
003740  4290              CMP      r0,r2                 ;4805
003742  dbea              BLT      |L1.14106|
003744  7ee8              LDRB     r0,[r5,#0x1b]         ;4814  ; avg_vektor
003746  f04f0c01          MOV      r12,#1                ;4807
00374a  b108              CBZ      r0,|L1.14160|
00374c  76ef              STRB     r7,[r5,#0x1b]         ;4814
00374e  e001              B        |L1.14164|
                  |L1.14160|
003750  f885c01b          STRB     r12,[r5,#0x1b]        ;4815
                  |L1.14164|
003754  7eae              LDRB     r6,[r5,#0x1a]         ;4817  ; avg_num
003756  2e02              CMP      r6,#2                 ;4817
003758  d3c6              BCC      |L1.14056|
00375a  4b8f              LDR      r3,|L1.14744|
00375c  f2413088          MOV      r0,#0x1388            ;4825
003760  f1030380          ADD      r3,r3,#0x80           ;4825
003764  6218              STR      r0,[r3,#0x20]         ;4825  ; i_avg_min
003766  61df              STR      r7,[r3,#0x1c]         ;4826  ; i_avg_max
003768  625f              STR      r7,[r3,#0x24]         ;4827  ; i_avg_summ
00376a  f04f0100          MOV      r1,#0                 ;4828
00376e  e01c              B        |L1.14250|
                  |L1.14192|
003770  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4830
003774  eb001001          ADD      r0,r0,r1,LSL #4       ;4830
003778  eb040080          ADD      r0,r4,r0,LSL #2       ;4830
00377c  f8908002          LDRB     r8,[r0,#2]            ;4830
003780  f1b80f01          CMP      r8,#1                 ;4830
003784  d10e              BNE      |L1.14244|
003786  6a40              LDR      r0,[r0,#0x24]         ;4832
003788  f8d3801c          LDR      r8,[r3,#0x1c]         ;4832  ; i_avg_max
00378c  4540              CMP      r0,r8                 ;4832
00378e  dd00              BLE      |L1.14226|
003790  61d8              STR      r0,[r3,#0x1c]         ;4832  ; i_avg_max
                  |L1.14226|
003792  f8d38020          LDR      r8,[r3,#0x20]         ;4833  ; i_avg_min
003796  4540              CMP      r0,r8                 ;4833
003798  da00              BGE      |L1.14236|
00379a  6218              STR      r0,[r3,#0x20]         ;4833  ; i_avg_min
                  |L1.14236|
00379c  f8d38024          LDR      r8,[r3,#0x24]         ;4835  ; i_avg_summ
0037a0  4440              ADD      r0,r0,r8              ;4835
0037a2  6258              STR      r0,[r3,#0x24]         ;4835  ; i_avg_summ
                  |L1.14244|
0037a4  f1010101          ADD      r1,r1,#1              ;4828
0037a8  b2c9              UXTB     r1,r1                 ;4828
                  |L1.14250|
0037aa  4291              CMP      r1,r2                 ;4828
0037ac  dbe0              BLT      |L1.14192|
0037ae  6a58              LDR      r0,[r3,#0x24]         ;4838  ; i_avg_summ
0037b0  fb90f6f6          SDIV     r6,r0,r6              ;4838
0037b4  629e              STR      r6,[r3,#0x28]         ;4838  ; i_avg
0037b6  6a18              LDR      r0,[r3,#0x20]         ;4840  ; i_avg_min
0037b8  b908              CBNZ     r0,|L1.14270|
0037ba  f8c3c020          STR      r12,[r3,#0x20]        ;4840  ; i_avg_min
                  |L1.14270|
0037be  69d8              LDR      r0,[r3,#0x1c]         ;4842  ; i_avg_max
0037c0  f04f0164          MOV      r1,#0x64              ;4843
0037c4  fb00f001          MUL      r0,r0,r1              ;4843
0037c8  6a19              LDR      r1,[r3,#0x20]         ;4844  ; i_avg_min
0037ca  fb90f0f1          SDIV     r0,r0,r1              ;4844
0037ce  62d8              STR      r0,[r3,#0x2c]         ;4844  ; avg
0037d0  2882              CMP      r0,#0x82              ;4846
0037d2  dd01              BLE      |L1.14296|
0037d4  f885c019          STRB     r12,[r5,#0x19]        ;4846
                  |L1.14296|
0037d8  286e              CMP      r0,#0x6e              ;4847
0037da  da00              BGE      |L1.14302|
0037dc  766f              STRB     r7,[r5,#0x19]         ;4847
                  |L1.14302|
0037de  7e68              LDRB     r0,[r5,#0x19]         ;4849  ; bAVG
0037e0  2801              CMP      r0,#1                 ;4849
0037e2  d138              BNE      |L1.14422|
0037e4  f04f0100          MOV      r1,#0                 ;4851
0037e8  f06f0731          MVN      r7,#0x31              ;4858
0037ec  e031              B        |L1.14418|
                  |L1.14318|
0037ee  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4853
0037f2  eb001001          ADD      r0,r0,r1,LSL #4       ;4853
0037f6  eb040080          ADD      r0,r4,r0,LSL #2       ;4853
0037fa  7883              LDRB     r3,[r0,#2]            ;4853
0037fc  2b01              CMP      r3,#1                 ;4853
0037fe  d125              BNE      |L1.14412|
003800  6a43              LDR      r3,[r0,#0x24]         ;4855
003802  42b3              CMP      r3,r6                 ;4855
003804  dd0a              BLE      |L1.14364|
003806  f895c01b          LDRB     r12,[r5,#0x1b]        ;4855  ; avg_vektor
00380a  f1bc0f00          CMP      r12,#0                ;4855
00380e  d105              BNE      |L1.14364|
003810  f8b0c054          LDRH     r12,[r0,#0x54]        ;4855
003814  f1ac0c01          SUB      r12,r12,#1            ;4855
003818  f8a0c054          STRH     r12,[r0,#0x54]        ;4855
                  |L1.14364|
00381c  42b3              CMP      r3,r6                 ;4856
00381e  da07              BGE      |L1.14384|
003820  7eeb              LDRB     r3,[r5,#0x1b]         ;4856  ; avg_vektor
003822  b12b              CBZ      r3,|L1.14384|
003824  f8b03054          LDRH     r3,[r0,#0x54]         ;4856
003828  f1030301          ADD      r3,r3,#1              ;4856
00382c  f8a03054          STRH     r3,[r0,#0x54]         ;4856
                  |L1.14384|
003830  f9b03054          LDRSH    r3,[r0,#0x54]         ;4858
003834  42bb              CMP      r3,r7                 ;4858
003836  da01              BGE      |L1.14396|
003838  f8a07054          STRH     r7,[r0,#0x54]         ;4858
                  |L1.14396|
00383c  f9b03054          LDRSH    r3,[r0,#0x54]         ;4859
003840  2b32              CMP      r3,#0x32              ;4859
003842  dd03              BLE      |L1.14412|
003844  f04f0332          MOV      r3,#0x32              ;4859
003848  f8a03054          STRH     r3,[r0,#0x54]         ;4859
                  |L1.14412|
00384c  f1010101          ADD      r1,r1,#1              ;4851
003850  b2c9              UXTB     r1,r1                 ;4851
                  |L1.14418|
003852  4291              CMP      r1,r2                 ;4851
003854  dbcb              BLT      |L1.14318|
                  |L1.14422|
003856  bf00              NOP                            ;4867
003858  e746              B        |L1.14056|
;;;4869   
                          ENDP

                  rele_hndl PROC
;;;4882   //*************-----------------------------------------------
;;;4883   void rele_hndl(void)
00385a  e92d5ff0          PUSH     {r4-r12,lr}
;;;4884   {
;;;4885   //static char cnt_rel_sam;
;;;4886   //char temp;
;;;4887   
;;;4888   //temp=0;
;;;4889   
;;;4890   
;;;4891   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
00385e  4851              LDR      r0,|L1.14756|
003860  6801              LDR      r1,[r0,#0]
003862  4a51              LDR      r2,|L1.14760|
003864  ea010102          AND      r1,r1,r2
003868  6001              STR      r1,[r0,#0]
;;;4892   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
00386a  4c4a              LDR      r4,|L1.14740|
00386c  6821              LDR      r1,[r4,#0]
00386e  f441717c          ORR      r1,r1,#0x3f0
003872  6021              STR      r1,[r4,#0]
;;;4893   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003874  69c1              LDR      r1,[r0,#0x1c]
003876  f4212140          BIC      r1,r1,#0xc0000
00387a  61c1              STR      r1,[r0,#0x1c]
;;;4894   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
00387c  6e21              LDR      r1,[r4,#0x60]
00387e  f0417100          ORR      r1,r1,#0x2000000
003882  6621              STR      r1,[r4,#0x60]
;;;4895   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003884  6841              LDR      r1,[r0,#4]
003886  f0216140          BIC      r1,r1,#0xc000000
00388a  6041              STR      r1,[r0,#4]
;;;4896   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
00388c  6820              LDR      r0,[r4,#0]
00388e  f0405000          ORR      r0,r0,#0x20000000
003892  6020              STR      r0,[r4,#0]
;;;4897   
;;;4898   
;;;4899   
;;;4900   
;;;4901   
;;;4902   
;;;4903   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003894  4846              LDR      r0,|L1.14768|
003896  4d45              LDR      r5,|L1.14764|
003898  4947              LDR      r1,|L1.14776|
00389a  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
00389c  4845              LDR      r0,|L1.14772|
00389e  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
0038a2  f9b11000          LDRSH    r1,[r1,#0]
0038a6  7800              LDRB     r0,[r0,#0]
0038a8  4313              ORRS     r3,r3,r2
0038aa  d007              BEQ      |L1.14524|
0038ac  b130              CBZ      r0,|L1.14524|
0038ae  2905              CMP      r1,#5
0038b0  dd04              BLE      |L1.14524|
;;;4904   	{
;;;4905   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
0038b2  69a3              LDR      r3,[r4,#0x18]
0038b4  f4437380          ORR      r3,r3,#0x100
0038b8  61a3              STR      r3,[r4,#0x18]
0038ba  e003              B        |L1.14532|
                  |L1.14524|
;;;4906   	}
;;;4907   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
0038bc  69e3              LDR      r3,[r4,#0x1c]
0038be  f4437380          ORR      r3,r3,#0x100
0038c2  61e3              STR      r3,[r4,#0x1c]
                  |L1.14532|
;;;4908   
;;;4909   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
0038c4  f8953088          LDRB     r3,[r5,#0x88]  ; bat
0038c8  4313              ORRS     r3,r3,r2
0038ca  d007              BEQ      |L1.14556|
0038cc  b130              CBZ      r0,|L1.14556|
0038ce  2905              CMP      r1,#5
0038d0  dd04              BLE      |L1.14556|
;;;4910   	{
;;;4911   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
0038d2  69a0              LDR      r0,[r4,#0x18]
0038d4  f0400040          ORR      r0,r0,#0x40
0038d8  61a0              STR      r0,[r4,#0x18]
0038da  e003              B        |L1.14564|
                  |L1.14556|
;;;4912   	}
;;;4913   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
0038dc  69e0              LDR      r0,[r4,#0x1c]
0038de  f0400040          ORR      r0,r0,#0x40
0038e2  61e0              STR      r0,[r4,#0x1c]
                  |L1.14564|
;;;4914   
;;;4915   
;;;4916   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
0038e4  20d2              MOVS     r0,#0xd2
0038e6  f7fffffe          BL       mess_find_unvol
0038ea  4d34              LDR      r5,|L1.14780|
0038ec  b110              CBZ      r0,|L1.14580|
0038ee  6828              LDR      r0,[r5,#0]  ; mess_data
0038f0  2864              CMP      r0,#0x64
0038f2  d06e              BEQ      |L1.14802|
                  |L1.14580|
;;;4917   	{
;;;4918   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4919   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4920   	}
;;;4921   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
0038f4  69e0              LDR      r0,[r4,#0x1c]
0038f6  f0405000          ORR      r0,r0,#0x20000000
0038fa  61e0              STR      r0,[r4,#0x1c]
                  |L1.14588|
;;;4922   
;;;4923   
;;;4924   #ifndef UKU2071x
;;;4925   //Реле аварии сети
;;;4926   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4927   	{
;;;4928   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4929   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4930   	}
;;;4931   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4932   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4933   #endif
;;;4934   #ifdef UKU2071x
;;;4935   //Реле аварии сети
;;;4936   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
0038fc  20d2              MOVS     r0,#0xd2
0038fe  f7fffffe          BL       mess_find_unvol
;;;4937   	{
;;;4938   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4939   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4940   	}
;;;4941   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003902  4e2f              LDR      r6,|L1.14784|
003904  b110              CBZ      r0,|L1.14604|
003906  6828              LDR      r0,[r5,#0]            ;4936  ; mess_data
003908  2866              CMP      r0,#0x66              ;4936
00390a  d073              BEQ      |L1.14836|
                  |L1.14604|
00390c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00390e  07c0              LSLS     r0,r0,#31
003910  d07c              BEQ      |L1.14860|
;;;4942   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003912  6fa0              LDR      r0,[r4,#0x78]
003914  f0407000          ORR      r0,r0,#0x2000000
003918  67a0              STR      r0,[r4,#0x78]
                  |L1.14618|
;;;4943   #endif
;;;4944   
;;;4945   #ifdef UKU_3U
;;;4946   //Реле аварий батарей
;;;4947   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4948   	{
;;;4949   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4950   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4951        }
;;;4952   else 
;;;4953   	{
;;;4954   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4955        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4956   	} 
;;;4957   
;;;4958   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4959   	{
;;;4960   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4961   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4962        }
;;;4963   else 
;;;4964   	{
;;;4965   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4966        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4967   	} 
;;;4968   
;;;4969   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4970   	{
;;;4971   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4972   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4973        }
;;;4974   else 
;;;4975   	{
;;;4976   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4977        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4978   	} 
;;;4979   
;;;4980   #endif
;;;4981   
;;;4982   
;;;4983   #ifdef UKU_GLONASS
;;;4984   //Реле аварий батарей
;;;4985   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4986   	{
;;;4987   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4988   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4989        }
;;;4990   else 
;;;4991   	{
;;;4992   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4993        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4994   	} 
;;;4995   
;;;4996   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4997   	{
;;;4998   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4999   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5000        }
;;;5001   else 
;;;5002   	{
;;;5003   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5004        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5005   	} 
;;;5006   
;;;5007   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5008   	{
;;;5009   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5010   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5011        }
;;;5012   else 
;;;5013   	{
;;;5014   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5015        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5016   	} 
;;;5017   
;;;5018   #endif
;;;5019   
;;;5020   #ifdef U 
;;;5021   
;;;5022   #endif
;;;5023   
;;;5024   #ifdef UKU_RSTKM
;;;5025   
;;;5026   //Реле общей аварии
;;;5027   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5028   	{
;;;5029   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5030   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5031   	}
;;;5032   else 
;;;5033   	{
;;;5034        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5035             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5036             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5037             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5038             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5039        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5040   	}
;;;5041   	
;;;5042   
;;;5043   //Реле освещения
;;;5044   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5045   	{
;;;5046   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5047   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5048        }
;;;5049   else 
;;;5050   	{
;;;5051   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5052        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5053   	}
;;;5054   
;;;5055   
;;;5056   //Реле выключения нагрузки
;;;5057   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5058   	{
;;;5059   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5060   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5061        }
;;;5062   else if(tloaddisable_cmnd==0)
;;;5063   	{
;;;5064   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5065   	}
;;;5066   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5067   	{
;;;5068   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5069   	}
;;;5070   
;;;5071   else 
;;;5072   	{
;;;5073   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5074        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5075   	} 
;;;5076   
;;;5077   //Реле осевого вентилятора
;;;5078   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5079   	{
;;;5080   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5081   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5082   	}
;;;5083   else 
;;;5084   	{
;;;5085   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5086        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5087   	} 
;;;5088   
;;;5089   #endif
;;;5090   
;;;5091   #ifdef UKU_KONTUR
;;;5092   
;;;5093   //Реле общей аварии
;;;5094   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5095   	{
;;;5096   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5097   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5098   	}
;;;5099   else 
;;;5100   	{
;;;5101        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5102             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5103             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5104             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5105             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5106        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5107   	}
;;;5108   
;;;5109   	
;;;5110   //rel_warm_plazma=0;
;;;5111   //Реле освещения   
;;;5112   /*
;;;5113   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5114   	{
;;;5115   	if(mess_data[1]==0)
;;;5116   		{
;;;5117   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5118   		rel_warm_plazma=1;
;;;5119   		}
;;;5120   	else if(mess_data[1]==1) 
;;;5121   		{
;;;5122   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5123   		rel_warm_plazma=2;
;;;5124   		}
;;;5125        }
;;;5126   else 
;;;5127   	{
;;;5128   	if(warm_stat_k==wsOFF) 
;;;5129   		{
;;;5130   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5131   		rel_warm_plazma=3;
;;;5132   		}
;;;5133        else 
;;;5134   		{
;;;5135   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5136   		rel_warm_plazma=4;
;;;5137   		}
;;;5138   	}
;;;5139   */
;;;5140   //Реле освещения
;;;5141   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5142   	{
;;;5143   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5144   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5145        }
;;;5146   else 
;;;5147   	{
;;;5148   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5149        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5150   	}
;;;5151   
;;;5152   
;;;5153   
;;;5154   //Реле выключения нагрузки
;;;5155   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5156   	{
;;;5157   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5158   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5159        }
;;;5160   else if(tloaddisable_cmnd==0)
;;;5161   	{
;;;5162   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5163   	}
;;;5164   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5165   	{
;;;5166   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5167   	}
;;;5168   
;;;5169   else 
;;;5170   	{
;;;5171   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5172        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5173   	} 
;;;5174   
;;;5175   //Реле осевого вентилятора или отопителя
;;;5176   if(RELE_LOG)
;;;5177   	{
;;;5178   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5179   		{
;;;5180   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5181   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5182   		}
;;;5183   	else 
;;;5184   		{
;;;5185   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5186   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5187   		} 
;;;5188   
;;;5189   	}
;;;5190   else 
;;;5191   	{
;;;5192   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5193   		{
;;;5194   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5195   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5196   		}
;;;5197   	else 
;;;5198   		{
;;;5199   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5200   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5201   		} 
;;;5202   	}
;;;5203   #endif
;;;5204   
;;;5205   #ifdef UKU_6U
;;;5206   //Реле аварий батарей
;;;5207   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5208   	{
;;;5209   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5210   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5211        }
;;;5212   else 
;;;5213   	{
;;;5214   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5215        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5216   	} 
;;;5217   
;;;5218   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5219   	{
;;;5220   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5221   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5222       }
;;;5223   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5224   	{
;;;5225   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5226   		{
;;;5227   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5228   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5229        	}
;;;5230   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5231   	}
;;;5232   else 
;;;5233   	{
;;;5234   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5235       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5236   	} 
;;;5237   
;;;5238   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5239   	{
;;;5240   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5241   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5242        }
;;;5243   else 
;;;5244   	{
;;;5245   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5246        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5247   	} 
;;;5248   
;;;5249   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5250   	{
;;;5251   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5252   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5253   	}
;;;5254   else if((NPN_OUT==npnoRELEVENT))
;;;5255   	{
;;;5256   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5257   		{
;;;5258   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5259   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5260       	}
;;;5261   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5262   	}
;;;5263   else 
;;;5264   	{
;;;5265   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5266   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5267   	}
;;;5268   
;;;5269   #endif
;;;5270   
;;;5271   #ifdef UKU_220
;;;5272   //Реле аварий батарей
;;;5273   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5274   	{
;;;5275   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5276   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5277        }
;;;5278   else 
;;;5279   	{
;;;5280   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5281        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5282   	} 
;;;5283   
;;;5284   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5285   	{
;;;5286   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5287   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5288        }
;;;5289   else 
;;;5290   	{
;;;5291   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5292        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5293   	} 
;;;5294   
;;;5295   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5296   	{
;;;5297   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5298   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5299   	}
;;;5300   else 
;;;5301   	{
;;;5302   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5303   		{
;;;5304   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5305   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5306   		}
;;;5307   	else 
;;;5308   		{
;;;5309   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5310        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5311   		}
;;;5312   	}
;;;5313   
;;;5314   #endif
;;;5315   
;;;5316   #ifdef UKU_220_V2
;;;5317   //Реле аварий батарей
;;;5318   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5319   	{
;;;5320   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5321   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5322        }
;;;5323   else 
;;;5324   	{
;;;5325   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5326        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5327   	} 
;;;5328   
;;;5329   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5330   	{
;;;5331   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5332   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5333        }
;;;5334   else 
;;;5335   	{
;;;5336   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5337        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5338   	} 
;;;5339   
;;;5340   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5341   	{
;;;5342   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5343   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5344   	}
;;;5345   else 
;;;5346   	{
;;;5347   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5348   		{
;;;5349   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5350   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5351   		}
;;;5352   	else 
;;;5353   		{
;;;5354   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5355        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5356   		}
;;;5357   	}
;;;5358   
;;;5359   #endif
;;;5360   
;;;5361   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5362   
;;;5363   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
00391a  482a              LDR      r0,|L1.14788|
;;;5364   	{
;;;5365   	#ifndef UKU2071x
;;;5366   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5367   		{
;;;5368   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5369   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5370   		}
;;;5371   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5372   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5373   	#endif
;;;5374   
;;;5375   	#ifdef UKU2071x
;;;5376   		#ifndef APSENERGIA
;;;5377   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5378   			{
;;;5379   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5380   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5381   			}
;;;5382   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5383   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5384   		#endif
;;;5385   
;;;5386   		#ifdef APSENERGIA
;;;5387   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5388   			{
;;;5389   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5390   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5391   			}
;;;5392   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5393   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5394   		#endif
;;;5395   
;;;5396   	#endif
;;;5397   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5398   		{
;;;5399   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5400   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5401   	     }
;;;5402   	else 
;;;5403   		{
;;;5404   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5405   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5406   		} 
;;;5407   
;;;5408   	//Реле аварий батарей
;;;5409   	#ifndef APSENERGIA
;;;5410   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5411   		{
;;;5412   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5413   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5414        	}
;;;5415   	else 
;;;5416   		{
;;;5417   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
00391c  f8df80a8          LDR      r8,|L1.14792|
003920  4f2a              LDR      r7,|L1.14796|
003922  8800              LDRH     r0,[r0,#0]            ;5363  ; AUSW_MAIN
003924  f5a041aa          SUB      r1,r0,#0x5500         ;5363
003928  39fa              SUBS     r1,r1,#0xfa           ;5363
00392a  d001              BEQ      |L1.14640|
00392c  1e49              SUBS     r1,r1,#1              ;5363
00392e  d172              BNE      |L1.14870|
                  |L1.14640|
003930  20d2              MOVS     r0,#0xd2              ;5377
003932  f7fffffe          BL       mess_find_unvol
003936  b110              CBZ      r0,|L1.14654|
003938  6828              LDR      r0,[r5,#0]            ;5377  ; mess_data
00393a  2866              CMP      r0,#0x66              ;5377
00393c  d06e              BEQ      |L1.14876|
                  |L1.14654|
00393e  6830              LDR      r0,[r6,#0]            ;5382  ; avar_ind_stat
003940  07c0              LSLS     r0,r0,#31             ;5382
003942  d077              BEQ      |L1.14900|
003944  6fa0              LDR      r0,[r4,#0x78]         ;5383
003946  f0407000          ORR      r0,r0,#0x2000000      ;5383
00394a  67a0              STR      r0,[r4,#0x78]         ;5383
                  |L1.14668|
00394c  20d2              MOVS     r0,#0xd2              ;5397
00394e  f7fffffe          BL       mess_find_unvol
003952  b110              CBZ      r0,|L1.14682|
003954  6828              LDR      r0,[r5,#0]            ;5397  ; mess_data
003956  286a              CMP      r0,#0x6a              ;5397
003958  d073              BEQ      |L1.14914|
                  |L1.14682|
00395a  6830              LDR      r0,[r6,#0]            ;5404  ; avar_ind_stat
00395c  4238              TST      r0,r7                 ;5404
00395e  d07f              BEQ      |L1.14944|
003960  69a0              LDR      r0,[r4,#0x18]         ;5405
003962  f0400080          ORR      r0,r0,#0x80           ;5405
003966  61a0              STR      r0,[r4,#0x18]         ;5405
                  |L1.14696|
003968  20d2              MOVS     r0,#0xd2              ;5410
00396a  f7fffffe          BL       mess_find_unvol
00396e  b110              CBZ      r0,|L1.14710|
003970  6828              LDR      r0,[r5,#0]            ;5410  ; mess_data
003972  2867              CMP      r0,#0x67              ;5410
003974  d079              BEQ      |L1.14954|
                  |L1.14710|
003976  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
00397a  b348              CBZ      r0,|L1.14800|
;;;5418        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
00397c  69a0              LDR      r0,[r4,#0x18]
00397e  f0400010          ORR      r0,r0,#0x10
003982  61a0              STR      r0,[r4,#0x18]
003984  e1fe              B        |L1.15748|
003986  e024              B        |L1.14802|
                  |L1.14728|
                          DCD      ||.bss||+0x42c
                  |L1.14732|
                          DCD      ||.bss||+0xc
                  |L1.14736|
                          DCD      0x40034000
                  |L1.14740|
                          DCD      0x2009c000
                  |L1.14744|
                          DCD      ||area_number.25||
                  |L1.14748|
                          DCD      bps
                  |L1.14752|
                          DCD      NUMIST
                  |L1.14756|
                          DCD      0x4002c000
                  |L1.14760|
                          DCD      0xfff000ff
                  |L1.14764|
                          DCD      bat
                  |L1.14768|
                          DCD      tbatdisable_stat
                  |L1.14772|
                          DCD      tbatdisable_cmnd
                  |L1.14776|
                          DCD      main_1Hz_cnt
                  |L1.14780|
                          DCD      mess_data
                  |L1.14784|
                          DCD      avar_ind_stat
                  |L1.14788|
                          DCD      AUSW_MAIN
                  |L1.14792|
                          DCD      ips_bat_av_stat
                  |L1.14796|
                          DCD      0x100007f8
                  |L1.14800|
0039d0  e05a              B        |L1.14984|
                  |L1.14802|
0039d2  6868              LDR      r0,[r5,#4]            ;4918  ; mess_data
0039d4  2801              CMP      r0,#1                 ;4918
0039d6  d006              BEQ      |L1.14822|
0039d8  2800              CMP      r0,#0                 ;4919
0039da  d18f              BNE      |L1.14588|
0039dc  69e0              LDR      r0,[r4,#0x1c]         ;4919
0039de  f0405000          ORR      r0,r0,#0x20000000     ;4919
0039e2  61e0              STR      r0,[r4,#0x1c]         ;4919
0039e4  e78a              B        |L1.14588|
                  |L1.14822|
0039e6  69a0              LDR      r0,[r4,#0x18]         ;4918
0039e8  f0405000          ORR      r0,r0,#0x20000000     ;4918
0039ec  61a0              STR      r0,[r4,#0x18]         ;4918
0039ee  e785              B        |L1.14588|
0039f0  e000              B        |L1.14836|
0039f2  e00b              B        |L1.14860|
                  |L1.14836|
0039f4  6868              LDR      r0,[r5,#4]            ;4938  ; mess_data
0039f6  b120              CBZ      r0,|L1.14850|
0039f8  6fa0              LDR      r0,[r4,#0x78]         ;4939
0039fa  f0407000          ORR      r0,r0,#0x2000000      ;4939
0039fe  67a0              STR      r0,[r4,#0x78]         ;4939
003a00  e78b              B        |L1.14618|
                  |L1.14850|
003a02  6fe0              LDR      r0,[r4,#0x7c]         ;4938
003a04  f0407000          ORR      r0,r0,#0x2000000      ;4938
003a08  67e0              STR      r0,[r4,#0x7c]         ;4938
003a0a  e786              B        |L1.14618|
                  |L1.14860|
003a0c  6fe0              LDR      r0,[r4,#0x7c]         ;4941
003a0e  f0407000          ORR      r0,r0,#0x2000000      ;4941
003a12  67e0              STR      r0,[r4,#0x7c]         ;4941
003a14  e781              B        |L1.14618|
                  |L1.14870|
003a16  e03c              B        |L1.14994|
003a18  e000              B        |L1.14876|
003a1a  e00b              B        |L1.14900|
                  |L1.14876|
003a1c  6868              LDR      r0,[r5,#4]            ;5379  ; mess_data
003a1e  b120              CBZ      r0,|L1.14890|
003a20  6fa0              LDR      r0,[r4,#0x78]         ;5380
003a22  f0407000          ORR      r0,r0,#0x2000000      ;5380
003a26  67a0              STR      r0,[r4,#0x78]         ;5380
003a28  e790              B        |L1.14668|
                  |L1.14890|
003a2a  6fe0              LDR      r0,[r4,#0x7c]         ;5379
003a2c  f0407000          ORR      r0,r0,#0x2000000      ;5379
003a30  67e0              STR      r0,[r4,#0x7c]         ;5379
003a32  e78b              B        |L1.14668|
                  |L1.14900|
003a34  6fe0              LDR      r0,[r4,#0x7c]         ;5382
003a36  f0407000          ORR      r0,r0,#0x2000000      ;5382
003a3a  67e0              STR      r0,[r4,#0x7c]         ;5382
003a3c  e786              B        |L1.14668|
003a3e  e000              B        |L1.14914|
003a40  e00e              B        |L1.14944|
                  |L1.14914|
003a42  6868              LDR      r0,[r5,#4]            ;5399  ; mess_data
003a44  b130              CBZ      r0,|L1.14932|
003a46  2801              CMP      r0,#1                 ;5400
003a48  d18e              BNE      |L1.14696|
003a4a  69a0              LDR      r0,[r4,#0x18]         ;5400
003a4c  f0400080          ORR      r0,r0,#0x80           ;5400
003a50  61a0              STR      r0,[r4,#0x18]         ;5400
003a52  e789              B        |L1.14696|
                  |L1.14932|
003a54  69e0              LDR      r0,[r4,#0x1c]         ;5399
003a56  f0400080          ORR      r0,r0,#0x80           ;5399
003a5a  61e0              STR      r0,[r4,#0x1c]         ;5399
003a5c  e784              B        |L1.14696|
003a5e  e004              B        |L1.14954|
                  |L1.14944|
003a60  69e0              LDR      r0,[r4,#0x1c]         ;5404
003a62  f0400080          ORR      r0,r0,#0x80           ;5404
003a66  61e0              STR      r0,[r4,#0x1c]         ;5404
003a68  e77e              B        |L1.14696|
                  |L1.14954|
003a6a  6868              LDR      r0,[r5,#4]            ;5412  ; mess_data
003a6c  b110              CBZ      r0,|L1.14964|
003a6e  2801              CMP      r0,#1                 ;5413
003a70  d005              BEQ      |L1.14974|
003a72  e187              B        |L1.15748|
                  |L1.14964|
003a74  69e0              LDR      r0,[r4,#0x1c]         ;5412
003a76  f0400010          ORR      r0,r0,#0x10           ;5412
003a7a  61e0              STR      r0,[r4,#0x1c]         ;5412
003a7c  e182              B        |L1.15748|
                  |L1.14974|
003a7e  69a0              LDR      r0,[r4,#0x18]         ;5413
003a80  f0400010          ORR      r0,r0,#0x10           ;5413
003a84  61a0              STR      r0,[r4,#0x18]         ;5413
003a86  e17d              B        |L1.15748|
                  |L1.14984|
003a88  69e0              LDR      r0,[r4,#0x1c]         ;5417
003a8a  f0400010          ORR      r0,r0,#0x10           ;5417
003a8e  61e0              STR      r0,[r4,#0x1c]         ;5417
003a90  e178              B        |L1.15748|
                  |L1.14994|
;;;5419   		}
;;;5420   	#endif
;;;5421   	#ifdef APSENERGIA
;;;5422   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5423   		{
;;;5424   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5425   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5426        	}
;;;5427   	else 
;;;5428   		{
;;;5429   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5430   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5431   		}
;;;5432   	#endif
;;;5433   	}
;;;5434   
;;;5435   else	if(AUSW_MAIN==22023)
003a92  f5a041ac          SUB      r1,r0,#0x5600
003a96  3907              SUBS     r1,#7
003a98  d162              BNE      |L1.15200|
;;;5436   	{
;;;5437   
;;;5438   	//Реле аварий батарей
;;;5439   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003a9a  20d2              MOVS     r0,#0xd2
003a9c  f7fffffe          BL       mess_find_unvol
003aa0  b110              CBZ      r0,|L1.15016|
003aa2  6828              LDR      r0,[r5,#0]  ; mess_data
003aa4  2867              CMP      r0,#0x67
003aa6  d023              BEQ      |L1.15088|
                  |L1.15016|
;;;5440   		{
;;;5441   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5442   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5443        	}
;;;5444   	else 
;;;5445   		{
;;;5446   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003aa8  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003aac  b370              CBZ      r0,|L1.15116|
;;;5447        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003aae  69a0              LDR      r0,[r4,#0x18]
003ab0  f0400010          ORR      r0,r0,#0x10
003ab4  61a0              STR      r0,[r4,#0x18]
                  |L1.15030|
;;;5448   		} 
;;;5449   
;;;5450   
;;;5451   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5452   	#ifndef UKU2071x
;;;5453   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5454   		{
;;;5455   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5456   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5457   		}
;;;5458   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5459   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5460   	#endif
;;;5461   	#ifdef UKU2071x
;;;5462   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003ab6  20d2              MOVS     r0,#0xd2
003ab8  f7fffffe          BL       mess_find_unvol
003abc  b110              CBZ      r0,|L1.15044|
003abe  6828              LDR      r0,[r5,#0]  ; mess_data
003ac0  2866              CMP      r0,#0x66
003ac2  d028              BEQ      |L1.15126|
                  |L1.15044|
;;;5463   		{
;;;5464   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5465   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5466   		}
;;;5467   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003ac4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ac6  07c0              LSLS     r0,r0,#31
003ac8  d031              BEQ      |L1.15150|
;;;5468   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003aca  6fa0              LDR      r0,[r4,#0x78]
003acc  f0407000          ORR      r0,r0,#0x2000000
003ad0  67a0              STR      r0,[r4,#0x78]
                  |L1.15058|
;;;5469   	#endif
;;;5470   
;;;5471   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ad2  20d2              MOVS     r0,#0xd2
003ad4  f7fffffe          BL       mess_find_unvol
003ad8  b110              CBZ      r0,|L1.15072|
003ada  6828              LDR      r0,[r5,#0]  ; mess_data
003adc  286a              CMP      r0,#0x6a
003ade  d02b              BEQ      |L1.15160|
                  |L1.15072|
;;;5472   		{
;;;5473   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5474   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5475   	     }
;;;5476   	else 
;;;5477   		{
;;;5478   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003ae0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ae2  4238              TST      r0,r7
003ae4  d037              BEQ      |L1.15190|
;;;5479   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003ae6  69a0              LDR      r0,[r4,#0x18]
003ae8  f0400080          ORR      r0,r0,#0x80
003aec  61a0              STR      r0,[r4,#0x18]
003aee  e149              B        |L1.15748|
                  |L1.15088|
003af0  6868              LDR      r0,[r5,#4]            ;5441  ; mess_data
003af2  b130              CBZ      r0,|L1.15106|
003af4  2801              CMP      r0,#1                 ;5442
003af6  d1de              BNE      |L1.15030|
003af8  69a0              LDR      r0,[r4,#0x18]         ;5442
003afa  f0400010          ORR      r0,r0,#0x10           ;5442
003afe  61a0              STR      r0,[r4,#0x18]         ;5442
003b00  e7d9              B        |L1.15030|
                  |L1.15106|
003b02  69e0              LDR      r0,[r4,#0x1c]         ;5441
003b04  f0400010          ORR      r0,r0,#0x10           ;5441
003b08  61e0              STR      r0,[r4,#0x1c]         ;5441
003b0a  e7d4              B        |L1.15030|
                  |L1.15116|
003b0c  69e0              LDR      r0,[r4,#0x1c]         ;5446
003b0e  f0400010          ORR      r0,r0,#0x10           ;5446
003b12  61e0              STR      r0,[r4,#0x1c]         ;5446
003b14  e7cf              B        |L1.15030|
                  |L1.15126|
003b16  6868              LDR      r0,[r5,#4]            ;5464  ; mess_data
003b18  b120              CBZ      r0,|L1.15140|
003b1a  69e0              LDR      r0,[r4,#0x1c]         ;5465
003b1c  f0407000          ORR      r0,r0,#0x2000000      ;5465
003b20  61e0              STR      r0,[r4,#0x1c]         ;5465
003b22  e7d6              B        |L1.15058|
                  |L1.15140|
003b24  69a0              LDR      r0,[r4,#0x18]         ;5464
003b26  f0407000          ORR      r0,r0,#0x2000000      ;5464
003b2a  61a0              STR      r0,[r4,#0x18]         ;5464
003b2c  e7d1              B        |L1.15058|
                  |L1.15150|
003b2e  6ba0              LDR      r0,[r4,#0x38]         ;5467
003b30  f0407000          ORR      r0,r0,#0x2000000      ;5467
003b34  63a0              STR      r0,[r4,#0x38]         ;5467
003b36  e7cc              B        |L1.15058|
                  |L1.15160|
003b38  6868              LDR      r0,[r5,#4]            ;5473  ; mess_data
003b3a  b110              CBZ      r0,|L1.15170|
003b3c  2801              CMP      r0,#1                 ;5474
003b3e  d005              BEQ      |L1.15180|
003b40  e120              B        |L1.15748|
                  |L1.15170|
003b42  69e0              LDR      r0,[r4,#0x1c]         ;5473
003b44  f0400080          ORR      r0,r0,#0x80           ;5473
003b48  61e0              STR      r0,[r4,#0x1c]         ;5473
003b4a  e11b              B        |L1.15748|
                  |L1.15180|
003b4c  69a0              LDR      r0,[r4,#0x18]         ;5474
003b4e  f0400080          ORR      r0,r0,#0x80           ;5474
003b52  61a0              STR      r0,[r4,#0x18]         ;5474
003b54  e116              B        |L1.15748|
                  |L1.15190|
003b56  69e0              LDR      r0,[r4,#0x1c]         ;5478
003b58  f0400080          ORR      r0,r0,#0x80           ;5478
003b5c  61e0              STR      r0,[r4,#0x1c]         ;5478
003b5e  e111              B        |L1.15748|
                  |L1.15200|
;;;5480   		} 
;;;5481   	}
;;;5482   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003b60  f5a041ac          SUB      r1,r0,#0x5600
003b64  391b              SUBS     r1,r1,#0x1b
003b66  d001              BEQ      |L1.15212|
003b68  1e49              SUBS     r1,r1,#1
003b6a  d170              BNE      |L1.15438|
                  |L1.15212|
;;;5483   	{
;;;5484   	//Реле аварий батарей
;;;5485   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003b6c  20d2              MOVS     r0,#0xd2
003b6e  f7fffffe          BL       mess_find_unvol
003b72  b110              CBZ      r0,|L1.15226|
003b74  6828              LDR      r0,[r5,#0]  ; mess_data
003b76  2867              CMP      r0,#0x67
003b78  d031              BEQ      |L1.15326|
                  |L1.15226|
;;;5486   		{
;;;5487   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5488   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5489        	}
;;;5490   	else 
;;;5491   		{
;;;5492   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003b7a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003b7e  b3b8              CBZ      r0,|L1.15344|
;;;5493        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003b80  69a0              LDR      r0,[r4,#0x18]
003b82  f0400010          ORR      r0,r0,#0x10
003b86  61a0              STR      r0,[r4,#0x18]
                  |L1.15240|
;;;5494   		} 
;;;5495   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5496   	#ifndef UKU2071x 
;;;5497   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5498   		{
;;;5499   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5500   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5501   		}
;;;5502   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5503   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5504   	#endif
;;;5505   	#ifdef UKU2071x 
;;;5506   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003b88  20d2              MOVS     r0,#0xd2
003b8a  f7fffffe          BL       mess_find_unvol
003b8e  b110              CBZ      r0,|L1.15254|
003b90  6828              LDR      r0,[r5,#0]  ; mess_data
003b92  2866              CMP      r0,#0x66
003b94  d037              BEQ      |L1.15366|
                  |L1.15254|
;;;5507   		{
;;;5508   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5509   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5510   		}
;;;5511   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003b96  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003b98  07c0              LSLS     r0,r0,#31
003b9a  d040              BEQ      |L1.15390|
;;;5512   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003b9c  6fa0              LDR      r0,[r4,#0x78]
003b9e  f0407000          ORR      r0,r0,#0x2000000
003ba2  67a0              STR      r0,[r4,#0x78]
                  |L1.15268|
;;;5513   	#endif
;;;5514   
;;;5515   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ba4  20d2              MOVS     r0,#0xd2
003ba6  f7fffffe          BL       mess_find_unvol
003baa  b110              CBZ      r0,|L1.15282|
003bac  6828              LDR      r0,[r5,#0]  ; mess_data
003bae  286a              CMP      r0,#0x6a
003bb0  d03a              BEQ      |L1.15400|
                  |L1.15282|
;;;5516   		{
;;;5517   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5518   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5519   	     }
;;;5520   	else 
;;;5521   		{
;;;5522   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003bb2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003bb4  4238              TST      r0,r7
003bb6  d045              BEQ      |L1.15428|
;;;5523   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003bb8  69a0              LDR      r0,[r4,#0x18]
003bba  f0400080          ORR      r0,r0,#0x80
003bbe  61a0              STR      r0,[r4,#0x18]
                  |L1.15296|
;;;5524   		}
;;;5525   	//Реле аварии БПС
;;;5526   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003bc0  20d2              MOVS     r0,#0xd2
003bc2  f7fffffe          BL       mess_find_unvol
003bc6  b110              CBZ      r0,|L1.15310|
003bc8  6828              LDR      r0,[r5,#0]  ; mess_data
003bca  286a              CMP      r0,#0x6a
003bcc  d040              BEQ      |L1.15440|
                  |L1.15310|
;;;5527   		{
;;;5528   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5529   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5530        	}
;;;5531   	else 
;;;5532   		{
;;;5533   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003bce  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003bd0  4238              TST      r0,r7
003bd2  d04c              BEQ      |L1.15470|
;;;5534        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003bd4  69a0              LDR      r0,[r4,#0x18]
003bd6  f0400020          ORR      r0,r0,#0x20
003bda  61a0              STR      r0,[r4,#0x18]
003bdc  e0d2              B        |L1.15748|
                  |L1.15326|
003bde  6868              LDR      r0,[r5,#4]            ;5487  ; mess_data
003be0  b138              CBZ      r0,|L1.15346|
003be2  2801              CMP      r0,#1                 ;5488
003be4  d1d0              BNE      |L1.15240|
003be6  69a0              LDR      r0,[r4,#0x18]         ;5488
003be8  f0400010          ORR      r0,r0,#0x10           ;5488
003bec  61a0              STR      r0,[r4,#0x18]         ;5488
003bee  e7cb              B        |L1.15240|
                  |L1.15344|
003bf0  e004              B        |L1.15356|
                  |L1.15346|
003bf2  69e0              LDR      r0,[r4,#0x1c]         ;5487
003bf4  f0400010          ORR      r0,r0,#0x10           ;5487
003bf8  61e0              STR      r0,[r4,#0x1c]         ;5487
003bfa  e7c5              B        |L1.15240|
                  |L1.15356|
003bfc  69e0              LDR      r0,[r4,#0x1c]         ;5492
003bfe  f0400010          ORR      r0,r0,#0x10           ;5492
003c02  61e0              STR      r0,[r4,#0x1c]         ;5492
003c04  e7c0              B        |L1.15240|
                  |L1.15366|
003c06  6868              LDR      r0,[r5,#4]            ;5508  ; mess_data
003c08  b120              CBZ      r0,|L1.15380|
003c0a  69e0              LDR      r0,[r4,#0x1c]         ;5509
003c0c  f0407000          ORR      r0,r0,#0x2000000      ;5509
003c10  61e0              STR      r0,[r4,#0x1c]         ;5509
003c12  e7c7              B        |L1.15268|
                  |L1.15380|
003c14  69a0              LDR      r0,[r4,#0x18]         ;5508
003c16  f0407000          ORR      r0,r0,#0x2000000      ;5508
003c1a  61a0              STR      r0,[r4,#0x18]         ;5508
003c1c  e7c2              B        |L1.15268|
                  |L1.15390|
003c1e  6ba0              LDR      r0,[r4,#0x38]         ;5511
003c20  f0407000          ORR      r0,r0,#0x2000000      ;5511
003c24  63a0              STR      r0,[r4,#0x38]         ;5511
003c26  e7bd              B        |L1.15268|
                  |L1.15400|
003c28  6868              LDR      r0,[r5,#4]            ;5517  ; mess_data
003c2a  b130              CBZ      r0,|L1.15418|
003c2c  2801              CMP      r0,#1                 ;5518
003c2e  d1c7              BNE      |L1.15296|
003c30  69a0              LDR      r0,[r4,#0x18]         ;5518
003c32  f0400080          ORR      r0,r0,#0x80           ;5518
003c36  61a0              STR      r0,[r4,#0x18]         ;5518
003c38  e7c2              B        |L1.15296|
                  |L1.15418|
003c3a  69e0              LDR      r0,[r4,#0x1c]         ;5517
003c3c  f0400080          ORR      r0,r0,#0x80           ;5517
003c40  61e0              STR      r0,[r4,#0x1c]         ;5517
003c42  e7bd              B        |L1.15296|
                  |L1.15428|
003c44  69e0              LDR      r0,[r4,#0x1c]         ;5522
003c46  f0400080          ORR      r0,r0,#0x80           ;5522
003c4a  61e0              STR      r0,[r4,#0x1c]         ;5522
003c4c  e7b8              B        |L1.15296|
                  |L1.15438|
003c4e  e013              B        |L1.15480|
                  |L1.15440|
003c50  6868              LDR      r0,[r5,#4]            ;5528  ; mess_data
003c52  b110              CBZ      r0,|L1.15450|
003c54  2801              CMP      r0,#1                 ;5529
003c56  d005              BEQ      |L1.15460|
003c58  e094              B        |L1.15748|
                  |L1.15450|
003c5a  69e0              LDR      r0,[r4,#0x1c]         ;5528
003c5c  f0400020          ORR      r0,r0,#0x20           ;5528
003c60  61e0              STR      r0,[r4,#0x1c]         ;5528
003c62  e08f              B        |L1.15748|
                  |L1.15460|
003c64  69a0              LDR      r0,[r4,#0x18]         ;5529
003c66  f0400020          ORR      r0,r0,#0x20           ;5529
003c6a  61a0              STR      r0,[r4,#0x18]         ;5529
003c6c  e08a              B        |L1.15748|
                  |L1.15470|
003c6e  69e0              LDR      r0,[r4,#0x1c]         ;5533
003c70  f0400020          ORR      r0,r0,#0x20           ;5533
003c74  61e0              STR      r0,[r4,#0x1c]         ;5533
003c76  e085              B        |L1.15748|
                  |L1.15480|
;;;5535   		} 
;;;5536   	}
;;;5537   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003c78  f5a041ac          SUB      r1,r0,#0x5600
003c7c  3911              SUBS     r1,r1,#0x11
003c7e  d001              BEQ      |L1.15492|
003c80  310f              ADDS     r1,r1,#0xf
003c82  d163              BNE      |L1.15692|
                  |L1.15492|
;;;5538   	{
;;;5539   	#ifndef UKU2071x 
;;;5540   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5541   		{
;;;5542   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5543   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5544   		}
;;;5545   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5546   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5547   	#endif
;;;5548   	#ifdef UKU2071x 
;;;5549   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c84  20d2              MOVS     r0,#0xd2
003c86  f7fffffe          BL       mess_find_unvol
003c8a  b110              CBZ      r0,|L1.15506|
003c8c  6828              LDR      r0,[r5,#0]  ; mess_data
003c8e  2866              CMP      r0,#0x66
003c90  d023              BEQ      |L1.15578|
                  |L1.15506|
;;;5550   		{
;;;5551   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5552   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5553   		}
;;;5554   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003c92  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c94  07c0              LSLS     r0,r0,#31
003c96  d02c              BEQ      |L1.15602|
;;;5555   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003c98  6fa0              LDR      r0,[r4,#0x78]
003c9a  f0407000          ORR      r0,r0,#0x2000000
003c9e  67a0              STR      r0,[r4,#0x78]
                  |L1.15520|
;;;5556   	#endif
;;;5557   	
;;;5558   	
;;;5559   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ca0  20d2              MOVS     r0,#0xd2
003ca2  f7fffffe          BL       mess_find_unvol
003ca6  b110              CBZ      r0,|L1.15534|
003ca8  6828              LDR      r0,[r5,#0]  ; mess_data
003caa  286a              CMP      r0,#0x6a
003cac  d026              BEQ      |L1.15612|
                  |L1.15534|
;;;5560   		{
;;;5561   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5562   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5563   	     }
;;;5564   	else 
;;;5565   		{
;;;5566   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003cae  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003cb0  4238              TST      r0,r7
003cb2  d031              BEQ      |L1.15640|
;;;5567   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003cb4  69a0              LDR      r0,[r4,#0x18]
003cb6  f0400080          ORR      r0,r0,#0x80
003cba  61a0              STR      r0,[r4,#0x18]
                  |L1.15548|
;;;5568   		} 
;;;5569   
;;;5570   	//Реле аварий батарей
;;;5571   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003cbc  20d2              MOVS     r0,#0xd2
003cbe  f7fffffe          BL       mess_find_unvol
003cc2  b110              CBZ      r0,|L1.15562|
003cc4  6828              LDR      r0,[r5,#0]  ; mess_data
003cc6  2867              CMP      r0,#0x67
003cc8  d02b              BEQ      |L1.15650|
                  |L1.15562|
;;;5572   		{
;;;5573   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5574   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5575        	}
;;;5576   	else 
;;;5577   		{
;;;5578   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003cca  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003cce  b390              CBZ      r0,|L1.15670|
;;;5579        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003cd0  69a0              LDR      r0,[r4,#0x18]
003cd2  f0400010          ORR      r0,r0,#0x10
003cd6  61a0              STR      r0,[r4,#0x18]
003cd8  e054              B        |L1.15748|
                  |L1.15578|
003cda  6868              LDR      r0,[r5,#4]            ;5551  ; mess_data
003cdc  b120              CBZ      r0,|L1.15592|
003cde  6fa0              LDR      r0,[r4,#0x78]         ;5552
003ce0  f0407000          ORR      r0,r0,#0x2000000      ;5552
003ce4  67a0              STR      r0,[r4,#0x78]         ;5552
003ce6  e7db              B        |L1.15520|
                  |L1.15592|
003ce8  6fe0              LDR      r0,[r4,#0x7c]         ;5551
003cea  f0407000          ORR      r0,r0,#0x2000000      ;5551
003cee  67e0              STR      r0,[r4,#0x7c]         ;5551
003cf0  e7d6              B        |L1.15520|
                  |L1.15602|
003cf2  6fe0              LDR      r0,[r4,#0x7c]         ;5554
003cf4  f0407000          ORR      r0,r0,#0x2000000      ;5554
003cf8  67e0              STR      r0,[r4,#0x7c]         ;5554
003cfa  e7d1              B        |L1.15520|
                  |L1.15612|
003cfc  6868              LDR      r0,[r5,#4]            ;5561  ; mess_data
003cfe  b130              CBZ      r0,|L1.15630|
003d00  2801              CMP      r0,#1                 ;5562
003d02  d1db              BNE      |L1.15548|
003d04  69a0              LDR      r0,[r4,#0x18]         ;5562
003d06  f0400080          ORR      r0,r0,#0x80           ;5562
003d0a  61a0              STR      r0,[r4,#0x18]         ;5562
003d0c  e7d6              B        |L1.15548|
                  |L1.15630|
003d0e  69e0              LDR      r0,[r4,#0x1c]         ;5561
003d10  f0400080          ORR      r0,r0,#0x80           ;5561
003d14  61e0              STR      r0,[r4,#0x1c]         ;5561
003d16  e7d1              B        |L1.15548|
                  |L1.15640|
003d18  69e0              LDR      r0,[r4,#0x1c]         ;5566
003d1a  f0400080          ORR      r0,r0,#0x80           ;5566
003d1e  61e0              STR      r0,[r4,#0x1c]         ;5566
003d20  e7cc              B        |L1.15548|
                  |L1.15650|
003d22  6868              LDR      r0,[r5,#4]            ;5573  ; mess_data
003d24  b110              CBZ      r0,|L1.15660|
003d26  2801              CMP      r0,#1                 ;5574
003d28  d006              BEQ      |L1.15672|
003d2a  e02b              B        |L1.15748|
                  |L1.15660|
003d2c  69e0              LDR      r0,[r4,#0x1c]         ;5573
003d2e  f0400010          ORR      r0,r0,#0x10           ;5573
003d32  61e0              STR      r0,[r4,#0x1c]         ;5573
003d34  e026              B        |L1.15748|
                  |L1.15670|
003d36  e004              B        |L1.15682|
                  |L1.15672|
003d38  69a0              LDR      r0,[r4,#0x18]         ;5574
003d3a  f0400010          ORR      r0,r0,#0x10           ;5574
003d3e  61a0              STR      r0,[r4,#0x18]         ;5574
003d40  e020              B        |L1.15748|
                  |L1.15682|
003d42  69e0              LDR      r0,[r4,#0x1c]         ;5578
003d44  f0400010          ORR      r0,r0,#0x10           ;5578
003d48  61e0              STR      r0,[r4,#0x1c]         ;5578
003d4a  e01b              B        |L1.15748|
                  |L1.15692|
;;;5580   		} 
;;;5581   	} 	 
;;;5582   else	
;;;5583   	{
;;;5584   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5585   	#ifndef UKU2071x 
;;;5586   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5587   		{
;;;5588   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5589   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5590   		}
;;;5591   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5592   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5593   	#endif
;;;5594   	#ifdef UKU2071x 
;;;5595   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003d4c  20d2              MOVS     r0,#0xd2
003d4e  f7fffffe          BL       mess_find_unvol
003d52  b110              CBZ      r0,|L1.15706|
003d54  6828              LDR      r0,[r5,#0]  ; mess_data
003d56  2866              CMP      r0,#0x66
003d58  d026              BEQ      |L1.15784|
                  |L1.15706|
;;;5596   		{
;;;5597   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5598   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5599   		}
;;;5600   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003d5a  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d5c  07c0              LSLS     r0,r0,#31
003d5e  d02f              BEQ      |L1.15808|
;;;5601   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003d60  6fa0              LDR      r0,[r4,#0x78]
003d62  f0407000          ORR      r0,r0,#0x2000000
003d66  67a0              STR      r0,[r4,#0x78]
                  |L1.15720|
;;;5602   	#endif
;;;5603   
;;;5604   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003d68  20d2              MOVS     r0,#0xd2
003d6a  f7fffffe          BL       mess_find_unvol
003d6e  b110              CBZ      r0,|L1.15734|
003d70  6828              LDR      r0,[r5,#0]  ; mess_data
003d72  286a              CMP      r0,#0x6a
003d74  d029              BEQ      |L1.15818|
                  |L1.15734|
;;;5605   		{
;;;5606   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5607   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5608        	}
;;;5609   	else 
;;;5610   		{
;;;5611   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003d76  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d78  4238              TST      r0,r7
003d7a  d034              BEQ      |L1.15846|
;;;5612        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003d7c  69a0              LDR      r0,[r4,#0x18]
003d7e  f0400020          ORR      r0,r0,#0x20
003d82  61a0              STR      r0,[r4,#0x18]
                  |L1.15748|
;;;5613   		}
;;;5614   	}
;;;5615   //Дополнительное реле УКУ 
;;;5616   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003d84  20d2              MOVS     r0,#0xd2
003d86  f7fffffe          BL       mess_find_unvol
;;;5617   	{
;;;5618   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5619   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5620   	}
;;;5621   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5622   	{
;;;5623   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003d8a  f8df83fc          LDR      r8,|L1.16776|
003d8e  4fff              LDR      r7,|L1.16780|
003d90  4eff              LDR      r6,|L1.16784|
003d92  b110              CBZ      r0,|L1.15770|
003d94  6828              LDR      r0,[r5,#0]            ;5616  ; mess_data
003d96  2871              CMP      r0,#0x71              ;5616
003d98  d02a              BEQ      |L1.15856|
                  |L1.15770|
003d9a  48fe              LDR      r0,|L1.16788|
003d9c  f9b00000          LDRSH    r0,[r0,#0]            ;5621  ; DOP_RELE_FUNC
003da0  b380              CBZ      r0,|L1.15876|
;;;5624   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5625   	}
;;;5626   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003da2  2801              CMP      r0,#1
003da4  d066              BEQ      |L1.15988|
003da6  e070              B        |L1.16010|
                  |L1.15784|
003da8  6868              LDR      r0,[r5,#4]            ;5597  ; mess_data
003daa  b120              CBZ      r0,|L1.15798|
003dac  69e0              LDR      r0,[r4,#0x1c]         ;5598
003dae  f0407000          ORR      r0,r0,#0x2000000      ;5598
003db2  61e0              STR      r0,[r4,#0x1c]         ;5598
003db4  e7d8              B        |L1.15720|
                  |L1.15798|
003db6  69a0              LDR      r0,[r4,#0x18]         ;5597
003db8  f0407000          ORR      r0,r0,#0x2000000      ;5597
003dbc  61a0              STR      r0,[r4,#0x18]         ;5597
003dbe  e7d3              B        |L1.15720|
                  |L1.15808|
003dc0  6ba0              LDR      r0,[r4,#0x38]         ;5600
003dc2  f0407000          ORR      r0,r0,#0x2000000      ;5600
003dc6  63a0              STR      r0,[r4,#0x38]         ;5600
003dc8  e7ce              B        |L1.15720|
                  |L1.15818|
003dca  6868              LDR      r0,[r5,#4]            ;5606  ; mess_data
003dcc  b130              CBZ      r0,|L1.15836|
003dce  2801              CMP      r0,#1                 ;5607
003dd0  d1d8              BNE      |L1.15748|
003dd2  69a0              LDR      r0,[r4,#0x18]         ;5607
003dd4  f0400020          ORR      r0,r0,#0x20           ;5607
003dd8  61a0              STR      r0,[r4,#0x18]         ;5607
003dda  e7d3              B        |L1.15748|
                  |L1.15836|
003ddc  69e0              LDR      r0,[r4,#0x1c]         ;5606
003dde  f0400020          ORR      r0,r0,#0x20           ;5606
003de2  61e0              STR      r0,[r4,#0x1c]         ;5606
003de4  e7ce              B        |L1.15748|
                  |L1.15846|
003de6  69e0              LDR      r0,[r4,#0x1c]         ;5611
003de8  f0400020          ORR      r0,r0,#0x20           ;5611
003dec  61e0              STR      r0,[r4,#0x1c]         ;5611
003dee  e7c9              B        |L1.15748|
                  |L1.15856|
003df0  6868              LDR      r0,[r5,#4]            ;5618  ; mess_data
003df2  b110              CBZ      r0,|L1.15866|
003df4  2801              CMP      r0,#1                 ;5619
003df6  d006              BEQ      |L1.15878|
003df8  e047              B        |L1.16010|
                  |L1.15866|
003dfa  69e0              LDR      r0,[r4,#0x1c]         ;5618
003dfc  f4407000          ORR      r0,r0,#0x200          ;5618
003e00  61e0              STR      r0,[r4,#0x1c]         ;5618
003e02  e042              B        |L1.16010|
                  |L1.15876|
003e04  e004              B        |L1.15888|
                  |L1.15878|
003e06  69a0              LDR      r0,[r4,#0x18]         ;5619
003e08  f4407000          ORR      r0,r0,#0x200          ;5619
003e0c  61a0              STR      r0,[r4,#0x18]         ;5619
003e0e  e03c              B        |L1.16010|
                  |L1.15888|
003e10  48e1              LDR      r0,|L1.16792|
003e12  49e2              LDR      r1,|L1.16796|
003e14  f9b00000          LDRSH    r0,[r0,#0]            ;5623  ; speedChIsOn
003e18  b9d0              CBNZ     r0,|L1.15952|
003e1a  f8962023          LDRB     r2,[r6,#0x23]         ;5623  ; spc_stat
003e1e  2a02              CMP      r2,#2                 ;5623
003e20  d016              BEQ      |L1.15952|
003e22  780a              LDRB     r2,[r1,#0]            ;5623  ; hv_vz_stat
003e24  b9a2              CBNZ     r2,|L1.15952|
003e26  783a              LDRB     r2,[r7,#0]            ;5623  ; sp_ch_stat
003e28  b992              CBNZ     r2,|L1.15952|
003e2a  7972              LDRB     r2,[r6,#5]            ;5623  ; vz1_stat
003e2c  b982              CBNZ     r2,|L1.15952|
003e2e  79f2              LDRB     r2,[r6,#7]            ;5623  ; vz2_stat
003e30  b972              CBNZ     r2,|L1.15952|
003e32  f9b82000          LDRSH    r2,[r8,#0]            ;5623  ; load_U
003e36  230a              MOVS     r3,#0xa               ;5623
003e38  fb92f2f3          SDIV     r2,r2,r3              ;5623
003e3c  4bd8              LDR      r3,|L1.16800|
003e3e  f9b33000          LDRSH    r3,[r3,#0]            ;5623  ; UVENTOFF
003e42  429a              CMP      r2,r3                 ;5623
003e44  da04              BGE      |L1.15952|
003e46  69e0              LDR      r0,[r4,#0x1c]         ;5623
003e48  f4407000          ORR      r0,r0,#0x200          ;5623
003e4c  61e0              STR      r0,[r4,#0x1c]         ;5623
003e4e  e01c              B        |L1.16010|
                  |L1.15952|
003e50  b958              CBNZ     r0,|L1.15978|
003e52  f8960023          LDRB     r0,[r6,#0x23]         ;5624  ; spc_stat
003e56  2802              CMP      r0,#2                 ;5624
003e58  d007              BEQ      |L1.15978|
003e5a  7808              LDRB     r0,[r1,#0]            ;5624  ; hv_vz_stat
003e5c  b928              CBNZ     r0,|L1.15978|
003e5e  7838              LDRB     r0,[r7,#0]            ;5624  ; sp_ch_stat
003e60  b918              CBNZ     r0,|L1.15978|
003e62  7970              LDRB     r0,[r6,#5]            ;5624  ; vz1_stat
003e64  b908              CBNZ     r0,|L1.15978|
003e66  79f0              LDRB     r0,[r6,#7]            ;5624  ; vz2_stat
003e68  b178              CBZ      r0,|L1.16010|
                  |L1.15978|
003e6a  69a0              LDR      r0,[r4,#0x18]         ;5624
003e6c  f4407000          ORR      r0,r0,#0x200          ;5624
003e70  61a0              STR      r0,[r4,#0x18]         ;5624
003e72  e00a              B        |L1.16010|
                  |L1.15988|
;;;5627   	{
;;;5628   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003e74  20d2              MOVS     r0,#0xd2
003e76  f7fffffe          BL       mess_find_unvol
003e7a  b110              CBZ      r0,|L1.16002|
003e7c  6828              LDR      r0,[r5,#0]  ; mess_data
003e7e  2872              CMP      r0,#0x72
003e80  d017              BEQ      |L1.16050|
                  |L1.16002|
;;;5629   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
003e82  69a0              LDR      r0,[r4,#0x18]
003e84  f4407000          ORR      r0,r0,#0x200
003e88  61a0              STR      r0,[r4,#0x18]
                  |L1.16010|
;;;5630   	}
;;;5631   	
;;;5632   //Блок выносной реле
;;;5633   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
003e8a  20d2              MOVS     r0,#0xd2
003e8c  f7fffffe          BL       mess_find_unvol
;;;5634   	{
;;;5635   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
003e90  f8df9310          LDR      r9,|L1.16804|
;;;5636   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5637   	}
;;;5638   else 
;;;5639   	{
;;;5640   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
003e94  4cc4              LDR      r4,|L1.16808|
003e96  b110              CBZ      r0,|L1.16030|
003e98  6828              LDR      r0,[r5,#0]            ;5633  ; mess_data
003e9a  2875              CMP      r0,#0x75              ;5633
003e9c  d00e              BEQ      |L1.16060|
                  |L1.16030|
003e9e  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003ea0  07c0              LSLS     r0,r0,#31
003ea2  d01e              BEQ      |L1.16098|
003ea4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003ea8  f0400001          ORR      r0,r0,#1
003eac  f8890000          STRB     r0,[r9,#0]
003eb0  e01d              B        |L1.16110|
                  |L1.16050|
003eb2  69e0              LDR      r0,[r4,#0x1c]         ;5628
003eb4  f4407000          ORR      r0,r0,#0x200          ;5628
003eb8  61e0              STR      r0,[r4,#0x1c]         ;5628
003eba  e7e6              B        |L1.16010|
                  |L1.16060|
003ebc  6868              LDR      r0,[r5,#4]            ;5635  ; mess_data
003ebe  b110              CBZ      r0,|L1.16070|
003ec0  2801              CMP      r0,#1                 ;5636
003ec2  d007              BEQ      |L1.16084|
003ec4  e013              B        |L1.16110|
                  |L1.16070|
003ec6  f8990000          LDRB     r0,[r9,#0]            ;5635  ; bdr_transmit_stat
003eca  f00000fe          AND      r0,r0,#0xfe           ;5635
003ece  f8890000          STRB     r0,[r9,#0]            ;5635
003ed2  e00c              B        |L1.16110|
                  |L1.16084|
003ed4  f8990000          LDRB     r0,[r9,#0]            ;5636  ; bdr_transmit_stat
003ed8  f0400001          ORR      r0,r0,#1              ;5636
003edc  f8890000          STRB     r0,[r9,#0]            ;5636
003ee0  e005              B        |L1.16110|
                  |L1.16098|
;;;5641   	else 						bdr_transmit_stat&=0xfe;
003ee2  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003ee6  f00000fe          AND      r0,r0,#0xfe
003eea  f8890000          STRB     r0,[r9,#0]
                  |L1.16110|
;;;5642   	}	
;;;5643   
;;;5644   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
003eee  20d2              MOVS     r0,#0xd2
003ef0  f7fffffe          BL       mess_find_unvol
003ef4  b110              CBZ      r0,|L1.16124|
003ef6  6828              LDR      r0,[r5,#0]  ; mess_data
003ef8  2876              CMP      r0,#0x76
003efa  d009              BEQ      |L1.16144|
                  |L1.16124|
;;;5645   	{
;;;5646   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5647   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5648   	}
;;;5649   else 
;;;5650   	{
;;;5651   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
003efc  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003efe  07c0              LSLS     r0,r0,#31
003f00  d019              BEQ      |L1.16182|
003f02  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003f06  f0400002          ORR      r0,r0,#2
003f0a  f8890000          STRB     r0,[r9,#0]
003f0e  e018              B        |L1.16194|
                  |L1.16144|
003f10  6868              LDR      r0,[r5,#4]            ;5646  ; mess_data
003f12  b110              CBZ      r0,|L1.16154|
003f14  2801              CMP      r0,#1                 ;5647
003f16  d007              BEQ      |L1.16168|
003f18  e013              B        |L1.16194|
                  |L1.16154|
003f1a  f8990000          LDRB     r0,[r9,#0]            ;5646  ; bdr_transmit_stat
003f1e  f00000fd          AND      r0,r0,#0xfd           ;5646
003f22  f8890000          STRB     r0,[r9,#0]            ;5646
003f26  e00c              B        |L1.16194|
                  |L1.16168|
003f28  f8990000          LDRB     r0,[r9,#0]            ;5647  ; bdr_transmit_stat
003f2c  f0400002          ORR      r0,r0,#2              ;5647
003f30  f8890000          STRB     r0,[r9,#0]            ;5647
003f34  e005              B        |L1.16194|
                  |L1.16182|
;;;5652   	else 						bdr_transmit_stat&=0xfd;
003f36  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003f3a  f00000fd          AND      r0,r0,#0xfd
003f3e  f8890000          STRB     r0,[r9,#0]
                  |L1.16194|
;;;5653   	}	
;;;5654   	
;;;5655   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
003f42  20d2              MOVS     r0,#0xd2
003f44  f7fffffe          BL       mess_find_unvol
003f48  b110              CBZ      r0,|L1.16208|
003f4a  6828              LDR      r0,[r5,#0]  ; mess_data
003f4c  2877              CMP      r0,#0x77
003f4e  d009              BEQ      |L1.16228|
                  |L1.16208|
;;;5656   	{
;;;5657   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5658   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5659   	}
;;;5660   else 
;;;5661   	{
;;;5662   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
003f50  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003f52  07c0              LSLS     r0,r0,#31
003f54  d019              BEQ      |L1.16266|
003f56  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003f5a  f0400004          ORR      r0,r0,#4
003f5e  f8890000          STRB     r0,[r9,#0]
003f62  e018              B        |L1.16278|
                  |L1.16228|
003f64  6868              LDR      r0,[r5,#4]            ;5657  ; mess_data
003f66  b110              CBZ      r0,|L1.16238|
003f68  2801              CMP      r0,#1                 ;5658
003f6a  d007              BEQ      |L1.16252|
003f6c  e013              B        |L1.16278|
                  |L1.16238|
003f6e  f8990000          LDRB     r0,[r9,#0]            ;5657  ; bdr_transmit_stat
003f72  f00000fb          AND      r0,r0,#0xfb           ;5657
003f76  f8890000          STRB     r0,[r9,#0]            ;5657
003f7a  e00c              B        |L1.16278|
                  |L1.16252|
003f7c  f8990000          LDRB     r0,[r9,#0]            ;5658  ; bdr_transmit_stat
003f80  f0400004          ORR      r0,r0,#4              ;5658
003f84  f8890000          STRB     r0,[r9,#0]            ;5658
003f88  e005              B        |L1.16278|
                  |L1.16266|
;;;5663   	else 						bdr_transmit_stat&=0xfb;
003f8a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003f8e  f00000fb          AND      r0,r0,#0xfb
003f92  f8890000          STRB     r0,[r9,#0]
                  |L1.16278|
;;;5664   	}	
;;;5665   	
;;;5666   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
003f96  20d2              MOVS     r0,#0xd2
003f98  f7fffffe          BL       mess_find_unvol
003f9c  b110              CBZ      r0,|L1.16292|
003f9e  6828              LDR      r0,[r5,#0]  ; mess_data
003fa0  2878              CMP      r0,#0x78
003fa2  d009              BEQ      |L1.16312|
                  |L1.16292|
;;;5667   	{
;;;5668   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5669   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5670   	}
;;;5671   else 
;;;5672   	{
;;;5673   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
003fa4  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003fa6  07c0              LSLS     r0,r0,#31
003fa8  d019              BEQ      |L1.16350|
003faa  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003fae  f0400008          ORR      r0,r0,#8
003fb2  f8890000          STRB     r0,[r9,#0]
003fb6  e018              B        |L1.16362|
                  |L1.16312|
003fb8  6868              LDR      r0,[r5,#4]            ;5668  ; mess_data
003fba  b110              CBZ      r0,|L1.16322|
003fbc  2801              CMP      r0,#1                 ;5669
003fbe  d007              BEQ      |L1.16336|
003fc0  e013              B        |L1.16362|
                  |L1.16322|
003fc2  f8990000          LDRB     r0,[r9,#0]            ;5668  ; bdr_transmit_stat
003fc6  f00000f7          AND      r0,r0,#0xf7           ;5668
003fca  f8890000          STRB     r0,[r9,#0]            ;5668
003fce  e00c              B        |L1.16362|
                  |L1.16336|
003fd0  f8990000          LDRB     r0,[r9,#0]            ;5669  ; bdr_transmit_stat
003fd4  f0400008          ORR      r0,r0,#8              ;5669
003fd8  f8890000          STRB     r0,[r9,#0]            ;5669
003fdc  e005              B        |L1.16362|
                  |L1.16350|
;;;5674   	else 						bdr_transmit_stat&=0xf7;
003fde  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003fe2  f00000f7          AND      r0,r0,#0xf7
003fe6  f8890000          STRB     r0,[r9,#0]
                  |L1.16362|
;;;5675   	}	
;;;5676   					 	
;;;5677   #endif
;;;5678   
;;;5679   #ifdef UKU_KONTUR
;;;5680   
;;;5681   //Реле общей аварии
;;;5682   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5683   	{
;;;5684   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5685   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5686   	}
;;;5687   else 
;;;5688   	{
;;;5689        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5690             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5691             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5692             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5693             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5694        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5695   	}
;;;5696   
;;;5697   	
;;;5698   //rel_warm_plazma=0;
;;;5699   //Реле освещения   
;;;5700   /*
;;;5701   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5702   	{
;;;5703   	if(mess_data[1]==0)
;;;5704   		{
;;;5705   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5706   		rel_warm_plazma=1;
;;;5707   		}
;;;5708   	else if(mess_data[1]==1) 
;;;5709   		{
;;;5710   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5711   		rel_warm_plazma=2;
;;;5712   		}
;;;5713        }
;;;5714   else 
;;;5715   	{
;;;5716   	if(warm_stat_k==wsOFF) 
;;;5717   		{
;;;5718   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5719   		rel_warm_plazma=3;
;;;5720   		}
;;;5721        else 
;;;5722   		{
;;;5723   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5724   		rel_warm_plazma=4;
;;;5725   		}
;;;5726   	}
;;;5727   */
;;;5728   //Реле освещения
;;;5729   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5730   	{
;;;5731   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5732   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5733        }
;;;5734   else 
;;;5735   	{
;;;5736   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5737        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5738   	}
;;;5739   
;;;5740   
;;;5741   
;;;5742   //Реле выключения нагрузки
;;;5743   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5744   	{
;;;5745   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5746   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5747        }
;;;5748   else if(tloaddisable_cmnd==0)
;;;5749   	{
;;;5750   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5751   	}
;;;5752   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5753   	{
;;;5754   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5755   	}
;;;5756   
;;;5757   else 
;;;5758   	{
;;;5759   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5760        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5761   	} 
;;;5762   
;;;5763   //Реле осевого вентилятора или отопителя
;;;5764   if(RELE_LOG)
;;;5765   	{
;;;5766   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5767   		{
;;;5768   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5769   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5770   		}
;;;5771   	else 
;;;5772   		{
;;;5773   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5774   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5775   		} 
;;;5776   
;;;5777   	}
;;;5778   else 
;;;5779   	{
;;;5780   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5781   		{
;;;5782   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5783   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5784   		}
;;;5785   	else 
;;;5786   		{
;;;5787   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5788   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5789   		} 
;;;5790   	}
;;;5791   #endif
;;;5792   
;;;5793   
;;;5794   #ifdef UKU_TELECORE2015
;;;5795   //Реле аварии сети
;;;5796   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5797   	{
;;;5798   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5799   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5800   	}
;;;5801   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5802   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5803   
;;;5804   
;;;5805   //Реле освещения
;;;5806   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5807   	{
;;;5808   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5809   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5810        }
;;;5811   else 
;;;5812   	{
;;;5813   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5814        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5815   	}
;;;5816   
;;;5817   //Реле отопителя
;;;5818   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5819   	{
;;;5820   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5821   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5822   	}
;;;5823   else 
;;;5824   	{
;;;5825   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5826        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5827   	} 
;;;5828   //Реле вентилятора
;;;5829   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5830   	{
;;;5831   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5832   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5833   	}
;;;5834   else 
;;;5835   	{
;;;5836   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5837        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5838   	} 
;;;5839   
;;;5840   //Реле внутреннего вентилятора
;;;5841   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5842   	{
;;;5843   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5844   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5845   	}
;;;5846   else 
;;;5847   	{
;;;5848   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5849        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5850   	} 
;;;5851   
;;;5852   #endif
;;;5853   
;;;5854   #ifdef UKU_TELECORE2017
;;;5855   //Реле аварии сети
;;;5856   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5857   	{
;;;5858   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5859   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5860   	}
;;;5861   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5862   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5863   
;;;5864   
;;;5865   //Реле освещения
;;;5866   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5867   	{
;;;5868   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5869   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5870        }
;;;5871   else 
;;;5872   	{
;;;5873   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5874        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5875   	}
;;;5876   
;;;5877   //Реле отопителя
;;;5878   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5879   	{
;;;5880   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5881   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5882   	}
;;;5883   else 
;;;5884   	{
;;;5885   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5886        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5887   	} 
;;;5888   //Реле вентилятора
;;;5889   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5890   	{
;;;5891   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5892   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5893   	}
;;;5894   else 
;;;5895   	{
;;;5896   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5897        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5898   	} 
;;;5899   
;;;5900   //Реле внутреннего вентилятора
;;;5901   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5902   	{
;;;5903   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5904   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5905   	}
;;;5906   else 
;;;5907   	{
;;;5908   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5909        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5910   	} 
;;;5911   
;;;5912   //Реле выключения нагрузки
;;;5913   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5914   	{
;;;5915   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5916   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5917        }
;;;5918   else if(tloaddisable_cmnd==0)
;;;5919   	{
;;;5920   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5921   	}
;;;5922   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5923   	{
;;;5924   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5925   	}
;;;5926   
;;;5927   else 
;;;5928   	{
;;;5929   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5930        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5931   	} 
;;;5932   
;;;5933   
;;;5934   #endif
;;;5935   
;;;5936   #ifdef IPS_SGEP_GAZPROM
;;;5937   rele_hndl_plazma[0]++;
;;;5938   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5939   	{
;;;5940   	rele_hndl_plazma[1]++;
;;;5941   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5942   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5943        }
;;;5944   else 
;;;5945   	{
;;;5946   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5947        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5948   	} 
;;;5949   
;;;5950   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5951   	{
;;;5952   	rele_hndl_plazma[2]++;
;;;5953   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5954   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5955   	}
;;;5956   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5957   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5958   #endif
;;;5959   
;;;5960   if(NUMBDR==1)
003fea  4870              LDR      r0,|L1.16812|
003fec  8800              LDRH     r0,[r0,#0]  ; NUMBDR
003fee  2801              CMP      r0,#1
003ff0  d17e              BNE      |L1.16624|
;;;5961   	{
;;;5962   	char ii_;
;;;5963   	char bdr_avar_stat_temp=0;
003ff2  f04f0000          MOV      r0,#0
;;;5964   	for	(ii_=0;ii_<4;ii_++)
003ff6  4601              MOV      r1,r0
;;;5965   		{
;;;5966   		//АБ разряжена
;;;5967   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5968   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5969   		//Ускоренный заряд
;;;5970   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5971   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5972   		//Выравнивающий заряд
;;;5973   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5974   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5975   		//Общая авария ЗВУ
;;;5976   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5977   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5978   		//Uвых завышено
;;;5979   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5980   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
003ff8  f8dfa1b4          LDR      r10,|L1.16816|
;;;5981   		//Uвых занижено
;;;5982   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5983   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5984   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5985   			(
;;;5986   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
003ffc  f8df91b4          LDR      r9,|L1.16820|
004000  4d6d              LDR      r5,|L1.16824|
004002  f8dfb1b8          LDR      r11,|L1.16828|
004006  f04f0301          MOV      r3,#1                 ;4918
                  |L1.16394|
00400a  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5967
00400e  ea5f7cc2          LSLS     r12,r2,#31            ;5967
004012  d010              BEQ      |L1.16438|
004014  f8dfc1a8          LDR      r12,|L1.16832|
004018  f9b8e000          LDRSH    lr,[r8,#0]            ;5968  ; load_U
00401c  f9bcc000          LDRSH    r12,[r12,#0]          ;5968  ; USIGN
004020  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5968
004024  ebbe0f4c          CMP      lr,r12,LSL #1         ;5968
004028  da05              BGE      |L1.16438|
00402a  fa03fc01          LSL      r12,r3,r1             ;5968
00402e  ea4c0c00          ORR      r12,r12,r0            ;5968
004032  f00c00ff          AND      r0,r12,#0xff          ;5968
                  |L1.16438|
004036  ea5f7c82          LSLS     r12,r2,#30            ;5970
00403a  d50a              BPL      |L1.16466|
00403c  f897c000          LDRB     r12,[r7,#0]           ;5971  ; sp_ch_stat
004040  f1bc0f02          CMP      r12,#2                ;5971
004044  d105              BNE      |L1.16466|
004046  fa03fc01          LSL      r12,r3,r1             ;5971
00404a  ea4c0c00          ORR      r12,r12,r0            ;5971
00404e  f00c00ff          AND      r0,r12,#0xff          ;5971
                  |L1.16466|
004052  ea5f7c42          LSLS     r12,r2,#29            ;5973
004056  d50a              BPL      |L1.16494|
004058  f896c023          LDRB     r12,[r6,#0x23]        ;5974  ; spc_stat
00405c  f1bc0f02          CMP      r12,#2                ;5974
004060  d105              BNE      |L1.16494|
004062  fa03fc01          LSL      r12,r3,r1             ;5974
004066  ea4c0c00          ORR      r12,r12,r0            ;5974
00406a  f00c00ff          AND      r0,r12,#0xff          ;5974
                  |L1.16494|
00406e  ea5f7c02          LSLS     r12,r2,#28            ;5976
004072  d50c              BPL      |L1.16526|
004074  f8dfc14c          LDR      r12,|L1.16836|
004078  f8dcc000          LDR      r12,[r12,#0]          ;5977  ; avar_stat
00407c  f1bc0f00          CMP      r12,#0                ;5977
004080  d005              BEQ      |L1.16526|
004082  fa03fc01          LSL      r12,r3,r1             ;5977
004086  ea4c0c00          ORR      r12,r12,r0            ;5977
00408a  f00c00ff          AND      r0,r12,#0xff          ;5977
                  |L1.16526|
00408e  ea5f6cc2          LSLS     r12,r2,#27            ;5979
004092  d50a              BPL      |L1.16554|
004094  f89ac000          LDRB     r12,[r10,#0]          ;5980  ; uout_av
004098  f1bc0f01          CMP      r12,#1                ;5980
00409c  d105              BNE      |L1.16554|
00409e  fa03fc01          LSL      r12,r3,r1             ;5980
0040a2  ea4c0c00          ORR      r12,r12,r0            ;5980
0040a6  f00c00ff          AND      r0,r12,#0xff          ;5980
                  |L1.16554|
0040aa  ea5f6c82          LSLS     r12,r2,#26            ;5982
0040ae  d50a              BPL      |L1.16582|
0040b0  f89ac000          LDRB     r12,[r10,#0]          ;5983  ; uout_av
0040b4  f1bc0f02          CMP      r12,#2                ;5983
0040b8  d105              BNE      |L1.16582|
0040ba  fa03fc01          LSL      r12,r3,r1             ;5983
0040be  ea4c0c00          ORR      r12,r12,r0            ;5983
0040c2  f00c00ff          AND      r0,r12,#0xff          ;5983
                  |L1.16582|
0040c6  ea5f6c42          LSLS     r12,r2,#25            ;5984
0040ca  d525              BPL      |L1.16664|
0040cc  f899c001          LDRB     r12,[r9,#1]  ; bps
0040d0  ea5f6ccc          LSLS     r12,r12,#27
0040d4  d504              BPL      |L1.16608|
0040d6  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0040da  f1bc0f01          CMP      r12,#1
0040de  da15              BGE      |L1.16652|
                  |L1.16608|
;;;5987   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
0040e0  f899c065          LDRB     r12,[r9,#0x65]  ; bps
0040e4  ea5f6ccc          LSLS     r12,r12,#27
0040e8  d506              BPL      |L1.16632|
0040ea  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0040ee  e000              B        |L1.16626|
                  |L1.16624|
0040f0  e047              B        |L1.16770|
                  |L1.16626|
0040f2  f1bc0f02          CMP      r12,#2
0040f6  da09              BGE      |L1.16652|
                  |L1.16632|
;;;5988   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
0040f8  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
0040fc  ea5f6ccc          LSLS     r12,r12,#27
004100  d50a              BPL      |L1.16664|
004102  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004106  f1bc0f03          CMP      r12,#3
00410a  db05              BLT      |L1.16664|
                  |L1.16652|
;;;5989   			))bdr_avar_stat_temp|=(1<<ii_);
00410c  fa03fc01          LSL      r12,r3,r1
004110  ea4c0c00          ORR      r12,r12,r0
004114  f00c00ff          AND      r0,r12,#0xff
                  |L1.16664|
;;;5990   		if((RELE_SET_MASK[ii_]&0x80)&&
004118  ea5f6c02          LSLS     r12,r2,#24
00411c  d523              BPL      |L1.16742|
;;;5991   			(
;;;5992   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
00411e  f899c001          LDRB     r12,[r9,#1]  ; bps
004122  ea5f7c0c          LSLS     r12,r12,#28
004126  d004              BEQ      |L1.16690|
004128  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00412c  f1bc0f01          CMP      r12,#1
004130  da13              BGE      |L1.16730|
                  |L1.16690|
;;;5993   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
004132  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004136  ea5f7c0c          LSLS     r12,r12,#28
00413a  d004              BEQ      |L1.16710|
00413c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004140  f1bc0f02          CMP      r12,#2
004144  da09              BGE      |L1.16730|
                  |L1.16710|
;;;5994   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
004146  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
00414a  ea5f7c0c          LSLS     r12,r12,#28
00414e  d00a              BEQ      |L1.16742|
004150  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004154  f1bc0f03          CMP      r12,#3
004158  db05              BLT      |L1.16742|
                  |L1.16730|
;;;5995   			))bdr_avar_stat_temp|=(1<<ii_);
00415a  fa03fc01          LSL      r12,r3,r1
00415e  ea4c0c00          ORR      r12,r12,r0
004162  f00c00ff          AND      r0,r12,#0xff
                  |L1.16742|
;;;5996   
;;;5997   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
004166  0412              LSLS     r2,r2,#16
004168  d404              BMI      |L1.16756|
00416a  fa03f201          LSL      r2,r3,r1
00416e  ea820200          EOR      r2,r2,r0
004172  b2d0              UXTB     r0,r2
                  |L1.16756|
004174  f1010101          ADD      r1,r1,#1              ;5964
004178  b2c9              UXTB     r1,r1                 ;5964
00417a  2904              CMP      r1,#4                 ;5964
00417c  f4ffaf45          BCC      |L1.16394|
;;;5998   		}
;;;5999   	bdr_avar_stat=bdr_avar_stat_temp;
004180  7020              STRB     r0,[r4,#0]
                  |L1.16770|
;;;6000   	}
;;;6001   }
004182  e8bd9ff0          POP      {r4-r12,pc}
004186  0000              DCW      0x0000
                  |L1.16776|
                          DCD      load_U
                  |L1.16780|
                          DCD      sp_ch_stat
                  |L1.16784|
                          DCD      ||area_number.25||
                  |L1.16788|
                          DCD      DOP_RELE_FUNC
                  |L1.16792|
                          DCD      speedChIsOn
                  |L1.16796|
                          DCD      hv_vz_stat
                  |L1.16800|
                          DCD      UVENTOFF
                  |L1.16804|
                          DCD      bdr_transmit_stat
                  |L1.16808|
                          DCD      bdr_avar_stat
                  |L1.16812|
                          DCD      NUMBDR
                  |L1.16816|
                          DCD      uout_av
                  |L1.16820|
                          DCD      bps
                  |L1.16824|
                          DCD      NUMIST
                  |L1.16828|
                          DCD      RELE_SET_MASK
                  |L1.16832|
                          DCD      USIGN
                  |L1.16836|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6004   //-----------------------------------------------
;;;6005   void bps_hndl(void)
0041c8  e92d5ff0          PUSH     {r4-r12,lr}
;;;6006   {
;;;6007   char ptr__,i;
;;;6008   unsigned short tempUS;
;;;6009   
;;;6010   if(sh_cnt0<10)
0041cc  4eff              LDR      r6,|L1.17868|
;;;6011   	{
;;;6012   	sh_cnt0++;
;;;6013   	if(sh_cnt0>=10)
;;;6014   		{
;;;6015   		sh_cnt0=0;
0041ce  2700              MOVS     r7,#0
;;;6016   		b1Hz_sh=1;
0041d0  f04f0a01          MOV      r10,#1
0041d4  f8960021          LDRB     r0,[r6,#0x21]         ;6010  ; sh_cnt0
0041d8  280a              CMP      r0,#0xa               ;6010
0041da  d20a              BCS      |L1.16882|
0041dc  f1000001          ADD      r0,r0,#1              ;6012
0041e0  b2c0              UXTB     r0,r0                 ;6012
0041e2  f8860021          STRB     r0,[r6,#0x21]         ;6012
0041e6  280a              CMP      r0,#0xa               ;6013
0041e8  d303              BCC      |L1.16882|
0041ea  f8867021          STRB     r7,[r6,#0x21]         ;6015
0041ee  f886a022          STRB     r10,[r6,#0x22]
                  |L1.16882|
;;;6017   		}
;;;6018   	}
;;;6019   
;;;6020   /*if(sh_cnt1<5)
;;;6021   	{
;;;6022   	sh_cnt1++;
;;;6023   	if(sh_cnt1==5)
;;;6024   		{
;;;6025   		sh_cnt1=0;
;;;6026   		b2Hz_sh=1;
;;;6027   		}
;;;6028   	} */
;;;6029   
;;;6030   
;;;6031   /*
;;;6032   if(mess_find(MESS_SRC_ON_OFF))
;;;6033   	{
;;;6034   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6035   		{
;;;6036   		char i;
;;;6037   		for(i=0;i<NUMIST;i++)
;;;6038   			{
;;;6039   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6040   			}
;;;6041   		
;;;6042   		}
;;;6043   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6044   		{
;;;6045   		char i;
;;;6046   		for(i=0;i<NUMIST;i++)
;;;6047   			{
;;;6048   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6049   			}
;;;6050   		
;;;6051   		}
;;;6052   	}
;;;6053   	
;;;6054   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6055   	{				
;;;6056   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6057   		{
;;;6058   		char i;
;;;6059   		for(i=0;i<NUMIST;i++)
;;;6060   			{
;;;6061   			if(mess_data[1]&(1<<i))
;;;6062   				{
;;;6063   				src[i]._ist_blok_cnt=0;
;;;6064   				src[i]._flags_tu=2;
;;;6065   				}
;;;6066   			}
;;;6067   		
;;;6068   		}				
;;;6069   	}*/
;;;6070   
;;;6071   
;;;6072   
;;;6073   /*else*/ 
;;;6074   bps_on_mask=0;
0041f2  f8a6705e          STRH     r7,[r6,#0x5e]
;;;6075   bps_off_mask=0;
0041f6  f8a67060          STRH     r7,[r6,#0x60]
;;;6076   
;;;6077   if(mess_find_unvol(MESS2BPS_HNDL))
0041fa  20cd              MOVS     r0,#0xcd
0041fc  f7fffffe          BL       mess_find_unvol
;;;6078   	{
;;;6079   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6080   		{
;;;6081   		bps_off_mask=0xffff;
;;;6082   		}
;;;6083   
;;;6084   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6085   		{
;;;6086   		bps_off_mask=mess_data[1];
;;;6087   		}
;;;6088   
;;;6089   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6090   		{
;;;6091   		bps_on_mask=mess_data[1];
;;;6092   		}
;;;6093   
;;;6094   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6095   		{
;;;6096   		bps_on_mask=0xffff;
;;;6097   		}
;;;6098   
;;;6099   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6100   		{
;;;6101   		bps_on_mask=mess_data[1];
;;;6102   		bps_off_mask=~(mess_data[1]);
;;;6103   		}
;;;6104   
;;;6105   
;;;6106   	for(i=0;i<=NUMIST;i++)
;;;6107   		{
;;;6108   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
004200  f8df83cc          LDR      r8,|L1.17872|
004204  f8dfb3cc          LDR      r11,|L1.17876|
004208  b3a0              CBZ      r0,|L1.17012|
00420a  4af3              LDR      r2,|L1.17880|
00420c  f64f73ff          MOV      r3,#0xffff            ;6081
004210  6810              LDR      r0,[r2,#0]            ;6079  ; mess_data
004212  28ce              CMP      r0,#0xce              ;6079
004214  d101              BNE      |L1.16922|
004216  f8a63060          STRH     r3,[r6,#0x60]         ;6081
                  |L1.16922|
00421a  28cf              CMP      r0,#0xcf              ;6084
00421c  d102              BNE      |L1.16932|
00421e  6851              LDR      r1,[r2,#4]            ;6086  ; mess_data
004220  f8a61060          STRH     r1,[r6,#0x60]         ;6086
                  |L1.16932|
004224  28d1              CMP      r0,#0xd1              ;6089
004226  d102              BNE      |L1.16942|
004228  6851              LDR      r1,[r2,#4]            ;6091  ; mess_data
00422a  f8a6105e          STRH     r1,[r6,#0x5e]         ;6091
                  |L1.16942|
00422e  28d2              CMP      r0,#0xd2              ;6094
004230  d101              BNE      |L1.16950|
004232  f8a6305e          STRH     r3,[r6,#0x5e]         ;6096
                  |L1.16950|
004236  28d0              CMP      r0,#0xd0              ;6099
004238  d106              BNE      |L1.16968|
00423a  6850              LDR      r0,[r2,#4]            ;6101  ; mess_data
00423c  f8a6005e          STRH     r0,[r6,#0x5e]         ;6101
004240  ea6f0000          MVN      r0,r0                 ;6102
004244  f8a60060          STRH     r0,[r6,#0x60]         ;6102
                  |L1.16968|
004248  f04f0400          MOV      r4,#0                 ;6106
00424c  e037              B        |L1.17086|
                  |L1.16974|
00424e  f8b60060          LDRH     r0,[r6,#0x60]  ; bps_off_mask
004252  fa0af904          LSL      r9,r10,r4
004256  ea190f00          TST      r9,r0
00425a  d00c              BEQ      |L1.17014|
00425c  eb0400c4          ADD      r0,r4,r4,LSL #3
004260  eb001004          ADD      r0,r0,r4,LSL #4
004264  eb080080          ADD      r0,r8,r0,LSL #2
004268  f8301f40          LDRH     r1,[r0,#0x40]!
00426c  f1010101          ADD      r1,r1,#1
004270  8001              STRH     r1,[r0,#0]
004272  e008              B        |L1.17030|
                  |L1.17012|
004274  e028              B        |L1.17096|
                  |L1.17014|
;;;6109   		else bps[i]._blok_cnt=0;
004276  eb0400c4          ADD      r0,r4,r4,LSL #3
00427a  eb001004          ADD      r0,r0,r4,LSL #4
00427e  eb080080          ADD      r0,r8,r0,LSL #2
004282  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.17030|
;;;6110   		gran(&bps[i]._blok_cnt,0,50);
004286  eb0400c4          ADD      r0,r4,r4,LSL #3
00428a  eb001004          ADD      r0,r0,r4,LSL #4
00428e  eb080580          ADD      r5,r8,r0,LSL #2
004292  f1050040          ADD      r0,r5,#0x40
004296  2232              MOVS     r2,#0x32
004298  2100              MOVS     r1,#0
00429a  f7fffffe          BL       gran
;;;6111   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
00429e  f9b50040          LDRSH    r0,[r5,#0x40]
0042a2  2814              CMP      r0,#0x14
0042a4  dd01              BLE      |L1.17066|
0042a6  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17066|
;;;6112   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
0042aa  f8b6005e          LDRH     r0,[r6,#0x5e]  ; bps_on_mask
0042ae  ea190f00          TST      r9,r0
0042b2  d001              BEQ      |L1.17080|
0042b4  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.17080|
0042b8  f1040401          ADD      r4,r4,#1              ;6106
0042bc  b2e4              UXTB     r4,r4                 ;6106
                  |L1.17086|
0042be  f9bb0000          LDRSH    r0,[r11,#0]           ;6106  ; NUMIST
0042c2  4284              CMP      r4,r0                 ;6106
0042c4  ddc3              BLE      |L1.16974|
0042c6  e08d              B        |L1.17380|
                  |L1.17096|
;;;6113   	     }
;;;6114   
;;;6115   	
;;;6116   /*
;;;6117   
;;;6118   	if(bps_all_off_cnt>20)
;;;6119   		{
;;;6120   		for(i=0;i<=NUMIST;i++)
;;;6121   			{
;;;6122   	     	bps[i]._flags_tu=1;
;;;6123   	     	}
;;;6124   		}
;;;6125   	else if(bps_mask_off_cnt>20)
;;;6126   		{
;;;6127   		for(i=0;i<=NUMIST;i++)
;;;6128   			{
;;;6129   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6130   	     	}
;;;6131   		}	
;;;6132   		
;;;6133   	else if(bps_mask_on_off_cnt>20)
;;;6134   		{
;;;6135   		for(i=0;i<=NUMIST;i++)
;;;6136   			{
;;;6137   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6138   			else bps[i]._flags_tu=0;
;;;6139   	     	}
;;;6140   		}
;;;6141   		
;;;6142   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6143   		{
;;;6144   		for(i=0;i<=NUMIST;i++)
;;;6145   			{
;;;6146   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6147   	     	}
;;;6148   		}
;;;6149   */										
;;;6150   	}
;;;6151   
;;;6152   
;;;6153   else if(b1Hz_sh)
0042c8  f8960022          LDRB     r0,[r6,#0x22]  ; b1Hz_sh
0042cc  b3e8              CBZ      r0,|L1.17226|
;;;6154   	{
;;;6155   	ptr__=0;
0042ce  f04f0400          MOV      r4,#0
;;;6156        for(i=0;i<=NUMIST;i++)
0042d2  4621              MOV      r1,r4
0042d4  f9bb0000          LDRSH    r0,[r11,#0]           ;6106
0042d8  e00a              B        |L1.17136|
                  |L1.17114|
;;;6157   		{
;;;6158   	     bps[i]._flags_tu=1;
0042da  eb0102c1          ADD      r2,r1,r1,LSL #3
0042de  eb021201          ADD      r2,r2,r1,LSL #4
0042e2  eb080282          ADD      r2,r8,r2,LSL #2
0042e6  f882a02c          STRB     r10,[r2,#0x2c]
0042ea  f1010101          ADD      r1,r1,#1              ;6156
0042ee  b2c9              UXTB     r1,r1                 ;6156
                  |L1.17136|
0042f0  4281              CMP      r1,r0                 ;6156
0042f2  ddf2              BLE      |L1.17114|
;;;6159   	     }	
;;;6160     	     
;;;6161     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
0042f4  f04f0100          MOV      r1,#0
0042f8  e023              B        |L1.17218|
                  |L1.17146|
;;;6162     		{
;;;6163   		char ii,iii;
;;;6164   
;;;6165   		ii=(char)NUMIST;
0042fa  b2c2              UXTB     r2,r0
;;;6166   		//if(ii<0)ii=0;
;;;6167   		if(ii>32)ii=32;
0042fc  2a20              CMP      r2,#0x20
0042fe  d901              BLS      |L1.17156|
004300  f04f0220          MOV      r2,#0x20
                  |L1.17156|
;;;6168   		iii=numOfForvardBps;
004304  f8963028          LDRB     r3,[r6,#0x28]  ; numOfForvardBps
;;;6169   		//if(iii<0)iii=0;
;;;6170   		if(iii>=NUMIST)iii=0;
004308  4283              CMP      r3,r0
00430a  db01              BLT      |L1.17168|
00430c  f04f0300          MOV      r3,#0
                  |L1.17168|
;;;6171   		iii+=i;
004310  440b              ADD      r3,r3,r1
004312  b2db              UXTB     r3,r3
;;;6172   		iii=iii%ii;
004314  fbb3f5f2          UDIV     r5,r3,r2
004318  fb023215          MLS      r2,r2,r5,r3
;;;6173   		
;;;6174     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
00431c  eb0203c2          ADD      r3,r2,r2,LSL #3
004320  eb031202          ADD      r2,r3,r2,LSL #4
004324  eb080282          ADD      r2,r8,r2,LSL #2
004328  7893              LDRB     r3,[r2,#2]
00432a  2b02              CMP      r3,#2
00432c  d001              BEQ      |L1.17202|
00432e  2b01              CMP      r3,#1
004330  d104              BNE      |L1.17212|
                  |L1.17202|
;;;6175     	         	{
;;;6176     	         	bps[iii]._flags_tu=0;
004332  f882702c          STRB     r7,[r2,#0x2c]
;;;6177     	         	ptr__++;
004336  f1040401          ADD      r4,r4,#1
00433a  b2e4              UXTB     r4,r4
                  |L1.17212|
00433c  f1010101          ADD      r1,r1,#1              ;6161
004340  b2c9              UXTB     r1,r1                 ;6161
                  |L1.17218|
004342  4281              CMP      r1,r0                 ;6161
004344  da06              BGE      |L1.17236|
004346  4aa5              LDR      r2,|L1.17884|
004348  e000              B        |L1.17228|
                  |L1.17226|
00434a  e04b              B        |L1.17380|
                  |L1.17228|
00434c  f9b22000          LDRSH    r2,[r2,#0]            ;6161  ; num_necc
004350  4294              CMP      r4,r2                 ;6161
004352  dbd2              BLT      |L1.17146|
                  |L1.17236|
;;;6178     	         	}
;;;6179   			
;;;6180     	     }
;;;6181   	bps[numOfForvardBps_old]._flags_tu=0;
004354  f8961029          LDRB     r1,[r6,#0x29]  ; numOfForvardBps_old
004358  eb0102c1          ADD      r2,r1,r1,LSL #3
00435c  eb021101          ADD      r1,r2,r1,LSL #4
004360  eb080181          ADD      r1,r8,r1,LSL #2
004364  f881702c          STRB     r7,[r1,#0x2c]
;;;6182   
;;;6183   	if(main_1Hz_cnt<60)
004368  499d              LDR      r1,|L1.17888|
00436a  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
00436e  293c              CMP      r1,#0x3c
004370  da0f              BGE      |L1.17298|
;;;6184   		{
;;;6185        	for(i=0;i<=NUMIST;i++)
004372  f04f0100          MOV      r1,#0
004376  e00a              B        |L1.17294|
                  |L1.17272|
;;;6186   			{
;;;6187   	     	bps[i]._flags_tu=0;
004378  eb0102c1          ADD      r2,r1,r1,LSL #3
00437c  eb021201          ADD      r2,r2,r1,LSL #4
004380  eb080282          ADD      r2,r8,r2,LSL #2
004384  f882702c          STRB     r7,[r2,#0x2c]
004388  f1010101          ADD      r1,r1,#1              ;6185
00438c  b2c9              UXTB     r1,r1                 ;6185
                  |L1.17294|
00438e  4281              CMP      r1,r0                 ;6185
004390  ddf2              BLE      |L1.17272|
                  |L1.17298|
;;;6188   	     	}	
;;;6189   		}
;;;6190   	if(ipsBlckStat)
004392  4994              LDR      r1,|L1.17892|
004394  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
004396  b179              CBZ      r1,|L1.17336|
;;;6191   		{
;;;6192        	for(i=0;i<=NUMIST;i++)
004398  f04f0100          MOV      r1,#0
00439c  e00a              B        |L1.17332|
                  |L1.17310|
;;;6193   			{
;;;6194   	     	bps[i]._flags_tu=1;
00439e  eb0102c1          ADD      r2,r1,r1,LSL #3
0043a2  eb021201          ADD      r2,r2,r1,LSL #4
0043a6  eb080282          ADD      r2,r8,r2,LSL #2
0043aa  f882a02c          STRB     r10,[r2,#0x2c]
0043ae  f1010101          ADD      r1,r1,#1              ;6192
0043b2  b2c9              UXTB     r1,r1                 ;6192
                  |L1.17332|
0043b4  4281              CMP      r1,r0                 ;6192
0043b6  ddf2              BLE      |L1.17310|
                  |L1.17336|
;;;6195   	     	}
;;;6196   		}
;;;6197   
;;;6198        for(i=0;i<=NUMIST;i++)
0043b8  f04f0100          MOV      r1,#0
;;;6199   		{
;;;6200   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0043bc  f06f0331          MVN      r3,#0x31
0043c0  e00e              B        |L1.17376|
                  |L1.17346|
0043c2  eb0102c1          ADD      r2,r1,r1,LSL #3
0043c6  eb021201          ADD      r2,r2,r1,LSL #4
0043ca  eb080282          ADD      r2,r8,r2,LSL #2
0043ce  f892402c          LDRB     r4,[r2,#0x2c]
0043d2  2c01              CMP      r4,#1
0043d4  d101              BNE      |L1.17370|
0043d6  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.17370|
0043da  f1010101          ADD      r1,r1,#1              ;6198
0043de  b2c9              UXTB     r1,r1                 ;6198
                  |L1.17376|
0043e0  4281              CMP      r1,r0                 ;6198
0043e2  ddee              BLE      |L1.17346|
                  |L1.17380|
;;;6201   	   	}	
;;;6202   		 
;;;6203     	}
;;;6204   
;;;6205   
;;;6206   for(i=0;i<NUMIST;i++)
0043e4  f04f0000          MOV      r0,#0
;;;6207        {
;;;6208        if(bps[i]._ist_blok_host_cnt!=0)
;;;6209             {
;;;6210             bps[i]._flags_tu=99;
0043e8  f04f0463          MOV      r4,#0x63
0043ec  f9bb1000          LDRSH    r1,[r11,#0]           ;6106
0043f0  e00f              B        |L1.17426|
                  |L1.17394|
0043f2  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6208
0043f6  eb021200          ADD      r2,r2,r0,LSL #4       ;6208
0043fa  eb080282          ADD      r2,r8,r2,LSL #2       ;6208
0043fe  6bd3              LDR      r3,[r2,#0x3c]         ;6208
004400  b123              CBZ      r3,|L1.17420|
004402  f882402c          STRB     r4,[r2,#0x2c]
;;;6211   	     bps[i]._ist_blok_host_cnt--;
004406  f1a30301          SUB      r3,r3,#1
00440a  63d3              STR      r3,[r2,#0x3c]
                  |L1.17420|
00440c  f1000001          ADD      r0,r0,#1              ;6206
004410  b2c0              UXTB     r0,r0                 ;6206
                  |L1.17426|
004412  4288              CMP      r0,r1                 ;6206
004414  dbed              BLT      |L1.17394|
;;;6212             }
;;;6213        }
;;;6214   
;;;6215   
;;;6216   
;;;6217   
;;;6218   b1Hz_sh=0;
004416  f8867022          STRB     r7,[r6,#0x22]
;;;6219   
;;;6220   
;;;6221   num_of_wrks_bps=0;
00441a  77b7              STRB     r7,[r6,#0x1e]
;;;6222   tempUS=0;
00441c  f04f0200          MOV      r2,#0
;;;6223   for(i=0;i<NUMIST;i++)
004420  4610              MOV      r0,r2
004422  e013              B        |L1.17484|
                  |L1.17444|
;;;6224   	{
;;;6225   	if(bps[i]._state==bsWRK)
004424  eb0003c0          ADD      r3,r0,r0,LSL #3
004428  eb031300          ADD      r3,r3,r0,LSL #4
00442c  eb080383          ADD      r3,r8,r3,LSL #2
004430  789c              LDRB     r4,[r3,#2]
004432  2c01              CMP      r4,#1
004434  d107              BNE      |L1.17478|
;;;6226   		{
;;;6227   		num_of_wrks_bps++;
004436  7fb4              LDRB     r4,[r6,#0x1e]  ; num_of_wrks_bps
004438  f1040401          ADD      r4,r4,#1
00443c  77b4              STRB     r4,[r6,#0x1e]
;;;6228   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
00443e  69db              LDR      r3,[r3,#0x1c]
004440  4293              CMP      r3,r2
004442  dd00              BLE      |L1.17478|
004444  b29a              UXTH     r2,r3
                  |L1.17478|
004446  f1000001          ADD      r0,r0,#1              ;6223
00444a  b2c0              UXTB     r0,r0                 ;6223
                  |L1.17484|
00444c  4288              CMP      r0,r1                 ;6223
00444e  dbe9              BLT      |L1.17444|
;;;6229   		}
;;;6230   	}
;;;6231   Ubpsmax=tempUS;
004450  f8a6204e          STRH     r2,[r6,#0x4e]
;;;6232   
;;;6233   bPARALLEL_ENOUG=0;
004454  f886702c          STRB     r7,[r6,#0x2c]
;;;6234   bPARALLEL_NOT_ENOUG=1;
004458  f886a02b          STRB     r10,[r6,#0x2b]
;;;6235   
;;;6236   for(i=0;i<NUMIST;i++)
00445c  f04f0000          MOV      r0,#0
;;;6237   	{
;;;6238   	if(bps[i]._Ti>=TSIGN)
004460  4a61              LDR      r2,|L1.17896|
004462  f9b23000          LDRSH    r3,[r2,#0]
;;;6239   		{
;;;6240   		bPARALLEL_ENOUG=1;
;;;6241   		}
;;;6242   	if(bps[i]._Ti>=(TSIGN-5))
004466  f1a30405          SUB      r4,r3,#5
00446a  e011              B        |L1.17552|
                  |L1.17516|
00446c  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6238
004470  eb021200          ADD      r2,r2,r0,LSL #4       ;6238
004474  eb080282          ADD      r2,r8,r2,LSL #2       ;6238
004478  6a92              LDR      r2,[r2,#0x28]         ;6238
00447a  429a              CMP      r2,r3                 ;6238
00447c  db01              BLT      |L1.17538|
00447e  f886a02c          STRB     r10,[r6,#0x2c]        ;6240
                  |L1.17538|
004482  42a2              CMP      r2,r4
004484  db01              BLT      |L1.17546|
;;;6243   		{
;;;6244   		bPARALLEL_NOT_ENOUG=0;
004486  f886702b          STRB     r7,[r6,#0x2b]
                  |L1.17546|
00448a  f1000001          ADD      r0,r0,#1              ;6236
00448e  b2c0              UXTB     r0,r0                 ;6236
                  |L1.17552|
004490  4288              CMP      r0,r1                 ;6236
004492  dbeb              BLT      |L1.17516|
;;;6245   		}
;;;6246   	}
;;;6247   
;;;6248   if(bPARALLEL_ENOUG==1)
004494  f896002c          LDRB     r0,[r6,#0x2c]  ; bPARALLEL_ENOUG
004498  2801              CMP      r0,#1
00449a  d00a              BEQ      |L1.17586|
;;;6249   	{
;;;6250   	bPARALLEL=1;
;;;6251   	}
;;;6252   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
00449c  f896002d          LDRB     r0,[r6,#0x2d]  ; bPARALLEL
0044a0  2800              CMP      r0,#0
0044a2  d005              BEQ      |L1.17584|
0044a4  f896002b          LDRB     r0,[r6,#0x2b]  ; bPARALLEL_NOT_ENOUG
0044a8  2800              CMP      r0,#0
0044aa  d001              BEQ      |L1.17584|
;;;6253   	{
;;;6254   	bPARALLEL=0;
0044ac  f886702d          STRB     r7,[r6,#0x2d]
                  |L1.17584|
;;;6255   	}
;;;6256   }
0044b0  e667              B        |L1.16770|
                  |L1.17586|
0044b2  f886a02d          STRB     r10,[r6,#0x2d]        ;6250
0044b6  e664              B        |L1.16770|
;;;6257   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6264   //-----------------------------------------------
;;;6265   void powerAntiAliasingHndl(void)
0044b8  b570              PUSH     {r4-r6,lr}
;;;6266   {
;;;6267   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0044ba  230a              MOVS     r3,#0xa
0044bc  4c4c              LDR      r4,|L1.17904|
0044be  484b              LDR      r0,|L1.17900|
;;;6268   	{
;;;6269   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6270   	if(powerSummaryCnt>=10)
;;;6271   		{
;;;6272   		power_summary=power_summary_tempo;
;;;6273   		}
;;;6274   	}
;;;6275   else powerSummaryCnt=0;
0044c0  2500              MOVS     r5,#0
0044c2  6822              LDR      r2,[r4,#0]            ;6267  ; power_summary_tempo_old
0044c4  6800              LDR      r0,[r0,#0]            ;6267  ; power_summary_tempo
0044c6  fbb2f6f3          UDIV     r6,r2,r3              ;6267
0044ca  fbb0f1f3          UDIV     r1,r0,r3              ;6267
0044ce  4a49              LDR      r2,|L1.17908|
0044d0  42b1              CMP      r1,r6                 ;6267
0044d2  d10b              BNE      |L1.17644|
0044d4  7811              LDRB     r1,[r2,#0]            ;6269  ; powerSummaryCnt
0044d6  290f              CMP      r1,#0xf               ;6269
0044d8  d202              BCS      |L1.17632|
0044da  f1010101          ADD      r1,r1,#1              ;6269
0044de  7011              STRB     r1,[r2,#0]            ;6269
                  |L1.17632|
0044e0  7811              LDRB     r1,[r2,#0]            ;6270  ; powerSummaryCnt
0044e2  290a              CMP      r1,#0xa               ;6270
0044e4  d303              BCC      |L1.17646|
0044e6  4944              LDR      r1,|L1.17912|
0044e8  6008              STR      r0,[r1,#0]            ;6272  ; power_summary
0044ea  e000              B        |L1.17646|
                  |L1.17644|
0044ec  7015              STRB     r5,[r2,#0]
                  |L1.17646|
;;;6276   power_summary_tempo_old=power_summary_tempo;
0044ee  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6277   
;;;6278   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
0044f0  4842              LDR      r0,|L1.17916|
0044f2  4c43              LDR      r4,|L1.17920|
0044f4  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
0044f8  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
0044fc  fbb0f1f3          UDIV     r1,r0,r3
004500  fbb2f3f3          UDIV     r3,r2,r3
;;;6279   	{
;;;6280   	if(powerCurrentCnt<15)powerCurrentCnt++;
004504  4a3f              LDR      r2,|L1.17924|
004506  4299              CMP      r1,r3                 ;6278
004508  d10b              BNE      |L1.17698|
00450a  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00450c  290f              CMP      r1,#0xf
00450e  d202              BCS      |L1.17686|
004510  f1010101          ADD      r1,r1,#1
004514  7011              STRB     r1,[r2,#0]
                  |L1.17686|
;;;6281   	if(powerCurrentCnt>=10)
004516  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004518  290a              CMP      r1,#0xa
00451a  d303              BCC      |L1.17700|
;;;6282   		{
;;;6283   		power_current=power_current_tempo;
00451c  493a              LDR      r1,|L1.17928|
00451e  8008              STRH     r0,[r1,#0]
004520  e000              B        |L1.17700|
                  |L1.17698|
;;;6284   		}
;;;6285   	}
;;;6286   else powerCurrentCnt=0;
004522  7015              STRB     r5,[r2,#0]
                  |L1.17700|
;;;6287   power_current_tempo_old=power_current_tempo;
004524  8020              STRH     r0,[r4,#0]
;;;6288   }
004526  bd70              POP      {r4-r6,pc}
;;;6289   
                          ENDP

                  energometr_hndl PROC
;;;6399   //-----------------------------------------------
;;;6400   void energometr_hndl(void)
004528  4770              BX       lr
;;;6401   {
;;;6402   //2F 3F 21 0D 0A 
;;;6403   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6404   //2F 3F 21 0D 0A 
;;;6405   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6406   //06 30 35 31 0D 0A 
;;;6407   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6408   
;;;6409   #ifdef CE102M_ENABLED
;;;6410   /*if
;;;6411   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6412   
;;;6413   if(read_power_cnt_main_cnt)
;;;6414   	{
;;;6415   	read_power_cnt_main_cnt--;
;;;6416   	if(read_power_cnt_main_cnt==0)
;;;6417   		{
;;;6418   		rx_read_power_cnt_phase=0;
;;;6419   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6420   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6421   		else bENERGOMETR_UIP=0;
;;;6422   		//bENERGOMETR_UIP=2;
;;;6423   		}
;;;6424   	}
;;;6425   
;;;6426   if (rx_read_power_cnt_phase==0)
;;;6427   	{
;;;6428   	char command_with_crc[20];
;;;6429   	
;;;6430      	command_with_crc[0]=0xaf;  // /
;;;6431   	command_with_crc[1]=0x3f;  // ?
;;;6432   	command_with_crc[2]=0x21;  // !
;;;6433   	command_with_crc[3]=0x8d;  // CR
;;;6434   	command_with_crc[4]=0x0a;  // LF
;;;6435   
;;;6436   	uart_out__adr1(command_with_crc,5);
;;;6437   
;;;6438   	rx_wr_index1=0;
;;;6439   	rx_read_power_cnt_phase=1;
;;;6440   
;;;6441   	read_power_cnt_main_cnt=50;
;;;6442   	}
;;;6443   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6444   	{
;;;6445   	char command_with_crc[20];
;;;6446   	
;;;6447   	command_with_crc[0]=0x06;  //  
;;;6448   	command_with_crc[1]=0x30;  // 0
;;;6449   	command_with_crc[2]=0x35;  // 5
;;;6450   	command_with_crc[3]=0xb1;  // 1
;;;6451   	command_with_crc[4]=0x8d;  // CR
;;;6452   	command_with_crc[5]=0x0a;  // LF
;;;6453   	
;;;6454   	uart_out__adr1(command_with_crc,6);
;;;6455   	
;;;6456   	rx_wr_index1=0;
;;;6457   	rx_read_power_cnt_phase=3;
;;;6458   
;;;6459   	read_power_cnt_main_cnt=50;
;;;6460   	}  
;;;6461   
;;;6462   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6463   	{
;;;6464   	char command_with_crc[20];
;;;6465   	
;;;6466   	command_with_crc[0]=0x81;  //  
;;;6467   	command_with_crc[1]=0xd2;  // 0
;;;6468   	command_with_crc[2]=0xb1;  // 5
;;;6469   	command_with_crc[3]=0x82;  // 1
;;;6470   	command_with_crc[4]=0x56;  // CR
;;;6471   	command_with_crc[5]=0xcf;  // LF
;;;6472   	command_with_crc[6]=0xcc;  // 1
;;;6473   	command_with_crc[7]=0xd4;  // CR
;;;6474   	command_with_crc[8]=0x41;  // LF
;;;6475   	command_with_crc[9]=0x28;  // 1
;;;6476   	command_with_crc[10]=0xa9;  // CR
;;;6477   	command_with_crc[11]=0x03;  // LF
;;;6478   	command_with_crc[12]=0x5f;  // LF
;;;6479   		
;;;6480   	uart_out__adr1(command_with_crc,13);
;;;6481   	
;;;6482   	rx_wr_index1=0;
;;;6483   	rx_read_power_cnt_phase=5;
;;;6484   
;;;6485   	read_power_cnt_main_cnt=50;
;;;6486   	}  
;;;6487   
;;;6488   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6489   	{
;;;6490   	char command_with_crc[20];
;;;6491   	
;;;6492   	command_with_crc[0]=0x81;  //  
;;;6493   	command_with_crc[1]=0xd2;  // 0
;;;6494   	command_with_crc[2]=0xb1;  // 5
;;;6495   	command_with_crc[3]=0x82;  // 1
;;;6496   	command_with_crc[4]=0xc3;  // CR
;;;6497   	command_with_crc[5]=0x55;  // LF
;;;6498   	command_with_crc[6]=0xd2;  // 1
;;;6499   	command_with_crc[7]=0xd2;  // CR
;;;6500   	command_with_crc[8]=0xc5;  // LF
;;;6501   	command_with_crc[9]=0x28;  // 1
;;;6502   	command_with_crc[10]=0xa9;  // CR
;;;6503   	command_with_crc[11]=0x03;  // LF
;;;6504   	command_with_crc[12]=0x5a;  // LF
;;;6505   		
;;;6506   	uart_out__adr1(command_with_crc,13);
;;;6507   	
;;;6508   	rx_wr_index1=0;
;;;6509   	rx_read_power_cnt_phase=9;
;;;6510   
;;;6511   	read_power_cnt_main_cnt=50;
;;;6512   	}  
;;;6513   
;;;6514   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6515   	{
;;;6516   	char command_with_crc[20];
;;;6517   	
;;;6518   	command_with_crc[0]=0x81;  //  		01
;;;6519   	command_with_crc[1]=0xd2;  // R		52
;;;6520   	command_with_crc[2]=0xb1;  // 1		31
;;;6521   	command_with_crc[3]=0x82;  // 		02
;;;6522   	command_with_crc[4]=0x50;  // P		50
;;;6523   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6524   	command_with_crc[6]=0xd7;  // W		57
;;;6525   	command_with_crc[7]=0xc5;  // E		45
;;;6526   	command_with_crc[8]=0x50;  // P		50
;;;6527   	command_with_crc[9]=0x28;  // (		28
;;;6528   	command_with_crc[10]=0xa9;  // )	29
;;;6529   	command_with_crc[11]=0x03;  // 		03
;;;6530   	command_with_crc[12]=0xe4;  // d	64
;;;6531   		
;;;6532   	uart_out__adr1(command_with_crc,13);
;;;6533   	
;;;6534   	rx_wr_index1=0;
;;;6535   	rx_read_power_cnt_phase=21;
;;;6536   
;;;6537   	read_power_cnt_main_cnt=50;
;;;6538   	}  
;;;6539   
;;;6540   
;;;6541   #endif
;;;6542   }
;;;6543   
                          ENDP

                  ips_current_average_hndl PROC
;;;6544   //-----------------------------------------------
;;;6545   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
00452a  e92d4ff0          PUSH     {r4-r11,lr}
;;;6546   {
00452e  b089              SUB      sp,sp,#0x24
;;;6547   
;;;6548   if(++ica_timer_cnt>=10) 
004530  4e36              LDR      r6,|L1.17932|
;;;6549   	{
;;;6550   	ica_timer_cnt=0;
004532  2400              MOVS     r4,#0
004534  7830              LDRB     r0,[r6,#0]            ;6548  ; ica_timer_cnt
004536  1c40              ADDS     r0,r0,#1              ;6548
004538  b2c0              UXTB     r0,r0                 ;6548
00453a  7030              STRB     r0,[r6,#0]            ;6548
00453c  280a              CMP      r0,#0xa               ;6548
00453e  d300              BCC      |L1.17730|
004540  7034              STRB     r4,[r6,#0]
                  |L1.17730|
;;;6551   	}
;;;6552   
;;;6553   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004542  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004544  4f32              LDR      r7,|L1.17936|
;;;6554   	{
;;;6555   	
;;;6556   	ica_plazma[0]++;
;;;6557   
;;;6558   	ica_my_current=bps_I;
;;;6559   
;;;6560   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004546  f8dfb0cc          LDR      r11,|L1.17940|
00454a  4d20              LDR      r5,|L1.17868|
00454c  bbe8              CBNZ     r0,|L1.17866|
00454e  7fa8              LDRB     r0,[r5,#0x1e]         ;6553  ; num_of_wrks_bps
004550  b3d8              CBZ      r0,|L1.17866|
004552  f8950023          LDRB     r0,[r5,#0x23]         ;6553  ; spc_stat
004556  7969              LDRB     r1,[r5,#5]            ;6553  ; vz1_stat
004558  4308              ORRS     r0,r0,r1              ;6553
00455a  79e9              LDRB     r1,[r5,#7]            ;6553  ; vz2_stat
00455c  4308              ORRS     r0,r0,r1              ;6553
00455e  7839              LDRB     r1,[r7,#0]            ;6553  ; sp_ch_stat
004560  4308              ORRS     r0,r0,r1              ;6553
004562  d17e              BNE      |L1.18018|
004564  f8df90b0          LDR      r9,|L1.17944|
004568  f8990000          LDRB     r0,[r9,#0]            ;6556  ; ica_plazma
00456c  f1000001          ADD      r0,r0,#1              ;6556
004570  f8890000          STRB     r0,[r9,#0]            ;6556
004574  4829              LDR      r0,|L1.17948|
004576  f9b01000          LDRSH    r1,[r0,#0]            ;6558  ; bps_I
00457a  4829              LDR      r0,|L1.17952|
00457c  8001              STRH     r1,[r0,#0]            ;6558
00457e  4829              LDR      r0,|L1.17956|
;;;6561   		{
;;;6562   		ica_plazma[1]++;
;;;6563   		ica_u_necc--;
004580  f8dfa0a4          LDR      r10,|L1.17960|
004584  f9b02000          LDRSH    r2,[r0,#0]            ;6560  ; ica_your_current
004588  4648              MOV      r0,r9                 ;6556
00458a  f9bac000          LDRSH    r12,[r10,#0]
00458e  7843              LDRB     r3,[r0,#1]            ;6562
004590  4826              LDR      r0,|L1.17964|
004592  4291              CMP      r1,r2                 ;6560
004594  f9b08000          LDRSH    r8,[r0,#0]            ;6560
004598  4658              MOV      r0,r11                ;6560
00459a  f9b00000          LDRSH    r0,[r0,#0]            ;6560
00459e  dd47              BLE      |L1.17968|
0045a0  eba10e02          SUB      lr,r1,r2              ;6560
0045a4  f1be0f05          CMP      lr,#5                 ;6560
0045a8  db42              BLT      |L1.17968|
0045aa  2801              CMP      r0,#1                 ;6560
0045ac  d004              BEQ      |L1.17848|
0045ae  2802              CMP      r0,#2                 ;6560
0045b0  d13e              BNE      |L1.17968|
0045b2  f1b80f05          CMP      r8,#5                 ;6560
0045b6  dd3b              BLE      |L1.17968|
                  |L1.17848|
0045b8  f1030301          ADD      r3,r3,#1              ;6562
0045bc  f8893001          STRB     r3,[r9,#1]            ;6562
0045c0  f1ac0c01          SUB      r12,r12,#1
0045c4  f8aac000          STRH     r12,[r10,#0]
0045c8  e046              B        |L1.18008|
                  |L1.17866|
0045ca  e04a              B        |L1.18018|
                  |L1.17868|
                          DCD      ||area_number.25||
                  |L1.17872|
                          DCD      bps
                  |L1.17876|
                          DCD      NUMIST
                  |L1.17880|
                          DCD      mess_data
                  |L1.17884|
                          DCD      num_necc
                  |L1.17888|
                          DCD      main_1Hz_cnt
                  |L1.17892|
                          DCD      ipsBlckStat
                  |L1.17896|
                          DCD      TSIGN
                  |L1.17900|
                          DCD      power_summary_tempo
                  |L1.17904|
                          DCD      power_summary_tempo_old
                  |L1.17908|
                          DCD      powerSummaryCnt
                  |L1.17912|
                          DCD      power_summary
                  |L1.17916|
                          DCD      power_current_tempo
                  |L1.17920|
                          DCD      power_current_tempo_old
                  |L1.17924|
                          DCD      powerCurrentCnt
                  |L1.17928|
                          DCD      power_current
                  |L1.17932|
                          DCD      ica_timer_cnt
                  |L1.17936|
                          DCD      sp_ch_stat
                  |L1.17940|
                          DCD      ICA_EN
                  |L1.17944|
                          DCD      ica_plazma
                  |L1.17948|
                          DCD      bps_I
                  |L1.17952|
                          DCD      ica_my_current
                  |L1.17956|
                          DCD      ica_your_current
                  |L1.17960|
                          DCD      ica_u_necc
                  |L1.17964|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.17968|
;;;6564   		}
;;;6565   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004630  4291              CMP      r1,r2
004632  da11              BGE      |L1.18008|
004634  1a51              SUBS     r1,r2,r1
004636  2905              CMP      r1,#5
004638  db0e              BLT      |L1.18008|
00463a  2801              CMP      r0,#1
00463c  d004              BEQ      |L1.17992|
00463e  2802              CMP      r0,#2
004640  d10a              BNE      |L1.18008|
004642  f1b80f05          CMP      r8,#5
004646  dd07              BLE      |L1.18008|
                  |L1.17992|
;;;6566   		{
;;;6567   		ica_plazma[1]--;
004648  f1a30301          SUB      r3,r3,#1
00464c  f8893001          STRB     r3,[r9,#1]
;;;6568   		ica_u_necc++;
004650  f10c0c01          ADD      r12,r12,#1
004654  f8aac000          STRH     r12,[r10,#0]
                  |L1.18008|
;;;6569   		}
;;;6570   	gran(&ica_u_necc,-100,100);
004658  2264              MOVS     r2,#0x64
00465a  4251              RSBS     r1,r2,#0
00465c  48f8              LDR      r0,|L1.19008|
00465e  f7fffffe          BL       gran
                  |L1.18018|
;;;6571   	}
;;;6572   
;;;6573   
;;;6574   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
004662  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
004666  2801              CMP      r0,#1
004668  d169              BNE      |L1.18238|
00466a  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
00466e  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004670  4308              ORRS     r0,r0,r1
004672  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
004674  4308              ORRS     r0,r0,r1
004676  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004678  4308              ORRS     r0,r0,r1
00467a  d160              BNE      |L1.18238|
00467c  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
00467e  2800              CMP      r0,#0
004680  d05d              BEQ      |L1.18238|
;;;6575   	{
;;;6576   	
;;;6577   //	ica_connect_cnt++;
;;;6578   
;;;6579   	if(ica_timer_cnt==8)
004682  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6580   		{
;;;6581   		char modbus_buff[20],i;
;;;6582   		short crc_temp;
;;;6583   	
;;;6584   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004684  4bef              LDR      r3,|L1.19012|
;;;6585   		modbus_buff[1] = 4;
;;;6586   		modbus_buff[2] = 0;
;;;6587   		modbus_buff[3] = 2;
;;;6588   		modbus_buff[4] = 0;	
;;;6589   		modbus_buff[5] = 1;
;;;6590   	
;;;6591   		crc_temp= CRC16_2(modbus_buff,6);
;;;6592   	
;;;6593   		modbus_buff[6]= (char)crc_temp;
;;;6594   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6595   	
;;;6596   		if(ICA_CH==0)
004686  4ff0              LDR      r7,|L1.19016|
004688  2808              CMP      r0,#8                 ;6579
00468a  d05b              BEQ      |L1.18244|
;;;6597   			{
;;;6598   			for (i=0;i<8;i++)
;;;6599   				{
;;;6600   				putchar_sc16is700(modbus_buff[i]);
;;;6601   				}
;;;6602   			}
;;;6603   		else if(ICA_CH==2)
;;;6604   			{
;;;6605   			uart_out1 (5,4,0,2,0,1,0);
;;;6606   			}
;;;6607   		}
;;;6608   	else
;;;6609   		{
;;;6610   		char modbus_buff[20],i;
;;;6611   		short crc_temp, tempSSSS;
;;;6612   
;;;6613   		tempSSSS=cntrl_stat_old;
00468c  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6614   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
004690  48ee              LDR      r0,|L1.19020|
004692  f06f0214          MVN      r2,#0x14
004696  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
00469a  ebc01100          RSB      r1,r0,r0,LSL #4
00469e  eb020c81          ADD      r12,r2,r1,LSL #2
0046a2  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
0046a6  4594              CMP      r12,r2
0046a8  d00b              BEQ      |L1.18114|
0046aa  f06f0513          MVN      r5,#0x13
0046ae  eb050581          ADD      r5,r5,r1,LSL #2
0046b2  4295              CMP      r5,r2
0046b4  d005              BEQ      |L1.18114|
0046b6  f06f0512          MVN      r5,#0x12
0046ba  eb050181          ADD      r1,r5,r1,LSL #2
0046be  4291              CMP      r1,r2
0046c0  d101              BNE      |L1.18118|
                  |L1.18114|
0046c2  f4404680          ORR      r6,r0,#0x4000
                  |L1.18118|
;;;6615   
;;;6616   
;;;6617   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0046c6  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
0046c8  f88d0010          STRB     r0,[sp,#0x10]
;;;6618   		modbus_buff[1] = 6;
0046cc  f04f0006          MOV      r0,#6
0046d0  f88d0011          STRB     r0,[sp,#0x11]
;;;6619   		modbus_buff[2] = 0;
0046d4  f88d4012          STRB     r4,[sp,#0x12]
;;;6620   		modbus_buff[3] = 100;
0046d8  f04f0064          MOV      r0,#0x64
0046dc  f88d0013          STRB     r0,[sp,#0x13]
;;;6621   		modbus_buff[4] = (char)(tempSSSS/256);	
0046e0  ea4f70e6          ASR      r0,r6,#31
0046e4  eb066010          ADD      r0,r6,r0,LSR #24
0046e8  ea4f2120          ASR      r1,r0,#8
0046ec  f88d1014          STRB     r1,[sp,#0x14]
;;;6622   		modbus_buff[5] = (char)(tempSSSS%256);
0046f0  4630              MOV      r0,r6
0046f2  f88d0015          STRB     r0,[sp,#0x15]
;;;6623   	
;;;6624   		crc_temp= CRC16_2(modbus_buff,6);
0046f6  f04f0106          MOV      r1,#6
0046fa  a804              ADD      r0,sp,#0x10
0046fc  f7fffffe          BL       CRC16_2
;;;6625   	
;;;6626   		modbus_buff[6]= (char)crc_temp;
004700  f88d0016          STRB     r0,[sp,#0x16]
;;;6627   		modbus_buff[7]= (char)(crc_temp>>8);
004704  ea4f2020          ASR      r0,r0,#8
004708  f88d0017          STRB     r0,[sp,#0x17]
;;;6628   	
;;;6629   		crc_temp= CRC16_2(modbus_buff,6);
00470c  f04f0106          MOV      r1,#6
004710  a804              ADD      r0,sp,#0x10
004712  f7fffffe          BL       CRC16_2
;;;6630   	
;;;6631   		plazma_ica1=tempSSSS;
004716  48ce              LDR      r0,|L1.19024|
004718  8046              STRH     r6,[r0,#2]
;;;6632   		if(ICA_CH==0)
00471a  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
00471e  b3f0              CBZ      r0,|L1.18334|
;;;6633   			{
;;;6634   			for (i=0;i<8;i++)
;;;6635   				{
;;;6636   				putchar_sc16is700(modbus_buff[i]);
;;;6637   				}
;;;6638   			}
;;;6639   		else if(ICA_CH==2)
004720  2802              CMP      r0,#2
004722  d10c              BNE      |L1.18238|
;;;6640   			{
;;;6641   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
004724  f89d0015          LDRB     r0,[sp,#0x15]
004728  f89d1014          LDRB     r1,[sp,#0x14]
00472c  e9cd0401          STRD     r0,r4,[sp,#4]
004730  9100              STR      r1,[sp,#0]
004732  2364              MOVS     r3,#0x64
004734  2200              MOVS     r2,#0
004736  2106              MOVS     r1,#6
004738  2005              MOVS     r0,#5
00473a  f7fffffe          BL       uart_out1
                  |L1.18238|
;;;6642   			}
;;;6643   		}
;;;6644   	}
;;;6645   }
00473e  b009              ADD      sp,sp,#0x24
004740  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18244|
004744  8818              LDRH     r0,[r3,#0]            ;6584  ; ICA_MODBUS_ADDRESS
004746  f88d0010          STRB     r0,[sp,#0x10]         ;6584
00474a  f04f0004          MOV      r0,#4                 ;6585
00474e  f88d0011          STRB     r0,[sp,#0x11]         ;6585
004752  f88d4012          STRB     r4,[sp,#0x12]         ;6586
004756  f04f0002          MOV      r0,#2                 ;6587
00475a  f88d0013          STRB     r0,[sp,#0x13]         ;6587
00475e  f88d4014          STRB     r4,[sp,#0x14]         ;6588
004762  f04f0501          MOV      r5,#1                 ;6589
004766  f88d5015          STRB     r5,[sp,#0x15]         ;6589
00476a  f04f0106          MOV      r1,#6                 ;6591
00476e  a804              ADD      r0,sp,#0x10           ;6591
004770  f7fffffe          BL       CRC16_2
004774  f88d0016          STRB     r0,[sp,#0x16]         ;6593
004778  ea4f2020          ASR      r0,r0,#8              ;6594
00477c  f88d0017          STRB     r0,[sp,#0x17]         ;6594
004780  f9b70000          LDRSH    r0,[r7,#0]            ;6596  ; ICA_CH
004784  b160              CBZ      r0,|L1.18336|
004786  2802              CMP      r0,#2                 ;6603
004788  d1d9              BNE      |L1.18238|
00478a  e9cd4500          STRD     r4,r5,[sp,#0]         ;6605
00478e  2302              MOVS     r3,#2                 ;6605
004790  2200              MOVS     r2,#0                 ;6605
004792  2104              MOVS     r1,#4                 ;6605
004794  2005              MOVS     r0,#5                 ;6605
004796  9402              STR      r4,[sp,#8]            ;6605
004798  f7fffffe          BL       uart_out1
00479c  e7cf              B        |L1.18238|
                  |L1.18334|
00479e  e00b              B        |L1.18360|
                  |L1.18336|
0047a0  f04f0400          MOV      r4,#0                 ;6598
0047a4  ad04              ADD      r5,sp,#0x10           ;6581
                  |L1.18342|
0047a6  5d28              LDRB     r0,[r5,r4]            ;6600
0047a8  f7fffffe          BL       putchar_sc16is700
0047ac  f1040401          ADD      r4,r4,#1              ;6598
0047b0  b2e4              UXTB     r4,r4                 ;6598
0047b2  2c08              CMP      r4,#8                 ;6598
0047b4  d3f7              BCC      |L1.18342|
0047b6  e7c2              B        |L1.18238|
                  |L1.18360|
0047b8  f04f0400          MOV      r4,#0                 ;6634
0047bc  ad04              ADD      r5,sp,#0x10           ;6610
                  |L1.18366|
0047be  5d28              LDRB     r0,[r5,r4]            ;6636
0047c0  f7fffffe          BL       putchar_sc16is700
0047c4  f1040401          ADD      r4,r4,#1              ;6634
0047c8  b2e4              UXTB     r4,r4                 ;6634
0047ca  2c08              CMP      r4,#8                 ;6634
0047cc  d3f7              BCC      |L1.18366|
0047ce  e7b6              B        |L1.18238|
;;;6646   
                          ENDP

                  ipsBlckHndl PROC
;;;6729   //-----------------------------------------------
;;;6730   void ipsBlckHndl(char in)
0047d0  b510              PUSH     {r4,lr}
;;;6731   {
;;;6732   
;;;6733   ipsBlckStat=0;
0047d2  4ba0              LDR      r3,|L1.19028|
0047d4  f04f0000          MOV      r0,#0
0047d8  8018              STRH     r0,[r3,#0]
;;;6734   if(ipsBlckSrc==1)
0047da  489f              LDR      r0,|L1.19032|
0047dc  f04f0401          MOV      r4,#1
;;;6735   	{
;;;6736   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
0047e0  f44f62fa          MOV      r2,#0x7d0
0047e4  f9b01000          LDRSH    r1,[r0,#0]            ;6734  ; ipsBlckSrc
0047e8  489c              LDR      r0,|L1.19036|
0047ea  2901              CMP      r1,#1                 ;6734
0047ec  f9b00000          LDRSH    r0,[r0,#0]
0047f0  d006              BEQ      |L1.18432|
;;;6737   	}
;;;6738   else if(ipsBlckSrc==2)
0047f2  2902              CMP      r1,#2
0047f4  d10f              BNE      |L1.18454|
0047f6  499a              LDR      r1,|L1.19040|
;;;6739   	{
;;;6740   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
0047f8  f9b1101a          LDRSH    r1,[r1,#0x1a]
0047fc  b160              CBZ      r0,|L1.18456|
0047fe  e00d              B        |L1.18460|
                  |L1.18432|
004800  4997              LDR      r1,|L1.19040|
004802  f9b11016          LDRSH    r1,[r1,#0x16]         ;6736
004806  b908              CBNZ     r0,|L1.18444|
004808  4291              CMP      r1,r2                 ;6736
00480a  dc03              BGT      |L1.18452|
                  |L1.18444|
00480c  2801              CMP      r0,#1                 ;6736
00480e  d102              BNE      |L1.18454|
004810  4291              CMP      r1,r2                 ;6736
004812  da00              BGE      |L1.18454|
                  |L1.18452|
004814  801c              STRH     r4,[r3,#0]            ;6736
                  |L1.18454|
;;;6741   	}
;;;6742   }
004816  bd10              POP      {r4,pc}
                  |L1.18456|
004818  4291              CMP      r1,r2                 ;6740
00481a  dc03              BGT      |L1.18468|
                  |L1.18460|
00481c  2801              CMP      r0,#1                 ;6740
00481e  d1fa              BNE      |L1.18454|
004820  4291              CMP      r1,r2                 ;6740
004822  daf8              BGE      |L1.18454|
                  |L1.18468|
004824  801c              STRH     r4,[r3,#0]            ;6740
004826  bd10              POP      {r4,pc}
;;;6743   
                          ENDP

                  bps_drv PROC
;;;6744   //-----------------------------------------------
;;;6745   void bps_drv(char in)
004828  e92d41f0          PUSH     {r4-r8,lr}
;;;6746   {
00482c  4606              MOV      r6,r0
;;;6747   char temp;
;;;6748   
;;;6749   if (bps[in]._device!=dSRC) return;
00482e  eb0600c6          ADD      r0,r6,r6,LSL #3
004832  498c              LDR      r1,|L1.19044|
004834  eb001006          ADD      r0,r0,r6,LSL #4
004838  f8112020          LDRB     r2,[r1,r0,LSL #2]
00483c  2a03              CMP      r2,#3
00483e  d17d              BNE      |L1.18748|
;;;6750   temp=bps[in]._flags_tm;
004840  eb010480          ADD      r4,r1,r0,LSL #2
004844  f8945042          LDRB     r5,[r4,#0x42]
;;;6751   if(temp&(1<<AV_T))
004848  07a8              LSLS     r0,r5,#30
00484a  d517              BPL      |L1.18556|
;;;6752   	{
;;;6753   	if(bps[in]._temp_av_cnt<1200) 
00484c  f9b41046          LDRSH    r1,[r4,#0x46]
004850  f44f6296          MOV      r2,#0x4b0
004854  4291              CMP      r1,r2
004856  da22              BGE      |L1.18590|
;;;6754   		{
;;;6755   		bps[in]._temp_av_cnt++;
004858  f1010101          ADD      r1,r1,#1
00485c  b208              SXTH     r0,r1
00485e  f8a40046          STRH     r0,[r4,#0x46]
;;;6756   		if(bps[in]._temp_av_cnt>=1200)
004862  4290              CMP      r0,r2
004864  db1b              BLT      |L1.18590|
;;;6757   			{
;;;6758   			bps[in]._temp_av_cnt=1200;
004866  f8a42046          STRH     r2,[r4,#0x46]
;;;6759   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
00486a  7860              LDRB     r0,[r4,#1]
00486c  07c0              LSLS     r0,r0,#31
00486e  d116              BNE      |L1.18590|
004870  2201              MOVS     r2,#1
004872  2100              MOVS     r1,#0
004874  4630              MOV      r0,r6
004876  f7fffffe          BL       avar_bps_hndl
00487a  e010              B        |L1.18590|
                  |L1.18556|
;;;6760   			}
;;;6761   		}
;;;6762   	}
;;;6763   
;;;6764   else if(!(temp&(1<<AV_T)))
;;;6765   	{
;;;6766   	if(bps[in]._temp_av_cnt) 
00487c  f9b40046          LDRSH    r0,[r4,#0x46]
004880  b168              CBZ      r0,|L1.18590|
;;;6767   		{
;;;6768   		bps[in]._temp_av_cnt--;
004882  f1a00001          SUB      r0,r0,#1
004886  b200              SXTH     r0,r0
004888  f8a40046          STRH     r0,[r4,#0x46]
;;;6769   		if(!bps[in]._temp_av_cnt)
00488c  b938              CBNZ     r0,|L1.18590|
;;;6770   			{
;;;6771   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
00488e  7860              LDRB     r0,[r4,#1]
004890  07c0              LSLS     r0,r0,#31
004892  d004              BEQ      |L1.18590|
004894  2200              MOVS     r2,#0
004896  4611              MOV      r1,r2
004898  4630              MOV      r0,r6
00489a  f7fffffe          BL       avar_bps_hndl
                  |L1.18590|
;;;6772   			}
;;;6773   		} 	
;;;6774   
;;;6775   	}
;;;6776   
;;;6777   if((temp&(1<<AVUMAX)))
00489e  0728              LSLS     r0,r5,#28
;;;6778   	{
;;;6779   	if(bps[in]._umax_av_cnt<10) 
;;;6780   		{
;;;6781   		bps[in]._umax_av_cnt++;
;;;6782   		if(bps[in]._umax_av_cnt>=10)
;;;6783   			{ 
;;;6784   			bps[in]._umax_av_cnt=10;
0048a0  f04f080a          MOV      r8,#0xa
0048a4  f04f0700          MOV      r7,#0                 ;6759
0048a8  d518              BPL      |L1.18652|
0048aa  f9b41048          LDRSH    r1,[r4,#0x48]         ;6779
0048ae  290a              CMP      r1,#0xa               ;6779
0048b0  da29              BGE      |L1.18694|
0048b2  f1010101          ADD      r1,r1,#1              ;6781
0048b6  b208              SXTH     r0,r1                 ;6781
0048b8  f8a40048          STRH     r0,[r4,#0x48]         ;6781
0048bc  280a              CMP      r0,#0xa               ;6782
0048be  db22              BLT      |L1.18694|
0048c0  f8a48048          STRH     r8,[r4,#0x48]
;;;6785   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
0048c4  7860              LDRB     r0,[r4,#1]
0048c6  0780              LSLS     r0,r0,#30
0048c8  d404              BMI      |L1.18644|
0048ca  2201              MOVS     r2,#1
0048cc  4611              MOV      r1,r2
0048ce  4630              MOV      r0,r6
0048d0  f7fffffe          BL       avar_bps_hndl
                  |L1.18644|
;;;6786   			apv_start(in);
0048d4  4630              MOV      r0,r6
0048d6  f7fffffe          BL       apv_start
0048da  e014              B        |L1.18694|
                  |L1.18652|
;;;6787   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6788   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6789   				{
;;;6790   				apv_cnt[in,0]=APV_INIT;
;;;6791   				apv_cnt[in,1]=APV_INIT;
;;;6792   				apv_cnt[in,2]=APV_INIT;
;;;6793   				apv_flags[in]=afOFF;
;;;6794   				}				*/
;;;6795   						
;;;6796   			}
;;;6797   		} 
;;;6798   	}		
;;;6799   else if(!(temp&(1<<AVUMAX)))
;;;6800   	{
;;;6801   	if(bps[in]._umax_av_cnt>0) 
0048dc  f9b41048          LDRSH    r1,[r4,#0x48]
0048e0  2900              CMP      r1,#0
0048e2  dd0d              BLE      |L1.18688|
;;;6802   		{
;;;6803   		bps[in]._umax_av_cnt--;
0048e4  f1a10101          SUB      r1,r1,#1
0048e8  b208              SXTH     r0,r1
0048ea  f8a40048          STRH     r0,[r4,#0x48]
;;;6804   		if(bps[in]._umax_av_cnt==0)
0048ee  b950              CBNZ     r0,|L1.18694|
;;;6805   			{
;;;6806   			bps[in]._umax_av_cnt=0;
;;;6807   			avar_bps_hndl(in,1,0);
0048f0  f04f0200          MOV      r2,#0
0048f4  f04f0101          MOV      r1,#1
0048f8  4630              MOV      r0,r6
0048fa  f7fffffe          BL       avar_bps_hndl
0048fe  e002              B        |L1.18694|
                  |L1.18688|
;;;6808   			//apv_stop(in);
;;;6809   	 //		apv_cnt[in,0]=0;
;;;6810   	//		apv_cnt[in,1]=0;
;;;6811   	 //		apv_cnt[in,2]=0;			
;;;6812   			}
;;;6813   		}
;;;6814   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004900  da01              BGE      |L1.18694|
004902  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.18694|
;;;6815   	}
;;;6816   
;;;6817   if(temp&(1<<AVUMIN))
004906  06e8              LSLS     r0,r5,#27
004908  d519              BPL      |L1.18750|
;;;6818   	{
;;;6819   	if(bps[in]._umin_av_cnt<10) 
00490a  f9b4004a          LDRSH    r0,[r4,#0x4a]
00490e  280a              CMP      r0,#0xa
004910  da23              BGE      |L1.18778|
;;;6820   		{
;;;6821   		bps[in]._umin_av_cnt++;
004912  f1000001          ADD      r0,r0,#1
004916  b200              SXTH     r0,r0
004918  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6822   		if(bps[in]._umin_av_cnt>=10)
00491c  280a              CMP      r0,#0xa
00491e  db1c              BLT      |L1.18778|
;;;6823   			{ 
;;;6824   			bps[in]._umin_av_cnt=10;
004920  f8a4804a          STRH     r8,[r4,#0x4a]
;;;6825   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004924  7860              LDRB     r0,[r4,#1]
004926  0740              LSLS     r0,r0,#29
004928  d404              BMI      |L1.18740|
00492a  2201              MOVS     r2,#1
00492c  2102              MOVS     r1,#2
00492e  4630              MOV      r0,r6
004930  f7fffffe          BL       avar_bps_hndl
                  |L1.18740|
;;;6826   			apv_start(in);
004934  4630              MOV      r0,r6
004936  f7fffffe          BL       apv_start
00493a  e00e              B        |L1.18778|
                  |L1.18748|
00493c  e0b3              B        |L1.19110|
                  |L1.18750|
;;;6827   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6828   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6829   				{
;;;6830   				apv_cnt[in,0]=APV_INIT;
;;;6831   				apv_cnt[in,1]=APV_INIT;
;;;6832   				apv_cnt[in,2]=APV_INIT;
;;;6833   				apv_flags[in]=afOFF;
;;;6834   				}*/				
;;;6835   			}
;;;6836   		} 
;;;6837   	}	
;;;6838   	
;;;6839   else if(!(temp&(1<<AVUMIN)))
;;;6840   	{
;;;6841   	if(bps[in]._umin_av_cnt) 
00493e  f9b4004a          LDRSH    r0,[r4,#0x4a]
004942  b150              CBZ      r0,|L1.18778|
;;;6842   		{
;;;6843   		bps[in]._umin_av_cnt--;
004944  f1a00001          SUB      r0,r0,#1
004948  b200              SXTH     r0,r0
00494a  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6844   		if(bps[in]._umin_av_cnt==0)
00494e  b920              CBNZ     r0,|L1.18778|
;;;6845   			{
;;;6846   			bps[in]._umin_av_cnt=0;
;;;6847   			avar_bps_hndl(in,2,0);
004950  2200              MOVS     r2,#0
004952  2102              MOVS     r1,#2
004954  4630              MOV      r0,r6
004956  f7fffffe          BL       avar_bps_hndl
                  |L1.18778|
;;;6848   			//apv_stop(in);
;;;6849   		//	apv_cnt[in,0]=0;
;;;6850   		//	apv_cnt[in,1]=0;
;;;6851   		//	apv_cnt[in,2]=0;
;;;6852   			}
;;;6853   		}
;;;6854   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6855   	}
;;;6856   
;;;6857   if((bps[in]._Uii<(UB20-DU))&&(bps[in]._state==bsWRK))
00495a  4943              LDR      r1,|L1.19048|
00495c  69e0              LDR      r0,[r4,#0x1c]
00495e  f9b12000          LDRSH    r2,[r1,#0]  ; UB20
004962  4942              LDR      r1,|L1.19052|
004964  f9b11000          LDRSH    r1,[r1,#0]  ; DU
004968  1a51              SUBS     r1,r2,r1
00496a  4288              CMP      r0,r1
00496c  da02              BGE      |L1.18804|
00496e  78a2              LDRB     r2,[r4,#2]
004970  2a01              CMP      r2,#1
004972  d00b              BEQ      |L1.18828|
                  |L1.18804|
;;;6858   	{
;;;6859   	if(bps[in]._umin_av_cnt_uku<300) 
;;;6860   		{
;;;6861   		bps[in]._umin_av_cnt_uku++;
;;;6862   		if(bps[in]._umin_av_cnt_uku>=300)
;;;6863   			{ 
;;;6864   			bps[in]._umin_av_cnt_uku=300;
;;;6865   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
;;;6866   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6867   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6868   				{
;;;6869   				apv_cnt[in,0]=APV_INIT;
;;;6870   				apv_cnt[in,1]=APV_INIT;
;;;6871   				apv_cnt[in,2]=APV_INIT;
;;;6872   				apv_flags[in]=afOFF;
;;;6873   				}*/				
;;;6874   			}
;;;6875   		} 
;;;6876   	}	
;;;6877   	
;;;6878   else if(bps[in]._Uii>=(UB20-DU))
004974  4288              CMP      r0,r1
004976  db26              BLT      |L1.18886|
;;;6879   	{
;;;6880   	if(bps[in]._umin_av_cnt_uku) 
004978  f9b4104c          LDRSH    r1,[r4,#0x4c]
00497c  b319              CBZ      r1,|L1.18886|
;;;6881   		{
;;;6882   		bps[in]._umin_av_cnt_uku--;
00497e  f1a10101          SUB      r1,r1,#1
004982  b208              SXTH     r0,r1
004984  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6883   		if(bps[in]._umin_av_cnt_uku==0)
004988  b1c0              CBZ      r0,|L1.18876|
00498a  e01c              B        |L1.18886|
                  |L1.18828|
00498c  f9b4104c          LDRSH    r1,[r4,#0x4c]         ;6859
004990  f44f7296          MOV      r2,#0x12c             ;6859
004994  4291              CMP      r1,r2                 ;6859
004996  da16              BGE      |L1.18886|
004998  f1010101          ADD      r1,r1,#1              ;6861
00499c  b208              SXTH     r0,r1                 ;6861
00499e  f8a4004c          STRH     r0,[r4,#0x4c]         ;6861
0049a2  4290              CMP      r0,r2                 ;6862
0049a4  db0f              BLT      |L1.18886|
0049a6  f8a4204c          STRH     r2,[r4,#0x4c]         ;6864
0049aa  7860              LDRB     r0,[r4,#1]            ;6865
0049ac  0740              LSLS     r0,r0,#29             ;6865
0049ae  d40a              BMI      |L1.18886|
0049b0  2201              MOVS     r2,#1                 ;6865
0049b2  2102              MOVS     r1,#2                 ;6865
0049b4  4630              MOV      r0,r6                 ;6865
0049b6  f7fffffe          BL       avar_bps_hndl
0049ba  e004              B        |L1.18886|
                  |L1.18876|
;;;6884   			{
;;;6885   			bps[in]._umin_av_cnt_uku=0;
;;;6886   			avar_bps_hndl(in,2,0);
0049bc  2200              MOVS     r2,#0
0049be  2102              MOVS     r1,#2
0049c0  4630              MOV      r0,r6
0049c2  f7fffffe          BL       avar_bps_hndl
                  |L1.18886|
;;;6887   		//	apv_cnt[in,0]=0;
;;;6888   		//	apv_cnt[in,1]=0;
;;;6889   		//	apv_cnt[in,2]=0;
;;;6890   			}
;;;6891   		}
;;;6892   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;6893   	}
;;;6894   
;;;6895   //bps[in]._state=bsOFF;
;;;6896   
;;;6897   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
0049c6  7860              LDRB     r0,[r4,#1]
0049c8  0700              LSLS     r0,r0,#28
0049ca  d003              BEQ      |L1.18900|
0049cc  f04f0004          MOV      r0,#4
0049d0  70a0              STRB     r0,[r4,#2]
0049d2  e017              B        |L1.18948|
                  |L1.18900|
;;;6898   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
0049d4  4826              LDR      r0,|L1.19056|
0049d6  7800              LDRB     r0,[r0,#0]  ; net_av
0049d8  b130              CBZ      r0,|L1.18920|
0049da  78e0              LDRB     r0,[r4,#3]
0049dc  2814              CMP      r0,#0x14
0049de  d903              BLS      |L1.18920|
;;;6899   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
0049e0  f04f0005          MOV      r0,#5
0049e4  70a0              STRB     r0,[r4,#2]
0049e6  e00d              B        |L1.18948|
                  |L1.18920|
;;;6900   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
0049e8  f8940042          LDRB     r0,[r4,#0x42]
0049ec  0680              LSLS     r0,r0,#26
0049ee  d503              BPL      |L1.18936|
0049f0  f04f0002          MOV      r0,#2
0049f4  70a0              STRB     r0,[r4,#2]
0049f6  e005              B        |L1.18948|
                  |L1.18936|
;;;6901   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
0049f8  78e0              LDRB     r0,[r4,#3]
0049fa  2814              CMP      r0,#0x14
0049fc  d202              BCS      |L1.18948|
0049fe  f04f0001          MOV      r0,#1
004a02  70a0              STRB     r0,[r4,#2]
                  |L1.18948|
;;;6902   
;;;6903   
;;;6904   
;;;6905   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6906   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6907   //else bps[0]._state=ssNOT;
;;;6908   
;;;6909   //bps[in]._is_ready=0;
;;;6910   //bps[in]._is_wrk=0;
;;;6911   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6912   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6913   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6914   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6915   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6916   //	{
;;;6917   //	bps[in]._flags_bp='B';// заблокирован
;;;6918   //	bps[in]._is_ready=1;
;;;6919   //	}
;;;6920   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6921   //     {
;;;6922   //     bps[in]._flags_bp='W';// работает
;;;6923   //     bps[in]._is_ready=1;
;;;6924   //     bps[in]._is_wrk=1;
;;;6925        
;;;6926   //     }
;;;6927   //else bps[in]._is_ready=1;     
;;;6928   
;;;6929   
;;;6930   
;;;6931   
;;;6932   
;;;6933   /*
;;;6934   bps[in]._flags_tu&=BIN8(11111110);
;;;6935   if(bps[in]._ist_blok_cnt)
;;;6936   	{
;;;6937   	bps[in]._ist_blok_cnt--;
;;;6938   	bps[in]._flags_tu|=BIN8(1);
;;;6939   	}
;;;6940   
;;;6941   	   */ 
;;;6942   
;;;6943   //Пересброс БПСа при потере связи
;;;6944   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004a04  78e0              LDRB     r0,[r4,#3]
004a06  280a              CMP      r0,#0xa
004a08  d306              BCC      |L1.18968|
004a0a  f894002c          LDRB     r0,[r4,#0x2c]
004a0e  f0400080          ORR      r0,r0,#0x80
004a12  f884002c          STRB     r0,[r4,#0x2c]
004a16  e005              B        |L1.18980|
                  |L1.18968|
;;;6945   else bps[in]._flags_tu&=BIN8(1111111);
004a18  f894002c          LDRB     r0,[r4,#0x2c]
004a1c  f000007f          AND      r0,r0,#0x7f
004a20  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.18980|
;;;6946   
;;;6947   if(avar_bps_reset_cnt) 
004a24  480a              LDR      r0,|L1.19024|
004a26  3880              SUBS     r0,r0,#0x80
004a28  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004a2c  b139              CBZ      r1,|L1.19006|
;;;6948   	{
;;;6949   	bps[in]._flags_tu|=BIN8(10);
004a2e  f894102c          LDRB     r1,[r4,#0x2c]
004a32  f0410102          ORR      r1,r1,#2
004a36  f884102c          STRB     r1,[r4,#0x2c]
;;;6950   	bps[in]._av=0;
004a3a  7067              STRB     r7,[r4,#1]
004a3c  e02a              B        |L1.19092|
                  |L1.19006|
004a3e  e019              B        |L1.19060|
                  |L1.19008|
                          DCD      ica_u_necc
                  |L1.19012|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19016|
                          DCD      ICA_CH
                  |L1.19020|
                          DCD      TBAT
                  |L1.19024|
                          DCD      ||area_number.25||+0x80
                  |L1.19028|
                          DCD      ipsBlckStat
                  |L1.19032|
                          DCD      ipsBlckSrc
                  |L1.19036|
                          DCD      ipsBlckLog
                  |L1.19040|
                          DCD      ||.bss||+0x40c
                  |L1.19044|
                          DCD      bps
                  |L1.19048|
                          DCD      UB20
                  |L1.19052|
                          DCD      ||DU||
                  |L1.19056|
                          DCD      net_av
                  |L1.19060|
;;;6951   	}
;;;6952   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004a74  f8941062          LDRB     r1,[r4,#0x62]
004a78  b131              CBZ      r1,|L1.19080|
004a7a  f894102c          LDRB     r1,[r4,#0x2c]
004a7e  f0410102          ORR      r1,r1,#2
004a82  f884102c          STRB     r1,[r4,#0x2c]
004a86  e005              B        |L1.19092|
                  |L1.19080|
;;;6953   else bps[in]._flags_tu&=BIN8(11111101);
004a88  f894102c          LDRB     r1,[r4,#0x2c]
004a8c  f00101fd          AND      r1,r1,#0xfd
004a90  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19092|
;;;6954   	
;;;6955   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004a94  f9b41054          LDRSH    r1,[r4,#0x54]
004a98  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004a9c  4408              ADD      r0,r0,r1
004a9e  6320              STR      r0,[r4,#0x30]
;;;6956   bps[in]._vol_i=1000;
004aa0  f44f707a          MOV      r0,#0x3e8
004aa4  6360              STR      r0,[r4,#0x34]
                  |L1.19110|
;;;6957   //bps[0]._vol_u=500;
;;;6958   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;6959   }
004aa6  e8bd81f0          POP      {r4-r8,pc}
;;;6960   
                          ENDP

                  avt_hndl PROC
;;;6961   //-----------------------------------------------
;;;6962   void avt_hndl(void)
004aaa  b570              PUSH     {r4-r6,lr}
;;;6963   {
;;;6964   char i;
;;;6965   for(i=0;i<12;i++)
004aac  f04f0000          MOV      r0,#0
;;;6966   	{
;;;6967   	if(eb2_data_short[6]&(1<<i))
004ab0  49ff              LDR      r1,|L1.20144|
004ab2  f04f0401          MOV      r4,#1
004ab6  4603              MOV      r3,r0                 ;6965
004ab8  f9b1200c          LDRSH    r2,[r1,#0xc]
;;;6968   		{
;;;6969   		avt_stat[i]=avtON;
004abc  4dfd              LDR      r5,|L1.20148|
                  |L1.19134|
004abe  fa04f100          LSL      r1,r4,r0              ;6967
004ac2  420a              TST      r2,r1                 ;6967
004ac4  d001              BEQ      |L1.19146|
004ac6  542c              STRB     r4,[r5,r0]
004ac8  e000              B        |L1.19148|
                  |L1.19146|
;;;6970   		}
;;;6971   	else avt_stat[i]=avtOFF;
004aca  542b              STRB     r3,[r5,r0]
                  |L1.19148|
004acc  f1000001          ADD      r0,r0,#1              ;6965
004ad0  b2c0              UXTB     r0,r0                 ;6965
004ad2  280c              CMP      r0,#0xc               ;6965
004ad4  d3f3              BCC      |L1.19134|
;;;6972   	}
;;;6973   
;;;6974   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004ad6  4ef8              LDR      r6,|L1.20152|
004ad8  7828              LDRB     r0,[r5,#0]  ; avt_stat
004ada  4cf8              LDR      r4,|L1.20156|
004adc  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004ade  4281              CMP      r1,r0
004ae0  d00b              BEQ      |L1.19194|
004ae2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004ae6  2901              CMP      r1,#1
004ae8  db07              BLT      |L1.19194|
;;;6975   	{
;;;6976   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004aea  2801              CMP      r0,#1
004aec  d07e              BEQ      |L1.19436|
;;;6977   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004aee  2300              MOVS     r3,#0
004af0  2201              MOVS     r2,#1
004af2  210b              MOVS     r1,#0xb
004af4  a0f2              ADR      r0,|L1.20160|
004af6  f7fffffe          BL       snmp_trap_send
                  |L1.19194|
;;;6978   	}
;;;6979   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004afa  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004afc  7868              LDRB     r0,[r5,#1]  ; avt_stat
004afe  4281              CMP      r1,r0
004b00  d00b              BEQ      |L1.19226|
004b02  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b06  2902              CMP      r1,#2
004b08  db07              BLT      |L1.19226|
;;;6980   	{
;;;6981   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004b0a  2801              CMP      r0,#1
004b0c  d06f              BEQ      |L1.19438|
;;;6982   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004b0e  2300              MOVS     r3,#0
004b10  2202              MOVS     r2,#2
004b12  210b              MOVS     r1,#0xb
004b14  a0ef              ADR      r0,|L1.20180|
004b16  f7fffffe          BL       snmp_trap_send
                  |L1.19226|
;;;6983   	}
;;;6984   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004b1a  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004b1c  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004b1e  4281              CMP      r1,r0
004b20  d00b              BEQ      |L1.19258|
004b22  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b26  2903              CMP      r1,#3
004b28  db07              BLT      |L1.19258|
;;;6985   	{
;;;6986   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004b2a  2801              CMP      r0,#1
004b2c  d072              BEQ      |L1.19476|
;;;6987   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004b2e  2300              MOVS     r3,#0
004b30  2203              MOVS     r2,#3
004b32  210b              MOVS     r1,#0xb
004b34  a0ec              ADR      r0,|L1.20200|
004b36  f7fffffe          BL       snmp_trap_send
                  |L1.19258|
;;;6988   	}
;;;6989   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004b3a  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004b3c  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004b3e  4281              CMP      r1,r0
004b40  d00b              BEQ      |L1.19290|
004b42  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b46  2904              CMP      r1,#4
004b48  db07              BLT      |L1.19290|
;;;6990   	{
;;;6991   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004b4a  2801              CMP      r0,#1
004b4c  d079              BEQ      |L1.19522|
;;;6992   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004b4e  2300              MOVS     r3,#0
004b50  2204              MOVS     r2,#4
004b52  210b              MOVS     r1,#0xb
004b54  a0e9              ADR      r0,|L1.20220|
004b56  f7fffffe          BL       snmp_trap_send
                  |L1.19290|
;;;6993   	}
;;;6994   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004b5a  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004b5c  7928              LDRB     r0,[r5,#4]  ; avt_stat
004b5e  4281              CMP      r1,r0
004b60  d00b              BEQ      |L1.19322|
004b62  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b66  2905              CMP      r1,#5
004b68  db07              BLT      |L1.19322|
;;;6995   	{
;;;6996   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004b6a  2801              CMP      r0,#1
004b6c  d071              BEQ      |L1.19538|
;;;6997   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004b6e  2300              MOVS     r3,#0
004b70  2205              MOVS     r2,#5
004b72  210b              MOVS     r1,#0xb
004b74  a0e6              ADR      r0,|L1.20240|
004b76  f7fffffe          BL       snmp_trap_send
                  |L1.19322|
;;;6998   	}
;;;6999   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004b7a  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004b7c  7968              LDRB     r0,[r5,#5]  ; avt_stat
004b7e  4281              CMP      r1,r0
004b80  d00b              BEQ      |L1.19354|
004b82  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b86  2906              CMP      r1,#6
004b88  db07              BLT      |L1.19354|
;;;7000   	{
;;;7001   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004b8a  2801              CMP      r0,#1
004b8c  d068              BEQ      |L1.19552|
;;;7002   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004b8e  2300              MOVS     r3,#0
004b90  2206              MOVS     r2,#6
004b92  210b              MOVS     r1,#0xb
004b94  a0e3              ADR      r0,|L1.20260|
004b96  f7fffffe          BL       snmp_trap_send
                  |L1.19354|
;;;7003   	}
;;;7004   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004b9a  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004b9c  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004b9e  4281              CMP      r1,r0
004ba0  d00b              BEQ      |L1.19386|
004ba2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004ba6  2907              CMP      r1,#7
004ba8  db07              BLT      |L1.19386|
;;;7005   	{
;;;7006   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004baa  2801              CMP      r0,#1
004bac  d05f              BEQ      |L1.19566|
;;;7007   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004bae  2300              MOVS     r3,#0
004bb0  2207              MOVS     r2,#7
004bb2  210b              MOVS     r1,#0xb
004bb4  a0e0              ADR      r0,|L1.20280|
004bb6  f7fffffe          BL       snmp_trap_send
                  |L1.19386|
;;;7008   	}
;;;7009   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004bba  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004bbc  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004bbe  4281              CMP      r1,r0
004bc0  d00b              BEQ      |L1.19418|
004bc2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004bc6  2908              CMP      r1,#8
004bc8  db07              BLT      |L1.19418|
;;;7010   	{
;;;7011   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004bca  2801              CMP      r0,#1
004bcc  d056              BEQ      |L1.19580|
;;;7012   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004bce  2300              MOVS     r3,#0
004bd0  2208              MOVS     r2,#8
004bd2  210b              MOVS     r1,#0xb
004bd4  a0dd              ADR      r0,|L1.20300|
004bd6  f7fffffe          BL       snmp_trap_send
                  |L1.19418|
;;;7013   	}
;;;7014   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004bda  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004bdc  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004bde  4281              CMP      r1,r0
004be0  d00e              BEQ      |L1.19456|
004be2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004be6  2909              CMP      r1,#9
004be8  db0a              BLT      |L1.19456|
;;;7015   	{
;;;7016   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004bea  e001              B        |L1.19440|
                  |L1.19436|
004bec  e013              B        |L1.19478|
                  |L1.19438|
004bee  e019              B        |L1.19492|
                  |L1.19440|
004bf0  2801              CMP      r0,#1
004bf2  d04a              BEQ      |L1.19594|
;;;7017   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004bf4  2300              MOVS     r3,#0
004bf6  2209              MOVS     r2,#9
004bf8  210b              MOVS     r1,#0xb
004bfa  a0d9              ADR      r0,|L1.20320|
004bfc  f7fffffe          BL       snmp_trap_send
                  |L1.19456|
;;;7018   	}
;;;7019   
;;;7020   for(i=0;i<12;i++)
004c00  f04f0000          MOV      r0,#0
                  |L1.19460|
;;;7021   	{
;;;7022   	avt_stat_old[i]=avt_stat[i];
004c04  5c29              LDRB     r1,[r5,r0]
004c06  5431              STRB     r1,[r6,r0]
004c08  f1000001          ADD      r0,r0,#1              ;7020
004c0c  b2c0              UXTB     r0,r0                 ;7020
004c0e  280c              CMP      r0,#0xc               ;7020
004c10  d3f8              BCC      |L1.19460|
                  |L1.19474|
;;;7023   	}
;;;7024   }
004c12  bd70              POP      {r4-r6,pc}
                  |L1.19476|
004c14  e00e              B        |L1.19508|
                  |L1.19478|
004c16  2301              MOVS     r3,#1                 ;6976
004c18  461a              MOV      r2,r3                 ;6976
004c1a  210b              MOVS     r1,#0xb               ;6976
004c1c  a0d5              ADR      r0,|L1.20340|
004c1e  f7fffffe          BL       snmp_trap_send
004c22  e76a              B        |L1.19194|
                  |L1.19492|
004c24  2301              MOVS     r3,#1                 ;6981
004c26  2202              MOVS     r2,#2                 ;6981
004c28  210b              MOVS     r1,#0xb               ;6981
004c2a  a0d7              ADR      r0,|L1.20360|
004c2c  f7fffffe          BL       snmp_trap_send
004c30  e773              B        |L1.19226|
004c32  e006              B        |L1.19522|
                  |L1.19508|
004c34  2301              MOVS     r3,#1                 ;6986
004c36  2203              MOVS     r2,#3                 ;6986
004c38  210b              MOVS     r1,#0xb               ;6986
004c3a  a0d8              ADR      r0,|L1.20380|
004c3c  f7fffffe          BL       snmp_trap_send
004c40  e77b              B        |L1.19258|
                  |L1.19522|
004c42  2301              MOVS     r3,#1                 ;6991
004c44  2204              MOVS     r2,#4                 ;6991
004c46  210b              MOVS     r1,#0xb               ;6991
004c48  a0d9              ADR      r0,|L1.20400|
004c4a  f7fffffe          BL       snmp_trap_send
004c4e  e784              B        |L1.19290|
004c50  e7ff              B        |L1.19538|
                  |L1.19538|
004c52  2301              MOVS     r3,#1                 ;6996
004c54  2205              MOVS     r2,#5                 ;6996
004c56  210b              MOVS     r1,#0xb               ;6996
004c58  a0da              ADR      r0,|L1.20420|
004c5a  f7fffffe          BL       snmp_trap_send
004c5e  e78c              B        |L1.19322|
                  |L1.19552|
004c60  2301              MOVS     r3,#1                 ;7001
004c62  2206              MOVS     r2,#6                 ;7001
004c64  210b              MOVS     r1,#0xb               ;7001
004c66  a0dc              ADR      r0,|L1.20440|
004c68  f7fffffe          BL       snmp_trap_send
004c6c  e795              B        |L1.19354|
                  |L1.19566|
004c6e  2301              MOVS     r3,#1                 ;7006
004c70  2207              MOVS     r2,#7                 ;7006
004c72  210b              MOVS     r1,#0xb               ;7006
004c74  a0dd              ADR      r0,|L1.20460|
004c76  f7fffffe          BL       snmp_trap_send
004c7a  e79e              B        |L1.19386|
                  |L1.19580|
004c7c  2301              MOVS     r3,#1                 ;7011
004c7e  2208              MOVS     r2,#8                 ;7011
004c80  210b              MOVS     r1,#0xb               ;7011
004c82  a0df              ADR      r0,|L1.20480|
004c84  f7fffffe          BL       snmp_trap_send
004c88  e7a7              B        |L1.19418|
                  |L1.19594|
004c8a  2301              MOVS     r3,#1                 ;7016
004c8c  2209              MOVS     r2,#9                 ;7016
004c8e  210b              MOVS     r1,#0xb               ;7016
004c90  a0e0              ADR      r0,|L1.20500|
004c92  f7fffffe          BL       snmp_trap_send
004c96  e7b3              B        |L1.19456|
;;;7025   
                          ENDP

                  bat_hndl PROC
;;;7026   //-----------------------------------------------
;;;7027   void bat_hndl(void)
004c98  b570              PUSH     {r4-r6,lr}
;;;7028   {
;;;7029   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7030   	{
;;;7031   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7032   		{
;;;7033   		char i;
;;;7034   		for(i=0;i<2;i++)
;;;7035   			{
;;;7036   			if(mess_data[1]&(1<<i))
;;;7037   				{
;;;7038   				bat[i]._cnt_to_block=0;
;;;7039        			bat[i]._rel_stat=0;
;;;7040        			}
;;;7041   			}
;;;7042   		}
;;;7043   	}
;;;7044   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7045   	{		
;;;7046   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7047   		{
;;;7048   		char i;
;;;7049   		for(i=0;i<2;i++)
;;;7050   			{
;;;7051   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7052   				{
;;;7053   				bat[i]._cnt_to_block=20;
;;;7054   				bat[i]._rel_stat=1;
;;;7055        			}
;;;7056   			}
;;;7057   		
;;;7058   		}		
;;;7059   	}*/
;;;7060   
;;;7061   if(mess_find_unvol(MESS2BAT_HNDL))
004c9a  20c8              MOVS     r0,#0xc8
004c9c  f7fffffe          BL       mess_find_unvol
;;;7062   	{ 
;;;7063   	char i;
;;;7064   	
;;;7065   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7066   		{
;;;7067   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7068   			{
;;;7069   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004ca0  49e1              LDR      r1,|L1.20520|
004ca2  2200              MOVS     r2,#0                 ;7067
004ca4  b3a8              CBZ      r0,|L1.19730|
004ca6  4be1              LDR      r3,|L1.20524|
;;;7070   			}
;;;7071   		}
;;;7072   
;;;7073   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7074   		{
;;;7075   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7076   			{
;;;7077   			if(mess_data[1]&(1<<i))
004ca8  2401              MOVS     r4,#1
004caa  6818              LDR      r0,[r3,#0]            ;7065  ; mess_data
004cac  28c9              CMP      r0,#0xc9              ;7065
004cae  d01c              BEQ      |L1.19690|
004cb0  28ca              CMP      r0,#0xca              ;7073
004cb2  d02f              BEQ      |L1.19732|
;;;7078   				{
;;;7079   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7080   				}
;;;7081   			else bat[i]._cnt_to_block=0;
;;;7082   			}
;;;7083   		}
;;;7084   	else 
;;;7085   	 	{
;;;7086   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004cb4  4610              MOV      r0,r2
                  |L1.19638|
;;;7087   			{
;;;7088   			bat[i]._cnt_to_block=0;
004cb6  eb000340          ADD      r3,r0,r0,LSL #1
004cba  eb031300          ADD      r3,r3,r0,LSL #4
004cbe  f8012023          STRB     r2,[r1,r3,LSL #2]
004cc2  f1000001          ADD      r0,r0,#1              ;7086
004cc6  b2c0              UXTB     r0,r0                 ;7086
004cc8  2802              CMP      r0,#2                 ;7086
004cca  d3f4              BCC      |L1.19638|
                  |L1.19660|
;;;7089   			}
;;;7090   
;;;7091   		}
;;;7092   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004ccc  f04f0000          MOV      r0,#0
                  |L1.19664|
;;;7093   		{
;;;7094   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004cd0  eb000340          ADD      r3,r0,r0,LSL #1
004cd4  eb031300          ADD      r3,r3,r0,LSL #4
004cd8  f8115023          LDRB     r5,[r1,r3,LSL #2]
004cdc  2d14              CMP      r5,#0x14
004cde  d939              BLS      |L1.19796|
004ce0  eb010383          ADD      r3,r1,r3,LSL #2
004ce4  f883403c          STRB     r4,[r3,#0x3c]
004ce8  e038              B        |L1.19804|
                  |L1.19690|
004cea  f04f0000          MOV      r0,#0                 ;7067
                  |L1.19694|
004cee  eb000340          ADD      r3,r0,r0,LSL #1       ;7069
004cf2  eb031500          ADD      r5,r3,r0,LSL #4       ;7069
004cf6  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7069
004cfa  2b32              CMP      r3,#0x32              ;7069
004cfc  d203              BCS      |L1.19718|
004cfe  f1030301          ADD      r3,r3,#1              ;7069
004d02  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7069
                  |L1.19718|
004d06  f1000001          ADD      r0,r0,#1              ;7067
004d0a  b2c0              UXTB     r0,r0                 ;7067
004d0c  2802              CMP      r0,#2                 ;7067
004d0e  d3ee              BCC      |L1.19694|
004d10  e7dc              B        |L1.19660|
                  |L1.19730|
004d12  e029              B        |L1.19816|
                  |L1.19732|
004d14  f04f0000          MOV      r0,#0                 ;7075
004d18  685e              LDR      r6,[r3,#4]            ;7077
                  |L1.19738|
004d1a  fa04f300          LSL      r3,r4,r0              ;7077
004d1e  421e              TST      r6,r3                 ;7077
004d20  d00c              BEQ      |L1.19772|
004d22  eb000340          ADD      r3,r0,r0,LSL #1       ;7079
004d26  eb031500          ADD      r5,r3,r0,LSL #4       ;7079
004d2a  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7079
004d2e  2b32              CMP      r3,#0x32              ;7079
004d30  d20a              BCS      |L1.19784|
004d32  f1030301          ADD      r3,r3,#1              ;7079
004d36  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7079
004d3a  e005              B        |L1.19784|
                  |L1.19772|
004d3c  eb000340          ADD      r3,r0,r0,LSL #1       ;7081
004d40  eb031300          ADD      r3,r3,r0,LSL #4       ;7081
004d44  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7081
                  |L1.19784|
004d48  f1000001          ADD      r0,r0,#1              ;7075
004d4c  b2c0              UXTB     r0,r0                 ;7075
004d4e  2802              CMP      r0,#2                 ;7075
004d50  d3e3              BCC      |L1.19738|
004d52  e7bb              B        |L1.19660|
                  |L1.19796|
;;;7095   		else bat[i]._rel_stat=0;
004d54  eb010383          ADD      r3,r1,r3,LSL #2
004d58  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.19804|
004d5c  f1000001          ADD      r0,r0,#1              ;7092
004d60  b2c0              UXTB     r0,r0                 ;7092
004d62  2802              CMP      r0,#2                 ;7092
004d64  d3b4              BCC      |L1.19664|
;;;7096   		}
;;;7097   
;;;7098   	}
;;;7099   
;;;7100   else 
;;;7101   	{
;;;7102   	char i;
;;;7103   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7104   		{
;;;7105   		bat[i]._cnt_to_block=0;
;;;7106   		bat[i]._rel_stat=0;
;;;7107   		}
;;;7108   
;;;7109   	}
;;;7110   
;;;7111   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7112   	{
;;;7113   	if(PARAM_BAT_ON)
;;;7114   		{
;;;7115   		char i;
;;;7116   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7117   			{
;;;7118   			if(mess_data[1]&(1<<i))
;;;7119   				{
;;;7120   				bat[i]._cnt_to_block=0;
;;;7121   				bat[i]._rel_stat=0;
;;;7122   				}
;;;7123   			}
;;;7124   		}
;;;7125   	} */
;;;7126   }
004d66  e754              B        |L1.19474|
                  |L1.19816|
004d68  f04f0000          MOV      r0,#0                 ;7103
                  |L1.19820|
004d6c  eb000340          ADD      r3,r0,r0,LSL #1       ;7105
004d70  eb031300          ADD      r3,r3,r0,LSL #4       ;7105
004d74  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7105
004d78  eb010383          ADD      r3,r1,r3,LSL #2       ;7106
004d7c  f883203c          STRB     r2,[r3,#0x3c]         ;7106
004d80  f1000001          ADD      r0,r0,#1              ;7103
004d84  b2c0              UXTB     r0,r0                 ;7103
004d86  2802              CMP      r0,#2                 ;7103
004d88  d3f0              BCC      |L1.19820|
004d8a  e742              B        |L1.19474|
;;;7127   
                          ENDP

                  bat_drv PROC
;;;7765   //-----------------------------------------------
;;;7766   void bat_drv(char in)
004d8c  e92d4ffe          PUSH     {r1-r11,lr}
;;;7767   {
004d90  4605              MOV      r5,r0
;;;7768   unsigned short /*tempUS,*/tempUS_;
;;;7769   unsigned long tempUL,tempUL_;
;;;7770   unsigned short b_zar;
;;;7771   //static unsigned short time_cnt[2];
;;;7772   
;;;7773   
;;;7774   
;;;7775   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004d92  49a7              LDR      r1,|L1.20528|
004d94  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004d98  b118              CBZ      r0,|L1.19874|
004d9a  f1a00001          SUB      r0,r0,#1
004d9e  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.19874|
;;;7776   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004da2  4aa3              LDR      r2,|L1.20528|
004da4  1d12              ADDS     r2,r2,#4
004da6  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004daa  b118              CBZ      r0,|L1.19892|
004dac  f1a00001          SUB      r0,r0,#1
004db0  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.19892|
;;;7777   
;;;7778   
;;;7779   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004db4  eb050045          ADD      r0,r5,r5,LSL #1
004db8  4b9b              LDR      r3,|L1.20520|
004dba  eb001005          ADD      r0,r0,r5,LSL #4
004dbe  eb030480          ADD      r4,r3,r0,LSL #2
004dc2  4b9c              LDR      r3,|L1.20532|
004dc4  9002              STR      r0,[sp,#8]
004dc6  f9b40008          LDRSH    r0,[r4,#8]
004dca  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004dce  2364              MOVS     r3,#0x64
004dd0  42b0              CMP      r0,r6
004dd2  dd01              BLE      |L1.19928|
004dd4  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.19928|
;;;7780   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004dd8  2800              CMP      r0,#0
004dda  da01              BGE      |L1.19936|
004ddc  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.19936|
;;;7781   
;;;7782   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7783        {
;;;7784        if(!cntrl_stat_blok_cnt_)
004de0  4893              LDR      r0,|L1.20528|
004de2  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7782
004de6  38b0              SUBS     r0,r0,#0xb0
004de8  2700              MOVS     r7,#0
004dea  b14b              CBZ      r3,|L1.19968|
004dec  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7782
004df0  b133              CBZ      r3,|L1.19968|
004df2  f8b03076          LDRH     r3,[r0,#0x76]  ; cntrl_stat_blok_cnt_
004df6  b1a3              CBZ      r3,|L1.20002|
;;;7785             {
;;;7786             cntrl_stat_blok_cnt_=600; 
;;;7787             cntrl_stat_blok_cnt_plus[in]=0;
;;;7788             cntrl_stat_blok_cnt_minus[in]=0;
;;;7789             }
;;;7790        else cntrl_stat_blok_cnt=3000;
004df8  f64031b8          MOV      r1,#0xbb8
004dfc  f8a01074          STRH     r1,[r0,#0x74]
                  |L1.19968|
;;;7791        }
;;;7792   cntrl_stat_blok_cnt=0;
004e00  f8a07074          STRH     r7,[r0,#0x74]
;;;7793   
;;;7794   if(++(bat[in]._time_cnt)>=10)
004e04  f894003e          LDRB     r0,[r4,#0x3e]
004e08  1c40              ADDS     r0,r0,#1
004e0a  b2c0              UXTB     r0,r0
004e0c  f884003e          STRB     r0,[r4,#0x3e]
004e10  280a              CMP      r0,#0xa
004e12  d301              BCC      |L1.19992|
;;;7795   	{
;;;7796   	bat[in]._time_cnt=0;
004e14  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.19992|
;;;7797   	//bat[in]._zar_cnt++;
;;;7798   	}
;;;7799   
;;;7800   if(main_10Hz_cnt==50)
004e18  4e87              LDR      r6,|L1.20536|
004e1a  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
004e1c  2832              CMP      r0,#0x32
004e1e  d009              BEQ      |L1.20020|
004e20  e017              B        |L1.20050|
                  |L1.20002|
004e22  f44f7316          MOV      r3,#0x258             ;7786
004e26  f8a03076          STRH     r3,[r0,#0x76]         ;7786
004e2a  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7787
004e2e  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7788
004e32  e7e5              B        |L1.19968|
                  |L1.20020|
;;;7801   	{
;;;7802   	if(!bat[in]._rel_stat)
004e34  f894003c          LDRB     r0,[r4,#0x3c]
004e38  b958              CBNZ     r0,|L1.20050|
;;;7803   		{
;;;7804   		
;;;7805   		if(bat[in]._Ub<80) 
004e3a  f9b40002          LDRSH    r0,[r4,#2]
004e3e  2850              CMP      r0,#0x50
004e40  da07              BGE      |L1.20050|
;;;7806   			{
;;;7807   			
;;;7808   			if(!(bat[in]._av&1))
004e42  f894003d          LDRB     r0,[r4,#0x3d]
004e46  07c0              LSLS     r0,r0,#31
004e48  d103              BNE      |L1.20050|
;;;7809   				{
;;;7810   				avar_bat_hndl(in,1);
004e4a  2101              MOVS     r1,#1
004e4c  4628              MOV      r0,r5
004e4e  f7fffffe          BL       avar_bat_hndl
                  |L1.20050|
;;;7811   				//if(in==0)plazma_bat++;
;;;7812   				}
;;;7813   			}				
;;;7814   
;;;7815   		}
;;;7816   	}
;;;7817   
;;;7818   if(main_10Hz_cnt>200)
004e52  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7819   	{
;;;7820   	if(abs(bat[in]._Ib)>IKB) 
004e56  4e79              LDR      r6,|L1.20540|
004e58  28c8              CMP      r0,#0xc8              ;7818
004e5a  dd0f              BLE      |L1.20092|
004e5c  f9b40008          LDRSH    r0,[r4,#8]
004e60  f7fffffe          BL       abs
004e64  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004e68  4288              CMP      r0,r1
004e6a  dd07              BLE      |L1.20092|
;;;7821   		{
;;;7822   		if((bat[in]._av&1))avar_bat_hndl(in,0);
004e6c  f894003d          LDRB     r0,[r4,#0x3d]
004e70  07c0              LSLS     r0,r0,#31
004e72  d003              BEQ      |L1.20092|
004e74  2100              MOVS     r1,#0
004e76  4628              MOV      r0,r5
004e78  f7fffffe          BL       avar_bat_hndl
                  |L1.20092|
;;;7823   		}
;;;7824   	}
;;;7825   
;;;7826   #ifdef APSENERGIA
;;;7827   //if(bat[in]._Ib>(-IKB))
;;;7828   
;;;7829   
;;;7830   #endif
;;;7831   
;;;7832   if(bat[in]._Ib>(-IKB))
004e7c  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004e80  f9b40008          LDRSH    r0,[r4,#8]
004e84  4249              RSBS     r1,r1,#0
004e86  4288              CMP      r0,r1
004e88  dd0e              BLE      |L1.20136|
;;;7833   	{
;;;7834   	if(bat[in]._cnt_wrk<10)
004e8a  7b60              LDRB     r0,[r4,#0xd]
004e8c  280a              CMP      r0,#0xa
004e8e  d20c              BCS      |L1.20138|
;;;7835   		{
;;;7836   		bat[in]._cnt_wrk++;
004e90  f1000001          ADD      r0,r0,#1
004e94  b2c0              UXTB     r0,r0
004e96  7360              STRB     r0,[r4,#0xd]
;;;7837   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004e98  280a              CMP      r0,#0xa
004e9a  d307              BCC      |L1.20140|
004e9c  7ba0              LDRB     r0,[r4,#0xe]
004e9e  2800              CMP      r0,#0
004ea0  d004              BEQ      |L1.20140|
;;;7838   			{
;;;7839   			bat[in]._wrk=0;
004ea2  73a7              STRB     r7,[r4,#0xe]
;;;7840   			//beep_init(0x7L,'O');
;;;7841   			//wrk_mem_hndl(0);
;;;7842   			wrk_mem_hndl(in);
004ea4  4628              MOV      r0,r5
004ea6  e0cb              B        |L1.20544|
                  |L1.20136|
004ea8  e0d1              B        |L1.20558|
                  |L1.20138|
004eaa  e0cc              B        |L1.20550|
                  |L1.20140|
004eac  e111              B        |L1.20690|
004eae  0000              DCW      0x0000
                  |L1.20144|
                          DCD      eb2_data_short
                  |L1.20148|
                          DCD      avt_stat
                  |L1.20152|
                          DCD      avt_stat_old
                  |L1.20156|
                          DCD      NUMAVT
                  |L1.20160|
004ec0  4176746f          DCB      "Avtomat #1 is OFF",0
004ec4  6d617420
004ec8  23312069
004ecc  73204f46
004ed0  4600    
004ed2  00                DCB      0
004ed3  00                DCB      0
                  |L1.20180|
004ed4  4176746f          DCB      "Avtomat #2 is OFF",0
004ed8  6d617420
004edc  23322069
004ee0  73204f46
004ee4  4600    
004ee6  00                DCB      0
004ee7  00                DCB      0
                  |L1.20200|
004ee8  4176746f          DCB      "Avtomat #3 is OFF",0
004eec  6d617420
004ef0  23332069
004ef4  73204f46
004ef8  4600    
004efa  00                DCB      0
004efb  00                DCB      0
                  |L1.20220|
004efc  4176746f          DCB      "Avtomat #4 is OFF",0
004f00  6d617420
004f04  23342069
004f08  73204f46
004f0c  4600    
004f0e  00                DCB      0
004f0f  00                DCB      0
                  |L1.20240|
004f10  4176746f          DCB      "Avtomat #5 is OFF",0
004f14  6d617420
004f18  23352069
004f1c  73204f46
004f20  4600    
004f22  00                DCB      0
004f23  00                DCB      0
                  |L1.20260|
004f24  4176746f          DCB      "Avtomat #6 is OFF",0
004f28  6d617420
004f2c  23362069
004f30  73204f46
004f34  4600    
004f36  00                DCB      0
004f37  00                DCB      0
                  |L1.20280|
004f38  4176746f          DCB      "Avtomat #7 is OFF",0
004f3c  6d617420
004f40  23372069
004f44  73204f46
004f48  4600    
004f4a  00                DCB      0
004f4b  00                DCB      0
                  |L1.20300|
004f4c  4176746f          DCB      "Avtomat #8 is OFF",0
004f50  6d617420
004f54  23382069
004f58  73204f46
004f5c  4600    
004f5e  00                DCB      0
004f5f  00                DCB      0
                  |L1.20320|
004f60  4176746f          DCB      "Avtomat #9 is OFF",0
004f64  6d617420
004f68  23392069
004f6c  73204f46
004f70  4600    
004f72  00                DCB      0
004f73  00                DCB      0
                  |L1.20340|
004f74  4176746f          DCB      "Avtomat #1 is ON ",0
004f78  6d617420
004f7c  23312069
004f80  73204f4e
004f84  2000    
004f86  00                DCB      0
004f87  00                DCB      0
                  |L1.20360|
004f88  4176746f          DCB      "Avtomat #2 is ON ",0
004f8c  6d617420
004f90  23322069
004f94  73204f4e
004f98  2000    
004f9a  00                DCB      0
004f9b  00                DCB      0
                  |L1.20380|
004f9c  4176746f          DCB      "Avtomat #3 is ON ",0
004fa0  6d617420
004fa4  23332069
004fa8  73204f4e
004fac  2000    
004fae  00                DCB      0
004faf  00                DCB      0
                  |L1.20400|
004fb0  4176746f          DCB      "Avtomat #4 is ON ",0
004fb4  6d617420
004fb8  23342069
004fbc  73204f4e
004fc0  2000    
004fc2  00                DCB      0
004fc3  00                DCB      0
                  |L1.20420|
004fc4  4176746f          DCB      "Avtomat #5 is ON ",0
004fc8  6d617420
004fcc  23352069
004fd0  73204f4e
004fd4  2000    
004fd6  00                DCB      0
004fd7  00                DCB      0
                  |L1.20440|
004fd8  4176746f          DCB      "Avtomat #6 is ON ",0
004fdc  6d617420
004fe0  23362069
004fe4  73204f4e
004fe8  2000    
004fea  00                DCB      0
004feb  00                DCB      0
                  |L1.20460|
004fec  4176746f          DCB      "Avtomat #7 is ON ",0
004ff0  6d617420
004ff4  23372069
004ff8  73204f4e
004ffc  2000    
004ffe  00                DCB      0
004fff  00                DCB      0
                  |L1.20480|
005000  4176746f          DCB      "Avtomat #8 is ON ",0
005004  6d617420
005008  23382069
00500c  73204f4e
005010  2000    
005012  00                DCB      0
005013  00                DCB      0
                  |L1.20500|
005014  4176746f          DCB      "Avtomat #9 is ON ",0
005018  6d617420
00501c  23392069
005020  73204f4e
005024  2000    
005026  00                DCB      0
005027  00                DCB      0
                  |L1.20520|
                          DCD      bat
                  |L1.20524|
                          DCD      mess_data
                  |L1.20528|
                          DCD      ||area_number.25||+0xb0
                  |L1.20532|
                          DCD      IZMAX
                  |L1.20536|
                          DCD      main_10Hz_cnt
                  |L1.20540|
                          DCD      IKB
                  |L1.20544|
005040  f7fffffe          BL       wrk_mem_hndl
005044  e069              B        |L1.20762|
                  |L1.20550|
;;;7843   			//plazma++;
;;;7844   			}
;;;7845   		}
;;;7846   	else bat[in]._cnt_wrk=10;	
005046  f04f000a          MOV      r0,#0xa
00504a  7360              STRB     r0,[r4,#0xd]
00504c  e065              B        |L1.20762|
                  |L1.20558|
;;;7847   	}	
;;;7848   
;;;7849   else if(bat[in]._Ib<(-IKB))
00504e  da64              BGE      |L1.20762|
;;;7850   	{
;;;7851   	if(bat[in]._cnt_wrk)
005050  7b60              LDRB     r0,[r4,#0xd]
005052  b3f0              CBZ      r0,|L1.20690|
;;;7852   		{
;;;7853   		bat[in]._cnt_wrk--;
005054  f1a00001          SUB      r0,r0,#1
005058  b2c0              UXTB     r0,r0
00505a  7360              STRB     r0,[r4,#0xd]
;;;7854   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
00505c  bbc8              CBNZ     r0,|L1.20690|
00505e  7ba0              LDRB     r0,[r4,#0xe]
005060  bbb8              CBNZ     r0,|L1.20690|
;;;7855   			{
;;;7856   			bat[in]._wrk=1;
005062  f04f0001          MOV      r0,#1
005066  73a0              STRB     r0,[r4,#0xe]
;;;7857   
;;;7858   				{
;;;7859   				char temp;
;;;7860   				signed short temp_temp;
;;;7861   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
005068  48ff              LDR      r0,|L1.21608|
00506a  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
00506c  f1000001          ADD      r0,r0,#1
005070  f0000007          AND      r0,r0,#7
005074  eb040040          ADD      r0,r4,r0,LSL #1
005078  8c00              LDRH     r0,[r0,#0x20]
00507a  9000              STR      r0,[sp,#0]
;;;7862   			 
;;;7863   				temp=LPC_RTC->YEAR;
00507c  4efb              LDR      r6,|L1.21612|
00507e  8bb0              LDRH     r0,[r6,#0x1c]
005080  9001              STR      r0,[sp,#4]
;;;7864   				gran_char((signed char*)&temp,1,99);
005082  f04f0263          MOV      r2,#0x63
005086  f04f0101          MOV      r1,#1
00508a  a801              ADD      r0,sp,#4
00508c  f7fffffe          BL       gran_char
;;;7865   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
005090  f104041c          ADD      r4,r4,#0x1c
005094  f89d0004          LDRB     r0,[sp,#4]
005098  7620              STRB     r0,[r4,#0x18]
;;;7866   			
;;;7867   				temp=LPC_RTC->MONTH;
00509a  7e30              LDRB     r0,[r6,#0x18]
00509c  9001              STR      r0,[sp,#4]
;;;7868   				gran_char((signed char*)&temp,1,12);
00509e  f04f020c          MOV      r2,#0xc
0050a2  f04f0101          MOV      r1,#1
0050a6  a801              ADD      r0,sp,#4
0050a8  f7fffffe          BL       gran_char
;;;7869   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
0050ac  f89d0004          LDRB     r0,[sp,#4]
0050b0  7660              STRB     r0,[r4,#0x19]
;;;7870   			
;;;7871   				temp=LPC_RTC->DOM;
0050b2  7b30              LDRB     r0,[r6,#0xc]
0050b4  9001              STR      r0,[sp,#4]
;;;7872   				gran_char((signed char*)&temp,1,31);
0050b6  221f              MOVS     r2,#0x1f
0050b8  2101              MOVS     r1,#1
0050ba  a801              ADD      r0,sp,#4
0050bc  f7fffffe          BL       gran_char
;;;7873   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
0050c0  f89d0004          LDRB     r0,[sp,#4]
0050c4  76a0              STRB     r0,[r4,#0x1a]
;;;7874   				
;;;7875   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
0050c6  f89d0000          LDRB     r0,[sp,#0]
0050ca  76e0              STRB     r0,[r4,#0x1b]
;;;7876   
;;;7877   				temp=LPC_RTC->HOUR;
0050cc  7a30              LDRB     r0,[r6,#8]
0050ce  9001              STR      r0,[sp,#4]
;;;7878   				gran_char((signed char*)&temp,0,23);
0050d0  e000              B        |L1.20692|
                  |L1.20690|
0050d2  e022              B        |L1.20762|
                  |L1.20692|
0050d4  2217              MOVS     r2,#0x17
0050d6  2100              MOVS     r1,#0
0050d8  a801              ADD      r0,sp,#4
0050da  f7fffffe          BL       gran_char
;;;7879   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
0050de  f89d0004          LDRB     r0,[sp,#4]
0050e2  7720              STRB     r0,[r4,#0x1c]
;;;7880                  	
;;;7881   				temp=LPC_RTC->MIN;
0050e4  7930              LDRB     r0,[r6,#4]
0050e6  9001              STR      r0,[sp,#4]
;;;7882   				gran_char((signed char*)&temp,0,59);
0050e8  223b              MOVS     r2,#0x3b
0050ea  2100              MOVS     r1,#0
0050ec  a801              ADD      r0,sp,#4
0050ee  f7fffffe          BL       gran_char
;;;7883   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
0050f2  f89d0004          LDRB     r0,[sp,#4]
0050f6  7760              STRB     r0,[r4,#0x1d]
;;;7884   	          
;;;7885   				temp=LPC_RTC->SEC;
0050f8  7830              LDRB     r0,[r6,#0]
0050fa  9001              STR      r0,[sp,#4]
;;;7886   				gran_char((signed char*)&temp,0,59);
0050fc  223b              MOVS     r2,#0x3b
0050fe  2100              MOVS     r1,#0
005100  a801              ADD      r0,sp,#4
005102  f7fffffe          BL       gran_char
;;;7887   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
005106  f89d0004          LDRB     r0,[sp,#4]
00510a  77a0              STRB     r0,[r4,#0x1e]
;;;7888   			
;;;7889   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
00510c  f89d0001          LDRB     r0,[sp,#1]
005110  77e0              STRB     r0,[r4,#0x1f]
;;;7890   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005112  8027              STRH     r7,[r4,#0]
;;;7891   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
005114  8067              STRH     r7,[r4,#2]
005116  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.20762|
;;;7892   				}
;;;7893   	
;;;7894   			}
;;;7895   
;;;7896   		}
;;;7897   	else bat[in]._cnt_wrk=0;	 
;;;7898   	
;;;7899   	}					
;;;7900   
;;;7901   /*
;;;7902   if(Ibat>=(-IKB))
;;;7903   	{
;;;7904   	if(cnt_wrk<10)
;;;7905   		{
;;;7906   		cnt_wrk++;
;;;7907   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7908   			{
;;;7909   			wrk=wrkOFF;
;;;7910   			//beep_init(0x7L,'O');
;;;7911   			wrk_mem_hndl(ibat_integr);
;;;7912   			}
;;;7913   		}
;;;7914   	else cnt_wrk=10;	
;;;7915   	}	
;;;7916   
;;;7917   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;7918   	{
;;;7919   	if(cnt_wrk)
;;;7920   		{
;;;7921   		cnt_wrk--;
;;;7922   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7923   			{
;;;7924   			char temp;
;;;7925   			signed short temp_temp;
;;;7926   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7927   			 
;;;7928   			wrk=wrkON;
;;;7929   			
;;;7930   			temp=_year;
;;;7931   			gran_char(&temp,1,99);
;;;7932   			*((char*)(&(wrk_date[0])))=temp;
;;;7933   			
;;;7934   			temp=_month;
;;;7935   			gran_char(&temp,1,12);
;;;7936   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7937   			
;;;7938   			temp=_date;
;;;7939   			gran_char(&temp,1,31);
;;;7940   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7941   				
;;;7942   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7943   
;;;7944   			temp=_hour;
;;;7945   			gran_char(&temp,0,23);
;;;7946   			*((char*)(&(wrk_date[1])))=temp;
;;;7947                  
;;;7948   			temp=_min;
;;;7949   			gran_char(&temp,0,59);
;;;7950   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7951   	          
;;;7952   			temp=_sec;
;;;7953   			gran_char(&temp,0,59);
;;;7954   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7955   			
;;;7956   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7957   
;;;7958   			
;;;7959   			//beep_init(0xFL,'O'); 
;;;7960   			ibat_integr=0;
;;;7961   			ibat_integr_=0;
;;;7962   			}
;;;7963   		}
;;;7964   	else cnt_wrk=0;	 
;;;7965   	
;;;7966   	}
;;;7967   if(wrk==wrkON)
;;;7968   	{
;;;7969   	ibat_integr_+=-Ibat;
;;;7970   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7971   		{
;;;7972   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7973   		ibat_integr++;
;;;7974   		}
;;;7975   	}
;;;7976   
;;;7977   */
;;;7978   
;;;7979   
;;;7980   /*if(bat[in]._cnt_to_block)
;;;7981   	{
;;;7982   	bat[in]._cnt_to_block--;
;;;7983   	if(!(bat[in]._cnt_to_block))
;;;7984   		{
;;;7985   		//bat[in]._rel_stat=1;
;;;7986   		}
;;;7987   	}
;;;7988   */
;;;7989   
;;;7990   
;;;7991   
;;;7992   
;;;7993   //unsigned int tempUI,tempUI_;
;;;7994   //unsigned int b_zar; 
;;;7995   //char i;
;;;7996   //Ibat[0]=5000;                     
;;;7997   
;;;7998   
;;;7999                               
;;;8000   if(bat[in]._time_cnt==0)
;;;8001   	{
;;;8002   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8003   	
;;;8004   	if(bat[in]._zar_cnt>=AH_CONSTANT)
00511a  f64848a0          MOV      r8,#0x8ca0
00511e  f894003e          LDRB     r0,[r4,#0x3e]         ;8000
005122  bba8              CBNZ     r0,|L1.20880|
005124  f9b41008          LDRSH    r1,[r4,#8]            ;8002
005128  6960              LDR      r0,[r4,#0x14]         ;8002
00512a  4408              ADD      r0,r0,r1              ;8002
00512c  6160              STR      r0,[r4,#0x14]         ;8002
;;;8005   		{
;;;8006   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8007   		else tempUS_=BAT_C_REAL[in];
;;;8008   		
;;;8009   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00512e  f8df9340          LDR      r9,|L1.21616|
005132  f8dfa340          LDR      r10,|L1.21620|
005136  f2455b55          MOV      r11,#0x5555           ;8006
00513a  4540              CMP      r0,r8                 ;8004
00513c  db29              BLT      |L1.20882|
00513e  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8006
005142  4558              CMP      r0,r11                ;8006
005144  d103              BNE      |L1.20814|
005146  48cc              LDR      r0,|L1.21624|
005148  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8006
00514c  e001              B        |L1.20818|
                  |L1.20814|
00514e  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8007
                  |L1.20818|
005152  f8390015          LDRH     r0,[r9,r5,LSL #1]
005156  f7fffffe          BL       lc640_read_int
00515a  b280              UXTH     r0,r0
;;;8010   
;;;8011   		if(b_zar<(tempUS_/**10*/))
00515c  42b0              CMP      r0,r6
00515e  d20e              BCS      |L1.20862|
;;;8012   			{
;;;8013   			bat[in]._zar_cnt-=AH_CONSTANT;
005160  6961              LDR      r1,[r4,#0x14]
005162  f5a14100          SUB      r1,r1,#0x8000
005166  f5a1614a          SUB      r1,r1,#0xca0
00516a  6161              STR      r1,[r4,#0x14]
;;;8014   
;;;8015   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
00516c  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005170  f1000001          ADD      r0,r0,#1
005174  b201              SXTH     r1,r0
005176  4610              MOV      r0,r2
005178  f7fffffe          BL       lc640_write_int
00517c  e032              B        |L1.20964|
                  |L1.20862|
;;;8016   			}
;;;8017   		else if(b_zar>(tempUS_/**10*/))  
00517e  d931              BLS      |L1.20964|
;;;8018   			{
;;;8019   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005180  f9390015          LDRSH    r0,[r9,r5,LSL #1]
005184  b231              SXTH     r1,r6
005186  f7fffffe          BL       lc640_write_int
;;;8020   			bat[in]._zar_cnt=AH_CONSTANT;
00518a  f8c48014          STR      r8,[r4,#0x14]
00518e  e029              B        |L1.20964|
                  |L1.20880|
005190  e054              B        |L1.21052|
                  |L1.20882|
;;;8021   
;;;8022   			}
;;;8023   
;;;8024   		}
;;;8025   
;;;8026   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
005192  49ba              LDR      r1,|L1.21628|
005194  4288              CMP      r0,r1
005196  dc25              BGT      |L1.20964|
;;;8027   		{
;;;8028   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
005198  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
00519c  4558              CMP      r0,r11
00519e  d103              BNE      |L1.20904|
0051a0  48b5              LDR      r0,|L1.21624|
0051a2  f8306015          LDRH     r6,[r0,r5,LSL #1]
0051a6  e001              B        |L1.20908|
                  |L1.20904|
;;;8029   		else tempUS_=BAT_C_REAL[in];
0051a8  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.20908|
;;;8030   		
;;;8031   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0051ac  f8390015          LDRH     r0,[r9,r5,LSL #1]
0051b0  f7fffffe          BL       lc640_read_int
0051b4  b280              UXTH     r0,r0
;;;8032   
;;;8033   		if(b_zar>tempUS_)
0051b6  42b0              CMP      r0,r6
0051b8  d905              BLS      |L1.20934|
;;;8034   			{
;;;8035   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0051ba  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0051be  b231              SXTH     r1,r6
0051c0  f7fffffe          BL       lc640_write_int
;;;8036   			b_zar=tempUS_;
0051c4  4630              MOV      r0,r6
                  |L1.20934|
;;;8037   			}
;;;8038   		if(b_zar)
0051c6  b158              CBZ      r0,|L1.20960|
;;;8039   			{
;;;8040   			bat[in]._zar_cnt+=AH_CONSTANT;
0051c8  6961              LDR      r1,[r4,#0x14]
0051ca  4441              ADD      r1,r1,r8
0051cc  6161              STR      r1,[r4,#0x14]
;;;8041   
;;;8042   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
0051ce  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0051d2  f1a00001          SUB      r0,r0,#1
0051d6  b201              SXTH     r1,r0
0051d8  4610              MOV      r0,r2
0051da  f7fffffe          BL       lc640_write_int
0051de  e001              B        |L1.20964|
                  |L1.20960|
;;;8043   			}
;;;8044   		else 
;;;8045   			{
;;;8046   			bat[in]._zar_cnt=-AH_CONSTANT;
0051e0  48a6              LDR      r0,|L1.21628|
0051e2  6160              STR      r0,[r4,#0x14]
                  |L1.20964|
;;;8047   			}
;;;8048   
;;;8049   		}
;;;8050   
;;;8051   			
;;;8052   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0051e4  f8390015          LDRH     r0,[r9,r5,LSL #1]
0051e8  f7fffffe          BL       lc640_read_int
0051ec  4601              MOV      r1,r0
;;;8053   	
;;;8054   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
0051ee  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0051f2  4558              CMP      r0,r11
0051f4  d102              BNE      |L1.20988|
0051f6  48a0              LDR      r0,|L1.21624|
0051f8  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.20988|
;;;8055   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8056   		           	
;;;8057   	tempUL*=1000L;
0051fc  f44f727a          MOV      r2,#0x3e8
005200  fb01f102          MUL      r1,r1,r2
;;;8058   
;;;8059   
;;;8060   	if(tempUL_==0) tempUL=0;
005204  b158              CBZ      r0,|L1.21022|
;;;8061   	else tempUL/=tempUL_;
005206  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21002|
;;;8062   
;;;8063   	tempUL/=10L;
00520a  f04f010a          MOV      r1,#0xa
00520e  fbb0f0f1          UDIV     r0,r0,r1
;;;8064   
;;;8065   	bat[in]._zar=(unsigned short)tempUL;
005212  8220              STRH     r0,[r4,#0x10]
;;;8066   
;;;8067   	if(BAT_TYPE==1)
005214  489a              LDR      r0,|L1.21632|
005216  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
005218  2801              CMP      r0,#1
00521a  d003              BEQ      |L1.21028|
00521c  e008              B        |L1.21040|
                  |L1.21022|
00521e  f04f0000          MOV      r0,#0                 ;8060
005222  e7f2              B        |L1.21002|
                  |L1.21028|
;;;8068   		{
;;;8069   		bat[in]._zar=lakb[in]._s_o_c;
005224  4997              LDR      r1,|L1.21636|
005226  9802              LDR      r0,[sp,#8]
005228  eb010080          ADD      r0,r1,r0,LSL #2
00522c  8a40              LDRH     r0,[r0,#0x12]
00522e  8220              STRH     r0,[r4,#0x10]
                  |L1.21040|
;;;8070   		}
;;;8071   	
;;;8072   	gran((signed short*)&bat[in]._zar,0,100);
005230  f1040010          ADD      r0,r4,#0x10
005234  2264              MOVS     r2,#0x64
005236  2100              MOVS     r1,#0
005238  f7fffffe          BL       gran
                  |L1.21052|
;;;8073        }
;;;8074   
;;;8075   
;;;8076   //Подсчет тока разряда батареи      
;;;8077   if(bat[in]._wrk==1)
00523c  7ba0              LDRB     r0,[r4,#0xe]
00523e  2801              CMP      r0,#1
005240  d113              BNE      |L1.21098|
;;;8078   	{
;;;8079   	if(bat[in]._Iintegr<36000)
005242  8ba0              LDRH     r0,[r4,#0x1c]
005244  4540              CMP      r0,r8
005246  d20f              BCS      |L1.21096|
;;;8080   		{          
;;;8081   		bat[in]._Iintegr+=abs(bat[in]._Ib);
005248  f9b40008          LDRSH    r0,[r4,#8]
00524c  f7fffffe          BL       abs
005250  8ba1              LDRH     r1,[r4,#0x1c]
005252  4408              ADD      r0,r0,r1
005254  b280              UXTH     r0,r0
005256  83a0              STRH     r0,[r4,#0x1c]
;;;8082   		if(bat[in]._Iintegr>=36000)
005258  4540              CMP      r0,r8
00525a  d306              BCC      |L1.21098|
;;;8083   			{
;;;8084   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
00525c  83a7              STRH     r7,[r4,#0x1c]
;;;8085   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
00525e  8be0              LDRH     r0,[r4,#0x1e]
005260  f1000001          ADD      r0,r0,#1
005264  83e0              STRH     r0,[r4,#0x1e]
005266  e000              B        |L1.21098|
                  |L1.21096|
;;;8086   			}
;;;8087   		}
;;;8088   	else 
;;;8089   		{
;;;8090   		bat[in]._Iintegr=0;
005268  83a7              STRH     r7,[r4,#0x1c]
                  |L1.21098|
;;;8091   		}	
;;;8092   	} 
;;;8093   	    
;;;8094   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8095   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
00526a  4e87              LDR      r6,|L1.21640|
00526c  4987              LDR      r1,|L1.21644|
00526e  f8df9220          LDR      r9,|L1.21648|
005272  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
005276  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
00527a  4288              CMP      r0,r1
00527c  dd02              BLE      |L1.21124|
00527e  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
005282  b380              CBZ      r0,|L1.21222|
                  |L1.21124|
;;;8096   	{
;;;8097   	bat[in]._sign_temper_cnt++;
;;;8098   	}
;;;8099   else 
;;;8100   	{
;;;8101   	bat[in]._sign_temper_cnt--;
005284  f8b40040          LDRH     r0,[r4,#0x40]
005288  f1a00001          SUB      r0,r0,#1
00528c  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.21136|
;;;8102   	}
;;;8103   #else
;;;8104   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8105   	{
;;;8106   	bat[in]._sign_temper_cnt++;
;;;8107   	}
;;;8108   else 
;;;8109   	{
;;;8110   	bat[in]._sign_temper_cnt--;
;;;8111   	}
;;;8112   #endif
;;;8113   gran(&bat[in]._sign_temper_cnt,0,600);
005290  f44f7b16          MOV      r11,#0x258
005294  f1040040          ADD      r0,r4,#0x40
005298  465a              MOV      r2,r11
00529a  2100              MOVS     r1,#0
00529c  f7fffffe          BL       gran
;;;8114   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
0052a0  f9b40040          LDRSH    r0,[r4,#0x40]
0052a4  f2402a4e          MOV      r10,#0x24e
0052a8  4550              CMP      r0,r10
0052aa  db05              BLT      |L1.21176|
0052ac  f894103f          LDRB     r1,[r4,#0x3f]
0052b0  f0410101          ORR      r1,r1,#1
0052b4  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21176|
;;;8115   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
0052b8  280a              CMP      r0,#0xa
0052ba  dc05              BGT      |L1.21192|
0052bc  f894003f          LDRB     r0,[r4,#0x3f]
0052c0  f0200001          BIC      r0,r0,#1
0052c4  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21192|
;;;8116   
;;;8117   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
0052c8  f894003f          LDRB     r0,[r4,#0x3f]
0052cc  07c1              LSLS     r1,r0,#31
0052ce  d005              BEQ      |L1.21212|
0052d0  06c0              LSLS     r0,r0,#27
0052d2  d403              BMI      |L1.21212|
0052d4  2101              MOVS     r1,#1
0052d6  4628              MOV      r0,r5
0052d8  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21212|
;;;8118   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
0052dc  f894003f          LDRB     r0,[r4,#0x3f]
0052e0  07c1              LSLS     r1,r0,#31
0052e2  d008              BEQ      |L1.21238|
0052e4  e00d              B        |L1.21250|
                  |L1.21222|
0052e6  e7ff              B        |L1.21224|
                  |L1.21224|
0052e8  f8b40040          LDRH     r0,[r4,#0x40]         ;8097
0052ec  f1000001          ADD      r0,r0,#1              ;8097
0052f0  f8a40040          STRH     r0,[r4,#0x40]         ;8097
0052f4  e7cc              B        |L1.21136|
                  |L1.21238|
0052f6  06c0              LSLS     r0,r0,#27
0052f8  d503              BPL      |L1.21250|
0052fa  2100              MOVS     r1,#0
0052fc  4628              MOV      r0,r5
0052fe  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21250|
;;;8119   
;;;8120   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
005302  f894003f          LDRB     r0,[r4,#0x3f]
005306  07c1              LSLS     r1,r0,#31
005308  d004              BEQ      |L1.21268|
00530a  f0400010          ORR      r0,r0,#0x10
00530e  f884003f          STRB     r0,[r4,#0x3f]
005312  e003              B        |L1.21276|
                  |L1.21268|
;;;8121   else 								bat[in]._temper_stat&=~(1<<4);
005314  f0200010          BIC      r0,r0,#0x10
005318  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21276|
;;;8122   
;;;8123   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8124   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
00531c  495d              LDR      r1,|L1.21652|
00531e  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
005322  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
005326  4288              CMP      r0,r1
005328  dd02              BLE      |L1.21296|
00532a  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00532e  b3d0              CBZ      r0,|L1.21414|
                  |L1.21296|
;;;8125   	{
;;;8126   	bat[in]._max_temper_cnt++;
;;;8127   	}
;;;8128   else 
;;;8129   	{
;;;8130   	bat[in]._max_temper_cnt--;
005330  f8b40042          LDRH     r0,[r4,#0x42]
005334  f1a00001          SUB      r0,r0,#1
005338  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21308|
;;;8131   	}
;;;8132   #else
;;;8133   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8134   	{
;;;8135   	bat[in]._max_temper_cnt++;
;;;8136   	}
;;;8137   else 
;;;8138   	{
;;;8139   	bat[in]._max_temper_cnt--;
;;;8140   	}
;;;8141   #endif
;;;8142   
;;;8143   gran(&bat[in]._max_temper_cnt,0,600);
00533c  f1040042          ADD      r0,r4,#0x42
005340  465a              MOV      r2,r11
005342  2100              MOVS     r1,#0
005344  f7fffffe          BL       gran
;;;8144   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
005348  f9b40042          LDRSH    r0,[r4,#0x42]
00534c  4550              CMP      r0,r10
00534e  db05              BLT      |L1.21340|
005350  f894103f          LDRB     r1,[r4,#0x3f]
005354  f0410102          ORR      r1,r1,#2
005358  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21340|
;;;8145   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
00535c  280a              CMP      r0,#0xa
00535e  dc05              BGT      |L1.21356|
005360  f894003f          LDRB     r0,[r4,#0x3f]
005364  f0200002          BIC      r0,r0,#2
005368  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21356|
;;;8146   
;;;8147   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
00536c  f894003f          LDRB     r0,[r4,#0x3f]
005370  0781              LSLS     r1,r0,#30
005372  d505              BPL      |L1.21376|
005374  0680              LSLS     r0,r0,#26
005376  d403              BMI      |L1.21376|
005378  2103              MOVS     r1,#3
00537a  4628              MOV      r0,r5
00537c  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21376|
;;;8148   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
005380  f894003f          LDRB     r0,[r4,#0x3f]
005384  0781              LSLS     r1,r0,#30
005386  d405              BMI      |L1.21396|
005388  0680              LSLS     r0,r0,#26
00538a  d503              BPL      |L1.21396|
00538c  2102              MOVS     r1,#2
00538e  4628              MOV      r0,r5
005390  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21396|
;;;8149   
;;;8150   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
005394  f894003f          LDRB     r0,[r4,#0x3f]
005398  0781              LSLS     r1,r0,#30
00539a  d50c              BPL      |L1.21430|
00539c  f0400020          ORR      r0,r0,#0x20
0053a0  f884003f          STRB     r0,[r4,#0x3f]
0053a4  e00b              B        |L1.21438|
                  |L1.21414|
0053a6  e7ff              B        |L1.21416|
                  |L1.21416|
0053a8  f8b40042          LDRH     r0,[r4,#0x42]         ;8126
0053ac  f1000001          ADD      r0,r0,#1              ;8126
0053b0  f8a40042          STRH     r0,[r4,#0x42]         ;8126
0053b4  e7c2              B        |L1.21308|
                  |L1.21430|
;;;8151   else 								bat[in]._temper_stat&=~(1<<5);
0053b6  f0200020          BIC      r0,r0,#0x20
0053ba  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21438|
;;;8152   
;;;8153   //Подсчет наработки батареи
;;;8154   if(bat[in]._resurs_cnt<36000)
0053be  6c60              LDR      r0,[r4,#0x44]
0053c0  4540              CMP      r0,r8
0053c2  da13              BGE      |L1.21484|
;;;8155   	{               
;;;8156   	bat[in]._resurs_cnt++;
0053c4  f1000001          ADD      r0,r0,#1
0053c8  6460              STR      r0,[r4,#0x44]
;;;8157   	if(bat[in]._resurs_cnt>=36000)
0053ca  4540              CMP      r0,r8
0053cc  db0f              BLT      |L1.21486|
;;;8158   		{
;;;8159   		bat[in]._resurs_cnt=0;
0053ce  6467              STR      r7,[r4,#0x44]
;;;8160   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0053d0  4c31              LDR      r4,|L1.21656|
0053d2  f8340015          LDRH     r0,[r4,r5,LSL #1]
0053d6  f7fffffe          BL       lc640_read_int
0053da  1c40              ADDS     r0,r0,#1
0053dc  b201              SXTH     r1,r0
0053de  f9340015          LDRSH    r0,[r4,r5,LSL #1]
0053e2  b003              ADD      sp,sp,#0xc
0053e4  e8bd4ff0          POP      {r4-r11,lr}
0053e8  f7ffbffe          B.W      lc640_write_int
                  |L1.21484|
;;;8161   		}
;;;8162   	}
;;;8163   else bat[in]._resurs_cnt=0;
0053ec  6467              STR      r7,[r4,#0x44]
                  |L1.21486|
;;;8164   
;;;8165   
;;;8166   #ifndef UKU_220_V2
;;;8167   #ifndef UKU_GLONASS
;;;8168   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8169   //#ifndef UKU_6U
;;;8170   //#ifndef UKU_220
;;;8171   if(UBM_AV)
;;;8172        {
;;;8173        signed short temp_SS;
;;;8174   #ifdef UKU_220
;;;8175   temp_SS=bat[in]._Ub/2;
;;;8176   #else
;;;8177        if(U0B<600)
;;;8178             {
;;;8179   
;;;8180             temp_SS=bat[in]._Ub/4;
;;;8181             }
;;;8182        else temp_SS=bat[in]._Ub/5;
;;;8183   	
;;;8184   	temp_SS+=temp_SS;     
;;;8185   #endif
;;;8186        temp_SS-=(bat[in]._Ubm);
;;;8187   
;;;8188        temp_SS=abs(temp_SS);
;;;8189   
;;;8190        temp_SS*=10;
;;;8191   
;;;8192        temp_SS/=12;
;;;8193   
;;;8194        bat[in]._dUbm=temp_SS;
;;;8195   
;;;8196   
;;;8197        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8198   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8199   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8200   		(!(bat[in]._av & 2))  )
;;;8201   		{
;;;8202   		bat[in]._cnt_as++;
;;;8203   		if(bat[in]._cnt_as==3000)
;;;8204   			{
;;;8205   			avar_bat_as_hndl(in,1);
;;;8206   			}
;;;8207   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8208   		}
;;;8209   	else 
;;;8210   		{
;;;8211   		if(bat[in]._cnt_as)
;;;8212   			{
;;;8213   			bat[in]._cnt_as--;
;;;8214   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8215   			}
;;;8216   		}
;;;8217        
;;;8218        }
;;;8219   //#endif 
;;;8220   #endif 
;;;8221   #endif
;;;8222   #endif
;;;8223   
;;;8224   }
0053ee  e8bd8ffe          POP      {r1-r11,pc}
;;;8225   
                          ENDP

                  bat_hndl_zvu PROC
;;;8227   //-----------------------------------------------
;;;8228   void bat_hndl_zvu(void)
0053f2  e92d4ff0          PUSH     {r4-r11,lr}
;;;8229   {
0053f6  b089              SUB      sp,sp,#0x24
;;;8230   char i;
;;;8231   short bat_hndl_i_temp;
;;;8232   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
0053f8  f04f021c          MOV      r2,#0x1c
0053fc  4927              LDR      r1,|L1.21660|
0053fe  4668              MOV      r0,sp
005400  f7fffffe          BL       __aeabi_memcpy4
;;;8233   
;;;8234   //Ib_ips_termokompensat=-17000;
;;;8235    
;;;8236   if(bat_hndl_zvu_init==0)
005404  4c26              LDR      r4,|L1.21664|
;;;8237   	{
;;;8238   	//Инициализация при включении системы
;;;8239   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8240   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
005406  2564              MOVS     r5,#0x64
;;;8241   	bat_hndl_zvu_Q*=10000L;
;;;8242   
;;;8243   	bat_hndl_zvu_init=1;
;;;8244   	}
;;;8245   else 
;;;8246   	{
;;;8247   	if(Ib_ips_termokompensat<-IKB)
;;;8248   		{
;;;8249   		bat_hndl_i_vector=0;
;;;8250   		bat_hndl_i_zar_price=0L;
;;;8251   			
;;;8252   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8253   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8254   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8255   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8256   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8257   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8258   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8259   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8260   		
;;;8261   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8262   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8263   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8264   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8265   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8266   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8267   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8268   
;;;8269   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8270   		for(i=0;i<7;i++)
;;;8271   			{
;;;8272   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8273   				{
;;;8274   				break;
;;;8275   				}
;;;8276   			}
;;;8277   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8278   		 else if((i>=1)&&(i<7))
;;;8279   		 	{
;;;8280   			short i1,i2;
;;;8281   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8282   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8283   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8284   			bat_hndl_t_razr*=(long)i1;
;;;8285   			bat_hndl_t_razr/=(long)i2;
;;;8286   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8287   			}
;;;8288   		else if(i>=7)
;;;8289   			{
;;;8290   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8291   			}
;;;8292   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
005408  f8df8098          LDR      r8,|L1.21668|
00540c  7a60              LDRB     r0,[r4,#9]            ;8236  ; bat_hndl_zvu_init
00540e  2700              MOVS     r7,#0                 ;8236
005410  f04f0901          MOV      r9,#1                 ;8243
005414  f1040680          ADD      r6,r4,#0x80           ;8239
005418  2800              CMP      r0,#0                 ;8236
00541a  d07e              BEQ      |L1.21786|
00541c  4923              LDR      r1,|L1.21676|
00541e  4822              LDR      r0,|L1.21672|
005420  f9b12000          LDRSH    r2,[r1,#0]            ;8247  ; IKB
005424  4631              MOV      r1,r6                 ;8239
005426  f9b00000          LDRSH    r0,[r0,#0]            ;8247  ; Ib_ips_termokompensat
00542a  4253              RSBS     r3,r2,#0              ;8247
00542c  6d49              LDR      r1,[r1,#0x54]         ;8239
00542e  4298              CMP      r0,r3                 ;8247
005430  da74              BGE      |L1.21788|
005432  72e7              STRB     r7,[r4,#0xb]          ;8249
005434  6137              STR      r7,[r6,#0x10]         ;8250  ; bat_hndl_i_zar_price
005436  f1c00000          RSB      r0,r0,#0              ;8252
00543a  b200              SXTH     r0,r0                 ;8252
00543c  80b0              STRH     r0,[r6,#4]            ;8252
00543e  9008              STR      r0,[sp,#0x20]         ;8252
005440  481b              LDR      r0,|L1.21680|
005442  4a1c              LDR      r2,|L1.21684|
005444  8800              LDRH     r0,[r0,#0]            ;8253  ; BAT_C_POINT_1_6
005446  eb000040          ADD      r0,r0,r0,LSL #1       ;8253
00544a  ea4f0040          LSL      r0,r0,#1              ;8253
00544e  fa0ffb80          SXTH     r11,r0                ;8253
005452  4819              LDR      r0,|L1.21688|
005454  8800              LDRH     r0,[r0,#0]            ;8254  ; BAT_C_POINT_1_2
005456  ea4f0040          LSL      r0,r0,#1              ;8254
00545a  b203              SXTH     r3,r0                 ;8254
00545c  4817              LDR      r0,|L1.21692|
00545e  f9b0c000          LDRSH    r12,[r0,#0]           ;8255  ; BAT_C_POINT_1
005462  4817              LDR      r0,|L1.21696|
005464  e02e              B        |L1.21700|
005466  0000              DCW      0x0000
                  |L1.21608|
                          DCD      bat_u_old_cnt
                  |L1.21612|
                          DCD      0x40024020
                  |L1.21616|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.21620|
                          DCD      BAT_C_REAL
                  |L1.21624|
                          DCD      BAT_C_NOM
                  |L1.21628|
                          DCD      0xffff7360
                  |L1.21632|
                          DCD      BAT_TYPE
                  |L1.21636|
                          DCD      lakb
                  |L1.21640|
                          DCD      t_ext
                  |L1.21644|
                          DCD      TBATSIGN
                  |L1.21648|
                          DCD      ND_EXT
                  |L1.21652|
                          DCD      TBATMAX
                  |L1.21656|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.21660|
                          DCD      ||area_number.19||+0x20
                  |L1.21664|
                          DCD      ||area_number.25||
                  |L1.21668|
                          DCD      0x000f4240
                  |L1.21672|
                          DCD      Ib_ips_termokompensat
                  |L1.21676|
                          DCD      IKB
                  |L1.21680|
                          DCD      BAT_C_POINT_1_6
                  |L1.21684|
                          DCD      ||.bss||+0x44c
                  |L1.21688|
                          DCD      BAT_C_POINT_1_2
                  |L1.21692|
                          DCD      BAT_C_POINT_1
                  |L1.21696|
                          DCD      BAT_C_POINT_3
                  |L1.21700|
0054c4  f9b00000          LDRSH    r0,[r0,#0]            ;8256  ; BAT_C_POINT_3
0054c8  f04f0903          MOV      r9,#3                 ;8256
0054cc  fb90f0f9          SDIV     r0,r0,r9              ;8256
0054d0  b200              SXTH     r0,r0                 ;8256
0054d2  9007              STR      r0,[sp,#0x1c]         ;8256
0054d4  48ff              LDR      r0,|L1.22740|
0054d6  f04f0905          MOV      r9,#5                 ;8257
0054da  f9b00000          LDRSH    r0,[r0,#0]            ;8257  ; BAT_C_POINT_5
0054de  fb90f0f9          SDIV     r0,r0,r9              ;8257
0054e2  fa0ff980          SXTH     r9,r0                 ;8257
0054e6  48fc              LDR      r0,|L1.22744|
0054e8  f9b0a000          LDRSH    r10,[r0,#0]           ;8258  ; BAT_C_POINT_10
0054ec  f04f000a          MOV      r0,#0xa               ;8258
0054f0  fb9af0f0          SDIV     r0,r10,r0             ;8258
0054f4  fa0ffe80          SXTH     lr,r0                 ;8258
0054f8  48f8              LDR      r0,|L1.22748|
0054fa  f04f0a14          MOV      r10,#0x14             ;8259
0054fe  f9b00000          LDRSH    r0,[r0,#0]            ;8259  ; BAT_C_POINT_20
005502  fb90f0fa          SDIV     r0,r0,r10             ;8259
005506  fa0ffa80          SXTH     r10,r0                ;8259
00550a  48f5              LDR      r0,|L1.22752|
00550c  f9b00000          LDRSH    r0,[r0,#0]            ;8261  ; BAT_K_OLD
005510  fb0bfb00          MUL      r11,r11,r0            ;8261
005514  fb9bfbf5          SDIV     r11,r11,r5            ;8261
005518  e001              B        |L1.21790|
                  |L1.21786|
00551a  e04e              B        |L1.21946|
                  |L1.21788|
00551c  e082              B        |L1.22052|
                  |L1.21790|
00551e  f8a2b000          STRH     r11,[r2,#0]           ;8261
005522  fb03f300          MUL      r3,r3,r0              ;8262
005526  fb93f3f5          SDIV     r3,r3,r5              ;8262
00552a  8053              STRH     r3,[r2,#2]            ;8262
00552c  fb0cfc00          MUL      r12,r12,r0            ;8263
005530  fb9cf3f5          SDIV     r3,r12,r5             ;8263
005534  8093              STRH     r3,[r2,#4]            ;8263
005536  9b07              LDR      r3,[sp,#0x1c]         ;8264
005538  fb03f300          MUL      r3,r3,r0              ;8264
00553c  fb93f3f5          SDIV     r3,r3,r5              ;8264
005540  80d3              STRH     r3,[r2,#6]            ;8264
005542  fb09f900          MUL      r9,r9,r0              ;8265
005546  fb99f3f5          SDIV     r3,r9,r5              ;8265
00554a  8113              STRH     r3,[r2,#8]            ;8265
00554c  fb0efe00          MUL      lr,lr,r0              ;8266
005550  fb9ef3f5          SDIV     r3,lr,r5              ;8266
005554  8153              STRH     r3,[r2,#0xa]          ;8266
005556  fb0afa00          MUL      r10,r10,r0            ;8267
00555a  fb9af0f5          SDIV     r0,r10,r5             ;8267
00555e  8190              STRH     r0,[r2,#0xc]          ;8267
005560  9808              LDR      r0,[sp,#0x20]         ;8269
005562  f04f030a          MOV      r3,#0xa               ;8269
005566  fb90f0f3          SDIV     r0,r0,r3              ;8269
00556a  b203              SXTH     r3,r0                 ;8269
00556c  f04f0000          MOV      r0,#0                 ;8270
                  |L1.21872|
005570  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8272
005574  429d              CMP      r5,r3                 ;8272
005576  dd04              BLE      |L1.21890|
005578  f1000001          ADD      r0,r0,#1              ;8270
00557c  b2c0              UXTB     r0,r0                 ;8270
00557e  2807              CMP      r0,#7                 ;8270
005580  d3f6              BCC      |L1.21872|
                  |L1.21890|
005582  b358              CBZ      r0,|L1.21980|
005584  1e45              SUBS     r5,r0,#1              ;8278
005586  2d06              CMP      r5,#6                 ;8278
005588  d22b              BCS      |L1.21986|
00558a  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8281
00558e  ebac0303          SUB      r3,r12,r3             ;8281
005592  b21b              SXTH     r3,r3                 ;8281
005594  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8282
005598  ebac0202          SUB      r2,r12,r2             ;8282
00559c  fa0ffc82          SXTH     r12,r2                ;8282
0055a0  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8283
0055a4  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8283
0055a8  eba90200          SUB      r2,r9,r0              ;8283
0055ac  fb02f203          MUL      r2,r2,r3              ;8284
0055b0  fb92f2fc          SDIV     r2,r2,r12             ;8285
0055b4  4410              ADD      r0,r0,r2              ;8286
0055b6  64f0              STR      r0,[r6,#0x4c]         ;8286  ; bat_hndl_t_razr
0055b8  e017              B        |L1.21994|
                  |L1.21946|
0055ba  f44f70ef          MOV      r0,#0x1de             ;8239
0055be  f7fffffe          BL       lc640_read_int
0055c2  6570              STR      r0,[r6,#0x54]         ;8239  ; bat_hndl_zvu_Q
0055c4  2865              CMP      r0,#0x65              ;8240
0055c6  d300              BCC      |L1.21962|
0055c8  6575              STR      r5,[r6,#0x54]         ;8240  ; bat_hndl_zvu_Q
                  |L1.21962|
0055ca  6d70              LDR      r0,[r6,#0x54]         ;8241  ; bat_hndl_zvu_Q
0055cc  f2427110          MOV      r1,#0x2710            ;8241
0055d0  fb00f001          MUL      r0,r0,r1              ;8241
0055d4  6570              STR      r0,[r6,#0x54]         ;8241  ; bat_hndl_zvu_Q
0055d6  f8849009          STRB     r9,[r4,#9]            ;8243
0055da  e066              B        |L1.22186|
                  |L1.21980|
0055dc  9800              LDR      r0,[sp,#0]            ;8277
0055de  64f0              STR      r0,[r6,#0x4c]         ;8277  ; bat_hndl_t_razr
0055e0  e003              B        |L1.21994|
                  |L1.21986|
0055e2  2807              CMP      r0,#7                 ;8288
0055e4  d301              BCC      |L1.21994|
0055e6  9806              LDR      r0,[sp,#0x18]         ;8290
0055e8  64f0              STR      r0,[r6,#0x4c]         ;8290  ; bat_hndl_t_razr
                  |L1.21994|
0055ea  6cf0              LDR      r0,[r6,#0x4c]  ; bat_hndl_t_razr
0055ec  fb98f0f0          SDIV     r0,r8,r0
0055f0  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_proc_razr
;;;8293   
;;;8294   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
0055f2  4281              CMP      r1,r0
0055f4  dd03              BLE      |L1.22014|
0055f6  eba10000          SUB      r0,r1,r0
0055fa  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0055fc  e000              B        |L1.22016|
                  |L1.22014|
;;;8295   		else bat_hndl_zvu_Q=0L;
0055fe  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22016|
;;;8296   
;;;8297   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
005600  6df1              LDR      r1,[r6,#0x5c]  ; bat_hndl_remain_time
005602  f44f6061          MOV      r0,#0xe10
005606  fb91f0f0          SDIV     r0,r1,r0
00560a  80f0              STRH     r0,[r6,#6]
;;;8298   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
00560c  f04f003c          MOV      r0,#0x3c
005610  fb91f1f0          SDIV     r1,r1,r0
005614  b209              SXTH     r1,r1
005616  8131              STRH     r1,[r6,#8]
;;;8299   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
005618  fb91f2f0          SDIV     r2,r1,r0
00561c  fb001012          MLS      r0,r0,r2,r1
005620  8170              STRH     r0,[r6,#0xa]
005622  e016              B        |L1.22098|
                  |L1.22052|
;;;8300   
;;;8301   		}
;;;8302   	else if(Ib_ips_termokompensat>IKB)
005624  4290              CMP      r0,r2
005626  dd14              BLE      |L1.22098|
;;;8303   		{
;;;8304   		bat_hndl_i_vector=1;
005628  f884900b          STRB     r9,[r4,#0xb]
;;;8305   
;;;8306   		bat_hndl_i=Ib_ips_termokompensat;
00562c  80b0              STRH     r0,[r6,#4]
;;;8307   		bat_hndl_i_summ+=(long)bat_hndl_i;
00562e  6e72              LDR      r2,[r6,#0x64]  ; bat_hndl_i_summ
005630  4410              ADD      r0,r0,r2
005632  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8308   		if(bat_hndl_i_summ>=36000L)
005634  f64842a0          MOV      r2,#0x8ca0
005638  4290              CMP      r0,r2
00563a  db0a              BLT      |L1.22098|
;;;8309   
;;;8310   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8311   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8312   			{
;;;8313   			bat_hndl_i_summ-=36000L;
00563c  eba00002          SUB      r0,r0,r2
005640  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8314   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
005642  4541              CMP      r1,r8
005644  da03              BGE      |L1.22094|
005646  6930              LDR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
005648  4408              ADD      r0,r0,r1
00564a  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
00564c  e001              B        |L1.22098|
                  |L1.22094|
;;;8315   			else bat_hndl_zvu_Q=1000000L; 
00564e  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22098|
;;;8316   			}
;;;8317   		}
;;;8318   
;;;8319   
;;;8320   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
005652  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005654  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
005656  4288              CMP      r0,r1
005658  d00d              BEQ      |L1.22134|
;;;8321   		{
;;;8322   		if(bat_hndl_i_vector==1)
00565a  2801              CMP      r0,#1
00565c  d10b              BNE      |L1.22134|
;;;8323   			{
;;;8324   			signed short tempSS;
;;;8325   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
00565e  f44f70e4          MOV      r0,#0x1c8
005662  f7fffffe          BL       lc640_read_int
005666  b200              SXTH     r0,r0
;;;8326   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
005668  4a9e              LDR      r2,|L1.22756|
00566a  6d71              LDR      r1,[r6,#0x54]  ; bat_hndl_zvu_Q
00566c  4411              ADD      r1,r1,r2
00566e  fb91f0f0          SDIV     r0,r1,r0
005672  6130              STR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
;;;8327   			bat_hndl_i_summ=0;
005674  6677              STR      r7,[r6,#0x64]  ; bat_hndl_i_summ
                  |L1.22134|
;;;8328   			}
;;;8329   		}
;;;8330   	bat_hndl_i_vector_old=bat_hndl_i_vector;
005676  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005678  7320              STRB     r0,[r4,#0xc]
;;;8331   
;;;8332   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
00567a  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
00567c  f2427a10          MOV      r10,#0x2710
005680  fb90f5fa          SDIV     r5,r0,r10
005684  f44f79ef          MOV      r9,#0x1de
005688  4648              MOV      r0,r9
00568a  f7fffffe          BL       lc640_read_int
00568e  4285              CMP      r5,r0
005690  d006              BEQ      |L1.22176|
005692  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005694  fb90f0fa          SDIV     r0,r0,r10
005698  b201              SXTH     r1,r0
00569a  4648              MOV      r0,r9
00569c  f7fffffe          BL       lc640_write_int
                  |L1.22176|
;;;8333   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
0056a0  e9d60115          LDRD     r0,r1,[r6,#0x54]
0056a4  fb90f0f1          SDIV     r0,r0,r1
0056a8  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_remain_time
                  |L1.22186|
;;;8334   	}
;;;8335   
;;;8336   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
0056aa  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0056ac  4540              CMP      r0,r8
0056ae  dd02              BLE      |L1.22198|
0056b0  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
0056b4  e002              B        |L1.22204|
                  |L1.22198|
;;;8337   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
0056b6  2800              CMP      r0,#0
0056b8  da00              BGE      |L1.22204|
0056ba  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22204|
;;;8338   
;;;8339   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
0056bc  488a              LDR      r0,|L1.22760|
0056be  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
0056c2  200a              MOVS     r0,#0xa
0056c4  fb91f0f0          SDIV     r0,r1,r0
0056c8  4988              LDR      r1,|L1.22764|
0056ca  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0056ce  ebb00f41          CMP      r0,r1,LSL #1
0056d2  da30              BGE      |L1.22326|
0056d4  4249              RSBS     r1,r1,#0
0056d6  ebb00f41          CMP      r0,r1,LSL #1
0056da  dd2c              BLE      |L1.22326|
0056dc  4884              LDR      r0,|L1.22768|
0056de  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
0056e2  07c0              LSLS     r0,r0,#31
0056e4  d127              BNE      |L1.22326|
0056e6  4883              LDR      r0,|L1.22772|
0056e8  4983              LDR      r1,|L1.22776|
0056ea  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0056ee  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
0056f2  4288              CMP      r0,r1
0056f4  dc1f              BGT      |L1.22326|
0056f6  4981              LDR      r1,|L1.22780|
0056f8  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
0056fc  4288              CMP      r0,r1
0056fe  dd1a              BLE      |L1.22326|
005700  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
005704  280a              CMP      r0,#0xa
005706  db16              BLT      |L1.22326|
005708  28c8              CMP      r0,#0xc8
00570a  dc14              BGT      |L1.22326|
;;;8340   	{
;;;8341   	if(bat_hndl_zvu_Q_cnt<60)
00570c  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
005710  283c              CMP      r0,#0x3c
005712  d20d              BCS      |L1.22320|
;;;8342   		{
;;;8343   		bat_hndl_zvu_Q_cnt++;
005714  f1000001          ADD      r0,r0,#1
005718  b2c0              UXTB     r0,r0
00571a  f8840030          STRB     r0,[r4,#0x30]
;;;8344   		if(bat_hndl_zvu_Q_cnt>=60)
00571e  283c              CMP      r0,#0x3c
005720  d306              BCC      |L1.22320|
;;;8345   			{
;;;8346   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
005722  2164              MOVS     r1,#0x64
005724  f44f70ef          MOV      r0,#0x1de
005728  f7fffffe          BL       lc640_write_int
;;;8347   			bat_hndl_zvu_Q=1000000L;
00572c  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22320|
;;;8348   
;;;8349   
;;;8350   			}
;;;8351   		}
;;;8352   	}
;;;8353   else 
;;;8354   	{
;;;8355   	bat_hndl_zvu_Q_cnt=0;
;;;8356   	}
;;;8357   
;;;8358   
;;;8359   
;;;8360   };
005730  b009              ADD      sp,sp,#0x24
005732  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.22326|
005736  f8847030          STRB     r7,[r4,#0x30]         ;8355
00573a  e7f9              B        |L1.22320|
;;;8361   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8365   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8366   void u_avt_set_hndl(void)
00573c  e92d5fff          PUSH     {r0-r12,lr}
;;;8367   {
;;;8368   if(uavt_set_stat==uassSTEP1)
005740  4d6f              LDR      r5,|L1.22784|
;;;8369   	{
;;;8370   	char i,find_succes;
;;;8371   
;;;8372   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8373   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8374   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8375   		{
;;;8376   		uavt_set_error_cnt=60;
005742  4e70              LDR      r6,|L1.22788|
005744  f8df81c0          LDR      r8,|L1.22792|
005748  7828              LDRB     r0,[r5,#0]            ;8368  ; uavt_set_stat
;;;8377   		}
;;;8378   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8379   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8380   	find_succes=0;
;;;8381   /*	for(i=0;i<NUMIST;i++)
;;;8382   		{
;;;8383   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8384   		else
;;;8385   			{
;;;8386   			find_succes=0;
;;;8387   			break;
;;;8388   			}
;;;8389   		}*/
;;;8390   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
00574a  f8dfa1c0          LDR      r10,|L1.22796|
00574e  2400              MOVS     r4,#0                 ;8379
;;;8391   
;;;8392   	if(find_succes==1)
;;;8393   		{
;;;8394   		uavt_set_stat=uassSTEP2;
005750  f04f0902          MOV      r9,#2
;;;8395   		}
;;;8396   	if(uavt_set_error_cnt)
;;;8397   		{
;;;8398   		uavt_set_error_cnt--;
;;;8399   		if(!uavt_set_error_cnt)
;;;8400   			{
;;;8401   			uavt_set_stat=uassOFF;
;;;8402   			uavt_set_result_stat=uasrsERR;
;;;8403   			avt_error_bps=100;
005754  f04f0b64          MOV      r11,#0x64
005758  2801              CMP      r0,#1                 ;8368
00575a  d12e              BNE      |L1.22458|
00575c  f8980000          LDRB     r0,[r8,#0]            ;8374  ; uavt_set_stat_old
005760  2801              CMP      r0,#1                 ;8374
005762  d002              BEQ      |L1.22378|
005764  f04f003c          MOV      r0,#0x3c              ;8376
005768  7030              STRB     r0,[r6,#0]            ;8376
                  |L1.22378|
00576a  230a              MOVS     r3,#0xa               ;8379
00576c  2200              MOVS     r2,#0                 ;8379
00576e  21e6              MOVS     r1,#0xe6              ;8379
005770  20e1              MOVS     r0,#0xe1              ;8379
005772  f7fffffe          BL       mess_send
005776  f04f0000          MOV      r0,#0                 ;8380
00577a  4965              LDR      r1,|L1.22800|
00577c  f9b12000          LDRSH    r2,[r1,#0]            ;8390  ; bps_U
005780  f9ba1000          LDRSH    r1,[r10,#0]           ;8390  ; U_AVT
005784  f1a10301          SUB      r3,r1,#1              ;8390
005788  429a              CMP      r2,r3                 ;8390
00578a  db04              BLT      |L1.22422|
00578c  1c49              ADDS     r1,r1,#1              ;8390
00578e  428a              CMP      r2,r1                 ;8390
005790  dc01              BGT      |L1.22422|
005792  f04f0001          MOV      r0,#1                 ;8390
                  |L1.22422|
005796  2801              CMP      r0,#1                 ;8392
005798  d101              BNE      |L1.22430|
00579a  f8859000          STRB     r9,[r5,#0]            ;8394
                  |L1.22430|
00579e  7830              LDRB     r0,[r6,#0]            ;8396  ; uavt_set_error_cnt
0057a0  b158              CBZ      r0,|L1.22458|
0057a2  f1a00001          SUB      r0,r0,#1              ;8398
0057a6  b2c0              UXTB     r0,r0                 ;8398
0057a8  7030              STRB     r0,[r6,#0]            ;8398
0057aa  b930              CBNZ     r0,|L1.22458|
0057ac  702c              STRB     r4,[r5,#0]            ;8401
0057ae  4859              LDR      r0,|L1.22804|
0057b0  f8809000          STRB     r9,[r0,#0]            ;8402
0057b4  4858              LDR      r0,|L1.22808|
0057b6  f880b000          STRB     r11,[r0,#0]
                  |L1.22458|
;;;8404   			}
;;;8405   		}
;;;8406   	}
;;;8407   if(uavt_set_stat==uassSTEP2)
0057ba  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8408   	{
;;;8409   	char i,find_succes;
;;;8410   
;;;8411   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0057bc  4957              LDR      r1,|L1.22812|
;;;8412   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0057be  4858              LDR      r0,|L1.22816|
;;;8413   
;;;8414   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8415   		{
;;;8416   		uavt_set_error_cnt=60;
;;;8417   		}
;;;8418   
;;;8419   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8420   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8421   	find_succes=1;
;;;8422   
;;;8423   	for(i=0;i<NUMIST;i++)
;;;8424   		{
;;;8425   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8426   		else
;;;8427   			{
;;;8428   			find_succes=0;
;;;8429   			avt_error_bps=i+1;
;;;8430   			break;
;;;8431   			}
;;;8432   		}
;;;8433   
;;;8434   	if(find_succes==1)
;;;8435   		{
;;;8436   		uavt_set_stat=uassSTEP3;
;;;8437   		uavt_bps_pntr=0;
0057c0  4f58              LDR      r7,|L1.22820|
0057c2  2a02              CMP      r2,#2                 ;8407
0057c4  d002              BEQ      |L1.22476|
;;;8438   		avt_plazma=0;
;;;8439   		}
;;;8440   
;;;8441   	if(uavt_set_error_cnt)
;;;8442   		{
;;;8443   		uavt_set_error_cnt--;
;;;8444   		if(!uavt_set_error_cnt)
;;;8445   			{
;;;8446   			uavt_set_stat=uassOFF;
;;;8447   			uavt_set_result_stat=uasrsERR;
;;;8448   			}
;;;8449   		}
;;;8450   	}
;;;8451   else if(uavt_set_stat==uassSTEP3)
0057c6  2a03              CMP      r2,#3
0057c8  d05e              BEQ      |L1.22664|
0057ca  e0fb              B        |L1.22980|
                  |L1.22476|
0057cc  f9ba2000          LDRSH    r2,[r10,#0]           ;8411  ; U_AVT
0057d0  f04f0365          MOV      r3,#0x65              ;8411
0057d4  fb02f303          MUL      r3,r2,r3              ;8411
0057d8  fbb3f3fb          UDIV     r3,r3,r11             ;8411
0057dc  468a              MOV      r10,r1                ;8411
0057de  800b              STRH     r3,[r1,#0]            ;8411
0057e0  eb021142          ADD      r1,r2,r2,LSL #5       ;8412
0057e4  eb010141          ADD      r1,r1,r1,LSL #1       ;8412
0057e8  fbb1f1fb          UDIV     r1,r1,r11             ;8412
0057ec  4683              MOV      r11,r0                ;8412
0057ee  8001              STRH     r1,[r0,#0]            ;8412
0057f0  f8980000          LDRB     r0,[r8,#0]            ;8414  ; uavt_set_stat_old
0057f4  2802              CMP      r0,#2                 ;8414
0057f6  d002              BEQ      |L1.22526|
0057f8  f04f003c          MOV      r0,#0x3c              ;8416
0057fc  7030              STRB     r0,[r6,#0]            ;8416
                  |L1.22526|
0057fe  230a              MOVS     r3,#0xa               ;8419
005800  21bf              MOVS     r1,#0xbf              ;8419
005802  20be              MOVS     r0,#0xbe              ;8419
005804  f7fffffe          BL       mess_send
005808  230a              MOVS     r3,#0xa               ;8420
00580a  2200              MOVS     r2,#0                 ;8420
00580c  21e6              MOVS     r1,#0xe6              ;8420
00580e  20e1              MOVS     r0,#0xe1              ;8420
005810  f7fffffe          BL       mess_send
005814  f04f0201          MOV      r2,#1                 ;8421
005818  f04f0000          MOV      r0,#0                 ;8423
00581c  4943              LDR      r1,|L1.22828|
00581e  f9ba3000          LDRSH    r3,[r10,#0]           ;8423
005822  f8dfe104          LDR      lr,|L1.22824|
005826  f9bbc000          LDRSH    r12,[r11,#0]          ;8425
00582a  f9b1a000          LDRSH    r10,[r1,#0]           ;8423
00582e  e00d              B        |L1.22604|
                  |L1.22576|
005830  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8425
005834  eb011100          ADD      r1,r1,r0,LSL #4       ;8425
005838  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8425
00583c  69c9              LDR      r1,[r1,#0x1c]         ;8425
00583e  4299              CMP      r1,r3                 ;8425
005840  da09              BGE      |L1.22614|
005842  4561              CMP      r1,r12                ;8425
005844  dd07              BLE      |L1.22614|
005846  f1000001          ADD      r0,r0,#1              ;8423
00584a  b2c0              UXTB     r0,r0                 ;8423
                  |L1.22604|
00584c  4550              CMP      r0,r10                ;8423
00584e  dbef              BLT      |L1.22576|
                  |L1.22608|
005850  2a01              CMP      r2,#1                 ;8434
005852  d007              BEQ      |L1.22628|
005854  e00c              B        |L1.22640|
                  |L1.22614|
005856  f04f0200          MOV      r2,#0                 ;8428
00585a  492f              LDR      r1,|L1.22808|
00585c  f1000001          ADD      r0,r0,#1              ;8429
005860  7008              STRB     r0,[r1,#0]            ;8429
005862  e7f5              B        |L1.22608|
                  |L1.22628|
005864  f04f0003          MOV      r0,#3                 ;8436
005868  7028              STRB     r0,[r5,#0]            ;8436
00586a  703c              STRB     r4,[r7,#0]            ;8437
00586c  4830              LDR      r0,|L1.22832|
00586e  7004              STRB     r4,[r0,#0]            ;8438
                  |L1.22640|
005870  7830              LDRB     r0,[r6,#0]            ;8441  ; uavt_set_error_cnt
005872  b370              CBZ      r0,|L1.22738|
005874  f1a00001          SUB      r0,r0,#1              ;8443
005878  b2c0              UXTB     r0,r0                 ;8443
00587a  7030              STRB     r0,[r6,#0]            ;8443
00587c  bb48              CBNZ     r0,|L1.22738|
00587e  702c              STRB     r4,[r5,#0]            ;8446
005880  4824              LDR      r0,|L1.22804|
005882  f8809000          STRB     r9,[r0,#0]            ;8447
005886  e09d              B        |L1.22980|
                  |L1.22664|
;;;8452   	{
;;;8453   	char i,find_succes;
;;;8454   
;;;8455   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005888  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
00588c  f04f0365          MOV      r3,#0x65
005890  fb02f303          MUL      r3,r2,r3
005894  fbb3f3fb          UDIV     r3,r3,r11
005898  468a              MOV      r10,r1
00589a  800b              STRH     r3,[r1,#0]
;;;8456   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
00589c  eb021142          ADD      r1,r2,r2,LSL #5
0058a0  eb010141          ADD      r1,r1,r1,LSL #1
0058a4  fbb1f1fb          UDIV     r1,r1,r11
0058a8  4683              MOV      r11,r0
0058aa  8001              STRH     r1,[r0,#0]
;;;8457   	
;;;8458   	if(uavt_set_stat_old!=uavt_set_stat)
0058ac  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
0058b0  2803              CMP      r0,#3
0058b2  d000              BEQ      |L1.22710|
;;;8459   		{
;;;8460   		uavt_bps_pntr=0;
0058b4  703c              STRB     r4,[r7,#0]
                  |L1.22710|
;;;8461   		}
;;;8462   
;;;8463   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
0058b6  230a              MOVS     r3,#0xa
0058b8  21bf              MOVS     r1,#0xbf
0058ba  20be              MOVS     r0,#0xbe
0058bc  f7fffffe          BL       mess_send
;;;8464   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
0058c0  230a              MOVS     r3,#0xa
0058c2  2200              MOVS     r2,#0
0058c4  21e6              MOVS     r1,#0xe6
0058c6  20e1              MOVS     r0,#0xe1
0058c8  f7fffffe          BL       mess_send
;;;8465   
;;;8466   	find_succes=1;
0058cc  f04f0601          MOV      r6,#1
;;;8467   	for(i=0;i<NUMIST;i++)
0058d0  e030              B        |L1.22836|
                  |L1.22738|
0058d2  e077              B        |L1.22980|
                  |L1.22740|
                          DCD      BAT_C_POINT_5
                  |L1.22744|
                          DCD      BAT_C_POINT_10
                  |L1.22748|
                          DCD      BAT_C_POINT_20
                  |L1.22752|
                          DCD      BAT_K_OLD
                  |L1.22756|
                          DCD      0xfff0bdc0
                  |L1.22760|
                          DCD      Ib_ips_termokompensat
                  |L1.22764|
                          DCD      IKB
                  |L1.22768|
                          DCD      bat
                  |L1.22772|
                          DCD      out_U
                  |L1.22776|
                          DCD      u_necc_up
                  |L1.22780|
                          DCD      u_necc_dn
                  |L1.22784|
                          DCD      uavt_set_stat
                  |L1.22788|
                          DCD      uavt_set_error_cnt
                  |L1.22792|
                          DCD      uavt_set_stat_old
                  |L1.22796|
                          DCD      U_AVT
                  |L1.22800|
                          DCD      bps_U
                  |L1.22804|
                          DCD      uavt_set_result_stat
                  |L1.22808|
                          DCD      avt_error_bps
                  |L1.22812|
                          DCD      u_max_temp
                  |L1.22816|
                          DCD      u_min_temp
                  |L1.22820|
                          DCD      uavt_bps_pntr
                  |L1.22824|
                          DCD      bps
                  |L1.22828|
                          DCD      NUMIST
                  |L1.22832|
                          DCD      avt_plazma
                  |L1.22836|
005934  f04f0000          MOV      r0,#0
005938  f8df942c          LDR      r9,|L1.23912|
00593c  f9ba2000          LDRSH    r2,[r10,#0]
005940  f8dfc420          LDR      r12,|L1.23908|
005944  f9bb3000          LDRSH    r3,[r11,#0]           ;8425
005948  f9b9a000          LDRSH    r10,[r9,#0]           ;8423
00594c  e00d              B        |L1.22890|
                  |L1.22862|
;;;8468   		{
;;;8469   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
00594e  eb0001c0          ADD      r1,r0,r0,LSL #3
005952  eb011100          ADD      r1,r1,r0,LSL #4
005956  eb0c0181          ADD      r1,r12,r1,LSL #2
00595a  69c9              LDR      r1,[r1,#0x1c]
00595c  4291              CMP      r1,r2
00595e  da0f              BGE      |L1.22912|
005960  4299              CMP      r1,r3
005962  dd0d              BLE      |L1.22912|
005964  f1000001          ADD      r0,r0,#1              ;8467
005968  b2c0              UXTB     r0,r0                 ;8467
                  |L1.22890|
00596a  4550              CMP      r0,r10                ;8467
00596c  dbef              BLT      |L1.22862|
                  |L1.22894|
;;;8470   		else
;;;8471   			{
;;;8472   			find_succes=0;
;;;8473   			break;
;;;8474   			}
;;;8475   		}
;;;8476   
;;;8477   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
00596e  20d7              MOVS     r0,#0xd7
005970  f7fffffe          BL       mess_find
005974  b1a0              CBZ      r0,|L1.22944|
005976  48fd              LDR      r0,|L1.23916|
005978  6800              LDR      r0,[r0,#0]  ; mess_data
00597a  28d9              CMP      r0,#0xd9
00597c  d003              BEQ      |L1.22918|
00597e  e00f              B        |L1.22944|
                  |L1.22912|
005980  f04f0600          MOV      r6,#0                 ;8472
005984  e7f3              B        |L1.22894|
                  |L1.22918|
;;;8478   		{
;;;8479   		if(++uavt_bps_pntr>=NUMIST)
005986  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005988  1c40              ADDS     r0,r0,#1
00598a  b2c0              UXTB     r0,r0
00598c  7038              STRB     r0,[r7,#0]
00598e  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005992  4288              CMP      r0,r1
005994  db04              BLT      |L1.22944|
;;;8480   			{
;;;8481   			uavt_set_stat=uassOFF;
005996  702c              STRB     r4,[r5,#0]
;;;8482   			uavt_set_result_stat=uasrsSUCCESS;
005998  49f5              LDR      r1,|L1.23920|
00599a  f04f0003          MOV      r0,#3
00599e  7008              STRB     r0,[r1,#0]
                  |L1.22944|
;;;8483   			}
;;;8484   		//uavt_bps_pntr++;
;;;8485   		//if()
;;;8486   		}
;;;8487   	if(find_succes==1)
0059a0  2e01              CMP      r6,#1
0059a2  d10f              BNE      |L1.22980|
;;;8488   		{
;;;8489   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
0059a4  20ee              MOVS     r0,#0xee
0059a6  e9cd0400          STRD     r0,r4,[sp,#0]
0059aa  9402              STR      r4,[sp,#8]
0059ac  9403              STR      r4,[sp,#0xc]
0059ae  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
0059b0  4603              MOV      r3,r0
0059b2  2216              MOVS     r2,#0x16
0059b4  4608              MOV      r0,r1
0059b6  f7fffffe          BL       mcp2515_transmit
;;;8490   		avt_plazma++;
0059ba  48ee              LDR      r0,|L1.23924|
0059bc  7801              LDRB     r1,[r0,#0]  ; avt_plazma
0059be  f1010101          ADD      r1,r1,#1
0059c2  7001              STRB     r1,[r0,#0]
                  |L1.22980|
;;;8491   		}
;;;8492   	}
;;;8493   
;;;8494   
;;;8495   
;;;8496   uavt_set_stat_old=uavt_set_stat;
0059c4  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
0059c6  f8880000          STRB     r0,[r8,#0]
;;;8497   
;;;8498   }
0059ca  e8bd9fff          POP      {r0-r12,pc}
;;;8499   
                          ENDP

                  u_necc_hndl PROC
;;;8574   //-----------------------------------------------
;;;8575   void u_necc_hndl(void)
0059ce  b5f8              PUSH     {r3-r7,lr}
;;;8576   {
;;;8577   signed long temp_L;
;;;8578   signed long temp_SL;
;;;8579   //signed short temp_SS;
;;;8580   
;;;8581   //char i;
;;;8582   
;;;8583   //temp_SS=0;
;;;8584   signed short t[2];
;;;8585   
;;;8586   
;;;8587   
;;;8588   
;;;8589   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8590   
;;;8591   if(!TERMOKOMPENS)
0059d0  48e9              LDR      r0,|L1.23928|
;;;8592   	{
;;;8593   	//u_necc=U0B;
;;;8594   	u_necc=UB20;
;;;8595   	}
;;;8596   else
;;;8597   	{
;;;8598   	if(ND_EXT[0])t[0]=20;
;;;8599   	else t[0]=t_ext[0];
;;;8600   
;;;8601   	mat_temper=t[0];
;;;8602   			
;;;8603   	if(mat_temper<0)temp_SL=UB0; 
;;;8604   	else 
;;;8605   		{
;;;8606   		if(mat_temper>40)mat_temper=40; 
;;;8607   		temp_SL=(UB20-UB0)*10;
;;;8608   		temp_SL*=mat_temper;
;;;8609   		temp_SL/=200;
;;;8610   		temp_SL+=UB0;
;;;8611   		}
;;;8612   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
0059d2  4dec              LDR      r5,|L1.23940|
0059d4  4cec              LDR      r4,|L1.23944|
0059d6  8801              LDRH     r1,[r0,#0]            ;8591  ; TERMOKOMPENS
0059d8  48e8              LDR      r0,|L1.23932|
0059da  f9b03000          LDRSH    r3,[r0,#0]            ;8594
;;;8613   		{
;;;8614   		temp_SL=UVZ;
0059de  48e8              LDR      r0,|L1.23936|
0059e0  f9b02000          LDRSH    r2,[r0,#0]
0059e4  b139              CBZ      r1,|L1.23030|
0059e6  48e9              LDR      r0,|L1.23948|
0059e8  7800              LDRB     r0,[r0,#0]            ;8598  ; ND_EXT
0059ea  b130              CBZ      r0,|L1.23034|
0059ec  f04f0014          MOV      r0,#0x14              ;8598
0059f0  f8ad0000          STRH     r0,[sp,#0]            ;8598
0059f4  e005              B        |L1.23042|
                  |L1.23030|
0059f6  8023              STRH     r3,[r4,#0]            ;8594
0059f8  e02c              B        |L1.23124|
                  |L1.23034|
0059fa  48e5              LDR      r0,|L1.23952|
0059fc  8800              LDRH     r0,[r0,#0]            ;8599  ; t_ext
0059fe  f8ad0000          STRH     r0,[sp,#0]            ;8599
                  |L1.23042|
005a02  4ee4              LDR      r6,|L1.23956|
005a04  f9bd1000          LDRSH    r1,[sp,#0]            ;8601
005a08  6031              STR      r1,[r6,#0]            ;8601  ; mat_temper
005a0a  48e3              LDR      r0,|L1.23960|
005a0c  2900              CMP      r1,#0                 ;8603
005a0e  f9b00000          LDRSH    r0,[r0,#0]            ;8603
005a12  db12              BLT      |L1.23098|
005a14  2928              CMP      r1,#0x28              ;8606
005a16  dd02              BLE      |L1.23070|
005a18  f04f0128          MOV      r1,#0x28              ;8606
005a1c  6031              STR      r1,[r6,#0]            ;8606  ; mat_temper
                  |L1.23070|
005a1e  eba30100          SUB      r1,r3,r0              ;8607
005a22  eb010181          ADD      r1,r1,r1,LSL #2       ;8607
005a26  ea4f0141          LSL      r1,r1,#1              ;8607
005a2a  6833              LDR      r3,[r6,#0]            ;8608  ; mat_temper
005a2c  fb01f103          MUL      r1,r1,r3              ;8608
005a30  f04f03c8          MOV      r3,#0xc8              ;8609
005a34  fb91f1f3          SDIV     r1,r1,r3              ;8609
005a38  4408              ADD      r0,r0,r1              ;8610
                  |L1.23098|
005a3a  f8951023          LDRB     r1,[r5,#0x23]         ;8612  ; spc_stat
005a3e  2902              CMP      r1,#2                 ;8612
005a40  d107              BNE      |L1.23122|
005a42  49d6              LDR      r1,|L1.23964|
005a44  7809              LDRB     r1,[r1,#0]            ;8612  ; sk_stat
005a46  2901              CMP      r1,#1                 ;8612
005a48  d002              BEQ      |L1.23120|
005a4a  49d5              LDR      r1,|L1.23968|
005a4c  8809              LDRH     r1,[r1,#0]            ;8612  ; VZ_CH_VENT_BLOK
005a4e  b901              CBNZ     r1,|L1.23122|
                  |L1.23120|
005a50  4610              MOV      r0,r2
                  |L1.23122|
;;;8615   		}
;;;8616   	u_necc=(unsigned int)temp_SL;
005a52  8020              STRH     r0,[r4,#0]
                  |L1.23124|
;;;8617   	///u_necc=3456;
;;;8618   	}  
;;;8619   
;;;8620   //u_necc=2355;
;;;8621   
;;;8622   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005a54  48d3              LDR      r0,|L1.23972|
005a56  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005a58  b918              CBNZ     r0,|L1.23138|
005a5a  48d3              LDR      r0,|L1.23976|
005a5c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005a5e  2802              CMP      r0,#2
005a60  d102              BNE      |L1.23144|
                  |L1.23138|
;;;8623   	{
;;;8624   	u_necc=speedChrgVolt;
005a62  48d2              LDR      r0,|L1.23980|
005a64  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005a66  8020              STRH     r0,[r4,#0]
                  |L1.23144|
;;;8625   	}
;;;8626   if(hv_vz_stat==hvsWRK)
005a68  48d1              LDR      r0,|L1.23984|
005a6a  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005a6c  2805              CMP      r0,#5
005a6e  d100              BNE      |L1.23154|
;;;8627   	{
;;;8628   	u_necc=UVZ;
005a70  8022              STRH     r2,[r4,#0]
                  |L1.23154|
;;;8629   	}
;;;8630   if(vz1_stat==vz1sWRK)
005a72  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005a74  280a              CMP      r0,#0xa
005a76  d102              BNE      |L1.23166|
;;;8631   	{
;;;8632   	u_necc=UZ_U;
005a78  48ce              LDR      r0,|L1.23988|
005a7a  8800              LDRH     r0,[r0,#0]  ; UZ_U
005a7c  8020              STRH     r0,[r4,#0]
                  |L1.23166|
;;;8633   	}
;;;8634   if(vz2_stat==vz2sWRK1)
005a7e  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005a80  280a              CMP      r0,#0xa
005a82  d102              BNE      |L1.23178|
;;;8635   	{
;;;8636   	u_necc=FZ_U1;
005a84  49cc              LDR      r1,|L1.23992|
005a86  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005a88  8021              STRH     r1,[r4,#0]
                  |L1.23178|
;;;8637   	}
;;;8638   if(vz2_stat==vz2sWRK2)
005a8a  280b              CMP      r0,#0xb
005a8c  d102              BNE      |L1.23188|
;;;8639   	{
;;;8640   	u_necc=FZ_U2;
005a8e  48cb              LDR      r0,|L1.23996|
005a90  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005a92  8020              STRH     r0,[r4,#0]
                  |L1.23188|
;;;8641   	}
;;;8642   
;;;8643   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005a94  48ca              LDR      r0,|L1.24000|
005a96  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005a98  2801              CMP      r0,#1
005a9a  d001              BEQ      |L1.23200|
005a9c  2802              CMP      r0,#2
005a9e  d102              BNE      |L1.23206|
                  |L1.23200|
;;;8644   	{
;;;8645   	u_necc=U_AVT;
005aa0  48c8              LDR      r0,|L1.24004|
005aa2  8800              LDRH     r0,[r0,#0]  ; U_AVT
005aa4  8020              STRH     r0,[r4,#0]
                  |L1.23206|
;;;8646   	}
;;;8647   
;;;8648   if(mess_find_unvol(MESS2UNECC_HNDL))
005aa6  20be              MOVS     r0,#0xbe
005aa8  f7fffffe          BL       mess_find_unvol
005aac  b128              CBZ      r0,|L1.23226|
;;;8649   	{		
;;;8650   	if(mess_data[0]==PARAM_UNECC_SET)
005aae  48af              LDR      r0,|L1.23916|
005ab0  6801              LDR      r1,[r0,#0]  ; mess_data
005ab2  29bf              CMP      r1,#0xbf
005ab4  d101              BNE      |L1.23226|
;;;8651   		{
;;;8652   		u_necc=mess_data[1];
005ab6  6840              LDR      r0,[r0,#4]  ; mess_data
005ab8  8020              STRH     r0,[r4,#0]
                  |L1.23226|
;;;8653   		}		
;;;8654   	} 
;;;8655   
;;;8656   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8657   #endif
;;;8658   
;;;8659   
;;;8660   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8661   
;;;8662   #ifndef UKU_TELECORE2015
;;;8663   #ifndef UKU_TELECORE2017
;;;8664   if(unh_cnt0<10)
;;;8665   	{
;;;8666   	unh_cnt0++;
;;;8667   	if(unh_cnt0>=10)
;;;8668   		{
;;;8669   		unh_cnt0=0;
;;;8670   		b1Hz_unh=1;
;;;8671   		}
;;;8672   	}
;;;8673   
;;;8674   if(unh_cnt1<5)
;;;8675   	{
;;;8676   	unh_cnt1++;
;;;8677   	if(unh_cnt1==5)
;;;8678   		{
;;;8679   		unh_cnt1=0;
;;;8680   //		b2Hz_unh=1;
;;;8681   		}
;;;8682   	} 
;;;8683   
;;;8684   
;;;8685   
;;;8686   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8687   	{		
;;;8688   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8689   		{
;;;8690   		u_necc=mess_data[1];
;;;8691   		}		
;;;8692   	}
;;;8693   
;;;8694   
;;;8695   else if(b1Hz_unh)
;;;8696   	{
;;;8697   	
;;;8698   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8699   		{
;;;8700   		
;;;8701   		u_necc=U0B;
;;;8702   		#ifdef IPS_SGEP_GAZPROM
;;;8703   		u_necc=UB0;
;;;8704   		#endif
;;;8705   		}
;;;8706   	else 
;;;8707   		{
;;;8708   		if(BAT_TYPE==0) //если батарея обычная
;;;8709   			{
;;;8710   			for(i=0;i<2;i++)
;;;8711   				{
;;;8712   				if(BAT_IS_ON[i]==bisON)
;;;8713   					{
;;;8714   					if(bat[i]._nd)t[i]=20;
;;;8715   					else t[i]=bat[i]._Tb;
;;;8716   					}
;;;8717   				else
;;;8718   					{
;;;8719   					t[i]=-20;
;;;8720   					}
;;;8721   				}
;;;8722   			if(t[0]>t[1])mat_temper=t[0];
;;;8723   			else mat_temper=t[1];
;;;8724   			
;;;8725   		
;;;8726   			if(mat_temper<0)temp_SL=UB0; 
;;;8727   			else 
;;;8728   				{
;;;8729   				if(mat_temper>40)mat_temper=40; 
;;;8730   				temp_SL=(UB20-UB0)*10;
;;;8731   				temp_SL*=mat_temper;
;;;8732   				temp_SL/=200;
;;;8733   				temp_SL+=UB0;
;;;8734   				}
;;;8735   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8736   				{
;;;8737   				temp_SL=UVZ;
;;;8738   				}
;;;8739   			u_necc=(unsigned int)temp_SL;
;;;8740   			}
;;;8741   		else if(BAT_TYPE==1) //если батарея китайская
;;;8742   			{
;;;8743   			u_necc=U0B;
;;;8744   					
;;;8745   			u_necc=bat[0]._Ub+10;
;;;8746   
;;;8747   			
;;;8748   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8749   				{
;;;8750   				u_necc=UVZ;
;;;8751   				}
;;;8752   			if(u_necc>=UB0) u_necc=UB0;
;;;8753   			if(u_necc>=UB20) u_necc=UB20;
;;;8754   			}
;;;8755   		}  
;;;8756   	}
;;;8757   #endif
;;;8758   #endif
;;;8759   
;;;8760   #ifdef UKU_TELECORE2015
;;;8761   
;;;8762   if(unh_cnt0<10)
;;;8763   	{
;;;8764   	unh_cnt0++;
;;;8765   	if(unh_cnt0>=10)
;;;8766   		{
;;;8767   		unh_cnt0=0;
;;;8768   		b1Hz_unh=1;
;;;8769   		}
;;;8770   	}
;;;8771   
;;;8772   if(unh_cnt1<5)
;;;8773   	{
;;;8774   	unh_cnt1++;
;;;8775   	if(unh_cnt1==5)
;;;8776   		{
;;;8777   		unh_cnt1=0;
;;;8778   //		b2Hz_unh=1;
;;;8779   		}
;;;8780   	} 
;;;8781   
;;;8782   
;;;8783   
;;;8784   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8785   	{		
;;;8786   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8787   		{
;;;8788   		u_necc=mess_data[1];
;;;8789   		}		
;;;8790   	}
;;;8791   
;;;8792   
;;;8793   else if(b1Hz_unh)
;;;8794   	{
;;;8795   	b1Hz_unh=0;
;;;8796   
;;;8797   	if(BAT_TYPE==0)
;;;8798   		{
;;;8799   		if(bat[0]._nd)mat_temper=20;
;;;8800   		else mat_temper=bat[0]._Tb;
;;;8801   
;;;8802   			
;;;8803   		if(mat_temper<0)temp_SL=UB0; 
;;;8804   		else 
;;;8805   			{
;;;8806   			if(mat_temper>40)mat_temper=40; 
;;;8807   			temp_SL=(UB20-UB0)*10;
;;;8808   			temp_SL*=mat_temper;
;;;8809   			temp_SL/=200;
;;;8810   			temp_SL+=UB0;
;;;8811   			}
;;;8812   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8813   			{
;;;8814   			temp_SL=UVZ;
;;;8815   			}
;;;8816   		u_necc=(unsigned int)temp_SL;
;;;8817   	///u_necc=3456;
;;;8818   		}
;;;8819   	else if(BAT_TYPE==1)
;;;8820   		{
;;;8821   		
;;;8822   		gran(&DU_LI_BAT,1,30);
;;;8823   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8824   		gran(&u_necc,0,UB0);
;;;8825   		gran(&u_necc,0,UB20);
;;;8826   		gran(&u_necc,0,540);		
;;;8827   
;;;8828   
;;;8829   		if(li_bat._batStat!=bsOK)
;;;8830   			{
;;;8831   			u_necc=U0B;
;;;8832   			}
;;;8833   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8834   			{
;;;8835   			u_necc=UVZ;
;;;8836   			}
;;;8837   		/* 
;;;8838   		u_necc=U0B;
;;;8839   		
;;;8840   
;;;8841   	
;;;8842   		u_necc=UB0;
;;;8843   		u_necc=li_bat._Ub+10;
;;;8844   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8845   			{
;;;8846   			lakb_error_cnt++;
;;;8847   			if(lakb_error_cnt>=30)
;;;8848   				{
;;;8849   				lakb_error_cnt=30;
;;;8850   				u_necc=U0B;
;;;8851   				}
;;;8852   			}
;;;8853   		else lakb_error_cnt=0;*/
;;;8854   		}
;;;8855   	else if(BAT_TYPE==2)
;;;8856   		{
;;;8857   		u_necc=U0B;
;;;8858   		
;;;8859   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8860   			{
;;;8861   			u_necc=UVZ;
;;;8862   			}
;;;8863   	
;;;8864   		u_necc=UB0;
;;;8865   		}
;;;8866   
;;;8867   	else if(BAT_TYPE==3)
;;;8868   		{
;;;8869   		u_necc=U0B;
;;;8870   		
;;;8871   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8872   			{
;;;8873   			u_necc=UVZ;
;;;8874   			}
;;;8875   
;;;8876   		gran(&DU_LI_BAT,1,30);
;;;8877   
;;;8878   
;;;8879   		if(lakbNotErrorNum==0)
;;;8880   			{
;;;8881   			u_necc=U0B;
;;;8882   			}
;;;8883   		else 
;;;8884   			{
;;;8885   			signed short i;
;;;8886   			//signed short u_necc_max;
;;;8887   			//u_necc_max=0;
;;;8888   			char soc_flag=0;
;;;8889   
;;;8890   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8891   				{
;;;8892   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8893   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8894   				}
;;;8895   
;;;8896   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8897   			}
;;;8898   		gran(&u_necc,0,UB0);
;;;8899   		//gran(&u_necc,0,UB20);
;;;8900   		gran(&u_necc,0,540);
;;;8901   		}
;;;8902   	}
;;;8903   
;;;8904   #endif 
;;;8905   
;;;8906   #ifdef UKU_TELECORE2017
;;;8907   
;;;8908   if(unh_cnt0<10)
;;;8909   	{
;;;8910   	unh_cnt0++;
;;;8911   	if(unh_cnt0>=10)
;;;8912   		{
;;;8913   		unh_cnt0=0;
;;;8914   		b1Hz_unh=1;
;;;8915   		}
;;;8916   	}
;;;8917   
;;;8918   if(unh_cnt1<5)
;;;8919   	{
;;;8920   	unh_cnt1++;
;;;8921   	if(unh_cnt1==5)
;;;8922   		{
;;;8923   		unh_cnt1=0;
;;;8924   //		b2Hz_unh=1;
;;;8925   		}
;;;8926   	} 
;;;8927   
;;;8928   
;;;8929   
;;;8930   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8931   	{		
;;;8932   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8933   		{
;;;8934   		u_necc=mess_data[1];
;;;8935   		}		
;;;8936   	}
;;;8937   
;;;8938   
;;;8939   else if(b1Hz_unh)
;;;8940   	{
;;;8941   	b1Hz_unh=0;
;;;8942   
;;;8943   	if(BAT_TYPE==0)
;;;8944   		{
;;;8945   		if(bat[0]._nd)mat_temper=20;
;;;8946   		else mat_temper=bat[0]._Tb;
;;;8947   
;;;8948   			
;;;8949   		if(mat_temper<0)temp_SL=UB0; 
;;;8950   		else 
;;;8951   			{
;;;8952   			if(mat_temper>40)mat_temper=40; 
;;;8953   			temp_SL=(UB20-UB0)*10;
;;;8954   			temp_SL*=mat_temper;
;;;8955   			temp_SL/=200;
;;;8956   			temp_SL+=UB0;
;;;8957   			}
;;;8958   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8959   			{
;;;8960   			temp_SL=UVZ;
;;;8961   			}
;;;8962   		u_necc=(unsigned int)temp_SL;
;;;8963   	///u_necc=3456;
;;;8964   		}
;;;8965   	else if(BAT_TYPE==1)
;;;8966   		{
;;;8967   		
;;;8968   		gran(&DU_LI_BAT,1,30);
;;;8969   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8970   		gran(&u_necc,0,UB0);
;;;8971   		gran(&u_necc,0,UB20);
;;;8972   		gran(&u_necc,0,540);		
;;;8973   
;;;8974   
;;;8975   		if(li_bat._batStat!=bsOK)
;;;8976   			{
;;;8977   			u_necc=U0B;
;;;8978   			}
;;;8979   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8980   			{
;;;8981   			u_necc=UVZ;
;;;8982   			}
;;;8983   		}
;;;8984   	else if(BAT_TYPE==2)
;;;8985   		{
;;;8986   		u_necc=U0B;
;;;8987   		
;;;8988   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8989   			{
;;;8990   			u_necc=UVZ;
;;;8991   			}
;;;8992   	
;;;8993   		u_necc=UB0;
;;;8994   		}
;;;8995   
;;;8996   	else if(BAT_TYPE==3)
;;;8997   		{
;;;8998   		u_necc=U0B;
;;;8999   		
;;;9000   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9001   			{
;;;9002   			u_necc=UVZ;
;;;9003   			}
;;;9004   
;;;9005   		gran(&DU_LI_BAT,1,30);
;;;9006   
;;;9007   
;;;9008   		if(lakbNotErrorNum==0)
;;;9009   			{
;;;9010   			u_necc=U0B;
;;;9011   			}
;;;9012   		else 
;;;9013   			{
;;;9014   			signed short i;
;;;9015   			//signed short u_necc_max;
;;;9016   			//u_necc_max=0;
;;;9017   			char soc_flag=0;
;;;9018   
;;;9019   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9020   				{
;;;9021   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9022   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9023   				}
;;;9024   
;;;9025   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9026   			}
;;;9027   		gran(&u_necc,0,UB0);
;;;9028   		//gran(&u_necc,0,UB20);
;;;9029   		gran(&u_necc,0,540);
;;;9030   		}
;;;9031   	}
;;;9032   
;;;9033   #endif 
;;;9034   //u_necc=2356;
;;;9035   
;;;9036   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9037   	{
;;;9038   	u_necc=speedChrgVolt;
;;;9039   	}
;;;9040   #endif//gran(&u_necc,400,UMAX);
;;;9041   
;;;9042   
;;;9043   
;;;9044   temp_L=(signed long) u_necc;
005aba  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9045   temp_L*=98L;
005abe  f04f0162          MOV      r1,#0x62
005ac2  fb00f101          MUL      r1,r0,r1
;;;9046   temp_L/=100L;
005ac6  f04f0264          MOV      r2,#0x64
005aca  fb91f1f2          SDIV     r1,r1,r2
;;;9047   u_necc_dn=(signed short)temp_L;
005ace  4bbe              LDR      r3,|L1.24008|
005ad0  8019              STRH     r1,[r3,#0]
;;;9048   
;;;9049   temp_L=(signed long) u_necc;
;;;9050   temp_L*=102L;
005ad2  f04f0166          MOV      r1,#0x66
005ad6  fb00f001          MUL      r0,r0,r1
;;;9051   temp_L/=100L;
005ada  fb90f0f2          SDIV     r0,r0,r2
;;;9052   u_necc_up=(signed short)temp_L;
005ade  49bb              LDR      r1,|L1.24012|
005ae0  8008              STRH     r0,[r1,#0]
;;;9053   /*
;;;9054   #ifdef IPS_SGEP_GAZPROM
;;;9055   u_necc=248;
;;;9056   #endif */
;;;9057   }
005ae2  bdf8              POP      {r3-r7,pc}
;;;9058   
                          ENDP

                  num_necc_hndl PROC
;;;9060   //-----------------------------------------------
;;;9061   void num_necc_hndl(void)
005ae4  e92d41f0          PUSH     {r4-r8,lr}
;;;9062   {
;;;9063   
;;;9064   static short num_necc_block_cnt;
;;;9065   if(num_necc_block_cnt) num_necc_block_cnt--;
005ae8  4ca6              LDR      r4,|L1.23940|
005aea  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005aee  b110              CBZ      r0,|L1.23286|
005af0  f1a00001          SUB      r0,r0,#1
005af4  8720              STRH     r0,[r4,#0x38]
                  |L1.23286|
;;;9066   
;;;9067   Isumm_=Isumm;
005af6  48b6              LDR      r0,|L1.24016|
005af8  4db6              LDR      r5,|L1.24020|
005afa  8800              LDRH     r0,[r0,#0]  ; Isumm
005afc  8028              STRH     r0,[r5,#0]
;;;9068   
;;;9069   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005afe  4eb6              LDR      r6,|L1.24024|
005b00  270a              MOVS     r7,#0xa
005b02  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005b06  2800              CMP      r0,#0
005b08  da06              BGE      |L1.23320|
005b0a  f7fffffe          BL       abs
005b0e  fb90f0f7          SDIV     r0,r0,r7
005b12  8829              LDRH     r1,[r5,#0]  ; Isumm_
005b14  4408              ADD      r0,r0,r1
005b16  8028              STRH     r0,[r5,#0]
                  |L1.23320|
;;;9070   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005b18  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
005b1c  2800              CMP      r0,#0
005b1e  da06              BGE      |L1.23342|
005b20  f7fffffe          BL       abs
005b24  fb90f0f7          SDIV     r0,r0,r7
005b28  8829              LDRH     r1,[r5,#0]  ; Isumm_
005b2a  4408              ADD      r0,r0,r1
005b2c  8028              STRH     r0,[r5,#0]
                  |L1.23342|
;;;9071   
;;;9072   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005b2e  49ab              LDR      r1,|L1.24028|
005b30  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005b34  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005b38  fb90f1f1          SDIV     r1,r0,r1
005b3c  f1010101          ADD      r1,r1,#1
005b40  b2c9              UXTB     r1,r1
005b42  77e1              STRB     r1,[r4,#0x1f]
;;;9073   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9074   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9075   
;;;9076   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005b44  4aa6              LDR      r2,|L1.24032|
005b46  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005b4a  fb90f0f2          SDIV     r0,r0,r2
005b4e  f1000001          ADD      r0,r0,#1
005b52  b2c2              UXTB     r2,r0
005b54  f8842020          STRB     r2,[r4,#0x20]
;;;9077   
;;;9078   if(num_necc_up>num_necc)
005b58  48a2              LDR      r0,|L1.24036|
;;;9079   	{
;;;9080   	num_necc=num_necc_up;
;;;9081   	num_necc_block_cnt=60;
005b5a  f04f053c          MOV      r5,#0x3c
005b5e  f9b03000          LDRSH    r3,[r0,#0]            ;9078  ; num_necc
005b62  4299              CMP      r1,r3                 ;9078
005b64  dd02              BLE      |L1.23404|
005b66  8001              STRH     r1,[r0,#0]            ;9080
005b68  8725              STRH     r5,[r4,#0x38]
005b6a  e005              B        |L1.23416|
                  |L1.23404|
;;;9082   	}
;;;9083   else if(num_necc_down<num_necc)
005b6c  429a              CMP      r2,r3
005b6e  da03              BGE      |L1.23416|
;;;9084   	{
;;;9085   	if(!num_necc_block_cnt)
005b70  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005b72  b909              CBNZ     r1,|L1.23416|
;;;9086   		{
;;;9087   		num_necc=num_necc_down;
005b74  8002              STRH     r2,[r0,#0]
;;;9088   		num_necc_block_cnt=60;
005b76  8725              STRH     r5,[r4,#0x38]
                  |L1.23416|
;;;9089   		}
;;;9090   	}
;;;9091   
;;;9092   if(PAR) num_necc=NUMIST;
005b78  499b              LDR      r1,|L1.24040|
005b7a  880a              LDRH     r2,[r1,#0]  ; PAR
005b7c  497a              LDR      r1,|L1.23912|
005b7e  b10a              CBZ      r2,|L1.23428|
005b80  880a              LDRH     r2,[r1,#0]  ; NUMIST
005b82  8002              STRH     r2,[r0,#0]
                  |L1.23428|
;;;9093   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9094   if(bPARALLEL) num_necc=NUMIST;
005b84  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005b88  b10a              CBZ      r2,|L1.23438|
005b8a  880a              LDRH     r2,[r1,#0]  ; NUMIST
005b8c  8002              STRH     r2,[r0,#0]
                  |L1.23438|
;;;9095   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005b8e  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005b90  2a0a              CMP      r2,#0xa
005b92  d101              BNE      |L1.23448|
005b94  880a              LDRH     r2,[r1,#0]  ; NUMIST
005b96  8002              STRH     r2,[r0,#0]
                  |L1.23448|
;;;9096   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005b98  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005b9a  2a0a              CMP      r2,#0xa
005b9c  d001              BEQ      |L1.23458|
005b9e  2a0b              CMP      r2,#0xb
005ba0  d101              BNE      |L1.23462|
                  |L1.23458|
005ba2  880a              LDRH     r2,[r1,#0]  ; NUMIST
005ba4  8002              STRH     r2,[r0,#0]
                  |L1.23462|
;;;9097   #endif
;;;9098   
;;;9099   gran(&num_necc,1,NUMIST);
005ba6  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005baa  e8bd41f0          POP      {r4-r8,lr}
005bae  2101              MOVS     r1,#1
005bb0  488c              LDR      r0,|L1.24036|
005bb2  f7ffbffe          B.W      gran
;;;9100   
;;;9101   }
;;;9102   
                          ENDP

                  cntrl_hndl PROC
;;;9105   //-----------------------------------------------
;;;9106   void cntrl_hndl(void)
005bb6  e92d5ff0          PUSH     {r4-r12,lr}
;;;9107   {
;;;9108   
;;;9109   
;;;9110   
;;;9111   IZMAX_=IZMAX;
005bba  488c              LDR      r0,|L1.24044|
005bbc  4c71              LDR      r4,|L1.23940|
005bbe  8800              LDRH     r0,[r0,#0]  ; IZMAX
005bc0  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9112   
;;;9113   //cntrl_hndl_plazma=10;
;;;9114   
;;;9115   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005bc4  4877              LDR      r0,|L1.23972|
005bc6  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005bc8  b918              CBNZ     r0,|L1.23506|
005bca  4877              LDR      r0,|L1.23976|
005bcc  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005bce  2802              CMP      r0,#2
005bd0  d103              BNE      |L1.23514|
                  |L1.23506|
005bd2  4887              LDR      r0,|L1.24048|
005bd4  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005bd6  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23514|
;;;9116   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005bda  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005bdc  280a              CMP      r0,#0xa
005bde  d103              BNE      |L1.23528|
005be0  4884              LDR      r0,|L1.24052|
005be2  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005be4  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23528|
;;;9117   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005be8  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005bea  280a              CMP      r0,#0xa
005bec  d103              BNE      |L1.23542|
005bee  4982              LDR      r1,|L1.24056|
005bf0  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005bf2  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.23542|
;;;9118   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005bf6  280b              CMP      r0,#0xb
005bf8  d103              BNE      |L1.23554|
005bfa  4880              LDR      r0,|L1.24060|
005bfc  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005bfe  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23554|
;;;9119   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9120   
;;;9121   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005c02  f9b40074          LDRSH    r0,[r4,#0x74]  ; cntrl_stat_blok_cnt
005c06  b118              CBZ      r0,|L1.23568|
005c08  f1a00001          SUB      r0,r0,#1
005c0c  f8a40074          STRH     r0,[r4,#0x74]
                  |L1.23568|
;;;9122   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005c10  f9b40076          LDRSH    r0,[r4,#0x76]  ; cntrl_stat_blok_cnt_
005c14  b118              CBZ      r0,|L1.23582|
005c16  f1a00001          SUB      r0,r0,#1
005c1a  f8a40076          STRH     r0,[r4,#0x76]
                  |L1.23582|
;;;9123   
;;;9124   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005c1e  486e              LDR      r0,|L1.24024|
005c20  f04f080a          MOV      r8,#0xa               ;9116
005c24  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005c28  0789              LSLS     r1,r1,#30
005c2a  d103              BNE      |L1.23604|
005c2c  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005c30  0780              LSLS     r0,r0,#30
005c32  d005              BEQ      |L1.23616|
                  |L1.23604|
005c34  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005c38  fbb0f0f8          UDIV     r0,r0,r8
005c3c  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23616|
;;;9125   
;;;9126   
;;;9127   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9128   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005c40  486f              LDR      r0,|L1.24064|
005c42  2601              MOVS     r6,#1
005c44  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005c48  1e49              SUBS     r1,r1,#1
005c4a  2905              CMP      r1,#5
005c4c  d300              BCC      |L1.23632|
005c4e  8006              STRH     r6,[r0,#0]
                  |L1.23632|
;;;9129   if(ch_cnt0<(10*REG_SPEED))
005c50  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005c54  2500              MOVS     r5,#0                 ;9115
005c56  eb000180          ADD      r1,r0,r0,LSL #2
005c5a  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
005c5c  ebb00f41          CMP      r0,r1,LSL #1
005c60  da08              BGE      |L1.23668|
;;;9130   	{
;;;9131   	ch_cnt0++;
005c62  f1000001          ADD      r0,r0,#1
005c66  b2c0              UXTB     r0,r0
005c68  7560              STRB     r0,[r4,#0x15]
;;;9132   	if(ch_cnt0>=10*REG_SPEED)
005c6a  ebb00f41          CMP      r0,r1,LSL #1
005c6e  db01              BLT      |L1.23668|
;;;9133   		{
;;;9134   		ch_cnt0=0;
005c70  7565              STRB     r5,[r4,#0x15]
;;;9135   		b1Hz_ch=1;
005c72  75a6              STRB     r6,[r4,#0x16]
                  |L1.23668|
;;;9136   		}
;;;9137   	}
;;;9138   #endif
;;;9139   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9140   if(ch_cnt0<10)
;;;9141   	{
;;;9142   	ch_cnt0++;
;;;9143   	if(ch_cnt0>=10)
;;;9144   		{
;;;9145   		ch_cnt0=0;
;;;9146   		b1Hz_ch=1;
;;;9147   		}
;;;9148   	}
;;;9149   #endif
;;;9150   
;;;9151   
;;;9152   if(mess_find_unvol(MESS2CNTRL_HNDL))
005c74  20e1              MOVS     r0,#0xe1
005c76  f7fffffe          BL       mess_find_unvol
;;;9153   	{
;;;9154   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9155   		{
;;;9156   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9157   		}
;;;9158   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9159   		{
;;;9160   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9161   		}
;;;9162   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9163   		{
;;;9164   		static char cntrlStatIsDownCnt;
;;;9165   		cntrl_stat--;
;;;9166   
;;;9167   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9168   			{
;;;9169   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9170   			}
;;;9171   		else 
;;;9172   			{
;;;9173   			cntrlStatIsDownCnt=0;
;;;9174   			}
;;;9175   
;;;9176   		}
;;;9177   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9178   		{
;;;9179   		cntrl_stat/*_new*/=mess_data[1];
;;;9180   		}
;;;9181   
;;;9182   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9183   		{
;;;9184   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9185   		if(bps_U>u_necc)
005c7a  f8dfc188          LDR      r12,|L1.24068|
005c7e  4a42              LDR      r2,|L1.23944|
;;;9186   			{
;;;9187   			cntrl_hndl_plazma=11;
;;;9188   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9189   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9190   			}
;;;9191   		else if(bps_U<u_necc)
;;;9192   			{
;;;9193   			cntrl_hndl_plazma=12;	
;;;9194   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9195   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9196   			}
;;;9197   		#elif defined(UKU_220)
;;;9198   		if(load_U>u_necc)
;;;9199   			{
;;;9200   			cntrl_hndl_plazma=13;
;;;9201   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9202   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9203   			}
;;;9204   		else if(load_U<u_necc)
;;;9205   			{
;;;9206   			cntrl_hndl_plazma=14;	
;;;9207   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9208   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9209   			}
;;;9210   		#elif defined(UKU_220_V2)
;;;9211   		if(load_U>u_necc)
;;;9212   			{
;;;9213   			cntrl_hndl_plazma=15;
;;;9214   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9215   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9216   			}
;;;9217   		else if(load_U<u_necc)
;;;9218   			{
;;;9219   			cntrl_hndl_plazma=16;	
;;;9220   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9221   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9222   			}
;;;9223   		#else
;;;9224   
;;;9225   		if(load_U>u_necc)
;;;9226   			{
;;;9227   			cntrl_hndl_plazma=17;
;;;9228   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9229   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9230   			}
;;;9231   		else if(load_U<u_necc)
;;;9232   			{
;;;9233   			cntrl_hndl_plazma=18;	
;;;9234   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9235   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9236   			}
;;;9237   		#endif	
;;;9238   	 	}
;;;9239   
;;;9240   	/*gran(&cntrl_stat_new,10,1010);			
;;;9241   	cntrl_stat_old=cntrl_stat_new;
;;;9242   	cntrl_stat=cntrl_stat_new;*/
;;;9243   	}
;;;9244   
;;;9245   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9246   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005c80  f8df90e0          LDR      r9,|L1.23908|
;;;9247   	{
;;;9248   	cntrl_stat_new=cntrl_stat_old;
;;;9249   	cntrl_hndl_plazma=19;
;;;9250   	if((Ibmax/10)>(2*IZMAX_))
;;;9251   		{
;;;9252   		cntrl_hndl_plazma=20;
;;;9253             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9254   		else	cntrl_stat_new-=10;
;;;9255   		}		
;;;9256   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9257   		{
;;;9258   		cntrl_hndl_plazma=21;
;;;9259             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9260             else	cntrl_stat_new-=3;
;;;9261   		}   
;;;9262   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9263   		{
;;;9264   		cntrl_hndl_plazma=22;
;;;9265   		cntrl_stat_new--;
;;;9266   		}
;;;9267   		
;;;9268   	else if(bps_U<u_necc)
;;;9269   		{
;;;9270   		cntrl_hndl_plazma=23;
;;;9271   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9272   			{
;;;9273   			cntrl_hndl_plazma=24;
;;;9274   			if(Ibmax<0)
;;;9275   				{
;;;9276   				cntrl_hndl_plazma=25;
;;;9277                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9278   				else cntrl_stat_new+=10;
;;;9279   				}
;;;9280   			else if(Ibmax<(IZMAX_*5))
;;;9281   				{
;;;9282   				cntrl_hndl_plazma=26;
;;;9283                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9284   				else	cntrl_stat_new+=2;
;;;9285   				}
;;;9286   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9287   				{
;;;9288   				cntrl_hndl_plazma=27;
;;;9289   				cntrl_stat_new++;
;;;9290   				}					
;;;9291   			}
;;;9292   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9293   			{
;;;9294   			cntrl_hndl_plazma=28;
;;;9295   			if(Ibmax<(IZMAX_*5))
;;;9296   				{
;;;9297   				cntrl_hndl_plazma=29;
;;;9298                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9299   				else	cntrl_stat_new+=2;
;;;9300   				}
;;;9301   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9302   				{
;;;9303   				cntrl_hndl_plazma=30;
;;;9304   				cntrl_stat_new++;
;;;9305   				}					
;;;9306   			}	
;;;9307   		else if(bps_U<(u_necc-1))
;;;9308   			{
;;;9309   			cntrl_hndl_plazma=31;
;;;9310   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9311   				{
;;;9312   				cntrl_hndl_plazma=32;
;;;9313   				cntrl_stat_new++;
;;;9314   				}					
;;;9315   			}					
;;;9316   		}	
;;;9317   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9318   		{ 	
;;;9319   		cntrl_hndl_plazma=33;
;;;9320   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9321   			{
;;;9322   			cntrl_hndl_plazma=34;
;;;9323                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9324   			else	cntrl_stat_new-=10;
;;;9325   			}
;;;9326   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9327   			{
;;;9328   			cntrl_hndl_plazma=35;
;;;9329                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9330   			else cntrl_stat_new-=2;
;;;9331   			}	
;;;9332   		else if(bps_U>(u_necc+1))
;;;9333   			{
;;;9334   			cntrl_hndl_plazma=36;
;;;9335   			cntrl_stat_new--;
;;;9336   			}					
;;;9337   		}
;;;9338   
;;;9339   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9340   		{
;;;9341   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9342   		}
;;;9343   
;;;9344   	gran(&cntrl_stat_new,10,1010);			
;;;9345   	cntrl_stat_old=cntrl_stat_new;
;;;9346   	cntrl_stat=cntrl_stat_new;
;;;9347   	
;;;9348   	if(ICA_EN==0)
;;;9349   		{
;;;9350   		if(ica_cntrl_hndl_cnt)
005c84  4f60              LDR      r7,|L1.24072|
005c86  b398              CBZ      r0,|L1.23792|
005c88  4938              LDR      r1,|L1.23916|
005c8a  6808              LDR      r0,[r1,#0]            ;9154  ; mess_data
005c8c  2864              CMP      r0,#0x64              ;9154
005c8e  d008              BEQ      |L1.23714|
005c90  2869              CMP      r0,#0x69              ;9158
005c92  d00b              BEQ      |L1.23724|
005c94  286e              CMP      r0,#0x6e              ;9162
005c96  d00f              BEQ      |L1.23736|
005c98  28e5              CMP      r0,#0xe5              ;9177
005c9a  d02c              BEQ      |L1.23798|
005c9c  28e6              CMP      r0,#0xe6              ;9182
005c9e  d02d              BEQ      |L1.23804|
                  |L1.23712|
005ca0  e222              B        |L1.24808|
                  |L1.23714|
005ca2  6848              LDR      r0,[r1,#4]            ;9156  ; mess_data
005ca4  8ea1              LDRH     r1,[r4,#0x34]         ;9156  ; cntrl_stat_old
005ca6  4408              ADD      r0,r0,r1              ;9156
005ca8  8660              STRH     r0,[r4,#0x32]         ;9156
005caa  e21d              B        |L1.24808|
                  |L1.23724|
005cac  6848              LDR      r0,[r1,#4]            ;9160  ; mess_data
005cae  8ea1              LDRH     r1,[r4,#0x34]         ;9160  ; cntrl_stat_old
005cb0  eba10000          SUB      r0,r1,r0              ;9160
005cb4  8660              STRH     r0,[r4,#0x32]         ;9160
005cb6  e217              B        |L1.24808|
                  |L1.23736|
005cb8  8e60              LDRH     r0,[r4,#0x32]         ;9165  ; cntrl_stat
005cba  f1a00001          SUB      r0,r0,#1              ;9165
005cbe  b200              SXTH     r0,r0                 ;9165
005cc0  8660              STRH     r0,[r4,#0x32]         ;9165
005cc2  281e              CMP      r0,#0x1e              ;9167
005cc4  dd07              BLE      |L1.23766|
005cc6  4851              LDR      r0,|L1.24076|
005cc8  4951              LDR      r1,|L1.24080|
005cca  f9b00000          LDRSH    r0,[r0,#0]            ;9167  ; load_U
005cce  f9b11000          LDRSH    r1,[r1,#0]            ;9167  ; USIGN
005cd2  4288              CMP      r0,r1                 ;9167
005cd4  da0d              BGE      |L1.23794|
                  |L1.23766|
005cd6  7be0              LDRB     r0,[r4,#0xf]          ;9169  ; cntrlStatIsDownCnt
005cd8  1c40              ADDS     r0,r0,#1              ;9169
005cda  b2c0              UXTB     r0,r0                 ;9169
005cdc  73e0              STRB     r0,[r4,#0xf]          ;9169
005cde  28fa              CMP      r0,#0xfa              ;9169
005ce0  d1de              BNE      |L1.23712|
005ce2  230a              MOVS     r3,#0xa               ;9169
005ce4  2200              MOVS     r2,#0                 ;9169
005ce6  21e7              MOVS     r1,#0xe7              ;9169
005ce8  20e6              MOVS     r0,#0xe6              ;9169
005cea  f7fffffe          BL       mess_send
005cee  e1fb              B        |L1.24808|
                  |L1.23792|
005cf0  e09c              B        |L1.24108|
                  |L1.23794|
005cf2  73e5              STRB     r5,[r4,#0xf]          ;9173
005cf4  e1f8              B        |L1.24808|
                  |L1.23798|
005cf6  6848              LDR      r0,[r1,#4]            ;9179  ; mess_data
005cf8  8660              STRH     r0,[r4,#0x32]         ;9179
005cfa  e1f5              B        |L1.24808|
                  |L1.23804|
005cfc  f9bc0000          LDRSH    r0,[r12,#0]           ;9185  ; bps_U
005d00  f9b21000          LDRSH    r1,[r2,#0]            ;9185  ; u_necc
005d04  4288              CMP      r0,r1                 ;9185
005d06  dd1a              BLE      |L1.23870|
005d08  f04f020b          MOV      r2,#0xb               ;9187
005d0c  f884202e          STRB     r2,[r4,#0x2e]         ;9187
005d10  eba00001          SUB      r0,r0,r1              ;9188
005d14  2828              CMP      r0,#0x28              ;9188
005d16  dd07              BLE      |L1.23848|
005d18  f9b40032          LDRSH    r0,[r4,#0x32]         ;9188  ; cntrl_stat
005d1c  2800              CMP      r0,#0                 ;9188
005d1e  dd03              BLE      |L1.23848|
005d20  f1a00005          SUB      r0,r0,#5              ;9188
005d24  8660              STRH     r0,[r4,#0x32]         ;9188
005d26  e1df              B        |L1.24808|
                  |L1.23848|
005d28  f9b40032          LDRSH    r0,[r4,#0x32]         ;9189  ; cntrl_stat
005d2c  2800              CMP      r0,#0                 ;9189
005d2e  d0b7              BEQ      |L1.23712|
005d30  7da1              LDRB     r1,[r4,#0x16]         ;9189  ; b1Hz_ch
005d32  2900              CMP      r1,#0                 ;9189
005d34  d0b4              BEQ      |L1.23712|
005d36  f1a00001          SUB      r0,r0,#1              ;9189
005d3a  8660              STRH     r0,[r4,#0x32]         ;9189
                  |L1.23868|
005d3c  e1d4              B        |L1.24808|
                  |L1.23870|
005d3e  daaf              BGE      |L1.23712|
005d40  f04f020c          MOV      r2,#0xc               ;9193
005d44  f884202e          STRB     r2,[r4,#0x2e]         ;9193
005d48  eba10000          SUB      r0,r1,r0              ;9194
005d4c  2828              CMP      r0,#0x28              ;9194
005d4e  dd61              BLE      |L1.24084|
005d50  f9b40032          LDRSH    r0,[r4,#0x32]         ;9194  ; cntrl_stat
005d54  f24031f7          MOV      r1,#0x3f7             ;9194
005d58  4288              CMP      r0,r1                 ;9194
005d5a  da5b              BGE      |L1.24084|
005d5c  f1000005          ADD      r0,r0,#5              ;9194
005d60  8660              STRH     r0,[r4,#0x32]         ;9194
                  |L1.23906|
005d62  e1c1              B        |L1.24808|
                  |L1.23908|
                          DCD      bps
                  |L1.23912|
                          DCD      NUMIST
                  |L1.23916|
                          DCD      mess_data
                  |L1.23920|
                          DCD      uavt_set_result_stat
                  |L1.23924|
                          DCD      avt_plazma
                  |L1.23928|
                          DCD      TERMOKOMPENS
                  |L1.23932|
                          DCD      UB20
                  |L1.23936|
                          DCD      UVZ
                  |L1.23940|
                          DCD      ||area_number.25||
                  |L1.23944|
                          DCD      u_necc
                  |L1.23948|
                          DCD      ND_EXT
                  |L1.23952|
                          DCD      t_ext
                  |L1.23956|
                          DCD      mat_temper
                  |L1.23960|
                          DCD      UB0
                  |L1.23964|
                          DCD      sk_stat
                  |L1.23968|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.23972|
                          DCD      speedChIsOn
                  |L1.23976|
                          DCD      sp_ch_stat
                  |L1.23980|
                          DCD      speedChrgVolt
                  |L1.23984|
                          DCD      hv_vz_stat
                  |L1.23988|
                          DCD      UZ_U
                  |L1.23992|
                          DCD      FZ_U1
                  |L1.23996|
                          DCD      FZ_U2
                  |L1.24000|
                          DCD      uavt_set_stat
                  |L1.24004|
                          DCD      U_AVT
                  |L1.24008|
                          DCD      u_necc_dn
                  |L1.24012|
                          DCD      u_necc_up
                  |L1.24016|
                          DCD      Isumm
                  |L1.24020|
                          DCD      Isumm_
                  |L1.24024|
                          DCD      bat
                  |L1.24028|
                          DCD      IMAX
                  |L1.24032|
                          DCD      IMIN
                  |L1.24036|
                          DCD      num_necc
                  |L1.24040|
                          DCD      PAR
                  |L1.24044|
                          DCD      IZMAX
                  |L1.24048|
                          DCD      speedChrgCurr
                  |L1.24052|
                          DCD      UZ_IMAX
                  |L1.24056|
                          DCD      FZ_IMAX1
                  |L1.24060|
                          DCD      FZ_IMAX2
                  |L1.24064|
                          DCD      REG_SPEED
                  |L1.24068|
                          DCD      bps_U
                  |L1.24072|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.24076|
                          DCD      load_U
                  |L1.24080|
                          DCD      USIGN
                  |L1.24084|
005e14  f9b40032          LDRSH    r0,[r4,#0x32]         ;9195  ; cntrl_stat
005e18  f5b07f7f          CMP      r0,#0x3fc             ;9195
005e1c  da8e              BGE      |L1.23868|
005e1e  7da1              LDRB     r1,[r4,#0x16]         ;9195  ; b1Hz_ch
005e20  2900              CMP      r1,#0                 ;9195
005e22  d08b              BEQ      |L1.23868|
005e24  f1000001          ADD      r0,r0,#1              ;9195
005e28  8660              STRH     r0,[r4,#0x32]         ;9195
005e2a  e15d              B        |L1.24808|
                  |L1.24108|
005e2c  7da0              LDRB     r0,[r4,#0x16]         ;9246  ; b1Hz_ch
005e2e  2800              CMP      r0,#0                 ;9246
005e30  d084              BEQ      |L1.23868|
005e32  48f8              LDR      r0,|L1.25108|
005e34  8800              LDRH     r0,[r0,#0]            ;9246  ; bIBAT_SMKLBR
005e36  b118              CBZ      r0,|L1.24128|
005e38  f8990323          LDRB     r0,[r9,#0x323]        ;9246  ; bps
005e3c  2828              CMP      r0,#0x28              ;9246
005e3e  d990              BLS      |L1.23906|
                  |L1.24128|
005e40  f104042e          ADD      r4,r4,#0x2e           ;9248
005e44  f9b40006          LDRSH    r0,[r4,#6]            ;9248  ; cntrl_stat_old
005e48  8360              STRH     r0,[r4,#0x1a]         ;9248
005e4a  f04f0113          MOV      r1,#0x13              ;9249
005e4e  7021              STRB     r1,[r4,#0]            ;9249
005e50  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9250  ; Ibmax
005e54  8be3              LDRH     r3,[r4,#0x1e]         ;9250  ; IZMAX_
005e56  fb91f8f8          SDIV     r8,r1,r8              ;9250
005e5a  f1a4042e          SUB      r4,r4,#0x2e           ;9250
005e5e  ebb80f43          CMP      r8,r3,LSL #1          ;9250
005e62  dd10              BLE      |L1.24198|
005e64  f04f0114          MOV      r1,#0x14              ;9252
005e68  f884102e          STRB     r1,[r4,#0x2e]         ;9252
005e6c  f8b41074          LDRH     r1,[r4,#0x74]         ;9253  ; cntrl_stat_blok_cnt
005e70  b121              CBZ      r1,|L1.24188|
005e72  f1a00001          SUB      r0,r0,#1              ;9253
005e76  f8a40048          STRH     r0,[r4,#0x48]         ;9253
005e7a  e0ff              B        |L1.24700|
                  |L1.24188|
005e7c  f1a0000a          SUB      r0,r0,#0xa            ;9254
005e80  f8a40048          STRH     r0,[r4,#0x48]         ;9254
005e84  e0fa              B        |L1.24700|
                  |L1.24198|
005e86  da14              BGE      |L1.24242|
005e88  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9256
005e8c  458a              CMP      r10,r1                ;9256
005e8e  da10              BGE      |L1.24242|
005e90  f04f0115          MOV      r1,#0x15              ;9258
005e94  f884102e          STRB     r1,[r4,#0x2e]         ;9258
005e98  f8b41074          LDRH     r1,[r4,#0x74]         ;9259  ; cntrl_stat_blok_cnt
005e9c  b121              CBZ      r1,|L1.24232|
005e9e  f1a00001          SUB      r0,r0,#1              ;9259
005ea2  f8a40048          STRH     r0,[r4,#0x48]         ;9259
005ea6  e0e9              B        |L1.24700|
                  |L1.24232|
005ea8  f1a00003          SUB      r0,r0,#3              ;9260
005eac  f8a40048          STRH     r0,[r4,#0x48]         ;9260
005eb0  e0e4              B        |L1.24700|
                  |L1.24242|
005eb2  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9262
005eb6  458a              CMP      r10,r1                ;9262
005eb8  dd0a              BLE      |L1.24272|
005eba  4598              CMP      r8,r3                 ;9262
005ebc  dd08              BLE      |L1.24272|
005ebe  f04f0116          MOV      r1,#0x16              ;9264
005ec2  f884102e          STRB     r1,[r4,#0x2e]         ;9264
005ec6  f1a00001          SUB      r0,r0,#1              ;9265
005eca  f8a40048          STRH     r0,[r4,#0x48]         ;9265
005ece  e0d5              B        |L1.24700|
                  |L1.24272|
005ed0  f9bcc000          LDRSH    r12,[r12,#0]          ;9268  ; bps_U
005ed4  f9b22000          LDRSH    r2,[r2,#0]            ;9268  ; u_necc
005ed8  f8df833c          LDR      r8,|L1.25112|
005edc  f8dfb33c          LDR      r11,|L1.25116|
005ee0  4594              CMP      r12,r2                ;9268
005ee2  da72              BGE      |L1.24522|
005ee4  f04f0a17          MOV      r10,#0x17             ;9270
005ee8  f884a02e          STRB     r10,[r4,#0x2e]        ;9270
005eec  f9b88000          LDRSH    r8,[r8,#0]            ;9271  ; UB0
005ef0  f9bba000          LDRSH    r10,[r11,#0]          ;9271  ; UB20
005ef4  eba8080a          SUB      r8,r8,r10             ;9271
005ef8  eba20a08          SUB      r10,r2,r8             ;9271
005efc  45e2              CMP      r10,r12               ;9271
005efe  dd37              BLE      |L1.24432|
005f00  f04f0218          MOV      r2,#0x18              ;9273
005f04  f884202e          STRB     r2,[r4,#0x2e]         ;9273
005f08  2900              CMP      r1,#0                 ;9274
005f0a  da10              BGE      |L1.24366|
005f0c  f04f0119          MOV      r1,#0x19              ;9276
005f10  f884102e          STRB     r1,[r4,#0x2e]         ;9276
005f14  f8b41074          LDRH     r1,[r4,#0x74]         ;9277  ; cntrl_stat_blok_cnt
005f18  b121              CBZ      r1,|L1.24356|
005f1a  f1000001          ADD      r0,r0,#1              ;9277
005f1e  f8a40048          STRH     r0,[r4,#0x48]         ;9277
005f22  e0ab              B        |L1.24700|
                  |L1.24356|
005f24  f100000a          ADD      r0,r0,#0xa            ;9278
005f28  f8a40048          STRH     r0,[r4,#0x48]         ;9278
005f2c  e0a6              B        |L1.24700|
                  |L1.24366|
005f2e  eb030283          ADD      r2,r3,r3,LSL #2       ;9280
005f32  428a              CMP      r2,r1                 ;9280
005f34  dd10              BLE      |L1.24408|
005f36  f04f011a          MOV      r1,#0x1a              ;9282
005f3a  f884102e          STRB     r1,[r4,#0x2e]         ;9282
005f3e  f8b41074          LDRH     r1,[r4,#0x74]         ;9283  ; cntrl_stat_blok_cnt
005f42  b121              CBZ      r1,|L1.24398|
005f44  f1000001          ADD      r0,r0,#1              ;9283
005f48  f8a40048          STRH     r0,[r4,#0x48]         ;9283
005f4c  e096              B        |L1.24700|
                  |L1.24398|
005f4e  f1000002          ADD      r0,r0,#2              ;9284
005f52  f8a40048          STRH     r0,[r4,#0x48]         ;9284
005f56  e091              B        |L1.24700|
                  |L1.24408|
005f58  ebb10f42          CMP      r1,r2,LSL #1          ;9286
005f5c  da07              BGE      |L1.24430|
005f5e  f04f011b          MOV      r1,#0x1b              ;9288
005f62  f884102e          STRB     r1,[r4,#0x2e]         ;9288
005f66  f1000001          ADD      r0,r0,#1              ;9289
005f6a  f8a40048          STRH     r0,[r4,#0x48]         ;9289
                  |L1.24430|
005f6e  e085              B        |L1.24700|
                  |L1.24432|
005f70  ea4f7ae8          ASR      r10,r8,#31            ;9292
005f74  eb08789a          ADD      r8,r8,r10,LSR #30     ;9292
005f78  eba208a8          SUB      r8,r2,r8,ASR #2       ;9292
005f7c  45e0              CMP      r8,r12                ;9292
005f7e  dd25              BLE      |L1.24524|
005f80  f04f021c          MOV      r2,#0x1c              ;9294
005f84  f884202e          STRB     r2,[r4,#0x2e]         ;9294
005f88  eb030283          ADD      r2,r3,r3,LSL #2       ;9295
005f8c  428a              CMP      r2,r1                 ;9295
005f8e  dd10              BLE      |L1.24498|
005f90  f04f011d          MOV      r1,#0x1d              ;9297
005f94  f884102e          STRB     r1,[r4,#0x2e]         ;9297
005f98  f8b41074          LDRH     r1,[r4,#0x74]         ;9298  ; cntrl_stat_blok_cnt
005f9c  b121              CBZ      r1,|L1.24488|
005f9e  f1000001          ADD      r0,r0,#1              ;9298
005fa2  f8a40048          STRH     r0,[r4,#0x48]         ;9298
005fa6  e069              B        |L1.24700|
                  |L1.24488|
005fa8  f1000002          ADD      r0,r0,#2              ;9299
005fac  f8a40048          STRH     r0,[r4,#0x48]         ;9299
005fb0  e064              B        |L1.24700|
                  |L1.24498|
005fb2  ebb10f42          CMP      r1,r2,LSL #1          ;9301
005fb6  da61              BGE      |L1.24700|
005fb8  f04f011e          MOV      r1,#0x1e              ;9303
005fbc  f884102e          STRB     r1,[r4,#0x2e]         ;9303
005fc0  f1000001          ADD      r0,r0,#1              ;9304
005fc4  f8a40048          STRH     r0,[r4,#0x48]         ;9304
005fc8  e058              B        |L1.24700|
                  |L1.24522|
005fca  e014              B        |L1.24566|
                  |L1.24524|
005fcc  1e52              SUBS     r2,r2,#1              ;9307
005fce  4594              CMP      r12,r2                ;9307
005fd0  da54              BGE      |L1.24700|
005fd2  f04f021f          MOV      r2,#0x1f              ;9309
005fd6  f884202e          STRB     r2,[r4,#0x2e]         ;9309
005fda  eb030283          ADD      r2,r3,r3,LSL #2       ;9310
005fde  ebb10f42          CMP      r1,r2,LSL #1          ;9310
005fe2  da4b              BGE      |L1.24700|
005fe4  f04f0120          MOV      r1,#0x20              ;9312
005fe8  f884102e          STRB     r1,[r4,#0x2e]         ;9312
005fec  f1000001          ADD      r0,r0,#1              ;9313
005ff0  f8a40048          STRH     r0,[r4,#0x48]         ;9313
005ff4  e042              B        |L1.24700|
                  |L1.24566|
005ff6  dd41              BLE      |L1.24700|
005ff8  f04f0121          MOV      r1,#0x21              ;9319
005ffc  f884102e          STRB     r1,[r4,#0x2e]         ;9319
006000  f9b81000          LDRSH    r1,[r8,#0]            ;9320  ; UB0
006004  f9bb3000          LDRSH    r3,[r11,#0]           ;9320  ; UB20
006008  eba10103          SUB      r1,r1,r3              ;9320
00600c  eb010302          ADD      r3,r1,r2              ;9320
006010  4563              CMP      r3,r12                ;9320
006012  da10              BGE      |L1.24630|
006014  f04f0122          MOV      r1,#0x22              ;9322
006018  f884102e          STRB     r1,[r4,#0x2e]         ;9322
00601c  f8b41074          LDRH     r1,[r4,#0x74]         ;9323  ; cntrl_stat_blok_cnt
006020  b121              CBZ      r1,|L1.24620|
006022  f1a00001          SUB      r0,r0,#1              ;9323
006026  f8a40048          STRH     r0,[r4,#0x48]         ;9323
00602a  e027              B        |L1.24700|
                  |L1.24620|
00602c  f1a0000a          SUB      r0,r0,#0xa            ;9324
006030  f8a40048          STRH     r0,[r4,#0x48]         ;9324
006034  e022              B        |L1.24700|
                  |L1.24630|
006036  17cb              ASRS     r3,r1,#31             ;9326
006038  eb017193          ADD      r1,r1,r3,LSR #30      ;9326
00603c  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9326
006040  4561              CMP      r1,r12                ;9326
006042  da10              BGE      |L1.24678|
006044  f04f0123          MOV      r1,#0x23              ;9328
006048  f884102e          STRB     r1,[r4,#0x2e]         ;9328
00604c  f8b41074          LDRH     r1,[r4,#0x74]         ;9329  ; cntrl_stat_blok_cnt
006050  b121              CBZ      r1,|L1.24668|
006052  f1a00001          SUB      r0,r0,#1              ;9329
006056  f8a40048          STRH     r0,[r4,#0x48]         ;9329
00605a  e00f              B        |L1.24700|
                  |L1.24668|
00605c  f1a00002          SUB      r0,r0,#2              ;9330
006060  f8a40048          STRH     r0,[r4,#0x48]         ;9330
006064  e00a              B        |L1.24700|
                  |L1.24678|
006066  1c52              ADDS     r2,r2,#1              ;9332
006068  4594              CMP      r12,r2                ;9332
00606a  dd07              BLE      |L1.24700|
00606c  f04f0124          MOV      r1,#0x24              ;9334
006070  f884102e          STRB     r1,[r4,#0x2e]         ;9334
006074  f1a00001          SUB      r0,r0,#1              ;9335
006078  f8a40048          STRH     r0,[r4,#0x48]         ;9335
                  |L1.24700|
00607c  4868              LDR      r0,|L1.25120|
00607e  7961              LDRB     r1,[r4,#5]            ;9339  ; vz1_stat
006080  7800              LDRB     r0,[r0,#0]            ;9339  ; hv_vz_stat
006082  4308              ORRS     r0,r0,r1              ;9339
006084  79e1              LDRB     r1,[r4,#7]            ;9339  ; vz2_stat
006086  4308              ORRS     r0,r0,r1              ;9339
006088  d10e              BNE      |L1.24744|
00608a  4866              LDR      r0,|L1.25124|
00608c  7840              LDRB     r0,[r0,#1]            ;9341  ; sk_stat
00608e  2801              CMP      r0,#1                 ;9341
006090  d10a              BNE      |L1.24744|
006092  4865              LDR      r0,|L1.25128|
006094  7840              LDRB     r0,[r0,#1]            ;9341  ; sk_stat_old
006096  b938              CBNZ     r0,|L1.24744|
006098  4864              LDR      r0,|L1.25132|
00609a  8800              LDRH     r0,[r0,#0]            ;9341  ; VZ_KIND
00609c  2801              CMP      r0,#1                 ;9341
00609e  d103              BNE      |L1.24744|
0060a0  f04f0032          MOV      r0,#0x32              ;9341
0060a4  f8a40048          STRH     r0,[r4,#0x48]         ;9341
                  |L1.24744|
0060a8  f24032f2          MOV      r2,#0x3f2             ;9344
0060ac  210a              MOVS     r1,#0xa               ;9344
0060ae  4860              LDR      r0,|L1.25136|
0060b0  f7fffffe          BL       gran
0060b4  f8b40048          LDRH     r0,[r4,#0x48]         ;9345  ; cntrl_stat_new
0060b8  86a0              STRH     r0,[r4,#0x34]         ;9345
0060ba  8660              STRH     r0,[r4,#0x32]         ;9346
0060bc  485d              LDR      r0,|L1.25140|
0060be  f9b00000          LDRSH    r0,[r0,#0]            ;9348  ; ICA_EN
0060c2  b938              CBNZ     r0,|L1.24788|
0060c4  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
0060c6  b129              CBZ      r1,|L1.24788|
;;;9351   			{
;;;9352   			cntrl_stat = ica_cntrl_hndl;
0060c8  495b              LDR      r1,|L1.25144|
0060ca  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
0060cc  8661              STRH     r1,[r4,#0x32]
;;;9353   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
0060ce  f8a41048          STRH     r1,[r4,#0x48]
;;;9354   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
0060d2  86a1              STRH     r1,[r4,#0x34]
                  |L1.24788|
;;;9355   			}
;;;9356   		}
;;;9357   	
;;;9358   	if((ICA_EN==1)||(ICA_EN==2))
0060d4  2801              CMP      r0,#1
0060d6  d001              BEQ      |L1.24796|
0060d8  2802              CMP      r0,#2
0060da  d105              BNE      |L1.24808|
                  |L1.24796|
;;;9359   		{
;;;9360   		cntrl_stat=cntrl_stat_new+ica_u_necc;
0060dc  4957              LDR      r1,|L1.25148|
0060de  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
0060e2  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
0060e4  4408              ADD      r0,r0,r1
0060e6  8660              STRH     r0,[r4,#0x32]
                  |L1.24808|
;;;9361   		}			
;;;9362   	}
;;;9363   #else
;;;9364   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9365   	{
;;;9366   	cntrl_hndl_plazma=37;
;;;9367   	cntrl_stat_new=cntrl_stat_old;
;;;9368   	
;;;9369   	if((Ibmax/10)>(2*IZMAX_))
;;;9370   		{
;;;9371   		cntrl_hndl_plazma=38;
;;;9372             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9373   		else	cntrl_stat_new-=10;
;;;9374   		}		
;;;9375   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9376   		{
;;;9377   		cntrl_hndl_plazma=39;
;;;9378             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9379             else	cntrl_stat_new-=3;
;;;9380   		}   
;;;9381   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9382   		{
;;;9383   		cntrl_hndl_plazma=40;
;;;9384   		cntrl_stat_new--;
;;;9385   		}
;;;9386   		
;;;9387   	else if(load_U<u_necc)
;;;9388   		{
;;;9389   		cntrl_hndl_plazma=41;
;;;9390   		if(load_U<(u_necc-(UB0-UB20)))
;;;9391   			{
;;;9392   			cntrl_hndl_plazma=42;
;;;9393   			if(Ibmax<0)
;;;9394   				{
;;;9395   				cntrl_hndl_plazma=43;
;;;9396                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9397   				else cntrl_stat_new+=10;
;;;9398   				}
;;;9399   			else if(Ibmax<(IZMAX_*5))
;;;9400   				{
;;;9401   				cntrl_hndl_plazma=44;
;;;9402                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9403   				else	cntrl_stat_new+=2;
;;;9404   				}
;;;9405   			else if(Ibmax<((IZMAX_*95)/10))
;;;9406   				{
;;;9407   				cntrl_hndl_plazma=45;
;;;9408   				cntrl_stat_new++;
;;;9409   				}					
;;;9410   			}
;;;9411   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9412   			{
;;;9413   			cntrl_hndl_plazma=46;
;;;9414   			if(Ibmax<(IZMAX_*5))
;;;9415   				{
;;;9416   				cntrl_hndl_plazma=47;
;;;9417                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9418   				else	cntrl_stat_new+=2;
;;;9419   				}
;;;9420   			else if(Ibmax<((IZMAX_*95)/10))
;;;9421   				{
;;;9422   				cntrl_hndl_plazma=48;
;;;9423   				cntrl_stat_new++;
;;;9424   				}					
;;;9425   			}	
;;;9426   		else if(load_U<(u_necc-1))
;;;9427   			{
;;;9428   			cntrl_hndl_plazma=49;
;;;9429   			if(Ibmax<((IZMAX_*95)/10))
;;;9430   				{
;;;9431   				cntrl_hndl_plazma=50;
;;;9432   				cntrl_stat_new++;
;;;9433   				}					
;;;9434   			}					
;;;9435   		}	
;;;9436   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9437   		{
;;;9438   		cntrl_hndl_plazma=51;
;;;9439   		if(load_U>(u_necc+(UB0-UB20)))
;;;9440   			{
;;;9441   			cntrl_hndl_plazma=52;
;;;9442                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9443   			else	cntrl_stat_new-=10;
;;;9444   			}
;;;9445   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9446   			{
;;;9447   			cntrl_hndl_plazma=53;
;;;9448                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9449   			else cntrl_stat_new-=2;
;;;9450   			}	
;;;9451   		else if(load_U>(u_necc+1))
;;;9452   			{
;;;9453   			cntrl_hndl_plazma=54;
;;;9454   			cntrl_stat_new--;
;;;9455   			}					
;;;9456   		}
;;;9457   
;;;9458   	gran(&cntrl_stat_new,10,1022);			
;;;9459   	cntrl_stat_old=cntrl_stat_new;
;;;9460   	cntrl_stat=cntrl_stat_new;	
;;;9461   	}
;;;9462   #endif
;;;9463   
;;;9464   iiii=0;
0060e8  7625              STRB     r5,[r4,#0x18]
;;;9465   for(i=0;i<NUMIST;i++)
0060ea  75e5              STRB     r5,[r4,#0x17]
0060ec  4854              LDR      r0,|L1.25152|
0060ee  f9b01000          LDRSH    r1,[r0,#0]
0060f2  e00c              B        |L1.24846|
                  |L1.24820|
;;;9466        {
;;;9467        if(bps[i]._cnt<30)iiii=1;
0060f4  eb0002c0          ADD      r2,r0,r0,LSL #3
0060f8  eb021200          ADD      r2,r2,r0,LSL #4
0060fc  eb090282          ADD      r2,r9,r2,LSL #2
006100  78d2              LDRB     r2,[r2,#3]
006102  2a1e              CMP      r2,#0x1e
006104  d200              BCS      |L1.24840|
006106  7626              STRB     r6,[r4,#0x18]
                  |L1.24840|
006108  f1000001          ADD      r0,r0,#1              ;9465
00610c  75e0              STRB     r0,[r4,#0x17]         ;9465
                  |L1.24846|
00610e  7de0              LDRB     r0,[r4,#0x17]         ;9465  ; i
006110  4288              CMP      r0,r1                 ;9465
006112  dbef              BLT      |L1.24820|
;;;9468        }
;;;9469   
;;;9470   if(iiii==0)
006114  7e20              LDRB     r0,[r4,#0x18]  ; iiii
006116  b948              CBNZ     r0,|L1.24876|
;;;9471   	{
;;;9472   	cntrl_stat=600;	
;;;9473   	cntrl_stat_old=600;
;;;9474   	cntrl_stat_new=600;
;;;9475   	cntrl_stat=10*PWM_START;
006118  484a              LDR      r0,|L1.25156|
00611a  8800              LDRH     r0,[r0,#0]  ; PWM_START
00611c  eb000080          ADD      r0,r0,r0,LSL #2
006120  ea4f0040          LSL      r0,r0,#1
006124  8660              STRH     r0,[r4,#0x32]
;;;9476   	cntrl_stat_old=10*PWM_START;
006126  86a0              STRH     r0,[r4,#0x34]
;;;9477   	cntrl_stat_new=10*PWM_START;
006128  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.24876|
;;;9478   	}
;;;9479   
;;;9480   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9481   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
00612c  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
006130  b110              CBZ      r0,|L1.24888|
006132  f1a00001          SUB      r0,r0,#1
006136  8038              STRH     r0,[r7,#0]
                  |L1.24888|
;;;9482   
;;;9483   
;;;9484   
;;;9485   #endif
;;;9486   
;;;9487   
;;;9488   gran(&cntrl_stat,10,1022); 
006138  483d              LDR      r0,|L1.25136|
00613a  f24032fe          MOV      r2,#0x3fe
00613e  210a              MOVS     r1,#0xa
006140  3816              SUBS     r0,r0,#0x16
006142  f7fffffe          BL       gran
;;;9489   b1Hz_ch=0;
006146  75a5              STRB     r5,[r4,#0x16]
                  |L1.24904|
;;;9490   }
006148  e8bd9ff0          POP      {r4-r12,pc}
;;;9491   #endif
                          ENDP

                  ext_drv PROC
;;;9980   //-----------------------------------------------
;;;9981   void ext_drv(void)
00614c  e92d5ff0          PUSH     {r4-r12,lr}
;;;9982   {
;;;9983   char i;
;;;9984   
;;;9985   
;;;9986   for(i=0;i<NUMSK;i++)
006150  f04f0000          MOV      r0,#0
006154  4a3d              LDR      r2,|L1.25164|
;;;9987   	{
;;;9988   	#ifdef UKU_MGTS
;;;9989   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9990   	#endif
;;;9991   	#ifdef UKU_RSTKM
;;;9992   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9993   	#endif
;;;9994   	#ifdef UKU_3U
;;;9995   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;9996   	#endif
;;;9997   	#ifdef UKU_GLONASS
;;;9998   	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;9999   	#endif
;;;10000  	#ifdef UKU_KONTUR
;;;10001  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10002  	#endif
;;;10003  	#ifdef UKU_6U
;;;10004  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10005  	#endif
;;;10006  	#ifdef UKU_220
;;;10007  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10008  	#endif
;;;10009  	#ifdef UKU_220_V2
;;;10010  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10011  	#endif
;;;10012  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10013  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10014  	#endif
;;;10015  	#ifdef UKU_TELECORE2015	
;;;10016  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10017  	#endif
;;;10018  	#ifdef UKU_TELECORE2017
;;;10019  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10020  	#endif
;;;10021  	#ifdef IPS_SGEP_GAZPROM
;;;10022  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10023  	#endif		
;;;10024  		{
;;;10025  		if(sk_cnt[i]<10)
006156  4b3c              LDR      r3,|L1.25160|
;;;10026  			{
;;;10027  			sk_cnt[i]++;
;;;10028  			if(sk_cnt[i]>=10)
;;;10029  				{
;;;10030  				sk_stat[i]=ssON;
006158  4d32              LDR      r5,|L1.25124|
00615a  f04f0a01          MOV      r10,#1
;;;10031  				}
;;;10032  			}
;;;10033  		else 
;;;10034  			{
;;;10035  			sk_cnt[i]=10;
00615e  f04f0b0a          MOV      r11,#0xa
006162  4606              MOV      r6,r0                 ;9986
006164  f9b24000          LDRSH    r4,[r2,#0]            ;9986
006168  e025              B        |L1.25014|
                  |L1.24938|
00616a  4939              LDR      r1,|L1.25168|
00616c  4f39              LDR      r7,|L1.25172|
00616e  5c09              LDRB     r1,[r1,r0]            ;10013
006170  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10013
006174  f5b16ffa          CMP      r1,#0x7d0             ;10013
006178  da0e              BGE      |L1.24984|
00617a  5619              LDRSB    r1,[r3,r0]            ;10025
00617c  290a              CMP      r1,#0xa               ;10025
00617e  da08              BGE      |L1.24978|
006180  f1010101          ADD      r1,r1,#1              ;10027
006184  b249              SXTB     r1,r1                 ;10027
006186  5419              STRB     r1,[r3,r0]            ;10027
006188  290a              CMP      r1,#0xa               ;10028
00618a  db11              BLT      |L1.25008|
00618c  f805a000          STRB     r10,[r5,r0]           ;10030
006190  e00e              B        |L1.25008|
                  |L1.24978|
006192  f803b000          STRB     r11,[r3,r0]
006196  e00b              B        |L1.25008|
                  |L1.24984|
;;;10036  			}
;;;10037                 
;;;10038  		}
;;;10039  	else
;;;10040  		{
;;;10041  		if(sk_cnt[i]>0)
006198  5619              LDRSB    r1,[r3,r0]
00619a  2900              CMP      r1,#0
00619c  dd07              BLE      |L1.25006|
;;;10042  			{
;;;10043  			sk_cnt[i]--;
00619e  f1a10101          SUB      r1,r1,#1
0061a2  b249              SXTB     r1,r1
0061a4  5419              STRB     r1,[r3,r0]
;;;10044  			if(sk_cnt[i]<=0)
0061a6  2900              CMP      r1,#0
0061a8  dc02              BGT      |L1.25008|
;;;10045  				{
;;;10046  				sk_stat[i]=ssOFF;
0061aa  542e              STRB     r6,[r5,r0]
0061ac  e000              B        |L1.25008|
                  |L1.25006|
;;;10047  				}
;;;10048  			}
;;;10049  		else 
;;;10050  			{
;;;10051  			sk_cnt[i]=0;
0061ae  541e              STRB     r6,[r3,r0]
                  |L1.25008|
0061b0  f1000001          ADD      r0,r0,#1              ;9986
0061b4  b2c0              UXTB     r0,r0                 ;9986
                  |L1.25014|
0061b6  42a0              CMP      r0,r4                 ;9986
0061b8  dbd7              BLT      |L1.24938|
;;;10052  			}
;;;10053  		}
;;;10054  	}
;;;10055  
;;;10056  for(i=0;i<NUMSK;i++)
0061ba  f04f0400          MOV      r4,#0
;;;10057  	{
;;;10058  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10059  		{
;;;10060  		if(sk_av_cnt[i]<10)
0061be  f8df9098          LDR      r9,|L1.25176|
;;;10061  			{
;;;10062  			sk_av_cnt[i]++;
;;;10063  			if(sk_av_cnt[i]>=10)
;;;10064  				{
;;;10065  				sk_av_stat[i]=sasON;
0061c2  4f26              LDR      r7,|L1.25180|
;;;10066  				}
;;;10067  			}
;;;10068  		else 
;;;10069  			{
;;;10070  			sk_av_cnt[i]=10;
;;;10071  			}
;;;10072  		}
;;;10073  	else
;;;10074  		{
;;;10075  		if(sk_av_cnt[i]>=0)
;;;10076  			{
;;;10077  			sk_av_cnt[i]--;
;;;10078  			if(sk_av_cnt[i]<=0)
;;;10079  				{
;;;10080  				sk_av_stat[i]=sasOFF;
;;;10081  				}
;;;10082  			}
;;;10083  		else 
;;;10084  			{
;;;10085  			sk_av_cnt[i]=0;
;;;10086  			}
;;;10087  		}
;;;10088  
;;;10089  #ifndef UKU_KONTUR
;;;10090  	if(sk_av_stat_old[i]!=sk_av_stat[i])
0061c4  f8df8098          LDR      r8,|L1.25184|
0061c8  e0ac              B        |L1.25380|
                  |L1.25034|
0061ca  4826              LDR      r0,|L1.25188|
0061cc  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10058
0061d0  b910              CBNZ     r0,|L1.25048|
0061d2  5d29              LDRB     r1,[r5,r4]            ;10058
0061d4  2901              CMP      r1,#1                 ;10058
0061d6  d00f              BEQ      |L1.25080|
                  |L1.25048|
0061d8  b108              CBZ      r0,|L1.25054|
0061da  5d28              LDRB     r0,[r5,r4]            ;10058
0061dc  b160              CBZ      r0,|L1.25080|
                  |L1.25054|
0061de  f9190004          LDRSB    r0,[r9,r4]            ;10075
0061e2  2800              CMP      r0,#0                 ;10075
0061e4  db43              BLT      |L1.25198|
0061e6  f1a00001          SUB      r0,r0,#1              ;10077
0061ea  b240              SXTB     r0,r0                 ;10077
0061ec  f8090004          STRB     r0,[r9,r4]            ;10077
0061f0  2800              CMP      r0,#0                 ;10078
0061f2  dc3e              BGT      |L1.25202|
0061f4  553e              STRB     r6,[r7,r4]            ;10080
0061f6  e03c              B        |L1.25202|
                  |L1.25080|
0061f8  f9190004          LDRSB    r0,[r9,r4]            ;10060
0061fc  280a              CMP      r0,#0xa               ;10060
0061fe  da33              BGE      |L1.25192|
006200  f1000001          ADD      r0,r0,#1              ;10062
006204  b240              SXTB     r0,r0                 ;10062
006206  f8090004          STRB     r0,[r9,r4]            ;10062
00620a  280a              CMP      r0,#0xa               ;10063
00620c  db31              BLT      |L1.25202|
00620e  f807a004          STRB     r10,[r7,r4]           ;10065
006212  e02e              B        |L1.25202|
                  |L1.25108|
                          DCD      bIBAT_SMKLBR
                  |L1.25112|
                          DCD      UB0
                  |L1.25116|
                          DCD      UB20
                  |L1.25120|
                          DCD      hv_vz_stat
                  |L1.25124|
                          DCD      sk_stat
                  |L1.25128|
                          DCD      sk_stat_old
                  |L1.25132|
                          DCD      VZ_KIND
                  |L1.25136|
                          DCD      ||area_number.25||+0x48
                  |L1.25140|
                          DCD      ICA_EN
                  |L1.25144|
                          DCD      ica_cntrl_hndl
                  |L1.25148|
                          DCD      ica_u_necc
                  |L1.25152|
                          DCD      NUMIST
                  |L1.25156|
                          DCD      PWM_START
                  |L1.25160|
                          DCD      sk_cnt
                  |L1.25164|
                          DCD      NUMSK
                  |L1.25168|
                          DCD      ||area_number.19||
                  |L1.25172|
                          DCD      ||.bss||+0x40c
                  |L1.25176|
                          DCD      sk_av_cnt
                  |L1.25180|
                          DCD      sk_av_stat
                  |L1.25184|
                          DCD      sk_av_stat_old
                  |L1.25188|
                          DCD      SK_SIGN
                  |L1.25192|
006268  f809b004          STRB     r11,[r9,r4]           ;10070
00626c  e001              B        |L1.25202|
                  |L1.25198|
00626e  f8096004          STRB     r6,[r9,r4]            ;10085
                  |L1.25202|
006272  f8181004          LDRB     r1,[r8,r4]
006276  5d38              LDRB     r0,[r7,r4]
006278  4281              CMP      r1,r0
00627a  d04d              BEQ      |L1.25368|
;;;10091  		{
;;;10092  		plazma_sk++;
00627c  4af8              LDR      r2,|L1.26208|
00627e  8811              LDRH     r1,[r2,#0]  ; plazma_sk
006280  f1010101          ADD      r1,r1,#1
006284  8011              STRH     r1,[r2,#0]
;;;10093  		if(sk_av_stat[i]==sasON)
006286  2801              CMP      r0,#1
006288  d007              BEQ      |L1.25242|
;;;10094  			{
;;;10095  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10096  			else if(i==1)
;;;10097  				{
;;;10098  				#ifndef UKU_TELEKORE2017
;;;10099  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10100  				#endif
;;;10101  				#ifdef UKU_TELEKORE2017
;;;10102  				snmp_trap_send("Door open",15,2,1);
;;;10103  				#endif
;;;10104  				}
;;;10105  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10106  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10107  			}
;;;10108  		else 
;;;10109  			{
;;;10110  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
00628a  b354              CBZ      r4,|L1.25314|
;;;10111  			else if(i==1)
00628c  2c01              CMP      r4,#1
00628e  d02f              BEQ      |L1.25328|
;;;10112  				{
;;;10113  				#ifndef UKU_TELEKORE2017
;;;10114  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10115  				#endif
;;;10116  				#ifdef UKU_TELEKORE2017
;;;10117  				snmp_trap_send("Door open clear",15,2,0);
;;;10118  				#endif
;;;10119  				}
;;;10120  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
006290  2c02              CMP      r4,#2
006292  d034              BEQ      |L1.25342|
;;;10121  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
006294  2c03              CMP      r4,#3
006296  d039              BEQ      |L1.25356|
006298  e03e              B        |L1.25368|
                  |L1.25242|
00629a  b134              CBZ      r4,|L1.25258|
00629c  2c01              CMP      r4,#1                 ;10096
00629e  d00b              BEQ      |L1.25272|
0062a0  2c02              CMP      r4,#2                 ;10105
0062a2  d010              BEQ      |L1.25286|
0062a4  2c03              CMP      r4,#3                 ;10106
0062a6  d015              BEQ      |L1.25300|
0062a8  e036              B        |L1.25368|
                  |L1.25258|
0062aa  2301              MOVS     r3,#1                 ;10095
0062ac  461a              MOV      r2,r3                 ;10095
0062ae  210f              MOVS     r1,#0xf               ;10095
0062b0  a0ec              ADR      r0,|L1.26212|
0062b2  f7fffffe          BL       snmp_trap_send
0062b6  e02f              B        |L1.25368|
                  |L1.25272|
0062b8  2301              MOVS     r3,#1                 ;10099
0062ba  2202              MOVS     r2,#2                 ;10099
0062bc  210f              MOVS     r1,#0xf               ;10099
0062be  a0ec              ADR      r0,|L1.26224|
0062c0  f7fffffe          BL       snmp_trap_send
0062c4  e028              B        |L1.25368|
                  |L1.25286|
0062c6  2301              MOVS     r3,#1                 ;10105
0062c8  2203              MOVS     r2,#3                 ;10105
0062ca  210f              MOVS     r1,#0xf               ;10105
0062cc  a0eb              ADR      r0,|L1.26236|
0062ce  f7fffffe          BL       snmp_trap_send
0062d2  e021              B        |L1.25368|
                  |L1.25300|
0062d4  2301              MOVS     r3,#1                 ;10106
0062d6  2204              MOVS     r2,#4                 ;10106
0062d8  210f              MOVS     r1,#0xf               ;10106
0062da  a0eb              ADR      r0,|L1.26248|
0062dc  f7fffffe          BL       snmp_trap_send
0062e0  e01a              B        |L1.25368|
                  |L1.25314|
0062e2  2300              MOVS     r3,#0                 ;10110
0062e4  2201              MOVS     r2,#1                 ;10110
0062e6  210f              MOVS     r1,#0xf               ;10110
0062e8  a0ea              ADR      r0,|L1.26260|
0062ea  f7fffffe          BL       snmp_trap_send
0062ee  e013              B        |L1.25368|
                  |L1.25328|
0062f0  2300              MOVS     r3,#0                 ;10114
0062f2  2202              MOVS     r2,#2                 ;10114
0062f4  210f              MOVS     r1,#0xf               ;10114
0062f6  a0ec              ADR      r0,|L1.26280|
0062f8  f7fffffe          BL       snmp_trap_send
0062fc  e00c              B        |L1.25368|
                  |L1.25342|
0062fe  2300              MOVS     r3,#0                 ;10120
006300  2203              MOVS     r2,#3                 ;10120
006302  210f              MOVS     r1,#0xf               ;10120
006304  a0ed              ADR      r0,|L1.26300|
006306  f7fffffe          BL       snmp_trap_send
00630a  e005              B        |L1.25368|
                  |L1.25356|
00630c  2300              MOVS     r3,#0
00630e  2204              MOVS     r2,#4
006310  210f              MOVS     r1,#0xf
006312  a0ef              ADR      r0,|L1.26320|
006314  f7fffffe          BL       snmp_trap_send
                  |L1.25368|
;;;10122  			}
;;;10123  	 	}
;;;10124  #endif
;;;10125  
;;;10126  #ifdef UKU_KONTUR
;;;10127  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10128  		{
;;;10129  		plazma_sk++;
;;;10130  		if(sk_av_stat[i]==sasON)
;;;10131  			{
;;;10132  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10133  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10134  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10135  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10136  			}
;;;10137  		else 
;;;10138  			{
;;;10139  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10140  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10141  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10142  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10143  			}
;;;10144  	 	}
;;;10145  #endif
;;;10146  	sk_av_stat_old[i]=sk_av_stat[i];
006318  5d38              LDRB     r0,[r7,r4]
00631a  f8080004          STRB     r0,[r8,r4]
00631e  f1040401          ADD      r4,r4,#1              ;10056
006322  b2e4              UXTB     r4,r4                 ;10056
                  |L1.25380|
006324  48ef              LDR      r0,|L1.26340|
006326  f9b00000          LDRSH    r0,[r0,#0]            ;10056  ; NUMSK
00632a  4284              CMP      r4,r0                 ;10056
00632c  f6ffaf4d          BLT      |L1.25034|
;;;10147  	}
;;;10148  }
006330  e70a              B        |L1.24904|
;;;10149  
                          ENDP

                  zar_superviser_start PROC
;;;10186  //-----------------------------------------------
;;;10187  void zar_superviser_start(void)
006332  4aed              LDR      r2,|L1.26344|
;;;10188  {
;;;10189  sign_U[0]=1;
006334  f04f0001          MOV      r0,#1
006338  7010              STRB     r0,[r2,#0]
;;;10190  sign_I[0]=1;
00633a  49ec              LDR      r1,|L1.26348|
00633c  7008              STRB     r0,[r1,#0]
;;;10191  sign_U[1]=1;
00633e  7050              STRB     r0,[r2,#1]
;;;10192  sign_I[1]=1;
006340  7048              STRB     r0,[r1,#1]
;;;10193  
;;;10194  }
006342  4770              BX       lr
;;;10195  
                          ENDP

                  zar_superviser_drv PROC
;;;10151  //-----------------------------------------------
;;;10152  void zar_superviser_drv(void)
006344  e92d5ff0          PUSH     {r4-r12,lr}
;;;10153  {
;;;10154  
;;;10155  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
006348  48ea              LDR      r0,|L1.26356|
00634a  f8df93ac          LDR      r9,|L1.26360|
00634e  f8df83a0          LDR      r8,|L1.26352|
006352  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
006356  f9b90000          LDRSH    r0,[r9,#0]
00635a  4cc1              LDR      r4,|L1.26208|
00635c  ebc01100          RSB      r1,r0,r0,LSL #4
006360  3c46              SUBS     r4,r4,#0x46
006362  f9b87002          LDRSH    r7,[r8,#2]  ; bat
006366  f06f0a1d          MVN      r10,#0x1d
00636a  f06f0b95          MVN      r11,#0x95
00636e  2500              MOVS     r5,#0
006370  4edd              LDR      r6,|L1.26344|
006372  f9b40052          LDRSH    r0,[r4,#0x52]
006376  eb0a0281          ADD      r2,r10,r1,LSL #2
00637a  eb0b0381          ADD      r3,r11,r1,LSL #2
00637e  4567              CMP      r7,r12
006380  dc05              BGT      |L1.25486|
006382  f8dfc378          LDR      r12,|L1.26364|
006386  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
00638a  4567              CMP      r7,r12
00638c  da04              BGE      |L1.25496|
                  |L1.25486|
00638e  4282              CMP      r2,r0
006390  dd02              BLE      |L1.25496|
006392  4283              CMP      r3,r0
006394  da00              BGE      |L1.25496|
006396  7035              STRB     r5,[r6,#0]
                  |L1.25496|
;;;10156  
;;;10157  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
006398  4fd9              LDR      r7,|L1.26368|
00639a  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
00639e  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0063a2  4fd2              LDR      r7,|L1.26348|
0063a4  ebbc0f4e          CMP      r12,lr,LSL #1
0063a8  dc04              BGT      |L1.25524|
0063aa  f1ce0e00          RSB      lr,lr,#0
0063ae  ebbc0f4e          CMP      r12,lr,LSL #1
0063b2  da04              BGE      |L1.25534|
                  |L1.25524|
0063b4  4282              CMP      r2,r0
0063b6  dd02              BLE      |L1.25534|
0063b8  4283              CMP      r3,r0
0063ba  da00              BGE      |L1.25534|
0063bc  703d              STRB     r5,[r7,#0]
                  |L1.25534|
;;;10158  																 
;;;10159  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0063be  f06f0209          MVN      r2,#9
0063c2  eb020181          ADD      r1,r2,r1,LSL #2
0063c6  4281              CMP      r1,r0
0063c8  d121              BNE      |L1.25614|
0063ca  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0063ce  b9f0              CBNZ     r0,|L1.25614|
;;;10160  	{
;;;10161  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
0063d0  7830              LDRB     r0,[r6,#0]  ; sign_U
0063d2  2801              CMP      r0,#1
0063d4  d11b              BNE      |L1.25614|
0063d6  7838              LDRB     r0,[r7,#0]  ; sign_I
0063d8  2801              CMP      r0,#1
0063da  d118              BNE      |L1.25614|
0063dc  f44f70ef          MOV      r0,#0x1de
0063e0  f7fffffe          BL       lc640_read_int
0063e4  49c7              LDR      r1,|L1.26372|
0063e6  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
0063ea  4288              CMP      r0,r1
0063ec  d00f              BEQ      |L1.25614|
0063ee  48c6              LDR      r0,|L1.26376|
0063f0  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0063f2  b160              CBZ      r0,|L1.25614|
0063f4  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
0063f8  07c0              LSLS     r0,r0,#31
0063fa  d108              BNE      |L1.25614|
;;;10162  		{
;;;10163  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
0063fc  f44f70ef          MOV      r0,#0x1de
006400  f7fffffe          BL       lc640_write_int
;;;10164  		superviser_cnt++;
006404  48c1              LDR      r0,|L1.26380|
006406  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006408  f1010101          ADD      r1,r1,#1
00640c  7001              STRB     r1,[r0,#0]
                  |L1.25614|
;;;10165  		}
;;;10166  	
;;;10167  	}
;;;10168  
;;;10169  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00640e  48b9              LDR      r0,|L1.26356|
006410  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006414  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006418  4281              CMP      r1,r0
00641a  dc06              BGT      |L1.25642|
00641c  48b7              LDR      r0,|L1.26364|
00641e  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
006422  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006426  4281              CMP      r1,r0
006428  da0e              BGE      |L1.25672|
                  |L1.25642|
00642a  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00642e  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006432  ebc01000          RSB      r0,r0,r0,LSL #4
006436  eb0a0280          ADD      r2,r10,r0,LSL #2
00643a  428a              CMP      r2,r1
00643c  dd04              BLE      |L1.25672|
00643e  eb0b0080          ADD      r0,r11,r0,LSL #2
006442  4288              CMP      r0,r1
006444  da00              BGE      |L1.25672|
006446  7075              STRB     r5,[r6,#1]
                  |L1.25672|
;;;10170  
;;;10171  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006448  49ad              LDR      r1,|L1.26368|
00644a  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00644e  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
006452  ebb00f41          CMP      r0,r1,LSL #1
006456  dc03              BGT      |L1.25696|
006458  4249              RSBS     r1,r1,#0
00645a  ebb00f41          CMP      r0,r1,LSL #1
00645e  da0e              BGE      |L1.25726|
                  |L1.25696|
006460  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006464  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006468  ebc01000          RSB      r0,r0,r0,LSL #4
00646c  eb0a0280          ADD      r2,r10,r0,LSL #2
006470  428a              CMP      r2,r1
006472  dd04              BLE      |L1.25726|
006474  eb0b0080          ADD      r0,r11,r0,LSL #2
006478  4288              CMP      r0,r1
00647a  da00              BGE      |L1.25726|
00647c  707d              STRB     r5,[r7,#1]
                  |L1.25726|
;;;10172  																 
;;;10173  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00647e  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006482  ebc01100          RSB      r1,r0,r0,LSL #4
006486  f06f0009          MVN      r0,#9
00648a  eb000081          ADD      r0,r0,r1,LSL #2
00648e  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006492  4288              CMP      r0,r1
006494  d122              BNE      |L1.25820|
006496  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00649a  b9f8              CBNZ     r0,|L1.25820|
;;;10174  	{
;;;10175  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
00649c  7870              LDRB     r0,[r6,#1]  ; sign_U
00649e  2801              CMP      r0,#1
0064a0  d11c              BNE      |L1.25820|
0064a2  7878              LDRB     r0,[r7,#1]  ; sign_I
0064a4  2801              CMP      r0,#1
0064a6  d119              BNE      |L1.25820|
0064a8  f44f75fe          MOV      r5,#0x1fc
0064ac  4628              MOV      r0,r5
0064ae  f7fffffe          BL       lc640_read_int
0064b2  4994              LDR      r1,|L1.26372|
0064b4  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
0064b8  4288              CMP      r0,r1
0064ba  d00f              BEQ      |L1.25820|
0064bc  4892              LDR      r0,|L1.26376|
0064be  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0064c0  2802              CMP      r0,#2
0064c2  d10b              BNE      |L1.25820|
0064c4  f8980089          LDRB     r0,[r8,#0x89]  ; bat
0064c8  07c0              LSLS     r0,r0,#31
0064ca  d107              BNE      |L1.25820|
;;;10176  		{
;;;10177  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
0064cc  4628              MOV      r0,r5
0064ce  f7fffffe          BL       lc640_write_int
;;;10178  		superviser_cnt++;
0064d2  488e              LDR      r0,|L1.26380|
0064d4  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0064d6  f1010101          ADD      r1,r1,#1
0064da  7001              STRB     r1,[r0,#0]
                  |L1.25820|
;;;10179  		}
;;;10180  	
;;;10181  	}
;;;10182  
;;;10183  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
0064dc  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0064e0  f06f0101          MVN      r1,#1
0064e4  ebc01000          RSB      r0,r0,r0,LSL #4
0064e8  eb010080          ADD      r0,r1,r0,LSL #2
0064ec  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0064f0  4288              CMP      r0,r1
0064f2  d102              BNE      |L1.25850|
0064f4  e8bd5ff0          POP      {r4-r12,lr}
0064f8  e7fe              B        zar_superviser_start
                  |L1.25850|
;;;10184  }
0064fa  e625              B        |L1.24904|
;;;10185  
                          ENDP

                  npn_hndl PROC
;;;10196  //-----------------------------------------------
;;;10197  void npn_hndl(void)
0064fc  e92d03f0          PUSH     {r4-r9}
;;;10198  {
;;;10199  if(NPN_OUT!=npnoOFF)
006500  4883              LDR      r0,|L1.26384|
;;;10200  	{
;;;10201  /*	if(NPN_SIGN==npnsAVNET)
;;;10202  		{
;;;10203  		if(net_av==1)
;;;10204  			{
;;;10205  			if(npn_tz_cnt<TZNPN)
;;;10206  				{
;;;10207  				npn_tz_cnt++;
;;;10208  				if(npn_tz_cnt==TZNPN)
;;;10209  					{
;;;10210  					npn_stat=npnsOFF;
;;;10211  					}
;;;10212  				}
;;;10213  			}
;;;10214  		else
;;;10215  			{
;;;10216  			if(npn_tz_cnt)
;;;10217  				{
;;;10218  				npn_tz_cnt--;
;;;10219  				if(npn_tz_cnt==0)
;;;10220  					{
;;;10221  					npn_stat=npnsON;
;;;10222  					}
;;;10223  				}
;;;10224  			}
;;;10225  		}*/
;;;10226  /*	if(NPN_SIGN==npnsULOAD)
;;;10227  		{
;;;10228  		if(load_U<UONPN)
;;;10229  			{
;;;10230  			if(npn_tz_cnt<TZNPN)
;;;10231  				{
;;;10232  				npn_tz_cnt++;
;;;10233  				if(npn_tz_cnt==TZNPN)
;;;10234  					{
;;;10235  					npn_stat=npnsOFF;
;;;10236  					}
;;;10237  				}
;;;10238  			}
;;;10239  		else if(load_U>UVNPN)
;;;10240  			{
;;;10241  			if(npn_tz_cnt)
;;;10242  				{
;;;10243  				npn_tz_cnt--;
;;;10244  				if(npn_tz_cnt==0)
;;;10245  					{
;;;10246  					npn_stat=npnsON;
;;;10247  					}
;;;10248  				}
;;;10249  			}
;;;10250  		}*/
;;;10251  
;;;10252  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10253  		{
;;;10254  		if(npn_tz_cnt<TZNPN)
006502  4f84              LDR      r7,|L1.26388|
;;;10255  			{
;;;10256  			npn_tz_cnt++;
;;;10257  			if(npn_tz_cnt==TZNPN)
;;;10258  				{
;;;10259  				npn_stat=npnsOFF;
006504  4e84              LDR      r6,|L1.26392|
006506  7800              LDRB     r0,[r0,#0]            ;10199  ; NPN_OUT
006508  f04f0c00          MOV      r12,#0                ;10199
;;;10260  				}
;;;10261  			}
;;;10262  		}
;;;10263  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10264  		{
;;;10265  		if(npn_tz_cnt)
;;;10266  			{
;;;10267  			npn_tz_cnt--;
;;;10268  			if(npn_tz_cnt==0)
;;;10269  				{
;;;10270  				npn_stat=npnsON;
00650c  f04f0801          MOV      r8,#1
006510  b3e8              CBZ      r0,|L1.25998|
006512  4882              LDR      r0,|L1.26396|
006514  4639              MOV      r1,r7                 ;10254
006516  f9b05000          LDRSH    r5,[r0,#0]            ;10252  ; load_U
00651a  4881              LDR      r0,|L1.26400|
00651c  f9b11000          LDRSH    r1,[r1,#0]            ;10254
006520  f9b09000          LDRSH    r9,[r0,#0]            ;10252  ; UONPN
006524  487f              LDR      r0,|L1.26404|
006526  454d              CMP      r5,r9                 ;10252
006528  f9b02000          LDRSH    r2,[r0,#0]            ;10252
00652c  487e              LDR      r0,|L1.26408|
00652e  f9b03000          LDRSH    r3,[r0,#0]            ;10252
006532  487e              LDR      r0,|L1.26412|
006534  f9b04000          LDRSH    r4,[r0,#0]            ;10252
006538  487d              LDR      r0,|L1.26416|
00653a  f9b00000          LDRSH    r0,[r0,#0]            ;10252
00653e  da13              BGE      |L1.25960|
006540  4282              CMP      r2,r0                 ;10252
006542  db03              BLT      |L1.25932|
006544  4283              CMP      r3,r0                 ;10252
006546  db01              BLT      |L1.25932|
006548  4284              CMP      r4,r0                 ;10252
00654a  da0d              BGE      |L1.25960|
                  |L1.25932|
00654c  4879              LDR      r0,|L1.26420|
00654e  f9b02000          LDRSH    r2,[r0,#0]            ;10254  ; TZNPN
006552  4291              CMP      r1,r2                 ;10254
006554  da23              BGE      |L1.26014|
006556  f1010101          ADD      r1,r1,#1              ;10256
00655a  b208              SXTH     r0,r1                 ;10256
00655c  8038              STRH     r0,[r7,#0]            ;10256
00655e  4290              CMP      r0,r2                 ;10257
006560  d11d              BNE      |L1.26014|
006562  f886c000          STRB     r12,[r6,#0]           ;10259
006566  e01a              B        |L1.26014|
                  |L1.25960|
006568  f8dfc1cc          LDR      r12,|L1.26424|
00656c  f9bcc000          LDRSH    r12,[r12,#0]          ;10263  ; UVNPN
006570  4565              CMP      r5,r12                ;10263
006572  dd14              BLE      |L1.26014|
006574  4282              CMP      r2,r0                 ;10263
006576  dd12              BLE      |L1.26014|
006578  4283              CMP      r3,r0                 ;10263
00657a  dd10              BLE      |L1.26014|
00657c  4284              CMP      r4,r0                 ;10263
00657e  dd0e              BLE      |L1.26014|
006580  b169              CBZ      r1,|L1.26014|
006582  f1a10101          SUB      r1,r1,#1              ;10267
006586  b208              SXTH     r0,r1                 ;10267
006588  8038              STRH     r0,[r7,#0]            ;10267
00658a  b940              CBNZ     r0,|L1.26014|
00658c  e000              B        |L1.26000|
                  |L1.25998|
00658e  e002              B        |L1.26006|
                  |L1.26000|
006590  f8868000          STRB     r8,[r6,#0]
006594  e003              B        |L1.26014|
                  |L1.26006|
;;;10271  				}
;;;10272  			}
;;;10273  		}
;;;10274  	}
;;;10275  else
;;;10276  	{
;;;10277  	npn_tz_cnt=0;
006596  f8a7c000          STRH     r12,[r7,#0]
;;;10278  	npn_stat=npnsON;
00659a  f8868000          STRB     r8,[r6,#0]
                  |L1.26014|
;;;10279  	}
;;;10280  
;;;10281  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
00659e  7830              LDRB     r0,[r6,#0]  ; npn_stat
0065a0  2800              CMP      r0,#0
0065a2  d107              BNE      |L1.26036|
0065a4  e8bd03f0          POP      {r4-r9}
0065a8  230f              MOVS     r3,#0xf
0065aa  2201              MOVS     r2,#1
0065ac  216e              MOVS     r1,#0x6e
0065ae  20d2              MOVS     r0,#0xd2
0065b0  f7ffbffe          B.W      mess_send
                  |L1.26036|
;;;10282  
;;;10283  
;;;10284  }
0065b4  e8bd03f0          POP      {r4-r9}
0065b8  4770              BX       lr
;;;10285  
                          ENDP

                  loadoff_hndl PROC
;;;10287  //-----------------------------------------------
;;;10288  void loadoff_hndl(void)
0065ba  b5f0              PUSH     {r4-r7,lr}
;;;10289  {
;;;10290  if((load_U>UONPN)||(load_U<UVNPN))
0065bc  4857              LDR      r0,|L1.26396|
;;;10291  	{
;;;10292  	if(load_off_cnt<TZNPN)
0065be  4d5f              LDR      r5,|L1.26428|
;;;10293  		{
;;;10294  		load_off_cnt++;
;;;10295  		if(load_off_cnt>=TZNPN)
;;;10296  			{
;;;10297  			load_off_stat=npnsOFF;
0065c0  2700              MOVS     r7,#0
0065c2  f9b01000          LDRSH    r1,[r0,#0]            ;10290  ; load_U
0065c6  4856              LDR      r0,|L1.26400|
0065c8  4e5d              LDR      r6,|L1.26432|
0065ca  f9b02000          LDRSH    r2,[r0,#0]            ;10290  ; UONPN
0065ce  f9b50000          LDRSH    r0,[r5,#0]            ;10292
0065d2  4291              CMP      r1,r2                 ;10290
0065d4  dc04              BGT      |L1.26080|
0065d6  4b58              LDR      r3,|L1.26424|
0065d8  f9b33000          LDRSH    r3,[r3,#0]            ;10290  ; UVNPN
0065dc  4299              CMP      r1,r3                 ;10290
0065de  da0d              BGE      |L1.26108|
                  |L1.26080|
0065e0  4954              LDR      r1,|L1.26420|
0065e2  f9b11000          LDRSH    r1,[r1,#0]            ;10292  ; TZNPN
0065e6  4288              CMP      r0,r1                 ;10292
0065e8  da1c              BGE      |L1.26148|
0065ea  f1000001          ADD      r0,r0,#1              ;10294
0065ee  b200              SXTH     r0,r0                 ;10294
0065f0  8028              STRH     r0,[r5,#0]            ;10294
0065f2  4288              CMP      r0,r1                 ;10295
0065f4  db16              BLT      |L1.26148|
0065f6  7037              STRB     r7,[r6,#0]
;;;10298  			load_off_cnt=TZNPN;
0065f8  8029              STRH     r1,[r5,#0]
0065fa  e013              B        |L1.26148|
                  |L1.26108|
;;;10299  			}
;;;10300  		}
;;;10301  	}
;;;10302  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
0065fc  4c51              LDR      r4,|L1.26436|
0065fe  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
006602  4423              ADD      r3,r3,r4
006604  428b              CMP      r3,r1
006606  da0d              BGE      |L1.26148|
006608  1b12              SUBS     r2,r2,r4
00660a  428a              CMP      r2,r1
00660c  dd0a              BLE      |L1.26148|
;;;10303  	{
;;;10304  	if(load_off_cnt)
00660e  b148              CBZ      r0,|L1.26148|
;;;10305  		{
;;;10306  		load_off_cnt--;
006610  f1a00001          SUB      r0,r0,#1
006614  b200              SXTH     r0,r0
006616  8028              STRH     r0,[r5,#0]
;;;10307  		if(load_off_cnt<=0)
006618  2800              CMP      r0,#0
00661a  dc03              BGT      |L1.26148|
;;;10308  			{
;;;10309  			load_off_stat=npnsON;
00661c  f04f0001          MOV      r0,#1
006620  7030              STRB     r0,[r6,#0]
;;;10310  			load_off_cnt=0;
006622  802f              STRH     r7,[r5,#0]
                  |L1.26148|
;;;10311  			}
;;;10312  		}
;;;10313  	}
;;;10314  
;;;10315  
;;;10316  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006624  7830              LDRB     r0,[r6,#0]  ; load_off_stat
006626  2800              CMP      r0,#0
006628  d103              BNE      |L1.26162|
00662a  4947              LDR      r1,|L1.26440|
00662c  f04f000a          MOV      r0,#0xa
006630  7008              STRB     r0,[r1,#0]
                  |L1.26162|
;;;10317  
;;;10318  
;;;10319  }
006632  bdf0              POP      {r4-r7,pc}
;;;10320  
                          ENDP

                  speedChargeStartStop PROC
;;;10508  //-----------------------------------------------
;;;10509  void speedChargeStartStop(void)
006634  b538              PUSH     {r3-r5,lr}
;;;10510  {
;;;10511  spch_plazma[1]++;
006636  4c45              LDR      r4,|L1.26444|
006638  7860              LDRB     r0,[r4,#1]  ; spch_plazma
00663a  f1000001          ADD      r0,r0,#1
00663e  7060              STRB     r0,[r4,#1]
;;;10512  /*if(speedChIsOn)
;;;10513  	{
;;;10514  	speedChIsOn=0;
;;;10515  	}
;;;10516  
;;;10517  else
;;;10518  	{
;;;10519  	if(speedChrgBlckStat==0)
;;;10520  		{
;;;10521  		speedChIsOn=1;
;;;10522  		speedChTimeCnt=0;
;;;10523  		}
;;;10524  	else
;;;10525  		{
;;;10526  		show_mess(	"     Ускоренный     ",
;;;10527  	          		"       заряд        ",
;;;10528  	          		"    заблокирован!   ",
;;;10529  	          		"                    ",2000);	 
;;;10530  		}
;;;10531  	}*/
;;;10532  
;;;10533  if(sp_ch_stat!=scsOFF)
006640  4843              LDR      r0,|L1.26448|
006642  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006644  b151              CBZ      r1,|L1.26204|
;;;10534  	{
;;;10535  	sp_ch_stat=scsOFF;
006646  f04f0100          MOV      r1,#0
00664a  7001              STRB     r1,[r0,#0]
;;;10536  	speedz_mem_hndl(10);
00664c  f04f000a          MOV      r0,#0xa
006650  f7fffffe          BL       speedz_mem_hndl
;;;10537  	spch_plazma[1]=10;
006654  f04f000a          MOV      r0,#0xa
006658  7060              STRB     r0,[r4,#1]
                  |L1.26202|
;;;10538  	}
;;;10539  
;;;10540  else
;;;10541  	{
;;;10542  	spch_plazma[1]=20;
;;;10543  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10544  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10545  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10546  		#endif
;;;10547  		)
;;;10548  		{
;;;10549  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10550  		sp_ch_stat=scsSTEP1;
;;;10551  		#else
;;;10552  		sp_ch_stat=scsWRK;
;;;10553  		#endif
;;;10554  		speedz_mem_hndl(1);
;;;10555  		}
;;;10556  	else 
;;;10557  		{
;;;10558  		show_mess(	"     Ускоренный     ",
;;;10559  	          		"       заряд        ",
;;;10560  	          		"    заблокирован!   ",
;;;10561  	          		"                    ",2000);
;;;10562  		}
;;;10563  	}
;;;10564  }
00665a  bd38              POP      {r3-r5,pc}
                  |L1.26204|
00665c  e07a              B        |L1.26452|
00665e  0000              DCW      0x0000
                  |L1.26208|
                          DCD      ||area_number.25||+0x46
                  |L1.26212|
006664  534b2023          DCB      "SK #1 Alarm",0
006668  3120416c
00666c  61726d00
                  |L1.26224|
006670  534b2023          DCB      "SK #2 Alarm",0
006674  3220416c
006678  61726d00
                  |L1.26236|
00667c  534b2023          DCB      "SK #3 Alarm",0
006680  3320416c
006684  61726d00
                  |L1.26248|
006688  534b2023          DCB      "SK #4 Alarm",0
00668c  3420416c
006690  61726d00
                  |L1.26260|
006694  534b2023          DCB      "SK #1 Alarm is off",0
006698  3120416c
00669c  61726d20
0066a0  6973206f
0066a4  666600  
0066a7  00                DCB      0
                  |L1.26280|
0066a8  534b2023          DCB      "SK #2 Alarm is off",0
0066ac  3220416c
0066b0  61726d20
0066b4  6973206f
0066b8  666600  
0066bb  00                DCB      0
                  |L1.26300|
0066bc  534b2023          DCB      "SK #3 Alarm is off",0
0066c0  3320416c
0066c4  61726d20
0066c8  6973206f
0066cc  666600  
0066cf  00                DCB      0
                  |L1.26320|
0066d0  534b2023          DCB      "SK #4 Alarm is off",0
0066d4  3420416c
0066d8  61726d20
0066dc  6973206f
0066e0  666600  
0066e3  00                DCB      0
                  |L1.26340|
                          DCD      NUMSK
                  |L1.26344|
                          DCD      sign_U
                  |L1.26348|
                          DCD      sign_I
                  |L1.26352|
                          DCD      bat
                  |L1.26356|
                          DCD      u_necc_up
                  |L1.26360|
                          DCD      TBAT
                  |L1.26364|
                          DCD      u_necc_dn
                  |L1.26368|
                          DCD      IKB
                  |L1.26372|
                          DCD      BAT_C_REAL
                  |L1.26376|
                          DCD      NUMBAT
                  |L1.26380|
                          DCD      superviser_cnt
                  |L1.26384|
                          DCD      NPN_OUT
                  |L1.26388|
                          DCD      npn_tz_cnt
                  |L1.26392|
                          DCD      npn_stat
                  |L1.26396|
                          DCD      load_U
                  |L1.26400|
                          DCD      UONPN
                  |L1.26404|
                          DCD      net_Ua
                  |L1.26408|
                          DCD      net_Ub
                  |L1.26412|
                          DCD      net_Uc
                  |L1.26416|
                          DCD      UMN
                  |L1.26420|
                          DCD      TZNPN
                  |L1.26424|
                          DCD      UVNPN
                  |L1.26428|
                          DCD      load_off_cnt
                  |L1.26432|
                          DCD      load_off_stat
                  |L1.26436|
                          DCD      dUNPN
                  |L1.26440|
                          DCD      tloaddisable_cmnd
                  |L1.26444|
                          DCD      spch_plazma
                  |L1.26448|
                          DCD      sp_ch_stat
                  |L1.26452|
006754  f04f0114          MOV      r1,#0x14              ;10542
006758  7061              STRB     r1,[r4,#1]            ;10542
00675a  49fa              LDR      r1,|L1.27460|
00675c  f9b12000          LDRSH    r2,[r1,#0]            ;10543  ; speedChrgBlckStat
006760  49f9              LDR      r1,|L1.27464|
006762  f8913023          LDRB     r3,[r1,#0x23]         ;10543  ; spc_stat
006766  ea420203          ORR      r2,r2,r3              ;10543
00676a  794b              LDRB     r3,[r1,#5]            ;10543  ; vz1_stat
00676c  79c9              LDRB     r1,[r1,#7]            ;10543  ; vz2_stat
00676e  ea420203          ORR      r2,r2,r3              ;10543
006772  430a              ORRS     r2,r2,r1              ;10543
006774  d009              BEQ      |L1.26506|
006776  f44f60fa          MOV      r0,#0x7d0             ;10558
00677a  9000              STR      r0,[sp,#0]            ;10558
00677c  4bf3              LDR      r3,|L1.27468|
00677e  a2f4              ADR      r2,|L1.27472|
006780  a1f9              ADR      r1,|L1.27496|
006782  a0ff              ADR      r0,|L1.27520|
006784  f7fffffe          BL       show_mess
006788  e767              B        |L1.26202|
                  |L1.26506|
00678a  f04f0101          MOV      r1,#1                 ;10550
00678e  7001              STRB     r1,[r0,#0]            ;10550
006790  e8bd4038          POP      {r3-r5,lr}            ;10554
006794  4608              MOV      r0,r1                 ;10554
006796  f7ffbffe          B.W      speedz_mem_hndl
;;;10565  
                          ENDP

                  speedChargeHndl PROC
;;;10321  //-----------------------------------------------
;;;10322  void speedChargeHndl(void)
00679a  e92d4ff8          PUSH     {r3-r11,lr}
;;;10323  {
;;;10324  /*
;;;10325  if(sp_ch_stat==scsOFF)
;;;10326  	{
;;;10327  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10328  	}*/
;;;10329  	 
;;;10330  if(sp_ch_stat==scsSTEP1)
00679e  4ffe              LDR      r7,|L1.27544|
;;;10331  	{
;;;10332  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10333  		{
;;;10334  		sp_ch_stat_cnt=5;
;;;10335  		if(SP_CH_VENT_BLOK==0)
0067a0  f8dfa3f8          LDR      r10,|L1.27548|
;;;10336  			{
;;;10337  			sp_ch_stat_cnt=0;
;;;10338  			sp_ch_stat=scsWRK;
;;;10339  			}
;;;10340  		}
;;;10341  	if(sp_ch_stat_cnt)
;;;10342  		{
;;;10343  		sp_ch_stat_cnt--;
;;;10344  		if(sp_ch_stat_cnt==0)
;;;10345  			{
;;;10346  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10347  
;;;10348  			}
;;;10349  		}
;;;10350  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0067a4  f8df93f8          LDR      r9,|L1.27552|
0067a8  7839              LDRB     r1,[r7,#0]            ;10330  ; sp_ch_stat
0067aa  f04f0802          MOV      r8,#2                 ;10338
0067ae  4efd              LDR      r6,|L1.27556|
0067b0  4cfd              LDR      r4,|L1.27560|
0067b2  2500              MOVS     r5,#0                 ;10335
0067b4  7830              LDRB     r0,[r6,#0]            ;10332
0067b6  2901              CMP      r1,#1                 ;10330
0067b8  d11b              BNE      |L1.26610|
0067ba  2801              CMP      r0,#1                 ;10332
0067bc  d008              BEQ      |L1.26576|
0067be  f04f0105          MOV      r1,#5                 ;10334
0067c2  8021              STRH     r1,[r4,#0]            ;10334
0067c4  f8ba1000          LDRH     r1,[r10,#0]           ;10335  ; SP_CH_VENT_BLOK
0067c8  b911              CBNZ     r1,|L1.26576|
0067ca  8025              STRH     r5,[r4,#0]            ;10337
0067cc  f8878000          STRB     r8,[r7,#0]            ;10338
                  |L1.26576|
0067d0  f9b41000          LDRSH    r1,[r4,#0]            ;10341  ; sp_ch_stat_cnt
0067d4  b139              CBZ      r1,|L1.26598|
0067d6  f1a10101          SUB      r1,r1,#1              ;10343
0067da  b209              SXTH     r1,r1                 ;10343
0067dc  8021              STRH     r1,[r4,#0]            ;10343
0067de  b911              CBNZ     r1,|L1.26598|
0067e0  f04f0103          MOV      r1,#3                 ;10346
0067e4  7039              STRB     r1,[r7,#0]            ;10346
                  |L1.26598|
0067e6  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
0067ea  2901              CMP      r1,#1
0067ec  d101              BNE      |L1.26610|
0067ee  f8878000          STRB     r8,[r7,#0]
                  |L1.26610|
;;;10351  	}
;;;10352  
;;;10353  if(sp_ch_stat==scsWRK)
0067f2  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
0067f4  2902              CMP      r1,#2
0067f6  d123              BNE      |L1.26688|
;;;10354  	{
;;;10355  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10356  		{
;;;10357  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
0067f8  4aec              LDR      r2,|L1.27564|
;;;10358  		hv_vz_up_cnt=0;
0067fa  49ed              LDR      r1,|L1.27568|
0067fc  2802              CMP      r0,#2                 ;10355
0067fe  d008              BEQ      |L1.26642|
006800  48ec              LDR      r0,|L1.27572|
006802  f44f6361          MOV      r3,#0xe10             ;10357
006806  f9b00000          LDRSH    r0,[r0,#0]            ;10357  ; speedChrgTimeInHour
00680a  fb00f003          MUL      r0,r0,r3              ;10357
00680e  6010              STR      r0,[r2,#0]            ;10357  ; sp_ch_wrk_cnt
006810  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.26642|
;;;10359  		}
;;;10360  	sp_ch_wrk_cnt--;
006812  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006814  f1a00001          SUB      r0,r0,#1
006818  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10361  	hv_vz_up_cnt++;
00681a  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
00681c  f1020201          ADD      r2,r2,#1
006820  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10362  	if(sp_ch_wrk_cnt==0)
006822  b918              CBNZ     r0,|L1.26668|
;;;10363  		{
;;;10364  		sp_ch_stat=scsOFF;
006824  703d              STRB     r5,[r7,#0]
;;;10365  		speedz_mem_hndl(0);
006826  2000              MOVS     r0,#0
006828  f7fffffe          BL       speedz_mem_hndl
                  |L1.26668|
;;;10366  		}
;;;10367  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10368  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
00682c  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006830  b930              CBNZ     r0,|L1.26688|
006832  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
006836  2801              CMP      r0,#1
006838  d102              BNE      |L1.26688|
00683a  f04f0004          MOV      r0,#4
00683e  7038              STRB     r0,[r7,#0]
                  |L1.26688|
;;;10369  	#endif
;;;10370  	}
;;;10371  
;;;10372  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006840  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10373  	{
;;;10374  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10375  		{
;;;10376  		sp_ch_stat_cnt=10;
;;;10377  		}
;;;10378  	sp_ch_stat_cnt--;
;;;10379  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10380  		{
;;;10381  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006842  f2413b88          MOV      r11,#0x1388
006846  f04f0a0a          MOV      r10,#0xa              ;10376
00684a  2803              CMP      r0,#3                 ;10372
00684c  d119              BNE      |L1.26754|
00684e  7830              LDRB     r0,[r6,#0]            ;10374  ; sp_ch_stat_old
006850  2803              CMP      r0,#3                 ;10374
006852  d101              BNE      |L1.26712|
006854  8820              LDRH     r0,[r4,#0]            ;10374  ; sp_ch_stat_cnt
006856  b908              CBNZ     r0,|L1.26716|
                  |L1.26712|
006858  f8a4a000          STRH     r10,[r4,#0]           ;10376
                  |L1.26716|
00685c  8820              LDRH     r0,[r4,#0]            ;10378  ; sp_ch_stat_cnt
00685e  f1a00001          SUB      r0,r0,#1              ;10378
006862  b200              SXTH     r0,r0                 ;10378
006864  8020              STRH     r0,[r4,#0]            ;10378
006866  280a              CMP      r0,#0xa               ;10379
006868  d001              BEQ      |L1.26734|
00686a  2809              CMP      r0,#9                 ;10379
00686c  d109              BNE      |L1.26754|
                  |L1.26734|
00686e  4bd2              LDR      r3,|L1.27576|
006870  a0d2              ADR      r0,|L1.27580|
006872  f1030218          ADD      r2,r3,#0x18
006876  f1020118          ADD      r1,r2,#0x18
00687a  f8cdb000          STR      r11,[sp,#0]
00687e  f7fffffe          BL       show_mess
                  |L1.26754|
;;;10382  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10383  					"      ВКЛЮЧЕН       ",
;;;10384  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10385  					5000);
;;;10386  		}
;;;10387  	}
;;;10388  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
006882  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006884  2804              CMP      r0,#4
006886  d11f              BNE      |L1.26824|
;;;10389  	{
;;;10390  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
006888  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
00688a  2804              CMP      r0,#4
00688c  d101              BNE      |L1.26770|
00688e  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006890  b908              CBNZ     r0,|L1.26774|
                  |L1.26770|
;;;10391  		{
;;;10392  		sp_ch_stat_cnt=10;
006892  f8a4a000          STRH     r10,[r4,#0]
                  |L1.26774|
;;;10393  		}
;;;10394  	sp_ch_stat_cnt--;
006896  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006898  f1a00001          SUB      r0,r0,#1
00689c  b200              SXTH     r0,r0
00689e  8020              STRH     r0,[r4,#0]
;;;10395  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
0068a0  280a              CMP      r0,#0xa
0068a2  d001              BEQ      |L1.26792|
0068a4  2809              CMP      r0,#9
0068a6  d109              BNE      |L1.26812|
                  |L1.26792|
;;;10396  		{
;;;10397  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0068a8  4bca              LDR      r3,|L1.27604|
0068aa  a0c4              ADR      r0,|L1.27580|
0068ac  f1030218          ADD      r2,r3,#0x18
0068b0  f1020118          ADD      r1,r2,#0x18
0068b4  f8cdb000          STR      r11,[sp,#0]
0068b8  f7fffffe          BL       show_mess
                  |L1.26812|
;;;10398  					"    ЗАБЛОКИРОВАН    ",
;;;10399  					"     НЕИСПРАВНА     ",
;;;10400  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10401  					5000);
;;;10402  		}
;;;10403  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0068bc  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
0068c0  2801              CMP      r0,#1
0068c2  d101              BNE      |L1.26824|
0068c4  f8878000          STRB     r8,[r7,#0]
                  |L1.26824|
;;;10404  	}
;;;10405  
;;;10406  
;;;10407  sp_ch_stat_old=sp_ch_stat;
0068c8  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0068ca  7030              STRB     r0,[r6,#0]
;;;10408  
;;;10409  
;;;10410  
;;;10411  if(speedChrgAvtEn==1)
0068cc  49c2              LDR      r1,|L1.27608|
;;;10412  	{
;;;10413  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10414  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10415  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10416  		#endif
;;;10417  		)
;;;10418  		{
;;;10419  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10420  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10421  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10422  		#endif
;;;10423  		#ifdef UKU_220_V2
;;;10424  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10425  		#endif
;;;10426  		&&(!speedChrgBlckStat))
0068ce  4c9d              LDR      r4,|L1.27460|
0068d0  8809              LDRH     r1,[r1,#0]            ;10411  ; speedChrgAvtEn
0068d2  2901              CMP      r1,#1                 ;10411
0068d4  d10a              BNE      |L1.26860|
0068d6  499c              LDR      r1,|L1.27464|
;;;10427  			{
;;;10428  			speedChargeStartCnt++;
0068d8  4ec0              LDR      r6,|L1.27612|
0068da  f8912023          LDRB     r2,[r1,#0x23]         ;10413  ; spc_stat
0068de  4310              ORRS     r0,r0,r2              ;10413
0068e0  794a              LDRB     r2,[r1,#5]            ;10413  ; vz1_stat
0068e2  79c9              LDRB     r1,[r1,#7]            ;10413  ; vz2_stat
0068e4  4310              ORRS     r0,r0,r2              ;10413
0068e6  4308              ORRS     r0,r0,r1              ;10413
0068e8  d007              BEQ      |L1.26874|
;;;10429  			if(speedChargeStartCnt>=60)
;;;10430  				{
;;;10431  				speedChargeStartStop();
;;;10432  				speedz_mem_hndl(5);
;;;10433  				}
;;;10434  			}
;;;10435  		else speedChargeStartCnt=0;
;;;10436  		}
;;;10437  	else speedChargeStartCnt=0;
0068ea  7035              STRB     r5,[r6,#0]
                  |L1.26860|
;;;10438  	}
;;;10439  
;;;10440  
;;;10441  
;;;10442  /*
;;;10443  if(speedChIsOn)
;;;10444  	{
;;;10445  	speedChTimeCnt++;
;;;10446  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10447  		{
;;;10448  		speedChIsOn=0;
;;;10449  		}
;;;10450  	if(speedChrgBlckStat)
;;;10451  		{
;;;10452  		speedChIsOn=0;
;;;10453  		speedChTimeCnt=0;
;;;10454  		}
;;;10455  	}
;;;10456  
;;;10457  
;;;10458  
;;;10459  if(speedChrgAvtEn)
;;;10460  	{
;;;10461  	if(!speedChIsOn)
;;;10462  		{
;;;10463  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10464  			{
;;;10465  			speedChIsOn=1;
;;;10466  			}
;;;10467  		}
;;;10468  	}
;;;10469  
;;;10470  
;;;10471  */
;;;10472  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
0068ec  48bc              LDR      r0,|L1.27616|
0068ee  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
0068f0  2802              CMP      r0,#2
0068f2  d02e              BEQ      |L1.26962|
0068f4  8025              STRH     r5,[r4,#0]
                  |L1.26870|
;;;10473  else
;;;10474  	{
;;;10475  	speedChrgBlckStat=0;
;;;10476  	if(speedChrgBlckSrc==1)
;;;10477  		{
;;;10478  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10479  		}
;;;10480  	else if(speedChrgBlckSrc==2)
;;;10481  		{
;;;10482  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10483  		}
;;;10484  	}
;;;10485  
;;;10486  /*
;;;10487  if(speedChrgBlckStat==1)
;;;10488  	{
;;;10489  
;;;10490  	//speedChargeStartStop();
;;;10491  
;;;10492  	speedChrgShowCnt++;
;;;10493  	if(speedChrgShowCnt>=30)	
;;;10494  		{
;;;10495  		speedChrgShowCnt=0;
;;;10496  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10497  					"       ЗАРЯД        ",
;;;10498  					"     ЗАПРЕЩЕН!!!    ",
;;;10499  					"                    ",
;;;10500  					5000);
;;;10501  		}
;;;10502  	} 
;;;10503  else speedChrgShowCnt=0;  */
;;;10504  
;;;10505  
;;;10506  }
0068f6  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.26874|
0068fa  48ba              LDR      r0,|L1.27620|
0068fc  49ba              LDR      r1,|L1.27624|
0068fe  f9b00000          LDRSH    r0,[r0,#0]            ;10419  ; load_U
006902  f9b11000          LDRSH    r1,[r1,#0]            ;10419  ; u_necc
006906  4288              CMP      r0,r1                 ;10419
006908  da14              BGE      |L1.26932|
00690a  1a08              SUBS     r0,r1,r0              ;10419
00690c  49b7              LDR      r1,|L1.27628|
00690e  f9b11000          LDRSH    r1,[r1,#0]            ;10419  ; speedChrgDU
006912  4288              CMP      r0,r1                 ;10419
006914  dd0e              BLE      |L1.26932|
006916  48b6              LDR      r0,|L1.27632|
006918  49b6              LDR      r1,|L1.27636|
00691a  f9b00000          LDRSH    r0,[r0,#0]            ;10421  ; Ib_ips_termokompensat
00691e  8809              LDRH     r1,[r1,#0]            ;10421  ; IZMAX
006920  fb90f0fa          SDIV     r0,r0,r10             ;10421
006924  1a40              SUBS     r0,r0,r1              ;10421
006926  b200              SXTH     r0,r0                 ;10421
006928  f7fffffe          BL       abs
00692c  2805              CMP      r0,#5                 ;10421
00692e  da01              BGE      |L1.26932|
006930  8820              LDRH     r0,[r4,#0]            ;10426  ; speedChrgBlckStat
006932  b108              CBZ      r0,|L1.26936|
                  |L1.26932|
006934  7035              STRB     r5,[r6,#0]            ;10435
006936  e7d9              B        |L1.26860|
                  |L1.26936|
006938  7830              LDRB     r0,[r6,#0]            ;10428  ; speedChargeStartCnt
00693a  f1000001          ADD      r0,r0,#1              ;10428
00693e  b2c0              UXTB     r0,r0                 ;10428
006940  7030              STRB     r0,[r6,#0]            ;10428
006942  283c              CMP      r0,#0x3c              ;10429
006944  d3d2              BCC      |L1.26860|
006946  f7fffffe          BL       speedChargeStartStop
00694a  2005              MOVS     r0,#5                 ;10432
00694c  f7fffffe          BL       speedz_mem_hndl
006950  e7cc              B        |L1.26860|
                  |L1.26962|
006952  8025              STRH     r5,[r4,#0]            ;10475
006954  48a8              LDR      r0,|L1.27640|
006956  49a9              LDR      r1,|L1.27644|
006958  f44f63fa          MOV      r3,#0x7d0             ;10478
00695c  f9b00000          LDRSH    r0,[r0,#0]            ;10482  ; speedChrgBlckLog
006960  b918              CBNZ     r0,|L1.26986|
006962  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10482  ; adc_buff_
006966  429a              CMP      r2,r3                 ;10482
006968  dc05              BGT      |L1.26998|
                  |L1.26986|
00696a  2801              CMP      r0,#1                 ;10482
00696c  d1c3              BNE      |L1.26870|
00696e  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10482  ; adc_buff_
006972  4298              CMP      r0,r3                 ;10482
006974  dabf              BGE      |L1.26870|
                  |L1.26998|
006976  f04f0001          MOV      r0,#1                 ;10482
00697a  8020              STRH     r0,[r4,#0]            ;10482
00697c  e7bb              B        |L1.26870|
;;;10507  
                          ENDP

                  averageChargeHndl PROC
;;;10566  //-----------------------------------------------
;;;10567  void averageChargeHndl(void)
00697e  e92d4ff8          PUSH     {r3-r11,lr}
;;;10568  {
;;;10569  /*
;;;10570  if(hv_vz_stat==hvsOFF)
;;;10571  	{
;;;10572  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10573  	} */
;;;10574  if(hv_vz_stat!=hvsOFF)
006982  f8dfa27c          LDR      r10,|L1.27648|
006986  f04f0b00          MOV      r11,#0
00698a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00698e  b130              CBZ      r0,|L1.27038|
;;;10575  	{
;;;10576  	hv_vz_stat=hvsOFF; 	
006990  f88ab000          STRB     r11,[r10,#0]
;;;10577  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006994  2100              MOVS     r1,#0
006996  f44f70b4          MOV      r0,#0x168
00699a  f7fffffe          BL       lc640_write
                  |L1.27038|
;;;10578  	}
;;;10579  
;;;10580  if(hv_vz_stat==hvsSTEP1)
00699e  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10581  	{
;;;10582  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10583  		{
;;;10584  		hv_vz_stat_cnt=5;
;;;10585  		}
;;;10586  	if(hv_vz_stat_cnt)
;;;10587  		{
;;;10588  		hv_vz_stat_cnt--;
;;;10589  		if(hv_vz_stat_cnt==0)
;;;10590  			{
;;;10591  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10592  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10593  			}
;;;10594  		}
;;;10595  	if(sk_stat[0]==1)
0069a2  4e7f              LDR      r6,|L1.27552|
0069a4  4d97              LDR      r5,|L1.27652|
0069a6  4c98              LDR      r4,|L1.27656|
0069a8  f04f0905          MOV      r9,#5                 ;10584
0069ac  2801              CMP      r0,#1                 ;10580
0069ae  d131              BNE      |L1.27156|
0069b0  7828              LDRB     r0,[r5,#0]            ;10582  ; hv_vz_stat_old
0069b2  2801              CMP      r0,#1                 ;10582
0069b4  d001              BEQ      |L1.27066|
0069b6  f8a49000          STRH     r9,[r4,#0]            ;10584
                  |L1.27066|
0069ba  f9b40000          LDRSH    r0,[r4,#0]            ;10586  ; hv_vz_stat_cnt
0069be  b168              CBZ      r0,|L1.27100|
0069c0  f1a00001          SUB      r0,r0,#1              ;10588
0069c4  b200              SXTH     r0,r0                 ;10588
0069c6  8020              STRH     r0,[r4,#0]            ;10588
0069c8  b940              CBNZ     r0,|L1.27100|
0069ca  f04f0006          MOV      r0,#6                 ;10591
0069ce  f88a0000          STRB     r0,[r10,#0]           ;10591
0069d2  4601              MOV      r1,r0                 ;10592
0069d4  f44f70b4          MOV      r0,#0x168             ;10592
0069d8  f7fffffe          BL       lc640_write
                  |L1.27100|
0069dc  7830              LDRB     r0,[r6,#0]  ; sk_stat
0069de  2801              CMP      r0,#1
0069e0  d118              BNE      |L1.27156|
;;;10596  		{
;;;10597  		hv_vz_stat=hvsSTEP2;
0069e2  f04f0002          MOV      r0,#2
0069e6  f88a0000          STRB     r0,[r10,#0]
;;;10598  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
0069ea  4601              MOV      r1,r0
0069ec  f44f70b4          MOV      r0,#0x168
0069f0  f7fffffe          BL       lc640_write
;;;10599  		tree_up(iHV_STEP2_2,1,0,0);
0069f4  2300              MOVS     r3,#0
0069f6  461a              MOV      r2,r3
0069f8  2101              MOVS     r1,#1
0069fa  20dd              MOVS     r0,#0xdd
0069fc  f7fffffe          BL       tree_up
;;;10600  		tree_up(iHV_STEP2_1,0,0,0);
006a00  2300              MOVS     r3,#0
006a02  461a              MOV      r2,r3
006a04  4619              MOV      r1,r3
006a06  20dc              MOVS     r0,#0xdc
006a08  f7fffffe          BL       tree_up
;;;10601  		ret(1200);
006a0c  f44f6096          MOV      r0,#0x4b0
006a10  f7fffffe          BL       ||ret||
                  |L1.27156|
;;;10602  		}
;;;10603  	}
;;;10604  
;;;10605  if(hv_vz_stat==hvsSTEP2)
006a14  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006a18  2802              CMP      r0,#2
006a1a  d10b              BNE      |L1.27188|
;;;10606  	{
;;;10607  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006a1c  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006a1e  2902              CMP      r1,#2
006a20  d101              BNE      |L1.27174|
006a22  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006a24  b911              CBNZ     r1,|L1.27180|
                  |L1.27174|
;;;10608  		{
;;;10609  		hv_vz_stat_cnt=15;
006a26  f04f010f          MOV      r1,#0xf
006a2a  8021              STRH     r1,[r4,#0]
                  |L1.27180|
;;;10610  		}
;;;10611  	hv_vz_stat_cnt--;
006a2c  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006a2e  f1a10101          SUB      r1,r1,#1
006a32  8021              STRH     r1,[r4,#0]
                  |L1.27188|
;;;10612  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10613  	//	{
;;;10614  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10615  	//				"  Напряжение будет  ",
;;;10616  	//				" увеличено до     @В",
;;;10617  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10618  	//				4800,UVZ,1);
;;;10619  	//	}
;;;10620  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10621  	//	{
;;;10622  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10623  	//				"     НАЖАТИЕМ       ",
;;;10624  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10625  	//				"      КНОПКИ        ",
;;;10626  	//				4800);
;;;10627  	//	} 
;;;10628  /*	if(sk_stat[1]==1)
;;;10629  		{
;;;10630  		hv_vz_stat=hvsWRK;
;;;10631  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10632  		}*/
;;;10633  	}
;;;10634  
;;;10635  if(hv_vz_stat==hvsSTEP3)
;;;10636  	{
;;;10637  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10638  		{
;;;10639  		hv_vz_stat_cnt=10;
006a34  270a              MOVS     r7,#0xa
;;;10640  		}
;;;10641  	hv_vz_stat_cnt--;
;;;10642  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10643  		{
;;;10644  		show_mess(	"     ВКЛЮЧИТЕ       ",
006a36  f2413888          MOV      r8,#0x1388
006a3a  2803              CMP      r0,#3                 ;10635
006a3c  d123              BNE      |L1.27270|
006a3e  7828              LDRB     r0,[r5,#0]            ;10637  ; hv_vz_stat_old
006a40  2803              CMP      r0,#3                 ;10637
006a42  d101              BNE      |L1.27208|
006a44  8820              LDRH     r0,[r4,#0]            ;10637  ; hv_vz_stat_cnt
006a46  b900              CBNZ     r0,|L1.27210|
                  |L1.27208|
006a48  8027              STRH     r7,[r4,#0]            ;10639
                  |L1.27210|
006a4a  8820              LDRH     r0,[r4,#0]            ;10641  ; hv_vz_stat_cnt
006a4c  f1a00001          SUB      r0,r0,#1              ;10641
006a50  b200              SXTH     r0,r0                 ;10641
006a52  8020              STRH     r0,[r4,#0]            ;10641
006a54  280a              CMP      r0,#0xa               ;10642
006a56  d001              BEQ      |L1.27228|
006a58  2809              CMP      r0,#9                 ;10642
006a5a  d10a              BNE      |L1.27250|
                  |L1.27228|
006a5c  4b3b              LDR      r3,|L1.27468|
006a5e  a26b              ADR      r2,|L1.27660|
006a60  3b48              SUBS     r3,r3,#0x48
006a62  f5a37194          SUB      r1,r3,#0x128
006a66  f1010018          ADD      r0,r1,#0x18
006a6a  f8cd8000          STR      r8,[sp,#0]
006a6e  f7fffffe          BL       show_mess
                  |L1.27250|
;;;10645  					"      ТУМБЛЕР       ",
;;;10646  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10647  					"       ЗАРЯД        ",
;;;10648  					5000);
;;;10649  		}
;;;10650  	if(sk_stat[1]==1)
006a72  7870              LDRB     r0,[r6,#1]  ; sk_stat
006a74  2801              CMP      r0,#1
006a76  d106              BNE      |L1.27270|
;;;10651  		{
;;;10652  		hv_vz_stat=hvsWRK;
006a78  f88a9000          STRB     r9,[r10,#0]
;;;10653  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006a7c  2105              MOVS     r1,#5
006a7e  f44f70b4          MOV      r0,#0x168
006a82  f7fffffe          BL       lc640_write
                  |L1.27270|
;;;10654  		}
;;;10655  	}
;;;10656  
;;;10657  if(hv_vz_stat==hvsWRK)
006a86  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006a8a  2805              CMP      r0,#5
006a8c  d13a              BNE      |L1.27396|
;;;10658  	{
;;;10659  	if(hv_vz_stat_old!=hv_vz_stat)
006a8e  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10660  		{
;;;10661  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006a90  4a64              LDR      r2,|L1.27684|
;;;10662  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10663  		hv_vz_up_cnt=0L;
006a92  4947              LDR      r1,|L1.27568|
006a94  2805              CMP      r0,#5                 ;10659
006a96  d00d              BEQ      |L1.27316|
006a98  4863              LDR      r0,|L1.27688|
006a9a  f44f6361          MOV      r3,#0xe10             ;10661
006a9e  f9b00000          LDRSH    r0,[r0,#0]            ;10661  ; VZ_HR
006aa2  fb00f303          MUL      r3,r0,r3              ;10661
006aa6  6013              STR      r3,[r2,#0]            ;10661  ; hv_vz_wrk_cnt
006aa8  b910              CBNZ     r0,|L1.27312|
006aaa  f44f60e1          MOV      r0,#0x708             ;10662
006aae  6010              STR      r0,[r2,#0]            ;10662  ; hv_vz_wrk_cnt
                  |L1.27312|
006ab0  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27316|
;;;10664  		}
;;;10665  	hv_vz_wrk_cnt--;
006ab4  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006ab6  f1a00001          SUB      r0,r0,#1
006aba  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10666  	hv_vz_up_cnt++;
006abc  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006abe  f1020201          ADD      r2,r2,#1
006ac2  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10667  
;;;10668  	if(hv_vz_wrk_cnt==0)
006ac4  b940              CBNZ     r0,|L1.27352|
;;;10669  		{
;;;10670  		hv_vz_stat=hvsERR4;
006ac6  f04f0009          MOV      r0,#9
006aca  f88a0000          STRB     r0,[r10,#0]
;;;10671  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006ace  4601              MOV      r1,r0
006ad0  f44f70b4          MOV      r0,#0x168
006ad4  f7fffffe          BL       lc640_write
                  |L1.27352|
;;;10672  		}
;;;10673  	if(sk_stat[0]==0)
006ad8  7830              LDRB     r0,[r6,#0]  ; sk_stat
006ada  b940              CBNZ     r0,|L1.27374|
;;;10674  		{
;;;10675  		hv_vz_stat=hvsERR2;
006adc  f04f0007          MOV      r0,#7
006ae0  f88a0000          STRB     r0,[r10,#0]
;;;10676  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006ae4  4601              MOV      r1,r0
006ae6  f44f70b4          MOV      r0,#0x168
006aea  f7fffffe          BL       lc640_write
                  |L1.27374|
;;;10677  		}
;;;10678  	if(sk_stat[1]==0)
006aee  7870              LDRB     r0,[r6,#1]  ; sk_stat
006af0  b940              CBNZ     r0,|L1.27396|
;;;10679  		{
;;;10680  		hv_vz_stat=hvsERR3;
006af2  f04f0008          MOV      r0,#8
006af6  f88a0000          STRB     r0,[r10,#0]
;;;10681  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006afa  4601              MOV      r1,r0
006afc  f44f70b4          MOV      r0,#0x168
006b00  f7fffffe          BL       lc640_write
                  |L1.27396|
;;;10682  		}
;;;10683  	}
;;;10684  
;;;10685  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006b04  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006b08  2806              CMP      r0,#6
006b0a  d119              BNE      |L1.27456|
;;;10686  	{
;;;10687  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006b0c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006b0e  2806              CMP      r0,#6
006b10  d101              BNE      |L1.27414|
006b12  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006b14  b900              CBNZ     r0,|L1.27416|
                  |L1.27414|
;;;10688  		{
;;;10689  		hv_vz_stat_cnt=10;
006b16  8027              STRH     r7,[r4,#0]
                  |L1.27416|
;;;10690  		}
;;;10691  	hv_vz_stat_cnt--;
006b18  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006b1a  f1a00001          SUB      r0,r0,#1
006b1e  b200              SXTH     r0,r0
006b20  8020              STRH     r0,[r4,#0]
;;;10692  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006b22  280a              CMP      r0,#0xa
006b24  d001              BEQ      |L1.27434|
006b26  2809              CMP      r0,#9
006b28  d10a              BNE      |L1.27456|
                  |L1.27434|
;;;10693  		{
;;;10694  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006b2a  4b23              LDR      r3,|L1.27576|
006b2c  f8cd8000          STR      r8,[sp,#0]
006b30  f1030218          ADD      r2,r3,#0x18
006b34  f1020118          ADD      r1,r2,#0x18
006b38  f5a16095          SUB      r0,r1,#0x4a8
006b3c  f7fffffe          BL       show_mess
                  |L1.27456|
;;;10695  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10696  					"      ВКЛЮЧЕН       ",
;;;10697  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10698  					5000);
;;;10699  		}
;;;10700  	}
;;;10701  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006b40  e074              B        |L1.27692|
006b42  0000              DCW      0x0000
                  |L1.27460|
                          DCD      speedChrgBlckStat
                  |L1.27464|
                          DCD      ||area_number.25||
                  |L1.27468|
                          DCD      ||.text||+0x1a54
                  |L1.27472|
006b50  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006b54  e7e0e1eb
006b58  eeeae8f0
006b5c  eee2e0ed
006b60  21      
006b61  20202000          DCB      "   ",0
006b65  00                DCB      0
006b66  00                DCB      0
006b67  00                DCB      0
                  |L1.27496|
006b68  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006b6c  202020e7
006b70  e0f0ffe4
006b74  20202020
006b78  20202020
006b7c  00      
006b7d  00                DCB      0
006b7e  00                DCB      0
006b7f  00                DCB      0
                  |L1.27520|
006b80  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006b84  20d3f1ea
006b88  eef0e5ed
006b8c  edfbe920
006b90  20202020
006b94  00      
006b95  00                DCB      0
006b96  00                DCB      0
006b97  00                DCB      0
                  |L1.27544|
                          DCD      sp_ch_stat
                  |L1.27548|
                          DCD      SP_CH_VENT_BLOK
                  |L1.27552|
                          DCD      sk_stat
                  |L1.27556|
                          DCD      sp_ch_stat_old
                  |L1.27560|
                          DCD      sp_ch_stat_cnt
                  |L1.27564|
                          DCD      sp_ch_wrk_cnt
                  |L1.27568|
                          DCD      hv_vz_up_cnt
                  |L1.27572|
                          DCD      speedChrgTimeInHour
                  |L1.27576|
                          DCD      ||.text||+0x191c
                  |L1.27580|
006bbc  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006bc0  caced0c5
006bc4  cdcddbc9
006bc8  20c7c0  
006bcb  d0dfc420          DCB      208,223,196,"  ",0
006bcf  2000    
006bd1  00                DCB      0
006bd2  00                DCB      0
006bd3  00                DCB      0
                  |L1.27604|
                          DCD      ||.text||+0x145c
                  |L1.27608|
                          DCD      speedChrgAvtEn
                  |L1.27612|
                          DCD      speedChargeStartCnt
                  |L1.27616|
                          DCD      speedChrgBlckSrc
                  |L1.27620|
                          DCD      load_U
                  |L1.27624|
                          DCD      u_necc
                  |L1.27628|
                          DCD      speedChrgDU
                  |L1.27632|
                          DCD      Ib_ips_termokompensat
                  |L1.27636|
                          DCD      IZMAX
                  |L1.27640|
                          DCD      speedChrgBlckLog
                  |L1.27644|
                          DCD      ||.bss||+0x40c
                  |L1.27648|
                          DCD      hv_vz_stat
                  |L1.27652|
                          DCD      hv_vz_stat_old
                  |L1.27656|
                          DCD      hv_vz_stat_cnt
                  |L1.27660|
006c0c  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006c10  dbd0c0c2
006c14  cdc8c2c0
006c18  ded9c8c9
006c1c  20202020          DCB      "    ",0
006c20  00      
006c21  00                DCB      0
006c22  00                DCB      0
006c23  00                DCB      0
                  |L1.27684|
                          DCD      hv_vz_wrk_cnt
                  |L1.27688|
                          DCD      VZ_HR
                  |L1.27692|
006c2c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c30  2807              CMP      r0,#7
006c32  d123              BNE      |L1.27772|
;;;10702  	{
;;;10703  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006c34  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006c36  2807              CMP      r0,#7
006c38  d101              BNE      |L1.27710|
006c3a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006c3c  b900              CBNZ     r0,|L1.27712|
                  |L1.27710|
;;;10704  		{
;;;10705  		hv_vz_stat_cnt=10;
006c3e  8027              STRH     r7,[r4,#0]
                  |L1.27712|
;;;10706  		}
;;;10707  	hv_vz_stat_cnt--;
006c40  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006c42  f1a00001          SUB      r0,r0,#1
006c46  b200              SXTH     r0,r0
006c48  8020              STRH     r0,[r4,#0]
;;;10708  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006c4a  280a              CMP      r0,#0xa
006c4c  d001              BEQ      |L1.27730|
006c4e  2809              CMP      r0,#9
006c50  d10a              BNE      |L1.27752|
                  |L1.27730|
;;;10709  		{
;;;10710  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006c52  4bff              LDR      r3,|L1.28752|
006c54  f8cd8000          STR      r8,[sp,#0]
006c58  f1030218          ADD      r2,r3,#0x18
006c5c  f1020118          ADD      r1,r2,#0x18
006c60  f1010018          ADD      r0,r1,#0x18
006c64  f7fffffe          BL       show_mess
                  |L1.27752|
;;;10711  					"    ЗАБЛОКИРОВАН    ",
;;;10712  					"     НЕИСПРАВНА     ",
;;;10713  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10714  					5000);
;;;10715  		}
;;;10716  	if(sk_stat[0]==1)
006c68  7830              LDRB     r0,[r6,#0]  ; sk_stat
006c6a  2801              CMP      r0,#1
006c6c  d106              BNE      |L1.27772|
;;;10717  		{
;;;10718  		hv_vz_stat=hvsWRK;
006c6e  f88a9000          STRB     r9,[r10,#0]
;;;10719  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006c72  2105              MOVS     r1,#5
006c74  f44f70b4          MOV      r0,#0x168
006c78  f7fffffe          BL       lc640_write
                  |L1.27772|
;;;10720  		}
;;;10721  	}
;;;10722  
;;;10723  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006c7c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c80  2808              CMP      r0,#8
006c82  d123              BNE      |L1.27852|
;;;10724  	{
;;;10725  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006c84  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006c86  2808              CMP      r0,#8
006c88  d101              BNE      |L1.27790|
006c8a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006c8c  b900              CBNZ     r0,|L1.27792|
                  |L1.27790|
;;;10726  		{
;;;10727  		hv_vz_stat_cnt=10;
006c8e  8027              STRH     r7,[r4,#0]
                  |L1.27792|
;;;10728  		}
;;;10729  	hv_vz_stat_cnt--;
006c90  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006c92  f1a00001          SUB      r0,r0,#1
006c96  b200              SXTH     r0,r0
006c98  8020              STRH     r0,[r4,#0]
;;;10730  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006c9a  280a              CMP      r0,#0xa
006c9c  d001              BEQ      |L1.27810|
006c9e  2809              CMP      r0,#9
006ca0  d10a              BNE      |L1.27832|
                  |L1.27810|
;;;10731  		{
;;;10732  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006ca2  4bec              LDR      r3,|L1.28756|
006ca4  f8cd8000          STR      r8,[sp,#0]
006ca8  f5a3621a          SUB      r2,r3,#0x9a0
006cac  f1020118          ADD      r1,r2,#0x18
006cb0  f5a160a1          SUB      r0,r1,#0x508
006cb4  f7fffffe          BL       show_mess
                  |L1.27832|
;;;10733  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10734  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10735  					"    ТУМБЛЕРА!!!     ",
;;;10736  					5000);
;;;10737  		}
;;;10738  	if(sk_stat[1]==1)
006cb8  7870              LDRB     r0,[r6,#1]  ; sk_stat
006cba  2801              CMP      r0,#1
006cbc  d106              BNE      |L1.27852|
;;;10739  		{
;;;10740  		hv_vz_stat=hvsWRK;
006cbe  f88a9000          STRB     r9,[r10,#0]
;;;10741  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006cc2  2105              MOVS     r1,#5
006cc4  f44f70b4          MOV      r0,#0x168
006cc8  f7fffffe          BL       lc640_write
                  |L1.27852|
;;;10742  		}
;;;10743  	}
;;;10744  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006ccc  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006cd0  2809              CMP      r0,#9
006cd2  d124              BNE      |L1.27934|
;;;10745  	{
;;;10746  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006cd4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006cd6  2809              CMP      r0,#9
006cd8  d101              BNE      |L1.27870|
006cda  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006cdc  b900              CBNZ     r0,|L1.27872|
                  |L1.27870|
;;;10747  		{
;;;10748  		hv_vz_stat_cnt=10;
006cde  8027              STRH     r7,[r4,#0]
                  |L1.27872|
;;;10749  		}
;;;10750  	hv_vz_stat_cnt--;
006ce0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ce2  f1a00001          SUB      r0,r0,#1
006ce6  b200              SXTH     r0,r0
006ce8  8020              STRH     r0,[r4,#0]
;;;10751  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006cea  280a              CMP      r0,#0xa
006cec  d001              BEQ      |L1.27890|
006cee  2809              CMP      r0,#9
006cf0  d10a              BNE      |L1.27912|
                  |L1.27890|
;;;10752  		{
;;;10753  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006cf2  4bd9              LDR      r3,|L1.28760|
006cf4  f2af02ec          ADR      r2,|L1.27660|
006cf8  f5a37194          SUB      r1,r3,#0x128
006cfc  f50170ac          ADD      r0,r1,#0x158
006d00  f8cd8000          STR      r8,[sp,#0]
006d04  f7fffffe          BL       show_mess
                  |L1.27912|
;;;10754  					"      ТУМБЛЕР       ",
;;;10755  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10756  					"       ЗАРЯД        ",
;;;10757  					5000);
;;;10758  		}
;;;10759  	if(sk_stat[1]==0)
006d08  7870              LDRB     r0,[r6,#1]  ; sk_stat
006d0a  b940              CBNZ     r0,|L1.27934|
;;;10760  		{
;;;10761  		hv_vz_stat=hvsOFF;
006d0c  f88ab000          STRB     r11,[r10,#0]
;;;10762  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006d10  2100              MOVS     r1,#0
006d12  f44f70b4          MOV      r0,#0x168
006d16  f7fffffe          BL       lc640_write
;;;10763  		vz_stop();
006d1a  f7fffffe          BL       vz_stop
                  |L1.27934|
;;;10764  
;;;10765  		}
;;;10766  	}
;;;10767  hv_vz_stat_old=hv_vz_stat;
006d1e  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006d22  7028              STRB     r0,[r5,#0]
;;;10768  /*
;;;10769  if(speedChIsOn)
;;;10770  	{
;;;10771  	speedChTimeCnt++;
;;;10772  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10773  		{
;;;10774  		speedChIsOn=0;
;;;10775  		}
;;;10776  	if(speedChrgBlckStat)
;;;10777  		{
;;;10778  		speedChIsOn=0;
;;;10779  		speedChTimeCnt=0;
;;;10780  		}
;;;10781  	}
;;;10782  
;;;10783  
;;;10784  
;;;10785  if(speedChrgAvtEn)
;;;10786  	{
;;;10787  	if(!speedChIsOn)
;;;10788  		{
;;;10789  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10790  			{
;;;10791  			speedChIsOn=1;
;;;10792  			}
;;;10793  		}
;;;10794  	}
;;;10795  
;;;10796  
;;;10797  
;;;10798  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10799  else
;;;10800  	{
;;;10801  	speedChrgBlckStat=0;
;;;10802  	if(speedChrgBlckSrc==1)
;;;10803  		{
;;;10804  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10805  		}
;;;10806  	else if(speedChrgBlckSrc==2)
;;;10807  		{
;;;10808  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10809  		}
;;;10810  	}
;;;10811  
;;;10812  
;;;10813  if(speedChrgBlckStat==1)
;;;10814  	{
;;;10815  
;;;10816  	//speedChargeStartStop();
;;;10817  
;;;10818  	speedChrgShowCnt++;
;;;10819  	if(speedChrgShowCnt>=30)	
;;;10820  		{
;;;10821  		speedChrgShowCnt=0;
;;;10822  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10823  					"       ЗАРЯД        ",
;;;10824  					"     ЗАПРЕЩЕН!!!    ",
;;;10825  					"                    ",
;;;10826  					5000);
;;;10827  		}
;;;10828  	}
;;;10829  else speedChrgShowCnt=0;
;;;10830  
;;;10831  */
;;;10832  }
006d24  e5e7              B        |L1.26870|
;;;10833  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10850  //-----------------------------------------------
;;;10851  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006d26  e92d41f0          PUSH     {r4-r8,lr}
;;;10852  {
;;;10853  
;;;10854  numOfForvardBps_old=numOfForvardBps;
006d2a  4ccc              LDR      r4,|L1.28764|
006d2c  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006d2e  7060              STRB     r0,[r4,#1]
;;;10855  
;;;10856  numOfForvardBps=0;
006d30  f04f0500          MOV      r5,#0
006d34  f8045928          STRB     r5,[r4],#-0x28
;;;10857  
;;;10858  //FORVARDBPSCHHOUR=10;
;;;10859  
;;;10860  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006d38  4ec9              LDR      r6,|L1.28768|
006d3a  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006d3e  2800              CMP      r0,#0
006d40  dd02              BLE      |L1.27976|
006d42  f5b07ffa          CMP      r0,#0x1f4
006d46  dd02              BLE      |L1.27982|
                  |L1.27976|
;;;10861  	{
;;;10862  	FORVARDBPSCHHOUR=0;
006d48  8035              STRH     r5,[r6,#0]
                  |L1.27978|
;;;10863  	return;
;;;10864  	}
;;;10865  
;;;10866  numOfForvardBps_minCnt++;
;;;10867  
;;;10868  
;;;10869  if(numOfForvardBps_minCnt>=60)
;;;10870  	{
;;;10871  	numOfForvardBps_minCnt=0;
;;;10872  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10873  	numOfForvardBps_hourCnt++;
;;;10874  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10875  		{
;;;10876  		numOfForvardBps_hourCnt=0;
;;;10877  		}
;;;10878  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10879  	}
;;;10880  
;;;10881  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10882  
;;;10883  //if(numOfForvardBps)
;;;10884  //numOfForvardBps_old=numOfForvardBps; 
;;;10885  }
006d4a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.27982|
006d4e  f894002a          LDRB     r0,[r4,#0x2a]         ;10866  ; numOfForvardBps_minCnt
006d52  f1000001          ADD      r0,r0,#1              ;10866
006d56  b2c0              UXTB     r0,r0                 ;10866
006d58  f884002a          STRB     r0,[r4,#0x2a]         ;10866
006d5c  283c              CMP      r0,#0x3c              ;10869
006d5e  d31b              BCC      |L1.28056|
006d60  f884502a          STRB     r5,[r4,#0x2a]         ;10871
006d64  f44f7794          MOV      r7,#0x128             ;10872
006d68  4638              MOV      r0,r7                 ;10872
006d6a  f7fffffe          BL       lc640_read_int
006d6e  f1000001          ADD      r0,r0,#1              ;10873
006d72  b200              SXTH     r0,r0                 ;10873
006d74  f8a40078          STRH     r0,[r4,#0x78]         ;10873
006d78  4aba              LDR      r2,|L1.28772|
006d7a  f9b61000          LDRSH    r1,[r6,#0]            ;10874  ; FORVARDBPSCHHOUR
006d7e  f9b22000          LDRSH    r2,[r2,#0]            ;10874  ; NUMIST
006d82  fb01f102          MUL      r1,r1,r2              ;10874
006d86  4281              CMP      r1,r0                 ;10874
006d88  dc01              BGT      |L1.28046|
006d8a  f8a45078          STRH     r5,[r4,#0x78]         ;10876
                  |L1.28046|
006d8e  f9b41078          LDRSH    r1,[r4,#0x78]         ;10878  ; numOfForvardBps_hourCnt
006d92  4638              MOV      r0,r7                 ;10878
006d94  f7fffffe          BL       lc640_write_int
                  |L1.28056|
006d98  f9b40078          LDRSH    r0,[r4,#0x78]         ;10881  ; numOfForvardBps_hourCnt
006d9c  f9b61000          LDRSH    r1,[r6,#0]            ;10881  ; FORVARDBPSCHHOUR
006da0  fb90f0f1          SDIV     r0,r0,r1              ;10881
006da4  f8840028          STRB     r0,[r4,#0x28]         ;10881
006da8  e7cf              B        |L1.27978|
;;;10886  
                          ENDP

                  numOfForvardBps_init PROC
;;;10887  //-----------------------------------------------
;;;10888  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006daa  b510              PUSH     {r4,lr}
;;;10889  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10890  lc640_write_int(EE_FORVBPSHOURCNT,0);
006dac  2100              MOVS     r1,#0
006dae  f44f7094          MOV      r0,#0x128
006db2  f7fffffe          BL       lc640_write_int
;;;10891  numOfForvardBps_minCnt=58;
006db6  49a9              LDR      r1,|L1.28764|
006db8  f04f003a          MOV      r0,#0x3a
006dbc  f1a10128          SUB      r1,r1,#0x28
006dc0  f881002a          STRB     r0,[r1,#0x2a]
;;;10892  }
006dc4  bd10              POP      {r4,pc}
;;;10893  
                          ENDP

                  outVoltContrHndl PROC
;;;10894  //-----------------------------------------------
;;;10895  void outVoltContrHndl(void)
006dc6  b570              PUSH     {r4-r6,lr}
;;;10896  { 
;;;10897  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006dc8  4ca7              LDR      r4,|L1.28776|
006dca  48a8              LDR      r0,|L1.28780|
;;;10898  	{
;;;10899  	outVoltContrHndlCnt_=0;
;;;10900  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006dcc  4aa8              LDR      r2,|L1.28784|
006dce  f9b41000          LDRSH    r1,[r4,#0]            ;10897  ; load_U
006dd2  f9b06000          LDRSH    r6,[r0,#0]            ;10897  ; U_OUT_KONTR_MAX
006dd6  2500              MOVS     r5,#0                 ;10899
006dd8  f9b20000          LDRSH    r0,[r2,#0]
006ddc  4ba5              LDR      r3,|L1.28788|
006dde  42b1              CMP      r1,r6                 ;10897
006de0  dc04              BGT      |L1.28140|
006de2  4ea5              LDR      r6,|L1.28792|
006de4  f9b66000          LDRSH    r6,[r6,#0]            ;10897  ; U_OUT_KONTR_MIN
006de8  42b1              CMP      r1,r6                 ;10897
006dea  da0f              BGE      |L1.28172|
                  |L1.28140|
006dec  801d              STRH     r5,[r3,#0]            ;10899
006dee  49a3              LDR      r1,|L1.28796|
006df0  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006df4  4288              CMP      r0,r1
006df6  da1b              BGE      |L1.28208|
;;;10901  		{
;;;10902  		outVoltContrHndlCnt++;
006df8  f1000001          ADD      r0,r0,#1
006dfc  b200              SXTH     r0,r0
006dfe  8010              STRH     r0,[r2,#0]
;;;10903  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006e00  4288              CMP      r0,r1
006e02  d115              BNE      |L1.28208|
;;;10904  			{
;;;10905  			avar_uout_hndl(1);
006e04  2001              MOVS     r0,#1
006e06  f7fffffe          BL       avar_uout_hndl
006e0a  e011              B        |L1.28208|
                  |L1.28172|
;;;10906  			}
;;;10907  		}
;;;10908  	}
;;;10909  else
;;;10910  	{
;;;10911  	if(outVoltContrHndlCnt)
006e0c  b180              CBZ      r0,|L1.28208|
;;;10912  		{
;;;10913  		if(outVoltContrHndlCnt_<5)
006e0e  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006e12  2805              CMP      r0,#5
006e14  da0c              BGE      |L1.28208|
;;;10914  			{
;;;10915  			outVoltContrHndlCnt_++;
006e16  f1000001          ADD      r0,r0,#1
006e1a  b200              SXTH     r0,r0
006e1c  8018              STRH     r0,[r3,#0]
;;;10916  			if(outVoltContrHndlCnt_>=5)
006e1e  2805              CMP      r0,#5
006e20  db06              BLT      |L1.28208|
;;;10917  				{
;;;10918  				outVoltContrHndlCnt=0;
006e22  8015              STRH     r5,[r2,#0]
;;;10919  				if(uout_av)avar_uout_hndl(0);
006e24  4896              LDR      r0,|L1.28800|
006e26  7800              LDRB     r0,[r0,#0]  ; uout_av
006e28  b110              CBZ      r0,|L1.28208|
006e2a  2000              MOVS     r0,#0
006e2c  f7fffffe          BL       avar_uout_hndl
                  |L1.28208|
;;;10920  				}
;;;10921  			}
;;;10922  		}
;;;10923  	}
;;;10924  
;;;10925  if (load_U<(USIGN*10)) 
006e30  4894              LDR      r0,|L1.28804|
006e32  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006e36  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006e3a  eb000080          ADD      r0,r0,r0,LSL #2
006e3e  ebb10f40          CMP      r1,r0,LSL #1
006e42  da0b              BGE      |L1.28252|
;;;10926  	{
;;;10927  	if(!bSILENT)
006e44  4890              LDR      r0,|L1.28808|
006e46  6800              LDR      r0,[r0,#0]  ; bSILENT
006e48  2800              CMP      r0,#0
006e4a  d107              BNE      |L1.28252|
;;;10928  		{
;;;10929  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006e4c  e8bd4070          POP      {r4-r6,lr}
006e50  2314              MOVS     r3,#0x14
006e52  2201              MOVS     r2,#1
006e54  2172              MOVS     r1,#0x72
006e56  20d2              MOVS     r0,#0xd2
006e58  f7ffbffe          B.W      mess_send
                  |L1.28252|
;;;10930  		}
;;;10931  
;;;10932  	//bU_BAT2REL_AV_BAT=1;
;;;10933  	}
;;;10934  
;;;10935  
;;;10936  }
006e5c  bd70              POP      {r4-r6,pc}
;;;10937  
                          ENDP

                  vent_resurs_hndl PROC
;;;10938  //-----------------------------------------------
;;;10939  void vent_resurs_hndl(void)
006e5e  e92d47f0          PUSH     {r4-r10,lr}
;;;10940  {
;;;10941  char i;
;;;10942  char crc_in,crc_eval;
;;;10943  
;;;10944  for(i=0;i<NUMIST;i++)
006e62  f04f0200          MOV      r2,#0
;;;10945  	{
;;;10946  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10947  		{
;;;10948  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10949  		}
;;;10950  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10951  		{
;;;10952  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10953  		}
;;;10954  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10955  		{
;;;10956  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10957  		}
;;;10958  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10959  		{
;;;10960  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10961  		}
;;;10962  	crc_in=0;
;;;10963  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10964  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10965  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10966  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10967  
;;;10968  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10969  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10970  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10971  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10972  
;;;10973  	if(crc_eval==crc_in)
;;;10974  		{
;;;10975  		unsigned short temp_US;
;;;10976  		temp_US=0;
;;;10977  
;;;10978  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10979  		temp_US<<=4;
;;;10980  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10981  		temp_US<<=4;
;;;10982  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10983  		temp_US<<=4;
;;;10984  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10985  
;;;10986  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10987  		}
;;;10988  
;;;10989  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006e66  4889              LDR      r0,|L1.28812|
006e68  f8dfc224          LDR      r12,|L1.28816|
006e6c  f9b06000          LDRSH    r6,[r0,#0]
006e70  487c              LDR      r0,|L1.28772|
006e72  f9b07000          LDRSH    r7,[r0,#0]            ;10944
006e76  e06e              B        |L1.28502|
                  |L1.28280|
006e78  eb0200c2          ADD      r0,r2,r2,LSL #3       ;10946
006e7c  eb001002          ADD      r0,r0,r2,LSL #4       ;10946
006e80  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10946
006e84  7b41              LDRB     r1,[r0,#0xd]          ;10946
006e86  098b              LSRS     r3,r1,#6              ;10946
006e88  d006              BEQ      |L1.28312|
006e8a  2301              MOVS     r3,#1                 ;10950
006e8c  ebb31f91          CMP      r3,r1,LSR #6          ;10950
006e90  d105              BNE      |L1.28318|
006e92  f8801059          STRB     r1,[r0,#0x59]         ;10952
006e96  e00f              B        |L1.28344|
                  |L1.28312|
006e98  f8801058          STRB     r1,[r0,#0x58]         ;10948
006e9c  e00c              B        |L1.28344|
                  |L1.28318|
006e9e  2302              MOVS     r3,#2                 ;10954
006ea0  ebb31f91          CMP      r3,r1,LSR #6          ;10954
006ea4  d102              BNE      |L1.28332|
006ea6  f880105a          STRB     r1,[r0,#0x5a]         ;10956
006eaa  e005              B        |L1.28344|
                  |L1.28332|
006eac  2303              MOVS     r3,#3                 ;10958
006eae  ebb31f91          CMP      r3,r1,LSR #6          ;10958
006eb2  d101              BNE      |L1.28344|
006eb4  f880105b          STRB     r1,[r0,#0x5b]         ;10960
                  |L1.28344|
006eb8  f8101f58          LDRB     r1,[r0,#0x58]!        ;10963
006ebc  f3c11401          UBFX     r4,r1,#4,#2           ;10963
006ec0  7843              LDRB     r3,[r0,#1]            ;10964
006ec2  f0030530          AND      r5,r3,#0x30           ;10964
006ec6  ea440495          ORR      r4,r4,r5,LSR #2       ;10964
006eca  f8909002          LDRB     r9,[r0,#2]            ;10965
006ece  f0090830          AND      r8,r9,#0x30           ;10965
006ed2  ea480804          ORR      r8,r8,r4              ;10965
006ed6  78c5              LDRB     r5,[r0,#3]            ;10966
006ed8  f1a00058          SUB      r0,r0,#0x58           ;10966
006edc  f0050430          AND      r4,r5,#0x30           ;10966
006ee0  ea480884          ORR      r8,r8,r4,LSL #2       ;10966
006ee4  f001010f          AND      r1,r1,#0xf            ;10968
006ee8  f003040f          AND      r4,r3,#0xf            ;10969
006eec  ea840a01          EOR      r10,r4,r1             ;10969
006ef0  f009030f          AND      r3,r9,#0xf            ;10970
006ef4  ea83090a          EOR      r9,r3,r10             ;10970
006ef8  f005050f          AND      r5,r5,#0xf            ;10971
006efc  ea850909          EOR      r9,r5,r9              ;10971
006f00  45c1              CMP      r9,r8                 ;10973
006f02  d113              BNE      |L1.28460|
006f04  ea4f1505          LSL      r5,r5,#4              ;10979
006f08  ea430305          ORR      r3,r3,r5              ;10980
006f0c  ea4f1303          LSL      r3,r3,#4              ;10981
006f10  ea440403          ORR      r4,r4,r3              ;10982
006f14  ea4f5304          LSL      r3,r4,#20             ;10983
006f18  ea4f4313          LSR      r3,r3,#16             ;10983
006f1c  ea410103          ORR      r1,r1,r3              ;10984
006f20  f8b0305c          LDRH     r3,[r0,#0x5c]         ;10986
006f24  428b              CMP      r3,r1                 ;10986
006f26  d001              BEQ      |L1.28460|
006f28  f8a0105c          STRH     r1,[r0,#0x5c]         ;10986
                  |L1.28460|
006f2c  f8b0105c          LDRH     r1,[r0,#0x5c]
006f30  eb060386          ADD      r3,r6,r6,LSL #2
006f34  ebb10f43          CMP      r1,r3,LSL #1
006f38  dd06              BLE      |L1.28488|
006f3a  2e00              CMP      r6,#0
006f3c  dd04              BLE      |L1.28488|
;;;10990  		{
;;;10991  		bps[i]._av|=(1<<4);
006f3e  7841              LDRB     r1,[r0,#1]
006f40  f0410110          ORR      r1,r1,#0x10
006f44  7041              STRB     r1,[r0,#1]
006f46  e003              B        |L1.28496|
                  |L1.28488|
;;;10992  		}
;;;10993  	else bps[i]._av&=~(1<<4);
006f48  7841              LDRB     r1,[r0,#1]
006f4a  f0210110          BIC      r1,r1,#0x10
006f4e  7041              STRB     r1,[r0,#1]
                  |L1.28496|
006f50  f1020201          ADD      r2,r2,#1              ;10944
006f54  b2d2              UXTB     r2,r2                 ;10944
                  |L1.28502|
006f56  42ba              CMP      r2,r7                 ;10944
006f58  db8e              BLT      |L1.28280|
;;;10994  	}
;;;10995  }
006f5a  e8bd87f0          POP      {r4-r10,pc}
;;;10996  
                          ENDP

                  vent_hndl PROC
;;;10997  //-----------------------------------------------
;;;10998  void vent_hndl(void)
006f5e  e92d4ff0          PUSH     {r4-r11,lr}
;;;10999  {
006f62  b087              SUB      sp,sp,#0x1c
;;;11000  if(RELEVENTSIGN==rvsAKB)
;;;11001  	{
;;;11002  	if(vent_stat==0)
006f64  4c3d              LDR      r4,|L1.28764|
006f66  484b              LDR      r0,|L1.28820|
;;;11003  		{
;;;11004  		if	(
;;;11005  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
006f68  494b              LDR      r1,|L1.28824|
;;;11006  			||
;;;11007  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11008  			)
;;;11009  			{
;;;11010  			vent_stat=1;
;;;11011  			}
;;;11012  		}
;;;11013  	else if(vent_stat==1)
;;;11014  		{
;;;11015  		if	(
;;;11016  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006f6a  4a4c              LDR      r2,|L1.28828|
006f6c  3c28              SUBS     r4,r4,#0x28           ;11002
006f6e  7800              LDRB     r0,[r0,#0]            ;11000  ; RELEVENTSIGN
006f70  f9943000          LDRSB    r3,[r4,#0]            ;11002
006f74  f9b11000          LDRSH    r1,[r1,#0]            ;11005
006f78  f9b22000          LDRSH    r2,[r2,#0]
006f7c  b148              CBZ      r0,|L1.28562|
;;;11017  			&&
;;;11018  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11019  			)
;;;11020  			{
;;;11021  			vent_stat=0;
;;;11022  			}
;;;11023  		}
;;;11024  	}
;;;11025  else if(RELEVENTSIGN==rvsBPS)
006f7e  2802              CMP      r0,#2
006f80  d03c              BEQ      |L1.28668|
;;;11026  	{
;;;11027  /*	if	(
;;;11028  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11029  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11030  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11031  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11032  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11033  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11034  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11035  		)
;;;11036  		{
;;;11037  		vent_stat=1;
;;;11038  		}
;;;11039  	else vent_stat=0;
;;;11040  	*/
;;;11041  
;;;11042  	if	(
;;;11043  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11044  		||
;;;11045  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11046  		||
;;;11047  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11048  		||
;;;11049  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11050  		||
;;;11051  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11052  		||
;;;11053  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11054  		||
;;;11055  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11056  		||
;;;11057  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11058  		)
;;;11059  		{
;;;11060  		vent_stat=1;
;;;11061  		}
;;;11062  	else if(vent_stat==1)
;;;11063  		{
;;;11064  		if	(
;;;11065  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11066  			&&
;;;11067  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11068  			&&
;;;11069  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11070  			&&
;;;11071  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11072  			&&
;;;11073  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11074  			&&
;;;11075  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11076  			&&
;;;11077  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11078  			&&
;;;11079  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11080  			)
;;;11081  			{
;;;11082  			vent_stat=0;
;;;11083  			}
;;;11084  		}
;;;11085  	}
;;;11086  else if(RELEVENTSIGN==rvsEXT)
006f82  2801              CMP      r0,#1
006f84  d063              BEQ      |L1.28750|
;;;11087  	{
;;;11088  	if	(
;;;11089  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11090  		||
;;;11091  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11092  		||
;;;11093  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11094  		)
;;;11095  		{
;;;11096  		vent_stat=1;
;;;11097  		}
;;;11098  	else if(vent_stat==1)
;;;11099  		{
;;;11100  		if	(
;;;11101  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11102  			&&
;;;11103  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11104  			&&
;;;11105  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11106  			)
;;;11107  			{
;;;11108  			vent_stat=0;
;;;11109  			}
;;;11110  		}
;;;11111  	}
;;;11112  else vent_stat=1;
006f86  f04f0001          MOV      r0,#1
006f8a  7020              STRB     r0,[r4,#0]
                  |L1.28556|
;;;11113  }
006f8c  b007              ADD      sp,sp,#0x1c
006f8e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.28562|
006f92  4f43              LDR      r7,|L1.28832|
006f94  f8df810c          LDR      r8,|L1.28836|
006f98  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11005
006f9c  7b3d              LDRB     r5,[r7,#0xc]          ;11005
006f9e  f9b76056          LDRSH    r6,[r7,#0x56]         ;11007
006fa2  f898c000          LDRB     r12,[r8,#0]           ;11004
006fa6  f8977058          LDRB     r7,[r7,#0x58]         ;11007
006faa  f8988001          LDRB     r8,[r8,#1]            ;11007
006fae  b12b              CBZ      r3,|L1.28604|
006fb0  2b01              CMP      r3,#1                 ;11013
006fb2  d1eb              BNE      |L1.28556|
006fb4  f1bc0f55          CMP      r12,#0x55             ;11015
006fb8  d115              BNE      |L1.28646|
006fba  e010              B        |L1.28638|
                  |L1.28604|
006fbc  f1bc0f55          CMP      r12,#0x55             ;11004
006fc0  d102              BNE      |L1.28616|
006fc2  4288              CMP      r0,r1                 ;11005
006fc4  dc07              BGT      |L1.28630|
006fc6  b935              CBNZ     r5,|L1.28630|
                  |L1.28616|
006fc8  f1b80f55          CMP      r8,#0x55              ;11007
006fcc  d1de              BNE      |L1.28556|
006fce  428e              CMP      r6,r1                 ;11007
006fd0  dc01              BGT      |L1.28630|
006fd2  2f00              CMP      r7,#0                 ;11007
006fd4  d0da              BEQ      |L1.28556|
                  |L1.28630|
006fd6  f04f0001          MOV      r0,#1                 ;11010
006fda  7020              STRB     r0,[r4,#0]            ;11010
006fdc  e7d6              B        |L1.28556|
                  |L1.28638|
006fde  4290              CMP      r0,r2                 ;11016
006fe0  dad4              BGE      |L1.28556|
006fe2  2d00              CMP      r5,#0                 ;11016
006fe4  d1d2              BNE      |L1.28556|
                  |L1.28646|
006fe6  f1b80f55          CMP      r8,#0x55              ;11018
006fea  d103              BNE      |L1.28660|
006fec  4296              CMP      r6,r2                 ;11018
006fee  dacd              BGE      |L1.28556|
006ff0  2f00              CMP      r7,#0                 ;11018
006ff2  d1cb              BNE      |L1.28556|
                  |L1.28660|
006ff4  f04f0000          MOV      r0,#0                 ;11021
006ff8  7020              STRB     r0,[r4,#0]            ;11021
006ffa  e7c7              B        |L1.28556|
                  |L1.28668|
006ffc  4e24              LDR      r6,|L1.28816|
006ffe  4819              LDR      r0,|L1.28772|
007000  6ab5              LDR      r5,[r6,#0x28]         ;11043
007002  f9b00000          LDRSH    r0,[r0,#0]            ;11042  ; NUMIST
007006  78f6              LDRB     r6,[r6,#3]            ;11043
007008  b118              CBZ      r0,|L1.28690|
00700a  428d              CMP      r5,r1                 ;11043
00700c  dc7e              BGT      |L1.28940|
00700e  2e1e              CMP      r6,#0x1e              ;11043
007010  d27c              BCS      |L1.28940|
                  |L1.28690|
007012  f8dfc07c          LDR      r12,|L1.28816|
007016  2801              CMP      r0,#1                 ;11045
007018  f8dc708c          LDR      r7,[r12,#0x8c]        ;11045
00701c  f89cc067          LDRB     r12,[r12,#0x67]       ;11045
007020  f8cdc018          STR      r12,[sp,#0x18]        ;11045
007024  dd06              BLE      |L1.28724|
007026  428f              CMP      r7,r1                 ;11045
007028  dc70              BGT      |L1.28940|
00702a  f8ddc018          LDR      r12,[sp,#0x18]        ;11045
00702e  f1bc0f1e          CMP      r12,#0x1e             ;11045
007032  d26b              BCS      |L1.28940|
                  |L1.28724|
007034  f8dfc058          LDR      r12,|L1.28816|
007038  2802              CMP      r0,#2                 ;11047
00703a  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11047
00703e  f8cd8014          STR      r8,[sp,#0x14]         ;11047
007042  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11047
007046  f8cdc010          STR      r12,[sp,#0x10]        ;11047
00704a  dd36              BLE      |L1.28858|
00704c  e02c              B        |L1.28840|
                  |L1.28750|
00704e  e0c9              B        |L1.29156|
                  |L1.28752|
                          DCD      ||.text||+0x145c
                  |L1.28756|
                          DCD      ||.text||+0x2334
                  |L1.28760|
                          DCD      ||.text||+0x1a0c
                  |L1.28764|
                          DCD      ||area_number.25||+0x28
                  |L1.28768|
                          DCD      FORVARDBPSCHHOUR
                  |L1.28772|
                          DCD      NUMIST
                  |L1.28776|
                          DCD      load_U
                  |L1.28780|
                          DCD      U_OUT_KONTR_MAX
                  |L1.28784|
                          DCD      outVoltContrHndlCnt
                  |L1.28788|
                          DCD      outVoltContrHndlCnt_
                  |L1.28792|
                          DCD      U_OUT_KONTR_MIN
                  |L1.28796|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.28800|
                          DCD      uout_av
                  |L1.28804|
                          DCD      USIGN
                  |L1.28808|
                          DCD      bSILENT
                  |L1.28812|
                          DCD      TVENTMAX
                  |L1.28816|
                          DCD      bps
                  |L1.28820|
                          DCD      RELEVENTSIGN
                  |L1.28824|
                          DCD      TVENTON
                  |L1.28828|
                          DCD      TVENTOFF
                  |L1.28832|
                          DCD      bat
                  |L1.28836|
                          DCD      BAT_IS_ON
                  |L1.28840|
0070a8  f8ddc014          LDR      r12,[sp,#0x14]        ;11047
0070ac  458c              CMP      r12,r1                ;11047
0070ae  dc57              BGT      |L1.29024|
0070b0  f8ddc010          LDR      r12,[sp,#0x10]        ;11047
0070b4  f1bc0f1e          CMP      r12,#0x1e             ;11047
0070b8  d252              BCS      |L1.29024|
                  |L1.28858|
0070ba  f8dfc1b4          LDR      r12,|L1.29296|
0070be  2803              CMP      r0,#3                 ;11049
0070c0  f8dc8154          LDR      r8,[r12,#0x154]       ;11049
0070c4  f8cd800c          STR      r8,[sp,#0xc]          ;11049
0070c8  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11049
0070cc  f8cdc008          STR      r12,[sp,#8]           ;11049
0070d0  dd08              BLE      |L1.28900|
0070d2  f8ddc00c          LDR      r12,[sp,#0xc]         ;11049
0070d6  458c              CMP      r12,r1                ;11049
0070d8  dc42              BGT      |L1.29024|
0070da  f8ddc008          LDR      r12,[sp,#8]           ;11049
0070de  f1bc0f1e          CMP      r12,#0x1e             ;11049
0070e2  d23d              BCS      |L1.29024|
                  |L1.28900|
0070e4  f8df8188          LDR      r8,|L1.29296|
0070e8  2804              CMP      r0,#4                 ;11051
0070ea  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11051
0070ee  f8988193          LDRB     r8,[r8,#0x193]        ;11051
0070f2  f8cd8004          STR      r8,[sp,#4]            ;11051
0070f6  dd06              BLE      |L1.28934|
0070f8  458c              CMP      r12,r1                ;11051
0070fa  dc31              BGT      |L1.29024|
0070fc  f8dd8004          LDR      r8,[sp,#4]            ;11051
007100  f1b80f1e          CMP      r8,#0x1e              ;11051
007104  d22c              BCS      |L1.29024|
                  |L1.28934|
007106  f8df9168          LDR      r9,|L1.29296|
00710a  e000              B        |L1.28942|
                  |L1.28940|
00710c  e028              B        |L1.29024|
                  |L1.28942|
00710e  f8d9821c          LDR      r8,[r9,#0x21c]        ;11053
007112  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11053
007116  f8cd9000          STR      r9,[sp,#0]            ;11053
00711a  2805              CMP      r0,#5                 ;11053
00711c  dd06              BLE      |L1.28972|
00711e  4588              CMP      r8,r1                 ;11053
007120  dc1e              BGT      |L1.29024|
007122  f8dd9000          LDR      r9,[sp,#0]            ;11053
007126  f1b90f1e          CMP      r9,#0x1e              ;11053
00712a  d219              BCS      |L1.29024|
                  |L1.28972|
00712c  f8dfa140          LDR      r10,|L1.29296|
007130  2806              CMP      r0,#6                 ;11055
007132  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11055
007136  f8da9280          LDR      r9,[r10,#0x280]       ;11055
00713a  dd04              BLE      |L1.28998|
00713c  4589              CMP      r9,r1                 ;11055
00713e  dc0f              BGT      |L1.29024|
007140  f1be0f1e          CMP      lr,#0x1e              ;11055
007144  d20c              BCS      |L1.29024|
                  |L1.28998|
007146  f8dfb128          LDR      r11,|L1.29296|
00714a  2807              CMP      r0,#7                 ;11057
00714c  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11057
007150  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11057
007154  dd08              BLE      |L1.29032|
007156  458a              CMP      r10,r1                ;11057
007158  dc02              BGT      |L1.29024|
00715a  f1bb0f1e          CMP      r11,#0x1e             ;11057
00715e  d303              BCC      |L1.29032|
                  |L1.29024|
007160  f04f0001          MOV      r0,#1                 ;11060
007164  7020              STRB     r0,[r4,#0]            ;11060
                  |L1.29030|
007166  e711              B        |L1.28556|
                  |L1.29032|
007168  2b01              CMP      r3,#1                 ;11062
00716a  d1fc              BNE      |L1.29030|
00716c  b118              CBZ      r0,|L1.29046|
00716e  4295              CMP      r5,r2                 ;11065
007170  daf9              BGE      |L1.29030|
007172  2e0a              CMP      r6,#0xa               ;11065
007174  d2f7              BCS      |L1.29030|
                  |L1.29046|
007176  2802              CMP      r0,#2                 ;11067
007178  db04              BLT      |L1.29060|
00717a  4297              CMP      r7,r2                 ;11067
00717c  daf3              BGE      |L1.29030|
00717e  9906              LDR      r1,[sp,#0x18]         ;11067
007180  290a              CMP      r1,#0xa               ;11067
007182  d2f0              BCS      |L1.29030|
                  |L1.29060|
007184  2803              CMP      r0,#3                 ;11069
007186  db05              BLT      |L1.29076|
007188  9905              LDR      r1,[sp,#0x14]         ;11069
00718a  4291              CMP      r1,r2                 ;11069
00718c  daeb              BGE      |L1.29030|
00718e  9904              LDR      r1,[sp,#0x10]         ;11069
007190  290a              CMP      r1,#0xa               ;11069
007192  d2e8              BCS      |L1.29030|
                  |L1.29076|
007194  2804              CMP      r0,#4                 ;11071
007196  db05              BLT      |L1.29092|
007198  9903              LDR      r1,[sp,#0xc]          ;11071
00719a  4291              CMP      r1,r2                 ;11071
00719c  dae3              BGE      |L1.29030|
00719e  9902              LDR      r1,[sp,#8]            ;11071
0071a0  290a              CMP      r1,#0xa               ;11071
0071a2  d2e0              BCS      |L1.29030|
                  |L1.29092|
0071a4  2805              CMP      r0,#5                 ;11073
0071a6  db04              BLT      |L1.29106|
0071a8  4594              CMP      r12,r2                ;11073
0071aa  dadc              BGE      |L1.29030|
0071ac  9901              LDR      r1,[sp,#4]            ;11073
0071ae  290a              CMP      r1,#0xa               ;11073
0071b0  d2d9              BCS      |L1.29030|
                  |L1.29106|
0071b2  2806              CMP      r0,#6                 ;11075
0071b4  db04              BLT      |L1.29120|
0071b6  4590              CMP      r8,r2                 ;11075
0071b8  dad5              BGE      |L1.29030|
0071ba  9900              LDR      r1,[sp,#0]            ;11075
0071bc  290a              CMP      r1,#0xa               ;11075
0071be  d2d2              BCS      |L1.29030|
                  |L1.29120|
0071c0  2807              CMP      r0,#7                 ;11077
0071c2  db04              BLT      |L1.29134|
0071c4  4591              CMP      r9,r2                 ;11077
0071c6  dace              BGE      |L1.29030|
0071c8  f1be0f0a          CMP      lr,#0xa               ;11077
0071cc  d2cb              BCS      |L1.29030|
                  |L1.29134|
0071ce  2808              CMP      r0,#8                 ;11079
0071d0  db04              BLT      |L1.29148|
0071d2  4592              CMP      r10,r2                ;11079
0071d4  dac7              BGE      |L1.29030|
0071d6  f1bb0f0a          CMP      r11,#0xa              ;11079
0071da  d2c4              BCS      |L1.29030|
                  |L1.29148|
0071dc  f04f0000          MOV      r0,#0                 ;11082
0071e0  7020              STRB     r0,[r4,#0]            ;11082
                  |L1.29154|
0071e2  e6d3              B        |L1.28556|
                  |L1.29156|
0071e4  4823              LDR      r0,|L1.29300|
0071e6  4d24              LDR      r5,|L1.29304|
0071e8  4e24              LDR      r6,|L1.29308|
0071ea  f9b00000          LDRSH    r0,[r0,#0]            ;11088  ; NUMDT
0071ee  f9b55000          LDRSH    r5,[r5,#0]            ;11089
0071f2  7836              LDRB     r6,[r6,#0]            ;11089
0071f4  b110              CBZ      r0,|L1.29180|
0071f6  428d              CMP      r5,r1                 ;11089
0071f8  dc1d              BGT      |L1.29238|
0071fa  b9e6              CBNZ     r6,|L1.29238|
                  |L1.29180|
0071fc  4f1e              LDR      r7,|L1.29304|
0071fe  f8dfc07c          LDR      r12,|L1.29308|
007202  2801              CMP      r0,#1                 ;11091
007204  f9b77002          LDRSH    r7,[r7,#2]            ;11091
007208  f89cc001          LDRB     r12,[r12,#1]          ;11091
00720c  dd04              BLE      |L1.29208|
00720e  428f              CMP      r7,r1                 ;11091
007210  dc11              BGT      |L1.29238|
007212  f1bc0f00          CMP      r12,#0                ;11091
007216  d10e              BNE      |L1.29238|
                  |L1.29208|
007218  f8df805c          LDR      r8,|L1.29304|
00721c  f8df905c          LDR      r9,|L1.29308|
007220  2802              CMP      r0,#2                 ;11093
007222  f9b88004          LDRSH    r8,[r8,#4]            ;11093
007226  f8999002          LDRB     r9,[r9,#2]            ;11093
00722a  dd08              BLE      |L1.29246|
00722c  4588              CMP      r8,r1                 ;11093
00722e  dc02              BGT      |L1.29238|
007230  f1b90f00          CMP      r9,#0                 ;11093
007234  d003              BEQ      |L1.29246|
                  |L1.29238|
007236  f04f0001          MOV      r0,#1                 ;11096
00723a  7020              STRB     r0,[r4,#0]            ;11096
00723c  e6a6              B        |L1.28556|
                  |L1.29246|
00723e  2b01              CMP      r3,#1                 ;11098
007240  d191              BNE      |L1.29030|
007242  b118              CBZ      r0,|L1.29260|
007244  4295              CMP      r5,r2                 ;11101
007246  da8e              BGE      |L1.29030|
007248  2e00              CMP      r6,#0                 ;11101
00724a  d18c              BNE      |L1.29030|
                  |L1.29260|
00724c  2802              CMP      r0,#2                 ;11103
00724e  db04              BLT      |L1.29274|
007250  4297              CMP      r7,r2                 ;11103
007252  da88              BGE      |L1.29030|
007254  f1bc0f00          CMP      r12,#0                ;11103
007258  d185              BNE      |L1.29030|
                  |L1.29274|
00725a  2803              CMP      r0,#3                 ;11105
00725c  db04              BLT      |L1.29288|
00725e  4590              CMP      r8,r2                 ;11105
007260  dabf              BGE      |L1.29154|
007262  f1b90f00          CMP      r9,#0                 ;11105
007266  d1bc              BNE      |L1.29154|
                  |L1.29288|
007268  f04f0000          MOV      r0,#0                 ;11108
00726c  7020              STRB     r0,[r4,#0]            ;11108
00726e  e68d              B        |L1.28556|
;;;11114  
                          ENDP

                  |L1.29296|
                          DCD      bps
                  |L1.29300|
                          DCD      NUMDT
                  |L1.29304|
                          DCD      t_ext
                  |L1.29308|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;308    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;309    if(spc_stat!=spcVZ) 
;;;310    	{
;;;311    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;309
;;;312    	sp_ch_error=0;
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
;;;918    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;310    	{
;;;311    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;309  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;309
00000c  b200              SXTH     r0,r0                 ;309
00000e  f7fffffe          BL       abs_pal
;;;312    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;313    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;314    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;317  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;317  ; adc_self_ch_buff
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;317
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  f44f7196          MOV      r1,#0x12c
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f1a406ee          SUB      r6,r4,#0xee
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;792    	snmp_bat_flag_puts[1]=0;
000040  87b0              STRH     r0,[r6,#0x3c]
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;319
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;319  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;319
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;321  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;319
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;321  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;322
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;322  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;322
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;321  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;322  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;324  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
000074  6004              STR      r4,[r0,#0]            ;324  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;324  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
00007c  6044              STR      r4,[r0,#4]            ;325  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;325  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;325
000084  6084              STR      r4,[r0,#8]            ;330  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;330  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;330
00008c  60c1              STR      r1,[r0,#0xc]          ;331  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;333  ; adc_result
000092  2964              CMP      r1,#0x64              ;333
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;333  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;334
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;334
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;338
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;338  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;340
0000b0  428c              CMP      r4,r1                 ;340
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;341
0000b8  6002              STR      r2,[r0,#0]            ;343  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;343  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;343  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;343  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;343
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;343  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;344
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;344  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;349
0000d2  b209              SXTH     r1,r1                 ;349
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;349
0000d6  f5b17f00          CMP      r1,#0x200             ;350
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;352
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;352  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;352
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;353
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;353
0000f2  ea4f2424          ASR      r4,r4,#8              ;357
0000f6  8774              STRH     r4,[r6,#0x3a]         ;357
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;359
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;359  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;360
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]         ;362
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f           ;362
00010a  2827              CMP      r0,#0x27              ;362
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]         ;362  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1                 ;363
000116  7530              STRB     r0,[r6,#0x14]         ;363
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]         ;368  ; adc_ch
00011e  7cf3              LDRB     r3,[r6,#0x13]         ;368  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6       ;368
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;369  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]     ;369
00012c  0798              LSLS     r0,r3,#30             ;371
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0                 ;371
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]    ;371
000136  4461              ADD      r1,r1,r12             ;372
000138  f1000001          ADD      r0,r0,#1              ;372
00013c  b2c0              UXTB     r0,r0                 ;372
00013e  2810              CMP      r0,#0x10              ;372
000140  d3f7              BCC      |L3.306|
000142  ea4f1021          ASR      r0,r1,#4              ;376
000146  4933              LDR      r1,|L3.532|
000148  f1a10120          SUB      r1,r1,#0x20           ;376
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]     ;376
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1              ;376
000152  b2e8              UXTB     r0,r5                 ;376
000154  74b0              STRB     r0,[r6,#0x12]         ;376
000156  2810              CMP      r0,#0x10              ;376
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]         ;377
00015c  f1030301          ADD      r3,r3,#1              ;377
000160  b2d8              UXTB     r0,r3                 ;377
000162  74f0              STRB     r0,[r6,#0x13]         ;377
000164  2810              CMP      r0,#0x10              ;377
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]         ;379
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]         ;379
00016c  f1070701          ADD      r7,r7,#1              ;379
000170  f0070001          AND      r0,r7,#1              ;379
000174  7470              STRB     r0,[r6,#0x11]         ;379
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]            ;390
00017c  f02000ff          BIC      r0,r0,#0xff           ;390
000180  f1000004          ADD      r0,r0,#4              ;391
000184  6010              STR      r0,[r2,#0]            ;393
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]         ;393  ; adc_ch
00018a  0708              LSLS     r0,r1,#28             ;393
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]            ;393
000190  f02000ff          BIC      r0,r0,#0xff           ;394
000194  f1000001          ADD      r0,r0,#1              ;394
000198  6010              STR      r0,[r2,#0]            ;398
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]            ;398
00019e  f02000ff          BIC      r0,r0,#0xff           ;398
0001a2  f1000002          ADD      r0,r0,#2              ;409
0001a6  6010              STR      r0,[r2,#0]            ;409
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]            ;410
0001ac  f0435380          ORR      r3,r3,#0x10000000     ;410
0001b0  6003              STR      r3,[r0,#0]            ;412
0001b2  6a03              LDR      r3,[r0,#0x20]         ;412
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;412
0001b8  6203              STR      r3,[r0,#0x20]         ;412
0001ba  6e03              LDR      r3,[r0,#0x60]         ;413
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;413
0001c0  6603              STR      r3,[r0,#0x60]         ;413
0001c2  07cb              LSLS     r3,r1,#31             ;417
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;417
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;419
0001cc  6143              STR      r3,[r0,#0x14]         ;419
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;419
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;420
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;420
0001d8  6343              STR      r3,[r0,#0x34]         ;422
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;422
0001de  f0235380          BIC      r3,r3,#0x10000000     ;422
0001e2  6143              STR      r3,[r0,#0x14]         ;423
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;423
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;423
0001ec  6343              STR      r3,[r0,#0x34]         ;381
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;381
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;381
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;382
0001f8  6741              STR      r1,[r0,#0x74]         ;382
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]         ;384
0001fe  f0416180          ORR      r1,r1,#0x4000000      ;384
000202  6741              STR      r1,[r0,#0x74]         ;384
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]            ;384
000206  f0407080          ORR      r0,r0,#0x1000000      ;385
00020a  6010              STR      r0,[r2,#0]            ;385
00020c  e8bd81f0          POP      {r4-r8,pc}            ;385
;;;918    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xee
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;310    	{
;;;311    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;309
00000c  7820              LDRB     r0,[r4,#0]            ;309  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;309
000010  b2c0              UXTB     r0,r0
;;;312    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;313    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;314    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;322  ; bps_I
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  8008              STRH     r0,[r1,#0]
;;;553    	snmp_bat_flag_puts[0]=0;
000034  495d              LDR      r1,|L4.428|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]            ;319
00004c  4288              CMP      r0,r1                 ;319
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;319
000054  f1b90f0a          CMP      r9,#0xa               ;319
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;321
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;322
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;319
000064  280a              CMP      r0,#0xa               ;321
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;321
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;324
000072  f88c2001          STRB     r2,[r12,#1]           ;324
000076  f1a30301          SUB      r3,r3,#1              ;324
00007a  f8a83000          STRH     r3,[r8,#0]            ;325
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;325
000084  f88c2001          STRB     r2,[r12,#1]           ;330
000088  f1030301          ADD      r3,r3,#1              ;330
00008c  f8a83000          STRH     r3,[r8,#0]            ;331
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;333
000092  4251              RSBS     r1,r2,#0              ;333
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;334  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;338
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;338  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;338
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;340  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;340
0000b4  f04f0004          MOV      r0,#4                 ;341
0000b8  f88d0001          STRB     r0,[sp,#1]            ;343
0000bc  f88d5002          STRB     r5,[sp,#2]            ;343
0000c0  f04f0002          MOV      r0,#2                 ;343
0000c4  f88d0003          STRB     r0,[sp,#3]            ;344
0000c8  f88d5004          STRB     r5,[sp,#4]            ;344
0000cc  f04f0001          MOV      r0,#1                 ;344
0000d0  f88d0005          STRB     r0,[sp,#5]            ;349
0000d4  f04f0106          MOV      r1,#6                 ;349
0000d8  4668              MOV      r0,sp                 ;350
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;352
0000e2  ea4f2020          ASR      r0,r0,#8              ;352
0000e6  f88d0007          STRB     r0,[sp,#7]            ;352
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;353  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;357
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;357
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;359  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;359
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;360
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]         ;362  ; main_kb_cnt
00010a  4291              CMP      r1,r2                 ;362
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]            ;362  ; ICA_EN
000110  2901              CMP      r1,#1                 ;362
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]            ;363  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]            ;363
00011c  f04f0106          MOV      r1,#6                 ;368
000120  f88d1001          STRB     r1,[sp,#1]            ;368
000124  f88d5002          STRB     r5,[sp,#2]            ;369
000128  f04f011e          MOV      r1,#0x1e              ;369
00012c  f88d1003          STRB     r1,[sp,#3]            ;371
000130  ea4f71e0          ASR      r1,r0,#31             ;371
000134  eb006111          ADD      r1,r0,r1,LSR #24      ;371
000138  ea4f2221          ASR      r2,r1,#8              ;372
00013c  f88d2004          STRB     r2,[sp,#4]            ;372
000140  f88d0005          STRB     r0,[sp,#5]            ;372
000144  f04f0106          MOV      r1,#6                 ;376
000148  4668              MOV      r0,sp                 ;376
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]            ;376
000152  ea4f2020          ASR      r0,r0,#8              ;376
000156  f88d0007          STRB     r0,[sp,#7]            ;376
00015a  8838              LDRH     r0,[r7,#0]            ;377  ; ICA_CH
00015c  2800              CMP      r0,#0                 ;377
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0                 ;377
000162  466d              MOV      r5,sp                 ;377
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]            ;377
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1              ;379
000172  b2e4              UXTB     r4,r4                 ;379
000174  2c08              CMP      r4,#8                 ;379
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14           ;390
00017a  e8bd83f0          POP      {r4-r9,pc}            ;390
                  |L4.382|
00017e  f04f0400          MOV      r4,#0                 ;391
000182  46e9              MOV      r9,sp                 ;391
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]            ;393
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1              ;393
000190  b2e4              UXTB     r4,r4                 ;394
000192  2c08              CMP      r4,#8                 ;394
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;918    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;308    {  
000002  4604              MOV      r4,r0
;;;309    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;310    	{
;;;311    	vz_error=0;
;;;312    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;313    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;321
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;322
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  b101              CBZ      r1,|L5.54|
;;;553    	snmp_bat_flag_puts[0]=0;
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;792    	snmp_bat_flag_puts[1]=0;
000040  f1000001          ADD      r0,r0,#1
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;319
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;319
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;319
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;319
000058  461a              MOV      r2,r3                 ;321
00005a  210e              MOVS     r1,#0xe               ;321
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;321
000066  2202              MOVS     r2,#2                 ;321
000068  210e              MOVS     r1,#0xe               ;321
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;324
000074  2203              MOVS     r2,#3                 ;324
000076  210e              MOVS     r1,#0xe               ;324
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;325
000082  2204              MOVS     r2,#4                 ;325
000084  210e              MOVS     r1,#0xe               ;330
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;333
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;333
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;333  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;333
00009c  70d0              STRB     r0,[r2,#3]            ;334
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;334
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;338
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;338
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;340
0000b0  2201              MOVS     r2,#1                 ;340
0000b2  210e              MOVS     r1,#0xe               ;341
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;343
0000be  461a              MOV      r2,r3                 ;343
0000c0  210e              MOVS     r1,#0xe               ;343
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;344
0000cc  2203              MOVS     r2,#3                 ;344
0000ce  210e              MOVS     r1,#0xe               ;349
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;350
0000da  2204              MOVS     r2,#4                 ;350
0000dc  210e              MOVS     r1,#0xe               ;352
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;352
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;353
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;353  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;357
0000f4  70d0              STRB     r0,[r2,#3]            ;357
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;359
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;359
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;360
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3                 ;362
000108  2201              MOVS     r2,#1                 ;362
00010a  210e              MOVS     r1,#0xe               ;362
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3                 ;363
000116  2202              MOVS     r2,#2                 ;363
000118  210e              MOVS     r1,#0xe               ;363
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3                 ;368
000124  461a              MOV      r2,r3                 ;369
000126  210e              MOVS     r1,#0xe               ;369
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3                 ;371
000132  2204              MOVS     r2,#4                 ;371
000134  210e              MOVS     r1,#0xe               ;371
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28             ;372
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28             ;376
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]            ;376  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1              ;376
00014c  70d0              STRB     r0,[r2,#3]            ;376
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1                 ;376
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2                 ;376
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3                 ;376
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4                 ;377
000160  2201              MOVS     r2,#1                 ;377
000162  210e              MOVS     r1,#0xe               ;377
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4                 ;379
00016e  2202              MOVS     r2,#2                 ;379
000170  210e              MOVS     r1,#0xe               ;379
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4                 ;390
00017c  2203              MOVS     r2,#3                 ;390
00017e  210e              MOVS     r1,#0xe               ;391
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4                 ;393
00018a  461a              MOV      r2,r3                 ;393
00018c  210e              MOVS     r1,#0xe               ;393
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27             ;394
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27             ;398
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]            ;398  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1              ;409
0001a4  70d0              STRB     r0,[r2,#3]            ;409
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1                 ;410
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2                 ;410
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;412
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;412
0001b8  2201              MOVS     r2,#1                 ;412
0001ba  210e              MOVS     r1,#0xe               ;413
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;417
0001c6  2202              MOVS     r2,#2                 ;417
0001c8  210e              MOVS     r1,#0xe               ;419
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;420
0001d4  2203              MOVS     r2,#3                 ;420
0001d6  210e              MOVS     r1,#0xe               ;422
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;422
0001e2  2204              MOVS     r2,#4                 ;423
0001e4  210e              MOVS     r1,#0xe               ;423
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;381
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;381
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;382  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1              ;382
0001fc  70d0              STRB     r0,[r2,#3]            ;384
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1                 ;384
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2                 ;384
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3                 ;385
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6                 ;385
000210  2201              MOVS     r2,#1                 ;400
000212  210e              MOVS     r1,#0xe               ;400
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6                 ;401
00021e  2202              MOVS     r2,#2                 ;403
000220  210e              MOVS     r1,#0xe               ;403
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6                 ;404
00022c  2203              MOVS     r2,#3                 ;404
00022e  210e              MOVS     r1,#0xe               ;404
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6                 ;428
00023a  2204              MOVS     r2,#4                 ;428
00023c  210e              MOVS     r1,#0xe               ;429
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]            ;431  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1              ;431
000250  70d0              STRB     r0,[r2,#3]            ;432
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1                 ;432
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2                 ;436
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3                 ;436
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0                 ;447
000264  2201              MOVS     r2,#1                 ;447
000266  210e              MOVS     r1,#0xe               ;448
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;450
000272  2202              MOVS     r2,#2                 ;450
000274  210e              MOVS     r1,#0xe               ;450
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;451
000280  2203              MOVS     r2,#3                 ;455
000282  210e              MOVS     r1,#0xe               ;455
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;458
00028e  2204              MOVS     r2,#4                 ;458
000290  210e              MOVS     r1,#0xe               ;458
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!        ;460
00029c  7068              STRB     r0,[r5,#1]            ;460
00029e  bd70              POP      {r4-r6,pc}            ;461
;;;918    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb8
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;310    	{
;;;311    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;309  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;309  ; TBOXMAX
;;;312    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;321
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  dd00              BLE      |L6.66|
;;;792    	snmp_bat_flag_puts[1]=0;
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;319
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;319  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;321  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;321
00005a  4298              CMP      r0,r3                 ;321
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;322  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;319
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;321
00006a  b249              SXTB     r1,r1                 ;322
00006c  7011              STRB     r1,[r2,#0]            ;322
00006e  291e              CMP      r1,#0x1e              ;324
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;324  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;324
000078  8039              STRH     r1,[r7,#0]            ;324
00007a  7014              STRB     r4,[r2,#0]            ;325
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;325
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;325  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;330
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;331
00008e  b249              SXTB     r1,r1                 ;333
000090  7011              STRB     r1,[r2,#0]            ;333
000092  291e              CMP      r1,#0x1e              ;333
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;333  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;333
00009c  8039              STRH     r1,[r7,#0]            ;334
00009e  7014              STRB     r4,[r2,#0]            ;334
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;338
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;338  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;340
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;340
0000b0  2100              MOVS     r1,#0                 ;340
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;343
0000be  8800              LDRH     r0,[r0,#0]            ;343  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;343
0000c2  b202              SXTH     r2,r0                 ;343
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;344
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;349  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;350
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;350  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;352
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;352  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;352
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;353
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;353
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;357  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;359
0000fc  2928              CMP      r1,#0x28              ;359
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;360  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0                 ;362
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]            ;362  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1              ;362
000110  8038              STRH     r0,[r7,#0]            ;362
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]            ;363  ; TBATENABLE
000118  4281              CMP      r1,r0                 ;363
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]            ;368  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1              ;368
000122  8038              STRH     r0,[r7,#0]            ;368
                  |L6.292|
000124  2206              MOVS     r2,#6                 ;369
000126  2100              MOVS     r1,#0                 ;369
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]            ;371  ; tbatdisable_cnt
000132  2805              CMP      r0,#5                 ;371
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]            ;372
                  |L6.314|
00013a  2801              CMP      r0,#1                 ;372
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]            ;372
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]            ;376
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]            ;376  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32           ;376
000154  291e              CMP      r1,#0x1e              ;376
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]            ;376  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0                 ;377
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]            ;377  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1              ;377
000168  8028              STRH     r0,[r5,#0]            ;379
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]            ;379  ; TLOADENABLE
000170  4281              CMP      r1,r0                 ;379
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]            ;379  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1              ;390
00017a  8028              STRH     r0,[r5,#0]            ;390
                  |L6.380|
00017c  2206              MOVS     r2,#6                 ;390
00017e  2100              MOVS     r1,#0                 ;391
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]            ;393  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5                 ;393
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]            ;393
                  |L6.400|
000190  2801              CMP      r0,#1                 ;394
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]            ;394
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}            ;394
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]            ;398
00019c  e7fb              B        |L6.406|
;;;918    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;310    	{
;;;311    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;309
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;309
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;312    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;321
000030  4e45              LDR      r6,|L7.328|
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  4f46              LDR      r7,|L7.332|
;;;553    	snmp_bat_flag_puts[0]=0;
000034  f8df8118          LDR      r8,|L7.336|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
000040  2500              MOVS     r5,#0
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;319
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;319
00004e  f8a81000          STRH     r1,[r8,#0]            ;319
000052  2801              CMP      r0,#1                 ;321
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;319
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;321
00005a  2200              MOVS     r2,#0                 ;321
00005c  21e6              MOVS     r1,#0xe6              ;322
00005e  20e1              MOVS     r0,#0xe1              ;322
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;321
000068  f04f0000          MOV      r0,#0                 ;321
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;322
000070  f9b85000          LDRSH    r5,[r8,#0]            ;324
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;324
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;325
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;325
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;325
000086  69c9              LDR      r1,[r1,#0x1c]         ;330
000088  4299              CMP      r1,r3                 ;330
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;331
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;333
000094  b2c0              UXTB     r0,r0                 ;333
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;333
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;334
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;334
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;338
0000aa  7020              STRB     r0,[r4,#0]            ;340
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;340
0000b0  f8a81000          STRH     r1,[r8,#0]            ;340
0000b4  2802              CMP      r0,#2                 ;341
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;343
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;343
0000bc  2200              MOVS     r2,#0                 ;343
0000be  21e6              MOVS     r1,#0xe6              ;343
0000c0  20e1              MOVS     r0,#0xe1              ;343
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;344
0000ca  f04f0000          MOV      r0,#0                 ;344
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;349
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;349
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;350
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;352
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;352
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;352
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;353
0000ea  4299              CMP      r1,r3                 ;353
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;353
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;357
0000f6  b2c0              UXTB     r0,r0                 ;357
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;359
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;359
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;360
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee              ;362
00010a  e9cd0500          STRD     r0,r5,[sp,#0]         ;362
00010e  9502              STR      r5,[sp,#8]            ;362
000110  9503              STR      r5,[sp,#0xc]          ;362
000112  7831              LDRB     r1,[r6,#0]            ;363  ; uavt_bps_pntr
000114  4603              MOV      r3,r0                 ;363
000116  2216              MOVS     r2,#0x16              ;363
000118  4608              MOV      r0,r1                 ;363
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]            ;368  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1              ;368
000122  b2c0              UXTB     r0,r0                 ;368
000124  7030              STRB     r0,[r6,#0]            ;369
000126  f9ba1000          LDRSH    r1,[r10,#0]           ;369  ; NUMIST
00012a  4288              CMP      r0,r1                 ;371
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]            ;371
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]            ;371  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]           ;371
000136  e8bd9fff          POP      {r0-r12,pc}           ;372
;;;918    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;308    {  
000002  f44f70b4          MOV      r0,#0x168
;;;309    if(spc_stat!=spcVZ) 
;;;310    	{
;;;311    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;309
00000e  700a              STRB     r2,[r1,#0]            ;309
000010  f04f0100          MOV      r1,#0
;;;312    	sp_ch_error=0;
;;;313    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
;;;918    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  bps_on_mask
00005e  0000              DCB      0x00,0x00
                  bps_off_mask
000060  0000              DCB      0x00,0x00
                  vz_cnt_s
000062  0000              DCB      0x00,0x00
                  vz_cnt_s_
000064  0000              DCB      0x00,0x00
                  vz_cnt_h
000066  0000              DCB      0x00,0x00
                  vz_cnt_h_
000068  0000              DCB      0x00,0x00
                  cnt_end_ke
00006a  0000              DCB      0x00,0x00
                  __ee_vz_cnt
00006c  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006e  0000              DCB      0x00,0x00
                  __ee_spc_bat
000070  0000              DCB      0x00,0x00
                  __ee_spc_phase
000072  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000074  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000076  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000078  0000              DCB      0x00,0x00
                  vz1_stat_cnt
00007a  0000              DCB      0x00,0x00
                  volt_region_cnt
00007c  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007e  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
000080  0000              DCB      0x00,0x00
                  plazma_ica1
000082  0000              DCB      0x00,0x00
                  bat_hndl_i
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000086  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000088  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
00008c  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008e  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000ec  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ee  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
