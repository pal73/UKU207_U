; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ke_start PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;297    {          
000004  4606              MOV      r6,r0
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  f04f0400          MOV      r4,#0
00000a  4dff              LDR      r5,|L1.1032|
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  f04f0064          MOV      r0,#0x64
000010  f1050506          ADD      r5,r5,#6
000014  7728              STRB     r0,[r5,#0x1c]
;;;315    
;;;316    	spc_stat=spcKE;
000016  f04f0701          MOV      r7,#1
00001a  762f              STRB     r7,[r5,#0x18]
;;;317    	__ee_spc_stat=spcKE;
00001c  f8a57062          STRH     r7,[r5,#0x62]
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000020  4639              MOV      r1,r7
000022  f240209a          MOV      r0,#0x29a
000026  f7fffffe          BL       lc640_write_int
;;;319    	
;;;320    	spc_bat=0;
00002a  766c              STRB     r4,[r5,#0x19]
;;;321    	__ee_spc_bat=0;
00002c  f8a54064          STRH     r4,[r5,#0x64]
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000030  4621              MOV      r1,r4
000032  f240209e          MOV      r0,#0x29e
000036  f7fffffe          BL       lc640_write_int
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
00003a  f8df83d0          LDR      r8,|L1.1036|
00003e  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000042  48f3              LDR      r0,|L1.1040|
000044  2100              MOVS     r1,#0
000046  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
00004a  f7fffffe          BL       lc640_write_int
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004e  f8a8404a          STRH     r4,[r8,#0x4a]
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000052  2100              MOVS     r1,#0
000054  f44f70e3          MOV      r0,#0x1c6
000058  f7fffffe          BL       lc640_write_int
;;;329    
;;;330    	
;;;331    	spc_phase=0;
00005c  76ac              STRB     r4,[r5,#0x1a]
;;;332    	__ee_spc_phase=0;
00005e  f8a54066          STRH     r4,[r5,#0x66]
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000062  4621              MOV      r1,r4
000064  f44f7028          MOV      r0,#0x2a0
000068  f7fffffe          BL       lc640_write_int
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006c  eb060046          ADD      r0,r6,r6,LSL #1
000070  eb001006          ADD      r0,r0,r6,LSL #4
000074  eb080180          ADD      r1,r8,r0,LSL #2
000078  48e6              LDR      r0,|L1.1044|
00007a  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
00007c  f1000001          ADD      r0,r0,#1
000080  f0000007          AND      r0,r0,#7
000084  eb010040          ADD      r0,r1,r0,LSL #1
000088  8c00              LDRH     r0,[r0,#0x20]
00008a  9001              STR      r0,[sp,#4]
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
00008c  4ee2              LDR      r6,|L1.1048|
00008e  8bb0              LDRH     r0,[r6,#0x1c]
000090  9000              STR      r0,[sp,#0]
;;;343    		gran_char(&temp,1,99);
000092  f04f0263          MOV      r2,#0x63
000096  f04f0101          MOV      r1,#1
00009a  4668              MOV      r0,sp
00009c  f7fffffe          BL       gran_char
;;;344    		*((char*)(&(ke_date[0])))=temp;
0000a0  4cd9              LDR      r4,|L1.1032|
0000a2  f89d0000          LDRB     r0,[sp,#0]
0000a6  34f8              ADDS     r4,r4,#0xf8
0000a8  7020              STRB     r0,[r4,#0]
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000aa  7e30              LDRB     r0,[r6,#0x18]
0000ac  9000              STR      r0,[sp,#0]
;;;347    		gran_char(&temp,1,12);
0000ae  220c              MOVS     r2,#0xc
0000b0  2101              MOVS     r1,#1
0000b2  4668              MOV      r0,sp
0000b4  f7fffffe          BL       gran_char
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b8  f89d0000          LDRB     r0,[sp,#0]
0000bc  7060              STRB     r0,[r4,#1]
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000be  7b30              LDRB     r0,[r6,#0xc]
0000c0  9000              STR      r0,[sp,#0]
;;;351    		gran_char(&temp,1,31);
0000c2  221f              MOVS     r2,#0x1f
0000c4  2101              MOVS     r1,#1
0000c6  4668              MOV      r0,sp
0000c8  f7fffffe          BL       gran_char
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000cc  f89d0000          LDRB     r0,[sp,#0]
0000d0  70a0              STRB     r0,[r4,#2]
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d2  f89d0004          LDRB     r0,[sp,#4]
0000d6  70e0              STRB     r0,[r4,#3]
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d8  f24020a2          MOV      r0,#0x2a2
0000dc  6821              LDR      r1,[r4,#0]  ; ke_date
0000de  f7fffffe          BL       lc640_write_long
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e2  7a30              LDRB     r0,[r6,#8]
0000e4  9000              STR      r0,[sp,#0]
;;;358    		gran_char(&temp,0,23);
0000e6  2217              MOVS     r2,#0x17
0000e8  2100              MOVS     r1,#0
0000ea  4668              MOV      r0,sp
0000ec  f7fffffe          BL       gran_char
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000f0  f89d0000          LDRB     r0,[sp,#0]
0000f4  7120              STRB     r0,[r4,#4]
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f6  7930              LDRB     r0,[r6,#4]
0000f8  9000              STR      r0,[sp,#0]
;;;362    		gran_char(&temp,0,59);
0000fa  223b              MOVS     r2,#0x3b
0000fc  2100              MOVS     r1,#0
0000fe  4668              MOV      r0,sp
000100  f7fffffe          BL       gran_char
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000104  f89d0000          LDRB     r0,[sp,#0]
000108  7160              STRB     r0,[r4,#5]
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
00010a  7830              LDRB     r0,[r6,#0]
00010c  9000              STR      r0,[sp,#0]
;;;366    		gran_char(&temp,0,59);
00010e  223b              MOVS     r2,#0x3b
000110  2100              MOVS     r1,#0
000112  4668              MOV      r0,sp
000114  f7fffffe          BL       gran_char
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000118  f89d0000          LDRB     r0,[sp,#0]
00011c  71a0              STRB     r0,[r4,#6]
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011e  f89d0005          LDRB     r0,[sp,#5]
000122  71e0              STRB     r0,[r4,#7]
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000124  f24020a6          MOV      r0,#0x2a6
000128  6861              LDR      r1,[r4,#4]  ; ke_date
00012a  f7fffffe          BL       lc640_write_long
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012e  702f              STRB     r7,[r5,#0]
;;;373    	}
;;;374    }
000130  e8bd81fc          POP      {r2-r8,pc}
;;;375    #endif
                          ENDP

                  ke_drv PROC
;;;457    //-----------------------------------------------
;;;458    void ke_drv(void)
000134  e92d47f0          PUSH     {r4-r10,lr}
;;;459    {
000138  b088              SUB      sp,sp,#0x20
;;;460    static char ke_drv_cnt_10s;
;;;461    static short i_bat_buff[6];
;;;462    static char i_bat_buff_cnt;
;;;463    short ke_drv_i_temp;
;;;464    short ke_drv_i_avg;
;;;465    char i;
;;;466    short ke_drv_i_temp_temp;
;;;467    const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
00013a  f04f021c          MOV      r2,#0x1c
00013e  49b7              LDR      r1,|L1.1052|
000140  a801              ADD      r0,sp,#4
000142  f7fffffe          BL       __aeabi_memcpy4
;;;468    
;;;469    if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000146  4eb0              LDR      r6,|L1.1032|
;;;470    	{
;;;471    	
;;;472    	i_bat_buff[0]=0;
000148  4bb5              LDR      r3,|L1.1056|
00014a  2500              MOVS     r5,#0
00014c  79b0              LDRB     r0,[r6,#6]            ;469  ; bat_hndl_zvu_ke_init
00014e  2801              CMP      r0,#1                 ;469
000150  d102              BNE      |L1.344|
000152  801d              STRH     r5,[r3,#0]
;;;473    	i_bat_buff[0]=0;
;;;474    	i_bat_buff[0]=0;
;;;475    	i_bat_buff[0]=0;
;;;476    	i_bat_buff[0]=0;
;;;477    	i_bat_buff[0]=0;
;;;478    	i_bat_buff_cnt=0;
000154  72b5              STRB     r5,[r6,#0xa]
;;;479    
;;;480    	bat_hndl_zvu_ke_init=0;
000156  71b5              STRB     r5,[r6,#6]
                  |L1.344|
;;;481    	}
;;;482    
;;;483    
;;;484    
;;;485    
;;;486    if(spc_stat==spcKE)
000158  7fb0              LDRB     r0,[r6,#0x1e]  ; spc_stat
00015a  2801              CMP      r0,#1
00015c  d17e              BNE      |L1.604|
;;;487    	{
;;;488    	ke_drv_i_temp=-Ib_ips_termokompensat/10;
00015e  48b1              LDR      r0,|L1.1060|
000160  f04f070a          MOV      r7,#0xa
000164  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000168  f1c00000          RSB      r0,r0,#0
00016c  fb90f0f7          SDIV     r0,r0,r7
000170  b200              SXTH     r0,r0
;;;489    	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000172  2800              CMP      r0,#0
000174  da01              BGE      |L1.378|
000176  f04f0000          MOV      r0,#0
                  |L1.378|
;;;490    
;;;491    	bat_hndl_plazma[3]=ke_drv_cnt_10s;
00017a  4aab              LDR      r2,|L1.1064|
00017c  7a71              LDRB     r1,[r6,#9]  ; ke_drv_cnt_10s
00017e  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;492    	if(++ke_drv_cnt_10s>10)
000180  1c49              ADDS     r1,r1,#1
;;;493    		{
;;;494    		ke_drv_cnt_10s=0;
;;;495    
;;;496    		i_bat_buff_cnt++;
;;;497    		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;498    		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;499    		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;500    		ke_drv_i_temp_temp=0;
;;;501    		for(i=0;i<6;i++)
;;;502    			{
;;;503    			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;504    			}
;;;505    		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;506    
;;;507    		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;508    		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;509    		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;510    		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;511    		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;512    		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;513    		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;514    		
;;;515    		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;516    		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;517    		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;518    		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;519    		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;520    		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;521    		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;522    
;;;523    		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;524    		bat_hndl_i_temp=ke_drv_i_avg;
000182  4ca1              LDR      r4,|L1.1032|
000184  b2c9              UXTB     r1,r1                 ;492
000186  3480              ADDS     r4,r4,#0x80
000188  7271              STRB     r1,[r6,#9]            ;492
00018a  290a              CMP      r1,#0xa               ;492
00018c  d967              BLS      |L1.606|
00018e  7275              STRB     r5,[r6,#9]            ;494
000190  7ab1              LDRB     r1,[r6,#0xa]          ;496  ; i_bat_buff_cnt
000192  f1010101          ADD      r1,r1,#1              ;496
000196  b2c9              UXTB     r1,r1                 ;496
000198  72b1              STRB     r1,[r6,#0xa]          ;496
00019a  2906              CMP      r1,#6                 ;497
00019c  d300              BCC      |L1.416|
00019e  72b5              STRB     r5,[r6,#0xa]          ;497
                  |L1.416|
0001a0  7ab1              LDRB     r1,[r6,#0xa]          ;498  ; i_bat_buff_cnt
0001a2  6091              STR      r1,[r2,#8]            ;498  ; bat_hndl_plazma
0001a4  f8230011          STRH     r0,[r3,r1,LSL #1]     ;499
0001a8  f04f0100          MOV      r1,#0                 ;500
0001ac  4608              MOV      r0,r1                 ;501
                  |L1.430|
0001ae  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;503
0001b2  4461              ADD      r1,r1,r12             ;503
0001b4  b209              SXTH     r1,r1                 ;503
0001b6  f1000001          ADD      r0,r0,#1              ;501
0001ba  b2c0              UXTB     r0,r0                 ;501
0001bc  2806              CMP      r0,#6                 ;501
0001be  d3f6              BCC      |L1.430|
0001c0  f04f0006          MOV      r0,#6                 ;505
0001c4  fb91f0f0          SDIV     r0,r1,r0              ;505
0001c8  b201              SXTH     r1,r0                 ;505
0001ca  4898              LDR      r0,|L1.1068|
0001cc  f8df8258          LDR      r8,|L1.1064|
0001d0  8800              LDRH     r0,[r0,#0]            ;507  ; BAT_C_POINT_1_6
0001d2  f1a8081c          SUB      r8,r8,#0x1c           ;507
0001d6  eb000040          ADD      r0,r0,r0,LSL #1       ;507
0001da  ea4f0040          LSL      r0,r0,#1              ;507
0001de  f8a80000          STRH     r0,[r8,#0]            ;507
0001e2  4893              LDR      r0,|L1.1072|
0001e4  8800              LDRH     r0,[r0,#0]            ;508  ; BAT_C_POINT_1_2
0001e6  ea4f0040          LSL      r0,r0,#1              ;508
0001ea  f8a80002          STRH     r0,[r8,#2]            ;508
0001ee  4891              LDR      r0,|L1.1076|
0001f0  8800              LDRH     r0,[r0,#0]            ;509  ; BAT_C_POINT_1
0001f2  f8a80004          STRH     r0,[r8,#4]            ;509
0001f6  4890              LDR      r0,|L1.1080|
0001f8  f04f0303          MOV      r3,#3                 ;510
0001fc  f9b00000          LDRSH    r0,[r0,#0]            ;510  ; BAT_C_POINT_3
000200  fb90f0f3          SDIV     r0,r0,r3              ;510
000204  f8a80006          STRH     r0,[r8,#6]            ;510
000208  488c              LDR      r0,|L1.1084|
00020a  f04f0305          MOV      r3,#5                 ;511
00020e  f9b00000          LDRSH    r0,[r0,#0]            ;511  ; BAT_C_POINT_5
000212  fb90f0f3          SDIV     r0,r0,r3              ;511
000216  f8a80008          STRH     r0,[r8,#8]            ;511
00021a  4889              LDR      r0,|L1.1088|
00021c  f9b00000          LDRSH    r0,[r0,#0]            ;512  ; BAT_C_POINT_10
000220  fb90f0f7          SDIV     r0,r0,r7              ;512
000224  f8a8000a          STRH     r0,[r8,#0xa]          ;512
000228  4886              LDR      r0,|L1.1092|
00022a  f04f0314          MOV      r3,#0x14              ;513
00022e  f9b00000          LDRSH    r0,[r0,#0]            ;513  ; BAT_C_POINT_20
000232  fb90f0f3          SDIV     r0,r0,r3              ;513
000236  f8a8000c          STRH     r0,[r8,#0xc]          ;513
00023a  4883              LDR      r0,|L1.1096|
00023c  f108090e          ADD      r9,r8,#0xe            ;515
000240  f9b07000          LDRSH    r7,[r0,#0]            ;515  ; BAT_U_END_1_6
000244  f8a97000          STRH     r7,[r9,#0]            ;515
000248  4880              LDR      r0,|L1.1100|
00024a  8800              LDRH     r0,[r0,#0]            ;516  ; BAT_U_END_1_2
00024c  f8a90002          STRH     r0,[r9,#2]            ;516
000250  487f              LDR      r0,|L1.1104|
000252  8800              LDRH     r0,[r0,#0]            ;517  ; BAT_U_END_1
000254  f8a90004          STRH     r0,[r9,#4]            ;517
000258  487e              LDR      r0,|L1.1108|
00025a  e001              B        |L1.608|
                  |L1.604|
00025c  e11e              B        |L1.1180|
                  |L1.606|
00025e  e061              B        |L1.804|
                  |L1.608|
000260  8800              LDRH     r0,[r0,#0]            ;518  ; BAT_U_END_3
000262  f8a90006          STRH     r0,[r9,#6]            ;518
000266  487c              LDR      r0,|L1.1112|
000268  8800              LDRH     r0,[r0,#0]            ;519  ; BAT_U_END_5
00026a  f8a90008          STRH     r0,[r9,#8]            ;519
00026e  487b              LDR      r0,|L1.1116|
000270  8800              LDRH     r0,[r0,#0]            ;520  ; BAT_U_END_10
000272  f8a9000a          STRH     r0,[r9,#0xa]          ;520
000276  487a              LDR      r0,|L1.1120|
000278  f9b0c000          LDRSH    r12,[r0,#0]           ;521  ; BAT_U_END_20
00027c  f8a9c00c          STRH     r12,[r9,#0xc]         ;521
000280  6051              STR      r1,[r2,#4]            ;523  ; bat_hndl_plazma
000282  80e1              STRH     r1,[r4,#6]
;;;525    		
;;;526    		for(i=0;i<7;i++)
000284  f04f0000          MOV      r0,#0
                  |L1.648|
;;;527    			{
;;;528    			if(bat_hndl_i_temp>=I_from_t_table[i])
000288  f9383010          LDRSH    r3,[r8,r0,LSL #1]
00028c  428b              CMP      r3,r1
00028e  dd04              BLE      |L1.666|
000290  f1000001          ADD      r0,r0,#1              ;526
000294  b2c0              UXTB     r0,r0                 ;526
000296  2807              CMP      r0,#7                 ;526
000298  d3f6              BCC      |L1.648|
                  |L1.666|
;;;529    				{
;;;530    				break;
;;;531    				}
;;;532    			}
;;;533    
;;;534    		bat_hndl_plazma[0]=i;
00029a  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
00029c  f10d0a04          ADD      r10,sp,#4             ;467
;;;535    
;;;536    		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
0002a0  b1c8              CBZ      r0,|L1.726|
;;;537    		 else if((i>=1)&&(i<7))
0002a2  1e42              SUBS     r2,r0,#1
0002a4  2a06              CMP      r2,#6
0002a6  d219              BCS      |L1.732|
;;;538    		 	{
;;;539    			short i1,i2;
;;;540    			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
0002a8  f8383012          LDRH     r3,[r8,r2,LSL #1]
0002ac  eba30101          SUB      r1,r3,r1
0002b0  b209              SXTH     r1,r1
;;;541    			i2=I_from_t_table[i-1]-I_from_t_table[i];
0002b2  f8388010          LDRH     r8,[r8,r0,LSL #1]
0002b6  eba30308          SUB      r3,r3,r8
0002ba  b21b              SXTH     r3,r3
;;;542    			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
0002bc  f85a8020          LDR      r8,[r10,r0,LSL #2]
0002c0  f85a2022          LDR      r2,[r10,r2,LSL #2]
0002c4  eba80802          SUB      r8,r8,r2
;;;543    			bat_hndl_t_razr_ke*=(long)i1;
0002c8  fb08f801          MUL      r8,r8,r1
;;;544    			bat_hndl_t_razr_ke/=(long)i2;
0002cc  fb98f1f3          SDIV     r1,r8,r3
;;;545    			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
0002d0  4411              ADD      r1,r1,r2
0002d2  64e1              STR      r1,[r4,#0x4c]  ; bat_hndl_t_razr_ke
;;;546    			}
0002d4  e006              B        |L1.740|
                  |L1.726|
0002d6  9901              LDR      r1,[sp,#4]            ;536
0002d8  64e1              STR      r1,[r4,#0x4c]         ;536  ; bat_hndl_t_razr_ke
0002da  e003              B        |L1.740|
                  |L1.732|
;;;547    		else if(i>=7)
0002dc  2807              CMP      r0,#7
0002de  d301              BCC      |L1.740|
;;;548    			{
;;;549    			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
0002e0  9907              LDR      r1,[sp,#0x1c]
0002e2  64e1              STR      r1,[r4,#0x4c]  ; bat_hndl_t_razr_ke
                  |L1.740|
;;;550    			}
;;;551    
;;;552    		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
0002e4  b1c0              CBZ      r0,|L1.792|
;;;553    		 else if((i>=1)&&(i<7))
0002e6  1e41              SUBS     r1,r0,#1
0002e8  2906              CMP      r1,#6
0002ea  d217              BCS      |L1.796|
;;;554    		 	{
;;;555    			long u1,tempL;
;;;556    
;;;557    			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
0002ec  f9393010          LDRSH    r3,[r9,r0,LSL #1]
0002f0  f9392011          LDRSH    r2,[r9,r1,LSL #1]
0002f4  eba30302          SUB      r3,r3,r2
;;;558    			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
0002f8  f85a1021          LDR      r1,[r10,r1,LSL #2]
0002fc  6ce7              LDR      r7,[r4,#0x4c]  ; bat_hndl_t_razr_ke
0002fe  eba70701          SUB      r7,r7,r1
;;;559    			tempL*=u1;
000302  fb03f307          MUL      r3,r3,r7
;;;560    			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000306  f85a0020          LDR      r0,[r10,r0,LSL #2]
00030a  eba00001          SUB      r0,r0,r1
;;;561    			tempL/=u1;
00030e  fb93f0f0          SDIV     r0,r3,r0
;;;562    			tempL+=(long)U_end_from_i_table[i-1];
000312  4410              ADD      r0,r0,r2
;;;563    			bat_hndl_u_end=(short)tempL;
000314  8120              STRH     r0,[r4,#8]
;;;564    			}
000316  e005              B        |L1.804|
                  |L1.792|
000318  8127              STRH     r7,[r4,#8]            ;552
00031a  e003              B        |L1.804|
                  |L1.796|
;;;565    		else if(i>=7)
00031c  2807              CMP      r0,#7
00031e  d301              BCC      |L1.804|
;;;566    			{
;;;567    			bat_hndl_u_end=U_end_from_i_table[6];
000320  f8a4c008          STRH     r12,[r4,#8]
                  |L1.804|
;;;568    			}
;;;569    
;;;570    		}
;;;571    
;;;572    
;;;573    
;;;574    	if(spc_phase==0)
000324  f8960020          LDRB     r0,[r6,#0x20]  ; spc_phase
;;;575    		{
;;;576    		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;577    		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;578    
;;;579    		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;580    	    	
;;;581    		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;582    			{
;;;583    			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;584    			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000328  4f39              LDR      r7,|L1.1040|
;;;585    			}
;;;586    
;;;587    		bat[0]._time_min_cnt_ke++;
;;;588    		if(bat[0]._time_min_cnt_ke>=60)
;;;589    			{
;;;590    			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
00032a  f44f78e3          MOV      r8,#0x1c6
00032e  bbe0              CBNZ     r0,|L1.938|
000330  2314              MOVS     r3,#0x14              ;577
000332  f04f32ff          MOV      r2,#0xffffffff        ;577
000336  21ce              MOVS     r1,#0xce              ;577
000338  20cd              MOVS     r0,#0xcd              ;577
00033a  f7fffffe          BL       mess_send
00033e  7ff1              LDRB     r1,[r6,#0x1f]         ;579  ; spc_bat
000340  f8df90c8          LDR      r9,|L1.1036|
000344  eb010041          ADD      r0,r1,r1,LSL #1       ;579
000348  eb001001          ADD      r0,r0,r1,LSL #4       ;579
00034c  eb090080          ADD      r0,r9,r0,LSL #2       ;579
000350  f9b00008          LDRSH    r0,[r0,#8]            ;579
000354  f7fffffe          BL       abs
000358  f8d91018          LDR      r1,[r9,#0x18]         ;579  ; bat
00035c  4401              ADD      r1,r1,r0              ;579
00035e  f8c91018          STR      r1,[r9,#0x18]         ;579  ; bat
000362  f64840a0          MOV      r0,#0x8ca0            ;581
000366  4281              CMP      r1,r0                 ;581
000368  db0c              BLT      |L1.900|
00036a  eba10100          SUB      r1,r1,r0              ;583
00036e  f8c91018          STR      r1,[r9,#0x18]         ;583  ; bat
000372  8838              LDRH     r0,[r7,#0]            ;584  ; ADR_EE_BAT_ZAR_CNT_KE
000374  f7fffffe          BL       lc640_read_int
000378  1c40              ADDS     r0,r0,#1              ;584
00037a  b201              SXTH     r1,r0                 ;584
00037c  f9b70000          LDRSH    r0,[r7,#0]            ;584  ; ADR_EE_BAT_ZAR_CNT_KE
000380  f7fffffe          BL       lc640_write_int
                  |L1.900|
000384  f8b9004a          LDRH     r0,[r9,#0x4a]         ;587  ; bat
000388  f1000001          ADD      r0,r0,#1              ;587
00038c  b281              UXTH     r1,r0                 ;587
00038e  f8a9104a          STRH     r1,[r9,#0x4a]         ;587
000392  293c              CMP      r1,#0x3c              ;588
000394  d309              BCC      |L1.938|
000396  4640              MOV      r0,r8
000398  f7fffffe          BL       lc640_read_int
00039c  1c40              ADDS     r0,r0,#1
00039e  b201              SXTH     r1,r0
0003a0  4640              MOV      r0,r8
0003a2  f7fffffe          BL       lc640_write_int
;;;591    			bat[0]._time_min_cnt_ke=0;
0003a6  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.938|
;;;592    			}
;;;593    		}
;;;594    
;;;595    	else if(spc_phase==1)
;;;596    		{
;;;597    		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;598    		}
;;;599    
;;;600    	if(out_U<bat_hndl_u_end)
0003aa  482e              LDR      r0,|L1.1124|
0003ac  f9b41008          LDRSH    r1,[r4,#8]  ; bat_hndl_u_end
0003b0  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0003b4  4288              CMP      r0,r1
0003b6  da6f              BGE      |L1.1176|
;;;601    		{
;;;602    		cnt_end_ke++;
0003b8  f8b60064          LDRH     r0,[r6,#0x64]  ; cnt_end_ke
0003bc  f1000001          ADD      r0,r0,#1
0003c0  b200              SXTH     r0,r0
0003c2  f8a60064          STRH     r0,[r6,#0x64]
;;;603    		if(cnt_end_ke>=30)
0003c6  281e              CMP      r0,#0x1e
0003c8  db68              BLT      |L1.1180|
;;;604    			{
;;;605    			
;;;606    			if((spc_stat==spcKE)&&(spc_phase==0))
0003ca  7fb0              LDRB     r0,[r6,#0x1e]  ; spc_stat
0003cc  2801              CMP      r0,#1
0003ce  d158              BNE      |L1.1154|
0003d0  f8960020          LDRB     r0,[r6,#0x20]  ; spc_phase
0003d4  b9b0              CBNZ     r0,|L1.1028|
;;;607    				{
;;;608    				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
0003d6  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0003d8  f7fffffe          BL       lc640_read_int
0003dc  b201              SXTH     r1,r0
0003de  4822              LDR      r0,|L1.1128|
0003e0  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
0003e4  f7fffffe          BL       lc640_write_int
;;;609    				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
0003e8  4640              MOV      r0,r8
0003ea  f7fffffe          BL       lc640_read_int
0003ee  b284              UXTH     r4,r0
0003f0  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0003f2  f7fffffe          BL       lc640_read_int
0003f6  b281              UXTH     r1,r0
0003f8  4622              MOV      r2,r4
0003fa  2000              MOVS     r0,#0
0003fc  f7fffffe          BL       ke_zvu_mem_hndl
;;;610    				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
000400  481a              LDR      r0,|L1.1132|
000402  e035              B        |L1.1136|
                  |L1.1028|
000404  e03d              B        |L1.1154|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      ||area_number.18||
                  |L1.1036|
                          DCD      bat
                  |L1.1040|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.1044|
                          DCD      bat_u_old_cnt
                  |L1.1048|
                          DCD      0x40024020
                  |L1.1052|
                          DCD      ||area_number.12||+0x4
                  |L1.1056|
                          DCD      ||.bss||
                  |L1.1060|
                          DCD      Ib_ips_termokompensat
                  |L1.1064|
                          DCD      ||.bss||+0x468
                  |L1.1068|
                          DCD      BAT_C_POINT_1_6
                  |L1.1072|
                          DCD      BAT_C_POINT_1_2
                  |L1.1076|
                          DCD      BAT_C_POINT_1
                  |L1.1080|
                          DCD      BAT_C_POINT_3
                  |L1.1084|
                          DCD      BAT_C_POINT_5
                  |L1.1088|
                          DCD      BAT_C_POINT_10
                  |L1.1092|
                          DCD      BAT_C_POINT_20
                  |L1.1096|
                          DCD      BAT_U_END_1_6
                  |L1.1100|
                          DCD      BAT_U_END_1_2
                  |L1.1104|
                          DCD      BAT_U_END_1
                  |L1.1108|
                          DCD      BAT_U_END_3
                  |L1.1112|
                          DCD      BAT_U_END_5
                  |L1.1116|
                          DCD      BAT_U_END_10
                  |L1.1120|
                          DCD      BAT_U_END_20
                  |L1.1124|
                          DCD      out_U
                  |L1.1128|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.1132|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.1136|
000470  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
000474  2100              MOVS     r1,#0
000476  f7fffffe          BL       lc640_write_int
;;;611    				cntrl_stat=50;
00047a  f04f0032          MOV      r0,#0x32
00047e  85b0              STRH     r0,[r6,#0x2c]
;;;612    				cntrl_stat_old=50;
000480  85f0              STRH     r0,[r6,#0x2e]
                  |L1.1154|
;;;613    				}
;;;614    
;;;615    			spc_stat=spcOFF;
000482  77b5              STRB     r5,[r6,#0x1e]
;;;616    			__ee_spc_stat=spcOFF;
000484  f8a65068          STRH     r5,[r6,#0x68]
;;;617    			lc640_write_int(EE_SPC_STAT,spcOFF);
000488  b008              ADD      sp,sp,#0x20
00048a  2100              MOVS     r1,#0
00048c  e8bd47f0          POP      {r4-r10,lr}
000490  f240209a          MOV      r0,#0x29a
000494  f7ffbffe          B.W      lc640_write_int
                  |L1.1176|
;;;618    
;;;619    			}
;;;620    		}
;;;621    	else cnt_end_ke=0;
000498  f8a65064          STRH     r5,[r6,#0x64]
                  |L1.1180|
;;;622    
;;;623    	}
;;;624    			
;;;625    }
00049c  b008              ADD      sp,sp,#0x20
00049e  e8bd87f0          POP      {r4-r10,pc}
;;;626    #endif
                          ENDP

                  vz_start PROC
;;;696    //-----------------------------------------------
;;;697    char vz_start(char hour)
0004a2  b570              PUSH     {r4-r6,lr}
;;;698    {          
0004a4  4605              MOV      r5,r0
;;;699    char out;
;;;700    out=0;
0004a6  f04f0600          MOV      r6,#0
;;;701    if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
0004aa  4cff              LDR      r4,|L1.2216|
0004ac  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
0004ae  bb90              CBNZ     r0,|L1.1302|
0004b0  48fe              LDR      r0,|L1.2220|
0004b2  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
0004b4  2801              CMP      r0,#1
0004b6  d02e              BEQ      |L1.1302|
;;;702    	{
;;;703    	spc_stat=spcVZ;
0004b8  f04f0102          MOV      r1,#2
0004bc  77a1              STRB     r1,[r4,#0x1e]
;;;704    	__ee_spc_stat=spcVZ; 
0004be  f8a41068          STRH     r1,[r4,#0x68]
;;;705    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
0004c2  f240209a          MOV      r0,#0x29a
0004c6  f7fffffe          BL       lc640_write_int
;;;706    	vz_cnt_h=hour;
0004ca  f8a45060          STRH     r5,[r4,#0x60]
;;;707    	__ee_vz_cnt=hour*60;
0004ce  ebc51005          RSB      r0,r5,r5,LSL #4
0004d2  ea4f0080          LSL      r0,r0,#2
0004d6  f8a40066          STRH     r0,[r4,#0x66]
;;;708    	if(hour==0)__ee_vz_cnt=30;
0004da  b91d              CBNZ     r5,|L1.1252|
0004dc  f04f001e          MOV      r0,#0x1e
0004e0  f8a40066          STRH     r0,[r4,#0x66]
                  |L1.1252|
;;;709    	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
0004e4  f104045c          ADD      r4,r4,#0x5c
0004e8  f44f7027          MOV      r0,#0x29c
0004ec  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0004f0  f7fffffe          BL       lc640_write_int
;;;710    	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0004f4  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0004f8  f44f702a          MOV      r0,#0x2a8
0004fc  f7fffffe          BL       lc640_write_int
;;;711    	vz_cnt_h_=0;
000500  f04f0000          MOV      r0,#0
000504  80e0              STRH     r0,[r4,#6]
;;;712    	vz_cnt_s=0;
000506  8020              STRH     r0,[r4,#0]
;;;713    	vz_cnt_s_=0;
000508  8060              STRH     r0,[r4,#2]
;;;714    	out=1;
00050a  f04f0601          MOV      r6,#1
;;;715    	vz_mem_hndl(1);
00050e  f04f0001          MOV      r0,#1
000512  f7fffffe          BL       vz_mem_hndl
                  |L1.1302|
;;;716    	}
;;;717    //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;718    //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;719    //plazma=out;	
;;;720    return out;
000516  4630              MOV      r0,r6
;;;721    }
000518  bd70              POP      {r4-r6,pc}
;;;722    
                          ENDP

                  vz_stop PROC
;;;723    //-----------------------------------------------
;;;724    void vz_stop(void)
00051a  b510              PUSH     {r4,lr}
;;;725    {
;;;726    if(spc_stat==spcVZ)
00051c  4ce2              LDR      r4,|L1.2216|
00051e  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
000520  2802              CMP      r0,#2
000522  d113              BNE      |L1.1356|
;;;727         {
;;;728    vz_mem_hndl(vz_cnt_h);          
000524  f104042a          ADD      r4,r4,#0x2a
000528  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
00052a  f7fffffe          BL       vz_mem_hndl
;;;729    vz_cnt_s=0;
00052e  f04f0000          MOV      r0,#0
000532  8660              STRH     r0,[r4,#0x32]
;;;730    vz_cnt_h=0;
000534  86e0              STRH     r0,[r4,#0x36]
;;;731    vz_cnt_h_=0;
000536  8720              STRH     r0,[r4,#0x38]
;;;732    spc_stat=spcOFF;
000538  f8040c0c          STRB     r0,[r4,#-0xc]
;;;733    
;;;734    		__ee_spc_stat=spcOFF;
00053c  87e0              STRH     r0,[r4,#0x3e]
;;;735    		lc640_write_int(EE_SPC_STAT,spcOFF);
00053e  4601              MOV      r1,r0
000540  e8bd4010          POP      {r4,lr}
000544  f240209a          MOV      r0,#0x29a
000548  f7ffbffe          B.W      lc640_write_int
                  |L1.1356|
;;;736         }
;;;737    
;;;738    }
00054c  bd10              POP      {r4,pc}
;;;739    
                          ENDP

                  amper_chas_cnt_drv PROC
;;;741    //-----------------------------------------------
;;;742    void amper_chas_cnt_drv(void)
00054e  b510              PUSH     {r4,lr}
;;;743    {
;;;744    
;;;745    amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
000550  4ad5              LDR      r2,|L1.2216|
000552  49d7              LDR      r1,|L1.2224|
000554  3280              ADDS     r2,r2,#0x80
000556  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00055a  6dd0              LDR      r0,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
00055c  4401              ADD      r1,r1,r0
00055e  65d1              STR      r1,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
;;;746    
;;;747    if(amper_chas_cnt_drv_summ>=36000L)
000560  f64843a0          MOV      r3,#0x8ca0
;;;748    	{
;;;749    	amper_chas_cnt_drv_summ-=36000L;
;;;750    	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
000564  f44f74e4          MOV      r4,#0x1c8
000568  4299              CMP      r1,r3                 ;747
00056a  db0c              BLT      |L1.1414|
00056c  eba10103          SUB      r1,r1,r3              ;749
000570  65d1              STR      r1,[r2,#0x5c]         ;749  ; amper_chas_cnt_drv_summ
000572  4620              MOV      r0,r4
000574  f7fffffe          BL       lc640_read_int
000578  1c40              ADDS     r0,r0,#1
00057a  b201              SXTH     r1,r0
00057c  4620              MOV      r0,r4
00057e  e8bd4010          POP      {r4,lr}
000582  f7ffbffe          B.W      lc640_write_int
                  |L1.1414|
;;;751    	}
;;;752    else if(amper_chas_cnt_drv_summ<=-36000L)
000586  48cb              LDR      r0,|L1.2228|
000588  4281              CMP      r1,r0
00058a  dc0c              BGT      |L1.1446|
;;;753    	{
;;;754    	amper_chas_cnt_drv_summ+=36000L;
00058c  eb010003          ADD      r0,r1,r3
000590  65d0              STR      r0,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
;;;755    	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
000592  4620              MOV      r0,r4
000594  f7fffffe          BL       lc640_read_int
000598  1e40              SUBS     r0,r0,#1
00059a  b201              SXTH     r1,r0
00059c  4620              MOV      r0,r4
00059e  e8bd4010          POP      {r4,lr}
0005a2  f7ffbffe          B.W      lc640_write_int
                  |L1.1446|
;;;756    	}
;;;757    }
0005a6  bd10              POP      {r4,pc}
;;;758    #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;760    //-----------------------------------------------
;;;761    void avz_next_date_hndl(void)
0005a8  b570              PUSH     {r4-r6,lr}
;;;762    {
;;;763    if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0005aa  4cc3              LDR      r4,|L1.2232|
0005ac  f8940038          LDRB     r0,[r4,#0x38]
0005b0  4dc2              LDR      r5,|L1.2236|
0005b2  7829              LDRB     r1,[r5,#0]  ; AVZ
0005b4  4408              ADD      r0,r0,r1
0005b6  280c              CMP      r0,#0xc
0005b8  d906              BLS      |L1.1480|
0005ba  8fa0              LDRH     r0,[r4,#0x3c]
0005bc  1c40              ADDS     r0,r0,#1
0005be  b201              SXTH     r1,r0
0005c0  20b8              MOVS     r0,#0xb8
0005c2  f7fffffe          BL       lc640_write_int
0005c6  e004              B        |L1.1490|
                  |L1.1480|
;;;764    else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
0005c8  f9b4103c          LDRSH    r1,[r4,#0x3c]
0005cc  20b8              MOVS     r0,#0xb8
0005ce  f7fffffe          BL       lc640_write_int
                  |L1.1490|
;;;765    
;;;766    //lc640_write_int(EE_YEAR_AVZ,6);
;;;767    
;;;768    if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
0005d2  f8941038          LDRB     r1,[r4,#0x38]
0005d6  7828              LDRB     r0,[r5,#0]  ; AVZ
0005d8  4401              ADD      r1,r1,r0
0005da  290c              CMP      r1,#0xc
0005dc  d907              BLS      |L1.1518|
0005de  f8941038          LDRB     r1,[r4,#0x38]
0005e2  380c              SUBS     r0,r0,#0xc
0005e4  4401              ADD      r1,r1,r0
0005e6  20b6              MOVS     r0,#0xb6
0005e8  f7fffffe          BL       lc640_write_int
0005ec  e005              B        |L1.1530|
                  |L1.1518|
;;;769    else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0005ee  f8941038          LDRB     r1,[r4,#0x38]
0005f2  4401              ADD      r1,r1,r0
0005f4  20b6              MOVS     r0,#0xb6
0005f6  f7fffffe          BL       lc640_write_int
                  |L1.1530|
;;;770    
;;;771    //lc640_write_int(EE_MONTH_AVZ,5);
;;;772    
;;;773    if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0005fa  f894002c          LDRB     r0,[r4,#0x2c]
0005fe  281c              CMP      r0,#0x1c
000600  d904              BLS      |L1.1548|
000602  211c              MOVS     r1,#0x1c
000604  20b4              MOVS     r0,#0xb4
000606  f7fffffe          BL       lc640_write_int
00060a  e004              B        |L1.1558|
                  |L1.1548|
;;;774    else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
00060c  f894102c          LDRB     r1,[r4,#0x2c]
000610  20b4              MOVS     r0,#0xb4
000612  f7fffffe          BL       lc640_write_int
                  |L1.1558|
;;;775    
;;;776    //lc640_write_int(EE_DATE_AVZ,4);
;;;777    
;;;778    lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
000616  f1040420          ADD      r4,r4,#0x20
00061a  7a21              LDRB     r1,[r4,#8]
00061c  f04f00ae          MOV      r0,#0xae
000620  f7fffffe          BL       lc640_write_int
;;;779    lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
000624  7921              LDRB     r1,[r4,#4]
000626  20b0              MOVS     r0,#0xb0
000628  f7fffffe          BL       lc640_write_int
;;;780    lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
00062c  7821              LDRB     r1,[r4,#0]
00062e  e8bd4070          POP      {r4-r6,lr}
000632  20b2              MOVS     r0,#0xb2
000634  f7ffbffe          B.W      lc640_write_int
;;;781    
;;;782    }
;;;783    
                          ENDP

                  avz_drv PROC
;;;784    //-----------------------------------------------
;;;785    void avz_drv(void)                               
000638  b510              PUSH     {r4,lr}
;;;786    {                
;;;787    if(AVZ!=AVZ_OFF)
00063a  48a0              LDR      r0,|L1.2236|
;;;788    	{
;;;789    	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;790    		{
;;;791    		bAVZ=1;
00063c  4c9a              LDR      r4,|L1.2216|
00063e  7800              LDRB     r0,[r0,#0]            ;787  ; AVZ
000640  b338              CBZ      r0,|L1.1682|
000642  489d              LDR      r0,|L1.2232|
000644  8f82              LDRH     r2,[r0,#0x3c]         ;789
000646  499e              LDR      r1,|L1.2240|
000648  8809              LDRH     r1,[r1,#0]            ;789  ; YEAR_AVZ
00064a  428a              CMP      r2,r1                 ;789
00064c  d121              BNE      |L1.1682|
00064e  f8902038          LDRB     r2,[r0,#0x38]         ;789
000652  499c              LDR      r1,|L1.2244|
000654  8809              LDRH     r1,[r1,#0]            ;789  ; MONTH_AVZ
000656  428a              CMP      r2,r1                 ;789
000658  d11b              BNE      |L1.1682|
00065a  f890102c          LDRB     r1,[r0,#0x2c]         ;789
00065e  4a9a              LDR      r2,|L1.2248|
000660  8812              LDRH     r2,[r2,#0]            ;789  ; DATE_AVZ
000662  4291              CMP      r1,r2                 ;789
000664  d115              BNE      |L1.1682|
000666  f8901028          LDRB     r1,[r0,#0x28]         ;789
00066a  4a98              LDR      r2,|L1.2252|
00066c  8812              LDRH     r2,[r2,#0]            ;789  ; HOUR_AVZ
00066e  4291              CMP      r1,r2                 ;789
000670  d10f              BNE      |L1.1682|
000672  f8901024          LDRB     r1,[r0,#0x24]         ;789
000676  4a96              LDR      r2,|L1.2256|
000678  8812              LDRH     r2,[r2,#0]            ;789  ; MIN_AVZ
00067a  4291              CMP      r1,r2                 ;789
00067c  d109              BNE      |L1.1682|
00067e  f8900020          LDRB     r0,[r0,#0x20]         ;789
000682  4994              LDR      r1,|L1.2260|
000684  8809              LDRH     r1,[r1,#0]            ;789  ; SEC_AVZ
000686  4288              CMP      r0,r1                 ;789
000688  d103              BNE      |L1.1682|
00068a  f04f0001          MOV      r0,#1
00068e  f8840021          STRB     r0,[r4,#0x21]
                  |L1.1682|
;;;792    		}
;;;793    	}
;;;794    if(bAVZ)
000692  f8940021          LDRB     r0,[r4,#0x21]  ; bAVZ
000696  2800              CMP      r0,#0
000698  d00d              BEQ      |L1.1718|
;;;795    	{
;;;796    	if(vz_start(AVZ_TIME))
00069a  488f              LDR      r0,|L1.2264|
00069c  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
00069e  b2c0              UXTB     r0,r0
0006a0  f7fffffe          BL       vz_start
0006a4  2800              CMP      r0,#0
0006a6  d006              BEQ      |L1.1718|
;;;797    		{
;;;798    		bAVZ=0;
0006a8  f04f0000          MOV      r0,#0
0006ac  f8840021          STRB     r0,[r4,#0x21]
;;;799    		avz_next_date_hndl();
0006b0  e8bd4010          POP      {r4,lr}
0006b4  e7fe              B        avz_next_date_hndl
                  |L1.1718|
;;;800    		}
;;;801    	}	
;;;802    
;;;803    }
0006b6  bd10              POP      {r4,pc}
;;;804    
                          ENDP

                  vz_drv PROC
;;;805    //-----------------------------------------------
;;;806    void vz_drv(void)
0006b8  b538              PUSH     {r3-r5,lr}
;;;807    { 
;;;808    if(spc_stat==spcVZ)
0006ba  4c7b              LDR      r4,|L1.2216|
0006bc  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
0006be  2802              CMP      r0,#2
0006c0  d119              BNE      |L1.1782|
;;;809    	{
;;;810    	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
0006c2  4886              LDR      r0,|L1.2268|
0006c4  7800              LDRB     r0,[r0,#0]  ; sk_stat
0006c6  2801              CMP      r0,#1
0006c8  d016              BEQ      |L1.1784|
0006ca  4885              LDR      r0,|L1.2272|
0006cc  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
0006ce  b198              CBZ      r0,|L1.1784|
;;;811    		{
;;;812    
;;;813    	if(vz_cnt_s_<3600)
;;;814    		{
;;;815    		vz_cnt_s_++;
;;;816    		if(vz_cnt_s_>=3600)
;;;817    			{
;;;818    			vz_cnt_s_=0;
;;;819    			if(vz_cnt_h)
;;;820    				{
;;;821    				vz_cnt_h--;
;;;822    				vz_cnt_h_++;
;;;823    				}
;;;824    			}
;;;825    		}
;;;826    
;;;827    
;;;828    	if(vz_cnt_s<60)
;;;829    		{
;;;830    		vz_cnt_s++;
;;;831    		if(vz_cnt_s>=60)
;;;832    			{
;;;833    			vz_cnt_s=0;
;;;834    			
;;;835    			__ee_vz_cnt--;
;;;836    			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;837    			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;838    				{
;;;839    				spc_stat=spcOFF;
;;;840    						__ee_spc_stat=spcOFF;
;;;841    		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;842    
;;;843    //				hv_vz_stat=hvsOFF;
;;;844    //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;845    				vz_mem_hndl(0);
;;;846    				}
;;;847    			}
;;;848    		}
;;;849    
;;;850    		}
;;;851    	else 
;;;852    		{
;;;853    		if(((LPC_RTC->SEC)%10)==0)
0006d0  4884              LDR      r0,|L1.2276|
0006d2  7800              LDRB     r0,[r0,#0]
0006d4  f04f010a          MOV      r1,#0xa
0006d8  fbb0f2f1          UDIV     r2,r0,r1
0006dc  fb010012          MLS      r0,r1,r2,r0
0006e0  2800              CMP      r0,#0
0006e2  d108              BNE      |L1.1782|
;;;854    			{
;;;855    			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0006e4  f2413088          MOV      r0,#0x1388
0006e8  9000              STR      r0,[sp,#0]
0006ea  a37f              ADR      r3,|L1.2280|
0006ec  a284              ADR      r2,|L1.2304|
0006ee  a18a              ADR      r1,|L1.2328|
0006f0  a08f              ADR      r0,|L1.2352|
0006f2  f7fffffe          BL       show_mess
                  |L1.1782|
;;;856    						"    ЗАБЛОКИРОВАН    ",
;;;857    						"     НЕИСПРАВНА     ",
;;;858    						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;859    						5000);			
;;;860    			}
;;;861    		}
;;;862    /*	if(vz_cnt_s_>=3)
;;;863    		{
;;;864    		if(sk_stat[0]==0)
;;;865    		} */
;;;866    
;;;867    	}
;;;868    
;;;869    
;;;870    } 
0006f6  bd38              POP      {r3-r5,pc}
                  |L1.1784|
0006f8  f8b4005e          LDRH     r0,[r4,#0x5e]         ;813  ; vz_cnt_s_
0006fc  f44f6161          MOV      r1,#0xe10             ;813
000700  2500              MOVS     r5,#0                 ;810
000702  4288              CMP      r0,r1                 ;813
000704  d215              BCS      |L1.1842|
000706  f1000001          ADD      r0,r0,#1              ;815
00070a  b280              UXTH     r0,r0                 ;815
00070c  f8a4005e          STRH     r0,[r4,#0x5e]         ;815
000710  4288              CMP      r0,r1                 ;816
000712  d30e              BCC      |L1.1842|
000714  f8a4505e          STRH     r5,[r4,#0x5e]         ;818
000718  f8b40060          LDRH     r0,[r4,#0x60]         ;819  ; vz_cnt_h
00071c  b148              CBZ      r0,|L1.1842|
00071e  f1a00001          SUB      r0,r0,#1              ;821
000722  f8240f60          STRH     r0,[r4,#0x60]!        ;821
000726  8860              LDRH     r0,[r4,#2]            ;822  ; vz_cnt_h_
000728  f1000001          ADD      r0,r0,#1              ;822
00072c  8060              STRH     r0,[r4,#2]            ;822
00072e  f1a40460          SUB      r4,r4,#0x60           ;822
                  |L1.1842|
000732  f8b4005c          LDRH     r0,[r4,#0x5c]         ;828  ; vz_cnt_s
000736  283c              CMP      r0,#0x3c              ;828
000738  d2dd              BCS      |L1.1782|
00073a  f1000001          ADD      r0,r0,#1              ;830
00073e  b280              UXTH     r0,r0                 ;830
000740  f8a4005c          STRH     r0,[r4,#0x5c]         ;830
000744  283c              CMP      r0,#0x3c              ;831
000746  d3d6              BCC      |L1.1782|
000748  f8245f5c          STRH     r5,[r4,#0x5c]!        ;833
00074c  8960              LDRH     r0,[r4,#0xa]          ;835  ; __ee_vz_cnt
00074e  f1a00001          SUB      r0,r0,#1              ;835
000752  b201              SXTH     r1,r0                 ;835
000754  8161              STRH     r1,[r4,#0xa]          ;835
000756  f44f7027          MOV      r0,#0x29c             ;836
00075a  f7fffffe          BL       lc640_write_int
00075e  8960              LDRH     r0,[r4,#0xa]          ;837  ; __ee_vz_cnt
000760  f1a4045c          SUB      r4,r4,#0x5c           ;837
000764  b118              CBZ      r0,|L1.1902|
000766  4851              LDR      r0,|L1.2220|
000768  8800              LDRH     r0,[r0,#0]            ;837  ; speedChrgBlckStat
00076a  2801              CMP      r0,#1                 ;837
00076c  d1c3              BNE      |L1.1782|
                  |L1.1902|
00076e  77a5              STRB     r5,[r4,#0x1e]         ;839
000770  f8a45068          STRH     r5,[r4,#0x68]         ;840
000774  2100              MOVS     r1,#0                 ;841
000776  f240209a          MOV      r0,#0x29a             ;841
00077a  f7fffffe          BL       lc640_write_int
00077e  e8bd4038          POP      {r3-r5,lr}            ;845
000782  2000              MOVS     r0,#0                 ;845
000784  f7ffbffe          B.W      vz_mem_hndl
;;;871    
                          ENDP

                  vz1_drv PROC
;;;873    //драйвер уравнительного заряда
;;;874    void vz1_drv(void)
000788  e92d4ff8          PUSH     {r3-r11,lr}
;;;875    {
;;;876    if(volt_region_cnt)volt_region_cnt--;
00078c  f8df8118          LDR      r8,|L1.2216|
000790  f9b80076          LDRSH    r0,[r8,#0x76]  ; volt_region_cnt
000794  b118              CBZ      r0,|L1.1950|
000796  f1a00001          SUB      r0,r0,#1
00079a  f8a80076          STRH     r0,[r8,#0x76]
                  |L1.1950|
;;;877    if(vz1_stat==vz1sOFF)
00079e  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
0007a2  b928              CBNZ     r0,|L1.1968|
;;;878    	{
;;;879    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0007a4  2314              MOVS     r3,#0x14
0007a6  2200              MOVS     r2,#0
0007a8  2164              MOVS     r1,#0x64
0007aa  20d2              MOVS     r0,#0xd2
0007ac  f7fffffe          BL       mess_send
                  |L1.1968|
;;;880    	}
;;;881    if(vz1_stat==vz1sSTEP1)
0007b0  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
;;;882    	{
;;;883    	if(vz1_stat_old!=vz1_stat)
;;;884    		{
;;;885    		vz1_stat_cnt=5;
;;;886    		}
;;;887    	if(vz1_stat_cnt)
;;;888    		{
;;;889    		vz1_stat_cnt--;
;;;890    		if(vz1_stat_cnt==0)
;;;891    			{
;;;892    			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;893    			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;894    			}
;;;895    		}
;;;896    	if(sk_stat[0]==1)
0007b4  4d49              LDR      r5,|L1.2268|
0007b6  f44f7bc9          MOV      r11,#0x192            ;893
0007ba  2801              CMP      r0,#1                 ;881
0007bc  d139              BNE      |L1.2098|
0007be  f8980002          LDRB     r0,[r8,#2]            ;883  ; vz1_stat_old
0007c2  2801              CMP      r0,#1                 ;883
0007c4  d003              BEQ      |L1.1998|
0007c6  f04f0005          MOV      r0,#5                 ;885
0007ca  f8a80074          STRH     r0,[r8,#0x74]         ;885
                  |L1.1998|
0007ce  f9b80074          LDRSH    r0,[r8,#0x74]         ;887  ; vz1_stat_cnt
0007d2  b168              CBZ      r0,|L1.2032|
0007d4  f1a00001          SUB      r0,r0,#1              ;889
0007d8  b200              SXTH     r0,r0                 ;889
0007da  f8a80074          STRH     r0,[r8,#0x74]         ;889
0007de  b938              CBNZ     r0,|L1.2032|
0007e0  f04f000b          MOV      r0,#0xb               ;892
0007e4  f8880001          STRB     r0,[r8,#1]            ;892
0007e8  4601              MOV      r1,r0                 ;893
0007ea  4658              MOV      r0,r11                ;893
0007ec  f7fffffe          BL       lc640_write
                  |L1.2032|
0007f0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0007f2  2801              CMP      r0,#1
0007f4  d117              BNE      |L1.2086|
;;;897    		{
;;;898    		vz1_stat=vz1sSTEP2;
0007f6  f04f0002          MOV      r0,#2
0007fa  f8880001          STRB     r0,[r8,#1]
;;;899    		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0007fe  4601              MOV      r1,r0
000800  4658              MOV      r0,r11
000802  f7fffffe          BL       lc640_write
;;;900    		tree_up(iVZ1_STEP2_2,1,0,0);
000806  2300              MOVS     r3,#0
000808  461a              MOV      r2,r3
00080a  2101              MOVS     r1,#1
00080c  20de              MOVS     r0,#0xde
00080e  f7fffffe          BL       tree_up
;;;901    		tree_up(iVZ1_STEP2_1,0,0,0);
000812  2300              MOVS     r3,#0
000814  461a              MOV      r2,r3
000816  4619              MOV      r1,r3
000818  20dd              MOVS     r0,#0xdd
00081a  f7fffffe          BL       tree_up
;;;902    		ret(1200);
00081e  f44f6096          MOV      r0,#0x4b0
000822  f7fffffe          BL       ||ret||
                  |L1.2086|
;;;903    		}
;;;904    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000826  2314              MOVS     r3,#0x14
000828  2200              MOVS     r2,#0
00082a  2164              MOVS     r1,#0x64
00082c  20d2              MOVS     r0,#0xd2
00082e  f7fffffe          BL       mess_send
                  |L1.2098|
;;;905    	}
;;;906    
;;;907    if(vz1_stat==vz1sSTEP2)
000832  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
;;;908    	{
;;;909    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;910    		{
;;;911    		vz1_stat_cnt=15;
000836  f04f090f          MOV      r9,#0xf
00083a  2802              CMP      r0,#2                 ;907
00083c  d118              BNE      |L1.2160|
00083e  f8980002          LDRB     r0,[r8,#2]            ;909  ; vz1_stat_old
000842  2802              CMP      r0,#2                 ;909
000844  d102              BNE      |L1.2124|
000846  f8b80074          LDRH     r0,[r8,#0x74]         ;909  ; vz1_stat_cnt
00084a  b908              CBNZ     r0,|L1.2128|
                  |L1.2124|
00084c  f8a89074          STRH     r9,[r8,#0x74]
                  |L1.2128|
;;;912    		}
;;;913    	vz1_stat_cnt--;
000850  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000854  f1a00001          SUB      r0,r0,#1
000858  f8a80074          STRH     r0,[r8,#0x74]
;;;914    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00085c  f04f0314          MOV      r3,#0x14
000860  f04f0200          MOV      r2,#0
000864  f04f0164          MOV      r1,#0x64
000868  f04f00d2          MOV      r0,#0xd2
00086c  f7fffffe          BL       mess_send
                  |L1.2160|
;;;915    	}
;;;916    
;;;917    if(vz1_stat==vz1sSTEP3)
000870  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
;;;918    	{
;;;919    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;920    		{
;;;921    		vz1_stat_cnt=10;
000874  240a              MOVS     r4,#0xa
000876  2600              MOVS     r6,#0                 ;876
000878  f04f0a01          MOV      r10,#1                ;877
;;;922    
;;;923    		}
;;;924    	vz1_stat_cnt--;
;;;925    	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;926    		{
;;;927    		show_mess(	"     ВКЛЮЧИТЕ       ",
00087c  f2413788          MOV      r7,#0x1388
000880  2803              CMP      r0,#3                 ;917
000882  d17e              BNE      |L1.2434|
000884  f8980002          LDRB     r0,[r8,#2]            ;919  ; vz1_stat_old
000888  2803              CMP      r0,#3                 ;919
00088a  d102              BNE      |L1.2194|
00088c  f8b80074          LDRH     r0,[r8,#0x74]         ;919  ; vz1_stat_cnt
000890  b908              CBNZ     r0,|L1.2198|
                  |L1.2194|
000892  f8a84074          STRH     r4,[r8,#0x74]         ;921
                  |L1.2198|
000896  f8b80074          LDRH     r0,[r8,#0x74]         ;924  ; vz1_stat_cnt
00089a  f1a00001          SUB      r0,r0,#1              ;924
00089e  b200              SXTH     r0,r0                 ;924
0008a0  f8a80074          STRH     r0,[r8,#0x74]         ;924
0008a4  280a              CMP      r0,#0xa               ;925
0008a6  e04f              B        |L1.2376|
                  |L1.2216|
                          DCD      ||area_number.18||
                  |L1.2220|
                          DCD      speedChrgBlckStat
                  |L1.2224|
                          DCD      Ib_ips_termokompensat
                  |L1.2228|
                          DCD      0xffff7360
                  |L1.2232|
                          DCD      0x40024000
                  |L1.2236|
                          DCD      AVZ
                  |L1.2240|
                          DCD      YEAR_AVZ
                  |L1.2244|
                          DCD      MONTH_AVZ
                  |L1.2248|
                          DCD      DATE_AVZ
                  |L1.2252|
                          DCD      HOUR_AVZ
                  |L1.2256|
                          DCD      MIN_AVZ
                  |L1.2260|
                          DCD      SEC_AVZ
                  |L1.2264|
                          DCD      AVZ_TIME
                  |L1.2268|
                          DCD      sk_stat
                  |L1.2272|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.2276|
                          DCD      0x40024020
                  |L1.2280|
0008e8  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
0008ec  c2c5cdd2
0008f0  c8cbdfd6
0008f4  c8df2121
0008f8  21202020
0008fc  00      
0008fd  00                DCB      0
0008fe  00                DCB      0
0008ff  00                DCB      0
                  |L1.2304|
000900  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
000904  20cdc5c8
000908  d1cfd0c0
00090c  c2cdc020
000910  20202020
000914  00      
000915  00                DCB      0
000916  00                DCB      0
000917  00                DCB      0
                  |L1.2328|
000918  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
00091c  c7c0c1cb
000920  cecac8d0
000924  cec2c0cd
000928  20      
000929  20202000          DCB      "   ",0
00092d  00                DCB      0
00092e  00                DCB      0
00092f  00                DCB      0
                  |L1.2352|
000930  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
000934  c2cdc8c2
000938  c0ded9c8
00093c  c920c7  
00093f  c0d0dfc4          DCB      192,208,223,196," ",0
000943  2000    
000945  00                DCB      0
000946  00                DCB      0
000947  00                DCB      0
                  |L1.2376|
000948  d001              BEQ      |L1.2382|
00094a  2809              CMP      r0,#9                 ;925
00094c  d106              BNE      |L1.2396|
                  |L1.2382|
00094e  a3e8              ADR      r3,|L1.3312|
000950  a2ed              ADR      r2,|L1.3336|
000952  a1f3              ADR      r1,|L1.3360|
000954  a0f8              ADR      r0,|L1.3384|
000956  9700              STR      r7,[sp,#0]
000958  f7fffffe          BL       show_mess
                  |L1.2396|
;;;928    					"      ТУМБЛЕР       ",
;;;929    					"     ВЫСОКОГО       ",
;;;930    					"    НАПРЯЖЕНИЯ      ",
;;;931    					5000);
;;;932    		}
;;;933    	if(sk_stat[1]==1)
00095c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00095e  2801              CMP      r0,#1
000960  d10d              BNE      |L1.2430|
;;;934    		{
;;;935    		vz1_stat=vz1sWRK;
000962  f8884001          STRB     r4,[r8,#1]
;;;936    		lc640_write(EE_VZ1_STAT,vz1sWRK);
000966  210a              MOVS     r1,#0xa
000968  4658              MOV      r0,r11
00096a  f7fffffe          BL       lc640_write
;;;937    		volt_region=1;
00096e  f888a02a          STRB     r10,[r8,#0x2a]
;;;938    		cntrl_stat=0;
000972  f8a8602c          STRH     r6,[r8,#0x2c]
;;;939    		cntrl_stat_new=0;
000976  f8a86042          STRH     r6,[r8,#0x42]
;;;940    		cntrl_stat_old=0;
00097a  f8a8602e          STRH     r6,[r8,#0x2e]
                  |L1.2430|
;;;941    		}
;;;942    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00097e  2314              MOVS     r3,#0x14
000980  e000              B        |L1.2436|
                  |L1.2434|
000982  e004              B        |L1.2446|
                  |L1.2436|
000984  2200              MOVS     r2,#0
000986  2164              MOVS     r1,#0x64
000988  20d2              MOVS     r0,#0xd2
00098a  f7fffffe          BL       mess_send
                  |L1.2446|
;;;943    	}
;;;944    
;;;945    if(vz1_stat==vz1sWRK)
00098e  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000992  280a              CMP      r0,#0xa
000994  d17d              BNE      |L1.2706|
;;;946    	{
;;;947    	if(vz1_stat_old!=vz1_stat)
000996  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
;;;948    		{
;;;949    		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00099a  49ed              LDR      r1,|L1.3408|
00099c  280a              CMP      r0,#0xa               ;947
00099e  d008              BEQ      |L1.2482|
0009a0  48ec              LDR      r0,|L1.3412|
0009a2  f44f6261          MOV      r2,#0xe10
0009a6  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
0009aa  fb00f002          MUL      r0,r0,r2
0009ae  6388              STR      r0,[r1,#0x38]  ; vz1_wrk_cnt
;;;950    		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;951    		vz1_up_cnt=0L;
0009b0  63ce              STR      r6,[r1,#0x3c]  ; vz1_up_cnt
                  |L1.2482|
;;;952    
;;;953    		}
;;;954    	vz1_wrk_cnt--;
0009b2  6b88              LDR      r0,[r1,#0x38]  ; vz1_wrk_cnt
0009b4  f1a00001          SUB      r0,r0,#1
0009b8  6388              STR      r0,[r1,#0x38]  ; vz1_wrk_cnt
;;;955    	vz1_up_cnt++;
0009ba  6bca              LDR      r2,[r1,#0x3c]  ; vz1_up_cnt
0009bc  f1020201          ADD      r2,r2,#1
0009c0  63ca              STR      r2,[r1,#0x3c]  ; vz1_up_cnt
;;;956    
;;;957    	if(vz1_wrk_cnt==0)
0009c2  b940              CBNZ     r0,|L1.2518|
;;;958    		{
;;;959    		vz1_stat=vz1sFINE;
0009c4  f8889001          STRB     r9,[r8,#1]
;;;960    		lc640_write(EE_VZ1_STAT,vz1sFINE);
0009c8  210f              MOVS     r1,#0xf
0009ca  4658              MOV      r0,r11
0009cc  f7fffffe          BL       lc640_write
;;;961    		uz_mem_hndl(0);
0009d0  2000              MOVS     r0,#0
0009d2  f7fffffe          BL       uz_mem_hndl
                  |L1.2518|
;;;962    		}
;;;963    	if(sk_stat[0]==0)
0009d6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0009d8  b938              CBNZ     r0,|L1.2538|
;;;964    		{
;;;965    		vz1_stat=vz1sERR2;
0009da  f04f000c          MOV      r0,#0xc
0009de  f8880001          STRB     r0,[r8,#1]
;;;966    		lc640_write(EE_VZ1_STAT,vz1sERR2);
0009e2  4601              MOV      r1,r0
0009e4  4658              MOV      r0,r11
0009e6  f7fffffe          BL       lc640_write
                  |L1.2538|
;;;967    		}
;;;968    	if(sk_stat[1]==0)
0009ea  7868              LDRB     r0,[r5,#1]  ; sk_stat
0009ec  b938              CBNZ     r0,|L1.2558|
;;;969    		{
;;;970    		vz1_stat=vz1sERR3;
0009ee  f04f000d          MOV      r0,#0xd
0009f2  f8880001          STRB     r0,[r8,#1]
;;;971    		lc640_write(EE_VZ1_STAT,vz1sERR3);
0009f6  4601              MOV      r1,r0
0009f8  4658              MOV      r0,r11
0009fa  f7fffffe          BL       lc640_write
                  |L1.2558|
;;;972    		}
;;;973    	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0009fe  f9b80044          LDRSH    r0,[r8,#0x44]  ; Ibmax
000a02  f8b81046          LDRH     r1,[r8,#0x46]  ; IZMAX_
000a06  fb90f0f4          SDIV     r0,r0,r4
;;;974    		{
;;;975    		volt_region=0;
;;;976    		cntrl_stat=1000;
000a0a  f44f727a          MOV      r2,#0x3e8
000a0e  4288              CMP      r0,r1                 ;973
000a10  dd16              BLE      |L1.2624|
000a12  f9b8302c          LDRSH    r3,[r8,#0x2c]         ;973  ; cntrl_stat
000a16  2b14              CMP      r3,#0x14              ;973
000a18  dc12              BGT      |L1.2624|
000a1a  f898302a          LDRB     r3,[r8,#0x2a]         ;973  ; volt_region
000a1e  2b01              CMP      r3,#1                 ;973
000a20  d10e              BNE      |L1.2624|
000a22  f8b83076          LDRH     r3,[r8,#0x76]         ;973  ; volt_region_cnt
000a26  b95b              CBNZ     r3,|L1.2624|
000a28  f888602a          STRB     r6,[r8,#0x2a]         ;975
000a2c  f8a8202c          STRH     r2,[r8,#0x2c]
;;;977    		cntrl_stat_new=1000;
000a30  f8a82042          STRH     r2,[r8,#0x42]
;;;978    		cntrl_stat_old=1000;
000a34  f8a8202e          STRH     r2,[r8,#0x2e]
;;;979    		volt_region_cnt=110;
000a38  f04f036e          MOV      r3,#0x6e
000a3c  f8a83076          STRH     r3,[r8,#0x76]
                  |L1.2624|
;;;980    		}
;;;981    	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
000a40  4288              CMP      r0,r1
000a42  da13              BGE      |L1.2668|
000a44  f9b8002c          LDRSH    r0,[r8,#0x2c]  ; cntrl_stat
000a48  4290              CMP      r0,r2
000a4a  db0f              BLT      |L1.2668|
000a4c  f898002a          LDRB     r0,[r8,#0x2a]  ; volt_region
000a50  b960              CBNZ     r0,|L1.2668|
000a52  f8b80076          LDRH     r0,[r8,#0x76]  ; volt_region_cnt
000a56  b948              CBNZ     r0,|L1.2668|
;;;982    		{
;;;983    		volt_region=1;
000a58  f888a02a          STRB     r10,[r8,#0x2a]
;;;984    		cntrl_stat=10;
000a5c  f8a8402c          STRH     r4,[r8,#0x2c]
;;;985    		cntrl_stat_new=10;
000a60  f8a84042          STRH     r4,[r8,#0x42]
;;;986    		cntrl_stat_old=10;
000a64  f8a8402e          STRH     r4,[r8,#0x2e]
;;;987    		volt_region_cnt=10;
000a68  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.2668|
;;;988    		}
;;;989    	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000a6c  f898002a          LDRB     r0,[r8,#0x2a]  ; volt_region
000a70  b110              CBZ      r0,|L1.2680|
;;;990    	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
000a72  2801              CMP      r0,#1
000a74  d007              BEQ      |L1.2694|
000a76  e00c              B        |L1.2706|
                  |L1.2680|
000a78  2314              MOVS     r3,#0x14              ;989
000a7a  2200              MOVS     r2,#0                 ;989
000a7c  2164              MOVS     r1,#0x64              ;989
000a7e  20d2              MOVS     r0,#0xd2              ;989
000a80  f7fffffe          BL       mess_send
000a84  e005              B        |L1.2706|
                  |L1.2694|
000a86  2314              MOVS     r3,#0x14
000a88  2201              MOVS     r2,#1
000a8a  2164              MOVS     r1,#0x64
000a8c  20d2              MOVS     r0,#0xd2
000a8e  f7fffffe          BL       mess_send
                  |L1.2706|
;;;991    	}
;;;992    
;;;993    if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
000a92  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000a96  280b              CMP      r0,#0xb
000a98  d120              BNE      |L1.2780|
;;;994    	{
;;;995    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000a9a  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000a9e  280b              CMP      r0,#0xb
000aa0  d102              BNE      |L1.2728|
000aa2  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000aa6  b908              CBNZ     r0,|L1.2732|
                  |L1.2728|
;;;996    		{
;;;997    		vz1_stat_cnt=10;
000aa8  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2732|
;;;998    		}
;;;999    	vz1_stat_cnt--;
000aac  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000ab0  f1a00001          SUB      r0,r0,#1
000ab4  b200              SXTH     r0,r0
000ab6  f8a80074          STRH     r0,[r8,#0x74]
;;;1000   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000aba  280a              CMP      r0,#0xa
000abc  d001              BEQ      |L1.2754|
000abe  2809              CMP      r0,#9
000ac0  d106              BNE      |L1.2768|
                  |L1.2754|
;;;1001   		{
;;;1002   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000ac2  a3a5              ADR      r3,|L1.3416|
000ac4  a2aa              ADR      r2,|L1.3440|
000ac6  a1b0              ADR      r1,|L1.3464|
000ac8  a0b5              ADR      r0,|L1.3488|
000aca  9700              STR      r7,[sp,#0]
000acc  f7fffffe          BL       show_mess
                  |L1.2768|
;;;1003   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1004   					"      ВКЛЮЧЕН       ",
;;;1005   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1006   					5000);
;;;1007   		}
;;;1008   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000ad0  2314              MOVS     r3,#0x14
000ad2  2200              MOVS     r2,#0
000ad4  2164              MOVS     r1,#0x64
000ad6  20d2              MOVS     r0,#0xd2
000ad8  f7fffffe          BL       mess_send
                  |L1.2780|
;;;1009   	}
;;;1010   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
000adc  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000ae0  280c              CMP      r0,#0xc
000ae2  d12c              BNE      |L1.2878|
;;;1011   	{
;;;1012   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000ae4  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000ae8  280c              CMP      r0,#0xc
000aea  d102              BNE      |L1.2802|
000aec  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000af0  b908              CBNZ     r0,|L1.2806|
                  |L1.2802|
;;;1013   		{
;;;1014   		vz1_stat_cnt=10;
000af2  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2806|
;;;1015   		}
;;;1016   	vz1_stat_cnt--;
000af6  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000afa  f1a00001          SUB      r0,r0,#1
000afe  b200              SXTH     r0,r0
000b00  f8a80074          STRH     r0,[r8,#0x74]
;;;1017   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000b04  280a              CMP      r0,#0xa
000b06  d001              BEQ      |L1.2828|
000b08  2809              CMP      r0,#9
000b0a  d109              BNE      |L1.2848|
                  |L1.2828|
;;;1018   		{
;;;1019   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000b0c  f2af2328          ADR      r3,|L1.2280|
000b10  f2af2214          ADR      r2,|L1.2304|
000b14  f2af2100          ADR      r1,|L1.2328|
000b18  a0a1              ADR      r0,|L1.3488|
000b1a  9700              STR      r7,[sp,#0]
000b1c  f7fffffe          BL       show_mess
                  |L1.2848|
;;;1020   					"    ЗАБЛОКИРОВАН    ",
;;;1021   					"     НЕИСПРАВНА     ",
;;;1022   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1023   					5000);
;;;1024   		}
;;;1025   	if(sk_stat[0]==1)
000b20  7828              LDRB     r0,[r5,#0]  ; sk_stat
000b22  2801              CMP      r0,#1
000b24  d105              BNE      |L1.2866|
;;;1026   		{
;;;1027   		vz1_stat=vz1sWRK;
000b26  f8884001          STRB     r4,[r8,#1]
;;;1028   		lc640_write(EE_VZ1_STAT,vz1sWRK);
000b2a  210a              MOVS     r1,#0xa
000b2c  4658              MOV      r0,r11
000b2e  f7fffffe          BL       lc640_write
                  |L1.2866|
;;;1029   		}
;;;1030   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000b32  2314              MOVS     r3,#0x14
000b34  2200              MOVS     r2,#0
000b36  2164              MOVS     r1,#0x64
000b38  20d2              MOVS     r0,#0xd2
000b3a  f7fffffe          BL       mess_send
                  |L1.2878|
;;;1031   	}
;;;1032   
;;;1033   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
000b3e  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000b42  280d              CMP      r0,#0xd
000b44  d129              BNE      |L1.2970|
;;;1034   	{
;;;1035   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000b46  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000b4a  280d              CMP      r0,#0xd
000b4c  d102              BNE      |L1.2900|
000b4e  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000b52  b908              CBNZ     r0,|L1.2904|
                  |L1.2900|
;;;1036   		{
;;;1037   		vz1_stat_cnt=10;
000b54  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2904|
;;;1038   		}
;;;1039   	vz1_stat_cnt--;
000b58  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000b5c  f1a00001          SUB      r0,r0,#1
000b60  b200              SXTH     r0,r0
000b62  f8a80074          STRH     r0,[r8,#0x74]
;;;1040   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000b66  280a              CMP      r0,#0xa
000b68  d001              BEQ      |L1.2926|
000b6a  2809              CMP      r0,#9
000b6c  d106              BNE      |L1.2940|
                  |L1.2926|
;;;1041   		{
;;;1042   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000b6e  a392              ADR      r3,|L1.3512|
000b70  a297              ADR      r2,|L1.3536|
000b72  a19d              ADR      r1,|L1.3560|
000b74  a08a              ADR      r0,|L1.3488|
000b76  9700              STR      r7,[sp,#0]
000b78  f7fffffe          BL       show_mess
                  |L1.2940|
;;;1043   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1044   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1045   					"*   ТУМБЛЕРА!!!     ",
;;;1046   					5000);
;;;1047   		}
;;;1048   	if(sk_stat[1]==1)
000b7c  7868              LDRB     r0,[r5,#1]  ; sk_stat
000b7e  2801              CMP      r0,#1
000b80  d105              BNE      |L1.2958|
;;;1049   		{
;;;1050   		vz1_stat=vz1sWRK;
000b82  f8884001          STRB     r4,[r8,#1]
;;;1051   		lc640_write(EE_VZ1_STAT,vz1sWRK);
000b86  210a              MOVS     r1,#0xa
000b88  4658              MOV      r0,r11
000b8a  f7fffffe          BL       lc640_write
                  |L1.2958|
;;;1052   		}
;;;1053   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000b8e  2314              MOVS     r3,#0x14
000b90  2200              MOVS     r2,#0
000b92  2164              MOVS     r1,#0x64
000b94  20d2              MOVS     r0,#0xd2
000b96  f7fffffe          BL       mess_send
                  |L1.2970|
;;;1054   	}
;;;1055   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
000b9a  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000b9e  280e              CMP      r0,#0xe
000ba0  d12a              BNE      |L1.3064|
;;;1056   	{
;;;1057   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000ba2  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000ba6  280e              CMP      r0,#0xe
000ba8  d102              BNE      |L1.2992|
000baa  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000bae  b908              CBNZ     r0,|L1.2996|
                  |L1.2992|
;;;1058   		{
;;;1059   		vz1_stat_cnt=10;
000bb0  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2996|
;;;1060   		}
;;;1061   	vz1_stat_cnt--;
000bb4  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000bb8  f1a00001          SUB      r0,r0,#1
000bbc  b200              SXTH     r0,r0
000bbe  f8a80074          STRH     r0,[r8,#0x74]
;;;1062   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000bc2  280a              CMP      r0,#0xa
000bc4  d001              BEQ      |L1.3018|
000bc6  2809              CMP      r0,#9
000bc8  d106              BNE      |L1.3032|
                  |L1.3018|
;;;1063   		{
;;;1064   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
000bca  a349              ADR      r3,|L1.3312|
000bcc  a24e              ADR      r2,|L1.3336|
000bce  a154              ADR      r1,|L1.3360|
000bd0  a08b              ADR      r0,|L1.3584|
000bd2  9700              STR      r7,[sp,#0]
000bd4  f7fffffe          BL       show_mess
                  |L1.3032|
;;;1065   					"      ТУМБЛЕР       ",
;;;1066   					"     ВЫСОКОГО       ",
;;;1067   					"    НАПРЯЖЕНИЯ      ",
;;;1068   					5000);
;;;1069   		}
;;;1070   	if(sk_stat[1]==0)
000bd8  7868              LDRB     r0,[r5,#1]  ; sk_stat
000bda  b938              CBNZ     r0,|L1.3052|
;;;1071   		{
;;;1072   		vz1_stat=vz1sOFF;
000bdc  f8886001          STRB     r6,[r8,#1]
;;;1073   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000be0  2100              MOVS     r1,#0
000be2  4658              MOV      r0,r11
000be4  f7fffffe          BL       lc640_write
;;;1074   		vz_stop();
000be8  f7fffffe          BL       vz_stop
                  |L1.3052|
;;;1075   
;;;1076   		}
;;;1077   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
000bec  2314              MOVS     r3,#0x14
000bee  2201              MOVS     r2,#1
000bf0  2164              MOVS     r1,#0x64
000bf2  20d2              MOVS     r0,#0xd2
000bf4  f7fffffe          BL       mess_send
                  |L1.3064|
;;;1078   	}
;;;1079   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
000bf8  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
;;;1080   	{
;;;1081   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1082   		{
;;;1083   		vz1_stat_cnt=10;
;;;1084   		}
;;;1085   	vz1_stat_cnt--;
;;;1086   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1087   		{
;;;1088   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
000bfc  f64037b8          MOV      r7,#0xbb8
000c00  280f              CMP      r0,#0xf               ;1079
000c02  d135              BNE      |L1.3184|
000c04  f8980002          LDRB     r0,[r8,#2]            ;1081  ; vz1_stat_old
000c08  280f              CMP      r0,#0xf               ;1081
000c0a  d102              BNE      |L1.3090|
000c0c  f8b80074          LDRH     r0,[r8,#0x74]         ;1081  ; vz1_stat_cnt
000c10  b908              CBNZ     r0,|L1.3094|
                  |L1.3090|
000c12  f8a84074          STRH     r4,[r8,#0x74]         ;1083
                  |L1.3094|
000c16  f8b80074          LDRH     r0,[r8,#0x74]         ;1085  ; vz1_stat_cnt
000c1a  f1a00001          SUB      r0,r0,#1              ;1085
000c1e  b200              SXTH     r0,r0                 ;1085
000c20  f8a80074          STRH     r0,[r8,#0x74]         ;1085
000c24  280a              CMP      r0,#0xa               ;1086
000c26  d001              BEQ      |L1.3116|
000c28  2809              CMP      r0,#9                 ;1086
000c2a  d106              BNE      |L1.3130|
                  |L1.3116|
000c2c  a37a              ADR      r3,|L1.3608|
000c2e  a280              ADR      r2,|L1.3632|
000c30  a185              ADR      r1,|L1.3656|
000c32  a08b              ADR      r0,|L1.3680|
000c34  9700              STR      r7,[sp,#0]
000c36  f7fffffe          BL       show_mess
                  |L1.3130|
;;;1089   					"       ЗАРЯД        ",
;;;1090   					"      УСПЕШНО       ",
;;;1091   					"     ЗАВЕРШЕН       ",
;;;1092   					3000);
;;;1093   		}
;;;1094   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
000c3a  f9b80074          LDRSH    r0,[r8,#0x74]  ; vz1_stat_cnt
000c3e  2806              CMP      r0,#6
000c40  d001              BEQ      |L1.3142|
000c42  2805              CMP      r0,#5
000c44  d106              BNE      |L1.3156|
                  |L1.3142|
;;;1095   		{
;;;1096   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
000c46  a32a              ADR      r3,|L1.3312|
000c48  a22f              ADR      r2,|L1.3336|
000c4a  a135              ADR      r1,|L1.3360|
000c4c  a08a              ADR      r0,|L1.3704|
000c4e  9700              STR      r7,[sp,#0]
000c50  f7fffffe          BL       show_mess
                  |L1.3156|
;;;1097   					"      ТУМБЛЕР       ",
;;;1098   					"     ВЫСОКОГО       ",
;;;1099   					"    НАПРЯЖЕНИЯ      ",
;;;1100   					3000);
;;;1101   		}
;;;1102   	if(sk_stat[1]==0)
000c54  7868              LDRB     r0,[r5,#1]  ; sk_stat
000c56  b928              CBNZ     r0,|L1.3172|
;;;1103   		{
;;;1104   		vz1_stat=vz1sOFF;
000c58  f8886001          STRB     r6,[r8,#1]
;;;1105   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000c5c  2100              MOVS     r1,#0
000c5e  4658              MOV      r0,r11
000c60  f7fffffe          BL       lc640_write
                  |L1.3172|
;;;1106   		}
;;;1107   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000c64  2314              MOVS     r3,#0x14
000c66  2200              MOVS     r2,#0
000c68  2164              MOVS     r1,#0x64
000c6a  20d2              MOVS     r0,#0xd2
000c6c  f7fffffe          BL       mess_send
                  |L1.3184|
;;;1108   	}
;;;1109   
;;;1110   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
000c70  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000c74  2810              CMP      r0,#0x10
000c76  d135              BNE      |L1.3300|
;;;1111   	{
;;;1112   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000c78  f8980002          LDRB     r0,[r8,#2]  ; vz1_stat_old
000c7c  2810              CMP      r0,#0x10
000c7e  d102              BNE      |L1.3206|
000c80  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000c84  b908              CBNZ     r0,|L1.3210|
                  |L1.3206|
;;;1113   		{
;;;1114   		vz1_stat_cnt=10;
000c86  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.3210|
;;;1115   		}
;;;1116   	vz1_stat_cnt--;
000c8a  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000c8e  f1a00001          SUB      r0,r0,#1
000c92  b200              SXTH     r0,r0
000c94  f8a80074          STRH     r0,[r8,#0x74]
;;;1117   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000c98  280a              CMP      r0,#0xa
000c9a  d001              BEQ      |L1.3232|
000c9c  2809              CMP      r0,#9
000c9e  d106              BNE      |L1.3246|
                  |L1.3232|
;;;1118   		{
;;;1119   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
000ca0  a37b              ADR      r3,|L1.3728|
000ca2  a281              ADR      r2,|L1.3752|
000ca4  a168              ADR      r1,|L1.3656|
000ca6  a06e              ADR      r0,|L1.3680|
000ca8  9700              STR      r7,[sp,#0]
000caa  f7fffffe          BL       show_mess
                  |L1.3246|
;;;1120   					"       ЗАРЯД        ",
;;;1121   					"     ПРЕКРАЩЕН      ",
;;;1122   					"                    ",
;;;1123   					3000);
;;;1124   		}
;;;1125   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
000cae  f9b80074          LDRSH    r0,[r8,#0x74]  ; vz1_stat_cnt
000cb2  2806              CMP      r0,#6
000cb4  d001              BEQ      |L1.3258|
000cb6  2805              CMP      r0,#5
000cb8  d106              BNE      |L1.3272|
                  |L1.3258|
;;;1126   		{
;;;1127   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
000cba  a30d              ADR      r3,|L1.3312|
000cbc  a212              ADR      r2,|L1.3336|
000cbe  a118              ADR      r1,|L1.3360|
000cc0  a06d              ADR      r0,|L1.3704|
000cc2  9700              STR      r7,[sp,#0]
000cc4  f7fffffe          BL       show_mess
                  |L1.3272|
;;;1128   					"      ТУМБЛЕР       ",
;;;1129   					"     ВЫСОКОГО       ",
;;;1130   					"    НАПРЯЖЕНИЯ      ",
;;;1131   					3000);
;;;1132   		}
;;;1133   	if(sk_stat[1]==0)
000cc8  7868              LDRB     r0,[r5,#1]  ; sk_stat
000cca  b928              CBNZ     r0,|L1.3288|
;;;1134   		{
;;;1135   		vz1_stat=vz1sOFF;
000ccc  f8886001          STRB     r6,[r8,#1]
;;;1136   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000cd0  2100              MOVS     r1,#0
000cd2  4658              MOV      r0,r11
000cd4  f7fffffe          BL       lc640_write
                  |L1.3288|
;;;1137   		}
;;;1138   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000cd8  2314              MOVS     r3,#0x14
000cda  2200              MOVS     r2,#0
000cdc  2164              MOVS     r1,#0x64
000cde  20d2              MOVS     r0,#0xd2
000ce0  f7fffffe          BL       mess_send
                  |L1.3300|
;;;1139   	}
;;;1140   
;;;1141   vz1_stat_old=vz1_stat;
000ce4  f8980001          LDRB     r0,[r8,#1]  ; vz1_stat
000ce8  f8880002          STRB     r0,[r8,#2]
;;;1142   
;;;1143   
;;;1144   
;;;1145   }
000cec  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.3312|
000cf0  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
000cf4  cdc0cfd0
000cf8  dfc6c5cd
000cfc  c8df2020
000d00  20202020
000d04  00      
000d05  00                DCB      0
000d06  00                DCB      0
000d07  00                DCB      0
                  |L1.3336|
000d08  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
000d0c  20c2dbd1
000d10  cecacec3
000d14  ce202020
000d18  20202020
000d1c  00      
000d1d  00                DCB      0
000d1e  00                DCB      0
000d1f  00                DCB      0
                  |L1.3360|
000d20  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
000d24  2020d2d3
000d28  ccc1cbc5
000d2c  d0202020
000d30  20202020
000d34  00      
000d35  00                DCB      0
000d36  00                DCB      0
000d37  00                DCB      0
                  |L1.3384|
000d38  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
000d3c  20c2cacb
000d40  ded7c8d2
000d44  c5202020
000d48  20202020
000d4c  00      
000d4d  00                DCB      0
000d4e  00                DCB      0
000d4f  00                DCB      0
                  |L1.3408|
                          DCD      ||area_number.18||+0x80
                  |L1.3412|
                          DCD      UZ_T
                  |L1.3416|
000d58  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
000d5c  c720c2c5
000d60  cdd2c8cb
000d64  dfd6c8  
000d67  c8212120          DCB      200,"!!  ",0
000d6b  2000    
000d6d  00                DCB      0
000d6e  00                DCB      0
000d6f  00                DCB      0
                  |L1.3440|
000d70  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
000d74  2020c2ca
000d78  cbded7c5
000d7c  cd202020
000d80  20202020
000d84  00      
000d85  00                DCB      0
000d86  00                DCB      0
000d87  00                DCB      0
                  |L1.3464|
000d88  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
000d8c  c520ccce
000d90  c6c5d220
000d94  c1dbd2dc
000d98  20202020          DCB      "    ",0
000d9c  00      
000d9d  00                DCB      0
000d9e  00                DCB      0
000d9f  00                DCB      0
                  |L1.3488|
000da0  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
000da4  cdc8d2c5
000da8  cbdccddb
000dac  c920c7  
000daf  c0d0dfc4          DCB      192,208,223,196," ",0
000db3  2000    
000db5  00                DCB      0
000db6  00                DCB      0
000db7  00                DCB      0
                  |L1.3512|
000db8  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
000dbc  d2d3ccc1
000dc0  cbc5d0c0
000dc4  21212120
000dc8  20202020
000dcc  00      
000dcd  00                DCB      0
000dce  00                DCB      0
000dcf  00                DCB      0
                  |L1.3536|
000dd0  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
000dd4  d1cbc520
000dd8  c2cacbde
000ddc  d7c5cd  
000ddf  c8df2020          DCB      200,223,"   ",0
000de3  2000    
000de5  00                DCB      0
000de6  00                DCB      0
000de7  00                DCB      0
                  |L1.3560|
000de8  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
000dec  c4c5d220
000df0  cfd0cec4
000df4  cecbc6  
000df7  c5cd2020          DCB      197,205,"   ",0
000dfb  2000    
000dfd  00                DCB      0
000dfe  00                DCB      0
000dff  00                DCB      0
                  |L1.3584|
000e00  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
000e04  20c2dbca
000e08  cbded7c8
000e0c  d2c52020
000e10  20202020
000e14  00      
000e15  00                DCB      0
000e16  00                DCB      0
000e17  00                DCB      0
                  |L1.3608|
000e18  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
000e1c  20c7c0c2
000e20  c5d0d8c5
000e24  cd202020
000e28  20202020
000e2c  00      
000e2d  00                DCB      0
000e2e  00                DCB      0
000e2f  00                DCB      0
                  |L1.3632|
000e30  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
000e34  2020d3d1
000e38  cfc5d8cd
000e3c  ce202020
000e40  20202020
000e44  00      
000e45  00                DCB      0
000e46  00                DCB      0
000e47  00                DCB      0
                  |L1.3656|
000e48  20202020          DCB      "       ",199,192,208,223,196,"        ",0
000e4c  202020c7
000e50  c0d0dfc4
000e54  20202020
000e58  20202020
000e5c  00      
000e5d  00                DCB      0
000e5e  00                DCB      0
000e5f  00                DCB      0
                  |L1.3680|
000e60  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
000e64  d0c0c2cd
000e68  c8d2c5cb
000e6c  dccddbc9
000e70  20202020          DCB      "    ",0
000e74  00      
000e75  00                DCB      0
000e76  00                DCB      0
000e77  00                DCB      0
                  |L1.3704|
000e78  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
000e7c  20c2dbca
000e80  cbded7c8
000e84  d2c52020
000e88  20202020
000e8c  00      
000e8d  00                DCB      0
000e8e  00                DCB      0
000e8f  00                DCB      0
                  |L1.3728|
000e90  20202020          DCB      "                    ",0
000e94  20202020
000e98  20202020
000e9c  20202020
000ea0  20202020
000ea4  00      
000ea5  00                DCB      0
000ea6  00                DCB      0
000ea7  00                DCB      0
                  |L1.3752|
000ea8  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
000eac  20cfd0c5
000eb0  cad0c0d9
000eb4  c5cd2020
000eb8  20202020
000ebc  00      
000ebd  00                DCB      0
000ebe  00                DCB      0
000ebf  00                DCB      0
                          ENDP

                  vz1_start PROC
;;;1148   //старт уравнительног заряда
;;;1149   char vz1_start(char hour)
000ec0  b510              PUSH     {r4,lr}
;;;1150   {          
;;;1151   char out;
;;;1152   out=0;
000ec2  f04f0000          MOV      r0,#0
;;;1153   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
000ec6  49fb              LDR      r1,|L1.4788|
000ec8  7f8a              LDRB     r2,[r1,#0x1e]  ; spc_stat
000eca  2a00              CMP      r2,#0
000ecc  d110              BNE      |L1.3824|
000ece  4afa              LDR      r2,|L1.4792|
000ed0  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
000ed2  2a01              CMP      r2,#1
000ed4  d00c              BEQ      |L1.3824|
000ed6  784a              LDRB     r2,[r1,#1]  ; vz1_stat
000ed8  2a00              CMP      r2,#0
000eda  d109              BNE      |L1.3824|
;;;1154   	{
;;;1155   	if(vz1_stat==vz1sOFF)
;;;1156   		{
;;;1157   		vz1_stat=vz1sSTEP1;
000edc  f04f0001          MOV      r0,#1
000ee0  7048              STRB     r0,[r1,#1]
;;;1158   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
000ee2  4601              MOV      r1,r0
000ee4  f44f70c9          MOV      r0,#0x192
000ee8  f7fffffe          BL       lc640_write
;;;1159   		out=1;
000eec  f04f0001          MOV      r0,#1
                  |L1.3824|
;;;1160   		
;;;1161   		}
;;;1162   /*	spc_stat=spcVZ;
;;;1163   	__ee_spc_stat=spcVZ; 
;;;1164   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1165   	vz_cnt_h=hour;
;;;1166   	__ee_vz_cnt=hour*60;
;;;1167   	if(hour==0)__ee_vz_cnt=30;
;;;1168   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1169   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1170   	vz_cnt_h_=0;
;;;1171   	vz_cnt_s=0;
;;;1172   	vz_cnt_s_=0;
;;;1173   	
;;;1174   		*/
;;;1175   	}
;;;1176   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1177   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1178   //plazma=out;	
;;;1179   return out;
;;;1180   }
000ef0  bd10              POP      {r4,pc}
;;;1181   
                          ENDP

                  vz1_stop PROC
;;;1183   //стоп уравнительног заряда
;;;1184   void vz1_stop(void)
000ef2  48f0              LDR      r0,|L1.4788|
;;;1185   {
;;;1186   if(vz1_stat!=vz1sOFF)
000ef4  7841              LDRB     r1,[r0,#1]  ; vz1_stat
000ef6  2900              CMP      r1,#0
000ef8  d006              BEQ      |L1.3848|
;;;1187   	{
;;;1188   	vz1_stat=vz1sSTOP;
000efa  f04f0110          MOV      r1,#0x10
000efe  7041              STRB     r1,[r0,#1]
;;;1189   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
000f00  f44f70c9          MOV      r0,#0x192
000f04  f7ffbffe          B.W      lc640_write
                  |L1.3848|
;;;1190   	}
;;;1191   }
000f08  4770              BX       lr
;;;1192   
                          ENDP

                  vz2_drv PROC
;;;1194   //драйвер формовочного заряда
;;;1195   void vz2_drv(void)
000f0a  e92d4ff8          PUSH     {r3-r11,lr}
;;;1196   {
;;;1197   
;;;1198   if(vz2_stat==vz2sSTEP1)
000f0e  4ee9              LDR      r6,|L1.4788|
;;;1199   	{
;;;1200   	if(vz2_stat_old!=vz2_stat)
;;;1201   		{
;;;1202   		vz2_stat_cnt=5;
;;;1203   		}
;;;1204   	if(vz2_stat_cnt)
;;;1205   		{
;;;1206   		vz2_stat_cnt--;
;;;1207   		if(vz2_stat_cnt==0)
;;;1208   			{
;;;1209   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1210   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1211   			}
;;;1212   		}
;;;1213   	if(sk_stat[0]==1)
000f10  4dea              LDR      r5,|L1.4796|
000f12  78f0              LDRB     r0,[r6,#3]            ;1198  ; vz2_stat
000f14  2801              CMP      r0,#1                 ;1198
000f16  d138              BNE      |L1.3978|
000f18  7930              LDRB     r0,[r6,#4]            ;1200  ; vz2_stat_old
000f1a  2801              CMP      r0,#1                 ;1200
000f1c  d003              BEQ      |L1.3878|
000f1e  f04f0005          MOV      r0,#5                 ;1202
000f22  f8a60078          STRH     r0,[r6,#0x78]         ;1202
                  |L1.3878|
000f26  f9b60078          LDRSH    r0,[r6,#0x78]         ;1204  ; vz2_stat_cnt
000f2a  b168              CBZ      r0,|L1.3912|
000f2c  f1a00001          SUB      r0,r0,#1              ;1206
000f30  b200              SXTH     r0,r0                 ;1206
000f32  f8a60078          STRH     r0,[r6,#0x78]         ;1206
000f36  b938              CBNZ     r0,|L1.3912|
000f38  f04f000c          MOV      r0,#0xc               ;1209
000f3c  70f0              STRB     r0,[r6,#3]            ;1209
000f3e  4601              MOV      r1,r0                 ;1210
000f40  f44f70ca          MOV      r0,#0x194             ;1210
000f44  f7fffffe          BL       lc640_write
                  |L1.3912|
000f48  7828              LDRB     r0,[r5,#0]  ; sk_stat
000f4a  2801              CMP      r0,#1
000f4c  d117              BNE      |L1.3966|
;;;1214   		{
;;;1215   		vz2_stat=vz2sSTEP2;
000f4e  f04f0002          MOV      r0,#2
000f52  70f0              STRB     r0,[r6,#3]
;;;1216   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
000f54  4601              MOV      r1,r0
000f56  f44f70ca          MOV      r0,#0x194
000f5a  f7fffffe          BL       lc640_write
;;;1217   		tree_up(iVZ2_STEP2_2,1,0,0);
000f5e  2300              MOVS     r3,#0
000f60  461a              MOV      r2,r3
000f62  2101              MOVS     r1,#1
000f64  20e0              MOVS     r0,#0xe0
000f66  f7fffffe          BL       tree_up
;;;1218   		tree_up(iVZ2_STEP2_1,0,0,0);
000f6a  2300              MOVS     r3,#0
000f6c  461a              MOV      r2,r3
000f6e  4619              MOV      r1,r3
000f70  20df              MOVS     r0,#0xdf
000f72  f7fffffe          BL       tree_up
;;;1219   		ret(1200);
000f76  f44f6096          MOV      r0,#0x4b0
000f7a  f7fffffe          BL       ||ret||
                  |L1.3966|
;;;1220   		}
;;;1221   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000f7e  2314              MOVS     r3,#0x14
000f80  2200              MOVS     r2,#0
000f82  2164              MOVS     r1,#0x64
000f84  20d2              MOVS     r0,#0xd2
000f86  f7fffffe          BL       mess_send
                  |L1.3978|
;;;1222   	}
;;;1223   
;;;1224   if(vz2_stat==vz2sSTEP2)
000f8a  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
000f8c  2802              CMP      r0,#2
000f8e  d119              BNE      |L1.4036|
;;;1225   	{
;;;1226   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
000f90  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
000f92  2802              CMP      r0,#2
000f94  d102              BNE      |L1.3996|
000f96  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
000f9a  b918              CBNZ     r0,|L1.4004|
                  |L1.3996|
;;;1227   		{
;;;1228   		vz2_stat_cnt=15;
000f9c  f04f000f          MOV      r0,#0xf
000fa0  f8a60078          STRH     r0,[r6,#0x78]
                  |L1.4004|
;;;1229   		}
;;;1230   	vz2_stat_cnt--;
000fa4  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
000fa8  f1a00001          SUB      r0,r0,#1
000fac  f8a60078          STRH     r0,[r6,#0x78]
;;;1231   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000fb0  f04f0314          MOV      r3,#0x14
000fb4  f04f0200          MOV      r2,#0
000fb8  f04f0164          MOV      r1,#0x64
000fbc  f04f00d2          MOV      r0,#0xd2
000fc0  f7fffffe          BL       mess_send
                  |L1.4036|
;;;1232   	}
;;;1233   
;;;1234   if(vz2_stat==vz2sSTEP3)
000fc4  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
;;;1235   	{
;;;1236   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1237   		{
;;;1238   		vz2_stat_cnt=10;
000fc6  240a              MOVS     r4,#0xa
000fc8  2700              MOVS     r7,#0
;;;1239   		cntrl_stat=0;
;;;1240   		cntrl_stat_new=0;
;;;1241   		cntrl_stat_old=0;
;;;1242   		}
;;;1243   	vz2_stat_cnt--;
;;;1244   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1245   		{
;;;1246   		show_mess(	"     ВКЛЮЧИТЕ       ",
000fca  f2413888          MOV      r8,#0x1388
000fce  2803              CMP      r0,#3                 ;1234
000fd0  d139              BNE      |L1.4166|
000fd2  7930              LDRB     r0,[r6,#4]            ;1236  ; vz2_stat_old
000fd4  2803              CMP      r0,#3                 ;1236
000fd6  d102              BNE      |L1.4062|
000fd8  f8b60078          LDRH     r0,[r6,#0x78]         ;1236  ; vz2_stat_cnt
000fdc  b928              CBNZ     r0,|L1.4074|
                  |L1.4062|
000fde  f8a64078          STRH     r4,[r6,#0x78]         ;1238
000fe2  85b7              STRH     r7,[r6,#0x2c]         ;1239
000fe4  f8a67042          STRH     r7,[r6,#0x42]         ;1240
000fe8  85f7              STRH     r7,[r6,#0x2e]         ;1241
                  |L1.4074|
000fea  f8b60078          LDRH     r0,[r6,#0x78]         ;1243  ; vz2_stat_cnt
000fee  f1a00001          SUB      r0,r0,#1              ;1243
000ff2  b200              SXTH     r0,r0                 ;1243
000ff4  f8a60078          STRH     r0,[r6,#0x78]         ;1243
000ff8  280a              CMP      r0,#0xa               ;1244
000ffa  d001              BEQ      |L1.4096|
000ffc  2809              CMP      r0,#9                 ;1244
000ffe  d10b              BNE      |L1.4120|
                  |L1.4096|
001000  f2af3314          ADR      r3,|L1.3312|
001004  f2af3200          ADR      r2,|L1.3336|
001008  f2af21ec          ADR      r1,|L1.3360|
00100c  f2af20d8          ADR      r0,|L1.3384|
001010  f8cd8000          STR      r8,[sp,#0]
001014  f7fffffe          BL       show_mess
                  |L1.4120|
;;;1247   					"      ТУМБЛЕР       ",
;;;1248   					"     ВЫСОКОГО       ",
;;;1249   					"    НАПРЯЖЕНИЯ      ",
;;;1250   					5000);
;;;1251   		}
;;;1252   	if(sk_stat[1]==1)
001018  7868              LDRB     r0,[r5,#1]  ; sk_stat
00101a  2801              CMP      r0,#1
00101c  d10d              BNE      |L1.4154|
;;;1253   		{
;;;1254   		vz2_stat=vz2sWRK1;
00101e  70f4              STRB     r4,[r6,#3]
;;;1255   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001020  210a              MOVS     r1,#0xa
001022  f44f70ca          MOV      r0,#0x194
001026  f7fffffe          BL       lc640_write
;;;1256   		volt_region=1;
00102a  f04f0001          MOV      r0,#1
00102e  f886002a          STRB     r0,[r6,#0x2a]
;;;1257   		cntrl_stat=0;
001032  85b7              STRH     r7,[r6,#0x2c]
;;;1258   		cntrl_stat_new=0;
001034  f8a67042          STRH     r7,[r6,#0x42]
;;;1259   		cntrl_stat_old=0;
001038  85f7              STRH     r7,[r6,#0x2e]
                  |L1.4154|
;;;1260   		}
;;;1261   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00103a  2314              MOVS     r3,#0x14
00103c  2200              MOVS     r2,#0
00103e  2164              MOVS     r1,#0x64
001040  20d2              MOVS     r0,#0xd2
001042  f7fffffe          BL       mess_send
                  |L1.4166|
;;;1262   	}
;;;1263   
;;;1264   if(vz2_stat==vz2sWRK1)
001046  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
;;;1265   	{
;;;1266   
;;;1267   	if(vz2_stat_old!=vz2_stat)
;;;1268   		{
;;;1269   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001048  f8df9268          LDR      r9,|L1.4788|
;;;1270   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1271   		vz2_up_cnt=0L;
;;;1272   
;;;1273   		}
;;;1274   	vz2_wrk_cnt--;
;;;1275   	vz2_up_cnt++;
;;;1276   
;;;1277   	if(vz2_wrk_cnt==0)
;;;1278   		{
;;;1279   		vz2_stat=vz2sWRK2;
;;;1280   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1281   		}
;;;1282   	if(sk_stat[0]==0)
;;;1283   		{
;;;1284   		vz2_stat=vz2sERR2;
;;;1285   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1286   		}
;;;1287   	if(sk_stat[1]==0)
;;;1288   		{
;;;1289   		vz2_stat=vz2sERR3;
;;;1290   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1291   		}
;;;1292   	//if(abs(out_U-FZ_U1)<10)
;;;1293   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1294   		{
;;;1295   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1296   			{
;;;1297   			if(vz2_stat_ph2_cnt)
;;;1298   				{
;;;1299   				vz2_stat_ph2_cnt--;
;;;1300   				if(vz2_stat_ph2_cnt==0)
;;;1301   					{
;;;1302   					vz2_stat=vz2sWRK2;
;;;1303   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1304   					}
;;;1305   				}
;;;1306   			}
;;;1307   		else
;;;1308   			{
;;;1309   			vz2_stat_ph2_cnt=60;
;;;1310   			}
;;;1311   		}
;;;1312   	else
;;;1313   		{
;;;1314   		vz2_stat_ph2_cnt=60;
;;;1315   		}
;;;1316   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1317   		{
;;;1318   		volt_region=0;
;;;1319   		cntrl_stat=1000;
00104c  f44f7b7a          MOV      r11,#0x3e8
001050  f1090980          ADD      r9,r9,#0x80           ;1269
001054  f04f0a0b          MOV      r10,#0xb              ;1279
001058  280a              CMP      r0,#0xa               ;1264
00105a  d17d              BNE      |L1.4440|
00105c  7930              LDRB     r0,[r6,#4]            ;1267  ; vz2_stat_old
00105e  280a              CMP      r0,#0xa               ;1267
001060  d00a              BEQ      |L1.4216|
001062  4897              LDR      r0,|L1.4800|
001064  f44f6161          MOV      r1,#0xe10             ;1269
001068  f9b00000          LDRSH    r0,[r0,#0]            ;1269  ; FZ_T1
00106c  fb00f001          MUL      r0,r0,r1              ;1269
001070  f8c90040          STR      r0,[r9,#0x40]         ;1269  ; vz2_wrk_cnt
001074  f8c97044          STR      r7,[r9,#0x44]         ;1271  ; vz2_up_cnt
                  |L1.4216|
001078  f8d90040          LDR      r0,[r9,#0x40]         ;1274  ; vz2_wrk_cnt
00107c  f1a00001          SUB      r0,r0,#1              ;1274
001080  f8c90040          STR      r0,[r9,#0x40]         ;1274  ; vz2_wrk_cnt
001084  f8d91044          LDR      r1,[r9,#0x44]         ;1275  ; vz2_up_cnt
001088  f1010101          ADD      r1,r1,#1              ;1275
00108c  f8c91044          STR      r1,[r9,#0x44]         ;1275  ; vz2_up_cnt
001090  b930              CBNZ     r0,|L1.4256|
001092  f886a003          STRB     r10,[r6,#3]           ;1279
001096  210b              MOVS     r1,#0xb               ;1280
001098  f44f70ca          MOV      r0,#0x194             ;1280
00109c  f7fffffe          BL       lc640_write
                  |L1.4256|
0010a0  7828              LDRB     r0,[r5,#0]            ;1282  ; sk_stat
0010a2  b938              CBNZ     r0,|L1.4276|
0010a4  f04f000d          MOV      r0,#0xd               ;1284
0010a8  70f0              STRB     r0,[r6,#3]            ;1284
0010aa  4601              MOV      r1,r0                 ;1285
0010ac  f44f70ca          MOV      r0,#0x194             ;1285
0010b0  f7fffffe          BL       lc640_write
                  |L1.4276|
0010b4  7868              LDRB     r0,[r5,#1]            ;1287  ; sk_stat
0010b6  b938              CBNZ     r0,|L1.4296|
0010b8  f04f000e          MOV      r0,#0xe               ;1289
0010bc  70f0              STRB     r0,[r6,#3]            ;1289
0010be  4601              MOV      r1,r0                 ;1290
0010c0  f44f70ca          MOV      r0,#0x194             ;1290
0010c4  f7fffffe          BL       lc640_write
                  |L1.4296|
0010c8  487e              LDR      r0,|L1.4804|
0010ca  223c              MOVS     r2,#0x3c              ;1309
0010cc  f9b01000          LDRSH    r1,[r0,#0]            ;1293  ; out_U
0010d0  487d              LDR      r0,|L1.4808|
0010d2  f9b00000          LDRSH    r0,[r0,#0]            ;1293  ; FZ_U1
0010d6  f100031e          ADD      r3,r0,#0x1e           ;1293
0010da  4299              CMP      r1,r3                 ;1293
0010dc  da20              BGE      |L1.4384|
0010de  380a              SUBS     r0,r0,#0xa            ;1293
0010e0  4281              CMP      r1,r0                 ;1293
0010e2  dd1d              BLE      |L1.4384|
0010e4  4879              LDR      r0,|L1.4812|
0010e6  497a              LDR      r1,|L1.4816|
0010e8  f9b00000          LDRSH    r0,[r0,#0]            ;1295  ; Ib_ips_termokompensat
0010ec  f9b11000          LDRSH    r1,[r1,#0]            ;1295  ; FZ_ISW12
0010f0  fb90f0f4          SDIV     r0,r0,r4              ;1295
0010f4  4288              CMP      r0,r1                 ;1295
0010f6  da10              BGE      |L1.4378|
0010f8  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1297  ; vz2_stat_ph2_cnt
0010fc  b190              CBZ      r0,|L1.4388|
0010fe  f1a00001          SUB      r0,r0,#1              ;1299
001102  b200              SXTH     r0,r0                 ;1299
001104  f8a6007a          STRH     r0,[r6,#0x7a]         ;1299
001108  b960              CBNZ     r0,|L1.4388|
00110a  f886a003          STRB     r10,[r6,#3]           ;1302
00110e  210b              MOVS     r1,#0xb               ;1303
001110  f44f70ca          MOV      r0,#0x194             ;1303
001114  f7fffffe          BL       lc640_write
001118  e004              B        |L1.4388|
                  |L1.4378|
00111a  f8a6207a          STRH     r2,[r6,#0x7a]         ;1309
00111e  e001              B        |L1.4388|
                  |L1.4384|
001120  f8a6207a          STRH     r2,[r6,#0x7a]         ;1314
                  |L1.4388|
001124  f9b60044          LDRSH    r0,[r6,#0x44]         ;1316  ; Ibmax
001128  f8b61046          LDRH     r1,[r6,#0x46]         ;1316  ; IZMAX_
00112c  fb90f0f4          SDIV     r0,r0,r4              ;1316
001130  4288              CMP      r0,r1                 ;1316
001132  dd18              BLE      |L1.4454|
001134  f9b6202c          LDRSH    r2,[r6,#0x2c]         ;1316  ; cntrl_stat
001138  2a14              CMP      r2,#0x14              ;1316
00113a  dc14              BGT      |L1.4454|
00113c  f896202a          LDRB     r2,[r6,#0x2a]         ;1316  ; volt_region
001140  2a01              CMP      r2,#1                 ;1316
001142  d110              BNE      |L1.4454|
001144  f8b62076          LDRH     r2,[r6,#0x76]         ;1316  ; volt_region_cnt
001148  b96a              CBNZ     r2,|L1.4454|
00114a  f886702a          STRB     r7,[r6,#0x2a]         ;1318
00114e  f8a6b02c          STRH     r11,[r6,#0x2c]
;;;1320   		cntrl_stat_new=1000;
001152  f8a6b042          STRH     r11,[r6,#0x42]
;;;1321   		cntrl_stat_old=1000;
001156  e000              B        |L1.4442|
                  |L1.4440|
001158  e02e              B        |L1.4536|
                  |L1.4442|
00115a  f8a6b02e          STRH     r11,[r6,#0x2e]
;;;1322   		volt_region_cnt=110;
00115e  f04f026e          MOV      r2,#0x6e
001162  f8a62076          STRH     r2,[r6,#0x76]
                  |L1.4454|
;;;1323   		}
;;;1324   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001166  4288              CMP      r0,r1
001168  da13              BGE      |L1.4498|
00116a  f9b6002c          LDRSH    r0,[r6,#0x2c]  ; cntrl_stat
00116e  4558              CMP      r0,r11
001170  db0f              BLT      |L1.4498|
001172  f896002a          LDRB     r0,[r6,#0x2a]  ; volt_region
001176  b960              CBNZ     r0,|L1.4498|
001178  f8b60076          LDRH     r0,[r6,#0x76]  ; volt_region_cnt
00117c  b948              CBNZ     r0,|L1.4498|
;;;1325   		{
;;;1326   		volt_region=1;
00117e  f04f0001          MOV      r0,#1
001182  f886002a          STRB     r0,[r6,#0x2a]
;;;1327   		cntrl_stat=10;
001186  85b4              STRH     r4,[r6,#0x2c]
;;;1328   		cntrl_stat_new=10;
001188  f8a64042          STRH     r4,[r6,#0x42]
;;;1329   		cntrl_stat_old=10;
00118c  85f4              STRH     r4,[r6,#0x2e]
;;;1330   		volt_region_cnt=10;
00118e  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4498|
;;;1331   		}
;;;1332   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001192  f896002a          LDRB     r0,[r6,#0x2a]  ; volt_region
001196  b110              CBZ      r0,|L1.4510|
;;;1333   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001198  2801              CMP      r0,#1
00119a  d007              BEQ      |L1.4524|
00119c  e00c              B        |L1.4536|
                  |L1.4510|
00119e  2314              MOVS     r3,#0x14              ;1332
0011a0  2200              MOVS     r2,#0                 ;1332
0011a2  2164              MOVS     r1,#0x64              ;1332
0011a4  20d2              MOVS     r0,#0xd2              ;1332
0011a6  f7fffffe          BL       mess_send
0011aa  e005              B        |L1.4536|
                  |L1.4524|
0011ac  2314              MOVS     r3,#0x14
0011ae  2201              MOVS     r2,#1
0011b0  2164              MOVS     r1,#0x64
0011b2  20d2              MOVS     r0,#0xd2
0011b4  f7fffffe          BL       mess_send
                  |L1.4536|
;;;1334   	}
;;;1335   
;;;1336   if(vz2_stat==vz2sWRK2)
0011b8  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
0011ba  280b              CMP      r0,#0xb
0011bc  d171              BNE      |L1.4770|
;;;1337   	{
;;;1338   	if(vz2_stat_old!=vz2_stat)
0011be  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0011c0  280b              CMP      r0,#0xb
0011c2  d008              BEQ      |L1.4566|
;;;1339   		{
;;;1340   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
0011c4  4843              LDR      r0,|L1.4820|
0011c6  f44f6161          MOV      r1,#0xe10
0011ca  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
0011ce  fb00f001          MUL      r0,r0,r1
0011d2  f8c90040          STR      r0,[r9,#0x40]  ; vz2_wrk_cnt
                  |L1.4566|
;;;1341   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1342   		//vz2_up_cnt=0L;
;;;1343   		}
;;;1344   	vz2_wrk_cnt--;
0011d6  f8d90040          LDR      r0,[r9,#0x40]  ; vz2_wrk_cnt
0011da  f1a00001          SUB      r0,r0,#1
0011de  f8c90040          STR      r0,[r9,#0x40]  ; vz2_wrk_cnt
;;;1345   	vz2_up_cnt++;
0011e2  f8d91044          LDR      r1,[r9,#0x44]  ; vz2_up_cnt
0011e6  f1010101          ADD      r1,r1,#1
0011ea  f8c91044          STR      r1,[r9,#0x44]  ; vz2_up_cnt
;;;1346   
;;;1347   	if(vz2_wrk_cnt==0)
0011ee  b950              CBNZ     r0,|L1.4614|
;;;1348   		{
;;;1349   		vz2_stat=vz2sFINE;
0011f0  f04f0012          MOV      r0,#0x12
0011f4  70f0              STRB     r0,[r6,#3]
;;;1350   		lc640_write(EE_VZ2_STAT,vz2sFINE);
0011f6  4601              MOV      r1,r0
0011f8  f44f70ca          MOV      r0,#0x194
0011fc  f7fffffe          BL       lc640_write
;;;1351   		fz_mem_hndl(0);
001200  2000              MOVS     r0,#0
001202  f7fffffe          BL       fz_mem_hndl
                  |L1.4614|
;;;1352   		}
;;;1353   	if(sk_stat[0]==0)
001206  7828              LDRB     r0,[r5,#0]  ; sk_stat
001208  b938              CBNZ     r0,|L1.4634|
;;;1354   		{
;;;1355   		vz2_stat=vz2sERR5;
00120a  f04f0010          MOV      r0,#0x10
00120e  70f0              STRB     r0,[r6,#3]
;;;1356   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001210  4601              MOV      r1,r0
001212  f44f70ca          MOV      r0,#0x194
001216  f7fffffe          BL       lc640_write
                  |L1.4634|
;;;1357   		}
;;;1358   	if(sk_stat[1]==0)
00121a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00121c  b938              CBNZ     r0,|L1.4654|
;;;1359   		{
;;;1360   		vz2_stat=vz2sERR6;
00121e  f04f0011          MOV      r0,#0x11
001222  70f0              STRB     r0,[r6,#3]
;;;1361   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001224  4601              MOV      r1,r0
001226  f44f70ca          MOV      r0,#0x194
00122a  f7fffffe          BL       lc640_write
                  |L1.4654|
;;;1362   		}
;;;1363   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
00122e  f9b60044          LDRSH    r0,[r6,#0x44]  ; Ibmax
001232  f8b61046          LDRH     r1,[r6,#0x46]  ; IZMAX_
001236  fb90f0f4          SDIV     r0,r0,r4
00123a  4288              CMP      r0,r1
00123c  dd16              BLE      |L1.4716|
00123e  f9b6202c          LDRSH    r2,[r6,#0x2c]  ; cntrl_stat
001242  2a14              CMP      r2,#0x14
001244  dc12              BGT      |L1.4716|
001246  f896202a          LDRB     r2,[r6,#0x2a]  ; volt_region
00124a  2a01              CMP      r2,#1
00124c  d10e              BNE      |L1.4716|
00124e  f8b62076          LDRH     r2,[r6,#0x76]  ; volt_region_cnt
001252  b95a              CBNZ     r2,|L1.4716|
;;;1364   		{
;;;1365   		volt_region=0;
001254  f886702a          STRB     r7,[r6,#0x2a]
;;;1366   		cntrl_stat=1000;
001258  f8a6b02c          STRH     r11,[r6,#0x2c]
;;;1367   		cntrl_stat_new=1000;
00125c  f8a6b042          STRH     r11,[r6,#0x42]
;;;1368   		cntrl_stat_old=1000;
001260  f8a6b02e          STRH     r11,[r6,#0x2e]
;;;1369   		volt_region_cnt=110;
001264  f04f026e          MOV      r2,#0x6e
001268  f8a62076          STRH     r2,[r6,#0x76]
                  |L1.4716|
;;;1370   		}
;;;1371   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00126c  4288              CMP      r0,r1
00126e  da13              BGE      |L1.4760|
001270  f9b6002c          LDRSH    r0,[r6,#0x2c]  ; cntrl_stat
001274  4558              CMP      r0,r11
001276  db0f              BLT      |L1.4760|
001278  f896002a          LDRB     r0,[r6,#0x2a]  ; volt_region
00127c  b960              CBNZ     r0,|L1.4760|
00127e  f8b60076          LDRH     r0,[r6,#0x76]  ; volt_region_cnt
001282  b948              CBNZ     r0,|L1.4760|
;;;1372   		{
;;;1373   		volt_region=1;
001284  f04f0001          MOV      r0,#1
001288  f886002a          STRB     r0,[r6,#0x2a]
;;;1374   		cntrl_stat=10;
00128c  85b4              STRH     r4,[r6,#0x2c]
;;;1375   		cntrl_stat_new=10;
00128e  f8a64042          STRH     r4,[r6,#0x42]
;;;1376   		cntrl_stat_old=10;
001292  85f4              STRH     r4,[r6,#0x2e]
;;;1377   		volt_region_cnt=10;
001294  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4760|
;;;1378   		}
;;;1379   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001298  f896002a          LDRB     r0,[r6,#0x2a]  ; volt_region
00129c  b110              CBZ      r0,|L1.4772|
;;;1380   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
00129e  2801              CMP      r0,#1
0012a0  d01a              BEQ      |L1.4824|
                  |L1.4770|
0012a2  e01f              B        |L1.4836|
                  |L1.4772|
0012a4  2314              MOVS     r3,#0x14              ;1379
0012a6  2200              MOVS     r2,#0                 ;1379
0012a8  2164              MOVS     r1,#0x64              ;1379
0012aa  20d2              MOVS     r0,#0xd2              ;1379
0012ac  f7fffffe          BL       mess_send
0012b0  e018              B        |L1.4836|
0012b2  0000              DCW      0x0000
                  |L1.4788|
                          DCD      ||area_number.18||
                  |L1.4792|
                          DCD      speedChrgBlckStat
                  |L1.4796|
                          DCD      sk_stat
                  |L1.4800|
                          DCD      FZ_T1
                  |L1.4804|
                          DCD      out_U
                  |L1.4808|
                          DCD      FZ_U1
                  |L1.4812|
                          DCD      Ib_ips_termokompensat
                  |L1.4816|
                          DCD      FZ_ISW12
                  |L1.4820|
                          DCD      FZ_T2
                  |L1.4824|
0012d8  2314              MOVS     r3,#0x14
0012da  2201              MOVS     r2,#1
0012dc  2164              MOVS     r1,#0x64
0012de  20d2              MOVS     r0,#0xd2
0012e0  f7fffffe          BL       mess_send
                  |L1.4836|
;;;1381   	}
;;;1382   
;;;1383   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
0012e4  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
0012e6  280c              CMP      r0,#0xc
0012e8  d123              BNE      |L1.4914|
;;;1384   	{
;;;1385   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0012ea  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0012ec  280c              CMP      r0,#0xc
0012ee  d102              BNE      |L1.4854|
0012f0  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0012f4  b908              CBNZ     r0,|L1.4858|
                  |L1.4854|
;;;1386   		{
;;;1387   		vz2_stat_cnt=10;
0012f6  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.4858|
;;;1388   		}
;;;1389   	vz2_stat_cnt--;
0012fa  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0012fe  f1a00001          SUB      r0,r0,#1
001302  b200              SXTH     r0,r0
001304  f8a60078          STRH     r0,[r6,#0x78]
;;;1390   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001308  280a              CMP      r0,#0xa
00130a  d001              BEQ      |L1.4880|
00130c  2809              CMP      r0,#9
00130e  d10a              BNE      |L1.4902|
                  |L1.4880|
;;;1391   		{
;;;1392   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001310  f2af53bc          ADR      r3,|L1.3416|
001314  f2af52a8          ADR      r2,|L1.3440|
001318  f2af5194          ADR      r1,|L1.3464|
00131c  a0ff              ADR      r0,|L1.5916|
00131e  f8cd8000          STR      r8,[sp,#0]
001322  f7fffffe          BL       show_mess
                  |L1.4902|
;;;1393   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1394   					"      ВКЛЮЧЕН       ",
;;;1395   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1396   					5000);
;;;1397   		}
;;;1398   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001326  2314              MOVS     r3,#0x14
001328  2200              MOVS     r2,#0
00132a  2164              MOVS     r1,#0x64
00132c  20d2              MOVS     r0,#0xd2
00132e  f7fffffe          BL       mess_send
                  |L1.4914|
;;;1399   	}
;;;1400   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
001332  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
001334  280d              CMP      r0,#0xd
001336  d12c              BNE      |L1.5010|
;;;1401   	{
;;;1402   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001338  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
00133a  280d              CMP      r0,#0xd
00133c  d102              BNE      |L1.4932|
00133e  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001342  b908              CBNZ     r0,|L1.4936|
                  |L1.4932|
;;;1403   		{
;;;1404   		vz2_stat_cnt=10;
001344  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.4936|
;;;1405   		}
;;;1406   	vz2_stat_cnt--;
001348  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00134c  f1a00001          SUB      r0,r0,#1
001350  b200              SXTH     r0,r0
001352  f8a60078          STRH     r0,[r6,#0x78]
;;;1407   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001356  280a              CMP      r0,#0xa
001358  d001              BEQ      |L1.4958|
00135a  2809              CMP      r0,#9
00135c  d10a              BNE      |L1.4980|
                  |L1.4958|
;;;1408   		{
;;;1409   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00135e  f6af2378          ADR      r3,|L1.2280|
001362  f6af2264          ADR      r2,|L1.2304|
001366  f6af2150          ADR      r1,|L1.2328|
00136a  a0ec              ADR      r0,|L1.5916|
00136c  f8cd8000          STR      r8,[sp,#0]
001370  f7fffffe          BL       show_mess
                  |L1.4980|
;;;1410   					"    ЗАБЛОКИРОВАН    ",
;;;1411   					"     НЕИСПРАВНА     ",
;;;1412   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1413   					5000);
;;;1414   		}
;;;1415   	if(sk_stat[0]==1)
001374  7828              LDRB     r0,[r5,#0]  ; sk_stat
001376  2801              CMP      r0,#1
001378  d105              BNE      |L1.4998|
;;;1416   		{
;;;1417   		vz2_stat=vz2sWRK1;
00137a  70f4              STRB     r4,[r6,#3]
;;;1418   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
00137c  210a              MOVS     r1,#0xa
00137e  f44f70ca          MOV      r0,#0x194
001382  f7fffffe          BL       lc640_write
                  |L1.4998|
;;;1419   		}
;;;1420   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001386  2314              MOVS     r3,#0x14
001388  2200              MOVS     r2,#0
00138a  2164              MOVS     r1,#0x64
00138c  20d2              MOVS     r0,#0xd2
00138e  f7fffffe          BL       mess_send
                  |L1.5010|
;;;1421   	}
;;;1422   
;;;1423   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
001392  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
001394  280e              CMP      r0,#0xe
001396  d12b              BNE      |L1.5104|
;;;1424   	{
;;;1425   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001398  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
00139a  280e              CMP      r0,#0xe
00139c  d102              BNE      |L1.5028|
00139e  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0013a2  b908              CBNZ     r0,|L1.5032|
                  |L1.5028|
;;;1426   		{
;;;1427   		vz2_stat_cnt=10;
0013a4  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5032|
;;;1428   		}
;;;1429   	vz2_stat_cnt--;
0013a8  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0013ac  f1a00001          SUB      r0,r0,#1
0013b0  b200              SXTH     r0,r0
0013b2  f8a60078          STRH     r0,[r6,#0x78]
;;;1430   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0013b6  280a              CMP      r0,#0xa
0013b8  d001              BEQ      |L1.5054|
0013ba  2809              CMP      r0,#9
0013bc  d109              BNE      |L1.5074|
                  |L1.5054|
;;;1431   		{
;;;1432   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0013be  a3dd              ADR      r3,|L1.5940|
0013c0  f2af52f4          ADR      r2,|L1.3536|
0013c4  f2af51e0          ADR      r1,|L1.3560|
0013c8  a0d4              ADR      r0,|L1.5916|
0013ca  f8cd8000          STR      r8,[sp,#0]
0013ce  f7fffffe          BL       show_mess
                  |L1.5074|
;;;1433   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1434   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1435   					"    ТУМБЛЕРА!!!     ",
;;;1436   					5000);
;;;1437   		}
;;;1438   	if(sk_stat[1]==1)
0013d2  7868              LDRB     r0,[r5,#1]  ; sk_stat
0013d4  2801              CMP      r0,#1
0013d6  d105              BNE      |L1.5092|
;;;1439   		{
;;;1440   		vz2_stat=vz2sWRK1;
0013d8  70f4              STRB     r4,[r6,#3]
;;;1441   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0013da  210a              MOVS     r1,#0xa
0013dc  f44f70ca          MOV      r0,#0x194
0013e0  f7fffffe          BL       lc640_write
                  |L1.5092|
;;;1442   		}
;;;1443   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013e4  2314              MOVS     r3,#0x14
0013e6  2200              MOVS     r2,#0
0013e8  2164              MOVS     r1,#0x64
0013ea  20d2              MOVS     r0,#0xd2
0013ec  f7fffffe          BL       mess_send
                  |L1.5104|
;;;1444   	}
;;;1445   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
0013f0  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
0013f2  2810              CMP      r0,#0x10
0013f4  d12d              BNE      |L1.5202|
;;;1446   	{
;;;1447   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0013f6  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0013f8  2810              CMP      r0,#0x10
0013fa  d102              BNE      |L1.5122|
0013fc  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001400  b908              CBNZ     r0,|L1.5126|
                  |L1.5122|
;;;1448   		{
;;;1449   		vz2_stat_cnt=10;
001402  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5126|
;;;1450   		}
;;;1451   	vz2_stat_cnt--;
001406  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00140a  f1a00001          SUB      r0,r0,#1
00140e  b200              SXTH     r0,r0
001410  f8a60078          STRH     r0,[r6,#0x78]
;;;1452   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001414  280a              CMP      r0,#0xa
001416  d001              BEQ      |L1.5148|
001418  2809              CMP      r0,#9
00141a  d10a              BNE      |L1.5170|
                  |L1.5148|
;;;1453   		{
;;;1454   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00141c  f6af3338          ADR      r3,|L1.2280|
001420  f6af3224          ADR      r2,|L1.2304|
001424  f6af3110          ADR      r1,|L1.2328|
001428  a0bc              ADR      r0,|L1.5916|
00142a  f8cd8000          STR      r8,[sp,#0]
00142e  f7fffffe          BL       show_mess
                  |L1.5170|
;;;1455   					"    ЗАБЛОКИРОВАН    ",
;;;1456   					"     НЕИСПРАВНА     ",
;;;1457   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1458   					5000);
;;;1459   		}
;;;1460   	if(sk_stat[0]==1)
001432  7828              LDRB     r0,[r5,#0]  ; sk_stat
001434  2801              CMP      r0,#1
001436  d106              BNE      |L1.5190|
;;;1461   		{
;;;1462   		vz2_stat=vz2sWRK2;
001438  f886a003          STRB     r10,[r6,#3]
;;;1463   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00143c  210b              MOVS     r1,#0xb
00143e  f44f70ca          MOV      r0,#0x194
001442  f7fffffe          BL       lc640_write
                  |L1.5190|
;;;1464   		}
;;;1465   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001446  2314              MOVS     r3,#0x14
001448  2200              MOVS     r2,#0
00144a  2164              MOVS     r1,#0x64
00144c  20d2              MOVS     r0,#0xd2
00144e  f7fffffe          BL       mess_send
                  |L1.5202|
;;;1466   	}
;;;1467   
;;;1468   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
001452  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
001454  2811              CMP      r0,#0x11
001456  d12c              BNE      |L1.5298|
;;;1469   	{
;;;1470   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001458  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
00145a  2811              CMP      r0,#0x11
00145c  d102              BNE      |L1.5220|
00145e  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001462  b908              CBNZ     r0,|L1.5224|
                  |L1.5220|
;;;1471   		{
;;;1472   		vz2_stat_cnt=10;
001464  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5224|
;;;1473   		}
;;;1474   	vz2_stat_cnt--;
001468  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00146c  f1a00001          SUB      r0,r0,#1
001470  b200              SXTH     r0,r0
001472  f8a60078          STRH     r0,[r6,#0x78]
;;;1475   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001476  280a              CMP      r0,#0xa
001478  d001              BEQ      |L1.5246|
00147a  2809              CMP      r0,#9
00147c  d109              BNE      |L1.5266|
                  |L1.5246|
;;;1476   		{
;;;1477   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00147e  a3ad              ADR      r3,|L1.5940|
001480  f2af62b4          ADR      r2,|L1.3536|
001484  f2af61a0          ADR      r1,|L1.3560|
001488  a0a4              ADR      r0,|L1.5916|
00148a  f8cd8000          STR      r8,[sp,#0]
00148e  f7fffffe          BL       show_mess
                  |L1.5266|
;;;1478   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1479   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1480   					"    ТУМБЛЕРА!!!     ",
;;;1481   					5000);
;;;1482   		}
;;;1483   	if(sk_stat[1]==1)
001492  7868              LDRB     r0,[r5,#1]  ; sk_stat
001494  2801              CMP      r0,#1
001496  d106              BNE      |L1.5286|
;;;1484   		{
;;;1485   		vz2_stat=vz2sWRK2;
001498  f886a003          STRB     r10,[r6,#3]
;;;1486   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00149c  210b              MOVS     r1,#0xb
00149e  f44f70ca          MOV      r0,#0x194
0014a2  f7fffffe          BL       lc640_write
                  |L1.5286|
;;;1487   		}
;;;1488   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014a6  2314              MOVS     r3,#0x14
0014a8  2200              MOVS     r2,#0
0014aa  2164              MOVS     r1,#0x64
0014ac  20d2              MOVS     r0,#0xd2
0014ae  f7fffffe          BL       mess_send
                  |L1.5298|
;;;1489   	}
;;;1490   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0014b2  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
0014b4  280f              CMP      r0,#0xf
0014b6  d12e              BNE      |L1.5398|
;;;1491   	{
;;;1492   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0014b8  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0014ba  280f              CMP      r0,#0xf
0014bc  d102              BNE      |L1.5316|
0014be  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0014c2  b908              CBNZ     r0,|L1.5320|
                  |L1.5316|
;;;1493   		{
;;;1494   		vz2_stat_cnt=10;
0014c4  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5320|
;;;1495   		}
;;;1496   	vz2_stat_cnt--;
0014c8  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0014cc  f1a00001          SUB      r0,r0,#1
0014d0  b200              SXTH     r0,r0
0014d2  f8a60078          STRH     r0,[r6,#0x78]
;;;1497   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0014d6  280a              CMP      r0,#0xa
0014d8  d001              BEQ      |L1.5342|
0014da  2809              CMP      r0,#9
0014dc  d10b              BNE      |L1.5366|
                  |L1.5342|
;;;1498   		{
;;;1499   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0014de  f2af73f0          ADR      r3,|L1.3312|
0014e2  f2af72dc          ADR      r2,|L1.3336|
0014e6  f2af71c8          ADR      r1,|L1.3360|
0014ea  f2af6074          ADR      r0,|L1.3704|
0014ee  f8cd8000          STR      r8,[sp,#0]
0014f2  f7fffffe          BL       show_mess
                  |L1.5366|
;;;1500   					"      ТУМБЛЕР       ",
;;;1501   					"     ВЫСОКОГО       ",
;;;1502   					"    НАПРЯЖЕНИЯ      ",
;;;1503   					5000);
;;;1504   		}
;;;1505   	if(sk_stat[1]==0)
0014f6  7868              LDRB     r0,[r5,#1]  ; sk_stat
0014f8  b938              CBNZ     r0,|L1.5386|
;;;1506   		{
;;;1507   		vz2_stat=vz2sOFF;
0014fa  70f7              STRB     r7,[r6,#3]
;;;1508   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0014fc  2100              MOVS     r1,#0
0014fe  f44f70ca          MOV      r0,#0x194
001502  f7fffffe          BL       lc640_write
;;;1509   		vz_stop();
001506  f7fffffe          BL       vz_stop
                  |L1.5386|
;;;1510   
;;;1511   		}
;;;1512   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00150a  2314              MOVS     r3,#0x14
00150c  2200              MOVS     r2,#0
00150e  2164              MOVS     r1,#0x64
001510  20d2              MOVS     r0,#0xd2
001512  f7fffffe          BL       mess_send
                  |L1.5398|
;;;1513   	}
;;;1514   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
001516  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
;;;1515   	{
;;;1516   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1517   		{
;;;1518   		vz2_stat_cnt=10;
;;;1519   		}
;;;1520   	vz2_stat_cnt--;
;;;1521   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1522   		{
;;;1523   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
001518  f64038b8          MOV      r8,#0xbb8
00151c  2812              CMP      r0,#0x12              ;1514
00151e  d13d              BNE      |L1.5532|
001520  7930              LDRB     r0,[r6,#4]            ;1516  ; vz2_stat_old
001522  2812              CMP      r0,#0x12              ;1516
001524  d102              BNE      |L1.5420|
001526  f8b60078          LDRH     r0,[r6,#0x78]         ;1516  ; vz2_stat_cnt
00152a  b908              CBNZ     r0,|L1.5424|
                  |L1.5420|
00152c  f8a64078          STRH     r4,[r6,#0x78]         ;1518
                  |L1.5424|
001530  f8b60078          LDRH     r0,[r6,#0x78]         ;1520  ; vz2_stat_cnt
001534  f1a00001          SUB      r0,r0,#1              ;1520
001538  b200              SXTH     r0,r0                 ;1520
00153a  f8a60078          STRH     r0,[r6,#0x78]         ;1520
00153e  280a              CMP      r0,#0xa               ;1521
001540  d001              BEQ      |L1.5446|
001542  2809              CMP      r0,#9                 ;1521
001544  d10a              BNE      |L1.5468|
                  |L1.5446|
001546  f2af7330          ADR      r3,|L1.3608|
00154a  f2af721c          ADR      r2,|L1.3632|
00154e  f2af7108          ADR      r1,|L1.3656|
001552  a07e              ADR      r0,|L1.5964|
001554  f8cd8000          STR      r8,[sp,#0]
001558  f7fffffe          BL       show_mess
                  |L1.5468|
;;;1524   					"       ЗАРЯД        ",
;;;1525   					"      УСПЕШНО       ",
;;;1526   					"     ЗАВЕРШЕН       ",
;;;1527   					3000);
;;;1528   		}
;;;1529   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
00155c  f9b60078          LDRSH    r0,[r6,#0x78]  ; vz2_stat_cnt
001560  2806              CMP      r0,#6
001562  d001              BEQ      |L1.5480|
001564  2805              CMP      r0,#5
001566  d10b              BNE      |L1.5504|
                  |L1.5480|
;;;1530   		{
;;;1531   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001568  f6af037c          ADR      r3,|L1.3312|
00156c  f6af0268          ADR      r2,|L1.3336|
001570  f6af0154          ADR      r1,|L1.3360|
001574  f2af7000          ADR      r0,|L1.3704|
001578  f8cd8000          STR      r8,[sp,#0]
00157c  f7fffffe          BL       show_mess
                  |L1.5504|
;;;1532   					"      ТУМБЛЕР       ",
;;;1533   					"     ВЫСОКОГО       ",
;;;1534   					"    НАПРЯЖЕНИЯ      ",
;;;1535   					3000);
;;;1536   		}
;;;1537   	if(sk_stat[1]==0)
001580  7868              LDRB     r0,[r5,#1]  ; sk_stat
001582  b928              CBNZ     r0,|L1.5520|
;;;1538   		{
;;;1539   		vz2_stat=vz2sOFF;
001584  70f7              STRB     r7,[r6,#3]
;;;1540   		lc640_write(EE_VZ2_STAT,vz2sOFF);
001586  2100              MOVS     r1,#0
001588  f44f70ca          MOV      r0,#0x194
00158c  f7fffffe          BL       lc640_write
                  |L1.5520|
;;;1541   		}
;;;1542   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001590  2314              MOVS     r3,#0x14
001592  2200              MOVS     r2,#0
001594  2164              MOVS     r1,#0x64
001596  20d2              MOVS     r0,#0xd2
001598  f7fffffe          BL       mess_send
                  |L1.5532|
;;;1543   	}
;;;1544   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
00159c  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
00159e  2813              CMP      r0,#0x13
0015a0  d13d              BNE      |L1.5662|
;;;1545   	{
;;;1546   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0015a2  7930              LDRB     r0,[r6,#4]  ; vz2_stat_old
0015a4  2813              CMP      r0,#0x13
0015a6  d102              BNE      |L1.5550|
0015a8  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0015ac  b908              CBNZ     r0,|L1.5554|
                  |L1.5550|
;;;1547   		{
;;;1548   		vz2_stat_cnt=10;
0015ae  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5554|
;;;1549   		}
;;;1550   	vz2_stat_cnt--;
0015b2  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0015b6  f1a00001          SUB      r0,r0,#1
0015ba  b200              SXTH     r0,r0
0015bc  f8a60078          STRH     r0,[r6,#0x78]
;;;1551   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0015c0  280a              CMP      r0,#0xa
0015c2  d001              BEQ      |L1.5576|
0015c4  2809              CMP      r0,#9
0015c6  d10a              BNE      |L1.5598|
                  |L1.5576|
;;;1552   		{
;;;1553   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0015c8  f2af733c          ADR      r3,|L1.3728|
0015cc  f2af7228          ADR      r2,|L1.3752|
0015d0  f2af718c          ADR      r1,|L1.3656|
0015d4  a05d              ADR      r0,|L1.5964|
0015d6  f8cd8000          STR      r8,[sp,#0]
0015da  f7fffffe          BL       show_mess
                  |L1.5598|
;;;1554   					"       ЗАРЯД        ",
;;;1555   					"     ПРЕКРАЩЕН      ",
;;;1556   					"                    ",
;;;1557   					3000);
;;;1558   		}
;;;1559   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0015de  f9b60078          LDRSH    r0,[r6,#0x78]  ; vz2_stat_cnt
0015e2  2806              CMP      r0,#6
0015e4  d001              BEQ      |L1.5610|
0015e6  2805              CMP      r0,#5
0015e8  d10b              BNE      |L1.5634|
                  |L1.5610|
;;;1560   		{
;;;1561   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0015ea  f6af03fc          ADR      r3,|L1.3312|
0015ee  f6af02e8          ADR      r2,|L1.3336|
0015f2  f6af01d4          ADR      r1,|L1.3360|
0015f6  f2af7080          ADR      r0,|L1.3704|
0015fa  f8cd8000          STR      r8,[sp,#0]
0015fe  f7fffffe          BL       show_mess
                  |L1.5634|
;;;1562   					"      ТУМБЛЕР       ",
;;;1563   					"     ВЫСОКОГО       ",
;;;1564   					"    НАПРЯЖЕНИЯ      ",
;;;1565   					3000);
;;;1566   		}
;;;1567   	if(sk_stat[1]==0)
001602  7868              LDRB     r0,[r5,#1]  ; sk_stat
001604  b928              CBNZ     r0,|L1.5650|
;;;1568   		{
;;;1569   		vz2_stat=vz2sOFF;
001606  70f7              STRB     r7,[r6,#3]
;;;1570   		lc640_write(EE_VZ2_STAT,vz2sOFF);
001608  2100              MOVS     r1,#0
00160a  f44f70ca          MOV      r0,#0x194
00160e  f7fffffe          BL       lc640_write
                  |L1.5650|
;;;1571   		}
;;;1572   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001612  2314              MOVS     r3,#0x14
001614  2200              MOVS     r2,#0
001616  2164              MOVS     r1,#0x64
001618  20d2              MOVS     r0,#0xd2
00161a  f7fffffe          BL       mess_send
                  |L1.5662|
;;;1573   	}
;;;1574   vz2_stat_old=vz2_stat;
00161e  78f0              LDRB     r0,[r6,#3]  ; vz2_stat
001620  7130              STRB     r0,[r6,#4]
;;;1575   
;;;1576   }
001622  e8bd8ff8          POP      {r3-r11,pc}
;;;1577   
                          ENDP

                  vz2_start PROC
;;;1579   //старт уравнительног заряда
;;;1580   char vz2_start(char hour)
001626  b510              PUSH     {r4,lr}
;;;1581   {          
;;;1582   char out;
;;;1583   out=0;
001628  f04f0000          MOV      r0,#0
;;;1584   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
00162c  494d              LDR      r1,|L1.5988|
00162e  7f8a              LDRB     r2,[r1,#0x1e]  ; spc_stat
001630  2a00              CMP      r2,#0
001632  d110              BNE      |L1.5718|
001634  4a4c              LDR      r2,|L1.5992|
001636  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001638  2a01              CMP      r2,#1
00163a  d00c              BEQ      |L1.5718|
00163c  784a              LDRB     r2,[r1,#1]  ; vz1_stat
00163e  2a00              CMP      r2,#0
001640  d109              BNE      |L1.5718|
;;;1585   	{
;;;1586   	if(vz1_stat==vz1sOFF)
;;;1587   		{
;;;1588   		vz2_stat=vz2sSTEP1;
001642  f04f0001          MOV      r0,#1
001646  70c8              STRB     r0,[r1,#3]
;;;1589   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
001648  4601              MOV      r1,r0
00164a  f44f70ca          MOV      r0,#0x194
00164e  f7fffffe          BL       lc640_write
;;;1590   		out=1;
001652  f04f0001          MOV      r0,#1
                  |L1.5718|
;;;1591   		
;;;1592   		}
;;;1593   /*	spc_stat=spcVZ;
;;;1594   	__ee_spc_stat=spcVZ; 
;;;1595   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1596   	vz_cnt_h=hour;
;;;1597   	__ee_vz_cnt=hour*60;
;;;1598   	if(hour==0)__ee_vz_cnt=30;
;;;1599   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1600   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1601   	vz_cnt_h_=0;
;;;1602   	vz_cnt_s=0;
;;;1603   	vz_cnt_s_=0;
;;;1604   	
;;;1605   		*/
;;;1606   	}
;;;1607   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1608   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1609   //plazma=out;	
;;;1610   return out;
;;;1611   }
001656  bd10              POP      {r4,pc}
;;;1612   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;1613   //стоп формовочного заряда
;;;1614   void vz2_stop(void)
001658  4842              LDR      r0,|L1.5988|
;;;1615   {
;;;1616   if(vz2_stat!=vz2sOFF)
00165a  78c1              LDRB     r1,[r0,#3]  ; vz2_stat
00165c  2900              CMP      r1,#0
00165e  d006              BEQ      |L1.5742|
;;;1617   	{
;;;1618   	vz2_stat=vz2sSTOP;
001660  f04f0113          MOV      r1,#0x13
001664  70c1              STRB     r1,[r0,#3]
;;;1619   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
001666  f44f70ca          MOV      r0,#0x194
00166a  f7ffbffe          B.W      lc640_write
                  |L1.5742|
;;;1620   	}
;;;1621   }
00166e  4770              BX       lr
;;;1622   
                          ENDP

                  kb_init PROC
;;;1623   //-----------------------------------------------
;;;1624   void kb_init(void)
001670  483e              LDR      r0,|L1.5996|
;;;1625   {
;;;1626   main_kb_cnt=(TBAT*60)-60/*120*/;
001672  f06f013b          MVN      r1,#0x3b
001676  8800              LDRH     r0,[r0,#0]  ; TBAT
001678  ebc01000          RSB      r0,r0,r0,LSL #4
00167c  eb010080          ADD      r0,r1,r0,LSL #2
001680  4938              LDR      r1,|L1.5988|
001682  f8a1004c          STRH     r0,[r1,#0x4c]
;;;1627   }
001686  4770              BX       lr
;;;1628   
                          ENDP

                  kb_hndl PROC
;;;1629   //-----------------------------------------------
;;;1630   void kb_hndl(void)
001688  e92d5ff0          PUSH     {r4-r12,lr}
;;;1631   {
;;;1632   
;;;1633   static signed short ibat[2],ibat_[2];
;;;1634   #ifdef UKU_TELECORE2015
;;;1635   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0))
;;;1636   #else 
;;;1637   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
00168c  f8df80d4          LDR      r8,|L1.5988|
;;;1638   #endif
;;;1639   	{
;;;1640   	main_kb_cnt=0;
;;;1641   	
;;;1642   	kb_start[0]=0;
;;;1643   	kb_start[1]=0;
;;;1644   	kb_start_ips=0;
;;;1645   
;;;1646   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;1647   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;1648   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1649   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
001690  f8dfa0dc          LDR      r10,|L1.6000|
001694  2500              MOVS     r5,#0                 ;1637
001696  f8b8004c          LDRH     r0,[r8,#0x4c]         ;1637  ; main_kb_cnt
00169a  4e36              LDR      r6,|L1.6004|
00169c  1c40              ADDS     r0,r0,#1              ;1637
00169e  b201              SXTH     r1,r0                 ;1637
0016a0  4832              LDR      r0,|L1.5996|
0016a2  f8a8104c          STRH     r1,[r8,#0x4c]         ;1637
0016a6  f8df90d0          LDR      r9,|L1.6008|
0016aa  f9b00000          LDRSH    r0,[r0,#0]            ;1637  ; TBAT
;;;1650   #endif	
;;;1651   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;1652   	  ||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)||(sp_ch_stat!=scsOFF) 	)
;;;1653    
;;;1654   		{
;;;1655   		kb_start[0]=0;
;;;1656   		kb_start[1]=0;
;;;1657   		kb_start_ips=0;
;;;1658   		}
;;;1659   
;;;1660   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;1661   		{
;;;1662   		kb_cnt_1lev=10;
0016ae  270a              MOVS     r7,#0xa
0016b0  ebc01200          RSB      r2,r0,r0,LSL #4       ;1637
0016b4  f04f0b01          MOV      r11,#1                ;1646
0016b8  f1080452          ADD      r4,r8,#0x52           ;1642
0016bc  ebb10f82          CMP      r1,r2,LSL #2          ;1637
0016c0  db7e              BLT      |L1.6080|
0016c2  2800              CMP      r0,#0                 ;1637
0016c4  d07c              BEQ      |L1.6080|
0016c6  f8a8504c          STRH     r5,[r8,#0x4c]         ;1640
0016ca  7025              STRB     r5,[r4,#0]            ;1642
0016cc  7065              STRB     r5,[r4,#1]            ;1643
0016ce  f8885018          STRB     r5,[r8,#0x18]         ;1644
0016d2  482a              LDR      r0,|L1.6012|
0016d4  7800              LDRB     r0,[r0,#0]            ;1646  ; BAT_IS_ON
0016d6  2855              CMP      r0,#0x55              ;1646
0016d8  d111              BNE      |L1.5886|
0016da  f9b60002          LDRSH    r0,[r6,#2]            ;1646  ; bat
0016de  2850              CMP      r0,#0x50              ;1646
0016e0  dd0d              BLE      |L1.5886|
0016e2  f9b60008          LDRSH    r0,[r6,#8]            ;1646  ; bat
0016e6  f7fffffe          BL       abs
0016ea  f9b91000          LDRSH    r1,[r9,#0]            ;1646  ; IKB
0016ee  4288              CMP      r0,r1                 ;1646
0016f0  db03              BLT      |L1.5882|
0016f2  f896003d          LDRB     r0,[r6,#0x3d]         ;1646  ; bat
0016f6  07c0              LSLS     r0,r0,#31             ;1646
0016f8  d001              BEQ      |L1.5886|
                  |L1.5882|
0016fa  f884b000          STRB     r11,[r4,#0]           ;1646
                  |L1.5886|
0016fe  481f              LDR      r0,|L1.6012|
001700  7840              LDRB     r0,[r0,#1]            ;1647  ; BAT_IS_ON
001702  2855              CMP      r0,#0x55              ;1647
001704  d144              BNE      |L1.6032|
001706  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;1647  ; bat
00170a  2850              CMP      r0,#0x50              ;1647
00170c  dd40              BLE      |L1.6032|
00170e  f9b60054          LDRSH    r0,[r6,#0x54]         ;1647  ; bat
001712  f7fffffe          BL       abs
001716  f9b91000          LDRSH    r1,[r9,#0]            ;1647  ; IKB
00171a  e031              B        |L1.6016|
                  |L1.5916|
00171c  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
001720  cccec2ce
001724  d7cddbc9
001728  20c7c0  
00172b  d0dfc420          DCB      208,223,196,"  ",0
00172f  2000    
001731  00                DCB      0
001732  00                DCB      0
001733  00                DCB      0
                  |L1.5940|
001734  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
001738  d2d3ccc1
00173c  cbc5d0c0
001740  21212120
001744  20202020
001748  00      
001749  00                DCB      0
00174a  00                DCB      0
00174b  00                DCB      0
                  |L1.5964|
00174c  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
001750  d4ced0cc
001754  cec2ced7
001758  cddbc920
00175c  202020  
00175f  2000              DCB      " ",0
001761  00                DCB      0
001762  00                DCB      0
001763  00                DCB      0
                  |L1.5988|
                          DCD      ||area_number.18||
                  |L1.5992|
                          DCD      speedChrgBlckStat
                  |L1.5996|
                          DCD      TBAT
                  |L1.6000|
                          DCD      Ib_ips_termokompensat
                  |L1.6004|
                          DCD      bat
                  |L1.6008|
                          DCD      IKB
                  |L1.6012|
                          DCD      BAT_IS_ON
                  |L1.6016|
001780  4288              CMP      r0,r1                 ;1647
001782  db03              BLT      |L1.6028|
001784  f8960089          LDRB     r0,[r6,#0x89]         ;1647  ; bat
001788  07c0              LSLS     r0,r0,#31             ;1647
00178a  d001              BEQ      |L1.6032|
                  |L1.6028|
00178c  f884b001          STRB     r11,[r4,#1]           ;1647
                  |L1.6032|
001790  48ff              LDR      r0,|L1.7056|
001792  7800              LDRB     r0,[r0,#0]            ;1649  ; ips_bat_av_vzvod
001794  b970              CBNZ     r0,|L1.6068|
001796  f9ba0000          LDRSH    r0,[r10,#0]           ;1649  ; Ib_ips_termokompensat
00179a  f7fffffe          BL       abs
00179e  f9b91000          LDRSH    r1,[r9,#0]            ;1649  ; IKB
0017a2  4288              CMP      r0,r1                 ;1649
0017a4  db04              BLT      |L1.6064|
0017a6  48fb              LDR      r0,|L1.7060|
0017a8  f890003d          LDRB     r0,[r0,#0x3d]         ;1649  ; bat_ips
0017ac  07c0              LSLS     r0,r0,#31             ;1649
0017ae  d001              BEQ      |L1.6068|
                  |L1.6064|
0017b0  f888b018          STRB     r11,[r8,#0x18]        ;1649
                  |L1.6068|
0017b4  48f8              LDR      r0,|L1.7064|
0017b6  7800              LDRB     r0,[r0,#0]            ;1651  ; net_av
0017b8  b990              CBNZ     r0,|L1.6112|
0017ba  f8980019          LDRB     r0,[r8,#0x19]         ;1651  ; num_of_wrks_bps
0017be  e000              B        |L1.6082|
                  |L1.6080|
0017c0  e01e              B        |L1.6144|
                  |L1.6082|
0017c2  b168              CBZ      r0,|L1.6112|
0017c4  f898001e          LDRB     r0,[r8,#0x1e]         ;1651  ; spc_stat
0017c8  b108              CBZ      r0,|L1.6094|
0017ca  2802              CMP      r0,#2                 ;1651
0017cc  d108              BNE      |L1.6112|
                  |L1.6094|
0017ce  f8980001          LDRB     r0,[r8,#1]            ;1652  ; vz1_stat
0017d2  b928              CBNZ     r0,|L1.6112|
0017d4  f8980003          LDRB     r0,[r8,#3]            ;1652  ; vz2_stat
0017d8  b910              CBNZ     r0,|L1.6112|
0017da  48f0              LDR      r0,|L1.7068|
0017dc  7800              LDRB     r0,[r0,#0]            ;1652  ; sp_ch_stat
0017de  b118              CBZ      r0,|L1.6120|
                  |L1.6112|
0017e0  7025              STRB     r5,[r4,#0]            ;1655
0017e2  7065              STRB     r5,[r4,#1]            ;1656
0017e4  f8885018          STRB     r5,[r8,#0x18]         ;1657
                  |L1.6120|
0017e8  7820              LDRB     r0,[r4,#0]            ;1660  ; kb_start
0017ea  2801              CMP      r0,#1                 ;1660
0017ec  d01e              BEQ      |L1.6188|
0017ee  7860              LDRB     r0,[r4,#1]            ;1660  ; kb_start
0017f0  2801              CMP      r0,#1                 ;1660
0017f2  d01b              BEQ      |L1.6188|
0017f4  f8980018          LDRB     r0,[r8,#0x18]         ;1660  ; kb_start_ips
0017f8  2801              CMP      r0,#1                 ;1660
0017fa  d017              BEQ      |L1.6188|
;;;1663   		}
;;;1664   	else kb_cnt_1lev=0;
0017fc  f8a8504e          STRH     r5,[r8,#0x4e]
                  |L1.6144|
;;;1665   	}
;;;1666   
;;;1667   if(kb_cnt_1lev)
001800  4641              MOV      r1,r8
001802  f9b8004e          LDRSH    r0,[r8,#0x4e]  ; kb_cnt_1lev
;;;1668   	{
;;;1669   	kb_cnt_1lev--;
;;;1670   
;;;1671   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;1672   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;1673   
;;;1674   
;;;1675   	if(kb_cnt_1lev==5)
;;;1676   		{
;;;1677   		ibat[0]=abs(bat[0]._Ib);
001806  f8df8398          LDR      r8,|L1.7072|
00180a  2800              CMP      r0,#0                 ;1667
00180c  d07e              BEQ      |L1.6412|
00180e  f1a00001          SUB      r0,r0,#1              ;1669
001812  b200              SXTH     r0,r0                 ;1669
001814  468b              MOV      r11,r1                ;1669
001816  f8a1004e          STRH     r0,[r1,#0x4e]         ;1669
00181a  2805              CMP      r0,#5                 ;1671
00181c  dd09              BLE      |L1.6194|
00181e  230f              MOVS     r3,#0xf               ;1671
001820  221e              MOVS     r2,#0x1e              ;1671
001822  2164              MOVS     r1,#0x64              ;1671
001824  20e1              MOVS     r0,#0xe1              ;1671
001826  f7fffffe          BL       mess_send
00182a  e00a              B        |L1.6210|
                  |L1.6188|
00182c  f8a8704e          STRH     r7,[r8,#0x4e]         ;1662
001830  e7e6              B        |L1.6144|
                  |L1.6194|
001832  2800              CMP      r0,#0                 ;1672
001834  dd05              BLE      |L1.6210|
001836  230f              MOVS     r3,#0xf               ;1672
001838  221e              MOVS     r2,#0x1e              ;1672
00183a  2169              MOVS     r1,#0x69              ;1672
00183c  20e1              MOVS     r0,#0xe1              ;1672
00183e  f7fffffe          BL       mess_send
                  |L1.6210|
001842  f8bb004e          LDRH     r0,[r11,#0x4e]        ;1675  ; kb_cnt_1lev
001846  2805              CMP      r0,#5                 ;1675
001848  d111              BNE      |L1.6254|
00184a  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00184e  f7fffffe          BL       abs
001852  f8a80000          STRH     r0,[r8,#0]
;;;1678   		ibat[1]=abs(bat[1]._Ib);
001856  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
00185a  f7fffffe          BL       abs
00185e  f8a80002          STRH     r0,[r8,#2]
;;;1679   		ibat_ips=abs(Ib_ips_termokompensat);
001862  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
001866  f7fffffe          BL       abs
00186a  f8ab0054          STRH     r0,[r11,#0x54]
                  |L1.6254|
;;;1680   		}
;;;1681   	
;;;1682   	if(kb_cnt_1lev==0)
00186e  48cc              LDR      r0,|L1.7072|
001870  3890              SUBS     r0,r0,#0x90
001872  f8b0004e          LDRH     r0,[r0,#0x4e]  ; kb_cnt_1lev
001876  2800              CMP      r0,#0
001878  d158              BNE      |L1.6444|
;;;1683   		{
;;;1684   		ibat_[0]=abs(bat[0]._Ib);
00187a  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00187e  f7fffffe          BL       abs
001882  f8dfb31c          LDR      r11,|L1.7072|
001886  f10b0b04          ADD      r11,r11,#4
00188a  f8ab0000          STRH     r0,[r11,#0]
;;;1685   		ibat_[1]=abs(bat[1]._Ib);
00188e  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
001892  f7fffffe          BL       abs
001896  f8ab0002          STRH     r0,[r11,#2]
;;;1686   		ibat_ips_=abs(Ib_ips_termokompensat);
00189a  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00189e  f7fffffe          BL       abs
0018a2  f1ab0a94          SUB      r10,r11,#0x94
0018a6  f8aa0056          STRH     r0,[r10,#0x56]
;;;1687   
;;;1688   		kb_cnt_2lev=0;
0018aa  f8aa5050          STRH     r5,[r10,#0x50]
;;;1689   
;;;1690   
;;;1691   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0018ae  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0018b2  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0018b6  4408              ADD      r0,r0,r1
0018b8  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0018bc  4288              CMP      r0,r1
0018be  da02              BGE      |L1.6342|
0018c0  7820              LDRB     r0,[r4,#0]  ; kb_start
0018c2  2801              CMP      r0,#1
0018c4  d034              BEQ      |L1.6448|
                  |L1.6342|
;;;1692   			{
;;;1693   			kb_cnt_2lev=10;  
;;;1694   			}
;;;1695   		else if(bat[0]._Ub>200)
0018c6  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0018ca  28c8              CMP      r0,#0xc8
0018cc  dd04              BLE      |L1.6360|
;;;1696   			{
;;;1697   			kb_start[0]=0;
0018ce  7025              STRB     r5,[r4,#0]
;;;1698   			avar_bat_hndl(0,0);
0018d0  2100              MOVS     r1,#0
0018d2  4608              MOV      r0,r1
0018d4  f7fffffe          BL       avar_bat_hndl
                  |L1.6360|
;;;1699   			}
;;;1700   		
;;;1701   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0018d8  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0018dc  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0018e0  4408              ADD      r0,r0,r1
0018e2  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0018e6  4288              CMP      r0,r1
0018e8  da02              BGE      |L1.6384|
0018ea  7860              LDRB     r0,[r4,#1]  ; kb_start
0018ec  2801              CMP      r0,#1
0018ee  d022              BEQ      |L1.6454|
                  |L1.6384|
;;;1702   			{
;;;1703   			kb_cnt_2lev=10;     
;;;1704   			}
;;;1705   		else  if(bat[1]._Ub>200)
0018f0  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
0018f4  28c8              CMP      r0,#0xc8
0018f6  dd04              BLE      |L1.6402|
;;;1706   			{
;;;1707   			kb_start[1]=0;
0018f8  7065              STRB     r5,[r4,#1]
;;;1708   			avar_bat_hndl(1,0);
0018fa  2100              MOVS     r1,#0
0018fc  2001              MOVS     r0,#1
0018fe  f7fffffe          BL       avar_bat_hndl
                  |L1.6402|
;;;1709   			}
;;;1710   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1711   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
001902  f9ba0054          LDRSH    r0,[r10,#0x54]  ; ibat_ips
001906  f9ba1056          LDRSH    r1,[r10,#0x56]  ; ibat_ips_
00190a  e000              B        |L1.6414|
                  |L1.6412|
00190c  e01c              B        |L1.6472|
                  |L1.6414|
00190e  4408              ADD      r0,r0,r1
001910  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
001914  4288              CMP      r0,r1
001916  da09              BGE      |L1.6444|
001918  f89a0018          LDRB     r0,[r10,#0x18]  ; kb_start_ips
00191c  2801              CMP      r0,#1
00191e  d105              BNE      |L1.6444|
;;;1712   			{
;;;1713   			if(KB_ALGORITM==1)
001920  48a0              LDR      r0,|L1.7076|
001922  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
001924  2801              CMP      r0,#1
001926  d009              BEQ      |L1.6460|
;;;1714   				{
;;;1715   				avar_bat_ips_hndl(1);
;;;1716   				kb_start_ips=0;
;;;1717   				}
;;;1718   			else
;;;1719   				{
;;;1720   				kb_cnt_2lev=10;     
001928  f8aa7050          STRH     r7,[r10,#0x50]
                  |L1.6444|
;;;1721   				}
;;;1722   			}
;;;1723   #endif
;;;1724   		}	
;;;1725   
;;;1726   
;;;1727   	}
;;;1728   else if(kb_cnt_2lev)
;;;1729   	{
;;;1730   	kb_cnt_2lev--;
;;;1731   
;;;1732   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;1733   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;1734   
;;;1735   
;;;1736   	if(kb_cnt_2lev==5)
;;;1737   		{
;;;1738   		ibat[0]=abs(bat[0]._Ib);
;;;1739   		ibat[1]=abs(bat[1]._Ib);
;;;1740   		ibat_ips=abs(Ib_ips_termokompensat);
;;;1741   		}
;;;1742   	
;;;1743   	if(kb_cnt_2lev==0)
;;;1744   		{
;;;1745   		ibat_[0]=abs(bat[0]._Ib);
;;;1746   		ibat_[1]=abs(bat[1]._Ib);
;;;1747   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;1748   
;;;1749   		kb_full_ver=0;
;;;1750   
;;;1751   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;1752   			{
;;;1753   			kb_full_ver=1;  
;;;1754   			}
;;;1755   		else if(bat[0]._Ub>200)			
;;;1756   			{
;;;1757   			kb_start[0]=0;
;;;1758   			avar_bat_hndl(0,0);
;;;1759   			}
;;;1760   
;;;1761   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;1762   			{
;;;1763   			kb_full_ver=1;     
;;;1764   			}
;;;1765   		else	if(bat[1]._Ub>200)		
;;;1766   			{
;;;1767   			kb_start[1]=0;
;;;1768   			avar_bat_hndl(1,0);
;;;1769   			}
;;;1770   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1771   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;1772   			{
;;;1773   			if(KB_ALGORITM==2)
;;;1774   				{
;;;1775   				avar_bat_ips_hndl(1);
;;;1776   				kb_start_ips=0;
;;;1777   				}
;;;1778   			else
;;;1779   				{
;;;1780   				kb_full_ver=1;     
;;;1781   				}
;;;1782   			}
;;;1783   #endif
;;;1784   		}	
;;;1785   	}
;;;1786   
;;;1787   else if(kb_full_ver)
;;;1788   	{
;;;1789   	
;;;1790   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;1791   
;;;1792   	if( abs(bat[0]._Ib) > IKB ) 
;;;1793   		{
;;;1794   		if(kb_start[0]==1)
;;;1795   			{
;;;1796   			kb_start[0]=0;
;;;1797   			avar_bat_hndl(0,0);
;;;1798   			}
;;;1799   		}
;;;1800   
;;;1801   	if( abs(bat[1]._Ib) > IKB ) 
;;;1802   		{
;;;1803   		if(kb_start[1]==1)
;;;1804   			{
;;;1805   			kb_start[1]=0;
;;;1806   			avar_bat_hndl(1,0);
;;;1807   			}
;;;1808   		}
;;;1809   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1810   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;1811   		{
;;;1812   		if(kb_start_ips==1)
;;;1813   			{
;;;1814   			kb_start_ips=0;
;;;1815   			avar_bat_ips_hndl(0);
;;;1816   			}
;;;1817   		}
;;;1818   #endif
;;;1819   
;;;1820   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;1821   		{
;;;1822   		kb_full_ver=0;
;;;1823   		}
;;;1824   
;;;1825   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;1826   		{
;;;1827   		kb_full_ver=0;
;;;1828   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;1829   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;1830   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1831   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;1832   #endif
;;;1833   		}
;;;1834   	}
;;;1835   
;;;1836   }
00192c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.6448|
001930  f8aa7050          STRH     r7,[r10,#0x50]        ;1693
001934  e7d0              B        |L1.6360|
                  |L1.6454|
001936  f8aa7050          STRH     r7,[r10,#0x50]        ;1703
00193a  e7e2              B        |L1.6402|
                  |L1.6460|
00193c  2001              MOVS     r0,#1                 ;1715
00193e  f7fffffe          BL       avar_bat_ips_hndl
001942  f88a5018          STRB     r5,[r10,#0x18]        ;1716
                  |L1.6470|
001946  e7f1              B        |L1.6444|
                  |L1.6472|
001948  f9b10050          LDRSH    r0,[r1,#0x50]         ;1728  ; kb_cnt_2lev
00194c  b3f0              CBZ      r0,|L1.6604|
00194e  f1a00001          SUB      r0,r0,#1              ;1730
001952  b200              SXTH     r0,r0                 ;1730
001954  460f              MOV      r7,r1                 ;1730
001956  f8a10050          STRH     r0,[r1,#0x50]         ;1730
00195a  2805              CMP      r0,#5                 ;1732
00195c  dd06              BLE      |L1.6508|
00195e  230f              MOVS     r3,#0xf               ;1732
001960  22c8              MOVS     r2,#0xc8              ;1732
001962  2164              MOVS     r1,#0x64              ;1732
001964  20e1              MOVS     r0,#0xe1              ;1732
001966  f7fffffe          BL       mess_send
00196a  e007              B        |L1.6524|
                  |L1.6508|
00196c  2800              CMP      r0,#0                 ;1733
00196e  dd05              BLE      |L1.6524|
001970  230f              MOVS     r3,#0xf               ;1733
001972  22c8              MOVS     r2,#0xc8              ;1733
001974  2169              MOVS     r1,#0x69              ;1733
001976  20e1              MOVS     r0,#0xe1              ;1733
001978  f7fffffe          BL       mess_send
                  |L1.6524|
00197c  f8b70050          LDRH     r0,[r7,#0x50]         ;1736  ; kb_cnt_2lev
001980  2805              CMP      r0,#5                 ;1736
001982  d111              BNE      |L1.6568|
001984  f9b60008          LDRSH    r0,[r6,#8]            ;1738  ; bat
001988  f7fffffe          BL       abs
00198c  f8a80000          STRH     r0,[r8,#0]            ;1738
001990  f9b60054          LDRSH    r0,[r6,#0x54]         ;1739  ; bat
001994  f7fffffe          BL       abs
001998  f8a80002          STRH     r0,[r8,#2]            ;1739
00199c  f9ba0000          LDRSH    r0,[r10,#0]           ;1740  ; Ib_ips_termokompensat
0019a0  f7fffffe          BL       abs
0019a4  f8a70054          STRH     r0,[r7,#0x54]         ;1740
                  |L1.6568|
0019a8  487d              LDR      r0,|L1.7072|
0019aa  3890              SUBS     r0,r0,#0x90           ;1743
0019ac  f8b00050          LDRH     r0,[r0,#0x50]         ;1743  ; kb_cnt_2lev
0019b0  2800              CMP      r0,#0                 ;1743
                  |L1.6578|
0019b2  d1bb              BNE      |L1.6444|
0019b4  f9b60008          LDRSH    r0,[r6,#8]            ;1745  ; bat
0019b8  f7fffffe          BL       abs
0019bc  4f78              LDR      r7,|L1.7072|
0019be  1d3f              ADDS     r7,r7,#4              ;1745
0019c0  8038              STRH     r0,[r7,#0]            ;1745
0019c2  f9b60054          LDRSH    r0,[r6,#0x54]         ;1746  ; bat
0019c6  f7fffffe          BL       abs
0019ca  e000              B        |L1.6606|
                  |L1.6604|
0019cc  e055              B        |L1.6778|
                  |L1.6606|
0019ce  8078              STRH     r0,[r7,#2]            ;1746
0019d0  f9ba0000          LDRSH    r0,[r10,#0]           ;1747  ; Ib_ips_termokompensat
0019d4  f7fffffe          BL       abs
0019d8  f1a70a94          SUB      r10,r7,#0x94          ;1747
0019dc  f8aa0056          STRH     r0,[r10,#0x56]        ;1747
0019e0  f88a5017          STRB     r5,[r10,#0x17]        ;1749
0019e4  f9b80000          LDRSH    r0,[r8,#0]            ;1751  ; ibat
0019e8  f9b71000          LDRSH    r1,[r7,#0]            ;1751  ; ibat_
0019ec  4408              ADD      r0,r0,r1              ;1751
0019ee  f9b91000          LDRSH    r1,[r9,#0]            ;1751  ; IKB
0019f2  4288              CMP      r0,r1                 ;1751
0019f4  da02              BGE      |L1.6652|
0019f6  7820              LDRB     r0,[r4,#0]            ;1751  ; kb_start
0019f8  2801              CMP      r0,#1                 ;1751
0019fa  d032              BEQ      |L1.6754|
                  |L1.6652|
0019fc  f9b60002          LDRSH    r0,[r6,#2]            ;1755  ; bat
001a00  28c8              CMP      r0,#0xc8              ;1755
001a02  dd04              BLE      |L1.6670|
001a04  7025              STRB     r5,[r4,#0]            ;1757
001a06  2100              MOVS     r1,#0                 ;1758
001a08  4608              MOV      r0,r1                 ;1758
001a0a  f7fffffe          BL       avar_bat_hndl
                  |L1.6670|
001a0e  f9b80002          LDRSH    r0,[r8,#2]            ;1761  ; ibat
001a12  f9b71002          LDRSH    r1,[r7,#2]            ;1761  ; ibat_
001a16  4408              ADD      r0,r0,r1              ;1761
001a18  f9b91000          LDRSH    r1,[r9,#0]            ;1761  ; IKB
001a1c  4288              CMP      r0,r1                 ;1761
001a1e  da02              BGE      |L1.6694|
001a20  7860              LDRB     r0,[r4,#1]            ;1761  ; kb_start
001a22  2801              CMP      r0,#1                 ;1761
001a24  d020              BEQ      |L1.6760|
                  |L1.6694|
001a26  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;1765  ; bat
001a2a  28c8              CMP      r0,#0xc8              ;1765
001a2c  dd04              BLE      |L1.6712|
001a2e  7065              STRB     r5,[r4,#1]            ;1767
001a30  2100              MOVS     r1,#0                 ;1768
001a32  2001              MOVS     r0,#1                 ;1768
001a34  f7fffffe          BL       avar_bat_hndl
                  |L1.6712|
001a38  f9ba0054          LDRSH    r0,[r10,#0x54]        ;1771  ; ibat_ips
001a3c  f9ba1056          LDRSH    r1,[r10,#0x56]        ;1771  ; ibat_ips_
001a40  4408              ADD      r0,r0,r1              ;1771
001a42  f9b91000          LDRSH    r1,[r9,#0]            ;1771  ; IKB
001a46  4288              CMP      r0,r1                 ;1771
001a48  f6bfaf7d          BGE      |L1.6470|
001a4c  f89a0018          LDRB     r0,[r10,#0x18]        ;1771  ; kb_start_ips
001a50  2801              CMP      r0,#1                 ;1771
001a52  d1ae              BNE      |L1.6578|
001a54  4853              LDR      r0,|L1.7076|
001a56  8800              LDRH     r0,[r0,#0]            ;1773  ; KB_ALGORITM
001a58  2802              CMP      r0,#2                 ;1773
001a5a  d008              BEQ      |L1.6766|
001a5c  f88ab017          STRB     r11,[r10,#0x17]       ;1780
                  |L1.6752|
001a60  e764              B        |L1.6444|
                  |L1.6754|
001a62  f88ab017          STRB     r11,[r10,#0x17]       ;1753
001a66  e7d2              B        |L1.6670|
                  |L1.6760|
001a68  f88ab017          STRB     r11,[r10,#0x17]       ;1763
001a6c  e7e4              B        |L1.6712|
                  |L1.6766|
001a6e  2001              MOVS     r0,#1                 ;1775
001a70  f7fffffe          BL       avar_bat_ips_hndl
001a74  f88a5018          STRB     r5,[r10,#0x18]        ;1776
001a78  e758              B        |L1.6444|
                  |L1.6778|
001a7a  7dc8              LDRB     r0,[r1,#0x17]         ;1787  ; kb_full_ver
001a7c  4688              MOV      r8,r1                 ;1787
001a7e  2800              CMP      r0,#0                 ;1787
001a80  d0ee              BEQ      |L1.6752|
001a82  230f              MOVS     r3,#0xf               ;1790
001a84  2200              MOVS     r2,#0                 ;1790
001a86  216e              MOVS     r1,#0x6e              ;1790
001a88  20e1              MOVS     r0,#0xe1              ;1790
001a8a  f7fffffe          BL       mess_send
001a8e  f9b60008          LDRSH    r0,[r6,#8]            ;1792  ; bat
001a92  f7fffffe          BL       abs
001a96  f9b91000          LDRSH    r1,[r9,#0]            ;1792  ; IKB
001a9a  4288              CMP      r0,r1                 ;1792
001a9c  dd07              BLE      |L1.6830|
001a9e  7820              LDRB     r0,[r4,#0]            ;1794  ; kb_start
001aa0  2801              CMP      r0,#1                 ;1794
001aa2  d104              BNE      |L1.6830|
001aa4  7025              STRB     r5,[r4,#0]            ;1796
001aa6  2100              MOVS     r1,#0                 ;1797
001aa8  4608              MOV      r0,r1                 ;1797
001aaa  f7fffffe          BL       avar_bat_hndl
                  |L1.6830|
001aae  f9b60054          LDRSH    r0,[r6,#0x54]         ;1801  ; bat
001ab2  f7fffffe          BL       abs
001ab6  f9b91000          LDRSH    r1,[r9,#0]            ;1801  ; IKB
001aba  4288              CMP      r0,r1                 ;1801
001abc  dd06              BLE      |L1.6860|
001abe  7860              LDRB     r0,[r4,#1]            ;1803  ; kb_start
001ac0  2801              CMP      r0,#1                 ;1803
001ac2  d103              BNE      |L1.6860|
001ac4  7065              STRB     r5,[r4,#1]            ;1805
001ac6  2100              MOVS     r1,#0                 ;1806
001ac8  f7fffffe          BL       avar_bat_hndl
                  |L1.6860|
001acc  f9ba0000          LDRSH    r0,[r10,#0]           ;1810  ; Ib_ips_termokompensat
001ad0  f7fffffe          BL       abs
001ad4  f9b91000          LDRSH    r1,[r9,#0]            ;1810  ; IKB
001ad8  4288              CMP      r0,r1                 ;1810
001ada  dd08              BLE      |L1.6894|
001adc  f8980018          LDRB     r0,[r8,#0x18]         ;1812  ; kb_start_ips
001ae0  2801              CMP      r0,#1                 ;1812
001ae2  d104              BNE      |L1.6894|
001ae4  f8885018          STRB     r5,[r8,#0x18]         ;1814
001ae8  2000              MOVS     r0,#0                 ;1815
001aea  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.6894|
001aee  7820              LDRB     r0,[r4,#0]            ;1820  ; kb_start
001af0  b930              CBNZ     r0,|L1.6912|
001af2  7860              LDRB     r0,[r4,#1]            ;1820  ; kb_start
001af4  b920              CBNZ     r0,|L1.6912|
001af6  f8980018          LDRB     r0,[r8,#0x18]         ;1820  ; kb_start_ips
001afa  b908              CBNZ     r0,|L1.6912|
001afc  f8885017          STRB     r5,[r8,#0x17]         ;1822
                  |L1.6912|
001b00  20e6              MOVS     r0,#0xe6              ;1825
001b02  f7fffffe          BL       mess_find
001b06  b118              CBZ      r0,|L1.6928|
001b08  4827              LDR      r0,|L1.7080|
001b0a  6800              LDR      r0,[r0,#0]            ;1825  ; mess_data
001b0c  28e7              CMP      r0,#0xe7              ;1825
001b0e  d00a              BEQ      |L1.6950|
                  |L1.6928|
001b10  4826              LDR      r0,|L1.7084|
001b12  4927              LDR      r1,|L1.7088|
001b14  f9b00000          LDRSH    r0,[r0,#0]            ;1825  ; USIGN
001b18  f9b11000          LDRSH    r1,[r1,#0]            ;1825  ; load_U
001b1c  eb000080          ADD      r0,r0,r0,LSL #2       ;1825
001b20  ebb10f40          CMP      r1,r0,LSL #1          ;1825
                  |L1.6948|
001b24  da9c              BGE      |L1.6752|
                  |L1.6950|
001b26  f8885017          STRB     r5,[r8,#0x17]         ;1827
001b2a  7820              LDRB     r0,[r4,#0]            ;1828  ; kb_start
001b2c  4d21              LDR      r5,|L1.7092|
001b2e  2801              CMP      r0,#1                 ;1828
001b30  d10f              BNE      |L1.6994|
001b32  f9b90000          LDRSH    r0,[r9,#0]            ;1828  ; IKB
001b36  0040              LSLS     r0,r0,#1              ;1828
001b38  fb90f1f7          SDIV     r1,r0,r7              ;1828
001b3c  f9b50000          LDRSH    r0,[r5,#0]            ;1828  ; load_I
001b40  4281              CMP      r1,r0                 ;1828
001b42  da06              BGE      |L1.6994|
001b44  f896003d          LDRB     r0,[r6,#0x3d]         ;1828  ; bat
001b48  07c0              LSLS     r0,r0,#31             ;1828
001b4a  d102              BNE      |L1.6994|
001b4c  2101              MOVS     r1,#1                 ;1828
001b4e  f7fffffe          BL       avar_bat_hndl
                  |L1.6994|
001b52  7860              LDRB     r0,[r4,#1]            ;1829  ; kb_start
001b54  2801              CMP      r0,#1                 ;1829
001b56  d110              BNE      |L1.7034|
001b58  f9b90000          LDRSH    r0,[r9,#0]            ;1829  ; IKB
001b5c  f9b51000          LDRSH    r1,[r5,#0]            ;1829  ; load_I
001b60  0040              LSLS     r0,r0,#1              ;1829
001b62  fb90f0f7          SDIV     r0,r0,r7              ;1829
001b66  4288              CMP      r0,r1                 ;1829
001b68  da07              BGE      |L1.7034|
001b6a  f8960089          LDRB     r0,[r6,#0x89]         ;1829  ; bat
001b6e  07c0              LSLS     r0,r0,#31             ;1829
001b70  d103              BNE      |L1.7034|
001b72  2101              MOVS     r1,#1                 ;1829
001b74  4608              MOV      r0,r1                 ;1829
001b76  f7fffffe          BL       avar_bat_hndl
                  |L1.7034|
001b7a  f8980018          LDRB     r0,[r8,#0x18]         ;1831  ; kb_start_ips
001b7e  2801              CMP      r0,#1                 ;1831
                  |L1.7040|
001b80  f47faee1          BNE      |L1.6470|
001b84  f9b90000          LDRSH    r0,[r9,#0]            ;1831  ; IKB
001b88  0040              LSLS     r0,r0,#1              ;1831
001b8a  fb90f0f7          SDIV     r0,r0,r7              ;1831
001b8e  e013              B        |L1.7096|
                  |L1.7056|
                          DCD      ips_bat_av_vzvod
                  |L1.7060|
                          DCD      bat_ips
                  |L1.7064|
                          DCD      net_av
                  |L1.7068|
                          DCD      sp_ch_stat
                  |L1.7072|
                          DCD      ||area_number.18||+0x90
                  |L1.7076|
                          DCD      KB_ALGORITM
                  |L1.7080|
                          DCD      mess_data
                  |L1.7084|
                          DCD      USIGN
                  |L1.7088|
                          DCD      load_U
                  |L1.7092|
                          DCD      load_I
                  |L1.7096|
001bb8  f9b51000          LDRSH    r1,[r5,#0]            ;1831  ; load_I
001bbc  4288              CMP      r0,r1                 ;1831
001bbe  dab1              BGE      |L1.6948|
001bc0  48ff              LDR      r0,|L1.8128|
001bc2  f890003d          LDRB     r0,[r0,#0x3d]         ;1831  ; bat_ips
001bc6  07c0              LSLS     r0,r0,#31             ;1831
001bc8  d1da              BNE      |L1.7040|
001bca  e8bd5ff0          POP      {r4-r12,lr}           ;1831
001bce  2001              MOVS     r0,#1                 ;1831
001bd0  f7ffbffe          B.W      avar_bat_ips_hndl
;;;1837   
                          ENDP

                  samokalibr_init PROC
;;;1841   //-----------------------------------------------
;;;1842   void samokalibr_init(void)
001bd4  49fb              LDR      r1,|L1.8132|
;;;1843   {
;;;1844   samokalibr_cnt=1785;
001bd6  f24060f9          MOV      r0,#0x6f9
001bda  f8a1004a          STRH     r0,[r1,#0x4a]
;;;1845   }
001bde  4770              BX       lr
;;;1846   //-----------------------------------------------
                          ENDP

                  samokalibr_hndl PROC
;;;1847   void samokalibr_hndl(void)
001be0  4770              BX       lr
;;;1848   {
;;;1849   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;1850   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;1851   
;;;1852   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;1853   	{
;;;1854   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;1855   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;1856   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;1857   	} 
;;;1858   
;;;1859   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;1860   	{
;;;1861   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;1862   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;1863   	
;;;1864   	}
;;;1865   #endif	 	
;;;1866   }
;;;1867   
                          ENDP

                  ubat_old_drv PROC
;;;1870   //-----------------------------------------------
;;;1871   void ubat_old_drv(void)
001be2  b510              PUSH     {r4,lr}
;;;1872   {        
;;;1873   bat_u_old_cnt++;
001be4  4cf8              LDR      r4,|L1.8136|
001be6  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
001be8  f1000001          ADD      r0,r0,#1
001bec  8020              STRH     r0,[r4,#0]
;;;1874   gran_ring(&bat_u_old_cnt,0,8);
001bee  f04f0208          MOV      r2,#8
001bf2  f04f0100          MOV      r1,#0
001bf6  4620              MOV      r0,r4
001bf8  f7fffffe          BL       gran_ring
;;;1875   
;;;1876   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
001bfc  49f3              LDR      r1,|L1.8140|
001bfe  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
001c02  eb010040          ADD      r0,r1,r0,LSL #1
001c06  884a              LDRH     r2,[r1,#2]  ; bat
001c08  8402              STRH     r2,[r0,#0x20]
;;;1877   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
001c0a  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
001c0e  f8a0106c          STRH     r1,[r0,#0x6c]
;;;1878   }
001c12  bd10              POP      {r4,pc}
;;;1879   
                          ENDP

                  unet_drv PROC
;;;1880   //-----------------------------------------------
;;;1881   void unet_drv(void)
001c14  b570              PUSH     {r4-r6,lr}
;;;1882   {
;;;1883   if(net_U<UMN)
001c16  4dee              LDR      r5,|L1.8144|
001c18  48ee              LDR      r0,|L1.8148|
;;;1884   	{
;;;1885   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
001c1a  4aef              LDR      r2,|L1.8152|
001c1c  f9b51000          LDRSH    r1,[r5,#0]            ;1883  ; net_U
001c20  f9b03000          LDRSH    r3,[r0,#0]            ;1883  ; UMN
001c24  f9920000          LDRSB    r0,[r2,#0]
001c28  4299              CMP      r1,r3                 ;1883
001c2a  da1f              BGE      |L1.7276|
;;;1886   		{
;;;1887   		unet_drv_cnt++;
;;;1888   		if(unet_drv_cnt>=10)
;;;1889   			{
;;;1890   			net_Ustore=net_U;
001c2c  4ceb              LDR      r4,|L1.8156|
001c2e  280a              CMP      r0,#0xa               ;1885
001c30  da0f              BGE      |L1.7250|
001c32  4beb              LDR      r3,|L1.8160|
001c34  f9b33000          LDRSH    r3,[r3,#0]            ;1885  ; main_1Hz_cnt
001c38  2b0f              CMP      r3,#0xf               ;1885
001c3a  dd0a              BLE      |L1.7250|
001c3c  f1000001          ADD      r0,r0,#1              ;1887
001c40  b240              SXTB     r0,r0                 ;1887
001c42  7010              STRB     r0,[r2,#0]            ;1887
001c44  280a              CMP      r0,#0xa               ;1888
001c46  db09              BLT      |L1.7260|
001c48  8021              STRH     r1,[r4,#0]
;;;1891   		 	avar_unet_hndl(1);
001c4a  2001              MOVS     r0,#1
001c4c  f7fffffe          BL       avar_unet_hndl
001c50  e004              B        |L1.7260|
                  |L1.7250|
;;;1892   			
;;;1893   			}
;;;1894   		}
;;;1895   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
001c52  280a              CMP      r0,#0xa
001c54  db02              BLT      |L1.7260|
001c56  f04f000a          MOV      r0,#0xa
001c5a  7010              STRB     r0,[r2,#0]
                  |L1.7260|
;;;1896   
;;;1897   	if(net_U<net_Ustore) net_Ustore=net_U;	
001c5c  f9b50000          LDRSH    r0,[r5,#0]  ; net_U
001c60  f9b41000          LDRSH    r1,[r4,#0]  ; net_Ustore
001c64  4288              CMP      r0,r1
001c66  da00              BGE      |L1.7274|
001c68  8020              STRH     r0,[r4,#0]
                  |L1.7274|
;;;1898   	}
;;;1899   
;;;1900   else if(net_U>UMN)
;;;1901   	{                 
;;;1902   	if(unet_drv_cnt)
;;;1903   		{
;;;1904   		unet_drv_cnt--;
;;;1905   		if(unet_drv_cnt<=0)
;;;1906   			{
;;;1907   			avar_unet_hndl(0);
;;;1908   			}
;;;1909   		}
;;;1910   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;1911   	
;;;1912   	}
;;;1913   
;;;1914   }
001c6a  bd70              POP      {r4-r6,pc}
                  |L1.7276|
001c6c  ddfd              BLE      |L1.7274|
001c6e  2800              CMP      r0,#0                 ;1902
001c70  d0fb              BEQ      |L1.7274|
001c72  f1a00001          SUB      r0,r0,#1              ;1904
001c76  b240              SXTB     r0,r0                 ;1904
001c78  7010              STRB     r0,[r2,#0]            ;1904
001c7a  2800              CMP      r0,#0                 ;1905
001c7c  dcf5              BGT      |L1.7274|
001c7e  e8bd4070          POP      {r4-r6,lr}            ;1907
001c82  2000              MOVS     r0,#0                 ;1907
001c84  f7ffbffe          B.W      avar_unet_hndl
;;;1915   
                          ENDP

                  matemat PROC
;;;1916   //-----------------------------------------------
;;;1917   void matemat(void)
001c88  e92d4ff0          PUSH     {r4-r11,lr}
;;;1918   {
001c8c  b087              SUB      sp,sp,#0x1c
;;;1919   //signed short temp_SS;
;;;1920   signed long temp_SL/*,temp_SL_*/;
;;;1921   char /*temp,*/i;
;;;1922   //signed short temp_SS;
;;;1923   
;;;1924   #ifdef UKU_MGTS
;;;1925   //напряжение сети
;;;1926   temp_SL=(signed long)net_buff_;
;;;1927   temp_SL*=Kunet;
;;;1928   temp_SL/=110000L;
;;;1929   net_U=(signed short)temp_SL;
;;;1930   #endif
;;;1931   
;;;1932   #ifdef UKU_RSTKM
;;;1933   //напряжение сети
;;;1934   temp_SL=(signed long)net_buff_;
;;;1935   temp_SL*=Kunet;
;;;1936   temp_SL/=110000L;
;;;1937   net_U=(signed short)temp_SL;
;;;1938   #endif
;;;1939   
;;;1940   #ifdef UKU_3U
;;;1941   //напряжение сети
;;;1942   temp_SL=(signed long)net_buff_;
;;;1943   temp_SL*=Kunet;
;;;1944   temp_SL/=36000L;
;;;1945   net_U=(signed short)temp_SL;
;;;1946   #endif
;;;1947   
;;;1948   #ifdef UKU_6U
;;;1949   //напряжение сети
;;;1950   
;;;1951   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;1952   	{
;;;1953   
;;;1954   	if(bps[11]._device==dNET_METR)
;;;1955   		{
;;;1956   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;1957   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;1958   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;1959   
;;;1960   		temp_SL=(signed long)net_metr_buff_[0];
;;;1961   		temp_SL*=KunetA;
;;;1962   		temp_SL/=6000L;
;;;1963   		net_Ua=(signed short)temp_SL;
;;;1964   	
;;;1965   		temp_SL=(signed long)net_metr_buff_[1];
;;;1966   		temp_SL*=KunetB;
;;;1967   		temp_SL/=6000L;
;;;1968   		net_Ub=(signed short)temp_SL;
;;;1969   	
;;;1970   		temp_SL=(signed long)net_metr_buff_[2];
;;;1971   		temp_SL*=KunetC;
;;;1972   		temp_SL/=6000L;
;;;1973   		net_Uc=(signed short)temp_SL;
;;;1974   		}
;;;1975   	else
;;;1976   		{
;;;1977   		temp_SL=(signed long)net_buff_;
;;;1978   		temp_SL*=KunetA;
;;;1979   		temp_SL/=110000L;
;;;1980   		net_Ua=(signed short)temp_SL;
;;;1981   	
;;;1982   		temp_SL=(signed long)adc_buff_[3];
;;;1983   		temp_SL*=KunetB;
;;;1984   		temp_SL/=6000L;
;;;1985   		net_Ub=(signed short)temp_SL;
;;;1986   	
;;;1987   		temp_SL=(signed long)adc_buff_[10];
;;;1988   		temp_SL*=KunetC;
;;;1989   		temp_SL/=6000L;
;;;1990   		net_Uc=(signed short)temp_SL;
;;;1991   		}
;;;1992   
;;;1993   	net_U=net_Ua;
;;;1994   	if(net_Ub<net_U)net_U=net_Ub;
;;;1995   	if(net_Uc<net_U)net_U=net_Uc;
;;;1996   	}
;;;1997   else 
;;;1998   	{
;;;1999   	temp_SL=(signed long)net_buff_;
;;;2000   	temp_SL*=Kunet;
;;;2001   	temp_SL/=110000L;
;;;2002   	net_U=(signed short)temp_SL;
;;;2003   	}
;;;2004   
;;;2005   
;;;2006   
;;;2007   
;;;2008   #endif
;;;2009   
;;;2010   #ifdef UKU_GLONASS
;;;2011   //напряжение сети
;;;2012   temp_SL=(signed long)net_buff_;
;;;2013   temp_SL*=Kunet;
;;;2014   temp_SL/=110000L;
;;;2015   net_U=(signed short)temp_SL;
;;;2016   #endif
;;;2017   
;;;2018   #ifdef UKU_KONTUR
;;;2019   //напряжение сети
;;;2020   temp_SL=(signed long)net_buff_;
;;;2021   temp_SL*=Kunet;
;;;2022   temp_SL/=110000L;
;;;2023   net_U=(signed short)temp_SL;
;;;2024   #endif
;;;2025   
;;;2026   #ifdef IPS_SGEP_GAZPROM
;;;2027   //напряжение сети
;;;2028   temp_SL=(signed long)net_buff_;
;;;2029   temp_SL*=Kunet;
;;;2030   temp_SL/=110000L;
;;;2031   net_U=(signed short)temp_SL;
;;;2032   #endif
;;;2033   
;;;2034   #ifdef UKU_220_V2
;;;2035   //напряжение сети
;;;2036   
;;;2037   if(AUSW_MAIN==22033)
;;;2038   	{
;;;2039   	temp_SL=(signed long)net_buff_;
;;;2040   	temp_SL*=KunetA;
;;;2041   	temp_SL/=6000L;
;;;2042   	net_Ua=(signed short)temp_SL;
;;;2043   
;;;2044   	temp_SL=(signed long)adc_buff_[3];
;;;2045   	temp_SL*=KunetB;
;;;2046   	temp_SL/=6000L;
;;;2047   	net_Ub=(signed short)temp_SL;
;;;2048   
;;;2049   	temp_SL=(signed long)adc_buff_[10];
;;;2050   	temp_SL*=KunetC;
;;;2051   	temp_SL/=6000L;
;;;2052   	net_Uc=(signed short)temp_SL;
;;;2053   
;;;2054   	net_U=net_Ua;
;;;2055   	if(net_Ub<net_U)net_U=net_Ub;
;;;2056   	if(net_Uc<net_U)net_U=net_Uc;
;;;2057   	}
;;;2058   else
;;;2059   	{
;;;2060   	temp_SL=(signed long)net_buff_;
;;;2061   	temp_SL*=Kunet;
;;;2062   	temp_SL/=5000L;
;;;2063   	net_U=(signed short)temp_SL;
;;;2064   	}
;;;2065   #endif
;;;2066   
;;;2067   
;;;2068   #ifdef UKU_220
;;;2069   //напряжение сети
;;;2070   
;;;2071   if(AUSW_MAIN==22035)
;;;2072   	{
;;;2073   	temp_SL=(signed long)net_buff_;
;;;2074   	temp_SL*=KunetA;
;;;2075   	temp_SL/=6000L;
;;;2076   	net_Ua=(signed short)temp_SL;
;;;2077   
;;;2078   	temp_SL=(signed long)adc_buff_[3];
;;;2079   	temp_SL*=KunetB;
;;;2080   	temp_SL/=6000L;
;;;2081   	net_Ub=(signed short)temp_SL;
;;;2082   
;;;2083   	temp_SL=(signed long)adc_buff_[10];
;;;2084   	temp_SL*=KunetC;
;;;2085   	temp_SL/=6000L;
;;;2086   	net_Uc=(signed short)temp_SL;
;;;2087   
;;;2088   	net_U=net_Ua;
;;;2089   	if(net_Ub<net_U)net_U=net_Ub;
;;;2090   	if(net_Uc<net_U)net_U=net_Uc;
;;;2091   	}
;;;2092   else
;;;2093   	{
;;;2094   	temp_SL=(signed long)net_buff_;
;;;2095   	temp_SL*=Kunet;
;;;2096   	#ifdef _ACDC_
;;;2097   	temp_SL/=500L;
;;;2098   	#else
;;;2099   	temp_SL/=5000L;
;;;2100   	#endif
;;;2101   	net_U=(signed short)temp_SL;
;;;2102   	
;;;2103   	}
;;;2104   #endif
;;;2105   
;;;2106   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2107   //напряжение сети
;;;2108   
;;;2109   
;;;2110   	if(bps[11]._device==dNET_METR)
001c8e  48d5              LDR      r0,|L1.8164|
;;;2111   		{
;;;2112   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2113   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2114   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2115   
;;;2116   		temp_SL=(signed long)net_metr_buff_[2];
;;;2117   		temp_SL*=KunetA;
001c90  4bd5              LDR      r3,|L1.8168|
;;;2118   		temp_SL/=6000L;
;;;2119   		net_Ua=(signed short)temp_SL;
;;;2120   	
;;;2121   		temp_SL=(signed long)net_metr_buff_[1];
;;;2122   		temp_SL*=KunetB;
001c92  49d7              LDR      r1,|L1.8176|
001c94  f89003f4          LDRB     r0,[r0,#0x3f4]        ;2110  ; bps
;;;2123   		temp_SL/=6000L;
;;;2124   		net_Ub=(signed short)temp_SL;
;;;2125   	
;;;2126   		temp_SL=(signed long)net_metr_buff_[0];
;;;2127   		temp_SL*=KunetC;
001c98  4ad6              LDR      r2,|L1.8180|
001c9a  9006              STR      r0,[sp,#0x18]         ;2117
001c9c  f8dfc34c          LDR      r12,|L1.8172|
001ca0  f9b39000          LDRSH    r9,[r3,#0]            ;2117
001ca4  f9b1b000          LDRSH    r11,[r1,#0]           ;2122
001ca8  f9b2a000          LDRSH    r10,[r2,#0]
001cac  4fd2              LDR      r7,|L1.8184|
;;;2128   		temp_SL/=6000L;
;;;2129   		net_Uc=(signed short)temp_SL;
001cae  4cd3              LDR      r4,|L1.8188|
;;;2130   
;;;2131   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2132   
;;;2133   		net_U=net_Ua;
;;;2134   		if(net_Ub<net_U)net_U=net_Ub;
;;;2135   		if(net_Uc<net_U)net_U=net_Uc;
;;;2136   		}
;;;2137   	  else if(AUSW_MAIN==22033)
;;;2138   	{
;;;2139   	temp_SL=(signed long)net_buff_;
001cb0  4ec4              LDR      r6,|L1.8132|
001cb2  f2456511          MOV      r5,#0x5611            ;2137
001cb6  2807              CMP      r0,#7                 ;2110
001cb8  d036              BEQ      |L1.7464|
001cba  4631              MOV      r1,r6
001cbc  f8df8330          LDR      r8,|L1.8176|
001cc0  8e8a              LDRH     r2,[r1,#0x34]
001cc2  4619              MOV      r1,r3                 ;2117
;;;2140   	temp_SL*=KunetA;
;;;2141   	temp_SL/=4000L;
;;;2142   	net_Ua=(signed short)temp_SL;
;;;2143   
;;;2144   	temp_SL=(signed long)adc_buff_[3];
001cc4  4bcf              LDR      r3,|L1.8196|
001cc6  f9b11000          LDRSH    r1,[r1,#0]            ;2117
001cca  f9b88000          LDRSH    r8,[r8,#0]            ;2122
001cce  434a              MULS     r2,r1,r2              ;2140
001cd0  f9b31006          LDRSH    r1,[r3,#6]
001cd4  f8df931c          LDR      r9,|L1.8180|
;;;2145   	temp_SL*=KunetB;
001cd8  fb01f108          MUL      r1,r1,r8
001cdc  f2417870          MOV      r8,#0x1770            ;2118
;;;2146   	temp_SL/=6000L;
;;;2147   	net_Ub=(signed short)temp_SL;
;;;2148   
;;;2149   	temp_SL=(signed long)adc_buff_[10];
001ce0  f9b33014          LDRSH    r3,[r3,#0x14]
001ce4  f9b99000          LDRSH    r9,[r9,#0]            ;2127
001ce8  fb91f1f8          SDIV     r1,r1,r8              ;2146
;;;2150   	temp_SL*=KunetC;
001cec  fb03f309          MUL      r3,r3,r9
;;;2151   	temp_SL/=6000L;
001cf0  fb93f3f8          SDIV     r3,r3,r8
001cf4  48c2              LDR      r0,|L1.8192|
001cf6  b209              SXTH     r1,r1                 ;2147
;;;2152   	net_Uc=(signed short)temp_SL;
001cf8  b21b              SXTH     r3,r3
001cfa  8800              LDRH     r0,[r0,#0]            ;2137  ; AUSW_MAIN
001cfc  42a8              CMP      r0,r5                 ;2137
001cfe  d154              BNE      |L1.7594|
001d00  f44f607a          MOV      r0,#0xfa0             ;2141
001d04  fb92f0f0          SDIV     r0,r2,r0              ;2141
001d08  b200              SXTH     r0,r0                 ;2142
001d0a  f8ac0000          STRH     r0,[r12,#0]           ;2142
001d0e  8039              STRH     r1,[r7,#0]            ;2147
001d10  8023              STRH     r3,[r4,#0]
;;;2153   
;;;2154   	net_U=net_Ua;
001d12  4aaf              LDR      r2,|L1.8144|
001d14  8010              STRH     r0,[r2,#0]
;;;2155   	if(net_Ub<net_U)net_U=net_Ub;
001d16  4281              CMP      r1,r0
001d18  da00              BGE      |L1.7452|
001d1a  8011              STRH     r1,[r2,#0]
                  |L1.7452|
;;;2156   	if(net_Uc<net_U)net_U=net_Uc;
001d1c  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
001d20  4283              CMP      r3,r0
001d22  da00              BGE      |L1.7462|
001d24  8013              STRH     r3,[r2,#0]
                  |L1.7462|
001d26  e07e              B        |L1.7718|
                  |L1.7464|
001d28  48b7              LDR      r0,|L1.8200|
001d2a  4ba6              LDR      r3,|L1.8132|
001d2c  7801              LDRB     r1,[r0,#0]            ;2112  ; bps
001d2e  7842              LDRB     r2,[r0,#1]            ;2112  ; bps
001d30  f10303e4          ADD      r3,r3,#0xe4           ;2112
001d34  eb012102          ADD      r1,r1,r2,LSL #8       ;2112
001d38  fa1ff881          UXTH     r8,r1                 ;2112
001d3c  f8a38000          STRH     r8,[r3,#0]            ;2112
001d40  7881              LDRB     r1,[r0,#2]            ;2113  ; bps
001d42  78c2              LDRB     r2,[r0,#3]            ;2113  ; bps
001d44  eb012102          ADD      r1,r1,r2,LSL #8       ;2113
001d48  b289              UXTH     r1,r1                 ;2113
001d4a  8059              STRH     r1,[r3,#2]            ;2113
001d4c  7902              LDRB     r2,[r0,#4]            ;2114  ; bps
001d4e  f890e005          LDRB     lr,[r0,#5]            ;2114  ; bps
001d52  eb02220e          ADD      r2,r2,lr,LSL #8       ;2114
001d56  b292              UXTH     r2,r2                 ;2114
001d58  809a              STRH     r2,[r3,#4]            ;2114
001d5a  fb02f209          MUL      r2,r2,r9              ;2117
001d5e  f2417370          MOV      r3,#0x1770            ;2118
001d62  fb92f2f3          SDIV     r2,r2,r3              ;2118
001d66  fa0ff982          SXTH     r9,r2                 ;2119
001d6a  f8ac9000          STRH     r9,[r12,#0]           ;2119
001d6e  fb01f10b          MUL      r1,r1,r11             ;2122
001d72  fb91f1f3          SDIV     r1,r1,r3              ;2123
001d76  b209              SXTH     r1,r1                 ;2124
001d78  8039              STRH     r1,[r7,#0]            ;2124
001d7a  fb08f80a          MUL      r8,r8,r10             ;2127
001d7e  fb98f2f3          SDIV     r2,r8,r3              ;2128
001d82  b212              SXTH     r2,r2                 ;2129
001d84  8022              STRH     r2,[r4,#0]            ;2129
001d86  7983              LDRB     r3,[r0,#6]            ;2131  ; bps
001d88  79c0              LDRB     r0,[r0,#7]            ;2131  ; bps
001d8a  eb032000          ADD      r0,r3,r0,LSL #8       ;2131
001d8e  4b9f              LDR      r3,|L1.8204|
001d90  8018              STRH     r0,[r3,#0]            ;2131
001d92  488f              LDR      r0,|L1.8144|
001d94  f8a09000          STRH     r9,[r0,#0]            ;2133
001d98  4549              CMP      r1,r9                 ;2134
001d9a  da00              BGE      |L1.7582|
001d9c  8001              STRH     r1,[r0,#0]            ;2134
                  |L1.7582|
001d9e  f9b01000          LDRSH    r1,[r0,#0]            ;2135  ; net_U
001da2  428a              CMP      r2,r1                 ;2135
001da4  da3f              BGE      |L1.7718|
001da6  8002              STRH     r2,[r0,#0]            ;2135
001da8  e03d              B        |L1.7718|
                  |L1.7594|
;;;2157   	}
;;;2158   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
001daa  f5a048ac          SUB      r8,r0,#0x5600
001dae  f1b8082f          SUBS     r8,r8,#0x2f
001db2  d00b              BEQ      |L1.7628|
001db4  f1180828          ADDS     r8,r8,#0x28
001db8  d008              BEQ      |L1.7628|
001dba  f1b80814          SUBS     r8,r8,#0x14
001dbe  d005              BEQ      |L1.7628|
001dc0  f1b80801          SUBS     r8,r8,#1
001dc4  d002              BEQ      |L1.7628|
001dc6  f118081a          ADDS     r8,r8,#0x1a
001dca  d113              BNE      |L1.7668|
                  |L1.7628|
;;;2159   	{
;;;2160   	temp_SL=(signed long)net_buff_;
;;;2161   	temp_SL*=KunetA;
;;;2162   	temp_SL/=40000L;
001dcc  f6494040          MOV      r0,#0x9c40
001dd0  fb92f0f0          SDIV     r0,r2,r0
;;;2163   	net_Ua=(signed short)temp_SL;
001dd4  b200              SXTH     r0,r0
001dd6  f8ac0000          STRH     r0,[r12,#0]
;;;2164   
;;;2165   	temp_SL=(signed long)adc_buff_[3];
;;;2166   	temp_SL*=KunetB;
;;;2167   	temp_SL/=6000L;
;;;2168   	net_Ub=(signed short)temp_SL;
001dda  8039              STRH     r1,[r7,#0]
;;;2169   
;;;2170   	temp_SL=(signed long)adc_buff_[10];
;;;2171   	temp_SL*=KunetC;
;;;2172   	temp_SL/=6000L;
;;;2173   	net_Uc=(signed short)temp_SL;
001ddc  8023              STRH     r3,[r4,#0]
;;;2174   
;;;2175   	net_U=net_Ua;
001dde  4a7c              LDR      r2,|L1.8144|
001de0  8010              STRH     r0,[r2,#0]
;;;2176   	if(net_Ub<net_U)net_U=net_Ub;
001de2  4281              CMP      r1,r0
001de4  da00              BGE      |L1.7656|
001de6  8011              STRH     r1,[r2,#0]
                  |L1.7656|
;;;2177   	if(net_Uc<net_U)net_U=net_Uc;
001de8  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
001dec  4283              CMP      r3,r0
001dee  da1a              BGE      |L1.7718|
001df0  8013              STRH     r3,[r2,#0]
001df2  e018              B        |L1.7718|
                  |L1.7668|
;;;2178   	}
;;;2179   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2180   	{
;;;2181   	temp_SL=(signed long)net_buff_;
;;;2182   	temp_SL*=Kunet;
001df4  4986              LDR      r1,|L1.8208|
001df6  f5a043aa          SUB      r3,r0,#0x5500         ;2179
001dfa  f9b12000          LDRSH    r2,[r1,#0]
001dfe  4971              LDR      r1,|L1.8132|
001e00  8e89              LDRH     r1,[r1,#0x34]         ;2139
001e02  4351              MULS     r1,r2,r1
001e04  3bfa              SUBS     r3,r3,#0xfa           ;2179
001e06  d001              BEQ      |L1.7692|
001e08  1e5a              SUBS     r2,r3,#1              ;2179
001e0a  d106              BNE      |L1.7706|
                  |L1.7692|
;;;2183   	temp_SL/=35000L;
001e0c  f64800b8          MOV      r0,#0x88b8
001e10  fb91f0f0          SDIV     r0,r1,r0
;;;2184   	net_U=(signed short)temp_SL;
001e14  496e              LDR      r1,|L1.8144|
001e16  8008              STRH     r0,[r1,#0]
001e18  e005              B        |L1.7718|
                  |L1.7706|
;;;2185   	
;;;2186   	}
;;;2187   else
;;;2188   	{
;;;2189   	temp_SL=(signed long)net_buff_;
;;;2190   	temp_SL*=Kunet;
;;;2191   	#ifdef _ACDC_
;;;2192   	temp_SL/=500L;
001e1a  f44f70fa          MOV      r0,#0x1f4
001e1e  fb91f0f0          SDIV     r0,r1,r0
;;;2193   	#else
;;;2194   	temp_SL/=5000L;
;;;2195   	#endif
;;;2196   	net_U=(signed short)temp_SL;
001e22  496b              LDR      r1,|L1.8144|
001e24  8008              STRH     r0,[r1,#0]
                  |L1.7718|
;;;2197   	
;;;2198   	}
;;;2199   if(bps[11]._device!=dNET_METR) net_F3=net_F;
001e26  9806              LDR      r0,[sp,#0x18]
001e28  2807              CMP      r0,#7
001e2a  d003              BEQ      |L1.7732|
001e2c  4879              LDR      r0,|L1.8212|
001e2e  8801              LDRH     r1,[r0,#0]  ; net_F
001e30  4876              LDR      r0,|L1.8204|
001e32  8001              STRH     r1,[r0,#0]
                  |L1.7732|
;;;2200   #endif
;;;2201   
;;;2202   #ifdef UKU_TELECORE2015
;;;2203   //напряжение сети
;;;2204   temp_SL=(signed long)net_buff_;
;;;2205   temp_SL*=Kunet;
;;;2206   temp_SL/=110000L;
;;;2207   net_U=(signed short)temp_SL;
;;;2208   #endif
;;;2209   
;;;2210   #ifdef UKU_TELECORE2017
;;;2211   //напряжение сети
;;;2212   temp_SL=(signed long)net_buff_;
;;;2213   temp_SL*=Kunet;
;;;2214   temp_SL/=110000L;
;;;2215   net_U=(signed short)temp_SL;
;;;2216   #endif
;;;2217   
;;;2218   //Напряжения батарей
;;;2219   temp_SL=(signed long)adc_buff_[0];
001e34  4f73              LDR      r7,|L1.8196|
001e36  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2220   temp_SL*=Kubat[0];
001e3a  4977              LDR      r1,|L1.8216|
001e3c  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
001e40  4350              MULS     r0,r2,r0
;;;2221   temp_SL/=2000L;
001e42  f44f68fa          MOV      r8,#0x7d0
001e46  fb90f0f8          SDIV     r0,r0,r8
;;;2222   bat[0]._Ub=(signed short)temp_SL;
001e4a  4c60              LDR      r4,|L1.8140|
001e4c  8060              STRH     r0,[r4,#2]
;;;2223   
;;;2224   #ifdef UKU_220
;;;2225   //Напряжения батарей
;;;2226   temp_SL=(signed long)adc_buff_[0];
;;;2227   temp_SL*=Kubat[0];
;;;2228   temp_SL/=400L;
;;;2229   bat[0]._Ub=(signed short)temp_SL;
;;;2230   #endif
;;;2231   
;;;2232   #ifdef UKU_220_V2
;;;2233   //Напряжения батарей
;;;2234   temp_SL=(signed long)adc_buff_[0];
;;;2235   temp_SL*=Kubat[0];
;;;2236   temp_SL/=400L;
;;;2237   bat[0]._Ub=(signed short)temp_SL;
;;;2238   #endif
;;;2239   
;;;2240   //adc_buff_[4]=300;
;;;2241   
;;;2242   temp_SL=(signed long)adc_buff_[4];
001e4e  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2243   temp_SL*=Kubatm[0];
001e52  4a72              LDR      r2,|L1.8220|
001e54  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
001e58  fb00f003          MUL      r0,r0,r3
;;;2244   temp_SL/=700L;
001e5c  f44f732f          MOV      r3,#0x2bc
001e60  fb90f0f3          SDIV     r0,r0,r3
;;;2245   bat[0]._Ubm=(signed short)temp_SL;
001e64  80a0              STRH     r0,[r4,#4]
;;;2246   
;;;2247   #ifdef UKU_KONTUR
;;;2248   temp_SL=(signed long)adc_buff_[4];
;;;2249   temp_SL*=Kubatm[0];
;;;2250   temp_SL/=2000L;
;;;2251   bat[0]._Ubm=(signed short)temp_SL;
;;;2252   #endif
;;;2253   
;;;2254   #ifdef UKU_6U
;;;2255   temp_SL=(signed long)adc_buff_[4];
;;;2256   temp_SL*=Kubatm[0];
;;;2257   temp_SL/=2000L;
;;;2258   bat[0]._Ubm=(signed short)temp_SL;
;;;2259   #endif
;;;2260   
;;;2261   temp_SL=(signed long)adc_buff_[12];
001e66  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2262   temp_SL*=Kubat[1];
001e6a  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
001e6e  fb01f100          MUL      r1,r1,r0
;;;2263   temp_SL/=2000L;
001e72  fb91f0f8          SDIV     r0,r1,r8
;;;2264   bat[1]._Ub=(signed short)temp_SL;
001e76  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2265   
;;;2266   #ifdef UKU_220
;;;2267   temp_SL=(signed long)adc_buff_[12];
;;;2268   temp_SL*=Kubat[1];
;;;2269   temp_SL/=400L;
;;;2270   bat[1]._Ub=(signed short)temp_SL;
;;;2271   #endif
;;;2272   
;;;2273   #ifdef UKU_220_V2
;;;2274   temp_SL=(signed long)adc_buff_[12];
;;;2275   temp_SL*=Kubat[1];
;;;2276   temp_SL/=400L;
;;;2277   bat[1]._Ub=(signed short)temp_SL;
;;;2278   #endif
;;;2279   
;;;2280   //adc_buff_[1]=300;
;;;2281   
;;;2282   temp_SL=(signed long)adc_buff_[1];
001e7a  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2283   temp_SL*=Kubatm[1];
001e7e  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
001e82  fb00f001          MUL      r0,r0,r1
;;;2284   temp_SL/=700L;
001e86  fb90f0f3          SDIV     r0,r0,r3
;;;2285   bat[1]._Ubm=(signed short)temp_SL;
001e8a  f8a40050          STRH     r0,[r4,#0x50]
;;;2286   #ifdef UKU_KONTUR
;;;2287   temp_SL=(signed long)adc_buff_[1];
;;;2288   temp_SL*=Kubatm[1];
;;;2289   temp_SL/=2000L;
;;;2290   bat[1]._Ubm=(signed short)temp_SL;
;;;2291   #endif
;;;2292   #ifdef UKU_6U
;;;2293   temp_SL=(signed long)adc_buff_[1];
;;;2294   temp_SL*=Kubatm[1];
;;;2295   temp_SL/=2000L;
;;;2296   bat[1]._Ubm=(signed short)temp_SL;
;;;2297   #endif
;;;2298   
;;;2299   #ifdef UKU_TELECORE2015
;;;2300   temp_SL=(signed long)adc_buff_[2];
;;;2301   temp_SL*=Kubat[0];
;;;2302   temp_SL/=2000L;
;;;2303   bat[0]._Ub=(signed short)temp_SL;
;;;2304   #endif
;;;2305   
;;;2306   /*
;;;2307   //Токи батарей
;;;2308   if(!mess_find_unvol(MESS2MATEMAT))
;;;2309   	{
;;;2310   	temp_SL=(signed long)ad7705_buff_[0];
;;;2311   	temp_SL-=(signed long)Kibat0[0];
;;;2312   	temp_SL*=(signed long)Kibat1[0];
;;;2313   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2314   	else temp_SL/=1000L;
;;;2315   	bat[0]._Ib=(signed short)temp_SL;
;;;2316   
;;;2317   	temp_SL=(signed long)ad7705_buff_[1];
;;;2318   	temp_SL-=(signed long)Kibat0[1];
;;;2319   	temp_SL*=(signed long)Kibat1[1];
;;;2320   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2321   	else temp_SL/=1000L;
;;;2322   	bat[1]._Ib=(signed short)temp_SL;
;;;2323   	}
;;;2324   */
;;;2325   
;;;2326   
;;;2327   //Токи батарей
;;;2328   if(!mess_find_unvol(MESS2MATEMAT))
001e8e  f04f00dc          MOV      r0,#0xdc
001e92  f7fffffe          BL       mess_find_unvol
;;;2329   	{
;;;2330   	temp_SL=(signed long)ad7705_buff_[0];
;;;2331   	temp_SL-=(signed long)Kibat0[0];
;;;2332   	temp_SL*=(signed long)Kibat1[0];
;;;2333   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2334   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
001e96  f2456c13          MOV      r12,#0x5613
001e9a  bbe8              CBNZ     r0,|L1.7960|
001e9c  f8dfa180          LDR      r10,|L1.8224|
001ea0  f8ba0000          LDRH     r0,[r10,#0]           ;2330  ; ad7705_buff_
001ea4  f8dfb17c          LDR      r11,|L1.8228|
001ea8  f8bb1000          LDRH     r1,[r11,#0]           ;2331  ; Kibat0
001eac  eba00001          SUB      r0,r0,r1              ;2331
001eb0  4a5d              LDR      r2,|L1.8232|
001eb2  f9b21000          LDRSH    r1,[r2,#0]            ;2332  ; Kibat1
001eb6  fb01f100          MUL      r1,r1,r0              ;2332
001eba  4851              LDR      r0,|L1.8192|
001ebc  f6456338          MOV      r3,#0x5e38            ;2333
001ec0  f6456992          MOV      r9,#0x5e92            ;2333
001ec4  8800              LDRH     r0,[r0,#0]            ;2333  ; AUSW_MAIN
001ec6  4298              CMP      r0,r3                 ;2333
001ec8  d001              BEQ      |L1.7886|
001eca  4548              CMP      r0,r9                 ;2333
001ecc  d104              BNE      |L1.7896|
                  |L1.7886|
001ece  f44f7e96          MOV      lr,#0x12c             ;2333
001ed2  fb91f1fe          SDIV     r1,r1,lr              ;2333
001ed6  e00f              B        |L1.7928|
                  |L1.7896|
001ed8  f5a04ea8          SUB      lr,r0,#0x5400
001edc  f5be7efd          SUBS     lr,lr,#0x1fa
001ee0  d003              BEQ      |L1.7914|
001ee2  4560              CMP      r0,r12
001ee4  d001              BEQ      |L1.7914|
001ee6  42a8              CMP      r0,r5
001ee8  d102              BNE      |L1.7920|
                  |L1.7914|
001eea  fb91f1f8          SDIV     r1,r1,r8
001eee  e003              B        |L1.7928|
                  |L1.7920|
;;;2335   	else temp_SL/=1000L;
001ef0  f44f7e7a          MOV      lr,#0x3e8
001ef4  fb91f1fe          SDIV     r1,r1,lr
                  |L1.7928|
;;;2336   	#ifdef UKU_TELECORE2015
;;;2337   	temp_SL/=2L;
;;;2338   	//temp_SL=-temp_SL;
;;;2339   	#endif
;;;2340   	//#ifdef UKU_TELECORE2017
;;;2341   	//temp_SL/=-2L;
;;;2342   	//temp_SL=-temp_SL;
;;;2343   	//#endif
;;;2344   	bat[0]._Ib=(signed short)temp_SL;
001ef8  8121              STRH     r1,[r4,#8]
;;;2345   
;;;2346   	temp_SL=(signed long)ad7705_buff_[1];
001efa  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;2347   	temp_SL-=(signed long)Kibat0[1];
001efe  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
001f02  eba10a0a          SUB      r10,r1,r10
;;;2348   	temp_SL*=(signed long)Kibat1[1];
001f06  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
001f0a  fb01f10a          MUL      r1,r1,r10
;;;2349   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
001f0e  4298              CMP      r0,r3
001f10  d001              BEQ      |L1.7958|
001f12  4548              CMP      r0,r9
001f14  d106              BNE      |L1.7972|
                  |L1.7958|
001f16  e000              B        |L1.7962|
                  |L1.7960|
001f18  e015              B        |L1.8006|
                  |L1.7962|
001f1a  f44f7096          MOV      r0,#0x12c
001f1e  fb91f0f0          SDIV     r0,r1,r0
001f22  e00e              B        |L1.8002|
                  |L1.7972|
;;;2350   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
001f24  f5a042aa          SUB      r2,r0,#0x5500
001f28  3afa              SUBS     r2,r2,#0xfa
001f2a  d003              BEQ      |L1.7988|
001f2c  4560              CMP      r0,r12
001f2e  d001              BEQ      |L1.7988|
001f30  42a8              CMP      r0,r5
001f32  d102              BNE      |L1.7994|
                  |L1.7988|
001f34  fb91f0f8          SDIV     r0,r1,r8
001f38  e003              B        |L1.8002|
                  |L1.7994|
;;;2351   	else temp_SL/=1000L;
001f3a  f44f707a          MOV      r0,#0x3e8
001f3e  fb91f0f0          SDIV     r0,r1,r0
                  |L1.8002|
;;;2352   	bat[1]._Ib=(signed short)temp_SL;
001f42  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.8006|
;;;2353   	}
;;;2354   
;;;2355   
;;;2356   
;;;2357   
;;;2358   
;;;2359   //Температуры батарей
;;;2360   
;;;2361   #ifdef UKU_KONTUR
;;;2362   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;2363   else bat[0]._nd=1;
;;;2364   temp_SL=(signed long)adc_buff_[6];
;;;2365   temp_SL*=Ktbat[0];
;;;2366   temp_SL/=20000L;
;;;2367   temp_SL-=273L;
;;;2368   bat[0]._Tb=(signed short)temp_SL;
;;;2369   #else
;;;2370   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
001f46  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
001f4a  f6403ab7          MOV      r10,#0xbb7
001f4e  4681              MOV      r9,r0
001f50  f2a03021          SUB      r0,r0,#0x321
;;;2371   else bat[0]._nd=1;
001f54  2201              MOVS     r2,#1
001f56  2300              MOVS     r3,#0                 ;2370
001f58  9005              STR      r0,[sp,#0x14]         ;2370
001f5a  4550              CMP      r0,r10                ;2370
001f5c  d201              BCS      |L1.8034|
001f5e  7323              STRB     r3,[r4,#0xc]          ;2370
001f60  e000              B        |L1.8036|
                  |L1.8034|
001f62  7322              STRB     r2,[r4,#0xc]
                  |L1.8036|
;;;2372   temp_SL=(signed long)adc_buff_[6];
;;;2373   temp_SL*=Ktbat[0];
001f64  4931              LDR      r1,|L1.8236|
001f66  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
001f6a  fb00f009          MUL      r0,r0,r9
;;;2374   temp_SL/=20000L;
001f6e  f6446e20          MOV      lr,#0x4e20
001f72  fb90f0fe          SDIV     r0,r0,lr
;;;2375   temp_SL-=273L;
001f76  f2a01011          SUB      r0,r0,#0x111
;;;2376   bat[0]._Tb=(signed short)temp_SL;
001f7a  8160              STRH     r0,[r4,#0xa]
;;;2377   #endif
;;;2378   
;;;2379   #ifdef UKU_KONTUR
;;;2380   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;2381   else bat[1]._nd=1;
;;;2382   temp_SL=(signed long)adc_buff_[7];
;;;2383   temp_SL*=Ktbat[1];
;;;2384   temp_SL/=20000L;
;;;2385   temp_SL-=273L;
;;;2386   bat[1]._Tb=(signed short)temp_SL;
;;;2387   #else
;;;2388   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
001f7c  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
001f80  f2a03b21          SUB      r11,r0,#0x321
001f84  45d3              CMP      r11,r10
001f86  d202              BCS      |L1.8078|
001f88  f8843058          STRB     r3,[r4,#0x58]
001f8c  e001              B        |L1.8082|
                  |L1.8078|
;;;2389   else bat[1]._nd=1;
001f8e  f8842058          STRB     r2,[r4,#0x58]
                  |L1.8082|
;;;2390   temp_SL=(signed long)adc_buff_[7];
;;;2391   temp_SL*=Ktbat[1];
001f92  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
001f96  4341              MULS     r1,r0,r1
;;;2392   temp_SL/=20000L;
001f98  f6446020          MOV      r0,#0x4e20
001f9c  fb91f0f0          SDIV     r0,r1,r0
;;;2393   temp_SL-=273L;
001fa0  f2a01011          SUB      r0,r0,#0x111
;;;2394   bat[1]._Tb=(signed short)temp_SL;
001fa4  4909              LDR      r1,|L1.8140|
001fa6  f8a10056          STRH     r0,[r1,#0x56]
;;;2395   #endif
;;;2396   
;;;2397   #ifdef UKU_6U
;;;2398   
;;;2399   if(NUMMAKB==2)
;;;2400   	{
;;;2401   	if(makb[0]._cnt<5)
;;;2402   		{
;;;2403   		if(makb[0]._T_nd[0]==0)
;;;2404   			{
;;;2405   			bat[0]._Tb=makb[0]._T[0];
;;;2406   			bat[0]._nd=0;
;;;2407   			}
;;;2408   		}
;;;2409   
;;;2410   	if(makb[1]._cnt<5)
;;;2411   		{
;;;2412   		if(makb[1]._T_nd[0]==0)
;;;2413   			{
;;;2414   			bat[1]._Tb=makb[1]._T[0];
;;;2415   			bat[1]._nd=0;
;;;2416   			}
;;;2417   		}
;;;2418   
;;;2419   	}
;;;2420   else if(NUMMAKB==4)
;;;2421   	{
;;;2422   	signed short temp_t;
;;;2423   	temp_t=-20;
;;;2424   	if(makb[0]._cnt<5)
;;;2425   		{
;;;2426   		if(makb[0]._T_nd[0]==0)
;;;2427   			{
;;;2428   			temp_t=makb[0]._T[0];
;;;2429   			bat[0]._nd=0;
;;;2430   			}
;;;2431   		}
;;;2432   	if(makb[1]._cnt<5)
;;;2433   		{
;;;2434   		if(makb[1]._T_nd[0]==0)
;;;2435   			{
;;;2436   			if(temp_t<makb[1]._T[0])
;;;2437   				{
;;;2438   				bat[0]._nd=0;
;;;2439   				temp_t=makb[1]._T[0];
;;;2440   				}
;;;2441   			}
;;;2442   		}
;;;2443   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;2444   
;;;2445    	temp_t=-20;
;;;2446   	if(makb[2]._cnt<5)
;;;2447   		{
;;;2448   		if(makb[2]._T_nd[0]==0)
;;;2449   			{
;;;2450   			temp_t=makb[2]._T[0];
;;;2451   			bat[1]._nd=0;
;;;2452   			}
;;;2453   		}
;;;2454   	if(makb[3]._cnt<5)
;;;2455   		{
;;;2456   		if(makb[3]._T_nd[0]==0)
;;;2457   			{
;;;2458   			if(temp_t<makb[3]._T[0])
;;;2459   				{
;;;2460   				bat[1]._nd=0;
;;;2461   				temp_t=makb[3]._T[0];
;;;2462   				}
;;;2463   			}
;;;2464   		}
;;;2465   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;2466   	}
;;;2467   
;;;2468   #endif
;;;2469   
;;;2470   
;;;2471   //Напряжение нагрузки
;;;2472   temp_SL=(signed long)adc_buff_[2];
001faa  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;2473   temp_SL*=Kuload;
001fae  4820              LDR      r0,|L1.8240|
001fb0  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
001fb4  fb01f000          MUL      r0,r1,r0
;;;2474   temp_SL/=2000L;
001fb8  f44f64fa          MOV      r4,#0x7d0
001fbc  e03a              B        |L1.8244|
001fbe  0000              DCW      0x0000
                  |L1.8128|
                          DCD      bat_ips
                  |L1.8132|
                          DCD      ||area_number.18||
                  |L1.8136|
                          DCD      bat_u_old_cnt
                  |L1.8140|
                          DCD      bat
                  |L1.8144|
                          DCD      net_U
                  |L1.8148|
                          DCD      UMN
                  |L1.8152|
                          DCD      unet_drv_cnt
                  |L1.8156|
                          DCD      net_Ustore
                  |L1.8160|
                          DCD      main_1Hz_cnt
                  |L1.8164|
                          DCD      bps
                  |L1.8168|
                          DCD      KunetA
                  |L1.8172|
                          DCD      net_Ua
                  |L1.8176|
                          DCD      KunetB
                  |L1.8180|
                          DCD      KunetC
                  |L1.8184|
                          DCD      net_Ub
                  |L1.8188|
                          DCD      net_Uc
                  |L1.8192|
                          DCD      AUSW_MAIN
                  |L1.8196|
                          DCD      ||.bss||+0x40c
                  |L1.8200|
                          DCD      bps+0x3fa
                  |L1.8204|
                          DCD      net_F3
                  |L1.8208|
                          DCD      Kunet
                  |L1.8212|
                          DCD      net_F
                  |L1.8216|
                          DCD      Kubat
                  |L1.8220|
                          DCD      Kubatm
                  |L1.8224|
                          DCD      ad7705_buff_
                  |L1.8228|
                          DCD      Kibat0
                  |L1.8232|
                          DCD      Kibat1
                  |L1.8236|
                          DCD      Ktbat
                  |L1.8240|
                          DCD      Kuload
                  |L1.8244|
002034  fb90f0f4          SDIV     r0,r0,r4
;;;2475   load_U=(signed short)temp_SL;
002038  4cfe              LDR      r4,|L1.9268|
00203a  8020              STRH     r0,[r4,#0]
;;;2476   
;;;2477   #ifdef UKU_220 
;;;2478   //Напряжение нагрузки
;;;2479   temp_SL=(signed long)adc_buff_[2];
;;;2480   temp_SL*=Kuload;
;;;2481   temp_SL/=350L;
;;;2482   load_U=(signed short)temp_SL;
;;;2483   #endif
;;;2484   
;;;2485   #ifdef UKU_220_V2 
;;;2486   //Напряжение нагрузки
;;;2487   temp_SL=(signed long)adc_buff_[2];
;;;2488   temp_SL*=Kuload;
;;;2489   temp_SL/=350L;
;;;2490   load_U=(signed short)temp_SL;
;;;2491   #endif
;;;2492   
;;;2493   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2494   //Напряжение шины
;;;2495   temp_SL=(signed long)adc_buff_[1];
00203c  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;2496   temp_SL*=Kuout;
002040  48fd              LDR      r0,|L1.9272|
002042  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002046  fb08f800          MUL      r8,r8,r0
;;;2497   if(AUSW_MAIN==22010)temp_SL/=400L;
00204a  48fc              LDR      r0,|L1.9276|
00204c  f24554fa          MOV      r4,#0x55fa
002050  f44f7bc8          MOV      r11,#0x190
002054  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002056  42a0              CMP      r0,r4
002058  d102              BNE      |L1.8288|
00205a  fb98f8fb          SDIV     r8,r8,r11
00205e  e003              B        |L1.8296|
                  |L1.8288|
;;;2498   else temp_SL/=500L;
002060  f44f7efa          MOV      lr,#0x1f4
002064  fb98f8fe          SDIV     r8,r8,lr
                  |L1.8296|
;;;2499   out_U=(signed short)temp_SL;
002068  f8dfe3d4          LDR      lr,|L1.9280|
00206c  fa0ff888          SXTH     r8,r8
002070  f8ae8000          STRH     r8,[lr,#0]
;;;2500   load_U=out_U;
002074  f8dfe3bc          LDR      lr,|L1.9268|
002078  f8ae8000          STRH     r8,[lr,#0]
;;;2501   
;;;2502   //Напряжение выпрямителей
;;;2503   temp_SL=(signed long)adc_buff_[2];
;;;2504   temp_SL*=Kubps;
00207c  4ff1              LDR      r7,|L1.9284|
00207e  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002082  fb01f107          MUL      r1,r1,r7
;;;2505   if(AUSW_MAIN==22010)temp_SL/=400L;
002086  d102              BNE      |L1.8334|
002088  fb91f1fb          SDIV     r1,r1,r11
00208c  e003              B        |L1.8342|
                  |L1.8334|
;;;2506   else temp_SL/=500L;
00208e  f44f74fa          MOV      r4,#0x1f4
002092  fb91f1f4          SDIV     r1,r1,r4
                  |L1.8342|
;;;2507   bps_U=(signed short)temp_SL;
002096  4cec              LDR      r4,|L1.9288|
002098  b209              SXTH     r1,r1
00209a  8021              STRH     r1,[r4,#0]
;;;2508   
;;;2509   if(bps_U<100)
00209c  2964              CMP      r1,#0x64
00209e  da19              BGE      |L1.8404|
;;;2510   	{
;;;2511   	char i;
;;;2512   	for(i=0;i<NUMIST;i++)
0020a0  f04f0100          MOV      r1,#0
0020a4  46a6              MOV      lr,r4                 ;2507
0020a6  4ce9              LDR      r4,|L1.9292|
0020a8  f9b4b000          LDRSH    r11,[r4,#0]
0020ac  e010              B        |L1.8400|
                  |L1.8366|
;;;2513   		{
;;;2514   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
0020ae  ebc104c1          RSB      r4,r1,r1,LSL #3
0020b2  eb041701          ADD      r7,r4,r1,LSL #4
0020b6  4ce6              LDR      r4,|L1.9296|
0020b8  eb040487          ADD      r4,r4,r7,LSL #2
0020bc  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
0020c0  6a24              LDR      r4,[r4,#0x20]
0020c2  42bc              CMP      r4,r7
0020c4  dd01              BLE      |L1.8394|
0020c6  f8ae4000          STRH     r4,[lr,#0]
                  |L1.8394|
0020ca  f1010101          ADD      r1,r1,#1              ;2512
0020ce  b2c9              UXTB     r1,r1                 ;2512
                  |L1.8400|
0020d0  4559              CMP      r1,r11                ;2512
0020d2  dbec              BLT      |L1.8366|
                  |L1.8404|
;;;2515   		}
;;;2516   	}
;;;2517   
;;;2518   //Суммарный ток выпрямителей
;;;2519   temp_SL=0;
0020d4  f04f0b00          MOV      r11,#0
;;;2520   for (i=0;i<NUMIST;i++)
0020d8  4659              MOV      r1,r11
0020da  4cdc              LDR      r4,|L1.9292|
0020dc  f9b47000          LDRSH    r7,[r4,#0]            ;2512
0020e0  4cdb              LDR      r4,|L1.9296|
0020e2  e00b              B        |L1.8444|
                  |L1.8420|
;;;2521   	{
;;;2522   	temp_SL+=((signed long)bps[i]._Ii);
0020e4  ebc10ec1          RSB      lr,r1,r1,LSL #3
0020e8  eb0e1e01          ADD      lr,lr,r1,LSL #4
0020ec  eb040e8e          ADD      lr,r4,lr,LSL #2
0020f0  f8dee024          LDR      lr,[lr,#0x24]
0020f4  44f3              ADD      r11,r11,lr
0020f6  f1010101          ADD      r1,r1,#1              ;2520
0020fa  b2c9              UXTB     r1,r1                 ;2520
                  |L1.8444|
0020fc  42b9              CMP      r1,r7                 ;2520
0020fe  dbf1              BLT      |L1.8420|
;;;2523   	}
;;;2524   bps_I=(signed short)temp_SL;
002100  49d4              LDR      r1,|L1.9300|
002102  f8a1b000          STRH     r11,[r1,#0]
;;;2525   
;;;2526   
;;;2527   #endif
;;;2528   
;;;2529   
;;;2530   #ifdef UKU_KONTUR
;;;2531   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;2532   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;2533   else ND_EXT[0]=1;
;;;2534   temp_SL=(signed long)adc_buff_[5];
;;;2535   temp_SL*=Ktext[0];
;;;2536   temp_SL/=20000L;
;;;2537   temp_SL-=273L;
;;;2538   t_ext[0]=(signed short)temp_SL;
;;;2539   #else 
;;;2540   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;2541   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002106  49d4              LDR      r1,|L1.9304|
002108  f6403ab7          MOV      r10,#0xbb7
00210c  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
002110  49d2              LDR      r1,|L1.9308|
002112  f2ab3e21          SUB      lr,r11,#0x321
002116  f8cde010          STR      lr,[sp,#0x10]
00211a  45d6              CMP      lr,r10
00211c  d201              BCS      |L1.8482|
00211e  700b              STRB     r3,[r1,#0]
002120  e000              B        |L1.8484|
                  |L1.8482|
;;;2542   else ND_EXT[0]=1;
002122  700a              STRB     r2,[r1,#0]
                  |L1.8484|
;;;2543   temp_SL=(signed long)adc_buff_[5];
;;;2544   temp_SL*=Ktext[0];
002124  f8dfa338          LDR      r10,|L1.9312|
002128  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
00212c  f8cda00c          STR      r10,[sp,#0xc]
002130  fb0afa0b          MUL      r10,r10,r11
;;;2545   temp_SL/=20000L;
002134  f6446e20          MOV      lr,#0x4e20
002138  fb9afafe          SDIV     r10,r10,lr
;;;2546   temp_SL-=273L;
00213c  f2aa1a11          SUB      r10,r10,#0x111
;;;2547   t_ext[0]=(signed short)temp_SL;
002140  f8dfe320          LDR      lr,|L1.9316|
002144  f8aea000          STRH     r10,[lr,#0]
;;;2548   /*
;;;2549   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2550   else ND_EXT[1]=1;
;;;2551   temp_SL=(signed long)adc_buff_[6];
;;;2552   temp_SL*=Ktext[1];
;;;2553   temp_SL/=20000L;
;;;2554   temp_SL-=273L;
;;;2555   t_ext[1]=(signed short)temp_SL;	*/
;;;2556   #endif
;;;2557   
;;;2558   #ifdef UKU_220
;;;2559   
;;;2560   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2561   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;2562   else ND_EXT[1]=1;
;;;2563   temp_SL=(signed long)adc_buff_[3];
;;;2564   temp_SL*=Ktext[1];
;;;2565   temp_SL/=20000L;
;;;2566   temp_SL-=273L;
;;;2567   t_ext[1]=(signed short)temp_SL;
;;;2568   
;;;2569   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2570   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;2571   else ND_EXT[2]=1;
;;;2572   temp_SL=(signed long)adc_buff_[10];
;;;2573   temp_SL*=Ktext[2];
;;;2574   temp_SL/=20000L;
;;;2575   temp_SL-=273L;
;;;2576   t_ext[2]=(signed short)temp_SL;
;;;2577   
;;;2578   #else
;;;2579   
;;;2580   
;;;2581   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2582   
;;;2583   //Внешний датчик температуры 
;;;2584   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002148  f8dda014          LDR      r10,[sp,#0x14]
00214c  f6403eb7          MOV      lr,#0xbb7
002150  45f2              CMP      r10,lr
002152  d201              BCS      |L1.8536|
002154  700b              STRB     r3,[r1,#0]
002156  e000              B        |L1.8538|
                  |L1.8536|
;;;2585   else ND_EXT[0]=1;
002158  700a              STRB     r2,[r1,#0]
                  |L1.8538|
;;;2586   temp_SL=(signed long)adc_buff_[6];
;;;2587   temp_SL*=Ktext[0];
00215a  f8dda00c          LDR      r10,[sp,#0xc]
00215e  fb0afa09          MUL      r10,r10,r9
;;;2588   temp_SL/=20000L;
002162  f6446920          MOV      r9,#0x4e20
002166  fb9af9f9          SDIV     r9,r10,r9
;;;2589   temp_SL-=273L;
00216a  f2a91911          SUB      r9,r9,#0x111
;;;2590   t_ext[0]=(signed short)temp_SL;
00216e  f8dfe2f4          LDR      lr,|L1.9316|
002172  f8ae9000          STRH     r9,[lr,#0]
;;;2591   
;;;2592   //Внешний датчик температуры №2
;;;2593   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002176  f8dd9010          LDR      r9,[sp,#0x10]
00217a  f6403ab7          MOV      r10,#0xbb7
00217e  45d1              CMP      r9,r10
002180  d201              BCS      |L1.8582|
002182  704b              STRB     r3,[r1,#1]
002184  e000              B        |L1.8584|
                  |L1.8582|
;;;2594   else ND_EXT[1]=1;
002186  704a              STRB     r2,[r1,#1]
                  |L1.8584|
;;;2595   temp_SL=(signed long)adc_buff_[5];
;;;2596   temp_SL*=Ktext[1];
002188  4ab5              LDR      r2,|L1.9312|
00218a  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
00218e  fb02f20b          MUL      r2,r2,r11
;;;2597   temp_SL/=20000L;
002192  f6446920          MOV      r9,#0x4e20
002196  fb92f2f9          SDIV     r2,r2,r9
;;;2598   temp_SL-=273L;
00219a  f2a21211          SUB      r2,r2,#0x111
;;;2599   t_ext[1]=(signed short)temp_SL;
00219e  fa0ffa82          SXTH     r10,r2
0021a2  4ab0              LDR      r2,|L1.9316|
0021a4  f8a2a002          STRH     r10,[r2,#2]
;;;2600   #else
;;;2601   
;;;2602   
;;;2603   
;;;2604   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2605   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2606   else ND_EXT[1]=1;
;;;2607   temp_SL=(signed long)adc_buff_[6];
;;;2608   temp_SL*=Ktext[1];
;;;2609   temp_SL/=20000L;
;;;2610   temp_SL-=273L;
;;;2611   t_ext[1]=(signed short)temp_SL;
;;;2612   
;;;2613   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2614   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;2615   else ND_EXT[2]=1;
;;;2616   temp_SL=(signed long)adc_buff_[3];
;;;2617   temp_SL*=Ktext[2];
;;;2618   temp_SL/=20000L;
;;;2619   temp_SL-=273L;
;;;2620   t_ext[2]=(signed short)temp_SL;
;;;2621   
;;;2622   #endif
;;;2623   #endif
;;;2624   
;;;2625   #ifdef UKU_220_V2
;;;2626   
;;;2627   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2628   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;2629   else ND_EXT[1]=1;
;;;2630   temp_SL=(signed long)adc_buff_[3];
;;;2631   temp_SL*=Ktext[1];
;;;2632   temp_SL/=20000L;
;;;2633   temp_SL-=273L;
;;;2634   t_ext[1]=(signed short)temp_SL;
;;;2635   
;;;2636   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2637   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;2638   else ND_EXT[2]=1;
;;;2639   temp_SL=(signed long)adc_buff_[10];
;;;2640   temp_SL*=Ktext[2];
;;;2641   temp_SL/=20000L;
;;;2642   temp_SL-=273L;
;;;2643   t_ext[2]=(signed short)temp_SL;
;;;2644   
;;;2645   #else
;;;2646   
;;;2647   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2648   //Ток батареи
;;;2649   if(bps[8]._device==dIBAT_METR)
0021a8  f89422e0          LDRB     r2,[r4,#0x2e0]  ; bps
;;;2650   	{
;;;2651   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;2652   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;2653   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;2654   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;2655   	if(!bIBAT_SMKLBR)
;;;2656   		{
;;;2657   		signed long temp_SL;
;;;2658   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;2659   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;2660   		temp_SL*=(signed long)Kibat1[0];
;;;2661   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;2662   	
;;;2663   		Ib_ips_termokompensat =(signed short)temp_SL;
0021ac  f8df92b8          LDR      r9,|L1.9320|
0021b0  2a09              CMP      r2,#9                 ;2649
0021b2  d15f              BNE      |L1.8820|
0021b4  f89422e6          LDRB     r2,[r4,#0x2e6]        ;2651  ; bps
0021b8  f894b2e7          LDRB     r11,[r4,#0x2e7]       ;2651  ; bps
0021bc  f8dfe2ac          LDR      lr,|L1.9324|
0021c0  eb02220b          ADD      r2,r2,r11,LSL #8      ;2651
0021c4  f8ce2000          STR      r2,[lr,#0]            ;2651  ; ibat_metr_buff_
0021c8  9202              STR      r2,[sp,#8]            ;2651
0021ca  f89422e8          LDRB     r2,[r4,#0x2e8]        ;2652  ; bps
0021ce  f894b2e9          LDRB     r11,[r4,#0x2e9]       ;2652  ; bps
0021d2  eb02220b          ADD      r2,r2,r11,LSL #8      ;2652
0021d6  f8ce2004          STR      r2,[lr,#4]            ;2652  ; ibat_metr_buff_
0021da  f894b2ea          LDRB     r11,[r4,#0x2ea]       ;2653  ; bps
0021de  f894e2eb          LDRB     lr,[r4,#0x2eb]        ;2653  ; bps
0021e2  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2653
0021e6  f8dfe288          LDR      lr,|L1.9328|
0021ea  fa0ffb8b          SXTH     r11,r11               ;2653
0021ee  f8aeb000          STRH     r11,[lr,#0]           ;2653
0021f2  f1bb0f00          CMP      r11,#0                ;2654
0021f6  d005              BEQ      |L1.8708|
0021f8  f8dfb278          LDR      r11,|L1.9332|
0021fc  f04f0e32          MOV      lr,#0x32              ;2654
002200  f8abe000          STRH     lr,[r11,#0]           ;2654
                  |L1.8708|
002204  d136              BNE      |L1.8820|
002206  f8ddb008          LDR      r11,[sp,#8]           ;2658
00220a  ebab0b02          SUB      r11,r11,r2            ;2659
00220e  4a9a              LDR      r2,|L1.9336|
002210  f9b22000          LDRSH    r2,[r2,#0]            ;2660  ; Kibat1
002214  fb02f20b          MUL      r2,r2,r11             ;2660
002218  f5a04ba8          SUB      r11,r0,#0x5400        ;2661
00221c  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;2661
002220  d00f              BEQ      |L1.8770|
002222  f1bb0b01          SUBS     r11,r11,#1            ;2661
002226  d00c              BEQ      |L1.8770|
002228  4560              CMP      r0,r12                ;2661
00222a  d00a              BEQ      |L1.8770|
00222c  42a8              CMP      r0,r5                 ;2661
00222e  d008              BEQ      |L1.8770|
002230  f1bb0534          SUBS     r5,r11,#0x34          ;2661
002234  d005              BEQ      |L1.8770|
002236  3528              ADDS     r5,r5,#0x28           ;2661
002238  d003              BEQ      |L1.8770|
00223a  3d14              SUBS     r5,r5,#0x14           ;2661
00223c  d001              BEQ      |L1.8770|
00223e  1e6d              SUBS     r5,r5,#1              ;2661
002240  d103              BNE      |L1.8778|
                  |L1.8770|
002242  f44f65fa          MOV      r5,#0x7d0             ;2661
002246  fb92f2f5          SDIV     r2,r2,r5              ;2661
                  |L1.8778|
00224a  b215              SXTH     r5,r2
00224c  f8a95000          STRH     r5,[r9,#0]
;;;2664   		if(bIBAT_SMKLBR_cnt)
002250  f8dfc220          LDR      r12,|L1.9332|
;;;2665   			{
;;;2666   			bIBAT_SMKLBR_cnt--;
;;;2667   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
002254  f8dfb224          LDR      r11,|L1.9340|
002258  f9bc2000          LDRSH    r2,[r12,#0]           ;2664  ; bIBAT_SMKLBR_cnt
00225c  b142              CBZ      r2,|L1.8816|
00225e  f1a20201          SUB      r2,r2,#1              ;2666
002262  f8ac2000          STRH     r2,[r12,#0]           ;2666
002266  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
00226a  f8a92000          STRH     r2,[r9,#0]
00226e  e001              B        |L1.8820|
                  |L1.8816|
;;;2668   			}
;;;2669   		else 
;;;2670   			{
;;;2671   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
002270  f8ab5000          STRH     r5,[r11,#0]
                  |L1.8820|
;;;2672   			}
;;;2673   		}
;;;2674   	}
;;;2675   
;;;2676   bat[0]._Ub=load_U;
002274  4a82              LDR      r2,|L1.9344|
002276  f8a28002          STRH     r8,[r2,#2]
00227a  f8cd8004          STR      r8,[sp,#4]
;;;2677   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
00227e  f5a045ac          SUB      r5,r0,#0x5600
002282  3d02              SUBS     r5,#2
002284  d103              BNE      |L1.8846|
002286  8910              LDRH     r0,[r2,#8]  ; bat
002288  f8a90000          STRH     r0,[r9,#0]
00228c  e002              B        |L1.8852|
                  |L1.8846|
;;;2678   else bat[0]._Ib=Ib_ips_termokompensat;
00228e  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002292  8110              STRH     r0,[r2,#8]
                  |L1.8852|
;;;2679   
;;;2680   #endif
;;;2681   #endif
;;;2682   
;;;2683   
;;;2684   #ifdef UKU_TELECORE2015
;;;2685   
;;;2686   //Внешний датчик температуры №1
;;;2687   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;2688   else ND_EXT[0]=1;
;;;2689   temp_SL=(signed long)adc_buff_[7];
;;;2690   temp_SL*=Ktext[0];
;;;2691   temp_SL/=20000L;
;;;2692   temp_SL-=273L;
;;;2693   t_ext[0]=(signed short)temp_SL;
;;;2694   
;;;2695   
;;;2696   //Внешний датчик температуры №2
;;;2697   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2698   else ND_EXT[1]=1;
;;;2699   temp_SL=(signed long)adc_buff_[6];
;;;2700   temp_SL*=Ktext[1];
;;;2701   temp_SL/=20000L;
;;;2702   temp_SL-=273L;
;;;2703   t_ext[1]=(signed short)temp_SL;
;;;2704   
;;;2705   #endif
;;;2706   
;;;2707   #ifdef UKU_TELECORE2017
;;;2708   
;;;2709   //Внешний датчик температуры №1
;;;2710   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;2711   else ND_EXT[0]=1;
;;;2712   temp_SL=(signed long)adc_buff_[7];
;;;2713   temp_SL*=Ktext[0];
;;;2714   temp_SL/=20000L;
;;;2715   temp_SL-=273L;
;;;2716   t_ext[0]=(signed short)temp_SL;
;;;2717   
;;;2718   
;;;2719   //Внешний датчик температуры №2
;;;2720   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2721   else ND_EXT[1]=1;
;;;2722   temp_SL=(signed long)adc_buff_[6];
;;;2723   temp_SL*=Ktext[1];
;;;2724   temp_SL/=20000L;
;;;2725   temp_SL-=273L;
;;;2726   t_ext[1]=(signed short)temp_SL;
;;;2727   
;;;2728   #endif
;;;2729   
;;;2730   //напряжение ввода
;;;2731   temp_SL=(signed long)adc_buff_ext_[0];
002294  f8dfc1ec          LDR      r12,|L1.9348|
002298  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;2732   temp_SL*=Kunet_ext[0];
00229c  f8df81e8          LDR      r8,|L1.9352|
0022a0  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
0022a4  4368              MULS     r0,r5,r0
;;;2733   temp_SL/=4000L;
0022a6  f44f6b7a          MOV      r11,#0xfa0
0022aa  fb90f0fb          SDIV     r0,r0,r11
;;;2734   Uvv[0]=(signed short)temp_SL;
0022ae  4d77              LDR      r5,|L1.9356|
0022b0  b280              UXTH     r0,r0
0022b2  8028              STRH     r0,[r5,#0]
;;;2735   if(Uvv[0]<100) Uvv0=Uvv[0];
0022b4  f8dfe1d8          LDR      lr,|L1.9360|
0022b8  2864              CMP      r0,#0x64
0022ba  d202              BCS      |L1.8898|
0022bc  f8ae0000          STRH     r0,[lr,#0]
0022c0  e003              B        |L1.8906|
                  |L1.8898|
;;;2736   else Uvv0=net_U;
0022c2  4874              LDR      r0,|L1.9364|
0022c4  8800              LDRH     r0,[r0,#0]  ; net_U
0022c6  f8ae0000          STRH     r0,[lr,#0]
                  |L1.8906|
;;;2737   
;;;2738   //напряжение пэс
;;;2739   temp_SL=(signed long)adc_buff_ext_[1];
0022ca  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;2740   temp_SL*=Kunet_ext[1];
0022ce  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
0022d2  fb00f00c          MUL      r0,r0,r12
;;;2741   temp_SL/=4000L;
0022d6  fb90f0fb          SDIV     r0,r0,r11
;;;2742   Uvv[1]=(signed short)temp_SL;
0022da  8068              STRH     r0,[r5,#2]
;;;2743   
;;;2744   
;;;2745   //напряжение ввода трехфазное
;;;2746   temp_SL=(signed long)eb2_data_short[0];
0022dc  4d6e              LDR      r5,|L1.9368|
0022de  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;2747   temp_SL*=Kvv_eb2[0];
0022e2  f8dfc1b8          LDR      r12,|L1.9372|
0022e6  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
0022ea  fb08f800          MUL      r8,r8,r0
;;;2748   temp_SL/=6000L;
0022ee  f2417070          MOV      r0,#0x1770
0022f2  fb98fbf0          SDIV     r11,r8,r0
;;;2749   Uvv_eb2[0]=(signed short)temp_SL;
0022f6  f8df81a8          LDR      r8,|L1.9376|
0022fa  f8a8b000          STRH     r11,[r8,#0]
;;;2750   
;;;2751   temp_SL=(signed long)eb2_data_short[1];
0022fe  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;2752   temp_SL*=Kvv_eb2[1];
002302  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
002306  fb0efe0b          MUL      lr,lr,r11
;;;2753   temp_SL/=6000L;
00230a  fb9efbf0          SDIV     r11,lr,r0
;;;2754   Uvv_eb2[1]=(signed short)temp_SL;
00230e  f8a8b002          STRH     r11,[r8,#2]
;;;2755   
;;;2756   temp_SL=(signed long)eb2_data_short[2];
002312  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;2757   temp_SL*=Kvv_eb2[2];
002316  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
00231a  fb0cfc0b          MUL      r12,r12,r11
;;;2758   temp_SL/=6000L;
00231e  fb9cfcf0          SDIV     r12,r12,r0
;;;2759   Uvv_eb2[2]=(signed short)temp_SL;
002322  f8a8c004          STRH     r12,[r8,#4]
;;;2760   
;;;2761   //напряжение пэс трехфазное
;;;2762   temp_SL=(signed long)eb2_data_short[3];
002326  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;2763   temp_SL*=Kpes_eb2[0];
00232a  f8dfc178          LDR      r12,|L1.9380|
00232e  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
002332  fb08f80b          MUL      r8,r8,r11
;;;2764   temp_SL/=6000L;
002336  fb98fbf0          SDIV     r11,r8,r0
;;;2765   Upes_eb2[0]=(signed short)temp_SL;
00233a  f8df816c          LDR      r8,|L1.9384|
00233e  f8a8b000          STRH     r11,[r8,#0]
;;;2766   
;;;2767   temp_SL=(signed long)eb2_data_short[4];
002342  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;2768   temp_SL*=Kpes_eb2[1];
002346  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
00234a  fb0efe0b          MUL      lr,lr,r11
;;;2769   temp_SL/=6000L;
00234e  fb9efbf0          SDIV     r11,lr,r0
;;;2770   Upes_eb2[1]=(signed short)temp_SL;
002352  f8a8b002          STRH     r11,[r8,#2]
;;;2771   
;;;2772   temp_SL=(signed long)eb2_data_short[5];
002356  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;2773   temp_SL*=Kpes_eb2[2];
00235a  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
00235e  fb05f50b          MUL      r5,r5,r11
;;;2774   temp_SL/=6000L;
002362  fb95f0f0          SDIV     r0,r5,r0
;;;2775   Upes_eb2[2]=(signed short)temp_SL;
002366  f8a80004          STRH     r0,[r8,#4]
;;;2776   
;;;2777   //Вычисление температуры шкафа
;;;2778   
;;;2779   ibt._T[0]=t_ext[1]+273;
00236a  f20a1a11          ADD      r10,r10,#0x111
00236e  fa0ffc8a          SXTH     r12,r10
002372  f8dfa138          LDR      r10,|L1.9388|
002376  483b              LDR      r0,|L1.9316|
002378  f8aac000          STRH     r12,[r10,#0]
;;;2780   ibt._T[1]=t_ext[2]+273;
00237c  8880              LDRH     r0,[r0,#4]  ; t_ext
00237e  f2001011          ADD      r0,r0,#0x111
002382  fa0ff880          SXTH     r8,r0
002386  f8aa8002          STRH     r8,[r10,#2]
;;;2781   
;;;2782   ibt._nd[0]=ND_EXT[1];
00238a  784d              LDRB     r5,[r1,#1]  ; ND_EXT
00238c  f88a5008          STRB     r5,[r10,#8]
;;;2783   ibt._nd[1]=ND_EXT[2];
002390  7888              LDRB     r0,[r1,#2]  ; ND_EXT
002392  f88a0009          STRB     r0,[r10,#9]
;;;2784   
;;;2785   #ifndef UKU_TELECORE2015
;;;2786   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;2787   	{
;;;2788   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
002396  4946              LDR      r1,|L1.9392|
002398  b905              CBNZ     r5,|L1.9116|
00239a  b110              CBZ      r0,|L1.9122|
                  |L1.9116|
;;;2789   	}
;;;2790   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
00239c  2d01              CMP      r5,#1
00239e  d00a              BEQ      |L1.9142|
0023a0  e00a              B        |L1.9144|
                  |L1.9122|
0023a2  eb0c0008          ADD      r0,r12,r8             ;2788
0023a6  eb0075d0          ADD      r5,r0,r0,LSR #31      ;2788
0023aa  f46f7088          MVN      r0,#0x110             ;2788
0023ae  eb000065          ADD      r0,r0,r5,ASR #1       ;2788
0023b2  8008              STRH     r0,[r1,#0]            ;2788
0023b4  e01e              B        |L1.9204|
                  |L1.9142|
0023b6  b108              CBZ      r0,|L1.9148|
                  |L1.9144|
;;;2791   	{
;;;2792   	t_box=ibt._T[1]-273;
;;;2793   	}
;;;2794   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
0023b8  b12d              CBZ      r5,|L1.9158|
0023ba  e006              B        |L1.9162|
                  |L1.9148|
0023bc  f2a81811          SUB      r8,r8,#0x111          ;2792
0023c0  f8a18000          STRH     r8,[r1,#0]            ;2792
0023c4  e016              B        |L1.9204|
                  |L1.9158|
0023c6  2801              CMP      r0,#1
0023c8  d002              BEQ      |L1.9168|
                  |L1.9162|
;;;2795   	{
;;;2796   	t_box=ibt._T[0]-273;
;;;2797   	}
;;;2798   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
0023ca  2d01              CMP      r5,#1
0023cc  d005              BEQ      |L1.9178|
0023ce  e011              B        |L1.9204|
                  |L1.9168|
0023d0  f2ac1c11          SUB      r12,r12,#0x111        ;2796
0023d4  f8a1c000          STRH     r12,[r1,#0]           ;2796
0023d8  e00c              B        |L1.9204|
                  |L1.9178|
0023da  2801              CMP      r0,#1
0023dc  d10a              BNE      |L1.9204|
;;;2799   	{
;;;2800   	if(t_ext_can_nd<5)t_box= t_ext_can;
0023de  4835              LDR      r0,|L1.9396|
0023e0  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
0023e2  2805              CMP      r0,#5
0023e4  d203              BCS      |L1.9198|
0023e6  4834              LDR      r0,|L1.9400|
0023e8  8800              LDRH     r0,[r0,#0]  ; t_ext_can
0023ea  8008              STRH     r0,[r1,#0]
0023ec  e002              B        |L1.9204|
                  |L1.9198|
;;;2801   	else t_box=20;
0023ee  f04f0014          MOV      r0,#0x14
0023f2  8008              STRH     r0,[r1,#0]
                  |L1.9204|
;;;2802   	}
;;;2803   #endif
;;;2804   /*
;;;2805   //Вычисление температуры шкафа
;;;2806   
;;;2807   ibt._T[0]=bat[0]._Tb+273;
;;;2808   ibt._T[1]=bat[1]._Tb+273;
;;;2809   ibt._T[2]=t_ext[1]+273;
;;;2810   ibt._T[3]=t_ext[2]+273;
;;;2811   
;;;2812   ibt._nd[0]=bat[0]._nd;
;;;2813   ibt._nd[1]=bat[1]._nd;
;;;2814   ibt._nd[2]=ND_EXT[1];
;;;2815   ibt._nd[3]=ND_EXT[2];
;;;2816   
;;;2817   ibt._avg1=0;
;;;2818   ibt._avg_cnt=4;
;;;2819   
;;;2820   if(ibt._nd[0]==0)
;;;2821   	{
;;;2822   	ibt._avg1+=ibt._T[0];
;;;2823   	}
;;;2824   else 
;;;2825   	{
;;;2826   	ibt._avg_cnt--;
;;;2827   	}
;;;2828   
;;;2829   if(ibt._nd[1]==0)
;;;2830   	{
;;;2831   	ibt._avg1+=ibt._T[1];
;;;2832   	}
;;;2833   else 
;;;2834   	{
;;;2835   	ibt._avg_cnt--;
;;;2836   	}
;;;2837   
;;;2838   if(ibt._nd[2]==0)
;;;2839   	{
;;;2840   	ibt._avg1+=ibt._T[2];
;;;2841   	}
;;;2842   else 
;;;2843   	{
;;;2844   	ibt._avg_cnt--;
;;;2845   	}
;;;2846   
;;;2847   if(ibt._nd[3]==0)
;;;2848   	{
;;;2849   	ibt._avg1+=ibt._T[3];
;;;2850   	}
;;;2851   else 
;;;2852   	{
;;;2853   	ibt._avg_cnt--;
;;;2854   	}
;;;2855   
;;;2856   if(ibt._avg_cnt==0)
;;;2857   	{
;;;2858   	}
;;;2859   else
;;;2860   	{
;;;2861   	ibt._avg1/=ibt._avg_cnt;
;;;2862   	}
;;;2863   
;;;2864   
;;;2865   if(ibt._nd[0]!=0)
;;;2866   	{
;;;2867   	ibt._T_dispers[0]=0;
;;;2868   	}
;;;2869   else 
;;;2870   	{
;;;2871   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;2872   	}
;;;2873   
;;;2874   if(ibt._nd[1]!=0)
;;;2875   	{
;;;2876   	ibt._T_dispers[1]=0;
;;;2877   	}
;;;2878   else 
;;;2879   	{
;;;2880   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;2881   	}
;;;2882   
;;;2883   if(ibt._nd[2]!=0)
;;;2884   	{
;;;2885   	ibt._T_dispers[2]=0;
;;;2886   	}
;;;2887   else 
;;;2888   	{
;;;2889   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;2890   	}
;;;2891   
;;;2892   if(ibt._nd[3]!=0)
;;;2893   	{
;;;2894   	ibt._T_dispers[3]=0;
;;;2895   	}
;;;2896   else 
;;;2897   	{
;;;2898   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;2899   	}
;;;2900   
;;;2901   if(	ibt._nd[0]&&
;;;2902   	ibt._nd[1]&&
;;;2903   	ibt._nd[2]&&
;;;2904   	ibt._nd[3]
;;;2905   	)
;;;2906   	{
;;;2907   	t_box=(bps[0]._Ti);
;;;2908   	}
;;;2909   
;;;2910   else if(	ibt._nd[0]||
;;;2911   	ibt._nd[1]||
;;;2912   	ibt._nd[2]||
;;;2913   	ibt._nd[3]
;;;2914   	)
;;;2915   	{
;;;2916   	t_box=(ibt._avg1-273);
;;;2917   	}
;;;2918   else 
;;;2919   	{
;;;2920   	ibt._max_dispers_num=0;
;;;2921   	ibt._max_dispers=ibt._T_dispers[0];
;;;2922   
;;;2923   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;2924   		{
;;;2925   		ibt._max_dispers_num=1;
;;;2926   		ibt._max_dispers=ibt._T_dispers[1];
;;;2927   		}
;;;2928   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;2929   		{
;;;2930   		ibt._max_dispers_num=2;
;;;2931   		ibt._max_dispers=ibt._T_dispers[2];
;;;2932   		}
;;;2933   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;2934   		{
;;;2935   		ibt._max_dispers_num=3;
;;;2936   		ibt._max_dispers=ibt._T_dispers[3];
;;;2937   		}
;;;2938   
;;;2939   	ibt._avg2=0;
;;;2940   
;;;2941   	if(ibt._max_dispers_num!=0)
;;;2942   		{
;;;2943   		ibt._avg2+=ibt._T[0];
;;;2944   		}
;;;2945   	if(ibt._max_dispers_num!=1)
;;;2946   		{
;;;2947   		ibt._avg2+=ibt._T[1];
;;;2948   		}
;;;2949   	if(ibt._max_dispers_num!=2)
;;;2950   		{
;;;2951   		ibt._avg2+=ibt._T[2];
;;;2952   		}
;;;2953   	if(ibt._max_dispers_num!=3)
;;;2954   		{
;;;2955   		ibt._avg2+=ibt._T[3];
;;;2956   		}
;;;2957   
;;;2958   	t_box=(ibt._avg2/3)-273;
;;;2959   
;;;2960   	}*/
;;;2961   
;;;2962   
;;;2963   //*********************************************
;;;2964   
;;;2965   #ifndef TELECORE
;;;2966   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
0023f4  4931              LDR      r1,|L1.9404|
0023f6  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
0023f8  2855              CMP      r0,#0x55
0023fa  d105              BNE      |L1.9224|
0023fc  9801              LDR      r0,[sp,#4]
0023fe  28c8              CMP      r0,#0xc8
002400  dd02              BLE      |L1.9224|
002402  8910              LDRH     r0,[r2,#8]  ; bat
002404  f8a60044          STRH     r0,[r6,#0x44]
                  |L1.9224|
;;;2967   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
002408  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
00240a  2855              CMP      r0,#0x55
00240c  d10b              BNE      |L1.9254|
00240e  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
002412  28c8              CMP      r0,#0xc8
002414  dd07              BLE      |L1.9254|
002416  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
00241a  f9b21008          LDRSH    r1,[r2,#8]  ; bat
00241e  4288              CMP      r0,r1
002420  dd01              BLE      |L1.9254|
002422  f8a60044          STRH     r0,[r6,#0x44]
                  |L1.9254|
;;;2968   #endif
;;;2969   
;;;2970   #ifdef TELECORE
;;;2971   Ibmax=0;
;;;2972   /*
;;;2973   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;2974   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;2975   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;2976   */
;;;2977   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;2978   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;2979   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;2980   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;2981   #endif
;;;2982   //Ibmax=bat[0]._Ib;
;;;2983   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;2984   
;;;2985   #ifdef UKU_TELECORE2017
;;;2986   Ibmax=0;
;;;2987   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;2988   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;2989   #endif
;;;2990   
;;;2991   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2992   Ibmax=Ib_ips_termokompensat;
002426  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
00242a  f8a60044          STRH     r0,[r6,#0x44]
;;;2993   #endif
;;;2994   for(i=0;i<NUMIST;i++)
00242e  f04f0100          MOV      r1,#0
002432  e075              B        |L1.9504|
                  |L1.9268|
                          DCD      load_U
                  |L1.9272|
                          DCD      Kuout
                  |L1.9276|
                          DCD      AUSW_MAIN
                  |L1.9280|
                          DCD      out_U
                  |L1.9284|
                          DCD      Kubps
                  |L1.9288|
                          DCD      bps_U
                  |L1.9292|
                          DCD      NUMIST
                  |L1.9296|
                          DCD      bps
                  |L1.9300|
                          DCD      bps_I
                  |L1.9304|
                          DCD      ||.bss||+0x40c
                  |L1.9308|
                          DCD      ND_EXT
                  |L1.9312|
                          DCD      Ktext
                  |L1.9316|
                          DCD      t_ext
                  |L1.9320|
                          DCD      Ib_ips_termokompensat
                  |L1.9324|
                          DCD      ibat_metr_buff_
                  |L1.9328|
                          DCD      bIBAT_SMKLBR
                  |L1.9332|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.9336|
                          DCD      Kibat1
                  |L1.9340|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.9344|
                          DCD      bat
                  |L1.9348|
                          DCD      adc_buff_ext_
                  |L1.9352|
                          DCD      Kunet_ext
                  |L1.9356|
                          DCD      Uvv
                  |L1.9360|
                          DCD      Uvv0
                  |L1.9364|
                          DCD      net_U
                  |L1.9368|
                          DCD      eb2_data_short
                  |L1.9372|
                          DCD      Kvv_eb2
                  |L1.9376|
                          DCD      Uvv_eb2
                  |L1.9380|
                          DCD      Kpes_eb2
                  |L1.9384|
                          DCD      Upes_eb2
                  |L1.9388|
                          DCD      ibt
                  |L1.9392|
                          DCD      t_box
                  |L1.9396|
                          DCD      t_ext_can_nd
                  |L1.9400|
                          DCD      t_ext_can
                  |L1.9404|
                          DCD      BAT_IS_ON
                  |L1.9408|
;;;2995   	{
;;;2996   	if(bps[i]._cnt<25)
0024c0  ebc100c1          RSB      r0,r1,r1,LSL #3
0024c4  eb001001          ADD      r0,r0,r1,LSL #4
0024c8  eb040080          ADD      r0,r4,r0,LSL #2
0024cc  78c5              LDRB     r5,[r0,#3]
0024ce  2d19              CMP      r5,#0x19
0024d0  d21c              BCS      |L1.9484|
;;;2997        	{
;;;2998        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0024d2  7985              LDRB     r5,[r0,#6]
0024d4  79c6              LDRB     r6,[r0,#7]
0024d6  eb052506          ADD      r5,r5,r6,LSL #8
0024da  6245              STR      r5,[r0,#0x24]
;;;2999        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0024dc  7a05              LDRB     r5,[r0,#8]
0024de  7a46              LDRB     r6,[r0,#9]
0024e0  eb052506          ADD      r5,r5,r6,LSL #8
0024e4  6205              STR      r5,[r0,#0x20]
;;;3000        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0024e6  7a85              LDRB     r5,[r0,#0xa]
0024e8  7ac6              LDRB     r6,[r0,#0xb]
0024ea  eb052506          ADD      r5,r5,r6,LSL #8
0024ee  61c5              STR      r5,[r0,#0x1c]
;;;3001        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
0024f0  7b05              LDRB     r5,[r0,#0xc]
0024f2  6285              STR      r5,[r0,#0x28]
;;;3002        	bps[i]._adr_ee=bps[i]._buff[7];
0024f4  7b45              LDRB     r5,[r0,#0xd]
0024f6  f8805052          STRB     r5,[r0,#0x52]
;;;3003        	bps[i]._flags_tm=bps[i]._buff[8];
0024fa  7b85              LDRB     r5,[r0,#0xe]
0024fc  f8805042          STRB     r5,[r0,#0x42]
;;;3004   	     bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
002500  7c05              LDRB     r5,[r0,#0x10]
002502  7c46              LDRB     r6,[r0,#0x11]
002504  eb052506          ADD      r5,r5,r6,LSL #8
002508  64c5              STR      r5,[r0,#0x4c]
00250a  e006              B        |L1.9498|
                  |L1.9484|
;;;3005        	} 
;;;3006   	else 
;;;3007        	{
;;;3008        	bps[i]._Uii=0; 
00250c  61c3              STR      r3,[r0,#0x1c]
;;;3009        	bps[i]._Ii=0;
00250e  6243              STR      r3,[r0,#0x24]
;;;3010        	bps[i]._Uin=0;
002510  6203              STR      r3,[r0,#0x20]
;;;3011        	bps[i]._Ti=0;
002512  6283              STR      r3,[r0,#0x28]
;;;3012        	bps[i]._flags_tm=0; 
002514  f8803042          STRB     r3,[r0,#0x42]
;;;3013   	     bps[i]._rotor=0;    
002518  64c3              STR      r3,[r0,#0x4c]
                  |L1.9498|
00251a  f1010101          ADD      r1,r1,#1              ;2994
00251e  b2c9              UXTB     r1,r1                 ;2994
                  |L1.9504|
002520  42b9              CMP      r1,r7                 ;2994
002522  dbcd              BLT      |L1.9408|
;;;3014        	}
;;;3015        
;;;3016        }
;;;3017   
;;;3018   load_I=0;
002524  4dff              LDR      r5,|L1.10532|
;;;3019   #ifdef TELECORE
;;;3020   
;;;3021   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3022   	{
;;;3023   	load_I-=lakb[i]._ch_curr/10;
;;;3024   	}*/
;;;3025   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3026   #elif UKU_TELECORE2017
;;;3027   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3028   #else
;;;3029   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
002526  f9b21008          LDRSH    r1,[r2,#8]  ; bat
00252a  f04f000a          MOV      r0,#0xa
00252e  fb91f1f0          SDIV     r1,r1,r0
002532  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
002536  fb92f0f0          SDIV     r0,r2,r0
00253a  4408              ADD      r0,r0,r1
00253c  f1c00000          RSB      r0,r0,#0
002540  b206              SXTH     r6,r0
002542  802e              STRH     r6,[r5,#0]
;;;3030   #endif
;;;3031   Isumm=0;
002544  4af8              LDR      r2,|L1.10536|
002546  8013              STRH     r3,[r2,#0]
;;;3032   
;;;3033   for(i=0;i<NUMIST;i++)
002548  f04f0000          MOV      r0,#0
00254c  e012              B        |L1.9588|
                  |L1.9550|
;;;3034        {
;;;3035        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
00254e  ebc001c0          RSB      r1,r0,r0,LSL #3
002552  eb011100          ADD      r1,r1,r0,LSL #4
002556  eb040181          ADD      r1,r4,r1,LSL #2
00255a  f891c003          LDRB     r12,[r1,#3]
00255e  f1bc0f05          CMP      r12,#5
002562  d204              BCS      |L1.9582|
002564  6a49              LDR      r1,[r1,#0x24]
002566  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
00256a  4461              ADD      r1,r1,r12
00256c  8011              STRH     r1,[r2,#0]
                  |L1.9582|
00256e  f1000001          ADD      r0,r0,#1              ;3033
002572  b2c0              UXTB     r0,r0                 ;3033
                  |L1.9588|
002574  42b8              CMP      r0,r7                 ;3033
002576  dbea              BLT      |L1.9550|
;;;3036        }  
;;;3037        
;;;3038   load_I=load_I+Isumm;
002578  8810              LDRH     r0,[r2,#0]  ; Isumm
00257a  4430              ADD      r0,r0,r6
00257c  b200              SXTH     r0,r0
00257e  8028              STRH     r0,[r5,#0]
;;;3039   if(load_I<0)load_I=0;
002580  2800              CMP      r0,#0
002582  da00              BGE      |L1.9606|
002584  802b              STRH     r3,[r5,#0]
                  |L1.9606|
;;;3040   
;;;3041   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3042   load_I=0;
002586  802b              STRH     r3,[r5,#0]
;;;3043   
;;;3044   Isumm=0;
002588  8013              STRH     r3,[r2,#0]
;;;3045   
;;;3046   for(i=0;i<NUMIST;i++)
00258a  f04f0000          MOV      r0,#0
00258e  e00f              B        |L1.9648|
                  |L1.9616|
;;;3047        {
;;;3048        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
002590  ebc001c0          RSB      r1,r0,r0,LSL #3
002594  eb011100          ADD      r1,r1,r0,LSL #4
002598  eb040181          ADD      r1,r4,r1,LSL #2
00259c  78ce              LDRB     r6,[r1,#3]
00259e  2e05              CMP      r6,#5
0025a0  d203              BCS      |L1.9642|
0025a2  6a49              LDR      r1,[r1,#0x24]
0025a4  8816              LDRH     r6,[r2,#0]  ; Isumm
0025a6  4431              ADD      r1,r1,r6
0025a8  8011              STRH     r1,[r2,#0]
                  |L1.9642|
0025aa  f1000001          ADD      r0,r0,#1              ;3046
0025ae  b2c0              UXTB     r0,r0                 ;3046
                  |L1.9648|
0025b0  42b8              CMP      r0,r7                 ;3046
0025b2  dbed              BLT      |L1.9616|
;;;3049        }  
;;;3050        
;;;3051   load_I=load_I+Isumm;
0025b4  8811              LDRH     r1,[r2,#0]  ; Isumm
0025b6  eb030001          ADD      r0,r3,r1
0025ba  b200              SXTH     r0,r0
0025bc  8028              STRH     r0,[r5,#0]
;;;3052   if(load_I<0)load_I=0;
0025be  2800              CMP      r0,#0
0025c0  da00              BGE      |L1.9668|
0025c2  802b              STRH     r3,[r5,#0]
                  |L1.9668|
;;;3053   
;;;3054   #endif
;;;3055   #ifdef IPS_SGEP_GAZPROM
;;;3056   load_I=Isumm;
;;;3057   #endif
;;;3058   
;;;3059   
;;;3060   #ifdef UKU_GLONASS
;;;3061   inv[0]._Uio=6;
;;;3062   if (NUMINV)
;;;3063   	{
;;;3064   	for(i=0;i<NUMINV;i++)
;;;3065   		{
;;;3066   		if(bps[i+first_inv_slot]._cnt<25)
;;;3067        		{
;;;3068        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3069        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3070        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3071        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3072        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3073   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3074   			inv[i]._cnt=0;    
;;;3075        		} 
;;;3076   		else 
;;;3077        		{
;;;3078        		inv[i]._Uio=0; 
;;;3079        		inv[i]._Ii=0;
;;;3080        		inv[i]._Uin=0;
;;;3081        		inv[i]._Ti=0;
;;;3082        		inv[i]._flags_tm=0; 
;;;3083   //	     	inv[i]._rotor0;
;;;3084   			inv[i]._cnt=25;    
;;;3085        		}
;;;3086        	}
;;;3087      	}
;;;3088   #endif
;;;3089   
;;;3090   #ifndef UKU_GLONASS
;;;3091   if (NUMINV)
0025c4  48d9              LDR      r0,|L1.10540|
0025c6  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0025ca  2d00              CMP      r5,#0
0025cc  d066              BEQ      |L1.9884|
;;;3092   	{
;;;3093   	for(i=0;i<NUMINV;i++)
0025ce  f04f0200          MOV      r2,#0
;;;3094   		{
;;;3095   		if(bps[i+20]._cnt<25)
;;;3096        		{
;;;3097        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
0025d2  4ed7              LDR      r6,|L1.10544|
0025d4  e060              B        |L1.9880|
                  |L1.9686|
0025d6  f1020014          ADD      r0,r2,#0x14           ;3095
0025da  ebc001c0          RSB      r1,r0,r0,LSL #3       ;3095
0025de  eb011000          ADD      r0,r1,r0,LSL #4       ;3095
0025e2  eb040080          ADD      r0,r4,r0,LSL #2       ;3095
0025e6  78c1              LDRB     r1,[r0,#3]            ;3095
0025e8  2919              CMP      r1,#0x19              ;3095
0025ea  d239              BCS      |L1.9824|
0025ec  7981              LDRB     r1,[r0,#6]
0025ee  79c7              LDRB     r7,[r0,#7]
0025f0  eb012707          ADD      r7,r1,r7,LSL #8
0025f4  eb020142          ADD      r1,r2,r2,LSL #1
0025f8  eb061141          ADD      r1,r6,r1,LSL #5
0025fc  61cf              STR      r7,[r1,#0x1c]
;;;3098        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
0025fe  7a07              LDRB     r7,[r0,#8]
002600  f890c009          LDRB     r12,[r0,#9]
002604  eb07270c          ADD      r7,r7,r12,LSL #8
002608  62cf              STR      r7,[r1,#0x2c]
;;;3099        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
00260a  7a87              LDRB     r7,[r0,#0xa]
00260c  f890c00b          LDRB     r12,[r0,#0xb]
002610  eb07270c          ADD      r7,r7,r12,LSL #8
002614  618f              STR      r7,[r1,#0x18]
;;;3100        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
002616  7b07              LDRB     r7,[r0,#0xc]
002618  620f              STR      r7,[r1,#0x20]
;;;3101        		inv[i]._flags_tm=bps[i+20]._buff[7];
00261a  7b47              LDRB     r7,[r0,#0xd]
00261c  f8817046          STRB     r7,[r1,#0x46]
;;;3102        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
002620  7b87              LDRB     r7,[r0,#0xe]
002622  f890c00f          LDRB     r12,[r0,#0xf]
002626  eb07270c          ADD      r7,r7,r12,LSL #8
00262a  628f              STR      r7,[r1,#0x28]
;;;3103        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
00262c  7c07              LDRB     r7,[r0,#0x10]
00262e  f890c011          LDRB     r12,[r0,#0x11]
002632  eb07270c          ADD      r7,r7,r12,LSL #8
002636  624f              STR      r7,[r1,#0x24]
;;;3104   			inv[i]._cnt=0;
002638  708b              STRB     r3,[r1,#2]
;;;3105   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
00263a  7c87              LDRB     r7,[r0,#0x12]
00263c  f8817059          STRB     r7,[r1,#0x59]
;;;3106   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
002640  7cc7              LDRB     r7,[r0,#0x13]
002642  f881705a          STRB     r7,[r1,#0x5a]
;;;3107   			inv[i]._Pnom=bps[i+20]._buff[14]; 
002646  7d07              LDRB     r7,[r0,#0x14]
002648  f8817058          STRB     r7,[r1,#0x58]
;;;3108   			inv[i]._net_contr_en=bps[i+20]._buff[15];
00264c  7d47              LDRB     r7,[r0,#0x15]
00264e  f881705b          STRB     r7,[r1,#0x5b]
;;;3109   			inv[i]._pwm_en=bps[i+20]._buff[16];  
002652  7d87              LDRB     r7,[r0,#0x16]
002654  f881705c          STRB     r7,[r1,#0x5c]
;;;3110   			inv[i]._phase_mode=bps[i+20]._buff[17];  
002658  7dc0              LDRB     r0,[r0,#0x17]
00265a  f881005d          STRB     r0,[r1,#0x5d]
00265e  e018              B        |L1.9874|
                  |L1.9824|
;;;3111        		} 
;;;3112   		else 
;;;3113        		{
;;;3114         		inv[i]._Ii=0;
002660  eb020042          ADD      r0,r2,r2,LSL #1
002664  eb061040          ADD      r0,r6,r0,LSL #5
002668  61c3              STR      r3,[r0,#0x1c]
;;;3115   			inv[i]._Pio=0;
00266a  62c3              STR      r3,[r0,#0x2c]
;;;3116   			inv[i]._Uio=0;
00266c  6183              STR      r3,[r0,#0x18]
;;;3117        		inv[i]._Ti=0;
00266e  6203              STR      r3,[r0,#0x20]
;;;3118        		inv[i]._flags_tm=0; 
002670  f8803046          STRB     r3,[r0,#0x46]
;;;3119        		inv[i]._Uil=0;
002674  6243              STR      r3,[r0,#0x24]
;;;3120        		inv[i]._Uin=0;
002676  6283              STR      r3,[r0,#0x28]
;;;3121   			inv[i]._cnt=25; 
002678  f04f0119          MOV      r1,#0x19
00267c  7081              STRB     r1,[r0,#2]
;;;3122   			inv[i]._Uoutmin=0; 
00267e  f8803059          STRB     r3,[r0,#0x59]
;;;3123   			inv[i]._Uoutmax=0; 
002682  f880305a          STRB     r3,[r0,#0x5a]
;;;3124   			inv[i]._Pnom=0; 
002686  f8803058          STRB     r3,[r0,#0x58]
;;;3125   			inv[i]._net_contr_en=0;
00268a  f880305b          STRB     r3,[r0,#0x5b]
;;;3126   			inv[i]._pwm_en=0;   
00268e  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.9874|
002692  f1020201          ADD      r2,r2,#1              ;3093
002696  b2d2              UXTB     r2,r2                 ;3093
                  |L1.9880|
002698  42aa              CMP      r2,r5                 ;3093
00269a  db9c              BLT      |L1.9686|
                  |L1.9884|
;;;3127   			   
;;;3128        		}
;;;3129        	}
;;;3130      	}
;;;3131   #endif
;;;3132   
;;;3133   #ifdef GLADKOV
;;;3134   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3135   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3136   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3137   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3138   inv[0]._flags_tm=bps[4]._buff[7];
;;;3139   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3140   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3141   inv[0]._cnt=0;    
;;;3142   
;;;3143   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3144   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3145   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3146   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3147   inv[1]._flags_tm=bps[21]._buff[7];
;;;3148   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3149   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3150   inv[1]._cnt=0;    
;;;3151   #endif
;;;3152   
;;;3153   /*
;;;3154   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3155   	{
;;;3156   	lakb[0]._battCommState=0;
;;;3157   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3158   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3159   	
;;;3160   	if(lakb[0]._battCommState==0)
;;;3161   		{	
;;;3162   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3163   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3164   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3165   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3166   		}
;;;3167   	}
;;;3168   */
;;;3169   
;;;3170   #ifdef UKU_TELECORE2015
;;;3171   
;;;3172   	if(BAT_TYPE==2)
;;;3173   		{
;;;3174   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3175   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3176   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3177   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3178   		
;;;3179   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3180   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3181   	
;;;3182   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3183   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3184   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3185   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3186   	
;;;3187   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3188   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3189   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3190   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3191   	
;;;3192   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3193   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3194   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3195   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3196   	
;;;3197   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3198   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3199   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3200   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3201   	
;;;3202   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3203   	
;;;3204   	
;;;3205   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3206   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3207   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3208   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3209   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3210   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3211   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3212   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3213   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3214   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3215   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3216   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3217   	
;;;3218   		if(lakb[i]._rat_cap==0)
;;;3219   			{
;;;3220   			if(lakb[i]._isOnCnt)
;;;3221   				{
;;;3222   				lakb[i]._isOnCnt--;
;;;3223   				if(lakb[i]._isOnCnt==0)
;;;3224   					{
;;;3225   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3226   					}
;;;3227   				}
;;;3228   			}
;;;3229   		else 
;;;3230   			{
;;;3231   			if(lakb[i]._isOnCnt<50)
;;;3232   				{
;;;3233   				lakb[i]._isOnCnt++;
;;;3234   				if(lakb[i]._isOnCnt==50)
;;;3235   					{
;;;3236   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3237   					}
;;;3238   				}
;;;3239   			}
;;;3240   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3241   		}
;;;3242   	else if(BAT_TYPE==3)
;;;3243   		{
;;;3244   		//short numOfPacks;
;;;3245   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3246   		
;;;3247   		#ifndef UKU_TELECORE2016
;;;3248   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3249   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3250   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3251   		if(numOfPacks)numOfPacks-=1;
;;;3252   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3253   		plazma_numOfCells=numOfCells;
;;;3254   		plazma_numOfTemperCells=numOfTemperCells;
;;;3255   		plazma_numOfPacks=numOfPacks;
;;;3256   
;;;3257   
;;;3258   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3259   
;;;3260   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3261   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3262   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3263   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3264   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3265   							);	  
;;;3266   
;;;3267   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3268   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3269   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3270   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3271   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3272   							)/10;
;;;3273   
;;;3274   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3275   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3276   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3277   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3278   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3279   							)-2730;
;;;3280   
;;;3281   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3282   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3283   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3284   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3285   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3286   							)/10;
;;;3287   
;;;3288   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3289   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3290   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3291   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3292   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3293   							)/10;
;;;3294   		#endif
;;;3295   		
;;;3296   		#ifdef UKU_TELECORE2016
;;;3297   		{
;;;3298   		char i;
;;;3299   		
;;;3300   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3301   			{
;;;3302   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3303   			}
;;;3304   		}
;;;3305   		#endif
;;;3306   		
;;;3307   										  
;;;3308   		}
;;;3309   	
;;;3310   if(sacredSunSilentCnt<3) 
;;;3311   	{
;;;3312       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3313       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3314      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3315   	}
;;;3316   else 
;;;3317   	{
;;;3318       	//bat[0]._Ub=0;
;;;3319       	//bat[0]._Tb=0;
;;;3320      	//bat[0]._Ib=0;
;;;3321   	}
;;;3322   
;;;3323   if(BAT_TYPE==1)
;;;3324   	{
;;;3325   	char i;
;;;3326   	for(i=0;i<1;i++)
;;;3327   		{
;;;3328   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3329   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3330   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3331   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3332   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;3333   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3334   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;3335   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3336   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;3337   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;3338   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3339   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;3340   		lakb[i]._flags1= lakb_damp[i][34];
;;;3341   		lakb[i]._flags2= lakb_damp[i][35];
;;;3342   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;3343   
;;;3344   /*		if(lakb[i]._rat_cap==0)
;;;3345   			{
;;;3346   			if(lakb[i]._isOnCnt)
;;;3347   				{
;;;3348   				lakb[i]._isOnCnt--;
;;;3349   				if(lakb[i]._isOnCnt==0)
;;;3350   					{
;;;3351   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3352   					}
;;;3353   				}
;;;3354   			}
;;;3355   		else 
;;;3356   			{
;;;3357   			if(lakb[i]._isOnCnt<50)
;;;3358   				{
;;;3359   				lakb[i]._isOnCnt++;
;;;3360   				if(lakb[i]._isOnCnt==50)
;;;3361   					{
;;;3362   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3363   					}
;;;3364   				}
;;;3365   			} */
;;;3366   		gran(&lakb[i]._isOnCnt,0,50);
;;;3367   	 	}
;;;3368   
;;;3369   	if(lakb_damp[0][41]==100)
;;;3370   		{
;;;3371   		li_bat._485Error=1;
;;;3372   		}
;;;3373   	if(lakb_damp[0][41]==0)
;;;3374   		{
;;;3375   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;3376   		li_bat._485Error=0;
;;;3377   		}
;;;3378   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;3379   
;;;3380   
;;;3381   	}
;;;3382   
;;;3383   
;;;3384   #endif
;;;3385   
;;;3386   		#ifdef UKU_TELECORE2017
;;;3387   		{
;;;3388   		char i;
;;;3389   		
;;;3390   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3391   			{
;;;3392   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3393   			}
;;;3394   		}
;;;3395   		#endif
;;;3396   #ifdef UKU_TELECORE2015
;;;3397   //вычисление параметров работы батареи
;;;3398   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;3399   li_bat._batStat=bsOK;
;;;3400   if(BAT_TYPE==1) //COSLIGHT
;;;3401   	{
;;;3402   	if(li_bat._batStat==bsOK)
;;;3403   		{
;;;3404   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;3405   
;;;3406   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;3407   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;3408   	
;;;3409   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;3410   		li_bat._soc=lakb[0]._s_o_c;
;;;3411   		li_bat._soh=lakb[0]._s_o_h;
;;;3412   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;3413   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;3414   		li_bat._rbt=lakb[0]._r_b_t;
;;;3415   		}
;;;3416   	else 
;;;3417   		{
;;;3418   		li_bat._Ub=bat[0]._Ub;
;;;3419   		li_bat._Ib=bat[0]._Ib/10;
;;;3420   		li_bat._Tb=bat[0]._Tb;
;;;3421   		}
;;;3422   
;;;3423   	if((li_bat._485Error)||(li_bat._canError))
;;;3424   		{
;;;3425   		li_bat._batStat=bsOFF;
;;;3426   		}
;;;3427   	else li_bat._batStat=bsOK;
;;;3428   	}
;;;3429   else if(BAT_TYPE==2) //SACRED SUN
;;;3430   	{
;;;3431   	}
;;;3432   else if(BAT_TYPE==3) //ZTT
;;;3433   	{
;;;3434   	if(li_bat._batStat==bsOK)
;;;3435   		{
;;;3436   
;;;3437   		}
;;;3438   	}
;;;3439   #endif
;;;3440   
;;;3441   
;;;3442   /*
;;;3443   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;3444   	{
;;;3445   
;;;3446   
;;;3447   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;3448   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;3449   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;3450   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;3451   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;3452   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;3453   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;3454   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;3455   
;;;3456   	tempSS=0;
;;;3457   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;3458   
;;;3459   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;3460   
;;;3461   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;3462   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;3463   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;3464   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;3465   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;3466   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;3467   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;3468   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;3469   
;;;3470   	tempSS=0;
;;;3471   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;3472   
;;;3473   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;3474   
;;;3475   
;;;3476   	}*/
;;;3477   
;;;3478   
;;;3479   
;;;3480   }
00269c  b007              ADD      sp,sp,#0x1c
00269e  e8bd8ff0          POP      {r4-r11,pc}
;;;3481   
                          ENDP

                  mnemo_hndl PROC
;;;3482   //-----------------------------------------------
;;;3483   void mnemo_hndl(void)
0026a2  4aa4              LDR      r2,|L1.10548|
;;;3484   {
;;;3485   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;3486   	{
;;;3487   	if(mnemo_cnt)mnemo_cnt--;
0026a4  49a4              LDR      r1,|L1.10552|
0026a6  7810              LDRB     r0,[r2,#0]            ;3485  ; a_ind
0026a8  2804              CMP      r0,#4                 ;3485
0026aa  d001              BEQ      |L1.9904|
0026ac  2801              CMP      r0,#1                 ;3485
0026ae  d105              BNE      |L1.9916|
                  |L1.9904|
0026b0  7850              LDRB     r0,[r2,#1]            ;3485  ; a_ind
0026b2  b918              CBNZ     r0,|L1.9916|
0026b4  48a1              LDR      r0,|L1.10556|
0026b6  7800              LDRB     r0,[r0,#0]            ;3485  ; MNEMO_ON
0026b8  2855              CMP      r0,#0x55              ;3485
0026ba  d003              BEQ      |L1.9924|
                  |L1.9916|
;;;3488   	}
;;;3489   else mnemo_cnt=MNEMO_TIME;
0026bc  48a0              LDR      r0,|L1.10560|
0026be  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0026c0  7008              STRB     r0,[r1,#0]
                  |L1.9922|
;;;3490   }
0026c2  4770              BX       lr
                  |L1.9924|
0026c4  7808              LDRB     r0,[r1,#0]            ;3487  ; mnemo_cnt
0026c6  2800              CMP      r0,#0                 ;3487
0026c8  d0fb              BEQ      |L1.9922|
0026ca  f1a00001          SUB      r0,r0,#1              ;3487
0026ce  7008              STRB     r0,[r1,#0]            ;3487
0026d0  4770              BX       lr
;;;3491   
                          ENDP

                  adc_init PROC
;;;3492   //-----------------------------------------------
;;;3493   void adc_init(void)
0026d2  489c              LDR      r0,|L1.10564|
;;;3494   {
;;;3495   
;;;3496   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
0026d4  6841              LDR      r1,[r0,#4]
0026d6  f4212140          BIC      r1,r1,#0xc0000
0026da  f4412180          ORR      r1,r1,#0x40000
0026de  6041              STR      r1,[r0,#4]
;;;3497   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
0026e0  6841              LDR      r1,[r0,#4]
0026e2  f4213140          BIC      r1,r1,#0x30000
0026e6  f4413180          ORR      r1,r1,#0x10000
0026ea  6041              STR      r1,[r0,#4]
;;;3498   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0026ec  6841              LDR      r1,[r0,#4]
0026ee  f4214140          BIC      r1,r1,#0xc000
0026f2  f4414180          ORR      r1,r1,#0x4000
0026f6  6041              STR      r1,[r0,#4]
;;;3499   
;;;3500   
;;;3501   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0026f8  6c41              LDR      r1,[r0,#0x44]
0026fa  f4212140          BIC      r1,r1,#0xc0000
0026fe  f4412100          ORR      r1,r1,#0x80000
002702  6441              STR      r1,[r0,#0x44]
;;;3502   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
002704  6c41              LDR      r1,[r0,#0x44]
002706  f4213140          BIC      r1,r1,#0x30000
00270a  f4413100          ORR      r1,r1,#0x20000
00270e  6441              STR      r1,[r0,#0x44]
;;;3503   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
002710  6c41              LDR      r1,[r0,#0x44]
002712  f4214140          BIC      r1,r1,#0xc000
002716  f4414100          ORR      r1,r1,#0x8000
00271a  6441              STR      r1,[r0,#0x44]
;;;3504   
;;;3505   SET_REG(LPC_ADC->ADCR,0,24,3);
00271c  488a              LDR      r0,|L1.10568|
00271e  6801              LDR      r1,[r0,#0]
002720  f02161e0          BIC      r1,r1,#0x7000000
002724  6001              STR      r1,[r0,#0]
;;;3506   
;;;3507   SET_REG(LPC_ADC->ADCR,1,21,1);
002726  6801              LDR      r1,[r0,#0]
002728  f4411100          ORR      r1,r1,#0x200000
00272c  6001              STR      r1,[r0,#0]
;;;3508   SET_REG(LPC_ADC->ADCR,0,16,1);
00272e  6801              LDR      r1,[r0,#0]
002730  f4213180          BIC      r1,r1,#0x10000
002734  6001              STR      r1,[r0,#0]
;;;3509   SET_REG(LPC_ADC->ADCR,1,8,8);
002736  6801              LDR      r1,[r0,#0]
002738  f421417f          BIC      r1,r1,#0xff00
00273c  f4417180          ORR      r1,r1,#0x100
002740  6001              STR      r1,[r0,#0]
;;;3510   
;;;3511   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3512   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;3513   	
;;;3514   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;3515        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;3516        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;3517   
;;;3518   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
002742  f44f7180          MOV      r1,#0x100
002746  60c1              STR      r1,[r0,#0xc]
002748  4880              LDR      r0,|L1.10572|
00274a  f44f0180          MOV      r1,#0x400000
00274e  6001              STR      r1,[r0,#0]
;;;3519   
;;;3520   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;3521   
;;;3522   
;;;3523   }
002750  4770              BX       lr
;;;3524   
                          ENDP

                  adc_drv7 PROC
;;;3525   //-----------------------------------------------
;;;3526   void adc_drv7(void) //(Uсети - постоянка)
002752  e92d41f0          PUSH     {r4-r8,lr}
;;;3527   {
;;;3528   //int temp_S;
;;;3529   //char i;
;;;3530   //signed short temp_SS;
;;;3531   
;;;3532   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
002756  4c7e              LDR      r4,|L1.10576|
002758  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00275a  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00275c  1a40              SUBS     r0,r0,r1
00275e  b200              SXTH     r0,r0
002760  f7fffffe          BL       abs_pal
002764  1da6              ADDS     r6,r4,#6
002766  8030              STRH     r0,[r6,#0]
;;;3533   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
002768  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00276a  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00276c  1a40              SUBS     r0,r0,r1
00276e  b200              SXTH     r0,r0
002770  f7fffffe          BL       abs_pal
002774  8070              STRH     r0,[r6,#2]
;;;3534   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
002776  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
002778  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00277a  1a40              SUBS     r0,r0,r1
00277c  b200              SXTH     r0,r0
00277e  f7fffffe          BL       abs_pal
002782  80b0              STRH     r0,[r6,#4]
;;;3535   
;;;3536   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;3537   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;3538   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;3539   
;;;3540   
;;;3541   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
002784  f44f7196          MOV      r1,#0x12c
;;;3542   	{
;;;3543   	adc_result=adc_self_ch_buff[2];
002788  f1a405ea          SUB      r5,r4,#0xea
00278c  4288              CMP      r0,r1                 ;3541
00278e  da02              BGE      |L1.10134|
002790  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
002792  86e8              STRH     r0,[r5,#0x36]
002794  e00c              B        |L1.10160|
                  |L1.10134|
;;;3544   	} 
;;;3545   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
002796  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
00279a  4288              CMP      r0,r1
00279c  da02              BGE      |L1.10148|
;;;3546   	{
;;;3547   	adc_result=adc_self_ch_buff[1];
00279e  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0027a0  86e8              STRH     r0,[r5,#0x36]
0027a2  e005              B        |L1.10160|
                  |L1.10148|
;;;3548   	}
;;;3549   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0027a4  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0027a8  4288              CMP      r0,r1
0027aa  da01              BGE      |L1.10160|
;;;3550   	{
;;;3551   	adc_result=adc_self_ch_buff[0];
0027ac  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0027ae  86e8              STRH     r0,[r5,#0x36]
                  |L1.10160|
;;;3552   	}
;;;3553       //adc_result=92;
;;;3554   
;;;3555   if(adc_ch_net)
0027b0  7b6f              LDRB     r7,[r5,#0xd]  ; adc_ch_net
0027b2  2600              MOVS     r6,#0
0027b4  b32f              CBZ      r7,|L1.10242|
;;;3556   	{
;;;3557   
;;;3558   	main_power_buffer[0]+=(long)(adc_result);
0027b6  4867              LDR      r0,|L1.10580|
0027b8  f9b51036          LDRSH    r1,[r5,#0x36]  ; adc_result
0027bc  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0027be  440a              ADD      r2,r2,r1
0027c0  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;3559   	main_power_buffer[1]+=(long)(adc_result);
0027c2  6842              LDR      r2,[r0,#4]  ; main_power_buffer
0027c4  440a              ADD      r2,r2,r1
0027c6  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;3560   	main_power_buffer[2]+=(long)(adc_result);
0027c8  6882              LDR      r2,[r0,#8]  ; main_power_buffer
0027ca  440a              ADD      r2,r2,r1
0027cc  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;3561   	main_power_buffer[3]+=(long)(adc_result);
0027ce  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
0027d0  4411              ADD      r1,r1,r2
0027d2  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;3562   
;;;3563   	adc_net_buff_cnt++;
0027d4  8fe9              LDRH     r1,[r5,#0x3e]  ; adc_net_buff_cnt
0027d6  f1010101          ADD      r1,r1,#1
0027da  b209              SXTH     r1,r1
0027dc  87e9              STRH     r1,[r5,#0x3e]
;;;3564   	if(adc_net_buff_cnt>=0x1000)
0027de  f5b15f80          CMP      r1,#0x1000
0027e2  db00              BLT      |L1.10214|
;;;3565   		{
;;;3566   		adc_net_buff_cnt=0;
0027e4  87ee              STRH     r6,[r5,#0x3e]
                  |L1.10214|
;;;3567   		}
;;;3568   	if((adc_net_buff_cnt&0x03ff)==0)
0027e6  f9b5103e          LDRSH    r1,[r5,#0x3e]  ; adc_net_buff_cnt
0027ea  058a              LSLS     r2,r1,#22
0027ec  d131              BNE      |L1.10322|
;;;3569   		{
;;;3570   		#ifdef UKU_220
;;;3571   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;3572   		#else
;;;3573   		#ifdef UKU_220_V2
;;;3574   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;3575   		#else
;;;3576   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0027ee  ea4f21a1          ASR      r1,r1,#10
0027f2  f8502021          LDR      r2,[r0,r1,LSL #2]
0027f6  ea4f2222          ASR      r2,r2,#8
0027fa  86aa              STRH     r2,[r5,#0x34]
;;;3577   		#endif
;;;3578   		#endif
;;;3579   		main_power_buffer[adc_net_buff_cnt>>10]=0;
0027fc  f8406021          STR      r6,[r0,r1,LSL #2]
002800  e027              B        |L1.10322|
                  |L1.10242|
;;;3580   		}
;;;3581   
;;;3582   
;;;3583   	} 
;;;3584   else if(!adc_ch_net)
;;;3585   	{
;;;3586   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
002802  4855              LDR      r0,|L1.10584|
002804  7bac              LDRB     r4,[r5,#0xe]  ; adc_ch
002806  7bea              LDRB     r2,[r5,#0xf]  ; adc_ch_cnt
002808  eb001384          ADD      r3,r0,r4,LSL #6
00280c  f9b51036          LDRSH    r1,[r5,#0x36]  ; adc_result
002810  f8431022          STR      r1,[r3,r2,LSL #2]
;;;3587   	
;;;3588   	if((adc_ch_cnt&0x03)==0)
002814  0790              LSLS     r0,r2,#30
002816  d10f              BNE      |L1.10296|
;;;3589   		{
;;;3590   		long temp_L;
;;;3591   		char i;
;;;3592   		temp_L=0;
002818  4601              MOV      r1,r0
                  |L1.10266|
;;;3593   		for(i=0;i<16;i++)
;;;3594   			{
;;;3595   			temp_L+=adc_buff[adc_ch][i];
00281a  f853c020          LDR      r12,[r3,r0,LSL #2]
00281e  4461              ADD      r1,r1,r12
002820  f1000001          ADD      r0,r0,#1              ;3593
002824  b2c0              UXTB     r0,r0                 ;3593
002826  2810              CMP      r0,#0x10              ;3593
002828  d3f7              BCC      |L1.10266|
;;;3596   			}
;;;3597   		adc_buff_[adc_ch]= (short)(temp_L>>4);
00282a  ea4f1021          ASR      r0,r1,#4
00282e  4949              LDR      r1,|L1.10580|
002830  f1a10120          SUB      r1,r1,#0x20
002834  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.10296|
;;;3598   
;;;3599   		//adc_buff_[3]=346;
;;;3600   		}
;;;3601   	if(++adc_ch>=16) 
002838  1c64              ADDS     r4,r4,#1
00283a  b2e0              UXTB     r0,r4
00283c  73a8              STRB     r0,[r5,#0xe]
00283e  2810              CMP      r0,#0x10
002840  d307              BCC      |L1.10322|
;;;3602   		{
;;;3603   		adc_ch=0;
002842  73ae              STRB     r6,[r5,#0xe]
;;;3604   		adc_ch_cnt++;
002844  f1020201          ADD      r2,r2,#1
002848  b2d0              UXTB     r0,r2
00284a  73e8              STRB     r0,[r5,#0xf]
;;;3605   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
00284c  2810              CMP      r0,#0x10
00284e  d300              BCC      |L1.10322|
002850  73ee              STRB     r6,[r5,#0xf]
                  |L1.10322|
;;;3606   		}
;;;3607   	}
;;;3608   
;;;3609   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;3610   
;;;3611   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3612   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3613   /*
;;;3614   	{
;;;3615   	if((adc_cnt1&0x03)==0)
;;;3616   		{
;;;3617   		temp_S=0;
;;;3618   		for(i=0;i<16;i++)
;;;3619   			{
;;;3620   			temp_S+=adc_buff[adc_ch][i];
;;;3621   			} 
;;;3622            	adc_buff_[adc_ch]=temp_S>>4;
;;;3623             }
;;;3624   	}*/
;;;3625   
;;;3626   
;;;3627   		  
;;;3628   
;;;3629   adc_self_ch_cnt=0;
002852  732e              STRB     r6,[r5,#0xc]
;;;3630   
;;;3631   adc_ch_net++;
002854  f1070701          ADD      r7,r7,#1
;;;3632   adc_ch_net&=1;
002858  f0070001          AND      r0,r7,#1
00285c  7368              STRB     r0,[r5,#0xd]
;;;3633   
;;;3634   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3635   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;3636   
;;;3637   if(adc_ch_net)
;;;3638   	{
;;;3639   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3640   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;3641   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
00285e  4a3a              LDR      r2,|L1.10568|
002860  b130              CBZ      r0,|L1.10352|
002862  6810              LDR      r0,[r2,#0]
002864  f02000ff          BIC      r0,r0,#0xff
002868  f1000004          ADD      r0,r0,#4
00286c  6010              STR      r0,[r2,#0]
00286e  e03d              B        |L1.10476|
                  |L1.10352|
;;;3642   	}
;;;3643   else
;;;3644   	{
;;;3645   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3646   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;3647   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
002870  7ba9              LDRB     r1,[r5,#0xe]  ; adc_ch
002872  0708              LSLS     r0,r1,#28
002874  d406              BMI      |L1.10372|
002876  6810              LDR      r0,[r2,#0]
002878  f02000ff          BIC      r0,r0,#0xff
00287c  f1000001          ADD      r0,r0,#1
002880  6010              STR      r0,[r2,#0]
002882  e005              B        |L1.10384|
                  |L1.10372|
;;;3648   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
002884  6810              LDR      r0,[r2,#0]
002886  f02000ff          BIC      r0,r0,#0xff
00288a  f1000002          ADD      r0,r0,#2
00288e  6010              STR      r0,[r2,#0]
                  |L1.10384|
;;;3649   
;;;3650   
;;;3651   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
002890  4832              LDR      r0,|L1.10588|
002892  6803              LDR      r3,[r0,#0]
002894  f0435380          ORR      r3,r3,#0x10000000
002898  6003              STR      r3,[r0,#0]
;;;3652   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
00289a  6a03              LDR      r3,[r0,#0x20]
00289c  f0434380          ORR      r3,r3,#0x40000000
0028a0  6203              STR      r3,[r0,#0x20]
;;;3653   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0028a2  6e03              LDR      r3,[r0,#0x60]
0028a4  f0436380          ORR      r3,r3,#0x4000000
0028a8  6603              STR      r3,[r0,#0x60]
;;;3654   
;;;3655   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
0028aa  07cb              LSLS     r3,r1,#31
0028ac  d00a              BEQ      |L1.10436|
;;;3656   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
0028ae  6943              LDR      r3,[r0,#0x14]
0028b0  f0435380          ORR      r3,r3,#0x10000000
0028b4  6143              STR      r3,[r0,#0x14]
                  |L1.10422|
;;;3657   
;;;3658   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
0028b6  078b              LSLS     r3,r1,#30
0028b8  d409              BMI      |L1.10446|
0028ba  6b43              LDR      r3,[r0,#0x34]
0028bc  f0234380          BIC      r3,r3,#0x40000000
0028c0  6343              STR      r3,[r0,#0x34]
0028c2  e008              B        |L1.10454|
                  |L1.10436|
0028c4  6943              LDR      r3,[r0,#0x14]         ;3655
0028c6  f0235380          BIC      r3,r3,#0x10000000     ;3655
0028ca  6143              STR      r3,[r0,#0x14]         ;3655
0028cc  e7f3              B        |L1.10422|
                  |L1.10446|
;;;3659   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
0028ce  6b43              LDR      r3,[r0,#0x34]
0028d0  f0434380          ORR      r3,r3,#0x40000000
0028d4  6343              STR      r3,[r0,#0x34]
                  |L1.10454|
;;;3660   
;;;3661   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
0028d6  0749              LSLS     r1,r1,#29
0028d8  d404              BMI      |L1.10468|
0028da  6f41              LDR      r1,[r0,#0x74]
0028dc  f0216180          BIC      r1,r1,#0x4000000
0028e0  6741              STR      r1,[r0,#0x74]
0028e2  e003              B        |L1.10476|
                  |L1.10468|
;;;3662   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0028e4  6f41              LDR      r1,[r0,#0x74]
0028e6  f0416180          ORR      r1,r1,#0x4000000
0028ea  6741              STR      r1,[r0,#0x74]
                  |L1.10476|
;;;3663   	}
;;;3664   	
;;;3665   
;;;3666   
;;;3667   
;;;3668   LPC_ADC->ADCR |=  (1<<24);
0028ec  6810              LDR      r0,[r2,#0]
0028ee  f0407080          ORR      r0,r0,#0x1000000
0028f2  6010              STR      r0,[r2,#0]
                  |L1.10484|
;;;3669   
;;;3670   }
0028f4  e8bd81f0          POP      {r4-r8,pc}
;;;3671   
                          ENDP

                  adc_drv6 PROC
;;;3672   //-----------------------------------------------
;;;3673   void adc_drv6(void) //(с попыткой измерять горбы)
0028f8  e92d41f0          PUSH     {r4-r8,lr}
;;;3674   {
;;;3675   //int temp_S;
;;;3676   //char i;
;;;3677   //signed short temp_SS;
;;;3678   
;;;3679   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
0028fc  4c14              LDR      r4,|L1.10576|
0028fe  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
002900  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
002902  1a40              SUBS     r0,r0,r1
002904  b200              SXTH     r0,r0
002906  f7fffffe          BL       abs_pal
00290a  1da5              ADDS     r5,r4,#6
00290c  8028              STRH     r0,[r5,#0]
;;;3680   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
00290e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
002910  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
002912  1a40              SUBS     r0,r0,r1
002914  b200              SXTH     r0,r0
002916  f7fffffe          BL       abs_pal
00291a  8068              STRH     r0,[r5,#2]
;;;3681   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00291c  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00291e  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
002920  1a40              SUBS     r0,r0,r1
002922  e01d              B        |L1.10592|
                  |L1.10532|
                          DCD      load_I
                  |L1.10536|
                          DCD      Isumm
                  |L1.10540|
                          DCD      NUMINV
                  |L1.10544|
                          DCD      inv
                  |L1.10548|
                          DCD      a_ind
                  |L1.10552|
                          DCD      mnemo_cnt
                  |L1.10556|
                          DCD      MNEMO_ON
                  |L1.10560|
                          DCD      MNEMO_TIME
                  |L1.10564|
                          DCD      0x4002c000
                  |L1.10568|
                          DCD      0x40034000
                  |L1.10572|
                          DCD      0xe000e100
                  |L1.10576|
                          DCD      ||area_number.18||+0xea
                  |L1.10580|
                          DCD      ||.bss||+0x42c
                  |L1.10584|
                          DCD      ||.bss||+0xc
                  |L1.10588|
                          DCD      0x2009c000
                  |L1.10592|
002960  b200              SXTH     r0,r0
002962  f7fffffe          BL       abs_pal
002966  80a8              STRH     r0,[r5,#4]
;;;3682   
;;;3683   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;3684   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;3685   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;3686   
;;;3687   
;;;3688   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
002968  f44f7196          MOV      r1,#0x12c
;;;3689   	{
;;;3690   	adc_result=adc_self_ch_buff[2];
00296c  f1a406ea          SUB      r6,r4,#0xea
002970  4288              CMP      r0,r1                 ;3688
002972  da02              BGE      |L1.10618|
002974  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
002976  86f0              STRH     r0,[r6,#0x36]
002978  e00c              B        |L1.10644|
                  |L1.10618|
;;;3691   	} 
;;;3692   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
00297a  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
00297e  4288              CMP      r0,r1
002980  da02              BGE      |L1.10632|
;;;3693   	{
;;;3694   	adc_result=adc_self_ch_buff[1];
002982  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
002984  86f0              STRH     r0,[r6,#0x36]
002986  e005              B        |L1.10644|
                  |L1.10632|
;;;3695   	}
;;;3696   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
002988  f9b50000          LDRSH    r0,[r5,#0]  ; adc_self_ch_disp
00298c  4288              CMP      r0,r1
00298e  da01              BGE      |L1.10644|
;;;3697   	{
;;;3698   	adc_result=adc_self_ch_buff[0];
002990  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
002992  86f0              STRH     r0,[r6,#0x36]
                  |L1.10644|
;;;3699   	}
;;;3700       //adc_result=92;
;;;3701   
;;;3702   if(adc_ch_net)
002994  7b77              LDRB     r7,[r6,#0xd]  ; adc_ch_net
002996  2200              MOVS     r2,#0
002998  b3f7              CBZ      r7,|L1.10776|
;;;3703   	{
;;;3704   
;;;3705   	if(adc_window_flag)
00299a  7c33              LDRB     r3,[r6,#0x10]  ; adc_window_flag
;;;3706   		{
;;;3707   		main_power_buffer[0]+=(long)(adc_result>>2);
00299c  48ff              LDR      r0,|L1.11676|
00299e  b18b              CBZ      r3,|L1.10692|
0029a0  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
0029a4  6804              LDR      r4,[r0,#0]  ; main_power_buffer
0029a6  eb0404a1          ADD      r4,r4,r1,ASR #2
0029aa  6004              STR      r4,[r0,#0]  ; main_power_buffer
;;;3708   		main_power_buffer[1]+=(long)(adc_result>>2);
0029ac  6844              LDR      r4,[r0,#4]  ; main_power_buffer
0029ae  eb0404a1          ADD      r4,r4,r1,ASR #2
0029b2  6044              STR      r4,[r0,#4]  ; main_power_buffer
;;;3709   		main_power_buffer[2]+=(long)(adc_result>>2);
0029b4  6884              LDR      r4,[r0,#8]  ; main_power_buffer
0029b6  eb0404a1          ADD      r4,r4,r1,ASR #2
0029ba  6084              STR      r4,[r0,#8]  ; main_power_buffer
;;;3710   		main_power_buffer[3]+=(long)(adc_result>>2);
0029bc  68c4              LDR      r4,[r0,#0xc]  ; main_power_buffer
0029be  eb0401a1          ADD      r1,r4,r1,ASR #2
0029c2  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
                  |L1.10692|
;;;3711   		}
;;;3712   //	main_power_buffer[4]+=(long)(adc_result>>2);
;;;3713   //	main_power_buffer[5]+=(long)(adc_result>>2);
;;;3714   //	main_power_buffer[6]+=(long)(adc_result>>2);
;;;3715   //	main_power_buffer[7]+=(long)(adc_result>>2);
;;;3716   //	main_power_buffer_cnt++;
;;;3717   
;;;3718   
;;;3719   	if(adc_result<100)
0029c4  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
0029c8  2964              CMP      r1,#0x64
0029ca  da04              BGE      |L1.10710|
;;;3720   		{
;;;3721   		adc_zero_cnt++;
0029cc  8f71              LDRH     r1,[r6,#0x3a]  ; adc_zero_cnt
0029ce  f1010101          ADD      r1,r1,#1
0029d2  8771              STRH     r1,[r6,#0x3a]
0029d4  e000              B        |L1.10712|
                  |L1.10710|
;;;3722   		}
;;;3723   	else adc_zero_cnt=0;
0029d6  8772              STRH     r2,[r6,#0x3a]
                  |L1.10712|
;;;3724   
;;;3725   	if(adc_zero_cnt>=2000)
0029d8  f9b6403a          LDRSH    r4,[r6,#0x3a]  ; adc_zero_cnt
0029dc  f44f61fa          MOV      r1,#0x7d0
0029e0  428c              CMP      r4,r1
0029e2  db05              BLT      |L1.10736|
;;;3726   		{
;;;3727   		adc_zero_cnt=2000;
0029e4  8771              STRH     r1,[r6,#0x3a]
;;;3728   		main_power_buffer[0]=0;
0029e6  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;3729   		main_power_buffer[1]=0;
0029e8  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;3730   		main_power_buffer[2]=0;
0029ea  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;3731   		main_power_buffer[3]=0;
0029ec  60c2              STR      r2,[r0,#0xc]  ; main_power_buffer
;;;3732   		net_buff_=0;
0029ee  86b2              STRH     r2,[r6,#0x34]
                  |L1.10736|
;;;3733   		}
;;;3734   
;;;3735   	if(adc_zero_cnt==5)
0029f0  8f71              LDRH     r1,[r6,#0x3a]  ; adc_zero_cnt
0029f2  2905              CMP      r1,#5
0029f4  d14f              BNE      |L1.10902|
;;;3736   		{
;;;3737   		
;;;3738   		if(adc_window_flag)
0029f6  b1bb              CBZ      r3,|L1.10792|
;;;3739   			{
;;;3740   			adc_gorb_cnt++;
0029f8  8f31              LDRH     r1,[r6,#0x38]  ; adc_gorb_cnt
0029fa  f1010101          ADD      r1,r1,#1
0029fe  b209              SXTH     r1,r1
002a00  8731              STRH     r1,[r6,#0x38]
;;;3741   			if(adc_gorb_cnt>=512)
002a02  f5b17f00          CMP      r1,#0x200
002a06  db00              BLT      |L1.10762|
;;;3742   				{
;;;3743   				adc_gorb_cnt=0;
002a08  8732              STRH     r2,[r6,#0x38]
                  |L1.10762|
;;;3744   				//net_buff_=main_power_buffer[0]>>8;
;;;3745   				//main_power_buffer[0]=0;
;;;3746   			   	}
;;;3747   
;;;3748   			if((adc_gorb_cnt&0x007f)==0)
002a0a  f9b61038          LDRSH    r1,[r6,#0x38]  ; adc_gorb_cnt
002a0e  064c              LSLS     r4,r1,#25
002a10  d10a              BNE      |L1.10792|
;;;3749   				{
;;;3750   				net_buff_=main_power_buffer[adc_gorb_cnt>>7]>>8;
002a12  ea4f11e1          ASR      r1,r1,#7
002a16  e000              B        |L1.10778|
                  |L1.10776|
002a18  e015              B        |L1.10822|
                  |L1.10778|
002a1a  f8504021          LDR      r4,[r0,r1,LSL #2]
002a1e  ea4f2424          ASR      r4,r4,#8
002a22  86b4              STRH     r4,[r6,#0x34]
;;;3751   				main_power_buffer[adc_gorb_cnt>>7]=0;
002a24  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L1.10792|
;;;3752   				}
;;;3753   			}
;;;3754   
;;;3755   		//LPC_GPIO2->FIODIR|=(1<<8);
;;;3756   		//LPC_GPIO2->FIOPIN^=(1<<8);
;;;3757   
;;;3758   		if((adc_window_cnt>150)&&(adc_window_flag))
002a28  f9b6003c          LDRSH    r0,[r6,#0x3c]  ; adc_window_cnt
002a2c  2896              CMP      r0,#0x96
002a2e  dd01              BLE      |L1.10804|
002a30  b103              CBZ      r3,|L1.10804|
;;;3759   			{
;;;3760   			adc_window_flag=0;
002a32  7432              STRB     r2,[r6,#0x10]
                  |L1.10804|
;;;3761   
;;;3762   			
;;;3763   			}
;;;3764   		if((adc_window_cnt>30)&&(adc_window_cnt<70)&&(!adc_window_flag))
002a34  381f              SUBS     r0,r0,#0x1f
002a36  2827              CMP      r0,#0x27
002a38  d22d              BCS      |L1.10902|
002a3a  7c30              LDRB     r0,[r6,#0x10]  ; adc_window_flag
002a3c  bb58              CBNZ     r0,|L1.10902|
;;;3765   			{
;;;3766   			adc_window_flag=1;
002a3e  f04f0001          MOV      r0,#1
002a42  7430              STRB     r0,[r6,#0x10]
002a44  e027              B        |L1.10902|
                  |L1.10822|
;;;3767   
;;;3768   			//LPC_GPIO2->FIODIR|=(1<<8);
;;;3769   			//LPC_GPIO2->FIOPIN|=(1<<8);
;;;3770   			}
;;;3771   		}
;;;3772   	} 
;;;3773   else if(!adc_ch_net)
;;;3774   	{
;;;3775   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
002a46  48d6              LDR      r0,|L1.11680|
002a48  7bb5              LDRB     r5,[r6,#0xe]  ; adc_ch
002a4a  7bf3              LDRB     r3,[r6,#0xf]  ; adc_ch_cnt
002a4c  eb001485          ADD      r4,r0,r5,LSL #6
002a50  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
002a54  f8441023          STR      r1,[r4,r3,LSL #2]
;;;3776   	
;;;3777   	if((adc_ch_cnt&0x03)==0)
002a58  0798              LSLS     r0,r3,#30
002a5a  d10f              BNE      |L1.10876|
;;;3778   		{
;;;3779   		long temp_L;
;;;3780   		char i;
;;;3781   		temp_L=0;
002a5c  4601              MOV      r1,r0
                  |L1.10846|
;;;3782   		for(i=0;i<16;i++)
;;;3783   			{
;;;3784   			temp_L+=adc_buff[adc_ch][i];
002a5e  f854c020          LDR      r12,[r4,r0,LSL #2]
002a62  4461              ADD      r1,r1,r12
002a64  f1000001          ADD      r0,r0,#1              ;3782
002a68  b2c0              UXTB     r0,r0                 ;3782
002a6a  2810              CMP      r0,#0x10              ;3782
002a6c  d3f7              BCC      |L1.10846|
;;;3785   			}
;;;3786   		adc_buff_[adc_ch]= (short)(temp_L>>4);
002a6e  ea4f1021          ASR      r0,r1,#4
002a72  49ca              LDR      r1,|L1.11676|
002a74  f1a10120          SUB      r1,r1,#0x20
002a78  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.10876|
;;;3787   
;;;3788   		//adc_buff_[3]=346;
;;;3789   		}
;;;3790   	if(++adc_ch>=16) 
002a7c  1c6d              ADDS     r5,r5,#1
002a7e  b2e8              UXTB     r0,r5
002a80  73b0              STRB     r0,[r6,#0xe]
002a82  2810              CMP      r0,#0x10
002a84  d307              BCC      |L1.10902|
;;;3791   		{
;;;3792   		adc_ch=0;
002a86  73b2              STRB     r2,[r6,#0xe]
;;;3793   		adc_ch_cnt++;
002a88  f1030301          ADD      r3,r3,#1
002a8c  b2d8              UXTB     r0,r3
002a8e  73f0              STRB     r0,[r6,#0xf]
;;;3794   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
002a90  2810              CMP      r0,#0x10
002a92  d300              BCC      |L1.10902|
002a94  73f2              STRB     r2,[r6,#0xf]
                  |L1.10902|
;;;3795   		}
;;;3796   	}
;;;3797   
;;;3798   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;3799   
;;;3800   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3801   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3802   /*
;;;3803   	{
;;;3804   	if((adc_cnt1&0x03)==0)
;;;3805   		{
;;;3806   		temp_S=0;
;;;3807   		for(i=0;i<16;i++)
;;;3808   			{
;;;3809   			temp_S+=adc_buff[adc_ch][i];
;;;3810   			} 
;;;3811            	adc_buff_[adc_ch]=temp_S>>4;
;;;3812             }
;;;3813   	}*/
;;;3814   
;;;3815   
;;;3816   		  
;;;3817   
;;;3818   adc_self_ch_cnt=0;
002a96  7332              STRB     r2,[r6,#0xc]
;;;3819   
;;;3820   adc_ch_net++;
002a98  f1070701          ADD      r7,r7,#1
;;;3821   adc_ch_net&=1;
002a9c  f0070001          AND      r0,r7,#1
002aa0  7370              STRB     r0,[r6,#0xd]
;;;3822   
;;;3823   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3824   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;3825   
;;;3826   if(adc_ch_net)
;;;3827   	{
;;;3828   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3829   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;3830   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
002aa2  4ac0              LDR      r2,|L1.11684|
002aa4  b130              CBZ      r0,|L1.10932|
002aa6  6810              LDR      r0,[r2,#0]
002aa8  f02000ff          BIC      r0,r0,#0xff
002aac  f1000004          ADD      r0,r0,#4
002ab0  6010              STR      r0,[r2,#0]
002ab2  e03d              B        |L1.11056|
                  |L1.10932|
;;;3831   	}
;;;3832   else
;;;3833   	{
;;;3834   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3835   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;3836   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
002ab4  7bb1              LDRB     r1,[r6,#0xe]  ; adc_ch
002ab6  0708              LSLS     r0,r1,#28
002ab8  d406              BMI      |L1.10952|
002aba  6810              LDR      r0,[r2,#0]
002abc  f02000ff          BIC      r0,r0,#0xff
002ac0  f1000001          ADD      r0,r0,#1
002ac4  6010              STR      r0,[r2,#0]
002ac6  e005              B        |L1.10964|
                  |L1.10952|
;;;3837   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
002ac8  6810              LDR      r0,[r2,#0]
002aca  f02000ff          BIC      r0,r0,#0xff
002ace  f1000002          ADD      r0,r0,#2
002ad2  6010              STR      r0,[r2,#0]
                  |L1.10964|
;;;3838   
;;;3839   
;;;3840   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
002ad4  48b4              LDR      r0,|L1.11688|
002ad6  6803              LDR      r3,[r0,#0]
002ad8  f0435380          ORR      r3,r3,#0x10000000
002adc  6003              STR      r3,[r0,#0]
;;;3841   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
002ade  6a03              LDR      r3,[r0,#0x20]
002ae0  f0434380          ORR      r3,r3,#0x40000000
002ae4  6203              STR      r3,[r0,#0x20]
;;;3842   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
002ae6  6e03              LDR      r3,[r0,#0x60]
002ae8  f0436380          ORR      r3,r3,#0x4000000
002aec  6603              STR      r3,[r0,#0x60]
;;;3843   
;;;3844   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
002aee  07cb              LSLS     r3,r1,#31
002af0  d00a              BEQ      |L1.11016|
;;;3845   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
002af2  6943              LDR      r3,[r0,#0x14]
002af4  f0435380          ORR      r3,r3,#0x10000000
002af8  6143              STR      r3,[r0,#0x14]
                  |L1.11002|
;;;3846   
;;;3847   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
002afa  078b              LSLS     r3,r1,#30
002afc  d409              BMI      |L1.11026|
002afe  6b43              LDR      r3,[r0,#0x34]
002b00  f0234380          BIC      r3,r3,#0x40000000
002b04  6343              STR      r3,[r0,#0x34]
002b06  e008              B        |L1.11034|
                  |L1.11016|
002b08  6943              LDR      r3,[r0,#0x14]         ;3844
002b0a  f0235380          BIC      r3,r3,#0x10000000     ;3844
002b0e  6143              STR      r3,[r0,#0x14]         ;3844
002b10  e7f3              B        |L1.11002|
                  |L1.11026|
;;;3848   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
002b12  6b43              LDR      r3,[r0,#0x34]
002b14  f0434380          ORR      r3,r3,#0x40000000
002b18  6343              STR      r3,[r0,#0x34]
                  |L1.11034|
;;;3849   
;;;3850   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
002b1a  0749              LSLS     r1,r1,#29
002b1c  d404              BMI      |L1.11048|
002b1e  6f41              LDR      r1,[r0,#0x74]
002b20  f0216180          BIC      r1,r1,#0x4000000
002b24  6741              STR      r1,[r0,#0x74]
002b26  e003              B        |L1.11056|
                  |L1.11048|
;;;3851   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
002b28  6f41              LDR      r1,[r0,#0x74]
002b2a  f0416180          ORR      r1,r1,#0x4000000
002b2e  6741              STR      r1,[r0,#0x74]
                  |L1.11056|
;;;3852   	}
;;;3853   	
;;;3854   
;;;3855   
;;;3856   
;;;3857   LPC_ADC->ADCR |=  (1<<24);
002b30  6810              LDR      r0,[r2,#0]
002b32  f0407080          ORR      r0,r0,#0x1000000
002b36  6010              STR      r0,[r2,#0]
;;;3858   
;;;3859   }
002b38  e6dc              B        |L1.10484|
;;;3860    /*
                          ENDP

                  avg_hndl PROC
;;;3928   //-----------------------------------------------
;;;3929   void avg_hndl(void)
002b3a  b5f0              PUSH     {r4-r7,lr}
;;;3930   { 
;;;3931   char i;
;;;3932   
;;;3933   //#define AVGCNTMAX	5
;;;3934   if(avg_main_cnt)
002b3c  4d9b              LDR      r5,|L1.11692|
002b3e  f9b50030          LDRSH    r0,[r5,#0x30]  ; avg_main_cnt
002b42  b118              CBZ      r0,|L1.11084|
;;;3935   	{
;;;3936   	avg_main_cnt--;
002b44  f1a00001          SUB      r0,r0,#1
002b48  8628              STRH     r0,[r5,#0x30]
;;;3937   	goto avg_hndl_end;
002b4a  e096              B        |L1.11386|
                  |L1.11084|
;;;3938   	}                 
;;;3939   
;;;3940   avg_num=0;
002b4c  f04f0600          MOV      r6,#0
002b50  75ae              STRB     r6,[r5,#0x16]
;;;3941   
;;;3942   for(i=0;i<NUMIST;i++)
002b52  4630              MOV      r0,r6
002b54  4997              LDR      r1,|L1.11700|
;;;3943   	{
;;;3944   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
002b56  4b96              LDR      r3,|L1.11696|
002b58  f9b12000          LDRSH    r2,[r1,#0]            ;3942
002b5c  e012              B        |L1.11140|
                  |L1.11102|
002b5e  ebc001c0          RSB      r1,r0,r0,LSL #3
002b62  eb011100          ADD      r1,r1,r0,LSL #4
002b66  eb030181          ADD      r1,r3,r1,LSL #2
002b6a  788c              LDRB     r4,[r1,#2]
002b6c  2c01              CMP      r4,#1
002b6e  d106              BNE      |L1.11134|
002b70  78c9              LDRB     r1,[r1,#3]
002b72  2914              CMP      r1,#0x14
002b74  d203              BCS      |L1.11134|
002b76  7da9              LDRB     r1,[r5,#0x16]  ; avg_num
002b78  f1010101          ADD      r1,r1,#1
002b7c  75a9              STRB     r1,[r5,#0x16]
                  |L1.11134|
002b7e  f1000001          ADD      r0,r0,#1              ;3942
002b82  b2c0              UXTB     r0,r0                 ;3942
                  |L1.11140|
002b84  4290              CMP      r0,r2                 ;3942
002b86  dbea              BLT      |L1.11102|
;;;3945   	}
;;;3946   
;;;3947   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;3948   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;3949   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;3950   
;;;3951   	
;;;3952   if(avg_num<2)
002b88  7daf              LDRB     r7,[r5,#0x16]  ; avg_num
002b8a  2f02              CMP      r7,#2
002b8c  d375              BCC      |L1.11386|
;;;3953   	{
;;;3954   	goto avg_hndl_end;
;;;3955   	}
;;;3956   	
;;;3957   else
;;;3958   	{
;;;3959   	i_avg_min=5000;
002b8e  4c87              LDR      r4,|L1.11692|
002b90  f2413088          MOV      r0,#0x1388
002b94  f1040480          ADD      r4,r4,#0x80
002b98  61e0              STR      r0,[r4,#0x1c]  ; i_avg_min
;;;3960   	i_avg_max=0;
002b9a  61a6              STR      r6,[r4,#0x18]  ; i_avg_max
;;;3961   	i_avg_summ=0;
002b9c  6226              STR      r6,[r4,#0x20]  ; i_avg_summ
;;;3962   	for(i=0;i<NUMIST;i++)
002b9e  f04f0100          MOV      r1,#0
002ba2  e01c              B        |L1.11230|
                  |L1.11172|
;;;3963   		{
;;;3964   		if(bps[i]._state==bsWRK)
002ba4  ebc100c1          RSB      r0,r1,r1,LSL #3
002ba8  eb001001          ADD      r0,r0,r1,LSL #4
002bac  eb030080          ADD      r0,r3,r0,LSL #2
002bb0  f890c002          LDRB     r12,[r0,#2]
002bb4  f1bc0f01          CMP      r12,#1
002bb8  d10e              BNE      |L1.11224|
;;;3965   			{
;;;3966   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
002bba  6a40              LDR      r0,[r0,#0x24]
002bbc  f8d4c018          LDR      r12,[r4,#0x18]  ; i_avg_max
002bc0  4560              CMP      r0,r12
002bc2  dd00              BLE      |L1.11206|
002bc4  61a0              STR      r0,[r4,#0x18]  ; i_avg_max
                  |L1.11206|
;;;3967   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
002bc6  f8d4c01c          LDR      r12,[r4,#0x1c]  ; i_avg_min
002bca  4560              CMP      r0,r12
002bcc  da00              BGE      |L1.11216|
002bce  61e0              STR      r0,[r4,#0x1c]  ; i_avg_min
                  |L1.11216|
;;;3968   			
;;;3969   			i_avg_summ+=bps[i]._Ii;
002bd0  f8d4c020          LDR      r12,[r4,#0x20]  ; i_avg_summ
002bd4  4460              ADD      r0,r0,r12
002bd6  6220              STR      r0,[r4,#0x20]  ; i_avg_summ
                  |L1.11224|
002bd8  f1010101          ADD      r1,r1,#1              ;3962
002bdc  b2c9              UXTB     r1,r1                 ;3962
                  |L1.11230|
002bde  4291              CMP      r1,r2                 ;3962
002be0  dbe0              BLT      |L1.11172|
;;;3970   			}
;;;3971   		}
;;;3972   	i_avg=i_avg_summ/avg_num;	
002be2  6a20              LDR      r0,[r4,#0x20]  ; i_avg_summ
002be4  fb90f7f7          SDIV     r7,r0,r7
002be8  6267              STR      r7,[r4,#0x24]  ; i_avg
;;;3973   	
;;;3974   	if(i_avg_min==0)i_avg_min=1;
002bea  69e0              LDR      r0,[r4,#0x1c]  ; i_avg_min
002bec  2101              MOVS     r1,#1                 ;3944
002bee  b900              CBNZ     r0,|L1.11250|
002bf0  61e1              STR      r1,[r4,#0x1c]  ; i_avg_min
                  |L1.11250|
;;;3975   
;;;3976   	avg=i_avg_max;
002bf2  69a0              LDR      r0,[r4,#0x18]  ; i_avg_max
;;;3977   	avg*=100;
002bf4  f04f0c64          MOV      r12,#0x64
002bf8  fb00f00c          MUL      r0,r0,r12
;;;3978   	avg/=i_avg_min;
002bfc  f8d4c01c          LDR      r12,[r4,#0x1c]  ; i_avg_min
002c00  fb90f0fc          SDIV     r0,r0,r12
002c04  62a0              STR      r0,[r4,#0x28]  ; avg
;;;3979   
;;;3980   	if(avg>160) bAVG=1;
002c06  28a0              CMP      r0,#0xa0
002c08  dd00              BLE      |L1.11276|
002c0a  7569              STRB     r1,[r5,#0x15]
                  |L1.11276|
;;;3981   	if(avg<120) bAVG=0;
002c0c  2878              CMP      r0,#0x78
002c0e  da00              BGE      |L1.11282|
002c10  756e              STRB     r6,[r5,#0x15]
                  |L1.11282|
;;;3982   
;;;3983   	if(bAVG==1)
002c12  7d68              LDRB     r0,[r5,#0x15]  ; bAVG
002c14  2801              CMP      r0,#1
002c16  d130              BNE      |L1.11386|
;;;3984   		{
;;;3985   		for(i=0;i<NUMIST;i++)
002c18  f04f0100          MOV      r1,#0
;;;3986   			{
;;;3987   			if(bps[i]._state==bsWRK)
;;;3988   				{
;;;3989   				if(bps[i]._Ii>i_avg)bps[i]._x_--;
;;;3990   				if(bps[i]._Ii<i_avg)bps[i]._x_++;
;;;3991   			
;;;3992   				if(bps[i]._x_<-50)bps[i]._x_=-50;
002c1c  f06f0431          MVN      r4,#0x31
002c20  e029              B        |L1.11382|
                  |L1.11298|
002c22  ebc100c1          RSB      r0,r1,r1,LSL #3       ;3987
002c26  eb001001          ADD      r0,r0,r1,LSL #4       ;3987
002c2a  eb030080          ADD      r0,r3,r0,LSL #2       ;3987
002c2e  7885              LDRB     r5,[r0,#2]            ;3987
002c30  2d01              CMP      r5,#1                 ;3987
002c32  d11d              BNE      |L1.11376|
002c34  6a45              LDR      r5,[r0,#0x24]         ;3989
002c36  42bd              CMP      r5,r7                 ;3989
002c38  dd05              BLE      |L1.11334|
002c3a  f8b05050          LDRH     r5,[r0,#0x50]         ;3989
002c3e  f1a50501          SUB      r5,r5,#1              ;3989
002c42  f8a05050          STRH     r5,[r0,#0x50]         ;3989
                  |L1.11334|
002c46  da05              BGE      |L1.11348|
002c48  f8b05050          LDRH     r5,[r0,#0x50]         ;3990
002c4c  f1050501          ADD      r5,r5,#1              ;3990
002c50  f8a05050          STRH     r5,[r0,#0x50]         ;3990
                  |L1.11348|
002c54  f9b05050          LDRSH    r5,[r0,#0x50]
002c58  42a5              CMP      r5,r4
002c5a  da01              BGE      |L1.11360|
002c5c  f8a04050          STRH     r4,[r0,#0x50]
                  |L1.11360|
;;;3993   				if(bps[i]._x_>50)bps[i]._x_=50;	
002c60  f9b05050          LDRSH    r5,[r0,#0x50]
002c64  2d32              CMP      r5,#0x32
002c66  dd03              BLE      |L1.11376|
002c68  f04f0532          MOV      r5,#0x32
002c6c  f8a05050          STRH     r5,[r0,#0x50]
                  |L1.11376|
002c70  f1010101          ADD      r1,r1,#1              ;3985
002c74  b2c9              UXTB     r1,r1                 ;3985
                  |L1.11382|
002c76  4291              CMP      r1,r2                 ;3985
002c78  dbd3              BLT      |L1.11298|
                  |L1.11386|
;;;3994   				}
;;;3995   			}		
;;;3996   		}			
;;;3997   	}   	 
;;;3998   
;;;3999   
;;;4000   avg_hndl_end:
;;;4001   __nop();  
002c7a  bf00              NOP      
;;;4002   }
002c7c  bdf0              POP      {r4-r7,pc}
;;;4003   
                          ENDP

                  rele_hndl PROC
;;;4016   //*************-----------------------------------------------
;;;4017   void rele_hndl(void)
002c7e  e92d5ff0          PUSH     {r4-r12,lr}
;;;4018   {
;;;4019   //static char cnt_rel_sam;
;;;4020   //char temp;
;;;4021   
;;;4022   //temp=0;
;;;4023   
;;;4024   
;;;4025   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
002c82  484d              LDR      r0,|L1.11704|
002c84  6801              LDR      r1,[r0,#0]
002c86  4a4d              LDR      r2,|L1.11708|
002c88  ea010102          AND      r1,r1,r2
002c8c  6001              STR      r1,[r0,#0]
;;;4026   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
002c8e  4c46              LDR      r4,|L1.11688|
002c90  6821              LDR      r1,[r4,#0]
002c92  f441717c          ORR      r1,r1,#0x3f0
002c96  6021              STR      r1,[r4,#0]
;;;4027   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
002c98  69c1              LDR      r1,[r0,#0x1c]
002c9a  f4212140          BIC      r1,r1,#0xc0000
002c9e  61c1              STR      r1,[r0,#0x1c]
;;;4028   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
002ca0  6e21              LDR      r1,[r4,#0x60]
002ca2  f0417100          ORR      r1,r1,#0x2000000
002ca6  6621              STR      r1,[r4,#0x60]
;;;4029   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
002ca8  6841              LDR      r1,[r0,#4]
002caa  f0216140          BIC      r1,r1,#0xc000000
002cae  6041              STR      r1,[r0,#4]
;;;4030   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
002cb0  6820              LDR      r0,[r4,#0]
002cb2  f0405000          ORR      r0,r0,#0x20000000
002cb6  6020              STR      r0,[r4,#0]
;;;4031   
;;;4032   
;;;4033   
;;;4034   
;;;4035   
;;;4036   
;;;4037   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
002cb8  4842              LDR      r0,|L1.11716|
002cba  4d41              LDR      r5,|L1.11712|
002cbc  4943              LDR      r1,|L1.11724|
002cbe  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
002cc0  4841              LDR      r0,|L1.11720|
002cc2  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
002cc6  f9b11000          LDRSH    r1,[r1,#0]
002cca  7800              LDRB     r0,[r0,#0]
002ccc  4313              ORRS     r3,r3,r2
002cce  d007              BEQ      |L1.11488|
002cd0  b130              CBZ      r0,|L1.11488|
002cd2  2905              CMP      r1,#5
002cd4  dd04              BLE      |L1.11488|
;;;4038   	{
;;;4039   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
002cd6  69a3              LDR      r3,[r4,#0x18]
002cd8  f4437380          ORR      r3,r3,#0x100
002cdc  61a3              STR      r3,[r4,#0x18]
002cde  e003              B        |L1.11496|
                  |L1.11488|
;;;4040   	}
;;;4041   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
002ce0  69e3              LDR      r3,[r4,#0x1c]
002ce2  f4437380          ORR      r3,r3,#0x100
002ce6  61e3              STR      r3,[r4,#0x1c]
                  |L1.11496|
;;;4042   
;;;4043   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
002ce8  f8953088          LDRB     r3,[r5,#0x88]  ; bat
002cec  4313              ORRS     r3,r3,r2
002cee  d007              BEQ      |L1.11520|
002cf0  b130              CBZ      r0,|L1.11520|
002cf2  2905              CMP      r1,#5
002cf4  dd04              BLE      |L1.11520|
;;;4044   	{
;;;4045   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
002cf6  69a0              LDR      r0,[r4,#0x18]
002cf8  f0400040          ORR      r0,r0,#0x40
002cfc  61a0              STR      r0,[r4,#0x18]
002cfe  e003              B        |L1.11528|
                  |L1.11520|
;;;4046   	}
;;;4047   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
002d00  69e0              LDR      r0,[r4,#0x1c]
002d02  f0400040          ORR      r0,r0,#0x40
002d06  61e0              STR      r0,[r4,#0x1c]
                  |L1.11528|
;;;4048   
;;;4049   
;;;4050   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
002d08  20d2              MOVS     r0,#0xd2
002d0a  f7fffffe          BL       mess_find_unvol
002d0e  4d30              LDR      r5,|L1.11728|
002d10  b110              CBZ      r0,|L1.11544|
002d12  6828              LDR      r0,[r5,#0]  ; mess_data
002d14  2864              CMP      r0,#0x64
002d16  d06e              BEQ      |L1.11766|
                  |L1.11544|
;;;4051   	{
;;;4052   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4053   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4054   	}
;;;4055   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
002d18  69e0              LDR      r0,[r4,#0x1c]
002d1a  f0405000          ORR      r0,r0,#0x20000000
002d1e  61e0              STR      r0,[r4,#0x1c]
                  |L1.11552|
;;;4056   
;;;4057   
;;;4058   #ifndef UKU2071x
;;;4059   //Реле аварии сети
;;;4060   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4061   	{
;;;4062   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4063   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4064   	}
;;;4065   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4066   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4067   #endif
;;;4068   #ifdef UKU2071x
;;;4069   //Реле аварии сети
;;;4070   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002d20  20d2              MOVS     r0,#0xd2
002d22  f7fffffe          BL       mess_find_unvol
;;;4071   	{
;;;4072   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4073   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4074   	}
;;;4075   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
002d26  4e2b              LDR      r6,|L1.11732|
002d28  b110              CBZ      r0,|L1.11568|
002d2a  6828              LDR      r0,[r5,#0]            ;4070  ; mess_data
002d2c  2866              CMP      r0,#0x66              ;4070
002d2e  d073              BEQ      |L1.11800|
                  |L1.11568|
002d30  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002d32  07c0              LSLS     r0,r0,#31
002d34  d07c              BEQ      |L1.11824|
;;;4076   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002d36  6fa0              LDR      r0,[r4,#0x78]
002d38  f0407000          ORR      r0,r0,#0x2000000
002d3c  67a0              STR      r0,[r4,#0x78]
                  |L1.11582|
;;;4077   #endif
;;;4078   
;;;4079   #ifdef UKU_3U
;;;4080   //Реле аварий батарей
;;;4081   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4082   	{
;;;4083   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4084   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4085        }
;;;4086   else 
;;;4087   	{
;;;4088   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4089        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4090   	} 
;;;4091   
;;;4092   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4093   	{
;;;4094   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4095   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4096        }
;;;4097   else 
;;;4098   	{
;;;4099   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4100        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4101   	} 
;;;4102   
;;;4103   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4104   	{
;;;4105   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4106   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4107        }
;;;4108   else 
;;;4109   	{
;;;4110   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4111        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4112   	} 
;;;4113   
;;;4114   #endif
;;;4115   
;;;4116   
;;;4117   #ifdef UKU_GLONASS
;;;4118   //Реле аварий батарей
;;;4119   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4120   	{
;;;4121   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4122   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4123        }
;;;4124   else 
;;;4125   	{
;;;4126   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4127        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4128   	} 
;;;4129   
;;;4130   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4131   	{
;;;4132   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4133   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4134        }
;;;4135   else 
;;;4136   	{
;;;4137   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4138        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4139   	} 
;;;4140   
;;;4141   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4142   	{
;;;4143   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4144   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4145        }
;;;4146   else 
;;;4147   	{
;;;4148   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4149        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4150   	} 
;;;4151   
;;;4152   #endif
;;;4153   
;;;4154   #ifdef U 
;;;4155   
;;;4156   #endif
;;;4157   
;;;4158   #ifdef UKU_RSTKM
;;;4159   
;;;4160   //Реле общей аварии
;;;4161   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4162   	{
;;;4163   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4164   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4165   	}
;;;4166   else 
;;;4167   	{
;;;4168        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;4169             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4170             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4171             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;4172             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4173        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4174   	}
;;;4175   	
;;;4176   
;;;4177   //Реле освещения
;;;4178   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4179   	{
;;;4180   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4181   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4182        }
;;;4183   else 
;;;4184   	{
;;;4185   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4186        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4187   	}
;;;4188   
;;;4189   
;;;4190   //Реле выключения нагрузки
;;;4191   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4192   	{
;;;4193   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4194   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4195        }
;;;4196   else if(tloaddisable_cmnd==0)
;;;4197   	{
;;;4198   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4199   	}
;;;4200   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4201   	{
;;;4202   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4203   	}
;;;4204   
;;;4205   else 
;;;4206   	{
;;;4207   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4208        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4209   	} 
;;;4210   
;;;4211   //Реле осевого вентилятора
;;;4212   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4213   	{
;;;4214   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4215   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4216   	}
;;;4217   else 
;;;4218   	{
;;;4219   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4220        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4221   	} 
;;;4222   
;;;4223   #endif
;;;4224   
;;;4225   #ifdef UKU_KONTUR
;;;4226   
;;;4227   //Реле общей аварии
;;;4228   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4229   	{
;;;4230   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4231   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4232   	}
;;;4233   else 
;;;4234   	{
;;;4235        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4236             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4237             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4238             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4239             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4240        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4241   	}
;;;4242   
;;;4243   	
;;;4244   //rel_warm_plazma=0;
;;;4245   //Реле освещения   
;;;4246   /*
;;;4247   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4248   	{
;;;4249   	if(mess_data[1]==0)
;;;4250   		{
;;;4251   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4252   		rel_warm_plazma=1;
;;;4253   		}
;;;4254   	else if(mess_data[1]==1) 
;;;4255   		{
;;;4256   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4257   		rel_warm_plazma=2;
;;;4258   		}
;;;4259        }
;;;4260   else 
;;;4261   	{
;;;4262   	if(warm_stat_k==wsOFF) 
;;;4263   		{
;;;4264   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4265   		rel_warm_plazma=3;
;;;4266   		}
;;;4267        else 
;;;4268   		{
;;;4269   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4270   		rel_warm_plazma=4;
;;;4271   		}
;;;4272   	}
;;;4273   */
;;;4274   //Реле освещения
;;;4275   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4276   	{
;;;4277   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4278   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4279        }
;;;4280   else 
;;;4281   	{
;;;4282   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4283        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4284   	}
;;;4285   
;;;4286   
;;;4287   
;;;4288   //Реле выключения нагрузки
;;;4289   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4290   	{
;;;4291   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4292   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4293        }
;;;4294   else if(tloaddisable_cmnd==0)
;;;4295   	{
;;;4296   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4297   	}
;;;4298   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4299   	{
;;;4300   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4301   	}
;;;4302   
;;;4303   else 
;;;4304   	{
;;;4305   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4306        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4307   	} 
;;;4308   
;;;4309   //Реле осевого вентилятора или отопителя
;;;4310   if(RELE_LOG)
;;;4311   	{
;;;4312   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4313   		{
;;;4314   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4315   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4316   		}
;;;4317   	else 
;;;4318   		{
;;;4319   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4320   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4321   		} 
;;;4322   
;;;4323   	}
;;;4324   else 
;;;4325   	{
;;;4326   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4327   		{
;;;4328   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4329   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4330   		}
;;;4331   	else 
;;;4332   		{
;;;4333   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4334   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4335   		} 
;;;4336   	}
;;;4337   #endif
;;;4338   
;;;4339   #ifdef UKU_6U
;;;4340   //Реле аварий батарей
;;;4341   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4342   	{
;;;4343   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4344   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4345        }
;;;4346   else 
;;;4347   	{
;;;4348   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4349        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4350   	} 
;;;4351   
;;;4352   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4353   	{
;;;4354   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4355   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4356       }
;;;4357   else if(NPN_OUT==npnoRELEAVBAT2)
;;;4358   	{
;;;4359   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;4360   		{
;;;4361   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4362   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4363        	}
;;;4364   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4365   	}
;;;4366   else 
;;;4367   	{
;;;4368   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4369       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4370   	} 
;;;4371   
;;;4372   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4373   	{
;;;4374   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4375   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4376        }
;;;4377   else 
;;;4378   	{
;;;4379   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4380        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4381   	} 
;;;4382   
;;;4383   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4384   	{
;;;4385   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4386   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4387   	}
;;;4388   else if((NPN_OUT==npnoRELEVENT))
;;;4389   	{
;;;4390   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;4391   		{
;;;4392   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4393   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4394       	}
;;;4395   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4396   	}
;;;4397   else 
;;;4398   	{
;;;4399   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4400   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4401   	}
;;;4402   
;;;4403   #endif
;;;4404   
;;;4405   #ifdef UKU_220
;;;4406   //Реле аварий батарей
;;;4407   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4408   	{
;;;4409   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4410   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4411        }
;;;4412   else 
;;;4413   	{
;;;4414   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4415        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4416   	} 
;;;4417   
;;;4418   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4419   	{
;;;4420   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4421   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4422        }
;;;4423   else 
;;;4424   	{
;;;4425   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4426        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4427   	} 
;;;4428   
;;;4429   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4430   	{
;;;4431   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4432   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4433   	}
;;;4434   else 
;;;4435   	{
;;;4436   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;4437   		{
;;;4438   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4439   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4440   		}
;;;4441   	else 
;;;4442   		{
;;;4443   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4444        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4445   		}
;;;4446   	}
;;;4447   
;;;4448   #endif
;;;4449   
;;;4450   #ifdef UKU_220_V2
;;;4451   //Реле аварий батарей
;;;4452   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4453   	{
;;;4454   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4455   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4456        }
;;;4457   else 
;;;4458   	{
;;;4459   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4460        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4461   	} 
;;;4462   
;;;4463   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4464   	{
;;;4465   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4466   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4467        }
;;;4468   else 
;;;4469   	{
;;;4470   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4471        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4472   	} 
;;;4473   
;;;4474   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4475   	{
;;;4476   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4477   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4478   	}
;;;4479   else 
;;;4480   	{
;;;4481   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;4482   		{
;;;4483   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4484   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4485   		}
;;;4486   	else 
;;;4487   		{
;;;4488   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4489        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4490   		}
;;;4491   	}
;;;4492   
;;;4493   #endif
;;;4494   
;;;4495   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;4496   
;;;4497   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
002d3e  4826              LDR      r0,|L1.11736|
;;;4498   	{
;;;4499   	#ifndef UKU2071x
;;;4500   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4501   		{
;;;4502   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4503   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4504   		}
;;;4505   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4506   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4507   	#endif
;;;4508   
;;;4509   	#ifdef UKU2071x
;;;4510   		#ifndef APSENERGIA
;;;4511   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4512   			{
;;;4513   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4514   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4515   			}
;;;4516   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4517   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4518   		#endif
;;;4519   
;;;4520   		#ifdef APSENERGIA
;;;4521   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4522   			{
;;;4523   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4524   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4525   			}
;;;4526   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4527   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4528   		#endif
;;;4529   
;;;4530   	#endif
;;;4531   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4532   		{
;;;4533   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4534   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4535   	     }
;;;4536   	else 
;;;4537   		{
;;;4538   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4539   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4540   		} 
;;;4541   
;;;4542   	//Реле аварий батарей
;;;4543   	#ifndef APSENERGIA
;;;4544   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4545   		{
;;;4546   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4547   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4548        	}
;;;4549   	else 
;;;4550   		{
;;;4551   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002d40  f8df8098          LDR      r8,|L1.11740|
002d44  4f26              LDR      r7,|L1.11744|
002d46  8800              LDRH     r0,[r0,#0]            ;4497  ; AUSW_MAIN
002d48  f5a041aa          SUB      r1,r0,#0x5500         ;4497
002d4c  39fa              SUBS     r1,r1,#0xfa           ;4497
002d4e  d001              BEQ      |L1.11604|
002d50  1e49              SUBS     r1,r1,#1              ;4497
002d52  d172              BNE      |L1.11834|
                  |L1.11604|
002d54  20d2              MOVS     r0,#0xd2              ;4511
002d56  f7fffffe          BL       mess_find_unvol
002d5a  b110              CBZ      r0,|L1.11618|
002d5c  6828              LDR      r0,[r5,#0]            ;4511  ; mess_data
002d5e  2866              CMP      r0,#0x66              ;4511
002d60  d06f              BEQ      |L1.11842|
                  |L1.11618|
002d62  6830              LDR      r0,[r6,#0]            ;4516  ; avar_ind_stat
002d64  07c0              LSLS     r0,r0,#31             ;4516
002d66  d078              BEQ      |L1.11866|
002d68  6fa0              LDR      r0,[r4,#0x78]         ;4517
002d6a  f0407000          ORR      r0,r0,#0x2000000      ;4517
002d6e  67a0              STR      r0,[r4,#0x78]         ;4517
                  |L1.11632|
002d70  20d2              MOVS     r0,#0xd2              ;4531
002d72  f7fffffe          BL       mess_find_unvol
002d76  b110              CBZ      r0,|L1.11646|
002d78  6828              LDR      r0,[r5,#0]            ;4531  ; mess_data
002d7a  286a              CMP      r0,#0x6a              ;4531
002d7c  d074              BEQ      |L1.11880|
                  |L1.11646|
002d7e  6830              LDR      r0,[r6,#0]            ;4538  ; avar_ind_stat
002d80  4238              TST      r0,r7                 ;4538
002d82  d070              BEQ      |L1.11878|
002d84  69a0              LDR      r0,[r4,#0x18]         ;4539
002d86  f0400080          ORR      r0,r0,#0x80           ;4539
002d8a  61a0              STR      r0,[r4,#0x18]         ;4539
                  |L1.11660|
002d8c  20d2              MOVS     r0,#0xd2              ;4544
002d8e  f7fffffe          BL       mess_find_unvol
002d92  b110              CBZ      r0,|L1.11674|
002d94  6828              LDR      r0,[r5,#0]            ;4544  ; mess_data
002d96  2867              CMP      r0,#0x67              ;4544
002d98  d07a              BEQ      |L1.11920|
                  |L1.11674|
002d9a  e024              B        |L1.11750|
                  |L1.11676|
                          DCD      ||.bss||+0x42c
                  |L1.11680|
                          DCD      ||.bss||+0xc
                  |L1.11684|
                          DCD      0x40034000
                  |L1.11688|
                          DCD      0x2009c000
                  |L1.11692|
                          DCD      ||area_number.18||
                  |L1.11696|
                          DCD      bps
                  |L1.11700|
                          DCD      NUMIST
                  |L1.11704|
                          DCD      0x4002c000
                  |L1.11708|
                          DCD      0xfff000ff
                  |L1.11712|
                          DCD      bat
                  |L1.11716|
                          DCD      tbatdisable_stat
                  |L1.11720|
                          DCD      tbatdisable_cmnd
                  |L1.11724|
                          DCD      main_1Hz_cnt
                  |L1.11728|
                          DCD      mess_data
                  |L1.11732|
                          DCD      avar_ind_stat
                  |L1.11736|
                          DCD      AUSW_MAIN
                  |L1.11740|
                          DCD      ips_bat_av_stat
                  |L1.11744|
                          DCD      0x100007f8
002de4  e007              B        |L1.11766|
                  |L1.11750|
002de6  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002dea  b348              CBZ      r0,|L1.11840|
;;;4552        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002dec  69a0              LDR      r0,[r4,#0x18]
002dee  f0400010          ORR      r0,r0,#0x10
002df2  61a0              STR      r0,[r4,#0x18]
002df4  e1d9              B        |L1.12714|
                  |L1.11766|
002df6  6868              LDR      r0,[r5,#4]            ;4052  ; mess_data
002df8  2801              CMP      r0,#1                 ;4052
002dfa  d006              BEQ      |L1.11786|
002dfc  2800              CMP      r0,#0                 ;4053
002dfe  d18f              BNE      |L1.11552|
002e00  69e0              LDR      r0,[r4,#0x1c]         ;4053
002e02  f0405000          ORR      r0,r0,#0x20000000     ;4053
002e06  61e0              STR      r0,[r4,#0x1c]         ;4053
002e08  e78a              B        |L1.11552|
                  |L1.11786|
002e0a  69a0              LDR      r0,[r4,#0x18]         ;4052
002e0c  f0405000          ORR      r0,r0,#0x20000000     ;4052
002e10  61a0              STR      r0,[r4,#0x18]         ;4052
002e12  e785              B        |L1.11552|
002e14  e000              B        |L1.11800|
002e16  e00b              B        |L1.11824|
                  |L1.11800|
002e18  6868              LDR      r0,[r5,#4]            ;4072  ; mess_data
002e1a  b120              CBZ      r0,|L1.11814|
002e1c  6fa0              LDR      r0,[r4,#0x78]         ;4073
002e1e  f0407000          ORR      r0,r0,#0x2000000      ;4073
002e22  67a0              STR      r0,[r4,#0x78]         ;4073
002e24  e78b              B        |L1.11582|
                  |L1.11814|
002e26  6fe0              LDR      r0,[r4,#0x7c]         ;4072
002e28  f0407000          ORR      r0,r0,#0x2000000      ;4072
002e2c  67e0              STR      r0,[r4,#0x7c]         ;4072
002e2e  e786              B        |L1.11582|
                  |L1.11824|
002e30  6fe0              LDR      r0,[r4,#0x7c]         ;4075
002e32  f0407000          ORR      r0,r0,#0x2000000      ;4075
002e36  67e0              STR      r0,[r4,#0x7c]         ;4075
002e38  e781              B        |L1.11582|
                  |L1.11834|
002e3a  e03d              B        |L1.11960|
002e3c  e001              B        |L1.11842|
002e3e  e00c              B        |L1.11866|
                  |L1.11840|
002e40  e035              B        |L1.11950|
                  |L1.11842|
002e42  6868              LDR      r0,[r5,#4]            ;4513  ; mess_data
002e44  b120              CBZ      r0,|L1.11856|
002e46  6fa0              LDR      r0,[r4,#0x78]         ;4514
002e48  f0407000          ORR      r0,r0,#0x2000000      ;4514
002e4c  67a0              STR      r0,[r4,#0x78]         ;4514
002e4e  e78f              B        |L1.11632|
                  |L1.11856|
002e50  6fe0              LDR      r0,[r4,#0x7c]         ;4513
002e52  f0407000          ORR      r0,r0,#0x2000000      ;4513
002e56  67e0              STR      r0,[r4,#0x7c]         ;4513
002e58  e78a              B        |L1.11632|
                  |L1.11866|
002e5a  6fe0              LDR      r0,[r4,#0x7c]         ;4516
002e5c  f0407000          ORR      r0,r0,#0x2000000      ;4516
002e60  67e0              STR      r0,[r4,#0x7c]         ;4516
002e62  e785              B        |L1.11632|
002e64  e000              B        |L1.11880|
                  |L1.11878|
002e66  e00e              B        |L1.11910|
                  |L1.11880|
002e68  6868              LDR      r0,[r5,#4]            ;4533  ; mess_data
002e6a  b138              CBZ      r0,|L1.11900|
002e6c  2801              CMP      r0,#1                 ;4534
002e6e  d18d              BNE      |L1.11660|
002e70  69a0              LDR      r0,[r4,#0x18]         ;4534
002e72  f0400080          ORR      r0,r0,#0x80           ;4534
002e76  61a0              STR      r0,[r4,#0x18]         ;4534
002e78  e788              B        |L1.11660|
002e7a  e009              B        |L1.11920|
                  |L1.11900|
002e7c  69e0              LDR      r0,[r4,#0x1c]         ;4533
002e7e  f0400080          ORR      r0,r0,#0x80           ;4533
002e82  61e0              STR      r0,[r4,#0x1c]         ;4533
002e84  e782              B        |L1.11660|
                  |L1.11910|
002e86  69e0              LDR      r0,[r4,#0x1c]         ;4538
002e88  f0400080          ORR      r0,r0,#0x80           ;4538
002e8c  61e0              STR      r0,[r4,#0x1c]         ;4538
002e8e  e77d              B        |L1.11660|
                  |L1.11920|
002e90  6868              LDR      r0,[r5,#4]            ;4546  ; mess_data
002e92  b110              CBZ      r0,|L1.11930|
002e94  2801              CMP      r0,#1                 ;4547
002e96  d005              BEQ      |L1.11940|
002e98  e187              B        |L1.12714|
                  |L1.11930|
002e9a  69e0              LDR      r0,[r4,#0x1c]         ;4546
002e9c  f0400010          ORR      r0,r0,#0x10           ;4546
002ea0  61e0              STR      r0,[r4,#0x1c]         ;4546
002ea2  e182              B        |L1.12714|
                  |L1.11940|
002ea4  69a0              LDR      r0,[r4,#0x18]         ;4547
002ea6  f0400010          ORR      r0,r0,#0x10           ;4547
002eaa  61a0              STR      r0,[r4,#0x18]         ;4547
002eac  e17d              B        |L1.12714|
                  |L1.11950|
002eae  69e0              LDR      r0,[r4,#0x1c]         ;4551
002eb0  f0400010          ORR      r0,r0,#0x10           ;4551
002eb4  61e0              STR      r0,[r4,#0x1c]         ;4551
002eb6  e178              B        |L1.12714|
                  |L1.11960|
;;;4553   		}
;;;4554   	#endif
;;;4555   	#ifdef APSENERGIA
;;;4556   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4557   		{
;;;4558   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4559   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4560        	}
;;;4561   	else 
;;;4562   		{
;;;4563   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4564   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4565   		}
;;;4566   	#endif
;;;4567   	}
;;;4568   
;;;4569   else	if(AUSW_MAIN==22023)
002eb8  f5a041ac          SUB      r1,r0,#0x5600
002ebc  3907              SUBS     r1,#7
002ebe  d162              BNE      |L1.12166|
;;;4570   	{
;;;4571   
;;;4572   	//Реле аварий батарей
;;;4573   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002ec0  20d2              MOVS     r0,#0xd2
002ec2  f7fffffe          BL       mess_find_unvol
002ec6  b110              CBZ      r0,|L1.11982|
002ec8  6828              LDR      r0,[r5,#0]  ; mess_data
002eca  2867              CMP      r0,#0x67
002ecc  d023              BEQ      |L1.12054|
                  |L1.11982|
;;;4574   		{
;;;4575   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4576   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4577        	}
;;;4578   	else 
;;;4579   		{
;;;4580   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002ece  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002ed2  b370              CBZ      r0,|L1.12082|
;;;4581        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002ed4  69a0              LDR      r0,[r4,#0x18]
002ed6  f0400010          ORR      r0,r0,#0x10
002eda  61a0              STR      r0,[r4,#0x18]
                  |L1.11996|
;;;4582   		} 
;;;4583   
;;;4584   
;;;4585   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4586   	#ifndef UKU2071x
;;;4587   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4588   		{
;;;4589   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4590   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4591   		}
;;;4592   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4593   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4594   	#endif
;;;4595   	#ifdef UKU2071x
;;;4596   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002edc  20d2              MOVS     r0,#0xd2
002ede  f7fffffe          BL       mess_find_unvol
002ee2  b110              CBZ      r0,|L1.12010|
002ee4  6828              LDR      r0,[r5,#0]  ; mess_data
002ee6  2866              CMP      r0,#0x66
002ee8  d028              BEQ      |L1.12092|
                  |L1.12010|
;;;4597   		{
;;;4598   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4599   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4600   		}
;;;4601   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002eea  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002eec  07c0              LSLS     r0,r0,#31
002eee  d031              BEQ      |L1.12116|
;;;4602   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002ef0  6fa0              LDR      r0,[r4,#0x78]
002ef2  f0407000          ORR      r0,r0,#0x2000000
002ef6  67a0              STR      r0,[r4,#0x78]
                  |L1.12024|
;;;4603   	#endif
;;;4604   
;;;4605   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002ef8  20d2              MOVS     r0,#0xd2
002efa  f7fffffe          BL       mess_find_unvol
002efe  b110              CBZ      r0,|L1.12038|
002f00  6828              LDR      r0,[r5,#0]  ; mess_data
002f02  286a              CMP      r0,#0x6a
002f04  d02b              BEQ      |L1.12126|
                  |L1.12038|
;;;4606   		{
;;;4607   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4608   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4609   	     }
;;;4610   	else 
;;;4611   		{
;;;4612   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002f06  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002f08  4238              TST      r0,r7
002f0a  d037              BEQ      |L1.12156|
;;;4613   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002f0c  69a0              LDR      r0,[r4,#0x18]
002f0e  f0400080          ORR      r0,r0,#0x80
002f12  61a0              STR      r0,[r4,#0x18]
002f14  e149              B        |L1.12714|
                  |L1.12054|
002f16  6868              LDR      r0,[r5,#4]            ;4575  ; mess_data
002f18  b130              CBZ      r0,|L1.12072|
002f1a  2801              CMP      r0,#1                 ;4576
002f1c  d1de              BNE      |L1.11996|
002f1e  69a0              LDR      r0,[r4,#0x18]         ;4576
002f20  f0400010          ORR      r0,r0,#0x10           ;4576
002f24  61a0              STR      r0,[r4,#0x18]         ;4576
002f26  e7d9              B        |L1.11996|
                  |L1.12072|
002f28  69e0              LDR      r0,[r4,#0x1c]         ;4575
002f2a  f0400010          ORR      r0,r0,#0x10           ;4575
002f2e  61e0              STR      r0,[r4,#0x1c]         ;4575
002f30  e7d4              B        |L1.11996|
                  |L1.12082|
002f32  69e0              LDR      r0,[r4,#0x1c]         ;4580
002f34  f0400010          ORR      r0,r0,#0x10           ;4580
002f38  61e0              STR      r0,[r4,#0x1c]         ;4580
002f3a  e7cf              B        |L1.11996|
                  |L1.12092|
002f3c  6868              LDR      r0,[r5,#4]            ;4598  ; mess_data
002f3e  b120              CBZ      r0,|L1.12106|
002f40  69e0              LDR      r0,[r4,#0x1c]         ;4599
002f42  f0407000          ORR      r0,r0,#0x2000000      ;4599
002f46  61e0              STR      r0,[r4,#0x1c]         ;4599
002f48  e7d6              B        |L1.12024|
                  |L1.12106|
002f4a  69a0              LDR      r0,[r4,#0x18]         ;4598
002f4c  f0407000          ORR      r0,r0,#0x2000000      ;4598
002f50  61a0              STR      r0,[r4,#0x18]         ;4598
002f52  e7d1              B        |L1.12024|
                  |L1.12116|
002f54  6ba0              LDR      r0,[r4,#0x38]         ;4601
002f56  f0407000          ORR      r0,r0,#0x2000000      ;4601
002f5a  63a0              STR      r0,[r4,#0x38]         ;4601
002f5c  e7cc              B        |L1.12024|
                  |L1.12126|
002f5e  6868              LDR      r0,[r5,#4]            ;4607  ; mess_data
002f60  b110              CBZ      r0,|L1.12136|
002f62  2801              CMP      r0,#1                 ;4608
002f64  d005              BEQ      |L1.12146|
002f66  e120              B        |L1.12714|
                  |L1.12136|
002f68  69e0              LDR      r0,[r4,#0x1c]         ;4607
002f6a  f0400080          ORR      r0,r0,#0x80           ;4607
002f6e  61e0              STR      r0,[r4,#0x1c]         ;4607
002f70  e11b              B        |L1.12714|
                  |L1.12146|
002f72  69a0              LDR      r0,[r4,#0x18]         ;4608
002f74  f0400080          ORR      r0,r0,#0x80           ;4608
002f78  61a0              STR      r0,[r4,#0x18]         ;4608
002f7a  e116              B        |L1.12714|
                  |L1.12156|
002f7c  69e0              LDR      r0,[r4,#0x1c]         ;4612
002f7e  f0400080          ORR      r0,r0,#0x80           ;4612
002f82  61e0              STR      r0,[r4,#0x1c]         ;4612
002f84  e111              B        |L1.12714|
                  |L1.12166|
;;;4614   		} 
;;;4615   	}
;;;4616   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
002f86  f5a041ac          SUB      r1,r0,#0x5600
002f8a  391b              SUBS     r1,r1,#0x1b
002f8c  d001              BEQ      |L1.12178|
002f8e  1e49              SUBS     r1,r1,#1
002f90  d170              BNE      |L1.12404|
                  |L1.12178|
;;;4617   	{
;;;4618   	//Реле аварий батарей
;;;4619   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002f92  20d2              MOVS     r0,#0xd2
002f94  f7fffffe          BL       mess_find_unvol
002f98  b110              CBZ      r0,|L1.12192|
002f9a  6828              LDR      r0,[r5,#0]  ; mess_data
002f9c  2867              CMP      r0,#0x67
002f9e  d031              BEQ      |L1.12292|
                  |L1.12192|
;;;4620   		{
;;;4621   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4622   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4623        	}
;;;4624   	else 
;;;4625   		{
;;;4626   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002fa0  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002fa4  b3b8              CBZ      r0,|L1.12310|
;;;4627        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002fa6  69a0              LDR      r0,[r4,#0x18]
002fa8  f0400010          ORR      r0,r0,#0x10
002fac  61a0              STR      r0,[r4,#0x18]
                  |L1.12206|
;;;4628   		} 
;;;4629   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4630   	#ifndef UKU2071x 
;;;4631   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4632   		{
;;;4633   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4634   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4635   		}
;;;4636   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4637   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4638   	#endif
;;;4639   	#ifdef UKU2071x 
;;;4640   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002fae  20d2              MOVS     r0,#0xd2
002fb0  f7fffffe          BL       mess_find_unvol
002fb4  b110              CBZ      r0,|L1.12220|
002fb6  6828              LDR      r0,[r5,#0]  ; mess_data
002fb8  2866              CMP      r0,#0x66
002fba  d037              BEQ      |L1.12332|
                  |L1.12220|
;;;4641   		{
;;;4642   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4643   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4644   		}
;;;4645   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002fbc  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002fbe  07c0              LSLS     r0,r0,#31
002fc0  d040              BEQ      |L1.12356|
;;;4646   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002fc2  6fa0              LDR      r0,[r4,#0x78]
002fc4  f0407000          ORR      r0,r0,#0x2000000
002fc8  67a0              STR      r0,[r4,#0x78]
                  |L1.12234|
;;;4647   	#endif
;;;4648   
;;;4649   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002fca  20d2              MOVS     r0,#0xd2
002fcc  f7fffffe          BL       mess_find_unvol
002fd0  b110              CBZ      r0,|L1.12248|
002fd2  6828              LDR      r0,[r5,#0]  ; mess_data
002fd4  286a              CMP      r0,#0x6a
002fd6  d03a              BEQ      |L1.12366|
                  |L1.12248|
;;;4650   		{
;;;4651   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4652   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4653   	     }
;;;4654   	else 
;;;4655   		{
;;;4656   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002fd8  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002fda  4238              TST      r0,r7
002fdc  d045              BEQ      |L1.12394|
;;;4657   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002fde  69a0              LDR      r0,[r4,#0x18]
002fe0  f0400080          ORR      r0,r0,#0x80
002fe4  61a0              STR      r0,[r4,#0x18]
                  |L1.12262|
;;;4658   		}
;;;4659   	//Реле аварии БПС
;;;4660   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002fe6  20d2              MOVS     r0,#0xd2
002fe8  f7fffffe          BL       mess_find_unvol
002fec  b110              CBZ      r0,|L1.12276|
002fee  6828              LDR      r0,[r5,#0]  ; mess_data
002ff0  286a              CMP      r0,#0x6a
002ff2  d040              BEQ      |L1.12406|
                  |L1.12276|
;;;4661   		{
;;;4662   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4663   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4664        	}
;;;4665   	else 
;;;4666   		{
;;;4667   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
002ff4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002ff6  4238              TST      r0,r7
002ff8  d04c              BEQ      |L1.12436|
;;;4668        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
002ffa  69a0              LDR      r0,[r4,#0x18]
002ffc  f0400020          ORR      r0,r0,#0x20
003000  61a0              STR      r0,[r4,#0x18]
003002  e0d2              B        |L1.12714|
                  |L1.12292|
003004  6868              LDR      r0,[r5,#4]            ;4621  ; mess_data
003006  b138              CBZ      r0,|L1.12312|
003008  2801              CMP      r0,#1                 ;4622
00300a  d1d0              BNE      |L1.12206|
00300c  69a0              LDR      r0,[r4,#0x18]         ;4622
00300e  f0400010          ORR      r0,r0,#0x10           ;4622
003012  61a0              STR      r0,[r4,#0x18]         ;4622
003014  e7cb              B        |L1.12206|
                  |L1.12310|
003016  e004              B        |L1.12322|
                  |L1.12312|
003018  69e0              LDR      r0,[r4,#0x1c]         ;4621
00301a  f0400010          ORR      r0,r0,#0x10           ;4621
00301e  61e0              STR      r0,[r4,#0x1c]         ;4621
003020  e7c5              B        |L1.12206|
                  |L1.12322|
003022  69e0              LDR      r0,[r4,#0x1c]         ;4626
003024  f0400010          ORR      r0,r0,#0x10           ;4626
003028  61e0              STR      r0,[r4,#0x1c]         ;4626
00302a  e7c0              B        |L1.12206|
                  |L1.12332|
00302c  6868              LDR      r0,[r5,#4]            ;4642  ; mess_data
00302e  b120              CBZ      r0,|L1.12346|
003030  69e0              LDR      r0,[r4,#0x1c]         ;4643
003032  f0407000          ORR      r0,r0,#0x2000000      ;4643
003036  61e0              STR      r0,[r4,#0x1c]         ;4643
003038  e7c7              B        |L1.12234|
                  |L1.12346|
00303a  69a0              LDR      r0,[r4,#0x18]         ;4642
00303c  f0407000          ORR      r0,r0,#0x2000000      ;4642
003040  61a0              STR      r0,[r4,#0x18]         ;4642
003042  e7c2              B        |L1.12234|
                  |L1.12356|
003044  6ba0              LDR      r0,[r4,#0x38]         ;4645
003046  f0407000          ORR      r0,r0,#0x2000000      ;4645
00304a  63a0              STR      r0,[r4,#0x38]         ;4645
00304c  e7bd              B        |L1.12234|
                  |L1.12366|
00304e  6868              LDR      r0,[r5,#4]            ;4651  ; mess_data
003050  b130              CBZ      r0,|L1.12384|
003052  2801              CMP      r0,#1                 ;4652
003054  d1c7              BNE      |L1.12262|
003056  69a0              LDR      r0,[r4,#0x18]         ;4652
003058  f0400080          ORR      r0,r0,#0x80           ;4652
00305c  61a0              STR      r0,[r4,#0x18]         ;4652
00305e  e7c2              B        |L1.12262|
                  |L1.12384|
003060  69e0              LDR      r0,[r4,#0x1c]         ;4651
003062  f0400080          ORR      r0,r0,#0x80           ;4651
003066  61e0              STR      r0,[r4,#0x1c]         ;4651
003068  e7bd              B        |L1.12262|
                  |L1.12394|
00306a  69e0              LDR      r0,[r4,#0x1c]         ;4656
00306c  f0400080          ORR      r0,r0,#0x80           ;4656
003070  61e0              STR      r0,[r4,#0x1c]         ;4656
003072  e7b8              B        |L1.12262|
                  |L1.12404|
003074  e013              B        |L1.12446|
                  |L1.12406|
003076  6868              LDR      r0,[r5,#4]            ;4662  ; mess_data
003078  b110              CBZ      r0,|L1.12416|
00307a  2801              CMP      r0,#1                 ;4663
00307c  d005              BEQ      |L1.12426|
00307e  e094              B        |L1.12714|
                  |L1.12416|
003080  69e0              LDR      r0,[r4,#0x1c]         ;4662
003082  f0400020          ORR      r0,r0,#0x20           ;4662
003086  61e0              STR      r0,[r4,#0x1c]         ;4662
003088  e08f              B        |L1.12714|
                  |L1.12426|
00308a  69a0              LDR      r0,[r4,#0x18]         ;4663
00308c  f0400020          ORR      r0,r0,#0x20           ;4663
003090  61a0              STR      r0,[r4,#0x18]         ;4663
003092  e08a              B        |L1.12714|
                  |L1.12436|
003094  69e0              LDR      r0,[r4,#0x1c]         ;4667
003096  f0400020          ORR      r0,r0,#0x20           ;4667
00309a  61e0              STR      r0,[r4,#0x1c]         ;4667
00309c  e085              B        |L1.12714|
                  |L1.12446|
;;;4669   		} 
;;;4670   	}
;;;4671   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
00309e  f5a041ac          SUB      r1,r0,#0x5600
0030a2  3911              SUBS     r1,r1,#0x11
0030a4  d001              BEQ      |L1.12458|
0030a6  310f              ADDS     r1,r1,#0xf
0030a8  d163              BNE      |L1.12658|
                  |L1.12458|
;;;4672   	{
;;;4673   	#ifndef UKU2071x 
;;;4674   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4675   		{
;;;4676   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4677   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4678   		}
;;;4679   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4680   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4681   	#endif
;;;4682   	#ifdef UKU2071x 
;;;4683   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
0030aa  20d2              MOVS     r0,#0xd2
0030ac  f7fffffe          BL       mess_find_unvol
0030b0  b110              CBZ      r0,|L1.12472|
0030b2  6828              LDR      r0,[r5,#0]  ; mess_data
0030b4  2866              CMP      r0,#0x66
0030b6  d023              BEQ      |L1.12544|
                  |L1.12472|
;;;4684   		{
;;;4685   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4686   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4687   		}
;;;4688   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
0030b8  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0030ba  07c0              LSLS     r0,r0,#31
0030bc  d02c              BEQ      |L1.12568|
;;;4689   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
0030be  6fa0              LDR      r0,[r4,#0x78]
0030c0  f0407000          ORR      r0,r0,#0x2000000
0030c4  67a0              STR      r0,[r4,#0x78]
                  |L1.12486|
;;;4690   	#endif
;;;4691   	
;;;4692   	
;;;4693   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
0030c6  20d2              MOVS     r0,#0xd2
0030c8  f7fffffe          BL       mess_find_unvol
0030cc  b110              CBZ      r0,|L1.12500|
0030ce  6828              LDR      r0,[r5,#0]  ; mess_data
0030d0  286a              CMP      r0,#0x6a
0030d2  d026              BEQ      |L1.12578|
                  |L1.12500|
;;;4694   		{
;;;4695   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4696   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4697   	     }
;;;4698   	else 
;;;4699   		{
;;;4700   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
0030d4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0030d6  4238              TST      r0,r7
0030d8  d031              BEQ      |L1.12606|
;;;4701   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
0030da  69a0              LDR      r0,[r4,#0x18]
0030dc  f0400080          ORR      r0,r0,#0x80
0030e0  61a0              STR      r0,[r4,#0x18]
                  |L1.12514|
;;;4702   		} 
;;;4703   
;;;4704   	//Реле аварий батарей
;;;4705   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
0030e2  20d2              MOVS     r0,#0xd2
0030e4  f7fffffe          BL       mess_find_unvol
0030e8  b110              CBZ      r0,|L1.12528|
0030ea  6828              LDR      r0,[r5,#0]  ; mess_data
0030ec  2867              CMP      r0,#0x67
0030ee  d02b              BEQ      |L1.12616|
                  |L1.12528|
;;;4706   		{
;;;4707   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4708   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4709        	}
;;;4710   	else 
;;;4711   		{
;;;4712   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
0030f0  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
0030f4  b390              CBZ      r0,|L1.12636|
;;;4713        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
0030f6  69a0              LDR      r0,[r4,#0x18]
0030f8  f0400010          ORR      r0,r0,#0x10
0030fc  61a0              STR      r0,[r4,#0x18]
0030fe  e054              B        |L1.12714|
                  |L1.12544|
003100  6868              LDR      r0,[r5,#4]            ;4685  ; mess_data
003102  b120              CBZ      r0,|L1.12558|
003104  6fa0              LDR      r0,[r4,#0x78]         ;4686
003106  f0407000          ORR      r0,r0,#0x2000000      ;4686
00310a  67a0              STR      r0,[r4,#0x78]         ;4686
00310c  e7db              B        |L1.12486|
                  |L1.12558|
00310e  6fe0              LDR      r0,[r4,#0x7c]         ;4685
003110  f0407000          ORR      r0,r0,#0x2000000      ;4685
003114  67e0              STR      r0,[r4,#0x7c]         ;4685
003116  e7d6              B        |L1.12486|
                  |L1.12568|
003118  6fe0              LDR      r0,[r4,#0x7c]         ;4688
00311a  f0407000          ORR      r0,r0,#0x2000000      ;4688
00311e  67e0              STR      r0,[r4,#0x7c]         ;4688
003120  e7d1              B        |L1.12486|
                  |L1.12578|
003122  6868              LDR      r0,[r5,#4]            ;4695  ; mess_data
003124  b130              CBZ      r0,|L1.12596|
003126  2801              CMP      r0,#1                 ;4696
003128  d1db              BNE      |L1.12514|
00312a  69a0              LDR      r0,[r4,#0x18]         ;4696
00312c  f0400080          ORR      r0,r0,#0x80           ;4696
003130  61a0              STR      r0,[r4,#0x18]         ;4696
003132  e7d6              B        |L1.12514|
                  |L1.12596|
003134  69e0              LDR      r0,[r4,#0x1c]         ;4695
003136  f0400080          ORR      r0,r0,#0x80           ;4695
00313a  61e0              STR      r0,[r4,#0x1c]         ;4695
00313c  e7d1              B        |L1.12514|
                  |L1.12606|
00313e  69e0              LDR      r0,[r4,#0x1c]         ;4700
003140  f0400080          ORR      r0,r0,#0x80           ;4700
003144  61e0              STR      r0,[r4,#0x1c]         ;4700
003146  e7cc              B        |L1.12514|
                  |L1.12616|
003148  6868              LDR      r0,[r5,#4]            ;4707  ; mess_data
00314a  b110              CBZ      r0,|L1.12626|
00314c  2801              CMP      r0,#1                 ;4708
00314e  d006              BEQ      |L1.12638|
003150  e02b              B        |L1.12714|
                  |L1.12626|
003152  69e0              LDR      r0,[r4,#0x1c]         ;4707
003154  f0400010          ORR      r0,r0,#0x10           ;4707
003158  61e0              STR      r0,[r4,#0x1c]         ;4707
00315a  e026              B        |L1.12714|
                  |L1.12636|
00315c  e004              B        |L1.12648|
                  |L1.12638|
00315e  69a0              LDR      r0,[r4,#0x18]         ;4708
003160  f0400010          ORR      r0,r0,#0x10           ;4708
003164  61a0              STR      r0,[r4,#0x18]         ;4708
003166  e020              B        |L1.12714|
                  |L1.12648|
003168  69e0              LDR      r0,[r4,#0x1c]         ;4712
00316a  f0400010          ORR      r0,r0,#0x10           ;4712
00316e  61e0              STR      r0,[r4,#0x1c]         ;4712
003170  e01b              B        |L1.12714|
                  |L1.12658|
;;;4714   		} 
;;;4715   	} 	 
;;;4716   else	
;;;4717   	{
;;;4718   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4719   	#ifndef UKU2071x 
;;;4720   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4721   		{
;;;4722   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4723   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4724   		}
;;;4725   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4726   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4727   	#endif
;;;4728   	#ifdef UKU2071x 
;;;4729   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003172  20d2              MOVS     r0,#0xd2
003174  f7fffffe          BL       mess_find_unvol
003178  b110              CBZ      r0,|L1.12672|
00317a  6828              LDR      r0,[r5,#0]  ; mess_data
00317c  2866              CMP      r0,#0x66
00317e  d026              BEQ      |L1.12750|
                  |L1.12672|
;;;4730   		{
;;;4731   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4732   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4733   		}
;;;4734   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003180  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003182  07c0              LSLS     r0,r0,#31
003184  d02f              BEQ      |L1.12774|
;;;4735   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003186  6fa0              LDR      r0,[r4,#0x78]
003188  f0407000          ORR      r0,r0,#0x2000000
00318c  67a0              STR      r0,[r4,#0x78]
                  |L1.12686|
;;;4736   	#endif
;;;4737   
;;;4738   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
00318e  20d2              MOVS     r0,#0xd2
003190  f7fffffe          BL       mess_find_unvol
003194  b110              CBZ      r0,|L1.12700|
003196  6828              LDR      r0,[r5,#0]  ; mess_data
003198  286a              CMP      r0,#0x6a
00319a  d029              BEQ      |L1.12784|
                  |L1.12700|
;;;4739   		{
;;;4740   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4741   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4742        	}
;;;4743   	else 
;;;4744   		{
;;;4745   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
00319c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
00319e  4238              TST      r0,r7
0031a0  d034              BEQ      |L1.12812|
;;;4746        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
0031a2  69a0              LDR      r0,[r4,#0x18]
0031a4  f0400020          ORR      r0,r0,#0x20
0031a8  61a0              STR      r0,[r4,#0x18]
                  |L1.12714|
;;;4747   		}
;;;4748   	}
;;;4749   //Дополнительное реле УКУ 
;;;4750   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
0031aa  20d2              MOVS     r0,#0xd2
0031ac  f7fffffe          BL       mess_find_unvol
;;;4751   	{
;;;4752   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;4753   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;4754   	}
;;;4755   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;4756   	{
;;;4757   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
0031b0  f8df83f4          LDR      r8,|L1.13736|
0031b4  4ffd              LDR      r7,|L1.13740|
0031b6  4efe              LDR      r6,|L1.13744|
0031b8  b110              CBZ      r0,|L1.12736|
0031ba  6828              LDR      r0,[r5,#0]            ;4750  ; mess_data
0031bc  2871              CMP      r0,#0x71              ;4750
0031be  d02a              BEQ      |L1.12822|
                  |L1.12736|
0031c0  48fc              LDR      r0,|L1.13748|
0031c2  f9b00000          LDRSH    r0,[r0,#0]            ;4755  ; DOP_RELE_FUNC
0031c6  b380              CBZ      r0,|L1.12842|
;;;4758   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;4759   	}
;;;4760   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
0031c8  2801              CMP      r0,#1
0031ca  d064              BEQ      |L1.12950|
0031cc  e06e              B        |L1.12972|
                  |L1.12750|
0031ce  6868              LDR      r0,[r5,#4]            ;4731  ; mess_data
0031d0  b120              CBZ      r0,|L1.12764|
0031d2  69e0              LDR      r0,[r4,#0x1c]         ;4732
0031d4  f0407000          ORR      r0,r0,#0x2000000      ;4732
0031d8  61e0              STR      r0,[r4,#0x1c]         ;4732
0031da  e7d8              B        |L1.12686|
                  |L1.12764|
0031dc  69a0              LDR      r0,[r4,#0x18]         ;4731
0031de  f0407000          ORR      r0,r0,#0x2000000      ;4731
0031e2  61a0              STR      r0,[r4,#0x18]         ;4731
0031e4  e7d3              B        |L1.12686|
                  |L1.12774|
0031e6  6ba0              LDR      r0,[r4,#0x38]         ;4734
0031e8  f0407000          ORR      r0,r0,#0x2000000      ;4734
0031ec  63a0              STR      r0,[r4,#0x38]         ;4734
0031ee  e7ce              B        |L1.12686|
                  |L1.12784|
0031f0  6868              LDR      r0,[r5,#4]            ;4740  ; mess_data
0031f2  b130              CBZ      r0,|L1.12802|
0031f4  2801              CMP      r0,#1                 ;4741
0031f6  d1d8              BNE      |L1.12714|
0031f8  69a0              LDR      r0,[r4,#0x18]         ;4741
0031fa  f0400020          ORR      r0,r0,#0x20           ;4741
0031fe  61a0              STR      r0,[r4,#0x18]         ;4741
003200  e7d3              B        |L1.12714|
                  |L1.12802|
003202  69e0              LDR      r0,[r4,#0x1c]         ;4740
003204  f0400020          ORR      r0,r0,#0x20           ;4740
003208  61e0              STR      r0,[r4,#0x1c]         ;4740
00320a  e7ce              B        |L1.12714|
                  |L1.12812|
00320c  69e0              LDR      r0,[r4,#0x1c]         ;4745
00320e  f0400020          ORR      r0,r0,#0x20           ;4745
003212  61e0              STR      r0,[r4,#0x1c]         ;4745
003214  e7c9              B        |L1.12714|
                  |L1.12822|
003216  6868              LDR      r0,[r5,#4]            ;4752  ; mess_data
003218  b110              CBZ      r0,|L1.12832|
00321a  2801              CMP      r0,#1                 ;4753
00321c  d006              BEQ      |L1.12844|
00321e  e045              B        |L1.12972|
                  |L1.12832|
003220  69e0              LDR      r0,[r4,#0x1c]         ;4752
003222  f4407000          ORR      r0,r0,#0x200          ;4752
003226  61e0              STR      r0,[r4,#0x1c]         ;4752
003228  e040              B        |L1.12972|
                  |L1.12842|
00322a  e004              B        |L1.12854|
                  |L1.12844|
00322c  69a0              LDR      r0,[r4,#0x18]         ;4753
00322e  f4407000          ORR      r0,r0,#0x200          ;4753
003232  61a0              STR      r0,[r4,#0x18]         ;4753
003234  e03a              B        |L1.12972|
                  |L1.12854|
003236  48e0              LDR      r0,|L1.13752|
003238  49e0              LDR      r1,|L1.13756|
00323a  f9b00000          LDRSH    r0,[r0,#0]            ;4757  ; speedChIsOn
00323e  b9c8              CBNZ     r0,|L1.12916|
003240  7fb2              LDRB     r2,[r6,#0x1e]         ;4757  ; spc_stat
003242  2a02              CMP      r2,#2                 ;4757
003244  d016              BEQ      |L1.12916|
003246  780a              LDRB     r2,[r1,#0]            ;4757  ; hv_vz_stat
003248  b9a2              CBNZ     r2,|L1.12916|
00324a  783a              LDRB     r2,[r7,#0]            ;4757  ; sp_ch_stat
00324c  b992              CBNZ     r2,|L1.12916|
00324e  7872              LDRB     r2,[r6,#1]            ;4757  ; vz1_stat
003250  b982              CBNZ     r2,|L1.12916|
003252  78f2              LDRB     r2,[r6,#3]            ;4757  ; vz2_stat
003254  b972              CBNZ     r2,|L1.12916|
003256  f9b82000          LDRSH    r2,[r8,#0]            ;4757  ; load_U
00325a  230a              MOVS     r3,#0xa               ;4757
00325c  fb92f2f3          SDIV     r2,r2,r3              ;4757
003260  4bd7              LDR      r3,|L1.13760|
003262  f9b33000          LDRSH    r3,[r3,#0]            ;4757  ; UVENTOFF
003266  429a              CMP      r2,r3                 ;4757
003268  da04              BGE      |L1.12916|
00326a  69e0              LDR      r0,[r4,#0x1c]         ;4757
00326c  f4407000          ORR      r0,r0,#0x200          ;4757
003270  61e0              STR      r0,[r4,#0x1c]         ;4757
003272  e01b              B        |L1.12972|
                  |L1.12916|
003274  b950              CBNZ     r0,|L1.12940|
003276  7fb0              LDRB     r0,[r6,#0x1e]         ;4758  ; spc_stat
003278  2802              CMP      r0,#2                 ;4758
00327a  d007              BEQ      |L1.12940|
00327c  7808              LDRB     r0,[r1,#0]            ;4758  ; hv_vz_stat
00327e  b928              CBNZ     r0,|L1.12940|
003280  7838              LDRB     r0,[r7,#0]            ;4758  ; sp_ch_stat
003282  b918              CBNZ     r0,|L1.12940|
003284  7870              LDRB     r0,[r6,#1]            ;4758  ; vz1_stat
003286  b908              CBNZ     r0,|L1.12940|
003288  78f0              LDRB     r0,[r6,#3]            ;4758  ; vz2_stat
00328a  b178              CBZ      r0,|L1.12972|
                  |L1.12940|
00328c  69a0              LDR      r0,[r4,#0x18]         ;4758
00328e  f4407000          ORR      r0,r0,#0x200          ;4758
003292  61a0              STR      r0,[r4,#0x18]         ;4758
003294  e00a              B        |L1.12972|
                  |L1.12950|
;;;4761   	{
;;;4762   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003296  20d2              MOVS     r0,#0xd2
003298  f7fffffe          BL       mess_find_unvol
00329c  b110              CBZ      r0,|L1.12964|
00329e  6828              LDR      r0,[r5,#0]  ; mess_data
0032a0  2872              CMP      r0,#0x72
0032a2  d017              BEQ      |L1.13012|
                  |L1.12964|
;;;4763   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
0032a4  69a0              LDR      r0,[r4,#0x18]
0032a6  f4407000          ORR      r0,r0,#0x200
0032aa  61a0              STR      r0,[r4,#0x18]
                  |L1.12972|
;;;4764   	}
;;;4765   	
;;;4766   //Блок выносной реле
;;;4767   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
0032ac  20d2              MOVS     r0,#0xd2
0032ae  f7fffffe          BL       mess_find_unvol
;;;4768   	{
;;;4769   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
0032b2  f8df9310          LDR      r9,|L1.13764|
;;;4770   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;4771   	}
;;;4772   else 
;;;4773   	{
;;;4774   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
0032b6  4cc4              LDR      r4,|L1.13768|
0032b8  b110              CBZ      r0,|L1.12992|
0032ba  6828              LDR      r0,[r5,#0]            ;4767  ; mess_data
0032bc  2875              CMP      r0,#0x75              ;4767
0032be  d00e              BEQ      |L1.13022|
                  |L1.12992|
0032c0  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0032c2  07c0              LSLS     r0,r0,#31
0032c4  d01e              BEQ      |L1.13060|
0032c6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0032ca  f0400001          ORR      r0,r0,#1
0032ce  f8890000          STRB     r0,[r9,#0]
0032d2  e01d              B        |L1.13072|
                  |L1.13012|
0032d4  69e0              LDR      r0,[r4,#0x1c]         ;4762
0032d6  f4407000          ORR      r0,r0,#0x200          ;4762
0032da  61e0              STR      r0,[r4,#0x1c]         ;4762
0032dc  e7e6              B        |L1.12972|
                  |L1.13022|
0032de  6868              LDR      r0,[r5,#4]            ;4769  ; mess_data
0032e0  b110              CBZ      r0,|L1.13032|
0032e2  2801              CMP      r0,#1                 ;4770
0032e4  d007              BEQ      |L1.13046|
0032e6  e013              B        |L1.13072|
                  |L1.13032|
0032e8  f8990000          LDRB     r0,[r9,#0]            ;4769  ; bdr_transmit_stat
0032ec  f00000fe          AND      r0,r0,#0xfe           ;4769
0032f0  f8890000          STRB     r0,[r9,#0]            ;4769
0032f4  e00c              B        |L1.13072|
                  |L1.13046|
0032f6  f8990000          LDRB     r0,[r9,#0]            ;4770  ; bdr_transmit_stat
0032fa  f0400001          ORR      r0,r0,#1              ;4770
0032fe  f8890000          STRB     r0,[r9,#0]            ;4770
003302  e005              B        |L1.13072|
                  |L1.13060|
;;;4775   	else 						bdr_transmit_stat&=0xfe;
003304  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003308  f00000fe          AND      r0,r0,#0xfe
00330c  f8890000          STRB     r0,[r9,#0]
                  |L1.13072|
;;;4776   	}	
;;;4777   
;;;4778   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
003310  20d2              MOVS     r0,#0xd2
003312  f7fffffe          BL       mess_find_unvol
003316  b110              CBZ      r0,|L1.13086|
003318  6828              LDR      r0,[r5,#0]  ; mess_data
00331a  2876              CMP      r0,#0x76
00331c  d009              BEQ      |L1.13106|
                  |L1.13086|
;;;4779   	{
;;;4780   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;4781   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;4782   	}
;;;4783   else 
;;;4784   	{
;;;4785   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
00331e  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003320  07c0              LSLS     r0,r0,#31
003322  d019              BEQ      |L1.13144|
003324  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003328  f0400002          ORR      r0,r0,#2
00332c  f8890000          STRB     r0,[r9,#0]
003330  e018              B        |L1.13156|
                  |L1.13106|
003332  6868              LDR      r0,[r5,#4]            ;4780  ; mess_data
003334  b110              CBZ      r0,|L1.13116|
003336  2801              CMP      r0,#1                 ;4781
003338  d007              BEQ      |L1.13130|
00333a  e013              B        |L1.13156|
                  |L1.13116|
00333c  f8990000          LDRB     r0,[r9,#0]            ;4780  ; bdr_transmit_stat
003340  f00000fd          AND      r0,r0,#0xfd           ;4780
003344  f8890000          STRB     r0,[r9,#0]            ;4780
003348  e00c              B        |L1.13156|
                  |L1.13130|
00334a  f8990000          LDRB     r0,[r9,#0]            ;4781  ; bdr_transmit_stat
00334e  f0400002          ORR      r0,r0,#2              ;4781
003352  f8890000          STRB     r0,[r9,#0]            ;4781
003356  e005              B        |L1.13156|
                  |L1.13144|
;;;4786   	else 						bdr_transmit_stat&=0xfd;
003358  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00335c  f00000fd          AND      r0,r0,#0xfd
003360  f8890000          STRB     r0,[r9,#0]
                  |L1.13156|
;;;4787   	}	
;;;4788   	
;;;4789   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
003364  20d2              MOVS     r0,#0xd2
003366  f7fffffe          BL       mess_find_unvol
00336a  b110              CBZ      r0,|L1.13170|
00336c  6828              LDR      r0,[r5,#0]  ; mess_data
00336e  2877              CMP      r0,#0x77
003370  d009              BEQ      |L1.13190|
                  |L1.13170|
;;;4790   	{
;;;4791   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;4792   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;4793   	}
;;;4794   else 
;;;4795   	{
;;;4796   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
003372  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003374  07c0              LSLS     r0,r0,#31
003376  d019              BEQ      |L1.13228|
003378  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00337c  f0400004          ORR      r0,r0,#4
003380  f8890000          STRB     r0,[r9,#0]
003384  e018              B        |L1.13240|
                  |L1.13190|
003386  6868              LDR      r0,[r5,#4]            ;4791  ; mess_data
003388  b110              CBZ      r0,|L1.13200|
00338a  2801              CMP      r0,#1                 ;4792
00338c  d007              BEQ      |L1.13214|
00338e  e013              B        |L1.13240|
                  |L1.13200|
003390  f8990000          LDRB     r0,[r9,#0]            ;4791  ; bdr_transmit_stat
003394  f00000fb          AND      r0,r0,#0xfb           ;4791
003398  f8890000          STRB     r0,[r9,#0]            ;4791
00339c  e00c              B        |L1.13240|
                  |L1.13214|
00339e  f8990000          LDRB     r0,[r9,#0]            ;4792  ; bdr_transmit_stat
0033a2  f0400004          ORR      r0,r0,#4              ;4792
0033a6  f8890000          STRB     r0,[r9,#0]            ;4792
0033aa  e005              B        |L1.13240|
                  |L1.13228|
;;;4797   	else 						bdr_transmit_stat&=0xfb;
0033ac  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0033b0  f00000fb          AND      r0,r0,#0xfb
0033b4  f8890000          STRB     r0,[r9,#0]
                  |L1.13240|
;;;4798   	}	
;;;4799   	
;;;4800   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
0033b8  20d2              MOVS     r0,#0xd2
0033ba  f7fffffe          BL       mess_find_unvol
0033be  b110              CBZ      r0,|L1.13254|
0033c0  6828              LDR      r0,[r5,#0]  ; mess_data
0033c2  2878              CMP      r0,#0x78
0033c4  d009              BEQ      |L1.13274|
                  |L1.13254|
;;;4801   	{
;;;4802   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;4803   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;4804   	}
;;;4805   else 
;;;4806   	{
;;;4807   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
0033c6  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0033c8  07c0              LSLS     r0,r0,#31
0033ca  d019              BEQ      |L1.13312|
0033cc  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0033d0  f0400008          ORR      r0,r0,#8
0033d4  f8890000          STRB     r0,[r9,#0]
0033d8  e018              B        |L1.13324|
                  |L1.13274|
0033da  6868              LDR      r0,[r5,#4]            ;4802  ; mess_data
0033dc  b110              CBZ      r0,|L1.13284|
0033de  2801              CMP      r0,#1                 ;4803
0033e0  d007              BEQ      |L1.13298|
0033e2  e013              B        |L1.13324|
                  |L1.13284|
0033e4  f8990000          LDRB     r0,[r9,#0]            ;4802  ; bdr_transmit_stat
0033e8  f00000f7          AND      r0,r0,#0xf7           ;4802
0033ec  f8890000          STRB     r0,[r9,#0]            ;4802
0033f0  e00c              B        |L1.13324|
                  |L1.13298|
0033f2  f8990000          LDRB     r0,[r9,#0]            ;4803  ; bdr_transmit_stat
0033f6  f0400008          ORR      r0,r0,#8              ;4803
0033fa  f8890000          STRB     r0,[r9,#0]            ;4803
0033fe  e005              B        |L1.13324|
                  |L1.13312|
;;;4808   	else 						bdr_transmit_stat&=0xf7;
003400  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003404  f00000f7          AND      r0,r0,#0xf7
003408  f8890000          STRB     r0,[r9,#0]
                  |L1.13324|
;;;4809   	}	
;;;4810   					 	
;;;4811   #endif
;;;4812   
;;;4813   #ifdef UKU_KONTUR
;;;4814   
;;;4815   //Реле общей аварии
;;;4816   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4817   	{
;;;4818   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4819   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4820   	}
;;;4821   else 
;;;4822   	{
;;;4823        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4824             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4825             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4826             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4827             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4828        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4829   	}
;;;4830   
;;;4831   	
;;;4832   //rel_warm_plazma=0;
;;;4833   //Реле освещения   
;;;4834   /*
;;;4835   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4836   	{
;;;4837   	if(mess_data[1]==0)
;;;4838   		{
;;;4839   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4840   		rel_warm_plazma=1;
;;;4841   		}
;;;4842   	else if(mess_data[1]==1) 
;;;4843   		{
;;;4844   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4845   		rel_warm_plazma=2;
;;;4846   		}
;;;4847        }
;;;4848   else 
;;;4849   	{
;;;4850   	if(warm_stat_k==wsOFF) 
;;;4851   		{
;;;4852   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4853   		rel_warm_plazma=3;
;;;4854   		}
;;;4855        else 
;;;4856   		{
;;;4857   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4858   		rel_warm_plazma=4;
;;;4859   		}
;;;4860   	}
;;;4861   */
;;;4862   //Реле освещения
;;;4863   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4864   	{
;;;4865   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4866   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4867        }
;;;4868   else 
;;;4869   	{
;;;4870   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4871        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4872   	}
;;;4873   
;;;4874   
;;;4875   
;;;4876   //Реле выключения нагрузки
;;;4877   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4878   	{
;;;4879   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4880   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4881        }
;;;4882   else if(tloaddisable_cmnd==0)
;;;4883   	{
;;;4884   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4885   	}
;;;4886   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4887   	{
;;;4888   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4889   	}
;;;4890   
;;;4891   else 
;;;4892   	{
;;;4893   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4894        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4895   	} 
;;;4896   
;;;4897   //Реле осевого вентилятора или отопителя
;;;4898   if(RELE_LOG)
;;;4899   	{
;;;4900   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4901   		{
;;;4902   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4903   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4904   		}
;;;4905   	else 
;;;4906   		{
;;;4907   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4908   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4909   		} 
;;;4910   
;;;4911   	}
;;;4912   else 
;;;4913   	{
;;;4914   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4915   		{
;;;4916   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4917   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4918   		}
;;;4919   	else 
;;;4920   		{
;;;4921   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4922   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4923   		} 
;;;4924   	}
;;;4925   #endif
;;;4926   
;;;4927   
;;;4928   #ifdef UKU_TELECORE2015
;;;4929   //Реле аварии сети
;;;4930   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4931   	{
;;;4932   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4933   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4934   	}
;;;4935   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4936   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4937   
;;;4938   
;;;4939   //Реле освещения
;;;4940   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4941   	{
;;;4942   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4943   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4944        }
;;;4945   else 
;;;4946   	{
;;;4947   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4948        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4949   	}
;;;4950   
;;;4951   //Реле отопителя
;;;4952   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;4953   	{
;;;4954   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4955   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4956   	}
;;;4957   else 
;;;4958   	{
;;;4959   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4960        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4961   	} 
;;;4962   //Реле вентилятора
;;;4963   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4964   	{
;;;4965   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4966   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4967   	}
;;;4968   else 
;;;4969   	{
;;;4970   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4971        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4972   	} 
;;;4973   
;;;4974   //Реле внутреннего вентилятора
;;;4975   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;4976   	{
;;;4977   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4978   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4979   	}
;;;4980   else 
;;;4981   	{
;;;4982   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4983        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4984   	} 
;;;4985   
;;;4986   #endif
;;;4987   
;;;4988   #ifdef UKU_TELECORE2017
;;;4989   //Реле аварии сети
;;;4990   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4991   	{
;;;4992   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4993   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4994   	}
;;;4995   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4996   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4997   
;;;4998   
;;;4999   //Реле освещения
;;;5000   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5001   	{
;;;5002   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5003   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5004        }
;;;5005   else 
;;;5006   	{
;;;5007   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5008        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5009   	}
;;;5010   
;;;5011   //Реле отопителя
;;;5012   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5013   	{
;;;5014   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5015   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5016   	}
;;;5017   else 
;;;5018   	{
;;;5019   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5020        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5021   	} 
;;;5022   //Реле вентилятора
;;;5023   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5024   	{
;;;5025   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5026   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5027   	}
;;;5028   else 
;;;5029   	{
;;;5030   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5031        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5032   	} 
;;;5033   
;;;5034   //Реле внутреннего вентилятора
;;;5035   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5036   	{
;;;5037   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5038   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5039   	}
;;;5040   else 
;;;5041   	{
;;;5042   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5043        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5044   	} 
;;;5045   
;;;5046   //Реле выключения нагрузки
;;;5047   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5048   	{
;;;5049   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5050   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5051        }
;;;5052   else if(tloaddisable_cmnd==0)
;;;5053   	{
;;;5054   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5055   	}
;;;5056   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5057   	{
;;;5058   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5059   	}
;;;5060   
;;;5061   else 
;;;5062   	{
;;;5063   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5064        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5065   	} 
;;;5066   
;;;5067   
;;;5068   #endif
;;;5069   
;;;5070   #ifdef IPS_SGEP_GAZPROM
;;;5071   rele_hndl_plazma[0]++;
;;;5072   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5073   	{
;;;5074   	rele_hndl_plazma[1]++;
;;;5075   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5076   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5077        }
;;;5078   else 
;;;5079   	{
;;;5080   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5081        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5082   	} 
;;;5083   
;;;5084   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5085   	{
;;;5086   	rele_hndl_plazma[2]++;
;;;5087   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5088   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5089   	}
;;;5090   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5091   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5092   #endif
;;;5093   
;;;5094   if(NUMBDR==1)
00340c  486f              LDR      r0,|L1.13772|
00340e  8800              LDRH     r0,[r0,#0]  ; NUMBDR
003410  2801              CMP      r0,#1
003412  d17e              BNE      |L1.13586|
;;;5095   	{
;;;5096   	char ii_;
;;;5097   	char bdr_avar_stat_temp=0;
003414  f04f0000          MOV      r0,#0
;;;5098   	for	(ii_=0;ii_<4;ii_++)
003418  4601              MOV      r1,r0
;;;5099   		{
;;;5100   		//АБ разряжена
;;;5101   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5102   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5103   		//Ускоренный заряд
;;;5104   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5105   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5106   		//Выравнивающий заряд
;;;5107   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5108   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5109   		//Общая авария ЗВУ
;;;5110   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5111   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5112   		//Uвых завышено
;;;5113   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5114   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
00341a  f8dfa1b4          LDR      r10,|L1.13776|
;;;5115   		//Uвых занижено
;;;5116   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5117   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5118   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5119   			(
;;;5120   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
00341e  f8df91b4          LDR      r9,|L1.13780|
003422  4d6d              LDR      r5,|L1.13784|
003424  f8dfb1b4          LDR      r11,|L1.13788|
003428  f04f0301          MOV      r3,#1                 ;4052
                  |L1.13356|
00342c  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5101
003430  ea5f7cc2          LSLS     r12,r2,#31            ;5101
003434  d010              BEQ      |L1.13400|
003436  f8dfc1a8          LDR      r12,|L1.13792|
00343a  f9b8e000          LDRSH    lr,[r8,#0]            ;5102  ; load_U
00343e  f9bcc000          LDRSH    r12,[r12,#0]          ;5102  ; USIGN
003442  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5102
003446  ebbe0f4c          CMP      lr,r12,LSL #1         ;5102
00344a  da05              BGE      |L1.13400|
00344c  fa03fc01          LSL      r12,r3,r1             ;5102
003450  ea4c0c00          ORR      r12,r12,r0            ;5102
003454  f00c00ff          AND      r0,r12,#0xff          ;5102
                  |L1.13400|
003458  ea5f7c82          LSLS     r12,r2,#30            ;5104
00345c  d50a              BPL      |L1.13428|
00345e  f897c000          LDRB     r12,[r7,#0]           ;5105  ; sp_ch_stat
003462  f1bc0f02          CMP      r12,#2                ;5105
003466  d105              BNE      |L1.13428|
003468  fa03fc01          LSL      r12,r3,r1             ;5105
00346c  ea4c0c00          ORR      r12,r12,r0            ;5105
003470  f00c00ff          AND      r0,r12,#0xff          ;5105
                  |L1.13428|
003474  ea5f7c42          LSLS     r12,r2,#29            ;5107
003478  d50a              BPL      |L1.13456|
00347a  f896c01e          LDRB     r12,[r6,#0x1e]        ;5108  ; spc_stat
00347e  f1bc0f02          CMP      r12,#2                ;5108
003482  d105              BNE      |L1.13456|
003484  fa03fc01          LSL      r12,r3,r1             ;5108
003488  ea4c0c00          ORR      r12,r12,r0            ;5108
00348c  f00c00ff          AND      r0,r12,#0xff          ;5108
                  |L1.13456|
003490  ea5f7c02          LSLS     r12,r2,#28            ;5110
003494  d50c              BPL      |L1.13488|
003496  f8dfc14c          LDR      r12,|L1.13796|
00349a  f8dcc000          LDR      r12,[r12,#0]          ;5111  ; avar_stat
00349e  f1bc0f00          CMP      r12,#0                ;5111
0034a2  d005              BEQ      |L1.13488|
0034a4  fa03fc01          LSL      r12,r3,r1             ;5111
0034a8  ea4c0c00          ORR      r12,r12,r0            ;5111
0034ac  f00c00ff          AND      r0,r12,#0xff          ;5111
                  |L1.13488|
0034b0  ea5f6cc2          LSLS     r12,r2,#27            ;5113
0034b4  d50a              BPL      |L1.13516|
0034b6  f89ac000          LDRB     r12,[r10,#0]          ;5114  ; uout_av
0034ba  f1bc0f01          CMP      r12,#1                ;5114
0034be  d105              BNE      |L1.13516|
0034c0  fa03fc01          LSL      r12,r3,r1             ;5114
0034c4  ea4c0c00          ORR      r12,r12,r0            ;5114
0034c8  f00c00ff          AND      r0,r12,#0xff          ;5114
                  |L1.13516|
0034cc  ea5f6c82          LSLS     r12,r2,#26            ;5116
0034d0  d50a              BPL      |L1.13544|
0034d2  f89ac000          LDRB     r12,[r10,#0]          ;5117  ; uout_av
0034d6  f1bc0f02          CMP      r12,#2                ;5117
0034da  d105              BNE      |L1.13544|
0034dc  fa03fc01          LSL      r12,r3,r1             ;5117
0034e0  ea4c0c00          ORR      r12,r12,r0            ;5117
0034e4  f00c00ff          AND      r0,r12,#0xff          ;5117
                  |L1.13544|
0034e8  ea5f6c42          LSLS     r12,r2,#25            ;5118
0034ec  d525              BPL      |L1.13626|
0034ee  f899c001          LDRB     r12,[r9,#1]  ; bps
0034f2  ea5f6ccc          LSLS     r12,r12,#27
0034f6  d504              BPL      |L1.13570|
0034f8  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0034fc  f1bc0f01          CMP      r12,#1
003500  da15              BGE      |L1.13614|
                  |L1.13570|
;;;5121   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
003502  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003506  ea5f6ccc          LSLS     r12,r12,#27
00350a  d506              BPL      |L1.13594|
00350c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003510  e000              B        |L1.13588|
                  |L1.13586|
003512  e047              B        |L1.13732|
                  |L1.13588|
003514  f1bc0f02          CMP      r12,#2
003518  da09              BGE      |L1.13614|
                  |L1.13594|
;;;5122   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
00351a  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
00351e  ea5f6ccc          LSLS     r12,r12,#27
003522  d50a              BPL      |L1.13626|
003524  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003528  f1bc0f03          CMP      r12,#3
00352c  db05              BLT      |L1.13626|
                  |L1.13614|
;;;5123   			))bdr_avar_stat_temp|=(1<<ii_);
00352e  fa03fc01          LSL      r12,r3,r1
003532  ea4c0c00          ORR      r12,r12,r0
003536  f00c00ff          AND      r0,r12,#0xff
                  |L1.13626|
;;;5124   		if((RELE_SET_MASK[ii_]&0x80)&&
00353a  ea5f6c02          LSLS     r12,r2,#24
00353e  d523              BPL      |L1.13704|
;;;5125   			(
;;;5126   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
003540  f899c001          LDRB     r12,[r9,#1]  ; bps
003544  ea5f7c0c          LSLS     r12,r12,#28
003548  d004              BEQ      |L1.13652|
00354a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00354e  f1bc0f01          CMP      r12,#1
003552  da13              BGE      |L1.13692|
                  |L1.13652|
;;;5127   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
003554  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003558  ea5f7c0c          LSLS     r12,r12,#28
00355c  d004              BEQ      |L1.13672|
00355e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003562  f1bc0f02          CMP      r12,#2
003566  da09              BGE      |L1.13692|
                  |L1.13672|
;;;5128   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
003568  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
00356c  ea5f7c0c          LSLS     r12,r12,#28
003570  d00a              BEQ      |L1.13704|
003572  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003576  f1bc0f03          CMP      r12,#3
00357a  db05              BLT      |L1.13704|
                  |L1.13692|
;;;5129   			))bdr_avar_stat_temp|=(1<<ii_);
00357c  fa03fc01          LSL      r12,r3,r1
003580  ea4c0c00          ORR      r12,r12,r0
003584  f00c00ff          AND      r0,r12,#0xff
                  |L1.13704|
;;;5130   
;;;5131   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
003588  0412              LSLS     r2,r2,#16
00358a  d404              BMI      |L1.13718|
00358c  fa03f201          LSL      r2,r3,r1
003590  ea820200          EOR      r2,r2,r0
003594  b2d0              UXTB     r0,r2
                  |L1.13718|
003596  f1010101          ADD      r1,r1,#1              ;5098
00359a  b2c9              UXTB     r1,r1                 ;5098
00359c  2904              CMP      r1,#4                 ;5098
00359e  f4ffaf45          BCC      |L1.13356|
;;;5132   		}
;;;5133   	bdr_avar_stat=bdr_avar_stat_temp;
0035a2  7020              STRB     r0,[r4,#0]
                  |L1.13732|
;;;5134   	}
;;;5135   }
0035a4  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.13736|
                          DCD      load_U
                  |L1.13740|
                          DCD      sp_ch_stat
                  |L1.13744|
                          DCD      ||area_number.18||
                  |L1.13748|
                          DCD      DOP_RELE_FUNC
                  |L1.13752|
                          DCD      speedChIsOn
                  |L1.13756|
                          DCD      hv_vz_stat
                  |L1.13760|
                          DCD      UVENTOFF
                  |L1.13764|
                          DCD      bdr_transmit_stat
                  |L1.13768|
                          DCD      bdr_avar_stat
                  |L1.13772|
                          DCD      NUMBDR
                  |L1.13776|
                          DCD      uout_av
                  |L1.13780|
                          DCD      bps
                  |L1.13784|
                          DCD      NUMIST
                  |L1.13788|
                          DCD      RELE_SET_MASK
                  |L1.13792|
                          DCD      USIGN
                  |L1.13796|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;5138   //-----------------------------------------------
;;;5139   void bps_hndl(void)
0035e8  e92d5ff0          PUSH     {r4-r12,lr}
;;;5140   {
;;;5141   char ptr__,i;
;;;5142   unsigned short tempUS;
;;;5143   
;;;5144   if(sh_cnt0<10)
0035ec  4eff              LDR      r6,|L1.14828|
;;;5145   	{
;;;5146   	sh_cnt0++;
;;;5147   	if(sh_cnt0>=10)
;;;5148   		{
;;;5149   		sh_cnt0=0;
0035ee  2700              MOVS     r7,#0
;;;5150   		b1Hz_sh=1;
0035f0  f04f0a01          MOV      r10,#1
0035f4  7f30              LDRB     r0,[r6,#0x1c]         ;5144  ; sh_cnt0
0035f6  280a              CMP      r0,#0xa               ;5144
0035f8  d208              BCS      |L1.13836|
0035fa  f1000001          ADD      r0,r0,#1              ;5146
0035fe  b2c0              UXTB     r0,r0                 ;5146
003600  7730              STRB     r0,[r6,#0x1c]         ;5146
003602  280a              CMP      r0,#0xa               ;5147
003604  d302              BCC      |L1.13836|
003606  7737              STRB     r7,[r6,#0x1c]         ;5149
003608  f886a01d          STRB     r10,[r6,#0x1d]
                  |L1.13836|
;;;5151   		}
;;;5152   	}
;;;5153   
;;;5154   /*if(sh_cnt1<5)
;;;5155   	{
;;;5156   	sh_cnt1++;
;;;5157   	if(sh_cnt1==5)
;;;5158   		{
;;;5159   		sh_cnt1=0;
;;;5160   		b2Hz_sh=1;
;;;5161   		}
;;;5162   	} */
;;;5163   
;;;5164   
;;;5165   /*
;;;5166   if(mess_find(MESS_SRC_ON_OFF))
;;;5167   	{
;;;5168   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;5169   		{
;;;5170   		char i;
;;;5171   		for(i=0;i<NUMIST;i++)
;;;5172   			{
;;;5173   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;5174   			}
;;;5175   		
;;;5176   		}
;;;5177   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;5178   		{
;;;5179   		char i;
;;;5180   		for(i=0;i<NUMIST;i++)
;;;5181   			{
;;;5182   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;5183   			}
;;;5184   		
;;;5185   		}
;;;5186   	}
;;;5187   	
;;;5188   else if(mess_find(_MESS_SRC_MASK_ON))
;;;5189   	{				
;;;5190   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;5191   		{
;;;5192   		char i;
;;;5193   		for(i=0;i<NUMIST;i++)
;;;5194   			{
;;;5195   			if(mess_data[1]&(1<<i))
;;;5196   				{
;;;5197   				src[i]._ist_blok_cnt=0;
;;;5198   				src[i]._flags_tu=2;
;;;5199   				}
;;;5200   			}
;;;5201   		
;;;5202   		}				
;;;5203   	}*/
;;;5204   
;;;5205   
;;;5206   
;;;5207   /*else*/ 
;;;5208   bps_on_mask=0;
00360c  f8a67058          STRH     r7,[r6,#0x58]
;;;5209   bps_off_mask=0;
003610  f8a6705a          STRH     r7,[r6,#0x5a]
;;;5210   
;;;5211   if(mess_find_unvol(MESS2BPS_HNDL))
003614  20cd              MOVS     r0,#0xcd
003616  f7fffffe          BL       mess_find_unvol
;;;5212   	{
;;;5213   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;5214   		{
;;;5215   		bps_off_mask=0xffff;
;;;5216   		}
;;;5217   
;;;5218   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;5219   		{
;;;5220   		bps_off_mask=mess_data[1];
;;;5221   		}
;;;5222   
;;;5223   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5224   		{
;;;5225   		bps_on_mask=mess_data[1];
;;;5226   		}
;;;5227   
;;;5228   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;5229   		{
;;;5230   		bps_on_mask=0xffff;
;;;5231   		}
;;;5232   
;;;5233   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;5234   		{
;;;5235   		bps_on_mask=mess_data[1];
;;;5236   		bps_off_mask=~(mess_data[1]);
;;;5237   		}
;;;5238   
;;;5239   
;;;5240   	for(i=0;i<=NUMIST;i++)
;;;5241   		{
;;;5242   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
00361a  f8df83d4          LDR      r8,|L1.14832|
00361e  f8dfb3d4          LDR      r11,|L1.14836|
003622  b3a0              CBZ      r0,|L1.13966|
003624  4af4              LDR      r2,|L1.14840|
003626  f64f73ff          MOV      r3,#0xffff            ;5215
00362a  6810              LDR      r0,[r2,#0]            ;5213  ; mess_data
00362c  28ce              CMP      r0,#0xce              ;5213
00362e  d101              BNE      |L1.13876|
003630  f8a6305a          STRH     r3,[r6,#0x5a]         ;5215
                  |L1.13876|
003634  28cf              CMP      r0,#0xcf              ;5218
003636  d102              BNE      |L1.13886|
003638  6851              LDR      r1,[r2,#4]            ;5220  ; mess_data
00363a  f8a6105a          STRH     r1,[r6,#0x5a]         ;5220
                  |L1.13886|
00363e  28d1              CMP      r0,#0xd1              ;5223
003640  d102              BNE      |L1.13896|
003642  6851              LDR      r1,[r2,#4]            ;5225  ; mess_data
003644  f8a61058          STRH     r1,[r6,#0x58]         ;5225
                  |L1.13896|
003648  28d2              CMP      r0,#0xd2              ;5228
00364a  d101              BNE      |L1.13904|
00364c  f8a63058          STRH     r3,[r6,#0x58]         ;5230
                  |L1.13904|
003650  28d0              CMP      r0,#0xd0              ;5233
003652  d106              BNE      |L1.13922|
003654  6850              LDR      r0,[r2,#4]            ;5235  ; mess_data
003656  f8a60058          STRH     r0,[r6,#0x58]         ;5235
00365a  ea6f0000          MVN      r0,r0                 ;5236
00365e  f8a6005a          STRH     r0,[r6,#0x5a]         ;5236
                  |L1.13922|
003662  f04f0400          MOV      r4,#0                 ;5240
003666  e037              B        |L1.14040|
                  |L1.13928|
003668  f8b6005a          LDRH     r0,[r6,#0x5a]  ; bps_off_mask
00366c  fa0af904          LSL      r9,r10,r4
003670  ea190f00          TST      r9,r0
003674  d00c              BEQ      |L1.13968|
003676  ebc400c4          RSB      r0,r4,r4,LSL #3
00367a  eb001004          ADD      r0,r0,r4,LSL #4
00367e  eb080080          ADD      r0,r8,r0,LSL #2
003682  f8301f40          LDRH     r1,[r0,#0x40]!
003686  f1010101          ADD      r1,r1,#1
00368a  8001              STRH     r1,[r0,#0]
00368c  e008              B        |L1.13984|
                  |L1.13966|
00368e  e028              B        |L1.14050|
                  |L1.13968|
;;;5243   		else bps[i]._blok_cnt=0;
003690  ebc400c4          RSB      r0,r4,r4,LSL #3
003694  eb001004          ADD      r0,r0,r4,LSL #4
003698  eb080080          ADD      r0,r8,r0,LSL #2
00369c  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.13984|
;;;5244   		gran(&bps[i]._blok_cnt,0,50);
0036a0  ebc400c4          RSB      r0,r4,r4,LSL #3
0036a4  eb001004          ADD      r0,r0,r4,LSL #4
0036a8  eb080580          ADD      r5,r8,r0,LSL #2
0036ac  f1050040          ADD      r0,r5,#0x40
0036b0  2232              MOVS     r2,#0x32
0036b2  2100              MOVS     r1,#0
0036b4  f7fffffe          BL       gran
;;;5245   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
0036b8  f9b50040          LDRSH    r0,[r5,#0x40]
0036bc  2814              CMP      r0,#0x14
0036be  dd01              BLE      |L1.14020|
0036c0  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.14020|
;;;5246   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
0036c4  f8b60058          LDRH     r0,[r6,#0x58]  ; bps_on_mask
0036c8  ea190f00          TST      r9,r0
0036cc  d001              BEQ      |L1.14034|
0036ce  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.14034|
0036d2  f1040401          ADD      r4,r4,#1              ;5240
0036d6  b2e4              UXTB     r4,r4                 ;5240
                  |L1.14040|
0036d8  f9bb0000          LDRSH    r0,[r11,#0]           ;5240  ; NUMIST
0036dc  4284              CMP      r4,r0                 ;5240
0036de  ddc3              BLE      |L1.13928|
0036e0  e08c              B        |L1.14332|
                  |L1.14050|
;;;5247   	     }
;;;5248   
;;;5249   	
;;;5250   /*
;;;5251   
;;;5252   	if(bps_all_off_cnt>20)
;;;5253   		{
;;;5254   		for(i=0;i<=NUMIST;i++)
;;;5255   			{
;;;5256   	     	bps[i]._flags_tu=1;
;;;5257   	     	}
;;;5258   		}
;;;5259   	else if(bps_mask_off_cnt>20)
;;;5260   		{
;;;5261   		for(i=0;i<=NUMIST;i++)
;;;5262   			{
;;;5263   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5264   	     	}
;;;5265   		}	
;;;5266   		
;;;5267   	else if(bps_mask_on_off_cnt>20)
;;;5268   		{
;;;5269   		for(i=0;i<=NUMIST;i++)
;;;5270   			{
;;;5271   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5272   			else bps[i]._flags_tu=0;
;;;5273   	     	}
;;;5274   		}
;;;5275   		
;;;5276   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5277   		{
;;;5278   		for(i=0;i<=NUMIST;i++)
;;;5279   			{
;;;5280   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;5281   	     	}
;;;5282   		}
;;;5283   */										
;;;5284   	}
;;;5285   
;;;5286   
;;;5287   else if(b1Hz_sh)
0036e2  7f70              LDRB     r0,[r6,#0x1d]  ; b1Hz_sh
0036e4  b3e8              CBZ      r0,|L1.14178|
;;;5288   	{
;;;5289   	ptr__=0;
0036e6  f04f0400          MOV      r4,#0
;;;5290        for(i=0;i<=NUMIST;i++)
0036ea  4621              MOV      r1,r4
0036ec  f9bb0000          LDRSH    r0,[r11,#0]           ;5240
0036f0  e00a              B        |L1.14088|
                  |L1.14066|
;;;5291   		{
;;;5292   	     bps[i]._flags_tu=1;
0036f2  ebc102c1          RSB      r2,r1,r1,LSL #3
0036f6  eb021201          ADD      r2,r2,r1,LSL #4
0036fa  eb080282          ADD      r2,r8,r2,LSL #2
0036fe  f882a02c          STRB     r10,[r2,#0x2c]
003702  f1010101          ADD      r1,r1,#1              ;5290
003706  b2c9              UXTB     r1,r1                 ;5290
                  |L1.14088|
003708  4281              CMP      r1,r0                 ;5290
00370a  ddf2              BLE      |L1.14066|
;;;5293   	     }	
;;;5294     	     
;;;5295     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
00370c  f04f0100          MOV      r1,#0
003710  e023              B        |L1.14170|
                  |L1.14098|
;;;5296     		{
;;;5297   		char ii,iii;
;;;5298   
;;;5299   		ii=(char)NUMIST;
003712  b2c2              UXTB     r2,r0
;;;5300   		//if(ii<0)ii=0;
;;;5301   		if(ii>32)ii=32;
003714  2a20              CMP      r2,#0x20
003716  d901              BLS      |L1.14108|
003718  f04f0220          MOV      r2,#0x20
                  |L1.14108|
;;;5302   		iii=numOfForvardBps;
00371c  f8963023          LDRB     r3,[r6,#0x23]  ; numOfForvardBps
;;;5303   		//if(iii<0)iii=0;
;;;5304   		if(iii>=NUMIST)iii=0;
003720  4283              CMP      r3,r0
003722  db01              BLT      |L1.14120|
003724  f04f0300          MOV      r3,#0
                  |L1.14120|
;;;5305   		iii+=i;
003728  440b              ADD      r3,r3,r1
00372a  b2db              UXTB     r3,r3
;;;5306   		iii=iii%ii;
00372c  fbb3f5f2          UDIV     r5,r3,r2
003730  fb023215          MLS      r2,r2,r5,r3
;;;5307   		
;;;5308     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
003734  ebc203c2          RSB      r3,r2,r2,LSL #3
003738  eb031202          ADD      r2,r3,r2,LSL #4
00373c  eb080282          ADD      r2,r8,r2,LSL #2
003740  7893              LDRB     r3,[r2,#2]
003742  2b02              CMP      r3,#2
003744  d001              BEQ      |L1.14154|
003746  2b01              CMP      r3,#1
003748  d104              BNE      |L1.14164|
                  |L1.14154|
;;;5309     	         	{
;;;5310     	         	bps[iii]._flags_tu=0;
00374a  f882702c          STRB     r7,[r2,#0x2c]
;;;5311     	         	ptr__++;
00374e  f1040401          ADD      r4,r4,#1
003752  b2e4              UXTB     r4,r4
                  |L1.14164|
003754  f1010101          ADD      r1,r1,#1              ;5295
003758  b2c9              UXTB     r1,r1                 ;5295
                  |L1.14170|
00375a  4281              CMP      r1,r0                 ;5295
00375c  da06              BGE      |L1.14188|
00375e  4aa7              LDR      r2,|L1.14844|
003760  e000              B        |L1.14180|
                  |L1.14178|
003762  e04b              B        |L1.14332|
                  |L1.14180|
003764  f9b22000          LDRSH    r2,[r2,#0]            ;5295  ; num_necc
003768  4294              CMP      r4,r2                 ;5295
00376a  dbd2              BLT      |L1.14098|
                  |L1.14188|
;;;5312     	         	}
;;;5313   			
;;;5314     	     }
;;;5315   	bps[numOfForvardBps_old]._flags_tu=0;
00376c  f8961024          LDRB     r1,[r6,#0x24]  ; numOfForvardBps_old
003770  ebc102c1          RSB      r2,r1,r1,LSL #3
003774  eb021101          ADD      r1,r2,r1,LSL #4
003778  eb080181          ADD      r1,r8,r1,LSL #2
00377c  f881702c          STRB     r7,[r1,#0x2c]
;;;5316   
;;;5317   	if(main_1Hz_cnt<60)
003780  499f              LDR      r1,|L1.14848|
003782  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
003786  293c              CMP      r1,#0x3c
003788  da0f              BGE      |L1.14250|
;;;5318   		{
;;;5319        	for(i=0;i<=NUMIST;i++)
00378a  f04f0100          MOV      r1,#0
00378e  e00a              B        |L1.14246|
                  |L1.14224|
;;;5320   			{
;;;5321   	     	bps[i]._flags_tu=0;
003790  ebc102c1          RSB      r2,r1,r1,LSL #3
003794  eb021201          ADD      r2,r2,r1,LSL #4
003798  eb080282          ADD      r2,r8,r2,LSL #2
00379c  f882702c          STRB     r7,[r2,#0x2c]
0037a0  f1010101          ADD      r1,r1,#1              ;5319
0037a4  b2c9              UXTB     r1,r1                 ;5319
                  |L1.14246|
0037a6  4281              CMP      r1,r0                 ;5319
0037a8  ddf2              BLE      |L1.14224|
                  |L1.14250|
;;;5322   	     	}	
;;;5323   		}
;;;5324   	if(ipsBlckStat)
0037aa  4996              LDR      r1,|L1.14852|
0037ac  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
0037ae  b179              CBZ      r1,|L1.14288|
;;;5325   		{
;;;5326        	for(i=0;i<=NUMIST;i++)
0037b0  f04f0100          MOV      r1,#0
0037b4  e00a              B        |L1.14284|
                  |L1.14262|
;;;5327   			{
;;;5328   	     	bps[i]._flags_tu=1;
0037b6  ebc102c1          RSB      r2,r1,r1,LSL #3
0037ba  eb021201          ADD      r2,r2,r1,LSL #4
0037be  eb080282          ADD      r2,r8,r2,LSL #2
0037c2  f882a02c          STRB     r10,[r2,#0x2c]
0037c6  f1010101          ADD      r1,r1,#1              ;5326
0037ca  b2c9              UXTB     r1,r1                 ;5326
                  |L1.14284|
0037cc  4281              CMP      r1,r0                 ;5326
0037ce  ddf2              BLE      |L1.14262|
                  |L1.14288|
;;;5329   	     	}
;;;5330   		}
;;;5331   
;;;5332        for(i=0;i<=NUMIST;i++)
0037d0  f04f0100          MOV      r1,#0
;;;5333   		{
;;;5334   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0037d4  f06f0331          MVN      r3,#0x31
0037d8  e00e              B        |L1.14328|
                  |L1.14298|
0037da  ebc102c1          RSB      r2,r1,r1,LSL #3
0037de  eb021201          ADD      r2,r2,r1,LSL #4
0037e2  eb080282          ADD      r2,r8,r2,LSL #2
0037e6  f892402c          LDRB     r4,[r2,#0x2c]
0037ea  2c01              CMP      r4,#1
0037ec  d101              BNE      |L1.14322|
0037ee  f8a23050          STRH     r3,[r2,#0x50]
                  |L1.14322|
0037f2  f1010101          ADD      r1,r1,#1              ;5332
0037f6  b2c9              UXTB     r1,r1                 ;5332
                  |L1.14328|
0037f8  4281              CMP      r1,r0                 ;5332
0037fa  ddee              BLE      |L1.14298|
                  |L1.14332|
;;;5335   	   	}	
;;;5336   		 
;;;5337     	}
;;;5338   
;;;5339   
;;;5340   for(i=0;i<NUMIST;i++)
0037fc  f04f0000          MOV      r0,#0
;;;5341        {
;;;5342        if(bps[i]._ist_blok_host_cnt!=0)
;;;5343             {
;;;5344             bps[i]._flags_tu=99;
003800  f04f0463          MOV      r4,#0x63
003804  f9bb1000          LDRSH    r1,[r11,#0]           ;5240
003808  e00f              B        |L1.14378|
                  |L1.14346|
00380a  ebc002c0          RSB      r2,r0,r0,LSL #3       ;5342
00380e  eb021200          ADD      r2,r2,r0,LSL #4       ;5342
003812  eb080282          ADD      r2,r8,r2,LSL #2       ;5342
003816  6bd3              LDR      r3,[r2,#0x3c]         ;5342
003818  b123              CBZ      r3,|L1.14372|
00381a  f882402c          STRB     r4,[r2,#0x2c]
;;;5345   	     bps[i]._ist_blok_host_cnt--;
00381e  f1a30301          SUB      r3,r3,#1
003822  63d3              STR      r3,[r2,#0x3c]
                  |L1.14372|
003824  f1000001          ADD      r0,r0,#1              ;5340
003828  b2c0              UXTB     r0,r0                 ;5340
                  |L1.14378|
00382a  4288              CMP      r0,r1                 ;5340
00382c  dbed              BLT      |L1.14346|
;;;5346             }
;;;5347        }
;;;5348   
;;;5349   
;;;5350   
;;;5351   
;;;5352   b1Hz_sh=0;
00382e  7777              STRB     r7,[r6,#0x1d]
;;;5353   
;;;5354   
;;;5355   num_of_wrks_bps=0;
003830  7677              STRB     r7,[r6,#0x19]
;;;5356   tempUS=0;
003832  f04f0200          MOV      r2,#0
;;;5357   for(i=0;i<NUMIST;i++)
003836  4610              MOV      r0,r2
003838  e013              B        |L1.14434|
                  |L1.14394|
;;;5358   	{
;;;5359   	if(bps[i]._state==bsWRK)
00383a  ebc003c0          RSB      r3,r0,r0,LSL #3
00383e  eb031300          ADD      r3,r3,r0,LSL #4
003842  eb080383          ADD      r3,r8,r3,LSL #2
003846  789c              LDRB     r4,[r3,#2]
003848  2c01              CMP      r4,#1
00384a  d107              BNE      |L1.14428|
;;;5360   		{
;;;5361   		num_of_wrks_bps++;
00384c  7e74              LDRB     r4,[r6,#0x19]  ; num_of_wrks_bps
00384e  f1040401          ADD      r4,r4,#1
003852  7674              STRB     r4,[r6,#0x19]
;;;5362   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
003854  69db              LDR      r3,[r3,#0x1c]
003856  4293              CMP      r3,r2
003858  dd00              BLE      |L1.14428|
00385a  b29a              UXTH     r2,r3
                  |L1.14428|
00385c  f1000001          ADD      r0,r0,#1              ;5357
003860  b2c0              UXTB     r0,r0                 ;5357
                  |L1.14434|
003862  4288              CMP      r0,r1                 ;5357
003864  dbe9              BLT      |L1.14394|
;;;5363   		}
;;;5364   	}
;;;5365   Ubpsmax=tempUS;
003866  f8a62048          STRH     r2,[r6,#0x48]
;;;5366   
;;;5367   bPARALLEL_ENOUG=0;
00386a  f8867027          STRB     r7,[r6,#0x27]
;;;5368   bPARALLEL_NOT_ENOUG=1;
00386e  f886a026          STRB     r10,[r6,#0x26]
;;;5369   
;;;5370   for(i=0;i<NUMIST;i++)
003872  f04f0000          MOV      r0,#0
;;;5371   	{
;;;5372   	if(bps[i]._Ti>=TSIGN)
003876  4a64              LDR      r2,|L1.14856|
003878  f9b23000          LDRSH    r3,[r2,#0]
;;;5373   		{
;;;5374   		bPARALLEL_ENOUG=1;
;;;5375   		}
;;;5376   	if(bps[i]._Ti>=(TSIGN-5))
00387c  f1a30405          SUB      r4,r3,#5
003880  e011              B        |L1.14502|
                  |L1.14466|
003882  ebc002c0          RSB      r2,r0,r0,LSL #3       ;5372
003886  eb021200          ADD      r2,r2,r0,LSL #4       ;5372
00388a  eb080282          ADD      r2,r8,r2,LSL #2       ;5372
00388e  6a92              LDR      r2,[r2,#0x28]         ;5372
003890  429a              CMP      r2,r3                 ;5372
003892  db01              BLT      |L1.14488|
003894  f886a027          STRB     r10,[r6,#0x27]        ;5374
                  |L1.14488|
003898  42a2              CMP      r2,r4
00389a  db01              BLT      |L1.14496|
;;;5377   		{
;;;5378   		bPARALLEL_NOT_ENOUG=0;
00389c  f8867026          STRB     r7,[r6,#0x26]
                  |L1.14496|
0038a0  f1000001          ADD      r0,r0,#1              ;5370
0038a4  b2c0              UXTB     r0,r0                 ;5370
                  |L1.14502|
0038a6  4288              CMP      r0,r1                 ;5370
0038a8  dbeb              BLT      |L1.14466|
;;;5379   		}
;;;5380   	}
;;;5381   
;;;5382   if(bPARALLEL_ENOUG==1)
0038aa  f8960027          LDRB     r0,[r6,#0x27]  ; bPARALLEL_ENOUG
0038ae  2801              CMP      r0,#1
0038b0  d00a              BEQ      |L1.14536|
;;;5383   	{
;;;5384   	bPARALLEL=1;
;;;5385   	}
;;;5386   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
0038b2  f8960028          LDRB     r0,[r6,#0x28]  ; bPARALLEL
0038b6  2800              CMP      r0,#0
0038b8  d005              BEQ      |L1.14534|
0038ba  f8960026          LDRB     r0,[r6,#0x26]  ; bPARALLEL_NOT_ENOUG
0038be  2800              CMP      r0,#0
0038c0  d001              BEQ      |L1.14534|
;;;5387   	{
;;;5388   	bPARALLEL=0;
0038c2  f8867028          STRB     r7,[r6,#0x28]
                  |L1.14534|
;;;5389   	}
;;;5390   }
0038c6  e66d              B        |L1.13732|
                  |L1.14536|
0038c8  f886a028          STRB     r10,[r6,#0x28]        ;5384
0038cc  e66a              B        |L1.13732|
;;;5391   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;5398   //-----------------------------------------------
;;;5399   void powerAntiAliasingHndl(void)
0038ce  b570              PUSH     {r4-r6,lr}
;;;5400   {
;;;5401   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0038d0  230a              MOVS     r3,#0xa
0038d2  4c4f              LDR      r4,|L1.14864|
0038d4  484d              LDR      r0,|L1.14860|
;;;5402   	{
;;;5403   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;5404   	if(powerSummaryCnt>=10)
;;;5405   		{
;;;5406   		power_summary=power_summary_tempo;
;;;5407   		}
;;;5408   	}
;;;5409   else powerSummaryCnt=0;
0038d6  2500              MOVS     r5,#0
0038d8  6822              LDR      r2,[r4,#0]            ;5401  ; power_summary_tempo_old
0038da  6800              LDR      r0,[r0,#0]            ;5401  ; power_summary_tempo
0038dc  fbb2f6f3          UDIV     r6,r2,r3              ;5401
0038e0  fbb0f1f3          UDIV     r1,r0,r3              ;5401
0038e4  4a4b              LDR      r2,|L1.14868|
0038e6  42b1              CMP      r1,r6                 ;5401
0038e8  d10b              BNE      |L1.14594|
0038ea  7811              LDRB     r1,[r2,#0]            ;5403  ; powerSummaryCnt
0038ec  290f              CMP      r1,#0xf               ;5403
0038ee  d202              BCS      |L1.14582|
0038f0  f1010101          ADD      r1,r1,#1              ;5403
0038f4  7011              STRB     r1,[r2,#0]            ;5403
                  |L1.14582|
0038f6  7811              LDRB     r1,[r2,#0]            ;5404  ; powerSummaryCnt
0038f8  290a              CMP      r1,#0xa               ;5404
0038fa  d303              BCC      |L1.14596|
0038fc  4946              LDR      r1,|L1.14872|
0038fe  6008              STR      r0,[r1,#0]            ;5406  ; power_summary
003900  e000              B        |L1.14596|
                  |L1.14594|
003902  7015              STRB     r5,[r2,#0]
                  |L1.14596|
;;;5410   power_summary_tempo_old=power_summary_tempo;
003904  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;5411   
;;;5412   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
003906  4845              LDR      r0,|L1.14876|
003908  4c45              LDR      r4,|L1.14880|
00390a  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
00390e  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
003912  fbb0f1f3          UDIV     r1,r0,r3
003916  fbb2f3f3          UDIV     r3,r2,r3
;;;5413   	{
;;;5414   	if(powerCurrentCnt<15)powerCurrentCnt++;
00391a  4a42              LDR      r2,|L1.14884|
00391c  4299              CMP      r1,r3                 ;5412
00391e  d10b              BNE      |L1.14648|
003920  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
003922  290f              CMP      r1,#0xf
003924  d202              BCS      |L1.14636|
003926  f1010101          ADD      r1,r1,#1
00392a  7011              STRB     r1,[r2,#0]
                  |L1.14636|
;;;5415   	if(powerCurrentCnt>=10)
00392c  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00392e  290a              CMP      r1,#0xa
003930  d303              BCC      |L1.14650|
;;;5416   		{
;;;5417   		power_current=power_current_tempo;
003932  493d              LDR      r1,|L1.14888|
003934  8008              STRH     r0,[r1,#0]
003936  e000              B        |L1.14650|
                  |L1.14648|
;;;5418   		}
;;;5419   	}
;;;5420   else powerCurrentCnt=0;
003938  7015              STRB     r5,[r2,#0]
                  |L1.14650|
;;;5421   power_current_tempo_old=power_current_tempo;
00393a  8020              STRH     r0,[r4,#0]
;;;5422   }
00393c  bd70              POP      {r4-r6,pc}
;;;5423   
                          ENDP

                  ips_current_average_hndl_ PROC
;;;5424   //-----------------------------------------------
;;;5425   void ips_current_average_hndl_(void)
00393e  e92d43f0          PUSH     {r4-r9,lr}
;;;5426   {
003942  b085              SUB      sp,sp,#0x14
;;;5427   if(++ica_timer_cnt>=10)
003944  4c39              LDR      r4,|L1.14892|
;;;5428   	{
;;;5429   	ica_timer_cnt=0;
;;;5430   	ica_plazma[0]++;
;;;5431   
;;;5432   	ica_my_current=bps_I;
;;;5433   
;;;5434   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=10)&&(ICA_EN==1))
003946  4e3a              LDR      r6,|L1.14896|
003948  2500              MOVS     r5,#0                 ;5429
00394a  7820              LDRB     r0,[r4,#0]            ;5427  ; ica_timer_cnt
00394c  1c40              ADDS     r0,r0,#1              ;5427
00394e  b2c0              UXTB     r0,r0                 ;5427
003950  7020              STRB     r0,[r4,#0]            ;5427
003952  280a              CMP      r0,#0xa               ;5427
003954  d340              BCC      |L1.14808|
003956  7025              STRB     r5,[r4,#0]            ;5429
003958  f8dfc0d8          LDR      r12,|L1.14900|
00395c  f89c0000          LDRB     r0,[r12,#0]           ;5430  ; ica_plazma
003960  f1000001          ADD      r0,r0,#1              ;5430
003964  f88c0000          STRB     r0,[r12,#0]           ;5430
003968  4833              LDR      r0,|L1.14904|
00396a  4934              LDR      r1,|L1.14908|
00396c  f9b00000          LDRSH    r0,[r0,#0]            ;5432  ; bps_I
003970  8008              STRH     r0,[r1,#0]            ;5432
003972  4933              LDR      r1,|L1.14912|
;;;5435   		{
;;;5436   		ica_plazma[1]++;
;;;5437   		ica_u_necc--;
003974  f8df80cc          LDR      r8,|L1.14916|
003978  4662              MOV      r2,r12                ;5430
00397a  4637              MOV      r7,r6                 ;5434
00397c  f9b11000          LDRSH    r1,[r1,#0]            ;5434  ; ica_your_current
003980  7852              LDRB     r2,[r2,#1]            ;5436
003982  f9b83000          LDRSH    r3,[r8,#0]
003986  f9b77000          LDRSH    r7,[r7,#0]            ;5434
00398a  4288              CMP      r0,r1                 ;5434
00398c  dd06              BLE      |L1.14748|
00398e  eba00901          SUB      r9,r0,r1              ;5434
003992  f1b90f0a          CMP      r9,#0xa               ;5434
003996  db01              BLT      |L1.14748|
003998  2f01              CMP      r7,#1                 ;5434
00399a  d007              BEQ      |L1.14764|
                  |L1.14748|
;;;5438   		}
;;;5439   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=10)&&(ICA_EN==1))
00399c  4288              CMP      r0,r1
00399e  da16              BGE      |L1.14798|
0039a0  1a08              SUBS     r0,r1,r0
0039a2  280a              CMP      r0,#0xa
0039a4  db13              BLT      |L1.14798|
0039a6  2f01              CMP      r7,#1
0039a8  d009              BEQ      |L1.14782|
0039aa  e010              B        |L1.14798|
                  |L1.14764|
0039ac  f1020201          ADD      r2,r2,#1              ;5436
0039b0  f88c2001          STRB     r2,[r12,#1]           ;5436
0039b4  f1a30301          SUB      r3,r3,#1              ;5437
0039b8  f8a83000          STRH     r3,[r8,#0]            ;5437
0039bc  e007              B        |L1.14798|
                  |L1.14782|
;;;5440   		{
;;;5441   		ica_plazma[1]--;
0039be  f1a20201          SUB      r2,r2,#1
0039c2  f88c2001          STRB     r2,[r12,#1]
;;;5442   		ica_u_necc++;
0039c6  f1030301          ADD      r3,r3,#1
0039ca  f8a83000          STRH     r3,[r8,#0]
                  |L1.14798|
;;;5443   		}
;;;5444   	gran(&ica_u_necc,-20,20);
0039ce  2214              MOVS     r2,#0x14
0039d0  4251              RSBS     r1,r2,#0
0039d2  481c              LDR      r0,|L1.14916|
0039d4  f7fffffe          BL       gran
                  |L1.14808|
;;;5445   	}
;;;5446   
;;;5447   if((ica_timer_cnt==8)&&(ICA_EN==1))
0039d8  7820              LDRB     r0,[r4,#0]  ; ica_timer_cnt
;;;5448   	{
;;;5449   	char modbus_buff[20],i;
;;;5450   	short crc_temp;
;;;5451   
;;;5452   	modbus_buff[0] = ICA_MODBUS_ADDRESS;
0039da  f8df806c          LDR      r8,|L1.14920|
;;;5453   	modbus_buff[1] = 4;
;;;5454   	modbus_buff[2] = 0;
;;;5455   	modbus_buff[3] = 2;
;;;5456   	modbus_buff[4] = 0;	
;;;5457   	modbus_buff[5] = 1;
;;;5458   
;;;5459   	crc_temp= CRC16_2(modbus_buff,6);
;;;5460   
;;;5461   	modbus_buff[6]= (char)crc_temp;
;;;5462   	modbus_buff[7]= (char)(crc_temp>>8);
;;;5463   
;;;5464   
;;;5465   
;;;5466   	if(ICA_CH==0)
0039de  4f1b              LDR      r7,|L1.14924|
0039e0  2808              CMP      r0,#8                 ;5447
0039e2  d158              BNE      |L1.14998|
0039e4  8830              LDRH     r0,[r6,#0]            ;5447  ; ICA_EN
0039e6  2801              CMP      r0,#1                 ;5447
0039e8  d155              BNE      |L1.14998|
0039ea  e031              B        |L1.14928|
                  |L1.14828|
                          DCD      ||area_number.18||
                  |L1.14832|
                          DCD      bps
                  |L1.14836|
                          DCD      NUMIST
                  |L1.14840|
                          DCD      mess_data
                  |L1.14844|
                          DCD      num_necc
                  |L1.14848|
                          DCD      main_1Hz_cnt
                  |L1.14852|
                          DCD      ipsBlckStat
                  |L1.14856|
                          DCD      TSIGN
                  |L1.14860|
                          DCD      power_summary_tempo
                  |L1.14864|
                          DCD      power_summary_tempo_old
                  |L1.14868|
                          DCD      powerSummaryCnt
                  |L1.14872|
                          DCD      power_summary
                  |L1.14876|
                          DCD      power_current_tempo
                  |L1.14880|
                          DCD      power_current_tempo_old
                  |L1.14884|
                          DCD      powerCurrentCnt
                  |L1.14888|
                          DCD      power_current
                  |L1.14892|
                          DCD      ica_timer_cnt
                  |L1.14896|
                          DCD      ICA_EN
                  |L1.14900|
                          DCD      ica_plazma
                  |L1.14904|
                          DCD      bps_I
                  |L1.14908|
                          DCD      ica_my_current
                  |L1.14912|
                          DCD      ica_your_current
                  |L1.14916|
                          DCD      ica_u_necc
                  |L1.14920|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.14924|
                          DCD      ICA_CH
                  |L1.14928|
003a50  f8b80000          LDRH     r0,[r8,#0]            ;5452  ; ICA_MODBUS_ADDRESS
003a54  f88d0000          STRB     r0,[sp,#0]            ;5452
003a58  f04f0004          MOV      r0,#4                 ;5453
003a5c  f88d0001          STRB     r0,[sp,#1]            ;5453
003a60  f88d5002          STRB     r5,[sp,#2]            ;5454
003a64  f04f0002          MOV      r0,#2                 ;5455
003a68  f88d0003          STRB     r0,[sp,#3]            ;5455
003a6c  f88d5004          STRB     r5,[sp,#4]            ;5456
003a70  f04f0001          MOV      r0,#1                 ;5457
003a74  f88d0005          STRB     r0,[sp,#5]            ;5457
003a78  f04f0106          MOV      r1,#6                 ;5459
003a7c  4668              MOV      r0,sp                 ;5459
003a7e  f7fffffe          BL       CRC16_2
003a82  f88d0006          STRB     r0,[sp,#6]            ;5461
003a86  ea4f2020          ASR      r0,r0,#8              ;5462
003a8a  f88d0007          STRB     r0,[sp,#7]            ;5462
003a8e  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
003a92  b3e8              CBZ      r0,|L1.15120|
;;;5467   		{
;;;5468   		for (i=0;i<8;i++)
;;;5469   			{
;;;5470   			putchar_sc16is700(modbus_buff[i]);
;;;5471   			}
;;;5472   		}
;;;5473   	else if(ICA_CH==1)
003a94  2801              CMP      r0,#1
                  |L1.14998|
;;;5474   		{
;;;5475   	/*	static U8 rem_IP[4];
;;;5476   		rem_IP[0]=ICA_MODBUS_TCP_IP1;
;;;5477   		rem_IP[1]=ICA_MODBUS_TCP_IP2;
;;;5478   		rem_IP[2]=ICA_MODBUS_TCP_IP3;
;;;5479   		rem_IP[3]=ICA_MODBUS_TCP_IP4;*/
;;;5480     		//tcp_soc_avg = tcp_get_socket (TCP_TYPE_CLIENT, 0, 30, tcp_callback);
;;;5481     		if (tcp_soc_avg != 0) 
;;;5482   			{
;;;5483       		
;;;5484   			//tcp_connect_stat=0;
;;;5485       		//tcp_connect (tcp_soc_avg, rem_IP, 502, 1000);
;;;5486   			/*while(!tcp_connect_stat)
;;;5487   				{
;;;5488   				}*/
;;;5489   			//delay_us(500);
;;;5490   			//tcp_close(tcp_soc_avg);
;;;5491   
;;;5492   			}
;;;5493   		}
;;;5494   	}
;;;5495   
;;;5496   if((ica_timer_cnt==3)&&(ICA_EN==1))
;;;5497   	{
;;;5498   	//if(tcp_connect_stat)
;;;5499   		{
;;;5500   		//tcp_close(tcp_soc_avg);
;;;5501   		//tcp_connect_stat=3;
;;;5502   		}
;;;5503   	}
;;;5504   
;;;5505   if((main_kb_cnt==(TBAT*60)-21)&&(ICA_EN==1))
003a96  48fd              LDR      r0,|L1.16012|
003a98  f06f0214          MVN      r2,#0x14
003a9c  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
003aa0  ebc01100          RSB      r1,r0,r0,LSL #4
003aa4  eb020181          ADD      r1,r2,r1,LSL #2
003aa8  4af9              LDR      r2,|L1.16016|
003aaa  f9b2204c          LDRSH    r2,[r2,#0x4c]  ; main_kb_cnt
003aae  4291              CMP      r1,r2
003ab0  d134              BNE      |L1.15132|
003ab2  8831              LDRH     r1,[r6,#0]  ; ICA_EN
003ab4  2901              CMP      r1,#1
003ab6  d131              BNE      |L1.15132|
;;;5506   	{
;;;5507   	char modbus_buff[20],i;
;;;5508   	short crc_temp;
;;;5509   
;;;5510   	modbus_buff[0] = ICA_MODBUS_ADDRESS;
003ab8  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
003abc  f88d1000          STRB     r1,[sp,#0]
;;;5511   	modbus_buff[1] = 6;
003ac0  f04f0106          MOV      r1,#6
003ac4  f88d1001          STRB     r1,[sp,#1]
;;;5512   	modbus_buff[2] = 0;
003ac8  f88d5002          STRB     r5,[sp,#2]
;;;5513   	modbus_buff[3] = 30;
003acc  f04f011e          MOV      r1,#0x1e
003ad0  f88d1003          STRB     r1,[sp,#3]
;;;5514   	modbus_buff[4] = (char)(TBAT/256);	
003ad4  ea4f71e0          ASR      r1,r0,#31
003ad8  eb006111          ADD      r1,r0,r1,LSR #24
003adc  ea4f2221          ASR      r2,r1,#8
003ae0  f88d2004          STRB     r2,[sp,#4]
;;;5515   	modbus_buff[5] = (char)(TBAT%256);
003ae4  f88d0005          STRB     r0,[sp,#5]
;;;5516   
;;;5517   	crc_temp= CRC16_2(modbus_buff,6);
003ae8  f04f0106          MOV      r1,#6
003aec  4668              MOV      r0,sp
003aee  f7fffffe          BL       CRC16_2
;;;5518   
;;;5519   	modbus_buff[6]= (char)crc_temp;
003af2  f88d0006          STRB     r0,[sp,#6]
;;;5520   	modbus_buff[7]= (char)(crc_temp>>8);
003af6  ea4f2020          ASR      r0,r0,#8
003afa  f88d0007          STRB     r0,[sp,#7]
;;;5521   
;;;5522   	if(ICA_CH==0)
003afe  8838              LDRH     r0,[r7,#0]  ; ICA_CH
003b00  2800              CMP      r0,#0
003b02  d10b              BNE      |L1.15132|
;;;5523   		{
;;;5524   		for (i=0;i<8;i++)
003b04  4604              MOV      r4,r0
003b06  466d              MOV      r5,sp                 ;5507
                  |L1.15112|
;;;5525   			{
;;;5526   			putchar_sc16is700(modbus_buff[i]);
003b08  5d28              LDRB     r0,[r5,r4]
003b0a  f7fffffe          BL       putchar_sc16is700
003b0e  e000              B        |L1.15122|
                  |L1.15120|
003b10  e007              B        |L1.15138|
                  |L1.15122|
003b12  f1040401          ADD      r4,r4,#1              ;5524
003b16  b2e4              UXTB     r4,r4                 ;5524
003b18  2c08              CMP      r4,#8                 ;5524
003b1a  d3f5              BCC      |L1.15112|
                  |L1.15132|
;;;5527   			}
;;;5528   		}
;;;5529   	}
;;;5530   
;;;5531   }
003b1c  b005              ADD      sp,sp,#0x14
003b1e  e8bd83f0          POP      {r4-r9,pc}
                  |L1.15138|
003b22  f04f0400          MOV      r4,#0                 ;5468
003b26  46e9              MOV      r9,sp                 ;5449
                  |L1.15144|
003b28  f8190004          LDRB     r0,[r9,r4]            ;5470
003b2c  f7fffffe          BL       putchar_sc16is700
003b30  f1040401          ADD      r4,r4,#1              ;5468
003b34  b2e4              UXTB     r4,r4                 ;5468
003b36  2c08              CMP      r4,#8                 ;5468
003b38  d3f6              BCC      |L1.15144|
003b3a  e7ac              B        |L1.14998|
;;;5532   
                          ENDP

                  energometr_hndl PROC
;;;5533   //-----------------------------------------------
;;;5534   void energometr_hndl(void)
003b3c  4770              BX       lr
;;;5535   {
;;;5536   //2F 3F 21 0D 0A 
;;;5537   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;5538   //2F 3F 21 0D 0A 
;;;5539   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;5540   //06 30 35 31 0D 0A 
;;;5541   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;5542   
;;;5543   #ifdef CE102M_ENABLED
;;;5544   /*if
;;;5545   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;5546   
;;;5547   if(read_power_cnt_main_cnt)
;;;5548   	{
;;;5549   	read_power_cnt_main_cnt--;
;;;5550   	if(read_power_cnt_main_cnt==0)
;;;5551   		{
;;;5552   		rx_read_power_cnt_phase=0;
;;;5553   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;5554   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;5555   		else bENERGOMETR_UIP=0;
;;;5556   		//bENERGOMETR_UIP=2;
;;;5557   		}
;;;5558   	}
;;;5559   
;;;5560   if (rx_read_power_cnt_phase==0)
;;;5561   	{
;;;5562   	char command_with_crc[20];
;;;5563   	
;;;5564      	command_with_crc[0]=0xaf;  // /
;;;5565   	command_with_crc[1]=0x3f;  // ?
;;;5566   	command_with_crc[2]=0x21;  // !
;;;5567   	command_with_crc[3]=0x8d;  // CR
;;;5568   	command_with_crc[4]=0x0a;  // LF
;;;5569   
;;;5570   	uart_out__adr1(command_with_crc,5);
;;;5571   
;;;5572   	rx_wr_index1=0;
;;;5573   	rx_read_power_cnt_phase=1;
;;;5574   
;;;5575   	read_power_cnt_main_cnt=50;
;;;5576   	}
;;;5577   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;5578   	{
;;;5579   	char command_with_crc[20];
;;;5580   	
;;;5581   	command_with_crc[0]=0x06;  //  
;;;5582   	command_with_crc[1]=0x30;  // 0
;;;5583   	command_with_crc[2]=0x35;  // 5
;;;5584   	command_with_crc[3]=0xb1;  // 1
;;;5585   	command_with_crc[4]=0x8d;  // CR
;;;5586   	command_with_crc[5]=0x0a;  // LF
;;;5587   	
;;;5588   	uart_out__adr1(command_with_crc,6);
;;;5589   	
;;;5590   	rx_wr_index1=0;
;;;5591   	rx_read_power_cnt_phase=3;
;;;5592   
;;;5593   	read_power_cnt_main_cnt=50;
;;;5594   	}  
;;;5595   
;;;5596   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;5597   	{
;;;5598   	char command_with_crc[20];
;;;5599   	
;;;5600   	command_with_crc[0]=0x81;  //  
;;;5601   	command_with_crc[1]=0xd2;  // 0
;;;5602   	command_with_crc[2]=0xb1;  // 5
;;;5603   	command_with_crc[3]=0x82;  // 1
;;;5604   	command_with_crc[4]=0x56;  // CR
;;;5605   	command_with_crc[5]=0xcf;  // LF
;;;5606   	command_with_crc[6]=0xcc;  // 1
;;;5607   	command_with_crc[7]=0xd4;  // CR
;;;5608   	command_with_crc[8]=0x41;  // LF
;;;5609   	command_with_crc[9]=0x28;  // 1
;;;5610   	command_with_crc[10]=0xa9;  // CR
;;;5611   	command_with_crc[11]=0x03;  // LF
;;;5612   	command_with_crc[12]=0x5f;  // LF
;;;5613   		
;;;5614   	uart_out__adr1(command_with_crc,13);
;;;5615   	
;;;5616   	rx_wr_index1=0;
;;;5617   	rx_read_power_cnt_phase=5;
;;;5618   
;;;5619   	read_power_cnt_main_cnt=50;
;;;5620   	}  
;;;5621   
;;;5622   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;5623   	{
;;;5624   	char command_with_crc[20];
;;;5625   	
;;;5626   	command_with_crc[0]=0x81;  //  
;;;5627   	command_with_crc[1]=0xd2;  // 0
;;;5628   	command_with_crc[2]=0xb1;  // 5
;;;5629   	command_with_crc[3]=0x82;  // 1
;;;5630   	command_with_crc[4]=0xc3;  // CR
;;;5631   	command_with_crc[5]=0x55;  // LF
;;;5632   	command_with_crc[6]=0xd2;  // 1
;;;5633   	command_with_crc[7]=0xd2;  // CR
;;;5634   	command_with_crc[8]=0xc5;  // LF
;;;5635   	command_with_crc[9]=0x28;  // 1
;;;5636   	command_with_crc[10]=0xa9;  // CR
;;;5637   	command_with_crc[11]=0x03;  // LF
;;;5638   	command_with_crc[12]=0x5a;  // LF
;;;5639   		
;;;5640   	uart_out__adr1(command_with_crc,13);
;;;5641   	
;;;5642   	rx_wr_index1=0;
;;;5643   	rx_read_power_cnt_phase=9;
;;;5644   
;;;5645   	read_power_cnt_main_cnt=50;
;;;5646   	}  
;;;5647   
;;;5648   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;5649   	{
;;;5650   	char command_with_crc[20];
;;;5651   	
;;;5652   	command_with_crc[0]=0x81;  //  		01
;;;5653   	command_with_crc[1]=0xd2;  // R		52
;;;5654   	command_with_crc[2]=0xb1;  // 1		31
;;;5655   	command_with_crc[3]=0x82;  // 		02
;;;5656   	command_with_crc[4]=0x50;  // P		50
;;;5657   	command_with_crc[5]=0xcf;  // O	  	4f
;;;5658   	command_with_crc[6]=0xd7;  // W		57
;;;5659   	command_with_crc[7]=0xc5;  // E		45
;;;5660   	command_with_crc[8]=0x50;  // P		50
;;;5661   	command_with_crc[9]=0x28;  // (		28
;;;5662   	command_with_crc[10]=0xa9;  // )	29
;;;5663   	command_with_crc[11]=0x03;  // 		03
;;;5664   	command_with_crc[12]=0xe4;  // d	64
;;;5665   		
;;;5666   	uart_out__adr1(command_with_crc,13);
;;;5667   	
;;;5668   	rx_wr_index1=0;
;;;5669   	rx_read_power_cnt_phase=21;
;;;5670   
;;;5671   	read_power_cnt_main_cnt=50;
;;;5672   	}  
;;;5673   
;;;5674   
;;;5675   #endif
;;;5676   }
;;;5677   
                          ENDP

                  ips_current_average_hndl PROC
;;;5678   //-----------------------------------------------
;;;5679   void ips_current_average_hndl(void)
003b3e  e92d4ff0          PUSH     {r4-r11,lr}
;;;5680   {
003b42  b089              SUB      sp,sp,#0x24
;;;5681   
;;;5682   if(++ica_timer_cnt>=10) 
003b44  4ed3              LDR      r6,|L1.16020|
;;;5683   	{
;;;5684   	ica_timer_cnt=0;
003b46  2400              MOVS     r4,#0
003b48  7830              LDRB     r0,[r6,#0]            ;5682  ; ica_timer_cnt
003b4a  1c40              ADDS     r0,r0,#1              ;5682
003b4c  b2c0              UXTB     r0,r0                 ;5682
003b4e  7030              STRB     r0,[r6,#0]            ;5682
003b50  280a              CMP      r0,#0xa               ;5682
003b52  d300              BCC      |L1.15190|
003b54  7034              STRB     r4,[r6,#0]
                  |L1.15190|
;;;5685   	}
;;;5686   
;;;5687   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
003b56  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
003b58  4fcf              LDR      r7,|L1.16024|
;;;5688   	{
;;;5689   	
;;;5690   	ica_plazma[0]++;
;;;5691   
;;;5692   	ica_my_current=bps_I;
;;;5693   
;;;5694   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
003b5a  f8dfb340          LDR      r11,|L1.16028|
003b5e  4dcc              LDR      r5,|L1.16016|
003b60  bbe0              CBNZ     r0,|L1.15324|
003b62  7e68              LDRB     r0,[r5,#0x19]         ;5687  ; num_of_wrks_bps
003b64  b3d0              CBZ      r0,|L1.15324|
003b66  7fa8              LDRB     r0,[r5,#0x1e]         ;5687  ; spc_stat
003b68  7869              LDRB     r1,[r5,#1]            ;5687  ; vz1_stat
003b6a  4308              ORRS     r0,r0,r1              ;5687
003b6c  78e9              LDRB     r1,[r5,#3]            ;5687  ; vz2_stat
003b6e  4308              ORRS     r0,r0,r1              ;5687
003b70  7839              LDRB     r1,[r7,#0]            ;5687  ; sp_ch_stat
003b72  4308              ORRS     r0,r0,r1              ;5687
003b74  d14c              BNE      |L1.15376|
003b76  f8df9328          LDR      r9,|L1.16032|
003b7a  f8990000          LDRB     r0,[r9,#0]            ;5690  ; ica_plazma
003b7e  f1000001          ADD      r0,r0,#1              ;5690
003b82  f8890000          STRB     r0,[r9,#0]            ;5690
003b86  48c7              LDR      r0,|L1.16036|
003b88  f9b01000          LDRSH    r1,[r0,#0]            ;5692  ; bps_I
003b8c  48c6              LDR      r0,|L1.16040|
003b8e  8001              STRH     r1,[r0,#0]            ;5692
003b90  48c6              LDR      r0,|L1.16044|
;;;5695   		{
;;;5696   		ica_plazma[1]++;
;;;5697   		ica_u_necc--;
003b92  f8dfa31c          LDR      r10,|L1.16048|
003b96  f9b02000          LDRSH    r2,[r0,#0]            ;5694  ; ica_your_current
003b9a  4648              MOV      r0,r9                 ;5690
003b9c  f9bac000          LDRSH    r12,[r10,#0]
003ba0  7843              LDRB     r3,[r0,#1]            ;5696
003ba2  48c4              LDR      r0,|L1.16052|
003ba4  4291              CMP      r1,r2                 ;5694
003ba6  f9b08000          LDRSH    r8,[r0,#0]            ;5694
003baa  4658              MOV      r0,r11                ;5694
003bac  f9b00000          LDRSH    r0,[r0,#0]            ;5694
003bb0  dd15              BLE      |L1.15326|
003bb2  eba10e02          SUB      lr,r1,r2              ;5694
003bb6  f1be0f05          CMP      lr,#5                 ;5694
003bba  db10              BLT      |L1.15326|
003bbc  2801              CMP      r0,#1                 ;5694
003bbe  d004              BEQ      |L1.15306|
003bc0  2802              CMP      r0,#2                 ;5694
003bc2  d10c              BNE      |L1.15326|
003bc4  f1b80f05          CMP      r8,#5                 ;5694
003bc8  dd09              BLE      |L1.15326|
                  |L1.15306|
003bca  f1030301          ADD      r3,r3,#1              ;5696
003bce  f8893001          STRB     r3,[r9,#1]            ;5696
003bd2  f1ac0c01          SUB      r12,r12,#1
003bd6  f8aac000          STRH     r12,[r10,#0]
003bda  e014              B        |L1.15366|
                  |L1.15324|
003bdc  e018              B        |L1.15376|
                  |L1.15326|
;;;5698   		}
;;;5699   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
003bde  4291              CMP      r1,r2
003be0  da11              BGE      |L1.15366|
003be2  1a51              SUBS     r1,r2,r1
003be4  2905              CMP      r1,#5
003be6  db0e              BLT      |L1.15366|
003be8  2801              CMP      r0,#1
003bea  d004              BEQ      |L1.15350|
003bec  2802              CMP      r0,#2
003bee  d10a              BNE      |L1.15366|
003bf0  f1b80f05          CMP      r8,#5
003bf4  dd07              BLE      |L1.15366|
                  |L1.15350|
;;;5700   		{
;;;5701   		ica_plazma[1]--;
003bf6  f1a30301          SUB      r3,r3,#1
003bfa  f8893001          STRB     r3,[r9,#1]
;;;5702   		ica_u_necc++;
003bfe  f10c0c01          ADD      r12,r12,#1
003c02  f8aac000          STRH     r12,[r10,#0]
                  |L1.15366|
;;;5703   		}
;;;5704   	gran(&ica_u_necc,-100,100);
003c06  2264              MOVS     r2,#0x64
003c08  4251              RSBS     r1,r2,#0
003c0a  48a9              LDR      r0,|L1.16048|
003c0c  f7fffffe          BL       gran
                  |L1.15376|
;;;5705   	}
;;;5706   
;;;5707   
;;;5708   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) /*&& (num_of_wrks_bps)*/)
003c10  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
003c14  2801              CMP      r0,#1
003c16  d165              BNE      |L1.15588|
003c18  7fa8              LDRB     r0,[r5,#0x1e]  ; spc_stat
003c1a  7869              LDRB     r1,[r5,#1]  ; vz1_stat
003c1c  4308              ORRS     r0,r0,r1
003c1e  78e9              LDRB     r1,[r5,#3]  ; vz2_stat
003c20  4308              ORRS     r0,r0,r1
003c22  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
003c24  4308              ORRS     r0,r0,r1
003c26  d15d              BNE      |L1.15588|
;;;5709   	{
;;;5710   	
;;;5711   	if(ica_timer_cnt==8)
003c28  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;5712   		{
;;;5713   		char modbus_buff[20],i;
;;;5714   		short crc_temp;
;;;5715   	
;;;5716   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
003c2a  4ba3              LDR      r3,|L1.16056|
;;;5717   		modbus_buff[1] = 4;
;;;5718   		modbus_buff[2] = 0;
;;;5719   		modbus_buff[3] = 2;
;;;5720   		modbus_buff[4] = 0;	
;;;5721   		modbus_buff[5] = 1;
;;;5722   	
;;;5723   		crc_temp= CRC16_2(modbus_buff,6);
;;;5724   	
;;;5725   		modbus_buff[6]= (char)crc_temp;
;;;5726   		modbus_buff[7]= (char)(crc_temp>>8);
;;;5727   	
;;;5728   		if(ICA_CH==0)
003c2c  4fa3              LDR      r7,|L1.16060|
003c2e  2808              CMP      r0,#8                 ;5711
003c30  d05b              BEQ      |L1.15594|
;;;5729   			{
;;;5730   			for (i=0;i<8;i++)
;;;5731   				{
;;;5732   				putchar_sc16is700(modbus_buff[i]);
;;;5733   				}
;;;5734   			}
;;;5735   		else if(ICA_CH==2)
;;;5736   			{
;;;5737   			uart_out1 (5,4,0,2,0,1,0);
;;;5738   			}
;;;5739   		}
;;;5740   	else
;;;5741   		{
;;;5742   		char modbus_buff[20],i;
;;;5743   		short crc_temp, tempSSSS;
;;;5744   
;;;5745   		tempSSSS=cntrl_stat_old;
003c32  f9b5602e          LDRSH    r6,[r5,#0x2e]  ; cntrl_stat_old
;;;5746   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
003c36  4895              LDR      r0,|L1.16012|
003c38  f06f0214          MVN      r2,#0x14
003c3c  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
003c40  ebc01100          RSB      r1,r0,r0,LSL #4
003c44  eb020c81          ADD      r12,r2,r1,LSL #2
003c48  f9b5204c          LDRSH    r2,[r5,#0x4c]  ; main_kb_cnt
003c4c  4594              CMP      r12,r2
003c4e  d00b              BEQ      |L1.15464|
003c50  f06f0c13          MVN      r12,#0x13
003c54  eb0c0c81          ADD      r12,r12,r1,LSL #2
003c58  4594              CMP      r12,r2
003c5a  d005              BEQ      |L1.15464|
003c5c  f06f0c12          MVN      r12,#0x12
003c60  eb0c0181          ADD      r1,r12,r1,LSL #2
003c64  4291              CMP      r1,r2
003c66  d101              BNE      |L1.15468|
                  |L1.15464|
003c68  f4404680          ORR      r6,r0,#0x4000
                  |L1.15468|
;;;5747   
;;;5748   
;;;5749   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
003c6c  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
003c6e  f88d0010          STRB     r0,[sp,#0x10]
;;;5750   		modbus_buff[1] = 6;
003c72  f04f0006          MOV      r0,#6
003c76  f88d0011          STRB     r0,[sp,#0x11]
;;;5751   		modbus_buff[2] = 0;
003c7a  f88d4012          STRB     r4,[sp,#0x12]
;;;5752   		modbus_buff[3] = 100;
003c7e  f04f0064          MOV      r0,#0x64
003c82  f88d0013          STRB     r0,[sp,#0x13]
;;;5753   		modbus_buff[4] = (char)(tempSSSS/256);	
003c86  ea4f70e6          ASR      r0,r6,#31
003c8a  eb066010          ADD      r0,r6,r0,LSR #24
003c8e  ea4f2120          ASR      r1,r0,#8
003c92  f88d1014          STRB     r1,[sp,#0x14]
;;;5754   		modbus_buff[5] = (char)(tempSSSS%256);
003c96  4630              MOV      r0,r6
003c98  f88d0015          STRB     r0,[sp,#0x15]
;;;5755   	
;;;5756   		crc_temp= CRC16_2(modbus_buff,6);
003c9c  f04f0106          MOV      r1,#6
003ca0  a804              ADD      r0,sp,#0x10
003ca2  f7fffffe          BL       CRC16_2
;;;5757   	
;;;5758   		modbus_buff[6]= (char)crc_temp;
003ca6  f88d0016          STRB     r0,[sp,#0x16]
;;;5759   		modbus_buff[7]= (char)(crc_temp>>8);
003caa  ea4f2020          ASR      r0,r0,#8
003cae  f88d0017          STRB     r0,[sp,#0x17]
;;;5760   	
;;;5761   		crc_temp= CRC16_2(modbus_buff,6);
003cb2  f04f0106          MOV      r1,#6
003cb6  a804              ADD      r0,sp,#0x10
003cb8  f7fffffe          BL       CRC16_2
;;;5762   	
;;;5763   		plazma_ica1=tempSSSS;
003cbc  f8a5607c          STRH     r6,[r5,#0x7c]
;;;5764   		if(ICA_CH==0)
003cc0  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
003cc4  b3f0              CBZ      r0,|L1.15684|
;;;5765   			{
;;;5766   			for (i=0;i<8;i++)
;;;5767   				{
;;;5768   				putchar_sc16is700(modbus_buff[i]);
;;;5769   				}
;;;5770   			}
;;;5771   		else if(ICA_CH==2)
003cc6  2802              CMP      r0,#2
003cc8  d10c              BNE      |L1.15588|
;;;5772   			{
;;;5773   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
003cca  f89d0015          LDRB     r0,[sp,#0x15]
003cce  f89d1014          LDRB     r1,[sp,#0x14]
003cd2  e9cd0401          STRD     r0,r4,[sp,#4]
003cd6  9100              STR      r1,[sp,#0]
003cd8  2364              MOVS     r3,#0x64
003cda  2200              MOVS     r2,#0
003cdc  2106              MOVS     r1,#6
003cde  2005              MOVS     r0,#5
003ce0  f7fffffe          BL       uart_out1
                  |L1.15588|
;;;5774   			}
;;;5775   		}
;;;5776   	}
;;;5777   }
003ce4  b009              ADD      sp,sp,#0x24
003ce6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.15594|
003cea  8818              LDRH     r0,[r3,#0]            ;5716  ; ICA_MODBUS_ADDRESS
003cec  f88d0010          STRB     r0,[sp,#0x10]         ;5716
003cf0  f04f0004          MOV      r0,#4                 ;5717
003cf4  f88d0011          STRB     r0,[sp,#0x11]         ;5717
003cf8  f88d4012          STRB     r4,[sp,#0x12]         ;5718
003cfc  f04f0002          MOV      r0,#2                 ;5719
003d00  f88d0013          STRB     r0,[sp,#0x13]         ;5719
003d04  f88d4014          STRB     r4,[sp,#0x14]         ;5720
003d08  f04f0501          MOV      r5,#1                 ;5721
003d0c  f88d5015          STRB     r5,[sp,#0x15]         ;5721
003d10  f04f0106          MOV      r1,#6                 ;5723
003d14  a804              ADD      r0,sp,#0x10           ;5723
003d16  f7fffffe          BL       CRC16_2
003d1a  f88d0016          STRB     r0,[sp,#0x16]         ;5725
003d1e  ea4f2020          ASR      r0,r0,#8              ;5726
003d22  f88d0017          STRB     r0,[sp,#0x17]         ;5726
003d26  f9b70000          LDRSH    r0,[r7,#0]            ;5728  ; ICA_CH
003d2a  b160              CBZ      r0,|L1.15686|
003d2c  2802              CMP      r0,#2                 ;5735
003d2e  d1d9              BNE      |L1.15588|
003d30  e9cd4500          STRD     r4,r5,[sp,#0]         ;5737
003d34  2302              MOVS     r3,#2                 ;5737
003d36  2200              MOVS     r2,#0                 ;5737
003d38  2104              MOVS     r1,#4                 ;5737
003d3a  2005              MOVS     r0,#5                 ;5737
003d3c  9402              STR      r4,[sp,#8]            ;5737
003d3e  f7fffffe          BL       uart_out1
003d42  e7cf              B        |L1.15588|
                  |L1.15684|
003d44  e00b              B        |L1.15710|
                  |L1.15686|
003d46  f04f0400          MOV      r4,#0                 ;5730
003d4a  ad04              ADD      r5,sp,#0x10           ;5713
                  |L1.15692|
003d4c  5d28              LDRB     r0,[r5,r4]            ;5732
003d4e  f7fffffe          BL       putchar_sc16is700
003d52  f1040401          ADD      r4,r4,#1              ;5730
003d56  b2e4              UXTB     r4,r4                 ;5730
003d58  2c08              CMP      r4,#8                 ;5730
003d5a  d3f7              BCC      |L1.15692|
003d5c  e7c2              B        |L1.15588|
                  |L1.15710|
003d5e  f04f0400          MOV      r4,#0                 ;5766
003d62  ad04              ADD      r5,sp,#0x10           ;5742
                  |L1.15716|
003d64  5d28              LDRB     r0,[r5,r4]            ;5768
003d66  f7fffffe          BL       putchar_sc16is700
003d6a  f1040401          ADD      r4,r4,#1              ;5766
003d6e  b2e4              UXTB     r4,r4                 ;5766
003d70  2c08              CMP      r4,#8                 ;5766
003d72  d3f7              BCC      |L1.15716|
003d74  e7b6              B        |L1.15588|
;;;5778   
                          ENDP

                  inv_drv PROC
;;;5779   //-----------------------------------------------
;;;5780   void inv_drv(char in)
003d76  b570              PUSH     {r4-r6,lr}
;;;5781   {
003d78  4604              MOV      r4,r0
;;;5782   char temp,temp_;
;;;5783   //if (bps[in]._device!=dINV) return;
;;;5784   //plazma_inv[4];
;;;5785   
;;;5786   gran_char((signed char*)&first_inv_slot,1,7);
003d7a  f04f0207          MOV      r2,#7
003d7e  f04f0101          MOV      r1,#1
003d82  484f              LDR      r0,|L1.16064|
003d84  f7fffffe          BL       gran_char
;;;5787   
;;;5788   
;;;5789   temp=inv[in]._flags_tm_old^inv[in]._flags_tm;
003d88  484e              LDR      r0,|L1.16068|
003d8a  eb040144          ADD      r1,r4,r4,LSL #1
003d8e  eb001541          ADD      r5,r0,r1,LSL #5
003d92  f8950047          LDRB     r0,[r5,#0x47]
003d96  f8951046          LDRB     r1,[r5,#0x46]
003d9a  ea800001          EOR      r0,r0,r1
;;;5790   if(temp)plazma_inv[1] =temp;
003d9e  4a3c              LDR      r2,|L1.16016|
003da0  f10202b4          ADD      r2,r2,#0xb4
003da4  b100              CBZ      r0,|L1.15784|
003da6  7050              STRB     r0,[r2,#1]
                  |L1.15784|
;;;5791   
;;;5792   temp_=inv[in]._flags_tm&temp;
003da8  ea010100          AND      r1,r1,r0
;;;5793   if(temp_)plazma_inv[2] =temp_;
003dac  b101              CBZ      r1,|L1.15792|
003dae  7091              STRB     r1,[r2,#2]
                  |L1.15792|
;;;5794   
;;;5795   if( (temp&(1<<0)) && (temp_&(1<<0)) ) 
003db0  ea000301          AND      r3,r0,r1
003db4  07db              LSLS     r3,r3,#31
003db6  d027              BEQ      |L1.15880|
;;;5796   	{
;;;5797   	plazma_inv[3]++;
003db8  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
003dba  f1000001          ADD      r0,r0,#1
003dbe  70d0              STRB     r0,[r2,#3]
;;;5798   	if(in==0)snmp_trap_send("Invertor #1 Alarm, overload",14,1,1);
003dc0  b134              CBZ      r4,|L1.15824|
;;;5799   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, overload",14,2,1);
003dc2  2c01              CMP      r4,#1
003dc4  d00b              BEQ      |L1.15838|
;;;5800   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, overload",14,3,1);
003dc6  2c02              CMP      r4,#2
003dc8  d010              BEQ      |L1.15852|
;;;5801   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, overload",14,4,1);
003dca  2c03              CMP      r4,#3
003dcc  d015              BEQ      |L1.15866|
003dce  e1b4              B        |L1.16698|
                  |L1.15824|
003dd0  2301              MOVS     r3,#1                 ;5798
003dd2  461a              MOV      r2,r3                 ;5798
003dd4  210e              MOVS     r1,#0xe               ;5798
003dd6  a03c              ADR      r0,|L1.16072|
003dd8  f7fffffe          BL       snmp_trap_send
003ddc  e1ad              B        |L1.16698|
                  |L1.15838|
003dde  2301              MOVS     r3,#1                 ;5799
003de0  2202              MOVS     r2,#2                 ;5799
003de2  210e              MOVS     r1,#0xe               ;5799
003de4  a03f              ADR      r0,|L1.16100|
003de6  f7fffffe          BL       snmp_trap_send
003dea  e1a6              B        |L1.16698|
                  |L1.15852|
003dec  2301              MOVS     r3,#1                 ;5800
003dee  2203              MOVS     r2,#3                 ;5800
003df0  210e              MOVS     r1,#0xe               ;5800
003df2  a043              ADR      r0,|L1.16128|
003df4  f7fffffe          BL       snmp_trap_send
003df8  e19f              B        |L1.16698|
                  |L1.15866|
003dfa  2301              MOVS     r3,#1
003dfc  2204              MOVS     r2,#4
003dfe  210e              MOVS     r1,#0xe
003e00  a046              ADR      r0,|L1.16156|
003e02  f7fffffe          BL       snmp_trap_send
003e06  e198              B        |L1.16698|
                  |L1.15880|
;;;5802   	}
;;;5803   else if( (temp&(1<<1)) && (temp_&(1<<1)) )
003e08  0783              LSLS     r3,r0,#30
003e0a  d529              BPL      |L1.15968|
003e0c  078b              LSLS     r3,r1,#30
003e0e  d527              BPL      |L1.15968|
;;;5804   	{
;;;5805   		plazma_inv[3]++;
003e10  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
003e12  f1000001          ADD      r0,r0,#1
003e16  70d0              STRB     r0,[r2,#3]
;;;5806   	if(in==0)snmp_trap_send("Invertor #1 Alarm, overheat",14,1,2);
003e18  b134              CBZ      r4,|L1.15912|
;;;5807   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, overheat",14,2,2);
003e1a  2c01              CMP      r4,#1
003e1c  d00b              BEQ      |L1.15926|
;;;5808   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, overheat",14,3,2);
003e1e  2c02              CMP      r4,#2
003e20  d010              BEQ      |L1.15940|
;;;5809   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, overheat",14,4,2);
003e22  2c03              CMP      r4,#3
003e24  d015              BEQ      |L1.15954|
003e26  e188              B        |L1.16698|
                  |L1.15912|
003e28  2302              MOVS     r3,#2                 ;5806
003e2a  2201              MOVS     r2,#1                 ;5806
003e2c  210e              MOVS     r1,#0xe               ;5806
003e2e  a042              ADR      r0,|L1.16184|
003e30  f7fffffe          BL       snmp_trap_send
003e34  e181              B        |L1.16698|
                  |L1.15926|
003e36  2302              MOVS     r3,#2                 ;5807
003e38  461a              MOV      r2,r3                 ;5807
003e3a  210e              MOVS     r1,#0xe               ;5807
003e3c  a045              ADR      r0,|L1.16212|
003e3e  f7fffffe          BL       snmp_trap_send
003e42  e17a              B        |L1.16698|
                  |L1.15940|
003e44  2302              MOVS     r3,#2                 ;5808
003e46  2203              MOVS     r2,#3                 ;5808
003e48  210e              MOVS     r1,#0xe               ;5808
003e4a  a049              ADR      r0,|L1.16240|
003e4c  f7fffffe          BL       snmp_trap_send
003e50  e173              B        |L1.16698|
                  |L1.15954|
003e52  2302              MOVS     r3,#2
003e54  2204              MOVS     r2,#4
003e56  210e              MOVS     r1,#0xe
003e58  a04c              ADR      r0,|L1.16268|
003e5a  f7fffffe          BL       snmp_trap_send
003e5e  e16c              B        |L1.16698|
                  |L1.15968|
;;;5810   	}
;;;5811   
;;;5812   else if( (temp&(1<<2)) && (temp_&(1<<2)) )
003e60  0743              LSLS     r3,r0,#29
003e62  d50e              BPL      |L1.16002|
003e64  074b              LSLS     r3,r1,#29
003e66  d50c              BPL      |L1.16002|
;;;5813   	{
;;;5814   		plazma_inv[3]++;
003e68  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
003e6a  f1000001          ADD      r0,r0,#1
003e6e  70d0              STRB     r0,[r2,#3]
;;;5815   	if(in==0)snmp_trap_send("Invertor #1 Alarm, is warm",14,1,3);
003e70  b134              CBZ      r4,|L1.16000|
;;;5816   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, is warm",14,2,3);
003e72  2c01              CMP      r4,#1
003e74  d006              BEQ      |L1.16004|
;;;5817   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, is warm",14,3,3);
003e76  2c02              CMP      r4,#2
003e78  d005              BEQ      |L1.16006|
;;;5818   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, is warm",14,4,3);
003e7a  2c03              CMP      r4,#3
003e7c  d004              BEQ      |L1.16008|
003e7e  e15c              B        |L1.16698|
                  |L1.16000|
003e80  e092              B        |L1.16296|
                  |L1.16002|
003e82  e0ad              B        |L1.16352|
                  |L1.16004|
003e84  e097              B        |L1.16310|
                  |L1.16006|
003e86  e09d              B        |L1.16324|
                  |L1.16008|
003e88  e0a3              B        |L1.16338|
003e8a  0000              DCW      0x0000
                  |L1.16012|
                          DCD      TBAT
                  |L1.16016|
                          DCD      ||area_number.18||
                  |L1.16020|
                          DCD      ica_timer_cnt
                  |L1.16024|
                          DCD      sp_ch_stat
                  |L1.16028|
                          DCD      ICA_EN
                  |L1.16032|
                          DCD      ica_plazma
                  |L1.16036|
                          DCD      bps_I
                  |L1.16040|
                          DCD      ica_my_current
                  |L1.16044|
                          DCD      ica_your_current
                  |L1.16048|
                          DCD      ica_u_necc
                  |L1.16052|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.16056|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.16060|
                          DCD      ICA_CH
                  |L1.16064|
                          DCD      first_inv_slot
                  |L1.16068|
                          DCD      inv
                  |L1.16072|
003ec8  496e7665          DCB      "Invertor #1 Alarm, overload",0
003ecc  72746f72
003ed0  20233120
003ed4  416c6172
003ed8  6d2c206f
003edc  7665726c
003ee0  6f616400
                  |L1.16100|
003ee4  496e7665          DCB      "Invertor #2 Alarm, overload",0
003ee8  72746f72
003eec  20233220
003ef0  416c6172
003ef4  6d2c206f
003ef8  7665726c
003efc  6f616400
                  |L1.16128|
003f00  496e7665          DCB      "Invertor #3 Alarm, overload",0
003f04  72746f72
003f08  20233320
003f0c  416c6172
003f10  6d2c206f
003f14  7665726c
003f18  6f616400
                  |L1.16156|
003f1c  496e7665          DCB      "Invertor #4 Alarm, overload",0
003f20  72746f72
003f24  20233420
003f28  416c6172
003f2c  6d2c206f
003f30  7665726c
003f34  6f616400
                  |L1.16184|
003f38  496e7665          DCB      "Invertor #1 Alarm, overheat",0
003f3c  72746f72
003f40  20233120
003f44  416c6172
003f48  6d2c206f
003f4c  76657268
003f50  65617400
                  |L1.16212|
003f54  496e7665          DCB      "Invertor #2 Alarm, overheat",0
003f58  72746f72
003f5c  20233220
003f60  416c6172
003f64  6d2c206f
003f68  76657268
003f6c  65617400
                  |L1.16240|
003f70  496e7665          DCB      "Invertor #3 Alarm, overheat",0
003f74  72746f72
003f78  20233320
003f7c  416c6172
003f80  6d2c206f
003f84  76657268
003f88  65617400
                  |L1.16268|
003f8c  496e7665          DCB      "Invertor #4 Alarm, overheat",0
003f90  72746f72
003f94  20233420
003f98  416c6172
003f9c  6d2c206f
003fa0  76657268
003fa4  65617400
                  |L1.16296|
003fa8  2303              MOVS     r3,#3                 ;5815
003faa  2201              MOVS     r2,#1                 ;5815
003fac  210e              MOVS     r1,#0xe               ;5815
003fae  a0c8              ADR      r0,|L1.17104|
003fb0  f7fffffe          BL       snmp_trap_send
003fb4  e0c1              B        |L1.16698|
                  |L1.16310|
003fb6  2303              MOVS     r3,#3                 ;5816
003fb8  2202              MOVS     r2,#2                 ;5816
003fba  210e              MOVS     r1,#0xe               ;5816
003fbc  a0cb              ADR      r0,|L1.17132|
003fbe  f7fffffe          BL       snmp_trap_send
003fc2  e0ba              B        |L1.16698|
                  |L1.16324|
003fc4  2303              MOVS     r3,#3                 ;5817
003fc6  461a              MOV      r2,r3                 ;5817
003fc8  210e              MOVS     r1,#0xe               ;5817
003fca  a0cf              ADR      r0,|L1.17160|
003fcc  f7fffffe          BL       snmp_trap_send
003fd0  e0b3              B        |L1.16698|
                  |L1.16338|
003fd2  2303              MOVS     r3,#3
003fd4  2204              MOVS     r2,#4
003fd6  210e              MOVS     r1,#0xe
003fd8  a0d2              ADR      r0,|L1.17188|
003fda  f7fffffe          BL       snmp_trap_send
003fde  e0ac              B        |L1.16698|
                  |L1.16352|
;;;5819   	}
;;;5820   
;;;5821   else if( (temp&(1<<3)) && (temp_&(1<<3)) ) 
003fe0  0703              LSLS     r3,r0,#28
003fe2  d529              BPL      |L1.16440|
003fe4  070b              LSLS     r3,r1,#28
003fe6  d527              BPL      |L1.16440|
;;;5822   	{
;;;5823   		plazma_inv[3]++;
003fe8  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
003fea  f1000001          ADD      r0,r0,#1
003fee  70d0              STRB     r0,[r2,#3]
;;;5824   	if(in==0)snmp_trap_send("Invertor #1 Alarm, voltage is up",14,1,4);
003ff0  b134              CBZ      r4,|L1.16384|
;;;5825   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, voltage is up",14,2,4);
003ff2  2c01              CMP      r4,#1
003ff4  d00b              BEQ      |L1.16398|
;;;5826   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, voltage is up",14,3,4);
003ff6  2c02              CMP      r4,#2
003ff8  d010              BEQ      |L1.16412|
;;;5827   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, voltage is up",14,4,4);
003ffa  2c03              CMP      r4,#3
003ffc  d015              BEQ      |L1.16426|
003ffe  e09c              B        |L1.16698|
                  |L1.16384|
004000  2304              MOVS     r3,#4                 ;5824
004002  2201              MOVS     r2,#1                 ;5824
004004  210e              MOVS     r1,#0xe               ;5824
004006  a0ce              ADR      r0,|L1.17216|
004008  f7fffffe          BL       snmp_trap_send
00400c  e095              B        |L1.16698|
                  |L1.16398|
00400e  2304              MOVS     r3,#4                 ;5825
004010  2202              MOVS     r2,#2                 ;5825
004012  210e              MOVS     r1,#0xe               ;5825
004014  a0d3              ADR      r0,|L1.17252|
004016  f7fffffe          BL       snmp_trap_send
00401a  e08e              B        |L1.16698|
                  |L1.16412|
00401c  2304              MOVS     r3,#4                 ;5826
00401e  2203              MOVS     r2,#3                 ;5826
004020  210e              MOVS     r1,#0xe               ;5826
004022  a0d9              ADR      r0,|L1.17288|
004024  f7fffffe          BL       snmp_trap_send
004028  e087              B        |L1.16698|
                  |L1.16426|
00402a  2304              MOVS     r3,#4
00402c  461a              MOV      r2,r3
00402e  210e              MOVS     r1,#0xe
004030  a0de              ADR      r0,|L1.17324|
004032  f7fffffe          BL       snmp_trap_send
004036  e080              B        |L1.16698|
                  |L1.16440|
;;;5828   	}
;;;5829   
;;;5830   else if( (temp&(1<<4)) && (temp_&(1<<4)) ) 
004038  06c3              LSLS     r3,r0,#27
00403a  d529              BPL      |L1.16528|
00403c  06cb              LSLS     r3,r1,#27
00403e  d527              BPL      |L1.16528|
;;;5831   	{
;;;5832   		plazma_inv[3]++;
004040  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
004042  f1000001          ADD      r0,r0,#1
004046  70d0              STRB     r0,[r2,#3]
;;;5833   	if(in==0)snmp_trap_send("Invertor #1 Alarm, voltage is down",14,1,5);
004048  b134              CBZ      r4,|L1.16472|
;;;5834   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, voltage is down",14,2,5);
00404a  2c01              CMP      r4,#1
00404c  d00b              BEQ      |L1.16486|
;;;5835   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, voltage is down",14,3,5);
00404e  2c02              CMP      r4,#2
004050  d010              BEQ      |L1.16500|
;;;5836   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, voltage is down",14,4,5);
004052  2c03              CMP      r4,#3
004054  d015              BEQ      |L1.16514|
004056  e070              B        |L1.16698|
                  |L1.16472|
004058  2305              MOVS     r3,#5                 ;5833
00405a  2201              MOVS     r2,#1                 ;5833
00405c  210e              MOVS     r1,#0xe               ;5833
00405e  a0dc              ADR      r0,|L1.17360|
004060  f7fffffe          BL       snmp_trap_send
004064  e069              B        |L1.16698|
                  |L1.16486|
004066  2305              MOVS     r3,#5                 ;5834
004068  2202              MOVS     r2,#2                 ;5834
00406a  210e              MOVS     r1,#0xe               ;5834
00406c  a0e1              ADR      r0,|L1.17396|
00406e  f7fffffe          BL       snmp_trap_send
004072  e062              B        |L1.16698|
                  |L1.16500|
004074  2305              MOVS     r3,#5                 ;5835
004076  2203              MOVS     r2,#3                 ;5835
004078  210e              MOVS     r1,#0xe               ;5835
00407a  a0e7              ADR      r0,|L1.17432|
00407c  f7fffffe          BL       snmp_trap_send
004080  e05b              B        |L1.16698|
                  |L1.16514|
004082  2305              MOVS     r3,#5
004084  2204              MOVS     r2,#4
004086  210e              MOVS     r1,#0xe
004088  a0ec              ADR      r0,|L1.17468|
00408a  f7fffffe          BL       snmp_trap_send
00408e  e054              B        |L1.16698|
                  |L1.16528|
;;;5837   	}
;;;5838   
;;;5839   else if( (temp&(1<<5)) && (temp_&(1<<5)) )
004090  0683              LSLS     r3,r0,#26
004092  d529              BPL      |L1.16616|
004094  068b              LSLS     r3,r1,#26
004096  d527              BPL      |L1.16616|
;;;5840   	{
;;;5841   		plazma_inv[3]++;
004098  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00409a  f1000001          ADD      r0,r0,#1
00409e  70d0              STRB     r0,[r2,#3]
;;;5842   	if(in==0)snmp_trap_send("Invertor #1 Alarm, output is offed",14,1,6);
0040a0  b134              CBZ      r4,|L1.16560|
;;;5843   	else if(in==1)snmp_trap_send("Invertor #2 Alarm, output is offed",14,2,6);
0040a2  2c01              CMP      r4,#1
0040a4  d00b              BEQ      |L1.16574|
;;;5844   	else if(in==2)snmp_trap_send("Invertor #3 Alarm, output is offed",14,3,6);
0040a6  2c02              CMP      r4,#2
0040a8  d010              BEQ      |L1.16588|
;;;5845   	else if(in==3)snmp_trap_send("Invertor #4 Alarm, output is offed",14,4,6);
0040aa  2c03              CMP      r4,#3
0040ac  d015              BEQ      |L1.16602|
0040ae  e044              B        |L1.16698|
                  |L1.16560|
0040b0  2306              MOVS     r3,#6                 ;5842
0040b2  2201              MOVS     r2,#1                 ;5842
0040b4  210e              MOVS     r1,#0xe               ;5842
0040b6  a0ea              ADR      r0,|L1.17504|
0040b8  f7fffffe          BL       snmp_trap_send
0040bc  e03d              B        |L1.16698|
                  |L1.16574|
0040be  2306              MOVS     r3,#6                 ;5843
0040c0  2202              MOVS     r2,#2                 ;5843
0040c2  210e              MOVS     r1,#0xe               ;5843
0040c4  a0ef              ADR      r0,|L1.17540|
0040c6  f7fffffe          BL       snmp_trap_send
0040ca  e036              B        |L1.16698|
                  |L1.16588|
0040cc  2306              MOVS     r3,#6                 ;5844
0040ce  2203              MOVS     r2,#3                 ;5844
0040d0  210e              MOVS     r1,#0xe               ;5844
0040d2  a0f5              ADR      r0,|L1.17576|
0040d4  f7fffffe          BL       snmp_trap_send
0040d8  e02f              B        |L1.16698|
                  |L1.16602|
0040da  2306              MOVS     r3,#6
0040dc  2204              MOVS     r2,#4
0040de  210e              MOVS     r1,#0xe
0040e0  a0fa              ADR      r0,|L1.17612|
0040e2  f7fffffe          BL       snmp_trap_send
0040e6  e028              B        |L1.16698|
                  |L1.16616|
;;;5846   	}
;;;5847   
;;;5848   else if((temp)&&(!temp_)) 
0040e8  b300              CBZ      r0,|L1.16684|
0040ea  b9f9              CBNZ     r1,|L1.16684|
;;;5849   	{
;;;5850   		plazma_inv[3]++;
0040ec  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0040ee  f1000001          ADD      r0,r0,#1
0040f2  70d0              STRB     r0,[r2,#3]
;;;5851   	if(in==0)snmp_trap_send("Invertor #1 is norm",14,1,0);
0040f4  b134              CBZ      r4,|L1.16644|
;;;5852   	else if(in==1)snmp_trap_send("Invertor #2 is norm",14,2,0);
0040f6  2c01              CMP      r4,#1
0040f8  d00b              BEQ      |L1.16658|
;;;5853   	else if(in==2)snmp_trap_send("Invertor #3 is norm",14,3,0);
0040fa  2c02              CMP      r4,#2
0040fc  d010              BEQ      |L1.16672|
;;;5854   	else if(in==3)snmp_trap_send("Invertor #4 is norm",14,4,0);
0040fe  2c03              CMP      r4,#3
004100  d015              BEQ      |L1.16686|
004102  e01a              B        |L1.16698|
                  |L1.16644|
004104  2300              MOVS     r3,#0                 ;5851
004106  2201              MOVS     r2,#1                 ;5851
004108  210e              MOVS     r1,#0xe               ;5851
00410a  a0f9              ADR      r0,|L1.17648|
00410c  f7fffffe          BL       snmp_trap_send
004110  e013              B        |L1.16698|
                  |L1.16658|
004112  2300              MOVS     r3,#0                 ;5852
004114  2202              MOVS     r2,#2                 ;5852
004116  210e              MOVS     r1,#0xe               ;5852
004118  a0fa              ADR      r0,|L1.17668|
00411a  f7fffffe          BL       snmp_trap_send
00411e  e00c              B        |L1.16698|
                  |L1.16672|
004120  2300              MOVS     r3,#0                 ;5853
004122  2203              MOVS     r2,#3                 ;5853
004124  210e              MOVS     r1,#0xe               ;5853
004126  a0fc              ADR      r0,|L1.17688|
004128  f7fffffe          BL       snmp_trap_send
                  |L1.16684|
00412c  e005              B        |L1.16698|
                  |L1.16686|
00412e  2300              MOVS     r3,#0
004130  2204              MOVS     r2,#4
004132  210e              MOVS     r1,#0xe
004134  a0fd              ADR      r0,|L1.17708|
004136  f7fffffe          BL       snmp_trap_send
                  |L1.16698|
;;;5855   	}
;;;5856   
;;;5857   inv[in]._flags_tm_old=inv[in]._flags_tm;
00413a  f8150f46          LDRB     r0,[r5,#0x46]!
00413e  7068              STRB     r0,[r5,#1]
;;;5858   
;;;5859   }	
004140  bd70              POP      {r4-r6,pc}
;;;5860   
                          ENDP

                  ipsBlckHndl PROC
;;;5861   //-----------------------------------------------
;;;5862   void ipsBlckHndl(char in)
004142  b510              PUSH     {r4,lr}
;;;5863   {
;;;5864   
;;;5865   ipsBlckStat=0;
004144  4bfe              LDR      r3,|L1.17728|
004146  f04f0000          MOV      r0,#0
00414a  8018              STRH     r0,[r3,#0]
;;;5866   if(ipsBlckSrc==1)
00414c  48fd              LDR      r0,|L1.17732|
00414e  f04f0401          MOV      r4,#1
;;;5867   	{
;;;5868   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
004152  f44f62fa          MOV      r2,#0x7d0
004156  f9b01000          LDRSH    r1,[r0,#0]            ;5866  ; ipsBlckSrc
00415a  48fb              LDR      r0,|L1.17736|
00415c  2901              CMP      r1,#1                 ;5866
00415e  f9b00000          LDRSH    r0,[r0,#0]
004162  d006              BEQ      |L1.16754|
;;;5869   	}
;;;5870   else if(ipsBlckSrc==2)
004164  2902              CMP      r1,#2
004166  d10f              BNE      |L1.16776|
004168  49f8              LDR      r1,|L1.17740|
;;;5871   	{
;;;5872   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
00416a  f9b1101a          LDRSH    r1,[r1,#0x1a]
00416e  b160              CBZ      r0,|L1.16778|
004170  e00d              B        |L1.16782|
                  |L1.16754|
004172  49f6              LDR      r1,|L1.17740|
004174  f9b11016          LDRSH    r1,[r1,#0x16]         ;5868
004178  b908              CBNZ     r0,|L1.16766|
00417a  4291              CMP      r1,r2                 ;5868
00417c  dc03              BGT      |L1.16774|
                  |L1.16766|
00417e  2801              CMP      r0,#1                 ;5868
004180  d102              BNE      |L1.16776|
004182  4291              CMP      r1,r2                 ;5868
004184  da00              BGE      |L1.16776|
                  |L1.16774|
004186  801c              STRH     r4,[r3,#0]            ;5868
                  |L1.16776|
;;;5873   	}
;;;5874   }
004188  bd10              POP      {r4,pc}
                  |L1.16778|
00418a  4291              CMP      r1,r2                 ;5872
00418c  dc03              BGT      |L1.16790|
                  |L1.16782|
00418e  2801              CMP      r0,#1                 ;5872
004190  d1fa              BNE      |L1.16776|
004192  4291              CMP      r1,r2                 ;5872
004194  daf8              BGE      |L1.16776|
                  |L1.16790|
004196  801c              STRH     r4,[r3,#0]            ;5872
004198  bd10              POP      {r4,pc}
;;;5875   
                          ENDP

                  bps_drv PROC
;;;5876   //-----------------------------------------------
;;;5877   void bps_drv(char in)
00419a  e92d41f0          PUSH     {r4-r8,lr}
;;;5878   {
00419e  4606              MOV      r6,r0
;;;5879   char temp;
;;;5880   
;;;5881   if (bps[in]._device!=dSRC) return;
0041a0  ebc600c6          RSB      r0,r6,r6,LSL #3
0041a4  49ea              LDR      r1,|L1.17744|
0041a6  eb001006          ADD      r0,r0,r6,LSL #4
0041aa  f8112020          LDRB     r2,[r1,r0,LSL #2]
0041ae  2a03              CMP      r2,#3
0041b0  d177              BNE      |L1.17058|
;;;5882   temp=bps[in]._flags_tm;
0041b2  eb010480          ADD      r4,r1,r0,LSL #2
0041b6  f8945042          LDRB     r5,[r4,#0x42]
;;;5883   if(temp&(1<<AV_T))
0041ba  07a8              LSLS     r0,r5,#30
0041bc  d517              BPL      |L1.16878|
;;;5884   	{
;;;5885   	if(bps[in]._temp_av_cnt<1200) 
0041be  f9b41046          LDRSH    r1,[r4,#0x46]
0041c2  f44f6096          MOV      r0,#0x4b0
0041c6  4281              CMP      r1,r0
0041c8  da22              BGE      |L1.16912|
;;;5886   		{
;;;5887   		bps[in]._temp_av_cnt++;
0041ca  f1010101          ADD      r1,r1,#1
0041ce  b209              SXTH     r1,r1
0041d0  f8a41046          STRH     r1,[r4,#0x46]
;;;5888   		if(bps[in]._temp_av_cnt>=1200)
0041d4  4281              CMP      r1,r0
0041d6  db1b              BLT      |L1.16912|
;;;5889   			{
;;;5890   			bps[in]._temp_av_cnt=1200;
0041d8  f8a40046          STRH     r0,[r4,#0x46]
;;;5891   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
0041dc  7860              LDRB     r0,[r4,#1]
0041de  07c0              LSLS     r0,r0,#31
0041e0  d116              BNE      |L1.16912|
0041e2  2201              MOVS     r2,#1
0041e4  2100              MOVS     r1,#0
0041e6  4630              MOV      r0,r6
0041e8  f7fffffe          BL       avar_bps_hndl
0041ec  e010              B        |L1.16912|
                  |L1.16878|
;;;5892   			}
;;;5893   		}
;;;5894   	}
;;;5895   
;;;5896   else if(!(temp&(1<<AV_T)))
;;;5897   	{
;;;5898   	if(bps[in]._temp_av_cnt) 
0041ee  f9b41046          LDRSH    r1,[r4,#0x46]
0041f2  b169              CBZ      r1,|L1.16912|
;;;5899   		{
;;;5900   		bps[in]._temp_av_cnt--;
0041f4  f1a10101          SUB      r1,r1,#1
0041f8  b208              SXTH     r0,r1
0041fa  f8a40046          STRH     r0,[r4,#0x46]
;;;5901   		if(!bps[in]._temp_av_cnt)
0041fe  b938              CBNZ     r0,|L1.16912|
;;;5902   			{
;;;5903   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004200  7860              LDRB     r0,[r4,#1]
004202  07c0              LSLS     r0,r0,#31
004204  d004              BEQ      |L1.16912|
004206  2200              MOVS     r2,#0
004208  4611              MOV      r1,r2
00420a  4630              MOV      r0,r6
00420c  f7fffffe          BL       avar_bps_hndl
                  |L1.16912|
;;;5904   			}
;;;5905   		} 	
;;;5906   
;;;5907   	}
;;;5908   
;;;5909   if((temp&(1<<AVUMAX)))
004210  0729              LSLS     r1,r5,#28
;;;5910   	{
;;;5911   	if(bps[in]._umax_av_cnt<10) 
;;;5912   		{
;;;5913   		bps[in]._umax_av_cnt++;
;;;5914   		if(bps[in]._umax_av_cnt>=10)
;;;5915   			{ 
;;;5916   			bps[in]._umax_av_cnt=10;
004212  f04f070a          MOV      r7,#0xa
004216  f04f0000          MOV      r0,#0                 ;5891
00421a  d515              BPL      |L1.16968|
00421c  f9b40048          LDRSH    r0,[r4,#0x48]         ;5911
004220  280a              CMP      r0,#0xa               ;5911
004222  da26              BGE      |L1.17010|
004224  f1000001          ADD      r0,r0,#1              ;5913
004228  b200              SXTH     r0,r0                 ;5913
00422a  f8a40048          STRH     r0,[r4,#0x48]         ;5913
00422e  280a              CMP      r0,#0xa               ;5914
004230  db1f              BLT      |L1.17010|
004232  f8a47048          STRH     r7,[r4,#0x48]
;;;5917   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004236  7860              LDRB     r0,[r4,#1]
004238  0780              LSLS     r0,r0,#30
00423a  d41a              BMI      |L1.17010|
00423c  2201              MOVS     r2,#1
00423e  4611              MOV      r1,r2
004240  4630              MOV      r0,r6
004242  f7fffffe          BL       avar_bps_hndl
004246  e014              B        |L1.17010|
                  |L1.16968|
;;;5918   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;5919   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;5920   				{
;;;5921   				apv_cnt[in,0]=APV_INIT;
;;;5922   				apv_cnt[in,1]=APV_INIT;
;;;5923   				apv_cnt[in,2]=APV_INIT;
;;;5924   				apv_flags[in]=afOFF;
;;;5925   				}				*/
;;;5926   						
;;;5927   			}
;;;5928   		} 
;;;5929   	}		
;;;5930   else if(!(temp&(1<<AVUMAX)))
;;;5931   	{
;;;5932   	if(bps[in]._umax_av_cnt>0) 
004248  f9b41048          LDRSH    r1,[r4,#0x48]
00424c  2900              CMP      r1,#0
00424e  dd0d              BLE      |L1.17004|
;;;5933   		{
;;;5934   		bps[in]._umax_av_cnt--;
004250  f1a10101          SUB      r1,r1,#1
004254  b208              SXTH     r0,r1
004256  f8a40048          STRH     r0,[r4,#0x48]
;;;5935   		if(bps[in]._umax_av_cnt==0)
00425a  b950              CBNZ     r0,|L1.17010|
;;;5936   			{
;;;5937   			bps[in]._umax_av_cnt=0;
;;;5938   			avar_bps_hndl(in,1,0);
00425c  f04f0200          MOV      r2,#0
004260  f04f0101          MOV      r1,#1
004264  4630              MOV      r0,r6
004266  f7fffffe          BL       avar_bps_hndl
00426a  e002              B        |L1.17010|
                  |L1.17004|
;;;5939   	 //		apv_cnt[in,0]=0;
;;;5940   	//		apv_cnt[in,1]=0;
;;;5941   	 //		apv_cnt[in,2]=0;			
;;;5942   			}
;;;5943   		}
;;;5944   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
00426c  da01              BGE      |L1.17010|
00426e  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.17010|
;;;5945   	}
;;;5946   
;;;5947   if(temp&(1<<AVUMIN))
004272  06e8              LSLS     r0,r5,#27
004274  d516              BPL      |L1.17060|
;;;5948   	{
;;;5949   	if(bps[in]._umin_av_cnt<10) 
004276  f9b4004a          LDRSH    r0,[r4,#0x4a]
00427a  280a              CMP      r0,#0xa
00427c  da20              BGE      |L1.17088|
;;;5950   		{
;;;5951   		bps[in]._umin_av_cnt++;
00427e  f1000001          ADD      r0,r0,#1
004282  b200              SXTH     r0,r0
004284  f8a4004a          STRH     r0,[r4,#0x4a]
;;;5952   		if(bps[in]._umin_av_cnt>=10)
004288  280a              CMP      r0,#0xa
00428a  db19              BLT      |L1.17088|
;;;5953   			{ 
;;;5954   			bps[in]._umin_av_cnt=10;
00428c  f8a4704a          STRH     r7,[r4,#0x4a]
;;;5955   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004290  7860              LDRB     r0,[r4,#1]
004292  0740              LSLS     r0,r0,#29
004294  d414              BMI      |L1.17088|
004296  2201              MOVS     r2,#1
004298  2102              MOVS     r1,#2
00429a  4630              MOV      r0,r6
00429c  f7fffffe          BL       avar_bps_hndl
0042a0  e00e              B        |L1.17088|
                  |L1.17058|
0042a2  e189              B        |L1.17848|
                  |L1.17060|
;;;5956   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;5957   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;5958   				{
;;;5959   				apv_cnt[in,0]=APV_INIT;
;;;5960   				apv_cnt[in,1]=APV_INIT;
;;;5961   				apv_cnt[in,2]=APV_INIT;
;;;5962   				apv_flags[in]=afOFF;
;;;5963   				}*/				
;;;5964   			}
;;;5965   		} 
;;;5966   	}	
;;;5967   	
;;;5968   else if(!(temp&(1<<AVUMIN)))
;;;5969   	{
;;;5970   	if(bps[in]._umin_av_cnt) 
0042a4  f9b4004a          LDRSH    r0,[r4,#0x4a]
0042a8  b150              CBZ      r0,|L1.17088|
;;;5971   		{
;;;5972   		bps[in]._umin_av_cnt--;
0042aa  f1a00001          SUB      r0,r0,#1
0042ae  b201              SXTH     r1,r0
0042b0  f8a4104a          STRH     r1,[r4,#0x4a]
;;;5973   		if(bps[in]._umin_av_cnt==0)
0042b4  b921              CBNZ     r1,|L1.17088|
;;;5974   			{
;;;5975   			bps[in]._umin_av_cnt=0;
;;;5976   			avar_bps_hndl(in,2,0);
0042b6  2200              MOVS     r2,#0
0042b8  2102              MOVS     r1,#2
0042ba  4630              MOV      r0,r6
0042bc  f7fffffe          BL       avar_bps_hndl
                  |L1.17088|
;;;5977   		//	apv_cnt[in,0]=0;
;;;5978   		//	apv_cnt[in,1]=0;
;;;5979   		//	apv_cnt[in,2]=0;
;;;5980   			}
;;;5981   		}
;;;5982   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;5983   	}
;;;5984   
;;;5985   //bps[in]._state=bsOFF;
;;;5986   
;;;5987   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
0042c0  7860              LDRB     r0,[r4,#1]
0042c2  0700              LSLS     r0,r0,#28
0042c4  d003              BEQ      |L1.17102|
0042c6  f04f0004          MOV      r0,#4
0042ca  70a0              STRB     r0,[r4,#2]
0042cc  e15a              B        |L1.17796|
                  |L1.17102|
0042ce  e141              B        |L1.17748|
                  |L1.17104|
0042d0  496e7665          DCB      "Invertor #1 Alarm, is warm",0
0042d4  72746f72
0042d8  20233120
0042dc  416c6172
0042e0  6d2c2069
0042e4  73207761
0042e8  726d00  
0042eb  00                DCB      0
                  |L1.17132|
0042ec  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0042f0  72746f72
0042f4  20233220
0042f8  416c6172
0042fc  6d2c2069
004300  73207761
004304  726d00  
004307  00                DCB      0
                  |L1.17160|
004308  496e7665          DCB      "Invertor #3 Alarm, is warm",0
00430c  72746f72
004310  20233320
004314  416c6172
004318  6d2c2069
00431c  73207761
004320  726d00  
004323  00                DCB      0
                  |L1.17188|
004324  496e7665          DCB      "Invertor #4 Alarm, is warm",0
004328  72746f72
00432c  20233420
004330  416c6172
004334  6d2c2069
004338  73207761
00433c  726d00  
00433f  00                DCB      0
                  |L1.17216|
004340  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
004344  72746f72
004348  20233120
00434c  416c6172
004350  6d2c2076
004354  6f6c7461
004358  67652069
00435c  73207570
004360  00      
004361  00                DCB      0
004362  00                DCB      0
004363  00                DCB      0
                  |L1.17252|
004364  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
004368  72746f72
00436c  20233220
004370  416c6172
004374  6d2c2076
004378  6f6c7461
00437c  67652069
004380  73207570
004384  00      
004385  00                DCB      0
004386  00                DCB      0
004387  00                DCB      0
                  |L1.17288|
004388  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
00438c  72746f72
004390  20233320
004394  416c6172
004398  6d2c2076
00439c  6f6c7461
0043a0  67652069
0043a4  73207570
0043a8  00      
0043a9  00                DCB      0
0043aa  00                DCB      0
0043ab  00                DCB      0
                  |L1.17324|
0043ac  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
0043b0  72746f72
0043b4  20233420
0043b8  416c6172
0043bc  6d2c2076
0043c0  6f6c7461
0043c4  67652069
0043c8  73207570
0043cc  00      
0043cd  00                DCB      0
0043ce  00                DCB      0
0043cf  00                DCB      0
                  |L1.17360|
0043d0  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
0043d4  72746f72
0043d8  20233120
0043dc  416c6172
0043e0  6d2c2076
0043e4  6f6c7461
0043e8  67652069
0043ec  7320646f
0043f0  776e00  
0043f3  00                DCB      0
                  |L1.17396|
0043f4  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0043f8  72746f72
0043fc  20233220
004400  416c6172
004404  6d2c2076
004408  6f6c7461
00440c  67652069
004410  7320646f
004414  776e00  
004417  00                DCB      0
                  |L1.17432|
004418  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
00441c  72746f72
004420  20233320
004424  416c6172
004428  6d2c2076
00442c  6f6c7461
004430  67652069
004434  7320646f
004438  776e00  
00443b  00                DCB      0
                  |L1.17468|
00443c  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
004440  72746f72
004444  20233420
004448  416c6172
00444c  6d2c2076
004450  6f6c7461
004454  67652069
004458  7320646f
00445c  776e00  
00445f  00                DCB      0
                  |L1.17504|
004460  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
004464  72746f72
004468  20233120
00446c  416c6172
004470  6d2c206f
004474  75747075
004478  74206973
00447c  206f6666
004480  656400  
004483  00                DCB      0
                  |L1.17540|
004484  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
004488  72746f72
00448c  20233220
004490  416c6172
004494  6d2c206f
004498  75747075
00449c  74206973
0044a0  206f6666
0044a4  656400  
0044a7  00                DCB      0
                  |L1.17576|
0044a8  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
0044ac  72746f72
0044b0  20233320
0044b4  416c6172
0044b8  6d2c206f
0044bc  75747075
0044c0  74206973
0044c4  206f6666
0044c8  656400  
0044cb  00                DCB      0
                  |L1.17612|
0044cc  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
0044d0  72746f72
0044d4  20233420
0044d8  416c6172
0044dc  6d2c206f
0044e0  75747075
0044e4  74206973
0044e8  206f6666
0044ec  656400  
0044ef  00                DCB      0
                  |L1.17648|
0044f0  496e7665          DCB      "Invertor #1 is norm",0
0044f4  72746f72
0044f8  20233120
0044fc  6973206e
004500  6f726d00
                  |L1.17668|
004504  496e7665          DCB      "Invertor #2 is norm",0
004508  72746f72
00450c  20233220
004510  6973206e
004514  6f726d00
                  |L1.17688|
004518  496e7665          DCB      "Invertor #3 is norm",0
00451c  72746f72
004520  20233320
004524  6973206e
004528  6f726d00
                  |L1.17708|
00452c  496e7665          DCB      "Invertor #4 is norm",0
004530  72746f72
004534  20233420
004538  6973206e
00453c  6f726d00
                  |L1.17728|
                          DCD      ipsBlckStat
                  |L1.17732|
                          DCD      ipsBlckSrc
                  |L1.17736|
                          DCD      ipsBlckLog
                  |L1.17740|
                          DCD      ||.bss||+0x40c
                  |L1.17744|
                          DCD      bps
                  |L1.17748|
;;;5988   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004554  48fb              LDR      r0,|L1.18756|
004556  7800              LDRB     r0,[r0,#0]  ; net_av
004558  b130              CBZ      r0,|L1.17768|
00455a  78e0              LDRB     r0,[r4,#3]
00455c  2814              CMP      r0,#0x14
00455e  d903              BLS      |L1.17768|
;;;5989   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004560  f04f0005          MOV      r0,#5
004564  70a0              STRB     r0,[r4,#2]
004566  e00d              B        |L1.17796|
                  |L1.17768|
;;;5990   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004568  f8940042          LDRB     r0,[r4,#0x42]
00456c  0680              LSLS     r0,r0,#26
00456e  d503              BPL      |L1.17784|
004570  f04f0002          MOV      r0,#2
004574  70a0              STRB     r0,[r4,#2]
004576  e005              B        |L1.17796|
                  |L1.17784|
;;;5991   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004578  78e0              LDRB     r0,[r4,#3]
00457a  2814              CMP      r0,#0x14
00457c  d202              BCS      |L1.17796|
00457e  f04f0001          MOV      r0,#1
004582  70a0              STRB     r0,[r4,#2]
                  |L1.17796|
;;;5992   
;;;5993   
;;;5994   
;;;5995   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;5996   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;5997   //else bps[0]._state=ssNOT;
;;;5998   
;;;5999   //bps[in]._is_ready=0;
;;;6000   //bps[in]._is_wrk=0;
;;;6001   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6002   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6003   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6004   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6005   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6006   //	{
;;;6007   //	bps[in]._flags_bp='B';// заблокирован
;;;6008   //	bps[in]._is_ready=1;
;;;6009   //	}
;;;6010   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6011   //     {
;;;6012   //     bps[in]._flags_bp='W';// работает
;;;6013   //     bps[in]._is_ready=1;
;;;6014   //     bps[in]._is_wrk=1;
;;;6015        
;;;6016   //     }
;;;6017   //else bps[in]._is_ready=1;     
;;;6018   
;;;6019   
;;;6020   
;;;6021   
;;;6022   
;;;6023   /*
;;;6024   bps[in]._flags_tu&=BIN8(11111110);
;;;6025   if(bps[in]._ist_blok_cnt)
;;;6026   	{
;;;6027   	bps[in]._ist_blok_cnt--;
;;;6028   	bps[in]._flags_tu|=BIN8(1);
;;;6029   	}
;;;6030   
;;;6031   	   */ 
;;;6032   
;;;6033   //Пересброс БПСа при потере связи
;;;6034   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004584  78e0              LDRB     r0,[r4,#3]
004586  280a              CMP      r0,#0xa
004588  d306              BCC      |L1.17816|
00458a  f894002c          LDRB     r0,[r4,#0x2c]
00458e  f0400080          ORR      r0,r0,#0x80
004592  f884002c          STRB     r0,[r4,#0x2c]
004596  e005              B        |L1.17828|
                  |L1.17816|
;;;6035   else bps[in]._flags_tu&=BIN8(1111111);
004598  f894002c          LDRB     r0,[r4,#0x2c]
00459c  f000007f          AND      r0,r0,#0x7f
0045a0  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.17828|
;;;6036   	
;;;6037   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
0045a4  49e8              LDR      r1,|L1.18760|
0045a6  f9b40050          LDRSH    r0,[r4,#0x50]
0045aa  f9b1102c          LDRSH    r1,[r1,#0x2c]  ; cntrl_stat
0045ae  4408              ADD      r0,r0,r1
0045b0  6320              STR      r0,[r4,#0x30]
;;;6038   bps[in]._vol_i=1000; 
0045b2  f44f707a          MOV      r0,#0x3e8
0045b6  6360              STR      r0,[r4,#0x34]
                  |L1.17848|
;;;6039   }
0045b8  e8bd81f0          POP      {r4-r8,pc}
;;;6040   
                          ENDP

                  avt_hndl PROC
;;;6041   //-----------------------------------------------
;;;6042   void avt_hndl(void)
0045bc  b570              PUSH     {r4-r6,lr}
;;;6043   {
;;;6044   char i;
;;;6045   for(i=0;i<12;i++)
0045be  f04f0000          MOV      r0,#0
;;;6046   	{
;;;6047   	if(eb2_data_short[6]&(1<<i))
0045c2  49e2              LDR      r1,|L1.18764|
;;;6048   		{
;;;6049   		avt_stat[i]=avtON;
0045c4  4de2              LDR      r5,|L1.18768|
0045c6  f04f0401          MOV      r4,#1                 ;6047
0045ca  f9b1200c          LDRSH    r2,[r1,#0xc]          ;6047
0045ce  4603              MOV      r3,r0                 ;6045
                  |L1.17872|
0045d0  fa04f100          LSL      r1,r4,r0              ;6047
0045d4  420a              TST      r2,r1                 ;6047
0045d6  d001              BEQ      |L1.17884|
0045d8  542c              STRB     r4,[r5,r0]
0045da  e000              B        |L1.17886|
                  |L1.17884|
;;;6050   		}
;;;6051   	else avt_stat[i]=avtOFF;
0045dc  542b              STRB     r3,[r5,r0]
                  |L1.17886|
0045de  f1000001          ADD      r0,r0,#1              ;6045
0045e2  b2c0              UXTB     r0,r0                 ;6045
0045e4  280c              CMP      r0,#0xc               ;6045
0045e6  d3f3              BCC      |L1.17872|
;;;6052   	}
;;;6053   
;;;6054   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
0045e8  4eda              LDR      r6,|L1.18772|
0045ea  7828              LDRB     r0,[r5,#0]  ; avt_stat
0045ec  4cda              LDR      r4,|L1.18776|
0045ee  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
0045f0  4281              CMP      r1,r0
0045f2  d00b              BEQ      |L1.17932|
0045f4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0045f8  2901              CMP      r1,#1
0045fa  db07              BLT      |L1.17932|
;;;6055   	{
;;;6056   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
0045fc  2801              CMP      r0,#1
0045fe  d07e              BEQ      |L1.18174|
;;;6057   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004600  2300              MOVS     r3,#0
004602  2201              MOVS     r2,#1
004604  210b              MOVS     r1,#0xb
004606  a0d5              ADR      r0,|L1.18780|
004608  f7fffffe          BL       snmp_trap_send
                  |L1.17932|
;;;6058   	}
;;;6059   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
00460c  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
00460e  7868              LDRB     r0,[r5,#1]  ; avt_stat
004610  4281              CMP      r1,r0
004612  d00b              BEQ      |L1.17964|
004614  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004618  2902              CMP      r1,#2
00461a  db07              BLT      |L1.17964|
;;;6060   	{
;;;6061   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
00461c  2801              CMP      r0,#1
00461e  d06f              BEQ      |L1.18176|
;;;6062   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004620  2300              MOVS     r3,#0
004622  2202              MOVS     r2,#2
004624  210b              MOVS     r1,#0xb
004626  a0d2              ADR      r0,|L1.18800|
004628  f7fffffe          BL       snmp_trap_send
                  |L1.17964|
;;;6063   	}
;;;6064   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
00462c  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
00462e  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004630  4281              CMP      r1,r0
004632  d00b              BEQ      |L1.17996|
004634  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004638  2903              CMP      r1,#3
00463a  db07              BLT      |L1.17996|
;;;6065   	{
;;;6066   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
00463c  2801              CMP      r0,#1
00463e  d072              BEQ      |L1.18214|
;;;6067   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004640  2300              MOVS     r3,#0
004642  2203              MOVS     r2,#3
004644  210b              MOVS     r1,#0xb
004646  a0cf              ADR      r0,|L1.18820|
004648  f7fffffe          BL       snmp_trap_send
                  |L1.17996|
;;;6068   	}
;;;6069   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
00464c  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
00464e  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004650  4281              CMP      r1,r0
004652  d00b              BEQ      |L1.18028|
004654  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004658  2904              CMP      r1,#4
00465a  db07              BLT      |L1.18028|
;;;6070   	{
;;;6071   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
00465c  2801              CMP      r0,#1
00465e  d079              BEQ      |L1.18260|
;;;6072   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004660  2300              MOVS     r3,#0
004662  2204              MOVS     r2,#4
004664  210b              MOVS     r1,#0xb
004666  a0cc              ADR      r0,|L1.18840|
004668  f7fffffe          BL       snmp_trap_send
                  |L1.18028|
;;;6073   	}
;;;6074   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
00466c  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
00466e  7928              LDRB     r0,[r5,#4]  ; avt_stat
004670  4281              CMP      r1,r0
004672  d00b              BEQ      |L1.18060|
004674  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004678  2905              CMP      r1,#5
00467a  db07              BLT      |L1.18060|
;;;6075   	{
;;;6076   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
00467c  2801              CMP      r0,#1
00467e  d071              BEQ      |L1.18276|
;;;6077   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004680  2300              MOVS     r3,#0
004682  2205              MOVS     r2,#5
004684  210b              MOVS     r1,#0xb
004686  a0c9              ADR      r0,|L1.18860|
004688  f7fffffe          BL       snmp_trap_send
                  |L1.18060|
;;;6078   	}
;;;6079   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
00468c  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
00468e  7968              LDRB     r0,[r5,#5]  ; avt_stat
004690  4281              CMP      r1,r0
004692  d00b              BEQ      |L1.18092|
004694  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004698  2906              CMP      r1,#6
00469a  db07              BLT      |L1.18092|
;;;6080   	{
;;;6081   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
00469c  2801              CMP      r0,#1
00469e  d068              BEQ      |L1.18290|
;;;6082   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
0046a0  2300              MOVS     r3,#0
0046a2  2206              MOVS     r2,#6
0046a4  210b              MOVS     r1,#0xb
0046a6  a0c6              ADR      r0,|L1.18880|
0046a8  f7fffffe          BL       snmp_trap_send
                  |L1.18092|
;;;6083   	}
;;;6084   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
0046ac  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
0046ae  79a8              LDRB     r0,[r5,#6]  ; avt_stat
0046b0  4281              CMP      r1,r0
0046b2  d00b              BEQ      |L1.18124|
0046b4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0046b8  2907              CMP      r1,#7
0046ba  db07              BLT      |L1.18124|
;;;6085   	{
;;;6086   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
0046bc  2801              CMP      r0,#1
0046be  d05f              BEQ      |L1.18304|
;;;6087   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
0046c0  2300              MOVS     r3,#0
0046c2  2207              MOVS     r2,#7
0046c4  210b              MOVS     r1,#0xb
0046c6  a0c3              ADR      r0,|L1.18900|
0046c8  f7fffffe          BL       snmp_trap_send
                  |L1.18124|
;;;6088   	}
;;;6089   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
0046cc  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
0046ce  79e8              LDRB     r0,[r5,#7]  ; avt_stat
0046d0  4281              CMP      r1,r0
0046d2  d00b              BEQ      |L1.18156|
0046d4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0046d8  2908              CMP      r1,#8
0046da  db07              BLT      |L1.18156|
;;;6090   	{
;;;6091   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
0046dc  2801              CMP      r0,#1
0046de  d056              BEQ      |L1.18318|
;;;6092   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
0046e0  2300              MOVS     r3,#0
0046e2  2208              MOVS     r2,#8
0046e4  210b              MOVS     r1,#0xb
0046e6  a0c0              ADR      r0,|L1.18920|
0046e8  f7fffffe          BL       snmp_trap_send
                  |L1.18156|
;;;6093   	}
;;;6094   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
0046ec  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
0046ee  7a28              LDRB     r0,[r5,#8]  ; avt_stat
0046f0  4281              CMP      r1,r0
0046f2  d00e              BEQ      |L1.18194|
0046f4  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0046f8  2909              CMP      r1,#9
0046fa  db0a              BLT      |L1.18194|
;;;6095   	{
;;;6096   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
0046fc  e001              B        |L1.18178|
                  |L1.18174|
0046fe  e013              B        |L1.18216|
                  |L1.18176|
004700  e019              B        |L1.18230|
                  |L1.18178|
004702  2801              CMP      r0,#1
004704  d04a              BEQ      |L1.18332|
;;;6097   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004706  2300              MOVS     r3,#0
004708  2209              MOVS     r2,#9
00470a  210b              MOVS     r1,#0xb
00470c  a0bb              ADR      r0,|L1.18940|
00470e  f7fffffe          BL       snmp_trap_send
                  |L1.18194|
;;;6098   	}
;;;6099   
;;;6100   for(i=0;i<12;i++)
004712  f04f0000          MOV      r0,#0
                  |L1.18198|
;;;6101   	{
;;;6102   	avt_stat_old[i]=avt_stat[i];
004716  5c29              LDRB     r1,[r5,r0]
004718  5431              STRB     r1,[r6,r0]
00471a  f1000001          ADD      r0,r0,#1              ;6100
00471e  b2c0              UXTB     r0,r0                 ;6100
004720  280c              CMP      r0,#0xc               ;6100
004722  d3f8              BCC      |L1.18198|
                  |L1.18212|
;;;6103   	}
;;;6104   }
004724  bd70              POP      {r4-r6,pc}
                  |L1.18214|
004726  e00e              B        |L1.18246|
                  |L1.18216|
004728  2301              MOVS     r3,#1                 ;6056
00472a  461a              MOV      r2,r3                 ;6056
00472c  210b              MOVS     r1,#0xb               ;6056
00472e  a0b8              ADR      r0,|L1.18960|
004730  f7fffffe          BL       snmp_trap_send
004734  e76a              B        |L1.17932|
                  |L1.18230|
004736  2301              MOVS     r3,#1                 ;6061
004738  2202              MOVS     r2,#2                 ;6061
00473a  210b              MOVS     r1,#0xb               ;6061
00473c  a0b9              ADR      r0,|L1.18980|
00473e  f7fffffe          BL       snmp_trap_send
004742  e773              B        |L1.17964|
004744  e006              B        |L1.18260|
                  |L1.18246|
004746  2301              MOVS     r3,#1                 ;6066
004748  2203              MOVS     r2,#3                 ;6066
00474a  210b              MOVS     r1,#0xb               ;6066
00474c  a0ba              ADR      r0,|L1.19000|
00474e  f7fffffe          BL       snmp_trap_send
004752  e77b              B        |L1.17996|
                  |L1.18260|
004754  2301              MOVS     r3,#1                 ;6071
004756  2204              MOVS     r2,#4                 ;6071
004758  210b              MOVS     r1,#0xb               ;6071
00475a  a0bc              ADR      r0,|L1.19020|
00475c  f7fffffe          BL       snmp_trap_send
004760  e784              B        |L1.18028|
004762  e7ff              B        |L1.18276|
                  |L1.18276|
004764  2301              MOVS     r3,#1                 ;6076
004766  2205              MOVS     r2,#5                 ;6076
004768  210b              MOVS     r1,#0xb               ;6076
00476a  a0bd              ADR      r0,|L1.19040|
00476c  f7fffffe          BL       snmp_trap_send
004770  e78c              B        |L1.18060|
                  |L1.18290|
004772  2301              MOVS     r3,#1                 ;6081
004774  2206              MOVS     r2,#6                 ;6081
004776  210b              MOVS     r1,#0xb               ;6081
004778  a0be              ADR      r0,|L1.19060|
00477a  f7fffffe          BL       snmp_trap_send
00477e  e795              B        |L1.18092|
                  |L1.18304|
004780  2301              MOVS     r3,#1                 ;6086
004782  2207              MOVS     r2,#7                 ;6086
004784  210b              MOVS     r1,#0xb               ;6086
004786  a0c0              ADR      r0,|L1.19080|
004788  f7fffffe          BL       snmp_trap_send
00478c  e79e              B        |L1.18124|
                  |L1.18318|
00478e  2301              MOVS     r3,#1                 ;6091
004790  2208              MOVS     r2,#8                 ;6091
004792  210b              MOVS     r1,#0xb               ;6091
004794  a0c1              ADR      r0,|L1.19100|
004796  f7fffffe          BL       snmp_trap_send
00479a  e7a7              B        |L1.18156|
                  |L1.18332|
00479c  2301              MOVS     r3,#1                 ;6096
00479e  2209              MOVS     r2,#9                 ;6096
0047a0  210b              MOVS     r1,#0xb               ;6096
0047a2  a0c3              ADR      r0,|L1.19120|
0047a4  f7fffffe          BL       snmp_trap_send
0047a8  e7b3              B        |L1.18194|
;;;6105   
                          ENDP

                  bat_hndl PROC
;;;6106   //-----------------------------------------------
;;;6107   void bat_hndl(void)
0047aa  b570              PUSH     {r4-r6,lr}
;;;6108   {
;;;6109   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;6110   	{
;;;6111   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;6112   		{
;;;6113   		char i;
;;;6114   		for(i=0;i<2;i++)
;;;6115   			{
;;;6116   			if(mess_data[1]&(1<<i))
;;;6117   				{
;;;6118   				bat[i]._cnt_to_block=0;
;;;6119        			bat[i]._rel_stat=0;
;;;6120        			}
;;;6121   			}
;;;6122   		}
;;;6123   	}
;;;6124   if(mess_find(_MESS_BAT_MASK_OFF))
;;;6125   	{		
;;;6126   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;6127   		{
;;;6128   		char i;
;;;6129   		for(i=0;i<2;i++)
;;;6130   			{
;;;6131   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;6132   				{
;;;6133   				bat[i]._cnt_to_block=20;
;;;6134   				bat[i]._rel_stat=1;
;;;6135        			}
;;;6136   			}
;;;6137   		
;;;6138   		}		
;;;6139   	}*/
;;;6140   
;;;6141   if(mess_find_unvol(MESS2BAT_HNDL))
0047ac  20c8              MOVS     r0,#0xc8
0047ae  f7fffffe          BL       mess_find_unvol
;;;6142   	{ 
;;;6143   	char i;
;;;6144   	
;;;6145   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;6146   		{
;;;6147   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6148   			{
;;;6149   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
0047b2  49c4              LDR      r1,|L1.19140|
0047b4  2200              MOVS     r2,#0                 ;6147
0047b6  b3a8              CBZ      r0,|L1.18468|
0047b8  4bc3              LDR      r3,|L1.19144|
;;;6150   			}
;;;6151   		}
;;;6152   
;;;6153   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;6154   		{
;;;6155   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6156   			{
;;;6157   			if(mess_data[1]&(1<<i))
0047ba  2401              MOVS     r4,#1
0047bc  6818              LDR      r0,[r3,#0]            ;6145  ; mess_data
0047be  28c9              CMP      r0,#0xc9              ;6145
0047c0  d01c              BEQ      |L1.18428|
0047c2  28ca              CMP      r0,#0xca              ;6153
0047c4  d02f              BEQ      |L1.18470|
;;;6158   				{
;;;6159   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;6160   				}
;;;6161   			else bat[i]._cnt_to_block=0;
;;;6162   			}
;;;6163   		}
;;;6164   	else 
;;;6165   	 	{
;;;6166   		for(i=0;i<MAX_NUM_OF_BAT;i++)
0047c6  4610              MOV      r0,r2
                  |L1.18376|
;;;6167   			{
;;;6168   			bat[i]._cnt_to_block=0;
0047c8  eb000340          ADD      r3,r0,r0,LSL #1
0047cc  eb031300          ADD      r3,r3,r0,LSL #4
0047d0  f8012023          STRB     r2,[r1,r3,LSL #2]
0047d4  f1000001          ADD      r0,r0,#1              ;6166
0047d8  b2c0              UXTB     r0,r0                 ;6166
0047da  2802              CMP      r0,#2                 ;6166
0047dc  d3f4              BCC      |L1.18376|
                  |L1.18398|
;;;6169   			}
;;;6170   
;;;6171   		}
;;;6172   	for(i=0;i<MAX_NUM_OF_BAT;i++)
0047de  f04f0000          MOV      r0,#0
                  |L1.18402|
;;;6173   		{
;;;6174   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
0047e2  eb000340          ADD      r3,r0,r0,LSL #1
0047e6  eb031300          ADD      r3,r3,r0,LSL #4
0047ea  f8115023          LDRB     r5,[r1,r3,LSL #2]
0047ee  2d14              CMP      r5,#0x14
0047f0  d939              BLS      |L1.18534|
0047f2  eb010383          ADD      r3,r1,r3,LSL #2
0047f6  f883403c          STRB     r4,[r3,#0x3c]
0047fa  e038              B        |L1.18542|
                  |L1.18428|
0047fc  f04f0000          MOV      r0,#0                 ;6147
                  |L1.18432|
004800  eb000340          ADD      r3,r0,r0,LSL #1       ;6149
004804  eb031500          ADD      r5,r3,r0,LSL #4       ;6149
004808  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6149
00480c  2b32              CMP      r3,#0x32              ;6149
00480e  d203              BCS      |L1.18456|
004810  f1030301          ADD      r3,r3,#1              ;6149
004814  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6149
                  |L1.18456|
004818  f1000001          ADD      r0,r0,#1              ;6147
00481c  b2c0              UXTB     r0,r0                 ;6147
00481e  2802              CMP      r0,#2                 ;6147
004820  d3ee              BCC      |L1.18432|
004822  e7dc              B        |L1.18398|
                  |L1.18468|
004824  e029              B        |L1.18554|
                  |L1.18470|
004826  f04f0000          MOV      r0,#0                 ;6155
00482a  685e              LDR      r6,[r3,#4]            ;6157
                  |L1.18476|
00482c  fa04f300          LSL      r3,r4,r0              ;6157
004830  421e              TST      r6,r3                 ;6157
004832  d00c              BEQ      |L1.18510|
004834  eb000340          ADD      r3,r0,r0,LSL #1       ;6159
004838  eb031500          ADD      r5,r3,r0,LSL #4       ;6159
00483c  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6159
004840  2b32              CMP      r3,#0x32              ;6159
004842  d20a              BCS      |L1.18522|
004844  f1030301          ADD      r3,r3,#1              ;6159
004848  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6159
00484c  e005              B        |L1.18522|
                  |L1.18510|
00484e  eb000340          ADD      r3,r0,r0,LSL #1       ;6161
004852  eb031300          ADD      r3,r3,r0,LSL #4       ;6161
004856  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6161
                  |L1.18522|
00485a  f1000001          ADD      r0,r0,#1              ;6155
00485e  b2c0              UXTB     r0,r0                 ;6155
004860  2802              CMP      r0,#2                 ;6155
004862  d3e3              BCC      |L1.18476|
004864  e7bb              B        |L1.18398|
                  |L1.18534|
;;;6175   		else bat[i]._rel_stat=0;
004866  eb010383          ADD      r3,r1,r3,LSL #2
00486a  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.18542|
00486e  f1000001          ADD      r0,r0,#1              ;6172
004872  b2c0              UXTB     r0,r0                 ;6172
004874  2802              CMP      r0,#2                 ;6172
004876  d3b4              BCC      |L1.18402|
;;;6176   		}
;;;6177   
;;;6178   	}
;;;6179   
;;;6180   else 
;;;6181   	{
;;;6182   	char i;
;;;6183   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6184   		{
;;;6185   		bat[i]._cnt_to_block=0;
;;;6186   		bat[i]._rel_stat=0;
;;;6187   		}
;;;6188   
;;;6189   	}
;;;6190   
;;;6191   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;6192   	{
;;;6193   	if(PARAM_BAT_ON)
;;;6194   		{
;;;6195   		char i;
;;;6196   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6197   			{
;;;6198   			if(mess_data[1]&(1<<i))
;;;6199   				{
;;;6200   				bat[i]._cnt_to_block=0;
;;;6201   				bat[i]._rel_stat=0;
;;;6202   				}
;;;6203   			}
;;;6204   		}
;;;6205   	} */
;;;6206   }
004878  e754              B        |L1.18212|
                  |L1.18554|
00487a  f04f0000          MOV      r0,#0                 ;6183
                  |L1.18558|
00487e  eb000340          ADD      r3,r0,r0,LSL #1       ;6185
004882  eb031300          ADD      r3,r3,r0,LSL #4       ;6185
004886  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6185
00488a  eb010383          ADD      r3,r1,r3,LSL #2       ;6186
00488e  f883203c          STRB     r2,[r3,#0x3c]         ;6186
004892  f1000001          ADD      r0,r0,#1              ;6183
004896  b2c0              UXTB     r0,r0                 ;6183
004898  2802              CMP      r0,#2                 ;6183
00489a  d3f0              BCC      |L1.18558|
00489c  e742              B        |L1.18212|
;;;6207   
                          ENDP

                  klimat_hndl PROC
;;;6571   //-----------------------------------------------
;;;6572   void klimat_hndl(void)
00489e  e92d41f0          PUSH     {r4-r8,lr}
;;;6573   {
;;;6574   
;;;6575   
;;;6576   if(t_box>TBOXMAX)
0048a2  4d8a              LDR      r5,|L1.19148|
0048a4  488a              LDR      r0,|L1.19152|
;;;6577   	{
;;;6578   	av_tbox_cnt++;
0048a6  4c8b              LDR      r4,|L1.19156|
0048a8  f9b51000          LDRSH    r1,[r5,#0]            ;6576  ; t_box
0048ac  f9b02000          LDRSH    r2,[r0,#0]            ;6576  ; TBOXMAX
0048b0  f9b40000          LDRSH    r0,[r4,#0]
0048b4  4291              CMP      r1,r2                 ;6576
0048b6  dd03              BLE      |L1.18624|
0048b8  f1000001          ADD      r0,r0,#1
0048bc  8020              STRH     r0,[r4,#0]
0048be  e003              B        |L1.18632|
                  |L1.18624|
;;;6579   	} 
;;;6580   else if(t_box<TBOXMAX)
0048c0  da02              BGE      |L1.18632|
;;;6581   	{
;;;6582   	av_tbox_cnt--;
0048c2  f1a00001          SUB      r0,r0,#1
0048c6  8020              STRH     r0,[r4,#0]
                  |L1.18632|
;;;6583   	}
;;;6584   gran(&av_tbox_cnt,0,6);
0048c8  2206              MOVS     r2,#6
0048ca  2100              MOVS     r1,#0
0048cc  4881              LDR      r0,|L1.19156|
0048ce  f7fffffe          BL       gran
;;;6585   
;;;6586   if(av_tbox_cnt>5)
0048d2  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;6587   	{
;;;6588   	av_tbox_stat=atsON;
0048d6  4980              LDR      r1,|L1.19160|
0048d8  2601              MOVS     r6,#1
0048da  2805              CMP      r0,#5                 ;6586
0048dc  dd00              BLE      |L1.18656|
0048de  700e              STRB     r6,[r1,#0]
                  |L1.18656|
0048e0  2400              MOVS     r4,#0                 ;6584
;;;6589   	}
;;;6590   if(av_tbox_cnt<1)
0048e2  2801              CMP      r0,#1
0048e4  da00              BGE      |L1.18664|
;;;6591   	{
;;;6592   	av_tbox_stat=atsOFF;
0048e6  700c              STRB     r4,[r1,#0]
                  |L1.18664|
;;;6593   	}
;;;6594   
;;;6595   if(t_box<(TBOXREG-2))
0048e8  497c              LDR      r1,|L1.19164|
0048ea  f9b50000          LDRSH    r0,[r5,#0]  ; t_box
;;;6596   	{
;;;6597   	if(t_box_cnt<30)
0048ee  4a7c              LDR      r2,|L1.19168|
0048f0  f9b11000          LDRSH    r1,[r1,#0]            ;6595  ; TBOXREG
;;;6598   		{
;;;6599   		t_box_cnt++;
;;;6600   		if(t_box_cnt>=30)
;;;6601   			{
;;;6602   			main_vent_pos--;
0048f4  4f7b              LDR      r7,|L1.19172|
0048f6  1e8b              SUBS     r3,r1,#2              ;6595
0048f8  4298              CMP      r0,r3                 ;6595
0048fa  da0f              BGE      |L1.18716|
0048fc  f9921000          LDRSB    r1,[r2,#0]            ;6597  ; t_box_cnt
004900  291e              CMP      r1,#0x1e              ;6597
004902  da0a              BGE      |L1.18714|
004904  f1010101          ADD      r1,r1,#1              ;6599
004908  b249              SXTB     r1,r1                 ;6599
00490a  7011              STRB     r1,[r2,#0]            ;6599
00490c  291e              CMP      r1,#0x1e              ;6600
00490e  db04              BLT      |L1.18714|
004910  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
004912  f1a10101          SUB      r1,r1,#1
004916  8039              STRH     r1,[r7,#0]
;;;6603   			t_box_cnt=0;
004918  7014              STRB     r4,[r2,#0]
                  |L1.18714|
00491a  e0e6              B        |L1.19178|
                  |L1.18716|
;;;6604   			}
;;;6605   		}
;;;6606   	}
;;;6607   else if(t_box>(TBOXREG))
00491c  4288              CMP      r0,r1
00491e  dd0f              BLE      |L1.18752|
;;;6608   	{
;;;6609   	if(t_box_cnt<30)
004920  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
004924  291e              CMP      r1,#0x1e
004926  da0a              BGE      |L1.18750|
;;;6610   		{
;;;6611   		t_box_cnt++;
004928  f1010101          ADD      r1,r1,#1
00492c  b249              SXTB     r1,r1
00492e  7011              STRB     r1,[r2,#0]
;;;6612   		if(t_box_cnt>=30)
004930  291e              CMP      r1,#0x1e
004932  db04              BLT      |L1.18750|
;;;6613   			{
;;;6614   			main_vent_pos++;
004934  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
004936  f1010101          ADD      r1,r1,#1
00493a  8039              STRH     r1,[r7,#0]
;;;6615   			t_box_cnt=0;
00493c  7014              STRB     r4,[r2,#0]
                  |L1.18750|
00493e  e0d4              B        |L1.19178|
                  |L1.18752|
004940  e0d2              B        |L1.19176|
004942  0000              DCW      0x0000
                  |L1.18756|
                          DCD      net_av
                  |L1.18760|
                          DCD      ||area_number.18||
                  |L1.18764|
                          DCD      eb2_data_short
                  |L1.18768|
                          DCD      avt_stat
                  |L1.18772|
                          DCD      avt_stat_old
                  |L1.18776|
                          DCD      NUMAVT
                  |L1.18780|
00495c  4176746f          DCB      "Avtomat #1 is OFF",0
004960  6d617420
004964  23312069
004968  73204f46
00496c  4600    
00496e  00                DCB      0
00496f  00                DCB      0
                  |L1.18800|
004970  4176746f          DCB      "Avtomat #2 is OFF",0
004974  6d617420
004978  23322069
00497c  73204f46
004980  4600    
004982  00                DCB      0
004983  00                DCB      0
                  |L1.18820|
004984  4176746f          DCB      "Avtomat #3 is OFF",0
004988  6d617420
00498c  23332069
004990  73204f46
004994  4600    
004996  00                DCB      0
004997  00                DCB      0
                  |L1.18840|
004998  4176746f          DCB      "Avtomat #4 is OFF",0
00499c  6d617420
0049a0  23342069
0049a4  73204f46
0049a8  4600    
0049aa  00                DCB      0
0049ab  00                DCB      0
                  |L1.18860|
0049ac  4176746f          DCB      "Avtomat #5 is OFF",0
0049b0  6d617420
0049b4  23352069
0049b8  73204f46
0049bc  4600    
0049be  00                DCB      0
0049bf  00                DCB      0
                  |L1.18880|
0049c0  4176746f          DCB      "Avtomat #6 is OFF",0
0049c4  6d617420
0049c8  23362069
0049cc  73204f46
0049d0  4600    
0049d2  00                DCB      0
0049d3  00                DCB      0
                  |L1.18900|
0049d4  4176746f          DCB      "Avtomat #7 is OFF",0
0049d8  6d617420
0049dc  23372069
0049e0  73204f46
0049e4  4600    
0049e6  00                DCB      0
0049e7  00                DCB      0
                  |L1.18920|
0049e8  4176746f          DCB      "Avtomat #8 is OFF",0
0049ec  6d617420
0049f0  23382069
0049f4  73204f46
0049f8  4600    
0049fa  00                DCB      0
0049fb  00                DCB      0
                  |L1.18940|
0049fc  4176746f          DCB      "Avtomat #9 is OFF",0
004a00  6d617420
004a04  23392069
004a08  73204f46
004a0c  4600    
004a0e  00                DCB      0
004a0f  00                DCB      0
                  |L1.18960|
004a10  4176746f          DCB      "Avtomat #1 is ON ",0
004a14  6d617420
004a18  23312069
004a1c  73204f4e
004a20  2000    
004a22  00                DCB      0
004a23  00                DCB      0
                  |L1.18980|
004a24  4176746f          DCB      "Avtomat #2 is ON ",0
004a28  6d617420
004a2c  23322069
004a30  73204f4e
004a34  2000    
004a36  00                DCB      0
004a37  00                DCB      0
                  |L1.19000|
004a38  4176746f          DCB      "Avtomat #3 is ON ",0
004a3c  6d617420
004a40  23332069
004a44  73204f4e
004a48  2000    
004a4a  00                DCB      0
004a4b  00                DCB      0
                  |L1.19020|
004a4c  4176746f          DCB      "Avtomat #4 is ON ",0
004a50  6d617420
004a54  23342069
004a58  73204f4e
004a5c  2000    
004a5e  00                DCB      0
004a5f  00                DCB      0
                  |L1.19040|
004a60  4176746f          DCB      "Avtomat #5 is ON ",0
004a64  6d617420
004a68  23352069
004a6c  73204f4e
004a70  2000    
004a72  00                DCB      0
004a73  00                DCB      0
                  |L1.19060|
004a74  4176746f          DCB      "Avtomat #6 is ON ",0
004a78  6d617420
004a7c  23362069
004a80  73204f4e
004a84  2000    
004a86  00                DCB      0
004a87  00                DCB      0
                  |L1.19080|
004a88  4176746f          DCB      "Avtomat #7 is ON ",0
004a8c  6d617420
004a90  23372069
004a94  73204f4e
004a98  2000    
004a9a  00                DCB      0
004a9b  00                DCB      0
                  |L1.19100|
004a9c  4176746f          DCB      "Avtomat #8 is ON ",0
004aa0  6d617420
004aa4  23382069
004aa8  73204f4e
004aac  2000    
004aae  00                DCB      0
004aaf  00                DCB      0
                  |L1.19120|
004ab0  4176746f          DCB      "Avtomat #9 is ON ",0
004ab4  6d617420
004ab8  23392069
004abc  73204f4e
004ac0  2000    
004ac2  00                DCB      0
004ac3  00                DCB      0
                  |L1.19140|
                          DCD      bat
                  |L1.19144|
                          DCD      mess_data
                  |L1.19148|
                          DCD      t_box
                  |L1.19152|
                          DCD      TBOXMAX
                  |L1.19156|
                          DCD      av_tbox_cnt
                  |L1.19160|
                          DCD      av_tbox_stat
                  |L1.19164|
                          DCD      TBOXREG
                  |L1.19168|
                          DCD      t_box_cnt
                  |L1.19172|
                          DCD      main_vent_pos
                  |L1.19176|
;;;6616   			}
;;;6617   		}
;;;6618   	}
;;;6619   else
;;;6620   	{
;;;6621   	t_box_cnt=0;
004ae8  7014              STRB     r4,[r2,#0]
                  |L1.19178|
;;;6622   	}
;;;6623   
;;;6624   #ifndef UKU_KONTUR
;;;6625   if(t_box>TBOXVENTMAX)gran(&main_vent_pos,0,20); 
004aea  49ff              LDR      r1,|L1.20200|
004aec  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXVENTMAX
004af0  4288              CMP      r0,r1
004af2  dd05              BLE      |L1.19200|
004af4  2214              MOVS     r2,#0x14
004af6  2100              MOVS     r1,#0
004af8  48fc              LDR      r0,|L1.20204|
004afa  f7fffffe          BL       gran
004afe  e007              B        |L1.19216|
                  |L1.19200|
;;;6626   else gran(&main_vent_pos,0,pos_vent+9);
004b00  48fb              LDR      r0,|L1.20208|
004b02  2100              MOVS     r1,#0
004b04  8800              LDRH     r0,[r0,#0]  ; pos_vent
004b06  3009              ADDS     r0,r0,#9
004b08  b202              SXTH     r2,r0
004b0a  48f8              LDR      r0,|L1.20204|
004b0c  f7fffffe          BL       gran
                  |L1.19216|
;;;6627   
;;;6628   if((mess_find_unvol(MESS2VENT_HNDL))&&(mess_data[0]==PARAM_VENT_CB))
004b10  20f0              MOVS     r0,#0xf0
004b12  f7fffffe          BL       mess_find_unvol
004b16  b128              CBZ      r0,|L1.19236|
004b18  48f6              LDR      r0,|L1.20212|
004b1a  6801              LDR      r1,[r0,#0]  ; mess_data
004b1c  29f1              CMP      r1,#0xf1
004b1e  d101              BNE      |L1.19236|
;;;6629   	{
;;;6630   	main_vent_pos=mess_data[1];
004b20  6840              LDR      r0,[r0,#4]  ; mess_data
004b22  8038              STRH     r0,[r7,#0]
                  |L1.19236|
;;;6631   	}
;;;6632   
;;;6633   
;;;6634   if(main_vent_pos<=1)mixer_vent_stat=mvsON;
004b24  f9b71000          LDRSH    r1,[r7,#0]  ; main_vent_pos
004b28  48f3              LDR      r0,|L1.20216|
004b2a  2901              CMP      r1,#1
004b2c  dc01              BGT      |L1.19250|
004b2e  7006              STRB     r6,[r0,#0]
004b30  e000              B        |L1.19252|
                  |L1.19250|
;;;6635   else mixer_vent_stat=mvsOFF;
004b32  7004              STRB     r4,[r0,#0]
                  |L1.19252|
;;;6636   #endif
;;;6637   
;;;6638   #ifdef UKU_KONTUR
;;;6639   
;;;6640   if(t_box>TBOXVENTON) t_box_vent_on_cnt++;
;;;6641   else if(t_box<TBOXVENTOFF) t_box_vent_on_cnt--;
;;;6642   gran(&t_box_vent_on_cnt,0,10);
;;;6643   
;;;6644   if(t_box_vent_on_cnt>9) vent_stat_k=vsON;
;;;6645   else if(t_box_vent_on_cnt<1) vent_stat_k=vsOFF;
;;;6646   
;;;6647   if(t_box<TBOXWARMON) t_box_warm_on_cnt++;
;;;6648   else if(t_box>TBOXWARMOFF) t_box_warm_on_cnt--;
;;;6649   gran(&t_box_warm_on_cnt,0,10);
;;;6650   
;;;6651   if(t_box_warm_on_cnt>9) warm_stat_k=wsON;
;;;6652   else if(t_box_warm_on_cnt<1) warm_stat_k=wsOFF;
;;;6653   
;;;6654   #endif
;;;6655   
;;;6656   if((TBATDISABLE>=50) && (TBATDISABLE<=90))
004b34  48f1              LDR      r0,|L1.20220|
;;;6657   	{
;;;6658   	if(t_box>TBATDISABLE)
;;;6659   		{
;;;6660   		tbatdisable_cnt++;
;;;6661   		}
;;;6662   	if(t_box<TBATENABLE)
;;;6663   		{
;;;6664   		tbatdisable_cnt--;
;;;6665   		}
;;;6666   	gran(&tbatdisable_cnt,0,6);
;;;6667   
;;;6668   	if(tbatdisable_cnt>5)
;;;6669   		{
;;;6670   		tbatdisable_stat=tbdsOFF;
004b36  f8df83c8          LDR      r8,|L1.20224|
004b3a  f9b00000          LDRSH    r0,[r0,#0]            ;6656  ; TBATDISABLE
004b3e  f1a00132          SUB      r1,r0,#0x32           ;6656
004b42  2928              CMP      r1,#0x28              ;6656
004b44  d821              BHI      |L1.19338|
004b46  f9b51000          LDRSH    r1,[r5,#0]            ;6658  ; t_box
004b4a  4fee              LDR      r7,|L1.20228|
004b4c  4281              CMP      r1,r0                 ;6658
004b4e  dd03              BLE      |L1.19288|
004b50  8838              LDRH     r0,[r7,#0]            ;6660  ; tbatdisable_cnt
004b52  f1000001          ADD      r0,r0,#1              ;6660
004b56  8038              STRH     r0,[r7,#0]            ;6660
                  |L1.19288|
004b58  48eb              LDR      r0,|L1.20232|
004b5a  f9b00000          LDRSH    r0,[r0,#0]            ;6662  ; TBATENABLE
004b5e  4281              CMP      r1,r0                 ;6662
004b60  da03              BGE      |L1.19306|
004b62  8838              LDRH     r0,[r7,#0]            ;6664  ; tbatdisable_cnt
004b64  f1a00001          SUB      r0,r0,#1              ;6664
004b68  8038              STRH     r0,[r7,#0]            ;6664
                  |L1.19306|
004b6a  2206              MOVS     r2,#6                 ;6666
004b6c  2100              MOVS     r1,#0                 ;6666
004b6e  48e5              LDR      r0,|L1.20228|
004b70  f7fffffe          BL       gran
004b74  f9b70000          LDRSH    r0,[r7,#0]            ;6668  ; tbatdisable_cnt
004b78  2805              CMP      r0,#5                 ;6668
004b7a  dd01              BLE      |L1.19328|
004b7c  f8886000          STRB     r6,[r8,#0]
                  |L1.19328|
;;;6671   		}
;;;6672   	if(tbatdisable_cnt<1)
004b80  2801              CMP      r0,#1
004b82  da04              BGE      |L1.19342|
;;;6673   		{
;;;6674   		tbatdisable_stat=tbdsON;
004b84  f8884000          STRB     r4,[r8,#0]
004b88  e001              B        |L1.19342|
                  |L1.19338|
;;;6675   		}
;;;6676   	}
;;;6677   else 
;;;6678   	{
;;;6679   	tbatdisable_stat=tbdsON;
004b8a  f8884000          STRB     r4,[r8,#0]
                  |L1.19342|
;;;6680   	}
;;;6681   
;;;6682   if((TLOADDISABLE>=50) && (TLOADDISABLE<=80))
004b8e  48df              LDR      r0,|L1.20236|
;;;6683   	{
;;;6684   	if(t_box>TLOADDISABLE)
;;;6685   		{
;;;6686   		tloaddisable_cnt++;
;;;6687   		}
;;;6688   	if(t_box<TLOADENABLE)
;;;6689   		{
;;;6690   		tloaddisable_cnt--;
;;;6691   		}
;;;6692   	gran(&tloaddisable_cnt,0,6);
;;;6693   
;;;6694   	if(tloaddisable_cnt>5)
;;;6695   		{
;;;6696   		tloaddisable_stat=tldsOFF;
004b90  4fdf              LDR      r7,|L1.20240|
004b92  f9b00000          LDRSH    r0,[r0,#0]            ;6682  ; TLOADDISABLE
004b96  f1a00132          SUB      r1,r0,#0x32           ;6682
004b9a  291e              CMP      r1,#0x1e              ;6682
004b9c  d81f              BHI      |L1.19422|
004b9e  f9b51000          LDRSH    r1,[r5,#0]            ;6684  ; t_box
004ba2  4ddc              LDR      r5,|L1.20244|
004ba4  4281              CMP      r1,r0                 ;6684
004ba6  dd03              BLE      |L1.19376|
004ba8  8828              LDRH     r0,[r5,#0]            ;6686  ; tloaddisable_cnt
004baa  f1000001          ADD      r0,r0,#1              ;6686
004bae  8028              STRH     r0,[r5,#0]            ;6686
                  |L1.19376|
004bb0  48d9              LDR      r0,|L1.20248|
004bb2  f9b00000          LDRSH    r0,[r0,#0]            ;6688  ; TLOADENABLE
004bb6  4281              CMP      r1,r0                 ;6688
004bb8  da03              BGE      |L1.19394|
004bba  8828              LDRH     r0,[r5,#0]            ;6690  ; tloaddisable_cnt
004bbc  f1a00001          SUB      r0,r0,#1              ;6690
004bc0  8028              STRH     r0,[r5,#0]            ;6690
                  |L1.19394|
004bc2  2206              MOVS     r2,#6                 ;6692
004bc4  2100              MOVS     r1,#0                 ;6692
004bc6  48d3              LDR      r0,|L1.20244|
004bc8  f7fffffe          BL       gran
004bcc  f9b50000          LDRSH    r0,[r5,#0]            ;6694  ; tloaddisable_cnt
004bd0  2805              CMP      r0,#5                 ;6694
004bd2  dd00              BLE      |L1.19414|
004bd4  703e              STRB     r6,[r7,#0]
                  |L1.19414|
;;;6697   		}
;;;6698   	if(tloaddisable_cnt<1)
004bd6  2801              CMP      r0,#1
004bd8  da00              BGE      |L1.19420|
;;;6699   		{
;;;6700   		tloaddisable_stat=tldsON;
004bda  703c              STRB     r4,[r7,#0]
                  |L1.19420|
;;;6701   		}
;;;6702   	}
;;;6703   else 
;;;6704   	{
;;;6705   	tloaddisable_stat=tldsON;
;;;6706   	}
;;;6707   
;;;6708   }
004bdc  e4ec              B        |L1.17848|
                  |L1.19422|
004bde  703c              STRB     r4,[r7,#0]            ;6705
004be0  e4ea              B        |L1.17848|
;;;6709   #endif
                          ENDP

                  bat_drv PROC
;;;6845   //-----------------------------------------------
;;;6846   void bat_drv(char in)
004be2  e92d4ffe          PUSH     {r1-r11,lr}
;;;6847   {
004be6  4605              MOV      r5,r0
;;;6848   unsigned short /*tempUS,*/tempUS_;
;;;6849   unsigned long tempUL,tempUL_;
;;;6850   unsigned short b_zar;
;;;6851   //static unsigned short time_cnt[2];
;;;6852   
;;;6853   
;;;6854   
;;;6855   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004be8  49cc              LDR      r1,|L1.20252|
004bea  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004bee  b118              CBZ      r0,|L1.19448|
004bf0  f1a00001          SUB      r0,r0,#1
004bf4  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.19448|
;;;6856   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004bf8  4ac8              LDR      r2,|L1.20252|
004bfa  1d12              ADDS     r2,r2,#4
004bfc  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004c00  b118              CBZ      r0,|L1.19466|
004c02  f1a00001          SUB      r0,r0,#1
004c06  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.19466|
;;;6857   
;;;6858   
;;;6859   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004c0a  eb050045          ADD      r0,r5,r5,LSL #1
004c0e  4bc4              LDR      r3,|L1.20256|
004c10  eb001005          ADD      r0,r0,r5,LSL #4
004c14  eb030480          ADD      r4,r3,r0,LSL #2
004c18  4bc2              LDR      r3,|L1.20260|
004c1a  9002              STR      r0,[sp,#8]
004c1c  f9b40008          LDRSH    r0,[r4,#8]
004c20  f9b33000          LDRSH    r3,[r3,#0]  ; IZMAX
004c24  f04f0b64          MOV      r11,#0x64
004c28  4298              CMP      r0,r3
004c2a  dd01              BLE      |L1.19504|
004c2c  f821b015          STRH     r11,[r1,r5,LSL #1]
                  |L1.19504|
;;;6860   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004c30  2800              CMP      r0,#0
004c32  da01              BGE      |L1.19512|
004c34  f822b015          STRH     r11,[r2,r5,LSL #1]
                  |L1.19512|
;;;6861   
;;;6862   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;6863        {
;;;6864        if(!cntrl_stat_blok_cnt_)
004c38  48b8              LDR      r0,|L1.20252|
004c3a  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;6862
004c3e  38ac              SUBS     r0,r0,#0xac
004c40  2700              MOVS     r7,#0
004c42  b14b              CBZ      r3,|L1.19544|
004c44  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;6862
004c48  b133              CBZ      r3,|L1.19544|
004c4a  f8b03070          LDRH     r3,[r0,#0x70]  ; cntrl_stat_blok_cnt_
004c4e  b1a3              CBZ      r3,|L1.19578|
;;;6865             {
;;;6866             cntrl_stat_blok_cnt_=600; 
;;;6867             cntrl_stat_blok_cnt_plus[in]=0;
;;;6868             cntrl_stat_blok_cnt_minus[in]=0;
;;;6869             }
;;;6870        else cntrl_stat_blok_cnt=3000;
004c50  f64031b8          MOV      r1,#0xbb8
004c54  f8a0106e          STRH     r1,[r0,#0x6e]
                  |L1.19544|
;;;6871        }
;;;6872   cntrl_stat_blok_cnt=0;
004c58  f8a0706e          STRH     r7,[r0,#0x6e]
;;;6873   
;;;6874   if(++(bat[in]._time_cnt)>=10)
004c5c  f894003e          LDRB     r0,[r4,#0x3e]
004c60  1c40              ADDS     r0,r0,#1
004c62  b2c0              UXTB     r0,r0
004c64  f884003e          STRB     r0,[r4,#0x3e]
004c68  280a              CMP      r0,#0xa
004c6a  d301              BCC      |L1.19568|
;;;6875   	{
;;;6876   	bat[in]._time_cnt=0;
004c6c  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.19568|
;;;6877   	//bat[in]._zar_cnt++;
;;;6878   	}
;;;6879   
;;;6880   if(main_10Hz_cnt==50)
004c70  4ead              LDR      r6,|L1.20264|
004c72  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
004c74  2832              CMP      r0,#0x32
004c76  d009              BEQ      |L1.19596|
004c78  e017              B        |L1.19626|
                  |L1.19578|
004c7a  f44f7316          MOV      r3,#0x258             ;6866
004c7e  f8a03070          STRH     r3,[r0,#0x70]         ;6866
004c82  f8217015          STRH     r7,[r1,r5,LSL #1]     ;6867
004c86  f8227015          STRH     r7,[r2,r5,LSL #1]     ;6868
004c8a  e7e5              B        |L1.19544|
                  |L1.19596|
;;;6881   	{
;;;6882   	if(!bat[in]._rel_stat)
004c8c  f894003c          LDRB     r0,[r4,#0x3c]
004c90  b958              CBNZ     r0,|L1.19626|
;;;6883   		{
;;;6884   		
;;;6885   		if(bat[in]._Ub<80) 
004c92  f9b40002          LDRSH    r0,[r4,#2]
004c96  2850              CMP      r0,#0x50
004c98  da07              BGE      |L1.19626|
;;;6886   			{
;;;6887   			
;;;6888   			if(!(bat[in]._av&1))
004c9a  f894003d          LDRB     r0,[r4,#0x3d]
004c9e  07c0              LSLS     r0,r0,#31
004ca0  d103              BNE      |L1.19626|
;;;6889   				{
;;;6890   				avar_bat_hndl(in,1);
004ca2  2101              MOVS     r1,#1
004ca4  4628              MOV      r0,r5
004ca6  f7fffffe          BL       avar_bat_hndl
                  |L1.19626|
;;;6891   				//if(in==0)plazma_bat++;
;;;6892   				}
;;;6893   			}				
;;;6894   
;;;6895   		}
;;;6896   	}
;;;6897   
;;;6898   if(main_10Hz_cnt>200)
004caa  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;6899   	{
;;;6900   	if(abs(bat[in]._Ib)>IKB) 
004cae  4e9f              LDR      r6,|L1.20268|
004cb0  28c8              CMP      r0,#0xc8              ;6898
004cb2  dd0f              BLE      |L1.19668|
004cb4  f9b40008          LDRSH    r0,[r4,#8]
004cb8  f7fffffe          BL       abs
004cbc  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004cc0  4288              CMP      r0,r1
004cc2  dd07              BLE      |L1.19668|
;;;6901   		{
;;;6902   		if((bat[in]._av&1))avar_bat_hndl(in,0);
004cc4  f894003d          LDRB     r0,[r4,#0x3d]
004cc8  07c0              LSLS     r0,r0,#31
004cca  d003              BEQ      |L1.19668|
004ccc  2100              MOVS     r1,#0
004cce  4628              MOV      r0,r5
004cd0  f7fffffe          BL       avar_bat_hndl
                  |L1.19668|
;;;6903   		}
;;;6904   	}
;;;6905   
;;;6906   #ifdef APSENERGIA
;;;6907   //if(bat[in]._Ib>(-IKB))
;;;6908   
;;;6909   
;;;6910   #endif
;;;6911   
;;;6912   if(bat[in]._Ib>(-IKB))
004cd4  4895              LDR      r0,|L1.20268|
004cd6  f9b41008          LDRSH    r1,[r4,#8]
004cda  f9b00000          LDRSH    r0,[r0,#0]  ; IKB
004cde  4240              RSBS     r0,r0,#0
004ce0  4281              CMP      r1,r0
004ce2  dd14              BLE      |L1.19726|
;;;6913   	{
;;;6914   	if(bat[in]._cnt_wrk<10)
004ce4  7b60              LDRB     r0,[r4,#0xd]
004ce6  280a              CMP      r0,#0xa
004ce8  d20d              BCS      |L1.19718|
;;;6915   		{
;;;6916   		bat[in]._cnt_wrk++;
004cea  f1000001          ADD      r0,r0,#1
004cee  b2c0              UXTB     r0,r0
004cf0  7360              STRB     r0,[r4,#0xd]
;;;6917   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004cf2  280a              CMP      r0,#0xa
004cf4  d371              BCC      |L1.19930|
004cf6  7ba0              LDRB     r0,[r4,#0xe]
004cf8  2800              CMP      r0,#0
004cfa  d06e              BEQ      |L1.19930|
;;;6918   			{
;;;6919   			bat[in]._wrk=0;
004cfc  73a7              STRB     r7,[r4,#0xe]
;;;6920   			//beep_init(0x7L,'O');
;;;6921   			//wrk_mem_hndl(0);
;;;6922   			wrk_mem_hndl(in);
004cfe  4628              MOV      r0,r5
004d00  f7fffffe          BL       wrk_mem_hndl
004d04  e069              B        |L1.19930|
                  |L1.19718|
;;;6923   			//plazma++;
;;;6924   			}
;;;6925   		}
;;;6926   	else bat[in]._cnt_wrk=10;	
004d06  f04f000a          MOV      r0,#0xa
004d0a  7360              STRB     r0,[r4,#0xd]
004d0c  e065              B        |L1.19930|
                  |L1.19726|
;;;6927   	}	
;;;6928   
;;;6929   else if(bat[in]._Ib<(-IKB))
004d0e  da64              BGE      |L1.19930|
;;;6930   	{
;;;6931   	if(bat[in]._cnt_wrk)
004d10  7b60              LDRB     r0,[r4,#0xd]
004d12  b3f0              CBZ      r0,|L1.19858|
;;;6932   		{
;;;6933   		bat[in]._cnt_wrk--;
004d14  f1a00001          SUB      r0,r0,#1
004d18  b2c0              UXTB     r0,r0
004d1a  7360              STRB     r0,[r4,#0xd]
;;;6934   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
004d1c  bbc8              CBNZ     r0,|L1.19858|
004d1e  7ba0              LDRB     r0,[r4,#0xe]
004d20  bbb8              CBNZ     r0,|L1.19858|
;;;6935   			{
;;;6936   			bat[in]._wrk=1;
004d22  f04f0001          MOV      r0,#1
004d26  73a0              STRB     r0,[r4,#0xe]
;;;6937   
;;;6938   				{
;;;6939   				char temp;
;;;6940   				signed short temp_temp;
;;;6941   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
004d28  4881              LDR      r0,|L1.20272|
004d2a  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
004d2c  f1000001          ADD      r0,r0,#1
004d30  f0000007          AND      r0,r0,#7
004d34  eb040040          ADD      r0,r4,r0,LSL #1
004d38  8c00              LDRH     r0,[r0,#0x20]
004d3a  9000              STR      r0,[sp,#0]
;;;6942   			 
;;;6943   				temp=LPC_RTC->YEAR;
004d3c  4e7d              LDR      r6,|L1.20276|
004d3e  8bb0              LDRH     r0,[r6,#0x1c]
004d40  9001              STR      r0,[sp,#4]
;;;6944   				gran_char((signed char*)&temp,1,99);
004d42  f04f0263          MOV      r2,#0x63
004d46  f04f0101          MOV      r1,#1
004d4a  a801              ADD      r0,sp,#4
004d4c  f7fffffe          BL       gran_char
;;;6945   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
004d50  f104041c          ADD      r4,r4,#0x1c
004d54  f89d0004          LDRB     r0,[sp,#4]
004d58  7620              STRB     r0,[r4,#0x18]
;;;6946   			
;;;6947   				temp=LPC_RTC->MONTH;
004d5a  7e30              LDRB     r0,[r6,#0x18]
004d5c  9001              STR      r0,[sp,#4]
;;;6948   				gran_char((signed char*)&temp,1,12);
004d5e  f04f020c          MOV      r2,#0xc
004d62  f04f0101          MOV      r1,#1
004d66  a801              ADD      r0,sp,#4
004d68  f7fffffe          BL       gran_char
;;;6949   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
004d6c  f89d0004          LDRB     r0,[sp,#4]
004d70  7660              STRB     r0,[r4,#0x19]
;;;6950   			
;;;6951   				temp=LPC_RTC->DOM;
004d72  7b30              LDRB     r0,[r6,#0xc]
004d74  9001              STR      r0,[sp,#4]
;;;6952   				gran_char((signed char*)&temp,1,31);
004d76  221f              MOVS     r2,#0x1f
004d78  2101              MOVS     r1,#1
004d7a  a801              ADD      r0,sp,#4
004d7c  f7fffffe          BL       gran_char
;;;6953   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
004d80  f89d0004          LDRB     r0,[sp,#4]
004d84  76a0              STRB     r0,[r4,#0x1a]
;;;6954   				
;;;6955   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
004d86  f89d0000          LDRB     r0,[sp,#0]
004d8a  76e0              STRB     r0,[r4,#0x1b]
;;;6956   
;;;6957   				temp=LPC_RTC->HOUR;
004d8c  7a30              LDRB     r0,[r6,#8]
004d8e  9001              STR      r0,[sp,#4]
;;;6958   				gran_char((signed char*)&temp,0,23);
004d90  e000              B        |L1.19860|
                  |L1.19858|
004d92  e022              B        |L1.19930|
                  |L1.19860|
004d94  2217              MOVS     r2,#0x17
004d96  2100              MOVS     r1,#0
004d98  a801              ADD      r0,sp,#4
004d9a  f7fffffe          BL       gran_char
;;;6959   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
004d9e  f89d0004          LDRB     r0,[sp,#4]
004da2  7720              STRB     r0,[r4,#0x1c]
;;;6960                  	
;;;6961   				temp=LPC_RTC->MIN;
004da4  7930              LDRB     r0,[r6,#4]
004da6  9001              STR      r0,[sp,#4]
;;;6962   				gran_char((signed char*)&temp,0,59);
004da8  223b              MOVS     r2,#0x3b
004daa  2100              MOVS     r1,#0
004dac  a801              ADD      r0,sp,#4
004dae  f7fffffe          BL       gran_char
;;;6963   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
004db2  f89d0004          LDRB     r0,[sp,#4]
004db6  7760              STRB     r0,[r4,#0x1d]
;;;6964   	          
;;;6965   				temp=LPC_RTC->SEC;
004db8  7830              LDRB     r0,[r6,#0]
004dba  9001              STR      r0,[sp,#4]
;;;6966   				gran_char((signed char*)&temp,0,59);
004dbc  223b              MOVS     r2,#0x3b
004dbe  2100              MOVS     r1,#0
004dc0  a801              ADD      r0,sp,#4
004dc2  f7fffffe          BL       gran_char
;;;6967   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
004dc6  f89d0004          LDRB     r0,[sp,#4]
004dca  77a0              STRB     r0,[r4,#0x1e]
;;;6968   			
;;;6969   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
004dcc  f89d0001          LDRB     r0,[sp,#1]
004dd0  77e0              STRB     r0,[r4,#0x1f]
;;;6970   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004dd2  8027              STRH     r7,[r4,#0]
;;;6971   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
004dd4  8067              STRH     r7,[r4,#2]
004dd6  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.19930|
;;;6972   				}
;;;6973   	
;;;6974   			}
;;;6975   
;;;6976   		}
;;;6977   	else bat[in]._cnt_wrk=0;	 
;;;6978   	
;;;6979   	}					
;;;6980   
;;;6981   /*
;;;6982   if(Ibat>=(-IKB))
;;;6983   	{
;;;6984   	if(cnt_wrk<10)
;;;6985   		{
;;;6986   		cnt_wrk++;
;;;6987   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;6988   			{
;;;6989   			wrk=wrkOFF;
;;;6990   			//beep_init(0x7L,'O');
;;;6991   			wrk_mem_hndl(ibat_integr);
;;;6992   			}
;;;6993   		}
;;;6994   	else cnt_wrk=10;	
;;;6995   	}	
;;;6996   
;;;6997   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;6998   	{
;;;6999   	if(cnt_wrk)
;;;7000   		{
;;;7001   		cnt_wrk--;
;;;7002   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7003   			{
;;;7004   			char temp;
;;;7005   			signed short temp_temp;
;;;7006   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7007   			 
;;;7008   			wrk=wrkON;
;;;7009   			
;;;7010   			temp=_year;
;;;7011   			gran_char(&temp,1,99);
;;;7012   			*((char*)(&(wrk_date[0])))=temp;
;;;7013   			
;;;7014   			temp=_month;
;;;7015   			gran_char(&temp,1,12);
;;;7016   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7017   			
;;;7018   			temp=_date;
;;;7019   			gran_char(&temp,1,31);
;;;7020   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7021   				
;;;7022   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7023   
;;;7024   			temp=_hour;
;;;7025   			gran_char(&temp,0,23);
;;;7026   			*((char*)(&(wrk_date[1])))=temp;
;;;7027                  
;;;7028   			temp=_min;
;;;7029   			gran_char(&temp,0,59);
;;;7030   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7031   	          
;;;7032   			temp=_sec;
;;;7033   			gran_char(&temp,0,59);
;;;7034   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7035   			
;;;7036   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7037   
;;;7038   			
;;;7039   			//beep_init(0xFL,'O'); 
;;;7040   			ibat_integr=0;
;;;7041   			ibat_integr_=0;
;;;7042   			}
;;;7043   		}
;;;7044   	else cnt_wrk=0;	 
;;;7045   	
;;;7046   	}
;;;7047   if(wrk==wrkON)
;;;7048   	{
;;;7049   	ibat_integr_+=-Ibat;
;;;7050   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7051   		{
;;;7052   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7053   		ibat_integr++;
;;;7054   		}
;;;7055   	}
;;;7056   
;;;7057   */
;;;7058   
;;;7059   
;;;7060   /*if(bat[in]._cnt_to_block)
;;;7061   	{
;;;7062   	bat[in]._cnt_to_block--;
;;;7063   	if(!(bat[in]._cnt_to_block))
;;;7064   		{
;;;7065   		//bat[in]._rel_stat=1;
;;;7066   		}
;;;7067   	}
;;;7068   */
;;;7069   
;;;7070   
;;;7071   
;;;7072   
;;;7073   //unsigned int tempUI,tempUI_;
;;;7074   //unsigned int b_zar; 
;;;7075   //char i;
;;;7076   //Ibat[0]=5000;                     
;;;7077   
;;;7078   
;;;7079                               
;;;7080   if(bat[in]._time_cnt==0)
;;;7081   	{
;;;7082   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;7083   	
;;;7084   	if(bat[in]._zar_cnt>=AH_CONSTANT)
004dda  f64848a0          MOV      r8,#0x8ca0
004dde  f894003e          LDRB     r0,[r4,#0x3e]         ;7080
004de2  2800              CMP      r0,#0                 ;7080
004de4  d17e              BNE      |L1.20196|
004de6  f9b41008          LDRSH    r1,[r4,#8]            ;7082
004dea  6960              LDR      r0,[r4,#0x14]         ;7082
004dec  4408              ADD      r0,r0,r1              ;7082
004dee  6160              STR      r0,[r4,#0x14]         ;7082
;;;7085   		{
;;;7086   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;7087   		else tempUS_=BAT_C_REAL[in];
;;;7088   		
;;;7089   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004df0  f8df9144          LDR      r9,|L1.20280|
004df4  f8dfa144          LDR      r10,|L1.20284|
004df8  4540              CMP      r0,r8                 ;7084
004dfa  db2a              BLT      |L1.20050|
004dfc  f93a1015          LDRSH    r1,[r10,r5,LSL #1]    ;7086
004e00  f5a140aa          SUB      r0,r1,#0x5500         ;7086
004e04  3855              SUBS     r0,r0,#0x55           ;7086
004e06  d103              BNE      |L1.19984|
004e08  484d              LDR      r0,|L1.20288|
004e0a  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;7086
004e0e  e001              B        |L1.19988|
                  |L1.19984|
004e10  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;7087
                  |L1.19988|
004e14  f8390015          LDRH     r0,[r9,r5,LSL #1]
004e18  f7fffffe          BL       lc640_read_int
004e1c  b280              UXTH     r0,r0
;;;7090   
;;;7091   		if(b_zar<(tempUS_/**10*/))
004e1e  42b0              CMP      r0,r6
004e20  d20e              BCS      |L1.20032|
;;;7092   			{
;;;7093   			bat[in]._zar_cnt-=AH_CONSTANT;
004e22  6961              LDR      r1,[r4,#0x14]
004e24  f5a14100          SUB      r1,r1,#0x8000
004e28  f5a1614a          SUB      r1,r1,#0xca0
004e2c  6161              STR      r1,[r4,#0x14]
;;;7094   
;;;7095   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
004e2e  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004e32  f1000001          ADD      r0,r0,#1
004e36  b201              SXTH     r1,r0
004e38  4610              MOV      r0,r2
004e3a  f7fffffe          BL       lc640_write_int
004e3e  e033              B        |L1.20136|
                  |L1.20032|
;;;7096   			}
;;;7097   		else if(b_zar>(tempUS_/**10*/))  
004e40  d932              BLS      |L1.20136|
;;;7098   			{
;;;7099   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004e42  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004e46  b231              SXTH     r1,r6
004e48  f7fffffe          BL       lc640_write_int
;;;7100   			bat[in]._zar_cnt=AH_CONSTANT;
004e4c  f8c48014          STR      r8,[r4,#0x14]
004e50  e02a              B        |L1.20136|
                  |L1.20050|
;;;7101   
;;;7102   			}
;;;7103   
;;;7104   		}
;;;7105   
;;;7106   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
004e52  493c              LDR      r1,|L1.20292|
004e54  4288              CMP      r0,r1
004e56  dc27              BGT      |L1.20136|
;;;7107   		{
;;;7108   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
004e58  f93a1015          LDRSH    r1,[r10,r5,LSL #1]
004e5c  f5a140aa          SUB      r0,r1,#0x5500
004e60  3855              SUBS     r0,r0,#0x55
004e62  d103              BNE      |L1.20076|
004e64  4836              LDR      r0,|L1.20288|
004e66  f8306015          LDRH     r6,[r0,r5,LSL #1]
004e6a  e001              B        |L1.20080|
                  |L1.20076|
;;;7109   		else tempUS_=BAT_C_REAL[in];
004e6c  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.20080|
;;;7110   		
;;;7111   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004e70  f8390015          LDRH     r0,[r9,r5,LSL #1]
004e74  f7fffffe          BL       lc640_read_int
004e78  b280              UXTH     r0,r0
;;;7112   
;;;7113   		if(b_zar>tempUS_)
004e7a  42b0              CMP      r0,r6
004e7c  d905              BLS      |L1.20106|
;;;7114   			{
;;;7115   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004e7e  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004e82  b231              SXTH     r1,r6
004e84  f7fffffe          BL       lc640_write_int
;;;7116   			b_zar=tempUS_;
004e88  4630              MOV      r0,r6
                  |L1.20106|
;;;7117   			}
;;;7118   		if(b_zar)
004e8a  b158              CBZ      r0,|L1.20132|
;;;7119   			{
;;;7120   			bat[in]._zar_cnt+=AH_CONSTANT;
004e8c  6961              LDR      r1,[r4,#0x14]
004e8e  4441              ADD      r1,r1,r8
004e90  6161              STR      r1,[r4,#0x14]
;;;7121   
;;;7122   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
004e92  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004e96  f1a00001          SUB      r0,r0,#1
004e9a  b201              SXTH     r1,r0
004e9c  4610              MOV      r0,r2
004e9e  f7fffffe          BL       lc640_write_int
004ea2  e001              B        |L1.20136|
                  |L1.20132|
;;;7123   			}
;;;7124   		else 
;;;7125   			{
;;;7126   			bat[in]._zar_cnt=-AH_CONSTANT;
004ea4  4827              LDR      r0,|L1.20292|
004ea6  6160              STR      r0,[r4,#0x14]
                  |L1.20136|
;;;7127   			}
;;;7128   
;;;7129   		}
;;;7130   
;;;7131   			
;;;7132   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004ea8  f8390015          LDRH     r0,[r9,r5,LSL #1]
004eac  f7fffffe          BL       lc640_read_int
004eb0  4601              MOV      r1,r0
;;;7133   	
;;;7134   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
004eb2  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
004eb6  f5a042aa          SUB      r2,r0,#0x5500
004eba  3a55              SUBS     r2,r2,#0x55
004ebc  d102              BNE      |L1.20164|
004ebe  4820              LDR      r0,|L1.20288|
004ec0  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.20164|
;;;7135   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;7136   		           	
;;;7137   	tempUL*=1000L;
004ec4  f44f727a          MOV      r2,#0x3e8
004ec8  fb01f102          MUL      r1,r1,r2
;;;7138   
;;;7139   
;;;7140   	if(tempUL_==0) tempUL=0;
004ecc  b158              CBZ      r0,|L1.20198|
;;;7141   	else tempUL/=tempUL_;
004ece  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.20178|
;;;7142   
;;;7143   	tempUL/=10L;
004ed2  f04f010a          MOV      r1,#0xa
004ed6  fbb0f0f1          UDIV     r0,r0,r1
;;;7144   
;;;7145   	bat[in]._zar=(unsigned short)tempUL;
004eda  8220              STRH     r0,[r4,#0x10]
;;;7146   
;;;7147   	if(BAT_TYPE==1)
004edc  481a              LDR      r0,|L1.20296|
004ede  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
004ee0  2801              CMP      r0,#1
004ee2  e033              B        |L1.20300|
                  |L1.20196|
004ee4  e043              B        |L1.20334|
                  |L1.20198|
004ee6  e033              B        |L1.20304|
                  |L1.20200|
                          DCD      TBOXVENTMAX
                  |L1.20204|
                          DCD      main_vent_pos
                  |L1.20208|
                          DCD      pos_vent
                  |L1.20212|
                          DCD      mess_data
                  |L1.20216|
                          DCD      mixer_vent_stat
                  |L1.20220|
                          DCD      TBATDISABLE
                  |L1.20224|
                          DCD      tbatdisable_stat
                  |L1.20228|
                          DCD      tbatdisable_cnt
                  |L1.20232|
                          DCD      TBATENABLE
                  |L1.20236|
                          DCD      TLOADDISABLE
                  |L1.20240|
                          DCD      tloaddisable_stat
                  |L1.20244|
                          DCD      tloaddisable_cnt
                  |L1.20248|
                          DCD      TLOADENABLE
                  |L1.20252|
                          DCD      ||area_number.18||+0xac
                  |L1.20256|
                          DCD      bat
                  |L1.20260|
                          DCD      IZMAX
                  |L1.20264|
                          DCD      main_10Hz_cnt
                  |L1.20268|
                          DCD      IKB
                  |L1.20272|
                          DCD      bat_u_old_cnt
                  |L1.20276|
                          DCD      0x40024020
                  |L1.20280|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.20284|
                          DCD      BAT_C_REAL
                  |L1.20288|
                          DCD      BAT_C_NOM
                  |L1.20292|
                          DCD      0xffff7360
                  |L1.20296|
                          DCD      BAT_TYPE
                  |L1.20300|
004f4c  d003              BEQ      |L1.20310|
004f4e  e008              B        |L1.20322|
                  |L1.20304|
004f50  f04f0000          MOV      r0,#0                 ;7140
004f54  e7bd              B        |L1.20178|
                  |L1.20310|
;;;7148   		{
;;;7149   		bat[in]._zar=lakb[in]._s_o_c;
004f56  49fa              LDR      r1,|L1.21312|
004f58  9802              LDR      r0,[sp,#8]
004f5a  eb010080          ADD      r0,r1,r0,LSL #2
004f5e  8a40              LDRH     r0,[r0,#0x12]
004f60  8220              STRH     r0,[r4,#0x10]
                  |L1.20322|
;;;7150   		}
;;;7151   	
;;;7152   	gran((signed short*)&bat[in]._zar,0,100);
004f62  f1040010          ADD      r0,r4,#0x10
004f66  2264              MOVS     r2,#0x64
004f68  2100              MOVS     r1,#0
004f6a  f7fffffe          BL       gran
                  |L1.20334|
;;;7153        }
;;;7154   
;;;7155   
;;;7156   //Подсчет тока разряда батареи      
;;;7157   if(bat[in]._wrk==1)
004f6e  7ba0              LDRB     r0,[r4,#0xe]
004f70  2801              CMP      r0,#1
004f72  d113              BNE      |L1.20380|
;;;7158   	{
;;;7159   	if(bat[in]._Iintegr<36000)
004f74  8ba0              LDRH     r0,[r4,#0x1c]
004f76  4540              CMP      r0,r8
004f78  d20f              BCS      |L1.20378|
;;;7160   		{          
;;;7161   		bat[in]._Iintegr+=abs(bat[in]._Ib);
004f7a  f9b40008          LDRSH    r0,[r4,#8]
004f7e  f7fffffe          BL       abs
004f82  8ba1              LDRH     r1,[r4,#0x1c]
004f84  4408              ADD      r0,r0,r1
004f86  b280              UXTH     r0,r0
004f88  83a0              STRH     r0,[r4,#0x1c]
;;;7162   		if(bat[in]._Iintegr>=36000)
004f8a  4540              CMP      r0,r8
004f8c  d306              BCC      |L1.20380|
;;;7163   			{
;;;7164   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004f8e  83a7              STRH     r7,[r4,#0x1c]
;;;7165   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
004f90  8be0              LDRH     r0,[r4,#0x1e]
004f92  f1000001          ADD      r0,r0,#1
004f96  83e0              STRH     r0,[r4,#0x1e]
004f98  e000              B        |L1.20380|
                  |L1.20378|
;;;7166   			}
;;;7167   		}
;;;7168   	else 
;;;7169   		{
;;;7170   		bat[in]._Iintegr=0;
004f9a  83a7              STRH     r7,[r4,#0x1c]
                  |L1.20380|
;;;7171   		}	
;;;7172   	} 
;;;7173   	    
;;;7174   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7175   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
004f9c  f8df93a4          LDR      r9,|L1.21316|
004fa0  49e9              LDR      r1,|L1.21320|
004fa2  f8dfa3a8          LDR      r10,|L1.21324|
004fa6  f9b90000          LDRSH    r0,[r9,#0]  ; t_ext
004faa  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
004fae  4288              CMP      r0,r1
004fb0  dd02              BLE      |L1.20408|
004fb2  f89a0000          LDRB     r0,[r10,#0]  ; ND_EXT
004fb6  b3e8              CBZ      r0,|L1.20532|
                  |L1.20408|
;;;7176   	{
;;;7177   	bat[in]._sign_temper_cnt++;
;;;7178   	}
;;;7179   else 
;;;7180   	{
;;;7181   	bat[in]._sign_temper_cnt--;
004fb8  f8b40040          LDRH     r0,[r4,#0x40]
004fbc  f1a00001          SUB      r0,r0,#1
004fc0  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.20420|
;;;7182   	}
;;;7183   #else
;;;7184   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;7185   	{
;;;7186   	bat[in]._sign_temper_cnt++;
;;;7187   	}
;;;7188   else 
;;;7189   	{
;;;7190   	bat[in]._sign_temper_cnt--;
;;;7191   	}
;;;7192   #endif
;;;7193   gran(&bat[in]._sign_temper_cnt,0,600);
004fc4  f1040040          ADD      r0,r4,#0x40
004fc8  f44f7216          MOV      r2,#0x258
004fcc  2100              MOVS     r1,#0
004fce  f7fffffe          BL       gran
;;;7194   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
004fd2  f9b40040          LDRSH    r0,[r4,#0x40]
004fd6  f240264e          MOV      r6,#0x24e
004fda  42b0              CMP      r0,r6
004fdc  db05              BLT      |L1.20458|
004fde  f894103f          LDRB     r1,[r4,#0x3f]
004fe2  f0410101          ORR      r1,r1,#1
004fe6  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.20458|
;;;7195   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
004fea  280a              CMP      r0,#0xa
004fec  dc05              BGT      |L1.20474|
004fee  f894003f          LDRB     r0,[r4,#0x3f]
004ff2  f0200001          BIC      r0,r0,#1
004ff6  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20474|
;;;7196   
;;;7197   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7198   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
004ffa  49d5              LDR      r1,|L1.21328|
004ffc  f9b90000          LDRSH    r0,[r9,#0]  ; t_ext
005000  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
005004  4288              CMP      r0,r1
005006  dd02              BLE      |L1.20494|
005008  f89a0000          LDRB     r0,[r10,#0]  ; ND_EXT
00500c  b3b0              CBZ      r0,|L1.20604|
                  |L1.20494|
;;;7199   	{
;;;7200   	bat[in]._max_temper_cnt++;
;;;7201   	}
;;;7202   else 
;;;7203   	{
;;;7204   	bat[in]._max_temper_cnt--;
00500e  f8b40042          LDRH     r0,[r4,#0x42]
005012  f1a00001          SUB      r0,r0,#1
005016  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.20506|
;;;7205   	}
;;;7206   #else
;;;7207   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;7208   	{
;;;7209   	bat[in]._max_temper_cnt++;
;;;7210   	}
;;;7211   else 
;;;7212   	{
;;;7213   	bat[in]._max_temper_cnt--;
;;;7214   	}
;;;7215   #endif
;;;7216   
;;;7217   gran(&bat[in]._max_temper_cnt,0,600);
00501a  f44f7916          MOV      r9,#0x258
00501e  f1040042          ADD      r0,r4,#0x42
005022  464a              MOV      r2,r9
005024  2100              MOVS     r1,#0
005026  f7fffffe          BL       gran
;;;7218   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
00502a  f9b40042          LDRSH    r0,[r4,#0x42]
00502e  42b0              CMP      r0,r6
005030  db07              BLT      |L1.20546|
005032  e000              B        |L1.20534|
                  |L1.20532|
005034  e023              B        |L1.20606|
                  |L1.20534|
005036  f894103f          LDRB     r1,[r4,#0x3f]
00503a  f0410102          ORR      r1,r1,#2
00503e  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.20546|
;;;7219   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
005042  280a              CMP      r0,#0xa
005044  dc05              BGT      |L1.20562|
005046  f894003f          LDRB     r0,[r4,#0x3f]
00504a  f0200002          BIC      r0,r0,#2
00504e  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20562|
;;;7220   
;;;7221   
;;;7222   
;;;7223   //Подсчет наработки батареи
;;;7224   if(bat[in]._resurs_cnt<36000)
005052  6c60              LDR      r0,[r4,#0x44]
005054  4540              CMP      r0,r8
005056  da20              BGE      |L1.20634|
;;;7225   	{               
;;;7226   	bat[in]._resurs_cnt++;
005058  f1000001          ADD      r0,r0,#1
00505c  6460              STR      r0,[r4,#0x44]
;;;7227   	if(bat[in]._resurs_cnt>=36000)
00505e  4540              CMP      r0,r8
005060  db1c              BLT      |L1.20636|
;;;7228   		{
;;;7229   		bat[in]._resurs_cnt=0;
005062  6467              STR      r7,[r4,#0x44]
;;;7230   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
005064  4ebb              LDR      r6,|L1.21332|
005066  f8360015          LDRH     r0,[r6,r5,LSL #1]
00506a  f7fffffe          BL       lc640_read_int
00506e  1c40              ADDS     r0,r0,#1
005070  b201              SXTH     r1,r0
005072  f9360015          LDRSH    r0,[r6,r5,LSL #1]
005076  f7fffffe          BL       lc640_write_int
00507a  e00f              B        |L1.20636|
                  |L1.20604|
00507c  e006              B        |L1.20620|
                  |L1.20606|
00507e  f8b40040          LDRH     r0,[r4,#0x40]         ;7177
005082  f1000001          ADD      r0,r0,#1              ;7177
005086  f8a40040          STRH     r0,[r4,#0x40]         ;7177
00508a  e79b              B        |L1.20420|
                  |L1.20620|
00508c  f8b40042          LDRH     r0,[r4,#0x42]         ;7200
005090  f1000001          ADD      r0,r0,#1              ;7200
005094  f8a40042          STRH     r0,[r4,#0x42]         ;7200
005098  e7bf              B        |L1.20506|
                  |L1.20634|
;;;7231   		}
;;;7232   	}
;;;7233   else bat[in]._resurs_cnt=0;
00509a  6467              STR      r7,[r4,#0x44]
                  |L1.20636|
;;;7234   
;;;7235   
;;;7236   #ifndef UKU_220_V2
;;;7237   #ifndef UKU_GLONASS
;;;7238   //#ifndef UKU_6U
;;;7239   //#ifndef UKU_220
;;;7240   if(UBM_AV)
00509c  4eae              LDR      r6,|L1.21336|
00509e  8830              LDRH     r0,[r6,#0]  ; UBM_AV
0050a0  2800              CMP      r0,#0
0050a2  d05e              BEQ      |L1.20834|
;;;7241        {
;;;7242        signed short temp_SS;
;;;7243   #ifdef UKU_220
;;;7244   temp_SS=bat[in]._Ub/2;
;;;7245   #else
;;;7246        if(U0B<600)
0050a4  48ad              LDR      r0,|L1.21340|
0050a6  f9b00000          LDRSH    r0,[r0,#0]  ; U0B
0050aa  4548              CMP      r0,r9
0050ac  da08              BGE      |L1.20672|
;;;7247             {
;;;7248             temp_SS=bat[in]._Ub/4;
0050ae  f9b40002          LDRSH    r0,[r4,#2]
0050b2  ea4f71e0          ASR      r1,r0,#31
0050b6  eb007091          ADD      r0,r0,r1,LSR #30
0050ba  ea4f00a0          ASR      r0,r0,#2
0050be  e006              B        |L1.20686|
                  |L1.20672|
;;;7249             }
;;;7250        else temp_SS=bat[in]._Ub/5;
0050c0  f9b40002          LDRSH    r0,[r4,#2]
0050c4  f04f0105          MOV      r1,#5
0050c8  fb90f0f1          SDIV     r0,r0,r1
0050cc  b200              SXTH     r0,r0
                  |L1.20686|
;;;7251   	
;;;7252   	temp_SS+=temp_SS;     
0050ce  ea4f0040          LSL      r0,r0,#1
;;;7253   #endif
;;;7254        temp_SS-=(bat[in]._Ubm);
0050d2  88a1              LDRH     r1,[r4,#4]
0050d4  eba00001          SUB      r0,r0,r1
0050d8  b200              SXTH     r0,r0
;;;7255   
;;;7256        temp_SS=abs(temp_SS);
0050da  f7fffffe          BL       abs
;;;7257   
;;;7258        temp_SS*=10;
0050de  eb000080          ADD      r0,r0,r0,LSL #2
0050e2  ea4f0040          LSL      r0,r0,#1
0050e6  b200              SXTH     r0,r0
;;;7259   
;;;7260        temp_SS/=12;
0050e8  f04f010c          MOV      r1,#0xc
0050ec  fb90f0f1          SDIV     r0,r0,r1
0050f0  b200              SXTH     r0,r0
;;;7261   
;;;7262        bat[in]._dUbm=temp_SS;
0050f2  80e0              STRH     r0,[r4,#6]
;;;7263   
;;;7264   
;;;7265        if(	(bat[in]._dUbm>UBM_AV) &&
0050f4  f9b61000          LDRSH    r1,[r6,#0]  ; UBM_AV
0050f8  4288              CMP      r0,r1
0050fa  dd34              BLE      |L1.20838|
;;;7266   		(abs(bat[in]._Ib)<(5*IKB)) &&
0050fc  f9b40008          LDRSH    r0,[r4,#8]
005100  f7fffffe          BL       abs
005104  4601              MOV      r1,r0
005106  4896              LDR      r0,|L1.21344|
005108  f9b00000          LDRSH    r0,[r0,#0]  ; IKB
00510c  eb000080          ADD      r0,r0,r0,LSL #2
005110  4281              CMP      r1,r0
005112  da28              BGE      |L1.20838|
;;;7267   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
005114  4893              LDR      r0,|L1.21348|
005116  2173              MOVS     r1,#0x73
005118  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
00511c  4348              MULS     r0,r1,r0
00511e  fb90f0fb          SDIV     r0,r0,r11
005122  f9b41002          LDRSH    r1,[r4,#2]
005126  b200              SXTH     r0,r0
005128  4288              CMP      r0,r1
00512a  da1c              BGE      |L1.20838|
;;;7268   		(!(bat[in]._av & 2))  )
00512c  f894003d          LDRB     r0,[r4,#0x3d]
005130  0780              LSLS     r0,r0,#30
005132  d418              BMI      |L1.20838|
;;;7269   		{
;;;7270   		bat[in]._cnt_as++;
005134  f8b40048          LDRH     r0,[r4,#0x48]
005138  f1000001          ADD      r0,r0,#1
00513c  b200              SXTH     r0,r0
00513e  f8a40048          STRH     r0,[r4,#0x48]
;;;7271   		if(bat[in]._cnt_as==3000)
005142  f5a06130          SUB      r1,r0,#0xb00
005146  39b8              SUBS     r1,r1,#0xb8
005148  d103              BNE      |L1.20818|
;;;7272   			{
;;;7273   			avar_bat_as_hndl(in,1);
00514a  2101              MOVS     r1,#1
00514c  4628              MOV      r0,r5
00514e  f7fffffe          BL       avar_bat_as_hndl
                  |L1.20818|
;;;7274   			}
;;;7275   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
005152  f9b41048          LDRSH    r1,[r4,#0x48]
005156  f64030bd          MOV      r0,#0xbbd
00515a  4281              CMP      r1,r0
00515c  db01              BLT      |L1.20834|
00515e  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.20834|
;;;7276   		}
;;;7277   	else 
;;;7278   		{
;;;7279   		bat[in]._cnt_as=0;
;;;7280   		}
;;;7281        
;;;7282        }
;;;7283   //#endif 
;;;7284   #endif 
;;;7285   #endif
;;;7286   
;;;7287   }
005162  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.20838|
005166  f8a47048          STRH     r7,[r4,#0x48]         ;7279
00516a  e7fa              B        |L1.20834|
;;;7288   
                          ENDP

                  bat_hndl_zvu PROC
;;;7290   //-----------------------------------------------
;;;7291   void bat_hndl_zvu(void)
00516c  e92d4ff0          PUSH     {r4-r11,lr}
;;;7292   {
005170  b089              SUB      sp,sp,#0x24
;;;7293   char i;
;;;7294   short bat_hndl_i_temp;
;;;7295   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
005172  f04f021c          MOV      r2,#0x1c
005176  497c              LDR      r1,|L1.21352|
005178  4668              MOV      r0,sp
00517a  f7fffffe          BL       __aeabi_memcpy4
;;;7296   
;;;7297   //Ib_ips_termokompensat=-17000;
;;;7298    
;;;7299   if(bat_hndl_zvu_init==0)
00517e  4c7b              LDR      r4,|L1.21356|
;;;7300   	{
;;;7301   	//Инициализация при включении системы
;;;7302   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;7303   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
005180  2564              MOVS     r5,#0x64
;;;7304   	bat_hndl_zvu_Q*=10000L;
;;;7305   
;;;7306   	bat_hndl_zvu_init=1;
;;;7307   	}
;;;7308   else 
;;;7309   	{
;;;7310   	if(Ib_ips_termokompensat<-IKB)
;;;7311   		{
;;;7312   		bat_hndl_i_vector=0;
;;;7313   		bat_hndl_i_zar_price=0L;
;;;7314   			
;;;7315   		bat_hndl_i=-Ib_ips_termokompensat;
;;;7316   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;7317   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;7318   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;7319   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;7320   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;7321   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;7322   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;7323   		
;;;7324   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;7325   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;7326   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;7327   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;7328   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;7329   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;7330   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;7331   
;;;7332   		bat_hndl_i_temp=bat_hndl_i/10;
;;;7333   		for(i=0;i<7;i++)
;;;7334   			{
;;;7335   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;7336   				{
;;;7337   				break;
;;;7338   				}
;;;7339   			}
;;;7340   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;7341   		 else if((i>=1)&&(i<7))
;;;7342   		 	{
;;;7343   			short i1,i2;
;;;7344   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;7345   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;7346   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;7347   			bat_hndl_t_razr*=(long)i1;
;;;7348   			bat_hndl_t_razr/=(long)i2;
;;;7349   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;7350   			}
;;;7351   		else if(i>=7)
;;;7352   			{
;;;7353   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;7354   			}
;;;7355   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
005182  f8df81ec          LDR      r8,|L1.21360|
005186  7960              LDRB     r0,[r4,#5]            ;7299  ; bat_hndl_zvu_init
005188  2700              MOVS     r7,#0                 ;7299
00518a  f04f0901          MOV      r9,#1                 ;7306
00518e  f1040680          ADD      r6,r4,#0x80           ;7302
005192  2800              CMP      r0,#0                 ;7299
005194  d07e              BEQ      |L1.21140|
005196  4972              LDR      r1,|L1.21344|
005198  4876              LDR      r0,|L1.21364|
00519a  f9b12000          LDRSH    r2,[r1,#0]            ;7310  ; IKB
00519e  4631              MOV      r1,r6                 ;7302
0051a0  f9b00000          LDRSH    r0,[r0,#0]            ;7310  ; Ib_ips_termokompensat
0051a4  4253              RSBS     r3,r2,#0              ;7310
0051a6  6d09              LDR      r1,[r1,#0x50]         ;7302
0051a8  4298              CMP      r0,r3                 ;7310
0051aa  da74              BGE      |L1.21142|
0051ac  71e7              STRB     r7,[r4,#7]            ;7312
0051ae  60f7              STR      r7,[r6,#0xc]          ;7313  ; bat_hndl_i_zar_price
0051b0  f1c00000          RSB      r0,r0,#0              ;7315
0051b4  b200              SXTH     r0,r0                 ;7315
0051b6  f8a4007e          STRH     r0,[r4,#0x7e]         ;7315
0051ba  9008              STR      r0,[sp,#0x20]         ;7315
0051bc  486e              LDR      r0,|L1.21368|
0051be  4a6f              LDR      r2,|L1.21372|
0051c0  8800              LDRH     r0,[r0,#0]            ;7316  ; BAT_C_POINT_1_6
0051c2  eb000040          ADD      r0,r0,r0,LSL #1       ;7316
0051c6  ea4f0040          LSL      r0,r0,#1              ;7316
0051ca  fa0ffb80          SXTH     r11,r0                ;7316
0051ce  486c              LDR      r0,|L1.21376|
0051d0  8800              LDRH     r0,[r0,#0]            ;7317  ; BAT_C_POINT_1_2
0051d2  ea4f0040          LSL      r0,r0,#1              ;7317
0051d6  b203              SXTH     r3,r0                 ;7317
0051d8  486a              LDR      r0,|L1.21380|
0051da  f9b0c000          LDRSH    r12,[r0,#0]           ;7318  ; BAT_C_POINT_1
0051de  486a              LDR      r0,|L1.21384|
0051e0  f04f0903          MOV      r9,#3                 ;7319
0051e4  f9b00000          LDRSH    r0,[r0,#0]            ;7319  ; BAT_C_POINT_3
0051e8  fb90f0f9          SDIV     r0,r0,r9              ;7319
0051ec  b200              SXTH     r0,r0                 ;7319
0051ee  9007              STR      r0,[sp,#0x1c]         ;7319
0051f0  4866              LDR      r0,|L1.21388|
0051f2  f04f0905          MOV      r9,#5                 ;7320
0051f6  f9b00000          LDRSH    r0,[r0,#0]            ;7320  ; BAT_C_POINT_5
0051fa  fb90f0f9          SDIV     r0,r0,r9              ;7320
0051fe  fa0ff980          SXTH     r9,r0                 ;7320
005202  4863              LDR      r0,|L1.21392|
005204  f9b0a000          LDRSH    r10,[r0,#0]           ;7321  ; BAT_C_POINT_10
005208  f04f000a          MOV      r0,#0xa               ;7321
00520c  fb9af0f0          SDIV     r0,r10,r0             ;7321
005210  fa0ffe80          SXTH     lr,r0                 ;7321
005214  485f              LDR      r0,|L1.21396|
005216  f04f0a14          MOV      r10,#0x14             ;7322
00521a  f9b00000          LDRSH    r0,[r0,#0]            ;7322  ; BAT_C_POINT_20
00521e  fb90f0fa          SDIV     r0,r0,r10             ;7322
005222  fa0ffa80          SXTH     r10,r0                ;7322
005226  485c              LDR      r0,|L1.21400|
005228  f9b00000          LDRSH    r0,[r0,#0]            ;7324  ; BAT_K_OLD
00522c  fb0bfb00          MUL      r11,r11,r0            ;7324
005230  fb9bfbf5          SDIV     r11,r11,r5            ;7324
005234  f8a2b000          STRH     r11,[r2,#0]           ;7324
005238  fb03f300          MUL      r3,r3,r0              ;7325
00523c  fb93f3f5          SDIV     r3,r3,r5              ;7325
005240  8053              STRH     r3,[r2,#2]            ;7325
005242  fb0cfc00          MUL      r12,r12,r0            ;7326
005246  fb9cf3f5          SDIV     r3,r12,r5             ;7326
00524a  8093              STRH     r3,[r2,#4]            ;7326
00524c  9b07              LDR      r3,[sp,#0x1c]         ;7327
00524e  fb03f300          MUL      r3,r3,r0              ;7327
005252  fb93f3f5          SDIV     r3,r3,r5              ;7327
005256  80d3              STRH     r3,[r2,#6]            ;7327
005258  fb09f900          MUL      r9,r9,r0              ;7328
00525c  fb99f3f5          SDIV     r3,r9,r5              ;7328
005260  8113              STRH     r3,[r2,#8]            ;7328
005262  fb0efe00          MUL      lr,lr,r0              ;7329
005266  fb9ef3f5          SDIV     r3,lr,r5              ;7329
00526a  8153              STRH     r3,[r2,#0xa]          ;7329
00526c  fb0afa00          MUL      r10,r10,r0            ;7330
005270  fb9af0f5          SDIV     r0,r10,r5             ;7330
005274  8190              STRH     r0,[r2,#0xc]          ;7330
005276  9808              LDR      r0,[sp,#0x20]         ;7332
005278  f04f030a          MOV      r3,#0xa               ;7332
00527c  fb90f0f3          SDIV     r0,r0,r3              ;7332
005280  b203              SXTH     r3,r0                 ;7332
005282  f04f0000          MOV      r0,#0                 ;7333
                  |L1.21126|
005286  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;7335
00528a  429d              CMP      r5,r3                 ;7335
00528c  dd07              BLE      |L1.21150|
00528e  f1000001          ADD      r0,r0,#1              ;7333
005292  e001              B        |L1.21144|
                  |L1.21140|
005294  e01f              B        |L1.21206|
                  |L1.21142|
005296  e081              B        |L1.21404|
                  |L1.21144|
005298  b2c0              UXTB     r0,r0                 ;7333
00529a  2807              CMP      r0,#7                 ;7333
00529c  d3f3              BCC      |L1.21126|
                  |L1.21150|
00529e  b358              CBZ      r0,|L1.21240|
0052a0  1e45              SUBS     r5,r0,#1              ;7341
0052a2  2d06              CMP      r5,#6                 ;7341
0052a4  d22b              BCS      |L1.21246|
0052a6  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;7344
0052aa  ebac0303          SUB      r3,r12,r3             ;7344
0052ae  b21b              SXTH     r3,r3                 ;7344
0052b0  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;7345
0052b4  ebac0202          SUB      r2,r12,r2             ;7345
0052b8  fa0ffc82          SXTH     r12,r2                ;7345
0052bc  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;7346
0052c0  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;7346
0052c4  eba90200          SUB      r2,r9,r0              ;7346
0052c8  fb02f203          MUL      r2,r2,r3              ;7347
0052cc  fb92f2fc          SDIV     r2,r2,r12             ;7348
0052d0  4410              ADD      r0,r0,r2              ;7349
0052d2  64b0              STR      r0,[r6,#0x48]         ;7349  ; bat_hndl_t_razr
0052d4  e017              B        |L1.21254|
                  |L1.21206|
0052d6  f44f70ef          MOV      r0,#0x1de             ;7302
0052da  f7fffffe          BL       lc640_read_int
0052de  6530              STR      r0,[r6,#0x50]         ;7302  ; bat_hndl_zvu_Q
0052e0  2865              CMP      r0,#0x65              ;7303
0052e2  d300              BCC      |L1.21222|
0052e4  6535              STR      r5,[r6,#0x50]         ;7303  ; bat_hndl_zvu_Q
                  |L1.21222|
0052e6  6d30              LDR      r0,[r6,#0x50]         ;7304  ; bat_hndl_zvu_Q
0052e8  f2427110          MOV      r1,#0x2710            ;7304
0052ec  fb00f001          MUL      r0,r0,r1              ;7304
0052f0  6530              STR      r0,[r6,#0x50]         ;7304  ; bat_hndl_zvu_Q
0052f2  f8849005          STRB     r9,[r4,#5]            ;7306
0052f6  e095              B        |L1.21540|
                  |L1.21240|
0052f8  9800              LDR      r0,[sp,#0]            ;7340
0052fa  64b0              STR      r0,[r6,#0x48]         ;7340  ; bat_hndl_t_razr
0052fc  e003              B        |L1.21254|
                  |L1.21246|
0052fe  2807              CMP      r0,#7                 ;7351
005300  d301              BCC      |L1.21254|
005302  9806              LDR      r0,[sp,#0x18]         ;7353
005304  64b0              STR      r0,[r6,#0x48]         ;7353  ; bat_hndl_t_razr
                  |L1.21254|
005306  6cb0              LDR      r0,[r6,#0x48]  ; bat_hndl_t_razr
005308  fb98f0f0          SDIV     r0,r8,r0
00530c  6570              STR      r0,[r6,#0x54]  ; bat_hndl_proc_razr
;;;7356   
;;;7357   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
00530e  4281              CMP      r1,r0
005310  dd03              BLE      |L1.21274|
005312  eba10000          SUB      r0,r1,r0
005316  6530              STR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
005318  e000              B        |L1.21276|
                  |L1.21274|
;;;7358   		else bat_hndl_zvu_Q=0L;
00531a  6537              STR      r7,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.21276|
;;;7359   
;;;7360   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
00531c  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_remain_time
00531e  f44f6061          MOV      r0,#0xe10
005322  fb91f0f0          SDIV     r0,r1,r0
005326  8030              STRH     r0,[r6,#0]
;;;7361   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005328  f04f003c          MOV      r0,#0x3c
00532c  fb91f1f0          SDIV     r1,r1,r0
005330  b209              SXTH     r1,r1
005332  8071              STRH     r1,[r6,#2]
;;;7362   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
005334  fb91f2f0          SDIV     r2,r1,r0
005338  fb001012          MLS      r0,r0,r2,r1
00533c  80b0              STRH     r0,[r6,#4]
00533e  e045              B        |L1.21452|
                  |L1.21312|
                          DCD      lakb
                  |L1.21316|
                          DCD      t_ext
                  |L1.21320|
                          DCD      TBATSIGN
                  |L1.21324|
                          DCD      ND_EXT
                  |L1.21328|
                          DCD      TBATMAX
                  |L1.21332|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.21336|
                          DCD      UBM_AV
                  |L1.21340|
                          DCD      U0B
                  |L1.21344|
                          DCD      IKB
                  |L1.21348|
                          DCD      USIGN
                  |L1.21352|
                          DCD      ||area_number.12||+0x20
                  |L1.21356|
                          DCD      ||area_number.18||
                  |L1.21360|
                          DCD      0x000f4240
                  |L1.21364|
                          DCD      Ib_ips_termokompensat
                  |L1.21368|
                          DCD      BAT_C_POINT_1_6
                  |L1.21372|
                          DCD      ||.bss||+0x44c
                  |L1.21376|
                          DCD      BAT_C_POINT_1_2
                  |L1.21380|
                          DCD      BAT_C_POINT_1
                  |L1.21384|
                          DCD      BAT_C_POINT_3
                  |L1.21388|
                          DCD      BAT_C_POINT_5
                  |L1.21392|
                          DCD      BAT_C_POINT_10
                  |L1.21396|
                          DCD      BAT_C_POINT_20
                  |L1.21400|
                          DCD      BAT_K_OLD
                  |L1.21404|
;;;7363   
;;;7364   		}
;;;7365   	else if(Ib_ips_termokompensat>IKB)
00539c  4290              CMP      r0,r2
00539e  dd15              BLE      |L1.21452|
;;;7366   		{
;;;7367   		bat_hndl_i_vector=1;
0053a0  f8849007          STRB     r9,[r4,#7]
;;;7368   
;;;7369   		bat_hndl_i=Ib_ips_termokompensat;
0053a4  f8a4007e          STRH     r0,[r4,#0x7e]
;;;7370   		bat_hndl_i_summ+=(long)bat_hndl_i;
0053a8  6e32              LDR      r2,[r6,#0x60]  ; bat_hndl_i_summ
0053aa  4410              ADD      r0,r0,r2
0053ac  6630              STR      r0,[r6,#0x60]  ; bat_hndl_i_summ
;;;7371   		if(bat_hndl_i_summ>=36000L)
0053ae  f64842a0          MOV      r2,#0x8ca0
0053b2  4290              CMP      r0,r2
0053b4  db0a              BLT      |L1.21452|
;;;7372   
;;;7373   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;7374   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;7375   			{
;;;7376   			bat_hndl_i_summ-=36000L;
0053b6  eba00002          SUB      r0,r0,r2
0053ba  6630              STR      r0,[r6,#0x60]  ; bat_hndl_i_summ
;;;7377   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
0053bc  4541              CMP      r1,r8
0053be  da03              BGE      |L1.21448|
0053c0  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
0053c2  4408              ADD      r0,r0,r1
0053c4  6530              STR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
0053c6  e001              B        |L1.21452|
                  |L1.21448|
;;;7378   			else bat_hndl_zvu_Q=1000000L; 
0053c8  f8c68050          STR      r8,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.21452|
;;;7379   			}
;;;7380   		}
;;;7381   
;;;7382   
;;;7383   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
0053cc  79e0              LDRB     r0,[r4,#7]  ; bat_hndl_i_vector
0053ce  7a21              LDRB     r1,[r4,#8]  ; bat_hndl_i_vector_old
0053d0  4288              CMP      r0,r1
0053d2  d00d              BEQ      |L1.21488|
;;;7384   		{
;;;7385   		if(bat_hndl_i_vector==1)
0053d4  2801              CMP      r0,#1
0053d6  d10b              BNE      |L1.21488|
;;;7386   			{
;;;7387   			signed short tempSS;
;;;7388   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0053d8  f44f70e4          MOV      r0,#0x1c8
0053dc  f7fffffe          BL       lc640_read_int
0053e0  b200              SXTH     r0,r0
;;;7389   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
0053e2  4af8              LDR      r2,|L1.22468|
0053e4  6d31              LDR      r1,[r6,#0x50]  ; bat_hndl_zvu_Q
0053e6  4411              ADD      r1,r1,r2
0053e8  fb91f0f0          SDIV     r0,r1,r0
0053ec  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;7390   			bat_hndl_i_summ=0;
0053ee  6637              STR      r7,[r6,#0x60]  ; bat_hndl_i_summ
                  |L1.21488|
;;;7391   			}
;;;7392   		}
;;;7393   	bat_hndl_i_vector_old=bat_hndl_i_vector;
0053f0  79e0              LDRB     r0,[r4,#7]  ; bat_hndl_i_vector
0053f2  7220              STRB     r0,[r4,#8]
;;;7394   
;;;7395   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
0053f4  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
0053f6  f2427a10          MOV      r10,#0x2710
0053fa  fb90f5fa          SDIV     r5,r0,r10
0053fe  f44f79ef          MOV      r9,#0x1de
005402  4648              MOV      r0,r9
005404  f7fffffe          BL       lc640_read_int
005408  4285              CMP      r5,r0
00540a  d006              BEQ      |L1.21530|
00540c  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
00540e  fb90f0fa          SDIV     r0,r0,r10
005412  b201              SXTH     r1,r0
005414  4648              MOV      r0,r9
005416  f7fffffe          BL       lc640_write_int
                  |L1.21530|
;;;7396   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
00541a  e9d60114          LDRD     r0,r1,[r6,#0x50]
00541e  fb90f0f1          SDIV     r0,r0,r1
005422  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_remain_time
                  |L1.21540|
;;;7397   	}
;;;7398   
;;;7399   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
005424  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
005426  4540              CMP      r0,r8
005428  dd02              BLE      |L1.21552|
00542a  f8c68050          STR      r8,[r6,#0x50]  ; bat_hndl_zvu_Q
00542e  e002              B        |L1.21558|
                  |L1.21552|
;;;7400   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
005430  2800              CMP      r0,#0
005432  da00              BGE      |L1.21558|
005434  6537              STR      r7,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.21558|
;;;7401   
;;;7402   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
005436  48e4              LDR      r0,|L1.22472|
005438  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
00543c  200a              MOVS     r0,#0xa
00543e  fb91f0f0          SDIV     r0,r1,r0
005442  49e2              LDR      r1,|L1.22476|
005444  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
005448  ebb00f41          CMP      r0,r1,LSL #1
00544c  da30              BGE      |L1.21680|
00544e  4249              RSBS     r1,r1,#0
005450  ebb00f41          CMP      r0,r1,LSL #1
005454  dd2c              BLE      |L1.21680|
005456  48de              LDR      r0,|L1.22480|
005458  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
00545c  07c0              LSLS     r0,r0,#31
00545e  d127              BNE      |L1.21680|
005460  48dc              LDR      r0,|L1.22484|
005462  49dd              LDR      r1,|L1.22488|
005464  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
005468  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
00546c  4288              CMP      r0,r1
00546e  dc1f              BGT      |L1.21680|
005470  49da              LDR      r1,|L1.22492|
005472  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
005476  4288              CMP      r0,r1
005478  dd1a              BLE      |L1.21680|
00547a  f9b4004c          LDRSH    r0,[r4,#0x4c]  ; main_kb_cnt
00547e  280a              CMP      r0,#0xa
005480  db16              BLT      |L1.21680|
005482  28c8              CMP      r0,#0xc8
005484  dc14              BGT      |L1.21680|
;;;7403   	{
;;;7404   	if(bat_hndl_zvu_Q_cnt<60)
005486  f894002b          LDRB     r0,[r4,#0x2b]  ; bat_hndl_zvu_Q_cnt
00548a  283c              CMP      r0,#0x3c
00548c  d20d              BCS      |L1.21674|
;;;7405   		{
;;;7406   		bat_hndl_zvu_Q_cnt++;
00548e  f1000001          ADD      r0,r0,#1
005492  b2c0              UXTB     r0,r0
005494  f884002b          STRB     r0,[r4,#0x2b]
;;;7407   		if(bat_hndl_zvu_Q_cnt>=60)
005498  283c              CMP      r0,#0x3c
00549a  d306              BCC      |L1.21674|
;;;7408   			{
;;;7409   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
00549c  2164              MOVS     r1,#0x64
00549e  f44f70ef          MOV      r0,#0x1de
0054a2  f7fffffe          BL       lc640_write_int
;;;7410   			bat_hndl_zvu_Q=1000000L;
0054a6  f8c68050          STR      r8,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.21674|
;;;7411   
;;;7412   
;;;7413   			}
;;;7414   		}
;;;7415   	}
;;;7416   else 
;;;7417   	{
;;;7418   	bat_hndl_zvu_Q_cnt=0;
;;;7419   	}
;;;7420   
;;;7421   
;;;7422   
;;;7423   };
0054aa  b009              ADD      sp,sp,#0x24
0054ac  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.21680|
0054b0  f884702b          STRB     r7,[r4,#0x2b]         ;7418
0054b4  e7f9              B        |L1.21674|
;;;7424   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;7428   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;7429   void u_avt_set_hndl(void)
0054b6  e92d5fff          PUSH     {r0-r12,lr}
;;;7430   {
;;;7431   if(uavt_set_stat==uassSTEP1)
0054ba  4dc9              LDR      r5,|L1.22496|
;;;7432   	{
;;;7433   	char i,find_succes;
;;;7434   
;;;7435   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;7436   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;7437   	if(uavt_set_stat_old!=uavt_set_stat)
;;;7438   		{
;;;7439   		uavt_set_error_cnt=60;
0054bc  4ec9              LDR      r6,|L1.22500|
0054be  f8df8328          LDR      r8,|L1.22504|
0054c2  7828              LDRB     r0,[r5,#0]            ;7431  ; uavt_set_stat
;;;7440   		}
;;;7441   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7442   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7443   	find_succes=0;
;;;7444   /*	for(i=0;i<NUMIST;i++)
;;;7445   		{
;;;7446   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;7447   		else
;;;7448   			{
;;;7449   			find_succes=0;
;;;7450   			break;
;;;7451   			}
;;;7452   		}*/
;;;7453   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
0054c4  f8dfa324          LDR      r10,|L1.22508|
0054c8  2400              MOVS     r4,#0                 ;7442
;;;7454   
;;;7455   	if(find_succes==1)
;;;7456   		{
;;;7457   		uavt_set_stat=uassSTEP2;
0054ca  f04f0902          MOV      r9,#2
;;;7458   		}
;;;7459   	if(uavt_set_error_cnt)
;;;7460   		{
;;;7461   		uavt_set_error_cnt--;
;;;7462   		if(!uavt_set_error_cnt)
;;;7463   			{
;;;7464   			uavt_set_stat=uassOFF;
;;;7465   			uavt_set_result_stat=uasrsERR;
;;;7466   			avt_error_bps=100;
0054ce  f04f0b64          MOV      r11,#0x64
0054d2  2801              CMP      r0,#1                 ;7431
0054d4  d12e              BNE      |L1.21812|
0054d6  f8980000          LDRB     r0,[r8,#0]            ;7437  ; uavt_set_stat_old
0054da  2801              CMP      r0,#1                 ;7437
0054dc  d002              BEQ      |L1.21732|
0054de  f04f003c          MOV      r0,#0x3c              ;7439
0054e2  7030              STRB     r0,[r6,#0]            ;7439
                  |L1.21732|
0054e4  230a              MOVS     r3,#0xa               ;7442
0054e6  2200              MOVS     r2,#0                 ;7442
0054e8  21e6              MOVS     r1,#0xe6              ;7442
0054ea  20e1              MOVS     r0,#0xe1              ;7442
0054ec  f7fffffe          BL       mess_send
0054f0  f04f0000          MOV      r0,#0                 ;7443
0054f4  49be              LDR      r1,|L1.22512|
0054f6  f9b12000          LDRSH    r2,[r1,#0]            ;7453  ; bps_U
0054fa  f9ba1000          LDRSH    r1,[r10,#0]           ;7453  ; U_AVT
0054fe  f1a10301          SUB      r3,r1,#1              ;7453
005502  429a              CMP      r2,r3                 ;7453
005504  db04              BLT      |L1.21776|
005506  1c49              ADDS     r1,r1,#1              ;7453
005508  428a              CMP      r2,r1                 ;7453
00550a  dc01              BGT      |L1.21776|
00550c  f04f0001          MOV      r0,#1                 ;7453
                  |L1.21776|
005510  2801              CMP      r0,#1                 ;7455
005512  d101              BNE      |L1.21784|
005514  f8859000          STRB     r9,[r5,#0]            ;7457
                  |L1.21784|
005518  7830              LDRB     r0,[r6,#0]            ;7459  ; uavt_set_error_cnt
00551a  b158              CBZ      r0,|L1.21812|
00551c  f1a00001          SUB      r0,r0,#1              ;7461
005520  b2c0              UXTB     r0,r0                 ;7461
005522  7030              STRB     r0,[r6,#0]            ;7461
005524  b930              CBNZ     r0,|L1.21812|
005526  702c              STRB     r4,[r5,#0]            ;7464
005528  48b2              LDR      r0,|L1.22516|
00552a  f8809000          STRB     r9,[r0,#0]            ;7465
00552e  48b2              LDR      r0,|L1.22520|
005530  f880b000          STRB     r11,[r0,#0]
                  |L1.21812|
;;;7467   			}
;;;7468   		}
;;;7469   	}
;;;7470   if(uavt_set_stat==uassSTEP2)
005534  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;7471   	{
;;;7472   	char i,find_succes;
;;;7473   
;;;7474   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005536  49b1              LDR      r1,|L1.22524|
;;;7475   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005538  48b1              LDR      r0,|L1.22528|
;;;7476   
;;;7477   	if(uavt_set_stat_old!=uavt_set_stat)
;;;7478   		{
;;;7479   		uavt_set_error_cnt=60;
;;;7480   		}
;;;7481   
;;;7482   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7483   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7484   	find_succes=1;
;;;7485   
;;;7486   	for(i=0;i<NUMIST;i++)
;;;7487   		{
;;;7488   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;7489   		else
;;;7490   			{
;;;7491   			find_succes=0;
;;;7492   			avt_error_bps=i+1;
;;;7493   			break;
;;;7494   			}
;;;7495   		}
;;;7496   
;;;7497   	if(find_succes==1)
;;;7498   		{
;;;7499   		uavt_set_stat=uassSTEP3;
;;;7500   		uavt_bps_pntr=0;
00553a  4fb2              LDR      r7,|L1.22532|
00553c  2a02              CMP      r2,#2                 ;7470
00553e  d002              BEQ      |L1.21830|
;;;7501   		avt_plazma=0;
;;;7502   		}
;;;7503   
;;;7504   	if(uavt_set_error_cnt)
;;;7505   		{
;;;7506   		uavt_set_error_cnt--;
;;;7507   		if(!uavt_set_error_cnt)
;;;7508   			{
;;;7509   			uavt_set_stat=uassOFF;
;;;7510   			uavt_set_result_stat=uasrsERR;
;;;7511   			}
;;;7512   		}
;;;7513   	}
;;;7514   else if(uavt_set_stat==uassSTEP3)
005540  2a03              CMP      r2,#3
005542  d05e              BEQ      |L1.22018|
005544  e0ca              B        |L1.22236|
                  |L1.21830|
005546  f9ba2000          LDRSH    r2,[r10,#0]           ;7474  ; U_AVT
00554a  f04f0365          MOV      r3,#0x65              ;7474
00554e  fb02f303          MUL      r3,r2,r3              ;7474
005552  fbb3f3fb          UDIV     r3,r3,r11             ;7474
005556  468a              MOV      r10,r1                ;7474
005558  800b              STRH     r3,[r1,#0]            ;7474
00555a  eb021142          ADD      r1,r2,r2,LSL #5       ;7475
00555e  eb010141          ADD      r1,r1,r1,LSL #1       ;7475
005562  fbb1f1fb          UDIV     r1,r1,r11             ;7475
005566  4683              MOV      r11,r0                ;7475
005568  8001              STRH     r1,[r0,#0]            ;7475
00556a  f8980000          LDRB     r0,[r8,#0]            ;7477  ; uavt_set_stat_old
00556e  2802              CMP      r0,#2                 ;7477
005570  d002              BEQ      |L1.21880|
005572  f04f003c          MOV      r0,#0x3c              ;7479
005576  7030              STRB     r0,[r6,#0]            ;7479
                  |L1.21880|
005578  230a              MOVS     r3,#0xa               ;7482
00557a  21bf              MOVS     r1,#0xbf              ;7482
00557c  20be              MOVS     r0,#0xbe              ;7482
00557e  f7fffffe          BL       mess_send
005582  230a              MOVS     r3,#0xa               ;7483
005584  2200              MOVS     r2,#0                 ;7483
005586  21e6              MOVS     r1,#0xe6              ;7483
005588  20e1              MOVS     r0,#0xe1              ;7483
00558a  f7fffffe          BL       mess_send
00558e  f04f0201          MOV      r2,#1                 ;7484
005592  f04f0000          MOV      r0,#0                 ;7486
005596  499d              LDR      r1,|L1.22540|
005598  f9ba3000          LDRSH    r3,[r10,#0]           ;7486
00559c  f8dfe268          LDR      lr,|L1.22536|
0055a0  f9bbc000          LDRSH    r12,[r11,#0]          ;7488
0055a4  f9b1a000          LDRSH    r10,[r1,#0]           ;7486
0055a8  e00d              B        |L1.21958|
                  |L1.21930|
0055aa  ebc001c0          RSB      r1,r0,r0,LSL #3       ;7488
0055ae  eb011100          ADD      r1,r1,r0,LSL #4       ;7488
0055b2  eb0e0181          ADD      r1,lr,r1,LSL #2       ;7488
0055b6  69c9              LDR      r1,[r1,#0x1c]         ;7488
0055b8  4299              CMP      r1,r3                 ;7488
0055ba  da09              BGE      |L1.21968|
0055bc  4561              CMP      r1,r12                ;7488
0055be  dd07              BLE      |L1.21968|
0055c0  f1000001          ADD      r0,r0,#1              ;7486
0055c4  b2c0              UXTB     r0,r0                 ;7486
                  |L1.21958|
0055c6  4550              CMP      r0,r10                ;7486
0055c8  dbef              BLT      |L1.21930|
                  |L1.21962|
0055ca  2a01              CMP      r2,#1                 ;7497
0055cc  d007              BEQ      |L1.21982|
0055ce  e00c              B        |L1.21994|
                  |L1.21968|
0055d0  f04f0200          MOV      r2,#0                 ;7491
0055d4  4988              LDR      r1,|L1.22520|
0055d6  f1000001          ADD      r0,r0,#1              ;7492
0055da  7008              STRB     r0,[r1,#0]            ;7492
0055dc  e7f5              B        |L1.21962|
                  |L1.21982|
0055de  f04f0003          MOV      r0,#3                 ;7499
0055e2  7028              STRB     r0,[r5,#0]            ;7499
0055e4  703c              STRB     r4,[r7,#0]            ;7500
0055e6  488a              LDR      r0,|L1.22544|
0055e8  7004              STRB     r4,[r0,#0]            ;7501
                  |L1.21994|
0055ea  7830              LDRB     r0,[r6,#0]            ;7504  ; uavt_set_error_cnt
0055ec  b3d0              CBZ      r0,|L1.22116|
0055ee  f1a00001          SUB      r0,r0,#1              ;7506
0055f2  b2c0              UXTB     r0,r0                 ;7506
0055f4  7030              STRB     r0,[r6,#0]            ;7506
0055f6  bba8              CBNZ     r0,|L1.22116|
0055f8  702c              STRB     r4,[r5,#0]            ;7509
0055fa  487e              LDR      r0,|L1.22516|
0055fc  f8809000          STRB     r9,[r0,#0]            ;7510
005600  e06c              B        |L1.22236|
                  |L1.22018|
;;;7515   	{
;;;7516   	char i,find_succes;
;;;7517   
;;;7518   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005602  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005606  f04f0365          MOV      r3,#0x65
00560a  fb02f303          MUL      r3,r2,r3
00560e  fbb3f3fb          UDIV     r3,r3,r11
005612  468a              MOV      r10,r1
005614  800b              STRH     r3,[r1,#0]
;;;7519   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005616  eb021142          ADD      r1,r2,r2,LSL #5
00561a  eb010141          ADD      r1,r1,r1,LSL #1
00561e  fbb1f1fb          UDIV     r1,r1,r11
005622  4683              MOV      r11,r0
005624  8001              STRH     r1,[r0,#0]
;;;7520   	
;;;7521   	if(uavt_set_stat_old!=uavt_set_stat)
005626  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
00562a  2803              CMP      r0,#3
00562c  d000              BEQ      |L1.22064|
;;;7522   		{
;;;7523   		uavt_bps_pntr=0;
00562e  703c              STRB     r4,[r7,#0]
                  |L1.22064|
;;;7524   		}
;;;7525   
;;;7526   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005630  230a              MOVS     r3,#0xa
005632  21bf              MOVS     r1,#0xbf
005634  20be              MOVS     r0,#0xbe
005636  f7fffffe          BL       mess_send
;;;7527   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
00563a  230a              MOVS     r3,#0xa
00563c  2200              MOVS     r2,#0
00563e  21e6              MOVS     r1,#0xe6
005640  20e1              MOVS     r0,#0xe1
005642  f7fffffe          BL       mess_send
;;;7528   
;;;7529   	find_succes=1;
005646  f04f0601          MOV      r6,#1
;;;7530   	for(i=0;i<NUMIST;i++)
00564a  f04f0000          MOV      r0,#0
00564e  f8df91bc          LDR      r9,|L1.22540|
005652  f9ba2000          LDRSH    r2,[r10,#0]
005656  f8dfc1b0          LDR      r12,|L1.22536|
00565a  f9bb3000          LDRSH    r3,[r11,#0]           ;7488
00565e  f9b9a000          LDRSH    r10,[r9,#0]           ;7486
005662  e00e              B        |L1.22146|
                  |L1.22116|
005664  e03a              B        |L1.22236|
                  |L1.22118|
;;;7531   		{
;;;7532   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005666  ebc001c0          RSB      r1,r0,r0,LSL #3
00566a  eb011100          ADD      r1,r1,r0,LSL #4
00566e  eb0c0181          ADD      r1,r12,r1,LSL #2
005672  69c9              LDR      r1,[r1,#0x1c]
005674  4291              CMP      r1,r2
005676  da0f              BGE      |L1.22168|
005678  4299              CMP      r1,r3
00567a  dd0d              BLE      |L1.22168|
00567c  f1000001          ADD      r0,r0,#1              ;7530
005680  b2c0              UXTB     r0,r0                 ;7530
                  |L1.22146|
005682  4550              CMP      r0,r10                ;7530
005684  dbef              BLT      |L1.22118|
                  |L1.22150|
;;;7533   		else
;;;7534   			{
;;;7535   			find_succes=0;
;;;7536   			break;
;;;7537   			}
;;;7538   		}
;;;7539   
;;;7540   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005686  20d7              MOVS     r0,#0xd7
005688  f7fffffe          BL       mess_find
00568c  b1a0              CBZ      r0,|L1.22200|
00568e  4861              LDR      r0,|L1.22548|
005690  6800              LDR      r0,[r0,#0]  ; mess_data
005692  28d9              CMP      r0,#0xd9
005694  d003              BEQ      |L1.22174|
005696  e00f              B        |L1.22200|
                  |L1.22168|
005698  f04f0600          MOV      r6,#0                 ;7535
00569c  e7f3              B        |L1.22150|
                  |L1.22174|
;;;7541   		{
;;;7542   		if(++uavt_bps_pntr>=NUMIST)
00569e  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
0056a0  1c40              ADDS     r0,r0,#1
0056a2  b2c0              UXTB     r0,r0
0056a4  7038              STRB     r0,[r7,#0]
0056a6  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
0056aa  4288              CMP      r0,r1
0056ac  db04              BLT      |L1.22200|
;;;7543   			{
;;;7544   			uavt_set_stat=uassOFF;
0056ae  702c              STRB     r4,[r5,#0]
;;;7545   			uavt_set_result_stat=uasrsSUCCESS;
0056b0  4950              LDR      r1,|L1.22516|
0056b2  f04f0003          MOV      r0,#3
0056b6  7008              STRB     r0,[r1,#0]
                  |L1.22200|
;;;7546   			}
;;;7547   		//uavt_bps_pntr++;
;;;7548   		//if()
;;;7549   		}
;;;7550   	if(find_succes==1)
0056b8  2e01              CMP      r6,#1
0056ba  d10f              BNE      |L1.22236|
;;;7551   		{
;;;7552   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
0056bc  20ee              MOVS     r0,#0xee
0056be  e9cd0400          STRD     r0,r4,[sp,#0]
0056c2  9402              STR      r4,[sp,#8]
0056c4  9403              STR      r4,[sp,#0xc]
0056c6  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
0056c8  4603              MOV      r3,r0
0056ca  2216              MOVS     r2,#0x16
0056cc  4608              MOV      r0,r1
0056ce  f7fffffe          BL       mcp2515_transmit
;;;7553   		avt_plazma++;
0056d2  484f              LDR      r0,|L1.22544|
0056d4  7801              LDRB     r1,[r0,#0]  ; avt_plazma
0056d6  f1010101          ADD      r1,r1,#1
0056da  7001              STRB     r1,[r0,#0]
                  |L1.22236|
;;;7554   		}
;;;7555   	}
;;;7556   
;;;7557   
;;;7558   
;;;7559   uavt_set_stat_old=uavt_set_stat;
0056dc  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
0056de  f8880000          STRB     r0,[r8,#0]
                  |L1.22242|
;;;7560   
;;;7561   }
0056e2  e8bd9fff          POP      {r0-r12,pc}
;;;7562   
                          ENDP

                  u_avt_set_hndl1 PROC
;;;7565   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;7566   void u_avt_set_hndl1(void)
0056e6  e92d5fff          PUSH     {r0-r12,lr}
;;;7567   {
;;;7568   if(uavt_set_stat==uassSTEP1)
;;;7569   	{
;;;7570   	char i,find_succes;
;;;7571   
;;;7572   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0056ea  4840              LDR      r0,|L1.22508|
0056ec  2165              MOVS     r1,#0x65
0056ee  2564              MOVS     r5,#0x64
0056f0  f9b00000          LDRSH    r0,[r0,#0]
0056f4  4c3a              LDR      r4,|L1.22496|
0056f6  4341              MULS     r1,r0,r1
;;;7573   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0056f8  eb001040          ADD      r0,r0,r0,LSL #5
0056fc  fbb1f1f5          UDIV     r1,r1,r5              ;7572
005700  eb000040          ADD      r0,r0,r0,LSL #1
005704  fbb0f0f5          UDIV     r0,r0,r5
;;;7574   	if(uavt_set_stat_old!=uavt_set_stat)
005708  f8dfb0dc          LDR      r11,|L1.22504|
00570c  b20a              SXTH     r2,r1                 ;7572
00570e  7823              LDRB     r3,[r4,#0]            ;7568  ; uavt_set_stat
005710  b201              SXTH     r1,r0                 ;7573
005712  f89b0000          LDRB     r0,[r11,#0]
;;;7575   		{
;;;7576   		uavt_bps_pntr=0;
005716  4e3b              LDR      r6,|L1.22532|
005718  4f38              LDR      r7,|L1.22524|
00571a  f8df80e4          LDR      r8,|L1.22528|
;;;7577   
;;;7578   		}
;;;7579   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7580   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7581   	find_succes=1;
;;;7582   	for(i=0;i<NUMIST;i++)
;;;7583   		{
;;;7584   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
00571e  f8df90e8          LDR      r9,|L1.22536|
005722  f8dfa0e8          LDR      r10,|L1.22540|
005726  2500              MOVS     r5,#0                 ;7576
005728  2b01              CMP      r3,#1                 ;7568
00572a  d002              BEQ      |L1.22322|
;;;7585   		else
;;;7586   			{
;;;7587   			find_succes=0;
;;;7588   			break;
;;;7589   			}
;;;7590   		}
;;;7591   
;;;7592   	if(find_succes==1)
;;;7593   		{
;;;7594   		uavt_set_stat=uassSTEP2;
;;;7595   		}
;;;7596   	}
;;;7597   else if(uavt_set_stat==uassSTEP2)
00572c  2b02              CMP      r3,#2
00572e  d031              BEQ      |L1.22420|
005730  e09c              B        |L1.22636|
                  |L1.22322|
005732  803a              STRH     r2,[r7,#0]            ;7572
005734  f8a81000          STRH     r1,[r8,#0]            ;7573
005738  2801              CMP      r0,#1                 ;7574
00573a  d000              BEQ      |L1.22334|
00573c  7035              STRB     r5,[r6,#0]            ;7576
                  |L1.22334|
00573e  230a              MOVS     r3,#0xa               ;7580
005740  2200              MOVS     r2,#0                 ;7580
005742  21e6              MOVS     r1,#0xe6              ;7580
005744  20e1              MOVS     r0,#0xe1              ;7580
005746  f7fffffe          BL       mess_send
00574a  f04f0201          MOV      r2,#1                 ;7581
00574e  f04f0000          MOV      r0,#0                 ;7582
005752  f9b73000          LDRSH    r3,[r7,#0]            ;7582
005756  f9b85000          LDRSH    r5,[r8,#0]            ;7582
00575a  f9ba6000          LDRSH    r6,[r10,#0]           ;7582
00575e  e00d              B        |L1.22396|
                  |L1.22368|
005760  ebc001c0          RSB      r1,r0,r0,LSL #3       ;7584
005764  eb011100          ADD      r1,r1,r0,LSL #4       ;7584
005768  eb090181          ADD      r1,r9,r1,LSL #2       ;7584
00576c  69c9              LDR      r1,[r1,#0x1c]         ;7584
00576e  4299              CMP      r1,r3                 ;7584
005770  da09              BGE      |L1.22406|
005772  42a9              CMP      r1,r5                 ;7584
005774  dd07              BLE      |L1.22406|
005776  f1000001          ADD      r0,r0,#1              ;7582
00577a  b2c0              UXTB     r0,r0                 ;7582
                  |L1.22396|
00577c  42b0              CMP      r0,r6                 ;7582
00577e  dbef              BLT      |L1.22368|
                  |L1.22400|
005780  2a01              CMP      r2,#1                 ;7592
005782  d003              BEQ      |L1.22412|
005784  e072              B        |L1.22636|
                  |L1.22406|
005786  f04f0200          MOV      r2,#0                 ;7587
00578a  e7f9              B        |L1.22400|
                  |L1.22412|
00578c  f04f0002          MOV      r0,#2                 ;7594
005790  7020              STRB     r0,[r4,#0]            ;7594
005792  e06b              B        |L1.22636|
                  |L1.22420|
;;;7598   	{
;;;7599   	char i,find_succes;
;;;7600   
;;;7601   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005794  803a              STRH     r2,[r7,#0]
;;;7602   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005796  f8a81000          STRH     r1,[r8,#0]
;;;7603   	
;;;7604   	if(uavt_set_stat_old!=uavt_set_stat)
00579a  2802              CMP      r0,#2
00579c  d000              BEQ      |L1.22432|
;;;7605   		{
;;;7606   		uavt_bps_pntr=0;
00579e  7035              STRB     r5,[r6,#0]
                  |L1.22432|
;;;7607   		}
;;;7608   
;;;7609   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7610   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
0057a0  230a              MOVS     r3,#0xa
0057a2  2200              MOVS     r2,#0
0057a4  21e6              MOVS     r1,#0xe6
0057a6  20e1              MOVS     r0,#0xe1
0057a8  f7fffffe          BL       mess_send
;;;7611   
;;;7612   	find_succes=1;
0057ac  f04f0201          MOV      r2,#1
;;;7613   	for(i=0;i<NUMIST;i++)
0057b0  f04f0000          MOV      r0,#0
0057b4  f9b73000          LDRSH    r3,[r7,#0]
0057b8  f9b87000          LDRSH    r7,[r8,#0]
0057bc  f9bac000          LDRSH    r12,[r10,#0]          ;7582
0057c0  e038              B        |L1.22580|
0057c2  0000              DCW      0x0000
                  |L1.22468|
                          DCD      0xfff0bdc0
                  |L1.22472|
                          DCD      Ib_ips_termokompensat
                  |L1.22476|
                          DCD      IKB
                  |L1.22480|
                          DCD      bat
                  |L1.22484|
                          DCD      out_U
                  |L1.22488|
                          DCD      u_necc_up
                  |L1.22492|
                          DCD      u_necc_dn
                  |L1.22496|
                          DCD      uavt_set_stat
                  |L1.22500|
                          DCD      uavt_set_error_cnt
                  |L1.22504|
                          DCD      uavt_set_stat_old
                  |L1.22508|
                          DCD      U_AVT
                  |L1.22512|
                          DCD      bps_U
                  |L1.22516|
                          DCD      uavt_set_result_stat
                  |L1.22520|
                          DCD      avt_error_bps
                  |L1.22524|
                          DCD      u_max_temp
                  |L1.22528|
                          DCD      u_min_temp
                  |L1.22532|
                          DCD      uavt_bps_pntr
                  |L1.22536|
                          DCD      bps
                  |L1.22540|
                          DCD      NUMIST
                  |L1.22544|
                          DCD      avt_plazma
                  |L1.22548|
                          DCD      mess_data
                  |L1.22552|
;;;7614   		{
;;;7615   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005818  ebc001c0          RSB      r1,r0,r0,LSL #3
00581c  eb011100          ADD      r1,r1,r0,LSL #4
005820  eb090181          ADD      r1,r9,r1,LSL #2
005824  69c9              LDR      r1,[r1,#0x1c]
005826  4299              CMP      r1,r3
005828  da09              BGE      |L1.22590|
00582a  42b9              CMP      r1,r7
00582c  dd07              BLE      |L1.22590|
00582e  f1000001          ADD      r0,r0,#1              ;7613
005832  b2c0              UXTB     r0,r0                 ;7613
                  |L1.22580|
005834  4560              CMP      r0,r12                ;7613
005836  dbef              BLT      |L1.22552|
                  |L1.22584|
;;;7616   		else
;;;7617   			{
;;;7618   			find_succes=0;
;;;7619   			break;
;;;7620   			}
;;;7621   		}
;;;7622   
;;;7623   	if(find_succes==1)
005838  2a01              CMP      r2,#1
00583a  d003              BEQ      |L1.22596|
00583c  e016              B        |L1.22636|
                  |L1.22590|
00583e  f04f0200          MOV      r2,#0                 ;7618
005842  e7f9              B        |L1.22584|
                  |L1.22596|
;;;7624   		{
;;;7625   		can1_out(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005844  20ee              MOVS     r0,#0xee
005846  e9cd0500          STRD     r0,r5,[sp,#0]
00584a  9502              STR      r5,[sp,#8]
00584c  9503              STR      r5,[sp,#0xc]
00584e  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
005850  4603              MOV      r3,r0
005852  2216              MOVS     r2,#0x16
005854  4608              MOV      r0,r1
005856  f7fffffe          BL       mcp2515_transmit
;;;7626   		if(++uavt_bps_pntr>=NUMIST)uavt_set_stat=uassOFF;
00585a  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
00585c  1c40              ADDS     r0,r0,#1
00585e  b2c0              UXTB     r0,r0
005860  7030              STRB     r0,[r6,#0]
005862  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
005866  4288              CMP      r0,r1
005868  db00              BLT      |L1.22636|
00586a  7025              STRB     r5,[r4,#0]
                  |L1.22636|
;;;7627   		}
;;;7628   	}
;;;7629   
;;;7630   
;;;7631   
;;;7632   uavt_set_stat_old=uavt_set_stat;
00586c  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
00586e  f88b0000          STRB     r0,[r11,#0]
;;;7633   
;;;7634   }
005872  e736              B        |L1.22242|
;;;7635   
                          ENDP

                  u_necc_hndl PROC
;;;7637   //-----------------------------------------------
;;;7638   void u_necc_hndl(void)
005874  b5f8              PUSH     {r3-r7,lr}
;;;7639   {
;;;7640   signed long temp_L;
;;;7641   signed long temp_SL;
;;;7642   //signed short temp_SS;
;;;7643   
;;;7644   //char i;
;;;7645   
;;;7646   //temp_SS=0;
;;;7647   signed short t[2];
;;;7648   
;;;7649   
;;;7650   
;;;7651   
;;;7652   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7653   
;;;7654   if(!TERMOKOMPENS)
005876  48fe              LDR      r0,|L1.23664|
005878  8801              LDRH     r1,[r0,#0]  ; TERMOKOMPENS
;;;7655   	{
;;;7656   	//u_necc=U0B;
;;;7657   	u_necc=UB20;
00587a  48fe              LDR      r0,|L1.23668|
00587c  f9b03000          LDRSH    r3,[r0,#0]
;;;7658   	}
;;;7659   else
;;;7660   	{
;;;7661   	if(ND_EXT[0])t[0]=20;
;;;7662   	else t[0]=t_ext[0];
;;;7663   
;;;7664   	mat_temper=t[0];
;;;7665   			
;;;7666   	if(mat_temper<0)temp_SL=UB0; 
;;;7667   	else 
;;;7668   		{
;;;7669   		if(mat_temper>40)mat_temper=40; 
;;;7670   		temp_SL=(UB20-UB0)*10;
;;;7671   		temp_SL*=mat_temper;
;;;7672   		temp_SL/=200;
;;;7673   		temp_SL+=UB0;
;;;7674   		}
;;;7675   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
;;;7676   		{
;;;7677   		temp_SL=UVZ;
005880  48fd              LDR      r0,|L1.23672|
005882  f9b02000          LDRSH    r2,[r0,#0]
005886  4dfd              LDR      r5,|L1.23676|
005888  4cfd              LDR      r4,|L1.23680|
00588a  b139              CBZ      r1,|L1.22684|
00588c  48fd              LDR      r0,|L1.23684|
00588e  7800              LDRB     r0,[r0,#0]            ;7661  ; ND_EXT
005890  b130              CBZ      r0,|L1.22688|
005892  f04f0014          MOV      r0,#0x14              ;7661
005896  f8ad0000          STRH     r0,[sp,#0]            ;7661
00589a  e005              B        |L1.22696|
                  |L1.22684|
00589c  8023              STRH     r3,[r4,#0]            ;7657
00589e  e02b              B        |L1.22776|
                  |L1.22688|
0058a0  48f9              LDR      r0,|L1.23688|
0058a2  8800              LDRH     r0,[r0,#0]            ;7662  ; t_ext
0058a4  f8ad0000          STRH     r0,[sp,#0]            ;7662
                  |L1.22696|
0058a8  4ef8              LDR      r6,|L1.23692|
0058aa  f9bd1000          LDRSH    r1,[sp,#0]            ;7664
0058ae  6031              STR      r1,[r6,#0]            ;7664  ; mat_temper
0058b0  48f7              LDR      r0,|L1.23696|
0058b2  2900              CMP      r1,#0                 ;7666
0058b4  f9b00000          LDRSH    r0,[r0,#0]            ;7666
0058b8  db12              BLT      |L1.22752|
0058ba  2928              CMP      r1,#0x28              ;7669
0058bc  dd02              BLE      |L1.22724|
0058be  f04f0128          MOV      r1,#0x28              ;7669
0058c2  6031              STR      r1,[r6,#0]            ;7669  ; mat_temper
                  |L1.22724|
0058c4  eba30100          SUB      r1,r3,r0              ;7670
0058c8  eb010181          ADD      r1,r1,r1,LSL #2       ;7670
0058cc  ea4f0141          LSL      r1,r1,#1              ;7670
0058d0  6833              LDR      r3,[r6,#0]            ;7671  ; mat_temper
0058d2  fb01f103          MUL      r1,r1,r3              ;7671
0058d6  f04f03c8          MOV      r3,#0xc8              ;7672
0058da  fb91f1f3          SDIV     r1,r1,r3              ;7672
0058de  4408              ADD      r0,r0,r1              ;7673
                  |L1.22752|
0058e0  7fa9              LDRB     r1,[r5,#0x1e]         ;7675  ; spc_stat
0058e2  2902              CMP      r1,#2                 ;7675
0058e4  d107              BNE      |L1.22774|
0058e6  49eb              LDR      r1,|L1.23700|
0058e8  7809              LDRB     r1,[r1,#0]            ;7675  ; sk_stat
0058ea  2901              CMP      r1,#1                 ;7675
0058ec  d002              BEQ      |L1.22772|
0058ee  49ea              LDR      r1,|L1.23704|
0058f0  8809              LDRH     r1,[r1,#0]            ;7675  ; VZ_CH_VENT_BLOK
0058f2  b901              CBNZ     r1,|L1.22774|
                  |L1.22772|
0058f4  4610              MOV      r0,r2
                  |L1.22774|
;;;7678   		}
;;;7679   	u_necc=(unsigned int)temp_SL;
0058f6  8020              STRH     r0,[r4,#0]
                  |L1.22776|
;;;7680   	///u_necc=3456;
;;;7681   	}  
;;;7682   
;;;7683   //u_necc=2355;
;;;7684   
;;;7685   if((speedChIsOn)||(sp_ch_stat==scsWRK))
0058f8  48e8              LDR      r0,|L1.23708|
0058fa  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
0058fc  b918              CBNZ     r0,|L1.22790|
0058fe  48e8              LDR      r0,|L1.23712|
005900  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005902  2802              CMP      r0,#2
005904  d102              BNE      |L1.22796|
                  |L1.22790|
;;;7686   	{
;;;7687   	u_necc=speedChrgVolt;
005906  48e7              LDR      r0,|L1.23716|
005908  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
00590a  8020              STRH     r0,[r4,#0]
                  |L1.22796|
;;;7688   	}
;;;7689   if(hv_vz_stat==hvsWRK)
00590c  48e6              LDR      r0,|L1.23720|
00590e  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005910  2805              CMP      r0,#5
005912  d100              BNE      |L1.22806|
;;;7690   	{
;;;7691   	u_necc=UVZ;
005914  8022              STRH     r2,[r4,#0]
                  |L1.22806|
;;;7692   	}
;;;7693   if(vz1_stat==vz1sWRK)
005916  7868              LDRB     r0,[r5,#1]  ; vz1_stat
005918  280a              CMP      r0,#0xa
00591a  d102              BNE      |L1.22818|
;;;7694   	{
;;;7695   	u_necc=UZ_U;
00591c  48e3              LDR      r0,|L1.23724|
00591e  8800              LDRH     r0,[r0,#0]  ; UZ_U
005920  8020              STRH     r0,[r4,#0]
                  |L1.22818|
;;;7696   	}
;;;7697   if(vz2_stat==vz2sWRK1)
005922  78e8              LDRB     r0,[r5,#3]  ; vz2_stat
005924  280a              CMP      r0,#0xa
005926  d102              BNE      |L1.22830|
;;;7698   	{
;;;7699   	u_necc=FZ_U1;
005928  49e1              LDR      r1,|L1.23728|
00592a  8809              LDRH     r1,[r1,#0]  ; FZ_U1
00592c  8021              STRH     r1,[r4,#0]
                  |L1.22830|
;;;7700   	}
;;;7701   if(vz2_stat==vz2sWRK2)
00592e  280b              CMP      r0,#0xb
005930  d102              BNE      |L1.22840|
;;;7702   	{
;;;7703   	u_necc=FZ_U2;
005932  48e0              LDR      r0,|L1.23732|
005934  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005936  8020              STRH     r0,[r4,#0]
                  |L1.22840|
;;;7704   	}
;;;7705   
;;;7706   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005938  48df              LDR      r0,|L1.23736|
00593a  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
00593c  2801              CMP      r0,#1
00593e  d001              BEQ      |L1.22852|
005940  2802              CMP      r0,#2
005942  d102              BNE      |L1.22858|
                  |L1.22852|
;;;7707   	{
;;;7708   	u_necc=U_AVT;
005944  48dd              LDR      r0,|L1.23740|
005946  8800              LDRH     r0,[r0,#0]  ; U_AVT
005948  8020              STRH     r0,[r4,#0]
                  |L1.22858|
;;;7709   	}
;;;7710   
;;;7711   if(mess_find_unvol(MESS2UNECC_HNDL))
00594a  20be              MOVS     r0,#0xbe
00594c  f7fffffe          BL       mess_find_unvol
005950  b128              CBZ      r0,|L1.22878|
;;;7712   	{		
;;;7713   	if(mess_data[0]==PARAM_UNECC_SET)
005952  48db              LDR      r0,|L1.23744|
005954  6801              LDR      r1,[r0,#0]  ; mess_data
005956  29bf              CMP      r1,#0xbf
005958  d101              BNE      |L1.22878|
;;;7714   		{
;;;7715   		u_necc=mess_data[1];
00595a  6840              LDR      r0,[r0,#4]  ; mess_data
00595c  8020              STRH     r0,[r4,#0]
                  |L1.22878|
;;;7716   		}		
;;;7717   	} 
;;;7718   
;;;7719   //if(ICA_EN)u_necc+=ica_u_necc;
;;;7720   #endif
;;;7721   
;;;7722   
;;;7723   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;7724   
;;;7725   #ifndef UKU_TELECORE2015
;;;7726   #ifndef UKU_TELECORE2017
;;;7727   if(unh_cnt0<10)
;;;7728   	{
;;;7729   	unh_cnt0++;
;;;7730   	if(unh_cnt0>=10)
;;;7731   		{
;;;7732   		unh_cnt0=0;
;;;7733   		b1Hz_unh=1;
;;;7734   		}
;;;7735   	}
;;;7736   
;;;7737   if(unh_cnt1<5)
;;;7738   	{
;;;7739   	unh_cnt1++;
;;;7740   	if(unh_cnt1==5)
;;;7741   		{
;;;7742   		unh_cnt1=0;
;;;7743   //		b2Hz_unh=1;
;;;7744   		}
;;;7745   	} 
;;;7746   
;;;7747   
;;;7748   
;;;7749   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7750   	{		
;;;7751   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7752   		{
;;;7753   		u_necc=mess_data[1];
;;;7754   		}		
;;;7755   	}
;;;7756   
;;;7757   
;;;7758   else if(b1Hz_unh)
;;;7759   	{
;;;7760   	
;;;7761   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;7762   		{
;;;7763   		
;;;7764   		u_necc=U0B;
;;;7765   		#ifdef IPS_SGEP_GAZPROM
;;;7766   		u_necc=UB0;
;;;7767   		#endif
;;;7768   		}
;;;7769   	else 
;;;7770   		{
;;;7771   		if(BAT_TYPE==0) //если батарея обычная
;;;7772   			{
;;;7773   			for(i=0;i<2;i++)
;;;7774   				{
;;;7775   				if(BAT_IS_ON[i]==bisON)
;;;7776   					{
;;;7777   					if(bat[i]._nd)t[i]=20;
;;;7778   					else t[i]=bat[i]._Tb;
;;;7779   					}
;;;7780   				else
;;;7781   					{
;;;7782   					t[i]=-20;
;;;7783   					}
;;;7784   				}
;;;7785   			if(t[0]>t[1])mat_temper=t[0];
;;;7786   			else mat_temper=t[1];
;;;7787   			
;;;7788   		
;;;7789   			if(mat_temper<0)temp_SL=UB0; 
;;;7790   			else 
;;;7791   				{
;;;7792   				if(mat_temper>40)mat_temper=40; 
;;;7793   				temp_SL=(UB20-UB0)*10;
;;;7794   				temp_SL*=mat_temper;
;;;7795   				temp_SL/=200;
;;;7796   				temp_SL+=UB0;
;;;7797   				}
;;;7798   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7799   				{
;;;7800   				temp_SL=UVZ;
;;;7801   				}
;;;7802   			u_necc=(unsigned int)temp_SL;
;;;7803   			}
;;;7804   		else if(BAT_TYPE==1) //если батарея китайская
;;;7805   			{
;;;7806   			u_necc=U0B;
;;;7807   					
;;;7808   			u_necc=bat[0]._Ub+10;
;;;7809   
;;;7810   			
;;;7811   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7812   				{
;;;7813   				u_necc=UVZ;
;;;7814   				}
;;;7815   			if(u_necc>=UB0) u_necc=UB0;
;;;7816   			if(u_necc>=UB20) u_necc=UB20;
;;;7817   			}
;;;7818   		}  
;;;7819   	}
;;;7820   #endif
;;;7821   #endif
;;;7822   
;;;7823   #ifdef UKU_TELECORE2015
;;;7824   
;;;7825   if(unh_cnt0<10)
;;;7826   	{
;;;7827   	unh_cnt0++;
;;;7828   	if(unh_cnt0>=10)
;;;7829   		{
;;;7830   		unh_cnt0=0;
;;;7831   		b1Hz_unh=1;
;;;7832   		}
;;;7833   	}
;;;7834   
;;;7835   if(unh_cnt1<5)
;;;7836   	{
;;;7837   	unh_cnt1++;
;;;7838   	if(unh_cnt1==5)
;;;7839   		{
;;;7840   		unh_cnt1=0;
;;;7841   //		b2Hz_unh=1;
;;;7842   		}
;;;7843   	} 
;;;7844   
;;;7845   
;;;7846   
;;;7847   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7848   	{		
;;;7849   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7850   		{
;;;7851   		u_necc=mess_data[1];
;;;7852   		}		
;;;7853   	}
;;;7854   
;;;7855   
;;;7856   else if(b1Hz_unh)
;;;7857   	{
;;;7858   	b1Hz_unh=0;
;;;7859   
;;;7860   	if(BAT_TYPE==0)
;;;7861   		{
;;;7862   		if(bat[0]._nd)mat_temper=20;
;;;7863   		else mat_temper=bat[0]._Tb;
;;;7864   
;;;7865   			
;;;7866   		if(mat_temper<0)temp_SL=UB0; 
;;;7867   		else 
;;;7868   			{
;;;7869   			if(mat_temper>40)mat_temper=40; 
;;;7870   			temp_SL=(UB20-UB0)*10;
;;;7871   			temp_SL*=mat_temper;
;;;7872   			temp_SL/=200;
;;;7873   			temp_SL+=UB0;
;;;7874   			}
;;;7875   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7876   			{
;;;7877   			temp_SL=UVZ;
;;;7878   			}
;;;7879   		u_necc=(unsigned int)temp_SL;
;;;7880   	///u_necc=3456;
;;;7881   		}
;;;7882   	else if(BAT_TYPE==1)
;;;7883   		{
;;;7884   		
;;;7885   		gran(&DU_LI_BAT,1,30);
;;;7886   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;7887   		gran(&u_necc,0,UB0);
;;;7888   		gran(&u_necc,0,UB20);
;;;7889   		gran(&u_necc,0,540);		
;;;7890   
;;;7891   
;;;7892   		if(li_bat._batStat!=bsOK)
;;;7893   			{
;;;7894   			u_necc=U0B;
;;;7895   			}
;;;7896   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7897   			{
;;;7898   			u_necc=UVZ;
;;;7899   			}
;;;7900   		/* 
;;;7901   		u_necc=U0B;
;;;7902   		
;;;7903   
;;;7904   	
;;;7905   		u_necc=UB0;
;;;7906   		u_necc=li_bat._Ub+10;
;;;7907   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;7908   			{
;;;7909   			lakb_error_cnt++;
;;;7910   			if(lakb_error_cnt>=30)
;;;7911   				{
;;;7912   				lakb_error_cnt=30;
;;;7913   				u_necc=U0B;
;;;7914   				}
;;;7915   			}
;;;7916   		else lakb_error_cnt=0;*/
;;;7917   		}
;;;7918   	else if(BAT_TYPE==2)
;;;7919   		{
;;;7920   		u_necc=U0B;
;;;7921   		
;;;7922   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7923   			{
;;;7924   			u_necc=UVZ;
;;;7925   			}
;;;7926   	
;;;7927   		u_necc=UB0;
;;;7928   		}
;;;7929   
;;;7930   	else if(BAT_TYPE==3)
;;;7931   		{
;;;7932   		u_necc=U0B;
;;;7933   		
;;;7934   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7935   			{
;;;7936   			u_necc=UVZ;
;;;7937   			}
;;;7938   
;;;7939   		gran(&DU_LI_BAT,1,30);
;;;7940   
;;;7941   
;;;7942   		if(lakbNotErrorNum==0)
;;;7943   			{
;;;7944   			u_necc=U0B;
;;;7945   			}
;;;7946   		else 
;;;7947   			{
;;;7948   			signed short i;
;;;7949   			//signed short u_necc_max;
;;;7950   			//u_necc_max=0;
;;;7951   			char soc_flag=0;
;;;7952   
;;;7953   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;7954   				{
;;;7955   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;7956   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;7957   				}
;;;7958   
;;;7959   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;7960   			}
;;;7961   		gran(&u_necc,0,UB0);
;;;7962   		//gran(&u_necc,0,UB20);
;;;7963   		gran(&u_necc,0,540);
;;;7964   		}
;;;7965   	}
;;;7966   
;;;7967   #endif 
;;;7968   
;;;7969   #ifdef UKU_TELECORE2017
;;;7970   
;;;7971   if(unh_cnt0<10)
;;;7972   	{
;;;7973   	unh_cnt0++;
;;;7974   	if(unh_cnt0>=10)
;;;7975   		{
;;;7976   		unh_cnt0=0;
;;;7977   		b1Hz_unh=1;
;;;7978   		}
;;;7979   	}
;;;7980   
;;;7981   if(unh_cnt1<5)
;;;7982   	{
;;;7983   	unh_cnt1++;
;;;7984   	if(unh_cnt1==5)
;;;7985   		{
;;;7986   		unh_cnt1=0;
;;;7987   //		b2Hz_unh=1;
;;;7988   		}
;;;7989   	} 
;;;7990   
;;;7991   
;;;7992   
;;;7993   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7994   	{		
;;;7995   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7996   		{
;;;7997   		u_necc=mess_data[1];
;;;7998   		}		
;;;7999   	}
;;;8000   
;;;8001   
;;;8002   else if(b1Hz_unh)
;;;8003   	{
;;;8004   	b1Hz_unh=0;
;;;8005   
;;;8006   	if(BAT_TYPE==0)
;;;8007   		{
;;;8008   		if(bat[0]._nd)mat_temper=20;
;;;8009   		else mat_temper=bat[0]._Tb;
;;;8010   
;;;8011   			
;;;8012   		if(mat_temper<0)temp_SL=UB0; 
;;;8013   		else 
;;;8014   			{
;;;8015   			if(mat_temper>40)mat_temper=40; 
;;;8016   			temp_SL=(UB20-UB0)*10;
;;;8017   			temp_SL*=mat_temper;
;;;8018   			temp_SL/=200;
;;;8019   			temp_SL+=UB0;
;;;8020   			}
;;;8021   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8022   			{
;;;8023   			temp_SL=UVZ;
;;;8024   			}
;;;8025   		u_necc=(unsigned int)temp_SL;
;;;8026   	///u_necc=3456;
;;;8027   		}
;;;8028   	else if(BAT_TYPE==1)
;;;8029   		{
;;;8030   		
;;;8031   		gran(&DU_LI_BAT,1,30);
;;;8032   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8033   		gran(&u_necc,0,UB0);
;;;8034   		gran(&u_necc,0,UB20);
;;;8035   		gran(&u_necc,0,540);		
;;;8036   
;;;8037   
;;;8038   		if(li_bat._batStat!=bsOK)
;;;8039   			{
;;;8040   			u_necc=U0B;
;;;8041   			}
;;;8042   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8043   			{
;;;8044   			u_necc=UVZ;
;;;8045   			}
;;;8046   		}
;;;8047   	else if(BAT_TYPE==2)
;;;8048   		{
;;;8049   		u_necc=U0B;
;;;8050   		
;;;8051   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8052   			{
;;;8053   			u_necc=UVZ;
;;;8054   			}
;;;8055   	
;;;8056   		u_necc=UB0;
;;;8057   		}
;;;8058   
;;;8059   	else if(BAT_TYPE==3)
;;;8060   		{
;;;8061   		u_necc=U0B;
;;;8062   		
;;;8063   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8064   			{
;;;8065   			u_necc=UVZ;
;;;8066   			}
;;;8067   
;;;8068   		gran(&DU_LI_BAT,1,30);
;;;8069   
;;;8070   
;;;8071   		if(lakbNotErrorNum==0)
;;;8072   			{
;;;8073   			u_necc=U0B;
;;;8074   			}
;;;8075   		else 
;;;8076   			{
;;;8077   			signed short i;
;;;8078   			//signed short u_necc_max;
;;;8079   			//u_necc_max=0;
;;;8080   			char soc_flag=0;
;;;8081   
;;;8082   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8083   				{
;;;8084   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8085   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8086   				}
;;;8087   
;;;8088   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8089   			}
;;;8090   		gran(&u_necc,0,UB0);
;;;8091   		//gran(&u_necc,0,UB20);
;;;8092   		gran(&u_necc,0,540);
;;;8093   		}
;;;8094   	}
;;;8095   
;;;8096   #endif 
;;;8097   //u_necc=2356;
;;;8098   
;;;8099   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;8100   	{
;;;8101   	u_necc=speedChrgVolt;
;;;8102   	}
;;;8103   #endif//gran(&u_necc,400,UMAX);
;;;8104   
;;;8105   
;;;8106   
;;;8107   temp_L=(signed long) u_necc;
00595e  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;8108   temp_L*=98L;
005962  f04f0162          MOV      r1,#0x62
005966  fb00f101          MUL      r1,r0,r1
;;;8109   temp_L/=100L;
00596a  f04f0264          MOV      r2,#0x64
00596e  fb91f1f2          SDIV     r1,r1,r2
;;;8110   u_necc_dn=(signed short)temp_L;
005972  4bd4              LDR      r3,|L1.23748|
005974  8019              STRH     r1,[r3,#0]
;;;8111   
;;;8112   temp_L=(signed long) u_necc;
;;;8113   temp_L*=102L;
005976  f04f0166          MOV      r1,#0x66
00597a  fb00f001          MUL      r0,r0,r1
;;;8114   temp_L/=100L;
00597e  fb90f0f2          SDIV     r0,r0,r2
;;;8115   u_necc_up=(signed short)temp_L;
005982  49d1              LDR      r1,|L1.23752|
005984  8008              STRH     r0,[r1,#0]
;;;8116   /*
;;;8117   #ifdef IPS_SGEP_GAZPROM
;;;8118   u_necc=248;
;;;8119   #endif */
;;;8120   }
005986  bdf8              POP      {r3-r7,pc}
;;;8121   
                          ENDP

                  num_necc_hndl PROC
;;;8123   //-----------------------------------------------
;;;8124   void num_necc_hndl(void)
005988  e92d41f0          PUSH     {r4-r8,lr}
;;;8125   {
;;;8126   
;;;8127   static short num_necc_block_cnt;
;;;8128   if(num_necc_block_cnt) num_necc_block_cnt--;
00598c  4cbb              LDR      r4,|L1.23676|
00598e  f9b40032          LDRSH    r0,[r4,#0x32]  ; num_necc_block_cnt
005992  b110              CBZ      r0,|L1.22938|
005994  f1a00001          SUB      r0,r0,#1
005998  8660              STRH     r0,[r4,#0x32]
                  |L1.22938|
;;;8129   
;;;8130   Isumm_=Isumm;
00599a  48cc              LDR      r0,|L1.23756|
00599c  4dcc              LDR      r5,|L1.23760|
00599e  8800              LDRH     r0,[r0,#0]  ; Isumm
0059a0  8028              STRH     r0,[r5,#0]
;;;8131   
;;;8132   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
0059a2  4ecc              LDR      r6,|L1.23764|
0059a4  270a              MOVS     r7,#0xa
0059a6  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0059aa  2800              CMP      r0,#0
0059ac  da06              BGE      |L1.22972|
0059ae  f7fffffe          BL       abs
0059b2  fb90f0f7          SDIV     r0,r0,r7
0059b6  8829              LDRH     r1,[r5,#0]  ; Isumm_
0059b8  4408              ADD      r0,r0,r1
0059ba  8028              STRH     r0,[r5,#0]
                  |L1.22972|
;;;8133   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
0059bc  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0059c0  2800              CMP      r0,#0
0059c2  da06              BGE      |L1.22994|
0059c4  f7fffffe          BL       abs
0059c8  fb90f0f7          SDIV     r0,r0,r7
0059cc  8829              LDRH     r1,[r5,#0]  ; Isumm_
0059ce  4408              ADD      r0,r0,r1
0059d0  8028              STRH     r0,[r5,#0]
                  |L1.22994|
;;;8134   
;;;8135   num_necc_up=(Isumm_/((signed short)IMAX))+1;
0059d2  49c1              LDR      r1,|L1.23768|
0059d4  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
0059d8  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
0059dc  fb90f1f1          SDIV     r1,r0,r1
0059e0  f1010101          ADD      r1,r1,#1
0059e4  b2c9              UXTB     r1,r1
0059e6  76a1              STRB     r1,[r4,#0x1a]
;;;8136   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;8137   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;8138   
;;;8139   num_necc_down=(Isumm_/((signed short)IMIN))+1;
0059e8  4abc              LDR      r2,|L1.23772|
0059ea  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
0059ee  fb90f0f2          SDIV     r0,r0,r2
0059f2  f1000001          ADD      r0,r0,#1
0059f6  b2c2              UXTB     r2,r0
0059f8  76e2              STRB     r2,[r4,#0x1b]
;;;8140   
;;;8141   if(num_necc_up>num_necc)
0059fa  48b9              LDR      r0,|L1.23776|
;;;8142   	{
;;;8143   	num_necc=num_necc_up;
;;;8144   	num_necc_block_cnt=60;
0059fc  f04f053c          MOV      r5,#0x3c
005a00  f9b03000          LDRSH    r3,[r0,#0]            ;8141  ; num_necc
005a04  4299              CMP      r1,r3                 ;8141
005a06  dd02              BLE      |L1.23054|
005a08  8001              STRH     r1,[r0,#0]            ;8143
005a0a  8665              STRH     r5,[r4,#0x32]
005a0c  e005              B        |L1.23066|
                  |L1.23054|
;;;8145   	}
;;;8146   else if(num_necc_down<num_necc)
005a0e  429a              CMP      r2,r3
005a10  da03              BGE      |L1.23066|
;;;8147   	{
;;;8148   	if(!num_necc_block_cnt)
005a12  8e61              LDRH     r1,[r4,#0x32]  ; num_necc_block_cnt
005a14  b909              CBNZ     r1,|L1.23066|
;;;8149   		{
;;;8150   		num_necc=num_necc_down;
005a16  8002              STRH     r2,[r0,#0]
;;;8151   		num_necc_block_cnt=60;
005a18  8665              STRH     r5,[r4,#0x32]
                  |L1.23066|
;;;8152   		}
;;;8153   	}
;;;8154   
;;;8155   if(PAR) num_necc=NUMIST;
005a1a  49b2              LDR      r1,|L1.23780|
005a1c  880a              LDRH     r2,[r1,#0]  ; PAR
005a1e  49b2              LDR      r1,|L1.23784|
005a20  b10a              CBZ      r2,|L1.23078|
005a22  880a              LDRH     r2,[r1,#0]  ; NUMIST
005a24  8002              STRH     r2,[r0,#0]
                  |L1.23078|
;;;8156   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8157   if(bPARALLEL) num_necc=NUMIST;
005a26  f8942028          LDRB     r2,[r4,#0x28]  ; bPARALLEL
005a2a  b10a              CBZ      r2,|L1.23088|
005a2c  880a              LDRH     r2,[r1,#0]  ; NUMIST
005a2e  8002              STRH     r2,[r0,#0]
                  |L1.23088|
;;;8158   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005a30  7862              LDRB     r2,[r4,#1]  ; vz1_stat
005a32  2a0a              CMP      r2,#0xa
005a34  d101              BNE      |L1.23098|
005a36  880a              LDRH     r2,[r1,#0]  ; NUMIST
005a38  8002              STRH     r2,[r0,#0]
                  |L1.23098|
;;;8159   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005a3a  78e2              LDRB     r2,[r4,#3]  ; vz2_stat
005a3c  2a0a              CMP      r2,#0xa
005a3e  d001              BEQ      |L1.23108|
005a40  2a0b              CMP      r2,#0xb
005a42  d101              BNE      |L1.23112|
                  |L1.23108|
005a44  880a              LDRH     r2,[r1,#0]  ; NUMIST
005a46  8002              STRH     r2,[r0,#0]
                  |L1.23112|
;;;8160   #endif
;;;8161   
;;;8162   gran(&num_necc,1,NUMIST);
005a48  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005a4c  e8bd41f0          POP      {r4-r8,lr}
005a50  2101              MOVS     r1,#1
005a52  48a3              LDR      r0,|L1.23776|
005a54  f7ffbffe          B.W      gran
;;;8163   
;;;8164   }
;;;8165   
                          ENDP

                  cntrl_hndl PROC
;;;8168   //-----------------------------------------------
;;;8169   void cntrl_hndl(void)
005a58  e92d5ff0          PUSH     {r4-r12,lr}
;;;8170   {
;;;8171   
;;;8172   
;;;8173   
;;;8174   IZMAX_=IZMAX;
005a5c  48a3              LDR      r0,|L1.23788|
005a5e  4c87              LDR      r4,|L1.23676|
005a60  8800              LDRH     r0,[r0,#0]  ; IZMAX
005a62  f8a40046          STRH     r0,[r4,#0x46]
;;;8175   
;;;8176   //cntrl_hndl_plazma=10;
;;;8177   
;;;8178   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005a66  488d              LDR      r0,|L1.23708|
005a68  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005a6a  b918              CBNZ     r0,|L1.23156|
005a6c  488c              LDR      r0,|L1.23712|
005a6e  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005a70  2802              CMP      r0,#2
005a72  d103              BNE      |L1.23164|
                  |L1.23156|
005a74  489e              LDR      r0,|L1.23792|
005a76  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005a78  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.23164|
;;;8179   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005a7c  7860              LDRB     r0,[r4,#1]  ; vz1_stat
005a7e  280a              CMP      r0,#0xa
005a80  d103              BNE      |L1.23178|
005a82  489c              LDR      r0,|L1.23796|
005a84  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005a86  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.23178|
;;;8180   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005a8a  78e0              LDRB     r0,[r4,#3]  ; vz2_stat
005a8c  280a              CMP      r0,#0xa
005a8e  d103              BNE      |L1.23192|
005a90  4999              LDR      r1,|L1.23800|
005a92  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005a94  f8a41046          STRH     r1,[r4,#0x46]
                  |L1.23192|
;;;8181   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005a98  280b              CMP      r0,#0xb
005a9a  d103              BNE      |L1.23204|
005a9c  4897              LDR      r0,|L1.23804|
005a9e  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005aa0  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.23204|
;;;8182   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;8183   
;;;8184   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005aa4  f9b4006e          LDRSH    r0,[r4,#0x6e]  ; cntrl_stat_blok_cnt
005aa8  b118              CBZ      r0,|L1.23218|
005aaa  f1a00001          SUB      r0,r0,#1
005aae  f8a4006e          STRH     r0,[r4,#0x6e]
                  |L1.23218|
;;;8185   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005ab2  f9b40070          LDRSH    r0,[r4,#0x70]  ; cntrl_stat_blok_cnt_
005ab6  b118              CBZ      r0,|L1.23232|
005ab8  f1a00001          SUB      r0,r0,#1
005abc  f8a40070          STRH     r0,[r4,#0x70]
                  |L1.23232|
;;;8186   
;;;8187   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005ac0  4884              LDR      r0,|L1.23764|
005ac2  f04f080a          MOV      r8,#0xa               ;8179
005ac6  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005aca  0789              LSLS     r1,r1,#30
005acc  d103              BNE      |L1.23254|
005ace  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005ad2  0780              LSLS     r0,r0,#30
005ad4  d005              BEQ      |L1.23266|
                  |L1.23254|
005ad6  f8b40046          LDRH     r0,[r4,#0x46]  ; IZMAX_
005ada  fbb0f0f8          UDIV     r0,r0,r8
005ade  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.23266|
;;;8188   
;;;8189   
;;;8190   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8191   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005ae2  4887              LDR      r0,|L1.23808|
005ae4  2601              MOVS     r6,#1
005ae6  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005aea  1e49              SUBS     r1,r1,#1
005aec  2905              CMP      r1,#5
005aee  d300              BCC      |L1.23282|
005af0  8006              STRH     r6,[r0,#0]
                  |L1.23282|
;;;8192   if(ch_cnt0<(10*REG_SPEED))
005af2  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005af6  7c61              LDRB     r1,[r4,#0x11]  ; ch_cnt0
005af8  eb000080          ADD      r0,r0,r0,LSL #2
005afc  2500              MOVS     r5,#0                 ;8178
005afe  ebb10f40          CMP      r1,r0,LSL #1
005b02  da08              BGE      |L1.23318|
;;;8193   	{
;;;8194   	ch_cnt0++;
005b04  f1010101          ADD      r1,r1,#1
005b08  b2c9              UXTB     r1,r1
005b0a  7461              STRB     r1,[r4,#0x11]
;;;8195   	if(ch_cnt0>=10*REG_SPEED)
005b0c  ebb10f40          CMP      r1,r0,LSL #1
005b10  db01              BLT      |L1.23318|
;;;8196   		{
;;;8197   		ch_cnt0=0;
005b12  7465              STRB     r5,[r4,#0x11]
;;;8198   		b1Hz_ch=1;
005b14  74a6              STRB     r6,[r4,#0x12]
                  |L1.23318|
;;;8199   		}
;;;8200   	}
;;;8201   #endif
;;;8202   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8203   if(ch_cnt0<10)
;;;8204   	{
;;;8205   	ch_cnt0++;
;;;8206   	if(ch_cnt0>=10)
;;;8207   		{
;;;8208   		ch_cnt0=0;
;;;8209   		b1Hz_ch=1;
;;;8210   		}
;;;8211   	}
;;;8212   #endif
;;;8213   
;;;8214   
;;;8215   if(mess_find_unvol(MESS2CNTRL_HNDL))
005b16  20e1              MOVS     r0,#0xe1
005b18  f7fffffe          BL       mess_find_unvol
;;;8216   	{
;;;8217   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;8218   		{
;;;8219   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;8220   		}
;;;8221   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;8222   		{
;;;8223   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;8224   		}
;;;8225   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;8226   		{
;;;8227   		static char cntrlStatIsDownCnt;
;;;8228   		cntrl_stat--;
;;;8229   
;;;8230   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;8231   			{
;;;8232   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;8233   			}
;;;8234   		else 
;;;8235   			{
;;;8236   			cntrlStatIsDownCnt=0;
;;;8237   			}
;;;8238   
;;;8239   		}
;;;8240   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;8241   		{
;;;8242   		cntrl_stat/*_new*/=mess_data[1];
;;;8243   		}
;;;8244   
;;;8245   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;8246   		{
;;;8247   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8248   		if(bps_U>u_necc)
005b1c  f8dfc1e4          LDR      r12,|L1.23812|
005b20  4a57              LDR      r2,|L1.23680|
;;;8249   			{
;;;8250   			cntrl_hndl_plazma=11;
;;;8251   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8252   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8253   			}
;;;8254   		else if(bps_U<u_necc)
;;;8255   			{
;;;8256   			cntrl_hndl_plazma=12;	
;;;8257   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8258   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8259   			}
;;;8260   		#elif defined(UKU_220)
;;;8261   		if(load_U>u_necc)
;;;8262   			{
;;;8263   			cntrl_hndl_plazma=13;
;;;8264   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8265   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8266   			}
;;;8267   		else if(load_U<u_necc)
;;;8268   			{
;;;8269   			cntrl_hndl_plazma=14;	
;;;8270   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8271   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8272   			}
;;;8273   		#elif defined(UKU_220_V2)
;;;8274   		if(load_U>u_necc)
;;;8275   			{
;;;8276   			cntrl_hndl_plazma=15;
;;;8277   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8278   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8279   			}
;;;8280   		else if(load_U<u_necc)
;;;8281   			{
;;;8282   			cntrl_hndl_plazma=16;	
;;;8283   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8284   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8285   			}
;;;8286   		#else
;;;8287   
;;;8288   		if(load_U>u_necc)
;;;8289   			{
;;;8290   			cntrl_hndl_plazma=17;
;;;8291   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8292   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8293   			}
;;;8294   		else if(load_U<u_necc)
;;;8295   			{
;;;8296   			cntrl_hndl_plazma=18;	
;;;8297   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8298   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;8299   			}
;;;8300   		#endif	
;;;8301   	 	}
;;;8302   
;;;8303   	/*gran(&cntrl_stat_new,10,1010);			
;;;8304   	cntrl_stat_old=cntrl_stat_new;
;;;8305   	cntrl_stat=cntrl_stat_new;*/
;;;8306   	}
;;;8307   
;;;8308   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8309   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005b22  f8df91e4          LDR      r9,|L1.23816|
;;;8310   	{
;;;8311   	cntrl_stat_new=cntrl_stat_old;
;;;8312   	cntrl_hndl_plazma=19;
;;;8313   	if((Ibmax/10)>(2*IZMAX_))
;;;8314   		{
;;;8315   		cntrl_hndl_plazma=20;
;;;8316             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8317   		else	cntrl_stat_new-=10;
;;;8318   		}		
;;;8319   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;8320   		{
;;;8321   		cntrl_hndl_plazma=21;
;;;8322             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8323             else	cntrl_stat_new-=3;
;;;8324   		}   
;;;8325   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;8326   		{
;;;8327   		cntrl_hndl_plazma=22;
;;;8328   		cntrl_stat_new--;
;;;8329   		}
;;;8330   		
;;;8331   	else if(bps_U<u_necc)
;;;8332   		{
;;;8333   		cntrl_hndl_plazma=23;
;;;8334   		if(bps_U<(u_necc-(UB0-UB20)))
;;;8335   			{
;;;8336   			cntrl_hndl_plazma=24;
;;;8337   			if(Ibmax<0)
;;;8338   				{
;;;8339   				cntrl_hndl_plazma=25;
;;;8340                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8341   				else cntrl_stat_new+=10;
;;;8342   				}
;;;8343   			else if(Ibmax<(IZMAX_*5))
;;;8344   				{
;;;8345   				cntrl_hndl_plazma=26;
;;;8346                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8347   				else	cntrl_stat_new+=2;
;;;8348   				}
;;;8349   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8350   				{
;;;8351   				cntrl_hndl_plazma=27;
;;;8352   				cntrl_stat_new++;
;;;8353   				}					
;;;8354   			}
;;;8355   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;8356   			{
;;;8357   			cntrl_hndl_plazma=28;
;;;8358   			if(Ibmax<(IZMAX_*5))
;;;8359   				{
;;;8360   				cntrl_hndl_plazma=29;
;;;8361                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8362   				else	cntrl_stat_new+=2;
;;;8363   				}
;;;8364   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8365   				{
;;;8366   				cntrl_hndl_plazma=30;
;;;8367   				cntrl_stat_new++;
;;;8368   				}					
;;;8369   			}	
;;;8370   		else if(bps_U<(u_necc-1))
;;;8371   			{
;;;8372   			cntrl_hndl_plazma=31;
;;;8373   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8374   				{
;;;8375   				cntrl_hndl_plazma=32;
;;;8376   				cntrl_stat_new++;
;;;8377   				}					
;;;8378   			}					
;;;8379   		}	
;;;8380   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;8381   		{ 	
;;;8382   		cntrl_hndl_plazma=33;
;;;8383   		if(bps_U>(u_necc+(UB0-UB20)))
;;;8384   			{
;;;8385   			cntrl_hndl_plazma=34;
;;;8386                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8387   			else	cntrl_stat_new-=10;
;;;8388   			}
;;;8389   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;8390   			{
;;;8391   			cntrl_hndl_plazma=35;
;;;8392                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8393   			else cntrl_stat_new-=2;
;;;8394   			}	
;;;8395   		else if(bps_U>(u_necc+1))
;;;8396   			{
;;;8397   			cntrl_hndl_plazma=36;
;;;8398   			cntrl_stat_new--;
;;;8399   			}					
;;;8400   		}
;;;8401   
;;;8402   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;8403   		{
;;;8404   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;8405   		}
;;;8406   
;;;8407   	gran(&cntrl_stat_new,10,1010);			
;;;8408   	cntrl_stat_old=cntrl_stat_new;
;;;8409   	cntrl_stat=cntrl_stat_new;
;;;8410   	
;;;8411   	if(ICA_EN==0)
;;;8412   		{
;;;8413   		if(ica_cntrl_hndl_cnt)
005b26  4f79              LDR      r7,|L1.23820|
005b28  b398              CBZ      r0,|L1.23442|
005b2a  4965              LDR      r1,|L1.23744|
005b2c  6808              LDR      r0,[r1,#0]            ;8217  ; mess_data
005b2e  2864              CMP      r0,#0x64              ;8217
005b30  d008              BEQ      |L1.23364|
005b32  2869              CMP      r0,#0x69              ;8221
005b34  d00b              BEQ      |L1.23374|
005b36  286e              CMP      r0,#0x6e              ;8225
005b38  d00f              BEQ      |L1.23386|
005b3a  28e5              CMP      r0,#0xe5              ;8240
005b3c  d02c              BEQ      |L1.23448|
005b3e  28e6              CMP      r0,#0xe6              ;8245
005b40  d02d              BEQ      |L1.23454|
                  |L1.23362|
005b42  e221              B        |L1.24456|
                  |L1.23364|
005b44  6848              LDR      r0,[r1,#4]            ;8219  ; mess_data
005b46  8de1              LDRH     r1,[r4,#0x2e]         ;8219  ; cntrl_stat_old
005b48  4408              ADD      r0,r0,r1              ;8219
005b4a  85a0              STRH     r0,[r4,#0x2c]         ;8219
005b4c  e21c              B        |L1.24456|
                  |L1.23374|
005b4e  6848              LDR      r0,[r1,#4]            ;8223  ; mess_data
005b50  8de1              LDRH     r1,[r4,#0x2e]         ;8223  ; cntrl_stat_old
005b52  eba10000          SUB      r0,r1,r0              ;8223
005b56  85a0              STRH     r0,[r4,#0x2c]         ;8223
005b58  e216              B        |L1.24456|
                  |L1.23386|
005b5a  8da0              LDRH     r0,[r4,#0x2c]         ;8228  ; cntrl_stat
005b5c  f1a00001          SUB      r0,r0,#1              ;8228
005b60  b200              SXTH     r0,r0                 ;8228
005b62  85a0              STRH     r0,[r4,#0x2c]         ;8228
005b64  281e              CMP      r0,#0x1e              ;8230
005b66  dd07              BLE      |L1.23416|
005b68  4869              LDR      r0,|L1.23824|
005b6a  496a              LDR      r1,|L1.23828|
005b6c  f9b00000          LDRSH    r0,[r0,#0]            ;8230  ; load_U
005b70  f9b11000          LDRSH    r1,[r1,#0]            ;8230  ; USIGN
005b74  4288              CMP      r0,r1                 ;8230
005b76  da0d              BGE      |L1.23444|
                  |L1.23416|
005b78  7ae0              LDRB     r0,[r4,#0xb]          ;8232  ; cntrlStatIsDownCnt
005b7a  1c40              ADDS     r0,r0,#1              ;8232
005b7c  b2c0              UXTB     r0,r0                 ;8232
005b7e  72e0              STRB     r0,[r4,#0xb]          ;8232
005b80  28fa              CMP      r0,#0xfa              ;8232
005b82  d1de              BNE      |L1.23362|
005b84  230a              MOVS     r3,#0xa               ;8232
005b86  2200              MOVS     r2,#0                 ;8232
005b88  21e7              MOVS     r1,#0xe7              ;8232
005b8a  20e6              MOVS     r0,#0xe6              ;8232
005b8c  f7fffffe          BL       mess_send
005b90  e1fa              B        |L1.24456|
                  |L1.23442|
005b92  e044              B        |L1.23582|
                  |L1.23444|
005b94  72e5              STRB     r5,[r4,#0xb]          ;8236
005b96  e1f7              B        |L1.24456|
                  |L1.23448|
005b98  6848              LDR      r0,[r1,#4]            ;8242  ; mess_data
005b9a  85a0              STRH     r0,[r4,#0x2c]         ;8242
005b9c  e1f4              B        |L1.24456|
                  |L1.23454|
005b9e  f9bc0000          LDRSH    r0,[r12,#0]           ;8248  ; bps_U
005ba2  f9b21000          LDRSH    r1,[r2,#0]            ;8248  ; u_necc
005ba6  4288              CMP      r0,r1                 ;8248
005ba8  dd1a              BLE      |L1.23520|
005baa  f04f020b          MOV      r2,#0xb               ;8250
005bae  f8842029          STRB     r2,[r4,#0x29]         ;8250
005bb2  eba00001          SUB      r0,r0,r1              ;8251
005bb6  2828              CMP      r0,#0x28              ;8251
005bb8  dd07              BLE      |L1.23498|
005bba  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;8251  ; cntrl_stat
005bbe  2800              CMP      r0,#0                 ;8251
005bc0  dd03              BLE      |L1.23498|
005bc2  f1a00005          SUB      r0,r0,#5              ;8251
005bc6  85a0              STRH     r0,[r4,#0x2c]         ;8251
005bc8  e1de              B        |L1.24456|
                  |L1.23498|
005bca  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;8252  ; cntrl_stat
005bce  2800              CMP      r0,#0                 ;8252
005bd0  d0b7              BEQ      |L1.23362|
005bd2  7ca1              LDRB     r1,[r4,#0x12]         ;8252  ; b1Hz_ch
005bd4  2900              CMP      r1,#0                 ;8252
005bd6  d0b4              BEQ      |L1.23362|
005bd8  f1a00001          SUB      r0,r0,#1              ;8252
005bdc  85a0              STRH     r0,[r4,#0x2c]         ;8252
005bde  e1d3              B        |L1.24456|
                  |L1.23520|
005be0  daaf              BGE      |L1.23362|
005be2  f04f020c          MOV      r2,#0xc               ;8256
005be6  f8842029          STRB     r2,[r4,#0x29]         ;8256
005bea  eba10000          SUB      r0,r1,r0              ;8257
005bee  2828              CMP      r0,#0x28              ;8257
005bf0  dd09              BLE      |L1.23558|
005bf2  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;8257  ; cntrl_stat
005bf6  f24031f7          MOV      r1,#0x3f7             ;8257
005bfa  4288              CMP      r0,r1                 ;8257
005bfc  da03              BGE      |L1.23558|
005bfe  f1000005          ADD      r0,r0,#5              ;8257
005c02  85a0              STRH     r0,[r4,#0x2c]         ;8257
005c04  e1c0              B        |L1.24456|
                  |L1.23558|
005c06  f9b4002c          LDRSH    r0,[r4,#0x2c]         ;8258  ; cntrl_stat
005c0a  f5b07f7f          CMP      r0,#0x3fc             ;8258
005c0e  da98              BGE      |L1.23362|
005c10  7ca1              LDRB     r1,[r4,#0x12]         ;8258  ; b1Hz_ch
005c12  2900              CMP      r1,#0                 ;8258
005c14  d095              BEQ      |L1.23362|
005c16  f1000001          ADD      r0,r0,#1              ;8258
005c1a  85a0              STRH     r0,[r4,#0x2c]         ;8258
005c1c  e1b4              B        |L1.24456|
                  |L1.23582|
005c1e  7ca0              LDRB     r0,[r4,#0x12]         ;8309  ; b1Hz_ch
005c20  2800              CMP      r0,#0                 ;8309
005c22  d08e              BEQ      |L1.23362|
005c24  483c              LDR      r0,|L1.23832|
005c26  8800              LDRH     r0,[r0,#0]            ;8309  ; bIBAT_SMKLBR
005c28  b118              CBZ      r0,|L1.23602|
005c2a  f89902e3          LDRB     r0,[r9,#0x2e3]        ;8309  ; bps
005c2e  2828              CMP      r0,#0x28              ;8309
005c30  d987              BLS      |L1.23362|
                  |L1.23602|
005c32  f1040428          ADD      r4,r4,#0x28           ;8311
005c36  f9b40006          LDRSH    r0,[r4,#6]            ;8311  ; cntrl_stat_old
005c3a  8360              STRH     r0,[r4,#0x1a]         ;8311
005c3c  f04f0113          MOV      r1,#0x13              ;8312
005c40  7061              STRB     r1,[r4,#1]            ;8312
005c42  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;8313  ; Ibmax
005c46  8be3              LDRH     r3,[r4,#0x1e]         ;8313  ; IZMAX_
005c48  fb91f8f8          SDIV     r8,r1,r8              ;8313
005c4c  f1a40428          SUB      r4,r4,#0x28           ;8313
005c50  ebb80f43          CMP      r8,r3,LSL #1          ;8313
005c54  dd67              BLE      |L1.23846|
005c56  f04f0114          MOV      r1,#0x14              ;8315
005c5a  f8841029          STRB     r1,[r4,#0x29]         ;8315
005c5e  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8316  ; cntrl_stat_blok_cnt
005c62  b121              CBZ      r1,|L1.23662|
005c64  f1a00001          SUB      r0,r0,#1              ;8316
005c68  f8a40042          STRH     r0,[r4,#0x42]         ;8316
005c6c  e156              B        |L1.24348|
                  |L1.23662|
005c6e  e055              B        |L1.23836|
                  |L1.23664|
                          DCD      TERMOKOMPENS
                  |L1.23668|
                          DCD      UB20
                  |L1.23672|
                          DCD      UVZ
                  |L1.23676|
                          DCD      ||area_number.18||
                  |L1.23680|
                          DCD      u_necc
                  |L1.23684|
                          DCD      ND_EXT
                  |L1.23688|
                          DCD      t_ext
                  |L1.23692|
                          DCD      mat_temper
                  |L1.23696|
                          DCD      UB0
                  |L1.23700|
                          DCD      sk_stat
                  |L1.23704|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.23708|
                          DCD      speedChIsOn
                  |L1.23712|
                          DCD      sp_ch_stat
                  |L1.23716|
                          DCD      speedChrgVolt
                  |L1.23720|
                          DCD      hv_vz_stat
                  |L1.23724|
                          DCD      UZ_U
                  |L1.23728|
                          DCD      FZ_U1
                  |L1.23732|
                          DCD      FZ_U2
                  |L1.23736|
                          DCD      uavt_set_stat
                  |L1.23740|
                          DCD      U_AVT
                  |L1.23744|
                          DCD      mess_data
                  |L1.23748|
                          DCD      u_necc_dn
                  |L1.23752|
                          DCD      u_necc_up
                  |L1.23756|
                          DCD      Isumm
                  |L1.23760|
                          DCD      Isumm_
                  |L1.23764|
                          DCD      bat
                  |L1.23768|
                          DCD      IMAX
                  |L1.23772|
                          DCD      IMIN
                  |L1.23776|
                          DCD      num_necc
                  |L1.23780|
                          DCD      PAR
                  |L1.23784|
                          DCD      NUMIST
                  |L1.23788|
                          DCD      IZMAX
                  |L1.23792|
                          DCD      speedChrgCurr
                  |L1.23796|
                          DCD      UZ_IMAX
                  |L1.23800|
                          DCD      FZ_IMAX1
                  |L1.23804|
                          DCD      FZ_IMAX2
                  |L1.23808|
                          DCD      REG_SPEED
                  |L1.23812|
                          DCD      bps_U
                  |L1.23816|
                          DCD      bps
                  |L1.23820|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.23824|
                          DCD      load_U
                  |L1.23828|
                          DCD      USIGN
                  |L1.23832|
                          DCD      bIBAT_SMKLBR
                  |L1.23836|
005d1c  f1a0000a          SUB      r0,r0,#0xa            ;8317
005d20  f8a40042          STRH     r0,[r4,#0x42]         ;8317
005d24  e0fa              B        |L1.24348|
                  |L1.23846|
005d26  da14              BGE      |L1.23890|
005d28  ebc31a03          RSB      r10,r3,r3,LSL #4      ;8319
005d2c  458a              CMP      r10,r1                ;8319
005d2e  da10              BGE      |L1.23890|
005d30  f04f0115          MOV      r1,#0x15              ;8321
005d34  f8841029          STRB     r1,[r4,#0x29]         ;8321
005d38  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8322  ; cntrl_stat_blok_cnt
005d3c  b121              CBZ      r1,|L1.23880|
005d3e  f1a00001          SUB      r0,r0,#1              ;8322
005d42  f8a40042          STRH     r0,[r4,#0x42]         ;8322
005d46  e0e9              B        |L1.24348|
                  |L1.23880|
005d48  f1a00003          SUB      r0,r0,#3              ;8323
005d4c  f8a40042          STRH     r0,[r4,#0x42]         ;8323
005d50  e0e4              B        |L1.24348|
                  |L1.23890|
005d52  ebc31a03          RSB      r10,r3,r3,LSL #4      ;8325
005d56  458a              CMP      r10,r1                ;8325
005d58  dd0a              BLE      |L1.23920|
005d5a  4598              CMP      r8,r3                 ;8325
005d5c  dd08              BLE      |L1.23920|
005d5e  f04f0116          MOV      r1,#0x16              ;8327
005d62  f8841029          STRB     r1,[r4,#0x29]         ;8327
005d66  f1a00001          SUB      r0,r0,#1              ;8328
005d6a  f8a40042          STRH     r0,[r4,#0x42]         ;8328
005d6e  e0d5              B        |L1.24348|
                  |L1.23920|
005d70  f9bcc000          LDRSH    r12,[r12,#0]          ;8331  ; bps_U
005d74  f9b22000          LDRSH    r2,[r2,#0]            ;8331  ; u_necc
005d78  f8df8598          LDR      r8,|L1.25364|
005d7c  f8dfb598          LDR      r11,|L1.25368|
005d80  4594              CMP      r12,r2                ;8331
005d82  da72              BGE      |L1.24170|
005d84  f04f0a17          MOV      r10,#0x17             ;8333
005d88  f884a029          STRB     r10,[r4,#0x29]        ;8333
005d8c  f9b88000          LDRSH    r8,[r8,#0]            ;8334  ; UB0
005d90  f9bba000          LDRSH    r10,[r11,#0]          ;8334  ; UB20
005d94  eba8080a          SUB      r8,r8,r10             ;8334
005d98  eba20a08          SUB      r10,r2,r8             ;8334
005d9c  45e2              CMP      r10,r12               ;8334
005d9e  dd37              BLE      |L1.24080|
005da0  f04f0218          MOV      r2,#0x18              ;8336
005da4  f8842029          STRB     r2,[r4,#0x29]         ;8336
005da8  2900              CMP      r1,#0                 ;8337
005daa  da10              BGE      |L1.24014|
005dac  f04f0119          MOV      r1,#0x19              ;8339
005db0  f8841029          STRB     r1,[r4,#0x29]         ;8339
005db4  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8340  ; cntrl_stat_blok_cnt
005db8  b121              CBZ      r1,|L1.24004|
005dba  f1000001          ADD      r0,r0,#1              ;8340
005dbe  f8a40042          STRH     r0,[r4,#0x42]         ;8340
005dc2  e0ab              B        |L1.24348|
                  |L1.24004|
005dc4  f100000a          ADD      r0,r0,#0xa            ;8341
005dc8  f8a40042          STRH     r0,[r4,#0x42]         ;8341
005dcc  e0a6              B        |L1.24348|
                  |L1.24014|
005dce  eb030283          ADD      r2,r3,r3,LSL #2       ;8343
005dd2  428a              CMP      r2,r1                 ;8343
005dd4  dd10              BLE      |L1.24056|
005dd6  f04f011a          MOV      r1,#0x1a              ;8345
005dda  f8841029          STRB     r1,[r4,#0x29]         ;8345
005dde  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8346  ; cntrl_stat_blok_cnt
005de2  b121              CBZ      r1,|L1.24046|
005de4  f1000001          ADD      r0,r0,#1              ;8346
005de8  f8a40042          STRH     r0,[r4,#0x42]         ;8346
005dec  e096              B        |L1.24348|
                  |L1.24046|
005dee  f1000002          ADD      r0,r0,#2              ;8347
005df2  f8a40042          STRH     r0,[r4,#0x42]         ;8347
005df6  e091              B        |L1.24348|
                  |L1.24056|
005df8  ebb10f42          CMP      r1,r2,LSL #1          ;8349
005dfc  da07              BGE      |L1.24078|
005dfe  f04f011b          MOV      r1,#0x1b              ;8351
005e02  f8841029          STRB     r1,[r4,#0x29]         ;8351
005e06  f1000001          ADD      r0,r0,#1              ;8352
005e0a  f8a40042          STRH     r0,[r4,#0x42]         ;8352
                  |L1.24078|
005e0e  e085              B        |L1.24348|
                  |L1.24080|
005e10  ea4f7ae8          ASR      r10,r8,#31            ;8355
005e14  eb08789a          ADD      r8,r8,r10,LSR #30     ;8355
005e18  eba208a8          SUB      r8,r2,r8,ASR #2       ;8355
005e1c  45e0              CMP      r8,r12                ;8355
005e1e  dd25              BLE      |L1.24172|
005e20  f04f021c          MOV      r2,#0x1c              ;8357
005e24  f8842029          STRB     r2,[r4,#0x29]         ;8357
005e28  eb030283          ADD      r2,r3,r3,LSL #2       ;8358
005e2c  428a              CMP      r2,r1                 ;8358
005e2e  dd10              BLE      |L1.24146|
005e30  f04f011d          MOV      r1,#0x1d              ;8360
005e34  f8841029          STRB     r1,[r4,#0x29]         ;8360
005e38  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8361  ; cntrl_stat_blok_cnt
005e3c  b121              CBZ      r1,|L1.24136|
005e3e  f1000001          ADD      r0,r0,#1              ;8361
005e42  f8a40042          STRH     r0,[r4,#0x42]         ;8361
005e46  e069              B        |L1.24348|
                  |L1.24136|
005e48  f1000002          ADD      r0,r0,#2              ;8362
005e4c  f8a40042          STRH     r0,[r4,#0x42]         ;8362
005e50  e064              B        |L1.24348|
                  |L1.24146|
005e52  ebb10f42          CMP      r1,r2,LSL #1          ;8364
005e56  da61              BGE      |L1.24348|
005e58  f04f011e          MOV      r1,#0x1e              ;8366
005e5c  f8841029          STRB     r1,[r4,#0x29]         ;8366
005e60  f1000001          ADD      r0,r0,#1              ;8367
005e64  f8a40042          STRH     r0,[r4,#0x42]         ;8367
005e68  e058              B        |L1.24348|
                  |L1.24170|
005e6a  e014              B        |L1.24214|
                  |L1.24172|
005e6c  1e52              SUBS     r2,r2,#1              ;8370
005e6e  4594              CMP      r12,r2                ;8370
005e70  da54              BGE      |L1.24348|
005e72  f04f021f          MOV      r2,#0x1f              ;8372
005e76  f8842029          STRB     r2,[r4,#0x29]         ;8372
005e7a  eb030283          ADD      r2,r3,r3,LSL #2       ;8373
005e7e  ebb10f42          CMP      r1,r2,LSL #1          ;8373
005e82  da4b              BGE      |L1.24348|
005e84  f04f0120          MOV      r1,#0x20              ;8375
005e88  f8841029          STRB     r1,[r4,#0x29]         ;8375
005e8c  f1000001          ADD      r0,r0,#1              ;8376
005e90  f8a40042          STRH     r0,[r4,#0x42]         ;8376
005e94  e042              B        |L1.24348|
                  |L1.24214|
005e96  dd41              BLE      |L1.24348|
005e98  f04f0121          MOV      r1,#0x21              ;8382
005e9c  f8841029          STRB     r1,[r4,#0x29]         ;8382
005ea0  f9b81000          LDRSH    r1,[r8,#0]            ;8383  ; UB0
005ea4  f9bb3000          LDRSH    r3,[r11,#0]           ;8383  ; UB20
005ea8  eba10103          SUB      r1,r1,r3              ;8383
005eac  eb010302          ADD      r3,r1,r2              ;8383
005eb0  4563              CMP      r3,r12                ;8383
005eb2  da10              BGE      |L1.24278|
005eb4  f04f0122          MOV      r1,#0x22              ;8385
005eb8  f8841029          STRB     r1,[r4,#0x29]         ;8385
005ebc  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8386  ; cntrl_stat_blok_cnt
005ec0  b121              CBZ      r1,|L1.24268|
005ec2  f1a00001          SUB      r0,r0,#1              ;8386
005ec6  f8a40042          STRH     r0,[r4,#0x42]         ;8386
005eca  e027              B        |L1.24348|
                  |L1.24268|
005ecc  f1a0000a          SUB      r0,r0,#0xa            ;8387
005ed0  f8a40042          STRH     r0,[r4,#0x42]         ;8387
005ed4  e022              B        |L1.24348|
                  |L1.24278|
005ed6  17cb              ASRS     r3,r1,#31             ;8389
005ed8  eb017193          ADD      r1,r1,r3,LSR #30      ;8389
005edc  eb0201a1          ADD      r1,r2,r1,ASR #2       ;8389
005ee0  4561              CMP      r1,r12                ;8389
005ee2  da10              BGE      |L1.24326|
005ee4  f04f0123          MOV      r1,#0x23              ;8391
005ee8  f8841029          STRB     r1,[r4,#0x29]         ;8391
005eec  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8392  ; cntrl_stat_blok_cnt
005ef0  b121              CBZ      r1,|L1.24316|
005ef2  f1a00001          SUB      r0,r0,#1              ;8392
005ef6  f8a40042          STRH     r0,[r4,#0x42]         ;8392
005efa  e00f              B        |L1.24348|
                  |L1.24316|
005efc  f1a00002          SUB      r0,r0,#2              ;8393
005f00  f8a40042          STRH     r0,[r4,#0x42]         ;8393
005f04  e00a              B        |L1.24348|
                  |L1.24326|
005f06  1c52              ADDS     r2,r2,#1              ;8395
005f08  4594              CMP      r12,r2                ;8395
005f0a  dd07              BLE      |L1.24348|
005f0c  f04f0124          MOV      r1,#0x24              ;8397
005f10  f8841029          STRB     r1,[r4,#0x29]         ;8397
005f14  f1a00001          SUB      r0,r0,#1              ;8398
005f18  f8a40042          STRH     r0,[r4,#0x42]         ;8398
                  |L1.24348|
005f1c  48ff              LDR      r0,|L1.25372|
005f1e  7861              LDRB     r1,[r4,#1]            ;8402  ; vz1_stat
005f20  7800              LDRB     r0,[r0,#0]            ;8402  ; hv_vz_stat
005f22  4308              ORRS     r0,r0,r1              ;8402
005f24  78e1              LDRB     r1,[r4,#3]            ;8402  ; vz2_stat
005f26  4308              ORRS     r0,r0,r1              ;8402
005f28  d10e              BNE      |L1.24392|
005f2a  48fd              LDR      r0,|L1.25376|
005f2c  7840              LDRB     r0,[r0,#1]            ;8404  ; sk_stat
005f2e  2801              CMP      r0,#1                 ;8404
005f30  d10a              BNE      |L1.24392|
005f32  48fc              LDR      r0,|L1.25380|
005f34  7840              LDRB     r0,[r0,#1]            ;8404  ; sk_stat_old
005f36  b938              CBNZ     r0,|L1.24392|
005f38  48fb              LDR      r0,|L1.25384|
005f3a  8800              LDRH     r0,[r0,#0]            ;8404  ; VZ_KIND
005f3c  2801              CMP      r0,#1                 ;8404
005f3e  d103              BNE      |L1.24392|
005f40  f04f0032          MOV      r0,#0x32              ;8404
005f44  f8a40042          STRH     r0,[r4,#0x42]         ;8404
                  |L1.24392|
005f48  f24032f2          MOV      r2,#0x3f2             ;8407
005f4c  210a              MOVS     r1,#0xa               ;8407
005f4e  48f7              LDR      r0,|L1.25388|
005f50  f7fffffe          BL       gran
005f54  f8b40042          LDRH     r0,[r4,#0x42]         ;8408  ; cntrl_stat_new
005f58  85e0              STRH     r0,[r4,#0x2e]         ;8408
005f5a  85a0              STRH     r0,[r4,#0x2c]         ;8409
005f5c  48f4              LDR      r0,|L1.25392|
005f5e  f9b00000          LDRSH    r0,[r0,#0]            ;8411  ; ICA_EN
005f62  b938              CBNZ     r0,|L1.24436|
005f64  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
005f66  b129              CBZ      r1,|L1.24436|
;;;8414   			{
;;;8415   			cntrl_stat = ica_cntrl_hndl;
005f68  49f2              LDR      r1,|L1.25396|
005f6a  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
005f6c  85a1              STRH     r1,[r4,#0x2c]
;;;8416   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
005f6e  f8a41042          STRH     r1,[r4,#0x42]
;;;8417   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
005f72  85e1              STRH     r1,[r4,#0x2e]
                  |L1.24436|
;;;8418   			}
;;;8419   		}
;;;8420   	
;;;8421   	if((ICA_EN==1)||(ICA_EN==2))
005f74  2801              CMP      r0,#1
005f76  d001              BEQ      |L1.24444|
005f78  2802              CMP      r0,#2
005f7a  d105              BNE      |L1.24456|
                  |L1.24444|
;;;8422   		{
;;;8423   		cntrl_stat=cntrl_stat_new+ica_u_necc;
005f7c  49ee              LDR      r1,|L1.25400|
005f7e  f8b40042          LDRH     r0,[r4,#0x42]  ; cntrl_stat_new
005f82  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
005f84  4408              ADD      r0,r0,r1
005f86  85a0              STRH     r0,[r4,#0x2c]
                  |L1.24456|
;;;8424   		}			
;;;8425   	}
;;;8426   #else
;;;8427   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;8428   	{
;;;8429   	cntrl_hndl_plazma=37;
;;;8430   	cntrl_stat_new=cntrl_stat_old;
;;;8431   	
;;;8432   	if((Ibmax/10)>(2*IZMAX_))
;;;8433   		{
;;;8434   		cntrl_hndl_plazma=38;
;;;8435             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8436   		else	cntrl_stat_new-=10;
;;;8437   		}		
;;;8438   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;8439   		{
;;;8440   		cntrl_hndl_plazma=39;
;;;8441             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8442             else	cntrl_stat_new-=3;
;;;8443   		}   
;;;8444   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;8445   		{
;;;8446   		cntrl_hndl_plazma=40;
;;;8447   		cntrl_stat_new--;
;;;8448   		}
;;;8449   		
;;;8450   	else if(load_U<u_necc)
;;;8451   		{
;;;8452   		cntrl_hndl_plazma=41;
;;;8453   		if(load_U<(u_necc-(UB0-UB20)))
;;;8454   			{
;;;8455   			cntrl_hndl_plazma=42;
;;;8456   			if(Ibmax<0)
;;;8457   				{
;;;8458   				cntrl_hndl_plazma=43;
;;;8459                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8460   				else cntrl_stat_new+=10;
;;;8461   				}
;;;8462   			else if(Ibmax<(IZMAX_*5))
;;;8463   				{
;;;8464   				cntrl_hndl_plazma=44;
;;;8465                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8466   				else	cntrl_stat_new+=2;
;;;8467   				}
;;;8468   			else if(Ibmax<((IZMAX_*95)/10))
;;;8469   				{
;;;8470   				cntrl_hndl_plazma=45;
;;;8471   				cntrl_stat_new++;
;;;8472   				}					
;;;8473   			}
;;;8474   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;8475   			{
;;;8476   			cntrl_hndl_plazma=46;
;;;8477   			if(Ibmax<(IZMAX_*5))
;;;8478   				{
;;;8479   				cntrl_hndl_plazma=47;
;;;8480                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8481   				else	cntrl_stat_new+=2;
;;;8482   				}
;;;8483   			else if(Ibmax<((IZMAX_*95)/10))
;;;8484   				{
;;;8485   				cntrl_hndl_plazma=48;
;;;8486   				cntrl_stat_new++;
;;;8487   				}					
;;;8488   			}	
;;;8489   		else if(load_U<(u_necc-1))
;;;8490   			{
;;;8491   			cntrl_hndl_plazma=49;
;;;8492   			if(Ibmax<((IZMAX_*95)/10))
;;;8493   				{
;;;8494   				cntrl_hndl_plazma=50;
;;;8495   				cntrl_stat_new++;
;;;8496   				}					
;;;8497   			}					
;;;8498   		}	
;;;8499   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;8500   		{
;;;8501   		cntrl_hndl_plazma=51;
;;;8502   		if(load_U>(u_necc+(UB0-UB20)))
;;;8503   			{
;;;8504   			cntrl_hndl_plazma=52;
;;;8505                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8506   			else	cntrl_stat_new-=10;
;;;8507   			}
;;;8508   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;8509   			{
;;;8510   			cntrl_hndl_plazma=53;
;;;8511                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8512   			else cntrl_stat_new-=2;
;;;8513   			}	
;;;8514   		else if(load_U>(u_necc+1))
;;;8515   			{
;;;8516   			cntrl_hndl_plazma=54;
;;;8517   			cntrl_stat_new--;
;;;8518   			}					
;;;8519   		}
;;;8520   
;;;8521   	gran(&cntrl_stat_new,10,1010);			
;;;8522   	cntrl_stat_old=cntrl_stat_new;
;;;8523   	cntrl_stat=cntrl_stat_new;	
;;;8524   	}
;;;8525   #endif
;;;8526   
;;;8527   iiii=0;
005f88  7525              STRB     r5,[r4,#0x14]
;;;8528   for(i=0;i<NUMIST;i++)
005f8a  74e5              STRB     r5,[r4,#0x13]
005f8c  48eb              LDR      r0,|L1.25404|
005f8e  f9b01000          LDRSH    r1,[r0,#0]
005f92  e00c              B        |L1.24494|
                  |L1.24468|
;;;8529        {
;;;8530        if(bps[i]._cnt<30)iiii=1;
005f94  ebc002c0          RSB      r2,r0,r0,LSL #3
005f98  eb021200          ADD      r2,r2,r0,LSL #4
005f9c  eb090282          ADD      r2,r9,r2,LSL #2
005fa0  78d2              LDRB     r2,[r2,#3]
005fa2  2a1e              CMP      r2,#0x1e
005fa4  d200              BCS      |L1.24488|
005fa6  7526              STRB     r6,[r4,#0x14]
                  |L1.24488|
005fa8  f1000001          ADD      r0,r0,#1              ;8528
005fac  74e0              STRB     r0,[r4,#0x13]         ;8528
                  |L1.24494|
005fae  7ce0              LDRB     r0,[r4,#0x13]         ;8528  ; i
005fb0  4288              CMP      r0,r1                 ;8528
005fb2  dbef              BLT      |L1.24468|
;;;8531        }
;;;8532   
;;;8533   if(iiii==0)
005fb4  7d20              LDRB     r0,[r4,#0x14]  ; iiii
005fb6  b948              CBNZ     r0,|L1.24524|
;;;8534   	{
;;;8535   	cntrl_stat=600;	
;;;8536   	cntrl_stat_old=600;
;;;8537   	cntrl_stat_new=600;
;;;8538   	cntrl_stat=10*PWM_START;
005fb8  48e1              LDR      r0,|L1.25408|
005fba  8800              LDRH     r0,[r0,#0]  ; PWM_START
005fbc  eb000080          ADD      r0,r0,r0,LSL #2
005fc0  ea4f0040          LSL      r0,r0,#1
005fc4  85a0              STRH     r0,[r4,#0x2c]
;;;8539   	cntrl_stat_old=10*PWM_START;
005fc6  85e0              STRH     r0,[r4,#0x2e]
;;;8540   	cntrl_stat_new=10*PWM_START;
005fc8  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.24524|
;;;8541   	}
;;;8542   
;;;8543   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8544   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
005fcc  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
005fd0  b110              CBZ      r0,|L1.24536|
005fd2  f1a00001          SUB      r0,r0,#1
005fd6  8038              STRH     r0,[r7,#0]
                  |L1.24536|
;;;8545   
;;;8546   
;;;8547   
;;;8548   #endif
;;;8549   
;;;8550   
;;;8551   gran(&cntrl_stat,10,1010); 
005fd8  48d4              LDR      r0,|L1.25388|
005fda  f24032f2          MOV      r2,#0x3f2
005fde  210a              MOVS     r1,#0xa
005fe0  3816              SUBS     r0,r0,#0x16
005fe2  f7fffffe          BL       gran
;;;8552   b1Hz_ch=0;
005fe6  74a5              STRB     r5,[r4,#0x12]
                  |L1.24552|
;;;8553   }
005fe8  e8bd9ff0          POP      {r4-r12,pc}
;;;8554   #endif
                          ENDP

                  ext_drv PROC
;;;9043   //-----------------------------------------------
;;;9044   void ext_drv(void)
005fec  e92d5ff0          PUSH     {r4-r12,lr}
;;;9045   {
;;;9046   char i;
;;;9047   
;;;9048   
;;;9049   for(i=0;i<NUMSK;i++)
005ff0  f04f0000          MOV      r0,#0
005ff4  4ad4              LDR      r2,|L1.25416|
;;;9050   	{
;;;9051   	#ifdef UKU_MGTS
;;;9052   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9053   	#endif
;;;9054   	#ifdef UKU_RSTKM
;;;9055   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9056   	#endif
;;;9057   	#ifdef UKU_3U
;;;9058   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;9059   	#endif
;;;9060   	#ifdef UKU_GLONASS
;;;9061   	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;9062   	#endif
;;;9063   	#ifdef UKU_KONTUR
;;;9064   	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;9065   	#endif
;;;9066   	#ifdef UKU_6U
;;;9067   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9068   	#endif
;;;9069   	#ifdef UKU_220
;;;9070   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9071   	#endif
;;;9072   	#ifdef UKU_220_V2
;;;9073   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9074   	#endif
;;;9075   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9076   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9077   	#endif
;;;9078   	#ifdef UKU_TELECORE2015	
;;;9079   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9080   	#endif
;;;9081   	#ifdef UKU_TELECORE2017
;;;9082   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9083   	#endif
;;;9084   	#ifdef IPS_SGEP_GAZPROM
;;;9085   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9086   	#endif		
;;;9087   		{
;;;9088   		if(sk_cnt[i]<10)
005ff6  4bd3              LDR      r3,|L1.25412|
;;;9089   			{
;;;9090   			sk_cnt[i]++;
;;;9091   			if(sk_cnt[i]>=10)
;;;9092   				{
;;;9093   				sk_stat[i]=ssON;
005ff8  4dc9              LDR      r5,|L1.25376|
005ffa  f04f0a01          MOV      r10,#1
;;;9094   				}
;;;9095   			}
;;;9096   		else 
;;;9097   			{
;;;9098   			sk_cnt[i]=10;
005ffe  f04f0b0a          MOV      r11,#0xa
006002  4606              MOV      r6,r0                 ;9049
006004  f9b24000          LDRSH    r4,[r2,#0]            ;9049
006008  e025              B        |L1.24662|
                  |L1.24586|
00600a  49d0              LDR      r1,|L1.25420|
00600c  4fd0              LDR      r7,|L1.25424|
00600e  5c09              LDRB     r1,[r1,r0]            ;9076
006010  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;9076
006014  f5b16ffa          CMP      r1,#0x7d0             ;9076
006018  da0e              BGE      |L1.24632|
00601a  5619              LDRSB    r1,[r3,r0]            ;9088
00601c  290a              CMP      r1,#0xa               ;9088
00601e  da08              BGE      |L1.24626|
006020  f1010101          ADD      r1,r1,#1              ;9090
006024  b249              SXTB     r1,r1                 ;9090
006026  5419              STRB     r1,[r3,r0]            ;9090
006028  290a              CMP      r1,#0xa               ;9091
00602a  db11              BLT      |L1.24656|
00602c  f805a000          STRB     r10,[r5,r0]           ;9093
006030  e00e              B        |L1.24656|
                  |L1.24626|
006032  f803b000          STRB     r11,[r3,r0]
006036  e00b              B        |L1.24656|
                  |L1.24632|
;;;9099   			}
;;;9100                  
;;;9101   		}
;;;9102   	else
;;;9103   		{
;;;9104   		if(sk_cnt[i]>0)
006038  5619              LDRSB    r1,[r3,r0]
00603a  2900              CMP      r1,#0
00603c  dd07              BLE      |L1.24654|
;;;9105   			{
;;;9106   			sk_cnt[i]--;
00603e  f1a10101          SUB      r1,r1,#1
006042  b249              SXTB     r1,r1
006044  5419              STRB     r1,[r3,r0]
;;;9107   			if(sk_cnt[i]<=0)
006046  2900              CMP      r1,#0
006048  dc02              BGT      |L1.24656|
;;;9108   				{
;;;9109   				sk_stat[i]=ssOFF;
00604a  542e              STRB     r6,[r5,r0]
00604c  e000              B        |L1.24656|
                  |L1.24654|
;;;9110   				}
;;;9111   			}
;;;9112   		else 
;;;9113   			{
;;;9114   			sk_cnt[i]=0;
00604e  541e              STRB     r6,[r3,r0]
                  |L1.24656|
006050  f1000001          ADD      r0,r0,#1              ;9049
006054  b2c0              UXTB     r0,r0                 ;9049
                  |L1.24662|
006056  42a0              CMP      r0,r4                 ;9049
006058  dbd7              BLT      |L1.24586|
;;;9115   			}
;;;9116   		}
;;;9117   	}
;;;9118   
;;;9119   for(i=0;i<NUMSK;i++)
00605a  f04f0400          MOV      r4,#0
;;;9120   	{
;;;9121   	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;9122   		{
;;;9123   		if(sk_av_cnt[i]<10)
00605e  f8df92f4          LDR      r9,|L1.25428|
;;;9124   			{
;;;9125   			sk_av_cnt[i]++;
;;;9126   			if(sk_av_cnt[i]>=10)
;;;9127   				{
;;;9128   				sk_av_stat[i]=sasON;
006062  4fbd              LDR      r7,|L1.25432|
;;;9129   				}
;;;9130   			}
;;;9131   		else 
;;;9132   			{
;;;9133   			sk_av_cnt[i]=10;
;;;9134   			}
;;;9135   		}
;;;9136   	else
;;;9137   		{
;;;9138   		if(sk_av_cnt[i]>=0)
;;;9139   			{
;;;9140   			sk_av_cnt[i]--;
;;;9141   			if(sk_av_cnt[i]<=0)
;;;9142   				{
;;;9143   				sk_av_stat[i]=sasOFF;
;;;9144   				}
;;;9145   			}
;;;9146   		else 
;;;9147   			{
;;;9148   			sk_av_cnt[i]=0;
;;;9149   			}
;;;9150   		}
;;;9151   
;;;9152   #ifndef UKU_KONTUR
;;;9153   	if(sk_av_stat_old[i]!=sk_av_stat[i])
006064  f8df82f4          LDR      r8,|L1.25436|
006068  e083              B        |L1.24946|
                  |L1.24682|
00606a  48bd              LDR      r0,|L1.25440|
00606c  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;9121
006070  b910              CBNZ     r0,|L1.24696|
006072  5d29              LDRB     r1,[r5,r4]            ;9121
006074  2901              CMP      r1,#1                 ;9121
006076  d00f              BEQ      |L1.24728|
                  |L1.24696|
006078  b108              CBZ      r0,|L1.24702|
00607a  5d28              LDRB     r0,[r5,r4]            ;9121
00607c  b160              CBZ      r0,|L1.24728|
                  |L1.24702|
00607e  f9190004          LDRSB    r0,[r9,r4]            ;9138
006082  2800              CMP      r0,#0                 ;9138
006084  db19              BLT      |L1.24762|
006086  f1a00001          SUB      r0,r0,#1              ;9140
00608a  b240              SXTB     r0,r0                 ;9140
00608c  f8090004          STRB     r0,[r9,r4]            ;9140
006090  2800              CMP      r0,#0                 ;9141
006092  dc14              BGT      |L1.24766|
006094  553e              STRB     r6,[r7,r4]            ;9143
006096  e012              B        |L1.24766|
                  |L1.24728|
006098  f9190004          LDRSB    r0,[r9,r4]            ;9123
00609c  280a              CMP      r0,#0xa               ;9123
00609e  da09              BGE      |L1.24756|
0060a0  f1000001          ADD      r0,r0,#1              ;9125
0060a4  b240              SXTB     r0,r0                 ;9125
0060a6  f8090004          STRB     r0,[r9,r4]            ;9125
0060aa  280a              CMP      r0,#0xa               ;9126
0060ac  db07              BLT      |L1.24766|
0060ae  f807a004          STRB     r10,[r7,r4]           ;9128
0060b2  e004              B        |L1.24766|
                  |L1.24756|
0060b4  f809b004          STRB     r11,[r9,r4]           ;9133
0060b8  e001              B        |L1.24766|
                  |L1.24762|
0060ba  f8096004          STRB     r6,[r9,r4]            ;9148
                  |L1.24766|
0060be  f8181004          LDRB     r1,[r8,r4]
0060c2  5d38              LDRB     r0,[r7,r4]
0060c4  4281              CMP      r1,r0
0060c6  d04e              BEQ      |L1.24934|
;;;9154   		{
;;;9155   		plazma_sk++;
0060c8  4a98              LDR      r2,|L1.25388|
0060ca  1e92              SUBS     r2,r2,#2
0060cc  8811              LDRH     r1,[r2,#0]  ; plazma_sk
0060ce  f1010101          ADD      r1,r1,#1
0060d2  8011              STRH     r1,[r2,#0]
;;;9156   		if(sk_av_stat[i]==sasON)
0060d4  2801              CMP      r0,#1
0060d6  d007              BEQ      |L1.24808|
;;;9157   			{
;;;9158   			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;9159   			else if(i==1)
;;;9160   				{
;;;9161   				#ifndef UKU_TELEKORE2017
;;;9162   				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;9163   				#endif
;;;9164   				#ifdef UKU_TELEKORE2017
;;;9165   				snmp_trap_send("Door open",15,2,1);
;;;9166   				#endif
;;;9167   				}
;;;9168   			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;9169   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9170   			}
;;;9171   		else 
;;;9172   			{
;;;9173   			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
0060d8  b354              CBZ      r4,|L1.24880|
;;;9174   			else if(i==1)
0060da  2c01              CMP      r4,#1
0060dc  d02f              BEQ      |L1.24894|
;;;9175   				{
;;;9176   				#ifndef UKU_TELEKORE2017
;;;9177   				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;9178   				#endif
;;;9179   				#ifdef UKU_TELEKORE2017
;;;9180   				snmp_trap_send("Door open clear",15,2,0);
;;;9181   				#endif
;;;9182   				}
;;;9183   			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
0060de  2c02              CMP      r4,#2
0060e0  d034              BEQ      |L1.24908|
;;;9184   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
0060e2  2c03              CMP      r4,#3
0060e4  d039              BEQ      |L1.24922|
0060e6  e03e              B        |L1.24934|
                  |L1.24808|
0060e8  b134              CBZ      r4,|L1.24824|
0060ea  2c01              CMP      r4,#1                 ;9159
0060ec  d00b              BEQ      |L1.24838|
0060ee  2c02              CMP      r4,#2                 ;9168
0060f0  d010              BEQ      |L1.24852|
0060f2  2c03              CMP      r4,#3                 ;9169
0060f4  d015              BEQ      |L1.24866|
0060f6  e036              B        |L1.24934|
                  |L1.24824|
0060f8  2301              MOVS     r3,#1                 ;9158
0060fa  461a              MOV      r2,r3                 ;9158
0060fc  210f              MOVS     r1,#0xf               ;9158
0060fe  a099              ADR      r0,|L1.25444|
006100  f7fffffe          BL       snmp_trap_send
006104  e02f              B        |L1.24934|
                  |L1.24838|
006106  2301              MOVS     r3,#1                 ;9162
006108  2202              MOVS     r2,#2                 ;9162
00610a  210f              MOVS     r1,#0xf               ;9162
00610c  a098              ADR      r0,|L1.25456|
00610e  f7fffffe          BL       snmp_trap_send
006112  e028              B        |L1.24934|
                  |L1.24852|
006114  2301              MOVS     r3,#1                 ;9168
006116  2203              MOVS     r2,#3                 ;9168
006118  210f              MOVS     r1,#0xf               ;9168
00611a  a098              ADR      r0,|L1.25468|
00611c  f7fffffe          BL       snmp_trap_send
006120  e021              B        |L1.24934|
                  |L1.24866|
006122  2301              MOVS     r3,#1                 ;9169
006124  2204              MOVS     r2,#4                 ;9169
006126  210f              MOVS     r1,#0xf               ;9169
006128  a097              ADR      r0,|L1.25480|
00612a  f7fffffe          BL       snmp_trap_send
00612e  e01a              B        |L1.24934|
                  |L1.24880|
006130  2300              MOVS     r3,#0                 ;9173
006132  2201              MOVS     r2,#1                 ;9173
006134  210f              MOVS     r1,#0xf               ;9173
006136  a097              ADR      r0,|L1.25492|
006138  f7fffffe          BL       snmp_trap_send
00613c  e013              B        |L1.24934|
                  |L1.24894|
00613e  2300              MOVS     r3,#0                 ;9177
006140  2202              MOVS     r2,#2                 ;9177
006142  210f              MOVS     r1,#0xf               ;9177
006144  a098              ADR      r0,|L1.25512|
006146  f7fffffe          BL       snmp_trap_send
00614a  e00c              B        |L1.24934|
                  |L1.24908|
00614c  2300              MOVS     r3,#0                 ;9183
00614e  2203              MOVS     r2,#3                 ;9183
006150  210f              MOVS     r1,#0xf               ;9183
006152  a09a              ADR      r0,|L1.25532|
006154  f7fffffe          BL       snmp_trap_send
006158  e005              B        |L1.24934|
                  |L1.24922|
00615a  2300              MOVS     r3,#0
00615c  2204              MOVS     r2,#4
00615e  210f              MOVS     r1,#0xf
006160  a09b              ADR      r0,|L1.25552|
006162  f7fffffe          BL       snmp_trap_send
                  |L1.24934|
;;;9185   			}
;;;9186   	 	}
;;;9187   #endif
;;;9188   
;;;9189   #ifdef UKU_KONTUR
;;;9190   	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;9191   		{
;;;9192   		plazma_sk++;
;;;9193   		if(sk_av_stat[i]==sasON)
;;;9194   			{
;;;9195   			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;9196   			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;9197   			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;9198   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9199   			}
;;;9200   		else 
;;;9201   			{
;;;9202   			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;9203   			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;9204   			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;9205   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;9206   			}
;;;9207   	 	}
;;;9208   #endif
;;;9209   	sk_av_stat_old[i]=sk_av_stat[i];
006166  5d38              LDRB     r0,[r7,r4]
006168  f8080004          STRB     r0,[r8,r4]
00616c  f1040401          ADD      r4,r4,#1              ;9119
006170  b2e4              UXTB     r4,r4                 ;9119
                  |L1.24946|
006172  4875              LDR      r0,|L1.25416|
006174  f9b00000          LDRSH    r0,[r0,#0]            ;9119  ; NUMSK
006178  4284              CMP      r4,r0                 ;9119
00617a  f6ffaf76          BLT      |L1.24682|
;;;9210   	}
;;;9211   }
00617e  e733              B        |L1.24552|
;;;9212   
                          ENDP

                  zar_superviser_start PROC
;;;9249   //-----------------------------------------------
;;;9250   void zar_superviser_start(void)
006180  4a98              LDR      r2,|L1.25572|
;;;9251   {
;;;9252   sign_U[0]=1;
006182  f04f0001          MOV      r0,#1
006186  7010              STRB     r0,[r2,#0]
;;;9253   sign_I[0]=1;
006188  4997              LDR      r1,|L1.25576|
00618a  7008              STRB     r0,[r1,#0]
;;;9254   sign_U[1]=1;
00618c  7050              STRB     r0,[r2,#1]
;;;9255   sign_I[1]=1;
00618e  7048              STRB     r0,[r1,#1]
;;;9256   
;;;9257   }
006190  4770              BX       lr
;;;9258   
                          ENDP

                  zar_superviser_drv PROC
;;;9214   //-----------------------------------------------
;;;9215   void zar_superviser_drv(void)
006192  e92d5ff0          PUSH     {r4-r12,lr}
;;;9216   {
;;;9217   
;;;9218   if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
006196  4896              LDR      r0,|L1.25584|
006198  f8df9258          LDR      r9,|L1.25588|
00619c  f8df824c          LDR      r8,|L1.25580|
0061a0  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
0061a4  f9b90000          LDRSH    r0,[r9,#0]
0061a8  4c60              LDR      r4,|L1.25388|
0061aa  ebc01100          RSB      r1,r0,r0,LSL #4
0061ae  3c42              SUBS     r4,r4,#0x42
0061b0  f9b87002          LDRSH    r7,[r8,#2]  ; bat
0061b4  f06f0a1d          MVN      r10,#0x1d
0061b8  f06f0b95          MVN      r11,#0x95
0061bc  2500              MOVS     r5,#0
0061be  4e89              LDR      r6,|L1.25572|
0061c0  f9b4004c          LDRSH    r0,[r4,#0x4c]
0061c4  eb0a0281          ADD      r2,r10,r1,LSL #2
0061c8  eb0b0381          ADD      r3,r11,r1,LSL #2
0061cc  4567              CMP      r7,r12
0061ce  dc05              BGT      |L1.25052|
0061d0  f8dfc224          LDR      r12,|L1.25592|
0061d4  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
0061d8  4567              CMP      r7,r12
0061da  da04              BGE      |L1.25062|
                  |L1.25052|
0061dc  4282              CMP      r2,r0
0061de  dd02              BLE      |L1.25062|
0061e0  4283              CMP      r3,r0
0061e2  da00              BGE      |L1.25062|
0061e4  7035              STRB     r5,[r6,#0]
                  |L1.25062|
;;;9219   
;;;9220   if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
0061e6  4f85              LDR      r7,|L1.25596|
0061e8  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
0061ec  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0061f0  4f7d              LDR      r7,|L1.25576|
0061f2  ebbc0f4e          CMP      r12,lr,LSL #1
0061f6  dc04              BGT      |L1.25090|
0061f8  f1ce0e00          RSB      lr,lr,#0
0061fc  ebbc0f4e          CMP      r12,lr,LSL #1
006200  da04              BGE      |L1.25100|
                  |L1.25090|
006202  4282              CMP      r2,r0
006204  dd02              BLE      |L1.25100|
006206  4283              CMP      r3,r0
006208  da00              BGE      |L1.25100|
00620a  703d              STRB     r5,[r7,#0]
                  |L1.25100|
;;;9221   																 
;;;9222   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00620c  f06f0209          MVN      r2,#9
006210  eb020181          ADD      r1,r2,r1,LSL #2
006214  4281              CMP      r1,r0
006216  d120              BNE      |L1.25178|
006218  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
00621a  b9f0              CBNZ     r0,|L1.25178|
;;;9223   	{
;;;9224   	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
00621c  7830              LDRB     r0,[r6,#0]  ; sign_U
00621e  2801              CMP      r0,#1
006220  d11b              BNE      |L1.25178|
006222  7838              LDRB     r0,[r7,#0]  ; sign_I
006224  2801              CMP      r0,#1
006226  d118              BNE      |L1.25178|
006228  f44f70ef          MOV      r0,#0x1de
00622c  f7fffffe          BL       lc640_read_int
006230  4973              LDR      r1,|L1.25600|
006232  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
006236  4288              CMP      r0,r1
006238  d00f              BEQ      |L1.25178|
00623a  4872              LDR      r0,|L1.25604|
00623c  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00623e  b160              CBZ      r0,|L1.25178|
006240  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006244  07c0              LSLS     r0,r0,#31
006246  d108              BNE      |L1.25178|
;;;9225   		{
;;;9226   		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
006248  f44f70ef          MOV      r0,#0x1de
00624c  f7fffffe          BL       lc640_write_int
;;;9227   		superviser_cnt++;
006250  486d              LDR      r0,|L1.25608|
006252  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006254  f1010101          ADD      r1,r1,#1
006258  7001              STRB     r1,[r0,#0]
                  |L1.25178|
;;;9228   		}
;;;9229   	
;;;9230   	}
;;;9231   
;;;9232   if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00625a  4865              LDR      r0,|L1.25584|
00625c  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006260  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006264  4281              CMP      r1,r0
006266  dc06              BGT      |L1.25206|
006268  4863              LDR      r0,|L1.25592|
00626a  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
00626e  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006272  4281              CMP      r1,r0
006274  da0e              BGE      |L1.25236|
                  |L1.25206|
006276  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00627a  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
00627e  ebc01000          RSB      r0,r0,r0,LSL #4
006282  eb0a0280          ADD      r2,r10,r0,LSL #2
006286  428a              CMP      r2,r1
006288  dd04              BLE      |L1.25236|
00628a  eb0b0080          ADD      r0,r11,r0,LSL #2
00628e  4288              CMP      r0,r1
006290  da00              BGE      |L1.25236|
006292  7075              STRB     r5,[r6,#1]
                  |L1.25236|
;;;9233   
;;;9234   if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006294  4959              LDR      r1,|L1.25596|
006296  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00629a  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00629e  ebb00f41          CMP      r0,r1,LSL #1
0062a2  dc03              BGT      |L1.25260|
0062a4  4249              RSBS     r1,r1,#0
0062a6  ebb00f41          CMP      r0,r1,LSL #1
0062aa  da0e              BGE      |L1.25290|
                  |L1.25260|
0062ac  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0062b0  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
0062b4  ebc01000          RSB      r0,r0,r0,LSL #4
0062b8  eb0a0280          ADD      r2,r10,r0,LSL #2
0062bc  428a              CMP      r2,r1
0062be  dd04              BLE      |L1.25290|
0062c0  eb0b0080          ADD      r0,r11,r0,LSL #2
0062c4  4288              CMP      r0,r1
0062c6  da00              BGE      |L1.25290|
0062c8  707d              STRB     r5,[r7,#1]
                  |L1.25290|
;;;9235   																 
;;;9236   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0062ca  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0062ce  ebc01100          RSB      r1,r0,r0,LSL #4
0062d2  f06f0009          MVN      r0,#9
0062d6  eb000081          ADD      r0,r0,r1,LSL #2
0062da  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
0062de  4288              CMP      r0,r1
0062e0  d116              BNE      |L1.25360|
0062e2  7fa0              LDRB     r0,[r4,#0x1e]  ; spc_stat
0062e4  b9a0              CBNZ     r0,|L1.25360|
;;;9237   	{
;;;9238   	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0062e6  7870              LDRB     r0,[r6,#1]  ; sign_U
0062e8  2801              CMP      r0,#1
0062ea  d111              BNE      |L1.25360|
0062ec  7878              LDRB     r0,[r7,#1]  ; sign_I
0062ee  2801              CMP      r0,#1
0062f0  d10e              BNE      |L1.25360|
0062f2  f44f75fe          MOV      r5,#0x1fc
0062f6  4628              MOV      r0,r5
0062f8  f7fffffe          BL       lc640_read_int
0062fc  4940              LDR      r1,|L1.25600|
0062fe  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
006302  4288              CMP      r0,r1
006304  d004              BEQ      |L1.25360|
006306  483f              LDR      r0,|L1.25604|
006308  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00630a  2802              CMP      r0,#2
00630c  d100              BNE      |L1.25360|
00630e  e07d              B        |L1.25612|
                  |L1.25360|
006310  e088              B        |L1.25636|
006312  0000              DCW      0x0000
                  |L1.25364|
                          DCD      UB0
                  |L1.25368|
                          DCD      UB20
                  |L1.25372|
                          DCD      hv_vz_stat
                  |L1.25376|
                          DCD      sk_stat
                  |L1.25380|
                          DCD      sk_stat_old
                  |L1.25384|
                          DCD      VZ_KIND
                  |L1.25388|
                          DCD      ||area_number.18||+0x42
                  |L1.25392|
                          DCD      ICA_EN
                  |L1.25396|
                          DCD      ica_cntrl_hndl
                  |L1.25400|
                          DCD      ica_u_necc
                  |L1.25404|
                          DCD      NUMIST
                  |L1.25408|
                          DCD      PWM_START
                  |L1.25412|
                          DCD      sk_cnt
                  |L1.25416|
                          DCD      NUMSK
                  |L1.25420|
                          DCD      ||area_number.12||
                  |L1.25424|
                          DCD      ||.bss||+0x40c
                  |L1.25428|
                          DCD      sk_av_cnt
                  |L1.25432|
                          DCD      sk_av_stat
                  |L1.25436|
                          DCD      sk_av_stat_old
                  |L1.25440|
                          DCD      SK_SIGN
                  |L1.25444|
006364  534b2023          DCB      "SK #1 Alarm",0
006368  3120416c
00636c  61726d00
                  |L1.25456|
006370  534b2023          DCB      "SK #2 Alarm",0
006374  3220416c
006378  61726d00
                  |L1.25468|
00637c  534b2023          DCB      "SK #3 Alarm",0
006380  3320416c
006384  61726d00
                  |L1.25480|
006388  534b2023          DCB      "SK #4 Alarm",0
00638c  3420416c
006390  61726d00
                  |L1.25492|
006394  534b2023          DCB      "SK #1 Alarm is off",0
006398  3120416c
00639c  61726d20
0063a0  6973206f
0063a4  666600  
0063a7  00                DCB      0
                  |L1.25512|
0063a8  534b2023          DCB      "SK #2 Alarm is off",0
0063ac  3220416c
0063b0  61726d20
0063b4  6973206f
0063b8  666600  
0063bb  00                DCB      0
                  |L1.25532|
0063bc  534b2023          DCB      "SK #3 Alarm is off",0
0063c0  3320416c
0063c4  61726d20
0063c8  6973206f
0063cc  666600  
0063cf  00                DCB      0
                  |L1.25552|
0063d0  534b2023          DCB      "SK #4 Alarm is off",0
0063d4  3420416c
0063d8  61726d20
0063dc  6973206f
0063e0  666600  
0063e3  00                DCB      0
                  |L1.25572|
                          DCD      sign_U
                  |L1.25576|
                          DCD      sign_I
                  |L1.25580|
                          DCD      bat
                  |L1.25584|
                          DCD      u_necc_up
                  |L1.25588|
                          DCD      TBAT
                  |L1.25592|
                          DCD      u_necc_dn
                  |L1.25596|
                          DCD      IKB
                  |L1.25600|
                          DCD      BAT_C_REAL
                  |L1.25604|
                          DCD      NUMBAT
                  |L1.25608|
                          DCD      superviser_cnt
                  |L1.25612|
00640c  f8980089          LDRB     r0,[r8,#0x89]  ; bat
006410  07c0              LSLS     r0,r0,#31
006412  d107              BNE      |L1.25636|
;;;9239   		{
;;;9240   		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
006414  4628              MOV      r0,r5
006416  f7fffffe          BL       lc640_write_int
;;;9241   		superviser_cnt++;
00641a  48ff              LDR      r0,|L1.26648|
00641c  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
00641e  f1010101          ADD      r1,r1,#1
006422  7001              STRB     r1,[r0,#0]
                  |L1.25636|
;;;9242   		}
;;;9243   	
;;;9244   	}
;;;9245   
;;;9246   if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006424  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006428  f06f0101          MVN      r1,#1
00642c  ebc01000          RSB      r0,r0,r0,LSL #4
006430  eb010080          ADD      r0,r1,r0,LSL #2
006434  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
006438  4288              CMP      r0,r1
00643a  d102              BNE      |L1.25666|
00643c  e8bd5ff0          POP      {r4-r12,lr}
006440  e7fe              B        zar_superviser_start
                  |L1.25666|
;;;9247   }
006442  e5d1              B        |L1.24552|
;;;9248   
                          ENDP

                  npn_hndl PROC
;;;9259   //-----------------------------------------------
;;;9260   void npn_hndl(void)
006444  e92d03f0          PUSH     {r4-r9}
;;;9261   {
;;;9262   if(NPN_OUT!=npnoOFF)
006448  48f4              LDR      r0,|L1.26652|
;;;9263   	{
;;;9264   /*	if(NPN_SIGN==npnsAVNET)
;;;9265   		{
;;;9266   		if(net_av==1)
;;;9267   			{
;;;9268   			if(npn_tz_cnt<TZNPN)
;;;9269   				{
;;;9270   				npn_tz_cnt++;
;;;9271   				if(npn_tz_cnt==TZNPN)
;;;9272   					{
;;;9273   					npn_stat=npnsOFF;
;;;9274   					}
;;;9275   				}
;;;9276   			}
;;;9277   		else
;;;9278   			{
;;;9279   			if(npn_tz_cnt)
;;;9280   				{
;;;9281   				npn_tz_cnt--;
;;;9282   				if(npn_tz_cnt==0)
;;;9283   					{
;;;9284   					npn_stat=npnsON;
;;;9285   					}
;;;9286   				}
;;;9287   			}
;;;9288   		}*/
;;;9289   /*	if(NPN_SIGN==npnsULOAD)
;;;9290   		{
;;;9291   		if(load_U<UONPN)
;;;9292   			{
;;;9293   			if(npn_tz_cnt<TZNPN)
;;;9294   				{
;;;9295   				npn_tz_cnt++;
;;;9296   				if(npn_tz_cnt==TZNPN)
;;;9297   					{
;;;9298   					npn_stat=npnsOFF;
;;;9299   					}
;;;9300   				}
;;;9301   			}
;;;9302   		else if(load_U>UVNPN)
;;;9303   			{
;;;9304   			if(npn_tz_cnt)
;;;9305   				{
;;;9306   				npn_tz_cnt--;
;;;9307   				if(npn_tz_cnt==0)
;;;9308   					{
;;;9309   					npn_stat=npnsON;
;;;9310   					}
;;;9311   				}
;;;9312   			}
;;;9313   		}*/
;;;9314   
;;;9315   	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;9316   		{
;;;9317   		if(npn_tz_cnt<TZNPN)
00644a  4ff5              LDR      r7,|L1.26656|
;;;9318   			{
;;;9319   			npn_tz_cnt++;
;;;9320   			if(npn_tz_cnt==TZNPN)
;;;9321   				{
;;;9322   				npn_stat=npnsOFF;
00644c  4ef5              LDR      r6,|L1.26660|
00644e  7800              LDRB     r0,[r0,#0]            ;9262  ; NPN_OUT
006450  f04f0c00          MOV      r12,#0                ;9262
;;;9323   				}
;;;9324   			}
;;;9325   		}
;;;9326   	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;9327   		{
;;;9328   		if(npn_tz_cnt)
;;;9329   			{
;;;9330   			npn_tz_cnt--;
;;;9331   			if(npn_tz_cnt==0)
;;;9332   				{
;;;9333   				npn_stat=npnsON;
006454  f04f0801          MOV      r8,#1
006458  b3e8              CBZ      r0,|L1.25814|
00645a  48f3              LDR      r0,|L1.26664|
00645c  4639              MOV      r1,r7                 ;9317
00645e  f9b05000          LDRSH    r5,[r0,#0]            ;9315  ; load_U
006462  48f2              LDR      r0,|L1.26668|
006464  f9b11000          LDRSH    r1,[r1,#0]            ;9317
006468  f9b09000          LDRSH    r9,[r0,#0]            ;9315  ; UONPN
00646c  48f0              LDR      r0,|L1.26672|
00646e  454d              CMP      r5,r9                 ;9315
006470  f9b02000          LDRSH    r2,[r0,#0]            ;9315
006474  48ef              LDR      r0,|L1.26676|
006476  f9b03000          LDRSH    r3,[r0,#0]            ;9315
00647a  48ef              LDR      r0,|L1.26680|
00647c  f9b04000          LDRSH    r4,[r0,#0]            ;9315
006480  48ee              LDR      r0,|L1.26684|
006482  f9b00000          LDRSH    r0,[r0,#0]            ;9315
006486  da13              BGE      |L1.25776|
006488  4282              CMP      r2,r0                 ;9315
00648a  db03              BLT      |L1.25748|
00648c  4283              CMP      r3,r0                 ;9315
00648e  db01              BLT      |L1.25748|
006490  4284              CMP      r4,r0                 ;9315
006492  da0d              BGE      |L1.25776|
                  |L1.25748|
006494  48ea              LDR      r0,|L1.26688|
006496  f9b02000          LDRSH    r2,[r0,#0]            ;9317  ; TZNPN
00649a  4291              CMP      r1,r2                 ;9317
00649c  da23              BGE      |L1.25830|
00649e  f1010101          ADD      r1,r1,#1              ;9319
0064a2  b208              SXTH     r0,r1                 ;9319
0064a4  8038              STRH     r0,[r7,#0]            ;9319
0064a6  4290              CMP      r0,r2                 ;9320
0064a8  d11d              BNE      |L1.25830|
0064aa  f886c000          STRB     r12,[r6,#0]           ;9322
0064ae  e01a              B        |L1.25830|
                  |L1.25776|
0064b0  f8dfc390          LDR      r12,|L1.26692|
0064b4  f9bcc000          LDRSH    r12,[r12,#0]          ;9326  ; UVNPN
0064b8  4565              CMP      r5,r12                ;9326
0064ba  dd14              BLE      |L1.25830|
0064bc  4282              CMP      r2,r0                 ;9326
0064be  dd12              BLE      |L1.25830|
0064c0  4283              CMP      r3,r0                 ;9326
0064c2  dd10              BLE      |L1.25830|
0064c4  4284              CMP      r4,r0                 ;9326
0064c6  dd0e              BLE      |L1.25830|
0064c8  b169              CBZ      r1,|L1.25830|
0064ca  f1a10101          SUB      r1,r1,#1              ;9330
0064ce  b208              SXTH     r0,r1                 ;9330
0064d0  8038              STRH     r0,[r7,#0]            ;9330
0064d2  b940              CBNZ     r0,|L1.25830|
0064d4  e000              B        |L1.25816|
                  |L1.25814|
0064d6  e002              B        |L1.25822|
                  |L1.25816|
0064d8  f8868000          STRB     r8,[r6,#0]
0064dc  e003              B        |L1.25830|
                  |L1.25822|
;;;9334   				}
;;;9335   			}
;;;9336   		}
;;;9337   	}
;;;9338   else
;;;9339   	{
;;;9340   	npn_tz_cnt=0;
0064de  f8a7c000          STRH     r12,[r7,#0]
;;;9341   	npn_stat=npnsON;
0064e2  f8868000          STRB     r8,[r6,#0]
                  |L1.25830|
;;;9342   	}
;;;9343   
;;;9344   if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0064e6  7830              LDRB     r0,[r6,#0]  ; npn_stat
0064e8  2800              CMP      r0,#0
0064ea  d107              BNE      |L1.25852|
0064ec  e8bd03f0          POP      {r4-r9}
0064f0  230f              MOVS     r3,#0xf
0064f2  2201              MOVS     r2,#1
0064f4  216e              MOVS     r1,#0x6e
0064f6  20d2              MOVS     r0,#0xd2
0064f8  f7ffbffe          B.W      mess_send
                  |L1.25852|
;;;9345   
;;;9346   
;;;9347   }
0064fc  e8bd03f0          POP      {r4-r9}
006500  4770              BX       lr
;;;9348   
                          ENDP

                  loadoff_hndl PROC
;;;9350   //-----------------------------------------------
;;;9351   void loadoff_hndl(void)
006502  b5f0              PUSH     {r4-r7,lr}
;;;9352   {
;;;9353   if((load_U>UONPN)||(load_U<UVNPN))
006504  48c8              LDR      r0,|L1.26664|
;;;9354   	{
;;;9355   	if(load_off_cnt<TZNPN)
006506  4dd0              LDR      r5,|L1.26696|
;;;9356   		{
;;;9357   		load_off_cnt++;
;;;9358   		if(load_off_cnt>=TZNPN)
;;;9359   			{
;;;9360   			load_off_stat=npnsOFF;
006508  2700              MOVS     r7,#0
00650a  f9b01000          LDRSH    r1,[r0,#0]            ;9353  ; load_U
00650e  48c7              LDR      r0,|L1.26668|
006510  4ece              LDR      r6,|L1.26700|
006512  f9b02000          LDRSH    r2,[r0,#0]            ;9353  ; UONPN
006516  f9b50000          LDRSH    r0,[r5,#0]            ;9355
00651a  4291              CMP      r1,r2                 ;9353
00651c  dc04              BGT      |L1.25896|
00651e  4bc9              LDR      r3,|L1.26692|
006520  f9b33000          LDRSH    r3,[r3,#0]            ;9353  ; UVNPN
006524  4299              CMP      r1,r3                 ;9353
006526  da0d              BGE      |L1.25924|
                  |L1.25896|
006528  49c5              LDR      r1,|L1.26688|
00652a  f9b11000          LDRSH    r1,[r1,#0]            ;9355  ; TZNPN
00652e  4288              CMP      r0,r1                 ;9355
006530  da1c              BGE      |L1.25964|
006532  f1000001          ADD      r0,r0,#1              ;9357
006536  b200              SXTH     r0,r0                 ;9357
006538  8028              STRH     r0,[r5,#0]            ;9357
00653a  4288              CMP      r0,r1                 ;9358
00653c  db16              BLT      |L1.25964|
00653e  7037              STRB     r7,[r6,#0]
;;;9361   			load_off_cnt=TZNPN;
006540  8029              STRH     r1,[r5,#0]
006542  e013              B        |L1.25964|
                  |L1.25924|
;;;9362   			}
;;;9363   		}
;;;9364   	}
;;;9365   else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
006544  4cc2              LDR      r4,|L1.26704|
006546  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
00654a  4423              ADD      r3,r3,r4
00654c  428b              CMP      r3,r1
00654e  da0d              BGE      |L1.25964|
006550  1b12              SUBS     r2,r2,r4
006552  428a              CMP      r2,r1
006554  dd0a              BLE      |L1.25964|
;;;9366   	{
;;;9367   	if(load_off_cnt)
006556  b148              CBZ      r0,|L1.25964|
;;;9368   		{
;;;9369   		load_off_cnt--;
006558  f1a00001          SUB      r0,r0,#1
00655c  b200              SXTH     r0,r0
00655e  8028              STRH     r0,[r5,#0]
;;;9370   		if(load_off_cnt<=0)
006560  2800              CMP      r0,#0
006562  dc03              BGT      |L1.25964|
;;;9371   			{
;;;9372   			load_off_stat=npnsON;
006564  f04f0001          MOV      r0,#1
006568  7030              STRB     r0,[r6,#0]
;;;9373   			load_off_cnt=0;
00656a  802f              STRH     r7,[r5,#0]
                  |L1.25964|
;;;9374   			}
;;;9375   		}
;;;9376   	}
;;;9377   
;;;9378   
;;;9379   if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
00656c  7830              LDRB     r0,[r6,#0]  ; load_off_stat
00656e  2800              CMP      r0,#0
006570  d103              BNE      |L1.25978|
006572  49b8              LDR      r1,|L1.26708|
006574  f04f000a          MOV      r0,#0xa
006578  7008              STRB     r0,[r1,#0]
                  |L1.25978|
;;;9380   
;;;9381   
;;;9382   }
00657a  bdf0              POP      {r4-r7,pc}
;;;9383   
                          ENDP

                  speedChargeStartStop PROC
;;;9571   //-----------------------------------------------
;;;9572   void speedChargeStartStop(void)
00657c  b508              PUSH     {r3,lr}
;;;9573   {
;;;9574   /*if(speedChIsOn)
;;;9575   	{
;;;9576   	speedChIsOn=0;
;;;9577   	}
;;;9578   
;;;9579   else
;;;9580   	{
;;;9581   	if(speedChrgBlckStat==0)
;;;9582   		{
;;;9583   		speedChIsOn=1;
;;;9584   		speedChTimeCnt=0;
;;;9585   		}
;;;9586   	else
;;;9587   		{
;;;9588   		show_mess(	"     Ускоренный     ",
;;;9589   	          		"       заряд        ",
;;;9590   	          		"    заблокирован!   ",
;;;9591   	          		"                    ",2000);	 
;;;9592   		}
;;;9593   	}*/
;;;9594   
;;;9595   if(sp_ch_stat!=scsOFF)
00657e  48b6              LDR      r0,|L1.26712|
006580  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006582  b141              CBZ      r1,|L1.26006|
;;;9596   	{
;;;9597   	sp_ch_stat=scsOFF;
006584  f04f0100          MOV      r1,#0
006588  7001              STRB     r1,[r0,#0]
;;;9598   	speedz_mem_hndl(10);
00658a  e8bd4008          POP      {r3,lr}
00658e  f04f000a          MOV      r0,#0xa
006592  f7ffbffe          B.W      speedz_mem_hndl
                  |L1.26006|
;;;9599   	}
;;;9600   
;;;9601   else
;;;9602   	{
;;;9603   	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
006596  49b1              LDR      r1,|L1.26716|
006598  f9b12000          LDRSH    r2,[r1,#0]  ; speedChrgBlckStat
00659c  49b0              LDR      r1,|L1.26720|
00659e  7f8b              LDRB     r3,[r1,#0x1e]  ; spc_stat
0065a0  431a              ORRS     r2,r2,r3
0065a2  784b              LDRB     r3,[r1,#1]  ; vz1_stat
0065a4  78c9              LDRB     r1,[r1,#3]  ; vz2_stat
0065a6  431a              ORRS     r2,r2,r3
0065a8  430a              ORRS     r2,r2,r1
0065aa  d009              BEQ      |L1.26048|
;;;9604   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9605   		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;9606   		#endif
;;;9607   		)
;;;9608   		{
;;;9609   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9610   		sp_ch_stat=scsSTEP1;
;;;9611   		#else
;;;9612   		sp_ch_stat=scsWRK;
;;;9613   		#endif
;;;9614   		speedz_mem_hndl(1);
;;;9615   		}
;;;9616   	else 
;;;9617   		{
;;;9618   		show_mess(	"     Ускоренный     ",
0065ac  f44f60fa          MOV      r0,#0x7d0
0065b0  9000              STR      r0,[sp,#0]
0065b2  4bac              LDR      r3,|L1.26724|
0065b4  a2ac              ADR      r2,|L1.26728|
0065b6  a1b2              ADR      r1,|L1.26752|
0065b8  a0b7              ADR      r0,|L1.26776|
0065ba  f7fffffe          BL       show_mess
;;;9619   	          		"       заряд        ",
;;;9620   	          		"    заблокирован!   ",
;;;9621   	          		"                    ",2000);
;;;9622   		}
;;;9623   	}
;;;9624   }
0065be  bd08              POP      {r3,pc}
                  |L1.26048|
0065c0  f04f0101          MOV      r1,#1                 ;9610
0065c4  7001              STRB     r1,[r0,#0]            ;9610
0065c6  e8bd4008          POP      {r3,lr}               ;9614
0065ca  4608              MOV      r0,r1                 ;9614
0065cc  f7ffbffe          B.W      speedz_mem_hndl
;;;9625   
                          ENDP

                  speedChargeHndl PROC
;;;9384   //-----------------------------------------------
;;;9385   void speedChargeHndl(void)
0065d0  e92d4ff8          PUSH     {r3-r11,lr}
;;;9386   {
;;;9387   /*
;;;9388   if(sp_ch_stat==scsOFF)
;;;9389   	{
;;;9390   	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;9391   	}*/
;;;9392   	 
;;;9393   if(sp_ch_stat==scsSTEP1)
0065d4  4fa0              LDR      r7,|L1.26712|
;;;9394   	{
;;;9395   	if(sp_ch_stat_old!=sp_ch_stat)
0065d6  4eb8              LDR      r6,|L1.26808|
;;;9396   		{
;;;9397   		sp_ch_stat_cnt=5;
;;;9398   		if(SP_CH_VENT_BLOK==0)
0065d8  f8dfa2d4          LDR      r10,|L1.26800|
0065dc  7839              LDRB     r1,[r7,#0]            ;9393  ; sp_ch_stat
;;;9399   			{
;;;9400   			sp_ch_stat_cnt=0;
;;;9401   			sp_ch_stat=scsWRK;
;;;9402   			}
;;;9403   		}
;;;9404   	if(sp_ch_stat_cnt)
;;;9405   		{
;;;9406   		sp_ch_stat_cnt--;
;;;9407   		if(sp_ch_stat_cnt==0)
;;;9408   			{
;;;9409   			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;9410   
;;;9411   			}
;;;9412   		}
;;;9413   	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0065de  f8df92d4          LDR      r9,|L1.26804|
0065e2  7830              LDRB     r0,[r6,#0]            ;9395
0065e4  4cb5              LDR      r4,|L1.26812|
0065e6  2500              MOVS     r5,#0                 ;9398
0065e8  f04f0802          MOV      r8,#2                 ;9401
0065ec  2901              CMP      r1,#1                 ;9393
0065ee  d11b              BNE      |L1.26152|
0065f0  2801              CMP      r0,#1                 ;9395
0065f2  d008              BEQ      |L1.26118|
0065f4  f04f0105          MOV      r1,#5                 ;9397
0065f8  8021              STRH     r1,[r4,#0]            ;9397
0065fa  f8ba1000          LDRH     r1,[r10,#0]           ;9398  ; SP_CH_VENT_BLOK
0065fe  b911              CBNZ     r1,|L1.26118|
006600  8025              STRH     r5,[r4,#0]            ;9400
006602  f8878000          STRB     r8,[r7,#0]            ;9401
                  |L1.26118|
006606  f9b41000          LDRSH    r1,[r4,#0]            ;9404  ; sp_ch_stat_cnt
00660a  b139              CBZ      r1,|L1.26140|
00660c  f1a10101          SUB      r1,r1,#1              ;9406
006610  b209              SXTH     r1,r1                 ;9406
006612  8021              STRH     r1,[r4,#0]            ;9406
006614  b911              CBNZ     r1,|L1.26140|
006616  f04f0103          MOV      r1,#3                 ;9409
00661a  7039              STRB     r1,[r7,#0]            ;9409
                  |L1.26140|
00661c  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
006620  2901              CMP      r1,#1
006622  d101              BNE      |L1.26152|
006624  f8878000          STRB     r8,[r7,#0]
                  |L1.26152|
;;;9414   	}
;;;9415   
;;;9416   if(sp_ch_stat==scsWRK)
006628  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
00662a  2902              CMP      r1,#2
00662c  d123              BNE      |L1.26230|
;;;9417   	{
;;;9418   	if(sp_ch_stat_old!=sp_ch_stat)
;;;9419   		{
;;;9420   		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
00662e  4aa4              LDR      r2,|L1.26816|
;;;9421   		hv_vz_up_cnt=0;
006630  49a4              LDR      r1,|L1.26820|
006632  2802              CMP      r0,#2                 ;9418
006634  d008              BEQ      |L1.26184|
006636  48a4              LDR      r0,|L1.26824|
006638  f44f6361          MOV      r3,#0xe10             ;9420
00663c  f9b00000          LDRSH    r0,[r0,#0]            ;9420  ; speedChrgTimeInHour
006640  fb00f003          MUL      r0,r0,r3              ;9420
006644  6010              STR      r0,[r2,#0]            ;9420  ; sp_ch_wrk_cnt
006646  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.26184|
;;;9422   		}
;;;9423   	sp_ch_wrk_cnt--;
006648  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
00664a  f1a00001          SUB      r0,r0,#1
00664e  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;9424   	hv_vz_up_cnt++;
006650  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006652  f1020201          ADD      r2,r2,#1
006656  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;9425   	if(sp_ch_wrk_cnt==0)
006658  b918              CBNZ     r0,|L1.26210|
;;;9426   		{
;;;9427   		sp_ch_stat=scsOFF;
00665a  703d              STRB     r5,[r7,#0]
;;;9428   		speedz_mem_hndl(0);
00665c  2000              MOVS     r0,#0
00665e  f7fffffe          BL       speedz_mem_hndl
                  |L1.26210|
;;;9429   		}
;;;9430   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9431   	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006662  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006666  b930              CBNZ     r0,|L1.26230|
006668  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
00666c  2801              CMP      r0,#1
00666e  d102              BNE      |L1.26230|
006670  f04f0004          MOV      r0,#4
006674  7038              STRB     r0,[r7,#0]
                  |L1.26230|
;;;9432   	#endif
;;;9433   	}
;;;9434   
;;;9435   if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006676  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;9436   	{
;;;9437   	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;9438   		{
;;;9439   		sp_ch_stat_cnt=10;
;;;9440   		}
;;;9441   	sp_ch_stat_cnt--;
;;;9442   	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;9443   		{
;;;9444   		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006678  f2413b88          MOV      r11,#0x1388
00667c  f04f0a0a          MOV      r10,#0xa              ;9439
006680  2803              CMP      r0,#3                 ;9435
006682  d119              BNE      |L1.26296|
006684  7830              LDRB     r0,[r6,#0]            ;9437  ; sp_ch_stat_old
006686  2803              CMP      r0,#3                 ;9437
006688  d101              BNE      |L1.26254|
00668a  8820              LDRH     r0,[r4,#0]            ;9437  ; sp_ch_stat_cnt
00668c  b908              CBNZ     r0,|L1.26258|
                  |L1.26254|
00668e  f8a4a000          STRH     r10,[r4,#0]           ;9439
                  |L1.26258|
006692  8820              LDRH     r0,[r4,#0]            ;9441  ; sp_ch_stat_cnt
006694  f1a00001          SUB      r0,r0,#1              ;9441
006698  b200              SXTH     r0,r0                 ;9441
00669a  8020              STRH     r0,[r4,#0]            ;9441
00669c  280a              CMP      r0,#0xa               ;9442
00669e  d001              BEQ      |L1.26276|
0066a0  2809              CMP      r0,#9                 ;9442
0066a2  d109              BNE      |L1.26296|
                  |L1.26276|
0066a4  4b89              LDR      r3,|L1.26828|
0066a6  a08a              ADR      r0,|L1.26832|
0066a8  f1030218          ADD      r2,r3,#0x18
0066ac  f1020118          ADD      r1,r2,#0x18
0066b0  f8cdb000          STR      r11,[sp,#0]
0066b4  f7fffffe          BL       show_mess
                  |L1.26296|
;;;9445   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;9446   					"      ВКЛЮЧЕН       ",
;;;9447   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;9448   					5000);
;;;9449   		}
;;;9450   	}
;;;9451   if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
0066b8  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0066ba  2804              CMP      r0,#4
0066bc  d11f              BNE      |L1.26366|
;;;9452   	{
;;;9453   	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
0066be  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
0066c0  2804              CMP      r0,#4
0066c2  d101              BNE      |L1.26312|
0066c4  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0066c6  b908              CBNZ     r0,|L1.26316|
                  |L1.26312|
;;;9454   		{
;;;9455   		sp_ch_stat_cnt=10;
0066c8  f8a4a000          STRH     r10,[r4,#0]
                  |L1.26316|
;;;9456   		}
;;;9457   	sp_ch_stat_cnt--;
0066cc  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0066ce  f1a00001          SUB      r0,r0,#1
0066d2  b200              SXTH     r0,r0
0066d4  8020              STRH     r0,[r4,#0]
;;;9458   	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
0066d6  280a              CMP      r0,#0xa
0066d8  d001              BEQ      |L1.26334|
0066da  2809              CMP      r0,#9
0066dc  d109              BNE      |L1.26354|
                  |L1.26334|
;;;9459   		{
;;;9460   		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0066de  4b82              LDR      r3,|L1.26856|
0066e0  a07b              ADR      r0,|L1.26832|
0066e2  f1030218          ADD      r2,r3,#0x18
0066e6  f1020118          ADD      r1,r2,#0x18
0066ea  f8cdb000          STR      r11,[sp,#0]
0066ee  f7fffffe          BL       show_mess
                  |L1.26354|
;;;9461   					"    ЗАБЛОКИРОВАН    ",
;;;9462   					"     НЕИСПРАВНА     ",
;;;9463   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;9464   					5000);
;;;9465   		}
;;;9466   	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0066f2  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
0066f6  2801              CMP      r0,#1
0066f8  d101              BNE      |L1.26366|
0066fa  f8878000          STRB     r8,[r7,#0]
                  |L1.26366|
;;;9467   	}
;;;9468   
;;;9469   
;;;9470   sp_ch_stat_old=sp_ch_stat;
0066fe  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006700  7030              STRB     r0,[r6,#0]
;;;9471   
;;;9472   
;;;9473   
;;;9474   if(speedChrgAvtEn==1)
006702  497a              LDR      r1,|L1.26860|
;;;9475   	{
;;;9476   	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;9477   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9478   		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;9479   		#endif
;;;9480   		)
;;;9481   		{
;;;9482   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;9483   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9484   		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;9485   		#endif
;;;9486   		#ifdef UKU_220_V2
;;;9487   		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;9488   		#endif
;;;9489   		&&(!speedChrgBlckStat))
006704  4c55              LDR      r4,|L1.26716|
006706  8809              LDRH     r1,[r1,#0]            ;9474  ; speedChrgAvtEn
006708  2901              CMP      r1,#1                 ;9474
00670a  d109              BNE      |L1.26400|
00670c  4954              LDR      r1,|L1.26720|
;;;9490   			{
;;;9491   			speedChargeStartCnt++;
00670e  4e78              LDR      r6,|L1.26864|
006710  7f8a              LDRB     r2,[r1,#0x1e]         ;9476  ; spc_stat
006712  4310              ORRS     r0,r0,r2              ;9476
006714  784a              LDRB     r2,[r1,#1]            ;9476  ; vz1_stat
006716  78c9              LDRB     r1,[r1,#3]            ;9476  ; vz2_stat
006718  4310              ORRS     r0,r0,r2              ;9476
00671a  4308              ORRS     r0,r0,r1              ;9476
00671c  d007              BEQ      |L1.26414|
;;;9492   			if(speedChargeStartCnt>=60)
;;;9493   				{
;;;9494   				speedChargeStartStop();
;;;9495   				speedz_mem_hndl(5);
;;;9496   				}
;;;9497   			}
;;;9498   		else speedChargeStartCnt=0;
;;;9499   		}
;;;9500   	else speedChargeStartCnt=0;
00671e  7035              STRB     r5,[r6,#0]
                  |L1.26400|
;;;9501   	}
;;;9502   
;;;9503   
;;;9504   
;;;9505   /*
;;;9506   if(speedChIsOn)
;;;9507   	{
;;;9508   	speedChTimeCnt++;
;;;9509   	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;9510   		{
;;;9511   		speedChIsOn=0;
;;;9512   		}
;;;9513   	if(speedChrgBlckStat)
;;;9514   		{
;;;9515   		speedChIsOn=0;
;;;9516   		speedChTimeCnt=0;
;;;9517   		}
;;;9518   	}
;;;9519   
;;;9520   
;;;9521   
;;;9522   if(speedChrgAvtEn)
;;;9523   	{
;;;9524   	if(!speedChIsOn)
;;;9525   		{
;;;9526   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;9527   			{
;;;9528   			speedChIsOn=1;
;;;9529   			}
;;;9530   		}
;;;9531   	}
;;;9532   
;;;9533   
;;;9534   */
;;;9535   if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006720  4874              LDR      r0,|L1.26868|
006722  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006724  2802              CMP      r0,#2
006726  d02e              BEQ      |L1.26502|
006728  8025              STRH     r5,[r4,#0]
                  |L1.26410|
;;;9536   else
;;;9537   	{
;;;9538   	speedChrgBlckStat=0;
;;;9539   	if(speedChrgBlckSrc==1)
;;;9540   		{
;;;9541   		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;9542   		}
;;;9543   	else if(speedChrgBlckSrc==2)
;;;9544   		{
;;;9545   		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;9546   		}
;;;9547   	}
;;;9548   
;;;9549   /*
;;;9550   if(speedChrgBlckStat==1)
;;;9551   	{
;;;9552   
;;;9553   	//speedChargeStartStop();
;;;9554   
;;;9555   	speedChrgShowCnt++;
;;;9556   	if(speedChrgShowCnt>=30)	
;;;9557   		{
;;;9558   		speedChrgShowCnt=0;
;;;9559   		show_mess(	"     УСКОРЕННЫЙ     ",
;;;9560   					"       ЗАРЯД        ",
;;;9561   					"     ЗАПРЕЩЕН!!!    ",
;;;9562   					"                    ",
;;;9563   					5000);
;;;9564   		}
;;;9565   	} 
;;;9566   else speedChrgShowCnt=0;  */
;;;9567   
;;;9568   
;;;9569   }
00672a  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.26414|
00672e  483e              LDR      r0,|L1.26664|
006730  4971              LDR      r1,|L1.26872|
006732  f9b00000          LDRSH    r0,[r0,#0]            ;9482  ; load_U
006736  f9b11000          LDRSH    r1,[r1,#0]            ;9482  ; u_necc
00673a  4288              CMP      r0,r1                 ;9482
00673c  da14              BGE      |L1.26472|
00673e  1a08              SUBS     r0,r1,r0              ;9482
006740  496e              LDR      r1,|L1.26876|
006742  f9b11000          LDRSH    r1,[r1,#0]            ;9482  ; speedChrgDU
006746  4288              CMP      r0,r1                 ;9482
006748  dd0e              BLE      |L1.26472|
00674a  486d              LDR      r0,|L1.26880|
00674c  496d              LDR      r1,|L1.26884|
00674e  f9b00000          LDRSH    r0,[r0,#0]            ;9484  ; Ib_ips_termokompensat
006752  8809              LDRH     r1,[r1,#0]            ;9484  ; IZMAX
006754  fb90f0fa          SDIV     r0,r0,r10             ;9484
006758  1a40              SUBS     r0,r0,r1              ;9484
00675a  b200              SXTH     r0,r0                 ;9484
00675c  f7fffffe          BL       abs
006760  2805              CMP      r0,#5                 ;9484
006762  da01              BGE      |L1.26472|
006764  8820              LDRH     r0,[r4,#0]            ;9489  ; speedChrgBlckStat
006766  b108              CBZ      r0,|L1.26476|
                  |L1.26472|
006768  7035              STRB     r5,[r6,#0]            ;9498
00676a  e7d9              B        |L1.26400|
                  |L1.26476|
00676c  7830              LDRB     r0,[r6,#0]            ;9491  ; speedChargeStartCnt
00676e  f1000001          ADD      r0,r0,#1              ;9491
006772  b2c0              UXTB     r0,r0                 ;9491
006774  7030              STRB     r0,[r6,#0]            ;9491
006776  283c              CMP      r0,#0x3c              ;9492
006778  d3d2              BCC      |L1.26400|
00677a  f7fffffe          BL       speedChargeStartStop
00677e  2005              MOVS     r0,#5                 ;9495
006780  f7fffffe          BL       speedz_mem_hndl
006784  e7cc              B        |L1.26400|
                  |L1.26502|
006786  8025              STRH     r5,[r4,#0]            ;9538
006788  485f              LDR      r0,|L1.26888|
00678a  4960              LDR      r1,|L1.26892|
00678c  f44f63fa          MOV      r3,#0x7d0             ;9541
006790  f9b00000          LDRSH    r0,[r0,#0]            ;9545  ; speedChrgBlckLog
006794  b918              CBNZ     r0,|L1.26526|
006796  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;9545  ; adc_buff_
00679a  429a              CMP      r2,r3                 ;9545
00679c  dc05              BGT      |L1.26538|
                  |L1.26526|
00679e  2801              CMP      r0,#1                 ;9545
0067a0  d1c3              BNE      |L1.26410|
0067a2  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;9545  ; adc_buff_
0067a6  4298              CMP      r0,r3                 ;9545
0067a8  dabf              BGE      |L1.26410|
                  |L1.26538|
0067aa  f04f0001          MOV      r0,#1                 ;9545
0067ae  8020              STRH     r0,[r4,#0]            ;9545
0067b0  e7bb              B        |L1.26410|
;;;9570   
                          ENDP

                  averageChargeHndl PROC
;;;9626   //-----------------------------------------------
;;;9627   void averageChargeHndl(void)
0067b2  e92d4ff8          PUSH     {r3-r11,lr}
;;;9628   {
;;;9629   /*
;;;9630   if(hv_vz_stat==hvsOFF)
;;;9631   	{
;;;9632   	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;9633   	} */
;;;9634   if(hv_vz_stat!=hvsOFF)
0067b6  f8dfa158          LDR      r10,|L1.26896|
0067ba  f04f0b00          MOV      r11,#0
0067be  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0067c2  b130              CBZ      r0,|L1.26578|
;;;9635   	{
;;;9636   	hv_vz_stat=hvsOFF; 	
0067c4  f88ab000          STRB     r11,[r10,#0]
;;;9637   	lc640_write(EE_HV_VZ_STAT,hvsOFF);
0067c8  2100              MOVS     r1,#0
0067ca  f44f70b4          MOV      r0,#0x168
0067ce  f7fffffe          BL       lc640_write
                  |L1.26578|
;;;9638   	}
;;;9639   
;;;9640   if(hv_vz_stat==hvsSTEP1)
0067d2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;9641   	{
;;;9642   	if(hv_vz_stat_old!=hv_vz_stat)
;;;9643   		{
;;;9644   		hv_vz_stat_cnt=5;
;;;9645   		}
;;;9646   	if(hv_vz_stat_cnt)
;;;9647   		{
;;;9648   		hv_vz_stat_cnt--;
;;;9649   		if(hv_vz_stat_cnt==0)
;;;9650   			{
;;;9651   			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;9652   			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;9653   			}
;;;9654   		}
;;;9655   	if(sk_stat[0]==1)
0067d6  4e37              LDR      r6,|L1.26804|
0067d8  4d4e              LDR      r5,|L1.26900|
0067da  4c4f              LDR      r4,|L1.26904|
0067dc  f04f0905          MOV      r9,#5                 ;9644
0067e0  2801              CMP      r0,#1                 ;9640
0067e2  d118              BNE      |L1.26646|
0067e4  7828              LDRB     r0,[r5,#0]            ;9642  ; hv_vz_stat_old
0067e6  2801              CMP      r0,#1                 ;9642
0067e8  d001              BEQ      |L1.26606|
0067ea  f8a49000          STRH     r9,[r4,#0]            ;9644
                  |L1.26606|
0067ee  f9b40000          LDRSH    r0,[r4,#0]            ;9646  ; hv_vz_stat_cnt
0067f2  b168              CBZ      r0,|L1.26640|
0067f4  f1a00001          SUB      r0,r0,#1              ;9648
0067f8  b200              SXTH     r0,r0                 ;9648
0067fa  8020              STRH     r0,[r4,#0]            ;9648
0067fc  b940              CBNZ     r0,|L1.26640|
0067fe  f04f0006          MOV      r0,#6                 ;9651
006802  f88a0000          STRB     r0,[r10,#0]           ;9651
006806  4601              MOV      r1,r0                 ;9652
006808  f44f70b4          MOV      r0,#0x168             ;9652
00680c  f7fffffe          BL       lc640_write
                  |L1.26640|
006810  7830              LDRB     r0,[r6,#0]  ; sk_stat
006812  2801              CMP      r0,#1
006814  e082              B        |L1.26908|
                  |L1.26646|
006816  e09b              B        |L1.26960|
                  |L1.26648|
                          DCD      superviser_cnt
                  |L1.26652|
                          DCD      NPN_OUT
                  |L1.26656|
                          DCD      npn_tz_cnt
                  |L1.26660|
                          DCD      npn_stat
                  |L1.26664|
                          DCD      load_U
                  |L1.26668|
                          DCD      UONPN
                  |L1.26672|
                          DCD      net_Ua
                  |L1.26676|
                          DCD      net_Ub
                  |L1.26680|
                          DCD      net_Uc
                  |L1.26684|
                          DCD      UMN
                  |L1.26688|
                          DCD      TZNPN
                  |L1.26692|
                          DCD      UVNPN
                  |L1.26696|
                          DCD      load_off_cnt
                  |L1.26700|
                          DCD      load_off_stat
                  |L1.26704|
                          DCD      dUNPN
                  |L1.26708|
                          DCD      tloaddisable_cmnd
                  |L1.26712|
                          DCD      sp_ch_stat
                  |L1.26716|
                          DCD      speedChrgBlckStat
                  |L1.26720|
                          DCD      ||area_number.18||
                  |L1.26724|
                          DCD      ||.text||+0xe90
                  |L1.26728|
006868  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
00686c  e7e0e1eb
006870  eeeae8f0
006874  eee2e0ed
006878  21      
006879  20202000          DCB      "   ",0
00687d  00                DCB      0
00687e  00                DCB      0
00687f  00                DCB      0
                  |L1.26752|
006880  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006884  202020e7
006888  e0f0ffe4
00688c  20202020
006890  20202020
006894  00      
006895  00                DCB      0
006896  00                DCB      0
006897  00                DCB      0
                  |L1.26776|
006898  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
00689c  20d3f1ea
0068a0  eef0e5ed
0068a4  edfbe920
0068a8  20202020
0068ac  00      
0068ad  00                DCB      0
0068ae  00                DCB      0
0068af  00                DCB      0
                  |L1.26800|
                          DCD      SP_CH_VENT_BLOK
                  |L1.26804|
                          DCD      sk_stat
                  |L1.26808|
                          DCD      sp_ch_stat_old
                  |L1.26812|
                          DCD      sp_ch_stat_cnt
                  |L1.26816|
                          DCD      sp_ch_wrk_cnt
                  |L1.26820|
                          DCD      hv_vz_up_cnt
                  |L1.26824|
                          DCD      speedChrgTimeInHour
                  |L1.26828|
                          DCD      ||.text||+0xd58
                  |L1.26832|
0068d0  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
0068d4  caced0c5
0068d8  cdcddbc9
0068dc  20c7c0  
0068df  d0dfc420          DCB      208,223,196,"  ",0
0068e3  2000    
0068e5  00                DCB      0
0068e6  00                DCB      0
0068e7  00                DCB      0
                  |L1.26856|
                          DCD      ||.text||+0x8e8
                  |L1.26860|
                          DCD      speedChrgAvtEn
                  |L1.26864|
                          DCD      speedChargeStartCnt
                  |L1.26868|
                          DCD      speedChrgBlckSrc
                  |L1.26872|
                          DCD      u_necc
                  |L1.26876|
                          DCD      speedChrgDU
                  |L1.26880|
                          DCD      Ib_ips_termokompensat
                  |L1.26884|
                          DCD      IZMAX
                  |L1.26888|
                          DCD      speedChrgBlckLog
                  |L1.26892|
                          DCD      ||.bss||+0x40c
                  |L1.26896|
                          DCD      hv_vz_stat
                  |L1.26900|
                          DCD      hv_vz_stat_old
                  |L1.26904|
                          DCD      hv_vz_stat_cnt
                  |L1.26908|
00691c  d118              BNE      |L1.26960|
;;;9656   		{
;;;9657   		hv_vz_stat=hvsSTEP2;
00691e  f04f0002          MOV      r0,#2
006922  f88a0000          STRB     r0,[r10,#0]
;;;9658   		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006926  4601              MOV      r1,r0
006928  f44f70b4          MOV      r0,#0x168
00692c  f7fffffe          BL       lc640_write
;;;9659   		tree_up(iHV_STEP2_2,1,0,0);
006930  2300              MOVS     r3,#0
006932  461a              MOV      r2,r3
006934  2101              MOVS     r1,#1
006936  20dc              MOVS     r0,#0xdc
006938  f7fffffe          BL       tree_up
;;;9660   		tree_up(iHV_STEP2_1,0,0,0);
00693c  2300              MOVS     r3,#0
00693e  461a              MOV      r2,r3
006940  4619              MOV      r1,r3
006942  20db              MOVS     r0,#0xdb
006944  f7fffffe          BL       tree_up
;;;9661   		ret(1200);
006948  f44f6096          MOV      r0,#0x4b0
00694c  f7fffffe          BL       ||ret||
                  |L1.26960|
;;;9662   		}
;;;9663   	}
;;;9664   
;;;9665   if(hv_vz_stat==hvsSTEP2)
006950  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006954  2802              CMP      r0,#2
006956  d10b              BNE      |L1.26992|
;;;9666   	{
;;;9667   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006958  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
00695a  2902              CMP      r1,#2
00695c  d101              BNE      |L1.26978|
00695e  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006960  b911              CBNZ     r1,|L1.26984|
                  |L1.26978|
;;;9668   		{
;;;9669   		hv_vz_stat_cnt=15;
006962  f04f010f          MOV      r1,#0xf
006966  8021              STRH     r1,[r4,#0]
                  |L1.26984|
;;;9670   		}
;;;9671   	hv_vz_stat_cnt--;
006968  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
00696a  f1a10101          SUB      r1,r1,#1
00696e  8021              STRH     r1,[r4,#0]
                  |L1.26992|
;;;9672   	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;9673   	//	{
;;;9674   //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;9675   	//				"  Напряжение будет  ",
;;;9676   	//				" увеличено до     @В",
;;;9677   	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;9678   	//				4800,UVZ,1);
;;;9679   	//	}
;;;9680   	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;9681   	//	{
;;;9682   	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;9683   	//				"     НАЖАТИЕМ       ",
;;;9684   	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;9685   	//				"      КНОПКИ        ",
;;;9686   	//				4800);
;;;9687   	//	} 
;;;9688   /*	if(sk_stat[1]==1)
;;;9689   		{
;;;9690   		hv_vz_stat=hvsWRK;
;;;9691   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;9692   		}*/
;;;9693   	}
;;;9694   
;;;9695   if(hv_vz_stat==hvsSTEP3)
;;;9696   	{
;;;9697   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;9698   		{
;;;9699   		hv_vz_stat_cnt=10;
006970  270a              MOVS     r7,#0xa
;;;9700   		}
;;;9701   	hv_vz_stat_cnt--;
;;;9702   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;9703   		{
;;;9704   		show_mess(	"     ВКЛЮЧИТЕ       ",
006972  f2413888          MOV      r8,#0x1388
006976  2803              CMP      r0,#3                 ;9695
006978  d122              BNE      |L1.27072|
00697a  7828              LDRB     r0,[r5,#0]            ;9697  ; hv_vz_stat_old
00697c  2803              CMP      r0,#3                 ;9697
00697e  d101              BNE      |L1.27012|
006980  8820              LDRH     r0,[r4,#0]            ;9697  ; hv_vz_stat_cnt
006982  b900              CBNZ     r0,|L1.27014|
                  |L1.27012|
006984  8027              STRH     r7,[r4,#0]            ;9699
                  |L1.27014|
006986  8820              LDRH     r0,[r4,#0]            ;9701  ; hv_vz_stat_cnt
006988  f1a00001          SUB      r0,r0,#1              ;9701
00698c  b200              SXTH     r0,r0                 ;9701
00698e  8020              STRH     r0,[r4,#0]            ;9701
006990  280a              CMP      r0,#0xa               ;9702
006992  d001              BEQ      |L1.27032|
006994  2809              CMP      r0,#9                 ;9702
006996  d109              BNE      |L1.27052|
                  |L1.27032|
006998  4bfe              LDR      r3,|L1.28052|
00699a  a2ff              ADR      r2,|L1.28056|
00699c  f5a37194          SUB      r1,r3,#0x128
0069a0  f1010018          ADD      r0,r1,#0x18
0069a4  f8cd8000          STR      r8,[sp,#0]
0069a8  f7fffffe          BL       show_mess
                  |L1.27052|
;;;9705   					"      ТУМБЛЕР       ",
;;;9706   					"   ВЫРАВНИВАЮЩИЙ    ",
;;;9707   					"       ЗАРЯД        ",
;;;9708   					5000);
;;;9709   		}
;;;9710   	if(sk_stat[1]==1)
0069ac  7870              LDRB     r0,[r6,#1]  ; sk_stat
0069ae  2801              CMP      r0,#1
0069b0  d106              BNE      |L1.27072|
;;;9711   		{
;;;9712   		hv_vz_stat=hvsWRK;
0069b2  f88a9000          STRB     r9,[r10,#0]
;;;9713   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0069b6  2105              MOVS     r1,#5
0069b8  f44f70b4          MOV      r0,#0x168
0069bc  f7fffffe          BL       lc640_write
                  |L1.27072|
;;;9714   		}
;;;9715   	}
;;;9716   
;;;9717   if(hv_vz_stat==hvsWRK)
0069c0  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0069c4  2805              CMP      r0,#5
0069c6  d13a              BNE      |L1.27198|
;;;9718   	{
;;;9719   	if(hv_vz_stat_old!=hv_vz_stat)
0069c8  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;9720   		{
;;;9721   		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
0069ca  4af9              LDR      r2,|L1.28080|
;;;9722   		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;9723   		hv_vz_up_cnt=0L;
0069cc  49f9              LDR      r1,|L1.28084|
0069ce  2805              CMP      r0,#5                 ;9719
0069d0  d00d              BEQ      |L1.27118|
0069d2  48f9              LDR      r0,|L1.28088|
0069d4  f44f6361          MOV      r3,#0xe10             ;9721
0069d8  f9b00000          LDRSH    r0,[r0,#0]            ;9721  ; VZ_HR
0069dc  fb00f303          MUL      r3,r0,r3              ;9721
0069e0  6013              STR      r3,[r2,#0]            ;9721  ; hv_vz_wrk_cnt
0069e2  b910              CBNZ     r0,|L1.27114|
0069e4  f44f60e1          MOV      r0,#0x708             ;9722
0069e8  6010              STR      r0,[r2,#0]            ;9722  ; hv_vz_wrk_cnt
                  |L1.27114|
0069ea  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27118|
;;;9724   		}
;;;9725   	hv_vz_wrk_cnt--;
0069ee  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
0069f0  f1a00001          SUB      r0,r0,#1
0069f4  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;9726   	hv_vz_up_cnt++;
0069f6  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
0069f8  f1020201          ADD      r2,r2,#1
0069fc  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;9727   
;;;9728   	if(hv_vz_wrk_cnt==0)
0069fe  b940              CBNZ     r0,|L1.27154|
;;;9729   		{
;;;9730   		hv_vz_stat=hvsERR4;
006a00  f04f0009          MOV      r0,#9
006a04  f88a0000          STRB     r0,[r10,#0]
;;;9731   		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006a08  4601              MOV      r1,r0
006a0a  f44f70b4          MOV      r0,#0x168
006a0e  f7fffffe          BL       lc640_write
                  |L1.27154|
;;;9732   		}
;;;9733   	if(sk_stat[0]==0)
006a12  7830              LDRB     r0,[r6,#0]  ; sk_stat
006a14  b940              CBNZ     r0,|L1.27176|
;;;9734   		{
;;;9735   		hv_vz_stat=hvsERR2;
006a16  f04f0007          MOV      r0,#7
006a1a  f88a0000          STRB     r0,[r10,#0]
;;;9736   		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006a1e  4601              MOV      r1,r0
006a20  f44f70b4          MOV      r0,#0x168
006a24  f7fffffe          BL       lc640_write
                  |L1.27176|
;;;9737   		}
;;;9738   	if(sk_stat[1]==0)
006a28  7870              LDRB     r0,[r6,#1]  ; sk_stat
006a2a  b940              CBNZ     r0,|L1.27198|
;;;9739   		{
;;;9740   		hv_vz_stat=hvsERR3;
006a2c  f04f0008          MOV      r0,#8
006a30  f88a0000          STRB     r0,[r10,#0]
;;;9741   		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006a34  4601              MOV      r1,r0
006a36  f44f70b4          MOV      r0,#0x168
006a3a  f7fffffe          BL       lc640_write
                  |L1.27198|
;;;9742   		}
;;;9743   	}
;;;9744   
;;;9745   if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006a3e  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006a42  2806              CMP      r0,#6
006a44  d11a              BNE      |L1.27260|
;;;9746   	{
;;;9747   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006a46  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006a48  2806              CMP      r0,#6
006a4a  d101              BNE      |L1.27216|
006a4c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006a4e  b900              CBNZ     r0,|L1.27218|
                  |L1.27216|
;;;9748   		{
;;;9749   		hv_vz_stat_cnt=10;
006a50  8027              STRH     r7,[r4,#0]
                  |L1.27218|
;;;9750   		}
;;;9751   	hv_vz_stat_cnt--;
006a52  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006a54  f1a00001          SUB      r0,r0,#1
006a58  b200              SXTH     r0,r0
006a5a  8020              STRH     r0,[r4,#0]
;;;9752   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006a5c  280a              CMP      r0,#0xa
006a5e  d001              BEQ      |L1.27236|
006a60  2809              CMP      r0,#9
006a62  d10b              BNE      |L1.27260|
                  |L1.27236|
;;;9753   		{
;;;9754   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006a64  4bcb              LDR      r3,|L1.28052|
006a66  f8cd8000          STR      r8,[sp,#0]
006a6a  3bf0              SUBS     r3,r3,#0xf0
006a6c  f1030218          ADD      r2,r3,#0x18
006a70  f1020118          ADD      r1,r2,#0x18
006a74  f5a1608b          SUB      r0,r1,#0x458
006a78  f7fffffe          BL       show_mess
                  |L1.27260|
;;;9755   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;9756   					"      ВКЛЮЧЕН       ",
;;;9757   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;9758   					5000);
;;;9759   		}
;;;9760   	}
;;;9761   if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006a7c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006a80  2807              CMP      r0,#7
006a82  d123              BNE      |L1.27340|
;;;9762   	{
;;;9763   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006a84  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006a86  2807              CMP      r0,#7
006a88  d101              BNE      |L1.27278|
006a8a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006a8c  b900              CBNZ     r0,|L1.27280|
                  |L1.27278|
;;;9764   		{
;;;9765   		hv_vz_stat_cnt=10;
006a8e  8027              STRH     r7,[r4,#0]
                  |L1.27280|
;;;9766   		}
;;;9767   	hv_vz_stat_cnt--;
006a90  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006a92  f1a00001          SUB      r0,r0,#1
006a96  b200              SXTH     r0,r0
006a98  8020              STRH     r0,[r4,#0]
;;;9768   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006a9a  280a              CMP      r0,#0xa
006a9c  d001              BEQ      |L1.27298|
006a9e  2809              CMP      r0,#9
006aa0  d10a              BNE      |L1.27320|
                  |L1.27298|
;;;9769   		{
;;;9770   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006aa2  4bc6              LDR      r3,|L1.28092|
006aa4  f8cd8000          STR      r8,[sp,#0]
006aa8  f1030218          ADD      r2,r3,#0x18
006aac  f1020118          ADD      r1,r2,#0x18
006ab0  f1010018          ADD      r0,r1,#0x18
006ab4  f7fffffe          BL       show_mess
                  |L1.27320|
;;;9771   					"    ЗАБЛОКИРОВАН    ",
;;;9772   					"     НЕИСПРАВНА     ",
;;;9773   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;9774   					5000);
;;;9775   		}
;;;9776   	if(sk_stat[0]==1)
006ab8  7830              LDRB     r0,[r6,#0]  ; sk_stat
006aba  2801              CMP      r0,#1
006abc  d106              BNE      |L1.27340|
;;;9777   		{
;;;9778   		hv_vz_stat=hvsWRK;
006abe  f88a9000          STRB     r9,[r10,#0]
;;;9779   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006ac2  2105              MOVS     r1,#5
006ac4  f44f70b4          MOV      r0,#0x168
006ac8  f7fffffe          BL       lc640_write
                  |L1.27340|
;;;9780   		}
;;;9781   	}
;;;9782   
;;;9783   if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006acc  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006ad0  2808              CMP      r0,#8
006ad2  d123              BNE      |L1.27420|
;;;9784   	{
;;;9785   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006ad4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006ad6  2808              CMP      r0,#8
006ad8  d101              BNE      |L1.27358|
006ada  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006adc  b900              CBNZ     r0,|L1.27360|
                  |L1.27358|
;;;9786   		{
;;;9787   		hv_vz_stat_cnt=10;
006ade  8027              STRH     r7,[r4,#0]
                  |L1.27360|
;;;9788   		}
;;;9789   	hv_vz_stat_cnt--;
006ae0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ae2  f1a00001          SUB      r0,r0,#1
006ae6  b200              SXTH     r0,r0
006ae8  8020              STRH     r0,[r4,#0]
;;;9790   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006aea  280a              CMP      r0,#0xa
006aec  d001              BEQ      |L1.27378|
006aee  2809              CMP      r0,#9
006af0  d10a              BNE      |L1.27400|
                  |L1.27378|
;;;9791   		{
;;;9792   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006af2  4bb3              LDR      r3,|L1.28096|
006af4  f8cd8000          STR      r8,[sp,#0]
006af8  f6a31264          SUB      r2,r3,#0x964
006afc  f1020118          ADD      r1,r2,#0x18
006b00  f5a16097          SUB      r0,r1,#0x4b8
006b04  f7fffffe          BL       show_mess
                  |L1.27400|
;;;9793   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;9794   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;9795   					"    ТУМБЛЕРА!!!     ",
;;;9796   					5000);
;;;9797   		}
;;;9798   	if(sk_stat[1]==1)
006b08  7870              LDRB     r0,[r6,#1]  ; sk_stat
006b0a  2801              CMP      r0,#1
006b0c  d106              BNE      |L1.27420|
;;;9799   		{
;;;9800   		hv_vz_stat=hvsWRK;
006b0e  f88a9000          STRB     r9,[r10,#0]
;;;9801   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006b12  2105              MOVS     r1,#5
006b14  f44f70b4          MOV      r0,#0x168
006b18  f7fffffe          BL       lc640_write
                  |L1.27420|
;;;9802   		}
;;;9803   	}
;;;9804   if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006b1c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006b20  2809              CMP      r0,#9
006b22  d123              BNE      |L1.27500|
;;;9805   	{
;;;9806   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006b24  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006b26  2809              CMP      r0,#9
006b28  d101              BNE      |L1.27438|
006b2a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006b2c  b900              CBNZ     r0,|L1.27440|
                  |L1.27438|
;;;9807   		{
;;;9808   		hv_vz_stat_cnt=10;
006b2e  8027              STRH     r7,[r4,#0]
                  |L1.27440|
;;;9809   		}
;;;9810   	hv_vz_stat_cnt--;
006b30  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006b32  f1a00001          SUB      r0,r0,#1
006b36  b200              SXTH     r0,r0
006b38  8020              STRH     r0,[r4,#0]
;;;9811   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006b3a  280a              CMP      r0,#0xa
006b3c  d001              BEQ      |L1.27458|
006b3e  2809              CMP      r0,#9
006b40  d109              BNE      |L1.27478|
                  |L1.27458|
;;;9812   		{
;;;9813   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006b42  4b94              LDR      r3,|L1.28052|
006b44  a294              ADR      r2,|L1.28056|
006b46  f5a37194          SUB      r1,r3,#0x128
006b4a  f50170ac          ADD      r0,r1,#0x158
006b4e  f8cd8000          STR      r8,[sp,#0]
006b52  f7fffffe          BL       show_mess
                  |L1.27478|
;;;9814   					"      ТУМБЛЕР       ",
;;;9815   					"   ВЫРАВНИВАЮЩИЙ    ",
;;;9816   					"       ЗАРЯД        ",
;;;9817   					5000);
;;;9818   		}
;;;9819   	if(sk_stat[1]==0)
006b56  7870              LDRB     r0,[r6,#1]  ; sk_stat
006b58  b940              CBNZ     r0,|L1.27500|
;;;9820   		{
;;;9821   		hv_vz_stat=hvsOFF;
006b5a  f88ab000          STRB     r11,[r10,#0]
;;;9822   		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006b5e  2100              MOVS     r1,#0
006b60  f44f70b4          MOV      r0,#0x168
006b64  f7fffffe          BL       lc640_write
;;;9823   		vz_stop();
006b68  f7fffffe          BL       vz_stop
                  |L1.27500|
;;;9824   
;;;9825   		}
;;;9826   	}
;;;9827   hv_vz_stat_old=hv_vz_stat;
006b6c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006b70  7028              STRB     r0,[r5,#0]
;;;9828   /*
;;;9829   if(speedChIsOn)
;;;9830   	{
;;;9831   	speedChTimeCnt++;
;;;9832   	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;9833   		{
;;;9834   		speedChIsOn=0;
;;;9835   		}
;;;9836   	if(speedChrgBlckStat)
;;;9837   		{
;;;9838   		speedChIsOn=0;
;;;9839   		speedChTimeCnt=0;
;;;9840   		}
;;;9841   	}
;;;9842   
;;;9843   
;;;9844   
;;;9845   if(speedChrgAvtEn)
;;;9846   	{
;;;9847   	if(!speedChIsOn)
;;;9848   		{
;;;9849   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;9850   			{
;;;9851   			speedChIsOn=1;
;;;9852   			}
;;;9853   		}
;;;9854   	}
;;;9855   
;;;9856   
;;;9857   
;;;9858   if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;9859   else
;;;9860   	{
;;;9861   	speedChrgBlckStat=0;
;;;9862   	if(speedChrgBlckSrc==1)
;;;9863   		{
;;;9864   		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;9865   		}
;;;9866   	else if(speedChrgBlckSrc==2)
;;;9867   		{
;;;9868   		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;9869   		}
;;;9870   	}
;;;9871   
;;;9872   
;;;9873   if(speedChrgBlckStat==1)
;;;9874   	{
;;;9875   
;;;9876   	//speedChargeStartStop();
;;;9877   
;;;9878   	speedChrgShowCnt++;
;;;9879   	if(speedChrgShowCnt>=30)	
;;;9880   		{
;;;9881   		speedChrgShowCnt=0;
;;;9882   		show_mess(	"     УСКОРЕННЫЙ     ",
;;;9883   					"       ЗАРЯД        ",
;;;9884   					"     ЗАПРЕЩЕН!!!    ",
;;;9885   					"                    ",
;;;9886   					5000);
;;;9887   		}
;;;9888   	}
;;;9889   else speedChrgShowCnt=0;
;;;9890   
;;;9891   */
;;;9892   }
006b72  e5da              B        |L1.26410|
;;;9893   
                          ENDP

                  averageChargeStartStop PROC
;;;9894   //-----------------------------------------------
;;;9895   void averageChargeStartStop(void)
006b74  4993              LDR      r1,|L1.28100|
;;;9896   {
;;;9897   if(hv_vz_stat!=hvsOFF)
;;;9898   	{
;;;9899   	hv_vz_stat=hvsOFF;
;;;9900   	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006b76  f44f70b4          MOV      r0,#0x168
006b7a  780a              LDRB     r2,[r1,#0]            ;9897  ; hv_vz_stat
006b7c  b132              CBZ      r2,|L1.27532|
006b7e  f04f0200          MOV      r2,#0                 ;9899
006b82  700a              STRB     r2,[r1,#0]            ;9899
006b84  f04f0100          MOV      r1,#0
006b88  f7ffbffe          B.W      lc640_write
                  |L1.27532|
;;;9901   	}
;;;9902   
;;;9903   else
;;;9904   	{
;;;9905   	hv_vz_stat=hvsSTEP1;
006b8c  f04f0201          MOV      r2,#1
006b90  700a              STRB     r2,[r1,#0]
;;;9906   	lc640_write(EE_HV_VZ_STAT,hvsSTEP1);
006b92  4611              MOV      r1,r2
006b94  f7ffbffe          B.W      lc640_write
;;;9907   	}
;;;9908   }
;;;9909   
                          ENDP

                  numOfForvardBps_hndl PROC
;;;9910   //-----------------------------------------------
;;;9911   void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006b98  e92d41f0          PUSH     {r4-r8,lr}
;;;9912   {
;;;9913   
;;;9914   numOfForvardBps_old=numOfForvardBps;
006b9c  4c8a              LDR      r4,|L1.28104|
006b9e  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006ba0  7060              STRB     r0,[r4,#1]
;;;9915   
;;;9916   numOfForvardBps=0;
006ba2  f04f0500          MOV      r5,#0
006ba6  f8045923          STRB     r5,[r4],#-0x23
;;;9917   
;;;9918   //FORVARDBPSCHHOUR=10;
;;;9919   
;;;9920   if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006baa  4e88              LDR      r6,|L1.28108|
006bac  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006bb0  2800              CMP      r0,#0
006bb2  dd02              BLE      |L1.27578|
006bb4  f5b07ffa          CMP      r0,#0x1f4
006bb8  dd02              BLE      |L1.27584|
                  |L1.27578|
;;;9921   	{
;;;9922   	FORVARDBPSCHHOUR=0;
006bba  8035              STRH     r5,[r6,#0]
                  |L1.27580|
;;;9923   	return;
;;;9924   	}
;;;9925   
;;;9926   numOfForvardBps_minCnt++;
;;;9927   
;;;9928   
;;;9929   if(numOfForvardBps_minCnt>=60)
;;;9930   	{
;;;9931   	numOfForvardBps_minCnt=0;
;;;9932   	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;9933   	numOfForvardBps_hourCnt++;
;;;9934   	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;9935   		{
;;;9936   		numOfForvardBps_hourCnt=0;
;;;9937   		}
;;;9938   	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;9939   	}
;;;9940   
;;;9941   numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;9942   
;;;9943   //if(numOfForvardBps)
;;;9944   //numOfForvardBps_old=numOfForvardBps; 
;;;9945   }
006bbc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.27584|
006bc0  f8940025          LDRB     r0,[r4,#0x25]         ;9926  ; numOfForvardBps_minCnt
006bc4  f1000001          ADD      r0,r0,#1              ;9926
006bc8  b2c0              UXTB     r0,r0                 ;9926
006bca  f8840025          STRB     r0,[r4,#0x25]         ;9926
006bce  283c              CMP      r0,#0x3c              ;9929
006bd0  d31b              BCC      |L1.27658|
006bd2  f8845025          STRB     r5,[r4,#0x25]         ;9931
006bd6  f44f7794          MOV      r7,#0x128             ;9932
006bda  4638              MOV      r0,r7                 ;9932
006bdc  f7fffffe          BL       lc640_read_int
006be0  f1000001          ADD      r0,r0,#1              ;9933
006be4  b200              SXTH     r0,r0                 ;9933
006be6  f8a40072          STRH     r0,[r4,#0x72]         ;9933
006bea  4a79              LDR      r2,|L1.28112|
006bec  f9b61000          LDRSH    r1,[r6,#0]            ;9934  ; FORVARDBPSCHHOUR
006bf0  f9b22000          LDRSH    r2,[r2,#0]            ;9934  ; NUMIST
006bf4  fb01f102          MUL      r1,r1,r2              ;9934
006bf8  4281              CMP      r1,r0                 ;9934
006bfa  dc01              BGT      |L1.27648|
006bfc  f8a45072          STRH     r5,[r4,#0x72]         ;9936
                  |L1.27648|
006c00  f9b41072          LDRSH    r1,[r4,#0x72]         ;9938  ; numOfForvardBps_hourCnt
006c04  4638              MOV      r0,r7                 ;9938
006c06  f7fffffe          BL       lc640_write_int
                  |L1.27658|
006c0a  f9b40072          LDRSH    r0,[r4,#0x72]         ;9941  ; numOfForvardBps_hourCnt
006c0e  f9b61000          LDRSH    r1,[r6,#0]            ;9941  ; FORVARDBPSCHHOUR
006c12  fb90f0f1          SDIV     r0,r0,r1              ;9941
006c16  f8840023          STRB     r0,[r4,#0x23]         ;9941
006c1a  e7cf              B        |L1.27580|
;;;9946   
                          ENDP

                  numOfForvardBps_init PROC
;;;9947   //-----------------------------------------------
;;;9948   void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006c1c  b510              PUSH     {r4,lr}
;;;9949   {									//Должна вызываться при изменении кол-ва источников в структуре
;;;9950   lc640_write_int(EE_FORVBPSHOURCNT,0);
006c1e  2100              MOVS     r1,#0
006c20  f44f7094          MOV      r0,#0x128
006c24  f7fffffe          BL       lc640_write_int
;;;9951   numOfForvardBps_minCnt=58;
006c28  4967              LDR      r1,|L1.28104|
006c2a  f04f003a          MOV      r0,#0x3a
006c2e  f1a10123          SUB      r1,r1,#0x23
006c32  f8810025          STRB     r0,[r1,#0x25]
;;;9952   }
006c36  bd10              POP      {r4,pc}
;;;9953   
                          ENDP

                  outVoltContrHndl PROC
;;;9954   //-----------------------------------------------
;;;9955   void outVoltContrHndl(void)
006c38  b570              PUSH     {r4-r6,lr}
;;;9956   { 
;;;9957   if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006c3a  4c66              LDR      r4,|L1.28116|
006c3c  4866              LDR      r0,|L1.28120|
;;;9958   	{
;;;9959   	outVoltContrHndlCnt_=0;
;;;9960   	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006c3e  4a67              LDR      r2,|L1.28124|
006c40  f9b41000          LDRSH    r1,[r4,#0]            ;9957  ; load_U
006c44  f9b06000          LDRSH    r6,[r0,#0]            ;9957  ; U_OUT_KONTR_MAX
006c48  2500              MOVS     r5,#0                 ;9959
006c4a  f9b20000          LDRSH    r0,[r2,#0]
006c4e  4b64              LDR      r3,|L1.28128|
006c50  42b1              CMP      r1,r6                 ;9957
006c52  dc04              BGT      |L1.27742|
006c54  4e63              LDR      r6,|L1.28132|
006c56  f9b66000          LDRSH    r6,[r6,#0]            ;9957  ; U_OUT_KONTR_MIN
006c5a  42b1              CMP      r1,r6                 ;9957
006c5c  da0f              BGE      |L1.27774|
                  |L1.27742|
006c5e  801d              STRH     r5,[r3,#0]            ;9959
006c60  4961              LDR      r1,|L1.28136|
006c62  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006c66  4288              CMP      r0,r1
006c68  da1b              BGE      |L1.27810|
;;;9961   		{
;;;9962   		outVoltContrHndlCnt++;
006c6a  f1000001          ADD      r0,r0,#1
006c6e  b200              SXTH     r0,r0
006c70  8010              STRH     r0,[r2,#0]
;;;9963   		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006c72  4288              CMP      r0,r1
006c74  d115              BNE      |L1.27810|
;;;9964   			{
;;;9965   			avar_uout_hndl(1);
006c76  2001              MOVS     r0,#1
006c78  f7fffffe          BL       avar_uout_hndl
006c7c  e011              B        |L1.27810|
                  |L1.27774|
;;;9966   			}
;;;9967   		}
;;;9968   	}
;;;9969   else
;;;9970   	{
;;;9971   	if(outVoltContrHndlCnt)
006c7e  b180              CBZ      r0,|L1.27810|
;;;9972   		{
;;;9973   		if(outVoltContrHndlCnt_<5)
006c80  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006c84  2805              CMP      r0,#5
006c86  da0c              BGE      |L1.27810|
;;;9974   			{
;;;9975   			outVoltContrHndlCnt_++;
006c88  f1000001          ADD      r0,r0,#1
006c8c  b200              SXTH     r0,r0
006c8e  8018              STRH     r0,[r3,#0]
;;;9976   			if(outVoltContrHndlCnt_>=5)
006c90  2805              CMP      r0,#5
006c92  db06              BLT      |L1.27810|
;;;9977   				{
;;;9978   				outVoltContrHndlCnt=0;
006c94  8015              STRH     r5,[r2,#0]
;;;9979   				if(uout_av)avar_uout_hndl(0);
006c96  4855              LDR      r0,|L1.28140|
006c98  7800              LDRB     r0,[r0,#0]  ; uout_av
006c9a  b110              CBZ      r0,|L1.27810|
006c9c  2000              MOVS     r0,#0
006c9e  f7fffffe          BL       avar_uout_hndl
                  |L1.27810|
;;;9980   				}
;;;9981   			}
;;;9982   		}
;;;9983   	}
;;;9984   
;;;9985   if (load_U<(USIGN*10)) 
006ca2  4853              LDR      r0,|L1.28144|
006ca4  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006ca8  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006cac  eb000080          ADD      r0,r0,r0,LSL #2
006cb0  ebb10f40          CMP      r1,r0,LSL #1
006cb4  da0b              BGE      |L1.27854|
;;;9986   	{
;;;9987   	if(!bSILENT)
006cb6  484f              LDR      r0,|L1.28148|
006cb8  6800              LDR      r0,[r0,#0]  ; bSILENT
006cba  2800              CMP      r0,#0
006cbc  d107              BNE      |L1.27854|
;;;9988   		{
;;;9989   		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006cbe  e8bd4070          POP      {r4-r6,lr}
006cc2  2314              MOVS     r3,#0x14
006cc4  2201              MOVS     r2,#1
006cc6  2172              MOVS     r1,#0x72
006cc8  20d2              MOVS     r0,#0xd2
006cca  f7ffbffe          B.W      mess_send
                  |L1.27854|
;;;9990   		}
;;;9991   
;;;9992   	//bU_BAT2REL_AV_BAT=1;
;;;9993   	}
;;;9994   
;;;9995   
;;;9996   }
006cce  bd70              POP      {r4-r6,pc}
;;;9997   
                          ENDP

                  vent_resurs_hndl PROC
;;;9998   //-----------------------------------------------
;;;9999   void vent_resurs_hndl(void)
006cd0  e92d47f0          PUSH     {r4-r10,lr}
;;;10000  {
;;;10001  char i;
;;;10002  char crc_in,crc_eval;
;;;10003  
;;;10004  for(i=0;i<NUMIST;i++)
006cd4  f04f0200          MOV      r2,#0
;;;10005  	{
;;;10006  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10007  		{
;;;10008  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10009  		}
;;;10010  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10011  		{
;;;10012  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10013  		}
;;;10014  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10015  		{
;;;10016  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10017  		}
;;;10018  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10019  		{
;;;10020  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10021  		}
;;;10022  	crc_in=0;
;;;10023  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10024  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10025  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10026  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10027  
;;;10028  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10029  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10030  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10031  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10032  
;;;10033  	if(crc_eval==crc_in)
;;;10034  		{
;;;10035  		unsigned short temp_US;
;;;10036  		temp_US=0;
;;;10037  
;;;10038  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10039  		temp_US<<=4;
;;;10040  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10041  		temp_US<<=4;
;;;10042  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10043  		temp_US<<=4;
;;;10044  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10045  
;;;10046  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10047  		}
;;;10048  
;;;10049  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006cd8  4847              LDR      r0,|L1.28152|
006cda  f8dfc120          LDR      r12,|L1.28156|
006cde  f9b06000          LDRSH    r6,[r0,#0]
006ce2  483b              LDR      r0,|L1.28112|
006ce4  f9b07000          LDRSH    r7,[r0,#0]            ;10004
006ce8  e0a5              B        |L1.28214|
                  |L1.27882|
006cea  ebc200c2          RSB      r0,r2,r2,LSL #3       ;10006
006cee  eb001002          ADD      r0,r0,r2,LSL #4       ;10006
006cf2  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10006
006cf6  7b41              LDRB     r1,[r0,#0xd]          ;10006
006cf8  098b              LSRS     r3,r1,#6              ;10006
006cfa  d006              BEQ      |L1.27914|
006cfc  2301              MOVS     r3,#1                 ;10010
006cfe  ebb31f91          CMP      r3,r1,LSR #6          ;10010
006d02  d105              BNE      |L1.27920|
006d04  f8801055          STRB     r1,[r0,#0x55]         ;10012
006d08  e00f              B        |L1.27946|
                  |L1.27914|
006d0a  f8801054          STRB     r1,[r0,#0x54]         ;10008
006d0e  e00c              B        |L1.27946|
                  |L1.27920|
006d10  2302              MOVS     r3,#2                 ;10014
006d12  ebb31f91          CMP      r3,r1,LSR #6          ;10014
006d16  d102              BNE      |L1.27934|
006d18  f8801056          STRB     r1,[r0,#0x56]         ;10016
006d1c  e005              B        |L1.27946|
                  |L1.27934|
006d1e  2303              MOVS     r3,#3                 ;10018
006d20  ebb31f91          CMP      r3,r1,LSR #6          ;10018
006d24  d101              BNE      |L1.27946|
006d26  f8801057          STRB     r1,[r0,#0x57]         ;10020
                  |L1.27946|
006d2a  f8101f54          LDRB     r1,[r0,#0x54]!        ;10023
006d2e  f3c11401          UBFX     r4,r1,#4,#2           ;10023
006d32  7843              LDRB     r3,[r0,#1]            ;10024
006d34  f0030530          AND      r5,r3,#0x30           ;10024
006d38  ea440495          ORR      r4,r4,r5,LSR #2       ;10024
006d3c  f8909002          LDRB     r9,[r0,#2]            ;10025
006d40  f0090830          AND      r8,r9,#0x30           ;10025
006d44  ea480804          ORR      r8,r8,r4              ;10025
006d48  78c5              LDRB     r5,[r0,#3]            ;10026
006d4a  f1a00054          SUB      r0,r0,#0x54           ;10026
006d4e  f0050430          AND      r4,r5,#0x30           ;10026
006d52  ea480884          ORR      r8,r8,r4,LSL #2       ;10026
006d56  f001010f          AND      r1,r1,#0xf            ;10028
006d5a  f003040f          AND      r4,r3,#0xf            ;10029
006d5e  ea840a01          EOR      r10,r4,r1             ;10029
006d62  f009030f          AND      r3,r9,#0xf            ;10030
006d66  ea83090a          EOR      r9,r3,r10             ;10030
006d6a  f005050f          AND      r5,r5,#0xf            ;10031
006d6e  ea850909          EOR      r9,r5,r9              ;10031
006d72  45c1              CMP      r9,r8                 ;10033
006d74  d14a              BNE      |L1.28172|
006d76  ea4f1505          LSL      r5,r5,#4              ;10039
006d7a  ea430305          ORR      r3,r3,r5              ;10040
006d7e  ea4f1303          LSL      r3,r3,#4              ;10041
006d82  ea440403          ORR      r4,r4,r3              ;10042
006d86  ea4f5304          LSL      r3,r4,#20             ;10043
006d8a  ea4f4313          LSR      r3,r3,#16             ;10043
006d8e  ea410103          ORR      r1,r1,r3              ;10044
006d92  e035              B        |L1.28160|
                  |L1.28052|
                          DCD      ||.text||+0xe48
                  |L1.28056|
006d98  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006d9c  dbd0c0c2
006da0  cdc8c2c0
006da4  ded9c8c9
006da8  20202020          DCB      "    ",0
006dac  00      
006dad  00                DCB      0
006dae  00                DCB      0
006daf  00                DCB      0
                  |L1.28080|
                          DCD      hv_vz_wrk_cnt
                  |L1.28084|
                          DCD      hv_vz_up_cnt
                  |L1.28088|
                          DCD      VZ_HR
                  |L1.28092|
                          DCD      ||.text||+0x8e8
                  |L1.28096|
                          DCD      ||.text||+0x1734
                  |L1.28100|
                          DCD      hv_vz_stat
                  |L1.28104|
                          DCD      ||area_number.18||+0x23
                  |L1.28108|
                          DCD      FORVARDBPSCHHOUR
                  |L1.28112|
                          DCD      NUMIST
                  |L1.28116|
                          DCD      load_U
                  |L1.28120|
                          DCD      U_OUT_KONTR_MAX
                  |L1.28124|
                          DCD      outVoltContrHndlCnt
                  |L1.28128|
                          DCD      outVoltContrHndlCnt_
                  |L1.28132|
                          DCD      U_OUT_KONTR_MIN
                  |L1.28136|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.28140|
                          DCD      uout_av
                  |L1.28144|
                          DCD      USIGN
                  |L1.28148|
                          DCD      bSILENT
                  |L1.28152|
                          DCD      TVENTMAX
                  |L1.28156|
                          DCD      bps
                  |L1.28160|
006e00  f8b03058          LDRH     r3,[r0,#0x58]         ;10046
006e04  428b              CMP      r3,r1                 ;10046
006e06  d001              BEQ      |L1.28172|
006e08  f8a01058          STRH     r1,[r0,#0x58]         ;10046
                  |L1.28172|
006e0c  f8b01058          LDRH     r1,[r0,#0x58]
006e10  eb060386          ADD      r3,r6,r6,LSL #2
006e14  ebb10f43          CMP      r1,r3,LSL #1
006e18  dd06              BLE      |L1.28200|
006e1a  2e00              CMP      r6,#0
006e1c  dd04              BLE      |L1.28200|
;;;10050  		{
;;;10051  		bps[i]._av|=(1<<4);
006e1e  7841              LDRB     r1,[r0,#1]
006e20  f0410110          ORR      r1,r1,#0x10
006e24  7041              STRB     r1,[r0,#1]
006e26  e003              B        |L1.28208|
                  |L1.28200|
;;;10052  		}
;;;10053  	else bps[i]._av&=~(1<<4);
006e28  7841              LDRB     r1,[r0,#1]
006e2a  f0210110          BIC      r1,r1,#0x10
006e2e  7041              STRB     r1,[r0,#1]
                  |L1.28208|
006e30  f1020201          ADD      r2,r2,#1              ;10004
006e34  b2d2              UXTB     r2,r2                 ;10004
                  |L1.28214|
006e36  42ba              CMP      r2,r7                 ;10004
006e38  f6ffaf57          BLT      |L1.27882|
;;;10054  	}
;;;10055  }
006e3c  e8bd87f0          POP      {r4-r10,pc}
;;;10056  
                          ENDP

                  vent_hndl PROC
;;;10057  //-----------------------------------------------
;;;10058  void vent_hndl(void)
006e40  e92d4ff0          PUSH     {r4-r11,lr}
;;;10059  {
006e44  b087              SUB      sp,sp,#0x1c
;;;10060  if(RELEVENTSIGN==rvsAKB)
006e46  48ab              LDR      r0,|L1.28916|
;;;10061  	{
;;;10062  	if(vent_stat==0)
006e48  4cab              LDR      r4,|L1.28920|
;;;10063  		{
;;;10064  		if	(
;;;10065  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
006e4a  49ac              LDR      r1,|L1.28924|
;;;10066  			||
;;;10067  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;10068  			)
;;;10069  			{
;;;10070  			vent_stat=1;
;;;10071  			}
;;;10072  		}
;;;10073  	else if(vent_stat==1)
;;;10074  		{
;;;10075  		if	(
;;;10076  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006e4c  4aac              LDR      r2,|L1.28928|
006e4e  7800              LDRB     r0,[r0,#0]            ;10060  ; RELEVENTSIGN
006e50  f9943000          LDRSB    r3,[r4,#0]            ;10062
006e54  f9b11000          LDRSH    r1,[r1,#0]            ;10065
006e58  f9b22000          LDRSH    r2,[r2,#0]
006e5c  b148              CBZ      r0,|L1.28274|
;;;10077  			&&
;;;10078  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;10079  			)
;;;10080  			{
;;;10081  			vent_stat=0;
;;;10082  			}
;;;10083  		}
;;;10084  	}
;;;10085  else if(RELEVENTSIGN==rvsBPS)
006e5e  2802              CMP      r0,#2
006e60  d03c              BEQ      |L1.28380|
;;;10086  	{
;;;10087  /*	if	(
;;;10088  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;10089  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;10090  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;10091  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;10092  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;10093  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;10094  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;10095  		)
;;;10096  		{
;;;10097  		vent_stat=1;
;;;10098  		}
;;;10099  	else vent_stat=0;
;;;10100  	*/
;;;10101  
;;;10102  	if	(
;;;10103  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;10104  		||
;;;10105  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;10106  		||
;;;10107  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;10108  		||
;;;10109  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;10110  		||
;;;10111  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;10112  		||
;;;10113  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;10114  		||
;;;10115  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;10116  		||
;;;10117  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;10118  		)
;;;10119  		{
;;;10120  		vent_stat=1;
;;;10121  		}
;;;10122  	else if(vent_stat==1)
;;;10123  		{
;;;10124  		if	(
;;;10125  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;10126  			&&
;;;10127  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;10128  			&&
;;;10129  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;10130  			&&
;;;10131  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;10132  			&&
;;;10133  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;10134  			&&
;;;10135  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;10136  			&&
;;;10137  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;10138  			&&
;;;10139  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;10140  			)
;;;10141  			{
;;;10142  			vent_stat=0;
;;;10143  			}
;;;10144  		}
;;;10145  	}
;;;10146  else if(RELEVENTSIGN==rvsEXT)
006e62  2801              CMP      r0,#1
006e64  d07e              BEQ      |L1.28516|
;;;10147  	{
;;;10148  	if	(
;;;10149  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;10150  		||
;;;10151  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;10152  		||
;;;10153  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;10154  		)
;;;10155  		{
;;;10156  		vent_stat=1;
;;;10157  		}
;;;10158  	else if(vent_stat==1)
;;;10159  		{
;;;10160  		if	(
;;;10161  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;10162  			&&
;;;10163  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;10164  			&&
;;;10165  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;10166  			)
;;;10167  			{
;;;10168  			vent_stat=0;
;;;10169  			}
;;;10170  		}
;;;10171  	}
;;;10172  else vent_stat=1;
006e66  f04f0001          MOV      r0,#1
006e6a  7020              STRB     r0,[r4,#0]
                  |L1.28268|
;;;10173  }
006e6c  b007              ADD      sp,sp,#0x1c
006e6e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.28274|
006e72  4fa4              LDR      r7,|L1.28932|
006e74  f8df8290          LDR      r8,|L1.28936|
006e78  f9b7000a          LDRSH    r0,[r7,#0xa]          ;10065
006e7c  7b3d              LDRB     r5,[r7,#0xc]          ;10065
006e7e  f9b76056          LDRSH    r6,[r7,#0x56]         ;10067
006e82  f898c000          LDRB     r12,[r8,#0]           ;10064
006e86  f8977058          LDRB     r7,[r7,#0x58]         ;10067
006e8a  f8988001          LDRB     r8,[r8,#1]            ;10067
006e8e  b12b              CBZ      r3,|L1.28316|
006e90  2b01              CMP      r3,#1                 ;10073
006e92  d1eb              BNE      |L1.28268|
006e94  f1bc0f55          CMP      r12,#0x55             ;10075
006e98  d115              BNE      |L1.28358|
006e9a  e010              B        |L1.28350|
                  |L1.28316|
006e9c  f1bc0f55          CMP      r12,#0x55             ;10064
006ea0  d102              BNE      |L1.28328|
006ea2  4288              CMP      r0,r1                 ;10065
006ea4  dc07              BGT      |L1.28342|
006ea6  b935              CBNZ     r5,|L1.28342|
                  |L1.28328|
006ea8  f1b80f55          CMP      r8,#0x55              ;10067
006eac  d1de              BNE      |L1.28268|
006eae  428e              CMP      r6,r1                 ;10067
006eb0  dc01              BGT      |L1.28342|
006eb2  2f00              CMP      r7,#0                 ;10067
006eb4  d0da              BEQ      |L1.28268|
                  |L1.28342|
006eb6  f04f0001          MOV      r0,#1                 ;10070
006eba  7020              STRB     r0,[r4,#0]            ;10070
006ebc  e7d6              B        |L1.28268|
                  |L1.28350|
006ebe  4290              CMP      r0,r2                 ;10076
006ec0  dad4              BGE      |L1.28268|
006ec2  2d00              CMP      r5,#0                 ;10076
006ec4  d1d2              BNE      |L1.28268|
                  |L1.28358|
006ec6  f1b80f55          CMP      r8,#0x55              ;10078
006eca  d103              BNE      |L1.28372|
006ecc  4296              CMP      r6,r2                 ;10078
006ece  dacd              BGE      |L1.28268|
006ed0  2f00              CMP      r7,#0                 ;10078
006ed2  d1cb              BNE      |L1.28268|
                  |L1.28372|
006ed4  f04f0000          MOV      r0,#0                 ;10081
006ed8  7020              STRB     r0,[r4,#0]            ;10081
006eda  e7c7              B        |L1.28268|
                  |L1.28380|
006edc  4e8c              LDR      r6,|L1.28944|
006ede  488b              LDR      r0,|L1.28940|
006ee0  6ab5              LDR      r5,[r6,#0x28]         ;10103
006ee2  f9b00000          LDRSH    r0,[r0,#0]            ;10102  ; NUMIST
006ee6  78f6              LDRB     r6,[r6,#3]            ;10103
006ee8  b118              CBZ      r0,|L1.28402|
006eea  428d              CMP      r5,r1                 ;10103
006eec  dc7a              BGT      |L1.28644|
006eee  2e1e              CMP      r6,#0x1e              ;10103
006ef0  d278              BCS      |L1.28644|
                  |L1.28402|
006ef2  f8dfc21c          LDR      r12,|L1.28944|
006ef6  2801              CMP      r0,#1                 ;10105
006ef8  f8dc7084          LDR      r7,[r12,#0x84]        ;10105
006efc  f89cc05f          LDRB     r12,[r12,#0x5f]       ;10105
006f00  f8cdc018          STR      r12,[sp,#0x18]        ;10105
006f04  dd06              BLE      |L1.28436|
006f06  428f              CMP      r7,r1                 ;10105
006f08  dc6c              BGT      |L1.28644|
006f0a  f8ddc018          LDR      r12,[sp,#0x18]        ;10105
006f0e  f1bc0f1e          CMP      r12,#0x1e             ;10105
006f12  d267              BCS      |L1.28644|
                  |L1.28436|
006f14  f8dfc1f8          LDR      r12,|L1.28944|
006f18  2802              CMP      r0,#2                 ;10107
006f1a  f8dc80e0          LDR      r8,[r12,#0xe0]        ;10107
006f1e  f8cd8014          STR      r8,[sp,#0x14]         ;10107
006f22  f89cc0bb          LDRB     r12,[r12,#0xbb]       ;10107
006f26  f8cdc010          STR      r12,[sp,#0x10]        ;10107
006f2a  dd08              BLE      |L1.28478|
006f2c  f8ddc014          LDR      r12,[sp,#0x14]        ;10107
006f30  458c              CMP      r12,r1                ;10107
006f32  dc57              BGT      |L1.28644|
006f34  f8ddc010          LDR      r12,[sp,#0x10]        ;10107
006f38  f1bc0f1e          CMP      r12,#0x1e             ;10107
006f3c  d252              BCS      |L1.28644|
                  |L1.28478|
006f3e  f8dfc1d0          LDR      r12,|L1.28944|
006f42  2803              CMP      r0,#3                 ;10109
006f44  f8dc813c          LDR      r8,[r12,#0x13c]       ;10109
006f48  f8cd800c          STR      r8,[sp,#0xc]          ;10109
006f4c  f89cc117          LDRB     r12,[r12,#0x117]      ;10109
006f50  f8cdc008          STR      r12,[sp,#8]           ;10109
006f54  dd0a              BLE      |L1.28524|
006f56  f8ddc00c          LDR      r12,[sp,#0xc]         ;10109
006f5a  458c              CMP      r12,r1                ;10109
006f5c  dc42              BGT      |L1.28644|
006f5e  f8ddc008          LDR      r12,[sp,#8]           ;10109
006f62  e000              B        |L1.28518|
                  |L1.28516|
006f64  e080              B        |L1.28776|
                  |L1.28518|
006f66  f1bc0f1e          CMP      r12,#0x1e             ;10109
006f6a  d23b              BCS      |L1.28644|
                  |L1.28524|
006f6c  f8df81a0          LDR      r8,|L1.28944|
006f70  2804              CMP      r0,#4                 ;10111
006f72  f8d8c198          LDR      r12,[r8,#0x198]       ;10111
006f76  f8988173          LDRB     r8,[r8,#0x173]        ;10111
006f7a  f8cd8004          STR      r8,[sp,#4]            ;10111
006f7e  dd06              BLE      |L1.28558|
006f80  458c              CMP      r12,r1                ;10111
006f82  dc2f              BGT      |L1.28644|
006f84  f8dd8004          LDR      r8,[sp,#4]            ;10111
006f88  f1b80f1e          CMP      r8,#0x1e              ;10111
006f8c  d22a              BCS      |L1.28644|
                  |L1.28558|
006f8e  f8df9180          LDR      r9,|L1.28944|
006f92  2805              CMP      r0,#5                 ;10113
006f94  f8d981f4          LDR      r8,[r9,#0x1f4]        ;10113
006f98  f89991cf          LDRB     r9,[r9,#0x1cf]        ;10113
006f9c  f8cd9000          STR      r9,[sp,#0]            ;10113
006fa0  dd06              BLE      |L1.28592|
006fa2  4588              CMP      r8,r1                 ;10113
006fa4  dc1e              BGT      |L1.28644|
006fa6  f8dd9000          LDR      r9,[sp,#0]            ;10113
006faa  f1b90f1e          CMP      r9,#0x1e              ;10113
006fae  d219              BCS      |L1.28644|
                  |L1.28592|
006fb0  f8dfa15c          LDR      r10,|L1.28944|
006fb4  2806              CMP      r0,#6                 ;10115
006fb6  f89ae22b          LDRB     lr,[r10,#0x22b]       ;10115
006fba  f8da9250          LDR      r9,[r10,#0x250]       ;10115
006fbe  dd04              BLE      |L1.28618|
006fc0  4589              CMP      r9,r1                 ;10115
006fc2  dc0f              BGT      |L1.28644|
006fc4  f1be0f1e          CMP      lr,#0x1e              ;10115
006fc8  d20c              BCS      |L1.28644|
                  |L1.28618|
006fca  f8dfb144          LDR      r11,|L1.28944|
006fce  2807              CMP      r0,#7                 ;10117
006fd0  f8dba2ac          LDR      r10,[r11,#0x2ac]      ;10117
006fd4  f89bb287          LDRB     r11,[r11,#0x287]      ;10117
006fd8  dd08              BLE      |L1.28652|
006fda  458a              CMP      r10,r1                ;10117
006fdc  dc02              BGT      |L1.28644|
006fde  f1bb0f1e          CMP      r11,#0x1e             ;10117
006fe2  d303              BCC      |L1.28652|
                  |L1.28644|
006fe4  f04f0001          MOV      r0,#1                 ;10120
006fe8  7020              STRB     r0,[r4,#0]            ;10120
                  |L1.28650|
006fea  e73f              B        |L1.28268|
                  |L1.28652|
006fec  2b01              CMP      r3,#1                 ;10122
006fee  d1fc              BNE      |L1.28650|
006ff0  b118              CBZ      r0,|L1.28666|
006ff2  4295              CMP      r5,r2                 ;10125
006ff4  daf9              BGE      |L1.28650|
006ff6  2e0a              CMP      r6,#0xa               ;10125
006ff8  d2f7              BCS      |L1.28650|
                  |L1.28666|
006ffa  2802              CMP      r0,#2                 ;10127
006ffc  db04              BLT      |L1.28680|
006ffe  4297              CMP      r7,r2                 ;10127
007000  daf3              BGE      |L1.28650|
007002  9906              LDR      r1,[sp,#0x18]         ;10127
007004  290a              CMP      r1,#0xa               ;10127
007006  d2f0              BCS      |L1.28650|
                  |L1.28680|
007008  2803              CMP      r0,#3                 ;10129
00700a  db05              BLT      |L1.28696|
00700c  9905              LDR      r1,[sp,#0x14]         ;10129
00700e  4291              CMP      r1,r2                 ;10129
007010  daeb              BGE      |L1.28650|
007012  9904              LDR      r1,[sp,#0x10]         ;10129
007014  290a              CMP      r1,#0xa               ;10129
007016  d2e8              BCS      |L1.28650|
                  |L1.28696|
007018  2804              CMP      r0,#4                 ;10131
00701a  db05              BLT      |L1.28712|
00701c  9903              LDR      r1,[sp,#0xc]          ;10131
00701e  4291              CMP      r1,r2                 ;10131
007020  dae3              BGE      |L1.28650|
007022  9902              LDR      r1,[sp,#8]            ;10131
007024  290a              CMP      r1,#0xa               ;10131
007026  d2e0              BCS      |L1.28650|
                  |L1.28712|
007028  2805              CMP      r0,#5                 ;10133
00702a  db04              BLT      |L1.28726|
00702c  4594              CMP      r12,r2                ;10133
00702e  dadc              BGE      |L1.28650|
007030  9901              LDR      r1,[sp,#4]            ;10133
007032  290a              CMP      r1,#0xa               ;10133
007034  d2d9              BCS      |L1.28650|
                  |L1.28726|
007036  2806              CMP      r0,#6                 ;10135
007038  db04              BLT      |L1.28740|
00703a  4590              CMP      r8,r2                 ;10135
00703c  dad5              BGE      |L1.28650|
00703e  9900              LDR      r1,[sp,#0]            ;10135
007040  290a              CMP      r1,#0xa               ;10135
007042  d2d2              BCS      |L1.28650|
                  |L1.28740|
007044  2807              CMP      r0,#7                 ;10137
007046  db04              BLT      |L1.28754|
007048  4591              CMP      r9,r2                 ;10137
00704a  dace              BGE      |L1.28650|
00704c  f1be0f0a          CMP      lr,#0xa               ;10137
007050  d2cb              BCS      |L1.28650|
                  |L1.28754|
007052  2808              CMP      r0,#8                 ;10139
007054  db04              BLT      |L1.28768|
007056  4592              CMP      r10,r2                ;10139
007058  dac7              BGE      |L1.28650|
00705a  f1bb0f0a          CMP      r11,#0xa              ;10139
00705e  d2c4              BCS      |L1.28650|
                  |L1.28768|
007060  f04f0000          MOV      r0,#0                 ;10142
007064  7020              STRB     r0,[r4,#0]            ;10142
                  |L1.28774|
007066  e701              B        |L1.28268|
                  |L1.28776|
007068  482a              LDR      r0,|L1.28948|
00706a  4d2b              LDR      r5,|L1.28952|
00706c  4e2b              LDR      r6,|L1.28956|
00706e  f9b00000          LDRSH    r0,[r0,#0]            ;10148  ; NUMDT
007072  f9b55000          LDRSH    r5,[r5,#0]            ;10149
007076  7836              LDRB     r6,[r6,#0]            ;10149
007078  b110              CBZ      r0,|L1.28800|
00707a  428d              CMP      r5,r1                 ;10149
00707c  dc1d              BGT      |L1.28858|
00707e  b9e6              CBNZ     r6,|L1.28858|
                  |L1.28800|
007080  4f25              LDR      r7,|L1.28952|
007082  f8dfc098          LDR      r12,|L1.28956|
007086  2801              CMP      r0,#1                 ;10151
007088  f9b77002          LDRSH    r7,[r7,#2]            ;10151
00708c  f89cc001          LDRB     r12,[r12,#1]          ;10151
007090  dd04              BLE      |L1.28828|
007092  428f              CMP      r7,r1                 ;10151
007094  dc11              BGT      |L1.28858|
007096  f1bc0f00          CMP      r12,#0                ;10151
00709a  d10e              BNE      |L1.28858|
                  |L1.28828|
00709c  f8df8078          LDR      r8,|L1.28952|
0070a0  f8df9078          LDR      r9,|L1.28956|
0070a4  2802              CMP      r0,#2                 ;10153
0070a6  f9b88004          LDRSH    r8,[r8,#4]            ;10153
0070aa  f8999002          LDRB     r9,[r9,#2]            ;10153
0070ae  dd08              BLE      |L1.28866|
0070b0  4588              CMP      r8,r1                 ;10153
0070b2  dc02              BGT      |L1.28858|
0070b4  f1b90f00          CMP      r9,#0                 ;10153
0070b8  d003              BEQ      |L1.28866|
                  |L1.28858|
0070ba  f04f0001          MOV      r0,#1                 ;10156
0070be  7020              STRB     r0,[r4,#0]            ;10156
0070c0  e6d4              B        |L1.28268|
                  |L1.28866|
0070c2  2b01              CMP      r3,#1                 ;10158
0070c4  d191              BNE      |L1.28650|
0070c6  b118              CBZ      r0,|L1.28880|
0070c8  4295              CMP      r5,r2                 ;10161
0070ca  da8e              BGE      |L1.28650|
0070cc  2e00              CMP      r6,#0                 ;10161
0070ce  d18c              BNE      |L1.28650|
                  |L1.28880|
0070d0  2802              CMP      r0,#2                 ;10163
0070d2  db04              BLT      |L1.28894|
0070d4  4297              CMP      r7,r2                 ;10163
0070d6  da88              BGE      |L1.28650|
0070d8  f1bc0f00          CMP      r12,#0                ;10163
0070dc  d185              BNE      |L1.28650|
                  |L1.28894|
0070de  2803              CMP      r0,#3                 ;10165
0070e0  db04              BLT      |L1.28908|
0070e2  4590              CMP      r8,r2                 ;10165
0070e4  dabf              BGE      |L1.28774|
0070e6  f1b90f00          CMP      r9,#0                 ;10165
0070ea  d1bc              BNE      |L1.28774|
                  |L1.28908|
0070ec  f04f0000          MOV      r0,#0                 ;10168
0070f0  7020              STRB     r0,[r4,#0]            ;10168
0070f2  e6bb              B        |L1.28268|
;;;10174  
                          ENDP

                  |L1.28916|
                          DCD      RELEVENTSIGN
                  |L1.28920|
                          DCD      ||area_number.18||
                  |L1.28924|
                          DCD      TVENTON
                  |L1.28928|
                          DCD      TVENTOFF
                  |L1.28932|
                          DCD      bat
                  |L1.28936|
                          DCD      BAT_IS_ON
                  |L1.28940|
                          DCD      NUMIST
                  |L1.28944|
                          DCD      bps
                  |L1.28948|
                          DCD      NUMDT
                  |L1.28952|
                          DCD      t_ext
                  |L1.28956|
                          DCD      ND_EXT

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.5||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.8||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.8||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.9||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.9||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.10||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.11||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.12||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.13||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.15||, DATA, ALIGN=1

                          EXPORTAS ||area_number.15||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.16||, DATA, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.17||, DATA, ALIGN=1

                          EXPORTAS ||area_number.17||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.18||, DATA, ALIGN=2

                          EXPORTAS ||area_number.18||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz1_stat
000001  00                DCB      0x00
                  vz1_stat_old
000002  00                DCB      0x00
                  vz2_stat
000003  00                DCB      0x00
                  vz2_stat_old
000004  00                DCB      0x00
                  bat_hndl_zvu_init
000005  00                DCB      0x00
                  bat_hndl_zvu_ke_init
000006  00                DCB      0x00
                  bat_hndl_i_vector
000007  00                DCB      0x00
                  bat_hndl_i_vector_old
000008  00                DCB      0x00
                  ke_drv_cnt_10s
000009  00                DCB      0x00
                  i_bat_buff_cnt
00000a  00                DCB      0x00
                  cntrlStatIsDownCnt
00000b  00                DCB      0x00
                  adc_self_ch_cnt
00000c  00                DCB      0x00
                  adc_ch_net
00000d  00                DCB      0x00
                  adc_ch
00000e  00                DCB      0x00
                  adc_ch_cnt
00000f  00                DCB      0x00
                  adc_window_flag
000010  00                DCB      0x00
                  ch_cnt0
000011  00                DCB      0x00
                  b1Hz_ch
000012  00                DCB      0x00
                  i
000013  00                DCB      0x00
                  iiii
000014  00                DCB      0x00
                  bAVG
000015  00                DCB      0x00
                  avg_num
000016  00                DCB      0x00
                  kb_full_ver
000017  00                DCB      0x00
                  kb_start_ips
000018  00                DCB      0x00
                  num_of_wrks_bps
000019  00                DCB      0x00
                  num_necc_up
00001a  00                DCB      0x00
                  num_necc_down
00001b  00                DCB      0x00
                  sh_cnt0
00001c  00                DCB      0x00
                  b1Hz_sh
00001d  00                DCB      0x00
                  spc_stat
00001e  00                DCB      0x00
                  spc_bat
00001f  00                DCB      0x00
                  spc_phase
000020  00                DCB      0x00
                  bAVZ
000021  00                DCB      0x00
                  ke_start_stat
000022  00                DCB      0x00
                  numOfForvardBps
000023  00                DCB      0x00
                  numOfForvardBps_old
000024  00                DCB      0x00
                  numOfForvardBps_minCnt
000025  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
000026  00                DCB      0x00
                  bPARALLEL_ENOUG
000027  00                DCB      0x00
                  bPARALLEL
000028  00                DCB      0x00
                  cntrl_hndl_plazma
000029  00                DCB      0x00
                  volt_region
00002a  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
00002b  00                DCB      0x00
                  cntrl_stat
00002c  0258              DCW      0x0258
                  cntrl_stat_old
00002e  0258              DCW      0x0258
                  avg_main_cnt
000030  0014              DCW      0x0014
                  num_necc_block_cnt
000032  0000              DCB      0x00,0x00
                  net_buff_
000034  0000              DCB      0x00,0x00
                  adc_result
000036  0000              DCB      0x00,0x00
                  adc_gorb_cnt
000038  0000              DCB      0x00,0x00
                  adc_zero_cnt
00003a  0000              DCB      0x00,0x00
                  adc_window_cnt
00003c  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
00003e  0000              DCB      0x00,0x00
                  plazma_sk
000040  0000              DCB      0x00,0x00
                  cntrl_stat_new
000042  0000              DCB      0x00,0x00
                  Ibmax
000044  0000              DCB      0x00,0x00
                  IZMAX_
000046  0000              DCB      0x00,0x00
                  Ubpsmax
000048  0000              DCB      0x00,0x00
                  samokalibr_cnt
00004a  0000              DCB      0x00,0x00
                  main_kb_cnt
00004c  0000              DCB      0x00,0x00
                  kb_cnt_1lev
00004e  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000050  0000              DCB      0x00,0x00
                  kb_start
000052  0000              DCB      0x00,0x00
                  ibat_ips
000054  0000              DCB      0x00,0x00
                  ibat_ips_
000056  0000              DCB      0x00,0x00
                  bps_on_mask
000058  0000              DCB      0x00,0x00
                  bps_off_mask
00005a  0000              DCB      0x00,0x00
                  vz_cnt_s
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s_
00005e  0000              DCB      0x00,0x00
                  vz_cnt_h
000060  0000              DCB      0x00,0x00
                  vz_cnt_h_
000062  0000              DCB      0x00,0x00
                  cnt_end_ke
000064  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000066  0000              DCB      0x00,0x00
                  __ee_spc_stat
000068  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006c  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000070  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000072  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000074  0000              DCB      0x00,0x00
                  volt_region_cnt
000076  0000              DCB      0x00,0x00
                  vz2_stat_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007a  0000              DCB      0x00,0x00
                  plazma_ica1
00007c  0000              DCB      0x00,0x00
                  bat_hndl_i
00007e  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000084  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000086  0000              DCB      0x00,0x00
                  bat_hndl_u_end
000088  00000000          DCB      0x00,0x00,0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000e8  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ea  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.19||, DATA, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.20||, DATA, ALIGN=1

                          EXPORTAS ||area_number.20||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.21||, DATA, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.22||, DATA, ALIGN=0

                          EXPORTAS ||area_number.22||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.25||, DATA, ALIGN=0

                          EXPORTAS ||area_number.25||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=1

                          EXPORTAS ||area_number.29||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.30||, DATA, ALIGN=1

                          EXPORTAS ||area_number.30||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.35||, DATA, ALIGN=1

                          EXPORTAS ||area_number.35||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=0

                          EXPORTAS ||area_number.38||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.42||, DATA, ALIGN=0

                          EXPORTAS ||area_number.42||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.43||, DATA, ALIGN=0

                          EXPORTAS ||area_number.43||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.44||, DATA, ALIGN=0

                          EXPORTAS ||area_number.44||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.45||, DATA, ALIGN=1

                          EXPORTAS ||area_number.45||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.46||, DATA, ALIGN=1

                          EXPORTAS ||area_number.46||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.47||, DATA, ALIGN=1

                          EXPORTAS ||area_number.47||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.53||, DATA, ALIGN=0

                          EXPORTAS ||area_number.53||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.54||, DATA, ALIGN=0

                          EXPORTAS ||area_number.54||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.55||, DATA, ALIGN=1

                          EXPORTAS ||area_number.55||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.56||, DATA, ALIGN=1

                          EXPORTAS ||area_number.56||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.57||, DATA, ALIGN=1

                          EXPORTAS ||area_number.57||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.58||, DATA, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.59||, DATA, ALIGN=1

                          EXPORTAS ||area_number.59||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "control.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_control_c_9601dfb0____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___9_control_c_9601dfb0____REVSH|
#line 130
|__asm___9_control_c_9601dfb0____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
