; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4eff              LDR      r6,|L1.1028|
;;;310    	{
;;;311    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;309  ; spc_stat
00000c  2802              CMP      r0,#2                 ;309
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;312    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;313    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;314    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f8dfa3ec          LDR      r10,|L1.1032|
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8dfb3ec          LDR      r11,|L1.1036|
000020  f8df83ec          LDR      r8,|L1.1040|
000024  f8ba0000          LDRH     r0,[r10,#0]           ;317  ; snmp_bat_status
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93e8          LDR      r9,|L1.1044|
00002c  4cfa              LDR      r4,|L1.1048|
00002e  4dfb              LDR      r5,|L1.1052|
000030  b148              CBZ      r0,|L1.70|
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  8027              STRH     r7,[r4,#0]
;;;553    	snmp_bat_flag_puts[0]=0;
000034  802f              STRH     r7,[r5,#0]
                  |L1.54|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8ba0002          LDRH     r0,[r10,#2]  ; snmp_bat_status
00003a  2800              CMP      r0,#0
00003c  d071              BEQ      |L1.290|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  8067              STRH     r7,[r4,#2]
;;;792    	snmp_bat_flag_puts[1]=0;
000040  806f              STRH     r7,[r5,#2]
                  |L1.66|
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.70|
000046  f9bb0000          LDRSH    r0,[r11,#0]           ;319  ; USIGN
00004a  f9b82002          LDRSH    r2,[r8,#2]            ;319  ; bat
00004e  eb000380          ADD      r3,r0,r0,LSL #2       ;319
000052  48f1              LDR      r0,|L1.1048|
000054  ebb20f43          CMP      r2,r3,LSL #1          ;319
000058  f9b01000          LDRSH    r1,[r0,#0]            ;321
00005c  48ef              LDR      r0,|L1.1052|
00005e  f9b00000          LDRSH    r0,[r0,#0]            ;322
000062  da0f              BGE      |L1.132|
000064  f0410101          ORR      r1,r1,#1              ;321
000068  8021              STRH     r1,[r4,#0]            ;321
00006a  07c0              LSLS     r0,r0,#31             ;322
00006c  d119              BNE      |L1.162|
00006e  2300              MOVS     r3,#0                 ;324
000070  2208              MOVS     r2,#8                 ;324
000072  2105              MOVS     r1,#5                 ;324
000074  a0ea              ADR      r0,|L1.1056|
000076  f7fffffe          BL       snmp_trap_send
00007a  8828              LDRH     r0,[r5,#0]            ;325  ; snmp_bat_flag_puts
00007c  f0400001          ORR      r0,r0,#1              ;325
000080  8028              STRH     r0,[r5,#0]            ;325
000082  e00e              B        |L1.162|
                  |L1.132|
000084  f0210101          BIC      r1,r1,#1              ;330
000088  8021              STRH     r1,[r4,#0]            ;330
00008a  07c0              LSLS     r0,r0,#31             ;331
00008c  d009              BEQ      |L1.162|
00008e  2301              MOVS     r3,#1                 ;333
000090  2208              MOVS     r2,#8                 ;333
000092  2105              MOVS     r1,#5                 ;333
000094  a0ea              ADR      r0,|L1.1088|
000096  f7fffffe          BL       snmp_trap_send
00009a  8828              LDRH     r0,[r5,#0]            ;334  ; snmp_bat_flag_puts
00009c  f0200001          BIC      r0,r0,#1              ;334
0000a0  8028              STRH     r0,[r5,#0]            ;334
                  |L1.162|
0000a2  f898003f          LDRB     r0,[r8,#0x3f]         ;338  ; bat
0000a6  07c1              LSLS     r1,r0,#31             ;338
0000a8  d00b              BEQ      |L1.194|
0000aa  8821              LDRH     r1,[r4,#0]            ;340  ; snmp_bat_flag
0000ac  f0410102          ORR      r1,r1,#2              ;340
0000b0  8021              STRH     r1,[r4,#0]            ;340
0000b2  f9b51000          LDRSH    r1,[r5,#0]            ;341  ; snmp_bat_flag_puts
0000b6  078a              LSLS     r2,r1,#30             ;341
0000b8  d40e              BMI      |L1.216|
0000ba  f0410102          ORR      r1,r1,#2              ;344
0000be  8029              STRH     r1,[r5,#0]            ;344
0000c0  e00a              B        |L1.216|
                  |L1.194|
0000c2  8821              LDRH     r1,[r4,#0]            ;349  ; snmp_bat_flag
0000c4  f0210102          BIC      r1,r1,#2              ;349
0000c8  8021              STRH     r1,[r4,#0]            ;349
0000ca  f9b51000          LDRSH    r1,[r5,#0]            ;350  ; snmp_bat_flag_puts
0000ce  078a              LSLS     r2,r1,#30             ;350
0000d0  d502              BPL      |L1.216|
0000d2  f0210102          BIC      r1,r1,#2              ;353
0000d6  8029              STRH     r1,[r5,#0]            ;353
                  |L1.216|
0000d8  0780              LSLS     r0,r0,#30             ;357
0000da  d50b              BPL      |L1.244|
0000dc  8820              LDRH     r0,[r4,#0]            ;359  ; snmp_bat_flag
0000de  f0400004          ORR      r0,r0,#4              ;359
0000e2  8020              STRH     r0,[r4,#0]            ;359
0000e4  f9b50000          LDRSH    r0,[r5,#0]            ;360  ; snmp_bat_flag_puts
0000e8  0741              LSLS     r1,r0,#29             ;360
0000ea  d40e              BMI      |L1.266|
0000ec  f0400004          ORR      r0,r0,#4              ;363
0000f0  8028              STRH     r0,[r5,#0]            ;363
0000f2  e00a              B        |L1.266|
                  |L1.244|
0000f4  8820              LDRH     r0,[r4,#0]            ;368  ; snmp_bat_flag
0000f6  f0200004          BIC      r0,r0,#4              ;368
0000fa  8020              STRH     r0,[r4,#0]            ;368
0000fc  f9b50000          LDRSH    r0,[r5,#0]            ;369  ; snmp_bat_flag_puts
000100  0741              LSLS     r1,r0,#29             ;369
000102  d502              BPL      |L1.266|
000104  f0200004          BIC      r0,r0,#4              ;372
000108  8028              STRH     r0,[r5,#0]            ;372
                  |L1.266|
00010a  f9b91000          LDRSH    r1,[r9,#0]            ;376  ; IKB
00010e  f9b80008          LDRSH    r0,[r8,#8]            ;376  ; bat
000112  424a              RSBS     r2,r1,#0              ;376
000114  4290              CMP      r0,r2                 ;376
000116  da05              BGE      |L1.292|
000118  8820              LDRH     r0,[r4,#0]            ;376  ; snmp_bat_flag
00011a  f0400008          ORR      r0,r0,#8              ;376
00011e  8020              STRH     r0,[r4,#0]            ;376
000120  e006              B        |L1.304|
                  |L1.290|
000122  e15f              B        |L1.996|
                  |L1.292|
000124  4288              CMP      r0,r1                 ;377
000126  dd03              BLE      |L1.304|
000128  8820              LDRH     r0,[r4,#0]            ;377  ; snmp_bat_flag
00012a  f0200008          BIC      r0,r0,#8              ;377
00012e  8020              STRH     r0,[r4,#0]            ;377
                  |L1.304|
000130  f8960023          LDRB     r0,[r6,#0x23]         ;379  ; spc_stat
000134  2801              CMP      r0,#1                 ;379
000136  d103              BNE      |L1.320|
000138  f8960024          LDRB     r0,[r6,#0x24]         ;379  ; spc_bat
00013c  2800              CMP      r0,#0                 ;379
00013e  d03a              BEQ      |L1.438|
                  |L1.320|
000140  8820              LDRH     r0,[r4,#0]            ;390  ; snmp_bat_flag
000142  f0200010          BIC      r0,r0,#0x10           ;390
000146  8020              STRH     r0,[r4,#0]            ;390
000148  8828              LDRH     r0,[r5,#0]            ;391  ; snmp_bat_flag_puts
00014a  06c0              LSLS     r0,r0,#27             ;391
00014c  d509              BPL      |L1.354|
00014e  2307              MOVS     r3,#7                 ;393
000150  2208              MOVS     r2,#8                 ;393
000152  2105              MOVS     r1,#5                 ;393
000154  a0c4              ADR      r0,|L1.1128|
000156  f7fffffe          BL       snmp_trap_send
00015a  8828              LDRH     r0,[r5,#0]            ;394  ; snmp_bat_flag_puts
00015c  f0200010          BIC      r0,r0,#0x10           ;394
000160  8028              STRH     r0,[r5,#0]            ;394
                  |L1.354|
000162  f8960023          LDRB     r0,[r6,#0x23]         ;398  ; spc_stat
000166  2802              CMP      r0,#2                 ;398
000168  d037              BEQ      |L1.474|
00016a  8820              LDRH     r0,[r4,#0]            ;409  ; snmp_bat_flag
00016c  f0200020          BIC      r0,r0,#0x20           ;409
000170  8020              STRH     r0,[r4,#0]            ;409
000172  8828              LDRH     r0,[r5,#0]            ;410  ; snmp_bat_flag_puts
000174  0680              LSLS     r0,r0,#26             ;410
000176  d509              BPL      |L1.396|
000178  2309              MOVS     r3,#9                 ;412
00017a  2208              MOVS     r2,#8                 ;412
00017c  2105              MOVS     r1,#5                 ;412
00017e  a0c2              ADR      r0,|L1.1160|
000180  f7fffffe          BL       snmp_trap_send
000184  8828              LDRH     r0,[r5,#0]            ;413  ; snmp_bat_flag_puts
000186  f0200020          BIC      r0,r0,#0x20           ;413
00018a  8028              STRH     r0,[r5,#0]            ;413
                  |L1.396|
00018c  7870              LDRB     r0,[r6,#1]            ;417  ; vz_error
00018e  2800              CMP      r0,#0                 ;417
000190  d035              BEQ      |L1.510|
000192  8820              LDRH     r0,[r4,#0]            ;419  ; snmp_bat_flag
000194  f0400040          ORR      r0,r0,#0x40           ;419
000198  8020              STRH     r0,[r4,#0]            ;419
00019a  8828              LDRH     r0,[r5,#0]            ;420  ; snmp_bat_flag_puts
00019c  0640              LSLS     r0,r0,#25             ;420
00019e  d43f              BMI      |L1.544|
0001a0  230a              MOVS     r3,#0xa               ;422
0001a2  2208              MOVS     r2,#8                 ;422
0001a4  2105              MOVS     r1,#5                 ;422
0001a6  a0c1              ADR      r0,|L1.1196|
0001a8  f7fffffe          BL       snmp_trap_send
0001ac  8828              LDRH     r0,[r5,#0]            ;423  ; snmp_bat_flag_puts
0001ae  f0400040          ORR      r0,r0,#0x40           ;423
0001b2  8028              STRH     r0,[r5,#0]            ;423
0001b4  e034              B        |L1.544|
                  |L1.438|
0001b6  8820              LDRH     r0,[r4,#0]            ;381  ; snmp_bat_flag
0001b8  f0400010          ORR      r0,r0,#0x10           ;381
0001bc  8020              STRH     r0,[r4,#0]            ;381
0001be  8828              LDRH     r0,[r5,#0]            ;382  ; snmp_bat_flag_puts
0001c0  06c0              LSLS     r0,r0,#27             ;382
0001c2  d4ce              BMI      |L1.354|
0001c4  2306              MOVS     r3,#6                 ;384
0001c6  2208              MOVS     r2,#8                 ;384
0001c8  2105              MOVS     r1,#5                 ;384
0001ca  a0c1              ADR      r0,|L1.1232|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  8828              LDRH     r0,[r5,#0]            ;385  ; snmp_bat_flag_puts
0001d2  f0400010          ORR      r0,r0,#0x10           ;385
0001d6  8028              STRH     r0,[r5,#0]            ;385
0001d8  e7c3              B        |L1.354|
                  |L1.474|
0001da  8820              LDRH     r0,[r4,#0]            ;400  ; snmp_bat_flag
0001dc  f0400020          ORR      r0,r0,#0x20           ;400
0001e0  8020              STRH     r0,[r4,#0]            ;400
0001e2  8828              LDRH     r0,[r5,#0]            ;401  ; snmp_bat_flag_puts
0001e4  0680              LSLS     r0,r0,#26             ;401
0001e6  d4d1              BMI      |L1.396|
0001e8  2308              MOVS     r3,#8                 ;403
0001ea  461a              MOV      r2,r3                 ;403
0001ec  2105              MOVS     r1,#5                 ;403
0001ee  a0c0              ADR      r0,|L1.1264|
0001f0  f7fffffe          BL       snmp_trap_send
0001f4  8828              LDRH     r0,[r5,#0]            ;404  ; snmp_bat_flag_puts
0001f6  f0400020          ORR      r0,r0,#0x20           ;404
0001fa  8028              STRH     r0,[r5,#0]            ;404
0001fc  e7c6              B        |L1.396|
                  |L1.510|
0001fe  8820              LDRH     r0,[r4,#0]            ;428  ; snmp_bat_flag
000200  f0200040          BIC      r0,r0,#0x40           ;428
000204  8020              STRH     r0,[r4,#0]            ;428
000206  8828              LDRH     r0,[r5,#0]            ;429  ; snmp_bat_flag_puts
000208  0640              LSLS     r0,r0,#25             ;429
00020a  d509              BPL      |L1.544|
00020c  230b              MOVS     r3,#0xb               ;431
00020e  2208              MOVS     r2,#8                 ;431
000210  2105              MOVS     r1,#5                 ;431
000212  a0c0              ADR      r0,|L1.1300|
000214  f7fffffe          BL       snmp_trap_send
000218  8828              LDRH     r0,[r5,#0]            ;432  ; snmp_bat_flag_puts
00021a  f0200040          BIC      r0,r0,#0x40           ;432
00021e  8028              STRH     r0,[r5,#0]            ;432
                  |L1.544|
000220  48c5              LDR      r0,|L1.1336|
000222  7800              LDRB     r0,[r0,#0]            ;436  ; sp_ch_stat
000224  2802              CMP      r0,#2                 ;436
000226  d024              BEQ      |L1.626|
000228  8820              LDRH     r0,[r4,#0]            ;447  ; snmp_bat_flag
00022a  f0200080          BIC      r0,r0,#0x80           ;447
00022e  8020              STRH     r0,[r4,#0]            ;447
000230  8828              LDRH     r0,[r5,#0]            ;448  ; snmp_bat_flag_puts
000232  0600              LSLS     r0,r0,#24             ;448
000234  d509              BPL      |L1.586|
000236  230b              MOVS     r3,#0xb               ;450
000238  2208              MOVS     r2,#8                 ;450
00023a  2105              MOVS     r1,#5                 ;450
00023c  a0bf              ADR      r0,|L1.1340|
00023e  f7fffffe          BL       snmp_trap_send
000242  8828              LDRH     r0,[r5,#0]            ;451  ; snmp_bat_flag_puts
000244  f0200080          BIC      r0,r0,#0x80           ;451
000248  8028              STRH     r0,[r5,#0]            ;451
                  |L1.586|
00024a  78b0              LDRB     r0,[r6,#2]            ;455  ; sp_ch_error
00024c  b318              CBZ      r0,|L1.662|
00024e  8820              LDRH     r0,[r4,#0]            ;457  ; snmp_bat_flag
000250  f4407080          ORR      r0,r0,#0x100          ;457
000254  8020              STRH     r0,[r4,#0]            ;457
000256  8828              LDRH     r0,[r5,#0]            ;458  ; snmp_bat_flag_puts
000258  05c0              LSLS     r0,r0,#23             ;458
00025a  d42d              BMI      |L1.696|
00025c  230c              MOVS     r3,#0xc               ;460
00025e  2208              MOVS     r2,#8                 ;460
000260  2105              MOVS     r1,#5                 ;460
000262  a0be              ADR      r0,|L1.1372|
000264  f7fffffe          BL       snmp_trap_send
000268  8828              LDRH     r0,[r5,#0]            ;461  ; snmp_bat_flag_puts
00026a  f4407080          ORR      r0,r0,#0x100          ;461
00026e  8028              STRH     r0,[r5,#0]            ;461
000270  e022              B        |L1.696|
                  |L1.626|
000272  8820              LDRH     r0,[r4,#0]            ;438  ; snmp_bat_flag
000274  f0400080          ORR      r0,r0,#0x80           ;438
000278  8020              STRH     r0,[r4,#0]            ;438
00027a  8828              LDRH     r0,[r5,#0]            ;439  ; snmp_bat_flag_puts
00027c  0600              LSLS     r0,r0,#24             ;439
00027e  d4e4              BMI      |L1.586|
000280  230a              MOVS     r3,#0xa               ;441
000282  2208              MOVS     r2,#8                 ;441
000284  2105              MOVS     r1,#5                 ;441
000286  a0bd              ADR      r0,|L1.1404|
000288  f7fffffe          BL       snmp_trap_send
00028c  8828              LDRH     r0,[r5,#0]            ;442  ; snmp_bat_flag_puts
00028e  f0400080          ORR      r0,r0,#0x80           ;442
000292  8028              STRH     r0,[r5,#0]            ;442
000294  e7d9              B        |L1.586|
                  |L1.662|
000296  8820              LDRH     r0,[r4,#0]            ;466  ; snmp_bat_flag
000298  f4207080          BIC      r0,r0,#0x100          ;466
00029c  8020              STRH     r0,[r4,#0]            ;466
00029e  8828              LDRH     r0,[r5,#0]            ;467  ; snmp_bat_flag_puts
0002a0  05c0              LSLS     r0,r0,#23             ;467
0002a2  d509              BPL      |L1.696|
0002a4  230d              MOVS     r3,#0xd               ;469
0002a6  2208              MOVS     r2,#8                 ;469
0002a8  2105              MOVS     r1,#5                 ;469
0002aa  a0bc              ADR      r0,|L1.1436|
0002ac  f7fffffe          BL       snmp_trap_send
0002b0  8828              LDRH     r0,[r5,#0]            ;470  ; snmp_bat_flag_puts
0002b2  f4207080          BIC      r0,r0,#0x100          ;470
0002b6  8028              STRH     r0,[r5,#0]            ;470
                  |L1.696|
0002b8  7970              LDRB     r0,[r6,#5]            ;474  ; vz1_stat
0002ba  b188              CBZ      r0,|L1.736|
0002bc  8820              LDRH     r0,[r4,#0]            ;476  ; snmp_bat_flag
0002be  f4407000          ORR      r0,r0,#0x200          ;476
0002c2  8020              STRH     r0,[r4,#0]            ;476
0002c4  8828              LDRH     r0,[r5,#0]            ;477  ; snmp_bat_flag_puts
0002c6  0580              LSLS     r0,r0,#22             ;477
0002c8  d41b              BMI      |L1.770|
0002ca  230e              MOVS     r3,#0xe               ;479
0002cc  2208              MOVS     r2,#8                 ;479
0002ce  2105              MOVS     r1,#5                 ;479
0002d0  a0bb              ADR      r0,|L1.1472|
0002d2  f7fffffe          BL       snmp_trap_send
0002d6  8828              LDRH     r0,[r5,#0]            ;480  ; snmp_bat_flag_puts
0002d8  f4407000          ORR      r0,r0,#0x200          ;480
0002dc  8028              STRH     r0,[r5,#0]            ;480
0002de  e010              B        |L1.770|
                  |L1.736|
0002e0  8820              LDRH     r0,[r4,#0]            ;485  ; snmp_bat_flag
0002e2  f4207000          BIC      r0,r0,#0x200          ;485
0002e6  8020              STRH     r0,[r4,#0]            ;485
0002e8  8828              LDRH     r0,[r5,#0]            ;486  ; snmp_bat_flag_puts
0002ea  0580              LSLS     r0,r0,#22             ;486
0002ec  d509              BPL      |L1.770|
0002ee  230f              MOVS     r3,#0xf               ;488
0002f0  2208              MOVS     r2,#8                 ;488
0002f2  2105              MOVS     r1,#5                 ;488
0002f4  a0ba              ADR      r0,|L1.1504|
0002f6  f7fffffe          BL       snmp_trap_send
0002fa  8828              LDRH     r0,[r5,#0]            ;489  ; snmp_bat_flag_puts
0002fc  f4207000          BIC      r0,r0,#0x200          ;489
000300  8028              STRH     r0,[r5,#0]            ;489
                  |L1.770|
000302  78f0              LDRB     r0,[r6,#3]            ;493  ; vz1_error
000304  b188              CBZ      r0,|L1.810|
000306  8820              LDRH     r0,[r4,#0]            ;495  ; snmp_bat_flag
000308  f4406080          ORR      r0,r0,#0x400          ;495
00030c  8020              STRH     r0,[r4,#0]            ;495
00030e  8828              LDRH     r0,[r5,#0]            ;496  ; snmp_bat_flag_puts
000310  0540              LSLS     r0,r0,#21             ;496
000312  d41b              BMI      |L1.844|
000314  2310              MOVS     r3,#0x10              ;498
000316  2208              MOVS     r2,#8                 ;498
000318  2105              MOVS     r1,#5                 ;498
00031a  a0b9              ADR      r0,|L1.1536|
00031c  f7fffffe          BL       snmp_trap_send
000320  8828              LDRH     r0,[r5,#0]            ;499  ; snmp_bat_flag_puts
000322  f4406080          ORR      r0,r0,#0x400          ;499
000326  8028              STRH     r0,[r5,#0]            ;499
000328  e010              B        |L1.844|
                  |L1.810|
00032a  8820              LDRH     r0,[r4,#0]            ;504  ; snmp_bat_flag
00032c  f4206080          BIC      r0,r0,#0x400          ;504
000330  8020              STRH     r0,[r4,#0]            ;504
000332  8828              LDRH     r0,[r5,#0]            ;505  ; snmp_bat_flag_puts
000334  0540              LSLS     r0,r0,#21             ;505
000336  d509              BPL      |L1.844|
000338  2311              MOVS     r3,#0x11              ;507
00033a  2208              MOVS     r2,#8                 ;507
00033c  2105              MOVS     r1,#5                 ;507
00033e  a0b9              ADR      r0,|L1.1572|
000340  f7fffffe          BL       snmp_trap_send
000344  8828              LDRH     r0,[r5,#0]            ;508  ; snmp_bat_flag_puts
000346  f4206080          BIC      r0,r0,#0x400          ;508
00034a  8028              STRH     r0,[r5,#0]            ;508
                  |L1.844|
00034c  79f0              LDRB     r0,[r6,#7]            ;512  ; vz2_stat
00034e  b188              CBZ      r0,|L1.884|
000350  8820              LDRH     r0,[r4,#0]            ;514  ; snmp_bat_flag
000352  f4406000          ORR      r0,r0,#0x800          ;514
000356  8020              STRH     r0,[r4,#0]            ;514
000358  8828              LDRH     r0,[r5,#0]            ;515  ; snmp_bat_flag_puts
00035a  0500              LSLS     r0,r0,#20             ;515
00035c  d41b              BMI      |L1.918|
00035e  2312              MOVS     r3,#0x12              ;517
000360  2208              MOVS     r2,#8                 ;517
000362  2105              MOVS     r1,#5                 ;517
000364  a0b9              ADR      r0,|L1.1612|
000366  f7fffffe          BL       snmp_trap_send
00036a  8828              LDRH     r0,[r5,#0]            ;518  ; snmp_bat_flag_puts
00036c  f4406000          ORR      r0,r0,#0x800          ;518
000370  8028              STRH     r0,[r5,#0]            ;518
000372  e010              B        |L1.918|
                  |L1.884|
000374  8820              LDRH     r0,[r4,#0]            ;523  ; snmp_bat_flag
000376  f4206000          BIC      r0,r0,#0x800          ;523
00037a  8020              STRH     r0,[r4,#0]            ;523
00037c  8828              LDRH     r0,[r5,#0]            ;524  ; snmp_bat_flag_puts
00037e  0500              LSLS     r0,r0,#20             ;524
000380  d509              BPL      |L1.918|
000382  2313              MOVS     r3,#0x13              ;526
000384  2208              MOVS     r2,#8                 ;526
000386  2105              MOVS     r1,#5                 ;526
000388  a0b7              ADR      r0,|L1.1640|
00038a  f7fffffe          BL       snmp_trap_send
00038e  8828              LDRH     r0,[r5,#0]            ;527  ; snmp_bat_flag_puts
000390  f4206000          BIC      r0,r0,#0x800          ;527
000394  8028              STRH     r0,[r5,#0]            ;527
                  |L1.918|
000396  7930              LDRB     r0,[r6,#4]            ;531  ; vz2_error
000398  b190              CBZ      r0,|L1.960|
00039a  8820              LDRH     r0,[r4,#0]            ;533  ; snmp_bat_flag
00039c  f4405080          ORR      r0,r0,#0x1000         ;533
0003a0  8020              STRH     r0,[r4,#0]            ;533
0003a2  8828              LDRH     r0,[r5,#0]            ;534  ; snmp_bat_flag_puts
0003a4  04c0              LSLS     r0,r0,#19             ;534
0003a6  f53fae46          BMI      |L1.54|
0003aa  2314              MOVS     r3,#0x14              ;536
0003ac  2208              MOVS     r2,#8                 ;536
0003ae  2105              MOVS     r1,#5                 ;536
0003b0  a0b5              ADR      r0,|L1.1672|
0003b2  f7fffffe          BL       snmp_trap_send
0003b6  8828              LDRH     r0,[r5,#0]            ;537  ; snmp_bat_flag_puts
0003b8  f4405080          ORR      r0,r0,#0x1000         ;537
0003bc  8028              STRH     r0,[r5,#0]            ;537
                  |L1.958|
0003be  e63a              B        |L1.54|
                  |L1.960|
0003c0  8820              LDRH     r0,[r4,#0]            ;542  ; snmp_bat_flag
0003c2  f4205080          BIC      r0,r0,#0x1000         ;542
0003c6  8020              STRH     r0,[r4,#0]            ;542
0003c8  8828              LDRH     r0,[r5,#0]            ;543  ; snmp_bat_flag_puts
0003ca  04c0              LSLS     r0,r0,#19             ;543
0003cc  d5f7              BPL      |L1.958|
0003ce  2315              MOVS     r3,#0x15              ;545
0003d0  2208              MOVS     r2,#8                 ;545
0003d2  2105              MOVS     r1,#5                 ;545
0003d4  a0b5              ADR      r0,|L1.1708|
0003d6  f7fffffe          BL       snmp_trap_send
0003da  8828              LDRH     r0,[r5,#0]            ;546  ; snmp_bat_flag_puts
0003dc  f4205080          BIC      r0,r0,#0x1000         ;546
0003e0  8028              STRH     r0,[r5,#0]            ;546
0003e2  e628              B        |L1.54|
                  |L1.996|
0003e4  f9bb0000          LDRSH    r0,[r11,#0]           ;558  ; USIGN
0003e8  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;558  ; bat
0003ec  eb000080          ADD      r0,r0,r0,LSL #2       ;558
0003f0  ebb10f40          CMP      r1,r0,LSL #1          ;558
0003f4  da05              BGE      |L1.1026|
0003f6  8860              LDRH     r0,[r4,#2]            ;560  ; snmp_bat_flag
0003f8  f0400001          ORR      r0,r0,#1              ;560
0003fc  8060              STRH     r0,[r4,#2]            ;560
0003fe  8868              LDRH     r0,[r5,#2]            ;561  ; snmp_bat_flag_puts
000400  e166              B        |L1.1744|
                  |L1.1026|
000402  e172              B        |L1.1770|
                  |L1.1028|
                          DCD      ||area_number.25||
                  |L1.1032|
                          DCD      snmp_bat_status
                  |L1.1036|
                          DCD      USIGN
                  |L1.1040|
                          DCD      bat
                  |L1.1044|
                          DCD      IKB
                  |L1.1048|
                          DCD      snmp_bat_flag
                  |L1.1052|
                          DCD      snmp_bat_flag_puts
                  |L1.1056|
000420  42415420          DCB      "BAT #1 Alarm, battery is low",0
000424  23312041
000428  6c61726d
00042c  2c206261
000430  74746572
000434  79206973
000438  206c6f77
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
000440  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000444  23312041
000448  6c61726d
00044c  20636c65
000450  61722c20
000454  62617474
000458  65727920
00045c  6973206e
000460  6f74206c
000464  6f7700  
000467  00                DCB      0
                  |L1.1128|
000468  42415420          DCB      "BAT #1, capacity test stopped",0
00046c  23312c20
000470  63617061
000474  63697479
000478  20746573
00047c  74207374
000480  6f707065
000484  6400    
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  42415420          DCB      "BAT #1,leveling charge is stopped",0
00048c  23312c6c
000490  6576656c
000494  696e6720
000498  63686172
00049c  67652069
0004a0  73207374
0004a4  6f707065
0004a8  6400    
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L1.1196|
0004ac  42415420          DCB      "BAT #1,leveling charge is blocked",0
0004b0  23312c6c
0004b4  6576656c
0004b8  696e6720
0004bc  63686172
0004c0  67652069
0004c4  7320626c
0004c8  6f636b65
0004cc  6400    
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L1.1232|
0004d0  42415420          DCB      "BAT #1, capacity test started",0
0004d4  23312c20
0004d8  63617061
0004dc  63697479
0004e0  20746573
0004e4  74207374
0004e8  61727465
0004ec  6400    
0004ee  00                DCB      0
0004ef  00                DCB      0
                  |L1.1264|
0004f0  42415420          DCB      "BAT #1,leveling charge is started",0
0004f4  23312c6c
0004f8  6576656c
0004fc  696e6720
000500  63686172
000504  67652069
000508  73207374
00050c  61727465
000510  6400    
000512  00                DCB      0
000513  00                DCB      0
                  |L1.1300|
000514  42415420          DCB      "BAT #1,leveling charge is unblocked",0
000518  23312c6c
00051c  6576656c
000520  696e6720
000524  63686172
000528  67652069
00052c  7320756e
000530  626c6f63
000534  6b656400
                  |L1.1336|
                          DCD      sp_ch_stat
                  |L1.1340|
00053c  42415420          DCB      "BAT #1,speed charge is stopped",0
000540  23312c73
000544  70656564
000548  20636861
00054c  72676520
000550  69732073
000554  746f7070
000558  656400  
00055b  00                DCB      0
                  |L1.1372|
00055c  42415420          DCB      "BAT #1,speed charge is blocked",0
000560  23312c73
000564  70656564
000568  20636861
00056c  72676520
000570  69732062
000574  6c6f636b
000578  656400  
00057b  00                DCB      0
                  |L1.1404|
00057c  42415420          DCB      "BAT #1,speed charge is started",0
000580  23312c73
000584  70656564
000588  20636861
00058c  72676520
000590  69732073
000594  74617274
000598  656400  
00059b  00                DCB      0
                  |L1.1436|
00059c  42415420          DCB      "BAT #1,speed charge is unblocked",0
0005a0  23312c73
0005a4  70656564
0005a8  20636861
0005ac  72676520
0005b0  69732075
0005b4  6e626c6f
0005b8  636b6564
0005bc  00      
0005bd  00                DCB      0
0005be  00                DCB      0
0005bf  00                DCB      0
                  |L1.1472|
0005c0  42415420          DCB      "BAT #1,equalising charge is on",0
0005c4  23312c65
0005c8  7175616c
0005cc  6973696e
0005d0  67206368
0005d4  61726765
0005d8  20697320
0005dc  6f6e00  
0005df  00                DCB      0
                  |L1.1504|
0005e0  42415420          DCB      "BAT #1,equalising charge is off",0
0005e4  23312c65
0005e8  7175616c
0005ec  6973696e
0005f0  67206368
0005f4  61726765
0005f8  20697320
0005fc  6f666600
                  |L1.1536|
000600  42415420          DCB      "BAT #1,equalising charge is blocked",0
000604  23312c65
000608  7175616c
00060c  6973696e
000610  67206368
000614  61726765
000618  20697320
00061c  626c6f63
000620  6b656400
                  |L1.1572|
000624  42415420          DCB      "BAT #1,equalising charge is unblocked",0
000628  23312c65
00062c  7175616c
000630  6973696e
000634  67206368
000638  61726765
00063c  20697320
000640  756e626c
000644  6f636b65
000648  6400    
00064a  00                DCB      0
00064b  00                DCB      0
                  |L1.1612|
00064c  42415420          DCB      "BAT #1,molding charge is on",0
000650  23312c6d
000654  6f6c6469
000658  6e672063
00065c  68617267
000660  65206973
000664  206f6e00
                  |L1.1640|
000668  42415420          DCB      "BAT #1,molding charge is off",0
00066c  23312c6d
000670  6f6c6469
000674  6e672063
000678  68617267
00067c  65206973
000680  206f6666
000684  00      
000685  00                DCB      0
000686  00                DCB      0
000687  00                DCB      0
                  |L1.1672|
000688  42415420          DCB      "BAT #1,molding charge is blocked",0
00068c  23312c6d
000690  6f6c6469
000694  6e672063
000698  68617267
00069c  65206973
0006a0  20626c6f
0006a4  636b6564
0006a8  00      
0006a9  00                DCB      0
0006aa  00                DCB      0
0006ab  00                DCB      0
                  |L1.1708|
0006ac  42415420          DCB      "BAT #1,molding charge is unblocked",0
0006b0  23312c6d
0006b4  6f6c6469
0006b8  6e672063
0006bc  68617267
0006c0  65206973
0006c4  20756e62
0006c8  6c6f636b
0006cc  656400  
0006cf  00                DCB      0
                  |L1.1744|
0006d0  07c0              LSLS     r0,r0,#31             ;561
0006d2  d11b              BNE      |L1.1804|
0006d4  2316              MOVS     r3,#0x16              ;563
0006d6  2208              MOVS     r2,#8                 ;563
0006d8  2105              MOVS     r1,#5                 ;563
0006da  a0ff              ADR      r0,|L1.2776|
0006dc  f7fffffe          BL       snmp_trap_send
0006e0  8868              LDRH     r0,[r5,#2]            ;564  ; snmp_bat_flag_puts
0006e2  f0400001          ORR      r0,r0,#1              ;564
0006e6  8068              STRH     r0,[r5,#2]            ;564
0006e8  e010              B        |L1.1804|
                  |L1.1770|
0006ea  8860              LDRH     r0,[r4,#2]            ;569  ; snmp_bat_flag
0006ec  f0200001          BIC      r0,r0,#1              ;569
0006f0  8060              STRH     r0,[r4,#2]            ;569
0006f2  8868              LDRH     r0,[r5,#2]            ;570  ; snmp_bat_flag_puts
0006f4  07c0              LSLS     r0,r0,#31             ;570
0006f6  d009              BEQ      |L1.1804|
0006f8  2317              MOVS     r3,#0x17              ;572
0006fa  2208              MOVS     r2,#8                 ;572
0006fc  2105              MOVS     r1,#5                 ;572
0006fe  a0fe              ADR      r0,|L1.2808|
000700  f7fffffe          BL       snmp_trap_send
000704  8868              LDRH     r0,[r5,#2]            ;573  ; snmp_bat_flag_puts
000706  f0200001          BIC      r0,r0,#1              ;573
00070a  8068              STRH     r0,[r5,#2]            ;573
                  |L1.1804|
00070c  f898008b          LDRB     r0,[r8,#0x8b]         ;577  ; bat
000710  07c1              LSLS     r1,r0,#31             ;577
000712  d00b              BEQ      |L1.1836|
000714  8861              LDRH     r1,[r4,#2]            ;579  ; snmp_bat_flag
000716  f0410102          ORR      r1,r1,#2              ;579
00071a  8061              STRH     r1,[r4,#2]            ;579
00071c  8829              LDRH     r1,[r5,#0]            ;580  ; snmp_bat_flag_puts
00071e  0789              LSLS     r1,r1,#30             ;580
000720  d40f              BMI      |L1.1858|
000722  8869              LDRH     r1,[r5,#2]            ;583  ; snmp_bat_flag_puts
000724  f0410102          ORR      r1,r1,#2              ;583
000728  8069              STRH     r1,[r5,#2]            ;583
00072a  e00a              B        |L1.1858|
                  |L1.1836|
00072c  8861              LDRH     r1,[r4,#2]            ;588  ; snmp_bat_flag
00072e  f0210102          BIC      r1,r1,#2              ;588
000732  8061              STRH     r1,[r4,#2]            ;588
000734  f9b51002          LDRSH    r1,[r5,#2]            ;589  ; snmp_bat_flag_puts
000738  078a              LSLS     r2,r1,#30             ;589
00073a  d502              BPL      |L1.1858|
00073c  f0210102          BIC      r1,r1,#2              ;592
000740  8069              STRH     r1,[r5,#2]            ;592
                  |L1.1858|
000742  0780              LSLS     r0,r0,#30             ;596
000744  d50b              BPL      |L1.1886|
000746  8860              LDRH     r0,[r4,#2]            ;598  ; snmp_bat_flag
000748  f0400004          ORR      r0,r0,#4              ;598
00074c  8060              STRH     r0,[r4,#2]            ;598
00074e  f9b50002          LDRSH    r0,[r5,#2]            ;599  ; snmp_bat_flag_puts
000752  0741              LSLS     r1,r0,#29             ;599
000754  d40e              BMI      |L1.1908|
000756  f0400004          ORR      r0,r0,#4              ;602
00075a  8068              STRH     r0,[r5,#2]            ;602
00075c  e00a              B        |L1.1908|
                  |L1.1886|
00075e  8860              LDRH     r0,[r4,#2]            ;607  ; snmp_bat_flag
000760  f0200004          BIC      r0,r0,#4              ;607
000764  8060              STRH     r0,[r4,#2]            ;607
000766  f9b50002          LDRSH    r0,[r5,#2]            ;608  ; snmp_bat_flag_puts
00076a  0741              LSLS     r1,r0,#29             ;608
00076c  d502              BPL      |L1.1908|
00076e  f0200004          BIC      r0,r0,#4              ;611
000772  8068              STRH     r0,[r5,#2]            ;611
                  |L1.1908|
000774  f9b91000          LDRSH    r1,[r9,#0]            ;615  ; IKB
000778  f9b80054          LDRSH    r0,[r8,#0x54]         ;615  ; bat
00077c  424a              RSBS     r2,r1,#0              ;615
00077e  4290              CMP      r0,r2                 ;615
000780  da04              BGE      |L1.1932|
000782  8860              LDRH     r0,[r4,#2]            ;615  ; snmp_bat_flag
000784  f0400008          ORR      r0,r0,#8              ;615
000788  8060              STRH     r0,[r4,#2]            ;615
00078a  e005              B        |L1.1944|
                  |L1.1932|
00078c  4288              CMP      r0,r1                 ;616
00078e  dd03              BLE      |L1.1944|
000790  8860              LDRH     r0,[r4,#2]            ;616  ; snmp_bat_flag
000792  f0200008          BIC      r0,r0,#8              ;616
000796  8060              STRH     r0,[r4,#2]            ;616
                  |L1.1944|
000798  f8960023          LDRB     r0,[r6,#0x23]         ;618  ; spc_stat
00079c  2801              CMP      r0,#1                 ;618
00079e  d102              BNE      |L1.1958|
0007a0  f8960024          LDRB     r0,[r6,#0x24]         ;618  ; spc_bat
0007a4  b3c8              CBZ      r0,|L1.2074|
                  |L1.1958|
0007a6  8860              LDRH     r0,[r4,#2]            ;629  ; snmp_bat_flag
0007a8  f0200010          BIC      r0,r0,#0x10           ;629
0007ac  8060              STRH     r0,[r4,#2]            ;629
0007ae  8868              LDRH     r0,[r5,#2]            ;630  ; snmp_bat_flag_puts
0007b0  06c0              LSLS     r0,r0,#27             ;630
0007b2  d509              BPL      |L1.1992|
0007b4  231d              MOVS     r3,#0x1d              ;632
0007b6  2208              MOVS     r2,#8                 ;632
0007b8  2105              MOVS     r1,#5                 ;632
0007ba  a0d9              ADR      r0,|L1.2848|
0007bc  f7fffffe          BL       snmp_trap_send
0007c0  8868              LDRH     r0,[r5,#2]            ;633  ; snmp_bat_flag_puts
0007c2  f0200010          BIC      r0,r0,#0x10           ;633
0007c6  8068              STRH     r0,[r5,#2]            ;633
                  |L1.1992|
0007c8  f8960023          LDRB     r0,[r6,#0x23]         ;637  ; spc_stat
0007cc  2802              CMP      r0,#2                 ;637
0007ce  d037              BEQ      |L1.2112|
0007d0  8860              LDRH     r0,[r4,#2]            ;648  ; snmp_bat_flag
0007d2  f0200020          BIC      r0,r0,#0x20           ;648
0007d6  8060              STRH     r0,[r4,#2]            ;648
0007d8  8868              LDRH     r0,[r5,#2]            ;649  ; snmp_bat_flag_puts
0007da  0680              LSLS     r0,r0,#26             ;649
0007dc  d509              BPL      |L1.2034|
0007de  231f              MOVS     r3,#0x1f              ;651
0007e0  2208              MOVS     r2,#8                 ;651
0007e2  2105              MOVS     r1,#5                 ;651
0007e4  a0d6              ADR      r0,|L1.2880|
0007e6  f7fffffe          BL       snmp_trap_send
0007ea  8868              LDRH     r0,[r5,#2]            ;652  ; snmp_bat_flag_puts
0007ec  f0200020          BIC      r0,r0,#0x20           ;652
0007f0  8068              STRH     r0,[r5,#2]            ;652
                  |L1.2034|
0007f2  7870              LDRB     r0,[r6,#1]            ;656  ; vz_error
0007f4  b3b0              CBZ      r0,|L1.2148|
0007f6  8860              LDRH     r0,[r4,#2]            ;658  ; snmp_bat_flag
0007f8  f0400040          ORR      r0,r0,#0x40           ;658
0007fc  8060              STRH     r0,[r4,#2]            ;658
0007fe  8868              LDRH     r0,[r5,#2]            ;659  ; snmp_bat_flag_puts
000800  0640              LSLS     r0,r0,#25             ;659
000802  d441              BMI      |L1.2184|
000804  2320              MOVS     r3,#0x20              ;661
000806  2208              MOVS     r2,#8                 ;661
000808  2105              MOVS     r1,#5                 ;661
00080a  a0d6              ADR      r0,|L1.2916|
00080c  f7fffffe          BL       snmp_trap_send
000810  8868              LDRH     r0,[r5,#2]            ;662  ; snmp_bat_flag_puts
000812  f0400040          ORR      r0,r0,#0x40           ;662
000816  8068              STRH     r0,[r5,#2]            ;662
000818  e036              B        |L1.2184|
                  |L1.2074|
00081a  e7ff              B        |L1.2076|
                  |L1.2076|
00081c  8860              LDRH     r0,[r4,#2]            ;620  ; snmp_bat_flag
00081e  f0400010          ORR      r0,r0,#0x10           ;620
000822  8060              STRH     r0,[r4,#2]            ;620
000824  8868              LDRH     r0,[r5,#2]            ;621  ; snmp_bat_flag_puts
000826  06c0              LSLS     r0,r0,#27             ;621
000828  d4ce              BMI      |L1.1992|
00082a  231c              MOVS     r3,#0x1c              ;623
00082c  2208              MOVS     r2,#8                 ;623
00082e  2105              MOVS     r1,#5                 ;623
000830  a0d5              ADR      r0,|L1.2952|
000832  f7fffffe          BL       snmp_trap_send
000836  8868              LDRH     r0,[r5,#2]            ;624  ; snmp_bat_flag_puts
000838  f0400010          ORR      r0,r0,#0x10           ;624
00083c  8068              STRH     r0,[r5,#2]            ;624
00083e  e7c3              B        |L1.1992|
                  |L1.2112|
000840  8860              LDRH     r0,[r4,#2]            ;639  ; snmp_bat_flag
000842  f0400020          ORR      r0,r0,#0x20           ;639
000846  8060              STRH     r0,[r4,#2]            ;639
000848  8868              LDRH     r0,[r5,#2]            ;640  ; snmp_bat_flag_puts
00084a  0680              LSLS     r0,r0,#26             ;640
00084c  d4d1              BMI      |L1.2034|
00084e  231e              MOVS     r3,#0x1e              ;642
000850  2208              MOVS     r2,#8                 ;642
000852  2105              MOVS     r1,#5                 ;642
000854  a0d4              ADR      r0,|L1.2984|
000856  f7fffffe          BL       snmp_trap_send
00085a  8868              LDRH     r0,[r5,#2]            ;643  ; snmp_bat_flag_puts
00085c  f0400020          ORR      r0,r0,#0x20           ;643
000860  8068              STRH     r0,[r5,#2]            ;643
000862  e7c6              B        |L1.2034|
                  |L1.2148|
000864  e7ff              B        |L1.2150|
                  |L1.2150|
000866  8860              LDRH     r0,[r4,#2]            ;667  ; snmp_bat_flag
000868  f0200040          BIC      r0,r0,#0x40           ;667
00086c  8060              STRH     r0,[r4,#2]            ;667
00086e  8868              LDRH     r0,[r5,#2]            ;668  ; snmp_bat_flag_puts
000870  0640              LSLS     r0,r0,#25             ;668
000872  d509              BPL      |L1.2184|
000874  2321              MOVS     r3,#0x21              ;670
000876  2208              MOVS     r2,#8                 ;670
000878  2105              MOVS     r1,#5                 ;670
00087a  a0d4              ADR      r0,|L1.3020|
00087c  f7fffffe          BL       snmp_trap_send
000880  8868              LDRH     r0,[r5,#2]            ;671  ; snmp_bat_flag_puts
000882  f0200040          BIC      r0,r0,#0x40           ;671
000886  8068              STRH     r0,[r5,#2]            ;671
                  |L1.2184|
000888  48d9              LDR      r0,|L1.3056|
00088a  7800              LDRB     r0,[r0,#0]            ;675  ; sp_ch_stat
00088c  2802              CMP      r0,#2                 ;675
00088e  d024              BEQ      |L1.2266|
000890  8860              LDRH     r0,[r4,#2]            ;686  ; snmp_bat_flag
000892  f0200080          BIC      r0,r0,#0x80           ;686
000896  8060              STRH     r0,[r4,#2]            ;686
000898  8868              LDRH     r0,[r5,#2]            ;687  ; snmp_bat_flag_puts
00089a  0600              LSLS     r0,r0,#24             ;687
00089c  d509              BPL      |L1.2226|
00089e  2323              MOVS     r3,#0x23              ;689
0008a0  2208              MOVS     r2,#8                 ;689
0008a2  2105              MOVS     r1,#5                 ;689
0008a4  a0d3              ADR      r0,|L1.3060|
0008a6  f7fffffe          BL       snmp_trap_send
0008aa  8868              LDRH     r0,[r5,#2]            ;690  ; snmp_bat_flag_puts
0008ac  f0200080          BIC      r0,r0,#0x80           ;690
0008b0  8068              STRH     r0,[r5,#2]            ;690
                  |L1.2226|
0008b2  78b0              LDRB     r0,[r6,#2]            ;694  ; sp_ch_error
0008b4  b318              CBZ      r0,|L1.2302|
0008b6  8860              LDRH     r0,[r4,#2]            ;696  ; snmp_bat_flag
0008b8  f4407080          ORR      r0,r0,#0x100          ;696
0008bc  8060              STRH     r0,[r4,#2]            ;696
0008be  8868              LDRH     r0,[r5,#2]            ;697  ; snmp_bat_flag_puts
0008c0  05c0              LSLS     r0,r0,#23             ;697
0008c2  d42d              BMI      |L1.2336|
0008c4  2324              MOVS     r3,#0x24              ;699
0008c6  2208              MOVS     r2,#8                 ;699
0008c8  2105              MOVS     r1,#5                 ;699
0008ca  a0d2              ADR      r0,|L1.3092|
0008cc  f7fffffe          BL       snmp_trap_send
0008d0  8868              LDRH     r0,[r5,#2]            ;700  ; snmp_bat_flag_puts
0008d2  f4407080          ORR      r0,r0,#0x100          ;700
0008d6  8068              STRH     r0,[r5,#2]            ;700
0008d8  e022              B        |L1.2336|
                  |L1.2266|
0008da  8860              LDRH     r0,[r4,#2]            ;677  ; snmp_bat_flag
0008dc  f0400080          ORR      r0,r0,#0x80           ;677
0008e0  8060              STRH     r0,[r4,#2]            ;677
0008e2  8868              LDRH     r0,[r5,#2]            ;678  ; snmp_bat_flag_puts
0008e4  0600              LSLS     r0,r0,#24             ;678
0008e6  d4e4              BMI      |L1.2226|
0008e8  2322              MOVS     r3,#0x22              ;680
0008ea  2208              MOVS     r2,#8                 ;680
0008ec  2105              MOVS     r1,#5                 ;680
0008ee  a0d1              ADR      r0,|L1.3124|
0008f0  f7fffffe          BL       snmp_trap_send
0008f4  8868              LDRH     r0,[r5,#2]            ;681  ; snmp_bat_flag_puts
0008f6  f0400080          ORR      r0,r0,#0x80           ;681
0008fa  8068              STRH     r0,[r5,#2]            ;681
0008fc  e7d9              B        |L1.2226|
                  |L1.2302|
0008fe  8860              LDRH     r0,[r4,#2]            ;705  ; snmp_bat_flag
000900  f4207080          BIC      r0,r0,#0x100          ;705
000904  8060              STRH     r0,[r4,#2]            ;705
000906  8868              LDRH     r0,[r5,#2]            ;706  ; snmp_bat_flag_puts
000908  05c0              LSLS     r0,r0,#23             ;706
00090a  d509              BPL      |L1.2336|
00090c  2325              MOVS     r3,#0x25              ;708
00090e  2208              MOVS     r2,#8                 ;708
000910  2105              MOVS     r1,#5                 ;708
000912  a0d0              ADR      r0,|L1.3156|
000914  f7fffffe          BL       snmp_trap_send
000918  8868              LDRH     r0,[r5,#2]            ;709  ; snmp_bat_flag_puts
00091a  f4207080          BIC      r0,r0,#0x100          ;709
00091e  8068              STRH     r0,[r5,#2]            ;709
                  |L1.2336|
000920  7970              LDRB     r0,[r6,#5]            ;713  ; vz1_stat
000922  b188              CBZ      r0,|L1.2376|
000924  8860              LDRH     r0,[r4,#2]            ;715  ; snmp_bat_flag
000926  f4407000          ORR      r0,r0,#0x200          ;715
00092a  8060              STRH     r0,[r4,#2]            ;715
00092c  8868              LDRH     r0,[r5,#2]            ;716  ; snmp_bat_flag_puts
00092e  0580              LSLS     r0,r0,#22             ;716
000930  d41b              BMI      |L1.2410|
000932  2326              MOVS     r3,#0x26              ;718
000934  2208              MOVS     r2,#8                 ;718
000936  2105              MOVS     r1,#5                 ;718
000938  a0cf              ADR      r0,|L1.3192|
00093a  f7fffffe          BL       snmp_trap_send
00093e  8868              LDRH     r0,[r5,#2]            ;719  ; snmp_bat_flag_puts
000940  f4407000          ORR      r0,r0,#0x200          ;719
000944  8068              STRH     r0,[r5,#2]            ;719
000946  e010              B        |L1.2410|
                  |L1.2376|
000948  8860              LDRH     r0,[r4,#2]            ;724  ; snmp_bat_flag
00094a  f4207000          BIC      r0,r0,#0x200          ;724
00094e  8060              STRH     r0,[r4,#2]            ;724
000950  8868              LDRH     r0,[r5,#2]            ;725  ; snmp_bat_flag_puts
000952  0580              LSLS     r0,r0,#22             ;725
000954  d509              BPL      |L1.2410|
000956  2327              MOVS     r3,#0x27              ;727
000958  2208              MOVS     r2,#8                 ;727
00095a  2105              MOVS     r1,#5                 ;727
00095c  a0ce              ADR      r0,|L1.3224|
00095e  f7fffffe          BL       snmp_trap_send
000962  8868              LDRH     r0,[r5,#2]            ;728  ; snmp_bat_flag_puts
000964  f4207000          BIC      r0,r0,#0x200          ;728
000968  8068              STRH     r0,[r5,#2]            ;728
                  |L1.2410|
00096a  78f0              LDRB     r0,[r6,#3]            ;732  ; vz1_error
00096c  b188              CBZ      r0,|L1.2450|
00096e  8860              LDRH     r0,[r4,#2]            ;734  ; snmp_bat_flag
000970  f4406080          ORR      r0,r0,#0x400          ;734
000974  8060              STRH     r0,[r4,#2]            ;734
000976  8868              LDRH     r0,[r5,#2]            ;735  ; snmp_bat_flag_puts
000978  0540              LSLS     r0,r0,#21             ;735
00097a  d41b              BMI      |L1.2484|
00097c  2328              MOVS     r3,#0x28              ;737
00097e  2208              MOVS     r2,#8                 ;737
000980  2105              MOVS     r1,#5                 ;737
000982  a0cd              ADR      r0,|L1.3256|
000984  f7fffffe          BL       snmp_trap_send
000988  8868              LDRH     r0,[r5,#2]            ;738  ; snmp_bat_flag_puts
00098a  f4406080          ORR      r0,r0,#0x400          ;738
00098e  8068              STRH     r0,[r5,#2]            ;738
000990  e010              B        |L1.2484|
                  |L1.2450|
000992  8860              LDRH     r0,[r4,#2]            ;743  ; snmp_bat_flag
000994  f4206080          BIC      r0,r0,#0x400          ;743
000998  8060              STRH     r0,[r4,#2]            ;743
00099a  8868              LDRH     r0,[r5,#2]            ;744  ; snmp_bat_flag_puts
00099c  0540              LSLS     r0,r0,#21             ;744
00099e  d509              BPL      |L1.2484|
0009a0  2329              MOVS     r3,#0x29              ;746
0009a2  2208              MOVS     r2,#8                 ;746
0009a4  2105              MOVS     r1,#5                 ;746
0009a6  a0cd              ADR      r0,|L1.3292|
0009a8  f7fffffe          BL       snmp_trap_send
0009ac  8868              LDRH     r0,[r5,#2]            ;747  ; snmp_bat_flag_puts
0009ae  f4206080          BIC      r0,r0,#0x400          ;747
0009b2  8068              STRH     r0,[r5,#2]            ;747
                  |L1.2484|
0009b4  79f0              LDRB     r0,[r6,#7]            ;751  ; vz2_stat
0009b6  b188              CBZ      r0,|L1.2524|
0009b8  8860              LDRH     r0,[r4,#2]            ;753  ; snmp_bat_flag
0009ba  f4406000          ORR      r0,r0,#0x800          ;753
0009be  8060              STRH     r0,[r4,#2]            ;753
0009c0  8868              LDRH     r0,[r5,#2]            ;754  ; snmp_bat_flag_puts
0009c2  0500              LSLS     r0,r0,#20             ;754
0009c4  d41b              BMI      |L1.2558|
0009c6  232a              MOVS     r3,#0x2a              ;756
0009c8  2208              MOVS     r2,#8                 ;756
0009ca  2105              MOVS     r1,#5                 ;756
0009cc  a0cd              ADR      r0,|L1.3332|
0009ce  f7fffffe          BL       snmp_trap_send
0009d2  8868              LDRH     r0,[r5,#2]            ;757  ; snmp_bat_flag_puts
0009d4  f4406000          ORR      r0,r0,#0x800          ;757
0009d8  8068              STRH     r0,[r5,#2]            ;757
0009da  e010              B        |L1.2558|
                  |L1.2524|
0009dc  8860              LDRH     r0,[r4,#2]            ;762  ; snmp_bat_flag
0009de  f4206000          BIC      r0,r0,#0x800          ;762
0009e2  8060              STRH     r0,[r4,#2]            ;762
0009e4  8868              LDRH     r0,[r5,#2]            ;763  ; snmp_bat_flag_puts
0009e6  0500              LSLS     r0,r0,#20             ;763
0009e8  d509              BPL      |L1.2558|
0009ea  232b              MOVS     r3,#0x2b              ;765
0009ec  2208              MOVS     r2,#8                 ;765
0009ee  2105              MOVS     r1,#5                 ;765
0009f0  a0cb              ADR      r0,|L1.3360|
0009f2  f7fffffe          BL       snmp_trap_send
0009f6  8868              LDRH     r0,[r5,#2]            ;766  ; snmp_bat_flag_puts
0009f8  f4206000          BIC      r0,r0,#0x800          ;766
0009fc  8068              STRH     r0,[r5,#2]            ;766
                  |L1.2558|
0009fe  7930              LDRB     r0,[r6,#4]            ;770  ; vz2_error
000a00  b198              CBZ      r0,|L1.2602|
000a02  8860              LDRH     r0,[r4,#2]            ;772  ; snmp_bat_flag
000a04  f4405080          ORR      r0,r0,#0x1000         ;772
000a08  8060              STRH     r0,[r4,#2]            ;772
000a0a  8868              LDRH     r0,[r5,#2]            ;773  ; snmp_bat_flag_puts
000a0c  04c0              LSLS     r0,r0,#19             ;773
000a0e  f53fab18          BMI      |L1.66|
000a12  232c              MOVS     r3,#0x2c              ;775
000a14  2208              MOVS     r2,#8                 ;775
000a16  2105              MOVS     r1,#5                 ;775
000a18  a0c9              ADR      r0,|L1.3392|
000a1a  f7fffffe          BL       snmp_trap_send
000a1e  8868              LDRH     r0,[r5,#2]            ;776  ; snmp_bat_flag_puts
000a20  f4405080          ORR      r0,r0,#0x1000         ;776
000a24  8068              STRH     r0,[r5,#2]            ;776
                  |L1.2598|
000a26  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2602|
000a2a  8860              LDRH     r0,[r4,#2]            ;781  ; snmp_bat_flag
000a2c  f4205080          BIC      r0,r0,#0x1000         ;781
000a30  8060              STRH     r0,[r4,#2]            ;781
000a32  8868              LDRH     r0,[r5,#2]            ;782  ; snmp_bat_flag_puts
000a34  04c0              LSLS     r0,r0,#19             ;782
000a36  d5f6              BPL      |L1.2598|
000a38  232d              MOVS     r3,#0x2d              ;784
000a3a  2208              MOVS     r2,#8                 ;784
000a3c  2105              MOVS     r1,#5                 ;784
000a3e  a0c9              ADR      r0,|L1.3428|
000a40  f7fffffe          BL       snmp_trap_send
000a44  8868              LDRH     r0,[r5,#2]            ;785  ; snmp_bat_flag_puts
000a46  f4205080          BIC      r0,r0,#0x1000         ;785
000a4a  8068              STRH     r0,[r5,#2]            ;785
000a4c  e7eb              B        |L1.2598|
;;;918    
                          ENDP

                  ke_start PROC
;;;921    //-----------------------------------------------
;;;922    void ke_start(char in)
000a4e  e92d41fc          PUSH     {r2-r8,lr}
;;;923    {          
000a52  4606              MOV      r6,r0
;;;924    ke_start_stat=(enum_ke_start_stat)0;		 
000a54  4dcc              LDR      r5,|L1.3464|
000a56  f04f0400          MOV      r4,#0
;;;925    /*
;;;926    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;927    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;928    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;929    #endif
;;;930    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;931    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;932    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;933    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;934    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;935    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;936    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;937    else */
;;;938    	{
;;;939    
;;;940    	ke_start_stat=kssYES;
000a5a  f105050a          ADD      r5,r5,#0xa
000a5e  f04f0064          MOV      r0,#0x64
000a62  7768              STRB     r0,[r5,#0x1d]
;;;941    
;;;942    	spc_stat=spcKE;
000a64  f04f0701          MOV      r7,#1
000a68  766f              STRB     r7,[r5,#0x19]
;;;943    	__ee_spc_stat=spcKE;
000a6a  f8a57064          STRH     r7,[r5,#0x64]
;;;944    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000a6e  4639              MOV      r1,r7
000a70  f240209a          MOV      r0,#0x29a
000a74  f7fffffe          BL       lc640_write_int
;;;945    	
;;;946    	spc_bat=0;
000a78  76ac              STRB     r4,[r5,#0x1a]
;;;947    	__ee_spc_bat=0;
000a7a  f8a54066          STRH     r4,[r5,#0x66]
;;;948    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000a7e  4621              MOV      r1,r4
000a80  f240209e          MOV      r0,#0x29e
000a84  f7fffffe          BL       lc640_write_int
;;;949    
;;;950    	bat[0]._zar_cnt_ke=0;
000a88  f8df8300          LDR      r8,|L1.3468|
000a8c  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;951    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000a90  48bf              LDR      r0,|L1.3472|
000a92  2100              MOVS     r1,#0
000a94  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000a98  f7fffffe          BL       lc640_write_int
;;;952    
;;;953    	bat[0]._time_min_cnt_ke=0;
000a9c  f8a8404a          STRH     r4,[r8,#0x4a]
;;;954    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000aa0  2100              MOVS     r1,#0
000aa2  f44f70e3          MOV      r0,#0x1c6
000aa6  f7fffffe          BL       lc640_write_int
;;;955    
;;;956    	
;;;957    	spc_phase=0;
000aaa  76ec              STRB     r4,[r5,#0x1b]
;;;958    	__ee_spc_phase=0;
000aac  f8a54068          STRH     r4,[r5,#0x68]
;;;959    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000ab0  4621              MOV      r1,r4
000ab2  f44f7028          MOV      r0,#0x2a0
000ab6  f7fffffe          BL       lc640_write_int
;;;960    
;;;961    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;962    
;;;963    		{					
;;;964    		signed short temp_temp;
;;;965    		signed char temp;
;;;966    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000aba  eb060046          ADD      r0,r6,r6,LSL #1
000abe  eb001006          ADD      r0,r0,r6,LSL #4
000ac2  eb080180          ADD      r1,r8,r0,LSL #2
000ac6  48b3              LDR      r0,|L1.3476|
000ac8  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000aca  f1000001          ADD      r0,r0,#1
000ace  f0000007          AND      r0,r0,#7
000ad2  eb010040          ADD      r0,r1,r0,LSL #1
000ad6  e15f              B        |L1.3480|
                  |L1.2776|
000ad8  42415420          DCB      "BAT #2 Alarm, battery is low",0
000adc  23322041
000ae0  6c61726d
000ae4  2c206261
000ae8  74746572
000aec  79206973
000af0  206c6f77
000af4  00      
000af5  00                DCB      0
000af6  00                DCB      0
000af7  00                DCB      0
                  |L1.2808|
000af8  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000afc  23322041
000b00  6c61726d
000b04  20636c65
000b08  61722c20
000b0c  62617474
000b10  65727920
000b14  6973206e
000b18  6f74206c
000b1c  6f7700  
000b1f  00                DCB      0
                  |L1.2848|
000b20  42415420          DCB      "BAT #2, capacity test stopped",0
000b24  23322c20
000b28  63617061
000b2c  63697479
000b30  20746573
000b34  74207374
000b38  6f707065
000b3c  6400    
000b3e  00                DCB      0
000b3f  00                DCB      0
                  |L1.2880|
000b40  42415420          DCB      "BAT #2,leveling charge is stopped",0
000b44  23322c6c
000b48  6576656c
000b4c  696e6720
000b50  63686172
000b54  67652069
000b58  73207374
000b5c  6f707065
000b60  6400    
000b62  00                DCB      0
000b63  00                DCB      0
                  |L1.2916|
000b64  42415420          DCB      "BAT #2,leveling charge is blocked",0
000b68  23322c6c
000b6c  6576656c
000b70  696e6720
000b74  63686172
000b78  67652069
000b7c  7320626c
000b80  6f636b65
000b84  6400    
000b86  00                DCB      0
000b87  00                DCB      0
                  |L1.2952|
000b88  42415420          DCB      "BAT #2, capacity test started",0
000b8c  23322c20
000b90  63617061
000b94  63697479
000b98  20746573
000b9c  74207374
000ba0  61727465
000ba4  6400    
000ba6  00                DCB      0
000ba7  00                DCB      0
                  |L1.2984|
000ba8  42415420          DCB      "BAT #2,leveling charge is started",0
000bac  23322c6c
000bb0  6576656c
000bb4  696e6720
000bb8  63686172
000bbc  67652069
000bc0  73207374
000bc4  61727465
000bc8  6400    
000bca  00                DCB      0
000bcb  00                DCB      0
                  |L1.3020|
000bcc  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000bd0  23322c6c
000bd4  6576656c
000bd8  696e6720
000bdc  63686172
000be0  67652069
000be4  7320756e
000be8  626c6f63
000bec  6b656400
                  |L1.3056|
                          DCD      sp_ch_stat
                  |L1.3060|
000bf4  42415420          DCB      "BAT #2,speed charge is stopped",0
000bf8  23322c73
000bfc  70656564
000c00  20636861
000c04  72676520
000c08  69732073
000c0c  746f7070
000c10  656400  
000c13  00                DCB      0
                  |L1.3092|
000c14  42415420          DCB      "BAT #2,speed charge is blocked",0
000c18  23322c73
000c1c  70656564
000c20  20636861
000c24  72676520
000c28  69732062
000c2c  6c6f636b
000c30  656400  
000c33  00                DCB      0
                  |L1.3124|
000c34  42415420          DCB      "BAT #2,speed charge is started",0
000c38  23322c73
000c3c  70656564
000c40  20636861
000c44  72676520
000c48  69732073
000c4c  74617274
000c50  656400  
000c53  00                DCB      0
                  |L1.3156|
000c54  42415420          DCB      "BAT #2,speed charge is unblocked",0
000c58  23322c73
000c5c  70656564
000c60  20636861
000c64  72676520
000c68  69732075
000c6c  6e626c6f
000c70  636b6564
000c74  00      
000c75  00                DCB      0
000c76  00                DCB      0
000c77  00                DCB      0
                  |L1.3192|
000c78  42415420          DCB      "BAT #2,equalising charge is on",0
000c7c  23322c65
000c80  7175616c
000c84  6973696e
000c88  67206368
000c8c  61726765
000c90  20697320
000c94  6f6e00  
000c97  00                DCB      0
                  |L1.3224|
000c98  42415420          DCB      "BAT #2,equalising charge is off",0
000c9c  23322c65
000ca0  7175616c
000ca4  6973696e
000ca8  67206368
000cac  61726765
000cb0  20697320
000cb4  6f666600
                  |L1.3256|
000cb8  42415420          DCB      "BAT #2,equalising charge is blocked",0
000cbc  23322c65
000cc0  7175616c
000cc4  6973696e
000cc8  67206368
000ccc  61726765
000cd0  20697320
000cd4  626c6f63
000cd8  6b656400
                  |L1.3292|
000cdc  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000ce0  23322c65
000ce4  7175616c
000ce8  6973696e
000cec  67206368
000cf0  61726765
000cf4  20697320
000cf8  756e626c
000cfc  6f636b65
000d00  6400    
000d02  00                DCB      0
000d03  00                DCB      0
                  |L1.3332|
000d04  42415420          DCB      "BAT #2,molding charge is on",0
000d08  23322c6d
000d0c  6f6c6469
000d10  6e672063
000d14  68617267
000d18  65206973
000d1c  206f6e00
                  |L1.3360|
000d20  42415420          DCB      "BAT #2,molding charge is off",0
000d24  23322c6d
000d28  6f6c6469
000d2c  6e672063
000d30  68617267
000d34  65206973
000d38  206f6666
000d3c  00      
000d3d  00                DCB      0
000d3e  00                DCB      0
000d3f  00                DCB      0
                  |L1.3392|
000d40  42415420          DCB      "BAT #2,molding charge is blocked",0
000d44  23322c6d
000d48  6f6c6469
000d4c  6e672063
000d50  68617267
000d54  65206973
000d58  20626c6f
000d5c  636b6564
000d60  00      
000d61  00                DCB      0
000d62  00                DCB      0
000d63  00                DCB      0
                  |L1.3428|
000d64  42415420          DCB      "BAT #2,molding charge is unblocked",0
000d68  23322c6d
000d6c  6f6c6469
000d70  6e672063
000d74  68617267
000d78  65206973
000d7c  20756e62
000d80  6c6f636b
000d84  656400  
000d87  00                DCB      0
                  |L1.3464|
                          DCD      ||area_number.25||
                  |L1.3468|
                          DCD      bat
                  |L1.3472|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.3476|
                          DCD      bat_u_old_cnt
                  |L1.3480|
000d98  8c00              LDRH     r0,[r0,#0x20]
000d9a  9001              STR      r0,[sp,#4]
;;;967    		    
;;;968    		temp=LPC_RTC->YEAR;
000d9c  4eff              LDR      r6,|L1.4508|
000d9e  8bb0              LDRH     r0,[r6,#0x1c]
000da0  9000              STR      r0,[sp,#0]
;;;969    		gran_char(&temp,1,99);
000da2  f04f0263          MOV      r2,#0x63
000da6  f04f0101          MOV      r1,#1
000daa  4668              MOV      r0,sp
000dac  f7fffffe          BL       gran_char
;;;970    		*((char*)(&(ke_date[0])))=temp;
000db0  4cfb              LDR      r4,|L1.4512|
000db2  f89d0000          LDRB     r0,[sp,#0]
000db6  7020              STRB     r0,[r4,#0]
;;;971    			
;;;972    		temp=LPC_RTC->MONTH;
000db8  7e30              LDRB     r0,[r6,#0x18]
000dba  9000              STR      r0,[sp,#0]
;;;973    		gran_char(&temp,1,12);
000dbc  220c              MOVS     r2,#0xc
000dbe  2101              MOVS     r1,#1
000dc0  4668              MOV      r0,sp
000dc2  f7fffffe          BL       gran_char
;;;974    		*(((char*)(&(ke_date[0])))+1)=temp;
000dc6  f89d0000          LDRB     r0,[sp,#0]
000dca  7060              STRB     r0,[r4,#1]
;;;975    		
;;;976    		temp=LPC_RTC->DOM;
000dcc  7b30              LDRB     r0,[r6,#0xc]
000dce  9000              STR      r0,[sp,#0]
;;;977    		gran_char(&temp,1,31);
000dd0  221f              MOVS     r2,#0x1f
000dd2  2101              MOVS     r1,#1
000dd4  4668              MOV      r0,sp
000dd6  f7fffffe          BL       gran_char
;;;978    		*(((char*)(&(ke_date[0])))+2)=temp;			
000dda  f89d0000          LDRB     r0,[sp,#0]
000dde  70a0              STRB     r0,[r4,#2]
;;;979    				
;;;980    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000de0  f89d0004          LDRB     r0,[sp,#4]
000de4  70e0              STRB     r0,[r4,#3]
;;;981    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000de6  f24020a2          MOV      r0,#0x2a2
000dea  6821              LDR      r1,[r4,#0]  ; ke_date
000dec  f7fffffe          BL       lc640_write_long
;;;982    
;;;983    		temp=LPC_RTC->HOUR;
000df0  7a30              LDRB     r0,[r6,#8]
000df2  9000              STR      r0,[sp,#0]
;;;984    		gran_char(&temp,0,23);
000df4  2217              MOVS     r2,#0x17
000df6  2100              MOVS     r1,#0
000df8  4668              MOV      r0,sp
000dfa  f7fffffe          BL       gran_char
;;;985    		*((char*)(&(ke_date[1])))=temp;
000dfe  f89d0000          LDRB     r0,[sp,#0]
000e02  7120              STRB     r0,[r4,#4]
;;;986                   
;;;987    		temp=LPC_RTC->MIN;
000e04  7930              LDRB     r0,[r6,#4]
000e06  9000              STR      r0,[sp,#0]
;;;988    		gran_char(&temp,0,59);
000e08  223b              MOVS     r2,#0x3b
000e0a  2100              MOVS     r1,#0
000e0c  4668              MOV      r0,sp
000e0e  f7fffffe          BL       gran_char
;;;989    		*(((char*)(&(ke_date[1])))+1)=temp;
000e12  f89d0000          LDRB     r0,[sp,#0]
000e16  7160              STRB     r0,[r4,#5]
;;;990    	          
;;;991    		temp=LPC_RTC->SEC;
000e18  7830              LDRB     r0,[r6,#0]
000e1a  9000              STR      r0,[sp,#0]
;;;992    		gran_char(&temp,0,59);
000e1c  223b              MOVS     r2,#0x3b
000e1e  2100              MOVS     r1,#0
000e20  4668              MOV      r0,sp
000e22  f7fffffe          BL       gran_char
;;;993    		*(((char*)(&(ke_date[1])))+2)=temp;
000e26  f89d0000          LDRB     r0,[sp,#0]
000e2a  71a0              STRB     r0,[r4,#6]
;;;994    			
;;;995    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000e2c  f89d0005          LDRB     r0,[sp,#5]
000e30  71e0              STRB     r0,[r4,#7]
;;;996    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000e32  f24020a6          MOV      r0,#0x2a6
000e36  6861              LDR      r1,[r4,#4]  ; ke_date
000e38  f7fffffe          BL       lc640_write_long
;;;997    		}
;;;998    	bat_hndl_zvu_ke_init=1;
000e3c  702f              STRB     r7,[r5,#0]
;;;999    	}
;;;1000   }
000e3e  e8bd81fc          POP      {r2-r8,pc}
;;;1001   #endif
                          ENDP

                  ke_drv PROC
;;;1083   //-----------------------------------------------
;;;1084   void ke_drv(void)
000e42  e92d47f0          PUSH     {r4-r10,lr}
;;;1085   {
000e46  b088              SUB      sp,sp,#0x20
;;;1086   static char ke_drv_cnt_10s;
;;;1087   static short i_bat_buff[6];
;;;1088   static char i_bat_buff_cnt;
;;;1089   short ke_drv_i_temp;
;;;1090   short ke_drv_i_avg;
;;;1091   char i;
;;;1092   short ke_drv_i_temp_temp;
;;;1093   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000e48  f04f021c          MOV      r2,#0x1c
000e4c  49d5              LDR      r1,|L1.4516|
000e4e  a801              ADD      r0,sp,#4
000e50  f7fffffe          BL       __aeabi_memcpy4
;;;1094   
;;;1095   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000e54  4ed2              LDR      r6,|L1.4512|
;;;1096   	{
;;;1097   	
;;;1098   	i_bat_buff[0]=0;
000e56  4bd4              LDR      r3,|L1.4520|
000e58  3efc              SUBS     r6,r6,#0xfc           ;1095
000e5a  2500              MOVS     r5,#0
000e5c  7ab0              LDRB     r0,[r6,#0xa]          ;1095  ; bat_hndl_zvu_ke_init
000e5e  2801              CMP      r0,#1                 ;1095
000e60  d102              BNE      |L1.3688|
000e62  801d              STRH     r5,[r3,#0]
;;;1099   	i_bat_buff[0]=0;
;;;1100   	i_bat_buff[0]=0;
;;;1101   	i_bat_buff[0]=0;
;;;1102   	i_bat_buff[0]=0;
;;;1103   	i_bat_buff[0]=0;
;;;1104   	i_bat_buff_cnt=0;
000e64  73b5              STRB     r5,[r6,#0xe]
;;;1105   
;;;1106   	bat_hndl_zvu_ke_init=0;
000e66  72b5              STRB     r5,[r6,#0xa]
                  |L1.3688|
;;;1107   	}
;;;1108   
;;;1109   
;;;1110   
;;;1111   
;;;1112   if(spc_stat==spcKE)
000e68  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000e6c  2801              CMP      r0,#1
000e6e  d17e              BNE      |L1.3950|
;;;1113   	{
;;;1114   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000e70  48ce              LDR      r0,|L1.4524|
000e72  f04f070a          MOV      r7,#0xa
000e76  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000e7a  f1c00000          RSB      r0,r0,#0
000e7e  fb90f0f7          SDIV     r0,r0,r7
000e82  b200              SXTH     r0,r0
;;;1115   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000e84  2800              CMP      r0,#0
000e86  da01              BGE      |L1.3724|
000e88  f04f0000          MOV      r0,#0
                  |L1.3724|
;;;1116   
;;;1117   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000e8c  4ac8              LDR      r2,|L1.4528|
000e8e  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000e90  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1118   	if(++ke_drv_cnt_10s>10)
000e92  1c49              ADDS     r1,r1,#1
;;;1119   		{
;;;1120   		ke_drv_cnt_10s=0;
;;;1121   
;;;1122   		i_bat_buff_cnt++;
;;;1123   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1124   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1125   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1126   		ke_drv_i_temp_temp=0;
;;;1127   		for(i=0;i<6;i++)
;;;1128   			{
;;;1129   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1130   			}
;;;1131   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1132   
;;;1133   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1134   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1135   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1136   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1137   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1138   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1139   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1140   		
;;;1141   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1142   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1143   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1144   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1145   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1146   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1147   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1148   
;;;1149   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1150   		bat_hndl_i_temp=ke_drv_i_avg;
000e94  4cc2              LDR      r4,|L1.4512|
000e96  b2c9              UXTB     r1,r1                 ;1118
000e98  3c7c              SUBS     r4,r4,#0x7c
000e9a  7371              STRB     r1,[r6,#0xd]          ;1118
000e9c  290a              CMP      r1,#0xa               ;1118
000e9e  d967              BLS      |L1.3952|
000ea0  7375              STRB     r5,[r6,#0xd]          ;1120
000ea2  7bb1              LDRB     r1,[r6,#0xe]          ;1122  ; i_bat_buff_cnt
000ea4  f1010101          ADD      r1,r1,#1              ;1122
000ea8  b2c9              UXTB     r1,r1                 ;1122
000eaa  73b1              STRB     r1,[r6,#0xe]          ;1122
000eac  2906              CMP      r1,#6                 ;1123
000eae  d300              BCC      |L1.3762|
000eb0  73b5              STRB     r5,[r6,#0xe]          ;1123
                  |L1.3762|
000eb2  7bb1              LDRB     r1,[r6,#0xe]          ;1124  ; i_bat_buff_cnt
000eb4  6091              STR      r1,[r2,#8]            ;1124  ; bat_hndl_plazma
000eb6  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1125
000eba  f04f0100          MOV      r1,#0                 ;1126
000ebe  4608              MOV      r0,r1                 ;1127
                  |L1.3776|
000ec0  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1129
000ec4  4461              ADD      r1,r1,r12             ;1129
000ec6  b209              SXTH     r1,r1                 ;1129
000ec8  f1000001          ADD      r0,r0,#1              ;1127
000ecc  b2c0              UXTB     r0,r0                 ;1127
000ece  2806              CMP      r0,#6                 ;1127
000ed0  d3f6              BCC      |L1.3776|
000ed2  f04f0006          MOV      r0,#6                 ;1131
000ed6  fb91f0f0          SDIV     r0,r1,r0              ;1131
000eda  b201              SXTH     r1,r0                 ;1131
000edc  48b5              LDR      r0,|L1.4532|
000ede  f8df82d0          LDR      r8,|L1.4528|
000ee2  8800              LDRH     r0,[r0,#0]            ;1133  ; BAT_C_POINT_1_6
000ee4  f1a8081c          SUB      r8,r8,#0x1c           ;1133
000ee8  eb000040          ADD      r0,r0,r0,LSL #1       ;1133
000eec  ea4f0040          LSL      r0,r0,#1              ;1133
000ef0  f8a80000          STRH     r0,[r8,#0]            ;1133
000ef4  48b0              LDR      r0,|L1.4536|
000ef6  8800              LDRH     r0,[r0,#0]            ;1134  ; BAT_C_POINT_1_2
000ef8  ea4f0040          LSL      r0,r0,#1              ;1134
000efc  f8a80002          STRH     r0,[r8,#2]            ;1134
000f00  48ae              LDR      r0,|L1.4540|
000f02  8800              LDRH     r0,[r0,#0]            ;1135  ; BAT_C_POINT_1
000f04  f8a80004          STRH     r0,[r8,#4]            ;1135
000f08  48ad              LDR      r0,|L1.4544|
000f0a  f04f0303          MOV      r3,#3                 ;1136
000f0e  f9b00000          LDRSH    r0,[r0,#0]            ;1136  ; BAT_C_POINT_3
000f12  fb90f0f3          SDIV     r0,r0,r3              ;1136
000f16  f8a80006          STRH     r0,[r8,#6]            ;1136
000f1a  48aa              LDR      r0,|L1.4548|
000f1c  f04f0305          MOV      r3,#5                 ;1137
000f20  f9b00000          LDRSH    r0,[r0,#0]            ;1137  ; BAT_C_POINT_5
000f24  fb90f0f3          SDIV     r0,r0,r3              ;1137
000f28  f8a80008          STRH     r0,[r8,#8]            ;1137
000f2c  48a6              LDR      r0,|L1.4552|
000f2e  f9b00000          LDRSH    r0,[r0,#0]            ;1138  ; BAT_C_POINT_10
000f32  fb90f0f7          SDIV     r0,r0,r7              ;1138
000f36  f8a8000a          STRH     r0,[r8,#0xa]          ;1138
000f3a  48a4              LDR      r0,|L1.4556|
000f3c  f04f0314          MOV      r3,#0x14              ;1139
000f40  f9b00000          LDRSH    r0,[r0,#0]            ;1139  ; BAT_C_POINT_20
000f44  fb90f0f3          SDIV     r0,r0,r3              ;1139
000f48  f8a8000c          STRH     r0,[r8,#0xc]          ;1139
000f4c  48a0              LDR      r0,|L1.4560|
000f4e  f108090e          ADD      r9,r8,#0xe            ;1141
000f52  f9b07000          LDRSH    r7,[r0,#0]            ;1141  ; BAT_U_END_1_6
000f56  f8a97000          STRH     r7,[r9,#0]            ;1141
000f5a  489e              LDR      r0,|L1.4564|
000f5c  8800              LDRH     r0,[r0,#0]            ;1142  ; BAT_U_END_1_2
000f5e  f8a90002          STRH     r0,[r9,#2]            ;1142
000f62  489d              LDR      r0,|L1.4568|
000f64  8800              LDRH     r0,[r0,#0]            ;1143  ; BAT_U_END_1
000f66  f8a90004          STRH     r0,[r9,#4]            ;1143
000f6a  489c              LDR      r0,|L1.4572|
000f6c  e001              B        |L1.3954|
                  |L1.3950|
000f6e  e0ea              B        |L1.4422|
                  |L1.3952|
000f70  e061              B        |L1.4150|
                  |L1.3954|
000f72  8800              LDRH     r0,[r0,#0]            ;1144  ; BAT_U_END_3
000f74  f8a90006          STRH     r0,[r9,#6]            ;1144
000f78  4899              LDR      r0,|L1.4576|
000f7a  8800              LDRH     r0,[r0,#0]            ;1145  ; BAT_U_END_5
000f7c  f8a90008          STRH     r0,[r9,#8]            ;1145
000f80  4898              LDR      r0,|L1.4580|
000f82  8800              LDRH     r0,[r0,#0]            ;1146  ; BAT_U_END_10
000f84  f8a9000a          STRH     r0,[r9,#0xa]          ;1146
000f88  4897              LDR      r0,|L1.4584|
000f8a  f9b0c000          LDRSH    r12,[r0,#0]           ;1147  ; BAT_U_END_20
000f8e  f8a9c00c          STRH     r12,[r9,#0xc]         ;1147
000f92  6051              STR      r1,[r2,#4]            ;1149  ; bat_hndl_plazma
000f94  81a1              STRH     r1,[r4,#0xc]
;;;1151   		
;;;1152   		for(i=0;i<7;i++)
000f96  f04f0000          MOV      r0,#0
                  |L1.3994|
;;;1153   			{
;;;1154   			if(bat_hndl_i_temp>=I_from_t_table[i])
000f9a  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000f9e  428b              CMP      r3,r1
000fa0  dd04              BLE      |L1.4012|
000fa2  f1000001          ADD      r0,r0,#1              ;1152
000fa6  b2c0              UXTB     r0,r0                 ;1152
000fa8  2807              CMP      r0,#7                 ;1152
000faa  d3f6              BCC      |L1.3994|
                  |L1.4012|
;;;1155   				{
;;;1156   				break;
;;;1157   				}
;;;1158   			}
;;;1159   
;;;1160   		bat_hndl_plazma[0]=i;
000fac  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000fae  f10d0a04          ADD      r10,sp,#4             ;1093
;;;1161   
;;;1162   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000fb2  b1c8              CBZ      r0,|L1.4072|
;;;1163   		 else if((i>=1)&&(i<7))
000fb4  1e42              SUBS     r2,r0,#1
000fb6  2a06              CMP      r2,#6
000fb8  d219              BCS      |L1.4078|
;;;1164   		 	{
;;;1165   			short i1,i2;
;;;1166   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000fba  f8383012          LDRH     r3,[r8,r2,LSL #1]
000fbe  eba30101          SUB      r1,r3,r1
000fc2  b209              SXTH     r1,r1
;;;1167   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000fc4  f8388010          LDRH     r8,[r8,r0,LSL #1]
000fc8  eba30308          SUB      r3,r3,r8
000fcc  b21b              SXTH     r3,r3
;;;1168   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000fce  f85a8020          LDR      r8,[r10,r0,LSL #2]
000fd2  f85a2022          LDR      r2,[r10,r2,LSL #2]
000fd6  eba80802          SUB      r8,r8,r2
;;;1169   			bat_hndl_t_razr_ke*=(long)i1;
000fda  fb08f801          MUL      r8,r8,r1
;;;1170   			bat_hndl_t_razr_ke/=(long)i2;
000fde  fb98f1f3          SDIV     r1,r8,r3
;;;1171   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000fe2  4411              ADD      r1,r1,r2
000fe4  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
;;;1172   			}
000fe6  e006              B        |L1.4086|
                  |L1.4072|
000fe8  9901              LDR      r1,[sp,#4]            ;1162
000fea  6521              STR      r1,[r4,#0x50]         ;1162  ; bat_hndl_t_razr_ke
000fec  e003              B        |L1.4086|
                  |L1.4078|
;;;1173   		else if(i>=7)
000fee  2807              CMP      r0,#7
000ff0  d301              BCC      |L1.4086|
;;;1174   			{
;;;1175   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
000ff2  9907              LDR      r1,[sp,#0x1c]
000ff4  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
                  |L1.4086|
;;;1176   			}
;;;1177   
;;;1178   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
000ff6  b1c0              CBZ      r0,|L1.4138|
;;;1179   		 else if((i>=1)&&(i<7))
000ff8  1e41              SUBS     r1,r0,#1
000ffa  2906              CMP      r1,#6
000ffc  d217              BCS      |L1.4142|
;;;1180   		 	{
;;;1181   			long u1,tempL;
;;;1182   
;;;1183   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
000ffe  f9393010          LDRSH    r3,[r9,r0,LSL #1]
001002  f9392011          LDRSH    r2,[r9,r1,LSL #1]
001006  eba30302          SUB      r3,r3,r2
;;;1184   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
00100a  f85a1021          LDR      r1,[r10,r1,LSL #2]
00100e  6d27              LDR      r7,[r4,#0x50]  ; bat_hndl_t_razr_ke
001010  eba70701          SUB      r7,r7,r1
;;;1185   			tempL*=u1;
001014  fb03f307          MUL      r3,r3,r7
;;;1186   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
001018  f85a0020          LDR      r0,[r10,r0,LSL #2]
00101c  eba00001          SUB      r0,r0,r1
;;;1187   			tempL/=u1;
001020  fb93f0f0          SDIV     r0,r3,r0
;;;1188   			tempL+=(long)U_end_from_i_table[i-1];
001024  4410              ADD      r0,r0,r2
;;;1189   			bat_hndl_u_end=(short)tempL;
001026  81e0              STRH     r0,[r4,#0xe]
;;;1190   			}
001028  e005              B        |L1.4150|
                  |L1.4138|
00102a  81e7              STRH     r7,[r4,#0xe]          ;1178
00102c  e003              B        |L1.4150|
                  |L1.4142|
;;;1191   		else if(i>=7)
00102e  2807              CMP      r0,#7
001030  d301              BCC      |L1.4150|
;;;1192   			{
;;;1193   			bat_hndl_u_end=U_end_from_i_table[6];
001032  f8a4c00e          STRH     r12,[r4,#0xe]
                  |L1.4150|
;;;1194   			}
;;;1195   
;;;1196   		}
;;;1197   
;;;1198   
;;;1199   
;;;1200   	if(spc_phase==0)
001036  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1201   		{
;;;1202   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1203   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1204   
;;;1205   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1206   	    	
;;;1207   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1208   			{
;;;1209   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1210   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
00103a  4f6c              LDR      r7,|L1.4588|
;;;1211   			}
;;;1212   
;;;1213   		bat[0]._time_min_cnt_ke++;
;;;1214   		if(bat[0]._time_min_cnt_ke>=60)
;;;1215   			{
;;;1216   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
00103c  f44f78e3          MOV      r8,#0x1c6
001040  bbe8              CBNZ     r0,|L1.4286|
001042  2314              MOVS     r3,#0x14              ;1203
001044  f04f32ff          MOV      r2,#0xffffffff        ;1203
001048  21ce              MOVS     r1,#0xce              ;1203
00104a  20cd              MOVS     r0,#0xcd              ;1203
00104c  f7fffffe          BL       mess_send
001050  f8961024          LDRB     r1,[r6,#0x24]         ;1205  ; spc_bat
001054  f8df9198          LDR      r9,|L1.4592|
001058  eb010041          ADD      r0,r1,r1,LSL #1       ;1205
00105c  eb001001          ADD      r0,r0,r1,LSL #4       ;1205
001060  eb090080          ADD      r0,r9,r0,LSL #2       ;1205
001064  f9b00008          LDRSH    r0,[r0,#8]            ;1205
001068  f7fffffe          BL       abs
00106c  f8d91018          LDR      r1,[r9,#0x18]         ;1205  ; bat
001070  4401              ADD      r1,r1,r0              ;1205
001072  f8c91018          STR      r1,[r9,#0x18]         ;1205  ; bat
001076  f64840a0          MOV      r0,#0x8ca0            ;1207
00107a  4281              CMP      r1,r0                 ;1207
00107c  db0c              BLT      |L1.4248|
00107e  eba10100          SUB      r1,r1,r0              ;1209
001082  f8c91018          STR      r1,[r9,#0x18]         ;1209  ; bat
001086  8838              LDRH     r0,[r7,#0]            ;1210  ; ADR_EE_BAT_ZAR_CNT_KE
001088  f7fffffe          BL       lc640_read_int
00108c  1c40              ADDS     r0,r0,#1              ;1210
00108e  b201              SXTH     r1,r0                 ;1210
001090  f9b70000          LDRSH    r0,[r7,#0]            ;1210  ; ADR_EE_BAT_ZAR_CNT_KE
001094  f7fffffe          BL       lc640_write_int
                  |L1.4248|
001098  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1213  ; bat
00109c  f1000001          ADD      r0,r0,#1              ;1213
0010a0  b281              UXTH     r1,r0                 ;1213
0010a2  f8a9104a          STRH     r1,[r9,#0x4a]         ;1213
0010a6  293c              CMP      r1,#0x3c              ;1214
0010a8  d309              BCC      |L1.4286|
0010aa  4640              MOV      r0,r8
0010ac  f7fffffe          BL       lc640_read_int
0010b0  1c40              ADDS     r0,r0,#1
0010b2  b201              SXTH     r1,r0
0010b4  4640              MOV      r0,r8
0010b6  f7fffffe          BL       lc640_write_int
;;;1217   			bat[0]._time_min_cnt_ke=0;
0010ba  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.4286|
;;;1218   			}
;;;1219   		}
;;;1220   
;;;1221   	else if(spc_phase==1)
;;;1222   		{
;;;1223   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1224   		}
;;;1225   
;;;1226   	if(out_U<bat_hndl_u_end)
0010be  484d              LDR      r0,|L1.4596|
0010c0  f9b4100e          LDRSH    r1,[r4,#0xe]  ; bat_hndl_u_end
0010c4  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0010c8  4288              CMP      r0,r1
0010ca  da3a              BGE      |L1.4418|
;;;1227   		{
;;;1228   		cnt_end_ke++;
0010cc  f8b6006a          LDRH     r0,[r6,#0x6a]  ; cnt_end_ke
0010d0  f1000001          ADD      r0,r0,#1
0010d4  b200              SXTH     r0,r0
0010d6  f8a6006a          STRH     r0,[r6,#0x6a]
;;;1229   		if(cnt_end_ke>=30)
0010da  281e              CMP      r0,#0x1e
0010dc  db33              BLT      |L1.4422|
;;;1230   			{
;;;1231   			
;;;1232   			if((spc_stat==spcKE)&&(spc_phase==0))
0010de  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
0010e2  2801              CMP      r0,#1
0010e4  d121              BNE      |L1.4394|
0010e6  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
0010ea  b9f0              CBNZ     r0,|L1.4394|
;;;1233   				{
;;;1234   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
0010ec  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0010ee  f7fffffe          BL       lc640_read_int
0010f2  b201              SXTH     r1,r0
0010f4  4840              LDR      r0,|L1.4600|
0010f6  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
0010fa  f7fffffe          BL       lc640_write_int
;;;1235   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
0010fe  4640              MOV      r0,r8
001100  f7fffffe          BL       lc640_read_int
001104  b284              UXTH     r4,r0
001106  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001108  f7fffffe          BL       lc640_read_int
00110c  b281              UXTH     r1,r0
00110e  4622              MOV      r2,r4
001110  2000              MOVS     r0,#0
001112  f7fffffe          BL       ke_zvu_mem_hndl
;;;1236   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
001116  4839              LDR      r0,|L1.4604|
001118  2100              MOVS     r1,#0
00111a  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
00111e  f7fffffe          BL       lc640_write_int
;;;1237   				cntrl_stat=50;
001122  f04f0032          MOV      r0,#0x32
001126  8670              STRH     r0,[r6,#0x32]
;;;1238   				cntrl_stat_old=50;
001128  86b0              STRH     r0,[r6,#0x34]
                  |L1.4394|
;;;1239   				}
;;;1240   
;;;1241   			spc_stat=spcOFF;
00112a  f8865023          STRB     r5,[r6,#0x23]
;;;1242   			__ee_spc_stat=spcOFF;
00112e  f8a6506e          STRH     r5,[r6,#0x6e]
;;;1243   			lc640_write_int(EE_SPC_STAT,spcOFF);
001132  b008              ADD      sp,sp,#0x20
001134  2100              MOVS     r1,#0
001136  e8bd47f0          POP      {r4-r10,lr}
00113a  f240209a          MOV      r0,#0x29a
00113e  f7ffbffe          B.W      lc640_write_int
                  |L1.4418|
;;;1244   
;;;1245   			}
;;;1246   		}
;;;1247   	else cnt_end_ke=0;
001142  f8a6506a          STRH     r5,[r6,#0x6a]
                  |L1.4422|
;;;1248   
;;;1249   	}
;;;1250   			
;;;1251   }
001146  b008              ADD      sp,sp,#0x20
001148  e8bd87f0          POP      {r4-r10,pc}
;;;1252   #endif
                          ENDP

                  vz_start PROC
;;;1322   //-----------------------------------------------
;;;1323   char vz_start(char hour)
00114c  b570              PUSH     {r4-r6,lr}
;;;1324   {          
00114e  4605              MOV      r5,r0
;;;1325   char out;
;;;1326   out=0;
001150  f04f0600          MOV      r6,#0
;;;1327   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
001154  4c12              LDR      r4,|L1.4512|
001156  f1a404fc          SUB      r4,r4,#0xfc
00115a  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00115e  b9e0              CBNZ     r0,|L1.4506|
001160  4827              LDR      r0,|L1.4608|
001162  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001164  2801              CMP      r0,#1
001166  d066              BEQ      |L1.4662|
;;;1328   	{
;;;1329   	spc_stat=spcVZ;
001168  f1040430          ADD      r4,r4,#0x30
00116c  f04f0102          MOV      r1,#2
001170  f8041c0d          STRB     r1,[r4,#-0xd]
;;;1330   	__ee_spc_stat=spcVZ; 
001174  87e1              STRH     r1,[r4,#0x3e]
;;;1331   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001176  f240209a          MOV      r0,#0x29a
00117a  f7fffffe          BL       lc640_write_int
;;;1332   	vz_cnt_h=hour;
00117e  86e5              STRH     r5,[r4,#0x36]
;;;1333   	__ee_vz_cnt=hour*60;
001180  ebc51005          RSB      r0,r5,r5,LSL #4
001184  ea4f0080          LSL      r0,r0,#2
001188  87a0              STRH     r0,[r4,#0x3c]
00118a  f1a40430          SUB      r4,r4,#0x30
;;;1334   	if(hour==0)__ee_vz_cnt=30;
00118e  b91d              CBNZ     r5,|L1.4504|
001190  f04f001e          MOV      r0,#0x1e
001194  f8a4006c          STRH     r0,[r4,#0x6c]
                  |L1.4504|
;;;1335   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001198  e034              B        |L1.4612|
                  |L1.4506|
00119a  e04c              B        |L1.4662|
                  |L1.4508|
                          DCD      0x40024020
                  |L1.4512|
                          DCD      ||area_number.25||+0xfc
                  |L1.4516|
                          DCD      ||area_number.19||+0x4
                  |L1.4520|
                          DCD      ||.bss||
                  |L1.4524|
                          DCD      Ib_ips_termokompensat
                  |L1.4528|
                          DCD      ||.bss||+0x468
                  |L1.4532|
                          DCD      BAT_C_POINT_1_6
                  |L1.4536|
                          DCD      BAT_C_POINT_1_2
                  |L1.4540|
                          DCD      BAT_C_POINT_1
                  |L1.4544|
                          DCD      BAT_C_POINT_3
                  |L1.4548|
                          DCD      BAT_C_POINT_5
                  |L1.4552|
                          DCD      BAT_C_POINT_10
                  |L1.4556|
                          DCD      BAT_C_POINT_20
                  |L1.4560|
                          DCD      BAT_U_END_1_6
                  |L1.4564|
                          DCD      BAT_U_END_1_2
                  |L1.4568|
                          DCD      BAT_U_END_1
                  |L1.4572|
                          DCD      BAT_U_END_3
                  |L1.4576|
                          DCD      BAT_U_END_5
                  |L1.4580|
                          DCD      BAT_U_END_10
                  |L1.4584|
                          DCD      BAT_U_END_20
                  |L1.4588|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4592|
                          DCD      bat
                  |L1.4596|
                          DCD      out_U
                  |L1.4600|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4604|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.4608|
                          DCD      speedChrgBlckStat
                  |L1.4612|
001204  f1040462          ADD      r4,r4,#0x62
001208  f44f7027          MOV      r0,#0x29c
00120c  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001210  f7fffffe          BL       lc640_write_int
;;;1336   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
001214  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001218  f44f702a          MOV      r0,#0x2a8
00121c  f7fffffe          BL       lc640_write_int
;;;1337   	vz_cnt_h_=0;
001220  f04f0000          MOV      r0,#0
001224  80e0              STRH     r0,[r4,#6]
;;;1338   	vz_cnt_s=0;
001226  8020              STRH     r0,[r4,#0]
;;;1339   	vz_cnt_s_=0;
001228  8060              STRH     r0,[r4,#2]
;;;1340   	out=1;
00122a  f04f0601          MOV      r6,#1
;;;1341   	vz_mem_hndl(1);
00122e  f04f0001          MOV      r0,#1
001232  f7fffffe          BL       vz_mem_hndl
                  |L1.4662|
;;;1342   	}
;;;1343   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1344   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1345   //plazma=out;	
;;;1346   return out;
001236  4630              MOV      r0,r6
;;;1347   }
001238  bd70              POP      {r4-r6,pc}
;;;1348   
                          ENDP

                  vz_stop PROC
;;;1349   //-----------------------------------------------
;;;1350   void vz_stop(void)
00123a  b510              PUSH     {r4,lr}
;;;1351   {
;;;1352   if(spc_stat==spcVZ)
00123c  4cff              LDR      r4,|L1.5692|
00123e  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001242  2802              CMP      r0,#2
001244  d113              BNE      |L1.4718|
;;;1353        {
;;;1354   vz_mem_hndl(vz_cnt_h);          
001246  f1040430          ADD      r4,r4,#0x30
00124a  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
00124c  f7fffffe          BL       vz_mem_hndl
;;;1355   vz_cnt_s=0;
001250  f04f0000          MOV      r0,#0
001254  8660              STRH     r0,[r4,#0x32]
;;;1356   vz_cnt_h=0;
001256  86e0              STRH     r0,[r4,#0x36]
;;;1357   vz_cnt_h_=0;
001258  8720              STRH     r0,[r4,#0x38]
;;;1358   spc_stat=spcOFF;
00125a  f8040c0d          STRB     r0,[r4,#-0xd]
;;;1359   
;;;1360   		__ee_spc_stat=spcOFF;
00125e  87e0              STRH     r0,[r4,#0x3e]
;;;1361   		lc640_write_int(EE_SPC_STAT,spcOFF);
001260  4601              MOV      r1,r0
001262  e8bd4010          POP      {r4,lr}
001266  f240209a          MOV      r0,#0x29a
00126a  f7ffbffe          B.W      lc640_write_int
                  |L1.4718|
;;;1362        }
;;;1363   
;;;1364   }
00126e  bd10              POP      {r4,pc}
;;;1365   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1367   //-----------------------------------------------
;;;1368   void amper_chas_cnt_drv(void)
001270  b510              PUSH     {r4,lr}
;;;1369   {
;;;1370   
;;;1371   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
001272  4af2              LDR      r2,|L1.5692|
001274  49f2              LDR      r1,|L1.5696|
001276  3280              ADDS     r2,r2,#0x80
001278  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00127c  6e10              LDR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
00127e  4401              ADD      r1,r1,r0
001280  6611              STR      r1,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1372   
;;;1373   if(amper_chas_cnt_drv_summ>=36000L)
001282  f64843a0          MOV      r3,#0x8ca0
;;;1374   	{
;;;1375   	amper_chas_cnt_drv_summ-=36000L;
;;;1376   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001286  f44f74e4          MOV      r4,#0x1c8
00128a  4299              CMP      r1,r3                 ;1373
00128c  db0c              BLT      |L1.4776|
00128e  eba10103          SUB      r1,r1,r3              ;1375
001292  6611              STR      r1,[r2,#0x60]         ;1375  ; amper_chas_cnt_drv_summ
001294  4620              MOV      r0,r4
001296  f7fffffe          BL       lc640_read_int
00129a  1c40              ADDS     r0,r0,#1
00129c  b201              SXTH     r1,r0
00129e  4620              MOV      r0,r4
0012a0  e8bd4010          POP      {r4,lr}
0012a4  f7ffbffe          B.W      lc640_write_int
                  |L1.4776|
;;;1377   	}
;;;1378   else if(amper_chas_cnt_drv_summ<=-36000L)
0012a8  48e6              LDR      r0,|L1.5700|
0012aa  4281              CMP      r1,r0
0012ac  dc0c              BGT      |L1.4808|
;;;1379   	{
;;;1380   	amper_chas_cnt_drv_summ+=36000L;
0012ae  eb010003          ADD      r0,r1,r3
0012b2  6610              STR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1381   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
0012b4  4620              MOV      r0,r4
0012b6  f7fffffe          BL       lc640_read_int
0012ba  1e40              SUBS     r0,r0,#1
0012bc  b201              SXTH     r1,r0
0012be  4620              MOV      r0,r4
0012c0  e8bd4010          POP      {r4,lr}
0012c4  f7ffbffe          B.W      lc640_write_int
                  |L1.4808|
;;;1382   	}
;;;1383   }
0012c8  bd10              POP      {r4,pc}
;;;1384   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1386   //-----------------------------------------------
;;;1387   void avz_next_date_hndl(void)
0012ca  b570              PUSH     {r4-r6,lr}
;;;1388   {
;;;1389   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0012cc  4cde              LDR      r4,|L1.5704|
0012ce  f8940038          LDRB     r0,[r4,#0x38]
0012d2  4dde              LDR      r5,|L1.5708|
0012d4  7829              LDRB     r1,[r5,#0]  ; AVZ
0012d6  4408              ADD      r0,r0,r1
0012d8  280c              CMP      r0,#0xc
0012da  d906              BLS      |L1.4842|
0012dc  8fa0              LDRH     r0,[r4,#0x3c]
0012de  1c40              ADDS     r0,r0,#1
0012e0  b201              SXTH     r1,r0
0012e2  20b8              MOVS     r0,#0xb8
0012e4  f7fffffe          BL       lc640_write_int
0012e8  e004              B        |L1.4852|
                  |L1.4842|
;;;1390   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
0012ea  f9b4103c          LDRSH    r1,[r4,#0x3c]
0012ee  20b8              MOVS     r0,#0xb8
0012f0  f7fffffe          BL       lc640_write_int
                  |L1.4852|
;;;1391   
;;;1392   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1393   
;;;1394   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
0012f4  f8941038          LDRB     r1,[r4,#0x38]
0012f8  7828              LDRB     r0,[r5,#0]  ; AVZ
0012fa  4401              ADD      r1,r1,r0
0012fc  290c              CMP      r1,#0xc
0012fe  d907              BLS      |L1.4880|
001300  f8941038          LDRB     r1,[r4,#0x38]
001304  380c              SUBS     r0,r0,#0xc
001306  4401              ADD      r1,r1,r0
001308  20b6              MOVS     r0,#0xb6
00130a  f7fffffe          BL       lc640_write_int
00130e  e005              B        |L1.4892|
                  |L1.4880|
;;;1395   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
001310  f8941038          LDRB     r1,[r4,#0x38]
001314  4401              ADD      r1,r1,r0
001316  20b6              MOVS     r0,#0xb6
001318  f7fffffe          BL       lc640_write_int
                  |L1.4892|
;;;1396   
;;;1397   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1398   
;;;1399   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
00131c  f894002c          LDRB     r0,[r4,#0x2c]
001320  281c              CMP      r0,#0x1c
001322  d904              BLS      |L1.4910|
001324  211c              MOVS     r1,#0x1c
001326  20b4              MOVS     r0,#0xb4
001328  f7fffffe          BL       lc640_write_int
00132c  e004              B        |L1.4920|
                  |L1.4910|
;;;1400   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
00132e  f894102c          LDRB     r1,[r4,#0x2c]
001332  20b4              MOVS     r0,#0xb4
001334  f7fffffe          BL       lc640_write_int
                  |L1.4920|
;;;1401   
;;;1402   //lc640_write_int(EE_DATE_AVZ,4);
;;;1403   
;;;1404   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
001338  f1040420          ADD      r4,r4,#0x20
00133c  7a21              LDRB     r1,[r4,#8]
00133e  f04f00ae          MOV      r0,#0xae
001342  f7fffffe          BL       lc640_write_int
;;;1405   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
001346  7921              LDRB     r1,[r4,#4]
001348  20b0              MOVS     r0,#0xb0
00134a  f7fffffe          BL       lc640_write_int
;;;1406   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
00134e  7821              LDRB     r1,[r4,#0]
001350  e8bd4070          POP      {r4-r6,lr}
001354  20b2              MOVS     r0,#0xb2
001356  f7ffbffe          B.W      lc640_write_int
;;;1407   
;;;1408   }
;;;1409   
                          ENDP

                  avz_drv PROC
;;;1410   //-----------------------------------------------
;;;1411   void avz_drv(void)                               
00135a  b510              PUSH     {r4,lr}
;;;1412   {                
;;;1413   if(AVZ!=AVZ_OFF)
00135c  48bb              LDR      r0,|L1.5708|
;;;1414   	{
;;;1415   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1416   		{
;;;1417   		bAVZ=1;
00135e  4cb7              LDR      r4,|L1.5692|
001360  7800              LDRB     r0,[r0,#0]            ;1413  ; AVZ
001362  b338              CBZ      r0,|L1.5044|
001364  48b8              LDR      r0,|L1.5704|
001366  8f82              LDRH     r2,[r0,#0x3c]         ;1415
001368  49b9              LDR      r1,|L1.5712|
00136a  8809              LDRH     r1,[r1,#0]            ;1415  ; YEAR_AVZ
00136c  428a              CMP      r2,r1                 ;1415
00136e  d121              BNE      |L1.5044|
001370  f8902038          LDRB     r2,[r0,#0x38]         ;1415
001374  49b7              LDR      r1,|L1.5716|
001376  8809              LDRH     r1,[r1,#0]            ;1415  ; MONTH_AVZ
001378  428a              CMP      r2,r1                 ;1415
00137a  d11b              BNE      |L1.5044|
00137c  f890102c          LDRB     r1,[r0,#0x2c]         ;1415
001380  4ab5              LDR      r2,|L1.5720|
001382  8812              LDRH     r2,[r2,#0]            ;1415  ; DATE_AVZ
001384  4291              CMP      r1,r2                 ;1415
001386  d115              BNE      |L1.5044|
001388  f8901028          LDRB     r1,[r0,#0x28]         ;1415
00138c  4ab3              LDR      r2,|L1.5724|
00138e  8812              LDRH     r2,[r2,#0]            ;1415  ; HOUR_AVZ
001390  4291              CMP      r1,r2                 ;1415
001392  d10f              BNE      |L1.5044|
001394  f8901024          LDRB     r1,[r0,#0x24]         ;1415
001398  4ab1              LDR      r2,|L1.5728|
00139a  8812              LDRH     r2,[r2,#0]            ;1415  ; MIN_AVZ
00139c  4291              CMP      r1,r2                 ;1415
00139e  d109              BNE      |L1.5044|
0013a0  f8900020          LDRB     r0,[r0,#0x20]         ;1415
0013a4  49af              LDR      r1,|L1.5732|
0013a6  8809              LDRH     r1,[r1,#0]            ;1415  ; SEC_AVZ
0013a8  4288              CMP      r0,r1                 ;1415
0013aa  d103              BNE      |L1.5044|
0013ac  f04f0001          MOV      r0,#1
0013b0  f8840026          STRB     r0,[r4,#0x26]
                  |L1.5044|
;;;1418   		}
;;;1419   	}
;;;1420   if(bAVZ)
0013b4  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
0013b8  2800              CMP      r0,#0
0013ba  d00d              BEQ      |L1.5080|
;;;1421   	{
;;;1422   	if(vz_start(AVZ_TIME))
0013bc  48aa              LDR      r0,|L1.5736|
0013be  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
0013c0  b2c0              UXTB     r0,r0
0013c2  f7fffffe          BL       vz_start
0013c6  2800              CMP      r0,#0
0013c8  d006              BEQ      |L1.5080|
;;;1423   		{
;;;1424   		bAVZ=0;
0013ca  f04f0000          MOV      r0,#0
0013ce  f8840026          STRB     r0,[r4,#0x26]
;;;1425   		avz_next_date_hndl();
0013d2  e8bd4010          POP      {r4,lr}
0013d6  e7fe              B        avz_next_date_hndl
                  |L1.5080|
;;;1426   		}
;;;1427   	}	
;;;1428   
;;;1429   }
0013d8  bd10              POP      {r4,pc}
;;;1430   
                          ENDP

                  vz_drv PROC
;;;1431   //-----------------------------------------------
;;;1432   void vz_drv(void)
0013da  b538              PUSH     {r3-r5,lr}
;;;1433   { 
;;;1434   if(spc_stat==spcVZ)
0013dc  4c97              LDR      r4,|L1.5692|
0013de  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0013e2  2802              CMP      r0,#2
0013e4  d11d              BNE      |L1.5154|
;;;1435   	{
;;;1436   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
0013e6  48a1              LDR      r0,|L1.5740|
0013e8  7800              LDRB     r0,[r0,#0]  ; sk_stat
0013ea  2801              CMP      r0,#1
0013ec  d01a              BEQ      |L1.5156|
0013ee  48a0              LDR      r0,|L1.5744|
0013f0  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
0013f2  2800              CMP      r0,#0
0013f4  d016              BEQ      |L1.5156|
;;;1437   		{
;;;1438   
;;;1439   	if(vz_cnt_s_<3600)
;;;1440   		{
;;;1441   		vz_cnt_s_++;
;;;1442   		if(vz_cnt_s_>=3600)
;;;1443   			{
;;;1444   			vz_cnt_s_=0;
;;;1445   			if(vz_cnt_h)
;;;1446   				{
;;;1447   				vz_cnt_h--;
;;;1448   				vz_cnt_h_++;
;;;1449   				}
;;;1450   			}
;;;1451   		}
;;;1452   
;;;1453   
;;;1454   	if(vz_cnt_s<60)
;;;1455   		{
;;;1456   		vz_cnt_s++;
;;;1457   		if(vz_cnt_s>=60)
;;;1458   			{
;;;1459   			vz_cnt_s=0;
;;;1460   			
;;;1461   			__ee_vz_cnt--;
;;;1462   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1463   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1464   				{
;;;1465   				spc_stat=spcOFF;
;;;1466   						__ee_spc_stat=spcOFF;
;;;1467   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1468   
;;;1469   //				hv_vz_stat=hvsOFF;
;;;1470   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1471   				vz_mem_hndl(0);
;;;1472   				}
;;;1473   			}
;;;1474   		}
;;;1475   		vz_error=0; 
;;;1476   		}
;;;1477   	else 
;;;1478   		{
;;;1479   		vz_error=1; 
0013f6  f04f0001          MOV      r0,#1
0013fa  7060              STRB     r0,[r4,#1]
;;;1480   		if(((LPC_RTC->SEC)%10)==0)
0013fc  489d              LDR      r0,|L1.5748|
0013fe  7800              LDRB     r0,[r0,#0]
001400  f04f010a          MOV      r1,#0xa
001404  fbb0f2f1          UDIV     r2,r0,r1
001408  fb010012          MLS      r0,r1,r2,r0
00140c  2800              CMP      r0,#0
00140e  d108              BNE      |L1.5154|
;;;1481   			{
;;;1482   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
001410  f2413088          MOV      r0,#0x1388
001414  9000              STR      r0,[sp,#0]
001416  a398              ADR      r3,|L1.5752|
001418  a29d              ADR      r2,|L1.5776|
00141a  a1a3              ADR      r1,|L1.5800|
00141c  a0a8              ADR      r0,|L1.5824|
00141e  f7fffffe          BL       show_mess
                  |L1.5154|
;;;1483   						"    ЗАБЛОКИРОВАН    ",
;;;1484   						"     НЕИСПРАВНА     ",
;;;1485   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1486   						5000);			
;;;1487   			}
;;;1488   		}
;;;1489   /*	if(vz_cnt_s_>=3)
;;;1490   		{
;;;1491   		if(sk_stat[0]==0)
;;;1492   		} */
;;;1493   
;;;1494   	}
;;;1495   
;;;1496   
;;;1497   } 
001422  bd38              POP      {r3-r5,pc}
                  |L1.5156|
001424  f8b40064          LDRH     r0,[r4,#0x64]         ;1439  ; vz_cnt_s_
001428  f44f6161          MOV      r1,#0xe10             ;1439
00142c  2500              MOVS     r5,#0                 ;1436
00142e  4288              CMP      r0,r1                 ;1439
001430  d215              BCS      |L1.5214|
001432  f1000001          ADD      r0,r0,#1              ;1441
001436  b280              UXTH     r0,r0                 ;1441
001438  f8a40064          STRH     r0,[r4,#0x64]         ;1441
00143c  4288              CMP      r0,r1                 ;1442
00143e  d30e              BCC      |L1.5214|
001440  f8a45064          STRH     r5,[r4,#0x64]         ;1444
001444  f8b40066          LDRH     r0,[r4,#0x66]         ;1445  ; vz_cnt_h
001448  b148              CBZ      r0,|L1.5214|
00144a  f1a00001          SUB      r0,r0,#1              ;1447
00144e  f8240f66          STRH     r0,[r4,#0x66]!        ;1447
001452  8860              LDRH     r0,[r4,#2]            ;1448  ; vz_cnt_h_
001454  f1000001          ADD      r0,r0,#1              ;1448
001458  8060              STRH     r0,[r4,#2]            ;1448
00145a  f1a40466          SUB      r4,r4,#0x66           ;1448
                  |L1.5214|
00145e  f8b40062          LDRH     r0,[r4,#0x62]         ;1454  ; vz_cnt_s
001462  283c              CMP      r0,#0x3c              ;1454
001464  d225              BCS      |L1.5298|
001466  f1000001          ADD      r0,r0,#1              ;1456
00146a  b280              UXTH     r0,r0                 ;1456
00146c  f8a40062          STRH     r0,[r4,#0x62]         ;1456
001470  283c              CMP      r0,#0x3c              ;1457
001472  d31e              BCC      |L1.5298|
001474  f8245f62          STRH     r5,[r4,#0x62]!        ;1459
001478  8960              LDRH     r0,[r4,#0xa]          ;1461  ; __ee_vz_cnt
00147a  f1a00001          SUB      r0,r0,#1              ;1461
00147e  b201              SXTH     r1,r0                 ;1461
001480  8161              STRH     r1,[r4,#0xa]          ;1461
001482  f44f7027          MOV      r0,#0x29c             ;1462
001486  f7fffffe          BL       lc640_write_int
00148a  8960              LDRH     r0,[r4,#0xa]          ;1463  ; __ee_vz_cnt
00148c  f1a40462          SUB      r4,r4,#0x62           ;1463
001490  b118              CBZ      r0,|L1.5274|
001492  4891              LDR      r0,|L1.5848|
001494  8800              LDRH     r0,[r0,#0]            ;1463  ; speedChrgBlckStat
001496  2801              CMP      r0,#1                 ;1463
001498  d10b              BNE      |L1.5298|
                  |L1.5274|
00149a  f8845023          STRB     r5,[r4,#0x23]         ;1465
00149e  f8a4506e          STRH     r5,[r4,#0x6e]         ;1466
0014a2  2100              MOVS     r1,#0                 ;1467
0014a4  f240209a          MOV      r0,#0x29a             ;1467
0014a8  f7fffffe          BL       lc640_write_int
0014ac  2000              MOVS     r0,#0                 ;1471
0014ae  f7fffffe          BL       vz_mem_hndl
                  |L1.5298|
0014b2  7065              STRB     r5,[r4,#1]            ;1475
0014b4  bd38              POP      {r3-r5,pc}
;;;1498   
                          ENDP

                  vz1_drv PROC
;;;1500   //драйвер уравнительного заряда
;;;1501   void vz1_drv(void)
0014b6  e92d4ff8          PUSH     {r3-r11,lr}
;;;1502   {
;;;1503   if(volt_region_cnt)volt_region_cnt--;
0014ba  f8df8180          LDR      r8,|L1.5692|
0014be  f9b8007c          LDRSH    r0,[r8,#0x7c]  ; volt_region_cnt
0014c2  b118              CBZ      r0,|L1.5324|
0014c4  f1a00001          SUB      r0,r0,#1
0014c8  f8a8007c          STRH     r0,[r8,#0x7c]
                  |L1.5324|
;;;1504   if(vz1_stat==vz1sOFF)
0014cc  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0014d0  b928              CBNZ     r0,|L1.5342|
;;;1505   	{
;;;1506   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014d2  2314              MOVS     r3,#0x14
0014d4  2200              MOVS     r2,#0
0014d6  2164              MOVS     r1,#0x64
0014d8  20d2              MOVS     r0,#0xd2
0014da  f7fffffe          BL       mess_send
                  |L1.5342|
;;;1507   	}
;;;1508   if(vz1_stat==vz1sSTEP1)
0014de  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1509   	{
;;;1510   	if(vz1_stat_old!=vz1_stat)
;;;1511   		{
;;;1512   		vz1_stat_cnt=5;
;;;1513   		}
;;;1514   	if(vz1_stat_cnt)
;;;1515   		{
;;;1516   		vz1_stat_cnt--;
;;;1517   		if(vz1_stat_cnt==0)
;;;1518   			{
;;;1519   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1520   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1521   			}
;;;1522   		}
;;;1523   	if(sk_stat[0]==1)
0014e2  4d62              LDR      r5,|L1.5740|
0014e4  f44f7bc9          MOV      r11,#0x192            ;1520
0014e8  2801              CMP      r0,#1                 ;1508
0014ea  d139              BNE      |L1.5472|
0014ec  f8980006          LDRB     r0,[r8,#6]            ;1510  ; vz1_stat_old
0014f0  2801              CMP      r0,#1                 ;1510
0014f2  d003              BEQ      |L1.5372|
0014f4  f04f0005          MOV      r0,#5                 ;1512
0014f8  f8a8007a          STRH     r0,[r8,#0x7a]         ;1512
                  |L1.5372|
0014fc  f9b8007a          LDRSH    r0,[r8,#0x7a]         ;1514  ; vz1_stat_cnt
001500  b168              CBZ      r0,|L1.5406|
001502  f1a00001          SUB      r0,r0,#1              ;1516
001506  b200              SXTH     r0,r0                 ;1516
001508  f8a8007a          STRH     r0,[r8,#0x7a]         ;1516
00150c  b938              CBNZ     r0,|L1.5406|
00150e  f04f000b          MOV      r0,#0xb               ;1519
001512  f8880005          STRB     r0,[r8,#5]            ;1519
001516  4601              MOV      r1,r0                 ;1520
001518  4658              MOV      r0,r11                ;1520
00151a  f7fffffe          BL       lc640_write
                  |L1.5406|
00151e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001520  2801              CMP      r0,#1
001522  d117              BNE      |L1.5460|
;;;1524   		{
;;;1525   		vz1_stat=vz1sSTEP2;
001524  f04f0002          MOV      r0,#2
001528  f8880005          STRB     r0,[r8,#5]
;;;1526   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
00152c  4601              MOV      r1,r0
00152e  4658              MOV      r0,r11
001530  f7fffffe          BL       lc640_write
;;;1527   		tree_up(iVZ1_STEP2_2,1,0,0);
001534  2300              MOVS     r3,#0
001536  461a              MOV      r2,r3
001538  2101              MOVS     r1,#1
00153a  20e1              MOVS     r0,#0xe1
00153c  f7fffffe          BL       tree_up
;;;1528   		tree_up(iVZ1_STEP2_1,0,0,0);
001540  2300              MOVS     r3,#0
001542  461a              MOV      r2,r3
001544  4619              MOV      r1,r3
001546  20e0              MOVS     r0,#0xe0
001548  f7fffffe          BL       tree_up
;;;1529   		ret(1200);
00154c  f44f6096          MOV      r0,#0x4b0
001550  f7fffffe          BL       ||ret||
                  |L1.5460|
;;;1530   		}
;;;1531   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001554  2314              MOVS     r3,#0x14
001556  2200              MOVS     r2,#0
001558  2164              MOVS     r1,#0x64
00155a  20d2              MOVS     r0,#0xd2
00155c  f7fffffe          BL       mess_send
                  |L1.5472|
;;;1532   	}
;;;1533   
;;;1534   if(vz1_stat==vz1sSTEP2)
001560  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1535   	{
;;;1536   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1537   		{
;;;1538   		vz1_stat_cnt=15;
001564  f04f090f          MOV      r9,#0xf
001568  2802              CMP      r0,#2                 ;1534
00156a  d118              BNE      |L1.5534|
00156c  f8980006          LDRB     r0,[r8,#6]            ;1536  ; vz1_stat_old
001570  2802              CMP      r0,#2                 ;1536
001572  d102              BNE      |L1.5498|
001574  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1536  ; vz1_stat_cnt
001578  b908              CBNZ     r0,|L1.5502|
                  |L1.5498|
00157a  f8a8907a          STRH     r9,[r8,#0x7a]
                  |L1.5502|
;;;1539   		}
;;;1540   	vz1_stat_cnt--;
00157e  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001582  f1a00001          SUB      r0,r0,#1
001586  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1541   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00158a  f04f0314          MOV      r3,#0x14
00158e  f04f0200          MOV      r2,#0
001592  f04f0164          MOV      r1,#0x64
001596  f04f00d2          MOV      r0,#0xd2
00159a  f7fffffe          BL       mess_send
                  |L1.5534|
;;;1542   	}
;;;1543   
;;;1544   if(vz1_stat==vz1sSTEP3)
00159e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1545   	{
;;;1546   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1547   		{
;;;1548   		vz1_stat_cnt=10;
0015a2  240a              MOVS     r4,#0xa
0015a4  2600              MOVS     r6,#0                 ;1503
0015a6  f04f0a01          MOV      r10,#1                ;1504
;;;1549   
;;;1550   		}
;;;1551   	vz1_stat_cnt--;
;;;1552   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1553   		{
;;;1554   		show_mess(	"     ВКЛЮЧИТЕ       ",
0015aa  f2413788          MOV      r7,#0x1388
0015ae  2803              CMP      r0,#3                 ;1544
0015b0  d131              BNE      |L1.5654|
0015b2  f8980006          LDRB     r0,[r8,#6]            ;1546  ; vz1_stat_old
0015b6  2803              CMP      r0,#3                 ;1546
0015b8  d102              BNE      |L1.5568|
0015ba  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1546  ; vz1_stat_cnt
0015be  b908              CBNZ     r0,|L1.5572|
                  |L1.5568|
0015c0  f8a8407a          STRH     r4,[r8,#0x7a]         ;1548
                  |L1.5572|
0015c4  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1551  ; vz1_stat_cnt
0015c8  f1a00001          SUB      r0,r0,#1              ;1551
0015cc  b200              SXTH     r0,r0                 ;1551
0015ce  f8a8007a          STRH     r0,[r8,#0x7a]         ;1551
0015d2  280a              CMP      r0,#0xa               ;1552
0015d4  d001              BEQ      |L1.5594|
0015d6  2809              CMP      r0,#9                 ;1552
0015d8  d106              BNE      |L1.5608|
                  |L1.5594|
0015da  a340              ADR      r3,|L1.5852|
0015dc  a245              ADR      r2,|L1.5876|
0015de  a14b              ADR      r1,|L1.5900|
0015e0  a050              ADR      r0,|L1.5924|
0015e2  9700              STR      r7,[sp,#0]
0015e4  f7fffffe          BL       show_mess
                  |L1.5608|
;;;1555   					"      ТУМБЛЕР       ",
;;;1556   					"     ВЫСОКОГО       ",
;;;1557   					"    НАПРЯЖЕНИЯ      ",
;;;1558   					5000);
;;;1559   		}
;;;1560   	if(sk_stat[1]==1)
0015e8  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015ea  2801              CMP      r0,#1
0015ec  d10d              BNE      |L1.5642|
;;;1561   		{
;;;1562   		vz1_stat=vz1sWRK;
0015ee  f8884005          STRB     r4,[r8,#5]
;;;1563   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0015f2  210a              MOVS     r1,#0xa
0015f4  4658              MOV      r0,r11
0015f6  f7fffffe          BL       lc640_write
;;;1564   		volt_region=1;
0015fa  f888a02f          STRB     r10,[r8,#0x2f]
;;;1565   		cntrl_stat=0;
0015fe  f8a86032          STRH     r6,[r8,#0x32]
;;;1566   		cntrl_stat_new=0;
001602  f8a86048          STRH     r6,[r8,#0x48]
;;;1567   		cntrl_stat_old=0;
001606  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5642|
;;;1568   		}
;;;1569   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00160a  2314              MOVS     r3,#0x14
00160c  2200              MOVS     r2,#0
00160e  2164              MOVS     r1,#0x64
001610  20d2              MOVS     r0,#0xd2
001612  f7fffffe          BL       mess_send
                  |L1.5654|
;;;1570   	}
;;;1571   
;;;1572   if(vz1_stat==vz1sWRK)
001616  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00161a  280a              CMP      r0,#0xa
00161c  d10b              BNE      |L1.5686|
;;;1573   	{
;;;1574   	if(vz1_stat_old!=vz1_stat)
;;;1575   		{
;;;1576   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00161e  4907              LDR      r1,|L1.5692|
001620  f8980006          LDRB     r0,[r8,#6]            ;1574  ; vz1_stat_old
001624  3180              ADDS     r1,r1,#0x80
001626  280a              CMP      r0,#0xa               ;1574
001628  d006              BEQ      |L1.5688|
00162a  4844              LDR      r0,|L1.5948|
00162c  f44f6261          MOV      r2,#0xe10
001630  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
001634  e084              B        |L1.5952|
                  |L1.5686|
001636  e0f7              B        |L1.6184|
                  |L1.5688|
001638  e086              B        |L1.5960|
00163a  0000              DCW      0x0000
                  |L1.5692|
                          DCD      ||area_number.25||
                  |L1.5696|
                          DCD      Ib_ips_termokompensat
                  |L1.5700|
                          DCD      0xffff7360
                  |L1.5704|
                          DCD      0x40024000
                  |L1.5708|
                          DCD      AVZ
                  |L1.5712|
                          DCD      YEAR_AVZ
                  |L1.5716|
                          DCD      MONTH_AVZ
                  |L1.5720|
                          DCD      DATE_AVZ
                  |L1.5724|
                          DCD      HOUR_AVZ
                  |L1.5728|
                          DCD      MIN_AVZ
                  |L1.5732|
                          DCD      SEC_AVZ
                  |L1.5736|
                          DCD      AVZ_TIME
                  |L1.5740|
                          DCD      sk_stat
                  |L1.5744|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5748|
                          DCD      0x40024020
                  |L1.5752|
001678  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
00167c  c2c5cdd2
001680  c8cbdfd6
001684  c8df2121
001688  21202020
00168c  00      
00168d  00                DCB      0
00168e  00                DCB      0
00168f  00                DCB      0
                  |L1.5776|
001690  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
001694  20cdc5c8
001698  d1cfd0c0
00169c  c2cdc020
0016a0  20202020
0016a4  00      
0016a5  00                DCB      0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0016ac  c7c0c1cb
0016b0  cecac8d0
0016b4  cec2c0cd
0016b8  20      
0016b9  20202000          DCB      "   ",0
0016bd  00                DCB      0
0016be  00                DCB      0
0016bf  00                DCB      0
                  |L1.5824|
0016c0  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0016c4  c2cdc8c2
0016c8  c0ded9c8
0016cc  c920c7  
0016cf  c0d0dfc4          DCB      192,208,223,196," ",0
0016d3  2000    
0016d5  00                DCB      0
0016d6  00                DCB      0
0016d7  00                DCB      0
                  |L1.5848|
                          DCD      speedChrgBlckStat
                  |L1.5852|
0016dc  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0016e0  cdc0cfd0
0016e4  dfc6c5cd
0016e8  c8df2020
0016ec  20202020
0016f0  00      
0016f1  00                DCB      0
0016f2  00                DCB      0
0016f3  00                DCB      0
                  |L1.5876|
0016f4  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
0016f8  20c2dbd1
0016fc  cecacec3
001700  ce202020
001704  20202020
001708  00      
001709  00                DCB      0
00170a  00                DCB      0
00170b  00                DCB      0
                  |L1.5900|
00170c  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001710  2020d2d3
001714  ccc1cbc5
001718  d0202020
00171c  20202020
001720  00      
001721  00                DCB      0
001722  00                DCB      0
001723  00                DCB      0
                  |L1.5924|
001724  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001728  20c2cacb
00172c  ded7c8d2
001730  c5202020
001734  20202020
001738  00      
001739  00                DCB      0
00173a  00                DCB      0
00173b  00                DCB      0
                  |L1.5948|
                          DCD      UZ_T
                  |L1.5952|
001740  fb00f002          MUL      r0,r0,r2
001744  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1577   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1578   		vz1_up_cnt=0L;
001746  640e              STR      r6,[r1,#0x40]  ; vz1_up_cnt
                  |L1.5960|
;;;1579   
;;;1580   		}
;;;1581   	vz1_wrk_cnt--;
001748  6bc8              LDR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
00174a  f1a00001          SUB      r0,r0,#1
00174e  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1582   	vz1_up_cnt++;
001750  6c0a              LDR      r2,[r1,#0x40]  ; vz1_up_cnt
001752  f1020201          ADD      r2,r2,#1
001756  640a              STR      r2,[r1,#0x40]  ; vz1_up_cnt
;;;1583   
;;;1584   	if(vz1_wrk_cnt==0)
001758  b940              CBNZ     r0,|L1.5996|
;;;1585   		{
;;;1586   		vz1_stat=vz1sFINE;
00175a  f8889005          STRB     r9,[r8,#5]
;;;1587   		lc640_write(EE_VZ1_STAT,vz1sFINE);
00175e  210f              MOVS     r1,#0xf
001760  4658              MOV      r0,r11
001762  f7fffffe          BL       lc640_write
;;;1588   		uz_mem_hndl(0);
001766  2000              MOVS     r0,#0
001768  f7fffffe          BL       uz_mem_hndl
                  |L1.5996|
;;;1589   		}
;;;1590   	if(sk_stat[0]==0)
00176c  7828              LDRB     r0,[r5,#0]  ; sk_stat
00176e  b938              CBNZ     r0,|L1.6016|
;;;1591   		{
;;;1592   		vz1_stat=vz1sERR2;
001770  f04f000c          MOV      r0,#0xc
001774  f8880005          STRB     r0,[r8,#5]
;;;1593   		lc640_write(EE_VZ1_STAT,vz1sERR2);
001778  4601              MOV      r1,r0
00177a  4658              MOV      r0,r11
00177c  f7fffffe          BL       lc640_write
                  |L1.6016|
;;;1594   		}
;;;1595   	if(sk_stat[1]==0)
001780  7868              LDRB     r0,[r5,#1]  ; sk_stat
001782  b938              CBNZ     r0,|L1.6036|
;;;1596   		{
;;;1597   		vz1_stat=vz1sERR3;
001784  f04f000d          MOV      r0,#0xd
001788  f8880005          STRB     r0,[r8,#5]
;;;1598   		lc640_write(EE_VZ1_STAT,vz1sERR3);
00178c  4601              MOV      r1,r0
00178e  4658              MOV      r0,r11
001790  f7fffffe          BL       lc640_write
                  |L1.6036|
;;;1599   		}
;;;1600   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001794  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
001798  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
00179c  fb90f0f4          SDIV     r0,r0,r4
;;;1601   		{
;;;1602   		volt_region=0;
;;;1603   		cntrl_stat=1000;
0017a0  f44f727a          MOV      r2,#0x3e8
0017a4  4288              CMP      r0,r1                 ;1600
0017a6  dd16              BLE      |L1.6102|
0017a8  f9b83032          LDRSH    r3,[r8,#0x32]         ;1600  ; cntrl_stat
0017ac  2b14              CMP      r3,#0x14              ;1600
0017ae  dc12              BGT      |L1.6102|
0017b0  f898302f          LDRB     r3,[r8,#0x2f]         ;1600  ; volt_region
0017b4  2b01              CMP      r3,#1                 ;1600
0017b6  d10e              BNE      |L1.6102|
0017b8  f8b8307c          LDRH     r3,[r8,#0x7c]         ;1600  ; volt_region_cnt
0017bc  b95b              CBNZ     r3,|L1.6102|
0017be  f888602f          STRB     r6,[r8,#0x2f]         ;1602
0017c2  f8a82032          STRH     r2,[r8,#0x32]
;;;1604   		cntrl_stat_new=1000;
0017c6  f8a82048          STRH     r2,[r8,#0x48]
;;;1605   		cntrl_stat_old=1000;
0017ca  f8a82034          STRH     r2,[r8,#0x34]
;;;1606   		volt_region_cnt=110;
0017ce  f04f036e          MOV      r3,#0x6e
0017d2  f8a8307c          STRH     r3,[r8,#0x7c]
                  |L1.6102|
;;;1607   		}
;;;1608   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
0017d6  4288              CMP      r0,r1
0017d8  da13              BGE      |L1.6146|
0017da  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
0017de  4290              CMP      r0,r2
0017e0  db0f              BLT      |L1.6146|
0017e2  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0017e6  b960              CBNZ     r0,|L1.6146|
0017e8  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
0017ec  b948              CBNZ     r0,|L1.6146|
;;;1609   		{
;;;1610   		volt_region=1;
0017ee  f888a02f          STRB     r10,[r8,#0x2f]
;;;1611   		cntrl_stat=10;
0017f2  f8a84032          STRH     r4,[r8,#0x32]
;;;1612   		cntrl_stat_new=10;
0017f6  f8a84048          STRH     r4,[r8,#0x48]
;;;1613   		cntrl_stat_old=10;
0017fa  f8a84034          STRH     r4,[r8,#0x34]
;;;1614   		volt_region_cnt=10;
0017fe  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.6146|
;;;1615   		}
;;;1616   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001802  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001806  b110              CBZ      r0,|L1.6158|
;;;1617   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001808  2801              CMP      r0,#1
00180a  d007              BEQ      |L1.6172|
00180c  e00c              B        |L1.6184|
                  |L1.6158|
00180e  2314              MOVS     r3,#0x14              ;1616
001810  2200              MOVS     r2,#0                 ;1616
001812  2164              MOVS     r1,#0x64              ;1616
001814  20d2              MOVS     r0,#0xd2              ;1616
001816  f7fffffe          BL       mess_send
00181a  e005              B        |L1.6184|
                  |L1.6172|
00181c  2314              MOVS     r3,#0x14
00181e  2201              MOVS     r2,#1
001820  2164              MOVS     r1,#0x64
001822  20d2              MOVS     r0,#0xd2
001824  f7fffffe          BL       mess_send
                  |L1.6184|
;;;1618   	}
;;;1619   
;;;1620   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001828  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00182c  280b              CMP      r0,#0xb
00182e  d120              BNE      |L1.6258|
;;;1621   	{
;;;1622   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001830  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001834  280b              CMP      r0,#0xb
001836  d102              BNE      |L1.6206|
001838  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00183c  b908              CBNZ     r0,|L1.6210|
                  |L1.6206|
;;;1623   		{
;;;1624   		vz1_stat_cnt=10;
00183e  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6210|
;;;1625   		}
;;;1626   	vz1_stat_cnt--;
001842  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001846  f1a00001          SUB      r0,r0,#1
00184a  b200              SXTH     r0,r0
00184c  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1627   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001850  280a              CMP      r0,#0xa
001852  d001              BEQ      |L1.6232|
001854  2809              CMP      r0,#9
001856  d106              BNE      |L1.6246|
                  |L1.6232|
;;;1628   		{
;;;1629   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001858  a3ee              ADR      r3,|L1.7188|
00185a  a2f4              ADR      r2,|L1.7212|
00185c  a1f9              ADR      r1,|L1.7236|
00185e  a0ff              ADR      r0,|L1.7260|
001860  9700              STR      r7,[sp,#0]
001862  f7fffffe          BL       show_mess
                  |L1.6246|
;;;1630   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1631   					"      ВКЛЮЧЕН       ",
;;;1632   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1633   					5000);
;;;1634   		}
;;;1635   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001866  2314              MOVS     r3,#0x14
001868  2200              MOVS     r2,#0
00186a  2164              MOVS     r1,#0x64
00186c  20d2              MOVS     r0,#0xd2
00186e  f7fffffe          BL       mess_send
                  |L1.6258|
;;;1636   	}
;;;1637   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
001872  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001876  280c              CMP      r0,#0xc
001878  d12c              BNE      |L1.6356|
;;;1638   	{
;;;1639   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00187a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00187e  280c              CMP      r0,#0xc
001880  d102              BNE      |L1.6280|
001882  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001886  b908              CBNZ     r0,|L1.6284|
                  |L1.6280|
;;;1640   		{
;;;1641   		vz1_stat_cnt=10;
001888  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6284|
;;;1642   		}
;;;1643   	vz1_stat_cnt--;
00188c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001890  f1a00001          SUB      r0,r0,#1
001894  b200              SXTH     r0,r0
001896  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1644   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00189a  280a              CMP      r0,#0xa
00189c  d001              BEQ      |L1.6306|
00189e  2809              CMP      r0,#9
0018a0  d109              BNE      |L1.6326|
                  |L1.6306|
;;;1645   		{
;;;1646   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018a2  f2af232c          ADR      r3,|L1.5752|
0018a6  f2af2218          ADR      r2,|L1.5776|
0018aa  f2af2104          ADR      r1,|L1.5800|
0018ae  a0eb              ADR      r0,|L1.7260|
0018b0  9700              STR      r7,[sp,#0]
0018b2  f7fffffe          BL       show_mess
                  |L1.6326|
;;;1647   					"    ЗАБЛОКИРОВАН    ",
;;;1648   					"     НЕИСПРАВНА     ",
;;;1649   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1650   					5000);
;;;1651   		}
;;;1652   	if(sk_stat[0]==1)
0018b6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0018b8  2801              CMP      r0,#1
0018ba  d105              BNE      |L1.6344|
;;;1653   		{
;;;1654   		vz1_stat=vz1sWRK;
0018bc  f8884005          STRB     r4,[r8,#5]
;;;1655   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0018c0  210a              MOVS     r1,#0xa
0018c2  4658              MOV      r0,r11
0018c4  f7fffffe          BL       lc640_write
                  |L1.6344|
;;;1656   		}
;;;1657   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0018c8  2314              MOVS     r3,#0x14
0018ca  2200              MOVS     r2,#0
0018cc  2164              MOVS     r1,#0x64
0018ce  20d2              MOVS     r0,#0xd2
0018d0  f7fffffe          BL       mess_send
                  |L1.6356|
;;;1658   	}
;;;1659   
;;;1660   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
0018d4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018d8  280d              CMP      r0,#0xd
0018da  d129              BNE      |L1.6448|
;;;1661   	{
;;;1662   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0018dc  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0018e0  280d              CMP      r0,#0xd
0018e2  d102              BNE      |L1.6378|
0018e4  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0018e8  b908              CBNZ     r0,|L1.6382|
                  |L1.6378|
;;;1663   		{
;;;1664   		vz1_stat_cnt=10;
0018ea  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6382|
;;;1665   		}
;;;1666   	vz1_stat_cnt--;
0018ee  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0018f2  f1a00001          SUB      r0,r0,#1
0018f6  b200              SXTH     r0,r0
0018f8  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1667   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018fc  280a              CMP      r0,#0xa
0018fe  d001              BEQ      |L1.6404|
001900  2809              CMP      r0,#9
001902  d106              BNE      |L1.6418|
                  |L1.6404|
;;;1668   		{
;;;1669   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001904  a3db              ADR      r3,|L1.7284|
001906  a2e1              ADR      r2,|L1.7308|
001908  a1e6              ADR      r1,|L1.7332|
00190a  a0d4              ADR      r0,|L1.7260|
00190c  9700              STR      r7,[sp,#0]
00190e  f7fffffe          BL       show_mess
                  |L1.6418|
;;;1670   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1671   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1672   					"*   ТУМБЛЕРА!!!     ",
;;;1673   					5000);
;;;1674   		}
;;;1675   	if(sk_stat[1]==1)
001912  7868              LDRB     r0,[r5,#1]  ; sk_stat
001914  2801              CMP      r0,#1
001916  d105              BNE      |L1.6436|
;;;1676   		{
;;;1677   		vz1_stat=vz1sWRK;
001918  f8884005          STRB     r4,[r8,#5]
;;;1678   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00191c  210a              MOVS     r1,#0xa
00191e  4658              MOV      r0,r11
001920  f7fffffe          BL       lc640_write
                  |L1.6436|
;;;1679   		}
;;;1680   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001924  2314              MOVS     r3,#0x14
001926  2200              MOVS     r2,#0
001928  2164              MOVS     r1,#0x64
00192a  20d2              MOVS     r0,#0xd2
00192c  f7fffffe          BL       mess_send
                  |L1.6448|
;;;1681   	}
;;;1682   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001930  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001934  280e              CMP      r0,#0xe
001936  d12d              BNE      |L1.6548|
;;;1683   	{
;;;1684   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001938  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00193c  280e              CMP      r0,#0xe
00193e  d102              BNE      |L1.6470|
001940  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001944  b908              CBNZ     r0,|L1.6474|
                  |L1.6470|
;;;1685   		{
;;;1686   		vz1_stat_cnt=10;
001946  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6474|
;;;1687   		}
;;;1688   	vz1_stat_cnt--;
00194a  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00194e  f1a00001          SUB      r0,r0,#1
001952  b200              SXTH     r0,r0
001954  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1689   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001958  280a              CMP      r0,#0xa
00195a  d001              BEQ      |L1.6496|
00195c  2809              CMP      r0,#9
00195e  d109              BNE      |L1.6516|
                  |L1.6496|
;;;1690   		{
;;;1691   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
001960  f2af2388          ADR      r3,|L1.5852|
001964  f2af2274          ADR      r2,|L1.5876|
001968  f2af2160          ADR      r1,|L1.5900|
00196c  a0d3              ADR      r0,|L1.7356|
00196e  9700              STR      r7,[sp,#0]
001970  f7fffffe          BL       show_mess
                  |L1.6516|
;;;1692   					"      ТУМБЛЕР       ",
;;;1693   					"     ВЫСОКОГО       ",
;;;1694   					"    НАПРЯЖЕНИЯ      ",
;;;1695   					5000);
;;;1696   		}
;;;1697   	if(sk_stat[1]==0)
001974  7868              LDRB     r0,[r5,#1]  ; sk_stat
001976  b938              CBNZ     r0,|L1.6536|
;;;1698   		{
;;;1699   		vz1_stat=vz1sOFF;
001978  f8886005          STRB     r6,[r8,#5]
;;;1700   		lc640_write(EE_VZ1_STAT,vz1sOFF);
00197c  2100              MOVS     r1,#0
00197e  4658              MOV      r0,r11
001980  f7fffffe          BL       lc640_write
;;;1701   		vz_stop();
001984  f7fffffe          BL       vz_stop
                  |L1.6536|
;;;1702   
;;;1703   		}
;;;1704   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001988  2314              MOVS     r3,#0x14
00198a  2201              MOVS     r2,#1
00198c  2164              MOVS     r1,#0x64
00198e  20d2              MOVS     r0,#0xd2
001990  f7fffffe          BL       mess_send
                  |L1.6548|
;;;1705   	}
;;;1706   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
001994  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1707   	{
;;;1708   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1709   		{
;;;1710   		vz1_stat_cnt=10;
;;;1711   		}
;;;1712   	vz1_stat_cnt--;
;;;1713   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1714   		{
;;;1715   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001998  f64037b8          MOV      r7,#0xbb8
00199c  280f              CMP      r0,#0xf               ;1706
00199e  d138              BNE      |L1.6674|
0019a0  f8980006          LDRB     r0,[r8,#6]            ;1708  ; vz1_stat_old
0019a4  280f              CMP      r0,#0xf               ;1708
0019a6  d102              BNE      |L1.6574|
0019a8  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1708  ; vz1_stat_cnt
0019ac  b908              CBNZ     r0,|L1.6578|
                  |L1.6574|
0019ae  f8a8407a          STRH     r4,[r8,#0x7a]         ;1710
                  |L1.6578|
0019b2  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1712  ; vz1_stat_cnt
0019b6  f1a00001          SUB      r0,r0,#1              ;1712
0019ba  b200              SXTH     r0,r0                 ;1712
0019bc  f8a8007a          STRH     r0,[r8,#0x7a]         ;1712
0019c0  280a              CMP      r0,#0xa               ;1713
0019c2  d001              BEQ      |L1.6600|
0019c4  2809              CMP      r0,#9                 ;1713
0019c6  d106              BNE      |L1.6614|
                  |L1.6600|
0019c8  a3c2              ADR      r3,|L1.7380|
0019ca  a2c8              ADR      r2,|L1.7404|
0019cc  a1cd              ADR      r1,|L1.7428|
0019ce  a0d3              ADR      r0,|L1.7452|
0019d0  9700              STR      r7,[sp,#0]
0019d2  f7fffffe          BL       show_mess
                  |L1.6614|
;;;1716   					"       ЗАРЯД        ",
;;;1717   					"      УСПЕШНО       ",
;;;1718   					"     ЗАВЕРШЕН       ",
;;;1719   					3000);
;;;1720   		}
;;;1721   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0019d6  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
0019da  2806              CMP      r0,#6
0019dc  d001              BEQ      |L1.6626|
0019de  2805              CMP      r0,#5
0019e0  d109              BNE      |L1.6646|
                  |L1.6626|
;;;1722   		{
;;;1723   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0019e2  f2af3308          ADR      r3,|L1.5852|
0019e6  f2af22f4          ADR      r2,|L1.5876|
0019ea  f2af21e0          ADR      r1,|L1.5900|
0019ee  a0d1              ADR      r0,|L1.7476|
0019f0  9700              STR      r7,[sp,#0]
0019f2  f7fffffe          BL       show_mess
                  |L1.6646|
;;;1724   					"      ТУМБЛЕР       ",
;;;1725   					"     ВЫСОКОГО       ",
;;;1726   					"    НАПРЯЖЕНИЯ      ",
;;;1727   					3000);
;;;1728   		}
;;;1729   	if(sk_stat[1]==0)
0019f6  7868              LDRB     r0,[r5,#1]  ; sk_stat
0019f8  b928              CBNZ     r0,|L1.6662|
;;;1730   		{
;;;1731   		vz1_stat=vz1sOFF;
0019fa  f8886005          STRB     r6,[r8,#5]
;;;1732   		lc640_write(EE_VZ1_STAT,vz1sOFF);
0019fe  2100              MOVS     r1,#0
001a00  4658              MOV      r0,r11
001a02  f7fffffe          BL       lc640_write
                  |L1.6662|
;;;1733   		}
;;;1734   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a06  2314              MOVS     r3,#0x14
001a08  2200              MOVS     r2,#0
001a0a  2164              MOVS     r1,#0x64
001a0c  20d2              MOVS     r0,#0xd2
001a0e  f7fffffe          BL       mess_send
                  |L1.6674|
;;;1735   	}
;;;1736   
;;;1737   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001a12  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a16  2810              CMP      r0,#0x10
001a18  d138              BNE      |L1.6796|
;;;1738   	{
;;;1739   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a1a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a1e  2810              CMP      r0,#0x10
001a20  d102              BNE      |L1.6696|
001a22  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001a26  b908              CBNZ     r0,|L1.6700|
                  |L1.6696|
;;;1740   		{
;;;1741   		vz1_stat_cnt=10;
001a28  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6700|
;;;1742   		}
;;;1743   	vz1_stat_cnt--;
001a2c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001a30  f1a00001          SUB      r0,r0,#1
001a34  b200              SXTH     r0,r0
001a36  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1744   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a3a  280a              CMP      r0,#0xa
001a3c  d001              BEQ      |L1.6722|
001a3e  2809              CMP      r0,#9
001a40  d106              BNE      |L1.6736|
                  |L1.6722|
;;;1745   		{
;;;1746   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001a42  a3c2              ADR      r3,|L1.7500|
001a44  a2c7              ADR      r2,|L1.7524|
001a46  a1af              ADR      r1,|L1.7428|
001a48  a0b4              ADR      r0,|L1.7452|
001a4a  9700              STR      r7,[sp,#0]
001a4c  f7fffffe          BL       show_mess
                  |L1.6736|
;;;1747   					"       ЗАРЯД        ",
;;;1748   					"     ПРЕКРАЩЕН      ",
;;;1749   					"                    ",
;;;1750   					3000);
;;;1751   		}
;;;1752   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001a50  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001a54  2806              CMP      r0,#6
001a56  d001              BEQ      |L1.6748|
001a58  2805              CMP      r0,#5
001a5a  d109              BNE      |L1.6768|
                  |L1.6748|
;;;1753   		{
;;;1754   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001a5c  f2af3384          ADR      r3,|L1.5852|
001a60  f2af3270          ADR      r2,|L1.5876|
001a64  f2af315c          ADR      r1,|L1.5900|
001a68  a0b2              ADR      r0,|L1.7476|
001a6a  9700              STR      r7,[sp,#0]
001a6c  f7fffffe          BL       show_mess
                  |L1.6768|
;;;1755   					"      ТУМБЛЕР       ",
;;;1756   					"     ВЫСОКОГО       ",
;;;1757   					"    НАПРЯЖЕНИЯ      ",
;;;1758   					3000);
;;;1759   		}
;;;1760   	if(sk_stat[1]==0)
001a70  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a72  b928              CBNZ     r0,|L1.6784|
;;;1761   		{
;;;1762   		vz1_stat=vz1sOFF;
001a74  f8886005          STRB     r6,[r8,#5]
;;;1763   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a78  2100              MOVS     r1,#0
001a7a  4658              MOV      r0,r11
001a7c  f7fffffe          BL       lc640_write
                  |L1.6784|
;;;1764   		}
;;;1765   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a80  2314              MOVS     r3,#0x14
001a82  2200              MOVS     r2,#0
001a84  2164              MOVS     r1,#0x64
001a86  20d2              MOVS     r0,#0xd2
001a88  f7fffffe          BL       mess_send
                  |L1.6796|
;;;1766   	}
;;;1767   
;;;1768   vz1_stat_old=vz1_stat;
001a8c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a90  f8880006          STRB     r0,[r8,#6]
;;;1769   
;;;1770   
;;;1771   
;;;1772   }
001a94  e8bd8ff8          POP      {r3-r11,pc}
;;;1773   
                          ENDP

                  vz1_start PROC
;;;1775   //старт уравнительног заряда
;;;1776   char vz1_start(char hour)
001a98  b510              PUSH     {r4,lr}
;;;1777   {          
;;;1778   char out;
;;;1779   out=0;
001a9a  f04f0000          MOV      r0,#0
;;;1780   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001a9e  49b7              LDR      r1,|L1.7548|
001aa0  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001aa4  2a00              CMP      r2,#0
001aa6  d110              BNE      |L1.6858|
001aa8  4ab5              LDR      r2,|L1.7552|
001aaa  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001aac  2a01              CMP      r2,#1
001aae  d00c              BEQ      |L1.6858|
001ab0  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001ab2  2a00              CMP      r2,#0
001ab4  d109              BNE      |L1.6858|
;;;1781   	{
;;;1782   	if(vz1_stat==vz1sOFF)
;;;1783   		{
;;;1784   		vz1_stat=vz1sSTEP1;
001ab6  f04f0001          MOV      r0,#1
001aba  7148              STRB     r0,[r1,#5]
;;;1785   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001abc  4601              MOV      r1,r0
001abe  f44f70c9          MOV      r0,#0x192
001ac2  f7fffffe          BL       lc640_write
;;;1786   		out=1;
001ac6  f04f0001          MOV      r0,#1
                  |L1.6858|
;;;1787   		
;;;1788   		}
;;;1789   /*	spc_stat=spcVZ;
;;;1790   	__ee_spc_stat=spcVZ; 
;;;1791   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1792   	vz_cnt_h=hour;
;;;1793   	__ee_vz_cnt=hour*60;
;;;1794   	if(hour==0)__ee_vz_cnt=30;
;;;1795   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1796   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1797   	vz_cnt_h_=0;
;;;1798   	vz_cnt_s=0;
;;;1799   	vz_cnt_s_=0;
;;;1800   	
;;;1801   		*/
;;;1802   	}
;;;1803   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1804   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1805   //plazma=out;	
;;;1806   return out;
;;;1807   }
001aca  bd10              POP      {r4,pc}
;;;1808   
                          ENDP

                  vz1_stop PROC
;;;1810   //стоп уравнительног заряда
;;;1811   void vz1_stop(void)
001acc  48ab              LDR      r0,|L1.7548|
;;;1812   {
;;;1813   if(vz1_stat!=vz1sOFF)
001ace  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001ad0  2900              CMP      r1,#0
001ad2  d006              BEQ      |L1.6882|
;;;1814   	{
;;;1815   	vz1_stat=vz1sSTOP;
001ad4  f04f0110          MOV      r1,#0x10
001ad8  7141              STRB     r1,[r0,#5]
;;;1816   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001ada  f44f70c9          MOV      r0,#0x192
001ade  f7ffbffe          B.W      lc640_write
                  |L1.6882|
;;;1817   	}
;;;1818   }
001ae2  4770              BX       lr
;;;1819   
                          ENDP

                  vz2_drv PROC
;;;1821   //драйвер формовочного заряда
;;;1822   void vz2_drv(void)
001ae4  e92d4ff8          PUSH     {r3-r11,lr}
;;;1823   {
;;;1824   
;;;1825   if(vz2_stat==vz2sSTEP1)
001ae8  f8df8290          LDR      r8,|L1.7548|
;;;1826   	{
;;;1827   	if(vz2_stat_old!=vz2_stat)
;;;1828   		{
;;;1829   		vz2_stat_cnt=5;
;;;1830   		}
;;;1831   	if(vz2_stat_cnt)
;;;1832   		{
;;;1833   		vz2_stat_cnt--;
;;;1834   		if(vz2_stat_cnt==0)
;;;1835   			{
;;;1836   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1837   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1838   			}
;;;1839   		}
;;;1840   	if(sk_stat[0]==1)
001aec  4da5              LDR      r5,|L1.7556|
001aee  f8980007          LDRB     r0,[r8,#7]            ;1825  ; vz2_stat
001af2  2801              CMP      r0,#1                 ;1825
001af4  d13b              BNE      |L1.7022|
001af6  f8980008          LDRB     r0,[r8,#8]            ;1827  ; vz2_stat_old
001afa  2801              CMP      r0,#1                 ;1827
001afc  d003              BEQ      |L1.6918|
001afe  f04f0005          MOV      r0,#5                 ;1829
001b02  f8a8007e          STRH     r0,[r8,#0x7e]         ;1829
                  |L1.6918|
001b06  f9b8007e          LDRSH    r0,[r8,#0x7e]         ;1831  ; vz2_stat_cnt
001b0a  b170              CBZ      r0,|L1.6954|
001b0c  f1a00001          SUB      r0,r0,#1              ;1833
001b10  b200              SXTH     r0,r0                 ;1833
001b12  f8a8007e          STRH     r0,[r8,#0x7e]         ;1833
001b16  b940              CBNZ     r0,|L1.6954|
001b18  f04f000c          MOV      r0,#0xc               ;1836
001b1c  f8880007          STRB     r0,[r8,#7]            ;1836
001b20  4601              MOV      r1,r0                 ;1837
001b22  f44f70ca          MOV      r0,#0x194             ;1837
001b26  f7fffffe          BL       lc640_write
                  |L1.6954|
001b2a  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b2c  2801              CMP      r0,#1
001b2e  d118              BNE      |L1.7010|
;;;1841   		{
;;;1842   		vz2_stat=vz2sSTEP2;
001b30  f04f0002          MOV      r0,#2
001b34  f8880007          STRB     r0,[r8,#7]
;;;1843   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b38  4601              MOV      r1,r0
001b3a  f44f70ca          MOV      r0,#0x194
001b3e  f7fffffe          BL       lc640_write
;;;1844   		tree_up(iVZ2_STEP2_2,1,0,0);
001b42  2300              MOVS     r3,#0
001b44  461a              MOV      r2,r3
001b46  2101              MOVS     r1,#1
001b48  20e3              MOVS     r0,#0xe3
001b4a  f7fffffe          BL       tree_up
;;;1845   		tree_up(iVZ2_STEP2_1,0,0,0);
001b4e  2300              MOVS     r3,#0
001b50  461a              MOV      r2,r3
001b52  4619              MOV      r1,r3
001b54  20e2              MOVS     r0,#0xe2
001b56  f7fffffe          BL       tree_up
;;;1846   		ret(1200);
001b5a  f44f6096          MOV      r0,#0x4b0
001b5e  f7fffffe          BL       ||ret||
                  |L1.7010|
;;;1847   		}
;;;1848   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b62  2314              MOVS     r3,#0x14
001b64  2200              MOVS     r2,#0
001b66  2164              MOVS     r1,#0x64
001b68  20d2              MOVS     r0,#0xd2
001b6a  f7fffffe          BL       mess_send
                  |L1.7022|
;;;1849   	}
;;;1850   
;;;1851   if(vz2_stat==vz2sSTEP2)
001b6e  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001b72  2802              CMP      r0,#2
001b74  d11a              BNE      |L1.7084|
;;;1852   	{
;;;1853   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b76  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001b7a  2802              CMP      r0,#2
001b7c  d102              BNE      |L1.7044|
001b7e  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001b82  b918              CBNZ     r0,|L1.7052|
                  |L1.7044|
;;;1854   		{
;;;1855   		vz2_stat_cnt=15;
001b84  f04f000f          MOV      r0,#0xf
001b88  f8a8007e          STRH     r0,[r8,#0x7e]
                  |L1.7052|
;;;1856   		}
;;;1857   	vz2_stat_cnt--;
001b8c  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001b90  f1a00001          SUB      r0,r0,#1
001b94  f8a8007e          STRH     r0,[r8,#0x7e]
;;;1858   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b98  f04f0314          MOV      r3,#0x14
001b9c  f04f0200          MOV      r2,#0
001ba0  f04f0164          MOV      r1,#0x64
001ba4  f04f00d2          MOV      r0,#0xd2
001ba8  f7fffffe          BL       mess_send
                  |L1.7084|
;;;1859   	}
;;;1860   
;;;1861   if(vz2_stat==vz2sSTEP3)
001bac  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1862   	{
;;;1863   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1864   		{
;;;1865   		vz2_stat_cnt=10;
001bb0  240a              MOVS     r4,#0xa
001bb2  2600              MOVS     r6,#0
;;;1866   		cntrl_stat=0;
;;;1867   		cntrl_stat_new=0;
;;;1868   		cntrl_stat_old=0;
;;;1869   		}
;;;1870   	vz2_stat_cnt--;
;;;1871   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1872   		{
;;;1873   		show_mess(	"     ВКЛЮЧИТЕ       ",
001bb4  f2413788          MOV      r7,#0x1388
001bb8  2803              CMP      r0,#3                 ;1861
001bba  d128              BNE      |L1.7182|
001bbc  f8980008          LDRB     r0,[r8,#8]            ;1863  ; vz2_stat_old
001bc0  2803              CMP      r0,#3                 ;1863
001bc2  d102              BNE      |L1.7114|
001bc4  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1863  ; vz2_stat_cnt
001bc8  b938              CBNZ     r0,|L1.7130|
                  |L1.7114|
001bca  f8a8407e          STRH     r4,[r8,#0x7e]         ;1865
001bce  f8a86032          STRH     r6,[r8,#0x32]         ;1866
001bd2  f8a86048          STRH     r6,[r8,#0x48]         ;1867
001bd6  f8a86034          STRH     r6,[r8,#0x34]         ;1868
                  |L1.7130|
001bda  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1870  ; vz2_stat_cnt
001bde  f1a00001          SUB      r0,r0,#1              ;1870
001be2  b200              SXTH     r0,r0                 ;1870
001be4  f8a8007e          STRH     r0,[r8,#0x7e]         ;1870
001be8  280a              CMP      r0,#0xa               ;1871
001bea  d001              BEQ      |L1.7152|
001bec  2809              CMP      r0,#9                 ;1871
001bee  d10a              BNE      |L1.7174|
                  |L1.7152|
001bf0  f2af5318          ADR      r3,|L1.5852|
001bf4  f2af5204          ADR      r2,|L1.5876|
001bf8  f2af41f0          ADR      r1,|L1.5900|
001bfc  f2af40dc          ADR      r0,|L1.5924|
001c00  9700              STR      r7,[sp,#0]
001c02  f7fffffe          BL       show_mess
                  |L1.7174|
;;;1874   					"      ТУМБЛЕР       ",
;;;1875   					"     ВЫСОКОГО       ",
;;;1876   					"    НАПРЯЖЕНИЯ      ",
;;;1877   					5000);
;;;1878   		}
;;;1879   	if(sk_stat[1]==1)
001c06  7868              LDRB     r0,[r5,#1]  ; sk_stat
001c08  2801              CMP      r0,#1
001c0a  d101              BNE      |L1.7184|
;;;1880   		{
;;;1881   		vz2_stat=vz2sWRK1;
001c0c  e0bc              B        |L1.7560|
                  |L1.7182|
001c0e  e0d2              B        |L1.7606|
                  |L1.7184|
001c10  e0cb              B        |L1.7594|
001c12  0000              DCW      0x0000
                  |L1.7188|
001c14  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001c18  c720c2c5
001c1c  cdd2c8cb
001c20  dfd6c8  
001c23  c8212120          DCB      200,"!!  ",0
001c27  2000    
001c29  00                DCB      0
001c2a  00                DCB      0
001c2b  00                DCB      0
                  |L1.7212|
001c2c  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001c30  2020c2ca
001c34  cbded7c5
001c38  cd202020
001c3c  20202020
001c40  00      
001c41  00                DCB      0
001c42  00                DCB      0
001c43  00                DCB      0
                  |L1.7236|
001c44  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001c48  c520ccce
001c4c  c6c5d220
001c50  c1dbd2dc
001c54  20202020          DCB      "    ",0
001c58  00      
001c59  00                DCB      0
001c5a  00                DCB      0
001c5b  00                DCB      0
                  |L1.7260|
001c5c  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001c60  cdc8d2c5
001c64  cbdccddb
001c68  c920c7  
001c6b  c0d0dfc4          DCB      192,208,223,196," ",0
001c6f  2000    
001c71  00                DCB      0
001c72  00                DCB      0
001c73  00                DCB      0
                  |L1.7284|
001c74  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001c78  d2d3ccc1
001c7c  cbc5d0c0
001c80  21212120
001c84  20202020
001c88  00      
001c89  00                DCB      0
001c8a  00                DCB      0
001c8b  00                DCB      0
                  |L1.7308|
001c8c  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001c90  d1cbc520
001c94  c2cacbde
001c98  d7c5cd  
001c9b  c8df2020          DCB      200,223,"   ",0
001c9f  2000    
001ca1  00                DCB      0
001ca2  00                DCB      0
001ca3  00                DCB      0
                  |L1.7332|
001ca4  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001ca8  c4c5d220
001cac  cfd0cec4
001cb0  cecbc6  
001cb3  c5cd2020          DCB      197,205,"   ",0
001cb7  2000    
001cb9  00                DCB      0
001cba  00                DCB      0
001cbb  00                DCB      0
                  |L1.7356|
001cbc  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001cc0  20c2dbca
001cc4  cbded7c8
001cc8  d2c52020
001ccc  20202020
001cd0  00      
001cd1  00                DCB      0
001cd2  00                DCB      0
001cd3  00                DCB      0
                  |L1.7380|
001cd4  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001cd8  20c7c0c2
001cdc  c5d0d8c5
001ce0  cd202020
001ce4  20202020
001ce8  00      
001ce9  00                DCB      0
001cea  00                DCB      0
001ceb  00                DCB      0
                  |L1.7404|
001cec  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001cf0  2020d3d1
001cf4  cfc5d8cd
001cf8  ce202020
001cfc  20202020
001d00  00      
001d01  00                DCB      0
001d02  00                DCB      0
001d03  00                DCB      0
                  |L1.7428|
001d04  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001d08  202020c7
001d0c  c0d0dfc4
001d10  20202020
001d14  20202020
001d18  00      
001d19  00                DCB      0
001d1a  00                DCB      0
001d1b  00                DCB      0
                  |L1.7452|
001d1c  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001d20  d0c0c2cd
001d24  c8d2c5cb
001d28  dccddbc9
001d2c  20202020          DCB      "    ",0
001d30  00      
001d31  00                DCB      0
001d32  00                DCB      0
001d33  00                DCB      0
                  |L1.7476|
001d34  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001d38  20c2dbca
001d3c  cbded7c8
001d40  d2c52020
001d44  20202020
001d48  00      
001d49  00                DCB      0
001d4a  00                DCB      0
001d4b  00                DCB      0
                  |L1.7500|
001d4c  20202020          DCB      "                    ",0
001d50  20202020
001d54  20202020
001d58  20202020
001d5c  20202020
001d60  00      
001d61  00                DCB      0
001d62  00                DCB      0
001d63  00                DCB      0
                  |L1.7524|
001d64  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001d68  20cfd0c5
001d6c  cad0c0d9
001d70  c5cd2020
001d74  20202020
001d78  00      
001d79  00                DCB      0
001d7a  00                DCB      0
001d7b  00                DCB      0
                  |L1.7548|
                          DCD      ||area_number.25||
                  |L1.7552|
                          DCD      speedChrgBlckStat
                  |L1.7556|
                          DCD      sk_stat
                  |L1.7560|
001d88  f8884007          STRB     r4,[r8,#7]
;;;1882   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001d8c  210a              MOVS     r1,#0xa
001d8e  f44f70ca          MOV      r0,#0x194
001d92  f7fffffe          BL       lc640_write
;;;1883   		volt_region=1;
001d96  f04f0001          MOV      r0,#1
001d9a  f888002f          STRB     r0,[r8,#0x2f]
;;;1884   		cntrl_stat=0;
001d9e  f8a86032          STRH     r6,[r8,#0x32]
;;;1885   		cntrl_stat_new=0;
001da2  f8a86048          STRH     r6,[r8,#0x48]
;;;1886   		cntrl_stat_old=0;
001da6  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.7594|
;;;1887   		}
;;;1888   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001daa  2314              MOVS     r3,#0x14
001dac  2200              MOVS     r2,#0
001dae  2164              MOVS     r1,#0x64
001db0  20d2              MOVS     r0,#0xd2
001db2  f7fffffe          BL       mess_send
                  |L1.7606|
;;;1889   	}
;;;1890   
;;;1891   if(vz2_stat==vz2sWRK1)
001db6  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1892   	{
;;;1893   
;;;1894   	if(vz2_stat_old!=vz2_stat)
;;;1895   		{
;;;1896   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001dba  f8df9410          LDR      r9,|L1.8652|
;;;1897   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1898   		vz2_up_cnt=0L;
;;;1899   
;;;1900   		}
;;;1901   	vz2_wrk_cnt--;
;;;1902   	vz2_up_cnt++;
;;;1903   
;;;1904   	if(vz2_wrk_cnt==0)
;;;1905   		{
;;;1906   		vz2_stat=vz2sWRK2;
;;;1907   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1908   		}
;;;1909   	if(sk_stat[0]==0)
;;;1910   		{
;;;1911   		vz2_stat=vz2sERR2;
;;;1912   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1913   		}
;;;1914   	if(sk_stat[1]==0)
;;;1915   		{
;;;1916   		vz2_stat=vz2sERR3;
;;;1917   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1918   		}
;;;1919   	//if(abs(out_U-FZ_U1)<10)
;;;1920   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1921   		{
;;;1922   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1923   			{
;;;1924   			if(vz2_stat_ph2_cnt)
;;;1925   				{
;;;1926   				vz2_stat_ph2_cnt--;
;;;1927   				if(vz2_stat_ph2_cnt==0)
;;;1928   					{
;;;1929   					vz2_stat=vz2sWRK2;
;;;1930   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1931   					}
;;;1932   				}
;;;1933   			}
;;;1934   		else
;;;1935   			{
;;;1936   			vz2_stat_ph2_cnt=60;
;;;1937   			}
;;;1938   		}
;;;1939   	else
;;;1940   		{
;;;1941   		vz2_stat_ph2_cnt=60;
;;;1942   		}
;;;1943   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1944   		{
;;;1945   		volt_region=0;
;;;1946   		cntrl_stat=1000;
001dbe  f44f7b7a          MOV      r11,#0x3e8
001dc2  f04f0a0b          MOV      r10,#0xb              ;1906
001dc6  280a              CMP      r0,#0xa               ;1891
001dc8  d17e              BNE      |L1.7880|
001dca  f8980008          LDRB     r0,[r8,#8]            ;1894  ; vz2_stat_old
001dce  280a              CMP      r0,#0xa               ;1894
001dd0  d00a              BEQ      |L1.7656|
001dd2  48ff              LDR      r0,|L1.8656|
001dd4  f44f6161          MOV      r1,#0xe10             ;1896
001dd8  f9b00000          LDRSH    r0,[r0,#0]            ;1896  ; FZ_T1
001ddc  fb00f001          MUL      r0,r0,r1              ;1896
001de0  f8c90044          STR      r0,[r9,#0x44]         ;1896  ; vz2_wrk_cnt
001de4  f8c96048          STR      r6,[r9,#0x48]         ;1898  ; vz2_up_cnt
                  |L1.7656|
001de8  f8d90044          LDR      r0,[r9,#0x44]         ;1901  ; vz2_wrk_cnt
001dec  f1a00001          SUB      r0,r0,#1              ;1901
001df0  f8c90044          STR      r0,[r9,#0x44]         ;1901  ; vz2_wrk_cnt
001df4  f8d91048          LDR      r1,[r9,#0x48]         ;1902  ; vz2_up_cnt
001df8  f1010101          ADD      r1,r1,#1              ;1902
001dfc  f8c91048          STR      r1,[r9,#0x48]         ;1902  ; vz2_up_cnt
001e00  b930              CBNZ     r0,|L1.7696|
001e02  f888a007          STRB     r10,[r8,#7]           ;1906
001e06  210b              MOVS     r1,#0xb               ;1907
001e08  f44f70ca          MOV      r0,#0x194             ;1907
001e0c  f7fffffe          BL       lc640_write
                  |L1.7696|
001e10  7828              LDRB     r0,[r5,#0]            ;1909  ; sk_stat
001e12  b940              CBNZ     r0,|L1.7718|
001e14  f04f000d          MOV      r0,#0xd               ;1911
001e18  f8880007          STRB     r0,[r8,#7]            ;1911
001e1c  4601              MOV      r1,r0                 ;1912
001e1e  f44f70ca          MOV      r0,#0x194             ;1912
001e22  f7fffffe          BL       lc640_write
                  |L1.7718|
001e26  7868              LDRB     r0,[r5,#1]            ;1914  ; sk_stat
001e28  b940              CBNZ     r0,|L1.7740|
001e2a  f04f000e          MOV      r0,#0xe               ;1916
001e2e  f8880007          STRB     r0,[r8,#7]            ;1916
001e32  4601              MOV      r1,r0                 ;1917
001e34  f44f70ca          MOV      r0,#0x194             ;1917
001e38  f7fffffe          BL       lc640_write
                  |L1.7740|
001e3c  49e6              LDR      r1,|L1.8664|
001e3e  48e5              LDR      r0,|L1.8660|
001e40  233c              MOVS     r3,#0x3c              ;1936
001e42  f9b11000          LDRSH    r1,[r1,#0]            ;1920  ; FZ_U1
001e46  f9b00000          LDRSH    r0,[r0,#0]            ;1920  ; out_U
001e4a  f101021e          ADD      r2,r1,#0x1e           ;1920
001e4e  4290              CMP      r0,r2                 ;1920
001e50  da20              BGE      |L1.7828|
001e52  390a              SUBS     r1,r1,#0xa            ;1920
001e54  4288              CMP      r0,r1                 ;1920
001e56  dd1d              BLE      |L1.7828|
001e58  48e0              LDR      r0,|L1.8668|
001e5a  49e1              LDR      r1,|L1.8672|
001e5c  f9b00000          LDRSH    r0,[r0,#0]            ;1922  ; Ib_ips_termokompensat
001e60  f9b11000          LDRSH    r1,[r1,#0]            ;1922  ; FZ_ISW12
001e64  fb90f0f4          SDIV     r0,r0,r4              ;1922
001e68  4288              CMP      r0,r1                 ;1922
001e6a  da10              BGE      |L1.7822|
001e6c  f9b90000          LDRSH    r0,[r9,#0]            ;1924  ; vz2_stat_ph2_cnt
001e70  b190              CBZ      r0,|L1.7832|
001e72  f1a00001          SUB      r0,r0,#1              ;1926
001e76  b200              SXTH     r0,r0                 ;1926
001e78  f8a90000          STRH     r0,[r9,#0]            ;1926
001e7c  b960              CBNZ     r0,|L1.7832|
001e7e  f888a007          STRB     r10,[r8,#7]           ;1929
001e82  210b              MOVS     r1,#0xb               ;1930
001e84  f44f70ca          MOV      r0,#0x194             ;1930
001e88  f7fffffe          BL       lc640_write
001e8c  e004              B        |L1.7832|
                  |L1.7822|
001e8e  f8a93000          STRH     r3,[r9,#0]            ;1936
001e92  e001              B        |L1.7832|
                  |L1.7828|
001e94  f8a93000          STRH     r3,[r9,#0]            ;1941
                  |L1.7832|
001e98  f9b8004a          LDRSH    r0,[r8,#0x4a]         ;1943  ; Ibmax
001e9c  f8b8104c          LDRH     r1,[r8,#0x4c]         ;1943  ; IZMAX_
001ea0  fb90f0f4          SDIV     r0,r0,r4              ;1943
001ea4  4288              CMP      r0,r1                 ;1943
001ea6  dd18              BLE      |L1.7898|
001ea8  f9b82032          LDRSH    r2,[r8,#0x32]         ;1943  ; cntrl_stat
001eac  2a14              CMP      r2,#0x14              ;1943
001eae  dc14              BGT      |L1.7898|
001eb0  f898202f          LDRB     r2,[r8,#0x2f]         ;1943  ; volt_region
001eb4  2a01              CMP      r2,#1                 ;1943
001eb6  d110              BNE      |L1.7898|
001eb8  f8b8207c          LDRH     r2,[r8,#0x7c]         ;1943  ; volt_region_cnt
001ebc  b96a              CBNZ     r2,|L1.7898|
001ebe  f888602f          STRB     r6,[r8,#0x2f]         ;1945
001ec2  f8a8b032          STRH     r11,[r8,#0x32]
;;;1947   		cntrl_stat_new=1000;
001ec6  e000              B        |L1.7882|
                  |L1.7880|
001ec8  e032              B        |L1.7984|
                  |L1.7882|
001eca  f8a8b048          STRH     r11,[r8,#0x48]
;;;1948   		cntrl_stat_old=1000;
001ece  f8a8b034          STRH     r11,[r8,#0x34]
;;;1949   		volt_region_cnt=110;
001ed2  f04f026e          MOV      r2,#0x6e
001ed6  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.7898|
;;;1950   		}
;;;1951   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001eda  4288              CMP      r0,r1
001edc  da15              BGE      |L1.7946|
001ede  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001ee2  4558              CMP      r0,r11
001ee4  db11              BLT      |L1.7946|
001ee6  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001eea  b970              CBNZ     r0,|L1.7946|
001eec  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001ef0  b958              CBNZ     r0,|L1.7946|
;;;1952   		{
;;;1953   		volt_region=1;
001ef2  f04f0001          MOV      r0,#1
001ef6  f888002f          STRB     r0,[r8,#0x2f]
;;;1954   		cntrl_stat=10;
001efa  f8a84032          STRH     r4,[r8,#0x32]
;;;1955   		cntrl_stat_new=10;
001efe  f8a84048          STRH     r4,[r8,#0x48]
;;;1956   		cntrl_stat_old=10;
001f02  f8a84034          STRH     r4,[r8,#0x34]
;;;1957   		volt_region_cnt=10;
001f06  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.7946|
;;;1958   		}
;;;1959   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f0a  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001f0e  b110              CBZ      r0,|L1.7958|
;;;1960   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001f10  2801              CMP      r0,#1
001f12  d007              BEQ      |L1.7972|
001f14  e00c              B        |L1.7984|
                  |L1.7958|
001f16  2314              MOVS     r3,#0x14              ;1959
001f18  2200              MOVS     r2,#0                 ;1959
001f1a  2164              MOVS     r1,#0x64              ;1959
001f1c  20d2              MOVS     r0,#0xd2              ;1959
001f1e  f7fffffe          BL       mess_send
001f22  e005              B        |L1.7984|
                  |L1.7972|
001f24  2314              MOVS     r3,#0x14
001f26  2201              MOVS     r2,#1
001f28  2164              MOVS     r1,#0x64
001f2a  20d2              MOVS     r0,#0xd2
001f2c  f7fffffe          BL       mess_send
                  |L1.7984|
;;;1961   	}
;;;1962   
;;;1963   if(vz2_stat==vz2sWRK2)
001f30  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001f34  280b              CMP      r0,#0xb
001f36  d177              BNE      |L1.8232|
;;;1964   	{
;;;1965   	if(vz2_stat_old!=vz2_stat)
001f38  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001f3c  280b              CMP      r0,#0xb
001f3e  d008              BEQ      |L1.8018|
;;;1966   		{
;;;1967   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001f40  48a8              LDR      r0,|L1.8676|
001f42  f44f6161          MOV      r1,#0xe10
001f46  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001f4a  fb00f001          MUL      r0,r0,r1
001f4e  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
                  |L1.8018|
;;;1968   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1969   		//vz2_up_cnt=0L;
;;;1970   		}
;;;1971   	vz2_wrk_cnt--;
001f52  f8d90044          LDR      r0,[r9,#0x44]  ; vz2_wrk_cnt
001f56  f1a00001          SUB      r0,r0,#1
001f5a  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
;;;1972   	vz2_up_cnt++;
001f5e  f8d91048          LDR      r1,[r9,#0x48]  ; vz2_up_cnt
001f62  f1010101          ADD      r1,r1,#1
001f66  f8c91048          STR      r1,[r9,#0x48]  ; vz2_up_cnt
;;;1973   
;;;1974   	if(vz2_wrk_cnt==0)
001f6a  b958              CBNZ     r0,|L1.8068|
;;;1975   		{
;;;1976   		vz2_stat=vz2sFINE;
001f6c  f04f0012          MOV      r0,#0x12
001f70  f8880007          STRB     r0,[r8,#7]
;;;1977   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001f74  4601              MOV      r1,r0
001f76  f44f70ca          MOV      r0,#0x194
001f7a  f7fffffe          BL       lc640_write
;;;1978   		fz_mem_hndl(0);
001f7e  2000              MOVS     r0,#0
001f80  f7fffffe          BL       fz_mem_hndl
                  |L1.8068|
;;;1979   		}
;;;1980   	if(sk_stat[0]==0)
001f84  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f86  b940              CBNZ     r0,|L1.8090|
;;;1981   		{
;;;1982   		vz2_stat=vz2sERR5;
001f88  f04f0010          MOV      r0,#0x10
001f8c  f8880007          STRB     r0,[r8,#7]
;;;1983   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001f90  4601              MOV      r1,r0
001f92  f44f70ca          MOV      r0,#0x194
001f96  f7fffffe          BL       lc640_write
                  |L1.8090|
;;;1984   		}
;;;1985   	if(sk_stat[1]==0)
001f9a  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f9c  b940              CBNZ     r0,|L1.8112|
;;;1986   		{
;;;1987   		vz2_stat=vz2sERR6;
001f9e  f04f0011          MOV      r0,#0x11
001fa2  f8880007          STRB     r0,[r8,#7]
;;;1988   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001fa6  4601              MOV      r1,r0
001fa8  f44f70ca          MOV      r0,#0x194
001fac  f7fffffe          BL       lc640_write
                  |L1.8112|
;;;1989   		}
;;;1990   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001fb0  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
001fb4  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
001fb8  fb90f0f4          SDIV     r0,r0,r4
001fbc  4288              CMP      r0,r1
001fbe  dd16              BLE      |L1.8174|
001fc0  f9b82032          LDRSH    r2,[r8,#0x32]  ; cntrl_stat
001fc4  2a14              CMP      r2,#0x14
001fc6  dc12              BGT      |L1.8174|
001fc8  f898202f          LDRB     r2,[r8,#0x2f]  ; volt_region
001fcc  2a01              CMP      r2,#1
001fce  d10e              BNE      |L1.8174|
001fd0  f8b8207c          LDRH     r2,[r8,#0x7c]  ; volt_region_cnt
001fd4  b95a              CBNZ     r2,|L1.8174|
;;;1991   		{
;;;1992   		volt_region=0;
001fd6  f888602f          STRB     r6,[r8,#0x2f]
;;;1993   		cntrl_stat=1000;
001fda  f8a8b032          STRH     r11,[r8,#0x32]
;;;1994   		cntrl_stat_new=1000;
001fde  f8a8b048          STRH     r11,[r8,#0x48]
;;;1995   		cntrl_stat_old=1000;
001fe2  f8a8b034          STRH     r11,[r8,#0x34]
;;;1996   		volt_region_cnt=110;
001fe6  f04f026e          MOV      r2,#0x6e
001fea  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.8174|
;;;1997   		}
;;;1998   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001fee  4288              CMP      r0,r1
001ff0  da15              BGE      |L1.8222|
001ff2  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001ff6  4558              CMP      r0,r11
001ff8  db11              BLT      |L1.8222|
001ffa  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001ffe  b970              CBNZ     r0,|L1.8222|
002000  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
002004  b958              CBNZ     r0,|L1.8222|
;;;1999   		{
;;;2000   		volt_region=1;
002006  f04f0001          MOV      r0,#1
00200a  f888002f          STRB     r0,[r8,#0x2f]
;;;2001   		cntrl_stat=10;
00200e  f8a84032          STRH     r4,[r8,#0x32]
;;;2002   		cntrl_stat_new=10;
002012  f8a84048          STRH     r4,[r8,#0x48]
;;;2003   		cntrl_stat_old=10;
002016  f8a84034          STRH     r4,[r8,#0x34]
;;;2004   		volt_region_cnt=10;
00201a  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.8222|
;;;2005   		}
;;;2006   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00201e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
002022  b110              CBZ      r0,|L1.8234|
;;;2007   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
002024  2801              CMP      r0,#1
002026  d007              BEQ      |L1.8248|
                  |L1.8232|
002028  e00c              B        |L1.8260|
                  |L1.8234|
00202a  2314              MOVS     r3,#0x14              ;2006
00202c  2200              MOVS     r2,#0                 ;2006
00202e  2164              MOVS     r1,#0x64              ;2006
002030  20d2              MOVS     r0,#0xd2              ;2006
002032  f7fffffe          BL       mess_send
002036  e005              B        |L1.8260|
                  |L1.8248|
002038  2314              MOVS     r3,#0x14
00203a  2201              MOVS     r2,#1
00203c  2164              MOVS     r1,#0x64
00203e  20d2              MOVS     r0,#0xd2
002040  f7fffffe          BL       mess_send
                  |L1.8260|
;;;2008   	}
;;;2009   
;;;2010   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
002044  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002048  280c              CMP      r0,#0xc
00204a  d123              BNE      |L1.8340|
;;;2011   	{
;;;2012   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00204c  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002050  280c              CMP      r0,#0xc
002052  d102              BNE      |L1.8282|
002054  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002058  b908              CBNZ     r0,|L1.8286|
                  |L1.8282|
;;;2013   		{
;;;2014   		vz2_stat_cnt=10;
00205a  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8286|
;;;2015   		}
;;;2016   	vz2_stat_cnt--;
00205e  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002062  f1a00001          SUB      r0,r0,#1
002066  b200              SXTH     r0,r0
002068  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2017   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00206c  280a              CMP      r0,#0xa
00206e  d001              BEQ      |L1.8308|
002070  2809              CMP      r0,#9
002072  d109              BNE      |L1.8328|
                  |L1.8308|
;;;2018   		{
;;;2019   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002074  f2af4364          ADR      r3,|L1.7188|
002078  f2af4250          ADR      r2,|L1.7212|
00207c  f2af413c          ADR      r1,|L1.7236|
002080  a059              ADR      r0,|L1.8680|
002082  9700              STR      r7,[sp,#0]
002084  f7fffffe          BL       show_mess
                  |L1.8328|
;;;2020   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2021   					"      ВКЛЮЧЕН       ",
;;;2022   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2023   					5000);
;;;2024   		}
;;;2025   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002088  2314              MOVS     r3,#0x14
00208a  2200              MOVS     r2,#0
00208c  2164              MOVS     r1,#0x64
00208e  20d2              MOVS     r0,#0xd2
002090  f7fffffe          BL       mess_send
                  |L1.8340|
;;;2026   	}
;;;2027   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
002094  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002098  280d              CMP      r0,#0xd
00209a  d12d              BNE      |L1.8440|
;;;2028   	{
;;;2029   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00209c  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0020a0  280d              CMP      r0,#0xd
0020a2  d102              BNE      |L1.8362|
0020a4  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020a8  b908              CBNZ     r0,|L1.8366|
                  |L1.8362|
;;;2030   		{
;;;2031   		vz2_stat_cnt=10;
0020aa  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8366|
;;;2032   		}
;;;2033   	vz2_stat_cnt--;
0020ae  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020b2  f1a00001          SUB      r0,r0,#1
0020b6  b200              SXTH     r0,r0
0020b8  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2034   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020bc  280a              CMP      r0,#0xa
0020be  d001              BEQ      |L1.8388|
0020c0  2809              CMP      r0,#9
0020c2  d109              BNE      |L1.8408|
                  |L1.8388|
;;;2035   		{
;;;2036   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0020c4  f6af2350          ADR      r3,|L1.5752|
0020c8  f6af223c          ADR      r2,|L1.5776|
0020cc  f6af2128          ADR      r1,|L1.5800|
0020d0  a045              ADR      r0,|L1.8680|
0020d2  9700              STR      r7,[sp,#0]
0020d4  f7fffffe          BL       show_mess
                  |L1.8408|
;;;2037   					"    ЗАБЛОКИРОВАН    ",
;;;2038   					"     НЕИСПРАВНА     ",
;;;2039   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2040   					5000);
;;;2041   		}
;;;2042   	if(sk_stat[0]==1)
0020d8  7828              LDRB     r0,[r5,#0]  ; sk_stat
0020da  2801              CMP      r0,#1
0020dc  d106              BNE      |L1.8428|
;;;2043   		{
;;;2044   		vz2_stat=vz2sWRK1;
0020de  f8884007          STRB     r4,[r8,#7]
;;;2045   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0020e2  210a              MOVS     r1,#0xa
0020e4  f44f70ca          MOV      r0,#0x194
0020e8  f7fffffe          BL       lc640_write
                  |L1.8428|
;;;2046   		}
;;;2047   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020ec  2314              MOVS     r3,#0x14
0020ee  2200              MOVS     r2,#0
0020f0  2164              MOVS     r1,#0x64
0020f2  20d2              MOVS     r0,#0xd2
0020f4  f7fffffe          BL       mess_send
                  |L1.8440|
;;;2048   	}
;;;2049   
;;;2050   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0020f8  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0020fc  280e              CMP      r0,#0xe
0020fe  d12c              BNE      |L1.8538|
;;;2051   	{
;;;2052   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002100  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002104  280e              CMP      r0,#0xe
002106  d102              BNE      |L1.8462|
002108  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00210c  b908              CBNZ     r0,|L1.8466|
                  |L1.8462|
;;;2053   		{
;;;2054   		vz2_stat_cnt=10;
00210e  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8466|
;;;2055   		}
;;;2056   	vz2_stat_cnt--;
002112  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002116  f1a00001          SUB      r0,r0,#1
00211a  b200              SXTH     r0,r0
00211c  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2057   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002120  280a              CMP      r0,#0xa
002122  d001              BEQ      |L1.8488|
002124  2809              CMP      r0,#9
002126  d108              BNE      |L1.8506|
                  |L1.8488|
;;;2058   		{
;;;2059   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002128  a335              ADR      r3,|L1.8704|
00212a  f2af42a0          ADR      r2,|L1.7308|
00212e  f2af418c          ADR      r1,|L1.7332|
002132  a02d              ADR      r0,|L1.8680|
002134  9700              STR      r7,[sp,#0]
002136  f7fffffe          BL       show_mess
                  |L1.8506|
;;;2060   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2061   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2062   					"    ТУМБЛЕРА!!!     ",
;;;2063   					5000);
;;;2064   		}
;;;2065   	if(sk_stat[1]==1)
00213a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00213c  2801              CMP      r0,#1
00213e  d106              BNE      |L1.8526|
;;;2066   		{
;;;2067   		vz2_stat=vz2sWRK1;
002140  f8884007          STRB     r4,[r8,#7]
;;;2068   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
002144  210a              MOVS     r1,#0xa
002146  f44f70ca          MOV      r0,#0x194
00214a  f7fffffe          BL       lc640_write
                  |L1.8526|
;;;2069   		}
;;;2070   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00214e  2314              MOVS     r3,#0x14
002150  2200              MOVS     r2,#0
002152  2164              MOVS     r1,#0x64
002154  20d2              MOVS     r0,#0xd2
002156  f7fffffe          BL       mess_send
                  |L1.8538|
;;;2071   	}
;;;2072   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
00215a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00215e  2810              CMP      r0,#0x10
002160  d12d              BNE      |L1.8638|
;;;2073   	{
;;;2074   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002162  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002166  2810              CMP      r0,#0x10
002168  d102              BNE      |L1.8560|
00216a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00216e  b908              CBNZ     r0,|L1.8564|
                  |L1.8560|
;;;2075   		{
;;;2076   		vz2_stat_cnt=10;
002170  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8564|
;;;2077   		}
;;;2078   	vz2_stat_cnt--;
002174  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002178  f1a00001          SUB      r0,r0,#1
00217c  b200              SXTH     r0,r0
00217e  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2079   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002182  280a              CMP      r0,#0xa
002184  d001              BEQ      |L1.8586|
002186  2809              CMP      r0,#9
002188  d109              BNE      |L1.8606|
                  |L1.8586|
;;;2080   		{
;;;2081   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00218a  f6af3314          ADR      r3,|L1.5752|
00218e  f6af3200          ADR      r2,|L1.5776|
002192  f6af21ec          ADR      r1,|L1.5800|
002196  a014              ADR      r0,|L1.8680|
002198  9700              STR      r7,[sp,#0]
00219a  f7fffffe          BL       show_mess
                  |L1.8606|
;;;2082   					"    ЗАБЛОКИРОВАН    ",
;;;2083   					"     НЕИСПРАВНА     ",
;;;2084   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2085   					5000);
;;;2086   		}
;;;2087   	if(sk_stat[0]==1)
00219e  7828              LDRB     r0,[r5,#0]  ; sk_stat
0021a0  2801              CMP      r0,#1
0021a2  d106              BNE      |L1.8626|
;;;2088   		{
;;;2089   		vz2_stat=vz2sWRK2;
0021a4  f888a007          STRB     r10,[r8,#7]
;;;2090   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0021a8  210b              MOVS     r1,#0xb
0021aa  f44f70ca          MOV      r0,#0x194
0021ae  f7fffffe          BL       lc640_write
                  |L1.8626|
;;;2091   		}
;;;2092   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0021b2  2314              MOVS     r3,#0x14
0021b4  2200              MOVS     r2,#0
0021b6  2164              MOVS     r1,#0x64
0021b8  20d2              MOVS     r0,#0xd2
0021ba  f7fffffe          BL       mess_send
                  |L1.8638|
;;;2093   	}
;;;2094   
;;;2095   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
0021be  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0021c2  2811              CMP      r0,#0x11
0021c4  d155              BNE      |L1.8818|
;;;2096   	{
;;;2097   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0021c6  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0021ca  e025              B        |L1.8728|
                  |L1.8652|
                          DCD      ||area_number.25||+0x80
                  |L1.8656|
                          DCD      FZ_T1
                  |L1.8660|
                          DCD      out_U
                  |L1.8664|
                          DCD      FZ_U1
                  |L1.8668|
                          DCD      Ib_ips_termokompensat
                  |L1.8672|
                          DCD      FZ_ISW12
                  |L1.8676|
                          DCD      FZ_T2
                  |L1.8680|
0021e8  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0021ec  cccec2ce
0021f0  d7cddbc9
0021f4  20c7c0  
0021f7  d0dfc420          DCB      208,223,196,"  ",0
0021fb  2000    
0021fd  00                DCB      0
0021fe  00                DCB      0
0021ff  00                DCB      0
                  |L1.8704|
002200  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
002204  d2d3ccc1
002208  cbc5d0c0
00220c  21212120
002210  20202020
002214  00      
002215  00                DCB      0
002216  00                DCB      0
002217  00                DCB      0
                  |L1.8728|
002218  2811              CMP      r0,#0x11
00221a  d102              BNE      |L1.8738|
00221c  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002220  b908              CBNZ     r0,|L1.8742|
                  |L1.8738|
;;;2098   		{
;;;2099   		vz2_stat_cnt=10;
002222  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8742|
;;;2100   		}
;;;2101   	vz2_stat_cnt--;
002226  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00222a  f1a00001          SUB      r0,r0,#1
00222e  b200              SXTH     r0,r0
002230  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2102   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002234  280a              CMP      r0,#0xa
002236  d001              BEQ      |L1.8764|
002238  2809              CMP      r0,#9
00223a  d10a              BNE      |L1.8786|
                  |L1.8764|
;;;2103   		{
;;;2104   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00223c  f2af0340          ADR      r3,|L1.8704|
002240  f2af52b8          ADR      r2,|L1.7308|
002244  f2af51a4          ADR      r1,|L1.7332|
002248  f2af0064          ADR      r0,|L1.8680|
00224c  9700              STR      r7,[sp,#0]
00224e  f7fffffe          BL       show_mess
                  |L1.8786|
;;;2105   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2106   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2107   					"    ТУМБЛЕРА!!!     ",
;;;2108   					5000);
;;;2109   		}
;;;2110   	if(sk_stat[1]==1)
002252  7868              LDRB     r0,[r5,#1]  ; sk_stat
002254  2801              CMP      r0,#1
002256  d106              BNE      |L1.8806|
;;;2111   		{
;;;2112   		vz2_stat=vz2sWRK2;
002258  f888a007          STRB     r10,[r8,#7]
;;;2113   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00225c  210b              MOVS     r1,#0xb
00225e  f44f70ca          MOV      r0,#0x194
002262  f7fffffe          BL       lc640_write
                  |L1.8806|
;;;2114   		}
;;;2115   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002266  2314              MOVS     r3,#0x14
002268  2200              MOVS     r2,#0
00226a  2164              MOVS     r1,#0x64
00226c  20d2              MOVS     r0,#0xd2
00226e  f7fffffe          BL       mess_send
                  |L1.8818|
;;;2116   	}
;;;2117   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
002272  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002276  280f              CMP      r0,#0xf
002278  d12f              BNE      |L1.8922|
;;;2118   	{
;;;2119   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00227a  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
00227e  280f              CMP      r0,#0xf
002280  d102              BNE      |L1.8840|
002282  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002286  b908              CBNZ     r0,|L1.8844|
                  |L1.8840|
;;;2120   		{
;;;2121   		vz2_stat_cnt=10;
002288  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8844|
;;;2122   		}
;;;2123   	vz2_stat_cnt--;
00228c  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002290  f1a00001          SUB      r0,r0,#1
002294  b200              SXTH     r0,r0
002296  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2124   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00229a  280a              CMP      r0,#0xa
00229c  d001              BEQ      |L1.8866|
00229e  2809              CMP      r0,#9
0022a0  d10a              BNE      |L1.8888|
                  |L1.8866|
;;;2125   		{
;;;2126   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0022a2  f6af33c8          ADR      r3,|L1.5852|
0022a6  f6af32b4          ADR      r2,|L1.5876|
0022aa  f6af31a0          ADR      r1,|L1.5900|
0022ae  f2af507c          ADR      r0,|L1.7476|
0022b2  9700              STR      r7,[sp,#0]
0022b4  f7fffffe          BL       show_mess
                  |L1.8888|
;;;2127   					"      ТУМБЛЕР       ",
;;;2128   					"     ВЫСОКОГО       ",
;;;2129   					"    НАПРЯЖЕНИЯ      ",
;;;2130   					5000);
;;;2131   		}
;;;2132   	if(sk_stat[1]==0)
0022b8  7868              LDRB     r0,[r5,#1]  ; sk_stat
0022ba  b940              CBNZ     r0,|L1.8910|
;;;2133   		{
;;;2134   		vz2_stat=vz2sOFF;
0022bc  f8886007          STRB     r6,[r8,#7]
;;;2135   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0022c0  2100              MOVS     r1,#0
0022c2  f44f70ca          MOV      r0,#0x194
0022c6  f7fffffe          BL       lc640_write
;;;2136   		vz_stop();
0022ca  f7fffffe          BL       vz_stop
                  |L1.8910|
;;;2137   
;;;2138   		}
;;;2139   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0022ce  2314              MOVS     r3,#0x14
0022d0  2200              MOVS     r2,#0
0022d2  2164              MOVS     r1,#0x64
0022d4  20d2              MOVS     r0,#0xd2
0022d6  f7fffffe          BL       mess_send
                  |L1.8922|
;;;2140   	}
;;;2141   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
0022da  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;2142   	{
;;;2143   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2144   		{
;;;2145   		vz2_stat_cnt=10;
;;;2146   		}
;;;2147   	vz2_stat_cnt--;
;;;2148   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2149   		{
;;;2150   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0022de  f64037b8          MOV      r7,#0xbb8
0022e2  2812              CMP      r0,#0x12              ;2141
0022e4  d13d              BNE      |L1.9058|
0022e6  f8980008          LDRB     r0,[r8,#8]            ;2143  ; vz2_stat_old
0022ea  2812              CMP      r0,#0x12              ;2143
0022ec  d102              BNE      |L1.8948|
0022ee  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2143  ; vz2_stat_cnt
0022f2  b908              CBNZ     r0,|L1.8952|
                  |L1.8948|
0022f4  f8a8407e          STRH     r4,[r8,#0x7e]         ;2145
                  |L1.8952|
0022f8  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2147  ; vz2_stat_cnt
0022fc  f1a00001          SUB      r0,r0,#1              ;2147
002300  b200              SXTH     r0,r0                 ;2147
002302  f8a8007e          STRH     r0,[r8,#0x7e]         ;2147
002306  280a              CMP      r0,#0xa               ;2148
002308  d001              BEQ      |L1.8974|
00230a  2809              CMP      r0,#9                 ;2148
00230c  d109              BNE      |L1.8994|
                  |L1.8974|
00230e  f2af633c          ADR      r3,|L1.7380|
002312  f2af6228          ADR      r2,|L1.7404|
002316  f2af6114          ADR      r1,|L1.7428|
00231a  a0ff              ADR      r0,|L1.10008|
00231c  9700              STR      r7,[sp,#0]
00231e  f7fffffe          BL       show_mess
                  |L1.8994|
;;;2151   					"       ЗАРЯД        ",
;;;2152   					"      УСПЕШНО       ",
;;;2153   					"     ЗАВЕРШЕН       ",
;;;2154   					3000);
;;;2155   		}
;;;2156   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002322  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
002326  2806              CMP      r0,#6
002328  d001              BEQ      |L1.9006|
00232a  2805              CMP      r0,#5
00232c  d10a              BNE      |L1.9028|
                  |L1.9006|
;;;2157   		{
;;;2158   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00232e  f6af4354          ADR      r3,|L1.5852|
002332  f6af4240          ADR      r2,|L1.5876|
002336  f6af412c          ADR      r1,|L1.5900|
00233a  f2af6008          ADR      r0,|L1.7476|
00233e  9700              STR      r7,[sp,#0]
002340  f7fffffe          BL       show_mess
                  |L1.9028|
;;;2159   					"      ТУМБЛЕР       ",
;;;2160   					"     ВЫСОКОГО       ",
;;;2161   					"    НАПРЯЖЕНИЯ      ",
;;;2162   					3000);
;;;2163   		}
;;;2164   	if(sk_stat[1]==0)
002344  7868              LDRB     r0,[r5,#1]  ; sk_stat
002346  b930              CBNZ     r0,|L1.9046|
;;;2165   		{
;;;2166   		vz2_stat=vz2sOFF;
002348  f8886007          STRB     r6,[r8,#7]
;;;2167   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00234c  2100              MOVS     r1,#0
00234e  f44f70ca          MOV      r0,#0x194
002352  f7fffffe          BL       lc640_write
                  |L1.9046|
;;;2168   		}
;;;2169   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002356  2314              MOVS     r3,#0x14
002358  2200              MOVS     r2,#0
00235a  2164              MOVS     r1,#0x64
00235c  20d2              MOVS     r0,#0xd2
00235e  f7fffffe          BL       mess_send
                  |L1.9058|
;;;2170   	}
;;;2171   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
002362  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002366  2813              CMP      r0,#0x13
002368  d13d              BNE      |L1.9190|
;;;2172   	{
;;;2173   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00236a  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
00236e  2813              CMP      r0,#0x13
002370  d102              BNE      |L1.9080|
002372  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002376  b908              CBNZ     r0,|L1.9084|
                  |L1.9080|
;;;2174   		{
;;;2175   		vz2_stat_cnt=10;
002378  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.9084|
;;;2176   		}
;;;2177   	vz2_stat_cnt--;
00237c  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002380  f1a00001          SUB      r0,r0,#1
002384  b200              SXTH     r0,r0
002386  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2178   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00238a  280a              CMP      r0,#0xa
00238c  d001              BEQ      |L1.9106|
00238e  2809              CMP      r0,#9
002390  d109              BNE      |L1.9126|
                  |L1.9106|
;;;2179   		{
;;;2180   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002392  f2af6348          ADR      r3,|L1.7500|
002396  f2af6234          ADR      r2,|L1.7524|
00239a  f2af6198          ADR      r1,|L1.7428|
00239e  a0de              ADR      r0,|L1.10008|
0023a0  9700              STR      r7,[sp,#0]
0023a2  f7fffffe          BL       show_mess
                  |L1.9126|
;;;2181   					"       ЗАРЯД        ",
;;;2182   					"     ПРЕКРАЩЕН      ",
;;;2183   					"                    ",
;;;2184   					3000);
;;;2185   		}
;;;2186   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0023a6  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
0023aa  2806              CMP      r0,#6
0023ac  d001              BEQ      |L1.9138|
0023ae  2805              CMP      r0,#5
0023b0  d10a              BNE      |L1.9160|
                  |L1.9138|
;;;2187   		{
;;;2188   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0023b2  f6af43d8          ADR      r3,|L1.5852|
0023b6  f6af42c4          ADR      r2,|L1.5876|
0023ba  f6af41b0          ADR      r1,|L1.5900|
0023be  f2af608c          ADR      r0,|L1.7476|
0023c2  9700              STR      r7,[sp,#0]
0023c4  f7fffffe          BL       show_mess
                  |L1.9160|
;;;2189   					"      ТУМБЛЕР       ",
;;;2190   					"     ВЫСОКОГО       ",
;;;2191   					"    НАПРЯЖЕНИЯ      ",
;;;2192   					3000);
;;;2193   		}
;;;2194   	if(sk_stat[1]==0)
0023c8  7868              LDRB     r0,[r5,#1]  ; sk_stat
0023ca  b930              CBNZ     r0,|L1.9178|
;;;2195   		{
;;;2196   		vz2_stat=vz2sOFF;
0023cc  f8886007          STRB     r6,[r8,#7]
;;;2197   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0023d0  2100              MOVS     r1,#0
0023d2  f44f70ca          MOV      r0,#0x194
0023d6  f7fffffe          BL       lc640_write
                  |L1.9178|
;;;2198   		}
;;;2199   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0023da  2314              MOVS     r3,#0x14
0023dc  2200              MOVS     r2,#0
0023de  2164              MOVS     r1,#0x64
0023e0  20d2              MOVS     r0,#0xd2
0023e2  f7fffffe          BL       mess_send
                  |L1.9190|
;;;2200   	}
;;;2201   vz2_stat_old=vz2_stat;
0023e6  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0023ea  f8880008          STRB     r0,[r8,#8]
;;;2202   
;;;2203   }
0023ee  e8bd8ff8          POP      {r3-r11,pc}
;;;2204   
                          ENDP

                  vz2_start PROC
;;;2206   //старт уравнительног заряда
;;;2207   char vz2_start(char hour)
0023f2  b510              PUSH     {r4,lr}
;;;2208   {          
;;;2209   char out;
;;;2210   out=0;
0023f4  f04f0000          MOV      r0,#0
;;;2211   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0023f8  49cd              LDR      r1,|L1.10032|
0023fa  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
0023fe  2a00              CMP      r2,#0
002400  d110              BNE      |L1.9252|
002402  4acc              LDR      r2,|L1.10036|
002404  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
002406  2a01              CMP      r2,#1
002408  d00c              BEQ      |L1.9252|
00240a  794a              LDRB     r2,[r1,#5]  ; vz1_stat
00240c  2a00              CMP      r2,#0
00240e  d109              BNE      |L1.9252|
;;;2212   	{
;;;2213   	if(vz1_stat==vz1sOFF)
;;;2214   		{
;;;2215   		vz2_stat=vz2sSTEP1;
002410  f04f0001          MOV      r0,#1
002414  71c8              STRB     r0,[r1,#7]
;;;2216   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
002416  4601              MOV      r1,r0
002418  f44f70ca          MOV      r0,#0x194
00241c  f7fffffe          BL       lc640_write
;;;2217   		out=1;
002420  f04f0001          MOV      r0,#1
                  |L1.9252|
;;;2218   		
;;;2219   		}
;;;2220   /*	spc_stat=spcVZ;
;;;2221   	__ee_spc_stat=spcVZ; 
;;;2222   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2223   	vz_cnt_h=hour;
;;;2224   	__ee_vz_cnt=hour*60;
;;;2225   	if(hour==0)__ee_vz_cnt=30;
;;;2226   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2227   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2228   	vz_cnt_h_=0;
;;;2229   	vz_cnt_s=0;
;;;2230   	vz_cnt_s_=0;
;;;2231   	
;;;2232   		*/
;;;2233   	}
;;;2234   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2235   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2236   //plazma=out;	
;;;2237   return out;
;;;2238   }
002424  bd10              POP      {r4,pc}
;;;2239   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2240   //стоп формовочного заряда
;;;2241   void vz2_stop(void)
002426  48c2              LDR      r0,|L1.10032|
;;;2242   {
;;;2243   if(vz2_stat!=vz2sOFF)
002428  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
00242a  2900              CMP      r1,#0
00242c  d006              BEQ      |L1.9276|
;;;2244   	{
;;;2245   	vz2_stat=vz2sSTOP;
00242e  f04f0113          MOV      r1,#0x13
002432  71c1              STRB     r1,[r0,#7]
;;;2246   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
002434  f44f70ca          MOV      r0,#0x194
002438  f7ffbffe          B.W      lc640_write
                  |L1.9276|
;;;2247   	}
;;;2248   }
00243c  4770              BX       lr
;;;2249   
                          ENDP

                  kb_init PROC
;;;2250   //-----------------------------------------------
;;;2251   void kb_init(void)
00243e  48be              LDR      r0,|L1.10040|
;;;2252   {
;;;2253   main_kb_cnt=(TBAT*60)-60/*120*/;
002440  f06f013b          MVN      r1,#0x3b
002444  8800              LDRH     r0,[r0,#0]  ; TBAT
002446  ebc01000          RSB      r0,r0,r0,LSL #4
00244a  eb010080          ADD      r0,r1,r0,LSL #2
00244e  49b8              LDR      r1,|L1.10032|
002450  f8a10052          STRH     r0,[r1,#0x52]
;;;2254   }
002454  4770              BX       lr
;;;2255   
                          ENDP

                  kb_hndl PROC
;;;2256   //-----------------------------------------------
;;;2257   void kb_hndl(void)
002456  e92d5ff0          PUSH     {r4-r12,lr}
;;;2258   {
;;;2259   
;;;2260   static signed short ibat[2],ibat_[2];
;;;2261   #ifdef UKU_TELECORE2015
;;;2262   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2263   #else 
;;;2264   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
00245a  f8df82d4          LDR      r8,|L1.10032|
;;;2265   #endif
;;;2266   	{
;;;2267   	main_kb_cnt=0;
;;;2268   	
;;;2269   	kb_start[0]=0;
;;;2270   	kb_start[1]=0;
;;;2271   	kb_start_ips=0;
;;;2272   
;;;2273   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2274   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2275   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2276   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
00245e  f8dfa2dc          LDR      r10,|L1.10044|
002462  2500              MOVS     r5,#0                 ;2264
002464  f8b80052          LDRH     r0,[r8,#0x52]         ;2264  ; main_kb_cnt
002468  4eb5              LDR      r6,|L1.10048|
00246a  1c40              ADDS     r0,r0,#1              ;2264
00246c  b201              SXTH     r1,r0                 ;2264
00246e  48b2              LDR      r0,|L1.10040|
002470  f8a81052          STRH     r1,[r8,#0x52]         ;2264
002474  f8df92cc          LDR      r9,|L1.10052|
002478  f9b00000          LDRSH    r0,[r0,#0]            ;2264  ; TBAT
;;;2277   #endif	
;;;2278   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2279   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2280   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2281   #endif
;;;2282   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2283    
;;;2284   		{
;;;2285   		kb_start[0]=0;
;;;2286   		kb_start[1]=0;
;;;2287   		kb_start_ips=0;
;;;2288   		}
;;;2289   
;;;2290   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2291   		{
;;;2292   		kb_cnt_1lev=10;
00247c  270a              MOVS     r7,#0xa
00247e  ebc01200          RSB      r2,r0,r0,LSL #4       ;2264
002482  f04f0b01          MOV      r11,#1                ;2273
002486  f1080458          ADD      r4,r8,#0x58           ;2269
00248a  ebb10f82          CMP      r1,r2,LSL #2          ;2264
00248e  db6c              BLT      |L1.9578|
002490  2800              CMP      r0,#0                 ;2264
002492  d06a              BEQ      |L1.9578|
002494  f8a85052          STRH     r5,[r8,#0x52]         ;2267
002498  7025              STRB     r5,[r4,#0]            ;2269
00249a  7065              STRB     r5,[r4,#1]            ;2270
00249c  f888501d          STRB     r5,[r8,#0x1d]         ;2271
0024a0  48a9              LDR      r0,|L1.10056|
0024a2  7800              LDRB     r0,[r0,#0]            ;2273  ; BAT_IS_ON
0024a4  2855              CMP      r0,#0x55              ;2273
0024a6  d111              BNE      |L1.9420|
0024a8  f9b60002          LDRSH    r0,[r6,#2]            ;2273  ; bat
0024ac  2850              CMP      r0,#0x50              ;2273
0024ae  dd0d              BLE      |L1.9420|
0024b0  f9b60008          LDRSH    r0,[r6,#8]            ;2273  ; bat
0024b4  f7fffffe          BL       abs
0024b8  f9b91000          LDRSH    r1,[r9,#0]            ;2273  ; IKB
0024bc  4288              CMP      r0,r1                 ;2273
0024be  db03              BLT      |L1.9416|
0024c0  f896003d          LDRB     r0,[r6,#0x3d]         ;2273  ; bat
0024c4  07c0              LSLS     r0,r0,#31             ;2273
0024c6  d001              BEQ      |L1.9420|
                  |L1.9416|
0024c8  f884b000          STRB     r11,[r4,#0]           ;2273
                  |L1.9420|
0024cc  489e              LDR      r0,|L1.10056|
0024ce  7840              LDRB     r0,[r0,#1]            ;2274  ; BAT_IS_ON
0024d0  2855              CMP      r0,#0x55              ;2274
0024d2  d111              BNE      |L1.9464|
0024d4  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2274  ; bat
0024d8  2850              CMP      r0,#0x50              ;2274
0024da  dd0d              BLE      |L1.9464|
0024dc  f9b60054          LDRSH    r0,[r6,#0x54]         ;2274  ; bat
0024e0  f7fffffe          BL       abs
0024e4  f9b91000          LDRSH    r1,[r9,#0]            ;2274  ; IKB
0024e8  4288              CMP      r0,r1                 ;2274
0024ea  db03              BLT      |L1.9460|
0024ec  f8960089          LDRB     r0,[r6,#0x89]         ;2274  ; bat
0024f0  07c0              LSLS     r0,r0,#31             ;2274
0024f2  d001              BEQ      |L1.9464|
                  |L1.9460|
0024f4  f884b001          STRB     r11,[r4,#1]           ;2274
                  |L1.9464|
0024f8  4894              LDR      r0,|L1.10060|
0024fa  7800              LDRB     r0,[r0,#0]            ;2276  ; ips_bat_av_vzvod
0024fc  b970              CBNZ     r0,|L1.9500|
0024fe  f9ba0000          LDRSH    r0,[r10,#0]           ;2276  ; Ib_ips_termokompensat
002502  f7fffffe          BL       abs
002506  f9b91000          LDRSH    r1,[r9,#0]            ;2276  ; IKB
00250a  4288              CMP      r0,r1                 ;2276
00250c  db04              BLT      |L1.9496|
00250e  4890              LDR      r0,|L1.10064|
002510  f890003d          LDRB     r0,[r0,#0x3d]         ;2276  ; bat_ips
002514  07c0              LSLS     r0,r0,#31             ;2276
002516  d001              BEQ      |L1.9500|
                  |L1.9496|
002518  f888b01d          STRB     r11,[r8,#0x1d]        ;2276
                  |L1.9500|
00251c  488d              LDR      r0,|L1.10068|
00251e  7800              LDRB     r0,[r0,#0]            ;2278  ; net_av
002520  b998              CBNZ     r0,|L1.9546|
002522  f898001e          LDRB     r0,[r8,#0x1e]         ;2278  ; num_of_wrks_bps
002526  b180              CBZ      r0,|L1.9546|
002528  f8980023          LDRB     r0,[r8,#0x23]         ;2278  ; spc_stat
00252c  b108              CBZ      r0,|L1.9522|
00252e  2802              CMP      r0,#2                 ;2278
002530  d10b              BNE      |L1.9546|
                  |L1.9522|
002532  f8980005          LDRB     r0,[r8,#5]            ;2280  ; vz1_stat
002536  f8981007          LDRB     r1,[r8,#7]            ;2280  ; vz2_stat
00253a  4308              ORRS     r0,r0,r1              ;2280
00253c  d002              BEQ      |L1.9540|
00253e  4886              LDR      r0,|L1.10072|
002540  8800              LDRH     r0,[r0,#0]            ;2280  ; SMART_SPC
002542  b910              CBNZ     r0,|L1.9546|
                  |L1.9540|
002544  4885              LDR      r0,|L1.10076|
002546  7800              LDRB     r0,[r0,#0]            ;2282  ; sp_ch_stat
002548  b118              CBZ      r0,|L1.9554|
                  |L1.9546|
00254a  7025              STRB     r5,[r4,#0]            ;2285
00254c  7065              STRB     r5,[r4,#1]            ;2286
00254e  f888501d          STRB     r5,[r8,#0x1d]         ;2287
                  |L1.9554|
002552  7820              LDRB     r0,[r4,#0]            ;2290  ; kb_start
002554  2801              CMP      r0,#1                 ;2290
002556  d020              BEQ      |L1.9626|
002558  7860              LDRB     r0,[r4,#1]            ;2290  ; kb_start
00255a  2801              CMP      r0,#1                 ;2290
00255c  d01d              BEQ      |L1.9626|
00255e  f898001d          LDRB     r0,[r8,#0x1d]         ;2290  ; kb_start_ips
002562  2801              CMP      r0,#1                 ;2290
002564  d019              BEQ      |L1.9626|
;;;2293   		}
;;;2294   	else kb_cnt_1lev=0;
002566  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9578|
;;;2295   	}
;;;2296   
;;;2297   if(kb_cnt_1lev)
00256a  4641              MOV      r1,r8
00256c  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2298   	{
;;;2299   	kb_cnt_1lev--;
;;;2300   
;;;2301   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2302   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2303   
;;;2304   
;;;2305   	if(kb_cnt_1lev==5)
;;;2306   		{
;;;2307   		ibat[0]=abs(bat[0]._Ib);
002570  f8df81bc          LDR      r8,|L1.10032|
002574  2800              CMP      r0,#0                 ;2297
002576  f1080894          ADD      r8,r8,#0x94
00257a  d07e              BEQ      |L1.9850|
00257c  f1a00001          SUB      r0,r0,#1              ;2299
002580  b200              SXTH     r0,r0                 ;2299
002582  468b              MOV      r11,r1                ;2299
002584  f8a10054          STRH     r0,[r1,#0x54]         ;2299
002588  2805              CMP      r0,#5                 ;2301
00258a  dd09              BLE      |L1.9632|
00258c  230f              MOVS     r3,#0xf               ;2301
00258e  221e              MOVS     r2,#0x1e              ;2301
002590  2164              MOVS     r1,#0x64              ;2301
002592  20e1              MOVS     r0,#0xe1              ;2301
002594  f7fffffe          BL       mess_send
002598  e00a              B        |L1.9648|
                  |L1.9626|
00259a  f8a87054          STRH     r7,[r8,#0x54]         ;2292
00259e  e7e4              B        |L1.9578|
                  |L1.9632|
0025a0  2800              CMP      r0,#0                 ;2302
0025a2  dd05              BLE      |L1.9648|
0025a4  230f              MOVS     r3,#0xf               ;2302
0025a6  221e              MOVS     r2,#0x1e              ;2302
0025a8  2169              MOVS     r1,#0x69              ;2302
0025aa  20e1              MOVS     r0,#0xe1              ;2302
0025ac  f7fffffe          BL       mess_send
                  |L1.9648|
0025b0  f8bb0054          LDRH     r0,[r11,#0x54]        ;2305  ; kb_cnt_1lev
0025b4  2805              CMP      r0,#5                 ;2305
0025b6  d111              BNE      |L1.9692|
0025b8  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0025bc  f7fffffe          BL       abs
0025c0  f8a80000          STRH     r0,[r8,#0]
;;;2308   		ibat[1]=abs(bat[1]._Ib);
0025c4  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0025c8  f7fffffe          BL       abs
0025cc  f8a80002          STRH     r0,[r8,#2]
;;;2309   		ibat_ips=abs(Ib_ips_termokompensat);
0025d0  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0025d4  f7fffffe          BL       abs
0025d8  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9692|
;;;2310   		}
;;;2311   	
;;;2312   	if(kb_cnt_1lev==0)
0025dc  4854              LDR      r0,|L1.10032|
0025de  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
0025e2  2800              CMP      r0,#0
0025e4  d158              BNE      |L1.9880|
;;;2313   		{
;;;2314   		ibat_[0]=abs(bat[0]._Ib);
0025e6  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0025ea  f7fffffe          BL       abs
0025ee  f8dfb140          LDR      r11,|L1.10032|
0025f2  f10b0b98          ADD      r11,r11,#0x98
0025f6  f8ab0000          STRH     r0,[r11,#0]
;;;2315   		ibat_[1]=abs(bat[1]._Ib);
0025fa  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0025fe  f7fffffe          BL       abs
002602  f8ab0002          STRH     r0,[r11,#2]
;;;2316   		ibat_ips_=abs(Ib_ips_termokompensat);
002606  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
00260a  f7fffffe          BL       abs
00260e  f8dfa120          LDR      r10,|L1.10032|
002612  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2317   
;;;2318   		kb_cnt_2lev=0;
002616  f8aa5056          STRH     r5,[r10,#0x56]
;;;2319   
;;;2320   
;;;2321   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
00261a  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
00261e  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
002622  4408              ADD      r0,r0,r1
002624  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002628  4288              CMP      r0,r1
00262a  da02              BGE      |L1.9778|
00262c  7820              LDRB     r0,[r4,#0]  ; kb_start
00262e  2801              CMP      r0,#1
002630  d034              BEQ      |L1.9884|
                  |L1.9778|
;;;2322   			{
;;;2323   			kb_cnt_2lev=10;  
;;;2324   			}
;;;2325   		else if(bat[0]._Ub>200)
002632  f9b60002          LDRSH    r0,[r6,#2]  ; bat
002636  28c8              CMP      r0,#0xc8
002638  dd04              BLE      |L1.9796|
;;;2326   			{
;;;2327   			kb_start[0]=0;
00263a  7025              STRB     r5,[r4,#0]
;;;2328   			avar_bat_hndl(0,0);
00263c  2100              MOVS     r1,#0
00263e  4608              MOV      r0,r1
002640  f7fffffe          BL       avar_bat_hndl
                  |L1.9796|
;;;2329   			}
;;;2330   		
;;;2331   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
002644  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
002648  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
00264c  4408              ADD      r0,r0,r1
00264e  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002652  4288              CMP      r0,r1
002654  da02              BGE      |L1.9820|
002656  7860              LDRB     r0,[r4,#1]  ; kb_start
002658  2801              CMP      r0,#1
00265a  d022              BEQ      |L1.9890|
                  |L1.9820|
;;;2332   			{
;;;2333   			kb_cnt_2lev=10;     
;;;2334   			}
;;;2335   		else  if(bat[1]._Ub>200)
00265c  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
002660  28c8              CMP      r0,#0xc8
002662  dd04              BLE      |L1.9838|
;;;2336   			{
;;;2337   			kb_start[1]=0;
002664  7065              STRB     r5,[r4,#1]
;;;2338   			avar_bat_hndl(1,0);
002666  2100              MOVS     r1,#0
002668  2001              MOVS     r0,#1
00266a  f7fffffe          BL       avar_bat_hndl
                  |L1.9838|
;;;2339   			}
;;;2340   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2341   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
00266e  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002672  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
002676  4408              ADD      r0,r0,r1
002678  e000              B        |L1.9852|
                  |L1.9850|
00267a  e01b              B        |L1.9908|
                  |L1.9852|
00267c  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002680  4288              CMP      r0,r1
002682  da09              BGE      |L1.9880|
002684  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
002688  2801              CMP      r0,#1
00268a  d105              BNE      |L1.9880|
;;;2342   			{
;;;2343   			if(KB_ALGORITM==1)
00268c  4834              LDR      r0,|L1.10080|
00268e  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
002690  2801              CMP      r0,#1
002692  d009              BEQ      |L1.9896|
;;;2344   				{
;;;2345   				avar_bat_ips_hndl(1);
;;;2346   				kb_start_ips=0;
;;;2347   				}
;;;2348   			else
;;;2349   				{
;;;2350   				kb_cnt_2lev=10;     
002694  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9880|
;;;2351   				}
;;;2352   			}
;;;2353   #endif
;;;2354   		}	
;;;2355   
;;;2356   
;;;2357   	}
;;;2358   else if(kb_cnt_2lev)
;;;2359   	{
;;;2360   	kb_cnt_2lev--;
;;;2361   
;;;2362   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2363   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2364   
;;;2365   
;;;2366   	if(kb_cnt_2lev==5)
;;;2367   		{
;;;2368   		ibat[0]=abs(bat[0]._Ib);
;;;2369   		ibat[1]=abs(bat[1]._Ib);
;;;2370   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2371   		}
;;;2372   	
;;;2373   	if(kb_cnt_2lev==0)
;;;2374   		{
;;;2375   		ibat_[0]=abs(bat[0]._Ib);
;;;2376   		ibat_[1]=abs(bat[1]._Ib);
;;;2377   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2378   
;;;2379   		kb_full_ver=0;
;;;2380   
;;;2381   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2382   			{
;;;2383   			kb_full_ver=1;  
;;;2384   			}
;;;2385   		else if(bat[0]._Ub>200)			
;;;2386   			{
;;;2387   			kb_start[0]=0;
;;;2388   			avar_bat_hndl(0,0);
;;;2389   			}
;;;2390   
;;;2391   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2392   			{
;;;2393   			kb_full_ver=1;     
;;;2394   			}
;;;2395   		else	if(bat[1]._Ub>200)		
;;;2396   			{
;;;2397   			kb_start[1]=0;
;;;2398   			avar_bat_hndl(1,0);
;;;2399   			}
;;;2400   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2401   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2402   			{
;;;2403   			if(KB_ALGORITM==2)
;;;2404   				{
;;;2405   				avar_bat_ips_hndl(1);
;;;2406   				kb_start_ips=0;
;;;2407   				}
;;;2408   			else
;;;2409   				{
;;;2410   				kb_full_ver=1;     
;;;2411   				}
;;;2412   			}
;;;2413   #endif
;;;2414   		}	
;;;2415   	}
;;;2416   
;;;2417   else if(kb_full_ver)
;;;2418   	{
;;;2419   	
;;;2420   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2421   
;;;2422   	if( abs(bat[0]._Ib) > IKB ) 
;;;2423   		{
;;;2424   		if(kb_start[0]==1)
;;;2425   			{
;;;2426   			kb_start[0]=0;
;;;2427   			avar_bat_hndl(0,0);
;;;2428   			}
;;;2429   		}
;;;2430   
;;;2431   	if( abs(bat[1]._Ib) > IKB ) 
;;;2432   		{
;;;2433   		if(kb_start[1]==1)
;;;2434   			{
;;;2435   			kb_start[1]=0;
;;;2436   			avar_bat_hndl(1,0);
;;;2437   			}
;;;2438   		}
;;;2439   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2440   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2441   		{
;;;2442   		if(kb_start_ips==1)
;;;2443   			{
;;;2444   			kb_start_ips=0;
;;;2445   			avar_bat_ips_hndl(0);
;;;2446   			}
;;;2447   		}
;;;2448   #endif
;;;2449   
;;;2450   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2451   		{
;;;2452   		kb_full_ver=0;
;;;2453   		}
;;;2454   
;;;2455   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2456   		{
;;;2457   		kb_full_ver=0;
;;;2458   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2459   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2460   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2461   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2462   #endif
;;;2463   		}
;;;2464   	}
;;;2465   
;;;2466   }
002698  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9884|
00269c  f8aa7056          STRH     r7,[r10,#0x56]        ;2323
0026a0  e7d0              B        |L1.9796|
                  |L1.9890|
0026a2  f8aa7056          STRH     r7,[r10,#0x56]        ;2333
0026a6  e7e2              B        |L1.9838|
                  |L1.9896|
0026a8  2001              MOVS     r0,#1                 ;2345
0026aa  f7fffffe          BL       avar_bat_ips_hndl
0026ae  f88a501d          STRB     r5,[r10,#0x1d]        ;2346
                  |L1.9906|
0026b2  e7f1              B        |L1.9880|
                  |L1.9908|
0026b4  f9b10056          LDRSH    r0,[r1,#0x56]         ;2358  ; kb_cnt_2lev
0026b8  b368              CBZ      r0,|L1.10006|
0026ba  f1a00001          SUB      r0,r0,#1              ;2360
0026be  b200              SXTH     r0,r0                 ;2360
0026c0  460f              MOV      r7,r1                 ;2360
0026c2  f8a10056          STRH     r0,[r1,#0x56]         ;2360
0026c6  2805              CMP      r0,#5                 ;2362
0026c8  dd06              BLE      |L1.9944|
0026ca  230f              MOVS     r3,#0xf               ;2362
0026cc  22c8              MOVS     r2,#0xc8              ;2362
0026ce  2164              MOVS     r1,#0x64              ;2362
0026d0  20e1              MOVS     r0,#0xe1              ;2362
0026d2  f7fffffe          BL       mess_send
0026d6  e007              B        |L1.9960|
                  |L1.9944|
0026d8  2800              CMP      r0,#0                 ;2363
0026da  dd05              BLE      |L1.9960|
0026dc  230f              MOVS     r3,#0xf               ;2363
0026de  22c8              MOVS     r2,#0xc8              ;2363
0026e0  2169              MOVS     r1,#0x69              ;2363
0026e2  20e1              MOVS     r0,#0xe1              ;2363
0026e4  f7fffffe          BL       mess_send
                  |L1.9960|
0026e8  f8b70056          LDRH     r0,[r7,#0x56]         ;2366  ; kb_cnt_2lev
0026ec  2805              CMP      r0,#5                 ;2366
0026ee  d111              BNE      |L1.10004|
0026f0  f9b60008          LDRSH    r0,[r6,#8]            ;2368  ; bat
0026f4  f7fffffe          BL       abs
0026f8  f8a80000          STRH     r0,[r8,#0]            ;2368
0026fc  f9b60054          LDRSH    r0,[r6,#0x54]         ;2369  ; bat
002700  f7fffffe          BL       abs
002704  f8a80002          STRH     r0,[r8,#2]            ;2369
002708  f9ba0000          LDRSH    r0,[r10,#0]           ;2370  ; Ib_ips_termokompensat
00270c  f7fffffe          BL       abs
002710  f8a7005a          STRH     r0,[r7,#0x5a]         ;2370
                  |L1.10004|
002714  e026              B        |L1.10084|
                  |L1.10006|
002716  e08b              B        |L1.10288|
                  |L1.10008|
002718  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
00271c  d4ced0cc
002720  cec2ced7
002724  cddbc920
002728  202020  
00272b  2000              DCB      " ",0
00272d  00                DCB      0
00272e  00                DCB      0
00272f  00                DCB      0
                  |L1.10032|
                          DCD      ||area_number.25||
                  |L1.10036|
                          DCD      speedChrgBlckStat
                  |L1.10040|
                          DCD      TBAT
                  |L1.10044|
                          DCD      Ib_ips_termokompensat
                  |L1.10048|
                          DCD      bat
                  |L1.10052|
                          DCD      IKB
                  |L1.10056|
                          DCD      BAT_IS_ON
                  |L1.10060|
                          DCD      ips_bat_av_vzvod
                  |L1.10064|
                          DCD      bat_ips
                  |L1.10068|
                          DCD      net_av
                  |L1.10072|
                          DCD      SMART_SPC
                  |L1.10076|
                          DCD      sp_ch_stat
                  |L1.10080|
                          DCD      KB_ALGORITM
                  |L1.10084|
002764  48fa              LDR      r0,|L1.11088|
002766  f8b00056          LDRH     r0,[r0,#0x56]         ;2373  ; kb_cnt_2lev
00276a  2800              CMP      r0,#0                 ;2373
                  |L1.10092|
00276c  d194              BNE      |L1.9880|
00276e  f9b60008          LDRSH    r0,[r6,#8]            ;2375  ; bat
002772  f7fffffe          BL       abs
002776  4ff6              LDR      r7,|L1.11088|
002778  3798              ADDS     r7,r7,#0x98           ;2375
00277a  8038              STRH     r0,[r7,#0]            ;2375
00277c  f9b60054          LDRSH    r0,[r6,#0x54]         ;2376  ; bat
002780  f7fffffe          BL       abs
002784  8078              STRH     r0,[r7,#2]            ;2376
002786  f9ba0000          LDRSH    r0,[r10,#0]           ;2377  ; Ib_ips_termokompensat
00278a  f7fffffe          BL       abs
00278e  f8dfa3c0          LDR      r10,|L1.11088|
002792  f8aa005c          STRH     r0,[r10,#0x5c]        ;2377
002796  f88a501c          STRB     r5,[r10,#0x1c]        ;2379
00279a  f9b80000          LDRSH    r0,[r8,#0]            ;2381  ; ibat
00279e  f9b71000          LDRSH    r1,[r7,#0]            ;2381  ; ibat_
0027a2  4408              ADD      r0,r0,r1              ;2381
0027a4  f9b91000          LDRSH    r1,[r9,#0]            ;2381  ; IKB
0027a8  4288              CMP      r0,r1                 ;2381
0027aa  da02              BGE      |L1.10162|
0027ac  7820              LDRB     r0,[r4,#0]            ;2381  ; kb_start
0027ae  2801              CMP      r0,#1                 ;2381
0027b0  d032              BEQ      |L1.10264|
                  |L1.10162|
0027b2  f9b60002          LDRSH    r0,[r6,#2]            ;2385  ; bat
0027b6  28c8              CMP      r0,#0xc8              ;2385
0027b8  dd04              BLE      |L1.10180|
0027ba  7025              STRB     r5,[r4,#0]            ;2387
0027bc  2100              MOVS     r1,#0                 ;2388
0027be  4608              MOV      r0,r1                 ;2388
0027c0  f7fffffe          BL       avar_bat_hndl
                  |L1.10180|
0027c4  f9b80002          LDRSH    r0,[r8,#2]            ;2391  ; ibat
0027c8  f9b71002          LDRSH    r1,[r7,#2]            ;2391  ; ibat_
0027cc  4408              ADD      r0,r0,r1              ;2391
0027ce  f9b91000          LDRSH    r1,[r9,#0]            ;2391  ; IKB
0027d2  4288              CMP      r0,r1                 ;2391
0027d4  da02              BGE      |L1.10204|
0027d6  7860              LDRB     r0,[r4,#1]            ;2391  ; kb_start
0027d8  2801              CMP      r0,#1                 ;2391
0027da  d020              BEQ      |L1.10270|
                  |L1.10204|
0027dc  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2395  ; bat
0027e0  28c8              CMP      r0,#0xc8              ;2395
0027e2  dd04              BLE      |L1.10222|
0027e4  7065              STRB     r5,[r4,#1]            ;2397
0027e6  2100              MOVS     r1,#0                 ;2398
0027e8  2001              MOVS     r0,#1                 ;2398
0027ea  f7fffffe          BL       avar_bat_hndl
                  |L1.10222|
0027ee  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2401  ; ibat_ips
0027f2  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2401  ; ibat_ips_
0027f6  4408              ADD      r0,r0,r1              ;2401
0027f8  f9b91000          LDRSH    r1,[r9,#0]            ;2401  ; IKB
0027fc  4288              CMP      r0,r1                 ;2401
0027fe  f6bfaf58          BGE      |L1.9906|
002802  f89a001d          LDRB     r0,[r10,#0x1d]        ;2401  ; kb_start_ips
002806  2801              CMP      r0,#1                 ;2401
002808  d1b0              BNE      |L1.10092|
00280a  48d2              LDR      r0,|L1.11092|
00280c  8800              LDRH     r0,[r0,#0]            ;2403  ; KB_ALGORITM
00280e  2802              CMP      r0,#2                 ;2403
002810  d008              BEQ      |L1.10276|
002812  f88ab01c          STRB     r11,[r10,#0x1c]       ;2410
                  |L1.10262|
002816  e73f              B        |L1.9880|
                  |L1.10264|
002818  f88ab01c          STRB     r11,[r10,#0x1c]       ;2383
00281c  e7d2              B        |L1.10180|
                  |L1.10270|
00281e  f88ab01c          STRB     r11,[r10,#0x1c]       ;2393
002822  e7e4              B        |L1.10222|
                  |L1.10276|
002824  2001              MOVS     r0,#1                 ;2405
002826  f7fffffe          BL       avar_bat_ips_hndl
00282a  f88a501d          STRB     r5,[r10,#0x1d]        ;2406
00282e  e733              B        |L1.9880|
                  |L1.10288|
002830  7f08              LDRB     r0,[r1,#0x1c]         ;2417  ; kb_full_ver
002832  4688              MOV      r8,r1                 ;2417
002834  2800              CMP      r0,#0                 ;2417
002836  d0ee              BEQ      |L1.10262|
002838  230f              MOVS     r3,#0xf               ;2420
00283a  2200              MOVS     r2,#0                 ;2420
00283c  216e              MOVS     r1,#0x6e              ;2420
00283e  20e1              MOVS     r0,#0xe1              ;2420
002840  f7fffffe          BL       mess_send
002844  f9b60008          LDRSH    r0,[r6,#8]            ;2422  ; bat
002848  f7fffffe          BL       abs
00284c  f9b91000          LDRSH    r1,[r9,#0]            ;2422  ; IKB
002850  4288              CMP      r0,r1                 ;2422
002852  dd07              BLE      |L1.10340|
002854  7820              LDRB     r0,[r4,#0]            ;2424  ; kb_start
002856  2801              CMP      r0,#1                 ;2424
002858  d104              BNE      |L1.10340|
00285a  7025              STRB     r5,[r4,#0]            ;2426
00285c  2100              MOVS     r1,#0                 ;2427
00285e  4608              MOV      r0,r1                 ;2427
002860  f7fffffe          BL       avar_bat_hndl
                  |L1.10340|
002864  f9b60054          LDRSH    r0,[r6,#0x54]         ;2431  ; bat
002868  f7fffffe          BL       abs
00286c  f9b91000          LDRSH    r1,[r9,#0]            ;2431  ; IKB
002870  4288              CMP      r0,r1                 ;2431
002872  dd06              BLE      |L1.10370|
002874  7860              LDRB     r0,[r4,#1]            ;2433  ; kb_start
002876  2801              CMP      r0,#1                 ;2433
002878  d103              BNE      |L1.10370|
00287a  7065              STRB     r5,[r4,#1]            ;2435
00287c  2100              MOVS     r1,#0                 ;2436
00287e  f7fffffe          BL       avar_bat_hndl
                  |L1.10370|
002882  f9ba0000          LDRSH    r0,[r10,#0]           ;2440  ; Ib_ips_termokompensat
002886  f7fffffe          BL       abs
00288a  f9b91000          LDRSH    r1,[r9,#0]            ;2440  ; IKB
00288e  4288              CMP      r0,r1                 ;2440
002890  dd08              BLE      |L1.10404|
002892  f898001d          LDRB     r0,[r8,#0x1d]         ;2442  ; kb_start_ips
002896  2801              CMP      r0,#1                 ;2442
002898  d104              BNE      |L1.10404|
00289a  f888501d          STRB     r5,[r8,#0x1d]         ;2444
00289e  2000              MOVS     r0,#0                 ;2445
0028a0  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10404|
0028a4  7820              LDRB     r0,[r4,#0]            ;2450  ; kb_start
0028a6  b930              CBNZ     r0,|L1.10422|
0028a8  7860              LDRB     r0,[r4,#1]            ;2450  ; kb_start
0028aa  b920              CBNZ     r0,|L1.10422|
0028ac  f898001d          LDRB     r0,[r8,#0x1d]         ;2450  ; kb_start_ips
0028b0  b908              CBNZ     r0,|L1.10422|
0028b2  f888501c          STRB     r5,[r8,#0x1c]         ;2452
                  |L1.10422|
0028b6  20e6              MOVS     r0,#0xe6              ;2455
0028b8  f7fffffe          BL       mess_find
0028bc  b118              CBZ      r0,|L1.10438|
0028be  48a6              LDR      r0,|L1.11096|
0028c0  6800              LDR      r0,[r0,#0]            ;2455  ; mess_data
0028c2  28e7              CMP      r0,#0xe7              ;2455
0028c4  d00a              BEQ      |L1.10460|
                  |L1.10438|
0028c6  48a5              LDR      r0,|L1.11100|
0028c8  49a5              LDR      r1,|L1.11104|
0028ca  f9b00000          LDRSH    r0,[r0,#0]            ;2455  ; USIGN
0028ce  f9b11000          LDRSH    r1,[r1,#0]            ;2455  ; load_U
0028d2  eb000080          ADD      r0,r0,r0,LSL #2       ;2455
0028d6  ebb10f40          CMP      r1,r0,LSL #1          ;2455
                  |L1.10458|
0028da  da9c              BGE      |L1.10262|
                  |L1.10460|
0028dc  f888501c          STRB     r5,[r8,#0x1c]         ;2457
0028e0  7820              LDRB     r0,[r4,#0]            ;2458  ; kb_start
0028e2  4da0              LDR      r5,|L1.11108|
0028e4  2801              CMP      r0,#1                 ;2458
0028e6  d10f              BNE      |L1.10504|
0028e8  f9b90000          LDRSH    r0,[r9,#0]            ;2458  ; IKB
0028ec  f9b51000          LDRSH    r1,[r5,#0]            ;2458  ; load_I
0028f0  0040              LSLS     r0,r0,#1              ;2458
0028f2  fb90f0f7          SDIV     r0,r0,r7              ;2458
0028f6  4288              CMP      r0,r1                 ;2458
0028f8  da06              BGE      |L1.10504|
0028fa  f896003d          LDRB     r0,[r6,#0x3d]         ;2458  ; bat
0028fe  07c0              LSLS     r0,r0,#31             ;2458
002900  d102              BNE      |L1.10504|
002902  2101              MOVS     r1,#1                 ;2458
002904  f7fffffe          BL       avar_bat_hndl
                  |L1.10504|
002908  7860              LDRB     r0,[r4,#1]            ;2459  ; kb_start
00290a  2801              CMP      r0,#1                 ;2459
00290c  d110              BNE      |L1.10544|
00290e  f9b90000          LDRSH    r0,[r9,#0]            ;2459  ; IKB
002912  f9b51000          LDRSH    r1,[r5,#0]            ;2459  ; load_I
002916  0040              LSLS     r0,r0,#1              ;2459
002918  fb90f0f7          SDIV     r0,r0,r7              ;2459
00291c  4288              CMP      r0,r1                 ;2459
00291e  da07              BGE      |L1.10544|
002920  f8960089          LDRB     r0,[r6,#0x89]         ;2459  ; bat
002924  07c0              LSLS     r0,r0,#31             ;2459
002926  d103              BNE      |L1.10544|
002928  2101              MOVS     r1,#1                 ;2459
00292a  4608              MOV      r0,r1                 ;2459
00292c  f7fffffe          BL       avar_bat_hndl
                  |L1.10544|
002930  f898001d          LDRB     r0,[r8,#0x1d]         ;2461  ; kb_start_ips
002934  2801              CMP      r0,#1                 ;2461
                  |L1.10550|
002936  f47faebc          BNE      |L1.9906|
00293a  f9b90000          LDRSH    r0,[r9,#0]            ;2461  ; IKB
00293e  f9b51000          LDRSH    r1,[r5,#0]            ;2461  ; load_I
002942  0040              LSLS     r0,r0,#1              ;2461
002944  fb90f0f7          SDIV     r0,r0,r7              ;2461
002948  4288              CMP      r0,r1                 ;2461
00294a  dac6              BGE      |L1.10458|
00294c  4886              LDR      r0,|L1.11112|
00294e  f890003d          LDRB     r0,[r0,#0x3d]         ;2461  ; bat_ips
002952  07c0              LSLS     r0,r0,#31             ;2461
002954  d1ef              BNE      |L1.10550|
002956  e8bd5ff0          POP      {r4-r12,lr}           ;2461
00295a  2001              MOVS     r0,#1                 ;2461
00295c  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2467   
                          ENDP

                  samokalibr_hndl PROC
;;;2476   //-----------------------------------------------
;;;2477   void samokalibr_hndl(void)
002960  4770              BX       lr
;;;2478   {
;;;2479   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2480   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2481   
;;;2482   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2483   	{
;;;2484   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2485   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2486   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2487   	} 
;;;2488   
;;;2489   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2490   	{
;;;2491   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2492   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2493   	
;;;2494   	}
;;;2495   #endif	 	
;;;2496   }
;;;2497   
                          ENDP

                  ubat_old_drv PROC
;;;2500   //-----------------------------------------------
;;;2501   void ubat_old_drv(void)
002962  b510              PUSH     {r4,lr}
;;;2502   {        
;;;2503   bat_u_old_cnt++;
002964  4c81              LDR      r4,|L1.11116|
002966  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
002968  f1000001          ADD      r0,r0,#1
00296c  8020              STRH     r0,[r4,#0]
;;;2504   gran_ring(&bat_u_old_cnt,0,8);
00296e  f04f0208          MOV      r2,#8
002972  f04f0100          MOV      r1,#0
002976  4620              MOV      r0,r4
002978  f7fffffe          BL       gran_ring
;;;2505   
;;;2506   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
00297c  497c              LDR      r1,|L1.11120|
00297e  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002982  eb010040          ADD      r0,r1,r0,LSL #1
002986  884a              LDRH     r2,[r1,#2]  ; bat
002988  8402              STRH     r2,[r0,#0x20]
;;;2507   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
00298a  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
00298e  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2508   }
002992  bd10              POP      {r4,pc}
;;;2509   
                          ENDP

                  unet_drv PROC
;;;2510   //-----------------------------------------------
;;;2511   void unet_drv(void)
002994  e92d41f0          PUSH     {r4-r8,lr}
;;;2512   {
;;;2513   if(net_av_2min_timer)net_av_2min_timer--;
002998  4976              LDR      r1,|L1.11124|
00299a  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
00299e  b110              CBZ      r0,|L1.10662|
0029a0  f1a00001          SUB      r0,r0,#1
0029a4  8008              STRH     r0,[r1,#0]
                  |L1.10662|
;;;2514   
;;;2515   if(net_U<UMN)
0029a6  4e74              LDR      r6,|L1.11128|
0029a8  4874              LDR      r0,|L1.11132|
;;;2516   	{
;;;2517   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
0029aa  4a75              LDR      r2,|L1.11136|
0029ac  f9b61000          LDRSH    r1,[r6,#0]            ;2515  ; net_U
0029b0  f9b03000          LDRSH    r3,[r0,#0]            ;2515  ; UMN
;;;2518   		{
;;;2519   		unet_drv_cnt++;
;;;2520   		if(unet_drv_cnt>=10)
;;;2521   			{
;;;2522   			net_Ustore=net_U;
;;;2523   		 	avar_unet_hndl(1);
;;;2524   			
;;;2525   			}
;;;2526   		}
;;;2527   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
0029b4  270a              MOVS     r7,#0xa
0029b6  f9920000          LDRSB    r0,[r2,#0]            ;2517
;;;2528   
;;;2529   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2530   	}
;;;2531   
;;;2532   else if(net_U>UMN)
;;;2533   	{                 
;;;2534   	if(unet_drv_cnt)
;;;2535   		{
;;;2536   		unet_drv_cnt--;
;;;2537   		if(unet_drv_cnt<=0)
;;;2538   			{
;;;2539   			avar_unet_hndl(0);
;;;2540   			avar_bps_reset_cnt=10;
0029ba  4c65              LDR      r4,|L1.11088|
0029bc  4299              CMP      r1,r3                 ;2515
0029be  da1d              BGE      |L1.10748|
0029c0  4d70              LDR      r5,|L1.11140|
0029c2  280a              CMP      r0,#0xa               ;2517
0029c4  da0f              BGE      |L1.10726|
0029c6  4b70              LDR      r3,|L1.11144|
0029c8  f9b33000          LDRSH    r3,[r3,#0]            ;2517  ; main_1Hz_cnt
0029cc  2b0f              CMP      r3,#0xf               ;2517
0029ce  dd0a              BLE      |L1.10726|
0029d0  f1000001          ADD      r0,r0,#1              ;2519
0029d4  b240              SXTB     r0,r0                 ;2519
0029d6  7010              STRB     r0,[r2,#0]            ;2519
0029d8  280a              CMP      r0,#0xa               ;2520
0029da  db07              BLT      |L1.10732|
0029dc  8029              STRH     r1,[r5,#0]            ;2522
0029de  2001              MOVS     r0,#1                 ;2523
0029e0  f7fffffe          BL       avar_unet_hndl
0029e4  e002              B        |L1.10732|
                  |L1.10726|
0029e6  280a              CMP      r0,#0xa               ;2527
0029e8  db00              BLT      |L1.10732|
0029ea  7017              STRB     r7,[r2,#0]            ;2527
                  |L1.10732|
0029ec  f9b60000          LDRSH    r0,[r6,#0]            ;2529  ; net_U
0029f0  f9b51000          LDRSH    r1,[r5,#0]            ;2529  ; net_Ustore
0029f4  4288              CMP      r0,r1                 ;2529
0029f6  da0e              BGE      |L1.10774|
0029f8  8028              STRH     r0,[r5,#0]            ;2529
0029fa  e00c              B        |L1.10774|
                  |L1.10748|
0029fc  dd0b              BLE      |L1.10774|
0029fe  b150              CBZ      r0,|L1.10774|
002a00  f1a00001          SUB      r0,r0,#1              ;2536
002a04  b240              SXTB     r0,r0                 ;2536
002a06  7010              STRB     r0,[r2,#0]            ;2536
002a08  2800              CMP      r0,#0                 ;2537
002a0a  dc04              BGT      |L1.10774|
002a0c  2000              MOVS     r0,#0                 ;2539
002a0e  f7fffffe          BL       avar_unet_hndl
002a12  f8847031          STRB     r7,[r4,#0x31]
                  |L1.10774|
;;;2541   			}
;;;2542   		}
;;;2543   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2544   	
;;;2545   	}
;;;2546   #ifdef UKU_6U || UKU_ZVU
;;;2547   if(net_U>UMAXN)
;;;2548   	{
;;;2549   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
;;;2550   		{
;;;2551   		unet_max_drv_cnt++;
;;;2552   		if(unet_max_drv_cnt>=10)
;;;2553   			{
;;;2554   			net_Ustore=net_U;
;;;2555   		 	avar_unet_hndl(2);
;;;2556   			
;;;2557   			}
;;;2558   		}
;;;2559   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
;;;2560   
;;;2561   	if(net_U>net_Ustore) net_Ustore=net_U;	
;;;2562   	}
;;;2563   
;;;2564   else if(net_U<UMAXN)
;;;2565   	{                 
;;;2566   	if(unet_max_drv_cnt)
;;;2567   		{
;;;2568   		unet_max_drv_cnt--;
;;;2569   		if(unet_max_drv_cnt<=0)
;;;2570   			{
;;;2571   			avar_unet_hndl(0);
;;;2572   			avar_bps_reset_cnt=10;
;;;2573   			}
;;;2574   		}
;;;2575   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2576   	
;;;2577   	}
;;;2578   #endif /*UKU_6U*/
;;;2579   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
002a16  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
002a1a  2800              CMP      r0,#0
002a1c  d003              BEQ      |L1.10790|
002a1e  f1a00001          SUB      r0,r0,#1
002a22  f8840031          STRB     r0,[r4,#0x31]
                  |L1.10790|
;;;2580   }
002a26  e8bd81f0          POP      {r4-r8,pc}
;;;2581   
                          ENDP

                  matemat PROC
;;;2583   //-----------------------------------------------
;;;2584   void matemat(void)
002a2a  e92d4ff0          PUSH     {r4-r11,lr}
;;;2585   {
002a2e  b087              SUB      sp,sp,#0x1c
;;;2586   //signed short temp_SS;
;;;2587   signed long temp_SL/*,temp_SL_*/;
;;;2588   char /*temp,*/i;
;;;2589   //signed short temp_SS;
;;;2590   
;;;2591   #ifdef UKU_MGTS
;;;2592   //напряжение сети
;;;2593   temp_SL=(signed long)net_buff_;
;;;2594   temp_SL*=Kunet;
;;;2595   temp_SL/=110000L;
;;;2596   net_U=(signed short)temp_SL;
;;;2597   #endif
;;;2598   
;;;2599   #ifdef UKU_RSTKM
;;;2600   //напряжение сети
;;;2601   temp_SL=(signed long)net_buff_;
;;;2602   temp_SL*=Kunet;
;;;2603   temp_SL/=110000L;
;;;2604   net_U=(signed short)temp_SL;
;;;2605   #endif
;;;2606   
;;;2607   #ifdef UKU_3U
;;;2608   //напряжение сети
;;;2609   temp_SL=(signed long)net_buff_;
;;;2610   temp_SL*=Kunet;
;;;2611   temp_SL/=36000L;
;;;2612   net_U=(signed short)temp_SL;
;;;2613   #endif
;;;2614   
;;;2615   #ifdef UKU_6U
;;;2616   //напряжение сети
;;;2617   
;;;2618   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2619   	{
;;;2620   
;;;2621   	if(bps[11]._device==dNET_METR)
;;;2622   		{
;;;2623   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2624   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2625   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2626   
;;;2627   		temp_SL=(signed long)net_metr_buff_[0];
;;;2628   		temp_SL*=KunetA;
;;;2629   		temp_SL/=6000L;
;;;2630   		net_Ua=(signed short)temp_SL;
;;;2631   	
;;;2632   		temp_SL=(signed long)net_metr_buff_[1];
;;;2633   		temp_SL*=KunetB;
;;;2634   		temp_SL/=6000L;
;;;2635   		net_Ub=(signed short)temp_SL;
;;;2636   	
;;;2637   		temp_SL=(signed long)net_metr_buff_[2];
;;;2638   		temp_SL*=KunetC;
;;;2639   		temp_SL/=6000L;
;;;2640   		net_Uc=(signed short)temp_SL;
;;;2641   		}
;;;2642   	else
;;;2643   		{
;;;2644   		temp_SL=(signed long)net_buff_;
;;;2645   		temp_SL*=KunetA;
;;;2646   		temp_SL/=110000L;
;;;2647   		net_Ua=(signed short)temp_SL;
;;;2648   	
;;;2649   		temp_SL=(signed long)adc_buff_[3];
;;;2650   		temp_SL*=KunetB;
;;;2651   		temp_SL/=6000L;
;;;2652   		net_Ub=(signed short)temp_SL;
;;;2653   	
;;;2654   		temp_SL=(signed long)adc_buff_[10];
;;;2655   		temp_SL*=KunetC;
;;;2656   		temp_SL/=6000L;
;;;2657   		net_Uc=(signed short)temp_SL;
;;;2658   		}
;;;2659   
;;;2660   	net_U=net_Ua;
;;;2661   	if(net_Ub<net_U)net_U=net_Ub;
;;;2662   	if(net_Uc<net_U)net_U=net_Uc;
;;;2663   	}
;;;2664   else 
;;;2665   	{
;;;2666   	temp_SL=(signed long)net_buff_;
;;;2667   	temp_SL*=Kunet;
;;;2668   	temp_SL/=110000L;
;;;2669   	net_U=(signed short)temp_SL;
;;;2670   	}
;;;2671   
;;;2672   
;;;2673   
;;;2674   
;;;2675   #endif
;;;2676   
;;;2677   #ifdef UKU_GLONASS
;;;2678   //напряжение сети
;;;2679   temp_SL=(signed long)net_buff_;
;;;2680   temp_SL*=Kunet;
;;;2681   temp_SL/=110000L;
;;;2682   net_U=(signed short)temp_SL;
;;;2683   #endif
;;;2684   
;;;2685   #ifdef UKU_KONTUR
;;;2686   //напряжение сети
;;;2687   temp_SL=(signed long)net_buff_;
;;;2688   temp_SL*=Kunet;
;;;2689   temp_SL/=110000L;
;;;2690   net_U=(signed short)temp_SL;
;;;2691   #endif
;;;2692   
;;;2693   #ifdef IPS_SGEP_GAZPROM
;;;2694   //напряжение сети
;;;2695   temp_SL=(signed long)net_buff_;
;;;2696   temp_SL*=Kunet;
;;;2697   temp_SL/=110000L;
;;;2698   net_U=(signed short)temp_SL;
;;;2699   #endif
;;;2700   
;;;2701   #ifdef UKU_220_V2
;;;2702   //напряжение сети
;;;2703   
;;;2704   if(AUSW_MAIN==22033)
;;;2705   	{
;;;2706   	temp_SL=(signed long)net_buff_;
;;;2707   	temp_SL*=KunetA;
;;;2708   	temp_SL/=6000L;
;;;2709   	net_Ua=(signed short)temp_SL;
;;;2710   
;;;2711   	temp_SL=(signed long)adc_buff_[3];
;;;2712   	temp_SL*=KunetB;
;;;2713   	temp_SL/=6000L;
;;;2714   	net_Ub=(signed short)temp_SL;
;;;2715   
;;;2716   	temp_SL=(signed long)adc_buff_[10];
;;;2717   	temp_SL*=KunetC;
;;;2718   	temp_SL/=6000L;
;;;2719   	net_Uc=(signed short)temp_SL;
;;;2720   
;;;2721   	net_U=net_Ua;
;;;2722   	if(net_Ub<net_U)net_U=net_Ub;
;;;2723   	if(net_Uc<net_U)net_U=net_Uc;
;;;2724   	}
;;;2725   else
;;;2726   	{
;;;2727   	temp_SL=(signed long)net_buff_;
;;;2728   	temp_SL*=Kunet;
;;;2729   	temp_SL/=5000L;
;;;2730   	net_U=(signed short)temp_SL;
;;;2731   	}
;;;2732   #endif
;;;2733   
;;;2734   
;;;2735   #ifdef UKU_220
;;;2736   //напряжение сети
;;;2737   
;;;2738   if(AUSW_MAIN==22035)
;;;2739   	{
;;;2740   	temp_SL=(signed long)net_buff_;
;;;2741   	temp_SL*=KunetA;
;;;2742   	temp_SL/=6000L;
;;;2743   	net_Ua=(signed short)temp_SL;
;;;2744   
;;;2745   	temp_SL=(signed long)adc_buff_[3];
;;;2746   	temp_SL*=KunetB;
;;;2747   	temp_SL/=6000L;
;;;2748   	net_Ub=(signed short)temp_SL;
;;;2749   
;;;2750   	temp_SL=(signed long)adc_buff_[10];
;;;2751   	temp_SL*=KunetC;
;;;2752   	temp_SL/=6000L;
;;;2753   	net_Uc=(signed short)temp_SL;
;;;2754   
;;;2755   	net_U=net_Ua;
;;;2756   	if(net_Ub<net_U)net_U=net_Ub;
;;;2757   	if(net_Uc<net_U)net_U=net_Uc;
;;;2758   	}
;;;2759   else
;;;2760   	{
;;;2761   	temp_SL=(signed long)net_buff_;
;;;2762   	temp_SL*=Kunet;
;;;2763   	#ifdef _ACDC_
;;;2764   	temp_SL/=500L;
;;;2765   	#else
;;;2766   	temp_SL/=5000L;
;;;2767   	#endif
;;;2768   	net_U=(signed short)temp_SL;
;;;2769   	
;;;2770   	}
;;;2771   #endif
;;;2772   
;;;2773   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2774   //напряжение сети
;;;2775   
;;;2776   
;;;2777   	if(bps[11]._device==dNET_METR)
002a30  4856              LDR      r0,|L1.11148|
;;;2778   		{
;;;2779   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2780   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2781   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2782   
;;;2783   		temp_SL=(signed long)net_metr_buff_[2];
;;;2784   		temp_SL*=KunetA;
002a32  4b57              LDR      r3,|L1.11152|
;;;2785   		temp_SL/=6000L;
;;;2786   		net_Ua=(signed short)temp_SL;
;;;2787   	
;;;2788   		temp_SL=(signed long)net_metr_buff_[1];
;;;2789   		temp_SL*=KunetB;
002a34  4958              LDR      r1,|L1.11160|
002a36  f890044c          LDRB     r0,[r0,#0x44c]        ;2777  ; bps
;;;2790   		temp_SL/=6000L;
;;;2791   		net_Ub=(signed short)temp_SL;
;;;2792   	
;;;2793   		temp_SL=(signed long)net_metr_buff_[0];
;;;2794   		temp_SL*=KunetC;
002a3a  4a58              LDR      r2,|L1.11164|
002a3c  9006              STR      r0,[sp,#0x18]         ;2784
002a3e  f8dfc154          LDR      r12,|L1.11156|
002a42  f9b39000          LDRSH    r9,[r3,#0]            ;2784
002a46  f9b1b000          LDRSH    r11,[r1,#0]           ;2789
002a4a  f9b2a000          LDRSH    r10,[r2,#0]
002a4e  4f54              LDR      r7,|L1.11168|
;;;2795   		temp_SL/=6000L;
;;;2796   		net_Uc=(signed short)temp_SL;
002a50  4c54              LDR      r4,|L1.11172|
;;;2797   
;;;2798   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2799   
;;;2800   		net_U=net_Ua;
;;;2801   		if(net_Ub<net_U)net_U=net_Ub;
;;;2802   		if(net_Uc<net_U)net_U=net_Uc;
;;;2803   		}
;;;2804   	  else if(AUSW_MAIN==22033)
;;;2805   	{
;;;2806   	temp_SL=(signed long)net_buff_;
002a52  4e3f              LDR      r6,|L1.11088|
002a54  f2456511          MOV      r5,#0x5611            ;2804
002a58  2807              CMP      r0,#7                 ;2777
002a5a  d036              BEQ      |L1.10954|
002a5c  4631              MOV      r1,r6
002a5e  f8df8138          LDR      r8,|L1.11160|
002a62  8f4a              LDRH     r2,[r1,#0x3a]
002a64  4619              MOV      r1,r3                 ;2784
;;;2807   	temp_SL*=KunetA;
;;;2808   	temp_SL/=4000L;
;;;2809   	net_Ua=(signed short)temp_SL;
;;;2810   
;;;2811   	temp_SL=(signed long)adc_buff_[3];
002a66  4b51              LDR      r3,|L1.11180|
002a68  f9b11000          LDRSH    r1,[r1,#0]            ;2784
002a6c  f9b88000          LDRSH    r8,[r8,#0]            ;2789
002a70  434a              MULS     r2,r1,r2              ;2807
002a72  f9b31006          LDRSH    r1,[r3,#6]
002a76  f8df9124          LDR      r9,|L1.11164|
;;;2812   	temp_SL*=KunetB;
002a7a  fb01f108          MUL      r1,r1,r8
002a7e  f2417870          MOV      r8,#0x1770            ;2785
;;;2813   	temp_SL/=6000L;
;;;2814   	net_Ub=(signed short)temp_SL;
;;;2815   
;;;2816   	temp_SL=(signed long)adc_buff_[10];
002a82  f9b33014          LDRSH    r3,[r3,#0x14]
002a86  f9b99000          LDRSH    r9,[r9,#0]            ;2794
002a8a  fb91f1f8          SDIV     r1,r1,r8              ;2813
;;;2817   	temp_SL*=KunetC;
002a8e  fb03f309          MUL      r3,r3,r9
;;;2818   	temp_SL/=6000L;
002a92  fb93f3f8          SDIV     r3,r3,r8
002a96  4844              LDR      r0,|L1.11176|
002a98  b209              SXTH     r1,r1                 ;2814
;;;2819   	net_Uc=(signed short)temp_SL;
002a9a  b21b              SXTH     r3,r3
002a9c  8800              LDRH     r0,[r0,#0]            ;2804  ; AUSW_MAIN
002a9e  42a8              CMP      r0,r5                 ;2804
002aa0  d154              BNE      |L1.11084|
002aa2  f44f607a          MOV      r0,#0xfa0             ;2808
002aa6  fb92f0f0          SDIV     r0,r2,r0              ;2808
002aaa  b200              SXTH     r0,r0                 ;2809
002aac  f8ac0000          STRH     r0,[r12,#0]           ;2809
002ab0  8039              STRH     r1,[r7,#0]            ;2814
002ab2  8023              STRH     r3,[r4,#0]
;;;2820   
;;;2821   	net_U=net_Ua;
002ab4  4a30              LDR      r2,|L1.11128|
002ab6  8010              STRH     r0,[r2,#0]
;;;2822   	if(net_Ub<net_U)net_U=net_Ub;
002ab8  4281              CMP      r1,r0
002aba  da00              BGE      |L1.10942|
002abc  8011              STRH     r1,[r2,#0]
                  |L1.10942|
;;;2823   	if(net_Uc<net_U)net_U=net_Uc;
002abe  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002ac2  4283              CMP      r3,r0
002ac4  da00              BGE      |L1.10952|
002ac6  8013              STRH     r3,[r2,#0]
                  |L1.10952|
002ac8  e0b4              B        |L1.11316|
                  |L1.10954|
002aca  4839              LDR      r0,|L1.11184|
002acc  4b20              LDR      r3,|L1.11088|
002ace  7801              LDRB     r1,[r0,#0]            ;2779  ; bps
002ad0  7842              LDRB     r2,[r0,#1]            ;2779  ; bps
002ad2  f10303e8          ADD      r3,r3,#0xe8           ;2779
002ad6  eb012102          ADD      r1,r1,r2,LSL #8       ;2779
002ada  fa1ff881          UXTH     r8,r1                 ;2779
002ade  f8a38000          STRH     r8,[r3,#0]            ;2779
002ae2  7881              LDRB     r1,[r0,#2]            ;2780  ; bps
002ae4  78c2              LDRB     r2,[r0,#3]            ;2780  ; bps
002ae6  eb012102          ADD      r1,r1,r2,LSL #8       ;2780
002aea  b289              UXTH     r1,r1                 ;2780
002aec  8059              STRH     r1,[r3,#2]            ;2780
002aee  7902              LDRB     r2,[r0,#4]            ;2781  ; bps
002af0  f890e005          LDRB     lr,[r0,#5]            ;2781  ; bps
002af4  eb02220e          ADD      r2,r2,lr,LSL #8       ;2781
002af8  b292              UXTH     r2,r2                 ;2781
002afa  809a              STRH     r2,[r3,#4]            ;2781
002afc  fb02f209          MUL      r2,r2,r9              ;2784
002b00  f2417370          MOV      r3,#0x1770            ;2785
002b04  fb92f2f3          SDIV     r2,r2,r3              ;2785
002b08  fa0ff982          SXTH     r9,r2                 ;2786
002b0c  f8ac9000          STRH     r9,[r12,#0]           ;2786
002b10  fb01f10b          MUL      r1,r1,r11             ;2789
002b14  fb91f1f3          SDIV     r1,r1,r3              ;2790
002b18  b209              SXTH     r1,r1                 ;2791
002b1a  8039              STRH     r1,[r7,#0]            ;2791
002b1c  fb08f80a          MUL      r8,r8,r10             ;2794
002b20  fb98f2f3          SDIV     r2,r8,r3              ;2795
002b24  b212              SXTH     r2,r2                 ;2796
002b26  8022              STRH     r2,[r4,#0]            ;2796
002b28  7983              LDRB     r3,[r0,#6]            ;2798  ; bps
002b2a  79c0              LDRB     r0,[r0,#7]            ;2798  ; bps
002b2c  eb032000          ADD      r0,r3,r0,LSL #8       ;2798
002b30  4b20              LDR      r3,|L1.11188|
002b32  8018              STRH     r0,[r3,#0]            ;2798
002b34  4810              LDR      r0,|L1.11128|
002b36  f8a09000          STRH     r9,[r0,#0]            ;2800
002b3a  4549              CMP      r1,r9                 ;2801
002b3c  da00              BGE      |L1.11072|
002b3e  8001              STRH     r1,[r0,#0]            ;2801
                  |L1.11072|
002b40  f9b01000          LDRSH    r1,[r0,#0]            ;2802  ; net_U
002b44  428a              CMP      r2,r1                 ;2802
002b46  da75              BGE      |L1.11316|
002b48  8002              STRH     r2,[r0,#0]            ;2802
002b4a  e073              B        |L1.11316|
                  |L1.11084|
002b4c  e034              B        |L1.11192|
002b4e  0000              DCW      0x0000
                  |L1.11088|
                          DCD      ||area_number.25||
                  |L1.11092|
                          DCD      KB_ALGORITM
                  |L1.11096|
                          DCD      mess_data
                  |L1.11100|
                          DCD      USIGN
                  |L1.11104|
                          DCD      load_U
                  |L1.11108|
                          DCD      load_I
                  |L1.11112|
                          DCD      bat_ips
                  |L1.11116|
                          DCD      bat_u_old_cnt
                  |L1.11120|
                          DCD      bat
                  |L1.11124|
                          DCD      net_av_2min_timer
                  |L1.11128|
                          DCD      net_U
                  |L1.11132|
                          DCD      UMN
                  |L1.11136|
                          DCD      unet_drv_cnt
                  |L1.11140|
                          DCD      net_Ustore
                  |L1.11144|
                          DCD      main_1Hz_cnt
                  |L1.11148|
                          DCD      bps
                  |L1.11152|
                          DCD      KunetA
                  |L1.11156|
                          DCD      net_Ua
                  |L1.11160|
                          DCD      KunetB
                  |L1.11164|
                          DCD      KunetC
                  |L1.11168|
                          DCD      net_Ub
                  |L1.11172|
                          DCD      net_Uc
                  |L1.11176|
                          DCD      AUSW_MAIN
                  |L1.11180|
                          DCD      ||.bss||+0x40c
                  |L1.11184|
                          DCD      bps+0x452
                  |L1.11188|
                          DCD      net_F3
                  |L1.11192|
;;;2824   	}
;;;2825   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002bb8  f5a048ac          SUB      r8,r0,#0x5600
002bbc  f1b8082f          SUBS     r8,r8,#0x2f
002bc0  d00b              BEQ      |L1.11226|
002bc2  f1180828          ADDS     r8,r8,#0x28
002bc6  d008              BEQ      |L1.11226|
002bc8  f1b80814          SUBS     r8,r8,#0x14
002bcc  d005              BEQ      |L1.11226|
002bce  f1b80801          SUBS     r8,r8,#1
002bd2  d002              BEQ      |L1.11226|
002bd4  f118081a          ADDS     r8,r8,#0x1a
002bd8  d113              BNE      |L1.11266|
                  |L1.11226|
;;;2826   	{
;;;2827   	temp_SL=(signed long)net_buff_;
;;;2828   	temp_SL*=KunetA;
;;;2829   	temp_SL/=40000L;
002bda  f6494040          MOV      r0,#0x9c40
002bde  fb92f0f0          SDIV     r0,r2,r0
;;;2830   	net_Ua=(signed short)temp_SL;
002be2  b200              SXTH     r0,r0
002be4  f8ac0000          STRH     r0,[r12,#0]
;;;2831   
;;;2832   	temp_SL=(signed long)adc_buff_[3];
;;;2833   	temp_SL*=KunetB;
;;;2834   	temp_SL/=6000L;
;;;2835   	net_Ub=(signed short)temp_SL;
002be8  8039              STRH     r1,[r7,#0]
;;;2836   
;;;2837   	temp_SL=(signed long)adc_buff_[10];
;;;2838   	temp_SL*=KunetC;
;;;2839   	temp_SL/=6000L;
;;;2840   	net_Uc=(signed short)temp_SL;
002bea  8023              STRH     r3,[r4,#0]
;;;2841   
;;;2842   	net_U=net_Ua;
002bec  4aff              LDR      r2,|L1.12268|
002bee  8010              STRH     r0,[r2,#0]
;;;2843   	if(net_Ub<net_U)net_U=net_Ub;
002bf0  4281              CMP      r1,r0
002bf2  da00              BGE      |L1.11254|
002bf4  8011              STRH     r1,[r2,#0]
                  |L1.11254|
;;;2844   	if(net_Uc<net_U)net_U=net_Uc;
002bf6  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002bfa  4283              CMP      r3,r0
002bfc  da1a              BGE      |L1.11316|
002bfe  8013              STRH     r3,[r2,#0]
002c00  e018              B        |L1.11316|
                  |L1.11266|
;;;2845   	}
;;;2846   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2847   	{
;;;2848   	temp_SL=(signed long)net_buff_;
;;;2849   	temp_SL*=Kunet;
002c02  49fb              LDR      r1,|L1.12272|
002c04  f5a043aa          SUB      r3,r0,#0x5500         ;2846
002c08  f9b12000          LDRSH    r2,[r1,#0]
002c0c  49f9              LDR      r1,|L1.12276|
002c0e  8f49              LDRH     r1,[r1,#0x3a]         ;2806
002c10  4351              MULS     r1,r2,r1
002c12  3bfa              SUBS     r3,r3,#0xfa           ;2846
002c14  d001              BEQ      |L1.11290|
002c16  1e5a              SUBS     r2,r3,#1              ;2846
002c18  d106              BNE      |L1.11304|
                  |L1.11290|
;;;2850   	temp_SL/=35000L;
002c1a  f64800b8          MOV      r0,#0x88b8
002c1e  fb91f0f0          SDIV     r0,r1,r0
;;;2851   	net_U=(signed short)temp_SL;
002c22  49f2              LDR      r1,|L1.12268|
002c24  8008              STRH     r0,[r1,#0]
002c26  e005              B        |L1.11316|
                  |L1.11304|
;;;2852   	
;;;2853   	}
;;;2854   else
;;;2855   	{
;;;2856   	temp_SL=(signed long)net_buff_;
;;;2857   	temp_SL*=Kunet;
;;;2858   	#ifdef _ACDC_
;;;2859   	temp_SL/=500L;
002c28  f44f70fa          MOV      r0,#0x1f4
002c2c  fb91f0f0          SDIV     r0,r1,r0
;;;2860   	#else
;;;2861   	temp_SL/=5000L;
;;;2862   	#endif
;;;2863   	net_U=(signed short)temp_SL;
002c30  49ee              LDR      r1,|L1.12268|
002c32  8008              STRH     r0,[r1,#0]
                  |L1.11316|
;;;2864   	
;;;2865   	}
;;;2866   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002c34  9806              LDR      r0,[sp,#0x18]
002c36  2807              CMP      r0,#7
002c38  d003              BEQ      |L1.11330|
002c3a  48ef              LDR      r0,|L1.12280|
002c3c  8801              LDRH     r1,[r0,#0]  ; net_F
002c3e  48ef              LDR      r0,|L1.12284|
002c40  8001              STRH     r1,[r0,#0]
                  |L1.11330|
;;;2867   #endif
;;;2868   
;;;2869   #ifdef UKU_TELECORE2015
;;;2870   //напряжение сети
;;;2871   temp_SL=(signed long)net_buff_;
;;;2872   temp_SL*=Kunet;
;;;2873   temp_SL/=110000L;
;;;2874   net_U=(signed short)temp_SL;
;;;2875   #endif
;;;2876   
;;;2877   #ifdef UKU_TELECORE2017
;;;2878   //напряжение сети
;;;2879   temp_SL=(signed long)net_buff_;
;;;2880   temp_SL*=Kunet;
;;;2881   temp_SL/=110000L;
;;;2882   net_U=(signed short)temp_SL;
;;;2883   #endif
;;;2884   
;;;2885   //Напряжения батарей
;;;2886   temp_SL=(signed long)adc_buff_[0];
002c42  4fef              LDR      r7,|L1.12288|
002c44  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2887   temp_SL*=Kubat[0];
002c48  49ee              LDR      r1,|L1.12292|
002c4a  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
002c4e  4350              MULS     r0,r2,r0
;;;2888   temp_SL/=2000L;
002c50  f44f68fa          MOV      r8,#0x7d0
002c54  fb90f0f8          SDIV     r0,r0,r8
;;;2889   bat[0]._Ub=(signed short)temp_SL;
002c58  4ceb              LDR      r4,|L1.12296|
002c5a  8060              STRH     r0,[r4,#2]
;;;2890   
;;;2891   #ifdef UKU_220
;;;2892   //Напряжения батарей
;;;2893   temp_SL=(signed long)adc_buff_[0];
;;;2894   temp_SL*=Kubat[0];
;;;2895   temp_SL/=400L;
;;;2896   bat[0]._Ub=(signed short)temp_SL;
;;;2897   #endif
;;;2898   
;;;2899   #ifdef UKU_220_V2
;;;2900   //Напряжения батарей
;;;2901   temp_SL=(signed long)adc_buff_[0];
;;;2902   temp_SL*=Kubat[0];
;;;2903   temp_SL/=400L;
;;;2904   bat[0]._Ub=(signed short)temp_SL;
;;;2905   #endif
;;;2906   
;;;2907   //adc_buff_[4]=300;
;;;2908   
;;;2909   temp_SL=(signed long)adc_buff_[4];
002c5c  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2910   temp_SL*=Kubatm[0];
002c60  4aea              LDR      r2,|L1.12300|
002c62  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
002c66  fb00f003          MUL      r0,r0,r3
;;;2911   temp_SL/=700L;
002c6a  f44f732f          MOV      r3,#0x2bc
002c6e  fb90f0f3          SDIV     r0,r0,r3
;;;2912   bat[0]._Ubm=(signed short)temp_SL;
002c72  80a0              STRH     r0,[r4,#4]
;;;2913   
;;;2914   #ifdef UKU_KONTUR
;;;2915   temp_SL=(signed long)adc_buff_[4];
;;;2916   temp_SL*=Kubatm[0];
;;;2917   temp_SL/=2000L;
;;;2918   bat[0]._Ubm=(signed short)temp_SL;
;;;2919   #endif
;;;2920   
;;;2921   #ifdef UKU_6U
;;;2922   temp_SL=(signed long)adc_buff_[4];
;;;2923   temp_SL*=Kubatm[0];
;;;2924   temp_SL/=2000L;
;;;2925   bat[0]._Ubm=(signed short)temp_SL;
;;;2926   #endif
;;;2927   
;;;2928   temp_SL=(signed long)adc_buff_[12];
002c74  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2929   temp_SL*=Kubat[1];
002c78  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002c7c  fb01f100          MUL      r1,r1,r0
;;;2930   temp_SL/=2000L;
002c80  fb91f0f8          SDIV     r0,r1,r8
;;;2931   bat[1]._Ub=(signed short)temp_SL;
002c84  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2932   
;;;2933   #ifdef UKU_220
;;;2934   temp_SL=(signed long)adc_buff_[12];
;;;2935   temp_SL*=Kubat[1];
;;;2936   temp_SL/=400L;
;;;2937   bat[1]._Ub=(signed short)temp_SL;
;;;2938   #endif
;;;2939   
;;;2940   #ifdef UKU_220_V2
;;;2941   temp_SL=(signed long)adc_buff_[12];
;;;2942   temp_SL*=Kubat[1];
;;;2943   temp_SL/=400L;
;;;2944   bat[1]._Ub=(signed short)temp_SL;
;;;2945   #endif
;;;2946   
;;;2947   //adc_buff_[1]=300;
;;;2948   
;;;2949   temp_SL=(signed long)adc_buff_[1];
002c88  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2950   temp_SL*=Kubatm[1];
002c8c  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002c90  fb00f001          MUL      r0,r0,r1
;;;2951   temp_SL/=700L;
002c94  fb90f0f3          SDIV     r0,r0,r3
;;;2952   bat[1]._Ubm=(signed short)temp_SL;
002c98  f8a40050          STRH     r0,[r4,#0x50]
;;;2953   #ifdef UKU_KONTUR
;;;2954   temp_SL=(signed long)adc_buff_[1];
;;;2955   temp_SL*=Kubatm[1];
;;;2956   temp_SL/=2000L;
;;;2957   bat[1]._Ubm=(signed short)temp_SL;
;;;2958   #endif
;;;2959   #ifdef UKU_6U
;;;2960   temp_SL=(signed long)adc_buff_[1];
;;;2961   temp_SL*=Kubatm[1];
;;;2962   temp_SL/=2000L;
;;;2963   bat[1]._Ubm=(signed short)temp_SL;
;;;2964   #endif
;;;2965   
;;;2966   #ifdef UKU_TELECORE2015
;;;2967   temp_SL=(signed long)adc_buff_[2];
;;;2968   temp_SL*=Kubat[0];
;;;2969   temp_SL/=2000L;
;;;2970   bat[0]._Ub=(signed short)temp_SL;
;;;2971   #endif
;;;2972   
;;;2973   /*
;;;2974   //Токи батарей
;;;2975   if(!mess_find_unvol(MESS2MATEMAT))
;;;2976   	{
;;;2977   	temp_SL=(signed long)ad7705_buff_[0];
;;;2978   	temp_SL-=(signed long)Kibat0[0];
;;;2979   	temp_SL*=(signed long)Kibat1[0];
;;;2980   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2981   	else temp_SL/=1000L;
;;;2982   	bat[0]._Ib=(signed short)temp_SL;
;;;2983   
;;;2984   	temp_SL=(signed long)ad7705_buff_[1];
;;;2985   	temp_SL-=(signed long)Kibat0[1];
;;;2986   	temp_SL*=(signed long)Kibat1[1];
;;;2987   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2988   	else temp_SL/=1000L;
;;;2989   	bat[1]._Ib=(signed short)temp_SL;
;;;2990   	}
;;;2991   */
;;;2992   
;;;2993   
;;;2994   //Токи батарей
;;;2995   if(!mess_find_unvol(MESS2MATEMAT))
002c9c  f04f00dc          MOV      r0,#0xdc
002ca0  f7fffffe          BL       mess_find_unvol
;;;2996   	{
;;;2997   	temp_SL=(signed long)ad7705_buff_[0];
;;;2998   	temp_SL-=(signed long)Kibat0[0];
;;;2999   	temp_SL*=(signed long)Kibat1[0];
;;;3000   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3001   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002ca4  f2456c13          MOV      r12,#0x5613
002ca8  bbe8              CBNZ     r0,|L1.11558|
002caa  f8dfa364          LDR      r10,|L1.12304|
002cae  f8ba0000          LDRH     r0,[r10,#0]           ;2997  ; ad7705_buff_
002cb2  f8dfb360          LDR      r11,|L1.12308|
002cb6  f8bb1000          LDRH     r1,[r11,#0]           ;2998  ; Kibat0
002cba  eba00001          SUB      r0,r0,r1              ;2998
002cbe  4ad6              LDR      r2,|L1.12312|
002cc0  f9b21000          LDRSH    r1,[r2,#0]            ;2999  ; Kibat1
002cc4  fb01f100          MUL      r1,r1,r0              ;2999
002cc8  48d4              LDR      r0,|L1.12316|
002cca  f6456338          MOV      r3,#0x5e38            ;3000
002cce  f6456992          MOV      r9,#0x5e92            ;3000
002cd2  8800              LDRH     r0,[r0,#0]            ;3000  ; AUSW_MAIN
002cd4  4298              CMP      r0,r3                 ;3000
002cd6  d001              BEQ      |L1.11484|
002cd8  4548              CMP      r0,r9                 ;3000
002cda  d104              BNE      |L1.11494|
                  |L1.11484|
002cdc  f44f7e96          MOV      lr,#0x12c             ;3000
002ce0  fb91f1fe          SDIV     r1,r1,lr              ;3000
002ce4  e00f              B        |L1.11526|
                  |L1.11494|
002ce6  f5a04ea8          SUB      lr,r0,#0x5400
002cea  f5be7efd          SUBS     lr,lr,#0x1fa
002cee  d003              BEQ      |L1.11512|
002cf0  4560              CMP      r0,r12
002cf2  d001              BEQ      |L1.11512|
002cf4  42a8              CMP      r0,r5
002cf6  d102              BNE      |L1.11518|
                  |L1.11512|
002cf8  fb91f1f8          SDIV     r1,r1,r8
002cfc  e003              B        |L1.11526|
                  |L1.11518|
;;;3002   	else temp_SL/=1000L;
002cfe  f44f7e7a          MOV      lr,#0x3e8
002d02  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11526|
;;;3003   	#ifdef UKU_TELECORE2015
;;;3004   	temp_SL/=2L;
;;;3005   	//temp_SL=-temp_SL;
;;;3006   	#endif
;;;3007   	//#ifdef UKU_TELECORE2017
;;;3008   	//temp_SL/=-2L;
;;;3009   	//temp_SL=-temp_SL;
;;;3010   	//#endif
;;;3011   	bat[0]._Ib=(signed short)temp_SL;
002d06  8121              STRH     r1,[r4,#8]
;;;3012   
;;;3013   	temp_SL=(signed long)ad7705_buff_[1];
002d08  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3014   	temp_SL-=(signed long)Kibat0[1];
002d0c  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002d10  eba10a0a          SUB      r10,r1,r10
;;;3015   	temp_SL*=(signed long)Kibat1[1];
002d14  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002d18  fb01f10a          MUL      r1,r1,r10
;;;3016   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002d1c  4298              CMP      r0,r3
002d1e  d001              BEQ      |L1.11556|
002d20  4548              CMP      r0,r9
002d22  d106              BNE      |L1.11570|
                  |L1.11556|
002d24  e000              B        |L1.11560|
                  |L1.11558|
002d26  e015              B        |L1.11604|
                  |L1.11560|
002d28  f44f7096          MOV      r0,#0x12c
002d2c  fb91f0f0          SDIV     r0,r1,r0
002d30  e00e              B        |L1.11600|
                  |L1.11570|
;;;3017   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002d32  f5a042aa          SUB      r2,r0,#0x5500
002d36  3afa              SUBS     r2,r2,#0xfa
002d38  d003              BEQ      |L1.11586|
002d3a  4560              CMP      r0,r12
002d3c  d001              BEQ      |L1.11586|
002d3e  42a8              CMP      r0,r5
002d40  d102              BNE      |L1.11592|
                  |L1.11586|
002d42  fb91f0f8          SDIV     r0,r1,r8
002d46  e003              B        |L1.11600|
                  |L1.11592|
;;;3018   	else temp_SL/=1000L;
002d48  f44f707a          MOV      r0,#0x3e8
002d4c  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11600|
;;;3019   	bat[1]._Ib=(signed short)temp_SL;
002d50  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.11604|
;;;3020   	}
;;;3021   
;;;3022   
;;;3023   
;;;3024   
;;;3025   
;;;3026   //Температуры батарей
;;;3027   
;;;3028   #ifdef UKU_KONTUR
;;;3029   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3030   else bat[0]._nd=1;
;;;3031   temp_SL=(signed long)adc_buff_[6];
;;;3032   temp_SL*=Ktbat[0];
;;;3033   temp_SL/=20000L;
;;;3034   temp_SL-=273L;
;;;3035   bat[0]._Tb=(signed short)temp_SL;
;;;3036   #else
;;;3037   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002d54  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
002d58  f6403ab7          MOV      r10,#0xbb7
002d5c  4681              MOV      r9,r0
002d5e  f2a03021          SUB      r0,r0,#0x321
;;;3038   else bat[0]._nd=1;
002d62  2201              MOVS     r2,#1
002d64  2300              MOVS     r3,#0                 ;3037
002d66  9005              STR      r0,[sp,#0x14]         ;3037
002d68  4550              CMP      r0,r10                ;3037
002d6a  d201              BCS      |L1.11632|
002d6c  7323              STRB     r3,[r4,#0xc]          ;3037
002d6e  e000              B        |L1.11634|
                  |L1.11632|
002d70  7322              STRB     r2,[r4,#0xc]
                  |L1.11634|
;;;3039   temp_SL=(signed long)adc_buff_[6];
;;;3040   temp_SL*=Ktbat[0];
002d72  49ab              LDR      r1,|L1.12320|
002d74  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
002d78  fb00f009          MUL      r0,r0,r9
;;;3041   temp_SL/=20000L;
002d7c  f6446e20          MOV      lr,#0x4e20
002d80  fb90f0fe          SDIV     r0,r0,lr
;;;3042   temp_SL-=273L;
002d84  f2a01011          SUB      r0,r0,#0x111
;;;3043   bat[0]._Tb=(signed short)temp_SL;
002d88  8160              STRH     r0,[r4,#0xa]
;;;3044   #endif
;;;3045   
;;;3046   #ifdef UKU_KONTUR
;;;3047   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3048   else bat[1]._nd=1;
;;;3049   temp_SL=(signed long)adc_buff_[7];
;;;3050   temp_SL*=Ktbat[1];
;;;3051   temp_SL/=20000L;
;;;3052   temp_SL-=273L;
;;;3053   bat[1]._Tb=(signed short)temp_SL;
;;;3054   #else
;;;3055   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002d8a  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
002d8e  f2a03b21          SUB      r11,r0,#0x321
002d92  45d3              CMP      r11,r10
002d94  d202              BCS      |L1.11676|
002d96  f8843058          STRB     r3,[r4,#0x58]
002d9a  e001              B        |L1.11680|
                  |L1.11676|
;;;3056   else bat[1]._nd=1;
002d9c  f8842058          STRB     r2,[r4,#0x58]
                  |L1.11680|
;;;3057   temp_SL=(signed long)adc_buff_[7];
;;;3058   temp_SL*=Ktbat[1];
002da0  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
002da4  4341              MULS     r1,r0,r1
;;;3059   temp_SL/=20000L;
002da6  f6446020          MOV      r0,#0x4e20
002daa  fb91f0f0          SDIV     r0,r1,r0
;;;3060   temp_SL-=273L;
002dae  f2a01011          SUB      r0,r0,#0x111
;;;3061   bat[1]._Tb=(signed short)temp_SL;
002db2  4995              LDR      r1,|L1.12296|
002db4  f8a10056          STRH     r0,[r1,#0x56]
;;;3062   #endif
;;;3063   
;;;3064   #ifdef UKU_6U
;;;3065   
;;;3066   if(NUMMAKB==2)
;;;3067   	{
;;;3068   	if(makb[0]._cnt<5)
;;;3069   		{
;;;3070   		if(makb[0]._T_nd[0]==0)
;;;3071   			{
;;;3072   			bat[0]._Tb=makb[0]._T[0];
;;;3073   			bat[0]._nd=0;
;;;3074   			}
;;;3075   		}
;;;3076   
;;;3077   	if(makb[1]._cnt<5)
;;;3078   		{
;;;3079   		if(makb[1]._T_nd[0]==0)
;;;3080   			{
;;;3081   			bat[1]._Tb=makb[1]._T[0];
;;;3082   			bat[1]._nd=0;
;;;3083   			}
;;;3084   		}
;;;3085   
;;;3086   	}
;;;3087   else if(NUMMAKB==4)
;;;3088   	{
;;;3089   	signed short temp_t;
;;;3090   	temp_t=-20;
;;;3091   	if(makb[0]._cnt<5)
;;;3092   		{
;;;3093   		if(makb[0]._T_nd[0]==0)
;;;3094   			{
;;;3095   			temp_t=makb[0]._T[0];
;;;3096   			bat[0]._nd=0;
;;;3097   			}
;;;3098   		}
;;;3099   	if(makb[1]._cnt<5)
;;;3100   		{
;;;3101   		if(makb[1]._T_nd[0]==0)
;;;3102   			{
;;;3103   			if(temp_t<makb[1]._T[0])
;;;3104   				{
;;;3105   				bat[0]._nd=0;
;;;3106   				temp_t=makb[1]._T[0];
;;;3107   				}
;;;3108   			}
;;;3109   		}
;;;3110   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3111   
;;;3112    	temp_t=-20;
;;;3113   	if(makb[2]._cnt<5)
;;;3114   		{
;;;3115   		if(makb[2]._T_nd[0]==0)
;;;3116   			{
;;;3117   			temp_t=makb[2]._T[0];
;;;3118   			bat[1]._nd=0;
;;;3119   			}
;;;3120   		}
;;;3121   	if(makb[3]._cnt<5)
;;;3122   		{
;;;3123   		if(makb[3]._T_nd[0]==0)
;;;3124   			{
;;;3125   			if(temp_t<makb[3]._T[0])
;;;3126   				{
;;;3127   				bat[1]._nd=0;
;;;3128   				temp_t=makb[3]._T[0];
;;;3129   				}
;;;3130   			}
;;;3131   		}
;;;3132   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3133   	}
;;;3134   
;;;3135   #endif
;;;3136   
;;;3137   
;;;3138   //Напряжение нагрузки
;;;3139   temp_SL=(signed long)adc_buff_[2];
002db8  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;3140   temp_SL*=Kuload;
002dbc  4899              LDR      r0,|L1.12324|
002dbe  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002dc2  fb01f000          MUL      r0,r1,r0
;;;3141   temp_SL/=2000L;
002dc6  f44f64fa          MOV      r4,#0x7d0
002dca  fb90f0f4          SDIV     r0,r0,r4
;;;3142   load_U=(signed short)temp_SL;
002dce  4c96              LDR      r4,|L1.12328|
002dd0  8020              STRH     r0,[r4,#0]
;;;3143   
;;;3144   #ifdef UKU_220 
;;;3145   //Напряжение нагрузки
;;;3146   temp_SL=(signed long)adc_buff_[2];
;;;3147   temp_SL*=Kuload;
;;;3148   temp_SL/=350L;
;;;3149   load_U=(signed short)temp_SL;
;;;3150   #endif
;;;3151   
;;;3152   #ifdef UKU_220_V2 
;;;3153   //Напряжение нагрузки
;;;3154   temp_SL=(signed long)adc_buff_[2];
;;;3155   temp_SL*=Kuload;
;;;3156   temp_SL/=350L;
;;;3157   load_U=(signed short)temp_SL;
;;;3158   #endif
;;;3159   
;;;3160   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3161   //Напряжение шины
;;;3162   temp_SL=(signed long)adc_buff_[1];
002dd2  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;3163   temp_SL*=Kuout;
002dd6  4895              LDR      r0,|L1.12332|
002dd8  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002ddc  fb08f800          MUL      r8,r8,r0
;;;3164   if(AUSW_MAIN==22010)temp_SL/=400L;
002de0  488e              LDR      r0,|L1.12316|
002de2  f24554fa          MOV      r4,#0x55fa
002de6  f44f7bc8          MOV      r11,#0x190
002dea  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002dec  42a0              CMP      r0,r4
002dee  d102              BNE      |L1.11766|
002df0  fb98f8fb          SDIV     r8,r8,r11
002df4  e003              B        |L1.11774|
                  |L1.11766|
;;;3165   else temp_SL/=500L;
002df6  f44f7efa          MOV      lr,#0x1f4
002dfa  fb98f8fe          SDIV     r8,r8,lr
                  |L1.11774|
;;;3166   out_U=(signed short)temp_SL;
002dfe  f8dfe230          LDR      lr,|L1.12336|
002e02  fa0ff888          SXTH     r8,r8
002e06  f8ae8000          STRH     r8,[lr,#0]
;;;3167   load_U=out_U;
002e0a  f8dfe21c          LDR      lr,|L1.12328|
002e0e  f8ae8000          STRH     r8,[lr,#0]
;;;3168   
;;;3169   //Напряжение выпрямителей
;;;3170   temp_SL=(signed long)adc_buff_[2];
;;;3171   temp_SL*=Kubps;
002e12  4f88              LDR      r7,|L1.12340|
002e14  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002e18  fb01f107          MUL      r1,r1,r7
;;;3172   if(AUSW_MAIN==22010)temp_SL/=400L;
002e1c  d102              BNE      |L1.11812|
002e1e  fb91f1fb          SDIV     r1,r1,r11
002e22  e003              B        |L1.11820|
                  |L1.11812|
;;;3173   else temp_SL/=500L;
002e24  f44f74fa          MOV      r4,#0x1f4
002e28  fb91f1f4          SDIV     r1,r1,r4
                  |L1.11820|
;;;3174   bps_U=(signed short)temp_SL;
002e2c  4c82              LDR      r4,|L1.12344|
002e2e  b209              SXTH     r1,r1
002e30  8021              STRH     r1,[r4,#0]
;;;3175   
;;;3176   if(bps_U<100)
002e32  2964              CMP      r1,#0x64
002e34  da19              BGE      |L1.11882|
;;;3177   	{
;;;3178   	char i;
;;;3179   	for(i=0;i<NUMIST;i++)
002e36  f04f0100          MOV      r1,#0
002e3a  46a6              MOV      lr,r4                 ;3174
002e3c  4c7f              LDR      r4,|L1.12348|
002e3e  f9b4b000          LDRSH    r11,[r4,#0]
002e42  e010              B        |L1.11878|
                  |L1.11844|
;;;3180   		{
;;;3181   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002e44  eb0104c1          ADD      r4,r1,r1,LSL #3
002e48  eb041701          ADD      r7,r4,r1,LSL #4
002e4c  4c7c              LDR      r4,|L1.12352|
002e4e  eb040487          ADD      r4,r4,r7,LSL #2
002e52  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
002e56  6a24              LDR      r4,[r4,#0x20]
002e58  42bc              CMP      r4,r7
002e5a  dd01              BLE      |L1.11872|
002e5c  f8ae4000          STRH     r4,[lr,#0]
                  |L1.11872|
002e60  f1010101          ADD      r1,r1,#1              ;3179
002e64  b2c9              UXTB     r1,r1                 ;3179
                  |L1.11878|
002e66  4559              CMP      r1,r11                ;3179
002e68  dbec              BLT      |L1.11844|
                  |L1.11882|
;;;3182   		}
;;;3183   	}
;;;3184   
;;;3185   //Суммарный ток выпрямителей
;;;3186   temp_SL=0;
002e6a  f04f0b00          MOV      r11,#0
;;;3187   for (i=0;i<NUMIST;i++)
002e6e  4659              MOV      r1,r11
002e70  4c72              LDR      r4,|L1.12348|
002e72  f9b47000          LDRSH    r7,[r4,#0]            ;3179
002e76  4c72              LDR      r4,|L1.12352|
002e78  e00b              B        |L1.11922|
                  |L1.11898|
;;;3188   	{
;;;3189   	temp_SL+=((signed long)bps[i]._Ii);
002e7a  eb010ec1          ADD      lr,r1,r1,LSL #3
002e7e  eb0e1e01          ADD      lr,lr,r1,LSL #4
002e82  eb040e8e          ADD      lr,r4,lr,LSL #2
002e86  f8dee024          LDR      lr,[lr,#0x24]
002e8a  44f3              ADD      r11,r11,lr
002e8c  f1010101          ADD      r1,r1,#1              ;3187
002e90  b2c9              UXTB     r1,r1                 ;3187
                  |L1.11922|
002e92  42b9              CMP      r1,r7                 ;3187
002e94  dbf1              BLT      |L1.11898|
;;;3190   	}
;;;3191   bps_I=(signed short)temp_SL;
002e96  496b              LDR      r1,|L1.12356|
002e98  f8a1b000          STRH     r11,[r1,#0]
;;;3192   
;;;3193   
;;;3194   #endif
;;;3195   
;;;3196   
;;;3197   #ifdef UKU_KONTUR
;;;3198   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3199   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3200   else ND_EXT[0]=1;
;;;3201   temp_SL=(signed long)adc_buff_[5];
;;;3202   temp_SL*=Ktext[0];
;;;3203   temp_SL/=20000L;
;;;3204   temp_SL-=273L;
;;;3205   t_ext[0]=(signed short)temp_SL;
;;;3206   #else 
;;;3207   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3208   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002e9c  4958              LDR      r1,|L1.12288|
002e9e  f6403ab7          MOV      r10,#0xbb7
002ea2  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
002ea6  4968              LDR      r1,|L1.12360|
002ea8  f2ab3e21          SUB      lr,r11,#0x321
002eac  f8cde010          STR      lr,[sp,#0x10]
002eb0  45d6              CMP      lr,r10
002eb2  d201              BCS      |L1.11960|
002eb4  700b              STRB     r3,[r1,#0]
002eb6  e000              B        |L1.11962|
                  |L1.11960|
;;;3209   else ND_EXT[0]=1;
002eb8  700a              STRB     r2,[r1,#0]
                  |L1.11962|
;;;3210   temp_SL=(signed long)adc_buff_[5];
;;;3211   temp_SL*=Ktext[0];
002eba  f8dfa190          LDR      r10,|L1.12364|
002ebe  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
002ec2  f8cda00c          STR      r10,[sp,#0xc]
002ec6  fb0afa0b          MUL      r10,r10,r11
;;;3212   temp_SL/=20000L;
002eca  f6446e20          MOV      lr,#0x4e20
002ece  fb9afafe          SDIV     r10,r10,lr
;;;3213   temp_SL-=273L;
002ed2  f2aa1a11          SUB      r10,r10,#0x111
;;;3214   t_ext[0]=(signed short)temp_SL;
002ed6  f8dfe178          LDR      lr,|L1.12368|
002eda  f8aea000          STRH     r10,[lr,#0]
;;;3215   /*
;;;3216   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3217   else ND_EXT[1]=1;
;;;3218   temp_SL=(signed long)adc_buff_[6];
;;;3219   temp_SL*=Ktext[1];
;;;3220   temp_SL/=20000L;
;;;3221   temp_SL-=273L;
;;;3222   t_ext[1]=(signed short)temp_SL;	*/
;;;3223   #endif
;;;3224   
;;;3225   #ifdef UKU_220
;;;3226   
;;;3227   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3228   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3229   else ND_EXT[1]=1;
;;;3230   temp_SL=(signed long)adc_buff_[3];
;;;3231   temp_SL*=Ktext[1];
;;;3232   temp_SL/=20000L;
;;;3233   temp_SL-=273L;
;;;3234   t_ext[1]=(signed short)temp_SL;
;;;3235   
;;;3236   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3237   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3238   else ND_EXT[2]=1;
;;;3239   temp_SL=(signed long)adc_buff_[10];
;;;3240   temp_SL*=Ktext[2];
;;;3241   temp_SL/=20000L;
;;;3242   temp_SL-=273L;
;;;3243   t_ext[2]=(signed short)temp_SL;
;;;3244   
;;;3245   #else
;;;3246   
;;;3247   
;;;3248   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3249   
;;;3250   //Внешний датчик температуры 
;;;3251   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002ede  f8dda014          LDR      r10,[sp,#0x14]
002ee2  f6403eb7          MOV      lr,#0xbb7
002ee6  45f2              CMP      r10,lr
002ee8  d201              BCS      |L1.12014|
002eea  700b              STRB     r3,[r1,#0]
002eec  e000              B        |L1.12016|
                  |L1.12014|
;;;3252   else ND_EXT[0]=1;
002eee  700a              STRB     r2,[r1,#0]
                  |L1.12016|
;;;3253   temp_SL=(signed long)adc_buff_[6];
;;;3254   temp_SL*=Ktext[0];
002ef0  f8dda00c          LDR      r10,[sp,#0xc]
002ef4  fb0afa09          MUL      r10,r10,r9
;;;3255   temp_SL/=20000L;
002ef8  f6446920          MOV      r9,#0x4e20
002efc  fb9af9f9          SDIV     r9,r10,r9
;;;3256   temp_SL-=273L;
002f00  f2a91911          SUB      r9,r9,#0x111
;;;3257   t_ext[0]=(signed short)temp_SL;
002f04  f8dfe148          LDR      lr,|L1.12368|
002f08  f8ae9000          STRH     r9,[lr,#0]
;;;3258   
;;;3259   //Внешний датчик температуры №2
;;;3260   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002f0c  f8dd9010          LDR      r9,[sp,#0x10]
002f10  f6403ab7          MOV      r10,#0xbb7
002f14  45d1              CMP      r9,r10
002f16  d201              BCS      |L1.12060|
002f18  704b              STRB     r3,[r1,#1]
002f1a  e000              B        |L1.12062|
                  |L1.12060|
;;;3261   else ND_EXT[1]=1;
002f1c  704a              STRB     r2,[r1,#1]
                  |L1.12062|
;;;3262   temp_SL=(signed long)adc_buff_[5];
;;;3263   temp_SL*=Ktext[1];
002f1e  4a4b              LDR      r2,|L1.12364|
002f20  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
002f24  fb02f20b          MUL      r2,r2,r11
;;;3264   temp_SL/=20000L;
002f28  f6446920          MOV      r9,#0x4e20
002f2c  fb92f2f9          SDIV     r2,r2,r9
;;;3265   temp_SL-=273L;
002f30  f2a21211          SUB      r2,r2,#0x111
;;;3266   t_ext[1]=(signed short)temp_SL;
002f34  fa0ffa82          SXTH     r10,r2
002f38  4a45              LDR      r2,|L1.12368|
002f3a  f8a2a002          STRH     r10,[r2,#2]
;;;3267   #else
;;;3268   
;;;3269   
;;;3270   
;;;3271   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3272   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3273   else ND_EXT[1]=1;
;;;3274   temp_SL=(signed long)adc_buff_[6];
;;;3275   temp_SL*=Ktext[1];
;;;3276   temp_SL/=20000L;
;;;3277   temp_SL-=273L;
;;;3278   t_ext[1]=(signed short)temp_SL;
;;;3279   
;;;3280   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3281   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3282   else ND_EXT[2]=1;
;;;3283   temp_SL=(signed long)adc_buff_[3];
;;;3284   temp_SL*=Ktext[2];
;;;3285   temp_SL/=20000L;
;;;3286   temp_SL-=273L;
;;;3287   t_ext[2]=(signed short)temp_SL;
;;;3288   
;;;3289   #endif
;;;3290   #endif
;;;3291   
;;;3292   #ifdef UKU_220_V2
;;;3293   
;;;3294   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3295   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3296   else ND_EXT[1]=1;
;;;3297   temp_SL=(signed long)adc_buff_[3];
;;;3298   temp_SL*=Ktext[1];
;;;3299   temp_SL/=20000L;
;;;3300   temp_SL-=273L;
;;;3301   t_ext[1]=(signed short)temp_SL;
;;;3302   
;;;3303   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3304   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3305   else ND_EXT[2]=1;
;;;3306   temp_SL=(signed long)adc_buff_[10];
;;;3307   temp_SL*=Ktext[2];
;;;3308   temp_SL/=20000L;
;;;3309   temp_SL-=273L;
;;;3310   t_ext[2]=(signed short)temp_SL;
;;;3311   
;;;3312   #else
;;;3313   
;;;3314   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3315   //Ток батареи
;;;3316   if(bps[8]._device==dIBAT_METR)
002f3e  f8942320          LDRB     r2,[r4,#0x320]  ; bps
;;;3317   	{
;;;3318   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3319   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3320   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3321   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3322   	if(!bIBAT_SMKLBR)
;;;3323   		{
;;;3324   		signed long temp_SL;
;;;3325   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3326   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3327   		temp_SL*=(signed long)Kibat1[0];
;;;3328   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3329   	
;;;3330   		Ib_ips_termokompensat =(signed short)temp_SL;
002f42  f8df9110          LDR      r9,|L1.12372|
002f46  2a09              CMP      r2,#9                 ;3316
002f48  d14e              BNE      |L1.12264|
002f4a  f8942326          LDRB     r2,[r4,#0x326]        ;3318  ; bps
002f4e  f894b327          LDRB     r11,[r4,#0x327]       ;3318  ; bps
002f52  f8dfe104          LDR      lr,|L1.12376|
002f56  eb02220b          ADD      r2,r2,r11,LSL #8      ;3318
002f5a  f8ce2000          STR      r2,[lr,#0]            ;3318  ; ibat_metr_buff_
002f5e  9202              STR      r2,[sp,#8]            ;3318
002f60  f8942328          LDRB     r2,[r4,#0x328]        ;3319  ; bps
002f64  f894b329          LDRB     r11,[r4,#0x329]       ;3319  ; bps
002f68  eb02220b          ADD      r2,r2,r11,LSL #8      ;3319
002f6c  f8ce2004          STR      r2,[lr,#4]            ;3319  ; ibat_metr_buff_
002f70  f894b32a          LDRB     r11,[r4,#0x32a]       ;3320  ; bps
002f74  f894e32b          LDRB     lr,[r4,#0x32b]        ;3320  ; bps
002f78  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;3320
002f7c  f8dfe0dc          LDR      lr,|L1.12380|
002f80  fa0ffb8b          SXTH     r11,r11               ;3320
002f84  f8aeb000          STRH     r11,[lr,#0]           ;3320
002f88  f1bb0f00          CMP      r11,#0                ;3321
002f8c  d005              BEQ      |L1.12186|
002f8e  f8dfb0d0          LDR      r11,|L1.12384|
002f92  f04f0e32          MOV      lr,#0x32              ;3321
002f96  f8abe000          STRH     lr,[r11,#0]           ;3321
                  |L1.12186|
002f9a  d175              BNE      |L1.12424|
002f9c  f8ddb008          LDR      r11,[sp,#8]           ;3325
002fa0  ebab0b02          SUB      r11,r11,r2            ;3326
002fa4  4a1c              LDR      r2,|L1.12312|
002fa6  f9b22000          LDRSH    r2,[r2,#0]            ;3327  ; Kibat1
002faa  fb02f20b          MUL      r2,r2,r11             ;3327
002fae  f5a04ba8          SUB      r11,r0,#0x5400        ;3328
002fb2  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3328
002fb6  d00f              BEQ      |L1.12248|
002fb8  f1bb0b01          SUBS     r11,r11,#1            ;3328
002fbc  d00c              BEQ      |L1.12248|
002fbe  4560              CMP      r0,r12                ;3328
002fc0  d00a              BEQ      |L1.12248|
002fc2  42a8              CMP      r0,r5                 ;3328
002fc4  d008              BEQ      |L1.12248|
002fc6  f1bb0534          SUBS     r5,r11,#0x34          ;3328
002fca  d005              BEQ      |L1.12248|
002fcc  3528              ADDS     r5,r5,#0x28           ;3328
002fce  d003              BEQ      |L1.12248|
002fd0  3d14              SUBS     r5,r5,#0x14           ;3328
002fd2  d001              BEQ      |L1.12248|
002fd4  1e6d              SUBS     r5,r5,#1              ;3328
002fd6  d103              BNE      |L1.12256|
                  |L1.12248|
002fd8  f44f65fa          MOV      r5,#0x7d0             ;3328
002fdc  fb92f2f5          SDIV     r2,r2,r5              ;3328
                  |L1.12256|
002fe0  b215              SXTH     r5,r2
002fe2  f8a95000          STRH     r5,[r9,#0]
;;;3331   		if(bIBAT_SMKLBR_cnt)
002fe6  e03d              B        |L1.12388|
                  |L1.12264|
002fe8  e04e              B        |L1.12424|
002fea  0000              DCW      0x0000
                  |L1.12268|
                          DCD      net_U
                  |L1.12272|
                          DCD      Kunet
                  |L1.12276|
                          DCD      ||area_number.25||
                  |L1.12280|
                          DCD      net_F
                  |L1.12284|
                          DCD      net_F3
                  |L1.12288|
                          DCD      ||.bss||+0x40c
                  |L1.12292|
                          DCD      Kubat
                  |L1.12296|
                          DCD      bat
                  |L1.12300|
                          DCD      Kubatm
                  |L1.12304|
                          DCD      ad7705_buff_
                  |L1.12308|
                          DCD      Kibat0
                  |L1.12312|
                          DCD      Kibat1
                  |L1.12316|
                          DCD      AUSW_MAIN
                  |L1.12320|
                          DCD      Ktbat
                  |L1.12324|
                          DCD      Kuload
                  |L1.12328|
                          DCD      load_U
                  |L1.12332|
                          DCD      Kuout
                  |L1.12336|
                          DCD      out_U
                  |L1.12340|
                          DCD      Kubps
                  |L1.12344|
                          DCD      bps_U
                  |L1.12348|
                          DCD      NUMIST
                  |L1.12352|
                          DCD      bps
                  |L1.12356|
                          DCD      bps_I
                  |L1.12360|
                          DCD      ND_EXT
                  |L1.12364|
                          DCD      Ktext
                  |L1.12368|
                          DCD      t_ext
                  |L1.12372|
                          DCD      Ib_ips_termokompensat
                  |L1.12376|
                          DCD      ibat_metr_buff_
                  |L1.12380|
                          DCD      bIBAT_SMKLBR
                  |L1.12384|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12388|
003064  f8dfc418          LDR      r12,|L1.13440|
;;;3332   			{
;;;3333   			bIBAT_SMKLBR_cnt--;
;;;3334   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
003068  f8dfb418          LDR      r11,|L1.13444|
00306c  f9bc2000          LDRSH    r2,[r12,#0]           ;3331  ; bIBAT_SMKLBR_cnt
003070  b142              CBZ      r2,|L1.12420|
003072  f1a20201          SUB      r2,r2,#1              ;3333
003076  f8ac2000          STRH     r2,[r12,#0]           ;3333
00307a  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
00307e  f8a92000          STRH     r2,[r9,#0]
003082  e001              B        |L1.12424|
                  |L1.12420|
;;;3335   			}
;;;3336   		else 
;;;3337   			{
;;;3338   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
003084  f8ab5000          STRH     r5,[r11,#0]
                  |L1.12424|
;;;3339   			}
;;;3340   		}
;;;3341   	}
;;;3342   
;;;3343   bat[0]._Ub=load_U;
003088  4aff              LDR      r2,|L1.13448|
00308a  f8a28002          STRH     r8,[r2,#2]
00308e  f8cd8004          STR      r8,[sp,#4]
;;;3344   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
003092  f5a045ac          SUB      r5,r0,#0x5600
003096  3d02              SUBS     r5,#2
003098  d103              BNE      |L1.12450|
00309a  8910              LDRH     r0,[r2,#8]  ; bat
00309c  f8a90000          STRH     r0,[r9,#0]
0030a0  e002              B        |L1.12456|
                  |L1.12450|
;;;3345   else bat[0]._Ib=Ib_ips_termokompensat;
0030a2  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
0030a6  8110              STRH     r0,[r2,#8]
                  |L1.12456|
;;;3346   
;;;3347   #endif
;;;3348   #endif
;;;3349   
;;;3350   
;;;3351   #ifdef UKU_TELECORE2015
;;;3352   
;;;3353   //Внешний датчик температуры №1
;;;3354   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3355   else ND_EXT[0]=1;
;;;3356   temp_SL=(signed long)adc_buff_[7];
;;;3357   temp_SL*=Ktext[0];
;;;3358   temp_SL/=20000L;
;;;3359   temp_SL-=273L;
;;;3360   t_ext[0]=(signed short)temp_SL;
;;;3361   
;;;3362   
;;;3363   //Внешний датчик температуры №2
;;;3364   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3365   else ND_EXT[1]=1;
;;;3366   temp_SL=(signed long)adc_buff_[6];
;;;3367   temp_SL*=Ktext[1];
;;;3368   temp_SL/=20000L;
;;;3369   temp_SL-=273L;
;;;3370   t_ext[1]=(signed short)temp_SL;
;;;3371   
;;;3372   #endif
;;;3373   
;;;3374   #ifdef UKU_TELECORE2017
;;;3375   
;;;3376   //Внешний датчик температуры №1
;;;3377   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3378   else ND_EXT[0]=1;
;;;3379   temp_SL=(signed long)adc_buff_[7];
;;;3380   temp_SL*=Ktext[0];
;;;3381   temp_SL/=20000L;
;;;3382   temp_SL-=273L;
;;;3383   t_ext[0]=(signed short)temp_SL;
;;;3384   
;;;3385   
;;;3386   //Внешний датчик температуры №2
;;;3387   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3388   else ND_EXT[1]=1;
;;;3389   temp_SL=(signed long)adc_buff_[6];
;;;3390   temp_SL*=Ktext[1];
;;;3391   temp_SL/=20000L;
;;;3392   temp_SL-=273L;
;;;3393   t_ext[1]=(signed short)temp_SL;
;;;3394   
;;;3395   #endif
;;;3396   
;;;3397   //напряжение ввода
;;;3398   temp_SL=(signed long)adc_buff_ext_[0];
0030a8  f8dfc3e0          LDR      r12,|L1.13452|
0030ac  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;3399   temp_SL*=Kunet_ext[0];
0030b0  f8df83dc          LDR      r8,|L1.13456|
0030b4  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
0030b8  4368              MULS     r0,r5,r0
;;;3400   temp_SL/=4000L;
0030ba  f44f6b7a          MOV      r11,#0xfa0
0030be  fb90f0fb          SDIV     r0,r0,r11
;;;3401   Uvv[0]=(signed short)temp_SL;
0030c2  4df4              LDR      r5,|L1.13460|
0030c4  b280              UXTH     r0,r0
0030c6  8028              STRH     r0,[r5,#0]
;;;3402   if(Uvv[0]<100) Uvv0=Uvv[0];
0030c8  f8dfe3cc          LDR      lr,|L1.13464|
0030cc  2864              CMP      r0,#0x64
0030ce  d202              BCS      |L1.12502|
0030d0  f8ae0000          STRH     r0,[lr,#0]
0030d4  e003              B        |L1.12510|
                  |L1.12502|
;;;3403   else Uvv0=net_U;
0030d6  48f1              LDR      r0,|L1.13468|
0030d8  8800              LDRH     r0,[r0,#0]  ; net_U
0030da  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12510|
;;;3404   
;;;3405   //напряжение пэс
;;;3406   temp_SL=(signed long)adc_buff_ext_[1];
0030de  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;3407   temp_SL*=Kunet_ext[1];
0030e2  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
0030e6  fb00f00c          MUL      r0,r0,r12
;;;3408   temp_SL/=4000L;
0030ea  fb90f0fb          SDIV     r0,r0,r11
;;;3409   Uvv[1]=(signed short)temp_SL;
0030ee  8068              STRH     r0,[r5,#2]
;;;3410   
;;;3411   
;;;3412   //напряжение ввода трехфазное
;;;3413   temp_SL=(signed long)eb2_data_short[0];
0030f0  4deb              LDR      r5,|L1.13472|
0030f2  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;3414   temp_SL*=Kvv_eb2[0];
0030f6  f8dfc3ac          LDR      r12,|L1.13476|
0030fa  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
0030fe  fb08f800          MUL      r8,r8,r0
;;;3415   temp_SL/=6000L;
003102  f2417070          MOV      r0,#0x1770
003106  fb98fbf0          SDIV     r11,r8,r0
;;;3416   Uvv_eb2[0]=(signed short)temp_SL;
00310a  f8df839c          LDR      r8,|L1.13480|
00310e  f8a8b000          STRH     r11,[r8,#0]
;;;3417   
;;;3418   temp_SL=(signed long)eb2_data_short[1];
003112  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;3419   temp_SL*=Kvv_eb2[1];
003116  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
00311a  fb0efe0b          MUL      lr,lr,r11
;;;3420   temp_SL/=6000L;
00311e  fb9efbf0          SDIV     r11,lr,r0
;;;3421   Uvv_eb2[1]=(signed short)temp_SL;
003122  f8a8b002          STRH     r11,[r8,#2]
;;;3422   
;;;3423   temp_SL=(signed long)eb2_data_short[2];
003126  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;3424   temp_SL*=Kvv_eb2[2];
00312a  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
00312e  fb0cfc0b          MUL      r12,r12,r11
;;;3425   temp_SL/=6000L;
003132  fb9cfcf0          SDIV     r12,r12,r0
;;;3426   Uvv_eb2[2]=(signed short)temp_SL;
003136  f8a8c004          STRH     r12,[r8,#4]
;;;3427   
;;;3428   //напряжение пэс трехфазное
;;;3429   temp_SL=(signed long)eb2_data_short[3];
00313a  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;3430   temp_SL*=Kpes_eb2[0];
00313e  f8dfc36c          LDR      r12,|L1.13484|
003142  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
003146  fb08f80b          MUL      r8,r8,r11
;;;3431   temp_SL/=6000L;
00314a  fb98fbf0          SDIV     r11,r8,r0
;;;3432   Upes_eb2[0]=(signed short)temp_SL;
00314e  f8df8360          LDR      r8,|L1.13488|
003152  f8a8b000          STRH     r11,[r8,#0]
;;;3433   
;;;3434   temp_SL=(signed long)eb2_data_short[4];
003156  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;3435   temp_SL*=Kpes_eb2[1];
00315a  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
00315e  fb0efe0b          MUL      lr,lr,r11
;;;3436   temp_SL/=6000L;
003162  fb9efbf0          SDIV     r11,lr,r0
;;;3437   Upes_eb2[1]=(signed short)temp_SL;
003166  f8a8b002          STRH     r11,[r8,#2]
;;;3438   
;;;3439   temp_SL=(signed long)eb2_data_short[5];
00316a  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;3440   temp_SL*=Kpes_eb2[2];
00316e  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
003172  fb05f50b          MUL      r5,r5,r11
;;;3441   temp_SL/=6000L;
003176  fb95f0f0          SDIV     r0,r5,r0
;;;3442   Upes_eb2[2]=(signed short)temp_SL;
00317a  f8a80004          STRH     r0,[r8,#4]
;;;3443   
;;;3444   //Вычисление температуры шкафа
;;;3445   
;;;3446   ibt._T[0]=t_ext[1]+273;
00317e  f20a1a11          ADD      r10,r10,#0x111
003182  fa0ffc8a          SXTH     r12,r10
003186  f8dfa330          LDR      r10,|L1.13496|
00318a  48ca              LDR      r0,|L1.13492|
00318c  f8aac000          STRH     r12,[r10,#0]
;;;3447   ibt._T[1]=t_ext[2]+273;
003190  8880              LDRH     r0,[r0,#4]  ; t_ext
003192  f2001011          ADD      r0,r0,#0x111
003196  fa0ff880          SXTH     r8,r0
00319a  f8aa8002          STRH     r8,[r10,#2]
;;;3448   
;;;3449   ibt._nd[0]=ND_EXT[1];
00319e  784d              LDRB     r5,[r1,#1]  ; ND_EXT
0031a0  f88a5008          STRB     r5,[r10,#8]
;;;3450   ibt._nd[1]=ND_EXT[2];
0031a4  7888              LDRB     r0,[r1,#2]  ; ND_EXT
0031a6  f88a0009          STRB     r0,[r10,#9]
;;;3451   
;;;3452   #ifndef UKU_TELECORE2015
;;;3453   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3454   	{
;;;3455   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
0031aa  49c4              LDR      r1,|L1.13500|
0031ac  b905              CBNZ     r5,|L1.12720|
0031ae  b110              CBZ      r0,|L1.12726|
                  |L1.12720|
;;;3456   	}
;;;3457   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
0031b0  2d01              CMP      r5,#1
0031b2  d00a              BEQ      |L1.12746|
0031b4  e00a              B        |L1.12748|
                  |L1.12726|
0031b6  eb0c0008          ADD      r0,r12,r8             ;3455
0031ba  eb0075d0          ADD      r5,r0,r0,LSR #31      ;3455
0031be  f46f7088          MVN      r0,#0x110             ;3455
0031c2  eb000065          ADD      r0,r0,r5,ASR #1       ;3455
0031c6  8008              STRH     r0,[r1,#0]            ;3455
0031c8  e01e              B        |L1.12808|
                  |L1.12746|
0031ca  b108              CBZ      r0,|L1.12752|
                  |L1.12748|
;;;3458   	{
;;;3459   	t_box=ibt._T[1]-273;
;;;3460   	}
;;;3461   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
0031cc  b12d              CBZ      r5,|L1.12762|
0031ce  e006              B        |L1.12766|
                  |L1.12752|
0031d0  f2a81811          SUB      r8,r8,#0x111          ;3459
0031d4  f8a18000          STRH     r8,[r1,#0]            ;3459
0031d8  e016              B        |L1.12808|
                  |L1.12762|
0031da  2801              CMP      r0,#1
0031dc  d002              BEQ      |L1.12772|
                  |L1.12766|
;;;3462   	{
;;;3463   	t_box=ibt._T[0]-273;
;;;3464   	}
;;;3465   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
0031de  2d01              CMP      r5,#1
0031e0  d005              BEQ      |L1.12782|
0031e2  e011              B        |L1.12808|
                  |L1.12772|
0031e4  f2ac1c11          SUB      r12,r12,#0x111        ;3463
0031e8  f8a1c000          STRH     r12,[r1,#0]           ;3463
0031ec  e00c              B        |L1.12808|
                  |L1.12782|
0031ee  2801              CMP      r0,#1
0031f0  d10a              BNE      |L1.12808|
;;;3466   	{
;;;3467   	if(t_ext_can_nd<5)t_box= t_ext_can;
0031f2  48b3              LDR      r0,|L1.13504|
0031f4  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
0031f6  2805              CMP      r0,#5
0031f8  d203              BCS      |L1.12802|
0031fa  48b2              LDR      r0,|L1.13508|
0031fc  8800              LDRH     r0,[r0,#0]  ; t_ext_can
0031fe  8008              STRH     r0,[r1,#0]
003200  e002              B        |L1.12808|
                  |L1.12802|
;;;3468   	else t_box=20;
003202  f04f0014          MOV      r0,#0x14
003206  8008              STRH     r0,[r1,#0]
                  |L1.12808|
;;;3469   	}
;;;3470   #endif
;;;3471   /*
;;;3472   //Вычисление температуры шкафа
;;;3473   
;;;3474   ibt._T[0]=bat[0]._Tb+273;
;;;3475   ibt._T[1]=bat[1]._Tb+273;
;;;3476   ibt._T[2]=t_ext[1]+273;
;;;3477   ibt._T[3]=t_ext[2]+273;
;;;3478   
;;;3479   ibt._nd[0]=bat[0]._nd;
;;;3480   ibt._nd[1]=bat[1]._nd;
;;;3481   ibt._nd[2]=ND_EXT[1];
;;;3482   ibt._nd[3]=ND_EXT[2];
;;;3483   
;;;3484   ibt._avg1=0;
;;;3485   ibt._avg_cnt=4;
;;;3486   
;;;3487   if(ibt._nd[0]==0)
;;;3488   	{
;;;3489   	ibt._avg1+=ibt._T[0];
;;;3490   	}
;;;3491   else 
;;;3492   	{
;;;3493   	ibt._avg_cnt--;
;;;3494   	}
;;;3495   
;;;3496   if(ibt._nd[1]==0)
;;;3497   	{
;;;3498   	ibt._avg1+=ibt._T[1];
;;;3499   	}
;;;3500   else 
;;;3501   	{
;;;3502   	ibt._avg_cnt--;
;;;3503   	}
;;;3504   
;;;3505   if(ibt._nd[2]==0)
;;;3506   	{
;;;3507   	ibt._avg1+=ibt._T[2];
;;;3508   	}
;;;3509   else 
;;;3510   	{
;;;3511   	ibt._avg_cnt--;
;;;3512   	}
;;;3513   
;;;3514   if(ibt._nd[3]==0)
;;;3515   	{
;;;3516   	ibt._avg1+=ibt._T[3];
;;;3517   	}
;;;3518   else 
;;;3519   	{
;;;3520   	ibt._avg_cnt--;
;;;3521   	}
;;;3522   
;;;3523   if(ibt._avg_cnt==0)
;;;3524   	{
;;;3525   	}
;;;3526   else
;;;3527   	{
;;;3528   	ibt._avg1/=ibt._avg_cnt;
;;;3529   	}
;;;3530   
;;;3531   
;;;3532   if(ibt._nd[0]!=0)
;;;3533   	{
;;;3534   	ibt._T_dispers[0]=0;
;;;3535   	}
;;;3536   else 
;;;3537   	{
;;;3538   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3539   	}
;;;3540   
;;;3541   if(ibt._nd[1]!=0)
;;;3542   	{
;;;3543   	ibt._T_dispers[1]=0;
;;;3544   	}
;;;3545   else 
;;;3546   	{
;;;3547   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3548   	}
;;;3549   
;;;3550   if(ibt._nd[2]!=0)
;;;3551   	{
;;;3552   	ibt._T_dispers[2]=0;
;;;3553   	}
;;;3554   else 
;;;3555   	{
;;;3556   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3557   	}
;;;3558   
;;;3559   if(ibt._nd[3]!=0)
;;;3560   	{
;;;3561   	ibt._T_dispers[3]=0;
;;;3562   	}
;;;3563   else 
;;;3564   	{
;;;3565   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3566   	}
;;;3567   
;;;3568   if(	ibt._nd[0]&&
;;;3569   	ibt._nd[1]&&
;;;3570   	ibt._nd[2]&&
;;;3571   	ibt._nd[3]
;;;3572   	)
;;;3573   	{
;;;3574   	t_box=(bps[0]._Ti);
;;;3575   	}
;;;3576   
;;;3577   else if(	ibt._nd[0]||
;;;3578   	ibt._nd[1]||
;;;3579   	ibt._nd[2]||
;;;3580   	ibt._nd[3]
;;;3581   	)
;;;3582   	{
;;;3583   	t_box=(ibt._avg1-273);
;;;3584   	}
;;;3585   else 
;;;3586   	{
;;;3587   	ibt._max_dispers_num=0;
;;;3588   	ibt._max_dispers=ibt._T_dispers[0];
;;;3589   
;;;3590   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3591   		{
;;;3592   		ibt._max_dispers_num=1;
;;;3593   		ibt._max_dispers=ibt._T_dispers[1];
;;;3594   		}
;;;3595   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3596   		{
;;;3597   		ibt._max_dispers_num=2;
;;;3598   		ibt._max_dispers=ibt._T_dispers[2];
;;;3599   		}
;;;3600   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3601   		{
;;;3602   		ibt._max_dispers_num=3;
;;;3603   		ibt._max_dispers=ibt._T_dispers[3];
;;;3604   		}
;;;3605   
;;;3606   	ibt._avg2=0;
;;;3607   
;;;3608   	if(ibt._max_dispers_num!=0)
;;;3609   		{
;;;3610   		ibt._avg2+=ibt._T[0];
;;;3611   		}
;;;3612   	if(ibt._max_dispers_num!=1)
;;;3613   		{
;;;3614   		ibt._avg2+=ibt._T[1];
;;;3615   		}
;;;3616   	if(ibt._max_dispers_num!=2)
;;;3617   		{
;;;3618   		ibt._avg2+=ibt._T[2];
;;;3619   		}
;;;3620   	if(ibt._max_dispers_num!=3)
;;;3621   		{
;;;3622   		ibt._avg2+=ibt._T[3];
;;;3623   		}
;;;3624   
;;;3625   	t_box=(ibt._avg2/3)-273;
;;;3626   
;;;3627   	}*/
;;;3628   
;;;3629   
;;;3630   //*********************************************
;;;3631   
;;;3632   #ifndef TELECORE
;;;3633   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
003208  49af              LDR      r1,|L1.13512|
00320a  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
00320c  2855              CMP      r0,#0x55
00320e  d105              BNE      |L1.12828|
003210  9801              LDR      r0,[sp,#4]
003212  28c8              CMP      r0,#0xc8
003214  dd02              BLE      |L1.12828|
003216  8910              LDRH     r0,[r2,#8]  ; bat
003218  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12828|
;;;3634   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
00321c  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
00321e  2855              CMP      r0,#0x55
003220  d10b              BNE      |L1.12858|
003222  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
003226  28c8              CMP      r0,#0xc8
003228  dd07              BLE      |L1.12858|
00322a  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
00322e  f9b21008          LDRSH    r1,[r2,#8]  ; bat
003232  4288              CMP      r0,r1
003234  dd01              BLE      |L1.12858|
003236  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12858|
;;;3635   #endif
;;;3636   
;;;3637   #ifdef TELECORE
;;;3638   Ibmax=0;
;;;3639   /*
;;;3640   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3641   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3642   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3643   */
;;;3644   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3645   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3646   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3647   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3648   #endif
;;;3649   //Ibmax=bat[0]._Ib;
;;;3650   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3651   
;;;3652   #ifdef UKU_TELECORE2017
;;;3653   Ibmax=0;
;;;3654   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3655   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3656   #endif
;;;3657   
;;;3658   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3659   Ibmax=Ib_ips_termokompensat;
00323a  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
00323e  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3660   #endif
;;;3661   for(i=0;i<NUMIST;i++)
003242  f04f0100          MOV      r1,#0
003246  e02f              B        |L1.12968|
                  |L1.12872|
;;;3662   	{
;;;3663   	if(bps[i]._cnt<25)
003248  eb0100c1          ADD      r0,r1,r1,LSL #3
00324c  eb001001          ADD      r0,r0,r1,LSL #4
003250  eb040080          ADD      r0,r4,r0,LSL #2
003254  78c5              LDRB     r5,[r0,#3]
003256  2d19              CMP      r5,#0x19
003258  d21c              BCS      |L1.12948|
;;;3664        	{
;;;3665        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
00325a  7985              LDRB     r5,[r0,#6]
00325c  79c6              LDRB     r6,[r0,#7]
00325e  eb052506          ADD      r5,r5,r6,LSL #8
003262  6245              STR      r5,[r0,#0x24]
;;;3666        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
003264  7a05              LDRB     r5,[r0,#8]
003266  7a46              LDRB     r6,[r0,#9]
003268  eb052506          ADD      r5,r5,r6,LSL #8
00326c  6205              STR      r5,[r0,#0x20]
;;;3667        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
00326e  7a85              LDRB     r5,[r0,#0xa]
003270  7ac6              LDRB     r6,[r0,#0xb]
003272  eb052506          ADD      r5,r5,r6,LSL #8
003276  61c5              STR      r5,[r0,#0x1c]
;;;3668        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
003278  7b05              LDRB     r5,[r0,#0xc]
00327a  6285              STR      r5,[r0,#0x28]
;;;3669        	bps[i]._adr_ee=bps[i]._buff[7];
00327c  7b45              LDRB     r5,[r0,#0xd]
00327e  f8805056          STRB     r5,[r0,#0x56]
;;;3670        	bps[i]._flags_tm=bps[i]._buff[8];
003282  7b85              LDRB     r5,[r0,#0xe]
003284  f8805042          STRB     r5,[r0,#0x42]
;;;3671   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
003288  7c05              LDRB     r5,[r0,#0x10]
00328a  7c46              LDRB     r6,[r0,#0x11]
00328c  eb052506          ADD      r5,r5,r6,LSL #8
003290  6505              STR      r5,[r0,#0x50]
003292  e006              B        |L1.12962|
                  |L1.12948|
;;;3672        	} 
;;;3673   	else 
;;;3674        	{
;;;3675        	bps[i]._Uii=0; 
003294  61c3              STR      r3,[r0,#0x1c]
;;;3676        	bps[i]._Ii=0;
003296  6243              STR      r3,[r0,#0x24]
;;;3677        	bps[i]._Uin=0;
003298  6203              STR      r3,[r0,#0x20]
;;;3678        	bps[i]._Ti=0;
00329a  6283              STR      r3,[r0,#0x28]
;;;3679        	bps[i]._flags_tm=0; 
00329c  f8803042          STRB     r3,[r0,#0x42]
;;;3680   	     bps[i]._rotor=0;    
0032a0  6503              STR      r3,[r0,#0x50]
                  |L1.12962|
0032a2  f1010101          ADD      r1,r1,#1              ;3661
0032a6  b2c9              UXTB     r1,r1                 ;3661
                  |L1.12968|
0032a8  42b9              CMP      r1,r7                 ;3661
0032aa  dbcd              BLT      |L1.12872|
;;;3681        	}
;;;3682        
;;;3683        }
;;;3684   
;;;3685   load_I=0;
0032ac  4d87              LDR      r5,|L1.13516|
;;;3686   #ifdef TELECORE
;;;3687   
;;;3688   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3689   	{
;;;3690   	load_I-=lakb[i]._ch_curr/10;
;;;3691   	}*/
;;;3692   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3693   #elif UKU_TELECORE2017
;;;3694   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3695   #else
;;;3696   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
0032ae  f9b21008          LDRSH    r1,[r2,#8]  ; bat
0032b2  f04f000a          MOV      r0,#0xa
0032b6  fb91f1f0          SDIV     r1,r1,r0
0032ba  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
0032be  fb92f0f0          SDIV     r0,r2,r0
0032c2  4408              ADD      r0,r0,r1
0032c4  f1c00000          RSB      r0,r0,#0
0032c8  b206              SXTH     r6,r0
0032ca  802e              STRH     r6,[r5,#0]
;;;3697   #endif
;;;3698   Isumm=0;
0032cc  4a80              LDR      r2,|L1.13520|
0032ce  8013              STRH     r3,[r2,#0]
;;;3699   
;;;3700   for(i=0;i<NUMIST;i++)
0032d0  f04f0000          MOV      r0,#0
0032d4  e012              B        |L1.13052|
                  |L1.13014|
;;;3701        {
;;;3702        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0032d6  eb0001c0          ADD      r1,r0,r0,LSL #3
0032da  eb011100          ADD      r1,r1,r0,LSL #4
0032de  eb040181          ADD      r1,r4,r1,LSL #2
0032e2  f891c003          LDRB     r12,[r1,#3]
0032e6  f1bc0f05          CMP      r12,#5
0032ea  d204              BCS      |L1.13046|
0032ec  6a49              LDR      r1,[r1,#0x24]
0032ee  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
0032f2  4461              ADD      r1,r1,r12
0032f4  8011              STRH     r1,[r2,#0]
                  |L1.13046|
0032f6  f1000001          ADD      r0,r0,#1              ;3700
0032fa  b2c0              UXTB     r0,r0                 ;3700
                  |L1.13052|
0032fc  42b8              CMP      r0,r7                 ;3700
0032fe  dbea              BLT      |L1.13014|
;;;3703        }  
;;;3704        
;;;3705   load_I=load_I+Isumm;
003300  8810              LDRH     r0,[r2,#0]  ; Isumm
003302  4430              ADD      r0,r0,r6
003304  b200              SXTH     r0,r0
003306  8028              STRH     r0,[r5,#0]
;;;3706   if(load_I<0)load_I=0;
003308  2800              CMP      r0,#0
00330a  da00              BGE      |L1.13070|
00330c  802b              STRH     r3,[r5,#0]
                  |L1.13070|
;;;3707   
;;;3708   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3709   load_I=0;
00330e  802b              STRH     r3,[r5,#0]
;;;3710   
;;;3711   Isumm=0;
003310  8013              STRH     r3,[r2,#0]
;;;3712   
;;;3713   for(i=0;i<NUMIST;i++)
003312  f04f0000          MOV      r0,#0
003316  e00f              B        |L1.13112|
                  |L1.13080|
;;;3714        {
;;;3715        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003318  eb0001c0          ADD      r1,r0,r0,LSL #3
00331c  eb011100          ADD      r1,r1,r0,LSL #4
003320  eb040181          ADD      r1,r4,r1,LSL #2
003324  78ce              LDRB     r6,[r1,#3]
003326  2e05              CMP      r6,#5
003328  d203              BCS      |L1.13106|
00332a  6a49              LDR      r1,[r1,#0x24]
00332c  8816              LDRH     r6,[r2,#0]  ; Isumm
00332e  4431              ADD      r1,r1,r6
003330  8011              STRH     r1,[r2,#0]
                  |L1.13106|
003332  f1000001          ADD      r0,r0,#1              ;3713
003336  b2c0              UXTB     r0,r0                 ;3713
                  |L1.13112|
003338  42b8              CMP      r0,r7                 ;3713
00333a  dbed              BLT      |L1.13080|
;;;3716        }  
;;;3717        
;;;3718   load_I=load_I+Isumm;
00333c  8811              LDRH     r1,[r2,#0]  ; Isumm
00333e  eb030001          ADD      r0,r3,r1
003342  b200              SXTH     r0,r0
003344  8028              STRH     r0,[r5,#0]
;;;3719   if(load_I<0)load_I=0;
003346  2800              CMP      r0,#0
003348  da00              BGE      |L1.13132|
00334a  802b              STRH     r3,[r5,#0]
                  |L1.13132|
;;;3720   
;;;3721   #endif
;;;3722   #ifdef IPS_SGEP_GAZPROM
;;;3723   load_I=Isumm;
;;;3724   #endif
;;;3725   
;;;3726   
;;;3727   #ifdef UKU_GLONASS
;;;3728   inv[0]._Uio=6;
;;;3729   if (NUMINV)
;;;3730   	{
;;;3731   	for(i=0;i<NUMINV;i++)
;;;3732   		{
;;;3733   		if(bps[i+first_inv_slot]._cnt<25)
;;;3734        		{
;;;3735        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3736        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3737        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3738        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3739        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3740   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3741   			inv[i]._cnt=0;    
;;;3742        		} 
;;;3743   		else 
;;;3744        		{
;;;3745        		inv[i]._Uio=0; 
;;;3746        		inv[i]._Ii=0;
;;;3747        		inv[i]._Uin=0;
;;;3748        		inv[i]._Ti=0;
;;;3749        		inv[i]._flags_tm=0; 
;;;3750   //	     	inv[i]._rotor0;
;;;3751   			inv[i]._cnt=25;    
;;;3752        		}
;;;3753        	}
;;;3754      	}
;;;3755   #endif
;;;3756   
;;;3757   #ifndef UKU_GLONASS
;;;3758   if (NUMINV)
00334c  4861              LDR      r0,|L1.13524|
00334e  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
003352  2d00              CMP      r5,#0
003354  d066              BEQ      |L1.13348|
;;;3759   	{
;;;3760   	for(i=0;i<NUMINV;i++)
003356  f04f0200          MOV      r2,#0
;;;3761   		{
;;;3762   		if(bps[i+20]._cnt<25)
;;;3763        		{
;;;3764        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
00335a  4e5f              LDR      r6,|L1.13528|
00335c  e060              B        |L1.13344|
                  |L1.13150|
00335e  f1020014          ADD      r0,r2,#0x14           ;3762
003362  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3762
003366  eb011000          ADD      r0,r1,r0,LSL #4       ;3762
00336a  eb040080          ADD      r0,r4,r0,LSL #2       ;3762
00336e  78c1              LDRB     r1,[r0,#3]            ;3762
003370  2919              CMP      r1,#0x19              ;3762
003372  d239              BCS      |L1.13288|
003374  7981              LDRB     r1,[r0,#6]
003376  79c7              LDRB     r7,[r0,#7]
003378  eb012707          ADD      r7,r1,r7,LSL #8
00337c  eb020142          ADD      r1,r2,r2,LSL #1
003380  eb061141          ADD      r1,r6,r1,LSL #5
003384  61cf              STR      r7,[r1,#0x1c]
;;;3765        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
003386  7a07              LDRB     r7,[r0,#8]
003388  f890c009          LDRB     r12,[r0,#9]
00338c  eb07270c          ADD      r7,r7,r12,LSL #8
003390  62cf              STR      r7,[r1,#0x2c]
;;;3766        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
003392  7a87              LDRB     r7,[r0,#0xa]
003394  f890c00b          LDRB     r12,[r0,#0xb]
003398  eb07270c          ADD      r7,r7,r12,LSL #8
00339c  618f              STR      r7,[r1,#0x18]
;;;3767        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
00339e  7b07              LDRB     r7,[r0,#0xc]
0033a0  620f              STR      r7,[r1,#0x20]
;;;3768        		inv[i]._flags_tm=bps[i+20]._buff[7];
0033a2  7b47              LDRB     r7,[r0,#0xd]
0033a4  f8817046          STRB     r7,[r1,#0x46]
;;;3769        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
0033a8  7b87              LDRB     r7,[r0,#0xe]
0033aa  f890c00f          LDRB     r12,[r0,#0xf]
0033ae  eb07270c          ADD      r7,r7,r12,LSL #8
0033b2  628f              STR      r7,[r1,#0x28]
;;;3770        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
0033b4  7c07              LDRB     r7,[r0,#0x10]
0033b6  f890c011          LDRB     r12,[r0,#0x11]
0033ba  eb07270c          ADD      r7,r7,r12,LSL #8
0033be  624f              STR      r7,[r1,#0x24]
;;;3771   			inv[i]._cnt=0;
0033c0  708b              STRB     r3,[r1,#2]
;;;3772   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
0033c2  7c87              LDRB     r7,[r0,#0x12]
0033c4  f8817059          STRB     r7,[r1,#0x59]
;;;3773   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
0033c8  7cc7              LDRB     r7,[r0,#0x13]
0033ca  f881705a          STRB     r7,[r1,#0x5a]
;;;3774   			inv[i]._Pnom=bps[i+20]._buff[14]; 
0033ce  7d07              LDRB     r7,[r0,#0x14]
0033d0  f8817058          STRB     r7,[r1,#0x58]
;;;3775   			inv[i]._net_contr_en=bps[i+20]._buff[15];
0033d4  7d47              LDRB     r7,[r0,#0x15]
0033d6  f881705b          STRB     r7,[r1,#0x5b]
;;;3776   			inv[i]._pwm_en=bps[i+20]._buff[16];  
0033da  7d87              LDRB     r7,[r0,#0x16]
0033dc  f881705c          STRB     r7,[r1,#0x5c]
;;;3777   			inv[i]._phase_mode=bps[i+20]._buff[17];  
0033e0  7dc0              LDRB     r0,[r0,#0x17]
0033e2  f881005d          STRB     r0,[r1,#0x5d]
0033e6  e018              B        |L1.13338|
                  |L1.13288|
;;;3778        		} 
;;;3779   		else 
;;;3780        		{
;;;3781         		inv[i]._Ii=0;
0033e8  eb020042          ADD      r0,r2,r2,LSL #1
0033ec  eb061040          ADD      r0,r6,r0,LSL #5
0033f0  61c3              STR      r3,[r0,#0x1c]
;;;3782   			inv[i]._Pio=0;
0033f2  62c3              STR      r3,[r0,#0x2c]
;;;3783   			inv[i]._Uio=0;
0033f4  6183              STR      r3,[r0,#0x18]
;;;3784        		inv[i]._Ti=0;
0033f6  6203              STR      r3,[r0,#0x20]
;;;3785        		inv[i]._flags_tm=0; 
0033f8  f8803046          STRB     r3,[r0,#0x46]
;;;3786        		inv[i]._Uil=0;
0033fc  6243              STR      r3,[r0,#0x24]
;;;3787        		inv[i]._Uin=0;
0033fe  6283              STR      r3,[r0,#0x28]
;;;3788   			inv[i]._cnt=25; 
003400  f04f0119          MOV      r1,#0x19
003404  7081              STRB     r1,[r0,#2]
;;;3789   			inv[i]._Uoutmin=0; 
003406  f8803059          STRB     r3,[r0,#0x59]
;;;3790   			inv[i]._Uoutmax=0; 
00340a  f880305a          STRB     r3,[r0,#0x5a]
;;;3791   			inv[i]._Pnom=0; 
00340e  f8803058          STRB     r3,[r0,#0x58]
;;;3792   			inv[i]._net_contr_en=0;
003412  f880305b          STRB     r3,[r0,#0x5b]
;;;3793   			inv[i]._pwm_en=0;   
003416  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13338|
00341a  f1020201          ADD      r2,r2,#1              ;3760
00341e  b2d2              UXTB     r2,r2                 ;3760
                  |L1.13344|
003420  42aa              CMP      r2,r5                 ;3760
003422  db9c              BLT      |L1.13150|
                  |L1.13348|
;;;3794   			   
;;;3795        		}
;;;3796        	}
;;;3797      	}
;;;3798   #endif
;;;3799   
;;;3800   #ifdef GLADKOV
;;;3801   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3802   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3803   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3804   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3805   inv[0]._flags_tm=bps[4]._buff[7];
;;;3806   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3807   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3808   inv[0]._cnt=0;    
;;;3809   
;;;3810   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3811   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3812   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3813   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3814   inv[1]._flags_tm=bps[21]._buff[7];
;;;3815   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3816   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3817   inv[1]._cnt=0;    
;;;3818   #endif
;;;3819   
;;;3820   /*
;;;3821   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3822   	{
;;;3823   	lakb[0]._battCommState=0;
;;;3824   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3825   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3826   	
;;;3827   	if(lakb[0]._battCommState==0)
;;;3828   		{	
;;;3829   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3830   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3831   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3832   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3833   		}
;;;3834   	}
;;;3835   */
;;;3836   
;;;3837   #ifdef UKU_TELECORE2015
;;;3838   
;;;3839   	if(BAT_TYPE==2)
;;;3840   		{
;;;3841   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3842   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3843   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3844   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3845   		
;;;3846   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3847   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3848   	
;;;3849   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3850   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3851   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3852   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3853   	
;;;3854   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3855   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3856   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3857   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3858   	
;;;3859   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3860   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3861   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3862   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3863   	
;;;3864   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3865   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3866   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3867   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3868   	
;;;3869   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3870   	
;;;3871   	
;;;3872   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3873   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3874   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3875   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3876   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3877   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3878   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3879   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3880   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3881   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3882   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3883   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3884   	
;;;3885   		if(lakb[i]._rat_cap==0)
;;;3886   			{
;;;3887   			if(lakb[i]._isOnCnt)
;;;3888   				{
;;;3889   				lakb[i]._isOnCnt--;
;;;3890   				if(lakb[i]._isOnCnt==0)
;;;3891   					{
;;;3892   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3893   					}
;;;3894   				}
;;;3895   			}
;;;3896   		else 
;;;3897   			{
;;;3898   			if(lakb[i]._isOnCnt<50)
;;;3899   				{
;;;3900   				lakb[i]._isOnCnt++;
;;;3901   				if(lakb[i]._isOnCnt==50)
;;;3902   					{
;;;3903   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3904   					}
;;;3905   				}
;;;3906   			}
;;;3907   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3908   		}
;;;3909   	else if(BAT_TYPE==3)
;;;3910   		{
;;;3911   		//short numOfPacks;
;;;3912   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3913   		
;;;3914   		#ifndef UKU_TELECORE2016
;;;3915   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3916   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3917   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3918   		if(numOfPacks)numOfPacks-=1;
;;;3919   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3920   		plazma_numOfCells=numOfCells;
;;;3921   		plazma_numOfTemperCells=numOfTemperCells;
;;;3922   		plazma_numOfPacks=numOfPacks;
;;;3923   
;;;3924   
;;;3925   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3926   
;;;3927   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3928   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3929   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3930   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3931   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3932   							);	  
;;;3933   
;;;3934   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3935   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3936   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3937   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3938   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3939   							)/10;
;;;3940   
;;;3941   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3942   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3943   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3944   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3945   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3946   							)-2730;
;;;3947   
;;;3948   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3949   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3950   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3951   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3952   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3953   							)/10;
;;;3954   
;;;3955   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3956   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3957   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3958   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3959   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3960   							)/10;
;;;3961   		#endif
;;;3962   		
;;;3963   		#ifdef UKU_TELECORE2016
;;;3964   		{
;;;3965   		char i;
;;;3966   		
;;;3967   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3968   			{
;;;3969   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3970   			}
;;;3971   		}
;;;3972   		#endif
;;;3973   		
;;;3974   										  
;;;3975   		}
;;;3976   	
;;;3977   if(sacredSunSilentCnt<3) 
;;;3978   	{
;;;3979       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3980       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3981      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3982   	}
;;;3983   else 
;;;3984   	{
;;;3985       	//bat[0]._Ub=0;
;;;3986       	//bat[0]._Tb=0;
;;;3987      	//bat[0]._Ib=0;
;;;3988   	}
;;;3989   
;;;3990   if(BAT_TYPE==1)
;;;3991   	{
;;;3992   	char i;
;;;3993   	for(i=0;i<1;i++)
;;;3994   		{
;;;3995   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3996   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3997   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3998   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3999   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4000   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4001   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4002   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4003   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4004   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4005   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4006   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4007   		lakb[i]._flags1= lakb_damp[i][34];
;;;4008   		lakb[i]._flags2= lakb_damp[i][35];
;;;4009   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4010   
;;;4011   /*		if(lakb[i]._rat_cap==0)
;;;4012   			{
;;;4013   			if(lakb[i]._isOnCnt)
;;;4014   				{
;;;4015   				lakb[i]._isOnCnt--;
;;;4016   				if(lakb[i]._isOnCnt==0)
;;;4017   					{
;;;4018   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4019   					}
;;;4020   				}
;;;4021   			}
;;;4022   		else 
;;;4023   			{
;;;4024   			if(lakb[i]._isOnCnt<50)
;;;4025   				{
;;;4026   				lakb[i]._isOnCnt++;
;;;4027   				if(lakb[i]._isOnCnt==50)
;;;4028   					{
;;;4029   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4030   					}
;;;4031   				}
;;;4032   			} */
;;;4033   		gran(&lakb[i]._isOnCnt,0,50);
;;;4034   	 	}
;;;4035   
;;;4036   	if(lakb_damp[0][41]==100)
;;;4037   		{
;;;4038   		li_bat._485Error=1;
;;;4039   		}
;;;4040   	if(lakb_damp[0][41]==0)
;;;4041   		{
;;;4042   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4043   		li_bat._485Error=0;
;;;4044   		}
;;;4045   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4046   
;;;4047   
;;;4048   	}
;;;4049   
;;;4050   
;;;4051   #endif
;;;4052   
;;;4053   		#ifdef UKU_TELECORE2017
;;;4054   		{
;;;4055   		char i;
;;;4056   		
;;;4057   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4058   			{
;;;4059   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4060   			}
;;;4061   		}
;;;4062   		#endif
;;;4063   #ifdef UKU_TELECORE2015
;;;4064   //вычисление параметров работы батареи
;;;4065   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4066   li_bat._batStat=bsOK;
;;;4067   if(BAT_TYPE==1) //COSLIGHT
;;;4068   	{
;;;4069   	if(li_bat._batStat==bsOK)
;;;4070   		{
;;;4071   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4072   
;;;4073   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4074   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4075   	
;;;4076   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4077   		li_bat._soc=lakb[0]._s_o_c;
;;;4078   		li_bat._soh=lakb[0]._s_o_h;
;;;4079   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4080   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4081   		li_bat._rbt=lakb[0]._r_b_t;
;;;4082   		}
;;;4083   	else 
;;;4084   		{
;;;4085   		li_bat._Ub=bat[0]._Ub;
;;;4086   		li_bat._Ib=bat[0]._Ib/10;
;;;4087   		li_bat._Tb=bat[0]._Tb;
;;;4088   		}
;;;4089   
;;;4090   	if((li_bat._485Error)||(li_bat._canError))
;;;4091   		{
;;;4092   		li_bat._batStat=bsOFF;
;;;4093   		}
;;;4094   	else li_bat._batStat=bsOK;
;;;4095   	}
;;;4096   else if(BAT_TYPE==2) //SACRED SUN
;;;4097   	{
;;;4098   	}
;;;4099   else if(BAT_TYPE==3) //ZTT
;;;4100   	{
;;;4101   	if(li_bat._batStat==bsOK)
;;;4102   		{
;;;4103   
;;;4104   		}
;;;4105   	}
;;;4106   #endif
;;;4107   
;;;4108   
;;;4109   /*
;;;4110   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4111   	{
;;;4112   
;;;4113   
;;;4114   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4115   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4116   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4117   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4118   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4119   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4120   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4121   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4122   
;;;4123   	tempSS=0;
;;;4124   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4125   
;;;4126   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4127   
;;;4128   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4129   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4130   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4131   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4132   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4133   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4134   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4135   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4136   
;;;4137   	tempSS=0;
;;;4138   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4139   
;;;4140   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4141   
;;;4142   
;;;4143   	}*/
;;;4144   }
003424  b007              ADD      sp,sp,#0x1c
003426  e8bd8ff0          POP      {r4-r11,pc}
;;;4145   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4205   //-----------------------------------------------
;;;4206   void mnemo_hndl(void)
00342a  4a2c              LDR      r2,|L1.13532|
;;;4207   {
;;;4208   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4209   	{
;;;4210   	if(mnemo_cnt)mnemo_cnt--;
00342c  492c              LDR      r1,|L1.13536|
00342e  7810              LDRB     r0,[r2,#0]            ;4208  ; a_ind
003430  2804              CMP      r0,#4                 ;4208
003432  d001              BEQ      |L1.13368|
003434  2801              CMP      r0,#1                 ;4208
003436  d105              BNE      |L1.13380|
                  |L1.13368|
003438  7850              LDRB     r0,[r2,#1]            ;4208  ; a_ind
00343a  b918              CBNZ     r0,|L1.13380|
00343c  4829              LDR      r0,|L1.13540|
00343e  7800              LDRB     r0,[r0,#0]            ;4208  ; MNEMO_ON
003440  2855              CMP      r0,#0x55              ;4208
003442  d003              BEQ      |L1.13388|
                  |L1.13380|
;;;4211   	}
;;;4212   else mnemo_cnt=MNEMO_TIME;
003444  4828              LDR      r0,|L1.13544|
003446  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
003448  7008              STRB     r0,[r1,#0]
                  |L1.13386|
;;;4213   }
00344a  4770              BX       lr
                  |L1.13388|
00344c  7808              LDRB     r0,[r1,#0]            ;4210  ; mnemo_cnt
00344e  2800              CMP      r0,#0                 ;4210
003450  d0fb              BEQ      |L1.13386|
003452  f1a00001          SUB      r0,r0,#1              ;4210
003456  7008              STRB     r0,[r1,#0]            ;4210
003458  4770              BX       lr
;;;4214   
                          ENDP

                  apv_start PROC
;;;4215   //-----------------------------------------------
;;;4216   void apv_start(char in)
00345a  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4217   {
;;;4218   if(	(bps[in]._apv_timer_1_lev==0)&&
00345e  eb011100          ADD      r1,r1,r0,LSL #4
003462  4822              LDR      r0,|L1.13548|
003464  eb000081          ADD      r0,r0,r1,LSL #2
003468  f890105e          LDRB     r1,[r0,#0x5e]
00346c  2900              CMP      r1,#0
00346e  d14e              BNE      |L1.13582|
;;;4219   	(bps[in]._apv_cnt_1_lev==0)&&
003470  f890105f          LDRB     r1,[r0,#0x5f]
003474  2900              CMP      r1,#0
003476  d14a              BNE      |L1.13582|
;;;4220   	(bps[in]._apv_timer_2_lev==0) )
003478  f8b01060          LDRH     r1,[r0,#0x60]
00347c  2900              CMP      r1,#0
00347e  e037              B        |L1.13552|
                  |L1.13440|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.13444|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13448|
                          DCD      bat
                  |L1.13452|
                          DCD      adc_buff_ext_
                  |L1.13456|
                          DCD      Kunet_ext
                  |L1.13460|
                          DCD      Uvv
                  |L1.13464|
                          DCD      Uvv0
                  |L1.13468|
                          DCD      net_U
                  |L1.13472|
                          DCD      eb2_data_short
                  |L1.13476|
                          DCD      Kvv_eb2
                  |L1.13480|
                          DCD      Uvv_eb2
                  |L1.13484|
                          DCD      Kpes_eb2
                  |L1.13488|
                          DCD      Upes_eb2
                  |L1.13492|
                          DCD      t_ext
                  |L1.13496|
                          DCD      ibt
                  |L1.13500|
                          DCD      t_box
                  |L1.13504|
                          DCD      t_ext_can_nd
                  |L1.13508|
                          DCD      t_ext_can
                  |L1.13512|
                          DCD      BAT_IS_ON
                  |L1.13516|
                          DCD      load_I
                  |L1.13520|
                          DCD      Isumm
                  |L1.13524|
                          DCD      NUMINV
                  |L1.13528|
                          DCD      inv
                  |L1.13532|
                          DCD      a_ind
                  |L1.13536|
                          DCD      mnemo_cnt
                  |L1.13540|
                          DCD      MNEMO_ON
                  |L1.13544|
                          DCD      MNEMO_TIME
                  |L1.13548|
                          DCD      bps
                  |L1.13552|
0034f0  d10d              BNE      |L1.13582|
;;;4221   		{
;;;4222    		bps[in]._apv_timer_1_lev=60;
0034f2  f04f013c          MOV      r1,#0x3c
0034f6  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4223   		bps[in]._apv_cnt_1_lev=3;
0034fa  f04f0103          MOV      r1,#3
0034fe  7041              STRB     r1,[r0,#1]
;;;4224   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
003500  49fe              LDR      r1,|L1.14588|
003502  f44f6261          MOV      r2,#0xe10
003506  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
003508  fb01f102          MUL      r1,r1,r2
00350c  8041              STRH     r1,[r0,#2]
                  |L1.13582|
;;;4225   		}
;;;4226   }
00350e  4770              BX       lr
;;;4227   
                          ENDP

                  apv_stop PROC
;;;4228   //-----------------------------------------------
;;;4229   void apv_stop(char in)
003510  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4230   {
;;;4231   bps[in]._apv_timer_1_lev=0;
003514  eb021200          ADD      r2,r2,r0,LSL #4
003518  48f9              LDR      r0,|L1.14592|
00351a  f04f0100          MOV      r1,#0
00351e  eb000082          ADD      r0,r0,r2,LSL #2
003522  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4232   bps[in]._apv_cnt_1_lev=0;
003526  7041              STRB     r1,[r0,#1]
;;;4233   bps[in]._apv_timer_2_lev=0;
003528  8041              STRH     r1,[r0,#2]
;;;4234   }
00352a  4770              BX       lr
;;;4235   
                          ENDP

                  apv_drv PROC
;;;4236   //-----------------------------------------------
;;;4237   void apv_drv(void)		//1 Гц
00352c  e92d43f0          PUSH     {r4-r9,lr}
;;;4238   {
;;;4239   for(i=0;i<NUMIST;i++)
003530  4ef4              LDR      r6,|L1.14596|
003532  f04f0300          MOV      r3,#0
003536  75f3              STRB     r3,[r6,#0x17]
;;;4240   	{
;;;4241   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4242   		{
;;;4243   		bps[i]._apv_timer_1_lev=0;
;;;4244   		bps[i]._apv_cnt_1_lev=0;
;;;4245   		bps[i]._apv_timer_2_lev=0;
;;;4246   		}
;;;4247   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
003538  4cf3              LDR      r4,|L1.14600|
;;;4248   		{
;;;4249   		bps[i]._apv_timer_2_lev=0;
;;;4250   		}
;;;4251   
;;;4252   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4253   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4254   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4255   			{
;;;4256   			if(bps[i]._state==bsWRK)
;;;4257   				{
;;;4258   				if(bps[i]._apv_succes_timer<60)
;;;4259   					{
;;;4260   					bps[i]._apv_succes_timer++;
;;;4261   					if(bps[i]._apv_succes_timer>=60)
;;;4262   						{
;;;4263   						apv_stop(i);
;;;4264   						}
;;;4265   					}
;;;4266   				}
;;;4267   			else bps[i]._apv_succes_timer=0;
;;;4268   			}
;;;4269   
;;;4270   	if(bps[i]._apv_timer_1_lev)
;;;4271   		{
;;;4272   		bps[i]._apv_timer_2_lev=0;
;;;4273   		bps[i]._apv_timer_1_lev--;
;;;4274   		if(bps[i]._apv_timer_1_lev==0)
;;;4275   			{
;;;4276   			if(bps[i]._apv_cnt_1_lev)
;;;4277   				{
;;;4278   				bps[i]._apv_cnt_1_lev--;
;;;4279   				bps[i]._apv_timer_1_lev=60;
00353a  f04f073c          MOV      r7,#0x3c
;;;4280   				bps[i]._apv_reset_av_timer=2;
00353e  f04f0802          MOV      r8,#2
003542  4def              LDR      r5,|L1.14592|
003544  f8df93c4          LDR      r9,|L1.14604|
003548  e079              B        |L1.13886|
                  |L1.13642|
00354a  49f1              LDR      r1,|L1.14608|
00354c  7809              LDRB     r1,[r1,#0]            ;4241  ; APV_ON1
00354e  b949              CBNZ     r1,|L1.13668|
003550  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4243
003554  eb011100          ADD      r1,r1,r0,LSL #4       ;4243
003558  eb050181          ADD      r1,r5,r1,LSL #2       ;4243
00355c  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4243
003560  704b              STRB     r3,[r1,#1]            ;4244
003562  804b              STRH     r3,[r1,#2]            ;4245
                  |L1.13668|
003564  7821              LDRB     r1,[r4,#0]            ;4247  ; APV_ON2
003566  b939              CBNZ     r1,|L1.13688|
003568  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4249
00356c  eb011100          ADD      r1,r1,r0,LSL #4       ;4249
003570  eb050181          ADD      r1,r5,r1,LSL #2       ;4249
003574  f8a13060          STRH     r3,[r1,#0x60]         ;4249
                  |L1.13688|
003578  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4252
00357c  eb011100          ADD      r1,r1,r0,LSL #4       ;4252
003580  eb050181          ADD      r1,r5,r1,LSL #2       ;4252
003584  f891205e          LDRB     r2,[r1,#0x5e]         ;4252
003588  b92a              CBNZ     r2,|L1.13718|
00358a  f891205f          LDRB     r2,[r1,#0x5f]         ;4253
00358e  b912              CBNZ     r2,|L1.13718|
003590  f8b12060          LDRH     r2,[r1,#0x60]         ;4254
003594  b122              CBZ      r2,|L1.13728|
                  |L1.13718|
003596  788a              LDRB     r2,[r1,#2]            ;4256
003598  2a01              CMP      r2,#1                 ;4256
00359a  d014              BEQ      |L1.13766|
00359c  f8813063          STRB     r3,[r1,#0x63]         ;4267
                  |L1.13728|
0035a0  7df1              LDRB     r1,[r6,#0x17]         ;4270  ; i
0035a2  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4270
0035a6  eb001001          ADD      r0,r0,r1,LSL #4       ;4270
0035aa  eb050080          ADD      r0,r5,r0,LSL #2       ;4270
0035ae  f890205e          LDRB     r2,[r0,#0x5e]         ;4270
0035b2  b30a              CBZ      r2,|L1.13816|
0035b4  f8a03060          STRH     r3,[r0,#0x60]         ;4272
0035b8  f1a20201          SUB      r2,r2,#1              ;4273
0035bc  b2d2              UXTB     r2,r2                 ;4273
0035be  f880205e          STRB     r2,[r0,#0x5e]         ;4273
0035c2  b172              CBZ      r2,|L1.13794|
0035c4  e024              B        |L1.13840|
                  |L1.13766|
0035c6  f8912063          LDRB     r2,[r1,#0x63]         ;4258
0035ca  2a3c              CMP      r2,#0x3c              ;4258
0035cc  d2e8              BCS      |L1.13728|
0035ce  f1020201          ADD      r2,r2,#1              ;4260
0035d2  b2d2              UXTB     r2,r2                 ;4260
0035d4  f8812063          STRB     r2,[r1,#0x63]         ;4260
0035d8  2a3c              CMP      r2,#0x3c              ;4261
0035da  d3e1              BCC      |L1.13728|
0035dc  f7fffffe          BL       apv_stop
0035e0  e7de              B        |L1.13728|
                  |L1.13794|
0035e2  f890205f          LDRB     r2,[r0,#0x5f]         ;4276
0035e6  b142              CBZ      r2,|L1.13818|
0035e8  f1a20201          SUB      r2,r2,#1              ;4278
0035ec  f880205f          STRB     r2,[r0,#0x5f]         ;4278
0035f0  f880705e          STRB     r7,[r0,#0x5e]         ;4279
0035f4  f8808062          STRB     r8,[r0,#0x62]
                  |L1.13816|
0035f8  e00a              B        |L1.13840|
                  |L1.13818|
;;;4281   				}
;;;4282   			else
;;;4283   				{
;;;4284   				if(APV_ON2==apvON)
0035fa  7822              LDRB     r2,[r4,#0]  ; APV_ON2
0035fc  2a01              CMP      r2,#1
0035fe  d107              BNE      |L1.13840|
;;;4285   					{
;;;4286   					bps[i]._apv_timer_1_lev=0;
;;;4287   					bps[i]._apv_cnt_1_lev=0;
;;;4288   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
003600  4abe              LDR      r2,|L1.14588|
003602  f44f6c61          MOV      r12,#0xe10
003606  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
003608  fb02f20c          MUL      r2,r2,r12
00360c  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.13840|
;;;4289   					}
;;;4290   				}
;;;4291   			
;;;4292   			}
;;;4293   		}
;;;4294   	if(bps[i]._apv_timer_2_lev)
003610  f8b02060          LDRH     r2,[r0,#0x60]
003614  b14a              CBZ      r2,|L1.13866|
;;;4295   		{
;;;4296   		bps[i]._apv_timer_2_lev--;
003616  f1a20201          SUB      r2,r2,#1
00361a  b292              UXTH     r2,r2
00361c  f8a02060          STRH     r2,[r0,#0x60]
;;;4297   		if(bps[i]._apv_timer_2_lev==0)
003620  b91a              CBNZ     r2,|L1.13866|
;;;4298   			{
;;;4299   			bps[i]._apv_cnt_1_lev=2;
003622  f880805f          STRB     r8,[r0,#0x5f]
;;;4300   			bps[i]._apv_timer_1_lev=60;
003626  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.13866|
;;;4301   			}
;;;4302   		}
;;;4303   
;;;4304   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
00362a  f8902062          LDRB     r2,[r0,#0x62]
00362e  b11a              CBZ      r2,|L1.13880|
003630  f1a20201          SUB      r2,r2,#1
003634  f8802062          STRB     r2,[r0,#0x62]
                  |L1.13880|
003638  f1010101          ADD      r1,r1,#1              ;4239
00363c  75f1              STRB     r1,[r6,#0x17]         ;4239
                  |L1.13886|
00363e  7df0              LDRB     r0,[r6,#0x17]         ;4239  ; i
003640  f9b91000          LDRSH    r1,[r9,#0]            ;4239  ; NUMIST
003644  4288              CMP      r0,r1                 ;4239
003646  db80              BLT      |L1.13642|
;;;4305   	} 
;;;4306   /*char i;
;;;4307   for(i=0;i<2;i++) 
;;;4308   	{
;;;4309   	if(apv_cnt_sec[i])
;;;4310   		{
;;;4311   		apv_cnt_sec[i]--;
;;;4312   		if(apv_cnt_sec[i]==0)
;;;4313   			{
;;;4314   			cnt_av_umax[i]=0;
;;;4315   			cnt_av_umin[i]=0;
;;;4316   			reset_apv_cnt[i]=600;
;;;4317   			}
;;;4318   		}
;;;4319   	
;;;4320   	if(reset_apv_cnt[i])
;;;4321   		{
;;;4322   		reset_apv_cnt[i]--;
;;;4323   		if(reset_apv_cnt[i]==0)
;;;4324   			{
;;;4325   			apv_cnt[i]=0;
;;;4326   			}
;;;4327   		}	
;;;4328   		
;;;4329   	if(hour_apv_cnt[i])
;;;4330   		{
;;;4331   		hour_apv_cnt[i]--;
;;;4332   		if(hour_apv_cnt[i]==0)
;;;4333   			{
;;;4334   			apv_cnt[i]=0;
;;;4335   			avar_src_reset(i);
;;;4336   			}
;;;4337   		}			
;;;4338   	}
;;;4339   
;;;4340   
;;;4341   
;;;4342   
;;;4343   if(apv_cnt_1)
;;;4344   	{
;;;4345   	apv_cnt_1--;
;;;4346   	if(!apv_cnt_1) 
;;;4347   		{
;;;4348   		avar_src_reset(0);
;;;4349   		avar_src_reset(1);
;;;4350   		//cntrl_stat=0;
;;;4351   		}
;;;4352   	}*/		
;;;4353   }
003648  e8bd83f0          POP      {r4-r9,pc}
;;;4354   
                          ENDP

                  adc_init PROC
;;;4355   //-----------------------------------------------
;;;4356   void adc_init(void)
00364c  48b1              LDR      r0,|L1.14612|
;;;4357   {
;;;4358   
;;;4359   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
00364e  6841              LDR      r1,[r0,#4]
003650  f4212140          BIC      r1,r1,#0xc0000
003654  f4412180          ORR      r1,r1,#0x40000
003658  6041              STR      r1,[r0,#4]
;;;4360   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
00365a  6841              LDR      r1,[r0,#4]
00365c  f4213140          BIC      r1,r1,#0x30000
003660  f4413180          ORR      r1,r1,#0x10000
003664  6041              STR      r1,[r0,#4]
;;;4361   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
003666  6841              LDR      r1,[r0,#4]
003668  f4214140          BIC      r1,r1,#0xc000
00366c  f4414180          ORR      r1,r1,#0x4000
003670  6041              STR      r1,[r0,#4]
;;;4362   
;;;4363   
;;;4364   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
003672  6c41              LDR      r1,[r0,#0x44]
003674  f4212140          BIC      r1,r1,#0xc0000
003678  f4412100          ORR      r1,r1,#0x80000
00367c  6441              STR      r1,[r0,#0x44]
;;;4365   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
00367e  6c41              LDR      r1,[r0,#0x44]
003680  f4213140          BIC      r1,r1,#0x30000
003684  f4413100          ORR      r1,r1,#0x20000
003688  6441              STR      r1,[r0,#0x44]
;;;4366   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
00368a  6c41              LDR      r1,[r0,#0x44]
00368c  f4214140          BIC      r1,r1,#0xc000
003690  f4414100          ORR      r1,r1,#0x8000
003694  6441              STR      r1,[r0,#0x44]
;;;4367   
;;;4368   SET_REG(LPC_ADC->ADCR,0,24,3);
003696  48a0              LDR      r0,|L1.14616|
003698  6801              LDR      r1,[r0,#0]
00369a  f02161e0          BIC      r1,r1,#0x7000000
00369e  6001              STR      r1,[r0,#0]
;;;4369   
;;;4370   SET_REG(LPC_ADC->ADCR,1,21,1);
0036a0  6801              LDR      r1,[r0,#0]
0036a2  f4411100          ORR      r1,r1,#0x200000
0036a6  6001              STR      r1,[r0,#0]
;;;4371   SET_REG(LPC_ADC->ADCR,0,16,1);
0036a8  6801              LDR      r1,[r0,#0]
0036aa  f4213180          BIC      r1,r1,#0x10000
0036ae  6001              STR      r1,[r0,#0]
;;;4372   SET_REG(LPC_ADC->ADCR,1,8,8);
0036b0  6801              LDR      r1,[r0,#0]
0036b2  f421417f          BIC      r1,r1,#0xff00
0036b6  f4417180          ORR      r1,r1,#0x100
0036ba  6001              STR      r1,[r0,#0]
;;;4373   
;;;4374   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4375   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4376   	
;;;4377   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4378        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4379        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4380   
;;;4381   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
0036bc  f44f7180          MOV      r1,#0x100
0036c0  60c1              STR      r1,[r0,#0xc]
0036c2  4896              LDR      r0,|L1.14620|
0036c4  f44f0180          MOV      r1,#0x400000
0036c8  6001              STR      r1,[r0,#0]
;;;4382   
;;;4383   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4384   
;;;4385   
;;;4386   }
0036ca  4770              BX       lr
;;;4387   
                          ENDP

                  adc_drv7 PROC
;;;4388   //-----------------------------------------------
;;;4389   void adc_drv7(void) //(Uсети - постоянка)
0036cc  e92d41f0          PUSH     {r4-r8,lr}
;;;4390   {
;;;4391   //int temp_S;
;;;4392   //char i;
;;;4393   //signed short temp_SS;
;;;4394   
;;;4395   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
0036d0  4c8c              LDR      r4,|L1.14596|
0036d2  34ee              ADDS     r4,r4,#0xee
0036d4  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0036d6  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0036d8  1a40              SUBS     r0,r0,r1
0036da  b200              SXTH     r0,r0
0036dc  f7fffffe          BL       abs_pal
0036e0  1da6              ADDS     r6,r4,#6
0036e2  8030              STRH     r0,[r6,#0]
;;;4396   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
0036e4  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0036e6  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
0036e8  1a40              SUBS     r0,r0,r1
0036ea  b200              SXTH     r0,r0
0036ec  f7fffffe          BL       abs_pal
0036f0  8070              STRH     r0,[r6,#2]
;;;4397   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
0036f2  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0036f4  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0036f6  1a40              SUBS     r0,r0,r1
0036f8  b200              SXTH     r0,r0
0036fa  f7fffffe          BL       abs_pal
0036fe  80b0              STRH     r0,[r6,#4]
;;;4398   
;;;4399   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4400   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4401   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4402   
;;;4403   
;;;4404   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
003700  f44f7196          MOV      r1,#0x12c
;;;4405   	{
;;;4406   	adc_result=adc_self_ch_buff[2];
003704  4d7f              LDR      r5,|L1.14596|
003706  4288              CMP      r0,r1                 ;4404
003708  da02              BGE      |L1.14096|
00370a  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00370c  87a8              STRH     r0,[r5,#0x3c]
00370e  e00c              B        |L1.14122|
                  |L1.14096|
;;;4407   	} 
;;;4408   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
003710  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
003714  4288              CMP      r0,r1
003716  da02              BGE      |L1.14110|
;;;4409   	{
;;;4410   	adc_result=adc_self_ch_buff[1];
003718  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00371a  87a8              STRH     r0,[r5,#0x3c]
00371c  e005              B        |L1.14122|
                  |L1.14110|
;;;4411   	}
;;;4412   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
00371e  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
003722  4288              CMP      r0,r1
003724  da01              BGE      |L1.14122|
;;;4413   	{
;;;4414   	adc_result=adc_self_ch_buff[0];
003726  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
003728  87a8              STRH     r0,[r5,#0x3c]
                  |L1.14122|
;;;4415   	}
;;;4416       //adc_result=92;
;;;4417   
;;;4418   if(adc_ch_net)
00372a  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
00372c  2600              MOVS     r6,#0
00372e  b347              CBZ      r7,|L1.14210|
;;;4419   	{
;;;4420   
;;;4421   	main_power_buffer[0]+=(long)(adc_result);
003730  487b              LDR      r0,|L1.14624|
003732  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
003736  6802              LDR      r2,[r0,#0]  ; main_power_buffer
003738  440a              ADD      r2,r2,r1
00373a  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4422   	main_power_buffer[1]+=(long)(adc_result);
00373c  6842              LDR      r2,[r0,#4]  ; main_power_buffer
00373e  440a              ADD      r2,r2,r1
003740  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4423   	main_power_buffer[2]+=(long)(adc_result);
003742  6882              LDR      r2,[r0,#8]  ; main_power_buffer
003744  440a              ADD      r2,r2,r1
003746  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4424   	main_power_buffer[3]+=(long)(adc_result);
003748  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
00374a  4411              ADD      r1,r1,r2
00374c  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4425   
;;;4426   	adc_net_buff_cnt++;
00374e  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
003752  f1010101          ADD      r1,r1,#1
003756  b209              SXTH     r1,r1
003758  f8a51044          STRH     r1,[r5,#0x44]
;;;4427   	if(adc_net_buff_cnt>=0x1000)
00375c  f5b15f80          CMP      r1,#0x1000
003760  db01              BLT      |L1.14182|
;;;4428   		{
;;;4429   		adc_net_buff_cnt=0;
003762  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.14182|
;;;4430   		}
;;;4431   	if((adc_net_buff_cnt&0x03ff)==0)
003766  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
00376a  058a              LSLS     r2,r1,#22
00376c  d131              BNE      |L1.14290|
;;;4432   		{
;;;4433   		#ifdef UKU_220
;;;4434   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4435   		#else
;;;4436   		#ifdef UKU_220_V2
;;;4437   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4438   		#else
;;;4439   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
00376e  ea4f21a1          ASR      r1,r1,#10
003772  f8502021          LDR      r2,[r0,r1,LSL #2]
003776  ea4f2222          ASR      r2,r2,#8
00377a  876a              STRH     r2,[r5,#0x3a]
;;;4440   		#endif
;;;4441   		#endif
;;;4442   		main_power_buffer[adc_net_buff_cnt>>10]=0;
00377c  f8406021          STR      r6,[r0,r1,LSL #2]
003780  e027              B        |L1.14290|
                  |L1.14210|
;;;4443   		}
;;;4444   
;;;4445   
;;;4446   	} 
;;;4447   else if(!adc_ch_net)
;;;4448   	{
;;;4449   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
003782  4868              LDR      r0,|L1.14628|
003784  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
003786  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
003788  eb001384          ADD      r3,r0,r4,LSL #6
00378c  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
003790  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4450   	
;;;4451   	if((adc_ch_cnt&0x03)==0)
003794  0790              LSLS     r0,r2,#30
003796  d10f              BNE      |L1.14264|
;;;4452   		{
;;;4453   		long temp_L;
;;;4454   		char i;
;;;4455   		temp_L=0;
003798  4601              MOV      r1,r0
                  |L1.14234|
;;;4456   		for(i=0;i<16;i++)
;;;4457   			{
;;;4458   			temp_L+=adc_buff[adc_ch][i];
00379a  f853c020          LDR      r12,[r3,r0,LSL #2]
00379e  4461              ADD      r1,r1,r12
0037a0  f1000001          ADD      r0,r0,#1              ;4456
0037a4  b2c0              UXTB     r0,r0                 ;4456
0037a6  2810              CMP      r0,#0x10              ;4456
0037a8  d3f7              BCC      |L1.14234|
;;;4459   			}
;;;4460   		adc_buff_[adc_ch]= (short)(temp_L>>4);
0037aa  ea4f1021          ASR      r0,r1,#4
0037ae  495c              LDR      r1,|L1.14624|
0037b0  f1a10120          SUB      r1,r1,#0x20
0037b4  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14264|
;;;4461   
;;;4462   		//adc_buff_[3]=346;
;;;4463   		}
;;;4464   	if(++adc_ch>=16) 
0037b8  1c64              ADDS     r4,r4,#1
0037ba  b2e0              UXTB     r0,r4
0037bc  74a8              STRB     r0,[r5,#0x12]
0037be  2810              CMP      r0,#0x10
0037c0  d307              BCC      |L1.14290|
;;;4465   		{
;;;4466   		adc_ch=0;
0037c2  74ae              STRB     r6,[r5,#0x12]
;;;4467   		adc_ch_cnt++;
0037c4  f1020201          ADD      r2,r2,#1
0037c8  b2d0              UXTB     r0,r2
0037ca  74e8              STRB     r0,[r5,#0x13]
;;;4468   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
0037cc  2810              CMP      r0,#0x10
0037ce  d300              BCC      |L1.14290|
0037d0  74ee              STRB     r6,[r5,#0x13]
                  |L1.14290|
;;;4469   		}
;;;4470   	}
;;;4471   
;;;4472   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4473   
;;;4474   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4475   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4476   /*
;;;4477   	{
;;;4478   	if((adc_cnt1&0x03)==0)
;;;4479   		{
;;;4480   		temp_S=0;
;;;4481   		for(i=0;i<16;i++)
;;;4482   			{
;;;4483   			temp_S+=adc_buff[adc_ch][i];
;;;4484   			} 
;;;4485            	adc_buff_[adc_ch]=temp_S>>4;
;;;4486             }
;;;4487   	}*/
;;;4488   
;;;4489   
;;;4490   		  
;;;4491   
;;;4492   adc_self_ch_cnt=0;
0037d2  742e              STRB     r6,[r5,#0x10]
;;;4493   
;;;4494   adc_ch_net++;
0037d4  f1070701          ADD      r7,r7,#1
;;;4495   adc_ch_net&=1;
0037d8  f0070001          AND      r0,r7,#1
0037dc  7468              STRB     r0,[r5,#0x11]
;;;4496   
;;;4497   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4498   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4499   
;;;4500   if(adc_ch_net)
;;;4501   	{
;;;4502   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4503   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4504   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
0037de  4a4e              LDR      r2,|L1.14616|
0037e0  b130              CBZ      r0,|L1.14320|
0037e2  6810              LDR      r0,[r2,#0]
0037e4  f02000ff          BIC      r0,r0,#0xff
0037e8  f1000004          ADD      r0,r0,#4
0037ec  6010              STR      r0,[r2,#0]
0037ee  e03d              B        |L1.14444|
                  |L1.14320|
;;;4505   	}
;;;4506   else
;;;4507   	{
;;;4508   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4509   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4510   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
0037f0  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
0037f2  0708              LSLS     r0,r1,#28
0037f4  d406              BMI      |L1.14340|
0037f6  6810              LDR      r0,[r2,#0]
0037f8  f02000ff          BIC      r0,r0,#0xff
0037fc  f1000001          ADD      r0,r0,#1
003800  6010              STR      r0,[r2,#0]
003802  e005              B        |L1.14352|
                  |L1.14340|
;;;4511   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
003804  6810              LDR      r0,[r2,#0]
003806  f02000ff          BIC      r0,r0,#0xff
00380a  f1000002          ADD      r0,r0,#2
00380e  6010              STR      r0,[r2,#0]
                  |L1.14352|
;;;4512   
;;;4513   
;;;4514   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
003810  4845              LDR      r0,|L1.14632|
003812  6803              LDR      r3,[r0,#0]
003814  f0435380          ORR      r3,r3,#0x10000000
003818  6003              STR      r3,[r0,#0]
;;;4515   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
00381a  6a03              LDR      r3,[r0,#0x20]
00381c  f0434380          ORR      r3,r3,#0x40000000
003820  6203              STR      r3,[r0,#0x20]
;;;4516   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
003822  6e03              LDR      r3,[r0,#0x60]
003824  f0436380          ORR      r3,r3,#0x4000000
003828  6603              STR      r3,[r0,#0x60]
;;;4517   
;;;4518   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
00382a  07cb              LSLS     r3,r1,#31
00382c  d00a              BEQ      |L1.14404|
;;;4519   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
00382e  6943              LDR      r3,[r0,#0x14]
003830  f0435380          ORR      r3,r3,#0x10000000
003834  6143              STR      r3,[r0,#0x14]
                  |L1.14390|
;;;4520   
;;;4521   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
003836  078b              LSLS     r3,r1,#30
003838  d409              BMI      |L1.14414|
00383a  6b43              LDR      r3,[r0,#0x34]
00383c  f0234380          BIC      r3,r3,#0x40000000
003840  6343              STR      r3,[r0,#0x34]
003842  e008              B        |L1.14422|
                  |L1.14404|
003844  6943              LDR      r3,[r0,#0x14]         ;4518
003846  f0235380          BIC      r3,r3,#0x10000000     ;4518
00384a  6143              STR      r3,[r0,#0x14]         ;4518
00384c  e7f3              B        |L1.14390|
                  |L1.14414|
;;;4522   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
00384e  6b43              LDR      r3,[r0,#0x34]
003850  f0434380          ORR      r3,r3,#0x40000000
003854  6343              STR      r3,[r0,#0x34]
                  |L1.14422|
;;;4523   
;;;4524   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
003856  0749              LSLS     r1,r1,#29
003858  d404              BMI      |L1.14436|
00385a  6f41              LDR      r1,[r0,#0x74]
00385c  f0216180          BIC      r1,r1,#0x4000000
003860  6741              STR      r1,[r0,#0x74]
003862  e003              B        |L1.14444|
                  |L1.14436|
;;;4525   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
003864  6f41              LDR      r1,[r0,#0x74]
003866  f0416180          ORR      r1,r1,#0x4000000
00386a  6741              STR      r1,[r0,#0x74]
                  |L1.14444|
;;;4526   	}
;;;4527   	
;;;4528   
;;;4529   
;;;4530   
;;;4531   LPC_ADC->ADCR |=  (1<<24);
00386c  6810              LDR      r0,[r2,#0]
00386e  f0407080          ORR      r0,r0,#0x1000000
003872  6010              STR      r0,[r2,#0]
                  |L1.14452|
;;;4532   
;;;4533   }
003874  e8bd81f0          POP      {r4-r8,pc}
;;;4534   
                          ENDP

                  avg_hndl PROC
;;;4791   //-----------------------------------------------
;;;4792   void avg_hndl(void)
003878  e92d41f0          PUSH     {r4-r8,lr}
;;;4793   { 
;;;4794   char i;
;;;4795   
;;;4796   //#define AVGCNTMAX	5
;;;4797   if(avg_main_cnt)
00387c  4d21              LDR      r5,|L1.14596|
00387e  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
003882  b118              CBZ      r0,|L1.14476|
;;;4798   	{
;;;4799   	avg_main_cnt--;
003884  f1a00001          SUB      r0,r0,#1
003888  86e8              STRH     r0,[r5,#0x36]
;;;4800   	//goto avg_hndl_end;
;;;4801   	return;
;;;4802   	}                 
;;;4803   
;;;4804   avg_main_cnt=5;
;;;4805   avg_num=0;
;;;4806   
;;;4807   for(i=0;i<NUMIST;i++)
;;;4808   	{
;;;4809   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4810   	}
;;;4811   
;;;4812   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4813   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4814   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4815   
;;;4816   if(avg_vektor) avg_vektor=0;
;;;4817   else avg_vektor=1;
;;;4818   	
;;;4819   if(avg_num<2)
;;;4820   	{
;;;4821   	//goto avg_hndl_end;
;;;4822   	return;
;;;4823   	}
;;;4824   	
;;;4825   else
;;;4826   	{
;;;4827   	i_avg_min=5000;
;;;4828   	i_avg_max=0;
;;;4829   	i_avg_summ=0;
;;;4830   	for(i=0;i<NUMIST;i++)
;;;4831   		{
;;;4832   		if(bps[i]._state==bsWRK)
;;;4833   			{
;;;4834   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;4835   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;4836   			
;;;4837   			i_avg_summ+=bps[i]._Ii;
;;;4838   			}
;;;4839   		}
;;;4840   	i_avg=i_avg_summ/avg_num;	
;;;4841   	
;;;4842   	if(i_avg_min==0)i_avg_min=1;
;;;4843   
;;;4844   	avg=i_avg_max;
;;;4845   	avg*=100;
;;;4846   	avg/=i_avg_min;
;;;4847   
;;;4848   	if(avg>130) bAVG=1;
;;;4849   	if(avg<110) bAVG=0;
;;;4850   
;;;4851   	if(bAVG==1)
;;;4852   		{
;;;4853   		for(i=0;i<NUMIST;i++)
;;;4854   			{
;;;4855   			if(bps[i]._state==bsWRK)
;;;4856   				{
;;;4857   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;4858   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;4859   			
;;;4860   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;4861   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;4862   				}
;;;4863   			}		
;;;4864   		}			
;;;4865   	}   	 
;;;4866   
;;;4867   
;;;4868   avg_hndl_end:
;;;4869   __nop();  
;;;4870   }
00388a  e7f3              B        |L1.14452|
                  |L1.14476|
00388c  f04f0005          MOV      r0,#5                 ;4804
003890  86e8              STRH     r0,[r5,#0x36]         ;4804
003892  f04f0700          MOV      r7,#0                 ;4805
003896  76af              STRB     r7,[r5,#0x1a]         ;4805
003898  f04f0000          MOV      r0,#0                 ;4807
00389c  491b              LDR      r1,|L1.14604|
00389e  4c18              LDR      r4,|L1.14592|
0038a0  f9b12000          LDRSH    r2,[r1,#0]            ;4807
0038a4  e012              B        |L1.14540|
                  |L1.14502|
0038a6  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4809
0038aa  eb011100          ADD      r1,r1,r0,LSL #4       ;4809
0038ae  eb040181          ADD      r1,r4,r1,LSL #2       ;4809
0038b2  788b              LDRB     r3,[r1,#2]            ;4809
0038b4  2b01              CMP      r3,#1                 ;4809
0038b6  d106              BNE      |L1.14534|
0038b8  78c9              LDRB     r1,[r1,#3]            ;4809
0038ba  2914              CMP      r1,#0x14              ;4809
0038bc  d203              BCS      |L1.14534|
0038be  7ea9              LDRB     r1,[r5,#0x1a]         ;4809  ; avg_num
0038c0  f1010101          ADD      r1,r1,#1              ;4809
0038c4  76a9              STRB     r1,[r5,#0x1a]         ;4809
                  |L1.14534|
0038c6  f1000001          ADD      r0,r0,#1              ;4807
0038ca  b2c0              UXTB     r0,r0                 ;4807
                  |L1.14540|
0038cc  4290              CMP      r0,r2                 ;4807
0038ce  dbea              BLT      |L1.14502|
0038d0  7ee8              LDRB     r0,[r5,#0x1b]         ;4816  ; avg_vektor
0038d2  f04f0c01          MOV      r12,#1                ;4809
0038d6  b108              CBZ      r0,|L1.14556|
0038d8  76ef              STRB     r7,[r5,#0x1b]         ;4816
0038da  e001              B        |L1.14560|
                  |L1.14556|
0038dc  f885c01b          STRB     r12,[r5,#0x1b]        ;4817
                  |L1.14560|
0038e0  7eae              LDRB     r6,[r5,#0x1a]         ;4819  ; avg_num
0038e2  2e02              CMP      r6,#2                 ;4819
0038e4  d3c6              BCC      |L1.14452|
0038e6  4b07              LDR      r3,|L1.14596|
0038e8  f2413088          MOV      r0,#0x1388            ;4827
0038ec  f1030380          ADD      r3,r3,#0x80           ;4827
0038f0  6218              STR      r0,[r3,#0x20]         ;4827  ; i_avg_min
0038f2  61df              STR      r7,[r3,#0x1c]         ;4828  ; i_avg_max
0038f4  625f              STR      r7,[r3,#0x24]         ;4829  ; i_avg_summ
0038f6  f04f0100          MOV      r1,#0                 ;4830
0038fa  e034              B        |L1.14694|
                  |L1.14588|
                          DCD      APV_ON2_TIME
                  |L1.14592|
                          DCD      bps
                  |L1.14596|
                          DCD      ||area_number.25||
                  |L1.14600|
                          DCD      APV_ON2
                  |L1.14604|
                          DCD      NUMIST
                  |L1.14608|
                          DCD      APV_ON1
                  |L1.14612|
                          DCD      0x4002c000
                  |L1.14616|
                          DCD      0x40034000
                  |L1.14620|
                          DCD      0xe000e100
                  |L1.14624|
                          DCD      ||.bss||+0x42c
                  |L1.14628|
                          DCD      ||.bss||+0xc
                  |L1.14632|
                          DCD      0x2009c000
                  |L1.14636|
00392c  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4832
003930  eb001001          ADD      r0,r0,r1,LSL #4       ;4832
003934  eb040080          ADD      r0,r4,r0,LSL #2       ;4832
003938  f8908002          LDRB     r8,[r0,#2]            ;4832
00393c  f1b80f01          CMP      r8,#1                 ;4832
003940  d10e              BNE      |L1.14688|
003942  6a40              LDR      r0,[r0,#0x24]         ;4834
003944  f8d3801c          LDR      r8,[r3,#0x1c]         ;4834  ; i_avg_max
003948  4540              CMP      r0,r8                 ;4834
00394a  dd00              BLE      |L1.14670|
00394c  61d8              STR      r0,[r3,#0x1c]         ;4834  ; i_avg_max
                  |L1.14670|
00394e  f8d38020          LDR      r8,[r3,#0x20]         ;4835  ; i_avg_min
003952  4540              CMP      r0,r8                 ;4835
003954  da00              BGE      |L1.14680|
003956  6218              STR      r0,[r3,#0x20]         ;4835  ; i_avg_min
                  |L1.14680|
003958  f8d38024          LDR      r8,[r3,#0x24]         ;4837  ; i_avg_summ
00395c  4440              ADD      r0,r0,r8              ;4837
00395e  6258              STR      r0,[r3,#0x24]         ;4837  ; i_avg_summ
                  |L1.14688|
003960  f1010101          ADD      r1,r1,#1              ;4830
003964  b2c9              UXTB     r1,r1                 ;4830
                  |L1.14694|
003966  4291              CMP      r1,r2                 ;4830
003968  dbe0              BLT      |L1.14636|
00396a  6a58              LDR      r0,[r3,#0x24]         ;4840  ; i_avg_summ
00396c  fb90f6f6          SDIV     r6,r0,r6              ;4840
003970  629e              STR      r6,[r3,#0x28]         ;4840  ; i_avg
003972  6a18              LDR      r0,[r3,#0x20]         ;4842  ; i_avg_min
003974  b908              CBNZ     r0,|L1.14714|
003976  f8c3c020          STR      r12,[r3,#0x20]        ;4842  ; i_avg_min
                  |L1.14714|
00397a  69d8              LDR      r0,[r3,#0x1c]         ;4844  ; i_avg_max
00397c  f04f0164          MOV      r1,#0x64              ;4845
003980  fb00f001          MUL      r0,r0,r1              ;4845
003984  6a19              LDR      r1,[r3,#0x20]         ;4846  ; i_avg_min
003986  fb90f0f1          SDIV     r0,r0,r1              ;4846
00398a  62d8              STR      r0,[r3,#0x2c]         ;4846  ; avg
00398c  2882              CMP      r0,#0x82              ;4848
00398e  dd01              BLE      |L1.14740|
003990  f885c019          STRB     r12,[r5,#0x19]        ;4848
                  |L1.14740|
003994  286e              CMP      r0,#0x6e              ;4849
003996  da00              BGE      |L1.14746|
003998  766f              STRB     r7,[r5,#0x19]         ;4849
                  |L1.14746|
00399a  7e68              LDRB     r0,[r5,#0x19]         ;4851  ; bAVG
00399c  2801              CMP      r0,#1                 ;4851
00399e  d138              BNE      |L1.14866|
0039a0  f04f0100          MOV      r1,#0                 ;4853
0039a4  f06f0731          MVN      r7,#0x31              ;4860
0039a8  e031              B        |L1.14862|
                  |L1.14762|
0039aa  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4855
0039ae  eb001001          ADD      r0,r0,r1,LSL #4       ;4855
0039b2  eb040080          ADD      r0,r4,r0,LSL #2       ;4855
0039b6  7883              LDRB     r3,[r0,#2]            ;4855
0039b8  2b01              CMP      r3,#1                 ;4855
0039ba  d125              BNE      |L1.14856|
0039bc  6a43              LDR      r3,[r0,#0x24]         ;4857
0039be  42b3              CMP      r3,r6                 ;4857
0039c0  dd0a              BLE      |L1.14808|
0039c2  f895c01b          LDRB     r12,[r5,#0x1b]        ;4857  ; avg_vektor
0039c6  f1bc0f00          CMP      r12,#0                ;4857
0039ca  d105              BNE      |L1.14808|
0039cc  f8b0c054          LDRH     r12,[r0,#0x54]        ;4857
0039d0  f1ac0c01          SUB      r12,r12,#1            ;4857
0039d4  f8a0c054          STRH     r12,[r0,#0x54]        ;4857
                  |L1.14808|
0039d8  42b3              CMP      r3,r6                 ;4858
0039da  da07              BGE      |L1.14828|
0039dc  7eeb              LDRB     r3,[r5,#0x1b]         ;4858  ; avg_vektor
0039de  b12b              CBZ      r3,|L1.14828|
0039e0  f8b03054          LDRH     r3,[r0,#0x54]         ;4858
0039e4  f1030301          ADD      r3,r3,#1              ;4858
0039e8  f8a03054          STRH     r3,[r0,#0x54]         ;4858
                  |L1.14828|
0039ec  f9b03054          LDRSH    r3,[r0,#0x54]         ;4860
0039f0  42bb              CMP      r3,r7                 ;4860
0039f2  da01              BGE      |L1.14840|
0039f4  f8a07054          STRH     r7,[r0,#0x54]         ;4860
                  |L1.14840|
0039f8  f9b03054          LDRSH    r3,[r0,#0x54]         ;4861
0039fc  2b32              CMP      r3,#0x32              ;4861
0039fe  dd03              BLE      |L1.14856|
003a00  f04f0332          MOV      r3,#0x32              ;4861
003a04  f8a03054          STRH     r3,[r0,#0x54]         ;4861
                  |L1.14856|
003a08  f1010101          ADD      r1,r1,#1              ;4853
003a0c  b2c9              UXTB     r1,r1                 ;4853
                  |L1.14862|
003a0e  4291              CMP      r1,r2                 ;4853
003a10  dbcb              BLT      |L1.14762|
                  |L1.14866|
003a12  bf00              NOP                            ;4869
003a14  e72e              B        |L1.14452|
;;;4871   
                          ENDP

                  rele_hndl PROC
;;;4884   //*************-----------------------------------------------
;;;4885   void rele_hndl(void)
003a16  e92d5ff0          PUSH     {r4-r12,lr}
;;;4886   {
;;;4887   //static char cnt_rel_sam;
;;;4888   //char temp;
;;;4889   
;;;4890   //temp=0;
;;;4891   
;;;4892   
;;;4893   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003a1a  48ff              LDR      r0,|L1.15896|
003a1c  6801              LDR      r1,[r0,#0]
003a1e  4aff              LDR      r2,|L1.15900|
003a20  ea010102          AND      r1,r1,r2
003a24  6001              STR      r1,[r0,#0]
;;;4894   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003a26  4cfe              LDR      r4,|L1.15904|
003a28  6821              LDR      r1,[r4,#0]
003a2a  f441717c          ORR      r1,r1,#0x3f0
003a2e  6021              STR      r1,[r4,#0]
;;;4895   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003a30  69c1              LDR      r1,[r0,#0x1c]
003a32  f4212140          BIC      r1,r1,#0xc0000
003a36  61c1              STR      r1,[r0,#0x1c]
;;;4896   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003a38  6e21              LDR      r1,[r4,#0x60]
003a3a  f0417100          ORR      r1,r1,#0x2000000
003a3e  6621              STR      r1,[r4,#0x60]
;;;4897   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003a40  6841              LDR      r1,[r0,#4]
003a42  f0216140          BIC      r1,r1,#0xc000000
003a46  6041              STR      r1,[r0,#4]
;;;4898   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003a48  6820              LDR      r0,[r4,#0]
003a4a  f0405000          ORR      r0,r0,#0x20000000
003a4e  6020              STR      r0,[r4,#0]
;;;4899   
;;;4900   
;;;4901   
;;;4902   
;;;4903   
;;;4904   
;;;4905   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003a50  48f5              LDR      r0,|L1.15912|
003a52  4df4              LDR      r5,|L1.15908|
003a54  49f6              LDR      r1,|L1.15920|
003a56  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003a58  48f4              LDR      r0,|L1.15916|
003a5a  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003a5e  f9b11000          LDRSH    r1,[r1,#0]
003a62  7800              LDRB     r0,[r0,#0]
003a64  4313              ORRS     r3,r3,r2
003a66  d007              BEQ      |L1.14968|
003a68  b130              CBZ      r0,|L1.14968|
003a6a  2905              CMP      r1,#5
003a6c  dd04              BLE      |L1.14968|
;;;4906   	{
;;;4907   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003a6e  69a3              LDR      r3,[r4,#0x18]
003a70  f4437380          ORR      r3,r3,#0x100
003a74  61a3              STR      r3,[r4,#0x18]
003a76  e003              B        |L1.14976|
                  |L1.14968|
;;;4908   	}
;;;4909   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003a78  69e3              LDR      r3,[r4,#0x1c]
003a7a  f4437380          ORR      r3,r3,#0x100
003a7e  61e3              STR      r3,[r4,#0x1c]
                  |L1.14976|
;;;4910   
;;;4911   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003a80  f8953088          LDRB     r3,[r5,#0x88]  ; bat
003a84  4313              ORRS     r3,r3,r2
003a86  d007              BEQ      |L1.15000|
003a88  b130              CBZ      r0,|L1.15000|
003a8a  2905              CMP      r1,#5
003a8c  dd04              BLE      |L1.15000|
;;;4912   	{
;;;4913   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003a8e  69a0              LDR      r0,[r4,#0x18]
003a90  f0400040          ORR      r0,r0,#0x40
003a94  61a0              STR      r0,[r4,#0x18]
003a96  e003              B        |L1.15008|
                  |L1.15000|
;;;4914   	}
;;;4915   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003a98  69e0              LDR      r0,[r4,#0x1c]
003a9a  f0400040          ORR      r0,r0,#0x40
003a9e  61e0              STR      r0,[r4,#0x1c]
                  |L1.15008|
;;;4916   
;;;4917   
;;;4918   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003aa0  20d2              MOVS     r0,#0xd2
003aa2  f7fffffe          BL       mess_find_unvol
003aa6  4de3              LDR      r5,|L1.15924|
003aa8  b110              CBZ      r0,|L1.15024|
003aaa  6828              LDR      r0,[r5,#0]  ; mess_data
003aac  2864              CMP      r0,#0x64
003aae  d048              BEQ      |L1.15170|
                  |L1.15024|
;;;4919   	{
;;;4920   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4921   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4922   	}
;;;4923   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003ab0  69e0              LDR      r0,[r4,#0x1c]
003ab2  f0405000          ORR      r0,r0,#0x20000000
003ab6  61e0              STR      r0,[r4,#0x1c]
                  |L1.15032|
;;;4924   
;;;4925   
;;;4926   #ifndef UKU2071x
;;;4927   //Реле аварии сети
;;;4928   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4929   	{
;;;4930   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4931   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4932   	}
;;;4933   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4934   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4935   #endif
;;;4936   #ifdef UKU2071x
;;;4937   //Реле аварии сети
;;;4938   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003ab8  20d2              MOVS     r0,#0xd2
003aba  f7fffffe          BL       mess_find_unvol
;;;4939   	{
;;;4940   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4941   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4942   	}
;;;4943   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003abe  4ede              LDR      r6,|L1.15928|
003ac0  b110              CBZ      r0,|L1.15048|
003ac2  6828              LDR      r0,[r5,#0]            ;4938  ; mess_data
003ac4  2866              CMP      r0,#0x66              ;4938
003ac6  d04b              BEQ      |L1.15200|
                  |L1.15048|
003ac8  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003aca  07c0              LSLS     r0,r0,#31
003acc  d054              BEQ      |L1.15224|
;;;4944   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003ace  6fa0              LDR      r0,[r4,#0x78]
003ad0  f0407000          ORR      r0,r0,#0x2000000
003ad4  67a0              STR      r0,[r4,#0x78]
                  |L1.15062|
;;;4945   #endif
;;;4946   
;;;4947   #ifdef UKU_3U
;;;4948   //Реле аварий батарей
;;;4949   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4950   	{
;;;4951   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4952   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4953        }
;;;4954   else 
;;;4955   	{
;;;4956   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4957        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4958   	} 
;;;4959   
;;;4960   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4961   	{
;;;4962   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4963   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4964        }
;;;4965   else 
;;;4966   	{
;;;4967   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4968        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4969   	} 
;;;4970   
;;;4971   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4972   	{
;;;4973   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4974   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4975        }
;;;4976   else 
;;;4977   	{
;;;4978   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4979        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4980   	} 
;;;4981   
;;;4982   #endif
;;;4983   
;;;4984   
;;;4985   #ifdef UKU_GLONASS
;;;4986   //Реле аварий батарей
;;;4987   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4988   	{
;;;4989   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4990   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4991        }
;;;4992   else 
;;;4993   	{
;;;4994   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4995        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4996   	} 
;;;4997   
;;;4998   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4999   	{
;;;5000   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5001   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5002        }
;;;5003   else 
;;;5004   	{
;;;5005   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5006        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5007   	} 
;;;5008   
;;;5009   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5010   	{
;;;5011   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5012   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5013        }
;;;5014   else 
;;;5015   	{
;;;5016   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5017        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5018   	} 
;;;5019   
;;;5020   #endif
;;;5021   
;;;5022   #ifdef U 
;;;5023   
;;;5024   #endif
;;;5025   
;;;5026   #ifdef UKU_RSTKM
;;;5027   
;;;5028   //Реле общей аварии
;;;5029   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5030   	{
;;;5031   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5032   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5033   	}
;;;5034   else 
;;;5035   	{
;;;5036        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5037             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5038             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5039             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5040             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5041        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5042   	}
;;;5043   	
;;;5044   
;;;5045   //Реле освещения
;;;5046   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5047   	{
;;;5048   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5049   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5050        }
;;;5051   else 
;;;5052   	{
;;;5053   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5054        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5055   	}
;;;5056   
;;;5057   
;;;5058   //Реле выключения нагрузки
;;;5059   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5060   	{
;;;5061   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5062   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5063        }
;;;5064   else if(tloaddisable_cmnd==0)
;;;5065   	{
;;;5066   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5067   	}
;;;5068   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5069   	{
;;;5070   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5071   	}
;;;5072   
;;;5073   else 
;;;5074   	{
;;;5075   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5076        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5077   	} 
;;;5078   
;;;5079   //Реле осевого вентилятора
;;;5080   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5081   	{
;;;5082   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5083   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5084   	}
;;;5085   else 
;;;5086   	{
;;;5087   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5088        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5089   	} 
;;;5090   
;;;5091   #endif
;;;5092   
;;;5093   #ifdef UKU_KONTUR
;;;5094   
;;;5095   //Реле общей аварии
;;;5096   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5097   	{
;;;5098   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5099   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5100   	}
;;;5101   else 
;;;5102   	{
;;;5103        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5104             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5105             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5106             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5107             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5108        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5109   	}
;;;5110   
;;;5111   	
;;;5112   //rel_warm_plazma=0;
;;;5113   //Реле освещения   
;;;5114   /*
;;;5115   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5116   	{
;;;5117   	if(mess_data[1]==0)
;;;5118   		{
;;;5119   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5120   		rel_warm_plazma=1;
;;;5121   		}
;;;5122   	else if(mess_data[1]==1) 
;;;5123   		{
;;;5124   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5125   		rel_warm_plazma=2;
;;;5126   		}
;;;5127        }
;;;5128   else 
;;;5129   	{
;;;5130   	if(warm_stat_k==wsOFF) 
;;;5131   		{
;;;5132   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5133   		rel_warm_plazma=3;
;;;5134   		}
;;;5135        else 
;;;5136   		{
;;;5137   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5138   		rel_warm_plazma=4;
;;;5139   		}
;;;5140   	}
;;;5141   */
;;;5142   //Реле освещения
;;;5143   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5144   	{
;;;5145   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5146   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5147        }
;;;5148   else 
;;;5149   	{
;;;5150   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5151        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5152   	}
;;;5153   
;;;5154   
;;;5155   
;;;5156   //Реле выключения нагрузки
;;;5157   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5158   	{
;;;5159   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5160   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5161        }
;;;5162   else if(tloaddisable_cmnd==0)
;;;5163   	{
;;;5164   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5165   	}
;;;5166   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5167   	{
;;;5168   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5169   	}
;;;5170   
;;;5171   else 
;;;5172   	{
;;;5173   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5174        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5175   	} 
;;;5176   
;;;5177   //Реле осевого вентилятора или отопителя
;;;5178   if(RELE_LOG)
;;;5179   	{
;;;5180   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5181   		{
;;;5182   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5183   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5184   		}
;;;5185   	else 
;;;5186   		{
;;;5187   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5188   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5189   		} 
;;;5190   
;;;5191   	}
;;;5192   else 
;;;5193   	{
;;;5194   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5195   		{
;;;5196   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5197   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5198   		}
;;;5199   	else 
;;;5200   		{
;;;5201   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5202   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5203   		} 
;;;5204   	}
;;;5205   #endif
;;;5206   
;;;5207   #ifdef UKU_6U
;;;5208   //Реле аварий батарей
;;;5209   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5210   	{
;;;5211   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5212   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5213        }
;;;5214   else 
;;;5215   	{
;;;5216   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5217        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5218   	} 
;;;5219   
;;;5220   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5221   	{
;;;5222   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5223   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5224       }
;;;5225   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5226   	{
;;;5227   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5228   		{
;;;5229   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5230   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5231        	}
;;;5232   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5233   	}
;;;5234   else 
;;;5235   	{
;;;5236   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5237       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5238   	} 
;;;5239   
;;;5240   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5241   	{
;;;5242   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5243   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5244        }
;;;5245   else 
;;;5246   	{
;;;5247   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5248        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5249   	} 
;;;5250   
;;;5251   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5252   	{
;;;5253   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5254   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5255   	}
;;;5256   else if((NPN_OUT==npnoRELEVENT))
;;;5257   	{
;;;5258   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5259   		{
;;;5260   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5261   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5262       	}
;;;5263   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5264   	}
;;;5265   else 
;;;5266   	{
;;;5267   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5268   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5269   	}
;;;5270   
;;;5271   #endif
;;;5272   
;;;5273   #ifdef UKU_220
;;;5274   //Реле аварий батарей
;;;5275   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5276   	{
;;;5277   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5278   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5279        }
;;;5280   else 
;;;5281   	{
;;;5282   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5283        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5284   	} 
;;;5285   
;;;5286   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5287   	{
;;;5288   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5289   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5290        }
;;;5291   else 
;;;5292   	{
;;;5293   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5294        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5295   	} 
;;;5296   
;;;5297   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5298   	{
;;;5299   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5300   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5301   	}
;;;5302   else 
;;;5303   	{
;;;5304   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5305   		{
;;;5306   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5307   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5308   		}
;;;5309   	else 
;;;5310   		{
;;;5311   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5312        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5313   		}
;;;5314   	}
;;;5315   
;;;5316   #endif
;;;5317   
;;;5318   #ifdef UKU_220_V2
;;;5319   //Реле аварий батарей
;;;5320   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5321   	{
;;;5322   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5323   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5324        }
;;;5325   else 
;;;5326   	{
;;;5327   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5328        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5329   	} 
;;;5330   
;;;5331   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5332   	{
;;;5333   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5334   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5335        }
;;;5336   else 
;;;5337   	{
;;;5338   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5339        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5340   	} 
;;;5341   
;;;5342   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5343   	{
;;;5344   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5345   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5346   	}
;;;5347   else 
;;;5348   	{
;;;5349   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5350   		{
;;;5351   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5352   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5353   		}
;;;5354   	else 
;;;5355   		{
;;;5356   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5357        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5358   		}
;;;5359   	}
;;;5360   
;;;5361   #endif
;;;5362   
;;;5363   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5364   
;;;5365   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003ad6  48d9              LDR      r0,|L1.15932|
;;;5366   	{
;;;5367   	#ifndef UKU2071x
;;;5368   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5369   		{
;;;5370   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5371   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5372   		}
;;;5373   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5374   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5375   	#endif
;;;5376   
;;;5377   	#ifdef UKU2071x
;;;5378   		#ifndef APSENERGIA
;;;5379   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5380   			{
;;;5381   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5382   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5383   			}
;;;5384   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5385   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5386   		#endif
;;;5387   
;;;5388   		#ifdef APSENERGIA
;;;5389   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5390   			{
;;;5391   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5392   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5393   			}
;;;5394   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5395   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5396   		#endif
;;;5397   
;;;5398   	#endif
;;;5399   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5400   		{
;;;5401   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5402   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5403   	     }
;;;5404   	else 
;;;5405   		{
;;;5406   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5407   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5408   		} 
;;;5409   
;;;5410   	//Реле аварий батарей
;;;5411   	#ifndef APSENERGIA
;;;5412   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5413   		{
;;;5414   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5415   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5416        	}
;;;5417   	else 
;;;5418   		{
;;;5419   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003ad8  f8df8364          LDR      r8,|L1.15936|
003adc  4fd9              LDR      r7,|L1.15940|
003ade  8800              LDRH     r0,[r0,#0]            ;5365  ; AUSW_MAIN
003ae0  f5a041aa          SUB      r1,r0,#0x5500         ;5365
003ae4  39fa              SUBS     r1,r1,#0xfa           ;5365
003ae6  d001              BEQ      |L1.15084|
003ae8  1e49              SUBS     r1,r1,#1              ;5365
003aea  d16f              BNE      |L1.15308|
                  |L1.15084|
003aec  20d2              MOVS     r0,#0xd2              ;5379
003aee  f7fffffe          BL       mess_find_unvol
003af2  b110              CBZ      r0,|L1.15098|
003af4  6828              LDR      r0,[r5,#0]            ;5379  ; mess_data
003af6  2866              CMP      r0,#0x66              ;5379
003af8  d043              BEQ      |L1.15234|
                  |L1.15098|
003afa  6830              LDR      r0,[r6,#0]            ;5384  ; avar_ind_stat
003afc  07c0              LSLS     r0,r0,#31             ;5384
003afe  d04d              BEQ      |L1.15260|
003b00  6fa0              LDR      r0,[r4,#0x78]         ;5385
003b02  f0407000          ORR      r0,r0,#0x2000000      ;5385
003b06  67a0              STR      r0,[r4,#0x78]         ;5385
                  |L1.15112|
003b08  20d2              MOVS     r0,#0xd2              ;5399
003b0a  f7fffffe          BL       mess_find_unvol
003b0e  b110              CBZ      r0,|L1.15126|
003b10  6828              LDR      r0,[r5,#0]            ;5399  ; mess_data
003b12  286a              CMP      r0,#0x6a              ;5399
003b14  d047              BEQ      |L1.15270|
                  |L1.15126|
003b16  6830              LDR      r0,[r6,#0]            ;5406  ; avar_ind_stat
003b18  4238              TST      r0,r7                 ;5406
003b1a  d052              BEQ      |L1.15298|
003b1c  69a0              LDR      r0,[r4,#0x18]         ;5407
003b1e  f0400080          ORR      r0,r0,#0x80           ;5407
003b22  61a0              STR      r0,[r4,#0x18]         ;5407
                  |L1.15140|
003b24  20d2              MOVS     r0,#0xd2              ;5412
003b26  f7fffffe          BL       mess_find_unvol
003b2a  b110              CBZ      r0,|L1.15154|
003b2c  6828              LDR      r0,[r5,#0]            ;5412  ; mess_data
003b2e  2867              CMP      r0,#0x67              ;5412
003b30  d04d              BEQ      |L1.15310|
                  |L1.15154|
003b32  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003b36  b380              CBZ      r0,|L1.15258|
;;;5420        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003b38  69a0              LDR      r0,[r4,#0x18]
003b3a  f0400010          ORR      r0,r0,#0x10
003b3e  61a0              STR      r0,[r4,#0x18]
003b40  e1ec              B        |L1.16156|
                  |L1.15170|
003b42  6868              LDR      r0,[r5,#4]            ;4920  ; mess_data
003b44  2801              CMP      r0,#1                 ;4920
003b46  d006              BEQ      |L1.15190|
003b48  2800              CMP      r0,#0                 ;4921
003b4a  d1b5              BNE      |L1.15032|
003b4c  69e0              LDR      r0,[r4,#0x1c]         ;4921
003b4e  f0405000          ORR      r0,r0,#0x20000000     ;4921
003b52  61e0              STR      r0,[r4,#0x1c]         ;4921
003b54  e7b0              B        |L1.15032|
                  |L1.15190|
003b56  69a0              LDR      r0,[r4,#0x18]         ;4920
003b58  f0405000          ORR      r0,r0,#0x20000000     ;4920
003b5c  61a0              STR      r0,[r4,#0x18]         ;4920
003b5e  e7ab              B        |L1.15032|
                  |L1.15200|
003b60  6868              LDR      r0,[r5,#4]            ;4940  ; mess_data
003b62  b120              CBZ      r0,|L1.15214|
003b64  6fa0              LDR      r0,[r4,#0x78]         ;4941
003b66  f0407000          ORR      r0,r0,#0x2000000      ;4941
003b6a  67a0              STR      r0,[r4,#0x78]         ;4941
003b6c  e7b3              B        |L1.15062|
                  |L1.15214|
003b6e  6fe0              LDR      r0,[r4,#0x7c]         ;4940
003b70  f0407000          ORR      r0,r0,#0x2000000      ;4940
003b74  67e0              STR      r0,[r4,#0x7c]         ;4940
003b76  e7ae              B        |L1.15062|
                  |L1.15224|
003b78  6fe0              LDR      r0,[r4,#0x7c]         ;4943
003b7a  f0407000          ORR      r0,r0,#0x2000000      ;4943
003b7e  67e0              STR      r0,[r4,#0x7c]         ;4943
003b80  e7a9              B        |L1.15062|
                  |L1.15234|
003b82  6868              LDR      r0,[r5,#4]            ;5381  ; mess_data
003b84  b120              CBZ      r0,|L1.15248|
003b86  6fa0              LDR      r0,[r4,#0x78]         ;5382
003b88  f0407000          ORR      r0,r0,#0x2000000      ;5382
003b8c  67a0              STR      r0,[r4,#0x78]         ;5382
003b8e  e7bb              B        |L1.15112|
                  |L1.15248|
003b90  6fe0              LDR      r0,[r4,#0x7c]         ;5381
003b92  f0407000          ORR      r0,r0,#0x2000000      ;5381
003b96  67e0              STR      r0,[r4,#0x7c]         ;5381
003b98  e7b6              B        |L1.15112|
                  |L1.15258|
003b9a  e027              B        |L1.15340|
                  |L1.15260|
003b9c  6fe0              LDR      r0,[r4,#0x7c]         ;5384
003b9e  f0407000          ORR      r0,r0,#0x2000000      ;5384
003ba2  67e0              STR      r0,[r4,#0x7c]         ;5384
003ba4  e7b0              B        |L1.15112|
                  |L1.15270|
003ba6  6868              LDR      r0,[r5,#4]            ;5401  ; mess_data
003ba8  b130              CBZ      r0,|L1.15288|
003baa  2801              CMP      r0,#1                 ;5402
003bac  d1ba              BNE      |L1.15140|
003bae  69a0              LDR      r0,[r4,#0x18]         ;5402
003bb0  f0400080          ORR      r0,r0,#0x80           ;5402
003bb4  61a0              STR      r0,[r4,#0x18]         ;5402
003bb6  e7b5              B        |L1.15140|
                  |L1.15288|
003bb8  69e0              LDR      r0,[r4,#0x1c]         ;5401
003bba  f0400080          ORR      r0,r0,#0x80           ;5401
003bbe  61e0              STR      r0,[r4,#0x1c]         ;5401
003bc0  e7b0              B        |L1.15140|
                  |L1.15298|
003bc2  69e0              LDR      r0,[r4,#0x1c]         ;5406
003bc4  f0400080          ORR      r0,r0,#0x80           ;5406
003bc8  61e0              STR      r0,[r4,#0x1c]         ;5406
003bca  e7ab              B        |L1.15140|
                  |L1.15308|
003bcc  e013              B        |L1.15350|
                  |L1.15310|
003bce  6868              LDR      r0,[r5,#4]            ;5414  ; mess_data
003bd0  b110              CBZ      r0,|L1.15320|
003bd2  2801              CMP      r0,#1                 ;5415
003bd4  d005              BEQ      |L1.15330|
003bd6  e1a1              B        |L1.16156|
                  |L1.15320|
003bd8  69e0              LDR      r0,[r4,#0x1c]         ;5414
003bda  f0400010          ORR      r0,r0,#0x10           ;5414
003bde  61e0              STR      r0,[r4,#0x1c]         ;5414
003be0  e19c              B        |L1.16156|
                  |L1.15330|
003be2  69a0              LDR      r0,[r4,#0x18]         ;5415
003be4  f0400010          ORR      r0,r0,#0x10           ;5415
003be8  61a0              STR      r0,[r4,#0x18]         ;5415
003bea  e197              B        |L1.16156|
                  |L1.15340|
003bec  69e0              LDR      r0,[r4,#0x1c]         ;5419
003bee  f0400010          ORR      r0,r0,#0x10           ;5419
003bf2  61e0              STR      r0,[r4,#0x1c]         ;5419
003bf4  e192              B        |L1.16156|
                  |L1.15350|
;;;5421   		}
;;;5422   	#endif
;;;5423   	#ifdef APSENERGIA
;;;5424   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5425   		{
;;;5426   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5427   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5428        	}
;;;5429   	else 
;;;5430   		{
;;;5431   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5432   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5433   		}
;;;5434   	#endif
;;;5435   	}
;;;5436   
;;;5437   else	if(AUSW_MAIN==22023)
003bf6  f5a041ac          SUB      r1,r0,#0x5600
003bfa  3907              SUBS     r1,#7
003bfc  d162              BNE      |L1.15556|
;;;5438   	{
;;;5439   
;;;5440   	//Реле аварий батарей
;;;5441   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003bfe  20d2              MOVS     r0,#0xd2
003c00  f7fffffe          BL       mess_find_unvol
003c04  b110              CBZ      r0,|L1.15372|
003c06  6828              LDR      r0,[r5,#0]  ; mess_data
003c08  2867              CMP      r0,#0x67
003c0a  d023              BEQ      |L1.15444|
                  |L1.15372|
;;;5442   		{
;;;5443   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5444   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5445        	}
;;;5446   	else 
;;;5447   		{
;;;5448   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003c0c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003c10  b370              CBZ      r0,|L1.15472|
;;;5449        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003c12  69a0              LDR      r0,[r4,#0x18]
003c14  f0400010          ORR      r0,r0,#0x10
003c18  61a0              STR      r0,[r4,#0x18]
                  |L1.15386|
;;;5450   		} 
;;;5451   
;;;5452   
;;;5453   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5454   	#ifndef UKU2071x
;;;5455   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5456   		{
;;;5457   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5458   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5459   		}
;;;5460   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5461   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5462   	#endif
;;;5463   	#ifdef UKU2071x
;;;5464   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c1a  20d2              MOVS     r0,#0xd2
003c1c  f7fffffe          BL       mess_find_unvol
003c20  b110              CBZ      r0,|L1.15400|
003c22  6828              LDR      r0,[r5,#0]  ; mess_data
003c24  2866              CMP      r0,#0x66
003c26  d028              BEQ      |L1.15482|
                  |L1.15400|
;;;5465   		{
;;;5466   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5467   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5468   		}
;;;5469   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003c28  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c2a  07c0              LSLS     r0,r0,#31
003c2c  d031              BEQ      |L1.15506|
;;;5470   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003c2e  6fa0              LDR      r0,[r4,#0x78]
003c30  f0407000          ORR      r0,r0,#0x2000000
003c34  67a0              STR      r0,[r4,#0x78]
                  |L1.15414|
;;;5471   	#endif
;;;5472   
;;;5473   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003c36  20d2              MOVS     r0,#0xd2
003c38  f7fffffe          BL       mess_find_unvol
003c3c  b110              CBZ      r0,|L1.15428|
003c3e  6828              LDR      r0,[r5,#0]  ; mess_data
003c40  286a              CMP      r0,#0x6a
003c42  d02b              BEQ      |L1.15516|
                  |L1.15428|
;;;5474   		{
;;;5475   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5476   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5477   	     }
;;;5478   	else 
;;;5479   		{
;;;5480   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003c44  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c46  4238              TST      r0,r7
003c48  d037              BEQ      |L1.15546|
;;;5481   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003c4a  69a0              LDR      r0,[r4,#0x18]
003c4c  f0400080          ORR      r0,r0,#0x80
003c50  61a0              STR      r0,[r4,#0x18]
003c52  e163              B        |L1.16156|
                  |L1.15444|
003c54  6868              LDR      r0,[r5,#4]            ;5443  ; mess_data
003c56  b130              CBZ      r0,|L1.15462|
003c58  2801              CMP      r0,#1                 ;5444
003c5a  d1de              BNE      |L1.15386|
003c5c  69a0              LDR      r0,[r4,#0x18]         ;5444
003c5e  f0400010          ORR      r0,r0,#0x10           ;5444
003c62  61a0              STR      r0,[r4,#0x18]         ;5444
003c64  e7d9              B        |L1.15386|
                  |L1.15462|
003c66  69e0              LDR      r0,[r4,#0x1c]         ;5443
003c68  f0400010          ORR      r0,r0,#0x10           ;5443
003c6c  61e0              STR      r0,[r4,#0x1c]         ;5443
003c6e  e7d4              B        |L1.15386|
                  |L1.15472|
003c70  69e0              LDR      r0,[r4,#0x1c]         ;5448
003c72  f0400010          ORR      r0,r0,#0x10           ;5448
003c76  61e0              STR      r0,[r4,#0x1c]         ;5448
003c78  e7cf              B        |L1.15386|
                  |L1.15482|
003c7a  6868              LDR      r0,[r5,#4]            ;5466  ; mess_data
003c7c  b120              CBZ      r0,|L1.15496|
003c7e  69e0              LDR      r0,[r4,#0x1c]         ;5467
003c80  f0407000          ORR      r0,r0,#0x2000000      ;5467
003c84  61e0              STR      r0,[r4,#0x1c]         ;5467
003c86  e7d6              B        |L1.15414|
                  |L1.15496|
003c88  69a0              LDR      r0,[r4,#0x18]         ;5466
003c8a  f0407000          ORR      r0,r0,#0x2000000      ;5466
003c8e  61a0              STR      r0,[r4,#0x18]         ;5466
003c90  e7d1              B        |L1.15414|
                  |L1.15506|
003c92  6ba0              LDR      r0,[r4,#0x38]         ;5469
003c94  f0407000          ORR      r0,r0,#0x2000000      ;5469
003c98  63a0              STR      r0,[r4,#0x38]         ;5469
003c9a  e7cc              B        |L1.15414|
                  |L1.15516|
003c9c  6868              LDR      r0,[r5,#4]            ;5475  ; mess_data
003c9e  b110              CBZ      r0,|L1.15526|
003ca0  2801              CMP      r0,#1                 ;5476
003ca2  d005              BEQ      |L1.15536|
003ca4  e13a              B        |L1.16156|
                  |L1.15526|
003ca6  69e0              LDR      r0,[r4,#0x1c]         ;5475
003ca8  f0400080          ORR      r0,r0,#0x80           ;5475
003cac  61e0              STR      r0,[r4,#0x1c]         ;5475
003cae  e135              B        |L1.16156|
                  |L1.15536|
003cb0  69a0              LDR      r0,[r4,#0x18]         ;5476
003cb2  f0400080          ORR      r0,r0,#0x80           ;5476
003cb6  61a0              STR      r0,[r4,#0x18]         ;5476
003cb8  e130              B        |L1.16156|
                  |L1.15546|
003cba  69e0              LDR      r0,[r4,#0x1c]         ;5480
003cbc  f0400080          ORR      r0,r0,#0x80           ;5480
003cc0  61e0              STR      r0,[r4,#0x1c]         ;5480
003cc2  e12b              B        |L1.16156|
                  |L1.15556|
;;;5482   		} 
;;;5483   	}
;;;5484   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003cc4  f5a041ac          SUB      r1,r0,#0x5600
003cc8  391b              SUBS     r1,r1,#0x1b
003cca  d001              BEQ      |L1.15568|
003ccc  1e49              SUBS     r1,r1,#1
003cce  d170              BNE      |L1.15794|
                  |L1.15568|
;;;5485   	{
;;;5486   	//Реле аварий батарей
;;;5487   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003cd0  20d2              MOVS     r0,#0xd2
003cd2  f7fffffe          BL       mess_find_unvol
003cd6  b110              CBZ      r0,|L1.15582|
003cd8  6828              LDR      r0,[r5,#0]  ; mess_data
003cda  2867              CMP      r0,#0x67
003cdc  d031              BEQ      |L1.15682|
                  |L1.15582|
;;;5488   		{
;;;5489   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5490   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5491        	}
;;;5492   	else 
;;;5493   		{
;;;5494   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003cde  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003ce2  b3b8              CBZ      r0,|L1.15700|
;;;5495        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ce4  69a0              LDR      r0,[r4,#0x18]
003ce6  f0400010          ORR      r0,r0,#0x10
003cea  61a0              STR      r0,[r4,#0x18]
                  |L1.15596|
;;;5496   		} 
;;;5497   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5498   	#ifndef UKU2071x 
;;;5499   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5500   		{
;;;5501   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5502   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5503   		}
;;;5504   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5505   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5506   	#endif
;;;5507   	#ifdef UKU2071x 
;;;5508   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003cec  20d2              MOVS     r0,#0xd2
003cee  f7fffffe          BL       mess_find_unvol
003cf2  b110              CBZ      r0,|L1.15610|
003cf4  6828              LDR      r0,[r5,#0]  ; mess_data
003cf6  2866              CMP      r0,#0x66
003cf8  d037              BEQ      |L1.15722|
                  |L1.15610|
;;;5509   		{
;;;5510   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5511   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5512   		}
;;;5513   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003cfa  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003cfc  07c0              LSLS     r0,r0,#31
003cfe  d040              BEQ      |L1.15746|
;;;5514   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003d00  6fa0              LDR      r0,[r4,#0x78]
003d02  f0407000          ORR      r0,r0,#0x2000000
003d06  67a0              STR      r0,[r4,#0x78]
                  |L1.15624|
;;;5515   	#endif
;;;5516   
;;;5517   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003d08  20d2              MOVS     r0,#0xd2
003d0a  f7fffffe          BL       mess_find_unvol
003d0e  b110              CBZ      r0,|L1.15638|
003d10  6828              LDR      r0,[r5,#0]  ; mess_data
003d12  286a              CMP      r0,#0x6a
003d14  d03a              BEQ      |L1.15756|
                  |L1.15638|
;;;5518   		{
;;;5519   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5520   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5521   	     }
;;;5522   	else 
;;;5523   		{
;;;5524   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003d16  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d18  4238              TST      r0,r7
003d1a  d045              BEQ      |L1.15784|
;;;5525   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003d1c  69a0              LDR      r0,[r4,#0x18]
003d1e  f0400080          ORR      r0,r0,#0x80
003d22  61a0              STR      r0,[r4,#0x18]
                  |L1.15652|
;;;5526   		}
;;;5527   	//Реле аварии БПС
;;;5528   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003d24  20d2              MOVS     r0,#0xd2
003d26  f7fffffe          BL       mess_find_unvol
003d2a  b110              CBZ      r0,|L1.15666|
003d2c  6828              LDR      r0,[r5,#0]  ; mess_data
003d2e  286a              CMP      r0,#0x6a
003d30  d040              BEQ      |L1.15796|
                  |L1.15666|
;;;5529   		{
;;;5530   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5531   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5532        	}
;;;5533   	else 
;;;5534   		{
;;;5535   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003d32  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d34  4238              TST      r0,r7
003d36  d04c              BEQ      |L1.15826|
;;;5536        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003d38  69a0              LDR      r0,[r4,#0x18]
003d3a  f0400020          ORR      r0,r0,#0x20
003d3e  61a0              STR      r0,[r4,#0x18]
003d40  e0ec              B        |L1.16156|
                  |L1.15682|
003d42  6868              LDR      r0,[r5,#4]            ;5489  ; mess_data
003d44  b138              CBZ      r0,|L1.15702|
003d46  2801              CMP      r0,#1                 ;5490
003d48  d1d0              BNE      |L1.15596|
003d4a  69a0              LDR      r0,[r4,#0x18]         ;5490
003d4c  f0400010          ORR      r0,r0,#0x10           ;5490
003d50  61a0              STR      r0,[r4,#0x18]         ;5490
003d52  e7cb              B        |L1.15596|
                  |L1.15700|
003d54  e004              B        |L1.15712|
                  |L1.15702|
003d56  69e0              LDR      r0,[r4,#0x1c]         ;5489
003d58  f0400010          ORR      r0,r0,#0x10           ;5489
003d5c  61e0              STR      r0,[r4,#0x1c]         ;5489
003d5e  e7c5              B        |L1.15596|
                  |L1.15712|
003d60  69e0              LDR      r0,[r4,#0x1c]         ;5494
003d62  f0400010          ORR      r0,r0,#0x10           ;5494
003d66  61e0              STR      r0,[r4,#0x1c]         ;5494
003d68  e7c0              B        |L1.15596|
                  |L1.15722|
003d6a  6868              LDR      r0,[r5,#4]            ;5510  ; mess_data
003d6c  b120              CBZ      r0,|L1.15736|
003d6e  69e0              LDR      r0,[r4,#0x1c]         ;5511
003d70  f0407000          ORR      r0,r0,#0x2000000      ;5511
003d74  61e0              STR      r0,[r4,#0x1c]         ;5511
003d76  e7c7              B        |L1.15624|
                  |L1.15736|
003d78  69a0              LDR      r0,[r4,#0x18]         ;5510
003d7a  f0407000          ORR      r0,r0,#0x2000000      ;5510
003d7e  61a0              STR      r0,[r4,#0x18]         ;5510
003d80  e7c2              B        |L1.15624|
                  |L1.15746|
003d82  6ba0              LDR      r0,[r4,#0x38]         ;5513
003d84  f0407000          ORR      r0,r0,#0x2000000      ;5513
003d88  63a0              STR      r0,[r4,#0x38]         ;5513
003d8a  e7bd              B        |L1.15624|
                  |L1.15756|
003d8c  6868              LDR      r0,[r5,#4]            ;5519  ; mess_data
003d8e  b130              CBZ      r0,|L1.15774|
003d90  2801              CMP      r0,#1                 ;5520
003d92  d1c7              BNE      |L1.15652|
003d94  69a0              LDR      r0,[r4,#0x18]         ;5520
003d96  f0400080          ORR      r0,r0,#0x80           ;5520
003d9a  61a0              STR      r0,[r4,#0x18]         ;5520
003d9c  e7c2              B        |L1.15652|
                  |L1.15774|
003d9e  69e0              LDR      r0,[r4,#0x1c]         ;5519
003da0  f0400080          ORR      r0,r0,#0x80           ;5519
003da4  61e0              STR      r0,[r4,#0x1c]         ;5519
003da6  e7bd              B        |L1.15652|
                  |L1.15784|
003da8  69e0              LDR      r0,[r4,#0x1c]         ;5524
003daa  f0400080          ORR      r0,r0,#0x80           ;5524
003dae  61e0              STR      r0,[r4,#0x1c]         ;5524
003db0  e7b8              B        |L1.15652|
                  |L1.15794|
003db2  e013              B        |L1.15836|
                  |L1.15796|
003db4  6868              LDR      r0,[r5,#4]            ;5530  ; mess_data
003db6  b110              CBZ      r0,|L1.15806|
003db8  2801              CMP      r0,#1                 ;5531
003dba  d005              BEQ      |L1.15816|
003dbc  e0ae              B        |L1.16156|
                  |L1.15806|
003dbe  69e0              LDR      r0,[r4,#0x1c]         ;5530
003dc0  f0400020          ORR      r0,r0,#0x20           ;5530
003dc4  61e0              STR      r0,[r4,#0x1c]         ;5530
003dc6  e0a9              B        |L1.16156|
                  |L1.15816|
003dc8  69a0              LDR      r0,[r4,#0x18]         ;5531
003dca  f0400020          ORR      r0,r0,#0x20           ;5531
003dce  61a0              STR      r0,[r4,#0x18]         ;5531
003dd0  e0a4              B        |L1.16156|
                  |L1.15826|
003dd2  69e0              LDR      r0,[r4,#0x1c]         ;5535
003dd4  f0400020          ORR      r0,r0,#0x20           ;5535
003dd8  61e0              STR      r0,[r4,#0x1c]         ;5535
003dda  e09f              B        |L1.16156|
                  |L1.15836|
;;;5537   		} 
;;;5538   	}
;;;5539   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003ddc  f5a041ac          SUB      r1,r0,#0x5600
003de0  3911              SUBS     r1,r1,#0x11
003de2  d001              BEQ      |L1.15848|
003de4  310f              ADDS     r1,r1,#0xf
003de6  d17d              BNE      |L1.16100|
                  |L1.15848|
;;;5540   	{
;;;5541   	#ifndef UKU2071x 
;;;5542   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5543   		{
;;;5544   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5545   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5546   		}
;;;5547   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5548   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5549   	#endif
;;;5550   	#ifdef UKU2071x 
;;;5551   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003de8  20d2              MOVS     r0,#0xd2
003dea  f7fffffe          BL       mess_find_unvol
003dee  b110              CBZ      r0,|L1.15862|
003df0  6828              LDR      r0,[r5,#0]  ; mess_data
003df2  2866              CMP      r0,#0x66
003df4  d03c              BEQ      |L1.15984|
                  |L1.15862|
;;;5552   		{
;;;5553   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5554   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5555   		}
;;;5556   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003df6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003df8  07c0              LSLS     r0,r0,#31
003dfa  d045              BEQ      |L1.16008|
;;;5557   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003dfc  6fa0              LDR      r0,[r4,#0x78]
003dfe  f0407000          ORR      r0,r0,#0x2000000
003e02  67a0              STR      r0,[r4,#0x78]
                  |L1.15876|
;;;5558   	#endif
;;;5559   	
;;;5560   	
;;;5561   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003e04  20d2              MOVS     r0,#0xd2
003e06  f7fffffe          BL       mess_find_unvol
003e0a  b110              CBZ      r0,|L1.15890|
003e0c  6828              LDR      r0,[r5,#0]  ; mess_data
003e0e  286a              CMP      r0,#0x6a
003e10  d03f              BEQ      |L1.16018|
                  |L1.15890|
;;;5562   		{
;;;5563   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5564   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5565   	     }
;;;5566   	else 
;;;5567   		{
;;;5568   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003e12  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e14  4238              TST      r0,r7
003e16  e017              B        |L1.15944|
                  |L1.15896|
                          DCD      0x4002c000
                  |L1.15900|
                          DCD      0xfff000ff
                  |L1.15904|
                          DCD      0x2009c000
                  |L1.15908|
                          DCD      bat
                  |L1.15912|
                          DCD      tbatdisable_stat
                  |L1.15916|
                          DCD      tbatdisable_cmnd
                  |L1.15920|
                          DCD      main_1Hz_cnt
                  |L1.15924|
                          DCD      mess_data
                  |L1.15928|
                          DCD      avar_ind_stat
                  |L1.15932|
                          DCD      AUSW_MAIN
                  |L1.15936|
                          DCD      ips_bat_av_stat
                  |L1.15940|
                          DCD      0x100007f8
                  |L1.15944|
003e48  d031              BEQ      |L1.16046|
;;;5569   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003e4a  69a0              LDR      r0,[r4,#0x18]
003e4c  f0400080          ORR      r0,r0,#0x80
003e50  61a0              STR      r0,[r4,#0x18]
                  |L1.15954|
;;;5570   		} 
;;;5571   
;;;5572   	//Реле аварий батарей
;;;5573   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003e52  20d2              MOVS     r0,#0xd2
003e54  f7fffffe          BL       mess_find_unvol
003e58  b110              CBZ      r0,|L1.15968|
003e5a  6828              LDR      r0,[r5,#0]  ; mess_data
003e5c  2867              CMP      r0,#0x67
003e5e  d02b              BEQ      |L1.16056|
                  |L1.15968|
;;;5574   		{
;;;5575   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5576   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5577        	}
;;;5578   	else 
;;;5579   		{
;;;5580   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003e60  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003e64  b390              CBZ      r0,|L1.16076|
;;;5581        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003e66  69a0              LDR      r0,[r4,#0x18]
003e68  f0400010          ORR      r0,r0,#0x10
003e6c  61a0              STR      r0,[r4,#0x18]
003e6e  e055              B        |L1.16156|
                  |L1.15984|
003e70  6868              LDR      r0,[r5,#4]            ;5553  ; mess_data
003e72  b120              CBZ      r0,|L1.15998|
003e74  6fa0              LDR      r0,[r4,#0x78]         ;5554
003e76  f0407000          ORR      r0,r0,#0x2000000      ;5554
003e7a  67a0              STR      r0,[r4,#0x78]         ;5554
003e7c  e7c2              B        |L1.15876|
                  |L1.15998|
003e7e  6fe0              LDR      r0,[r4,#0x7c]         ;5553
003e80  f0407000          ORR      r0,r0,#0x2000000      ;5553
003e84  67e0              STR      r0,[r4,#0x7c]         ;5553
003e86  e7bd              B        |L1.15876|
                  |L1.16008|
003e88  6fe0              LDR      r0,[r4,#0x7c]         ;5556
003e8a  f0407000          ORR      r0,r0,#0x2000000      ;5556
003e8e  67e0              STR      r0,[r4,#0x7c]         ;5556
003e90  e7b8              B        |L1.15876|
                  |L1.16018|
003e92  6868              LDR      r0,[r5,#4]            ;5563  ; mess_data
003e94  b130              CBZ      r0,|L1.16036|
003e96  2801              CMP      r0,#1                 ;5564
003e98  d1db              BNE      |L1.15954|
003e9a  69a0              LDR      r0,[r4,#0x18]         ;5564
003e9c  f0400080          ORR      r0,r0,#0x80           ;5564
003ea0  61a0              STR      r0,[r4,#0x18]         ;5564
003ea2  e7d6              B        |L1.15954|
                  |L1.16036|
003ea4  69e0              LDR      r0,[r4,#0x1c]         ;5563
003ea6  f0400080          ORR      r0,r0,#0x80           ;5563
003eaa  61e0              STR      r0,[r4,#0x1c]         ;5563
003eac  e7d1              B        |L1.15954|
                  |L1.16046|
003eae  69e0              LDR      r0,[r4,#0x1c]         ;5568
003eb0  f0400080          ORR      r0,r0,#0x80           ;5568
003eb4  61e0              STR      r0,[r4,#0x1c]         ;5568
003eb6  e7cc              B        |L1.15954|
                  |L1.16056|
003eb8  6868              LDR      r0,[r5,#4]            ;5575  ; mess_data
003eba  b110              CBZ      r0,|L1.16066|
003ebc  2801              CMP      r0,#1                 ;5576
003ebe  d007              BEQ      |L1.16080|
003ec0  e02c              B        |L1.16156|
                  |L1.16066|
003ec2  69e0              LDR      r0,[r4,#0x1c]         ;5575
003ec4  f0400010          ORR      r0,r0,#0x10           ;5575
003ec8  61e0              STR      r0,[r4,#0x1c]         ;5575
003eca  e027              B        |L1.16156|
                  |L1.16076|
003ecc  e005              B        |L1.16090|
003ece  e009              B        |L1.16100|
                  |L1.16080|
003ed0  69a0              LDR      r0,[r4,#0x18]         ;5576
003ed2  f0400010          ORR      r0,r0,#0x10           ;5576
003ed6  61a0              STR      r0,[r4,#0x18]         ;5576
003ed8  e020              B        |L1.16156|
                  |L1.16090|
003eda  69e0              LDR      r0,[r4,#0x1c]         ;5580
003edc  f0400010          ORR      r0,r0,#0x10           ;5580
003ee0  61e0              STR      r0,[r4,#0x1c]         ;5580
003ee2  e01b              B        |L1.16156|
                  |L1.16100|
;;;5582   		} 
;;;5583   	} 	 
;;;5584   else	
;;;5585   	{
;;;5586   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5587   	#ifndef UKU2071x 
;;;5588   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5589   		{
;;;5590   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5591   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5592   		}
;;;5593   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5594   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5595   	#endif
;;;5596   	#ifdef UKU2071x 
;;;5597   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003ee4  20d2              MOVS     r0,#0xd2
003ee6  f7fffffe          BL       mess_find_unvol
003eea  b110              CBZ      r0,|L1.16114|
003eec  6828              LDR      r0,[r5,#0]  ; mess_data
003eee  2866              CMP      r0,#0x66
003ef0  d026              BEQ      |L1.16192|
                  |L1.16114|
;;;5598   		{
;;;5599   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5600   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5601   		}
;;;5602   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003ef2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ef4  07c0              LSLS     r0,r0,#31
003ef6  d02f              BEQ      |L1.16216|
;;;5603   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003ef8  6fa0              LDR      r0,[r4,#0x78]
003efa  f0407000          ORR      r0,r0,#0x2000000
003efe  67a0              STR      r0,[r4,#0x78]
                  |L1.16128|
;;;5604   	#endif
;;;5605   
;;;5606   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003f00  20d2              MOVS     r0,#0xd2
003f02  f7fffffe          BL       mess_find_unvol
003f06  b110              CBZ      r0,|L1.16142|
003f08  6828              LDR      r0,[r5,#0]  ; mess_data
003f0a  286a              CMP      r0,#0x6a
003f0c  d029              BEQ      |L1.16226|
                  |L1.16142|
;;;5607   		{
;;;5608   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5609   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5610        	}
;;;5611   	else 
;;;5612   		{
;;;5613   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003f0e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f10  4238              TST      r0,r7
003f12  d034              BEQ      |L1.16254|
;;;5614        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003f14  69a0              LDR      r0,[r4,#0x18]
003f16  f0400020          ORR      r0,r0,#0x20
003f1a  61a0              STR      r0,[r4,#0x18]
                  |L1.16156|
;;;5615   		}
;;;5616   	}
;;;5617   //Дополнительное реле УКУ 
;;;5618   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003f1c  20d2              MOVS     r0,#0xd2
003f1e  f7fffffe          BL       mess_find_unvol
;;;5619   	{
;;;5620   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5621   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5622   	}
;;;5623   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5624   	{
;;;5625   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003f22  f8df83fc          LDR      r8,|L1.17184|
003f26  4fff              LDR      r7,|L1.17188|
003f28  4eff              LDR      r6,|L1.17192|
003f2a  b110              CBZ      r0,|L1.16178|
003f2c  6828              LDR      r0,[r5,#0]            ;5618  ; mess_data
003f2e  2871              CMP      r0,#0x71              ;5618
003f30  d02a              BEQ      |L1.16264|
                  |L1.16178|
003f32  48fe              LDR      r0,|L1.17196|
003f34  f9b00000          LDRSH    r0,[r0,#0]            ;5623  ; DOP_RELE_FUNC
003f38  b380              CBZ      r0,|L1.16284|
;;;5626   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5627   	}
;;;5628   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003f3a  2801              CMP      r0,#1
003f3c  d066              BEQ      |L1.16396|
003f3e  e070              B        |L1.16418|
                  |L1.16192|
003f40  6868              LDR      r0,[r5,#4]            ;5599  ; mess_data
003f42  b120              CBZ      r0,|L1.16206|
003f44  69e0              LDR      r0,[r4,#0x1c]         ;5600
003f46  f0407000          ORR      r0,r0,#0x2000000      ;5600
003f4a  61e0              STR      r0,[r4,#0x1c]         ;5600
003f4c  e7d8              B        |L1.16128|
                  |L1.16206|
003f4e  69a0              LDR      r0,[r4,#0x18]         ;5599
003f50  f0407000          ORR      r0,r0,#0x2000000      ;5599
003f54  61a0              STR      r0,[r4,#0x18]         ;5599
003f56  e7d3              B        |L1.16128|
                  |L1.16216|
003f58  6ba0              LDR      r0,[r4,#0x38]         ;5602
003f5a  f0407000          ORR      r0,r0,#0x2000000      ;5602
003f5e  63a0              STR      r0,[r4,#0x38]         ;5602
003f60  e7ce              B        |L1.16128|
                  |L1.16226|
003f62  6868              LDR      r0,[r5,#4]            ;5608  ; mess_data
003f64  b130              CBZ      r0,|L1.16244|
003f66  2801              CMP      r0,#1                 ;5609
003f68  d1d8              BNE      |L1.16156|
003f6a  69a0              LDR      r0,[r4,#0x18]         ;5609
003f6c  f0400020          ORR      r0,r0,#0x20           ;5609
003f70  61a0              STR      r0,[r4,#0x18]         ;5609
003f72  e7d3              B        |L1.16156|
                  |L1.16244|
003f74  69e0              LDR      r0,[r4,#0x1c]         ;5608
003f76  f0400020          ORR      r0,r0,#0x20           ;5608
003f7a  61e0              STR      r0,[r4,#0x1c]         ;5608
003f7c  e7ce              B        |L1.16156|
                  |L1.16254|
003f7e  69e0              LDR      r0,[r4,#0x1c]         ;5613
003f80  f0400020          ORR      r0,r0,#0x20           ;5613
003f84  61e0              STR      r0,[r4,#0x1c]         ;5613
003f86  e7c9              B        |L1.16156|
                  |L1.16264|
003f88  6868              LDR      r0,[r5,#4]            ;5620  ; mess_data
003f8a  b110              CBZ      r0,|L1.16274|
003f8c  2801              CMP      r0,#1                 ;5621
003f8e  d006              BEQ      |L1.16286|
003f90  e047              B        |L1.16418|
                  |L1.16274|
003f92  69e0              LDR      r0,[r4,#0x1c]         ;5620
003f94  f4407000          ORR      r0,r0,#0x200          ;5620
003f98  61e0              STR      r0,[r4,#0x1c]         ;5620
003f9a  e042              B        |L1.16418|
                  |L1.16284|
003f9c  e004              B        |L1.16296|
                  |L1.16286|
003f9e  69a0              LDR      r0,[r4,#0x18]         ;5621
003fa0  f4407000          ORR      r0,r0,#0x200          ;5621
003fa4  61a0              STR      r0,[r4,#0x18]         ;5621
003fa6  e03c              B        |L1.16418|
                  |L1.16296|
003fa8  48e1              LDR      r0,|L1.17200|
003faa  49e2              LDR      r1,|L1.17204|
003fac  f9b00000          LDRSH    r0,[r0,#0]            ;5625  ; speedChIsOn
003fb0  b9d0              CBNZ     r0,|L1.16360|
003fb2  f8962023          LDRB     r2,[r6,#0x23]         ;5625  ; spc_stat
003fb6  2a02              CMP      r2,#2                 ;5625
003fb8  d016              BEQ      |L1.16360|
003fba  780a              LDRB     r2,[r1,#0]            ;5625  ; hv_vz_stat
003fbc  b9a2              CBNZ     r2,|L1.16360|
003fbe  783a              LDRB     r2,[r7,#0]            ;5625  ; sp_ch_stat
003fc0  b992              CBNZ     r2,|L1.16360|
003fc2  7972              LDRB     r2,[r6,#5]            ;5625  ; vz1_stat
003fc4  b982              CBNZ     r2,|L1.16360|
003fc6  79f2              LDRB     r2,[r6,#7]            ;5625  ; vz2_stat
003fc8  b972              CBNZ     r2,|L1.16360|
003fca  f9b82000          LDRSH    r2,[r8,#0]            ;5625  ; load_U
003fce  230a              MOVS     r3,#0xa               ;5625
003fd0  fb92f2f3          SDIV     r2,r2,r3              ;5625
003fd4  4bd8              LDR      r3,|L1.17208|
003fd6  f9b33000          LDRSH    r3,[r3,#0]            ;5625  ; UVENTOFF
003fda  429a              CMP      r2,r3                 ;5625
003fdc  da04              BGE      |L1.16360|
003fde  69e0              LDR      r0,[r4,#0x1c]         ;5625
003fe0  f4407000          ORR      r0,r0,#0x200          ;5625
003fe4  61e0              STR      r0,[r4,#0x1c]         ;5625
003fe6  e01c              B        |L1.16418|
                  |L1.16360|
003fe8  b958              CBNZ     r0,|L1.16386|
003fea  f8960023          LDRB     r0,[r6,#0x23]         ;5626  ; spc_stat
003fee  2802              CMP      r0,#2                 ;5626
003ff0  d007              BEQ      |L1.16386|
003ff2  7808              LDRB     r0,[r1,#0]            ;5626  ; hv_vz_stat
003ff4  b928              CBNZ     r0,|L1.16386|
003ff6  7838              LDRB     r0,[r7,#0]            ;5626  ; sp_ch_stat
003ff8  b918              CBNZ     r0,|L1.16386|
003ffa  7970              LDRB     r0,[r6,#5]            ;5626  ; vz1_stat
003ffc  b908              CBNZ     r0,|L1.16386|
003ffe  79f0              LDRB     r0,[r6,#7]            ;5626  ; vz2_stat
004000  b178              CBZ      r0,|L1.16418|
                  |L1.16386|
004002  69a0              LDR      r0,[r4,#0x18]         ;5626
004004  f4407000          ORR      r0,r0,#0x200          ;5626
004008  61a0              STR      r0,[r4,#0x18]         ;5626
00400a  e00a              B        |L1.16418|
                  |L1.16396|
;;;5629   	{
;;;5630   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
00400c  20d2              MOVS     r0,#0xd2
00400e  f7fffffe          BL       mess_find_unvol
004012  b110              CBZ      r0,|L1.16410|
004014  6828              LDR      r0,[r5,#0]  ; mess_data
004016  2872              CMP      r0,#0x72
004018  d017              BEQ      |L1.16458|
                  |L1.16410|
;;;5631   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
00401a  69a0              LDR      r0,[r4,#0x18]
00401c  f4407000          ORR      r0,r0,#0x200
004020  61a0              STR      r0,[r4,#0x18]
                  |L1.16418|
;;;5632   	}
;;;5633   
;;;5634   #endif //o_9
;;;5635   
;;;5636   #if defined UKU_6U || defined UKU_220_IPS_TERMOKOMPENSAT   //o_9	
;;;5637   //Блок выносной реле
;;;5638   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
004022  20d2              MOVS     r0,#0xd2
004024  f7fffffe          BL       mess_find_unvol
;;;5639   	{
;;;5640   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
004028  f8df9310          LDR      r9,|L1.17212|
;;;5641   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5642   	}
;;;5643   else 
;;;5644   	{
;;;5645   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
00402c  4cc4              LDR      r4,|L1.17216|
00402e  b110              CBZ      r0,|L1.16438|
004030  6828              LDR      r0,[r5,#0]            ;5638  ; mess_data
004032  2875              CMP      r0,#0x75              ;5638
004034  d00e              BEQ      |L1.16468|
                  |L1.16438|
004036  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004038  07c0              LSLS     r0,r0,#31
00403a  d01e              BEQ      |L1.16506|
00403c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004040  f0400001          ORR      r0,r0,#1
004044  f8890000          STRB     r0,[r9,#0]
004048  e01d              B        |L1.16518|
                  |L1.16458|
00404a  69e0              LDR      r0,[r4,#0x1c]         ;5630
00404c  f4407000          ORR      r0,r0,#0x200          ;5630
004050  61e0              STR      r0,[r4,#0x1c]         ;5630
004052  e7e6              B        |L1.16418|
                  |L1.16468|
004054  6868              LDR      r0,[r5,#4]            ;5640  ; mess_data
004056  b110              CBZ      r0,|L1.16478|
004058  2801              CMP      r0,#1                 ;5641
00405a  d007              BEQ      |L1.16492|
00405c  e013              B        |L1.16518|
                  |L1.16478|
00405e  f8990000          LDRB     r0,[r9,#0]            ;5640  ; bdr_transmit_stat
004062  f00000fe          AND      r0,r0,#0xfe           ;5640
004066  f8890000          STRB     r0,[r9,#0]            ;5640
00406a  e00c              B        |L1.16518|
                  |L1.16492|
00406c  f8990000          LDRB     r0,[r9,#0]            ;5641  ; bdr_transmit_stat
004070  f0400001          ORR      r0,r0,#1              ;5641
004074  f8890000          STRB     r0,[r9,#0]            ;5641
004078  e005              B        |L1.16518|
                  |L1.16506|
;;;5646   	else 						bdr_transmit_stat&=0xfe;
00407a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00407e  f00000fe          AND      r0,r0,#0xfe
004082  f8890000          STRB     r0,[r9,#0]
                  |L1.16518|
;;;5647   	}	
;;;5648   
;;;5649   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
004086  20d2              MOVS     r0,#0xd2
004088  f7fffffe          BL       mess_find_unvol
00408c  b110              CBZ      r0,|L1.16532|
00408e  6828              LDR      r0,[r5,#0]  ; mess_data
004090  2876              CMP      r0,#0x76
004092  d009              BEQ      |L1.16552|
                  |L1.16532|
;;;5650   	{
;;;5651   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5652   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5653   	}
;;;5654   else 
;;;5655   	{
;;;5656   	if(bdr_avar_stat&0x02)  	bdr_transmit_stat|=0x02;	 //o_9
004094  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004096  0780              LSLS     r0,r0,#30
004098  d519              BPL      |L1.16590|
00409a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00409e  f0400002          ORR      r0,r0,#2
0040a2  f8890000          STRB     r0,[r9,#0]
0040a6  e018              B        |L1.16602|
                  |L1.16552|
0040a8  6868              LDR      r0,[r5,#4]            ;5651  ; mess_data
0040aa  b110              CBZ      r0,|L1.16562|
0040ac  2801              CMP      r0,#1                 ;5652
0040ae  d007              BEQ      |L1.16576|
0040b0  e013              B        |L1.16602|
                  |L1.16562|
0040b2  f8990000          LDRB     r0,[r9,#0]            ;5651  ; bdr_transmit_stat
0040b6  f00000fd          AND      r0,r0,#0xfd           ;5651
0040ba  f8890000          STRB     r0,[r9,#0]            ;5651
0040be  e00c              B        |L1.16602|
                  |L1.16576|
0040c0  f8990000          LDRB     r0,[r9,#0]            ;5652  ; bdr_transmit_stat
0040c4  f0400002          ORR      r0,r0,#2              ;5652
0040c8  f8890000          STRB     r0,[r9,#0]            ;5652
0040cc  e005              B        |L1.16602|
                  |L1.16590|
;;;5657   	else 						bdr_transmit_stat&=0xfd;
0040ce  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040d2  f00000fd          AND      r0,r0,#0xfd
0040d6  f8890000          STRB     r0,[r9,#0]
                  |L1.16602|
;;;5658   	}	
;;;5659   	
;;;5660   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
0040da  20d2              MOVS     r0,#0xd2
0040dc  f7fffffe          BL       mess_find_unvol
0040e0  b110              CBZ      r0,|L1.16616|
0040e2  6828              LDR      r0,[r5,#0]  ; mess_data
0040e4  2877              CMP      r0,#0x77
0040e6  d009              BEQ      |L1.16636|
                  |L1.16616|
;;;5661   	{
;;;5662   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5663   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5664   	}
;;;5665   else 
;;;5666   	{
;;;5667   	if(bdr_avar_stat&0x04)  	bdr_transmit_stat|=0x04;	//o_9
0040e8  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0040ea  0740              LSLS     r0,r0,#29
0040ec  d519              BPL      |L1.16674|
0040ee  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040f2  f0400004          ORR      r0,r0,#4
0040f6  f8890000          STRB     r0,[r9,#0]
0040fa  e018              B        |L1.16686|
                  |L1.16636|
0040fc  6868              LDR      r0,[r5,#4]            ;5662  ; mess_data
0040fe  b110              CBZ      r0,|L1.16646|
004100  2801              CMP      r0,#1                 ;5663
004102  d007              BEQ      |L1.16660|
004104  e013              B        |L1.16686|
                  |L1.16646|
004106  f8990000          LDRB     r0,[r9,#0]            ;5662  ; bdr_transmit_stat
00410a  f00000fb          AND      r0,r0,#0xfb           ;5662
00410e  f8890000          STRB     r0,[r9,#0]            ;5662
004112  e00c              B        |L1.16686|
                  |L1.16660|
004114  f8990000          LDRB     r0,[r9,#0]            ;5663  ; bdr_transmit_stat
004118  f0400004          ORR      r0,r0,#4              ;5663
00411c  f8890000          STRB     r0,[r9,#0]            ;5663
004120  e005              B        |L1.16686|
                  |L1.16674|
;;;5668   	else 						bdr_transmit_stat&=0xfb;
004122  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004126  f00000fb          AND      r0,r0,#0xfb
00412a  f8890000          STRB     r0,[r9,#0]
                  |L1.16686|
;;;5669   	}	
;;;5670   	
;;;5671   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
00412e  20d2              MOVS     r0,#0xd2
004130  f7fffffe          BL       mess_find_unvol
004134  b110              CBZ      r0,|L1.16700|
004136  6828              LDR      r0,[r5,#0]  ; mess_data
004138  2878              CMP      r0,#0x78
00413a  d009              BEQ      |L1.16720|
                  |L1.16700|
;;;5672   	{
;;;5673   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5674   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5675   	}
;;;5676   else 
;;;5677   	{
;;;5678   	if(bdr_avar_stat&0x08)  	bdr_transmit_stat|=0x08;	 //o_9
00413c  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00413e  0700              LSLS     r0,r0,#28
004140  d519              BPL      |L1.16758|
004142  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004146  f0400008          ORR      r0,r0,#8
00414a  f8890000          STRB     r0,[r9,#0]
00414e  e018              B        |L1.16770|
                  |L1.16720|
004150  6868              LDR      r0,[r5,#4]            ;5673  ; mess_data
004152  b110              CBZ      r0,|L1.16730|
004154  2801              CMP      r0,#1                 ;5674
004156  d007              BEQ      |L1.16744|
004158  e013              B        |L1.16770|
                  |L1.16730|
00415a  f8990000          LDRB     r0,[r9,#0]            ;5673  ; bdr_transmit_stat
00415e  f00000f7          AND      r0,r0,#0xf7           ;5673
004162  f8890000          STRB     r0,[r9,#0]            ;5673
004166  e00c              B        |L1.16770|
                  |L1.16744|
004168  f8990000          LDRB     r0,[r9,#0]            ;5674  ; bdr_transmit_stat
00416c  f0400008          ORR      r0,r0,#8              ;5674
004170  f8890000          STRB     r0,[r9,#0]            ;5674
004174  e005              B        |L1.16770|
                  |L1.16758|
;;;5679   	else 						bdr_transmit_stat&=0xf7;
004176  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00417a  f00000f7          AND      r0,r0,#0xf7
00417e  f8890000          STRB     r0,[r9,#0]
                  |L1.16770|
;;;5680   	}	
;;;5681   					 	
;;;5682   #endif
;;;5683   
;;;5684   #ifdef UKU_KONTUR
;;;5685   
;;;5686   //Реле общей аварии
;;;5687   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5688   	{
;;;5689   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5690   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5691   	}
;;;5692   else 
;;;5693   	{
;;;5694        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5695             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5696             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5697             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5698             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5699        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5700   	}
;;;5701   
;;;5702   	
;;;5703   //rel_warm_plazma=0;
;;;5704   //Реле освещения   
;;;5705   /*
;;;5706   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5707   	{
;;;5708   	if(mess_data[1]==0)
;;;5709   		{
;;;5710   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5711   		rel_warm_plazma=1;
;;;5712   		}
;;;5713   	else if(mess_data[1]==1) 
;;;5714   		{
;;;5715   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5716   		rel_warm_plazma=2;
;;;5717   		}
;;;5718        }
;;;5719   else 
;;;5720   	{
;;;5721   	if(warm_stat_k==wsOFF) 
;;;5722   		{
;;;5723   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5724   		rel_warm_plazma=3;
;;;5725   		}
;;;5726        else 
;;;5727   		{
;;;5728   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5729   		rel_warm_plazma=4;
;;;5730   		}
;;;5731   	}
;;;5732   */
;;;5733   //Реле освещения
;;;5734   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5735   	{
;;;5736   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5737   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5738        }
;;;5739   else 
;;;5740   	{
;;;5741   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5742        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5743   	}
;;;5744   
;;;5745   
;;;5746   
;;;5747   //Реле выключения нагрузки
;;;5748   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5749   	{
;;;5750   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5751   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5752        }
;;;5753   else if(tloaddisable_cmnd==0)
;;;5754   	{
;;;5755   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5756   	}
;;;5757   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5758   	{
;;;5759   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5760   	}
;;;5761   
;;;5762   else 
;;;5763   	{
;;;5764   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5765        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5766   	} 
;;;5767   
;;;5768   //Реле осевого вентилятора или отопителя
;;;5769   if(RELE_LOG)
;;;5770   	{
;;;5771   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5772   		{
;;;5773   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5774   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5775   		}
;;;5776   	else 
;;;5777   		{
;;;5778   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5779   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5780   		} 
;;;5781   
;;;5782   	}
;;;5783   else 
;;;5784   	{
;;;5785   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5786   		{
;;;5787   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5788   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5789   		}
;;;5790   	else 
;;;5791   		{
;;;5792   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5793   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5794   		} 
;;;5795   	}
;;;5796   #endif
;;;5797   
;;;5798   
;;;5799   #ifdef UKU_TELECORE2015
;;;5800   //Реле аварии сети
;;;5801   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5802   	{
;;;5803   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5804   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5805   	}
;;;5806   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5807   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5808   
;;;5809   
;;;5810   //Реле освещения
;;;5811   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5812   	{
;;;5813   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5814   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5815        }
;;;5816   else 
;;;5817   	{
;;;5818   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5819        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5820   	}
;;;5821   
;;;5822   //Реле отопителя
;;;5823   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5824   	{
;;;5825   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5826   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5827   	}
;;;5828   else 
;;;5829   	{
;;;5830   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5831        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5832   	} 
;;;5833   //Реле вентилятора
;;;5834   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5835   	{
;;;5836   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5837   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5838   	}
;;;5839   else 
;;;5840   	{
;;;5841   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5842        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5843   	} 
;;;5844   
;;;5845   //Реле внутреннего вентилятора
;;;5846   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5847   	{
;;;5848   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5849   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5850   	}
;;;5851   else 
;;;5852   	{
;;;5853   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5854        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5855   	} 
;;;5856   
;;;5857   #endif
;;;5858   
;;;5859   #ifdef UKU_TELECORE2017
;;;5860   //Реле аварии сети
;;;5861   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5862   	{
;;;5863   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5864   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5865   	}
;;;5866   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5867   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5868   
;;;5869   
;;;5870   //Реле освещения
;;;5871   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5872   	{
;;;5873   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5874   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5875        }
;;;5876   else 
;;;5877   	{
;;;5878   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5879        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5880   	}
;;;5881   
;;;5882   //Реле отопителя
;;;5883   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5884   	{
;;;5885   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5886   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5887   	}
;;;5888   else 
;;;5889   	{
;;;5890   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5891        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5892   	} 
;;;5893   //Реле вентилятора
;;;5894   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5895   	{
;;;5896   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5897   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5898   	}
;;;5899   else 
;;;5900   	{
;;;5901   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5902        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5903   	} 
;;;5904   
;;;5905   //Реле внутреннего вентилятора
;;;5906   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5907   	{
;;;5908   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5909   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5910   	}
;;;5911   else 
;;;5912   	{
;;;5913   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5914        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5915   	} 
;;;5916   
;;;5917   //Реле выключения нагрузки
;;;5918   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5919   	{
;;;5920   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5921   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5922        }
;;;5923   else if(tloaddisable_cmnd==0)
;;;5924   	{
;;;5925   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5926   	}
;;;5927   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5928   	{
;;;5929   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5930   	}
;;;5931   
;;;5932   else 
;;;5933   	{
;;;5934   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5935        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5936   	} 
;;;5937   
;;;5938   
;;;5939   #endif
;;;5940   
;;;5941   #ifdef IPS_SGEP_GAZPROM
;;;5942   rele_hndl_plazma[0]++;
;;;5943   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5944   	{
;;;5945   	rele_hndl_plazma[1]++;
;;;5946   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5947   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5948        }
;;;5949   else 
;;;5950   	{
;;;5951   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5952        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5953   	} 
;;;5954   
;;;5955   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5956   	{
;;;5957   	rele_hndl_plazma[2]++;
;;;5958   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5959   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5960   	}
;;;5961   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5962   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5963   #endif
;;;5964   
;;;5965   if(NUMBDR==1)
004182  4870              LDR      r0,|L1.17220|
004184  8800              LDRH     r0,[r0,#0]  ; NUMBDR
004186  2801              CMP      r0,#1
004188  d17e              BNE      |L1.17032|
;;;5966   	{
;;;5967   	char ii_;
;;;5968   	char bdr_avar_stat_temp=0;
00418a  f04f0000          MOV      r0,#0
;;;5969   	for	(ii_=0;ii_<4;ii_++)
00418e  4601              MOV      r1,r0
;;;5970   		{
;;;5971   	//o_9_s
;;;5972   	#ifdef UKU_6U
;;;5973   		 //АБ разряжена
;;;5974   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5975   			( (bat[0]._Ub<(USIGN*10)) || (bat[1]._Ub<(USIGN*10)) ) )			bdr_avar_stat_temp|=(1<<ii_);
;;;5976   		//Выравнивающий заряд
;;;5977   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5978   			(spc_stat==spcVZ))				bdr_avar_stat_temp|=(1<<ii_);
;;;5979   	   	//Общая авария ИБЭП
;;;5980   		if((RELE_SET_MASK[ii_]&0x04)&& 		
;;;5981   			(avar_stat&0x7FF)!=0 )		   	bdr_avar_stat_temp|=(1<<ii_);
;;;5982   		//Ток АКБ<-0,5А
;;;5983   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5984   			(bat[0]._Ib<-50	|| bat[1]._Ib<-50 ) ) bdr_avar_stat_temp|=(1<<ii_);
;;;5985   	   	//отключение НПН
;;;5986   	    if((RELE_SET_MASK[ii_]&0x10)&& 
;;;5987   			NPN_OUT==npnoBDR && npn_stat==npnsOFF) bdr_avar_stat_temp|=(1<<ii_);
;;;5988   		//контроль емкости АКБ1
;;;5989   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5990   			(spc_stat==spcKE)&&(spc_bat==0))	bdr_avar_stat_temp|=(1<<ii_); 
;;;5991   		//контроль емкости АКБ2
;;;5992   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5993   			(spc_stat==spcKE)&&(spc_bat==1))	bdr_avar_stat_temp|=(1<<ii_); 
;;;5994   	#else
;;;5995   	//o_9_e		//АБ разряжена
;;;5996   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5997   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5998   		//Ускоренный заряд
;;;5999   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6000   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;6001   		//Выравнивающий заряд
;;;6002   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;6003   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;6004   		//Общая авария ЗВУ
;;;6005   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6006   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;6007   		//Uвых завышено
;;;6008   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;6009   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
004190  f8dfa1b4          LDR      r10,|L1.17224|
;;;6010   		//Uвых занижено
;;;6011   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6012   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;6013   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6014   			(
;;;6015   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
004194  f8df91b4          LDR      r9,|L1.17228|
004198  4d6d              LDR      r5,|L1.17232|
00419a  f8dfb1b8          LDR      r11,|L1.17236|
00419e  f04f0301          MOV      r3,#1                 ;4920
                  |L1.16802|
0041a2  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5996
0041a6  ea5f7cc2          LSLS     r12,r2,#31            ;5996
0041aa  d010              BEQ      |L1.16846|
0041ac  f8dfc1a8          LDR      r12,|L1.17240|
0041b0  f9b8e000          LDRSH    lr,[r8,#0]            ;5997  ; load_U
0041b4  f9bcc000          LDRSH    r12,[r12,#0]          ;5997  ; USIGN
0041b8  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5997
0041bc  ebbe0f4c          CMP      lr,r12,LSL #1         ;5997
0041c0  da05              BGE      |L1.16846|
0041c2  fa03fc01          LSL      r12,r3,r1             ;5997
0041c6  ea4c0c00          ORR      r12,r12,r0            ;5997
0041ca  f00c00ff          AND      r0,r12,#0xff          ;5997
                  |L1.16846|
0041ce  ea5f7c82          LSLS     r12,r2,#30            ;5999
0041d2  d50a              BPL      |L1.16874|
0041d4  f897c000          LDRB     r12,[r7,#0]           ;6000  ; sp_ch_stat
0041d8  f1bc0f02          CMP      r12,#2                ;6000
0041dc  d105              BNE      |L1.16874|
0041de  fa03fc01          LSL      r12,r3,r1             ;6000
0041e2  ea4c0c00          ORR      r12,r12,r0            ;6000
0041e6  f00c00ff          AND      r0,r12,#0xff          ;6000
                  |L1.16874|
0041ea  ea5f7c42          LSLS     r12,r2,#29            ;6002
0041ee  d50a              BPL      |L1.16902|
0041f0  f896c023          LDRB     r12,[r6,#0x23]        ;6003  ; spc_stat
0041f4  f1bc0f02          CMP      r12,#2                ;6003
0041f8  d105              BNE      |L1.16902|
0041fa  fa03fc01          LSL      r12,r3,r1             ;6003
0041fe  ea4c0c00          ORR      r12,r12,r0            ;6003
004202  f00c00ff          AND      r0,r12,#0xff          ;6003
                  |L1.16902|
004206  ea5f7c02          LSLS     r12,r2,#28            ;6005
00420a  d50c              BPL      |L1.16934|
00420c  f8dfc14c          LDR      r12,|L1.17244|
004210  f8dcc000          LDR      r12,[r12,#0]          ;6006  ; avar_stat
004214  f1bc0f00          CMP      r12,#0                ;6006
004218  d005              BEQ      |L1.16934|
00421a  fa03fc01          LSL      r12,r3,r1             ;6006
00421e  ea4c0c00          ORR      r12,r12,r0            ;6006
004222  f00c00ff          AND      r0,r12,#0xff          ;6006
                  |L1.16934|
004226  ea5f6cc2          LSLS     r12,r2,#27            ;6008
00422a  d50a              BPL      |L1.16962|
00422c  f89ac000          LDRB     r12,[r10,#0]          ;6009  ; uout_av
004230  f1bc0f01          CMP      r12,#1                ;6009
004234  d105              BNE      |L1.16962|
004236  fa03fc01          LSL      r12,r3,r1             ;6009
00423a  ea4c0c00          ORR      r12,r12,r0            ;6009
00423e  f00c00ff          AND      r0,r12,#0xff          ;6009
                  |L1.16962|
004242  ea5f6c82          LSLS     r12,r2,#26            ;6011
004246  d50a              BPL      |L1.16990|
004248  f89ac000          LDRB     r12,[r10,#0]          ;6012  ; uout_av
00424c  f1bc0f02          CMP      r12,#2                ;6012
004250  d105              BNE      |L1.16990|
004252  fa03fc01          LSL      r12,r3,r1             ;6012
004256  ea4c0c00          ORR      r12,r12,r0            ;6012
00425a  f00c00ff          AND      r0,r12,#0xff          ;6012
                  |L1.16990|
00425e  ea5f6c42          LSLS     r12,r2,#25            ;6013
004262  d525              BPL      |L1.17072|
004264  f899c001          LDRB     r12,[r9,#1]  ; bps
004268  ea5f6ccc          LSLS     r12,r12,#27
00426c  d504              BPL      |L1.17016|
00426e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004272  f1bc0f01          CMP      r12,#1
004276  da15              BGE      |L1.17060|
                  |L1.17016|
;;;6016   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
004278  f899c065          LDRB     r12,[r9,#0x65]  ; bps
00427c  ea5f6ccc          LSLS     r12,r12,#27
004280  d506              BPL      |L1.17040|
004282  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004286  e000              B        |L1.17034|
                  |L1.17032|
004288  e047              B        |L1.17178|
                  |L1.17034|
00428a  f1bc0f02          CMP      r12,#2
00428e  da09              BGE      |L1.17060|
                  |L1.17040|
;;;6017   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
004290  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
004294  ea5f6ccc          LSLS     r12,r12,#27
004298  d50a              BPL      |L1.17072|
00429a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00429e  f1bc0f03          CMP      r12,#3
0042a2  db05              BLT      |L1.17072|
                  |L1.17060|
;;;6018   			))bdr_avar_stat_temp|=(1<<ii_);
0042a4  fa03fc01          LSL      r12,r3,r1
0042a8  ea4c0c00          ORR      r12,r12,r0
0042ac  f00c00ff          AND      r0,r12,#0xff
                  |L1.17072|
;;;6019   		if((RELE_SET_MASK[ii_]&0x80)&&
0042b0  ea5f6c02          LSLS     r12,r2,#24
0042b4  d523              BPL      |L1.17150|
;;;6020   			(
;;;6021   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
0042b6  f899c001          LDRB     r12,[r9,#1]  ; bps
0042ba  ea5f7c0c          LSLS     r12,r12,#28
0042be  d004              BEQ      |L1.17098|
0042c0  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042c4  f1bc0f01          CMP      r12,#1
0042c8  da13              BGE      |L1.17138|
                  |L1.17098|
;;;6022   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
0042ca  f899c065          LDRB     r12,[r9,#0x65]  ; bps
0042ce  ea5f7c0c          LSLS     r12,r12,#28
0042d2  d004              BEQ      |L1.17118|
0042d4  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042d8  f1bc0f02          CMP      r12,#2
0042dc  da09              BGE      |L1.17138|
                  |L1.17118|
;;;6023   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
0042de  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
0042e2  ea5f7c0c          LSLS     r12,r12,#28
0042e6  d00a              BEQ      |L1.17150|
0042e8  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0042ec  f1bc0f03          CMP      r12,#3
0042f0  db05              BLT      |L1.17150|
                  |L1.17138|
;;;6024   			))bdr_avar_stat_temp|=(1<<ii_);
0042f2  fa03fc01          LSL      r12,r3,r1
0042f6  ea4c0c00          ORR      r12,r12,r0
0042fa  f00c00ff          AND      r0,r12,#0xff
                  |L1.17150|
;;;6025   	  #endif											 //o_9
;;;6026   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
0042fe  0412              LSLS     r2,r2,#16
004300  d404              BMI      |L1.17164|
004302  fa03f201          LSL      r2,r3,r1
004306  ea820200          EOR      r2,r2,r0
00430a  b2d0              UXTB     r0,r2
                  |L1.17164|
00430c  f1010101          ADD      r1,r1,#1              ;5969
004310  b2c9              UXTB     r1,r1                 ;5969
004312  2904              CMP      r1,#4                 ;5969
004314  f4ffaf45          BCC      |L1.16802|
;;;6027   		}
;;;6028   	bdr_avar_stat=bdr_avar_stat_temp;
004318  7020              STRB     r0,[r4,#0]
                  |L1.17178|
;;;6029   	}
;;;6030   }
00431a  e8bd9ff0          POP      {r4-r12,pc}
00431e  0000              DCW      0x0000
                  |L1.17184|
                          DCD      load_U
                  |L1.17188|
                          DCD      sp_ch_stat
                  |L1.17192|
                          DCD      ||area_number.25||
                  |L1.17196|
                          DCD      DOP_RELE_FUNC
                  |L1.17200|
                          DCD      speedChIsOn
                  |L1.17204|
                          DCD      hv_vz_stat
                  |L1.17208|
                          DCD      UVENTOFF
                  |L1.17212|
                          DCD      bdr_transmit_stat
                  |L1.17216|
                          DCD      bdr_avar_stat
                  |L1.17220|
                          DCD      NUMBDR
                  |L1.17224|
                          DCD      uout_av
                  |L1.17228|
                          DCD      bps
                  |L1.17232|
                          DCD      NUMIST
                  |L1.17236|
                          DCD      RELE_SET_MASK
                  |L1.17240|
                          DCD      USIGN
                  |L1.17244|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6033   //-----------------------------------------------
;;;6034   void bps_hndl(void)
004360  e92d5ff0          PUSH     {r4-r12,lr}
;;;6035   {
;;;6036   char ptr__,i;
;;;6037   unsigned short tempUS;
;;;6038   
;;;6039   if(sh_cnt0<10)
004364  4eff              LDR      r6,|L1.18276|
;;;6040   	{
;;;6041   	sh_cnt0++;
;;;6042   	if(sh_cnt0>=10)
;;;6043   		{
;;;6044   		sh_cnt0=0;
004366  2700              MOVS     r7,#0
;;;6045   		b1Hz_sh=1;
004368  f04f0a01          MOV      r10,#1
00436c  f8960021          LDRB     r0,[r6,#0x21]         ;6039  ; sh_cnt0
004370  280a              CMP      r0,#0xa               ;6039
004372  d20a              BCS      |L1.17290|
004374  f1000001          ADD      r0,r0,#1              ;6041
004378  b2c0              UXTB     r0,r0                 ;6041
00437a  f8860021          STRB     r0,[r6,#0x21]         ;6041
00437e  280a              CMP      r0,#0xa               ;6042
004380  d303              BCC      |L1.17290|
004382  f8867021          STRB     r7,[r6,#0x21]         ;6044
004386  f886a022          STRB     r10,[r6,#0x22]
                  |L1.17290|
;;;6046   		}
;;;6047   	}
;;;6048   
;;;6049   /*if(sh_cnt1<5)
;;;6050   	{
;;;6051   	sh_cnt1++;
;;;6052   	if(sh_cnt1==5)
;;;6053   		{
;;;6054   		sh_cnt1=0;
;;;6055   		b2Hz_sh=1;
;;;6056   		}
;;;6057   	} */
;;;6058   
;;;6059   
;;;6060   /*
;;;6061   if(mess_find(MESS_SRC_ON_OFF))
;;;6062   	{
;;;6063   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6064   		{
;;;6065   		char i;
;;;6066   		for(i=0;i<NUMIST;i++)
;;;6067   			{
;;;6068   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6069   			}
;;;6070   		
;;;6071   		}
;;;6072   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6073   		{
;;;6074   		char i;
;;;6075   		for(i=0;i<NUMIST;i++)
;;;6076   			{
;;;6077   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6078   			}
;;;6079   		
;;;6080   		}
;;;6081   	}
;;;6082   	
;;;6083   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6084   	{				
;;;6085   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6086   		{
;;;6087   		char i;
;;;6088   		for(i=0;i<NUMIST;i++)
;;;6089   			{
;;;6090   			if(mess_data[1]&(1<<i))
;;;6091   				{
;;;6092   				src[i]._ist_blok_cnt=0;
;;;6093   				src[i]._flags_tu=2;
;;;6094   				}
;;;6095   			}
;;;6096   		
;;;6097   		}				
;;;6098   	}*/
;;;6099   
;;;6100   
;;;6101   
;;;6102   /*else*/ 
;;;6103   bps_on_mask=0;
00438a  f8a6705e          STRH     r7,[r6,#0x5e]
;;;6104   bps_off_mask=0;
00438e  f8a67060          STRH     r7,[r6,#0x60]
;;;6105   
;;;6106   if(mess_find_unvol(MESS2BPS_HNDL))
004392  20cd              MOVS     r0,#0xcd
004394  f7fffffe          BL       mess_find_unvol
;;;6107   	{
;;;6108   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6109   		{
;;;6110   		bps_off_mask=0xffff;
;;;6111   		}
;;;6112   
;;;6113   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6114   		{
;;;6115   		bps_off_mask=mess_data[1];
;;;6116   		}
;;;6117   
;;;6118   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6119   		{
;;;6120   		bps_on_mask=mess_data[1];
;;;6121   		}
;;;6122   
;;;6123   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6124   		{
;;;6125   		bps_on_mask=0xffff;
;;;6126   		}
;;;6127   
;;;6128   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6129   		{
;;;6130   		bps_on_mask=mess_data[1];
;;;6131   		bps_off_mask=~(mess_data[1]);
;;;6132   		}
;;;6133   
;;;6134   
;;;6135   	for(i=0;i<=NUMIST;i++)
;;;6136   		{
;;;6137   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
004398  f8df83cc          LDR      r8,|L1.18280|
00439c  f8dfb3cc          LDR      r11,|L1.18284|
0043a0  b3a0              CBZ      r0,|L1.17420|
0043a2  4af3              LDR      r2,|L1.18288|
0043a4  f64f73ff          MOV      r3,#0xffff            ;6110
0043a8  6810              LDR      r0,[r2,#0]            ;6108  ; mess_data
0043aa  28ce              CMP      r0,#0xce              ;6108
0043ac  d101              BNE      |L1.17330|
0043ae  f8a63060          STRH     r3,[r6,#0x60]         ;6110
                  |L1.17330|
0043b2  28cf              CMP      r0,#0xcf              ;6113
0043b4  d102              BNE      |L1.17340|
0043b6  6851              LDR      r1,[r2,#4]            ;6115  ; mess_data
0043b8  f8a61060          STRH     r1,[r6,#0x60]         ;6115
                  |L1.17340|
0043bc  28d1              CMP      r0,#0xd1              ;6118
0043be  d102              BNE      |L1.17350|
0043c0  6851              LDR      r1,[r2,#4]            ;6120  ; mess_data
0043c2  f8a6105e          STRH     r1,[r6,#0x5e]         ;6120
                  |L1.17350|
0043c6  28d2              CMP      r0,#0xd2              ;6123
0043c8  d101              BNE      |L1.17358|
0043ca  f8a6305e          STRH     r3,[r6,#0x5e]         ;6125
                  |L1.17358|
0043ce  28d0              CMP      r0,#0xd0              ;6128
0043d0  d106              BNE      |L1.17376|
0043d2  6850              LDR      r0,[r2,#4]            ;6130  ; mess_data
0043d4  f8a6005e          STRH     r0,[r6,#0x5e]         ;6130
0043d8  ea6f0000          MVN      r0,r0                 ;6131
0043dc  f8a60060          STRH     r0,[r6,#0x60]         ;6131
                  |L1.17376|
0043e0  f04f0400          MOV      r4,#0                 ;6135
0043e4  e037              B        |L1.17494|
                  |L1.17382|
0043e6  f8b60060          LDRH     r0,[r6,#0x60]  ; bps_off_mask
0043ea  fa0af904          LSL      r9,r10,r4
0043ee  ea190f00          TST      r9,r0
0043f2  d00c              BEQ      |L1.17422|
0043f4  eb0400c4          ADD      r0,r4,r4,LSL #3
0043f8  eb001004          ADD      r0,r0,r4,LSL #4
0043fc  eb080080          ADD      r0,r8,r0,LSL #2
004400  f8301f40          LDRH     r1,[r0,#0x40]!
004404  f1010101          ADD      r1,r1,#1
004408  8001              STRH     r1,[r0,#0]
00440a  e008              B        |L1.17438|
                  |L1.17420|
00440c  e028              B        |L1.17504|
                  |L1.17422|
;;;6138   		else bps[i]._blok_cnt=0;
00440e  eb0400c4          ADD      r0,r4,r4,LSL #3
004412  eb001004          ADD      r0,r0,r4,LSL #4
004416  eb080080          ADD      r0,r8,r0,LSL #2
00441a  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.17438|
;;;6139   		gran(&bps[i]._blok_cnt,0,50);
00441e  eb0400c4          ADD      r0,r4,r4,LSL #3
004422  eb001004          ADD      r0,r0,r4,LSL #4
004426  eb080580          ADD      r5,r8,r0,LSL #2
00442a  f1050040          ADD      r0,r5,#0x40
00442e  2232              MOVS     r2,#0x32
004430  2100              MOVS     r1,#0
004432  f7fffffe          BL       gran
;;;6140   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
004436  f9b50040          LDRSH    r0,[r5,#0x40]
00443a  2814              CMP      r0,#0x14
00443c  dd01              BLE      |L1.17474|
00443e  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17474|
;;;6141   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
004442  f8b6005e          LDRH     r0,[r6,#0x5e]  ; bps_on_mask
004446  ea190f00          TST      r9,r0
00444a  d001              BEQ      |L1.17488|
00444c  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.17488|
004450  f1040401          ADD      r4,r4,#1              ;6135
004454  b2e4              UXTB     r4,r4                 ;6135
                  |L1.17494|
004456  f9bb0000          LDRSH    r0,[r11,#0]           ;6135  ; NUMIST
00445a  4284              CMP      r4,r0                 ;6135
00445c  ddc3              BLE      |L1.17382|
00445e  e08d              B        |L1.17788|
                  |L1.17504|
;;;6142   	     }
;;;6143   
;;;6144   	
;;;6145   /*
;;;6146   
;;;6147   	if(bps_all_off_cnt>20)
;;;6148   		{
;;;6149   		for(i=0;i<=NUMIST;i++)
;;;6150   			{
;;;6151   	     	bps[i]._flags_tu=1;
;;;6152   	     	}
;;;6153   		}
;;;6154   	else if(bps_mask_off_cnt>20)
;;;6155   		{
;;;6156   		for(i=0;i<=NUMIST;i++)
;;;6157   			{
;;;6158   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6159   	     	}
;;;6160   		}	
;;;6161   		
;;;6162   	else if(bps_mask_on_off_cnt>20)
;;;6163   		{
;;;6164   		for(i=0;i<=NUMIST;i++)
;;;6165   			{
;;;6166   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6167   			else bps[i]._flags_tu=0;
;;;6168   	     	}
;;;6169   		}
;;;6170   		
;;;6171   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6172   		{
;;;6173   		for(i=0;i<=NUMIST;i++)
;;;6174   			{
;;;6175   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6176   	     	}
;;;6177   		}
;;;6178   */										
;;;6179   	}
;;;6180   
;;;6181   
;;;6182   else if(b1Hz_sh)
004460  f8960022          LDRB     r0,[r6,#0x22]  ; b1Hz_sh
004464  b3e8              CBZ      r0,|L1.17634|
;;;6183   	{
;;;6184   	ptr__=0;
004466  f04f0400          MOV      r4,#0
;;;6185        for(i=0;i<=NUMIST;i++)
00446a  4621              MOV      r1,r4
00446c  f9bb0000          LDRSH    r0,[r11,#0]           ;6135
004470  e00a              B        |L1.17544|
                  |L1.17522|
;;;6186   		{
;;;6187   	     bps[i]._flags_tu=1;
004472  eb0102c1          ADD      r2,r1,r1,LSL #3
004476  eb021201          ADD      r2,r2,r1,LSL #4
00447a  eb080282          ADD      r2,r8,r2,LSL #2
00447e  f882a02c          STRB     r10,[r2,#0x2c]
004482  f1010101          ADD      r1,r1,#1              ;6185
004486  b2c9              UXTB     r1,r1                 ;6185
                  |L1.17544|
004488  4281              CMP      r1,r0                 ;6185
00448a  ddf2              BLE      |L1.17522|
;;;6188   	     }	
;;;6189     	     
;;;6190     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
00448c  f04f0100          MOV      r1,#0
004490  e023              B        |L1.17626|
                  |L1.17554|
;;;6191     		{
;;;6192   		char ii,iii;
;;;6193   
;;;6194   		ii=(char)NUMIST;
004492  b2c2              UXTB     r2,r0
;;;6195   		//if(ii<0)ii=0;
;;;6196   		if(ii>32)ii=32;
004494  2a20              CMP      r2,#0x20
004496  d901              BLS      |L1.17564|
004498  f04f0220          MOV      r2,#0x20
                  |L1.17564|
;;;6197   		iii=numOfForvardBps;
00449c  f8963028          LDRB     r3,[r6,#0x28]  ; numOfForvardBps
;;;6198   		//if(iii<0)iii=0;
;;;6199   		if(iii>=NUMIST)iii=0;
0044a0  4283              CMP      r3,r0
0044a2  db01              BLT      |L1.17576|
0044a4  f04f0300          MOV      r3,#0
                  |L1.17576|
;;;6200   		iii+=i;
0044a8  440b              ADD      r3,r3,r1
0044aa  b2db              UXTB     r3,r3
;;;6201   		iii=iii%ii;
0044ac  fbb3f5f2          UDIV     r5,r3,r2
0044b0  fb023215          MLS      r2,r2,r5,r3
;;;6202   		
;;;6203     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
0044b4  eb0203c2          ADD      r3,r2,r2,LSL #3
0044b8  eb031202          ADD      r2,r3,r2,LSL #4
0044bc  eb080282          ADD      r2,r8,r2,LSL #2
0044c0  7893              LDRB     r3,[r2,#2]
0044c2  2b02              CMP      r3,#2
0044c4  d001              BEQ      |L1.17610|
0044c6  2b01              CMP      r3,#1
0044c8  d104              BNE      |L1.17620|
                  |L1.17610|
;;;6204     	         	{
;;;6205     	         	bps[iii]._flags_tu=0;
0044ca  f882702c          STRB     r7,[r2,#0x2c]
;;;6206     	         	ptr__++;
0044ce  f1040401          ADD      r4,r4,#1
0044d2  b2e4              UXTB     r4,r4
                  |L1.17620|
0044d4  f1010101          ADD      r1,r1,#1              ;6190
0044d8  b2c9              UXTB     r1,r1                 ;6190
                  |L1.17626|
0044da  4281              CMP      r1,r0                 ;6190
0044dc  da06              BGE      |L1.17644|
0044de  4aa5              LDR      r2,|L1.18292|
0044e0  e000              B        |L1.17636|
                  |L1.17634|
0044e2  e04b              B        |L1.17788|
                  |L1.17636|
0044e4  f9b22000          LDRSH    r2,[r2,#0]            ;6190  ; num_necc
0044e8  4294              CMP      r4,r2                 ;6190
0044ea  dbd2              BLT      |L1.17554|
                  |L1.17644|
;;;6207     	         	}
;;;6208   			
;;;6209     	     }
;;;6210   	bps[numOfForvardBps_old]._flags_tu=0;
0044ec  f8961029          LDRB     r1,[r6,#0x29]  ; numOfForvardBps_old
0044f0  eb0102c1          ADD      r2,r1,r1,LSL #3
0044f4  eb021101          ADD      r1,r2,r1,LSL #4
0044f8  eb080181          ADD      r1,r8,r1,LSL #2
0044fc  f881702c          STRB     r7,[r1,#0x2c]
;;;6211   
;;;6212   	if(main_1Hz_cnt<60)
004500  499d              LDR      r1,|L1.18296|
004502  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
004506  293c              CMP      r1,#0x3c
004508  da0f              BGE      |L1.17706|
;;;6213   		{
;;;6214        	for(i=0;i<=NUMIST;i++)
00450a  f04f0100          MOV      r1,#0
00450e  e00a              B        |L1.17702|
                  |L1.17680|
;;;6215   			{
;;;6216   	     	bps[i]._flags_tu=0;
004510  eb0102c1          ADD      r2,r1,r1,LSL #3
004514  eb021201          ADD      r2,r2,r1,LSL #4
004518  eb080282          ADD      r2,r8,r2,LSL #2
00451c  f882702c          STRB     r7,[r2,#0x2c]
004520  f1010101          ADD      r1,r1,#1              ;6214
004524  b2c9              UXTB     r1,r1                 ;6214
                  |L1.17702|
004526  4281              CMP      r1,r0                 ;6214
004528  ddf2              BLE      |L1.17680|
                  |L1.17706|
;;;6217   	     	}	
;;;6218   		}
;;;6219   	if(ipsBlckStat)
00452a  4994              LDR      r1,|L1.18300|
00452c  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
00452e  b179              CBZ      r1,|L1.17744|
;;;6220   		{
;;;6221        	for(i=0;i<=NUMIST;i++)
004530  f04f0100          MOV      r1,#0
004534  e00a              B        |L1.17740|
                  |L1.17718|
;;;6222   			{
;;;6223   	     	bps[i]._flags_tu=1;
004536  eb0102c1          ADD      r2,r1,r1,LSL #3
00453a  eb021201          ADD      r2,r2,r1,LSL #4
00453e  eb080282          ADD      r2,r8,r2,LSL #2
004542  f882a02c          STRB     r10,[r2,#0x2c]
004546  f1010101          ADD      r1,r1,#1              ;6221
00454a  b2c9              UXTB     r1,r1                 ;6221
                  |L1.17740|
00454c  4281              CMP      r1,r0                 ;6221
00454e  ddf2              BLE      |L1.17718|
                  |L1.17744|
;;;6224   	     	}
;;;6225   		}
;;;6226   
;;;6227        for(i=0;i<=NUMIST;i++)
004550  f04f0100          MOV      r1,#0
;;;6228   		{
;;;6229   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
004554  f06f0331          MVN      r3,#0x31
004558  e00e              B        |L1.17784|
                  |L1.17754|
00455a  eb0102c1          ADD      r2,r1,r1,LSL #3
00455e  eb021201          ADD      r2,r2,r1,LSL #4
004562  eb080282          ADD      r2,r8,r2,LSL #2
004566  f892402c          LDRB     r4,[r2,#0x2c]
00456a  2c01              CMP      r4,#1
00456c  d101              BNE      |L1.17778|
00456e  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.17778|
004572  f1010101          ADD      r1,r1,#1              ;6227
004576  b2c9              UXTB     r1,r1                 ;6227
                  |L1.17784|
004578  4281              CMP      r1,r0                 ;6227
00457a  ddee              BLE      |L1.17754|
                  |L1.17788|
;;;6230   	   	}	
;;;6231   		 
;;;6232     	}
;;;6233   
;;;6234   
;;;6235   for(i=0;i<NUMIST;i++)
00457c  f04f0000          MOV      r0,#0
;;;6236        {
;;;6237        if(bps[i]._ist_blok_host_cnt!=0)
;;;6238             {
;;;6239             bps[i]._flags_tu=99;
004580  f04f0463          MOV      r4,#0x63
004584  f9bb1000          LDRSH    r1,[r11,#0]           ;6135
004588  e00f              B        |L1.17834|
                  |L1.17802|
00458a  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6237
00458e  eb021200          ADD      r2,r2,r0,LSL #4       ;6237
004592  eb080282          ADD      r2,r8,r2,LSL #2       ;6237
004596  6bd3              LDR      r3,[r2,#0x3c]         ;6237
004598  b123              CBZ      r3,|L1.17828|
00459a  f882402c          STRB     r4,[r2,#0x2c]
;;;6240   	     bps[i]._ist_blok_host_cnt--;
00459e  f1a30301          SUB      r3,r3,#1
0045a2  63d3              STR      r3,[r2,#0x3c]
                  |L1.17828|
0045a4  f1000001          ADD      r0,r0,#1              ;6235
0045a8  b2c0              UXTB     r0,r0                 ;6235
                  |L1.17834|
0045aa  4288              CMP      r0,r1                 ;6235
0045ac  dbed              BLT      |L1.17802|
;;;6241             }
;;;6242        }
;;;6243   
;;;6244   
;;;6245   
;;;6246   
;;;6247   b1Hz_sh=0;
0045ae  f8867022          STRB     r7,[r6,#0x22]
;;;6248   
;;;6249   
;;;6250   num_of_wrks_bps=0;
0045b2  77b7              STRB     r7,[r6,#0x1e]
;;;6251   tempUS=0;
0045b4  f04f0200          MOV      r2,#0
;;;6252   for(i=0;i<NUMIST;i++)
0045b8  4610              MOV      r0,r2
0045ba  e013              B        |L1.17892|
                  |L1.17852|
;;;6253   	{
;;;6254   	if(bps[i]._state==bsWRK)
0045bc  eb0003c0          ADD      r3,r0,r0,LSL #3
0045c0  eb031300          ADD      r3,r3,r0,LSL #4
0045c4  eb080383          ADD      r3,r8,r3,LSL #2
0045c8  789c              LDRB     r4,[r3,#2]
0045ca  2c01              CMP      r4,#1
0045cc  d107              BNE      |L1.17886|
;;;6255   		{
;;;6256   		num_of_wrks_bps++;
0045ce  7fb4              LDRB     r4,[r6,#0x1e]  ; num_of_wrks_bps
0045d0  f1040401          ADD      r4,r4,#1
0045d4  77b4              STRB     r4,[r6,#0x1e]
;;;6257   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
0045d6  69db              LDR      r3,[r3,#0x1c]
0045d8  4293              CMP      r3,r2
0045da  dd00              BLE      |L1.17886|
0045dc  b29a              UXTH     r2,r3
                  |L1.17886|
0045de  f1000001          ADD      r0,r0,#1              ;6252
0045e2  b2c0              UXTB     r0,r0                 ;6252
                  |L1.17892|
0045e4  4288              CMP      r0,r1                 ;6252
0045e6  dbe9              BLT      |L1.17852|
;;;6258   		}
;;;6259   	}
;;;6260   Ubpsmax=tempUS;
0045e8  f8a6204e          STRH     r2,[r6,#0x4e]
;;;6261   
;;;6262   bPARALLEL_ENOUG=0;
0045ec  f886702c          STRB     r7,[r6,#0x2c]
;;;6263   bPARALLEL_NOT_ENOUG=1;
0045f0  f886a02b          STRB     r10,[r6,#0x2b]
;;;6264   
;;;6265   for(i=0;i<NUMIST;i++)
0045f4  f04f0000          MOV      r0,#0
;;;6266   	{
;;;6267   	if(bps[i]._Ti>=TSIGN)
0045f8  4a61              LDR      r2,|L1.18304|
0045fa  f9b23000          LDRSH    r3,[r2,#0]
;;;6268   		{
;;;6269   		bPARALLEL_ENOUG=1;
;;;6270   		}
;;;6271   	if(bps[i]._Ti>=(TSIGN-5))
0045fe  f1a30405          SUB      r4,r3,#5
004602  e011              B        |L1.17960|
                  |L1.17924|
004604  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6267
004608  eb021200          ADD      r2,r2,r0,LSL #4       ;6267
00460c  eb080282          ADD      r2,r8,r2,LSL #2       ;6267
004610  6a92              LDR      r2,[r2,#0x28]         ;6267
004612  429a              CMP      r2,r3                 ;6267
004614  db01              BLT      |L1.17946|
004616  f886a02c          STRB     r10,[r6,#0x2c]        ;6269
                  |L1.17946|
00461a  42a2              CMP      r2,r4
00461c  db01              BLT      |L1.17954|
;;;6272   		{
;;;6273   		bPARALLEL_NOT_ENOUG=0;
00461e  f886702b          STRB     r7,[r6,#0x2b]
                  |L1.17954|
004622  f1000001          ADD      r0,r0,#1              ;6265
004626  b2c0              UXTB     r0,r0                 ;6265
                  |L1.17960|
004628  4288              CMP      r0,r1                 ;6265
00462a  dbeb              BLT      |L1.17924|
;;;6274   		}
;;;6275   	}
;;;6276   
;;;6277   if(bPARALLEL_ENOUG==1)
00462c  f896002c          LDRB     r0,[r6,#0x2c]  ; bPARALLEL_ENOUG
004630  2801              CMP      r0,#1
004632  d00a              BEQ      |L1.17994|
;;;6278   	{
;;;6279   	bPARALLEL=1;
;;;6280   	}
;;;6281   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
004634  f896002d          LDRB     r0,[r6,#0x2d]  ; bPARALLEL
004638  2800              CMP      r0,#0
00463a  d005              BEQ      |L1.17992|
00463c  f896002b          LDRB     r0,[r6,#0x2b]  ; bPARALLEL_NOT_ENOUG
004640  2800              CMP      r0,#0
004642  d001              BEQ      |L1.17992|
;;;6282   	{
;;;6283   	bPARALLEL=0;
004644  f886702d          STRB     r7,[r6,#0x2d]
                  |L1.17992|
;;;6284   	}
;;;6285   }
004648  e667              B        |L1.17178|
                  |L1.17994|
00464a  f886a02d          STRB     r10,[r6,#0x2d]        ;6279
00464e  e664              B        |L1.17178|
;;;6286   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6293   //-----------------------------------------------
;;;6294   void powerAntiAliasingHndl(void)
004650  b570              PUSH     {r4-r6,lr}
;;;6295   {
;;;6296   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
004652  230a              MOVS     r3,#0xa
004654  4c4c              LDR      r4,|L1.18312|
004656  484b              LDR      r0,|L1.18308|
;;;6297   	{
;;;6298   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6299   	if(powerSummaryCnt>=10)
;;;6300   		{
;;;6301   		power_summary=power_summary_tempo;
;;;6302   		}
;;;6303   	}
;;;6304   else powerSummaryCnt=0;
004658  2500              MOVS     r5,#0
00465a  6822              LDR      r2,[r4,#0]            ;6296  ; power_summary_tempo_old
00465c  6800              LDR      r0,[r0,#0]            ;6296  ; power_summary_tempo
00465e  fbb2f6f3          UDIV     r6,r2,r3              ;6296
004662  fbb0f1f3          UDIV     r1,r0,r3              ;6296
004666  4a49              LDR      r2,|L1.18316|
004668  42b1              CMP      r1,r6                 ;6296
00466a  d10b              BNE      |L1.18052|
00466c  7811              LDRB     r1,[r2,#0]            ;6298  ; powerSummaryCnt
00466e  290f              CMP      r1,#0xf               ;6298
004670  d202              BCS      |L1.18040|
004672  f1010101          ADD      r1,r1,#1              ;6298
004676  7011              STRB     r1,[r2,#0]            ;6298
                  |L1.18040|
004678  7811              LDRB     r1,[r2,#0]            ;6299  ; powerSummaryCnt
00467a  290a              CMP      r1,#0xa               ;6299
00467c  d303              BCC      |L1.18054|
00467e  4944              LDR      r1,|L1.18320|
004680  6008              STR      r0,[r1,#0]            ;6301  ; power_summary
004682  e000              B        |L1.18054|
                  |L1.18052|
004684  7015              STRB     r5,[r2,#0]
                  |L1.18054|
;;;6305   power_summary_tempo_old=power_summary_tempo;
004686  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6306   
;;;6307   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
004688  4842              LDR      r0,|L1.18324|
00468a  4c43              LDR      r4,|L1.18328|
00468c  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
004690  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
004694  fbb0f1f3          UDIV     r1,r0,r3
004698  fbb2f3f3          UDIV     r3,r2,r3
;;;6308   	{
;;;6309   	if(powerCurrentCnt<15)powerCurrentCnt++;
00469c  4a3f              LDR      r2,|L1.18332|
00469e  4299              CMP      r1,r3                 ;6307
0046a0  d10b              BNE      |L1.18106|
0046a2  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0046a4  290f              CMP      r1,#0xf
0046a6  d202              BCS      |L1.18094|
0046a8  f1010101          ADD      r1,r1,#1
0046ac  7011              STRB     r1,[r2,#0]
                  |L1.18094|
;;;6310   	if(powerCurrentCnt>=10)
0046ae  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
0046b0  290a              CMP      r1,#0xa
0046b2  d303              BCC      |L1.18108|
;;;6311   		{
;;;6312   		power_current=power_current_tempo;
0046b4  493a              LDR      r1,|L1.18336|
0046b6  8008              STRH     r0,[r1,#0]
0046b8  e000              B        |L1.18108|
                  |L1.18106|
;;;6313   		}
;;;6314   	}
;;;6315   else powerCurrentCnt=0;
0046ba  7015              STRB     r5,[r2,#0]
                  |L1.18108|
;;;6316   power_current_tempo_old=power_current_tempo;
0046bc  8020              STRH     r0,[r4,#0]
;;;6317   }
0046be  bd70              POP      {r4-r6,pc}
;;;6318   
                          ENDP

                  energometr_hndl PROC
;;;6428   //-----------------------------------------------
;;;6429   void energometr_hndl(void)
0046c0  4770              BX       lr
;;;6430   {
;;;6431   //2F 3F 21 0D 0A 
;;;6432   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6433   //2F 3F 21 0D 0A 
;;;6434   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6435   //06 30 35 31 0D 0A 
;;;6436   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6437   
;;;6438   #ifdef CE102M_ENABLED
;;;6439   /*if
;;;6440   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6441   
;;;6442   if(read_power_cnt_main_cnt)
;;;6443   	{
;;;6444   	read_power_cnt_main_cnt--;
;;;6445   	if(read_power_cnt_main_cnt==0)
;;;6446   		{
;;;6447   		rx_read_power_cnt_phase=0;
;;;6448   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6449   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6450   		else bENERGOMETR_UIP=0;
;;;6451   		//bENERGOMETR_UIP=2;
;;;6452   		}
;;;6453   	}
;;;6454   
;;;6455   if (rx_read_power_cnt_phase==0)
;;;6456   	{
;;;6457   	char command_with_crc[20];
;;;6458   	
;;;6459      	command_with_crc[0]=0xaf;  // /
;;;6460   	command_with_crc[1]=0x3f;  // ?
;;;6461   	command_with_crc[2]=0x21;  // !
;;;6462   	command_with_crc[3]=0x8d;  // CR
;;;6463   	command_with_crc[4]=0x0a;  // LF
;;;6464   
;;;6465   	uart_out__adr1(command_with_crc,5);
;;;6466   
;;;6467   	rx_wr_index1=0;
;;;6468   	rx_read_power_cnt_phase=1;
;;;6469   
;;;6470   	read_power_cnt_main_cnt=50;
;;;6471   	}
;;;6472   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6473   	{
;;;6474   	char command_with_crc[20];
;;;6475   	
;;;6476   	command_with_crc[0]=0x06;  //  
;;;6477   	command_with_crc[1]=0x30;  // 0
;;;6478   	command_with_crc[2]=0x35;  // 5
;;;6479   	command_with_crc[3]=0xb1;  // 1
;;;6480   	command_with_crc[4]=0x8d;  // CR
;;;6481   	command_with_crc[5]=0x0a;  // LF
;;;6482   	
;;;6483   	uart_out__adr1(command_with_crc,6);
;;;6484   	
;;;6485   	rx_wr_index1=0;
;;;6486   	rx_read_power_cnt_phase=3;
;;;6487   
;;;6488   	read_power_cnt_main_cnt=50;
;;;6489   	}  
;;;6490   
;;;6491   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6492   	{
;;;6493   	char command_with_crc[20];
;;;6494   	
;;;6495   	command_with_crc[0]=0x81;  //  
;;;6496   	command_with_crc[1]=0xd2;  // 0
;;;6497   	command_with_crc[2]=0xb1;  // 5
;;;6498   	command_with_crc[3]=0x82;  // 1
;;;6499   	command_with_crc[4]=0x56;  // CR
;;;6500   	command_with_crc[5]=0xcf;  // LF
;;;6501   	command_with_crc[6]=0xcc;  // 1
;;;6502   	command_with_crc[7]=0xd4;  // CR
;;;6503   	command_with_crc[8]=0x41;  // LF
;;;6504   	command_with_crc[9]=0x28;  // 1
;;;6505   	command_with_crc[10]=0xa9;  // CR
;;;6506   	command_with_crc[11]=0x03;  // LF
;;;6507   	command_with_crc[12]=0x5f;  // LF
;;;6508   		
;;;6509   	uart_out__adr1(command_with_crc,13);
;;;6510   	
;;;6511   	rx_wr_index1=0;
;;;6512   	rx_read_power_cnt_phase=5;
;;;6513   
;;;6514   	read_power_cnt_main_cnt=50;
;;;6515   	}  
;;;6516   
;;;6517   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6518   	{
;;;6519   	char command_with_crc[20];
;;;6520   	
;;;6521   	command_with_crc[0]=0x81;  //  
;;;6522   	command_with_crc[1]=0xd2;  // 0
;;;6523   	command_with_crc[2]=0xb1;  // 5
;;;6524   	command_with_crc[3]=0x82;  // 1
;;;6525   	command_with_crc[4]=0xc3;  // CR
;;;6526   	command_with_crc[5]=0x55;  // LF
;;;6527   	command_with_crc[6]=0xd2;  // 1
;;;6528   	command_with_crc[7]=0xd2;  // CR
;;;6529   	command_with_crc[8]=0xc5;  // LF
;;;6530   	command_with_crc[9]=0x28;  // 1
;;;6531   	command_with_crc[10]=0xa9;  // CR
;;;6532   	command_with_crc[11]=0x03;  // LF
;;;6533   	command_with_crc[12]=0x5a;  // LF
;;;6534   		
;;;6535   	uart_out__adr1(command_with_crc,13);
;;;6536   	
;;;6537   	rx_wr_index1=0;
;;;6538   	rx_read_power_cnt_phase=9;
;;;6539   
;;;6540   	read_power_cnt_main_cnt=50;
;;;6541   	}  
;;;6542   
;;;6543   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6544   	{
;;;6545   	char command_with_crc[20];
;;;6546   	
;;;6547   	command_with_crc[0]=0x81;  //  		01
;;;6548   	command_with_crc[1]=0xd2;  // R		52
;;;6549   	command_with_crc[2]=0xb1;  // 1		31
;;;6550   	command_with_crc[3]=0x82;  // 		02
;;;6551   	command_with_crc[4]=0x50;  // P		50
;;;6552   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6553   	command_with_crc[6]=0xd7;  // W		57
;;;6554   	command_with_crc[7]=0xc5;  // E		45
;;;6555   	command_with_crc[8]=0x50;  // P		50
;;;6556   	command_with_crc[9]=0x28;  // (		28
;;;6557   	command_with_crc[10]=0xa9;  // )	29
;;;6558   	command_with_crc[11]=0x03;  // 		03
;;;6559   	command_with_crc[12]=0xe4;  // d	64
;;;6560   		
;;;6561   	uart_out__adr1(command_with_crc,13);
;;;6562   	
;;;6563   	rx_wr_index1=0;
;;;6564   	rx_read_power_cnt_phase=21;
;;;6565   
;;;6566   	read_power_cnt_main_cnt=50;
;;;6567   	}  
;;;6568   
;;;6569   
;;;6570   #endif
;;;6571   }
;;;6572   
                          ENDP

                  ips_current_average_hndl PROC
;;;6573   //-----------------------------------------------
;;;6574   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
0046c2  e92d4ff0          PUSH     {r4-r11,lr}
;;;6575   {
0046c6  b089              SUB      sp,sp,#0x24
;;;6576   
;;;6577   if(++ica_timer_cnt>=10) 
0046c8  4e36              LDR      r6,|L1.18340|
;;;6578   	{
;;;6579   	ica_timer_cnt=0;
0046ca  2400              MOVS     r4,#0
0046cc  7830              LDRB     r0,[r6,#0]            ;6577  ; ica_timer_cnt
0046ce  1c40              ADDS     r0,r0,#1              ;6577
0046d0  b2c0              UXTB     r0,r0                 ;6577
0046d2  7030              STRB     r0,[r6,#0]            ;6577
0046d4  280a              CMP      r0,#0xa               ;6577
0046d6  d300              BCC      |L1.18138|
0046d8  7034              STRB     r4,[r6,#0]
                  |L1.18138|
;;;6580   	}
;;;6581   
;;;6582   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
0046da  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
0046dc  4f32              LDR      r7,|L1.18344|
;;;6583   	{
;;;6584   	
;;;6585   	ica_plazma[0]++;
;;;6586   
;;;6587   	ica_my_current=bps_I;
;;;6588   
;;;6589   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
0046de  f8dfb0cc          LDR      r11,|L1.18348|
0046e2  4d20              LDR      r5,|L1.18276|
0046e4  bbe8              CBNZ     r0,|L1.18274|
0046e6  7fa8              LDRB     r0,[r5,#0x1e]         ;6582  ; num_of_wrks_bps
0046e8  b3d8              CBZ      r0,|L1.18274|
0046ea  f8950023          LDRB     r0,[r5,#0x23]         ;6582  ; spc_stat
0046ee  7969              LDRB     r1,[r5,#5]            ;6582  ; vz1_stat
0046f0  4308              ORRS     r0,r0,r1              ;6582
0046f2  79e9              LDRB     r1,[r5,#7]            ;6582  ; vz2_stat
0046f4  4308              ORRS     r0,r0,r1              ;6582
0046f6  7839              LDRB     r1,[r7,#0]            ;6582  ; sp_ch_stat
0046f8  4308              ORRS     r0,r0,r1              ;6582
0046fa  d17e              BNE      |L1.18426|
0046fc  f8df90b0          LDR      r9,|L1.18352|
004700  f8990000          LDRB     r0,[r9,#0]            ;6585  ; ica_plazma
004704  f1000001          ADD      r0,r0,#1              ;6585
004708  f8890000          STRB     r0,[r9,#0]            ;6585
00470c  4829              LDR      r0,|L1.18356|
00470e  f9b01000          LDRSH    r1,[r0,#0]            ;6587  ; bps_I
004712  4829              LDR      r0,|L1.18360|
004714  8001              STRH     r1,[r0,#0]            ;6587
004716  4829              LDR      r0,|L1.18364|
;;;6590   		{
;;;6591   		ica_plazma[1]++;
;;;6592   		ica_u_necc--;
004718  f8dfa0a4          LDR      r10,|L1.18368|
00471c  f9b02000          LDRSH    r2,[r0,#0]            ;6589  ; ica_your_current
004720  4648              MOV      r0,r9                 ;6585
004722  f9bac000          LDRSH    r12,[r10,#0]
004726  7843              LDRB     r3,[r0,#1]            ;6591
004728  4826              LDR      r0,|L1.18372|
00472a  4291              CMP      r1,r2                 ;6589
00472c  f9b08000          LDRSH    r8,[r0,#0]            ;6589
004730  4658              MOV      r0,r11                ;6589
004732  f9b00000          LDRSH    r0,[r0,#0]            ;6589
004736  dd47              BLE      |L1.18376|
004738  eba10e02          SUB      lr,r1,r2              ;6589
00473c  f1be0f05          CMP      lr,#5                 ;6589
004740  db42              BLT      |L1.18376|
004742  2801              CMP      r0,#1                 ;6589
004744  d004              BEQ      |L1.18256|
004746  2802              CMP      r0,#2                 ;6589
004748  d13e              BNE      |L1.18376|
00474a  f1b80f05          CMP      r8,#5                 ;6589
00474e  dd3b              BLE      |L1.18376|
                  |L1.18256|
004750  f1030301          ADD      r3,r3,#1              ;6591
004754  f8893001          STRB     r3,[r9,#1]            ;6591
004758  f1ac0c01          SUB      r12,r12,#1
00475c  f8aac000          STRH     r12,[r10,#0]
004760  e046              B        |L1.18416|
                  |L1.18274|
004762  e04a              B        |L1.18426|
                  |L1.18276|
                          DCD      ||area_number.25||
                  |L1.18280|
                          DCD      bps
                  |L1.18284|
                          DCD      NUMIST
                  |L1.18288|
                          DCD      mess_data
                  |L1.18292|
                          DCD      num_necc
                  |L1.18296|
                          DCD      main_1Hz_cnt
                  |L1.18300|
                          DCD      ipsBlckStat
                  |L1.18304|
                          DCD      TSIGN
                  |L1.18308|
                          DCD      power_summary_tempo
                  |L1.18312|
                          DCD      power_summary_tempo_old
                  |L1.18316|
                          DCD      powerSummaryCnt
                  |L1.18320|
                          DCD      power_summary
                  |L1.18324|
                          DCD      power_current_tempo
                  |L1.18328|
                          DCD      power_current_tempo_old
                  |L1.18332|
                          DCD      powerCurrentCnt
                  |L1.18336|
                          DCD      power_current
                  |L1.18340|
                          DCD      ica_timer_cnt
                  |L1.18344|
                          DCD      sp_ch_stat
                  |L1.18348|
                          DCD      ICA_EN
                  |L1.18352|
                          DCD      ica_plazma
                  |L1.18356|
                          DCD      bps_I
                  |L1.18360|
                          DCD      ica_my_current
                  |L1.18364|
                          DCD      ica_your_current
                  |L1.18368|
                          DCD      ica_u_necc
                  |L1.18372|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.18376|
;;;6593   		}
;;;6594   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
0047c8  4291              CMP      r1,r2
0047ca  da11              BGE      |L1.18416|
0047cc  1a51              SUBS     r1,r2,r1
0047ce  2905              CMP      r1,#5
0047d0  db0e              BLT      |L1.18416|
0047d2  2801              CMP      r0,#1
0047d4  d004              BEQ      |L1.18400|
0047d6  2802              CMP      r0,#2
0047d8  d10a              BNE      |L1.18416|
0047da  f1b80f05          CMP      r8,#5
0047de  dd07              BLE      |L1.18416|
                  |L1.18400|
;;;6595   		{
;;;6596   		ica_plazma[1]--;
0047e0  f1a30301          SUB      r3,r3,#1
0047e4  f8893001          STRB     r3,[r9,#1]
;;;6597   		ica_u_necc++;
0047e8  f10c0c01          ADD      r12,r12,#1
0047ec  f8aac000          STRH     r12,[r10,#0]
                  |L1.18416|
;;;6598   		}
;;;6599   	gran(&ica_u_necc,-100,100);
0047f0  2264              MOVS     r2,#0x64
0047f2  4251              RSBS     r1,r2,#0
0047f4  48f8              LDR      r0,|L1.19416|
0047f6  f7fffffe          BL       gran
                  |L1.18426|
;;;6600   	}
;;;6601   
;;;6602   
;;;6603   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
0047fa  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
0047fe  2801              CMP      r0,#1
004800  d169              BNE      |L1.18646|
004802  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
004806  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004808  4308              ORRS     r0,r0,r1
00480a  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
00480c  4308              ORRS     r0,r0,r1
00480e  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
004810  4308              ORRS     r0,r0,r1
004812  d160              BNE      |L1.18646|
004814  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
004816  2800              CMP      r0,#0
004818  d05d              BEQ      |L1.18646|
;;;6604   	{
;;;6605   	
;;;6606   //	ica_connect_cnt++;
;;;6607   
;;;6608   	if(ica_timer_cnt==8)
00481a  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6609   		{
;;;6610   		char modbus_buff[20],i;
;;;6611   		short crc_temp;
;;;6612   	
;;;6613   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00481c  4bef              LDR      r3,|L1.19420|
;;;6614   		modbus_buff[1] = 4;
;;;6615   		modbus_buff[2] = 0;
;;;6616   		modbus_buff[3] = 2;
;;;6617   		modbus_buff[4] = 0;	
;;;6618   		modbus_buff[5] = 1;
;;;6619   	
;;;6620   		crc_temp= CRC16_2(modbus_buff,6);
;;;6621   	
;;;6622   		modbus_buff[6]= (char)crc_temp;
;;;6623   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6624   	
;;;6625   		if(ICA_CH==0)
00481e  4ff0              LDR      r7,|L1.19424|
004820  2808              CMP      r0,#8                 ;6608
004822  d05b              BEQ      |L1.18652|
;;;6626   			{
;;;6627   			for (i=0;i<8;i++)
;;;6628   				{
;;;6629   				putchar_sc16is700(modbus_buff[i]);
;;;6630   				}
;;;6631   			}
;;;6632   		else if(ICA_CH==2)
;;;6633   			{
;;;6634   			uart_out1 (5,4,0,2,0,1,0);
;;;6635   			}
;;;6636   		}
;;;6637   	else
;;;6638   		{
;;;6639   		char modbus_buff[20],i;
;;;6640   		short crc_temp, tempSSSS;
;;;6641   
;;;6642   		tempSSSS=cntrl_stat_old;
004824  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6643   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
004828  48ee              LDR      r0,|L1.19428|
00482a  f06f0214          MVN      r2,#0x14
00482e  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
004832  ebc01100          RSB      r1,r0,r0,LSL #4
004836  eb020c81          ADD      r12,r2,r1,LSL #2
00483a  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
00483e  4594              CMP      r12,r2
004840  d00b              BEQ      |L1.18522|
004842  f06f0513          MVN      r5,#0x13
004846  eb050581          ADD      r5,r5,r1,LSL #2
00484a  4295              CMP      r5,r2
00484c  d005              BEQ      |L1.18522|
00484e  f06f0512          MVN      r5,#0x12
004852  eb050181          ADD      r1,r5,r1,LSL #2
004856  4291              CMP      r1,r2
004858  d101              BNE      |L1.18526|
                  |L1.18522|
00485a  f4404680          ORR      r6,r0,#0x4000
                  |L1.18526|
;;;6644   
;;;6645   
;;;6646   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00485e  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
004860  f88d0010          STRB     r0,[sp,#0x10]
;;;6647   		modbus_buff[1] = 6;
004864  f04f0006          MOV      r0,#6
004868  f88d0011          STRB     r0,[sp,#0x11]
;;;6648   		modbus_buff[2] = 0;
00486c  f88d4012          STRB     r4,[sp,#0x12]
;;;6649   		modbus_buff[3] = 100;
004870  f04f0064          MOV      r0,#0x64
004874  f88d0013          STRB     r0,[sp,#0x13]
;;;6650   		modbus_buff[4] = (char)(tempSSSS/256);	
004878  ea4f70e6          ASR      r0,r6,#31
00487c  eb066010          ADD      r0,r6,r0,LSR #24
004880  ea4f2120          ASR      r1,r0,#8
004884  f88d1014          STRB     r1,[sp,#0x14]
;;;6651   		modbus_buff[5] = (char)(tempSSSS%256);
004888  4630              MOV      r0,r6
00488a  f88d0015          STRB     r0,[sp,#0x15]
;;;6652   	
;;;6653   		crc_temp= CRC16_2(modbus_buff,6);
00488e  f04f0106          MOV      r1,#6
004892  a804              ADD      r0,sp,#0x10
004894  f7fffffe          BL       CRC16_2
;;;6654   	
;;;6655   		modbus_buff[6]= (char)crc_temp;
004898  f88d0016          STRB     r0,[sp,#0x16]
;;;6656   		modbus_buff[7]= (char)(crc_temp>>8);
00489c  ea4f2020          ASR      r0,r0,#8
0048a0  f88d0017          STRB     r0,[sp,#0x17]
;;;6657   	
;;;6658   		crc_temp= CRC16_2(modbus_buff,6);
0048a4  f04f0106          MOV      r1,#6
0048a8  a804              ADD      r0,sp,#0x10
0048aa  f7fffffe          BL       CRC16_2
;;;6659   	
;;;6660   		plazma_ica1=tempSSSS;
0048ae  48ce              LDR      r0,|L1.19432|
0048b0  8046              STRH     r6,[r0,#2]
;;;6661   		if(ICA_CH==0)
0048b2  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
0048b6  b3f0              CBZ      r0,|L1.18742|
;;;6662   			{
;;;6663   			for (i=0;i<8;i++)
;;;6664   				{
;;;6665   				putchar_sc16is700(modbus_buff[i]);
;;;6666   				}
;;;6667   			}
;;;6668   		else if(ICA_CH==2)
0048b8  2802              CMP      r0,#2
0048ba  d10c              BNE      |L1.18646|
;;;6669   			{
;;;6670   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
0048bc  f89d0015          LDRB     r0,[sp,#0x15]
0048c0  f89d1014          LDRB     r1,[sp,#0x14]
0048c4  e9cd0401          STRD     r0,r4,[sp,#4]
0048c8  9100              STR      r1,[sp,#0]
0048ca  2364              MOVS     r3,#0x64
0048cc  2200              MOVS     r2,#0
0048ce  2106              MOVS     r1,#6
0048d0  2005              MOVS     r0,#5
0048d2  f7fffffe          BL       uart_out1
                  |L1.18646|
;;;6671   			}
;;;6672   		}
;;;6673   	}
;;;6674   }
0048d6  b009              ADD      sp,sp,#0x24
0048d8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18652|
0048dc  8818              LDRH     r0,[r3,#0]            ;6613  ; ICA_MODBUS_ADDRESS
0048de  f88d0010          STRB     r0,[sp,#0x10]         ;6613
0048e2  f04f0004          MOV      r0,#4                 ;6614
0048e6  f88d0011          STRB     r0,[sp,#0x11]         ;6614
0048ea  f88d4012          STRB     r4,[sp,#0x12]         ;6615
0048ee  f04f0002          MOV      r0,#2                 ;6616
0048f2  f88d0013          STRB     r0,[sp,#0x13]         ;6616
0048f6  f88d4014          STRB     r4,[sp,#0x14]         ;6617
0048fa  f04f0501          MOV      r5,#1                 ;6618
0048fe  f88d5015          STRB     r5,[sp,#0x15]         ;6618
004902  f04f0106          MOV      r1,#6                 ;6620
004906  a804              ADD      r0,sp,#0x10           ;6620
004908  f7fffffe          BL       CRC16_2
00490c  f88d0016          STRB     r0,[sp,#0x16]         ;6622
004910  ea4f2020          ASR      r0,r0,#8              ;6623
004914  f88d0017          STRB     r0,[sp,#0x17]         ;6623
004918  f9b70000          LDRSH    r0,[r7,#0]            ;6625  ; ICA_CH
00491c  b160              CBZ      r0,|L1.18744|
00491e  2802              CMP      r0,#2                 ;6632
004920  d1d9              BNE      |L1.18646|
004922  e9cd4500          STRD     r4,r5,[sp,#0]         ;6634
004926  2302              MOVS     r3,#2                 ;6634
004928  2200              MOVS     r2,#0                 ;6634
00492a  2104              MOVS     r1,#4                 ;6634
00492c  2005              MOVS     r0,#5                 ;6634
00492e  9402              STR      r4,[sp,#8]            ;6634
004930  f7fffffe          BL       uart_out1
004934  e7cf              B        |L1.18646|
                  |L1.18742|
004936  e00b              B        |L1.18768|
                  |L1.18744|
004938  f04f0400          MOV      r4,#0                 ;6627
00493c  ad04              ADD      r5,sp,#0x10           ;6610
                  |L1.18750|
00493e  5d28              LDRB     r0,[r5,r4]            ;6629
004940  f7fffffe          BL       putchar_sc16is700
004944  f1040401          ADD      r4,r4,#1              ;6627
004948  b2e4              UXTB     r4,r4                 ;6627
00494a  2c08              CMP      r4,#8                 ;6627
00494c  d3f7              BCC      |L1.18750|
00494e  e7c2              B        |L1.18646|
                  |L1.18768|
004950  f04f0400          MOV      r4,#0                 ;6663
004954  ad04              ADD      r5,sp,#0x10           ;6639
                  |L1.18774|
004956  5d28              LDRB     r0,[r5,r4]            ;6665
004958  f7fffffe          BL       putchar_sc16is700
00495c  f1040401          ADD      r4,r4,#1              ;6663
004960  b2e4              UXTB     r4,r4                 ;6663
004962  2c08              CMP      r4,#8                 ;6663
004964  d3f7              BCC      |L1.18774|
004966  e7b6              B        |L1.18646|
;;;6675   
                          ENDP

                  ipsBlckHndl PROC
;;;6758   //-----------------------------------------------
;;;6759   void ipsBlckHndl(char in)
004968  b510              PUSH     {r4,lr}
;;;6760   {
;;;6761   
;;;6762   ipsBlckStat=0;
00496a  4ba0              LDR      r3,|L1.19436|
00496c  f04f0000          MOV      r0,#0
004970  8018              STRH     r0,[r3,#0]
;;;6763   if(ipsBlckSrc==1)
004972  489f              LDR      r0,|L1.19440|
004974  f04f0401          MOV      r4,#1
;;;6764   	{
;;;6765   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
004978  f44f62fa          MOV      r2,#0x7d0
00497c  f9b01000          LDRSH    r1,[r0,#0]            ;6763  ; ipsBlckSrc
004980  489c              LDR      r0,|L1.19444|
004982  2901              CMP      r1,#1                 ;6763
004984  f9b00000          LDRSH    r0,[r0,#0]
004988  d006              BEQ      |L1.18840|
;;;6766   	}
;;;6767   else if(ipsBlckSrc==2)
00498a  2902              CMP      r1,#2
00498c  d10f              BNE      |L1.18862|
00498e  499a              LDR      r1,|L1.19448|
;;;6768   	{
;;;6769   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
004990  f9b1101a          LDRSH    r1,[r1,#0x1a]
004994  b160              CBZ      r0,|L1.18864|
004996  e00d              B        |L1.18868|
                  |L1.18840|
004998  4997              LDR      r1,|L1.19448|
00499a  f9b11016          LDRSH    r1,[r1,#0x16]         ;6765
00499e  b908              CBNZ     r0,|L1.18852|
0049a0  4291              CMP      r1,r2                 ;6765
0049a2  dc03              BGT      |L1.18860|
                  |L1.18852|
0049a4  2801              CMP      r0,#1                 ;6765
0049a6  d102              BNE      |L1.18862|
0049a8  4291              CMP      r1,r2                 ;6765
0049aa  da00              BGE      |L1.18862|
                  |L1.18860|
0049ac  801c              STRH     r4,[r3,#0]            ;6765
                  |L1.18862|
;;;6770   	}
;;;6771   }
0049ae  bd10              POP      {r4,pc}
                  |L1.18864|
0049b0  4291              CMP      r1,r2                 ;6769
0049b2  dc03              BGT      |L1.18876|
                  |L1.18868|
0049b4  2801              CMP      r0,#1                 ;6769
0049b6  d1fa              BNE      |L1.18862|
0049b8  4291              CMP      r1,r2                 ;6769
0049ba  daf8              BGE      |L1.18862|
                  |L1.18876|
0049bc  801c              STRH     r4,[r3,#0]            ;6769
0049be  bd10              POP      {r4,pc}
;;;6772   
                          ENDP

                  bps_drv PROC
;;;6773   //-----------------------------------------------
;;;6774   void bps_drv(char in)
0049c0  e92d41f0          PUSH     {r4-r8,lr}
;;;6775   {
0049c4  4606              MOV      r6,r0
;;;6776   char temp;
;;;6777   
;;;6778   if (bps[in]._device!=dSRC) return;
0049c6  eb0600c6          ADD      r0,r6,r6,LSL #3
0049ca  498c              LDR      r1,|L1.19452|
0049cc  eb001006          ADD      r0,r0,r6,LSL #4
0049d0  f8112020          LDRB     r2,[r1,r0,LSL #2]
0049d4  2a03              CMP      r2,#3
0049d6  d17d              BNE      |L1.19156|
;;;6779   temp=bps[in]._flags_tm;
0049d8  eb010480          ADD      r4,r1,r0,LSL #2
0049dc  f8945042          LDRB     r5,[r4,#0x42]
;;;6780   if(temp&(1<<AV_T))
0049e0  07a8              LSLS     r0,r5,#30
0049e2  d517              BPL      |L1.18964|
;;;6781   	{
;;;6782   	if(bps[in]._temp_av_cnt<1200) 
0049e4  f9b41046          LDRSH    r1,[r4,#0x46]
0049e8  f44f6296          MOV      r2,#0x4b0
0049ec  4291              CMP      r1,r2
0049ee  da22              BGE      |L1.18998|
;;;6783   		{
;;;6784   		bps[in]._temp_av_cnt++;
0049f0  f1010101          ADD      r1,r1,#1
0049f4  b208              SXTH     r0,r1
0049f6  f8a40046          STRH     r0,[r4,#0x46]
;;;6785   		if(bps[in]._temp_av_cnt>=1200)
0049fa  4290              CMP      r0,r2
0049fc  db1b              BLT      |L1.18998|
;;;6786   			{
;;;6787   			bps[in]._temp_av_cnt=1200;
0049fe  f8a42046          STRH     r2,[r4,#0x46]
;;;6788   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
004a02  7860              LDRB     r0,[r4,#1]
004a04  07c0              LSLS     r0,r0,#31
004a06  d116              BNE      |L1.18998|
004a08  2201              MOVS     r2,#1
004a0a  2100              MOVS     r1,#0
004a0c  4630              MOV      r0,r6
004a0e  f7fffffe          BL       avar_bps_hndl
004a12  e010              B        |L1.18998|
                  |L1.18964|
;;;6789   			}
;;;6790   		}
;;;6791   	}
;;;6792   
;;;6793   else if(!(temp&(1<<AV_T)))
;;;6794   	{
;;;6795   	if(bps[in]._temp_av_cnt) 
004a14  f9b40046          LDRSH    r0,[r4,#0x46]
004a18  b168              CBZ      r0,|L1.18998|
;;;6796   		{
;;;6797   		bps[in]._temp_av_cnt--;
004a1a  f1a00001          SUB      r0,r0,#1
004a1e  b200              SXTH     r0,r0
004a20  f8a40046          STRH     r0,[r4,#0x46]
;;;6798   		if(!bps[in]._temp_av_cnt)
004a24  b938              CBNZ     r0,|L1.18998|
;;;6799   			{
;;;6800   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004a26  7860              LDRB     r0,[r4,#1]
004a28  07c0              LSLS     r0,r0,#31
004a2a  d004              BEQ      |L1.18998|
004a2c  2200              MOVS     r2,#0
004a2e  4611              MOV      r1,r2
004a30  4630              MOV      r0,r6
004a32  f7fffffe          BL       avar_bps_hndl
                  |L1.18998|
;;;6801   			}
;;;6802   		} 	
;;;6803   
;;;6804   	}
;;;6805   
;;;6806   if((temp&(1<<AVUMAX)))
004a36  0728              LSLS     r0,r5,#28
;;;6807   	{
;;;6808   	if(bps[in]._umax_av_cnt<10) 
;;;6809   		{
;;;6810   		bps[in]._umax_av_cnt++;
;;;6811   		if(bps[in]._umax_av_cnt>=10)
;;;6812   			{ 
;;;6813   			bps[in]._umax_av_cnt=10;
004a38  f04f080a          MOV      r8,#0xa
004a3c  f04f0700          MOV      r7,#0                 ;6788
004a40  d518              BPL      |L1.19060|
004a42  f9b41048          LDRSH    r1,[r4,#0x48]         ;6808
004a46  290a              CMP      r1,#0xa               ;6808
004a48  da29              BGE      |L1.19102|
004a4a  f1010101          ADD      r1,r1,#1              ;6810
004a4e  b208              SXTH     r0,r1                 ;6810
004a50  f8a40048          STRH     r0,[r4,#0x48]         ;6810
004a54  280a              CMP      r0,#0xa               ;6811
004a56  db22              BLT      |L1.19102|
004a58  f8a48048          STRH     r8,[r4,#0x48]
;;;6814   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004a5c  7860              LDRB     r0,[r4,#1]
004a5e  0780              LSLS     r0,r0,#30
004a60  d404              BMI      |L1.19052|
004a62  2201              MOVS     r2,#1
004a64  4611              MOV      r1,r2
004a66  4630              MOV      r0,r6
004a68  f7fffffe          BL       avar_bps_hndl
                  |L1.19052|
;;;6815   			apv_start(in);
004a6c  4630              MOV      r0,r6
004a6e  f7fffffe          BL       apv_start
004a72  e014              B        |L1.19102|
                  |L1.19060|
;;;6816   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6817   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6818   				{
;;;6819   				apv_cnt[in,0]=APV_INIT;
;;;6820   				apv_cnt[in,1]=APV_INIT;
;;;6821   				apv_cnt[in,2]=APV_INIT;
;;;6822   				apv_flags[in]=afOFF;
;;;6823   				}				*/
;;;6824   						
;;;6825   			}
;;;6826   		} 
;;;6827   	}		
;;;6828   else if(!(temp&(1<<AVUMAX)))
;;;6829   	{
;;;6830   	if(bps[in]._umax_av_cnt>0) 
004a74  f9b41048          LDRSH    r1,[r4,#0x48]
004a78  2900              CMP      r1,#0
004a7a  dd0d              BLE      |L1.19096|
;;;6831   		{
;;;6832   		bps[in]._umax_av_cnt--;
004a7c  f1a10101          SUB      r1,r1,#1
004a80  b208              SXTH     r0,r1
004a82  f8a40048          STRH     r0,[r4,#0x48]
;;;6833   		if(bps[in]._umax_av_cnt==0)
004a86  b950              CBNZ     r0,|L1.19102|
;;;6834   			{
;;;6835   			bps[in]._umax_av_cnt=0;
;;;6836   			avar_bps_hndl(in,1,0);
004a88  f04f0200          MOV      r2,#0
004a8c  f04f0101          MOV      r1,#1
004a90  4630              MOV      r0,r6
004a92  f7fffffe          BL       avar_bps_hndl
004a96  e002              B        |L1.19102|
                  |L1.19096|
;;;6837   			//apv_stop(in);
;;;6838   	 //		apv_cnt[in,0]=0;
;;;6839   	//		apv_cnt[in,1]=0;
;;;6840   	 //		apv_cnt[in,2]=0;			
;;;6841   			}
;;;6842   		}
;;;6843   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004a98  da01              BGE      |L1.19102|
004a9a  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.19102|
;;;6844   	}
;;;6845   
;;;6846   if(temp&(1<<AVUMIN))
004a9e  06e8              LSLS     r0,r5,#27
004aa0  d519              BPL      |L1.19158|
;;;6847   	{
;;;6848   	if(bps[in]._umin_av_cnt<10) 
004aa2  f9b4004a          LDRSH    r0,[r4,#0x4a]
004aa6  280a              CMP      r0,#0xa
004aa8  da23              BGE      |L1.19186|
;;;6849   		{
;;;6850   		bps[in]._umin_av_cnt++;
004aaa  f1000001          ADD      r0,r0,#1
004aae  b200              SXTH     r0,r0
004ab0  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6851   		if(bps[in]._umin_av_cnt>=10)
004ab4  280a              CMP      r0,#0xa
004ab6  db1c              BLT      |L1.19186|
;;;6852   			{ 
;;;6853   			bps[in]._umin_av_cnt=10;
004ab8  f8a4804a          STRH     r8,[r4,#0x4a]
;;;6854   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004abc  7860              LDRB     r0,[r4,#1]
004abe  0740              LSLS     r0,r0,#29
004ac0  d404              BMI      |L1.19148|
004ac2  2201              MOVS     r2,#1
004ac4  2102              MOVS     r1,#2
004ac6  4630              MOV      r0,r6
004ac8  f7fffffe          BL       avar_bps_hndl
                  |L1.19148|
;;;6855   			apv_start(in);
004acc  4630              MOV      r0,r6
004ace  f7fffffe          BL       apv_start
004ad2  e00e              B        |L1.19186|
                  |L1.19156|
004ad4  e0b3              B        |L1.19518|
                  |L1.19158|
;;;6856   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6857   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6858   				{
;;;6859   				apv_cnt[in,0]=APV_INIT;
;;;6860   				apv_cnt[in,1]=APV_INIT;
;;;6861   				apv_cnt[in,2]=APV_INIT;
;;;6862   				apv_flags[in]=afOFF;
;;;6863   				}*/				
;;;6864   			}
;;;6865   		} 
;;;6866   	}	
;;;6867   	
;;;6868   else if(!(temp&(1<<AVUMIN)))
;;;6869   	{
;;;6870   	if(bps[in]._umin_av_cnt) 
004ad6  f9b4004a          LDRSH    r0,[r4,#0x4a]
004ada  b150              CBZ      r0,|L1.19186|
;;;6871   		{
;;;6872   		bps[in]._umin_av_cnt--;
004adc  f1a00001          SUB      r0,r0,#1
004ae0  b200              SXTH     r0,r0
004ae2  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6873   		if(bps[in]._umin_av_cnt==0)
004ae6  b920              CBNZ     r0,|L1.19186|
;;;6874   			{
;;;6875   			bps[in]._umin_av_cnt=0;
;;;6876   			avar_bps_hndl(in,2,0);
004ae8  2200              MOVS     r2,#0
004aea  2102              MOVS     r1,#2
004aec  4630              MOV      r0,r6
004aee  f7fffffe          BL       avar_bps_hndl
                  |L1.19186|
;;;6877   			//apv_stop(in);
;;;6878   		//	apv_cnt[in,0]=0;
;;;6879   		//	apv_cnt[in,1]=0;
;;;6880   		//	apv_cnt[in,2]=0;
;;;6881   			}
;;;6882   		}
;;;6883   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6884   	}
;;;6885   
;;;6886   if((bps[in]._Uii<(UB20-DU))&&(bps[in]._state==bsWRK))
004af2  4943              LDR      r1,|L1.19456|
004af4  69e0              LDR      r0,[r4,#0x1c]
004af6  f9b12000          LDRSH    r2,[r1,#0]  ; UB20
004afa  4942              LDR      r1,|L1.19460|
004afc  f9b11000          LDRSH    r1,[r1,#0]  ; DU
004b00  1a51              SUBS     r1,r2,r1
004b02  4288              CMP      r0,r1
004b04  da02              BGE      |L1.19212|
004b06  78a2              LDRB     r2,[r4,#2]
004b08  2a01              CMP      r2,#1
004b0a  d00b              BEQ      |L1.19236|
                  |L1.19212|
;;;6887   	{
;;;6888   	if(bps[in]._umin_av_cnt_uku<300) 
;;;6889   		{
;;;6890   		bps[in]._umin_av_cnt_uku++;
;;;6891   		if(bps[in]._umin_av_cnt_uku>=300)
;;;6892   			{ 
;;;6893   			bps[in]._umin_av_cnt_uku=300;
;;;6894   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
;;;6895   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6896   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6897   				{
;;;6898   				apv_cnt[in,0]=APV_INIT;
;;;6899   				apv_cnt[in,1]=APV_INIT;
;;;6900   				apv_cnt[in,2]=APV_INIT;
;;;6901   				apv_flags[in]=afOFF;
;;;6902   				}*/				
;;;6903   			}
;;;6904   		} 
;;;6905   	}	
;;;6906   	
;;;6907   else if(bps[in]._Uii>=(UB20-DU))
004b0c  4288              CMP      r0,r1
004b0e  db26              BLT      |L1.19294|
;;;6908   	{
;;;6909   	if(bps[in]._umin_av_cnt_uku) 
004b10  f9b4104c          LDRSH    r1,[r4,#0x4c]
004b14  b319              CBZ      r1,|L1.19294|
;;;6910   		{
;;;6911   		bps[in]._umin_av_cnt_uku--;
004b16  f1a10101          SUB      r1,r1,#1
004b1a  b208              SXTH     r0,r1
004b1c  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6912   		if(bps[in]._umin_av_cnt_uku==0)
004b20  b1c0              CBZ      r0,|L1.19284|
004b22  e01c              B        |L1.19294|
                  |L1.19236|
004b24  f9b4104c          LDRSH    r1,[r4,#0x4c]         ;6888
004b28  f44f7296          MOV      r2,#0x12c             ;6888
004b2c  4291              CMP      r1,r2                 ;6888
004b2e  da16              BGE      |L1.19294|
004b30  f1010101          ADD      r1,r1,#1              ;6890
004b34  b208              SXTH     r0,r1                 ;6890
004b36  f8a4004c          STRH     r0,[r4,#0x4c]         ;6890
004b3a  4290              CMP      r0,r2                 ;6891
004b3c  db0f              BLT      |L1.19294|
004b3e  f8a4204c          STRH     r2,[r4,#0x4c]         ;6893
004b42  7860              LDRB     r0,[r4,#1]            ;6894
004b44  0740              LSLS     r0,r0,#29             ;6894
004b46  d40a              BMI      |L1.19294|
004b48  2201              MOVS     r2,#1                 ;6894
004b4a  2102              MOVS     r1,#2                 ;6894
004b4c  4630              MOV      r0,r6                 ;6894
004b4e  f7fffffe          BL       avar_bps_hndl
004b52  e004              B        |L1.19294|
                  |L1.19284|
;;;6913   			{
;;;6914   			bps[in]._umin_av_cnt_uku=0;
;;;6915   			avar_bps_hndl(in,2,0);
004b54  2200              MOVS     r2,#0
004b56  2102              MOVS     r1,#2
004b58  4630              MOV      r0,r6
004b5a  f7fffffe          BL       avar_bps_hndl
                  |L1.19294|
;;;6916   		//	apv_cnt[in,0]=0;
;;;6917   		//	apv_cnt[in,1]=0;
;;;6918   		//	apv_cnt[in,2]=0;
;;;6919   			}
;;;6920   		}
;;;6921   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;6922   	}
;;;6923   
;;;6924   //bps[in]._state=bsOFF;
;;;6925   
;;;6926   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004b5e  7860              LDRB     r0,[r4,#1]
004b60  0700              LSLS     r0,r0,#28
004b62  d003              BEQ      |L1.19308|
004b64  f04f0004          MOV      r0,#4
004b68  70a0              STRB     r0,[r4,#2]
004b6a  e017              B        |L1.19356|
                  |L1.19308|
;;;6927   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004b6c  4826              LDR      r0,|L1.19464|
004b6e  7800              LDRB     r0,[r0,#0]  ; net_av
004b70  b130              CBZ      r0,|L1.19328|
004b72  78e0              LDRB     r0,[r4,#3]
004b74  2814              CMP      r0,#0x14
004b76  d903              BLS      |L1.19328|
;;;6928   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004b78  f04f0005          MOV      r0,#5
004b7c  70a0              STRB     r0,[r4,#2]
004b7e  e00d              B        |L1.19356|
                  |L1.19328|
;;;6929   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004b80  f8940042          LDRB     r0,[r4,#0x42]
004b84  0680              LSLS     r0,r0,#26
004b86  d503              BPL      |L1.19344|
004b88  f04f0002          MOV      r0,#2
004b8c  70a0              STRB     r0,[r4,#2]
004b8e  e005              B        |L1.19356|
                  |L1.19344|
;;;6930   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004b90  78e0              LDRB     r0,[r4,#3]
004b92  2814              CMP      r0,#0x14
004b94  d202              BCS      |L1.19356|
004b96  f04f0001          MOV      r0,#1
004b9a  70a0              STRB     r0,[r4,#2]
                  |L1.19356|
;;;6931   
;;;6932   
;;;6933   
;;;6934   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6935   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6936   //else bps[0]._state=ssNOT;
;;;6937   
;;;6938   //bps[in]._is_ready=0;
;;;6939   //bps[in]._is_wrk=0;
;;;6940   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6941   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6942   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6943   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6944   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6945   //	{
;;;6946   //	bps[in]._flags_bp='B';// заблокирован
;;;6947   //	bps[in]._is_ready=1;
;;;6948   //	}
;;;6949   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6950   //     {
;;;6951   //     bps[in]._flags_bp='W';// работает
;;;6952   //     bps[in]._is_ready=1;
;;;6953   //     bps[in]._is_wrk=1;
;;;6954        
;;;6955   //     }
;;;6956   //else bps[in]._is_ready=1;     
;;;6957   
;;;6958   
;;;6959   
;;;6960   
;;;6961   
;;;6962   /*
;;;6963   bps[in]._flags_tu&=BIN8(11111110);
;;;6964   if(bps[in]._ist_blok_cnt)
;;;6965   	{
;;;6966   	bps[in]._ist_blok_cnt--;
;;;6967   	bps[in]._flags_tu|=BIN8(1);
;;;6968   	}
;;;6969   
;;;6970   	   */ 
;;;6971   
;;;6972   //Пересброс БПСа при потере связи
;;;6973   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004b9c  78e0              LDRB     r0,[r4,#3]
004b9e  280a              CMP      r0,#0xa
004ba0  d306              BCC      |L1.19376|
004ba2  f894002c          LDRB     r0,[r4,#0x2c]
004ba6  f0400080          ORR      r0,r0,#0x80
004baa  f884002c          STRB     r0,[r4,#0x2c]
004bae  e005              B        |L1.19388|
                  |L1.19376|
;;;6974   else bps[in]._flags_tu&=BIN8(1111111);
004bb0  f894002c          LDRB     r0,[r4,#0x2c]
004bb4  f000007f          AND      r0,r0,#0x7f
004bb8  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19388|
;;;6975   
;;;6976   if(avar_bps_reset_cnt) 
004bbc  480a              LDR      r0,|L1.19432|
004bbe  3880              SUBS     r0,r0,#0x80
004bc0  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004bc4  b139              CBZ      r1,|L1.19414|
;;;6977   	{
;;;6978   	bps[in]._flags_tu|=BIN8(10);
004bc6  f894102c          LDRB     r1,[r4,#0x2c]
004bca  f0410102          ORR      r1,r1,#2
004bce  f884102c          STRB     r1,[r4,#0x2c]
;;;6979   	bps[in]._av=0;
004bd2  7067              STRB     r7,[r4,#1]
004bd4  e02a              B        |L1.19500|
                  |L1.19414|
004bd6  e019              B        |L1.19468|
                  |L1.19416|
                          DCD      ica_u_necc
                  |L1.19420|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19424|
                          DCD      ICA_CH
                  |L1.19428|
                          DCD      TBAT
                  |L1.19432|
                          DCD      ||area_number.25||+0x80
                  |L1.19436|
                          DCD      ipsBlckStat
                  |L1.19440|
                          DCD      ipsBlckSrc
                  |L1.19444|
                          DCD      ipsBlckLog
                  |L1.19448|
                          DCD      ||.bss||+0x40c
                  |L1.19452|
                          DCD      bps
                  |L1.19456|
                          DCD      UB20
                  |L1.19460|
                          DCD      ||DU||
                  |L1.19464|
                          DCD      net_av
                  |L1.19468|
;;;6980   	}
;;;6981   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004c0c  f8941062          LDRB     r1,[r4,#0x62]
004c10  b131              CBZ      r1,|L1.19488|
004c12  f894102c          LDRB     r1,[r4,#0x2c]
004c16  f0410102          ORR      r1,r1,#2
004c1a  f884102c          STRB     r1,[r4,#0x2c]
004c1e  e005              B        |L1.19500|
                  |L1.19488|
;;;6982   else bps[in]._flags_tu&=BIN8(11111101);
004c20  f894102c          LDRB     r1,[r4,#0x2c]
004c24  f00101fd          AND      r1,r1,#0xfd
004c28  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19500|
;;;6983   	
;;;6984   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004c2c  f9b41054          LDRSH    r1,[r4,#0x54]
004c30  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004c34  4408              ADD      r0,r0,r1
004c36  6320              STR      r0,[r4,#0x30]
;;;6985   bps[in]._vol_i=1000;
004c38  f44f707a          MOV      r0,#0x3e8
004c3c  6360              STR      r0,[r4,#0x34]
                  |L1.19518|
;;;6986   //bps[0]._vol_u=500;
;;;6987   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;6988   }
004c3e  e8bd81f0          POP      {r4-r8,pc}
;;;6989   
                          ENDP

                  avt_hndl PROC
;;;6990   //-----------------------------------------------
;;;6991   void avt_hndl(void)
004c42  b570              PUSH     {r4-r6,lr}
;;;6992   {
;;;6993   char i;
;;;6994   for(i=0;i<12;i++)
004c44  f04f0000          MOV      r0,#0
;;;6995   	{
;;;6996   	if(eb2_data_short[6]&(1<<i))
004c48  49ff              LDR      r1,|L1.20552|
004c4a  f04f0401          MOV      r4,#1
004c4e  4603              MOV      r3,r0                 ;6994
004c50  f9b1200c          LDRSH    r2,[r1,#0xc]
;;;6997   		{
;;;6998   		avt_stat[i]=avtON;
004c54  4dfd              LDR      r5,|L1.20556|
                  |L1.19542|
004c56  fa04f100          LSL      r1,r4,r0              ;6996
004c5a  420a              TST      r2,r1                 ;6996
004c5c  d001              BEQ      |L1.19554|
004c5e  542c              STRB     r4,[r5,r0]
004c60  e000              B        |L1.19556|
                  |L1.19554|
;;;6999   		}
;;;7000   	else avt_stat[i]=avtOFF;
004c62  542b              STRB     r3,[r5,r0]
                  |L1.19556|
004c64  f1000001          ADD      r0,r0,#1              ;6994
004c68  b2c0              UXTB     r0,r0                 ;6994
004c6a  280c              CMP      r0,#0xc               ;6994
004c6c  d3f3              BCC      |L1.19542|
;;;7001   	}
;;;7002   
;;;7003   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004c6e  4ef8              LDR      r6,|L1.20560|
004c70  7828              LDRB     r0,[r5,#0]  ; avt_stat
004c72  4cf8              LDR      r4,|L1.20564|
004c74  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004c76  4281              CMP      r1,r0
004c78  d00b              BEQ      |L1.19602|
004c7a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004c7e  2901              CMP      r1,#1
004c80  db07              BLT      |L1.19602|
;;;7004   	{
;;;7005   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004c82  2801              CMP      r0,#1
004c84  d07e              BEQ      |L1.19844|
;;;7006   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004c86  2300              MOVS     r3,#0
004c88  2201              MOVS     r2,#1
004c8a  210b              MOVS     r1,#0xb
004c8c  a0f2              ADR      r0,|L1.20568|
004c8e  f7fffffe          BL       snmp_trap_send
                  |L1.19602|
;;;7007   	}
;;;7008   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004c92  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004c94  7868              LDRB     r0,[r5,#1]  ; avt_stat
004c96  4281              CMP      r1,r0
004c98  d00b              BEQ      |L1.19634|
004c9a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004c9e  2902              CMP      r1,#2
004ca0  db07              BLT      |L1.19634|
;;;7009   	{
;;;7010   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004ca2  2801              CMP      r0,#1
004ca4  d06f              BEQ      |L1.19846|
;;;7011   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004ca6  2300              MOVS     r3,#0
004ca8  2202              MOVS     r2,#2
004caa  210b              MOVS     r1,#0xb
004cac  a0ef              ADR      r0,|L1.20588|
004cae  f7fffffe          BL       snmp_trap_send
                  |L1.19634|
;;;7012   	}
;;;7013   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004cb2  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004cb4  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004cb6  4281              CMP      r1,r0
004cb8  d00b              BEQ      |L1.19666|
004cba  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004cbe  2903              CMP      r1,#3
004cc0  db07              BLT      |L1.19666|
;;;7014   	{
;;;7015   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004cc2  2801              CMP      r0,#1
004cc4  d072              BEQ      |L1.19884|
;;;7016   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004cc6  2300              MOVS     r3,#0
004cc8  2203              MOVS     r2,#3
004cca  210b              MOVS     r1,#0xb
004ccc  a0ec              ADR      r0,|L1.20608|
004cce  f7fffffe          BL       snmp_trap_send
                  |L1.19666|
;;;7017   	}
;;;7018   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004cd2  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004cd4  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004cd6  4281              CMP      r1,r0
004cd8  d00b              BEQ      |L1.19698|
004cda  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004cde  2904              CMP      r1,#4
004ce0  db07              BLT      |L1.19698|
;;;7019   	{
;;;7020   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004ce2  2801              CMP      r0,#1
004ce4  d079              BEQ      |L1.19930|
;;;7021   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004ce6  2300              MOVS     r3,#0
004ce8  2204              MOVS     r2,#4
004cea  210b              MOVS     r1,#0xb
004cec  a0e9              ADR      r0,|L1.20628|
004cee  f7fffffe          BL       snmp_trap_send
                  |L1.19698|
;;;7022   	}
;;;7023   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004cf2  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004cf4  7928              LDRB     r0,[r5,#4]  ; avt_stat
004cf6  4281              CMP      r1,r0
004cf8  d00b              BEQ      |L1.19730|
004cfa  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004cfe  2905              CMP      r1,#5
004d00  db07              BLT      |L1.19730|
;;;7024   	{
;;;7025   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004d02  2801              CMP      r0,#1
004d04  d071              BEQ      |L1.19946|
;;;7026   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004d06  2300              MOVS     r3,#0
004d08  2205              MOVS     r2,#5
004d0a  210b              MOVS     r1,#0xb
004d0c  a0e6              ADR      r0,|L1.20648|
004d0e  f7fffffe          BL       snmp_trap_send
                  |L1.19730|
;;;7027   	}
;;;7028   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004d12  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004d14  7968              LDRB     r0,[r5,#5]  ; avt_stat
004d16  4281              CMP      r1,r0
004d18  d00b              BEQ      |L1.19762|
004d1a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d1e  2906              CMP      r1,#6
004d20  db07              BLT      |L1.19762|
;;;7029   	{
;;;7030   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004d22  2801              CMP      r0,#1
004d24  d068              BEQ      |L1.19960|
;;;7031   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004d26  2300              MOVS     r3,#0
004d28  2206              MOVS     r2,#6
004d2a  210b              MOVS     r1,#0xb
004d2c  a0e3              ADR      r0,|L1.20668|
004d2e  f7fffffe          BL       snmp_trap_send
                  |L1.19762|
;;;7032   	}
;;;7033   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004d32  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004d34  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004d36  4281              CMP      r1,r0
004d38  d00b              BEQ      |L1.19794|
004d3a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d3e  2907              CMP      r1,#7
004d40  db07              BLT      |L1.19794|
;;;7034   	{
;;;7035   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004d42  2801              CMP      r0,#1
004d44  d05f              BEQ      |L1.19974|
;;;7036   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004d46  2300              MOVS     r3,#0
004d48  2207              MOVS     r2,#7
004d4a  210b              MOVS     r1,#0xb
004d4c  a0e0              ADR      r0,|L1.20688|
004d4e  f7fffffe          BL       snmp_trap_send
                  |L1.19794|
;;;7037   	}
;;;7038   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004d52  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004d54  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004d56  4281              CMP      r1,r0
004d58  d00b              BEQ      |L1.19826|
004d5a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d5e  2908              CMP      r1,#8
004d60  db07              BLT      |L1.19826|
;;;7039   	{
;;;7040   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004d62  2801              CMP      r0,#1
004d64  d056              BEQ      |L1.19988|
;;;7041   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004d66  2300              MOVS     r3,#0
004d68  2208              MOVS     r2,#8
004d6a  210b              MOVS     r1,#0xb
004d6c  a0dd              ADR      r0,|L1.20708|
004d6e  f7fffffe          BL       snmp_trap_send
                  |L1.19826|
;;;7042   	}
;;;7043   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004d72  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004d74  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004d76  4281              CMP      r1,r0
004d78  d00e              BEQ      |L1.19864|
004d7a  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d7e  2909              CMP      r1,#9
004d80  db0a              BLT      |L1.19864|
;;;7044   	{
;;;7045   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004d82  e001              B        |L1.19848|
                  |L1.19844|
004d84  e013              B        |L1.19886|
                  |L1.19846|
004d86  e019              B        |L1.19900|
                  |L1.19848|
004d88  2801              CMP      r0,#1
004d8a  d04a              BEQ      |L1.20002|
;;;7046   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004d8c  2300              MOVS     r3,#0
004d8e  2209              MOVS     r2,#9
004d90  210b              MOVS     r1,#0xb
004d92  a0d9              ADR      r0,|L1.20728|
004d94  f7fffffe          BL       snmp_trap_send
                  |L1.19864|
;;;7047   	}
;;;7048   
;;;7049   for(i=0;i<12;i++)
004d98  f04f0000          MOV      r0,#0
                  |L1.19868|
;;;7050   	{
;;;7051   	avt_stat_old[i]=avt_stat[i];
004d9c  5c29              LDRB     r1,[r5,r0]
004d9e  5431              STRB     r1,[r6,r0]
004da0  f1000001          ADD      r0,r0,#1              ;7049
004da4  b2c0              UXTB     r0,r0                 ;7049
004da6  280c              CMP      r0,#0xc               ;7049
004da8  d3f8              BCC      |L1.19868|
                  |L1.19882|
;;;7052   	}
;;;7053   }
004daa  bd70              POP      {r4-r6,pc}
                  |L1.19884|
004dac  e00e              B        |L1.19916|
                  |L1.19886|
004dae  2301              MOVS     r3,#1                 ;7005
004db0  461a              MOV      r2,r3                 ;7005
004db2  210b              MOVS     r1,#0xb               ;7005
004db4  a0d5              ADR      r0,|L1.20748|
004db6  f7fffffe          BL       snmp_trap_send
004dba  e76a              B        |L1.19602|
                  |L1.19900|
004dbc  2301              MOVS     r3,#1                 ;7010
004dbe  2202              MOVS     r2,#2                 ;7010
004dc0  210b              MOVS     r1,#0xb               ;7010
004dc2  a0d7              ADR      r0,|L1.20768|
004dc4  f7fffffe          BL       snmp_trap_send
004dc8  e773              B        |L1.19634|
004dca  e006              B        |L1.19930|
                  |L1.19916|
004dcc  2301              MOVS     r3,#1                 ;7015
004dce  2203              MOVS     r2,#3                 ;7015
004dd0  210b              MOVS     r1,#0xb               ;7015
004dd2  a0d8              ADR      r0,|L1.20788|
004dd4  f7fffffe          BL       snmp_trap_send
004dd8  e77b              B        |L1.19666|
                  |L1.19930|
004dda  2301              MOVS     r3,#1                 ;7020
004ddc  2204              MOVS     r2,#4                 ;7020
004dde  210b              MOVS     r1,#0xb               ;7020
004de0  a0d9              ADR      r0,|L1.20808|
004de2  f7fffffe          BL       snmp_trap_send
004de6  e784              B        |L1.19698|
004de8  e7ff              B        |L1.19946|
                  |L1.19946|
004dea  2301              MOVS     r3,#1                 ;7025
004dec  2205              MOVS     r2,#5                 ;7025
004dee  210b              MOVS     r1,#0xb               ;7025
004df0  a0da              ADR      r0,|L1.20828|
004df2  f7fffffe          BL       snmp_trap_send
004df6  e78c              B        |L1.19730|
                  |L1.19960|
004df8  2301              MOVS     r3,#1                 ;7030
004dfa  2206              MOVS     r2,#6                 ;7030
004dfc  210b              MOVS     r1,#0xb               ;7030
004dfe  a0dc              ADR      r0,|L1.20848|
004e00  f7fffffe          BL       snmp_trap_send
004e04  e795              B        |L1.19762|
                  |L1.19974|
004e06  2301              MOVS     r3,#1                 ;7035
004e08  2207              MOVS     r2,#7                 ;7035
004e0a  210b              MOVS     r1,#0xb               ;7035
004e0c  a0dd              ADR      r0,|L1.20868|
004e0e  f7fffffe          BL       snmp_trap_send
004e12  e79e              B        |L1.19794|
                  |L1.19988|
004e14  2301              MOVS     r3,#1                 ;7040
004e16  2208              MOVS     r2,#8                 ;7040
004e18  210b              MOVS     r1,#0xb               ;7040
004e1a  a0df              ADR      r0,|L1.20888|
004e1c  f7fffffe          BL       snmp_trap_send
004e20  e7a7              B        |L1.19826|
                  |L1.20002|
004e22  2301              MOVS     r3,#1                 ;7045
004e24  2209              MOVS     r2,#9                 ;7045
004e26  210b              MOVS     r1,#0xb               ;7045
004e28  a0e0              ADR      r0,|L1.20908|
004e2a  f7fffffe          BL       snmp_trap_send
004e2e  e7b3              B        |L1.19864|
;;;7054   
                          ENDP

                  bat_hndl PROC
;;;7055   //-----------------------------------------------
;;;7056   void bat_hndl(void)
004e30  b570              PUSH     {r4-r6,lr}
;;;7057   {
;;;7058   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7059   	{
;;;7060   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7061   		{
;;;7062   		char i;
;;;7063   		for(i=0;i<2;i++)
;;;7064   			{
;;;7065   			if(mess_data[1]&(1<<i))
;;;7066   				{
;;;7067   				bat[i]._cnt_to_block=0;
;;;7068        			bat[i]._rel_stat=0;
;;;7069        			}
;;;7070   			}
;;;7071   		}
;;;7072   	}
;;;7073   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7074   	{		
;;;7075   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7076   		{
;;;7077   		char i;
;;;7078   		for(i=0;i<2;i++)
;;;7079   			{
;;;7080   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7081   				{
;;;7082   				bat[i]._cnt_to_block=20;
;;;7083   				bat[i]._rel_stat=1;
;;;7084        			}
;;;7085   			}
;;;7086   		
;;;7087   		}		
;;;7088   	}*/
;;;7089   
;;;7090   if(mess_find_unvol(MESS2BAT_HNDL))
004e32  20c8              MOVS     r0,#0xc8
004e34  f7fffffe          BL       mess_find_unvol
;;;7091   	{ 
;;;7092   	char i;
;;;7093   	
;;;7094   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7095   		{
;;;7096   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7097   			{
;;;7098   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004e38  49e1              LDR      r1,|L1.20928|
004e3a  2200              MOVS     r2,#0                 ;7096
004e3c  b3a8              CBZ      r0,|L1.20138|
004e3e  4be1              LDR      r3,|L1.20932|
;;;7099   			}
;;;7100   		}
;;;7101   
;;;7102   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7103   		{
;;;7104   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7105   			{
;;;7106   			if(mess_data[1]&(1<<i))
004e40  2401              MOVS     r4,#1
004e42  6818              LDR      r0,[r3,#0]            ;7094  ; mess_data
004e44  28c9              CMP      r0,#0xc9              ;7094
004e46  d01c              BEQ      |L1.20098|
004e48  28ca              CMP      r0,#0xca              ;7102
004e4a  d02f              BEQ      |L1.20140|
;;;7107   				{
;;;7108   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7109   				}
;;;7110   			else bat[i]._cnt_to_block=0;
;;;7111   			}
;;;7112   		}
;;;7113   	else 
;;;7114   	 	{
;;;7115   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004e4c  4610              MOV      r0,r2
                  |L1.20046|
;;;7116   			{
;;;7117   			bat[i]._cnt_to_block=0;
004e4e  eb000340          ADD      r3,r0,r0,LSL #1
004e52  eb031300          ADD      r3,r3,r0,LSL #4
004e56  f8012023          STRB     r2,[r1,r3,LSL #2]
004e5a  f1000001          ADD      r0,r0,#1              ;7115
004e5e  b2c0              UXTB     r0,r0                 ;7115
004e60  2802              CMP      r0,#2                 ;7115
004e62  d3f4              BCC      |L1.20046|
                  |L1.20068|
;;;7118   			}
;;;7119   
;;;7120   		}
;;;7121   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004e64  f04f0000          MOV      r0,#0
                  |L1.20072|
;;;7122   		{
;;;7123   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004e68  eb000340          ADD      r3,r0,r0,LSL #1
004e6c  eb031300          ADD      r3,r3,r0,LSL #4
004e70  f8115023          LDRB     r5,[r1,r3,LSL #2]
004e74  2d14              CMP      r5,#0x14
004e76  d939              BLS      |L1.20204|
004e78  eb010383          ADD      r3,r1,r3,LSL #2
004e7c  f883403c          STRB     r4,[r3,#0x3c]
004e80  e038              B        |L1.20212|
                  |L1.20098|
004e82  f04f0000          MOV      r0,#0                 ;7096
                  |L1.20102|
004e86  eb000340          ADD      r3,r0,r0,LSL #1       ;7098
004e8a  eb031500          ADD      r5,r3,r0,LSL #4       ;7098
004e8e  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7098
004e92  2b32              CMP      r3,#0x32              ;7098
004e94  d203              BCS      |L1.20126|
004e96  f1030301          ADD      r3,r3,#1              ;7098
004e9a  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7098
                  |L1.20126|
004e9e  f1000001          ADD      r0,r0,#1              ;7096
004ea2  b2c0              UXTB     r0,r0                 ;7096
004ea4  2802              CMP      r0,#2                 ;7096
004ea6  d3ee              BCC      |L1.20102|
004ea8  e7dc              B        |L1.20068|
                  |L1.20138|
004eaa  e029              B        |L1.20224|
                  |L1.20140|
004eac  f04f0000          MOV      r0,#0                 ;7104
004eb0  685e              LDR      r6,[r3,#4]            ;7106
                  |L1.20146|
004eb2  fa04f300          LSL      r3,r4,r0              ;7106
004eb6  421e              TST      r6,r3                 ;7106
004eb8  d00c              BEQ      |L1.20180|
004eba  eb000340          ADD      r3,r0,r0,LSL #1       ;7108
004ebe  eb031500          ADD      r5,r3,r0,LSL #4       ;7108
004ec2  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7108
004ec6  2b32              CMP      r3,#0x32              ;7108
004ec8  d20a              BCS      |L1.20192|
004eca  f1030301          ADD      r3,r3,#1              ;7108
004ece  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7108
004ed2  e005              B        |L1.20192|
                  |L1.20180|
004ed4  eb000340          ADD      r3,r0,r0,LSL #1       ;7110
004ed8  eb031300          ADD      r3,r3,r0,LSL #4       ;7110
004edc  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7110
                  |L1.20192|
004ee0  f1000001          ADD      r0,r0,#1              ;7104
004ee4  b2c0              UXTB     r0,r0                 ;7104
004ee6  2802              CMP      r0,#2                 ;7104
004ee8  d3e3              BCC      |L1.20146|
004eea  e7bb              B        |L1.20068|
                  |L1.20204|
;;;7124   		else bat[i]._rel_stat=0;
004eec  eb010383          ADD      r3,r1,r3,LSL #2
004ef0  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.20212|
004ef4  f1000001          ADD      r0,r0,#1              ;7121
004ef8  b2c0              UXTB     r0,r0                 ;7121
004efa  2802              CMP      r0,#2                 ;7121
004efc  d3b4              BCC      |L1.20072|
;;;7125   		}
;;;7126   
;;;7127   	}
;;;7128   
;;;7129   else 
;;;7130   	{
;;;7131   	char i;
;;;7132   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7133   		{
;;;7134   		bat[i]._cnt_to_block=0;
;;;7135   		bat[i]._rel_stat=0;
;;;7136   		}
;;;7137   
;;;7138   	}
;;;7139   
;;;7140   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7141   	{
;;;7142   	if(PARAM_BAT_ON)
;;;7143   		{
;;;7144   		char i;
;;;7145   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7146   			{
;;;7147   			if(mess_data[1]&(1<<i))
;;;7148   				{
;;;7149   				bat[i]._cnt_to_block=0;
;;;7150   				bat[i]._rel_stat=0;
;;;7151   				}
;;;7152   			}
;;;7153   		}
;;;7154   	} */
;;;7155   }
004efe  e754              B        |L1.19882|
                  |L1.20224|
004f00  f04f0000          MOV      r0,#0                 ;7132
                  |L1.20228|
004f04  eb000340          ADD      r3,r0,r0,LSL #1       ;7134
004f08  eb031300          ADD      r3,r3,r0,LSL #4       ;7134
004f0c  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7134
004f10  eb010383          ADD      r3,r1,r3,LSL #2       ;7135
004f14  f883203c          STRB     r2,[r3,#0x3c]         ;7135
004f18  f1000001          ADD      r0,r0,#1              ;7132
004f1c  b2c0              UXTB     r0,r0                 ;7132
004f1e  2802              CMP      r0,#2                 ;7132
004f20  d3f0              BCC      |L1.20228|
004f22  e742              B        |L1.19882|
;;;7156   
                          ENDP

                  bat_drv PROC
;;;7794   //-----------------------------------------------
;;;7795   void bat_drv(char in)
004f24  e92d4ffe          PUSH     {r1-r11,lr}
;;;7796   {
004f28  4605              MOV      r5,r0
;;;7797   unsigned short /*tempUS,*/tempUS_;
;;;7798   unsigned long tempUL,tempUL_;
;;;7799   unsigned short b_zar;
;;;7800   //static unsigned short time_cnt[2];
;;;7801   
;;;7802   
;;;7803   
;;;7804   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004f2a  49a7              LDR      r1,|L1.20936|
004f2c  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004f30  b118              CBZ      r0,|L1.20282|
004f32  f1a00001          SUB      r0,r0,#1
004f36  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.20282|
;;;7805   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004f3a  4aa3              LDR      r2,|L1.20936|
004f3c  1d12              ADDS     r2,r2,#4
004f3e  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004f42  b118              CBZ      r0,|L1.20300|
004f44  f1a00001          SUB      r0,r0,#1
004f48  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.20300|
;;;7806   
;;;7807   
;;;7808   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004f4c  eb050045          ADD      r0,r5,r5,LSL #1
004f50  4b9b              LDR      r3,|L1.20928|
004f52  eb001005          ADD      r0,r0,r5,LSL #4
004f56  eb030480          ADD      r4,r3,r0,LSL #2
004f5a  4b9c              LDR      r3,|L1.20940|
004f5c  9002              STR      r0,[sp,#8]
004f5e  f9b40008          LDRSH    r0,[r4,#8]
004f62  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004f66  2364              MOVS     r3,#0x64
004f68  42b0              CMP      r0,r6
004f6a  dd01              BLE      |L1.20336|
004f6c  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.20336|
;;;7809   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004f70  2800              CMP      r0,#0
004f72  da01              BGE      |L1.20344|
004f74  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.20344|
;;;7810   
;;;7811   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7812        {
;;;7813        if(!cntrl_stat_blok_cnt_)
004f78  4893              LDR      r0,|L1.20936|
004f7a  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7811
004f7e  38b0              SUBS     r0,r0,#0xb0
004f80  2700              MOVS     r7,#0
004f82  b14b              CBZ      r3,|L1.20376|
004f84  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7811
004f88  b133              CBZ      r3,|L1.20376|
004f8a  f8b03076          LDRH     r3,[r0,#0x76]  ; cntrl_stat_blok_cnt_
004f8e  b1a3              CBZ      r3,|L1.20410|
;;;7814             {
;;;7815             cntrl_stat_blok_cnt_=600; 
;;;7816             cntrl_stat_blok_cnt_plus[in]=0;
;;;7817             cntrl_stat_blok_cnt_minus[in]=0;
;;;7818             }
;;;7819        else cntrl_stat_blok_cnt=3000;
004f90  f64031b8          MOV      r1,#0xbb8
004f94  f8a01074          STRH     r1,[r0,#0x74]
                  |L1.20376|
;;;7820        }
;;;7821   cntrl_stat_blok_cnt=0;
004f98  f8a07074          STRH     r7,[r0,#0x74]
;;;7822   
;;;7823   if(++(bat[in]._time_cnt)>=10)
004f9c  f894003e          LDRB     r0,[r4,#0x3e]
004fa0  1c40              ADDS     r0,r0,#1
004fa2  b2c0              UXTB     r0,r0
004fa4  f884003e          STRB     r0,[r4,#0x3e]
004fa8  280a              CMP      r0,#0xa
004faa  d301              BCC      |L1.20400|
;;;7824   	{
;;;7825   	bat[in]._time_cnt=0;
004fac  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.20400|
;;;7826   	//bat[in]._zar_cnt++;
;;;7827   	}
;;;7828   
;;;7829   if(main_10Hz_cnt==50)
004fb0  4e87              LDR      r6,|L1.20944|
004fb2  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
004fb4  2832              CMP      r0,#0x32
004fb6  d009              BEQ      |L1.20428|
004fb8  e017              B        |L1.20458|
                  |L1.20410|
004fba  f44f7316          MOV      r3,#0x258             ;7815
004fbe  f8a03076          STRH     r3,[r0,#0x76]         ;7815
004fc2  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7816
004fc6  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7817
004fca  e7e5              B        |L1.20376|
                  |L1.20428|
;;;7830   	{
;;;7831   	if(!bat[in]._rel_stat)
004fcc  f894003c          LDRB     r0,[r4,#0x3c]
004fd0  b958              CBNZ     r0,|L1.20458|
;;;7832   		{
;;;7833   		
;;;7834   		if(bat[in]._Ub<80) 
004fd2  f9b40002          LDRSH    r0,[r4,#2]
004fd6  2850              CMP      r0,#0x50
004fd8  da07              BGE      |L1.20458|
;;;7835   			{
;;;7836   			
;;;7837   			if(!(bat[in]._av&1))
004fda  f894003d          LDRB     r0,[r4,#0x3d]
004fde  07c0              LSLS     r0,r0,#31
004fe0  d103              BNE      |L1.20458|
;;;7838   				{
;;;7839   				avar_bat_hndl(in,1);
004fe2  2101              MOVS     r1,#1
004fe4  4628              MOV      r0,r5
004fe6  f7fffffe          BL       avar_bat_hndl
                  |L1.20458|
;;;7840   				//if(in==0)plazma_bat++;
;;;7841   				}
;;;7842   			}				
;;;7843   
;;;7844   		}
;;;7845   	}
;;;7846   
;;;7847   if(main_10Hz_cnt>200)
004fea  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7848   	{
;;;7849   	if(abs(bat[in]._Ib)>IKB) 
004fee  4e79              LDR      r6,|L1.20948|
004ff0  28c8              CMP      r0,#0xc8              ;7847
004ff2  dd0f              BLE      |L1.20500|
004ff4  f9b40008          LDRSH    r0,[r4,#8]
004ff8  f7fffffe          BL       abs
004ffc  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
005000  4288              CMP      r0,r1
005002  dd07              BLE      |L1.20500|
;;;7850   		{
;;;7851   		if((bat[in]._av&1))avar_bat_hndl(in,0);
005004  f894003d          LDRB     r0,[r4,#0x3d]
005008  07c0              LSLS     r0,r0,#31
00500a  d003              BEQ      |L1.20500|
00500c  2100              MOVS     r1,#0
00500e  4628              MOV      r0,r5
005010  f7fffffe          BL       avar_bat_hndl
                  |L1.20500|
;;;7852   		}
;;;7853   	}
;;;7854   
;;;7855   #ifdef APSENERGIA
;;;7856   //if(bat[in]._Ib>(-IKB))
;;;7857   
;;;7858   
;;;7859   #endif
;;;7860   
;;;7861   if(bat[in]._Ib>(-IKB))
005014  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
005018  f9b40008          LDRSH    r0,[r4,#8]
00501c  4249              RSBS     r1,r1,#0
00501e  4288              CMP      r0,r1
005020  dd0e              BLE      |L1.20544|
;;;7862   	{
;;;7863   	if(bat[in]._cnt_wrk<10)
005022  7b60              LDRB     r0,[r4,#0xd]
005024  280a              CMP      r0,#0xa
005026  d20c              BCS      |L1.20546|
;;;7864   		{
;;;7865   		bat[in]._cnt_wrk++;
005028  f1000001          ADD      r0,r0,#1
00502c  b2c0              UXTB     r0,r0
00502e  7360              STRB     r0,[r4,#0xd]
;;;7866   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
005030  280a              CMP      r0,#0xa
005032  d307              BCC      |L1.20548|
005034  7ba0              LDRB     r0,[r4,#0xe]
005036  2800              CMP      r0,#0
005038  d004              BEQ      |L1.20548|
;;;7867   			{
;;;7868   			bat[in]._wrk=0;
00503a  73a7              STRB     r7,[r4,#0xe]
;;;7869   			//beep_init(0x7L,'O');
;;;7870   			//wrk_mem_hndl(0);
;;;7871   			wrk_mem_hndl(in);
00503c  4628              MOV      r0,r5
00503e  e0cb              B        |L1.20952|
                  |L1.20544|
005040  e0d1              B        |L1.20966|
                  |L1.20546|
005042  e0cc              B        |L1.20958|
                  |L1.20548|
005044  e111              B        |L1.21098|
005046  0000              DCW      0x0000
                  |L1.20552|
                          DCD      eb2_data_short
                  |L1.20556|
                          DCD      avt_stat
                  |L1.20560|
                          DCD      avt_stat_old
                  |L1.20564|
                          DCD      NUMAVT
                  |L1.20568|
005058  4176746f          DCB      "Avtomat #1 is OFF",0
00505c  6d617420
005060  23312069
005064  73204f46
005068  4600    
00506a  00                DCB      0
00506b  00                DCB      0
                  |L1.20588|
00506c  4176746f          DCB      "Avtomat #2 is OFF",0
005070  6d617420
005074  23322069
005078  73204f46
00507c  4600    
00507e  00                DCB      0
00507f  00                DCB      0
                  |L1.20608|
005080  4176746f          DCB      "Avtomat #3 is OFF",0
005084  6d617420
005088  23332069
00508c  73204f46
005090  4600    
005092  00                DCB      0
005093  00                DCB      0
                  |L1.20628|
005094  4176746f          DCB      "Avtomat #4 is OFF",0
005098  6d617420
00509c  23342069
0050a0  73204f46
0050a4  4600    
0050a6  00                DCB      0
0050a7  00                DCB      0
                  |L1.20648|
0050a8  4176746f          DCB      "Avtomat #5 is OFF",0
0050ac  6d617420
0050b0  23352069
0050b4  73204f46
0050b8  4600    
0050ba  00                DCB      0
0050bb  00                DCB      0
                  |L1.20668|
0050bc  4176746f          DCB      "Avtomat #6 is OFF",0
0050c0  6d617420
0050c4  23362069
0050c8  73204f46
0050cc  4600    
0050ce  00                DCB      0
0050cf  00                DCB      0
                  |L1.20688|
0050d0  4176746f          DCB      "Avtomat #7 is OFF",0
0050d4  6d617420
0050d8  23372069
0050dc  73204f46
0050e0  4600    
0050e2  00                DCB      0
0050e3  00                DCB      0
                  |L1.20708|
0050e4  4176746f          DCB      "Avtomat #8 is OFF",0
0050e8  6d617420
0050ec  23382069
0050f0  73204f46
0050f4  4600    
0050f6  00                DCB      0
0050f7  00                DCB      0
                  |L1.20728|
0050f8  4176746f          DCB      "Avtomat #9 is OFF",0
0050fc  6d617420
005100  23392069
005104  73204f46
005108  4600    
00510a  00                DCB      0
00510b  00                DCB      0
                  |L1.20748|
00510c  4176746f          DCB      "Avtomat #1 is ON ",0
005110  6d617420
005114  23312069
005118  73204f4e
00511c  2000    
00511e  00                DCB      0
00511f  00                DCB      0
                  |L1.20768|
005120  4176746f          DCB      "Avtomat #2 is ON ",0
005124  6d617420
005128  23322069
00512c  73204f4e
005130  2000    
005132  00                DCB      0
005133  00                DCB      0
                  |L1.20788|
005134  4176746f          DCB      "Avtomat #3 is ON ",0
005138  6d617420
00513c  23332069
005140  73204f4e
005144  2000    
005146  00                DCB      0
005147  00                DCB      0
                  |L1.20808|
005148  4176746f          DCB      "Avtomat #4 is ON ",0
00514c  6d617420
005150  23342069
005154  73204f4e
005158  2000    
00515a  00                DCB      0
00515b  00                DCB      0
                  |L1.20828|
00515c  4176746f          DCB      "Avtomat #5 is ON ",0
005160  6d617420
005164  23352069
005168  73204f4e
00516c  2000    
00516e  00                DCB      0
00516f  00                DCB      0
                  |L1.20848|
005170  4176746f          DCB      "Avtomat #6 is ON ",0
005174  6d617420
005178  23362069
00517c  73204f4e
005180  2000    
005182  00                DCB      0
005183  00                DCB      0
                  |L1.20868|
005184  4176746f          DCB      "Avtomat #7 is ON ",0
005188  6d617420
00518c  23372069
005190  73204f4e
005194  2000    
005196  00                DCB      0
005197  00                DCB      0
                  |L1.20888|
005198  4176746f          DCB      "Avtomat #8 is ON ",0
00519c  6d617420
0051a0  23382069
0051a4  73204f4e
0051a8  2000    
0051aa  00                DCB      0
0051ab  00                DCB      0
                  |L1.20908|
0051ac  4176746f          DCB      "Avtomat #9 is ON ",0
0051b0  6d617420
0051b4  23392069
0051b8  73204f4e
0051bc  2000    
0051be  00                DCB      0
0051bf  00                DCB      0
                  |L1.20928|
                          DCD      bat
                  |L1.20932|
                          DCD      mess_data
                  |L1.20936|
                          DCD      ||area_number.25||+0xb0
                  |L1.20940|
                          DCD      IZMAX
                  |L1.20944|
                          DCD      main_10Hz_cnt
                  |L1.20948|
                          DCD      IKB
                  |L1.20952|
0051d8  f7fffffe          BL       wrk_mem_hndl
0051dc  e069              B        |L1.21170|
                  |L1.20958|
;;;7872   			//plazma++;
;;;7873   			}
;;;7874   		}
;;;7875   	else bat[in]._cnt_wrk=10;	
0051de  f04f000a          MOV      r0,#0xa
0051e2  7360              STRB     r0,[r4,#0xd]
0051e4  e065              B        |L1.21170|
                  |L1.20966|
;;;7876   	}	
;;;7877   
;;;7878   else if(bat[in]._Ib<(-IKB))
0051e6  da64              BGE      |L1.21170|
;;;7879   	{
;;;7880   	if(bat[in]._cnt_wrk)
0051e8  7b60              LDRB     r0,[r4,#0xd]
0051ea  b3f0              CBZ      r0,|L1.21098|
;;;7881   		{
;;;7882   		bat[in]._cnt_wrk--;
0051ec  f1a00001          SUB      r0,r0,#1
0051f0  b2c0              UXTB     r0,r0
0051f2  7360              STRB     r0,[r4,#0xd]
;;;7883   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
0051f4  bbc8              CBNZ     r0,|L1.21098|
0051f6  7ba0              LDRB     r0,[r4,#0xe]
0051f8  bbb8              CBNZ     r0,|L1.21098|
;;;7884   			{
;;;7885   			bat[in]._wrk=1;
0051fa  f04f0001          MOV      r0,#1
0051fe  73a0              STRB     r0,[r4,#0xe]
;;;7886   
;;;7887   				{
;;;7888   				char temp;
;;;7889   				signed short temp_temp;
;;;7890   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
005200  48ff              LDR      r0,|L1.22016|
005202  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
005204  f1000001          ADD      r0,r0,#1
005208  f0000007          AND      r0,r0,#7
00520c  eb040040          ADD      r0,r4,r0,LSL #1
005210  8c00              LDRH     r0,[r0,#0x20]
005212  9000              STR      r0,[sp,#0]
;;;7891   			 
;;;7892   				temp=LPC_RTC->YEAR;
005214  4efb              LDR      r6,|L1.22020|
005216  8bb0              LDRH     r0,[r6,#0x1c]
005218  9001              STR      r0,[sp,#4]
;;;7893   				gran_char((signed char*)&temp,1,99);
00521a  f04f0263          MOV      r2,#0x63
00521e  f04f0101          MOV      r1,#1
005222  a801              ADD      r0,sp,#4
005224  f7fffffe          BL       gran_char
;;;7894   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
005228  f104041c          ADD      r4,r4,#0x1c
00522c  f89d0004          LDRB     r0,[sp,#4]
005230  7620              STRB     r0,[r4,#0x18]
;;;7895   			
;;;7896   				temp=LPC_RTC->MONTH;
005232  7e30              LDRB     r0,[r6,#0x18]
005234  9001              STR      r0,[sp,#4]
;;;7897   				gran_char((signed char*)&temp,1,12);
005236  f04f020c          MOV      r2,#0xc
00523a  f04f0101          MOV      r1,#1
00523e  a801              ADD      r0,sp,#4
005240  f7fffffe          BL       gran_char
;;;7898   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
005244  f89d0004          LDRB     r0,[sp,#4]
005248  7660              STRB     r0,[r4,#0x19]
;;;7899   			
;;;7900   				temp=LPC_RTC->DOM;
00524a  7b30              LDRB     r0,[r6,#0xc]
00524c  9001              STR      r0,[sp,#4]
;;;7901   				gran_char((signed char*)&temp,1,31);
00524e  221f              MOVS     r2,#0x1f
005250  2101              MOVS     r1,#1
005252  a801              ADD      r0,sp,#4
005254  f7fffffe          BL       gran_char
;;;7902   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
005258  f89d0004          LDRB     r0,[sp,#4]
00525c  76a0              STRB     r0,[r4,#0x1a]
;;;7903   				
;;;7904   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
00525e  f89d0000          LDRB     r0,[sp,#0]
005262  76e0              STRB     r0,[r4,#0x1b]
;;;7905   
;;;7906   				temp=LPC_RTC->HOUR;
005264  7a30              LDRB     r0,[r6,#8]
005266  9001              STR      r0,[sp,#4]
;;;7907   				gran_char((signed char*)&temp,0,23);
005268  e000              B        |L1.21100|
                  |L1.21098|
00526a  e022              B        |L1.21170|
                  |L1.21100|
00526c  2217              MOVS     r2,#0x17
00526e  2100              MOVS     r1,#0
005270  a801              ADD      r0,sp,#4
005272  f7fffffe          BL       gran_char
;;;7908   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
005276  f89d0004          LDRB     r0,[sp,#4]
00527a  7720              STRB     r0,[r4,#0x1c]
;;;7909                  	
;;;7910   				temp=LPC_RTC->MIN;
00527c  7930              LDRB     r0,[r6,#4]
00527e  9001              STR      r0,[sp,#4]
;;;7911   				gran_char((signed char*)&temp,0,59);
005280  223b              MOVS     r2,#0x3b
005282  2100              MOVS     r1,#0
005284  a801              ADD      r0,sp,#4
005286  f7fffffe          BL       gran_char
;;;7912   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
00528a  f89d0004          LDRB     r0,[sp,#4]
00528e  7760              STRB     r0,[r4,#0x1d]
;;;7913   	          
;;;7914   				temp=LPC_RTC->SEC;
005290  7830              LDRB     r0,[r6,#0]
005292  9001              STR      r0,[sp,#4]
;;;7915   				gran_char((signed char*)&temp,0,59);
005294  223b              MOVS     r2,#0x3b
005296  2100              MOVS     r1,#0
005298  a801              ADD      r0,sp,#4
00529a  f7fffffe          BL       gran_char
;;;7916   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
00529e  f89d0004          LDRB     r0,[sp,#4]
0052a2  77a0              STRB     r0,[r4,#0x1e]
;;;7917   			
;;;7918   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
0052a4  f89d0001          LDRB     r0,[sp,#1]
0052a8  77e0              STRB     r0,[r4,#0x1f]
;;;7919   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
0052aa  8027              STRH     r7,[r4,#0]
;;;7920   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
0052ac  8067              STRH     r7,[r4,#2]
0052ae  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.21170|
;;;7921   				}
;;;7922   	
;;;7923   			}
;;;7924   
;;;7925   		}
;;;7926   	else bat[in]._cnt_wrk=0;	 
;;;7927   	
;;;7928   	}					
;;;7929   
;;;7930   /*
;;;7931   if(Ibat>=(-IKB))
;;;7932   	{
;;;7933   	if(cnt_wrk<10)
;;;7934   		{
;;;7935   		cnt_wrk++;
;;;7936   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7937   			{
;;;7938   			wrk=wrkOFF;
;;;7939   			//beep_init(0x7L,'O');
;;;7940   			wrk_mem_hndl(ibat_integr);
;;;7941   			}
;;;7942   		}
;;;7943   	else cnt_wrk=10;	
;;;7944   	}	
;;;7945   
;;;7946   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;7947   	{
;;;7948   	if(cnt_wrk)
;;;7949   		{
;;;7950   		cnt_wrk--;
;;;7951   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7952   			{
;;;7953   			char temp;
;;;7954   			signed short temp_temp;
;;;7955   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7956   			 
;;;7957   			wrk=wrkON;
;;;7958   			
;;;7959   			temp=_year;
;;;7960   			gran_char(&temp,1,99);
;;;7961   			*((char*)(&(wrk_date[0])))=temp;
;;;7962   			
;;;7963   			temp=_month;
;;;7964   			gran_char(&temp,1,12);
;;;7965   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7966   			
;;;7967   			temp=_date;
;;;7968   			gran_char(&temp,1,31);
;;;7969   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7970   				
;;;7971   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7972   
;;;7973   			temp=_hour;
;;;7974   			gran_char(&temp,0,23);
;;;7975   			*((char*)(&(wrk_date[1])))=temp;
;;;7976                  
;;;7977   			temp=_min;
;;;7978   			gran_char(&temp,0,59);
;;;7979   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7980   	          
;;;7981   			temp=_sec;
;;;7982   			gran_char(&temp,0,59);
;;;7983   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7984   			
;;;7985   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7986   
;;;7987   			
;;;7988   			//beep_init(0xFL,'O'); 
;;;7989   			ibat_integr=0;
;;;7990   			ibat_integr_=0;
;;;7991   			}
;;;7992   		}
;;;7993   	else cnt_wrk=0;	 
;;;7994   	
;;;7995   	}
;;;7996   if(wrk==wrkON)
;;;7997   	{
;;;7998   	ibat_integr_+=-Ibat;
;;;7999   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;8000   		{
;;;8001   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;8002   		ibat_integr++;
;;;8003   		}
;;;8004   	}
;;;8005   
;;;8006   */
;;;8007   
;;;8008   
;;;8009   /*if(bat[in]._cnt_to_block)
;;;8010   	{
;;;8011   	bat[in]._cnt_to_block--;
;;;8012   	if(!(bat[in]._cnt_to_block))
;;;8013   		{
;;;8014   		//bat[in]._rel_stat=1;
;;;8015   		}
;;;8016   	}
;;;8017   */
;;;8018   
;;;8019   
;;;8020   
;;;8021   
;;;8022   //unsigned int tempUI,tempUI_;
;;;8023   //unsigned int b_zar; 
;;;8024   //char i;
;;;8025   //Ibat[0]=5000;                     
;;;8026   
;;;8027   
;;;8028                               
;;;8029   if(bat[in]._time_cnt==0)
;;;8030   	{
;;;8031   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8032   	
;;;8033   	if(bat[in]._zar_cnt>=AH_CONSTANT)
0052b2  f64848a0          MOV      r8,#0x8ca0
0052b6  f894003e          LDRB     r0,[r4,#0x3e]         ;8029
0052ba  bba8              CBNZ     r0,|L1.21288|
0052bc  f9b41008          LDRSH    r1,[r4,#8]            ;8031
0052c0  6960              LDR      r0,[r4,#0x14]         ;8031
0052c2  4408              ADD      r0,r0,r1              ;8031
0052c4  6160              STR      r0,[r4,#0x14]         ;8031
;;;8034   		{
;;;8035   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8036   		else tempUS_=BAT_C_REAL[in];
;;;8037   		
;;;8038   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0052c6  f8df9340          LDR      r9,|L1.22024|
0052ca  f8dfa340          LDR      r10,|L1.22028|
0052ce  f2455b55          MOV      r11,#0x5555           ;8035
0052d2  4540              CMP      r0,r8                 ;8033
0052d4  db29              BLT      |L1.21290|
0052d6  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8035
0052da  4558              CMP      r0,r11                ;8035
0052dc  d103              BNE      |L1.21222|
0052de  48cc              LDR      r0,|L1.22032|
0052e0  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8035
0052e4  e001              B        |L1.21226|
                  |L1.21222|
0052e6  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8036
                  |L1.21226|
0052ea  f8390015          LDRH     r0,[r9,r5,LSL #1]
0052ee  f7fffffe          BL       lc640_read_int
0052f2  b280              UXTH     r0,r0
;;;8039   
;;;8040   		if(b_zar<(tempUS_/**10*/))
0052f4  42b0              CMP      r0,r6
0052f6  d20e              BCS      |L1.21270|
;;;8041   			{
;;;8042   			bat[in]._zar_cnt-=AH_CONSTANT;
0052f8  6961              LDR      r1,[r4,#0x14]
0052fa  f5a14100          SUB      r1,r1,#0x8000
0052fe  f5a1614a          SUB      r1,r1,#0xca0
005302  6161              STR      r1,[r4,#0x14]
;;;8043   
;;;8044   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
005304  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005308  f1000001          ADD      r0,r0,#1
00530c  b201              SXTH     r1,r0
00530e  4610              MOV      r0,r2
005310  f7fffffe          BL       lc640_write_int
005314  e032              B        |L1.21372|
                  |L1.21270|
;;;8045   			}
;;;8046   		else if(b_zar>(tempUS_/**10*/))  
005316  d931              BLS      |L1.21372|
;;;8047   			{
;;;8048   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005318  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00531c  b231              SXTH     r1,r6
00531e  f7fffffe          BL       lc640_write_int
;;;8049   			bat[in]._zar_cnt=AH_CONSTANT;
005322  f8c48014          STR      r8,[r4,#0x14]
005326  e029              B        |L1.21372|
                  |L1.21288|
005328  e054              B        |L1.21460|
                  |L1.21290|
;;;8050   
;;;8051   			}
;;;8052   
;;;8053   		}
;;;8054   
;;;8055   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
00532a  49ba              LDR      r1,|L1.22036|
00532c  4288              CMP      r0,r1
00532e  dc25              BGT      |L1.21372|
;;;8056   		{
;;;8057   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
005330  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005334  4558              CMP      r0,r11
005336  d103              BNE      |L1.21312|
005338  48b5              LDR      r0,|L1.22032|
00533a  f8306015          LDRH     r6,[r0,r5,LSL #1]
00533e  e001              B        |L1.21316|
                  |L1.21312|
;;;8058   		else tempUS_=BAT_C_REAL[in];
005340  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.21316|
;;;8059   		
;;;8060   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005344  f8390015          LDRH     r0,[r9,r5,LSL #1]
005348  f7fffffe          BL       lc640_read_int
00534c  b280              UXTH     r0,r0
;;;8061   
;;;8062   		if(b_zar>tempUS_)
00534e  42b0              CMP      r0,r6
005350  d905              BLS      |L1.21342|
;;;8063   			{
;;;8064   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005352  f9390015          LDRSH    r0,[r9,r5,LSL #1]
005356  b231              SXTH     r1,r6
005358  f7fffffe          BL       lc640_write_int
;;;8065   			b_zar=tempUS_;
00535c  4630              MOV      r0,r6
                  |L1.21342|
;;;8066   			}
;;;8067   		if(b_zar)
00535e  b158              CBZ      r0,|L1.21368|
;;;8068   			{
;;;8069   			bat[in]._zar_cnt+=AH_CONSTANT;
005360  6961              LDR      r1,[r4,#0x14]
005362  4441              ADD      r1,r1,r8
005364  6161              STR      r1,[r4,#0x14]
;;;8070   
;;;8071   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
005366  f9392015          LDRSH    r2,[r9,r5,LSL #1]
00536a  f1a00001          SUB      r0,r0,#1
00536e  b201              SXTH     r1,r0
005370  4610              MOV      r0,r2
005372  f7fffffe          BL       lc640_write_int
005376  e001              B        |L1.21372|
                  |L1.21368|
;;;8072   			}
;;;8073   		else 
;;;8074   			{
;;;8075   			bat[in]._zar_cnt=-AH_CONSTANT;
005378  48a6              LDR      r0,|L1.22036|
00537a  6160              STR      r0,[r4,#0x14]
                  |L1.21372|
;;;8076   			}
;;;8077   
;;;8078   		}
;;;8079   
;;;8080   			
;;;8081   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00537c  f8390015          LDRH     r0,[r9,r5,LSL #1]
005380  f7fffffe          BL       lc640_read_int
005384  4601              MOV      r1,r0
;;;8082   	
;;;8083   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
005386  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
00538a  4558              CMP      r0,r11
00538c  d102              BNE      |L1.21396|
00538e  48a0              LDR      r0,|L1.22032|
005390  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21396|
;;;8084   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8085   		           	
;;;8086   	tempUL*=1000L;
005394  f44f727a          MOV      r2,#0x3e8
005398  fb01f102          MUL      r1,r1,r2
;;;8087   
;;;8088   
;;;8089   	if(tempUL_==0) tempUL=0;
00539c  b158              CBZ      r0,|L1.21430|
;;;8090   	else tempUL/=tempUL_;
00539e  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21410|
;;;8091   
;;;8092   	tempUL/=10L;
0053a2  f04f010a          MOV      r1,#0xa
0053a6  fbb0f0f1          UDIV     r0,r0,r1
;;;8093   
;;;8094   	bat[in]._zar=(unsigned short)tempUL;
0053aa  8220              STRH     r0,[r4,#0x10]
;;;8095   
;;;8096   	if(BAT_TYPE==1)
0053ac  489a              LDR      r0,|L1.22040|
0053ae  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
0053b0  2801              CMP      r0,#1
0053b2  d003              BEQ      |L1.21436|
0053b4  e008              B        |L1.21448|
                  |L1.21430|
0053b6  f04f0000          MOV      r0,#0                 ;8089
0053ba  e7f2              B        |L1.21410|
                  |L1.21436|
;;;8097   		{
;;;8098   		bat[in]._zar=lakb[in]._s_o_c;
0053bc  4997              LDR      r1,|L1.22044|
0053be  9802              LDR      r0,[sp,#8]
0053c0  eb010080          ADD      r0,r1,r0,LSL #2
0053c4  8a40              LDRH     r0,[r0,#0x12]
0053c6  8220              STRH     r0,[r4,#0x10]
                  |L1.21448|
;;;8099   		}
;;;8100   	
;;;8101   	gran((signed short*)&bat[in]._zar,0,100);
0053c8  f1040010          ADD      r0,r4,#0x10
0053cc  2264              MOVS     r2,#0x64
0053ce  2100              MOVS     r1,#0
0053d0  f7fffffe          BL       gran
                  |L1.21460|
;;;8102        }
;;;8103   
;;;8104   
;;;8105   //Подсчет тока разряда батареи      
;;;8106   if(bat[in]._wrk==1)
0053d4  7ba0              LDRB     r0,[r4,#0xe]
0053d6  2801              CMP      r0,#1
0053d8  d113              BNE      |L1.21506|
;;;8107   	{
;;;8108   	if(bat[in]._Iintegr<36000)
0053da  8ba0              LDRH     r0,[r4,#0x1c]
0053dc  4540              CMP      r0,r8
0053de  d20f              BCS      |L1.21504|
;;;8109   		{          
;;;8110   		bat[in]._Iintegr+=abs(bat[in]._Ib);
0053e0  f9b40008          LDRSH    r0,[r4,#8]
0053e4  f7fffffe          BL       abs
0053e8  8ba1              LDRH     r1,[r4,#0x1c]
0053ea  4408              ADD      r0,r0,r1
0053ec  b280              UXTH     r0,r0
0053ee  83a0              STRH     r0,[r4,#0x1c]
;;;8111   		if(bat[in]._Iintegr>=36000)
0053f0  4540              CMP      r0,r8
0053f2  d306              BCC      |L1.21506|
;;;8112   			{
;;;8113   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
0053f4  83a7              STRH     r7,[r4,#0x1c]
;;;8114   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
0053f6  8be0              LDRH     r0,[r4,#0x1e]
0053f8  f1000001          ADD      r0,r0,#1
0053fc  83e0              STRH     r0,[r4,#0x1e]
0053fe  e000              B        |L1.21506|
                  |L1.21504|
;;;8115   			}
;;;8116   		}
;;;8117   	else 
;;;8118   		{
;;;8119   		bat[in]._Iintegr=0;
005400  83a7              STRH     r7,[r4,#0x1c]
                  |L1.21506|
;;;8120   		}	
;;;8121   	} 
;;;8122   	    
;;;8123   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8124   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
005402  4e87              LDR      r6,|L1.22048|
005404  4987              LDR      r1,|L1.22052|
005406  f8df9220          LDR      r9,|L1.22056|
00540a  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00540e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
005412  4288              CMP      r0,r1
005414  dd02              BLE      |L1.21532|
005416  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00541a  b380              CBZ      r0,|L1.21630|
                  |L1.21532|
;;;8125   	{
;;;8126   	bat[in]._sign_temper_cnt++;
;;;8127   	}
;;;8128   else 
;;;8129   	{
;;;8130   	bat[in]._sign_temper_cnt--;
00541c  f8b40040          LDRH     r0,[r4,#0x40]
005420  f1a00001          SUB      r0,r0,#1
005424  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.21544|
;;;8131   	}
;;;8132   #else
;;;8133   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8134   	{
;;;8135   	bat[in]._sign_temper_cnt++;
;;;8136   	}
;;;8137   else 
;;;8138   	{
;;;8139   	bat[in]._sign_temper_cnt--;
;;;8140   	}
;;;8141   #endif
;;;8142   gran(&bat[in]._sign_temper_cnt,0,600);
005428  f44f7b16          MOV      r11,#0x258
00542c  f1040040          ADD      r0,r4,#0x40
005430  465a              MOV      r2,r11
005432  2100              MOVS     r1,#0
005434  f7fffffe          BL       gran
;;;8143   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
005438  f9b40040          LDRSH    r0,[r4,#0x40]
00543c  f2402a4e          MOV      r10,#0x24e
005440  4550              CMP      r0,r10
005442  db05              BLT      |L1.21584|
005444  f894103f          LDRB     r1,[r4,#0x3f]
005448  f0410101          ORR      r1,r1,#1
00544c  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21584|
;;;8144   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
005450  280a              CMP      r0,#0xa
005452  dc05              BGT      |L1.21600|
005454  f894003f          LDRB     r0,[r4,#0x3f]
005458  f0200001          BIC      r0,r0,#1
00545c  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21600|
;;;8145   
;;;8146   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
005460  f894003f          LDRB     r0,[r4,#0x3f]
005464  07c1              LSLS     r1,r0,#31
005466  d005              BEQ      |L1.21620|
005468  06c0              LSLS     r0,r0,#27
00546a  d403              BMI      |L1.21620|
00546c  2101              MOVS     r1,#1
00546e  4628              MOV      r0,r5
005470  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21620|
;;;8147   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
005474  f894003f          LDRB     r0,[r4,#0x3f]
005478  07c1              LSLS     r1,r0,#31
00547a  d008              BEQ      |L1.21646|
00547c  e00d              B        |L1.21658|
                  |L1.21630|
00547e  e7ff              B        |L1.21632|
                  |L1.21632|
005480  f8b40040          LDRH     r0,[r4,#0x40]         ;8126
005484  f1000001          ADD      r0,r0,#1              ;8126
005488  f8a40040          STRH     r0,[r4,#0x40]         ;8126
00548c  e7cc              B        |L1.21544|
                  |L1.21646|
00548e  06c0              LSLS     r0,r0,#27
005490  d503              BPL      |L1.21658|
005492  2100              MOVS     r1,#0
005494  4628              MOV      r0,r5
005496  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21658|
;;;8148   
;;;8149   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
00549a  f894003f          LDRB     r0,[r4,#0x3f]
00549e  07c1              LSLS     r1,r0,#31
0054a0  d004              BEQ      |L1.21676|
0054a2  f0400010          ORR      r0,r0,#0x10
0054a6  f884003f          STRB     r0,[r4,#0x3f]
0054aa  e003              B        |L1.21684|
                  |L1.21676|
;;;8150   else 								bat[in]._temper_stat&=~(1<<4);
0054ac  f0200010          BIC      r0,r0,#0x10
0054b0  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21684|
;;;8151   
;;;8152   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8153   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
0054b4  495d              LDR      r1,|L1.22060|
0054b6  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
0054ba  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
0054be  4288              CMP      r0,r1
0054c0  dd02              BLE      |L1.21704|
0054c2  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
0054c6  b3d0              CBZ      r0,|L1.21822|
                  |L1.21704|
;;;8154   	{
;;;8155   	bat[in]._max_temper_cnt++;
;;;8156   	}
;;;8157   else 
;;;8158   	{
;;;8159   	bat[in]._max_temper_cnt--;
0054c8  f8b40042          LDRH     r0,[r4,#0x42]
0054cc  f1a00001          SUB      r0,r0,#1
0054d0  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21716|
;;;8160   	}
;;;8161   #else
;;;8162   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8163   	{
;;;8164   	bat[in]._max_temper_cnt++;
;;;8165   	}
;;;8166   else 
;;;8167   	{
;;;8168   	bat[in]._max_temper_cnt--;
;;;8169   	}
;;;8170   #endif
;;;8171   
;;;8172   gran(&bat[in]._max_temper_cnt,0,600);
0054d4  f1040042          ADD      r0,r4,#0x42
0054d8  465a              MOV      r2,r11
0054da  2100              MOVS     r1,#0
0054dc  f7fffffe          BL       gran
;;;8173   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
0054e0  f9b40042          LDRSH    r0,[r4,#0x42]
0054e4  4550              CMP      r0,r10
0054e6  db05              BLT      |L1.21748|
0054e8  f894103f          LDRB     r1,[r4,#0x3f]
0054ec  f0410102          ORR      r1,r1,#2
0054f0  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21748|
;;;8174   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
0054f4  280a              CMP      r0,#0xa
0054f6  dc05              BGT      |L1.21764|
0054f8  f894003f          LDRB     r0,[r4,#0x3f]
0054fc  f0200002          BIC      r0,r0,#2
005500  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21764|
;;;8175   
;;;8176   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
005504  f894003f          LDRB     r0,[r4,#0x3f]
005508  0781              LSLS     r1,r0,#30
00550a  d505              BPL      |L1.21784|
00550c  0680              LSLS     r0,r0,#26
00550e  d403              BMI      |L1.21784|
005510  2103              MOVS     r1,#3
005512  4628              MOV      r0,r5
005514  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21784|
;;;8177   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
005518  f894003f          LDRB     r0,[r4,#0x3f]
00551c  0781              LSLS     r1,r0,#30
00551e  d405              BMI      |L1.21804|
005520  0680              LSLS     r0,r0,#26
005522  d503              BPL      |L1.21804|
005524  2102              MOVS     r1,#2
005526  4628              MOV      r0,r5
005528  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21804|
;;;8178   
;;;8179   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
00552c  f894003f          LDRB     r0,[r4,#0x3f]
005530  0781              LSLS     r1,r0,#30
005532  d50c              BPL      |L1.21838|
005534  f0400020          ORR      r0,r0,#0x20
005538  f884003f          STRB     r0,[r4,#0x3f]
00553c  e00b              B        |L1.21846|
                  |L1.21822|
00553e  e7ff              B        |L1.21824|
                  |L1.21824|
005540  f8b40042          LDRH     r0,[r4,#0x42]         ;8155
005544  f1000001          ADD      r0,r0,#1              ;8155
005548  f8a40042          STRH     r0,[r4,#0x42]         ;8155
00554c  e7c2              B        |L1.21716|
                  |L1.21838|
;;;8180   else 								bat[in]._temper_stat&=~(1<<5);
00554e  f0200020          BIC      r0,r0,#0x20
005552  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21846|
;;;8181   
;;;8182   //Подсчет наработки батареи
;;;8183   if(bat[in]._resurs_cnt<36000)
005556  6c60              LDR      r0,[r4,#0x44]
005558  4540              CMP      r0,r8
00555a  da13              BGE      |L1.21892|
;;;8184   	{               
;;;8185   	bat[in]._resurs_cnt++;
00555c  f1000001          ADD      r0,r0,#1
005560  6460              STR      r0,[r4,#0x44]
;;;8186   	if(bat[in]._resurs_cnt>=36000)
005562  4540              CMP      r0,r8
005564  db0f              BLT      |L1.21894|
;;;8187   		{
;;;8188   		bat[in]._resurs_cnt=0;
005566  6467              STR      r7,[r4,#0x44]
;;;8189   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
005568  4c31              LDR      r4,|L1.22064|
00556a  f8340015          LDRH     r0,[r4,r5,LSL #1]
00556e  f7fffffe          BL       lc640_read_int
005572  1c40              ADDS     r0,r0,#1
005574  b201              SXTH     r1,r0
005576  f9340015          LDRSH    r0,[r4,r5,LSL #1]
00557a  b003              ADD      sp,sp,#0xc
00557c  e8bd4ff0          POP      {r4-r11,lr}
005580  f7ffbffe          B.W      lc640_write_int
                  |L1.21892|
;;;8190   		}
;;;8191   	}
;;;8192   else bat[in]._resurs_cnt=0;
005584  6467              STR      r7,[r4,#0x44]
                  |L1.21894|
;;;8193   
;;;8194   
;;;8195   #ifndef UKU_220_V2
;;;8196   #ifndef UKU_GLONASS
;;;8197   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8198   //#ifndef UKU_6U
;;;8199   //#ifndef UKU_220
;;;8200   if(UBM_AV)
;;;8201        {
;;;8202        signed short temp_SS;
;;;8203   #ifdef UKU_220
;;;8204   temp_SS=bat[in]._Ub/2;
;;;8205   #else
;;;8206        if(U0B<600)
;;;8207             {
;;;8208   
;;;8209             temp_SS=bat[in]._Ub/4;
;;;8210             }
;;;8211        else temp_SS=bat[in]._Ub/5;
;;;8212   	
;;;8213   	temp_SS+=temp_SS;     
;;;8214   #endif
;;;8215        temp_SS-=(bat[in]._Ubm);
;;;8216   
;;;8217        temp_SS=abs(temp_SS);
;;;8218   
;;;8219        temp_SS*=10;
;;;8220   
;;;8221        temp_SS/=12;
;;;8222   
;;;8223        bat[in]._dUbm=temp_SS;
;;;8224   
;;;8225   
;;;8226        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8227   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8228   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8229   		(!(bat[in]._av & 2))  )
;;;8230   		{
;;;8231   		bat[in]._cnt_as++;
;;;8232   		if(bat[in]._cnt_as==3000)
;;;8233   			{
;;;8234   			avar_bat_as_hndl(in,1);
;;;8235   			}
;;;8236   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8237   		}
;;;8238   	else 
;;;8239   		{
;;;8240   		if(bat[in]._cnt_as)
;;;8241   			{
;;;8242   			bat[in]._cnt_as--;
;;;8243   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8244   			}
;;;8245   		}
;;;8246        
;;;8247        }
;;;8248   //#endif 
;;;8249   #endif 
;;;8250   #endif
;;;8251   #endif
;;;8252   
;;;8253   }
005586  e8bd8ffe          POP      {r1-r11,pc}
;;;8254   
                          ENDP

                  bat_hndl_zvu PROC
;;;8256   //-----------------------------------------------
;;;8257   void bat_hndl_zvu(void)
00558a  e92d4ff0          PUSH     {r4-r11,lr}
;;;8258   {
00558e  b089              SUB      sp,sp,#0x24
;;;8259   char i;
;;;8260   short bat_hndl_i_temp;
;;;8261   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
005590  f04f021c          MOV      r2,#0x1c
005594  4927              LDR      r1,|L1.22068|
005596  4668              MOV      r0,sp
005598  f7fffffe          BL       __aeabi_memcpy4
;;;8262   
;;;8263   //Ib_ips_termokompensat=-17000;
;;;8264    
;;;8265   if(bat_hndl_zvu_init==0)
00559c  4c26              LDR      r4,|L1.22072|
;;;8266   	{
;;;8267   	//Инициализация при включении системы
;;;8268   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8269   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
00559e  2564              MOVS     r5,#0x64
;;;8270   	bat_hndl_zvu_Q*=10000L;
;;;8271   
;;;8272   	bat_hndl_zvu_init=1;
;;;8273   	}
;;;8274   else 
;;;8275   	{
;;;8276   	if(Ib_ips_termokompensat<-IKB)
;;;8277   		{
;;;8278   		bat_hndl_i_vector=0;
;;;8279   		bat_hndl_i_zar_price=0L;
;;;8280   			
;;;8281   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8282   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8283   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8284   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8285   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8286   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8287   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8288   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8289   		
;;;8290   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8291   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8292   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8293   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8294   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8295   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8296   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8297   
;;;8298   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8299   		for(i=0;i<7;i++)
;;;8300   			{
;;;8301   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8302   				{
;;;8303   				break;
;;;8304   				}
;;;8305   			}
;;;8306   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8307   		 else if((i>=1)&&(i<7))
;;;8308   		 	{
;;;8309   			short i1,i2;
;;;8310   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8311   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8312   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8313   			bat_hndl_t_razr*=(long)i1;
;;;8314   			bat_hndl_t_razr/=(long)i2;
;;;8315   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8316   			}
;;;8317   		else if(i>=7)
;;;8318   			{
;;;8319   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8320   			}
;;;8321   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
0055a0  f8df8098          LDR      r8,|L1.22076|
0055a4  7a60              LDRB     r0,[r4,#9]            ;8265  ; bat_hndl_zvu_init
0055a6  2700              MOVS     r7,#0                 ;8265
0055a8  f04f0901          MOV      r9,#1                 ;8272
0055ac  f1040680          ADD      r6,r4,#0x80           ;8268
0055b0  2800              CMP      r0,#0                 ;8265
0055b2  d07e              BEQ      |L1.22194|
0055b4  4923              LDR      r1,|L1.22084|
0055b6  4822              LDR      r0,|L1.22080|
0055b8  f9b12000          LDRSH    r2,[r1,#0]            ;8276  ; IKB
0055bc  4631              MOV      r1,r6                 ;8268
0055be  f9b00000          LDRSH    r0,[r0,#0]            ;8276  ; Ib_ips_termokompensat
0055c2  4253              RSBS     r3,r2,#0              ;8276
0055c4  6d49              LDR      r1,[r1,#0x54]         ;8268
0055c6  4298              CMP      r0,r3                 ;8276
0055c8  da74              BGE      |L1.22196|
0055ca  72e7              STRB     r7,[r4,#0xb]          ;8278
0055cc  6137              STR      r7,[r6,#0x10]         ;8279  ; bat_hndl_i_zar_price
0055ce  f1c00000          RSB      r0,r0,#0              ;8281
0055d2  b200              SXTH     r0,r0                 ;8281
0055d4  80b0              STRH     r0,[r6,#4]            ;8281
0055d6  9008              STR      r0,[sp,#0x20]         ;8281
0055d8  481b              LDR      r0,|L1.22088|
0055da  4a1c              LDR      r2,|L1.22092|
0055dc  8800              LDRH     r0,[r0,#0]            ;8282  ; BAT_C_POINT_1_6
0055de  eb000040          ADD      r0,r0,r0,LSL #1       ;8282
0055e2  ea4f0040          LSL      r0,r0,#1              ;8282
0055e6  fa0ffb80          SXTH     r11,r0                ;8282
0055ea  4819              LDR      r0,|L1.22096|
0055ec  8800              LDRH     r0,[r0,#0]            ;8283  ; BAT_C_POINT_1_2
0055ee  ea4f0040          LSL      r0,r0,#1              ;8283
0055f2  b203              SXTH     r3,r0                 ;8283
0055f4  4817              LDR      r0,|L1.22100|
0055f6  f9b0c000          LDRSH    r12,[r0,#0]           ;8284  ; BAT_C_POINT_1
0055fa  4817              LDR      r0,|L1.22104|
0055fc  e02e              B        |L1.22108|
0055fe  0000              DCW      0x0000
                  |L1.22016|
                          DCD      bat_u_old_cnt
                  |L1.22020|
                          DCD      0x40024020
                  |L1.22024|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.22028|
                          DCD      BAT_C_REAL
                  |L1.22032|
                          DCD      BAT_C_NOM
                  |L1.22036|
                          DCD      0xffff7360
                  |L1.22040|
                          DCD      BAT_TYPE
                  |L1.22044|
                          DCD      lakb
                  |L1.22048|
                          DCD      t_ext
                  |L1.22052|
                          DCD      TBATSIGN
                  |L1.22056|
                          DCD      ND_EXT
                  |L1.22060|
                          DCD      TBATMAX
                  |L1.22064|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.22068|
                          DCD      ||area_number.19||+0x20
                  |L1.22072|
                          DCD      ||area_number.25||
                  |L1.22076|
                          DCD      0x000f4240
                  |L1.22080|
                          DCD      Ib_ips_termokompensat
                  |L1.22084|
                          DCD      IKB
                  |L1.22088|
                          DCD      BAT_C_POINT_1_6
                  |L1.22092|
                          DCD      ||.bss||+0x44c
                  |L1.22096|
                          DCD      BAT_C_POINT_1_2
                  |L1.22100|
                          DCD      BAT_C_POINT_1
                  |L1.22104|
                          DCD      BAT_C_POINT_3
                  |L1.22108|
00565c  f9b00000          LDRSH    r0,[r0,#0]            ;8285  ; BAT_C_POINT_3
005660  f04f0903          MOV      r9,#3                 ;8285
005664  fb90f0f9          SDIV     r0,r0,r9              ;8285
005668  b200              SXTH     r0,r0                 ;8285
00566a  9007              STR      r0,[sp,#0x1c]         ;8285
00566c  48ff              LDR      r0,|L1.23148|
00566e  f04f0905          MOV      r9,#5                 ;8286
005672  f9b00000          LDRSH    r0,[r0,#0]            ;8286  ; BAT_C_POINT_5
005676  fb90f0f9          SDIV     r0,r0,r9              ;8286
00567a  fa0ff980          SXTH     r9,r0                 ;8286
00567e  48fc              LDR      r0,|L1.23152|
005680  f9b0a000          LDRSH    r10,[r0,#0]           ;8287  ; BAT_C_POINT_10
005684  f04f000a          MOV      r0,#0xa               ;8287
005688  fb9af0f0          SDIV     r0,r10,r0             ;8287
00568c  fa0ffe80          SXTH     lr,r0                 ;8287
005690  48f8              LDR      r0,|L1.23156|
005692  f04f0a14          MOV      r10,#0x14             ;8288
005696  f9b00000          LDRSH    r0,[r0,#0]            ;8288  ; BAT_C_POINT_20
00569a  fb90f0fa          SDIV     r0,r0,r10             ;8288
00569e  fa0ffa80          SXTH     r10,r0                ;8288
0056a2  48f5              LDR      r0,|L1.23160|
0056a4  f9b00000          LDRSH    r0,[r0,#0]            ;8290  ; BAT_K_OLD
0056a8  fb0bfb00          MUL      r11,r11,r0            ;8290
0056ac  fb9bfbf5          SDIV     r11,r11,r5            ;8290
0056b0  e001              B        |L1.22198|
                  |L1.22194|
0056b2  e04e              B        |L1.22354|
                  |L1.22196|
0056b4  e082              B        |L1.22460|
                  |L1.22198|
0056b6  f8a2b000          STRH     r11,[r2,#0]           ;8290
0056ba  fb03f300          MUL      r3,r3,r0              ;8291
0056be  fb93f3f5          SDIV     r3,r3,r5              ;8291
0056c2  8053              STRH     r3,[r2,#2]            ;8291
0056c4  fb0cfc00          MUL      r12,r12,r0            ;8292
0056c8  fb9cf3f5          SDIV     r3,r12,r5             ;8292
0056cc  8093              STRH     r3,[r2,#4]            ;8292
0056ce  9b07              LDR      r3,[sp,#0x1c]         ;8293
0056d0  fb03f300          MUL      r3,r3,r0              ;8293
0056d4  fb93f3f5          SDIV     r3,r3,r5              ;8293
0056d8  80d3              STRH     r3,[r2,#6]            ;8293
0056da  fb09f900          MUL      r9,r9,r0              ;8294
0056de  fb99f3f5          SDIV     r3,r9,r5              ;8294
0056e2  8113              STRH     r3,[r2,#8]            ;8294
0056e4  fb0efe00          MUL      lr,lr,r0              ;8295
0056e8  fb9ef3f5          SDIV     r3,lr,r5              ;8295
0056ec  8153              STRH     r3,[r2,#0xa]          ;8295
0056ee  fb0afa00          MUL      r10,r10,r0            ;8296
0056f2  fb9af0f5          SDIV     r0,r10,r5             ;8296
0056f6  8190              STRH     r0,[r2,#0xc]          ;8296
0056f8  9808              LDR      r0,[sp,#0x20]         ;8298
0056fa  f04f030a          MOV      r3,#0xa               ;8298
0056fe  fb90f0f3          SDIV     r0,r0,r3              ;8298
005702  b203              SXTH     r3,r0                 ;8298
005704  f04f0000          MOV      r0,#0                 ;8299
                  |L1.22280|
005708  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8301
00570c  429d              CMP      r5,r3                 ;8301
00570e  dd04              BLE      |L1.22298|
005710  f1000001          ADD      r0,r0,#1              ;8299
005714  b2c0              UXTB     r0,r0                 ;8299
005716  2807              CMP      r0,#7                 ;8299
005718  d3f6              BCC      |L1.22280|
                  |L1.22298|
00571a  b358              CBZ      r0,|L1.22388|
00571c  1e45              SUBS     r5,r0,#1              ;8307
00571e  2d06              CMP      r5,#6                 ;8307
005720  d22b              BCS      |L1.22394|
005722  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8310
005726  ebac0303          SUB      r3,r12,r3             ;8310
00572a  b21b              SXTH     r3,r3                 ;8310
00572c  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8311
005730  ebac0202          SUB      r2,r12,r2             ;8311
005734  fa0ffc82          SXTH     r12,r2                ;8311
005738  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8312
00573c  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8312
005740  eba90200          SUB      r2,r9,r0              ;8312
005744  fb02f203          MUL      r2,r2,r3              ;8313
005748  fb92f2fc          SDIV     r2,r2,r12             ;8314
00574c  4410              ADD      r0,r0,r2              ;8315
00574e  64f0              STR      r0,[r6,#0x4c]         ;8315  ; bat_hndl_t_razr
005750  e017              B        |L1.22402|
                  |L1.22354|
005752  f44f70ef          MOV      r0,#0x1de             ;8268
005756  f7fffffe          BL       lc640_read_int
00575a  6570              STR      r0,[r6,#0x54]         ;8268  ; bat_hndl_zvu_Q
00575c  2865              CMP      r0,#0x65              ;8269
00575e  d300              BCC      |L1.22370|
005760  6575              STR      r5,[r6,#0x54]         ;8269  ; bat_hndl_zvu_Q
                  |L1.22370|
005762  6d70              LDR      r0,[r6,#0x54]         ;8270  ; bat_hndl_zvu_Q
005764  f2427110          MOV      r1,#0x2710            ;8270
005768  fb00f001          MUL      r0,r0,r1              ;8270
00576c  6570              STR      r0,[r6,#0x54]         ;8270  ; bat_hndl_zvu_Q
00576e  f8849009          STRB     r9,[r4,#9]            ;8272
005772  e066              B        |L1.22594|
                  |L1.22388|
005774  9800              LDR      r0,[sp,#0]            ;8306
005776  64f0              STR      r0,[r6,#0x4c]         ;8306  ; bat_hndl_t_razr
005778  e003              B        |L1.22402|
                  |L1.22394|
00577a  2807              CMP      r0,#7                 ;8317
00577c  d301              BCC      |L1.22402|
00577e  9806              LDR      r0,[sp,#0x18]         ;8319
005780  64f0              STR      r0,[r6,#0x4c]         ;8319  ; bat_hndl_t_razr
                  |L1.22402|
005782  6cf0              LDR      r0,[r6,#0x4c]  ; bat_hndl_t_razr
005784  fb98f0f0          SDIV     r0,r8,r0
005788  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_proc_razr
;;;8322   
;;;8323   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
00578a  4281              CMP      r1,r0
00578c  dd03              BLE      |L1.22422|
00578e  eba10000          SUB      r0,r1,r0
005792  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005794  e000              B        |L1.22424|
                  |L1.22422|
;;;8324   		else bat_hndl_zvu_Q=0L;
005796  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22424|
;;;8325   
;;;8326   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
005798  6df1              LDR      r1,[r6,#0x5c]  ; bat_hndl_remain_time
00579a  f44f6061          MOV      r0,#0xe10
00579e  fb91f0f0          SDIV     r0,r1,r0
0057a2  80f0              STRH     r0,[r6,#6]
;;;8327   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
0057a4  f04f003c          MOV      r0,#0x3c
0057a8  fb91f1f0          SDIV     r1,r1,r0
0057ac  b209              SXTH     r1,r1
0057ae  8131              STRH     r1,[r6,#8]
;;;8328   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
0057b0  fb91f2f0          SDIV     r2,r1,r0
0057b4  fb001012          MLS      r0,r0,r2,r1
0057b8  8170              STRH     r0,[r6,#0xa]
0057ba  e016              B        |L1.22506|
                  |L1.22460|
;;;8329   
;;;8330   		}
;;;8331   	else if(Ib_ips_termokompensat>IKB)
0057bc  4290              CMP      r0,r2
0057be  dd14              BLE      |L1.22506|
;;;8332   		{
;;;8333   		bat_hndl_i_vector=1;
0057c0  f884900b          STRB     r9,[r4,#0xb]
;;;8334   
;;;8335   		bat_hndl_i=Ib_ips_termokompensat;
0057c4  80b0              STRH     r0,[r6,#4]
;;;8336   		bat_hndl_i_summ+=(long)bat_hndl_i;
0057c6  6e72              LDR      r2,[r6,#0x64]  ; bat_hndl_i_summ
0057c8  4410              ADD      r0,r0,r2
0057ca  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8337   		if(bat_hndl_i_summ>=36000L)
0057cc  f64842a0          MOV      r2,#0x8ca0
0057d0  4290              CMP      r0,r2
0057d2  db0a              BLT      |L1.22506|
;;;8338   
;;;8339   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8340   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8341   			{
;;;8342   			bat_hndl_i_summ-=36000L;
0057d4  eba00002          SUB      r0,r0,r2
0057d8  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8343   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
0057da  4541              CMP      r1,r8
0057dc  da03              BGE      |L1.22502|
0057de  6930              LDR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
0057e0  4408              ADD      r0,r0,r1
0057e2  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0057e4  e001              B        |L1.22506|
                  |L1.22502|
;;;8344   			else bat_hndl_zvu_Q=1000000L; 
0057e6  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22506|
;;;8345   			}
;;;8346   		}
;;;8347   
;;;8348   
;;;8349   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
0057ea  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0057ec  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
0057ee  4288              CMP      r0,r1
0057f0  d00d              BEQ      |L1.22542|
;;;8350   		{
;;;8351   		if(bat_hndl_i_vector==1)
0057f2  2801              CMP      r0,#1
0057f4  d10b              BNE      |L1.22542|
;;;8352   			{
;;;8353   			signed short tempSS;
;;;8354   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0057f6  f44f70e4          MOV      r0,#0x1c8
0057fa  f7fffffe          BL       lc640_read_int
0057fe  b200              SXTH     r0,r0
;;;8355   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
005800  4a9e              LDR      r2,|L1.23164|
005802  6d71              LDR      r1,[r6,#0x54]  ; bat_hndl_zvu_Q
005804  4411              ADD      r1,r1,r2
005806  fb91f0f0          SDIV     r0,r1,r0
00580a  6130              STR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
;;;8356   			bat_hndl_i_summ=0;
00580c  6677              STR      r7,[r6,#0x64]  ; bat_hndl_i_summ
                  |L1.22542|
;;;8357   			}
;;;8358   		}
;;;8359   	bat_hndl_i_vector_old=bat_hndl_i_vector;
00580e  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005810  7320              STRB     r0,[r4,#0xc]
;;;8360   
;;;8361   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
005812  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005814  f2427a10          MOV      r10,#0x2710
005818  fb90f5fa          SDIV     r5,r0,r10
00581c  f44f79ef          MOV      r9,#0x1de
005820  4648              MOV      r0,r9
005822  f7fffffe          BL       lc640_read_int
005826  4285              CMP      r5,r0
005828  d006              BEQ      |L1.22584|
00582a  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
00582c  fb90f0fa          SDIV     r0,r0,r10
005830  b201              SXTH     r1,r0
005832  4648              MOV      r0,r9
005834  f7fffffe          BL       lc640_write_int
                  |L1.22584|
;;;8362   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
005838  e9d60115          LDRD     r0,r1,[r6,#0x54]
00583c  fb90f0f1          SDIV     r0,r0,r1
005840  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_remain_time
                  |L1.22594|
;;;8363   	}
;;;8364   
;;;8365   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
005842  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005844  4540              CMP      r0,r8
005846  dd02              BLE      |L1.22606|
005848  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
00584c  e002              B        |L1.22612|
                  |L1.22606|
;;;8366   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
00584e  2800              CMP      r0,#0
005850  da00              BGE      |L1.22612|
005852  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22612|
;;;8367   
;;;8368   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
005854  488a              LDR      r0,|L1.23168|
005856  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
00585a  200a              MOVS     r0,#0xa
00585c  fb91f0f0          SDIV     r0,r1,r0
005860  4988              LDR      r1,|L1.23172|
005862  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
005866  ebb00f41          CMP      r0,r1,LSL #1
00586a  da30              BGE      |L1.22734|
00586c  4249              RSBS     r1,r1,#0
00586e  ebb00f41          CMP      r0,r1,LSL #1
005872  dd2c              BLE      |L1.22734|
005874  4884              LDR      r0,|L1.23176|
005876  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
00587a  07c0              LSLS     r0,r0,#31
00587c  d127              BNE      |L1.22734|
00587e  4883              LDR      r0,|L1.23180|
005880  4983              LDR      r1,|L1.23184|
005882  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
005886  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
00588a  4288              CMP      r0,r1
00588c  dc1f              BGT      |L1.22734|
00588e  4981              LDR      r1,|L1.23188|
005890  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
005894  4288              CMP      r0,r1
005896  dd1a              BLE      |L1.22734|
005898  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
00589c  280a              CMP      r0,#0xa
00589e  db16              BLT      |L1.22734|
0058a0  28c8              CMP      r0,#0xc8
0058a2  dc14              BGT      |L1.22734|
;;;8369   	{
;;;8370   	if(bat_hndl_zvu_Q_cnt<60)
0058a4  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
0058a8  283c              CMP      r0,#0x3c
0058aa  d20d              BCS      |L1.22728|
;;;8371   		{
;;;8372   		bat_hndl_zvu_Q_cnt++;
0058ac  f1000001          ADD      r0,r0,#1
0058b0  b2c0              UXTB     r0,r0
0058b2  f8840030          STRB     r0,[r4,#0x30]
;;;8373   		if(bat_hndl_zvu_Q_cnt>=60)
0058b6  283c              CMP      r0,#0x3c
0058b8  d306              BCC      |L1.22728|
;;;8374   			{
;;;8375   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
0058ba  2164              MOVS     r1,#0x64
0058bc  f44f70ef          MOV      r0,#0x1de
0058c0  f7fffffe          BL       lc640_write_int
;;;8376   			bat_hndl_zvu_Q=1000000L;
0058c4  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22728|
;;;8377   
;;;8378   
;;;8379   			}
;;;8380   		}
;;;8381   	}
;;;8382   else 
;;;8383   	{
;;;8384   	bat_hndl_zvu_Q_cnt=0;
;;;8385   	}
;;;8386   
;;;8387   
;;;8388   
;;;8389   };
0058c8  b009              ADD      sp,sp,#0x24
0058ca  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.22734|
0058ce  f8847030          STRB     r7,[r4,#0x30]         ;8384
0058d2  e7f9              B        |L1.22728|
;;;8390   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8394   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8395   void u_avt_set_hndl(void)
0058d4  e92d5fff          PUSH     {r0-r12,lr}
;;;8396   {
;;;8397   if(uavt_set_stat==uassSTEP1)
0058d8  4d6f              LDR      r5,|L1.23192|
;;;8398   	{
;;;8399   	char i,find_succes;
;;;8400   
;;;8401   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8402   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8403   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8404   		{
;;;8405   		uavt_set_error_cnt=60;
0058da  4e70              LDR      r6,|L1.23196|
0058dc  f8df81c0          LDR      r8,|L1.23200|
0058e0  7828              LDRB     r0,[r5,#0]            ;8397  ; uavt_set_stat
;;;8406   		}
;;;8407   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8408   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8409   	find_succes=0;
;;;8410   /*	for(i=0;i<NUMIST;i++)
;;;8411   		{
;;;8412   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8413   		else
;;;8414   			{
;;;8415   			find_succes=0;
;;;8416   			break;
;;;8417   			}
;;;8418   		}*/
;;;8419   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
0058e2  f8dfa1c0          LDR      r10,|L1.23204|
0058e6  2400              MOVS     r4,#0                 ;8408
;;;8420   
;;;8421   	if(find_succes==1)
;;;8422   		{
;;;8423   		uavt_set_stat=uassSTEP2;
0058e8  f04f0902          MOV      r9,#2
;;;8424   		}
;;;8425   	if(uavt_set_error_cnt)
;;;8426   		{
;;;8427   		uavt_set_error_cnt--;
;;;8428   		if(!uavt_set_error_cnt)
;;;8429   			{
;;;8430   			uavt_set_stat=uassOFF;
;;;8431   			uavt_set_result_stat=uasrsERR;
;;;8432   			avt_error_bps=100;
0058ec  f04f0b64          MOV      r11,#0x64
0058f0  2801              CMP      r0,#1                 ;8397
0058f2  d12e              BNE      |L1.22866|
0058f4  f8980000          LDRB     r0,[r8,#0]            ;8403  ; uavt_set_stat_old
0058f8  2801              CMP      r0,#1                 ;8403
0058fa  d002              BEQ      |L1.22786|
0058fc  f04f003c          MOV      r0,#0x3c              ;8405
005900  7030              STRB     r0,[r6,#0]            ;8405
                  |L1.22786|
005902  230a              MOVS     r3,#0xa               ;8408
005904  2200              MOVS     r2,#0                 ;8408
005906  21e6              MOVS     r1,#0xe6              ;8408
005908  20e1              MOVS     r0,#0xe1              ;8408
00590a  f7fffffe          BL       mess_send
00590e  f04f0000          MOV      r0,#0                 ;8409
005912  4965              LDR      r1,|L1.23208|
005914  f9b12000          LDRSH    r2,[r1,#0]            ;8419  ; bps_U
005918  f9ba1000          LDRSH    r1,[r10,#0]           ;8419  ; U_AVT
00591c  f1a10301          SUB      r3,r1,#1              ;8419
005920  429a              CMP      r2,r3                 ;8419
005922  db04              BLT      |L1.22830|
005924  1c49              ADDS     r1,r1,#1              ;8419
005926  428a              CMP      r2,r1                 ;8419
005928  dc01              BGT      |L1.22830|
00592a  f04f0001          MOV      r0,#1                 ;8419
                  |L1.22830|
00592e  2801              CMP      r0,#1                 ;8421
005930  d101              BNE      |L1.22838|
005932  f8859000          STRB     r9,[r5,#0]            ;8423
                  |L1.22838|
005936  7830              LDRB     r0,[r6,#0]            ;8425  ; uavt_set_error_cnt
005938  b158              CBZ      r0,|L1.22866|
00593a  f1a00001          SUB      r0,r0,#1              ;8427
00593e  b2c0              UXTB     r0,r0                 ;8427
005940  7030              STRB     r0,[r6,#0]            ;8427
005942  b930              CBNZ     r0,|L1.22866|
005944  702c              STRB     r4,[r5,#0]            ;8430
005946  4859              LDR      r0,|L1.23212|
005948  f8809000          STRB     r9,[r0,#0]            ;8431
00594c  4858              LDR      r0,|L1.23216|
00594e  f880b000          STRB     r11,[r0,#0]
                  |L1.22866|
;;;8433   			}
;;;8434   		}
;;;8435   	}
;;;8436   if(uavt_set_stat==uassSTEP2)
005952  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8437   	{
;;;8438   	char i,find_succes;
;;;8439   
;;;8440   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005954  4957              LDR      r1,|L1.23220|
;;;8441   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005956  4858              LDR      r0,|L1.23224|
;;;8442   
;;;8443   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8444   		{
;;;8445   		uavt_set_error_cnt=60;
;;;8446   		}
;;;8447   
;;;8448   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8449   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8450   	find_succes=1;
;;;8451   
;;;8452   	for(i=0;i<NUMIST;i++)
;;;8453   		{
;;;8454   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8455   		else
;;;8456   			{
;;;8457   			find_succes=0;
;;;8458   			avt_error_bps=i+1;
;;;8459   			break;
;;;8460   			}
;;;8461   		}
;;;8462   
;;;8463   	if(find_succes==1)
;;;8464   		{
;;;8465   		uavt_set_stat=uassSTEP3;
;;;8466   		uavt_bps_pntr=0;
005958  4f58              LDR      r7,|L1.23228|
00595a  2a02              CMP      r2,#2                 ;8436
00595c  d002              BEQ      |L1.22884|
;;;8467   		avt_plazma=0;
;;;8468   		}
;;;8469   
;;;8470   	if(uavt_set_error_cnt)
;;;8471   		{
;;;8472   		uavt_set_error_cnt--;
;;;8473   		if(!uavt_set_error_cnt)
;;;8474   			{
;;;8475   			uavt_set_stat=uassOFF;
;;;8476   			uavt_set_result_stat=uasrsERR;
;;;8477   			}
;;;8478   		}
;;;8479   	}
;;;8480   else if(uavt_set_stat==uassSTEP3)
00595e  2a03              CMP      r2,#3
005960  d05e              BEQ      |L1.23072|
005962  e0fb              B        |L1.23388|
                  |L1.22884|
005964  f9ba2000          LDRSH    r2,[r10,#0]           ;8440  ; U_AVT
005968  f04f0365          MOV      r3,#0x65              ;8440
00596c  fb02f303          MUL      r3,r2,r3              ;8440
005970  fbb3f3fb          UDIV     r3,r3,r11             ;8440
005974  468a              MOV      r10,r1                ;8440
005976  800b              STRH     r3,[r1,#0]            ;8440
005978  eb021142          ADD      r1,r2,r2,LSL #5       ;8441
00597c  eb010141          ADD      r1,r1,r1,LSL #1       ;8441
005980  fbb1f1fb          UDIV     r1,r1,r11             ;8441
005984  4683              MOV      r11,r0                ;8441
005986  8001              STRH     r1,[r0,#0]            ;8441
005988  f8980000          LDRB     r0,[r8,#0]            ;8443  ; uavt_set_stat_old
00598c  2802              CMP      r0,#2                 ;8443
00598e  d002              BEQ      |L1.22934|
005990  f04f003c          MOV      r0,#0x3c              ;8445
005994  7030              STRB     r0,[r6,#0]            ;8445
                  |L1.22934|
005996  230a              MOVS     r3,#0xa               ;8448
005998  21bf              MOVS     r1,#0xbf              ;8448
00599a  20be              MOVS     r0,#0xbe              ;8448
00599c  f7fffffe          BL       mess_send
0059a0  230a              MOVS     r3,#0xa               ;8449
0059a2  2200              MOVS     r2,#0                 ;8449
0059a4  21e6              MOVS     r1,#0xe6              ;8449
0059a6  20e1              MOVS     r0,#0xe1              ;8449
0059a8  f7fffffe          BL       mess_send
0059ac  f04f0201          MOV      r2,#1                 ;8450
0059b0  f04f0000          MOV      r0,#0                 ;8452
0059b4  4943              LDR      r1,|L1.23236|
0059b6  f9ba3000          LDRSH    r3,[r10,#0]           ;8452
0059ba  f8dfe104          LDR      lr,|L1.23232|
0059be  f9bbc000          LDRSH    r12,[r11,#0]          ;8454
0059c2  f9b1a000          LDRSH    r10,[r1,#0]           ;8452
0059c6  e00d              B        |L1.23012|
                  |L1.22984|
0059c8  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8454
0059cc  eb011100          ADD      r1,r1,r0,LSL #4       ;8454
0059d0  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8454
0059d4  69c9              LDR      r1,[r1,#0x1c]         ;8454
0059d6  4299              CMP      r1,r3                 ;8454
0059d8  da09              BGE      |L1.23022|
0059da  4561              CMP      r1,r12                ;8454
0059dc  dd07              BLE      |L1.23022|
0059de  f1000001          ADD      r0,r0,#1              ;8452
0059e2  b2c0              UXTB     r0,r0                 ;8452
                  |L1.23012|
0059e4  4550              CMP      r0,r10                ;8452
0059e6  dbef              BLT      |L1.22984|
                  |L1.23016|
0059e8  2a01              CMP      r2,#1                 ;8463
0059ea  d007              BEQ      |L1.23036|
0059ec  e00c              B        |L1.23048|
                  |L1.23022|
0059ee  f04f0200          MOV      r2,#0                 ;8457
0059f2  492f              LDR      r1,|L1.23216|
0059f4  f1000001          ADD      r0,r0,#1              ;8458
0059f8  7008              STRB     r0,[r1,#0]            ;8458
0059fa  e7f5              B        |L1.23016|
                  |L1.23036|
0059fc  f04f0003          MOV      r0,#3                 ;8465
005a00  7028              STRB     r0,[r5,#0]            ;8465
005a02  703c              STRB     r4,[r7,#0]            ;8466
005a04  4830              LDR      r0,|L1.23240|
005a06  7004              STRB     r4,[r0,#0]            ;8467
                  |L1.23048|
005a08  7830              LDRB     r0,[r6,#0]            ;8470  ; uavt_set_error_cnt
005a0a  b370              CBZ      r0,|L1.23146|
005a0c  f1a00001          SUB      r0,r0,#1              ;8472
005a10  b2c0              UXTB     r0,r0                 ;8472
005a12  7030              STRB     r0,[r6,#0]            ;8472
005a14  bb48              CBNZ     r0,|L1.23146|
005a16  702c              STRB     r4,[r5,#0]            ;8475
005a18  4824              LDR      r0,|L1.23212|
005a1a  f8809000          STRB     r9,[r0,#0]            ;8476
005a1e  e09d              B        |L1.23388|
                  |L1.23072|
;;;8481   	{
;;;8482   	char i,find_succes;
;;;8483   
;;;8484   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005a20  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005a24  f04f0365          MOV      r3,#0x65
005a28  fb02f303          MUL      r3,r2,r3
005a2c  fbb3f3fb          UDIV     r3,r3,r11
005a30  468a              MOV      r10,r1
005a32  800b              STRH     r3,[r1,#0]
;;;8485   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005a34  eb021142          ADD      r1,r2,r2,LSL #5
005a38  eb010141          ADD      r1,r1,r1,LSL #1
005a3c  fbb1f1fb          UDIV     r1,r1,r11
005a40  4683              MOV      r11,r0
005a42  8001              STRH     r1,[r0,#0]
;;;8486   	
;;;8487   	if(uavt_set_stat_old!=uavt_set_stat)
005a44  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005a48  2803              CMP      r0,#3
005a4a  d000              BEQ      |L1.23118|
;;;8488   		{
;;;8489   		uavt_bps_pntr=0;
005a4c  703c              STRB     r4,[r7,#0]
                  |L1.23118|
;;;8490   		}
;;;8491   
;;;8492   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005a4e  230a              MOVS     r3,#0xa
005a50  21bf              MOVS     r1,#0xbf
005a52  20be              MOVS     r0,#0xbe
005a54  f7fffffe          BL       mess_send
;;;8493   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005a58  230a              MOVS     r3,#0xa
005a5a  2200              MOVS     r2,#0
005a5c  21e6              MOVS     r1,#0xe6
005a5e  20e1              MOVS     r0,#0xe1
005a60  f7fffffe          BL       mess_send
;;;8494   
;;;8495   	find_succes=1;
005a64  f04f0601          MOV      r6,#1
;;;8496   	for(i=0;i<NUMIST;i++)
005a68  e030              B        |L1.23244|
                  |L1.23146|
005a6a  e077              B        |L1.23388|
                  |L1.23148|
                          DCD      BAT_C_POINT_5
                  |L1.23152|
                          DCD      BAT_C_POINT_10
                  |L1.23156|
                          DCD      BAT_C_POINT_20
                  |L1.23160|
                          DCD      BAT_K_OLD
                  |L1.23164|
                          DCD      0xfff0bdc0
                  |L1.23168|
                          DCD      Ib_ips_termokompensat
                  |L1.23172|
                          DCD      IKB
                  |L1.23176|
                          DCD      bat
                  |L1.23180|
                          DCD      out_U
                  |L1.23184|
                          DCD      u_necc_up
                  |L1.23188|
                          DCD      u_necc_dn
                  |L1.23192|
                          DCD      uavt_set_stat
                  |L1.23196|
                          DCD      uavt_set_error_cnt
                  |L1.23200|
                          DCD      uavt_set_stat_old
                  |L1.23204|
                          DCD      U_AVT
                  |L1.23208|
                          DCD      bps_U
                  |L1.23212|
                          DCD      uavt_set_result_stat
                  |L1.23216|
                          DCD      avt_error_bps
                  |L1.23220|
                          DCD      u_max_temp
                  |L1.23224|
                          DCD      u_min_temp
                  |L1.23228|
                          DCD      uavt_bps_pntr
                  |L1.23232|
                          DCD      bps
                  |L1.23236|
                          DCD      NUMIST
                  |L1.23240|
                          DCD      avt_plazma
                  |L1.23244|
005acc  f04f0000          MOV      r0,#0
005ad0  f8df942c          LDR      r9,|L1.24320|
005ad4  f9ba2000          LDRSH    r2,[r10,#0]
005ad8  f8dfc420          LDR      r12,|L1.24316|
005adc  f9bb3000          LDRSH    r3,[r11,#0]           ;8454
005ae0  f9b9a000          LDRSH    r10,[r9,#0]           ;8452
005ae4  e00d              B        |L1.23298|
                  |L1.23270|
;;;8497   		{
;;;8498   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005ae6  eb0001c0          ADD      r1,r0,r0,LSL #3
005aea  eb011100          ADD      r1,r1,r0,LSL #4
005aee  eb0c0181          ADD      r1,r12,r1,LSL #2
005af2  69c9              LDR      r1,[r1,#0x1c]
005af4  4291              CMP      r1,r2
005af6  da0f              BGE      |L1.23320|
005af8  4299              CMP      r1,r3
005afa  dd0d              BLE      |L1.23320|
005afc  f1000001          ADD      r0,r0,#1              ;8496
005b00  b2c0              UXTB     r0,r0                 ;8496
                  |L1.23298|
005b02  4550              CMP      r0,r10                ;8496
005b04  dbef              BLT      |L1.23270|
                  |L1.23302|
;;;8499   		else
;;;8500   			{
;;;8501   			find_succes=0;
;;;8502   			break;
;;;8503   			}
;;;8504   		}
;;;8505   
;;;8506   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005b06  20d7              MOVS     r0,#0xd7
005b08  f7fffffe          BL       mess_find
005b0c  b1a0              CBZ      r0,|L1.23352|
005b0e  48fd              LDR      r0,|L1.24324|
005b10  6800              LDR      r0,[r0,#0]  ; mess_data
005b12  28d9              CMP      r0,#0xd9
005b14  d003              BEQ      |L1.23326|
005b16  e00f              B        |L1.23352|
                  |L1.23320|
005b18  f04f0600          MOV      r6,#0                 ;8501
005b1c  e7f3              B        |L1.23302|
                  |L1.23326|
;;;8507   		{
;;;8508   		if(++uavt_bps_pntr>=NUMIST)
005b1e  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005b20  1c40              ADDS     r0,r0,#1
005b22  b2c0              UXTB     r0,r0
005b24  7038              STRB     r0,[r7,#0]
005b26  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005b2a  4288              CMP      r0,r1
005b2c  db04              BLT      |L1.23352|
;;;8509   			{
;;;8510   			uavt_set_stat=uassOFF;
005b2e  702c              STRB     r4,[r5,#0]
;;;8511   			uavt_set_result_stat=uasrsSUCCESS;
005b30  49f5              LDR      r1,|L1.24328|
005b32  f04f0003          MOV      r0,#3
005b36  7008              STRB     r0,[r1,#0]
                  |L1.23352|
;;;8512   			}
;;;8513   		//uavt_bps_pntr++;
;;;8514   		//if()
;;;8515   		}
;;;8516   	if(find_succes==1)
005b38  2e01              CMP      r6,#1
005b3a  d10f              BNE      |L1.23388|
;;;8517   		{
;;;8518   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005b3c  20ee              MOVS     r0,#0xee
005b3e  e9cd0400          STRD     r0,r4,[sp,#0]
005b42  9402              STR      r4,[sp,#8]
005b44  9403              STR      r4,[sp,#0xc]
005b46  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
005b48  4603              MOV      r3,r0
005b4a  2216              MOVS     r2,#0x16
005b4c  4608              MOV      r0,r1
005b4e  f7fffffe          BL       mcp2515_transmit
;;;8519   		avt_plazma++;
005b52  48ee              LDR      r0,|L1.24332|
005b54  7801              LDRB     r1,[r0,#0]  ; avt_plazma
005b56  f1010101          ADD      r1,r1,#1
005b5a  7001              STRB     r1,[r0,#0]
                  |L1.23388|
;;;8520   		}
;;;8521   	}
;;;8522   
;;;8523   
;;;8524   
;;;8525   uavt_set_stat_old=uavt_set_stat;
005b5c  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005b5e  f8880000          STRB     r0,[r8,#0]
;;;8526   
;;;8527   }
005b62  e8bd9fff          POP      {r0-r12,pc}
;;;8528   
                          ENDP

                  u_necc_hndl PROC
;;;8603   //-----------------------------------------------
;;;8604   void u_necc_hndl(void)
005b66  b5f8              PUSH     {r3-r7,lr}
;;;8605   {
;;;8606   signed long temp_L;
;;;8607   signed long temp_SL;
;;;8608   //signed short temp_SS;
;;;8609   
;;;8610   //char i;
;;;8611   
;;;8612   //temp_SS=0;
;;;8613   signed short t[2];
;;;8614   
;;;8615   
;;;8616   
;;;8617   
;;;8618   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8619   
;;;8620   if(!TERMOKOMPENS)
005b68  48e9              LDR      r0,|L1.24336|
;;;8621   	{
;;;8622   	//u_necc=U0B;
;;;8623   	u_necc=UB20;
;;;8624   	}
;;;8625   else
;;;8626   	{
;;;8627   	if(ND_EXT[0])t[0]=20;
;;;8628   	else t[0]=t_ext[0];
;;;8629   
;;;8630   	mat_temper=t[0];
;;;8631   			
;;;8632   	if(mat_temper<0)temp_SL=UB0; 
;;;8633   	else 
;;;8634   		{
;;;8635   		if(mat_temper>40)mat_temper=40; 
;;;8636   		temp_SL=(UB20-UB0)*10;
;;;8637   		temp_SL*=mat_temper;
;;;8638   		temp_SL/=200;
;;;8639   		temp_SL+=UB0;
;;;8640   		}
;;;8641   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005b6a  4dec              LDR      r5,|L1.24348|
005b6c  4cec              LDR      r4,|L1.24352|
005b6e  8801              LDRH     r1,[r0,#0]            ;8620  ; TERMOKOMPENS
005b70  48e8              LDR      r0,|L1.24340|
005b72  f9b03000          LDRSH    r3,[r0,#0]            ;8623
;;;8642   		{
;;;8643   		temp_SL=UVZ;
005b76  48e8              LDR      r0,|L1.24344|
005b78  f9b02000          LDRSH    r2,[r0,#0]
005b7c  b139              CBZ      r1,|L1.23438|
005b7e  48e9              LDR      r0,|L1.24356|
005b80  7800              LDRB     r0,[r0,#0]            ;8627  ; ND_EXT
005b82  b130              CBZ      r0,|L1.23442|
005b84  f04f0014          MOV      r0,#0x14              ;8627
005b88  f8ad0000          STRH     r0,[sp,#0]            ;8627
005b8c  e005              B        |L1.23450|
                  |L1.23438|
005b8e  8023              STRH     r3,[r4,#0]            ;8623
005b90  e02c              B        |L1.23532|
                  |L1.23442|
005b92  48e5              LDR      r0,|L1.24360|
005b94  8800              LDRH     r0,[r0,#0]            ;8628  ; t_ext
005b96  f8ad0000          STRH     r0,[sp,#0]            ;8628
                  |L1.23450|
005b9a  4ee4              LDR      r6,|L1.24364|
005b9c  f9bd1000          LDRSH    r1,[sp,#0]            ;8630
005ba0  6031              STR      r1,[r6,#0]            ;8630  ; mat_temper
005ba2  48e3              LDR      r0,|L1.24368|
005ba4  2900              CMP      r1,#0                 ;8632
005ba6  f9b00000          LDRSH    r0,[r0,#0]            ;8632
005baa  db12              BLT      |L1.23506|
005bac  2928              CMP      r1,#0x28              ;8635
005bae  dd02              BLE      |L1.23478|
005bb0  f04f0128          MOV      r1,#0x28              ;8635
005bb4  6031              STR      r1,[r6,#0]            ;8635  ; mat_temper
                  |L1.23478|
005bb6  eba30100          SUB      r1,r3,r0              ;8636
005bba  eb010181          ADD      r1,r1,r1,LSL #2       ;8636
005bbe  ea4f0141          LSL      r1,r1,#1              ;8636
005bc2  6833              LDR      r3,[r6,#0]            ;8637  ; mat_temper
005bc4  fb01f103          MUL      r1,r1,r3              ;8637
005bc8  f04f03c8          MOV      r3,#0xc8              ;8638
005bcc  fb91f1f3          SDIV     r1,r1,r3              ;8638
005bd0  4408              ADD      r0,r0,r1              ;8639
                  |L1.23506|
005bd2  f8951023          LDRB     r1,[r5,#0x23]         ;8641  ; spc_stat
005bd6  2902              CMP      r1,#2                 ;8641
005bd8  d107              BNE      |L1.23530|
005bda  49d6              LDR      r1,|L1.24372|
005bdc  7809              LDRB     r1,[r1,#0]            ;8641  ; sk_stat
005bde  2901              CMP      r1,#1                 ;8641
005be0  d002              BEQ      |L1.23528|
005be2  49d5              LDR      r1,|L1.24376|
005be4  8809              LDRH     r1,[r1,#0]            ;8641  ; VZ_CH_VENT_BLOK
005be6  b901              CBNZ     r1,|L1.23530|
                  |L1.23528|
005be8  4610              MOV      r0,r2
                  |L1.23530|
;;;8644   		}
;;;8645   	u_necc=(unsigned int)temp_SL;
005bea  8020              STRH     r0,[r4,#0]
                  |L1.23532|
;;;8646   	///u_necc=3456;
;;;8647   	}  
;;;8648   
;;;8649   //u_necc=2355;
;;;8650   
;;;8651   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005bec  48d3              LDR      r0,|L1.24380|
005bee  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005bf0  b918              CBNZ     r0,|L1.23546|
005bf2  48d3              LDR      r0,|L1.24384|
005bf4  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005bf6  2802              CMP      r0,#2
005bf8  d102              BNE      |L1.23552|
                  |L1.23546|
;;;8652   	{
;;;8653   	u_necc=speedChrgVolt;
005bfa  48d2              LDR      r0,|L1.24388|
005bfc  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005bfe  8020              STRH     r0,[r4,#0]
                  |L1.23552|
;;;8654   	}
;;;8655   if(hv_vz_stat==hvsWRK)
005c00  48d1              LDR      r0,|L1.24392|
005c02  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005c04  2805              CMP      r0,#5
005c06  d100              BNE      |L1.23562|
;;;8656   	{
;;;8657   	u_necc=UVZ;
005c08  8022              STRH     r2,[r4,#0]
                  |L1.23562|
;;;8658   	}
;;;8659   if(vz1_stat==vz1sWRK)
005c0a  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005c0c  280a              CMP      r0,#0xa
005c0e  d102              BNE      |L1.23574|
;;;8660   	{
;;;8661   	u_necc=UZ_U;
005c10  48ce              LDR      r0,|L1.24396|
005c12  8800              LDRH     r0,[r0,#0]  ; UZ_U
005c14  8020              STRH     r0,[r4,#0]
                  |L1.23574|
;;;8662   	}
;;;8663   if(vz2_stat==vz2sWRK1)
005c16  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005c18  280a              CMP      r0,#0xa
005c1a  d102              BNE      |L1.23586|
;;;8664   	{
;;;8665   	u_necc=FZ_U1;
005c1c  49cc              LDR      r1,|L1.24400|
005c1e  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005c20  8021              STRH     r1,[r4,#0]
                  |L1.23586|
;;;8666   	}
;;;8667   if(vz2_stat==vz2sWRK2)
005c22  280b              CMP      r0,#0xb
005c24  d102              BNE      |L1.23596|
;;;8668   	{
;;;8669   	u_necc=FZ_U2;
005c26  48cb              LDR      r0,|L1.24404|
005c28  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005c2a  8020              STRH     r0,[r4,#0]
                  |L1.23596|
;;;8670   	}
;;;8671   
;;;8672   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005c2c  48ca              LDR      r0,|L1.24408|
005c2e  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005c30  2801              CMP      r0,#1
005c32  d001              BEQ      |L1.23608|
005c34  2802              CMP      r0,#2
005c36  d102              BNE      |L1.23614|
                  |L1.23608|
;;;8673   	{
;;;8674   	u_necc=U_AVT;
005c38  48c8              LDR      r0,|L1.24412|
005c3a  8800              LDRH     r0,[r0,#0]  ; U_AVT
005c3c  8020              STRH     r0,[r4,#0]
                  |L1.23614|
;;;8675   	}
;;;8676   
;;;8677   if(mess_find_unvol(MESS2UNECC_HNDL))
005c3e  20be              MOVS     r0,#0xbe
005c40  f7fffffe          BL       mess_find_unvol
005c44  b128              CBZ      r0,|L1.23634|
;;;8678   	{		
;;;8679   	if(mess_data[0]==PARAM_UNECC_SET)
005c46  48af              LDR      r0,|L1.24324|
005c48  6801              LDR      r1,[r0,#0]  ; mess_data
005c4a  29bf              CMP      r1,#0xbf
005c4c  d101              BNE      |L1.23634|
;;;8680   		{
;;;8681   		u_necc=mess_data[1];
005c4e  6840              LDR      r0,[r0,#4]  ; mess_data
005c50  8020              STRH     r0,[r4,#0]
                  |L1.23634|
;;;8682   		}		
;;;8683   	} 
;;;8684   
;;;8685   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8686   #endif
;;;8687   
;;;8688   
;;;8689   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8690   
;;;8691   #ifndef UKU_TELECORE2015
;;;8692   #ifndef UKU_TELECORE2017
;;;8693   if(unh_cnt0<10)
;;;8694   	{
;;;8695   	unh_cnt0++;
;;;8696   	if(unh_cnt0>=10)
;;;8697   		{
;;;8698   		unh_cnt0=0;
;;;8699   		b1Hz_unh=1;
;;;8700   		}
;;;8701   	}
;;;8702   
;;;8703   if(unh_cnt1<5)
;;;8704   	{
;;;8705   	unh_cnt1++;
;;;8706   	if(unh_cnt1==5)
;;;8707   		{
;;;8708   		unh_cnt1=0;
;;;8709   //		b2Hz_unh=1;
;;;8710   		}
;;;8711   	} 
;;;8712   
;;;8713   
;;;8714   
;;;8715   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8716   	{		
;;;8717   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8718   		{
;;;8719   		u_necc=mess_data[1];
;;;8720   		}		
;;;8721   	}
;;;8722   
;;;8723   
;;;8724   else if(b1Hz_unh)
;;;8725   	{
;;;8726   	
;;;8727   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8728   		{
;;;8729   		
;;;8730   		u_necc=U0B;
;;;8731   		#ifdef IPS_SGEP_GAZPROM
;;;8732   		u_necc=UB0;
;;;8733   		#endif
;;;8734   		}
;;;8735   	else 
;;;8736   		{
;;;8737   		if(BAT_TYPE==0) //если батарея обычная
;;;8738   			{
;;;8739   			for(i=0;i<2;i++)
;;;8740   				{
;;;8741   				if(BAT_IS_ON[i]==bisON)
;;;8742   					{
;;;8743   					if(bat[i]._nd)t[i]=20;
;;;8744   					else t[i]=bat[i]._Tb;
;;;8745   					}
;;;8746   				else
;;;8747   					{
;;;8748   					t[i]=-20;
;;;8749   					}
;;;8750   				}
;;;8751   			if(t[0]>t[1])mat_temper=t[0];
;;;8752   			else mat_temper=t[1];
;;;8753   			
;;;8754   		
;;;8755   			if(mat_temper<0)temp_SL=UB0; 
;;;8756   			else 
;;;8757   				{
;;;8758   				if(mat_temper>40)mat_temper=40; 
;;;8759   				temp_SL=(UB20-UB0)*10;
;;;8760   				temp_SL*=mat_temper;
;;;8761   				temp_SL/=200;
;;;8762   				temp_SL+=UB0;
;;;8763   				}
;;;8764   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8765   				{
;;;8766   				temp_SL=UVZ;
;;;8767   				}
;;;8768   			u_necc=(unsigned int)temp_SL;
;;;8769   			}
;;;8770   		else if(BAT_TYPE==1) //если батарея китайская
;;;8771   			{
;;;8772   			u_necc=U0B;
;;;8773   					
;;;8774   			u_necc=bat[0]._Ub+10;
;;;8775   
;;;8776   			
;;;8777   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8778   				{
;;;8779   				u_necc=UVZ;
;;;8780   				}
;;;8781   			if(u_necc>=UB0) u_necc=UB0;
;;;8782   			if(u_necc>=UB20) u_necc=UB20;
;;;8783   			}
;;;8784   		}  
;;;8785   	}
;;;8786   #endif
;;;8787   #endif
;;;8788   
;;;8789   #ifdef UKU_TELECORE2015
;;;8790   
;;;8791   if(unh_cnt0<10)
;;;8792   	{
;;;8793   	unh_cnt0++;
;;;8794   	if(unh_cnt0>=10)
;;;8795   		{
;;;8796   		unh_cnt0=0;
;;;8797   		b1Hz_unh=1;
;;;8798   		}
;;;8799   	}
;;;8800   
;;;8801   if(unh_cnt1<5)
;;;8802   	{
;;;8803   	unh_cnt1++;
;;;8804   	if(unh_cnt1==5)
;;;8805   		{
;;;8806   		unh_cnt1=0;
;;;8807   //		b2Hz_unh=1;
;;;8808   		}
;;;8809   	} 
;;;8810   
;;;8811   
;;;8812   
;;;8813   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8814   	{		
;;;8815   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8816   		{
;;;8817   		u_necc=mess_data[1];
;;;8818   		}		
;;;8819   	}
;;;8820   
;;;8821   
;;;8822   else if(b1Hz_unh)
;;;8823   	{
;;;8824   	b1Hz_unh=0;
;;;8825   
;;;8826   	if(BAT_TYPE==0)
;;;8827   		{
;;;8828   		if(bat[0]._nd)mat_temper=20;
;;;8829   		else mat_temper=bat[0]._Tb;
;;;8830   
;;;8831   			
;;;8832   		if(mat_temper<0)temp_SL=UB0; 
;;;8833   		else 
;;;8834   			{
;;;8835   			if(mat_temper>40)mat_temper=40; 
;;;8836   			temp_SL=(UB20-UB0)*10;
;;;8837   			temp_SL*=mat_temper;
;;;8838   			temp_SL/=200;
;;;8839   			temp_SL+=UB0;
;;;8840   			}
;;;8841   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8842   			{
;;;8843   			temp_SL=UVZ;
;;;8844   			}
;;;8845   		u_necc=(unsigned int)temp_SL;
;;;8846   	///u_necc=3456;
;;;8847   		}
;;;8848   	else if(BAT_TYPE==1)
;;;8849   		{
;;;8850   		
;;;8851   		gran(&DU_LI_BAT,1,30);
;;;8852   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8853   		gran(&u_necc,0,UB0);
;;;8854   		gran(&u_necc,0,UB20);
;;;8855   		gran(&u_necc,0,540);		
;;;8856   
;;;8857   
;;;8858   		if(li_bat._batStat!=bsOK)
;;;8859   			{
;;;8860   			u_necc=U0B;
;;;8861   			}
;;;8862   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8863   			{
;;;8864   			u_necc=UVZ;
;;;8865   			}
;;;8866   		/* 
;;;8867   		u_necc=U0B;
;;;8868   		
;;;8869   
;;;8870   	
;;;8871   		u_necc=UB0;
;;;8872   		u_necc=li_bat._Ub+10;
;;;8873   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8874   			{
;;;8875   			lakb_error_cnt++;
;;;8876   			if(lakb_error_cnt>=30)
;;;8877   				{
;;;8878   				lakb_error_cnt=30;
;;;8879   				u_necc=U0B;
;;;8880   				}
;;;8881   			}
;;;8882   		else lakb_error_cnt=0;*/
;;;8883   		}
;;;8884   	else if(BAT_TYPE==2)
;;;8885   		{
;;;8886   		u_necc=U0B;
;;;8887   		
;;;8888   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8889   			{
;;;8890   			u_necc=UVZ;
;;;8891   			}
;;;8892   	
;;;8893   		u_necc=UB0;
;;;8894   		}
;;;8895   
;;;8896   	else if(BAT_TYPE==3)
;;;8897   		{
;;;8898   		u_necc=U0B;
;;;8899   		
;;;8900   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8901   			{
;;;8902   			u_necc=UVZ;
;;;8903   			}
;;;8904   
;;;8905   		gran(&DU_LI_BAT,1,30);
;;;8906   
;;;8907   
;;;8908   		if(lakbNotErrorNum==0)
;;;8909   			{
;;;8910   			u_necc=U0B;
;;;8911   			}
;;;8912   		else 
;;;8913   			{
;;;8914   			signed short i;
;;;8915   			//signed short u_necc_max;
;;;8916   			//u_necc_max=0;
;;;8917   			char soc_flag=0;
;;;8918   
;;;8919   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8920   				{
;;;8921   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8922   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8923   				}
;;;8924   
;;;8925   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8926   			}
;;;8927   		gran(&u_necc,0,UB0);
;;;8928   		//gran(&u_necc,0,UB20);
;;;8929   		gran(&u_necc,0,540);
;;;8930   		}
;;;8931   	}
;;;8932   
;;;8933   #endif 
;;;8934   
;;;8935   #ifdef UKU_TELECORE2017
;;;8936   
;;;8937   if(unh_cnt0<10)
;;;8938   	{
;;;8939   	unh_cnt0++;
;;;8940   	if(unh_cnt0>=10)
;;;8941   		{
;;;8942   		unh_cnt0=0;
;;;8943   		b1Hz_unh=1;
;;;8944   		}
;;;8945   	}
;;;8946   
;;;8947   if(unh_cnt1<5)
;;;8948   	{
;;;8949   	unh_cnt1++;
;;;8950   	if(unh_cnt1==5)
;;;8951   		{
;;;8952   		unh_cnt1=0;
;;;8953   //		b2Hz_unh=1;
;;;8954   		}
;;;8955   	} 
;;;8956   
;;;8957   
;;;8958   
;;;8959   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8960   	{		
;;;8961   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8962   		{
;;;8963   		u_necc=mess_data[1];
;;;8964   		}		
;;;8965   	}
;;;8966   
;;;8967   
;;;8968   else if(b1Hz_unh)
;;;8969   	{
;;;8970   	b1Hz_unh=0;
;;;8971   
;;;8972   	if(BAT_TYPE==0)
;;;8973   		{
;;;8974   		if(bat[0]._nd)mat_temper=20;
;;;8975   		else mat_temper=bat[0]._Tb;
;;;8976   
;;;8977   			
;;;8978   		if(mat_temper<0)temp_SL=UB0; 
;;;8979   		else 
;;;8980   			{
;;;8981   			if(mat_temper>40)mat_temper=40; 
;;;8982   			temp_SL=(UB20-UB0)*10;
;;;8983   			temp_SL*=mat_temper;
;;;8984   			temp_SL/=200;
;;;8985   			temp_SL+=UB0;
;;;8986   			}
;;;8987   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8988   			{
;;;8989   			temp_SL=UVZ;
;;;8990   			}
;;;8991   		u_necc=(unsigned int)temp_SL;
;;;8992   	///u_necc=3456;
;;;8993   		}
;;;8994   	else if(BAT_TYPE==1)
;;;8995   		{
;;;8996   		
;;;8997   		gran(&DU_LI_BAT,1,30);
;;;8998   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8999   		gran(&u_necc,0,UB0);
;;;9000   		gran(&u_necc,0,UB20);
;;;9001   		gran(&u_necc,0,540);		
;;;9002   
;;;9003   
;;;9004   		if(li_bat._batStat!=bsOK)
;;;9005   			{
;;;9006   			u_necc=U0B;
;;;9007   			}
;;;9008   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9009   			{
;;;9010   			u_necc=UVZ;
;;;9011   			}
;;;9012   		}
;;;9013   	else if(BAT_TYPE==2)
;;;9014   		{
;;;9015   		u_necc=U0B;
;;;9016   		
;;;9017   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9018   			{
;;;9019   			u_necc=UVZ;
;;;9020   			}
;;;9021   	
;;;9022   		u_necc=UB0;
;;;9023   		}
;;;9024   
;;;9025   	else if(BAT_TYPE==3)
;;;9026   		{
;;;9027   		u_necc=U0B;
;;;9028   		
;;;9029   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9030   			{
;;;9031   			u_necc=UVZ;
;;;9032   			}
;;;9033   
;;;9034   		gran(&DU_LI_BAT,1,30);
;;;9035   
;;;9036   
;;;9037   		if(lakbNotErrorNum==0)
;;;9038   			{
;;;9039   			u_necc=U0B;
;;;9040   			}
;;;9041   		else 
;;;9042   			{
;;;9043   			signed short i;
;;;9044   			//signed short u_necc_max;
;;;9045   			//u_necc_max=0;
;;;9046   			char soc_flag=0;
;;;9047   
;;;9048   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9049   				{
;;;9050   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9051   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9052   				}
;;;9053   
;;;9054   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9055   			}
;;;9056   		gran(&u_necc,0,UB0);
;;;9057   		//gran(&u_necc,0,UB20);
;;;9058   		gran(&u_necc,0,540);
;;;9059   		}
;;;9060   	}
;;;9061   
;;;9062   #endif 
;;;9063   //u_necc=2356;
;;;9064   
;;;9065   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9066   	{
;;;9067   	u_necc=speedChrgVolt;
;;;9068   	}
;;;9069   #endif//gran(&u_necc,400,UMAX);
;;;9070   
;;;9071   
;;;9072   
;;;9073   temp_L=(signed long) u_necc;
005c52  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9074   temp_L*=98L;
005c56  f04f0162          MOV      r1,#0x62
005c5a  fb00f101          MUL      r1,r0,r1
;;;9075   temp_L/=100L;
005c5e  f04f0264          MOV      r2,#0x64
005c62  fb91f1f2          SDIV     r1,r1,r2
;;;9076   u_necc_dn=(signed short)temp_L;
005c66  4bbe              LDR      r3,|L1.24416|
005c68  8019              STRH     r1,[r3,#0]
;;;9077   
;;;9078   temp_L=(signed long) u_necc;
;;;9079   temp_L*=102L;
005c6a  f04f0166          MOV      r1,#0x66
005c6e  fb00f001          MUL      r0,r0,r1
;;;9080   temp_L/=100L;
005c72  fb90f0f2          SDIV     r0,r0,r2
;;;9081   u_necc_up=(signed short)temp_L;
005c76  49bb              LDR      r1,|L1.24420|
005c78  8008              STRH     r0,[r1,#0]
;;;9082   /*
;;;9083   #ifdef IPS_SGEP_GAZPROM
;;;9084   u_necc=248;
;;;9085   #endif */
;;;9086   }
005c7a  bdf8              POP      {r3-r7,pc}
;;;9087   
                          ENDP

                  num_necc_hndl PROC
;;;9089   //-----------------------------------------------
;;;9090   void num_necc_hndl(void)
005c7c  e92d41f0          PUSH     {r4-r8,lr}
;;;9091   {
;;;9092   
;;;9093   static short num_necc_block_cnt;
;;;9094   if(num_necc_block_cnt) num_necc_block_cnt--;
005c80  4ca6              LDR      r4,|L1.24348|
005c82  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005c86  b110              CBZ      r0,|L1.23694|
005c88  f1a00001          SUB      r0,r0,#1
005c8c  8720              STRH     r0,[r4,#0x38]
                  |L1.23694|
;;;9095   
;;;9096   Isumm_=Isumm;
005c8e  48b6              LDR      r0,|L1.24424|
005c90  4db6              LDR      r5,|L1.24428|
005c92  8800              LDRH     r0,[r0,#0]  ; Isumm
005c94  8028              STRH     r0,[r5,#0]
;;;9097   
;;;9098   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005c96  4eb6              LDR      r6,|L1.24432|
005c98  270a              MOVS     r7,#0xa
005c9a  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005c9e  2800              CMP      r0,#0
005ca0  da06              BGE      |L1.23728|
005ca2  f7fffffe          BL       abs
005ca6  fb90f0f7          SDIV     r0,r0,r7
005caa  8829              LDRH     r1,[r5,#0]  ; Isumm_
005cac  4408              ADD      r0,r0,r1
005cae  8028              STRH     r0,[r5,#0]
                  |L1.23728|
;;;9099   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005cb0  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
005cb4  2800              CMP      r0,#0
005cb6  da06              BGE      |L1.23750|
005cb8  f7fffffe          BL       abs
005cbc  fb90f0f7          SDIV     r0,r0,r7
005cc0  8829              LDRH     r1,[r5,#0]  ; Isumm_
005cc2  4408              ADD      r0,r0,r1
005cc4  8028              STRH     r0,[r5,#0]
                  |L1.23750|
;;;9100   
;;;9101   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005cc6  49ab              LDR      r1,|L1.24436|
005cc8  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005ccc  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005cd0  fb90f1f1          SDIV     r1,r0,r1
005cd4  f1010101          ADD      r1,r1,#1
005cd8  b2c9              UXTB     r1,r1
005cda  77e1              STRB     r1,[r4,#0x1f]
;;;9102   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9103   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9104   
;;;9105   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005cdc  4aa6              LDR      r2,|L1.24440|
005cde  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005ce2  fb90f0f2          SDIV     r0,r0,r2
005ce6  f1000001          ADD      r0,r0,#1
005cea  b2c2              UXTB     r2,r0
005cec  f8842020          STRB     r2,[r4,#0x20]
;;;9106   
;;;9107   if(num_necc_up>num_necc)
005cf0  48a2              LDR      r0,|L1.24444|
;;;9108   	{
;;;9109   	num_necc=num_necc_up;
;;;9110   	num_necc_block_cnt=60;
005cf2  f04f053c          MOV      r5,#0x3c
005cf6  f9b03000          LDRSH    r3,[r0,#0]            ;9107  ; num_necc
005cfa  4299              CMP      r1,r3                 ;9107
005cfc  dd02              BLE      |L1.23812|
005cfe  8001              STRH     r1,[r0,#0]            ;9109
005d00  8725              STRH     r5,[r4,#0x38]
005d02  e005              B        |L1.23824|
                  |L1.23812|
;;;9111   	}
;;;9112   else if(num_necc_down<num_necc)
005d04  429a              CMP      r2,r3
005d06  da03              BGE      |L1.23824|
;;;9113   	{
;;;9114   	if(!num_necc_block_cnt)
005d08  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005d0a  b909              CBNZ     r1,|L1.23824|
;;;9115   		{
;;;9116   		num_necc=num_necc_down;
005d0c  8002              STRH     r2,[r0,#0]
;;;9117   		num_necc_block_cnt=60;
005d0e  8725              STRH     r5,[r4,#0x38]
                  |L1.23824|
;;;9118   		}
;;;9119   	}
;;;9120   
;;;9121   if(PAR) num_necc=NUMIST;
005d10  499b              LDR      r1,|L1.24448|
005d12  880a              LDRH     r2,[r1,#0]  ; PAR
005d14  497a              LDR      r1,|L1.24320|
005d16  b10a              CBZ      r2,|L1.23836|
005d18  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d1a  8002              STRH     r2,[r0,#0]
                  |L1.23836|
;;;9122   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9123   if(bPARALLEL) num_necc=NUMIST;
005d1c  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005d20  b10a              CBZ      r2,|L1.23846|
005d22  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d24  8002              STRH     r2,[r0,#0]
                  |L1.23846|
;;;9124   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005d26  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005d28  2a0a              CMP      r2,#0xa
005d2a  d101              BNE      |L1.23856|
005d2c  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d2e  8002              STRH     r2,[r0,#0]
                  |L1.23856|
;;;9125   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005d30  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005d32  2a0a              CMP      r2,#0xa
005d34  d001              BEQ      |L1.23866|
005d36  2a0b              CMP      r2,#0xb
005d38  d101              BNE      |L1.23870|
                  |L1.23866|
005d3a  880a              LDRH     r2,[r1,#0]  ; NUMIST
005d3c  8002              STRH     r2,[r0,#0]
                  |L1.23870|
;;;9126   #endif
;;;9127   
;;;9128   gran(&num_necc,1,NUMIST);
005d3e  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005d42  e8bd41f0          POP      {r4-r8,lr}
005d46  2101              MOVS     r1,#1
005d48  488c              LDR      r0,|L1.24444|
005d4a  f7ffbffe          B.W      gran
;;;9129   
;;;9130   }
;;;9131   
                          ENDP

                  cntrl_hndl PROC
;;;9134   //-----------------------------------------------
;;;9135   void cntrl_hndl(void)
005d4e  e92d5ff0          PUSH     {r4-r12,lr}
;;;9136   {
;;;9137   
;;;9138   
;;;9139   
;;;9140   IZMAX_=IZMAX;
005d52  488c              LDR      r0,|L1.24452|
005d54  4c71              LDR      r4,|L1.24348|
005d56  8800              LDRH     r0,[r0,#0]  ; IZMAX
005d58  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9141   
;;;9142   //cntrl_hndl_plazma=10;
;;;9143   
;;;9144   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005d5c  4877              LDR      r0,|L1.24380|
005d5e  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005d60  b918              CBNZ     r0,|L1.23914|
005d62  4877              LDR      r0,|L1.24384|
005d64  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005d66  2802              CMP      r0,#2
005d68  d103              BNE      |L1.23922|
                  |L1.23914|
005d6a  4887              LDR      r0,|L1.24456|
005d6c  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005d6e  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23922|
;;;9145   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005d72  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005d74  280a              CMP      r0,#0xa
005d76  d103              BNE      |L1.23936|
005d78  4884              LDR      r0,|L1.24460|
005d7a  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005d7c  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23936|
;;;9146   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005d80  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005d82  280a              CMP      r0,#0xa
005d84  d103              BNE      |L1.23950|
005d86  4982              LDR      r1,|L1.24464|
005d88  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005d8a  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.23950|
;;;9147   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005d8e  280b              CMP      r0,#0xb
005d90  d103              BNE      |L1.23962|
005d92  4880              LDR      r0,|L1.24468|
005d94  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005d96  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23962|
;;;9148   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9149   
;;;9150   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005d9a  f9b40074          LDRSH    r0,[r4,#0x74]  ; cntrl_stat_blok_cnt
005d9e  b118              CBZ      r0,|L1.23976|
005da0  f1a00001          SUB      r0,r0,#1
005da4  f8a40074          STRH     r0,[r4,#0x74]
                  |L1.23976|
;;;9151   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005da8  f9b40076          LDRSH    r0,[r4,#0x76]  ; cntrl_stat_blok_cnt_
005dac  b118              CBZ      r0,|L1.23990|
005dae  f1a00001          SUB      r0,r0,#1
005db2  f8a40076          STRH     r0,[r4,#0x76]
                  |L1.23990|
;;;9152   
;;;9153   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005db6  486e              LDR      r0,|L1.24432|
005db8  f04f080a          MOV      r8,#0xa               ;9145
005dbc  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005dc0  0789              LSLS     r1,r1,#30
005dc2  d103              BNE      |L1.24012|
005dc4  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005dc8  0780              LSLS     r0,r0,#30
005dca  d005              BEQ      |L1.24024|
                  |L1.24012|
005dcc  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005dd0  fbb0f0f8          UDIV     r0,r0,r8
005dd4  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24024|
;;;9154   
;;;9155   
;;;9156   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9157   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005dd8  486f              LDR      r0,|L1.24472|
005dda  2601              MOVS     r6,#1
005ddc  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005de0  1e49              SUBS     r1,r1,#1
005de2  2905              CMP      r1,#5
005de4  d300              BCC      |L1.24040|
005de6  8006              STRH     r6,[r0,#0]
                  |L1.24040|
;;;9158   if(ch_cnt0<(10*REG_SPEED))
005de8  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005dec  2500              MOVS     r5,#0                 ;9144
005dee  eb000180          ADD      r1,r0,r0,LSL #2
005df2  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
005df4  ebb00f41          CMP      r0,r1,LSL #1
005df8  da08              BGE      |L1.24076|
;;;9159   	{
;;;9160   	ch_cnt0++;
005dfa  f1000001          ADD      r0,r0,#1
005dfe  b2c0              UXTB     r0,r0
005e00  7560              STRB     r0,[r4,#0x15]
;;;9161   	if(ch_cnt0>=10*REG_SPEED)
005e02  ebb00f41          CMP      r0,r1,LSL #1
005e06  db01              BLT      |L1.24076|
;;;9162   		{
;;;9163   		ch_cnt0=0;
005e08  7565              STRB     r5,[r4,#0x15]
;;;9164   		b1Hz_ch=1;
005e0a  75a6              STRB     r6,[r4,#0x16]
                  |L1.24076|
;;;9165   		}
;;;9166   	}
;;;9167   #endif
;;;9168   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9169   if(ch_cnt0<10)
;;;9170   	{
;;;9171   	ch_cnt0++;
;;;9172   	if(ch_cnt0>=10)
;;;9173   		{
;;;9174   		ch_cnt0=0;
;;;9175   		b1Hz_ch=1;
;;;9176   		}
;;;9177   	}
;;;9178   #endif
;;;9179   
;;;9180   
;;;9181   if(mess_find_unvol(MESS2CNTRL_HNDL))
005e0c  20e1              MOVS     r0,#0xe1
005e0e  f7fffffe          BL       mess_find_unvol
;;;9182   	{
;;;9183   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9184   		{
;;;9185   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9186   		}
;;;9187   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9188   		{
;;;9189   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9190   		}
;;;9191   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9192   		{
;;;9193   		static char cntrlStatIsDownCnt;
;;;9194   		cntrl_stat--;
;;;9195   
;;;9196   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9197   			{
;;;9198   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9199   			}
;;;9200   		else 
;;;9201   			{
;;;9202   			cntrlStatIsDownCnt=0;
;;;9203   			}
;;;9204   
;;;9205   		}
;;;9206   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9207   		{
;;;9208   		cntrl_stat/*_new*/=mess_data[1];
;;;9209   		}
;;;9210   
;;;9211   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9212   		{
;;;9213   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9214   		if(bps_U>u_necc)
005e12  f8dfc188          LDR      r12,|L1.24476|
005e16  4a42              LDR      r2,|L1.24352|
;;;9215   			{
;;;9216   			cntrl_hndl_plazma=11;
;;;9217   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9218   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9219   			}
;;;9220   		else if(bps_U<u_necc)
;;;9221   			{
;;;9222   			cntrl_hndl_plazma=12;	
;;;9223   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9224   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9225   			}
;;;9226   		#elif defined(UKU_220)
;;;9227   		if(load_U>u_necc)
;;;9228   			{
;;;9229   			cntrl_hndl_plazma=13;
;;;9230   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9231   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9232   			}
;;;9233   		else if(load_U<u_necc)
;;;9234   			{
;;;9235   			cntrl_hndl_plazma=14;	
;;;9236   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9237   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9238   			}
;;;9239   		#elif defined(UKU_220_V2)
;;;9240   		if(load_U>u_necc)
;;;9241   			{
;;;9242   			cntrl_hndl_plazma=15;
;;;9243   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9244   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9245   			}
;;;9246   		else if(load_U<u_necc)
;;;9247   			{
;;;9248   			cntrl_hndl_plazma=16;	
;;;9249   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9250   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9251   			}
;;;9252   		#else
;;;9253   
;;;9254   		if(load_U>u_necc)
;;;9255   			{
;;;9256   			cntrl_hndl_plazma=17;
;;;9257   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9258   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9259   			}
;;;9260   		else if(load_U<u_necc)
;;;9261   			{
;;;9262   			cntrl_hndl_plazma=18;	
;;;9263   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9264   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9265   			}
;;;9266   		#endif	
;;;9267   	 	}
;;;9268   
;;;9269   	/*gran(&cntrl_stat_new,10,1010);			
;;;9270   	cntrl_stat_old=cntrl_stat_new;
;;;9271   	cntrl_stat=cntrl_stat_new;*/
;;;9272   	}
;;;9273   
;;;9274   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9275   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005e18  f8df90e0          LDR      r9,|L1.24316|
;;;9276   	{
;;;9277   	cntrl_stat_new=cntrl_stat_old;
;;;9278   	cntrl_hndl_plazma=19;
;;;9279   	if((Ibmax/10)>(2*IZMAX_))
;;;9280   		{
;;;9281   		cntrl_hndl_plazma=20;
;;;9282             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9283   		else	cntrl_stat_new-=10;
;;;9284   		}		
;;;9285   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9286   		{
;;;9287   		cntrl_hndl_plazma=21;
;;;9288             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9289             else	cntrl_stat_new-=3;
;;;9290   		}   
;;;9291   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9292   		{
;;;9293   		cntrl_hndl_plazma=22;
;;;9294   		cntrl_stat_new--;
;;;9295   		}
;;;9296   		
;;;9297   	else if(bps_U<u_necc)
;;;9298   		{
;;;9299   		cntrl_hndl_plazma=23;
;;;9300   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9301   			{
;;;9302   			cntrl_hndl_plazma=24;
;;;9303   			if(Ibmax<0)
;;;9304   				{
;;;9305   				cntrl_hndl_plazma=25;
;;;9306                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9307   				else cntrl_stat_new+=10;
;;;9308   				}
;;;9309   			else if(Ibmax<(IZMAX_*5))
;;;9310   				{
;;;9311   				cntrl_hndl_plazma=26;
;;;9312                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9313   				else	cntrl_stat_new+=2;
;;;9314   				}
;;;9315   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9316   				{
;;;9317   				cntrl_hndl_plazma=27;
;;;9318   				cntrl_stat_new++;
;;;9319   				}					
;;;9320   			}
;;;9321   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9322   			{
;;;9323   			cntrl_hndl_plazma=28;
;;;9324   			if(Ibmax<(IZMAX_*5))
;;;9325   				{
;;;9326   				cntrl_hndl_plazma=29;
;;;9327                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9328   				else	cntrl_stat_new+=2;
;;;9329   				}
;;;9330   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9331   				{
;;;9332   				cntrl_hndl_plazma=30;
;;;9333   				cntrl_stat_new++;
;;;9334   				}					
;;;9335   			}	
;;;9336   		else if(bps_U<(u_necc-1))
;;;9337   			{
;;;9338   			cntrl_hndl_plazma=31;
;;;9339   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9340   				{
;;;9341   				cntrl_hndl_plazma=32;
;;;9342   				cntrl_stat_new++;
;;;9343   				}					
;;;9344   			}					
;;;9345   		}	
;;;9346   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9347   		{ 	
;;;9348   		cntrl_hndl_plazma=33;
;;;9349   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9350   			{
;;;9351   			cntrl_hndl_plazma=34;
;;;9352                  if((cntrl_stat_blok_cnt)||(!TERMOKOMPENS))cntrl_stat_new--;
;;;9353   			else	cntrl_stat_new-=10;
;;;9354   			}
;;;9355   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9356   			{
;;;9357   			cntrl_hndl_plazma=35;
;;;9358                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9359   			else cntrl_stat_new-=2;
;;;9360   			}	
;;;9361   		else if(bps_U>(u_necc+1))
;;;9362   			{
;;;9363   			cntrl_hndl_plazma=36;
;;;9364   			cntrl_stat_new--;
;;;9365   			}					
;;;9366   		}
;;;9367   
;;;9368   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9369   		{
;;;9370   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9371   		}
;;;9372   
;;;9373   	gran(&cntrl_stat_new,10,1010);
;;;9374   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9375   	cntrl_stat_old=cntrl_stat_new;
;;;9376   	cntrl_stat=cntrl_stat_new;
;;;9377   	
;;;9378   	if(ICA_EN==0)
;;;9379   		{
;;;9380   		if(ica_cntrl_hndl_cnt)
005e1c  4f60              LDR      r7,|L1.24480|
005e1e  b398              CBZ      r0,|L1.24200|
005e20  4938              LDR      r1,|L1.24324|
005e22  6808              LDR      r0,[r1,#0]            ;9183  ; mess_data
005e24  2864              CMP      r0,#0x64              ;9183
005e26  d008              BEQ      |L1.24122|
005e28  2869              CMP      r0,#0x69              ;9187
005e2a  d00b              BEQ      |L1.24132|
005e2c  286e              CMP      r0,#0x6e              ;9191
005e2e  d00f              BEQ      |L1.24144|
005e30  28e5              CMP      r0,#0xe5              ;9206
005e32  d02c              BEQ      |L1.24206|
005e34  28e6              CMP      r0,#0xe6              ;9211
005e36  d02d              BEQ      |L1.24212|
                  |L1.24120|
005e38  e22b              B        |L1.25234|
                  |L1.24122|
005e3a  6848              LDR      r0,[r1,#4]            ;9185  ; mess_data
005e3c  8ea1              LDRH     r1,[r4,#0x34]         ;9185  ; cntrl_stat_old
005e3e  4408              ADD      r0,r0,r1              ;9185
005e40  8660              STRH     r0,[r4,#0x32]         ;9185
005e42  e226              B        |L1.25234|
                  |L1.24132|
005e44  6848              LDR      r0,[r1,#4]            ;9189  ; mess_data
005e46  8ea1              LDRH     r1,[r4,#0x34]         ;9189  ; cntrl_stat_old
005e48  eba10000          SUB      r0,r1,r0              ;9189
005e4c  8660              STRH     r0,[r4,#0x32]         ;9189
005e4e  e220              B        |L1.25234|
                  |L1.24144|
005e50  8e60              LDRH     r0,[r4,#0x32]         ;9194  ; cntrl_stat
005e52  f1a00001          SUB      r0,r0,#1              ;9194
005e56  b200              SXTH     r0,r0                 ;9194
005e58  8660              STRH     r0,[r4,#0x32]         ;9194
005e5a  281e              CMP      r0,#0x1e              ;9196
005e5c  dd07              BLE      |L1.24174|
005e5e  4851              LDR      r0,|L1.24484|
005e60  4951              LDR      r1,|L1.24488|
005e62  f9b00000          LDRSH    r0,[r0,#0]            ;9196  ; load_U
005e66  f9b11000          LDRSH    r1,[r1,#0]            ;9196  ; USIGN
005e6a  4288              CMP      r0,r1                 ;9196
005e6c  da0d              BGE      |L1.24202|
                  |L1.24174|
005e6e  7be0              LDRB     r0,[r4,#0xf]          ;9198  ; cntrlStatIsDownCnt
005e70  1c40              ADDS     r0,r0,#1              ;9198
005e72  b2c0              UXTB     r0,r0                 ;9198
005e74  73e0              STRB     r0,[r4,#0xf]          ;9198
005e76  28fa              CMP      r0,#0xfa              ;9198
005e78  d1de              BNE      |L1.24120|
005e7a  230a              MOVS     r3,#0xa               ;9198
005e7c  2200              MOVS     r2,#0                 ;9198
005e7e  21e7              MOVS     r1,#0xe7              ;9198
005e80  20e6              MOVS     r0,#0xe6              ;9198
005e82  f7fffffe          BL       mess_send
005e86  e204              B        |L1.25234|
                  |L1.24200|
005e88  e09c              B        |L1.24516|
                  |L1.24202|
005e8a  73e5              STRB     r5,[r4,#0xf]          ;9202
005e8c  e201              B        |L1.25234|
                  |L1.24206|
005e8e  6848              LDR      r0,[r1,#4]            ;9208  ; mess_data
005e90  8660              STRH     r0,[r4,#0x32]         ;9208
005e92  e1fe              B        |L1.25234|
                  |L1.24212|
005e94  f9bc0000          LDRSH    r0,[r12,#0]           ;9214  ; bps_U
005e98  f9b21000          LDRSH    r1,[r2,#0]            ;9214  ; u_necc
005e9c  4288              CMP      r0,r1                 ;9214
005e9e  dd1a              BLE      |L1.24278|
005ea0  f04f020b          MOV      r2,#0xb               ;9216
005ea4  f884202e          STRB     r2,[r4,#0x2e]         ;9216
005ea8  eba00001          SUB      r0,r0,r1              ;9217
005eac  2828              CMP      r0,#0x28              ;9217
005eae  dd07              BLE      |L1.24256|
005eb0  f9b40032          LDRSH    r0,[r4,#0x32]         ;9217  ; cntrl_stat
005eb4  2800              CMP      r0,#0                 ;9217
005eb6  dd03              BLE      |L1.24256|
005eb8  f1a00005          SUB      r0,r0,#5              ;9217
005ebc  8660              STRH     r0,[r4,#0x32]         ;9217
005ebe  e1e8              B        |L1.25234|
                  |L1.24256|
005ec0  f9b40032          LDRSH    r0,[r4,#0x32]         ;9218  ; cntrl_stat
005ec4  2800              CMP      r0,#0                 ;9218
005ec6  d0b7              BEQ      |L1.24120|
005ec8  7da1              LDRB     r1,[r4,#0x16]         ;9218  ; b1Hz_ch
005eca  2900              CMP      r1,#0                 ;9218
005ecc  d0b4              BEQ      |L1.24120|
005ece  f1a00001          SUB      r0,r0,#1              ;9218
005ed2  8660              STRH     r0,[r4,#0x32]         ;9218
                  |L1.24276|
005ed4  e1dd              B        |L1.25234|
                  |L1.24278|
005ed6  daaf              BGE      |L1.24120|
005ed8  f04f020c          MOV      r2,#0xc               ;9222
005edc  f884202e          STRB     r2,[r4,#0x2e]         ;9222
005ee0  eba10000          SUB      r0,r1,r0              ;9223
005ee4  2828              CMP      r0,#0x28              ;9223
005ee6  dd61              BLE      |L1.24492|
005ee8  f9b40032          LDRSH    r0,[r4,#0x32]         ;9223  ; cntrl_stat
005eec  f24031f7          MOV      r1,#0x3f7             ;9223
005ef0  4288              CMP      r0,r1                 ;9223
005ef2  da5b              BGE      |L1.24492|
005ef4  f1000005          ADD      r0,r0,#5              ;9223
005ef8  8660              STRH     r0,[r4,#0x32]         ;9223
                  |L1.24314|
005efa  e1ca              B        |L1.25234|
                  |L1.24316|
                          DCD      bps
                  |L1.24320|
                          DCD      NUMIST
                  |L1.24324|
                          DCD      mess_data
                  |L1.24328|
                          DCD      uavt_set_result_stat
                  |L1.24332|
                          DCD      avt_plazma
                  |L1.24336|
                          DCD      TERMOKOMPENS
                  |L1.24340|
                          DCD      UB20
                  |L1.24344|
                          DCD      UVZ
                  |L1.24348|
                          DCD      ||area_number.25||
                  |L1.24352|
                          DCD      u_necc
                  |L1.24356|
                          DCD      ND_EXT
                  |L1.24360|
                          DCD      t_ext
                  |L1.24364|
                          DCD      mat_temper
                  |L1.24368|
                          DCD      UB0
                  |L1.24372|
                          DCD      sk_stat
                  |L1.24376|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.24380|
                          DCD      speedChIsOn
                  |L1.24384|
                          DCD      sp_ch_stat
                  |L1.24388|
                          DCD      speedChrgVolt
                  |L1.24392|
                          DCD      hv_vz_stat
                  |L1.24396|
                          DCD      UZ_U
                  |L1.24400|
                          DCD      FZ_U1
                  |L1.24404|
                          DCD      FZ_U2
                  |L1.24408|
                          DCD      uavt_set_stat
                  |L1.24412|
                          DCD      U_AVT
                  |L1.24416|
                          DCD      u_necc_dn
                  |L1.24420|
                          DCD      u_necc_up
                  |L1.24424|
                          DCD      Isumm
                  |L1.24428|
                          DCD      Isumm_
                  |L1.24432|
                          DCD      bat
                  |L1.24436|
                          DCD      IMAX
                  |L1.24440|
                          DCD      IMIN
                  |L1.24444|
                          DCD      num_necc
                  |L1.24448|
                          DCD      PAR
                  |L1.24452|
                          DCD      IZMAX
                  |L1.24456|
                          DCD      speedChrgCurr
                  |L1.24460|
                          DCD      UZ_IMAX
                  |L1.24464|
                          DCD      FZ_IMAX1
                  |L1.24468|
                          DCD      FZ_IMAX2
                  |L1.24472|
                          DCD      REG_SPEED
                  |L1.24476|
                          DCD      bps_U
                  |L1.24480|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.24484|
                          DCD      load_U
                  |L1.24488|
                          DCD      USIGN
                  |L1.24492|
005fac  f9b40032          LDRSH    r0,[r4,#0x32]         ;9224  ; cntrl_stat
005fb0  f5b07f7f          CMP      r0,#0x3fc             ;9224
005fb4  da8e              BGE      |L1.24276|
005fb6  7da1              LDRB     r1,[r4,#0x16]         ;9224  ; b1Hz_ch
005fb8  2900              CMP      r1,#0                 ;9224
005fba  d08b              BEQ      |L1.24276|
005fbc  f1000001          ADD      r0,r0,#1              ;9224
005fc0  8660              STRH     r0,[r4,#0x32]         ;9224
005fc2  e166              B        |L1.25234|
                  |L1.24516|
005fc4  7da0              LDRB     r0,[r4,#0x16]         ;9275  ; b1Hz_ch
005fc6  2800              CMP      r0,#0                 ;9275
005fc8  d084              BEQ      |L1.24276|
005fca  48fd              LDR      r0,|L1.25536|
005fcc  8800              LDRH     r0,[r0,#0]            ;9275  ; bIBAT_SMKLBR
005fce  b118              CBZ      r0,|L1.24536|
005fd0  f8990323          LDRB     r0,[r9,#0x323]        ;9275  ; bps
005fd4  2828              CMP      r0,#0x28              ;9275
005fd6  d990              BLS      |L1.24314|
                  |L1.24536|
005fd8  f104042e          ADD      r4,r4,#0x2e           ;9277
005fdc  f9b40006          LDRSH    r0,[r4,#6]            ;9277  ; cntrl_stat_old
005fe0  8360              STRH     r0,[r4,#0x1a]         ;9277
005fe2  f04f0113          MOV      r1,#0x13              ;9278
005fe6  7021              STRB     r1,[r4,#0]            ;9278
005fe8  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9279  ; Ibmax
005fec  8be3              LDRH     r3,[r4,#0x1e]         ;9279  ; IZMAX_
005fee  fb91f8f8          SDIV     r8,r1,r8              ;9279
005ff2  f1a4042e          SUB      r4,r4,#0x2e           ;9279
005ff6  ebb80f43          CMP      r8,r3,LSL #1          ;9279
005ffa  dd10              BLE      |L1.24606|
005ffc  f04f0114          MOV      r1,#0x14              ;9281
006000  f884102e          STRB     r1,[r4,#0x2e]         ;9281
006004  f8b41074          LDRH     r1,[r4,#0x74]         ;9282  ; cntrl_stat_blok_cnt
006008  b121              CBZ      r1,|L1.24596|
00600a  f1a00001          SUB      r0,r0,#1              ;9282
00600e  f8a40048          STRH     r0,[r4,#0x48]         ;9282
006012  e102              B        |L1.25114|
                  |L1.24596|
006014  f1a0000a          SUB      r0,r0,#0xa            ;9283
006018  f8a40048          STRH     r0,[r4,#0x48]         ;9283
00601c  e0fd              B        |L1.25114|
                  |L1.24606|
00601e  da14              BGE      |L1.24650|
006020  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9285
006024  458a              CMP      r10,r1                ;9285
006026  da10              BGE      |L1.24650|
006028  f04f0115          MOV      r1,#0x15              ;9287
00602c  f884102e          STRB     r1,[r4,#0x2e]         ;9287
006030  f8b41074          LDRH     r1,[r4,#0x74]         ;9288  ; cntrl_stat_blok_cnt
006034  b121              CBZ      r1,|L1.24640|
006036  f1a00001          SUB      r0,r0,#1              ;9288
00603a  f8a40048          STRH     r0,[r4,#0x48]         ;9288
00603e  e0ec              B        |L1.25114|
                  |L1.24640|
006040  f1a00003          SUB      r0,r0,#3              ;9289
006044  f8a40048          STRH     r0,[r4,#0x48]         ;9289
006048  e0e7              B        |L1.25114|
                  |L1.24650|
00604a  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9291
00604e  458a              CMP      r10,r1                ;9291
006050  dd0a              BLE      |L1.24680|
006052  4598              CMP      r8,r3                 ;9291
006054  dd08              BLE      |L1.24680|
006056  f04f0116          MOV      r1,#0x16              ;9293
00605a  f884102e          STRB     r1,[r4,#0x2e]         ;9293
00605e  f1a00001          SUB      r0,r0,#1              ;9294
006062  f8a40048          STRH     r0,[r4,#0x48]         ;9294
006066  e0d8              B        |L1.25114|
                  |L1.24680|
006068  f9bcc000          LDRSH    r12,[r12,#0]          ;9297  ; bps_U
00606c  f9b22000          LDRSH    r2,[r2,#0]            ;9297  ; u_necc
006070  f8df8350          LDR      r8,|L1.25540|
006074  f8dfb350          LDR      r11,|L1.25544|
006078  4594              CMP      r12,r2                ;9297
00607a  da72              BGE      |L1.24930|
00607c  f04f0a17          MOV      r10,#0x17             ;9299
006080  f884a02e          STRB     r10,[r4,#0x2e]        ;9299
006084  f9b88000          LDRSH    r8,[r8,#0]            ;9300  ; UB0
006088  f9bba000          LDRSH    r10,[r11,#0]          ;9300  ; UB20
00608c  eba8080a          SUB      r8,r8,r10             ;9300
006090  eba20a08          SUB      r10,r2,r8             ;9300
006094  45e2              CMP      r10,r12               ;9300
006096  dd37              BLE      |L1.24840|
006098  f04f0218          MOV      r2,#0x18              ;9302
00609c  f884202e          STRB     r2,[r4,#0x2e]         ;9302
0060a0  2900              CMP      r1,#0                 ;9303
0060a2  da10              BGE      |L1.24774|
0060a4  f04f0119          MOV      r1,#0x19              ;9305
0060a8  f884102e          STRB     r1,[r4,#0x2e]         ;9305
0060ac  f8b41074          LDRH     r1,[r4,#0x74]         ;9306  ; cntrl_stat_blok_cnt
0060b0  b121              CBZ      r1,|L1.24764|
0060b2  f1000001          ADD      r0,r0,#1              ;9306
0060b6  f8a40048          STRH     r0,[r4,#0x48]         ;9306
0060ba  e0ae              B        |L1.25114|
                  |L1.24764|
0060bc  f100000a          ADD      r0,r0,#0xa            ;9307
0060c0  f8a40048          STRH     r0,[r4,#0x48]         ;9307
0060c4  e0a9              B        |L1.25114|
                  |L1.24774|
0060c6  eb030283          ADD      r2,r3,r3,LSL #2       ;9309
0060ca  428a              CMP      r2,r1                 ;9309
0060cc  dd10              BLE      |L1.24816|
0060ce  f04f011a          MOV      r1,#0x1a              ;9311
0060d2  f884102e          STRB     r1,[r4,#0x2e]         ;9311
0060d6  f8b41074          LDRH     r1,[r4,#0x74]         ;9312  ; cntrl_stat_blok_cnt
0060da  b121              CBZ      r1,|L1.24806|
0060dc  f1000001          ADD      r0,r0,#1              ;9312
0060e0  f8a40048          STRH     r0,[r4,#0x48]         ;9312
0060e4  e099              B        |L1.25114|
                  |L1.24806|
0060e6  f1000002          ADD      r0,r0,#2              ;9313
0060ea  f8a40048          STRH     r0,[r4,#0x48]         ;9313
0060ee  e094              B        |L1.25114|
                  |L1.24816|
0060f0  ebb10f42          CMP      r1,r2,LSL #1          ;9315
0060f4  da07              BGE      |L1.24838|
0060f6  f04f011b          MOV      r1,#0x1b              ;9317
0060fa  f884102e          STRB     r1,[r4,#0x2e]         ;9317
0060fe  f1000001          ADD      r0,r0,#1              ;9318
006102  f8a40048          STRH     r0,[r4,#0x48]         ;9318
                  |L1.24838|
006106  e088              B        |L1.25114|
                  |L1.24840|
006108  ea4f7ae8          ASR      r10,r8,#31            ;9321
00610c  eb08789a          ADD      r8,r8,r10,LSR #30     ;9321
006110  eba208a8          SUB      r8,r2,r8,ASR #2       ;9321
006114  45e0              CMP      r8,r12                ;9321
006116  dd25              BLE      |L1.24932|
006118  f04f021c          MOV      r2,#0x1c              ;9323
00611c  f884202e          STRB     r2,[r4,#0x2e]         ;9323
006120  eb030283          ADD      r2,r3,r3,LSL #2       ;9324
006124  428a              CMP      r2,r1                 ;9324
006126  dd10              BLE      |L1.24906|
006128  f04f011d          MOV      r1,#0x1d              ;9326
00612c  f884102e          STRB     r1,[r4,#0x2e]         ;9326
006130  f8b41074          LDRH     r1,[r4,#0x74]         ;9327  ; cntrl_stat_blok_cnt
006134  b121              CBZ      r1,|L1.24896|
006136  f1000001          ADD      r0,r0,#1              ;9327
00613a  f8a40048          STRH     r0,[r4,#0x48]         ;9327
00613e  e06c              B        |L1.25114|
                  |L1.24896|
006140  f1000002          ADD      r0,r0,#2              ;9328
006144  f8a40048          STRH     r0,[r4,#0x48]         ;9328
006148  e067              B        |L1.25114|
                  |L1.24906|
00614a  ebb10f42          CMP      r1,r2,LSL #1          ;9330
00614e  da64              BGE      |L1.25114|
006150  f04f011e          MOV      r1,#0x1e              ;9332
006154  f884102e          STRB     r1,[r4,#0x2e]         ;9332
006158  f1000001          ADD      r0,r0,#1              ;9333
00615c  f8a40048          STRH     r0,[r4,#0x48]         ;9333
006160  e05b              B        |L1.25114|
                  |L1.24930|
006162  e014              B        |L1.24974|
                  |L1.24932|
006164  1e52              SUBS     r2,r2,#1              ;9336
006166  4594              CMP      r12,r2                ;9336
006168  da57              BGE      |L1.25114|
00616a  f04f021f          MOV      r2,#0x1f              ;9338
00616e  f884202e          STRB     r2,[r4,#0x2e]         ;9338
006172  eb030283          ADD      r2,r3,r3,LSL #2       ;9339
006176  ebb10f42          CMP      r1,r2,LSL #1          ;9339
00617a  da4e              BGE      |L1.25114|
00617c  f04f0120          MOV      r1,#0x20              ;9341
006180  f884102e          STRB     r1,[r4,#0x2e]         ;9341
006184  f1000001          ADD      r0,r0,#1              ;9342
006188  f8a40048          STRH     r0,[r4,#0x48]         ;9342
00618c  e045              B        |L1.25114|
                  |L1.24974|
00618e  dd44              BLE      |L1.25114|
006190  f04f0121          MOV      r1,#0x21              ;9348
006194  f884102e          STRB     r1,[r4,#0x2e]         ;9348
006198  f9b81000          LDRSH    r1,[r8,#0]            ;9349  ; UB0
00619c  f9bb3000          LDRSH    r3,[r11,#0]           ;9349  ; UB20
0061a0  eba10103          SUB      r1,r1,r3              ;9349
0061a4  eb010302          ADD      r3,r1,r2              ;9349
0061a8  4563              CMP      r3,r12                ;9349
0061aa  da13              BGE      |L1.25044|
0061ac  f04f0122          MOV      r1,#0x22              ;9351
0061b0  f884102e          STRB     r1,[r4,#0x2e]         ;9351
0061b4  f8b41074          LDRH     r1,[r4,#0x74]         ;9352  ; cntrl_stat_blok_cnt
0061b8  b939              CBNZ     r1,|L1.25034|
0061ba  4984              LDR      r1,|L1.25548|
0061bc  8809              LDRH     r1,[r1,#0]            ;9352  ; TERMOKOMPENS
0061be  b121              CBZ      r1,|L1.25034|
0061c0  f1a0000a          SUB      r0,r0,#0xa            ;9353
0061c4  f8a40048          STRH     r0,[r4,#0x48]         ;9353
0061c8  e027              B        |L1.25114|
                  |L1.25034|
0061ca  f1a00001          SUB      r0,r0,#1              ;9352
0061ce  f8a40048          STRH     r0,[r4,#0x48]         ;9352
0061d2  e022              B        |L1.25114|
                  |L1.25044|
0061d4  17cb              ASRS     r3,r1,#31             ;9355
0061d6  eb017193          ADD      r1,r1,r3,LSR #30      ;9355
0061da  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9355
0061de  4561              CMP      r1,r12                ;9355
0061e0  da10              BGE      |L1.25092|
0061e2  f04f0123          MOV      r1,#0x23              ;9357
0061e6  f884102e          STRB     r1,[r4,#0x2e]         ;9357
0061ea  f8b41074          LDRH     r1,[r4,#0x74]         ;9358  ; cntrl_stat_blok_cnt
0061ee  b121              CBZ      r1,|L1.25082|
0061f0  f1a00001          SUB      r0,r0,#1              ;9358
0061f4  f8a40048          STRH     r0,[r4,#0x48]         ;9358
0061f8  e00f              B        |L1.25114|
                  |L1.25082|
0061fa  f1a00002          SUB      r0,r0,#2              ;9359
0061fe  f8a40048          STRH     r0,[r4,#0x48]         ;9359
006202  e00a              B        |L1.25114|
                  |L1.25092|
006204  1c52              ADDS     r2,r2,#1              ;9361
006206  4594              CMP      r12,r2                ;9361
006208  dd07              BLE      |L1.25114|
00620a  f04f0124          MOV      r1,#0x24              ;9363
00620e  f884102e          STRB     r1,[r4,#0x2e]         ;9363
006212  f1a00001          SUB      r0,r0,#1              ;9364
006216  f8a40048          STRH     r0,[r4,#0x48]         ;9364
                  |L1.25114|
00621a  486d              LDR      r0,|L1.25552|
00621c  7961              LDRB     r1,[r4,#5]            ;9368  ; vz1_stat
00621e  7800              LDRB     r0,[r0,#0]            ;9368  ; hv_vz_stat
006220  4308              ORRS     r0,r0,r1              ;9368
006222  79e1              LDRB     r1,[r4,#7]            ;9368  ; vz2_stat
006224  4308              ORRS     r0,r0,r1              ;9368
006226  d10e              BNE      |L1.25158|
006228  486a              LDR      r0,|L1.25556|
00622a  7840              LDRB     r0,[r0,#1]            ;9370  ; sk_stat
00622c  2801              CMP      r0,#1                 ;9370
00622e  d10a              BNE      |L1.25158|
006230  4869              LDR      r0,|L1.25560|
006232  7840              LDRB     r0,[r0,#1]            ;9370  ; sk_stat_old
006234  b938              CBNZ     r0,|L1.25158|
006236  4869              LDR      r0,|L1.25564|
006238  8800              LDRH     r0,[r0,#0]            ;9370  ; VZ_KIND
00623a  2801              CMP      r0,#1                 ;9370
00623c  d103              BNE      |L1.25158|
00623e  f04f0032          MOV      r0,#0x32              ;9370
006242  f8a40048          STRH     r0,[r4,#0x48]         ;9370
                  |L1.25158|
006246  f24032f2          MOV      r2,#0x3f2             ;9373
00624a  210a              MOVS     r1,#0xa               ;9373
00624c  4864              LDR      r0,|L1.25568|
00624e  f7fffffe          BL       gran
006252  4864              LDR      r0,|L1.25572|
006254  8800              LDRH     r0,[r0,#0]            ;9374  ; net_av_2min_timer
006256  b110              CBZ      r0,|L1.25182|
006258  8ea0              LDRH     r0,[r4,#0x34]         ;9374  ; cntrl_stat_old
00625a  f8a40048          STRH     r0,[r4,#0x48]         ;9374
                  |L1.25182|
00625e  f8b40048          LDRH     r0,[r4,#0x48]         ;9375  ; cntrl_stat_new
006262  86a0              STRH     r0,[r4,#0x34]         ;9375
006264  8660              STRH     r0,[r4,#0x32]         ;9376
006266  4860              LDR      r0,|L1.25576|
006268  f9b00000          LDRSH    r0,[r0,#0]            ;9378  ; ICA_EN
00626c  b938              CBNZ     r0,|L1.25214|
00626e  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
006270  b129              CBZ      r1,|L1.25214|
;;;9381   			{
;;;9382   			cntrl_stat = ica_cntrl_hndl;
006272  495e              LDR      r1,|L1.25580|
006274  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
006276  8661              STRH     r1,[r4,#0x32]
;;;9383   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
006278  f8a41048          STRH     r1,[r4,#0x48]
;;;9384   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
00627c  86a1              STRH     r1,[r4,#0x34]
                  |L1.25214|
;;;9385   			}
;;;9386   		}
;;;9387   	
;;;9388   	if((ICA_EN==1)||(ICA_EN==2))
00627e  2801              CMP      r0,#1
006280  d001              BEQ      |L1.25222|
006282  2802              CMP      r0,#2
006284  d105              BNE      |L1.25234|
                  |L1.25222|
;;;9389   		{
;;;9390   		cntrl_stat=cntrl_stat_new+ica_u_necc;
006286  495a              LDR      r1,|L1.25584|
006288  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
00628c  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
00628e  4408              ADD      r0,r0,r1
006290  8660              STRH     r0,[r4,#0x32]
                  |L1.25234|
;;;9391   		}			
;;;9392   	}
;;;9393   #else
;;;9394   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9395   	{
;;;9396   	cntrl_hndl_plazma=37;
;;;9397   	cntrl_stat_new=cntrl_stat_old;
;;;9398   	
;;;9399   	if((Ibmax/10)>(2*IZMAX_))
;;;9400   		{
;;;9401   		cntrl_hndl_plazma=38;
;;;9402             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9403   		else	cntrl_stat_new-=10;
;;;9404   		}		
;;;9405   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9406   		{
;;;9407   		cntrl_hndl_plazma=39;
;;;9408             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9409             else	cntrl_stat_new-=3;
;;;9410   		}   
;;;9411   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9412   		{
;;;9413   		cntrl_hndl_plazma=40;
;;;9414   		cntrl_stat_new--;
;;;9415   		}
;;;9416   		
;;;9417   	else if(load_U<u_necc)
;;;9418   		{
;;;9419   		cntrl_hndl_plazma=41;
;;;9420   		if(load_U<(u_necc-(UB0-UB20)))
;;;9421   			{
;;;9422   			cntrl_hndl_plazma=42;
;;;9423   			if(Ibmax<0)
;;;9424   				{
;;;9425   				cntrl_hndl_plazma=43;
;;;9426                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9427   				else cntrl_stat_new+=10;
;;;9428   				}
;;;9429   			else if(Ibmax<(IZMAX_*5))
;;;9430   				{
;;;9431   				cntrl_hndl_plazma=44;
;;;9432                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9433   				else	cntrl_stat_new+=2;
;;;9434   				}
;;;9435   			else if(Ibmax<((IZMAX_*95)/10))
;;;9436   				{
;;;9437   				cntrl_hndl_plazma=45;
;;;9438   				cntrl_stat_new++;
;;;9439   				}					
;;;9440   			}
;;;9441   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9442   			{
;;;9443   			cntrl_hndl_plazma=46;
;;;9444   			if(Ibmax<(IZMAX_*5))
;;;9445   				{
;;;9446   				cntrl_hndl_plazma=47;
;;;9447                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9448   				else	cntrl_stat_new+=2;
;;;9449   				}
;;;9450   			else if(Ibmax<((IZMAX_*95)/10))
;;;9451   				{
;;;9452   				cntrl_hndl_plazma=48;
;;;9453   				cntrl_stat_new++;
;;;9454   				}					
;;;9455   			}	
;;;9456   		else if(load_U<(u_necc-1))
;;;9457   			{
;;;9458   			cntrl_hndl_plazma=49;
;;;9459   			if(Ibmax<((IZMAX_*95)/10))
;;;9460   				{
;;;9461   				cntrl_hndl_plazma=50;
;;;9462   				cntrl_stat_new++;
;;;9463   				}					
;;;9464   			}					
;;;9465   		}	
;;;9466   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9467   		{
;;;9468   		cntrl_hndl_plazma=51;
;;;9469   		if(load_U>(u_necc+(UB0-UB20)))
;;;9470   			{
;;;9471   			cntrl_hndl_plazma=52;
;;;9472                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9473   			else	cntrl_stat_new-=10;
;;;9474   			}
;;;9475   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9476   			{
;;;9477   			cntrl_hndl_plazma=53;
;;;9478                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9479   			else cntrl_stat_new-=2;
;;;9480   			}	
;;;9481   		else if(load_U>(u_necc+1))
;;;9482   			{
;;;9483   			cntrl_hndl_plazma=54;
;;;9484   			cntrl_stat_new--;
;;;9485   			}					
;;;9486   		}
;;;9487   
;;;9488   	gran(&cntrl_stat_new,10,1022);
;;;9489   				
;;;9490   	cntrl_stat_old=cntrl_stat_new;
;;;9491   	cntrl_stat=cntrl_stat_new;	
;;;9492   	}
;;;9493   #endif
;;;9494   
;;;9495   iiii=0;
006292  7625              STRB     r5,[r4,#0x18]
;;;9496   for(i=0;i<NUMIST;i++)
006294  75e5              STRB     r5,[r4,#0x17]
006296  4857              LDR      r0,|L1.25588|
006298  f9b01000          LDRSH    r1,[r0,#0]
00629c  e00c              B        |L1.25272|
                  |L1.25246|
;;;9497        {
;;;9498        if(bps[i]._cnt<30)iiii=1;
00629e  eb0002c0          ADD      r2,r0,r0,LSL #3
0062a2  eb021200          ADD      r2,r2,r0,LSL #4
0062a6  eb090282          ADD      r2,r9,r2,LSL #2
0062aa  78d2              LDRB     r2,[r2,#3]
0062ac  2a1e              CMP      r2,#0x1e
0062ae  d200              BCS      |L1.25266|
0062b0  7626              STRB     r6,[r4,#0x18]
                  |L1.25266|
0062b2  f1000001          ADD      r0,r0,#1              ;9496
0062b6  75e0              STRB     r0,[r4,#0x17]         ;9496
                  |L1.25272|
0062b8  7de0              LDRB     r0,[r4,#0x17]         ;9496  ; i
0062ba  4288              CMP      r0,r1                 ;9496
0062bc  dbef              BLT      |L1.25246|
;;;9499        }
;;;9500   
;;;9501   if(iiii==0)
0062be  7e20              LDRB     r0,[r4,#0x18]  ; iiii
0062c0  b948              CBNZ     r0,|L1.25302|
;;;9502   	{
;;;9503   	cntrl_stat=600;	
;;;9504   	cntrl_stat_old=600;
;;;9505   	cntrl_stat_new=600;
;;;9506   	cntrl_stat=10*PWM_START;
0062c2  484d              LDR      r0,|L1.25592|
0062c4  8800              LDRH     r0,[r0,#0]  ; PWM_START
0062c6  eb000080          ADD      r0,r0,r0,LSL #2
0062ca  ea4f0040          LSL      r0,r0,#1
0062ce  8660              STRH     r0,[r4,#0x32]
;;;9507   	cntrl_stat_old=10*PWM_START;
0062d0  86a0              STRH     r0,[r4,#0x34]
;;;9508   	cntrl_stat_new=10*PWM_START;
0062d2  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.25302|
;;;9509   	}
;;;9510   
;;;9511   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9512   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
0062d6  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
0062da  b110              CBZ      r0,|L1.25314|
0062dc  f1a00001          SUB      r0,r0,#1
0062e0  8038              STRH     r0,[r7,#0]
                  |L1.25314|
;;;9513   
;;;9514   
;;;9515   
;;;9516   #endif
;;;9517   
;;;9518   
;;;9519   gran(&cntrl_stat,10,1022); 
0062e2  483f              LDR      r0,|L1.25568|
0062e4  f24032fe          MOV      r2,#0x3fe
0062e8  210a              MOVS     r1,#0xa
0062ea  3816              SUBS     r0,r0,#0x16
0062ec  f7fffffe          BL       gran
;;;9520   b1Hz_ch=0;
0062f0  75a5              STRB     r5,[r4,#0x16]
                  |L1.25330|
;;;9521   }
0062f2  e8bd9ff0          POP      {r4-r12,pc}
;;;9522   #endif
                          ENDP

                  ext_drv PROC
;;;10011  //-----------------------------------------------
;;;10012  void ext_drv(void)
0062f6  e92d5ff0          PUSH     {r4-r12,lr}
;;;10013  {
;;;10014  char i;
;;;10015  
;;;10016  
;;;10017  for(i=0;i<NUMSK;i++)
0062fa  f04f0000          MOV      r0,#0
0062fe  4a40              LDR      r2,|L1.25600|
;;;10018  	{
;;;10019  	#ifdef UKU_MGTS
;;;10020  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10021  	#endif
;;;10022  	#ifdef UKU_RSTKM
;;;10023  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10024  	#endif
;;;10025  	#ifdef UKU_3U
;;;10026  	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10027  	#endif
;;;10028  	#ifdef UKU_GLONASS
;;;10029  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10030  	#endif
;;;10031  	#ifdef UKU_KONTUR
;;;10032  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10033  	#endif
;;;10034  	#ifdef UKU_6U
;;;10035  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10036  	#endif
;;;10037  	#ifdef UKU_220
;;;10038  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10039  	#endif
;;;10040  	#ifdef UKU_220_V2
;;;10041  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10042  	#endif
;;;10043  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10044  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10045  	#endif
;;;10046  	#ifdef UKU_TELECORE2015	
;;;10047  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10048  	#endif
;;;10049  	#ifdef UKU_TELECORE2017
;;;10050  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10051  	#endif
;;;10052  	#ifdef IPS_SGEP_GAZPROM
;;;10053  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10054  	#endif		
;;;10055  		{
;;;10056  		if(sk_cnt[i]<10)
006300  4b3e              LDR      r3,|L1.25596|
;;;10057  			{
;;;10058  			sk_cnt[i]++;
;;;10059  			if(sk_cnt[i]>=10)
;;;10060  				{
;;;10061  				sk_stat[i]=ssON;
006302  4d34              LDR      r5,|L1.25556|
006304  f04f0a01          MOV      r10,#1
;;;10062  				}
;;;10063  			}
;;;10064  		else 
;;;10065  			{
;;;10066  			sk_cnt[i]=10;
006308  f04f0b0a          MOV      r11,#0xa
00630c  4606              MOV      r6,r0                 ;10017
00630e  f9b24000          LDRSH    r4,[r2,#0]            ;10017
006312  e025              B        |L1.25440|
                  |L1.25364|
006314  493b              LDR      r1,|L1.25604|
006316  4f3c              LDR      r7,|L1.25608|
006318  5c09              LDRB     r1,[r1,r0]            ;10044
00631a  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10044
00631e  f5b16ffa          CMP      r1,#0x7d0             ;10044
006322  da0e              BGE      |L1.25410|
006324  5619              LDRSB    r1,[r3,r0]            ;10056
006326  290a              CMP      r1,#0xa               ;10056
006328  da08              BGE      |L1.25404|
00632a  f1010101          ADD      r1,r1,#1              ;10058
00632e  b249              SXTB     r1,r1                 ;10058
006330  5419              STRB     r1,[r3,r0]            ;10058
006332  290a              CMP      r1,#0xa               ;10059
006334  db11              BLT      |L1.25434|
006336  f805a000          STRB     r10,[r5,r0]           ;10061
00633a  e00e              B        |L1.25434|
                  |L1.25404|
00633c  f803b000          STRB     r11,[r3,r0]
006340  e00b              B        |L1.25434|
                  |L1.25410|
;;;10067  			}
;;;10068                 
;;;10069  		}
;;;10070  	else
;;;10071  		{
;;;10072  		if(sk_cnt[i]>0)
006342  5619              LDRSB    r1,[r3,r0]
006344  2900              CMP      r1,#0
006346  dd07              BLE      |L1.25432|
;;;10073  			{
;;;10074  			sk_cnt[i]--;
006348  f1a10101          SUB      r1,r1,#1
00634c  b249              SXTB     r1,r1
00634e  5419              STRB     r1,[r3,r0]
;;;10075  			if(sk_cnt[i]<=0)
006350  2900              CMP      r1,#0
006352  dc02              BGT      |L1.25434|
;;;10076  				{
;;;10077  				sk_stat[i]=ssOFF;
006354  542e              STRB     r6,[r5,r0]
006356  e000              B        |L1.25434|
                  |L1.25432|
;;;10078  				}
;;;10079  			}
;;;10080  		else 
;;;10081  			{
;;;10082  			sk_cnt[i]=0;
006358  541e              STRB     r6,[r3,r0]
                  |L1.25434|
00635a  f1000001          ADD      r0,r0,#1              ;10017
00635e  b2c0              UXTB     r0,r0                 ;10017
                  |L1.25440|
006360  42a0              CMP      r0,r4                 ;10017
006362  dbd7              BLT      |L1.25364|
;;;10083  			}
;;;10084  		}
;;;10085  	}
;;;10086  
;;;10087  for(i=0;i<NUMSK;i++)
006364  f04f0400          MOV      r4,#0
;;;10088  	{
;;;10089  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10090  		{
;;;10091  		if(sk_av_cnt[i]<10)
006368  f8df90a0          LDR      r9,|L1.25612|
;;;10092  			{
;;;10093  			sk_av_cnt[i]++;
;;;10094  			if(sk_av_cnt[i]>=10)
;;;10095  				{
;;;10096  				sk_av_stat[i]=sasON;
00636c  4f28              LDR      r7,|L1.25616|
;;;10097  				}
;;;10098  			}
;;;10099  		else 
;;;10100  			{
;;;10101  			sk_av_cnt[i]=10;
;;;10102  			}
;;;10103  		}
;;;10104  	else
;;;10105  		{
;;;10106  		if(sk_av_cnt[i]>=0)
;;;10107  			{
;;;10108  			sk_av_cnt[i]--;
;;;10109  			if(sk_av_cnt[i]<=0)
;;;10110  				{
;;;10111  				sk_av_stat[i]=sasOFF;
;;;10112  				}
;;;10113  			}
;;;10114  		else 
;;;10115  			{
;;;10116  			sk_av_cnt[i]=0;
;;;10117  			}
;;;10118  		}
;;;10119  
;;;10120  #ifndef UKU_KONTUR
;;;10121  	if(sk_av_stat_old[i]!=sk_av_stat[i])
00636e  f8df80a4          LDR      r8,|L1.25620|
006372  e0b1              B        |L1.25816|
                  |L1.25460|
006374  4828              LDR      r0,|L1.25624|
006376  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10089
00637a  b910              CBNZ     r0,|L1.25474|
00637c  5d29              LDRB     r1,[r5,r4]            ;10089
00637e  2901              CMP      r1,#1                 ;10089
006380  d00f              BEQ      |L1.25506|
                  |L1.25474|
006382  b108              CBZ      r0,|L1.25480|
006384  5d28              LDRB     r0,[r5,r4]            ;10089
006386  b160              CBZ      r0,|L1.25506|
                  |L1.25480|
006388  f9190004          LDRSB    r0,[r9,r4]            ;10106
00638c  2800              CMP      r0,#0                 ;10106
00638e  db48              BLT      |L1.25634|
006390  f1a00001          SUB      r0,r0,#1              ;10108
006394  b240              SXTB     r0,r0                 ;10108
006396  f8090004          STRB     r0,[r9,r4]            ;10108
00639a  2800              CMP      r0,#0                 ;10109
00639c  dc43              BGT      |L1.25638|
00639e  553e              STRB     r6,[r7,r4]            ;10111
0063a0  e041              B        |L1.25638|
                  |L1.25506|
0063a2  f9190004          LDRSB    r0,[r9,r4]            ;10091
0063a6  280a              CMP      r0,#0xa               ;10091
0063a8  da38              BGE      |L1.25628|
0063aa  f1000001          ADD      r0,r0,#1              ;10093
0063ae  b240              SXTB     r0,r0                 ;10093
0063b0  f8090004          STRB     r0,[r9,r4]            ;10093
0063b4  280a              CMP      r0,#0xa               ;10094
0063b6  db36              BLT      |L1.25638|
0063b8  f807a004          STRB     r10,[r7,r4]           ;10096
0063bc  e033              B        |L1.25638|
0063be  0000              DCW      0x0000
                  |L1.25536|
                          DCD      bIBAT_SMKLBR
                  |L1.25540|
                          DCD      UB0
                  |L1.25544|
                          DCD      UB20
                  |L1.25548|
                          DCD      TERMOKOMPENS
                  |L1.25552|
                          DCD      hv_vz_stat
                  |L1.25556|
                          DCD      sk_stat
                  |L1.25560|
                          DCD      sk_stat_old
                  |L1.25564|
                          DCD      VZ_KIND
                  |L1.25568|
                          DCD      ||area_number.25||+0x48
                  |L1.25572|
                          DCD      net_av_2min_timer
                  |L1.25576|
                          DCD      ICA_EN
                  |L1.25580|
                          DCD      ica_cntrl_hndl
                  |L1.25584|
                          DCD      ica_u_necc
                  |L1.25588|
                          DCD      NUMIST
                  |L1.25592|
                          DCD      PWM_START
                  |L1.25596|
                          DCD      sk_cnt
                  |L1.25600|
                          DCD      NUMSK
                  |L1.25604|
                          DCD      ||area_number.19||
                  |L1.25608|
                          DCD      ||.bss||+0x40c
                  |L1.25612|
                          DCD      sk_av_cnt
                  |L1.25616|
                          DCD      sk_av_stat
                  |L1.25620|
                          DCD      sk_av_stat_old
                  |L1.25624|
                          DCD      SK_SIGN
                  |L1.25628|
00641c  f809b004          STRB     r11,[r9,r4]           ;10101
006420  e001              B        |L1.25638|
                  |L1.25634|
006422  f8096004          STRB     r6,[r9,r4]            ;10116
                  |L1.25638|
006426  f8181004          LDRB     r1,[r8,r4]
00642a  5d38              LDRB     r0,[r7,r4]
00642c  4281              CMP      r1,r0
00642e  d04d              BEQ      |L1.25804|
;;;10122  		{
;;;10123  		plazma_sk++;
006430  4af8              LDR      r2,|L1.26644|
006432  8811              LDRH     r1,[r2,#0]  ; plazma_sk
006434  f1010101          ADD      r1,r1,#1
006438  8011              STRH     r1,[r2,#0]
;;;10124  		if(sk_av_stat[i]==sasON)
00643a  2801              CMP      r0,#1
00643c  d007              BEQ      |L1.25678|
;;;10125  			{
;;;10126  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10127  			else if(i==1)
;;;10128  				{
;;;10129  				#ifndef UKU_TELEKORE2017
;;;10130  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10131  				#endif
;;;10132  				#ifdef UKU_TELEKORE2017
;;;10133  				snmp_trap_send("Door open",15,2,1);
;;;10134  				#endif
;;;10135  				}
;;;10136  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10137  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10138  			}
;;;10139  		else 
;;;10140  			{
;;;10141  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
00643e  b354              CBZ      r4,|L1.25750|
;;;10142  			else if(i==1)
006440  2c01              CMP      r4,#1
006442  d02f              BEQ      |L1.25764|
;;;10143  				{
;;;10144  				#ifndef UKU_TELEKORE2017
;;;10145  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10146  				#endif
;;;10147  				#ifdef UKU_TELEKORE2017
;;;10148  				snmp_trap_send("Door open clear",15,2,0);
;;;10149  				#endif
;;;10150  				}
;;;10151  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
006444  2c02              CMP      r4,#2
006446  d034              BEQ      |L1.25778|
;;;10152  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
006448  2c03              CMP      r4,#3
00644a  d039              BEQ      |L1.25792|
00644c  e03e              B        |L1.25804|
                  |L1.25678|
00644e  b134              CBZ      r4,|L1.25694|
006450  2c01              CMP      r4,#1                 ;10127
006452  d00b              BEQ      |L1.25708|
006454  2c02              CMP      r4,#2                 ;10136
006456  d010              BEQ      |L1.25722|
006458  2c03              CMP      r4,#3                 ;10137
00645a  d015              BEQ      |L1.25736|
00645c  e036              B        |L1.25804|
                  |L1.25694|
00645e  2301              MOVS     r3,#1                 ;10126
006460  461a              MOV      r2,r3                 ;10126
006462  210f              MOVS     r1,#0xf               ;10126
006464  a0ec              ADR      r0,|L1.26648|
006466  f7fffffe          BL       snmp_trap_send
00646a  e02f              B        |L1.25804|
                  |L1.25708|
00646c  2301              MOVS     r3,#1                 ;10130
00646e  2202              MOVS     r2,#2                 ;10130
006470  210f              MOVS     r1,#0xf               ;10130
006472  a0ec              ADR      r0,|L1.26660|
006474  f7fffffe          BL       snmp_trap_send
006478  e028              B        |L1.25804|
                  |L1.25722|
00647a  2301              MOVS     r3,#1                 ;10136
00647c  2203              MOVS     r2,#3                 ;10136
00647e  210f              MOVS     r1,#0xf               ;10136
006480  a0eb              ADR      r0,|L1.26672|
006482  f7fffffe          BL       snmp_trap_send
006486  e021              B        |L1.25804|
                  |L1.25736|
006488  2301              MOVS     r3,#1                 ;10137
00648a  2204              MOVS     r2,#4                 ;10137
00648c  210f              MOVS     r1,#0xf               ;10137
00648e  a0eb              ADR      r0,|L1.26684|
006490  f7fffffe          BL       snmp_trap_send
006494  e01a              B        |L1.25804|
                  |L1.25750|
006496  2300              MOVS     r3,#0                 ;10141
006498  2201              MOVS     r2,#1                 ;10141
00649a  210f              MOVS     r1,#0xf               ;10141
00649c  a0ea              ADR      r0,|L1.26696|
00649e  f7fffffe          BL       snmp_trap_send
0064a2  e013              B        |L1.25804|
                  |L1.25764|
0064a4  2300              MOVS     r3,#0                 ;10145
0064a6  2202              MOVS     r2,#2                 ;10145
0064a8  210f              MOVS     r1,#0xf               ;10145
0064aa  a0ec              ADR      r0,|L1.26716|
0064ac  f7fffffe          BL       snmp_trap_send
0064b0  e00c              B        |L1.25804|
                  |L1.25778|
0064b2  2300              MOVS     r3,#0                 ;10151
0064b4  2203              MOVS     r2,#3                 ;10151
0064b6  210f              MOVS     r1,#0xf               ;10151
0064b8  a0ed              ADR      r0,|L1.26736|
0064ba  f7fffffe          BL       snmp_trap_send
0064be  e005              B        |L1.25804|
                  |L1.25792|
0064c0  2300              MOVS     r3,#0
0064c2  2204              MOVS     r2,#4
0064c4  210f              MOVS     r1,#0xf
0064c6  a0ef              ADR      r0,|L1.26756|
0064c8  f7fffffe          BL       snmp_trap_send
                  |L1.25804|
;;;10153  			}
;;;10154  	 	}
;;;10155  #endif
;;;10156  
;;;10157  #ifdef UKU_KONTUR
;;;10158  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10159  		{
;;;10160  		plazma_sk++;
;;;10161  		if(sk_av_stat[i]==sasON)
;;;10162  			{
;;;10163  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10164  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10165  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10166  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10167  			}
;;;10168  		else 
;;;10169  			{
;;;10170  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10171  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10172  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10173  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10174  			}
;;;10175  	 	}
;;;10176  #endif
;;;10177  	sk_av_stat_old[i]=sk_av_stat[i];
0064cc  5d38              LDRB     r0,[r7,r4]
0064ce  f8080004          STRB     r0,[r8,r4]
0064d2  f1040401          ADD      r4,r4,#1              ;10087
0064d6  b2e4              UXTB     r4,r4                 ;10087
                  |L1.25816|
0064d8  48ef              LDR      r0,|L1.26776|
0064da  f9b00000          LDRSH    r0,[r0,#0]            ;10087  ; NUMSK
0064de  4284              CMP      r4,r0                 ;10087
0064e0  f6ffaf48          BLT      |L1.25460|
;;;10178  	}
;;;10179  }
0064e4  e705              B        |L1.25330|
;;;10180  
                          ENDP

                  zar_superviser_start PROC
;;;10217  //-----------------------------------------------
;;;10218  void zar_superviser_start(void)
0064e6  4aed              LDR      r2,|L1.26780|
;;;10219  {
;;;10220  sign_U[0]=1;
0064e8  f04f0001          MOV      r0,#1
0064ec  7010              STRB     r0,[r2,#0]
;;;10221  sign_I[0]=1;
0064ee  49ec              LDR      r1,|L1.26784|
0064f0  7008              STRB     r0,[r1,#0]
;;;10222  sign_U[1]=1;
0064f2  7050              STRB     r0,[r2,#1]
;;;10223  sign_I[1]=1;
0064f4  7048              STRB     r0,[r1,#1]
;;;10224  
;;;10225  }
0064f6  4770              BX       lr
;;;10226  
                          ENDP

                  zar_superviser_drv PROC
;;;10182  //-----------------------------------------------
;;;10183  void zar_superviser_drv(void)
0064f8  e92d5ff0          PUSH     {r4-r12,lr}
;;;10184  {
;;;10185  
;;;10186  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
0064fc  48ea              LDR      r0,|L1.26792|
0064fe  f8df93ac          LDR      r9,|L1.26796|
006502  f8df83a0          LDR      r8,|L1.26788|
006506  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
00650a  f9b90000          LDRSH    r0,[r9,#0]
00650e  4cc1              LDR      r4,|L1.26644|
006510  ebc01100          RSB      r1,r0,r0,LSL #4
006514  3c46              SUBS     r4,r4,#0x46
006516  f9b87002          LDRSH    r7,[r8,#2]  ; bat
00651a  f06f0a1d          MVN      r10,#0x1d
00651e  f06f0b95          MVN      r11,#0x95
006522  2500              MOVS     r5,#0
006524  4edd              LDR      r6,|L1.26780|
006526  f9b40052          LDRSH    r0,[r4,#0x52]
00652a  eb0a0281          ADD      r2,r10,r1,LSL #2
00652e  eb0b0381          ADD      r3,r11,r1,LSL #2
006532  4567              CMP      r7,r12
006534  dc05              BGT      |L1.25922|
006536  f8dfc378          LDR      r12,|L1.26800|
00653a  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
00653e  4567              CMP      r7,r12
006540  da04              BGE      |L1.25932|
                  |L1.25922|
006542  4282              CMP      r2,r0
006544  dd02              BLE      |L1.25932|
006546  4283              CMP      r3,r0
006548  da00              BGE      |L1.25932|
00654a  7035              STRB     r5,[r6,#0]
                  |L1.25932|
;;;10187  
;;;10188  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
00654c  4fd9              LDR      r7,|L1.26804|
00654e  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
006552  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
006556  4fd2              LDR      r7,|L1.26784|
006558  ebbc0f4e          CMP      r12,lr,LSL #1
00655c  dc04              BGT      |L1.25960|
00655e  f1ce0e00          RSB      lr,lr,#0
006562  ebbc0f4e          CMP      r12,lr,LSL #1
006566  da04              BGE      |L1.25970|
                  |L1.25960|
006568  4282              CMP      r2,r0
00656a  dd02              BLE      |L1.25970|
00656c  4283              CMP      r3,r0
00656e  da00              BGE      |L1.25970|
006570  703d              STRB     r5,[r7,#0]
                  |L1.25970|
;;;10189  																 
;;;10190  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
006572  f06f0209          MVN      r2,#9
006576  eb020181          ADD      r1,r2,r1,LSL #2
00657a  4281              CMP      r1,r0
00657c  d121              BNE      |L1.26050|
00657e  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
006582  b9f0              CBNZ     r0,|L1.26050|
;;;10191  	{
;;;10192  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
006584  7830              LDRB     r0,[r6,#0]  ; sign_U
006586  2801              CMP      r0,#1
006588  d11b              BNE      |L1.26050|
00658a  7838              LDRB     r0,[r7,#0]  ; sign_I
00658c  2801              CMP      r0,#1
00658e  d118              BNE      |L1.26050|
006590  f44f70ef          MOV      r0,#0x1de
006594  f7fffffe          BL       lc640_read_int
006598  49c7              LDR      r1,|L1.26808|
00659a  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
00659e  4288              CMP      r0,r1
0065a0  d00f              BEQ      |L1.26050|
0065a2  48c6              LDR      r0,|L1.26812|
0065a4  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0065a6  b160              CBZ      r0,|L1.26050|
0065a8  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
0065ac  07c0              LSLS     r0,r0,#31
0065ae  d108              BNE      |L1.26050|
;;;10193  		{
;;;10194  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
0065b0  f44f70ef          MOV      r0,#0x1de
0065b4  f7fffffe          BL       lc640_write_int
;;;10195  		superviser_cnt++;
0065b8  48c1              LDR      r0,|L1.26816|
0065ba  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0065bc  f1010101          ADD      r1,r1,#1
0065c0  7001              STRB     r1,[r0,#0]
                  |L1.26050|
;;;10196  		}
;;;10197  	
;;;10198  	}
;;;10199  
;;;10200  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
0065c2  48b9              LDR      r0,|L1.26792|
0065c4  f9b81002          LDRSH    r1,[r8,#2]  ; bat
0065c8  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
0065cc  4281              CMP      r1,r0
0065ce  dc06              BGT      |L1.26078|
0065d0  48b7              LDR      r0,|L1.26800|
0065d2  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
0065d6  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
0065da  4281              CMP      r1,r0
0065dc  da0e              BGE      |L1.26108|
                  |L1.26078|
0065de  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0065e2  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0065e6  ebc01000          RSB      r0,r0,r0,LSL #4
0065ea  eb0a0280          ADD      r2,r10,r0,LSL #2
0065ee  428a              CMP      r2,r1
0065f0  dd04              BLE      |L1.26108|
0065f2  eb0b0080          ADD      r0,r11,r0,LSL #2
0065f6  4288              CMP      r0,r1
0065f8  da00              BGE      |L1.26108|
0065fa  7075              STRB     r5,[r6,#1]
                  |L1.26108|
;;;10201  
;;;10202  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
0065fc  49ad              LDR      r1,|L1.26804|
0065fe  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
006602  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
006606  ebb00f41          CMP      r0,r1,LSL #1
00660a  dc03              BGT      |L1.26132|
00660c  4249              RSBS     r1,r1,#0
00660e  ebb00f41          CMP      r0,r1,LSL #1
006612  da0e              BGE      |L1.26162|
                  |L1.26132|
006614  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006618  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00661c  ebc01000          RSB      r0,r0,r0,LSL #4
006620  eb0a0280          ADD      r2,r10,r0,LSL #2
006624  428a              CMP      r2,r1
006626  dd04              BLE      |L1.26162|
006628  eb0b0080          ADD      r0,r11,r0,LSL #2
00662c  4288              CMP      r0,r1
00662e  da00              BGE      |L1.26162|
006630  707d              STRB     r5,[r7,#1]
                  |L1.26162|
;;;10203  																 
;;;10204  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
006632  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006636  ebc01100          RSB      r1,r0,r0,LSL #4
00663a  f06f0009          MVN      r0,#9
00663e  eb000081          ADD      r0,r0,r1,LSL #2
006642  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006646  4288              CMP      r0,r1
006648  d122              BNE      |L1.26256|
00664a  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00664e  b9f8              CBNZ     r0,|L1.26256|
;;;10205  	{
;;;10206  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
006650  7870              LDRB     r0,[r6,#1]  ; sign_U
006652  2801              CMP      r0,#1
006654  d11c              BNE      |L1.26256|
006656  7878              LDRB     r0,[r7,#1]  ; sign_I
006658  2801              CMP      r0,#1
00665a  d119              BNE      |L1.26256|
00665c  f44f75fe          MOV      r5,#0x1fc
006660  4628              MOV      r0,r5
006662  f7fffffe          BL       lc640_read_int
006666  4994              LDR      r1,|L1.26808|
006668  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
00666c  4288              CMP      r0,r1
00666e  d00f              BEQ      |L1.26256|
006670  4892              LDR      r0,|L1.26812|
006672  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006674  2802              CMP      r0,#2
006676  d10b              BNE      |L1.26256|
006678  f8980089          LDRB     r0,[r8,#0x89]  ; bat
00667c  07c0              LSLS     r0,r0,#31
00667e  d107              BNE      |L1.26256|
;;;10207  		{
;;;10208  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
006680  4628              MOV      r0,r5
006682  f7fffffe          BL       lc640_write_int
;;;10209  		superviser_cnt++;
006686  488e              LDR      r0,|L1.26816|
006688  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
00668a  f1010101          ADD      r1,r1,#1
00668e  7001              STRB     r1,[r0,#0]
                  |L1.26256|
;;;10210  		}
;;;10211  	
;;;10212  	}
;;;10213  
;;;10214  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006690  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006694  f06f0101          MVN      r1,#1
006698  ebc01000          RSB      r0,r0,r0,LSL #4
00669c  eb010080          ADD      r0,r1,r0,LSL #2
0066a0  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0066a4  4288              CMP      r0,r1
0066a6  d102              BNE      |L1.26286|
0066a8  e8bd5ff0          POP      {r4-r12,lr}
0066ac  e7fe              B        zar_superviser_start
                  |L1.26286|
;;;10215  }
0066ae  e620              B        |L1.25330|
;;;10216  
                          ENDP

                  npn_hndl PROC
;;;10227  //-----------------------------------------------
;;;10228  void npn_hndl(void)
0066b0  e92d03f0          PUSH     {r4-r9}
;;;10229  {
;;;10230  if(NPN_OUT!=npnoOFF)
0066b4  4883              LDR      r0,|L1.26820|
;;;10231  	{
;;;10232  /*	if(NPN_SIGN==npnsAVNET)
;;;10233  		{
;;;10234  		if(net_av==1)
;;;10235  			{
;;;10236  			if(npn_tz_cnt<TZNPN)
;;;10237  				{
;;;10238  				npn_tz_cnt++;
;;;10239  				if(npn_tz_cnt==TZNPN)
;;;10240  					{
;;;10241  					npn_stat=npnsOFF;
;;;10242  					}
;;;10243  				}
;;;10244  			}
;;;10245  		else
;;;10246  			{
;;;10247  			if(npn_tz_cnt)
;;;10248  				{
;;;10249  				npn_tz_cnt--;
;;;10250  				if(npn_tz_cnt==0)
;;;10251  					{
;;;10252  					npn_stat=npnsON;
;;;10253  					}
;;;10254  				}
;;;10255  			}
;;;10256  		}*/
;;;10257  /*	if(NPN_SIGN==npnsULOAD)
;;;10258  		{
;;;10259  		if(load_U<UONPN)
;;;10260  			{
;;;10261  			if(npn_tz_cnt<TZNPN)
;;;10262  				{
;;;10263  				npn_tz_cnt++;
;;;10264  				if(npn_tz_cnt==TZNPN)
;;;10265  					{
;;;10266  					npn_stat=npnsOFF;
;;;10267  					}
;;;10268  				}
;;;10269  			}
;;;10270  		else if(load_U>UVNPN)
;;;10271  			{
;;;10272  			if(npn_tz_cnt)
;;;10273  				{
;;;10274  				npn_tz_cnt--;
;;;10275  				if(npn_tz_cnt==0)
;;;10276  					{
;;;10277  					npn_stat=npnsON;
;;;10278  					}
;;;10279  				}
;;;10280  			}
;;;10281  		}*/
;;;10282  
;;;10283  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10284  		{
;;;10285  		if(npn_tz_cnt<TZNPN)
0066b6  4f84              LDR      r7,|L1.26824|
;;;10286  			{
;;;10287  			npn_tz_cnt++;
;;;10288  			if(npn_tz_cnt==TZNPN)
;;;10289  				{
;;;10290  				npn_stat=npnsOFF;
0066b8  4e84              LDR      r6,|L1.26828|
0066ba  7800              LDRB     r0,[r0,#0]            ;10230  ; NPN_OUT
0066bc  f04f0c00          MOV      r12,#0                ;10230
;;;10291  				}
;;;10292  			}
;;;10293  		}
;;;10294  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10295  		{
;;;10296  		if(npn_tz_cnt)
;;;10297  			{
;;;10298  			npn_tz_cnt--;
;;;10299  			if(npn_tz_cnt==0)
;;;10300  				{
;;;10301  				npn_stat=npnsON;
0066c0  f04f0801          MOV      r8,#1
0066c4  b3e8              CBZ      r0,|L1.26434|
0066c6  4882              LDR      r0,|L1.26832|
0066c8  4639              MOV      r1,r7                 ;10285
0066ca  f9b05000          LDRSH    r5,[r0,#0]            ;10283  ; load_U
0066ce  4881              LDR      r0,|L1.26836|
0066d0  f9b11000          LDRSH    r1,[r1,#0]            ;10285
0066d4  f9b09000          LDRSH    r9,[r0,#0]            ;10283  ; UONPN
0066d8  487f              LDR      r0,|L1.26840|
0066da  454d              CMP      r5,r9                 ;10283
0066dc  f9b02000          LDRSH    r2,[r0,#0]            ;10283
0066e0  487e              LDR      r0,|L1.26844|
0066e2  f9b03000          LDRSH    r3,[r0,#0]            ;10283
0066e6  487e              LDR      r0,|L1.26848|
0066e8  f9b04000          LDRSH    r4,[r0,#0]            ;10283
0066ec  487d              LDR      r0,|L1.26852|
0066ee  f9b00000          LDRSH    r0,[r0,#0]            ;10283
0066f2  da13              BGE      |L1.26396|
0066f4  4282              CMP      r2,r0                 ;10283
0066f6  db03              BLT      |L1.26368|
0066f8  4283              CMP      r3,r0                 ;10283
0066fa  db01              BLT      |L1.26368|
0066fc  4284              CMP      r4,r0                 ;10283
0066fe  da0d              BGE      |L1.26396|
                  |L1.26368|
006700  4879              LDR      r0,|L1.26856|
006702  f9b02000          LDRSH    r2,[r0,#0]            ;10285  ; TZNPN
006706  4291              CMP      r1,r2                 ;10285
006708  da23              BGE      |L1.26450|
00670a  f1010101          ADD      r1,r1,#1              ;10287
00670e  b208              SXTH     r0,r1                 ;10287
006710  8038              STRH     r0,[r7,#0]            ;10287
006712  4290              CMP      r0,r2                 ;10288
006714  d11d              BNE      |L1.26450|
006716  f886c000          STRB     r12,[r6,#0]           ;10290
00671a  e01a              B        |L1.26450|
                  |L1.26396|
00671c  f8dfc1cc          LDR      r12,|L1.26860|
006720  f9bcc000          LDRSH    r12,[r12,#0]          ;10294  ; UVNPN
006724  4565              CMP      r5,r12                ;10294
006726  dd14              BLE      |L1.26450|
006728  4282              CMP      r2,r0                 ;10294
00672a  dd12              BLE      |L1.26450|
00672c  4283              CMP      r3,r0                 ;10294
00672e  dd10              BLE      |L1.26450|
006730  4284              CMP      r4,r0                 ;10294
006732  dd0e              BLE      |L1.26450|
006734  b169              CBZ      r1,|L1.26450|
006736  f1a10101          SUB      r1,r1,#1              ;10298
00673a  b208              SXTH     r0,r1                 ;10298
00673c  8038              STRH     r0,[r7,#0]            ;10298
00673e  b940              CBNZ     r0,|L1.26450|
006740  e000              B        |L1.26436|
                  |L1.26434|
006742  e002              B        |L1.26442|
                  |L1.26436|
006744  f8868000          STRB     r8,[r6,#0]
006748  e003              B        |L1.26450|
                  |L1.26442|
;;;10302  				}
;;;10303  			}
;;;10304  		}
;;;10305  	}
;;;10306  else
;;;10307  	{
;;;10308  	npn_tz_cnt=0;
00674a  f8a7c000          STRH     r12,[r7,#0]
;;;10309  	npn_stat=npnsON;
00674e  f8868000          STRB     r8,[r6,#0]
                  |L1.26450|
;;;10310  	}
;;;10311  
;;;10312  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
006752  7830              LDRB     r0,[r6,#0]  ; npn_stat
006754  2800              CMP      r0,#0
006756  d107              BNE      |L1.26472|
006758  e8bd03f0          POP      {r4-r9}
00675c  230f              MOVS     r3,#0xf
00675e  2201              MOVS     r2,#1
006760  216e              MOVS     r1,#0x6e
006762  20d2              MOVS     r0,#0xd2
006764  f7ffbffe          B.W      mess_send
                  |L1.26472|
;;;10313  
;;;10314  
;;;10315  }
006768  e8bd03f0          POP      {r4-r9}
00676c  4770              BX       lr
;;;10316  
                          ENDP

                  loadoff_hndl PROC
;;;10318  //-----------------------------------------------
;;;10319  void loadoff_hndl(void)
00676e  b5f0              PUSH     {r4-r7,lr}
;;;10320  {
;;;10321  if((load_U>UONPN)||(load_U<UVNPN))
006770  4857              LDR      r0,|L1.26832|
;;;10322  	{
;;;10323  	if(load_off_cnt<TZNPN)
006772  4d5f              LDR      r5,|L1.26864|
;;;10324  		{
;;;10325  		load_off_cnt++;
;;;10326  		if(load_off_cnt>=TZNPN)
;;;10327  			{
;;;10328  			load_off_stat=npnsOFF;
006774  2700              MOVS     r7,#0
006776  f9b01000          LDRSH    r1,[r0,#0]            ;10321  ; load_U
00677a  4856              LDR      r0,|L1.26836|
00677c  4e5d              LDR      r6,|L1.26868|
00677e  f9b02000          LDRSH    r2,[r0,#0]            ;10321  ; UONPN
006782  f9b50000          LDRSH    r0,[r5,#0]            ;10323
006786  4291              CMP      r1,r2                 ;10321
006788  dc04              BGT      |L1.26516|
00678a  4b58              LDR      r3,|L1.26860|
00678c  f9b33000          LDRSH    r3,[r3,#0]            ;10321  ; UVNPN
006790  4299              CMP      r1,r3                 ;10321
006792  da0d              BGE      |L1.26544|
                  |L1.26516|
006794  4954              LDR      r1,|L1.26856|
006796  f9b11000          LDRSH    r1,[r1,#0]            ;10323  ; TZNPN
00679a  4288              CMP      r0,r1                 ;10323
00679c  da1c              BGE      |L1.26584|
00679e  f1000001          ADD      r0,r0,#1              ;10325
0067a2  b200              SXTH     r0,r0                 ;10325
0067a4  8028              STRH     r0,[r5,#0]            ;10325
0067a6  4288              CMP      r0,r1                 ;10326
0067a8  db16              BLT      |L1.26584|
0067aa  7037              STRB     r7,[r6,#0]
;;;10329  			load_off_cnt=TZNPN;
0067ac  8029              STRH     r1,[r5,#0]
0067ae  e013              B        |L1.26584|
                  |L1.26544|
;;;10330  			}
;;;10331  		}
;;;10332  	}
;;;10333  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
0067b0  4c51              LDR      r4,|L1.26872|
0067b2  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
0067b6  4423              ADD      r3,r3,r4
0067b8  428b              CMP      r3,r1
0067ba  da0d              BGE      |L1.26584|
0067bc  1b12              SUBS     r2,r2,r4
0067be  428a              CMP      r2,r1
0067c0  dd0a              BLE      |L1.26584|
;;;10334  	{
;;;10335  	if(load_off_cnt)
0067c2  b148              CBZ      r0,|L1.26584|
;;;10336  		{
;;;10337  		load_off_cnt--;
0067c4  f1a00001          SUB      r0,r0,#1
0067c8  b200              SXTH     r0,r0
0067ca  8028              STRH     r0,[r5,#0]
;;;10338  		if(load_off_cnt<=0)
0067cc  2800              CMP      r0,#0
0067ce  dc03              BGT      |L1.26584|
;;;10339  			{
;;;10340  			load_off_stat=npnsON;
0067d0  f04f0001          MOV      r0,#1
0067d4  7030              STRB     r0,[r6,#0]
;;;10341  			load_off_cnt=0;
0067d6  802f              STRH     r7,[r5,#0]
                  |L1.26584|
;;;10342  			}
;;;10343  		}
;;;10344  	}
;;;10345  
;;;10346  
;;;10347  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
0067d8  7830              LDRB     r0,[r6,#0]  ; load_off_stat
0067da  2800              CMP      r0,#0
0067dc  d103              BNE      |L1.26598|
0067de  4947              LDR      r1,|L1.26876|
0067e0  f04f000a          MOV      r0,#0xa
0067e4  7008              STRB     r0,[r1,#0]
                  |L1.26598|
;;;10348  
;;;10349  
;;;10350  }
0067e6  bdf0              POP      {r4-r7,pc}
;;;10351  
                          ENDP

                  speedChargeStartStop PROC
;;;10539  //-----------------------------------------------
;;;10540  void speedChargeStartStop(void)
0067e8  b538              PUSH     {r3-r5,lr}
;;;10541  {
;;;10542  spch_plazma[1]++;
0067ea  4c45              LDR      r4,|L1.26880|
0067ec  7860              LDRB     r0,[r4,#1]  ; spch_plazma
0067ee  f1000001          ADD      r0,r0,#1
0067f2  7060              STRB     r0,[r4,#1]
;;;10543  /*if(speedChIsOn)
;;;10544  	{
;;;10545  	speedChIsOn=0;
;;;10546  	}
;;;10547  
;;;10548  else
;;;10549  	{
;;;10550  	if(speedChrgBlckStat==0)
;;;10551  		{
;;;10552  		speedChIsOn=1;
;;;10553  		speedChTimeCnt=0;
;;;10554  		}
;;;10555  	else
;;;10556  		{
;;;10557  		show_mess(	"     Ускоренный     ",
;;;10558  	          		"       заряд        ",
;;;10559  	          		"    заблокирован!   ",
;;;10560  	          		"                    ",2000);	 
;;;10561  		}
;;;10562  	}*/
;;;10563  
;;;10564  if(sp_ch_stat!=scsOFF)
0067f4  4843              LDR      r0,|L1.26884|
0067f6  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
0067f8  b151              CBZ      r1,|L1.26640|
;;;10565  	{
;;;10566  	sp_ch_stat=scsOFF;
0067fa  f04f0100          MOV      r1,#0
0067fe  7001              STRB     r1,[r0,#0]
;;;10567  	speedz_mem_hndl(10);
006800  f04f000a          MOV      r0,#0xa
006804  f7fffffe          BL       speedz_mem_hndl
;;;10568  	spch_plazma[1]=10;
006808  f04f000a          MOV      r0,#0xa
00680c  7060              STRB     r0,[r4,#1]
                  |L1.26638|
;;;10569  	}
;;;10570  
;;;10571  else
;;;10572  	{
;;;10573  	spch_plazma[1]=20;
;;;10574  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10575  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10576  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10577  		#endif
;;;10578  		)
;;;10579  		{
;;;10580  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10581  		sp_ch_stat=scsSTEP1;
;;;10582  		#else
;;;10583  		sp_ch_stat=scsWRK;
;;;10584  		#endif
;;;10585  		speedz_mem_hndl(1);
;;;10586  		}
;;;10587  	else 
;;;10588  		{
;;;10589  		show_mess(	"     Ускоренный     ",
;;;10590  	          		"       заряд        ",
;;;10591  	          		"    заблокирован!   ",
;;;10592  	          		"                    ",2000);
;;;10593  		}
;;;10594  	}
;;;10595  }
00680e  bd38              POP      {r3-r5,pc}
                  |L1.26640|
006810  e07a              B        |L1.26888|
006812  0000              DCW      0x0000
                  |L1.26644|
                          DCD      ||area_number.25||+0x46
                  |L1.26648|
006818  534b2023          DCB      "SK #1 Alarm",0
00681c  3120416c
006820  61726d00
                  |L1.26660|
006824  534b2023          DCB      "SK #2 Alarm",0
006828  3220416c
00682c  61726d00
                  |L1.26672|
006830  534b2023          DCB      "SK #3 Alarm",0
006834  3320416c
006838  61726d00
                  |L1.26684|
00683c  534b2023          DCB      "SK #4 Alarm",0
006840  3420416c
006844  61726d00
                  |L1.26696|
006848  534b2023          DCB      "SK #1 Alarm is off",0
00684c  3120416c
006850  61726d20
006854  6973206f
006858  666600  
00685b  00                DCB      0
                  |L1.26716|
00685c  534b2023          DCB      "SK #2 Alarm is off",0
006860  3220416c
006864  61726d20
006868  6973206f
00686c  666600  
00686f  00                DCB      0
                  |L1.26736|
006870  534b2023          DCB      "SK #3 Alarm is off",0
006874  3320416c
006878  61726d20
00687c  6973206f
006880  666600  
006883  00                DCB      0
                  |L1.26756|
006884  534b2023          DCB      "SK #4 Alarm is off",0
006888  3420416c
00688c  61726d20
006890  6973206f
006894  666600  
006897  00                DCB      0
                  |L1.26776|
                          DCD      NUMSK
                  |L1.26780|
                          DCD      sign_U
                  |L1.26784|
                          DCD      sign_I
                  |L1.26788|
                          DCD      bat
                  |L1.26792|
                          DCD      u_necc_up
                  |L1.26796|
                          DCD      TBAT
                  |L1.26800|
                          DCD      u_necc_dn
                  |L1.26804|
                          DCD      IKB
                  |L1.26808|
                          DCD      BAT_C_REAL
                  |L1.26812|
                          DCD      NUMBAT
                  |L1.26816|
                          DCD      superviser_cnt
                  |L1.26820|
                          DCD      NPN_OUT
                  |L1.26824|
                          DCD      npn_tz_cnt
                  |L1.26828|
                          DCD      npn_stat
                  |L1.26832|
                          DCD      load_U
                  |L1.26836|
                          DCD      UONPN
                  |L1.26840|
                          DCD      net_Ua
                  |L1.26844|
                          DCD      net_Ub
                  |L1.26848|
                          DCD      net_Uc
                  |L1.26852|
                          DCD      UMN
                  |L1.26856|
                          DCD      TZNPN
                  |L1.26860|
                          DCD      UVNPN
                  |L1.26864|
                          DCD      load_off_cnt
                  |L1.26868|
                          DCD      load_off_stat
                  |L1.26872|
                          DCD      dUNPN
                  |L1.26876|
                          DCD      tloaddisable_cmnd
                  |L1.26880|
                          DCD      spch_plazma
                  |L1.26884|
                          DCD      sp_ch_stat
                  |L1.26888|
006908  f04f0114          MOV      r1,#0x14              ;10573
00690c  7061              STRB     r1,[r4,#1]            ;10573
00690e  49fa              LDR      r1,|L1.27896|
006910  f9b12000          LDRSH    r2,[r1,#0]            ;10574  ; speedChrgBlckStat
006914  49f9              LDR      r1,|L1.27900|
006916  f8913023          LDRB     r3,[r1,#0x23]         ;10574  ; spc_stat
00691a  ea420203          ORR      r2,r2,r3              ;10574
00691e  794b              LDRB     r3,[r1,#5]            ;10574  ; vz1_stat
006920  79c9              LDRB     r1,[r1,#7]            ;10574  ; vz2_stat
006922  ea420203          ORR      r2,r2,r3              ;10574
006926  430a              ORRS     r2,r2,r1              ;10574
006928  d009              BEQ      |L1.26942|
00692a  f44f60fa          MOV      r0,#0x7d0             ;10589
00692e  9000              STR      r0,[sp,#0]            ;10589
006930  4bf3              LDR      r3,|L1.27904|
006932  a2f4              ADR      r2,|L1.27908|
006934  a1f9              ADR      r1,|L1.27932|
006936  a0ff              ADR      r0,|L1.27956|
006938  f7fffffe          BL       show_mess
00693c  e767              B        |L1.26638|
                  |L1.26942|
00693e  f04f0101          MOV      r1,#1                 ;10581
006942  7001              STRB     r1,[r0,#0]            ;10581
006944  e8bd4038          POP      {r3-r5,lr}            ;10585
006948  4608              MOV      r0,r1                 ;10585
00694a  f7ffbffe          B.W      speedz_mem_hndl
;;;10596  
                          ENDP

                  speedChargeHndl PROC
;;;10352  //-----------------------------------------------
;;;10353  void speedChargeHndl(void)
00694e  e92d4ff8          PUSH     {r3-r11,lr}
;;;10354  {
;;;10355  /*
;;;10356  if(sp_ch_stat==scsOFF)
;;;10357  	{
;;;10358  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10359  	}*/
;;;10360  	 
;;;10361  if(sp_ch_stat==scsSTEP1)
006952  4ffe              LDR      r7,|L1.27980|
;;;10362  	{
;;;10363  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10364  		{
;;;10365  		sp_ch_stat_cnt=5;
;;;10366  		if(SP_CH_VENT_BLOK==0)
006954  f8dfa3f8          LDR      r10,|L1.27984|
;;;10367  			{
;;;10368  			sp_ch_stat_cnt=0;
;;;10369  			sp_ch_stat=scsWRK;
;;;10370  			}
;;;10371  		}
;;;10372  	if(sp_ch_stat_cnt)
;;;10373  		{
;;;10374  		sp_ch_stat_cnt--;
;;;10375  		if(sp_ch_stat_cnt==0)
;;;10376  			{
;;;10377  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10378  
;;;10379  			}
;;;10380  		}
;;;10381  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006958  f8df93f8          LDR      r9,|L1.27988|
00695c  7839              LDRB     r1,[r7,#0]            ;10361  ; sp_ch_stat
00695e  f04f0802          MOV      r8,#2                 ;10369
006962  4efd              LDR      r6,|L1.27992|
006964  4cfd              LDR      r4,|L1.27996|
006966  2500              MOVS     r5,#0                 ;10366
006968  7830              LDRB     r0,[r6,#0]            ;10363
00696a  2901              CMP      r1,#1                 ;10361
00696c  d11b              BNE      |L1.27046|
00696e  2801              CMP      r0,#1                 ;10363
006970  d008              BEQ      |L1.27012|
006972  f04f0105          MOV      r1,#5                 ;10365
006976  8021              STRH     r1,[r4,#0]            ;10365
006978  f8ba1000          LDRH     r1,[r10,#0]           ;10366  ; SP_CH_VENT_BLOK
00697c  b911              CBNZ     r1,|L1.27012|
00697e  8025              STRH     r5,[r4,#0]            ;10368
006980  f8878000          STRB     r8,[r7,#0]            ;10369
                  |L1.27012|
006984  f9b41000          LDRSH    r1,[r4,#0]            ;10372  ; sp_ch_stat_cnt
006988  b139              CBZ      r1,|L1.27034|
00698a  f1a10101          SUB      r1,r1,#1              ;10374
00698e  b209              SXTH     r1,r1                 ;10374
006990  8021              STRH     r1,[r4,#0]            ;10374
006992  b911              CBNZ     r1,|L1.27034|
006994  f04f0103          MOV      r1,#3                 ;10377
006998  7039              STRB     r1,[r7,#0]            ;10377
                  |L1.27034|
00699a  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
00699e  2901              CMP      r1,#1
0069a0  d101              BNE      |L1.27046|
0069a2  f8878000          STRB     r8,[r7,#0]
                  |L1.27046|
;;;10382  	}
;;;10383  
;;;10384  if(sp_ch_stat==scsWRK)
0069a6  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
0069a8  2902              CMP      r1,#2
0069aa  d123              BNE      |L1.27124|
;;;10385  	{
;;;10386  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10387  		{
;;;10388  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
0069ac  4aec              LDR      r2,|L1.28000|
;;;10389  		hv_vz_up_cnt=0;
0069ae  49ed              LDR      r1,|L1.28004|
0069b0  2802              CMP      r0,#2                 ;10386
0069b2  d008              BEQ      |L1.27078|
0069b4  48ec              LDR      r0,|L1.28008|
0069b6  f44f6361          MOV      r3,#0xe10             ;10388
0069ba  f9b00000          LDRSH    r0,[r0,#0]            ;10388  ; speedChrgTimeInHour
0069be  fb00f003          MUL      r0,r0,r3              ;10388
0069c2  6010              STR      r0,[r2,#0]            ;10388  ; sp_ch_wrk_cnt
0069c4  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27078|
;;;10390  		}
;;;10391  	sp_ch_wrk_cnt--;
0069c6  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
0069c8  f1a00001          SUB      r0,r0,#1
0069cc  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10392  	hv_vz_up_cnt++;
0069ce  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
0069d0  f1020201          ADD      r2,r2,#1
0069d4  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10393  	if(sp_ch_wrk_cnt==0)
0069d6  b918              CBNZ     r0,|L1.27104|
;;;10394  		{
;;;10395  		sp_ch_stat=scsOFF;
0069d8  703d              STRB     r5,[r7,#0]
;;;10396  		speedz_mem_hndl(0);
0069da  2000              MOVS     r0,#0
0069dc  f7fffffe          BL       speedz_mem_hndl
                  |L1.27104|
;;;10397  		}
;;;10398  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10399  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
0069e0  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
0069e4  b930              CBNZ     r0,|L1.27124|
0069e6  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
0069ea  2801              CMP      r0,#1
0069ec  d102              BNE      |L1.27124|
0069ee  f04f0004          MOV      r0,#4
0069f2  7038              STRB     r0,[r7,#0]
                  |L1.27124|
;;;10400  	#endif
;;;10401  	}
;;;10402  
;;;10403  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
0069f4  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10404  	{
;;;10405  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10406  		{
;;;10407  		sp_ch_stat_cnt=10;
;;;10408  		}
;;;10409  	sp_ch_stat_cnt--;
;;;10410  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10411  		{
;;;10412  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0069f6  f2413b88          MOV      r11,#0x1388
0069fa  f04f0a0a          MOV      r10,#0xa              ;10407
0069fe  2803              CMP      r0,#3                 ;10403
006a00  d119              BNE      |L1.27190|
006a02  7830              LDRB     r0,[r6,#0]            ;10405  ; sp_ch_stat_old
006a04  2803              CMP      r0,#3                 ;10405
006a06  d101              BNE      |L1.27148|
006a08  8820              LDRH     r0,[r4,#0]            ;10405  ; sp_ch_stat_cnt
006a0a  b908              CBNZ     r0,|L1.27152|
                  |L1.27148|
006a0c  f8a4a000          STRH     r10,[r4,#0]           ;10407
                  |L1.27152|
006a10  8820              LDRH     r0,[r4,#0]            ;10409  ; sp_ch_stat_cnt
006a12  f1a00001          SUB      r0,r0,#1              ;10409
006a16  b200              SXTH     r0,r0                 ;10409
006a18  8020              STRH     r0,[r4,#0]            ;10409
006a1a  280a              CMP      r0,#0xa               ;10410
006a1c  d001              BEQ      |L1.27170|
006a1e  2809              CMP      r0,#9                 ;10410
006a20  d109              BNE      |L1.27190|
                  |L1.27170|
006a22  4bd2              LDR      r3,|L1.28012|
006a24  a0d2              ADR      r0,|L1.28016|
006a26  f1030218          ADD      r2,r3,#0x18
006a2a  f1020118          ADD      r1,r2,#0x18
006a2e  f8cdb000          STR      r11,[sp,#0]
006a32  f7fffffe          BL       show_mess
                  |L1.27190|
;;;10413  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10414  					"      ВКЛЮЧЕН       ",
;;;10415  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10416  					5000);
;;;10417  		}
;;;10418  	}
;;;10419  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
006a36  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006a38  2804              CMP      r0,#4
006a3a  d11f              BNE      |L1.27260|
;;;10420  	{
;;;10421  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
006a3c  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
006a3e  2804              CMP      r0,#4
006a40  d101              BNE      |L1.27206|
006a42  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006a44  b908              CBNZ     r0,|L1.27210|
                  |L1.27206|
;;;10422  		{
;;;10423  		sp_ch_stat_cnt=10;
006a46  f8a4a000          STRH     r10,[r4,#0]
                  |L1.27210|
;;;10424  		}
;;;10425  	sp_ch_stat_cnt--;
006a4a  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006a4c  f1a00001          SUB      r0,r0,#1
006a50  b200              SXTH     r0,r0
006a52  8020              STRH     r0,[r4,#0]
;;;10426  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
006a54  280a              CMP      r0,#0xa
006a56  d001              BEQ      |L1.27228|
006a58  2809              CMP      r0,#9
006a5a  d109              BNE      |L1.27248|
                  |L1.27228|
;;;10427  		{
;;;10428  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006a5c  4bca              LDR      r3,|L1.28040|
006a5e  a0c4              ADR      r0,|L1.28016|
006a60  f1030218          ADD      r2,r3,#0x18
006a64  f1020118          ADD      r1,r2,#0x18
006a68  f8cdb000          STR      r11,[sp,#0]
006a6c  f7fffffe          BL       show_mess
                  |L1.27248|
;;;10429  					"    ЗАБЛОКИРОВАН    ",
;;;10430  					"     НЕИСПРАВНА     ",
;;;10431  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10432  					5000);
;;;10433  		}
;;;10434  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006a70  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006a74  2801              CMP      r0,#1
006a76  d101              BNE      |L1.27260|
006a78  f8878000          STRB     r8,[r7,#0]
                  |L1.27260|
;;;10435  	}
;;;10436  
;;;10437  
;;;10438  sp_ch_stat_old=sp_ch_stat;
006a7c  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006a7e  7030              STRB     r0,[r6,#0]
;;;10439  
;;;10440  
;;;10441  
;;;10442  if(speedChrgAvtEn==1)
006a80  49c2              LDR      r1,|L1.28044|
;;;10443  	{
;;;10444  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10445  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10446  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10447  		#endif
;;;10448  		)
;;;10449  		{
;;;10450  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10451  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10452  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10453  		#endif
;;;10454  		#ifdef UKU_220_V2
;;;10455  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10456  		#endif
;;;10457  		&&(!speedChrgBlckStat))
006a82  4c9d              LDR      r4,|L1.27896|
006a84  8809              LDRH     r1,[r1,#0]            ;10442  ; speedChrgAvtEn
006a86  2901              CMP      r1,#1                 ;10442
006a88  d10a              BNE      |L1.27296|
006a8a  499c              LDR      r1,|L1.27900|
;;;10458  			{
;;;10459  			speedChargeStartCnt++;
006a8c  4ec0              LDR      r6,|L1.28048|
006a8e  f8912023          LDRB     r2,[r1,#0x23]         ;10444  ; spc_stat
006a92  4310              ORRS     r0,r0,r2              ;10444
006a94  794a              LDRB     r2,[r1,#5]            ;10444  ; vz1_stat
006a96  79c9              LDRB     r1,[r1,#7]            ;10444  ; vz2_stat
006a98  4310              ORRS     r0,r0,r2              ;10444
006a9a  4308              ORRS     r0,r0,r1              ;10444
006a9c  d007              BEQ      |L1.27310|
;;;10460  			if(speedChargeStartCnt>=60)
;;;10461  				{
;;;10462  				speedChargeStartStop();
;;;10463  				speedz_mem_hndl(5);
;;;10464  				}
;;;10465  			}
;;;10466  		else speedChargeStartCnt=0;
;;;10467  		}
;;;10468  	else speedChargeStartCnt=0;
006a9e  7035              STRB     r5,[r6,#0]
                  |L1.27296|
;;;10469  	}
;;;10470  
;;;10471  
;;;10472  
;;;10473  /*
;;;10474  if(speedChIsOn)
;;;10475  	{
;;;10476  	speedChTimeCnt++;
;;;10477  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10478  		{
;;;10479  		speedChIsOn=0;
;;;10480  		}
;;;10481  	if(speedChrgBlckStat)
;;;10482  		{
;;;10483  		speedChIsOn=0;
;;;10484  		speedChTimeCnt=0;
;;;10485  		}
;;;10486  	}
;;;10487  
;;;10488  
;;;10489  
;;;10490  if(speedChrgAvtEn)
;;;10491  	{
;;;10492  	if(!speedChIsOn)
;;;10493  		{
;;;10494  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10495  			{
;;;10496  			speedChIsOn=1;
;;;10497  			}
;;;10498  		}
;;;10499  	}
;;;10500  
;;;10501  
;;;10502  */
;;;10503  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006aa0  48bc              LDR      r0,|L1.28052|
006aa2  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006aa4  2802              CMP      r0,#2
006aa6  d02e              BEQ      |L1.27398|
006aa8  8025              STRH     r5,[r4,#0]
                  |L1.27306|
;;;10504  else
;;;10505  	{
;;;10506  	speedChrgBlckStat=0;
;;;10507  	if(speedChrgBlckSrc==1)
;;;10508  		{
;;;10509  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10510  		}
;;;10511  	else if(speedChrgBlckSrc==2)
;;;10512  		{
;;;10513  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10514  		}
;;;10515  	}
;;;10516  
;;;10517  /*
;;;10518  if(speedChrgBlckStat==1)
;;;10519  	{
;;;10520  
;;;10521  	//speedChargeStartStop();
;;;10522  
;;;10523  	speedChrgShowCnt++;
;;;10524  	if(speedChrgShowCnt>=30)	
;;;10525  		{
;;;10526  		speedChrgShowCnt=0;
;;;10527  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10528  					"       ЗАРЯД        ",
;;;10529  					"     ЗАПРЕЩЕН!!!    ",
;;;10530  					"                    ",
;;;10531  					5000);
;;;10532  		}
;;;10533  	} 
;;;10534  else speedChrgShowCnt=0;  */
;;;10535  
;;;10536  
;;;10537  }
006aaa  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.27310|
006aae  48ba              LDR      r0,|L1.28056|
006ab0  49ba              LDR      r1,|L1.28060|
006ab2  f9b00000          LDRSH    r0,[r0,#0]            ;10450  ; load_U
006ab6  f9b11000          LDRSH    r1,[r1,#0]            ;10450  ; u_necc
006aba  4288              CMP      r0,r1                 ;10450
006abc  da14              BGE      |L1.27368|
006abe  1a08              SUBS     r0,r1,r0              ;10450
006ac0  49b7              LDR      r1,|L1.28064|
006ac2  f9b11000          LDRSH    r1,[r1,#0]            ;10450  ; speedChrgDU
006ac6  4288              CMP      r0,r1                 ;10450
006ac8  dd0e              BLE      |L1.27368|
006aca  48b6              LDR      r0,|L1.28068|
006acc  49b6              LDR      r1,|L1.28072|
006ace  f9b00000          LDRSH    r0,[r0,#0]            ;10452  ; Ib_ips_termokompensat
006ad2  8809              LDRH     r1,[r1,#0]            ;10452  ; IZMAX
006ad4  fb90f0fa          SDIV     r0,r0,r10             ;10452
006ad8  1a40              SUBS     r0,r0,r1              ;10452
006ada  b200              SXTH     r0,r0                 ;10452
006adc  f7fffffe          BL       abs
006ae0  2805              CMP      r0,#5                 ;10452
006ae2  da01              BGE      |L1.27368|
006ae4  8820              LDRH     r0,[r4,#0]            ;10457  ; speedChrgBlckStat
006ae6  b108              CBZ      r0,|L1.27372|
                  |L1.27368|
006ae8  7035              STRB     r5,[r6,#0]            ;10466
006aea  e7d9              B        |L1.27296|
                  |L1.27372|
006aec  7830              LDRB     r0,[r6,#0]            ;10459  ; speedChargeStartCnt
006aee  f1000001          ADD      r0,r0,#1              ;10459
006af2  b2c0              UXTB     r0,r0                 ;10459
006af4  7030              STRB     r0,[r6,#0]            ;10459
006af6  283c              CMP      r0,#0x3c              ;10460
006af8  d3d2              BCC      |L1.27296|
006afa  f7fffffe          BL       speedChargeStartStop
006afe  2005              MOVS     r0,#5                 ;10463
006b00  f7fffffe          BL       speedz_mem_hndl
006b04  e7cc              B        |L1.27296|
                  |L1.27398|
006b06  8025              STRH     r5,[r4,#0]            ;10506
006b08  48a8              LDR      r0,|L1.28076|
006b0a  49a9              LDR      r1,|L1.28080|
006b0c  f44f63fa          MOV      r3,#0x7d0             ;10509
006b10  f9b00000          LDRSH    r0,[r0,#0]            ;10513  ; speedChrgBlckLog
006b14  b918              CBNZ     r0,|L1.27422|
006b16  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10513  ; adc_buff_
006b1a  429a              CMP      r2,r3                 ;10513
006b1c  dc05              BGT      |L1.27434|
                  |L1.27422|
006b1e  2801              CMP      r0,#1                 ;10513
006b20  d1c3              BNE      |L1.27306|
006b22  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10513  ; adc_buff_
006b26  4298              CMP      r0,r3                 ;10513
006b28  dabf              BGE      |L1.27306|
                  |L1.27434|
006b2a  f04f0001          MOV      r0,#1                 ;10513
006b2e  8020              STRH     r0,[r4,#0]            ;10513
006b30  e7bb              B        |L1.27306|
;;;10538  
                          ENDP

                  averageChargeHndl PROC
;;;10597  //-----------------------------------------------
;;;10598  void averageChargeHndl(void)
006b32  e92d4ff8          PUSH     {r3-r11,lr}
;;;10599  {
;;;10600  /*
;;;10601  if(hv_vz_stat==hvsOFF)
;;;10602  	{
;;;10603  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10604  	} */
;;;10605  if(hv_vz_stat!=hvsOFF)
006b36  f8dfa27c          LDR      r10,|L1.28084|
006b3a  f04f0b00          MOV      r11,#0
006b3e  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006b42  b130              CBZ      r0,|L1.27474|
;;;10606  	{
;;;10607  	hv_vz_stat=hvsOFF; 	
006b44  f88ab000          STRB     r11,[r10,#0]
;;;10608  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006b48  2100              MOVS     r1,#0
006b4a  f44f70b4          MOV      r0,#0x168
006b4e  f7fffffe          BL       lc640_write
                  |L1.27474|
;;;10609  	}
;;;10610  
;;;10611  if(hv_vz_stat==hvsSTEP1)
006b52  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10612  	{
;;;10613  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10614  		{
;;;10615  		hv_vz_stat_cnt=5;
;;;10616  		}
;;;10617  	if(hv_vz_stat_cnt)
;;;10618  		{
;;;10619  		hv_vz_stat_cnt--;
;;;10620  		if(hv_vz_stat_cnt==0)
;;;10621  			{
;;;10622  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10623  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10624  			}
;;;10625  		}
;;;10626  	if(sk_stat[0]==1)
006b56  4e7f              LDR      r6,|L1.27988|
006b58  4d97              LDR      r5,|L1.28088|
006b5a  4c98              LDR      r4,|L1.28092|
006b5c  f04f0905          MOV      r9,#5                 ;10615
006b60  2801              CMP      r0,#1                 ;10611
006b62  d131              BNE      |L1.27592|
006b64  7828              LDRB     r0,[r5,#0]            ;10613  ; hv_vz_stat_old
006b66  2801              CMP      r0,#1                 ;10613
006b68  d001              BEQ      |L1.27502|
006b6a  f8a49000          STRH     r9,[r4,#0]            ;10615
                  |L1.27502|
006b6e  f9b40000          LDRSH    r0,[r4,#0]            ;10617  ; hv_vz_stat_cnt
006b72  b168              CBZ      r0,|L1.27536|
006b74  f1a00001          SUB      r0,r0,#1              ;10619
006b78  b200              SXTH     r0,r0                 ;10619
006b7a  8020              STRH     r0,[r4,#0]            ;10619
006b7c  b940              CBNZ     r0,|L1.27536|
006b7e  f04f0006          MOV      r0,#6                 ;10622
006b82  f88a0000          STRB     r0,[r10,#0]           ;10622
006b86  4601              MOV      r1,r0                 ;10623
006b88  f44f70b4          MOV      r0,#0x168             ;10623
006b8c  f7fffffe          BL       lc640_write
                  |L1.27536|
006b90  7830              LDRB     r0,[r6,#0]  ; sk_stat
006b92  2801              CMP      r0,#1
006b94  d118              BNE      |L1.27592|
;;;10627  		{
;;;10628  		hv_vz_stat=hvsSTEP2;
006b96  f04f0002          MOV      r0,#2
006b9a  f88a0000          STRB     r0,[r10,#0]
;;;10629  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006b9e  4601              MOV      r1,r0
006ba0  f44f70b4          MOV      r0,#0x168
006ba4  f7fffffe          BL       lc640_write
;;;10630  		tree_up(iHV_STEP2_2,1,0,0);
006ba8  2300              MOVS     r3,#0
006baa  461a              MOV      r2,r3
006bac  2101              MOVS     r1,#1
006bae  20df              MOVS     r0,#0xdf
006bb0  f7fffffe          BL       tree_up
;;;10631  		tree_up(iHV_STEP2_1,0,0,0);
006bb4  2300              MOVS     r3,#0
006bb6  461a              MOV      r2,r3
006bb8  4619              MOV      r1,r3
006bba  20de              MOVS     r0,#0xde
006bbc  f7fffffe          BL       tree_up
;;;10632  		ret(1200);
006bc0  f44f6096          MOV      r0,#0x4b0
006bc4  f7fffffe          BL       ||ret||
                  |L1.27592|
;;;10633  		}
;;;10634  	}
;;;10635  
;;;10636  if(hv_vz_stat==hvsSTEP2)
006bc8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006bcc  2802              CMP      r0,#2
006bce  d10b              BNE      |L1.27624|
;;;10637  	{
;;;10638  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006bd0  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006bd2  2902              CMP      r1,#2
006bd4  d101              BNE      |L1.27610|
006bd6  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006bd8  b911              CBNZ     r1,|L1.27616|
                  |L1.27610|
;;;10639  		{
;;;10640  		hv_vz_stat_cnt=15;
006bda  f04f010f          MOV      r1,#0xf
006bde  8021              STRH     r1,[r4,#0]
                  |L1.27616|
;;;10641  		}
;;;10642  	hv_vz_stat_cnt--;
006be0  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006be2  f1a10101          SUB      r1,r1,#1
006be6  8021              STRH     r1,[r4,#0]
                  |L1.27624|
;;;10643  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10644  	//	{
;;;10645  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10646  	//				"  Напряжение будет  ",
;;;10647  	//				" увеличено до     @В",
;;;10648  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10649  	//				4800,UVZ,1);
;;;10650  	//	}
;;;10651  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10652  	//	{
;;;10653  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10654  	//				"     НАЖАТИЕМ       ",
;;;10655  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10656  	//				"      КНОПКИ        ",
;;;10657  	//				4800);
;;;10658  	//	} 
;;;10659  /*	if(sk_stat[1]==1)
;;;10660  		{
;;;10661  		hv_vz_stat=hvsWRK;
;;;10662  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10663  		}*/
;;;10664  	}
;;;10665  
;;;10666  if(hv_vz_stat==hvsSTEP3)
;;;10667  	{
;;;10668  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10669  		{
;;;10670  		hv_vz_stat_cnt=10;
006be8  270a              MOVS     r7,#0xa
;;;10671  		}
;;;10672  	hv_vz_stat_cnt--;
;;;10673  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10674  		{
;;;10675  		show_mess(	"     ВКЛЮЧИТЕ       ",
006bea  f2413888          MOV      r8,#0x1388
006bee  2803              CMP      r0,#3                 ;10666
006bf0  d123              BNE      |L1.27706|
006bf2  7828              LDRB     r0,[r5,#0]            ;10668  ; hv_vz_stat_old
006bf4  2803              CMP      r0,#3                 ;10668
006bf6  d101              BNE      |L1.27644|
006bf8  8820              LDRH     r0,[r4,#0]            ;10668  ; hv_vz_stat_cnt
006bfa  b900              CBNZ     r0,|L1.27646|
                  |L1.27644|
006bfc  8027              STRH     r7,[r4,#0]            ;10670
                  |L1.27646|
006bfe  8820              LDRH     r0,[r4,#0]            ;10672  ; hv_vz_stat_cnt
006c00  f1a00001          SUB      r0,r0,#1              ;10672
006c04  b200              SXTH     r0,r0                 ;10672
006c06  8020              STRH     r0,[r4,#0]            ;10672
006c08  280a              CMP      r0,#0xa               ;10673
006c0a  d001              BEQ      |L1.27664|
006c0c  2809              CMP      r0,#9                 ;10673
006c0e  d10a              BNE      |L1.27686|
                  |L1.27664|
006c10  4b3b              LDR      r3,|L1.27904|
006c12  a26b              ADR      r2,|L1.28096|
006c14  3b48              SUBS     r3,r3,#0x48
006c16  f5a361bf          SUB      r1,r3,#0x5f8
006c1a  f1010018          ADD      r0,r1,#0x18
006c1e  f8cd8000          STR      r8,[sp,#0]
006c22  f7fffffe          BL       show_mess
                  |L1.27686|
;;;10676  					"      ТУМБЛЕР       ",
;;;10677  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10678  					"       ЗАРЯД        ",
;;;10679  					5000);
;;;10680  		}
;;;10681  	if(sk_stat[1]==1)
006c26  7870              LDRB     r0,[r6,#1]  ; sk_stat
006c28  2801              CMP      r0,#1
006c2a  d106              BNE      |L1.27706|
;;;10682  		{
;;;10683  		hv_vz_stat=hvsWRK;
006c2c  f88a9000          STRB     r9,[r10,#0]
;;;10684  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006c30  2105              MOVS     r1,#5
006c32  f44f70b4          MOV      r0,#0x168
006c36  f7fffffe          BL       lc640_write
                  |L1.27706|
;;;10685  		}
;;;10686  	}
;;;10687  
;;;10688  if(hv_vz_stat==hvsWRK)
006c3a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c3e  2805              CMP      r0,#5
006c40  d13a              BNE      |L1.27832|
;;;10689  	{
;;;10690  	if(hv_vz_stat_old!=hv_vz_stat)
006c42  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10691  		{
;;;10692  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006c44  4a64              LDR      r2,|L1.28120|
;;;10693  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10694  		hv_vz_up_cnt=0L;
006c46  4947              LDR      r1,|L1.28004|
006c48  2805              CMP      r0,#5                 ;10690
006c4a  d00d              BEQ      |L1.27752|
006c4c  4863              LDR      r0,|L1.28124|
006c4e  f44f6361          MOV      r3,#0xe10             ;10692
006c52  f9b00000          LDRSH    r0,[r0,#0]            ;10692  ; VZ_HR
006c56  fb00f303          MUL      r3,r0,r3              ;10692
006c5a  6013              STR      r3,[r2,#0]            ;10692  ; hv_vz_wrk_cnt
006c5c  b910              CBNZ     r0,|L1.27748|
006c5e  f44f60e1          MOV      r0,#0x708             ;10693
006c62  6010              STR      r0,[r2,#0]            ;10693  ; hv_vz_wrk_cnt
                  |L1.27748|
006c64  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27752|
;;;10695  		}
;;;10696  	hv_vz_wrk_cnt--;
006c68  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006c6a  f1a00001          SUB      r0,r0,#1
006c6e  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10697  	hv_vz_up_cnt++;
006c70  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006c72  f1020201          ADD      r2,r2,#1
006c76  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10698  
;;;10699  	if(hv_vz_wrk_cnt==0)
006c78  b940              CBNZ     r0,|L1.27788|
;;;10700  		{
;;;10701  		hv_vz_stat=hvsERR4;
006c7a  f04f0009          MOV      r0,#9
006c7e  f88a0000          STRB     r0,[r10,#0]
;;;10702  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006c82  4601              MOV      r1,r0
006c84  f44f70b4          MOV      r0,#0x168
006c88  f7fffffe          BL       lc640_write
                  |L1.27788|
;;;10703  		}
;;;10704  	if(sk_stat[0]==0)
006c8c  7830              LDRB     r0,[r6,#0]  ; sk_stat
006c8e  b940              CBNZ     r0,|L1.27810|
;;;10705  		{
;;;10706  		hv_vz_stat=hvsERR2;
006c90  f04f0007          MOV      r0,#7
006c94  f88a0000          STRB     r0,[r10,#0]
;;;10707  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006c98  4601              MOV      r1,r0
006c9a  f44f70b4          MOV      r0,#0x168
006c9e  f7fffffe          BL       lc640_write
                  |L1.27810|
;;;10708  		}
;;;10709  	if(sk_stat[1]==0)
006ca2  7870              LDRB     r0,[r6,#1]  ; sk_stat
006ca4  b940              CBNZ     r0,|L1.27832|
;;;10710  		{
;;;10711  		hv_vz_stat=hvsERR3;
006ca6  f04f0008          MOV      r0,#8
006caa  f88a0000          STRB     r0,[r10,#0]
;;;10712  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006cae  4601              MOV      r1,r0
006cb0  f44f70b4          MOV      r0,#0x168
006cb4  f7fffffe          BL       lc640_write
                  |L1.27832|
;;;10713  		}
;;;10714  	}
;;;10715  
;;;10716  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006cb8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006cbc  2806              CMP      r0,#6
006cbe  d119              BNE      |L1.27892|
;;;10717  	{
;;;10718  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006cc0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006cc2  2806              CMP      r0,#6
006cc4  d101              BNE      |L1.27850|
006cc6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006cc8  b900              CBNZ     r0,|L1.27852|
                  |L1.27850|
;;;10719  		{
;;;10720  		hv_vz_stat_cnt=10;
006cca  8027              STRH     r7,[r4,#0]
                  |L1.27852|
;;;10721  		}
;;;10722  	hv_vz_stat_cnt--;
006ccc  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006cce  f1a00001          SUB      r0,r0,#1
006cd2  b200              SXTH     r0,r0
006cd4  8020              STRH     r0,[r4,#0]
;;;10723  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006cd6  280a              CMP      r0,#0xa
006cd8  d001              BEQ      |L1.27870|
006cda  2809              CMP      r0,#9
006cdc  d10a              BNE      |L1.27892|
                  |L1.27870|
;;;10724  		{
;;;10725  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006cde  4b23              LDR      r3,|L1.28012|
006ce0  f8cd8000          STR      r8,[sp,#0]
006ce4  f1030218          ADD      r2,r3,#0x18
006ce8  f1020118          ADD      r1,r2,#0x18
006cec  f2a15084          SUB      r0,r1,#0x584
006cf0  f7fffffe          BL       show_mess
                  |L1.27892|
;;;10726  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10727  					"      ВКЛЮЧЕН       ",
;;;10728  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10729  					5000);
;;;10730  		}
;;;10731  	}
;;;10732  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006cf4  e074              B        |L1.28128|
006cf6  0000              DCW      0x0000
                  |L1.27896|
                          DCD      speedChrgBlckStat
                  |L1.27900|
                          DCD      ||area_number.25||
                  |L1.27904|
                          DCD      ||.text||+0x1d4c
                  |L1.27908|
006d04  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006d08  e7e0e1eb
006d0c  eeeae8f0
006d10  eee2e0ed
006d14  21      
006d15  20202000          DCB      "   ",0
006d19  00                DCB      0
006d1a  00                DCB      0
006d1b  00                DCB      0
                  |L1.27932|
006d1c  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006d20  202020e7
006d24  e0f0ffe4
006d28  20202020
006d2c  20202020
006d30  00      
006d31  00                DCB      0
006d32  00                DCB      0
006d33  00                DCB      0
                  |L1.27956|
006d34  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006d38  20d3f1ea
006d3c  eef0e5ed
006d40  edfbe920
006d44  20202020
006d48  00      
006d49  00                DCB      0
006d4a  00                DCB      0
006d4b  00                DCB      0
                  |L1.27980|
                          DCD      sp_ch_stat
                  |L1.27984|
                          DCD      SP_CH_VENT_BLOK
                  |L1.27988|
                          DCD      sk_stat
                  |L1.27992|
                          DCD      sp_ch_stat_old
                  |L1.27996|
                          DCD      sp_ch_stat_cnt
                  |L1.28000|
                          DCD      sp_ch_wrk_cnt
                  |L1.28004|
                          DCD      hv_vz_up_cnt
                  |L1.28008|
                          DCD      speedChrgTimeInHour
                  |L1.28012|
                          DCD      ||.text||+0x1c14
                  |L1.28016|
006d70  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006d74  caced0c5
006d78  cdcddbc9
006d7c  20c7c0  
006d7f  d0dfc420          DCB      208,223,196,"  ",0
006d83  2000    
006d85  00                DCB      0
006d86  00                DCB      0
006d87  00                DCB      0
                  |L1.28040|
                          DCD      ||.text||+0x1678
                  |L1.28044|
                          DCD      speedChrgAvtEn
                  |L1.28048|
                          DCD      speedChargeStartCnt
                  |L1.28052|
                          DCD      speedChrgBlckSrc
                  |L1.28056|
                          DCD      load_U
                  |L1.28060|
                          DCD      u_necc
                  |L1.28064|
                          DCD      speedChrgDU
                  |L1.28068|
                          DCD      Ib_ips_termokompensat
                  |L1.28072|
                          DCD      IZMAX
                  |L1.28076|
                          DCD      speedChrgBlckLog
                  |L1.28080|
                          DCD      ||.bss||+0x40c
                  |L1.28084|
                          DCD      hv_vz_stat
                  |L1.28088|
                          DCD      hv_vz_stat_old
                  |L1.28092|
                          DCD      hv_vz_stat_cnt
                  |L1.28096|
006dc0  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006dc4  dbd0c0c2
006dc8  cdc8c2c0
006dcc  ded9c8c9
006dd0  20202020          DCB      "    ",0
006dd4  00      
006dd5  00                DCB      0
006dd6  00                DCB      0
006dd7  00                DCB      0
                  |L1.28120|
                          DCD      hv_vz_wrk_cnt
                  |L1.28124|
                          DCD      VZ_HR
                  |L1.28128|
006de0  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006de4  2807              CMP      r0,#7
006de6  d123              BNE      |L1.28208|
;;;10733  	{
;;;10734  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006de8  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006dea  2807              CMP      r0,#7
006dec  d101              BNE      |L1.28146|
006dee  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006df0  b900              CBNZ     r0,|L1.28148|
                  |L1.28146|
;;;10735  		{
;;;10736  		hv_vz_stat_cnt=10;
006df2  8027              STRH     r7,[r4,#0]
                  |L1.28148|
;;;10737  		}
;;;10738  	hv_vz_stat_cnt--;
006df4  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006df6  f1a00001          SUB      r0,r0,#1
006dfa  b200              SXTH     r0,r0
006dfc  8020              STRH     r0,[r4,#0]
;;;10739  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006dfe  280a              CMP      r0,#0xa
006e00  d001              BEQ      |L1.28166|
006e02  2809              CMP      r0,#9
006e04  d10a              BNE      |L1.28188|
                  |L1.28166|
;;;10740  		{
;;;10741  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006e06  4bff              LDR      r3,|L1.29188|
006e08  f8cd8000          STR      r8,[sp,#0]
006e0c  f1030218          ADD      r2,r3,#0x18
006e10  f1020118          ADD      r1,r2,#0x18
006e14  f1010018          ADD      r0,r1,#0x18
006e18  f7fffffe          BL       show_mess
                  |L1.28188|
;;;10742  					"    ЗАБЛОКИРОВАН    ",
;;;10743  					"     НЕИСПРАВНА     ",
;;;10744  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10745  					5000);
;;;10746  		}
;;;10747  	if(sk_stat[0]==1)
006e1c  7830              LDRB     r0,[r6,#0]  ; sk_stat
006e1e  2801              CMP      r0,#1
006e20  d106              BNE      |L1.28208|
;;;10748  		{
;;;10749  		hv_vz_stat=hvsWRK;
006e22  f88a9000          STRB     r9,[r10,#0]
;;;10750  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006e26  2105              MOVS     r1,#5
006e28  f44f70b4          MOV      r0,#0x168
006e2c  f7fffffe          BL       lc640_write
                  |L1.28208|
;;;10751  		}
;;;10752  	}
;;;10753  
;;;10754  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006e30  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e34  2808              CMP      r0,#8
006e36  d123              BNE      |L1.28288|
;;;10755  	{
;;;10756  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e38  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006e3a  2808              CMP      r0,#8
006e3c  d101              BNE      |L1.28226|
006e3e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e40  b900              CBNZ     r0,|L1.28228|
                  |L1.28226|
;;;10757  		{
;;;10758  		hv_vz_stat_cnt=10;
006e42  8027              STRH     r7,[r4,#0]
                  |L1.28228|
;;;10759  		}
;;;10760  	hv_vz_stat_cnt--;
006e44  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e46  f1a00001          SUB      r0,r0,#1
006e4a  b200              SXTH     r0,r0
006e4c  8020              STRH     r0,[r4,#0]
;;;10761  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006e4e  280a              CMP      r0,#0xa
006e50  d001              BEQ      |L1.28246|
006e52  2809              CMP      r0,#9
006e54  d10a              BNE      |L1.28268|
                  |L1.28246|
;;;10762  		{
;;;10763  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006e56  4bec              LDR      r3,|L1.29192|
006e58  f8cd8000          STR      r8,[sp,#0]
006e5c  f2a35274          SUB      r2,r3,#0x574
006e60  f1020118          ADD      r1,r2,#0x18
006e64  f2a150e4          SUB      r0,r1,#0x5e4
006e68  f7fffffe          BL       show_mess
                  |L1.28268|
;;;10764  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10765  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10766  					"    ТУМБЛЕРА!!!     ",
;;;10767  					5000);
;;;10768  		}
;;;10769  	if(sk_stat[1]==1)
006e6c  7870              LDRB     r0,[r6,#1]  ; sk_stat
006e6e  2801              CMP      r0,#1
006e70  d106              BNE      |L1.28288|
;;;10770  		{
;;;10771  		hv_vz_stat=hvsWRK;
006e72  f88a9000          STRB     r9,[r10,#0]
;;;10772  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006e76  2105              MOVS     r1,#5
006e78  f44f70b4          MOV      r0,#0x168
006e7c  f7fffffe          BL       lc640_write
                  |L1.28288|
;;;10773  		}
;;;10774  	}
;;;10775  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006e80  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e84  2809              CMP      r0,#9
006e86  d124              BNE      |L1.28370|
;;;10776  	{
;;;10777  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e88  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006e8a  2809              CMP      r0,#9
006e8c  d101              BNE      |L1.28306|
006e8e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e90  b900              CBNZ     r0,|L1.28308|
                  |L1.28306|
;;;10778  		{
;;;10779  		hv_vz_stat_cnt=10;
006e92  8027              STRH     r7,[r4,#0]
                  |L1.28308|
;;;10780  		}
;;;10781  	hv_vz_stat_cnt--;
006e94  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e96  f1a00001          SUB      r0,r0,#1
006e9a  b200              SXTH     r0,r0
006e9c  8020              STRH     r0,[r4,#0]
;;;10782  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006e9e  280a              CMP      r0,#0xa
006ea0  d001              BEQ      |L1.28326|
006ea2  2809              CMP      r0,#9
006ea4  d10a              BNE      |L1.28348|
                  |L1.28326|
;;;10783  		{
;;;10784  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006ea6  4bd9              LDR      r3,|L1.29196|
006ea8  f2af02ec          ADR      r2,|L1.28096|
006eac  f5a361bf          SUB      r1,r3,#0x5f8
006eb0  f50160c5          ADD      r0,r1,#0x628
006eb4  f8cd8000          STR      r8,[sp,#0]
006eb8  f7fffffe          BL       show_mess
                  |L1.28348|
;;;10785  					"      ТУМБЛЕР       ",
;;;10786  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10787  					"       ЗАРЯД        ",
;;;10788  					5000);
;;;10789  		}
;;;10790  	if(sk_stat[1]==0)
006ebc  7870              LDRB     r0,[r6,#1]  ; sk_stat
006ebe  b940              CBNZ     r0,|L1.28370|
;;;10791  		{
;;;10792  		hv_vz_stat=hvsOFF;
006ec0  f88ab000          STRB     r11,[r10,#0]
;;;10793  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006ec4  2100              MOVS     r1,#0
006ec6  f44f70b4          MOV      r0,#0x168
006eca  f7fffffe          BL       lc640_write
;;;10794  		vz_stop();
006ece  f7fffffe          BL       vz_stop
                  |L1.28370|
;;;10795  
;;;10796  		}
;;;10797  	}
;;;10798  hv_vz_stat_old=hv_vz_stat;
006ed2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006ed6  7028              STRB     r0,[r5,#0]
;;;10799  /*
;;;10800  if(speedChIsOn)
;;;10801  	{
;;;10802  	speedChTimeCnt++;
;;;10803  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10804  		{
;;;10805  		speedChIsOn=0;
;;;10806  		}
;;;10807  	if(speedChrgBlckStat)
;;;10808  		{
;;;10809  		speedChIsOn=0;
;;;10810  		speedChTimeCnt=0;
;;;10811  		}
;;;10812  	}
;;;10813  
;;;10814  
;;;10815  
;;;10816  if(speedChrgAvtEn)
;;;10817  	{
;;;10818  	if(!speedChIsOn)
;;;10819  		{
;;;10820  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10821  			{
;;;10822  			speedChIsOn=1;
;;;10823  			}
;;;10824  		}
;;;10825  	}
;;;10826  
;;;10827  
;;;10828  
;;;10829  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10830  else
;;;10831  	{
;;;10832  	speedChrgBlckStat=0;
;;;10833  	if(speedChrgBlckSrc==1)
;;;10834  		{
;;;10835  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10836  		}
;;;10837  	else if(speedChrgBlckSrc==2)
;;;10838  		{
;;;10839  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10840  		}
;;;10841  	}
;;;10842  
;;;10843  
;;;10844  if(speedChrgBlckStat==1)
;;;10845  	{
;;;10846  
;;;10847  	//speedChargeStartStop();
;;;10848  
;;;10849  	speedChrgShowCnt++;
;;;10850  	if(speedChrgShowCnt>=30)	
;;;10851  		{
;;;10852  		speedChrgShowCnt=0;
;;;10853  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10854  					"       ЗАРЯД        ",
;;;10855  					"     ЗАПРЕЩЕН!!!    ",
;;;10856  					"                    ",
;;;10857  					5000);
;;;10858  		}
;;;10859  	}
;;;10860  else speedChrgShowCnt=0;
;;;10861  
;;;10862  */
;;;10863  }
006ed8  e5e7              B        |L1.27306|
;;;10864  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10881  //-----------------------------------------------
;;;10882  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006eda  e92d41f0          PUSH     {r4-r8,lr}
;;;10883  {
;;;10884  
;;;10885  numOfForvardBps_old=numOfForvardBps;
006ede  4ccc              LDR      r4,|L1.29200|
006ee0  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006ee2  7060              STRB     r0,[r4,#1]
;;;10886  
;;;10887  numOfForvardBps=0;
006ee4  f04f0500          MOV      r5,#0
006ee8  f8045928          STRB     r5,[r4],#-0x28
;;;10888  
;;;10889  //FORVARDBPSCHHOUR=10;
;;;10890  
;;;10891  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006eec  4ec9              LDR      r6,|L1.29204|
006eee  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006ef2  2800              CMP      r0,#0
006ef4  dd02              BLE      |L1.28412|
006ef6  f5b07ffa          CMP      r0,#0x1f4
006efa  dd02              BLE      |L1.28418|
                  |L1.28412|
;;;10892  	{
;;;10893  	FORVARDBPSCHHOUR=0;
006efc  8035              STRH     r5,[r6,#0]
                  |L1.28414|
;;;10894  	return;
;;;10895  	}
;;;10896  
;;;10897  numOfForvardBps_minCnt++;
;;;10898  
;;;10899  
;;;10900  if(numOfForvardBps_minCnt>=60)
;;;10901  	{
;;;10902  	numOfForvardBps_minCnt=0;
;;;10903  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10904  	numOfForvardBps_hourCnt++;
;;;10905  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10906  		{
;;;10907  		numOfForvardBps_hourCnt=0;
;;;10908  		}
;;;10909  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10910  	}
;;;10911  
;;;10912  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10913  
;;;10914  //if(numOfForvardBps)
;;;10915  //numOfForvardBps_old=numOfForvardBps; 
;;;10916  }
006efe  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28418|
006f02  f894002a          LDRB     r0,[r4,#0x2a]         ;10897  ; numOfForvardBps_minCnt
006f06  f1000001          ADD      r0,r0,#1              ;10897
006f0a  b2c0              UXTB     r0,r0                 ;10897
006f0c  f884002a          STRB     r0,[r4,#0x2a]         ;10897
006f10  283c              CMP      r0,#0x3c              ;10900
006f12  d31b              BCC      |L1.28492|
006f14  f884502a          STRB     r5,[r4,#0x2a]         ;10902
006f18  f44f7794          MOV      r7,#0x128             ;10903
006f1c  4638              MOV      r0,r7                 ;10903
006f1e  f7fffffe          BL       lc640_read_int
006f22  f1000001          ADD      r0,r0,#1              ;10904
006f26  b200              SXTH     r0,r0                 ;10904
006f28  f8a40078          STRH     r0,[r4,#0x78]         ;10904
006f2c  4aba              LDR      r2,|L1.29208|
006f2e  f9b61000          LDRSH    r1,[r6,#0]            ;10905  ; FORVARDBPSCHHOUR
006f32  f9b22000          LDRSH    r2,[r2,#0]            ;10905  ; NUMIST
006f36  fb01f102          MUL      r1,r1,r2              ;10905
006f3a  4281              CMP      r1,r0                 ;10905
006f3c  dc01              BGT      |L1.28482|
006f3e  f8a45078          STRH     r5,[r4,#0x78]         ;10907
                  |L1.28482|
006f42  f9b41078          LDRSH    r1,[r4,#0x78]         ;10909  ; numOfForvardBps_hourCnt
006f46  4638              MOV      r0,r7                 ;10909
006f48  f7fffffe          BL       lc640_write_int
                  |L1.28492|
006f4c  f9b40078          LDRSH    r0,[r4,#0x78]         ;10912  ; numOfForvardBps_hourCnt
006f50  f9b61000          LDRSH    r1,[r6,#0]            ;10912  ; FORVARDBPSCHHOUR
006f54  fb90f0f1          SDIV     r0,r0,r1              ;10912
006f58  f8840028          STRB     r0,[r4,#0x28]         ;10912
006f5c  e7cf              B        |L1.28414|
;;;10917  
                          ENDP

                  numOfForvardBps_init PROC
;;;10918  //-----------------------------------------------
;;;10919  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006f5e  b510              PUSH     {r4,lr}
;;;10920  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10921  lc640_write_int(EE_FORVBPSHOURCNT,0);
006f60  2100              MOVS     r1,#0
006f62  f44f7094          MOV      r0,#0x128
006f66  f7fffffe          BL       lc640_write_int
;;;10922  numOfForvardBps_minCnt=58;
006f6a  49a9              LDR      r1,|L1.29200|
006f6c  f04f003a          MOV      r0,#0x3a
006f70  f1a10128          SUB      r1,r1,#0x28
006f74  f881002a          STRB     r0,[r1,#0x2a]
;;;10923  }
006f78  bd10              POP      {r4,pc}
;;;10924  
                          ENDP

                  outVoltContrHndl PROC
;;;10925  //-----------------------------------------------
;;;10926  void outVoltContrHndl(void)
006f7a  b570              PUSH     {r4-r6,lr}
;;;10927  { 
;;;10928  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006f7c  4ca7              LDR      r4,|L1.29212|
006f7e  48a8              LDR      r0,|L1.29216|
;;;10929  	{
;;;10930  	outVoltContrHndlCnt_=0;
;;;10931  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006f80  4aa8              LDR      r2,|L1.29220|
006f82  f9b41000          LDRSH    r1,[r4,#0]            ;10928  ; load_U
006f86  f9b06000          LDRSH    r6,[r0,#0]            ;10928  ; U_OUT_KONTR_MAX
006f8a  2500              MOVS     r5,#0                 ;10930
006f8c  f9b20000          LDRSH    r0,[r2,#0]
006f90  4ba5              LDR      r3,|L1.29224|
006f92  42b1              CMP      r1,r6                 ;10928
006f94  dc04              BGT      |L1.28576|
006f96  4ea5              LDR      r6,|L1.29228|
006f98  f9b66000          LDRSH    r6,[r6,#0]            ;10928  ; U_OUT_KONTR_MIN
006f9c  42b1              CMP      r1,r6                 ;10928
006f9e  da0f              BGE      |L1.28608|
                  |L1.28576|
006fa0  801d              STRH     r5,[r3,#0]            ;10930
006fa2  49a3              LDR      r1,|L1.29232|
006fa4  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006fa8  4288              CMP      r0,r1
006faa  da1b              BGE      |L1.28644|
;;;10932  		{
;;;10933  		outVoltContrHndlCnt++;
006fac  f1000001          ADD      r0,r0,#1
006fb0  b200              SXTH     r0,r0
006fb2  8010              STRH     r0,[r2,#0]
;;;10934  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006fb4  4288              CMP      r0,r1
006fb6  d115              BNE      |L1.28644|
;;;10935  			{
;;;10936  			avar_uout_hndl(1);
006fb8  2001              MOVS     r0,#1
006fba  f7fffffe          BL       avar_uout_hndl
006fbe  e011              B        |L1.28644|
                  |L1.28608|
;;;10937  			}
;;;10938  		}
;;;10939  	}
;;;10940  else
;;;10941  	{
;;;10942  	if(outVoltContrHndlCnt)
006fc0  b180              CBZ      r0,|L1.28644|
;;;10943  		{
;;;10944  		if(outVoltContrHndlCnt_<5)
006fc2  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006fc6  2805              CMP      r0,#5
006fc8  da0c              BGE      |L1.28644|
;;;10945  			{
;;;10946  			outVoltContrHndlCnt_++;
006fca  f1000001          ADD      r0,r0,#1
006fce  b200              SXTH     r0,r0
006fd0  8018              STRH     r0,[r3,#0]
;;;10947  			if(outVoltContrHndlCnt_>=5)
006fd2  2805              CMP      r0,#5
006fd4  db06              BLT      |L1.28644|
;;;10948  				{
;;;10949  				outVoltContrHndlCnt=0;
006fd6  8015              STRH     r5,[r2,#0]
;;;10950  				if(uout_av)avar_uout_hndl(0);
006fd8  4896              LDR      r0,|L1.29236|
006fda  7800              LDRB     r0,[r0,#0]  ; uout_av
006fdc  b110              CBZ      r0,|L1.28644|
006fde  2000              MOVS     r0,#0
006fe0  f7fffffe          BL       avar_uout_hndl
                  |L1.28644|
;;;10951  				}
;;;10952  			}
;;;10953  		}
;;;10954  	}
;;;10955  
;;;10956  if (load_U<(USIGN*10)) 
006fe4  4894              LDR      r0,|L1.29240|
006fe6  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006fea  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006fee  eb000080          ADD      r0,r0,r0,LSL #2
006ff2  ebb10f40          CMP      r1,r0,LSL #1
006ff6  da0b              BGE      |L1.28688|
;;;10957  	{
;;;10958  	if(!bSILENT)
006ff8  4890              LDR      r0,|L1.29244|
006ffa  6800              LDR      r0,[r0,#0]  ; bSILENT
006ffc  2800              CMP      r0,#0
006ffe  d107              BNE      |L1.28688|
;;;10959  		{
;;;10960  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
007000  e8bd4070          POP      {r4-r6,lr}
007004  2314              MOVS     r3,#0x14
007006  2201              MOVS     r2,#1
007008  2172              MOVS     r1,#0x72
00700a  20d2              MOVS     r0,#0xd2
00700c  f7ffbffe          B.W      mess_send
                  |L1.28688|
;;;10961  		}
;;;10962  
;;;10963  	//bU_BAT2REL_AV_BAT=1;
;;;10964  	}
;;;10965  
;;;10966  
;;;10967  }
007010  bd70              POP      {r4-r6,pc}
;;;10968  
                          ENDP

                  vent_resurs_hndl PROC
;;;10969  //-----------------------------------------------
;;;10970  void vent_resurs_hndl(void)
007012  e92d47f0          PUSH     {r4-r10,lr}
;;;10971  {
;;;10972  char i;
;;;10973  char crc_in,crc_eval;
;;;10974  
;;;10975  for(i=0;i<NUMIST;i++)
007016  f04f0200          MOV      r2,#0
;;;10976  	{
;;;10977  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10978  		{
;;;10979  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10980  		}
;;;10981  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10982  		{
;;;10983  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10984  		}
;;;10985  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10986  		{
;;;10987  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10988  		}
;;;10989  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10990  		{
;;;10991  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10992  		}
;;;10993  	crc_in=0;
;;;10994  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10995  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10996  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10997  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10998  
;;;10999  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;11000  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;11001  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;11002  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;11003  
;;;11004  	if(crc_eval==crc_in)
;;;11005  		{
;;;11006  		unsigned short temp_US;
;;;11007  		temp_US=0;
;;;11008  
;;;11009  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;11010  		temp_US<<=4;
;;;11011  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;11012  		temp_US<<=4;
;;;11013  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;11014  		temp_US<<=4;
;;;11015  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;11016  
;;;11017  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;11018  		}
;;;11019  
;;;11020  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
00701a  4889              LDR      r0,|L1.29248|
00701c  f8dfc224          LDR      r12,|L1.29252|
007020  f9b06000          LDRSH    r6,[r0,#0]
007024  487c              LDR      r0,|L1.29208|
007026  f9b07000          LDRSH    r7,[r0,#0]            ;10975
00702a  e06e              B        |L1.28938|
                  |L1.28716|
00702c  eb0200c2          ADD      r0,r2,r2,LSL #3       ;10977
007030  eb001002          ADD      r0,r0,r2,LSL #4       ;10977
007034  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10977
007038  7b41              LDRB     r1,[r0,#0xd]          ;10977
00703a  098b              LSRS     r3,r1,#6              ;10977
00703c  d006              BEQ      |L1.28748|
00703e  2301              MOVS     r3,#1                 ;10981
007040  ebb31f91          CMP      r3,r1,LSR #6          ;10981
007044  d105              BNE      |L1.28754|
007046  f8801059          STRB     r1,[r0,#0x59]         ;10983
00704a  e00f              B        |L1.28780|
                  |L1.28748|
00704c  f8801058          STRB     r1,[r0,#0x58]         ;10979
007050  e00c              B        |L1.28780|
                  |L1.28754|
007052  2302              MOVS     r3,#2                 ;10985
007054  ebb31f91          CMP      r3,r1,LSR #6          ;10985
007058  d102              BNE      |L1.28768|
00705a  f880105a          STRB     r1,[r0,#0x5a]         ;10987
00705e  e005              B        |L1.28780|
                  |L1.28768|
007060  2303              MOVS     r3,#3                 ;10989
007062  ebb31f91          CMP      r3,r1,LSR #6          ;10989
007066  d101              BNE      |L1.28780|
007068  f880105b          STRB     r1,[r0,#0x5b]         ;10991
                  |L1.28780|
00706c  f8101f58          LDRB     r1,[r0,#0x58]!        ;10994
007070  f3c11401          UBFX     r4,r1,#4,#2           ;10994
007074  7843              LDRB     r3,[r0,#1]            ;10995
007076  f0030530          AND      r5,r3,#0x30           ;10995
00707a  ea440495          ORR      r4,r4,r5,LSR #2       ;10995
00707e  f8909002          LDRB     r9,[r0,#2]            ;10996
007082  f0090830          AND      r8,r9,#0x30           ;10996
007086  ea480804          ORR      r8,r8,r4              ;10996
00708a  78c5              LDRB     r5,[r0,#3]            ;10997
00708c  f1a00058          SUB      r0,r0,#0x58           ;10997
007090  f0050430          AND      r4,r5,#0x30           ;10997
007094  ea480884          ORR      r8,r8,r4,LSL #2       ;10997
007098  f001010f          AND      r1,r1,#0xf            ;10999
00709c  f003040f          AND      r4,r3,#0xf            ;11000
0070a0  ea840a01          EOR      r10,r4,r1             ;11000
0070a4  f009030f          AND      r3,r9,#0xf            ;11001
0070a8  ea83090a          EOR      r9,r3,r10             ;11001
0070ac  f005050f          AND      r5,r5,#0xf            ;11002
0070b0  ea850909          EOR      r9,r5,r9              ;11002
0070b4  45c1              CMP      r9,r8                 ;11004
0070b6  d113              BNE      |L1.28896|
0070b8  ea4f1505          LSL      r5,r5,#4              ;11010
0070bc  ea430305          ORR      r3,r3,r5              ;11011
0070c0  ea4f1303          LSL      r3,r3,#4              ;11012
0070c4  ea440403          ORR      r4,r4,r3              ;11013
0070c8  ea4f5304          LSL      r3,r4,#20             ;11014
0070cc  ea4f4313          LSR      r3,r3,#16             ;11014
0070d0  ea410103          ORR      r1,r1,r3              ;11015
0070d4  f8b0305c          LDRH     r3,[r0,#0x5c]         ;11017
0070d8  428b              CMP      r3,r1                 ;11017
0070da  d001              BEQ      |L1.28896|
0070dc  f8a0105c          STRH     r1,[r0,#0x5c]         ;11017
                  |L1.28896|
0070e0  f8b0105c          LDRH     r1,[r0,#0x5c]
0070e4  eb060386          ADD      r3,r6,r6,LSL #2
0070e8  ebb10f43          CMP      r1,r3,LSL #1
0070ec  dd06              BLE      |L1.28924|
0070ee  2e00              CMP      r6,#0
0070f0  dd04              BLE      |L1.28924|
;;;11021  		{
;;;11022  		bps[i]._av|=(1<<4);
0070f2  7841              LDRB     r1,[r0,#1]
0070f4  f0410110          ORR      r1,r1,#0x10
0070f8  7041              STRB     r1,[r0,#1]
0070fa  e003              B        |L1.28932|
                  |L1.28924|
;;;11023  		}
;;;11024  	else bps[i]._av&=~(1<<4);
0070fc  7841              LDRB     r1,[r0,#1]
0070fe  f0210110          BIC      r1,r1,#0x10
007102  7041              STRB     r1,[r0,#1]
                  |L1.28932|
007104  f1020201          ADD      r2,r2,#1              ;10975
007108  b2d2              UXTB     r2,r2                 ;10975
                  |L1.28938|
00710a  42ba              CMP      r2,r7                 ;10975
00710c  db8e              BLT      |L1.28716|
;;;11025  	}
;;;11026  }
00710e  e8bd87f0          POP      {r4-r10,pc}
;;;11027  
                          ENDP

                  vent_hndl PROC
;;;11028  //-----------------------------------------------
;;;11029  void vent_hndl(void)
007112  e92d4ff0          PUSH     {r4-r11,lr}
;;;11030  {
007116  b087              SUB      sp,sp,#0x1c
;;;11031  if(RELEVENTSIGN==rvsAKB)
;;;11032  	{
;;;11033  	if(vent_stat==0)
007118  4c3d              LDR      r4,|L1.29200|
00711a  484b              LDR      r0,|L1.29256|
;;;11034  		{
;;;11035  		if	(
;;;11036  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
00711c  494b              LDR      r1,|L1.29260|
;;;11037  			||
;;;11038  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11039  			)
;;;11040  			{
;;;11041  			vent_stat=1;
;;;11042  			}
;;;11043  		}
;;;11044  	else if(vent_stat==1)
;;;11045  		{
;;;11046  		if	(
;;;11047  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
00711e  4a4c              LDR      r2,|L1.29264|
007120  3c28              SUBS     r4,r4,#0x28           ;11033
007122  7800              LDRB     r0,[r0,#0]            ;11031  ; RELEVENTSIGN
007124  f9943000          LDRSB    r3,[r4,#0]            ;11033
007128  f9b11000          LDRSH    r1,[r1,#0]            ;11036
00712c  f9b22000          LDRSH    r2,[r2,#0]
007130  b148              CBZ      r0,|L1.28998|
;;;11048  			&&
;;;11049  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11050  			)
;;;11051  			{
;;;11052  			vent_stat=0;
;;;11053  			}
;;;11054  		}
;;;11055  	}
;;;11056  else if(RELEVENTSIGN==rvsBPS)
007132  2802              CMP      r0,#2
007134  d03c              BEQ      |L1.29104|
;;;11057  	{
;;;11058  /*	if	(
;;;11059  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11060  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11061  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11062  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11063  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11064  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11065  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11066  		)
;;;11067  		{
;;;11068  		vent_stat=1;
;;;11069  		}
;;;11070  	else vent_stat=0;
;;;11071  	*/
;;;11072  
;;;11073  	if	(
;;;11074  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11075  		||
;;;11076  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11077  		||
;;;11078  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11079  		||
;;;11080  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11081  		||
;;;11082  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11083  		||
;;;11084  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11085  		||
;;;11086  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11087  		||
;;;11088  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11089  		)
;;;11090  		{
;;;11091  		vent_stat=1;
;;;11092  		}
;;;11093  	else if(vent_stat==1)
;;;11094  		{
;;;11095  		if	(
;;;11096  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11097  			&&
;;;11098  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11099  			&&
;;;11100  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11101  			&&
;;;11102  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11103  			&&
;;;11104  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11105  			&&
;;;11106  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11107  			&&
;;;11108  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11109  			&&
;;;11110  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11111  			)
;;;11112  			{
;;;11113  			vent_stat=0;
;;;11114  			}
;;;11115  		}
;;;11116  	}
;;;11117  else if(RELEVENTSIGN==rvsEXT)
007136  2801              CMP      r0,#1
007138  d063              BEQ      |L1.29186|
;;;11118  	{
;;;11119  	if	(
;;;11120  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11121  		||
;;;11122  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11123  		||
;;;11124  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11125  		)
;;;11126  		{
;;;11127  		vent_stat=1;
;;;11128  		}
;;;11129  	else if(vent_stat==1)
;;;11130  		{
;;;11131  		if	(
;;;11132  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11133  			&&
;;;11134  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11135  			&&
;;;11136  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11137  			)
;;;11138  			{
;;;11139  			vent_stat=0;
;;;11140  			}
;;;11141  		}
;;;11142  	}
;;;11143  else vent_stat=1;
00713a  f04f0001          MOV      r0,#1
00713e  7020              STRB     r0,[r4,#0]
                  |L1.28992|
;;;11144  }
007140  b007              ADD      sp,sp,#0x1c
007142  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.28998|
007146  4f43              LDR      r7,|L1.29268|
007148  f8df810c          LDR      r8,|L1.29272|
00714c  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11036
007150  7b3d              LDRB     r5,[r7,#0xc]          ;11036
007152  f9b76056          LDRSH    r6,[r7,#0x56]         ;11038
007156  f898c000          LDRB     r12,[r8,#0]           ;11035
00715a  f8977058          LDRB     r7,[r7,#0x58]         ;11038
00715e  f8988001          LDRB     r8,[r8,#1]            ;11038
007162  b12b              CBZ      r3,|L1.29040|
007164  2b01              CMP      r3,#1                 ;11044
007166  d1eb              BNE      |L1.28992|
007168  f1bc0f55          CMP      r12,#0x55             ;11046
00716c  d115              BNE      |L1.29082|
00716e  e010              B        |L1.29074|
                  |L1.29040|
007170  f1bc0f55          CMP      r12,#0x55             ;11035
007174  d102              BNE      |L1.29052|
007176  4288              CMP      r0,r1                 ;11036
007178  dc07              BGT      |L1.29066|
00717a  b935              CBNZ     r5,|L1.29066|
                  |L1.29052|
00717c  f1b80f55          CMP      r8,#0x55              ;11038
007180  d1de              BNE      |L1.28992|
007182  428e              CMP      r6,r1                 ;11038
007184  dc01              BGT      |L1.29066|
007186  2f00              CMP      r7,#0                 ;11038
007188  d0da              BEQ      |L1.28992|
                  |L1.29066|
00718a  f04f0001          MOV      r0,#1                 ;11041
00718e  7020              STRB     r0,[r4,#0]            ;11041
007190  e7d6              B        |L1.28992|
                  |L1.29074|
007192  4290              CMP      r0,r2                 ;11047
007194  dad4              BGE      |L1.28992|
007196  2d00              CMP      r5,#0                 ;11047
007198  d1d2              BNE      |L1.28992|
                  |L1.29082|
00719a  f1b80f55          CMP      r8,#0x55              ;11049
00719e  d103              BNE      |L1.29096|
0071a0  4296              CMP      r6,r2                 ;11049
0071a2  dacd              BGE      |L1.28992|
0071a4  2f00              CMP      r7,#0                 ;11049
0071a6  d1cb              BNE      |L1.28992|
                  |L1.29096|
0071a8  f04f0000          MOV      r0,#0                 ;11052
0071ac  7020              STRB     r0,[r4,#0]            ;11052
0071ae  e7c7              B        |L1.28992|
                  |L1.29104|
0071b0  4e24              LDR      r6,|L1.29252|
0071b2  4819              LDR      r0,|L1.29208|
0071b4  6ab5              LDR      r5,[r6,#0x28]         ;11074
0071b6  f9b00000          LDRSH    r0,[r0,#0]            ;11073  ; NUMIST
0071ba  78f6              LDRB     r6,[r6,#3]            ;11074
0071bc  b118              CBZ      r0,|L1.29126|
0071be  428d              CMP      r5,r1                 ;11074
0071c0  dc7e              BGT      |L1.29376|
0071c2  2e1e              CMP      r6,#0x1e              ;11074
0071c4  d27c              BCS      |L1.29376|
                  |L1.29126|
0071c6  f8dfc07c          LDR      r12,|L1.29252|
0071ca  2801              CMP      r0,#1                 ;11076
0071cc  f8dc708c          LDR      r7,[r12,#0x8c]        ;11076
0071d0  f89cc067          LDRB     r12,[r12,#0x67]       ;11076
0071d4  f8cdc018          STR      r12,[sp,#0x18]        ;11076
0071d8  dd06              BLE      |L1.29160|
0071da  428f              CMP      r7,r1                 ;11076
0071dc  dc70              BGT      |L1.29376|
0071de  f8ddc018          LDR      r12,[sp,#0x18]        ;11076
0071e2  f1bc0f1e          CMP      r12,#0x1e             ;11076
0071e6  d26b              BCS      |L1.29376|
                  |L1.29160|
0071e8  f8dfc058          LDR      r12,|L1.29252|
0071ec  2802              CMP      r0,#2                 ;11078
0071ee  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11078
0071f2  f8cd8014          STR      r8,[sp,#0x14]         ;11078
0071f6  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11078
0071fa  f8cdc010          STR      r12,[sp,#0x10]        ;11078
0071fe  dd36              BLE      |L1.29294|
007200  e02c              B        |L1.29276|
                  |L1.29186|
007202  e0c9              B        |L1.29592|
                  |L1.29188|
                          DCD      ||.text||+0x1678
                  |L1.29192|
                          DCD      ||.text||+0x2200
                  |L1.29196|
                          DCD      ||.text||+0x1d04
                  |L1.29200|
                          DCD      ||area_number.25||+0x28
                  |L1.29204|
                          DCD      FORVARDBPSCHHOUR
                  |L1.29208|
                          DCD      NUMIST
                  |L1.29212|
                          DCD      load_U
                  |L1.29216|
                          DCD      U_OUT_KONTR_MAX
                  |L1.29220|
                          DCD      outVoltContrHndlCnt
                  |L1.29224|
                          DCD      outVoltContrHndlCnt_
                  |L1.29228|
                          DCD      U_OUT_KONTR_MIN
                  |L1.29232|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.29236|
                          DCD      uout_av
                  |L1.29240|
                          DCD      USIGN
                  |L1.29244|
                          DCD      bSILENT
                  |L1.29248|
                          DCD      TVENTMAX
                  |L1.29252|
                          DCD      bps
                  |L1.29256|
                          DCD      RELEVENTSIGN
                  |L1.29260|
                          DCD      TVENTON
                  |L1.29264|
                          DCD      TVENTOFF
                  |L1.29268|
                          DCD      bat
                  |L1.29272|
                          DCD      BAT_IS_ON
                  |L1.29276|
00725c  f8ddc014          LDR      r12,[sp,#0x14]        ;11078
007260  458c              CMP      r12,r1                ;11078
007262  dc57              BGT      |L1.29460|
007264  f8ddc010          LDR      r12,[sp,#0x10]        ;11078
007268  f1bc0f1e          CMP      r12,#0x1e             ;11078
00726c  d252              BCS      |L1.29460|
                  |L1.29294|
00726e  f8dfc1b4          LDR      r12,|L1.29732|
007272  2803              CMP      r0,#3                 ;11080
007274  f8dc8154          LDR      r8,[r12,#0x154]       ;11080
007278  f8cd800c          STR      r8,[sp,#0xc]          ;11080
00727c  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11080
007280  f8cdc008          STR      r12,[sp,#8]           ;11080
007284  dd08              BLE      |L1.29336|
007286  f8ddc00c          LDR      r12,[sp,#0xc]         ;11080
00728a  458c              CMP      r12,r1                ;11080
00728c  dc42              BGT      |L1.29460|
00728e  f8ddc008          LDR      r12,[sp,#8]           ;11080
007292  f1bc0f1e          CMP      r12,#0x1e             ;11080
007296  d23d              BCS      |L1.29460|
                  |L1.29336|
007298  f8df8188          LDR      r8,|L1.29732|
00729c  2804              CMP      r0,#4                 ;11082
00729e  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11082
0072a2  f8988193          LDRB     r8,[r8,#0x193]        ;11082
0072a6  f8cd8004          STR      r8,[sp,#4]            ;11082
0072aa  dd06              BLE      |L1.29370|
0072ac  458c              CMP      r12,r1                ;11082
0072ae  dc31              BGT      |L1.29460|
0072b0  f8dd8004          LDR      r8,[sp,#4]            ;11082
0072b4  f1b80f1e          CMP      r8,#0x1e              ;11082
0072b8  d22c              BCS      |L1.29460|
                  |L1.29370|
0072ba  f8df9168          LDR      r9,|L1.29732|
0072be  e000              B        |L1.29378|
                  |L1.29376|
0072c0  e028              B        |L1.29460|
                  |L1.29378|
0072c2  f8d9821c          LDR      r8,[r9,#0x21c]        ;11084
0072c6  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11084
0072ca  f8cd9000          STR      r9,[sp,#0]            ;11084
0072ce  2805              CMP      r0,#5                 ;11084
0072d0  dd06              BLE      |L1.29408|
0072d2  4588              CMP      r8,r1                 ;11084
0072d4  dc1e              BGT      |L1.29460|
0072d6  f8dd9000          LDR      r9,[sp,#0]            ;11084
0072da  f1b90f1e          CMP      r9,#0x1e              ;11084
0072de  d219              BCS      |L1.29460|
                  |L1.29408|
0072e0  f8dfa140          LDR      r10,|L1.29732|
0072e4  2806              CMP      r0,#6                 ;11086
0072e6  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11086
0072ea  f8da9280          LDR      r9,[r10,#0x280]       ;11086
0072ee  dd04              BLE      |L1.29434|
0072f0  4589              CMP      r9,r1                 ;11086
0072f2  dc0f              BGT      |L1.29460|
0072f4  f1be0f1e          CMP      lr,#0x1e              ;11086
0072f8  d20c              BCS      |L1.29460|
                  |L1.29434|
0072fa  f8dfb128          LDR      r11,|L1.29732|
0072fe  2807              CMP      r0,#7                 ;11088
007300  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11088
007304  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11088
007308  dd08              BLE      |L1.29468|
00730a  458a              CMP      r10,r1                ;11088
00730c  dc02              BGT      |L1.29460|
00730e  f1bb0f1e          CMP      r11,#0x1e             ;11088
007312  d303              BCC      |L1.29468|
                  |L1.29460|
007314  f04f0001          MOV      r0,#1                 ;11091
007318  7020              STRB     r0,[r4,#0]            ;11091
                  |L1.29466|
00731a  e711              B        |L1.28992|
                  |L1.29468|
00731c  2b01              CMP      r3,#1                 ;11093
00731e  d1fc              BNE      |L1.29466|
007320  b118              CBZ      r0,|L1.29482|
007322  4295              CMP      r5,r2                 ;11096
007324  daf9              BGE      |L1.29466|
007326  2e0a              CMP      r6,#0xa               ;11096
007328  d2f7              BCS      |L1.29466|
                  |L1.29482|
00732a  2802              CMP      r0,#2                 ;11098
00732c  db04              BLT      |L1.29496|
00732e  4297              CMP      r7,r2                 ;11098
007330  daf3              BGE      |L1.29466|
007332  9906              LDR      r1,[sp,#0x18]         ;11098
007334  290a              CMP      r1,#0xa               ;11098
007336  d2f0              BCS      |L1.29466|
                  |L1.29496|
007338  2803              CMP      r0,#3                 ;11100
00733a  db05              BLT      |L1.29512|
00733c  9905              LDR      r1,[sp,#0x14]         ;11100
00733e  4291              CMP      r1,r2                 ;11100
007340  daeb              BGE      |L1.29466|
007342  9904              LDR      r1,[sp,#0x10]         ;11100
007344  290a              CMP      r1,#0xa               ;11100
007346  d2e8              BCS      |L1.29466|
                  |L1.29512|
007348  2804              CMP      r0,#4                 ;11102
00734a  db05              BLT      |L1.29528|
00734c  9903              LDR      r1,[sp,#0xc]          ;11102
00734e  4291              CMP      r1,r2                 ;11102
007350  dae3              BGE      |L1.29466|
007352  9902              LDR      r1,[sp,#8]            ;11102
007354  290a              CMP      r1,#0xa               ;11102
007356  d2e0              BCS      |L1.29466|
                  |L1.29528|
007358  2805              CMP      r0,#5                 ;11104
00735a  db04              BLT      |L1.29542|
00735c  4594              CMP      r12,r2                ;11104
00735e  dadc              BGE      |L1.29466|
007360  9901              LDR      r1,[sp,#4]            ;11104
007362  290a              CMP      r1,#0xa               ;11104
007364  d2d9              BCS      |L1.29466|
                  |L1.29542|
007366  2806              CMP      r0,#6                 ;11106
007368  db04              BLT      |L1.29556|
00736a  4590              CMP      r8,r2                 ;11106
00736c  dad5              BGE      |L1.29466|
00736e  9900              LDR      r1,[sp,#0]            ;11106
007370  290a              CMP      r1,#0xa               ;11106
007372  d2d2              BCS      |L1.29466|
                  |L1.29556|
007374  2807              CMP      r0,#7                 ;11108
007376  db04              BLT      |L1.29570|
007378  4591              CMP      r9,r2                 ;11108
00737a  dace              BGE      |L1.29466|
00737c  f1be0f0a          CMP      lr,#0xa               ;11108
007380  d2cb              BCS      |L1.29466|
                  |L1.29570|
007382  2808              CMP      r0,#8                 ;11110
007384  db04              BLT      |L1.29584|
007386  4592              CMP      r10,r2                ;11110
007388  dac7              BGE      |L1.29466|
00738a  f1bb0f0a          CMP      r11,#0xa              ;11110
00738e  d2c4              BCS      |L1.29466|
                  |L1.29584|
007390  f04f0000          MOV      r0,#0                 ;11113
007394  7020              STRB     r0,[r4,#0]            ;11113
                  |L1.29590|
007396  e6d3              B        |L1.28992|
                  |L1.29592|
007398  4823              LDR      r0,|L1.29736|
00739a  4d24              LDR      r5,|L1.29740|
00739c  4e24              LDR      r6,|L1.29744|
00739e  f9b00000          LDRSH    r0,[r0,#0]            ;11119  ; NUMDT
0073a2  f9b55000          LDRSH    r5,[r5,#0]            ;11120
0073a6  7836              LDRB     r6,[r6,#0]            ;11120
0073a8  b110              CBZ      r0,|L1.29616|
0073aa  428d              CMP      r5,r1                 ;11120
0073ac  dc1d              BGT      |L1.29674|
0073ae  b9e6              CBNZ     r6,|L1.29674|
                  |L1.29616|
0073b0  4f1e              LDR      r7,|L1.29740|
0073b2  f8dfc07c          LDR      r12,|L1.29744|
0073b6  2801              CMP      r0,#1                 ;11122
0073b8  f9b77002          LDRSH    r7,[r7,#2]            ;11122
0073bc  f89cc001          LDRB     r12,[r12,#1]          ;11122
0073c0  dd04              BLE      |L1.29644|
0073c2  428f              CMP      r7,r1                 ;11122
0073c4  dc11              BGT      |L1.29674|
0073c6  f1bc0f00          CMP      r12,#0                ;11122
0073ca  d10e              BNE      |L1.29674|
                  |L1.29644|
0073cc  f8df805c          LDR      r8,|L1.29740|
0073d0  f8df905c          LDR      r9,|L1.29744|
0073d4  2802              CMP      r0,#2                 ;11124
0073d6  f9b88004          LDRSH    r8,[r8,#4]            ;11124
0073da  f8999002          LDRB     r9,[r9,#2]            ;11124
0073de  dd08              BLE      |L1.29682|
0073e0  4588              CMP      r8,r1                 ;11124
0073e2  dc02              BGT      |L1.29674|
0073e4  f1b90f00          CMP      r9,#0                 ;11124
0073e8  d003              BEQ      |L1.29682|
                  |L1.29674|
0073ea  f04f0001          MOV      r0,#1                 ;11127
0073ee  7020              STRB     r0,[r4,#0]            ;11127
0073f0  e6a6              B        |L1.28992|
                  |L1.29682|
0073f2  2b01              CMP      r3,#1                 ;11129
0073f4  d191              BNE      |L1.29466|
0073f6  b118              CBZ      r0,|L1.29696|
0073f8  4295              CMP      r5,r2                 ;11132
0073fa  da8e              BGE      |L1.29466|
0073fc  2e00              CMP      r6,#0                 ;11132
0073fe  d18c              BNE      |L1.29466|
                  |L1.29696|
007400  2802              CMP      r0,#2                 ;11134
007402  db04              BLT      |L1.29710|
007404  4297              CMP      r7,r2                 ;11134
007406  da88              BGE      |L1.29466|
007408  f1bc0f00          CMP      r12,#0                ;11134
00740c  d185              BNE      |L1.29466|
                  |L1.29710|
00740e  2803              CMP      r0,#3                 ;11136
007410  db04              BLT      |L1.29724|
007412  4590              CMP      r8,r2                 ;11136
007414  dabf              BGE      |L1.29590|
007416  f1b90f00          CMP      r9,#0                 ;11136
00741a  d1bc              BNE      |L1.29590|
                  |L1.29724|
00741c  f04f0000          MOV      r0,#0                 ;11139
007420  7020              STRB     r0,[r4,#0]            ;11139
007422  e68d              B        |L1.28992|
;;;11145  
                          ENDP

                  |L1.29732|
                          DCD      bps
                  |L1.29736|
                          DCD      NUMDT
                  |L1.29740|
                          DCD      t_ext
                  |L1.29744|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;308    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;309    if(spc_stat!=spcVZ) 
;;;310    	{
;;;311    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;309
;;;312    	sp_ch_error=0;
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
;;;918    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;310    	{
;;;311    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;309  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;309
00000c  b200              SXTH     r0,r0                 ;309
00000e  f7fffffe          BL       abs_pal
;;;312    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;313    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;314    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;317  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;317  ; adc_self_ch_buff
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;317
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  f44f7196          MOV      r1,#0x12c
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f1a406ee          SUB      r6,r4,#0xee
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;792    	snmp_bat_flag_puts[1]=0;
000040  87b0              STRH     r0,[r6,#0x3c]
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;319
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;319  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;319
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;321  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;319
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;321  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;322
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;322  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;322
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;321  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;322  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;324  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
000074  6004              STR      r4,[r0,#0]            ;324  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;324  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
00007c  6044              STR      r4,[r0,#4]            ;325  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;325  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;325
000084  6084              STR      r4,[r0,#8]            ;330  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;330  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;330
00008c  60c1              STR      r1,[r0,#0xc]          ;331  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;333  ; adc_result
000092  2964              CMP      r1,#0x64              ;333
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;333  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;334
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;334
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;338
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;338  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;340
0000b0  428c              CMP      r4,r1                 ;340
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;341
0000b8  6002              STR      r2,[r0,#0]            ;341  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;344  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;344  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;344  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;344
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;349  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;349
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;350  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;350
0000d2  b209              SXTH     r1,r1                 ;353
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;353
0000d6  f5b17f00          CMP      r1,#0x200             ;353
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;359
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;359  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;360
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;360
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;363
0000f2  ea4f2424          ASR      r4,r4,#8              ;363
0000f6  8774              STRH     r4,[r6,#0x3a]         ;368
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;368
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;369  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;369
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]         ;372
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f           ;372
00010a  2827              CMP      r0,#0x27              ;376
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]         ;376  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1                 ;376
000116  7530              STRB     r0,[r6,#0x14]         ;376
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]         ;376  ; adc_ch
00011e  7cf3              LDRB     r3,[r6,#0x13]         ;376  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6       ;376
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;377  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]     ;377
00012c  0798              LSLS     r0,r3,#30             ;377
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0                 ;379
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]    ;379
000136  4461              ADD      r1,r1,r12             ;379
000138  f1000001          ADD      r0,r0,#1              ;379
00013c  b2c0              UXTB     r0,r0                 ;379
00013e  2810              CMP      r0,#0x10              ;379
000140  d3f7              BCC      |L3.306|
000142  ea4f1021          ASR      r0,r1,#4              ;390
000146  4933              LDR      r1,|L3.532|
000148  f1a10120          SUB      r1,r1,#0x20           ;391
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]     ;391
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1              ;393
000152  b2e8              UXTB     r0,r5                 ;393
000154  74b0              STRB     r0,[r6,#0x12]         ;393
000156  2810              CMP      r0,#0x10              ;393
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]         ;394
00015c  f1030301          ADD      r3,r3,#1              ;394
000160  b2d8              UXTB     r0,r3                 ;394
000162  74f0              STRB     r0,[r6,#0x13]         ;398
000164  2810              CMP      r0,#0x10              ;398
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]         ;398
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]         ;409
00016c  f1070701          ADD      r7,r7,#1              ;409
000170  f0070001          AND      r0,r7,#1              ;409
000174  7470              STRB     r0,[r6,#0x11]         ;410
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]            ;412
00017c  f02000ff          BIC      r0,r0,#0xff           ;412
000180  f1000004          ADD      r0,r0,#4              ;412
000184  6010              STR      r0,[r2,#0]            ;413
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]         ;413  ; adc_ch
00018a  0708              LSLS     r0,r1,#28             ;413
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]            ;417
000190  f02000ff          BIC      r0,r0,#0xff           ;417
000194  f1000001          ADD      r0,r0,#1              ;419
000198  6010              STR      r0,[r2,#0]            ;419
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]            ;420
00019e  f02000ff          BIC      r0,r0,#0xff           ;420
0001a2  f1000002          ADD      r0,r0,#2              ;422
0001a6  6010              STR      r0,[r2,#0]            ;422
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]            ;422
0001ac  f0435380          ORR      r3,r3,#0x10000000     ;423
0001b0  6003              STR      r3,[r0,#0]            ;423
0001b2  6a03              LDR      r3,[r0,#0x20]         ;423
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;423
0001b8  6203              STR      r3,[r0,#0x20]         ;381
0001ba  6e03              LDR      r3,[r0,#0x60]         ;381
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;381
0001c0  6603              STR      r3,[r0,#0x60]         ;382
0001c2  07cb              LSLS     r3,r1,#31             ;382
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;384
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;384
0001cc  6143              STR      r3,[r0,#0x14]         ;384
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;384
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;385
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;385
0001d8  6343              STR      r3,[r0,#0x34]         ;385
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;400
0001de  f0235380          BIC      r3,r3,#0x10000000     ;400
0001e2  6143              STR      r3,[r0,#0x14]         ;401
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;401
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;403
0001ec  6343              STR      r3,[r0,#0x34]         ;403
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;403
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;403
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;404
0001f8  6741              STR      r1,[r0,#0x74]         ;404
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]         ;404
0001fe  f0416180          ORR      r1,r1,#0x4000000      ;428
000202  6741              STR      r1,[r0,#0x74]         ;428
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]            ;428
000206  f0407080          ORR      r0,r0,#0x1000000      ;429
00020a  6010              STR      r0,[r2,#0]            ;429
00020c  e8bd81f0          POP      {r4-r8,pc}            ;431
;;;918    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xee
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;310    	{
;;;311    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;309
00000c  7820              LDRB     r0,[r4,#0]            ;309  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;309
000010  b2c0              UXTB     r0,r0
;;;312    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;313    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;314    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;322  ; bps_I
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  8008              STRH     r0,[r1,#0]
;;;553    	snmp_bat_flag_puts[0]=0;
000034  495d              LDR      r1,|L4.428|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]            ;319
00004c  4288              CMP      r0,r1                 ;319
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;319
000054  f1b90f0a          CMP      r9,#0xa               ;319
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;321
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;322
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;319
000064  280a              CMP      r0,#0xa               ;321
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;321
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;324
000072  f88c2001          STRB     r2,[r12,#1]           ;324
000076  f1a30301          SUB      r3,r3,#1              ;324
00007a  f8a83000          STRH     r3,[r8,#0]            ;325
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;325
000084  f88c2001          STRB     r2,[r12,#1]           ;330
000088  f1030301          ADD      r3,r3,#1              ;330
00008c  f8a83000          STRH     r3,[r8,#0]            ;331
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;333
000092  4251              RSBS     r1,r2,#0              ;333
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;334  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;338
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;338  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;338
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;340  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;340
0000b4  f04f0004          MOV      r0,#4                 ;341
0000b8  f88d0001          STRB     r0,[sp,#1]            ;341
0000bc  f88d5002          STRB     r5,[sp,#2]            ;344
0000c0  f04f0002          MOV      r0,#2                 ;344
0000c4  f88d0003          STRB     r0,[sp,#3]            ;349
0000c8  f88d5004          STRB     r5,[sp,#4]            ;349
0000cc  f04f0001          MOV      r0,#1                 ;350
0000d0  f88d0005          STRB     r0,[sp,#5]            ;350
0000d4  f04f0106          MOV      r1,#6                 ;353
0000d8  4668              MOV      r0,sp                 ;357
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;359
0000e2  ea4f2020          ASR      r0,r0,#8              ;359
0000e6  f88d0007          STRB     r0,[sp,#7]            ;360
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;360  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;363
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;368
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;368  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;369
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;369
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]         ;372  ; main_kb_cnt
00010a  4291              CMP      r1,r2                 ;376
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]            ;376  ; ICA_EN
000110  2901              CMP      r1,#1                 ;376
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]            ;376  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]            ;376
00011c  f04f0106          MOV      r1,#6                 ;376
000120  f88d1001          STRB     r1,[sp,#1]            ;376
000124  f88d5002          STRB     r5,[sp,#2]            ;377
000128  f04f011e          MOV      r1,#0x1e              ;377
00012c  f88d1003          STRB     r1,[sp,#3]            ;377
000130  ea4f71e0          ASR      r1,r0,#31             ;379
000134  eb006111          ADD      r1,r0,r1,LSR #24      ;379
000138  ea4f2221          ASR      r2,r1,#8              ;379
00013c  f88d2004          STRB     r2,[sp,#4]            ;379
000140  f88d0005          STRB     r0,[sp,#5]            ;390
000144  f04f0106          MOV      r1,#6                 ;390
000148  4668              MOV      r0,sp                 ;391
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]            ;393
000152  ea4f2020          ASR      r0,r0,#8              ;393
000156  f88d0007          STRB     r0,[sp,#7]            ;393
00015a  8838              LDRH     r0,[r7,#0]            ;394  ; ICA_CH
00015c  2800              CMP      r0,#0                 ;394
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0                 ;394
000162  466d              MOV      r5,sp                 ;398
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]            ;398
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1              ;409
000172  b2e4              UXTB     r4,r4                 ;410
000174  2c08              CMP      r4,#8                 ;410
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14           ;412
00017a  e8bd83f0          POP      {r4-r9,pc}            ;412
                  |L4.382|
00017e  f04f0400          MOV      r4,#0                 ;412
000182  46e9              MOV      r9,sp                 ;412
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]            ;413
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1              ;417
000190  b2e4              UXTB     r4,r4                 ;417
000192  2c08              CMP      r4,#8                 ;419
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;918    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;308    {  
000002  4604              MOV      r4,r0
;;;309    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;310    	{
;;;311    	vz_error=0;
;;;312    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;313    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;321
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;322
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  b101              CBZ      r1,|L5.54|
;;;553    	snmp_bat_flag_puts[0]=0;
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;792    	snmp_bat_flag_puts[1]=0;
000040  f1000001          ADD      r0,r0,#1
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;319
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;319
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;319
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;319
000058  461a              MOV      r2,r3                 ;321
00005a  210e              MOVS     r1,#0xe               ;321
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;321
000066  2202              MOVS     r2,#2                 ;321
000068  210e              MOVS     r1,#0xe               ;321
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;324
000074  2203              MOVS     r2,#3                 ;324
000076  210e              MOVS     r1,#0xe               ;324
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;325
000082  2204              MOVS     r2,#4                 ;325
000084  210e              MOVS     r1,#0xe               ;330
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;333
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;333
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;333  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;333
00009c  70d0              STRB     r0,[r2,#3]            ;334
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;334
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;338
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;338
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;340
0000b0  2201              MOVS     r2,#1                 ;340
0000b2  210e              MOVS     r1,#0xe               ;341
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;344
0000be  461a              MOV      r2,r3                 ;344
0000c0  210e              MOVS     r1,#0xe               ;344
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;350
0000cc  2203              MOVS     r2,#3                 ;350
0000ce  210e              MOVS     r1,#0xe               ;350
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;357
0000da  2204              MOVS     r2,#4                 ;357
0000dc  210e              MOVS     r1,#0xe               ;359
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;360
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;360
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;363  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;363
0000f4  70d0              STRB     r0,[r2,#3]            ;368
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;368
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;369
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;369
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3                 ;372
000108  2201              MOVS     r2,#1                 ;372
00010a  210e              MOVS     r1,#0xe               ;376
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3                 ;376
000116  2202              MOVS     r2,#2                 ;376
000118  210e              MOVS     r1,#0xe               ;376
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3                 ;376
000124  461a              MOV      r2,r3                 ;377
000126  210e              MOVS     r1,#0xe               ;377
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3                 ;379
000132  2204              MOVS     r2,#4                 ;379
000134  210e              MOVS     r1,#0xe               ;379
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28             ;379
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28             ;390
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]            ;390  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1              ;391
00014c  70d0              STRB     r0,[r2,#3]            ;391
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1                 ;393
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2                 ;393
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3                 ;393
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4                 ;394
000160  2201              MOVS     r2,#1                 ;394
000162  210e              MOVS     r1,#0xe               ;398
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4                 ;409
00016e  2202              MOVS     r2,#2                 ;409
000170  210e              MOVS     r1,#0xe               ;409
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4                 ;412
00017c  2203              MOVS     r2,#3                 ;412
00017e  210e              MOVS     r1,#0xe               ;412
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4                 ;413
00018a  461a              MOV      r2,r3                 ;413
00018c  210e              MOVS     r1,#0xe               ;417
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27             ;419
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27             ;420
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]            ;420  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1              ;422
0001a4  70d0              STRB     r0,[r2,#3]            ;422
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1                 ;422
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2                 ;423
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;423
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;381
0001b8  2201              MOVS     r2,#1                 ;381
0001ba  210e              MOVS     r1,#0xe               ;381
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;384
0001c6  2202              MOVS     r2,#2                 ;384
0001c8  210e              MOVS     r1,#0xe               ;384
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;385
0001d4  2203              MOVS     r2,#3                 ;385
0001d6  210e              MOVS     r1,#0xe               ;385
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;400
0001e2  2204              MOVS     r2,#4                 ;401
0001e4  210e              MOVS     r1,#0xe               ;401
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;403
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;403
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;404  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1              ;404
0001fc  70d0              STRB     r0,[r2,#3]            ;404
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1                 ;428
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2                 ;428
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3                 ;429
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6                 ;431
000210  2201              MOVS     r2,#1                 ;431
000212  210e              MOVS     r1,#0xe               ;431
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6                 ;432
00021e  2202              MOVS     r2,#2                 ;432
000220  210e              MOVS     r1,#0xe               ;436
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6                 ;447
00022c  2203              MOVS     r2,#3                 ;447
00022e  210e              MOVS     r1,#0xe               ;447
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6                 ;450
00023a  2204              MOVS     r2,#4                 ;450
00023c  210e              MOVS     r1,#0xe               ;450
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]            ;455  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1              ;455
000250  70d0              STRB     r0,[r2,#3]            ;457
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1                 ;457
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2                 ;458
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3                 ;460
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0                 ;460
000264  2201              MOVS     r2,#1                 ;460
000266  210e              MOVS     r1,#0xe               ;460
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;461
000272  2202              MOVS     r2,#2                 ;438
000274  210e              MOVS     r1,#0xe               ;438
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;439
000280  2203              MOVS     r2,#3                 ;441
000282  210e              MOVS     r1,#0xe               ;441
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;442
00028e  2204              MOVS     r2,#4                 ;442
000290  210e              MOVS     r1,#0xe               ;442
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!        ;466
00029c  7068              STRB     r0,[r5,#1]            ;466
00029e  bd70              POP      {r4-r6,pc}            ;467
;;;918    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb8
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;310    	{
;;;311    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;309  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;309  ; TBOXMAX
;;;312    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;321
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  dd00              BLE      |L6.66|
;;;792    	snmp_bat_flag_puts[1]=0;
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;319
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;319  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;321  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;321
00005a  4298              CMP      r0,r3                 ;321
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;322  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;319
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;321
00006a  b249              SXTB     r1,r1                 ;322
00006c  7011              STRB     r1,[r2,#0]            ;322
00006e  291e              CMP      r1,#0x1e              ;324
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;324  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;324
000078  8039              STRH     r1,[r7,#0]            ;324
00007a  7014              STRB     r4,[r2,#0]            ;325
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;325
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;325  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;330
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;331
00008e  b249              SXTB     r1,r1                 ;333
000090  7011              STRB     r1,[r2,#0]            ;333
000092  291e              CMP      r1,#0x1e              ;333
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;333  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;333
00009c  8039              STRH     r1,[r7,#0]            ;334
00009e  7014              STRB     r4,[r2,#0]            ;334
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;338
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;338  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;340
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;340
0000b0  2100              MOVS     r1,#0                 ;340
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;344
0000be  8800              LDRH     r0,[r0,#0]            ;344  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;344
0000c2  b202              SXTH     r2,r0                 ;349
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;350
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;353  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;353
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;357  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;359
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;359  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;360
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;360
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;363
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;368  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;368
0000fc  2928              CMP      r1,#0x28              ;369
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;369  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0                 ;372
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]            ;376  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1              ;376
000110  8038              STRH     r0,[r7,#0]            ;376
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]            ;376  ; TBATENABLE
000118  4281              CMP      r1,r0                 ;376
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]            ;376  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1              ;376
000122  8038              STRH     r0,[r7,#0]            ;376
                  |L6.292|
000124  2206              MOVS     r2,#6                 ;377
000126  2100              MOVS     r1,#0                 ;377
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]            ;377  ; tbatdisable_cnt
000132  2805              CMP      r0,#5                 ;379
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]            ;379
                  |L6.314|
00013a  2801              CMP      r0,#1                 ;379
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]            ;379
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]            ;390
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]            ;391  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32           ;393
000154  291e              CMP      r1,#0x1e              ;393
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]            ;393  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0                 ;394
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]            ;398  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1              ;398
000168  8028              STRH     r0,[r5,#0]            ;398
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]            ;409  ; TLOADENABLE
000170  4281              CMP      r1,r0                 ;409
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]            ;410  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1              ;410
00017a  8028              STRH     r0,[r5,#0]            ;412
                  |L6.380|
00017c  2206              MOVS     r2,#6                 ;412
00017e  2100              MOVS     r1,#0                 ;412
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]            ;413  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5                 ;413
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]            ;417
                  |L6.400|
000190  2801              CMP      r0,#1                 ;417
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]            ;419
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}            ;419
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]            ;420
00019c  e7fb              B        |L6.406|
;;;918    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;310    	{
;;;311    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;309
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;309
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;312    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;321
000030  4e45              LDR      r6,|L7.328|
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  4f46              LDR      r7,|L7.332|
;;;553    	snmp_bat_flag_puts[0]=0;
000034  f8df8118          LDR      r8,|L7.336|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
000040  2500              MOVS     r5,#0
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;319
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;319
00004e  f8a81000          STRH     r1,[r8,#0]            ;319
000052  2801              CMP      r0,#1                 ;321
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;319
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;321
00005a  2200              MOVS     r2,#0                 ;321
00005c  21e6              MOVS     r1,#0xe6              ;322
00005e  20e1              MOVS     r0,#0xe1              ;322
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;321
000068  f04f0000          MOV      r0,#0                 ;321
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;322
000070  f9b85000          LDRSH    r5,[r8,#0]            ;324
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;324
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;325
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;325
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;325
000086  69c9              LDR      r1,[r1,#0x1c]         ;330
000088  4299              CMP      r1,r3                 ;330
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;331
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;333
000094  b2c0              UXTB     r0,r0                 ;333
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;333
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;334
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;334
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;338
0000aa  7020              STRB     r0,[r4,#0]            ;340
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;340
0000b0  f8a81000          STRH     r1,[r8,#0]            ;340
0000b4  2802              CMP      r0,#2                 ;341
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;341
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;344
0000bc  2200              MOVS     r2,#0                 ;344
0000be  21e6              MOVS     r1,#0xe6              ;344
0000c0  20e1              MOVS     r0,#0xe1              ;344
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;349
0000ca  f04f0000          MOV      r0,#0                 ;350
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;350
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;353
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;353
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;359
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;359
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;360
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;360
0000ea  4299              CMP      r1,r3                 ;360
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;363
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;363
0000f6  b2c0              UXTB     r0,r0                 ;368
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;368
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;369
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;369
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee              ;372
00010a  e9cd0500          STRD     r0,r5,[sp,#0]         ;376
00010e  9502              STR      r5,[sp,#8]            ;376
000110  9503              STR      r5,[sp,#0xc]          ;376
000112  7831              LDRB     r1,[r6,#0]            ;376  ; uavt_bps_pntr
000114  4603              MOV      r3,r0                 ;376
000116  2216              MOVS     r2,#0x16              ;376
000118  4608              MOV      r0,r1                 ;376
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]            ;376  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1              ;376
000122  b2c0              UXTB     r0,r0                 ;376
000124  7030              STRB     r0,[r6,#0]            ;377
000126  f9ba1000          LDRSH    r1,[r10,#0]           ;377  ; NUMIST
00012a  4288              CMP      r0,r1                 ;377
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]            ;377
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]            ;379  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]           ;379
000136  e8bd9fff          POP      {r0-r12,pc}           ;379
;;;918    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;308    {  
000002  f44f70b4          MOV      r0,#0x168
;;;309    if(spc_stat!=spcVZ) 
;;;310    	{
;;;311    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;309
00000e  700a              STRB     r2,[r1,#0]            ;309
000010  f04f0100          MOV      r1,#0
;;;312    	sp_ch_error=0;
;;;313    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
;;;918    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  bps_on_mask
00005e  0000              DCB      0x00,0x00
                  bps_off_mask
000060  0000              DCB      0x00,0x00
                  vz_cnt_s
000062  0000              DCB      0x00,0x00
                  vz_cnt_s_
000064  0000              DCB      0x00,0x00
                  vz_cnt_h
000066  0000              DCB      0x00,0x00
                  vz_cnt_h_
000068  0000              DCB      0x00,0x00
                  cnt_end_ke
00006a  0000              DCB      0x00,0x00
                  __ee_vz_cnt
00006c  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006e  0000              DCB      0x00,0x00
                  __ee_spc_bat
000070  0000              DCB      0x00,0x00
                  __ee_spc_phase
000072  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000074  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000076  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000078  0000              DCB      0x00,0x00
                  vz1_stat_cnt
00007a  0000              DCB      0x00,0x00
                  volt_region_cnt
00007c  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007e  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
000080  0000              DCB      0x00,0x00
                  plazma_ica1
000082  0000              DCB      0x00,0x00
                  bat_hndl_i
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000086  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000088  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
00008c  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008e  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000ec  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ee  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
