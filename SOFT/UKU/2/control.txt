; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4efc              LDR      r6,|L1.1016|
;;;310    	{
;;;311    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;309  ; spc_stat
00000c  2802              CMP      r0,#2                 ;309
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;312    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;313    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;314    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f8dfa3e0          LDR      r10,|L1.1020|
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8dfb3e0          LDR      r11,|L1.1024|
000020  f8df83e0          LDR      r8,|L1.1028|
000024  f8ba0000          LDRH     r0,[r10,#0]           ;317  ; snmp_bat_status
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93dc          LDR      r9,|L1.1032|
00002c  4cf7              LDR      r4,|L1.1036|
00002e  4df8              LDR      r5,|L1.1040|
000030  b148              CBZ      r0,|L1.70|
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  8027              STRH     r7,[r4,#0]
;;;553    	snmp_bat_flag_puts[0]=0;
000034  802f              STRH     r7,[r5,#0]
                  |L1.54|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8ba0002          LDRH     r0,[r10,#2]  ; snmp_bat_status
00003a  2800              CMP      r0,#0
00003c  d07d              BEQ      |L1.314|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  8067              STRH     r7,[r4,#2]
;;;792    	snmp_bat_flag_puts[1]=0;
000040  806f              STRH     r7,[r5,#2]
                  |L1.66|
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.70|
000046  f9bb0000          LDRSH    r0,[r11,#0]           ;319  ; USIGN
00004a  f9b82002          LDRSH    r2,[r8,#2]            ;319  ; bat
00004e  eb000380          ADD      r3,r0,r0,LSL #2       ;319
000052  48ee              LDR      r0,|L1.1036|
000054  ebb20f43          CMP      r2,r3,LSL #1          ;319
000058  f9b01000          LDRSH    r1,[r0,#0]            ;321
00005c  48ec              LDR      r0,|L1.1040|
00005e  f9b00000          LDRSH    r0,[r0,#0]            ;322
000062  da0f              BGE      |L1.132|
000064  f0410101          ORR      r1,r1,#1              ;321
000068  8021              STRH     r1,[r4,#0]            ;321
00006a  07c0              LSLS     r0,r0,#31             ;322
00006c  d119              BNE      |L1.162|
00006e  2300              MOVS     r3,#0                 ;324
000070  2208              MOVS     r2,#8                 ;324
000072  2105              MOVS     r1,#5                 ;324
000074  a0e7              ADR      r0,|L1.1044|
000076  f7fffffe          BL       snmp_trap_send
00007a  8828              LDRH     r0,[r5,#0]            ;325  ; snmp_bat_flag_puts
00007c  f0400001          ORR      r0,r0,#1              ;325
000080  8028              STRH     r0,[r5,#0]            ;325
000082  e00e              B        |L1.162|
                  |L1.132|
000084  f0210101          BIC      r1,r1,#1              ;330
000088  8021              STRH     r1,[r4,#0]            ;330
00008a  07c0              LSLS     r0,r0,#31             ;331
00008c  d009              BEQ      |L1.162|
00008e  2301              MOVS     r3,#1                 ;333
000090  2208              MOVS     r2,#8                 ;333
000092  2105              MOVS     r1,#5                 ;333
000094  a0e7              ADR      r0,|L1.1076|
000096  f7fffffe          BL       snmp_trap_send
00009a  8828              LDRH     r0,[r5,#0]            ;334  ; snmp_bat_flag_puts
00009c  f0200001          BIC      r0,r0,#1              ;334
0000a0  8028              STRH     r0,[r5,#0]            ;334
                  |L1.162|
0000a2  f898003f          LDRB     r0,[r8,#0x3f]         ;338  ; bat
0000a6  07c0              LSLS     r0,r0,#31             ;338
0000a8  d011              BEQ      |L1.206|
0000aa  8820              LDRH     r0,[r4,#0]            ;340  ; snmp_bat_flag
0000ac  f0400002          ORR      r0,r0,#2              ;340
0000b0  8020              STRH     r0,[r4,#0]            ;340
0000b2  8828              LDRH     r0,[r5,#0]            ;341  ; snmp_bat_flag_puts
0000b4  0780              LSLS     r0,r0,#30             ;341
0000b6  d41b              BMI      |L1.240|
0000b8  2302              MOVS     r3,#2                 ;343
0000ba  2208              MOVS     r2,#8                 ;343
0000bc  2105              MOVS     r1,#5                 ;343
0000be  a0e7              ADR      r0,|L1.1116|
0000c0  f7fffffe          BL       snmp_trap_send
0000c4  8828              LDRH     r0,[r5,#0]            ;344  ; snmp_bat_flag_puts
0000c6  f0400002          ORR      r0,r0,#2              ;344
0000ca  8028              STRH     r0,[r5,#0]            ;344
0000cc  e010              B        |L1.240|
                  |L1.206|
0000ce  8820              LDRH     r0,[r4,#0]            ;349  ; snmp_bat_flag
0000d0  f0200002          BIC      r0,r0,#2              ;349
0000d4  8020              STRH     r0,[r4,#0]            ;349
0000d6  8828              LDRH     r0,[r5,#0]            ;350  ; snmp_bat_flag_puts
0000d8  0780              LSLS     r0,r0,#30             ;350
0000da  d509              BPL      |L1.240|
0000dc  2303              MOVS     r3,#3                 ;352
0000de  2208              MOVS     r2,#8                 ;352
0000e0  2105              MOVS     r1,#5                 ;352
0000e2  a0e9              ADR      r0,|L1.1160|
0000e4  f7fffffe          BL       snmp_trap_send
0000e8  8828              LDRH     r0,[r5,#0]            ;353  ; snmp_bat_flag_puts
0000ea  f0200002          BIC      r0,r0,#2              ;353
0000ee  8028              STRH     r0,[r5,#0]            ;353
                  |L1.240|
0000f0  f898003f          LDRB     r0,[r8,#0x3f]         ;357  ; bat
0000f4  0780              LSLS     r0,r0,#30             ;357
0000f6  d511              BPL      |L1.284|
0000f8  8820              LDRH     r0,[r4,#0]            ;359  ; snmp_bat_flag
0000fa  f0400004          ORR      r0,r0,#4              ;359
0000fe  8020              STRH     r0,[r4,#0]            ;359
000100  8828              LDRH     r0,[r5,#0]            ;360  ; snmp_bat_flag_puts
000102  0740              LSLS     r0,r0,#29             ;360
000104  d41d              BMI      |L1.322|
000106  2304              MOVS     r3,#4                 ;362
000108  2208              MOVS     r2,#8                 ;362
00010a  2105              MOVS     r1,#5                 ;362
00010c  a0eb              ADR      r0,|L1.1212|
00010e  f7fffffe          BL       snmp_trap_send
000112  8828              LDRH     r0,[r5,#0]            ;363  ; snmp_bat_flag_puts
000114  f0400004          ORR      r0,r0,#4              ;363
000118  8028              STRH     r0,[r5,#0]            ;363
00011a  e012              B        |L1.322|
                  |L1.284|
00011c  8820              LDRH     r0,[r4,#0]            ;368  ; snmp_bat_flag
00011e  f0200004          BIC      r0,r0,#4              ;368
000122  8020              STRH     r0,[r4,#0]            ;368
000124  8828              LDRH     r0,[r5,#0]            ;369  ; snmp_bat_flag_puts
000126  0740              LSLS     r0,r0,#29             ;369
000128  d50b              BPL      |L1.322|
00012a  2305              MOVS     r3,#5                 ;371
00012c  2208              MOVS     r2,#8                 ;371
00012e  4619              MOV      r1,r3                 ;371
000130  a0ec              ADR      r0,|L1.1252|
000132  f7fffffe          BL       snmp_trap_send
000136  8828              LDRH     r0,[r5,#0]            ;372  ; snmp_bat_flag_puts
000138  e000              B        |L1.316|
                  |L1.314|
00013a  e322              B        |L1.1922|
                  |L1.316|
00013c  f0200004          BIC      r0,r0,#4              ;372
000140  8028              STRH     r0,[r5,#0]            ;372
                  |L1.322|
000142  f9b91000          LDRSH    r1,[r9,#0]            ;376  ; IKB
000146  f9b80008          LDRSH    r0,[r8,#8]            ;376  ; bat
00014a  424a              RSBS     r2,r1,#0              ;376
00014c  4290              CMP      r0,r2                 ;376
00014e  da04              BGE      |L1.346|
000150  8820              LDRH     r0,[r4,#0]            ;376  ; snmp_bat_flag
000152  f0400008          ORR      r0,r0,#8              ;376
000156  8020              STRH     r0,[r4,#0]            ;376
000158  e005              B        |L1.358|
                  |L1.346|
00015a  4288              CMP      r0,r1                 ;377
00015c  dd03              BLE      |L1.358|
00015e  8820              LDRH     r0,[r4,#0]            ;377  ; snmp_bat_flag
000160  f0200008          BIC      r0,r0,#8              ;377
000164  8020              STRH     r0,[r4,#0]            ;377
                  |L1.358|
000166  f8960023          LDRB     r0,[r6,#0x23]         ;379  ; spc_stat
00016a  2801              CMP      r0,#1                 ;379
00016c  d103              BNE      |L1.374|
00016e  f8960024          LDRB     r0,[r6,#0x24]         ;379  ; spc_bat
000172  2800              CMP      r0,#0                 ;379
000174  d03a              BEQ      |L1.492|
                  |L1.374|
000176  8820              LDRH     r0,[r4,#0]            ;390  ; snmp_bat_flag
000178  f0200010          BIC      r0,r0,#0x10           ;390
00017c  8020              STRH     r0,[r4,#0]            ;390
00017e  8828              LDRH     r0,[r5,#0]            ;391  ; snmp_bat_flag_puts
000180  06c0              LSLS     r0,r0,#27             ;391
000182  d509              BPL      |L1.408|
000184  2307              MOVS     r3,#7                 ;393
000186  2208              MOVS     r2,#8                 ;393
000188  2105              MOVS     r1,#5                 ;393
00018a  a0e3              ADR      r0,|L1.1304|
00018c  f7fffffe          BL       snmp_trap_send
000190  8828              LDRH     r0,[r5,#0]            ;394  ; snmp_bat_flag_puts
000192  f0200010          BIC      r0,r0,#0x10           ;394
000196  8028              STRH     r0,[r5,#0]            ;394
                  |L1.408|
000198  f8960023          LDRB     r0,[r6,#0x23]         ;398  ; spc_stat
00019c  2802              CMP      r0,#2                 ;398
00019e  d037              BEQ      |L1.528|
0001a0  8820              LDRH     r0,[r4,#0]            ;409  ; snmp_bat_flag
0001a2  f0200020          BIC      r0,r0,#0x20           ;409
0001a6  8020              STRH     r0,[r4,#0]            ;409
0001a8  8828              LDRH     r0,[r5,#0]            ;410  ; snmp_bat_flag_puts
0001aa  0680              LSLS     r0,r0,#26             ;410
0001ac  d509              BPL      |L1.450|
0001ae  2309              MOVS     r3,#9                 ;412
0001b0  2208              MOVS     r2,#8                 ;412
0001b2  2105              MOVS     r1,#5                 ;412
0001b4  a0e0              ADR      r0,|L1.1336|
0001b6  f7fffffe          BL       snmp_trap_send
0001ba  8828              LDRH     r0,[r5,#0]            ;413  ; snmp_bat_flag_puts
0001bc  f0200020          BIC      r0,r0,#0x20           ;413
0001c0  8028              STRH     r0,[r5,#0]            ;413
                  |L1.450|
0001c2  7870              LDRB     r0,[r6,#1]            ;417  ; vz_error
0001c4  2800              CMP      r0,#0                 ;417
0001c6  d035              BEQ      |L1.564|
0001c8  8820              LDRH     r0,[r4,#0]            ;419  ; snmp_bat_flag
0001ca  f0400040          ORR      r0,r0,#0x40           ;419
0001ce  8020              STRH     r0,[r4,#0]            ;419
0001d0  8828              LDRH     r0,[r5,#0]            ;420  ; snmp_bat_flag_puts
0001d2  0640              LSLS     r0,r0,#25             ;420
0001d4  d43f              BMI      |L1.598|
0001d6  230a              MOVS     r3,#0xa               ;422
0001d8  2208              MOVS     r2,#8                 ;422
0001da  2105              MOVS     r1,#5                 ;422
0001dc  a0df              ADR      r0,|L1.1372|
0001de  f7fffffe          BL       snmp_trap_send
0001e2  8828              LDRH     r0,[r5,#0]            ;423  ; snmp_bat_flag_puts
0001e4  f0400040          ORR      r0,r0,#0x40           ;423
0001e8  8028              STRH     r0,[r5,#0]            ;423
0001ea  e034              B        |L1.598|
                  |L1.492|
0001ec  8820              LDRH     r0,[r4,#0]            ;381  ; snmp_bat_flag
0001ee  f0400010          ORR      r0,r0,#0x10           ;381
0001f2  8020              STRH     r0,[r4,#0]            ;381
0001f4  8828              LDRH     r0,[r5,#0]            ;382  ; snmp_bat_flag_puts
0001f6  06c0              LSLS     r0,r0,#27             ;382
0001f8  d4ce              BMI      |L1.408|
0001fa  2306              MOVS     r3,#6                 ;384
0001fc  2208              MOVS     r2,#8                 ;384
0001fe  2105              MOVS     r1,#5                 ;384
000200  a0df              ADR      r0,|L1.1408|
000202  f7fffffe          BL       snmp_trap_send
000206  8828              LDRH     r0,[r5,#0]            ;385  ; snmp_bat_flag_puts
000208  f0400010          ORR      r0,r0,#0x10           ;385
00020c  8028              STRH     r0,[r5,#0]            ;385
00020e  e7c3              B        |L1.408|
                  |L1.528|
000210  8820              LDRH     r0,[r4,#0]            ;400  ; snmp_bat_flag
000212  f0400020          ORR      r0,r0,#0x20           ;400
000216  8020              STRH     r0,[r4,#0]            ;400
000218  8828              LDRH     r0,[r5,#0]            ;401  ; snmp_bat_flag_puts
00021a  0680              LSLS     r0,r0,#26             ;401
00021c  d4d1              BMI      |L1.450|
00021e  2308              MOVS     r3,#8                 ;403
000220  461a              MOV      r2,r3                 ;403
000222  2105              MOVS     r1,#5                 ;403
000224  a0de              ADR      r0,|L1.1440|
000226  f7fffffe          BL       snmp_trap_send
00022a  8828              LDRH     r0,[r5,#0]            ;404  ; snmp_bat_flag_puts
00022c  f0400020          ORR      r0,r0,#0x20           ;404
000230  8028              STRH     r0,[r5,#0]            ;404
000232  e7c6              B        |L1.450|
                  |L1.564|
000234  8820              LDRH     r0,[r4,#0]            ;428  ; snmp_bat_flag
000236  f0200040          BIC      r0,r0,#0x40           ;428
00023a  8020              STRH     r0,[r4,#0]            ;428
00023c  8828              LDRH     r0,[r5,#0]            ;429  ; snmp_bat_flag_puts
00023e  0640              LSLS     r0,r0,#25             ;429
000240  d509              BPL      |L1.598|
000242  230b              MOVS     r3,#0xb               ;431
000244  2208              MOVS     r2,#8                 ;431
000246  2105              MOVS     r1,#5                 ;431
000248  a0de              ADR      r0,|L1.1476|
00024a  f7fffffe          BL       snmp_trap_send
00024e  8828              LDRH     r0,[r5,#0]            ;432  ; snmp_bat_flag_puts
000250  f0200040          BIC      r0,r0,#0x40           ;432
000254  8028              STRH     r0,[r5,#0]            ;432
                  |L1.598|
000256  48e4              LDR      r0,|L1.1512|
000258  7800              LDRB     r0,[r0,#0]            ;436  ; sp_ch_stat
00025a  2802              CMP      r0,#2                 ;436
00025c  d024              BEQ      |L1.680|
00025e  8820              LDRH     r0,[r4,#0]            ;447  ; snmp_bat_flag
000260  f0200080          BIC      r0,r0,#0x80           ;447
000264  8020              STRH     r0,[r4,#0]            ;447
000266  8828              LDRH     r0,[r5,#0]            ;448  ; snmp_bat_flag_puts
000268  0600              LSLS     r0,r0,#24             ;448
00026a  d509              BPL      |L1.640|
00026c  230b              MOVS     r3,#0xb               ;450
00026e  2208              MOVS     r2,#8                 ;450
000270  2105              MOVS     r1,#5                 ;450
000272  a0de              ADR      r0,|L1.1516|
000274  f7fffffe          BL       snmp_trap_send
000278  8828              LDRH     r0,[r5,#0]            ;451  ; snmp_bat_flag_puts
00027a  f0200080          BIC      r0,r0,#0x80           ;451
00027e  8028              STRH     r0,[r5,#0]            ;451
                  |L1.640|
000280  78b0              LDRB     r0,[r6,#2]            ;455  ; sp_ch_error
000282  b318              CBZ      r0,|L1.716|
000284  8820              LDRH     r0,[r4,#0]            ;457  ; snmp_bat_flag
000286  f4407080          ORR      r0,r0,#0x100          ;457
00028a  8020              STRH     r0,[r4,#0]            ;457
00028c  8828              LDRH     r0,[r5,#0]            ;458  ; snmp_bat_flag_puts
00028e  05c0              LSLS     r0,r0,#23             ;458
000290  d42d              BMI      |L1.750|
000292  230c              MOVS     r3,#0xc               ;460
000294  2208              MOVS     r2,#8                 ;460
000296  2105              MOVS     r1,#5                 ;460
000298  a0dc              ADR      r0,|L1.1548|
00029a  f7fffffe          BL       snmp_trap_send
00029e  8828              LDRH     r0,[r5,#0]            ;461  ; snmp_bat_flag_puts
0002a0  f4407080          ORR      r0,r0,#0x100          ;461
0002a4  8028              STRH     r0,[r5,#0]            ;461
0002a6  e022              B        |L1.750|
                  |L1.680|
0002a8  8820              LDRH     r0,[r4,#0]            ;438  ; snmp_bat_flag
0002aa  f0400080          ORR      r0,r0,#0x80           ;438
0002ae  8020              STRH     r0,[r4,#0]            ;438
0002b0  8828              LDRH     r0,[r5,#0]            ;439  ; snmp_bat_flag_puts
0002b2  0600              LSLS     r0,r0,#24             ;439
0002b4  d4e4              BMI      |L1.640|
0002b6  230a              MOVS     r3,#0xa               ;441
0002b8  2208              MOVS     r2,#8                 ;441
0002ba  2105              MOVS     r1,#5                 ;441
0002bc  a0db              ADR      r0,|L1.1580|
0002be  f7fffffe          BL       snmp_trap_send
0002c2  8828              LDRH     r0,[r5,#0]            ;442  ; snmp_bat_flag_puts
0002c4  f0400080          ORR      r0,r0,#0x80           ;442
0002c8  8028              STRH     r0,[r5,#0]            ;442
0002ca  e7d9              B        |L1.640|
                  |L1.716|
0002cc  8820              LDRH     r0,[r4,#0]            ;466  ; snmp_bat_flag
0002ce  f4207080          BIC      r0,r0,#0x100          ;466
0002d2  8020              STRH     r0,[r4,#0]            ;466
0002d4  8828              LDRH     r0,[r5,#0]            ;467  ; snmp_bat_flag_puts
0002d6  05c0              LSLS     r0,r0,#23             ;467
0002d8  d509              BPL      |L1.750|
0002da  230d              MOVS     r3,#0xd               ;469
0002dc  2208              MOVS     r2,#8                 ;469
0002de  2105              MOVS     r1,#5                 ;469
0002e0  a0da              ADR      r0,|L1.1612|
0002e2  f7fffffe          BL       snmp_trap_send
0002e6  8828              LDRH     r0,[r5,#0]            ;470  ; snmp_bat_flag_puts
0002e8  f4207080          BIC      r0,r0,#0x100          ;470
0002ec  8028              STRH     r0,[r5,#0]            ;470
                  |L1.750|
0002ee  7970              LDRB     r0,[r6,#5]            ;474  ; vz1_stat
0002f0  b188              CBZ      r0,|L1.790|
0002f2  8820              LDRH     r0,[r4,#0]            ;476  ; snmp_bat_flag
0002f4  f4407000          ORR      r0,r0,#0x200          ;476
0002f8  8020              STRH     r0,[r4,#0]            ;476
0002fa  8828              LDRH     r0,[r5,#0]            ;477  ; snmp_bat_flag_puts
0002fc  0580              LSLS     r0,r0,#22             ;477
0002fe  d41b              BMI      |L1.824|
000300  230e              MOVS     r3,#0xe               ;479
000302  2208              MOVS     r2,#8                 ;479
000304  2105              MOVS     r1,#5                 ;479
000306  a0da              ADR      r0,|L1.1648|
000308  f7fffffe          BL       snmp_trap_send
00030c  8828              LDRH     r0,[r5,#0]            ;480  ; snmp_bat_flag_puts
00030e  f4407000          ORR      r0,r0,#0x200          ;480
000312  8028              STRH     r0,[r5,#0]            ;480
000314  e010              B        |L1.824|
                  |L1.790|
000316  8820              LDRH     r0,[r4,#0]            ;485  ; snmp_bat_flag
000318  f4207000          BIC      r0,r0,#0x200          ;485
00031c  8020              STRH     r0,[r4,#0]            ;485
00031e  8828              LDRH     r0,[r5,#0]            ;486  ; snmp_bat_flag_puts
000320  0580              LSLS     r0,r0,#22             ;486
000322  d509              BPL      |L1.824|
000324  230f              MOVS     r3,#0xf               ;488
000326  2208              MOVS     r2,#8                 ;488
000328  2105              MOVS     r1,#5                 ;488
00032a  a0d9              ADR      r0,|L1.1680|
00032c  f7fffffe          BL       snmp_trap_send
000330  8828              LDRH     r0,[r5,#0]            ;489  ; snmp_bat_flag_puts
000332  f4207000          BIC      r0,r0,#0x200          ;489
000336  8028              STRH     r0,[r5,#0]            ;489
                  |L1.824|
000338  78f0              LDRB     r0,[r6,#3]            ;493  ; vz1_error
00033a  b188              CBZ      r0,|L1.864|
00033c  8820              LDRH     r0,[r4,#0]            ;495  ; snmp_bat_flag
00033e  f4406080          ORR      r0,r0,#0x400          ;495
000342  8020              STRH     r0,[r4,#0]            ;495
000344  8828              LDRH     r0,[r5,#0]            ;496  ; snmp_bat_flag_puts
000346  0540              LSLS     r0,r0,#21             ;496
000348  d41b              BMI      |L1.898|
00034a  2310              MOVS     r3,#0x10              ;498
00034c  2208              MOVS     r2,#8                 ;498
00034e  2105              MOVS     r1,#5                 ;498
000350  a0d7              ADR      r0,|L1.1712|
000352  f7fffffe          BL       snmp_trap_send
000356  8828              LDRH     r0,[r5,#0]            ;499  ; snmp_bat_flag_puts
000358  f4406080          ORR      r0,r0,#0x400          ;499
00035c  8028              STRH     r0,[r5,#0]            ;499
00035e  e010              B        |L1.898|
                  |L1.864|
000360  8820              LDRH     r0,[r4,#0]            ;504  ; snmp_bat_flag
000362  f4206080          BIC      r0,r0,#0x400          ;504
000366  8020              STRH     r0,[r4,#0]            ;504
000368  8828              LDRH     r0,[r5,#0]            ;505  ; snmp_bat_flag_puts
00036a  0540              LSLS     r0,r0,#21             ;505
00036c  d509              BPL      |L1.898|
00036e  2311              MOVS     r3,#0x11              ;507
000370  2208              MOVS     r2,#8                 ;507
000372  2105              MOVS     r1,#5                 ;507
000374  a0d7              ADR      r0,|L1.1748|
000376  f7fffffe          BL       snmp_trap_send
00037a  8828              LDRH     r0,[r5,#0]            ;508  ; snmp_bat_flag_puts
00037c  f4206080          BIC      r0,r0,#0x400          ;508
000380  8028              STRH     r0,[r5,#0]            ;508
                  |L1.898|
000382  79f0              LDRB     r0,[r6,#7]            ;512  ; vz2_stat
000384  b188              CBZ      r0,|L1.938|
000386  8820              LDRH     r0,[r4,#0]            ;514  ; snmp_bat_flag
000388  f4406000          ORR      r0,r0,#0x800          ;514
00038c  8020              STRH     r0,[r4,#0]            ;514
00038e  8828              LDRH     r0,[r5,#0]            ;515  ; snmp_bat_flag_puts
000390  0500              LSLS     r0,r0,#20             ;515
000392  d41b              BMI      |L1.972|
000394  2312              MOVS     r3,#0x12              ;517
000396  2208              MOVS     r2,#8                 ;517
000398  2105              MOVS     r1,#5                 ;517
00039a  a0d8              ADR      r0,|L1.1788|
00039c  f7fffffe          BL       snmp_trap_send
0003a0  8828              LDRH     r0,[r5,#0]            ;518  ; snmp_bat_flag_puts
0003a2  f4406000          ORR      r0,r0,#0x800          ;518
0003a6  8028              STRH     r0,[r5,#0]            ;518
0003a8  e010              B        |L1.972|
                  |L1.938|
0003aa  8820              LDRH     r0,[r4,#0]            ;523  ; snmp_bat_flag
0003ac  f4206000          BIC      r0,r0,#0x800          ;523
0003b0  8020              STRH     r0,[r4,#0]            ;523
0003b2  8828              LDRH     r0,[r5,#0]            ;524  ; snmp_bat_flag_puts
0003b4  0500              LSLS     r0,r0,#20             ;524
0003b6  d509              BPL      |L1.972|
0003b8  2313              MOVS     r3,#0x13              ;526
0003ba  2208              MOVS     r2,#8                 ;526
0003bc  2105              MOVS     r1,#5                 ;526
0003be  a0d6              ADR      r0,|L1.1816|
0003c0  f7fffffe          BL       snmp_trap_send
0003c4  8828              LDRH     r0,[r5,#0]            ;527  ; snmp_bat_flag_puts
0003c6  f4206000          BIC      r0,r0,#0x800          ;527
0003ca  8028              STRH     r0,[r5,#0]            ;527
                  |L1.972|
0003cc  7930              LDRB     r0,[r6,#4]            ;531  ; vz2_error
0003ce  b190              CBZ      r0,|L1.1014|
0003d0  8820              LDRH     r0,[r4,#0]            ;533  ; snmp_bat_flag
0003d2  f4405080          ORR      r0,r0,#0x1000         ;533
0003d6  8020              STRH     r0,[r4,#0]            ;533
0003d8  8828              LDRH     r0,[r5,#0]            ;534  ; snmp_bat_flag_puts
0003da  04c0              LSLS     r0,r0,#19             ;534
0003dc  f53fae2b          BMI      |L1.54|
0003e0  2314              MOVS     r3,#0x14              ;536
0003e2  2208              MOVS     r2,#8                 ;536
0003e4  2105              MOVS     r1,#5                 ;536
0003e6  a0d4              ADR      r0,|L1.1848|
0003e8  f7fffffe          BL       snmp_trap_send
0003ec  8828              LDRH     r0,[r5,#0]            ;537  ; snmp_bat_flag_puts
0003ee  f4405080          ORR      r0,r0,#0x1000         ;537
0003f2  8028              STRH     r0,[r5,#0]            ;537
                  |L1.1012|
0003f4  e61f              B        |L1.54|
                  |L1.1014|
0003f6  e1b1              B        |L1.1884|
                  |L1.1016|
                          DCD      ||area_number.25||
                  |L1.1020|
                          DCD      snmp_bat_status
                  |L1.1024|
                          DCD      USIGN
                  |L1.1028|
                          DCD      bat
                  |L1.1032|
                          DCD      IKB
                  |L1.1036|
                          DCD      snmp_bat_flag
                  |L1.1040|
                          DCD      snmp_bat_flag_puts
                  |L1.1044|
000414  42415420          DCB      "BAT #1 Alarm, battery is low",0
000418  23312041
00041c  6c61726d
000420  2c206261
000424  74746572
000428  79206973
00042c  206c6f77
000430  00      
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000438  23312041
00043c  6c61726d
000440  20636c65
000444  61722c20
000448  62617474
00044c  65727920
000450  6973206e
000454  6f74206c
000458  6f7700  
00045b  00                DCB      0
                  |L1.1116|
00045c  42415420          DCB      "BAT #1 Warning, high battery temperature",0
000460  23312057
000464  61726e69
000468  6e672c20
00046c  68696768
000470  20626174
000474  74657279
000478  2074656d
00047c  70657261
000480  74757265
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  42415420          DCB      "BAT #1 Warning clear, battery temperature is normal",0
00048c  23312057
000490  61726e69
000494  6e672063
000498  6c656172
00049c  2c206261
0004a0  74746572
0004a4  79207465
0004a8  6d706572
0004ac  61747572
0004b0  65206973
0004b4  206e6f72
0004b8  6d616c00
                  |L1.1212|
0004bc  42415420          DCB      "BAT #1 Alarm, high battery temperature",0
0004c0  23312041
0004c4  6c61726d
0004c8  2c206869
0004cc  67682062
0004d0  61747465
0004d4  72792074
0004d8  656d7065
0004dc  72617475
0004e0  726500  
0004e3  00                DCB      0
                  |L1.1252|
0004e4  42415420          DCB      "BAT #1 Alarm clear, battery temperature is normal",0
0004e8  23312041
0004ec  6c61726d
0004f0  20636c65
0004f4  61722c20
0004f8  62617474
0004fc  65727920
000500  74656d70
000504  65726174
000508  75726520
00050c  6973206e
000510  6f726d61
000514  6c00    
000516  00                DCB      0
000517  00                DCB      0
                  |L1.1304|
000518  42415420          DCB      "BAT #1, capacity test stopped",0
00051c  23312c20
000520  63617061
000524  63697479
000528  20746573
00052c  74207374
000530  6f707065
000534  6400    
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  42415420          DCB      "BAT #1,leveling charge is stopped",0
00053c  23312c6c
000540  6576656c
000544  696e6720
000548  63686172
00054c  67652069
000550  73207374
000554  6f707065
000558  6400    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L1.1372|
00055c  42415420          DCB      "BAT #1,leveling charge is blocked",0
000560  23312c6c
000564  6576656c
000568  696e6720
00056c  63686172
000570  67652069
000574  7320626c
000578  6f636b65
00057c  6400    
00057e  00                DCB      0
00057f  00                DCB      0
                  |L1.1408|
000580  42415420          DCB      "BAT #1, capacity test started",0
000584  23312c20
000588  63617061
00058c  63697479
000590  20746573
000594  74207374
000598  61727465
00059c  6400    
00059e  00                DCB      0
00059f  00                DCB      0
                  |L1.1440|
0005a0  42415420          DCB      "BAT #1,leveling charge is started",0
0005a4  23312c6c
0005a8  6576656c
0005ac  696e6720
0005b0  63686172
0005b4  67652069
0005b8  73207374
0005bc  61727465
0005c0  6400    
0005c2  00                DCB      0
0005c3  00                DCB      0
                  |L1.1476|
0005c4  42415420          DCB      "BAT #1,leveling charge is unblocked",0
0005c8  23312c6c
0005cc  6576656c
0005d0  696e6720
0005d4  63686172
0005d8  67652069
0005dc  7320756e
0005e0  626c6f63
0005e4  6b656400
                  |L1.1512|
                          DCD      sp_ch_stat
                  |L1.1516|
0005ec  42415420          DCB      "BAT #1,speed charge is stopped",0
0005f0  23312c73
0005f4  70656564
0005f8  20636861
0005fc  72676520
000600  69732073
000604  746f7070
000608  656400  
00060b  00                DCB      0
                  |L1.1548|
00060c  42415420          DCB      "BAT #1,speed charge is blocked",0
000610  23312c73
000614  70656564
000618  20636861
00061c  72676520
000620  69732062
000624  6c6f636b
000628  656400  
00062b  00                DCB      0
                  |L1.1580|
00062c  42415420          DCB      "BAT #1,speed charge is started",0
000630  23312c73
000634  70656564
000638  20636861
00063c  72676520
000640  69732073
000644  74617274
000648  656400  
00064b  00                DCB      0
                  |L1.1612|
00064c  42415420          DCB      "BAT #1,speed charge is unblocked",0
000650  23312c73
000654  70656564
000658  20636861
00065c  72676520
000660  69732075
000664  6e626c6f
000668  636b6564
00066c  00      
00066d  00                DCB      0
00066e  00                DCB      0
00066f  00                DCB      0
                  |L1.1648|
000670  42415420          DCB      "BAT #1,equalising charge is on",0
000674  23312c65
000678  7175616c
00067c  6973696e
000680  67206368
000684  61726765
000688  20697320
00068c  6f6e00  
00068f  00                DCB      0
                  |L1.1680|
000690  42415420          DCB      "BAT #1,equalising charge is off",0
000694  23312c65
000698  7175616c
00069c  6973696e
0006a0  67206368
0006a4  61726765
0006a8  20697320
0006ac  6f666600
                  |L1.1712|
0006b0  42415420          DCB      "BAT #1,equalising charge is blocked",0
0006b4  23312c65
0006b8  7175616c
0006bc  6973696e
0006c0  67206368
0006c4  61726765
0006c8  20697320
0006cc  626c6f63
0006d0  6b656400
                  |L1.1748|
0006d4  42415420          DCB      "BAT #1,equalising charge is unblocked",0
0006d8  23312c65
0006dc  7175616c
0006e0  6973696e
0006e4  67206368
0006e8  61726765
0006ec  20697320
0006f0  756e626c
0006f4  6f636b65
0006f8  6400    
0006fa  00                DCB      0
0006fb  00                DCB      0
                  |L1.1788|
0006fc  42415420          DCB      "BAT #1,molding charge is on",0
000700  23312c6d
000704  6f6c6469
000708  6e672063
00070c  68617267
000710  65206973
000714  206f6e00
                  |L1.1816|
000718  42415420          DCB      "BAT #1,molding charge is off",0
00071c  23312c6d
000720  6f6c6469
000724  6e672063
000728  68617267
00072c  65206973
000730  206f6666
000734  00      
000735  00                DCB      0
000736  00                DCB      0
000737  00                DCB      0
                  |L1.1848|
000738  42415420          DCB      "BAT #1,molding charge is blocked",0
00073c  23312c6d
000740  6f6c6469
000744  6e672063
000748  68617267
00074c  65206973
000750  20626c6f
000754  636b6564
000758  00      
000759  00                DCB      0
00075a  00                DCB      0
00075b  00                DCB      0
                  |L1.1884|
00075c  8820              LDRH     r0,[r4,#0]            ;542  ; snmp_bat_flag
00075e  f4205080          BIC      r0,r0,#0x1000         ;542
000762  8020              STRH     r0,[r4,#0]            ;542
000764  8828              LDRH     r0,[r5,#0]            ;543  ; snmp_bat_flag_puts
000766  04c0              LSLS     r0,r0,#19             ;543
000768  f57fae44          BPL      |L1.1012|
00076c  2315              MOVS     r3,#0x15              ;545
00076e  2208              MOVS     r2,#8                 ;545
000770  2105              MOVS     r1,#5                 ;545
000772  a0fa              ADR      r0,|L1.2908|
000774  f7fffffe          BL       snmp_trap_send
000778  8828              LDRH     r0,[r5,#0]            ;546  ; snmp_bat_flag_puts
00077a  f4205080          BIC      r0,r0,#0x1000         ;546
00077e  8028              STRH     r0,[r5,#0]            ;546
000780  e459              B        |L1.54|
                  |L1.1922|
000782  f9bb0000          LDRSH    r0,[r11,#0]           ;558  ; USIGN
000786  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;558  ; bat
00078a  eb000080          ADD      r0,r0,r0,LSL #2       ;558
00078e  ebb10f40          CMP      r1,r0,LSL #1          ;558
000792  da12              BGE      |L1.1978|
000794  8860              LDRH     r0,[r4,#2]            ;560  ; snmp_bat_flag
000796  f0400001          ORR      r0,r0,#1              ;560
00079a  8060              STRH     r0,[r4,#2]            ;560
00079c  8868              LDRH     r0,[r5,#2]            ;561  ; snmp_bat_flag_puts
00079e  07c0              LSLS     r0,r0,#31             ;561
0007a0  d11d              BNE      |L1.2014|
0007a2  2316              MOVS     r3,#0x16              ;563
0007a4  2208              MOVS     r2,#8                 ;563
0007a6  2105              MOVS     r1,#5                 ;563
0007a8  f2af3098          ADR      r0,|L1.1044|
0007ac  f7fffffe          BL       snmp_trap_send
0007b0  8868              LDRH     r0,[r5,#2]            ;564  ; snmp_bat_flag_puts
0007b2  f0400001          ORR      r0,r0,#1              ;564
0007b6  8068              STRH     r0,[r5,#2]            ;564
0007b8  e011              B        |L1.2014|
                  |L1.1978|
0007ba  8860              LDRH     r0,[r4,#2]            ;569  ; snmp_bat_flag
0007bc  f0200001          BIC      r0,r0,#1              ;569
0007c0  8060              STRH     r0,[r4,#2]            ;569
0007c2  8868              LDRH     r0,[r5,#2]            ;570  ; snmp_bat_flag_puts
0007c4  07c0              LSLS     r0,r0,#31             ;570
0007c6  d00a              BEQ      |L1.2014|
0007c8  2317              MOVS     r3,#0x17              ;572
0007ca  2208              MOVS     r2,#8                 ;572
0007cc  2105              MOVS     r1,#5                 ;572
0007ce  f2af309c          ADR      r0,|L1.1076|
0007d2  f7fffffe          BL       snmp_trap_send
0007d6  8868              LDRH     r0,[r5,#2]            ;573  ; snmp_bat_flag_puts
0007d8  f0200001          BIC      r0,r0,#1              ;573
0007dc  8068              STRH     r0,[r5,#2]            ;573
                  |L1.2014|
0007de  f898008b          LDRB     r0,[r8,#0x8b]         ;577  ; bat
0007e2  07c0              LSLS     r0,r0,#31             ;577
0007e4  d012              BEQ      |L1.2060|
0007e6  8860              LDRH     r0,[r4,#2]            ;579  ; snmp_bat_flag
0007e8  f0400002          ORR      r0,r0,#2              ;579
0007ec  8060              STRH     r0,[r4,#2]            ;579
0007ee  8828              LDRH     r0,[r5,#0]            ;580  ; snmp_bat_flag_puts
0007f0  0780              LSLS     r0,r0,#30             ;580
0007f2  d41d              BMI      |L1.2096|
0007f4  2318              MOVS     r3,#0x18              ;582
0007f6  2208              MOVS     r2,#8                 ;582
0007f8  2105              MOVS     r1,#5                 ;582
0007fa  f2af30a0          ADR      r0,|L1.1116|
0007fe  f7fffffe          BL       snmp_trap_send
000802  8868              LDRH     r0,[r5,#2]            ;583  ; snmp_bat_flag_puts
000804  f0400002          ORR      r0,r0,#2              ;583
000808  8068              STRH     r0,[r5,#2]            ;583
00080a  e011              B        |L1.2096|
                  |L1.2060|
00080c  8860              LDRH     r0,[r4,#2]            ;588  ; snmp_bat_flag
00080e  f0200002          BIC      r0,r0,#2              ;588
000812  8060              STRH     r0,[r4,#2]            ;588
000814  8868              LDRH     r0,[r5,#2]            ;589  ; snmp_bat_flag_puts
000816  0780              LSLS     r0,r0,#30             ;589
000818  d50a              BPL      |L1.2096|
00081a  2319              MOVS     r3,#0x19              ;591
00081c  2208              MOVS     r2,#8                 ;591
00081e  2105              MOVS     r1,#5                 ;591
000820  f2af309c          ADR      r0,|L1.1160|
000824  f7fffffe          BL       snmp_trap_send
000828  8868              LDRH     r0,[r5,#2]            ;592  ; snmp_bat_flag_puts
00082a  f0200002          BIC      r0,r0,#2              ;592
00082e  8068              STRH     r0,[r5,#2]            ;592
                  |L1.2096|
000830  f898008b          LDRB     r0,[r8,#0x8b]         ;596  ; bat
000834  0780              LSLS     r0,r0,#30             ;596
000836  d512              BPL      |L1.2142|
000838  8860              LDRH     r0,[r4,#2]            ;598  ; snmp_bat_flag
00083a  f0400004          ORR      r0,r0,#4              ;598
00083e  8060              STRH     r0,[r4,#2]            ;598
000840  8868              LDRH     r0,[r5,#2]            ;599  ; snmp_bat_flag_puts
000842  0740              LSLS     r0,r0,#29             ;599
000844  d41d              BMI      |L1.2178|
000846  231a              MOVS     r3,#0x1a              ;601
000848  2208              MOVS     r2,#8                 ;601
00084a  2105              MOVS     r1,#5                 ;601
00084c  f2af3094          ADR      r0,|L1.1212|
000850  f7fffffe          BL       snmp_trap_send
000854  8868              LDRH     r0,[r5,#2]            ;602  ; snmp_bat_flag_puts
000856  f0400004          ORR      r0,r0,#4              ;602
00085a  8068              STRH     r0,[r5,#2]            ;602
00085c  e011              B        |L1.2178|
                  |L1.2142|
00085e  8860              LDRH     r0,[r4,#2]            ;607  ; snmp_bat_flag
000860  f0200004          BIC      r0,r0,#4              ;607
000864  8060              STRH     r0,[r4,#2]            ;607
000866  8868              LDRH     r0,[r5,#2]            ;608  ; snmp_bat_flag_puts
000868  0740              LSLS     r0,r0,#29             ;608
00086a  d50a              BPL      |L1.2178|
00086c  231b              MOVS     r3,#0x1b              ;610
00086e  2208              MOVS     r2,#8                 ;610
000870  2105              MOVS     r1,#5                 ;610
000872  f2af3090          ADR      r0,|L1.1252|
000876  f7fffffe          BL       snmp_trap_send
00087a  8868              LDRH     r0,[r5,#2]            ;611  ; snmp_bat_flag_puts
00087c  f0200004          BIC      r0,r0,#4              ;611
000880  8068              STRH     r0,[r5,#2]            ;611
                  |L1.2178|
000882  f9b91000          LDRSH    r1,[r9,#0]            ;615  ; IKB
000886  f9b80054          LDRSH    r0,[r8,#0x54]         ;615  ; bat
00088a  424a              RSBS     r2,r1,#0              ;615
00088c  4290              CMP      r0,r2                 ;615
00088e  da04              BGE      |L1.2202|
000890  8860              LDRH     r0,[r4,#2]            ;615  ; snmp_bat_flag
000892  f0400008          ORR      r0,r0,#8              ;615
000896  8060              STRH     r0,[r4,#2]            ;615
000898  e005              B        |L1.2214|
                  |L1.2202|
00089a  4288              CMP      r0,r1                 ;616
00089c  dd03              BLE      |L1.2214|
00089e  8860              LDRH     r0,[r4,#2]            ;616  ; snmp_bat_flag
0008a0  f0200008          BIC      r0,r0,#8              ;616
0008a4  8060              STRH     r0,[r4,#2]            ;616
                  |L1.2214|
0008a6  f8960023          LDRB     r0,[r6,#0x23]         ;618  ; spc_stat
0008aa  2801              CMP      r0,#1                 ;618
0008ac  d102              BNE      |L1.2228|
0008ae  f8960024          LDRB     r0,[r6,#0x24]         ;618  ; spc_bat
0008b2  b3e0              CBZ      r0,|L1.2350|
                  |L1.2228|
0008b4  8860              LDRH     r0,[r4,#2]            ;629  ; snmp_bat_flag
0008b6  f0200010          BIC      r0,r0,#0x10           ;629
0008ba  8060              STRH     r0,[r4,#2]            ;629
0008bc  8868              LDRH     r0,[r5,#2]            ;630  ; snmp_bat_flag_puts
0008be  06c0              LSLS     r0,r0,#27             ;630
0008c0  d50a              BPL      |L1.2264|
0008c2  231d              MOVS     r3,#0x1d              ;632
0008c4  2208              MOVS     r2,#8                 ;632
0008c6  2105              MOVS     r1,#5                 ;632
0008c8  f2af30b4          ADR      r0,|L1.1304|
0008cc  f7fffffe          BL       snmp_trap_send
0008d0  8868              LDRH     r0,[r5,#2]            ;633  ; snmp_bat_flag_puts
0008d2  f0200010          BIC      r0,r0,#0x10           ;633
0008d6  8068              STRH     r0,[r5,#2]            ;633
                  |L1.2264|
0008d8  f8960023          LDRB     r0,[r6,#0x23]         ;637  ; spc_stat
0008dc  2802              CMP      r0,#2                 ;637
0008de  d03a              BEQ      |L1.2390|
0008e0  8860              LDRH     r0,[r4,#2]            ;648  ; snmp_bat_flag
0008e2  f0200020          BIC      r0,r0,#0x20           ;648
0008e6  8060              STRH     r0,[r4,#2]            ;648
0008e8  8868              LDRH     r0,[r5,#2]            ;649  ; snmp_bat_flag_puts
0008ea  0680              LSLS     r0,r0,#26             ;649
0008ec  d50a              BPL      |L1.2308|
0008ee  231f              MOVS     r3,#0x1f              ;651
0008f0  2208              MOVS     r2,#8                 ;651
0008f2  2105              MOVS     r1,#5                 ;651
0008f4  f2af30c0          ADR      r0,|L1.1336|
0008f8  f7fffffe          BL       snmp_trap_send
0008fc  8868              LDRH     r0,[r5,#2]            ;652  ; snmp_bat_flag_puts
0008fe  f0200020          BIC      r0,r0,#0x20           ;652
000902  8068              STRH     r0,[r5,#2]            ;652
                  |L1.2308|
000904  7870              LDRB     r0,[r6,#1]            ;656  ; vz_error
000906  b3c8              CBZ      r0,|L1.2428|
000908  8860              LDRH     r0,[r4,#2]            ;658  ; snmp_bat_flag
00090a  f0400040          ORR      r0,r0,#0x40           ;658
00090e  8060              STRH     r0,[r4,#2]            ;658
000910  8868              LDRH     r0,[r5,#2]            ;659  ; snmp_bat_flag_puts
000912  0640              LSLS     r0,r0,#25             ;659
000914  d445              BMI      |L1.2466|
000916  2320              MOVS     r3,#0x20              ;661
000918  2208              MOVS     r2,#8                 ;661
00091a  2105              MOVS     r1,#5                 ;661
00091c  f2af30c4          ADR      r0,|L1.1372|
000920  f7fffffe          BL       snmp_trap_send
000924  8868              LDRH     r0,[r5,#2]            ;662  ; snmp_bat_flag_puts
000926  f0400040          ORR      r0,r0,#0x40           ;662
00092a  8068              STRH     r0,[r5,#2]            ;662
00092c  e039              B        |L1.2466|
                  |L1.2350|
00092e  e7ff              B        |L1.2352|
                  |L1.2352|
000930  8860              LDRH     r0,[r4,#2]            ;620  ; snmp_bat_flag
000932  f0400010          ORR      r0,r0,#0x10           ;620
000936  8060              STRH     r0,[r4,#2]            ;620
000938  8868              LDRH     r0,[r5,#2]            ;621  ; snmp_bat_flag_puts
00093a  06c0              LSLS     r0,r0,#27             ;621
00093c  d4cc              BMI      |L1.2264|
00093e  231c              MOVS     r3,#0x1c              ;623
000940  2208              MOVS     r2,#8                 ;623
000942  2105              MOVS     r1,#5                 ;623
000944  f2af30c8          ADR      r0,|L1.1408|
000948  f7fffffe          BL       snmp_trap_send
00094c  8868              LDRH     r0,[r5,#2]            ;624  ; snmp_bat_flag_puts
00094e  f0400010          ORR      r0,r0,#0x10           ;624
000952  8068              STRH     r0,[r5,#2]            ;624
000954  e7c0              B        |L1.2264|
                  |L1.2390|
000956  8860              LDRH     r0,[r4,#2]            ;639  ; snmp_bat_flag
000958  f0400020          ORR      r0,r0,#0x20           ;639
00095c  8060              STRH     r0,[r4,#2]            ;639
00095e  8868              LDRH     r0,[r5,#2]            ;640  ; snmp_bat_flag_puts
000960  0680              LSLS     r0,r0,#26             ;640
000962  d4cf              BMI      |L1.2308|
000964  231e              MOVS     r3,#0x1e              ;642
000966  2208              MOVS     r2,#8                 ;642
000968  2105              MOVS     r1,#5                 ;642
00096a  f2af30cc          ADR      r0,|L1.1440|
00096e  f7fffffe          BL       snmp_trap_send
000972  8868              LDRH     r0,[r5,#2]            ;643  ; snmp_bat_flag_puts
000974  f0400020          ORR      r0,r0,#0x20           ;643
000978  8068              STRH     r0,[r5,#2]            ;643
00097a  e7c3              B        |L1.2308|
                  |L1.2428|
00097c  e7ff              B        |L1.2430|
                  |L1.2430|
00097e  8860              LDRH     r0,[r4,#2]            ;667  ; snmp_bat_flag
000980  f0200040          BIC      r0,r0,#0x40           ;667
000984  8060              STRH     r0,[r4,#2]            ;667
000986  8868              LDRH     r0,[r5,#2]            ;668  ; snmp_bat_flag_puts
000988  0640              LSLS     r0,r0,#25             ;668
00098a  d50a              BPL      |L1.2466|
00098c  2321              MOVS     r3,#0x21              ;670
00098e  2208              MOVS     r2,#8                 ;670
000990  2105              MOVS     r1,#5                 ;670
000992  f2af30d0          ADR      r0,|L1.1476|
000996  f7fffffe          BL       snmp_trap_send
00099a  8868              LDRH     r0,[r5,#2]            ;671  ; snmp_bat_flag_puts
00099c  f0200040          BIC      r0,r0,#0x40           ;671
0009a0  8068              STRH     r0,[r5,#2]            ;671
                  |L1.2466|
0009a2  4877              LDR      r0,|L1.2944|
0009a4  7800              LDRB     r0,[r0,#0]            ;675  ; sp_ch_stat
0009a6  2802              CMP      r0,#2                 ;675
0009a8  d026              BEQ      |L1.2552|
0009aa  8860              LDRH     r0,[r4,#2]            ;686  ; snmp_bat_flag
0009ac  f0200080          BIC      r0,r0,#0x80           ;686
0009b0  8060              STRH     r0,[r4,#2]            ;686
0009b2  8868              LDRH     r0,[r5,#2]            ;687  ; snmp_bat_flag_puts
0009b4  0600              LSLS     r0,r0,#24             ;687
0009b6  d50a              BPL      |L1.2510|
0009b8  2323              MOVS     r3,#0x23              ;689
0009ba  2208              MOVS     r2,#8                 ;689
0009bc  2105              MOVS     r1,#5                 ;689
0009be  f2af30d4          ADR      r0,|L1.1516|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;690  ; snmp_bat_flag_puts
0009c8  f0200080          BIC      r0,r0,#0x80           ;690
0009cc  8068              STRH     r0,[r5,#2]            ;690
                  |L1.2510|
0009ce  78b0              LDRB     r0,[r6,#2]            ;694  ; sp_ch_error
0009d0  b328              CBZ      r0,|L1.2590|
0009d2  8860              LDRH     r0,[r4,#2]            ;696  ; snmp_bat_flag
0009d4  f4407080          ORR      r0,r0,#0x100          ;696
0009d8  8060              STRH     r0,[r4,#2]            ;696
0009da  8868              LDRH     r0,[r5,#2]            ;697  ; snmp_bat_flag_puts
0009dc  05c0              LSLS     r0,r0,#23             ;697
0009de  d430              BMI      |L1.2626|
0009e0  2324              MOVS     r3,#0x24              ;699
0009e2  2208              MOVS     r2,#8                 ;699
0009e4  2105              MOVS     r1,#5                 ;699
0009e6  f2af30dc          ADR      r0,|L1.1548|
0009ea  f7fffffe          BL       snmp_trap_send
0009ee  8868              LDRH     r0,[r5,#2]            ;700  ; snmp_bat_flag_puts
0009f0  f4407080          ORR      r0,r0,#0x100          ;700
0009f4  8068              STRH     r0,[r5,#2]            ;700
0009f6  e024              B        |L1.2626|
                  |L1.2552|
0009f8  8860              LDRH     r0,[r4,#2]            ;677  ; snmp_bat_flag
0009fa  f0400080          ORR      r0,r0,#0x80           ;677
0009fe  8060              STRH     r0,[r4,#2]            ;677
000a00  8868              LDRH     r0,[r5,#2]            ;678  ; snmp_bat_flag_puts
000a02  0600              LSLS     r0,r0,#24             ;678
000a04  d4e3              BMI      |L1.2510|
000a06  2322              MOVS     r3,#0x22              ;680
000a08  2208              MOVS     r2,#8                 ;680
000a0a  2105              MOVS     r1,#5                 ;680
000a0c  f2af30e4          ADR      r0,|L1.1580|
000a10  f7fffffe          BL       snmp_trap_send
000a14  8868              LDRH     r0,[r5,#2]            ;681  ; snmp_bat_flag_puts
000a16  f0400080          ORR      r0,r0,#0x80           ;681
000a1a  8068              STRH     r0,[r5,#2]            ;681
000a1c  e7d7              B        |L1.2510|
                  |L1.2590|
000a1e  8860              LDRH     r0,[r4,#2]            ;705  ; snmp_bat_flag
000a20  f4207080          BIC      r0,r0,#0x100          ;705
000a24  8060              STRH     r0,[r4,#2]            ;705
000a26  8868              LDRH     r0,[r5,#2]            ;706  ; snmp_bat_flag_puts
000a28  05c0              LSLS     r0,r0,#23             ;706
000a2a  d50a              BPL      |L1.2626|
000a2c  2325              MOVS     r3,#0x25              ;708
000a2e  2208              MOVS     r2,#8                 ;708
000a30  2105              MOVS     r1,#5                 ;708
000a32  f2af30e8          ADR      r0,|L1.1612|
000a36  f7fffffe          BL       snmp_trap_send
000a3a  8868              LDRH     r0,[r5,#2]            ;709  ; snmp_bat_flag_puts
000a3c  f4207080          BIC      r0,r0,#0x100          ;709
000a40  8068              STRH     r0,[r5,#2]            ;709
                  |L1.2626|
000a42  7970              LDRB     r0,[r6,#5]            ;713  ; vz1_stat
000a44  b190              CBZ      r0,|L1.2668|
000a46  8860              LDRH     r0,[r4,#2]            ;715  ; snmp_bat_flag
000a48  f4407000          ORR      r0,r0,#0x200          ;715
000a4c  8060              STRH     r0,[r4,#2]            ;715
000a4e  8868              LDRH     r0,[r5,#2]            ;716  ; snmp_bat_flag_puts
000a50  0580              LSLS     r0,r0,#22             ;716
000a52  d41d              BMI      |L1.2704|
000a54  2326              MOVS     r3,#0x26              ;718
000a56  2208              MOVS     r2,#8                 ;718
000a58  2105              MOVS     r1,#5                 ;718
000a5a  f2af30ec          ADR      r0,|L1.1648|
000a5e  f7fffffe          BL       snmp_trap_send
000a62  8868              LDRH     r0,[r5,#2]            ;719  ; snmp_bat_flag_puts
000a64  f4407000          ORR      r0,r0,#0x200          ;719
000a68  8068              STRH     r0,[r5,#2]            ;719
000a6a  e011              B        |L1.2704|
                  |L1.2668|
000a6c  8860              LDRH     r0,[r4,#2]            ;724  ; snmp_bat_flag
000a6e  f4207000          BIC      r0,r0,#0x200          ;724
000a72  8060              STRH     r0,[r4,#2]            ;724
000a74  8868              LDRH     r0,[r5,#2]            ;725  ; snmp_bat_flag_puts
000a76  0580              LSLS     r0,r0,#22             ;725
000a78  d50a              BPL      |L1.2704|
000a7a  2327              MOVS     r3,#0x27              ;727
000a7c  2208              MOVS     r2,#8                 ;727
000a7e  2105              MOVS     r1,#5                 ;727
000a80  f2af30f4          ADR      r0,|L1.1680|
000a84  f7fffffe          BL       snmp_trap_send
000a88  8868              LDRH     r0,[r5,#2]            ;728  ; snmp_bat_flag_puts
000a8a  f4207000          BIC      r0,r0,#0x200          ;728
000a8e  8068              STRH     r0,[r5,#2]            ;728
                  |L1.2704|
000a90  78f0              LDRB     r0,[r6,#3]            ;732  ; vz1_error
000a92  b190              CBZ      r0,|L1.2746|
000a94  8860              LDRH     r0,[r4,#2]            ;734  ; snmp_bat_flag
000a96  f4406080          ORR      r0,r0,#0x400          ;734
000a9a  8060              STRH     r0,[r4,#2]            ;734
000a9c  8868              LDRH     r0,[r5,#2]            ;735  ; snmp_bat_flag_puts
000a9e  0540              LSLS     r0,r0,#21             ;735
000aa0  d41d              BMI      |L1.2782|
000aa2  2328              MOVS     r3,#0x28              ;737
000aa4  2208              MOVS     r2,#8                 ;737
000aa6  2105              MOVS     r1,#5                 ;737
000aa8  f2af30fc          ADR      r0,|L1.1712|
000aac  f7fffffe          BL       snmp_trap_send
000ab0  8868              LDRH     r0,[r5,#2]            ;738  ; snmp_bat_flag_puts
000ab2  f4406080          ORR      r0,r0,#0x400          ;738
000ab6  8068              STRH     r0,[r5,#2]            ;738
000ab8  e011              B        |L1.2782|
                  |L1.2746|
000aba  8860              LDRH     r0,[r4,#2]            ;743  ; snmp_bat_flag
000abc  f4206080          BIC      r0,r0,#0x400          ;743
000ac0  8060              STRH     r0,[r4,#2]            ;743
000ac2  8868              LDRH     r0,[r5,#2]            ;744  ; snmp_bat_flag_puts
000ac4  0540              LSLS     r0,r0,#21             ;744
000ac6  d50a              BPL      |L1.2782|
000ac8  2329              MOVS     r3,#0x29              ;746
000aca  2208              MOVS     r2,#8                 ;746
000acc  2105              MOVS     r1,#5                 ;746
000ace  f2af30fc          ADR      r0,|L1.1748|
000ad2  f7fffffe          BL       snmp_trap_send
000ad6  8868              LDRH     r0,[r5,#2]            ;747  ; snmp_bat_flag_puts
000ad8  f4206080          BIC      r0,r0,#0x400          ;747
000adc  8068              STRH     r0,[r5,#2]            ;747
                  |L1.2782|
000ade  79f0              LDRB     r0,[r6,#7]            ;751  ; vz2_stat
000ae0  b190              CBZ      r0,|L1.2824|
000ae2  8860              LDRH     r0,[r4,#2]            ;753  ; snmp_bat_flag
000ae4  f4406000          ORR      r0,r0,#0x800          ;753
000ae8  8060              STRH     r0,[r4,#2]            ;753
000aea  8868              LDRH     r0,[r5,#2]            ;754  ; snmp_bat_flag_puts
000aec  0500              LSLS     r0,r0,#20             ;754
000aee  d41d              BMI      |L1.2860|
000af0  232a              MOVS     r3,#0x2a              ;756
000af2  2208              MOVS     r2,#8                 ;756
000af4  2105              MOVS     r1,#5                 ;756
000af6  f2af30fc          ADR      r0,|L1.1788|
000afa  f7fffffe          BL       snmp_trap_send
000afe  8868              LDRH     r0,[r5,#2]            ;757  ; snmp_bat_flag_puts
000b00  f4406000          ORR      r0,r0,#0x800          ;757
000b04  8068              STRH     r0,[r5,#2]            ;757
000b06  e011              B        |L1.2860|
                  |L1.2824|
000b08  8860              LDRH     r0,[r4,#2]            ;762  ; snmp_bat_flag
000b0a  f4206000          BIC      r0,r0,#0x800          ;762
000b0e  8060              STRH     r0,[r4,#2]            ;762
000b10  8868              LDRH     r0,[r5,#2]            ;763  ; snmp_bat_flag_puts
000b12  0500              LSLS     r0,r0,#20             ;763
000b14  d50a              BPL      |L1.2860|
000b16  232b              MOVS     r3,#0x2b              ;765
000b18  2208              MOVS     r2,#8                 ;765
000b1a  2105              MOVS     r1,#5                 ;765
000b1c  f2af4008          ADR      r0,|L1.1816|
000b20  f7fffffe          BL       snmp_trap_send
000b24  8868              LDRH     r0,[r5,#2]            ;766  ; snmp_bat_flag_puts
000b26  f4206000          BIC      r0,r0,#0x800          ;766
000b2a  8068              STRH     r0,[r5,#2]            ;766
                  |L1.2860|
000b2c  7930              LDRB     r0,[r6,#4]            ;770  ; vz2_error
000b2e  b1a0              CBZ      r0,|L1.2906|
000b30  8860              LDRH     r0,[r4,#2]            ;772  ; snmp_bat_flag
000b32  f4405080          ORR      r0,r0,#0x1000         ;772
000b36  8060              STRH     r0,[r4,#2]            ;772
000b38  8868              LDRH     r0,[r5,#2]            ;773  ; snmp_bat_flag_puts
000b3a  04c0              LSLS     r0,r0,#19             ;773
000b3c  f53faa81          BMI      |L1.66|
000b40  232c              MOVS     r3,#0x2c              ;775
000b42  2208              MOVS     r2,#8                 ;775
000b44  2105              MOVS     r1,#5                 ;775
000b46  f2af4010          ADR      r0,|L1.1848|
000b4a  f7fffffe          BL       snmp_trap_send
000b4e  8868              LDRH     r0,[r5,#2]            ;776  ; snmp_bat_flag_puts
000b50  f4405080          ORR      r0,r0,#0x1000         ;776
000b54  8068              STRH     r0,[r5,#2]            ;776
                  |L1.2902|
000b56  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2906|
000b5a  e013              B        |L1.2948|
                  |L1.2908|
000b5c  42415420          DCB      "BAT #1,molding charge is unblocked",0
000b60  23312c6d
000b64  6f6c6469
000b68  6e672063
000b6c  68617267
000b70  65206973
000b74  20756e62
000b78  6c6f636b
000b7c  656400  
000b7f  00                DCB      0
                  |L1.2944|
                          DCD      sp_ch_stat
                  |L1.2948|
000b84  8860              LDRH     r0,[r4,#2]            ;781  ; snmp_bat_flag
000b86  f4205080          BIC      r0,r0,#0x1000         ;781
000b8a  8060              STRH     r0,[r4,#2]            ;781
000b8c  8868              LDRH     r0,[r5,#2]            ;782  ; snmp_bat_flag_puts
000b8e  04c0              LSLS     r0,r0,#19             ;782
000b90  d5e1              BPL      |L1.2902|
000b92  232d              MOVS     r3,#0x2d              ;784
000b94  2208              MOVS     r2,#8                 ;784
000b96  2105              MOVS     r1,#5                 ;784
000b98  f2af0040          ADR      r0,|L1.2908|
000b9c  f7fffffe          BL       snmp_trap_send
000ba0  8868              LDRH     r0,[r5,#2]            ;785  ; snmp_bat_flag_puts
000ba2  f4205080          BIC      r0,r0,#0x1000         ;785
000ba6  8068              STRH     r0,[r5,#2]            ;785
000ba8  e7d5              B        |L1.2902|
;;;918    
                          ENDP

                  ke_start PROC
;;;921    //-----------------------------------------------
;;;922    void ke_start(char in)
000baa  e92d41fc          PUSH     {r2-r8,lr}
;;;923    {          
000bae  4606              MOV      r6,r0
;;;924    ke_start_stat=(enum_ke_start_stat)0;		 
000bb0  f04f0400          MOV      r4,#0
000bb4  4dff              LDR      r5,|L1.4020|
;;;925    /*
;;;926    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;927    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;928    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;929    #endif
;;;930    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;931    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;932    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;933    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;934    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;935    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;936    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;937    else */
;;;938    	{
;;;939    
;;;940    	ke_start_stat=kssYES;
000bb6  f04f0064          MOV      r0,#0x64
000bba  f105050a          ADD      r5,r5,#0xa
000bbe  7768              STRB     r0,[r5,#0x1d]
;;;941    
;;;942    	spc_stat=spcKE;
000bc0  f04f0701          MOV      r7,#1
000bc4  766f              STRB     r7,[r5,#0x19]
;;;943    	__ee_spc_stat=spcKE;
000bc6  f8a57064          STRH     r7,[r5,#0x64]
;;;944    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000bca  4639              MOV      r1,r7
000bcc  f240209a          MOV      r0,#0x29a
000bd0  f7fffffe          BL       lc640_write_int
;;;945    	
;;;946    	spc_bat=0;
000bd4  76ac              STRB     r4,[r5,#0x1a]
;;;947    	__ee_spc_bat=0;
000bd6  f8a54066          STRH     r4,[r5,#0x66]
;;;948    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000bda  4621              MOV      r1,r4
000bdc  f240209e          MOV      r0,#0x29e
000be0  f7fffffe          BL       lc640_write_int
;;;949    
;;;950    	bat[0]._zar_cnt_ke=0;
000be4  f8df83d0          LDR      r8,|L1.4024|
000be8  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;951    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000bec  48f3              LDR      r0,|L1.4028|
000bee  2100              MOVS     r1,#0
000bf0  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000bf4  f7fffffe          BL       lc640_write_int
;;;952    
;;;953    	bat[0]._time_min_cnt_ke=0;
000bf8  f8a8404a          STRH     r4,[r8,#0x4a]
;;;954    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000bfc  2100              MOVS     r1,#0
000bfe  f44f70e3          MOV      r0,#0x1c6
000c02  f7fffffe          BL       lc640_write_int
;;;955    
;;;956    	
;;;957    	spc_phase=0;
000c06  76ec              STRB     r4,[r5,#0x1b]
;;;958    	__ee_spc_phase=0;
000c08  f8a54068          STRH     r4,[r5,#0x68]
;;;959    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000c0c  4621              MOV      r1,r4
000c0e  f44f7028          MOV      r0,#0x2a0
000c12  f7fffffe          BL       lc640_write_int
;;;960    
;;;961    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;962    
;;;963    		{					
;;;964    		signed short temp_temp;
;;;965    		signed char temp;
;;;966    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000c16  eb060046          ADD      r0,r6,r6,LSL #1
000c1a  eb001006          ADD      r0,r0,r6,LSL #4
000c1e  eb080180          ADD      r1,r8,r0,LSL #2
000c22  48e7              LDR      r0,|L1.4032|
000c24  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000c26  f1000001          ADD      r0,r0,#1
000c2a  f0000007          AND      r0,r0,#7
000c2e  eb010040          ADD      r0,r1,r0,LSL #1
000c32  8c00              LDRH     r0,[r0,#0x20]
000c34  9001              STR      r0,[sp,#4]
;;;967    		    
;;;968    		temp=LPC_RTC->YEAR;
000c36  4ee3              LDR      r6,|L1.4036|
000c38  8bb0              LDRH     r0,[r6,#0x1c]
000c3a  9000              STR      r0,[sp,#0]
;;;969    		gran_char(&temp,1,99);
000c3c  f04f0263          MOV      r2,#0x63
000c40  f04f0101          MOV      r1,#1
000c44  4668              MOV      r0,sp
000c46  f7fffffe          BL       gran_char
;;;970    		*((char*)(&(ke_date[0])))=temp;
000c4a  4cda              LDR      r4,|L1.4020|
000c4c  f89d0000          LDRB     r0,[sp,#0]
000c50  34fc              ADDS     r4,r4,#0xfc
000c52  7020              STRB     r0,[r4,#0]
;;;971    			
;;;972    		temp=LPC_RTC->MONTH;
000c54  7e30              LDRB     r0,[r6,#0x18]
000c56  9000              STR      r0,[sp,#0]
;;;973    		gran_char(&temp,1,12);
000c58  220c              MOVS     r2,#0xc
000c5a  2101              MOVS     r1,#1
000c5c  4668              MOV      r0,sp
000c5e  f7fffffe          BL       gran_char
;;;974    		*(((char*)(&(ke_date[0])))+1)=temp;
000c62  f89d0000          LDRB     r0,[sp,#0]
000c66  7060              STRB     r0,[r4,#1]
;;;975    		
;;;976    		temp=LPC_RTC->DOM;
000c68  7b30              LDRB     r0,[r6,#0xc]
000c6a  9000              STR      r0,[sp,#0]
;;;977    		gran_char(&temp,1,31);
000c6c  221f              MOVS     r2,#0x1f
000c6e  2101              MOVS     r1,#1
000c70  4668              MOV      r0,sp
000c72  f7fffffe          BL       gran_char
;;;978    		*(((char*)(&(ke_date[0])))+2)=temp;			
000c76  f89d0000          LDRB     r0,[sp,#0]
000c7a  70a0              STRB     r0,[r4,#2]
;;;979    				
;;;980    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000c7c  f89d0004          LDRB     r0,[sp,#4]
000c80  70e0              STRB     r0,[r4,#3]
;;;981    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000c82  f24020a2          MOV      r0,#0x2a2
000c86  6821              LDR      r1,[r4,#0]  ; ke_date
000c88  f7fffffe          BL       lc640_write_long
;;;982    
;;;983    		temp=LPC_RTC->HOUR;
000c8c  7a30              LDRB     r0,[r6,#8]
000c8e  9000              STR      r0,[sp,#0]
;;;984    		gran_char(&temp,0,23);
000c90  2217              MOVS     r2,#0x17
000c92  2100              MOVS     r1,#0
000c94  4668              MOV      r0,sp
000c96  f7fffffe          BL       gran_char
;;;985    		*((char*)(&(ke_date[1])))=temp;
000c9a  f89d0000          LDRB     r0,[sp,#0]
000c9e  7120              STRB     r0,[r4,#4]
;;;986                   
;;;987    		temp=LPC_RTC->MIN;
000ca0  7930              LDRB     r0,[r6,#4]
000ca2  9000              STR      r0,[sp,#0]
;;;988    		gran_char(&temp,0,59);
000ca4  223b              MOVS     r2,#0x3b
000ca6  2100              MOVS     r1,#0
000ca8  4668              MOV      r0,sp
000caa  f7fffffe          BL       gran_char
;;;989    		*(((char*)(&(ke_date[1])))+1)=temp;
000cae  f89d0000          LDRB     r0,[sp,#0]
000cb2  7160              STRB     r0,[r4,#5]
;;;990    	          
;;;991    		temp=LPC_RTC->SEC;
000cb4  7830              LDRB     r0,[r6,#0]
000cb6  9000              STR      r0,[sp,#0]
;;;992    		gran_char(&temp,0,59);
000cb8  223b              MOVS     r2,#0x3b
000cba  2100              MOVS     r1,#0
000cbc  4668              MOV      r0,sp
000cbe  f7fffffe          BL       gran_char
;;;993    		*(((char*)(&(ke_date[1])))+2)=temp;
000cc2  f89d0000          LDRB     r0,[sp,#0]
000cc6  71a0              STRB     r0,[r4,#6]
;;;994    			
;;;995    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000cc8  f89d0005          LDRB     r0,[sp,#5]
000ccc  71e0              STRB     r0,[r4,#7]
;;;996    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000cce  f24020a6          MOV      r0,#0x2a6
000cd2  6861              LDR      r1,[r4,#4]  ; ke_date
000cd4  f7fffffe          BL       lc640_write_long
;;;997    		}
;;;998    	bat_hndl_zvu_ke_init=1;
000cd8  702f              STRB     r7,[r5,#0]
;;;999    	}
;;;1000   }
000cda  e8bd81fc          POP      {r2-r8,pc}
;;;1001   #endif
                          ENDP

                  ke_drv PROC
;;;1083   //-----------------------------------------------
;;;1084   void ke_drv(void)
000cde  e92d47f0          PUSH     {r4-r10,lr}
;;;1085   {
000ce2  b088              SUB      sp,sp,#0x20
;;;1086   static char ke_drv_cnt_10s;
;;;1087   static short i_bat_buff[6];
;;;1088   static char i_bat_buff_cnt;
;;;1089   short ke_drv_i_temp;
;;;1090   short ke_drv_i_avg;
;;;1091   char i;
;;;1092   short ke_drv_i_temp_temp;
;;;1093   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000ce4  f04f021c          MOV      r2,#0x1c
000ce8  49b7              LDR      r1,|L1.4040|
000cea  a801              ADD      r0,sp,#4
000cec  f7fffffe          BL       __aeabi_memcpy4
;;;1094   
;;;1095   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000cf0  4eb0              LDR      r6,|L1.4020|
;;;1096   	{
;;;1097   	
;;;1098   	i_bat_buff[0]=0;
000cf2  4bb6              LDR      r3,|L1.4044|
000cf4  2500              MOVS     r5,#0
000cf6  7ab0              LDRB     r0,[r6,#0xa]          ;1095  ; bat_hndl_zvu_ke_init
000cf8  2801              CMP      r0,#1                 ;1095
000cfa  d102              BNE      |L1.3330|
000cfc  801d              STRH     r5,[r3,#0]
;;;1099   	i_bat_buff[0]=0;
;;;1100   	i_bat_buff[0]=0;
;;;1101   	i_bat_buff[0]=0;
;;;1102   	i_bat_buff[0]=0;
;;;1103   	i_bat_buff[0]=0;
;;;1104   	i_bat_buff_cnt=0;
000cfe  73b5              STRB     r5,[r6,#0xe]
;;;1105   
;;;1106   	bat_hndl_zvu_ke_init=0;
000d00  72b5              STRB     r5,[r6,#0xa]
                  |L1.3330|
;;;1107   	}
;;;1108   
;;;1109   
;;;1110   
;;;1111   
;;;1112   if(spc_stat==spcKE)
000d02  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000d06  2801              CMP      r0,#1
000d08  d17e              BNE      |L1.3592|
;;;1113   	{
;;;1114   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000d0a  48b1              LDR      r0,|L1.4048|
000d0c  f04f070a          MOV      r7,#0xa
000d10  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000d14  f1c00000          RSB      r0,r0,#0
000d18  fb90f0f7          SDIV     r0,r0,r7
000d1c  b200              SXTH     r0,r0
;;;1115   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000d1e  2800              CMP      r0,#0
000d20  da01              BGE      |L1.3366|
000d22  f04f0000          MOV      r0,#0
                  |L1.3366|
;;;1116   
;;;1117   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000d26  4aab              LDR      r2,|L1.4052|
000d28  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000d2a  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1118   	if(++ke_drv_cnt_10s>10)
000d2c  1c49              ADDS     r1,r1,#1
;;;1119   		{
;;;1120   		ke_drv_cnt_10s=0;
;;;1121   
;;;1122   		i_bat_buff_cnt++;
;;;1123   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1124   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1125   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1126   		ke_drv_i_temp_temp=0;
;;;1127   		for(i=0;i<6;i++)
;;;1128   			{
;;;1129   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1130   			}
;;;1131   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1132   
;;;1133   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1134   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1135   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1136   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1137   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1138   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1139   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1140   		
;;;1141   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1142   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1143   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1144   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1145   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1146   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1147   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1148   
;;;1149   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1150   		bat_hndl_i_temp=ke_drv_i_avg;
000d2e  4ca1              LDR      r4,|L1.4020|
000d30  b2c9              UXTB     r1,r1                 ;1118
000d32  3480              ADDS     r4,r4,#0x80
000d34  7371              STRB     r1,[r6,#0xd]          ;1118
000d36  290a              CMP      r1,#0xa               ;1118
000d38  d967              BLS      |L1.3594|
000d3a  7375              STRB     r5,[r6,#0xd]          ;1120
000d3c  7bb1              LDRB     r1,[r6,#0xe]          ;1122  ; i_bat_buff_cnt
000d3e  f1010101          ADD      r1,r1,#1              ;1122
000d42  b2c9              UXTB     r1,r1                 ;1122
000d44  73b1              STRB     r1,[r6,#0xe]          ;1122
000d46  2906              CMP      r1,#6                 ;1123
000d48  d300              BCC      |L1.3404|
000d4a  73b5              STRB     r5,[r6,#0xe]          ;1123
                  |L1.3404|
000d4c  7bb1              LDRB     r1,[r6,#0xe]          ;1124  ; i_bat_buff_cnt
000d4e  6091              STR      r1,[r2,#8]            ;1124  ; bat_hndl_plazma
000d50  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1125
000d54  f04f0100          MOV      r1,#0                 ;1126
000d58  4608              MOV      r0,r1                 ;1127
                  |L1.3418|
000d5a  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1129
000d5e  4461              ADD      r1,r1,r12             ;1129
000d60  b209              SXTH     r1,r1                 ;1129
000d62  f1000001          ADD      r0,r0,#1              ;1127
000d66  b2c0              UXTB     r0,r0                 ;1127
000d68  2806              CMP      r0,#6                 ;1127
000d6a  d3f6              BCC      |L1.3418|
000d6c  f04f0006          MOV      r0,#6                 ;1131
000d70  fb91f0f0          SDIV     r0,r1,r0              ;1131
000d74  b201              SXTH     r1,r0                 ;1131
000d76  4898              LDR      r0,|L1.4056|
000d78  f8df8258          LDR      r8,|L1.4052|
000d7c  8800              LDRH     r0,[r0,#0]            ;1133  ; BAT_C_POINT_1_6
000d7e  f1a8081c          SUB      r8,r8,#0x1c           ;1133
000d82  eb000040          ADD      r0,r0,r0,LSL #1       ;1133
000d86  ea4f0040          LSL      r0,r0,#1              ;1133
000d8a  f8a80000          STRH     r0,[r8,#0]            ;1133
000d8e  4893              LDR      r0,|L1.4060|
000d90  8800              LDRH     r0,[r0,#0]            ;1134  ; BAT_C_POINT_1_2
000d92  ea4f0040          LSL      r0,r0,#1              ;1134
000d96  f8a80002          STRH     r0,[r8,#2]            ;1134
000d9a  4891              LDR      r0,|L1.4064|
000d9c  8800              LDRH     r0,[r0,#0]            ;1135  ; BAT_C_POINT_1
000d9e  f8a80004          STRH     r0,[r8,#4]            ;1135
000da2  4890              LDR      r0,|L1.4068|
000da4  f04f0303          MOV      r3,#3                 ;1136
000da8  f9b00000          LDRSH    r0,[r0,#0]            ;1136  ; BAT_C_POINT_3
000dac  fb90f0f3          SDIV     r0,r0,r3              ;1136
000db0  f8a80006          STRH     r0,[r8,#6]            ;1136
000db4  488c              LDR      r0,|L1.4072|
000db6  f04f0305          MOV      r3,#5                 ;1137
000dba  f9b00000          LDRSH    r0,[r0,#0]            ;1137  ; BAT_C_POINT_5
000dbe  fb90f0f3          SDIV     r0,r0,r3              ;1137
000dc2  f8a80008          STRH     r0,[r8,#8]            ;1137
000dc6  4889              LDR      r0,|L1.4076|
000dc8  f9b00000          LDRSH    r0,[r0,#0]            ;1138  ; BAT_C_POINT_10
000dcc  fb90f0f7          SDIV     r0,r0,r7              ;1138
000dd0  f8a8000a          STRH     r0,[r8,#0xa]          ;1138
000dd4  4886              LDR      r0,|L1.4080|
000dd6  f04f0314          MOV      r3,#0x14              ;1139
000dda  f9b00000          LDRSH    r0,[r0,#0]            ;1139  ; BAT_C_POINT_20
000dde  fb90f0f3          SDIV     r0,r0,r3              ;1139
000de2  f8a8000c          STRH     r0,[r8,#0xc]          ;1139
000de6  4883              LDR      r0,|L1.4084|
000de8  f108090e          ADD      r9,r8,#0xe            ;1141
000dec  f9b07000          LDRSH    r7,[r0,#0]            ;1141  ; BAT_U_END_1_6
000df0  f8a97000          STRH     r7,[r9,#0]            ;1141
000df4  4880              LDR      r0,|L1.4088|
000df6  8800              LDRH     r0,[r0,#0]            ;1142  ; BAT_U_END_1_2
000df8  f8a90002          STRH     r0,[r9,#2]            ;1142
000dfc  487f              LDR      r0,|L1.4092|
000dfe  8800              LDRH     r0,[r0,#0]            ;1143  ; BAT_U_END_1
000e00  f8a90004          STRH     r0,[r9,#4]            ;1143
000e04  487e              LDR      r0,|L1.4096|
000e06  e001              B        |L1.3596|
                  |L1.3592|
000e08  e11e              B        |L1.4168|
                  |L1.3594|
000e0a  e061              B        |L1.3792|
                  |L1.3596|
000e0c  8800              LDRH     r0,[r0,#0]            ;1144  ; BAT_U_END_3
000e0e  f8a90006          STRH     r0,[r9,#6]            ;1144
000e12  487c              LDR      r0,|L1.4100|
000e14  8800              LDRH     r0,[r0,#0]            ;1145  ; BAT_U_END_5
000e16  f8a90008          STRH     r0,[r9,#8]            ;1145
000e1a  487b              LDR      r0,|L1.4104|
000e1c  8800              LDRH     r0,[r0,#0]            ;1146  ; BAT_U_END_10
000e1e  f8a9000a          STRH     r0,[r9,#0xa]          ;1146
000e22  487a              LDR      r0,|L1.4108|
000e24  f9b0c000          LDRSH    r12,[r0,#0]           ;1147  ; BAT_U_END_20
000e28  f8a9c00c          STRH     r12,[r9,#0xc]         ;1147
000e2c  6051              STR      r1,[r2,#4]            ;1149  ; bat_hndl_plazma
000e2e  81a1              STRH     r1,[r4,#0xc]
;;;1151   		
;;;1152   		for(i=0;i<7;i++)
000e30  f04f0000          MOV      r0,#0
                  |L1.3636|
;;;1153   			{
;;;1154   			if(bat_hndl_i_temp>=I_from_t_table[i])
000e34  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000e38  428b              CMP      r3,r1
000e3a  dd04              BLE      |L1.3654|
000e3c  f1000001          ADD      r0,r0,#1              ;1152
000e40  b2c0              UXTB     r0,r0                 ;1152
000e42  2807              CMP      r0,#7                 ;1152
000e44  d3f6              BCC      |L1.3636|
                  |L1.3654|
;;;1155   				{
;;;1156   				break;
;;;1157   				}
;;;1158   			}
;;;1159   
;;;1160   		bat_hndl_plazma[0]=i;
000e46  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000e48  f10d0a04          ADD      r10,sp,#4             ;1093
;;;1161   
;;;1162   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000e4c  b1c8              CBZ      r0,|L1.3714|
;;;1163   		 else if((i>=1)&&(i<7))
000e4e  1e42              SUBS     r2,r0,#1
000e50  2a06              CMP      r2,#6
000e52  d219              BCS      |L1.3720|
;;;1164   		 	{
;;;1165   			short i1,i2;
;;;1166   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000e54  f8383012          LDRH     r3,[r8,r2,LSL #1]
000e58  eba30101          SUB      r1,r3,r1
000e5c  b209              SXTH     r1,r1
;;;1167   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000e5e  f8388010          LDRH     r8,[r8,r0,LSL #1]
000e62  eba30308          SUB      r3,r3,r8
000e66  b21b              SXTH     r3,r3
;;;1168   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000e68  f85a8020          LDR      r8,[r10,r0,LSL #2]
000e6c  f85a2022          LDR      r2,[r10,r2,LSL #2]
000e70  eba80802          SUB      r8,r8,r2
;;;1169   			bat_hndl_t_razr_ke*=(long)i1;
000e74  fb08f801          MUL      r8,r8,r1
;;;1170   			bat_hndl_t_razr_ke/=(long)i2;
000e78  fb98f1f3          SDIV     r1,r8,r3
;;;1171   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000e7c  4411              ADD      r1,r1,r2
000e7e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
;;;1172   			}
000e80  e006              B        |L1.3728|
                  |L1.3714|
000e82  9901              LDR      r1,[sp,#4]            ;1162
000e84  6521              STR      r1,[r4,#0x50]         ;1162  ; bat_hndl_t_razr_ke
000e86  e003              B        |L1.3728|
                  |L1.3720|
;;;1173   		else if(i>=7)
000e88  2807              CMP      r0,#7
000e8a  d301              BCC      |L1.3728|
;;;1174   			{
;;;1175   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
000e8c  9907              LDR      r1,[sp,#0x1c]
000e8e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
                  |L1.3728|
;;;1176   			}
;;;1177   
;;;1178   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
000e90  b1c0              CBZ      r0,|L1.3780|
;;;1179   		 else if((i>=1)&&(i<7))
000e92  1e41              SUBS     r1,r0,#1
000e94  2906              CMP      r1,#6
000e96  d217              BCS      |L1.3784|
;;;1180   		 	{
;;;1181   			long u1,tempL;
;;;1182   
;;;1183   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
000e98  f9393010          LDRSH    r3,[r9,r0,LSL #1]
000e9c  f9392011          LDRSH    r2,[r9,r1,LSL #1]
000ea0  eba30302          SUB      r3,r3,r2
;;;1184   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
000ea4  f85a1021          LDR      r1,[r10,r1,LSL #2]
000ea8  6d27              LDR      r7,[r4,#0x50]  ; bat_hndl_t_razr_ke
000eaa  eba70701          SUB      r7,r7,r1
;;;1185   			tempL*=u1;
000eae  fb03f307          MUL      r3,r3,r7
;;;1186   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000eb2  f85a0020          LDR      r0,[r10,r0,LSL #2]
000eb6  eba00001          SUB      r0,r0,r1
;;;1187   			tempL/=u1;
000eba  fb93f0f0          SDIV     r0,r3,r0
;;;1188   			tempL+=(long)U_end_from_i_table[i-1];
000ebe  4410              ADD      r0,r0,r2
;;;1189   			bat_hndl_u_end=(short)tempL;
000ec0  81e0              STRH     r0,[r4,#0xe]
;;;1190   			}
000ec2  e005              B        |L1.3792|
                  |L1.3780|
000ec4  81e7              STRH     r7,[r4,#0xe]          ;1178
000ec6  e003              B        |L1.3792|
                  |L1.3784|
;;;1191   		else if(i>=7)
000ec8  2807              CMP      r0,#7
000eca  d301              BCC      |L1.3792|
;;;1192   			{
;;;1193   			bat_hndl_u_end=U_end_from_i_table[6];
000ecc  f8a4c00e          STRH     r12,[r4,#0xe]
                  |L1.3792|
;;;1194   			}
;;;1195   
;;;1196   		}
;;;1197   
;;;1198   
;;;1199   
;;;1200   	if(spc_phase==0)
000ed0  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1201   		{
;;;1202   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1203   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1204   
;;;1205   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1206   	    	
;;;1207   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1208   			{
;;;1209   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1210   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000ed4  4f39              LDR      r7,|L1.4028|
;;;1211   			}
;;;1212   
;;;1213   		bat[0]._time_min_cnt_ke++;
;;;1214   		if(bat[0]._time_min_cnt_ke>=60)
;;;1215   			{
;;;1216   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
000ed6  f44f78e3          MOV      r8,#0x1c6
000eda  bbe8              CBNZ     r0,|L1.3928|
000edc  2314              MOVS     r3,#0x14              ;1203
000ede  f04f32ff          MOV      r2,#0xffffffff        ;1203
000ee2  21ce              MOVS     r1,#0xce              ;1203
000ee4  20cd              MOVS     r0,#0xcd              ;1203
000ee6  f7fffffe          BL       mess_send
000eea  f8961024          LDRB     r1,[r6,#0x24]         ;1205  ; spc_bat
000eee  f8df90c8          LDR      r9,|L1.4024|
000ef2  eb010041          ADD      r0,r1,r1,LSL #1       ;1205
000ef6  eb001001          ADD      r0,r0,r1,LSL #4       ;1205
000efa  eb090080          ADD      r0,r9,r0,LSL #2       ;1205
000efe  f9b00008          LDRSH    r0,[r0,#8]            ;1205
000f02  f7fffffe          BL       abs
000f06  f8d91018          LDR      r1,[r9,#0x18]         ;1205  ; bat
000f0a  4401              ADD      r1,r1,r0              ;1205
000f0c  f8c91018          STR      r1,[r9,#0x18]         ;1205  ; bat
000f10  f64840a0          MOV      r0,#0x8ca0            ;1207
000f14  4281              CMP      r1,r0                 ;1207
000f16  db0c              BLT      |L1.3890|
000f18  eba10100          SUB      r1,r1,r0              ;1209
000f1c  f8c91018          STR      r1,[r9,#0x18]         ;1209  ; bat
000f20  8838              LDRH     r0,[r7,#0]            ;1210  ; ADR_EE_BAT_ZAR_CNT_KE
000f22  f7fffffe          BL       lc640_read_int
000f26  1c40              ADDS     r0,r0,#1              ;1210
000f28  b201              SXTH     r1,r0                 ;1210
000f2a  f9b70000          LDRSH    r0,[r7,#0]            ;1210  ; ADR_EE_BAT_ZAR_CNT_KE
000f2e  f7fffffe          BL       lc640_write_int
                  |L1.3890|
000f32  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1213  ; bat
000f36  f1000001          ADD      r0,r0,#1              ;1213
000f3a  b281              UXTH     r1,r0                 ;1213
000f3c  f8a9104a          STRH     r1,[r9,#0x4a]         ;1213
000f40  293c              CMP      r1,#0x3c              ;1214
000f42  d309              BCC      |L1.3928|
000f44  4640              MOV      r0,r8
000f46  f7fffffe          BL       lc640_read_int
000f4a  1c40              ADDS     r0,r0,#1
000f4c  b201              SXTH     r1,r0
000f4e  4640              MOV      r0,r8
000f50  f7fffffe          BL       lc640_write_int
;;;1217   			bat[0]._time_min_cnt_ke=0;
000f54  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.3928|
;;;1218   			}
;;;1219   		}
;;;1220   
;;;1221   	else if(spc_phase==1)
;;;1222   		{
;;;1223   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1224   		}
;;;1225   
;;;1226   	if(out_U<bat_hndl_u_end)
000f58  482d              LDR      r0,|L1.4112|
000f5a  f9b4100e          LDRSH    r1,[r4,#0xe]  ; bat_hndl_u_end
000f5e  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
000f62  4288              CMP      r0,r1
000f64  da6e              BGE      |L1.4164|
;;;1227   		{
;;;1228   		cnt_end_ke++;
000f66  f8b6006a          LDRH     r0,[r6,#0x6a]  ; cnt_end_ke
000f6a  f1000001          ADD      r0,r0,#1
000f6e  b200              SXTH     r0,r0
000f70  f8a6006a          STRH     r0,[r6,#0x6a]
;;;1229   		if(cnt_end_ke>=30)
000f74  281e              CMP      r0,#0x1e
000f76  db67              BLT      |L1.4168|
;;;1230   			{
;;;1231   			
;;;1232   			if((spc_stat==spcKE)&&(spc_phase==0))
000f78  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000f7c  2801              CMP      r0,#1
000f7e  d155              BNE      |L1.4140|
000f80  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
000f84  b9a8              CBNZ     r0,|L1.4018|
;;;1233   				{
;;;1234   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
000f86  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000f88  f7fffffe          BL       lc640_read_int
000f8c  b201              SXTH     r1,r0
000f8e  4821              LDR      r0,|L1.4116|
000f90  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
000f94  f7fffffe          BL       lc640_write_int
;;;1235   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
000f98  4640              MOV      r0,r8
000f9a  f7fffffe          BL       lc640_read_int
000f9e  b284              UXTH     r4,r0
000fa0  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000fa2  f7fffffe          BL       lc640_read_int
000fa6  b281              UXTH     r1,r0
000fa8  4622              MOV      r2,r4
000faa  2000              MOVS     r0,#0
000fac  f7fffffe          BL       ke_zvu_mem_hndl
;;;1236   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
000fb0  e032              B        |L1.4120|
                  |L1.4018|
000fb2  e03b              B        |L1.4140|
                  |L1.4020|
                          DCD      ||area_number.25||
                  |L1.4024|
                          DCD      bat
                  |L1.4028|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4032|
                          DCD      bat_u_old_cnt
                  |L1.4036|
                          DCD      0x40024020
                  |L1.4040|
                          DCD      ||area_number.19||+0x4
                  |L1.4044|
                          DCD      ||.bss||
                  |L1.4048|
                          DCD      Ib_ips_termokompensat
                  |L1.4052|
                          DCD      ||.bss||+0x468
                  |L1.4056|
                          DCD      BAT_C_POINT_1_6
                  |L1.4060|
                          DCD      BAT_C_POINT_1_2
                  |L1.4064|
                          DCD      BAT_C_POINT_1
                  |L1.4068|
                          DCD      BAT_C_POINT_3
                  |L1.4072|
                          DCD      BAT_C_POINT_5
                  |L1.4076|
                          DCD      BAT_C_POINT_10
                  |L1.4080|
                          DCD      BAT_C_POINT_20
                  |L1.4084|
                          DCD      BAT_U_END_1_6
                  |L1.4088|
                          DCD      BAT_U_END_1_2
                  |L1.4092|
                          DCD      BAT_U_END_1
                  |L1.4096|
                          DCD      BAT_U_END_3
                  |L1.4100|
                          DCD      BAT_U_END_5
                  |L1.4104|
                          DCD      BAT_U_END_10
                  |L1.4108|
                          DCD      BAT_U_END_20
                  |L1.4112|
                          DCD      out_U
                  |L1.4116|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4120|
001018  48ff              LDR      r0,|L1.5144|
00101a  2100              MOVS     r1,#0
00101c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001020  f7fffffe          BL       lc640_write_int
;;;1237   				cntrl_stat=50;
001024  f04f0032          MOV      r0,#0x32
001028  8670              STRH     r0,[r6,#0x32]
;;;1238   				cntrl_stat_old=50;
00102a  86b0              STRH     r0,[r6,#0x34]
                  |L1.4140|
;;;1239   				}
;;;1240   
;;;1241   			spc_stat=spcOFF;
00102c  f8865023          STRB     r5,[r6,#0x23]
;;;1242   			__ee_spc_stat=spcOFF;
001030  f8a6506e          STRH     r5,[r6,#0x6e]
;;;1243   			lc640_write_int(EE_SPC_STAT,spcOFF);
001034  b008              ADD      sp,sp,#0x20
001036  2100              MOVS     r1,#0
001038  e8bd47f0          POP      {r4-r10,lr}
00103c  f240209a          MOV      r0,#0x29a
001040  f7ffbffe          B.W      lc640_write_int
                  |L1.4164|
;;;1244   
;;;1245   			}
;;;1246   		}
;;;1247   	else cnt_end_ke=0;
001044  f8a6506a          STRH     r5,[r6,#0x6a]
                  |L1.4168|
;;;1248   
;;;1249   	}
;;;1250   			
;;;1251   }
001048  b008              ADD      sp,sp,#0x20
00104a  e8bd87f0          POP      {r4-r10,pc}
;;;1252   #endif
                          ENDP

                  vz_start PROC
;;;1322   //-----------------------------------------------
;;;1323   char vz_start(char hour)
00104e  b570              PUSH     {r4-r6,lr}
;;;1324   {          
001050  4605              MOV      r5,r0
;;;1325   char out;
;;;1326   out=0;
001052  f04f0600          MOV      r6,#0
;;;1327   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
001056  4cf1              LDR      r4,|L1.5148|
001058  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00105c  bba0              CBNZ     r0,|L1.4296|
00105e  48f0              LDR      r0,|L1.5152|
001060  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001062  2801              CMP      r0,#1
001064  d030              BEQ      |L1.4296|
;;;1328   	{
;;;1329   	spc_stat=spcVZ;
001066  f1040430          ADD      r4,r4,#0x30
00106a  f04f0102          MOV      r1,#2
00106e  f8041c0d          STRB     r1,[r4,#-0xd]
;;;1330   	__ee_spc_stat=spcVZ; 
001072  87e1              STRH     r1,[r4,#0x3e]
;;;1331   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001074  f240209a          MOV      r0,#0x29a
001078  f7fffffe          BL       lc640_write_int
;;;1332   	vz_cnt_h=hour;
00107c  86e5              STRH     r5,[r4,#0x36]
;;;1333   	__ee_vz_cnt=hour*60;
00107e  ebc51005          RSB      r0,r5,r5,LSL #4
001082  ea4f0080          LSL      r0,r0,#2
001086  87a0              STRH     r0,[r4,#0x3c]
001088  f1a40430          SUB      r4,r4,#0x30
;;;1334   	if(hour==0)__ee_vz_cnt=30;
00108c  b91d              CBNZ     r5,|L1.4246|
00108e  f04f001e          MOV      r0,#0x1e
001092  f8a4006c          STRH     r0,[r4,#0x6c]
                  |L1.4246|
;;;1335   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001096  f1040462          ADD      r4,r4,#0x62
00109a  f44f7027          MOV      r0,#0x29c
00109e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010a2  f7fffffe          BL       lc640_write_int
;;;1336   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0010a6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010aa  f44f702a          MOV      r0,#0x2a8
0010ae  f7fffffe          BL       lc640_write_int
;;;1337   	vz_cnt_h_=0;
0010b2  f04f0000          MOV      r0,#0
0010b6  80e0              STRH     r0,[r4,#6]
;;;1338   	vz_cnt_s=0;
0010b8  8020              STRH     r0,[r4,#0]
;;;1339   	vz_cnt_s_=0;
0010ba  8060              STRH     r0,[r4,#2]
;;;1340   	out=1;
0010bc  f04f0601          MOV      r6,#1
;;;1341   	vz_mem_hndl(1);
0010c0  f04f0001          MOV      r0,#1
0010c4  f7fffffe          BL       vz_mem_hndl
                  |L1.4296|
;;;1342   	}
;;;1343   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1344   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1345   //plazma=out;	
;;;1346   return out;
0010c8  4630              MOV      r0,r6
;;;1347   }
0010ca  bd70              POP      {r4-r6,pc}
;;;1348   
                          ENDP

                  vz_stop PROC
;;;1349   //-----------------------------------------------
;;;1350   void vz_stop(void)
0010cc  b510              PUSH     {r4,lr}
;;;1351   {
;;;1352   if(spc_stat==spcVZ)
0010ce  4cd3              LDR      r4,|L1.5148|
0010d0  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0010d4  2802              CMP      r0,#2
0010d6  d113              BNE      |L1.4352|
;;;1353        {
;;;1354   vz_mem_hndl(vz_cnt_h);          
0010d8  f1040430          ADD      r4,r4,#0x30
0010dc  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
0010de  f7fffffe          BL       vz_mem_hndl
;;;1355   vz_cnt_s=0;
0010e2  f04f0000          MOV      r0,#0
0010e6  8660              STRH     r0,[r4,#0x32]
;;;1356   vz_cnt_h=0;
0010e8  86e0              STRH     r0,[r4,#0x36]
;;;1357   vz_cnt_h_=0;
0010ea  8720              STRH     r0,[r4,#0x38]
;;;1358   spc_stat=spcOFF;
0010ec  f8040c0d          STRB     r0,[r4,#-0xd]
;;;1359   
;;;1360   		__ee_spc_stat=spcOFF;
0010f0  87e0              STRH     r0,[r4,#0x3e]
;;;1361   		lc640_write_int(EE_SPC_STAT,spcOFF);
0010f2  4601              MOV      r1,r0
0010f4  e8bd4010          POP      {r4,lr}
0010f8  f240209a          MOV      r0,#0x29a
0010fc  f7ffbffe          B.W      lc640_write_int
                  |L1.4352|
;;;1362        }
;;;1363   
;;;1364   }
001100  bd10              POP      {r4,pc}
;;;1365   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1367   //-----------------------------------------------
;;;1368   void amper_chas_cnt_drv(void)
001102  b510              PUSH     {r4,lr}
;;;1369   {
;;;1370   
;;;1371   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
001104  4ac5              LDR      r2,|L1.5148|
001106  49c7              LDR      r1,|L1.5156|
001108  3280              ADDS     r2,r2,#0x80
00110a  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00110e  6e10              LDR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
001110  4401              ADD      r1,r1,r0
001112  6611              STR      r1,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1372   
;;;1373   if(amper_chas_cnt_drv_summ>=36000L)
001114  f64843a0          MOV      r3,#0x8ca0
;;;1374   	{
;;;1375   	amper_chas_cnt_drv_summ-=36000L;
;;;1376   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001118  f44f74e4          MOV      r4,#0x1c8
00111c  4299              CMP      r1,r3                 ;1373
00111e  db0c              BLT      |L1.4410|
001120  eba10103          SUB      r1,r1,r3              ;1375
001124  6611              STR      r1,[r2,#0x60]         ;1375  ; amper_chas_cnt_drv_summ
001126  4620              MOV      r0,r4
001128  f7fffffe          BL       lc640_read_int
00112c  1c40              ADDS     r0,r0,#1
00112e  b201              SXTH     r1,r0
001130  4620              MOV      r0,r4
001132  e8bd4010          POP      {r4,lr}
001136  f7ffbffe          B.W      lc640_write_int
                  |L1.4410|
;;;1377   	}
;;;1378   else if(amper_chas_cnt_drv_summ<=-36000L)
00113a  48bb              LDR      r0,|L1.5160|
00113c  4281              CMP      r1,r0
00113e  dc0c              BGT      |L1.4442|
;;;1379   	{
;;;1380   	amper_chas_cnt_drv_summ+=36000L;
001140  eb010003          ADD      r0,r1,r3
001144  6610              STR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1381   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
001146  4620              MOV      r0,r4
001148  f7fffffe          BL       lc640_read_int
00114c  1e40              SUBS     r0,r0,#1
00114e  b201              SXTH     r1,r0
001150  4620              MOV      r0,r4
001152  e8bd4010          POP      {r4,lr}
001156  f7ffbffe          B.W      lc640_write_int
                  |L1.4442|
;;;1382   	}
;;;1383   }
00115a  bd10              POP      {r4,pc}
;;;1384   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1386   //-----------------------------------------------
;;;1387   void avz_next_date_hndl(void)
00115c  b570              PUSH     {r4-r6,lr}
;;;1388   {
;;;1389   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
00115e  4cb3              LDR      r4,|L1.5164|
001160  f8940038          LDRB     r0,[r4,#0x38]
001164  4db2              LDR      r5,|L1.5168|
001166  7829              LDRB     r1,[r5,#0]  ; AVZ
001168  4408              ADD      r0,r0,r1
00116a  280c              CMP      r0,#0xc
00116c  d906              BLS      |L1.4476|
00116e  8fa0              LDRH     r0,[r4,#0x3c]
001170  1c40              ADDS     r0,r0,#1
001172  b201              SXTH     r1,r0
001174  20b8              MOVS     r0,#0xb8
001176  f7fffffe          BL       lc640_write_int
00117a  e004              B        |L1.4486|
                  |L1.4476|
;;;1390   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
00117c  f9b4103c          LDRSH    r1,[r4,#0x3c]
001180  20b8              MOVS     r0,#0xb8
001182  f7fffffe          BL       lc640_write_int
                  |L1.4486|
;;;1391   
;;;1392   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1393   
;;;1394   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
001186  f8941038          LDRB     r1,[r4,#0x38]
00118a  7828              LDRB     r0,[r5,#0]  ; AVZ
00118c  4401              ADD      r1,r1,r0
00118e  290c              CMP      r1,#0xc
001190  d907              BLS      |L1.4514|
001192  f8941038          LDRB     r1,[r4,#0x38]
001196  380c              SUBS     r0,r0,#0xc
001198  4401              ADD      r1,r1,r0
00119a  20b6              MOVS     r0,#0xb6
00119c  f7fffffe          BL       lc640_write_int
0011a0  e005              B        |L1.4526|
                  |L1.4514|
;;;1395   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0011a2  f8941038          LDRB     r1,[r4,#0x38]
0011a6  4401              ADD      r1,r1,r0
0011a8  20b6              MOVS     r0,#0xb6
0011aa  f7fffffe          BL       lc640_write_int
                  |L1.4526|
;;;1396   
;;;1397   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1398   
;;;1399   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0011ae  f894002c          LDRB     r0,[r4,#0x2c]
0011b2  281c              CMP      r0,#0x1c
0011b4  d904              BLS      |L1.4544|
0011b6  211c              MOVS     r1,#0x1c
0011b8  20b4              MOVS     r0,#0xb4
0011ba  f7fffffe          BL       lc640_write_int
0011be  e004              B        |L1.4554|
                  |L1.4544|
;;;1400   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
0011c0  f894102c          LDRB     r1,[r4,#0x2c]
0011c4  20b4              MOVS     r0,#0xb4
0011c6  f7fffffe          BL       lc640_write_int
                  |L1.4554|
;;;1401   
;;;1402   //lc640_write_int(EE_DATE_AVZ,4);
;;;1403   
;;;1404   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
0011ca  f1040420          ADD      r4,r4,#0x20
0011ce  7a21              LDRB     r1,[r4,#8]
0011d0  f04f00ae          MOV      r0,#0xae
0011d4  f7fffffe          BL       lc640_write_int
;;;1405   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
0011d8  7921              LDRB     r1,[r4,#4]
0011da  20b0              MOVS     r0,#0xb0
0011dc  f7fffffe          BL       lc640_write_int
;;;1406   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
0011e0  7821              LDRB     r1,[r4,#0]
0011e2  e8bd4070          POP      {r4-r6,lr}
0011e6  20b2              MOVS     r0,#0xb2
0011e8  f7ffbffe          B.W      lc640_write_int
;;;1407   
;;;1408   }
;;;1409   
                          ENDP

                  avz_drv PROC
;;;1410   //-----------------------------------------------
;;;1411   void avz_drv(void)                               
0011ec  b510              PUSH     {r4,lr}
;;;1412   {                
;;;1413   if(AVZ!=AVZ_OFF)
0011ee  4890              LDR      r0,|L1.5168|
;;;1414   	{
;;;1415   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1416   		{
;;;1417   		bAVZ=1;
0011f0  4c8a              LDR      r4,|L1.5148|
0011f2  7800              LDRB     r0,[r0,#0]            ;1413  ; AVZ
0011f4  b338              CBZ      r0,|L1.4678|
0011f6  488d              LDR      r0,|L1.5164|
0011f8  8f82              LDRH     r2,[r0,#0x3c]         ;1415
0011fa  498e              LDR      r1,|L1.5172|
0011fc  8809              LDRH     r1,[r1,#0]            ;1415  ; YEAR_AVZ
0011fe  428a              CMP      r2,r1                 ;1415
001200  d121              BNE      |L1.4678|
001202  f8902038          LDRB     r2,[r0,#0x38]         ;1415
001206  498c              LDR      r1,|L1.5176|
001208  8809              LDRH     r1,[r1,#0]            ;1415  ; MONTH_AVZ
00120a  428a              CMP      r2,r1                 ;1415
00120c  d11b              BNE      |L1.4678|
00120e  f890102c          LDRB     r1,[r0,#0x2c]         ;1415
001212  4a8a              LDR      r2,|L1.5180|
001214  8812              LDRH     r2,[r2,#0]            ;1415  ; DATE_AVZ
001216  4291              CMP      r1,r2                 ;1415
001218  d115              BNE      |L1.4678|
00121a  f8901028          LDRB     r1,[r0,#0x28]         ;1415
00121e  4a88              LDR      r2,|L1.5184|
001220  8812              LDRH     r2,[r2,#0]            ;1415  ; HOUR_AVZ
001222  4291              CMP      r1,r2                 ;1415
001224  d10f              BNE      |L1.4678|
001226  f8901024          LDRB     r1,[r0,#0x24]         ;1415
00122a  4a86              LDR      r2,|L1.5188|
00122c  8812              LDRH     r2,[r2,#0]            ;1415  ; MIN_AVZ
00122e  4291              CMP      r1,r2                 ;1415
001230  d109              BNE      |L1.4678|
001232  f8900020          LDRB     r0,[r0,#0x20]         ;1415
001236  4984              LDR      r1,|L1.5192|
001238  8809              LDRH     r1,[r1,#0]            ;1415  ; SEC_AVZ
00123a  4288              CMP      r0,r1                 ;1415
00123c  d103              BNE      |L1.4678|
00123e  f04f0001          MOV      r0,#1
001242  f8840026          STRB     r0,[r4,#0x26]
                  |L1.4678|
;;;1418   		}
;;;1419   	}
;;;1420   if(bAVZ)
001246  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
00124a  2800              CMP      r0,#0
00124c  d00d              BEQ      |L1.4714|
;;;1421   	{
;;;1422   	if(vz_start(AVZ_TIME))
00124e  487f              LDR      r0,|L1.5196|
001250  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
001252  b2c0              UXTB     r0,r0
001254  f7fffffe          BL       vz_start
001258  2800              CMP      r0,#0
00125a  d006              BEQ      |L1.4714|
;;;1423   		{
;;;1424   		bAVZ=0;
00125c  f04f0000          MOV      r0,#0
001260  f8840026          STRB     r0,[r4,#0x26]
;;;1425   		avz_next_date_hndl();
001264  e8bd4010          POP      {r4,lr}
001268  e7fe              B        avz_next_date_hndl
                  |L1.4714|
;;;1426   		}
;;;1427   	}	
;;;1428   
;;;1429   }
00126a  bd10              POP      {r4,pc}
;;;1430   
                          ENDP

                  vz_drv PROC
;;;1431   //-----------------------------------------------
;;;1432   void vz_drv(void)
00126c  b538              PUSH     {r3-r5,lr}
;;;1433   { 
;;;1434   if(spc_stat==spcVZ)
00126e  4c6b              LDR      r4,|L1.5148|
001270  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001274  2802              CMP      r0,#2
001276  d11d              BNE      |L1.4788|
;;;1435   	{
;;;1436   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001278  4875              LDR      r0,|L1.5200|
00127a  7800              LDRB     r0,[r0,#0]  ; sk_stat
00127c  2801              CMP      r0,#1
00127e  d01a              BEQ      |L1.4790|
001280  4874              LDR      r0,|L1.5204|
001282  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
001284  2800              CMP      r0,#0
001286  d016              BEQ      |L1.4790|
;;;1437   		{
;;;1438   
;;;1439   	if(vz_cnt_s_<3600)
;;;1440   		{
;;;1441   		vz_cnt_s_++;
;;;1442   		if(vz_cnt_s_>=3600)
;;;1443   			{
;;;1444   			vz_cnt_s_=0;
;;;1445   			if(vz_cnt_h)
;;;1446   				{
;;;1447   				vz_cnt_h--;
;;;1448   				vz_cnt_h_++;
;;;1449   				}
;;;1450   			}
;;;1451   		}
;;;1452   
;;;1453   
;;;1454   	if(vz_cnt_s<60)
;;;1455   		{
;;;1456   		vz_cnt_s++;
;;;1457   		if(vz_cnt_s>=60)
;;;1458   			{
;;;1459   			vz_cnt_s=0;
;;;1460   			
;;;1461   			__ee_vz_cnt--;
;;;1462   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1463   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1464   				{
;;;1465   				spc_stat=spcOFF;
;;;1466   						__ee_spc_stat=spcOFF;
;;;1467   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1468   
;;;1469   //				hv_vz_stat=hvsOFF;
;;;1470   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1471   				vz_mem_hndl(0);
;;;1472   				}
;;;1473   			}
;;;1474   		}
;;;1475   		vz_error=0; 
;;;1476   		}
;;;1477   	else 
;;;1478   		{
;;;1479   		vz_error=1; 
001288  f04f0001          MOV      r0,#1
00128c  7060              STRB     r0,[r4,#1]
;;;1480   		if(((LPC_RTC->SEC)%10)==0)
00128e  4872              LDR      r0,|L1.5208|
001290  7800              LDRB     r0,[r0,#0]
001292  f04f010a          MOV      r1,#0xa
001296  fbb0f2f1          UDIV     r2,r0,r1
00129a  fb010012          MLS      r0,r1,r2,r0
00129e  2800              CMP      r0,#0
0012a0  d108              BNE      |L1.4788|
;;;1481   			{
;;;1482   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0012a2  f2413088          MOV      r0,#0x1388
0012a6  9000              STR      r0,[sp,#0]
0012a8  a36c              ADR      r3,|L1.5212|
0012aa  a272              ADR      r2,|L1.5236|
0012ac  a177              ADR      r1,|L1.5260|
0012ae  a07d              ADR      r0,|L1.5284|
0012b0  f7fffffe          BL       show_mess
                  |L1.4788|
;;;1483   						"    ЗАБЛОКИРОВАН    ",
;;;1484   						"     НЕИСПРАВНА     ",
;;;1485   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1486   						5000);			
;;;1487   			}
;;;1488   		}
;;;1489   /*	if(vz_cnt_s_>=3)
;;;1490   		{
;;;1491   		if(sk_stat[0]==0)
;;;1492   		} */
;;;1493   
;;;1494   	}
;;;1495   
;;;1496   
;;;1497   } 
0012b4  bd38              POP      {r3-r5,pc}
                  |L1.4790|
0012b6  f8b40064          LDRH     r0,[r4,#0x64]         ;1439  ; vz_cnt_s_
0012ba  f44f6161          MOV      r1,#0xe10             ;1439
0012be  2500              MOVS     r5,#0                 ;1436
0012c0  4288              CMP      r0,r1                 ;1439
0012c2  d215              BCS      |L1.4848|
0012c4  f1000001          ADD      r0,r0,#1              ;1441
0012c8  b280              UXTH     r0,r0                 ;1441
0012ca  f8a40064          STRH     r0,[r4,#0x64]         ;1441
0012ce  4288              CMP      r0,r1                 ;1442
0012d0  d30e              BCC      |L1.4848|
0012d2  f8a45064          STRH     r5,[r4,#0x64]         ;1444
0012d6  f8b40066          LDRH     r0,[r4,#0x66]         ;1445  ; vz_cnt_h
0012da  b148              CBZ      r0,|L1.4848|
0012dc  f1a00001          SUB      r0,r0,#1              ;1447
0012e0  f8240f66          STRH     r0,[r4,#0x66]!        ;1447
0012e4  8860              LDRH     r0,[r4,#2]            ;1448  ; vz_cnt_h_
0012e6  f1000001          ADD      r0,r0,#1              ;1448
0012ea  8060              STRH     r0,[r4,#2]            ;1448
0012ec  f1a40466          SUB      r4,r4,#0x66           ;1448
                  |L1.4848|
0012f0  f8b40062          LDRH     r0,[r4,#0x62]         ;1454  ; vz_cnt_s
0012f4  283c              CMP      r0,#0x3c              ;1454
0012f6  d225              BCS      |L1.4932|
0012f8  f1000001          ADD      r0,r0,#1              ;1456
0012fc  b280              UXTH     r0,r0                 ;1456
0012fe  f8a40062          STRH     r0,[r4,#0x62]         ;1456
001302  283c              CMP      r0,#0x3c              ;1457
001304  d31e              BCC      |L1.4932|
001306  f8245f62          STRH     r5,[r4,#0x62]!        ;1459
00130a  8960              LDRH     r0,[r4,#0xa]          ;1461  ; __ee_vz_cnt
00130c  f1a00001          SUB      r0,r0,#1              ;1461
001310  b201              SXTH     r1,r0                 ;1461
001312  8161              STRH     r1,[r4,#0xa]          ;1461
001314  f44f7027          MOV      r0,#0x29c             ;1462
001318  f7fffffe          BL       lc640_write_int
00131c  8960              LDRH     r0,[r4,#0xa]          ;1463  ; __ee_vz_cnt
00131e  f1a40462          SUB      r4,r4,#0x62           ;1463
001322  b118              CBZ      r0,|L1.4908|
001324  483e              LDR      r0,|L1.5152|
001326  8800              LDRH     r0,[r0,#0]            ;1463  ; speedChrgBlckStat
001328  2801              CMP      r0,#1                 ;1463
00132a  d10b              BNE      |L1.4932|
                  |L1.4908|
00132c  f8845023          STRB     r5,[r4,#0x23]         ;1465
001330  f8a4506e          STRH     r5,[r4,#0x6e]         ;1466
001334  2100              MOVS     r1,#0                 ;1467
001336  f240209a          MOV      r0,#0x29a             ;1467
00133a  f7fffffe          BL       lc640_write_int
00133e  2000              MOVS     r0,#0                 ;1471
001340  f7fffffe          BL       vz_mem_hndl
                  |L1.4932|
001344  7065              STRB     r5,[r4,#1]            ;1475
001346  bd38              POP      {r3-r5,pc}
;;;1498   
                          ENDP

                  vz1_drv PROC
;;;1500   //драйвер уравнительного заряда
;;;1501   void vz1_drv(void)
001348  e92d4ff8          PUSH     {r3-r11,lr}
;;;1502   {
;;;1503   if(volt_region_cnt)volt_region_cnt--;
00134c  f8df80cc          LDR      r8,|L1.5148|
001350  f9b8007c          LDRSH    r0,[r8,#0x7c]  ; volt_region_cnt
001354  b118              CBZ      r0,|L1.4958|
001356  f1a00001          SUB      r0,r0,#1
00135a  f8a8007c          STRH     r0,[r8,#0x7c]
                  |L1.4958|
;;;1504   if(vz1_stat==vz1sOFF)
00135e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001362  b928              CBNZ     r0,|L1.4976|
;;;1505   	{
;;;1506   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001364  2314              MOVS     r3,#0x14
001366  2200              MOVS     r2,#0
001368  2164              MOVS     r1,#0x64
00136a  20d2              MOVS     r0,#0xd2
00136c  f7fffffe          BL       mess_send
                  |L1.4976|
;;;1507   	}
;;;1508   if(vz1_stat==vz1sSTEP1)
001370  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1509   	{
;;;1510   	if(vz1_stat_old!=vz1_stat)
;;;1511   		{
;;;1512   		vz1_stat_cnt=5;
;;;1513   		}
;;;1514   	if(vz1_stat_cnt)
;;;1515   		{
;;;1516   		vz1_stat_cnt--;
;;;1517   		if(vz1_stat_cnt==0)
;;;1518   			{
;;;1519   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1520   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1521   			}
;;;1522   		}
;;;1523   	if(sk_stat[0]==1)
001374  4d36              LDR      r5,|L1.5200|
001376  f44f7bc9          MOV      r11,#0x192            ;1520
00137a  2801              CMP      r0,#1                 ;1508
00137c  d139              BNE      |L1.5106|
00137e  f8980006          LDRB     r0,[r8,#6]            ;1510  ; vz1_stat_old
001382  2801              CMP      r0,#1                 ;1510
001384  d003              BEQ      |L1.5006|
001386  f04f0005          MOV      r0,#5                 ;1512
00138a  f8a8007a          STRH     r0,[r8,#0x7a]         ;1512
                  |L1.5006|
00138e  f9b8007a          LDRSH    r0,[r8,#0x7a]         ;1514  ; vz1_stat_cnt
001392  b168              CBZ      r0,|L1.5040|
001394  f1a00001          SUB      r0,r0,#1              ;1516
001398  b200              SXTH     r0,r0                 ;1516
00139a  f8a8007a          STRH     r0,[r8,#0x7a]         ;1516
00139e  b938              CBNZ     r0,|L1.5040|
0013a0  f04f000b          MOV      r0,#0xb               ;1519
0013a4  f8880005          STRB     r0,[r8,#5]            ;1519
0013a8  4601              MOV      r1,r0                 ;1520
0013aa  4658              MOV      r0,r11                ;1520
0013ac  f7fffffe          BL       lc640_write
                  |L1.5040|
0013b0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0013b2  2801              CMP      r0,#1
0013b4  d117              BNE      |L1.5094|
;;;1524   		{
;;;1525   		vz1_stat=vz1sSTEP2;
0013b6  f04f0002          MOV      r0,#2
0013ba  f8880005          STRB     r0,[r8,#5]
;;;1526   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0013be  4601              MOV      r1,r0
0013c0  4658              MOV      r0,r11
0013c2  f7fffffe          BL       lc640_write
;;;1527   		tree_up(iVZ1_STEP2_2,1,0,0);
0013c6  2300              MOVS     r3,#0
0013c8  461a              MOV      r2,r3
0013ca  2101              MOVS     r1,#1
0013cc  20df              MOVS     r0,#0xdf
0013ce  f7fffffe          BL       tree_up
;;;1528   		tree_up(iVZ1_STEP2_1,0,0,0);
0013d2  2300              MOVS     r3,#0
0013d4  461a              MOV      r2,r3
0013d6  4619              MOV      r1,r3
0013d8  20de              MOVS     r0,#0xde
0013da  f7fffffe          BL       tree_up
;;;1529   		ret(1200);
0013de  f44f6096          MOV      r0,#0x4b0
0013e2  f7fffffe          BL       ||ret||
                  |L1.5094|
;;;1530   		}
;;;1531   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013e6  2314              MOVS     r3,#0x14
0013e8  2200              MOVS     r2,#0
0013ea  2164              MOVS     r1,#0x64
0013ec  20d2              MOVS     r0,#0xd2
0013ee  f7fffffe          BL       mess_send
                  |L1.5106|
;;;1532   	}
;;;1533   
;;;1534   if(vz1_stat==vz1sSTEP2)
0013f2  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1535   	{
;;;1536   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1537   		{
;;;1538   		vz1_stat_cnt=15;
0013f6  f04f090f          MOV      r9,#0xf
0013fa  2802              CMP      r0,#2                 ;1534
0013fc  d16c              BNE      |L1.5336|
0013fe  f8980006          LDRB     r0,[r8,#6]            ;1536  ; vz1_stat_old
001402  2802              CMP      r0,#2                 ;1536
001404  d102              BNE      |L1.5132|
001406  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1536  ; vz1_stat_cnt
00140a  b908              CBNZ     r0,|L1.5136|
                  |L1.5132|
00140c  f8a8907a          STRH     r9,[r8,#0x7a]
                  |L1.5136|
;;;1539   		}
;;;1540   	vz1_stat_cnt--;
001410  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001414  e052              B        |L1.5308|
001416  0000              DCW      0x0000
                  |L1.5144|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.5148|
                          DCD      ||area_number.25||
                  |L1.5152|
                          DCD      speedChrgBlckStat
                  |L1.5156|
                          DCD      Ib_ips_termokompensat
                  |L1.5160|
                          DCD      0xffff7360
                  |L1.5164|
                          DCD      0x40024000
                  |L1.5168|
                          DCD      AVZ
                  |L1.5172|
                          DCD      YEAR_AVZ
                  |L1.5176|
                          DCD      MONTH_AVZ
                  |L1.5180|
                          DCD      DATE_AVZ
                  |L1.5184|
                          DCD      HOUR_AVZ
                  |L1.5188|
                          DCD      MIN_AVZ
                  |L1.5192|
                          DCD      SEC_AVZ
                  |L1.5196|
                          DCD      AVZ_TIME
                  |L1.5200|
                          DCD      sk_stat
                  |L1.5204|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5208|
                          DCD      0x40024020
                  |L1.5212|
00145c  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001460  c2c5cdd2
001464  c8cbdfd6
001468  c8df2121
00146c  21202020
001470  00      
001471  00                DCB      0
001472  00                DCB      0
001473  00                DCB      0
                  |L1.5236|
001474  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
001478  20cdc5c8
00147c  d1cfd0c0
001480  c2cdc020
001484  20202020
001488  00      
001489  00                DCB      0
00148a  00                DCB      0
00148b  00                DCB      0
                  |L1.5260|
00148c  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
001490  c7c0c1cb
001494  cecac8d0
001498  cec2c0cd
00149c  20      
00149d  20202000          DCB      "   ",0
0014a1  00                DCB      0
0014a2  00                DCB      0
0014a3  00                DCB      0
                  |L1.5284|
0014a4  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0014a8  c2cdc8c2
0014ac  c0ded9c8
0014b0  c920c7  
0014b3  c0d0dfc4          DCB      192,208,223,196," ",0
0014b7  2000    
0014b9  00                DCB      0
0014ba  00                DCB      0
0014bb  00                DCB      0
                  |L1.5308|
0014bc  f1a00001          SUB      r0,r0,#1
0014c0  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1541   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014c4  f04f0314          MOV      r3,#0x14
0014c8  f04f0200          MOV      r2,#0
0014cc  f04f0164          MOV      r1,#0x64
0014d0  f04f00d2          MOV      r0,#0xd2
0014d4  f7fffffe          BL       mess_send
                  |L1.5336|
;;;1542   	}
;;;1543   
;;;1544   if(vz1_stat==vz1sSTEP3)
0014d8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1545   	{
;;;1546   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1547   		{
;;;1548   		vz1_stat_cnt=10;
0014dc  240a              MOVS     r4,#0xa
0014de  2600              MOVS     r6,#0                 ;1503
0014e0  f04f0a01          MOV      r10,#1                ;1504
;;;1549   
;;;1550   		}
;;;1551   	vz1_stat_cnt--;
;;;1552   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1553   		{
;;;1554   		show_mess(	"     ВКЛЮЧИТЕ       ",
0014e4  f2413788          MOV      r7,#0x1388
0014e8  2803              CMP      r0,#3                 ;1544
0014ea  d131              BNE      |L1.5456|
0014ec  f8980006          LDRB     r0,[r8,#6]            ;1546  ; vz1_stat_old
0014f0  2803              CMP      r0,#3                 ;1546
0014f2  d102              BNE      |L1.5370|
0014f4  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1546  ; vz1_stat_cnt
0014f8  b908              CBNZ     r0,|L1.5374|
                  |L1.5370|
0014fa  f8a8407a          STRH     r4,[r8,#0x7a]         ;1548
                  |L1.5374|
0014fe  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1551  ; vz1_stat_cnt
001502  f1a00001          SUB      r0,r0,#1              ;1551
001506  b200              SXTH     r0,r0                 ;1551
001508  f8a8007a          STRH     r0,[r8,#0x7a]         ;1551
00150c  280a              CMP      r0,#0xa               ;1552
00150e  d001              BEQ      |L1.5396|
001510  2809              CMP      r0,#9                 ;1552
001512  d106              BNE      |L1.5410|
                  |L1.5396|
001514  a3e7              ADR      r3,|L1.6324|
001516  a2ed              ADR      r2,|L1.6348|
001518  a1f2              ADR      r1,|L1.6372|
00151a  a0f8              ADR      r0,|L1.6396|
00151c  9700              STR      r7,[sp,#0]
00151e  f7fffffe          BL       show_mess
                  |L1.5410|
;;;1555   					"      ТУМБЛЕР       ",
;;;1556   					"     ВЫСОКОГО       ",
;;;1557   					"    НАПРЯЖЕНИЯ      ",
;;;1558   					5000);
;;;1559   		}
;;;1560   	if(sk_stat[1]==1)
001522  7868              LDRB     r0,[r5,#1]  ; sk_stat
001524  2801              CMP      r0,#1
001526  d10d              BNE      |L1.5444|
;;;1561   		{
;;;1562   		vz1_stat=vz1sWRK;
001528  f8884005          STRB     r4,[r8,#5]
;;;1563   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00152c  210a              MOVS     r1,#0xa
00152e  4658              MOV      r0,r11
001530  f7fffffe          BL       lc640_write
;;;1564   		volt_region=1;
001534  f888a02f          STRB     r10,[r8,#0x2f]
;;;1565   		cntrl_stat=0;
001538  f8a86032          STRH     r6,[r8,#0x32]
;;;1566   		cntrl_stat_new=0;
00153c  f8a86048          STRH     r6,[r8,#0x48]
;;;1567   		cntrl_stat_old=0;
001540  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5444|
;;;1568   		}
;;;1569   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001544  2314              MOVS     r3,#0x14
001546  2200              MOVS     r2,#0
001548  2164              MOVS     r1,#0x64
00154a  20d2              MOVS     r0,#0xd2
00154c  f7fffffe          BL       mess_send
                  |L1.5456|
;;;1570   	}
;;;1571   
;;;1572   if(vz1_stat==vz1sWRK)
001550  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001554  280a              CMP      r0,#0xa
001556  d17d              BNE      |L1.5716|
;;;1573   	{
;;;1574   	if(vz1_stat_old!=vz1_stat)
001558  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
;;;1575   		{
;;;1576   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00155c  49ed              LDR      r1,|L1.6420|
00155e  280a              CMP      r0,#0xa               ;1574
001560  d008              BEQ      |L1.5492|
001562  48ed              LDR      r0,|L1.6424|
001564  f44f6261          MOV      r2,#0xe10
001568  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00156c  fb00f002          MUL      r0,r0,r2
001570  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1577   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1578   		vz1_up_cnt=0L;
001572  640e              STR      r6,[r1,#0x40]  ; vz1_up_cnt
                  |L1.5492|
;;;1579   
;;;1580   		}
;;;1581   	vz1_wrk_cnt--;
001574  6bc8              LDR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
001576  f1a00001          SUB      r0,r0,#1
00157a  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1582   	vz1_up_cnt++;
00157c  6c0a              LDR      r2,[r1,#0x40]  ; vz1_up_cnt
00157e  f1020201          ADD      r2,r2,#1
001582  640a              STR      r2,[r1,#0x40]  ; vz1_up_cnt
;;;1583   
;;;1584   	if(vz1_wrk_cnt==0)
001584  b940              CBNZ     r0,|L1.5528|
;;;1585   		{
;;;1586   		vz1_stat=vz1sFINE;
001586  f8889005          STRB     r9,[r8,#5]
;;;1587   		lc640_write(EE_VZ1_STAT,vz1sFINE);
00158a  210f              MOVS     r1,#0xf
00158c  4658              MOV      r0,r11
00158e  f7fffffe          BL       lc640_write
;;;1588   		uz_mem_hndl(0);
001592  2000              MOVS     r0,#0
001594  f7fffffe          BL       uz_mem_hndl
                  |L1.5528|
;;;1589   		}
;;;1590   	if(sk_stat[0]==0)
001598  7828              LDRB     r0,[r5,#0]  ; sk_stat
00159a  b938              CBNZ     r0,|L1.5548|
;;;1591   		{
;;;1592   		vz1_stat=vz1sERR2;
00159c  f04f000c          MOV      r0,#0xc
0015a0  f8880005          STRB     r0,[r8,#5]
;;;1593   		lc640_write(EE_VZ1_STAT,vz1sERR2);
0015a4  4601              MOV      r1,r0
0015a6  4658              MOV      r0,r11
0015a8  f7fffffe          BL       lc640_write
                  |L1.5548|
;;;1594   		}
;;;1595   	if(sk_stat[1]==0)
0015ac  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015ae  b938              CBNZ     r0,|L1.5568|
;;;1596   		{
;;;1597   		vz1_stat=vz1sERR3;
0015b0  f04f000d          MOV      r0,#0xd
0015b4  f8880005          STRB     r0,[r8,#5]
;;;1598   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0015b8  4601              MOV      r1,r0
0015ba  4658              MOV      r0,r11
0015bc  f7fffffe          BL       lc640_write
                  |L1.5568|
;;;1599   		}
;;;1600   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0015c0  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0015c4  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
0015c8  fb90f0f4          SDIV     r0,r0,r4
;;;1601   		{
;;;1602   		volt_region=0;
;;;1603   		cntrl_stat=1000;
0015cc  f44f727a          MOV      r2,#0x3e8
0015d0  4288              CMP      r0,r1                 ;1600
0015d2  dd16              BLE      |L1.5634|
0015d4  f9b83032          LDRSH    r3,[r8,#0x32]         ;1600  ; cntrl_stat
0015d8  2b14              CMP      r3,#0x14              ;1600
0015da  dc12              BGT      |L1.5634|
0015dc  f898302f          LDRB     r3,[r8,#0x2f]         ;1600  ; volt_region
0015e0  2b01              CMP      r3,#1                 ;1600
0015e2  d10e              BNE      |L1.5634|
0015e4  f8b8307c          LDRH     r3,[r8,#0x7c]         ;1600  ; volt_region_cnt
0015e8  b95b              CBNZ     r3,|L1.5634|
0015ea  f888602f          STRB     r6,[r8,#0x2f]         ;1602
0015ee  f8a82032          STRH     r2,[r8,#0x32]
;;;1604   		cntrl_stat_new=1000;
0015f2  f8a82048          STRH     r2,[r8,#0x48]
;;;1605   		cntrl_stat_old=1000;
0015f6  f8a82034          STRH     r2,[r8,#0x34]
;;;1606   		volt_region_cnt=110;
0015fa  f04f036e          MOV      r3,#0x6e
0015fe  f8a8307c          STRH     r3,[r8,#0x7c]
                  |L1.5634|
;;;1607   		}
;;;1608   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001602  4288              CMP      r0,r1
001604  da13              BGE      |L1.5678|
001606  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
00160a  4290              CMP      r0,r2
00160c  db0f              BLT      |L1.5678|
00160e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001612  b960              CBNZ     r0,|L1.5678|
001614  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001618  b948              CBNZ     r0,|L1.5678|
;;;1609   		{
;;;1610   		volt_region=1;
00161a  f888a02f          STRB     r10,[r8,#0x2f]
;;;1611   		cntrl_stat=10;
00161e  f8a84032          STRH     r4,[r8,#0x32]
;;;1612   		cntrl_stat_new=10;
001622  f8a84048          STRH     r4,[r8,#0x48]
;;;1613   		cntrl_stat_old=10;
001626  f8a84034          STRH     r4,[r8,#0x34]
;;;1614   		volt_region_cnt=10;
00162a  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.5678|
;;;1615   		}
;;;1616   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00162e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001632  b110              CBZ      r0,|L1.5690|
;;;1617   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001634  2801              CMP      r0,#1
001636  d007              BEQ      |L1.5704|
001638  e00c              B        |L1.5716|
                  |L1.5690|
00163a  2314              MOVS     r3,#0x14              ;1616
00163c  2200              MOVS     r2,#0                 ;1616
00163e  2164              MOVS     r1,#0x64              ;1616
001640  20d2              MOVS     r0,#0xd2              ;1616
001642  f7fffffe          BL       mess_send
001646  e005              B        |L1.5716|
                  |L1.5704|
001648  2314              MOVS     r3,#0x14
00164a  2201              MOVS     r2,#1
00164c  2164              MOVS     r1,#0x64
00164e  20d2              MOVS     r0,#0xd2
001650  f7fffffe          BL       mess_send
                  |L1.5716|
;;;1618   	}
;;;1619   
;;;1620   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001654  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001658  280b              CMP      r0,#0xb
00165a  d120              BNE      |L1.5790|
;;;1621   	{
;;;1622   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00165c  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001660  280b              CMP      r0,#0xb
001662  d102              BNE      |L1.5738|
001664  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001668  b908              CBNZ     r0,|L1.5742|
                  |L1.5738|
;;;1623   		{
;;;1624   		vz1_stat_cnt=10;
00166a  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5742|
;;;1625   		}
;;;1626   	vz1_stat_cnt--;
00166e  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001672  f1a00001          SUB      r0,r0,#1
001676  b200              SXTH     r0,r0
001678  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1627   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00167c  280a              CMP      r0,#0xa
00167e  d001              BEQ      |L1.5764|
001680  2809              CMP      r0,#9
001682  d106              BNE      |L1.5778|
                  |L1.5764|
;;;1628   		{
;;;1629   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001684  a3a5              ADR      r3,|L1.6428|
001686  a2ab              ADR      r2,|L1.6452|
001688  a1b0              ADR      r1,|L1.6476|
00168a  a0b6              ADR      r0,|L1.6500|
00168c  9700              STR      r7,[sp,#0]
00168e  f7fffffe          BL       show_mess
                  |L1.5778|
;;;1630   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1631   					"      ВКЛЮЧЕН       ",
;;;1632   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1633   					5000);
;;;1634   		}
;;;1635   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001692  2314              MOVS     r3,#0x14
001694  2200              MOVS     r2,#0
001696  2164              MOVS     r1,#0x64
001698  20d2              MOVS     r0,#0xd2
00169a  f7fffffe          BL       mess_send
                  |L1.5790|
;;;1636   	}
;;;1637   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00169e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0016a2  280c              CMP      r0,#0xc
0016a4  d12c              BNE      |L1.5888|
;;;1638   	{
;;;1639   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0016a6  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0016aa  280c              CMP      r0,#0xc
0016ac  d102              BNE      |L1.5812|
0016ae  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0016b2  b908              CBNZ     r0,|L1.5816|
                  |L1.5812|
;;;1640   		{
;;;1641   		vz1_stat_cnt=10;
0016b4  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5816|
;;;1642   		}
;;;1643   	vz1_stat_cnt--;
0016b8  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0016bc  f1a00001          SUB      r0,r0,#1
0016c0  b200              SXTH     r0,r0
0016c2  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1644   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0016c6  280a              CMP      r0,#0xa
0016c8  d001              BEQ      |L1.5838|
0016ca  2809              CMP      r0,#9
0016cc  d109              BNE      |L1.5858|
                  |L1.5838|
;;;1645   		{
;;;1646   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0016ce  f2af2374          ADR      r3,|L1.5212|
0016d2  f2af2260          ADR      r2,|L1.5236|
0016d6  f2af214c          ADR      r1,|L1.5260|
0016da  a0a2              ADR      r0,|L1.6500|
0016dc  9700              STR      r7,[sp,#0]
0016de  f7fffffe          BL       show_mess
                  |L1.5858|
;;;1647   					"    ЗАБЛОКИРОВАН    ",
;;;1648   					"     НЕИСПРАВНА     ",
;;;1649   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1650   					5000);
;;;1651   		}
;;;1652   	if(sk_stat[0]==1)
0016e2  7828              LDRB     r0,[r5,#0]  ; sk_stat
0016e4  2801              CMP      r0,#1
0016e6  d105              BNE      |L1.5876|
;;;1653   		{
;;;1654   		vz1_stat=vz1sWRK;
0016e8  f8884005          STRB     r4,[r8,#5]
;;;1655   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0016ec  210a              MOVS     r1,#0xa
0016ee  4658              MOV      r0,r11
0016f0  f7fffffe          BL       lc640_write
                  |L1.5876|
;;;1656   		}
;;;1657   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0016f4  2314              MOVS     r3,#0x14
0016f6  2200              MOVS     r2,#0
0016f8  2164              MOVS     r1,#0x64
0016fa  20d2              MOVS     r0,#0xd2
0016fc  f7fffffe          BL       mess_send
                  |L1.5888|
;;;1658   	}
;;;1659   
;;;1660   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
001700  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001704  280d              CMP      r0,#0xd
001706  d129              BNE      |L1.5980|
;;;1661   	{
;;;1662   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001708  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00170c  280d              CMP      r0,#0xd
00170e  d102              BNE      |L1.5910|
001710  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001714  b908              CBNZ     r0,|L1.5914|
                  |L1.5910|
;;;1663   		{
;;;1664   		vz1_stat_cnt=10;
001716  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5914|
;;;1665   		}
;;;1666   	vz1_stat_cnt--;
00171a  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00171e  f1a00001          SUB      r0,r0,#1
001722  b200              SXTH     r0,r0
001724  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1667   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001728  280a              CMP      r0,#0xa
00172a  d001              BEQ      |L1.5936|
00172c  2809              CMP      r0,#9
00172e  d106              BNE      |L1.5950|
                  |L1.5936|
;;;1668   		{
;;;1669   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001730  a392              ADR      r3,|L1.6524|
001732  a298              ADR      r2,|L1.6548|
001734  a19d              ADR      r1,|L1.6572|
001736  a08b              ADR      r0,|L1.6500|
001738  9700              STR      r7,[sp,#0]
00173a  f7fffffe          BL       show_mess
                  |L1.5950|
;;;1670   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1671   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1672   					"*   ТУМБЛЕРА!!!     ",
;;;1673   					5000);
;;;1674   		}
;;;1675   	if(sk_stat[1]==1)
00173e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001740  2801              CMP      r0,#1
001742  d105              BNE      |L1.5968|
;;;1676   		{
;;;1677   		vz1_stat=vz1sWRK;
001744  f8884005          STRB     r4,[r8,#5]
;;;1678   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001748  210a              MOVS     r1,#0xa
00174a  4658              MOV      r0,r11
00174c  f7fffffe          BL       lc640_write
                  |L1.5968|
;;;1679   		}
;;;1680   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001750  2314              MOVS     r3,#0x14
001752  2200              MOVS     r2,#0
001754  2164              MOVS     r1,#0x64
001756  20d2              MOVS     r0,#0xd2
001758  f7fffffe          BL       mess_send
                  |L1.5980|
;;;1681   	}
;;;1682   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
00175c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001760  280e              CMP      r0,#0xe
001762  d12a              BNE      |L1.6074|
;;;1683   	{
;;;1684   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001764  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001768  280e              CMP      r0,#0xe
00176a  d102              BNE      |L1.6002|
00176c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001770  b908              CBNZ     r0,|L1.6006|
                  |L1.6002|
;;;1685   		{
;;;1686   		vz1_stat_cnt=10;
001772  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6006|
;;;1687   		}
;;;1688   	vz1_stat_cnt--;
001776  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00177a  f1a00001          SUB      r0,r0,#1
00177e  b200              SXTH     r0,r0
001780  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1689   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001784  280a              CMP      r0,#0xa
001786  d001              BEQ      |L1.6028|
001788  2809              CMP      r0,#9
00178a  d106              BNE      |L1.6042|
                  |L1.6028|
;;;1690   		{
;;;1691   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
00178c  a349              ADR      r3,|L1.6324|
00178e  a24f              ADR      r2,|L1.6348|
001790  a154              ADR      r1,|L1.6372|
001792  a08c              ADR      r0,|L1.6596|
001794  9700              STR      r7,[sp,#0]
001796  f7fffffe          BL       show_mess
                  |L1.6042|
;;;1692   					"      ТУМБЛЕР       ",
;;;1693   					"     ВЫСОКОГО       ",
;;;1694   					"    НАПРЯЖЕНИЯ      ",
;;;1695   					5000);
;;;1696   		}
;;;1697   	if(sk_stat[1]==0)
00179a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179c  b938              CBNZ     r0,|L1.6062|
;;;1698   		{
;;;1699   		vz1_stat=vz1sOFF;
00179e  f8886005          STRB     r6,[r8,#5]
;;;1700   		lc640_write(EE_VZ1_STAT,vz1sOFF);
0017a2  2100              MOVS     r1,#0
0017a4  4658              MOV      r0,r11
0017a6  f7fffffe          BL       lc640_write
;;;1701   		vz_stop();
0017aa  f7fffffe          BL       vz_stop
                  |L1.6062|
;;;1702   
;;;1703   		}
;;;1704   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0017ae  2314              MOVS     r3,#0x14
0017b0  2201              MOVS     r2,#1
0017b2  2164              MOVS     r1,#0x64
0017b4  20d2              MOVS     r0,#0xd2
0017b6  f7fffffe          BL       mess_send
                  |L1.6074|
;;;1705   	}
;;;1706   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0017ba  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1707   	{
;;;1708   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1709   		{
;;;1710   		vz1_stat_cnt=10;
;;;1711   		}
;;;1712   	vz1_stat_cnt--;
;;;1713   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1714   		{
;;;1715   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0017be  f64037b8          MOV      r7,#0xbb8
0017c2  280f              CMP      r0,#0xf               ;1706
0017c4  d135              BNE      |L1.6194|
0017c6  f8980006          LDRB     r0,[r8,#6]            ;1708  ; vz1_stat_old
0017ca  280f              CMP      r0,#0xf               ;1708
0017cc  d102              BNE      |L1.6100|
0017ce  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1708  ; vz1_stat_cnt
0017d2  b908              CBNZ     r0,|L1.6104|
                  |L1.6100|
0017d4  f8a8407a          STRH     r4,[r8,#0x7a]         ;1710
                  |L1.6104|
0017d8  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1712  ; vz1_stat_cnt
0017dc  f1a00001          SUB      r0,r0,#1              ;1712
0017e0  b200              SXTH     r0,r0                 ;1712
0017e2  f8a8007a          STRH     r0,[r8,#0x7a]         ;1712
0017e6  280a              CMP      r0,#0xa               ;1713
0017e8  d001              BEQ      |L1.6126|
0017ea  2809              CMP      r0,#9                 ;1713
0017ec  d106              BNE      |L1.6140|
                  |L1.6126|
0017ee  a37b              ADR      r3,|L1.6620|
0017f0  a280              ADR      r2,|L1.6644|
0017f2  a186              ADR      r1,|L1.6668|
0017f4  a08b              ADR      r0,|L1.6692|
0017f6  9700              STR      r7,[sp,#0]
0017f8  f7fffffe          BL       show_mess
                  |L1.6140|
;;;1716   					"       ЗАРЯД        ",
;;;1717   					"      УСПЕШНО       ",
;;;1718   					"     ЗАВЕРШЕН       ",
;;;1719   					3000);
;;;1720   		}
;;;1721   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0017fc  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001800  2806              CMP      r0,#6
001802  d001              BEQ      |L1.6152|
001804  2805              CMP      r0,#5
001806  d106              BNE      |L1.6166|
                  |L1.6152|
;;;1722   		{
;;;1723   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001808  a32a              ADR      r3,|L1.6324|
00180a  a230              ADR      r2,|L1.6348|
00180c  a135              ADR      r1,|L1.6372|
00180e  a08b              ADR      r0,|L1.6716|
001810  9700              STR      r7,[sp,#0]
001812  f7fffffe          BL       show_mess
                  |L1.6166|
;;;1724   					"      ТУМБЛЕР       ",
;;;1725   					"     ВЫСОКОГО       ",
;;;1726   					"    НАПРЯЖЕНИЯ      ",
;;;1727   					3000);
;;;1728   		}
;;;1729   	if(sk_stat[1]==0)
001816  7868              LDRB     r0,[r5,#1]  ; sk_stat
001818  b928              CBNZ     r0,|L1.6182|
;;;1730   		{
;;;1731   		vz1_stat=vz1sOFF;
00181a  f8886005          STRB     r6,[r8,#5]
;;;1732   		lc640_write(EE_VZ1_STAT,vz1sOFF);
00181e  2100              MOVS     r1,#0
001820  4658              MOV      r0,r11
001822  f7fffffe          BL       lc640_write
                  |L1.6182|
;;;1733   		}
;;;1734   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001826  2314              MOVS     r3,#0x14
001828  2200              MOVS     r2,#0
00182a  2164              MOVS     r1,#0x64
00182c  20d2              MOVS     r0,#0xd2
00182e  f7fffffe          BL       mess_send
                  |L1.6194|
;;;1735   	}
;;;1736   
;;;1737   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001832  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001836  2810              CMP      r0,#0x10
001838  d135              BNE      |L1.6310|
;;;1738   	{
;;;1739   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00183a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00183e  2810              CMP      r0,#0x10
001840  d102              BNE      |L1.6216|
001842  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001846  b908              CBNZ     r0,|L1.6220|
                  |L1.6216|
;;;1740   		{
;;;1741   		vz1_stat_cnt=10;
001848  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6220|
;;;1742   		}
;;;1743   	vz1_stat_cnt--;
00184c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001850  f1a00001          SUB      r0,r0,#1
001854  b200              SXTH     r0,r0
001856  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1744   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00185a  280a              CMP      r0,#0xa
00185c  d001              BEQ      |L1.6242|
00185e  2809              CMP      r0,#9
001860  d106              BNE      |L1.6256|
                  |L1.6242|
;;;1745   		{
;;;1746   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001862  a37c              ADR      r3,|L1.6740|
001864  a281              ADR      r2,|L1.6764|
001866  a169              ADR      r1,|L1.6668|
001868  a06e              ADR      r0,|L1.6692|
00186a  9700              STR      r7,[sp,#0]
00186c  f7fffffe          BL       show_mess
                  |L1.6256|
;;;1747   					"       ЗАРЯД        ",
;;;1748   					"     ПРЕКРАЩЕН      ",
;;;1749   					"                    ",
;;;1750   					3000);
;;;1751   		}
;;;1752   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001870  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001874  2806              CMP      r0,#6
001876  d001              BEQ      |L1.6268|
001878  2805              CMP      r0,#5
00187a  d106              BNE      |L1.6282|
                  |L1.6268|
;;;1753   		{
;;;1754   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00187c  a30d              ADR      r3,|L1.6324|
00187e  a213              ADR      r2,|L1.6348|
001880  a118              ADR      r1,|L1.6372|
001882  a06e              ADR      r0,|L1.6716|
001884  9700              STR      r7,[sp,#0]
001886  f7fffffe          BL       show_mess
                  |L1.6282|
;;;1755   					"      ТУМБЛЕР       ",
;;;1756   					"     ВЫСОКОГО       ",
;;;1757   					"    НАПРЯЖЕНИЯ      ",
;;;1758   					3000);
;;;1759   		}
;;;1760   	if(sk_stat[1]==0)
00188a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00188c  b928              CBNZ     r0,|L1.6298|
;;;1761   		{
;;;1762   		vz1_stat=vz1sOFF;
00188e  f8886005          STRB     r6,[r8,#5]
;;;1763   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001892  2100              MOVS     r1,#0
001894  4658              MOV      r0,r11
001896  f7fffffe          BL       lc640_write
                  |L1.6298|
;;;1764   		}
;;;1765   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00189a  2314              MOVS     r3,#0x14
00189c  2200              MOVS     r2,#0
00189e  2164              MOVS     r1,#0x64
0018a0  20d2              MOVS     r0,#0xd2
0018a2  f7fffffe          BL       mess_send
                  |L1.6310|
;;;1766   	}
;;;1767   
;;;1768   vz1_stat_old=vz1_stat;
0018a6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018aa  f8880006          STRB     r0,[r8,#6]
;;;1769   
;;;1770   
;;;1771   
;;;1772   }
0018ae  e8bd8ff8          POP      {r3-r11,pc}
0018b2  0000              DCW      0x0000
                  |L1.6324|
0018b4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0018b8  cdc0cfd0
0018bc  dfc6c5cd
0018c0  c8df2020
0018c4  20202020
0018c8  00      
0018c9  00                DCB      0
0018ca  00                DCB      0
0018cb  00                DCB      0
                  |L1.6348|
0018cc  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
0018d0  20c2dbd1
0018d4  cecacec3
0018d8  ce202020
0018dc  20202020
0018e0  00      
0018e1  00                DCB      0
0018e2  00                DCB      0
0018e3  00                DCB      0
                  |L1.6372|
0018e4  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
0018e8  2020d2d3
0018ec  ccc1cbc5
0018f0  d0202020
0018f4  20202020
0018f8  00      
0018f9  00                DCB      0
0018fa  00                DCB      0
0018fb  00                DCB      0
                  |L1.6396|
0018fc  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001900  20c2cacb
001904  ded7c8d2
001908  c5202020
00190c  20202020
001910  00      
001911  00                DCB      0
001912  00                DCB      0
001913  00                DCB      0
                  |L1.6420|
                          DCD      ||area_number.25||+0x80
                  |L1.6424|
                          DCD      UZ_T
                  |L1.6428|
00191c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001920  c720c2c5
001924  cdd2c8cb
001928  dfd6c8  
00192b  c8212120          DCB      200,"!!  ",0
00192f  2000    
001931  00                DCB      0
001932  00                DCB      0
001933  00                DCB      0
                  |L1.6452|
001934  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001938  2020c2ca
00193c  cbded7c5
001940  cd202020
001944  20202020
001948  00      
001949  00                DCB      0
00194a  00                DCB      0
00194b  00                DCB      0
                  |L1.6476|
00194c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001950  c520ccce
001954  c6c5d220
001958  c1dbd2dc
00195c  20202020          DCB      "    ",0
001960  00      
001961  00                DCB      0
001962  00                DCB      0
001963  00                DCB      0
                  |L1.6500|
001964  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001968  cdc8d2c5
00196c  cbdccddb
001970  c920c7  
001973  c0d0dfc4          DCB      192,208,223,196," ",0
001977  2000    
001979  00                DCB      0
00197a  00                DCB      0
00197b  00                DCB      0
                  |L1.6524|
00197c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001980  d2d3ccc1
001984  cbc5d0c0
001988  21212120
00198c  20202020
001990  00      
001991  00                DCB      0
001992  00                DCB      0
001993  00                DCB      0
                  |L1.6548|
001994  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001998  d1cbc520
00199c  c2cacbde
0019a0  d7c5cd  
0019a3  c8df2020          DCB      200,223,"   ",0
0019a7  2000    
0019a9  00                DCB      0
0019aa  00                DCB      0
0019ab  00                DCB      0
                  |L1.6572|
0019ac  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
0019b0  c4c5d220
0019b4  cfd0cec4
0019b8  cecbc6  
0019bb  c5cd2020          DCB      197,205,"   ",0
0019bf  2000    
0019c1  00                DCB      0
0019c2  00                DCB      0
0019c3  00                DCB      0
                  |L1.6596|
0019c4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
0019c8  20c2dbca
0019cc  cbded7c8
0019d0  d2c52020
0019d4  20202020
0019d8  00      
0019d9  00                DCB      0
0019da  00                DCB      0
0019db  00                DCB      0
                  |L1.6620|
0019dc  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
0019e0  20c7c0c2
0019e4  c5d0d8c5
0019e8  cd202020
0019ec  20202020
0019f0  00      
0019f1  00                DCB      0
0019f2  00                DCB      0
0019f3  00                DCB      0
                  |L1.6644|
0019f4  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
0019f8  2020d3d1
0019fc  cfc5d8cd
001a00  ce202020
001a04  20202020
001a08  00      
001a09  00                DCB      0
001a0a  00                DCB      0
001a0b  00                DCB      0
                  |L1.6668|
001a0c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001a10  202020c7
001a14  c0d0dfc4
001a18  20202020
001a1c  20202020
001a20  00      
001a21  00                DCB      0
001a22  00                DCB      0
001a23  00                DCB      0
                  |L1.6692|
001a24  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001a28  d0c0c2cd
001a2c  c8d2c5cb
001a30  dccddbc9
001a34  20202020          DCB      "    ",0
001a38  00      
001a39  00                DCB      0
001a3a  00                DCB      0
001a3b  00                DCB      0
                  |L1.6716|
001a3c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001a40  20c2dbca
001a44  cbded7c8
001a48  d2c52020
001a4c  20202020
001a50  00      
001a51  00                DCB      0
001a52  00                DCB      0
001a53  00                DCB      0
                  |L1.6740|
001a54  20202020          DCB      "                    ",0
001a58  20202020
001a5c  20202020
001a60  20202020
001a64  20202020
001a68  00      
001a69  00                DCB      0
001a6a  00                DCB      0
001a6b  00                DCB      0
                  |L1.6764|
001a6c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001a70  20cfd0c5
001a74  cad0c0d9
001a78  c5cd2020
001a7c  20202020
001a80  00      
001a81  00                DCB      0
001a82  00                DCB      0
001a83  00                DCB      0
                          ENDP

                  vz1_start PROC
;;;1775   //старт уравнительног заряда
;;;1776   char vz1_start(char hour)
001a84  b510              PUSH     {r4,lr}
;;;1777   {          
;;;1778   char out;
;;;1779   out=0;
001a86  f04f0000          MOV      r0,#0
;;;1780   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001a8a  49fe              LDR      r1,|L1.7812|
001a8c  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001a90  2a00              CMP      r2,#0
001a92  d110              BNE      |L1.6838|
001a94  4afc              LDR      r2,|L1.7816|
001a96  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001a98  2a01              CMP      r2,#1
001a9a  d00c              BEQ      |L1.6838|
001a9c  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001a9e  2a00              CMP      r2,#0
001aa0  d109              BNE      |L1.6838|
;;;1781   	{
;;;1782   	if(vz1_stat==vz1sOFF)
;;;1783   		{
;;;1784   		vz1_stat=vz1sSTEP1;
001aa2  f04f0001          MOV      r0,#1
001aa6  7148              STRB     r0,[r1,#5]
;;;1785   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001aa8  4601              MOV      r1,r0
001aaa  f44f70c9          MOV      r0,#0x192
001aae  f7fffffe          BL       lc640_write
;;;1786   		out=1;
001ab2  f04f0001          MOV      r0,#1
                  |L1.6838|
;;;1787   		
;;;1788   		}
;;;1789   /*	spc_stat=spcVZ;
;;;1790   	__ee_spc_stat=spcVZ; 
;;;1791   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1792   	vz_cnt_h=hour;
;;;1793   	__ee_vz_cnt=hour*60;
;;;1794   	if(hour==0)__ee_vz_cnt=30;
;;;1795   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1796   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1797   	vz_cnt_h_=0;
;;;1798   	vz_cnt_s=0;
;;;1799   	vz_cnt_s_=0;
;;;1800   	
;;;1801   		*/
;;;1802   	}
;;;1803   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1804   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1805   //plazma=out;	
;;;1806   return out;
;;;1807   }
001ab6  bd10              POP      {r4,pc}
;;;1808   
                          ENDP

                  vz1_stop PROC
;;;1810   //стоп уравнительног заряда
;;;1811   void vz1_stop(void)
001ab8  48f2              LDR      r0,|L1.7812|
;;;1812   {
;;;1813   if(vz1_stat!=vz1sOFF)
001aba  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001abc  2900              CMP      r1,#0
001abe  d006              BEQ      |L1.6862|
;;;1814   	{
;;;1815   	vz1_stat=vz1sSTOP;
001ac0  f04f0110          MOV      r1,#0x10
001ac4  7141              STRB     r1,[r0,#5]
;;;1816   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001ac6  f44f70c9          MOV      r0,#0x192
001aca  f7ffbffe          B.W      lc640_write
                  |L1.6862|
;;;1817   	}
;;;1818   }
001ace  4770              BX       lr
;;;1819   
                          ENDP

                  vz2_drv PROC
;;;1821   //драйвер формовочного заряда
;;;1822   void vz2_drv(void)
001ad0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1823   {
;;;1824   
;;;1825   if(vz2_stat==vz2sSTEP1)
001ad4  f8df83ac          LDR      r8,|L1.7812|
;;;1826   	{
;;;1827   	if(vz2_stat_old!=vz2_stat)
;;;1828   		{
;;;1829   		vz2_stat_cnt=5;
;;;1830   		}
;;;1831   	if(vz2_stat_cnt)
;;;1832   		{
;;;1833   		vz2_stat_cnt--;
;;;1834   		if(vz2_stat_cnt==0)
;;;1835   			{
;;;1836   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1837   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1838   			}
;;;1839   		}
;;;1840   	if(sk_stat[0]==1)
001ad8  4dec              LDR      r5,|L1.7820|
001ada  f8980007          LDRB     r0,[r8,#7]            ;1825  ; vz2_stat
001ade  2801              CMP      r0,#1                 ;1825
001ae0  d13b              BNE      |L1.7002|
001ae2  f8980008          LDRB     r0,[r8,#8]            ;1827  ; vz2_stat_old
001ae6  2801              CMP      r0,#1                 ;1827
001ae8  d003              BEQ      |L1.6898|
001aea  f04f0005          MOV      r0,#5                 ;1829
001aee  f8a8007e          STRH     r0,[r8,#0x7e]         ;1829
                  |L1.6898|
001af2  f9b8007e          LDRSH    r0,[r8,#0x7e]         ;1831  ; vz2_stat_cnt
001af6  b170              CBZ      r0,|L1.6934|
001af8  f1a00001          SUB      r0,r0,#1              ;1833
001afc  b200              SXTH     r0,r0                 ;1833
001afe  f8a8007e          STRH     r0,[r8,#0x7e]         ;1833
001b02  b940              CBNZ     r0,|L1.6934|
001b04  f04f000c          MOV      r0,#0xc               ;1836
001b08  f8880007          STRB     r0,[r8,#7]            ;1836
001b0c  4601              MOV      r1,r0                 ;1837
001b0e  f44f70ca          MOV      r0,#0x194             ;1837
001b12  f7fffffe          BL       lc640_write
                  |L1.6934|
001b16  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b18  2801              CMP      r0,#1
001b1a  d118              BNE      |L1.6990|
;;;1841   		{
;;;1842   		vz2_stat=vz2sSTEP2;
001b1c  f04f0002          MOV      r0,#2
001b20  f8880007          STRB     r0,[r8,#7]
;;;1843   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b24  4601              MOV      r1,r0
001b26  f44f70ca          MOV      r0,#0x194
001b2a  f7fffffe          BL       lc640_write
;;;1844   		tree_up(iVZ2_STEP2_2,1,0,0);
001b2e  2300              MOVS     r3,#0
001b30  461a              MOV      r2,r3
001b32  2101              MOVS     r1,#1
001b34  20e1              MOVS     r0,#0xe1
001b36  f7fffffe          BL       tree_up
;;;1845   		tree_up(iVZ2_STEP2_1,0,0,0);
001b3a  2300              MOVS     r3,#0
001b3c  461a              MOV      r2,r3
001b3e  4619              MOV      r1,r3
001b40  20e0              MOVS     r0,#0xe0
001b42  f7fffffe          BL       tree_up
;;;1846   		ret(1200);
001b46  f44f6096          MOV      r0,#0x4b0
001b4a  f7fffffe          BL       ||ret||
                  |L1.6990|
;;;1847   		}
;;;1848   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b4e  2314              MOVS     r3,#0x14
001b50  2200              MOVS     r2,#0
001b52  2164              MOVS     r1,#0x64
001b54  20d2              MOVS     r0,#0xd2
001b56  f7fffffe          BL       mess_send
                  |L1.7002|
;;;1849   	}
;;;1850   
;;;1851   if(vz2_stat==vz2sSTEP2)
001b5a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001b5e  2802              CMP      r0,#2
001b60  d11a              BNE      |L1.7064|
;;;1852   	{
;;;1853   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b62  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001b66  2802              CMP      r0,#2
001b68  d102              BNE      |L1.7024|
001b6a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001b6e  b918              CBNZ     r0,|L1.7032|
                  |L1.7024|
;;;1854   		{
;;;1855   		vz2_stat_cnt=15;
001b70  f04f000f          MOV      r0,#0xf
001b74  f8a8007e          STRH     r0,[r8,#0x7e]
                  |L1.7032|
;;;1856   		}
;;;1857   	vz2_stat_cnt--;
001b78  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001b7c  f1a00001          SUB      r0,r0,#1
001b80  f8a8007e          STRH     r0,[r8,#0x7e]
;;;1858   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b84  f04f0314          MOV      r3,#0x14
001b88  f04f0200          MOV      r2,#0
001b8c  f04f0164          MOV      r1,#0x64
001b90  f04f00d2          MOV      r0,#0xd2
001b94  f7fffffe          BL       mess_send
                  |L1.7064|
;;;1859   	}
;;;1860   
;;;1861   if(vz2_stat==vz2sSTEP3)
001b98  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1862   	{
;;;1863   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1864   		{
;;;1865   		vz2_stat_cnt=10;
001b9c  240a              MOVS     r4,#0xa
001b9e  2600              MOVS     r6,#0
;;;1866   		cntrl_stat=0;
;;;1867   		cntrl_stat_new=0;
;;;1868   		cntrl_stat_old=0;
;;;1869   		}
;;;1870   	vz2_stat_cnt--;
;;;1871   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1872   		{
;;;1873   		show_mess(	"     ВКЛЮЧИТЕ       ",
001ba0  f2413788          MOV      r7,#0x1388
001ba4  2803              CMP      r0,#3                 ;1861
001ba6  d13e              BNE      |L1.7206|
001ba8  f8980008          LDRB     r0,[r8,#8]            ;1863  ; vz2_stat_old
001bac  2803              CMP      r0,#3                 ;1863
001bae  d102              BNE      |L1.7094|
001bb0  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1863  ; vz2_stat_cnt
001bb4  b938              CBNZ     r0,|L1.7110|
                  |L1.7094|
001bb6  f8a8407e          STRH     r4,[r8,#0x7e]         ;1865
001bba  f8a86032          STRH     r6,[r8,#0x32]         ;1866
001bbe  f8a86048          STRH     r6,[r8,#0x48]         ;1867
001bc2  f8a86034          STRH     r6,[r8,#0x34]         ;1868
                  |L1.7110|
001bc6  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1870  ; vz2_stat_cnt
001bca  f1a00001          SUB      r0,r0,#1              ;1870
001bce  b200              SXTH     r0,r0                 ;1870
001bd0  f8a8007e          STRH     r0,[r8,#0x7e]         ;1870
001bd4  280a              CMP      r0,#0xa               ;1871
001bd6  d001              BEQ      |L1.7132|
001bd8  2809              CMP      r0,#9                 ;1871
001bda  d10a              BNE      |L1.7154|
                  |L1.7132|
001bdc  f2af332c          ADR      r3,|L1.6324|
001be0  f2af3218          ADR      r2,|L1.6348|
001be4  f2af3104          ADR      r1,|L1.6372|
001be8  f2af20f0          ADR      r0,|L1.6396|
001bec  9700              STR      r7,[sp,#0]
001bee  f7fffffe          BL       show_mess
                  |L1.7154|
;;;1874   					"      ТУМБЛЕР       ",
;;;1875   					"     ВЫСОКОГО       ",
;;;1876   					"    НАПРЯЖЕНИЯ      ",
;;;1877   					5000);
;;;1878   		}
;;;1879   	if(sk_stat[1]==1)
001bf2  7868              LDRB     r0,[r5,#1]  ; sk_stat
001bf4  2801              CMP      r0,#1
001bf6  d110              BNE      |L1.7194|
;;;1880   		{
;;;1881   		vz2_stat=vz2sWRK1;
001bf8  f8884007          STRB     r4,[r8,#7]
;;;1882   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001bfc  210a              MOVS     r1,#0xa
001bfe  f44f70ca          MOV      r0,#0x194
001c02  f7fffffe          BL       lc640_write
;;;1883   		volt_region=1;
001c06  f04f0001          MOV      r0,#1
001c0a  f888002f          STRB     r0,[r8,#0x2f]
;;;1884   		cntrl_stat=0;
001c0e  f8a86032          STRH     r6,[r8,#0x32]
;;;1885   		cntrl_stat_new=0;
001c12  f8a86048          STRH     r6,[r8,#0x48]
;;;1886   		cntrl_stat_old=0;
001c16  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.7194|
;;;1887   		}
;;;1888   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001c1a  2314              MOVS     r3,#0x14
001c1c  2200              MOVS     r2,#0
001c1e  2164              MOVS     r1,#0x64
001c20  20d2              MOVS     r0,#0xd2
001c22  f7fffffe          BL       mess_send
                  |L1.7206|
;;;1889   	}
;;;1890   
;;;1891   if(vz2_stat==vz2sWRK1)
001c26  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1892   	{
;;;1893   
;;;1894   	if(vz2_stat_old!=vz2_stat)
;;;1895   		{
;;;1896   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001c2a  f8df9258          LDR      r9,|L1.7812|
;;;1897   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1898   		vz2_up_cnt=0L;
;;;1899   
;;;1900   		}
;;;1901   	vz2_wrk_cnt--;
;;;1902   	vz2_up_cnt++;
;;;1903   
;;;1904   	if(vz2_wrk_cnt==0)
;;;1905   		{
;;;1906   		vz2_stat=vz2sWRK2;
;;;1907   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1908   		}
;;;1909   	if(sk_stat[0]==0)
;;;1910   		{
;;;1911   		vz2_stat=vz2sERR2;
;;;1912   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1913   		}
;;;1914   	if(sk_stat[1]==0)
;;;1915   		{
;;;1916   		vz2_stat=vz2sERR3;
;;;1917   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1918   		}
;;;1919   	//if(abs(out_U-FZ_U1)<10)
;;;1920   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1921   		{
;;;1922   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1923   			{
;;;1924   			if(vz2_stat_ph2_cnt)
;;;1925   				{
;;;1926   				vz2_stat_ph2_cnt--;
;;;1927   				if(vz2_stat_ph2_cnt==0)
;;;1928   					{
;;;1929   					vz2_stat=vz2sWRK2;
;;;1930   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1931   					}
;;;1932   				}
;;;1933   			}
;;;1934   		else
;;;1935   			{
;;;1936   			vz2_stat_ph2_cnt=60;
;;;1937   			}
;;;1938   		}
;;;1939   	else
;;;1940   		{
;;;1941   		vz2_stat_ph2_cnt=60;
;;;1942   		}
;;;1943   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1944   		{
;;;1945   		volt_region=0;
;;;1946   		cntrl_stat=1000;
001c2e  f44f7b7a          MOV      r11,#0x3e8
001c32  f1090980          ADD      r9,r9,#0x80           ;1896
001c36  f04f0a0b          MOV      r10,#0xb              ;1906
001c3a  280a              CMP      r0,#0xa               ;1891
001c3c  d17e              BNE      |L1.7484|
001c3e  f8980008          LDRB     r0,[r8,#8]            ;1894  ; vz2_stat_old
001c42  280a              CMP      r0,#0xa               ;1894
001c44  d00a              BEQ      |L1.7260|
001c46  4892              LDR      r0,|L1.7824|
001c48  f44f6161          MOV      r1,#0xe10             ;1896
001c4c  f9b00000          LDRSH    r0,[r0,#0]            ;1896  ; FZ_T1
001c50  fb00f001          MUL      r0,r0,r1              ;1896
001c54  f8c90044          STR      r0,[r9,#0x44]         ;1896  ; vz2_wrk_cnt
001c58  f8c96048          STR      r6,[r9,#0x48]         ;1898  ; vz2_up_cnt
                  |L1.7260|
001c5c  f8d90044          LDR      r0,[r9,#0x44]         ;1901  ; vz2_wrk_cnt
001c60  f1a00001          SUB      r0,r0,#1              ;1901
001c64  f8c90044          STR      r0,[r9,#0x44]         ;1901  ; vz2_wrk_cnt
001c68  f8d91048          LDR      r1,[r9,#0x48]         ;1902  ; vz2_up_cnt
001c6c  f1010101          ADD      r1,r1,#1              ;1902
001c70  f8c91048          STR      r1,[r9,#0x48]         ;1902  ; vz2_up_cnt
001c74  b930              CBNZ     r0,|L1.7300|
001c76  f888a007          STRB     r10,[r8,#7]           ;1906
001c7a  210b              MOVS     r1,#0xb               ;1907
001c7c  f44f70ca          MOV      r0,#0x194             ;1907
001c80  f7fffffe          BL       lc640_write
                  |L1.7300|
001c84  7828              LDRB     r0,[r5,#0]            ;1909  ; sk_stat
001c86  b940              CBNZ     r0,|L1.7322|
001c88  f04f000d          MOV      r0,#0xd               ;1911
001c8c  f8880007          STRB     r0,[r8,#7]            ;1911
001c90  4601              MOV      r1,r0                 ;1912
001c92  f44f70ca          MOV      r0,#0x194             ;1912
001c96  f7fffffe          BL       lc640_write
                  |L1.7322|
001c9a  7868              LDRB     r0,[r5,#1]            ;1914  ; sk_stat
001c9c  b940              CBNZ     r0,|L1.7344|
001c9e  f04f000e          MOV      r0,#0xe               ;1916
001ca2  f8880007          STRB     r0,[r8,#7]            ;1916
001ca6  4601              MOV      r1,r0                 ;1917
001ca8  f44f70ca          MOV      r0,#0x194             ;1917
001cac  f7fffffe          BL       lc640_write
                  |L1.7344|
001cb0  4979              LDR      r1,|L1.7832|
001cb2  4878              LDR      r0,|L1.7828|
001cb4  233c              MOVS     r3,#0x3c              ;1936
001cb6  f9b11000          LDRSH    r1,[r1,#0]            ;1920  ; FZ_U1
001cba  f9b00000          LDRSH    r0,[r0,#0]            ;1920  ; out_U
001cbe  f101021e          ADD      r2,r1,#0x1e           ;1920
001cc2  4290              CMP      r0,r2                 ;1920
001cc4  da20              BGE      |L1.7432|
001cc6  390a              SUBS     r1,r1,#0xa            ;1920
001cc8  4288              CMP      r0,r1                 ;1920
001cca  dd1d              BLE      |L1.7432|
001ccc  4873              LDR      r0,|L1.7836|
001cce  4974              LDR      r1,|L1.7840|
001cd0  f9b00000          LDRSH    r0,[r0,#0]            ;1922  ; Ib_ips_termokompensat
001cd4  f9b11000          LDRSH    r1,[r1,#0]            ;1922  ; FZ_ISW12
001cd8  fb90f0f4          SDIV     r0,r0,r4              ;1922
001cdc  4288              CMP      r0,r1                 ;1922
001cde  da10              BGE      |L1.7426|
001ce0  f9b90000          LDRSH    r0,[r9,#0]            ;1924  ; vz2_stat_ph2_cnt
001ce4  b190              CBZ      r0,|L1.7436|
001ce6  f1a00001          SUB      r0,r0,#1              ;1926
001cea  b200              SXTH     r0,r0                 ;1926
001cec  f8a90000          STRH     r0,[r9,#0]            ;1926
001cf0  b960              CBNZ     r0,|L1.7436|
001cf2  f888a007          STRB     r10,[r8,#7]           ;1929
001cf6  210b              MOVS     r1,#0xb               ;1930
001cf8  f44f70ca          MOV      r0,#0x194             ;1930
001cfc  f7fffffe          BL       lc640_write
001d00  e004              B        |L1.7436|
                  |L1.7426|
001d02  f8a93000          STRH     r3,[r9,#0]            ;1936
001d06  e001              B        |L1.7436|
                  |L1.7432|
001d08  f8a93000          STRH     r3,[r9,#0]            ;1941
                  |L1.7436|
001d0c  f9b8004a          LDRSH    r0,[r8,#0x4a]         ;1943  ; Ibmax
001d10  f8b8104c          LDRH     r1,[r8,#0x4c]         ;1943  ; IZMAX_
001d14  fb90f0f4          SDIV     r0,r0,r4              ;1943
001d18  4288              CMP      r0,r1                 ;1943
001d1a  dd18              BLE      |L1.7502|
001d1c  f9b82032          LDRSH    r2,[r8,#0x32]         ;1943  ; cntrl_stat
001d20  2a14              CMP      r2,#0x14              ;1943
001d22  dc14              BGT      |L1.7502|
001d24  f898202f          LDRB     r2,[r8,#0x2f]         ;1943  ; volt_region
001d28  2a01              CMP      r2,#1                 ;1943
001d2a  d110              BNE      |L1.7502|
001d2c  f8b8207c          LDRH     r2,[r8,#0x7c]         ;1943  ; volt_region_cnt
001d30  b96a              CBNZ     r2,|L1.7502|
001d32  f888602f          STRB     r6,[r8,#0x2f]         ;1945
001d36  f8a8b032          STRH     r11,[r8,#0x32]
;;;1947   		cntrl_stat_new=1000;
001d3a  e000              B        |L1.7486|
                  |L1.7484|
001d3c  e032              B        |L1.7588|
                  |L1.7486|
001d3e  f8a8b048          STRH     r11,[r8,#0x48]
;;;1948   		cntrl_stat_old=1000;
001d42  f8a8b034          STRH     r11,[r8,#0x34]
;;;1949   		volt_region_cnt=110;
001d46  f04f026e          MOV      r2,#0x6e
001d4a  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.7502|
;;;1950   		}
;;;1951   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001d4e  4288              CMP      r0,r1
001d50  da15              BGE      |L1.7550|
001d52  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001d56  4558              CMP      r0,r11
001d58  db11              BLT      |L1.7550|
001d5a  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001d5e  b970              CBNZ     r0,|L1.7550|
001d60  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001d64  b958              CBNZ     r0,|L1.7550|
;;;1952   		{
;;;1953   		volt_region=1;
001d66  f04f0001          MOV      r0,#1
001d6a  f888002f          STRB     r0,[r8,#0x2f]
;;;1954   		cntrl_stat=10;
001d6e  f8a84032          STRH     r4,[r8,#0x32]
;;;1955   		cntrl_stat_new=10;
001d72  f8a84048          STRH     r4,[r8,#0x48]
;;;1956   		cntrl_stat_old=10;
001d76  f8a84034          STRH     r4,[r8,#0x34]
;;;1957   		volt_region_cnt=10;
001d7a  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.7550|
;;;1958   		}
;;;1959   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d7e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001d82  b110              CBZ      r0,|L1.7562|
;;;1960   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001d84  2801              CMP      r0,#1
001d86  d007              BEQ      |L1.7576|
001d88  e00c              B        |L1.7588|
                  |L1.7562|
001d8a  2314              MOVS     r3,#0x14              ;1959
001d8c  2200              MOVS     r2,#0                 ;1959
001d8e  2164              MOVS     r1,#0x64              ;1959
001d90  20d2              MOVS     r0,#0xd2              ;1959
001d92  f7fffffe          BL       mess_send
001d96  e005              B        |L1.7588|
                  |L1.7576|
001d98  2314              MOVS     r3,#0x14
001d9a  2201              MOVS     r2,#1
001d9c  2164              MOVS     r1,#0x64
001d9e  20d2              MOVS     r0,#0xd2
001da0  f7fffffe          BL       mess_send
                  |L1.7588|
;;;1961   	}
;;;1962   
;;;1963   if(vz2_stat==vz2sWRK2)
001da4  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001da8  280b              CMP      r0,#0xb
001daa  d17d              BNE      |L1.7848|
;;;1964   	{
;;;1965   	if(vz2_stat_old!=vz2_stat)
001dac  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001db0  280b              CMP      r0,#0xb
001db2  d008              BEQ      |L1.7622|
;;;1966   		{
;;;1967   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001db4  483b              LDR      r0,|L1.7844|
001db6  f44f6161          MOV      r1,#0xe10
001dba  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001dbe  fb00f001          MUL      r0,r0,r1
001dc2  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
                  |L1.7622|
;;;1968   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1969   		//vz2_up_cnt=0L;
;;;1970   		}
;;;1971   	vz2_wrk_cnt--;
001dc6  f8d90044          LDR      r0,[r9,#0x44]  ; vz2_wrk_cnt
001dca  f1a00001          SUB      r0,r0,#1
001dce  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
;;;1972   	vz2_up_cnt++;
001dd2  f8d91048          LDR      r1,[r9,#0x48]  ; vz2_up_cnt
001dd6  f1010101          ADD      r1,r1,#1
001dda  f8c91048          STR      r1,[r9,#0x48]  ; vz2_up_cnt
;;;1973   
;;;1974   	if(vz2_wrk_cnt==0)
001dde  b958              CBNZ     r0,|L1.7672|
;;;1975   		{
;;;1976   		vz2_stat=vz2sFINE;
001de0  f04f0012          MOV      r0,#0x12
001de4  f8880007          STRB     r0,[r8,#7]
;;;1977   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001de8  4601              MOV      r1,r0
001dea  f44f70ca          MOV      r0,#0x194
001dee  f7fffffe          BL       lc640_write
;;;1978   		fz_mem_hndl(0);
001df2  2000              MOVS     r0,#0
001df4  f7fffffe          BL       fz_mem_hndl
                  |L1.7672|
;;;1979   		}
;;;1980   	if(sk_stat[0]==0)
001df8  7828              LDRB     r0,[r5,#0]  ; sk_stat
001dfa  b940              CBNZ     r0,|L1.7694|
;;;1981   		{
;;;1982   		vz2_stat=vz2sERR5;
001dfc  f04f0010          MOV      r0,#0x10
001e00  f8880007          STRB     r0,[r8,#7]
;;;1983   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001e04  4601              MOV      r1,r0
001e06  f44f70ca          MOV      r0,#0x194
001e0a  f7fffffe          BL       lc640_write
                  |L1.7694|
;;;1984   		}
;;;1985   	if(sk_stat[1]==0)
001e0e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001e10  b940              CBNZ     r0,|L1.7716|
;;;1986   		{
;;;1987   		vz2_stat=vz2sERR6;
001e12  f04f0011          MOV      r0,#0x11
001e16  f8880007          STRB     r0,[r8,#7]
;;;1988   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001e1a  4601              MOV      r1,r0
001e1c  f44f70ca          MOV      r0,#0x194
001e20  f7fffffe          BL       lc640_write
                  |L1.7716|
;;;1989   		}
;;;1990   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001e24  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
001e28  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
001e2c  fb90f0f4          SDIV     r0,r0,r4
001e30  4288              CMP      r0,r1
001e32  dd16              BLE      |L1.7778|
001e34  f9b82032          LDRSH    r2,[r8,#0x32]  ; cntrl_stat
001e38  2a14              CMP      r2,#0x14
001e3a  dc12              BGT      |L1.7778|
001e3c  f898202f          LDRB     r2,[r8,#0x2f]  ; volt_region
001e40  2a01              CMP      r2,#1
001e42  d10e              BNE      |L1.7778|
001e44  f8b8207c          LDRH     r2,[r8,#0x7c]  ; volt_region_cnt
001e48  b95a              CBNZ     r2,|L1.7778|
;;;1991   		{
;;;1992   		volt_region=0;
001e4a  f888602f          STRB     r6,[r8,#0x2f]
;;;1993   		cntrl_stat=1000;
001e4e  f8a8b032          STRH     r11,[r8,#0x32]
;;;1994   		cntrl_stat_new=1000;
001e52  f8a8b048          STRH     r11,[r8,#0x48]
;;;1995   		cntrl_stat_old=1000;
001e56  f8a8b034          STRH     r11,[r8,#0x34]
;;;1996   		volt_region_cnt=110;
001e5a  f04f026e          MOV      r2,#0x6e
001e5e  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.7778|
;;;1997   		}
;;;1998   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001e62  4288              CMP      r0,r1
001e64  da29              BGE      |L1.7866|
001e66  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001e6a  4558              CMP      r0,r11
001e6c  db25              BLT      |L1.7866|
001e6e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001e72  bb10              CBNZ     r0,|L1.7866|
001e74  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001e78  b9f8              CBNZ     r0,|L1.7866|
;;;1999   		{
;;;2000   		volt_region=1;
001e7a  f04f0001          MOV      r0,#1
001e7e  f888002f          STRB     r0,[r8,#0x2f]
;;;2001   		cntrl_stat=10;
001e82  e012              B        |L1.7850|
                  |L1.7812|
                          DCD      ||area_number.25||
                  |L1.7816|
                          DCD      speedChrgBlckStat
                  |L1.7820|
                          DCD      sk_stat
                  |L1.7824|
                          DCD      FZ_T1
                  |L1.7828|
                          DCD      out_U
                  |L1.7832|
                          DCD      FZ_U1
                  |L1.7836|
                          DCD      Ib_ips_termokompensat
                  |L1.7840|
                          DCD      FZ_ISW12
                  |L1.7844|
                          DCD      FZ_T2
                  |L1.7848|
001ea8  e01a              B        |L1.7904|
                  |L1.7850|
001eaa  f8a84032          STRH     r4,[r8,#0x32]
;;;2002   		cntrl_stat_new=10;
001eae  f8a84048          STRH     r4,[r8,#0x48]
;;;2003   		cntrl_stat_old=10;
001eb2  f8a84034          STRH     r4,[r8,#0x34]
;;;2004   		volt_region_cnt=10;
001eb6  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.7866|
;;;2005   		}
;;;2006   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001eba  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001ebe  b110              CBZ      r0,|L1.7878|
;;;2007   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001ec0  2801              CMP      r0,#1
001ec2  d007              BEQ      |L1.7892|
001ec4  e00c              B        |L1.7904|
                  |L1.7878|
001ec6  2314              MOVS     r3,#0x14              ;2006
001ec8  2200              MOVS     r2,#0                 ;2006
001eca  2164              MOVS     r1,#0x64              ;2006
001ecc  20d2              MOVS     r0,#0xd2              ;2006
001ece  f7fffffe          BL       mess_send
001ed2  e005              B        |L1.7904|
                  |L1.7892|
001ed4  2314              MOVS     r3,#0x14
001ed6  2201              MOVS     r2,#1
001ed8  2164              MOVS     r1,#0x64
001eda  20d2              MOVS     r0,#0xd2
001edc  f7fffffe          BL       mess_send
                  |L1.7904|
;;;2008   	}
;;;2009   
;;;2010   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
001ee0  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001ee4  280c              CMP      r0,#0xc
001ee6  d123              BNE      |L1.7984|
;;;2011   	{
;;;2012   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001ee8  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001eec  280c              CMP      r0,#0xc
001eee  d102              BNE      |L1.7926|
001ef0  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001ef4  b908              CBNZ     r0,|L1.7930|
                  |L1.7926|
;;;2013   		{
;;;2014   		vz2_stat_cnt=10;
001ef6  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.7930|
;;;2015   		}
;;;2016   	vz2_stat_cnt--;
001efa  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001efe  f1a00001          SUB      r0,r0,#1
001f02  b200              SXTH     r0,r0
001f04  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2017   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f08  280a              CMP      r0,#0xa
001f0a  d001              BEQ      |L1.7952|
001f0c  2809              CMP      r0,#9
001f0e  d109              BNE      |L1.7972|
                  |L1.7952|
;;;2018   		{
;;;2019   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f10  f2af53f8          ADR      r3,|L1.6428|
001f14  f2af52e4          ADR      r2,|L1.6452|
001f18  f2af51d0          ADR      r1,|L1.6476|
001f1c  a0ff              ADR      r0,|L1.8988|
001f1e  9700              STR      r7,[sp,#0]
001f20  f7fffffe          BL       show_mess
                  |L1.7972|
;;;2020   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2021   					"      ВКЛЮЧЕН       ",
;;;2022   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2023   					5000);
;;;2024   		}
;;;2025   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f24  2314              MOVS     r3,#0x14
001f26  2200              MOVS     r2,#0
001f28  2164              MOVS     r1,#0x64
001f2a  20d2              MOVS     r0,#0xd2
001f2c  f7fffffe          BL       mess_send
                  |L1.7984|
;;;2026   	}
;;;2027   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
001f30  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001f34  280d              CMP      r0,#0xd
001f36  d12d              BNE      |L1.8084|
;;;2028   	{
;;;2029   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001f38  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001f3c  280d              CMP      r0,#0xd
001f3e  d102              BNE      |L1.8006|
001f40  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001f44  b908              CBNZ     r0,|L1.8010|
                  |L1.8006|
;;;2030   		{
;;;2031   		vz2_stat_cnt=10;
001f46  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8010|
;;;2032   		}
;;;2033   	vz2_stat_cnt--;
001f4a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001f4e  f1a00001          SUB      r0,r0,#1
001f52  b200              SXTH     r0,r0
001f54  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2034   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f58  280a              CMP      r0,#0xa
001f5a  d001              BEQ      |L1.8032|
001f5c  2809              CMP      r0,#9
001f5e  d109              BNE      |L1.8052|
                  |L1.8032|
;;;2035   		{
;;;2036   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f60  f6af3308          ADR      r3,|L1.5212|
001f64  f6af22f4          ADR      r2,|L1.5236|
001f68  f6af21e0          ADR      r1,|L1.5260|
001f6c  a0eb              ADR      r0,|L1.8988|
001f6e  9700              STR      r7,[sp,#0]
001f70  f7fffffe          BL       show_mess
                  |L1.8052|
;;;2037   					"    ЗАБЛОКИРОВАН    ",
;;;2038   					"     НЕИСПРАВНА     ",
;;;2039   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2040   					5000);
;;;2041   		}
;;;2042   	if(sk_stat[0]==1)
001f74  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f76  2801              CMP      r0,#1
001f78  d106              BNE      |L1.8072|
;;;2043   		{
;;;2044   		vz2_stat=vz2sWRK1;
001f7a  f8884007          STRB     r4,[r8,#7]
;;;2045   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001f7e  210a              MOVS     r1,#0xa
001f80  f44f70ca          MOV      r0,#0x194
001f84  f7fffffe          BL       lc640_write
                  |L1.8072|
;;;2046   		}
;;;2047   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f88  2314              MOVS     r3,#0x14
001f8a  2200              MOVS     r2,#0
001f8c  2164              MOVS     r1,#0x64
001f8e  20d2              MOVS     r0,#0xd2
001f90  f7fffffe          BL       mess_send
                  |L1.8084|
;;;2048   	}
;;;2049   
;;;2050   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
001f94  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001f98  280e              CMP      r0,#0xe
001f9a  d12c              BNE      |L1.8182|
;;;2051   	{
;;;2052   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001f9c  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001fa0  280e              CMP      r0,#0xe
001fa2  d102              BNE      |L1.8106|
001fa4  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001fa8  b908              CBNZ     r0,|L1.8110|
                  |L1.8106|
;;;2053   		{
;;;2054   		vz2_stat_cnt=10;
001faa  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8110|
;;;2055   		}
;;;2056   	vz2_stat_cnt--;
001fae  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001fb2  f1a00001          SUB      r0,r0,#1
001fb6  b200              SXTH     r0,r0
001fb8  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2057   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001fbc  280a              CMP      r0,#0xa
001fbe  d001              BEQ      |L1.8132|
001fc0  2809              CMP      r0,#9
001fc2  d108              BNE      |L1.8150|
                  |L1.8132|
;;;2058   		{
;;;2059   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001fc4  a3db              ADR      r3,|L1.9012|
001fc6  f2af6234          ADR      r2,|L1.6548|
001fca  f2af6120          ADR      r1,|L1.6572|
001fce  a0d3              ADR      r0,|L1.8988|
001fd0  9700              STR      r7,[sp,#0]
001fd2  f7fffffe          BL       show_mess
                  |L1.8150|
;;;2060   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2061   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2062   					"    ТУМБЛЕРА!!!     ",
;;;2063   					5000);
;;;2064   		}
;;;2065   	if(sk_stat[1]==1)
001fd6  7868              LDRB     r0,[r5,#1]  ; sk_stat
001fd8  2801              CMP      r0,#1
001fda  d106              BNE      |L1.8170|
;;;2066   		{
;;;2067   		vz2_stat=vz2sWRK1;
001fdc  f8884007          STRB     r4,[r8,#7]
;;;2068   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001fe0  210a              MOVS     r1,#0xa
001fe2  f44f70ca          MOV      r0,#0x194
001fe6  f7fffffe          BL       lc640_write
                  |L1.8170|
;;;2069   		}
;;;2070   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001fea  2314              MOVS     r3,#0x14
001fec  2200              MOVS     r2,#0
001fee  2164              MOVS     r1,#0x64
001ff0  20d2              MOVS     r0,#0xd2
001ff2  f7fffffe          BL       mess_send
                  |L1.8182|
;;;2071   	}
;;;2072   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
001ff6  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001ffa  2810              CMP      r0,#0x10
001ffc  d12d              BNE      |L1.8282|
;;;2073   	{
;;;2074   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001ffe  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002002  2810              CMP      r0,#0x10
002004  d102              BNE      |L1.8204|
002006  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00200a  b908              CBNZ     r0,|L1.8208|
                  |L1.8204|
;;;2075   		{
;;;2076   		vz2_stat_cnt=10;
00200c  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8208|
;;;2077   		}
;;;2078   	vz2_stat_cnt--;
002010  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002014  f1a00001          SUB      r0,r0,#1
002018  b200              SXTH     r0,r0
00201a  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2079   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00201e  280a              CMP      r0,#0xa
002020  d001              BEQ      |L1.8230|
002022  2809              CMP      r0,#9
002024  d109              BNE      |L1.8250|
                  |L1.8230|
;;;2080   		{
;;;2081   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002026  f6af33cc          ADR      r3,|L1.5212|
00202a  f6af32b8          ADR      r2,|L1.5236|
00202e  f6af31a4          ADR      r1,|L1.5260|
002032  a0ba              ADR      r0,|L1.8988|
002034  9700              STR      r7,[sp,#0]
002036  f7fffffe          BL       show_mess
                  |L1.8250|
;;;2082   					"    ЗАБЛОКИРОВАН    ",
;;;2083   					"     НЕИСПРАВНА     ",
;;;2084   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2085   					5000);
;;;2086   		}
;;;2087   	if(sk_stat[0]==1)
00203a  7828              LDRB     r0,[r5,#0]  ; sk_stat
00203c  2801              CMP      r0,#1
00203e  d106              BNE      |L1.8270|
;;;2088   		{
;;;2089   		vz2_stat=vz2sWRK2;
002040  f888a007          STRB     r10,[r8,#7]
;;;2090   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002044  210b              MOVS     r1,#0xb
002046  f44f70ca          MOV      r0,#0x194
00204a  f7fffffe          BL       lc640_write
                  |L1.8270|
;;;2091   		}
;;;2092   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00204e  2314              MOVS     r3,#0x14
002050  2200              MOVS     r2,#0
002052  2164              MOVS     r1,#0x64
002054  20d2              MOVS     r0,#0xd2
002056  f7fffffe          BL       mess_send
                  |L1.8282|
;;;2093   	}
;;;2094   
;;;2095   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
00205a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00205e  2811              CMP      r0,#0x11
002060  d12c              BNE      |L1.8380|
;;;2096   	{
;;;2097   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002062  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002066  2811              CMP      r0,#0x11
002068  d102              BNE      |L1.8304|
00206a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00206e  b908              CBNZ     r0,|L1.8308|
                  |L1.8304|
;;;2098   		{
;;;2099   		vz2_stat_cnt=10;
002070  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8308|
;;;2100   		}
;;;2101   	vz2_stat_cnt--;
002074  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002078  f1a00001          SUB      r0,r0,#1
00207c  b200              SXTH     r0,r0
00207e  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2102   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002082  280a              CMP      r0,#0xa
002084  d001              BEQ      |L1.8330|
002086  2809              CMP      r0,#9
002088  d108              BNE      |L1.8348|
                  |L1.8330|
;;;2103   		{
;;;2104   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00208a  a3aa              ADR      r3,|L1.9012|
00208c  f2af62fc          ADR      r2,|L1.6548|
002090  f2af61e8          ADR      r1,|L1.6572|
002094  a0a1              ADR      r0,|L1.8988|
002096  9700              STR      r7,[sp,#0]
002098  f7fffffe          BL       show_mess
                  |L1.8348|
;;;2105   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2106   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2107   					"    ТУМБЛЕРА!!!     ",
;;;2108   					5000);
;;;2109   		}
;;;2110   	if(sk_stat[1]==1)
00209c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00209e  2801              CMP      r0,#1
0020a0  d106              BNE      |L1.8368|
;;;2111   		{
;;;2112   		vz2_stat=vz2sWRK2;
0020a2  f888a007          STRB     r10,[r8,#7]
;;;2113   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0020a6  210b              MOVS     r1,#0xb
0020a8  f44f70ca          MOV      r0,#0x194
0020ac  f7fffffe          BL       lc640_write
                  |L1.8368|
;;;2114   		}
;;;2115   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020b0  2314              MOVS     r3,#0x14
0020b2  2200              MOVS     r2,#0
0020b4  2164              MOVS     r1,#0x64
0020b6  20d2              MOVS     r0,#0xd2
0020b8  f7fffffe          BL       mess_send
                  |L1.8380|
;;;2116   	}
;;;2117   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0020bc  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0020c0  280f              CMP      r0,#0xf
0020c2  d12f              BNE      |L1.8484|
;;;2118   	{
;;;2119   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020c4  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0020c8  280f              CMP      r0,#0xf
0020ca  d102              BNE      |L1.8402|
0020cc  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020d0  b908              CBNZ     r0,|L1.8406|
                  |L1.8402|
;;;2120   		{
;;;2121   		vz2_stat_cnt=10;
0020d2  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8406|
;;;2122   		}
;;;2123   	vz2_stat_cnt--;
0020d6  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020da  f1a00001          SUB      r0,r0,#1
0020de  b200              SXTH     r0,r0
0020e0  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2124   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020e4  280a              CMP      r0,#0xa
0020e6  d001              BEQ      |L1.8428|
0020e8  2809              CMP      r0,#9
0020ea  d10a              BNE      |L1.8450|
                  |L1.8428|
;;;2125   		{
;;;2126   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0020ec  f6af033c          ADR      r3,|L1.6324|
0020f0  f6af0228          ADR      r2,|L1.6348|
0020f4  f6af0114          ADR      r1,|L1.6372|
0020f8  f2af60c0          ADR      r0,|L1.6716|
0020fc  9700              STR      r7,[sp,#0]
0020fe  f7fffffe          BL       show_mess
                  |L1.8450|
;;;2127   					"      ТУМБЛЕР       ",
;;;2128   					"     ВЫСОКОГО       ",
;;;2129   					"    НАПРЯЖЕНИЯ      ",
;;;2130   					5000);
;;;2131   		}
;;;2132   	if(sk_stat[1]==0)
002102  7868              LDRB     r0,[r5,#1]  ; sk_stat
002104  b940              CBNZ     r0,|L1.8472|
;;;2133   		{
;;;2134   		vz2_stat=vz2sOFF;
002106  f8886007          STRB     r6,[r8,#7]
;;;2135   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00210a  2100              MOVS     r1,#0
00210c  f44f70ca          MOV      r0,#0x194
002110  f7fffffe          BL       lc640_write
;;;2136   		vz_stop();
002114  f7fffffe          BL       vz_stop
                  |L1.8472|
;;;2137   
;;;2138   		}
;;;2139   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002118  2314              MOVS     r3,#0x14
00211a  2200              MOVS     r2,#0
00211c  2164              MOVS     r1,#0x64
00211e  20d2              MOVS     r0,#0xd2
002120  f7fffffe          BL       mess_send
                  |L1.8484|
;;;2140   	}
;;;2141   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
002124  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;2142   	{
;;;2143   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2144   		{
;;;2145   		vz2_stat_cnt=10;
;;;2146   		}
;;;2147   	vz2_stat_cnt--;
;;;2148   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2149   		{
;;;2150   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002128  f64037b8          MOV      r7,#0xbb8
00212c  2812              CMP      r0,#0x12              ;2141
00212e  d13d              BNE      |L1.8620|
002130  f8980008          LDRB     r0,[r8,#8]            ;2143  ; vz2_stat_old
002134  2812              CMP      r0,#0x12              ;2143
002136  d102              BNE      |L1.8510|
002138  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2143  ; vz2_stat_cnt
00213c  b908              CBNZ     r0,|L1.8514|
                  |L1.8510|
00213e  f8a8407e          STRH     r4,[r8,#0x7e]         ;2145
                  |L1.8514|
002142  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2147  ; vz2_stat_cnt
002146  f1a00001          SUB      r0,r0,#1              ;2147
00214a  b200              SXTH     r0,r0                 ;2147
00214c  f8a8007e          STRH     r0,[r8,#0x7e]         ;2147
002150  280a              CMP      r0,#0xa               ;2148
002152  d001              BEQ      |L1.8536|
002154  2809              CMP      r0,#9                 ;2148
002156  d109              BNE      |L1.8556|
                  |L1.8536|
002158  f2af7380          ADR      r3,|L1.6620|
00215c  f2af726c          ADR      r2,|L1.6644|
002160  f2af7158          ADR      r1,|L1.6668|
002164  a079              ADR      r0,|L1.9036|
002166  9700              STR      r7,[sp,#0]
002168  f7fffffe          BL       show_mess
                  |L1.8556|
;;;2151   					"       ЗАРЯД        ",
;;;2152   					"      УСПЕШНО       ",
;;;2153   					"     ЗАВЕРШЕН       ",
;;;2154   					3000);
;;;2155   		}
;;;2156   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
00216c  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
002170  2806              CMP      r0,#6
002172  d001              BEQ      |L1.8568|
002174  2805              CMP      r0,#5
002176  d10a              BNE      |L1.8590|
                  |L1.8568|
;;;2157   		{
;;;2158   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002178  f6af03c8          ADR      r3,|L1.6324|
00217c  f6af02b4          ADR      r2,|L1.6348|
002180  f6af01a0          ADR      r1,|L1.6372|
002184  f2af704c          ADR      r0,|L1.6716|
002188  9700              STR      r7,[sp,#0]
00218a  f7fffffe          BL       show_mess
                  |L1.8590|
;;;2159   					"      ТУМБЛЕР       ",
;;;2160   					"     ВЫСОКОГО       ",
;;;2161   					"    НАПРЯЖЕНИЯ      ",
;;;2162   					3000);
;;;2163   		}
;;;2164   	if(sk_stat[1]==0)
00218e  7868              LDRB     r0,[r5,#1]  ; sk_stat
002190  b930              CBNZ     r0,|L1.8608|
;;;2165   		{
;;;2166   		vz2_stat=vz2sOFF;
002192  f8886007          STRB     r6,[r8,#7]
;;;2167   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002196  2100              MOVS     r1,#0
002198  f44f70ca          MOV      r0,#0x194
00219c  f7fffffe          BL       lc640_write
                  |L1.8608|
;;;2168   		}
;;;2169   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0021a0  2314              MOVS     r3,#0x14
0021a2  2200              MOVS     r2,#0
0021a4  2164              MOVS     r1,#0x64
0021a6  20d2              MOVS     r0,#0xd2
0021a8  f7fffffe          BL       mess_send
                  |L1.8620|
;;;2170   	}
;;;2171   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
0021ac  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0021b0  2813              CMP      r0,#0x13
0021b2  d13d              BNE      |L1.8752|
;;;2172   	{
;;;2173   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0021b4  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0021b8  2813              CMP      r0,#0x13
0021ba  d102              BNE      |L1.8642|
0021bc  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0021c0  b908              CBNZ     r0,|L1.8646|
                  |L1.8642|
;;;2174   		{
;;;2175   		vz2_stat_cnt=10;
0021c2  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8646|
;;;2176   		}
;;;2177   	vz2_stat_cnt--;
0021c6  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0021ca  f1a00001          SUB      r0,r0,#1
0021ce  b200              SXTH     r0,r0
0021d0  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2178   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021d4  280a              CMP      r0,#0xa
0021d6  d001              BEQ      |L1.8668|
0021d8  2809              CMP      r0,#9
0021da  d109              BNE      |L1.8688|
                  |L1.8668|
;;;2179   		{
;;;2180   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0021dc  f2af738c          ADR      r3,|L1.6740|
0021e0  f2af7278          ADR      r2,|L1.6764|
0021e4  f2af71dc          ADR      r1,|L1.6668|
0021e8  a058              ADR      r0,|L1.9036|
0021ea  9700              STR      r7,[sp,#0]
0021ec  f7fffffe          BL       show_mess
                  |L1.8688|
;;;2181   					"       ЗАРЯД        ",
;;;2182   					"     ПРЕКРАЩЕН      ",
;;;2183   					"                    ",
;;;2184   					3000);
;;;2185   		}
;;;2186   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0021f0  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
0021f4  2806              CMP      r0,#6
0021f6  d001              BEQ      |L1.8700|
0021f8  2805              CMP      r0,#5
0021fa  d10a              BNE      |L1.8722|
                  |L1.8700|
;;;2187   		{
;;;2188   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0021fc  f6af134c          ADR      r3,|L1.6324|
002200  f6af1238          ADR      r2,|L1.6348|
002204  f6af1124          ADR      r1,|L1.6372|
002208  f2af70d0          ADR      r0,|L1.6716|
00220c  9700              STR      r7,[sp,#0]
00220e  f7fffffe          BL       show_mess
                  |L1.8722|
;;;2189   					"      ТУМБЛЕР       ",
;;;2190   					"     ВЫСОКОГО       ",
;;;2191   					"    НАПРЯЖЕНИЯ      ",
;;;2192   					3000);
;;;2193   		}
;;;2194   	if(sk_stat[1]==0)
002212  7868              LDRB     r0,[r5,#1]  ; sk_stat
002214  b930              CBNZ     r0,|L1.8740|
;;;2195   		{
;;;2196   		vz2_stat=vz2sOFF;
002216  f8886007          STRB     r6,[r8,#7]
;;;2197   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00221a  2100              MOVS     r1,#0
00221c  f44f70ca          MOV      r0,#0x194
002220  f7fffffe          BL       lc640_write
                  |L1.8740|
;;;2198   		}
;;;2199   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002224  2314              MOVS     r3,#0x14
002226  2200              MOVS     r2,#0
002228  2164              MOVS     r1,#0x64
00222a  20d2              MOVS     r0,#0xd2
00222c  f7fffffe          BL       mess_send
                  |L1.8752|
;;;2200   	}
;;;2201   vz2_stat_old=vz2_stat;
002230  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002234  f8880008          STRB     r0,[r8,#8]
;;;2202   
;;;2203   }
002238  e8bd8ff8          POP      {r3-r11,pc}
;;;2204   
                          ENDP

                  vz2_start PROC
;;;2206   //старт уравнительног заряда
;;;2207   char vz2_start(char hour)
00223c  b510              PUSH     {r4,lr}
;;;2208   {          
;;;2209   char out;
;;;2210   out=0;
00223e  f04f0000          MOV      r0,#0
;;;2211   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
002242  4948              LDR      r1,|L1.9060|
002244  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
002248  2a00              CMP      r2,#0
00224a  d110              BNE      |L1.8814|
00224c  4a46              LDR      r2,|L1.9064|
00224e  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
002250  2a01              CMP      r2,#1
002252  d00c              BEQ      |L1.8814|
002254  794a              LDRB     r2,[r1,#5]  ; vz1_stat
002256  2a00              CMP      r2,#0
002258  d109              BNE      |L1.8814|
;;;2212   	{
;;;2213   	if(vz1_stat==vz1sOFF)
;;;2214   		{
;;;2215   		vz2_stat=vz2sSTEP1;
00225a  f04f0001          MOV      r0,#1
00225e  71c8              STRB     r0,[r1,#7]
;;;2216   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
002260  4601              MOV      r1,r0
002262  f44f70ca          MOV      r0,#0x194
002266  f7fffffe          BL       lc640_write
;;;2217   		out=1;
00226a  f04f0001          MOV      r0,#1
                  |L1.8814|
;;;2218   		
;;;2219   		}
;;;2220   /*	spc_stat=spcVZ;
;;;2221   	__ee_spc_stat=spcVZ; 
;;;2222   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2223   	vz_cnt_h=hour;
;;;2224   	__ee_vz_cnt=hour*60;
;;;2225   	if(hour==0)__ee_vz_cnt=30;
;;;2226   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2227   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2228   	vz_cnt_h_=0;
;;;2229   	vz_cnt_s=0;
;;;2230   	vz_cnt_s_=0;
;;;2231   	
;;;2232   		*/
;;;2233   	}
;;;2234   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2235   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2236   //plazma=out;	
;;;2237   return out;
;;;2238   }
00226e  bd10              POP      {r4,pc}
;;;2239   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2240   //стоп формовочного заряда
;;;2241   void vz2_stop(void)
002270  483c              LDR      r0,|L1.9060|
;;;2242   {
;;;2243   if(vz2_stat!=vz2sOFF)
002272  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
002274  2900              CMP      r1,#0
002276  d006              BEQ      |L1.8838|
;;;2244   	{
;;;2245   	vz2_stat=vz2sSTOP;
002278  f04f0113          MOV      r1,#0x13
00227c  71c1              STRB     r1,[r0,#7]
;;;2246   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
00227e  f44f70ca          MOV      r0,#0x194
002282  f7ffbffe          B.W      lc640_write
                  |L1.8838|
;;;2247   	}
;;;2248   }
002286  4770              BX       lr
;;;2249   
                          ENDP

                  kb_init PROC
;;;2250   //-----------------------------------------------
;;;2251   void kb_init(void)
002288  4838              LDR      r0,|L1.9068|
;;;2252   {
;;;2253   main_kb_cnt=(TBAT*60)-60/*120*/;
00228a  f06f013b          MVN      r1,#0x3b
00228e  8800              LDRH     r0,[r0,#0]  ; TBAT
002290  ebc01000          RSB      r0,r0,r0,LSL #4
002294  eb010080          ADD      r0,r1,r0,LSL #2
002298  4932              LDR      r1,|L1.9060|
00229a  f8a10052          STRH     r0,[r1,#0x52]
;;;2254   }
00229e  4770              BX       lr
;;;2255   
                          ENDP

                  kb_hndl PROC
;;;2256   //-----------------------------------------------
;;;2257   void kb_hndl(void)
0022a0  e92d5ff0          PUSH     {r4-r12,lr}
;;;2258   {
;;;2259   
;;;2260   static signed short ibat[2],ibat_[2];
;;;2261   #ifdef UKU_TELECORE2015
;;;2262   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2263   #else 
;;;2264   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
0022a4  f8df80bc          LDR      r8,|L1.9060|
;;;2265   #endif
;;;2266   	{
;;;2267   	main_kb_cnt=0;
;;;2268   	
;;;2269   	kb_start[0]=0;
;;;2270   	kb_start[1]=0;
;;;2271   	kb_start_ips=0;
;;;2272   
;;;2273   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2274   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2275   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2276   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
0022a8  f8dfa0c4          LDR      r10,|L1.9072|
0022ac  2500              MOVS     r5,#0                 ;2264
0022ae  f8b80052          LDRH     r0,[r8,#0x52]         ;2264  ; main_kb_cnt
0022b2  4e30              LDR      r6,|L1.9076|
0022b4  1c40              ADDS     r0,r0,#1              ;2264
0022b6  b201              SXTH     r1,r0                 ;2264
0022b8  482c              LDR      r0,|L1.9068|
0022ba  f8a81052          STRH     r1,[r8,#0x52]         ;2264
0022be  f8df90b8          LDR      r9,|L1.9080|
0022c2  f9b00000          LDRSH    r0,[r0,#0]            ;2264  ; TBAT
;;;2277   #endif	
;;;2278   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2279   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2280   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2281   #endif
;;;2282   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2283    
;;;2284   		{
;;;2285   		kb_start[0]=0;
;;;2286   		kb_start[1]=0;
;;;2287   		kb_start_ips=0;
;;;2288   		}
;;;2289   
;;;2290   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2291   		{
;;;2292   		kb_cnt_1lev=10;
0022c6  270a              MOVS     r7,#0xa
0022c8  ebc01200          RSB      r2,r0,r0,LSL #4       ;2264
0022cc  f04f0b01          MOV      r11,#1                ;2273
0022d0  f1080458          ADD      r4,r8,#0x58           ;2269
0022d4  ebb10f82          CMP      r1,r2,LSL #2          ;2264
0022d8  db7e              BLT      |L1.9176|
0022da  2800              CMP      r0,#0                 ;2264
0022dc  d07c              BEQ      |L1.9176|
0022de  f8a85052          STRH     r5,[r8,#0x52]         ;2267
0022e2  7025              STRB     r5,[r4,#0]            ;2269
0022e4  7065              STRB     r5,[r4,#1]            ;2270
0022e6  f888501d          STRB     r5,[r8,#0x1d]         ;2271
0022ea  4824              LDR      r0,|L1.9084|
0022ec  7800              LDRB     r0,[r0,#0]            ;2273  ; BAT_IS_ON
0022ee  2855              CMP      r0,#0x55              ;2273
0022f0  d111              BNE      |L1.8982|
0022f2  f9b60002          LDRSH    r0,[r6,#2]            ;2273  ; bat
0022f6  2850              CMP      r0,#0x50              ;2273
0022f8  dd0d              BLE      |L1.8982|
0022fa  f9b60008          LDRSH    r0,[r6,#8]            ;2273  ; bat
0022fe  f7fffffe          BL       abs
002302  f9b91000          LDRSH    r1,[r9,#0]            ;2273  ; IKB
002306  4288              CMP      r0,r1                 ;2273
002308  db03              BLT      |L1.8978|
00230a  f896003d          LDRB     r0,[r6,#0x3d]         ;2273  ; bat
00230e  07c0              LSLS     r0,r0,#31             ;2273
002310  d001              BEQ      |L1.8982|
                  |L1.8978|
002312  f884b000          STRB     r11,[r4,#0]           ;2273
                  |L1.8982|
002316  4819              LDR      r0,|L1.9084|
002318  7840              LDRB     r0,[r0,#1]            ;2274  ; BAT_IS_ON
00231a  e031              B        |L1.9088|
                  |L1.8988|
00231c  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
002320  cccec2ce
002324  d7cddbc9
002328  20c7c0  
00232b  d0dfc420          DCB      208,223,196,"  ",0
00232f  2000    
002331  00                DCB      0
002332  00                DCB      0
002333  00                DCB      0
                  |L1.9012|
002334  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
002338  d2d3ccc1
00233c  cbc5d0c0
002340  21212120
002344  20202020
002348  00      
002349  00                DCB      0
00234a  00                DCB      0
00234b  00                DCB      0
                  |L1.9036|
00234c  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
002350  d4ced0cc
002354  cec2ced7
002358  cddbc920
00235c  202020  
00235f  2000              DCB      " ",0
002361  00                DCB      0
002362  00                DCB      0
002363  00                DCB      0
                  |L1.9060|
                          DCD      ||area_number.25||
                  |L1.9064|
                          DCD      speedChrgBlckStat
                  |L1.9068|
                          DCD      TBAT
                  |L1.9072|
                          DCD      Ib_ips_termokompensat
                  |L1.9076|
                          DCD      bat
                  |L1.9080|
                          DCD      IKB
                  |L1.9084|
                          DCD      BAT_IS_ON
                  |L1.9088|
002380  2855              CMP      r0,#0x55              ;2274
002382  d111              BNE      |L1.9128|
002384  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2274  ; bat
002388  2850              CMP      r0,#0x50              ;2274
00238a  dd0d              BLE      |L1.9128|
00238c  f9b60054          LDRSH    r0,[r6,#0x54]         ;2274  ; bat
002390  f7fffffe          BL       abs
002394  f9b91000          LDRSH    r1,[r9,#0]            ;2274  ; IKB
002398  4288              CMP      r0,r1                 ;2274
00239a  db03              BLT      |L1.9124|
00239c  f8960089          LDRB     r0,[r6,#0x89]         ;2274  ; bat
0023a0  07c0              LSLS     r0,r0,#31             ;2274
0023a2  d001              BEQ      |L1.9128|
                  |L1.9124|
0023a4  f884b001          STRB     r11,[r4,#1]           ;2274
                  |L1.9128|
0023a8  48ff              LDR      r0,|L1.10152|
0023aa  7800              LDRB     r0,[r0,#0]            ;2276  ; ips_bat_av_vzvod
0023ac  b970              CBNZ     r0,|L1.9164|
0023ae  f9ba0000          LDRSH    r0,[r10,#0]           ;2276  ; Ib_ips_termokompensat
0023b2  f7fffffe          BL       abs
0023b6  f9b91000          LDRSH    r1,[r9,#0]            ;2276  ; IKB
0023ba  4288              CMP      r0,r1                 ;2276
0023bc  db04              BLT      |L1.9160|
0023be  48fb              LDR      r0,|L1.10156|
0023c0  f890003d          LDRB     r0,[r0,#0x3d]         ;2276  ; bat_ips
0023c4  07c0              LSLS     r0,r0,#31             ;2276
0023c6  d001              BEQ      |L1.9164|
                  |L1.9160|
0023c8  f888b01d          STRB     r11,[r8,#0x1d]        ;2276
                  |L1.9164|
0023cc  48f8              LDR      r0,|L1.10160|
0023ce  7800              LDRB     r0,[r0,#0]            ;2278  ; net_av
0023d0  b9a8              CBNZ     r0,|L1.9214|
0023d2  f898001e          LDRB     r0,[r8,#0x1e]         ;2278  ; num_of_wrks_bps
0023d6  e000              B        |L1.9178|
                  |L1.9176|
0023d8  e021              B        |L1.9246|
                  |L1.9178|
0023da  b180              CBZ      r0,|L1.9214|
0023dc  f8980023          LDRB     r0,[r8,#0x23]         ;2278  ; spc_stat
0023e0  b108              CBZ      r0,|L1.9190|
0023e2  2802              CMP      r0,#2                 ;2278
0023e4  d10b              BNE      |L1.9214|
                  |L1.9190|
0023e6  f8980005          LDRB     r0,[r8,#5]            ;2280  ; vz1_stat
0023ea  f8981007          LDRB     r1,[r8,#7]            ;2280  ; vz2_stat
0023ee  4308              ORRS     r0,r0,r1              ;2280
0023f0  d002              BEQ      |L1.9208|
0023f2  48f0              LDR      r0,|L1.10164|
0023f4  8800              LDRH     r0,[r0,#0]            ;2280  ; SMART_SPC
0023f6  b910              CBNZ     r0,|L1.9214|
                  |L1.9208|
0023f8  48ef              LDR      r0,|L1.10168|
0023fa  7800              LDRB     r0,[r0,#0]            ;2282  ; sp_ch_stat
0023fc  b118              CBZ      r0,|L1.9222|
                  |L1.9214|
0023fe  7025              STRB     r5,[r4,#0]            ;2285
002400  7065              STRB     r5,[r4,#1]            ;2286
002402  f888501d          STRB     r5,[r8,#0x1d]         ;2287
                  |L1.9222|
002406  7820              LDRB     r0,[r4,#0]            ;2290  ; kb_start
002408  2801              CMP      r0,#1                 ;2290
00240a  d01e              BEQ      |L1.9290|
00240c  7860              LDRB     r0,[r4,#1]            ;2290  ; kb_start
00240e  2801              CMP      r0,#1                 ;2290
002410  d01b              BEQ      |L1.9290|
002412  f898001d          LDRB     r0,[r8,#0x1d]         ;2290  ; kb_start_ips
002416  2801              CMP      r0,#1                 ;2290
002418  d017              BEQ      |L1.9290|
;;;2293   		}
;;;2294   	else kb_cnt_1lev=0;
00241a  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9246|
;;;2295   	}
;;;2296   
;;;2297   if(kb_cnt_1lev)
00241e  4641              MOV      r1,r8
002420  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2298   	{
;;;2299   	kb_cnt_1lev--;
;;;2300   
;;;2301   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2302   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2303   
;;;2304   
;;;2305   	if(kb_cnt_1lev==5)
;;;2306   		{
;;;2307   		ibat[0]=abs(bat[0]._Ib);
002424  f8df8394          LDR      r8,|L1.10172|
002428  2800              CMP      r0,#0                 ;2297
00242a  d07e              BEQ      |L1.9514|
00242c  f1a00001          SUB      r0,r0,#1              ;2299
002430  b200              SXTH     r0,r0                 ;2299
002432  468b              MOV      r11,r1                ;2299
002434  f8a10054          STRH     r0,[r1,#0x54]         ;2299
002438  2805              CMP      r0,#5                 ;2301
00243a  dd09              BLE      |L1.9296|
00243c  230f              MOVS     r3,#0xf               ;2301
00243e  221e              MOVS     r2,#0x1e              ;2301
002440  2164              MOVS     r1,#0x64              ;2301
002442  20e1              MOVS     r0,#0xe1              ;2301
002444  f7fffffe          BL       mess_send
002448  e00a              B        |L1.9312|
                  |L1.9290|
00244a  f8a87054          STRH     r7,[r8,#0x54]         ;2292
00244e  e7e6              B        |L1.9246|
                  |L1.9296|
002450  2800              CMP      r0,#0                 ;2302
002452  dd05              BLE      |L1.9312|
002454  230f              MOVS     r3,#0xf               ;2302
002456  221e              MOVS     r2,#0x1e              ;2302
002458  2169              MOVS     r1,#0x69              ;2302
00245a  20e1              MOVS     r0,#0xe1              ;2302
00245c  f7fffffe          BL       mess_send
                  |L1.9312|
002460  f8bb0054          LDRH     r0,[r11,#0x54]        ;2305  ; kb_cnt_1lev
002464  2805              CMP      r0,#5                 ;2305
002466  d111              BNE      |L1.9356|
002468  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00246c  f7fffffe          BL       abs
002470  f8a80000          STRH     r0,[r8,#0]
;;;2308   		ibat[1]=abs(bat[1]._Ib);
002474  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
002478  f7fffffe          BL       abs
00247c  f8a80002          STRH     r0,[r8,#2]
;;;2309   		ibat_ips=abs(Ib_ips_termokompensat);
002480  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
002484  f7fffffe          BL       abs
002488  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9356|
;;;2310   		}
;;;2311   	
;;;2312   	if(kb_cnt_1lev==0)
00248c  48cb              LDR      r0,|L1.10172|
00248e  3894              SUBS     r0,r0,#0x94
002490  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
002494  2800              CMP      r0,#0
002496  d158              BNE      |L1.9546|
;;;2313   		{
;;;2314   		ibat_[0]=abs(bat[0]._Ib);
002498  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00249c  f7fffffe          BL       abs
0024a0  f8dfb318          LDR      r11,|L1.10172|
0024a4  f10b0b04          ADD      r11,r11,#4
0024a8  f8ab0000          STRH     r0,[r11,#0]
;;;2315   		ibat_[1]=abs(bat[1]._Ib);
0024ac  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0024b0  f7fffffe          BL       abs
0024b4  f8ab0002          STRH     r0,[r11,#2]
;;;2316   		ibat_ips_=abs(Ib_ips_termokompensat);
0024b8  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0024bc  f7fffffe          BL       abs
0024c0  f1ab0a98          SUB      r10,r11,#0x98
0024c4  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2317   
;;;2318   		kb_cnt_2lev=0;
0024c8  f8aa5056          STRH     r5,[r10,#0x56]
;;;2319   
;;;2320   
;;;2321   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0024cc  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0024d0  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0024d4  4408              ADD      r0,r0,r1
0024d6  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0024da  4288              CMP      r0,r1
0024dc  da02              BGE      |L1.9444|
0024de  7820              LDRB     r0,[r4,#0]  ; kb_start
0024e0  2801              CMP      r0,#1
0024e2  d034              BEQ      |L1.9550|
                  |L1.9444|
;;;2322   			{
;;;2323   			kb_cnt_2lev=10;  
;;;2324   			}
;;;2325   		else if(bat[0]._Ub>200)
0024e4  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0024e8  28c8              CMP      r0,#0xc8
0024ea  dd04              BLE      |L1.9462|
;;;2326   			{
;;;2327   			kb_start[0]=0;
0024ec  7025              STRB     r5,[r4,#0]
;;;2328   			avar_bat_hndl(0,0);
0024ee  2100              MOVS     r1,#0
0024f0  4608              MOV      r0,r1
0024f2  f7fffffe          BL       avar_bat_hndl
                  |L1.9462|
;;;2329   			}
;;;2330   		
;;;2331   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0024f6  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0024fa  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0024fe  4408              ADD      r0,r0,r1
002500  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002504  4288              CMP      r0,r1
002506  da02              BGE      |L1.9486|
002508  7860              LDRB     r0,[r4,#1]  ; kb_start
00250a  2801              CMP      r0,#1
00250c  d022              BEQ      |L1.9556|
                  |L1.9486|
;;;2332   			{
;;;2333   			kb_cnt_2lev=10;     
;;;2334   			}
;;;2335   		else  if(bat[1]._Ub>200)
00250e  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
002512  28c8              CMP      r0,#0xc8
002514  dd04              BLE      |L1.9504|
;;;2336   			{
;;;2337   			kb_start[1]=0;
002516  7065              STRB     r5,[r4,#1]
;;;2338   			avar_bat_hndl(1,0);
002518  2100              MOVS     r1,#0
00251a  2001              MOVS     r0,#1
00251c  f7fffffe          BL       avar_bat_hndl
                  |L1.9504|
;;;2339   			}
;;;2340   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2341   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
002520  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002524  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
002528  e000              B        |L1.9516|
                  |L1.9514|
00252a  e01c              B        |L1.9574|
                  |L1.9516|
00252c  4408              ADD      r0,r0,r1
00252e  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002532  4288              CMP      r0,r1
002534  da09              BGE      |L1.9546|
002536  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
00253a  2801              CMP      r0,#1
00253c  d105              BNE      |L1.9546|
;;;2342   			{
;;;2343   			if(KB_ALGORITM==1)
00253e  48a0              LDR      r0,|L1.10176|
002540  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
002542  2801              CMP      r0,#1
002544  d009              BEQ      |L1.9562|
;;;2344   				{
;;;2345   				avar_bat_ips_hndl(1);
;;;2346   				kb_start_ips=0;
;;;2347   				}
;;;2348   			else
;;;2349   				{
;;;2350   				kb_cnt_2lev=10;     
002546  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9546|
;;;2351   				}
;;;2352   			}
;;;2353   #endif
;;;2354   		}	
;;;2355   
;;;2356   
;;;2357   	}
;;;2358   else if(kb_cnt_2lev)
;;;2359   	{
;;;2360   	kb_cnt_2lev--;
;;;2361   
;;;2362   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2363   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2364   
;;;2365   
;;;2366   	if(kb_cnt_2lev==5)
;;;2367   		{
;;;2368   		ibat[0]=abs(bat[0]._Ib);
;;;2369   		ibat[1]=abs(bat[1]._Ib);
;;;2370   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2371   		}
;;;2372   	
;;;2373   	if(kb_cnt_2lev==0)
;;;2374   		{
;;;2375   		ibat_[0]=abs(bat[0]._Ib);
;;;2376   		ibat_[1]=abs(bat[1]._Ib);
;;;2377   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2378   
;;;2379   		kb_full_ver=0;
;;;2380   
;;;2381   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2382   			{
;;;2383   			kb_full_ver=1;  
;;;2384   			}
;;;2385   		else if(bat[0]._Ub>200)			
;;;2386   			{
;;;2387   			kb_start[0]=0;
;;;2388   			avar_bat_hndl(0,0);
;;;2389   			}
;;;2390   
;;;2391   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2392   			{
;;;2393   			kb_full_ver=1;     
;;;2394   			}
;;;2395   		else	if(bat[1]._Ub>200)		
;;;2396   			{
;;;2397   			kb_start[1]=0;
;;;2398   			avar_bat_hndl(1,0);
;;;2399   			}
;;;2400   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2401   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2402   			{
;;;2403   			if(KB_ALGORITM==2)
;;;2404   				{
;;;2405   				avar_bat_ips_hndl(1);
;;;2406   				kb_start_ips=0;
;;;2407   				}
;;;2408   			else
;;;2409   				{
;;;2410   				kb_full_ver=1;     
;;;2411   				}
;;;2412   			}
;;;2413   #endif
;;;2414   		}	
;;;2415   	}
;;;2416   
;;;2417   else if(kb_full_ver)
;;;2418   	{
;;;2419   	
;;;2420   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2421   
;;;2422   	if( abs(bat[0]._Ib) > IKB ) 
;;;2423   		{
;;;2424   		if(kb_start[0]==1)
;;;2425   			{
;;;2426   			kb_start[0]=0;
;;;2427   			avar_bat_hndl(0,0);
;;;2428   			}
;;;2429   		}
;;;2430   
;;;2431   	if( abs(bat[1]._Ib) > IKB ) 
;;;2432   		{
;;;2433   		if(kb_start[1]==1)
;;;2434   			{
;;;2435   			kb_start[1]=0;
;;;2436   			avar_bat_hndl(1,0);
;;;2437   			}
;;;2438   		}
;;;2439   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2440   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2441   		{
;;;2442   		if(kb_start_ips==1)
;;;2443   			{
;;;2444   			kb_start_ips=0;
;;;2445   			avar_bat_ips_hndl(0);
;;;2446   			}
;;;2447   		}
;;;2448   #endif
;;;2449   
;;;2450   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2451   		{
;;;2452   		kb_full_ver=0;
;;;2453   		}
;;;2454   
;;;2455   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2456   		{
;;;2457   		kb_full_ver=0;
;;;2458   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2459   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2460   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2461   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2462   #endif
;;;2463   		}
;;;2464   	}
;;;2465   
;;;2466   }
00254a  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9550|
00254e  f8aa7056          STRH     r7,[r10,#0x56]        ;2323
002552  e7d0              B        |L1.9462|
                  |L1.9556|
002554  f8aa7056          STRH     r7,[r10,#0x56]        ;2333
002558  e7e2              B        |L1.9504|
                  |L1.9562|
00255a  2001              MOVS     r0,#1                 ;2345
00255c  f7fffffe          BL       avar_bat_ips_hndl
002560  f88a501d          STRB     r5,[r10,#0x1d]        ;2346
                  |L1.9572|
002564  e7f1              B        |L1.9546|
                  |L1.9574|
002566  f9b10056          LDRSH    r0,[r1,#0x56]         ;2358  ; kb_cnt_2lev
00256a  b3f0              CBZ      r0,|L1.9706|
00256c  f1a00001          SUB      r0,r0,#1              ;2360
002570  b200              SXTH     r0,r0                 ;2360
002572  460f              MOV      r7,r1                 ;2360
002574  f8a10056          STRH     r0,[r1,#0x56]         ;2360
002578  2805              CMP      r0,#5                 ;2362
00257a  dd06              BLE      |L1.9610|
00257c  230f              MOVS     r3,#0xf               ;2362
00257e  22c8              MOVS     r2,#0xc8              ;2362
002580  2164              MOVS     r1,#0x64              ;2362
002582  20e1              MOVS     r0,#0xe1              ;2362
002584  f7fffffe          BL       mess_send
002588  e007              B        |L1.9626|
                  |L1.9610|
00258a  2800              CMP      r0,#0                 ;2363
00258c  dd05              BLE      |L1.9626|
00258e  230f              MOVS     r3,#0xf               ;2363
002590  22c8              MOVS     r2,#0xc8              ;2363
002592  2169              MOVS     r1,#0x69              ;2363
002594  20e1              MOVS     r0,#0xe1              ;2363
002596  f7fffffe          BL       mess_send
                  |L1.9626|
00259a  f8b70056          LDRH     r0,[r7,#0x56]         ;2366  ; kb_cnt_2lev
00259e  2805              CMP      r0,#5                 ;2366
0025a0  d111              BNE      |L1.9670|
0025a2  f9b60008          LDRSH    r0,[r6,#8]            ;2368  ; bat
0025a6  f7fffffe          BL       abs
0025aa  f8a80000          STRH     r0,[r8,#0]            ;2368
0025ae  f9b60054          LDRSH    r0,[r6,#0x54]         ;2369  ; bat
0025b2  f7fffffe          BL       abs
0025b6  f8a80002          STRH     r0,[r8,#2]            ;2369
0025ba  f9ba0000          LDRSH    r0,[r10,#0]           ;2370  ; Ib_ips_termokompensat
0025be  f7fffffe          BL       abs
0025c2  f8a7005a          STRH     r0,[r7,#0x5a]         ;2370
                  |L1.9670|
0025c6  487d              LDR      r0,|L1.10172|
0025c8  3894              SUBS     r0,r0,#0x94           ;2373
0025ca  f8b00056          LDRH     r0,[r0,#0x56]         ;2373  ; kb_cnt_2lev
0025ce  2800              CMP      r0,#0                 ;2373
                  |L1.9680|
0025d0  d1bb              BNE      |L1.9546|
0025d2  f9b60008          LDRSH    r0,[r6,#8]            ;2375  ; bat
0025d6  f7fffffe          BL       abs
0025da  4f78              LDR      r7,|L1.10172|
0025dc  1d3f              ADDS     r7,r7,#4              ;2375
0025de  8038              STRH     r0,[r7,#0]            ;2375
0025e0  f9b60054          LDRSH    r0,[r6,#0x54]         ;2376  ; bat
0025e4  f7fffffe          BL       abs
0025e8  e000              B        |L1.9708|
                  |L1.9706|
0025ea  e055              B        |L1.9880|
                  |L1.9708|
0025ec  8078              STRH     r0,[r7,#2]            ;2376
0025ee  f9ba0000          LDRSH    r0,[r10,#0]           ;2377  ; Ib_ips_termokompensat
0025f2  f7fffffe          BL       abs
0025f6  f1a70a98          SUB      r10,r7,#0x98          ;2377
0025fa  f8aa005c          STRH     r0,[r10,#0x5c]        ;2377
0025fe  f88a501c          STRB     r5,[r10,#0x1c]        ;2379
002602  f9b80000          LDRSH    r0,[r8,#0]            ;2381  ; ibat
002606  f9b71000          LDRSH    r1,[r7,#0]            ;2381  ; ibat_
00260a  4408              ADD      r0,r0,r1              ;2381
00260c  f9b91000          LDRSH    r1,[r9,#0]            ;2381  ; IKB
002610  4288              CMP      r0,r1                 ;2381
002612  da02              BGE      |L1.9754|
002614  7820              LDRB     r0,[r4,#0]            ;2381  ; kb_start
002616  2801              CMP      r0,#1                 ;2381
002618  d032              BEQ      |L1.9856|
                  |L1.9754|
00261a  f9b60002          LDRSH    r0,[r6,#2]            ;2385  ; bat
00261e  28c8              CMP      r0,#0xc8              ;2385
002620  dd04              BLE      |L1.9772|
002622  7025              STRB     r5,[r4,#0]            ;2387
002624  2100              MOVS     r1,#0                 ;2388
002626  4608              MOV      r0,r1                 ;2388
002628  f7fffffe          BL       avar_bat_hndl
                  |L1.9772|
00262c  f9b80002          LDRSH    r0,[r8,#2]            ;2391  ; ibat
002630  f9b71002          LDRSH    r1,[r7,#2]            ;2391  ; ibat_
002634  4408              ADD      r0,r0,r1              ;2391
002636  f9b91000          LDRSH    r1,[r9,#0]            ;2391  ; IKB
00263a  4288              CMP      r0,r1                 ;2391
00263c  da02              BGE      |L1.9796|
00263e  7860              LDRB     r0,[r4,#1]            ;2391  ; kb_start
002640  2801              CMP      r0,#1                 ;2391
002642  d020              BEQ      |L1.9862|
                  |L1.9796|
002644  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2395  ; bat
002648  28c8              CMP      r0,#0xc8              ;2395
00264a  dd04              BLE      |L1.9814|
00264c  7065              STRB     r5,[r4,#1]            ;2397
00264e  2100              MOVS     r1,#0                 ;2398
002650  2001              MOVS     r0,#1                 ;2398
002652  f7fffffe          BL       avar_bat_hndl
                  |L1.9814|
002656  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2401  ; ibat_ips
00265a  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2401  ; ibat_ips_
00265e  4408              ADD      r0,r0,r1              ;2401
002660  f9b91000          LDRSH    r1,[r9,#0]            ;2401  ; IKB
002664  4288              CMP      r0,r1                 ;2401
002666  f6bfaf7d          BGE      |L1.9572|
00266a  f89a001d          LDRB     r0,[r10,#0x1d]        ;2401  ; kb_start_ips
00266e  2801              CMP      r0,#1                 ;2401
002670  d1ae              BNE      |L1.9680|
002672  4853              LDR      r0,|L1.10176|
002674  8800              LDRH     r0,[r0,#0]            ;2403  ; KB_ALGORITM
002676  2802              CMP      r0,#2                 ;2403
002678  d008              BEQ      |L1.9868|
00267a  f88ab01c          STRB     r11,[r10,#0x1c]       ;2410
                  |L1.9854|
00267e  e764              B        |L1.9546|
                  |L1.9856|
002680  f88ab01c          STRB     r11,[r10,#0x1c]       ;2383
002684  e7d2              B        |L1.9772|
                  |L1.9862|
002686  f88ab01c          STRB     r11,[r10,#0x1c]       ;2393
00268a  e7e4              B        |L1.9814|
                  |L1.9868|
00268c  2001              MOVS     r0,#1                 ;2405
00268e  f7fffffe          BL       avar_bat_ips_hndl
002692  f88a501d          STRB     r5,[r10,#0x1d]        ;2406
002696  e758              B        |L1.9546|
                  |L1.9880|
002698  7f08              LDRB     r0,[r1,#0x1c]         ;2417  ; kb_full_ver
00269a  4688              MOV      r8,r1                 ;2417
00269c  2800              CMP      r0,#0                 ;2417
00269e  d0ee              BEQ      |L1.9854|
0026a0  230f              MOVS     r3,#0xf               ;2420
0026a2  2200              MOVS     r2,#0                 ;2420
0026a4  216e              MOVS     r1,#0x6e              ;2420
0026a6  20e1              MOVS     r0,#0xe1              ;2420
0026a8  f7fffffe          BL       mess_send
0026ac  f9b60008          LDRSH    r0,[r6,#8]            ;2422  ; bat
0026b0  f7fffffe          BL       abs
0026b4  f9b91000          LDRSH    r1,[r9,#0]            ;2422  ; IKB
0026b8  4288              CMP      r0,r1                 ;2422
0026ba  dd07              BLE      |L1.9932|
0026bc  7820              LDRB     r0,[r4,#0]            ;2424  ; kb_start
0026be  2801              CMP      r0,#1                 ;2424
0026c0  d104              BNE      |L1.9932|
0026c2  7025              STRB     r5,[r4,#0]            ;2426
0026c4  2100              MOVS     r1,#0                 ;2427
0026c6  4608              MOV      r0,r1                 ;2427
0026c8  f7fffffe          BL       avar_bat_hndl
                  |L1.9932|
0026cc  f9b60054          LDRSH    r0,[r6,#0x54]         ;2431  ; bat
0026d0  f7fffffe          BL       abs
0026d4  f9b91000          LDRSH    r1,[r9,#0]            ;2431  ; IKB
0026d8  4288              CMP      r0,r1                 ;2431
0026da  dd06              BLE      |L1.9962|
0026dc  7860              LDRB     r0,[r4,#1]            ;2433  ; kb_start
0026de  2801              CMP      r0,#1                 ;2433
0026e0  d103              BNE      |L1.9962|
0026e2  7065              STRB     r5,[r4,#1]            ;2435
0026e4  2100              MOVS     r1,#0                 ;2436
0026e6  f7fffffe          BL       avar_bat_hndl
                  |L1.9962|
0026ea  f9ba0000          LDRSH    r0,[r10,#0]           ;2440  ; Ib_ips_termokompensat
0026ee  f7fffffe          BL       abs
0026f2  f9b91000          LDRSH    r1,[r9,#0]            ;2440  ; IKB
0026f6  4288              CMP      r0,r1                 ;2440
0026f8  dd08              BLE      |L1.9996|
0026fa  f898001d          LDRB     r0,[r8,#0x1d]         ;2442  ; kb_start_ips
0026fe  2801              CMP      r0,#1                 ;2442
002700  d104              BNE      |L1.9996|
002702  f888501d          STRB     r5,[r8,#0x1d]         ;2444
002706  2000              MOVS     r0,#0                 ;2445
002708  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.9996|
00270c  7820              LDRB     r0,[r4,#0]            ;2450  ; kb_start
00270e  b930              CBNZ     r0,|L1.10014|
002710  7860              LDRB     r0,[r4,#1]            ;2450  ; kb_start
002712  b920              CBNZ     r0,|L1.10014|
002714  f898001d          LDRB     r0,[r8,#0x1d]         ;2450  ; kb_start_ips
002718  b908              CBNZ     r0,|L1.10014|
00271a  f888501c          STRB     r5,[r8,#0x1c]         ;2452
                  |L1.10014|
00271e  20e6              MOVS     r0,#0xe6              ;2455
002720  f7fffffe          BL       mess_find
002724  b118              CBZ      r0,|L1.10030|
002726  4827              LDR      r0,|L1.10180|
002728  6800              LDR      r0,[r0,#0]            ;2455  ; mess_data
00272a  28e7              CMP      r0,#0xe7              ;2455
00272c  d00a              BEQ      |L1.10052|
                  |L1.10030|
00272e  4826              LDR      r0,|L1.10184|
002730  4926              LDR      r1,|L1.10188|
002732  f9b00000          LDRSH    r0,[r0,#0]            ;2455  ; USIGN
002736  f9b11000          LDRSH    r1,[r1,#0]            ;2455  ; load_U
00273a  eb000080          ADD      r0,r0,r0,LSL #2       ;2455
00273e  ebb10f40          CMP      r1,r0,LSL #1          ;2455
                  |L1.10050|
002742  da9c              BGE      |L1.9854|
                  |L1.10052|
002744  f888501c          STRB     r5,[r8,#0x1c]         ;2457
002748  7820              LDRB     r0,[r4,#0]            ;2458  ; kb_start
00274a  4d21              LDR      r5,|L1.10192|
00274c  2801              CMP      r0,#1                 ;2458
00274e  d10f              BNE      |L1.10096|
002750  f9b90000          LDRSH    r0,[r9,#0]            ;2458  ; IKB
002754  f9b51000          LDRSH    r1,[r5,#0]            ;2458  ; load_I
002758  0040              LSLS     r0,r0,#1              ;2458
00275a  fb90f0f7          SDIV     r0,r0,r7              ;2458
00275e  4288              CMP      r0,r1                 ;2458
002760  da06              BGE      |L1.10096|
002762  f896003d          LDRB     r0,[r6,#0x3d]         ;2458  ; bat
002766  07c0              LSLS     r0,r0,#31             ;2458
002768  d102              BNE      |L1.10096|
00276a  2101              MOVS     r1,#1                 ;2458
00276c  f7fffffe          BL       avar_bat_hndl
                  |L1.10096|
002770  7860              LDRB     r0,[r4,#1]            ;2459  ; kb_start
002772  2801              CMP      r0,#1                 ;2459
002774  d110              BNE      |L1.10136|
002776  f9b90000          LDRSH    r0,[r9,#0]            ;2459  ; IKB
00277a  f9b51000          LDRSH    r1,[r5,#0]            ;2459  ; load_I
00277e  0040              LSLS     r0,r0,#1              ;2459
002780  fb90f0f7          SDIV     r0,r0,r7              ;2459
002784  4288              CMP      r0,r1                 ;2459
002786  da07              BGE      |L1.10136|
002788  f8960089          LDRB     r0,[r6,#0x89]         ;2459  ; bat
00278c  07c0              LSLS     r0,r0,#31             ;2459
00278e  d103              BNE      |L1.10136|
002790  2101              MOVS     r1,#1                 ;2459
002792  4608              MOV      r0,r1                 ;2459
002794  f7fffffe          BL       avar_bat_hndl
                  |L1.10136|
002798  f898001d          LDRB     r0,[r8,#0x1d]         ;2461  ; kb_start_ips
00279c  2801              CMP      r0,#1                 ;2461
                  |L1.10142|
00279e  f47faee1          BNE      |L1.9572|
0027a2  f9b90000          LDRSH    r0,[r9,#0]            ;2461  ; IKB
0027a6  e015              B        |L1.10196|
                  |L1.10152|
                          DCD      ips_bat_av_vzvod
                  |L1.10156|
                          DCD      bat_ips
                  |L1.10160|
                          DCD      net_av
                  |L1.10164|
                          DCD      SMART_SPC
                  |L1.10168|
                          DCD      sp_ch_stat
                  |L1.10172|
                          DCD      ||area_number.25||+0x94
                  |L1.10176|
                          DCD      KB_ALGORITM
                  |L1.10180|
                          DCD      mess_data
                  |L1.10184|
                          DCD      USIGN
                  |L1.10188|
                          DCD      load_U
                  |L1.10192|
                          DCD      load_I
                  |L1.10196|
0027d4  0040              LSLS     r0,r0,#1              ;2461
0027d6  fb90f0f7          SDIV     r0,r0,r7              ;2461
0027da  f9b51000          LDRSH    r1,[r5,#0]            ;2461  ; load_I
0027de  4288              CMP      r0,r1                 ;2461
0027e0  daaf              BGE      |L1.10050|
0027e2  48f9              LDR      r0,|L1.11208|
0027e4  f890003d          LDRB     r0,[r0,#0x3d]         ;2461  ; bat_ips
0027e8  07c0              LSLS     r0,r0,#31             ;2461
0027ea  d1d8              BNE      |L1.10142|
0027ec  e8bd5ff0          POP      {r4-r12,lr}           ;2461
0027f0  2001              MOVS     r0,#1                 ;2461
0027f2  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2467   
                          ENDP

                  samokalibr_hndl PROC
;;;2476   //-----------------------------------------------
;;;2477   void samokalibr_hndl(void)
0027f6  4770              BX       lr
;;;2478   {
;;;2479   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2480   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2481   
;;;2482   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2483   	{
;;;2484   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2485   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2486   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2487   	} 
;;;2488   
;;;2489   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2490   	{
;;;2491   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2492   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2493   	
;;;2494   	}
;;;2495   #endif	 	
;;;2496   }
;;;2497   
                          ENDP

                  ubat_old_drv PROC
;;;2500   //-----------------------------------------------
;;;2501   void ubat_old_drv(void)
0027f8  b510              PUSH     {r4,lr}
;;;2502   {        
;;;2503   bat_u_old_cnt++;
0027fa  4cf4              LDR      r4,|L1.11212|
0027fc  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
0027fe  f1000001          ADD      r0,r0,#1
002802  8020              STRH     r0,[r4,#0]
;;;2504   gran_ring(&bat_u_old_cnt,0,8);
002804  f04f0208          MOV      r2,#8
002808  f04f0100          MOV      r1,#0
00280c  4620              MOV      r0,r4
00280e  f7fffffe          BL       gran_ring
;;;2505   
;;;2506   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002812  49ef              LDR      r1,|L1.11216|
002814  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002818  eb010040          ADD      r0,r1,r0,LSL #1
00281c  884a              LDRH     r2,[r1,#2]  ; bat
00281e  8402              STRH     r2,[r0,#0x20]
;;;2507   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
002820  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
002824  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2508   }
002828  bd10              POP      {r4,pc}
;;;2509   
                          ENDP

                  unet_drv PROC
;;;2510   //-----------------------------------------------
;;;2511   void unet_drv(void)
00282a  e92d41f0          PUSH     {r4-r8,lr}
;;;2512   {
;;;2513   if(net_av_2min_timer)net_av_2min_timer--;
00282e  49e9              LDR      r1,|L1.11220|
002830  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
002834  b110              CBZ      r0,|L1.10300|
002836  f1a00001          SUB      r0,r0,#1
00283a  8008              STRH     r0,[r1,#0]
                  |L1.10300|
;;;2514   
;;;2515   if(net_U<UMN)
00283c  4ee6              LDR      r6,|L1.11224|
00283e  48e7              LDR      r0,|L1.11228|
;;;2516   	{
;;;2517   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002840  4ae7              LDR      r2,|L1.11232|
002842  f9b61000          LDRSH    r1,[r6,#0]            ;2515  ; net_U
002846  f9b03000          LDRSH    r3,[r0,#0]            ;2515  ; UMN
;;;2518   		{
;;;2519   		unet_drv_cnt++;
;;;2520   		if(unet_drv_cnt>=10)
;;;2521   			{
;;;2522   			net_Ustore=net_U;
;;;2523   		 	avar_unet_hndl(1);
;;;2524   			
;;;2525   			}
;;;2526   		}
;;;2527   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
00284a  270a              MOVS     r7,#0xa
00284c  f9920000          LDRSB    r0,[r2,#0]            ;2517
;;;2528   
;;;2529   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2530   	}
;;;2531   
;;;2532   else if(net_U>UMN)
;;;2533   	{                 
;;;2534   	if(unet_drv_cnt)
;;;2535   		{
;;;2536   		unet_drv_cnt--;
;;;2537   		if(unet_drv_cnt<=0)
;;;2538   			{
;;;2539   			avar_unet_hndl(0);
;;;2540   			avar_bps_reset_cnt=10;
002850  4ce4              LDR      r4,|L1.11236|
002852  4299              CMP      r1,r3                 ;2515
002854  da1d              BGE      |L1.10386|
002856  4de4              LDR      r5,|L1.11240|
002858  280a              CMP      r0,#0xa               ;2517
00285a  da0f              BGE      |L1.10364|
00285c  4be3              LDR      r3,|L1.11244|
00285e  f9b33000          LDRSH    r3,[r3,#0]            ;2517  ; main_1Hz_cnt
002862  2b0f              CMP      r3,#0xf               ;2517
002864  dd0a              BLE      |L1.10364|
002866  f1000001          ADD      r0,r0,#1              ;2519
00286a  b240              SXTB     r0,r0                 ;2519
00286c  7010              STRB     r0,[r2,#0]            ;2519
00286e  280a              CMP      r0,#0xa               ;2520
002870  db07              BLT      |L1.10370|
002872  8029              STRH     r1,[r5,#0]            ;2522
002874  2001              MOVS     r0,#1                 ;2523
002876  f7fffffe          BL       avar_unet_hndl
00287a  e002              B        |L1.10370|
                  |L1.10364|
00287c  280a              CMP      r0,#0xa               ;2527
00287e  db00              BLT      |L1.10370|
002880  7017              STRB     r7,[r2,#0]            ;2527
                  |L1.10370|
002882  f9b60000          LDRSH    r0,[r6,#0]            ;2529  ; net_U
002886  f9b51000          LDRSH    r1,[r5,#0]            ;2529  ; net_Ustore
00288a  4288              CMP      r0,r1                 ;2529
00288c  da0e              BGE      |L1.10412|
00288e  8028              STRH     r0,[r5,#0]            ;2529
002890  e00c              B        |L1.10412|
                  |L1.10386|
002892  dd0b              BLE      |L1.10412|
002894  b150              CBZ      r0,|L1.10412|
002896  f1a00001          SUB      r0,r0,#1              ;2536
00289a  b240              SXTB     r0,r0                 ;2536
00289c  7010              STRB     r0,[r2,#0]            ;2536
00289e  2800              CMP      r0,#0                 ;2537
0028a0  dc04              BGT      |L1.10412|
0028a2  2000              MOVS     r0,#0                 ;2539
0028a4  f7fffffe          BL       avar_unet_hndl
0028a8  f8847031          STRB     r7,[r4,#0x31]
                  |L1.10412|
;;;2541   			}
;;;2542   		}
;;;2543   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2544   	
;;;2545   	}
;;;2546   #ifdef UKU_6U
;;;2547   if(net_U>UMAXN)
;;;2548   	{
;;;2549   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
;;;2550   		{
;;;2551   		unet_max_drv_cnt++;
;;;2552   		if(unet_max_drv_cnt>=10)
;;;2553   			{
;;;2554   			net_Ustore=net_U;
;;;2555   		 	avar_unet_hndl(2);
;;;2556   			
;;;2557   			}
;;;2558   		}
;;;2559   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
;;;2560   
;;;2561   	if(net_U>net_Ustore) net_Ustore=net_U;	
;;;2562   	}
;;;2563   
;;;2564   else if(net_U<UMAXN)
;;;2565   	{                 
;;;2566   	if(unet_max_drv_cnt)
;;;2567   		{
;;;2568   		unet_max_drv_cnt--;
;;;2569   		if(unet_max_drv_cnt<=0)
;;;2570   			{
;;;2571   			avar_unet_hndl(0);
;;;2572   			avar_bps_reset_cnt=10;
;;;2573   			}
;;;2574   		}
;;;2575   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2576   	
;;;2577   	}
;;;2578   #endif /*UKU_6U*/
;;;2579   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
0028ac  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
0028b0  2800              CMP      r0,#0
0028b2  d003              BEQ      |L1.10428|
0028b4  f1a00001          SUB      r0,r0,#1
0028b8  f8840031          STRB     r0,[r4,#0x31]
                  |L1.10428|
;;;2580   }
0028bc  e8bd81f0          POP      {r4-r8,pc}
;;;2581   
                          ENDP

                  matemat PROC
;;;2583   //-----------------------------------------------
;;;2584   void matemat(void)
0028c0  e92d4ff0          PUSH     {r4-r11,lr}
;;;2585   {
0028c4  b087              SUB      sp,sp,#0x1c
;;;2586   //signed short temp_SS;
;;;2587   signed long temp_SL/*,temp_SL_*/;
;;;2588   char /*temp,*/i;
;;;2589   //signed short temp_SS;
;;;2590   
;;;2591   #ifdef UKU_MGTS
;;;2592   //напряжение сети
;;;2593   temp_SL=(signed long)net_buff_;
;;;2594   temp_SL*=Kunet;
;;;2595   temp_SL/=110000L;
;;;2596   net_U=(signed short)temp_SL;
;;;2597   #endif
;;;2598   
;;;2599   #ifdef UKU_RSTKM
;;;2600   //напряжение сети
;;;2601   temp_SL=(signed long)net_buff_;
;;;2602   temp_SL*=Kunet;
;;;2603   temp_SL/=110000L;
;;;2604   net_U=(signed short)temp_SL;
;;;2605   #endif
;;;2606   
;;;2607   #ifdef UKU_3U
;;;2608   //напряжение сети
;;;2609   temp_SL=(signed long)net_buff_;
;;;2610   temp_SL*=Kunet;
;;;2611   temp_SL/=36000L;
;;;2612   net_U=(signed short)temp_SL;
;;;2613   #endif
;;;2614   
;;;2615   #ifdef UKU_6U
;;;2616   //напряжение сети
;;;2617   
;;;2618   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2619   	{
;;;2620   
;;;2621   	if(bps[11]._device==dNET_METR)
;;;2622   		{
;;;2623   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2624   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2625   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2626   
;;;2627   		temp_SL=(signed long)net_metr_buff_[0];
;;;2628   		temp_SL*=KunetA;
;;;2629   		temp_SL/=6000L;
;;;2630   		net_Ua=(signed short)temp_SL;
;;;2631   	
;;;2632   		temp_SL=(signed long)net_metr_buff_[1];
;;;2633   		temp_SL*=KunetB;
;;;2634   		temp_SL/=6000L;
;;;2635   		net_Ub=(signed short)temp_SL;
;;;2636   	
;;;2637   		temp_SL=(signed long)net_metr_buff_[2];
;;;2638   		temp_SL*=KunetC;
;;;2639   		temp_SL/=6000L;
;;;2640   		net_Uc=(signed short)temp_SL;
;;;2641   		}
;;;2642   	else
;;;2643   		{
;;;2644   		temp_SL=(signed long)net_buff_;
;;;2645   		temp_SL*=KunetA;
;;;2646   		temp_SL/=110000L;
;;;2647   		net_Ua=(signed short)temp_SL;
;;;2648   	
;;;2649   		temp_SL=(signed long)adc_buff_[3];
;;;2650   		temp_SL*=KunetB;
;;;2651   		temp_SL/=6000L;
;;;2652   		net_Ub=(signed short)temp_SL;
;;;2653   	
;;;2654   		temp_SL=(signed long)adc_buff_[10];
;;;2655   		temp_SL*=KunetC;
;;;2656   		temp_SL/=6000L;
;;;2657   		net_Uc=(signed short)temp_SL;
;;;2658   		}
;;;2659   
;;;2660   	net_U=net_Ua;
;;;2661   	if(net_Ub<net_U)net_U=net_Ub;
;;;2662   	if(net_Uc<net_U)net_U=net_Uc;
;;;2663   	}
;;;2664   else 
;;;2665   	{
;;;2666   	temp_SL=(signed long)net_buff_;
;;;2667   	temp_SL*=Kunet;
;;;2668   	temp_SL/=110000L;
;;;2669   	net_U=(signed short)temp_SL;
;;;2670   	}
;;;2671   
;;;2672   
;;;2673   
;;;2674   
;;;2675   #endif
;;;2676   
;;;2677   #ifdef UKU_GLONASS
;;;2678   //напряжение сети
;;;2679   temp_SL=(signed long)net_buff_;
;;;2680   temp_SL*=Kunet;
;;;2681   temp_SL/=110000L;
;;;2682   net_U=(signed short)temp_SL;
;;;2683   #endif
;;;2684   
;;;2685   #ifdef UKU_KONTUR
;;;2686   //напряжение сети
;;;2687   temp_SL=(signed long)net_buff_;
;;;2688   temp_SL*=Kunet;
;;;2689   temp_SL/=110000L;
;;;2690   net_U=(signed short)temp_SL;
;;;2691   #endif
;;;2692   
;;;2693   #ifdef IPS_SGEP_GAZPROM
;;;2694   //напряжение сети
;;;2695   temp_SL=(signed long)net_buff_;
;;;2696   temp_SL*=Kunet;
;;;2697   temp_SL/=110000L;
;;;2698   net_U=(signed short)temp_SL;
;;;2699   #endif
;;;2700   
;;;2701   #ifdef UKU_220_V2
;;;2702   //напряжение сети
;;;2703   
;;;2704   if(AUSW_MAIN==22033)
;;;2705   	{
;;;2706   	temp_SL=(signed long)net_buff_;
;;;2707   	temp_SL*=KunetA;
;;;2708   	temp_SL/=6000L;
;;;2709   	net_Ua=(signed short)temp_SL;
;;;2710   
;;;2711   	temp_SL=(signed long)adc_buff_[3];
;;;2712   	temp_SL*=KunetB;
;;;2713   	temp_SL/=6000L;
;;;2714   	net_Ub=(signed short)temp_SL;
;;;2715   
;;;2716   	temp_SL=(signed long)adc_buff_[10];
;;;2717   	temp_SL*=KunetC;
;;;2718   	temp_SL/=6000L;
;;;2719   	net_Uc=(signed short)temp_SL;
;;;2720   
;;;2721   	net_U=net_Ua;
;;;2722   	if(net_Ub<net_U)net_U=net_Ub;
;;;2723   	if(net_Uc<net_U)net_U=net_Uc;
;;;2724   	}
;;;2725   else
;;;2726   	{
;;;2727   	temp_SL=(signed long)net_buff_;
;;;2728   	temp_SL*=Kunet;
;;;2729   	temp_SL/=5000L;
;;;2730   	net_U=(signed short)temp_SL;
;;;2731   	}
;;;2732   #endif
;;;2733   
;;;2734   
;;;2735   #ifdef UKU_220
;;;2736   //напряжение сети
;;;2737   
;;;2738   if(AUSW_MAIN==22035)
;;;2739   	{
;;;2740   	temp_SL=(signed long)net_buff_;
;;;2741   	temp_SL*=KunetA;
;;;2742   	temp_SL/=6000L;
;;;2743   	net_Ua=(signed short)temp_SL;
;;;2744   
;;;2745   	temp_SL=(signed long)adc_buff_[3];
;;;2746   	temp_SL*=KunetB;
;;;2747   	temp_SL/=6000L;
;;;2748   	net_Ub=(signed short)temp_SL;
;;;2749   
;;;2750   	temp_SL=(signed long)adc_buff_[10];
;;;2751   	temp_SL*=KunetC;
;;;2752   	temp_SL/=6000L;
;;;2753   	net_Uc=(signed short)temp_SL;
;;;2754   
;;;2755   	net_U=net_Ua;
;;;2756   	if(net_Ub<net_U)net_U=net_Ub;
;;;2757   	if(net_Uc<net_U)net_U=net_Uc;
;;;2758   	}
;;;2759   else
;;;2760   	{
;;;2761   	temp_SL=(signed long)net_buff_;
;;;2762   	temp_SL*=Kunet;
;;;2763   	#ifdef _ACDC_
;;;2764   	temp_SL/=500L;
;;;2765   	#else
;;;2766   	temp_SL/=5000L;
;;;2767   	#endif
;;;2768   	net_U=(signed short)temp_SL;
;;;2769   	
;;;2770   	}
;;;2771   #endif
;;;2772   
;;;2773   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2774   //напряжение сети
;;;2775   
;;;2776   
;;;2777   	if(bps[11]._device==dNET_METR)
0028c6  48ca              LDR      r0,|L1.11248|
;;;2778   		{
;;;2779   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2780   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2781   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2782   
;;;2783   		temp_SL=(signed long)net_metr_buff_[2];
;;;2784   		temp_SL*=KunetA;
0028c8  4bca              LDR      r3,|L1.11252|
;;;2785   		temp_SL/=6000L;
;;;2786   		net_Ua=(signed short)temp_SL;
;;;2787   	
;;;2788   		temp_SL=(signed long)net_metr_buff_[1];
;;;2789   		temp_SL*=KunetB;
0028ca  49cc              LDR      r1,|L1.11260|
0028cc  f890044c          LDRB     r0,[r0,#0x44c]        ;2777  ; bps
;;;2790   		temp_SL/=6000L;
;;;2791   		net_Ub=(signed short)temp_SL;
;;;2792   	
;;;2793   		temp_SL=(signed long)net_metr_buff_[0];
;;;2794   		temp_SL*=KunetC;
0028d0  4acb              LDR      r2,|L1.11264|
0028d2  9006              STR      r0,[sp,#0x18]         ;2784
0028d4  f8dfc320          LDR      r12,|L1.11256|
0028d8  f9b39000          LDRSH    r9,[r3,#0]            ;2784
0028dc  f9b1b000          LDRSH    r11,[r1,#0]           ;2789
0028e0  f9b2a000          LDRSH    r10,[r2,#0]
0028e4  4fc7              LDR      r7,|L1.11268|
;;;2795   		temp_SL/=6000L;
;;;2796   		net_Uc=(signed short)temp_SL;
0028e6  4cc8              LDR      r4,|L1.11272|
;;;2797   
;;;2798   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2799   
;;;2800   		net_U=net_Ua;
;;;2801   		if(net_Ub<net_U)net_U=net_Ub;
;;;2802   		if(net_Uc<net_U)net_U=net_Uc;
;;;2803   		}
;;;2804   	  else if(AUSW_MAIN==22033)
;;;2805   	{
;;;2806   	temp_SL=(signed long)net_buff_;
0028e8  4ebe              LDR      r6,|L1.11236|
0028ea  f2456511          MOV      r5,#0x5611            ;2804
0028ee  2807              CMP      r0,#7                 ;2777
0028f0  d036              BEQ      |L1.10592|
0028f2  4631              MOV      r1,r6
0028f4  f8df8304          LDR      r8,|L1.11260|
0028f8  8f4a              LDRH     r2,[r1,#0x3a]
0028fa  4619              MOV      r1,r3                 ;2784
;;;2807   	temp_SL*=KunetA;
;;;2808   	temp_SL/=4000L;
;;;2809   	net_Ua=(signed short)temp_SL;
;;;2810   
;;;2811   	temp_SL=(signed long)adc_buff_[3];
0028fc  4bc4              LDR      r3,|L1.11280|
0028fe  f9b11000          LDRSH    r1,[r1,#0]            ;2784
002902  f9b88000          LDRSH    r8,[r8,#0]            ;2789
002906  434a              MULS     r2,r1,r2              ;2807
002908  f9b31006          LDRSH    r1,[r3,#6]
00290c  f8df92f0          LDR      r9,|L1.11264|
;;;2812   	temp_SL*=KunetB;
002910  fb01f108          MUL      r1,r1,r8
002914  f2417870          MOV      r8,#0x1770            ;2785
;;;2813   	temp_SL/=6000L;
;;;2814   	net_Ub=(signed short)temp_SL;
;;;2815   
;;;2816   	temp_SL=(signed long)adc_buff_[10];
002918  f9b33014          LDRSH    r3,[r3,#0x14]
00291c  f9b99000          LDRSH    r9,[r9,#0]            ;2794
002920  fb91f1f8          SDIV     r1,r1,r8              ;2813
;;;2817   	temp_SL*=KunetC;
002924  fb03f309          MUL      r3,r3,r9
;;;2818   	temp_SL/=6000L;
002928  fb93f3f8          SDIV     r3,r3,r8
00292c  48b7              LDR      r0,|L1.11276|
00292e  b209              SXTH     r1,r1                 ;2814
;;;2819   	net_Uc=(signed short)temp_SL;
002930  b21b              SXTH     r3,r3
002932  8800              LDRH     r0,[r0,#0]            ;2804  ; AUSW_MAIN
002934  42a8              CMP      r0,r5                 ;2804
002936  d154              BNE      |L1.10722|
002938  f44f607a          MOV      r0,#0xfa0             ;2808
00293c  fb92f0f0          SDIV     r0,r2,r0              ;2808
002940  b200              SXTH     r0,r0                 ;2809
002942  f8ac0000          STRH     r0,[r12,#0]           ;2809
002946  8039              STRH     r1,[r7,#0]            ;2814
002948  8023              STRH     r3,[r4,#0]
;;;2820   
;;;2821   	net_U=net_Ua;
00294a  4aa3              LDR      r2,|L1.11224|
00294c  8010              STRH     r0,[r2,#0]
;;;2822   	if(net_Ub<net_U)net_U=net_Ub;
00294e  4281              CMP      r1,r0
002950  da00              BGE      |L1.10580|
002952  8011              STRH     r1,[r2,#0]
                  |L1.10580|
;;;2823   	if(net_Uc<net_U)net_U=net_Uc;
002954  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002958  4283              CMP      r3,r0
00295a  da00              BGE      |L1.10590|
00295c  8013              STRH     r3,[r2,#0]
                  |L1.10590|
00295e  e07e              B        |L1.10846|
                  |L1.10592|
002960  48ac              LDR      r0,|L1.11284|
002962  4ba0              LDR      r3,|L1.11236|
002964  7801              LDRB     r1,[r0,#0]            ;2779  ; bps
002966  7842              LDRB     r2,[r0,#1]            ;2779  ; bps
002968  f10303e8          ADD      r3,r3,#0xe8           ;2779
00296c  eb012102          ADD      r1,r1,r2,LSL #8       ;2779
002970  fa1ff881          UXTH     r8,r1                 ;2779
002974  f8a38000          STRH     r8,[r3,#0]            ;2779
002978  7881              LDRB     r1,[r0,#2]            ;2780  ; bps
00297a  78c2              LDRB     r2,[r0,#3]            ;2780  ; bps
00297c  eb012102          ADD      r1,r1,r2,LSL #8       ;2780
002980  b289              UXTH     r1,r1                 ;2780
002982  8059              STRH     r1,[r3,#2]            ;2780
002984  7902              LDRB     r2,[r0,#4]            ;2781  ; bps
002986  f890e005          LDRB     lr,[r0,#5]            ;2781  ; bps
00298a  eb02220e          ADD      r2,r2,lr,LSL #8       ;2781
00298e  b292              UXTH     r2,r2                 ;2781
002990  809a              STRH     r2,[r3,#4]            ;2781
002992  fb02f209          MUL      r2,r2,r9              ;2784
002996  f2417370          MOV      r3,#0x1770            ;2785
00299a  fb92f2f3          SDIV     r2,r2,r3              ;2785
00299e  fa0ff982          SXTH     r9,r2                 ;2786
0029a2  f8ac9000          STRH     r9,[r12,#0]           ;2786
0029a6  fb01f10b          MUL      r1,r1,r11             ;2789
0029aa  fb91f1f3          SDIV     r1,r1,r3              ;2790
0029ae  b209              SXTH     r1,r1                 ;2791
0029b0  8039              STRH     r1,[r7,#0]            ;2791
0029b2  fb08f80a          MUL      r8,r8,r10             ;2794
0029b6  fb98f2f3          SDIV     r2,r8,r3              ;2795
0029ba  b212              SXTH     r2,r2                 ;2796
0029bc  8022              STRH     r2,[r4,#0]            ;2796
0029be  7983              LDRB     r3,[r0,#6]            ;2798  ; bps
0029c0  79c0              LDRB     r0,[r0,#7]            ;2798  ; bps
0029c2  eb032000          ADD      r0,r3,r0,LSL #8       ;2798
0029c6  4b94              LDR      r3,|L1.11288|
0029c8  8018              STRH     r0,[r3,#0]            ;2798
0029ca  4883              LDR      r0,|L1.11224|
0029cc  f8a09000          STRH     r9,[r0,#0]            ;2800
0029d0  4549              CMP      r1,r9                 ;2801
0029d2  da00              BGE      |L1.10710|
0029d4  8001              STRH     r1,[r0,#0]            ;2801
                  |L1.10710|
0029d6  f9b01000          LDRSH    r1,[r0,#0]            ;2802  ; net_U
0029da  428a              CMP      r2,r1                 ;2802
0029dc  da3f              BGE      |L1.10846|
0029de  8002              STRH     r2,[r0,#0]            ;2802
0029e0  e03d              B        |L1.10846|
                  |L1.10722|
;;;2824   	}
;;;2825   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
0029e2  f5a048ac          SUB      r8,r0,#0x5600
0029e6  f1b8082f          SUBS     r8,r8,#0x2f
0029ea  d00b              BEQ      |L1.10756|
0029ec  f1180828          ADDS     r8,r8,#0x28
0029f0  d008              BEQ      |L1.10756|
0029f2  f1b80814          SUBS     r8,r8,#0x14
0029f6  d005              BEQ      |L1.10756|
0029f8  f1b80801          SUBS     r8,r8,#1
0029fc  d002              BEQ      |L1.10756|
0029fe  f118081a          ADDS     r8,r8,#0x1a
002a02  d113              BNE      |L1.10796|
                  |L1.10756|
;;;2826   	{
;;;2827   	temp_SL=(signed long)net_buff_;
;;;2828   	temp_SL*=KunetA;
;;;2829   	temp_SL/=40000L;
002a04  f6494040          MOV      r0,#0x9c40
002a08  fb92f0f0          SDIV     r0,r2,r0
;;;2830   	net_Ua=(signed short)temp_SL;
002a0c  b200              SXTH     r0,r0
002a0e  f8ac0000          STRH     r0,[r12,#0]
;;;2831   
;;;2832   	temp_SL=(signed long)adc_buff_[3];
;;;2833   	temp_SL*=KunetB;
;;;2834   	temp_SL/=6000L;
;;;2835   	net_Ub=(signed short)temp_SL;
002a12  8039              STRH     r1,[r7,#0]
;;;2836   
;;;2837   	temp_SL=(signed long)adc_buff_[10];
;;;2838   	temp_SL*=KunetC;
;;;2839   	temp_SL/=6000L;
;;;2840   	net_Uc=(signed short)temp_SL;
002a14  8023              STRH     r3,[r4,#0]
;;;2841   
;;;2842   	net_U=net_Ua;
002a16  4a70              LDR      r2,|L1.11224|
002a18  8010              STRH     r0,[r2,#0]
;;;2843   	if(net_Ub<net_U)net_U=net_Ub;
002a1a  4281              CMP      r1,r0
002a1c  da00              BGE      |L1.10784|
002a1e  8011              STRH     r1,[r2,#0]
                  |L1.10784|
;;;2844   	if(net_Uc<net_U)net_U=net_Uc;
002a20  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002a24  4283              CMP      r3,r0
002a26  da1a              BGE      |L1.10846|
002a28  8013              STRH     r3,[r2,#0]
002a2a  e018              B        |L1.10846|
                  |L1.10796|
;;;2845   	}
;;;2846   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2847   	{
;;;2848   	temp_SL=(signed long)net_buff_;
;;;2849   	temp_SL*=Kunet;
002a2c  497b              LDR      r1,|L1.11292|
002a2e  f5a043aa          SUB      r3,r0,#0x5500         ;2846
002a32  f9b12000          LDRSH    r2,[r1,#0]
002a36  496b              LDR      r1,|L1.11236|
002a38  8f49              LDRH     r1,[r1,#0x3a]         ;2806
002a3a  4351              MULS     r1,r2,r1
002a3c  3bfa              SUBS     r3,r3,#0xfa           ;2846
002a3e  d001              BEQ      |L1.10820|
002a40  1e5a              SUBS     r2,r3,#1              ;2846
002a42  d106              BNE      |L1.10834|
                  |L1.10820|
;;;2850   	temp_SL/=35000L;
002a44  f64800b8          MOV      r0,#0x88b8
002a48  fb91f0f0          SDIV     r0,r1,r0
;;;2851   	net_U=(signed short)temp_SL;
002a4c  4962              LDR      r1,|L1.11224|
002a4e  8008              STRH     r0,[r1,#0]
002a50  e005              B        |L1.10846|
                  |L1.10834|
;;;2852   	
;;;2853   	}
;;;2854   else
;;;2855   	{
;;;2856   	temp_SL=(signed long)net_buff_;
;;;2857   	temp_SL*=Kunet;
;;;2858   	#ifdef _ACDC_
;;;2859   	temp_SL/=500L;
002a52  f44f70fa          MOV      r0,#0x1f4
002a56  fb91f0f0          SDIV     r0,r1,r0
;;;2860   	#else
;;;2861   	temp_SL/=5000L;
;;;2862   	#endif
;;;2863   	net_U=(signed short)temp_SL;
002a5a  495f              LDR      r1,|L1.11224|
002a5c  8008              STRH     r0,[r1,#0]
                  |L1.10846|
;;;2864   	
;;;2865   	}
;;;2866   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002a5e  9806              LDR      r0,[sp,#0x18]
002a60  2807              CMP      r0,#7
002a62  d003              BEQ      |L1.10860|
002a64  486e              LDR      r0,|L1.11296|
002a66  8801              LDRH     r1,[r0,#0]  ; net_F
002a68  486b              LDR      r0,|L1.11288|
002a6a  8001              STRH     r1,[r0,#0]
                  |L1.10860|
;;;2867   #endif
;;;2868   
;;;2869   #ifdef UKU_TELECORE2015
;;;2870   //напряжение сети
;;;2871   temp_SL=(signed long)net_buff_;
;;;2872   temp_SL*=Kunet;
;;;2873   temp_SL/=110000L;
;;;2874   net_U=(signed short)temp_SL;
;;;2875   #endif
;;;2876   
;;;2877   #ifdef UKU_TELECORE2017
;;;2878   //напряжение сети
;;;2879   temp_SL=(signed long)net_buff_;
;;;2880   temp_SL*=Kunet;
;;;2881   temp_SL/=110000L;
;;;2882   net_U=(signed short)temp_SL;
;;;2883   #endif
;;;2884   
;;;2885   //Напряжения батарей
;;;2886   temp_SL=(signed long)adc_buff_[0];
002a6c  4f68              LDR      r7,|L1.11280|
002a6e  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2887   temp_SL*=Kubat[0];
002a72  496c              LDR      r1,|L1.11300|
002a74  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
002a78  4350              MULS     r0,r2,r0
;;;2888   temp_SL/=2000L;
002a7a  f44f68fa          MOV      r8,#0x7d0
002a7e  fb90f0f8          SDIV     r0,r0,r8
;;;2889   bat[0]._Ub=(signed short)temp_SL;
002a82  4c53              LDR      r4,|L1.11216|
002a84  8060              STRH     r0,[r4,#2]
;;;2890   
;;;2891   #ifdef UKU_220
;;;2892   //Напряжения батарей
;;;2893   temp_SL=(signed long)adc_buff_[0];
;;;2894   temp_SL*=Kubat[0];
;;;2895   temp_SL/=400L;
;;;2896   bat[0]._Ub=(signed short)temp_SL;
;;;2897   #endif
;;;2898   
;;;2899   #ifdef UKU_220_V2
;;;2900   //Напряжения батарей
;;;2901   temp_SL=(signed long)adc_buff_[0];
;;;2902   temp_SL*=Kubat[0];
;;;2903   temp_SL/=400L;
;;;2904   bat[0]._Ub=(signed short)temp_SL;
;;;2905   #endif
;;;2906   
;;;2907   //adc_buff_[4]=300;
;;;2908   
;;;2909   temp_SL=(signed long)adc_buff_[4];
002a86  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2910   temp_SL*=Kubatm[0];
002a8a  4a67              LDR      r2,|L1.11304|
002a8c  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
002a90  fb00f003          MUL      r0,r0,r3
;;;2911   temp_SL/=700L;
002a94  f44f732f          MOV      r3,#0x2bc
002a98  fb90f0f3          SDIV     r0,r0,r3
;;;2912   bat[0]._Ubm=(signed short)temp_SL;
002a9c  80a0              STRH     r0,[r4,#4]
;;;2913   
;;;2914   #ifdef UKU_KONTUR
;;;2915   temp_SL=(signed long)adc_buff_[4];
;;;2916   temp_SL*=Kubatm[0];
;;;2917   temp_SL/=2000L;
;;;2918   bat[0]._Ubm=(signed short)temp_SL;
;;;2919   #endif
;;;2920   
;;;2921   #ifdef UKU_6U
;;;2922   temp_SL=(signed long)adc_buff_[4];
;;;2923   temp_SL*=Kubatm[0];
;;;2924   temp_SL/=2000L;
;;;2925   bat[0]._Ubm=(signed short)temp_SL;
;;;2926   #endif
;;;2927   
;;;2928   temp_SL=(signed long)adc_buff_[12];
002a9e  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2929   temp_SL*=Kubat[1];
002aa2  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002aa6  fb01f100          MUL      r1,r1,r0
;;;2930   temp_SL/=2000L;
002aaa  fb91f0f8          SDIV     r0,r1,r8
;;;2931   bat[1]._Ub=(signed short)temp_SL;
002aae  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2932   
;;;2933   #ifdef UKU_220
;;;2934   temp_SL=(signed long)adc_buff_[12];
;;;2935   temp_SL*=Kubat[1];
;;;2936   temp_SL/=400L;
;;;2937   bat[1]._Ub=(signed short)temp_SL;
;;;2938   #endif
;;;2939   
;;;2940   #ifdef UKU_220_V2
;;;2941   temp_SL=(signed long)adc_buff_[12];
;;;2942   temp_SL*=Kubat[1];
;;;2943   temp_SL/=400L;
;;;2944   bat[1]._Ub=(signed short)temp_SL;
;;;2945   #endif
;;;2946   
;;;2947   //adc_buff_[1]=300;
;;;2948   
;;;2949   temp_SL=(signed long)adc_buff_[1];
002ab2  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2950   temp_SL*=Kubatm[1];
002ab6  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002aba  fb00f001          MUL      r0,r0,r1
;;;2951   temp_SL/=700L;
002abe  fb90f0f3          SDIV     r0,r0,r3
;;;2952   bat[1]._Ubm=(signed short)temp_SL;
002ac2  f8a40050          STRH     r0,[r4,#0x50]
;;;2953   #ifdef UKU_KONTUR
;;;2954   temp_SL=(signed long)adc_buff_[1];
;;;2955   temp_SL*=Kubatm[1];
;;;2956   temp_SL/=2000L;
;;;2957   bat[1]._Ubm=(signed short)temp_SL;
;;;2958   #endif
;;;2959   #ifdef UKU_6U
;;;2960   temp_SL=(signed long)adc_buff_[1];
;;;2961   temp_SL*=Kubatm[1];
;;;2962   temp_SL/=2000L;
;;;2963   bat[1]._Ubm=(signed short)temp_SL;
;;;2964   #endif
;;;2965   
;;;2966   #ifdef UKU_TELECORE2015
;;;2967   temp_SL=(signed long)adc_buff_[2];
;;;2968   temp_SL*=Kubat[0];
;;;2969   temp_SL/=2000L;
;;;2970   bat[0]._Ub=(signed short)temp_SL;
;;;2971   #endif
;;;2972   
;;;2973   /*
;;;2974   //Токи батарей
;;;2975   if(!mess_find_unvol(MESS2MATEMAT))
;;;2976   	{
;;;2977   	temp_SL=(signed long)ad7705_buff_[0];
;;;2978   	temp_SL-=(signed long)Kibat0[0];
;;;2979   	temp_SL*=(signed long)Kibat1[0];
;;;2980   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2981   	else temp_SL/=1000L;
;;;2982   	bat[0]._Ib=(signed short)temp_SL;
;;;2983   
;;;2984   	temp_SL=(signed long)ad7705_buff_[1];
;;;2985   	temp_SL-=(signed long)Kibat0[1];
;;;2986   	temp_SL*=(signed long)Kibat1[1];
;;;2987   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2988   	else temp_SL/=1000L;
;;;2989   	bat[1]._Ib=(signed short)temp_SL;
;;;2990   	}
;;;2991   */
;;;2992   
;;;2993   
;;;2994   //Токи батарей
;;;2995   if(!mess_find_unvol(MESS2MATEMAT))
002ac6  f04f00dc          MOV      r0,#0xdc
002aca  f7fffffe          BL       mess_find_unvol
;;;2996   	{
;;;2997   	temp_SL=(signed long)ad7705_buff_[0];
;;;2998   	temp_SL-=(signed long)Kibat0[0];
;;;2999   	temp_SL*=(signed long)Kibat1[0];
;;;3000   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3001   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002ace  f2456c13          MOV      r12,#0x5613
002ad2  bbe8              CBNZ     r0,|L1.11088|
002ad4  f8dfa154          LDR      r10,|L1.11308|
002ad8  f8ba0000          LDRH     r0,[r10,#0]           ;2997  ; ad7705_buff_
002adc  f8dfb150          LDR      r11,|L1.11312|
002ae0  f8bb1000          LDRH     r1,[r11,#0]           ;2998  ; Kibat0
002ae4  eba00001          SUB      r0,r0,r1              ;2998
002ae8  4a52              LDR      r2,|L1.11316|
002aea  f9b21000          LDRSH    r1,[r2,#0]            ;2999  ; Kibat1
002aee  fb01f100          MUL      r1,r1,r0              ;2999
002af2  4846              LDR      r0,|L1.11276|
002af4  f6456338          MOV      r3,#0x5e38            ;3000
002af8  f6456992          MOV      r9,#0x5e92            ;3000
002afc  8800              LDRH     r0,[r0,#0]            ;3000  ; AUSW_MAIN
002afe  4298              CMP      r0,r3                 ;3000
002b00  d001              BEQ      |L1.11014|
002b02  4548              CMP      r0,r9                 ;3000
002b04  d104              BNE      |L1.11024|
                  |L1.11014|
002b06  f44f7e96          MOV      lr,#0x12c             ;3000
002b0a  fb91f1fe          SDIV     r1,r1,lr              ;3000
002b0e  e00f              B        |L1.11056|
                  |L1.11024|
002b10  f5a04ea8          SUB      lr,r0,#0x5400
002b14  f5be7efd          SUBS     lr,lr,#0x1fa
002b18  d003              BEQ      |L1.11042|
002b1a  4560              CMP      r0,r12
002b1c  d001              BEQ      |L1.11042|
002b1e  42a8              CMP      r0,r5
002b20  d102              BNE      |L1.11048|
                  |L1.11042|
002b22  fb91f1f8          SDIV     r1,r1,r8
002b26  e003              B        |L1.11056|
                  |L1.11048|
;;;3002   	else temp_SL/=1000L;
002b28  f44f7e7a          MOV      lr,#0x3e8
002b2c  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11056|
;;;3003   	#ifdef UKU_TELECORE2015
;;;3004   	temp_SL/=2L;
;;;3005   	//temp_SL=-temp_SL;
;;;3006   	#endif
;;;3007   	//#ifdef UKU_TELECORE2017
;;;3008   	//temp_SL/=-2L;
;;;3009   	//temp_SL=-temp_SL;
;;;3010   	//#endif
;;;3011   	bat[0]._Ib=(signed short)temp_SL;
002b30  8121              STRH     r1,[r4,#8]
;;;3012   
;;;3013   	temp_SL=(signed long)ad7705_buff_[1];
002b32  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3014   	temp_SL-=(signed long)Kibat0[1];
002b36  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002b3a  eba10a0a          SUB      r10,r1,r10
;;;3015   	temp_SL*=(signed long)Kibat1[1];
002b3e  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002b42  fb01f10a          MUL      r1,r1,r10
;;;3016   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002b46  4298              CMP      r0,r3
002b48  d001              BEQ      |L1.11086|
002b4a  4548              CMP      r0,r9
002b4c  d106              BNE      |L1.11100|
                  |L1.11086|
002b4e  e000              B        |L1.11090|
                  |L1.11088|
002b50  e015              B        |L1.11134|
                  |L1.11090|
002b52  f44f7096          MOV      r0,#0x12c
002b56  fb91f0f0          SDIV     r0,r1,r0
002b5a  e00e              B        |L1.11130|
                  |L1.11100|
;;;3017   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002b5c  f5a042aa          SUB      r2,r0,#0x5500
002b60  3afa              SUBS     r2,r2,#0xfa
002b62  d003              BEQ      |L1.11116|
002b64  4560              CMP      r0,r12
002b66  d001              BEQ      |L1.11116|
002b68  42a8              CMP      r0,r5
002b6a  d102              BNE      |L1.11122|
                  |L1.11116|
002b6c  fb91f0f8          SDIV     r0,r1,r8
002b70  e003              B        |L1.11130|
                  |L1.11122|
;;;3018   	else temp_SL/=1000L;
002b72  f44f707a          MOV      r0,#0x3e8
002b76  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11130|
;;;3019   	bat[1]._Ib=(signed short)temp_SL;
002b7a  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.11134|
;;;3020   	}
;;;3021   
;;;3022   
;;;3023   
;;;3024   
;;;3025   
;;;3026   //Температуры батарей
;;;3027   
;;;3028   #ifdef UKU_KONTUR
;;;3029   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3030   else bat[0]._nd=1;
;;;3031   temp_SL=(signed long)adc_buff_[6];
;;;3032   temp_SL*=Ktbat[0];
;;;3033   temp_SL/=20000L;
;;;3034   temp_SL-=273L;
;;;3035   bat[0]._Tb=(signed short)temp_SL;
;;;3036   #else
;;;3037   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002b7e  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
002b82  f6403ab7          MOV      r10,#0xbb7
002b86  4681              MOV      r9,r0
002b88  f2a03021          SUB      r0,r0,#0x321
;;;3038   else bat[0]._nd=1;
002b8c  2201              MOVS     r2,#1
002b8e  2300              MOVS     r3,#0                 ;3037
002b90  9005              STR      r0,[sp,#0x14]         ;3037
002b92  4550              CMP      r0,r10                ;3037
002b94  d201              BCS      |L1.11162|
002b96  7323              STRB     r3,[r4,#0xc]          ;3037
002b98  e000              B        |L1.11164|
                  |L1.11162|
002b9a  7322              STRB     r2,[r4,#0xc]
                  |L1.11164|
;;;3039   temp_SL=(signed long)adc_buff_[6];
;;;3040   temp_SL*=Ktbat[0];
002b9c  4926              LDR      r1,|L1.11320|
002b9e  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
002ba2  fb00f009          MUL      r0,r0,r9
;;;3041   temp_SL/=20000L;
002ba6  f6446e20          MOV      lr,#0x4e20
002baa  fb90f0fe          SDIV     r0,r0,lr
;;;3042   temp_SL-=273L;
002bae  f2a01011          SUB      r0,r0,#0x111
;;;3043   bat[0]._Tb=(signed short)temp_SL;
002bb2  8160              STRH     r0,[r4,#0xa]
;;;3044   #endif
;;;3045   
;;;3046   #ifdef UKU_KONTUR
;;;3047   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3048   else bat[1]._nd=1;
;;;3049   temp_SL=(signed long)adc_buff_[7];
;;;3050   temp_SL*=Ktbat[1];
;;;3051   temp_SL/=20000L;
;;;3052   temp_SL-=273L;
;;;3053   bat[1]._Tb=(signed short)temp_SL;
;;;3054   #else
;;;3055   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002bb4  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
002bb8  f2a03b21          SUB      r11,r0,#0x321
002bbc  45d3              CMP      r11,r10
002bbe  d23d              BCS      |L1.11324|
002bc0  f8843058          STRB     r3,[r4,#0x58]
002bc4  e03c              B        |L1.11328|
002bc6  0000              DCW      0x0000
                  |L1.11208|
                          DCD      bat_ips
                  |L1.11212|
                          DCD      bat_u_old_cnt
                  |L1.11216|
                          DCD      bat
                  |L1.11220|
                          DCD      net_av_2min_timer
                  |L1.11224|
                          DCD      net_U
                  |L1.11228|
                          DCD      UMN
                  |L1.11232|
                          DCD      unet_drv_cnt
                  |L1.11236|
                          DCD      ||area_number.25||
                  |L1.11240|
                          DCD      net_Ustore
                  |L1.11244|
                          DCD      main_1Hz_cnt
                  |L1.11248|
                          DCD      bps
                  |L1.11252|
                          DCD      KunetA
                  |L1.11256|
                          DCD      net_Ua
                  |L1.11260|
                          DCD      KunetB
                  |L1.11264|
                          DCD      KunetC
                  |L1.11268|
                          DCD      net_Ub
                  |L1.11272|
                          DCD      net_Uc
                  |L1.11276|
                          DCD      AUSW_MAIN
                  |L1.11280|
                          DCD      ||.bss||+0x40c
                  |L1.11284|
                          DCD      bps+0x452
                  |L1.11288|
                          DCD      net_F3
                  |L1.11292|
                          DCD      Kunet
                  |L1.11296|
                          DCD      net_F
                  |L1.11300|
                          DCD      Kubat
                  |L1.11304|
                          DCD      Kubatm
                  |L1.11308|
                          DCD      ad7705_buff_
                  |L1.11312|
                          DCD      Kibat0
                  |L1.11316|
                          DCD      Kibat1
                  |L1.11320|
                          DCD      Ktbat
                  |L1.11324|
;;;3056   else bat[1]._nd=1;
002c3c  f8842058          STRB     r2,[r4,#0x58]
                  |L1.11328|
;;;3057   temp_SL=(signed long)adc_buff_[7];
;;;3058   temp_SL*=Ktbat[1];
002c40  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
002c44  4341              MULS     r1,r0,r1
;;;3059   temp_SL/=20000L;
002c46  f6446020          MOV      r0,#0x4e20
002c4a  fb91f0f0          SDIV     r0,r1,r0
;;;3060   temp_SL-=273L;
002c4e  f2a01011          SUB      r0,r0,#0x111
;;;3061   bat[1]._Tb=(signed short)temp_SL;
002c52  49ff              LDR      r1,|L1.12368|
002c54  f8a10056          STRH     r0,[r1,#0x56]
;;;3062   #endif
;;;3063   
;;;3064   #ifdef UKU_6U
;;;3065   
;;;3066   if(NUMMAKB==2)
;;;3067   	{
;;;3068   	if(makb[0]._cnt<5)
;;;3069   		{
;;;3070   		if(makb[0]._T_nd[0]==0)
;;;3071   			{
;;;3072   			bat[0]._Tb=makb[0]._T[0];
;;;3073   			bat[0]._nd=0;
;;;3074   			}
;;;3075   		}
;;;3076   
;;;3077   	if(makb[1]._cnt<5)
;;;3078   		{
;;;3079   		if(makb[1]._T_nd[0]==0)
;;;3080   			{
;;;3081   			bat[1]._Tb=makb[1]._T[0];
;;;3082   			bat[1]._nd=0;
;;;3083   			}
;;;3084   		}
;;;3085   
;;;3086   	}
;;;3087   else if(NUMMAKB==4)
;;;3088   	{
;;;3089   	signed short temp_t;
;;;3090   	temp_t=-20;
;;;3091   	if(makb[0]._cnt<5)
;;;3092   		{
;;;3093   		if(makb[0]._T_nd[0]==0)
;;;3094   			{
;;;3095   			temp_t=makb[0]._T[0];
;;;3096   			bat[0]._nd=0;
;;;3097   			}
;;;3098   		}
;;;3099   	if(makb[1]._cnt<5)
;;;3100   		{
;;;3101   		if(makb[1]._T_nd[0]==0)
;;;3102   			{
;;;3103   			if(temp_t<makb[1]._T[0])
;;;3104   				{
;;;3105   				bat[0]._nd=0;
;;;3106   				temp_t=makb[1]._T[0];
;;;3107   				}
;;;3108   			}
;;;3109   		}
;;;3110   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3111   
;;;3112    	temp_t=-20;
;;;3113   	if(makb[2]._cnt<5)
;;;3114   		{
;;;3115   		if(makb[2]._T_nd[0]==0)
;;;3116   			{
;;;3117   			temp_t=makb[2]._T[0];
;;;3118   			bat[1]._nd=0;
;;;3119   			}
;;;3120   		}
;;;3121   	if(makb[3]._cnt<5)
;;;3122   		{
;;;3123   		if(makb[3]._T_nd[0]==0)
;;;3124   			{
;;;3125   			if(temp_t<makb[3]._T[0])
;;;3126   				{
;;;3127   				bat[1]._nd=0;
;;;3128   				temp_t=makb[3]._T[0];
;;;3129   				}
;;;3130   			}
;;;3131   		}
;;;3132   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3133   	}
;;;3134   
;;;3135   #endif
;;;3136   
;;;3137   
;;;3138   //Напряжение нагрузки
;;;3139   temp_SL=(signed long)adc_buff_[2];
002c58  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;3140   temp_SL*=Kuload;
002c5c  48fd              LDR      r0,|L1.12372|
002c5e  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002c62  fb01f000          MUL      r0,r1,r0
;;;3141   temp_SL/=2000L;
002c66  f44f64fa          MOV      r4,#0x7d0
002c6a  fb90f0f4          SDIV     r0,r0,r4
;;;3142   load_U=(signed short)temp_SL;
002c6e  4cfa              LDR      r4,|L1.12376|
002c70  8020              STRH     r0,[r4,#0]
;;;3143   
;;;3144   #ifdef UKU_220 
;;;3145   //Напряжение нагрузки
;;;3146   temp_SL=(signed long)adc_buff_[2];
;;;3147   temp_SL*=Kuload;
;;;3148   temp_SL/=350L;
;;;3149   load_U=(signed short)temp_SL;
;;;3150   #endif
;;;3151   
;;;3152   #ifdef UKU_220_V2 
;;;3153   //Напряжение нагрузки
;;;3154   temp_SL=(signed long)adc_buff_[2];
;;;3155   temp_SL*=Kuload;
;;;3156   temp_SL/=350L;
;;;3157   load_U=(signed short)temp_SL;
;;;3158   #endif
;;;3159   
;;;3160   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3161   //Напряжение шины
;;;3162   temp_SL=(signed long)adc_buff_[1];
002c72  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;3163   temp_SL*=Kuout;
002c76  48f9              LDR      r0,|L1.12380|
002c78  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002c7c  fb08f800          MUL      r8,r8,r0
;;;3164   if(AUSW_MAIN==22010)temp_SL/=400L;
002c80  48f7              LDR      r0,|L1.12384|
002c82  f24554fa          MOV      r4,#0x55fa
002c86  f44f7bc8          MOV      r11,#0x190
002c8a  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002c8c  42a0              CMP      r0,r4
002c8e  d102              BNE      |L1.11414|
002c90  fb98f8fb          SDIV     r8,r8,r11
002c94  e003              B        |L1.11422|
                  |L1.11414|
;;;3165   else temp_SL/=500L;
002c96  f44f7efa          MOV      lr,#0x1f4
002c9a  fb98f8fe          SDIV     r8,r8,lr
                  |L1.11422|
;;;3166   out_U=(signed short)temp_SL;
002c9e  f8dfe3c4          LDR      lr,|L1.12388|
002ca2  fa0ff888          SXTH     r8,r8
002ca6  f8ae8000          STRH     r8,[lr,#0]
;;;3167   load_U=out_U;
002caa  f8dfe3ac          LDR      lr,|L1.12376|
002cae  f8ae8000          STRH     r8,[lr,#0]
;;;3168   
;;;3169   //Напряжение выпрямителей
;;;3170   temp_SL=(signed long)adc_buff_[2];
;;;3171   temp_SL*=Kubps;
002cb2  4fed              LDR      r7,|L1.12392|
002cb4  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002cb8  fb01f107          MUL      r1,r1,r7
;;;3172   if(AUSW_MAIN==22010)temp_SL/=400L;
002cbc  d102              BNE      |L1.11460|
002cbe  fb91f1fb          SDIV     r1,r1,r11
002cc2  e003              B        |L1.11468|
                  |L1.11460|
;;;3173   else temp_SL/=500L;
002cc4  f44f74fa          MOV      r4,#0x1f4
002cc8  fb91f1f4          SDIV     r1,r1,r4
                  |L1.11468|
;;;3174   bps_U=(signed short)temp_SL;
002ccc  4ce7              LDR      r4,|L1.12396|
002cce  b209              SXTH     r1,r1
002cd0  8021              STRH     r1,[r4,#0]
;;;3175   
;;;3176   if(bps_U<100)
002cd2  2964              CMP      r1,#0x64
002cd4  da19              BGE      |L1.11530|
;;;3177   	{
;;;3178   	char i;
;;;3179   	for(i=0;i<NUMIST;i++)
002cd6  f04f0100          MOV      r1,#0
002cda  46a6              MOV      lr,r4                 ;3174
002cdc  4ce4              LDR      r4,|L1.12400|
002cde  f9b4b000          LDRSH    r11,[r4,#0]
002ce2  e010              B        |L1.11526|
                  |L1.11492|
;;;3180   		{
;;;3181   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002ce4  eb0104c1          ADD      r4,r1,r1,LSL #3
002ce8  eb041701          ADD      r7,r4,r1,LSL #4
002cec  4ce1              LDR      r4,|L1.12404|
002cee  eb040487          ADD      r4,r4,r7,LSL #2
002cf2  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
002cf6  6a24              LDR      r4,[r4,#0x20]
002cf8  42bc              CMP      r4,r7
002cfa  dd01              BLE      |L1.11520|
002cfc  f8ae4000          STRH     r4,[lr,#0]
                  |L1.11520|
002d00  f1010101          ADD      r1,r1,#1              ;3179
002d04  b2c9              UXTB     r1,r1                 ;3179
                  |L1.11526|
002d06  4559              CMP      r1,r11                ;3179
002d08  dbec              BLT      |L1.11492|
                  |L1.11530|
;;;3182   		}
;;;3183   	}
;;;3184   
;;;3185   //Суммарный ток выпрямителей
;;;3186   temp_SL=0;
002d0a  f04f0b00          MOV      r11,#0
;;;3187   for (i=0;i<NUMIST;i++)
002d0e  4659              MOV      r1,r11
002d10  4cd7              LDR      r4,|L1.12400|
002d12  f9b47000          LDRSH    r7,[r4,#0]            ;3179
002d16  4cd7              LDR      r4,|L1.12404|
002d18  e00b              B        |L1.11570|
                  |L1.11546|
;;;3188   	{
;;;3189   	temp_SL+=((signed long)bps[i]._Ii);
002d1a  eb010ec1          ADD      lr,r1,r1,LSL #3
002d1e  eb0e1e01          ADD      lr,lr,r1,LSL #4
002d22  eb040e8e          ADD      lr,r4,lr,LSL #2
002d26  f8dee024          LDR      lr,[lr,#0x24]
002d2a  44f3              ADD      r11,r11,lr
002d2c  f1010101          ADD      r1,r1,#1              ;3187
002d30  b2c9              UXTB     r1,r1                 ;3187
                  |L1.11570|
002d32  42b9              CMP      r1,r7                 ;3187
002d34  dbf1              BLT      |L1.11546|
;;;3190   	}
;;;3191   bps_I=(signed short)temp_SL;
002d36  49d0              LDR      r1,|L1.12408|
002d38  f8a1b000          STRH     r11,[r1,#0]
;;;3192   
;;;3193   
;;;3194   #endif
;;;3195   
;;;3196   
;;;3197   #ifdef UKU_KONTUR
;;;3198   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3199   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3200   else ND_EXT[0]=1;
;;;3201   temp_SL=(signed long)adc_buff_[5];
;;;3202   temp_SL*=Ktext[0];
;;;3203   temp_SL/=20000L;
;;;3204   temp_SL-=273L;
;;;3205   t_ext[0]=(signed short)temp_SL;
;;;3206   #else 
;;;3207   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3208   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002d3c  49cf              LDR      r1,|L1.12412|
002d3e  f6403ab7          MOV      r10,#0xbb7
002d42  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
002d46  49ce              LDR      r1,|L1.12416|
002d48  f2ab3e21          SUB      lr,r11,#0x321
002d4c  f8cde010          STR      lr,[sp,#0x10]
002d50  45d6              CMP      lr,r10
002d52  d201              BCS      |L1.11608|
002d54  700b              STRB     r3,[r1,#0]
002d56  e000              B        |L1.11610|
                  |L1.11608|
;;;3209   else ND_EXT[0]=1;
002d58  700a              STRB     r2,[r1,#0]
                  |L1.11610|
;;;3210   temp_SL=(signed long)adc_buff_[5];
;;;3211   temp_SL*=Ktext[0];
002d5a  f8dfa328          LDR      r10,|L1.12420|
002d5e  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
002d62  f8cda00c          STR      r10,[sp,#0xc]
002d66  fb0afa0b          MUL      r10,r10,r11
;;;3212   temp_SL/=20000L;
002d6a  f6446e20          MOV      lr,#0x4e20
002d6e  fb9afafe          SDIV     r10,r10,lr
;;;3213   temp_SL-=273L;
002d72  f2aa1a11          SUB      r10,r10,#0x111
;;;3214   t_ext[0]=(signed short)temp_SL;
002d76  f8dfe310          LDR      lr,|L1.12424|
002d7a  f8aea000          STRH     r10,[lr,#0]
;;;3215   /*
;;;3216   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3217   else ND_EXT[1]=1;
;;;3218   temp_SL=(signed long)adc_buff_[6];
;;;3219   temp_SL*=Ktext[1];
;;;3220   temp_SL/=20000L;
;;;3221   temp_SL-=273L;
;;;3222   t_ext[1]=(signed short)temp_SL;	*/
;;;3223   #endif
;;;3224   
;;;3225   #ifdef UKU_220
;;;3226   
;;;3227   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3228   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3229   else ND_EXT[1]=1;
;;;3230   temp_SL=(signed long)adc_buff_[3];
;;;3231   temp_SL*=Ktext[1];
;;;3232   temp_SL/=20000L;
;;;3233   temp_SL-=273L;
;;;3234   t_ext[1]=(signed short)temp_SL;
;;;3235   
;;;3236   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3237   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3238   else ND_EXT[2]=1;
;;;3239   temp_SL=(signed long)adc_buff_[10];
;;;3240   temp_SL*=Ktext[2];
;;;3241   temp_SL/=20000L;
;;;3242   temp_SL-=273L;
;;;3243   t_ext[2]=(signed short)temp_SL;
;;;3244   
;;;3245   #else
;;;3246   
;;;3247   
;;;3248   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3249   
;;;3250   //Внешний датчик температуры 
;;;3251   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002d7e  f8dda014          LDR      r10,[sp,#0x14]
002d82  f6403eb7          MOV      lr,#0xbb7
002d86  45f2              CMP      r10,lr
002d88  d201              BCS      |L1.11662|
002d8a  700b              STRB     r3,[r1,#0]
002d8c  e000              B        |L1.11664|
                  |L1.11662|
;;;3252   else ND_EXT[0]=1;
002d8e  700a              STRB     r2,[r1,#0]
                  |L1.11664|
;;;3253   temp_SL=(signed long)adc_buff_[6];
;;;3254   temp_SL*=Ktext[0];
002d90  f8dda00c          LDR      r10,[sp,#0xc]
002d94  fb0afa09          MUL      r10,r10,r9
;;;3255   temp_SL/=20000L;
002d98  f6446920          MOV      r9,#0x4e20
002d9c  fb9af9f9          SDIV     r9,r10,r9
;;;3256   temp_SL-=273L;
002da0  f2a91911          SUB      r9,r9,#0x111
;;;3257   t_ext[0]=(signed short)temp_SL;
002da4  f8dfe2e0          LDR      lr,|L1.12424|
002da8  f8ae9000          STRH     r9,[lr,#0]
;;;3258   
;;;3259   //Внешний датчик температуры №2
;;;3260   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002dac  f8dd9010          LDR      r9,[sp,#0x10]
002db0  f6403ab7          MOV      r10,#0xbb7
002db4  45d1              CMP      r9,r10
002db6  d201              BCS      |L1.11708|
002db8  704b              STRB     r3,[r1,#1]
002dba  e000              B        |L1.11710|
                  |L1.11708|
;;;3261   else ND_EXT[1]=1;
002dbc  704a              STRB     r2,[r1,#1]
                  |L1.11710|
;;;3262   temp_SL=(signed long)adc_buff_[5];
;;;3263   temp_SL*=Ktext[1];
002dbe  4ab1              LDR      r2,|L1.12420|
002dc0  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
002dc4  fb02f20b          MUL      r2,r2,r11
;;;3264   temp_SL/=20000L;
002dc8  f6446920          MOV      r9,#0x4e20
002dcc  fb92f2f9          SDIV     r2,r2,r9
;;;3265   temp_SL-=273L;
002dd0  f2a21211          SUB      r2,r2,#0x111
;;;3266   t_ext[1]=(signed short)temp_SL;
002dd4  fa0ffa82          SXTH     r10,r2
002dd8  4aab              LDR      r2,|L1.12424|
002dda  f8a2a002          STRH     r10,[r2,#2]
;;;3267   #else
;;;3268   
;;;3269   
;;;3270   
;;;3271   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3272   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3273   else ND_EXT[1]=1;
;;;3274   temp_SL=(signed long)adc_buff_[6];
;;;3275   temp_SL*=Ktext[1];
;;;3276   temp_SL/=20000L;
;;;3277   temp_SL-=273L;
;;;3278   t_ext[1]=(signed short)temp_SL;
;;;3279   
;;;3280   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3281   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3282   else ND_EXT[2]=1;
;;;3283   temp_SL=(signed long)adc_buff_[3];
;;;3284   temp_SL*=Ktext[2];
;;;3285   temp_SL/=20000L;
;;;3286   temp_SL-=273L;
;;;3287   t_ext[2]=(signed short)temp_SL;
;;;3288   
;;;3289   #endif
;;;3290   #endif
;;;3291   
;;;3292   #ifdef UKU_220_V2
;;;3293   
;;;3294   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3295   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3296   else ND_EXT[1]=1;
;;;3297   temp_SL=(signed long)adc_buff_[3];
;;;3298   temp_SL*=Ktext[1];
;;;3299   temp_SL/=20000L;
;;;3300   temp_SL-=273L;
;;;3301   t_ext[1]=(signed short)temp_SL;
;;;3302   
;;;3303   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3304   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3305   else ND_EXT[2]=1;
;;;3306   temp_SL=(signed long)adc_buff_[10];
;;;3307   temp_SL*=Ktext[2];
;;;3308   temp_SL/=20000L;
;;;3309   temp_SL-=273L;
;;;3310   t_ext[2]=(signed short)temp_SL;
;;;3311   
;;;3312   #else
;;;3313   
;;;3314   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3315   //Ток батареи
;;;3316   if(bps[8]._device==dIBAT_METR)
002dde  f8942320          LDRB     r2,[r4,#0x320]  ; bps
;;;3317   	{
;;;3318   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3319   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3320   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3321   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3322   	if(!bIBAT_SMKLBR)
;;;3323   		{
;;;3324   		signed long temp_SL;
;;;3325   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3326   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3327   		temp_SL*=(signed long)Kibat1[0];
;;;3328   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3329   	
;;;3330   		Ib_ips_termokompensat =(signed short)temp_SL;
002de2  f8df92a8          LDR      r9,|L1.12428|
002de6  2a09              CMP      r2,#9                 ;3316
002de8  d15f              BNE      |L1.11946|
002dea  f8942326          LDRB     r2,[r4,#0x326]        ;3318  ; bps
002dee  f894b327          LDRB     r11,[r4,#0x327]       ;3318  ; bps
002df2  f8dfe29c          LDR      lr,|L1.12432|
002df6  eb02220b          ADD      r2,r2,r11,LSL #8      ;3318
002dfa  f8ce2000          STR      r2,[lr,#0]            ;3318  ; ibat_metr_buff_
002dfe  9202              STR      r2,[sp,#8]            ;3318
002e00  f8942328          LDRB     r2,[r4,#0x328]        ;3319  ; bps
002e04  f894b329          LDRB     r11,[r4,#0x329]       ;3319  ; bps
002e08  eb02220b          ADD      r2,r2,r11,LSL #8      ;3319
002e0c  f8ce2004          STR      r2,[lr,#4]            ;3319  ; ibat_metr_buff_
002e10  f894b32a          LDRB     r11,[r4,#0x32a]       ;3320  ; bps
002e14  f894e32b          LDRB     lr,[r4,#0x32b]        ;3320  ; bps
002e18  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;3320
002e1c  f8dfe274          LDR      lr,|L1.12436|
002e20  fa0ffb8b          SXTH     r11,r11               ;3320
002e24  f8aeb000          STRH     r11,[lr,#0]           ;3320
002e28  f1bb0f00          CMP      r11,#0                ;3321
002e2c  d005              BEQ      |L1.11834|
002e2e  f8dfb268          LDR      r11,|L1.12440|
002e32  f04f0e32          MOV      lr,#0x32              ;3321
002e36  f8abe000          STRH     lr,[r11,#0]           ;3321
                  |L1.11834|
002e3a  d136              BNE      |L1.11946|
002e3c  f8ddb008          LDR      r11,[sp,#8]           ;3325
002e40  ebab0b02          SUB      r11,r11,r2            ;3326
002e44  4a95              LDR      r2,|L1.12444|
002e46  f9b22000          LDRSH    r2,[r2,#0]            ;3327  ; Kibat1
002e4a  fb02f20b          MUL      r2,r2,r11             ;3327
002e4e  f5a04ba8          SUB      r11,r0,#0x5400        ;3328
002e52  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3328
002e56  d00f              BEQ      |L1.11896|
002e58  f1bb0b01          SUBS     r11,r11,#1            ;3328
002e5c  d00c              BEQ      |L1.11896|
002e5e  4560              CMP      r0,r12                ;3328
002e60  d00a              BEQ      |L1.11896|
002e62  42a8              CMP      r0,r5                 ;3328
002e64  d008              BEQ      |L1.11896|
002e66  f1bb0534          SUBS     r5,r11,#0x34          ;3328
002e6a  d005              BEQ      |L1.11896|
002e6c  3528              ADDS     r5,r5,#0x28           ;3328
002e6e  d003              BEQ      |L1.11896|
002e70  3d14              SUBS     r5,r5,#0x14           ;3328
002e72  d001              BEQ      |L1.11896|
002e74  1e6d              SUBS     r5,r5,#1              ;3328
002e76  d103              BNE      |L1.11904|
                  |L1.11896|
002e78  f44f65fa          MOV      r5,#0x7d0             ;3328
002e7c  fb92f2f5          SDIV     r2,r2,r5              ;3328
                  |L1.11904|
002e80  b215              SXTH     r5,r2
002e82  f8a95000          STRH     r5,[r9,#0]
;;;3331   		if(bIBAT_SMKLBR_cnt)
002e86  f8dfc210          LDR      r12,|L1.12440|
;;;3332   			{
;;;3333   			bIBAT_SMKLBR_cnt--;
;;;3334   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
002e8a  f8dfb214          LDR      r11,|L1.12448|
002e8e  f9bc2000          LDRSH    r2,[r12,#0]           ;3331  ; bIBAT_SMKLBR_cnt
002e92  b142              CBZ      r2,|L1.11942|
002e94  f1a20201          SUB      r2,r2,#1              ;3333
002e98  f8ac2000          STRH     r2,[r12,#0]           ;3333
002e9c  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
002ea0  f8a92000          STRH     r2,[r9,#0]
002ea4  e001              B        |L1.11946|
                  |L1.11942|
;;;3335   			}
;;;3336   		else 
;;;3337   			{
;;;3338   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
002ea6  f8ab5000          STRH     r5,[r11,#0]
                  |L1.11946|
;;;3339   			}
;;;3340   		}
;;;3341   	}
;;;3342   
;;;3343   bat[0]._Ub=load_U;
002eaa  4a69              LDR      r2,|L1.12368|
002eac  f8a28002          STRH     r8,[r2,#2]
002eb0  f8cd8004          STR      r8,[sp,#4]
;;;3344   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
002eb4  f5a045ac          SUB      r5,r0,#0x5600
002eb8  3d02              SUBS     r5,#2
002eba  d103              BNE      |L1.11972|
002ebc  8910              LDRH     r0,[r2,#8]  ; bat
002ebe  f8a90000          STRH     r0,[r9,#0]
002ec2  e002              B        |L1.11978|
                  |L1.11972|
;;;3345   else bat[0]._Ib=Ib_ips_termokompensat;
002ec4  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002ec8  8110              STRH     r0,[r2,#8]
                  |L1.11978|
;;;3346   
;;;3347   #endif
;;;3348   #endif
;;;3349   
;;;3350   
;;;3351   #ifdef UKU_TELECORE2015
;;;3352   
;;;3353   //Внешний датчик температуры №1
;;;3354   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3355   else ND_EXT[0]=1;
;;;3356   temp_SL=(signed long)adc_buff_[7];
;;;3357   temp_SL*=Ktext[0];
;;;3358   temp_SL/=20000L;
;;;3359   temp_SL-=273L;
;;;3360   t_ext[0]=(signed short)temp_SL;
;;;3361   
;;;3362   
;;;3363   //Внешний датчик температуры №2
;;;3364   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3365   else ND_EXT[1]=1;
;;;3366   temp_SL=(signed long)adc_buff_[6];
;;;3367   temp_SL*=Ktext[1];
;;;3368   temp_SL/=20000L;
;;;3369   temp_SL-=273L;
;;;3370   t_ext[1]=(signed short)temp_SL;
;;;3371   
;;;3372   #endif
;;;3373   
;;;3374   #ifdef UKU_TELECORE2017
;;;3375   
;;;3376   //Внешний датчик температуры №1
;;;3377   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3378   else ND_EXT[0]=1;
;;;3379   temp_SL=(signed long)adc_buff_[7];
;;;3380   temp_SL*=Ktext[0];
;;;3381   temp_SL/=20000L;
;;;3382   temp_SL-=273L;
;;;3383   t_ext[0]=(signed short)temp_SL;
;;;3384   
;;;3385   
;;;3386   //Внешний датчик температуры №2
;;;3387   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3388   else ND_EXT[1]=1;
;;;3389   temp_SL=(signed long)adc_buff_[6];
;;;3390   temp_SL*=Ktext[1];
;;;3391   temp_SL/=20000L;
;;;3392   temp_SL-=273L;
;;;3393   t_ext[1]=(signed short)temp_SL;
;;;3394   
;;;3395   #endif
;;;3396   
;;;3397   //напряжение ввода
;;;3398   temp_SL=(signed long)adc_buff_ext_[0];
002eca  f8dfc1d8          LDR      r12,|L1.12452|
002ece  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;3399   temp_SL*=Kunet_ext[0];
002ed2  f8df81d4          LDR      r8,|L1.12456|
002ed6  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
002eda  4368              MULS     r0,r5,r0
;;;3400   temp_SL/=4000L;
002edc  f44f6b7a          MOV      r11,#0xfa0
002ee0  fb90f0fb          SDIV     r0,r0,r11
;;;3401   Uvv[0]=(signed short)temp_SL;
002ee4  4d71              LDR      r5,|L1.12460|
002ee6  b280              UXTH     r0,r0
002ee8  8028              STRH     r0,[r5,#0]
;;;3402   if(Uvv[0]<100) Uvv0=Uvv[0];
002eea  f8dfe1c4          LDR      lr,|L1.12464|
002eee  2864              CMP      r0,#0x64
002ef0  d202              BCS      |L1.12024|
002ef2  f8ae0000          STRH     r0,[lr,#0]
002ef6  e003              B        |L1.12032|
                  |L1.12024|
;;;3403   else Uvv0=net_U;
002ef8  486e              LDR      r0,|L1.12468|
002efa  8800              LDRH     r0,[r0,#0]  ; net_U
002efc  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12032|
;;;3404   
;;;3405   //напряжение пэс
;;;3406   temp_SL=(signed long)adc_buff_ext_[1];
002f00  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;3407   temp_SL*=Kunet_ext[1];
002f04  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
002f08  fb00f00c          MUL      r0,r0,r12
;;;3408   temp_SL/=4000L;
002f0c  fb90f0fb          SDIV     r0,r0,r11
;;;3409   Uvv[1]=(signed short)temp_SL;
002f10  8068              STRH     r0,[r5,#2]
;;;3410   
;;;3411   
;;;3412   //напряжение ввода трехфазное
;;;3413   temp_SL=(signed long)eb2_data_short[0];
002f12  4d69              LDR      r5,|L1.12472|
002f14  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;3414   temp_SL*=Kvv_eb2[0];
002f18  f8dfc1a0          LDR      r12,|L1.12476|
002f1c  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
002f20  fb08f800          MUL      r8,r8,r0
;;;3415   temp_SL/=6000L;
002f24  f2417070          MOV      r0,#0x1770
002f28  fb98fbf0          SDIV     r11,r8,r0
;;;3416   Uvv_eb2[0]=(signed short)temp_SL;
002f2c  f8df8190          LDR      r8,|L1.12480|
002f30  f8a8b000          STRH     r11,[r8,#0]
;;;3417   
;;;3418   temp_SL=(signed long)eb2_data_short[1];
002f34  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;3419   temp_SL*=Kvv_eb2[1];
002f38  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
002f3c  fb0efe0b          MUL      lr,lr,r11
;;;3420   temp_SL/=6000L;
002f40  fb9efbf0          SDIV     r11,lr,r0
;;;3421   Uvv_eb2[1]=(signed short)temp_SL;
002f44  f8a8b002          STRH     r11,[r8,#2]
;;;3422   
;;;3423   temp_SL=(signed long)eb2_data_short[2];
002f48  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;3424   temp_SL*=Kvv_eb2[2];
002f4c  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
002f50  fb0cfc0b          MUL      r12,r12,r11
;;;3425   temp_SL/=6000L;
002f54  fb9cfcf0          SDIV     r12,r12,r0
;;;3426   Uvv_eb2[2]=(signed short)temp_SL;
002f58  f8a8c004          STRH     r12,[r8,#4]
;;;3427   
;;;3428   //напряжение пэс трехфазное
;;;3429   temp_SL=(signed long)eb2_data_short[3];
002f5c  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;3430   temp_SL*=Kpes_eb2[0];
002f60  f8dfc160          LDR      r12,|L1.12484|
002f64  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
002f68  fb08f80b          MUL      r8,r8,r11
;;;3431   temp_SL/=6000L;
002f6c  fb98fbf0          SDIV     r11,r8,r0
;;;3432   Upes_eb2[0]=(signed short)temp_SL;
002f70  f8df8154          LDR      r8,|L1.12488|
002f74  f8a8b000          STRH     r11,[r8,#0]
;;;3433   
;;;3434   temp_SL=(signed long)eb2_data_short[4];
002f78  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;3435   temp_SL*=Kpes_eb2[1];
002f7c  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
002f80  fb0efe0b          MUL      lr,lr,r11
;;;3436   temp_SL/=6000L;
002f84  fb9efbf0          SDIV     r11,lr,r0
;;;3437   Upes_eb2[1]=(signed short)temp_SL;
002f88  f8a8b002          STRH     r11,[r8,#2]
;;;3438   
;;;3439   temp_SL=(signed long)eb2_data_short[5];
002f8c  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;3440   temp_SL*=Kpes_eb2[2];
002f90  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
002f94  fb05f50b          MUL      r5,r5,r11
;;;3441   temp_SL/=6000L;
002f98  fb95f0f0          SDIV     r0,r5,r0
;;;3442   Upes_eb2[2]=(signed short)temp_SL;
002f9c  f8a80004          STRH     r0,[r8,#4]
;;;3443   
;;;3444   //Вычисление температуры шкафа
;;;3445   
;;;3446   ibt._T[0]=t_ext[1]+273;
002fa0  f20a1a11          ADD      r10,r10,#0x111
002fa4  fa0ffc8a          SXTH     r12,r10
002fa8  f8dfa120          LDR      r10,|L1.12492|
002fac  4836              LDR      r0,|L1.12424|
002fae  f8aac000          STRH     r12,[r10,#0]
;;;3447   ibt._T[1]=t_ext[2]+273;
002fb2  8880              LDRH     r0,[r0,#4]  ; t_ext
002fb4  f2001011          ADD      r0,r0,#0x111
002fb8  fa0ff880          SXTH     r8,r0
002fbc  f8aa8002          STRH     r8,[r10,#2]
;;;3448   
;;;3449   ibt._nd[0]=ND_EXT[1];
002fc0  784d              LDRB     r5,[r1,#1]  ; ND_EXT
002fc2  f88a5008          STRB     r5,[r10,#8]
;;;3450   ibt._nd[1]=ND_EXT[2];
002fc6  7888              LDRB     r0,[r1,#2]  ; ND_EXT
002fc8  f88a0009          STRB     r0,[r10,#9]
;;;3451   
;;;3452   #ifndef UKU_TELECORE2015
;;;3453   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3454   	{
;;;3455   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
002fcc  4940              LDR      r1,|L1.12496|
002fce  b905              CBNZ     r5,|L1.12242|
002fd0  b110              CBZ      r0,|L1.12248|
                  |L1.12242|
;;;3456   	}
;;;3457   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
002fd2  2d01              CMP      r5,#1
002fd4  d00a              BEQ      |L1.12268|
002fd6  e00a              B        |L1.12270|
                  |L1.12248|
002fd8  eb0c0008          ADD      r0,r12,r8             ;3455
002fdc  eb0075d0          ADD      r5,r0,r0,LSR #31      ;3455
002fe0  f46f7088          MVN      r0,#0x110             ;3455
002fe4  eb000065          ADD      r0,r0,r5,ASR #1       ;3455
002fe8  8008              STRH     r0,[r1,#0]            ;3455
002fea  e01e              B        |L1.12330|
                  |L1.12268|
002fec  b108              CBZ      r0,|L1.12274|
                  |L1.12270|
;;;3458   	{
;;;3459   	t_box=ibt._T[1]-273;
;;;3460   	}
;;;3461   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
002fee  b12d              CBZ      r5,|L1.12284|
002ff0  e006              B        |L1.12288|
                  |L1.12274|
002ff2  f2a81811          SUB      r8,r8,#0x111          ;3459
002ff6  f8a18000          STRH     r8,[r1,#0]            ;3459
002ffa  e016              B        |L1.12330|
                  |L1.12284|
002ffc  2801              CMP      r0,#1
002ffe  d002              BEQ      |L1.12294|
                  |L1.12288|
;;;3462   	{
;;;3463   	t_box=ibt._T[0]-273;
;;;3464   	}
;;;3465   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
003000  2d01              CMP      r5,#1
003002  d005              BEQ      |L1.12304|
003004  e011              B        |L1.12330|
                  |L1.12294|
003006  f2ac1c11          SUB      r12,r12,#0x111        ;3463
00300a  f8a1c000          STRH     r12,[r1,#0]           ;3463
00300e  e00c              B        |L1.12330|
                  |L1.12304|
003010  2801              CMP      r0,#1
003012  d10a              BNE      |L1.12330|
;;;3466   	{
;;;3467   	if(t_ext_can_nd<5)t_box= t_ext_can;
003014  482f              LDR      r0,|L1.12500|
003016  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
003018  2805              CMP      r0,#5
00301a  d203              BCS      |L1.12324|
00301c  482e              LDR      r0,|L1.12504|
00301e  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003020  8008              STRH     r0,[r1,#0]
003022  e002              B        |L1.12330|
                  |L1.12324|
;;;3468   	else t_box=20;
003024  f04f0014          MOV      r0,#0x14
003028  8008              STRH     r0,[r1,#0]
                  |L1.12330|
;;;3469   	}
;;;3470   #endif
;;;3471   /*
;;;3472   //Вычисление температуры шкафа
;;;3473   
;;;3474   ibt._T[0]=bat[0]._Tb+273;
;;;3475   ibt._T[1]=bat[1]._Tb+273;
;;;3476   ibt._T[2]=t_ext[1]+273;
;;;3477   ibt._T[3]=t_ext[2]+273;
;;;3478   
;;;3479   ibt._nd[0]=bat[0]._nd;
;;;3480   ibt._nd[1]=bat[1]._nd;
;;;3481   ibt._nd[2]=ND_EXT[1];
;;;3482   ibt._nd[3]=ND_EXT[2];
;;;3483   
;;;3484   ibt._avg1=0;
;;;3485   ibt._avg_cnt=4;
;;;3486   
;;;3487   if(ibt._nd[0]==0)
;;;3488   	{
;;;3489   	ibt._avg1+=ibt._T[0];
;;;3490   	}
;;;3491   else 
;;;3492   	{
;;;3493   	ibt._avg_cnt--;
;;;3494   	}
;;;3495   
;;;3496   if(ibt._nd[1]==0)
;;;3497   	{
;;;3498   	ibt._avg1+=ibt._T[1];
;;;3499   	}
;;;3500   else 
;;;3501   	{
;;;3502   	ibt._avg_cnt--;
;;;3503   	}
;;;3504   
;;;3505   if(ibt._nd[2]==0)
;;;3506   	{
;;;3507   	ibt._avg1+=ibt._T[2];
;;;3508   	}
;;;3509   else 
;;;3510   	{
;;;3511   	ibt._avg_cnt--;
;;;3512   	}
;;;3513   
;;;3514   if(ibt._nd[3]==0)
;;;3515   	{
;;;3516   	ibt._avg1+=ibt._T[3];
;;;3517   	}
;;;3518   else 
;;;3519   	{
;;;3520   	ibt._avg_cnt--;
;;;3521   	}
;;;3522   
;;;3523   if(ibt._avg_cnt==0)
;;;3524   	{
;;;3525   	}
;;;3526   else
;;;3527   	{
;;;3528   	ibt._avg1/=ibt._avg_cnt;
;;;3529   	}
;;;3530   
;;;3531   
;;;3532   if(ibt._nd[0]!=0)
;;;3533   	{
;;;3534   	ibt._T_dispers[0]=0;
;;;3535   	}
;;;3536   else 
;;;3537   	{
;;;3538   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3539   	}
;;;3540   
;;;3541   if(ibt._nd[1]!=0)
;;;3542   	{
;;;3543   	ibt._T_dispers[1]=0;
;;;3544   	}
;;;3545   else 
;;;3546   	{
;;;3547   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3548   	}
;;;3549   
;;;3550   if(ibt._nd[2]!=0)
;;;3551   	{
;;;3552   	ibt._T_dispers[2]=0;
;;;3553   	}
;;;3554   else 
;;;3555   	{
;;;3556   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3557   	}
;;;3558   
;;;3559   if(ibt._nd[3]!=0)
;;;3560   	{
;;;3561   	ibt._T_dispers[3]=0;
;;;3562   	}
;;;3563   else 
;;;3564   	{
;;;3565   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3566   	}
;;;3567   
;;;3568   if(	ibt._nd[0]&&
;;;3569   	ibt._nd[1]&&
;;;3570   	ibt._nd[2]&&
;;;3571   	ibt._nd[3]
;;;3572   	)
;;;3573   	{
;;;3574   	t_box=(bps[0]._Ti);
;;;3575   	}
;;;3576   
;;;3577   else if(	ibt._nd[0]||
;;;3578   	ibt._nd[1]||
;;;3579   	ibt._nd[2]||
;;;3580   	ibt._nd[3]
;;;3581   	)
;;;3582   	{
;;;3583   	t_box=(ibt._avg1-273);
;;;3584   	}
;;;3585   else 
;;;3586   	{
;;;3587   	ibt._max_dispers_num=0;
;;;3588   	ibt._max_dispers=ibt._T_dispers[0];
;;;3589   
;;;3590   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3591   		{
;;;3592   		ibt._max_dispers_num=1;
;;;3593   		ibt._max_dispers=ibt._T_dispers[1];
;;;3594   		}
;;;3595   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3596   		{
;;;3597   		ibt._max_dispers_num=2;
;;;3598   		ibt._max_dispers=ibt._T_dispers[2];
;;;3599   		}
;;;3600   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3601   		{
;;;3602   		ibt._max_dispers_num=3;
;;;3603   		ibt._max_dispers=ibt._T_dispers[3];
;;;3604   		}
;;;3605   
;;;3606   	ibt._avg2=0;
;;;3607   
;;;3608   	if(ibt._max_dispers_num!=0)
;;;3609   		{
;;;3610   		ibt._avg2+=ibt._T[0];
;;;3611   		}
;;;3612   	if(ibt._max_dispers_num!=1)
;;;3613   		{
;;;3614   		ibt._avg2+=ibt._T[1];
;;;3615   		}
;;;3616   	if(ibt._max_dispers_num!=2)
;;;3617   		{
;;;3618   		ibt._avg2+=ibt._T[2];
;;;3619   		}
;;;3620   	if(ibt._max_dispers_num!=3)
;;;3621   		{
;;;3622   		ibt._avg2+=ibt._T[3];
;;;3623   		}
;;;3624   
;;;3625   	t_box=(ibt._avg2/3)-273;
;;;3626   
;;;3627   	}*/
;;;3628   
;;;3629   
;;;3630   //*********************************************
;;;3631   
;;;3632   #ifndef TELECORE
;;;3633   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
00302a  492c              LDR      r1,|L1.12508|
00302c  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
00302e  2855              CMP      r0,#0x55
003030  d105              BNE      |L1.12350|
003032  9801              LDR      r0,[sp,#4]
003034  28c8              CMP      r0,#0xc8
003036  dd02              BLE      |L1.12350|
003038  8910              LDRH     r0,[r2,#8]  ; bat
00303a  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12350|
;;;3634   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
00303e  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
003040  2855              CMP      r0,#0x55
003042  d155              BNE      |L1.12528|
003044  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
003048  28c8              CMP      r0,#0xc8
00304a  dd51              BLE      |L1.12528|
00304c  e048              B        |L1.12512|
00304e  0000              DCW      0x0000
                  |L1.12368|
                          DCD      bat
                  |L1.12372|
                          DCD      Kuload
                  |L1.12376|
                          DCD      load_U
                  |L1.12380|
                          DCD      Kuout
                  |L1.12384|
                          DCD      AUSW_MAIN
                  |L1.12388|
                          DCD      out_U
                  |L1.12392|
                          DCD      Kubps
                  |L1.12396|
                          DCD      bps_U
                  |L1.12400|
                          DCD      NUMIST
                  |L1.12404|
                          DCD      bps
                  |L1.12408|
                          DCD      bps_I
                  |L1.12412|
                          DCD      ||.bss||+0x40c
                  |L1.12416|
                          DCD      ND_EXT
                  |L1.12420|
                          DCD      Ktext
                  |L1.12424|
                          DCD      t_ext
                  |L1.12428|
                          DCD      Ib_ips_termokompensat
                  |L1.12432|
                          DCD      ibat_metr_buff_
                  |L1.12436|
                          DCD      bIBAT_SMKLBR
                  |L1.12440|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12444|
                          DCD      Kibat1
                  |L1.12448|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.12452|
                          DCD      adc_buff_ext_
                  |L1.12456|
                          DCD      Kunet_ext
                  |L1.12460|
                          DCD      Uvv
                  |L1.12464|
                          DCD      Uvv0
                  |L1.12468|
                          DCD      net_U
                  |L1.12472|
                          DCD      eb2_data_short
                  |L1.12476|
                          DCD      Kvv_eb2
                  |L1.12480|
                          DCD      Uvv_eb2
                  |L1.12484|
                          DCD      Kpes_eb2
                  |L1.12488|
                          DCD      Upes_eb2
                  |L1.12492|
                          DCD      ibt
                  |L1.12496|
                          DCD      t_box
                  |L1.12500|
                          DCD      t_ext_can_nd
                  |L1.12504|
                          DCD      t_ext_can
                  |L1.12508|
                          DCD      BAT_IS_ON
                  |L1.12512|
0030e0  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
0030e4  f9b21008          LDRSH    r1,[r2,#8]  ; bat
0030e8  4288              CMP      r0,r1
0030ea  dd01              BLE      |L1.12528|
0030ec  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12528|
;;;3635   #endif
;;;3636   
;;;3637   #ifdef TELECORE
;;;3638   Ibmax=0;
;;;3639   /*
;;;3640   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3641   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3642   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3643   */
;;;3644   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3645   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3646   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3647   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3648   #endif
;;;3649   //Ibmax=bat[0]._Ib;
;;;3650   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3651   
;;;3652   #ifdef UKU_TELECORE2017
;;;3653   Ibmax=0;
;;;3654   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3655   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3656   #endif
;;;3657   
;;;3658   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3659   Ibmax=Ib_ips_termokompensat;
0030f0  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
0030f4  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3660   #endif
;;;3661   for(i=0;i<NUMIST;i++)
0030f8  f04f0100          MOV      r1,#0
0030fc  e02f              B        |L1.12638|
                  |L1.12542|
;;;3662   	{
;;;3663   	if(bps[i]._cnt<25)
0030fe  eb0100c1          ADD      r0,r1,r1,LSL #3
003102  eb001001          ADD      r0,r0,r1,LSL #4
003106  eb040080          ADD      r0,r4,r0,LSL #2
00310a  78c5              LDRB     r5,[r0,#3]
00310c  2d19              CMP      r5,#0x19
00310e  d21c              BCS      |L1.12618|
;;;3664        	{
;;;3665        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
003110  7985              LDRB     r5,[r0,#6]
003112  79c6              LDRB     r6,[r0,#7]
003114  eb052506          ADD      r5,r5,r6,LSL #8
003118  6245              STR      r5,[r0,#0x24]
;;;3666        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
00311a  7a05              LDRB     r5,[r0,#8]
00311c  7a46              LDRB     r6,[r0,#9]
00311e  eb052506          ADD      r5,r5,r6,LSL #8
003122  6205              STR      r5,[r0,#0x20]
;;;3667        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
003124  7a85              LDRB     r5,[r0,#0xa]
003126  7ac6              LDRB     r6,[r0,#0xb]
003128  eb052506          ADD      r5,r5,r6,LSL #8
00312c  61c5              STR      r5,[r0,#0x1c]
;;;3668        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
00312e  7b05              LDRB     r5,[r0,#0xc]
003130  6285              STR      r5,[r0,#0x28]
;;;3669        	bps[i]._adr_ee=bps[i]._buff[7];
003132  7b45              LDRB     r5,[r0,#0xd]
003134  f8805056          STRB     r5,[r0,#0x56]
;;;3670        	bps[i]._flags_tm=bps[i]._buff[8];
003138  7b85              LDRB     r5,[r0,#0xe]
00313a  f8805042          STRB     r5,[r0,#0x42]
;;;3671   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
00313e  7c05              LDRB     r5,[r0,#0x10]
003140  7c46              LDRB     r6,[r0,#0x11]
003142  eb052506          ADD      r5,r5,r6,LSL #8
003146  6505              STR      r5,[r0,#0x50]
003148  e006              B        |L1.12632|
                  |L1.12618|
;;;3672        	} 
;;;3673   	else 
;;;3674        	{
;;;3675        	bps[i]._Uii=0; 
00314a  61c3              STR      r3,[r0,#0x1c]
;;;3676        	bps[i]._Ii=0;
00314c  6243              STR      r3,[r0,#0x24]
;;;3677        	bps[i]._Uin=0;
00314e  6203              STR      r3,[r0,#0x20]
;;;3678        	bps[i]._Ti=0;
003150  6283              STR      r3,[r0,#0x28]
;;;3679        	bps[i]._flags_tm=0; 
003152  f8803042          STRB     r3,[r0,#0x42]
;;;3680   	     bps[i]._rotor=0;    
003156  6503              STR      r3,[r0,#0x50]
                  |L1.12632|
003158  f1010101          ADD      r1,r1,#1              ;3661
00315c  b2c9              UXTB     r1,r1                 ;3661
                  |L1.12638|
00315e  42b9              CMP      r1,r7                 ;3661
003160  dbcd              BLT      |L1.12542|
;;;3681        	}
;;;3682        
;;;3683        }
;;;3684   
;;;3685   load_I=0;
003162  4dfc              LDR      r5,|L1.13652|
;;;3686   #ifdef TELECORE
;;;3687   
;;;3688   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3689   	{
;;;3690   	load_I-=lakb[i]._ch_curr/10;
;;;3691   	}*/
;;;3692   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3693   #elif UKU_TELECORE2017
;;;3694   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3695   #else
;;;3696   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
003164  f9b21008          LDRSH    r1,[r2,#8]  ; bat
003168  f04f000a          MOV      r0,#0xa
00316c  fb91f1f0          SDIV     r1,r1,r0
003170  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
003174  fb92f0f0          SDIV     r0,r2,r0
003178  4408              ADD      r0,r0,r1
00317a  f1c00000          RSB      r0,r0,#0
00317e  b206              SXTH     r6,r0
003180  802e              STRH     r6,[r5,#0]
;;;3697   #endif
;;;3698   Isumm=0;
003182  4af5              LDR      r2,|L1.13656|
003184  8013              STRH     r3,[r2,#0]
;;;3699   
;;;3700   for(i=0;i<NUMIST;i++)
003186  f04f0000          MOV      r0,#0
00318a  e012              B        |L1.12722|
                  |L1.12684|
;;;3701        {
;;;3702        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
00318c  eb0001c0          ADD      r1,r0,r0,LSL #3
003190  eb011100          ADD      r1,r1,r0,LSL #4
003194  eb040181          ADD      r1,r4,r1,LSL #2
003198  f891c003          LDRB     r12,[r1,#3]
00319c  f1bc0f05          CMP      r12,#5
0031a0  d204              BCS      |L1.12716|
0031a2  6a49              LDR      r1,[r1,#0x24]
0031a4  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
0031a8  4461              ADD      r1,r1,r12
0031aa  8011              STRH     r1,[r2,#0]
                  |L1.12716|
0031ac  f1000001          ADD      r0,r0,#1              ;3700
0031b0  b2c0              UXTB     r0,r0                 ;3700
                  |L1.12722|
0031b2  42b8              CMP      r0,r7                 ;3700
0031b4  dbea              BLT      |L1.12684|
;;;3703        }  
;;;3704        
;;;3705   load_I=load_I+Isumm;
0031b6  8810              LDRH     r0,[r2,#0]  ; Isumm
0031b8  4430              ADD      r0,r0,r6
0031ba  b200              SXTH     r0,r0
0031bc  8028              STRH     r0,[r5,#0]
;;;3706   if(load_I<0)load_I=0;
0031be  2800              CMP      r0,#0
0031c0  da00              BGE      |L1.12740|
0031c2  802b              STRH     r3,[r5,#0]
                  |L1.12740|
;;;3707   
;;;3708   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3709   load_I=0;
0031c4  802b              STRH     r3,[r5,#0]
;;;3710   
;;;3711   Isumm=0;
0031c6  8013              STRH     r3,[r2,#0]
;;;3712   
;;;3713   for(i=0;i<NUMIST;i++)
0031c8  f04f0000          MOV      r0,#0
0031cc  e00f              B        |L1.12782|
                  |L1.12750|
;;;3714        {
;;;3715        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0031ce  eb0001c0          ADD      r1,r0,r0,LSL #3
0031d2  eb011100          ADD      r1,r1,r0,LSL #4
0031d6  eb040181          ADD      r1,r4,r1,LSL #2
0031da  78ce              LDRB     r6,[r1,#3]
0031dc  2e05              CMP      r6,#5
0031de  d203              BCS      |L1.12776|
0031e0  6a49              LDR      r1,[r1,#0x24]
0031e2  8816              LDRH     r6,[r2,#0]  ; Isumm
0031e4  4431              ADD      r1,r1,r6
0031e6  8011              STRH     r1,[r2,#0]
                  |L1.12776|
0031e8  f1000001          ADD      r0,r0,#1              ;3713
0031ec  b2c0              UXTB     r0,r0                 ;3713
                  |L1.12782|
0031ee  42b8              CMP      r0,r7                 ;3713
0031f0  dbed              BLT      |L1.12750|
;;;3716        }  
;;;3717        
;;;3718   load_I=load_I+Isumm;
0031f2  8811              LDRH     r1,[r2,#0]  ; Isumm
0031f4  eb030001          ADD      r0,r3,r1
0031f8  b200              SXTH     r0,r0
0031fa  8028              STRH     r0,[r5,#0]
;;;3719   if(load_I<0)load_I=0;
0031fc  2800              CMP      r0,#0
0031fe  da00              BGE      |L1.12802|
003200  802b              STRH     r3,[r5,#0]
                  |L1.12802|
;;;3720   
;;;3721   #endif
;;;3722   #ifdef IPS_SGEP_GAZPROM
;;;3723   load_I=Isumm;
;;;3724   #endif
;;;3725   
;;;3726   
;;;3727   #ifdef UKU_GLONASS
;;;3728   inv[0]._Uio=6;
;;;3729   if (NUMINV)
;;;3730   	{
;;;3731   	for(i=0;i<NUMINV;i++)
;;;3732   		{
;;;3733   		if(bps[i+first_inv_slot]._cnt<25)
;;;3734        		{
;;;3735        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3736        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3737        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3738        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3739        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3740   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3741   			inv[i]._cnt=0;    
;;;3742        		} 
;;;3743   		else 
;;;3744        		{
;;;3745        		inv[i]._Uio=0; 
;;;3746        		inv[i]._Ii=0;
;;;3747        		inv[i]._Uin=0;
;;;3748        		inv[i]._Ti=0;
;;;3749        		inv[i]._flags_tm=0; 
;;;3750   //	     	inv[i]._rotor0;
;;;3751   			inv[i]._cnt=25;    
;;;3752        		}
;;;3753        	}
;;;3754      	}
;;;3755   #endif
;;;3756   
;;;3757   #ifndef UKU_GLONASS
;;;3758   if (NUMINV)
003202  48d6              LDR      r0,|L1.13660|
003204  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
003208  2d00              CMP      r5,#0
00320a  d066              BEQ      |L1.13018|
;;;3759   	{
;;;3760   	for(i=0;i<NUMINV;i++)
00320c  f04f0200          MOV      r2,#0
;;;3761   		{
;;;3762   		if(bps[i+20]._cnt<25)
;;;3763        		{
;;;3764        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
003210  4ed3              LDR      r6,|L1.13664|
003212  e060              B        |L1.13014|
                  |L1.12820|
003214  f1020014          ADD      r0,r2,#0x14           ;3762
003218  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3762
00321c  eb011000          ADD      r0,r1,r0,LSL #4       ;3762
003220  eb040080          ADD      r0,r4,r0,LSL #2       ;3762
003224  78c1              LDRB     r1,[r0,#3]            ;3762
003226  2919              CMP      r1,#0x19              ;3762
003228  d239              BCS      |L1.12958|
00322a  7981              LDRB     r1,[r0,#6]
00322c  79c7              LDRB     r7,[r0,#7]
00322e  eb012707          ADD      r7,r1,r7,LSL #8
003232  eb020142          ADD      r1,r2,r2,LSL #1
003236  eb061141          ADD      r1,r6,r1,LSL #5
00323a  61cf              STR      r7,[r1,#0x1c]
;;;3765        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
00323c  7a07              LDRB     r7,[r0,#8]
00323e  f890c009          LDRB     r12,[r0,#9]
003242  eb07270c          ADD      r7,r7,r12,LSL #8
003246  62cf              STR      r7,[r1,#0x2c]
;;;3766        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
003248  7a87              LDRB     r7,[r0,#0xa]
00324a  f890c00b          LDRB     r12,[r0,#0xb]
00324e  eb07270c          ADD      r7,r7,r12,LSL #8
003252  618f              STR      r7,[r1,#0x18]
;;;3767        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
003254  7b07              LDRB     r7,[r0,#0xc]
003256  620f              STR      r7,[r1,#0x20]
;;;3768        		inv[i]._flags_tm=bps[i+20]._buff[7];
003258  7b47              LDRB     r7,[r0,#0xd]
00325a  f8817046          STRB     r7,[r1,#0x46]
;;;3769        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
00325e  7b87              LDRB     r7,[r0,#0xe]
003260  f890c00f          LDRB     r12,[r0,#0xf]
003264  eb07270c          ADD      r7,r7,r12,LSL #8
003268  628f              STR      r7,[r1,#0x28]
;;;3770        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
00326a  7c07              LDRB     r7,[r0,#0x10]
00326c  f890c011          LDRB     r12,[r0,#0x11]
003270  eb07270c          ADD      r7,r7,r12,LSL #8
003274  624f              STR      r7,[r1,#0x24]
;;;3771   			inv[i]._cnt=0;
003276  708b              STRB     r3,[r1,#2]
;;;3772   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
003278  7c87              LDRB     r7,[r0,#0x12]
00327a  f8817059          STRB     r7,[r1,#0x59]
;;;3773   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
00327e  7cc7              LDRB     r7,[r0,#0x13]
003280  f881705a          STRB     r7,[r1,#0x5a]
;;;3774   			inv[i]._Pnom=bps[i+20]._buff[14]; 
003284  7d07              LDRB     r7,[r0,#0x14]
003286  f8817058          STRB     r7,[r1,#0x58]
;;;3775   			inv[i]._net_contr_en=bps[i+20]._buff[15];
00328a  7d47              LDRB     r7,[r0,#0x15]
00328c  f881705b          STRB     r7,[r1,#0x5b]
;;;3776   			inv[i]._pwm_en=bps[i+20]._buff[16];  
003290  7d87              LDRB     r7,[r0,#0x16]
003292  f881705c          STRB     r7,[r1,#0x5c]
;;;3777   			inv[i]._phase_mode=bps[i+20]._buff[17];  
003296  7dc0              LDRB     r0,[r0,#0x17]
003298  f881005d          STRB     r0,[r1,#0x5d]
00329c  e018              B        |L1.13008|
                  |L1.12958|
;;;3778        		} 
;;;3779   		else 
;;;3780        		{
;;;3781         		inv[i]._Ii=0;
00329e  eb020042          ADD      r0,r2,r2,LSL #1
0032a2  eb061040          ADD      r0,r6,r0,LSL #5
0032a6  61c3              STR      r3,[r0,#0x1c]
;;;3782   			inv[i]._Pio=0;
0032a8  62c3              STR      r3,[r0,#0x2c]
;;;3783   			inv[i]._Uio=0;
0032aa  6183              STR      r3,[r0,#0x18]
;;;3784        		inv[i]._Ti=0;
0032ac  6203              STR      r3,[r0,#0x20]
;;;3785        		inv[i]._flags_tm=0; 
0032ae  f8803046          STRB     r3,[r0,#0x46]
;;;3786        		inv[i]._Uil=0;
0032b2  6243              STR      r3,[r0,#0x24]
;;;3787        		inv[i]._Uin=0;
0032b4  6283              STR      r3,[r0,#0x28]
;;;3788   			inv[i]._cnt=25; 
0032b6  f04f0119          MOV      r1,#0x19
0032ba  7081              STRB     r1,[r0,#2]
;;;3789   			inv[i]._Uoutmin=0; 
0032bc  f8803059          STRB     r3,[r0,#0x59]
;;;3790   			inv[i]._Uoutmax=0; 
0032c0  f880305a          STRB     r3,[r0,#0x5a]
;;;3791   			inv[i]._Pnom=0; 
0032c4  f8803058          STRB     r3,[r0,#0x58]
;;;3792   			inv[i]._net_contr_en=0;
0032c8  f880305b          STRB     r3,[r0,#0x5b]
;;;3793   			inv[i]._pwm_en=0;   
0032cc  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13008|
0032d0  f1020201          ADD      r2,r2,#1              ;3760
0032d4  b2d2              UXTB     r2,r2                 ;3760
                  |L1.13014|
0032d6  42aa              CMP      r2,r5                 ;3760
0032d8  db9c              BLT      |L1.12820|
                  |L1.13018|
;;;3794   			   
;;;3795        		}
;;;3796        	}
;;;3797      	}
;;;3798   #endif
;;;3799   
;;;3800   #ifdef GLADKOV
;;;3801   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3802   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3803   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3804   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3805   inv[0]._flags_tm=bps[4]._buff[7];
;;;3806   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3807   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3808   inv[0]._cnt=0;    
;;;3809   
;;;3810   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3811   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3812   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3813   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3814   inv[1]._flags_tm=bps[21]._buff[7];
;;;3815   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3816   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3817   inv[1]._cnt=0;    
;;;3818   #endif
;;;3819   
;;;3820   /*
;;;3821   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3822   	{
;;;3823   	lakb[0]._battCommState=0;
;;;3824   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3825   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3826   	
;;;3827   	if(lakb[0]._battCommState==0)
;;;3828   		{	
;;;3829   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3830   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3831   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3832   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3833   		}
;;;3834   	}
;;;3835   */
;;;3836   
;;;3837   #ifdef UKU_TELECORE2015
;;;3838   
;;;3839   	if(BAT_TYPE==2)
;;;3840   		{
;;;3841   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3842   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3843   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3844   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3845   		
;;;3846   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3847   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3848   	
;;;3849   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3850   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3851   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3852   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3853   	
;;;3854   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3855   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3856   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3857   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3858   	
;;;3859   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3860   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3861   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3862   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3863   	
;;;3864   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3865   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3866   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3867   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3868   	
;;;3869   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3870   	
;;;3871   	
;;;3872   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3873   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3874   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3875   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3876   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3877   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3878   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3879   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3880   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3881   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3882   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3883   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3884   	
;;;3885   		if(lakb[i]._rat_cap==0)
;;;3886   			{
;;;3887   			if(lakb[i]._isOnCnt)
;;;3888   				{
;;;3889   				lakb[i]._isOnCnt--;
;;;3890   				if(lakb[i]._isOnCnt==0)
;;;3891   					{
;;;3892   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3893   					}
;;;3894   				}
;;;3895   			}
;;;3896   		else 
;;;3897   			{
;;;3898   			if(lakb[i]._isOnCnt<50)
;;;3899   				{
;;;3900   				lakb[i]._isOnCnt++;
;;;3901   				if(lakb[i]._isOnCnt==50)
;;;3902   					{
;;;3903   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3904   					}
;;;3905   				}
;;;3906   			}
;;;3907   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3908   		}
;;;3909   	else if(BAT_TYPE==3)
;;;3910   		{
;;;3911   		//short numOfPacks;
;;;3912   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3913   		
;;;3914   		#ifndef UKU_TELECORE2016
;;;3915   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3916   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3917   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3918   		if(numOfPacks)numOfPacks-=1;
;;;3919   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3920   		plazma_numOfCells=numOfCells;
;;;3921   		plazma_numOfTemperCells=numOfTemperCells;
;;;3922   		plazma_numOfPacks=numOfPacks;
;;;3923   
;;;3924   
;;;3925   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3926   
;;;3927   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3928   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3929   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3930   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3931   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3932   							);	  
;;;3933   
;;;3934   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3935   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3936   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3937   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3938   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3939   							)/10;
;;;3940   
;;;3941   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3942   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3943   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3944   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3945   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3946   							)-2730;
;;;3947   
;;;3948   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3949   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3950   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3951   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3952   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3953   							)/10;
;;;3954   
;;;3955   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3956   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3957   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3958   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3959   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3960   							)/10;
;;;3961   		#endif
;;;3962   		
;;;3963   		#ifdef UKU_TELECORE2016
;;;3964   		{
;;;3965   		char i;
;;;3966   		
;;;3967   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3968   			{
;;;3969   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3970   			}
;;;3971   		}
;;;3972   		#endif
;;;3973   		
;;;3974   										  
;;;3975   		}
;;;3976   	
;;;3977   if(sacredSunSilentCnt<3) 
;;;3978   	{
;;;3979       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3980       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3981      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3982   	}
;;;3983   else 
;;;3984   	{
;;;3985       	//bat[0]._Ub=0;
;;;3986       	//bat[0]._Tb=0;
;;;3987      	//bat[0]._Ib=0;
;;;3988   	}
;;;3989   
;;;3990   if(BAT_TYPE==1)
;;;3991   	{
;;;3992   	char i;
;;;3993   	for(i=0;i<1;i++)
;;;3994   		{
;;;3995   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3996   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3997   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3998   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3999   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4000   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4001   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4002   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4003   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4004   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4005   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4006   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4007   		lakb[i]._flags1= lakb_damp[i][34];
;;;4008   		lakb[i]._flags2= lakb_damp[i][35];
;;;4009   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4010   
;;;4011   /*		if(lakb[i]._rat_cap==0)
;;;4012   			{
;;;4013   			if(lakb[i]._isOnCnt)
;;;4014   				{
;;;4015   				lakb[i]._isOnCnt--;
;;;4016   				if(lakb[i]._isOnCnt==0)
;;;4017   					{
;;;4018   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4019   					}
;;;4020   				}
;;;4021   			}
;;;4022   		else 
;;;4023   			{
;;;4024   			if(lakb[i]._isOnCnt<50)
;;;4025   				{
;;;4026   				lakb[i]._isOnCnt++;
;;;4027   				if(lakb[i]._isOnCnt==50)
;;;4028   					{
;;;4029   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4030   					}
;;;4031   				}
;;;4032   			} */
;;;4033   		gran(&lakb[i]._isOnCnt,0,50);
;;;4034   	 	}
;;;4035   
;;;4036   	if(lakb_damp[0][41]==100)
;;;4037   		{
;;;4038   		li_bat._485Error=1;
;;;4039   		}
;;;4040   	if(lakb_damp[0][41]==0)
;;;4041   		{
;;;4042   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4043   		li_bat._485Error=0;
;;;4044   		}
;;;4045   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4046   
;;;4047   
;;;4048   	}
;;;4049   
;;;4050   
;;;4051   #endif
;;;4052   
;;;4053   		#ifdef UKU_TELECORE2017
;;;4054   		{
;;;4055   		char i;
;;;4056   		
;;;4057   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4058   			{
;;;4059   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4060   			}
;;;4061   		}
;;;4062   		#endif
;;;4063   #ifdef UKU_TELECORE2015
;;;4064   //вычисление параметров работы батареи
;;;4065   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4066   li_bat._batStat=bsOK;
;;;4067   if(BAT_TYPE==1) //COSLIGHT
;;;4068   	{
;;;4069   	if(li_bat._batStat==bsOK)
;;;4070   		{
;;;4071   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4072   
;;;4073   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4074   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4075   	
;;;4076   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4077   		li_bat._soc=lakb[0]._s_o_c;
;;;4078   		li_bat._soh=lakb[0]._s_o_h;
;;;4079   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4080   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4081   		li_bat._rbt=lakb[0]._r_b_t;
;;;4082   		}
;;;4083   	else 
;;;4084   		{
;;;4085   		li_bat._Ub=bat[0]._Ub;
;;;4086   		li_bat._Ib=bat[0]._Ib/10;
;;;4087   		li_bat._Tb=bat[0]._Tb;
;;;4088   		}
;;;4089   
;;;4090   	if((li_bat._485Error)||(li_bat._canError))
;;;4091   		{
;;;4092   		li_bat._batStat=bsOFF;
;;;4093   		}
;;;4094   	else li_bat._batStat=bsOK;
;;;4095   	}
;;;4096   else if(BAT_TYPE==2) //SACRED SUN
;;;4097   	{
;;;4098   	}
;;;4099   else if(BAT_TYPE==3) //ZTT
;;;4100   	{
;;;4101   	if(li_bat._batStat==bsOK)
;;;4102   		{
;;;4103   
;;;4104   		}
;;;4105   	}
;;;4106   #endif
;;;4107   
;;;4108   
;;;4109   /*
;;;4110   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4111   	{
;;;4112   
;;;4113   
;;;4114   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4115   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4116   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4117   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4118   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4119   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4120   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4121   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4122   
;;;4123   	tempSS=0;
;;;4124   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4125   
;;;4126   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4127   
;;;4128   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4129   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4130   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4131   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4132   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4133   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4134   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4135   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4136   
;;;4137   	tempSS=0;
;;;4138   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4139   
;;;4140   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4141   
;;;4142   
;;;4143   	}*/
;;;4144   }
0032da  b007              ADD      sp,sp,#0x1c
0032dc  e8bd8ff0          POP      {r4-r11,pc}
;;;4145   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4205   //-----------------------------------------------
;;;4206   void mnemo_hndl(void)
0032e0  4aa0              LDR      r2,|L1.13668|
;;;4207   {
;;;4208   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4209   	{
;;;4210   	if(mnemo_cnt)mnemo_cnt--;
0032e2  49a1              LDR      r1,|L1.13672|
0032e4  7810              LDRB     r0,[r2,#0]            ;4208  ; a_ind
0032e6  2804              CMP      r0,#4                 ;4208
0032e8  d001              BEQ      |L1.13038|
0032ea  2801              CMP      r0,#1                 ;4208
0032ec  d105              BNE      |L1.13050|
                  |L1.13038|
0032ee  7850              LDRB     r0,[r2,#1]            ;4208  ; a_ind
0032f0  b918              CBNZ     r0,|L1.13050|
0032f2  489e              LDR      r0,|L1.13676|
0032f4  7800              LDRB     r0,[r0,#0]            ;4208  ; MNEMO_ON
0032f6  2855              CMP      r0,#0x55              ;4208
0032f8  d003              BEQ      |L1.13058|
                  |L1.13050|
;;;4211   	}
;;;4212   else mnemo_cnt=MNEMO_TIME;
0032fa  489d              LDR      r0,|L1.13680|
0032fc  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0032fe  7008              STRB     r0,[r1,#0]
                  |L1.13056|
;;;4213   }
003300  4770              BX       lr
                  |L1.13058|
003302  7808              LDRB     r0,[r1,#0]            ;4210  ; mnemo_cnt
003304  2800              CMP      r0,#0                 ;4210
003306  d0fb              BEQ      |L1.13056|
003308  f1a00001          SUB      r0,r0,#1              ;4210
00330c  7008              STRB     r0,[r1,#0]            ;4210
00330e  4770              BX       lr
;;;4214   
                          ENDP

                  apv_start PROC
;;;4215   //-----------------------------------------------
;;;4216   void apv_start(char in)
003310  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4217   {
;;;4218   if(	(bps[in]._apv_timer_1_lev==0)&&
003314  eb011100          ADD      r1,r1,r0,LSL #4
003318  4896              LDR      r0,|L1.13684|
00331a  eb000081          ADD      r0,r0,r1,LSL #2
00331e  f890105e          LDRB     r1,[r0,#0x5e]
003322  2900              CMP      r1,#0
003324  d115              BNE      |L1.13138|
;;;4219   	(bps[in]._apv_cnt_1_lev==0)&&
003326  f890105f          LDRB     r1,[r0,#0x5f]
00332a  2900              CMP      r1,#0
00332c  d111              BNE      |L1.13138|
;;;4220   	(bps[in]._apv_timer_2_lev==0) )
00332e  f8b01060          LDRH     r1,[r0,#0x60]
003332  2900              CMP      r1,#0
003334  d10d              BNE      |L1.13138|
;;;4221   		{
;;;4222    		bps[in]._apv_timer_1_lev=60;
003336  f04f013c          MOV      r1,#0x3c
00333a  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4223   		bps[in]._apv_cnt_1_lev=3;
00333e  f04f0103          MOV      r1,#3
003342  7041              STRB     r1,[r0,#1]
;;;4224   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
003344  498c              LDR      r1,|L1.13688|
003346  f44f6261          MOV      r2,#0xe10
00334a  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
00334c  fb01f102          MUL      r1,r1,r2
003350  8041              STRH     r1,[r0,#2]
                  |L1.13138|
;;;4225   		}
;;;4226   }
003352  4770              BX       lr
;;;4227   
                          ENDP

                  apv_stop PROC
;;;4228   //-----------------------------------------------
;;;4229   void apv_stop(char in)
003354  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4230   {
;;;4231   bps[in]._apv_timer_1_lev=0;
003358  eb021200          ADD      r2,r2,r0,LSL #4
00335c  4885              LDR      r0,|L1.13684|
00335e  f04f0100          MOV      r1,#0
003362  eb000082          ADD      r0,r0,r2,LSL #2
003366  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4232   bps[in]._apv_cnt_1_lev=0;
00336a  7041              STRB     r1,[r0,#1]
;;;4233   bps[in]._apv_timer_2_lev=0;
00336c  8041              STRH     r1,[r0,#2]
;;;4234   }
00336e  4770              BX       lr
;;;4235   
                          ENDP

                  apv_drv PROC
;;;4236   //-----------------------------------------------
;;;4237   void apv_drv(void)		//1 Гц
003370  e92d43f0          PUSH     {r4-r9,lr}
;;;4238   {
;;;4239   for(i=0;i<NUMIST;i++)
003374  4e81              LDR      r6,|L1.13692|
003376  f04f0300          MOV      r3,#0
00337a  75f3              STRB     r3,[r6,#0x17]
;;;4240   	{
;;;4241   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4242   		{
;;;4243   		bps[i]._apv_timer_1_lev=0;
;;;4244   		bps[i]._apv_cnt_1_lev=0;
;;;4245   		bps[i]._apv_timer_2_lev=0;
;;;4246   		}
;;;4247   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
00337c  4c80              LDR      r4,|L1.13696|
;;;4248   		{
;;;4249   		bps[i]._apv_timer_2_lev=0;
;;;4250   		}
;;;4251   
;;;4252   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4253   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4254   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4255   			{
;;;4256   			if(bps[i]._state==bsWRK)
;;;4257   				{
;;;4258   				if(bps[i]._apv_succes_timer<60)
;;;4259   					{
;;;4260   					bps[i]._apv_succes_timer++;
;;;4261   					if(bps[i]._apv_succes_timer>=60)
;;;4262   						{
;;;4263   						apv_stop(i);
;;;4264   						}
;;;4265   					}
;;;4266   				}
;;;4267   			else bps[i]._apv_succes_timer=0;
;;;4268   			}
;;;4269   
;;;4270   	if(bps[i]._apv_timer_1_lev)
;;;4271   		{
;;;4272   		bps[i]._apv_timer_2_lev=0;
;;;4273   		bps[i]._apv_timer_1_lev--;
;;;4274   		if(bps[i]._apv_timer_1_lev==0)
;;;4275   			{
;;;4276   			if(bps[i]._apv_cnt_1_lev)
;;;4277   				{
;;;4278   				bps[i]._apv_cnt_1_lev--;
;;;4279   				bps[i]._apv_timer_1_lev=60;
00337e  f04f073c          MOV      r7,#0x3c
;;;4280   				bps[i]._apv_reset_av_timer=2;
003382  f04f0802          MOV      r8,#2
003386  4d7b              LDR      r5,|L1.13684|
003388  f8df91f8          LDR      r9,|L1.13700|
00338c  e079              B        |L1.13442|
                  |L1.13198|
00338e  497e              LDR      r1,|L1.13704|
003390  7809              LDRB     r1,[r1,#0]            ;4241  ; APV_ON1
003392  b949              CBNZ     r1,|L1.13224|
003394  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4243
003398  eb011100          ADD      r1,r1,r0,LSL #4       ;4243
00339c  eb050181          ADD      r1,r5,r1,LSL #2       ;4243
0033a0  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4243
0033a4  704b              STRB     r3,[r1,#1]            ;4244
0033a6  804b              STRH     r3,[r1,#2]            ;4245
                  |L1.13224|
0033a8  7821              LDRB     r1,[r4,#0]            ;4247  ; APV_ON2
0033aa  b939              CBNZ     r1,|L1.13244|
0033ac  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4249
0033b0  eb011100          ADD      r1,r1,r0,LSL #4       ;4249
0033b4  eb050181          ADD      r1,r5,r1,LSL #2       ;4249
0033b8  f8a13060          STRH     r3,[r1,#0x60]         ;4249
                  |L1.13244|
0033bc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4252
0033c0  eb011100          ADD      r1,r1,r0,LSL #4       ;4252
0033c4  eb050181          ADD      r1,r5,r1,LSL #2       ;4252
0033c8  f891205e          LDRB     r2,[r1,#0x5e]         ;4252
0033cc  b92a              CBNZ     r2,|L1.13274|
0033ce  f891205f          LDRB     r2,[r1,#0x5f]         ;4253
0033d2  b912              CBNZ     r2,|L1.13274|
0033d4  f8b12060          LDRH     r2,[r1,#0x60]         ;4254
0033d8  b122              CBZ      r2,|L1.13284|
                  |L1.13274|
0033da  788a              LDRB     r2,[r1,#2]            ;4256
0033dc  2a01              CMP      r2,#1                 ;4256
0033de  d014              BEQ      |L1.13322|
0033e0  f8813063          STRB     r3,[r1,#0x63]         ;4267
                  |L1.13284|
0033e4  7df1              LDRB     r1,[r6,#0x17]         ;4270  ; i
0033e6  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4270
0033ea  eb001001          ADD      r0,r0,r1,LSL #4       ;4270
0033ee  eb050080          ADD      r0,r5,r0,LSL #2       ;4270
0033f2  f890205e          LDRB     r2,[r0,#0x5e]         ;4270
0033f6  b30a              CBZ      r2,|L1.13372|
0033f8  f8a03060          STRH     r3,[r0,#0x60]         ;4272
0033fc  f1a20201          SUB      r2,r2,#1              ;4273
003400  b2d2              UXTB     r2,r2                 ;4273
003402  f880205e          STRB     r2,[r0,#0x5e]         ;4273
003406  b172              CBZ      r2,|L1.13350|
003408  e024              B        |L1.13396|
                  |L1.13322|
00340a  f8912063          LDRB     r2,[r1,#0x63]         ;4258
00340e  2a3c              CMP      r2,#0x3c              ;4258
003410  d2e8              BCS      |L1.13284|
003412  f1020201          ADD      r2,r2,#1              ;4260
003416  b2d2              UXTB     r2,r2                 ;4260
003418  f8812063          STRB     r2,[r1,#0x63]         ;4260
00341c  2a3c              CMP      r2,#0x3c              ;4261
00341e  d3e1              BCC      |L1.13284|
003420  f7fffffe          BL       apv_stop
003424  e7de              B        |L1.13284|
                  |L1.13350|
003426  f890205f          LDRB     r2,[r0,#0x5f]         ;4276
00342a  b142              CBZ      r2,|L1.13374|
00342c  f1a20201          SUB      r2,r2,#1              ;4278
003430  f880205f          STRB     r2,[r0,#0x5f]         ;4278
003434  f880705e          STRB     r7,[r0,#0x5e]         ;4279
003438  f8808062          STRB     r8,[r0,#0x62]
                  |L1.13372|
00343c  e00a              B        |L1.13396|
                  |L1.13374|
;;;4281   				}
;;;4282   			else
;;;4283   				{
;;;4284   				if(APV_ON2==apvON)
00343e  7822              LDRB     r2,[r4,#0]  ; APV_ON2
003440  2a01              CMP      r2,#1
003442  d107              BNE      |L1.13396|
;;;4285   					{
;;;4286   					bps[i]._apv_timer_1_lev=0;
;;;4287   					bps[i]._apv_cnt_1_lev=0;
;;;4288   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
003444  4a4c              LDR      r2,|L1.13688|
003446  f44f6c61          MOV      r12,#0xe10
00344a  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
00344c  fb02f20c          MUL      r2,r2,r12
003450  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.13396|
;;;4289   					}
;;;4290   				}
;;;4291   			
;;;4292   			}
;;;4293   		}
;;;4294   	if(bps[i]._apv_timer_2_lev)
003454  f8b02060          LDRH     r2,[r0,#0x60]
003458  b14a              CBZ      r2,|L1.13422|
;;;4295   		{
;;;4296   		bps[i]._apv_timer_2_lev--;
00345a  f1a20201          SUB      r2,r2,#1
00345e  b292              UXTH     r2,r2
003460  f8a02060          STRH     r2,[r0,#0x60]
;;;4297   		if(bps[i]._apv_timer_2_lev==0)
003464  b91a              CBNZ     r2,|L1.13422|
;;;4298   			{
;;;4299   			bps[i]._apv_cnt_1_lev=2;
003466  f880805f          STRB     r8,[r0,#0x5f]
;;;4300   			bps[i]._apv_timer_1_lev=60;
00346a  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.13422|
;;;4301   			}
;;;4302   		}
;;;4303   
;;;4304   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
00346e  f8902062          LDRB     r2,[r0,#0x62]
003472  b11a              CBZ      r2,|L1.13436|
003474  f1a20201          SUB      r2,r2,#1
003478  f8802062          STRB     r2,[r0,#0x62]
                  |L1.13436|
00347c  f1010101          ADD      r1,r1,#1              ;4239
003480  75f1              STRB     r1,[r6,#0x17]         ;4239
                  |L1.13442|
003482  7df0              LDRB     r0,[r6,#0x17]         ;4239  ; i
003484  f9b91000          LDRSH    r1,[r9,#0]            ;4239  ; NUMIST
003488  4288              CMP      r0,r1                 ;4239
00348a  db80              BLT      |L1.13198|
;;;4305   	} 
;;;4306   /*char i;
;;;4307   for(i=0;i<2;i++) 
;;;4308   	{
;;;4309   	if(apv_cnt_sec[i])
;;;4310   		{
;;;4311   		apv_cnt_sec[i]--;
;;;4312   		if(apv_cnt_sec[i]==0)
;;;4313   			{
;;;4314   			cnt_av_umax[i]=0;
;;;4315   			cnt_av_umin[i]=0;
;;;4316   			reset_apv_cnt[i]=600;
;;;4317   			}
;;;4318   		}
;;;4319   	
;;;4320   	if(reset_apv_cnt[i])
;;;4321   		{
;;;4322   		reset_apv_cnt[i]--;
;;;4323   		if(reset_apv_cnt[i]==0)
;;;4324   			{
;;;4325   			apv_cnt[i]=0;
;;;4326   			}
;;;4327   		}	
;;;4328   		
;;;4329   	if(hour_apv_cnt[i])
;;;4330   		{
;;;4331   		hour_apv_cnt[i]--;
;;;4332   		if(hour_apv_cnt[i]==0)
;;;4333   			{
;;;4334   			apv_cnt[i]=0;
;;;4335   			avar_src_reset(i);
;;;4336   			}
;;;4337   		}			
;;;4338   	}
;;;4339   
;;;4340   
;;;4341   
;;;4342   
;;;4343   if(apv_cnt_1)
;;;4344   	{
;;;4345   	apv_cnt_1--;
;;;4346   	if(!apv_cnt_1) 
;;;4347   		{
;;;4348   		avar_src_reset(0);
;;;4349   		avar_src_reset(1);
;;;4350   		//cntrl_stat=0;
;;;4351   		}
;;;4352   	}*/		
;;;4353   }
00348c  e8bd83f0          POP      {r4-r9,pc}
;;;4354   
                          ENDP

                  adc_init PROC
;;;4355   //-----------------------------------------------
;;;4356   void adc_init(void)
003490  483e              LDR      r0,|L1.13708|
;;;4357   {
;;;4358   
;;;4359   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
003492  6841              LDR      r1,[r0,#4]
003494  f4212140          BIC      r1,r1,#0xc0000
003498  f4412180          ORR      r1,r1,#0x40000
00349c  6041              STR      r1,[r0,#4]
;;;4360   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
00349e  6841              LDR      r1,[r0,#4]
0034a0  f4213140          BIC      r1,r1,#0x30000
0034a4  f4413180          ORR      r1,r1,#0x10000
0034a8  6041              STR      r1,[r0,#4]
;;;4361   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0034aa  6841              LDR      r1,[r0,#4]
0034ac  f4214140          BIC      r1,r1,#0xc000
0034b0  f4414180          ORR      r1,r1,#0x4000
0034b4  6041              STR      r1,[r0,#4]
;;;4362   
;;;4363   
;;;4364   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0034b6  6c41              LDR      r1,[r0,#0x44]
0034b8  f4212140          BIC      r1,r1,#0xc0000
0034bc  f4412100          ORR      r1,r1,#0x80000
0034c0  6441              STR      r1,[r0,#0x44]
;;;4365   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0034c2  6c41              LDR      r1,[r0,#0x44]
0034c4  f4213140          BIC      r1,r1,#0x30000
0034c8  f4413100          ORR      r1,r1,#0x20000
0034cc  6441              STR      r1,[r0,#0x44]
;;;4366   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
0034ce  6c41              LDR      r1,[r0,#0x44]
0034d0  f4214140          BIC      r1,r1,#0xc000
0034d4  f4414100          ORR      r1,r1,#0x8000
0034d8  6441              STR      r1,[r0,#0x44]
;;;4367   
;;;4368   SET_REG(LPC_ADC->ADCR,0,24,3);
0034da  482d              LDR      r0,|L1.13712|
0034dc  6801              LDR      r1,[r0,#0]
0034de  f02161e0          BIC      r1,r1,#0x7000000
0034e2  6001              STR      r1,[r0,#0]
;;;4369   
;;;4370   SET_REG(LPC_ADC->ADCR,1,21,1);
0034e4  6801              LDR      r1,[r0,#0]
0034e6  f4411100          ORR      r1,r1,#0x200000
0034ea  6001              STR      r1,[r0,#0]
;;;4371   SET_REG(LPC_ADC->ADCR,0,16,1);
0034ec  6801              LDR      r1,[r0,#0]
0034ee  f4213180          BIC      r1,r1,#0x10000
0034f2  6001              STR      r1,[r0,#0]
;;;4372   SET_REG(LPC_ADC->ADCR,1,8,8);
0034f4  6801              LDR      r1,[r0,#0]
0034f6  f421417f          BIC      r1,r1,#0xff00
0034fa  f4417180          ORR      r1,r1,#0x100
0034fe  6001              STR      r1,[r0,#0]
;;;4373   
;;;4374   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4375   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4376   	
;;;4377   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4378        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4379        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4380   
;;;4381   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003500  f44f7180          MOV      r1,#0x100
003504  60c1              STR      r1,[r0,#0xc]
003506  4823              LDR      r0,|L1.13716|
003508  f44f0180          MOV      r1,#0x400000
00350c  6001              STR      r1,[r0,#0]
;;;4382   
;;;4383   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4384   
;;;4385   
;;;4386   }
00350e  4770              BX       lr
;;;4387   
                          ENDP

                  adc_drv7 PROC
;;;4388   //-----------------------------------------------
;;;4389   void adc_drv7(void) //(Uсети - постоянка)
003510  e92d41f0          PUSH     {r4-r8,lr}
;;;4390   {
;;;4391   //int temp_S;
;;;4392   //char i;
;;;4393   //signed short temp_SS;
;;;4394   
;;;4395   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
003514  4c19              LDR      r4,|L1.13692|
003516  34ee              ADDS     r4,r4,#0xee
003518  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
00351a  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00351c  1a40              SUBS     r0,r0,r1
00351e  b200              SXTH     r0,r0
003520  f7fffffe          BL       abs_pal
003524  1da6              ADDS     r6,r4,#6
003526  8030              STRH     r0,[r6,#0]
;;;4396   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003528  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
00352a  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00352c  1a40              SUBS     r0,r0,r1
00352e  b200              SXTH     r0,r0
003530  f7fffffe          BL       abs_pal
003534  8070              STRH     r0,[r6,#2]
;;;4397   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
003536  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003538  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00353a  1a40              SUBS     r0,r0,r1
00353c  b200              SXTH     r0,r0
00353e  f7fffffe          BL       abs_pal
003542  80b0              STRH     r0,[r6,#4]
;;;4398   
;;;4399   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4400   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4401   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4402   
;;;4403   
;;;4404   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
003544  f44f7196          MOV      r1,#0x12c
;;;4405   	{
;;;4406   	adc_result=adc_self_ch_buff[2];
003548  4d0c              LDR      r5,|L1.13692|
00354a  4288              CMP      r0,r1                 ;4404
00354c  da24              BGE      |L1.13720|
00354e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003550  87a8              STRH     r0,[r5,#0x3c]
003552  e02e              B        |L1.13746|
                  |L1.13652|
                          DCD      load_I
                  |L1.13656|
                          DCD      Isumm
                  |L1.13660|
                          DCD      NUMINV
                  |L1.13664|
                          DCD      inv
                  |L1.13668|
                          DCD      a_ind
                  |L1.13672|
                          DCD      mnemo_cnt
                  |L1.13676|
                          DCD      MNEMO_ON
                  |L1.13680|
                          DCD      MNEMO_TIME
                  |L1.13684|
                          DCD      bps
                  |L1.13688|
                          DCD      APV_ON2_TIME
                  |L1.13692|
                          DCD      ||area_number.25||
                  |L1.13696|
                          DCD      APV_ON2
                  |L1.13700|
                          DCD      NUMIST
                  |L1.13704|
                          DCD      APV_ON1
                  |L1.13708|
                          DCD      0x4002c000
                  |L1.13712|
                          DCD      0x40034000
                  |L1.13716|
                          DCD      0xe000e100
                  |L1.13720|
;;;4407   	} 
;;;4408   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
003598  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
00359c  4288              CMP      r0,r1
00359e  da02              BGE      |L1.13734|
;;;4409   	{
;;;4410   	adc_result=adc_self_ch_buff[1];
0035a0  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0035a2  87a8              STRH     r0,[r5,#0x3c]
0035a4  e005              B        |L1.13746|
                  |L1.13734|
;;;4411   	}
;;;4412   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0035a6  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0035aa  4288              CMP      r0,r1
0035ac  da01              BGE      |L1.13746|
;;;4413   	{
;;;4414   	adc_result=adc_self_ch_buff[0];
0035ae  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0035b0  87a8              STRH     r0,[r5,#0x3c]
                  |L1.13746|
;;;4415   	}
;;;4416       //adc_result=92;
;;;4417   
;;;4418   if(adc_ch_net)
0035b2  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
0035b4  2600              MOVS     r6,#0
0035b6  b347              CBZ      r7,|L1.13834|
;;;4419   	{
;;;4420   
;;;4421   	main_power_buffer[0]+=(long)(adc_result);
0035b8  48f8              LDR      r0,|L1.14748|
0035ba  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0035be  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0035c0  440a              ADD      r2,r2,r1
0035c2  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4422   	main_power_buffer[1]+=(long)(adc_result);
0035c4  6842              LDR      r2,[r0,#4]  ; main_power_buffer
0035c6  440a              ADD      r2,r2,r1
0035c8  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4423   	main_power_buffer[2]+=(long)(adc_result);
0035ca  6882              LDR      r2,[r0,#8]  ; main_power_buffer
0035cc  440a              ADD      r2,r2,r1
0035ce  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4424   	main_power_buffer[3]+=(long)(adc_result);
0035d0  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
0035d2  4411              ADD      r1,r1,r2
0035d4  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4425   
;;;4426   	adc_net_buff_cnt++;
0035d6  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
0035da  f1010101          ADD      r1,r1,#1
0035de  b209              SXTH     r1,r1
0035e0  f8a51044          STRH     r1,[r5,#0x44]
;;;4427   	if(adc_net_buff_cnt>=0x1000)
0035e4  f5b15f80          CMP      r1,#0x1000
0035e8  db01              BLT      |L1.13806|
;;;4428   		{
;;;4429   		adc_net_buff_cnt=0;
0035ea  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.13806|
;;;4430   		}
;;;4431   	if((adc_net_buff_cnt&0x03ff)==0)
0035ee  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
0035f2  058a              LSLS     r2,r1,#22
0035f4  d131              BNE      |L1.13914|
;;;4432   		{
;;;4433   		#ifdef UKU_220
;;;4434   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4435   		#else
;;;4436   		#ifdef UKU_220_V2
;;;4437   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4438   		#else
;;;4439   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
0035f6  ea4f21a1          ASR      r1,r1,#10
0035fa  f8502021          LDR      r2,[r0,r1,LSL #2]
0035fe  ea4f2222          ASR      r2,r2,#8
003602  876a              STRH     r2,[r5,#0x3a]
;;;4440   		#endif
;;;4441   		#endif
;;;4442   		main_power_buffer[adc_net_buff_cnt>>10]=0;
003604  f8406021          STR      r6,[r0,r1,LSL #2]
003608  e027              B        |L1.13914|
                  |L1.13834|
;;;4443   		}
;;;4444   
;;;4445   
;;;4446   	} 
;;;4447   else if(!adc_ch_net)
;;;4448   	{
;;;4449   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
00360a  48e5              LDR      r0,|L1.14752|
00360c  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
00360e  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
003610  eb001384          ADD      r3,r0,r4,LSL #6
003614  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
003618  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4450   	
;;;4451   	if((adc_ch_cnt&0x03)==0)
00361c  0790              LSLS     r0,r2,#30
00361e  d10f              BNE      |L1.13888|
;;;4452   		{
;;;4453   		long temp_L;
;;;4454   		char i;
;;;4455   		temp_L=0;
003620  4601              MOV      r1,r0
                  |L1.13858|
;;;4456   		for(i=0;i<16;i++)
;;;4457   			{
;;;4458   			temp_L+=adc_buff[adc_ch][i];
003622  f853c020          LDR      r12,[r3,r0,LSL #2]
003626  4461              ADD      r1,r1,r12
003628  f1000001          ADD      r0,r0,#1              ;4456
00362c  b2c0              UXTB     r0,r0                 ;4456
00362e  2810              CMP      r0,#0x10              ;4456
003630  d3f7              BCC      |L1.13858|
;;;4459   			}
;;;4460   		adc_buff_[adc_ch]= (short)(temp_L>>4);
003632  ea4f1021          ASR      r0,r1,#4
003636  49d9              LDR      r1,|L1.14748|
003638  f1a10120          SUB      r1,r1,#0x20
00363c  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.13888|
;;;4461   
;;;4462   		//adc_buff_[3]=346;
;;;4463   		}
;;;4464   	if(++adc_ch>=16) 
003640  1c64              ADDS     r4,r4,#1
003642  b2e0              UXTB     r0,r4
003644  74a8              STRB     r0,[r5,#0x12]
003646  2810              CMP      r0,#0x10
003648  d307              BCC      |L1.13914|
;;;4465   		{
;;;4466   		adc_ch=0;
00364a  74ae              STRB     r6,[r5,#0x12]
;;;4467   		adc_ch_cnt++;
00364c  f1020201          ADD      r2,r2,#1
003650  b2d0              UXTB     r0,r2
003652  74e8              STRB     r0,[r5,#0x13]
;;;4468   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003654  2810              CMP      r0,#0x10
003656  d300              BCC      |L1.13914|
003658  74ee              STRB     r6,[r5,#0x13]
                  |L1.13914|
;;;4469   		}
;;;4470   	}
;;;4471   
;;;4472   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4473   
;;;4474   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4475   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4476   /*
;;;4477   	{
;;;4478   	if((adc_cnt1&0x03)==0)
;;;4479   		{
;;;4480   		temp_S=0;
;;;4481   		for(i=0;i<16;i++)
;;;4482   			{
;;;4483   			temp_S+=adc_buff[adc_ch][i];
;;;4484   			} 
;;;4485            	adc_buff_[adc_ch]=temp_S>>4;
;;;4486             }
;;;4487   	}*/
;;;4488   
;;;4489   
;;;4490   		  
;;;4491   
;;;4492   adc_self_ch_cnt=0;
00365a  742e              STRB     r6,[r5,#0x10]
;;;4493   
;;;4494   adc_ch_net++;
00365c  f1070701          ADD      r7,r7,#1
;;;4495   adc_ch_net&=1;
003660  f0070001          AND      r0,r7,#1
003664  7468              STRB     r0,[r5,#0x11]
;;;4496   
;;;4497   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4498   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4499   
;;;4500   if(adc_ch_net)
;;;4501   	{
;;;4502   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4503   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4504   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
003666  4acf              LDR      r2,|L1.14756|
003668  b130              CBZ      r0,|L1.13944|
00366a  6810              LDR      r0,[r2,#0]
00366c  f02000ff          BIC      r0,r0,#0xff
003670  f1000004          ADD      r0,r0,#4
003674  6010              STR      r0,[r2,#0]
003676  e03d              B        |L1.14068|
                  |L1.13944|
;;;4505   	}
;;;4506   else
;;;4507   	{
;;;4508   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4509   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4510   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
003678  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
00367a  0708              LSLS     r0,r1,#28
00367c  d406              BMI      |L1.13964|
00367e  6810              LDR      r0,[r2,#0]
003680  f02000ff          BIC      r0,r0,#0xff
003684  f1000001          ADD      r0,r0,#1
003688  6010              STR      r0,[r2,#0]
00368a  e005              B        |L1.13976|
                  |L1.13964|
;;;4511   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
00368c  6810              LDR      r0,[r2,#0]
00368e  f02000ff          BIC      r0,r0,#0xff
003692  f1000002          ADD      r0,r0,#2
003696  6010              STR      r0,[r2,#0]
                  |L1.13976|
;;;4512   
;;;4513   
;;;4514   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
003698  48c3              LDR      r0,|L1.14760|
00369a  6803              LDR      r3,[r0,#0]
00369c  f0435380          ORR      r3,r3,#0x10000000
0036a0  6003              STR      r3,[r0,#0]
;;;4515   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
0036a2  6a03              LDR      r3,[r0,#0x20]
0036a4  f0434380          ORR      r3,r3,#0x40000000
0036a8  6203              STR      r3,[r0,#0x20]
;;;4516   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0036aa  6e03              LDR      r3,[r0,#0x60]
0036ac  f0436380          ORR      r3,r3,#0x4000000
0036b0  6603              STR      r3,[r0,#0x60]
;;;4517   
;;;4518   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
0036b2  07cb              LSLS     r3,r1,#31
0036b4  d00a              BEQ      |L1.14028|
;;;4519   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
0036b6  6943              LDR      r3,[r0,#0x14]
0036b8  f0435380          ORR      r3,r3,#0x10000000
0036bc  6143              STR      r3,[r0,#0x14]
                  |L1.14014|
;;;4520   
;;;4521   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
0036be  078b              LSLS     r3,r1,#30
0036c0  d409              BMI      |L1.14038|
0036c2  6b43              LDR      r3,[r0,#0x34]
0036c4  f0234380          BIC      r3,r3,#0x40000000
0036c8  6343              STR      r3,[r0,#0x34]
0036ca  e008              B        |L1.14046|
                  |L1.14028|
0036cc  6943              LDR      r3,[r0,#0x14]         ;4518
0036ce  f0235380          BIC      r3,r3,#0x10000000     ;4518
0036d2  6143              STR      r3,[r0,#0x14]         ;4518
0036d4  e7f3              B        |L1.14014|
                  |L1.14038|
;;;4522   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
0036d6  6b43              LDR      r3,[r0,#0x34]
0036d8  f0434380          ORR      r3,r3,#0x40000000
0036dc  6343              STR      r3,[r0,#0x34]
                  |L1.14046|
;;;4523   
;;;4524   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
0036de  0749              LSLS     r1,r1,#29
0036e0  d404              BMI      |L1.14060|
0036e2  6f41              LDR      r1,[r0,#0x74]
0036e4  f0216180          BIC      r1,r1,#0x4000000
0036e8  6741              STR      r1,[r0,#0x74]
0036ea  e003              B        |L1.14068|
                  |L1.14060|
;;;4525   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
0036ec  6f41              LDR      r1,[r0,#0x74]
0036ee  f0416180          ORR      r1,r1,#0x4000000
0036f2  6741              STR      r1,[r0,#0x74]
                  |L1.14068|
;;;4526   	}
;;;4527   	
;;;4528   
;;;4529   
;;;4530   
;;;4531   LPC_ADC->ADCR |=  (1<<24);
0036f4  6810              LDR      r0,[r2,#0]
0036f6  f0407080          ORR      r0,r0,#0x1000000
0036fa  6010              STR      r0,[r2,#0]
                  |L1.14076|
;;;4532   
;;;4533   }
0036fc  e8bd81f0          POP      {r4-r8,pc}
;;;4534   
                          ENDP

                  avg_hndl PROC
;;;4791   //-----------------------------------------------
;;;4792   void avg_hndl(void)
003700  e92d41f0          PUSH     {r4-r8,lr}
;;;4793   { 
;;;4794   char i;
;;;4795   
;;;4796   //#define AVGCNTMAX	5
;;;4797   if(avg_main_cnt)
003704  4da9              LDR      r5,|L1.14764|
003706  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
00370a  b118              CBZ      r0,|L1.14100|
;;;4798   	{
;;;4799   	avg_main_cnt--;
00370c  f1a00001          SUB      r0,r0,#1
003710  86e8              STRH     r0,[r5,#0x36]
;;;4800   	//goto avg_hndl_end;
;;;4801   	return;
;;;4802   	}                 
;;;4803   
;;;4804   avg_main_cnt=5;
;;;4805   avg_num=0;
;;;4806   
;;;4807   for(i=0;i<NUMIST;i++)
;;;4808   	{
;;;4809   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4810   	}
;;;4811   
;;;4812   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4813   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4814   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4815   
;;;4816   if(avg_vektor) avg_vektor=0;
;;;4817   else avg_vektor=1;
;;;4818   	
;;;4819   if(avg_num<2)
;;;4820   	{
;;;4821   	//goto avg_hndl_end;
;;;4822   	return;
;;;4823   	}
;;;4824   	
;;;4825   else
;;;4826   	{
;;;4827   	i_avg_min=5000;
;;;4828   	i_avg_max=0;
;;;4829   	i_avg_summ=0;
;;;4830   	for(i=0;i<NUMIST;i++)
;;;4831   		{
;;;4832   		if(bps[i]._state==bsWRK)
;;;4833   			{
;;;4834   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;4835   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;4836   			
;;;4837   			i_avg_summ+=bps[i]._Ii;
;;;4838   			}
;;;4839   		}
;;;4840   	i_avg=i_avg_summ/avg_num;	
;;;4841   	
;;;4842   	if(i_avg_min==0)i_avg_min=1;
;;;4843   
;;;4844   	avg=i_avg_max;
;;;4845   	avg*=100;
;;;4846   	avg/=i_avg_min;
;;;4847   
;;;4848   	if(avg>130) bAVG=1;
;;;4849   	if(avg<110) bAVG=0;
;;;4850   
;;;4851   	if(bAVG==1)
;;;4852   		{
;;;4853   		for(i=0;i<NUMIST;i++)
;;;4854   			{
;;;4855   			if(bps[i]._state==bsWRK)
;;;4856   				{
;;;4857   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;4858   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;4859   			
;;;4860   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;4861   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;4862   				}
;;;4863   			}		
;;;4864   		}			
;;;4865   	}   	 
;;;4866   
;;;4867   
;;;4868   avg_hndl_end:
;;;4869   __nop();  
;;;4870   }
003712  e7f3              B        |L1.14076|
                  |L1.14100|
003714  f04f0005          MOV      r0,#5                 ;4804
003718  86e8              STRH     r0,[r5,#0x36]         ;4804
00371a  f04f0700          MOV      r7,#0                 ;4805
00371e  76af              STRB     r7,[r5,#0x1a]         ;4805
003720  f04f0000          MOV      r0,#0                 ;4807
003724  49a3              LDR      r1,|L1.14772|
003726  4ca2              LDR      r4,|L1.14768|
003728  f9b12000          LDRSH    r2,[r1,#0]            ;4807
00372c  e012              B        |L1.14164|
                  |L1.14126|
00372e  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4809
003732  eb011100          ADD      r1,r1,r0,LSL #4       ;4809
003736  eb040181          ADD      r1,r4,r1,LSL #2       ;4809
00373a  788b              LDRB     r3,[r1,#2]            ;4809
00373c  2b01              CMP      r3,#1                 ;4809
00373e  d106              BNE      |L1.14158|
003740  78c9              LDRB     r1,[r1,#3]            ;4809
003742  2914              CMP      r1,#0x14              ;4809
003744  d203              BCS      |L1.14158|
003746  7ea9              LDRB     r1,[r5,#0x1a]         ;4809  ; avg_num
003748  f1010101          ADD      r1,r1,#1              ;4809
00374c  76a9              STRB     r1,[r5,#0x1a]         ;4809
                  |L1.14158|
00374e  f1000001          ADD      r0,r0,#1              ;4807
003752  b2c0              UXTB     r0,r0                 ;4807
                  |L1.14164|
003754  4290              CMP      r0,r2                 ;4807
003756  dbea              BLT      |L1.14126|
003758  7ee8              LDRB     r0,[r5,#0x1b]         ;4816  ; avg_vektor
00375a  f04f0c01          MOV      r12,#1                ;4809
00375e  b108              CBZ      r0,|L1.14180|
003760  76ef              STRB     r7,[r5,#0x1b]         ;4816
003762  e001              B        |L1.14184|
                  |L1.14180|
003764  f885c01b          STRB     r12,[r5,#0x1b]        ;4817
                  |L1.14184|
003768  7eae              LDRB     r6,[r5,#0x1a]         ;4819  ; avg_num
00376a  2e02              CMP      r6,#2                 ;4819
00376c  d3c6              BCC      |L1.14076|
00376e  4b8f              LDR      r3,|L1.14764|
003770  f2413088          MOV      r0,#0x1388            ;4827
003774  f1030380          ADD      r3,r3,#0x80           ;4827
003778  6218              STR      r0,[r3,#0x20]         ;4827  ; i_avg_min
00377a  61df              STR      r7,[r3,#0x1c]         ;4828  ; i_avg_max
00377c  625f              STR      r7,[r3,#0x24]         ;4829  ; i_avg_summ
00377e  f04f0100          MOV      r1,#0                 ;4830
003782  e01c              B        |L1.14270|
                  |L1.14212|
003784  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4832
003788  eb001001          ADD      r0,r0,r1,LSL #4       ;4832
00378c  eb040080          ADD      r0,r4,r0,LSL #2       ;4832
003790  f8908002          LDRB     r8,[r0,#2]            ;4832
003794  f1b80f01          CMP      r8,#1                 ;4832
003798  d10e              BNE      |L1.14264|
00379a  6a40              LDR      r0,[r0,#0x24]         ;4834
00379c  f8d3801c          LDR      r8,[r3,#0x1c]         ;4834  ; i_avg_max
0037a0  4540              CMP      r0,r8                 ;4834
0037a2  dd00              BLE      |L1.14246|
0037a4  61d8              STR      r0,[r3,#0x1c]         ;4834  ; i_avg_max
                  |L1.14246|
0037a6  f8d38020          LDR      r8,[r3,#0x20]         ;4835  ; i_avg_min
0037aa  4540              CMP      r0,r8                 ;4835
0037ac  da00              BGE      |L1.14256|
0037ae  6218              STR      r0,[r3,#0x20]         ;4835  ; i_avg_min
                  |L1.14256|
0037b0  f8d38024          LDR      r8,[r3,#0x24]         ;4837  ; i_avg_summ
0037b4  4440              ADD      r0,r0,r8              ;4837
0037b6  6258              STR      r0,[r3,#0x24]         ;4837  ; i_avg_summ
                  |L1.14264|
0037b8  f1010101          ADD      r1,r1,#1              ;4830
0037bc  b2c9              UXTB     r1,r1                 ;4830
                  |L1.14270|
0037be  4291              CMP      r1,r2                 ;4830
0037c0  dbe0              BLT      |L1.14212|
0037c2  6a58              LDR      r0,[r3,#0x24]         ;4840  ; i_avg_summ
0037c4  fb90f6f6          SDIV     r6,r0,r6              ;4840
0037c8  629e              STR      r6,[r3,#0x28]         ;4840  ; i_avg
0037ca  6a18              LDR      r0,[r3,#0x20]         ;4842  ; i_avg_min
0037cc  b908              CBNZ     r0,|L1.14290|
0037ce  f8c3c020          STR      r12,[r3,#0x20]        ;4842  ; i_avg_min
                  |L1.14290|
0037d2  69d8              LDR      r0,[r3,#0x1c]         ;4844  ; i_avg_max
0037d4  f04f0164          MOV      r1,#0x64              ;4845
0037d8  fb00f001          MUL      r0,r0,r1              ;4845
0037dc  6a19              LDR      r1,[r3,#0x20]         ;4846  ; i_avg_min
0037de  fb90f0f1          SDIV     r0,r0,r1              ;4846
0037e2  62d8              STR      r0,[r3,#0x2c]         ;4846  ; avg
0037e4  2882              CMP      r0,#0x82              ;4848
0037e6  dd01              BLE      |L1.14316|
0037e8  f885c019          STRB     r12,[r5,#0x19]        ;4848
                  |L1.14316|
0037ec  286e              CMP      r0,#0x6e              ;4849
0037ee  da00              BGE      |L1.14322|
0037f0  766f              STRB     r7,[r5,#0x19]         ;4849
                  |L1.14322|
0037f2  7e68              LDRB     r0,[r5,#0x19]         ;4851  ; bAVG
0037f4  2801              CMP      r0,#1                 ;4851
0037f6  d138              BNE      |L1.14442|
0037f8  f04f0100          MOV      r1,#0                 ;4853
0037fc  f06f0731          MVN      r7,#0x31              ;4860
003800  e031              B        |L1.14438|
                  |L1.14338|
003802  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4855
003806  eb001001          ADD      r0,r0,r1,LSL #4       ;4855
00380a  eb040080          ADD      r0,r4,r0,LSL #2       ;4855
00380e  7883              LDRB     r3,[r0,#2]            ;4855
003810  2b01              CMP      r3,#1                 ;4855
003812  d125              BNE      |L1.14432|
003814  6a43              LDR      r3,[r0,#0x24]         ;4857
003816  42b3              CMP      r3,r6                 ;4857
003818  dd0a              BLE      |L1.14384|
00381a  f895c01b          LDRB     r12,[r5,#0x1b]        ;4857  ; avg_vektor
00381e  f1bc0f00          CMP      r12,#0                ;4857
003822  d105              BNE      |L1.14384|
003824  f8b0c054          LDRH     r12,[r0,#0x54]        ;4857
003828  f1ac0c01          SUB      r12,r12,#1            ;4857
00382c  f8a0c054          STRH     r12,[r0,#0x54]        ;4857
                  |L1.14384|
003830  42b3              CMP      r3,r6                 ;4858
003832  da07              BGE      |L1.14404|
003834  7eeb              LDRB     r3,[r5,#0x1b]         ;4858  ; avg_vektor
003836  b12b              CBZ      r3,|L1.14404|
003838  f8b03054          LDRH     r3,[r0,#0x54]         ;4858
00383c  f1030301          ADD      r3,r3,#1              ;4858
003840  f8a03054          STRH     r3,[r0,#0x54]         ;4858
                  |L1.14404|
003844  f9b03054          LDRSH    r3,[r0,#0x54]         ;4860
003848  42bb              CMP      r3,r7                 ;4860
00384a  da01              BGE      |L1.14416|
00384c  f8a07054          STRH     r7,[r0,#0x54]         ;4860
                  |L1.14416|
003850  f9b03054          LDRSH    r3,[r0,#0x54]         ;4861
003854  2b32              CMP      r3,#0x32              ;4861
003856  dd03              BLE      |L1.14432|
003858  f04f0332          MOV      r3,#0x32              ;4861
00385c  f8a03054          STRH     r3,[r0,#0x54]         ;4861
                  |L1.14432|
003860  f1010101          ADD      r1,r1,#1              ;4853
003864  b2c9              UXTB     r1,r1                 ;4853
                  |L1.14438|
003866  4291              CMP      r1,r2                 ;4853
003868  dbcb              BLT      |L1.14338|
                  |L1.14442|
00386a  bf00              NOP                            ;4869
00386c  e746              B        |L1.14076|
;;;4871   
                          ENDP

                  rele_hndl PROC
;;;4884   //*************-----------------------------------------------
;;;4885   void rele_hndl(void)
00386e  e92d5ff0          PUSH     {r4-r12,lr}
;;;4886   {
;;;4887   //static char cnt_rel_sam;
;;;4888   //char temp;
;;;4889   
;;;4890   //temp=0;
;;;4891   
;;;4892   
;;;4893   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003872  4851              LDR      r0,|L1.14776|
003874  6801              LDR      r1,[r0,#0]
003876  4a51              LDR      r2,|L1.14780|
003878  ea010102          AND      r1,r1,r2
00387c  6001              STR      r1,[r0,#0]
;;;4894   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
00387e  4c4a              LDR      r4,|L1.14760|
003880  6821              LDR      r1,[r4,#0]
003882  f441717c          ORR      r1,r1,#0x3f0
003886  6021              STR      r1,[r4,#0]
;;;4895   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003888  69c1              LDR      r1,[r0,#0x1c]
00388a  f4212140          BIC      r1,r1,#0xc0000
00388e  61c1              STR      r1,[r0,#0x1c]
;;;4896   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003890  6e21              LDR      r1,[r4,#0x60]
003892  f0417100          ORR      r1,r1,#0x2000000
003896  6621              STR      r1,[r4,#0x60]
;;;4897   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003898  6841              LDR      r1,[r0,#4]
00389a  f0216140          BIC      r1,r1,#0xc000000
00389e  6041              STR      r1,[r0,#4]
;;;4898   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
0038a0  6820              LDR      r0,[r4,#0]
0038a2  f0405000          ORR      r0,r0,#0x20000000
0038a6  6020              STR      r0,[r4,#0]
;;;4899   
;;;4900   
;;;4901   
;;;4902   
;;;4903   
;;;4904   
;;;4905   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
0038a8  4846              LDR      r0,|L1.14788|
0038aa  4d45              LDR      r5,|L1.14784|
0038ac  4947              LDR      r1,|L1.14796|
0038ae  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
0038b0  4845              LDR      r0,|L1.14792|
0038b2  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
0038b6  f9b11000          LDRSH    r1,[r1,#0]
0038ba  7800              LDRB     r0,[r0,#0]
0038bc  4313              ORRS     r3,r3,r2
0038be  d007              BEQ      |L1.14544|
0038c0  b130              CBZ      r0,|L1.14544|
0038c2  2905              CMP      r1,#5
0038c4  dd04              BLE      |L1.14544|
;;;4906   	{
;;;4907   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
0038c6  69a3              LDR      r3,[r4,#0x18]
0038c8  f4437380          ORR      r3,r3,#0x100
0038cc  61a3              STR      r3,[r4,#0x18]
0038ce  e003              B        |L1.14552|
                  |L1.14544|
;;;4908   	}
;;;4909   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
0038d0  69e3              LDR      r3,[r4,#0x1c]
0038d2  f4437380          ORR      r3,r3,#0x100
0038d6  61e3              STR      r3,[r4,#0x1c]
                  |L1.14552|
;;;4910   
;;;4911   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
0038d8  f8953088          LDRB     r3,[r5,#0x88]  ; bat
0038dc  4313              ORRS     r3,r3,r2
0038de  d007              BEQ      |L1.14576|
0038e0  b130              CBZ      r0,|L1.14576|
0038e2  2905              CMP      r1,#5
0038e4  dd04              BLE      |L1.14576|
;;;4912   	{
;;;4913   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
0038e6  69a0              LDR      r0,[r4,#0x18]
0038e8  f0400040          ORR      r0,r0,#0x40
0038ec  61a0              STR      r0,[r4,#0x18]
0038ee  e003              B        |L1.14584|
                  |L1.14576|
;;;4914   	}
;;;4915   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
0038f0  69e0              LDR      r0,[r4,#0x1c]
0038f2  f0400040          ORR      r0,r0,#0x40
0038f6  61e0              STR      r0,[r4,#0x1c]
                  |L1.14584|
;;;4916   
;;;4917   
;;;4918   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
0038f8  20d2              MOVS     r0,#0xd2
0038fa  f7fffffe          BL       mess_find_unvol
0038fe  4d34              LDR      r5,|L1.14800|
003900  b110              CBZ      r0,|L1.14600|
003902  6828              LDR      r0,[r5,#0]  ; mess_data
003904  2864              CMP      r0,#0x64
003906  d06e              BEQ      |L1.14822|
                  |L1.14600|
;;;4919   	{
;;;4920   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4921   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4922   	}
;;;4923   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003908  69e0              LDR      r0,[r4,#0x1c]
00390a  f0405000          ORR      r0,r0,#0x20000000
00390e  61e0              STR      r0,[r4,#0x1c]
                  |L1.14608|
;;;4924   
;;;4925   
;;;4926   #ifndef UKU2071x
;;;4927   //Реле аварии сети
;;;4928   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4929   	{
;;;4930   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4931   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4932   	}
;;;4933   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4934   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4935   #endif
;;;4936   #ifdef UKU2071x
;;;4937   //Реле аварии сети
;;;4938   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003910  20d2              MOVS     r0,#0xd2
003912  f7fffffe          BL       mess_find_unvol
;;;4939   	{
;;;4940   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4941   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4942   	}
;;;4943   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003916  4e2f              LDR      r6,|L1.14804|
003918  b110              CBZ      r0,|L1.14624|
00391a  6828              LDR      r0,[r5,#0]            ;4938  ; mess_data
00391c  2866              CMP      r0,#0x66              ;4938
00391e  d073              BEQ      |L1.14856|
                  |L1.14624|
003920  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003922  07c0              LSLS     r0,r0,#31
003924  d07c              BEQ      |L1.14880|
;;;4944   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003926  6fa0              LDR      r0,[r4,#0x78]
003928  f0407000          ORR      r0,r0,#0x2000000
00392c  67a0              STR      r0,[r4,#0x78]
                  |L1.14638|
;;;4945   #endif
;;;4946   
;;;4947   #ifdef UKU_3U
;;;4948   //Реле аварий батарей
;;;4949   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4950   	{
;;;4951   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4952   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4953        }
;;;4954   else 
;;;4955   	{
;;;4956   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4957        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4958   	} 
;;;4959   
;;;4960   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4961   	{
;;;4962   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4963   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4964        }
;;;4965   else 
;;;4966   	{
;;;4967   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4968        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4969   	} 
;;;4970   
;;;4971   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4972   	{
;;;4973   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4974   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4975        }
;;;4976   else 
;;;4977   	{
;;;4978   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4979        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4980   	} 
;;;4981   
;;;4982   #endif
;;;4983   
;;;4984   
;;;4985   #ifdef UKU_GLONASS
;;;4986   //Реле аварий батарей
;;;4987   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4988   	{
;;;4989   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4990   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4991        }
;;;4992   else 
;;;4993   	{
;;;4994   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4995        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4996   	} 
;;;4997   
;;;4998   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4999   	{
;;;5000   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5001   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5002        }
;;;5003   else 
;;;5004   	{
;;;5005   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5006        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5007   	} 
;;;5008   
;;;5009   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5010   	{
;;;5011   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5012   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5013        }
;;;5014   else 
;;;5015   	{
;;;5016   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5017        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5018   	} 
;;;5019   
;;;5020   #endif
;;;5021   
;;;5022   #ifdef U 
;;;5023   
;;;5024   #endif
;;;5025   
;;;5026   #ifdef UKU_RSTKM
;;;5027   
;;;5028   //Реле общей аварии
;;;5029   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5030   	{
;;;5031   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5032   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5033   	}
;;;5034   else 
;;;5035   	{
;;;5036        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5037             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5038             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5039             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5040             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5041        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5042   	}
;;;5043   	
;;;5044   
;;;5045   //Реле освещения
;;;5046   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5047   	{
;;;5048   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5049   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5050        }
;;;5051   else 
;;;5052   	{
;;;5053   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5054        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5055   	}
;;;5056   
;;;5057   
;;;5058   //Реле выключения нагрузки
;;;5059   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5060   	{
;;;5061   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5062   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5063        }
;;;5064   else if(tloaddisable_cmnd==0)
;;;5065   	{
;;;5066   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5067   	}
;;;5068   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5069   	{
;;;5070   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5071   	}
;;;5072   
;;;5073   else 
;;;5074   	{
;;;5075   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5076        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5077   	} 
;;;5078   
;;;5079   //Реле осевого вентилятора
;;;5080   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5081   	{
;;;5082   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5083   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5084   	}
;;;5085   else 
;;;5086   	{
;;;5087   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5088        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5089   	} 
;;;5090   
;;;5091   #endif
;;;5092   
;;;5093   #ifdef UKU_KONTUR
;;;5094   
;;;5095   //Реле общей аварии
;;;5096   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5097   	{
;;;5098   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5099   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5100   	}
;;;5101   else 
;;;5102   	{
;;;5103        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5104             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5105             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5106             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5107             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5108        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5109   	}
;;;5110   
;;;5111   	
;;;5112   //rel_warm_plazma=0;
;;;5113   //Реле освещения   
;;;5114   /*
;;;5115   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5116   	{
;;;5117   	if(mess_data[1]==0)
;;;5118   		{
;;;5119   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5120   		rel_warm_plazma=1;
;;;5121   		}
;;;5122   	else if(mess_data[1]==1) 
;;;5123   		{
;;;5124   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5125   		rel_warm_plazma=2;
;;;5126   		}
;;;5127        }
;;;5128   else 
;;;5129   	{
;;;5130   	if(warm_stat_k==wsOFF) 
;;;5131   		{
;;;5132   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5133   		rel_warm_plazma=3;
;;;5134   		}
;;;5135        else 
;;;5136   		{
;;;5137   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5138   		rel_warm_plazma=4;
;;;5139   		}
;;;5140   	}
;;;5141   */
;;;5142   //Реле освещения
;;;5143   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5144   	{
;;;5145   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5146   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5147        }
;;;5148   else 
;;;5149   	{
;;;5150   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5151        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5152   	}
;;;5153   
;;;5154   
;;;5155   
;;;5156   //Реле выключения нагрузки
;;;5157   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5158   	{
;;;5159   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5160   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5161        }
;;;5162   else if(tloaddisable_cmnd==0)
;;;5163   	{
;;;5164   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5165   	}
;;;5166   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5167   	{
;;;5168   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5169   	}
;;;5170   
;;;5171   else 
;;;5172   	{
;;;5173   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5174        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5175   	} 
;;;5176   
;;;5177   //Реле осевого вентилятора или отопителя
;;;5178   if(RELE_LOG)
;;;5179   	{
;;;5180   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5181   		{
;;;5182   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5183   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5184   		}
;;;5185   	else 
;;;5186   		{
;;;5187   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5188   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5189   		} 
;;;5190   
;;;5191   	}
;;;5192   else 
;;;5193   	{
;;;5194   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5195   		{
;;;5196   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5197   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5198   		}
;;;5199   	else 
;;;5200   		{
;;;5201   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5202   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5203   		} 
;;;5204   	}
;;;5205   #endif
;;;5206   
;;;5207   #ifdef UKU_6U
;;;5208   //Реле аварий батарей
;;;5209   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5210   	{
;;;5211   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5212   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5213        }
;;;5214   else 
;;;5215   	{
;;;5216   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5217        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5218   	} 
;;;5219   
;;;5220   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5221   	{
;;;5222   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5223   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5224       }
;;;5225   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5226   	{
;;;5227   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5228   		{
;;;5229   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5230   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5231        	}
;;;5232   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5233   	}
;;;5234   else 
;;;5235   	{
;;;5236   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5237       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5238   	} 
;;;5239   
;;;5240   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5241   	{
;;;5242   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5243   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5244        }
;;;5245   else 
;;;5246   	{
;;;5247   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5248        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5249   	} 
;;;5250   
;;;5251   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5252   	{
;;;5253   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5254   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5255   	}
;;;5256   else if((NPN_OUT==npnoRELEVENT))
;;;5257   	{
;;;5258   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5259   		{
;;;5260   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5261   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5262       	}
;;;5263   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5264   	}
;;;5265   else 
;;;5266   	{
;;;5267   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5268   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5269   	}
;;;5270   
;;;5271   #endif
;;;5272   
;;;5273   #ifdef UKU_220
;;;5274   //Реле аварий батарей
;;;5275   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5276   	{
;;;5277   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5278   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5279        }
;;;5280   else 
;;;5281   	{
;;;5282   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5283        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5284   	} 
;;;5285   
;;;5286   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5287   	{
;;;5288   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5289   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5290        }
;;;5291   else 
;;;5292   	{
;;;5293   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5294        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5295   	} 
;;;5296   
;;;5297   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5298   	{
;;;5299   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5300   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5301   	}
;;;5302   else 
;;;5303   	{
;;;5304   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5305   		{
;;;5306   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5307   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5308   		}
;;;5309   	else 
;;;5310   		{
;;;5311   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5312        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5313   		}
;;;5314   	}
;;;5315   
;;;5316   #endif
;;;5317   
;;;5318   #ifdef UKU_220_V2
;;;5319   //Реле аварий батарей
;;;5320   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5321   	{
;;;5322   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5323   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5324        }
;;;5325   else 
;;;5326   	{
;;;5327   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5328        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5329   	} 
;;;5330   
;;;5331   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5332   	{
;;;5333   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5334   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5335        }
;;;5336   else 
;;;5337   	{
;;;5338   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5339        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5340   	} 
;;;5341   
;;;5342   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5343   	{
;;;5344   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5345   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5346   	}
;;;5347   else 
;;;5348   	{
;;;5349   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5350   		{
;;;5351   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5352   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5353   		}
;;;5354   	else 
;;;5355   		{
;;;5356   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5357        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5358   		}
;;;5359   	}
;;;5360   
;;;5361   #endif
;;;5362   
;;;5363   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5364   
;;;5365   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
00392e  482a              LDR      r0,|L1.14808|
;;;5366   	{
;;;5367   	#ifndef UKU2071x
;;;5368   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5369   		{
;;;5370   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5371   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5372   		}
;;;5373   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5374   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5375   	#endif
;;;5376   
;;;5377   	#ifdef UKU2071x
;;;5378   		#ifndef APSENERGIA
;;;5379   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5380   			{
;;;5381   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5382   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5383   			}
;;;5384   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5385   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5386   		#endif
;;;5387   
;;;5388   		#ifdef APSENERGIA
;;;5389   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5390   			{
;;;5391   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5392   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5393   			}
;;;5394   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5395   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5396   		#endif
;;;5397   
;;;5398   	#endif
;;;5399   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5400   		{
;;;5401   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5402   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5403   	     }
;;;5404   	else 
;;;5405   		{
;;;5406   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5407   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5408   		} 
;;;5409   
;;;5410   	//Реле аварий батарей
;;;5411   	#ifndef APSENERGIA
;;;5412   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5413   		{
;;;5414   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5415   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5416        	}
;;;5417   	else 
;;;5418   		{
;;;5419   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003930  f8df80a8          LDR      r8,|L1.14812|
003934  4f2a              LDR      r7,|L1.14816|
003936  8800              LDRH     r0,[r0,#0]            ;5365  ; AUSW_MAIN
003938  f5a041aa          SUB      r1,r0,#0x5500         ;5365
00393c  39fa              SUBS     r1,r1,#0xfa           ;5365
00393e  d001              BEQ      |L1.14660|
003940  1e49              SUBS     r1,r1,#1              ;5365
003942  d172              BNE      |L1.14890|
                  |L1.14660|
003944  20d2              MOVS     r0,#0xd2              ;5379
003946  f7fffffe          BL       mess_find_unvol
00394a  b110              CBZ      r0,|L1.14674|
00394c  6828              LDR      r0,[r5,#0]            ;5379  ; mess_data
00394e  2866              CMP      r0,#0x66              ;5379
003950  d06e              BEQ      |L1.14896|
                  |L1.14674|
003952  6830              LDR      r0,[r6,#0]            ;5384  ; avar_ind_stat
003954  07c0              LSLS     r0,r0,#31             ;5384
003956  d077              BEQ      |L1.14920|
003958  6fa0              LDR      r0,[r4,#0x78]         ;5385
00395a  f0407000          ORR      r0,r0,#0x2000000      ;5385
00395e  67a0              STR      r0,[r4,#0x78]         ;5385
                  |L1.14688|
003960  20d2              MOVS     r0,#0xd2              ;5399
003962  f7fffffe          BL       mess_find_unvol
003966  b110              CBZ      r0,|L1.14702|
003968  6828              LDR      r0,[r5,#0]            ;5399  ; mess_data
00396a  286a              CMP      r0,#0x6a              ;5399
00396c  d073              BEQ      |L1.14934|
                  |L1.14702|
00396e  6830              LDR      r0,[r6,#0]            ;5406  ; avar_ind_stat
003970  4238              TST      r0,r7                 ;5406
003972  d07f              BEQ      |L1.14964|
003974  69a0              LDR      r0,[r4,#0x18]         ;5407
003976  f0400080          ORR      r0,r0,#0x80           ;5407
00397a  61a0              STR      r0,[r4,#0x18]         ;5407
                  |L1.14716|
00397c  20d2              MOVS     r0,#0xd2              ;5412
00397e  f7fffffe          BL       mess_find_unvol
003982  b110              CBZ      r0,|L1.14730|
003984  6828              LDR      r0,[r5,#0]            ;5412  ; mess_data
003986  2867              CMP      r0,#0x67              ;5412
003988  d079              BEQ      |L1.14974|
                  |L1.14730|
00398a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
00398e  b348              CBZ      r0,|L1.14820|
;;;5420        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003990  69a0              LDR      r0,[r4,#0x18]
003992  f0400010          ORR      r0,r0,#0x10
003996  61a0              STR      r0,[r4,#0x18]
003998  e1fe              B        |L1.15768|
00399a  e024              B        |L1.14822|
                  |L1.14748|
                          DCD      ||.bss||+0x42c
                  |L1.14752|
                          DCD      ||.bss||+0xc
                  |L1.14756|
                          DCD      0x40034000
                  |L1.14760|
                          DCD      0x2009c000
                  |L1.14764|
                          DCD      ||area_number.25||
                  |L1.14768|
                          DCD      bps
                  |L1.14772|
                          DCD      NUMIST
                  |L1.14776|
                          DCD      0x4002c000
                  |L1.14780|
                          DCD      0xfff000ff
                  |L1.14784|
                          DCD      bat
                  |L1.14788|
                          DCD      tbatdisable_stat
                  |L1.14792|
                          DCD      tbatdisable_cmnd
                  |L1.14796|
                          DCD      main_1Hz_cnt
                  |L1.14800|
                          DCD      mess_data
                  |L1.14804|
                          DCD      avar_ind_stat
                  |L1.14808|
                          DCD      AUSW_MAIN
                  |L1.14812|
                          DCD      ips_bat_av_stat
                  |L1.14816|
                          DCD      0x100007f8
                  |L1.14820|
0039e4  e05a              B        |L1.15004|
                  |L1.14822|
0039e6  6868              LDR      r0,[r5,#4]            ;4920  ; mess_data
0039e8  2801              CMP      r0,#1                 ;4920
0039ea  d006              BEQ      |L1.14842|
0039ec  2800              CMP      r0,#0                 ;4921
0039ee  d18f              BNE      |L1.14608|
0039f0  69e0              LDR      r0,[r4,#0x1c]         ;4921
0039f2  f0405000          ORR      r0,r0,#0x20000000     ;4921
0039f6  61e0              STR      r0,[r4,#0x1c]         ;4921
0039f8  e78a              B        |L1.14608|
                  |L1.14842|
0039fa  69a0              LDR      r0,[r4,#0x18]         ;4920
0039fc  f0405000          ORR      r0,r0,#0x20000000     ;4920
003a00  61a0              STR      r0,[r4,#0x18]         ;4920
003a02  e785              B        |L1.14608|
003a04  e000              B        |L1.14856|
003a06  e00b              B        |L1.14880|
                  |L1.14856|
003a08  6868              LDR      r0,[r5,#4]            ;4940  ; mess_data
003a0a  b120              CBZ      r0,|L1.14870|
003a0c  6fa0              LDR      r0,[r4,#0x78]         ;4941
003a0e  f0407000          ORR      r0,r0,#0x2000000      ;4941
003a12  67a0              STR      r0,[r4,#0x78]         ;4941
003a14  e78b              B        |L1.14638|
                  |L1.14870|
003a16  6fe0              LDR      r0,[r4,#0x7c]         ;4940
003a18  f0407000          ORR      r0,r0,#0x2000000      ;4940
003a1c  67e0              STR      r0,[r4,#0x7c]         ;4940
003a1e  e786              B        |L1.14638|
                  |L1.14880|
003a20  6fe0              LDR      r0,[r4,#0x7c]         ;4943
003a22  f0407000          ORR      r0,r0,#0x2000000      ;4943
003a26  67e0              STR      r0,[r4,#0x7c]         ;4943
003a28  e781              B        |L1.14638|
                  |L1.14890|
003a2a  e03c              B        |L1.15014|
003a2c  e000              B        |L1.14896|
003a2e  e00b              B        |L1.14920|
                  |L1.14896|
003a30  6868              LDR      r0,[r5,#4]            ;5381  ; mess_data
003a32  b120              CBZ      r0,|L1.14910|
003a34  6fa0              LDR      r0,[r4,#0x78]         ;5382
003a36  f0407000          ORR      r0,r0,#0x2000000      ;5382
003a3a  67a0              STR      r0,[r4,#0x78]         ;5382
003a3c  e790              B        |L1.14688|
                  |L1.14910|
003a3e  6fe0              LDR      r0,[r4,#0x7c]         ;5381
003a40  f0407000          ORR      r0,r0,#0x2000000      ;5381
003a44  67e0              STR      r0,[r4,#0x7c]         ;5381
003a46  e78b              B        |L1.14688|
                  |L1.14920|
003a48  6fe0              LDR      r0,[r4,#0x7c]         ;5384
003a4a  f0407000          ORR      r0,r0,#0x2000000      ;5384
003a4e  67e0              STR      r0,[r4,#0x7c]         ;5384
003a50  e786              B        |L1.14688|
003a52  e000              B        |L1.14934|
003a54  e00e              B        |L1.14964|
                  |L1.14934|
003a56  6868              LDR      r0,[r5,#4]            ;5401  ; mess_data
003a58  b130              CBZ      r0,|L1.14952|
003a5a  2801              CMP      r0,#1                 ;5402
003a5c  d18e              BNE      |L1.14716|
003a5e  69a0              LDR      r0,[r4,#0x18]         ;5402
003a60  f0400080          ORR      r0,r0,#0x80           ;5402
003a64  61a0              STR      r0,[r4,#0x18]         ;5402
003a66  e789              B        |L1.14716|
                  |L1.14952|
003a68  69e0              LDR      r0,[r4,#0x1c]         ;5401
003a6a  f0400080          ORR      r0,r0,#0x80           ;5401
003a6e  61e0              STR      r0,[r4,#0x1c]         ;5401
003a70  e784              B        |L1.14716|
003a72  e004              B        |L1.14974|
                  |L1.14964|
003a74  69e0              LDR      r0,[r4,#0x1c]         ;5406
003a76  f0400080          ORR      r0,r0,#0x80           ;5406
003a7a  61e0              STR      r0,[r4,#0x1c]         ;5406
003a7c  e77e              B        |L1.14716|
                  |L1.14974|
003a7e  6868              LDR      r0,[r5,#4]            ;5414  ; mess_data
003a80  b110              CBZ      r0,|L1.14984|
003a82  2801              CMP      r0,#1                 ;5415
003a84  d005              BEQ      |L1.14994|
003a86  e187              B        |L1.15768|
                  |L1.14984|
003a88  69e0              LDR      r0,[r4,#0x1c]         ;5414
003a8a  f0400010          ORR      r0,r0,#0x10           ;5414
003a8e  61e0              STR      r0,[r4,#0x1c]         ;5414
003a90  e182              B        |L1.15768|
                  |L1.14994|
003a92  69a0              LDR      r0,[r4,#0x18]         ;5415
003a94  f0400010          ORR      r0,r0,#0x10           ;5415
003a98  61a0              STR      r0,[r4,#0x18]         ;5415
003a9a  e17d              B        |L1.15768|
                  |L1.15004|
003a9c  69e0              LDR      r0,[r4,#0x1c]         ;5419
003a9e  f0400010          ORR      r0,r0,#0x10           ;5419
003aa2  61e0              STR      r0,[r4,#0x1c]         ;5419
003aa4  e178              B        |L1.15768|
                  |L1.15014|
;;;5421   		}
;;;5422   	#endif
;;;5423   	#ifdef APSENERGIA
;;;5424   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5425   		{
;;;5426   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5427   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5428        	}
;;;5429   	else 
;;;5430   		{
;;;5431   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5432   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5433   		}
;;;5434   	#endif
;;;5435   	}
;;;5436   
;;;5437   else	if(AUSW_MAIN==22023)
003aa6  f5a041ac          SUB      r1,r0,#0x5600
003aaa  3907              SUBS     r1,#7
003aac  d162              BNE      |L1.15220|
;;;5438   	{
;;;5439   
;;;5440   	//Реле аварий батарей
;;;5441   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003aae  20d2              MOVS     r0,#0xd2
003ab0  f7fffffe          BL       mess_find_unvol
003ab4  b110              CBZ      r0,|L1.15036|
003ab6  6828              LDR      r0,[r5,#0]  ; mess_data
003ab8  2867              CMP      r0,#0x67
003aba  d023              BEQ      |L1.15108|
                  |L1.15036|
;;;5442   		{
;;;5443   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5444   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5445        	}
;;;5446   	else 
;;;5447   		{
;;;5448   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003abc  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003ac0  b370              CBZ      r0,|L1.15136|
;;;5449        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ac2  69a0              LDR      r0,[r4,#0x18]
003ac4  f0400010          ORR      r0,r0,#0x10
003ac8  61a0              STR      r0,[r4,#0x18]
                  |L1.15050|
;;;5450   		} 
;;;5451   
;;;5452   
;;;5453   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5454   	#ifndef UKU2071x
;;;5455   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5456   		{
;;;5457   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5458   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5459   		}
;;;5460   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5461   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5462   	#endif
;;;5463   	#ifdef UKU2071x
;;;5464   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003aca  20d2              MOVS     r0,#0xd2
003acc  f7fffffe          BL       mess_find_unvol
003ad0  b110              CBZ      r0,|L1.15064|
003ad2  6828              LDR      r0,[r5,#0]  ; mess_data
003ad4  2866              CMP      r0,#0x66
003ad6  d028              BEQ      |L1.15146|
                  |L1.15064|
;;;5465   		{
;;;5466   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5467   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5468   		}
;;;5469   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003ad8  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ada  07c0              LSLS     r0,r0,#31
003adc  d031              BEQ      |L1.15170|
;;;5470   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003ade  6fa0              LDR      r0,[r4,#0x78]
003ae0  f0407000          ORR      r0,r0,#0x2000000
003ae4  67a0              STR      r0,[r4,#0x78]
                  |L1.15078|
;;;5471   	#endif
;;;5472   
;;;5473   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ae6  20d2              MOVS     r0,#0xd2
003ae8  f7fffffe          BL       mess_find_unvol
003aec  b110              CBZ      r0,|L1.15092|
003aee  6828              LDR      r0,[r5,#0]  ; mess_data
003af0  286a              CMP      r0,#0x6a
003af2  d02b              BEQ      |L1.15180|
                  |L1.15092|
;;;5474   		{
;;;5475   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5476   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5477   	     }
;;;5478   	else 
;;;5479   		{
;;;5480   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003af4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003af6  4238              TST      r0,r7
003af8  d037              BEQ      |L1.15210|
;;;5481   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003afa  69a0              LDR      r0,[r4,#0x18]
003afc  f0400080          ORR      r0,r0,#0x80
003b00  61a0              STR      r0,[r4,#0x18]
003b02  e149              B        |L1.15768|
                  |L1.15108|
003b04  6868              LDR      r0,[r5,#4]            ;5443  ; mess_data
003b06  b130              CBZ      r0,|L1.15126|
003b08  2801              CMP      r0,#1                 ;5444
003b0a  d1de              BNE      |L1.15050|
003b0c  69a0              LDR      r0,[r4,#0x18]         ;5444
003b0e  f0400010          ORR      r0,r0,#0x10           ;5444
003b12  61a0              STR      r0,[r4,#0x18]         ;5444
003b14  e7d9              B        |L1.15050|
                  |L1.15126|
003b16  69e0              LDR      r0,[r4,#0x1c]         ;5443
003b18  f0400010          ORR      r0,r0,#0x10           ;5443
003b1c  61e0              STR      r0,[r4,#0x1c]         ;5443
003b1e  e7d4              B        |L1.15050|
                  |L1.15136|
003b20  69e0              LDR      r0,[r4,#0x1c]         ;5448
003b22  f0400010          ORR      r0,r0,#0x10           ;5448
003b26  61e0              STR      r0,[r4,#0x1c]         ;5448
003b28  e7cf              B        |L1.15050|
                  |L1.15146|
003b2a  6868              LDR      r0,[r5,#4]            ;5466  ; mess_data
003b2c  b120              CBZ      r0,|L1.15160|
003b2e  69e0              LDR      r0,[r4,#0x1c]         ;5467
003b30  f0407000          ORR      r0,r0,#0x2000000      ;5467
003b34  61e0              STR      r0,[r4,#0x1c]         ;5467
003b36  e7d6              B        |L1.15078|
                  |L1.15160|
003b38  69a0              LDR      r0,[r4,#0x18]         ;5466
003b3a  f0407000          ORR      r0,r0,#0x2000000      ;5466
003b3e  61a0              STR      r0,[r4,#0x18]         ;5466
003b40  e7d1              B        |L1.15078|
                  |L1.15170|
003b42  6ba0              LDR      r0,[r4,#0x38]         ;5469
003b44  f0407000          ORR      r0,r0,#0x2000000      ;5469
003b48  63a0              STR      r0,[r4,#0x38]         ;5469
003b4a  e7cc              B        |L1.15078|
                  |L1.15180|
003b4c  6868              LDR      r0,[r5,#4]            ;5475  ; mess_data
003b4e  b110              CBZ      r0,|L1.15190|
003b50  2801              CMP      r0,#1                 ;5476
003b52  d005              BEQ      |L1.15200|
003b54  e120              B        |L1.15768|
                  |L1.15190|
003b56  69e0              LDR      r0,[r4,#0x1c]         ;5475
003b58  f0400080          ORR      r0,r0,#0x80           ;5475
003b5c  61e0              STR      r0,[r4,#0x1c]         ;5475
003b5e  e11b              B        |L1.15768|
                  |L1.15200|
003b60  69a0              LDR      r0,[r4,#0x18]         ;5476
003b62  f0400080          ORR      r0,r0,#0x80           ;5476
003b66  61a0              STR      r0,[r4,#0x18]         ;5476
003b68  e116              B        |L1.15768|
                  |L1.15210|
003b6a  69e0              LDR      r0,[r4,#0x1c]         ;5480
003b6c  f0400080          ORR      r0,r0,#0x80           ;5480
003b70  61e0              STR      r0,[r4,#0x1c]         ;5480
003b72  e111              B        |L1.15768|
                  |L1.15220|
;;;5482   		} 
;;;5483   	}
;;;5484   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003b74  f5a041ac          SUB      r1,r0,#0x5600
003b78  391b              SUBS     r1,r1,#0x1b
003b7a  d001              BEQ      |L1.15232|
003b7c  1e49              SUBS     r1,r1,#1
003b7e  d170              BNE      |L1.15458|
                  |L1.15232|
;;;5485   	{
;;;5486   	//Реле аварий батарей
;;;5487   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003b80  20d2              MOVS     r0,#0xd2
003b82  f7fffffe          BL       mess_find_unvol
003b86  b110              CBZ      r0,|L1.15246|
003b88  6828              LDR      r0,[r5,#0]  ; mess_data
003b8a  2867              CMP      r0,#0x67
003b8c  d031              BEQ      |L1.15346|
                  |L1.15246|
;;;5488   		{
;;;5489   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5490   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5491        	}
;;;5492   	else 
;;;5493   		{
;;;5494   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003b8e  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003b92  b3b8              CBZ      r0,|L1.15364|
;;;5495        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003b94  69a0              LDR      r0,[r4,#0x18]
003b96  f0400010          ORR      r0,r0,#0x10
003b9a  61a0              STR      r0,[r4,#0x18]
                  |L1.15260|
;;;5496   		} 
;;;5497   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5498   	#ifndef UKU2071x 
;;;5499   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5500   		{
;;;5501   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5502   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5503   		}
;;;5504   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5505   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5506   	#endif
;;;5507   	#ifdef UKU2071x 
;;;5508   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003b9c  20d2              MOVS     r0,#0xd2
003b9e  f7fffffe          BL       mess_find_unvol
003ba2  b110              CBZ      r0,|L1.15274|
003ba4  6828              LDR      r0,[r5,#0]  ; mess_data
003ba6  2866              CMP      r0,#0x66
003ba8  d037              BEQ      |L1.15386|
                  |L1.15274|
;;;5509   		{
;;;5510   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5511   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5512   		}
;;;5513   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003baa  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003bac  07c0              LSLS     r0,r0,#31
003bae  d040              BEQ      |L1.15410|
;;;5514   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003bb0  6fa0              LDR      r0,[r4,#0x78]
003bb2  f0407000          ORR      r0,r0,#0x2000000
003bb6  67a0              STR      r0,[r4,#0x78]
                  |L1.15288|
;;;5515   	#endif
;;;5516   
;;;5517   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003bb8  20d2              MOVS     r0,#0xd2
003bba  f7fffffe          BL       mess_find_unvol
003bbe  b110              CBZ      r0,|L1.15302|
003bc0  6828              LDR      r0,[r5,#0]  ; mess_data
003bc2  286a              CMP      r0,#0x6a
003bc4  d03a              BEQ      |L1.15420|
                  |L1.15302|
;;;5518   		{
;;;5519   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5520   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5521   	     }
;;;5522   	else 
;;;5523   		{
;;;5524   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003bc6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003bc8  4238              TST      r0,r7
003bca  d045              BEQ      |L1.15448|
;;;5525   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003bcc  69a0              LDR      r0,[r4,#0x18]
003bce  f0400080          ORR      r0,r0,#0x80
003bd2  61a0              STR      r0,[r4,#0x18]
                  |L1.15316|
;;;5526   		}
;;;5527   	//Реле аварии БПС
;;;5528   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003bd4  20d2              MOVS     r0,#0xd2
003bd6  f7fffffe          BL       mess_find_unvol
003bda  b110              CBZ      r0,|L1.15330|
003bdc  6828              LDR      r0,[r5,#0]  ; mess_data
003bde  286a              CMP      r0,#0x6a
003be0  d040              BEQ      |L1.15460|
                  |L1.15330|
;;;5529   		{
;;;5530   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5531   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5532        	}
;;;5533   	else 
;;;5534   		{
;;;5535   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003be2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003be4  4238              TST      r0,r7
003be6  d04c              BEQ      |L1.15490|
;;;5536        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003be8  69a0              LDR      r0,[r4,#0x18]
003bea  f0400020          ORR      r0,r0,#0x20
003bee  61a0              STR      r0,[r4,#0x18]
003bf0  e0d2              B        |L1.15768|
                  |L1.15346|
003bf2  6868              LDR      r0,[r5,#4]            ;5489  ; mess_data
003bf4  b138              CBZ      r0,|L1.15366|
003bf6  2801              CMP      r0,#1                 ;5490
003bf8  d1d0              BNE      |L1.15260|
003bfa  69a0              LDR      r0,[r4,#0x18]         ;5490
003bfc  f0400010          ORR      r0,r0,#0x10           ;5490
003c00  61a0              STR      r0,[r4,#0x18]         ;5490
003c02  e7cb              B        |L1.15260|
                  |L1.15364|
003c04  e004              B        |L1.15376|
                  |L1.15366|
003c06  69e0              LDR      r0,[r4,#0x1c]         ;5489
003c08  f0400010          ORR      r0,r0,#0x10           ;5489
003c0c  61e0              STR      r0,[r4,#0x1c]         ;5489
003c0e  e7c5              B        |L1.15260|
                  |L1.15376|
003c10  69e0              LDR      r0,[r4,#0x1c]         ;5494
003c12  f0400010          ORR      r0,r0,#0x10           ;5494
003c16  61e0              STR      r0,[r4,#0x1c]         ;5494
003c18  e7c0              B        |L1.15260|
                  |L1.15386|
003c1a  6868              LDR      r0,[r5,#4]            ;5510  ; mess_data
003c1c  b120              CBZ      r0,|L1.15400|
003c1e  69e0              LDR      r0,[r4,#0x1c]         ;5511
003c20  f0407000          ORR      r0,r0,#0x2000000      ;5511
003c24  61e0              STR      r0,[r4,#0x1c]         ;5511
003c26  e7c7              B        |L1.15288|
                  |L1.15400|
003c28  69a0              LDR      r0,[r4,#0x18]         ;5510
003c2a  f0407000          ORR      r0,r0,#0x2000000      ;5510
003c2e  61a0              STR      r0,[r4,#0x18]         ;5510
003c30  e7c2              B        |L1.15288|
                  |L1.15410|
003c32  6ba0              LDR      r0,[r4,#0x38]         ;5513
003c34  f0407000          ORR      r0,r0,#0x2000000      ;5513
003c38  63a0              STR      r0,[r4,#0x38]         ;5513
003c3a  e7bd              B        |L1.15288|
                  |L1.15420|
003c3c  6868              LDR      r0,[r5,#4]            ;5519  ; mess_data
003c3e  b130              CBZ      r0,|L1.15438|
003c40  2801              CMP      r0,#1                 ;5520
003c42  d1c7              BNE      |L1.15316|
003c44  69a0              LDR      r0,[r4,#0x18]         ;5520
003c46  f0400080          ORR      r0,r0,#0x80           ;5520
003c4a  61a0              STR      r0,[r4,#0x18]         ;5520
003c4c  e7c2              B        |L1.15316|
                  |L1.15438|
003c4e  69e0              LDR      r0,[r4,#0x1c]         ;5519
003c50  f0400080          ORR      r0,r0,#0x80           ;5519
003c54  61e0              STR      r0,[r4,#0x1c]         ;5519
003c56  e7bd              B        |L1.15316|
                  |L1.15448|
003c58  69e0              LDR      r0,[r4,#0x1c]         ;5524
003c5a  f0400080          ORR      r0,r0,#0x80           ;5524
003c5e  61e0              STR      r0,[r4,#0x1c]         ;5524
003c60  e7b8              B        |L1.15316|
                  |L1.15458|
003c62  e013              B        |L1.15500|
                  |L1.15460|
003c64  6868              LDR      r0,[r5,#4]            ;5530  ; mess_data
003c66  b110              CBZ      r0,|L1.15470|
003c68  2801              CMP      r0,#1                 ;5531
003c6a  d005              BEQ      |L1.15480|
003c6c  e094              B        |L1.15768|
                  |L1.15470|
003c6e  69e0              LDR      r0,[r4,#0x1c]         ;5530
003c70  f0400020          ORR      r0,r0,#0x20           ;5530
003c74  61e0              STR      r0,[r4,#0x1c]         ;5530
003c76  e08f              B        |L1.15768|
                  |L1.15480|
003c78  69a0              LDR      r0,[r4,#0x18]         ;5531
003c7a  f0400020          ORR      r0,r0,#0x20           ;5531
003c7e  61a0              STR      r0,[r4,#0x18]         ;5531
003c80  e08a              B        |L1.15768|
                  |L1.15490|
003c82  69e0              LDR      r0,[r4,#0x1c]         ;5535
003c84  f0400020          ORR      r0,r0,#0x20           ;5535
003c88  61e0              STR      r0,[r4,#0x1c]         ;5535
003c8a  e085              B        |L1.15768|
                  |L1.15500|
;;;5537   		} 
;;;5538   	}
;;;5539   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003c8c  f5a041ac          SUB      r1,r0,#0x5600
003c90  3911              SUBS     r1,r1,#0x11
003c92  d001              BEQ      |L1.15512|
003c94  310f              ADDS     r1,r1,#0xf
003c96  d163              BNE      |L1.15712|
                  |L1.15512|
;;;5540   	{
;;;5541   	#ifndef UKU2071x 
;;;5542   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5543   		{
;;;5544   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5545   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5546   		}
;;;5547   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5548   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5549   	#endif
;;;5550   	#ifdef UKU2071x 
;;;5551   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c98  20d2              MOVS     r0,#0xd2
003c9a  f7fffffe          BL       mess_find_unvol
003c9e  b110              CBZ      r0,|L1.15526|
003ca0  6828              LDR      r0,[r5,#0]  ; mess_data
003ca2  2866              CMP      r0,#0x66
003ca4  d023              BEQ      |L1.15598|
                  |L1.15526|
;;;5552   		{
;;;5553   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5554   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5555   		}
;;;5556   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003ca6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ca8  07c0              LSLS     r0,r0,#31
003caa  d02c              BEQ      |L1.15622|
;;;5557   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003cac  6fa0              LDR      r0,[r4,#0x78]
003cae  f0407000          ORR      r0,r0,#0x2000000
003cb2  67a0              STR      r0,[r4,#0x78]
                  |L1.15540|
;;;5558   	#endif
;;;5559   	
;;;5560   	
;;;5561   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003cb4  20d2              MOVS     r0,#0xd2
003cb6  f7fffffe          BL       mess_find_unvol
003cba  b110              CBZ      r0,|L1.15554|
003cbc  6828              LDR      r0,[r5,#0]  ; mess_data
003cbe  286a              CMP      r0,#0x6a
003cc0  d026              BEQ      |L1.15632|
                  |L1.15554|
;;;5562   		{
;;;5563   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5564   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5565   	     }
;;;5566   	else 
;;;5567   		{
;;;5568   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003cc2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003cc4  4238              TST      r0,r7
003cc6  d031              BEQ      |L1.15660|
;;;5569   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003cc8  69a0              LDR      r0,[r4,#0x18]
003cca  f0400080          ORR      r0,r0,#0x80
003cce  61a0              STR      r0,[r4,#0x18]
                  |L1.15568|
;;;5570   		} 
;;;5571   
;;;5572   	//Реле аварий батарей
;;;5573   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003cd0  20d2              MOVS     r0,#0xd2
003cd2  f7fffffe          BL       mess_find_unvol
003cd6  b110              CBZ      r0,|L1.15582|
003cd8  6828              LDR      r0,[r5,#0]  ; mess_data
003cda  2867              CMP      r0,#0x67
003cdc  d02b              BEQ      |L1.15670|
                  |L1.15582|
;;;5574   		{
;;;5575   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5576   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5577        	}
;;;5578   	else 
;;;5579   		{
;;;5580   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003cde  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003ce2  b390              CBZ      r0,|L1.15690|
;;;5581        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ce4  69a0              LDR      r0,[r4,#0x18]
003ce6  f0400010          ORR      r0,r0,#0x10
003cea  61a0              STR      r0,[r4,#0x18]
003cec  e054              B        |L1.15768|
                  |L1.15598|
003cee  6868              LDR      r0,[r5,#4]            ;5553  ; mess_data
003cf0  b120              CBZ      r0,|L1.15612|
003cf2  6fa0              LDR      r0,[r4,#0x78]         ;5554
003cf4  f0407000          ORR      r0,r0,#0x2000000      ;5554
003cf8  67a0              STR      r0,[r4,#0x78]         ;5554
003cfa  e7db              B        |L1.15540|
                  |L1.15612|
003cfc  6fe0              LDR      r0,[r4,#0x7c]         ;5553
003cfe  f0407000          ORR      r0,r0,#0x2000000      ;5553
003d02  67e0              STR      r0,[r4,#0x7c]         ;5553
003d04  e7d6              B        |L1.15540|
                  |L1.15622|
003d06  6fe0              LDR      r0,[r4,#0x7c]         ;5556
003d08  f0407000          ORR      r0,r0,#0x2000000      ;5556
003d0c  67e0              STR      r0,[r4,#0x7c]         ;5556
003d0e  e7d1              B        |L1.15540|
                  |L1.15632|
003d10  6868              LDR      r0,[r5,#4]            ;5563  ; mess_data
003d12  b130              CBZ      r0,|L1.15650|
003d14  2801              CMP      r0,#1                 ;5564
003d16  d1db              BNE      |L1.15568|
003d18  69a0              LDR      r0,[r4,#0x18]         ;5564
003d1a  f0400080          ORR      r0,r0,#0x80           ;5564
003d1e  61a0              STR      r0,[r4,#0x18]         ;5564
003d20  e7d6              B        |L1.15568|
                  |L1.15650|
003d22  69e0              LDR      r0,[r4,#0x1c]         ;5563
003d24  f0400080          ORR      r0,r0,#0x80           ;5563
003d28  61e0              STR      r0,[r4,#0x1c]         ;5563
003d2a  e7d1              B        |L1.15568|
                  |L1.15660|
003d2c  69e0              LDR      r0,[r4,#0x1c]         ;5568
003d2e  f0400080          ORR      r0,r0,#0x80           ;5568
003d32  61e0              STR      r0,[r4,#0x1c]         ;5568
003d34  e7cc              B        |L1.15568|
                  |L1.15670|
003d36  6868              LDR      r0,[r5,#4]            ;5575  ; mess_data
003d38  b110              CBZ      r0,|L1.15680|
003d3a  2801              CMP      r0,#1                 ;5576
003d3c  d006              BEQ      |L1.15692|
003d3e  e02b              B        |L1.15768|
                  |L1.15680|
003d40  69e0              LDR      r0,[r4,#0x1c]         ;5575
003d42  f0400010          ORR      r0,r0,#0x10           ;5575
003d46  61e0              STR      r0,[r4,#0x1c]         ;5575
003d48  e026              B        |L1.15768|
                  |L1.15690|
003d4a  e004              B        |L1.15702|
                  |L1.15692|
003d4c  69a0              LDR      r0,[r4,#0x18]         ;5576
003d4e  f0400010          ORR      r0,r0,#0x10           ;5576
003d52  61a0              STR      r0,[r4,#0x18]         ;5576
003d54  e020              B        |L1.15768|
                  |L1.15702|
003d56  69e0              LDR      r0,[r4,#0x1c]         ;5580
003d58  f0400010          ORR      r0,r0,#0x10           ;5580
003d5c  61e0              STR      r0,[r4,#0x1c]         ;5580
003d5e  e01b              B        |L1.15768|
                  |L1.15712|
;;;5582   		} 
;;;5583   	} 	 
;;;5584   else	
;;;5585   	{
;;;5586   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5587   	#ifndef UKU2071x 
;;;5588   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5589   		{
;;;5590   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5591   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5592   		}
;;;5593   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5594   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5595   	#endif
;;;5596   	#ifdef UKU2071x 
;;;5597   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003d60  20d2              MOVS     r0,#0xd2
003d62  f7fffffe          BL       mess_find_unvol
003d66  b110              CBZ      r0,|L1.15726|
003d68  6828              LDR      r0,[r5,#0]  ; mess_data
003d6a  2866              CMP      r0,#0x66
003d6c  d026              BEQ      |L1.15804|
                  |L1.15726|
;;;5598   		{
;;;5599   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5600   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5601   		}
;;;5602   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003d6e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d70  07c0              LSLS     r0,r0,#31
003d72  d02f              BEQ      |L1.15828|
;;;5603   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003d74  6fa0              LDR      r0,[r4,#0x78]
003d76  f0407000          ORR      r0,r0,#0x2000000
003d7a  67a0              STR      r0,[r4,#0x78]
                  |L1.15740|
;;;5604   	#endif
;;;5605   
;;;5606   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003d7c  20d2              MOVS     r0,#0xd2
003d7e  f7fffffe          BL       mess_find_unvol
003d82  b110              CBZ      r0,|L1.15754|
003d84  6828              LDR      r0,[r5,#0]  ; mess_data
003d86  286a              CMP      r0,#0x6a
003d88  d029              BEQ      |L1.15838|
                  |L1.15754|
;;;5607   		{
;;;5608   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5609   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5610        	}
;;;5611   	else 
;;;5612   		{
;;;5613   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003d8a  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003d8c  4238              TST      r0,r7
003d8e  d034              BEQ      |L1.15866|
;;;5614        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003d90  69a0              LDR      r0,[r4,#0x18]
003d92  f0400020          ORR      r0,r0,#0x20
003d96  61a0              STR      r0,[r4,#0x18]
                  |L1.15768|
;;;5615   		}
;;;5616   	}
;;;5617   //Дополнительное реле УКУ 
;;;5618   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003d98  20d2              MOVS     r0,#0xd2
003d9a  f7fffffe          BL       mess_find_unvol
;;;5619   	{
;;;5620   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5621   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5622   	}
;;;5623   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5624   	{
;;;5625   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003d9e  f8df83fc          LDR      r8,|L1.16796|
003da2  4fff              LDR      r7,|L1.16800|
003da4  4eff              LDR      r6,|L1.16804|
003da6  b110              CBZ      r0,|L1.15790|
003da8  6828              LDR      r0,[r5,#0]            ;5618  ; mess_data
003daa  2871              CMP      r0,#0x71              ;5618
003dac  d02a              BEQ      |L1.15876|
                  |L1.15790|
003dae  48fe              LDR      r0,|L1.16808|
003db0  f9b00000          LDRSH    r0,[r0,#0]            ;5623  ; DOP_RELE_FUNC
003db4  b380              CBZ      r0,|L1.15896|
;;;5626   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5627   	}
;;;5628   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003db6  2801              CMP      r0,#1
003db8  d066              BEQ      |L1.16008|
003dba  e070              B        |L1.16030|
                  |L1.15804|
003dbc  6868              LDR      r0,[r5,#4]            ;5599  ; mess_data
003dbe  b120              CBZ      r0,|L1.15818|
003dc0  69e0              LDR      r0,[r4,#0x1c]         ;5600
003dc2  f0407000          ORR      r0,r0,#0x2000000      ;5600
003dc6  61e0              STR      r0,[r4,#0x1c]         ;5600
003dc8  e7d8              B        |L1.15740|
                  |L1.15818|
003dca  69a0              LDR      r0,[r4,#0x18]         ;5599
003dcc  f0407000          ORR      r0,r0,#0x2000000      ;5599
003dd0  61a0              STR      r0,[r4,#0x18]         ;5599
003dd2  e7d3              B        |L1.15740|
                  |L1.15828|
003dd4  6ba0              LDR      r0,[r4,#0x38]         ;5602
003dd6  f0407000          ORR      r0,r0,#0x2000000      ;5602
003dda  63a0              STR      r0,[r4,#0x38]         ;5602
003ddc  e7ce              B        |L1.15740|
                  |L1.15838|
003dde  6868              LDR      r0,[r5,#4]            ;5608  ; mess_data
003de0  b130              CBZ      r0,|L1.15856|
003de2  2801              CMP      r0,#1                 ;5609
003de4  d1d8              BNE      |L1.15768|
003de6  69a0              LDR      r0,[r4,#0x18]         ;5609
003de8  f0400020          ORR      r0,r0,#0x20           ;5609
003dec  61a0              STR      r0,[r4,#0x18]         ;5609
003dee  e7d3              B        |L1.15768|
                  |L1.15856|
003df0  69e0              LDR      r0,[r4,#0x1c]         ;5608
003df2  f0400020          ORR      r0,r0,#0x20           ;5608
003df6  61e0              STR      r0,[r4,#0x1c]         ;5608
003df8  e7ce              B        |L1.15768|
                  |L1.15866|
003dfa  69e0              LDR      r0,[r4,#0x1c]         ;5613
003dfc  f0400020          ORR      r0,r0,#0x20           ;5613
003e00  61e0              STR      r0,[r4,#0x1c]         ;5613
003e02  e7c9              B        |L1.15768|
                  |L1.15876|
003e04  6868              LDR      r0,[r5,#4]            ;5620  ; mess_data
003e06  b110              CBZ      r0,|L1.15886|
003e08  2801              CMP      r0,#1                 ;5621
003e0a  d006              BEQ      |L1.15898|
003e0c  e047              B        |L1.16030|
                  |L1.15886|
003e0e  69e0              LDR      r0,[r4,#0x1c]         ;5620
003e10  f4407000          ORR      r0,r0,#0x200          ;5620
003e14  61e0              STR      r0,[r4,#0x1c]         ;5620
003e16  e042              B        |L1.16030|
                  |L1.15896|
003e18  e004              B        |L1.15908|
                  |L1.15898|
003e1a  69a0              LDR      r0,[r4,#0x18]         ;5621
003e1c  f4407000          ORR      r0,r0,#0x200          ;5621
003e20  61a0              STR      r0,[r4,#0x18]         ;5621
003e22  e03c              B        |L1.16030|
                  |L1.15908|
003e24  48e1              LDR      r0,|L1.16812|
003e26  49e2              LDR      r1,|L1.16816|
003e28  f9b00000          LDRSH    r0,[r0,#0]            ;5625  ; speedChIsOn
003e2c  b9d0              CBNZ     r0,|L1.15972|
003e2e  f8962023          LDRB     r2,[r6,#0x23]         ;5625  ; spc_stat
003e32  2a02              CMP      r2,#2                 ;5625
003e34  d016              BEQ      |L1.15972|
003e36  780a              LDRB     r2,[r1,#0]            ;5625  ; hv_vz_stat
003e38  b9a2              CBNZ     r2,|L1.15972|
003e3a  783a              LDRB     r2,[r7,#0]            ;5625  ; sp_ch_stat
003e3c  b992              CBNZ     r2,|L1.15972|
003e3e  7972              LDRB     r2,[r6,#5]            ;5625  ; vz1_stat
003e40  b982              CBNZ     r2,|L1.15972|
003e42  79f2              LDRB     r2,[r6,#7]            ;5625  ; vz2_stat
003e44  b972              CBNZ     r2,|L1.15972|
003e46  f9b82000          LDRSH    r2,[r8,#0]            ;5625  ; load_U
003e4a  230a              MOVS     r3,#0xa               ;5625
003e4c  fb92f2f3          SDIV     r2,r2,r3              ;5625
003e50  4bd8              LDR      r3,|L1.16820|
003e52  f9b33000          LDRSH    r3,[r3,#0]            ;5625  ; UVENTOFF
003e56  429a              CMP      r2,r3                 ;5625
003e58  da04              BGE      |L1.15972|
003e5a  69e0              LDR      r0,[r4,#0x1c]         ;5625
003e5c  f4407000          ORR      r0,r0,#0x200          ;5625
003e60  61e0              STR      r0,[r4,#0x1c]         ;5625
003e62  e01c              B        |L1.16030|
                  |L1.15972|
003e64  b958              CBNZ     r0,|L1.15998|
003e66  f8960023          LDRB     r0,[r6,#0x23]         ;5626  ; spc_stat
003e6a  2802              CMP      r0,#2                 ;5626
003e6c  d007              BEQ      |L1.15998|
003e6e  7808              LDRB     r0,[r1,#0]            ;5626  ; hv_vz_stat
003e70  b928              CBNZ     r0,|L1.15998|
003e72  7838              LDRB     r0,[r7,#0]            ;5626  ; sp_ch_stat
003e74  b918              CBNZ     r0,|L1.15998|
003e76  7970              LDRB     r0,[r6,#5]            ;5626  ; vz1_stat
003e78  b908              CBNZ     r0,|L1.15998|
003e7a  79f0              LDRB     r0,[r6,#7]            ;5626  ; vz2_stat
003e7c  b178              CBZ      r0,|L1.16030|
                  |L1.15998|
003e7e  69a0              LDR      r0,[r4,#0x18]         ;5626
003e80  f4407000          ORR      r0,r0,#0x200          ;5626
003e84  61a0              STR      r0,[r4,#0x18]         ;5626
003e86  e00a              B        |L1.16030|
                  |L1.16008|
;;;5629   	{
;;;5630   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003e88  20d2              MOVS     r0,#0xd2
003e8a  f7fffffe          BL       mess_find_unvol
003e8e  b110              CBZ      r0,|L1.16022|
003e90  6828              LDR      r0,[r5,#0]  ; mess_data
003e92  2872              CMP      r0,#0x72
003e94  d017              BEQ      |L1.16070|
                  |L1.16022|
;;;5631   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
003e96  69a0              LDR      r0,[r4,#0x18]
003e98  f4407000          ORR      r0,r0,#0x200
003e9c  61a0              STR      r0,[r4,#0x18]
                  |L1.16030|
;;;5632   	}
;;;5633   	
;;;5634   //Блок выносной реле
;;;5635   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
003e9e  20d2              MOVS     r0,#0xd2
003ea0  f7fffffe          BL       mess_find_unvol
;;;5636   	{
;;;5637   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
003ea4  f8df9310          LDR      r9,|L1.16824|
;;;5638   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5639   	}
;;;5640   else 
;;;5641   	{
;;;5642   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
003ea8  4cc4              LDR      r4,|L1.16828|
003eaa  b110              CBZ      r0,|L1.16050|
003eac  6828              LDR      r0,[r5,#0]            ;5635  ; mess_data
003eae  2875              CMP      r0,#0x75              ;5635
003eb0  d00e              BEQ      |L1.16080|
                  |L1.16050|
003eb2  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003eb4  07c0              LSLS     r0,r0,#31
003eb6  d01e              BEQ      |L1.16118|
003eb8  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003ebc  f0400001          ORR      r0,r0,#1
003ec0  f8890000          STRB     r0,[r9,#0]
003ec4  e01d              B        |L1.16130|
                  |L1.16070|
003ec6  69e0              LDR      r0,[r4,#0x1c]         ;5630
003ec8  f4407000          ORR      r0,r0,#0x200          ;5630
003ecc  61e0              STR      r0,[r4,#0x1c]         ;5630
003ece  e7e6              B        |L1.16030|
                  |L1.16080|
003ed0  6868              LDR      r0,[r5,#4]            ;5637  ; mess_data
003ed2  b110              CBZ      r0,|L1.16090|
003ed4  2801              CMP      r0,#1                 ;5638
003ed6  d007              BEQ      |L1.16104|
003ed8  e013              B        |L1.16130|
                  |L1.16090|
003eda  f8990000          LDRB     r0,[r9,#0]            ;5637  ; bdr_transmit_stat
003ede  f00000fe          AND      r0,r0,#0xfe           ;5637
003ee2  f8890000          STRB     r0,[r9,#0]            ;5637
003ee6  e00c              B        |L1.16130|
                  |L1.16104|
003ee8  f8990000          LDRB     r0,[r9,#0]            ;5638  ; bdr_transmit_stat
003eec  f0400001          ORR      r0,r0,#1              ;5638
003ef0  f8890000          STRB     r0,[r9,#0]            ;5638
003ef4  e005              B        |L1.16130|
                  |L1.16118|
;;;5643   	else 						bdr_transmit_stat&=0xfe;
003ef6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003efa  f00000fe          AND      r0,r0,#0xfe
003efe  f8890000          STRB     r0,[r9,#0]
                  |L1.16130|
;;;5644   	}	
;;;5645   
;;;5646   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
003f02  20d2              MOVS     r0,#0xd2
003f04  f7fffffe          BL       mess_find_unvol
003f08  b110              CBZ      r0,|L1.16144|
003f0a  6828              LDR      r0,[r5,#0]  ; mess_data
003f0c  2876              CMP      r0,#0x76
003f0e  d009              BEQ      |L1.16164|
                  |L1.16144|
;;;5647   	{
;;;5648   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5649   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5650   	}
;;;5651   else 
;;;5652   	{
;;;5653   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
003f10  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003f12  07c0              LSLS     r0,r0,#31
003f14  d019              BEQ      |L1.16202|
003f16  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003f1a  f0400002          ORR      r0,r0,#2
003f1e  f8890000          STRB     r0,[r9,#0]
003f22  e018              B        |L1.16214|
                  |L1.16164|
003f24  6868              LDR      r0,[r5,#4]            ;5648  ; mess_data
003f26  b110              CBZ      r0,|L1.16174|
003f28  2801              CMP      r0,#1                 ;5649
003f2a  d007              BEQ      |L1.16188|
003f2c  e013              B        |L1.16214|
                  |L1.16174|
003f2e  f8990000          LDRB     r0,[r9,#0]            ;5648  ; bdr_transmit_stat
003f32  f00000fd          AND      r0,r0,#0xfd           ;5648
003f36  f8890000          STRB     r0,[r9,#0]            ;5648
003f3a  e00c              B        |L1.16214|
                  |L1.16188|
003f3c  f8990000          LDRB     r0,[r9,#0]            ;5649  ; bdr_transmit_stat
003f40  f0400002          ORR      r0,r0,#2              ;5649
003f44  f8890000          STRB     r0,[r9,#0]            ;5649
003f48  e005              B        |L1.16214|
                  |L1.16202|
;;;5654   	else 						bdr_transmit_stat&=0xfd;
003f4a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003f4e  f00000fd          AND      r0,r0,#0xfd
003f52  f8890000          STRB     r0,[r9,#0]
                  |L1.16214|
;;;5655   	}	
;;;5656   	
;;;5657   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
003f56  20d2              MOVS     r0,#0xd2
003f58  f7fffffe          BL       mess_find_unvol
003f5c  b110              CBZ      r0,|L1.16228|
003f5e  6828              LDR      r0,[r5,#0]  ; mess_data
003f60  2877              CMP      r0,#0x77
003f62  d009              BEQ      |L1.16248|
                  |L1.16228|
;;;5658   	{
;;;5659   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5660   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5661   	}
;;;5662   else 
;;;5663   	{
;;;5664   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
003f64  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003f66  07c0              LSLS     r0,r0,#31
003f68  d019              BEQ      |L1.16286|
003f6a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003f6e  f0400004          ORR      r0,r0,#4
003f72  f8890000          STRB     r0,[r9,#0]
003f76  e018              B        |L1.16298|
                  |L1.16248|
003f78  6868              LDR      r0,[r5,#4]            ;5659  ; mess_data
003f7a  b110              CBZ      r0,|L1.16258|
003f7c  2801              CMP      r0,#1                 ;5660
003f7e  d007              BEQ      |L1.16272|
003f80  e013              B        |L1.16298|
                  |L1.16258|
003f82  f8990000          LDRB     r0,[r9,#0]            ;5659  ; bdr_transmit_stat
003f86  f00000fb          AND      r0,r0,#0xfb           ;5659
003f8a  f8890000          STRB     r0,[r9,#0]            ;5659
003f8e  e00c              B        |L1.16298|
                  |L1.16272|
003f90  f8990000          LDRB     r0,[r9,#0]            ;5660  ; bdr_transmit_stat
003f94  f0400004          ORR      r0,r0,#4              ;5660
003f98  f8890000          STRB     r0,[r9,#0]            ;5660
003f9c  e005              B        |L1.16298|
                  |L1.16286|
;;;5665   	else 						bdr_transmit_stat&=0xfb;
003f9e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003fa2  f00000fb          AND      r0,r0,#0xfb
003fa6  f8890000          STRB     r0,[r9,#0]
                  |L1.16298|
;;;5666   	}	
;;;5667   	
;;;5668   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
003faa  20d2              MOVS     r0,#0xd2
003fac  f7fffffe          BL       mess_find_unvol
003fb0  b110              CBZ      r0,|L1.16312|
003fb2  6828              LDR      r0,[r5,#0]  ; mess_data
003fb4  2878              CMP      r0,#0x78
003fb6  d009              BEQ      |L1.16332|
                  |L1.16312|
;;;5669   	{
;;;5670   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5671   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5672   	}
;;;5673   else 
;;;5674   	{
;;;5675   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
003fb8  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003fba  07c0              LSLS     r0,r0,#31
003fbc  d019              BEQ      |L1.16370|
003fbe  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003fc2  f0400008          ORR      r0,r0,#8
003fc6  f8890000          STRB     r0,[r9,#0]
003fca  e018              B        |L1.16382|
                  |L1.16332|
003fcc  6868              LDR      r0,[r5,#4]            ;5670  ; mess_data
003fce  b110              CBZ      r0,|L1.16342|
003fd0  2801              CMP      r0,#1                 ;5671
003fd2  d007              BEQ      |L1.16356|
003fd4  e013              B        |L1.16382|
                  |L1.16342|
003fd6  f8990000          LDRB     r0,[r9,#0]            ;5670  ; bdr_transmit_stat
003fda  f00000f7          AND      r0,r0,#0xf7           ;5670
003fde  f8890000          STRB     r0,[r9,#0]            ;5670
003fe2  e00c              B        |L1.16382|
                  |L1.16356|
003fe4  f8990000          LDRB     r0,[r9,#0]            ;5671  ; bdr_transmit_stat
003fe8  f0400008          ORR      r0,r0,#8              ;5671
003fec  f8890000          STRB     r0,[r9,#0]            ;5671
003ff0  e005              B        |L1.16382|
                  |L1.16370|
;;;5676   	else 						bdr_transmit_stat&=0xf7;
003ff2  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003ff6  f00000f7          AND      r0,r0,#0xf7
003ffa  f8890000          STRB     r0,[r9,#0]
                  |L1.16382|
;;;5677   	}	
;;;5678   					 	
;;;5679   #endif
;;;5680   
;;;5681   #ifdef UKU_KONTUR
;;;5682   
;;;5683   //Реле общей аварии
;;;5684   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5685   	{
;;;5686   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5687   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5688   	}
;;;5689   else 
;;;5690   	{
;;;5691        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5692             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5693             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5694             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5695             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5696        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5697   	}
;;;5698   
;;;5699   	
;;;5700   //rel_warm_plazma=0;
;;;5701   //Реле освещения   
;;;5702   /*
;;;5703   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5704   	{
;;;5705   	if(mess_data[1]==0)
;;;5706   		{
;;;5707   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5708   		rel_warm_plazma=1;
;;;5709   		}
;;;5710   	else if(mess_data[1]==1) 
;;;5711   		{
;;;5712   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5713   		rel_warm_plazma=2;
;;;5714   		}
;;;5715        }
;;;5716   else 
;;;5717   	{
;;;5718   	if(warm_stat_k==wsOFF) 
;;;5719   		{
;;;5720   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5721   		rel_warm_plazma=3;
;;;5722   		}
;;;5723        else 
;;;5724   		{
;;;5725   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5726   		rel_warm_plazma=4;
;;;5727   		}
;;;5728   	}
;;;5729   */
;;;5730   //Реле освещения
;;;5731   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5732   	{
;;;5733   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5734   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5735        }
;;;5736   else 
;;;5737   	{
;;;5738   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5739        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5740   	}
;;;5741   
;;;5742   
;;;5743   
;;;5744   //Реле выключения нагрузки
;;;5745   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5746   	{
;;;5747   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5748   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5749        }
;;;5750   else if(tloaddisable_cmnd==0)
;;;5751   	{
;;;5752   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5753   	}
;;;5754   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5755   	{
;;;5756   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5757   	}
;;;5758   
;;;5759   else 
;;;5760   	{
;;;5761   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5762        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5763   	} 
;;;5764   
;;;5765   //Реле осевого вентилятора или отопителя
;;;5766   if(RELE_LOG)
;;;5767   	{
;;;5768   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5769   		{
;;;5770   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5771   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5772   		}
;;;5773   	else 
;;;5774   		{
;;;5775   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5776   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5777   		} 
;;;5778   
;;;5779   	}
;;;5780   else 
;;;5781   	{
;;;5782   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5783   		{
;;;5784   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5785   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5786   		}
;;;5787   	else 
;;;5788   		{
;;;5789   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5790   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5791   		} 
;;;5792   	}
;;;5793   #endif
;;;5794   
;;;5795   
;;;5796   #ifdef UKU_TELECORE2015
;;;5797   //Реле аварии сети
;;;5798   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5799   	{
;;;5800   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5801   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5802   	}
;;;5803   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5804   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5805   
;;;5806   
;;;5807   //Реле освещения
;;;5808   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5809   	{
;;;5810   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5811   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5812        }
;;;5813   else 
;;;5814   	{
;;;5815   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5816        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5817   	}
;;;5818   
;;;5819   //Реле отопителя
;;;5820   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5821   	{
;;;5822   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5823   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5824   	}
;;;5825   else 
;;;5826   	{
;;;5827   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5828        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5829   	} 
;;;5830   //Реле вентилятора
;;;5831   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5832   	{
;;;5833   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5834   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5835   	}
;;;5836   else 
;;;5837   	{
;;;5838   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5839        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5840   	} 
;;;5841   
;;;5842   //Реле внутреннего вентилятора
;;;5843   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5844   	{
;;;5845   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5846   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5847   	}
;;;5848   else 
;;;5849   	{
;;;5850   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5851        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5852   	} 
;;;5853   
;;;5854   #endif
;;;5855   
;;;5856   #ifdef UKU_TELECORE2017
;;;5857   //Реле аварии сети
;;;5858   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5859   	{
;;;5860   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5861   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5862   	}
;;;5863   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5864   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5865   
;;;5866   
;;;5867   //Реле освещения
;;;5868   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5869   	{
;;;5870   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5871   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5872        }
;;;5873   else 
;;;5874   	{
;;;5875   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5876        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5877   	}
;;;5878   
;;;5879   //Реле отопителя
;;;5880   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5881   	{
;;;5882   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5883   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5884   	}
;;;5885   else 
;;;5886   	{
;;;5887   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5888        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5889   	} 
;;;5890   //Реле вентилятора
;;;5891   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5892   	{
;;;5893   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5894   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5895   	}
;;;5896   else 
;;;5897   	{
;;;5898   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5899        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5900   	} 
;;;5901   
;;;5902   //Реле внутреннего вентилятора
;;;5903   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5904   	{
;;;5905   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5906   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5907   	}
;;;5908   else 
;;;5909   	{
;;;5910   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5911        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5912   	} 
;;;5913   
;;;5914   //Реле выключения нагрузки
;;;5915   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5916   	{
;;;5917   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5918   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5919        }
;;;5920   else if(tloaddisable_cmnd==0)
;;;5921   	{
;;;5922   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5923   	}
;;;5924   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5925   	{
;;;5926   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5927   	}
;;;5928   
;;;5929   else 
;;;5930   	{
;;;5931   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5932        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5933   	} 
;;;5934   
;;;5935   
;;;5936   #endif
;;;5937   
;;;5938   #ifdef IPS_SGEP_GAZPROM
;;;5939   rele_hndl_plazma[0]++;
;;;5940   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5941   	{
;;;5942   	rele_hndl_plazma[1]++;
;;;5943   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5944   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5945        }
;;;5946   else 
;;;5947   	{
;;;5948   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5949        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5950   	} 
;;;5951   
;;;5952   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5953   	{
;;;5954   	rele_hndl_plazma[2]++;
;;;5955   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5956   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5957   	}
;;;5958   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5959   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5960   #endif
;;;5961   
;;;5962   if(NUMBDR==1)
003ffe  4870              LDR      r0,|L1.16832|
004000  8800              LDRH     r0,[r0,#0]  ; NUMBDR
004002  2801              CMP      r0,#1
004004  d17e              BNE      |L1.16644|
;;;5963   	{
;;;5964   	char ii_;
;;;5965   	char bdr_avar_stat_temp=0;
004006  f04f0000          MOV      r0,#0
;;;5966   	for	(ii_=0;ii_<4;ii_++)
00400a  4601              MOV      r1,r0
;;;5967   		{
;;;5968   		//АБ разряжена
;;;5969   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5970   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5971   		//Ускоренный заряд
;;;5972   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5973   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5974   		//Выравнивающий заряд
;;;5975   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5976   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5977   		//Общая авария ЗВУ
;;;5978   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5979   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5980   		//Uвых завышено
;;;5981   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5982   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
00400c  f8dfa1b4          LDR      r10,|L1.16836|
;;;5983   		//Uвых занижено
;;;5984   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5985   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5986   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5987   			(
;;;5988   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
004010  f8df91b4          LDR      r9,|L1.16840|
004014  4d6d              LDR      r5,|L1.16844|
004016  f8dfb1b8          LDR      r11,|L1.16848|
00401a  f04f0301          MOV      r3,#1                 ;4920
                  |L1.16414|
00401e  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5969
004022  ea5f7cc2          LSLS     r12,r2,#31            ;5969
004026  d010              BEQ      |L1.16458|
004028  f8dfc1a8          LDR      r12,|L1.16852|
00402c  f9b8e000          LDRSH    lr,[r8,#0]            ;5970  ; load_U
004030  f9bcc000          LDRSH    r12,[r12,#0]          ;5970  ; USIGN
004034  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5970
004038  ebbe0f4c          CMP      lr,r12,LSL #1         ;5970
00403c  da05              BGE      |L1.16458|
00403e  fa03fc01          LSL      r12,r3,r1             ;5970
004042  ea4c0c00          ORR      r12,r12,r0            ;5970
004046  f00c00ff          AND      r0,r12,#0xff          ;5970
                  |L1.16458|
00404a  ea5f7c82          LSLS     r12,r2,#30            ;5972
00404e  d50a              BPL      |L1.16486|
004050  f897c000          LDRB     r12,[r7,#0]           ;5973  ; sp_ch_stat
004054  f1bc0f02          CMP      r12,#2                ;5973
004058  d105              BNE      |L1.16486|
00405a  fa03fc01          LSL      r12,r3,r1             ;5973
00405e  ea4c0c00          ORR      r12,r12,r0            ;5973
004062  f00c00ff          AND      r0,r12,#0xff          ;5973
                  |L1.16486|
004066  ea5f7c42          LSLS     r12,r2,#29            ;5975
00406a  d50a              BPL      |L1.16514|
00406c  f896c023          LDRB     r12,[r6,#0x23]        ;5976  ; spc_stat
004070  f1bc0f02          CMP      r12,#2                ;5976
004074  d105              BNE      |L1.16514|
004076  fa03fc01          LSL      r12,r3,r1             ;5976
00407a  ea4c0c00          ORR      r12,r12,r0            ;5976
00407e  f00c00ff          AND      r0,r12,#0xff          ;5976
                  |L1.16514|
004082  ea5f7c02          LSLS     r12,r2,#28            ;5978
004086  d50c              BPL      |L1.16546|
004088  f8dfc14c          LDR      r12,|L1.16856|
00408c  f8dcc000          LDR      r12,[r12,#0]          ;5979  ; avar_stat
004090  f1bc0f00          CMP      r12,#0                ;5979
004094  d005              BEQ      |L1.16546|
004096  fa03fc01          LSL      r12,r3,r1             ;5979
00409a  ea4c0c00          ORR      r12,r12,r0            ;5979
00409e  f00c00ff          AND      r0,r12,#0xff          ;5979
                  |L1.16546|
0040a2  ea5f6cc2          LSLS     r12,r2,#27            ;5981
0040a6  d50a              BPL      |L1.16574|
0040a8  f89ac000          LDRB     r12,[r10,#0]          ;5982  ; uout_av
0040ac  f1bc0f01          CMP      r12,#1                ;5982
0040b0  d105              BNE      |L1.16574|
0040b2  fa03fc01          LSL      r12,r3,r1             ;5982
0040b6  ea4c0c00          ORR      r12,r12,r0            ;5982
0040ba  f00c00ff          AND      r0,r12,#0xff          ;5982
                  |L1.16574|
0040be  ea5f6c82          LSLS     r12,r2,#26            ;5984
0040c2  d50a              BPL      |L1.16602|
0040c4  f89ac000          LDRB     r12,[r10,#0]          ;5985  ; uout_av
0040c8  f1bc0f02          CMP      r12,#2                ;5985
0040cc  d105              BNE      |L1.16602|
0040ce  fa03fc01          LSL      r12,r3,r1             ;5985
0040d2  ea4c0c00          ORR      r12,r12,r0            ;5985
0040d6  f00c00ff          AND      r0,r12,#0xff          ;5985
                  |L1.16602|
0040da  ea5f6c42          LSLS     r12,r2,#25            ;5986
0040de  d525              BPL      |L1.16684|
0040e0  f899c001          LDRB     r12,[r9,#1]  ; bps
0040e4  ea5f6ccc          LSLS     r12,r12,#27
0040e8  d504              BPL      |L1.16628|
0040ea  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0040ee  f1bc0f01          CMP      r12,#1
0040f2  da15              BGE      |L1.16672|
                  |L1.16628|
;;;5989   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
0040f4  f899c065          LDRB     r12,[r9,#0x65]  ; bps
0040f8  ea5f6ccc          LSLS     r12,r12,#27
0040fc  d506              BPL      |L1.16652|
0040fe  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004102  e000              B        |L1.16646|
                  |L1.16644|
004104  e047              B        |L1.16790|
                  |L1.16646|
004106  f1bc0f02          CMP      r12,#2
00410a  da09              BGE      |L1.16672|
                  |L1.16652|
;;;5990   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
00410c  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
004110  ea5f6ccc          LSLS     r12,r12,#27
004114  d50a              BPL      |L1.16684|
004116  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00411a  f1bc0f03          CMP      r12,#3
00411e  db05              BLT      |L1.16684|
                  |L1.16672|
;;;5991   			))bdr_avar_stat_temp|=(1<<ii_);
004120  fa03fc01          LSL      r12,r3,r1
004124  ea4c0c00          ORR      r12,r12,r0
004128  f00c00ff          AND      r0,r12,#0xff
                  |L1.16684|
;;;5992   		if((RELE_SET_MASK[ii_]&0x80)&&
00412c  ea5f6c02          LSLS     r12,r2,#24
004130  d523              BPL      |L1.16762|
;;;5993   			(
;;;5994   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
004132  f899c001          LDRB     r12,[r9,#1]  ; bps
004136  ea5f7c0c          LSLS     r12,r12,#28
00413a  d004              BEQ      |L1.16710|
00413c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004140  f1bc0f01          CMP      r12,#1
004144  da13              BGE      |L1.16750|
                  |L1.16710|
;;;5995   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
004146  f899c065          LDRB     r12,[r9,#0x65]  ; bps
00414a  ea5f7c0c          LSLS     r12,r12,#28
00414e  d004              BEQ      |L1.16730|
004150  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004154  f1bc0f02          CMP      r12,#2
004158  da09              BGE      |L1.16750|
                  |L1.16730|
;;;5996   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
00415a  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
00415e  ea5f7c0c          LSLS     r12,r12,#28
004162  d00a              BEQ      |L1.16762|
004164  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004168  f1bc0f03          CMP      r12,#3
00416c  db05              BLT      |L1.16762|
                  |L1.16750|
;;;5997   			))bdr_avar_stat_temp|=(1<<ii_);
00416e  fa03fc01          LSL      r12,r3,r1
004172  ea4c0c00          ORR      r12,r12,r0
004176  f00c00ff          AND      r0,r12,#0xff
                  |L1.16762|
;;;5998   
;;;5999   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
00417a  0412              LSLS     r2,r2,#16
00417c  d404              BMI      |L1.16776|
00417e  fa03f201          LSL      r2,r3,r1
004182  ea820200          EOR      r2,r2,r0
004186  b2d0              UXTB     r0,r2
                  |L1.16776|
004188  f1010101          ADD      r1,r1,#1              ;5966
00418c  b2c9              UXTB     r1,r1                 ;5966
00418e  2904              CMP      r1,#4                 ;5966
004190  f4ffaf45          BCC      |L1.16414|
;;;6000   		}
;;;6001   	bdr_avar_stat=bdr_avar_stat_temp;
004194  7020              STRB     r0,[r4,#0]
                  |L1.16790|
;;;6002   	}
;;;6003   }
004196  e8bd9ff0          POP      {r4-r12,pc}
00419a  0000              DCW      0x0000
                  |L1.16796|
                          DCD      load_U
                  |L1.16800|
                          DCD      sp_ch_stat
                  |L1.16804|
                          DCD      ||area_number.25||
                  |L1.16808|
                          DCD      DOP_RELE_FUNC
                  |L1.16812|
                          DCD      speedChIsOn
                  |L1.16816|
                          DCD      hv_vz_stat
                  |L1.16820|
                          DCD      UVENTOFF
                  |L1.16824|
                          DCD      bdr_transmit_stat
                  |L1.16828|
                          DCD      bdr_avar_stat
                  |L1.16832|
                          DCD      NUMBDR
                  |L1.16836|
                          DCD      uout_av
                  |L1.16840|
                          DCD      bps
                  |L1.16844|
                          DCD      NUMIST
                  |L1.16848|
                          DCD      RELE_SET_MASK
                  |L1.16852|
                          DCD      USIGN
                  |L1.16856|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6006   //-----------------------------------------------
;;;6007   void bps_hndl(void)
0041dc  e92d5ff0          PUSH     {r4-r12,lr}
;;;6008   {
;;;6009   char ptr__,i;
;;;6010   unsigned short tempUS;
;;;6011   
;;;6012   if(sh_cnt0<10)
0041e0  4eff              LDR      r6,|L1.17888|
;;;6013   	{
;;;6014   	sh_cnt0++;
;;;6015   	if(sh_cnt0>=10)
;;;6016   		{
;;;6017   		sh_cnt0=0;
0041e2  2700              MOVS     r7,#0
;;;6018   		b1Hz_sh=1;
0041e4  f04f0a01          MOV      r10,#1
0041e8  f8960021          LDRB     r0,[r6,#0x21]         ;6012  ; sh_cnt0
0041ec  280a              CMP      r0,#0xa               ;6012
0041ee  d20a              BCS      |L1.16902|
0041f0  f1000001          ADD      r0,r0,#1              ;6014
0041f4  b2c0              UXTB     r0,r0                 ;6014
0041f6  f8860021          STRB     r0,[r6,#0x21]         ;6014
0041fa  280a              CMP      r0,#0xa               ;6015
0041fc  d303              BCC      |L1.16902|
0041fe  f8867021          STRB     r7,[r6,#0x21]         ;6017
004202  f886a022          STRB     r10,[r6,#0x22]
                  |L1.16902|
;;;6019   		}
;;;6020   	}
;;;6021   
;;;6022   /*if(sh_cnt1<5)
;;;6023   	{
;;;6024   	sh_cnt1++;
;;;6025   	if(sh_cnt1==5)
;;;6026   		{
;;;6027   		sh_cnt1=0;
;;;6028   		b2Hz_sh=1;
;;;6029   		}
;;;6030   	} */
;;;6031   
;;;6032   
;;;6033   /*
;;;6034   if(mess_find(MESS_SRC_ON_OFF))
;;;6035   	{
;;;6036   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6037   		{
;;;6038   		char i;
;;;6039   		for(i=0;i<NUMIST;i++)
;;;6040   			{
;;;6041   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6042   			}
;;;6043   		
;;;6044   		}
;;;6045   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6046   		{
;;;6047   		char i;
;;;6048   		for(i=0;i<NUMIST;i++)
;;;6049   			{
;;;6050   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6051   			}
;;;6052   		
;;;6053   		}
;;;6054   	}
;;;6055   	
;;;6056   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6057   	{				
;;;6058   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6059   		{
;;;6060   		char i;
;;;6061   		for(i=0;i<NUMIST;i++)
;;;6062   			{
;;;6063   			if(mess_data[1]&(1<<i))
;;;6064   				{
;;;6065   				src[i]._ist_blok_cnt=0;
;;;6066   				src[i]._flags_tu=2;
;;;6067   				}
;;;6068   			}
;;;6069   		
;;;6070   		}				
;;;6071   	}*/
;;;6072   
;;;6073   
;;;6074   
;;;6075   /*else*/ 
;;;6076   bps_on_mask=0;
004206  f8a6705e          STRH     r7,[r6,#0x5e]
;;;6077   bps_off_mask=0;
00420a  f8a67060          STRH     r7,[r6,#0x60]
;;;6078   
;;;6079   if(mess_find_unvol(MESS2BPS_HNDL))
00420e  20cd              MOVS     r0,#0xcd
004210  f7fffffe          BL       mess_find_unvol
;;;6080   	{
;;;6081   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6082   		{
;;;6083   		bps_off_mask=0xffff;
;;;6084   		}
;;;6085   
;;;6086   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6087   		{
;;;6088   		bps_off_mask=mess_data[1];
;;;6089   		}
;;;6090   
;;;6091   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6092   		{
;;;6093   		bps_on_mask=mess_data[1];
;;;6094   		}
;;;6095   
;;;6096   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6097   		{
;;;6098   		bps_on_mask=0xffff;
;;;6099   		}
;;;6100   
;;;6101   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6102   		{
;;;6103   		bps_on_mask=mess_data[1];
;;;6104   		bps_off_mask=~(mess_data[1]);
;;;6105   		}
;;;6106   
;;;6107   
;;;6108   	for(i=0;i<=NUMIST;i++)
;;;6109   		{
;;;6110   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
004214  f8df83cc          LDR      r8,|L1.17892|
004218  f8dfb3cc          LDR      r11,|L1.17896|
00421c  b3a0              CBZ      r0,|L1.17032|
00421e  4af3              LDR      r2,|L1.17900|
004220  f64f73ff          MOV      r3,#0xffff            ;6083
004224  6810              LDR      r0,[r2,#0]            ;6081  ; mess_data
004226  28ce              CMP      r0,#0xce              ;6081
004228  d101              BNE      |L1.16942|
00422a  f8a63060          STRH     r3,[r6,#0x60]         ;6083
                  |L1.16942|
00422e  28cf              CMP      r0,#0xcf              ;6086
004230  d102              BNE      |L1.16952|
004232  6851              LDR      r1,[r2,#4]            ;6088  ; mess_data
004234  f8a61060          STRH     r1,[r6,#0x60]         ;6088
                  |L1.16952|
004238  28d1              CMP      r0,#0xd1              ;6091
00423a  d102              BNE      |L1.16962|
00423c  6851              LDR      r1,[r2,#4]            ;6093  ; mess_data
00423e  f8a6105e          STRH     r1,[r6,#0x5e]         ;6093
                  |L1.16962|
004242  28d2              CMP      r0,#0xd2              ;6096
004244  d101              BNE      |L1.16970|
004246  f8a6305e          STRH     r3,[r6,#0x5e]         ;6098
                  |L1.16970|
00424a  28d0              CMP      r0,#0xd0              ;6101
00424c  d106              BNE      |L1.16988|
00424e  6850              LDR      r0,[r2,#4]            ;6103  ; mess_data
004250  f8a6005e          STRH     r0,[r6,#0x5e]         ;6103
004254  ea6f0000          MVN      r0,r0                 ;6104
004258  f8a60060          STRH     r0,[r6,#0x60]         ;6104
                  |L1.16988|
00425c  f04f0400          MOV      r4,#0                 ;6108
004260  e037              B        |L1.17106|
                  |L1.16994|
004262  f8b60060          LDRH     r0,[r6,#0x60]  ; bps_off_mask
004266  fa0af904          LSL      r9,r10,r4
00426a  ea190f00          TST      r9,r0
00426e  d00c              BEQ      |L1.17034|
004270  eb0400c4          ADD      r0,r4,r4,LSL #3
004274  eb001004          ADD      r0,r0,r4,LSL #4
004278  eb080080          ADD      r0,r8,r0,LSL #2
00427c  f8301f40          LDRH     r1,[r0,#0x40]!
004280  f1010101          ADD      r1,r1,#1
004284  8001              STRH     r1,[r0,#0]
004286  e008              B        |L1.17050|
                  |L1.17032|
004288  e028              B        |L1.17116|
                  |L1.17034|
;;;6111   		else bps[i]._blok_cnt=0;
00428a  eb0400c4          ADD      r0,r4,r4,LSL #3
00428e  eb001004          ADD      r0,r0,r4,LSL #4
004292  eb080080          ADD      r0,r8,r0,LSL #2
004296  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.17050|
;;;6112   		gran(&bps[i]._blok_cnt,0,50);
00429a  eb0400c4          ADD      r0,r4,r4,LSL #3
00429e  eb001004          ADD      r0,r0,r4,LSL #4
0042a2  eb080580          ADD      r5,r8,r0,LSL #2
0042a6  f1050040          ADD      r0,r5,#0x40
0042aa  2232              MOVS     r2,#0x32
0042ac  2100              MOVS     r1,#0
0042ae  f7fffffe          BL       gran
;;;6113   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
0042b2  f9b50040          LDRSH    r0,[r5,#0x40]
0042b6  2814              CMP      r0,#0x14
0042b8  dd01              BLE      |L1.17086|
0042ba  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17086|
;;;6114   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
0042be  f8b6005e          LDRH     r0,[r6,#0x5e]  ; bps_on_mask
0042c2  ea190f00          TST      r9,r0
0042c6  d001              BEQ      |L1.17100|
0042c8  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.17100|
0042cc  f1040401          ADD      r4,r4,#1              ;6108
0042d0  b2e4              UXTB     r4,r4                 ;6108
                  |L1.17106|
0042d2  f9bb0000          LDRSH    r0,[r11,#0]           ;6108  ; NUMIST
0042d6  4284              CMP      r4,r0                 ;6108
0042d8  ddc3              BLE      |L1.16994|
0042da  e08d              B        |L1.17400|
                  |L1.17116|
;;;6115   	     }
;;;6116   
;;;6117   	
;;;6118   /*
;;;6119   
;;;6120   	if(bps_all_off_cnt>20)
;;;6121   		{
;;;6122   		for(i=0;i<=NUMIST;i++)
;;;6123   			{
;;;6124   	     	bps[i]._flags_tu=1;
;;;6125   	     	}
;;;6126   		}
;;;6127   	else if(bps_mask_off_cnt>20)
;;;6128   		{
;;;6129   		for(i=0;i<=NUMIST;i++)
;;;6130   			{
;;;6131   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6132   	     	}
;;;6133   		}	
;;;6134   		
;;;6135   	else if(bps_mask_on_off_cnt>20)
;;;6136   		{
;;;6137   		for(i=0;i<=NUMIST;i++)
;;;6138   			{
;;;6139   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6140   			else bps[i]._flags_tu=0;
;;;6141   	     	}
;;;6142   		}
;;;6143   		
;;;6144   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6145   		{
;;;6146   		for(i=0;i<=NUMIST;i++)
;;;6147   			{
;;;6148   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6149   	     	}
;;;6150   		}
;;;6151   */										
;;;6152   	}
;;;6153   
;;;6154   
;;;6155   else if(b1Hz_sh)
0042dc  f8960022          LDRB     r0,[r6,#0x22]  ; b1Hz_sh
0042e0  b3e8              CBZ      r0,|L1.17246|
;;;6156   	{
;;;6157   	ptr__=0;
0042e2  f04f0400          MOV      r4,#0
;;;6158        for(i=0;i<=NUMIST;i++)
0042e6  4621              MOV      r1,r4
0042e8  f9bb0000          LDRSH    r0,[r11,#0]           ;6108
0042ec  e00a              B        |L1.17156|
                  |L1.17134|
;;;6159   		{
;;;6160   	     bps[i]._flags_tu=1;
0042ee  eb0102c1          ADD      r2,r1,r1,LSL #3
0042f2  eb021201          ADD      r2,r2,r1,LSL #4
0042f6  eb080282          ADD      r2,r8,r2,LSL #2
0042fa  f882a02c          STRB     r10,[r2,#0x2c]
0042fe  f1010101          ADD      r1,r1,#1              ;6158
004302  b2c9              UXTB     r1,r1                 ;6158
                  |L1.17156|
004304  4281              CMP      r1,r0                 ;6158
004306  ddf2              BLE      |L1.17134|
;;;6161   	     }	
;;;6162     	     
;;;6163     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
004308  f04f0100          MOV      r1,#0
00430c  e023              B        |L1.17238|
                  |L1.17166|
;;;6164     		{
;;;6165   		char ii,iii;
;;;6166   
;;;6167   		ii=(char)NUMIST;
00430e  b2c2              UXTB     r2,r0
;;;6168   		//if(ii<0)ii=0;
;;;6169   		if(ii>32)ii=32;
004310  2a20              CMP      r2,#0x20
004312  d901              BLS      |L1.17176|
004314  f04f0220          MOV      r2,#0x20
                  |L1.17176|
;;;6170   		iii=numOfForvardBps;
004318  f8963028          LDRB     r3,[r6,#0x28]  ; numOfForvardBps
;;;6171   		//if(iii<0)iii=0;
;;;6172   		if(iii>=NUMIST)iii=0;
00431c  4283              CMP      r3,r0
00431e  db01              BLT      |L1.17188|
004320  f04f0300          MOV      r3,#0
                  |L1.17188|
;;;6173   		iii+=i;
004324  440b              ADD      r3,r3,r1
004326  b2db              UXTB     r3,r3
;;;6174   		iii=iii%ii;
004328  fbb3f5f2          UDIV     r5,r3,r2
00432c  fb023215          MLS      r2,r2,r5,r3
;;;6175   		
;;;6176     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
004330  eb0203c2          ADD      r3,r2,r2,LSL #3
004334  eb031202          ADD      r2,r3,r2,LSL #4
004338  eb080282          ADD      r2,r8,r2,LSL #2
00433c  7893              LDRB     r3,[r2,#2]
00433e  2b02              CMP      r3,#2
004340  d001              BEQ      |L1.17222|
004342  2b01              CMP      r3,#1
004344  d104              BNE      |L1.17232|
                  |L1.17222|
;;;6177     	         	{
;;;6178     	         	bps[iii]._flags_tu=0;
004346  f882702c          STRB     r7,[r2,#0x2c]
;;;6179     	         	ptr__++;
00434a  f1040401          ADD      r4,r4,#1
00434e  b2e4              UXTB     r4,r4
                  |L1.17232|
004350  f1010101          ADD      r1,r1,#1              ;6163
004354  b2c9              UXTB     r1,r1                 ;6163
                  |L1.17238|
004356  4281              CMP      r1,r0                 ;6163
004358  da06              BGE      |L1.17256|
00435a  4aa5              LDR      r2,|L1.17904|
00435c  e000              B        |L1.17248|
                  |L1.17246|
00435e  e04b              B        |L1.17400|
                  |L1.17248|
004360  f9b22000          LDRSH    r2,[r2,#0]            ;6163  ; num_necc
004364  4294              CMP      r4,r2                 ;6163
004366  dbd2              BLT      |L1.17166|
                  |L1.17256|
;;;6180     	         	}
;;;6181   			
;;;6182     	     }
;;;6183   	bps[numOfForvardBps_old]._flags_tu=0;
004368  f8961029          LDRB     r1,[r6,#0x29]  ; numOfForvardBps_old
00436c  eb0102c1          ADD      r2,r1,r1,LSL #3
004370  eb021101          ADD      r1,r2,r1,LSL #4
004374  eb080181          ADD      r1,r8,r1,LSL #2
004378  f881702c          STRB     r7,[r1,#0x2c]
;;;6184   
;;;6185   	if(main_1Hz_cnt<60)
00437c  499d              LDR      r1,|L1.17908|
00437e  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
004382  293c              CMP      r1,#0x3c
004384  da0f              BGE      |L1.17318|
;;;6186   		{
;;;6187        	for(i=0;i<=NUMIST;i++)
004386  f04f0100          MOV      r1,#0
00438a  e00a              B        |L1.17314|
                  |L1.17292|
;;;6188   			{
;;;6189   	     	bps[i]._flags_tu=0;
00438c  eb0102c1          ADD      r2,r1,r1,LSL #3
004390  eb021201          ADD      r2,r2,r1,LSL #4
004394  eb080282          ADD      r2,r8,r2,LSL #2
004398  f882702c          STRB     r7,[r2,#0x2c]
00439c  f1010101          ADD      r1,r1,#1              ;6187
0043a0  b2c9              UXTB     r1,r1                 ;6187
                  |L1.17314|
0043a2  4281              CMP      r1,r0                 ;6187
0043a4  ddf2              BLE      |L1.17292|
                  |L1.17318|
;;;6190   	     	}	
;;;6191   		}
;;;6192   	if(ipsBlckStat)
0043a6  4994              LDR      r1,|L1.17912|
0043a8  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
0043aa  b179              CBZ      r1,|L1.17356|
;;;6193   		{
;;;6194        	for(i=0;i<=NUMIST;i++)
0043ac  f04f0100          MOV      r1,#0
0043b0  e00a              B        |L1.17352|
                  |L1.17330|
;;;6195   			{
;;;6196   	     	bps[i]._flags_tu=1;
0043b2  eb0102c1          ADD      r2,r1,r1,LSL #3
0043b6  eb021201          ADD      r2,r2,r1,LSL #4
0043ba  eb080282          ADD      r2,r8,r2,LSL #2
0043be  f882a02c          STRB     r10,[r2,#0x2c]
0043c2  f1010101          ADD      r1,r1,#1              ;6194
0043c6  b2c9              UXTB     r1,r1                 ;6194
                  |L1.17352|
0043c8  4281              CMP      r1,r0                 ;6194
0043ca  ddf2              BLE      |L1.17330|
                  |L1.17356|
;;;6197   	     	}
;;;6198   		}
;;;6199   
;;;6200        for(i=0;i<=NUMIST;i++)
0043cc  f04f0100          MOV      r1,#0
;;;6201   		{
;;;6202   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
0043d0  f06f0331          MVN      r3,#0x31
0043d4  e00e              B        |L1.17396|
                  |L1.17366|
0043d6  eb0102c1          ADD      r2,r1,r1,LSL #3
0043da  eb021201          ADD      r2,r2,r1,LSL #4
0043de  eb080282          ADD      r2,r8,r2,LSL #2
0043e2  f892402c          LDRB     r4,[r2,#0x2c]
0043e6  2c01              CMP      r4,#1
0043e8  d101              BNE      |L1.17390|
0043ea  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.17390|
0043ee  f1010101          ADD      r1,r1,#1              ;6200
0043f2  b2c9              UXTB     r1,r1                 ;6200
                  |L1.17396|
0043f4  4281              CMP      r1,r0                 ;6200
0043f6  ddee              BLE      |L1.17366|
                  |L1.17400|
;;;6203   	   	}	
;;;6204   		 
;;;6205     	}
;;;6206   
;;;6207   
;;;6208   for(i=0;i<NUMIST;i++)
0043f8  f04f0000          MOV      r0,#0
;;;6209        {
;;;6210        if(bps[i]._ist_blok_host_cnt!=0)
;;;6211             {
;;;6212             bps[i]._flags_tu=99;
0043fc  f04f0463          MOV      r4,#0x63
004400  f9bb1000          LDRSH    r1,[r11,#0]           ;6108
004404  e00f              B        |L1.17446|
                  |L1.17414|
004406  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6210
00440a  eb021200          ADD      r2,r2,r0,LSL #4       ;6210
00440e  eb080282          ADD      r2,r8,r2,LSL #2       ;6210
004412  6bd3              LDR      r3,[r2,#0x3c]         ;6210
004414  b123              CBZ      r3,|L1.17440|
004416  f882402c          STRB     r4,[r2,#0x2c]
;;;6213   	     bps[i]._ist_blok_host_cnt--;
00441a  f1a30301          SUB      r3,r3,#1
00441e  63d3              STR      r3,[r2,#0x3c]
                  |L1.17440|
004420  f1000001          ADD      r0,r0,#1              ;6208
004424  b2c0              UXTB     r0,r0                 ;6208
                  |L1.17446|
004426  4288              CMP      r0,r1                 ;6208
004428  dbed              BLT      |L1.17414|
;;;6214             }
;;;6215        }
;;;6216   
;;;6217   
;;;6218   
;;;6219   
;;;6220   b1Hz_sh=0;
00442a  f8867022          STRB     r7,[r6,#0x22]
;;;6221   
;;;6222   
;;;6223   num_of_wrks_bps=0;
00442e  77b7              STRB     r7,[r6,#0x1e]
;;;6224   tempUS=0;
004430  f04f0200          MOV      r2,#0
;;;6225   for(i=0;i<NUMIST;i++)
004434  4610              MOV      r0,r2
004436  e013              B        |L1.17504|
                  |L1.17464|
;;;6226   	{
;;;6227   	if(bps[i]._state==bsWRK)
004438  eb0003c0          ADD      r3,r0,r0,LSL #3
00443c  eb031300          ADD      r3,r3,r0,LSL #4
004440  eb080383          ADD      r3,r8,r3,LSL #2
004444  789c              LDRB     r4,[r3,#2]
004446  2c01              CMP      r4,#1
004448  d107              BNE      |L1.17498|
;;;6228   		{
;;;6229   		num_of_wrks_bps++;
00444a  7fb4              LDRB     r4,[r6,#0x1e]  ; num_of_wrks_bps
00444c  f1040401          ADD      r4,r4,#1
004450  77b4              STRB     r4,[r6,#0x1e]
;;;6230   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
004452  69db              LDR      r3,[r3,#0x1c]
004454  4293              CMP      r3,r2
004456  dd00              BLE      |L1.17498|
004458  b29a              UXTH     r2,r3
                  |L1.17498|
00445a  f1000001          ADD      r0,r0,#1              ;6225
00445e  b2c0              UXTB     r0,r0                 ;6225
                  |L1.17504|
004460  4288              CMP      r0,r1                 ;6225
004462  dbe9              BLT      |L1.17464|
;;;6231   		}
;;;6232   	}
;;;6233   Ubpsmax=tempUS;
004464  f8a6204e          STRH     r2,[r6,#0x4e]
;;;6234   
;;;6235   bPARALLEL_ENOUG=0;
004468  f886702c          STRB     r7,[r6,#0x2c]
;;;6236   bPARALLEL_NOT_ENOUG=1;
00446c  f886a02b          STRB     r10,[r6,#0x2b]
;;;6237   
;;;6238   for(i=0;i<NUMIST;i++)
004470  f04f0000          MOV      r0,#0
;;;6239   	{
;;;6240   	if(bps[i]._Ti>=TSIGN)
004474  4a61              LDR      r2,|L1.17916|
004476  f9b23000          LDRSH    r3,[r2,#0]
;;;6241   		{
;;;6242   		bPARALLEL_ENOUG=1;
;;;6243   		}
;;;6244   	if(bps[i]._Ti>=(TSIGN-5))
00447a  f1a30405          SUB      r4,r3,#5
00447e  e011              B        |L1.17572|
                  |L1.17536|
004480  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6240
004484  eb021200          ADD      r2,r2,r0,LSL #4       ;6240
004488  eb080282          ADD      r2,r8,r2,LSL #2       ;6240
00448c  6a92              LDR      r2,[r2,#0x28]         ;6240
00448e  429a              CMP      r2,r3                 ;6240
004490  db01              BLT      |L1.17558|
004492  f886a02c          STRB     r10,[r6,#0x2c]        ;6242
                  |L1.17558|
004496  42a2              CMP      r2,r4
004498  db01              BLT      |L1.17566|
;;;6245   		{
;;;6246   		bPARALLEL_NOT_ENOUG=0;
00449a  f886702b          STRB     r7,[r6,#0x2b]
                  |L1.17566|
00449e  f1000001          ADD      r0,r0,#1              ;6238
0044a2  b2c0              UXTB     r0,r0                 ;6238
                  |L1.17572|
0044a4  4288              CMP      r0,r1                 ;6238
0044a6  dbeb              BLT      |L1.17536|
;;;6247   		}
;;;6248   	}
;;;6249   
;;;6250   if(bPARALLEL_ENOUG==1)
0044a8  f896002c          LDRB     r0,[r6,#0x2c]  ; bPARALLEL_ENOUG
0044ac  2801              CMP      r0,#1
0044ae  d00a              BEQ      |L1.17606|
;;;6251   	{
;;;6252   	bPARALLEL=1;
;;;6253   	}
;;;6254   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
0044b0  f896002d          LDRB     r0,[r6,#0x2d]  ; bPARALLEL
0044b4  2800              CMP      r0,#0
0044b6  d005              BEQ      |L1.17604|
0044b8  f896002b          LDRB     r0,[r6,#0x2b]  ; bPARALLEL_NOT_ENOUG
0044bc  2800              CMP      r0,#0
0044be  d001              BEQ      |L1.17604|
;;;6255   	{
;;;6256   	bPARALLEL=0;
0044c0  f886702d          STRB     r7,[r6,#0x2d]
                  |L1.17604|
;;;6257   	}
;;;6258   }
0044c4  e667              B        |L1.16790|
                  |L1.17606|
0044c6  f886a02d          STRB     r10,[r6,#0x2d]        ;6252
0044ca  e664              B        |L1.16790|
;;;6259   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6266   //-----------------------------------------------
;;;6267   void powerAntiAliasingHndl(void)
0044cc  b570              PUSH     {r4-r6,lr}
;;;6268   {
;;;6269   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
0044ce  230a              MOVS     r3,#0xa
0044d0  4c4c              LDR      r4,|L1.17924|
0044d2  484b              LDR      r0,|L1.17920|
;;;6270   	{
;;;6271   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6272   	if(powerSummaryCnt>=10)
;;;6273   		{
;;;6274   		power_summary=power_summary_tempo;
;;;6275   		}
;;;6276   	}
;;;6277   else powerSummaryCnt=0;
0044d4  2500              MOVS     r5,#0
0044d6  6822              LDR      r2,[r4,#0]            ;6269  ; power_summary_tempo_old
0044d8  6800              LDR      r0,[r0,#0]            ;6269  ; power_summary_tempo
0044da  fbb2f6f3          UDIV     r6,r2,r3              ;6269
0044de  fbb0f1f3          UDIV     r1,r0,r3              ;6269
0044e2  4a49              LDR      r2,|L1.17928|
0044e4  42b1              CMP      r1,r6                 ;6269
0044e6  d10b              BNE      |L1.17664|
0044e8  7811              LDRB     r1,[r2,#0]            ;6271  ; powerSummaryCnt
0044ea  290f              CMP      r1,#0xf               ;6271
0044ec  d202              BCS      |L1.17652|
0044ee  f1010101          ADD      r1,r1,#1              ;6271
0044f2  7011              STRB     r1,[r2,#0]            ;6271
                  |L1.17652|
0044f4  7811              LDRB     r1,[r2,#0]            ;6272  ; powerSummaryCnt
0044f6  290a              CMP      r1,#0xa               ;6272
0044f8  d303              BCC      |L1.17666|
0044fa  4944              LDR      r1,|L1.17932|
0044fc  6008              STR      r0,[r1,#0]            ;6274  ; power_summary
0044fe  e000              B        |L1.17666|
                  |L1.17664|
004500  7015              STRB     r5,[r2,#0]
                  |L1.17666|
;;;6278   power_summary_tempo_old=power_summary_tempo;
004502  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6279   
;;;6280   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
004504  4842              LDR      r0,|L1.17936|
004506  4c43              LDR      r4,|L1.17940|
004508  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
00450c  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
004510  fbb0f1f3          UDIV     r1,r0,r3
004514  fbb2f3f3          UDIV     r3,r2,r3
;;;6281   	{
;;;6282   	if(powerCurrentCnt<15)powerCurrentCnt++;
004518  4a3f              LDR      r2,|L1.17944|
00451a  4299              CMP      r1,r3                 ;6280
00451c  d10b              BNE      |L1.17718|
00451e  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004520  290f              CMP      r1,#0xf
004522  d202              BCS      |L1.17706|
004524  f1010101          ADD      r1,r1,#1
004528  7011              STRB     r1,[r2,#0]
                  |L1.17706|
;;;6283   	if(powerCurrentCnt>=10)
00452a  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00452c  290a              CMP      r1,#0xa
00452e  d303              BCC      |L1.17720|
;;;6284   		{
;;;6285   		power_current=power_current_tempo;
004530  493a              LDR      r1,|L1.17948|
004532  8008              STRH     r0,[r1,#0]
004534  e000              B        |L1.17720|
                  |L1.17718|
;;;6286   		}
;;;6287   	}
;;;6288   else powerCurrentCnt=0;
004536  7015              STRB     r5,[r2,#0]
                  |L1.17720|
;;;6289   power_current_tempo_old=power_current_tempo;
004538  8020              STRH     r0,[r4,#0]
;;;6290   }
00453a  bd70              POP      {r4-r6,pc}
;;;6291   
                          ENDP

                  energometr_hndl PROC
;;;6401   //-----------------------------------------------
;;;6402   void energometr_hndl(void)
00453c  4770              BX       lr
;;;6403   {
;;;6404   //2F 3F 21 0D 0A 
;;;6405   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6406   //2F 3F 21 0D 0A 
;;;6407   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6408   //06 30 35 31 0D 0A 
;;;6409   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6410   
;;;6411   #ifdef CE102M_ENABLED
;;;6412   /*if
;;;6413   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6414   
;;;6415   if(read_power_cnt_main_cnt)
;;;6416   	{
;;;6417   	read_power_cnt_main_cnt--;
;;;6418   	if(read_power_cnt_main_cnt==0)
;;;6419   		{
;;;6420   		rx_read_power_cnt_phase=0;
;;;6421   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6422   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6423   		else bENERGOMETR_UIP=0;
;;;6424   		//bENERGOMETR_UIP=2;
;;;6425   		}
;;;6426   	}
;;;6427   
;;;6428   if (rx_read_power_cnt_phase==0)
;;;6429   	{
;;;6430   	char command_with_crc[20];
;;;6431   	
;;;6432      	command_with_crc[0]=0xaf;  // /
;;;6433   	command_with_crc[1]=0x3f;  // ?
;;;6434   	command_with_crc[2]=0x21;  // !
;;;6435   	command_with_crc[3]=0x8d;  // CR
;;;6436   	command_with_crc[4]=0x0a;  // LF
;;;6437   
;;;6438   	uart_out__adr1(command_with_crc,5);
;;;6439   
;;;6440   	rx_wr_index1=0;
;;;6441   	rx_read_power_cnt_phase=1;
;;;6442   
;;;6443   	read_power_cnt_main_cnt=50;
;;;6444   	}
;;;6445   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6446   	{
;;;6447   	char command_with_crc[20];
;;;6448   	
;;;6449   	command_with_crc[0]=0x06;  //  
;;;6450   	command_with_crc[1]=0x30;  // 0
;;;6451   	command_with_crc[2]=0x35;  // 5
;;;6452   	command_with_crc[3]=0xb1;  // 1
;;;6453   	command_with_crc[4]=0x8d;  // CR
;;;6454   	command_with_crc[5]=0x0a;  // LF
;;;6455   	
;;;6456   	uart_out__adr1(command_with_crc,6);
;;;6457   	
;;;6458   	rx_wr_index1=0;
;;;6459   	rx_read_power_cnt_phase=3;
;;;6460   
;;;6461   	read_power_cnt_main_cnt=50;
;;;6462   	}  
;;;6463   
;;;6464   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6465   	{
;;;6466   	char command_with_crc[20];
;;;6467   	
;;;6468   	command_with_crc[0]=0x81;  //  
;;;6469   	command_with_crc[1]=0xd2;  // 0
;;;6470   	command_with_crc[2]=0xb1;  // 5
;;;6471   	command_with_crc[3]=0x82;  // 1
;;;6472   	command_with_crc[4]=0x56;  // CR
;;;6473   	command_with_crc[5]=0xcf;  // LF
;;;6474   	command_with_crc[6]=0xcc;  // 1
;;;6475   	command_with_crc[7]=0xd4;  // CR
;;;6476   	command_with_crc[8]=0x41;  // LF
;;;6477   	command_with_crc[9]=0x28;  // 1
;;;6478   	command_with_crc[10]=0xa9;  // CR
;;;6479   	command_with_crc[11]=0x03;  // LF
;;;6480   	command_with_crc[12]=0x5f;  // LF
;;;6481   		
;;;6482   	uart_out__adr1(command_with_crc,13);
;;;6483   	
;;;6484   	rx_wr_index1=0;
;;;6485   	rx_read_power_cnt_phase=5;
;;;6486   
;;;6487   	read_power_cnt_main_cnt=50;
;;;6488   	}  
;;;6489   
;;;6490   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6491   	{
;;;6492   	char command_with_crc[20];
;;;6493   	
;;;6494   	command_with_crc[0]=0x81;  //  
;;;6495   	command_with_crc[1]=0xd2;  // 0
;;;6496   	command_with_crc[2]=0xb1;  // 5
;;;6497   	command_with_crc[3]=0x82;  // 1
;;;6498   	command_with_crc[4]=0xc3;  // CR
;;;6499   	command_with_crc[5]=0x55;  // LF
;;;6500   	command_with_crc[6]=0xd2;  // 1
;;;6501   	command_with_crc[7]=0xd2;  // CR
;;;6502   	command_with_crc[8]=0xc5;  // LF
;;;6503   	command_with_crc[9]=0x28;  // 1
;;;6504   	command_with_crc[10]=0xa9;  // CR
;;;6505   	command_with_crc[11]=0x03;  // LF
;;;6506   	command_with_crc[12]=0x5a;  // LF
;;;6507   		
;;;6508   	uart_out__adr1(command_with_crc,13);
;;;6509   	
;;;6510   	rx_wr_index1=0;
;;;6511   	rx_read_power_cnt_phase=9;
;;;6512   
;;;6513   	read_power_cnt_main_cnt=50;
;;;6514   	}  
;;;6515   
;;;6516   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6517   	{
;;;6518   	char command_with_crc[20];
;;;6519   	
;;;6520   	command_with_crc[0]=0x81;  //  		01
;;;6521   	command_with_crc[1]=0xd2;  // R		52
;;;6522   	command_with_crc[2]=0xb1;  // 1		31
;;;6523   	command_with_crc[3]=0x82;  // 		02
;;;6524   	command_with_crc[4]=0x50;  // P		50
;;;6525   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6526   	command_with_crc[6]=0xd7;  // W		57
;;;6527   	command_with_crc[7]=0xc5;  // E		45
;;;6528   	command_with_crc[8]=0x50;  // P		50
;;;6529   	command_with_crc[9]=0x28;  // (		28
;;;6530   	command_with_crc[10]=0xa9;  // )	29
;;;6531   	command_with_crc[11]=0x03;  // 		03
;;;6532   	command_with_crc[12]=0xe4;  // d	64
;;;6533   		
;;;6534   	uart_out__adr1(command_with_crc,13);
;;;6535   	
;;;6536   	rx_wr_index1=0;
;;;6537   	rx_read_power_cnt_phase=21;
;;;6538   
;;;6539   	read_power_cnt_main_cnt=50;
;;;6540   	}  
;;;6541   
;;;6542   
;;;6543   #endif
;;;6544   }
;;;6545   
                          ENDP

                  ips_current_average_hndl PROC
;;;6546   //-----------------------------------------------
;;;6547   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
00453e  e92d4ff0          PUSH     {r4-r11,lr}
;;;6548   {
004542  b089              SUB      sp,sp,#0x24
;;;6549   
;;;6550   if(++ica_timer_cnt>=10) 
004544  4e36              LDR      r6,|L1.17952|
;;;6551   	{
;;;6552   	ica_timer_cnt=0;
004546  2400              MOVS     r4,#0
004548  7830              LDRB     r0,[r6,#0]            ;6550  ; ica_timer_cnt
00454a  1c40              ADDS     r0,r0,#1              ;6550
00454c  b2c0              UXTB     r0,r0                 ;6550
00454e  7030              STRB     r0,[r6,#0]            ;6550
004550  280a              CMP      r0,#0xa               ;6550
004552  d300              BCC      |L1.17750|
004554  7034              STRB     r4,[r6,#0]
                  |L1.17750|
;;;6553   	}
;;;6554   
;;;6555   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004556  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004558  4f32              LDR      r7,|L1.17956|
;;;6556   	{
;;;6557   	
;;;6558   	ica_plazma[0]++;
;;;6559   
;;;6560   	ica_my_current=bps_I;
;;;6561   
;;;6562   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00455a  f8dfb0cc          LDR      r11,|L1.17960|
00455e  4d20              LDR      r5,|L1.17888|
004560  bbe8              CBNZ     r0,|L1.17886|
004562  7fa8              LDRB     r0,[r5,#0x1e]         ;6555  ; num_of_wrks_bps
004564  b3d8              CBZ      r0,|L1.17886|
004566  f8950023          LDRB     r0,[r5,#0x23]         ;6555  ; spc_stat
00456a  7969              LDRB     r1,[r5,#5]            ;6555  ; vz1_stat
00456c  4308              ORRS     r0,r0,r1              ;6555
00456e  79e9              LDRB     r1,[r5,#7]            ;6555  ; vz2_stat
004570  4308              ORRS     r0,r0,r1              ;6555
004572  7839              LDRB     r1,[r7,#0]            ;6555  ; sp_ch_stat
004574  4308              ORRS     r0,r0,r1              ;6555
004576  d17e              BNE      |L1.18038|
004578  f8df90b0          LDR      r9,|L1.17964|
00457c  f8990000          LDRB     r0,[r9,#0]            ;6558  ; ica_plazma
004580  f1000001          ADD      r0,r0,#1              ;6558
004584  f8890000          STRB     r0,[r9,#0]            ;6558
004588  4829              LDR      r0,|L1.17968|
00458a  f9b01000          LDRSH    r1,[r0,#0]            ;6560  ; bps_I
00458e  4829              LDR      r0,|L1.17972|
004590  8001              STRH     r1,[r0,#0]            ;6560
004592  4829              LDR      r0,|L1.17976|
;;;6563   		{
;;;6564   		ica_plazma[1]++;
;;;6565   		ica_u_necc--;
004594  f8dfa0a4          LDR      r10,|L1.17980|
004598  f9b02000          LDRSH    r2,[r0,#0]            ;6562  ; ica_your_current
00459c  4648              MOV      r0,r9                 ;6558
00459e  f9bac000          LDRSH    r12,[r10,#0]
0045a2  7843              LDRB     r3,[r0,#1]            ;6564
0045a4  4826              LDR      r0,|L1.17984|
0045a6  4291              CMP      r1,r2                 ;6562
0045a8  f9b08000          LDRSH    r8,[r0,#0]            ;6562
0045ac  4658              MOV      r0,r11                ;6562
0045ae  f9b00000          LDRSH    r0,[r0,#0]            ;6562
0045b2  dd47              BLE      |L1.17988|
0045b4  eba10e02          SUB      lr,r1,r2              ;6562
0045b8  f1be0f05          CMP      lr,#5                 ;6562
0045bc  db42              BLT      |L1.17988|
0045be  2801              CMP      r0,#1                 ;6562
0045c0  d004              BEQ      |L1.17868|
0045c2  2802              CMP      r0,#2                 ;6562
0045c4  d13e              BNE      |L1.17988|
0045c6  f1b80f05          CMP      r8,#5                 ;6562
0045ca  dd3b              BLE      |L1.17988|
                  |L1.17868|
0045cc  f1030301          ADD      r3,r3,#1              ;6564
0045d0  f8893001          STRB     r3,[r9,#1]            ;6564
0045d4  f1ac0c01          SUB      r12,r12,#1
0045d8  f8aac000          STRH     r12,[r10,#0]
0045dc  e046              B        |L1.18028|
                  |L1.17886|
0045de  e04a              B        |L1.18038|
                  |L1.17888|
                          DCD      ||area_number.25||
                  |L1.17892|
                          DCD      bps
                  |L1.17896|
                          DCD      NUMIST
                  |L1.17900|
                          DCD      mess_data
                  |L1.17904|
                          DCD      num_necc
                  |L1.17908|
                          DCD      main_1Hz_cnt
                  |L1.17912|
                          DCD      ipsBlckStat
                  |L1.17916|
                          DCD      TSIGN
                  |L1.17920|
                          DCD      power_summary_tempo
                  |L1.17924|
                          DCD      power_summary_tempo_old
                  |L1.17928|
                          DCD      powerSummaryCnt
                  |L1.17932|
                          DCD      power_summary
                  |L1.17936|
                          DCD      power_current_tempo
                  |L1.17940|
                          DCD      power_current_tempo_old
                  |L1.17944|
                          DCD      powerCurrentCnt
                  |L1.17948|
                          DCD      power_current
                  |L1.17952|
                          DCD      ica_timer_cnt
                  |L1.17956|
                          DCD      sp_ch_stat
                  |L1.17960|
                          DCD      ICA_EN
                  |L1.17964|
                          DCD      ica_plazma
                  |L1.17968|
                          DCD      bps_I
                  |L1.17972|
                          DCD      ica_my_current
                  |L1.17976|
                          DCD      ica_your_current
                  |L1.17980|
                          DCD      ica_u_necc
                  |L1.17984|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.17988|
;;;6566   		}
;;;6567   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004644  4291              CMP      r1,r2
004646  da11              BGE      |L1.18028|
004648  1a51              SUBS     r1,r2,r1
00464a  2905              CMP      r1,#5
00464c  db0e              BLT      |L1.18028|
00464e  2801              CMP      r0,#1
004650  d004              BEQ      |L1.18012|
004652  2802              CMP      r0,#2
004654  d10a              BNE      |L1.18028|
004656  f1b80f05          CMP      r8,#5
00465a  dd07              BLE      |L1.18028|
                  |L1.18012|
;;;6568   		{
;;;6569   		ica_plazma[1]--;
00465c  f1a30301          SUB      r3,r3,#1
004660  f8893001          STRB     r3,[r9,#1]
;;;6570   		ica_u_necc++;
004664  f10c0c01          ADD      r12,r12,#1
004668  f8aac000          STRH     r12,[r10,#0]
                  |L1.18028|
;;;6571   		}
;;;6572   	gran(&ica_u_necc,-100,100);
00466c  2264              MOVS     r2,#0x64
00466e  4251              RSBS     r1,r2,#0
004670  48f8              LDR      r0,|L1.19028|
004672  f7fffffe          BL       gran
                  |L1.18038|
;;;6573   	}
;;;6574   
;;;6575   
;;;6576   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
004676  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
00467a  2801              CMP      r0,#1
00467c  d169              BNE      |L1.18258|
00467e  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
004682  7969              LDRB     r1,[r5,#5]  ; vz1_stat
004684  4308              ORRS     r0,r0,r1
004686  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
004688  4308              ORRS     r0,r0,r1
00468a  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
00468c  4308              ORRS     r0,r0,r1
00468e  d160              BNE      |L1.18258|
004690  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
004692  2800              CMP      r0,#0
004694  d05d              BEQ      |L1.18258|
;;;6577   	{
;;;6578   	
;;;6579   //	ica_connect_cnt++;
;;;6580   
;;;6581   	if(ica_timer_cnt==8)
004696  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6582   		{
;;;6583   		char modbus_buff[20],i;
;;;6584   		short crc_temp;
;;;6585   	
;;;6586   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004698  4bef              LDR      r3,|L1.19032|
;;;6587   		modbus_buff[1] = 4;
;;;6588   		modbus_buff[2] = 0;
;;;6589   		modbus_buff[3] = 2;
;;;6590   		modbus_buff[4] = 0;	
;;;6591   		modbus_buff[5] = 1;
;;;6592   	
;;;6593   		crc_temp= CRC16_2(modbus_buff,6);
;;;6594   	
;;;6595   		modbus_buff[6]= (char)crc_temp;
;;;6596   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6597   	
;;;6598   		if(ICA_CH==0)
00469a  4ff0              LDR      r7,|L1.19036|
00469c  2808              CMP      r0,#8                 ;6581
00469e  d05b              BEQ      |L1.18264|
;;;6599   			{
;;;6600   			for (i=0;i<8;i++)
;;;6601   				{
;;;6602   				putchar_sc16is700(modbus_buff[i]);
;;;6603   				}
;;;6604   			}
;;;6605   		else if(ICA_CH==2)
;;;6606   			{
;;;6607   			uart_out1 (5,4,0,2,0,1,0);
;;;6608   			}
;;;6609   		}
;;;6610   	else
;;;6611   		{
;;;6612   		char modbus_buff[20],i;
;;;6613   		short crc_temp, tempSSSS;
;;;6614   
;;;6615   		tempSSSS=cntrl_stat_old;
0046a0  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6616   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
0046a4  48ee              LDR      r0,|L1.19040|
0046a6  f06f0214          MVN      r2,#0x14
0046aa  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
0046ae  ebc01100          RSB      r1,r0,r0,LSL #4
0046b2  eb020c81          ADD      r12,r2,r1,LSL #2
0046b6  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
0046ba  4594              CMP      r12,r2
0046bc  d00b              BEQ      |L1.18134|
0046be  f06f0513          MVN      r5,#0x13
0046c2  eb050581          ADD      r5,r5,r1,LSL #2
0046c6  4295              CMP      r5,r2
0046c8  d005              BEQ      |L1.18134|
0046ca  f06f0512          MVN      r5,#0x12
0046ce  eb050181          ADD      r1,r5,r1,LSL #2
0046d2  4291              CMP      r1,r2
0046d4  d101              BNE      |L1.18138|
                  |L1.18134|
0046d6  f4404680          ORR      r6,r0,#0x4000
                  |L1.18138|
;;;6617   
;;;6618   
;;;6619   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0046da  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
0046dc  f88d0010          STRB     r0,[sp,#0x10]
;;;6620   		modbus_buff[1] = 6;
0046e0  f04f0006          MOV      r0,#6
0046e4  f88d0011          STRB     r0,[sp,#0x11]
;;;6621   		modbus_buff[2] = 0;
0046e8  f88d4012          STRB     r4,[sp,#0x12]
;;;6622   		modbus_buff[3] = 100;
0046ec  f04f0064          MOV      r0,#0x64
0046f0  f88d0013          STRB     r0,[sp,#0x13]
;;;6623   		modbus_buff[4] = (char)(tempSSSS/256);	
0046f4  ea4f70e6          ASR      r0,r6,#31
0046f8  eb066010          ADD      r0,r6,r0,LSR #24
0046fc  ea4f2120          ASR      r1,r0,#8
004700  f88d1014          STRB     r1,[sp,#0x14]
;;;6624   		modbus_buff[5] = (char)(tempSSSS%256);
004704  4630              MOV      r0,r6
004706  f88d0015          STRB     r0,[sp,#0x15]
;;;6625   	
;;;6626   		crc_temp= CRC16_2(modbus_buff,6);
00470a  f04f0106          MOV      r1,#6
00470e  a804              ADD      r0,sp,#0x10
004710  f7fffffe          BL       CRC16_2
;;;6627   	
;;;6628   		modbus_buff[6]= (char)crc_temp;
004714  f88d0016          STRB     r0,[sp,#0x16]
;;;6629   		modbus_buff[7]= (char)(crc_temp>>8);
004718  ea4f2020          ASR      r0,r0,#8
00471c  f88d0017          STRB     r0,[sp,#0x17]
;;;6630   	
;;;6631   		crc_temp= CRC16_2(modbus_buff,6);
004720  f04f0106          MOV      r1,#6
004724  a804              ADD      r0,sp,#0x10
004726  f7fffffe          BL       CRC16_2
;;;6632   	
;;;6633   		plazma_ica1=tempSSSS;
00472a  48ce              LDR      r0,|L1.19044|
00472c  8046              STRH     r6,[r0,#2]
;;;6634   		if(ICA_CH==0)
00472e  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
004732  b3f0              CBZ      r0,|L1.18354|
;;;6635   			{
;;;6636   			for (i=0;i<8;i++)
;;;6637   				{
;;;6638   				putchar_sc16is700(modbus_buff[i]);
;;;6639   				}
;;;6640   			}
;;;6641   		else if(ICA_CH==2)
004734  2802              CMP      r0,#2
004736  d10c              BNE      |L1.18258|
;;;6642   			{
;;;6643   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
004738  f89d0015          LDRB     r0,[sp,#0x15]
00473c  f89d1014          LDRB     r1,[sp,#0x14]
004740  e9cd0401          STRD     r0,r4,[sp,#4]
004744  9100              STR      r1,[sp,#0]
004746  2364              MOVS     r3,#0x64
004748  2200              MOVS     r2,#0
00474a  2106              MOVS     r1,#6
00474c  2005              MOVS     r0,#5
00474e  f7fffffe          BL       uart_out1
                  |L1.18258|
;;;6644   			}
;;;6645   		}
;;;6646   	}
;;;6647   }
004752  b009              ADD      sp,sp,#0x24
004754  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18264|
004758  8818              LDRH     r0,[r3,#0]            ;6586  ; ICA_MODBUS_ADDRESS
00475a  f88d0010          STRB     r0,[sp,#0x10]         ;6586
00475e  f04f0004          MOV      r0,#4                 ;6587
004762  f88d0011          STRB     r0,[sp,#0x11]         ;6587
004766  f88d4012          STRB     r4,[sp,#0x12]         ;6588
00476a  f04f0002          MOV      r0,#2                 ;6589
00476e  f88d0013          STRB     r0,[sp,#0x13]         ;6589
004772  f88d4014          STRB     r4,[sp,#0x14]         ;6590
004776  f04f0501          MOV      r5,#1                 ;6591
00477a  f88d5015          STRB     r5,[sp,#0x15]         ;6591
00477e  f04f0106          MOV      r1,#6                 ;6593
004782  a804              ADD      r0,sp,#0x10           ;6593
004784  f7fffffe          BL       CRC16_2
004788  f88d0016          STRB     r0,[sp,#0x16]         ;6595
00478c  ea4f2020          ASR      r0,r0,#8              ;6596
004790  f88d0017          STRB     r0,[sp,#0x17]         ;6596
004794  f9b70000          LDRSH    r0,[r7,#0]            ;6598  ; ICA_CH
004798  b160              CBZ      r0,|L1.18356|
00479a  2802              CMP      r0,#2                 ;6605
00479c  d1d9              BNE      |L1.18258|
00479e  e9cd4500          STRD     r4,r5,[sp,#0]         ;6607
0047a2  2302              MOVS     r3,#2                 ;6607
0047a4  2200              MOVS     r2,#0                 ;6607
0047a6  2104              MOVS     r1,#4                 ;6607
0047a8  2005              MOVS     r0,#5                 ;6607
0047aa  9402              STR      r4,[sp,#8]            ;6607
0047ac  f7fffffe          BL       uart_out1
0047b0  e7cf              B        |L1.18258|
                  |L1.18354|
0047b2  e00b              B        |L1.18380|
                  |L1.18356|
0047b4  f04f0400          MOV      r4,#0                 ;6600
0047b8  ad04              ADD      r5,sp,#0x10           ;6583
                  |L1.18362|
0047ba  5d28              LDRB     r0,[r5,r4]            ;6602
0047bc  f7fffffe          BL       putchar_sc16is700
0047c0  f1040401          ADD      r4,r4,#1              ;6600
0047c4  b2e4              UXTB     r4,r4                 ;6600
0047c6  2c08              CMP      r4,#8                 ;6600
0047c8  d3f7              BCC      |L1.18362|
0047ca  e7c2              B        |L1.18258|
                  |L1.18380|
0047cc  f04f0400          MOV      r4,#0                 ;6636
0047d0  ad04              ADD      r5,sp,#0x10           ;6612
                  |L1.18386|
0047d2  5d28              LDRB     r0,[r5,r4]            ;6638
0047d4  f7fffffe          BL       putchar_sc16is700
0047d8  f1040401          ADD      r4,r4,#1              ;6636
0047dc  b2e4              UXTB     r4,r4                 ;6636
0047de  2c08              CMP      r4,#8                 ;6636
0047e0  d3f7              BCC      |L1.18386|
0047e2  e7b6              B        |L1.18258|
;;;6648   
                          ENDP

                  ipsBlckHndl PROC
;;;6731   //-----------------------------------------------
;;;6732   void ipsBlckHndl(char in)
0047e4  b510              PUSH     {r4,lr}
;;;6733   {
;;;6734   
;;;6735   ipsBlckStat=0;
0047e6  4ba0              LDR      r3,|L1.19048|
0047e8  f04f0000          MOV      r0,#0
0047ec  8018              STRH     r0,[r3,#0]
;;;6736   if(ipsBlckSrc==1)
0047ee  489f              LDR      r0,|L1.19052|
0047f0  f04f0401          MOV      r4,#1
;;;6737   	{
;;;6738   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
0047f4  f44f62fa          MOV      r2,#0x7d0
0047f8  f9b01000          LDRSH    r1,[r0,#0]            ;6736  ; ipsBlckSrc
0047fc  489c              LDR      r0,|L1.19056|
0047fe  2901              CMP      r1,#1                 ;6736
004800  f9b00000          LDRSH    r0,[r0,#0]
004804  d006              BEQ      |L1.18452|
;;;6739   	}
;;;6740   else if(ipsBlckSrc==2)
004806  2902              CMP      r1,#2
004808  d10f              BNE      |L1.18474|
00480a  499a              LDR      r1,|L1.19060|
;;;6741   	{
;;;6742   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
00480c  f9b1101a          LDRSH    r1,[r1,#0x1a]
004810  b160              CBZ      r0,|L1.18476|
004812  e00d              B        |L1.18480|
                  |L1.18452|
004814  4997              LDR      r1,|L1.19060|
004816  f9b11016          LDRSH    r1,[r1,#0x16]         ;6738
00481a  b908              CBNZ     r0,|L1.18464|
00481c  4291              CMP      r1,r2                 ;6738
00481e  dc03              BGT      |L1.18472|
                  |L1.18464|
004820  2801              CMP      r0,#1                 ;6738
004822  d102              BNE      |L1.18474|
004824  4291              CMP      r1,r2                 ;6738
004826  da00              BGE      |L1.18474|
                  |L1.18472|
004828  801c              STRH     r4,[r3,#0]            ;6738
                  |L1.18474|
;;;6743   	}
;;;6744   }
00482a  bd10              POP      {r4,pc}
                  |L1.18476|
00482c  4291              CMP      r1,r2                 ;6742
00482e  dc03              BGT      |L1.18488|
                  |L1.18480|
004830  2801              CMP      r0,#1                 ;6742
004832  d1fa              BNE      |L1.18474|
004834  4291              CMP      r1,r2                 ;6742
004836  daf8              BGE      |L1.18474|
                  |L1.18488|
004838  801c              STRH     r4,[r3,#0]            ;6742
00483a  bd10              POP      {r4,pc}
;;;6745   
                          ENDP

                  bps_drv PROC
;;;6746   //-----------------------------------------------
;;;6747   void bps_drv(char in)
00483c  e92d41f0          PUSH     {r4-r8,lr}
;;;6748   {
004840  4606              MOV      r6,r0
;;;6749   char temp;
;;;6750   
;;;6751   if (bps[in]._device!=dSRC) return;
004842  eb0600c6          ADD      r0,r6,r6,LSL #3
004846  498c              LDR      r1,|L1.19064|
004848  eb001006          ADD      r0,r0,r6,LSL #4
00484c  f8112020          LDRB     r2,[r1,r0,LSL #2]
004850  2a03              CMP      r2,#3
004852  d17d              BNE      |L1.18768|
;;;6752   temp=bps[in]._flags_tm;
004854  eb010480          ADD      r4,r1,r0,LSL #2
004858  f8945042          LDRB     r5,[r4,#0x42]
;;;6753   if(temp&(1<<AV_T))
00485c  07a8              LSLS     r0,r5,#30
00485e  d517              BPL      |L1.18576|
;;;6754   	{
;;;6755   	if(bps[in]._temp_av_cnt<1200) 
004860  f9b41046          LDRSH    r1,[r4,#0x46]
004864  f44f6296          MOV      r2,#0x4b0
004868  4291              CMP      r1,r2
00486a  da22              BGE      |L1.18610|
;;;6756   		{
;;;6757   		bps[in]._temp_av_cnt++;
00486c  f1010101          ADD      r1,r1,#1
004870  b208              SXTH     r0,r1
004872  f8a40046          STRH     r0,[r4,#0x46]
;;;6758   		if(bps[in]._temp_av_cnt>=1200)
004876  4290              CMP      r0,r2
004878  db1b              BLT      |L1.18610|
;;;6759   			{
;;;6760   			bps[in]._temp_av_cnt=1200;
00487a  f8a42046          STRH     r2,[r4,#0x46]
;;;6761   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
00487e  7860              LDRB     r0,[r4,#1]
004880  07c0              LSLS     r0,r0,#31
004882  d116              BNE      |L1.18610|
004884  2201              MOVS     r2,#1
004886  2100              MOVS     r1,#0
004888  4630              MOV      r0,r6
00488a  f7fffffe          BL       avar_bps_hndl
00488e  e010              B        |L1.18610|
                  |L1.18576|
;;;6762   			}
;;;6763   		}
;;;6764   	}
;;;6765   
;;;6766   else if(!(temp&(1<<AV_T)))
;;;6767   	{
;;;6768   	if(bps[in]._temp_av_cnt) 
004890  f9b40046          LDRSH    r0,[r4,#0x46]
004894  b168              CBZ      r0,|L1.18610|
;;;6769   		{
;;;6770   		bps[in]._temp_av_cnt--;
004896  f1a00001          SUB      r0,r0,#1
00489a  b200              SXTH     r0,r0
00489c  f8a40046          STRH     r0,[r4,#0x46]
;;;6771   		if(!bps[in]._temp_av_cnt)
0048a0  b938              CBNZ     r0,|L1.18610|
;;;6772   			{
;;;6773   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
0048a2  7860              LDRB     r0,[r4,#1]
0048a4  07c0              LSLS     r0,r0,#31
0048a6  d004              BEQ      |L1.18610|
0048a8  2200              MOVS     r2,#0
0048aa  4611              MOV      r1,r2
0048ac  4630              MOV      r0,r6
0048ae  f7fffffe          BL       avar_bps_hndl
                  |L1.18610|
;;;6774   			}
;;;6775   		} 	
;;;6776   
;;;6777   	}
;;;6778   
;;;6779   if((temp&(1<<AVUMAX)))
0048b2  0728              LSLS     r0,r5,#28
;;;6780   	{
;;;6781   	if(bps[in]._umax_av_cnt<10) 
;;;6782   		{
;;;6783   		bps[in]._umax_av_cnt++;
;;;6784   		if(bps[in]._umax_av_cnt>=10)
;;;6785   			{ 
;;;6786   			bps[in]._umax_av_cnt=10;
0048b4  f04f080a          MOV      r8,#0xa
0048b8  f04f0700          MOV      r7,#0                 ;6761
0048bc  d518              BPL      |L1.18672|
0048be  f9b41048          LDRSH    r1,[r4,#0x48]         ;6781
0048c2  290a              CMP      r1,#0xa               ;6781
0048c4  da29              BGE      |L1.18714|
0048c6  f1010101          ADD      r1,r1,#1              ;6783
0048ca  b208              SXTH     r0,r1                 ;6783
0048cc  f8a40048          STRH     r0,[r4,#0x48]         ;6783
0048d0  280a              CMP      r0,#0xa               ;6784
0048d2  db22              BLT      |L1.18714|
0048d4  f8a48048          STRH     r8,[r4,#0x48]
;;;6787   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
0048d8  7860              LDRB     r0,[r4,#1]
0048da  0780              LSLS     r0,r0,#30
0048dc  d404              BMI      |L1.18664|
0048de  2201              MOVS     r2,#1
0048e0  4611              MOV      r1,r2
0048e2  4630              MOV      r0,r6
0048e4  f7fffffe          BL       avar_bps_hndl
                  |L1.18664|
;;;6788   			apv_start(in);
0048e8  4630              MOV      r0,r6
0048ea  f7fffffe          BL       apv_start
0048ee  e014              B        |L1.18714|
                  |L1.18672|
;;;6789   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6790   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6791   				{
;;;6792   				apv_cnt[in,0]=APV_INIT;
;;;6793   				apv_cnt[in,1]=APV_INIT;
;;;6794   				apv_cnt[in,2]=APV_INIT;
;;;6795   				apv_flags[in]=afOFF;
;;;6796   				}				*/
;;;6797   						
;;;6798   			}
;;;6799   		} 
;;;6800   	}		
;;;6801   else if(!(temp&(1<<AVUMAX)))
;;;6802   	{
;;;6803   	if(bps[in]._umax_av_cnt>0) 
0048f0  f9b41048          LDRSH    r1,[r4,#0x48]
0048f4  2900              CMP      r1,#0
0048f6  dd0d              BLE      |L1.18708|
;;;6804   		{
;;;6805   		bps[in]._umax_av_cnt--;
0048f8  f1a10101          SUB      r1,r1,#1
0048fc  b208              SXTH     r0,r1
0048fe  f8a40048          STRH     r0,[r4,#0x48]
;;;6806   		if(bps[in]._umax_av_cnt==0)
004902  b950              CBNZ     r0,|L1.18714|
;;;6807   			{
;;;6808   			bps[in]._umax_av_cnt=0;
;;;6809   			avar_bps_hndl(in,1,0);
004904  f04f0200          MOV      r2,#0
004908  f04f0101          MOV      r1,#1
00490c  4630              MOV      r0,r6
00490e  f7fffffe          BL       avar_bps_hndl
004912  e002              B        |L1.18714|
                  |L1.18708|
;;;6810   			//apv_stop(in);
;;;6811   	 //		apv_cnt[in,0]=0;
;;;6812   	//		apv_cnt[in,1]=0;
;;;6813   	 //		apv_cnt[in,2]=0;			
;;;6814   			}
;;;6815   		}
;;;6816   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004914  da01              BGE      |L1.18714|
004916  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.18714|
;;;6817   	}
;;;6818   
;;;6819   if(temp&(1<<AVUMIN))
00491a  06e8              LSLS     r0,r5,#27
00491c  d519              BPL      |L1.18770|
;;;6820   	{
;;;6821   	if(bps[in]._umin_av_cnt<10) 
00491e  f9b4004a          LDRSH    r0,[r4,#0x4a]
004922  280a              CMP      r0,#0xa
004924  da23              BGE      |L1.18798|
;;;6822   		{
;;;6823   		bps[in]._umin_av_cnt++;
004926  f1000001          ADD      r0,r0,#1
00492a  b200              SXTH     r0,r0
00492c  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6824   		if(bps[in]._umin_av_cnt>=10)
004930  280a              CMP      r0,#0xa
004932  db1c              BLT      |L1.18798|
;;;6825   			{ 
;;;6826   			bps[in]._umin_av_cnt=10;
004934  f8a4804a          STRH     r8,[r4,#0x4a]
;;;6827   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004938  7860              LDRB     r0,[r4,#1]
00493a  0740              LSLS     r0,r0,#29
00493c  d404              BMI      |L1.18760|
00493e  2201              MOVS     r2,#1
004940  2102              MOVS     r1,#2
004942  4630              MOV      r0,r6
004944  f7fffffe          BL       avar_bps_hndl
                  |L1.18760|
;;;6828   			apv_start(in);
004948  4630              MOV      r0,r6
00494a  f7fffffe          BL       apv_start
00494e  e00e              B        |L1.18798|
                  |L1.18768|
004950  e0b3              B        |L1.19130|
                  |L1.18770|
;;;6829   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6830   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6831   				{
;;;6832   				apv_cnt[in,0]=APV_INIT;
;;;6833   				apv_cnt[in,1]=APV_INIT;
;;;6834   				apv_cnt[in,2]=APV_INIT;
;;;6835   				apv_flags[in]=afOFF;
;;;6836   				}*/				
;;;6837   			}
;;;6838   		} 
;;;6839   	}	
;;;6840   	
;;;6841   else if(!(temp&(1<<AVUMIN)))
;;;6842   	{
;;;6843   	if(bps[in]._umin_av_cnt) 
004952  f9b4004a          LDRSH    r0,[r4,#0x4a]
004956  b150              CBZ      r0,|L1.18798|
;;;6844   		{
;;;6845   		bps[in]._umin_av_cnt--;
004958  f1a00001          SUB      r0,r0,#1
00495c  b200              SXTH     r0,r0
00495e  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6846   		if(bps[in]._umin_av_cnt==0)
004962  b920              CBNZ     r0,|L1.18798|
;;;6847   			{
;;;6848   			bps[in]._umin_av_cnt=0;
;;;6849   			avar_bps_hndl(in,2,0);
004964  2200              MOVS     r2,#0
004966  2102              MOVS     r1,#2
004968  4630              MOV      r0,r6
00496a  f7fffffe          BL       avar_bps_hndl
                  |L1.18798|
;;;6850   			//apv_stop(in);
;;;6851   		//	apv_cnt[in,0]=0;
;;;6852   		//	apv_cnt[in,1]=0;
;;;6853   		//	apv_cnt[in,2]=0;
;;;6854   			}
;;;6855   		}
;;;6856   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6857   	}
;;;6858   
;;;6859   if((bps[in]._Uii<(UB20-DU))&&(bps[in]._state==bsWRK))
00496e  4943              LDR      r1,|L1.19068|
004970  69e0              LDR      r0,[r4,#0x1c]
004972  f9b12000          LDRSH    r2,[r1,#0]  ; UB20
004976  4942              LDR      r1,|L1.19072|
004978  f9b11000          LDRSH    r1,[r1,#0]  ; DU
00497c  1a51              SUBS     r1,r2,r1
00497e  4288              CMP      r0,r1
004980  da02              BGE      |L1.18824|
004982  78a2              LDRB     r2,[r4,#2]
004984  2a01              CMP      r2,#1
004986  d00b              BEQ      |L1.18848|
                  |L1.18824|
;;;6860   	{
;;;6861   	if(bps[in]._umin_av_cnt_uku<300) 
;;;6862   		{
;;;6863   		bps[in]._umin_av_cnt_uku++;
;;;6864   		if(bps[in]._umin_av_cnt_uku>=300)
;;;6865   			{ 
;;;6866   			bps[in]._umin_av_cnt_uku=300;
;;;6867   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
;;;6868   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6869   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6870   				{
;;;6871   				apv_cnt[in,0]=APV_INIT;
;;;6872   				apv_cnt[in,1]=APV_INIT;
;;;6873   				apv_cnt[in,2]=APV_INIT;
;;;6874   				apv_flags[in]=afOFF;
;;;6875   				}*/				
;;;6876   			}
;;;6877   		} 
;;;6878   	}	
;;;6879   	
;;;6880   else if(bps[in]._Uii>=(UB20-DU))
004988  4288              CMP      r0,r1
00498a  db26              BLT      |L1.18906|
;;;6881   	{
;;;6882   	if(bps[in]._umin_av_cnt_uku) 
00498c  f9b4104c          LDRSH    r1,[r4,#0x4c]
004990  b319              CBZ      r1,|L1.18906|
;;;6883   		{
;;;6884   		bps[in]._umin_av_cnt_uku--;
004992  f1a10101          SUB      r1,r1,#1
004996  b208              SXTH     r0,r1
004998  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6885   		if(bps[in]._umin_av_cnt_uku==0)
00499c  b1c0              CBZ      r0,|L1.18896|
00499e  e01c              B        |L1.18906|
                  |L1.18848|
0049a0  f9b4104c          LDRSH    r1,[r4,#0x4c]         ;6861
0049a4  f44f7296          MOV      r2,#0x12c             ;6861
0049a8  4291              CMP      r1,r2                 ;6861
0049aa  da16              BGE      |L1.18906|
0049ac  f1010101          ADD      r1,r1,#1              ;6863
0049b0  b208              SXTH     r0,r1                 ;6863
0049b2  f8a4004c          STRH     r0,[r4,#0x4c]         ;6863
0049b6  4290              CMP      r0,r2                 ;6864
0049b8  db0f              BLT      |L1.18906|
0049ba  f8a4204c          STRH     r2,[r4,#0x4c]         ;6866
0049be  7860              LDRB     r0,[r4,#1]            ;6867
0049c0  0740              LSLS     r0,r0,#29             ;6867
0049c2  d40a              BMI      |L1.18906|
0049c4  2201              MOVS     r2,#1                 ;6867
0049c6  2102              MOVS     r1,#2                 ;6867
0049c8  4630              MOV      r0,r6                 ;6867
0049ca  f7fffffe          BL       avar_bps_hndl
0049ce  e004              B        |L1.18906|
                  |L1.18896|
;;;6886   			{
;;;6887   			bps[in]._umin_av_cnt_uku=0;
;;;6888   			avar_bps_hndl(in,2,0);
0049d0  2200              MOVS     r2,#0
0049d2  2102              MOVS     r1,#2
0049d4  4630              MOV      r0,r6
0049d6  f7fffffe          BL       avar_bps_hndl
                  |L1.18906|
;;;6889   		//	apv_cnt[in,0]=0;
;;;6890   		//	apv_cnt[in,1]=0;
;;;6891   		//	apv_cnt[in,2]=0;
;;;6892   			}
;;;6893   		}
;;;6894   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;6895   	}
;;;6896   
;;;6897   //bps[in]._state=bsOFF;
;;;6898   
;;;6899   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
0049da  7860              LDRB     r0,[r4,#1]
0049dc  0700              LSLS     r0,r0,#28
0049de  d003              BEQ      |L1.18920|
0049e0  f04f0004          MOV      r0,#4
0049e4  70a0              STRB     r0,[r4,#2]
0049e6  e017              B        |L1.18968|
                  |L1.18920|
;;;6900   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
0049e8  4826              LDR      r0,|L1.19076|
0049ea  7800              LDRB     r0,[r0,#0]  ; net_av
0049ec  b130              CBZ      r0,|L1.18940|
0049ee  78e0              LDRB     r0,[r4,#3]
0049f0  2814              CMP      r0,#0x14
0049f2  d903              BLS      |L1.18940|
;;;6901   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
0049f4  f04f0005          MOV      r0,#5
0049f8  70a0              STRB     r0,[r4,#2]
0049fa  e00d              B        |L1.18968|
                  |L1.18940|
;;;6902   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
0049fc  f8940042          LDRB     r0,[r4,#0x42]
004a00  0680              LSLS     r0,r0,#26
004a02  d503              BPL      |L1.18956|
004a04  f04f0002          MOV      r0,#2
004a08  70a0              STRB     r0,[r4,#2]
004a0a  e005              B        |L1.18968|
                  |L1.18956|
;;;6903   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004a0c  78e0              LDRB     r0,[r4,#3]
004a0e  2814              CMP      r0,#0x14
004a10  d202              BCS      |L1.18968|
004a12  f04f0001          MOV      r0,#1
004a16  70a0              STRB     r0,[r4,#2]
                  |L1.18968|
;;;6904   
;;;6905   
;;;6906   
;;;6907   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6908   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6909   //else bps[0]._state=ssNOT;
;;;6910   
;;;6911   //bps[in]._is_ready=0;
;;;6912   //bps[in]._is_wrk=0;
;;;6913   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6914   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6915   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6916   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6917   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6918   //	{
;;;6919   //	bps[in]._flags_bp='B';// заблокирован
;;;6920   //	bps[in]._is_ready=1;
;;;6921   //	}
;;;6922   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6923   //     {
;;;6924   //     bps[in]._flags_bp='W';// работает
;;;6925   //     bps[in]._is_ready=1;
;;;6926   //     bps[in]._is_wrk=1;
;;;6927        
;;;6928   //     }
;;;6929   //else bps[in]._is_ready=1;     
;;;6930   
;;;6931   
;;;6932   
;;;6933   
;;;6934   
;;;6935   /*
;;;6936   bps[in]._flags_tu&=BIN8(11111110);
;;;6937   if(bps[in]._ist_blok_cnt)
;;;6938   	{
;;;6939   	bps[in]._ist_blok_cnt--;
;;;6940   	bps[in]._flags_tu|=BIN8(1);
;;;6941   	}
;;;6942   
;;;6943   	   */ 
;;;6944   
;;;6945   //Пересброс БПСа при потере связи
;;;6946   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004a18  78e0              LDRB     r0,[r4,#3]
004a1a  280a              CMP      r0,#0xa
004a1c  d306              BCC      |L1.18988|
004a1e  f894002c          LDRB     r0,[r4,#0x2c]
004a22  f0400080          ORR      r0,r0,#0x80
004a26  f884002c          STRB     r0,[r4,#0x2c]
004a2a  e005              B        |L1.19000|
                  |L1.18988|
;;;6947   else bps[in]._flags_tu&=BIN8(1111111);
004a2c  f894002c          LDRB     r0,[r4,#0x2c]
004a30  f000007f          AND      r0,r0,#0x7f
004a34  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19000|
;;;6948   
;;;6949   if(avar_bps_reset_cnt) 
004a38  480a              LDR      r0,|L1.19044|
004a3a  3880              SUBS     r0,r0,#0x80
004a3c  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004a40  b139              CBZ      r1,|L1.19026|
;;;6950   	{
;;;6951   	bps[in]._flags_tu|=BIN8(10);
004a42  f894102c          LDRB     r1,[r4,#0x2c]
004a46  f0410102          ORR      r1,r1,#2
004a4a  f884102c          STRB     r1,[r4,#0x2c]
;;;6952   	bps[in]._av=0;
004a4e  7067              STRB     r7,[r4,#1]
004a50  e02a              B        |L1.19112|
                  |L1.19026|
004a52  e019              B        |L1.19080|
                  |L1.19028|
                          DCD      ica_u_necc
                  |L1.19032|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19036|
                          DCD      ICA_CH
                  |L1.19040|
                          DCD      TBAT
                  |L1.19044|
                          DCD      ||area_number.25||+0x80
                  |L1.19048|
                          DCD      ipsBlckStat
                  |L1.19052|
                          DCD      ipsBlckSrc
                  |L1.19056|
                          DCD      ipsBlckLog
                  |L1.19060|
                          DCD      ||.bss||+0x40c
                  |L1.19064|
                          DCD      bps
                  |L1.19068|
                          DCD      UB20
                  |L1.19072|
                          DCD      ||DU||
                  |L1.19076|
                          DCD      net_av
                  |L1.19080|
;;;6953   	}
;;;6954   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004a88  f8941062          LDRB     r1,[r4,#0x62]
004a8c  b131              CBZ      r1,|L1.19100|
004a8e  f894102c          LDRB     r1,[r4,#0x2c]
004a92  f0410102          ORR      r1,r1,#2
004a96  f884102c          STRB     r1,[r4,#0x2c]
004a9a  e005              B        |L1.19112|
                  |L1.19100|
;;;6955   else bps[in]._flags_tu&=BIN8(11111101);
004a9c  f894102c          LDRB     r1,[r4,#0x2c]
004aa0  f00101fd          AND      r1,r1,#0xfd
004aa4  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19112|
;;;6956   	
;;;6957   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004aa8  f9b41054          LDRSH    r1,[r4,#0x54]
004aac  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004ab0  4408              ADD      r0,r0,r1
004ab2  6320              STR      r0,[r4,#0x30]
;;;6958   bps[in]._vol_i=1000;
004ab4  f44f707a          MOV      r0,#0x3e8
004ab8  6360              STR      r0,[r4,#0x34]
                  |L1.19130|
;;;6959   //bps[0]._vol_u=500;
;;;6960   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;6961   }
004aba  e8bd81f0          POP      {r4-r8,pc}
;;;6962   
                          ENDP

                  avt_hndl PROC
;;;6963   //-----------------------------------------------
;;;6964   void avt_hndl(void)
004abe  b570              PUSH     {r4-r6,lr}
;;;6965   {
;;;6966   char i;
;;;6967   for(i=0;i<12;i++)
004ac0  f04f0000          MOV      r0,#0
;;;6968   	{
;;;6969   	if(eb2_data_short[6]&(1<<i))
004ac4  49ff              LDR      r1,|L1.20164|
004ac6  f04f0401          MOV      r4,#1
004aca  4603              MOV      r3,r0                 ;6967
004acc  f9b1200c          LDRSH    r2,[r1,#0xc]
;;;6970   		{
;;;6971   		avt_stat[i]=avtON;
004ad0  4dfd              LDR      r5,|L1.20168|
                  |L1.19154|
004ad2  fa04f100          LSL      r1,r4,r0              ;6969
004ad6  420a              TST      r2,r1                 ;6969
004ad8  d001              BEQ      |L1.19166|
004ada  542c              STRB     r4,[r5,r0]
004adc  e000              B        |L1.19168|
                  |L1.19166|
;;;6972   		}
;;;6973   	else avt_stat[i]=avtOFF;
004ade  542b              STRB     r3,[r5,r0]
                  |L1.19168|
004ae0  f1000001          ADD      r0,r0,#1              ;6967
004ae4  b2c0              UXTB     r0,r0                 ;6967
004ae6  280c              CMP      r0,#0xc               ;6967
004ae8  d3f3              BCC      |L1.19154|
;;;6974   	}
;;;6975   
;;;6976   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004aea  4ef8              LDR      r6,|L1.20172|
004aec  7828              LDRB     r0,[r5,#0]  ; avt_stat
004aee  4cf8              LDR      r4,|L1.20176|
004af0  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004af2  4281              CMP      r1,r0
004af4  d00b              BEQ      |L1.19214|
004af6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004afa  2901              CMP      r1,#1
004afc  db07              BLT      |L1.19214|
;;;6977   	{
;;;6978   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004afe  2801              CMP      r0,#1
004b00  d07e              BEQ      |L1.19456|
;;;6979   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004b02  2300              MOVS     r3,#0
004b04  2201              MOVS     r2,#1
004b06  210b              MOVS     r1,#0xb
004b08  a0f2              ADR      r0,|L1.20180|
004b0a  f7fffffe          BL       snmp_trap_send
                  |L1.19214|
;;;6980   	}
;;;6981   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004b0e  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004b10  7868              LDRB     r0,[r5,#1]  ; avt_stat
004b12  4281              CMP      r1,r0
004b14  d00b              BEQ      |L1.19246|
004b16  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b1a  2902              CMP      r1,#2
004b1c  db07              BLT      |L1.19246|
;;;6982   	{
;;;6983   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004b1e  2801              CMP      r0,#1
004b20  d06f              BEQ      |L1.19458|
;;;6984   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004b22  2300              MOVS     r3,#0
004b24  2202              MOVS     r2,#2
004b26  210b              MOVS     r1,#0xb
004b28  a0ef              ADR      r0,|L1.20200|
004b2a  f7fffffe          BL       snmp_trap_send
                  |L1.19246|
;;;6985   	}
;;;6986   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004b2e  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004b30  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004b32  4281              CMP      r1,r0
004b34  d00b              BEQ      |L1.19278|
004b36  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b3a  2903              CMP      r1,#3
004b3c  db07              BLT      |L1.19278|
;;;6987   	{
;;;6988   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004b3e  2801              CMP      r0,#1
004b40  d072              BEQ      |L1.19496|
;;;6989   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004b42  2300              MOVS     r3,#0
004b44  2203              MOVS     r2,#3
004b46  210b              MOVS     r1,#0xb
004b48  a0ec              ADR      r0,|L1.20220|
004b4a  f7fffffe          BL       snmp_trap_send
                  |L1.19278|
;;;6990   	}
;;;6991   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004b4e  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004b50  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004b52  4281              CMP      r1,r0
004b54  d00b              BEQ      |L1.19310|
004b56  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b5a  2904              CMP      r1,#4
004b5c  db07              BLT      |L1.19310|
;;;6992   	{
;;;6993   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004b5e  2801              CMP      r0,#1
004b60  d079              BEQ      |L1.19542|
;;;6994   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004b62  2300              MOVS     r3,#0
004b64  2204              MOVS     r2,#4
004b66  210b              MOVS     r1,#0xb
004b68  a0e9              ADR      r0,|L1.20240|
004b6a  f7fffffe          BL       snmp_trap_send
                  |L1.19310|
;;;6995   	}
;;;6996   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004b6e  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004b70  7928              LDRB     r0,[r5,#4]  ; avt_stat
004b72  4281              CMP      r1,r0
004b74  d00b              BEQ      |L1.19342|
004b76  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b7a  2905              CMP      r1,#5
004b7c  db07              BLT      |L1.19342|
;;;6997   	{
;;;6998   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004b7e  2801              CMP      r0,#1
004b80  d071              BEQ      |L1.19558|
;;;6999   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004b82  2300              MOVS     r3,#0
004b84  2205              MOVS     r2,#5
004b86  210b              MOVS     r1,#0xb
004b88  a0e6              ADR      r0,|L1.20260|
004b8a  f7fffffe          BL       snmp_trap_send
                  |L1.19342|
;;;7000   	}
;;;7001   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004b8e  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004b90  7968              LDRB     r0,[r5,#5]  ; avt_stat
004b92  4281              CMP      r1,r0
004b94  d00b              BEQ      |L1.19374|
004b96  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004b9a  2906              CMP      r1,#6
004b9c  db07              BLT      |L1.19374|
;;;7002   	{
;;;7003   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004b9e  2801              CMP      r0,#1
004ba0  d068              BEQ      |L1.19572|
;;;7004   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004ba2  2300              MOVS     r3,#0
004ba4  2206              MOVS     r2,#6
004ba6  210b              MOVS     r1,#0xb
004ba8  a0e3              ADR      r0,|L1.20280|
004baa  f7fffffe          BL       snmp_trap_send
                  |L1.19374|
;;;7005   	}
;;;7006   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004bae  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004bb0  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004bb2  4281              CMP      r1,r0
004bb4  d00b              BEQ      |L1.19406|
004bb6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004bba  2907              CMP      r1,#7
004bbc  db07              BLT      |L1.19406|
;;;7007   	{
;;;7008   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004bbe  2801              CMP      r0,#1
004bc0  d05f              BEQ      |L1.19586|
;;;7009   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004bc2  2300              MOVS     r3,#0
004bc4  2207              MOVS     r2,#7
004bc6  210b              MOVS     r1,#0xb
004bc8  a0e0              ADR      r0,|L1.20300|
004bca  f7fffffe          BL       snmp_trap_send
                  |L1.19406|
;;;7010   	}
;;;7011   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004bce  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004bd0  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004bd2  4281              CMP      r1,r0
004bd4  d00b              BEQ      |L1.19438|
004bd6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004bda  2908              CMP      r1,#8
004bdc  db07              BLT      |L1.19438|
;;;7012   	{
;;;7013   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004bde  2801              CMP      r0,#1
004be0  d056              BEQ      |L1.19600|
;;;7014   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004be2  2300              MOVS     r3,#0
004be4  2208              MOVS     r2,#8
004be6  210b              MOVS     r1,#0xb
004be8  a0dd              ADR      r0,|L1.20320|
004bea  f7fffffe          BL       snmp_trap_send
                  |L1.19438|
;;;7015   	}
;;;7016   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004bee  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004bf0  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004bf2  4281              CMP      r1,r0
004bf4  d00e              BEQ      |L1.19476|
004bf6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004bfa  2909              CMP      r1,#9
004bfc  db0a              BLT      |L1.19476|
;;;7017   	{
;;;7018   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004bfe  e001              B        |L1.19460|
                  |L1.19456|
004c00  e013              B        |L1.19498|
                  |L1.19458|
004c02  e019              B        |L1.19512|
                  |L1.19460|
004c04  2801              CMP      r0,#1
004c06  d04a              BEQ      |L1.19614|
;;;7019   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004c08  2300              MOVS     r3,#0
004c0a  2209              MOVS     r2,#9
004c0c  210b              MOVS     r1,#0xb
004c0e  a0d9              ADR      r0,|L1.20340|
004c10  f7fffffe          BL       snmp_trap_send
                  |L1.19476|
;;;7020   	}
;;;7021   
;;;7022   for(i=0;i<12;i++)
004c14  f04f0000          MOV      r0,#0
                  |L1.19480|
;;;7023   	{
;;;7024   	avt_stat_old[i]=avt_stat[i];
004c18  5c29              LDRB     r1,[r5,r0]
004c1a  5431              STRB     r1,[r6,r0]
004c1c  f1000001          ADD      r0,r0,#1              ;7022
004c20  b2c0              UXTB     r0,r0                 ;7022
004c22  280c              CMP      r0,#0xc               ;7022
004c24  d3f8              BCC      |L1.19480|
                  |L1.19494|
;;;7025   	}
;;;7026   }
004c26  bd70              POP      {r4-r6,pc}
                  |L1.19496|
004c28  e00e              B        |L1.19528|
                  |L1.19498|
004c2a  2301              MOVS     r3,#1                 ;6978
004c2c  461a              MOV      r2,r3                 ;6978
004c2e  210b              MOVS     r1,#0xb               ;6978
004c30  a0d5              ADR      r0,|L1.20360|
004c32  f7fffffe          BL       snmp_trap_send
004c36  e76a              B        |L1.19214|
                  |L1.19512|
004c38  2301              MOVS     r3,#1                 ;6983
004c3a  2202              MOVS     r2,#2                 ;6983
004c3c  210b              MOVS     r1,#0xb               ;6983
004c3e  a0d7              ADR      r0,|L1.20380|
004c40  f7fffffe          BL       snmp_trap_send
004c44  e773              B        |L1.19246|
004c46  e006              B        |L1.19542|
                  |L1.19528|
004c48  2301              MOVS     r3,#1                 ;6988
004c4a  2203              MOVS     r2,#3                 ;6988
004c4c  210b              MOVS     r1,#0xb               ;6988
004c4e  a0d8              ADR      r0,|L1.20400|
004c50  f7fffffe          BL       snmp_trap_send
004c54  e77b              B        |L1.19278|
                  |L1.19542|
004c56  2301              MOVS     r3,#1                 ;6993
004c58  2204              MOVS     r2,#4                 ;6993
004c5a  210b              MOVS     r1,#0xb               ;6993
004c5c  a0d9              ADR      r0,|L1.20420|
004c5e  f7fffffe          BL       snmp_trap_send
004c62  e784              B        |L1.19310|
004c64  e7ff              B        |L1.19558|
                  |L1.19558|
004c66  2301              MOVS     r3,#1                 ;6998
004c68  2205              MOVS     r2,#5                 ;6998
004c6a  210b              MOVS     r1,#0xb               ;6998
004c6c  a0da              ADR      r0,|L1.20440|
004c6e  f7fffffe          BL       snmp_trap_send
004c72  e78c              B        |L1.19342|
                  |L1.19572|
004c74  2301              MOVS     r3,#1                 ;7003
004c76  2206              MOVS     r2,#6                 ;7003
004c78  210b              MOVS     r1,#0xb               ;7003
004c7a  a0dc              ADR      r0,|L1.20460|
004c7c  f7fffffe          BL       snmp_trap_send
004c80  e795              B        |L1.19374|
                  |L1.19586|
004c82  2301              MOVS     r3,#1                 ;7008
004c84  2207              MOVS     r2,#7                 ;7008
004c86  210b              MOVS     r1,#0xb               ;7008
004c88  a0dd              ADR      r0,|L1.20480|
004c8a  f7fffffe          BL       snmp_trap_send
004c8e  e79e              B        |L1.19406|
                  |L1.19600|
004c90  2301              MOVS     r3,#1                 ;7013
004c92  2208              MOVS     r2,#8                 ;7013
004c94  210b              MOVS     r1,#0xb               ;7013
004c96  a0df              ADR      r0,|L1.20500|
004c98  f7fffffe          BL       snmp_trap_send
004c9c  e7a7              B        |L1.19438|
                  |L1.19614|
004c9e  2301              MOVS     r3,#1                 ;7018
004ca0  2209              MOVS     r2,#9                 ;7018
004ca2  210b              MOVS     r1,#0xb               ;7018
004ca4  a0e0              ADR      r0,|L1.20520|
004ca6  f7fffffe          BL       snmp_trap_send
004caa  e7b3              B        |L1.19476|
;;;7027   
                          ENDP

                  bat_hndl PROC
;;;7028   //-----------------------------------------------
;;;7029   void bat_hndl(void)
004cac  b570              PUSH     {r4-r6,lr}
;;;7030   {
;;;7031   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7032   	{
;;;7033   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7034   		{
;;;7035   		char i;
;;;7036   		for(i=0;i<2;i++)
;;;7037   			{
;;;7038   			if(mess_data[1]&(1<<i))
;;;7039   				{
;;;7040   				bat[i]._cnt_to_block=0;
;;;7041        			bat[i]._rel_stat=0;
;;;7042        			}
;;;7043   			}
;;;7044   		}
;;;7045   	}
;;;7046   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7047   	{		
;;;7048   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7049   		{
;;;7050   		char i;
;;;7051   		for(i=0;i<2;i++)
;;;7052   			{
;;;7053   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7054   				{
;;;7055   				bat[i]._cnt_to_block=20;
;;;7056   				bat[i]._rel_stat=1;
;;;7057        			}
;;;7058   			}
;;;7059   		
;;;7060   		}		
;;;7061   	}*/
;;;7062   
;;;7063   if(mess_find_unvol(MESS2BAT_HNDL))
004cae  20c8              MOVS     r0,#0xc8
004cb0  f7fffffe          BL       mess_find_unvol
;;;7064   	{ 
;;;7065   	char i;
;;;7066   	
;;;7067   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7068   		{
;;;7069   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7070   			{
;;;7071   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004cb4  49e1              LDR      r1,|L1.20540|
004cb6  2200              MOVS     r2,#0                 ;7069
004cb8  b3a8              CBZ      r0,|L1.19750|
004cba  4be1              LDR      r3,|L1.20544|
;;;7072   			}
;;;7073   		}
;;;7074   
;;;7075   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7076   		{
;;;7077   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7078   			{
;;;7079   			if(mess_data[1]&(1<<i))
004cbc  2401              MOVS     r4,#1
004cbe  6818              LDR      r0,[r3,#0]            ;7067  ; mess_data
004cc0  28c9              CMP      r0,#0xc9              ;7067
004cc2  d01c              BEQ      |L1.19710|
004cc4  28ca              CMP      r0,#0xca              ;7075
004cc6  d02f              BEQ      |L1.19752|
;;;7080   				{
;;;7081   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7082   				}
;;;7083   			else bat[i]._cnt_to_block=0;
;;;7084   			}
;;;7085   		}
;;;7086   	else 
;;;7087   	 	{
;;;7088   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004cc8  4610              MOV      r0,r2
                  |L1.19658|
;;;7089   			{
;;;7090   			bat[i]._cnt_to_block=0;
004cca  eb000340          ADD      r3,r0,r0,LSL #1
004cce  eb031300          ADD      r3,r3,r0,LSL #4
004cd2  f8012023          STRB     r2,[r1,r3,LSL #2]
004cd6  f1000001          ADD      r0,r0,#1              ;7088
004cda  b2c0              UXTB     r0,r0                 ;7088
004cdc  2802              CMP      r0,#2                 ;7088
004cde  d3f4              BCC      |L1.19658|
                  |L1.19680|
;;;7091   			}
;;;7092   
;;;7093   		}
;;;7094   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004ce0  f04f0000          MOV      r0,#0
                  |L1.19684|
;;;7095   		{
;;;7096   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004ce4  eb000340          ADD      r3,r0,r0,LSL #1
004ce8  eb031300          ADD      r3,r3,r0,LSL #4
004cec  f8115023          LDRB     r5,[r1,r3,LSL #2]
004cf0  2d14              CMP      r5,#0x14
004cf2  d939              BLS      |L1.19816|
004cf4  eb010383          ADD      r3,r1,r3,LSL #2
004cf8  f883403c          STRB     r4,[r3,#0x3c]
004cfc  e038              B        |L1.19824|
                  |L1.19710|
004cfe  f04f0000          MOV      r0,#0                 ;7069
                  |L1.19714|
004d02  eb000340          ADD      r3,r0,r0,LSL #1       ;7071
004d06  eb031500          ADD      r5,r3,r0,LSL #4       ;7071
004d0a  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7071
004d0e  2b32              CMP      r3,#0x32              ;7071
004d10  d203              BCS      |L1.19738|
004d12  f1030301          ADD      r3,r3,#1              ;7071
004d16  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7071
                  |L1.19738|
004d1a  f1000001          ADD      r0,r0,#1              ;7069
004d1e  b2c0              UXTB     r0,r0                 ;7069
004d20  2802              CMP      r0,#2                 ;7069
004d22  d3ee              BCC      |L1.19714|
004d24  e7dc              B        |L1.19680|
                  |L1.19750|
004d26  e029              B        |L1.19836|
                  |L1.19752|
004d28  f04f0000          MOV      r0,#0                 ;7077
004d2c  685e              LDR      r6,[r3,#4]            ;7079
                  |L1.19758|
004d2e  fa04f300          LSL      r3,r4,r0              ;7079
004d32  421e              TST      r6,r3                 ;7079
004d34  d00c              BEQ      |L1.19792|
004d36  eb000340          ADD      r3,r0,r0,LSL #1       ;7081
004d3a  eb031500          ADD      r5,r3,r0,LSL #4       ;7081
004d3e  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7081
004d42  2b32              CMP      r3,#0x32              ;7081
004d44  d20a              BCS      |L1.19804|
004d46  f1030301          ADD      r3,r3,#1              ;7081
004d4a  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7081
004d4e  e005              B        |L1.19804|
                  |L1.19792|
004d50  eb000340          ADD      r3,r0,r0,LSL #1       ;7083
004d54  eb031300          ADD      r3,r3,r0,LSL #4       ;7083
004d58  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7083
                  |L1.19804|
004d5c  f1000001          ADD      r0,r0,#1              ;7077
004d60  b2c0              UXTB     r0,r0                 ;7077
004d62  2802              CMP      r0,#2                 ;7077
004d64  d3e3              BCC      |L1.19758|
004d66  e7bb              B        |L1.19680|
                  |L1.19816|
;;;7097   		else bat[i]._rel_stat=0;
004d68  eb010383          ADD      r3,r1,r3,LSL #2
004d6c  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.19824|
004d70  f1000001          ADD      r0,r0,#1              ;7094
004d74  b2c0              UXTB     r0,r0                 ;7094
004d76  2802              CMP      r0,#2                 ;7094
004d78  d3b4              BCC      |L1.19684|
;;;7098   		}
;;;7099   
;;;7100   	}
;;;7101   
;;;7102   else 
;;;7103   	{
;;;7104   	char i;
;;;7105   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7106   		{
;;;7107   		bat[i]._cnt_to_block=0;
;;;7108   		bat[i]._rel_stat=0;
;;;7109   		}
;;;7110   
;;;7111   	}
;;;7112   
;;;7113   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7114   	{
;;;7115   	if(PARAM_BAT_ON)
;;;7116   		{
;;;7117   		char i;
;;;7118   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7119   			{
;;;7120   			if(mess_data[1]&(1<<i))
;;;7121   				{
;;;7122   				bat[i]._cnt_to_block=0;
;;;7123   				bat[i]._rel_stat=0;
;;;7124   				}
;;;7125   			}
;;;7126   		}
;;;7127   	} */
;;;7128   }
004d7a  e754              B        |L1.19494|
                  |L1.19836|
004d7c  f04f0000          MOV      r0,#0                 ;7105
                  |L1.19840|
004d80  eb000340          ADD      r3,r0,r0,LSL #1       ;7107
004d84  eb031300          ADD      r3,r3,r0,LSL #4       ;7107
004d88  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7107
004d8c  eb010383          ADD      r3,r1,r3,LSL #2       ;7108
004d90  f883203c          STRB     r2,[r3,#0x3c]         ;7108
004d94  f1000001          ADD      r0,r0,#1              ;7105
004d98  b2c0              UXTB     r0,r0                 ;7105
004d9a  2802              CMP      r0,#2                 ;7105
004d9c  d3f0              BCC      |L1.19840|
004d9e  e742              B        |L1.19494|
;;;7129   
                          ENDP

                  bat_drv PROC
;;;7767   //-----------------------------------------------
;;;7768   void bat_drv(char in)
004da0  e92d4ffe          PUSH     {r1-r11,lr}
;;;7769   {
004da4  4605              MOV      r5,r0
;;;7770   unsigned short /*tempUS,*/tempUS_;
;;;7771   unsigned long tempUL,tempUL_;
;;;7772   unsigned short b_zar;
;;;7773   //static unsigned short time_cnt[2];
;;;7774   
;;;7775   
;;;7776   
;;;7777   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004da6  49a7              LDR      r1,|L1.20548|
004da8  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004dac  b118              CBZ      r0,|L1.19894|
004dae  f1a00001          SUB      r0,r0,#1
004db2  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.19894|
;;;7778   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004db6  4aa3              LDR      r2,|L1.20548|
004db8  1d12              ADDS     r2,r2,#4
004dba  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004dbe  b118              CBZ      r0,|L1.19912|
004dc0  f1a00001          SUB      r0,r0,#1
004dc4  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.19912|
;;;7779   
;;;7780   
;;;7781   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004dc8  eb050045          ADD      r0,r5,r5,LSL #1
004dcc  4b9b              LDR      r3,|L1.20540|
004dce  eb001005          ADD      r0,r0,r5,LSL #4
004dd2  eb030480          ADD      r4,r3,r0,LSL #2
004dd6  4b9c              LDR      r3,|L1.20552|
004dd8  9002              STR      r0,[sp,#8]
004dda  f9b40008          LDRSH    r0,[r4,#8]
004dde  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004de2  2364              MOVS     r3,#0x64
004de4  42b0              CMP      r0,r6
004de6  dd01              BLE      |L1.19948|
004de8  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.19948|
;;;7782   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004dec  2800              CMP      r0,#0
004dee  da01              BGE      |L1.19956|
004df0  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.19956|
;;;7783   
;;;7784   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7785        {
;;;7786        if(!cntrl_stat_blok_cnt_)
004df4  4893              LDR      r0,|L1.20548|
004df6  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7784
004dfa  38b0              SUBS     r0,r0,#0xb0
004dfc  2700              MOVS     r7,#0
004dfe  b14b              CBZ      r3,|L1.19988|
004e00  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7784
004e04  b133              CBZ      r3,|L1.19988|
004e06  f8b03076          LDRH     r3,[r0,#0x76]  ; cntrl_stat_blok_cnt_
004e0a  b1a3              CBZ      r3,|L1.20022|
;;;7787             {
;;;7788             cntrl_stat_blok_cnt_=600; 
;;;7789             cntrl_stat_blok_cnt_plus[in]=0;
;;;7790             cntrl_stat_blok_cnt_minus[in]=0;
;;;7791             }
;;;7792        else cntrl_stat_blok_cnt=3000;
004e0c  f64031b8          MOV      r1,#0xbb8
004e10  f8a01074          STRH     r1,[r0,#0x74]
                  |L1.19988|
;;;7793        }
;;;7794   cntrl_stat_blok_cnt=0;
004e14  f8a07074          STRH     r7,[r0,#0x74]
;;;7795   
;;;7796   if(++(bat[in]._time_cnt)>=10)
004e18  f894003e          LDRB     r0,[r4,#0x3e]
004e1c  1c40              ADDS     r0,r0,#1
004e1e  b2c0              UXTB     r0,r0
004e20  f884003e          STRB     r0,[r4,#0x3e]
004e24  280a              CMP      r0,#0xa
004e26  d301              BCC      |L1.20012|
;;;7797   	{
;;;7798   	bat[in]._time_cnt=0;
004e28  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.20012|
;;;7799   	//bat[in]._zar_cnt++;
;;;7800   	}
;;;7801   
;;;7802   if(main_10Hz_cnt==50)
004e2c  4e87              LDR      r6,|L1.20556|
004e2e  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
004e30  2832              CMP      r0,#0x32
004e32  d009              BEQ      |L1.20040|
004e34  e017              B        |L1.20070|
                  |L1.20022|
004e36  f44f7316          MOV      r3,#0x258             ;7788
004e3a  f8a03076          STRH     r3,[r0,#0x76]         ;7788
004e3e  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7789
004e42  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7790
004e46  e7e5              B        |L1.19988|
                  |L1.20040|
;;;7803   	{
;;;7804   	if(!bat[in]._rel_stat)
004e48  f894003c          LDRB     r0,[r4,#0x3c]
004e4c  b958              CBNZ     r0,|L1.20070|
;;;7805   		{
;;;7806   		
;;;7807   		if(bat[in]._Ub<80) 
004e4e  f9b40002          LDRSH    r0,[r4,#2]
004e52  2850              CMP      r0,#0x50
004e54  da07              BGE      |L1.20070|
;;;7808   			{
;;;7809   			
;;;7810   			if(!(bat[in]._av&1))
004e56  f894003d          LDRB     r0,[r4,#0x3d]
004e5a  07c0              LSLS     r0,r0,#31
004e5c  d103              BNE      |L1.20070|
;;;7811   				{
;;;7812   				avar_bat_hndl(in,1);
004e5e  2101              MOVS     r1,#1
004e60  4628              MOV      r0,r5
004e62  f7fffffe          BL       avar_bat_hndl
                  |L1.20070|
;;;7813   				//if(in==0)plazma_bat++;
;;;7814   				}
;;;7815   			}				
;;;7816   
;;;7817   		}
;;;7818   	}
;;;7819   
;;;7820   if(main_10Hz_cnt>200)
004e66  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7821   	{
;;;7822   	if(abs(bat[in]._Ib)>IKB) 
004e6a  4e79              LDR      r6,|L1.20560|
004e6c  28c8              CMP      r0,#0xc8              ;7820
004e6e  dd0f              BLE      |L1.20112|
004e70  f9b40008          LDRSH    r0,[r4,#8]
004e74  f7fffffe          BL       abs
004e78  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004e7c  4288              CMP      r0,r1
004e7e  dd07              BLE      |L1.20112|
;;;7823   		{
;;;7824   		if((bat[in]._av&1))avar_bat_hndl(in,0);
004e80  f894003d          LDRB     r0,[r4,#0x3d]
004e84  07c0              LSLS     r0,r0,#31
004e86  d003              BEQ      |L1.20112|
004e88  2100              MOVS     r1,#0
004e8a  4628              MOV      r0,r5
004e8c  f7fffffe          BL       avar_bat_hndl
                  |L1.20112|
;;;7825   		}
;;;7826   	}
;;;7827   
;;;7828   #ifdef APSENERGIA
;;;7829   //if(bat[in]._Ib>(-IKB))
;;;7830   
;;;7831   
;;;7832   #endif
;;;7833   
;;;7834   if(bat[in]._Ib>(-IKB))
004e90  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004e94  f9b40008          LDRSH    r0,[r4,#8]
004e98  4249              RSBS     r1,r1,#0
004e9a  4288              CMP      r0,r1
004e9c  dd0e              BLE      |L1.20156|
;;;7835   	{
;;;7836   	if(bat[in]._cnt_wrk<10)
004e9e  7b60              LDRB     r0,[r4,#0xd]
004ea0  280a              CMP      r0,#0xa
004ea2  d20c              BCS      |L1.20158|
;;;7837   		{
;;;7838   		bat[in]._cnt_wrk++;
004ea4  f1000001          ADD      r0,r0,#1
004ea8  b2c0              UXTB     r0,r0
004eaa  7360              STRB     r0,[r4,#0xd]
;;;7839   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004eac  280a              CMP      r0,#0xa
004eae  d307              BCC      |L1.20160|
004eb0  7ba0              LDRB     r0,[r4,#0xe]
004eb2  2800              CMP      r0,#0
004eb4  d004              BEQ      |L1.20160|
;;;7840   			{
;;;7841   			bat[in]._wrk=0;
004eb6  73a7              STRB     r7,[r4,#0xe]
;;;7842   			//beep_init(0x7L,'O');
;;;7843   			//wrk_mem_hndl(0);
;;;7844   			wrk_mem_hndl(in);
004eb8  4628              MOV      r0,r5
004eba  e0cb              B        |L1.20564|
                  |L1.20156|
004ebc  e0d1              B        |L1.20578|
                  |L1.20158|
004ebe  e0cc              B        |L1.20570|
                  |L1.20160|
004ec0  e111              B        |L1.20710|
004ec2  0000              DCW      0x0000
                  |L1.20164|
                          DCD      eb2_data_short
                  |L1.20168|
                          DCD      avt_stat
                  |L1.20172|
                          DCD      avt_stat_old
                  |L1.20176|
                          DCD      NUMAVT
                  |L1.20180|
004ed4  4176746f          DCB      "Avtomat #1 is OFF",0
004ed8  6d617420
004edc  23312069
004ee0  73204f46
004ee4  4600    
004ee6  00                DCB      0
004ee7  00                DCB      0
                  |L1.20200|
004ee8  4176746f          DCB      "Avtomat #2 is OFF",0
004eec  6d617420
004ef0  23322069
004ef4  73204f46
004ef8  4600    
004efa  00                DCB      0
004efb  00                DCB      0
                  |L1.20220|
004efc  4176746f          DCB      "Avtomat #3 is OFF",0
004f00  6d617420
004f04  23332069
004f08  73204f46
004f0c  4600    
004f0e  00                DCB      0
004f0f  00                DCB      0
                  |L1.20240|
004f10  4176746f          DCB      "Avtomat #4 is OFF",0
004f14  6d617420
004f18  23342069
004f1c  73204f46
004f20  4600    
004f22  00                DCB      0
004f23  00                DCB      0
                  |L1.20260|
004f24  4176746f          DCB      "Avtomat #5 is OFF",0
004f28  6d617420
004f2c  23352069
004f30  73204f46
004f34  4600    
004f36  00                DCB      0
004f37  00                DCB      0
                  |L1.20280|
004f38  4176746f          DCB      "Avtomat #6 is OFF",0
004f3c  6d617420
004f40  23362069
004f44  73204f46
004f48  4600    
004f4a  00                DCB      0
004f4b  00                DCB      0
                  |L1.20300|
004f4c  4176746f          DCB      "Avtomat #7 is OFF",0
004f50  6d617420
004f54  23372069
004f58  73204f46
004f5c  4600    
004f5e  00                DCB      0
004f5f  00                DCB      0
                  |L1.20320|
004f60  4176746f          DCB      "Avtomat #8 is OFF",0
004f64  6d617420
004f68  23382069
004f6c  73204f46
004f70  4600    
004f72  00                DCB      0
004f73  00                DCB      0
                  |L1.20340|
004f74  4176746f          DCB      "Avtomat #9 is OFF",0
004f78  6d617420
004f7c  23392069
004f80  73204f46
004f84  4600    
004f86  00                DCB      0
004f87  00                DCB      0
                  |L1.20360|
004f88  4176746f          DCB      "Avtomat #1 is ON ",0
004f8c  6d617420
004f90  23312069
004f94  73204f4e
004f98  2000    
004f9a  00                DCB      0
004f9b  00                DCB      0
                  |L1.20380|
004f9c  4176746f          DCB      "Avtomat #2 is ON ",0
004fa0  6d617420
004fa4  23322069
004fa8  73204f4e
004fac  2000    
004fae  00                DCB      0
004faf  00                DCB      0
                  |L1.20400|
004fb0  4176746f          DCB      "Avtomat #3 is ON ",0
004fb4  6d617420
004fb8  23332069
004fbc  73204f4e
004fc0  2000    
004fc2  00                DCB      0
004fc3  00                DCB      0
                  |L1.20420|
004fc4  4176746f          DCB      "Avtomat #4 is ON ",0
004fc8  6d617420
004fcc  23342069
004fd0  73204f4e
004fd4  2000    
004fd6  00                DCB      0
004fd7  00                DCB      0
                  |L1.20440|
004fd8  4176746f          DCB      "Avtomat #5 is ON ",0
004fdc  6d617420
004fe0  23352069
004fe4  73204f4e
004fe8  2000    
004fea  00                DCB      0
004feb  00                DCB      0
                  |L1.20460|
004fec  4176746f          DCB      "Avtomat #6 is ON ",0
004ff0  6d617420
004ff4  23362069
004ff8  73204f4e
004ffc  2000    
004ffe  00                DCB      0
004fff  00                DCB      0
                  |L1.20480|
005000  4176746f          DCB      "Avtomat #7 is ON ",0
005004  6d617420
005008  23372069
00500c  73204f4e
005010  2000    
005012  00                DCB      0
005013  00                DCB      0
                  |L1.20500|
005014  4176746f          DCB      "Avtomat #8 is ON ",0
005018  6d617420
00501c  23382069
005020  73204f4e
005024  2000    
005026  00                DCB      0
005027  00                DCB      0
                  |L1.20520|
005028  4176746f          DCB      "Avtomat #9 is ON ",0
00502c  6d617420
005030  23392069
005034  73204f4e
005038  2000    
00503a  00                DCB      0
00503b  00                DCB      0
                  |L1.20540|
                          DCD      bat
                  |L1.20544|
                          DCD      mess_data
                  |L1.20548|
                          DCD      ||area_number.25||+0xb0
                  |L1.20552|
                          DCD      IZMAX
                  |L1.20556|
                          DCD      main_10Hz_cnt
                  |L1.20560|
                          DCD      IKB
                  |L1.20564|
005054  f7fffffe          BL       wrk_mem_hndl
005058  e069              B        |L1.20782|
                  |L1.20570|
;;;7845   			//plazma++;
;;;7846   			}
;;;7847   		}
;;;7848   	else bat[in]._cnt_wrk=10;	
00505a  f04f000a          MOV      r0,#0xa
00505e  7360              STRB     r0,[r4,#0xd]
005060  e065              B        |L1.20782|
                  |L1.20578|
;;;7849   	}	
;;;7850   
;;;7851   else if(bat[in]._Ib<(-IKB))
005062  da64              BGE      |L1.20782|
;;;7852   	{
;;;7853   	if(bat[in]._cnt_wrk)
005064  7b60              LDRB     r0,[r4,#0xd]
005066  b3f0              CBZ      r0,|L1.20710|
;;;7854   		{
;;;7855   		bat[in]._cnt_wrk--;
005068  f1a00001          SUB      r0,r0,#1
00506c  b2c0              UXTB     r0,r0
00506e  7360              STRB     r0,[r4,#0xd]
;;;7856   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
005070  bbc8              CBNZ     r0,|L1.20710|
005072  7ba0              LDRB     r0,[r4,#0xe]
005074  bbb8              CBNZ     r0,|L1.20710|
;;;7857   			{
;;;7858   			bat[in]._wrk=1;
005076  f04f0001          MOV      r0,#1
00507a  73a0              STRB     r0,[r4,#0xe]
;;;7859   
;;;7860   				{
;;;7861   				char temp;
;;;7862   				signed short temp_temp;
;;;7863   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
00507c  48ff              LDR      r0,|L1.21628|
00507e  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
005080  f1000001          ADD      r0,r0,#1
005084  f0000007          AND      r0,r0,#7
005088  eb040040          ADD      r0,r4,r0,LSL #1
00508c  8c00              LDRH     r0,[r0,#0x20]
00508e  9000              STR      r0,[sp,#0]
;;;7864   			 
;;;7865   				temp=LPC_RTC->YEAR;
005090  4efb              LDR      r6,|L1.21632|
005092  8bb0              LDRH     r0,[r6,#0x1c]
005094  9001              STR      r0,[sp,#4]
;;;7866   				gran_char((signed char*)&temp,1,99);
005096  f04f0263          MOV      r2,#0x63
00509a  f04f0101          MOV      r1,#1
00509e  a801              ADD      r0,sp,#4
0050a0  f7fffffe          BL       gran_char
;;;7867   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
0050a4  f104041c          ADD      r4,r4,#0x1c
0050a8  f89d0004          LDRB     r0,[sp,#4]
0050ac  7620              STRB     r0,[r4,#0x18]
;;;7868   			
;;;7869   				temp=LPC_RTC->MONTH;
0050ae  7e30              LDRB     r0,[r6,#0x18]
0050b0  9001              STR      r0,[sp,#4]
;;;7870   				gran_char((signed char*)&temp,1,12);
0050b2  f04f020c          MOV      r2,#0xc
0050b6  f04f0101          MOV      r1,#1
0050ba  a801              ADD      r0,sp,#4
0050bc  f7fffffe          BL       gran_char
;;;7871   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
0050c0  f89d0004          LDRB     r0,[sp,#4]
0050c4  7660              STRB     r0,[r4,#0x19]
;;;7872   			
;;;7873   				temp=LPC_RTC->DOM;
0050c6  7b30              LDRB     r0,[r6,#0xc]
0050c8  9001              STR      r0,[sp,#4]
;;;7874   				gran_char((signed char*)&temp,1,31);
0050ca  221f              MOVS     r2,#0x1f
0050cc  2101              MOVS     r1,#1
0050ce  a801              ADD      r0,sp,#4
0050d0  f7fffffe          BL       gran_char
;;;7875   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
0050d4  f89d0004          LDRB     r0,[sp,#4]
0050d8  76a0              STRB     r0,[r4,#0x1a]
;;;7876   				
;;;7877   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
0050da  f89d0000          LDRB     r0,[sp,#0]
0050de  76e0              STRB     r0,[r4,#0x1b]
;;;7878   
;;;7879   				temp=LPC_RTC->HOUR;
0050e0  7a30              LDRB     r0,[r6,#8]
0050e2  9001              STR      r0,[sp,#4]
;;;7880   				gran_char((signed char*)&temp,0,23);
0050e4  e000              B        |L1.20712|
                  |L1.20710|
0050e6  e022              B        |L1.20782|
                  |L1.20712|
0050e8  2217              MOVS     r2,#0x17
0050ea  2100              MOVS     r1,#0
0050ec  a801              ADD      r0,sp,#4
0050ee  f7fffffe          BL       gran_char
;;;7881   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
0050f2  f89d0004          LDRB     r0,[sp,#4]
0050f6  7720              STRB     r0,[r4,#0x1c]
;;;7882                  	
;;;7883   				temp=LPC_RTC->MIN;
0050f8  7930              LDRB     r0,[r6,#4]
0050fa  9001              STR      r0,[sp,#4]
;;;7884   				gran_char((signed char*)&temp,0,59);
0050fc  223b              MOVS     r2,#0x3b
0050fe  2100              MOVS     r1,#0
005100  a801              ADD      r0,sp,#4
005102  f7fffffe          BL       gran_char
;;;7885   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
005106  f89d0004          LDRB     r0,[sp,#4]
00510a  7760              STRB     r0,[r4,#0x1d]
;;;7886   	          
;;;7887   				temp=LPC_RTC->SEC;
00510c  7830              LDRB     r0,[r6,#0]
00510e  9001              STR      r0,[sp,#4]
;;;7888   				gran_char((signed char*)&temp,0,59);
005110  223b              MOVS     r2,#0x3b
005112  2100              MOVS     r1,#0
005114  a801              ADD      r0,sp,#4
005116  f7fffffe          BL       gran_char
;;;7889   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
00511a  f89d0004          LDRB     r0,[sp,#4]
00511e  77a0              STRB     r0,[r4,#0x1e]
;;;7890   			
;;;7891   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
005120  f89d0001          LDRB     r0,[sp,#1]
005124  77e0              STRB     r0,[r4,#0x1f]
;;;7892   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005126  8027              STRH     r7,[r4,#0]
;;;7893   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
005128  8067              STRH     r7,[r4,#2]
00512a  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.20782|
;;;7894   				}
;;;7895   	
;;;7896   			}
;;;7897   
;;;7898   		}
;;;7899   	else bat[in]._cnt_wrk=0;	 
;;;7900   	
;;;7901   	}					
;;;7902   
;;;7903   /*
;;;7904   if(Ibat>=(-IKB))
;;;7905   	{
;;;7906   	if(cnt_wrk<10)
;;;7907   		{
;;;7908   		cnt_wrk++;
;;;7909   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7910   			{
;;;7911   			wrk=wrkOFF;
;;;7912   			//beep_init(0x7L,'O');
;;;7913   			wrk_mem_hndl(ibat_integr);
;;;7914   			}
;;;7915   		}
;;;7916   	else cnt_wrk=10;	
;;;7917   	}	
;;;7918   
;;;7919   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;7920   	{
;;;7921   	if(cnt_wrk)
;;;7922   		{
;;;7923   		cnt_wrk--;
;;;7924   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7925   			{
;;;7926   			char temp;
;;;7927   			signed short temp_temp;
;;;7928   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7929   			 
;;;7930   			wrk=wrkON;
;;;7931   			
;;;7932   			temp=_year;
;;;7933   			gran_char(&temp,1,99);
;;;7934   			*((char*)(&(wrk_date[0])))=temp;
;;;7935   			
;;;7936   			temp=_month;
;;;7937   			gran_char(&temp,1,12);
;;;7938   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7939   			
;;;7940   			temp=_date;
;;;7941   			gran_char(&temp,1,31);
;;;7942   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7943   				
;;;7944   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7945   
;;;7946   			temp=_hour;
;;;7947   			gran_char(&temp,0,23);
;;;7948   			*((char*)(&(wrk_date[1])))=temp;
;;;7949                  
;;;7950   			temp=_min;
;;;7951   			gran_char(&temp,0,59);
;;;7952   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7953   	          
;;;7954   			temp=_sec;
;;;7955   			gran_char(&temp,0,59);
;;;7956   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7957   			
;;;7958   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7959   
;;;7960   			
;;;7961   			//beep_init(0xFL,'O'); 
;;;7962   			ibat_integr=0;
;;;7963   			ibat_integr_=0;
;;;7964   			}
;;;7965   		}
;;;7966   	else cnt_wrk=0;	 
;;;7967   	
;;;7968   	}
;;;7969   if(wrk==wrkON)
;;;7970   	{
;;;7971   	ibat_integr_+=-Ibat;
;;;7972   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7973   		{
;;;7974   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7975   		ibat_integr++;
;;;7976   		}
;;;7977   	}
;;;7978   
;;;7979   */
;;;7980   
;;;7981   
;;;7982   /*if(bat[in]._cnt_to_block)
;;;7983   	{
;;;7984   	bat[in]._cnt_to_block--;
;;;7985   	if(!(bat[in]._cnt_to_block))
;;;7986   		{
;;;7987   		//bat[in]._rel_stat=1;
;;;7988   		}
;;;7989   	}
;;;7990   */
;;;7991   
;;;7992   
;;;7993   
;;;7994   
;;;7995   //unsigned int tempUI,tempUI_;
;;;7996   //unsigned int b_zar; 
;;;7997   //char i;
;;;7998   //Ibat[0]=5000;                     
;;;7999   
;;;8000   
;;;8001                               
;;;8002   if(bat[in]._time_cnt==0)
;;;8003   	{
;;;8004   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8005   	
;;;8006   	if(bat[in]._zar_cnt>=AH_CONSTANT)
00512e  f64848a0          MOV      r8,#0x8ca0
005132  f894003e          LDRB     r0,[r4,#0x3e]         ;8002
005136  bba8              CBNZ     r0,|L1.20900|
005138  f9b41008          LDRSH    r1,[r4,#8]            ;8004
00513c  6960              LDR      r0,[r4,#0x14]         ;8004
00513e  4408              ADD      r0,r0,r1              ;8004
005140  6160              STR      r0,[r4,#0x14]         ;8004
;;;8007   		{
;;;8008   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8009   		else tempUS_=BAT_C_REAL[in];
;;;8010   		
;;;8011   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005142  f8df9340          LDR      r9,|L1.21636|
005146  f8dfa340          LDR      r10,|L1.21640|
00514a  f2455b55          MOV      r11,#0x5555           ;8008
00514e  4540              CMP      r0,r8                 ;8006
005150  db29              BLT      |L1.20902|
005152  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8008
005156  4558              CMP      r0,r11                ;8008
005158  d103              BNE      |L1.20834|
00515a  48cc              LDR      r0,|L1.21644|
00515c  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8008
005160  e001              B        |L1.20838|
                  |L1.20834|
005162  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8009
                  |L1.20838|
005166  f8390015          LDRH     r0,[r9,r5,LSL #1]
00516a  f7fffffe          BL       lc640_read_int
00516e  b280              UXTH     r0,r0
;;;8012   
;;;8013   		if(b_zar<(tempUS_/**10*/))
005170  42b0              CMP      r0,r6
005172  d20e              BCS      |L1.20882|
;;;8014   			{
;;;8015   			bat[in]._zar_cnt-=AH_CONSTANT;
005174  6961              LDR      r1,[r4,#0x14]
005176  f5a14100          SUB      r1,r1,#0x8000
00517a  f5a1614a          SUB      r1,r1,#0xca0
00517e  6161              STR      r1,[r4,#0x14]
;;;8016   
;;;8017   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
005180  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005184  f1000001          ADD      r0,r0,#1
005188  b201              SXTH     r1,r0
00518a  4610              MOV      r0,r2
00518c  f7fffffe          BL       lc640_write_int
005190  e032              B        |L1.20984|
                  |L1.20882|
;;;8018   			}
;;;8019   		else if(b_zar>(tempUS_/**10*/))  
005192  d931              BLS      |L1.20984|
;;;8020   			{
;;;8021   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005194  f9390015          LDRSH    r0,[r9,r5,LSL #1]
005198  b231              SXTH     r1,r6
00519a  f7fffffe          BL       lc640_write_int
;;;8022   			bat[in]._zar_cnt=AH_CONSTANT;
00519e  f8c48014          STR      r8,[r4,#0x14]
0051a2  e029              B        |L1.20984|
                  |L1.20900|
0051a4  e054              B        |L1.21072|
                  |L1.20902|
;;;8023   
;;;8024   			}
;;;8025   
;;;8026   		}
;;;8027   
;;;8028   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
0051a6  49ba              LDR      r1,|L1.21648|
0051a8  4288              CMP      r0,r1
0051aa  dc25              BGT      |L1.20984|
;;;8029   		{
;;;8030   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
0051ac  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0051b0  4558              CMP      r0,r11
0051b2  d103              BNE      |L1.20924|
0051b4  48b5              LDR      r0,|L1.21644|
0051b6  f8306015          LDRH     r6,[r0,r5,LSL #1]
0051ba  e001              B        |L1.20928|
                  |L1.20924|
;;;8031   		else tempUS_=BAT_C_REAL[in];
0051bc  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.20928|
;;;8032   		
;;;8033   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0051c0  f8390015          LDRH     r0,[r9,r5,LSL #1]
0051c4  f7fffffe          BL       lc640_read_int
0051c8  b280              UXTH     r0,r0
;;;8034   
;;;8035   		if(b_zar>tempUS_)
0051ca  42b0              CMP      r0,r6
0051cc  d905              BLS      |L1.20954|
;;;8036   			{
;;;8037   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0051ce  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0051d2  b231              SXTH     r1,r6
0051d4  f7fffffe          BL       lc640_write_int
;;;8038   			b_zar=tempUS_;
0051d8  4630              MOV      r0,r6
                  |L1.20954|
;;;8039   			}
;;;8040   		if(b_zar)
0051da  b158              CBZ      r0,|L1.20980|
;;;8041   			{
;;;8042   			bat[in]._zar_cnt+=AH_CONSTANT;
0051dc  6961              LDR      r1,[r4,#0x14]
0051de  4441              ADD      r1,r1,r8
0051e0  6161              STR      r1,[r4,#0x14]
;;;8043   
;;;8044   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
0051e2  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0051e6  f1a00001          SUB      r0,r0,#1
0051ea  b201              SXTH     r1,r0
0051ec  4610              MOV      r0,r2
0051ee  f7fffffe          BL       lc640_write_int
0051f2  e001              B        |L1.20984|
                  |L1.20980|
;;;8045   			}
;;;8046   		else 
;;;8047   			{
;;;8048   			bat[in]._zar_cnt=-AH_CONSTANT;
0051f4  48a6              LDR      r0,|L1.21648|
0051f6  6160              STR      r0,[r4,#0x14]
                  |L1.20984|
;;;8049   			}
;;;8050   
;;;8051   		}
;;;8052   
;;;8053   			
;;;8054   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0051f8  f8390015          LDRH     r0,[r9,r5,LSL #1]
0051fc  f7fffffe          BL       lc640_read_int
005200  4601              MOV      r1,r0
;;;8055   	
;;;8056   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
005202  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005206  4558              CMP      r0,r11
005208  d102              BNE      |L1.21008|
00520a  48a0              LDR      r0,|L1.21644|
00520c  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21008|
;;;8057   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8058   		           	
;;;8059   	tempUL*=1000L;
005210  f44f727a          MOV      r2,#0x3e8
005214  fb01f102          MUL      r1,r1,r2
;;;8060   
;;;8061   
;;;8062   	if(tempUL_==0) tempUL=0;
005218  b158              CBZ      r0,|L1.21042|
;;;8063   	else tempUL/=tempUL_;
00521a  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21022|
;;;8064   
;;;8065   	tempUL/=10L;
00521e  f04f010a          MOV      r1,#0xa
005222  fbb0f0f1          UDIV     r0,r0,r1
;;;8066   
;;;8067   	bat[in]._zar=(unsigned short)tempUL;
005226  8220              STRH     r0,[r4,#0x10]
;;;8068   
;;;8069   	if(BAT_TYPE==1)
005228  489a              LDR      r0,|L1.21652|
00522a  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
00522c  2801              CMP      r0,#1
00522e  d003              BEQ      |L1.21048|
005230  e008              B        |L1.21060|
                  |L1.21042|
005232  f04f0000          MOV      r0,#0                 ;8062
005236  e7f2              B        |L1.21022|
                  |L1.21048|
;;;8070   		{
;;;8071   		bat[in]._zar=lakb[in]._s_o_c;
005238  4997              LDR      r1,|L1.21656|
00523a  9802              LDR      r0,[sp,#8]
00523c  eb010080          ADD      r0,r1,r0,LSL #2
005240  8a40              LDRH     r0,[r0,#0x12]
005242  8220              STRH     r0,[r4,#0x10]
                  |L1.21060|
;;;8072   		}
;;;8073   	
;;;8074   	gran((signed short*)&bat[in]._zar,0,100);
005244  f1040010          ADD      r0,r4,#0x10
005248  2264              MOVS     r2,#0x64
00524a  2100              MOVS     r1,#0
00524c  f7fffffe          BL       gran
                  |L1.21072|
;;;8075        }
;;;8076   
;;;8077   
;;;8078   //Подсчет тока разряда батареи      
;;;8079   if(bat[in]._wrk==1)
005250  7ba0              LDRB     r0,[r4,#0xe]
005252  2801              CMP      r0,#1
005254  d113              BNE      |L1.21118|
;;;8080   	{
;;;8081   	if(bat[in]._Iintegr<36000)
005256  8ba0              LDRH     r0,[r4,#0x1c]
005258  4540              CMP      r0,r8
00525a  d20f              BCS      |L1.21116|
;;;8082   		{          
;;;8083   		bat[in]._Iintegr+=abs(bat[in]._Ib);
00525c  f9b40008          LDRSH    r0,[r4,#8]
005260  f7fffffe          BL       abs
005264  8ba1              LDRH     r1,[r4,#0x1c]
005266  4408              ADD      r0,r0,r1
005268  b280              UXTH     r0,r0
00526a  83a0              STRH     r0,[r4,#0x1c]
;;;8084   		if(bat[in]._Iintegr>=36000)
00526c  4540              CMP      r0,r8
00526e  d306              BCC      |L1.21118|
;;;8085   			{
;;;8086   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005270  83a7              STRH     r7,[r4,#0x1c]
;;;8087   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
005272  8be0              LDRH     r0,[r4,#0x1e]
005274  f1000001          ADD      r0,r0,#1
005278  83e0              STRH     r0,[r4,#0x1e]
00527a  e000              B        |L1.21118|
                  |L1.21116|
;;;8088   			}
;;;8089   		}
;;;8090   	else 
;;;8091   		{
;;;8092   		bat[in]._Iintegr=0;
00527c  83a7              STRH     r7,[r4,#0x1c]
                  |L1.21118|
;;;8093   		}	
;;;8094   	} 
;;;8095   	    
;;;8096   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8097   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
00527e  4e87              LDR      r6,|L1.21660|
005280  4987              LDR      r1,|L1.21664|
005282  f8df9220          LDR      r9,|L1.21668|
005286  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00528a  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
00528e  4288              CMP      r0,r1
005290  dd02              BLE      |L1.21144|
005292  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
005296  b380              CBZ      r0,|L1.21242|
                  |L1.21144|
;;;8098   	{
;;;8099   	bat[in]._sign_temper_cnt++;
;;;8100   	}
;;;8101   else 
;;;8102   	{
;;;8103   	bat[in]._sign_temper_cnt--;
005298  f8b40040          LDRH     r0,[r4,#0x40]
00529c  f1a00001          SUB      r0,r0,#1
0052a0  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.21156|
;;;8104   	}
;;;8105   #else
;;;8106   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8107   	{
;;;8108   	bat[in]._sign_temper_cnt++;
;;;8109   	}
;;;8110   else 
;;;8111   	{
;;;8112   	bat[in]._sign_temper_cnt--;
;;;8113   	}
;;;8114   #endif
;;;8115   gran(&bat[in]._sign_temper_cnt,0,600);
0052a4  f44f7b16          MOV      r11,#0x258
0052a8  f1040040          ADD      r0,r4,#0x40
0052ac  465a              MOV      r2,r11
0052ae  2100              MOVS     r1,#0
0052b0  f7fffffe          BL       gran
;;;8116   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
0052b4  f9b40040          LDRSH    r0,[r4,#0x40]
0052b8  f2402a4e          MOV      r10,#0x24e
0052bc  4550              CMP      r0,r10
0052be  db05              BLT      |L1.21196|
0052c0  f894103f          LDRB     r1,[r4,#0x3f]
0052c4  f0410101          ORR      r1,r1,#1
0052c8  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21196|
;;;8117   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
0052cc  280a              CMP      r0,#0xa
0052ce  dc05              BGT      |L1.21212|
0052d0  f894003f          LDRB     r0,[r4,#0x3f]
0052d4  f0200001          BIC      r0,r0,#1
0052d8  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21212|
;;;8118   
;;;8119   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
0052dc  f894003f          LDRB     r0,[r4,#0x3f]
0052e0  07c1              LSLS     r1,r0,#31
0052e2  d005              BEQ      |L1.21232|
0052e4  06c0              LSLS     r0,r0,#27
0052e6  d403              BMI      |L1.21232|
0052e8  2101              MOVS     r1,#1
0052ea  4628              MOV      r0,r5
0052ec  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21232|
;;;8120   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
0052f0  f894003f          LDRB     r0,[r4,#0x3f]
0052f4  07c1              LSLS     r1,r0,#31
0052f6  d008              BEQ      |L1.21258|
0052f8  e00d              B        |L1.21270|
                  |L1.21242|
0052fa  e7ff              B        |L1.21244|
                  |L1.21244|
0052fc  f8b40040          LDRH     r0,[r4,#0x40]         ;8099
005300  f1000001          ADD      r0,r0,#1              ;8099
005304  f8a40040          STRH     r0,[r4,#0x40]         ;8099
005308  e7cc              B        |L1.21156|
                  |L1.21258|
00530a  06c0              LSLS     r0,r0,#27
00530c  d503              BPL      |L1.21270|
00530e  2100              MOVS     r1,#0
005310  4628              MOV      r0,r5
005312  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21270|
;;;8121   
;;;8122   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
005316  f894003f          LDRB     r0,[r4,#0x3f]
00531a  07c1              LSLS     r1,r0,#31
00531c  d004              BEQ      |L1.21288|
00531e  f0400010          ORR      r0,r0,#0x10
005322  f884003f          STRB     r0,[r4,#0x3f]
005326  e003              B        |L1.21296|
                  |L1.21288|
;;;8123   else 								bat[in]._temper_stat&=~(1<<4);
005328  f0200010          BIC      r0,r0,#0x10
00532c  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21296|
;;;8124   
;;;8125   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8126   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
005330  495d              LDR      r1,|L1.21672|
005332  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
005336  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
00533a  4288              CMP      r0,r1
00533c  dd02              BLE      |L1.21316|
00533e  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
005342  b3d0              CBZ      r0,|L1.21434|
                  |L1.21316|
;;;8127   	{
;;;8128   	bat[in]._max_temper_cnt++;
;;;8129   	}
;;;8130   else 
;;;8131   	{
;;;8132   	bat[in]._max_temper_cnt--;
005344  f8b40042          LDRH     r0,[r4,#0x42]
005348  f1a00001          SUB      r0,r0,#1
00534c  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21328|
;;;8133   	}
;;;8134   #else
;;;8135   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8136   	{
;;;8137   	bat[in]._max_temper_cnt++;
;;;8138   	}
;;;8139   else 
;;;8140   	{
;;;8141   	bat[in]._max_temper_cnt--;
;;;8142   	}
;;;8143   #endif
;;;8144   
;;;8145   gran(&bat[in]._max_temper_cnt,0,600);
005350  f1040042          ADD      r0,r4,#0x42
005354  465a              MOV      r2,r11
005356  2100              MOVS     r1,#0
005358  f7fffffe          BL       gran
;;;8146   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
00535c  f9b40042          LDRSH    r0,[r4,#0x42]
005360  4550              CMP      r0,r10
005362  db05              BLT      |L1.21360|
005364  f894103f          LDRB     r1,[r4,#0x3f]
005368  f0410102          ORR      r1,r1,#2
00536c  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21360|
;;;8147   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
005370  280a              CMP      r0,#0xa
005372  dc05              BGT      |L1.21376|
005374  f894003f          LDRB     r0,[r4,#0x3f]
005378  f0200002          BIC      r0,r0,#2
00537c  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21376|
;;;8148   
;;;8149   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
005380  f894003f          LDRB     r0,[r4,#0x3f]
005384  0781              LSLS     r1,r0,#30
005386  d505              BPL      |L1.21396|
005388  0680              LSLS     r0,r0,#26
00538a  d403              BMI      |L1.21396|
00538c  2103              MOVS     r1,#3
00538e  4628              MOV      r0,r5
005390  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21396|
;;;8150   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
005394  f894003f          LDRB     r0,[r4,#0x3f]
005398  0781              LSLS     r1,r0,#30
00539a  d405              BMI      |L1.21416|
00539c  0680              LSLS     r0,r0,#26
00539e  d503              BPL      |L1.21416|
0053a0  2102              MOVS     r1,#2
0053a2  4628              MOV      r0,r5
0053a4  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21416|
;;;8151   
;;;8152   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
0053a8  f894003f          LDRB     r0,[r4,#0x3f]
0053ac  0781              LSLS     r1,r0,#30
0053ae  d50c              BPL      |L1.21450|
0053b0  f0400020          ORR      r0,r0,#0x20
0053b4  f884003f          STRB     r0,[r4,#0x3f]
0053b8  e00b              B        |L1.21458|
                  |L1.21434|
0053ba  e7ff              B        |L1.21436|
                  |L1.21436|
0053bc  f8b40042          LDRH     r0,[r4,#0x42]         ;8128
0053c0  f1000001          ADD      r0,r0,#1              ;8128
0053c4  f8a40042          STRH     r0,[r4,#0x42]         ;8128
0053c8  e7c2              B        |L1.21328|
                  |L1.21450|
;;;8153   else 								bat[in]._temper_stat&=~(1<<5);
0053ca  f0200020          BIC      r0,r0,#0x20
0053ce  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21458|
;;;8154   
;;;8155   //Подсчет наработки батареи
;;;8156   if(bat[in]._resurs_cnt<36000)
0053d2  6c60              LDR      r0,[r4,#0x44]
0053d4  4540              CMP      r0,r8
0053d6  da13              BGE      |L1.21504|
;;;8157   	{               
;;;8158   	bat[in]._resurs_cnt++;
0053d8  f1000001          ADD      r0,r0,#1
0053dc  6460              STR      r0,[r4,#0x44]
;;;8159   	if(bat[in]._resurs_cnt>=36000)
0053de  4540              CMP      r0,r8
0053e0  db0f              BLT      |L1.21506|
;;;8160   		{
;;;8161   		bat[in]._resurs_cnt=0;
0053e2  6467              STR      r7,[r4,#0x44]
;;;8162   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0053e4  4c31              LDR      r4,|L1.21676|
0053e6  f8340015          LDRH     r0,[r4,r5,LSL #1]
0053ea  f7fffffe          BL       lc640_read_int
0053ee  1c40              ADDS     r0,r0,#1
0053f0  b201              SXTH     r1,r0
0053f2  f9340015          LDRSH    r0,[r4,r5,LSL #1]
0053f6  b003              ADD      sp,sp,#0xc
0053f8  e8bd4ff0          POP      {r4-r11,lr}
0053fc  f7ffbffe          B.W      lc640_write_int
                  |L1.21504|
;;;8163   		}
;;;8164   	}
;;;8165   else bat[in]._resurs_cnt=0;
005400  6467              STR      r7,[r4,#0x44]
                  |L1.21506|
;;;8166   
;;;8167   
;;;8168   #ifndef UKU_220_V2
;;;8169   #ifndef UKU_GLONASS
;;;8170   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8171   //#ifndef UKU_6U
;;;8172   //#ifndef UKU_220
;;;8173   if(UBM_AV)
;;;8174        {
;;;8175        signed short temp_SS;
;;;8176   #ifdef UKU_220
;;;8177   temp_SS=bat[in]._Ub/2;
;;;8178   #else
;;;8179        if(U0B<600)
;;;8180             {
;;;8181   
;;;8182             temp_SS=bat[in]._Ub/4;
;;;8183             }
;;;8184        else temp_SS=bat[in]._Ub/5;
;;;8185   	
;;;8186   	temp_SS+=temp_SS;     
;;;8187   #endif
;;;8188        temp_SS-=(bat[in]._Ubm);
;;;8189   
;;;8190        temp_SS=abs(temp_SS);
;;;8191   
;;;8192        temp_SS*=10;
;;;8193   
;;;8194        temp_SS/=12;
;;;8195   
;;;8196        bat[in]._dUbm=temp_SS;
;;;8197   
;;;8198   
;;;8199        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8200   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8201   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8202   		(!(bat[in]._av & 2))  )
;;;8203   		{
;;;8204   		bat[in]._cnt_as++;
;;;8205   		if(bat[in]._cnt_as==3000)
;;;8206   			{
;;;8207   			avar_bat_as_hndl(in,1);
;;;8208   			}
;;;8209   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8210   		}
;;;8211   	else 
;;;8212   		{
;;;8213   		if(bat[in]._cnt_as)
;;;8214   			{
;;;8215   			bat[in]._cnt_as--;
;;;8216   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8217   			}
;;;8218   		}
;;;8219        
;;;8220        }
;;;8221   //#endif 
;;;8222   #endif 
;;;8223   #endif
;;;8224   #endif
;;;8225   
;;;8226   }
005402  e8bd8ffe          POP      {r1-r11,pc}
;;;8227   
                          ENDP

                  bat_hndl_zvu PROC
;;;8229   //-----------------------------------------------
;;;8230   void bat_hndl_zvu(void)
005406  e92d4ff0          PUSH     {r4-r11,lr}
;;;8231   {
00540a  b089              SUB      sp,sp,#0x24
;;;8232   char i;
;;;8233   short bat_hndl_i_temp;
;;;8234   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
00540c  f04f021c          MOV      r2,#0x1c
005410  4927              LDR      r1,|L1.21680|
005412  4668              MOV      r0,sp
005414  f7fffffe          BL       __aeabi_memcpy4
;;;8235   
;;;8236   //Ib_ips_termokompensat=-17000;
;;;8237    
;;;8238   if(bat_hndl_zvu_init==0)
005418  4c26              LDR      r4,|L1.21684|
;;;8239   	{
;;;8240   	//Инициализация при включении системы
;;;8241   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8242   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
00541a  2564              MOVS     r5,#0x64
;;;8243   	bat_hndl_zvu_Q*=10000L;
;;;8244   
;;;8245   	bat_hndl_zvu_init=1;
;;;8246   	}
;;;8247   else 
;;;8248   	{
;;;8249   	if(Ib_ips_termokompensat<-IKB)
;;;8250   		{
;;;8251   		bat_hndl_i_vector=0;
;;;8252   		bat_hndl_i_zar_price=0L;
;;;8253   			
;;;8254   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8255   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8256   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8257   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8258   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8259   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8260   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8261   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8262   		
;;;8263   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8264   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8265   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8266   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8267   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8268   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8269   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8270   
;;;8271   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8272   		for(i=0;i<7;i++)
;;;8273   			{
;;;8274   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8275   				{
;;;8276   				break;
;;;8277   				}
;;;8278   			}
;;;8279   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8280   		 else if((i>=1)&&(i<7))
;;;8281   		 	{
;;;8282   			short i1,i2;
;;;8283   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8284   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8285   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8286   			bat_hndl_t_razr*=(long)i1;
;;;8287   			bat_hndl_t_razr/=(long)i2;
;;;8288   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8289   			}
;;;8290   		else if(i>=7)
;;;8291   			{
;;;8292   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8293   			}
;;;8294   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
00541c  f8df8098          LDR      r8,|L1.21688|
005420  7a60              LDRB     r0,[r4,#9]            ;8238  ; bat_hndl_zvu_init
005422  2700              MOVS     r7,#0                 ;8238
005424  f04f0901          MOV      r9,#1                 ;8245
005428  f1040680          ADD      r6,r4,#0x80           ;8241
00542c  2800              CMP      r0,#0                 ;8238
00542e  d07e              BEQ      |L1.21806|
005430  4923              LDR      r1,|L1.21696|
005432  4822              LDR      r0,|L1.21692|
005434  f9b12000          LDRSH    r2,[r1,#0]            ;8249  ; IKB
005438  4631              MOV      r1,r6                 ;8241
00543a  f9b00000          LDRSH    r0,[r0,#0]            ;8249  ; Ib_ips_termokompensat
00543e  4253              RSBS     r3,r2,#0              ;8249
005440  6d49              LDR      r1,[r1,#0x54]         ;8241
005442  4298              CMP      r0,r3                 ;8249
005444  da74              BGE      |L1.21808|
005446  72e7              STRB     r7,[r4,#0xb]          ;8251
005448  6137              STR      r7,[r6,#0x10]         ;8252  ; bat_hndl_i_zar_price
00544a  f1c00000          RSB      r0,r0,#0              ;8254
00544e  b200              SXTH     r0,r0                 ;8254
005450  80b0              STRH     r0,[r6,#4]            ;8254
005452  9008              STR      r0,[sp,#0x20]         ;8254
005454  481b              LDR      r0,|L1.21700|
005456  4a1c              LDR      r2,|L1.21704|
005458  8800              LDRH     r0,[r0,#0]            ;8255  ; BAT_C_POINT_1_6
00545a  eb000040          ADD      r0,r0,r0,LSL #1       ;8255
00545e  ea4f0040          LSL      r0,r0,#1              ;8255
005462  fa0ffb80          SXTH     r11,r0                ;8255
005466  4819              LDR      r0,|L1.21708|
005468  8800              LDRH     r0,[r0,#0]            ;8256  ; BAT_C_POINT_1_2
00546a  ea4f0040          LSL      r0,r0,#1              ;8256
00546e  b203              SXTH     r3,r0                 ;8256
005470  4817              LDR      r0,|L1.21712|
005472  f9b0c000          LDRSH    r12,[r0,#0]           ;8257  ; BAT_C_POINT_1
005476  4817              LDR      r0,|L1.21716|
005478  e02e              B        |L1.21720|
00547a  0000              DCW      0x0000
                  |L1.21628|
                          DCD      bat_u_old_cnt
                  |L1.21632|
                          DCD      0x40024020
                  |L1.21636|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.21640|
                          DCD      BAT_C_REAL
                  |L1.21644|
                          DCD      BAT_C_NOM
                  |L1.21648|
                          DCD      0xffff7360
                  |L1.21652|
                          DCD      BAT_TYPE
                  |L1.21656|
                          DCD      lakb
                  |L1.21660|
                          DCD      t_ext
                  |L1.21664|
                          DCD      TBATSIGN
                  |L1.21668|
                          DCD      ND_EXT
                  |L1.21672|
                          DCD      TBATMAX
                  |L1.21676|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.21680|
                          DCD      ||area_number.19||+0x20
                  |L1.21684|
                          DCD      ||area_number.25||
                  |L1.21688|
                          DCD      0x000f4240
                  |L1.21692|
                          DCD      Ib_ips_termokompensat
                  |L1.21696|
                          DCD      IKB
                  |L1.21700|
                          DCD      BAT_C_POINT_1_6
                  |L1.21704|
                          DCD      ||.bss||+0x44c
                  |L1.21708|
                          DCD      BAT_C_POINT_1_2
                  |L1.21712|
                          DCD      BAT_C_POINT_1
                  |L1.21716|
                          DCD      BAT_C_POINT_3
                  |L1.21720|
0054d8  f9b00000          LDRSH    r0,[r0,#0]            ;8258  ; BAT_C_POINT_3
0054dc  f04f0903          MOV      r9,#3                 ;8258
0054e0  fb90f0f9          SDIV     r0,r0,r9              ;8258
0054e4  b200              SXTH     r0,r0                 ;8258
0054e6  9007              STR      r0,[sp,#0x1c]         ;8258
0054e8  48ff              LDR      r0,|L1.22760|
0054ea  f04f0905          MOV      r9,#5                 ;8259
0054ee  f9b00000          LDRSH    r0,[r0,#0]            ;8259  ; BAT_C_POINT_5
0054f2  fb90f0f9          SDIV     r0,r0,r9              ;8259
0054f6  fa0ff980          SXTH     r9,r0                 ;8259
0054fa  48fc              LDR      r0,|L1.22764|
0054fc  f9b0a000          LDRSH    r10,[r0,#0]           ;8260  ; BAT_C_POINT_10
005500  f04f000a          MOV      r0,#0xa               ;8260
005504  fb9af0f0          SDIV     r0,r10,r0             ;8260
005508  fa0ffe80          SXTH     lr,r0                 ;8260
00550c  48f8              LDR      r0,|L1.22768|
00550e  f04f0a14          MOV      r10,#0x14             ;8261
005512  f9b00000          LDRSH    r0,[r0,#0]            ;8261  ; BAT_C_POINT_20
005516  fb90f0fa          SDIV     r0,r0,r10             ;8261
00551a  fa0ffa80          SXTH     r10,r0                ;8261
00551e  48f5              LDR      r0,|L1.22772|
005520  f9b00000          LDRSH    r0,[r0,#0]            ;8263  ; BAT_K_OLD
005524  fb0bfb00          MUL      r11,r11,r0            ;8263
005528  fb9bfbf5          SDIV     r11,r11,r5            ;8263
00552c  e001              B        |L1.21810|
                  |L1.21806|
00552e  e04e              B        |L1.21966|
                  |L1.21808|
005530  e082              B        |L1.22072|
                  |L1.21810|
005532  f8a2b000          STRH     r11,[r2,#0]           ;8263
005536  fb03f300          MUL      r3,r3,r0              ;8264
00553a  fb93f3f5          SDIV     r3,r3,r5              ;8264
00553e  8053              STRH     r3,[r2,#2]            ;8264
005540  fb0cfc00          MUL      r12,r12,r0            ;8265
005544  fb9cf3f5          SDIV     r3,r12,r5             ;8265
005548  8093              STRH     r3,[r2,#4]            ;8265
00554a  9b07              LDR      r3,[sp,#0x1c]         ;8266
00554c  fb03f300          MUL      r3,r3,r0              ;8266
005550  fb93f3f5          SDIV     r3,r3,r5              ;8266
005554  80d3              STRH     r3,[r2,#6]            ;8266
005556  fb09f900          MUL      r9,r9,r0              ;8267
00555a  fb99f3f5          SDIV     r3,r9,r5              ;8267
00555e  8113              STRH     r3,[r2,#8]            ;8267
005560  fb0efe00          MUL      lr,lr,r0              ;8268
005564  fb9ef3f5          SDIV     r3,lr,r5              ;8268
005568  8153              STRH     r3,[r2,#0xa]          ;8268
00556a  fb0afa00          MUL      r10,r10,r0            ;8269
00556e  fb9af0f5          SDIV     r0,r10,r5             ;8269
005572  8190              STRH     r0,[r2,#0xc]          ;8269
005574  9808              LDR      r0,[sp,#0x20]         ;8271
005576  f04f030a          MOV      r3,#0xa               ;8271
00557a  fb90f0f3          SDIV     r0,r0,r3              ;8271
00557e  b203              SXTH     r3,r0                 ;8271
005580  f04f0000          MOV      r0,#0                 ;8272
                  |L1.21892|
005584  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8274
005588  429d              CMP      r5,r3                 ;8274
00558a  dd04              BLE      |L1.21910|
00558c  f1000001          ADD      r0,r0,#1              ;8272
005590  b2c0              UXTB     r0,r0                 ;8272
005592  2807              CMP      r0,#7                 ;8272
005594  d3f6              BCC      |L1.21892|
                  |L1.21910|
005596  b358              CBZ      r0,|L1.22000|
005598  1e45              SUBS     r5,r0,#1              ;8280
00559a  2d06              CMP      r5,#6                 ;8280
00559c  d22b              BCS      |L1.22006|
00559e  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8283
0055a2  ebac0303          SUB      r3,r12,r3             ;8283
0055a6  b21b              SXTH     r3,r3                 ;8283
0055a8  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8284
0055ac  ebac0202          SUB      r2,r12,r2             ;8284
0055b0  fa0ffc82          SXTH     r12,r2                ;8284
0055b4  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8285
0055b8  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8285
0055bc  eba90200          SUB      r2,r9,r0              ;8285
0055c0  fb02f203          MUL      r2,r2,r3              ;8286
0055c4  fb92f2fc          SDIV     r2,r2,r12             ;8287
0055c8  4410              ADD      r0,r0,r2              ;8288
0055ca  64f0              STR      r0,[r6,#0x4c]         ;8288  ; bat_hndl_t_razr
0055cc  e017              B        |L1.22014|
                  |L1.21966|
0055ce  f44f70ef          MOV      r0,#0x1de             ;8241
0055d2  f7fffffe          BL       lc640_read_int
0055d6  6570              STR      r0,[r6,#0x54]         ;8241  ; bat_hndl_zvu_Q
0055d8  2865              CMP      r0,#0x65              ;8242
0055da  d300              BCC      |L1.21982|
0055dc  6575              STR      r5,[r6,#0x54]         ;8242  ; bat_hndl_zvu_Q
                  |L1.21982|
0055de  6d70              LDR      r0,[r6,#0x54]         ;8243  ; bat_hndl_zvu_Q
0055e0  f2427110          MOV      r1,#0x2710            ;8243
0055e4  fb00f001          MUL      r0,r0,r1              ;8243
0055e8  6570              STR      r0,[r6,#0x54]         ;8243  ; bat_hndl_zvu_Q
0055ea  f8849009          STRB     r9,[r4,#9]            ;8245
0055ee  e066              B        |L1.22206|
                  |L1.22000|
0055f0  9800              LDR      r0,[sp,#0]            ;8279
0055f2  64f0              STR      r0,[r6,#0x4c]         ;8279  ; bat_hndl_t_razr
0055f4  e003              B        |L1.22014|
                  |L1.22006|
0055f6  2807              CMP      r0,#7                 ;8290
0055f8  d301              BCC      |L1.22014|
0055fa  9806              LDR      r0,[sp,#0x18]         ;8292
0055fc  64f0              STR      r0,[r6,#0x4c]         ;8292  ; bat_hndl_t_razr
                  |L1.22014|
0055fe  6cf0              LDR      r0,[r6,#0x4c]  ; bat_hndl_t_razr
005600  fb98f0f0          SDIV     r0,r8,r0
005604  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_proc_razr
;;;8295   
;;;8296   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
005606  4281              CMP      r1,r0
005608  dd03              BLE      |L1.22034|
00560a  eba10000          SUB      r0,r1,r0
00560e  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005610  e000              B        |L1.22036|
                  |L1.22034|
;;;8297   		else bat_hndl_zvu_Q=0L;
005612  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22036|
;;;8298   
;;;8299   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
005614  6df1              LDR      r1,[r6,#0x5c]  ; bat_hndl_remain_time
005616  f44f6061          MOV      r0,#0xe10
00561a  fb91f0f0          SDIV     r0,r1,r0
00561e  80f0              STRH     r0,[r6,#6]
;;;8300   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005620  f04f003c          MOV      r0,#0x3c
005624  fb91f1f0          SDIV     r1,r1,r0
005628  b209              SXTH     r1,r1
00562a  8131              STRH     r1,[r6,#8]
;;;8301   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
00562c  fb91f2f0          SDIV     r2,r1,r0
005630  fb001012          MLS      r0,r0,r2,r1
005634  8170              STRH     r0,[r6,#0xa]
005636  e016              B        |L1.22118|
                  |L1.22072|
;;;8302   
;;;8303   		}
;;;8304   	else if(Ib_ips_termokompensat>IKB)
005638  4290              CMP      r0,r2
00563a  dd14              BLE      |L1.22118|
;;;8305   		{
;;;8306   		bat_hndl_i_vector=1;
00563c  f884900b          STRB     r9,[r4,#0xb]
;;;8307   
;;;8308   		bat_hndl_i=Ib_ips_termokompensat;
005640  80b0              STRH     r0,[r6,#4]
;;;8309   		bat_hndl_i_summ+=(long)bat_hndl_i;
005642  6e72              LDR      r2,[r6,#0x64]  ; bat_hndl_i_summ
005644  4410              ADD      r0,r0,r2
005646  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8310   		if(bat_hndl_i_summ>=36000L)
005648  f64842a0          MOV      r2,#0x8ca0
00564c  4290              CMP      r0,r2
00564e  db0a              BLT      |L1.22118|
;;;8311   
;;;8312   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8313   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8314   			{
;;;8315   			bat_hndl_i_summ-=36000L;
005650  eba00002          SUB      r0,r0,r2
005654  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8316   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
005656  4541              CMP      r1,r8
005658  da03              BGE      |L1.22114|
00565a  6930              LDR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
00565c  4408              ADD      r0,r0,r1
00565e  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005660  e001              B        |L1.22118|
                  |L1.22114|
;;;8317   			else bat_hndl_zvu_Q=1000000L; 
005662  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22118|
;;;8318   			}
;;;8319   		}
;;;8320   
;;;8321   
;;;8322   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
005666  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005668  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
00566a  4288              CMP      r0,r1
00566c  d00d              BEQ      |L1.22154|
;;;8323   		{
;;;8324   		if(bat_hndl_i_vector==1)
00566e  2801              CMP      r0,#1
005670  d10b              BNE      |L1.22154|
;;;8325   			{
;;;8326   			signed short tempSS;
;;;8327   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
005672  f44f70e4          MOV      r0,#0x1c8
005676  f7fffffe          BL       lc640_read_int
00567a  b200              SXTH     r0,r0
;;;8328   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
00567c  4a9e              LDR      r2,|L1.22776|
00567e  6d71              LDR      r1,[r6,#0x54]  ; bat_hndl_zvu_Q
005680  4411              ADD      r1,r1,r2
005682  fb91f0f0          SDIV     r0,r1,r0
005686  6130              STR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
;;;8329   			bat_hndl_i_summ=0;
005688  6677              STR      r7,[r6,#0x64]  ; bat_hndl_i_summ
                  |L1.22154|
;;;8330   			}
;;;8331   		}
;;;8332   	bat_hndl_i_vector_old=bat_hndl_i_vector;
00568a  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
00568c  7320              STRB     r0,[r4,#0xc]
;;;8333   
;;;8334   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
00568e  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005690  f2427a10          MOV      r10,#0x2710
005694  fb90f5fa          SDIV     r5,r0,r10
005698  f44f79ef          MOV      r9,#0x1de
00569c  4648              MOV      r0,r9
00569e  f7fffffe          BL       lc640_read_int
0056a2  4285              CMP      r5,r0
0056a4  d006              BEQ      |L1.22196|
0056a6  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0056a8  fb90f0fa          SDIV     r0,r0,r10
0056ac  b201              SXTH     r1,r0
0056ae  4648              MOV      r0,r9
0056b0  f7fffffe          BL       lc640_write_int
                  |L1.22196|
;;;8335   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
0056b4  e9d60115          LDRD     r0,r1,[r6,#0x54]
0056b8  fb90f0f1          SDIV     r0,r0,r1
0056bc  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_remain_time
                  |L1.22206|
;;;8336   	}
;;;8337   
;;;8338   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
0056be  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0056c0  4540              CMP      r0,r8
0056c2  dd02              BLE      |L1.22218|
0056c4  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
0056c8  e002              B        |L1.22224|
                  |L1.22218|
;;;8339   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
0056ca  2800              CMP      r0,#0
0056cc  da00              BGE      |L1.22224|
0056ce  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22224|
;;;8340   
;;;8341   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
0056d0  488a              LDR      r0,|L1.22780|
0056d2  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
0056d6  200a              MOVS     r0,#0xa
0056d8  fb91f0f0          SDIV     r0,r1,r0
0056dc  4988              LDR      r1,|L1.22784|
0056de  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0056e2  ebb00f41          CMP      r0,r1,LSL #1
0056e6  da30              BGE      |L1.22346|
0056e8  4249              RSBS     r1,r1,#0
0056ea  ebb00f41          CMP      r0,r1,LSL #1
0056ee  dd2c              BLE      |L1.22346|
0056f0  4884              LDR      r0,|L1.22788|
0056f2  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
0056f6  07c0              LSLS     r0,r0,#31
0056f8  d127              BNE      |L1.22346|
0056fa  4883              LDR      r0,|L1.22792|
0056fc  4983              LDR      r1,|L1.22796|
0056fe  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
005702  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
005706  4288              CMP      r0,r1
005708  dc1f              BGT      |L1.22346|
00570a  4981              LDR      r1,|L1.22800|
00570c  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
005710  4288              CMP      r0,r1
005712  dd1a              BLE      |L1.22346|
005714  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
005718  280a              CMP      r0,#0xa
00571a  db16              BLT      |L1.22346|
00571c  28c8              CMP      r0,#0xc8
00571e  dc14              BGT      |L1.22346|
;;;8342   	{
;;;8343   	if(bat_hndl_zvu_Q_cnt<60)
005720  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
005724  283c              CMP      r0,#0x3c
005726  d20d              BCS      |L1.22340|
;;;8344   		{
;;;8345   		bat_hndl_zvu_Q_cnt++;
005728  f1000001          ADD      r0,r0,#1
00572c  b2c0              UXTB     r0,r0
00572e  f8840030          STRB     r0,[r4,#0x30]
;;;8346   		if(bat_hndl_zvu_Q_cnt>=60)
005732  283c              CMP      r0,#0x3c
005734  d306              BCC      |L1.22340|
;;;8347   			{
;;;8348   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
005736  2164              MOVS     r1,#0x64
005738  f44f70ef          MOV      r0,#0x1de
00573c  f7fffffe          BL       lc640_write_int
;;;8349   			bat_hndl_zvu_Q=1000000L;
005740  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22340|
;;;8350   
;;;8351   
;;;8352   			}
;;;8353   		}
;;;8354   	}
;;;8355   else 
;;;8356   	{
;;;8357   	bat_hndl_zvu_Q_cnt=0;
;;;8358   	}
;;;8359   
;;;8360   
;;;8361   
;;;8362   };
005744  b009              ADD      sp,sp,#0x24
005746  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.22346|
00574a  f8847030          STRB     r7,[r4,#0x30]         ;8357
00574e  e7f9              B        |L1.22340|
;;;8363   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8367   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8368   void u_avt_set_hndl(void)
005750  e92d5fff          PUSH     {r0-r12,lr}
;;;8369   {
;;;8370   if(uavt_set_stat==uassSTEP1)
005754  4d6f              LDR      r5,|L1.22804|
;;;8371   	{
;;;8372   	char i,find_succes;
;;;8373   
;;;8374   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8375   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8376   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8377   		{
;;;8378   		uavt_set_error_cnt=60;
005756  4e70              LDR      r6,|L1.22808|
005758  f8df81c0          LDR      r8,|L1.22812|
00575c  7828              LDRB     r0,[r5,#0]            ;8370  ; uavt_set_stat
;;;8379   		}
;;;8380   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8381   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8382   	find_succes=0;
;;;8383   /*	for(i=0;i<NUMIST;i++)
;;;8384   		{
;;;8385   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8386   		else
;;;8387   			{
;;;8388   			find_succes=0;
;;;8389   			break;
;;;8390   			}
;;;8391   		}*/
;;;8392   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
00575e  f8dfa1c0          LDR      r10,|L1.22816|
005762  2400              MOVS     r4,#0                 ;8381
;;;8393   
;;;8394   	if(find_succes==1)
;;;8395   		{
;;;8396   		uavt_set_stat=uassSTEP2;
005764  f04f0902          MOV      r9,#2
;;;8397   		}
;;;8398   	if(uavt_set_error_cnt)
;;;8399   		{
;;;8400   		uavt_set_error_cnt--;
;;;8401   		if(!uavt_set_error_cnt)
;;;8402   			{
;;;8403   			uavt_set_stat=uassOFF;
;;;8404   			uavt_set_result_stat=uasrsERR;
;;;8405   			avt_error_bps=100;
005768  f04f0b64          MOV      r11,#0x64
00576c  2801              CMP      r0,#1                 ;8370
00576e  d12e              BNE      |L1.22478|
005770  f8980000          LDRB     r0,[r8,#0]            ;8376  ; uavt_set_stat_old
005774  2801              CMP      r0,#1                 ;8376
005776  d002              BEQ      |L1.22398|
005778  f04f003c          MOV      r0,#0x3c              ;8378
00577c  7030              STRB     r0,[r6,#0]            ;8378
                  |L1.22398|
00577e  230a              MOVS     r3,#0xa               ;8381
005780  2200              MOVS     r2,#0                 ;8381
005782  21e6              MOVS     r1,#0xe6              ;8381
005784  20e1              MOVS     r0,#0xe1              ;8381
005786  f7fffffe          BL       mess_send
00578a  f04f0000          MOV      r0,#0                 ;8382
00578e  4965              LDR      r1,|L1.22820|
005790  f9b12000          LDRSH    r2,[r1,#0]            ;8392  ; bps_U
005794  f9ba1000          LDRSH    r1,[r10,#0]           ;8392  ; U_AVT
005798  f1a10301          SUB      r3,r1,#1              ;8392
00579c  429a              CMP      r2,r3                 ;8392
00579e  db04              BLT      |L1.22442|
0057a0  1c49              ADDS     r1,r1,#1              ;8392
0057a2  428a              CMP      r2,r1                 ;8392
0057a4  dc01              BGT      |L1.22442|
0057a6  f04f0001          MOV      r0,#1                 ;8392
                  |L1.22442|
0057aa  2801              CMP      r0,#1                 ;8394
0057ac  d101              BNE      |L1.22450|
0057ae  f8859000          STRB     r9,[r5,#0]            ;8396
                  |L1.22450|
0057b2  7830              LDRB     r0,[r6,#0]            ;8398  ; uavt_set_error_cnt
0057b4  b158              CBZ      r0,|L1.22478|
0057b6  f1a00001          SUB      r0,r0,#1              ;8400
0057ba  b2c0              UXTB     r0,r0                 ;8400
0057bc  7030              STRB     r0,[r6,#0]            ;8400
0057be  b930              CBNZ     r0,|L1.22478|
0057c0  702c              STRB     r4,[r5,#0]            ;8403
0057c2  4859              LDR      r0,|L1.22824|
0057c4  f8809000          STRB     r9,[r0,#0]            ;8404
0057c8  4858              LDR      r0,|L1.22828|
0057ca  f880b000          STRB     r11,[r0,#0]
                  |L1.22478|
;;;8406   			}
;;;8407   		}
;;;8408   	}
;;;8409   if(uavt_set_stat==uassSTEP2)
0057ce  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8410   	{
;;;8411   	char i,find_succes;
;;;8412   
;;;8413   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0057d0  4957              LDR      r1,|L1.22832|
;;;8414   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0057d2  4858              LDR      r0,|L1.22836|
;;;8415   
;;;8416   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8417   		{
;;;8418   		uavt_set_error_cnt=60;
;;;8419   		}
;;;8420   
;;;8421   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8422   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8423   	find_succes=1;
;;;8424   
;;;8425   	for(i=0;i<NUMIST;i++)
;;;8426   		{
;;;8427   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8428   		else
;;;8429   			{
;;;8430   			find_succes=0;
;;;8431   			avt_error_bps=i+1;
;;;8432   			break;
;;;8433   			}
;;;8434   		}
;;;8435   
;;;8436   	if(find_succes==1)
;;;8437   		{
;;;8438   		uavt_set_stat=uassSTEP3;
;;;8439   		uavt_bps_pntr=0;
0057d4  4f58              LDR      r7,|L1.22840|
0057d6  2a02              CMP      r2,#2                 ;8409
0057d8  d002              BEQ      |L1.22496|
;;;8440   		avt_plazma=0;
;;;8441   		}
;;;8442   
;;;8443   	if(uavt_set_error_cnt)
;;;8444   		{
;;;8445   		uavt_set_error_cnt--;
;;;8446   		if(!uavt_set_error_cnt)
;;;8447   			{
;;;8448   			uavt_set_stat=uassOFF;
;;;8449   			uavt_set_result_stat=uasrsERR;
;;;8450   			}
;;;8451   		}
;;;8452   	}
;;;8453   else if(uavt_set_stat==uassSTEP3)
0057da  2a03              CMP      r2,#3
0057dc  d05e              BEQ      |L1.22684|
0057de  e0fb              B        |L1.23000|
                  |L1.22496|
0057e0  f9ba2000          LDRSH    r2,[r10,#0]           ;8413  ; U_AVT
0057e4  f04f0365          MOV      r3,#0x65              ;8413
0057e8  fb02f303          MUL      r3,r2,r3              ;8413
0057ec  fbb3f3fb          UDIV     r3,r3,r11             ;8413
0057f0  468a              MOV      r10,r1                ;8413
0057f2  800b              STRH     r3,[r1,#0]            ;8413
0057f4  eb021142          ADD      r1,r2,r2,LSL #5       ;8414
0057f8  eb010141          ADD      r1,r1,r1,LSL #1       ;8414
0057fc  fbb1f1fb          UDIV     r1,r1,r11             ;8414
005800  4683              MOV      r11,r0                ;8414
005802  8001              STRH     r1,[r0,#0]            ;8414
005804  f8980000          LDRB     r0,[r8,#0]            ;8416  ; uavt_set_stat_old
005808  2802              CMP      r0,#2                 ;8416
00580a  d002              BEQ      |L1.22546|
00580c  f04f003c          MOV      r0,#0x3c              ;8418
005810  7030              STRB     r0,[r6,#0]            ;8418
                  |L1.22546|
005812  230a              MOVS     r3,#0xa               ;8421
005814  21bf              MOVS     r1,#0xbf              ;8421
005816  20be              MOVS     r0,#0xbe              ;8421
005818  f7fffffe          BL       mess_send
00581c  230a              MOVS     r3,#0xa               ;8422
00581e  2200              MOVS     r2,#0                 ;8422
005820  21e6              MOVS     r1,#0xe6              ;8422
005822  20e1              MOVS     r0,#0xe1              ;8422
005824  f7fffffe          BL       mess_send
005828  f04f0201          MOV      r2,#1                 ;8423
00582c  f04f0000          MOV      r0,#0                 ;8425
005830  4943              LDR      r1,|L1.22848|
005832  f9ba3000          LDRSH    r3,[r10,#0]           ;8425
005836  f8dfe104          LDR      lr,|L1.22844|
00583a  f9bbc000          LDRSH    r12,[r11,#0]          ;8427
00583e  f9b1a000          LDRSH    r10,[r1,#0]           ;8425
005842  e00d              B        |L1.22624|
                  |L1.22596|
005844  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8427
005848  eb011100          ADD      r1,r1,r0,LSL #4       ;8427
00584c  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8427
005850  69c9              LDR      r1,[r1,#0x1c]         ;8427
005852  4299              CMP      r1,r3                 ;8427
005854  da09              BGE      |L1.22634|
005856  4561              CMP      r1,r12                ;8427
005858  dd07              BLE      |L1.22634|
00585a  f1000001          ADD      r0,r0,#1              ;8425
00585e  b2c0              UXTB     r0,r0                 ;8425
                  |L1.22624|
005860  4550              CMP      r0,r10                ;8425
005862  dbef              BLT      |L1.22596|
                  |L1.22628|
005864  2a01              CMP      r2,#1                 ;8436
005866  d007              BEQ      |L1.22648|
005868  e00c              B        |L1.22660|
                  |L1.22634|
00586a  f04f0200          MOV      r2,#0                 ;8430
00586e  492f              LDR      r1,|L1.22828|
005870  f1000001          ADD      r0,r0,#1              ;8431
005874  7008              STRB     r0,[r1,#0]            ;8431
005876  e7f5              B        |L1.22628|
                  |L1.22648|
005878  f04f0003          MOV      r0,#3                 ;8438
00587c  7028              STRB     r0,[r5,#0]            ;8438
00587e  703c              STRB     r4,[r7,#0]            ;8439
005880  4830              LDR      r0,|L1.22852|
005882  7004              STRB     r4,[r0,#0]            ;8440
                  |L1.22660|
005884  7830              LDRB     r0,[r6,#0]            ;8443  ; uavt_set_error_cnt
005886  b370              CBZ      r0,|L1.22758|
005888  f1a00001          SUB      r0,r0,#1              ;8445
00588c  b2c0              UXTB     r0,r0                 ;8445
00588e  7030              STRB     r0,[r6,#0]            ;8445
005890  bb48              CBNZ     r0,|L1.22758|
005892  702c              STRB     r4,[r5,#0]            ;8448
005894  4824              LDR      r0,|L1.22824|
005896  f8809000          STRB     r9,[r0,#0]            ;8449
00589a  e09d              B        |L1.23000|
                  |L1.22684|
;;;8454   	{
;;;8455   	char i,find_succes;
;;;8456   
;;;8457   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
00589c  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
0058a0  f04f0365          MOV      r3,#0x65
0058a4  fb02f303          MUL      r3,r2,r3
0058a8  fbb3f3fb          UDIV     r3,r3,r11
0058ac  468a              MOV      r10,r1
0058ae  800b              STRH     r3,[r1,#0]
;;;8458   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0058b0  eb021142          ADD      r1,r2,r2,LSL #5
0058b4  eb010141          ADD      r1,r1,r1,LSL #1
0058b8  fbb1f1fb          UDIV     r1,r1,r11
0058bc  4683              MOV      r11,r0
0058be  8001              STRH     r1,[r0,#0]
;;;8459   	
;;;8460   	if(uavt_set_stat_old!=uavt_set_stat)
0058c0  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
0058c4  2803              CMP      r0,#3
0058c6  d000              BEQ      |L1.22730|
;;;8461   		{
;;;8462   		uavt_bps_pntr=0;
0058c8  703c              STRB     r4,[r7,#0]
                  |L1.22730|
;;;8463   		}
;;;8464   
;;;8465   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
0058ca  230a              MOVS     r3,#0xa
0058cc  21bf              MOVS     r1,#0xbf
0058ce  20be              MOVS     r0,#0xbe
0058d0  f7fffffe          BL       mess_send
;;;8466   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
0058d4  230a              MOVS     r3,#0xa
0058d6  2200              MOVS     r2,#0
0058d8  21e6              MOVS     r1,#0xe6
0058da  20e1              MOVS     r0,#0xe1
0058dc  f7fffffe          BL       mess_send
;;;8467   
;;;8468   	find_succes=1;
0058e0  f04f0601          MOV      r6,#1
;;;8469   	for(i=0;i<NUMIST;i++)
0058e4  e030              B        |L1.22856|
                  |L1.22758|
0058e6  e077              B        |L1.23000|
                  |L1.22760|
                          DCD      BAT_C_POINT_5
                  |L1.22764|
                          DCD      BAT_C_POINT_10
                  |L1.22768|
                          DCD      BAT_C_POINT_20
                  |L1.22772|
                          DCD      BAT_K_OLD
                  |L1.22776|
                          DCD      0xfff0bdc0
                  |L1.22780|
                          DCD      Ib_ips_termokompensat
                  |L1.22784|
                          DCD      IKB
                  |L1.22788|
                          DCD      bat
                  |L1.22792|
                          DCD      out_U
                  |L1.22796|
                          DCD      u_necc_up
                  |L1.22800|
                          DCD      u_necc_dn
                  |L1.22804|
                          DCD      uavt_set_stat
                  |L1.22808|
                          DCD      uavt_set_error_cnt
                  |L1.22812|
                          DCD      uavt_set_stat_old
                  |L1.22816|
                          DCD      U_AVT
                  |L1.22820|
                          DCD      bps_U
                  |L1.22824|
                          DCD      uavt_set_result_stat
                  |L1.22828|
                          DCD      avt_error_bps
                  |L1.22832|
                          DCD      u_max_temp
                  |L1.22836|
                          DCD      u_min_temp
                  |L1.22840|
                          DCD      uavt_bps_pntr
                  |L1.22844|
                          DCD      bps
                  |L1.22848|
                          DCD      NUMIST
                  |L1.22852|
                          DCD      avt_plazma
                  |L1.22856|
005948  f04f0000          MOV      r0,#0
00594c  f8df942c          LDR      r9,|L1.23932|
005950  f9ba2000          LDRSH    r2,[r10,#0]
005954  f8dfc420          LDR      r12,|L1.23928|
005958  f9bb3000          LDRSH    r3,[r11,#0]           ;8427
00595c  f9b9a000          LDRSH    r10,[r9,#0]           ;8425
005960  e00d              B        |L1.22910|
                  |L1.22882|
;;;8470   		{
;;;8471   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005962  eb0001c0          ADD      r1,r0,r0,LSL #3
005966  eb011100          ADD      r1,r1,r0,LSL #4
00596a  eb0c0181          ADD      r1,r12,r1,LSL #2
00596e  69c9              LDR      r1,[r1,#0x1c]
005970  4291              CMP      r1,r2
005972  da0f              BGE      |L1.22932|
005974  4299              CMP      r1,r3
005976  dd0d              BLE      |L1.22932|
005978  f1000001          ADD      r0,r0,#1              ;8469
00597c  b2c0              UXTB     r0,r0                 ;8469
                  |L1.22910|
00597e  4550              CMP      r0,r10                ;8469
005980  dbef              BLT      |L1.22882|
                  |L1.22914|
;;;8472   		else
;;;8473   			{
;;;8474   			find_succes=0;
;;;8475   			break;
;;;8476   			}
;;;8477   		}
;;;8478   
;;;8479   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005982  20d7              MOVS     r0,#0xd7
005984  f7fffffe          BL       mess_find
005988  b1a0              CBZ      r0,|L1.22964|
00598a  48fd              LDR      r0,|L1.23936|
00598c  6800              LDR      r0,[r0,#0]  ; mess_data
00598e  28d9              CMP      r0,#0xd9
005990  d003              BEQ      |L1.22938|
005992  e00f              B        |L1.22964|
                  |L1.22932|
005994  f04f0600          MOV      r6,#0                 ;8474
005998  e7f3              B        |L1.22914|
                  |L1.22938|
;;;8480   		{
;;;8481   		if(++uavt_bps_pntr>=NUMIST)
00599a  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
00599c  1c40              ADDS     r0,r0,#1
00599e  b2c0              UXTB     r0,r0
0059a0  7038              STRB     r0,[r7,#0]
0059a2  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
0059a6  4288              CMP      r0,r1
0059a8  db04              BLT      |L1.22964|
;;;8482   			{
;;;8483   			uavt_set_stat=uassOFF;
0059aa  702c              STRB     r4,[r5,#0]
;;;8484   			uavt_set_result_stat=uasrsSUCCESS;
0059ac  49f5              LDR      r1,|L1.23940|
0059ae  f04f0003          MOV      r0,#3
0059b2  7008              STRB     r0,[r1,#0]
                  |L1.22964|
;;;8485   			}
;;;8486   		//uavt_bps_pntr++;
;;;8487   		//if()
;;;8488   		}
;;;8489   	if(find_succes==1)
0059b4  2e01              CMP      r6,#1
0059b6  d10f              BNE      |L1.23000|
;;;8490   		{
;;;8491   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
0059b8  20ee              MOVS     r0,#0xee
0059ba  e9cd0400          STRD     r0,r4,[sp,#0]
0059be  9402              STR      r4,[sp,#8]
0059c0  9403              STR      r4,[sp,#0xc]
0059c2  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
0059c4  4603              MOV      r3,r0
0059c6  2216              MOVS     r2,#0x16
0059c8  4608              MOV      r0,r1
0059ca  f7fffffe          BL       mcp2515_transmit
;;;8492   		avt_plazma++;
0059ce  48ee              LDR      r0,|L1.23944|
0059d0  7801              LDRB     r1,[r0,#0]  ; avt_plazma
0059d2  f1010101          ADD      r1,r1,#1
0059d6  7001              STRB     r1,[r0,#0]
                  |L1.23000|
;;;8493   		}
;;;8494   	}
;;;8495   
;;;8496   
;;;8497   
;;;8498   uavt_set_stat_old=uavt_set_stat;
0059d8  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
0059da  f8880000          STRB     r0,[r8,#0]
;;;8499   
;;;8500   }
0059de  e8bd9fff          POP      {r0-r12,pc}
;;;8501   
                          ENDP

                  u_necc_hndl PROC
;;;8576   //-----------------------------------------------
;;;8577   void u_necc_hndl(void)
0059e2  b5f8              PUSH     {r3-r7,lr}
;;;8578   {
;;;8579   signed long temp_L;
;;;8580   signed long temp_SL;
;;;8581   //signed short temp_SS;
;;;8582   
;;;8583   //char i;
;;;8584   
;;;8585   //temp_SS=0;
;;;8586   signed short t[2];
;;;8587   
;;;8588   
;;;8589   
;;;8590   
;;;8591   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8592   
;;;8593   if(!TERMOKOMPENS)
0059e4  48e9              LDR      r0,|L1.23948|
;;;8594   	{
;;;8595   	//u_necc=U0B;
;;;8596   	u_necc=UB20;
;;;8597   	}
;;;8598   else
;;;8599   	{
;;;8600   	if(ND_EXT[0])t[0]=20;
;;;8601   	else t[0]=t_ext[0];
;;;8602   
;;;8603   	mat_temper=t[0];
;;;8604   			
;;;8605   	if(mat_temper<0)temp_SL=UB0; 
;;;8606   	else 
;;;8607   		{
;;;8608   		if(mat_temper>40)mat_temper=40; 
;;;8609   		temp_SL=(UB20-UB0)*10;
;;;8610   		temp_SL*=mat_temper;
;;;8611   		temp_SL/=200;
;;;8612   		temp_SL+=UB0;
;;;8613   		}
;;;8614   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
0059e6  4dec              LDR      r5,|L1.23960|
0059e8  4cec              LDR      r4,|L1.23964|
0059ea  8801              LDRH     r1,[r0,#0]            ;8593  ; TERMOKOMPENS
0059ec  48e8              LDR      r0,|L1.23952|
0059ee  f9b03000          LDRSH    r3,[r0,#0]            ;8596
;;;8615   		{
;;;8616   		temp_SL=UVZ;
0059f2  48e8              LDR      r0,|L1.23956|
0059f4  f9b02000          LDRSH    r2,[r0,#0]
0059f8  b139              CBZ      r1,|L1.23050|
0059fa  48e9              LDR      r0,|L1.23968|
0059fc  7800              LDRB     r0,[r0,#0]            ;8600  ; ND_EXT
0059fe  b130              CBZ      r0,|L1.23054|
005a00  f04f0014          MOV      r0,#0x14              ;8600
005a04  f8ad0000          STRH     r0,[sp,#0]            ;8600
005a08  e005              B        |L1.23062|
                  |L1.23050|
005a0a  8023              STRH     r3,[r4,#0]            ;8596
005a0c  e02c              B        |L1.23144|
                  |L1.23054|
005a0e  48e5              LDR      r0,|L1.23972|
005a10  8800              LDRH     r0,[r0,#0]            ;8601  ; t_ext
005a12  f8ad0000          STRH     r0,[sp,#0]            ;8601
                  |L1.23062|
005a16  4ee4              LDR      r6,|L1.23976|
005a18  f9bd1000          LDRSH    r1,[sp,#0]            ;8603
005a1c  6031              STR      r1,[r6,#0]            ;8603  ; mat_temper
005a1e  48e3              LDR      r0,|L1.23980|
005a20  2900              CMP      r1,#0                 ;8605
005a22  f9b00000          LDRSH    r0,[r0,#0]            ;8605
005a26  db12              BLT      |L1.23118|
005a28  2928              CMP      r1,#0x28              ;8608
005a2a  dd02              BLE      |L1.23090|
005a2c  f04f0128          MOV      r1,#0x28              ;8608
005a30  6031              STR      r1,[r6,#0]            ;8608  ; mat_temper
                  |L1.23090|
005a32  eba30100          SUB      r1,r3,r0              ;8609
005a36  eb010181          ADD      r1,r1,r1,LSL #2       ;8609
005a3a  ea4f0141          LSL      r1,r1,#1              ;8609
005a3e  6833              LDR      r3,[r6,#0]            ;8610  ; mat_temper
005a40  fb01f103          MUL      r1,r1,r3              ;8610
005a44  f04f03c8          MOV      r3,#0xc8              ;8611
005a48  fb91f1f3          SDIV     r1,r1,r3              ;8611
005a4c  4408              ADD      r0,r0,r1              ;8612
                  |L1.23118|
005a4e  f8951023          LDRB     r1,[r5,#0x23]         ;8614  ; spc_stat
005a52  2902              CMP      r1,#2                 ;8614
005a54  d107              BNE      |L1.23142|
005a56  49d6              LDR      r1,|L1.23984|
005a58  7809              LDRB     r1,[r1,#0]            ;8614  ; sk_stat
005a5a  2901              CMP      r1,#1                 ;8614
005a5c  d002              BEQ      |L1.23140|
005a5e  49d5              LDR      r1,|L1.23988|
005a60  8809              LDRH     r1,[r1,#0]            ;8614  ; VZ_CH_VENT_BLOK
005a62  b901              CBNZ     r1,|L1.23142|
                  |L1.23140|
005a64  4610              MOV      r0,r2
                  |L1.23142|
;;;8617   		}
;;;8618   	u_necc=(unsigned int)temp_SL;
005a66  8020              STRH     r0,[r4,#0]
                  |L1.23144|
;;;8619   	///u_necc=3456;
;;;8620   	}  
;;;8621   
;;;8622   //u_necc=2355;
;;;8623   
;;;8624   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005a68  48d3              LDR      r0,|L1.23992|
005a6a  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005a6c  b918              CBNZ     r0,|L1.23158|
005a6e  48d3              LDR      r0,|L1.23996|
005a70  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005a72  2802              CMP      r0,#2
005a74  d102              BNE      |L1.23164|
                  |L1.23158|
;;;8625   	{
;;;8626   	u_necc=speedChrgVolt;
005a76  48d2              LDR      r0,|L1.24000|
005a78  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005a7a  8020              STRH     r0,[r4,#0]
                  |L1.23164|
;;;8627   	}
;;;8628   if(hv_vz_stat==hvsWRK)
005a7c  48d1              LDR      r0,|L1.24004|
005a7e  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005a80  2805              CMP      r0,#5
005a82  d100              BNE      |L1.23174|
;;;8629   	{
;;;8630   	u_necc=UVZ;
005a84  8022              STRH     r2,[r4,#0]
                  |L1.23174|
;;;8631   	}
;;;8632   if(vz1_stat==vz1sWRK)
005a86  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005a88  280a              CMP      r0,#0xa
005a8a  d102              BNE      |L1.23186|
;;;8633   	{
;;;8634   	u_necc=UZ_U;
005a8c  48ce              LDR      r0,|L1.24008|
005a8e  8800              LDRH     r0,[r0,#0]  ; UZ_U
005a90  8020              STRH     r0,[r4,#0]
                  |L1.23186|
;;;8635   	}
;;;8636   if(vz2_stat==vz2sWRK1)
005a92  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005a94  280a              CMP      r0,#0xa
005a96  d102              BNE      |L1.23198|
;;;8637   	{
;;;8638   	u_necc=FZ_U1;
005a98  49cc              LDR      r1,|L1.24012|
005a9a  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005a9c  8021              STRH     r1,[r4,#0]
                  |L1.23198|
;;;8639   	}
;;;8640   if(vz2_stat==vz2sWRK2)
005a9e  280b              CMP      r0,#0xb
005aa0  d102              BNE      |L1.23208|
;;;8641   	{
;;;8642   	u_necc=FZ_U2;
005aa2  48cb              LDR      r0,|L1.24016|
005aa4  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005aa6  8020              STRH     r0,[r4,#0]
                  |L1.23208|
;;;8643   	}
;;;8644   
;;;8645   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005aa8  48ca              LDR      r0,|L1.24020|
005aaa  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005aac  2801              CMP      r0,#1
005aae  d001              BEQ      |L1.23220|
005ab0  2802              CMP      r0,#2
005ab2  d102              BNE      |L1.23226|
                  |L1.23220|
;;;8646   	{
;;;8647   	u_necc=U_AVT;
005ab4  48c8              LDR      r0,|L1.24024|
005ab6  8800              LDRH     r0,[r0,#0]  ; U_AVT
005ab8  8020              STRH     r0,[r4,#0]
                  |L1.23226|
;;;8648   	}
;;;8649   
;;;8650   if(mess_find_unvol(MESS2UNECC_HNDL))
005aba  20be              MOVS     r0,#0xbe
005abc  f7fffffe          BL       mess_find_unvol
005ac0  b128              CBZ      r0,|L1.23246|
;;;8651   	{		
;;;8652   	if(mess_data[0]==PARAM_UNECC_SET)
005ac2  48af              LDR      r0,|L1.23936|
005ac4  6801              LDR      r1,[r0,#0]  ; mess_data
005ac6  29bf              CMP      r1,#0xbf
005ac8  d101              BNE      |L1.23246|
;;;8653   		{
;;;8654   		u_necc=mess_data[1];
005aca  6840              LDR      r0,[r0,#4]  ; mess_data
005acc  8020              STRH     r0,[r4,#0]
                  |L1.23246|
;;;8655   		}		
;;;8656   	} 
;;;8657   
;;;8658   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8659   #endif
;;;8660   
;;;8661   
;;;8662   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8663   
;;;8664   #ifndef UKU_TELECORE2015
;;;8665   #ifndef UKU_TELECORE2017
;;;8666   if(unh_cnt0<10)
;;;8667   	{
;;;8668   	unh_cnt0++;
;;;8669   	if(unh_cnt0>=10)
;;;8670   		{
;;;8671   		unh_cnt0=0;
;;;8672   		b1Hz_unh=1;
;;;8673   		}
;;;8674   	}
;;;8675   
;;;8676   if(unh_cnt1<5)
;;;8677   	{
;;;8678   	unh_cnt1++;
;;;8679   	if(unh_cnt1==5)
;;;8680   		{
;;;8681   		unh_cnt1=0;
;;;8682   //		b2Hz_unh=1;
;;;8683   		}
;;;8684   	} 
;;;8685   
;;;8686   
;;;8687   
;;;8688   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8689   	{		
;;;8690   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8691   		{
;;;8692   		u_necc=mess_data[1];
;;;8693   		}		
;;;8694   	}
;;;8695   
;;;8696   
;;;8697   else if(b1Hz_unh)
;;;8698   	{
;;;8699   	
;;;8700   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8701   		{
;;;8702   		
;;;8703   		u_necc=U0B;
;;;8704   		#ifdef IPS_SGEP_GAZPROM
;;;8705   		u_necc=UB0;
;;;8706   		#endif
;;;8707   		}
;;;8708   	else 
;;;8709   		{
;;;8710   		if(BAT_TYPE==0) //если батарея обычная
;;;8711   			{
;;;8712   			for(i=0;i<2;i++)
;;;8713   				{
;;;8714   				if(BAT_IS_ON[i]==bisON)
;;;8715   					{
;;;8716   					if(bat[i]._nd)t[i]=20;
;;;8717   					else t[i]=bat[i]._Tb;
;;;8718   					}
;;;8719   				else
;;;8720   					{
;;;8721   					t[i]=-20;
;;;8722   					}
;;;8723   				}
;;;8724   			if(t[0]>t[1])mat_temper=t[0];
;;;8725   			else mat_temper=t[1];
;;;8726   			
;;;8727   		
;;;8728   			if(mat_temper<0)temp_SL=UB0; 
;;;8729   			else 
;;;8730   				{
;;;8731   				if(mat_temper>40)mat_temper=40; 
;;;8732   				temp_SL=(UB20-UB0)*10;
;;;8733   				temp_SL*=mat_temper;
;;;8734   				temp_SL/=200;
;;;8735   				temp_SL+=UB0;
;;;8736   				}
;;;8737   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8738   				{
;;;8739   				temp_SL=UVZ;
;;;8740   				}
;;;8741   			u_necc=(unsigned int)temp_SL;
;;;8742   			}
;;;8743   		else if(BAT_TYPE==1) //если батарея китайская
;;;8744   			{
;;;8745   			u_necc=U0B;
;;;8746   					
;;;8747   			u_necc=bat[0]._Ub+10;
;;;8748   
;;;8749   			
;;;8750   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8751   				{
;;;8752   				u_necc=UVZ;
;;;8753   				}
;;;8754   			if(u_necc>=UB0) u_necc=UB0;
;;;8755   			if(u_necc>=UB20) u_necc=UB20;
;;;8756   			}
;;;8757   		}  
;;;8758   	}
;;;8759   #endif
;;;8760   #endif
;;;8761   
;;;8762   #ifdef UKU_TELECORE2015
;;;8763   
;;;8764   if(unh_cnt0<10)
;;;8765   	{
;;;8766   	unh_cnt0++;
;;;8767   	if(unh_cnt0>=10)
;;;8768   		{
;;;8769   		unh_cnt0=0;
;;;8770   		b1Hz_unh=1;
;;;8771   		}
;;;8772   	}
;;;8773   
;;;8774   if(unh_cnt1<5)
;;;8775   	{
;;;8776   	unh_cnt1++;
;;;8777   	if(unh_cnt1==5)
;;;8778   		{
;;;8779   		unh_cnt1=0;
;;;8780   //		b2Hz_unh=1;
;;;8781   		}
;;;8782   	} 
;;;8783   
;;;8784   
;;;8785   
;;;8786   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8787   	{		
;;;8788   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8789   		{
;;;8790   		u_necc=mess_data[1];
;;;8791   		}		
;;;8792   	}
;;;8793   
;;;8794   
;;;8795   else if(b1Hz_unh)
;;;8796   	{
;;;8797   	b1Hz_unh=0;
;;;8798   
;;;8799   	if(BAT_TYPE==0)
;;;8800   		{
;;;8801   		if(bat[0]._nd)mat_temper=20;
;;;8802   		else mat_temper=bat[0]._Tb;
;;;8803   
;;;8804   			
;;;8805   		if(mat_temper<0)temp_SL=UB0; 
;;;8806   		else 
;;;8807   			{
;;;8808   			if(mat_temper>40)mat_temper=40; 
;;;8809   			temp_SL=(UB20-UB0)*10;
;;;8810   			temp_SL*=mat_temper;
;;;8811   			temp_SL/=200;
;;;8812   			temp_SL+=UB0;
;;;8813   			}
;;;8814   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8815   			{
;;;8816   			temp_SL=UVZ;
;;;8817   			}
;;;8818   		u_necc=(unsigned int)temp_SL;
;;;8819   	///u_necc=3456;
;;;8820   		}
;;;8821   	else if(BAT_TYPE==1)
;;;8822   		{
;;;8823   		
;;;8824   		gran(&DU_LI_BAT,1,30);
;;;8825   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8826   		gran(&u_necc,0,UB0);
;;;8827   		gran(&u_necc,0,UB20);
;;;8828   		gran(&u_necc,0,540);		
;;;8829   
;;;8830   
;;;8831   		if(li_bat._batStat!=bsOK)
;;;8832   			{
;;;8833   			u_necc=U0B;
;;;8834   			}
;;;8835   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8836   			{
;;;8837   			u_necc=UVZ;
;;;8838   			}
;;;8839   		/* 
;;;8840   		u_necc=U0B;
;;;8841   		
;;;8842   
;;;8843   	
;;;8844   		u_necc=UB0;
;;;8845   		u_necc=li_bat._Ub+10;
;;;8846   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8847   			{
;;;8848   			lakb_error_cnt++;
;;;8849   			if(lakb_error_cnt>=30)
;;;8850   				{
;;;8851   				lakb_error_cnt=30;
;;;8852   				u_necc=U0B;
;;;8853   				}
;;;8854   			}
;;;8855   		else lakb_error_cnt=0;*/
;;;8856   		}
;;;8857   	else if(BAT_TYPE==2)
;;;8858   		{
;;;8859   		u_necc=U0B;
;;;8860   		
;;;8861   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8862   			{
;;;8863   			u_necc=UVZ;
;;;8864   			}
;;;8865   	
;;;8866   		u_necc=UB0;
;;;8867   		}
;;;8868   
;;;8869   	else if(BAT_TYPE==3)
;;;8870   		{
;;;8871   		u_necc=U0B;
;;;8872   		
;;;8873   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8874   			{
;;;8875   			u_necc=UVZ;
;;;8876   			}
;;;8877   
;;;8878   		gran(&DU_LI_BAT,1,30);
;;;8879   
;;;8880   
;;;8881   		if(lakbNotErrorNum==0)
;;;8882   			{
;;;8883   			u_necc=U0B;
;;;8884   			}
;;;8885   		else 
;;;8886   			{
;;;8887   			signed short i;
;;;8888   			//signed short u_necc_max;
;;;8889   			//u_necc_max=0;
;;;8890   			char soc_flag=0;
;;;8891   
;;;8892   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8893   				{
;;;8894   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8895   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8896   				}
;;;8897   
;;;8898   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8899   			}
;;;8900   		gran(&u_necc,0,UB0);
;;;8901   		//gran(&u_necc,0,UB20);
;;;8902   		gran(&u_necc,0,540);
;;;8903   		}
;;;8904   	}
;;;8905   
;;;8906   #endif 
;;;8907   
;;;8908   #ifdef UKU_TELECORE2017
;;;8909   
;;;8910   if(unh_cnt0<10)
;;;8911   	{
;;;8912   	unh_cnt0++;
;;;8913   	if(unh_cnt0>=10)
;;;8914   		{
;;;8915   		unh_cnt0=0;
;;;8916   		b1Hz_unh=1;
;;;8917   		}
;;;8918   	}
;;;8919   
;;;8920   if(unh_cnt1<5)
;;;8921   	{
;;;8922   	unh_cnt1++;
;;;8923   	if(unh_cnt1==5)
;;;8924   		{
;;;8925   		unh_cnt1=0;
;;;8926   //		b2Hz_unh=1;
;;;8927   		}
;;;8928   	} 
;;;8929   
;;;8930   
;;;8931   
;;;8932   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8933   	{		
;;;8934   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8935   		{
;;;8936   		u_necc=mess_data[1];
;;;8937   		}		
;;;8938   	}
;;;8939   
;;;8940   
;;;8941   else if(b1Hz_unh)
;;;8942   	{
;;;8943   	b1Hz_unh=0;
;;;8944   
;;;8945   	if(BAT_TYPE==0)
;;;8946   		{
;;;8947   		if(bat[0]._nd)mat_temper=20;
;;;8948   		else mat_temper=bat[0]._Tb;
;;;8949   
;;;8950   			
;;;8951   		if(mat_temper<0)temp_SL=UB0; 
;;;8952   		else 
;;;8953   			{
;;;8954   			if(mat_temper>40)mat_temper=40; 
;;;8955   			temp_SL=(UB20-UB0)*10;
;;;8956   			temp_SL*=mat_temper;
;;;8957   			temp_SL/=200;
;;;8958   			temp_SL+=UB0;
;;;8959   			}
;;;8960   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8961   			{
;;;8962   			temp_SL=UVZ;
;;;8963   			}
;;;8964   		u_necc=(unsigned int)temp_SL;
;;;8965   	///u_necc=3456;
;;;8966   		}
;;;8967   	else if(BAT_TYPE==1)
;;;8968   		{
;;;8969   		
;;;8970   		gran(&DU_LI_BAT,1,30);
;;;8971   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8972   		gran(&u_necc,0,UB0);
;;;8973   		gran(&u_necc,0,UB20);
;;;8974   		gran(&u_necc,0,540);		
;;;8975   
;;;8976   
;;;8977   		if(li_bat._batStat!=bsOK)
;;;8978   			{
;;;8979   			u_necc=U0B;
;;;8980   			}
;;;8981   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8982   			{
;;;8983   			u_necc=UVZ;
;;;8984   			}
;;;8985   		}
;;;8986   	else if(BAT_TYPE==2)
;;;8987   		{
;;;8988   		u_necc=U0B;
;;;8989   		
;;;8990   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8991   			{
;;;8992   			u_necc=UVZ;
;;;8993   			}
;;;8994   	
;;;8995   		u_necc=UB0;
;;;8996   		}
;;;8997   
;;;8998   	else if(BAT_TYPE==3)
;;;8999   		{
;;;9000   		u_necc=U0B;
;;;9001   		
;;;9002   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9003   			{
;;;9004   			u_necc=UVZ;
;;;9005   			}
;;;9006   
;;;9007   		gran(&DU_LI_BAT,1,30);
;;;9008   
;;;9009   
;;;9010   		if(lakbNotErrorNum==0)
;;;9011   			{
;;;9012   			u_necc=U0B;
;;;9013   			}
;;;9014   		else 
;;;9015   			{
;;;9016   			signed short i;
;;;9017   			//signed short u_necc_max;
;;;9018   			//u_necc_max=0;
;;;9019   			char soc_flag=0;
;;;9020   
;;;9021   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9022   				{
;;;9023   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9024   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9025   				}
;;;9026   
;;;9027   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9028   			}
;;;9029   		gran(&u_necc,0,UB0);
;;;9030   		//gran(&u_necc,0,UB20);
;;;9031   		gran(&u_necc,0,540);
;;;9032   		}
;;;9033   	}
;;;9034   
;;;9035   #endif 
;;;9036   //u_necc=2356;
;;;9037   
;;;9038   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9039   	{
;;;9040   	u_necc=speedChrgVolt;
;;;9041   	}
;;;9042   #endif//gran(&u_necc,400,UMAX);
;;;9043   
;;;9044   
;;;9045   
;;;9046   temp_L=(signed long) u_necc;
005ace  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9047   temp_L*=98L;
005ad2  f04f0162          MOV      r1,#0x62
005ad6  fb00f101          MUL      r1,r0,r1
;;;9048   temp_L/=100L;
005ada  f04f0264          MOV      r2,#0x64
005ade  fb91f1f2          SDIV     r1,r1,r2
;;;9049   u_necc_dn=(signed short)temp_L;
005ae2  4bbe              LDR      r3,|L1.24028|
005ae4  8019              STRH     r1,[r3,#0]
;;;9050   
;;;9051   temp_L=(signed long) u_necc;
;;;9052   temp_L*=102L;
005ae6  f04f0166          MOV      r1,#0x66
005aea  fb00f001          MUL      r0,r0,r1
;;;9053   temp_L/=100L;
005aee  fb90f0f2          SDIV     r0,r0,r2
;;;9054   u_necc_up=(signed short)temp_L;
005af2  49bb              LDR      r1,|L1.24032|
005af4  8008              STRH     r0,[r1,#0]
;;;9055   /*
;;;9056   #ifdef IPS_SGEP_GAZPROM
;;;9057   u_necc=248;
;;;9058   #endif */
;;;9059   }
005af6  bdf8              POP      {r3-r7,pc}
;;;9060   
                          ENDP

                  num_necc_hndl PROC
;;;9062   //-----------------------------------------------
;;;9063   void num_necc_hndl(void)
005af8  e92d41f0          PUSH     {r4-r8,lr}
;;;9064   {
;;;9065   
;;;9066   static short num_necc_block_cnt;
;;;9067   if(num_necc_block_cnt) num_necc_block_cnt--;
005afc  4ca6              LDR      r4,|L1.23960|
005afe  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005b02  b110              CBZ      r0,|L1.23306|
005b04  f1a00001          SUB      r0,r0,#1
005b08  8720              STRH     r0,[r4,#0x38]
                  |L1.23306|
;;;9068   
;;;9069   Isumm_=Isumm;
005b0a  48b6              LDR      r0,|L1.24036|
005b0c  4db6              LDR      r5,|L1.24040|
005b0e  8800              LDRH     r0,[r0,#0]  ; Isumm
005b10  8028              STRH     r0,[r5,#0]
;;;9070   
;;;9071   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005b12  4eb6              LDR      r6,|L1.24044|
005b14  270a              MOVS     r7,#0xa
005b16  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005b1a  2800              CMP      r0,#0
005b1c  da06              BGE      |L1.23340|
005b1e  f7fffffe          BL       abs
005b22  fb90f0f7          SDIV     r0,r0,r7
005b26  8829              LDRH     r1,[r5,#0]  ; Isumm_
005b28  4408              ADD      r0,r0,r1
005b2a  8028              STRH     r0,[r5,#0]
                  |L1.23340|
;;;9072   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005b2c  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
005b30  2800              CMP      r0,#0
005b32  da06              BGE      |L1.23362|
005b34  f7fffffe          BL       abs
005b38  fb90f0f7          SDIV     r0,r0,r7
005b3c  8829              LDRH     r1,[r5,#0]  ; Isumm_
005b3e  4408              ADD      r0,r0,r1
005b40  8028              STRH     r0,[r5,#0]
                  |L1.23362|
;;;9073   
;;;9074   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005b42  49ab              LDR      r1,|L1.24048|
005b44  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005b48  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005b4c  fb90f1f1          SDIV     r1,r0,r1
005b50  f1010101          ADD      r1,r1,#1
005b54  b2c9              UXTB     r1,r1
005b56  77e1              STRB     r1,[r4,#0x1f]
;;;9075   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9076   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9077   
;;;9078   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005b58  4aa6              LDR      r2,|L1.24052|
005b5a  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005b5e  fb90f0f2          SDIV     r0,r0,r2
005b62  f1000001          ADD      r0,r0,#1
005b66  b2c2              UXTB     r2,r0
005b68  f8842020          STRB     r2,[r4,#0x20]
;;;9079   
;;;9080   if(num_necc_up>num_necc)
005b6c  48a2              LDR      r0,|L1.24056|
;;;9081   	{
;;;9082   	num_necc=num_necc_up;
;;;9083   	num_necc_block_cnt=60;
005b6e  f04f053c          MOV      r5,#0x3c
005b72  f9b03000          LDRSH    r3,[r0,#0]            ;9080  ; num_necc
005b76  4299              CMP      r1,r3                 ;9080
005b78  dd02              BLE      |L1.23424|
005b7a  8001              STRH     r1,[r0,#0]            ;9082
005b7c  8725              STRH     r5,[r4,#0x38]
005b7e  e005              B        |L1.23436|
                  |L1.23424|
;;;9084   	}
;;;9085   else if(num_necc_down<num_necc)
005b80  429a              CMP      r2,r3
005b82  da03              BGE      |L1.23436|
;;;9086   	{
;;;9087   	if(!num_necc_block_cnt)
005b84  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005b86  b909              CBNZ     r1,|L1.23436|
;;;9088   		{
;;;9089   		num_necc=num_necc_down;
005b88  8002              STRH     r2,[r0,#0]
;;;9090   		num_necc_block_cnt=60;
005b8a  8725              STRH     r5,[r4,#0x38]
                  |L1.23436|
;;;9091   		}
;;;9092   	}
;;;9093   
;;;9094   if(PAR) num_necc=NUMIST;
005b8c  499b              LDR      r1,|L1.24060|
005b8e  880a              LDRH     r2,[r1,#0]  ; PAR
005b90  497a              LDR      r1,|L1.23932|
005b92  b10a              CBZ      r2,|L1.23448|
005b94  880a              LDRH     r2,[r1,#0]  ; NUMIST
005b96  8002              STRH     r2,[r0,#0]
                  |L1.23448|
;;;9095   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9096   if(bPARALLEL) num_necc=NUMIST;
005b98  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005b9c  b10a              CBZ      r2,|L1.23458|
005b9e  880a              LDRH     r2,[r1,#0]  ; NUMIST
005ba0  8002              STRH     r2,[r0,#0]
                  |L1.23458|
;;;9097   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005ba2  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005ba4  2a0a              CMP      r2,#0xa
005ba6  d101              BNE      |L1.23468|
005ba8  880a              LDRH     r2,[r1,#0]  ; NUMIST
005baa  8002              STRH     r2,[r0,#0]
                  |L1.23468|
;;;9098   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005bac  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005bae  2a0a              CMP      r2,#0xa
005bb0  d001              BEQ      |L1.23478|
005bb2  2a0b              CMP      r2,#0xb
005bb4  d101              BNE      |L1.23482|
                  |L1.23478|
005bb6  880a              LDRH     r2,[r1,#0]  ; NUMIST
005bb8  8002              STRH     r2,[r0,#0]
                  |L1.23482|
;;;9099   #endif
;;;9100   
;;;9101   gran(&num_necc,1,NUMIST);
005bba  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005bbe  e8bd41f0          POP      {r4-r8,lr}
005bc2  2101              MOVS     r1,#1
005bc4  488c              LDR      r0,|L1.24056|
005bc6  f7ffbffe          B.W      gran
;;;9102   
;;;9103   }
;;;9104   
                          ENDP

                  cntrl_hndl PROC
;;;9107   //-----------------------------------------------
;;;9108   void cntrl_hndl(void)
005bca  e92d5ff0          PUSH     {r4-r12,lr}
;;;9109   {
;;;9110   
;;;9111   
;;;9112   
;;;9113   IZMAX_=IZMAX;
005bce  488c              LDR      r0,|L1.24064|
005bd0  4c71              LDR      r4,|L1.23960|
005bd2  8800              LDRH     r0,[r0,#0]  ; IZMAX
005bd4  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9114   
;;;9115   //cntrl_hndl_plazma=10;
;;;9116   
;;;9117   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005bd8  4877              LDR      r0,|L1.23992|
005bda  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005bdc  b918              CBNZ     r0,|L1.23526|
005bde  4877              LDR      r0,|L1.23996|
005be0  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005be2  2802              CMP      r0,#2
005be4  d103              BNE      |L1.23534|
                  |L1.23526|
005be6  4887              LDR      r0,|L1.24068|
005be8  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005bea  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23534|
;;;9118   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005bee  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005bf0  280a              CMP      r0,#0xa
005bf2  d103              BNE      |L1.23548|
005bf4  4884              LDR      r0,|L1.24072|
005bf6  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005bf8  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23548|
;;;9119   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005bfc  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005bfe  280a              CMP      r0,#0xa
005c00  d103              BNE      |L1.23562|
005c02  4982              LDR      r1,|L1.24076|
005c04  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005c06  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.23562|
;;;9120   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005c0a  280b              CMP      r0,#0xb
005c0c  d103              BNE      |L1.23574|
005c0e  4880              LDR      r0,|L1.24080|
005c10  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005c12  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23574|
;;;9121   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9122   
;;;9123   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005c16  f9b40074          LDRSH    r0,[r4,#0x74]  ; cntrl_stat_blok_cnt
005c1a  b118              CBZ      r0,|L1.23588|
005c1c  f1a00001          SUB      r0,r0,#1
005c20  f8a40074          STRH     r0,[r4,#0x74]
                  |L1.23588|
;;;9124   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005c24  f9b40076          LDRSH    r0,[r4,#0x76]  ; cntrl_stat_blok_cnt_
005c28  b118              CBZ      r0,|L1.23602|
005c2a  f1a00001          SUB      r0,r0,#1
005c2e  f8a40076          STRH     r0,[r4,#0x76]
                  |L1.23602|
;;;9125   
;;;9126   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005c32  486e              LDR      r0,|L1.24044|
005c34  f04f080a          MOV      r8,#0xa               ;9118
005c38  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005c3c  0789              LSLS     r1,r1,#30
005c3e  d103              BNE      |L1.23624|
005c40  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005c44  0780              LSLS     r0,r0,#30
005c46  d005              BEQ      |L1.23636|
                  |L1.23624|
005c48  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005c4c  fbb0f0f8          UDIV     r0,r0,r8
005c50  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23636|
;;;9127   
;;;9128   
;;;9129   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9130   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005c54  486f              LDR      r0,|L1.24084|
005c56  2601              MOVS     r6,#1
005c58  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005c5c  1e49              SUBS     r1,r1,#1
005c5e  2905              CMP      r1,#5
005c60  d300              BCC      |L1.23652|
005c62  8006              STRH     r6,[r0,#0]
                  |L1.23652|
;;;9131   if(ch_cnt0<(10*REG_SPEED))
005c64  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005c68  2500              MOVS     r5,#0                 ;9117
005c6a  eb000180          ADD      r1,r0,r0,LSL #2
005c6e  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
005c70  ebb00f41          CMP      r0,r1,LSL #1
005c74  da08              BGE      |L1.23688|
;;;9132   	{
;;;9133   	ch_cnt0++;
005c76  f1000001          ADD      r0,r0,#1
005c7a  b2c0              UXTB     r0,r0
005c7c  7560              STRB     r0,[r4,#0x15]
;;;9134   	if(ch_cnt0>=10*REG_SPEED)
005c7e  ebb00f41          CMP      r0,r1,LSL #1
005c82  db01              BLT      |L1.23688|
;;;9135   		{
;;;9136   		ch_cnt0=0;
005c84  7565              STRB     r5,[r4,#0x15]
;;;9137   		b1Hz_ch=1;
005c86  75a6              STRB     r6,[r4,#0x16]
                  |L1.23688|
;;;9138   		}
;;;9139   	}
;;;9140   #endif
;;;9141   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9142   if(ch_cnt0<10)
;;;9143   	{
;;;9144   	ch_cnt0++;
;;;9145   	if(ch_cnt0>=10)
;;;9146   		{
;;;9147   		ch_cnt0=0;
;;;9148   		b1Hz_ch=1;
;;;9149   		}
;;;9150   	}
;;;9151   #endif
;;;9152   
;;;9153   
;;;9154   if(mess_find_unvol(MESS2CNTRL_HNDL))
005c88  20e1              MOVS     r0,#0xe1
005c8a  f7fffffe          BL       mess_find_unvol
;;;9155   	{
;;;9156   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9157   		{
;;;9158   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9159   		}
;;;9160   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9161   		{
;;;9162   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9163   		}
;;;9164   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9165   		{
;;;9166   		static char cntrlStatIsDownCnt;
;;;9167   		cntrl_stat--;
;;;9168   
;;;9169   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9170   			{
;;;9171   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9172   			}
;;;9173   		else 
;;;9174   			{
;;;9175   			cntrlStatIsDownCnt=0;
;;;9176   			}
;;;9177   
;;;9178   		}
;;;9179   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9180   		{
;;;9181   		cntrl_stat/*_new*/=mess_data[1];
;;;9182   		}
;;;9183   
;;;9184   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9185   		{
;;;9186   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9187   		if(bps_U>u_necc)
005c8e  f8dfc188          LDR      r12,|L1.24088|
005c92  4a42              LDR      r2,|L1.23964|
;;;9188   			{
;;;9189   			cntrl_hndl_plazma=11;
;;;9190   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9191   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9192   			}
;;;9193   		else if(bps_U<u_necc)
;;;9194   			{
;;;9195   			cntrl_hndl_plazma=12;	
;;;9196   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9197   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9198   			}
;;;9199   		#elif defined(UKU_220)
;;;9200   		if(load_U>u_necc)
;;;9201   			{
;;;9202   			cntrl_hndl_plazma=13;
;;;9203   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9204   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9205   			}
;;;9206   		else if(load_U<u_necc)
;;;9207   			{
;;;9208   			cntrl_hndl_plazma=14;	
;;;9209   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9210   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9211   			}
;;;9212   		#elif defined(UKU_220_V2)
;;;9213   		if(load_U>u_necc)
;;;9214   			{
;;;9215   			cntrl_hndl_plazma=15;
;;;9216   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9217   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9218   			}
;;;9219   		else if(load_U<u_necc)
;;;9220   			{
;;;9221   			cntrl_hndl_plazma=16;	
;;;9222   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9223   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9224   			}
;;;9225   		#else
;;;9226   
;;;9227   		if(load_U>u_necc)
;;;9228   			{
;;;9229   			cntrl_hndl_plazma=17;
;;;9230   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9231   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9232   			}
;;;9233   		else if(load_U<u_necc)
;;;9234   			{
;;;9235   			cntrl_hndl_plazma=18;	
;;;9236   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9237   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9238   			}
;;;9239   		#endif	
;;;9240   	 	}
;;;9241   
;;;9242   	/*gran(&cntrl_stat_new,10,1010);			
;;;9243   	cntrl_stat_old=cntrl_stat_new;
;;;9244   	cntrl_stat=cntrl_stat_new;*/
;;;9245   	}
;;;9246   
;;;9247   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9248   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005c94  f8df90e0          LDR      r9,|L1.23928|
;;;9249   	{
;;;9250   	cntrl_stat_new=cntrl_stat_old;
;;;9251   	cntrl_hndl_plazma=19;
;;;9252   	if((Ibmax/10)>(2*IZMAX_))
;;;9253   		{
;;;9254   		cntrl_hndl_plazma=20;
;;;9255             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9256   		else	cntrl_stat_new-=10;
;;;9257   		}		
;;;9258   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9259   		{
;;;9260   		cntrl_hndl_plazma=21;
;;;9261             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9262             else	cntrl_stat_new-=3;
;;;9263   		}   
;;;9264   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9265   		{
;;;9266   		cntrl_hndl_plazma=22;
;;;9267   		cntrl_stat_new--;
;;;9268   		}
;;;9269   		
;;;9270   	else if(bps_U<u_necc)
;;;9271   		{
;;;9272   		cntrl_hndl_plazma=23;
;;;9273   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9274   			{
;;;9275   			cntrl_hndl_plazma=24;
;;;9276   			if(Ibmax<0)
;;;9277   				{
;;;9278   				cntrl_hndl_plazma=25;
;;;9279                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9280   				else cntrl_stat_new+=10;
;;;9281   				}
;;;9282   			else if(Ibmax<(IZMAX_*5))
;;;9283   				{
;;;9284   				cntrl_hndl_plazma=26;
;;;9285                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9286   				else	cntrl_stat_new+=2;
;;;9287   				}
;;;9288   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9289   				{
;;;9290   				cntrl_hndl_plazma=27;
;;;9291   				cntrl_stat_new++;
;;;9292   				}					
;;;9293   			}
;;;9294   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9295   			{
;;;9296   			cntrl_hndl_plazma=28;
;;;9297   			if(Ibmax<(IZMAX_*5))
;;;9298   				{
;;;9299   				cntrl_hndl_plazma=29;
;;;9300                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9301   				else	cntrl_stat_new+=2;
;;;9302   				}
;;;9303   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9304   				{
;;;9305   				cntrl_hndl_plazma=30;
;;;9306   				cntrl_stat_new++;
;;;9307   				}					
;;;9308   			}	
;;;9309   		else if(bps_U<(u_necc-1))
;;;9310   			{
;;;9311   			cntrl_hndl_plazma=31;
;;;9312   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9313   				{
;;;9314   				cntrl_hndl_plazma=32;
;;;9315   				cntrl_stat_new++;
;;;9316   				}					
;;;9317   			}					
;;;9318   		}	
;;;9319   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9320   		{ 	
;;;9321   		cntrl_hndl_plazma=33;
;;;9322   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9323   			{
;;;9324   			cntrl_hndl_plazma=34;
;;;9325                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9326   			else	cntrl_stat_new-=10;
;;;9327   			}
;;;9328   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9329   			{
;;;9330   			cntrl_hndl_plazma=35;
;;;9331                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9332   			else cntrl_stat_new-=2;
;;;9333   			}	
;;;9334   		else if(bps_U>(u_necc+1))
;;;9335   			{
;;;9336   			cntrl_hndl_plazma=36;
;;;9337   			cntrl_stat_new--;
;;;9338   			}					
;;;9339   		}
;;;9340   
;;;9341   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9342   		{
;;;9343   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9344   		}
;;;9345   
;;;9346   	gran(&cntrl_stat_new,10,1010);
;;;9347   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9348   	cntrl_stat_old=cntrl_stat_new;
;;;9349   	cntrl_stat=cntrl_stat_new;
;;;9350   	
;;;9351   	if(ICA_EN==0)
;;;9352   		{
;;;9353   		if(ica_cntrl_hndl_cnt)
005c98  4f60              LDR      r7,|L1.24092|
005c9a  b398              CBZ      r0,|L1.23812|
005c9c  4938              LDR      r1,|L1.23936|
005c9e  6808              LDR      r0,[r1,#0]            ;9156  ; mess_data
005ca0  2864              CMP      r0,#0x64              ;9156
005ca2  d008              BEQ      |L1.23734|
005ca4  2869              CMP      r0,#0x69              ;9160
005ca6  d00b              BEQ      |L1.23744|
005ca8  286e              CMP      r0,#0x6e              ;9164
005caa  d00f              BEQ      |L1.23756|
005cac  28e5              CMP      r0,#0xe5              ;9179
005cae  d02c              BEQ      |L1.23818|
005cb0  28e6              CMP      r0,#0xe6              ;9184
005cb2  d02d              BEQ      |L1.23824|
                  |L1.23732|
005cb4  e228              B        |L1.24840|
                  |L1.23734|
005cb6  6848              LDR      r0,[r1,#4]            ;9158  ; mess_data
005cb8  8ea1              LDRH     r1,[r4,#0x34]         ;9158  ; cntrl_stat_old
005cba  4408              ADD      r0,r0,r1              ;9158
005cbc  8660              STRH     r0,[r4,#0x32]         ;9158
005cbe  e223              B        |L1.24840|
                  |L1.23744|
005cc0  6848              LDR      r0,[r1,#4]            ;9162  ; mess_data
005cc2  8ea1              LDRH     r1,[r4,#0x34]         ;9162  ; cntrl_stat_old
005cc4  eba10000          SUB      r0,r1,r0              ;9162
005cc8  8660              STRH     r0,[r4,#0x32]         ;9162
005cca  e21d              B        |L1.24840|
                  |L1.23756|
005ccc  8e60              LDRH     r0,[r4,#0x32]         ;9167  ; cntrl_stat
005cce  f1a00001          SUB      r0,r0,#1              ;9167
005cd2  b200              SXTH     r0,r0                 ;9167
005cd4  8660              STRH     r0,[r4,#0x32]         ;9167
005cd6  281e              CMP      r0,#0x1e              ;9169
005cd8  dd07              BLE      |L1.23786|
005cda  4851              LDR      r0,|L1.24096|
005cdc  4951              LDR      r1,|L1.24100|
005cde  f9b00000          LDRSH    r0,[r0,#0]            ;9169  ; load_U
005ce2  f9b11000          LDRSH    r1,[r1,#0]            ;9169  ; USIGN
005ce6  4288              CMP      r0,r1                 ;9169
005ce8  da0d              BGE      |L1.23814|
                  |L1.23786|
005cea  7be0              LDRB     r0,[r4,#0xf]          ;9171  ; cntrlStatIsDownCnt
005cec  1c40              ADDS     r0,r0,#1              ;9171
005cee  b2c0              UXTB     r0,r0                 ;9171
005cf0  73e0              STRB     r0,[r4,#0xf]          ;9171
005cf2  28fa              CMP      r0,#0xfa              ;9171
005cf4  d1de              BNE      |L1.23732|
005cf6  230a              MOVS     r3,#0xa               ;9171
005cf8  2200              MOVS     r2,#0                 ;9171
005cfa  21e7              MOVS     r1,#0xe7              ;9171
005cfc  20e6              MOVS     r0,#0xe6              ;9171
005cfe  f7fffffe          BL       mess_send
005d02  e201              B        |L1.24840|
                  |L1.23812|
005d04  e09c              B        |L1.24128|
                  |L1.23814|
005d06  73e5              STRB     r5,[r4,#0xf]          ;9175
005d08  e1fe              B        |L1.24840|
                  |L1.23818|
005d0a  6848              LDR      r0,[r1,#4]            ;9181  ; mess_data
005d0c  8660              STRH     r0,[r4,#0x32]         ;9181
005d0e  e1fb              B        |L1.24840|
                  |L1.23824|
005d10  f9bc0000          LDRSH    r0,[r12,#0]           ;9187  ; bps_U
005d14  f9b21000          LDRSH    r1,[r2,#0]            ;9187  ; u_necc
005d18  4288              CMP      r0,r1                 ;9187
005d1a  dd1a              BLE      |L1.23890|
005d1c  f04f020b          MOV      r2,#0xb               ;9189
005d20  f884202e          STRB     r2,[r4,#0x2e]         ;9189
005d24  eba00001          SUB      r0,r0,r1              ;9190
005d28  2828              CMP      r0,#0x28              ;9190
005d2a  dd07              BLE      |L1.23868|
005d2c  f9b40032          LDRSH    r0,[r4,#0x32]         ;9190  ; cntrl_stat
005d30  2800              CMP      r0,#0                 ;9190
005d32  dd03              BLE      |L1.23868|
005d34  f1a00005          SUB      r0,r0,#5              ;9190
005d38  8660              STRH     r0,[r4,#0x32]         ;9190
005d3a  e1e5              B        |L1.24840|
                  |L1.23868|
005d3c  f9b40032          LDRSH    r0,[r4,#0x32]         ;9191  ; cntrl_stat
005d40  2800              CMP      r0,#0                 ;9191
005d42  d0b7              BEQ      |L1.23732|
005d44  7da1              LDRB     r1,[r4,#0x16]         ;9191  ; b1Hz_ch
005d46  2900              CMP      r1,#0                 ;9191
005d48  d0b4              BEQ      |L1.23732|
005d4a  f1a00001          SUB      r0,r0,#1              ;9191
005d4e  8660              STRH     r0,[r4,#0x32]         ;9191
                  |L1.23888|
005d50  e1da              B        |L1.24840|
                  |L1.23890|
005d52  daaf              BGE      |L1.23732|
005d54  f04f020c          MOV      r2,#0xc               ;9195
005d58  f884202e          STRB     r2,[r4,#0x2e]         ;9195
005d5c  eba10000          SUB      r0,r1,r0              ;9196
005d60  2828              CMP      r0,#0x28              ;9196
005d62  dd61              BLE      |L1.24104|
005d64  f9b40032          LDRSH    r0,[r4,#0x32]         ;9196  ; cntrl_stat
005d68  f24031f7          MOV      r1,#0x3f7             ;9196
005d6c  4288              CMP      r0,r1                 ;9196
005d6e  da5b              BGE      |L1.24104|
005d70  f1000005          ADD      r0,r0,#5              ;9196
005d74  8660              STRH     r0,[r4,#0x32]         ;9196
                  |L1.23926|
005d76  e1c7              B        |L1.24840|
                  |L1.23928|
                          DCD      bps
                  |L1.23932|
                          DCD      NUMIST
                  |L1.23936|
                          DCD      mess_data
                  |L1.23940|
                          DCD      uavt_set_result_stat
                  |L1.23944|
                          DCD      avt_plazma
                  |L1.23948|
                          DCD      TERMOKOMPENS
                  |L1.23952|
                          DCD      UB20
                  |L1.23956|
                          DCD      UVZ
                  |L1.23960|
                          DCD      ||area_number.25||
                  |L1.23964|
                          DCD      u_necc
                  |L1.23968|
                          DCD      ND_EXT
                  |L1.23972|
                          DCD      t_ext
                  |L1.23976|
                          DCD      mat_temper
                  |L1.23980|
                          DCD      UB0
                  |L1.23984|
                          DCD      sk_stat
                  |L1.23988|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.23992|
                          DCD      speedChIsOn
                  |L1.23996|
                          DCD      sp_ch_stat
                  |L1.24000|
                          DCD      speedChrgVolt
                  |L1.24004|
                          DCD      hv_vz_stat
                  |L1.24008|
                          DCD      UZ_U
                  |L1.24012|
                          DCD      FZ_U1
                  |L1.24016|
                          DCD      FZ_U2
                  |L1.24020|
                          DCD      uavt_set_stat
                  |L1.24024|
                          DCD      U_AVT
                  |L1.24028|
                          DCD      u_necc_dn
                  |L1.24032|
                          DCD      u_necc_up
                  |L1.24036|
                          DCD      Isumm
                  |L1.24040|
                          DCD      Isumm_
                  |L1.24044|
                          DCD      bat
                  |L1.24048|
                          DCD      IMAX
                  |L1.24052|
                          DCD      IMIN
                  |L1.24056|
                          DCD      num_necc
                  |L1.24060|
                          DCD      PAR
                  |L1.24064|
                          DCD      IZMAX
                  |L1.24068|
                          DCD      speedChrgCurr
                  |L1.24072|
                          DCD      UZ_IMAX
                  |L1.24076|
                          DCD      FZ_IMAX1
                  |L1.24080|
                          DCD      FZ_IMAX2
                  |L1.24084|
                          DCD      REG_SPEED
                  |L1.24088|
                          DCD      bps_U
                  |L1.24092|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.24096|
                          DCD      load_U
                  |L1.24100|
                          DCD      USIGN
                  |L1.24104|
005e28  f9b40032          LDRSH    r0,[r4,#0x32]         ;9197  ; cntrl_stat
005e2c  f5b07f7f          CMP      r0,#0x3fc             ;9197
005e30  da8e              BGE      |L1.23888|
005e32  7da1              LDRB     r1,[r4,#0x16]         ;9197  ; b1Hz_ch
005e34  2900              CMP      r1,#0                 ;9197
005e36  d08b              BEQ      |L1.23888|
005e38  f1000001          ADD      r0,r0,#1              ;9197
005e3c  8660              STRH     r0,[r4,#0x32]         ;9197
005e3e  e163              B        |L1.24840|
                  |L1.24128|
005e40  7da0              LDRB     r0,[r4,#0x16]         ;9248  ; b1Hz_ch
005e42  2800              CMP      r0,#0                 ;9248
005e44  d084              BEQ      |L1.23888|
005e46  48fb              LDR      r0,|L1.25140|
005e48  8800              LDRH     r0,[r0,#0]            ;9248  ; bIBAT_SMKLBR
005e4a  b118              CBZ      r0,|L1.24148|
005e4c  f8990323          LDRB     r0,[r9,#0x323]        ;9248  ; bps
005e50  2828              CMP      r0,#0x28              ;9248
005e52  d990              BLS      |L1.23926|
                  |L1.24148|
005e54  f104042e          ADD      r4,r4,#0x2e           ;9250
005e58  f9b40006          LDRSH    r0,[r4,#6]            ;9250  ; cntrl_stat_old
005e5c  8360              STRH     r0,[r4,#0x1a]         ;9250
005e5e  f04f0113          MOV      r1,#0x13              ;9251
005e62  7021              STRB     r1,[r4,#0]            ;9251
005e64  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9252  ; Ibmax
005e68  8be3              LDRH     r3,[r4,#0x1e]         ;9252  ; IZMAX_
005e6a  fb91f8f8          SDIV     r8,r1,r8              ;9252
005e6e  f1a4042e          SUB      r4,r4,#0x2e           ;9252
005e72  ebb80f43          CMP      r8,r3,LSL #1          ;9252
005e76  dd10              BLE      |L1.24218|
005e78  f04f0114          MOV      r1,#0x14              ;9254
005e7c  f884102e          STRB     r1,[r4,#0x2e]         ;9254
005e80  f8b41074          LDRH     r1,[r4,#0x74]         ;9255  ; cntrl_stat_blok_cnt
005e84  b121              CBZ      r1,|L1.24208|
005e86  f1a00001          SUB      r0,r0,#1              ;9255
005e8a  f8a40048          STRH     r0,[r4,#0x48]         ;9255
005e8e  e0ff              B        |L1.24720|
                  |L1.24208|
005e90  f1a0000a          SUB      r0,r0,#0xa            ;9256
005e94  f8a40048          STRH     r0,[r4,#0x48]         ;9256
005e98  e0fa              B        |L1.24720|
                  |L1.24218|
005e9a  da14              BGE      |L1.24262|
005e9c  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9258
005ea0  458a              CMP      r10,r1                ;9258
005ea2  da10              BGE      |L1.24262|
005ea4  f04f0115          MOV      r1,#0x15              ;9260
005ea8  f884102e          STRB     r1,[r4,#0x2e]         ;9260
005eac  f8b41074          LDRH     r1,[r4,#0x74]         ;9261  ; cntrl_stat_blok_cnt
005eb0  b121              CBZ      r1,|L1.24252|
005eb2  f1a00001          SUB      r0,r0,#1              ;9261
005eb6  f8a40048          STRH     r0,[r4,#0x48]         ;9261
005eba  e0e9              B        |L1.24720|
                  |L1.24252|
005ebc  f1a00003          SUB      r0,r0,#3              ;9262
005ec0  f8a40048          STRH     r0,[r4,#0x48]         ;9262
005ec4  e0e4              B        |L1.24720|
                  |L1.24262|
005ec6  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9264
005eca  458a              CMP      r10,r1                ;9264
005ecc  dd0a              BLE      |L1.24292|
005ece  4598              CMP      r8,r3                 ;9264
005ed0  dd08              BLE      |L1.24292|
005ed2  f04f0116          MOV      r1,#0x16              ;9266
005ed6  f884102e          STRB     r1,[r4,#0x2e]         ;9266
005eda  f1a00001          SUB      r0,r0,#1              ;9267
005ede  f8a40048          STRH     r0,[r4,#0x48]         ;9267
005ee2  e0d5              B        |L1.24720|
                  |L1.24292|
005ee4  f9bcc000          LDRSH    r12,[r12,#0]          ;9270  ; bps_U
005ee8  f9b22000          LDRSH    r2,[r2,#0]            ;9270  ; u_necc
005eec  f8df8348          LDR      r8,|L1.25144|
005ef0  f8dfb348          LDR      r11,|L1.25148|
005ef4  4594              CMP      r12,r2                ;9270
005ef6  da72              BGE      |L1.24542|
005ef8  f04f0a17          MOV      r10,#0x17             ;9272
005efc  f884a02e          STRB     r10,[r4,#0x2e]        ;9272
005f00  f9b88000          LDRSH    r8,[r8,#0]            ;9273  ; UB0
005f04  f9bba000          LDRSH    r10,[r11,#0]          ;9273  ; UB20
005f08  eba8080a          SUB      r8,r8,r10             ;9273
005f0c  eba20a08          SUB      r10,r2,r8             ;9273
005f10  45e2              CMP      r10,r12               ;9273
005f12  dd37              BLE      |L1.24452|
005f14  f04f0218          MOV      r2,#0x18              ;9275
005f18  f884202e          STRB     r2,[r4,#0x2e]         ;9275
005f1c  2900              CMP      r1,#0                 ;9276
005f1e  da10              BGE      |L1.24386|
005f20  f04f0119          MOV      r1,#0x19              ;9278
005f24  f884102e          STRB     r1,[r4,#0x2e]         ;9278
005f28  f8b41074          LDRH     r1,[r4,#0x74]         ;9279  ; cntrl_stat_blok_cnt
005f2c  b121              CBZ      r1,|L1.24376|
005f2e  f1000001          ADD      r0,r0,#1              ;9279
005f32  f8a40048          STRH     r0,[r4,#0x48]         ;9279
005f36  e0ab              B        |L1.24720|
                  |L1.24376|
005f38  f100000a          ADD      r0,r0,#0xa            ;9280
005f3c  f8a40048          STRH     r0,[r4,#0x48]         ;9280
005f40  e0a6              B        |L1.24720|
                  |L1.24386|
005f42  eb030283          ADD      r2,r3,r3,LSL #2       ;9282
005f46  428a              CMP      r2,r1                 ;9282
005f48  dd10              BLE      |L1.24428|
005f4a  f04f011a          MOV      r1,#0x1a              ;9284
005f4e  f884102e          STRB     r1,[r4,#0x2e]         ;9284
005f52  f8b41074          LDRH     r1,[r4,#0x74]         ;9285  ; cntrl_stat_blok_cnt
005f56  b121              CBZ      r1,|L1.24418|
005f58  f1000001          ADD      r0,r0,#1              ;9285
005f5c  f8a40048          STRH     r0,[r4,#0x48]         ;9285
005f60  e096              B        |L1.24720|
                  |L1.24418|
005f62  f1000002          ADD      r0,r0,#2              ;9286
005f66  f8a40048          STRH     r0,[r4,#0x48]         ;9286
005f6a  e091              B        |L1.24720|
                  |L1.24428|
005f6c  ebb10f42          CMP      r1,r2,LSL #1          ;9288
005f70  da07              BGE      |L1.24450|
005f72  f04f011b          MOV      r1,#0x1b              ;9290
005f76  f884102e          STRB     r1,[r4,#0x2e]         ;9290
005f7a  f1000001          ADD      r0,r0,#1              ;9291
005f7e  f8a40048          STRH     r0,[r4,#0x48]         ;9291
                  |L1.24450|
005f82  e085              B        |L1.24720|
                  |L1.24452|
005f84  ea4f7ae8          ASR      r10,r8,#31            ;9294
005f88  eb08789a          ADD      r8,r8,r10,LSR #30     ;9294
005f8c  eba208a8          SUB      r8,r2,r8,ASR #2       ;9294
005f90  45e0              CMP      r8,r12                ;9294
005f92  dd25              BLE      |L1.24544|
005f94  f04f021c          MOV      r2,#0x1c              ;9296
005f98  f884202e          STRB     r2,[r4,#0x2e]         ;9296
005f9c  eb030283          ADD      r2,r3,r3,LSL #2       ;9297
005fa0  428a              CMP      r2,r1                 ;9297
005fa2  dd10              BLE      |L1.24518|
005fa4  f04f011d          MOV      r1,#0x1d              ;9299
005fa8  f884102e          STRB     r1,[r4,#0x2e]         ;9299
005fac  f8b41074          LDRH     r1,[r4,#0x74]         ;9300  ; cntrl_stat_blok_cnt
005fb0  b121              CBZ      r1,|L1.24508|
005fb2  f1000001          ADD      r0,r0,#1              ;9300
005fb6  f8a40048          STRH     r0,[r4,#0x48]         ;9300
005fba  e069              B        |L1.24720|
                  |L1.24508|
005fbc  f1000002          ADD      r0,r0,#2              ;9301
005fc0  f8a40048          STRH     r0,[r4,#0x48]         ;9301
005fc4  e064              B        |L1.24720|
                  |L1.24518|
005fc6  ebb10f42          CMP      r1,r2,LSL #1          ;9303
005fca  da61              BGE      |L1.24720|
005fcc  f04f011e          MOV      r1,#0x1e              ;9305
005fd0  f884102e          STRB     r1,[r4,#0x2e]         ;9305
005fd4  f1000001          ADD      r0,r0,#1              ;9306
005fd8  f8a40048          STRH     r0,[r4,#0x48]         ;9306
005fdc  e058              B        |L1.24720|
                  |L1.24542|
005fde  e014              B        |L1.24586|
                  |L1.24544|
005fe0  1e52              SUBS     r2,r2,#1              ;9309
005fe2  4594              CMP      r12,r2                ;9309
005fe4  da54              BGE      |L1.24720|
005fe6  f04f021f          MOV      r2,#0x1f              ;9311
005fea  f884202e          STRB     r2,[r4,#0x2e]         ;9311
005fee  eb030283          ADD      r2,r3,r3,LSL #2       ;9312
005ff2  ebb10f42          CMP      r1,r2,LSL #1          ;9312
005ff6  da4b              BGE      |L1.24720|
005ff8  f04f0120          MOV      r1,#0x20              ;9314
005ffc  f884102e          STRB     r1,[r4,#0x2e]         ;9314
006000  f1000001          ADD      r0,r0,#1              ;9315
006004  f8a40048          STRH     r0,[r4,#0x48]         ;9315
006008  e042              B        |L1.24720|
                  |L1.24586|
00600a  dd41              BLE      |L1.24720|
00600c  f04f0121          MOV      r1,#0x21              ;9321
006010  f884102e          STRB     r1,[r4,#0x2e]         ;9321
006014  f9b81000          LDRSH    r1,[r8,#0]            ;9322  ; UB0
006018  f9bb3000          LDRSH    r3,[r11,#0]           ;9322  ; UB20
00601c  eba10103          SUB      r1,r1,r3              ;9322
006020  eb010302          ADD      r3,r1,r2              ;9322
006024  4563              CMP      r3,r12                ;9322
006026  da10              BGE      |L1.24650|
006028  f04f0122          MOV      r1,#0x22              ;9324
00602c  f884102e          STRB     r1,[r4,#0x2e]         ;9324
006030  f8b41074          LDRH     r1,[r4,#0x74]         ;9325  ; cntrl_stat_blok_cnt
006034  b121              CBZ      r1,|L1.24640|
006036  f1a00001          SUB      r0,r0,#1              ;9325
00603a  f8a40048          STRH     r0,[r4,#0x48]         ;9325
00603e  e027              B        |L1.24720|
                  |L1.24640|
006040  f1a0000a          SUB      r0,r0,#0xa            ;9326
006044  f8a40048          STRH     r0,[r4,#0x48]         ;9326
006048  e022              B        |L1.24720|
                  |L1.24650|
00604a  17cb              ASRS     r3,r1,#31             ;9328
00604c  eb017193          ADD      r1,r1,r3,LSR #30      ;9328
006050  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9328
006054  4561              CMP      r1,r12                ;9328
006056  da10              BGE      |L1.24698|
006058  f04f0123          MOV      r1,#0x23              ;9330
00605c  f884102e          STRB     r1,[r4,#0x2e]         ;9330
006060  f8b41074          LDRH     r1,[r4,#0x74]         ;9331  ; cntrl_stat_blok_cnt
006064  b121              CBZ      r1,|L1.24688|
006066  f1a00001          SUB      r0,r0,#1              ;9331
00606a  f8a40048          STRH     r0,[r4,#0x48]         ;9331
00606e  e00f              B        |L1.24720|
                  |L1.24688|
006070  f1a00002          SUB      r0,r0,#2              ;9332
006074  f8a40048          STRH     r0,[r4,#0x48]         ;9332
006078  e00a              B        |L1.24720|
                  |L1.24698|
00607a  1c52              ADDS     r2,r2,#1              ;9334
00607c  4594              CMP      r12,r2                ;9334
00607e  dd07              BLE      |L1.24720|
006080  f04f0124          MOV      r1,#0x24              ;9336
006084  f884102e          STRB     r1,[r4,#0x2e]         ;9336
006088  f1a00001          SUB      r0,r0,#1              ;9337
00608c  f8a40048          STRH     r0,[r4,#0x48]         ;9337
                  |L1.24720|
006090  486b              LDR      r0,|L1.25152|
006092  7961              LDRB     r1,[r4,#5]            ;9341  ; vz1_stat
006094  7800              LDRB     r0,[r0,#0]            ;9341  ; hv_vz_stat
006096  4308              ORRS     r0,r0,r1              ;9341
006098  79e1              LDRB     r1,[r4,#7]            ;9341  ; vz2_stat
00609a  4308              ORRS     r0,r0,r1              ;9341
00609c  d10e              BNE      |L1.24764|
00609e  4869              LDR      r0,|L1.25156|
0060a0  7840              LDRB     r0,[r0,#1]            ;9343  ; sk_stat
0060a2  2801              CMP      r0,#1                 ;9343
0060a4  d10a              BNE      |L1.24764|
0060a6  4868              LDR      r0,|L1.25160|
0060a8  7840              LDRB     r0,[r0,#1]            ;9343  ; sk_stat_old
0060aa  b938              CBNZ     r0,|L1.24764|
0060ac  4867              LDR      r0,|L1.25164|
0060ae  8800              LDRH     r0,[r0,#0]            ;9343  ; VZ_KIND
0060b0  2801              CMP      r0,#1                 ;9343
0060b2  d103              BNE      |L1.24764|
0060b4  f04f0032          MOV      r0,#0x32              ;9343
0060b8  f8a40048          STRH     r0,[r4,#0x48]         ;9343
                  |L1.24764|
0060bc  f24032f2          MOV      r2,#0x3f2             ;9346
0060c0  210a              MOVS     r1,#0xa               ;9346
0060c2  4863              LDR      r0,|L1.25168|
0060c4  f7fffffe          BL       gran
0060c8  4862              LDR      r0,|L1.25172|
0060ca  8800              LDRH     r0,[r0,#0]            ;9347  ; net_av_2min_timer
0060cc  b110              CBZ      r0,|L1.24788|
0060ce  8ea0              LDRH     r0,[r4,#0x34]         ;9347  ; cntrl_stat_old
0060d0  f8a40048          STRH     r0,[r4,#0x48]         ;9347
                  |L1.24788|
0060d4  f8b40048          LDRH     r0,[r4,#0x48]         ;9348  ; cntrl_stat_new
0060d8  86a0              STRH     r0,[r4,#0x34]         ;9348
0060da  8660              STRH     r0,[r4,#0x32]         ;9349
0060dc  485e              LDR      r0,|L1.25176|
0060de  f9b00000          LDRSH    r0,[r0,#0]            ;9351  ; ICA_EN
0060e2  b938              CBNZ     r0,|L1.24820|
0060e4  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
0060e6  b129              CBZ      r1,|L1.24820|
;;;9354   			{
;;;9355   			cntrl_stat = ica_cntrl_hndl;
0060e8  495c              LDR      r1,|L1.25180|
0060ea  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
0060ec  8661              STRH     r1,[r4,#0x32]
;;;9356   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
0060ee  f8a41048          STRH     r1,[r4,#0x48]
;;;9357   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
0060f2  86a1              STRH     r1,[r4,#0x34]
                  |L1.24820|
;;;9358   			}
;;;9359   		}
;;;9360   	
;;;9361   	if((ICA_EN==1)||(ICA_EN==2))
0060f4  2801              CMP      r0,#1
0060f6  d001              BEQ      |L1.24828|
0060f8  2802              CMP      r0,#2
0060fa  d105              BNE      |L1.24840|
                  |L1.24828|
;;;9362   		{
;;;9363   		cntrl_stat=cntrl_stat_new+ica_u_necc;
0060fc  4958              LDR      r1,|L1.25184|
0060fe  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
006102  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
006104  4408              ADD      r0,r0,r1
006106  8660              STRH     r0,[r4,#0x32]
                  |L1.24840|
;;;9364   		}			
;;;9365   	}
;;;9366   #else
;;;9367   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9368   	{
;;;9369   	cntrl_hndl_plazma=37;
;;;9370   	cntrl_stat_new=cntrl_stat_old;
;;;9371   	
;;;9372   	if((Ibmax/10)>(2*IZMAX_))
;;;9373   		{
;;;9374   		cntrl_hndl_plazma=38;
;;;9375             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9376   		else	cntrl_stat_new-=10;
;;;9377   		}		
;;;9378   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9379   		{
;;;9380   		cntrl_hndl_plazma=39;
;;;9381             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9382             else	cntrl_stat_new-=3;
;;;9383   		}   
;;;9384   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9385   		{
;;;9386   		cntrl_hndl_plazma=40;
;;;9387   		cntrl_stat_new--;
;;;9388   		}
;;;9389   		
;;;9390   	else if(load_U<u_necc)
;;;9391   		{
;;;9392   		cntrl_hndl_plazma=41;
;;;9393   		if(load_U<(u_necc-(UB0-UB20)))
;;;9394   			{
;;;9395   			cntrl_hndl_plazma=42;
;;;9396   			if(Ibmax<0)
;;;9397   				{
;;;9398   				cntrl_hndl_plazma=43;
;;;9399                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9400   				else cntrl_stat_new+=10;
;;;9401   				}
;;;9402   			else if(Ibmax<(IZMAX_*5))
;;;9403   				{
;;;9404   				cntrl_hndl_plazma=44;
;;;9405                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9406   				else	cntrl_stat_new+=2;
;;;9407   				}
;;;9408   			else if(Ibmax<((IZMAX_*95)/10))
;;;9409   				{
;;;9410   				cntrl_hndl_plazma=45;
;;;9411   				cntrl_stat_new++;
;;;9412   				}					
;;;9413   			}
;;;9414   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9415   			{
;;;9416   			cntrl_hndl_plazma=46;
;;;9417   			if(Ibmax<(IZMAX_*5))
;;;9418   				{
;;;9419   				cntrl_hndl_plazma=47;
;;;9420                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9421   				else	cntrl_stat_new+=2;
;;;9422   				}
;;;9423   			else if(Ibmax<((IZMAX_*95)/10))
;;;9424   				{
;;;9425   				cntrl_hndl_plazma=48;
;;;9426   				cntrl_stat_new++;
;;;9427   				}					
;;;9428   			}	
;;;9429   		else if(load_U<(u_necc-1))
;;;9430   			{
;;;9431   			cntrl_hndl_plazma=49;
;;;9432   			if(Ibmax<((IZMAX_*95)/10))
;;;9433   				{
;;;9434   				cntrl_hndl_plazma=50;
;;;9435   				cntrl_stat_new++;
;;;9436   				}					
;;;9437   			}					
;;;9438   		}	
;;;9439   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9440   		{
;;;9441   		cntrl_hndl_plazma=51;
;;;9442   		if(load_U>(u_necc+(UB0-UB20)))
;;;9443   			{
;;;9444   			cntrl_hndl_plazma=52;
;;;9445                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9446   			else	cntrl_stat_new-=10;
;;;9447   			}
;;;9448   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9449   			{
;;;9450   			cntrl_hndl_plazma=53;
;;;9451                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9452   			else cntrl_stat_new-=2;
;;;9453   			}	
;;;9454   		else if(load_U>(u_necc+1))
;;;9455   			{
;;;9456   			cntrl_hndl_plazma=54;
;;;9457   			cntrl_stat_new--;
;;;9458   			}					
;;;9459   		}
;;;9460   
;;;9461   	gran(&cntrl_stat_new,10,1022);
;;;9462   				
;;;9463   	cntrl_stat_old=cntrl_stat_new;
;;;9464   	cntrl_stat=cntrl_stat_new;	
;;;9465   	}
;;;9466   #endif
;;;9467   
;;;9468   iiii=0;
006108  7625              STRB     r5,[r4,#0x18]
;;;9469   for(i=0;i<NUMIST;i++)
00610a  75e5              STRB     r5,[r4,#0x17]
00610c  4855              LDR      r0,|L1.25188|
00610e  f9b01000          LDRSH    r1,[r0,#0]
006112  e00c              B        |L1.24878|
                  |L1.24852|
;;;9470        {
;;;9471        if(bps[i]._cnt<30)iiii=1;
006114  eb0002c0          ADD      r2,r0,r0,LSL #3
006118  eb021200          ADD      r2,r2,r0,LSL #4
00611c  eb090282          ADD      r2,r9,r2,LSL #2
006120  78d2              LDRB     r2,[r2,#3]
006122  2a1e              CMP      r2,#0x1e
006124  d200              BCS      |L1.24872|
006126  7626              STRB     r6,[r4,#0x18]
                  |L1.24872|
006128  f1000001          ADD      r0,r0,#1              ;9469
00612c  75e0              STRB     r0,[r4,#0x17]         ;9469
                  |L1.24878|
00612e  7de0              LDRB     r0,[r4,#0x17]         ;9469  ; i
006130  4288              CMP      r0,r1                 ;9469
006132  dbef              BLT      |L1.24852|
;;;9472        }
;;;9473   
;;;9474   if(iiii==0)
006134  7e20              LDRB     r0,[r4,#0x18]  ; iiii
006136  b948              CBNZ     r0,|L1.24908|
;;;9475   	{
;;;9476   	cntrl_stat=600;	
;;;9477   	cntrl_stat_old=600;
;;;9478   	cntrl_stat_new=600;
;;;9479   	cntrl_stat=10*PWM_START;
006138  484b              LDR      r0,|L1.25192|
00613a  8800              LDRH     r0,[r0,#0]  ; PWM_START
00613c  eb000080          ADD      r0,r0,r0,LSL #2
006140  ea4f0040          LSL      r0,r0,#1
006144  8660              STRH     r0,[r4,#0x32]
;;;9480   	cntrl_stat_old=10*PWM_START;
006146  86a0              STRH     r0,[r4,#0x34]
;;;9481   	cntrl_stat_new=10*PWM_START;
006148  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.24908|
;;;9482   	}
;;;9483   
;;;9484   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9485   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
00614c  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
006150  b110              CBZ      r0,|L1.24920|
006152  f1a00001          SUB      r0,r0,#1
006156  8038              STRH     r0,[r7,#0]
                  |L1.24920|
;;;9486   
;;;9487   
;;;9488   
;;;9489   #endif
;;;9490   
;;;9491   
;;;9492   gran(&cntrl_stat,10,1022); 
006158  483d              LDR      r0,|L1.25168|
00615a  f24032fe          MOV      r2,#0x3fe
00615e  210a              MOVS     r1,#0xa
006160  3816              SUBS     r0,r0,#0x16
006162  f7fffffe          BL       gran
;;;9493   b1Hz_ch=0;
006166  75a5              STRB     r5,[r4,#0x16]
                  |L1.24936|
;;;9494   }
006168  e8bd9ff0          POP      {r4-r12,pc}
;;;9495   #endif
                          ENDP

                  ext_drv PROC
;;;9984   //-----------------------------------------------
;;;9985   void ext_drv(void)
00616c  e92d5ff0          PUSH     {r4-r12,lr}
;;;9986   {
;;;9987   char i;
;;;9988   
;;;9989   
;;;9990   for(i=0;i<NUMSK;i++)
006170  f04f0000          MOV      r0,#0
006174  4a3e              LDR      r2,|L1.25200|
;;;9991   	{
;;;9992   	#ifdef UKU_MGTS
;;;9993   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9994   	#endif
;;;9995   	#ifdef UKU_RSTKM
;;;9996   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9997   	#endif
;;;9998   	#ifdef UKU_3U
;;;9999   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10000  	#endif
;;;10001  	#ifdef UKU_GLONASS
;;;10002  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10003  	#endif
;;;10004  	#ifdef UKU_KONTUR
;;;10005  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10006  	#endif
;;;10007  	#ifdef UKU_6U
;;;10008  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10009  	#endif
;;;10010  	#ifdef UKU_220
;;;10011  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10012  	#endif
;;;10013  	#ifdef UKU_220_V2
;;;10014  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10015  	#endif
;;;10016  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10017  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10018  	#endif
;;;10019  	#ifdef UKU_TELECORE2015	
;;;10020  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10021  	#endif
;;;10022  	#ifdef UKU_TELECORE2017
;;;10023  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10024  	#endif
;;;10025  	#ifdef IPS_SGEP_GAZPROM
;;;10026  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10027  	#endif		
;;;10028  		{
;;;10029  		if(sk_cnt[i]<10)
006176  4b3d              LDR      r3,|L1.25196|
;;;10030  			{
;;;10031  			sk_cnt[i]++;
;;;10032  			if(sk_cnt[i]>=10)
;;;10033  				{
;;;10034  				sk_stat[i]=ssON;
006178  4d32              LDR      r5,|L1.25156|
00617a  f04f0a01          MOV      r10,#1
;;;10035  				}
;;;10036  			}
;;;10037  		else 
;;;10038  			{
;;;10039  			sk_cnt[i]=10;
00617e  f04f0b0a          MOV      r11,#0xa
006182  4606              MOV      r6,r0                 ;9990
006184  f9b24000          LDRSH    r4,[r2,#0]            ;9990
006188  e025              B        |L1.25046|
                  |L1.24970|
00618a  493a              LDR      r1,|L1.25204|
00618c  4f3a              LDR      r7,|L1.25208|
00618e  5c09              LDRB     r1,[r1,r0]            ;10017
006190  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10017
006194  f5b16ffa          CMP      r1,#0x7d0             ;10017
006198  da0e              BGE      |L1.25016|
00619a  5619              LDRSB    r1,[r3,r0]            ;10029
00619c  290a              CMP      r1,#0xa               ;10029
00619e  da08              BGE      |L1.25010|
0061a0  f1010101          ADD      r1,r1,#1              ;10031
0061a4  b249              SXTB     r1,r1                 ;10031
0061a6  5419              STRB     r1,[r3,r0]            ;10031
0061a8  290a              CMP      r1,#0xa               ;10032
0061aa  db11              BLT      |L1.25040|
0061ac  f805a000          STRB     r10,[r5,r0]           ;10034
0061b0  e00e              B        |L1.25040|
                  |L1.25010|
0061b2  f803b000          STRB     r11,[r3,r0]
0061b6  e00b              B        |L1.25040|
                  |L1.25016|
;;;10040  			}
;;;10041                 
;;;10042  		}
;;;10043  	else
;;;10044  		{
;;;10045  		if(sk_cnt[i]>0)
0061b8  5619              LDRSB    r1,[r3,r0]
0061ba  2900              CMP      r1,#0
0061bc  dd07              BLE      |L1.25038|
;;;10046  			{
;;;10047  			sk_cnt[i]--;
0061be  f1a10101          SUB      r1,r1,#1
0061c2  b249              SXTB     r1,r1
0061c4  5419              STRB     r1,[r3,r0]
;;;10048  			if(sk_cnt[i]<=0)
0061c6  2900              CMP      r1,#0
0061c8  dc02              BGT      |L1.25040|
;;;10049  				{
;;;10050  				sk_stat[i]=ssOFF;
0061ca  542e              STRB     r6,[r5,r0]
0061cc  e000              B        |L1.25040|
                  |L1.25038|
;;;10051  				}
;;;10052  			}
;;;10053  		else 
;;;10054  			{
;;;10055  			sk_cnt[i]=0;
0061ce  541e              STRB     r6,[r3,r0]
                  |L1.25040|
0061d0  f1000001          ADD      r0,r0,#1              ;9990
0061d4  b2c0              UXTB     r0,r0                 ;9990
                  |L1.25046|
0061d6  42a0              CMP      r0,r4                 ;9990
0061d8  dbd7              BLT      |L1.24970|
;;;10056  			}
;;;10057  		}
;;;10058  	}
;;;10059  
;;;10060  for(i=0;i<NUMSK;i++)
0061da  f04f0400          MOV      r4,#0
;;;10061  	{
;;;10062  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10063  		{
;;;10064  		if(sk_av_cnt[i]<10)
0061de  f8df909c          LDR      r9,|L1.25212|
;;;10065  			{
;;;10066  			sk_av_cnt[i]++;
;;;10067  			if(sk_av_cnt[i]>=10)
;;;10068  				{
;;;10069  				sk_av_stat[i]=sasON;
0061e2  4f27              LDR      r7,|L1.25216|
;;;10070  				}
;;;10071  			}
;;;10072  		else 
;;;10073  			{
;;;10074  			sk_av_cnt[i]=10;
;;;10075  			}
;;;10076  		}
;;;10077  	else
;;;10078  		{
;;;10079  		if(sk_av_cnt[i]>=0)
;;;10080  			{
;;;10081  			sk_av_cnt[i]--;
;;;10082  			if(sk_av_cnt[i]<=0)
;;;10083  				{
;;;10084  				sk_av_stat[i]=sasOFF;
;;;10085  				}
;;;10086  			}
;;;10087  		else 
;;;10088  			{
;;;10089  			sk_av_cnt[i]=0;
;;;10090  			}
;;;10091  		}
;;;10092  
;;;10093  #ifndef UKU_KONTUR
;;;10094  	if(sk_av_stat_old[i]!=sk_av_stat[i])
0061e4  f8df809c          LDR      r8,|L1.25220|
0061e8  e0ae              B        |L1.25416|
                  |L1.25066|
0061ea  4827              LDR      r0,|L1.25224|
0061ec  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10062
0061f0  b910              CBNZ     r0,|L1.25080|
0061f2  5d29              LDRB     r1,[r5,r4]            ;10062
0061f4  2901              CMP      r1,#1                 ;10062
0061f6  d00f              BEQ      |L1.25112|
                  |L1.25080|
0061f8  b108              CBZ      r0,|L1.25086|
0061fa  5d28              LDRB     r0,[r5,r4]            ;10062
0061fc  b160              CBZ      r0,|L1.25112|
                  |L1.25086|
0061fe  f9190004          LDRSB    r0,[r9,r4]            ;10079
006202  2800              CMP      r0,#0                 ;10079
006204  db45              BLT      |L1.25234|
006206  f1a00001          SUB      r0,r0,#1              ;10081
00620a  b240              SXTB     r0,r0                 ;10081
00620c  f8090004          STRB     r0,[r9,r4]            ;10081
006210  2800              CMP      r0,#0                 ;10082
006212  dc40              BGT      |L1.25238|
006214  553e              STRB     r6,[r7,r4]            ;10084
006216  e03e              B        |L1.25238|
                  |L1.25112|
006218  f9190004          LDRSB    r0,[r9,r4]            ;10064
00621c  280a              CMP      r0,#0xa               ;10064
00621e  da35              BGE      |L1.25228|
006220  f1000001          ADD      r0,r0,#1              ;10066
006224  b240              SXTB     r0,r0                 ;10066
006226  f8090004          STRB     r0,[r9,r4]            ;10066
00622a  280a              CMP      r0,#0xa               ;10067
00622c  db33              BLT      |L1.25238|
00622e  f807a004          STRB     r10,[r7,r4]           ;10069
006232  e030              B        |L1.25238|
                  |L1.25140|
                          DCD      bIBAT_SMKLBR
                  |L1.25144|
                          DCD      UB0
                  |L1.25148|
                          DCD      UB20
                  |L1.25152|
                          DCD      hv_vz_stat
                  |L1.25156|
                          DCD      sk_stat
                  |L1.25160|
                          DCD      sk_stat_old
                  |L1.25164|
                          DCD      VZ_KIND
                  |L1.25168|
                          DCD      ||area_number.25||+0x48
                  |L1.25172|
                          DCD      net_av_2min_timer
                  |L1.25176|
                          DCD      ICA_EN
                  |L1.25180|
                          DCD      ica_cntrl_hndl
                  |L1.25184|
                          DCD      ica_u_necc
                  |L1.25188|
                          DCD      NUMIST
                  |L1.25192|
                          DCD      PWM_START
                  |L1.25196|
                          DCD      sk_cnt
                  |L1.25200|
                          DCD      NUMSK
                  |L1.25204|
                          DCD      ||area_number.19||
                  |L1.25208|
                          DCD      ||.bss||+0x40c
                  |L1.25212|
                          DCD      sk_av_cnt
                  |L1.25216|
                          DCD      sk_av_stat
                  |L1.25220|
                          DCD      sk_av_stat_old
                  |L1.25224|
                          DCD      SK_SIGN
                  |L1.25228|
00628c  f809b004          STRB     r11,[r9,r4]           ;10074
006290  e001              B        |L1.25238|
                  |L1.25234|
006292  f8096004          STRB     r6,[r9,r4]            ;10089
                  |L1.25238|
006296  f8181004          LDRB     r1,[r8,r4]
00629a  5d38              LDRB     r0,[r7,r4]
00629c  4281              CMP      r1,r0
00629e  d04d              BEQ      |L1.25404|
;;;10095  		{
;;;10096  		plazma_sk++;
0062a0  4af8              LDR      r2,|L1.26244|
0062a2  8811              LDRH     r1,[r2,#0]  ; plazma_sk
0062a4  f1010101          ADD      r1,r1,#1
0062a8  8011              STRH     r1,[r2,#0]
;;;10097  		if(sk_av_stat[i]==sasON)
0062aa  2801              CMP      r0,#1
0062ac  d007              BEQ      |L1.25278|
;;;10098  			{
;;;10099  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10100  			else if(i==1)
;;;10101  				{
;;;10102  				#ifndef UKU_TELEKORE2017
;;;10103  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10104  				#endif
;;;10105  				#ifdef UKU_TELEKORE2017
;;;10106  				snmp_trap_send("Door open",15,2,1);
;;;10107  				#endif
;;;10108  				}
;;;10109  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10110  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10111  			}
;;;10112  		else 
;;;10113  			{
;;;10114  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
0062ae  b354              CBZ      r4,|L1.25350|
;;;10115  			else if(i==1)
0062b0  2c01              CMP      r4,#1
0062b2  d02f              BEQ      |L1.25364|
;;;10116  				{
;;;10117  				#ifndef UKU_TELEKORE2017
;;;10118  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10119  				#endif
;;;10120  				#ifdef UKU_TELEKORE2017
;;;10121  				snmp_trap_send("Door open clear",15,2,0);
;;;10122  				#endif
;;;10123  				}
;;;10124  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
0062b4  2c02              CMP      r4,#2
0062b6  d034              BEQ      |L1.25378|
;;;10125  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
0062b8  2c03              CMP      r4,#3
0062ba  d039              BEQ      |L1.25392|
0062bc  e03e              B        |L1.25404|
                  |L1.25278|
0062be  b134              CBZ      r4,|L1.25294|
0062c0  2c01              CMP      r4,#1                 ;10100
0062c2  d00b              BEQ      |L1.25308|
0062c4  2c02              CMP      r4,#2                 ;10109
0062c6  d010              BEQ      |L1.25322|
0062c8  2c03              CMP      r4,#3                 ;10110
0062ca  d015              BEQ      |L1.25336|
0062cc  e036              B        |L1.25404|
                  |L1.25294|
0062ce  2301              MOVS     r3,#1                 ;10099
0062d0  461a              MOV      r2,r3                 ;10099
0062d2  210f              MOVS     r1,#0xf               ;10099
0062d4  a0ec              ADR      r0,|L1.26248|
0062d6  f7fffffe          BL       snmp_trap_send
0062da  e02f              B        |L1.25404|
                  |L1.25308|
0062dc  2301              MOVS     r3,#1                 ;10103
0062de  2202              MOVS     r2,#2                 ;10103
0062e0  210f              MOVS     r1,#0xf               ;10103
0062e2  a0ec              ADR      r0,|L1.26260|
0062e4  f7fffffe          BL       snmp_trap_send
0062e8  e028              B        |L1.25404|
                  |L1.25322|
0062ea  2301              MOVS     r3,#1                 ;10109
0062ec  2203              MOVS     r2,#3                 ;10109
0062ee  210f              MOVS     r1,#0xf               ;10109
0062f0  a0eb              ADR      r0,|L1.26272|
0062f2  f7fffffe          BL       snmp_trap_send
0062f6  e021              B        |L1.25404|
                  |L1.25336|
0062f8  2301              MOVS     r3,#1                 ;10110
0062fa  2204              MOVS     r2,#4                 ;10110
0062fc  210f              MOVS     r1,#0xf               ;10110
0062fe  a0eb              ADR      r0,|L1.26284|
006300  f7fffffe          BL       snmp_trap_send
006304  e01a              B        |L1.25404|
                  |L1.25350|
006306  2300              MOVS     r3,#0                 ;10114
006308  2201              MOVS     r2,#1                 ;10114
00630a  210f              MOVS     r1,#0xf               ;10114
00630c  a0ea              ADR      r0,|L1.26296|
00630e  f7fffffe          BL       snmp_trap_send
006312  e013              B        |L1.25404|
                  |L1.25364|
006314  2300              MOVS     r3,#0                 ;10118
006316  2202              MOVS     r2,#2                 ;10118
006318  210f              MOVS     r1,#0xf               ;10118
00631a  a0ec              ADR      r0,|L1.26316|
00631c  f7fffffe          BL       snmp_trap_send
006320  e00c              B        |L1.25404|
                  |L1.25378|
006322  2300              MOVS     r3,#0                 ;10124
006324  2203              MOVS     r2,#3                 ;10124
006326  210f              MOVS     r1,#0xf               ;10124
006328  a0ed              ADR      r0,|L1.26336|
00632a  f7fffffe          BL       snmp_trap_send
00632e  e005              B        |L1.25404|
                  |L1.25392|
006330  2300              MOVS     r3,#0
006332  2204              MOVS     r2,#4
006334  210f              MOVS     r1,#0xf
006336  a0ef              ADR      r0,|L1.26356|
006338  f7fffffe          BL       snmp_trap_send
                  |L1.25404|
;;;10126  			}
;;;10127  	 	}
;;;10128  #endif
;;;10129  
;;;10130  #ifdef UKU_KONTUR
;;;10131  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10132  		{
;;;10133  		plazma_sk++;
;;;10134  		if(sk_av_stat[i]==sasON)
;;;10135  			{
;;;10136  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10137  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10138  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10139  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10140  			}
;;;10141  		else 
;;;10142  			{
;;;10143  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10144  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10145  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10146  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10147  			}
;;;10148  	 	}
;;;10149  #endif
;;;10150  	sk_av_stat_old[i]=sk_av_stat[i];
00633c  5d38              LDRB     r0,[r7,r4]
00633e  f8080004          STRB     r0,[r8,r4]
006342  f1040401          ADD      r4,r4,#1              ;10060
006346  b2e4              UXTB     r4,r4                 ;10060
                  |L1.25416|
006348  48ef              LDR      r0,|L1.26376|
00634a  f9b00000          LDRSH    r0,[r0,#0]            ;10060  ; NUMSK
00634e  4284              CMP      r4,r0                 ;10060
006350  f6ffaf4b          BLT      |L1.25066|
;;;10151  	}
;;;10152  }
006354  e708              B        |L1.24936|
;;;10153  
                          ENDP

                  zar_superviser_start PROC
;;;10190  //-----------------------------------------------
;;;10191  void zar_superviser_start(void)
006356  4aed              LDR      r2,|L1.26380|
;;;10192  {
;;;10193  sign_U[0]=1;
006358  f04f0001          MOV      r0,#1
00635c  7010              STRB     r0,[r2,#0]
;;;10194  sign_I[0]=1;
00635e  49ec              LDR      r1,|L1.26384|
006360  7008              STRB     r0,[r1,#0]
;;;10195  sign_U[1]=1;
006362  7050              STRB     r0,[r2,#1]
;;;10196  sign_I[1]=1;
006364  7048              STRB     r0,[r1,#1]
;;;10197  
;;;10198  }
006366  4770              BX       lr
;;;10199  
                          ENDP

                  zar_superviser_drv PROC
;;;10155  //-----------------------------------------------
;;;10156  void zar_superviser_drv(void)
006368  e92d5ff0          PUSH     {r4-r12,lr}
;;;10157  {
;;;10158  
;;;10159  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
00636c  48ea              LDR      r0,|L1.26392|
00636e  f8df93ac          LDR      r9,|L1.26396|
006372  f8df83a0          LDR      r8,|L1.26388|
006376  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
00637a  f9b90000          LDRSH    r0,[r9,#0]
00637e  4cc1              LDR      r4,|L1.26244|
006380  ebc01100          RSB      r1,r0,r0,LSL #4
006384  3c46              SUBS     r4,r4,#0x46
006386  f9b87002          LDRSH    r7,[r8,#2]  ; bat
00638a  f06f0a1d          MVN      r10,#0x1d
00638e  f06f0b95          MVN      r11,#0x95
006392  2500              MOVS     r5,#0
006394  4edd              LDR      r6,|L1.26380|
006396  f9b40052          LDRSH    r0,[r4,#0x52]
00639a  eb0a0281          ADD      r2,r10,r1,LSL #2
00639e  eb0b0381          ADD      r3,r11,r1,LSL #2
0063a2  4567              CMP      r7,r12
0063a4  dc05              BGT      |L1.25522|
0063a6  f8dfc378          LDR      r12,|L1.26400|
0063aa  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
0063ae  4567              CMP      r7,r12
0063b0  da04              BGE      |L1.25532|
                  |L1.25522|
0063b2  4282              CMP      r2,r0
0063b4  dd02              BLE      |L1.25532|
0063b6  4283              CMP      r3,r0
0063b8  da00              BGE      |L1.25532|
0063ba  7035              STRB     r5,[r6,#0]
                  |L1.25532|
;;;10160  
;;;10161  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
0063bc  4fd9              LDR      r7,|L1.26404|
0063be  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
0063c2  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0063c6  4fd2              LDR      r7,|L1.26384|
0063c8  ebbc0f4e          CMP      r12,lr,LSL #1
0063cc  dc04              BGT      |L1.25560|
0063ce  f1ce0e00          RSB      lr,lr,#0
0063d2  ebbc0f4e          CMP      r12,lr,LSL #1
0063d6  da04              BGE      |L1.25570|
                  |L1.25560|
0063d8  4282              CMP      r2,r0
0063da  dd02              BLE      |L1.25570|
0063dc  4283              CMP      r3,r0
0063de  da00              BGE      |L1.25570|
0063e0  703d              STRB     r5,[r7,#0]
                  |L1.25570|
;;;10162  																 
;;;10163  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0063e2  f06f0209          MVN      r2,#9
0063e6  eb020181          ADD      r1,r2,r1,LSL #2
0063ea  4281              CMP      r1,r0
0063ec  d121              BNE      |L1.25650|
0063ee  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0063f2  b9f0              CBNZ     r0,|L1.25650|
;;;10164  	{
;;;10165  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
0063f4  7830              LDRB     r0,[r6,#0]  ; sign_U
0063f6  2801              CMP      r0,#1
0063f8  d11b              BNE      |L1.25650|
0063fa  7838              LDRB     r0,[r7,#0]  ; sign_I
0063fc  2801              CMP      r0,#1
0063fe  d118              BNE      |L1.25650|
006400  f44f70ef          MOV      r0,#0x1de
006404  f7fffffe          BL       lc640_read_int
006408  49c7              LDR      r1,|L1.26408|
00640a  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
00640e  4288              CMP      r0,r1
006410  d00f              BEQ      |L1.25650|
006412  48c6              LDR      r0,|L1.26412|
006414  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006416  b160              CBZ      r0,|L1.25650|
006418  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
00641c  07c0              LSLS     r0,r0,#31
00641e  d108              BNE      |L1.25650|
;;;10166  		{
;;;10167  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
006420  f44f70ef          MOV      r0,#0x1de
006424  f7fffffe          BL       lc640_write_int
;;;10168  		superviser_cnt++;
006428  48c1              LDR      r0,|L1.26416|
00642a  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
00642c  f1010101          ADD      r1,r1,#1
006430  7001              STRB     r1,[r0,#0]
                  |L1.25650|
;;;10169  		}
;;;10170  	
;;;10171  	}
;;;10172  
;;;10173  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
006432  48b9              LDR      r0,|L1.26392|
006434  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006438  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
00643c  4281              CMP      r1,r0
00643e  dc06              BGT      |L1.25678|
006440  48b7              LDR      r0,|L1.26400|
006442  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
006446  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
00644a  4281              CMP      r1,r0
00644c  da0e              BGE      |L1.25708|
                  |L1.25678|
00644e  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006452  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006456  ebc01000          RSB      r0,r0,r0,LSL #4
00645a  eb0a0280          ADD      r2,r10,r0,LSL #2
00645e  428a              CMP      r2,r1
006460  dd04              BLE      |L1.25708|
006462  eb0b0080          ADD      r0,r11,r0,LSL #2
006466  4288              CMP      r0,r1
006468  da00              BGE      |L1.25708|
00646a  7075              STRB     r5,[r6,#1]
                  |L1.25708|
;;;10174  
;;;10175  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
00646c  49ad              LDR      r1,|L1.26404|
00646e  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
006472  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
006476  ebb00f41          CMP      r0,r1,LSL #1
00647a  dc03              BGT      |L1.25732|
00647c  4249              RSBS     r1,r1,#0
00647e  ebb00f41          CMP      r0,r1,LSL #1
006482  da0e              BGE      |L1.25762|
                  |L1.25732|
006484  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006488  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00648c  ebc01000          RSB      r0,r0,r0,LSL #4
006490  eb0a0280          ADD      r2,r10,r0,LSL #2
006494  428a              CMP      r2,r1
006496  dd04              BLE      |L1.25762|
006498  eb0b0080          ADD      r0,r11,r0,LSL #2
00649c  4288              CMP      r0,r1
00649e  da00              BGE      |L1.25762|
0064a0  707d              STRB     r5,[r7,#1]
                  |L1.25762|
;;;10176  																 
;;;10177  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0064a2  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0064a6  ebc01100          RSB      r1,r0,r0,LSL #4
0064aa  f06f0009          MVN      r0,#9
0064ae  eb000081          ADD      r0,r0,r1,LSL #2
0064b2  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0064b6  4288              CMP      r0,r1
0064b8  d122              BNE      |L1.25856|
0064ba  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0064be  b9f8              CBNZ     r0,|L1.25856|
;;;10178  	{
;;;10179  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0064c0  7870              LDRB     r0,[r6,#1]  ; sign_U
0064c2  2801              CMP      r0,#1
0064c4  d11c              BNE      |L1.25856|
0064c6  7878              LDRB     r0,[r7,#1]  ; sign_I
0064c8  2801              CMP      r0,#1
0064ca  d119              BNE      |L1.25856|
0064cc  f44f75fe          MOV      r5,#0x1fc
0064d0  4628              MOV      r0,r5
0064d2  f7fffffe          BL       lc640_read_int
0064d6  4994              LDR      r1,|L1.26408|
0064d8  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
0064dc  4288              CMP      r0,r1
0064de  d00f              BEQ      |L1.25856|
0064e0  4892              LDR      r0,|L1.26412|
0064e2  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0064e4  2802              CMP      r0,#2
0064e6  d10b              BNE      |L1.25856|
0064e8  f8980089          LDRB     r0,[r8,#0x89]  ; bat
0064ec  07c0              LSLS     r0,r0,#31
0064ee  d107              BNE      |L1.25856|
;;;10180  		{
;;;10181  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
0064f0  4628              MOV      r0,r5
0064f2  f7fffffe          BL       lc640_write_int
;;;10182  		superviser_cnt++;
0064f6  488e              LDR      r0,|L1.26416|
0064f8  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0064fa  f1010101          ADD      r1,r1,#1
0064fe  7001              STRB     r1,[r0,#0]
                  |L1.25856|
;;;10183  		}
;;;10184  	
;;;10185  	}
;;;10186  
;;;10187  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006500  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006504  f06f0101          MVN      r1,#1
006508  ebc01000          RSB      r0,r0,r0,LSL #4
00650c  eb010080          ADD      r0,r1,r0,LSL #2
006510  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006514  4288              CMP      r0,r1
006516  d102              BNE      |L1.25886|
006518  e8bd5ff0          POP      {r4-r12,lr}
00651c  e7fe              B        zar_superviser_start
                  |L1.25886|
;;;10188  }
00651e  e623              B        |L1.24936|
;;;10189  
                          ENDP

                  npn_hndl PROC
;;;10200  //-----------------------------------------------
;;;10201  void npn_hndl(void)
006520  e92d03f0          PUSH     {r4-r9}
;;;10202  {
;;;10203  if(NPN_OUT!=npnoOFF)
006524  4883              LDR      r0,|L1.26420|
;;;10204  	{
;;;10205  /*	if(NPN_SIGN==npnsAVNET)
;;;10206  		{
;;;10207  		if(net_av==1)
;;;10208  			{
;;;10209  			if(npn_tz_cnt<TZNPN)
;;;10210  				{
;;;10211  				npn_tz_cnt++;
;;;10212  				if(npn_tz_cnt==TZNPN)
;;;10213  					{
;;;10214  					npn_stat=npnsOFF;
;;;10215  					}
;;;10216  				}
;;;10217  			}
;;;10218  		else
;;;10219  			{
;;;10220  			if(npn_tz_cnt)
;;;10221  				{
;;;10222  				npn_tz_cnt--;
;;;10223  				if(npn_tz_cnt==0)
;;;10224  					{
;;;10225  					npn_stat=npnsON;
;;;10226  					}
;;;10227  				}
;;;10228  			}
;;;10229  		}*/
;;;10230  /*	if(NPN_SIGN==npnsULOAD)
;;;10231  		{
;;;10232  		if(load_U<UONPN)
;;;10233  			{
;;;10234  			if(npn_tz_cnt<TZNPN)
;;;10235  				{
;;;10236  				npn_tz_cnt++;
;;;10237  				if(npn_tz_cnt==TZNPN)
;;;10238  					{
;;;10239  					npn_stat=npnsOFF;
;;;10240  					}
;;;10241  				}
;;;10242  			}
;;;10243  		else if(load_U>UVNPN)
;;;10244  			{
;;;10245  			if(npn_tz_cnt)
;;;10246  				{
;;;10247  				npn_tz_cnt--;
;;;10248  				if(npn_tz_cnt==0)
;;;10249  					{
;;;10250  					npn_stat=npnsON;
;;;10251  					}
;;;10252  				}
;;;10253  			}
;;;10254  		}*/
;;;10255  
;;;10256  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10257  		{
;;;10258  		if(npn_tz_cnt<TZNPN)
006526  4f84              LDR      r7,|L1.26424|
;;;10259  			{
;;;10260  			npn_tz_cnt++;
;;;10261  			if(npn_tz_cnt==TZNPN)
;;;10262  				{
;;;10263  				npn_stat=npnsOFF;
006528  4e84              LDR      r6,|L1.26428|
00652a  7800              LDRB     r0,[r0,#0]            ;10203  ; NPN_OUT
00652c  f04f0c00          MOV      r12,#0                ;10203
;;;10264  				}
;;;10265  			}
;;;10266  		}
;;;10267  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10268  		{
;;;10269  		if(npn_tz_cnt)
;;;10270  			{
;;;10271  			npn_tz_cnt--;
;;;10272  			if(npn_tz_cnt==0)
;;;10273  				{
;;;10274  				npn_stat=npnsON;
006530  f04f0801          MOV      r8,#1
006534  b3e8              CBZ      r0,|L1.26034|
006536  4882              LDR      r0,|L1.26432|
006538  4639              MOV      r1,r7                 ;10258
00653a  f9b05000          LDRSH    r5,[r0,#0]            ;10256  ; load_U
00653e  4881              LDR      r0,|L1.26436|
006540  f9b11000          LDRSH    r1,[r1,#0]            ;10258
006544  f9b09000          LDRSH    r9,[r0,#0]            ;10256  ; UONPN
006548  487f              LDR      r0,|L1.26440|
00654a  454d              CMP      r5,r9                 ;10256
00654c  f9b02000          LDRSH    r2,[r0,#0]            ;10256
006550  487e              LDR      r0,|L1.26444|
006552  f9b03000          LDRSH    r3,[r0,#0]            ;10256
006556  487e              LDR      r0,|L1.26448|
006558  f9b04000          LDRSH    r4,[r0,#0]            ;10256
00655c  487d              LDR      r0,|L1.26452|
00655e  f9b00000          LDRSH    r0,[r0,#0]            ;10256
006562  da13              BGE      |L1.25996|
006564  4282              CMP      r2,r0                 ;10256
006566  db03              BLT      |L1.25968|
006568  4283              CMP      r3,r0                 ;10256
00656a  db01              BLT      |L1.25968|
00656c  4284              CMP      r4,r0                 ;10256
00656e  da0d              BGE      |L1.25996|
                  |L1.25968|
006570  4879              LDR      r0,|L1.26456|
006572  f9b02000          LDRSH    r2,[r0,#0]            ;10258  ; TZNPN
006576  4291              CMP      r1,r2                 ;10258
006578  da23              BGE      |L1.26050|
00657a  f1010101          ADD      r1,r1,#1              ;10260
00657e  b208              SXTH     r0,r1                 ;10260
006580  8038              STRH     r0,[r7,#0]            ;10260
006582  4290              CMP      r0,r2                 ;10261
006584  d11d              BNE      |L1.26050|
006586  f886c000          STRB     r12,[r6,#0]           ;10263
00658a  e01a              B        |L1.26050|
                  |L1.25996|
00658c  f8dfc1cc          LDR      r12,|L1.26460|
006590  f9bcc000          LDRSH    r12,[r12,#0]          ;10267  ; UVNPN
006594  4565              CMP      r5,r12                ;10267
006596  dd14              BLE      |L1.26050|
006598  4282              CMP      r2,r0                 ;10267
00659a  dd12              BLE      |L1.26050|
00659c  4283              CMP      r3,r0                 ;10267
00659e  dd10              BLE      |L1.26050|
0065a0  4284              CMP      r4,r0                 ;10267
0065a2  dd0e              BLE      |L1.26050|
0065a4  b169              CBZ      r1,|L1.26050|
0065a6  f1a10101          SUB      r1,r1,#1              ;10271
0065aa  b208              SXTH     r0,r1                 ;10271
0065ac  8038              STRH     r0,[r7,#0]            ;10271
0065ae  b940              CBNZ     r0,|L1.26050|
0065b0  e000              B        |L1.26036|
                  |L1.26034|
0065b2  e002              B        |L1.26042|
                  |L1.26036|
0065b4  f8868000          STRB     r8,[r6,#0]
0065b8  e003              B        |L1.26050|
                  |L1.26042|
;;;10275  				}
;;;10276  			}
;;;10277  		}
;;;10278  	}
;;;10279  else
;;;10280  	{
;;;10281  	npn_tz_cnt=0;
0065ba  f8a7c000          STRH     r12,[r7,#0]
;;;10282  	npn_stat=npnsON;
0065be  f8868000          STRB     r8,[r6,#0]
                  |L1.26050|
;;;10283  	}
;;;10284  
;;;10285  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0065c2  7830              LDRB     r0,[r6,#0]  ; npn_stat
0065c4  2800              CMP      r0,#0
0065c6  d107              BNE      |L1.26072|
0065c8  e8bd03f0          POP      {r4-r9}
0065cc  230f              MOVS     r3,#0xf
0065ce  2201              MOVS     r2,#1
0065d0  216e              MOVS     r1,#0x6e
0065d2  20d2              MOVS     r0,#0xd2
0065d4  f7ffbffe          B.W      mess_send
                  |L1.26072|
;;;10286  
;;;10287  
;;;10288  }
0065d8  e8bd03f0          POP      {r4-r9}
0065dc  4770              BX       lr
;;;10289  
                          ENDP

                  loadoff_hndl PROC
;;;10291  //-----------------------------------------------
;;;10292  void loadoff_hndl(void)
0065de  b5f0              PUSH     {r4-r7,lr}
;;;10293  {
;;;10294  if((load_U>UONPN)||(load_U<UVNPN))
0065e0  4857              LDR      r0,|L1.26432|
;;;10295  	{
;;;10296  	if(load_off_cnt<TZNPN)
0065e2  4d5f              LDR      r5,|L1.26464|
;;;10297  		{
;;;10298  		load_off_cnt++;
;;;10299  		if(load_off_cnt>=TZNPN)
;;;10300  			{
;;;10301  			load_off_stat=npnsOFF;
0065e4  2700              MOVS     r7,#0
0065e6  f9b01000          LDRSH    r1,[r0,#0]            ;10294  ; load_U
0065ea  4856              LDR      r0,|L1.26436|
0065ec  4e5d              LDR      r6,|L1.26468|
0065ee  f9b02000          LDRSH    r2,[r0,#0]            ;10294  ; UONPN
0065f2  f9b50000          LDRSH    r0,[r5,#0]            ;10296
0065f6  4291              CMP      r1,r2                 ;10294
0065f8  dc04              BGT      |L1.26116|
0065fa  4b58              LDR      r3,|L1.26460|
0065fc  f9b33000          LDRSH    r3,[r3,#0]            ;10294  ; UVNPN
006600  4299              CMP      r1,r3                 ;10294
006602  da0d              BGE      |L1.26144|
                  |L1.26116|
006604  4954              LDR      r1,|L1.26456|
006606  f9b11000          LDRSH    r1,[r1,#0]            ;10296  ; TZNPN
00660a  4288              CMP      r0,r1                 ;10296
00660c  da1c              BGE      |L1.26184|
00660e  f1000001          ADD      r0,r0,#1              ;10298
006612  b200              SXTH     r0,r0                 ;10298
006614  8028              STRH     r0,[r5,#0]            ;10298
006616  4288              CMP      r0,r1                 ;10299
006618  db16              BLT      |L1.26184|
00661a  7037              STRB     r7,[r6,#0]
;;;10302  			load_off_cnt=TZNPN;
00661c  8029              STRH     r1,[r5,#0]
00661e  e013              B        |L1.26184|
                  |L1.26144|
;;;10303  			}
;;;10304  		}
;;;10305  	}
;;;10306  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
006620  4c51              LDR      r4,|L1.26472|
006622  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
006626  4423              ADD      r3,r3,r4
006628  428b              CMP      r3,r1
00662a  da0d              BGE      |L1.26184|
00662c  1b12              SUBS     r2,r2,r4
00662e  428a              CMP      r2,r1
006630  dd0a              BLE      |L1.26184|
;;;10307  	{
;;;10308  	if(load_off_cnt)
006632  b148              CBZ      r0,|L1.26184|
;;;10309  		{
;;;10310  		load_off_cnt--;
006634  f1a00001          SUB      r0,r0,#1
006638  b200              SXTH     r0,r0
00663a  8028              STRH     r0,[r5,#0]
;;;10311  		if(load_off_cnt<=0)
00663c  2800              CMP      r0,#0
00663e  dc03              BGT      |L1.26184|
;;;10312  			{
;;;10313  			load_off_stat=npnsON;
006640  f04f0001          MOV      r0,#1
006644  7030              STRB     r0,[r6,#0]
;;;10314  			load_off_cnt=0;
006646  802f              STRH     r7,[r5,#0]
                  |L1.26184|
;;;10315  			}
;;;10316  		}
;;;10317  	}
;;;10318  
;;;10319  
;;;10320  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006648  7830              LDRB     r0,[r6,#0]  ; load_off_stat
00664a  2800              CMP      r0,#0
00664c  d103              BNE      |L1.26198|
00664e  4947              LDR      r1,|L1.26476|
006650  f04f000a          MOV      r0,#0xa
006654  7008              STRB     r0,[r1,#0]
                  |L1.26198|
;;;10321  
;;;10322  
;;;10323  }
006656  bdf0              POP      {r4-r7,pc}
;;;10324  
                          ENDP

                  speedChargeStartStop PROC
;;;10512  //-----------------------------------------------
;;;10513  void speedChargeStartStop(void)
006658  b538              PUSH     {r3-r5,lr}
;;;10514  {
;;;10515  spch_plazma[1]++;
00665a  4c45              LDR      r4,|L1.26480|
00665c  7860              LDRB     r0,[r4,#1]  ; spch_plazma
00665e  f1000001          ADD      r0,r0,#1
006662  7060              STRB     r0,[r4,#1]
;;;10516  /*if(speedChIsOn)
;;;10517  	{
;;;10518  	speedChIsOn=0;
;;;10519  	}
;;;10520  
;;;10521  else
;;;10522  	{
;;;10523  	if(speedChrgBlckStat==0)
;;;10524  		{
;;;10525  		speedChIsOn=1;
;;;10526  		speedChTimeCnt=0;
;;;10527  		}
;;;10528  	else
;;;10529  		{
;;;10530  		show_mess(	"     Ускоренный     ",
;;;10531  	          		"       заряд        ",
;;;10532  	          		"    заблокирован!   ",
;;;10533  	          		"                    ",2000);	 
;;;10534  		}
;;;10535  	}*/
;;;10536  
;;;10537  if(sp_ch_stat!=scsOFF)
006664  4843              LDR      r0,|L1.26484|
006666  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006668  b151              CBZ      r1,|L1.26240|
;;;10538  	{
;;;10539  	sp_ch_stat=scsOFF;
00666a  f04f0100          MOV      r1,#0
00666e  7001              STRB     r1,[r0,#0]
;;;10540  	speedz_mem_hndl(10);
006670  f04f000a          MOV      r0,#0xa
006674  f7fffffe          BL       speedz_mem_hndl
;;;10541  	spch_plazma[1]=10;
006678  f04f000a          MOV      r0,#0xa
00667c  7060              STRB     r0,[r4,#1]
                  |L1.26238|
;;;10542  	}
;;;10543  
;;;10544  else
;;;10545  	{
;;;10546  	spch_plazma[1]=20;
;;;10547  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10548  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10549  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10550  		#endif
;;;10551  		)
;;;10552  		{
;;;10553  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10554  		sp_ch_stat=scsSTEP1;
;;;10555  		#else
;;;10556  		sp_ch_stat=scsWRK;
;;;10557  		#endif
;;;10558  		speedz_mem_hndl(1);
;;;10559  		}
;;;10560  	else 
;;;10561  		{
;;;10562  		show_mess(	"     Ускоренный     ",
;;;10563  	          		"       заряд        ",
;;;10564  	          		"    заблокирован!   ",
;;;10565  	          		"                    ",2000);
;;;10566  		}
;;;10567  	}
;;;10568  }
00667e  bd38              POP      {r3-r5,pc}
                  |L1.26240|
006680  e07a              B        |L1.26488|
006682  0000              DCW      0x0000
                  |L1.26244|
                          DCD      ||area_number.25||+0x46
                  |L1.26248|
006688  534b2023          DCB      "SK #1 Alarm",0
00668c  3120416c
006690  61726d00
                  |L1.26260|
006694  534b2023          DCB      "SK #2 Alarm",0
006698  3220416c
00669c  61726d00
                  |L1.26272|
0066a0  534b2023          DCB      "SK #3 Alarm",0
0066a4  3320416c
0066a8  61726d00
                  |L1.26284|
0066ac  534b2023          DCB      "SK #4 Alarm",0
0066b0  3420416c
0066b4  61726d00
                  |L1.26296|
0066b8  534b2023          DCB      "SK #1 Alarm is off",0
0066bc  3120416c
0066c0  61726d20
0066c4  6973206f
0066c8  666600  
0066cb  00                DCB      0
                  |L1.26316|
0066cc  534b2023          DCB      "SK #2 Alarm is off",0
0066d0  3220416c
0066d4  61726d20
0066d8  6973206f
0066dc  666600  
0066df  00                DCB      0
                  |L1.26336|
0066e0  534b2023          DCB      "SK #3 Alarm is off",0
0066e4  3320416c
0066e8  61726d20
0066ec  6973206f
0066f0  666600  
0066f3  00                DCB      0
                  |L1.26356|
0066f4  534b2023          DCB      "SK #4 Alarm is off",0
0066f8  3420416c
0066fc  61726d20
006700  6973206f
006704  666600  
006707  00                DCB      0
                  |L1.26376|
                          DCD      NUMSK
                  |L1.26380|
                          DCD      sign_U
                  |L1.26384|
                          DCD      sign_I
                  |L1.26388|
                          DCD      bat
                  |L1.26392|
                          DCD      u_necc_up
                  |L1.26396|
                          DCD      TBAT
                  |L1.26400|
                          DCD      u_necc_dn
                  |L1.26404|
                          DCD      IKB
                  |L1.26408|
                          DCD      BAT_C_REAL
                  |L1.26412|
                          DCD      NUMBAT
                  |L1.26416|
                          DCD      superviser_cnt
                  |L1.26420|
                          DCD      NPN_OUT
                  |L1.26424|
                          DCD      npn_tz_cnt
                  |L1.26428|
                          DCD      npn_stat
                  |L1.26432|
                          DCD      load_U
                  |L1.26436|
                          DCD      UONPN
                  |L1.26440|
                          DCD      net_Ua
                  |L1.26444|
                          DCD      net_Ub
                  |L1.26448|
                          DCD      net_Uc
                  |L1.26452|
                          DCD      UMN
                  |L1.26456|
                          DCD      TZNPN
                  |L1.26460|
                          DCD      UVNPN
                  |L1.26464|
                          DCD      load_off_cnt
                  |L1.26468|
                          DCD      load_off_stat
                  |L1.26472|
                          DCD      dUNPN
                  |L1.26476|
                          DCD      tloaddisable_cmnd
                  |L1.26480|
                          DCD      spch_plazma
                  |L1.26484|
                          DCD      sp_ch_stat
                  |L1.26488|
006778  f04f0114          MOV      r1,#0x14              ;10546
00677c  7061              STRB     r1,[r4,#1]            ;10546
00677e  49fa              LDR      r1,|L1.27496|
006780  f9b12000          LDRSH    r2,[r1,#0]            ;10547  ; speedChrgBlckStat
006784  49f9              LDR      r1,|L1.27500|
006786  f8913023          LDRB     r3,[r1,#0x23]         ;10547  ; spc_stat
00678a  ea420203          ORR      r2,r2,r3              ;10547
00678e  794b              LDRB     r3,[r1,#5]            ;10547  ; vz1_stat
006790  79c9              LDRB     r1,[r1,#7]            ;10547  ; vz2_stat
006792  ea420203          ORR      r2,r2,r3              ;10547
006796  430a              ORRS     r2,r2,r1              ;10547
006798  d009              BEQ      |L1.26542|
00679a  f44f60fa          MOV      r0,#0x7d0             ;10562
00679e  9000              STR      r0,[sp,#0]            ;10562
0067a0  4bf3              LDR      r3,|L1.27504|
0067a2  a2f4              ADR      r2,|L1.27508|
0067a4  a1f9              ADR      r1,|L1.27532|
0067a6  a0ff              ADR      r0,|L1.27556|
0067a8  f7fffffe          BL       show_mess
0067ac  e767              B        |L1.26238|
                  |L1.26542|
0067ae  f04f0101          MOV      r1,#1                 ;10554
0067b2  7001              STRB     r1,[r0,#0]            ;10554
0067b4  e8bd4038          POP      {r3-r5,lr}            ;10558
0067b8  4608              MOV      r0,r1                 ;10558
0067ba  f7ffbffe          B.W      speedz_mem_hndl
;;;10569  
                          ENDP

                  speedChargeHndl PROC
;;;10325  //-----------------------------------------------
;;;10326  void speedChargeHndl(void)
0067be  e92d4ff8          PUSH     {r3-r11,lr}
;;;10327  {
;;;10328  /*
;;;10329  if(sp_ch_stat==scsOFF)
;;;10330  	{
;;;10331  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10332  	}*/
;;;10333  	 
;;;10334  if(sp_ch_stat==scsSTEP1)
0067c2  4ffe              LDR      r7,|L1.27580|
;;;10335  	{
;;;10336  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10337  		{
;;;10338  		sp_ch_stat_cnt=5;
;;;10339  		if(SP_CH_VENT_BLOK==0)
0067c4  f8dfa3f8          LDR      r10,|L1.27584|
;;;10340  			{
;;;10341  			sp_ch_stat_cnt=0;
;;;10342  			sp_ch_stat=scsWRK;
;;;10343  			}
;;;10344  		}
;;;10345  	if(sp_ch_stat_cnt)
;;;10346  		{
;;;10347  		sp_ch_stat_cnt--;
;;;10348  		if(sp_ch_stat_cnt==0)
;;;10349  			{
;;;10350  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10351  
;;;10352  			}
;;;10353  		}
;;;10354  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0067c8  f8df93f8          LDR      r9,|L1.27588|
0067cc  7839              LDRB     r1,[r7,#0]            ;10334  ; sp_ch_stat
0067ce  f04f0802          MOV      r8,#2                 ;10342
0067d2  4efd              LDR      r6,|L1.27592|
0067d4  4cfd              LDR      r4,|L1.27596|
0067d6  2500              MOVS     r5,#0                 ;10339
0067d8  7830              LDRB     r0,[r6,#0]            ;10336
0067da  2901              CMP      r1,#1                 ;10334
0067dc  d11b              BNE      |L1.26646|
0067de  2801              CMP      r0,#1                 ;10336
0067e0  d008              BEQ      |L1.26612|
0067e2  f04f0105          MOV      r1,#5                 ;10338
0067e6  8021              STRH     r1,[r4,#0]            ;10338
0067e8  f8ba1000          LDRH     r1,[r10,#0]           ;10339  ; SP_CH_VENT_BLOK
0067ec  b911              CBNZ     r1,|L1.26612|
0067ee  8025              STRH     r5,[r4,#0]            ;10341
0067f0  f8878000          STRB     r8,[r7,#0]            ;10342
                  |L1.26612|
0067f4  f9b41000          LDRSH    r1,[r4,#0]            ;10345  ; sp_ch_stat_cnt
0067f8  b139              CBZ      r1,|L1.26634|
0067fa  f1a10101          SUB      r1,r1,#1              ;10347
0067fe  b209              SXTH     r1,r1                 ;10347
006800  8021              STRH     r1,[r4,#0]            ;10347
006802  b911              CBNZ     r1,|L1.26634|
006804  f04f0103          MOV      r1,#3                 ;10350
006808  7039              STRB     r1,[r7,#0]            ;10350
                  |L1.26634|
00680a  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
00680e  2901              CMP      r1,#1
006810  d101              BNE      |L1.26646|
006812  f8878000          STRB     r8,[r7,#0]
                  |L1.26646|
;;;10355  	}
;;;10356  
;;;10357  if(sp_ch_stat==scsWRK)
006816  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006818  2902              CMP      r1,#2
00681a  d123              BNE      |L1.26724|
;;;10358  	{
;;;10359  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10360  		{
;;;10361  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
00681c  4aec              LDR      r2,|L1.27600|
;;;10362  		hv_vz_up_cnt=0;
00681e  49ed              LDR      r1,|L1.27604|
006820  2802              CMP      r0,#2                 ;10359
006822  d008              BEQ      |L1.26678|
006824  48ec              LDR      r0,|L1.27608|
006826  f44f6361          MOV      r3,#0xe10             ;10361
00682a  f9b00000          LDRSH    r0,[r0,#0]            ;10361  ; speedChrgTimeInHour
00682e  fb00f003          MUL      r0,r0,r3              ;10361
006832  6010              STR      r0,[r2,#0]            ;10361  ; sp_ch_wrk_cnt
006834  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.26678|
;;;10363  		}
;;;10364  	sp_ch_wrk_cnt--;
006836  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006838  f1a00001          SUB      r0,r0,#1
00683c  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10365  	hv_vz_up_cnt++;
00683e  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006840  f1020201          ADD      r2,r2,#1
006844  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10366  	if(sp_ch_wrk_cnt==0)
006846  b918              CBNZ     r0,|L1.26704|
;;;10367  		{
;;;10368  		sp_ch_stat=scsOFF;
006848  703d              STRB     r5,[r7,#0]
;;;10369  		speedz_mem_hndl(0);
00684a  2000              MOVS     r0,#0
00684c  f7fffffe          BL       speedz_mem_hndl
                  |L1.26704|
;;;10370  		}
;;;10371  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10372  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006850  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006854  b930              CBNZ     r0,|L1.26724|
006856  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
00685a  2801              CMP      r0,#1
00685c  d102              BNE      |L1.26724|
00685e  f04f0004          MOV      r0,#4
006862  7038              STRB     r0,[r7,#0]
                  |L1.26724|
;;;10373  	#endif
;;;10374  	}
;;;10375  
;;;10376  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006864  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10377  	{
;;;10378  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10379  		{
;;;10380  		sp_ch_stat_cnt=10;
;;;10381  		}
;;;10382  	sp_ch_stat_cnt--;
;;;10383  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10384  		{
;;;10385  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006866  f2413b88          MOV      r11,#0x1388
00686a  f04f0a0a          MOV      r10,#0xa              ;10380
00686e  2803              CMP      r0,#3                 ;10376
006870  d119              BNE      |L1.26790|
006872  7830              LDRB     r0,[r6,#0]            ;10378  ; sp_ch_stat_old
006874  2803              CMP      r0,#3                 ;10378
006876  d101              BNE      |L1.26748|
006878  8820              LDRH     r0,[r4,#0]            ;10378  ; sp_ch_stat_cnt
00687a  b908              CBNZ     r0,|L1.26752|
                  |L1.26748|
00687c  f8a4a000          STRH     r10,[r4,#0]           ;10380
                  |L1.26752|
006880  8820              LDRH     r0,[r4,#0]            ;10382  ; sp_ch_stat_cnt
006882  f1a00001          SUB      r0,r0,#1              ;10382
006886  b200              SXTH     r0,r0                 ;10382
006888  8020              STRH     r0,[r4,#0]            ;10382
00688a  280a              CMP      r0,#0xa               ;10383
00688c  d001              BEQ      |L1.26770|
00688e  2809              CMP      r0,#9                 ;10383
006890  d109              BNE      |L1.26790|
                  |L1.26770|
006892  4bd2              LDR      r3,|L1.27612|
006894  a0d2              ADR      r0,|L1.27616|
006896  f1030218          ADD      r2,r3,#0x18
00689a  f1020118          ADD      r1,r2,#0x18
00689e  f8cdb000          STR      r11,[sp,#0]
0068a2  f7fffffe          BL       show_mess
                  |L1.26790|
;;;10386  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10387  					"      ВКЛЮЧЕН       ",
;;;10388  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10389  					5000);
;;;10390  		}
;;;10391  	}
;;;10392  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
0068a6  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0068a8  2804              CMP      r0,#4
0068aa  d11f              BNE      |L1.26860|
;;;10393  	{
;;;10394  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
0068ac  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
0068ae  2804              CMP      r0,#4
0068b0  d101              BNE      |L1.26806|
0068b2  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0068b4  b908              CBNZ     r0,|L1.26810|
                  |L1.26806|
;;;10395  		{
;;;10396  		sp_ch_stat_cnt=10;
0068b6  f8a4a000          STRH     r10,[r4,#0]
                  |L1.26810|
;;;10397  		}
;;;10398  	sp_ch_stat_cnt--;
0068ba  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0068bc  f1a00001          SUB      r0,r0,#1
0068c0  b200              SXTH     r0,r0
0068c2  8020              STRH     r0,[r4,#0]
;;;10399  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
0068c4  280a              CMP      r0,#0xa
0068c6  d001              BEQ      |L1.26828|
0068c8  2809              CMP      r0,#9
0068ca  d109              BNE      |L1.26848|
                  |L1.26828|
;;;10400  		{
;;;10401  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0068cc  4bca              LDR      r3,|L1.27640|
0068ce  a0c4              ADR      r0,|L1.27616|
0068d0  f1030218          ADD      r2,r3,#0x18
0068d4  f1020118          ADD      r1,r2,#0x18
0068d8  f8cdb000          STR      r11,[sp,#0]
0068dc  f7fffffe          BL       show_mess
                  |L1.26848|
;;;10402  					"    ЗАБЛОКИРОВАН    ",
;;;10403  					"     НЕИСПРАВНА     ",
;;;10404  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10405  					5000);
;;;10406  		}
;;;10407  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0068e0  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
0068e4  2801              CMP      r0,#1
0068e6  d101              BNE      |L1.26860|
0068e8  f8878000          STRB     r8,[r7,#0]
                  |L1.26860|
;;;10408  	}
;;;10409  
;;;10410  
;;;10411  sp_ch_stat_old=sp_ch_stat;
0068ec  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0068ee  7030              STRB     r0,[r6,#0]
;;;10412  
;;;10413  
;;;10414  
;;;10415  if(speedChrgAvtEn==1)
0068f0  49c2              LDR      r1,|L1.27644|
;;;10416  	{
;;;10417  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10418  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10419  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10420  		#endif
;;;10421  		)
;;;10422  		{
;;;10423  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10424  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10425  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10426  		#endif
;;;10427  		#ifdef UKU_220_V2
;;;10428  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10429  		#endif
;;;10430  		&&(!speedChrgBlckStat))
0068f2  4c9d              LDR      r4,|L1.27496|
0068f4  8809              LDRH     r1,[r1,#0]            ;10415  ; speedChrgAvtEn
0068f6  2901              CMP      r1,#1                 ;10415
0068f8  d10a              BNE      |L1.26896|
0068fa  499c              LDR      r1,|L1.27500|
;;;10431  			{
;;;10432  			speedChargeStartCnt++;
0068fc  4ec0              LDR      r6,|L1.27648|
0068fe  f8912023          LDRB     r2,[r1,#0x23]         ;10417  ; spc_stat
006902  4310              ORRS     r0,r0,r2              ;10417
006904  794a              LDRB     r2,[r1,#5]            ;10417  ; vz1_stat
006906  79c9              LDRB     r1,[r1,#7]            ;10417  ; vz2_stat
006908  4310              ORRS     r0,r0,r2              ;10417
00690a  4308              ORRS     r0,r0,r1              ;10417
00690c  d007              BEQ      |L1.26910|
;;;10433  			if(speedChargeStartCnt>=60)
;;;10434  				{
;;;10435  				speedChargeStartStop();
;;;10436  				speedz_mem_hndl(5);
;;;10437  				}
;;;10438  			}
;;;10439  		else speedChargeStartCnt=0;
;;;10440  		}
;;;10441  	else speedChargeStartCnt=0;
00690e  7035              STRB     r5,[r6,#0]
                  |L1.26896|
;;;10442  	}
;;;10443  
;;;10444  
;;;10445  
;;;10446  /*
;;;10447  if(speedChIsOn)
;;;10448  	{
;;;10449  	speedChTimeCnt++;
;;;10450  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10451  		{
;;;10452  		speedChIsOn=0;
;;;10453  		}
;;;10454  	if(speedChrgBlckStat)
;;;10455  		{
;;;10456  		speedChIsOn=0;
;;;10457  		speedChTimeCnt=0;
;;;10458  		}
;;;10459  	}
;;;10460  
;;;10461  
;;;10462  
;;;10463  if(speedChrgAvtEn)
;;;10464  	{
;;;10465  	if(!speedChIsOn)
;;;10466  		{
;;;10467  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10468  			{
;;;10469  			speedChIsOn=1;
;;;10470  			}
;;;10471  		}
;;;10472  	}
;;;10473  
;;;10474  
;;;10475  */
;;;10476  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006910  48bc              LDR      r0,|L1.27652|
006912  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006914  2802              CMP      r0,#2
006916  d02e              BEQ      |L1.26998|
006918  8025              STRH     r5,[r4,#0]
                  |L1.26906|
;;;10477  else
;;;10478  	{
;;;10479  	speedChrgBlckStat=0;
;;;10480  	if(speedChrgBlckSrc==1)
;;;10481  		{
;;;10482  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10483  		}
;;;10484  	else if(speedChrgBlckSrc==2)
;;;10485  		{
;;;10486  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10487  		}
;;;10488  	}
;;;10489  
;;;10490  /*
;;;10491  if(speedChrgBlckStat==1)
;;;10492  	{
;;;10493  
;;;10494  	//speedChargeStartStop();
;;;10495  
;;;10496  	speedChrgShowCnt++;
;;;10497  	if(speedChrgShowCnt>=30)	
;;;10498  		{
;;;10499  		speedChrgShowCnt=0;
;;;10500  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10501  					"       ЗАРЯД        ",
;;;10502  					"     ЗАПРЕЩЕН!!!    ",
;;;10503  					"                    ",
;;;10504  					5000);
;;;10505  		}
;;;10506  	} 
;;;10507  else speedChrgShowCnt=0;  */
;;;10508  
;;;10509  
;;;10510  }
00691a  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.26910|
00691e  48ba              LDR      r0,|L1.27656|
006920  49ba              LDR      r1,|L1.27660|
006922  f9b00000          LDRSH    r0,[r0,#0]            ;10423  ; load_U
006926  f9b11000          LDRSH    r1,[r1,#0]            ;10423  ; u_necc
00692a  4288              CMP      r0,r1                 ;10423
00692c  da14              BGE      |L1.26968|
00692e  1a08              SUBS     r0,r1,r0              ;10423
006930  49b7              LDR      r1,|L1.27664|
006932  f9b11000          LDRSH    r1,[r1,#0]            ;10423  ; speedChrgDU
006936  4288              CMP      r0,r1                 ;10423
006938  dd0e              BLE      |L1.26968|
00693a  48b6              LDR      r0,|L1.27668|
00693c  49b6              LDR      r1,|L1.27672|
00693e  f9b00000          LDRSH    r0,[r0,#0]            ;10425  ; Ib_ips_termokompensat
006942  8809              LDRH     r1,[r1,#0]            ;10425  ; IZMAX
006944  fb90f0fa          SDIV     r0,r0,r10             ;10425
006948  1a40              SUBS     r0,r0,r1              ;10425
00694a  b200              SXTH     r0,r0                 ;10425
00694c  f7fffffe          BL       abs
006950  2805              CMP      r0,#5                 ;10425
006952  da01              BGE      |L1.26968|
006954  8820              LDRH     r0,[r4,#0]            ;10430  ; speedChrgBlckStat
006956  b108              CBZ      r0,|L1.26972|
                  |L1.26968|
006958  7035              STRB     r5,[r6,#0]            ;10439
00695a  e7d9              B        |L1.26896|
                  |L1.26972|
00695c  7830              LDRB     r0,[r6,#0]            ;10432  ; speedChargeStartCnt
00695e  f1000001          ADD      r0,r0,#1              ;10432
006962  b2c0              UXTB     r0,r0                 ;10432
006964  7030              STRB     r0,[r6,#0]            ;10432
006966  283c              CMP      r0,#0x3c              ;10433
006968  d3d2              BCC      |L1.26896|
00696a  f7fffffe          BL       speedChargeStartStop
00696e  2005              MOVS     r0,#5                 ;10436
006970  f7fffffe          BL       speedz_mem_hndl
006974  e7cc              B        |L1.26896|
                  |L1.26998|
006976  8025              STRH     r5,[r4,#0]            ;10479
006978  48a8              LDR      r0,|L1.27676|
00697a  49a9              LDR      r1,|L1.27680|
00697c  f44f63fa          MOV      r3,#0x7d0             ;10482
006980  f9b00000          LDRSH    r0,[r0,#0]            ;10486  ; speedChrgBlckLog
006984  b918              CBNZ     r0,|L1.27022|
006986  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10486  ; adc_buff_
00698a  429a              CMP      r2,r3                 ;10486
00698c  dc05              BGT      |L1.27034|
                  |L1.27022|
00698e  2801              CMP      r0,#1                 ;10486
006990  d1c3              BNE      |L1.26906|
006992  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10486  ; adc_buff_
006996  4298              CMP      r0,r3                 ;10486
006998  dabf              BGE      |L1.26906|
                  |L1.27034|
00699a  f04f0001          MOV      r0,#1                 ;10486
00699e  8020              STRH     r0,[r4,#0]            ;10486
0069a0  e7bb              B        |L1.26906|
;;;10511  
                          ENDP

                  averageChargeHndl PROC
;;;10570  //-----------------------------------------------
;;;10571  void averageChargeHndl(void)
0069a2  e92d4ff8          PUSH     {r3-r11,lr}
;;;10572  {
;;;10573  /*
;;;10574  if(hv_vz_stat==hvsOFF)
;;;10575  	{
;;;10576  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10577  	} */
;;;10578  if(hv_vz_stat!=hvsOFF)
0069a6  f8dfa27c          LDR      r10,|L1.27684|
0069aa  f04f0b00          MOV      r11,#0
0069ae  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0069b2  b130              CBZ      r0,|L1.27074|
;;;10579  	{
;;;10580  	hv_vz_stat=hvsOFF; 	
0069b4  f88ab000          STRB     r11,[r10,#0]
;;;10581  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
0069b8  2100              MOVS     r1,#0
0069ba  f44f70b4          MOV      r0,#0x168
0069be  f7fffffe          BL       lc640_write
                  |L1.27074|
;;;10582  	}
;;;10583  
;;;10584  if(hv_vz_stat==hvsSTEP1)
0069c2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10585  	{
;;;10586  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10587  		{
;;;10588  		hv_vz_stat_cnt=5;
;;;10589  		}
;;;10590  	if(hv_vz_stat_cnt)
;;;10591  		{
;;;10592  		hv_vz_stat_cnt--;
;;;10593  		if(hv_vz_stat_cnt==0)
;;;10594  			{
;;;10595  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10596  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10597  			}
;;;10598  		}
;;;10599  	if(sk_stat[0]==1)
0069c6  4e7f              LDR      r6,|L1.27588|
0069c8  4d97              LDR      r5,|L1.27688|
0069ca  4c98              LDR      r4,|L1.27692|
0069cc  f04f0905          MOV      r9,#5                 ;10588
0069d0  2801              CMP      r0,#1                 ;10584
0069d2  d131              BNE      |L1.27192|
0069d4  7828              LDRB     r0,[r5,#0]            ;10586  ; hv_vz_stat_old
0069d6  2801              CMP      r0,#1                 ;10586
0069d8  d001              BEQ      |L1.27102|
0069da  f8a49000          STRH     r9,[r4,#0]            ;10588
                  |L1.27102|
0069de  f9b40000          LDRSH    r0,[r4,#0]            ;10590  ; hv_vz_stat_cnt
0069e2  b168              CBZ      r0,|L1.27136|
0069e4  f1a00001          SUB      r0,r0,#1              ;10592
0069e8  b200              SXTH     r0,r0                 ;10592
0069ea  8020              STRH     r0,[r4,#0]            ;10592
0069ec  b940              CBNZ     r0,|L1.27136|
0069ee  f04f0006          MOV      r0,#6                 ;10595
0069f2  f88a0000          STRB     r0,[r10,#0]           ;10595
0069f6  4601              MOV      r1,r0                 ;10596
0069f8  f44f70b4          MOV      r0,#0x168             ;10596
0069fc  f7fffffe          BL       lc640_write
                  |L1.27136|
006a00  7830              LDRB     r0,[r6,#0]  ; sk_stat
006a02  2801              CMP      r0,#1
006a04  d118              BNE      |L1.27192|
;;;10600  		{
;;;10601  		hv_vz_stat=hvsSTEP2;
006a06  f04f0002          MOV      r0,#2
006a0a  f88a0000          STRB     r0,[r10,#0]
;;;10602  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006a0e  4601              MOV      r1,r0
006a10  f44f70b4          MOV      r0,#0x168
006a14  f7fffffe          BL       lc640_write
;;;10603  		tree_up(iHV_STEP2_2,1,0,0);
006a18  2300              MOVS     r3,#0
006a1a  461a              MOV      r2,r3
006a1c  2101              MOVS     r1,#1
006a1e  20dd              MOVS     r0,#0xdd
006a20  f7fffffe          BL       tree_up
;;;10604  		tree_up(iHV_STEP2_1,0,0,0);
006a24  2300              MOVS     r3,#0
006a26  461a              MOV      r2,r3
006a28  4619              MOV      r1,r3
006a2a  20dc              MOVS     r0,#0xdc
006a2c  f7fffffe          BL       tree_up
;;;10605  		ret(1200);
006a30  f44f6096          MOV      r0,#0x4b0
006a34  f7fffffe          BL       ||ret||
                  |L1.27192|
;;;10606  		}
;;;10607  	}
;;;10608  
;;;10609  if(hv_vz_stat==hvsSTEP2)
006a38  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006a3c  2802              CMP      r0,#2
006a3e  d10b              BNE      |L1.27224|
;;;10610  	{
;;;10611  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006a40  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006a42  2902              CMP      r1,#2
006a44  d101              BNE      |L1.27210|
006a46  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006a48  b911              CBNZ     r1,|L1.27216|
                  |L1.27210|
;;;10612  		{
;;;10613  		hv_vz_stat_cnt=15;
006a4a  f04f010f          MOV      r1,#0xf
006a4e  8021              STRH     r1,[r4,#0]
                  |L1.27216|
;;;10614  		}
;;;10615  	hv_vz_stat_cnt--;
006a50  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006a52  f1a10101          SUB      r1,r1,#1
006a56  8021              STRH     r1,[r4,#0]
                  |L1.27224|
;;;10616  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10617  	//	{
;;;10618  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10619  	//				"  Напряжение будет  ",
;;;10620  	//				" увеличено до     @В",
;;;10621  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10622  	//				4800,UVZ,1);
;;;10623  	//	}
;;;10624  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10625  	//	{
;;;10626  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10627  	//				"     НАЖАТИЕМ       ",
;;;10628  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10629  	//				"      КНОПКИ        ",
;;;10630  	//				4800);
;;;10631  	//	} 
;;;10632  /*	if(sk_stat[1]==1)
;;;10633  		{
;;;10634  		hv_vz_stat=hvsWRK;
;;;10635  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10636  		}*/
;;;10637  	}
;;;10638  
;;;10639  if(hv_vz_stat==hvsSTEP3)
;;;10640  	{
;;;10641  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10642  		{
;;;10643  		hv_vz_stat_cnt=10;
006a58  270a              MOVS     r7,#0xa
;;;10644  		}
;;;10645  	hv_vz_stat_cnt--;
;;;10646  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10647  		{
;;;10648  		show_mess(	"     ВКЛЮЧИТЕ       ",
006a5a  f2413888          MOV      r8,#0x1388
006a5e  2803              CMP      r0,#3                 ;10639
006a60  d123              BNE      |L1.27306|
006a62  7828              LDRB     r0,[r5,#0]            ;10641  ; hv_vz_stat_old
006a64  2803              CMP      r0,#3                 ;10641
006a66  d101              BNE      |L1.27244|
006a68  8820              LDRH     r0,[r4,#0]            ;10641  ; hv_vz_stat_cnt
006a6a  b900              CBNZ     r0,|L1.27246|
                  |L1.27244|
006a6c  8027              STRH     r7,[r4,#0]            ;10643
                  |L1.27246|
006a6e  8820              LDRH     r0,[r4,#0]            ;10645  ; hv_vz_stat_cnt
006a70  f1a00001          SUB      r0,r0,#1              ;10645
006a74  b200              SXTH     r0,r0                 ;10645
006a76  8020              STRH     r0,[r4,#0]            ;10645
006a78  280a              CMP      r0,#0xa               ;10646
006a7a  d001              BEQ      |L1.27264|
006a7c  2809              CMP      r0,#9                 ;10646
006a7e  d10a              BNE      |L1.27286|
                  |L1.27264|
006a80  4b3b              LDR      r3,|L1.27504|
006a82  a26b              ADR      r2,|L1.27696|
006a84  3b48              SUBS     r3,r3,#0x48
006a86  f5a37194          SUB      r1,r3,#0x128
006a8a  f1010018          ADD      r0,r1,#0x18
006a8e  f8cd8000          STR      r8,[sp,#0]
006a92  f7fffffe          BL       show_mess
                  |L1.27286|
;;;10649  					"      ТУМБЛЕР       ",
;;;10650  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10651  					"       ЗАРЯД        ",
;;;10652  					5000);
;;;10653  		}
;;;10654  	if(sk_stat[1]==1)
006a96  7870              LDRB     r0,[r6,#1]  ; sk_stat
006a98  2801              CMP      r0,#1
006a9a  d106              BNE      |L1.27306|
;;;10655  		{
;;;10656  		hv_vz_stat=hvsWRK;
006a9c  f88a9000          STRB     r9,[r10,#0]
;;;10657  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006aa0  2105              MOVS     r1,#5
006aa2  f44f70b4          MOV      r0,#0x168
006aa6  f7fffffe          BL       lc640_write
                  |L1.27306|
;;;10658  		}
;;;10659  	}
;;;10660  
;;;10661  if(hv_vz_stat==hvsWRK)
006aaa  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006aae  2805              CMP      r0,#5
006ab0  d13a              BNE      |L1.27432|
;;;10662  	{
;;;10663  	if(hv_vz_stat_old!=hv_vz_stat)
006ab2  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10664  		{
;;;10665  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006ab4  4a64              LDR      r2,|L1.27720|
;;;10666  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10667  		hv_vz_up_cnt=0L;
006ab6  4947              LDR      r1,|L1.27604|
006ab8  2805              CMP      r0,#5                 ;10663
006aba  d00d              BEQ      |L1.27352|
006abc  4863              LDR      r0,|L1.27724|
006abe  f44f6361          MOV      r3,#0xe10             ;10665
006ac2  f9b00000          LDRSH    r0,[r0,#0]            ;10665  ; VZ_HR
006ac6  fb00f303          MUL      r3,r0,r3              ;10665
006aca  6013              STR      r3,[r2,#0]            ;10665  ; hv_vz_wrk_cnt
006acc  b910              CBNZ     r0,|L1.27348|
006ace  f44f60e1          MOV      r0,#0x708             ;10666
006ad2  6010              STR      r0,[r2,#0]            ;10666  ; hv_vz_wrk_cnt
                  |L1.27348|
006ad4  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27352|
;;;10668  		}
;;;10669  	hv_vz_wrk_cnt--;
006ad8  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006ada  f1a00001          SUB      r0,r0,#1
006ade  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10670  	hv_vz_up_cnt++;
006ae0  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006ae2  f1020201          ADD      r2,r2,#1
006ae6  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10671  
;;;10672  	if(hv_vz_wrk_cnt==0)
006ae8  b940              CBNZ     r0,|L1.27388|
;;;10673  		{
;;;10674  		hv_vz_stat=hvsERR4;
006aea  f04f0009          MOV      r0,#9
006aee  f88a0000          STRB     r0,[r10,#0]
;;;10675  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006af2  4601              MOV      r1,r0
006af4  f44f70b4          MOV      r0,#0x168
006af8  f7fffffe          BL       lc640_write
                  |L1.27388|
;;;10676  		}
;;;10677  	if(sk_stat[0]==0)
006afc  7830              LDRB     r0,[r6,#0]  ; sk_stat
006afe  b940              CBNZ     r0,|L1.27410|
;;;10678  		{
;;;10679  		hv_vz_stat=hvsERR2;
006b00  f04f0007          MOV      r0,#7
006b04  f88a0000          STRB     r0,[r10,#0]
;;;10680  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006b08  4601              MOV      r1,r0
006b0a  f44f70b4          MOV      r0,#0x168
006b0e  f7fffffe          BL       lc640_write
                  |L1.27410|
;;;10681  		}
;;;10682  	if(sk_stat[1]==0)
006b12  7870              LDRB     r0,[r6,#1]  ; sk_stat
006b14  b940              CBNZ     r0,|L1.27432|
;;;10683  		{
;;;10684  		hv_vz_stat=hvsERR3;
006b16  f04f0008          MOV      r0,#8
006b1a  f88a0000          STRB     r0,[r10,#0]
;;;10685  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006b1e  4601              MOV      r1,r0
006b20  f44f70b4          MOV      r0,#0x168
006b24  f7fffffe          BL       lc640_write
                  |L1.27432|
;;;10686  		}
;;;10687  	}
;;;10688  
;;;10689  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006b28  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006b2c  2806              CMP      r0,#6
006b2e  d119              BNE      |L1.27492|
;;;10690  	{
;;;10691  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006b30  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006b32  2806              CMP      r0,#6
006b34  d101              BNE      |L1.27450|
006b36  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006b38  b900              CBNZ     r0,|L1.27452|
                  |L1.27450|
;;;10692  		{
;;;10693  		hv_vz_stat_cnt=10;
006b3a  8027              STRH     r7,[r4,#0]
                  |L1.27452|
;;;10694  		}
;;;10695  	hv_vz_stat_cnt--;
006b3c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006b3e  f1a00001          SUB      r0,r0,#1
006b42  b200              SXTH     r0,r0
006b44  8020              STRH     r0,[r4,#0]
;;;10696  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006b46  280a              CMP      r0,#0xa
006b48  d001              BEQ      |L1.27470|
006b4a  2809              CMP      r0,#9
006b4c  d10a              BNE      |L1.27492|
                  |L1.27470|
;;;10697  		{
;;;10698  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006b4e  4b23              LDR      r3,|L1.27612|
006b50  f8cd8000          STR      r8,[sp,#0]
006b54  f1030218          ADD      r2,r3,#0x18
006b58  f1020118          ADD      r1,r2,#0x18
006b5c  f5a16095          SUB      r0,r1,#0x4a8
006b60  f7fffffe          BL       show_mess
                  |L1.27492|
;;;10699  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10700  					"      ВКЛЮЧЕН       ",
;;;10701  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10702  					5000);
;;;10703  		}
;;;10704  	}
;;;10705  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006b64  e074              B        |L1.27728|
006b66  0000              DCW      0x0000
                  |L1.27496|
                          DCD      speedChrgBlckStat
                  |L1.27500|
                          DCD      ||area_number.25||
                  |L1.27504|
                          DCD      ||.text||+0x1a54
                  |L1.27508|
006b74  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006b78  e7e0e1eb
006b7c  eeeae8f0
006b80  eee2e0ed
006b84  21      
006b85  20202000          DCB      "   ",0
006b89  00                DCB      0
006b8a  00                DCB      0
006b8b  00                DCB      0
                  |L1.27532|
006b8c  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006b90  202020e7
006b94  e0f0ffe4
006b98  20202020
006b9c  20202020
006ba0  00      
006ba1  00                DCB      0
006ba2  00                DCB      0
006ba3  00                DCB      0
                  |L1.27556|
006ba4  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006ba8  20d3f1ea
006bac  eef0e5ed
006bb0  edfbe920
006bb4  20202020
006bb8  00      
006bb9  00                DCB      0
006bba  00                DCB      0
006bbb  00                DCB      0
                  |L1.27580|
                          DCD      sp_ch_stat
                  |L1.27584|
                          DCD      SP_CH_VENT_BLOK
                  |L1.27588|
                          DCD      sk_stat
                  |L1.27592|
                          DCD      sp_ch_stat_old
                  |L1.27596|
                          DCD      sp_ch_stat_cnt
                  |L1.27600|
                          DCD      sp_ch_wrk_cnt
                  |L1.27604|
                          DCD      hv_vz_up_cnt
                  |L1.27608|
                          DCD      speedChrgTimeInHour
                  |L1.27612|
                          DCD      ||.text||+0x191c
                  |L1.27616|
006be0  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006be4  caced0c5
006be8  cdcddbc9
006bec  20c7c0  
006bef  d0dfc420          DCB      208,223,196,"  ",0
006bf3  2000    
006bf5  00                DCB      0
006bf6  00                DCB      0
006bf7  00                DCB      0
                  |L1.27640|
                          DCD      ||.text||+0x145c
                  |L1.27644|
                          DCD      speedChrgAvtEn
                  |L1.27648|
                          DCD      speedChargeStartCnt
                  |L1.27652|
                          DCD      speedChrgBlckSrc
                  |L1.27656|
                          DCD      load_U
                  |L1.27660|
                          DCD      u_necc
                  |L1.27664|
                          DCD      speedChrgDU
                  |L1.27668|
                          DCD      Ib_ips_termokompensat
                  |L1.27672|
                          DCD      IZMAX
                  |L1.27676|
                          DCD      speedChrgBlckLog
                  |L1.27680|
                          DCD      ||.bss||+0x40c
                  |L1.27684|
                          DCD      hv_vz_stat
                  |L1.27688|
                          DCD      hv_vz_stat_old
                  |L1.27692|
                          DCD      hv_vz_stat_cnt
                  |L1.27696|
006c30  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006c34  dbd0c0c2
006c38  cdc8c2c0
006c3c  ded9c8c9
006c40  20202020          DCB      "    ",0
006c44  00      
006c45  00                DCB      0
006c46  00                DCB      0
006c47  00                DCB      0
                  |L1.27720|
                          DCD      hv_vz_wrk_cnt
                  |L1.27724|
                          DCD      VZ_HR
                  |L1.27728|
006c50  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c54  2807              CMP      r0,#7
006c56  d123              BNE      |L1.27808|
;;;10706  	{
;;;10707  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006c58  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006c5a  2807              CMP      r0,#7
006c5c  d101              BNE      |L1.27746|
006c5e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006c60  b900              CBNZ     r0,|L1.27748|
                  |L1.27746|
;;;10708  		{
;;;10709  		hv_vz_stat_cnt=10;
006c62  8027              STRH     r7,[r4,#0]
                  |L1.27748|
;;;10710  		}
;;;10711  	hv_vz_stat_cnt--;
006c64  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006c66  f1a00001          SUB      r0,r0,#1
006c6a  b200              SXTH     r0,r0
006c6c  8020              STRH     r0,[r4,#0]
;;;10712  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006c6e  280a              CMP      r0,#0xa
006c70  d001              BEQ      |L1.27766|
006c72  2809              CMP      r0,#9
006c74  d10a              BNE      |L1.27788|
                  |L1.27766|
;;;10713  		{
;;;10714  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006c76  4bff              LDR      r3,|L1.28788|
006c78  f8cd8000          STR      r8,[sp,#0]
006c7c  f1030218          ADD      r2,r3,#0x18
006c80  f1020118          ADD      r1,r2,#0x18
006c84  f1010018          ADD      r0,r1,#0x18
006c88  f7fffffe          BL       show_mess
                  |L1.27788|
;;;10715  					"    ЗАБЛОКИРОВАН    ",
;;;10716  					"     НЕИСПРАВНА     ",
;;;10717  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10718  					5000);
;;;10719  		}
;;;10720  	if(sk_stat[0]==1)
006c8c  7830              LDRB     r0,[r6,#0]  ; sk_stat
006c8e  2801              CMP      r0,#1
006c90  d106              BNE      |L1.27808|
;;;10721  		{
;;;10722  		hv_vz_stat=hvsWRK;
006c92  f88a9000          STRB     r9,[r10,#0]
;;;10723  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006c96  2105              MOVS     r1,#5
006c98  f44f70b4          MOV      r0,#0x168
006c9c  f7fffffe          BL       lc640_write
                  |L1.27808|
;;;10724  		}
;;;10725  	}
;;;10726  
;;;10727  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006ca0  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006ca4  2808              CMP      r0,#8
006ca6  d123              BNE      |L1.27888|
;;;10728  	{
;;;10729  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006ca8  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006caa  2808              CMP      r0,#8
006cac  d101              BNE      |L1.27826|
006cae  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006cb0  b900              CBNZ     r0,|L1.27828|
                  |L1.27826|
;;;10730  		{
;;;10731  		hv_vz_stat_cnt=10;
006cb2  8027              STRH     r7,[r4,#0]
                  |L1.27828|
;;;10732  		}
;;;10733  	hv_vz_stat_cnt--;
006cb4  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006cb6  f1a00001          SUB      r0,r0,#1
006cba  b200              SXTH     r0,r0
006cbc  8020              STRH     r0,[r4,#0]
;;;10734  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006cbe  280a              CMP      r0,#0xa
006cc0  d001              BEQ      |L1.27846|
006cc2  2809              CMP      r0,#9
006cc4  d10a              BNE      |L1.27868|
                  |L1.27846|
;;;10735  		{
;;;10736  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006cc6  4bec              LDR      r3,|L1.28792|
006cc8  f8cd8000          STR      r8,[sp,#0]
006ccc  f5a3621a          SUB      r2,r3,#0x9a0
006cd0  f1020118          ADD      r1,r2,#0x18
006cd4  f5a160a1          SUB      r0,r1,#0x508
006cd8  f7fffffe          BL       show_mess
                  |L1.27868|
;;;10737  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10738  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10739  					"    ТУМБЛЕРА!!!     ",
;;;10740  					5000);
;;;10741  		}
;;;10742  	if(sk_stat[1]==1)
006cdc  7870              LDRB     r0,[r6,#1]  ; sk_stat
006cde  2801              CMP      r0,#1
006ce0  d106              BNE      |L1.27888|
;;;10743  		{
;;;10744  		hv_vz_stat=hvsWRK;
006ce2  f88a9000          STRB     r9,[r10,#0]
;;;10745  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006ce6  2105              MOVS     r1,#5
006ce8  f44f70b4          MOV      r0,#0x168
006cec  f7fffffe          BL       lc640_write
                  |L1.27888|
;;;10746  		}
;;;10747  	}
;;;10748  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006cf0  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006cf4  2809              CMP      r0,#9
006cf6  d124              BNE      |L1.27970|
;;;10749  	{
;;;10750  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006cf8  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006cfa  2809              CMP      r0,#9
006cfc  d101              BNE      |L1.27906|
006cfe  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006d00  b900              CBNZ     r0,|L1.27908|
                  |L1.27906|
;;;10751  		{
;;;10752  		hv_vz_stat_cnt=10;
006d02  8027              STRH     r7,[r4,#0]
                  |L1.27908|
;;;10753  		}
;;;10754  	hv_vz_stat_cnt--;
006d04  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006d06  f1a00001          SUB      r0,r0,#1
006d0a  b200              SXTH     r0,r0
006d0c  8020              STRH     r0,[r4,#0]
;;;10755  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006d0e  280a              CMP      r0,#0xa
006d10  d001              BEQ      |L1.27926|
006d12  2809              CMP      r0,#9
006d14  d10a              BNE      |L1.27948|
                  |L1.27926|
;;;10756  		{
;;;10757  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006d16  4bd9              LDR      r3,|L1.28796|
006d18  f2af02ec          ADR      r2,|L1.27696|
006d1c  f5a37194          SUB      r1,r3,#0x128
006d20  f50170ac          ADD      r0,r1,#0x158
006d24  f8cd8000          STR      r8,[sp,#0]
006d28  f7fffffe          BL       show_mess
                  |L1.27948|
;;;10758  					"      ТУМБЛЕР       ",
;;;10759  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10760  					"       ЗАРЯД        ",
;;;10761  					5000);
;;;10762  		}
;;;10763  	if(sk_stat[1]==0)
006d2c  7870              LDRB     r0,[r6,#1]  ; sk_stat
006d2e  b940              CBNZ     r0,|L1.27970|
;;;10764  		{
;;;10765  		hv_vz_stat=hvsOFF;
006d30  f88ab000          STRB     r11,[r10,#0]
;;;10766  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006d34  2100              MOVS     r1,#0
006d36  f44f70b4          MOV      r0,#0x168
006d3a  f7fffffe          BL       lc640_write
;;;10767  		vz_stop();
006d3e  f7fffffe          BL       vz_stop
                  |L1.27970|
;;;10768  
;;;10769  		}
;;;10770  	}
;;;10771  hv_vz_stat_old=hv_vz_stat;
006d42  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006d46  7028              STRB     r0,[r5,#0]
;;;10772  /*
;;;10773  if(speedChIsOn)
;;;10774  	{
;;;10775  	speedChTimeCnt++;
;;;10776  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10777  		{
;;;10778  		speedChIsOn=0;
;;;10779  		}
;;;10780  	if(speedChrgBlckStat)
;;;10781  		{
;;;10782  		speedChIsOn=0;
;;;10783  		speedChTimeCnt=0;
;;;10784  		}
;;;10785  	}
;;;10786  
;;;10787  
;;;10788  
;;;10789  if(speedChrgAvtEn)
;;;10790  	{
;;;10791  	if(!speedChIsOn)
;;;10792  		{
;;;10793  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10794  			{
;;;10795  			speedChIsOn=1;
;;;10796  			}
;;;10797  		}
;;;10798  	}
;;;10799  
;;;10800  
;;;10801  
;;;10802  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10803  else
;;;10804  	{
;;;10805  	speedChrgBlckStat=0;
;;;10806  	if(speedChrgBlckSrc==1)
;;;10807  		{
;;;10808  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10809  		}
;;;10810  	else if(speedChrgBlckSrc==2)
;;;10811  		{
;;;10812  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10813  		}
;;;10814  	}
;;;10815  
;;;10816  
;;;10817  if(speedChrgBlckStat==1)
;;;10818  	{
;;;10819  
;;;10820  	//speedChargeStartStop();
;;;10821  
;;;10822  	speedChrgShowCnt++;
;;;10823  	if(speedChrgShowCnt>=30)	
;;;10824  		{
;;;10825  		speedChrgShowCnt=0;
;;;10826  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10827  					"       ЗАРЯД        ",
;;;10828  					"     ЗАПРЕЩЕН!!!    ",
;;;10829  					"                    ",
;;;10830  					5000);
;;;10831  		}
;;;10832  	}
;;;10833  else speedChrgShowCnt=0;
;;;10834  
;;;10835  */
;;;10836  }
006d48  e5e7              B        |L1.26906|
;;;10837  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10854  //-----------------------------------------------
;;;10855  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006d4a  e92d41f0          PUSH     {r4-r8,lr}
;;;10856  {
;;;10857  
;;;10858  numOfForvardBps_old=numOfForvardBps;
006d4e  4ccc              LDR      r4,|L1.28800|
006d50  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006d52  7060              STRB     r0,[r4,#1]
;;;10859  
;;;10860  numOfForvardBps=0;
006d54  f04f0500          MOV      r5,#0
006d58  f8045928          STRB     r5,[r4],#-0x28
;;;10861  
;;;10862  //FORVARDBPSCHHOUR=10;
;;;10863  
;;;10864  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006d5c  4ec9              LDR      r6,|L1.28804|
006d5e  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006d62  2800              CMP      r0,#0
006d64  dd02              BLE      |L1.28012|
006d66  f5b07ffa          CMP      r0,#0x1f4
006d6a  dd02              BLE      |L1.28018|
                  |L1.28012|
;;;10865  	{
;;;10866  	FORVARDBPSCHHOUR=0;
006d6c  8035              STRH     r5,[r6,#0]
                  |L1.28014|
;;;10867  	return;
;;;10868  	}
;;;10869  
;;;10870  numOfForvardBps_minCnt++;
;;;10871  
;;;10872  
;;;10873  if(numOfForvardBps_minCnt>=60)
;;;10874  	{
;;;10875  	numOfForvardBps_minCnt=0;
;;;10876  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10877  	numOfForvardBps_hourCnt++;
;;;10878  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10879  		{
;;;10880  		numOfForvardBps_hourCnt=0;
;;;10881  		}
;;;10882  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10883  	}
;;;10884  
;;;10885  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10886  
;;;10887  //if(numOfForvardBps)
;;;10888  //numOfForvardBps_old=numOfForvardBps; 
;;;10889  }
006d6e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28018|
006d72  f894002a          LDRB     r0,[r4,#0x2a]         ;10870  ; numOfForvardBps_minCnt
006d76  f1000001          ADD      r0,r0,#1              ;10870
006d7a  b2c0              UXTB     r0,r0                 ;10870
006d7c  f884002a          STRB     r0,[r4,#0x2a]         ;10870
006d80  283c              CMP      r0,#0x3c              ;10873
006d82  d31b              BCC      |L1.28092|
006d84  f884502a          STRB     r5,[r4,#0x2a]         ;10875
006d88  f44f7794          MOV      r7,#0x128             ;10876
006d8c  4638              MOV      r0,r7                 ;10876
006d8e  f7fffffe          BL       lc640_read_int
006d92  f1000001          ADD      r0,r0,#1              ;10877
006d96  b200              SXTH     r0,r0                 ;10877
006d98  f8a40078          STRH     r0,[r4,#0x78]         ;10877
006d9c  4aba              LDR      r2,|L1.28808|
006d9e  f9b61000          LDRSH    r1,[r6,#0]            ;10878  ; FORVARDBPSCHHOUR
006da2  f9b22000          LDRSH    r2,[r2,#0]            ;10878  ; NUMIST
006da6  fb01f102          MUL      r1,r1,r2              ;10878
006daa  4281              CMP      r1,r0                 ;10878
006dac  dc01              BGT      |L1.28082|
006dae  f8a45078          STRH     r5,[r4,#0x78]         ;10880
                  |L1.28082|
006db2  f9b41078          LDRSH    r1,[r4,#0x78]         ;10882  ; numOfForvardBps_hourCnt
006db6  4638              MOV      r0,r7                 ;10882
006db8  f7fffffe          BL       lc640_write_int
                  |L1.28092|
006dbc  f9b40078          LDRSH    r0,[r4,#0x78]         ;10885  ; numOfForvardBps_hourCnt
006dc0  f9b61000          LDRSH    r1,[r6,#0]            ;10885  ; FORVARDBPSCHHOUR
006dc4  fb90f0f1          SDIV     r0,r0,r1              ;10885
006dc8  f8840028          STRB     r0,[r4,#0x28]         ;10885
006dcc  e7cf              B        |L1.28014|
;;;10890  
                          ENDP

                  numOfForvardBps_init PROC
;;;10891  //-----------------------------------------------
;;;10892  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006dce  b510              PUSH     {r4,lr}
;;;10893  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10894  lc640_write_int(EE_FORVBPSHOURCNT,0);
006dd0  2100              MOVS     r1,#0
006dd2  f44f7094          MOV      r0,#0x128
006dd6  f7fffffe          BL       lc640_write_int
;;;10895  numOfForvardBps_minCnt=58;
006dda  49a9              LDR      r1,|L1.28800|
006ddc  f04f003a          MOV      r0,#0x3a
006de0  f1a10128          SUB      r1,r1,#0x28
006de4  f881002a          STRB     r0,[r1,#0x2a]
;;;10896  }
006de8  bd10              POP      {r4,pc}
;;;10897  
                          ENDP

                  outVoltContrHndl PROC
;;;10898  //-----------------------------------------------
;;;10899  void outVoltContrHndl(void)
006dea  b570              PUSH     {r4-r6,lr}
;;;10900  { 
;;;10901  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006dec  4ca7              LDR      r4,|L1.28812|
006dee  48a8              LDR      r0,|L1.28816|
;;;10902  	{
;;;10903  	outVoltContrHndlCnt_=0;
;;;10904  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006df0  4aa8              LDR      r2,|L1.28820|
006df2  f9b41000          LDRSH    r1,[r4,#0]            ;10901  ; load_U
006df6  f9b06000          LDRSH    r6,[r0,#0]            ;10901  ; U_OUT_KONTR_MAX
006dfa  2500              MOVS     r5,#0                 ;10903
006dfc  f9b20000          LDRSH    r0,[r2,#0]
006e00  4ba5              LDR      r3,|L1.28824|
006e02  42b1              CMP      r1,r6                 ;10901
006e04  dc04              BGT      |L1.28176|
006e06  4ea5              LDR      r6,|L1.28828|
006e08  f9b66000          LDRSH    r6,[r6,#0]            ;10901  ; U_OUT_KONTR_MIN
006e0c  42b1              CMP      r1,r6                 ;10901
006e0e  da0f              BGE      |L1.28208|
                  |L1.28176|
006e10  801d              STRH     r5,[r3,#0]            ;10903
006e12  49a3              LDR      r1,|L1.28832|
006e14  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006e18  4288              CMP      r0,r1
006e1a  da1b              BGE      |L1.28244|
;;;10905  		{
;;;10906  		outVoltContrHndlCnt++;
006e1c  f1000001          ADD      r0,r0,#1
006e20  b200              SXTH     r0,r0
006e22  8010              STRH     r0,[r2,#0]
;;;10907  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006e24  4288              CMP      r0,r1
006e26  d115              BNE      |L1.28244|
;;;10908  			{
;;;10909  			avar_uout_hndl(1);
006e28  2001              MOVS     r0,#1
006e2a  f7fffffe          BL       avar_uout_hndl
006e2e  e011              B        |L1.28244|
                  |L1.28208|
;;;10910  			}
;;;10911  		}
;;;10912  	}
;;;10913  else
;;;10914  	{
;;;10915  	if(outVoltContrHndlCnt)
006e30  b180              CBZ      r0,|L1.28244|
;;;10916  		{
;;;10917  		if(outVoltContrHndlCnt_<5)
006e32  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006e36  2805              CMP      r0,#5
006e38  da0c              BGE      |L1.28244|
;;;10918  			{
;;;10919  			outVoltContrHndlCnt_++;
006e3a  f1000001          ADD      r0,r0,#1
006e3e  b200              SXTH     r0,r0
006e40  8018              STRH     r0,[r3,#0]
;;;10920  			if(outVoltContrHndlCnt_>=5)
006e42  2805              CMP      r0,#5
006e44  db06              BLT      |L1.28244|
;;;10921  				{
;;;10922  				outVoltContrHndlCnt=0;
006e46  8015              STRH     r5,[r2,#0]
;;;10923  				if(uout_av)avar_uout_hndl(0);
006e48  4896              LDR      r0,|L1.28836|
006e4a  7800              LDRB     r0,[r0,#0]  ; uout_av
006e4c  b110              CBZ      r0,|L1.28244|
006e4e  2000              MOVS     r0,#0
006e50  f7fffffe          BL       avar_uout_hndl
                  |L1.28244|
;;;10924  				}
;;;10925  			}
;;;10926  		}
;;;10927  	}
;;;10928  
;;;10929  if (load_U<(USIGN*10)) 
006e54  4894              LDR      r0,|L1.28840|
006e56  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006e5a  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006e5e  eb000080          ADD      r0,r0,r0,LSL #2
006e62  ebb10f40          CMP      r1,r0,LSL #1
006e66  da0b              BGE      |L1.28288|
;;;10930  	{
;;;10931  	if(!bSILENT)
006e68  4890              LDR      r0,|L1.28844|
006e6a  6800              LDR      r0,[r0,#0]  ; bSILENT
006e6c  2800              CMP      r0,#0
006e6e  d107              BNE      |L1.28288|
;;;10932  		{
;;;10933  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006e70  e8bd4070          POP      {r4-r6,lr}
006e74  2314              MOVS     r3,#0x14
006e76  2201              MOVS     r2,#1
006e78  2172              MOVS     r1,#0x72
006e7a  20d2              MOVS     r0,#0xd2
006e7c  f7ffbffe          B.W      mess_send
                  |L1.28288|
;;;10934  		}
;;;10935  
;;;10936  	//bU_BAT2REL_AV_BAT=1;
;;;10937  	}
;;;10938  
;;;10939  
;;;10940  }
006e80  bd70              POP      {r4-r6,pc}
;;;10941  
                          ENDP

                  vent_resurs_hndl PROC
;;;10942  //-----------------------------------------------
;;;10943  void vent_resurs_hndl(void)
006e82  e92d47f0          PUSH     {r4-r10,lr}
;;;10944  {
;;;10945  char i;
;;;10946  char crc_in,crc_eval;
;;;10947  
;;;10948  for(i=0;i<NUMIST;i++)
006e86  f04f0200          MOV      r2,#0
;;;10949  	{
;;;10950  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10951  		{
;;;10952  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10953  		}
;;;10954  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10955  		{
;;;10956  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10957  		}
;;;10958  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10959  		{
;;;10960  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10961  		}
;;;10962  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10963  		{
;;;10964  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10965  		}
;;;10966  	crc_in=0;
;;;10967  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10968  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10969  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10970  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10971  
;;;10972  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10973  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10974  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10975  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10976  
;;;10977  	if(crc_eval==crc_in)
;;;10978  		{
;;;10979  		unsigned short temp_US;
;;;10980  		temp_US=0;
;;;10981  
;;;10982  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10983  		temp_US<<=4;
;;;10984  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10985  		temp_US<<=4;
;;;10986  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10987  		temp_US<<=4;
;;;10988  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10989  
;;;10990  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10991  		}
;;;10992  
;;;10993  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006e8a  4889              LDR      r0,|L1.28848|
006e8c  f8dfc224          LDR      r12,|L1.28852|
006e90  f9b06000          LDRSH    r6,[r0,#0]
006e94  487c              LDR      r0,|L1.28808|
006e96  f9b07000          LDRSH    r7,[r0,#0]            ;10948
006e9a  e06e              B        |L1.28538|
                  |L1.28316|
006e9c  eb0200c2          ADD      r0,r2,r2,LSL #3       ;10950
006ea0  eb001002          ADD      r0,r0,r2,LSL #4       ;10950
006ea4  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10950
006ea8  7b41              LDRB     r1,[r0,#0xd]          ;10950
006eaa  098b              LSRS     r3,r1,#6              ;10950
006eac  d006              BEQ      |L1.28348|
006eae  2301              MOVS     r3,#1                 ;10954
006eb0  ebb31f91          CMP      r3,r1,LSR #6          ;10954
006eb4  d105              BNE      |L1.28354|
006eb6  f8801059          STRB     r1,[r0,#0x59]         ;10956
006eba  e00f              B        |L1.28380|
                  |L1.28348|
006ebc  f8801058          STRB     r1,[r0,#0x58]         ;10952
006ec0  e00c              B        |L1.28380|
                  |L1.28354|
006ec2  2302              MOVS     r3,#2                 ;10958
006ec4  ebb31f91          CMP      r3,r1,LSR #6          ;10958
006ec8  d102              BNE      |L1.28368|
006eca  f880105a          STRB     r1,[r0,#0x5a]         ;10960
006ece  e005              B        |L1.28380|
                  |L1.28368|
006ed0  2303              MOVS     r3,#3                 ;10962
006ed2  ebb31f91          CMP      r3,r1,LSR #6          ;10962
006ed6  d101              BNE      |L1.28380|
006ed8  f880105b          STRB     r1,[r0,#0x5b]         ;10964
                  |L1.28380|
006edc  f8101f58          LDRB     r1,[r0,#0x58]!        ;10967
006ee0  f3c11401          UBFX     r4,r1,#4,#2           ;10967
006ee4  7843              LDRB     r3,[r0,#1]            ;10968
006ee6  f0030530          AND      r5,r3,#0x30           ;10968
006eea  ea440495          ORR      r4,r4,r5,LSR #2       ;10968
006eee  f8909002          LDRB     r9,[r0,#2]            ;10969
006ef2  f0090830          AND      r8,r9,#0x30           ;10969
006ef6  ea480804          ORR      r8,r8,r4              ;10969
006efa  78c5              LDRB     r5,[r0,#3]            ;10970
006efc  f1a00058          SUB      r0,r0,#0x58           ;10970
006f00  f0050430          AND      r4,r5,#0x30           ;10970
006f04  ea480884          ORR      r8,r8,r4,LSL #2       ;10970
006f08  f001010f          AND      r1,r1,#0xf            ;10972
006f0c  f003040f          AND      r4,r3,#0xf            ;10973
006f10  ea840a01          EOR      r10,r4,r1             ;10973
006f14  f009030f          AND      r3,r9,#0xf            ;10974
006f18  ea83090a          EOR      r9,r3,r10             ;10974
006f1c  f005050f          AND      r5,r5,#0xf            ;10975
006f20  ea850909          EOR      r9,r5,r9              ;10975
006f24  45c1              CMP      r9,r8                 ;10977
006f26  d113              BNE      |L1.28496|
006f28  ea4f1505          LSL      r5,r5,#4              ;10983
006f2c  ea430305          ORR      r3,r3,r5              ;10984
006f30  ea4f1303          LSL      r3,r3,#4              ;10985
006f34  ea440403          ORR      r4,r4,r3              ;10986
006f38  ea4f5304          LSL      r3,r4,#20             ;10987
006f3c  ea4f4313          LSR      r3,r3,#16             ;10987
006f40  ea410103          ORR      r1,r1,r3              ;10988
006f44  f8b0305c          LDRH     r3,[r0,#0x5c]         ;10990
006f48  428b              CMP      r3,r1                 ;10990
006f4a  d001              BEQ      |L1.28496|
006f4c  f8a0105c          STRH     r1,[r0,#0x5c]         ;10990
                  |L1.28496|
006f50  f8b0105c          LDRH     r1,[r0,#0x5c]
006f54  eb060386          ADD      r3,r6,r6,LSL #2
006f58  ebb10f43          CMP      r1,r3,LSL #1
006f5c  dd06              BLE      |L1.28524|
006f5e  2e00              CMP      r6,#0
006f60  dd04              BLE      |L1.28524|
;;;10994  		{
;;;10995  		bps[i]._av|=(1<<4);
006f62  7841              LDRB     r1,[r0,#1]
006f64  f0410110          ORR      r1,r1,#0x10
006f68  7041              STRB     r1,[r0,#1]
006f6a  e003              B        |L1.28532|
                  |L1.28524|
;;;10996  		}
;;;10997  	else bps[i]._av&=~(1<<4);
006f6c  7841              LDRB     r1,[r0,#1]
006f6e  f0210110          BIC      r1,r1,#0x10
006f72  7041              STRB     r1,[r0,#1]
                  |L1.28532|
006f74  f1020201          ADD      r2,r2,#1              ;10948
006f78  b2d2              UXTB     r2,r2                 ;10948
                  |L1.28538|
006f7a  42ba              CMP      r2,r7                 ;10948
006f7c  db8e              BLT      |L1.28316|
;;;10998  	}
;;;10999  }
006f7e  e8bd87f0          POP      {r4-r10,pc}
;;;11000  
                          ENDP

                  vent_hndl PROC
;;;11001  //-----------------------------------------------
;;;11002  void vent_hndl(void)
006f82  e92d4ff0          PUSH     {r4-r11,lr}
;;;11003  {
006f86  b087              SUB      sp,sp,#0x1c
;;;11004  if(RELEVENTSIGN==rvsAKB)
;;;11005  	{
;;;11006  	if(vent_stat==0)
006f88  4c3d              LDR      r4,|L1.28800|
006f8a  484b              LDR      r0,|L1.28856|
;;;11007  		{
;;;11008  		if	(
;;;11009  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
006f8c  494b              LDR      r1,|L1.28860|
;;;11010  			||
;;;11011  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11012  			)
;;;11013  			{
;;;11014  			vent_stat=1;
;;;11015  			}
;;;11016  		}
;;;11017  	else if(vent_stat==1)
;;;11018  		{
;;;11019  		if	(
;;;11020  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006f8e  4a4c              LDR      r2,|L1.28864|
006f90  3c28              SUBS     r4,r4,#0x28           ;11006
006f92  7800              LDRB     r0,[r0,#0]            ;11004  ; RELEVENTSIGN
006f94  f9943000          LDRSB    r3,[r4,#0]            ;11006
006f98  f9b11000          LDRSH    r1,[r1,#0]            ;11009
006f9c  f9b22000          LDRSH    r2,[r2,#0]
006fa0  b148              CBZ      r0,|L1.28598|
;;;11021  			&&
;;;11022  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11023  			)
;;;11024  			{
;;;11025  			vent_stat=0;
;;;11026  			}
;;;11027  		}
;;;11028  	}
;;;11029  else if(RELEVENTSIGN==rvsBPS)
006fa2  2802              CMP      r0,#2
006fa4  d03c              BEQ      |L1.28704|
;;;11030  	{
;;;11031  /*	if	(
;;;11032  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11033  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11034  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11035  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11036  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11037  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11038  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11039  		)
;;;11040  		{
;;;11041  		vent_stat=1;
;;;11042  		}
;;;11043  	else vent_stat=0;
;;;11044  	*/
;;;11045  
;;;11046  	if	(
;;;11047  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11048  		||
;;;11049  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11050  		||
;;;11051  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11052  		||
;;;11053  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11054  		||
;;;11055  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11056  		||
;;;11057  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11058  		||
;;;11059  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11060  		||
;;;11061  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11062  		)
;;;11063  		{
;;;11064  		vent_stat=1;
;;;11065  		}
;;;11066  	else if(vent_stat==1)
;;;11067  		{
;;;11068  		if	(
;;;11069  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11070  			&&
;;;11071  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11072  			&&
;;;11073  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11074  			&&
;;;11075  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11076  			&&
;;;11077  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11078  			&&
;;;11079  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11080  			&&
;;;11081  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11082  			&&
;;;11083  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11084  			)
;;;11085  			{
;;;11086  			vent_stat=0;
;;;11087  			}
;;;11088  		}
;;;11089  	}
;;;11090  else if(RELEVENTSIGN==rvsEXT)
006fa6  2801              CMP      r0,#1
006fa8  d063              BEQ      |L1.28786|
;;;11091  	{
;;;11092  	if	(
;;;11093  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11094  		||
;;;11095  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11096  		||
;;;11097  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11098  		)
;;;11099  		{
;;;11100  		vent_stat=1;
;;;11101  		}
;;;11102  	else if(vent_stat==1)
;;;11103  		{
;;;11104  		if	(
;;;11105  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11106  			&&
;;;11107  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11108  			&&
;;;11109  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11110  			)
;;;11111  			{
;;;11112  			vent_stat=0;
;;;11113  			}
;;;11114  		}
;;;11115  	}
;;;11116  else vent_stat=1;
006faa  f04f0001          MOV      r0,#1
006fae  7020              STRB     r0,[r4,#0]
                  |L1.28592|
;;;11117  }
006fb0  b007              ADD      sp,sp,#0x1c
006fb2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.28598|
006fb6  4f43              LDR      r7,|L1.28868|
006fb8  f8df810c          LDR      r8,|L1.28872|
006fbc  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11009
006fc0  7b3d              LDRB     r5,[r7,#0xc]          ;11009
006fc2  f9b76056          LDRSH    r6,[r7,#0x56]         ;11011
006fc6  f898c000          LDRB     r12,[r8,#0]           ;11008
006fca  f8977058          LDRB     r7,[r7,#0x58]         ;11011
006fce  f8988001          LDRB     r8,[r8,#1]            ;11011
006fd2  b12b              CBZ      r3,|L1.28640|
006fd4  2b01              CMP      r3,#1                 ;11017
006fd6  d1eb              BNE      |L1.28592|
006fd8  f1bc0f55          CMP      r12,#0x55             ;11019
006fdc  d115              BNE      |L1.28682|
006fde  e010              B        |L1.28674|
                  |L1.28640|
006fe0  f1bc0f55          CMP      r12,#0x55             ;11008
006fe4  d102              BNE      |L1.28652|
006fe6  4288              CMP      r0,r1                 ;11009
006fe8  dc07              BGT      |L1.28666|
006fea  b935              CBNZ     r5,|L1.28666|
                  |L1.28652|
006fec  f1b80f55          CMP      r8,#0x55              ;11011
006ff0  d1de              BNE      |L1.28592|
006ff2  428e              CMP      r6,r1                 ;11011
006ff4  dc01              BGT      |L1.28666|
006ff6  2f00              CMP      r7,#0                 ;11011
006ff8  d0da              BEQ      |L1.28592|
                  |L1.28666|
006ffa  f04f0001          MOV      r0,#1                 ;11014
006ffe  7020              STRB     r0,[r4,#0]            ;11014
007000  e7d6              B        |L1.28592|
                  |L1.28674|
007002  4290              CMP      r0,r2                 ;11020
007004  dad4              BGE      |L1.28592|
007006  2d00              CMP      r5,#0                 ;11020
007008  d1d2              BNE      |L1.28592|
                  |L1.28682|
00700a  f1b80f55          CMP      r8,#0x55              ;11022
00700e  d103              BNE      |L1.28696|
007010  4296              CMP      r6,r2                 ;11022
007012  dacd              BGE      |L1.28592|
007014  2f00              CMP      r7,#0                 ;11022
007016  d1cb              BNE      |L1.28592|
                  |L1.28696|
007018  f04f0000          MOV      r0,#0                 ;11025
00701c  7020              STRB     r0,[r4,#0]            ;11025
00701e  e7c7              B        |L1.28592|
                  |L1.28704|
007020  4e24              LDR      r6,|L1.28852|
007022  4819              LDR      r0,|L1.28808|
007024  6ab5              LDR      r5,[r6,#0x28]         ;11047
007026  f9b00000          LDRSH    r0,[r0,#0]            ;11046  ; NUMIST
00702a  78f6              LDRB     r6,[r6,#3]            ;11047
00702c  b118              CBZ      r0,|L1.28726|
00702e  428d              CMP      r5,r1                 ;11047
007030  dc7e              BGT      |L1.28976|
007032  2e1e              CMP      r6,#0x1e              ;11047
007034  d27c              BCS      |L1.28976|
                  |L1.28726|
007036  f8dfc07c          LDR      r12,|L1.28852|
00703a  2801              CMP      r0,#1                 ;11049
00703c  f8dc708c          LDR      r7,[r12,#0x8c]        ;11049
007040  f89cc067          LDRB     r12,[r12,#0x67]       ;11049
007044  f8cdc018          STR      r12,[sp,#0x18]        ;11049
007048  dd06              BLE      |L1.28760|
00704a  428f              CMP      r7,r1                 ;11049
00704c  dc70              BGT      |L1.28976|
00704e  f8ddc018          LDR      r12,[sp,#0x18]        ;11049
007052  f1bc0f1e          CMP      r12,#0x1e             ;11049
007056  d26b              BCS      |L1.28976|
                  |L1.28760|
007058  f8dfc058          LDR      r12,|L1.28852|
00705c  2802              CMP      r0,#2                 ;11051
00705e  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11051
007062  f8cd8014          STR      r8,[sp,#0x14]         ;11051
007066  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11051
00706a  f8cdc010          STR      r12,[sp,#0x10]        ;11051
00706e  dd36              BLE      |L1.28894|
007070  e02c              B        |L1.28876|
                  |L1.28786|
007072  e0c9              B        |L1.29192|
                  |L1.28788|
                          DCD      ||.text||+0x145c
                  |L1.28792|
                          DCD      ||.text||+0x2334
                  |L1.28796|
                          DCD      ||.text||+0x1a0c
                  |L1.28800|
                          DCD      ||area_number.25||+0x28
                  |L1.28804|
                          DCD      FORVARDBPSCHHOUR
                  |L1.28808|
                          DCD      NUMIST
                  |L1.28812|
                          DCD      load_U
                  |L1.28816|
                          DCD      U_OUT_KONTR_MAX
                  |L1.28820|
                          DCD      outVoltContrHndlCnt
                  |L1.28824|
                          DCD      outVoltContrHndlCnt_
                  |L1.28828|
                          DCD      U_OUT_KONTR_MIN
                  |L1.28832|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.28836|
                          DCD      uout_av
                  |L1.28840|
                          DCD      USIGN
                  |L1.28844|
                          DCD      bSILENT
                  |L1.28848|
                          DCD      TVENTMAX
                  |L1.28852|
                          DCD      bps
                  |L1.28856|
                          DCD      RELEVENTSIGN
                  |L1.28860|
                          DCD      TVENTON
                  |L1.28864|
                          DCD      TVENTOFF
                  |L1.28868|
                          DCD      bat
                  |L1.28872|
                          DCD      BAT_IS_ON
                  |L1.28876|
0070cc  f8ddc014          LDR      r12,[sp,#0x14]        ;11051
0070d0  458c              CMP      r12,r1                ;11051
0070d2  dc57              BGT      |L1.29060|
0070d4  f8ddc010          LDR      r12,[sp,#0x10]        ;11051
0070d8  f1bc0f1e          CMP      r12,#0x1e             ;11051
0070dc  d252              BCS      |L1.29060|
                  |L1.28894|
0070de  f8dfc1b4          LDR      r12,|L1.29332|
0070e2  2803              CMP      r0,#3                 ;11053
0070e4  f8dc8154          LDR      r8,[r12,#0x154]       ;11053
0070e8  f8cd800c          STR      r8,[sp,#0xc]          ;11053
0070ec  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11053
0070f0  f8cdc008          STR      r12,[sp,#8]           ;11053
0070f4  dd08              BLE      |L1.28936|
0070f6  f8ddc00c          LDR      r12,[sp,#0xc]         ;11053
0070fa  458c              CMP      r12,r1                ;11053
0070fc  dc42              BGT      |L1.29060|
0070fe  f8ddc008          LDR      r12,[sp,#8]           ;11053
007102  f1bc0f1e          CMP      r12,#0x1e             ;11053
007106  d23d              BCS      |L1.29060|
                  |L1.28936|
007108  f8df8188          LDR      r8,|L1.29332|
00710c  2804              CMP      r0,#4                 ;11055
00710e  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11055
007112  f8988193          LDRB     r8,[r8,#0x193]        ;11055
007116  f8cd8004          STR      r8,[sp,#4]            ;11055
00711a  dd06              BLE      |L1.28970|
00711c  458c              CMP      r12,r1                ;11055
00711e  dc31              BGT      |L1.29060|
007120  f8dd8004          LDR      r8,[sp,#4]            ;11055
007124  f1b80f1e          CMP      r8,#0x1e              ;11055
007128  d22c              BCS      |L1.29060|
                  |L1.28970|
00712a  f8df9168          LDR      r9,|L1.29332|
00712e  e000              B        |L1.28978|
                  |L1.28976|
007130  e028              B        |L1.29060|
                  |L1.28978|
007132  f8d9821c          LDR      r8,[r9,#0x21c]        ;11057
007136  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11057
00713a  f8cd9000          STR      r9,[sp,#0]            ;11057
00713e  2805              CMP      r0,#5                 ;11057
007140  dd06              BLE      |L1.29008|
007142  4588              CMP      r8,r1                 ;11057
007144  dc1e              BGT      |L1.29060|
007146  f8dd9000          LDR      r9,[sp,#0]            ;11057
00714a  f1b90f1e          CMP      r9,#0x1e              ;11057
00714e  d219              BCS      |L1.29060|
                  |L1.29008|
007150  f8dfa140          LDR      r10,|L1.29332|
007154  2806              CMP      r0,#6                 ;11059
007156  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11059
00715a  f8da9280          LDR      r9,[r10,#0x280]       ;11059
00715e  dd04              BLE      |L1.29034|
007160  4589              CMP      r9,r1                 ;11059
007162  dc0f              BGT      |L1.29060|
007164  f1be0f1e          CMP      lr,#0x1e              ;11059
007168  d20c              BCS      |L1.29060|
                  |L1.29034|
00716a  f8dfb128          LDR      r11,|L1.29332|
00716e  2807              CMP      r0,#7                 ;11061
007170  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11061
007174  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11061
007178  dd08              BLE      |L1.29068|
00717a  458a              CMP      r10,r1                ;11061
00717c  dc02              BGT      |L1.29060|
00717e  f1bb0f1e          CMP      r11,#0x1e             ;11061
007182  d303              BCC      |L1.29068|
                  |L1.29060|
007184  f04f0001          MOV      r0,#1                 ;11064
007188  7020              STRB     r0,[r4,#0]            ;11064
                  |L1.29066|
00718a  e711              B        |L1.28592|
                  |L1.29068|
00718c  2b01              CMP      r3,#1                 ;11066
00718e  d1fc              BNE      |L1.29066|
007190  b118              CBZ      r0,|L1.29082|
007192  4295              CMP      r5,r2                 ;11069
007194  daf9              BGE      |L1.29066|
007196  2e0a              CMP      r6,#0xa               ;11069
007198  d2f7              BCS      |L1.29066|
                  |L1.29082|
00719a  2802              CMP      r0,#2                 ;11071
00719c  db04              BLT      |L1.29096|
00719e  4297              CMP      r7,r2                 ;11071
0071a0  daf3              BGE      |L1.29066|
0071a2  9906              LDR      r1,[sp,#0x18]         ;11071
0071a4  290a              CMP      r1,#0xa               ;11071
0071a6  d2f0              BCS      |L1.29066|
                  |L1.29096|
0071a8  2803              CMP      r0,#3                 ;11073
0071aa  db05              BLT      |L1.29112|
0071ac  9905              LDR      r1,[sp,#0x14]         ;11073
0071ae  4291              CMP      r1,r2                 ;11073
0071b0  daeb              BGE      |L1.29066|
0071b2  9904              LDR      r1,[sp,#0x10]         ;11073
0071b4  290a              CMP      r1,#0xa               ;11073
0071b6  d2e8              BCS      |L1.29066|
                  |L1.29112|
0071b8  2804              CMP      r0,#4                 ;11075
0071ba  db05              BLT      |L1.29128|
0071bc  9903              LDR      r1,[sp,#0xc]          ;11075
0071be  4291              CMP      r1,r2                 ;11075
0071c0  dae3              BGE      |L1.29066|
0071c2  9902              LDR      r1,[sp,#8]            ;11075
0071c4  290a              CMP      r1,#0xa               ;11075
0071c6  d2e0              BCS      |L1.29066|
                  |L1.29128|
0071c8  2805              CMP      r0,#5                 ;11077
0071ca  db04              BLT      |L1.29142|
0071cc  4594              CMP      r12,r2                ;11077
0071ce  dadc              BGE      |L1.29066|
0071d0  9901              LDR      r1,[sp,#4]            ;11077
0071d2  290a              CMP      r1,#0xa               ;11077
0071d4  d2d9              BCS      |L1.29066|
                  |L1.29142|
0071d6  2806              CMP      r0,#6                 ;11079
0071d8  db04              BLT      |L1.29156|
0071da  4590              CMP      r8,r2                 ;11079
0071dc  dad5              BGE      |L1.29066|
0071de  9900              LDR      r1,[sp,#0]            ;11079
0071e0  290a              CMP      r1,#0xa               ;11079
0071e2  d2d2              BCS      |L1.29066|
                  |L1.29156|
0071e4  2807              CMP      r0,#7                 ;11081
0071e6  db04              BLT      |L1.29170|
0071e8  4591              CMP      r9,r2                 ;11081
0071ea  dace              BGE      |L1.29066|
0071ec  f1be0f0a          CMP      lr,#0xa               ;11081
0071f0  d2cb              BCS      |L1.29066|
                  |L1.29170|
0071f2  2808              CMP      r0,#8                 ;11083
0071f4  db04              BLT      |L1.29184|
0071f6  4592              CMP      r10,r2                ;11083
0071f8  dac7              BGE      |L1.29066|
0071fa  f1bb0f0a          CMP      r11,#0xa              ;11083
0071fe  d2c4              BCS      |L1.29066|
                  |L1.29184|
007200  f04f0000          MOV      r0,#0                 ;11086
007204  7020              STRB     r0,[r4,#0]            ;11086
                  |L1.29190|
007206  e6d3              B        |L1.28592|
                  |L1.29192|
007208  4823              LDR      r0,|L1.29336|
00720a  4d24              LDR      r5,|L1.29340|
00720c  4e24              LDR      r6,|L1.29344|
00720e  f9b00000          LDRSH    r0,[r0,#0]            ;11092  ; NUMDT
007212  f9b55000          LDRSH    r5,[r5,#0]            ;11093
007216  7836              LDRB     r6,[r6,#0]            ;11093
007218  b110              CBZ      r0,|L1.29216|
00721a  428d              CMP      r5,r1                 ;11093
00721c  dc1d              BGT      |L1.29274|
00721e  b9e6              CBNZ     r6,|L1.29274|
                  |L1.29216|
007220  4f1e              LDR      r7,|L1.29340|
007222  f8dfc07c          LDR      r12,|L1.29344|
007226  2801              CMP      r0,#1                 ;11095
007228  f9b77002          LDRSH    r7,[r7,#2]            ;11095
00722c  f89cc001          LDRB     r12,[r12,#1]          ;11095
007230  dd04              BLE      |L1.29244|
007232  428f              CMP      r7,r1                 ;11095
007234  dc11              BGT      |L1.29274|
007236  f1bc0f00          CMP      r12,#0                ;11095
00723a  d10e              BNE      |L1.29274|
                  |L1.29244|
00723c  f8df805c          LDR      r8,|L1.29340|
007240  f8df905c          LDR      r9,|L1.29344|
007244  2802              CMP      r0,#2                 ;11097
007246  f9b88004          LDRSH    r8,[r8,#4]            ;11097
00724a  f8999002          LDRB     r9,[r9,#2]            ;11097
00724e  dd08              BLE      |L1.29282|
007250  4588              CMP      r8,r1                 ;11097
007252  dc02              BGT      |L1.29274|
007254  f1b90f00          CMP      r9,#0                 ;11097
007258  d003              BEQ      |L1.29282|
                  |L1.29274|
00725a  f04f0001          MOV      r0,#1                 ;11100
00725e  7020              STRB     r0,[r4,#0]            ;11100
007260  e6a6              B        |L1.28592|
                  |L1.29282|
007262  2b01              CMP      r3,#1                 ;11102
007264  d191              BNE      |L1.29066|
007266  b118              CBZ      r0,|L1.29296|
007268  4295              CMP      r5,r2                 ;11105
00726a  da8e              BGE      |L1.29066|
00726c  2e00              CMP      r6,#0                 ;11105
00726e  d18c              BNE      |L1.29066|
                  |L1.29296|
007270  2802              CMP      r0,#2                 ;11107
007272  db04              BLT      |L1.29310|
007274  4297              CMP      r7,r2                 ;11107
007276  da88              BGE      |L1.29066|
007278  f1bc0f00          CMP      r12,#0                ;11107
00727c  d185              BNE      |L1.29066|
                  |L1.29310|
00727e  2803              CMP      r0,#3                 ;11109
007280  db04              BLT      |L1.29324|
007282  4590              CMP      r8,r2                 ;11109
007284  dabf              BGE      |L1.29190|
007286  f1b90f00          CMP      r9,#0                 ;11109
00728a  d1bc              BNE      |L1.29190|
                  |L1.29324|
00728c  f04f0000          MOV      r0,#0                 ;11112
007290  7020              STRB     r0,[r4,#0]            ;11112
007292  e68d              B        |L1.28592|
;;;11118  
                          ENDP

                  |L1.29332|
                          DCD      bps
                  |L1.29336|
                          DCD      NUMDT
                  |L1.29340|
                          DCD      t_ext
                  |L1.29344|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;308    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;309    if(spc_stat!=spcVZ) 
;;;310    	{
;;;311    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;309
;;;312    	sp_ch_error=0;
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
;;;918    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;310    	{
;;;311    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;309  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;309
00000c  b200              SXTH     r0,r0                 ;309
00000e  f7fffffe          BL       abs_pal
;;;312    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;313    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;314    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;317  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;317  ; adc_self_ch_buff
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;317
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  f44f7196          MOV      r1,#0x12c
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f1a406ee          SUB      r6,r4,#0xee
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;792    	snmp_bat_flag_puts[1]=0;
000040  87b0              STRH     r0,[r6,#0x3c]
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;319
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;319  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;319
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;321  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;319
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;321  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;322
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;322  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;322
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;321  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;322  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;324  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
000074  6004              STR      r4,[r0,#0]            ;324  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;324  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
00007c  6044              STR      r4,[r0,#4]            ;325  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;325  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;325
000084  6084              STR      r4,[r0,#8]            ;330  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;330  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;330
00008c  60c1              STR      r1,[r0,#0xc]          ;331  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;333  ; adc_result
000092  2964              CMP      r1,#0x64              ;333
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;333  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;334
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;334
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;338
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;338  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;340
0000b0  428c              CMP      r4,r1                 ;340
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;341
0000b8  6002              STR      r2,[r0,#0]            ;343  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;343  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;343  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;343  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;343
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;343  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;344
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;344  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;349
0000d2  b209              SXTH     r1,r1                 ;349
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;349
0000d6  f5b17f00          CMP      r1,#0x200             ;350
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;352
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;352  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;352
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;353
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;353
0000f2  ea4f2424          ASR      r4,r4,#8              ;357
0000f6  8774              STRH     r4,[r6,#0x3a]         ;357
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;359
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;359  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;360
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]         ;362
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f           ;362
00010a  2827              CMP      r0,#0x27              ;362
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]         ;362  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1                 ;363
000116  7530              STRB     r0,[r6,#0x14]         ;363
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]         ;368  ; adc_ch
00011e  7cf3              LDRB     r3,[r6,#0x13]         ;368  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6       ;368
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;369  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]     ;369
00012c  0798              LSLS     r0,r3,#30             ;371
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0                 ;371
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]    ;371
000136  4461              ADD      r1,r1,r12             ;372
000138  f1000001          ADD      r0,r0,#1              ;372
00013c  b2c0              UXTB     r0,r0                 ;372
00013e  2810              CMP      r0,#0x10              ;372
000140  d3f7              BCC      |L3.306|
000142  ea4f1021          ASR      r0,r1,#4              ;376
000146  4933              LDR      r1,|L3.532|
000148  f1a10120          SUB      r1,r1,#0x20           ;376
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]     ;376
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1              ;376
000152  b2e8              UXTB     r0,r5                 ;376
000154  74b0              STRB     r0,[r6,#0x12]         ;376
000156  2810              CMP      r0,#0x10              ;376
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]         ;377
00015c  f1030301          ADD      r3,r3,#1              ;377
000160  b2d8              UXTB     r0,r3                 ;377
000162  74f0              STRB     r0,[r6,#0x13]         ;377
000164  2810              CMP      r0,#0x10              ;377
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]         ;379
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]         ;379
00016c  f1070701          ADD      r7,r7,#1              ;379
000170  f0070001          AND      r0,r7,#1              ;379
000174  7470              STRB     r0,[r6,#0x11]         ;379
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]            ;390
00017c  f02000ff          BIC      r0,r0,#0xff           ;390
000180  f1000004          ADD      r0,r0,#4              ;391
000184  6010              STR      r0,[r2,#0]            ;393
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]         ;393  ; adc_ch
00018a  0708              LSLS     r0,r1,#28             ;393
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]            ;393
000190  f02000ff          BIC      r0,r0,#0xff           ;394
000194  f1000001          ADD      r0,r0,#1              ;394
000198  6010              STR      r0,[r2,#0]            ;398
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]            ;398
00019e  f02000ff          BIC      r0,r0,#0xff           ;398
0001a2  f1000002          ADD      r0,r0,#2              ;409
0001a6  6010              STR      r0,[r2,#0]            ;409
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]            ;410
0001ac  f0435380          ORR      r3,r3,#0x10000000     ;410
0001b0  6003              STR      r3,[r0,#0]            ;412
0001b2  6a03              LDR      r3,[r0,#0x20]         ;412
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;412
0001b8  6203              STR      r3,[r0,#0x20]         ;412
0001ba  6e03              LDR      r3,[r0,#0x60]         ;413
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;413
0001c0  6603              STR      r3,[r0,#0x60]         ;413
0001c2  07cb              LSLS     r3,r1,#31             ;417
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;417
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;419
0001cc  6143              STR      r3,[r0,#0x14]         ;419
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;419
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;420
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;420
0001d8  6343              STR      r3,[r0,#0x34]         ;422
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;422
0001de  f0235380          BIC      r3,r3,#0x10000000     ;422
0001e2  6143              STR      r3,[r0,#0x14]         ;423
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;423
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;423
0001ec  6343              STR      r3,[r0,#0x34]         ;381
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;381
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;381
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;382
0001f8  6741              STR      r1,[r0,#0x74]         ;382
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]         ;384
0001fe  f0416180          ORR      r1,r1,#0x4000000      ;384
000202  6741              STR      r1,[r0,#0x74]         ;384
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]            ;384
000206  f0407080          ORR      r0,r0,#0x1000000      ;385
00020a  6010              STR      r0,[r2,#0]            ;385
00020c  e8bd81f0          POP      {r4-r8,pc}            ;385
;;;918    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xee
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;310    	{
;;;311    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;309
00000c  7820              LDRB     r0,[r4,#0]            ;309  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;309
000010  b2c0              UXTB     r0,r0
;;;312    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;313    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;314    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;322  ; bps_I
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  8008              STRH     r0,[r1,#0]
;;;553    	snmp_bat_flag_puts[0]=0;
000034  495d              LDR      r1,|L4.428|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]            ;319
00004c  4288              CMP      r0,r1                 ;319
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;319
000054  f1b90f0a          CMP      r9,#0xa               ;319
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;321
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;322
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;319
000064  280a              CMP      r0,#0xa               ;321
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;321
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;324
000072  f88c2001          STRB     r2,[r12,#1]           ;324
000076  f1a30301          SUB      r3,r3,#1              ;324
00007a  f8a83000          STRH     r3,[r8,#0]            ;325
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;325
000084  f88c2001          STRB     r2,[r12,#1]           ;330
000088  f1030301          ADD      r3,r3,#1              ;330
00008c  f8a83000          STRH     r3,[r8,#0]            ;331
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;333
000092  4251              RSBS     r1,r2,#0              ;333
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;334  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;338
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;338  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;338
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;340  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;340
0000b4  f04f0004          MOV      r0,#4                 ;341
0000b8  f88d0001          STRB     r0,[sp,#1]            ;343
0000bc  f88d5002          STRB     r5,[sp,#2]            ;343
0000c0  f04f0002          MOV      r0,#2                 ;343
0000c4  f88d0003          STRB     r0,[sp,#3]            ;344
0000c8  f88d5004          STRB     r5,[sp,#4]            ;344
0000cc  f04f0001          MOV      r0,#1                 ;344
0000d0  f88d0005          STRB     r0,[sp,#5]            ;349
0000d4  f04f0106          MOV      r1,#6                 ;349
0000d8  4668              MOV      r0,sp                 ;350
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;352
0000e2  ea4f2020          ASR      r0,r0,#8              ;352
0000e6  f88d0007          STRB     r0,[sp,#7]            ;352
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;353  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;357
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;357
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;359  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;359
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;360
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]         ;362  ; main_kb_cnt
00010a  4291              CMP      r1,r2                 ;362
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]            ;362  ; ICA_EN
000110  2901              CMP      r1,#1                 ;362
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]            ;363  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]            ;363
00011c  f04f0106          MOV      r1,#6                 ;368
000120  f88d1001          STRB     r1,[sp,#1]            ;368
000124  f88d5002          STRB     r5,[sp,#2]            ;369
000128  f04f011e          MOV      r1,#0x1e              ;369
00012c  f88d1003          STRB     r1,[sp,#3]            ;371
000130  ea4f71e0          ASR      r1,r0,#31             ;371
000134  eb006111          ADD      r1,r0,r1,LSR #24      ;371
000138  ea4f2221          ASR      r2,r1,#8              ;372
00013c  f88d2004          STRB     r2,[sp,#4]            ;372
000140  f88d0005          STRB     r0,[sp,#5]            ;372
000144  f04f0106          MOV      r1,#6                 ;376
000148  4668              MOV      r0,sp                 ;376
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]            ;376
000152  ea4f2020          ASR      r0,r0,#8              ;376
000156  f88d0007          STRB     r0,[sp,#7]            ;376
00015a  8838              LDRH     r0,[r7,#0]            ;377  ; ICA_CH
00015c  2800              CMP      r0,#0                 ;377
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0                 ;377
000162  466d              MOV      r5,sp                 ;377
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]            ;377
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1              ;379
000172  b2e4              UXTB     r4,r4                 ;379
000174  2c08              CMP      r4,#8                 ;379
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14           ;390
00017a  e8bd83f0          POP      {r4-r9,pc}            ;390
                  |L4.382|
00017e  f04f0400          MOV      r4,#0                 ;391
000182  46e9              MOV      r9,sp                 ;391
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]            ;393
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1              ;393
000190  b2e4              UXTB     r4,r4                 ;394
000192  2c08              CMP      r4,#8                 ;394
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;918    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;308    {  
000002  4604              MOV      r4,r0
;;;309    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;310    	{
;;;311    	vz_error=0;
;;;312    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;313    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;321
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;322
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  b101              CBZ      r1,|L5.54|
;;;553    	snmp_bat_flag_puts[0]=0;
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;792    	snmp_bat_flag_puts[1]=0;
000040  f1000001          ADD      r0,r0,#1
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;319
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;319
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;319
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;319
000058  461a              MOV      r2,r3                 ;321
00005a  210e              MOVS     r1,#0xe               ;321
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;321
000066  2202              MOVS     r2,#2                 ;321
000068  210e              MOVS     r1,#0xe               ;321
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;324
000074  2203              MOVS     r2,#3                 ;324
000076  210e              MOVS     r1,#0xe               ;324
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;325
000082  2204              MOVS     r2,#4                 ;325
000084  210e              MOVS     r1,#0xe               ;330
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;333
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;333
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;333  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;333
00009c  70d0              STRB     r0,[r2,#3]            ;334
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;334
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;338
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;338
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;340
0000b0  2201              MOVS     r2,#1                 ;340
0000b2  210e              MOVS     r1,#0xe               ;341
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;343
0000be  461a              MOV      r2,r3                 ;343
0000c0  210e              MOVS     r1,#0xe               ;343
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;344
0000cc  2203              MOVS     r2,#3                 ;344
0000ce  210e              MOVS     r1,#0xe               ;349
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;350
0000da  2204              MOVS     r2,#4                 ;350
0000dc  210e              MOVS     r1,#0xe               ;352
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;352
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;353
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;353  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;357
0000f4  70d0              STRB     r0,[r2,#3]            ;357
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;359
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;359
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;360
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3                 ;362
000108  2201              MOVS     r2,#1                 ;362
00010a  210e              MOVS     r1,#0xe               ;362
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3                 ;363
000116  2202              MOVS     r2,#2                 ;363
000118  210e              MOVS     r1,#0xe               ;363
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3                 ;368
000124  461a              MOV      r2,r3                 ;369
000126  210e              MOVS     r1,#0xe               ;369
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3                 ;371
000132  2204              MOVS     r2,#4                 ;371
000134  210e              MOVS     r1,#0xe               ;371
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28             ;372
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28             ;376
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]            ;376  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1              ;376
00014c  70d0              STRB     r0,[r2,#3]            ;376
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1                 ;376
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2                 ;376
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3                 ;376
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4                 ;377
000160  2201              MOVS     r2,#1                 ;377
000162  210e              MOVS     r1,#0xe               ;377
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4                 ;379
00016e  2202              MOVS     r2,#2                 ;379
000170  210e              MOVS     r1,#0xe               ;379
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4                 ;390
00017c  2203              MOVS     r2,#3                 ;390
00017e  210e              MOVS     r1,#0xe               ;391
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4                 ;393
00018a  461a              MOV      r2,r3                 ;393
00018c  210e              MOVS     r1,#0xe               ;393
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27             ;394
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27             ;398
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]            ;398  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1              ;409
0001a4  70d0              STRB     r0,[r2,#3]            ;409
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1                 ;410
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2                 ;410
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;412
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;412
0001b8  2201              MOVS     r2,#1                 ;412
0001ba  210e              MOVS     r1,#0xe               ;413
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;417
0001c6  2202              MOVS     r2,#2                 ;417
0001c8  210e              MOVS     r1,#0xe               ;419
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;420
0001d4  2203              MOVS     r2,#3                 ;420
0001d6  210e              MOVS     r1,#0xe               ;422
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;422
0001e2  2204              MOVS     r2,#4                 ;423
0001e4  210e              MOVS     r1,#0xe               ;423
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;381
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;381
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;382  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1              ;382
0001fc  70d0              STRB     r0,[r2,#3]            ;384
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1                 ;384
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2                 ;384
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3                 ;385
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6                 ;385
000210  2201              MOVS     r2,#1                 ;400
000212  210e              MOVS     r1,#0xe               ;400
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6                 ;401
00021e  2202              MOVS     r2,#2                 ;403
000220  210e              MOVS     r1,#0xe               ;403
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6                 ;404
00022c  2203              MOVS     r2,#3                 ;404
00022e  210e              MOVS     r1,#0xe               ;404
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6                 ;428
00023a  2204              MOVS     r2,#4                 ;428
00023c  210e              MOVS     r1,#0xe               ;429
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]            ;431  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1              ;431
000250  70d0              STRB     r0,[r2,#3]            ;432
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1                 ;432
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2                 ;436
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3                 ;436
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0                 ;447
000264  2201              MOVS     r2,#1                 ;447
000266  210e              MOVS     r1,#0xe               ;448
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;450
000272  2202              MOVS     r2,#2                 ;450
000274  210e              MOVS     r1,#0xe               ;450
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;451
000280  2203              MOVS     r2,#3                 ;455
000282  210e              MOVS     r1,#0xe               ;455
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;458
00028e  2204              MOVS     r2,#4                 ;458
000290  210e              MOVS     r1,#0xe               ;458
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!        ;460
00029c  7068              STRB     r0,[r5,#1]            ;460
00029e  bd70              POP      {r4-r6,pc}            ;461
;;;918    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb8
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;310    	{
;;;311    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;309  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;309  ; TBOXMAX
;;;312    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;321
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  dd00              BLE      |L6.66|
;;;792    	snmp_bat_flag_puts[1]=0;
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;319
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;319  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;321  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;321
00005a  4298              CMP      r0,r3                 ;321
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;322  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;319
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;321
00006a  b249              SXTB     r1,r1                 ;322
00006c  7011              STRB     r1,[r2,#0]            ;322
00006e  291e              CMP      r1,#0x1e              ;324
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;324  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;324
000078  8039              STRH     r1,[r7,#0]            ;324
00007a  7014              STRB     r4,[r2,#0]            ;325
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;325
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;325  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;330
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;331
00008e  b249              SXTB     r1,r1                 ;333
000090  7011              STRB     r1,[r2,#0]            ;333
000092  291e              CMP      r1,#0x1e              ;333
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;333  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;333
00009c  8039              STRH     r1,[r7,#0]            ;334
00009e  7014              STRB     r4,[r2,#0]            ;334
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;338
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;338  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;340
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;340
0000b0  2100              MOVS     r1,#0                 ;340
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;343
0000be  8800              LDRH     r0,[r0,#0]            ;343  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;343
0000c2  b202              SXTH     r2,r0                 ;343
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;344
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;349  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;350
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;350  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;352
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;352  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;352
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;353
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;353
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;357  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;359
0000fc  2928              CMP      r1,#0x28              ;359
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;360  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0                 ;362
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]            ;362  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1              ;362
000110  8038              STRH     r0,[r7,#0]            ;362
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]            ;363  ; TBATENABLE
000118  4281              CMP      r1,r0                 ;363
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]            ;368  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1              ;368
000122  8038              STRH     r0,[r7,#0]            ;368
                  |L6.292|
000124  2206              MOVS     r2,#6                 ;369
000126  2100              MOVS     r1,#0                 ;369
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]            ;371  ; tbatdisable_cnt
000132  2805              CMP      r0,#5                 ;371
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]            ;372
                  |L6.314|
00013a  2801              CMP      r0,#1                 ;372
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]            ;372
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]            ;376
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]            ;376  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32           ;376
000154  291e              CMP      r1,#0x1e              ;376
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]            ;376  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0                 ;377
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]            ;377  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1              ;377
000168  8028              STRH     r0,[r5,#0]            ;379
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]            ;379  ; TLOADENABLE
000170  4281              CMP      r1,r0                 ;379
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]            ;379  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1              ;390
00017a  8028              STRH     r0,[r5,#0]            ;390
                  |L6.380|
00017c  2206              MOVS     r2,#6                 ;390
00017e  2100              MOVS     r1,#0                 ;391
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]            ;393  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5                 ;393
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]            ;393
                  |L6.400|
000190  2801              CMP      r0,#1                 ;394
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]            ;394
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}            ;394
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]            ;398
00019c  e7fb              B        |L6.406|
;;;918    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;310    	{
;;;311    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;309
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;309
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;312    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;321
000030  4e45              LDR      r6,|L7.328|
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  4f46              LDR      r7,|L7.332|
;;;553    	snmp_bat_flag_puts[0]=0;
000034  f8df8118          LDR      r8,|L7.336|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
000040  2500              MOVS     r5,#0
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;319
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;319
00004e  f8a81000          STRH     r1,[r8,#0]            ;319
000052  2801              CMP      r0,#1                 ;321
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;319
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;321
00005a  2200              MOVS     r2,#0                 ;321
00005c  21e6              MOVS     r1,#0xe6              ;322
00005e  20e1              MOVS     r0,#0xe1              ;322
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;321
000068  f04f0000          MOV      r0,#0                 ;321
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;322
000070  f9b85000          LDRSH    r5,[r8,#0]            ;324
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;324
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;325
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;325
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;325
000086  69c9              LDR      r1,[r1,#0x1c]         ;330
000088  4299              CMP      r1,r3                 ;330
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;331
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;333
000094  b2c0              UXTB     r0,r0                 ;333
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;333
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;334
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;334
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;338
0000aa  7020              STRB     r0,[r4,#0]            ;340
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;340
0000b0  f8a81000          STRH     r1,[r8,#0]            ;340
0000b4  2802              CMP      r0,#2                 ;341
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;343
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;343
0000bc  2200              MOVS     r2,#0                 ;343
0000be  21e6              MOVS     r1,#0xe6              ;343
0000c0  20e1              MOVS     r0,#0xe1              ;343
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;344
0000ca  f04f0000          MOV      r0,#0                 ;344
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;349
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;349
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;350
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;352
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;352
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;352
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;353
0000ea  4299              CMP      r1,r3                 ;353
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;353
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;357
0000f6  b2c0              UXTB     r0,r0                 ;357
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;359
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;359
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;360
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee              ;362
00010a  e9cd0500          STRD     r0,r5,[sp,#0]         ;362
00010e  9502              STR      r5,[sp,#8]            ;362
000110  9503              STR      r5,[sp,#0xc]          ;362
000112  7831              LDRB     r1,[r6,#0]            ;363  ; uavt_bps_pntr
000114  4603              MOV      r3,r0                 ;363
000116  2216              MOVS     r2,#0x16              ;363
000118  4608              MOV      r0,r1                 ;363
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]            ;368  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1              ;368
000122  b2c0              UXTB     r0,r0                 ;368
000124  7030              STRB     r0,[r6,#0]            ;369
000126  f9ba1000          LDRSH    r1,[r10,#0]           ;369  ; NUMIST
00012a  4288              CMP      r0,r1                 ;371
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]            ;371
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]            ;371  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]           ;371
000136  e8bd9fff          POP      {r0-r12,pc}           ;372
;;;918    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;308    {  
000002  f44f70b4          MOV      r0,#0x168
;;;309    if(spc_stat!=spcVZ) 
;;;310    	{
;;;311    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;309
00000e  700a              STRB     r2,[r1,#0]            ;309
000010  f04f0100          MOV      r1,#0
;;;312    	sp_ch_error=0;
;;;313    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
;;;918    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  bps_on_mask
00005e  0000              DCB      0x00,0x00
                  bps_off_mask
000060  0000              DCB      0x00,0x00
                  vz_cnt_s
000062  0000              DCB      0x00,0x00
                  vz_cnt_s_
000064  0000              DCB      0x00,0x00
                  vz_cnt_h
000066  0000              DCB      0x00,0x00
                  vz_cnt_h_
000068  0000              DCB      0x00,0x00
                  cnt_end_ke
00006a  0000              DCB      0x00,0x00
                  __ee_vz_cnt
00006c  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006e  0000              DCB      0x00,0x00
                  __ee_spc_bat
000070  0000              DCB      0x00,0x00
                  __ee_spc_phase
000072  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000074  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000076  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000078  0000              DCB      0x00,0x00
                  vz1_stat_cnt
00007a  0000              DCB      0x00,0x00
                  volt_region_cnt
00007c  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007e  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
000080  0000              DCB      0x00,0x00
                  plazma_ica1
000082  0000              DCB      0x00,0x00
                  bat_hndl_i
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000086  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000088  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
00008c  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008e  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000ec  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ee  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
