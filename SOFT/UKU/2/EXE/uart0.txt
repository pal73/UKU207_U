; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\EXE\uart0.o --depend=.\EXE\uart0.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DAPSENERGIA --omf_browse=.\EXE\uart0.crf uart0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;82     
;;;83     for(j=1;j<num;j++)
000004  2201              MOVS     r2,#1
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000006  4cff              LDR      r4,|L1.1028|
000008  e005              B        |L1.22|
                  |L1.10|
00000a  1c40              ADDS     r0,r0,#1              ;85
00000c  5ce3              LDRB     r3,[r4,r3]
00000e  7805              LDRB     r5,[r0,#0]
000010  406b              EORS     r3,r3,r5
000012  1c52              ADDS     r2,r2,#1              ;83
000014  b2d2              UXTB     r2,r2                 ;83
                  |L1.22|
000016  428a              CMP      r2,r1                 ;83
000018  d3f7              BCC      |L1.10|
;;;87     	}
;;;88     
;;;89     return r;	
00001a  4618              MOV      r0,r3
;;;90     } 
00001c  bd30              POP      {r4,r5,pc}
;;;91     
                          ENDP

                  crc_95 PROC
;;;92     //-----------------------------------------------
;;;93     char crc_95(char* ptr,char num)
00001e  b530              PUSH     {r4,r5,lr}
;;;94     {
;;;95     char r,j;
;;;96     r=*ptr;
000020  7803              LDRB     r3,[r0,#0]
;;;97     
;;;98     for(j=1;j<num;j++)
000022  2201              MOVS     r2,#1
;;;99     	{
;;;100         ptr++;
;;;101    	r=((*ptr)^Table95[r]);
000024  4cf8              LDR      r4,|L1.1032|
000026  e005              B        |L1.52|
                  |L1.40|
000028  1c40              ADDS     r0,r0,#1              ;100
00002a  5ce3              LDRB     r3,[r4,r3]
00002c  7805              LDRB     r5,[r0,#0]
00002e  406b              EORS     r3,r3,r5
000030  1c52              ADDS     r2,r2,#1              ;98
000032  b2d2              UXTB     r2,r2                 ;98
                  |L1.52|
000034  428a              CMP      r2,r1                 ;98
000036  d3f7              BCC      |L1.40|
;;;102    	}
;;;103    
;;;104    return r;	
000038  4618              MOV      r0,r3
;;;105    }
00003a  bd30              POP      {r4,r5,pc}
;;;106    
                          ENDP

                  putchar0 PROC
;;;110    //-----------------------------------------------
;;;111    void putchar0(char c)
00003c  b530              PUSH     {r4,r5,lr}
;;;112    {
;;;113    while (tx_counter0 == TX_BUFFER_SIZE0);
00003e  4bf3              LDR      r3,|L1.1036|
000040  f44f6480          MOV      r4,#0x400
000044  89d9              LDRH     r1,[r3,#0xe]
                  |L1.70|
000046  42a1              CMP      r1,r4
000048  d0fd              BEQ      |L1.70|
;;;114    if (tx_counter0 || ((LPC_UART0->LSR & 0x60)==0))
00004a  b931              CBNZ     r1,|L1.90|
00004c  4af0              LDR      r2,|L1.1040|
00004e  7d15              LDRB     r5,[r2,#0x14]
000050  f0150f60          TST      r5,#0x60
000054  d001              BEQ      |L1.90|
;;;115       {
;;;116       tx_buffer0[tx_wr_index0]=c;
;;;117       if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;;;118       ++tx_counter0;
;;;119       }
;;;120    else LPC_UART0->THR=c;
000056  7010              STRB     r0,[r2,#0]
;;;121    }
000058  bd30              POP      {r4,r5,pc}
                  |L1.90|
00005a  4dee              LDR      r5,|L1.1044|
00005c  895a              LDRH     r2,[r3,#0xa]          ;116  ; tx_wr_index0
00005e  54a8              STRB     r0,[r5,r2]            ;116
000060  1c52              ADDS     r2,r2,#1              ;117
000062  b290              UXTH     r0,r2                 ;117
000064  8158              STRH     r0,[r3,#0xa]          ;117
000066  42a0              CMP      r0,r4                 ;117
000068  d101              BNE      |L1.110|
00006a  2000              MOVS     r0,#0                 ;117
00006c  8158              STRH     r0,[r3,#0xa]          ;117
                  |L1.110|
00006e  1c49              ADDS     r1,r1,#1              ;118
000070  81d9              STRH     r1,[r3,#0xe]          ;118
000072  bd30              POP      {r4,r5,pc}
;;;122    
                          ENDP

                  uart_out_adr0 PROC
;;;171    //-----------------------------------------------
;;;172    void uart_out_adr0 (char *ptr, char len)
000074  b570              PUSH     {r4-r6,lr}
;;;173    {
000076  b08f              SUB      sp,sp,#0x3c
;;;174    char UOB[60]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;175    char i,t=0;
000078  2300              MOVS     r3,#0
;;;176    
;;;177    //rs232_data_out_buff[4]=210;
;;;178    
;;;179    for(i=0;i<len;i++)
00007a  2200              MOVS     r2,#0
00007c  466d              MOV      r5,sp                 ;174
00007e  e004              B        |L1.138|
                  |L1.128|
;;;180    	{
;;;181    	UOB[i]=ptr[i];
000080  5c84              LDRB     r4,[r0,r2]
000082  54ac              STRB     r4,[r5,r2]
;;;182    	t^=UOB[i];
000084  4063              EORS     r3,r3,r4
000086  1c52              ADDS     r2,r2,#1              ;179
000088  b2d2              UXTB     r2,r2                 ;179
                  |L1.138|
00008a  428a              CMP      r2,r1                 ;179
00008c  d3f8              BCC      |L1.128|
;;;183    	}
;;;184    //if(!t)t=0xff;
;;;185    //UOB[8]=5;
;;;186    //UOB[9]=6;
;;;187    UOB[10]=200;
00008e  20c8              MOVS     r0,#0xc8
000090  f88d000a          STRB     r0,[sp,#0xa]
;;;188    //UOB[11]=8;
;;;189    UOB[len]=len;
000094  5469              STRB     r1,[r5,r1]
;;;190    t^=len;	
000096  404b              EORS     r3,r3,r1
;;;191    UOB[len+1]=t;	
000098  1868              ADDS     r0,r5,r1
00009a  7043              STRB     r3,[r0,#1]
;;;192    UOB[len+2]=END;
00009c  220a              MOVS     r2,#0xa
00009e  7082              STRB     r2,[r0,#2]
;;;193    //UOB[0]=i+1;
;;;194    //UOB[i]=t^UOB[0];
;;;195    //UOB[i+1]=END;
;;;196    	
;;;197    //puts(UOB); 
;;;198    for (i=0;i<len+3;i++)
0000a0  2400              MOVS     r4,#0
0000a2  1cce              ADDS     r6,r1,#3
0000a4  e004              B        |L1.176|
                  |L1.166|
;;;199    	{
;;;200    	putchar0(UOB[i]);
0000a6  5d28              LDRB     r0,[r5,r4]
0000a8  f7fffffe          BL       putchar0
0000ac  1c64              ADDS     r4,r4,#1              ;198
0000ae  b2e4              UXTB     r4,r4                 ;198
                  |L1.176|
0000b0  42b4              CMP      r4,r6                 ;198
0000b2  d3f8              BCC      |L1.166|
;;;201    	}   
;;;202    }
0000b4  b00f              ADD      sp,sp,#0x3c
0000b6  bd70              POP      {r4-r6,pc}
;;;203    
                          ENDP

                  UARTInit PROC
;;;326    //-----------------------------------------------
;;;327    void rs232_data_out_tki(void)
;;;328    {
;;;329    short rs232_data_out_buff[30];
;;;330    
;;;331    rs232_data_out_buff[0]=avar_stat;
;;;332    rs232_data_out_buff[1]=spc_stat;
;;;333    rs232_data_out_buff[2]=load_U;
;;;334    rs232_data_out_buff[3]=load_I;
;;;335    rs232_data_out_buff[4]=net_Ua;
;;;336    rs232_data_out_buff[5]=net_Ub;
;;;337    rs232_data_out_buff[6]=net_Uc;
;;;338    rs232_data_out_buff[7]=net_F3;
;;;339    rs232_data_out_buff[8]=t_ext[0];
;;;340    rs232_data_out_buff[9]=bps[0]._Uii;
;;;341    rs232_data_out_buff[10]=bps[0]._Ii;
;;;342    rs232_data_out_buff[11]=bps[0]._Ti;
;;;343    rs232_data_out_buff[12]=bps[0]._av;
;;;344    rs232_data_out_buff[13]=bps[1]._Uii;
;;;345    rs232_data_out_buff[14]=bps[1]._Ii;
;;;346    rs232_data_out_buff[15]=bps[1]._Ti;
;;;347    rs232_data_out_buff[16]=bps[1]._av;
;;;348    rs232_data_out_buff[17]=bps[2]._Uii;
;;;349    rs232_data_out_buff[18]=bps[2]._Ii;
;;;350    rs232_data_out_buff[19]=bps[2]._Ti;
;;;351    rs232_data_out_buff[20]=bps[2]._av;
;;;352    rs232_data_out_buff[21]=bps[3]._Uii;
;;;353    rs232_data_out_buff[22]=bps[3]._Ii;
;;;354    rs232_data_out_buff[23]=bps[3]._Ti;
0000b8  e92d47f0          PUSH     {r4-r10,lr}
;;;355    rs232_data_out_buff[24]=bps[3]._av;
0000bc  4ad8              LDR      r2,|L1.1056|
0000be  f8df8358          LDR      r8,|L1.1048|
0000c2  f8df9358          LDR      r9,|L1.1052|
;;;356    rs232_data_out_buff[25]=Ib_ips_termokompensat;
0000c6  6812              LDR      r2,[r2,#0]
0000c8  2603              MOVS     r6,#3
0000ca  2783              MOVS     r7,#0x83
;;;357    
;;;358    uart_out_adr0 ((char*)rs232_data_out_buff, 52);
0000cc  2507              MOVS     r5,#7
0000ce  0893              LSRS     r3,r2,#2
0000d0  0854              LSRS     r4,r2,#1
0000d2  ea4f0cd2          LSR      r12,r2,#3
;;;359    }
0000d6  b120              CBZ      r0,|L1.226|
0000d8  2801              CMP      r0,#1
0000da  d02d              BEQ      |L1.312|
0000dc  2000              MOVS     r0,#0
                  |L1.222|
0000de  e8bd87f0          POP      {r4-r10,pc}
                  |L1.226|
0000e2  f8d80000          LDR      r0,[r8,#0]
0000e6  f02000f0          BIC      r0,r0,#0xf0
0000ea  f8c80000          STR      r0,[r8,#0]
0000ee  f8d80000          LDR      r0,[r8,#0]
0000f2  f0400050          ORR      r0,r0,#0x50
0000f6  f8c80000          STR      r0,[r8,#0]
0000fa  f8d901a8          LDR      r0,[r9,#0x1a8]
0000fe  f3c01081          UBFX     r0,r0,#6,#2
000102  2801              CMP      r0,#1
000104  d008              BEQ      |L1.280|
000106  2802              CMP      r0,#2
000108  d003              BEQ      |L1.274|
00010a  2803              CMP      r0,#3
00010c  d003              BEQ      |L1.278|
00010e  461a              MOV      r2,r3
000110  e002              B        |L1.280|
                  |L1.274|
000112  4622              MOV      r2,r4
000114  e000              B        |L1.280|
                  |L1.278|
000116  4662              MOV      r2,r12
                  |L1.280|
000118  4cbd              LDR      r4,|L1.1040|
00011a  7327              STRB     r7,[r4,#0xc]
00011c  0910              LSRS     r0,r2,#4
00011e  fbb0f0f1          UDIV     r0,r0,r1
000122  0a01              LSRS     r1,r0,#8
000124  7121              STRB     r1,[r4,#4]
000126  7020              STRB     r0,[r4,#0]
000128  7326              STRB     r6,[r4,#0xc]
00012a  7225              STRB     r5,[r4,#8]
00012c  2005              MOVS     r0,#5
00012e  f7fffffe          BL       NVIC_EnableIRQ
000132  6065              STR      r5,[r4,#4]
000134  2001              MOVS     r0,#1
000136  e7d2              B        |L1.222|
                  |L1.312|
000138  f8d80010          LDR      r0,[r8,#0x10]
00013c  f020000f          BIC      r0,r0,#0xf
000140  f8c80010          STR      r0,[r8,#0x10]
000144  f8d80010          LDR      r0,[r8,#0x10]
000148  f040000a          ORR      r0,r0,#0xa
00014c  f8c80010          STR      r0,[r8,#0x10]
000150  f8d901a8          LDR      r0,[r9,#0x1a8]
000154  f3c02001          UBFX     r0,r0,#8,#2
000158  2801              CMP      r0,#1
00015a  d008              BEQ      |L1.366|
00015c  2802              CMP      r0,#2
00015e  d003              BEQ      |L1.360|
000160  2803              CMP      r0,#3
000162  d003              BEQ      |L1.364|
000164  461a              MOV      r2,r3
000166  e002              B        |L1.366|
                  |L1.360|
000168  4622              MOV      r2,r4
00016a  e000              B        |L1.366|
                  |L1.364|
00016c  4662              MOV      r2,r12
                  |L1.366|
00016e  4cad              LDR      r4,|L1.1060|
000170  7327              STRB     r7,[r4,#0xc]
000172  0910              LSRS     r0,r2,#4
000174  fbb0f0f1          UDIV     r0,r0,r1
000178  0a01              LSRS     r1,r0,#8
00017a  7121              STRB     r1,[r4,#4]
00017c  7020              STRB     r0,[r4,#0]
00017e  7326              STRB     r6,[r4,#0xc]
000180  7225              STRB     r5,[r4,#8]
000182  2006              MOVS     r0,#6
000184  f7fffffe          BL       NVIC_EnableIRQ
000188  6065              STR      r5,[r4,#4]
00018a  2001              MOVS     r0,#1
00018c  e7a7              B        |L1.222|
;;;360    
                          ENDP

                  UART0_IRQHandler PROC
;;;487    //***********************************************
;;;488    void UART0_IRQHandler (void) 
00018e  e92d4ff8          PUSH     {r3-r11,lr}
;;;489    {
;;;490    uint8_t IIRValue, LSRValue;
;;;491    uint8_t Dummy = Dummy;
;;;492    char /*status,u0iir,*/data;
;;;493    
;;;494    plazma_uart0++;
000192  4e9e              LDR      r6,|L1.1036|
000194  78f0              LDRB     r0,[r6,#3]  ; plazma_uart0
000196  1c40              ADDS     r0,r0,#1
000198  70f0              STRB     r0,[r6,#3]
;;;495    
;;;496    
;;;497    			
;;;498    IIRValue = LPC_UART0->IIR;
00019a  499d              LDR      r1,|L1.1040|
00019c  6888              LDR      r0,[r1,#8]
;;;499        
;;;500    IIRValue >>= 1;			/* skip pending bit in IIR */
00019e  0840              LSRS     r0,r0,#1
;;;501    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
0001a0  f0000007          AND      r0,r0,#7
;;;502    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;503      	{
;;;504    	LSRValue = LPC_UART0->LSR;
;;;505    
;;;506    	/* Receive Line Status */
;;;507    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;508    		{
;;;509    	  	/* There are errors or break interrupt */
;;;510    	  	/* Read LSR will clear the interrupt */
;;;511    	  	UART0Status = LSRValue;
;;;512    	  	Dummy = LPC_UART0->RBR;		/* Dummy read on RX to clear 
;;;513    							interrupt, then bail out */
;;;514    	  	return;
;;;515    		}
;;;516    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;517    		{
;;;518    		
;;;519    		data=LPC_UART0->RBR;
;;;520    		rx_buffer0[rx_wr_index0]=data;
0001a4  f8dfb280          LDR      r11,|L1.1064|
;;;521       		bRXIN0=1;
;;;522       		if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0001a8  2400              MOVS     r4,#0
0001aa  f44f6a80          MOV      r10,#0x400
0001ae  f04f0901          MOV      r9,#1                 ;521
0001b2  2803              CMP      r0,#3                 ;502
0001b4  d01f              BEQ      |L1.502|
;;;523       		if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;524          		{
;;;525          		rx_counter0=0;
;;;526          		rx_buffer_overflow0=1;
;;;527          		}
;;;528    
;;;529    		
;;;530    		}
;;;531      	}
;;;532    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
0001b6  2802              CMP      r0,#2
0001b8  d03c              BEQ      |L1.564|
;;;533      	{
;;;534    	plazma_bat_drv0++;
;;;535    	modbus_plazma++;
;;;536    	while((LPC_UART0->LSR)&0x0001) {	
;;;537    	data=LPC_UART0->RBR;
;;;538    	rx_buffer0[rx_wr_index0]=data;
;;;539       	bRXIN0=1;
;;;540       	if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;;;541       	if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;542          	{
;;;543          	rx_counter0=0;
;;;544          	rx_buffer_overflow0=1;
;;;545          	}
;;;546    	modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;547    	modbus_rx_buffer_ptr++;
;;;548    	modbus_timeout_cnt=0;
;;;549    
;;;550    
;;;551    
;;;552    	
;;;553    
;;;554    	if(data==0x7e)
;;;555    		{
;;;556    		bat_drv_rx_cnt=0;
;;;557    		bat_drv_rx_cnt=0;
;;;558    		}
;;;559    	//if(bat_drv_rx_cnt<50)
;;;560    	bat_drv_rx_buff[bat_drv_rx_cnt++]=data;
;;;561    	//if(bat_drv_rx_cnt==50) bat_drv_rx_in=1; 
;;;562    
;;;563    	if(data==0x0d)
;;;564    		{
;;;565    		if(BAT_TYPE==2)
;;;566    			{
;;;567    			if(sacredSunRequestPhase==0)	mem_copy (liBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;568    			else if(sacredSunRequestPhase==1)	mem_copy (&liBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;569    			sacredSunSilentCnt=0;
;;;570    			}
;;;571    		else if (BAT_TYPE==3)
;;;572    			{
;;;573    			numOfPacks_=((ascii2halFhex(bat_drv_rx_buff[15]))<<4)+((ascii2halFhex(bat_drv_rx_buff[16])));
;;;574    			if(numOfPacks_)numOfPacks_--;
;;;575    		   	if(numOfPacks_<0)numOfPacks_=0;
;;;576    			if(numOfPacks_>NUMBAT)numOfPacks_=0;
;;;577    			zTTSilentCnt[numOfPacks_]=50;
;;;578    
;;;579    			if(zTTRequestPhase==0)	mem_copy (liBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;580    			else if(zTTRequestPhase==1)	mem_copy (&liBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;581    			//zTTSilentCnt=0;
;;;582    			}
;;;583    		}
;;;584    
;;;585    	}
;;;586      	}
;;;587    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
0001ba  2806              CMP      r0,#6
0001bc  d078              BEQ      |L1.688|
;;;588      	{
;;;589    	/* Character Time-out indicator */
;;;590    	UART0Status |= 0x100;		/* Bit 9 as the CTI error */
;;;591      	}
;;;592    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
0001be  2801              CMP      r0,#1
0001c0  d117              BNE      |L1.498|
;;;593      	{
;;;594    	/* THRE interrupt */
;;;595    	
;;;596    	plazma_bat_drv1++;
0001c2  489a              LDR      r0,|L1.1068|
0001c4  8802              LDRH     r2,[r0,#0]  ; plazma_bat_drv1
0001c6  1c52              ADDS     r2,r2,#1
0001c8  8002              STRH     r2,[r0,#0]
;;;597    	LSRValue = LPC_UART0->LSR;		/* Check status in the LSR to see if
0001ca  7d08              LDRB     r0,[r1,#0x14]
;;;598    									valid data in U0THR or not */
;;;599    	if ( LSRValue & LSR_THRE )
0001cc  0680              LSLS     r0,r0,#26
0001ce  d570              BPL      |L1.690|
;;;600    		{
;;;601    	  	UART0TxEmpty = 1;
0001d0  f8869000          STRB     r9,[r6,#0]
;;;602    		if (tx_counter0)
0001d4  89f0              LDRH     r0,[r6,#0xe]  ; tx_counter0
0001d6  2800              CMP      r0,#0
0001d8  d00b              BEQ      |L1.498|
;;;603       			{
;;;604       			--tx_counter0;
0001da  1e40              SUBS     r0,r0,#1
0001dc  81f0              STRH     r0,[r6,#0xe]
;;;605       			LPC_UART0->THR=tx_buffer0[tx_rd_index0];
0001de  4a8d              LDR      r2,|L1.1044|
0001e0  89b0              LDRH     r0,[r6,#0xc]  ; tx_rd_index0
0001e2  5c12              LDRB     r2,[r2,r0]
0001e4  700a              STRB     r2,[r1,#0]
;;;606       			if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0001e6  1c40              ADDS     r0,r0,#1
0001e8  b280              UXTH     r0,r0
0001ea  81b0              STRH     r0,[r6,#0xc]
0001ec  4550              CMP      r0,r10
0001ee  d100              BNE      |L1.498|
0001f0  81b4              STRH     r4,[r6,#0xc]
                  |L1.498|
;;;607       			}
;;;608    		}
;;;609    	else
;;;610    		{
;;;611    	  	UART0TxEmpty = 0;
;;;612    		}
;;;613      	}
;;;614    }
0001f2  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.502|
0001f6  7d08              LDRB     r0,[r1,#0x14]         ;504
0001f8  f0100f9e          TST      r0,#0x9e              ;507
0001fc  d002              BEQ      |L1.516|
0001fe  6130              STR      r0,[r6,#0x10]         ;511  ; UART0Status
000200  7808              LDRB     r0,[r1,#0]            ;512
000202  e7f6              B        |L1.498|
                  |L1.516|
000204  07c0              LSLS     r0,r0,#31             ;516
000206  d0f4              BEQ      |L1.498|
000208  7809              LDRB     r1,[r1,#0]            ;519
00020a  88b0              LDRH     r0,[r6,#4]            ;520  ; rx_wr_index0
00020c  f80b1000          STRB     r1,[r11,r0]           ;520
000210  f8869001          STRB     r9,[r6,#1]            ;521
000214  1c40              ADDS     r0,r0,#1              ;522
000216  b280              UXTH     r0,r0                 ;522
000218  80b0              STRH     r0,[r6,#4]            ;522
00021a  4550              CMP      r0,r10                ;522
00021c  d100              BNE      |L1.544|
00021e  80b4              STRH     r4,[r6,#4]            ;522
                  |L1.544|
000220  8930              LDRH     r0,[r6,#8]            ;523  ; rx_counter0
000222  1c40              ADDS     r0,r0,#1              ;523
000224  b280              UXTH     r0,r0                 ;523
000226  8130              STRH     r0,[r6,#8]            ;523
000228  4550              CMP      r0,r10                ;523
00022a  d1e2              BNE      |L1.498|
00022c  8134              STRH     r4,[r6,#8]            ;525
00022e  f8869002          STRB     r9,[r6,#2]            ;526
000232  e7de              B        |L1.498|
                  |L1.564|
000234  4a7e              LDR      r2,|L1.1072|
000236  8810              LDRH     r0,[r2,#0]            ;534  ; plazma_bat_drv0
000238  1c40              ADDS     r0,r0,#1              ;534
00023a  8010              STRH     r0,[r2,#0]            ;534
00023c  487d              LDR      r0,|L1.1076|
00023e  8802              LDRH     r2,[r0,#0]            ;535  ; modbus_plazma
000240  1c52              ADDS     r2,r2,#1              ;535
000242  8002              STRH     r2,[r0,#0]            ;535
000244  487e              LDR      r0,|L1.1088|
000246  f8df81f0          LDR      r8,|L1.1080|
00024a  4d7c              LDR      r5,|L1.1084|
00024c  9000              STR      r0,[sp,#0]            ;536
00024e  e07a              B        |L1.838|
                  |L1.592|
000250  7800              LDRB     r0,[r0,#0]            ;537
000252  88b1              LDRH     r1,[r6,#4]            ;538  ; rx_wr_index0
000254  f80b0001          STRB     r0,[r11,r1]           ;538
000258  f8869001          STRB     r9,[r6,#1]            ;539
00025c  1c49              ADDS     r1,r1,#1              ;540
00025e  b289              UXTH     r1,r1                 ;540
000260  80b1              STRH     r1,[r6,#4]            ;540
000262  4551              CMP      r1,r10                ;540
000264  d100              BNE      |L1.616|
000266  80b4              STRH     r4,[r6,#4]            ;540
                  |L1.616|
000268  8931              LDRH     r1,[r6,#8]            ;541  ; rx_counter0
00026a  1c49              ADDS     r1,r1,#1              ;541
00026c  b289              UXTH     r1,r1                 ;541
00026e  8131              STRH     r1,[r6,#8]            ;541
000270  4551              CMP      r1,r10                ;541
000272  d102              BNE      |L1.634|
000274  8134              STRH     r4,[r6,#8]            ;543
000276  f8869002          STRB     r9,[r6,#2]            ;544
                  |L1.634|
00027a  4a73              LDR      r2,|L1.1096|
00027c  4b71              LDR      r3,|L1.1092|
00027e  7811              LDRB     r1,[r2,#0]            ;546  ; modbus_rx_buffer_ptr
000280  5458              STRB     r0,[r3,r1]            ;546
000282  1c49              ADDS     r1,r1,#1              ;547
000284  7011              STRB     r1,[r2,#0]            ;547
000286  4971              LDR      r1,|L1.1100|
000288  700c              STRB     r4,[r1,#0]            ;548
00028a  287e              CMP      r0,#0x7e              ;554
00028c  d100              BNE      |L1.656|
00028e  802c              STRH     r4,[r5,#0]            ;556
                  |L1.656|
000290  8829              LDRH     r1,[r5,#0]            ;560  ; bat_drv_rx_cnt
000292  1c4a              ADDS     r2,r1,#1              ;560
000294  b292              UXTH     r2,r2                 ;560
000296  802a              STRH     r2,[r5,#0]            ;560
000298  f8080001          STRB     r0,[r8,r1]            ;560
00029c  280d              CMP      r0,#0xd               ;563
00029e  d152              BNE      |L1.838|
0002a0  486b              LDR      r0,|L1.1104|
0002a2  f9b00000          LDRSH    r0,[r0,#0]            ;565  ; BAT_TYPE
0002a6  2802              CMP      r0,#2                 ;565
0002a8  d004              BEQ      |L1.692|
0002aa  2803              CMP      r0,#3                 ;571
0002ac  d14b              BNE      |L1.838|
0002ae  e014              B        |L1.730|
                  |L1.688|
0002b0  e04e              B        |L1.848|
                  |L1.690|
0002b2  e052              B        |L1.858|
                  |L1.692|
0002b4  4867              LDR      r0,|L1.1108|
0002b6  7800              LDRB     r0,[r0,#0]            ;567  ; sacredSunRequestPhase
0002b8  b110              CBZ      r0,|L1.704|
0002ba  2801              CMP      r0,#1                 ;568
0002bc  d006              BEQ      |L1.716|
0002be  e009              B        |L1.724|
                  |L1.704|
0002c0  485f              LDR      r0,|L1.1088|
0002c2  495d              LDR      r1,|L1.1080|
0002c4  3896              SUBS     r0,r0,#0x96           ;567
0002c6  f7fffffe          BL       mem_copy
0002ca  e003              B        |L1.724|
                  |L1.716|
0002cc  495a              LDR      r1,|L1.1080|
0002ce  9800              LDR      r0,[sp,#0]            ;568
0002d0  f7fffffe          BL       mem_copy
                  |L1.724|
0002d4  4860              LDR      r0,|L1.1112|
0002d6  8004              STRH     r4,[r0,#0]            ;569
0002d8  e035              B        |L1.838|
                  |L1.730|
0002da  f8980010          LDRB     r0,[r8,#0x10]         ;573  ; bat_drv_rx_buff
0002de  f7fffffe          BL       ascii2halFhex
0002e2  4607              MOV      r7,r0                 ;573
0002e4  f898000f          LDRB     r0,[r8,#0xf]          ;573  ; bat_drv_rx_buff
0002e8  f7fffffe          BL       ascii2halFhex
0002ec  495b              LDR      r1,|L1.1116|
0002ee  eb071000          ADD      r0,r7,r0,LSL #4       ;573
0002f2  b200              SXTH     r0,r0                 ;573
0002f4  8008              STRH     r0,[r1,#0]            ;573
0002f6  b108              CBZ      r0,|L1.764|
0002f8  1e40              SUBS     r0,r0,#1              ;574
0002fa  8008              STRH     r0,[r1,#0]            ;574
                  |L1.764|
0002fc  f9b10000          LDRSH    r0,[r1,#0]            ;575  ; numOfPacks_
000300  2800              CMP      r0,#0                 ;575
000302  da00              BGE      |L1.774|
000304  800c              STRH     r4,[r1,#0]            ;575
                  |L1.774|
000306  4a56              LDR      r2,|L1.1120|
000308  f9b10000          LDRSH    r0,[r1,#0]            ;576  ; numOfPacks_
00030c  f9b22000          LDRSH    r2,[r2,#0]            ;576  ; NUMBAT
000310  4290              CMP      r0,r2                 ;576
000312  dd00              BLE      |L1.790|
000314  800c              STRH     r4,[r1,#0]            ;576
                  |L1.790|
000316  4a53              LDR      r2,|L1.1124|
000318  f9b11000          LDRSH    r1,[r1,#0]            ;577  ; numOfPacks_
00031c  2032              MOVS     r0,#0x32              ;577
00031e  f8220011          STRH     r0,[r2,r1,LSL #1]     ;577
000322  4851              LDR      r0,|L1.1128|
000324  7800              LDRB     r0,[r0,#0]            ;579  ; zTTRequestPhase
000326  b110              CBZ      r0,|L1.814|
000328  2801              CMP      r0,#1                 ;580
00032a  d10c              BNE      |L1.838|
00032c  e006              B        |L1.828|
                  |L1.814|
00032e  4844              LDR      r0,|L1.1088|
000330  882a              LDRH     r2,[r5,#0]            ;579  ; bat_drv_rx_cnt
000332  4941              LDR      r1,|L1.1080|
000334  3896              SUBS     r0,r0,#0x96           ;579
000336  f7fffffe          BL       mem_copy
00033a  e004              B        |L1.838|
                  |L1.828|
00033c  882a              LDRH     r2,[r5,#0]            ;580  ; bat_drv_rx_cnt
00033e  493e              LDR      r1,|L1.1080|
000340  9800              LDR      r0,[sp,#0]            ;580
000342  f7fffffe          BL       mem_copy
                  |L1.838|
000346  4832              LDR      r0,|L1.1040|
000348  7d01              LDRB     r1,[r0,#0x14]         ;536
00034a  07c9              LSLS     r1,r1,#31             ;536
00034c  d180              BNE      |L1.592|
00034e  e750              B        |L1.498|
                  |L1.848|
000350  6930              LDR      r0,[r6,#0x10]         ;590  ; UART0Status
000352  f4407080          ORR      r0,r0,#0x100          ;590
000356  6130              STR      r0,[r6,#0x10]         ;590  ; UART0Status
000358  e74b              B        |L1.498|
                  |L1.858|
00035a  7034              STRB     r4,[r6,#0]            ;611
00035c  e749              B        |L1.498|
;;;615    
                          ENDP

                  uart_in_an0 PROC
;;;618    //-----------------------------------------------
;;;619    void uart_in_an0(void)
00035e  b5f0              PUSH     {r4-r7,lr}
;;;620    {
000360  b089              SUB      sp,sp,#0x24
;;;621    
;;;622    
;;;623    
;;;624    if((UIB0[0]=='r')&&(UIB0[1]=='e')&&(UIB0[2]=='a')&&(UIB0[3]=='d')&&(UIB0[6]==crc_87(UIB0,6))&&(UIB0[7]==crc_95(UIB0,6)))
000362  4c31              LDR      r4,|L1.1064|
000364  2672              MOVS     r6,#0x72
000366  3c64              SUBS     r4,r4,#0x64
000368  2765              MOVS     r7,#0x65
00036a  7820              LDRB     r0,[r4,#0]  ; UIB0
00036c  2872              CMP      r0,#0x72
00036e  d148              BNE      |L1.1026|
000370  7860              LDRB     r0,[r4,#1]  ; UIB0
000372  2865              CMP      r0,#0x65
000374  d145              BNE      |L1.1026|
000376  78a0              LDRB     r0,[r4,#2]  ; UIB0
000378  2861              CMP      r0,#0x61
00037a  d142              BNE      |L1.1026|
00037c  78e0              LDRB     r0,[r4,#3]  ; UIB0
00037e  2864              CMP      r0,#0x64
000380  d13f              BNE      |L1.1026|
000382  2106              MOVS     r1,#6
000384  4620              MOV      r0,r4
000386  f7fffffe          BL       crc_87
00038a  79a1              LDRB     r1,[r4,#6]  ; UIB0
00038c  4288              CMP      r0,r1
00038e  d138              BNE      |L1.1026|
000390  2106              MOVS     r1,#6
000392  4620              MOV      r0,r4
000394  f7fffffe          BL       crc_95
000398  79e1              LDRB     r1,[r4,#7]  ; UIB0
00039a  4288              CMP      r0,r1
00039c  d131              BNE      |L1.1026|
;;;625    	{
;;;626    	unsigned short ptr;
;;;627    	unsigned long data1,data2;
;;;628    	char temp_out[20];
;;;629    	ptr=UIB0[4]+(UIB0[5]*256U);
00039e  7920              LDRB     r0,[r4,#4]  ; UIB0
0003a0  7961              LDRB     r1,[r4,#5]  ; UIB0
0003a2  eb002001          ADD      r0,r0,r1,LSL #8
0003a6  b280              UXTH     r0,r0
0003a8  4605              MOV      r5,r0
0003aa  9008              STR      r0,[sp,#0x20]
;;;630    	data1=lc640_read_long(ptr);
0003ac  4628              MOV      r0,r5
0003ae  f7fffffe          BL       lc640_read_long
0003b2  9007              STR      r0,[sp,#0x1c]
;;;631    	data2=lc640_read_long(ptr+4);
0003b4  1d28              ADDS     r0,r5,#4
0003b6  f7fffffe          BL       lc640_read_long
0003ba  9006              STR      r0,[sp,#0x18]
;;;632    	temp_out[0]='r';
0003bc  f88d6004          STRB     r6,[sp,#4]
;;;633    	temp_out[1]='e';
0003c0  f88d7005          STRB     r7,[sp,#5]
;;;634    	temp_out[2]='a';
0003c4  2061              MOVS     r0,#0x61
0003c6  f88d0006          STRB     r0,[sp,#6]
;;;635    	temp_out[3]='d';
0003ca  2064              MOVS     r0,#0x64
0003cc  f88d0007          STRB     r0,[sp,#7]
;;;636    	temp_out[4]=*((char*)&ptr);
0003d0  f89d0020          LDRB     r0,[sp,#0x20]
0003d4  f88d0008          STRB     r0,[sp,#8]
;;;637    	temp_out[5]=*(((char*)&ptr)+1);	
0003d8  f89d0021          LDRB     r0,[sp,#0x21]
0003dc  f88d0009          STRB     r0,[sp,#9]
;;;638    	temp_out[6]=*((char*)&data1);
0003e0  f89d001c          LDRB     r0,[sp,#0x1c]
0003e4  f88d000a          STRB     r0,[sp,#0xa]
;;;639    	temp_out[7]=*(((char*)&data1)+1);		
0003e8  f89d001d          LDRB     r0,[sp,#0x1d]
0003ec  f88d000b          STRB     r0,[sp,#0xb]
;;;640    	temp_out[8]=*(((char*)&data1)+2);	
0003f0  f89d001e          LDRB     r0,[sp,#0x1e]
0003f4  f88d000c          STRB     r0,[sp,#0xc]
;;;641    	temp_out[9]=*(((char*)&data1)+3);		
0003f8  f89d001f          LDRB     r0,[sp,#0x1f]
0003fc  f88d000d          STRB     r0,[sp,#0xd]
;;;642    	temp_out[10]=*((char*)&data2);
000400  e034              B        |L1.1132|
                  |L1.1026|
000402  e053              B        |L1.1196|
                  |L1.1028|
                          DCD      Table87
                  |L1.1032|
                          DCD      Table95
                  |L1.1036|
                          DCD      ||.data||
                  |L1.1040|
                          DCD      0x4000c000
                  |L1.1044|
                          DCD      ||.bss||+0x464
                  |L1.1048|
                          DCD      0x4002c000
                  |L1.1052|
                          DCD      0x400fc000
                  |L1.1056|
                          DCD      SystemFrequency
                  |L1.1060|
                          DCD      0x40010000
                  |L1.1064|
                          DCD      ||.bss||+0x64
                  |L1.1068|
                          DCD      plazma_bat_drv1
                  |L1.1072|
                          DCD      plazma_bat_drv0
                  |L1.1076|
                          DCD      modbus_plazma
                  |L1.1080|
                          DCD      bat_drv_rx_buff
                  |L1.1084|
                          DCD      bat_drv_rx_cnt
                  |L1.1088|
                          DCD      liBatteryInBuff+0x96
                  |L1.1092|
                          DCD      modbus_rx_buffer
                  |L1.1096|
                          DCD      modbus_rx_buffer_ptr
                  |L1.1100|
                          DCD      modbus_timeout_cnt
                  |L1.1104|
                          DCD      BAT_TYPE
                  |L1.1108|
                          DCD      sacredSunRequestPhase
                  |L1.1112|
                          DCD      sacredSunSilentCnt
                  |L1.1116|
                          DCD      numOfPacks_
                  |L1.1120|
                          DCD      NUMBAT
                  |L1.1124|
                          DCD      zTTSilentCnt
                  |L1.1128|
                          DCD      zTTRequestPhase
                  |L1.1132|
00046c  f89d0018          LDRB     r0,[sp,#0x18]
000470  f88d000e          STRB     r0,[sp,#0xe]
;;;643    	temp_out[11]=*(((char*)&data2)+1);		
000474  f89d0019          LDRB     r0,[sp,#0x19]
000478  f88d000f          STRB     r0,[sp,#0xf]
;;;644    	temp_out[12]=*(((char*)&data2)+2);	
00047c  f89d001a          LDRB     r0,[sp,#0x1a]
000480  f88d0010          STRB     r0,[sp,#0x10]
;;;645    	temp_out[13]=*(((char*)&data2)+3);	
000484  f89d001b          LDRB     r0,[sp,#0x1b]
000488  f88d0011          STRB     r0,[sp,#0x11]
;;;646    	temp_out[14]=crc_87(temp_out,14);	
00048c  210e              MOVS     r1,#0xe
00048e  a801              ADD      r0,sp,#4
000490  f7fffffe          BL       crc_87
000494  f88d0012          STRB     r0,[sp,#0x12]
;;;647    	temp_out[15]=crc_95(temp_out,14);			
000498  210e              MOVS     r1,#0xe
00049a  a801              ADD      r0,sp,#4
00049c  f7fffffe          BL       crc_95
0004a0  f88d0013          STRB     r0,[sp,#0x13]
;;;648    	uart_out_adr0(temp_out,16);
0004a4  2110              MOVS     r1,#0x10
0004a6  a801              ADD      r0,sp,#4
0004a8  f7fffffe          BL       uart_out_adr0
                  |L1.1196|
;;;649    	}
;;;650    
;;;651    
;;;652    if((UIB0[0]=='w')&&(UIB0[1]=='r')&&(UIB0[2]=='i')&&(UIB0[3]=='t')&&(UIB0[4]=='e')&&(UIB0[15]==crc_87(UIB0,15))&&(UIB0[16]==crc_95(UIB0,15)))
0004ac  7820              LDRB     r0,[r4,#0]  ; UIB0
0004ae  2877              CMP      r0,#0x77
0004b0  d165              BNE      |L1.1406|
0004b2  7860              LDRB     r0,[r4,#1]  ; UIB0
0004b4  2872              CMP      r0,#0x72
0004b6  d162              BNE      |L1.1406|
0004b8  78a0              LDRB     r0,[r4,#2]  ; UIB0
0004ba  2869              CMP      r0,#0x69
0004bc  d15f              BNE      |L1.1406|
0004be  78e0              LDRB     r0,[r4,#3]  ; UIB0
0004c0  2874              CMP      r0,#0x74
0004c2  d15c              BNE      |L1.1406|
0004c4  7920              LDRB     r0,[r4,#4]  ; UIB0
0004c6  2865              CMP      r0,#0x65
0004c8  d159              BNE      |L1.1406|
0004ca  210f              MOVS     r1,#0xf
0004cc  4871              LDR      r0,|L1.1684|
0004ce  f7fffffe          BL       crc_87
0004d2  7be1              LDRB     r1,[r4,#0xf]  ; UIB0
0004d4  4288              CMP      r0,r1
0004d6  d152              BNE      |L1.1406|
0004d8  210f              MOVS     r1,#0xf
0004da  486e              LDR      r0,|L1.1684|
0004dc  f7fffffe          BL       crc_95
0004e0  7c21              LDRB     r1,[r4,#0x10]  ; UIB0
0004e2  4288              CMP      r0,r1
0004e4  d14b              BNE      |L1.1406|
;;;653    	{
;;;654    	unsigned short ptr;
;;;655    	unsigned long data1,data2;
;;;656    	char temp_out[20];
;;;657    	ptr=UIB0[5]+(UIB0[6]*256U);
0004e6  7960              LDRB     r0,[r4,#5]  ; UIB0
0004e8  79a1              LDRB     r1,[r4,#6]  ; UIB0
0004ea  eb002001          ADD      r0,r0,r1,LSL #8
0004ee  b280              UXTH     r0,r0
0004f0  4605              MOV      r5,r0
0004f2  9008              STR      r0,[sp,#0x20]
;;;658    	*((char*)&data1)=UIB0[7];
0004f4  79e0              LDRB     r0,[r4,#7]  ; UIB0
0004f6  f88d001c          STRB     r0,[sp,#0x1c]
;;;659    	*(((char*)&data1)+1)=UIB0[8];
0004fa  7a20              LDRB     r0,[r4,#8]  ; UIB0
0004fc  f88d001d          STRB     r0,[sp,#0x1d]
;;;660    	*(((char*)&data1)+2)=UIB0[9];
000500  7a60              LDRB     r0,[r4,#9]  ; UIB0
000502  f88d001e          STRB     r0,[sp,#0x1e]
;;;661    	*(((char*)&data1)+3)=UIB0[10];
000506  7aa0              LDRB     r0,[r4,#0xa]  ; UIB0
000508  f88d001f          STRB     r0,[sp,#0x1f]
;;;662    	*((char*)&data2)=UIB0[11];
00050c  7ae0              LDRB     r0,[r4,#0xb]  ; UIB0
00050e  f88d0018          STRB     r0,[sp,#0x18]
;;;663    	*(((char*)&data2)+1)=UIB0[12];
000512  7b20              LDRB     r0,[r4,#0xc]  ; UIB0
000514  f88d0019          STRB     r0,[sp,#0x19]
;;;664    	*(((char*)&data2)+2)=UIB0[13];
000518  7b60              LDRB     r0,[r4,#0xd]  ; UIB0
00051a  f88d001a          STRB     r0,[sp,#0x1a]
;;;665    	*(((char*)&data2)+3)=UIB0[14];	
00051e  7ba0              LDRB     r0,[r4,#0xe]  ; UIB0
000520  f88d001b          STRB     r0,[sp,#0x1b]
;;;666    	lc640_write_long(ptr,data1);
000524  4628              MOV      r0,r5
000526  9907              LDR      r1,[sp,#0x1c]
000528  f7fffffe          BL       lc640_write_long
;;;667    	lc640_write_long(ptr+4,data2);
00052c  1d28              ADDS     r0,r5,#4
00052e  9906              LDR      r1,[sp,#0x18]
000530  f7fffffe          BL       lc640_write_long
;;;668    	
;;;669    	//data1=lc640_read_long(ptr);
;;;670    	//data2=lc640_read_long(ptr+4);
;;;671    	temp_out[0]='w';
000534  2077              MOVS     r0,#0x77
000536  f88d0004          STRB     r0,[sp,#4]
;;;672    	temp_out[1]='r';
00053a  f88d6005          STRB     r6,[sp,#5]
;;;673    	temp_out[2]='i';
00053e  2069              MOVS     r0,#0x69
000540  f88d0006          STRB     r0,[sp,#6]
;;;674    	temp_out[3]='t';
000544  2074              MOVS     r0,#0x74
000546  f88d0007          STRB     r0,[sp,#7]
;;;675    	temp_out[4]='e';
00054a  f88d7008          STRB     r7,[sp,#8]
;;;676    	temp_out[5]=*((char*)&ptr);
00054e  f89d0020          LDRB     r0,[sp,#0x20]
000552  f88d0009          STRB     r0,[sp,#9]
;;;677    	temp_out[6]=*(((char*)&ptr)+1);	
000556  f89d0021          LDRB     r0,[sp,#0x21]
00055a  f88d000a          STRB     r0,[sp,#0xa]
;;;678    	/*temp_out[6]=*((char*)&data1);
;;;679    	temp_out[7]=*(((char*)&data1)+1);		
;;;680    	temp_out[8]=*(((char*)&data1)+2);	
;;;681    	temp_out[9]=*(((char*)&data1)+3);		
;;;682    	temp_out[10]=*((char*)&data2);
;;;683    	temp_out[11]=*(((char*)&data2)+1);		
;;;684    	temp_out[12]=*(((char*)&data2)+2);	
;;;685    	temp_out[13]=*(((char*)&data2)+3);	*/
;;;686    	temp_out[7]=crc_87(temp_out,7);	
00055e  2107              MOVS     r1,#7
000560  a801              ADD      r0,sp,#4
000562  f7fffffe          BL       crc_87
000566  f88d000b          STRB     r0,[sp,#0xb]
;;;687    	temp_out[8]=crc_95(temp_out,7);			
00056a  2107              MOVS     r1,#7
00056c  a801              ADD      r0,sp,#4
00056e  f7fffffe          BL       crc_95
000572  f88d000c          STRB     r0,[sp,#0xc]
;;;688    	uart_out_adr0(temp_out,9);
000576  2109              MOVS     r1,#9
000578  a801              ADD      r0,sp,#4
00057a  f7fffffe          BL       uart_out_adr0
                  |L1.1406|
;;;689    	}
;;;690    
;;;691    }
00057e  b009              ADD      sp,sp,#0x24
000580  bdf0              POP      {r4-r7,pc}
;;;692    
                          ENDP

                  index_offset0 PROC
;;;695    //-----------------------------------------------
;;;696    signed short index_offset0 (signed short index,signed short offset)
000582  4408              ADD      r0,r0,r1
;;;697    {
;;;698    index=index+offset;
000584  b200              SXTH     r0,r0
;;;699    if(index>=RX_BUFFER_SIZE0) index-=RX_BUFFER_SIZE0; 
000586  f5b06f80          CMP      r0,#0x400
00058a  db02              BLT      |L1.1426|
00058c  f5a06080          SUB      r0,r0,#0x400
000590  b200              SXTH     r0,r0
                  |L1.1426|
;;;700    if(index<0) index+=RX_BUFFER_SIZE0;
000592  2800              CMP      r0,#0
000594  da02              BGE      |L1.1436|
000596  f5006080          ADD      r0,r0,#0x400
00059a  b200              SXTH     r0,r0
                  |L1.1436|
;;;701    return index;
;;;702    }
00059c  4770              BX       lr
;;;703    
                          ENDP

                  control_check0 PROC
;;;704    //-----------------------------------------------
;;;705    char control_check0(signed short index)
00059e  b570              PUSH     {r4-r6,lr}
;;;706    {
0005a0  4606              MOV      r6,r0
;;;707    char i=0,ii=0,iii;
0005a2  2200              MOVS     r2,#0
;;;708    
;;;709    if(rx_buffer0[index]!=END) goto error_cc;
0005a4  4d3b              LDR      r5,|L1.1684|
0005a6  3564              ADDS     r5,r5,#0x64
0005a8  5da8              LDRB     r0,[r5,r6]
0005aa  280a              CMP      r0,#0xa
0005ac  d11b              BNE      |L1.1510|
;;;710    
;;;711    ii=rx_buffer0[index_offset0(index,-2)];
0005ae  1e91              SUBS     r1,r2,#2
0005b0  4630              MOV      r0,r6
0005b2  f7fffffe          BL       index_offset0
0005b6  5c2c              LDRB     r4,[r5,r0]
;;;712    iii=0;
0005b8  2300              MOVS     r3,#0
;;;713    for(i=0;i<=ii;i++)
0005ba  e008              B        |L1.1486|
                  |L1.1468|
;;;714    	{
;;;715    	iii^=rx_buffer0[index_offset0(index,-2-ii+i)];
0005bc  1b11              SUBS     r1,r2,r4
0005be  1e89              SUBS     r1,r1,#2
0005c0  4630              MOV      r0,r6
0005c2  f7fffffe          BL       index_offset0
0005c6  5c28              LDRB     r0,[r5,r0]
0005c8  4043              EORS     r3,r3,r0
0005ca  1c52              ADDS     r2,r2,#1              ;713
0005cc  b2d2              UXTB     r2,r2                 ;713
                  |L1.1486|
0005ce  42a2              CMP      r2,r4                 ;713
0005d0  d9f4              BLS      |L1.1468|
;;;716    	}
;;;717    if (iii!=rx_buffer0[index_offset0(index,-1)]) goto error_cc;	
0005d2  f04f31ff          MOV      r1,#0xffffffff
0005d6  4630              MOV      r0,r6
0005d8  f7fffffe          BL       index_offset0
0005dc  5c28              LDRB     r0,[r5,r0]
0005de  4298              CMP      r0,r3
0005e0  d101              BNE      |L1.1510|
;;;718    
;;;719    
;;;720    //success_cc:
;;;721    return 1;
0005e2  2001              MOVS     r0,#1
;;;722    error_cc:
;;;723    return 0;
;;;724    
;;;725    }
0005e4  bd70              POP      {r4-r6,pc}
                  |L1.1510|
0005e6  2000              MOVS     r0,#0                 ;723
0005e8  bd70              POP      {r4-r6,pc}
;;;726    
                          ENDP

                  uart_in0 PROC
;;;727    //-----------------------------------------------
;;;728    void uart_in0(void)
0005ea  e92d41f0          PUSH     {r4-r8,lr}
;;;729    {
;;;730    char temp,i/*,count*/;
;;;731    
;;;732    //__disable_irq();
;;;733    
;;;734    if(rx_buffer_overflow0)
0005ee  4d2a              LDR      r5,|L1.1688|
0005f0  2600              MOVS     r6,#0
0005f2  78a8              LDRB     r0,[r5,#2]  ; rx_buffer_overflow0
0005f4  b118              CBZ      r0,|L1.1534|
;;;735    	{
;;;736    	rx_wr_index0=0;
0005f6  80ae              STRH     r6,[r5,#4]
;;;737    	rx_rd_index0=0;
0005f8  80ee              STRH     r6,[r5,#6]
;;;738    	rx_counter0=0;
0005fa  812e              STRH     r6,[r5,#8]
;;;739    	rx_buffer_overflow0=0;
0005fc  70ae              STRB     r6,[r5,#2]
                  |L1.1534|
;;;740    	}    
;;;741    	
;;;742    if(rx_counter0&&(rx_buffer0[index_offset0(rx_wr_index0,-1)])==END)
0005fe  8928              LDRH     r0,[r5,#8]  ; rx_counter0
000600  2800              CMP      r0,#0
000602  d038              BEQ      |L1.1654|
000604  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000606  f04f32ff          MOV      r2,#0xffffffff
00060a  4611              MOV      r1,r2
00060c  b200              SXTH     r0,r0
00060e  f7fffffe          BL       index_offset0
000612  4f20              LDR      r7,|L1.1684|
000614  3764              ADDS     r7,r7,#0x64
000616  5c38              LDRB     r0,[r7,r0]
000618  280a              CMP      r0,#0xa
00061a  d12c              BNE      |L1.1654|
;;;743    	{
;;;744    	
;;;745         temp=rx_buffer0[index_offset0(rx_wr_index0,-3)];
00061c  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
00061e  f06f0102          MVN      r1,#2
000622  b200              SXTH     r0,r0
000624  f7fffffe          BL       index_offset0
000628  5c3c              LDRB     r4,[r7,r0]
;;;746        	if(temp<100) 
00062a  2c64              CMP      r4,#0x64
00062c  d223              BCS      |L1.1654|
;;;747        		{
;;;748        		if(control_check0(index_offset0(rx_wr_index0,-1)))
00062e  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000630  4611              MOV      r1,r2
000632  b200              SXTH     r0,r0
000634  f7fffffe          BL       index_offset0
000638  f7fffffe          BL       control_check0
00063c  2800              CMP      r0,#0
00063e  d01a              BEQ      |L1.1654|
;;;749        			{
;;;750        		
;;;751        			rx_rd_index0=index_offset0(rx_wr_index0,-3-temp);
000640  1ce0              ADDS     r0,r4,#3
000642  4241              RSBS     r1,r0,#0
000644  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000646  b200              SXTH     r0,r0
000648  f7fffffe          BL       index_offset0
00064c  80e8              STRH     r0,[r5,#6]
;;;752        			for(i=0;i<temp;i++)
00064e  2200              MOVS     r2,#0
;;;753    				{
;;;754    				UIB0[i]=rx_buffer0[index_offset0(rx_rd_index0,i)];
000650  4b10              LDR      r3,|L1.1684|
000652  e008              B        |L1.1638|
                  |L1.1620|
000654  88e8              LDRH     r0,[r5,#6]  ; rx_rd_index0
000656  4611              MOV      r1,r2
000658  b200              SXTH     r0,r0
00065a  f7fffffe          BL       index_offset0
00065e  5c38              LDRB     r0,[r7,r0]
000660  5498              STRB     r0,[r3,r2]
000662  1c52              ADDS     r2,r2,#1              ;752
000664  b2d2              UXTB     r2,r2                 ;752
                  |L1.1638|
000666  42a2              CMP      r2,r4                 ;752
000668  d3f4              BCC      |L1.1620|
;;;755    				} 
;;;756    			rx_rd_index0=rx_wr_index0;
00066a  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
00066c  80e8              STRH     r0,[r5,#6]
;;;757    			rx_counter0=0;
00066e  812e              STRH     r6,[r5,#8]
;;;758    			
;;;759    			uart_in_an0();
000670  e8bd41f0          POP      {r4-r8,lr}
000674  e7fe              B        uart_in_an0
                  |L1.1654|
;;;760        			}
;;;761     	
;;;762        		} 
;;;763        	}	
;;;764    
;;;765    
;;;766    //__enable_irq();     
;;;767    }   	
000676  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1501    */
;;;1502   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
00067a  f000021f          AND      r2,r0,#0x1f
;;;1503   {
;;;1504     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
00067e  2101              MOVS     r1,#1
000680  4091              LSLS     r1,r1,r2
000682  0940              LSRS     r0,r0,#5
000684  f04f22e0          MOV      r2,#0xe000e000
000688  eb020080          ADD      r0,r2,r0,LSL #2
00068c  f8c01100          STR      r1,[r0,#0x100]
;;;1505   }
000690  4770              BX       lr
;;;1506   
                          ENDP

000692  0000              DCW      0x0000
                  |L1.1684|
                          DCD      ||.bss||
                  |L1.1688|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  uart_out0 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b5ff              PUSH     {r0-r7,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  ad09              ADD      r5,sp,#0x24
;;;82     
;;;83     for(j=1;j<num;j++)
000004  cde0              LDM      r5,{r5-r7}
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000006  2400              MOVS     r4,#0
000008  f88d1000          STRB     r1,[sp,#0]            ;83
00000c  f88d2001          STRB     r2,[sp,#1]
000010  f88d3002          STRB     r3,[sp,#2]
000014  f88d5003          STRB     r5,[sp,#3]            ;83
000018  f88d6004          STRB     r6,[sp,#4]            ;83
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
00001c  f88d7005          STRB     r7,[sp,#5]
000020  2100              MOVS     r1,#0
000022  466d              MOV      r5,sp
000024  e003              B        |L2.46|
                  |L2.38|
000026  5c6a              LDRB     r2,[r5,r1]
000028  4054              EORS     r4,r4,r2
00002a  1c49              ADDS     r1,r1,#1
00002c  b2c9              UXTB     r1,r1
                  |L2.46|
00002e  4281              CMP      r1,r0
000030  d3f9              BCC      |L2.38|
000032  5428              STRB     r0,[r5,r0]
000034  ea800204          EOR      r2,r0,r4
000038  1829              ADDS     r1,r5,r0
00003a  704a              STRB     r2,[r1,#1]
00003c  220a              MOVS     r2,#0xa
00003e  708a              STRB     r2,[r1,#2]
000040  2400              MOVS     r4,#0
000042  1cc6              ADDS     r6,r0,#3
000044  e004              B        |L2.80|
                  |L2.70|
000046  5d28              LDRB     r0,[r5,r4]
000048  f7fffffe          BL       putchar0
00004c  1c64              ADDS     r4,r4,#1
00004e  b2e4              UXTB     r4,r4
                  |L2.80|
000050  42b4              CMP      r4,r6
000052  d3f8              BCC      |L2.70|
000054  bdff              POP      {r0-r7,pc}
;;;91     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  uart_out_buff0 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;82     
;;;83     for(j=1;j<num;j++)
000004  460d              MOV      r5,r1
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000006  2200              MOVS     r2,#0
000008  466e              MOV      r6,sp                 ;83
00000a  e003              B        |L3.20|
                  |L3.12|
00000c  5c81              LDRB     r1,[r0,r2]
00000e  54b1              STRB     r1,[r6,r2]
000010  1c52              ADDS     r2,r2,#1
000012  b2d2              UXTB     r2,r2                 ;83
                  |L3.20|
000014  42aa              CMP      r2,r5                 ;83
000016  d3f9              BCC      |L3.12|
000018  2400              MOVS     r4,#0                 ;83
;;;87     	}
;;;88     
;;;89     return r;	
00001a  e004              B        |L3.38|
                  |L3.28|
;;;90     } 
00001c  5d30              LDRB     r0,[r6,r4]
00001e  f7fffffe          BL       putchar0
000022  1c64              ADDS     r4,r4,#1
000024  b2e4              UXTB     r4,r4
                  |L3.38|
000026  42ac              CMP      r4,r5
000028  d3f8              BCC      |L3.28|
00002a  b00f              ADD      sp,sp,#0x3c
00002c  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  uart_out_adr_block PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b09a              SUB      sp,sp,#0x68
;;;82     
;;;83     for(j=1;j<num;j++)
000004  460f              MOV      r7,r1
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000006  4616              MOV      r6,r2
000008  2164              MOVS     r1,#0x64              ;83
00000a  a801              ADD      r0,sp,#4              ;85
00000c  f7fffffe          BL       __aeabi_memclr4
000010  2016              MOVS     r0,#0x16
000012  f7fffffe          BL       putchar0
000016  200a              MOVS     r0,#0xa               ;83
000018  f7fffffe          BL       putchar0
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
00001c  f89d0068          LDRB     r0,[sp,#0x68]
000020  f080051c          EOR      r5,r0,#0x1c
000024  f7fffffe          BL       putchar0
000028  f89d0069          LDRB     r0,[sp,#0x69]
00002c  4045              EORS     r5,r5,r0
00002e  f7fffffe          BL       putchar0
000032  f89d006a          LDRB     r0,[sp,#0x6a]
000036  4045              EORS     r5,r5,r0
000038  f7fffffe          BL       putchar0
00003c  f89d006b          LDRB     r0,[sp,#0x6b]
000040  4045              EORS     r5,r5,r0
000042  f7fffffe          BL       putchar0
000046  2400              MOVS     r4,#0
000048  e004              B        |L4.84|
                  |L4.74|
00004a  5d38              LDRB     r0,[r7,r4]
00004c  4045              EORS     r5,r5,r0
00004e  f7fffffe          BL       putchar0
000052  1c64              ADDS     r4,r4,#1
                  |L4.84|
000054  42b4              CMP      r4,r6
000056  d3f8              BCC      |L4.74|
000058  1db6              ADDS     r6,r6,#6
00005a  b2f0              UXTB     r0,r6
00005c  4045              EORS     r5,r5,r0
00005e  f7fffffe          BL       putchar0
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       putchar0
000068  b01d              ADD      sp,sp,#0x74
00006a  200a              MOVS     r0,#0xa
00006c  e8bd40f0          POP      {r4-r7,lr}
000070  f7ffbffe          B.W      putchar0
;;;91     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  rs232_data_out_1 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;82     
;;;83     for(j=1;j<num;j++)
000004  481e              LDR      r0,|L5.128|
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
000008  f8ad0000          STRH     r0,[sp,#0]            ;83
00000c  481d              LDR      r0,|L5.132|
00000e  7800              LDRB     r0,[r0,#0]  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  481c              LDR      r0,|L5.136|
000016  8800              LDRH     r0,[r0,#0]            ;83  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;83
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
00001c  481b              LDR      r0,|L5.140|
00001e  8800              LDRH     r0,[r0,#0]  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]
000024  481a              LDR      r0,|L5.144|
000026  8800              LDRH     r0,[r0,#0]  ; net_U
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  4819              LDR      r0,|L5.148|
00002e  8800              LDRH     r0,[r0,#0]  ; net_F
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  4818              LDR      r0,|L5.152|
000036  8800              LDRH     r0,[r0,#0]  ; t_ext
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  4817              LDR      r0,|L5.156|
00003e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000040  f8ad100e          STRH     r1,[sp,#0xe]
000044  6a41              LDR      r1,[r0,#0x24]  ; bps
000046  f8ad1010          STRH     r1,[sp,#0x10]
00004a  6a81              LDR      r1,[r0,#0x28]  ; bps
00004c  f8ad1012          STRH     r1,[sp,#0x12]
000050  7841              LDRB     r1,[r0,#1]  ; bps
000052  f8ad1014          STRH     r1,[sp,#0x14]
000056  6f81              LDR      r1,[r0,#0x78]  ; bps
000058  f8ad1016          STRH     r1,[sp,#0x16]
00005c  f8d01080          LDR      r1,[r0,#0x80]  ; bps
000060  f8ad1018          STRH     r1,[sp,#0x18]
000064  f8d01084          LDR      r1,[r0,#0x84]  ; bps
000068  f8ad101a          STRH     r1,[sp,#0x1a]
00006c  f890005d          LDRB     r0,[r0,#0x5d]  ; bps
000070  f8ad001c          STRH     r0,[sp,#0x1c]
000074  211e              MOVS     r1,#0x1e
000076  4668              MOV      r0,sp
000078  f7fffffe          BL       uart_out_adr0
00007c  b00f              ADD      sp,sp,#0x3c
00007e  bd00              POP      {pc}
;;;91     
                          ENDP

                  |L5.128|
                          DCD      avar_stat
                  |L5.132|
                          DCD      spc_stat
                  |L5.136|
                          DCD      load_U
                  |L5.140|
                          DCD      load_I
                  |L5.144|
                          DCD      net_U
                  |L5.148|
                          DCD      net_F
                  |L5.152|
                          DCD      t_ext
                  |L5.156|
                          DCD      bps

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  rs232_data_out PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;82     
;;;83     for(j=1;j<num;j++)
000004  4822              LDR      r0,|L6.144|
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
000008  f8ad0000          STRH     r0,[sp,#0]            ;83
00000c  4821              LDR      r0,|L6.148|
00000e  7800              LDRB     r0,[r0,#0]  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  4820              LDR      r0,|L6.152|
000016  8800              LDRH     r0,[r0,#0]            ;83  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;83
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
00001c  481f              LDR      r0,|L6.156|
00001e  8800              LDRH     r0,[r0,#0]  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]
000024  481e              LDR      r0,|L6.160|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  481d              LDR      r0,|L6.164|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  481c              LDR      r0,|L6.168|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  481b              LDR      r0,|L6.172|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  481a              LDR      r0,|L6.176|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  4819              LDR      r0,|L6.180|
00004e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6a41              LDR      r1,[r0,#0x24]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  6a81              LDR      r1,[r0,#0x28]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  7841              LDRB     r1,[r0,#1]  ; bps
000062  f8ad1018          STRH     r1,[sp,#0x18]
000066  6f81              LDR      r1,[r0,#0x78]  ; bps
000068  f8ad101a          STRH     r1,[sp,#0x1a]
00006c  f8d01080          LDR      r1,[r0,#0x80]  ; bps
000070  f8ad101c          STRH     r1,[sp,#0x1c]
000074  f8d01084          LDR      r1,[r0,#0x84]  ; bps
000078  f8ad101e          STRH     r1,[sp,#0x1e]
00007c  f890005d          LDRB     r0,[r0,#0x5d]  ; bps
000080  f8ad0020          STRH     r0,[sp,#0x20]
000084  2122              MOVS     r1,#0x22
000086  4668              MOV      r0,sp
000088  f7fffffe          BL       uart_out_adr0
00008c  b00f              ADD      sp,sp,#0x3c
00008e  bd00              POP      {pc}
;;;91     
                          ENDP

                  |L6.144|
                          DCD      avar_stat
                  |L6.148|
                          DCD      spc_stat
                  |L6.152|
                          DCD      load_U
                  |L6.156|
                          DCD      load_I
                  |L6.160|
                          DCD      net_Ua
                  |L6.164|
                          DCD      net_Ub
                  |L6.168|
                          DCD      net_Uc
                  |L6.172|
                          DCD      net_F3
                  |L6.176|
                          DCD      t_ext
                  |L6.180|
                          DCD      bps

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  rs232_data_out_tki PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;82     
;;;83     for(j=1;j<num;j++)
000004  4834              LDR      r0,|L7.216|
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
000008  f8ad0000          STRH     r0,[sp,#0]            ;83
00000c  4833              LDR      r0,|L7.220|
00000e  7800              LDRB     r0,[r0,#0]  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  4832              LDR      r0,|L7.224|
000016  8800              LDRH     r0,[r0,#0]            ;83  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;83
;;;87     	}
;;;88     
;;;89     return r;	
;;;90     } 
00001c  4831              LDR      r0,|L7.228|
00001e  8800              LDRH     r0,[r0,#0]  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]
000024  4830              LDR      r0,|L7.232|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  482f              LDR      r0,|L7.236|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  482e              LDR      r0,|L7.240|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  482d              LDR      r0,|L7.244|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  482c              LDR      r0,|L7.248|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  482b              LDR      r0,|L7.252|
00004e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6a41              LDR      r1,[r0,#0x24]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  6a81              LDR      r1,[r0,#0x28]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  7841              LDRB     r1,[r0,#1]  ; bps
000062  f8ad1018          STRH     r1,[sp,#0x18]
000066  6f81              LDR      r1,[r0,#0x78]  ; bps
000068  f8ad101a          STRH     r1,[sp,#0x1a]
00006c  f8d01080          LDR      r1,[r0,#0x80]  ; bps
000070  f8ad101c          STRH     r1,[sp,#0x1c]
000074  f8d01084          LDR      r1,[r0,#0x84]  ; bps
000078  f8ad101e          STRH     r1,[sp,#0x1e]
00007c  f890105d          LDRB     r1,[r0,#0x5d]  ; bps
000080  f8ad1020          STRH     r1,[sp,#0x20]
000084  f8d010d4          LDR      r1,[r0,#0xd4]  ; bps
000088  f8ad1022          STRH     r1,[sp,#0x22]
00008c  f8d010dc          LDR      r1,[r0,#0xdc]  ; bps
000090  f8ad1024          STRH     r1,[sp,#0x24]
000094  f8d010e0          LDR      r1,[r0,#0xe0]  ; bps
000098  f8ad1026          STRH     r1,[sp,#0x26]
00009c  f89010b9          LDRB     r1,[r0,#0xb9]  ; bps
0000a0  f8ad1028          STRH     r1,[sp,#0x28]
0000a4  f8d01130          LDR      r1,[r0,#0x130]  ; bps
0000a8  f8ad102a          STRH     r1,[sp,#0x2a]
0000ac  f8d01138          LDR      r1,[r0,#0x138]  ; bps
0000b0  f8ad102c          STRH     r1,[sp,#0x2c]
0000b4  f8d0113c          LDR      r1,[r0,#0x13c]  ; bps
0000b8  f8ad102e          STRH     r1,[sp,#0x2e]
0000bc  f8900115          LDRB     r0,[r0,#0x115]  ; bps
0000c0  f8ad0030          STRH     r0,[sp,#0x30]
0000c4  480e              LDR      r0,|L7.256|
0000c6  8800              LDRH     r0,[r0,#0]  ; Ib_ips_termokompensat
0000c8  f8ad0032          STRH     r0,[sp,#0x32]
0000cc  2134              MOVS     r1,#0x34
0000ce  4668              MOV      r0,sp
0000d0  f7fffffe          BL       uart_out_adr0
0000d4  b00f              ADD      sp,sp,#0x3c
0000d6  bd00              POP      {pc}
;;;91     
                          ENDP

                  |L7.216|
                          DCD      avar_stat
                  |L7.220|
                          DCD      spc_stat
                  |L7.224|
                          DCD      load_U
                  |L7.228|
                          DCD      load_I
                  |L7.232|
                          DCD      net_Ua
                  |L7.236|
                          DCD      net_Ub
                  |L7.240|
                          DCD      net_Uc
                  |L7.244|
                          DCD      net_F3
                  |L7.248|
                          DCD      t_ext
                  |L7.252|
                          DCD      bps
                  |L7.256|
                          DCD      Ib_ips_termokompensat

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  getchar0 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  4b08              LDR      r3,|L8.36|
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  8919              LDRH     r1,[r3,#8]
                  |L8.4|
;;;82     
;;;83     for(j=1;j<num;j++)
000004  2900              CMP      r1,#0
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000006  d0fd              BEQ      |L8.4|
000008  4807              LDR      r0,|L8.40|
00000a  88da              LDRH     r2,[r3,#6]            ;85  ; rx_rd_index0
00000c  5c80              LDRB     r0,[r0,r2]
00000e  1c52              ADDS     r2,r2,#1
000010  b292              UXTH     r2,r2
000012  80da              STRH     r2,[r3,#6]            ;83
000014  f5b26f80          CMP      r2,#0x400             ;83
000018  d101              BNE      |L8.30|
;;;87     	}
;;;88     
;;;89     return r;	
00001a  2200              MOVS     r2,#0
;;;90     } 
00001c  80da              STRH     r2,[r3,#6]
                  |L8.30|
00001e  1e49              SUBS     r1,r1,#1
000020  8119              STRH     r1,[r3,#8]
000022  4770              BX       lr
;;;91     
                          ENDP

                  |L8.36|
                          DCD      ||.data||
                  |L8.40|
                          DCD      ||.bss||+0x64

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        100
                  rx_buffer0
                          %        1024
                  tx_buffer0
                          %        1024

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.13||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||area_number.14||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.bss||
                  rs232_data_out_buff
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  UART0TxEmpty
000000  01                DCB      0x01
                  bRXIN0
000001  00                DCB      0x00
                  rx_buffer_overflow0
000002  00                DCB      0x00
                  plazma_uart0
000003  00                DCB      0x00
                  rx_wr_index0
000004  0000              DCB      0x00,0x00
                  rx_rd_index0
000006  0000              DCB      0x00,0x00
                  rx_counter0
000008  0000              DCB      0x00,0x00
                  tx_wr_index0
00000a  0000              DCB      0x00,0x00
                  tx_rd_index0
00000c  0000              DCB      0x00,0x00
                  tx_counter0
00000e  0000              DCB      0x00,0x00
                  UART0Status
                          DCD      0x00000000

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  UART0Count
                          DCD      0x00000000

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  flag0
000000  00                DCB      0x00
